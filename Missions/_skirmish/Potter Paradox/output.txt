// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 230 0 0
// PrepareAllies ;
  12: CALL 2221 0 0
// Action ;
  16: CALL 4045 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 182 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 10
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 11
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 13
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 15
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_res_art := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// player_artifact_ready := false ;
 128: LD_ADDR_EXP 16
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 9
 140: PUSH
 141: LD_INT 52500
 143: PUSH
 144: LD_INT 67200
 146: PUSH
 147: LD_INT 84000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// bonus_num := 0 ;
 161: LD_ADDR_EXP 14
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// artifact_progress := 0 ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// end ;
 177: LD_VAR 0 1
 181: RET
// export function SetDiplomacy ; begin
 182: LD_INT 0
 184: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 185: LD_INT 92
 187: PPUSH
 188: LD_INT 48
 190: PPUSH
 191: LD_INT 8
 193: PPUSH
 194: LD_INT 32796
 196: NEG
 197: PPUSH
 198: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 202: LD_INT 92
 204: PPUSH
 205: LD_INT 48
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 215: LD_INT 5
 217: PPUSH
 218: LD_INT 8
 220: PPUSH
 221: CALL_OW 343
// end ; end_of_file
 225: LD_VAR 0 1
 229: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
// uc_side := 2 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 2
 257: ST_TO_ADDR
// uc_nation := nation_arabian ;
 258: LD_ADDR_OWVAR 21
 262: PUSH
 263: LD_INT 2
 265: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 6
 274: PPUSH
 275: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 279: LD_ADDR_OWVAR 26
 283: PUSH
 284: LD_STRING Nicolas Vervecken
 286: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING SecondCharsGal
 294: ST_TO_ADDR
// hc_face_number := 3 ;
 295: LD_ADDR_OWVAR 34
 299: PUSH
 300: LD_INT 3
 302: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 303: LD_ADDR_OWVAR 29
 307: PUSH
 308: LD_INT 11
 310: PUSH
 311: LD_INT 10
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// Vervecken := CreateHuman ;
 318: LD_ADDR_EXP 12
 322: PUSH
 323: CALL_OW 44
 327: ST_TO_ADDR
// InitHc ;
 328: CALL_OW 19
// uc_side := 8 ;
 332: LD_ADDR_OWVAR 20
 336: PUSH
 337: LD_INT 8
 339: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 340: LD_INT 23
 342: PPUSH
 343: CALL_OW 274
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 4000
 353: PUSH
 354: LD_INT 2500
 356: PUSH
 357: LD_INT 1250
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_OWVAR 67
 369: ARRAY
 370: PPUSH
 371: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 375: LD_INT 23
 377: PPUSH
 378: CALL_OW 274
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: LD_INT 300
 388: PPUSH
 389: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 393: LD_INT 23
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 3
 403: PPUSH
 404: LD_INT 100
 406: PUSH
 407: LD_INT 50
 409: PUSH
 410: LD_INT 30
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: PPUSH
 424: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 428: LD_ADDR_VAR 0 14
 432: PUSH
 433: LD_INT 23
 435: PPUSH
 436: CALL_OW 250
 440: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 441: LD_ADDR_VAR 0 15
 445: PUSH
 446: LD_INT 23
 448: PPUSH
 449: CALL_OW 251
 453: ST_TO_ADDR
// team := [ ] ;
 454: LD_ADDR_VAR 0 7
 458: PUSH
 459: EMPTY
 460: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 461: LD_ADDR_VAR 0 8
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: PUSH
 480: LD_OWVAR 67
 484: ARRAY
 485: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 486: LD_ADDR_VAR 0 9
 490: PUSH
 491: LD_INT 11
 493: PUSH
 494: LD_INT 9
 496: PUSH
 497: LD_INT 8
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 511: LD_ADDR_VAR 0 10
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_OWVAR 67
 534: ARRAY
 535: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 536: LD_ADDR_VAR 0 11
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 561: LD_ADDR_VAR 0 12
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 13
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 4
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 611: LD_ADDR_VAR 0 18
 615: PUSH
 616: LD_INT 13
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: LD_INT 26
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 14
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 25
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 14
 654: PUSH
 655: LD_INT 3
 657: PUSH
 658: LD_INT 5
 660: PUSH
 661: LD_INT 32
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 14
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: LD_INT 31
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_INT 14
 690: PUSH
 691: LD_INT 3
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 24
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 14
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: LD_INT 25
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: PUSH
 724: LD_INT 13
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 24
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_VAR 0 18
 765: PUSH
 766: LD_OWVAR 67
 770: MINUS
 771: PUSH
 772: LD_INT 1
 774: PLUS
 775: PUSH
 776: FOR_TO
 777: IFFALSE 906
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 779: LD_ADDR_OWVAR 37
 783: PUSH
 784: LD_VAR 0 18
 788: PUSH
 789: LD_VAR 0 2
 793: ARRAY
 794: PUSH
 795: LD_INT 1
 797: ARRAY
 798: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 799: LD_ADDR_OWVAR 39
 803: PUSH
 804: LD_VAR 0 18
 808: PUSH
 809: LD_VAR 0 2
 813: ARRAY
 814: PUSH
 815: LD_INT 2
 817: ARRAY
 818: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 819: LD_ADDR_OWVAR 38
 823: PUSH
 824: LD_VAR 0 18
 828: PUSH
 829: LD_VAR 0 2
 833: ARRAY
 834: PUSH
 835: LD_INT 3
 837: ARRAY
 838: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 839: LD_ADDR_OWVAR 40
 843: PUSH
 844: LD_VAR 0 18
 848: PUSH
 849: LD_VAR 0 2
 853: ARRAY
 854: PUSH
 855: LD_INT 4
 857: ARRAY
 858: ST_TO_ADDR
// un := CreateVehicle ;
 859: LD_ADDR_VAR 0 6
 863: PUSH
 864: CALL_OW 45
 868: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 869: LD_VAR 0 6
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: LD_INT 5
 879: PPUSH
 880: CALL_OW 12
 884: PPUSH
 885: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 889: LD_VAR 0 6
 893: PPUSH
 894: LD_INT 7
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 49
// end ;
 904: GO 776
 906: POP
 907: POP
// for i = 1 to ape_num do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_VAR 0 13
 922: PUSH
 923: FOR_TO
 924: IFFALSE 991
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 926: LD_INT 0
 928: PPUSH
 929: LD_INT 16
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: CALL_OW 12
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 960: LD_ADDR_VAR 0 7
 964: PUSH
 965: LD_VAR 0 7
 969: PPUSH
 970: LD_VAR 0 7
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: CALL_OW 44
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: GO 923
 991: POP
 992: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 993: LD_INT 1
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: LD_VAR 0 8
1003: PPUSH
1004: CALL_OW 380
// l1 := CreateHuman ;
1008: LD_ADDR_EXP 2
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_INT 23
1025: PPUSH
1026: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1030: LD_INT 1
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_VAR 0 8
1040: PPUSH
1041: CALL_OW 380
// l2 := CreateHuman ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: CALL_OW 44
1054: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 23
1062: PPUSH
1063: CALL_OW 52
// for class = 1 to 4 do
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 4
1079: PUSH
1080: FOR_TO
1081: IFFALSE 1180
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_VAR 0 9
1097: PUSH
1098: LD_VAR 0 10
1102: PUSH
1103: LD_VAR 0 11
1107: PUSH
1108: LD_VAR 0 12
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1176
// begin PrepareHuman ( false , class , skill ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_VAR 0 4
1135: PPUSH
1136: LD_VAR 0 8
1140: PPUSH
1141: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1145: LD_ADDR_VAR 0 7
1149: PUSH
1150: LD_VAR 0 7
1154: PPUSH
1155: LD_VAR 0 7
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: CALL_OW 44
1168: PPUSH
1169: CALL_OW 2
1173: ST_TO_ADDR
// end ;
1174: GO 1125
1176: POP
1177: POP
1178: GO 1080
1180: POP
1181: POP
// for i in team do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_VAR 0 7
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1669
// begin b := 0 ;
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 0
1202: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1203: LD_VAR 0 2
1207: PPUSH
1208: CALL_OW 257
1212: PUSH
1213: LD_INT 1
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1328
1221: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1222: LD_ADDR_VAR 0 5
1226: PUSH
1227: LD_INT 22
1229: PUSH
1230: LD_OWVAR 20
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 30
1254: PUSH
1255: LD_INT 31
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 58
1269: PUSH
1270: EMPTY
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 69
1282: ST_TO_ADDR
// if not b then
1283: LD_VAR 0 5
1287: NOT
1288: IFFALSE 1326
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1290: LD_ADDR_VAR 0 5
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_OWVAR 20
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 5
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL_OW 69
1325: ST_TO_ADDR
// end ; class_engineer :
1326: GO 1567
1328: LD_INT 2
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1375
1336: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1337: LD_ADDR_VAR 0 5
1341: PUSH
1342: LD_INT 22
1344: PUSH
1345: LD_OWVAR 20
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: LD_INT 30
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 69
1372: ST_TO_ADDR
1373: GO 1567
1375: LD_INT 3
1377: DOUBLE
1378: EQUAL
1379: IFTRUE 1383
1381: GO 1472
1383: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 5
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_OWVAR 20
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 21
1403: PUSH
1404: LD_INT 2
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 58
1413: PUSH
1414: EMPTY
1415: LIST
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 69
1426: ST_TO_ADDR
// if not b then
1427: LD_VAR 0 5
1431: NOT
1432: IFFALSE 1470
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1434: LD_ADDR_VAR 0 5
1438: PUSH
1439: LD_INT 22
1441: PUSH
1442: LD_OWVAR 20
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 30
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PPUSH
1465: CALL_OW 69
1469: ST_TO_ADDR
// end ; class_scientistic :
1470: GO 1567
1472: LD_INT 4
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1519
1480: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1481: LD_ADDR_VAR 0 5
1485: PUSH
1486: LD_INT 22
1488: PUSH
1489: LD_OWVAR 20
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 30
1500: PUSH
1501: LD_INT 8
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: ST_TO_ADDR
// end ; class_apeman_soldier :
1517: GO 1567
1519: LD_INT 15
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1566
1527: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1528: LD_ADDR_VAR 0 5
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_OWVAR 20
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 30
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PPUSH
1559: CALL_OW 69
1563: ST_TO_ADDR
1564: GO 1567
1566: POP
// if b then
1567: LD_VAR 0 5
1571: IFFALSE 1642
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1573: LD_VAR 0 5
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: CALL_OW 266
1586: PUSH
1587: LD_INT 31
1589: EQUAL
1590: IFFALSE 1612
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: PPUSH
1606: CALL 4808 0 2
1610: GO 1640
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_INT 1
1624: PPUSH
1625: LD_VAR 0 5
1629: PPUSH
1630: CALL_OW 12
1634: ARRAY
1635: PPUSH
1636: CALL_OW 52
1640: GO 1667
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 14
1651: PPUSH
1652: LD_VAR 0 15
1656: PPUSH
1657: LD_INT 15
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 50
// end ;
1667: GO 1192
1669: POP
1670: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1671: LD_ADDR_VAR 0 16
1675: PUSH
1676: LD_INT 26
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_OWVAR 67
1697: ARRAY
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 5
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_OWVAR 67
1724: ARRAY
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 24
1732: PUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 5
1738: PUSH
1739: LD_INT 4
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_OWVAR 67
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 30
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: LD_INT 1
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_OWVAR 67
1778: ARRAY
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_INT 22
1797: PUSH
1798: LD_OWVAR 20
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 32
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: PUSH
1826: FOR_IN
1827: IFFALSE 2000
// begin if weapons then
1829: LD_VAR 0 16
1833: IFFALSE 1957
// begin k := rand ( 1 , weapons ) ;
1835: LD_ADDR_VAR 0 3
1839: PUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_VAR 0 16
1847: PPUSH
1848: CALL_OW 12
1852: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1853: LD_ADDR_VAR 0 17
1857: PUSH
1858: LD_VAR 0 16
1862: PUSH
1863: LD_VAR 0 3
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1873: LD_ADDR_VAR 0 16
1877: PUSH
1878: LD_VAR 0 16
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: LD_INT 2
1890: PPUSH
1891: LD_VAR 0 16
1895: PUSH
1896: LD_VAR 0 3
1900: ARRAY
1901: PUSH
1902: LD_INT 2
1904: ARRAY
1905: PUSH
1906: LD_INT 1
1908: MINUS
1909: PPUSH
1910: CALL 4900 0 4
1914: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1915: LD_VAR 0 16
1919: PUSH
1920: LD_VAR 0 3
1924: ARRAY
1925: PUSH
1926: LD_INT 2
1928: ARRAY
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: IFFALSE 1955
// weapons := Delete ( weapons , k ) ;
1935: LD_ADDR_VAR 0 16
1939: PUSH
1940: LD_VAR 0 16
1944: PPUSH
1945: LD_VAR 0 3
1949: PPUSH
1950: CALL_OW 3
1954: ST_TO_ADDR
// end else
1955: GO 1984
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1957: LD_ADDR_VAR 0 17
1961: PUSH
1962: LD_INT 27
1964: PUSH
1965: LD_INT 23
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: CALL_OW 12
1982: ARRAY
1983: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_VAR 0 17
1993: PPUSH
1994: CALL_OW 431
// end ;
1998: GO 1826
2000: POP
2001: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2002: LD_INT 1
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_VAR 0 8
2012: PUSH
2013: LD_INT 1
2015: PLUS
2016: PPUSH
2017: CALL_OW 380
// hc_gallery := potter ;
2021: LD_ADDR_OWVAR 33
2025: PUSH
2026: LD_STRING potter
2028: ST_TO_ADDR
// hc_face_number := 1 ;
2029: LD_ADDR_OWVAR 34
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// hc_importance := 100 ;
2037: LD_ADDR_OWVAR 32
2041: PUSH
2042: LD_INT 100
2044: ST_TO_ADDR
// hc_name := Mike Gerste ;
2045: LD_ADDR_OWVAR 26
2049: PUSH
2050: LD_STRING Mike Gerste
2052: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 10
2060: PUSH
2061: LD_INT 11
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: ST_TO_ADDR
// legion_commander := CreateHuman ;
2068: LD_ADDR_EXP 1
2072: PUSH
2073: CALL_OW 44
2077: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2078: LD_EXP 1
2082: PPUSH
2083: LD_INT 23
2085: PPUSH
2086: CALL_OW 52
// uc_side := 5 ;
2090: LD_ADDR_OWVAR 20
2094: PUSH
2095: LD_INT 5
2097: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 8
2108: PPUSH
2109: CALL_OW 380
// hc_gallery := potter ;
2113: LD_ADDR_OWVAR 33
2117: PUSH
2118: LD_STRING potter
2120: ST_TO_ADDR
// hc_face_number := 2 ;
2121: LD_ADDR_OWVAR 34
2125: PUSH
2126: LD_INT 2
2128: ST_TO_ADDR
// hc_importance := 0 ;
2129: LD_ADDR_OWVAR 32
2133: PUSH
2134: LD_INT 0
2136: ST_TO_ADDR
// hc_name := George Potter ;
2137: LD_ADDR_OWVAR 26
2141: PUSH
2142: LD_STRING George Potter
2144: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2145: LD_ADDR_OWVAR 29
2149: PUSH
2150: LD_INT 12
2152: PUSH
2153: LD_INT 9
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: ST_TO_ADDR
// potter := CreateHuman ;
2160: LD_ADDR_EXP 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2170: LD_EXP 4
2174: PPUSH
2175: LD_INT 4
2177: PPUSH
2178: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2182: LD_EXP 4
2186: PPUSH
2187: LD_INT 103
2189: PPUSH
2190: LD_INT 45
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2200: LD_EXP 4
2204: PPUSH
2205: LD_INT 23
2207: PPUSH
2208: CALL_OW 119
// InitHc ( ) ;
2212: CALL_OW 19
// end ; end_of_file
2216: LD_VAR 0 1
2220: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 5 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 5
2235: ST_TO_ADDR
// uc_nation := nation_arabian ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_OWVAR 20
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 30
2263: PUSH
2264: LD_INT 5
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 69
2279: ST_TO_ADDR
// for i = 1 to 3 do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 3
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2332
// begin PrepareHuman ( false , 2 , 6 ) ;
2296: LD_INT 0
2298: PPUSH
2299: LD_INT 2
2301: PPUSH
2302: LD_INT 6
2304: PPUSH
2305: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2309: CALL_OW 44
2313: PPUSH
2314: LD_INT 27
2316: PPUSH
2317: LD_INT 22
2319: PPUSH
2320: LD_INT 5
2322: PPUSH
2323: LD_INT 0
2325: PPUSH
2326: CALL_OW 50
// end ;
2330: GO 2293
2332: POP
2333: POP
// for i = 1 to 3 do
2334: LD_ADDR_VAR 0 2
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 3
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2383
// begin PrepareHuman ( false , 1 , 6 ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 6
2358: PPUSH
2359: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 4
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PPUSH
2377: CALL_OW 52
// end ;
2381: GO 2347
2383: POP
2384: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: LD_INT 22
2392: PUSH
2393: LD_OWVAR 20
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 2
2404: PUSH
2405: LD_INT 30
2407: PUSH
2408: LD_INT 31
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 30
2417: PUSH
2418: LD_INT 32
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2527
// begin PrepareHuman ( false , 1 , 6 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2455: CALL_OW 44
2459: PPUSH
2460: LD_VAR 0 2
2464: PPUSH
2465: CALL 4808 0 2
// if GetBType ( i ) = b_bunker then
2469: LD_VAR 0 2
2473: PPUSH
2474: CALL_OW 266
2478: PUSH
2479: LD_INT 32
2481: EQUAL
2482: IFFALSE 2525
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 27
2491: PUSH
2492: LD_INT 25
2494: PUSH
2495: LD_INT 24
2497: PUSH
2498: LD_INT 28
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_VAR 0 2
2511: PUSH
2512: LD_INT 4
2514: MOD
2515: PUSH
2516: LD_INT 1
2518: PLUS
2519: ARRAY
2520: PPUSH
2521: CALL_OW 431
// end ;
2525: GO 2439
2527: POP
2528: POP
// for i = 1 to 3 do
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 3
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2660
// begin vc_chassis := ar_half_tracked ;
2545: LD_ADDR_OWVAR 37
2549: PUSH
2550: LD_INT 14
2552: ST_TO_ADDR
// vc_engine := engine_solar ;
2553: LD_ADDR_OWVAR 39
2557: PUSH
2558: LD_INT 2
2560: ST_TO_ADDR
// vc_control := control_manual ;
2561: LD_ADDR_OWVAR 38
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2569: LD_ADDR_OWVAR 40
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 27
2579: PUSH
2580: LD_INT 26
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_VAR 0 2
2592: ARRAY
2593: ST_TO_ADDR
// un := CreateVehicle ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 45
2603: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 3
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2644: CALL_OW 44
2648: PPUSH
2649: LD_VAR 0 3
2653: PPUSH
2654: CALL_OW 52
// end ;
2658: GO 2542
2660: POP
2661: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: LD_INT 6
2670: PPUSH
2671: CALL_OW 380
// al_commander := CreateHuman ;
2675: LD_ADDR_EXP 5
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2685: LD_EXP 5
2689: PPUSH
2690: LD_INT 22
2692: PUSH
2693: LD_OWVAR 20
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PPUSH
2725: CALL_OW 52
// InitHc ( ) ;
2729: CALL_OW 19
// end ;
2733: LD_VAR 0 1
2737: RET
// export function ChangeSide ( ) ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: LD_INT 22
2749: PUSH
2750: LD_INT 5
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 69
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2779
// SetSide ( i , 8 ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_INT 8
2772: PPUSH
2773: CALL_OW 235
2777: GO 2762
2779: POP
2780: POP
// end ;
2781: LD_VAR 0 1
2785: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IFFALSE 3314
2802: GO 2804
2804: DISABLE
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
// begin enable ;
2813: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: LD_INT 22
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 2
2831: PUSH
2832: LD_INT 21
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 21
2844: PUSH
2845: LD_INT 2
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PPUSH
2861: CALL_OW 69
2865: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2866: LD_ADDR_VAR 0 5
2870: PUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 5
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 32
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: LD_INT 24
2896: PUSH
2897: LD_INT 1000
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 69
2917: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 54
2933: PUSH
2934: EMPTY
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 25
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PPUSH
2955: CALL_OW 72
2959: ST_TO_ADDR
// if not list then
2960: LD_VAR 0 2
2964: NOT
2965: IFFALSE 2969
// exit ;
2967: GO 3314
// for i in list do
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 2
2978: PUSH
2979: FOR_IN
2980: IFFALSE 3312
// begin if b then
2982: LD_VAR 0 5
2986: IFFALSE 3065
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_INT 25
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PPUSH
3008: CALL_OW 72
3012: PUSH
3013: FOR_IN
3014: IFFALSE 3063
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 314
3025: NOT
3026: PUSH
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 110
3036: PUSH
3037: LD_INT 7
3039: NONEQUAL
3040: AND
3041: IFFALSE 3061
// ComRepairBuilding ( j , b [ 1 ] ) ;
3043: LD_VAR 0 4
3047: PPUSH
3048: LD_VAR 0 5
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: CALL_OW 130
3061: GO 3013
3063: POP
3064: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 256
3074: PUSH
3075: LD_INT 500
3077: LESS
3078: PUSH
3079: LD_VAR 0 1
3083: PPUSH
3084: CALL_OW 110
3088: PUSH
3089: LD_INT 7
3091: EQUAL
3092: NOT
3093: AND
3094: IFFALSE 3144
// begin ComMoveToArea ( i , guard_hill ) ;
3096: LD_VAR 0 1
3100: PPUSH
3101: LD_INT 11
3103: PPUSH
3104: CALL_OW 113
// SetTag ( i , 7 ) ;
3108: LD_VAR 0 1
3112: PPUSH
3113: LD_INT 7
3115: PPUSH
3116: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3120: LD_VAR 0 1
3124: PPUSH
3125: CALL_OW 247
3129: PUSH
3130: LD_INT 2
3132: EQUAL
3133: IFFALSE 3144
// begin AddComExitVehicle ( i ) ;
3135: LD_VAR 0 1
3139: PPUSH
3140: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3144: LD_VAR 0 1
3148: PPUSH
3149: CALL_OW 256
3153: PUSH
3154: LD_INT 1000
3156: EQUAL
3157: PUSH
3158: LD_VAR 0 1
3162: PPUSH
3163: CALL_OW 110
3167: PUSH
3168: LD_INT 7
3170: EQUAL
3171: AND
3172: PUSH
3173: LD_VAR 0 1
3177: PPUSH
3178: CALL_OW 310
3182: NOT
3183: AND
3184: PUSH
3185: LD_VAR 0 6
3189: AND
3190: IFFALSE 3218
// begin SetTag ( i , 0 ) ;
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3204: LD_VAR 0 6
3208: PPUSH
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3218: LD_VAR 0 1
3222: PPUSH
3223: CALL_OW 247
3227: PUSH
3228: LD_INT 2
3230: EQUAL
3231: PUSH
3232: LD_VAR 0 1
3236: PPUSH
3237: CALL_OW 110
3241: PUSH
3242: LD_INT 7
3244: NONEQUAL
3245: AND
3246: PUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 314
3256: NOT
3257: AND
3258: IFFALSE 3310
// if FilterAllUnits ( [ f_side , 7 ] ) then
3260: LD_INT 22
3262: PUSH
3263: LD_INT 7
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PPUSH
3270: CALL_OW 69
3274: IFFALSE 3310
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 7
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_VAR 0 1
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: CALL_OW 115
// end ;
3310: GO 2979
3312: POP
3313: POP
// end ; end_of_file
3314: PPOPN 6
3316: END
// export function Game ; var i , val , areas , wave ; begin
3317: LD_INT 0
3319: PPUSH
3320: PPUSH
3321: PPUSH
3322: PPUSH
3323: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_INT 1
3331: PUSH
3332: LD_INT 2
3334: PUSH
3335: LD_INT 3
3337: PUSH
3338: LD_INT 4
3340: PUSH
3341: LD_INT 5
3343: PUSH
3344: LD_INT 6
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3355: LD_ADDR_VAR 0 3
3359: PUSH
3360: LD_INT 5
3362: PUSH
3363: LD_INT 6
3365: PUSH
3366: LD_INT 7
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: LD_OWVAR 67
3378: ARRAY
3379: ST_TO_ADDR
// wave := 1 ;
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// while not game_over do
3388: LD_EXP 7
3392: NOT
3393: IFFALSE 3549
// begin repeat begin Wait ( 0 0$01 ) ;
3395: LD_INT 35
3397: PPUSH
3398: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3402: LD_ADDR_EXP 11
3406: PUSH
3407: LD_EXP 11
3411: PUSH
3412: LD_INT 35
3414: PLUS
3415: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3416: LD_INT 22
3418: PUSH
3419: LD_INT 7
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PPUSH
3426: CALL_OW 69
3430: PUSH
3431: LD_INT 10
3433: LESS
3434: PUSH
3435: LD_EXP 11
3439: PUSH
3440: LD_INT 21000
3442: GREATEREQUAL
3443: OR
3444: IFFALSE 3395
// wave_time := 0 0$00 ;
3446: LD_ADDR_EXP 11
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3454: LD_INT 5250
3456: PPUSH
3457: CALL_OW 67
// if not ignore_wave then
3461: LD_EXP 15
3465: NOT
3466: IFFALSE 3539
// begin for i = 1 to areas do
3468: LD_ADDR_VAR 0 2
3472: PUSH
3473: DOUBLE
3474: LD_INT 1
3476: DEC
3477: ST_TO_ADDR
3478: LD_VAR 0 4
3482: PUSH
3483: FOR_TO
3484: IFFALSE 3521
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3486: LD_VAR 0 5
3490: PUSH
3491: LD_VAR 0 3
3495: PLUS
3496: PPUSH
3497: LD_VAR 0 4
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PPUSH
3508: CALL 3554 0 2
// Wait ( 0 0$10 ) ;
3512: LD_INT 350
3514: PPUSH
3515: CALL_OW 67
// end ;
3519: GO 3483
3521: POP
3522: POP
// wave := wave + 1 ;
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: LD_VAR 0 5
3532: PUSH
3533: LD_INT 1
3535: PLUS
3536: ST_TO_ADDR
// end else
3537: GO 3547
// ignore_wave := false ;
3539: LD_ADDR_EXP 15
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// end ;
3547: GO 3388
// end ;
3549: LD_VAR 0 1
3553: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3554: LD_INT 0
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
// uc_side := 7 ;
3561: LD_ADDR_OWVAR 20
3565: PUSH
3566: LD_INT 7
3568: ST_TO_ADDR
// uc_nation := 2 ;
3569: LD_ADDR_OWVAR 21
3573: PUSH
3574: LD_INT 2
3576: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_INT 10
3584: PUSH
3585: LD_OWVAR 1
3589: PUSH
3590: LD_INT 10500
3592: DIV
3593: PLUS
3594: ST_TO_ADDR
// if v > 25 then
3595: LD_VAR 0 5
3599: PUSH
3600: LD_INT 25
3602: GREATER
3603: IFFALSE 3613
// v := 25 ;
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: LD_INT 25
3612: ST_TO_ADDR
// InitHc ( ) ;
3613: CALL_OW 19
// hc_gallery :=  ;
3617: LD_ADDR_OWVAR 33
3621: PUSH
3622: LD_STRING 
3624: ST_TO_ADDR
// hc_importance := 0 ;
3625: LD_ADDR_OWVAR 32
3629: PUSH
3630: LD_INT 0
3632: ST_TO_ADDR
// hc_name :=  ;
3633: LD_ADDR_OWVAR 26
3637: PUSH
3638: LD_STRING 
3640: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3641: LD_ADDR_OWVAR 29
3645: PUSH
3646: LD_VAR 0 5
3650: PUSH
3651: LD_VAR 0 5
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: ST_TO_ADDR
// if val > 35 then
3660: LD_VAR 0 1
3664: PUSH
3665: LD_INT 35
3667: GREATER
3668: IFFALSE 3678
// val := 35 ;
3670: LD_ADDR_VAR 0 1
3674: PUSH
3675: LD_INT 35
3677: ST_TO_ADDR
// for i = 1 to val do
3678: LD_ADDR_VAR 0 4
3682: PUSH
3683: DOUBLE
3684: LD_INT 1
3686: DEC
3687: ST_TO_ADDR
3688: LD_VAR 0 1
3692: PUSH
3693: FOR_TO
3694: IFFALSE 3905
// begin if i mod 9 = 0 then
3696: LD_VAR 0 4
3700: PUSH
3701: LD_INT 9
3703: MOD
3704: PUSH
3705: LD_INT 0
3707: EQUAL
3708: IFFALSE 3720
// class := class_apeman_kamikaze else
3710: LD_ADDR_VAR 0 7
3714: PUSH
3715: LD_INT 17
3717: ST_TO_ADDR
3718: GO 3752
// if i mod 4 = 0 then
3720: LD_VAR 0 4
3724: PUSH
3725: LD_INT 4
3727: MOD
3728: PUSH
3729: LD_INT 0
3731: EQUAL
3732: IFFALSE 3744
// class := class_apeman_soldier else
3734: LD_ADDR_VAR 0 7
3738: PUSH
3739: LD_INT 15
3741: ST_TO_ADDR
3742: GO 3752
// class := class_apeman ;
3744: LD_ADDR_VAR 0 7
3748: PUSH
3749: LD_INT 12
3751: ST_TO_ADDR
// if i mod 6 = 0 then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_INT 6
3759: MOD
3760: PUSH
3761: LD_INT 0
3763: EQUAL
3764: IFFALSE 3837
// begin vc_chassis := ar_half_tracked ;
3766: LD_ADDR_OWVAR 37
3770: PUSH
3771: LD_INT 14
3773: ST_TO_ADDR
// vc_control := control_apeman ;
3774: LD_ADDR_OWVAR 38
3778: PUSH
3779: LD_INT 5
3781: ST_TO_ADDR
// vc_engine := engine_siberite ;
3782: LD_ADDR_OWVAR 39
3786: PUSH
3787: LD_INT 3
3789: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3790: LD_ADDR_OWVAR 40
3794: PUSH
3795: LD_INT 28
3797: PUSH
3798: LD_INT 27
3800: PUSH
3801: LD_INT 29
3803: PUSH
3804: LD_INT 91
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 4
3818: PPUSH
3819: CALL_OW 12
3823: ARRAY
3824: ST_TO_ADDR
// un := CreateVehicle ;
3825: LD_ADDR_VAR 0 6
3829: PUSH
3830: CALL_OW 45
3834: ST_TO_ADDR
// end else
3835: GO 3862
// begin PrepareHuman ( sex_male , class , 10 ) ;
3837: LD_INT 1
3839: PPUSH
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_INT 10
3847: PPUSH
3848: CALL_OW 380
// un := CreateHuman ;
3852: LD_ADDR_VAR 0 6
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3862: LD_VAR 0 6
3866: PPUSH
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3879: LD_VAR 0 6
3883: PPUSH
3884: CALL_OW 250
3888: PPUSH
3889: LD_VAR 0 6
3893: PPUSH
3894: CALL_OW 251
3898: PPUSH
3899: CALL_OW 494
// end ;
3903: GO 3693
3905: POP
3906: POP
// end ;
3907: LD_VAR 0 3
3911: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3912: LD_EXP 6
3916: PUSH
3917: LD_EXP 7
3921: NOT
3922: AND
3923: IFFALSE 4042
3925: GO 3927
3927: DISABLE
3928: LD_INT 0
3930: PPUSH
3931: PPUSH
3932: PPUSH
// begin enable ;
3933: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: LD_INT 22
3941: PUSH
3942: LD_INT 7
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 69
3953: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3954: LD_ADDR_VAR 0 3
3958: PUSH
3959: LD_INT 81
3961: PUSH
3962: LD_INT 7
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PPUSH
3969: CALL_OW 69
3973: ST_TO_ADDR
// if not list then
3974: LD_VAR 0 2
3978: NOT
3979: IFFALSE 3983
// exit ;
3981: GO 4042
// for i in list do
3983: LD_ADDR_VAR 0 1
3987: PUSH
3988: LD_VAR 0 2
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4040
// begin if enemy then
3996: LD_VAR 0 3
4000: IFFALSE 4038
// if not HasTask ( i ) then
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 314
4011: NOT
4012: IFFALSE 4038
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 74
4033: PPUSH
4034: CALL_OW 115
// end ;
4038: GO 3993
4040: POP
4041: POP
// end ; end_of_file
4042: PPOPN 3
4044: END
// export function Action ; begin
4045: LD_INT 0
4047: PPUSH
// InGameOn ;
4048: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4052: LD_INT 23
4054: PPUSH
4055: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4059: LD_EXP 1
4063: PPUSH
4064: LD_STRING DL-1
4066: PPUSH
4067: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4071: LD_EXP 2
4075: PPUSH
4076: LD_STRING DA-1
4078: PPUSH
4079: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4083: LD_EXP 3
4087: PPUSH
4088: LD_STRING DA-2
4090: PPUSH
4091: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4095: LD_EXP 1
4099: PPUSH
4100: LD_STRING DL-2
4102: PPUSH
4103: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4107: LD_EXP 3
4111: PPUSH
4112: LD_STRING DA-3
4114: PPUSH
4115: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4119: LD_EXP 1
4123: PPUSH
4124: LD_STRING DL-3
4126: PPUSH
4127: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4131: LD_EXP 2
4135: PPUSH
4136: LD_STRING DA-4
4138: PPUSH
4139: CALL_OW 88
// if not dialogue_skipped then
4143: LD_OWVAR 59
4147: NOT
4148: IFFALSE 4233
// begin Wait ( 0 0$01 ) ;
4150: LD_INT 35
4152: PPUSH
4153: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4157: LD_EXP 2
4161: PUSH
4162: LD_EXP 3
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PPUSH
4171: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4175: LD_EXP 2
4179: PPUSH
4180: LD_INT 107
4182: PPUSH
4183: LD_INT 53
4185: PPUSH
4186: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4190: LD_EXP 3
4194: PPUSH
4195: LD_INT 108
4197: PPUSH
4198: LD_INT 53
4200: PPUSH
4201: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4205: LD_EXP 2
4209: PPUSH
4210: LD_EXP 4
4214: PPUSH
4215: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4219: LD_EXP 3
4223: PPUSH
4224: LD_EXP 4
4228: PPUSH
4229: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4233: LD_INT 35
4235: PPUSH
4236: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4240: LD_EXP 2
4244: PPUSH
4245: LD_INT 107
4247: PPUSH
4248: LD_INT 53
4250: PPUSH
4251: CALL_OW 307
4255: PUSH
4256: LD_OWVAR 59
4260: OR
4261: IFFALSE 4233
// if not dialogue_skipped then
4263: LD_OWVAR 59
4267: NOT
4268: IFFALSE 4369
// begin ComTurnUnit ( potter , l1 ) ;
4270: LD_EXP 4
4274: PPUSH
4275: LD_EXP 2
4279: PPUSH
4280: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4284: LD_INT 10
4286: PPUSH
4287: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4291: LD_EXP 4
4295: PPUSH
4296: LD_INT 108
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 0
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 483
// Wait ( 0 0$01 ) ;
4312: LD_INT 35
4314: PPUSH
4315: CALL_OW 67
// RemoveUnit ( potter ) ;
4319: LD_EXP 4
4323: PPUSH
4324: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4328: LD_EXP 2
4332: PPUSH
4333: LD_STRING DA-5
4335: PPUSH
4336: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4340: LD_EXP 3
4344: PPUSH
4345: LD_STRING DA-6
4347: PPUSH
4348: CALL_OW 88
// Wait ( 0 0$02 ) ;
4352: LD_INT 70
4354: PPUSH
4355: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4359: LD_INT 25
4361: PPUSH
4362: LD_INT 19
4364: PPUSH
4365: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4369: LD_INT 20
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: CALL 3554 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4379: LD_EXP 5
4383: PPUSH
4384: LD_STRING DLa-1
4386: PPUSH
4387: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4391: LD_EXP 1
4395: PPUSH
4396: LD_STRING DL-5
4398: PPUSH
4399: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4403: LD_INT 23
4405: PPUSH
4406: CALL_OW 87
// InGameOff ;
4410: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4414: LD_STRING C1
4416: PPUSH
4417: CALL_OW 337
// alert := true ;
4421: LD_ADDR_EXP 6
4425: PUSH
4426: LD_INT 1
4428: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4429: LD_EXP 5
4433: PPUSH
4434: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4438: LD_EXP 5
4442: PPUSH
4443: LD_INT 11
4445: PPUSH
4446: CALL_OW 173
// Wait ( 0 0$30 ) ;
4450: LD_INT 1050
4452: PPUSH
4453: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4457: LD_INT 10
4459: PPUSH
4460: LD_INT 4
4462: PPUSH
4463: CALL 3554 0 2
// Wait ( 0 0$35 ) ;
4467: LD_INT 1225
4469: PPUSH
4470: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4474: LD_INT 10
4476: PPUSH
4477: LD_INT 5
4479: PPUSH
4480: CALL 3554 0 2
// Wait ( 0 0$03 ) ;
4484: LD_INT 105
4486: PPUSH
4487: CALL_OW 67
// Game ;
4491: CALL 3317 0 0
// end ;
4495: LD_VAR 0 1
4499: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4500: LD_INT 22
4502: PUSH
4503: LD_INT 7
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 0
4517: EQUAL
4518: PUSH
4519: LD_EXP 10
4523: PUSH
4524: LD_INT 1500
4526: GREATEREQUAL
4527: AND
4528: IFFALSE 4756
4530: GO 4532
4532: DISABLE
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
// begin DialogueOn ;
4537: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4541: LD_EXP 12
4545: PPUSH
4546: LD_STRING DVr-1
4548: PPUSH
4549: CALL_OW 94
// DialogueOff ;
4553: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4557: LD_STRING QBonusInfo
4559: PPUSH
4560: CALL_OW 97
4564: PUSH
4565: LD_INT 1
4567: DOUBLE
4568: EQUAL
4569: IFTRUE 4573
4571: GO 4584
4573: POP
// bonus_active := true ; end ;
4574: LD_ADDR_EXP 13
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
4582: GO 4585
4584: POP
// bonus_num := 4 ;
4585: LD_ADDR_EXP 14
4589: PUSH
4590: LD_INT 4
4592: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ;
4593: LD_OWVAR 2
4597: PPUSH
4598: LD_INT 12
4600: PPUSH
4601: LD_INT 2
4603: PPUSH
4604: LD_INT 23
4606: PPUSH
4607: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4611: LD_ADDR_VAR 0 1
4615: PUSH
4616: LD_INT 500
4618: PUSH
4619: LD_INT 3500
4621: PUSH
4622: LD_INT 5750
4624: PUSH
4625: LD_INT 10000
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4634: LD_INT 10500
4636: PUSH
4637: LD_INT 12600
4639: PUSH
4640: LD_INT 14700
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: PUSH
4648: LD_OWVAR 67
4652: ARRAY
4653: PPUSH
4654: CALL_OW 67
// for i = 1 to tmp do
4658: LD_ADDR_VAR 0 2
4662: PUSH
4663: DOUBLE
4664: LD_INT 1
4666: DEC
4667: ST_TO_ADDR
4668: LD_VAR 0 1
4672: PUSH
4673: FOR_TO
4674: IFFALSE 4706
// if points >= tmp [ i ] then
4676: LD_EXP 10
4680: PUSH
4681: LD_VAR 0 1
4685: PUSH
4686: LD_VAR 0 2
4690: ARRAY
4691: GREATEREQUAL
4692: IFFALSE 4704
// bonus_num := i ;
4694: LD_ADDR_EXP 14
4698: PUSH
4699: LD_VAR 0 2
4703: ST_TO_ADDR
4704: GO 4673
4706: POP
4707: POP
// case Query ( QBonusInfo ) of 1 :
4708: LD_STRING QBonusInfo
4710: PPUSH
4711: CALL_OW 97
4715: PUSH
4716: LD_INT 1
4718: DOUBLE
4719: EQUAL
4720: IFTRUE 4724
4722: GO 4745
4724: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4725: LD_OWVAR 2
4729: PPUSH
4730: LD_INT 12
4732: PPUSH
4733: LD_INT 2
4735: PPUSH
4736: LD_INT 23
4738: PPUSH
4739: CALL_OW 468
4743: GO 4746
4745: POP
// until points >= 15000 ;
4746: LD_EXP 10
4750: PUSH
4751: LD_INT 15000
4753: GREATEREQUAL
4754: IFFALSE 4634
// end ;
4756: PPOPN 2
4758: END
// export function Win ; begin
4759: LD_INT 0
4761: PPUSH
// AddMedal ( med , 1 ) ;
4762: LD_STRING med
4764: PPUSH
4765: LD_INT 1
4767: PPUSH
4768: CALL_OW 101
// AddMedal ( med , 1 ) ;
4772: LD_STRING med
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 101
// AddMedal ( med , 1 ) ;
4782: LD_STRING med
4784: PPUSH
4785: LD_INT 1
4787: PPUSH
4788: CALL_OW 101
// GiveMedals ( MAIN ) ;
4792: LD_STRING MAIN
4794: PPUSH
4795: CALL_OW 102
// YouWin ;
4799: CALL_OW 103
// end ; end_of_file
4803: LD_VAR 0 1
4807: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4808: LD_INT 0
4810: PPUSH
4811: PPUSH
// dir := GetDir ( b ) ;
4812: LD_ADDR_VAR 0 4
4816: PUSH
4817: LD_VAR 0 2
4821: PPUSH
4822: CALL_OW 254
4826: ST_TO_ADDR
// if dir < 3 then
4827: LD_VAR 0 4
4831: PUSH
4832: LD_INT 3
4834: LESS
4835: IFFALSE 4853
// dir := dir + 3 else
4837: LD_ADDR_VAR 0 4
4841: PUSH
4842: LD_VAR 0 4
4846: PUSH
4847: LD_INT 3
4849: PLUS
4850: ST_TO_ADDR
4851: GO 4867
// dir := dir - 3 ;
4853: LD_ADDR_VAR 0 4
4857: PUSH
4858: LD_VAR 0 4
4862: PUSH
4863: LD_INT 3
4865: MINUS
4866: ST_TO_ADDR
// SetDir ( un , dir ) ;
4867: LD_VAR 0 1
4871: PPUSH
4872: LD_VAR 0 4
4876: PPUSH
4877: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_VAR 0 2
4890: PPUSH
4891: CALL_OW 52
// end ;
4895: LD_VAR 0 3
4899: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4900: LD_INT 0
4902: PPUSH
4903: PPUSH
4904: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4905: LD_ADDR_VAR 0 7
4909: PUSH
4910: LD_VAR 0 1
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_VAR 0 4
4930: PPUSH
4931: CALL_OW 1
4935: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4936: LD_ADDR_VAR 0 1
4940: PUSH
4941: LD_VAR 0 1
4945: PPUSH
4946: LD_VAR 0 2
4950: PPUSH
4951: LD_VAR 0 7
4955: PPUSH
4956: CALL_OW 1
4960: ST_TO_ADDR
// result := tab ;
4961: LD_ADDR_VAR 0 5
4965: PUSH
4966: LD_VAR 0 1
4970: ST_TO_ADDR
// end ;
4971: LD_VAR 0 5
4975: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4976: LD_INT 0
4978: PPUSH
4979: PPUSH
4980: PPUSH
// if not GetControl ( veh ) = control_manual then
4981: LD_VAR 0 1
4985: PPUSH
4986: CALL_OW 263
4990: PUSH
4991: LD_INT 1
4993: EQUAL
4994: NOT
4995: IFFALSE 5007
// result := false else
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
5005: GO 5152
// if veh in FilterAllUnits ( [ f_empty ] ) then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 58
5014: PUSH
5015: EMPTY
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: IN
5023: IFFALSE 5035
// result := false else
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
5033: GO 5152
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5035: LD_ADDR_VAR 0 4
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 255
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 55
5059: PUSH
5060: EMPTY
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 69
5071: ST_TO_ADDR
// if not filter then
5072: LD_VAR 0 4
5076: NOT
5077: IFFALSE 5089
// result := false else
5079: LD_ADDR_VAR 0 2
5083: PUSH
5084: LD_INT 0
5086: ST_TO_ADDR
5087: GO 5152
// for i = 1 to filter do
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: DOUBLE
5095: LD_INT 1
5097: DEC
5098: ST_TO_ADDR
5099: LD_VAR 0 4
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5150
// if IsDriver ( filter [ i ] ) = veh then
5107: LD_VAR 0 4
5111: PUSH
5112: LD_VAR 0 3
5116: ARRAY
5117: PPUSH
5118: CALL 63063 0 1
5122: PUSH
5123: LD_VAR 0 1
5127: EQUAL
5128: IFFALSE 5148
// begin result := filter [ i ] ;
5130: LD_ADDR_VAR 0 2
5134: PUSH
5135: LD_VAR 0 4
5139: PUSH
5140: LD_VAR 0 3
5144: ARRAY
5145: ST_TO_ADDR
// break ;
5146: GO 5150
// end ;
5148: GO 5104
5150: POP
5151: POP
// end ; end ; end_of_file
5152: LD_VAR 0 2
5156: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: CALL 22874 0 1
// if un = legion_commander then
5166: LD_VAR 0 1
5170: PUSH
5171: LD_EXP 1
5175: EQUAL
5176: IFFALSE 5185
// YouLost ( commanderDied ) ;
5178: LD_STRING commanderDied
5180: PPUSH
5181: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5185: LD_VAR 0 1
5189: PUSH
5190: LD_EXP 1
5194: PUSH
5195: LD_INT 23
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: IN
5202: IFFALSE 5212
// game_over := true ;
5204: LD_ADDR_EXP 7
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// if un = al_commander then
5212: LD_VAR 0 1
5216: PUSH
5217: LD_EXP 5
5221: EQUAL
5222: IFFALSE 5228
// ChangeSide ( ) ;
5224: CALL 2738 0 0
// if GetSide ( un ) = 7 then
5228: LD_VAR 0 1
5232: PPUSH
5233: CALL_OW 255
5237: PUSH
5238: LD_INT 7
5240: EQUAL
5241: IFFALSE 5359
// begin if GetClass ( un ) = class_apeman then
5243: LD_VAR 0 1
5247: PPUSH
5248: CALL_OW 257
5252: PUSH
5253: LD_INT 12
5255: EQUAL
5256: IFFALSE 5272
// points := points + 6 ;
5258: LD_ADDR_EXP 10
5262: PUSH
5263: LD_EXP 10
5267: PUSH
5268: LD_INT 6
5270: PLUS
5271: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 257
5281: PUSH
5282: LD_INT 17
5284: EQUAL
5285: IFFALSE 5301
// points := points + 11 ;
5287: LD_ADDR_EXP 10
5291: PUSH
5292: LD_EXP 10
5296: PUSH
5297: LD_INT 11
5299: PLUS
5300: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 257
5310: PUSH
5311: LD_INT 15
5313: EQUAL
5314: IFFALSE 5330
// points := points + 14 ;
5316: LD_ADDR_EXP 10
5320: PUSH
5321: LD_EXP 10
5325: PUSH
5326: LD_INT 14
5328: PLUS
5329: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 247
5339: PUSH
5340: LD_INT 2
5342: EQUAL
5343: IFFALSE 5359
// points := points + 50 ;
5345: LD_ADDR_EXP 10
5349: PUSH
5350: LD_EXP 10
5354: PUSH
5355: LD_INT 50
5357: PLUS
5358: ST_TO_ADDR
// end ; end ;
5359: PPOPN 1
5361: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5362: LD_EXP 5
5366: PPUSH
5367: CALL_OW 256
5371: PUSH
5372: LD_INT 1000
5374: LESS
5375: IFFALSE 5407
5377: GO 5379
5379: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5380: LD_EXP 5
5384: PPUSH
5385: CALL_OW 504
5389: PPUSH
5390: CALL_OW 255
5394: PUSH
5395: LD_INT 8
5397: EQUAL
5398: IFFALSE 5407
// YouLost ( FriendlyFire ) ;
5400: LD_STRING FriendlyFire
5402: PPUSH
5403: CALL_OW 104
5407: END
// on DialogueSkipped ( value ) do var i ;
5408: LD_INT 0
5410: PPUSH
// begin RemoveUnit ( potter ) ;
5411: LD_EXP 4
5415: PPUSH
5416: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5420: LD_EXP 2
5424: PUSH
5425: LD_EXP 3
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 122
// Wait ( 1 ) ;
5438: LD_INT 1
5440: PPUSH
5441: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5445: LD_EXP 2
5449: PPUSH
5450: LD_INT 107
5452: PPUSH
5453: LD_INT 53
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: LD_INT 0
5461: PPUSH
5462: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5466: LD_EXP 3
5470: PPUSH
5471: LD_INT 108
5473: PPUSH
5474: LD_INT 53
5476: PPUSH
5477: LD_INT 0
5479: PPUSH
5480: LD_INT 0
5482: PPUSH
5483: CALL_OW 483
// Wait ( 1 ) ;
5487: LD_INT 1
5489: PPUSH
5490: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5494: LD_EXP 2
5498: PUSH
5499: LD_EXP 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: LD_INT 108
5510: PPUSH
5511: LD_INT 1
5513: PPUSH
5514: CALL_OW 118
// end ;
5518: PPOPN 2
5520: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5521: LD_INT 0
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5531: LD_ADDR_VAR 0 10
5535: PUSH
5536: LD_INT 2
5538: PPUSH
5539: CALL_OW 469
5543: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5544: LD_ADDR_VAR 0 12
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_OWVAR 2
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 2
5563: PUSH
5564: LD_INT 30
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 30
5576: PUSH
5577: LD_INT 11
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL_OW 69
5597: PPUSH
5598: LD_VAR 0 10
5602: PUSH
5603: LD_INT 1
5605: ARRAY
5606: PPUSH
5607: LD_VAR 0 10
5611: PUSH
5612: LD_INT 2
5614: ARRAY
5615: PPUSH
5616: CALL_OW 73
5620: ST_TO_ADDR
// if icon = art_exp_left then
5621: LD_VAR 0 2
5625: PUSH
5626: LD_INT 1
5628: EQUAL
5629: IFFALSE 5684
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5631: LD_VAR 0 12
5635: PPUSH
5636: LD_EXP 9
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5648: LD_VAR 0 12
5652: PPUSH
5653: LD_EXP 17
5657: PPUSH
5658: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5662: LD_OWVAR 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: LD_VAR 0 12
5677: PPUSH
5678: CALL_OW 468
// end else
5682: GO 6465
// begin DialogueOn ;
5684: CALL_OW 6
// uc_side := 8 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 8
5695: ST_TO_ADDR
// uc_nation := 2 ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 2
5703: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: LD_STRING QBonus
5711: PUSH
5712: LD_EXP 14
5716: STR
5717: ST_TO_ADDR
// off := true ;
5718: LD_ADDR_VAR 0 6
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// units := [ ] ;
5726: LD_ADDR_VAR 0 7
5730: PUSH
5731: EMPTY
5732: ST_TO_ADDR
// crates := 0 ;
5733: LD_ADDR_VAR 0 8
5737: PUSH
5738: LD_INT 0
5740: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5741: LD_EXP 12
5745: PPUSH
5746: LD_STRING DVr-2
5748: PPUSH
5749: CALL_OW 94
// wait ( 0 0$1 ) ;
5753: LD_INT 35
5755: PPUSH
5756: CALL_OW 67
// case Query ( bonus ) of 1 :
5760: LD_VAR 0 5
5764: PPUSH
5765: CALL_OW 97
5769: PUSH
5770: LD_INT 1
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5863
5778: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5779: LD_ADDR_VAR 0 9
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 5
5792: PUSH
5793: LD_INT 8
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: PUSH
5802: LD_EXP 14
5806: ARRAY
5807: ST_TO_ADDR
// for i = 1 to tmp do
5808: LD_ADDR_VAR 0 11
5812: PUSH
5813: DOUBLE
5814: LD_INT 1
5816: DEC
5817: ST_TO_ADDR
5818: LD_VAR 0 9
5822: PUSH
5823: FOR_TO
5824: IFFALSE 5859
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5826: LD_INT 0
5828: PPUSH
5829: LD_INT 15
5831: PPUSH
5832: LD_VAR 0 9
5836: PPUSH
5837: CALL_OW 380
// units := units ^ CreateHuman ;
5841: LD_ADDR_VAR 0 7
5845: PUSH
5846: LD_VAR 0 7
5850: PUSH
5851: CALL_OW 44
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5823
5859: POP
5860: POP
// end ; 2 :
5861: GO 6271
5863: LD_INT 2
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5903
5871: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5872: LD_ADDR_VAR 0 8
5876: PUSH
5877: LD_INT 100
5879: PUSH
5880: LD_INT 150
5882: PUSH
5883: LD_INT 350
5885: PUSH
5886: LD_INT 500
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PUSH
5895: LD_EXP 14
5899: ARRAY
5900: ST_TO_ADDR
// end ; 3 :
5901: GO 6271
5903: LD_INT 3
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 6251
5911: POP
// begin if bonus_num = 1 then
5912: LD_EXP 14
5916: PUSH
5917: LD_INT 1
5919: EQUAL
5920: IFFALSE 5930
// ignore_wave := true ;
5922: LD_ADDR_EXP 15
5926: PUSH
5927: LD_INT 1
5929: ST_TO_ADDR
// if bonus_num = 2 then
5930: LD_EXP 14
5934: PUSH
5935: LD_INT 2
5937: EQUAL
5938: IFFALSE 6058
// begin for i = 1 to 2 do
5940: LD_ADDR_VAR 0 11
5944: PUSH
5945: DOUBLE
5946: LD_INT 1
5948: DEC
5949: ST_TO_ADDR
5950: LD_INT 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6056
// begin uc_nation := nation_arabian ;
5956: LD_ADDR_OWVAR 21
5960: PUSH
5961: LD_INT 2
5963: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5964: LD_ADDR_OWVAR 37
5968: PUSH
5969: LD_INT 14
5971: ST_TO_ADDR
// vc_engine := engine_siberite ;
5972: LD_ADDR_OWVAR 39
5976: PUSH
5977: LD_INT 3
5979: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5980: LD_ADDR_OWVAR 38
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: LD_INT 5
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 2
6000: PPUSH
6001: CALL_OW 12
6005: ARRAY
6006: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6007: LD_ADDR_OWVAR 40
6011: PUSH
6012: LD_INT 28
6014: PUSH
6015: LD_INT 27
6017: PUSH
6018: LD_INT 25
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 3
6031: PPUSH
6032: CALL_OW 12
6036: ARRAY
6037: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6038: LD_ADDR_VAR 0 7
6042: PUSH
6043: LD_VAR 0 7
6047: PUSH
6048: CALL_OW 45
6052: ADD
6053: ST_TO_ADDR
// end ;
6054: GO 5953
6056: POP
6057: POP
// end ; if bonus_num = 3 then
6058: LD_EXP 14
6062: PUSH
6063: LD_INT 3
6065: EQUAL
6066: IFFALSE 6190
// begin for i = 1 to 4 do
6068: LD_ADDR_VAR 0 11
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 4
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6188
// begin uc_nation := nation_arabian ;
6084: LD_ADDR_OWVAR 21
6088: PUSH
6089: LD_INT 2
6091: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6092: LD_ADDR_OWVAR 37
6096: PUSH
6097: LD_INT 14
6099: ST_TO_ADDR
// vc_engine := engine_siberite ;
6100: LD_ADDR_OWVAR 39
6104: PUSH
6105: LD_INT 3
6107: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6108: LD_ADDR_OWVAR 38
6112: PUSH
6113: LD_INT 2
6115: PUSH
6116: LD_INT 5
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 1
6125: PPUSH
6126: LD_INT 2
6128: PPUSH
6129: CALL_OW 12
6133: ARRAY
6134: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6135: LD_ADDR_OWVAR 40
6139: PUSH
6140: LD_INT 28
6142: PUSH
6143: LD_INT 27
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 25
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_INT 4
6163: PPUSH
6164: CALL_OW 12
6168: ARRAY
6169: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6170: LD_ADDR_VAR 0 7
6174: PUSH
6175: LD_VAR 0 7
6179: PUSH
6180: CALL_OW 45
6184: ADD
6185: ST_TO_ADDR
// end ;
6186: GO 6081
6188: POP
6189: POP
// end ; if bonus_num = 4 then
6190: LD_EXP 14
6194: PUSH
6195: LD_INT 4
6197: EQUAL
6198: IFFALSE 6249
// for i = 1 to 3 do
6200: LD_ADDR_VAR 0 11
6204: PUSH
6205: DOUBLE
6206: LD_INT 1
6208: DEC
6209: ST_TO_ADDR
6210: LD_INT 3
6212: PUSH
6213: FOR_TO
6214: IFFALSE 6247
// begin PrepareHuman ( false , 3 , 8 ) ;
6216: LD_INT 0
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 8
6224: PPUSH
6225: CALL_OW 380
// units := units ^ CreateHuman ;
6229: LD_ADDR_VAR 0 7
6233: PUSH
6234: LD_VAR 0 7
6238: PUSH
6239: CALL_OW 44
6243: ADD
6244: ST_TO_ADDR
// end ;
6245: GO 6213
6247: POP
6248: POP
// end ; 4 :
6249: GO 6271
6251: LD_INT 4
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6270
6259: POP
// off := false ; end ;
6260: LD_ADDR_VAR 0 6
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
6268: GO 6271
6270: POP
// DialogueOff ;
6271: CALL_OW 7
// if not off then
6275: LD_VAR 0 6
6279: NOT
6280: IFFALSE 6286
// exit else
6282: GO 6465
6284: GO 6339
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6286: LD_OWVAR 2
6290: PPUSH
6291: LD_INT 12
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 23
6299: PPUSH
6300: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6304: LD_EXP 12
6308: PPUSH
6309: LD_STRING DVr-3
6311: PUSH
6312: LD_STRING DVr-3a
6314: PUSH
6315: LD_STRING DVr-3b
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 1
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: CALL_OW 12
6333: ARRAY
6334: PPUSH
6335: CALL_OW 94
// end ; if units then
6339: LD_VAR 0 7
6343: IFFALSE 6407
// for i in units do
6345: LD_ADDR_VAR 0 11
6349: PUSH
6350: LD_VAR 0 7
6354: PUSH
6355: FOR_IN
6356: IFFALSE 6405
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6358: LD_VAR 0 11
6362: PPUSH
6363: LD_INT 92
6365: PPUSH
6366: LD_INT 49
6368: PPUSH
6369: LD_INT 20
6371: PPUSH
6372: LD_INT 0
6374: PPUSH
6375: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6379: LD_VAR 0 11
6383: PPUSH
6384: CALL_OW 250
6388: PPUSH
6389: LD_VAR 0 11
6393: PPUSH
6394: CALL_OW 251
6398: PPUSH
6399: CALL_OW 494
// end ;
6403: GO 6355
6405: POP
6406: POP
// if crates then
6407: LD_VAR 0 8
6411: IFFALSE 6465
// for i = 1 to ( crates div 50 ) do
6413: LD_ADDR_VAR 0 11
6417: PUSH
6418: DOUBLE
6419: LD_INT 1
6421: DEC
6422: ST_TO_ADDR
6423: LD_VAR 0 8
6427: PUSH
6428: LD_INT 50
6430: DIV
6431: PUSH
6432: FOR_TO
6433: IFFALSE 6463
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6435: LD_INT 5
6437: PPUSH
6438: LD_INT 92
6440: PPUSH
6441: LD_INT 49
6443: PPUSH
6444: LD_INT 30
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 56
// wait ( 0 0$02 ) ;
6454: LD_INT 70
6456: PPUSH
6457: CALL_OW 67
// end ;
6461: GO 6432
6463: POP
6464: POP
// end ; end ;
6465: PPOPN 12
6467: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6468: LD_VAR 0 1
6472: PPUSH
6473: LD_VAR 0 2
6477: PPUSH
6478: LD_VAR 0 3
6482: PPUSH
6483: CALL 22970 0 3
// end ;
6487: PPOPN 3
6489: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL 22978 0 1
// end ;
6499: PPOPN 1
6501: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 255
6511: PUSH
6512: LD_OWVAR 2
6516: EQUAL
6517: IFFALSE 6527
// player_res_art := true ;
6519: LD_ADDR_EXP 8
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// end ;
6527: PPOPN 1
6529: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6530: LD_INT 22
6532: PUSH
6533: LD_OWVAR 2
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 2
6544: PUSH
6545: LD_INT 30
6547: PUSH
6548: LD_INT 7
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 30
6557: PUSH
6558: LD_INT 8
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 30
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 69
6589: IFFALSE 6822
6591: GO 6593
6593: DISABLE
6594: LD_INT 0
6596: PPUSH
6597: PPUSH
// begin enable ;
6598: ENABLE
// xy := FindArtifact ( 2 ) ;
6599: LD_ADDR_VAR 0 1
6603: PUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 469
6611: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6612: LD_ADDR_VAR 0 2
6616: PUSH
6617: LD_INT 22
6619: PUSH
6620: LD_OWVAR 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 8
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 30
6644: PUSH
6645: LD_INT 7
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 30
6654: PUSH
6655: LD_INT 11
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PPUSH
6672: CALL_OW 69
6676: PPUSH
6677: LD_VAR 0 1
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 1
6690: PUSH
6691: LD_INT 2
6693: ARRAY
6694: PPUSH
6695: CALL_OW 73
6699: ST_TO_ADDR
// if player_artifact_ready = false then
6700: LD_EXP 16
6704: PUSH
6705: LD_INT 0
6707: EQUAL
6708: IFFALSE 6822
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 1
6719: PUSH
6720: LD_INT 1
6722: ARRAY
6723: PPUSH
6724: LD_VAR 0 1
6728: PUSH
6729: LD_INT 2
6731: ARRAY
6732: PPUSH
6733: CALL_OW 297
6737: PUSH
6738: LD_INT 6
6740: LESS
6741: IFFALSE 6802
// begin if BuildingStatus ( lab ) = bs_idle then
6743: LD_VAR 0 2
6747: PPUSH
6748: CALL_OW 461
6752: PUSH
6753: LD_INT 2
6755: EQUAL
6756: IFFALSE 6780
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6758: LD_OWVAR 2
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 2
6768: PPUSH
6769: LD_VAR 0 2
6773: PPUSH
6774: CALL_OW 468
6778: GO 6800
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6780: LD_OWVAR 2
6784: PPUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 468
// end else
6800: GO 6822
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6802: LD_OWVAR 2
6806: PPUSH
6807: LD_INT 1
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 2
6817: PPUSH
6818: CALL_OW 468
// end ;
6822: PPOPN 2
6824: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6825: LD_VAR 0 1
6829: PPUSH
6830: CALL_OW 255
6834: PUSH
6835: LD_OWVAR 2
6839: EQUAL
6840: IFFALSE 6866
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6842: LD_OWVAR 2
6846: PPUSH
6847: LD_INT 1
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 468
// Win ;
6862: CALL 4759 0 0
// end ; end ;
6866: PPOPN 1
6868: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6869: LD_ADDR_EXP 17
6873: PUSH
6874: LD_VAR 0 2
6878: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6879: LD_OWVAR 2
6883: PPUSH
6884: LD_INT 1
6886: PPUSH
6887: LD_INT 2
6889: PPUSH
6890: LD_VAR 0 1
6894: PPUSH
6895: CALL_OW 468
// end ;
6899: PPOPN 2
6901: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6902: LD_VAR 0 1
6906: PPUSH
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL 22994 0 2
// end ; end_of_file
6916: PPOPN 2
6918: END
// every 0 0$01 trigger not game_over do
6919: LD_EXP 7
6923: NOT
6924: IFFALSE 6957
6926: GO 6928
6928: DISABLE
// begin enable ;
6929: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6930: LD_ADDR_OWVAR 47
6934: PUSH
6935: LD_STRING #tick
6937: PUSH
6938: LD_OWVAR 1
6942: PUSH
6943: LD_STRING #points
6945: PUSH
6946: LD_EXP 10
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: ST_TO_ADDR
// end ;
6957: END
// every 0 0$01 trigger game_over do
6958: LD_EXP 7
6962: IFFALSE 7021
6964: GO 6966
6966: DISABLE
// begin Wait ( 0 0$02 ) ;
6967: LD_INT 70
6969: PPUSH
6970: CALL_OW 67
// DialogueOn ;
6974: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6978: LD_ADDR_OWVAR 47
6982: PUSH
6983: LD_STRING #game-points
6985: PUSH
6986: LD_OWVAR 78
6990: PUSH
6991: LD_EXP 10
6995: PUSH
6996: LD_STRING #game-time
6998: PUSH
6999: LD_OWVAR 1
7003: PUSH
7004: LD_STRING #game-difficulty
7006: PUSH
7007: LD_OWVAR 67
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; end_of_file
7021: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7022: LD_OWVAR 1
7026: PUSH
7027: LD_INT 52500
7029: LESS
7030: IFFALSE 7054
7032: GO 7034
7034: DISABLE
// begin enable ;
7035: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 5
7041: PPUSH
7042: CALL_OW 12
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL_OW 57
// end ; end_of_file end_of_file
7054: END
// export globalGameSaveCounter ; every 0 0$1 do
7055: GO 7057
7057: DISABLE
// begin enable ;
7058: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7059: LD_STRING updateTimer(
7061: PUSH
7062: LD_OWVAR 1
7066: STR
7067: PUSH
7068: LD_STRING );
7070: STR
7071: PPUSH
7072: CALL_OW 559
// end ;
7076: END
// every 0 0$1 do
7077: GO 7079
7079: DISABLE
// begin globalGameSaveCounter := 0 ;
7080: LD_ADDR_EXP 18
7084: PUSH
7085: LD_INT 0
7087: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7088: LD_STRING setGameSaveCounter(0)
7090: PPUSH
7091: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7095: LD_STRING initStreamRollete();
7097: PPUSH
7098: CALL_OW 559
// InitStreamMode ;
7102: CALL 8445 0 0
// DefineStreamItems ( false ) ;
7106: LD_INT 0
7108: PPUSH
7109: CALL 8909 0 1
// end ;
7113: END
// export function SOS_MapStart ( ) ; begin
7114: LD_INT 0
7116: PPUSH
// if streamModeActive then
7117: LD_EXP 19
7121: IFFALSE 7130
// DefineStreamItems ( true ) ;
7123: LD_INT 1
7125: PPUSH
7126: CALL 8909 0 1
// UpdateLuaVariables ( ) ;
7130: CALL 7147 0 0
// UpdateFactoryWaypoints ( ) ;
7134: CALL 21778 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7138: CALL 22035 0 0
// end ;
7142: LD_VAR 0 1
7146: RET
// function UpdateLuaVariables ( ) ; begin
7147: LD_INT 0
7149: PPUSH
// if globalGameSaveCounter then
7150: LD_EXP 18
7154: IFFALSE 7188
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7156: LD_ADDR_EXP 18
7160: PUSH
7161: LD_EXP 18
7165: PPUSH
7166: CALL 66820 0 1
7170: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7171: LD_STRING setGameSaveCounter(
7173: PUSH
7174: LD_EXP 18
7178: STR
7179: PUSH
7180: LD_STRING )
7182: STR
7183: PPUSH
7184: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7188: LD_STRING setGameDifficulty(
7190: PUSH
7191: LD_OWVAR 67
7195: STR
7196: PUSH
7197: LD_STRING )
7199: STR
7200: PPUSH
7201: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7205: LD_STRING displayDifficulty(
7207: PUSH
7208: LD_OWVAR 67
7212: STR
7213: PUSH
7214: LD_STRING )
7216: STR
7217: PPUSH
7218: CALL_OW 559
// end ;
7222: LD_VAR 0 1
7226: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7227: LD_INT 0
7229: PPUSH
// if p2 = stream_mode then
7230: LD_VAR 0 2
7234: PUSH
7235: LD_INT 100
7237: EQUAL
7238: IFFALSE 8241
// begin if not StreamModeActive then
7240: LD_EXP 19
7244: NOT
7245: IFFALSE 7255
// StreamModeActive := true ;
7247: LD_ADDR_EXP 19
7251: PUSH
7252: LD_INT 1
7254: ST_TO_ADDR
// if p3 = 0 then
7255: LD_VAR 0 3
7259: PUSH
7260: LD_INT 0
7262: EQUAL
7263: IFFALSE 7269
// InitStreamMode ;
7265: CALL 8445 0 0
// if p3 = 1 then
7269: LD_VAR 0 3
7273: PUSH
7274: LD_INT 1
7276: EQUAL
7277: IFFALSE 7287
// sRocket := true ;
7279: LD_ADDR_EXP 24
7283: PUSH
7284: LD_INT 1
7286: ST_TO_ADDR
// if p3 = 2 then
7287: LD_VAR 0 3
7291: PUSH
7292: LD_INT 2
7294: EQUAL
7295: IFFALSE 7305
// sSpeed := true ;
7297: LD_ADDR_EXP 23
7301: PUSH
7302: LD_INT 1
7304: ST_TO_ADDR
// if p3 = 3 then
7305: LD_VAR 0 3
7309: PUSH
7310: LD_INT 3
7312: EQUAL
7313: IFFALSE 7323
// sEngine := true ;
7315: LD_ADDR_EXP 25
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// if p3 = 4 then
7323: LD_VAR 0 3
7327: PUSH
7328: LD_INT 4
7330: EQUAL
7331: IFFALSE 7341
// sSpec := true ;
7333: LD_ADDR_EXP 22
7337: PUSH
7338: LD_INT 1
7340: ST_TO_ADDR
// if p3 = 5 then
7341: LD_VAR 0 3
7345: PUSH
7346: LD_INT 5
7348: EQUAL
7349: IFFALSE 7359
// sLevel := true ;
7351: LD_ADDR_EXP 26
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// if p3 = 6 then
7359: LD_VAR 0 3
7363: PUSH
7364: LD_INT 6
7366: EQUAL
7367: IFFALSE 7377
// sArmoury := true ;
7369: LD_ADDR_EXP 27
7373: PUSH
7374: LD_INT 1
7376: ST_TO_ADDR
// if p3 = 7 then
7377: LD_VAR 0 3
7381: PUSH
7382: LD_INT 7
7384: EQUAL
7385: IFFALSE 7395
// sRadar := true ;
7387: LD_ADDR_EXP 28
7391: PUSH
7392: LD_INT 1
7394: ST_TO_ADDR
// if p3 = 8 then
7395: LD_VAR 0 3
7399: PUSH
7400: LD_INT 8
7402: EQUAL
7403: IFFALSE 7413
// sBunker := true ;
7405: LD_ADDR_EXP 29
7409: PUSH
7410: LD_INT 1
7412: ST_TO_ADDR
// if p3 = 9 then
7413: LD_VAR 0 3
7417: PUSH
7418: LD_INT 9
7420: EQUAL
7421: IFFALSE 7431
// sHack := true ;
7423: LD_ADDR_EXP 30
7427: PUSH
7428: LD_INT 1
7430: ST_TO_ADDR
// if p3 = 10 then
7431: LD_VAR 0 3
7435: PUSH
7436: LD_INT 10
7438: EQUAL
7439: IFFALSE 7449
// sFire := true ;
7441: LD_ADDR_EXP 31
7445: PUSH
7446: LD_INT 1
7448: ST_TO_ADDR
// if p3 = 11 then
7449: LD_VAR 0 3
7453: PUSH
7454: LD_INT 11
7456: EQUAL
7457: IFFALSE 7467
// sRefresh := true ;
7459: LD_ADDR_EXP 32
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// if p3 = 12 then
7467: LD_VAR 0 3
7471: PUSH
7472: LD_INT 12
7474: EQUAL
7475: IFFALSE 7485
// sExp := true ;
7477: LD_ADDR_EXP 33
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// if p3 = 13 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 13
7492: EQUAL
7493: IFFALSE 7503
// sDepot := true ;
7495: LD_ADDR_EXP 34
7499: PUSH
7500: LD_INT 1
7502: ST_TO_ADDR
// if p3 = 14 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 14
7510: EQUAL
7511: IFFALSE 7521
// sFlag := true ;
7513: LD_ADDR_EXP 35
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// if p3 = 15 then
7521: LD_VAR 0 3
7525: PUSH
7526: LD_INT 15
7528: EQUAL
7529: IFFALSE 7539
// sKamikadze := true ;
7531: LD_ADDR_EXP 43
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if p3 = 16 then
7539: LD_VAR 0 3
7543: PUSH
7544: LD_INT 16
7546: EQUAL
7547: IFFALSE 7557
// sTroll := true ;
7549: LD_ADDR_EXP 44
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// if p3 = 17 then
7557: LD_VAR 0 3
7561: PUSH
7562: LD_INT 17
7564: EQUAL
7565: IFFALSE 7575
// sSlow := true ;
7567: LD_ADDR_EXP 45
7571: PUSH
7572: LD_INT 1
7574: ST_TO_ADDR
// if p3 = 18 then
7575: LD_VAR 0 3
7579: PUSH
7580: LD_INT 18
7582: EQUAL
7583: IFFALSE 7593
// sLack := true ;
7585: LD_ADDR_EXP 46
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// if p3 = 19 then
7593: LD_VAR 0 3
7597: PUSH
7598: LD_INT 19
7600: EQUAL
7601: IFFALSE 7611
// sTank := true ;
7603: LD_ADDR_EXP 48
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if p3 = 20 then
7611: LD_VAR 0 3
7615: PUSH
7616: LD_INT 20
7618: EQUAL
7619: IFFALSE 7629
// sRemote := true ;
7621: LD_ADDR_EXP 49
7625: PUSH
7626: LD_INT 1
7628: ST_TO_ADDR
// if p3 = 21 then
7629: LD_VAR 0 3
7633: PUSH
7634: LD_INT 21
7636: EQUAL
7637: IFFALSE 7647
// sPowell := true ;
7639: LD_ADDR_EXP 50
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if p3 = 22 then
7647: LD_VAR 0 3
7651: PUSH
7652: LD_INT 22
7654: EQUAL
7655: IFFALSE 7665
// sTeleport := true ;
7657: LD_ADDR_EXP 53
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// if p3 = 23 then
7665: LD_VAR 0 3
7669: PUSH
7670: LD_INT 23
7672: EQUAL
7673: IFFALSE 7683
// sOilTower := true ;
7675: LD_ADDR_EXP 55
7679: PUSH
7680: LD_INT 1
7682: ST_TO_ADDR
// if p3 = 24 then
7683: LD_VAR 0 3
7687: PUSH
7688: LD_INT 24
7690: EQUAL
7691: IFFALSE 7701
// sShovel := true ;
7693: LD_ADDR_EXP 56
7697: PUSH
7698: LD_INT 1
7700: ST_TO_ADDR
// if p3 = 25 then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 25
7708: EQUAL
7709: IFFALSE 7719
// sSheik := true ;
7711: LD_ADDR_EXP 57
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// if p3 = 26 then
7719: LD_VAR 0 3
7723: PUSH
7724: LD_INT 26
7726: EQUAL
7727: IFFALSE 7737
// sEarthquake := true ;
7729: LD_ADDR_EXP 59
7733: PUSH
7734: LD_INT 1
7736: ST_TO_ADDR
// if p3 = 27 then
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 27
7744: EQUAL
7745: IFFALSE 7755
// sAI := true ;
7747: LD_ADDR_EXP 60
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// if p3 = 28 then
7755: LD_VAR 0 3
7759: PUSH
7760: LD_INT 28
7762: EQUAL
7763: IFFALSE 7773
// sCargo := true ;
7765: LD_ADDR_EXP 63
7769: PUSH
7770: LD_INT 1
7772: ST_TO_ADDR
// if p3 = 29 then
7773: LD_VAR 0 3
7777: PUSH
7778: LD_INT 29
7780: EQUAL
7781: IFFALSE 7791
// sDLaser := true ;
7783: LD_ADDR_EXP 64
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// if p3 = 30 then
7791: LD_VAR 0 3
7795: PUSH
7796: LD_INT 30
7798: EQUAL
7799: IFFALSE 7809
// sExchange := true ;
7801: LD_ADDR_EXP 65
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// if p3 = 31 then
7809: LD_VAR 0 3
7813: PUSH
7814: LD_INT 31
7816: EQUAL
7817: IFFALSE 7827
// sFac := true ;
7819: LD_ADDR_EXP 66
7823: PUSH
7824: LD_INT 1
7826: ST_TO_ADDR
// if p3 = 32 then
7827: LD_VAR 0 3
7831: PUSH
7832: LD_INT 32
7834: EQUAL
7835: IFFALSE 7845
// sPower := true ;
7837: LD_ADDR_EXP 67
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// if p3 = 33 then
7845: LD_VAR 0 3
7849: PUSH
7850: LD_INT 33
7852: EQUAL
7853: IFFALSE 7863
// sRandom := true ;
7855: LD_ADDR_EXP 68
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// if p3 = 34 then
7863: LD_VAR 0 3
7867: PUSH
7868: LD_INT 34
7870: EQUAL
7871: IFFALSE 7881
// sShield := true ;
7873: LD_ADDR_EXP 69
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// if p3 = 35 then
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 35
7888: EQUAL
7889: IFFALSE 7899
// sTime := true ;
7891: LD_ADDR_EXP 70
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// if p3 = 36 then
7899: LD_VAR 0 3
7903: PUSH
7904: LD_INT 36
7906: EQUAL
7907: IFFALSE 7917
// sTools := true ;
7909: LD_ADDR_EXP 71
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// if p3 = 101 then
7917: LD_VAR 0 3
7921: PUSH
7922: LD_INT 101
7924: EQUAL
7925: IFFALSE 7935
// sSold := true ;
7927: LD_ADDR_EXP 36
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
// if p3 = 102 then
7935: LD_VAR 0 3
7939: PUSH
7940: LD_INT 102
7942: EQUAL
7943: IFFALSE 7953
// sDiff := true ;
7945: LD_ADDR_EXP 37
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// if p3 = 103 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 103
7960: EQUAL
7961: IFFALSE 7971
// sFog := true ;
7963: LD_ADDR_EXP 40
7967: PUSH
7968: LD_INT 1
7970: ST_TO_ADDR
// if p3 = 104 then
7971: LD_VAR 0 3
7975: PUSH
7976: LD_INT 104
7978: EQUAL
7979: IFFALSE 7989
// sReset := true ;
7981: LD_ADDR_EXP 41
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// if p3 = 105 then
7989: LD_VAR 0 3
7993: PUSH
7994: LD_INT 105
7996: EQUAL
7997: IFFALSE 8007
// sSun := true ;
7999: LD_ADDR_EXP 42
8003: PUSH
8004: LD_INT 1
8006: ST_TO_ADDR
// if p3 = 106 then
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 106
8014: EQUAL
8015: IFFALSE 8025
// sTiger := true ;
8017: LD_ADDR_EXP 38
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// if p3 = 107 then
8025: LD_VAR 0 3
8029: PUSH
8030: LD_INT 107
8032: EQUAL
8033: IFFALSE 8043
// sBomb := true ;
8035: LD_ADDR_EXP 39
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// if p3 = 108 then
8043: LD_VAR 0 3
8047: PUSH
8048: LD_INT 108
8050: EQUAL
8051: IFFALSE 8061
// sWound := true ;
8053: LD_ADDR_EXP 47
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// if p3 = 109 then
8061: LD_VAR 0 3
8065: PUSH
8066: LD_INT 109
8068: EQUAL
8069: IFFALSE 8079
// sBetray := true ;
8071: LD_ADDR_EXP 51
8075: PUSH
8076: LD_INT 1
8078: ST_TO_ADDR
// if p3 = 110 then
8079: LD_VAR 0 3
8083: PUSH
8084: LD_INT 110
8086: EQUAL
8087: IFFALSE 8097
// sContamin := true ;
8089: LD_ADDR_EXP 52
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// if p3 = 111 then
8097: LD_VAR 0 3
8101: PUSH
8102: LD_INT 111
8104: EQUAL
8105: IFFALSE 8115
// sOil := true ;
8107: LD_ADDR_EXP 54
8111: PUSH
8112: LD_INT 1
8114: ST_TO_ADDR
// if p3 = 112 then
8115: LD_VAR 0 3
8119: PUSH
8120: LD_INT 112
8122: EQUAL
8123: IFFALSE 8133
// sStu := true ;
8125: LD_ADDR_EXP 58
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// if p3 = 113 then
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 113
8140: EQUAL
8141: IFFALSE 8151
// sBazooka := true ;
8143: LD_ADDR_EXP 61
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// if p3 = 114 then
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 114
8158: EQUAL
8159: IFFALSE 8169
// sMortar := true ;
8161: LD_ADDR_EXP 62
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// if p3 = 115 then
8169: LD_VAR 0 3
8173: PUSH
8174: LD_INT 115
8176: EQUAL
8177: IFFALSE 8187
// sRanger := true ;
8179: LD_ADDR_EXP 72
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// if p3 = 116 then
8187: LD_VAR 0 3
8191: PUSH
8192: LD_INT 116
8194: EQUAL
8195: IFFALSE 8205
// sComputer := true ;
8197: LD_ADDR_EXP 73
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// if p3 = 117 then
8205: LD_VAR 0 3
8209: PUSH
8210: LD_INT 117
8212: EQUAL
8213: IFFALSE 8223
// s30 := true ;
8215: LD_ADDR_EXP 74
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// if p3 = 118 then
8223: LD_VAR 0 3
8227: PUSH
8228: LD_INT 118
8230: EQUAL
8231: IFFALSE 8241
// s60 := true ;
8233: LD_ADDR_EXP 75
8237: PUSH
8238: LD_INT 1
8240: ST_TO_ADDR
// end ; if p2 = hack_mode then
8241: LD_VAR 0 2
8245: PUSH
8246: LD_INT 101
8248: EQUAL
8249: IFFALSE 8377
// begin case p3 of 1 :
8251: LD_VAR 0 3
8255: PUSH
8256: LD_INT 1
8258: DOUBLE
8259: EQUAL
8260: IFTRUE 8264
8262: GO 8271
8264: POP
// hHackUnlimitedResources ; 2 :
8265: CALL 20524 0 0
8269: GO 8377
8271: LD_INT 2
8273: DOUBLE
8274: EQUAL
8275: IFTRUE 8279
8277: GO 8286
8279: POP
// hHackSetLevel10 ; 3 :
8280: CALL 20657 0 0
8284: GO 8377
8286: LD_INT 3
8288: DOUBLE
8289: EQUAL
8290: IFTRUE 8294
8292: GO 8301
8294: POP
// hHackSetLevel10YourUnits ; 4 :
8295: CALL 20742 0 0
8299: GO 8377
8301: LD_INT 4
8303: DOUBLE
8304: EQUAL
8305: IFTRUE 8309
8307: GO 8316
8309: POP
// hHackInvincible ; 5 :
8310: CALL 21190 0 0
8314: GO 8377
8316: LD_INT 5
8318: DOUBLE
8319: EQUAL
8320: IFTRUE 8324
8322: GO 8331
8324: POP
// hHackInvisible ; 6 :
8325: CALL 21301 0 0
8329: GO 8377
8331: LD_INT 6
8333: DOUBLE
8334: EQUAL
8335: IFTRUE 8339
8337: GO 8346
8339: POP
// hHackChangeYourSide ; 7 :
8340: CALL 21358 0 0
8344: GO 8377
8346: LD_INT 7
8348: DOUBLE
8349: EQUAL
8350: IFTRUE 8354
8352: GO 8361
8354: POP
// hHackChangeUnitSide ; 8 :
8355: CALL 21400 0 0
8359: GO 8377
8361: LD_INT 8
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8376
8369: POP
// hHackFog ; end ;
8370: CALL 21501 0 0
8374: GO 8377
8376: POP
// end ; if p2 = game_save_mode then
8377: LD_VAR 0 2
8381: PUSH
8382: LD_INT 102
8384: EQUAL
8385: IFFALSE 8440
// begin if p3 = 1 then
8387: LD_VAR 0 3
8391: PUSH
8392: LD_INT 1
8394: EQUAL
8395: IFFALSE 8407
// globalGameSaveCounter := p4 ;
8397: LD_ADDR_EXP 18
8401: PUSH
8402: LD_VAR 0 4
8406: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8407: LD_VAR 0 3
8411: PUSH
8412: LD_INT 2
8414: EQUAL
8415: PUSH
8416: LD_EXP 18
8420: AND
8421: IFFALSE 8440
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8423: LD_STRING setGameSaveCounter(
8425: PUSH
8426: LD_EXP 18
8430: STR
8431: PUSH
8432: LD_STRING )
8434: STR
8435: PPUSH
8436: CALL_OW 559
// end ; end ;
8440: LD_VAR 0 7
8444: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8445: LD_INT 0
8447: PPUSH
// streamModeActive := false ;
8448: LD_ADDR_EXP 19
8452: PUSH
8453: LD_INT 0
8455: ST_TO_ADDR
// normalCounter := 36 ;
8456: LD_ADDR_EXP 20
8460: PUSH
8461: LD_INT 36
8463: ST_TO_ADDR
// hardcoreCounter := 18 ;
8464: LD_ADDR_EXP 21
8468: PUSH
8469: LD_INT 18
8471: ST_TO_ADDR
// sRocket := false ;
8472: LD_ADDR_EXP 24
8476: PUSH
8477: LD_INT 0
8479: ST_TO_ADDR
// sSpeed := false ;
8480: LD_ADDR_EXP 23
8484: PUSH
8485: LD_INT 0
8487: ST_TO_ADDR
// sEngine := false ;
8488: LD_ADDR_EXP 25
8492: PUSH
8493: LD_INT 0
8495: ST_TO_ADDR
// sSpec := false ;
8496: LD_ADDR_EXP 22
8500: PUSH
8501: LD_INT 0
8503: ST_TO_ADDR
// sLevel := false ;
8504: LD_ADDR_EXP 26
8508: PUSH
8509: LD_INT 0
8511: ST_TO_ADDR
// sArmoury := false ;
8512: LD_ADDR_EXP 27
8516: PUSH
8517: LD_INT 0
8519: ST_TO_ADDR
// sRadar := false ;
8520: LD_ADDR_EXP 28
8524: PUSH
8525: LD_INT 0
8527: ST_TO_ADDR
// sBunker := false ;
8528: LD_ADDR_EXP 29
8532: PUSH
8533: LD_INT 0
8535: ST_TO_ADDR
// sHack := false ;
8536: LD_ADDR_EXP 30
8540: PUSH
8541: LD_INT 0
8543: ST_TO_ADDR
// sFire := false ;
8544: LD_ADDR_EXP 31
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// sRefresh := false ;
8552: LD_ADDR_EXP 32
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// sExp := false ;
8560: LD_ADDR_EXP 33
8564: PUSH
8565: LD_INT 0
8567: ST_TO_ADDR
// sDepot := false ;
8568: LD_ADDR_EXP 34
8572: PUSH
8573: LD_INT 0
8575: ST_TO_ADDR
// sFlag := false ;
8576: LD_ADDR_EXP 35
8580: PUSH
8581: LD_INT 0
8583: ST_TO_ADDR
// sKamikadze := false ;
8584: LD_ADDR_EXP 43
8588: PUSH
8589: LD_INT 0
8591: ST_TO_ADDR
// sTroll := false ;
8592: LD_ADDR_EXP 44
8596: PUSH
8597: LD_INT 0
8599: ST_TO_ADDR
// sSlow := false ;
8600: LD_ADDR_EXP 45
8604: PUSH
8605: LD_INT 0
8607: ST_TO_ADDR
// sLack := false ;
8608: LD_ADDR_EXP 46
8612: PUSH
8613: LD_INT 0
8615: ST_TO_ADDR
// sTank := false ;
8616: LD_ADDR_EXP 48
8620: PUSH
8621: LD_INT 0
8623: ST_TO_ADDR
// sRemote := false ;
8624: LD_ADDR_EXP 49
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// sPowell := false ;
8632: LD_ADDR_EXP 50
8636: PUSH
8637: LD_INT 0
8639: ST_TO_ADDR
// sTeleport := false ;
8640: LD_ADDR_EXP 53
8644: PUSH
8645: LD_INT 0
8647: ST_TO_ADDR
// sOilTower := false ;
8648: LD_ADDR_EXP 55
8652: PUSH
8653: LD_INT 0
8655: ST_TO_ADDR
// sShovel := false ;
8656: LD_ADDR_EXP 56
8660: PUSH
8661: LD_INT 0
8663: ST_TO_ADDR
// sSheik := false ;
8664: LD_ADDR_EXP 57
8668: PUSH
8669: LD_INT 0
8671: ST_TO_ADDR
// sEarthquake := false ;
8672: LD_ADDR_EXP 59
8676: PUSH
8677: LD_INT 0
8679: ST_TO_ADDR
// sAI := false ;
8680: LD_ADDR_EXP 60
8684: PUSH
8685: LD_INT 0
8687: ST_TO_ADDR
// sCargo := false ;
8688: LD_ADDR_EXP 63
8692: PUSH
8693: LD_INT 0
8695: ST_TO_ADDR
// sDLaser := false ;
8696: LD_ADDR_EXP 64
8700: PUSH
8701: LD_INT 0
8703: ST_TO_ADDR
// sExchange := false ;
8704: LD_ADDR_EXP 65
8708: PUSH
8709: LD_INT 0
8711: ST_TO_ADDR
// sFac := false ;
8712: LD_ADDR_EXP 66
8716: PUSH
8717: LD_INT 0
8719: ST_TO_ADDR
// sPower := false ;
8720: LD_ADDR_EXP 67
8724: PUSH
8725: LD_INT 0
8727: ST_TO_ADDR
// sRandom := false ;
8728: LD_ADDR_EXP 68
8732: PUSH
8733: LD_INT 0
8735: ST_TO_ADDR
// sShield := false ;
8736: LD_ADDR_EXP 69
8740: PUSH
8741: LD_INT 0
8743: ST_TO_ADDR
// sTime := false ;
8744: LD_ADDR_EXP 70
8748: PUSH
8749: LD_INT 0
8751: ST_TO_ADDR
// sTools := false ;
8752: LD_ADDR_EXP 71
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// sSold := false ;
8760: LD_ADDR_EXP 36
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// sDiff := false ;
8768: LD_ADDR_EXP 37
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// sFog := false ;
8776: LD_ADDR_EXP 40
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// sReset := false ;
8784: LD_ADDR_EXP 41
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// sSun := false ;
8792: LD_ADDR_EXP 42
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// sTiger := false ;
8800: LD_ADDR_EXP 38
8804: PUSH
8805: LD_INT 0
8807: ST_TO_ADDR
// sBomb := false ;
8808: LD_ADDR_EXP 39
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// sWound := false ;
8816: LD_ADDR_EXP 47
8820: PUSH
8821: LD_INT 0
8823: ST_TO_ADDR
// sBetray := false ;
8824: LD_ADDR_EXP 51
8828: PUSH
8829: LD_INT 0
8831: ST_TO_ADDR
// sContamin := false ;
8832: LD_ADDR_EXP 52
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// sOil := false ;
8840: LD_ADDR_EXP 54
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// sStu := false ;
8848: LD_ADDR_EXP 58
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// sBazooka := false ;
8856: LD_ADDR_EXP 61
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// sMortar := false ;
8864: LD_ADDR_EXP 62
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// sRanger := false ;
8872: LD_ADDR_EXP 72
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// sComputer := false ;
8880: LD_ADDR_EXP 73
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// s30 := false ;
8888: LD_ADDR_EXP 74
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// s60 := false ;
8896: LD_ADDR_EXP 75
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// end ;
8904: LD_VAR 0 1
8908: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8909: LD_INT 0
8911: PPUSH
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
// result := [ ] ;
8918: LD_ADDR_VAR 0 2
8922: PUSH
8923: EMPTY
8924: ST_TO_ADDR
// if campaign_id = 1 then
8925: LD_OWVAR 69
8929: PUSH
8930: LD_INT 1
8932: EQUAL
8933: IFFALSE 12099
// begin case mission_number of 1 :
8935: LD_OWVAR 70
8939: PUSH
8940: LD_INT 1
8942: DOUBLE
8943: EQUAL
8944: IFTRUE 8948
8946: GO 9024
8948: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8949: LD_ADDR_VAR 0 2
8953: PUSH
8954: LD_INT 2
8956: PUSH
8957: LD_INT 4
8959: PUSH
8960: LD_INT 11
8962: PUSH
8963: LD_INT 12
8965: PUSH
8966: LD_INT 15
8968: PUSH
8969: LD_INT 16
8971: PUSH
8972: LD_INT 22
8974: PUSH
8975: LD_INT 23
8977: PUSH
8978: LD_INT 26
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 101
8994: PUSH
8995: LD_INT 102
8997: PUSH
8998: LD_INT 106
9000: PUSH
9001: LD_INT 116
9003: PUSH
9004: LD_INT 117
9006: PUSH
9007: LD_INT 118
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: ST_TO_ADDR
9022: GO 12097
9024: LD_INT 2
9026: DOUBLE
9027: EQUAL
9028: IFTRUE 9032
9030: GO 9116
9032: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9033: LD_ADDR_VAR 0 2
9037: PUSH
9038: LD_INT 2
9040: PUSH
9041: LD_INT 4
9043: PUSH
9044: LD_INT 11
9046: PUSH
9047: LD_INT 12
9049: PUSH
9050: LD_INT 15
9052: PUSH
9053: LD_INT 16
9055: PUSH
9056: LD_INT 22
9058: PUSH
9059: LD_INT 23
9061: PUSH
9062: LD_INT 26
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: PUSH
9076: LD_INT 101
9078: PUSH
9079: LD_INT 102
9081: PUSH
9082: LD_INT 105
9084: PUSH
9085: LD_INT 106
9087: PUSH
9088: LD_INT 108
9090: PUSH
9091: LD_INT 116
9093: PUSH
9094: LD_INT 117
9096: PUSH
9097: LD_INT 118
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: ST_TO_ADDR
9114: GO 12097
9116: LD_INT 3
9118: DOUBLE
9119: EQUAL
9120: IFTRUE 9124
9122: GO 9212
9124: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9125: LD_ADDR_VAR 0 2
9129: PUSH
9130: LD_INT 2
9132: PUSH
9133: LD_INT 4
9135: PUSH
9136: LD_INT 5
9138: PUSH
9139: LD_INT 11
9141: PUSH
9142: LD_INT 12
9144: PUSH
9145: LD_INT 15
9147: PUSH
9148: LD_INT 16
9150: PUSH
9151: LD_INT 22
9153: PUSH
9154: LD_INT 26
9156: PUSH
9157: LD_INT 36
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 101
9174: PUSH
9175: LD_INT 102
9177: PUSH
9178: LD_INT 105
9180: PUSH
9181: LD_INT 106
9183: PUSH
9184: LD_INT 108
9186: PUSH
9187: LD_INT 116
9189: PUSH
9190: LD_INT 117
9192: PUSH
9193: LD_INT 118
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: ST_TO_ADDR
9210: GO 12097
9212: LD_INT 4
9214: DOUBLE
9215: EQUAL
9216: IFTRUE 9220
9218: GO 9316
9220: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: LD_INT 2
9228: PUSH
9229: LD_INT 4
9231: PUSH
9232: LD_INT 5
9234: PUSH
9235: LD_INT 8
9237: PUSH
9238: LD_INT 11
9240: PUSH
9241: LD_INT 12
9243: PUSH
9244: LD_INT 15
9246: PUSH
9247: LD_INT 16
9249: PUSH
9250: LD_INT 22
9252: PUSH
9253: LD_INT 23
9255: PUSH
9256: LD_INT 26
9258: PUSH
9259: LD_INT 36
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 101
9278: PUSH
9279: LD_INT 102
9281: PUSH
9282: LD_INT 105
9284: PUSH
9285: LD_INT 106
9287: PUSH
9288: LD_INT 108
9290: PUSH
9291: LD_INT 116
9293: PUSH
9294: LD_INT 117
9296: PUSH
9297: LD_INT 118
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: ST_TO_ADDR
9314: GO 12097
9316: LD_INT 5
9318: DOUBLE
9319: EQUAL
9320: IFTRUE 9324
9322: GO 9436
9324: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9325: LD_ADDR_VAR 0 2
9329: PUSH
9330: LD_INT 2
9332: PUSH
9333: LD_INT 4
9335: PUSH
9336: LD_INT 5
9338: PUSH
9339: LD_INT 6
9341: PUSH
9342: LD_INT 8
9344: PUSH
9345: LD_INT 11
9347: PUSH
9348: LD_INT 12
9350: PUSH
9351: LD_INT 15
9353: PUSH
9354: LD_INT 16
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_INT 23
9362: PUSH
9363: LD_INT 25
9365: PUSH
9366: LD_INT 26
9368: PUSH
9369: LD_INT 36
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 101
9390: PUSH
9391: LD_INT 102
9393: PUSH
9394: LD_INT 105
9396: PUSH
9397: LD_INT 106
9399: PUSH
9400: LD_INT 108
9402: PUSH
9403: LD_INT 109
9405: PUSH
9406: LD_INT 112
9408: PUSH
9409: LD_INT 116
9411: PUSH
9412: LD_INT 117
9414: PUSH
9415: LD_INT 118
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: ST_TO_ADDR
9434: GO 12097
9436: LD_INT 6
9438: DOUBLE
9439: EQUAL
9440: IFTRUE 9444
9442: GO 9576
9444: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9445: LD_ADDR_VAR 0 2
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: LD_INT 4
9455: PUSH
9456: LD_INT 5
9458: PUSH
9459: LD_INT 6
9461: PUSH
9462: LD_INT 8
9464: PUSH
9465: LD_INT 11
9467: PUSH
9468: LD_INT 12
9470: PUSH
9471: LD_INT 15
9473: PUSH
9474: LD_INT 16
9476: PUSH
9477: LD_INT 20
9479: PUSH
9480: LD_INT 21
9482: PUSH
9483: LD_INT 22
9485: PUSH
9486: LD_INT 23
9488: PUSH
9489: LD_INT 25
9491: PUSH
9492: LD_INT 26
9494: PUSH
9495: LD_INT 30
9497: PUSH
9498: LD_INT 31
9500: PUSH
9501: LD_INT 32
9503: PUSH
9504: LD_INT 36
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: LD_INT 101
9530: PUSH
9531: LD_INT 102
9533: PUSH
9534: LD_INT 105
9536: PUSH
9537: LD_INT 106
9539: PUSH
9540: LD_INT 108
9542: PUSH
9543: LD_INT 109
9545: PUSH
9546: LD_INT 112
9548: PUSH
9549: LD_INT 116
9551: PUSH
9552: LD_INT 117
9554: PUSH
9555: LD_INT 118
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: ST_TO_ADDR
9574: GO 12097
9576: LD_INT 7
9578: DOUBLE
9579: EQUAL
9580: IFTRUE 9584
9582: GO 9696
9584: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9585: LD_ADDR_VAR 0 2
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: LD_INT 4
9595: PUSH
9596: LD_INT 5
9598: PUSH
9599: LD_INT 7
9601: PUSH
9602: LD_INT 11
9604: PUSH
9605: LD_INT 12
9607: PUSH
9608: LD_INT 15
9610: PUSH
9611: LD_INT 16
9613: PUSH
9614: LD_INT 20
9616: PUSH
9617: LD_INT 21
9619: PUSH
9620: LD_INT 22
9622: PUSH
9623: LD_INT 23
9625: PUSH
9626: LD_INT 25
9628: PUSH
9629: LD_INT 26
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 101
9650: PUSH
9651: LD_INT 102
9653: PUSH
9654: LD_INT 103
9656: PUSH
9657: LD_INT 105
9659: PUSH
9660: LD_INT 106
9662: PUSH
9663: LD_INT 108
9665: PUSH
9666: LD_INT 112
9668: PUSH
9669: LD_INT 116
9671: PUSH
9672: LD_INT 117
9674: PUSH
9675: LD_INT 118
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: ST_TO_ADDR
9694: GO 12097
9696: LD_INT 8
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 9844
9704: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9705: LD_ADDR_VAR 0 2
9709: PUSH
9710: LD_INT 2
9712: PUSH
9713: LD_INT 4
9715: PUSH
9716: LD_INT 5
9718: PUSH
9719: LD_INT 6
9721: PUSH
9722: LD_INT 7
9724: PUSH
9725: LD_INT 8
9727: PUSH
9728: LD_INT 11
9730: PUSH
9731: LD_INT 12
9733: PUSH
9734: LD_INT 15
9736: PUSH
9737: LD_INT 16
9739: PUSH
9740: LD_INT 20
9742: PUSH
9743: LD_INT 21
9745: PUSH
9746: LD_INT 22
9748: PUSH
9749: LD_INT 23
9751: PUSH
9752: LD_INT 25
9754: PUSH
9755: LD_INT 26
9757: PUSH
9758: LD_INT 30
9760: PUSH
9761: LD_INT 31
9763: PUSH
9764: LD_INT 32
9766: PUSH
9767: LD_INT 36
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: PUSH
9792: LD_INT 101
9794: PUSH
9795: LD_INT 102
9797: PUSH
9798: LD_INT 103
9800: PUSH
9801: LD_INT 105
9803: PUSH
9804: LD_INT 106
9806: PUSH
9807: LD_INT 108
9809: PUSH
9810: LD_INT 109
9812: PUSH
9813: LD_INT 112
9815: PUSH
9816: LD_INT 116
9818: PUSH
9819: LD_INT 117
9821: PUSH
9822: LD_INT 118
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: ST_TO_ADDR
9842: GO 12097
9844: LD_INT 9
9846: DOUBLE
9847: EQUAL
9848: IFTRUE 9852
9850: GO 10000
9852: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9853: LD_ADDR_VAR 0 2
9857: PUSH
9858: LD_INT 2
9860: PUSH
9861: LD_INT 4
9863: PUSH
9864: LD_INT 5
9866: PUSH
9867: LD_INT 6
9869: PUSH
9870: LD_INT 7
9872: PUSH
9873: LD_INT 8
9875: PUSH
9876: LD_INT 11
9878: PUSH
9879: LD_INT 12
9881: PUSH
9882: LD_INT 15
9884: PUSH
9885: LD_INT 16
9887: PUSH
9888: LD_INT 20
9890: PUSH
9891: LD_INT 21
9893: PUSH
9894: LD_INT 22
9896: PUSH
9897: LD_INT 23
9899: PUSH
9900: LD_INT 25
9902: PUSH
9903: LD_INT 26
9905: PUSH
9906: LD_INT 28
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 31
9914: PUSH
9915: LD_INT 32
9917: PUSH
9918: LD_INT 36
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 101
9946: PUSH
9947: LD_INT 102
9949: PUSH
9950: LD_INT 103
9952: PUSH
9953: LD_INT 105
9955: PUSH
9956: LD_INT 106
9958: PUSH
9959: LD_INT 108
9961: PUSH
9962: LD_INT 109
9964: PUSH
9965: LD_INT 112
9967: PUSH
9968: LD_INT 114
9970: PUSH
9971: LD_INT 116
9973: PUSH
9974: LD_INT 117
9976: PUSH
9977: LD_INT 118
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: ST_TO_ADDR
9998: GO 12097
10000: LD_INT 10
10002: DOUBLE
10003: EQUAL
10004: IFTRUE 10008
10006: GO 10204
10008: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10009: LD_ADDR_VAR 0 2
10013: PUSH
10014: LD_INT 2
10016: PUSH
10017: LD_INT 4
10019: PUSH
10020: LD_INT 5
10022: PUSH
10023: LD_INT 6
10025: PUSH
10026: LD_INT 7
10028: PUSH
10029: LD_INT 8
10031: PUSH
10032: LD_INT 9
10034: PUSH
10035: LD_INT 10
10037: PUSH
10038: LD_INT 11
10040: PUSH
10041: LD_INT 12
10043: PUSH
10044: LD_INT 13
10046: PUSH
10047: LD_INT 14
10049: PUSH
10050: LD_INT 15
10052: PUSH
10053: LD_INT 16
10055: PUSH
10056: LD_INT 17
10058: PUSH
10059: LD_INT 18
10061: PUSH
10062: LD_INT 19
10064: PUSH
10065: LD_INT 20
10067: PUSH
10068: LD_INT 21
10070: PUSH
10071: LD_INT 22
10073: PUSH
10074: LD_INT 23
10076: PUSH
10077: LD_INT 24
10079: PUSH
10080: LD_INT 25
10082: PUSH
10083: LD_INT 26
10085: PUSH
10086: LD_INT 28
10088: PUSH
10089: LD_INT 30
10091: PUSH
10092: LD_INT 31
10094: PUSH
10095: LD_INT 32
10097: PUSH
10098: LD_INT 36
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 101
10134: PUSH
10135: LD_INT 102
10137: PUSH
10138: LD_INT 103
10140: PUSH
10141: LD_INT 104
10143: PUSH
10144: LD_INT 105
10146: PUSH
10147: LD_INT 106
10149: PUSH
10150: LD_INT 107
10152: PUSH
10153: LD_INT 108
10155: PUSH
10156: LD_INT 109
10158: PUSH
10159: LD_INT 110
10161: PUSH
10162: LD_INT 111
10164: PUSH
10165: LD_INT 112
10167: PUSH
10168: LD_INT 114
10170: PUSH
10171: LD_INT 116
10173: PUSH
10174: LD_INT 117
10176: PUSH
10177: LD_INT 118
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: ST_TO_ADDR
10202: GO 12097
10204: LD_INT 11
10206: DOUBLE
10207: EQUAL
10208: IFTRUE 10212
10210: GO 10416
10212: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10213: LD_ADDR_VAR 0 2
10217: PUSH
10218: LD_INT 2
10220: PUSH
10221: LD_INT 3
10223: PUSH
10224: LD_INT 4
10226: PUSH
10227: LD_INT 5
10229: PUSH
10230: LD_INT 6
10232: PUSH
10233: LD_INT 7
10235: PUSH
10236: LD_INT 8
10238: PUSH
10239: LD_INT 9
10241: PUSH
10242: LD_INT 10
10244: PUSH
10245: LD_INT 11
10247: PUSH
10248: LD_INT 12
10250: PUSH
10251: LD_INT 13
10253: PUSH
10254: LD_INT 14
10256: PUSH
10257: LD_INT 15
10259: PUSH
10260: LD_INT 16
10262: PUSH
10263: LD_INT 17
10265: PUSH
10266: LD_INT 18
10268: PUSH
10269: LD_INT 19
10271: PUSH
10272: LD_INT 20
10274: PUSH
10275: LD_INT 21
10277: PUSH
10278: LD_INT 22
10280: PUSH
10281: LD_INT 23
10283: PUSH
10284: LD_INT 24
10286: PUSH
10287: LD_INT 25
10289: PUSH
10290: LD_INT 26
10292: PUSH
10293: LD_INT 28
10295: PUSH
10296: LD_INT 30
10298: PUSH
10299: LD_INT 31
10301: PUSH
10302: LD_INT 32
10304: PUSH
10305: LD_INT 34
10307: PUSH
10308: LD_INT 36
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 101
10346: PUSH
10347: LD_INT 102
10349: PUSH
10350: LD_INT 103
10352: PUSH
10353: LD_INT 104
10355: PUSH
10356: LD_INT 105
10358: PUSH
10359: LD_INT 106
10361: PUSH
10362: LD_INT 107
10364: PUSH
10365: LD_INT 108
10367: PUSH
10368: LD_INT 109
10370: PUSH
10371: LD_INT 110
10373: PUSH
10374: LD_INT 111
10376: PUSH
10377: LD_INT 112
10379: PUSH
10380: LD_INT 114
10382: PUSH
10383: LD_INT 116
10385: PUSH
10386: LD_INT 117
10388: PUSH
10389: LD_INT 118
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: ST_TO_ADDR
10414: GO 12097
10416: LD_INT 12
10418: DOUBLE
10419: EQUAL
10420: IFTRUE 10424
10422: GO 10644
10424: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10425: LD_ADDR_VAR 0 2
10429: PUSH
10430: LD_INT 1
10432: PUSH
10433: LD_INT 2
10435: PUSH
10436: LD_INT 3
10438: PUSH
10439: LD_INT 4
10441: PUSH
10442: LD_INT 5
10444: PUSH
10445: LD_INT 6
10447: PUSH
10448: LD_INT 7
10450: PUSH
10451: LD_INT 8
10453: PUSH
10454: LD_INT 9
10456: PUSH
10457: LD_INT 10
10459: PUSH
10460: LD_INT 11
10462: PUSH
10463: LD_INT 12
10465: PUSH
10466: LD_INT 13
10468: PUSH
10469: LD_INT 14
10471: PUSH
10472: LD_INT 15
10474: PUSH
10475: LD_INT 16
10477: PUSH
10478: LD_INT 17
10480: PUSH
10481: LD_INT 18
10483: PUSH
10484: LD_INT 19
10486: PUSH
10487: LD_INT 20
10489: PUSH
10490: LD_INT 21
10492: PUSH
10493: LD_INT 22
10495: PUSH
10496: LD_INT 23
10498: PUSH
10499: LD_INT 24
10501: PUSH
10502: LD_INT 25
10504: PUSH
10505: LD_INT 26
10507: PUSH
10508: LD_INT 27
10510: PUSH
10511: LD_INT 28
10513: PUSH
10514: LD_INT 30
10516: PUSH
10517: LD_INT 31
10519: PUSH
10520: LD_INT 32
10522: PUSH
10523: LD_INT 33
10525: PUSH
10526: LD_INT 34
10528: PUSH
10529: LD_INT 36
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 101
10570: PUSH
10571: LD_INT 102
10573: PUSH
10574: LD_INT 103
10576: PUSH
10577: LD_INT 104
10579: PUSH
10580: LD_INT 105
10582: PUSH
10583: LD_INT 106
10585: PUSH
10586: LD_INT 107
10588: PUSH
10589: LD_INT 108
10591: PUSH
10592: LD_INT 109
10594: PUSH
10595: LD_INT 110
10597: PUSH
10598: LD_INT 111
10600: PUSH
10601: LD_INT 112
10603: PUSH
10604: LD_INT 113
10606: PUSH
10607: LD_INT 114
10609: PUSH
10610: LD_INT 116
10612: PUSH
10613: LD_INT 117
10615: PUSH
10616: LD_INT 118
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: ST_TO_ADDR
10642: GO 12097
10644: LD_INT 13
10646: DOUBLE
10647: EQUAL
10648: IFTRUE 10652
10650: GO 10860
10652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10653: LD_ADDR_VAR 0 2
10657: PUSH
10658: LD_INT 1
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: LD_INT 3
10666: PUSH
10667: LD_INT 4
10669: PUSH
10670: LD_INT 5
10672: PUSH
10673: LD_INT 8
10675: PUSH
10676: LD_INT 9
10678: PUSH
10679: LD_INT 10
10681: PUSH
10682: LD_INT 11
10684: PUSH
10685: LD_INT 12
10687: PUSH
10688: LD_INT 14
10690: PUSH
10691: LD_INT 15
10693: PUSH
10694: LD_INT 16
10696: PUSH
10697: LD_INT 17
10699: PUSH
10700: LD_INT 18
10702: PUSH
10703: LD_INT 19
10705: PUSH
10706: LD_INT 20
10708: PUSH
10709: LD_INT 21
10711: PUSH
10712: LD_INT 22
10714: PUSH
10715: LD_INT 23
10717: PUSH
10718: LD_INT 24
10720: PUSH
10721: LD_INT 25
10723: PUSH
10724: LD_INT 26
10726: PUSH
10727: LD_INT 27
10729: PUSH
10730: LD_INT 28
10732: PUSH
10733: LD_INT 30
10735: PUSH
10736: LD_INT 31
10738: PUSH
10739: LD_INT 32
10741: PUSH
10742: LD_INT 33
10744: PUSH
10745: LD_INT 34
10747: PUSH
10748: LD_INT 36
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 101
10786: PUSH
10787: LD_INT 102
10789: PUSH
10790: LD_INT 103
10792: PUSH
10793: LD_INT 104
10795: PUSH
10796: LD_INT 105
10798: PUSH
10799: LD_INT 106
10801: PUSH
10802: LD_INT 107
10804: PUSH
10805: LD_INT 108
10807: PUSH
10808: LD_INT 109
10810: PUSH
10811: LD_INT 110
10813: PUSH
10814: LD_INT 111
10816: PUSH
10817: LD_INT 112
10819: PUSH
10820: LD_INT 113
10822: PUSH
10823: LD_INT 114
10825: PUSH
10826: LD_INT 116
10828: PUSH
10829: LD_INT 117
10831: PUSH
10832: LD_INT 118
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: ST_TO_ADDR
10858: GO 12097
10860: LD_INT 14
10862: DOUBLE
10863: EQUAL
10864: IFTRUE 10868
10866: GO 11092
10868: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: LD_INT 1
10876: PUSH
10877: LD_INT 2
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: LD_INT 4
10885: PUSH
10886: LD_INT 5
10888: PUSH
10889: LD_INT 6
10891: PUSH
10892: LD_INT 7
10894: PUSH
10895: LD_INT 8
10897: PUSH
10898: LD_INT 9
10900: PUSH
10901: LD_INT 10
10903: PUSH
10904: LD_INT 11
10906: PUSH
10907: LD_INT 12
10909: PUSH
10910: LD_INT 13
10912: PUSH
10913: LD_INT 14
10915: PUSH
10916: LD_INT 15
10918: PUSH
10919: LD_INT 16
10921: PUSH
10922: LD_INT 17
10924: PUSH
10925: LD_INT 18
10927: PUSH
10928: LD_INT 19
10930: PUSH
10931: LD_INT 20
10933: PUSH
10934: LD_INT 21
10936: PUSH
10937: LD_INT 22
10939: PUSH
10940: LD_INT 23
10942: PUSH
10943: LD_INT 24
10945: PUSH
10946: LD_INT 25
10948: PUSH
10949: LD_INT 26
10951: PUSH
10952: LD_INT 27
10954: PUSH
10955: LD_INT 28
10957: PUSH
10958: LD_INT 29
10960: PUSH
10961: LD_INT 30
10963: PUSH
10964: LD_INT 31
10966: PUSH
10967: LD_INT 32
10969: PUSH
10970: LD_INT 33
10972: PUSH
10973: LD_INT 34
10975: PUSH
10976: LD_INT 36
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 101
11018: PUSH
11019: LD_INT 102
11021: PUSH
11022: LD_INT 103
11024: PUSH
11025: LD_INT 104
11027: PUSH
11028: LD_INT 105
11030: PUSH
11031: LD_INT 106
11033: PUSH
11034: LD_INT 107
11036: PUSH
11037: LD_INT 108
11039: PUSH
11040: LD_INT 109
11042: PUSH
11043: LD_INT 110
11045: PUSH
11046: LD_INT 111
11048: PUSH
11049: LD_INT 112
11051: PUSH
11052: LD_INT 113
11054: PUSH
11055: LD_INT 114
11057: PUSH
11058: LD_INT 116
11060: PUSH
11061: LD_INT 117
11063: PUSH
11064: LD_INT 118
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: ST_TO_ADDR
11090: GO 12097
11092: LD_INT 15
11094: DOUBLE
11095: EQUAL
11096: IFTRUE 11100
11098: GO 11324
11100: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11101: LD_ADDR_VAR 0 2
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: LD_INT 4
11117: PUSH
11118: LD_INT 5
11120: PUSH
11121: LD_INT 6
11123: PUSH
11124: LD_INT 7
11126: PUSH
11127: LD_INT 8
11129: PUSH
11130: LD_INT 9
11132: PUSH
11133: LD_INT 10
11135: PUSH
11136: LD_INT 11
11138: PUSH
11139: LD_INT 12
11141: PUSH
11142: LD_INT 13
11144: PUSH
11145: LD_INT 14
11147: PUSH
11148: LD_INT 15
11150: PUSH
11151: LD_INT 16
11153: PUSH
11154: LD_INT 17
11156: PUSH
11157: LD_INT 18
11159: PUSH
11160: LD_INT 19
11162: PUSH
11163: LD_INT 20
11165: PUSH
11166: LD_INT 21
11168: PUSH
11169: LD_INT 22
11171: PUSH
11172: LD_INT 23
11174: PUSH
11175: LD_INT 24
11177: PUSH
11178: LD_INT 25
11180: PUSH
11181: LD_INT 26
11183: PUSH
11184: LD_INT 27
11186: PUSH
11187: LD_INT 28
11189: PUSH
11190: LD_INT 29
11192: PUSH
11193: LD_INT 30
11195: PUSH
11196: LD_INT 31
11198: PUSH
11199: LD_INT 32
11201: PUSH
11202: LD_INT 33
11204: PUSH
11205: LD_INT 34
11207: PUSH
11208: LD_INT 36
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 101
11250: PUSH
11251: LD_INT 102
11253: PUSH
11254: LD_INT 103
11256: PUSH
11257: LD_INT 104
11259: PUSH
11260: LD_INT 105
11262: PUSH
11263: LD_INT 106
11265: PUSH
11266: LD_INT 107
11268: PUSH
11269: LD_INT 108
11271: PUSH
11272: LD_INT 109
11274: PUSH
11275: LD_INT 110
11277: PUSH
11278: LD_INT 111
11280: PUSH
11281: LD_INT 112
11283: PUSH
11284: LD_INT 113
11286: PUSH
11287: LD_INT 114
11289: PUSH
11290: LD_INT 116
11292: PUSH
11293: LD_INT 117
11295: PUSH
11296: LD_INT 118
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: ST_TO_ADDR
11322: GO 12097
11324: LD_INT 16
11326: DOUBLE
11327: EQUAL
11328: IFTRUE 11332
11330: GO 11468
11332: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11333: LD_ADDR_VAR 0 2
11337: PUSH
11338: LD_INT 2
11340: PUSH
11341: LD_INT 4
11343: PUSH
11344: LD_INT 5
11346: PUSH
11347: LD_INT 7
11349: PUSH
11350: LD_INT 11
11352: PUSH
11353: LD_INT 12
11355: PUSH
11356: LD_INT 15
11358: PUSH
11359: LD_INT 16
11361: PUSH
11362: LD_INT 20
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 22
11370: PUSH
11371: LD_INT 23
11373: PUSH
11374: LD_INT 25
11376: PUSH
11377: LD_INT 26
11379: PUSH
11380: LD_INT 30
11382: PUSH
11383: LD_INT 31
11385: PUSH
11386: LD_INT 32
11388: PUSH
11389: LD_INT 33
11391: PUSH
11392: LD_INT 34
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 101
11418: PUSH
11419: LD_INT 102
11421: PUSH
11422: LD_INT 103
11424: PUSH
11425: LD_INT 106
11427: PUSH
11428: LD_INT 108
11430: PUSH
11431: LD_INT 112
11433: PUSH
11434: LD_INT 113
11436: PUSH
11437: LD_INT 114
11439: PUSH
11440: LD_INT 116
11442: PUSH
11443: LD_INT 117
11445: PUSH
11446: LD_INT 118
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: ST_TO_ADDR
11466: GO 12097
11468: LD_INT 17
11470: DOUBLE
11471: EQUAL
11472: IFTRUE 11476
11474: GO 11700
11476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11477: LD_ADDR_VAR 0 2
11481: PUSH
11482: LD_INT 1
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: LD_INT 3
11490: PUSH
11491: LD_INT 4
11493: PUSH
11494: LD_INT 5
11496: PUSH
11497: LD_INT 6
11499: PUSH
11500: LD_INT 7
11502: PUSH
11503: LD_INT 8
11505: PUSH
11506: LD_INT 9
11508: PUSH
11509: LD_INT 10
11511: PUSH
11512: LD_INT 11
11514: PUSH
11515: LD_INT 12
11517: PUSH
11518: LD_INT 13
11520: PUSH
11521: LD_INT 14
11523: PUSH
11524: LD_INT 15
11526: PUSH
11527: LD_INT 16
11529: PUSH
11530: LD_INT 17
11532: PUSH
11533: LD_INT 18
11535: PUSH
11536: LD_INT 19
11538: PUSH
11539: LD_INT 20
11541: PUSH
11542: LD_INT 21
11544: PUSH
11545: LD_INT 22
11547: PUSH
11548: LD_INT 23
11550: PUSH
11551: LD_INT 24
11553: PUSH
11554: LD_INT 25
11556: PUSH
11557: LD_INT 26
11559: PUSH
11560: LD_INT 27
11562: PUSH
11563: LD_INT 28
11565: PUSH
11566: LD_INT 29
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 31
11574: PUSH
11575: LD_INT 32
11577: PUSH
11578: LD_INT 33
11580: PUSH
11581: LD_INT 34
11583: PUSH
11584: LD_INT 36
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 101
11626: PUSH
11627: LD_INT 102
11629: PUSH
11630: LD_INT 103
11632: PUSH
11633: LD_INT 104
11635: PUSH
11636: LD_INT 105
11638: PUSH
11639: LD_INT 106
11641: PUSH
11642: LD_INT 107
11644: PUSH
11645: LD_INT 108
11647: PUSH
11648: LD_INT 109
11650: PUSH
11651: LD_INT 110
11653: PUSH
11654: LD_INT 111
11656: PUSH
11657: LD_INT 112
11659: PUSH
11660: LD_INT 113
11662: PUSH
11663: LD_INT 114
11665: PUSH
11666: LD_INT 116
11668: PUSH
11669: LD_INT 117
11671: PUSH
11672: LD_INT 118
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: ST_TO_ADDR
11698: GO 12097
11700: LD_INT 18
11702: DOUBLE
11703: EQUAL
11704: IFTRUE 11708
11706: GO 11856
11708: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11709: LD_ADDR_VAR 0 2
11713: PUSH
11714: LD_INT 2
11716: PUSH
11717: LD_INT 4
11719: PUSH
11720: LD_INT 5
11722: PUSH
11723: LD_INT 7
11725: PUSH
11726: LD_INT 11
11728: PUSH
11729: LD_INT 12
11731: PUSH
11732: LD_INT 15
11734: PUSH
11735: LD_INT 16
11737: PUSH
11738: LD_INT 20
11740: PUSH
11741: LD_INT 21
11743: PUSH
11744: LD_INT 22
11746: PUSH
11747: LD_INT 23
11749: PUSH
11750: LD_INT 25
11752: PUSH
11753: LD_INT 26
11755: PUSH
11756: LD_INT 30
11758: PUSH
11759: LD_INT 31
11761: PUSH
11762: LD_INT 32
11764: PUSH
11765: LD_INT 33
11767: PUSH
11768: LD_INT 34
11770: PUSH
11771: LD_INT 35
11773: PUSH
11774: LD_INT 36
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: LD_INT 101
11802: PUSH
11803: LD_INT 102
11805: PUSH
11806: LD_INT 103
11808: PUSH
11809: LD_INT 106
11811: PUSH
11812: LD_INT 108
11814: PUSH
11815: LD_INT 112
11817: PUSH
11818: LD_INT 113
11820: PUSH
11821: LD_INT 114
11823: PUSH
11824: LD_INT 115
11826: PUSH
11827: LD_INT 116
11829: PUSH
11830: LD_INT 117
11832: PUSH
11833: LD_INT 118
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: ST_TO_ADDR
11854: GO 12097
11856: LD_INT 19
11858: DOUBLE
11859: EQUAL
11860: IFTRUE 11864
11862: GO 12096
11864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11865: LD_ADDR_VAR 0 2
11869: PUSH
11870: LD_INT 1
11872: PUSH
11873: LD_INT 2
11875: PUSH
11876: LD_INT 3
11878: PUSH
11879: LD_INT 4
11881: PUSH
11882: LD_INT 5
11884: PUSH
11885: LD_INT 6
11887: PUSH
11888: LD_INT 7
11890: PUSH
11891: LD_INT 8
11893: PUSH
11894: LD_INT 9
11896: PUSH
11897: LD_INT 10
11899: PUSH
11900: LD_INT 11
11902: PUSH
11903: LD_INT 12
11905: PUSH
11906: LD_INT 13
11908: PUSH
11909: LD_INT 14
11911: PUSH
11912: LD_INT 15
11914: PUSH
11915: LD_INT 16
11917: PUSH
11918: LD_INT 17
11920: PUSH
11921: LD_INT 18
11923: PUSH
11924: LD_INT 19
11926: PUSH
11927: LD_INT 20
11929: PUSH
11930: LD_INT 21
11932: PUSH
11933: LD_INT 22
11935: PUSH
11936: LD_INT 23
11938: PUSH
11939: LD_INT 24
11941: PUSH
11942: LD_INT 25
11944: PUSH
11945: LD_INT 26
11947: PUSH
11948: LD_INT 27
11950: PUSH
11951: LD_INT 28
11953: PUSH
11954: LD_INT 29
11956: PUSH
11957: LD_INT 30
11959: PUSH
11960: LD_INT 31
11962: PUSH
11963: LD_INT 32
11965: PUSH
11966: LD_INT 33
11968: PUSH
11969: LD_INT 34
11971: PUSH
11972: LD_INT 35
11974: PUSH
11975: LD_INT 36
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 101
12018: PUSH
12019: LD_INT 102
12021: PUSH
12022: LD_INT 103
12024: PUSH
12025: LD_INT 104
12027: PUSH
12028: LD_INT 105
12030: PUSH
12031: LD_INT 106
12033: PUSH
12034: LD_INT 107
12036: PUSH
12037: LD_INT 108
12039: PUSH
12040: LD_INT 109
12042: PUSH
12043: LD_INT 110
12045: PUSH
12046: LD_INT 111
12048: PUSH
12049: LD_INT 112
12051: PUSH
12052: LD_INT 113
12054: PUSH
12055: LD_INT 114
12057: PUSH
12058: LD_INT 115
12060: PUSH
12061: LD_INT 116
12063: PUSH
12064: LD_INT 117
12066: PUSH
12067: LD_INT 118
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: ST_TO_ADDR
12094: GO 12097
12096: POP
// end else
12097: GO 12328
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12099: LD_ADDR_VAR 0 2
12103: PUSH
12104: LD_INT 1
12106: PUSH
12107: LD_INT 2
12109: PUSH
12110: LD_INT 3
12112: PUSH
12113: LD_INT 4
12115: PUSH
12116: LD_INT 5
12118: PUSH
12119: LD_INT 6
12121: PUSH
12122: LD_INT 7
12124: PUSH
12125: LD_INT 8
12127: PUSH
12128: LD_INT 9
12130: PUSH
12131: LD_INT 10
12133: PUSH
12134: LD_INT 11
12136: PUSH
12137: LD_INT 12
12139: PUSH
12140: LD_INT 13
12142: PUSH
12143: LD_INT 14
12145: PUSH
12146: LD_INT 15
12148: PUSH
12149: LD_INT 16
12151: PUSH
12152: LD_INT 17
12154: PUSH
12155: LD_INT 18
12157: PUSH
12158: LD_INT 19
12160: PUSH
12161: LD_INT 20
12163: PUSH
12164: LD_INT 21
12166: PUSH
12167: LD_INT 22
12169: PUSH
12170: LD_INT 23
12172: PUSH
12173: LD_INT 24
12175: PUSH
12176: LD_INT 25
12178: PUSH
12179: LD_INT 26
12181: PUSH
12182: LD_INT 27
12184: PUSH
12185: LD_INT 28
12187: PUSH
12188: LD_INT 29
12190: PUSH
12191: LD_INT 30
12193: PUSH
12194: LD_INT 31
12196: PUSH
12197: LD_INT 32
12199: PUSH
12200: LD_INT 33
12202: PUSH
12203: LD_INT 34
12205: PUSH
12206: LD_INT 35
12208: PUSH
12209: LD_INT 36
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 101
12252: PUSH
12253: LD_INT 102
12255: PUSH
12256: LD_INT 103
12258: PUSH
12259: LD_INT 104
12261: PUSH
12262: LD_INT 105
12264: PUSH
12265: LD_INT 106
12267: PUSH
12268: LD_INT 107
12270: PUSH
12271: LD_INT 108
12273: PUSH
12274: LD_INT 109
12276: PUSH
12277: LD_INT 110
12279: PUSH
12280: LD_INT 111
12282: PUSH
12283: LD_INT 112
12285: PUSH
12286: LD_INT 113
12288: PUSH
12289: LD_INT 114
12291: PUSH
12292: LD_INT 115
12294: PUSH
12295: LD_INT 116
12297: PUSH
12298: LD_INT 117
12300: PUSH
12301: LD_INT 118
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: ST_TO_ADDR
// if result then
12328: LD_VAR 0 2
12332: IFFALSE 13118
// begin normal :=  ;
12334: LD_ADDR_VAR 0 5
12338: PUSH
12339: LD_STRING 
12341: ST_TO_ADDR
// hardcore :=  ;
12342: LD_ADDR_VAR 0 6
12346: PUSH
12347: LD_STRING 
12349: ST_TO_ADDR
// active :=  ;
12350: LD_ADDR_VAR 0 7
12354: PUSH
12355: LD_STRING 
12357: ST_TO_ADDR
// for i = 1 to normalCounter do
12358: LD_ADDR_VAR 0 8
12362: PUSH
12363: DOUBLE
12364: LD_INT 1
12366: DEC
12367: ST_TO_ADDR
12368: LD_EXP 20
12372: PUSH
12373: FOR_TO
12374: IFFALSE 12475
// begin tmp := 0 ;
12376: LD_ADDR_VAR 0 3
12380: PUSH
12381: LD_STRING 0
12383: ST_TO_ADDR
// if result [ 1 ] then
12384: LD_VAR 0 2
12388: PUSH
12389: LD_INT 1
12391: ARRAY
12392: IFFALSE 12457
// if result [ 1 ] [ 1 ] = i then
12394: LD_VAR 0 2
12398: PUSH
12399: LD_INT 1
12401: ARRAY
12402: PUSH
12403: LD_INT 1
12405: ARRAY
12406: PUSH
12407: LD_VAR 0 8
12411: EQUAL
12412: IFFALSE 12457
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12414: LD_ADDR_VAR 0 2
12418: PUSH
12419: LD_VAR 0 2
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: LD_VAR 0 2
12431: PUSH
12432: LD_INT 1
12434: ARRAY
12435: PPUSH
12436: LD_INT 1
12438: PPUSH
12439: CALL_OW 3
12443: PPUSH
12444: CALL_OW 1
12448: ST_TO_ADDR
// tmp := 1 ;
12449: LD_ADDR_VAR 0 3
12453: PUSH
12454: LD_STRING 1
12456: ST_TO_ADDR
// end ; normal := normal & tmp ;
12457: LD_ADDR_VAR 0 5
12461: PUSH
12462: LD_VAR 0 5
12466: PUSH
12467: LD_VAR 0 3
12471: STR
12472: ST_TO_ADDR
// end ;
12473: GO 12373
12475: POP
12476: POP
// for i = 1 to hardcoreCounter do
12477: LD_ADDR_VAR 0 8
12481: PUSH
12482: DOUBLE
12483: LD_INT 1
12485: DEC
12486: ST_TO_ADDR
12487: LD_EXP 21
12491: PUSH
12492: FOR_TO
12493: IFFALSE 12598
// begin tmp := 0 ;
12495: LD_ADDR_VAR 0 3
12499: PUSH
12500: LD_STRING 0
12502: ST_TO_ADDR
// if result [ 2 ] then
12503: LD_VAR 0 2
12507: PUSH
12508: LD_INT 2
12510: ARRAY
12511: IFFALSE 12580
// if result [ 2 ] [ 1 ] = 100 + i then
12513: LD_VAR 0 2
12517: PUSH
12518: LD_INT 2
12520: ARRAY
12521: PUSH
12522: LD_INT 1
12524: ARRAY
12525: PUSH
12526: LD_INT 100
12528: PUSH
12529: LD_VAR 0 8
12533: PLUS
12534: EQUAL
12535: IFFALSE 12580
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12537: LD_ADDR_VAR 0 2
12541: PUSH
12542: LD_VAR 0 2
12546: PPUSH
12547: LD_INT 2
12549: PPUSH
12550: LD_VAR 0 2
12554: PUSH
12555: LD_INT 2
12557: ARRAY
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 3
12566: PPUSH
12567: CALL_OW 1
12571: ST_TO_ADDR
// tmp := 1 ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_STRING 1
12579: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12580: LD_ADDR_VAR 0 6
12584: PUSH
12585: LD_VAR 0 6
12589: PUSH
12590: LD_VAR 0 3
12594: STR
12595: ST_TO_ADDR
// end ;
12596: GO 12492
12598: POP
12599: POP
// if isGameLoad then
12600: LD_VAR 0 1
12604: IFFALSE 13079
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12606: LD_ADDR_VAR 0 4
12610: PUSH
12611: LD_EXP 24
12615: PUSH
12616: LD_EXP 23
12620: PUSH
12621: LD_EXP 25
12625: PUSH
12626: LD_EXP 22
12630: PUSH
12631: LD_EXP 26
12635: PUSH
12636: LD_EXP 27
12640: PUSH
12641: LD_EXP 28
12645: PUSH
12646: LD_EXP 29
12650: PUSH
12651: LD_EXP 30
12655: PUSH
12656: LD_EXP 31
12660: PUSH
12661: LD_EXP 32
12665: PUSH
12666: LD_EXP 33
12670: PUSH
12671: LD_EXP 34
12675: PUSH
12676: LD_EXP 35
12680: PUSH
12681: LD_EXP 43
12685: PUSH
12686: LD_EXP 44
12690: PUSH
12691: LD_EXP 45
12695: PUSH
12696: LD_EXP 46
12700: PUSH
12701: LD_EXP 48
12705: PUSH
12706: LD_EXP 49
12710: PUSH
12711: LD_EXP 50
12715: PUSH
12716: LD_EXP 53
12720: PUSH
12721: LD_EXP 55
12725: PUSH
12726: LD_EXP 56
12730: PUSH
12731: LD_EXP 57
12735: PUSH
12736: LD_EXP 59
12740: PUSH
12741: LD_EXP 60
12745: PUSH
12746: LD_EXP 63
12750: PUSH
12751: LD_EXP 64
12755: PUSH
12756: LD_EXP 65
12760: PUSH
12761: LD_EXP 66
12765: PUSH
12766: LD_EXP 67
12770: PUSH
12771: LD_EXP 68
12775: PUSH
12776: LD_EXP 69
12780: PUSH
12781: LD_EXP 70
12785: PUSH
12786: LD_EXP 71
12790: PUSH
12791: LD_EXP 36
12795: PUSH
12796: LD_EXP 37
12800: PUSH
12801: LD_EXP 40
12805: PUSH
12806: LD_EXP 41
12810: PUSH
12811: LD_EXP 42
12815: PUSH
12816: LD_EXP 38
12820: PUSH
12821: LD_EXP 39
12825: PUSH
12826: LD_EXP 47
12830: PUSH
12831: LD_EXP 51
12835: PUSH
12836: LD_EXP 52
12840: PUSH
12841: LD_EXP 54
12845: PUSH
12846: LD_EXP 58
12850: PUSH
12851: LD_EXP 61
12855: PUSH
12856: LD_EXP 62
12860: PUSH
12861: LD_EXP 72
12865: PUSH
12866: LD_EXP 73
12870: PUSH
12871: LD_EXP 74
12875: PUSH
12876: LD_EXP 75
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: ST_TO_ADDR
// tmp :=  ;
12937: LD_ADDR_VAR 0 3
12941: PUSH
12942: LD_STRING 
12944: ST_TO_ADDR
// for i = 1 to normalCounter do
12945: LD_ADDR_VAR 0 8
12949: PUSH
12950: DOUBLE
12951: LD_INT 1
12953: DEC
12954: ST_TO_ADDR
12955: LD_EXP 20
12959: PUSH
12960: FOR_TO
12961: IFFALSE 12997
// begin if flags [ i ] then
12963: LD_VAR 0 4
12967: PUSH
12968: LD_VAR 0 8
12972: ARRAY
12973: IFFALSE 12995
// tmp := tmp & i & ; ;
12975: LD_ADDR_VAR 0 3
12979: PUSH
12980: LD_VAR 0 3
12984: PUSH
12985: LD_VAR 0 8
12989: STR
12990: PUSH
12991: LD_STRING ;
12993: STR
12994: ST_TO_ADDR
// end ;
12995: GO 12960
12997: POP
12998: POP
// for i = 1 to hardcoreCounter do
12999: LD_ADDR_VAR 0 8
13003: PUSH
13004: DOUBLE
13005: LD_INT 1
13007: DEC
13008: ST_TO_ADDR
13009: LD_EXP 21
13013: PUSH
13014: FOR_TO
13015: IFFALSE 13061
// begin if flags [ normalCounter + i ] then
13017: LD_VAR 0 4
13021: PUSH
13022: LD_EXP 20
13026: PUSH
13027: LD_VAR 0 8
13031: PLUS
13032: ARRAY
13033: IFFALSE 13059
// tmp := tmp & ( 100 + i ) & ; ;
13035: LD_ADDR_VAR 0 3
13039: PUSH
13040: LD_VAR 0 3
13044: PUSH
13045: LD_INT 100
13047: PUSH
13048: LD_VAR 0 8
13052: PLUS
13053: STR
13054: PUSH
13055: LD_STRING ;
13057: STR
13058: ST_TO_ADDR
// end ;
13059: GO 13014
13061: POP
13062: POP
// if tmp then
13063: LD_VAR 0 3
13067: IFFALSE 13079
// active := tmp ;
13069: LD_ADDR_VAR 0 7
13073: PUSH
13074: LD_VAR 0 3
13078: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13079: LD_STRING getStreamItemsFromMission("
13081: PUSH
13082: LD_VAR 0 5
13086: STR
13087: PUSH
13088: LD_STRING ","
13090: STR
13091: PUSH
13092: LD_VAR 0 6
13096: STR
13097: PUSH
13098: LD_STRING ","
13100: STR
13101: PUSH
13102: LD_VAR 0 7
13106: STR
13107: PUSH
13108: LD_STRING ")
13110: STR
13111: PPUSH
13112: CALL_OW 559
// end else
13116: GO 13125
// ToLua ( getStreamItemsFromMission("","","") ) ;
13118: LD_STRING getStreamItemsFromMission("","","")
13120: PPUSH
13121: CALL_OW 559
// end ;
13125: LD_VAR 0 2
13129: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13130: LD_EXP 19
13134: PUSH
13135: LD_EXP 24
13139: AND
13140: IFFALSE 13264
13142: GO 13144
13144: DISABLE
13145: LD_INT 0
13147: PPUSH
13148: PPUSH
// begin enable ;
13149: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13150: LD_ADDR_VAR 0 2
13154: PUSH
13155: LD_INT 22
13157: PUSH
13158: LD_OWVAR 2
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: LD_INT 34
13172: PUSH
13173: LD_INT 7
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 34
13182: PUSH
13183: LD_INT 45
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 34
13192: PUSH
13193: LD_INT 28
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 34
13202: PUSH
13203: LD_INT 47
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PPUSH
13221: CALL_OW 69
13225: ST_TO_ADDR
// if not tmp then
13226: LD_VAR 0 2
13230: NOT
13231: IFFALSE 13235
// exit ;
13233: GO 13264
// for i in tmp do
13235: LD_ADDR_VAR 0 1
13239: PUSH
13240: LD_VAR 0 2
13244: PUSH
13245: FOR_IN
13246: IFFALSE 13262
// begin SetLives ( i , 0 ) ;
13248: LD_VAR 0 1
13252: PPUSH
13253: LD_INT 0
13255: PPUSH
13256: CALL_OW 234
// end ;
13260: GO 13245
13262: POP
13263: POP
// end ;
13264: PPOPN 2
13266: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13267: LD_EXP 19
13271: PUSH
13272: LD_EXP 25
13276: AND
13277: IFFALSE 13361
13279: GO 13281
13281: DISABLE
13282: LD_INT 0
13284: PPUSH
13285: PPUSH
// begin enable ;
13286: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13287: LD_ADDR_VAR 0 2
13291: PUSH
13292: LD_INT 22
13294: PUSH
13295: LD_OWVAR 2
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 32
13306: PUSH
13307: LD_INT 3
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 69
13322: ST_TO_ADDR
// if not tmp then
13323: LD_VAR 0 2
13327: NOT
13328: IFFALSE 13332
// exit ;
13330: GO 13361
// for i in tmp do
13332: LD_ADDR_VAR 0 1
13336: PUSH
13337: LD_VAR 0 2
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13359
// begin SetLives ( i , 0 ) ;
13345: LD_VAR 0 1
13349: PPUSH
13350: LD_INT 0
13352: PPUSH
13353: CALL_OW 234
// end ;
13357: GO 13342
13359: POP
13360: POP
// end ;
13361: PPOPN 2
13363: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13364: LD_EXP 19
13368: PUSH
13369: LD_EXP 22
13373: AND
13374: IFFALSE 13467
13376: GO 13378
13378: DISABLE
13379: LD_INT 0
13381: PPUSH
// begin enable ;
13382: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13383: LD_ADDR_VAR 0 1
13387: PUSH
13388: LD_INT 22
13390: PUSH
13391: LD_OWVAR 2
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 2
13402: PUSH
13403: LD_INT 25
13405: PUSH
13406: LD_INT 5
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 25
13415: PUSH
13416: LD_INT 9
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 25
13425: PUSH
13426: LD_INT 8
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 69
13447: PUSH
13448: FOR_IN
13449: IFFALSE 13465
// begin SetClass ( i , 1 ) ;
13451: LD_VAR 0 1
13455: PPUSH
13456: LD_INT 1
13458: PPUSH
13459: CALL_OW 336
// end ;
13463: GO 13448
13465: POP
13466: POP
// end ;
13467: PPOPN 1
13469: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13470: LD_EXP 19
13474: PUSH
13475: LD_EXP 23
13479: AND
13480: PUSH
13481: LD_OWVAR 65
13485: PUSH
13486: LD_INT 7
13488: LESS
13489: AND
13490: IFFALSE 13504
13492: GO 13494
13494: DISABLE
// begin enable ;
13495: ENABLE
// game_speed := 7 ;
13496: LD_ADDR_OWVAR 65
13500: PUSH
13501: LD_INT 7
13503: ST_TO_ADDR
// end ;
13504: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13505: LD_EXP 19
13509: PUSH
13510: LD_EXP 26
13514: AND
13515: IFFALSE 13717
13517: GO 13519
13519: DISABLE
13520: LD_INT 0
13522: PPUSH
13523: PPUSH
13524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13525: LD_ADDR_VAR 0 3
13529: PUSH
13530: LD_INT 81
13532: PUSH
13533: LD_OWVAR 2
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 21
13544: PUSH
13545: LD_INT 1
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PPUSH
13556: CALL_OW 69
13560: ST_TO_ADDR
// if not tmp then
13561: LD_VAR 0 3
13565: NOT
13566: IFFALSE 13570
// exit ;
13568: GO 13717
// if tmp > 5 then
13570: LD_VAR 0 3
13574: PUSH
13575: LD_INT 5
13577: GREATER
13578: IFFALSE 13590
// k := 5 else
13580: LD_ADDR_VAR 0 2
13584: PUSH
13585: LD_INT 5
13587: ST_TO_ADDR
13588: GO 13600
// k := tmp ;
13590: LD_ADDR_VAR 0 2
13594: PUSH
13595: LD_VAR 0 3
13599: ST_TO_ADDR
// for i := 1 to k do
13600: LD_ADDR_VAR 0 1
13604: PUSH
13605: DOUBLE
13606: LD_INT 1
13608: DEC
13609: ST_TO_ADDR
13610: LD_VAR 0 2
13614: PUSH
13615: FOR_TO
13616: IFFALSE 13715
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13618: LD_VAR 0 3
13622: PUSH
13623: LD_VAR 0 1
13627: ARRAY
13628: PPUSH
13629: LD_VAR 0 1
13633: PUSH
13634: LD_INT 4
13636: MOD
13637: PUSH
13638: LD_INT 1
13640: PLUS
13641: PPUSH
13642: CALL_OW 259
13646: PUSH
13647: LD_INT 10
13649: LESS
13650: IFFALSE 13713
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13652: LD_VAR 0 3
13656: PUSH
13657: LD_VAR 0 1
13661: ARRAY
13662: PPUSH
13663: LD_VAR 0 1
13667: PUSH
13668: LD_INT 4
13670: MOD
13671: PUSH
13672: LD_INT 1
13674: PLUS
13675: PPUSH
13676: LD_VAR 0 3
13680: PUSH
13681: LD_VAR 0 1
13685: ARRAY
13686: PPUSH
13687: LD_VAR 0 1
13691: PUSH
13692: LD_INT 4
13694: MOD
13695: PUSH
13696: LD_INT 1
13698: PLUS
13699: PPUSH
13700: CALL_OW 259
13704: PUSH
13705: LD_INT 1
13707: PLUS
13708: PPUSH
13709: CALL_OW 237
13713: GO 13615
13715: POP
13716: POP
// end ;
13717: PPOPN 3
13719: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13720: LD_EXP 19
13724: PUSH
13725: LD_EXP 27
13729: AND
13730: IFFALSE 13750
13732: GO 13734
13734: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13735: LD_INT 4
13737: PPUSH
13738: LD_OWVAR 2
13742: PPUSH
13743: LD_INT 0
13745: PPUSH
13746: CALL_OW 324
13750: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13751: LD_EXP 19
13755: PUSH
13756: LD_EXP 56
13760: AND
13761: IFFALSE 13781
13763: GO 13765
13765: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13766: LD_INT 19
13768: PPUSH
13769: LD_OWVAR 2
13773: PPUSH
13774: LD_INT 0
13776: PPUSH
13777: CALL_OW 324
13781: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13782: LD_EXP 19
13786: PUSH
13787: LD_EXP 28
13791: AND
13792: IFFALSE 13894
13794: GO 13796
13796: DISABLE
13797: LD_INT 0
13799: PPUSH
13800: PPUSH
// begin enable ;
13801: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13802: LD_ADDR_VAR 0 2
13806: PUSH
13807: LD_INT 22
13809: PUSH
13810: LD_OWVAR 2
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 2
13821: PUSH
13822: LD_INT 34
13824: PUSH
13825: LD_INT 11
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 34
13834: PUSH
13835: LD_INT 30
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PPUSH
13851: CALL_OW 69
13855: ST_TO_ADDR
// if not tmp then
13856: LD_VAR 0 2
13860: NOT
13861: IFFALSE 13865
// exit ;
13863: GO 13894
// for i in tmp do
13865: LD_ADDR_VAR 0 1
13869: PUSH
13870: LD_VAR 0 2
13874: PUSH
13875: FOR_IN
13876: IFFALSE 13892
// begin SetLives ( i , 0 ) ;
13878: LD_VAR 0 1
13882: PPUSH
13883: LD_INT 0
13885: PPUSH
13886: CALL_OW 234
// end ;
13890: GO 13875
13892: POP
13893: POP
// end ;
13894: PPOPN 2
13896: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13897: LD_EXP 19
13901: PUSH
13902: LD_EXP 29
13906: AND
13907: IFFALSE 13927
13909: GO 13911
13911: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13912: LD_INT 32
13914: PPUSH
13915: LD_OWVAR 2
13919: PPUSH
13920: LD_INT 0
13922: PPUSH
13923: CALL_OW 324
13927: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13928: LD_EXP 19
13932: PUSH
13933: LD_EXP 30
13937: AND
13938: IFFALSE 14119
13940: GO 13942
13942: DISABLE
13943: LD_INT 0
13945: PPUSH
13946: PPUSH
13947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13948: LD_ADDR_VAR 0 2
13952: PUSH
13953: LD_INT 22
13955: PUSH
13956: LD_OWVAR 2
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 33
13967: PUSH
13968: LD_INT 3
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PPUSH
13979: CALL_OW 69
13983: ST_TO_ADDR
// if not tmp then
13984: LD_VAR 0 2
13988: NOT
13989: IFFALSE 13993
// exit ;
13991: GO 14119
// side := 0 ;
13993: LD_ADDR_VAR 0 3
13997: PUSH
13998: LD_INT 0
14000: ST_TO_ADDR
// for i := 1 to 8 do
14001: LD_ADDR_VAR 0 1
14005: PUSH
14006: DOUBLE
14007: LD_INT 1
14009: DEC
14010: ST_TO_ADDR
14011: LD_INT 8
14013: PUSH
14014: FOR_TO
14015: IFFALSE 14063
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14017: LD_OWVAR 2
14021: PUSH
14022: LD_VAR 0 1
14026: NONEQUAL
14027: PUSH
14028: LD_OWVAR 2
14032: PPUSH
14033: LD_VAR 0 1
14037: PPUSH
14038: CALL_OW 81
14042: PUSH
14043: LD_INT 2
14045: EQUAL
14046: AND
14047: IFFALSE 14061
// begin side := i ;
14049: LD_ADDR_VAR 0 3
14053: PUSH
14054: LD_VAR 0 1
14058: ST_TO_ADDR
// break ;
14059: GO 14063
// end ;
14061: GO 14014
14063: POP
14064: POP
// if not side then
14065: LD_VAR 0 3
14069: NOT
14070: IFFALSE 14074
// exit ;
14072: GO 14119
// for i := 1 to tmp do
14074: LD_ADDR_VAR 0 1
14078: PUSH
14079: DOUBLE
14080: LD_INT 1
14082: DEC
14083: ST_TO_ADDR
14084: LD_VAR 0 2
14088: PUSH
14089: FOR_TO
14090: IFFALSE 14117
// if Prob ( 60 ) then
14092: LD_INT 60
14094: PPUSH
14095: CALL_OW 13
14099: IFFALSE 14115
// SetSide ( i , side ) ;
14101: LD_VAR 0 1
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: CALL_OW 235
14115: GO 14089
14117: POP
14118: POP
// end ;
14119: PPOPN 3
14121: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14122: LD_EXP 19
14126: PUSH
14127: LD_EXP 32
14131: AND
14132: IFFALSE 14251
14134: GO 14136
14136: DISABLE
14137: LD_INT 0
14139: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14140: LD_ADDR_VAR 0 1
14144: PUSH
14145: LD_INT 22
14147: PUSH
14148: LD_OWVAR 2
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 21
14159: PUSH
14160: LD_INT 1
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 3
14169: PUSH
14170: LD_INT 23
14172: PUSH
14173: LD_INT 0
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: PPUSH
14189: CALL_OW 69
14193: PUSH
14194: FOR_IN
14195: IFFALSE 14249
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14197: LD_VAR 0 1
14201: PPUSH
14202: CALL_OW 257
14206: PUSH
14207: LD_INT 1
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: LD_INT 3
14215: PUSH
14216: LD_INT 4
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: IN
14225: IFFALSE 14247
// SetClass ( un , rand ( 1 , 4 ) ) ;
14227: LD_VAR 0 1
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: LD_INT 4
14237: PPUSH
14238: CALL_OW 12
14242: PPUSH
14243: CALL_OW 336
14247: GO 14194
14249: POP
14250: POP
// end ;
14251: PPOPN 1
14253: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14254: LD_EXP 19
14258: PUSH
14259: LD_EXP 31
14263: AND
14264: IFFALSE 14343
14266: GO 14268
14268: DISABLE
14269: LD_INT 0
14271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14272: LD_ADDR_VAR 0 1
14276: PUSH
14277: LD_INT 22
14279: PUSH
14280: LD_OWVAR 2
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 21
14291: PUSH
14292: LD_INT 3
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PPUSH
14303: CALL_OW 69
14307: ST_TO_ADDR
// if not tmp then
14308: LD_VAR 0 1
14312: NOT
14313: IFFALSE 14317
// exit ;
14315: GO 14343
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14317: LD_VAR 0 1
14321: PUSH
14322: LD_INT 1
14324: PPUSH
14325: LD_VAR 0 1
14329: PPUSH
14330: CALL_OW 12
14334: ARRAY
14335: PPUSH
14336: LD_INT 100
14338: PPUSH
14339: CALL_OW 234
// end ;
14343: PPOPN 1
14345: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14346: LD_EXP 19
14350: PUSH
14351: LD_EXP 33
14355: AND
14356: IFFALSE 14454
14358: GO 14360
14360: DISABLE
14361: LD_INT 0
14363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14364: LD_ADDR_VAR 0 1
14368: PUSH
14369: LD_INT 22
14371: PUSH
14372: LD_OWVAR 2
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 21
14383: PUSH
14384: LD_INT 1
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PPUSH
14395: CALL_OW 69
14399: ST_TO_ADDR
// if not tmp then
14400: LD_VAR 0 1
14404: NOT
14405: IFFALSE 14409
// exit ;
14407: GO 14454
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14409: LD_VAR 0 1
14413: PUSH
14414: LD_INT 1
14416: PPUSH
14417: LD_VAR 0 1
14421: PPUSH
14422: CALL_OW 12
14426: ARRAY
14427: PPUSH
14428: LD_INT 1
14430: PPUSH
14431: LD_INT 4
14433: PPUSH
14434: CALL_OW 12
14438: PPUSH
14439: LD_INT 3000
14441: PPUSH
14442: LD_INT 9000
14444: PPUSH
14445: CALL_OW 12
14449: PPUSH
14450: CALL_OW 492
// end ;
14454: PPOPN 1
14456: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14457: LD_EXP 19
14461: PUSH
14462: LD_EXP 34
14466: AND
14467: IFFALSE 14487
14469: GO 14471
14471: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14472: LD_INT 1
14474: PPUSH
14475: LD_OWVAR 2
14479: PPUSH
14480: LD_INT 0
14482: PPUSH
14483: CALL_OW 324
14487: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14488: LD_EXP 19
14492: PUSH
14493: LD_EXP 35
14497: AND
14498: IFFALSE 14581
14500: GO 14502
14502: DISABLE
14503: LD_INT 0
14505: PPUSH
14506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14507: LD_ADDR_VAR 0 2
14511: PUSH
14512: LD_INT 22
14514: PUSH
14515: LD_OWVAR 2
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 3
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PPUSH
14538: CALL_OW 69
14542: ST_TO_ADDR
// if not tmp then
14543: LD_VAR 0 2
14547: NOT
14548: IFFALSE 14552
// exit ;
14550: GO 14581
// for i in tmp do
14552: LD_ADDR_VAR 0 1
14556: PUSH
14557: LD_VAR 0 2
14561: PUSH
14562: FOR_IN
14563: IFFALSE 14579
// SetBLevel ( i , 10 ) ;
14565: LD_VAR 0 1
14569: PPUSH
14570: LD_INT 10
14572: PPUSH
14573: CALL_OW 241
14577: GO 14562
14579: POP
14580: POP
// end ;
14581: PPOPN 2
14583: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14584: LD_EXP 19
14588: PUSH
14589: LD_EXP 36
14593: AND
14594: IFFALSE 14705
14596: GO 14598
14598: DISABLE
14599: LD_INT 0
14601: PPUSH
14602: PPUSH
14603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14604: LD_ADDR_VAR 0 3
14608: PUSH
14609: LD_INT 22
14611: PUSH
14612: LD_OWVAR 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 25
14623: PUSH
14624: LD_INT 1
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PPUSH
14635: CALL_OW 69
14639: ST_TO_ADDR
// if not tmp then
14640: LD_VAR 0 3
14644: NOT
14645: IFFALSE 14649
// exit ;
14647: GO 14705
// un := tmp [ rand ( 1 , tmp ) ] ;
14649: LD_ADDR_VAR 0 2
14653: PUSH
14654: LD_VAR 0 3
14658: PUSH
14659: LD_INT 1
14661: PPUSH
14662: LD_VAR 0 3
14666: PPUSH
14667: CALL_OW 12
14671: ARRAY
14672: ST_TO_ADDR
// if Crawls ( un ) then
14673: LD_VAR 0 2
14677: PPUSH
14678: CALL_OW 318
14682: IFFALSE 14693
// ComWalk ( un ) ;
14684: LD_VAR 0 2
14688: PPUSH
14689: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14693: LD_VAR 0 2
14697: PPUSH
14698: LD_INT 5
14700: PPUSH
14701: CALL_OW 336
// end ;
14705: PPOPN 3
14707: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14708: LD_EXP 19
14712: PUSH
14713: LD_EXP 37
14717: AND
14718: PUSH
14719: LD_OWVAR 67
14723: PUSH
14724: LD_INT 4
14726: LESS
14727: AND
14728: IFFALSE 14747
14730: GO 14732
14732: DISABLE
// begin Difficulty := Difficulty + 1 ;
14733: LD_ADDR_OWVAR 67
14737: PUSH
14738: LD_OWVAR 67
14742: PUSH
14743: LD_INT 1
14745: PLUS
14746: ST_TO_ADDR
// end ;
14747: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14748: LD_EXP 19
14752: PUSH
14753: LD_EXP 38
14757: AND
14758: IFFALSE 14861
14760: GO 14762
14762: DISABLE
14763: LD_INT 0
14765: PPUSH
// begin for i := 1 to 5 do
14766: LD_ADDR_VAR 0 1
14770: PUSH
14771: DOUBLE
14772: LD_INT 1
14774: DEC
14775: ST_TO_ADDR
14776: LD_INT 5
14778: PUSH
14779: FOR_TO
14780: IFFALSE 14859
// begin uc_nation := nation_nature ;
14782: LD_ADDR_OWVAR 21
14786: PUSH
14787: LD_INT 0
14789: ST_TO_ADDR
// uc_side := 0 ;
14790: LD_ADDR_OWVAR 20
14794: PUSH
14795: LD_INT 0
14797: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14798: LD_ADDR_OWVAR 29
14802: PUSH
14803: LD_INT 12
14805: PUSH
14806: LD_INT 12
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: ST_TO_ADDR
// hc_agressivity := 20 ;
14813: LD_ADDR_OWVAR 35
14817: PUSH
14818: LD_INT 20
14820: ST_TO_ADDR
// hc_class := class_tiger ;
14821: LD_ADDR_OWVAR 28
14825: PUSH
14826: LD_INT 14
14828: ST_TO_ADDR
// hc_gallery :=  ;
14829: LD_ADDR_OWVAR 33
14833: PUSH
14834: LD_STRING 
14836: ST_TO_ADDR
// hc_name :=  ;
14837: LD_ADDR_OWVAR 26
14841: PUSH
14842: LD_STRING 
14844: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14845: CALL_OW 44
14849: PPUSH
14850: LD_INT 0
14852: PPUSH
14853: CALL_OW 51
// end ;
14857: GO 14779
14859: POP
14860: POP
// end ;
14861: PPOPN 1
14863: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14864: LD_EXP 19
14868: PUSH
14869: LD_EXP 39
14873: AND
14874: IFFALSE 14883
14876: GO 14878
14878: DISABLE
// StreamSibBomb ;
14879: CALL 14884 0 0
14883: END
// export function StreamSibBomb ; var i , x , y ; begin
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
// result := false ;
14890: LD_ADDR_VAR 0 1
14894: PUSH
14895: LD_INT 0
14897: ST_TO_ADDR
// for i := 1 to 16 do
14898: LD_ADDR_VAR 0 2
14902: PUSH
14903: DOUBLE
14904: LD_INT 1
14906: DEC
14907: ST_TO_ADDR
14908: LD_INT 16
14910: PUSH
14911: FOR_TO
14912: IFFALSE 15111
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14914: LD_ADDR_VAR 0 3
14918: PUSH
14919: LD_INT 10
14921: PUSH
14922: LD_INT 20
14924: PUSH
14925: LD_INT 30
14927: PUSH
14928: LD_INT 40
14930: PUSH
14931: LD_INT 50
14933: PUSH
14934: LD_INT 60
14936: PUSH
14937: LD_INT 70
14939: PUSH
14940: LD_INT 80
14942: PUSH
14943: LD_INT 90
14945: PUSH
14946: LD_INT 100
14948: PUSH
14949: LD_INT 110
14951: PUSH
14952: LD_INT 120
14954: PUSH
14955: LD_INT 130
14957: PUSH
14958: LD_INT 140
14960: PUSH
14961: LD_INT 150
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 15
14986: PPUSH
14987: CALL_OW 12
14991: ARRAY
14992: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14993: LD_ADDR_VAR 0 4
14997: PUSH
14998: LD_INT 10
15000: PUSH
15001: LD_INT 20
15003: PUSH
15004: LD_INT 30
15006: PUSH
15007: LD_INT 40
15009: PUSH
15010: LD_INT 50
15012: PUSH
15013: LD_INT 60
15015: PUSH
15016: LD_INT 70
15018: PUSH
15019: LD_INT 80
15021: PUSH
15022: LD_INT 90
15024: PUSH
15025: LD_INT 100
15027: PUSH
15028: LD_INT 110
15030: PUSH
15031: LD_INT 120
15033: PUSH
15034: LD_INT 130
15036: PUSH
15037: LD_INT 140
15039: PUSH
15040: LD_INT 150
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 1
15062: PPUSH
15063: LD_INT 15
15065: PPUSH
15066: CALL_OW 12
15070: ARRAY
15071: ST_TO_ADDR
// if ValidHex ( x , y ) then
15072: LD_VAR 0 3
15076: PPUSH
15077: LD_VAR 0 4
15081: PPUSH
15082: CALL_OW 488
15086: IFFALSE 15109
// begin result := [ x , y ] ;
15088: LD_ADDR_VAR 0 1
15092: PUSH
15093: LD_VAR 0 3
15097: PUSH
15098: LD_VAR 0 4
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: ST_TO_ADDR
// break ;
15107: GO 15111
// end ; end ;
15109: GO 14911
15111: POP
15112: POP
// if result then
15113: LD_VAR 0 1
15117: IFFALSE 15177
// begin ToLua ( playSibBomb() ) ;
15119: LD_STRING playSibBomb()
15121: PPUSH
15122: CALL_OW 559
// wait ( 0 0$14 ) ;
15126: LD_INT 490
15128: PPUSH
15129: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15133: LD_VAR 0 1
15137: PUSH
15138: LD_INT 1
15140: ARRAY
15141: PPUSH
15142: LD_VAR 0 1
15146: PUSH
15147: LD_INT 2
15149: ARRAY
15150: PPUSH
15151: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15155: LD_VAR 0 1
15159: PUSH
15160: LD_INT 1
15162: ARRAY
15163: PPUSH
15164: LD_VAR 0 1
15168: PUSH
15169: LD_INT 2
15171: ARRAY
15172: PPUSH
15173: CALL_OW 429
// end ; end ;
15177: LD_VAR 0 1
15181: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15182: LD_EXP 19
15186: PUSH
15187: LD_EXP 41
15191: AND
15192: IFFALSE 15204
15194: GO 15196
15196: DISABLE
// YouLost (  ) ;
15197: LD_STRING 
15199: PPUSH
15200: CALL_OW 104
15204: END
// every 0 0$1 trigger StreamModeActive and sFog do
15205: LD_EXP 19
15209: PUSH
15210: LD_EXP 40
15214: AND
15215: IFFALSE 15229
15217: GO 15219
15219: DISABLE
// FogOff ( your_side ) ;
15220: LD_OWVAR 2
15224: PPUSH
15225: CALL_OW 344
15229: END
// every 0 0$1 trigger StreamModeActive and sSun do
15230: LD_EXP 19
15234: PUSH
15235: LD_EXP 42
15239: AND
15240: IFFALSE 15268
15242: GO 15244
15244: DISABLE
// begin solar_recharge_percent := 0 ;
15245: LD_ADDR_OWVAR 79
15249: PUSH
15250: LD_INT 0
15252: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15253: LD_INT 10500
15255: PPUSH
15256: CALL_OW 67
// solar_recharge_percent := 100 ;
15260: LD_ADDR_OWVAR 79
15264: PUSH
15265: LD_INT 100
15267: ST_TO_ADDR
// end ;
15268: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15269: LD_EXP 19
15273: PUSH
15274: LD_EXP 43
15278: AND
15279: IFFALSE 15518
15281: GO 15283
15283: DISABLE
15284: LD_INT 0
15286: PPUSH
15287: PPUSH
15288: PPUSH
// begin tmp := [ ] ;
15289: LD_ADDR_VAR 0 3
15293: PUSH
15294: EMPTY
15295: ST_TO_ADDR
// for i := 1 to 6 do
15296: LD_ADDR_VAR 0 1
15300: PUSH
15301: DOUBLE
15302: LD_INT 1
15304: DEC
15305: ST_TO_ADDR
15306: LD_INT 6
15308: PUSH
15309: FOR_TO
15310: IFFALSE 15415
// begin uc_nation := nation_nature ;
15312: LD_ADDR_OWVAR 21
15316: PUSH
15317: LD_INT 0
15319: ST_TO_ADDR
// uc_side := 0 ;
15320: LD_ADDR_OWVAR 20
15324: PUSH
15325: LD_INT 0
15327: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15328: LD_ADDR_OWVAR 29
15332: PUSH
15333: LD_INT 12
15335: PUSH
15336: LD_INT 12
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: ST_TO_ADDR
// hc_agressivity := 20 ;
15343: LD_ADDR_OWVAR 35
15347: PUSH
15348: LD_INT 20
15350: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15351: LD_ADDR_OWVAR 28
15355: PUSH
15356: LD_INT 17
15358: ST_TO_ADDR
// hc_gallery :=  ;
15359: LD_ADDR_OWVAR 33
15363: PUSH
15364: LD_STRING 
15366: ST_TO_ADDR
// hc_name :=  ;
15367: LD_ADDR_OWVAR 26
15371: PUSH
15372: LD_STRING 
15374: ST_TO_ADDR
// un := CreateHuman ;
15375: LD_ADDR_VAR 0 2
15379: PUSH
15380: CALL_OW 44
15384: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15385: LD_VAR 0 2
15389: PPUSH
15390: LD_INT 1
15392: PPUSH
15393: CALL_OW 51
// tmp := tmp ^ un ;
15397: LD_ADDR_VAR 0 3
15401: PUSH
15402: LD_VAR 0 3
15406: PUSH
15407: LD_VAR 0 2
15411: ADD
15412: ST_TO_ADDR
// end ;
15413: GO 15309
15415: POP
15416: POP
// repeat wait ( 0 0$1 ) ;
15417: LD_INT 35
15419: PPUSH
15420: CALL_OW 67
// for un in tmp do
15424: LD_ADDR_VAR 0 2
15428: PUSH
15429: LD_VAR 0 3
15433: PUSH
15434: FOR_IN
15435: IFFALSE 15509
// begin if IsDead ( un ) then
15437: LD_VAR 0 2
15441: PPUSH
15442: CALL_OW 301
15446: IFFALSE 15466
// begin tmp := tmp diff un ;
15448: LD_ADDR_VAR 0 3
15452: PUSH
15453: LD_VAR 0 3
15457: PUSH
15458: LD_VAR 0 2
15462: DIFF
15463: ST_TO_ADDR
// continue ;
15464: GO 15434
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15466: LD_VAR 0 2
15470: PPUSH
15471: LD_INT 3
15473: PUSH
15474: LD_INT 22
15476: PUSH
15477: LD_INT 0
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PPUSH
15488: CALL_OW 69
15492: PPUSH
15493: LD_VAR 0 2
15497: PPUSH
15498: CALL_OW 74
15502: PPUSH
15503: CALL_OW 115
// end ;
15507: GO 15434
15509: POP
15510: POP
// until not tmp ;
15511: LD_VAR 0 3
15515: NOT
15516: IFFALSE 15417
// end ;
15518: PPOPN 3
15520: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15521: LD_EXP 19
15525: PUSH
15526: LD_EXP 44
15530: AND
15531: IFFALSE 15585
15533: GO 15535
15535: DISABLE
// begin ToLua ( displayTroll(); ) ;
15536: LD_STRING displayTroll();
15538: PPUSH
15539: CALL_OW 559
// wait ( 3 3$00 ) ;
15543: LD_INT 6300
15545: PPUSH
15546: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15550: LD_STRING hideTroll();
15552: PPUSH
15553: CALL_OW 559
// wait ( 1 1$00 ) ;
15557: LD_INT 2100
15559: PPUSH
15560: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15564: LD_STRING displayTroll();
15566: PPUSH
15567: CALL_OW 559
// wait ( 1 1$00 ) ;
15571: LD_INT 2100
15573: PPUSH
15574: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15578: LD_STRING hideTroll();
15580: PPUSH
15581: CALL_OW 559
// end ;
15585: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15586: LD_EXP 19
15590: PUSH
15591: LD_EXP 45
15595: AND
15596: IFFALSE 15659
15598: GO 15600
15600: DISABLE
15601: LD_INT 0
15603: PPUSH
// begin p := 0 ;
15604: LD_ADDR_VAR 0 1
15608: PUSH
15609: LD_INT 0
15611: ST_TO_ADDR
// repeat game_speed := 1 ;
15612: LD_ADDR_OWVAR 65
15616: PUSH
15617: LD_INT 1
15619: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15620: LD_INT 35
15622: PPUSH
15623: CALL_OW 67
// p := p + 1 ;
15627: LD_ADDR_VAR 0 1
15631: PUSH
15632: LD_VAR 0 1
15636: PUSH
15637: LD_INT 1
15639: PLUS
15640: ST_TO_ADDR
// until p >= 60 ;
15641: LD_VAR 0 1
15645: PUSH
15646: LD_INT 60
15648: GREATEREQUAL
15649: IFFALSE 15612
// game_speed := 4 ;
15651: LD_ADDR_OWVAR 65
15655: PUSH
15656: LD_INT 4
15658: ST_TO_ADDR
// end ;
15659: PPOPN 1
15661: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15662: LD_EXP 19
15666: PUSH
15667: LD_EXP 46
15671: AND
15672: IFFALSE 15818
15674: GO 15676
15676: DISABLE
15677: LD_INT 0
15679: PPUSH
15680: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15681: LD_ADDR_VAR 0 1
15685: PUSH
15686: LD_INT 22
15688: PUSH
15689: LD_OWVAR 2
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 2
15700: PUSH
15701: LD_INT 30
15703: PUSH
15704: LD_INT 0
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 30
15713: PUSH
15714: LD_INT 1
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 69
15734: ST_TO_ADDR
// if not depot then
15735: LD_VAR 0 1
15739: NOT
15740: IFFALSE 15744
// exit ;
15742: GO 15818
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15744: LD_ADDR_VAR 0 2
15748: PUSH
15749: LD_VAR 0 1
15753: PUSH
15754: LD_INT 1
15756: PPUSH
15757: LD_VAR 0 1
15761: PPUSH
15762: CALL_OW 12
15766: ARRAY
15767: PPUSH
15768: CALL_OW 274
15772: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15773: LD_VAR 0 2
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: LD_INT 0
15783: PPUSH
15784: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15788: LD_VAR 0 2
15792: PPUSH
15793: LD_INT 2
15795: PPUSH
15796: LD_INT 0
15798: PPUSH
15799: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15803: LD_VAR 0 2
15807: PPUSH
15808: LD_INT 3
15810: PPUSH
15811: LD_INT 0
15813: PPUSH
15814: CALL_OW 277
// end ;
15818: PPOPN 2
15820: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15821: LD_EXP 19
15825: PUSH
15826: LD_EXP 47
15830: AND
15831: IFFALSE 15928
15833: GO 15835
15835: DISABLE
15836: LD_INT 0
15838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15839: LD_ADDR_VAR 0 1
15843: PUSH
15844: LD_INT 22
15846: PUSH
15847: LD_OWVAR 2
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 3
15868: PUSH
15869: LD_INT 23
15871: PUSH
15872: LD_INT 0
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: LIST
15887: PPUSH
15888: CALL_OW 69
15892: ST_TO_ADDR
// if not tmp then
15893: LD_VAR 0 1
15897: NOT
15898: IFFALSE 15902
// exit ;
15900: GO 15928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15902: LD_VAR 0 1
15906: PUSH
15907: LD_INT 1
15909: PPUSH
15910: LD_VAR 0 1
15914: PPUSH
15915: CALL_OW 12
15919: ARRAY
15920: PPUSH
15921: LD_INT 200
15923: PPUSH
15924: CALL_OW 234
// end ;
15928: PPOPN 1
15930: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15931: LD_EXP 19
15935: PUSH
15936: LD_EXP 48
15940: AND
15941: IFFALSE 16020
15943: GO 15945
15945: DISABLE
15946: LD_INT 0
15948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15949: LD_ADDR_VAR 0 1
15953: PUSH
15954: LD_INT 22
15956: PUSH
15957: LD_OWVAR 2
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 21
15968: PUSH
15969: LD_INT 2
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 69
15984: ST_TO_ADDR
// if not tmp then
15985: LD_VAR 0 1
15989: NOT
15990: IFFALSE 15994
// exit ;
15992: GO 16020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15994: LD_VAR 0 1
15998: PUSH
15999: LD_INT 1
16001: PPUSH
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 12
16011: ARRAY
16012: PPUSH
16013: LD_INT 60
16015: PPUSH
16016: CALL_OW 234
// end ;
16020: PPOPN 1
16022: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16023: LD_EXP 19
16027: PUSH
16028: LD_EXP 49
16032: AND
16033: IFFALSE 16132
16035: GO 16037
16037: DISABLE
16038: LD_INT 0
16040: PPUSH
16041: PPUSH
// begin enable ;
16042: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16043: LD_ADDR_VAR 0 1
16047: PUSH
16048: LD_INT 22
16050: PUSH
16051: LD_OWVAR 2
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 61
16062: PUSH
16063: EMPTY
16064: LIST
16065: PUSH
16066: LD_INT 33
16068: PUSH
16069: LD_INT 2
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: PPUSH
16081: CALL_OW 69
16085: ST_TO_ADDR
// if not tmp then
16086: LD_VAR 0 1
16090: NOT
16091: IFFALSE 16095
// exit ;
16093: GO 16132
// for i in tmp do
16095: LD_ADDR_VAR 0 2
16099: PUSH
16100: LD_VAR 0 1
16104: PUSH
16105: FOR_IN
16106: IFFALSE 16130
// if IsControledBy ( i ) then
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL_OW 312
16117: IFFALSE 16128
// ComUnlink ( i ) ;
16119: LD_VAR 0 2
16123: PPUSH
16124: CALL_OW 136
16128: GO 16105
16130: POP
16131: POP
// end ;
16132: PPOPN 2
16134: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16135: LD_EXP 19
16139: PUSH
16140: LD_EXP 50
16144: AND
16145: IFFALSE 16285
16147: GO 16149
16149: DISABLE
16150: LD_INT 0
16152: PPUSH
16153: PPUSH
// begin ToLua ( displayPowell(); ) ;
16154: LD_STRING displayPowell();
16156: PPUSH
16157: CALL_OW 559
// uc_side := 0 ;
16161: LD_ADDR_OWVAR 20
16165: PUSH
16166: LD_INT 0
16168: ST_TO_ADDR
// uc_nation := 2 ;
16169: LD_ADDR_OWVAR 21
16173: PUSH
16174: LD_INT 2
16176: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16177: LD_ADDR_OWVAR 37
16181: PUSH
16182: LD_INT 14
16184: ST_TO_ADDR
// vc_engine := engine_siberite ;
16185: LD_ADDR_OWVAR 39
16189: PUSH
16190: LD_INT 3
16192: ST_TO_ADDR
// vc_control := control_apeman ;
16193: LD_ADDR_OWVAR 38
16197: PUSH
16198: LD_INT 5
16200: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16201: LD_ADDR_OWVAR 40
16205: PUSH
16206: LD_INT 29
16208: ST_TO_ADDR
// un := CreateVehicle ;
16209: LD_ADDR_VAR 0 2
16213: PUSH
16214: CALL_OW 45
16218: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16219: LD_VAR 0 2
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16231: LD_INT 35
16233: PPUSH
16234: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16238: LD_VAR 0 2
16242: PPUSH
16243: LD_INT 22
16245: PUSH
16246: LD_OWVAR 2
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PPUSH
16255: CALL_OW 69
16259: PPUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: CALL_OW 74
16269: PPUSH
16270: CALL_OW 115
// until IsDead ( un ) ;
16274: LD_VAR 0 2
16278: PPUSH
16279: CALL_OW 301
16283: IFFALSE 16231
// end ;
16285: PPOPN 2
16287: END
// every 0 0$1 trigger StreamModeActive and sStu do
16288: LD_EXP 19
16292: PUSH
16293: LD_EXP 58
16297: AND
16298: IFFALSE 16314
16300: GO 16302
16302: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16303: LD_STRING displayStucuk();
16305: PPUSH
16306: CALL_OW 559
// ResetFog ;
16310: CALL_OW 335
// end ;
16314: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16315: LD_EXP 19
16319: PUSH
16320: LD_EXP 51
16324: AND
16325: IFFALSE 16466
16327: GO 16329
16329: DISABLE
16330: LD_INT 0
16332: PPUSH
16333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16334: LD_ADDR_VAR 0 2
16338: PUSH
16339: LD_INT 22
16341: PUSH
16342: LD_OWVAR 2
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 21
16353: PUSH
16354: LD_INT 1
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PPUSH
16365: CALL_OW 69
16369: ST_TO_ADDR
// if not tmp then
16370: LD_VAR 0 2
16374: NOT
16375: IFFALSE 16379
// exit ;
16377: GO 16466
// un := tmp [ rand ( 1 , tmp ) ] ;
16379: LD_ADDR_VAR 0 1
16383: PUSH
16384: LD_VAR 0 2
16388: PUSH
16389: LD_INT 1
16391: PPUSH
16392: LD_VAR 0 2
16396: PPUSH
16397: CALL_OW 12
16401: ARRAY
16402: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16403: LD_VAR 0 1
16407: PPUSH
16408: LD_INT 0
16410: PPUSH
16411: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16415: LD_VAR 0 1
16419: PPUSH
16420: LD_OWVAR 3
16424: PUSH
16425: LD_VAR 0 1
16429: DIFF
16430: PPUSH
16431: LD_VAR 0 1
16435: PPUSH
16436: CALL_OW 74
16440: PPUSH
16441: CALL_OW 115
// wait ( 0 0$20 ) ;
16445: LD_INT 700
16447: PPUSH
16448: CALL_OW 67
// SetSide ( un , your_side ) ;
16452: LD_VAR 0 1
16456: PPUSH
16457: LD_OWVAR 2
16461: PPUSH
16462: CALL_OW 235
// end ;
16466: PPOPN 2
16468: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16469: LD_EXP 19
16473: PUSH
16474: LD_EXP 52
16478: AND
16479: IFFALSE 16585
16481: GO 16483
16483: DISABLE
16484: LD_INT 0
16486: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: LD_INT 22
16494: PUSH
16495: LD_OWVAR 2
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 2
16506: PUSH
16507: LD_INT 30
16509: PUSH
16510: LD_INT 0
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 30
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PPUSH
16536: CALL_OW 69
16540: ST_TO_ADDR
// if not depot then
16541: LD_VAR 0 1
16545: NOT
16546: IFFALSE 16550
// exit ;
16548: GO 16585
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16550: LD_VAR 0 1
16554: PUSH
16555: LD_INT 1
16557: ARRAY
16558: PPUSH
16559: CALL_OW 250
16563: PPUSH
16564: LD_VAR 0 1
16568: PUSH
16569: LD_INT 1
16571: ARRAY
16572: PPUSH
16573: CALL_OW 251
16577: PPUSH
16578: LD_INT 70
16580: PPUSH
16581: CALL_OW 495
// end ;
16585: PPOPN 1
16587: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16588: LD_EXP 19
16592: PUSH
16593: LD_EXP 53
16597: AND
16598: IFFALSE 16809
16600: GO 16602
16602: DISABLE
16603: LD_INT 0
16605: PPUSH
16606: PPUSH
16607: PPUSH
16608: PPUSH
16609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16610: LD_ADDR_VAR 0 5
16614: PUSH
16615: LD_INT 22
16617: PUSH
16618: LD_OWVAR 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 21
16629: PUSH
16630: LD_INT 1
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PPUSH
16641: CALL_OW 69
16645: ST_TO_ADDR
// if not tmp then
16646: LD_VAR 0 5
16650: NOT
16651: IFFALSE 16655
// exit ;
16653: GO 16809
// for i in tmp do
16655: LD_ADDR_VAR 0 1
16659: PUSH
16660: LD_VAR 0 5
16664: PUSH
16665: FOR_IN
16666: IFFALSE 16807
// begin d := rand ( 0 , 5 ) ;
16668: LD_ADDR_VAR 0 4
16672: PUSH
16673: LD_INT 0
16675: PPUSH
16676: LD_INT 5
16678: PPUSH
16679: CALL_OW 12
16683: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16684: LD_ADDR_VAR 0 2
16688: PUSH
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 250
16698: PPUSH
16699: LD_VAR 0 4
16703: PPUSH
16704: LD_INT 3
16706: PPUSH
16707: LD_INT 12
16709: PPUSH
16710: CALL_OW 12
16714: PPUSH
16715: CALL_OW 272
16719: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16720: LD_ADDR_VAR 0 3
16724: PUSH
16725: LD_VAR 0 1
16729: PPUSH
16730: CALL_OW 251
16734: PPUSH
16735: LD_VAR 0 4
16739: PPUSH
16740: LD_INT 3
16742: PPUSH
16743: LD_INT 12
16745: PPUSH
16746: CALL_OW 12
16750: PPUSH
16751: CALL_OW 273
16755: ST_TO_ADDR
// if ValidHex ( x , y ) then
16756: LD_VAR 0 2
16760: PPUSH
16761: LD_VAR 0 3
16765: PPUSH
16766: CALL_OW 488
16770: IFFALSE 16805
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16772: LD_VAR 0 1
16776: PPUSH
16777: LD_VAR 0 2
16781: PPUSH
16782: LD_VAR 0 3
16786: PPUSH
16787: LD_INT 3
16789: PPUSH
16790: LD_INT 6
16792: PPUSH
16793: CALL_OW 12
16797: PPUSH
16798: LD_INT 1
16800: PPUSH
16801: CALL_OW 483
// end ;
16805: GO 16665
16807: POP
16808: POP
// end ;
16809: PPOPN 5
16811: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16812: LD_EXP 19
16816: PUSH
16817: LD_EXP 54
16821: AND
16822: IFFALSE 16916
16824: GO 16826
16826: DISABLE
16827: LD_INT 0
16829: PPUSH
16830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16831: LD_ADDR_VAR 0 2
16835: PUSH
16836: LD_INT 22
16838: PUSH
16839: LD_OWVAR 2
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 32
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 21
16860: PUSH
16861: LD_INT 2
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: LIST
16872: PPUSH
16873: CALL_OW 69
16877: ST_TO_ADDR
// if not tmp then
16878: LD_VAR 0 2
16882: NOT
16883: IFFALSE 16887
// exit ;
16885: GO 16916
// for i in tmp do
16887: LD_ADDR_VAR 0 1
16891: PUSH
16892: LD_VAR 0 2
16896: PUSH
16897: FOR_IN
16898: IFFALSE 16914
// SetFuel ( i , 0 ) ;
16900: LD_VAR 0 1
16904: PPUSH
16905: LD_INT 0
16907: PPUSH
16908: CALL_OW 240
16912: GO 16897
16914: POP
16915: POP
// end ;
16916: PPOPN 2
16918: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16919: LD_EXP 19
16923: PUSH
16924: LD_EXP 55
16928: AND
16929: IFFALSE 16995
16931: GO 16933
16933: DISABLE
16934: LD_INT 0
16936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16937: LD_ADDR_VAR 0 1
16941: PUSH
16942: LD_INT 22
16944: PUSH
16945: LD_OWVAR 2
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 30
16956: PUSH
16957: LD_INT 29
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PPUSH
16968: CALL_OW 69
16972: ST_TO_ADDR
// if not tmp then
16973: LD_VAR 0 1
16977: NOT
16978: IFFALSE 16982
// exit ;
16980: GO 16995
// DestroyUnit ( tmp [ 1 ] ) ;
16982: LD_VAR 0 1
16986: PUSH
16987: LD_INT 1
16989: ARRAY
16990: PPUSH
16991: CALL_OW 65
// end ;
16995: PPOPN 1
16997: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16998: LD_EXP 19
17002: PUSH
17003: LD_EXP 57
17007: AND
17008: IFFALSE 17137
17010: GO 17012
17012: DISABLE
17013: LD_INT 0
17015: PPUSH
// begin uc_side := 0 ;
17016: LD_ADDR_OWVAR 20
17020: PUSH
17021: LD_INT 0
17023: ST_TO_ADDR
// uc_nation := nation_arabian ;
17024: LD_ADDR_OWVAR 21
17028: PUSH
17029: LD_INT 2
17031: ST_TO_ADDR
// hc_gallery :=  ;
17032: LD_ADDR_OWVAR 33
17036: PUSH
17037: LD_STRING 
17039: ST_TO_ADDR
// hc_name :=  ;
17040: LD_ADDR_OWVAR 26
17044: PUSH
17045: LD_STRING 
17047: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17048: LD_INT 1
17050: PPUSH
17051: LD_INT 11
17053: PPUSH
17054: LD_INT 10
17056: PPUSH
17057: CALL_OW 380
// un := CreateHuman ;
17061: LD_ADDR_VAR 0 1
17065: PUSH
17066: CALL_OW 44
17070: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17071: LD_VAR 0 1
17075: PPUSH
17076: LD_INT 1
17078: PPUSH
17079: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17083: LD_INT 35
17085: PPUSH
17086: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17090: LD_VAR 0 1
17094: PPUSH
17095: LD_INT 22
17097: PUSH
17098: LD_OWVAR 2
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PPUSH
17107: CALL_OW 69
17111: PPUSH
17112: LD_VAR 0 1
17116: PPUSH
17117: CALL_OW 74
17121: PPUSH
17122: CALL_OW 115
// until IsDead ( un ) ;
17126: LD_VAR 0 1
17130: PPUSH
17131: CALL_OW 301
17135: IFFALSE 17083
// end ;
17137: PPOPN 1
17139: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17140: LD_EXP 19
17144: PUSH
17145: LD_EXP 59
17149: AND
17150: IFFALSE 17162
17152: GO 17154
17154: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17155: LD_STRING earthquake(getX(game), 0, 32)
17157: PPUSH
17158: CALL_OW 559
17162: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17163: LD_EXP 19
17167: PUSH
17168: LD_EXP 60
17172: AND
17173: IFFALSE 17264
17175: GO 17177
17177: DISABLE
17178: LD_INT 0
17180: PPUSH
// begin enable ;
17181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17182: LD_ADDR_VAR 0 1
17186: PUSH
17187: LD_INT 22
17189: PUSH
17190: LD_OWVAR 2
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 21
17201: PUSH
17202: LD_INT 2
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 33
17211: PUSH
17212: LD_INT 3
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: PPUSH
17224: CALL_OW 69
17228: ST_TO_ADDR
// if not tmp then
17229: LD_VAR 0 1
17233: NOT
17234: IFFALSE 17238
// exit ;
17236: GO 17264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17238: LD_VAR 0 1
17242: PUSH
17243: LD_INT 1
17245: PPUSH
17246: LD_VAR 0 1
17250: PPUSH
17251: CALL_OW 12
17255: ARRAY
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: CALL_OW 234
// end ;
17264: PPOPN 1
17266: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17267: LD_EXP 19
17271: PUSH
17272: LD_EXP 61
17276: AND
17277: IFFALSE 17418
17279: GO 17281
17281: DISABLE
17282: LD_INT 0
17284: PPUSH
17285: PPUSH
17286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17287: LD_ADDR_VAR 0 3
17291: PUSH
17292: LD_INT 22
17294: PUSH
17295: LD_OWVAR 2
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 25
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PPUSH
17318: CALL_OW 69
17322: ST_TO_ADDR
// if not tmp then
17323: LD_VAR 0 3
17327: NOT
17328: IFFALSE 17332
// exit ;
17330: GO 17418
// un := tmp [ rand ( 1 , tmp ) ] ;
17332: LD_ADDR_VAR 0 2
17336: PUSH
17337: LD_VAR 0 3
17341: PUSH
17342: LD_INT 1
17344: PPUSH
17345: LD_VAR 0 3
17349: PPUSH
17350: CALL_OW 12
17354: ARRAY
17355: ST_TO_ADDR
// if Crawls ( un ) then
17356: LD_VAR 0 2
17360: PPUSH
17361: CALL_OW 318
17365: IFFALSE 17376
// ComWalk ( un ) ;
17367: LD_VAR 0 2
17371: PPUSH
17372: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17376: LD_VAR 0 2
17380: PPUSH
17381: LD_INT 9
17383: PPUSH
17384: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17388: LD_INT 28
17390: PPUSH
17391: LD_OWVAR 2
17395: PPUSH
17396: LD_INT 2
17398: PPUSH
17399: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17403: LD_INT 29
17405: PPUSH
17406: LD_OWVAR 2
17410: PPUSH
17411: LD_INT 2
17413: PPUSH
17414: CALL_OW 322
// end ;
17418: PPOPN 3
17420: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17421: LD_EXP 19
17425: PUSH
17426: LD_EXP 62
17430: AND
17431: IFFALSE 17542
17433: GO 17435
17435: DISABLE
17436: LD_INT 0
17438: PPUSH
17439: PPUSH
17440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17441: LD_ADDR_VAR 0 3
17445: PUSH
17446: LD_INT 22
17448: PUSH
17449: LD_OWVAR 2
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 25
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PPUSH
17472: CALL_OW 69
17476: ST_TO_ADDR
// if not tmp then
17477: LD_VAR 0 3
17481: NOT
17482: IFFALSE 17486
// exit ;
17484: GO 17542
// un := tmp [ rand ( 1 , tmp ) ] ;
17486: LD_ADDR_VAR 0 2
17490: PUSH
17491: LD_VAR 0 3
17495: PUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_VAR 0 3
17503: PPUSH
17504: CALL_OW 12
17508: ARRAY
17509: ST_TO_ADDR
// if Crawls ( un ) then
17510: LD_VAR 0 2
17514: PPUSH
17515: CALL_OW 318
17519: IFFALSE 17530
// ComWalk ( un ) ;
17521: LD_VAR 0 2
17525: PPUSH
17526: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17530: LD_VAR 0 2
17534: PPUSH
17535: LD_INT 8
17537: PPUSH
17538: CALL_OW 336
// end ;
17542: PPOPN 3
17544: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17545: LD_EXP 19
17549: PUSH
17550: LD_EXP 63
17554: AND
17555: IFFALSE 17699
17557: GO 17559
17559: DISABLE
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17564: LD_ADDR_VAR 0 2
17568: PUSH
17569: LD_INT 22
17571: PUSH
17572: LD_OWVAR 2
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 21
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: LD_INT 34
17596: PUSH
17597: LD_INT 12
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 34
17606: PUSH
17607: LD_INT 51
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 34
17616: PUSH
17617: LD_INT 32
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: PPUSH
17635: CALL_OW 69
17639: ST_TO_ADDR
// if not tmp then
17640: LD_VAR 0 2
17644: NOT
17645: IFFALSE 17649
// exit ;
17647: GO 17699
// for i in tmp do
17649: LD_ADDR_VAR 0 1
17653: PUSH
17654: LD_VAR 0 2
17658: PUSH
17659: FOR_IN
17660: IFFALSE 17697
// if GetCargo ( i , mat_artifact ) = 0 then
17662: LD_VAR 0 1
17666: PPUSH
17667: LD_INT 4
17669: PPUSH
17670: CALL_OW 289
17674: PUSH
17675: LD_INT 0
17677: EQUAL
17678: IFFALSE 17695
// SetCargo ( i , mat_siberit , 100 ) ;
17680: LD_VAR 0 1
17684: PPUSH
17685: LD_INT 3
17687: PPUSH
17688: LD_INT 100
17690: PPUSH
17691: CALL_OW 290
17695: GO 17659
17697: POP
17698: POP
// end ;
17699: PPOPN 2
17701: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17702: LD_EXP 19
17706: PUSH
17707: LD_EXP 64
17711: AND
17712: IFFALSE 17895
17714: GO 17716
17716: DISABLE
17717: LD_INT 0
17719: PPUSH
17720: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17721: LD_ADDR_VAR 0 2
17725: PUSH
17726: LD_INT 22
17728: PUSH
17729: LD_OWVAR 2
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PPUSH
17738: CALL_OW 69
17742: ST_TO_ADDR
// if not tmp then
17743: LD_VAR 0 2
17747: NOT
17748: IFFALSE 17752
// exit ;
17750: GO 17895
// for i := 1 to 2 do
17752: LD_ADDR_VAR 0 1
17756: PUSH
17757: DOUBLE
17758: LD_INT 1
17760: DEC
17761: ST_TO_ADDR
17762: LD_INT 2
17764: PUSH
17765: FOR_TO
17766: IFFALSE 17893
// begin uc_side := your_side ;
17768: LD_ADDR_OWVAR 20
17772: PUSH
17773: LD_OWVAR 2
17777: ST_TO_ADDR
// uc_nation := nation_american ;
17778: LD_ADDR_OWVAR 21
17782: PUSH
17783: LD_INT 1
17785: ST_TO_ADDR
// vc_chassis := us_morphling ;
17786: LD_ADDR_OWVAR 37
17790: PUSH
17791: LD_INT 5
17793: ST_TO_ADDR
// vc_engine := engine_siberite ;
17794: LD_ADDR_OWVAR 39
17798: PUSH
17799: LD_INT 3
17801: ST_TO_ADDR
// vc_control := control_computer ;
17802: LD_ADDR_OWVAR 38
17806: PUSH
17807: LD_INT 3
17809: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17810: LD_ADDR_OWVAR 40
17814: PUSH
17815: LD_INT 10
17817: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17818: LD_VAR 0 2
17822: PUSH
17823: LD_INT 1
17825: ARRAY
17826: PPUSH
17827: CALL_OW 310
17831: NOT
17832: IFFALSE 17879
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17834: CALL_OW 45
17838: PPUSH
17839: LD_VAR 0 2
17843: PUSH
17844: LD_INT 1
17846: ARRAY
17847: PPUSH
17848: CALL_OW 250
17852: PPUSH
17853: LD_VAR 0 2
17857: PUSH
17858: LD_INT 1
17860: ARRAY
17861: PPUSH
17862: CALL_OW 251
17866: PPUSH
17867: LD_INT 12
17869: PPUSH
17870: LD_INT 1
17872: PPUSH
17873: CALL_OW 50
17877: GO 17891
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17879: CALL_OW 45
17883: PPUSH
17884: LD_INT 1
17886: PPUSH
17887: CALL_OW 51
// end ;
17891: GO 17765
17893: POP
17894: POP
// end ;
17895: PPOPN 2
17897: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17898: LD_EXP 19
17902: PUSH
17903: LD_EXP 65
17907: AND
17908: IFFALSE 18130
17910: GO 17912
17912: DISABLE
17913: LD_INT 0
17915: PPUSH
17916: PPUSH
17917: PPUSH
17918: PPUSH
17919: PPUSH
17920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17921: LD_ADDR_VAR 0 6
17925: PUSH
17926: LD_INT 22
17928: PUSH
17929: LD_OWVAR 2
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 21
17940: PUSH
17941: LD_INT 1
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 3
17950: PUSH
17951: LD_INT 23
17953: PUSH
17954: LD_INT 0
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: LIST
17969: PPUSH
17970: CALL_OW 69
17974: ST_TO_ADDR
// if not tmp then
17975: LD_VAR 0 6
17979: NOT
17980: IFFALSE 17984
// exit ;
17982: GO 18130
// s1 := rand ( 1 , 4 ) ;
17984: LD_ADDR_VAR 0 2
17988: PUSH
17989: LD_INT 1
17991: PPUSH
17992: LD_INT 4
17994: PPUSH
17995: CALL_OW 12
17999: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18000: LD_ADDR_VAR 0 4
18004: PUSH
18005: LD_VAR 0 6
18009: PUSH
18010: LD_INT 1
18012: ARRAY
18013: PPUSH
18014: LD_VAR 0 2
18018: PPUSH
18019: CALL_OW 259
18023: ST_TO_ADDR
// if s1 = 1 then
18024: LD_VAR 0 2
18028: PUSH
18029: LD_INT 1
18031: EQUAL
18032: IFFALSE 18052
// s2 := rand ( 2 , 4 ) else
18034: LD_ADDR_VAR 0 3
18038: PUSH
18039: LD_INT 2
18041: PPUSH
18042: LD_INT 4
18044: PPUSH
18045: CALL_OW 12
18049: ST_TO_ADDR
18050: GO 18060
// s2 := 1 ;
18052: LD_ADDR_VAR 0 3
18056: PUSH
18057: LD_INT 1
18059: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18060: LD_ADDR_VAR 0 5
18064: PUSH
18065: LD_VAR 0 6
18069: PUSH
18070: LD_INT 1
18072: ARRAY
18073: PPUSH
18074: LD_VAR 0 3
18078: PPUSH
18079: CALL_OW 259
18083: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18084: LD_VAR 0 6
18088: PUSH
18089: LD_INT 1
18091: ARRAY
18092: PPUSH
18093: LD_VAR 0 2
18097: PPUSH
18098: LD_VAR 0 5
18102: PPUSH
18103: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18107: LD_VAR 0 6
18111: PUSH
18112: LD_INT 1
18114: ARRAY
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: LD_VAR 0 4
18125: PPUSH
18126: CALL_OW 237
// end ;
18130: PPOPN 6
18132: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18133: LD_EXP 19
18137: PUSH
18138: LD_EXP 66
18142: AND
18143: IFFALSE 18222
18145: GO 18147
18147: DISABLE
18148: LD_INT 0
18150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18151: LD_ADDR_VAR 0 1
18155: PUSH
18156: LD_INT 22
18158: PUSH
18159: LD_OWVAR 2
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 30
18170: PUSH
18171: LD_INT 3
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PPUSH
18182: CALL_OW 69
18186: ST_TO_ADDR
// if not tmp then
18187: LD_VAR 0 1
18191: NOT
18192: IFFALSE 18196
// exit ;
18194: GO 18222
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18196: LD_VAR 0 1
18200: PUSH
18201: LD_INT 1
18203: PPUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 12
18213: ARRAY
18214: PPUSH
18215: LD_INT 1
18217: PPUSH
18218: CALL_OW 234
// end ;
18222: PPOPN 1
18224: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18225: LD_EXP 19
18229: PUSH
18230: LD_EXP 67
18234: AND
18235: IFFALSE 18347
18237: GO 18239
18239: DISABLE
18240: LD_INT 0
18242: PPUSH
18243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18244: LD_ADDR_VAR 0 2
18248: PUSH
18249: LD_INT 22
18251: PUSH
18252: LD_OWVAR 2
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: LD_INT 30
18266: PUSH
18267: LD_INT 27
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 30
18276: PUSH
18277: LD_INT 26
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 30
18286: PUSH
18287: LD_INT 28
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PPUSH
18304: CALL_OW 69
18308: ST_TO_ADDR
// if not tmp then
18309: LD_VAR 0 2
18313: NOT
18314: IFFALSE 18318
// exit ;
18316: GO 18347
// for i in tmp do
18318: LD_ADDR_VAR 0 1
18322: PUSH
18323: LD_VAR 0 2
18327: PUSH
18328: FOR_IN
18329: IFFALSE 18345
// SetLives ( i , 1 ) ;
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_INT 1
18338: PPUSH
18339: CALL_OW 234
18343: GO 18328
18345: POP
18346: POP
// end ;
18347: PPOPN 2
18349: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18350: LD_EXP 19
18354: PUSH
18355: LD_EXP 68
18359: AND
18360: IFFALSE 18647
18362: GO 18364
18364: DISABLE
18365: LD_INT 0
18367: PPUSH
18368: PPUSH
18369: PPUSH
// begin i := rand ( 1 , 7 ) ;
18370: LD_ADDR_VAR 0 1
18374: PUSH
18375: LD_INT 1
18377: PPUSH
18378: LD_INT 7
18380: PPUSH
18381: CALL_OW 12
18385: ST_TO_ADDR
// case i of 1 :
18386: LD_VAR 0 1
18390: PUSH
18391: LD_INT 1
18393: DOUBLE
18394: EQUAL
18395: IFTRUE 18399
18397: GO 18409
18399: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18400: LD_STRING earthquake(getX(game), 0, 32)
18402: PPUSH
18403: CALL_OW 559
18407: GO 18647
18409: LD_INT 2
18411: DOUBLE
18412: EQUAL
18413: IFTRUE 18417
18415: GO 18431
18417: POP
// begin ToLua ( displayStucuk(); ) ;
18418: LD_STRING displayStucuk();
18420: PPUSH
18421: CALL_OW 559
// ResetFog ;
18425: CALL_OW 335
// end ; 3 :
18429: GO 18647
18431: LD_INT 3
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 18543
18439: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18440: LD_ADDR_VAR 0 2
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_OWVAR 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 25
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PPUSH
18471: CALL_OW 69
18475: ST_TO_ADDR
// if not tmp then
18476: LD_VAR 0 2
18480: NOT
18481: IFFALSE 18485
// exit ;
18483: GO 18647
// un := tmp [ rand ( 1 , tmp ) ] ;
18485: LD_ADDR_VAR 0 3
18489: PUSH
18490: LD_VAR 0 2
18494: PUSH
18495: LD_INT 1
18497: PPUSH
18498: LD_VAR 0 2
18502: PPUSH
18503: CALL_OW 12
18507: ARRAY
18508: ST_TO_ADDR
// if Crawls ( un ) then
18509: LD_VAR 0 3
18513: PPUSH
18514: CALL_OW 318
18518: IFFALSE 18529
// ComWalk ( un ) ;
18520: LD_VAR 0 3
18524: PPUSH
18525: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18529: LD_VAR 0 3
18533: PPUSH
18534: LD_INT 8
18536: PPUSH
18537: CALL_OW 336
// end ; 4 :
18541: GO 18647
18543: LD_INT 4
18545: DOUBLE
18546: EQUAL
18547: IFTRUE 18551
18549: GO 18625
18551: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18552: LD_ADDR_VAR 0 2
18556: PUSH
18557: LD_INT 22
18559: PUSH
18560: LD_OWVAR 2
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 30
18571: PUSH
18572: LD_INT 29
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PPUSH
18583: CALL_OW 69
18587: ST_TO_ADDR
// if not tmp then
18588: LD_VAR 0 2
18592: NOT
18593: IFFALSE 18597
// exit ;
18595: GO 18647
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18597: LD_VAR 0 2
18601: PUSH
18602: LD_INT 1
18604: ARRAY
18605: PPUSH
18606: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18610: LD_VAR 0 2
18614: PUSH
18615: LD_INT 1
18617: ARRAY
18618: PPUSH
18619: CALL_OW 65
// end ; 5 .. 7 :
18623: GO 18647
18625: LD_INT 5
18627: DOUBLE
18628: GREATEREQUAL
18629: IFFALSE 18637
18631: LD_INT 7
18633: DOUBLE
18634: LESSEQUAL
18635: IFTRUE 18639
18637: GO 18646
18639: POP
// StreamSibBomb ; end ;
18640: CALL 14884 0 0
18644: GO 18647
18646: POP
// end ;
18647: PPOPN 3
18649: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18650: LD_EXP 19
18654: PUSH
18655: LD_EXP 69
18659: AND
18660: IFFALSE 18816
18662: GO 18664
18664: DISABLE
18665: LD_INT 0
18667: PPUSH
18668: PPUSH
18669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: LD_INT 81
18677: PUSH
18678: LD_OWVAR 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 2
18689: PUSH
18690: LD_INT 21
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 21
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PPUSH
18719: CALL_OW 69
18723: ST_TO_ADDR
// if not tmp then
18724: LD_VAR 0 2
18728: NOT
18729: IFFALSE 18733
// exit ;
18731: GO 18816
// p := 0 ;
18733: LD_ADDR_VAR 0 3
18737: PUSH
18738: LD_INT 0
18740: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18741: LD_INT 35
18743: PPUSH
18744: CALL_OW 67
// p := p + 1 ;
18748: LD_ADDR_VAR 0 3
18752: PUSH
18753: LD_VAR 0 3
18757: PUSH
18758: LD_INT 1
18760: PLUS
18761: ST_TO_ADDR
// for i in tmp do
18762: LD_ADDR_VAR 0 1
18766: PUSH
18767: LD_VAR 0 2
18771: PUSH
18772: FOR_IN
18773: IFFALSE 18804
// if GetLives ( i ) < 1000 then
18775: LD_VAR 0 1
18779: PPUSH
18780: CALL_OW 256
18784: PUSH
18785: LD_INT 1000
18787: LESS
18788: IFFALSE 18802
// SetLives ( i , 1000 ) ;
18790: LD_VAR 0 1
18794: PPUSH
18795: LD_INT 1000
18797: PPUSH
18798: CALL_OW 234
18802: GO 18772
18804: POP
18805: POP
// until p > 20 ;
18806: LD_VAR 0 3
18810: PUSH
18811: LD_INT 20
18813: GREATER
18814: IFFALSE 18741
// end ;
18816: PPOPN 3
18818: END
// every 0 0$1 trigger StreamModeActive and sTime do
18819: LD_EXP 19
18823: PUSH
18824: LD_EXP 70
18828: AND
18829: IFFALSE 18864
18831: GO 18833
18833: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18834: LD_INT 28
18836: PPUSH
18837: LD_OWVAR 2
18841: PPUSH
18842: LD_INT 2
18844: PPUSH
18845: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18849: LD_INT 30
18851: PPUSH
18852: LD_OWVAR 2
18856: PPUSH
18857: LD_INT 2
18859: PPUSH
18860: CALL_OW 322
// end ;
18864: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18865: LD_EXP 19
18869: PUSH
18870: LD_EXP 71
18874: AND
18875: IFFALSE 18996
18877: GO 18879
18879: DISABLE
18880: LD_INT 0
18882: PPUSH
18883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18884: LD_ADDR_VAR 0 2
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: LD_OWVAR 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 21
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 3
18913: PUSH
18914: LD_INT 23
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 69
18937: ST_TO_ADDR
// if not tmp then
18938: LD_VAR 0 2
18942: NOT
18943: IFFALSE 18947
// exit ;
18945: GO 18996
// for i in tmp do
18947: LD_ADDR_VAR 0 1
18951: PUSH
18952: LD_VAR 0 2
18956: PUSH
18957: FOR_IN
18958: IFFALSE 18994
// begin if Crawls ( i ) then
18960: LD_VAR 0 1
18964: PPUSH
18965: CALL_OW 318
18969: IFFALSE 18980
// ComWalk ( i ) ;
18971: LD_VAR 0 1
18975: PPUSH
18976: CALL_OW 138
// SetClass ( i , 2 ) ;
18980: LD_VAR 0 1
18984: PPUSH
18985: LD_INT 2
18987: PPUSH
18988: CALL_OW 336
// end ;
18992: GO 18957
18994: POP
18995: POP
// end ;
18996: PPOPN 2
18998: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18999: LD_EXP 19
19003: PUSH
19004: LD_EXP 72
19008: AND
19009: IFFALSE 19297
19011: GO 19013
19013: DISABLE
19014: LD_INT 0
19016: PPUSH
19017: PPUSH
19018: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19019: LD_OWVAR 2
19023: PPUSH
19024: LD_INT 9
19026: PPUSH
19027: LD_INT 1
19029: PPUSH
19030: LD_INT 1
19032: PPUSH
19033: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19037: LD_INT 9
19039: PPUSH
19040: LD_OWVAR 2
19044: PPUSH
19045: CALL_OW 343
// uc_side := 9 ;
19049: LD_ADDR_OWVAR 20
19053: PUSH
19054: LD_INT 9
19056: ST_TO_ADDR
// uc_nation := 2 ;
19057: LD_ADDR_OWVAR 21
19061: PUSH
19062: LD_INT 2
19064: ST_TO_ADDR
// hc_name := Dark Warrior ;
19065: LD_ADDR_OWVAR 26
19069: PUSH
19070: LD_STRING Dark Warrior
19072: ST_TO_ADDR
// hc_gallery :=  ;
19073: LD_ADDR_OWVAR 33
19077: PUSH
19078: LD_STRING 
19080: ST_TO_ADDR
// hc_noskilllimit := true ;
19081: LD_ADDR_OWVAR 76
19085: PUSH
19086: LD_INT 1
19088: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19089: LD_ADDR_OWVAR 31
19093: PUSH
19094: LD_INT 30
19096: PUSH
19097: LD_INT 30
19099: PUSH
19100: LD_INT 30
19102: PUSH
19103: LD_INT 30
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: ST_TO_ADDR
// un := CreateHuman ;
19112: LD_ADDR_VAR 0 3
19116: PUSH
19117: CALL_OW 44
19121: ST_TO_ADDR
// hc_noskilllimit := false ;
19122: LD_ADDR_OWVAR 76
19126: PUSH
19127: LD_INT 0
19129: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19130: LD_VAR 0 3
19134: PPUSH
19135: LD_INT 1
19137: PPUSH
19138: CALL_OW 51
// ToLua ( playRanger() ) ;
19142: LD_STRING playRanger()
19144: PPUSH
19145: CALL_OW 559
// p := 0 ;
19149: LD_ADDR_VAR 0 2
19153: PUSH
19154: LD_INT 0
19156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19157: LD_INT 35
19159: PPUSH
19160: CALL_OW 67
// p := p + 1 ;
19164: LD_ADDR_VAR 0 2
19168: PUSH
19169: LD_VAR 0 2
19173: PUSH
19174: LD_INT 1
19176: PLUS
19177: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19178: LD_VAR 0 3
19182: PPUSH
19183: CALL_OW 256
19187: PUSH
19188: LD_INT 1000
19190: LESS
19191: IFFALSE 19205
// SetLives ( un , 1000 ) ;
19193: LD_VAR 0 3
19197: PPUSH
19198: LD_INT 1000
19200: PPUSH
19201: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19205: LD_VAR 0 3
19209: PPUSH
19210: LD_INT 81
19212: PUSH
19213: LD_OWVAR 2
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 91
19224: PUSH
19225: LD_VAR 0 3
19229: PUSH
19230: LD_INT 30
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PPUSH
19242: CALL_OW 69
19246: PPUSH
19247: LD_VAR 0 3
19251: PPUSH
19252: CALL_OW 74
19256: PPUSH
19257: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19261: LD_VAR 0 2
19265: PUSH
19266: LD_INT 80
19268: GREATER
19269: PUSH
19270: LD_VAR 0 3
19274: PPUSH
19275: CALL_OW 301
19279: OR
19280: IFFALSE 19157
// if un then
19282: LD_VAR 0 3
19286: IFFALSE 19297
// RemoveUnit ( un ) ;
19288: LD_VAR 0 3
19292: PPUSH
19293: CALL_OW 64
// end ;
19297: PPOPN 3
19299: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19300: LD_EXP 73
19304: IFFALSE 19420
19306: GO 19308
19308: DISABLE
19309: LD_INT 0
19311: PPUSH
19312: PPUSH
19313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19314: LD_ADDR_VAR 0 2
19318: PUSH
19319: LD_INT 81
19321: PUSH
19322: LD_OWVAR 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 21
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 69
19349: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19350: LD_STRING playComputer()
19352: PPUSH
19353: CALL_OW 559
// if not tmp then
19357: LD_VAR 0 2
19361: NOT
19362: IFFALSE 19366
// exit ;
19364: GO 19420
// for i in tmp do
19366: LD_ADDR_VAR 0 1
19370: PUSH
19371: LD_VAR 0 2
19375: PUSH
19376: FOR_IN
19377: IFFALSE 19418
// for j := 1 to 4 do
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: DOUBLE
19385: LD_INT 1
19387: DEC
19388: ST_TO_ADDR
19389: LD_INT 4
19391: PUSH
19392: FOR_TO
19393: IFFALSE 19414
// SetSkill ( i , j , 10 ) ;
19395: LD_VAR 0 1
19399: PPUSH
19400: LD_VAR 0 3
19404: PPUSH
19405: LD_INT 10
19407: PPUSH
19408: CALL_OW 237
19412: GO 19392
19414: POP
19415: POP
19416: GO 19376
19418: POP
19419: POP
// end ;
19420: PPOPN 3
19422: END
// every 0 0$1 trigger s30 do var i , tmp ;
19423: LD_EXP 74
19427: IFFALSE 19496
19429: GO 19431
19431: DISABLE
19432: LD_INT 0
19434: PPUSH
19435: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19436: LD_ADDR_VAR 0 2
19440: PUSH
19441: LD_INT 22
19443: PUSH
19444: LD_OWVAR 2
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PPUSH
19453: CALL_OW 69
19457: ST_TO_ADDR
// if not tmp then
19458: LD_VAR 0 2
19462: NOT
19463: IFFALSE 19467
// exit ;
19465: GO 19496
// for i in tmp do
19467: LD_ADDR_VAR 0 1
19471: PUSH
19472: LD_VAR 0 2
19476: PUSH
19477: FOR_IN
19478: IFFALSE 19494
// SetLives ( i , 300 ) ;
19480: LD_VAR 0 1
19484: PPUSH
19485: LD_INT 300
19487: PPUSH
19488: CALL_OW 234
19492: GO 19477
19494: POP
19495: POP
// end ;
19496: PPOPN 2
19498: END
// every 0 0$1 trigger s60 do var i , tmp ;
19499: LD_EXP 75
19503: IFFALSE 19572
19505: GO 19507
19507: DISABLE
19508: LD_INT 0
19510: PPUSH
19511: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19512: LD_ADDR_VAR 0 2
19516: PUSH
19517: LD_INT 22
19519: PUSH
19520: LD_OWVAR 2
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PPUSH
19529: CALL_OW 69
19533: ST_TO_ADDR
// if not tmp then
19534: LD_VAR 0 2
19538: NOT
19539: IFFALSE 19543
// exit ;
19541: GO 19572
// for i in tmp do
19543: LD_ADDR_VAR 0 1
19547: PUSH
19548: LD_VAR 0 2
19552: PUSH
19553: FOR_IN
19554: IFFALSE 19570
// SetLives ( i , 600 ) ;
19556: LD_VAR 0 1
19560: PPUSH
19561: LD_INT 600
19563: PPUSH
19564: CALL_OW 234
19568: GO 19553
19570: POP
19571: POP
// end ;
19572: PPOPN 2
19574: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19575: LD_INT 0
19577: PPUSH
// case cmd of 301 :
19578: LD_VAR 0 1
19582: PUSH
19583: LD_INT 301
19585: DOUBLE
19586: EQUAL
19587: IFTRUE 19591
19589: GO 19623
19591: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19592: LD_VAR 0 6
19596: PPUSH
19597: LD_VAR 0 7
19601: PPUSH
19602: LD_VAR 0 8
19606: PPUSH
19607: LD_VAR 0 4
19611: PPUSH
19612: LD_VAR 0 5
19616: PPUSH
19617: CALL 20832 0 5
19621: GO 19744
19623: LD_INT 302
19625: DOUBLE
19626: EQUAL
19627: IFTRUE 19631
19629: GO 19668
19631: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19632: LD_VAR 0 6
19636: PPUSH
19637: LD_VAR 0 7
19641: PPUSH
19642: LD_VAR 0 8
19646: PPUSH
19647: LD_VAR 0 9
19651: PPUSH
19652: LD_VAR 0 4
19656: PPUSH
19657: LD_VAR 0 5
19661: PPUSH
19662: CALL 20923 0 6
19666: GO 19744
19668: LD_INT 303
19670: DOUBLE
19671: EQUAL
19672: IFTRUE 19676
19674: GO 19713
19676: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19677: LD_VAR 0 6
19681: PPUSH
19682: LD_VAR 0 7
19686: PPUSH
19687: LD_VAR 0 8
19691: PPUSH
19692: LD_VAR 0 9
19696: PPUSH
19697: LD_VAR 0 4
19701: PPUSH
19702: LD_VAR 0 5
19706: PPUSH
19707: CALL 19749 0 6
19711: GO 19744
19713: LD_INT 304
19715: DOUBLE
19716: EQUAL
19717: IFTRUE 19721
19719: GO 19743
19721: POP
// hHackTeleport ( unit , x , y ) ; end ;
19722: LD_VAR 0 2
19726: PPUSH
19727: LD_VAR 0 4
19731: PPUSH
19732: LD_VAR 0 5
19736: PPUSH
19737: CALL 21516 0 3
19741: GO 19744
19743: POP
// end ;
19744: LD_VAR 0 12
19748: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19749: LD_INT 0
19751: PPUSH
19752: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19753: LD_VAR 0 1
19757: PUSH
19758: LD_INT 1
19760: LESS
19761: PUSH
19762: LD_VAR 0 1
19766: PUSH
19767: LD_INT 3
19769: GREATER
19770: OR
19771: PUSH
19772: LD_VAR 0 5
19776: PPUSH
19777: LD_VAR 0 6
19781: PPUSH
19782: CALL_OW 428
19786: OR
19787: IFFALSE 19791
// exit ;
19789: GO 20519
// uc_side := your_side ;
19791: LD_ADDR_OWVAR 20
19795: PUSH
19796: LD_OWVAR 2
19800: ST_TO_ADDR
// uc_nation := nation ;
19801: LD_ADDR_OWVAR 21
19805: PUSH
19806: LD_VAR 0 1
19810: ST_TO_ADDR
// bc_level = 1 ;
19811: LD_ADDR_OWVAR 43
19815: PUSH
19816: LD_INT 1
19818: ST_TO_ADDR
// case btype of 1 :
19819: LD_VAR 0 2
19823: PUSH
19824: LD_INT 1
19826: DOUBLE
19827: EQUAL
19828: IFTRUE 19832
19830: GO 19843
19832: POP
// bc_type := b_depot ; 2 :
19833: LD_ADDR_OWVAR 42
19837: PUSH
19838: LD_INT 0
19840: ST_TO_ADDR
19841: GO 20463
19843: LD_INT 2
19845: DOUBLE
19846: EQUAL
19847: IFTRUE 19851
19849: GO 19862
19851: POP
// bc_type := b_warehouse ; 3 :
19852: LD_ADDR_OWVAR 42
19856: PUSH
19857: LD_INT 1
19859: ST_TO_ADDR
19860: GO 20463
19862: LD_INT 3
19864: DOUBLE
19865: EQUAL
19866: IFTRUE 19870
19868: GO 19881
19870: POP
// bc_type := b_lab ; 4 .. 9 :
19871: LD_ADDR_OWVAR 42
19875: PUSH
19876: LD_INT 6
19878: ST_TO_ADDR
19879: GO 20463
19881: LD_INT 4
19883: DOUBLE
19884: GREATEREQUAL
19885: IFFALSE 19893
19887: LD_INT 9
19889: DOUBLE
19890: LESSEQUAL
19891: IFTRUE 19895
19893: GO 19955
19895: POP
// begin bc_type := b_lab_half ;
19896: LD_ADDR_OWVAR 42
19900: PUSH
19901: LD_INT 7
19903: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19904: LD_ADDR_OWVAR 44
19908: PUSH
19909: LD_INT 10
19911: PUSH
19912: LD_INT 11
19914: PUSH
19915: LD_INT 12
19917: PUSH
19918: LD_INT 15
19920: PUSH
19921: LD_INT 14
19923: PUSH
19924: LD_INT 13
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: PUSH
19935: LD_VAR 0 2
19939: PUSH
19940: LD_INT 3
19942: MINUS
19943: ARRAY
19944: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19945: LD_ADDR_OWVAR 45
19949: PUSH
19950: LD_INT 9
19952: ST_TO_ADDR
// end ; 10 .. 13 :
19953: GO 20463
19955: LD_INT 10
19957: DOUBLE
19958: GREATEREQUAL
19959: IFFALSE 19967
19961: LD_INT 13
19963: DOUBLE
19964: LESSEQUAL
19965: IFTRUE 19969
19967: GO 20046
19969: POP
// begin bc_type := b_lab_full ;
19970: LD_ADDR_OWVAR 42
19974: PUSH
19975: LD_INT 8
19977: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19978: LD_ADDR_OWVAR 44
19982: PUSH
19983: LD_INT 10
19985: PUSH
19986: LD_INT 12
19988: PUSH
19989: LD_INT 14
19991: PUSH
19992: LD_INT 13
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: PUSH
20001: LD_VAR 0 2
20005: PUSH
20006: LD_INT 9
20008: MINUS
20009: ARRAY
20010: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20011: LD_ADDR_OWVAR 45
20015: PUSH
20016: LD_INT 11
20018: PUSH
20019: LD_INT 15
20021: PUSH
20022: LD_INT 12
20024: PUSH
20025: LD_INT 15
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: PUSH
20034: LD_VAR 0 2
20038: PUSH
20039: LD_INT 9
20041: MINUS
20042: ARRAY
20043: ST_TO_ADDR
// end ; 14 :
20044: GO 20463
20046: LD_INT 14
20048: DOUBLE
20049: EQUAL
20050: IFTRUE 20054
20052: GO 20065
20054: POP
// bc_type := b_workshop ; 15 :
20055: LD_ADDR_OWVAR 42
20059: PUSH
20060: LD_INT 2
20062: ST_TO_ADDR
20063: GO 20463
20065: LD_INT 15
20067: DOUBLE
20068: EQUAL
20069: IFTRUE 20073
20071: GO 20084
20073: POP
// bc_type := b_factory ; 16 :
20074: LD_ADDR_OWVAR 42
20078: PUSH
20079: LD_INT 3
20081: ST_TO_ADDR
20082: GO 20463
20084: LD_INT 16
20086: DOUBLE
20087: EQUAL
20088: IFTRUE 20092
20090: GO 20103
20092: POP
// bc_type := b_ext_gun ; 17 :
20093: LD_ADDR_OWVAR 42
20097: PUSH
20098: LD_INT 17
20100: ST_TO_ADDR
20101: GO 20463
20103: LD_INT 17
20105: DOUBLE
20106: EQUAL
20107: IFTRUE 20111
20109: GO 20139
20111: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20112: LD_ADDR_OWVAR 42
20116: PUSH
20117: LD_INT 19
20119: PUSH
20120: LD_INT 23
20122: PUSH
20123: LD_INT 19
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: LIST
20130: PUSH
20131: LD_VAR 0 1
20135: ARRAY
20136: ST_TO_ADDR
20137: GO 20463
20139: LD_INT 18
20141: DOUBLE
20142: EQUAL
20143: IFTRUE 20147
20145: GO 20158
20147: POP
// bc_type := b_ext_radar ; 19 :
20148: LD_ADDR_OWVAR 42
20152: PUSH
20153: LD_INT 20
20155: ST_TO_ADDR
20156: GO 20463
20158: LD_INT 19
20160: DOUBLE
20161: EQUAL
20162: IFTRUE 20166
20164: GO 20177
20166: POP
// bc_type := b_ext_radio ; 20 :
20167: LD_ADDR_OWVAR 42
20171: PUSH
20172: LD_INT 22
20174: ST_TO_ADDR
20175: GO 20463
20177: LD_INT 20
20179: DOUBLE
20180: EQUAL
20181: IFTRUE 20185
20183: GO 20196
20185: POP
// bc_type := b_ext_siberium ; 21 :
20186: LD_ADDR_OWVAR 42
20190: PUSH
20191: LD_INT 21
20193: ST_TO_ADDR
20194: GO 20463
20196: LD_INT 21
20198: DOUBLE
20199: EQUAL
20200: IFTRUE 20204
20202: GO 20215
20204: POP
// bc_type := b_ext_computer ; 22 :
20205: LD_ADDR_OWVAR 42
20209: PUSH
20210: LD_INT 24
20212: ST_TO_ADDR
20213: GO 20463
20215: LD_INT 22
20217: DOUBLE
20218: EQUAL
20219: IFTRUE 20223
20221: GO 20234
20223: POP
// bc_type := b_ext_track ; 23 :
20224: LD_ADDR_OWVAR 42
20228: PUSH
20229: LD_INT 16
20231: ST_TO_ADDR
20232: GO 20463
20234: LD_INT 23
20236: DOUBLE
20237: EQUAL
20238: IFTRUE 20242
20240: GO 20253
20242: POP
// bc_type := b_ext_laser ; 24 :
20243: LD_ADDR_OWVAR 42
20247: PUSH
20248: LD_INT 25
20250: ST_TO_ADDR
20251: GO 20463
20253: LD_INT 24
20255: DOUBLE
20256: EQUAL
20257: IFTRUE 20261
20259: GO 20272
20261: POP
// bc_type := b_control_tower ; 25 :
20262: LD_ADDR_OWVAR 42
20266: PUSH
20267: LD_INT 36
20269: ST_TO_ADDR
20270: GO 20463
20272: LD_INT 25
20274: DOUBLE
20275: EQUAL
20276: IFTRUE 20280
20278: GO 20291
20280: POP
// bc_type := b_breastwork ; 26 :
20281: LD_ADDR_OWVAR 42
20285: PUSH
20286: LD_INT 31
20288: ST_TO_ADDR
20289: GO 20463
20291: LD_INT 26
20293: DOUBLE
20294: EQUAL
20295: IFTRUE 20299
20297: GO 20310
20299: POP
// bc_type := b_bunker ; 27 :
20300: LD_ADDR_OWVAR 42
20304: PUSH
20305: LD_INT 32
20307: ST_TO_ADDR
20308: GO 20463
20310: LD_INT 27
20312: DOUBLE
20313: EQUAL
20314: IFTRUE 20318
20316: GO 20329
20318: POP
// bc_type := b_turret ; 28 :
20319: LD_ADDR_OWVAR 42
20323: PUSH
20324: LD_INT 33
20326: ST_TO_ADDR
20327: GO 20463
20329: LD_INT 28
20331: DOUBLE
20332: EQUAL
20333: IFTRUE 20337
20335: GO 20348
20337: POP
// bc_type := b_armoury ; 29 :
20338: LD_ADDR_OWVAR 42
20342: PUSH
20343: LD_INT 4
20345: ST_TO_ADDR
20346: GO 20463
20348: LD_INT 29
20350: DOUBLE
20351: EQUAL
20352: IFTRUE 20356
20354: GO 20367
20356: POP
// bc_type := b_barracks ; 30 :
20357: LD_ADDR_OWVAR 42
20361: PUSH
20362: LD_INT 5
20364: ST_TO_ADDR
20365: GO 20463
20367: LD_INT 30
20369: DOUBLE
20370: EQUAL
20371: IFTRUE 20375
20373: GO 20386
20375: POP
// bc_type := b_solar_power ; 31 :
20376: LD_ADDR_OWVAR 42
20380: PUSH
20381: LD_INT 27
20383: ST_TO_ADDR
20384: GO 20463
20386: LD_INT 31
20388: DOUBLE
20389: EQUAL
20390: IFTRUE 20394
20392: GO 20405
20394: POP
// bc_type := b_oil_power ; 32 :
20395: LD_ADDR_OWVAR 42
20399: PUSH
20400: LD_INT 26
20402: ST_TO_ADDR
20403: GO 20463
20405: LD_INT 32
20407: DOUBLE
20408: EQUAL
20409: IFTRUE 20413
20411: GO 20424
20413: POP
// bc_type := b_siberite_power ; 33 :
20414: LD_ADDR_OWVAR 42
20418: PUSH
20419: LD_INT 28
20421: ST_TO_ADDR
20422: GO 20463
20424: LD_INT 33
20426: DOUBLE
20427: EQUAL
20428: IFTRUE 20432
20430: GO 20443
20432: POP
// bc_type := b_oil_mine ; 34 :
20433: LD_ADDR_OWVAR 42
20437: PUSH
20438: LD_INT 29
20440: ST_TO_ADDR
20441: GO 20463
20443: LD_INT 34
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20462
20451: POP
// bc_type := b_siberite_mine ; end ;
20452: LD_ADDR_OWVAR 42
20456: PUSH
20457: LD_INT 30
20459: ST_TO_ADDR
20460: GO 20463
20462: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20463: LD_ADDR_VAR 0 8
20467: PUSH
20468: LD_VAR 0 5
20472: PPUSH
20473: LD_VAR 0 6
20477: PPUSH
20478: LD_VAR 0 3
20482: PPUSH
20483: CALL_OW 47
20487: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20488: LD_OWVAR 42
20492: PUSH
20493: LD_INT 32
20495: PUSH
20496: LD_INT 33
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: IN
20503: IFFALSE 20519
// PlaceWeaponTurret ( b , weapon ) ;
20505: LD_VAR 0 8
20509: PPUSH
20510: LD_VAR 0 4
20514: PPUSH
20515: CALL_OW 431
// end ;
20519: LD_VAR 0 7
20523: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20524: LD_INT 0
20526: PPUSH
20527: PPUSH
20528: PPUSH
20529: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20530: LD_ADDR_VAR 0 4
20534: PUSH
20535: LD_INT 22
20537: PUSH
20538: LD_OWVAR 2
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 2
20549: PUSH
20550: LD_INT 30
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 30
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 69
20583: ST_TO_ADDR
// if not tmp then
20584: LD_VAR 0 4
20588: NOT
20589: IFFALSE 20593
// exit ;
20591: GO 20652
// for i in tmp do
20593: LD_ADDR_VAR 0 2
20597: PUSH
20598: LD_VAR 0 4
20602: PUSH
20603: FOR_IN
20604: IFFALSE 20650
// for j = 1 to 3 do
20606: LD_ADDR_VAR 0 3
20610: PUSH
20611: DOUBLE
20612: LD_INT 1
20614: DEC
20615: ST_TO_ADDR
20616: LD_INT 3
20618: PUSH
20619: FOR_TO
20620: IFFALSE 20646
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20622: LD_VAR 0 2
20626: PPUSH
20627: CALL_OW 274
20631: PPUSH
20632: LD_VAR 0 3
20636: PPUSH
20637: LD_INT 99999
20639: PPUSH
20640: CALL_OW 277
20644: GO 20619
20646: POP
20647: POP
20648: GO 20603
20650: POP
20651: POP
// end ;
20652: LD_VAR 0 1
20656: RET
// export function hHackSetLevel10 ; var i , j ; begin
20657: LD_INT 0
20659: PPUSH
20660: PPUSH
20661: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20662: LD_ADDR_VAR 0 2
20666: PUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PPUSH
20677: CALL_OW 69
20681: PUSH
20682: FOR_IN
20683: IFFALSE 20735
// if IsSelected ( i ) then
20685: LD_VAR 0 2
20689: PPUSH
20690: CALL_OW 306
20694: IFFALSE 20733
// begin for j := 1 to 4 do
20696: LD_ADDR_VAR 0 3
20700: PUSH
20701: DOUBLE
20702: LD_INT 1
20704: DEC
20705: ST_TO_ADDR
20706: LD_INT 4
20708: PUSH
20709: FOR_TO
20710: IFFALSE 20731
// SetSkill ( i , j , 10 ) ;
20712: LD_VAR 0 2
20716: PPUSH
20717: LD_VAR 0 3
20721: PPUSH
20722: LD_INT 10
20724: PPUSH
20725: CALL_OW 237
20729: GO 20709
20731: POP
20732: POP
// end ;
20733: GO 20682
20735: POP
20736: POP
// end ;
20737: LD_VAR 0 1
20741: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20742: LD_INT 0
20744: PPUSH
20745: PPUSH
20746: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20747: LD_ADDR_VAR 0 2
20751: PUSH
20752: LD_INT 22
20754: PUSH
20755: LD_OWVAR 2
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 21
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PPUSH
20778: CALL_OW 69
20782: PUSH
20783: FOR_IN
20784: IFFALSE 20825
// begin for j := 1 to 4 do
20786: LD_ADDR_VAR 0 3
20790: PUSH
20791: DOUBLE
20792: LD_INT 1
20794: DEC
20795: ST_TO_ADDR
20796: LD_INT 4
20798: PUSH
20799: FOR_TO
20800: IFFALSE 20821
// SetSkill ( i , j , 10 ) ;
20802: LD_VAR 0 2
20806: PPUSH
20807: LD_VAR 0 3
20811: PPUSH
20812: LD_INT 10
20814: PPUSH
20815: CALL_OW 237
20819: GO 20799
20821: POP
20822: POP
// end ;
20823: GO 20783
20825: POP
20826: POP
// end ;
20827: LD_VAR 0 1
20831: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20832: LD_INT 0
20834: PPUSH
// uc_side := your_side ;
20835: LD_ADDR_OWVAR 20
20839: PUSH
20840: LD_OWVAR 2
20844: ST_TO_ADDR
// uc_nation := nation ;
20845: LD_ADDR_OWVAR 21
20849: PUSH
20850: LD_VAR 0 1
20854: ST_TO_ADDR
// InitHc ;
20855: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20859: LD_INT 0
20861: PPUSH
20862: LD_VAR 0 2
20866: PPUSH
20867: LD_VAR 0 3
20871: PPUSH
20872: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20876: LD_VAR 0 4
20880: PPUSH
20881: LD_VAR 0 5
20885: PPUSH
20886: CALL_OW 428
20890: PUSH
20891: LD_INT 0
20893: EQUAL
20894: IFFALSE 20918
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20896: CALL_OW 44
20900: PPUSH
20901: LD_VAR 0 4
20905: PPUSH
20906: LD_VAR 0 5
20910: PPUSH
20911: LD_INT 1
20913: PPUSH
20914: CALL_OW 48
// end ;
20918: LD_VAR 0 6
20922: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20923: LD_INT 0
20925: PPUSH
20926: PPUSH
// uc_side := your_side ;
20927: LD_ADDR_OWVAR 20
20931: PUSH
20932: LD_OWVAR 2
20936: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20937: LD_VAR 0 1
20941: PUSH
20942: LD_INT 1
20944: PUSH
20945: LD_INT 2
20947: PUSH
20948: LD_INT 3
20950: PUSH
20951: LD_INT 4
20953: PUSH
20954: LD_INT 5
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: IN
20964: IFFALSE 20976
// uc_nation := nation_american else
20966: LD_ADDR_OWVAR 21
20970: PUSH
20971: LD_INT 1
20973: ST_TO_ADDR
20974: GO 21019
// if chassis in [ 11 , 12 , 13 , 14 ] then
20976: LD_VAR 0 1
20980: PUSH
20981: LD_INT 11
20983: PUSH
20984: LD_INT 12
20986: PUSH
20987: LD_INT 13
20989: PUSH
20990: LD_INT 14
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: IN
20999: IFFALSE 21011
// uc_nation := nation_arabian else
21001: LD_ADDR_OWVAR 21
21005: PUSH
21006: LD_INT 2
21008: ST_TO_ADDR
21009: GO 21019
// uc_nation := nation_russian ;
21011: LD_ADDR_OWVAR 21
21015: PUSH
21016: LD_INT 3
21018: ST_TO_ADDR
// vc_chassis := chassis ;
21019: LD_ADDR_OWVAR 37
21023: PUSH
21024: LD_VAR 0 1
21028: ST_TO_ADDR
// vc_engine := engine ;
21029: LD_ADDR_OWVAR 39
21033: PUSH
21034: LD_VAR 0 2
21038: ST_TO_ADDR
// vc_control := control ;
21039: LD_ADDR_OWVAR 38
21043: PUSH
21044: LD_VAR 0 3
21048: ST_TO_ADDR
// vc_weapon := weapon ;
21049: LD_ADDR_OWVAR 40
21053: PUSH
21054: LD_VAR 0 4
21058: ST_TO_ADDR
// un := CreateVehicle ;
21059: LD_ADDR_VAR 0 8
21063: PUSH
21064: CALL_OW 45
21068: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21069: LD_VAR 0 8
21073: PPUSH
21074: LD_INT 0
21076: PPUSH
21077: LD_INT 5
21079: PPUSH
21080: CALL_OW 12
21084: PPUSH
21085: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21089: LD_VAR 0 8
21093: PPUSH
21094: LD_VAR 0 5
21098: PPUSH
21099: LD_VAR 0 6
21103: PPUSH
21104: LD_INT 1
21106: PPUSH
21107: CALL_OW 48
// end ;
21111: LD_VAR 0 7
21115: RET
// export hInvincible ; every 1 do
21116: GO 21118
21118: DISABLE
// hInvincible := [ ] ;
21119: LD_ADDR_EXP 76
21123: PUSH
21124: EMPTY
21125: ST_TO_ADDR
21126: END
// every 10 do var i ;
21127: GO 21129
21129: DISABLE
21130: LD_INT 0
21132: PPUSH
// begin enable ;
21133: ENABLE
// if not hInvincible then
21134: LD_EXP 76
21138: NOT
21139: IFFALSE 21143
// exit ;
21141: GO 21187
// for i in hInvincible do
21143: LD_ADDR_VAR 0 1
21147: PUSH
21148: LD_EXP 76
21152: PUSH
21153: FOR_IN
21154: IFFALSE 21185
// if GetLives ( i ) < 1000 then
21156: LD_VAR 0 1
21160: PPUSH
21161: CALL_OW 256
21165: PUSH
21166: LD_INT 1000
21168: LESS
21169: IFFALSE 21183
// SetLives ( i , 1000 ) ;
21171: LD_VAR 0 1
21175: PPUSH
21176: LD_INT 1000
21178: PPUSH
21179: CALL_OW 234
21183: GO 21153
21185: POP
21186: POP
// end ;
21187: PPOPN 1
21189: END
// export function hHackInvincible ; var i ; begin
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21194: LD_ADDR_VAR 0 2
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: LD_INT 21
21204: PUSH
21205: LD_INT 1
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 21
21214: PUSH
21215: LD_INT 2
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: PPUSH
21227: CALL_OW 69
21231: PUSH
21232: FOR_IN
21233: IFFALSE 21294
// if IsSelected ( i ) then
21235: LD_VAR 0 2
21239: PPUSH
21240: CALL_OW 306
21244: IFFALSE 21292
// begin if i in hInvincible then
21246: LD_VAR 0 2
21250: PUSH
21251: LD_EXP 76
21255: IN
21256: IFFALSE 21276
// hInvincible := hInvincible diff i else
21258: LD_ADDR_EXP 76
21262: PUSH
21263: LD_EXP 76
21267: PUSH
21268: LD_VAR 0 2
21272: DIFF
21273: ST_TO_ADDR
21274: GO 21292
// hInvincible := hInvincible union i ;
21276: LD_ADDR_EXP 76
21280: PUSH
21281: LD_EXP 76
21285: PUSH
21286: LD_VAR 0 2
21290: UNION
21291: ST_TO_ADDR
// end ;
21292: GO 21232
21294: POP
21295: POP
// end ;
21296: LD_VAR 0 1
21300: RET
// export function hHackInvisible ; var i , j ; begin
21301: LD_INT 0
21303: PPUSH
21304: PPUSH
21305: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21306: LD_ADDR_VAR 0 2
21310: PUSH
21311: LD_INT 21
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PPUSH
21321: CALL_OW 69
21325: PUSH
21326: FOR_IN
21327: IFFALSE 21351
// if IsSelected ( i ) then
21329: LD_VAR 0 2
21333: PPUSH
21334: CALL_OW 306
21338: IFFALSE 21349
// ComForceInvisible ( i ) ;
21340: LD_VAR 0 2
21344: PPUSH
21345: CALL_OW 496
21349: GO 21326
21351: POP
21352: POP
// end ;
21353: LD_VAR 0 1
21357: RET
// export function hHackChangeYourSide ; begin
21358: LD_INT 0
21360: PPUSH
// if your_side = 8 then
21361: LD_OWVAR 2
21365: PUSH
21366: LD_INT 8
21368: EQUAL
21369: IFFALSE 21381
// your_side := 0 else
21371: LD_ADDR_OWVAR 2
21375: PUSH
21376: LD_INT 0
21378: ST_TO_ADDR
21379: GO 21395
// your_side := your_side + 1 ;
21381: LD_ADDR_OWVAR 2
21385: PUSH
21386: LD_OWVAR 2
21390: PUSH
21391: LD_INT 1
21393: PLUS
21394: ST_TO_ADDR
// end ;
21395: LD_VAR 0 1
21399: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21400: LD_INT 0
21402: PPUSH
21403: PPUSH
21404: PPUSH
// for i in all_units do
21405: LD_ADDR_VAR 0 2
21409: PUSH
21410: LD_OWVAR 3
21414: PUSH
21415: FOR_IN
21416: IFFALSE 21494
// if IsSelected ( i ) then
21418: LD_VAR 0 2
21422: PPUSH
21423: CALL_OW 306
21427: IFFALSE 21492
// begin j := GetSide ( i ) ;
21429: LD_ADDR_VAR 0 3
21433: PUSH
21434: LD_VAR 0 2
21438: PPUSH
21439: CALL_OW 255
21443: ST_TO_ADDR
// if j = 8 then
21444: LD_VAR 0 3
21448: PUSH
21449: LD_INT 8
21451: EQUAL
21452: IFFALSE 21464
// j := 0 else
21454: LD_ADDR_VAR 0 3
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
21462: GO 21478
// j := j + 1 ;
21464: LD_ADDR_VAR 0 3
21468: PUSH
21469: LD_VAR 0 3
21473: PUSH
21474: LD_INT 1
21476: PLUS
21477: ST_TO_ADDR
// SetSide ( i , j ) ;
21478: LD_VAR 0 2
21482: PPUSH
21483: LD_VAR 0 3
21487: PPUSH
21488: CALL_OW 235
// end ;
21492: GO 21415
21494: POP
21495: POP
// end ;
21496: LD_VAR 0 1
21500: RET
// export function hHackFog ; begin
21501: LD_INT 0
21503: PPUSH
// FogOff ( true ) ;
21504: LD_INT 1
21506: PPUSH
21507: CALL_OW 344
// end ;
21511: LD_VAR 0 1
21515: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21516: LD_INT 0
21518: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21519: LD_VAR 0 1
21523: PPUSH
21524: LD_VAR 0 2
21528: PPUSH
21529: LD_VAR 0 3
21533: PPUSH
21534: LD_INT 1
21536: PPUSH
21537: LD_INT 1
21539: PPUSH
21540: CALL_OW 483
// CenterOnXY ( x , y ) ;
21544: LD_VAR 0 2
21548: PPUSH
21549: LD_VAR 0 3
21553: PPUSH
21554: CALL_OW 84
// end ;
21558: LD_VAR 0 4
21562: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21563: LD_INT 0
21565: PPUSH
21566: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21567: LD_VAR 0 1
21571: NOT
21572: PUSH
21573: LD_VAR 0 2
21577: PPUSH
21578: LD_VAR 0 3
21582: PPUSH
21583: CALL_OW 488
21587: NOT
21588: OR
21589: PUSH
21590: LD_VAR 0 1
21594: PPUSH
21595: CALL_OW 266
21599: PUSH
21600: LD_INT 3
21602: NONEQUAL
21603: PUSH
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 247
21613: PUSH
21614: LD_INT 1
21616: EQUAL
21617: NOT
21618: AND
21619: OR
21620: IFFALSE 21624
// exit ;
21622: GO 21773
// if GetType ( factory ) = unit_human then
21624: LD_VAR 0 1
21628: PPUSH
21629: CALL_OW 247
21633: PUSH
21634: LD_INT 1
21636: EQUAL
21637: IFFALSE 21654
// factory := IsInUnit ( factory ) ;
21639: LD_ADDR_VAR 0 1
21643: PUSH
21644: LD_VAR 0 1
21648: PPUSH
21649: CALL_OW 310
21653: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21654: LD_VAR 0 1
21658: PPUSH
21659: CALL_OW 266
21663: PUSH
21664: LD_INT 3
21666: NONEQUAL
21667: IFFALSE 21671
// exit ;
21669: GO 21773
// if HexInfo ( x , y ) = factory then
21671: LD_VAR 0 2
21675: PPUSH
21676: LD_VAR 0 3
21680: PPUSH
21681: CALL_OW 428
21685: PUSH
21686: LD_VAR 0 1
21690: EQUAL
21691: IFFALSE 21718
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21693: LD_ADDR_EXP 77
21697: PUSH
21698: LD_EXP 77
21702: PPUSH
21703: LD_VAR 0 1
21707: PPUSH
21708: LD_INT 0
21710: PPUSH
21711: CALL_OW 1
21715: ST_TO_ADDR
21716: GO 21769
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21718: LD_ADDR_EXP 77
21722: PUSH
21723: LD_EXP 77
21727: PPUSH
21728: LD_VAR 0 1
21732: PPUSH
21733: LD_VAR 0 1
21737: PPUSH
21738: CALL_OW 255
21742: PUSH
21743: LD_VAR 0 1
21747: PUSH
21748: LD_VAR 0 2
21752: PUSH
21753: LD_VAR 0 3
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: PPUSH
21764: CALL_OW 1
21768: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21769: CALL 21778 0 0
// end ;
21773: LD_VAR 0 4
21777: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21778: LD_INT 0
21780: PPUSH
21781: PPUSH
21782: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21783: LD_STRING resetFactoryWaypoint();
21785: PPUSH
21786: CALL_OW 559
// if factoryWaypoints then
21790: LD_EXP 77
21794: IFFALSE 21920
// begin list := PrepareArray ( factoryWaypoints ) ;
21796: LD_ADDR_VAR 0 3
21800: PUSH
21801: LD_EXP 77
21805: PPUSH
21806: CALL 69217 0 1
21810: ST_TO_ADDR
// for i := 1 to list do
21811: LD_ADDR_VAR 0 2
21815: PUSH
21816: DOUBLE
21817: LD_INT 1
21819: DEC
21820: ST_TO_ADDR
21821: LD_VAR 0 3
21825: PUSH
21826: FOR_TO
21827: IFFALSE 21918
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21829: LD_STRING setFactoryWaypointXY(
21831: PUSH
21832: LD_VAR 0 3
21836: PUSH
21837: LD_VAR 0 2
21841: ARRAY
21842: PUSH
21843: LD_INT 1
21845: ARRAY
21846: STR
21847: PUSH
21848: LD_STRING ,
21850: STR
21851: PUSH
21852: LD_VAR 0 3
21856: PUSH
21857: LD_VAR 0 2
21861: ARRAY
21862: PUSH
21863: LD_INT 2
21865: ARRAY
21866: STR
21867: PUSH
21868: LD_STRING ,
21870: STR
21871: PUSH
21872: LD_VAR 0 3
21876: PUSH
21877: LD_VAR 0 2
21881: ARRAY
21882: PUSH
21883: LD_INT 3
21885: ARRAY
21886: STR
21887: PUSH
21888: LD_STRING ,
21890: STR
21891: PUSH
21892: LD_VAR 0 3
21896: PUSH
21897: LD_VAR 0 2
21901: ARRAY
21902: PUSH
21903: LD_INT 4
21905: ARRAY
21906: STR
21907: PUSH
21908: LD_STRING )
21910: STR
21911: PPUSH
21912: CALL_OW 559
21916: GO 21826
21918: POP
21919: POP
// end ; end ;
21920: LD_VAR 0 1
21924: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21925: LD_INT 0
21927: PPUSH
// if HexInfo ( x , y ) = warehouse then
21928: LD_VAR 0 2
21932: PPUSH
21933: LD_VAR 0 3
21937: PPUSH
21938: CALL_OW 428
21942: PUSH
21943: LD_VAR 0 1
21947: EQUAL
21948: IFFALSE 21975
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21950: LD_ADDR_EXP 78
21954: PUSH
21955: LD_EXP 78
21959: PPUSH
21960: LD_VAR 0 1
21964: PPUSH
21965: LD_INT 0
21967: PPUSH
21968: CALL_OW 1
21972: ST_TO_ADDR
21973: GO 22026
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21975: LD_ADDR_EXP 78
21979: PUSH
21980: LD_EXP 78
21984: PPUSH
21985: LD_VAR 0 1
21989: PPUSH
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 255
21999: PUSH
22000: LD_VAR 0 1
22004: PUSH
22005: LD_VAR 0 2
22009: PUSH
22010: LD_VAR 0 3
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: PPUSH
22021: CALL_OW 1
22025: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22026: CALL 22035 0 0
// end ;
22030: LD_VAR 0 4
22034: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22035: LD_INT 0
22037: PPUSH
22038: PPUSH
22039: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22040: LD_STRING resetWarehouseGatheringPoints();
22042: PPUSH
22043: CALL_OW 559
// if warehouseGatheringPoints then
22047: LD_EXP 78
22051: IFFALSE 22177
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22053: LD_ADDR_VAR 0 3
22057: PUSH
22058: LD_EXP 78
22062: PPUSH
22063: CALL 69217 0 1
22067: ST_TO_ADDR
// for i := 1 to list do
22068: LD_ADDR_VAR 0 2
22072: PUSH
22073: DOUBLE
22074: LD_INT 1
22076: DEC
22077: ST_TO_ADDR
22078: LD_VAR 0 3
22082: PUSH
22083: FOR_TO
22084: IFFALSE 22175
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22086: LD_STRING setWarehouseGatheringPointXY(
22088: PUSH
22089: LD_VAR 0 3
22093: PUSH
22094: LD_VAR 0 2
22098: ARRAY
22099: PUSH
22100: LD_INT 1
22102: ARRAY
22103: STR
22104: PUSH
22105: LD_STRING ,
22107: STR
22108: PUSH
22109: LD_VAR 0 3
22113: PUSH
22114: LD_VAR 0 2
22118: ARRAY
22119: PUSH
22120: LD_INT 2
22122: ARRAY
22123: STR
22124: PUSH
22125: LD_STRING ,
22127: STR
22128: PUSH
22129: LD_VAR 0 3
22133: PUSH
22134: LD_VAR 0 2
22138: ARRAY
22139: PUSH
22140: LD_INT 3
22142: ARRAY
22143: STR
22144: PUSH
22145: LD_STRING ,
22147: STR
22148: PUSH
22149: LD_VAR 0 3
22153: PUSH
22154: LD_VAR 0 2
22158: ARRAY
22159: PUSH
22160: LD_INT 4
22162: ARRAY
22163: STR
22164: PUSH
22165: LD_STRING )
22167: STR
22168: PPUSH
22169: CALL_OW 559
22173: GO 22083
22175: POP
22176: POP
// end ; end ;
22177: LD_VAR 0 1
22181: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22182: LD_EXP 78
22186: IFFALSE 22871
22188: GO 22190
22190: DISABLE
22191: LD_INT 0
22193: PPUSH
22194: PPUSH
22195: PPUSH
22196: PPUSH
22197: PPUSH
22198: PPUSH
22199: PPUSH
22200: PPUSH
22201: PPUSH
// begin enable ;
22202: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22203: LD_ADDR_VAR 0 3
22207: PUSH
22208: LD_EXP 78
22212: PPUSH
22213: CALL 69217 0 1
22217: ST_TO_ADDR
// if not list then
22218: LD_VAR 0 3
22222: NOT
22223: IFFALSE 22227
// exit ;
22225: GO 22871
// for i := 1 to list do
22227: LD_ADDR_VAR 0 1
22231: PUSH
22232: DOUBLE
22233: LD_INT 1
22235: DEC
22236: ST_TO_ADDR
22237: LD_VAR 0 3
22241: PUSH
22242: FOR_TO
22243: IFFALSE 22869
// begin depot := list [ i ] [ 2 ] ;
22245: LD_ADDR_VAR 0 8
22249: PUSH
22250: LD_VAR 0 3
22254: PUSH
22255: LD_VAR 0 1
22259: ARRAY
22260: PUSH
22261: LD_INT 2
22263: ARRAY
22264: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22265: LD_ADDR_VAR 0 5
22269: PUSH
22270: LD_VAR 0 3
22274: PUSH
22275: LD_VAR 0 1
22279: ARRAY
22280: PUSH
22281: LD_INT 1
22283: ARRAY
22284: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22285: LD_VAR 0 8
22289: PPUSH
22290: CALL_OW 301
22294: PUSH
22295: LD_VAR 0 5
22299: PUSH
22300: LD_VAR 0 8
22304: PPUSH
22305: CALL_OW 255
22309: NONEQUAL
22310: OR
22311: IFFALSE 22340
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22313: LD_ADDR_EXP 78
22317: PUSH
22318: LD_EXP 78
22322: PPUSH
22323: LD_VAR 0 8
22327: PPUSH
22328: LD_INT 0
22330: PPUSH
22331: CALL_OW 1
22335: ST_TO_ADDR
// exit ;
22336: POP
22337: POP
22338: GO 22871
// end ; x := list [ i ] [ 3 ] ;
22340: LD_ADDR_VAR 0 6
22344: PUSH
22345: LD_VAR 0 3
22349: PUSH
22350: LD_VAR 0 1
22354: ARRAY
22355: PUSH
22356: LD_INT 3
22358: ARRAY
22359: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22360: LD_ADDR_VAR 0 7
22364: PUSH
22365: LD_VAR 0 3
22369: PUSH
22370: LD_VAR 0 1
22374: ARRAY
22375: PUSH
22376: LD_INT 4
22378: ARRAY
22379: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22380: LD_ADDR_VAR 0 9
22384: PUSH
22385: LD_VAR 0 6
22389: PPUSH
22390: LD_VAR 0 7
22394: PPUSH
22395: LD_INT 16
22397: PPUSH
22398: CALL 67805 0 3
22402: ST_TO_ADDR
// if not cratesNearbyPoint then
22403: LD_VAR 0 9
22407: NOT
22408: IFFALSE 22414
// exit ;
22410: POP
22411: POP
22412: GO 22871
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22414: LD_ADDR_VAR 0 4
22418: PUSH
22419: LD_INT 22
22421: PUSH
22422: LD_VAR 0 5
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 3
22433: PUSH
22434: LD_INT 60
22436: PUSH
22437: EMPTY
22438: LIST
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 91
22446: PUSH
22447: LD_VAR 0 8
22451: PUSH
22452: LD_INT 6
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 25
22465: PUSH
22466: LD_INT 2
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 25
22475: PUSH
22476: LD_INT 16
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: PPUSH
22494: CALL_OW 69
22498: PUSH
22499: LD_VAR 0 8
22503: PPUSH
22504: CALL_OW 313
22508: PPUSH
22509: LD_INT 3
22511: PUSH
22512: LD_INT 60
22514: PUSH
22515: EMPTY
22516: LIST
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 2
22524: PUSH
22525: LD_INT 25
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 25
22537: PUSH
22538: LD_INT 16
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: LIST
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PPUSH
22554: CALL_OW 72
22558: UNION
22559: ST_TO_ADDR
// if tmp then
22560: LD_VAR 0 4
22564: IFFALSE 22644
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22566: LD_ADDR_VAR 0 4
22570: PUSH
22571: LD_VAR 0 4
22575: PPUSH
22576: LD_INT 3
22578: PPUSH
22579: CALL 65774 0 2
22583: ST_TO_ADDR
// for j in tmp do
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: LD_VAR 0 4
22593: PUSH
22594: FOR_IN
22595: IFFALSE 22638
// begin if IsInUnit ( j ) then
22597: LD_VAR 0 2
22601: PPUSH
22602: CALL_OW 310
22606: IFFALSE 22617
// ComExit ( j ) ;
22608: LD_VAR 0 2
22612: PPUSH
22613: CALL 65857 0 1
// AddComCollect ( j , x , y ) ;
22617: LD_VAR 0 2
22621: PPUSH
22622: LD_VAR 0 6
22626: PPUSH
22627: LD_VAR 0 7
22631: PPUSH
22632: CALL_OW 177
// end ;
22636: GO 22594
22638: POP
22639: POP
// exit ;
22640: POP
22641: POP
22642: GO 22871
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22644: LD_ADDR_VAR 0 4
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_VAR 0 5
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 91
22663: PUSH
22664: LD_VAR 0 8
22668: PUSH
22669: LD_INT 8
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 2
22679: PUSH
22680: LD_INT 34
22682: PUSH
22683: LD_INT 12
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 34
22692: PUSH
22693: LD_INT 51
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 34
22702: PUSH
22703: LD_INT 32
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 34
22712: PUSH
22713: LD_INT 89
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: PPUSH
22732: CALL_OW 69
22736: ST_TO_ADDR
// if tmp then
22737: LD_VAR 0 4
22741: IFFALSE 22867
// begin for j in tmp do
22743: LD_ADDR_VAR 0 2
22747: PUSH
22748: LD_VAR 0 4
22752: PUSH
22753: FOR_IN
22754: IFFALSE 22865
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22756: LD_VAR 0 2
22760: PPUSH
22761: CALL_OW 262
22765: PUSH
22766: LD_INT 3
22768: EQUAL
22769: PUSH
22770: LD_VAR 0 2
22774: PPUSH
22775: CALL_OW 261
22779: PUSH
22780: LD_INT 20
22782: GREATER
22783: OR
22784: PUSH
22785: LD_VAR 0 2
22789: PPUSH
22790: CALL_OW 314
22794: NOT
22795: AND
22796: PUSH
22797: LD_VAR 0 2
22801: PPUSH
22802: CALL_OW 263
22806: PUSH
22807: LD_INT 1
22809: NONEQUAL
22810: PUSH
22811: LD_VAR 0 2
22815: PPUSH
22816: CALL_OW 311
22820: OR
22821: AND
22822: IFFALSE 22863
// begin ComCollect ( j , x , y ) ;
22824: LD_VAR 0 2
22828: PPUSH
22829: LD_VAR 0 6
22833: PPUSH
22834: LD_VAR 0 7
22838: PPUSH
22839: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22843: LD_VAR 0 2
22847: PPUSH
22848: LD_VAR 0 8
22852: PPUSH
22853: CALL_OW 172
// exit ;
22857: POP
22858: POP
22859: POP
22860: POP
22861: GO 22871
// end ;
22863: GO 22753
22865: POP
22866: POP
// end ; end ;
22867: GO 22242
22869: POP
22870: POP
// end ; end_of_file
22871: PPOPN 9
22873: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22874: LD_INT 0
22876: PPUSH
22877: PPUSH
22878: PPUSH
22879: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22880: LD_VAR 0 1
22884: PPUSH
22885: CALL_OW 264
22889: PUSH
22890: LD_INT 91
22892: EQUAL
22893: IFFALSE 22965
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22895: LD_INT 68
22897: PPUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 255
22907: PPUSH
22908: CALL_OW 321
22912: PUSH
22913: LD_INT 2
22915: EQUAL
22916: IFFALSE 22928
// eff := 70 else
22918: LD_ADDR_VAR 0 4
22922: PUSH
22923: LD_INT 70
22925: ST_TO_ADDR
22926: GO 22936
// eff := 30 ;
22928: LD_ADDR_VAR 0 4
22932: PUSH
22933: LD_INT 30
22935: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22936: LD_VAR 0 1
22940: PPUSH
22941: CALL_OW 250
22945: PPUSH
22946: LD_VAR 0 1
22950: PPUSH
22951: CALL_OW 251
22955: PPUSH
22956: LD_VAR 0 4
22960: PPUSH
22961: CALL_OW 495
// end ; end ;
22965: LD_VAR 0 2
22969: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22970: LD_INT 0
22972: PPUSH
// end ;
22973: LD_VAR 0 4
22977: RET
// export function SOS_Command ( cmd ) ; begin
22978: LD_INT 0
22980: PPUSH
// end ;
22981: LD_VAR 0 2
22985: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22986: LD_INT 0
22988: PPUSH
// end ;
22989: LD_VAR 0 6
22993: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22994: LD_INT 0
22996: PPUSH
22997: PPUSH
// if not vehicle or not factory then
22998: LD_VAR 0 1
23002: NOT
23003: PUSH
23004: LD_VAR 0 2
23008: NOT
23009: OR
23010: IFFALSE 23014
// exit ;
23012: GO 23245
// if factoryWaypoints >= factory then
23014: LD_EXP 77
23018: PUSH
23019: LD_VAR 0 2
23023: GREATEREQUAL
23024: IFFALSE 23245
// if factoryWaypoints [ factory ] then
23026: LD_EXP 77
23030: PUSH
23031: LD_VAR 0 2
23035: ARRAY
23036: IFFALSE 23245
// begin if GetControl ( vehicle ) = control_manual then
23038: LD_VAR 0 1
23042: PPUSH
23043: CALL_OW 263
23047: PUSH
23048: LD_INT 1
23050: EQUAL
23051: IFFALSE 23132
// begin driver := IsDrivenBy ( vehicle ) ;
23053: LD_ADDR_VAR 0 4
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 311
23067: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23068: LD_VAR 0 4
23072: PPUSH
23073: LD_EXP 77
23077: PUSH
23078: LD_VAR 0 2
23082: ARRAY
23083: PUSH
23084: LD_INT 3
23086: ARRAY
23087: PPUSH
23088: LD_EXP 77
23092: PUSH
23093: LD_VAR 0 2
23097: ARRAY
23098: PUSH
23099: LD_INT 4
23101: ARRAY
23102: PPUSH
23103: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23107: LD_VAR 0 4
23111: PPUSH
23112: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23116: LD_VAR 0 4
23120: PPUSH
23121: LD_VAR 0 2
23125: PPUSH
23126: CALL_OW 180
// end else
23130: GO 23245
// if GetControl ( vehicle ) = control_remote then
23132: LD_VAR 0 1
23136: PPUSH
23137: CALL_OW 263
23141: PUSH
23142: LD_INT 2
23144: EQUAL
23145: IFFALSE 23206
// begin wait ( 0 0$2 ) ;
23147: LD_INT 70
23149: PPUSH
23150: CALL_OW 67
// if Connect ( vehicle ) then
23154: LD_VAR 0 1
23158: PPUSH
23159: CALL 36076 0 1
23163: IFFALSE 23204
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23165: LD_VAR 0 1
23169: PPUSH
23170: LD_EXP 77
23174: PUSH
23175: LD_VAR 0 2
23179: ARRAY
23180: PUSH
23181: LD_INT 3
23183: ARRAY
23184: PPUSH
23185: LD_EXP 77
23189: PUSH
23190: LD_VAR 0 2
23194: ARRAY
23195: PUSH
23196: LD_INT 4
23198: ARRAY
23199: PPUSH
23200: CALL_OW 171
// end else
23204: GO 23245
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23206: LD_VAR 0 1
23210: PPUSH
23211: LD_EXP 77
23215: PUSH
23216: LD_VAR 0 2
23220: ARRAY
23221: PUSH
23222: LD_INT 3
23224: ARRAY
23225: PPUSH
23226: LD_EXP 77
23230: PUSH
23231: LD_VAR 0 2
23235: ARRAY
23236: PUSH
23237: LD_INT 4
23239: ARRAY
23240: PPUSH
23241: CALL_OW 171
// end ; end ;
23245: LD_VAR 0 3
23249: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23250: LD_INT 0
23252: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23253: LD_VAR 0 1
23257: PUSH
23258: LD_INT 250
23260: EQUAL
23261: PUSH
23262: LD_VAR 0 2
23266: PPUSH
23267: CALL_OW 264
23271: PUSH
23272: LD_INT 81
23274: EQUAL
23275: AND
23276: IFFALSE 23297
// MinerPlaceMine ( unit , x , y ) ;
23278: LD_VAR 0 2
23282: PPUSH
23283: LD_VAR 0 4
23287: PPUSH
23288: LD_VAR 0 5
23292: PPUSH
23293: CALL 26287 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23297: LD_VAR 0 1
23301: PUSH
23302: LD_INT 251
23304: EQUAL
23305: PUSH
23306: LD_VAR 0 2
23310: PPUSH
23311: CALL_OW 264
23315: PUSH
23316: LD_INT 81
23318: EQUAL
23319: AND
23320: IFFALSE 23341
// MinerDetonateMine ( unit , x , y ) ;
23322: LD_VAR 0 2
23326: PPUSH
23327: LD_VAR 0 4
23331: PPUSH
23332: LD_VAR 0 5
23336: PPUSH
23337: CALL 26562 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23341: LD_VAR 0 1
23345: PUSH
23346: LD_INT 252
23348: EQUAL
23349: PUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: CALL_OW 264
23359: PUSH
23360: LD_INT 81
23362: EQUAL
23363: AND
23364: IFFALSE 23385
// MinerCreateMinefield ( unit , x , y ) ;
23366: LD_VAR 0 2
23370: PPUSH
23371: LD_VAR 0 4
23375: PPUSH
23376: LD_VAR 0 5
23380: PPUSH
23381: CALL 26979 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23385: LD_VAR 0 1
23389: PUSH
23390: LD_INT 253
23392: EQUAL
23393: PUSH
23394: LD_VAR 0 2
23398: PPUSH
23399: CALL_OW 257
23403: PUSH
23404: LD_INT 5
23406: EQUAL
23407: AND
23408: IFFALSE 23429
// ComBinocular ( unit , x , y ) ;
23410: LD_VAR 0 2
23414: PPUSH
23415: LD_VAR 0 4
23419: PPUSH
23420: LD_VAR 0 5
23424: PPUSH
23425: CALL 27348 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23429: LD_VAR 0 1
23433: PUSH
23434: LD_INT 254
23436: EQUAL
23437: PUSH
23438: LD_VAR 0 2
23442: PPUSH
23443: CALL_OW 264
23447: PUSH
23448: LD_INT 99
23450: EQUAL
23451: AND
23452: PUSH
23453: LD_VAR 0 3
23457: PPUSH
23458: CALL_OW 263
23462: PUSH
23463: LD_INT 3
23465: EQUAL
23466: AND
23467: IFFALSE 23483
// HackDestroyVehicle ( unit , selectedUnit ) ;
23469: LD_VAR 0 2
23473: PPUSH
23474: LD_VAR 0 3
23478: PPUSH
23479: CALL 25651 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23483: LD_VAR 0 1
23487: PUSH
23488: LD_INT 255
23490: EQUAL
23491: PUSH
23492: LD_VAR 0 2
23496: PPUSH
23497: CALL_OW 264
23501: PUSH
23502: LD_INT 14
23504: PUSH
23505: LD_INT 53
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: IN
23512: AND
23513: PUSH
23514: LD_VAR 0 4
23518: PPUSH
23519: LD_VAR 0 5
23523: PPUSH
23524: CALL_OW 488
23528: AND
23529: IFFALSE 23553
// CutTreeXYR ( unit , x , y , 12 ) ;
23531: LD_VAR 0 2
23535: PPUSH
23536: LD_VAR 0 4
23540: PPUSH
23541: LD_VAR 0 5
23545: PPUSH
23546: LD_INT 12
23548: PPUSH
23549: CALL 23648 0 4
// if cmd = 256 then
23553: LD_VAR 0 1
23557: PUSH
23558: LD_INT 256
23560: EQUAL
23561: IFFALSE 23582
// SetFactoryWaypoint ( unit , x , y ) ;
23563: LD_VAR 0 2
23567: PPUSH
23568: LD_VAR 0 4
23572: PPUSH
23573: LD_VAR 0 5
23577: PPUSH
23578: CALL 21563 0 3
// if cmd = 257 then
23582: LD_VAR 0 1
23586: PUSH
23587: LD_INT 257
23589: EQUAL
23590: IFFALSE 23611
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23592: LD_VAR 0 2
23596: PPUSH
23597: LD_VAR 0 4
23601: PPUSH
23602: LD_VAR 0 5
23606: PPUSH
23607: CALL 21925 0 3
// if cmd = 258 then
23611: LD_VAR 0 1
23615: PUSH
23616: LD_INT 258
23618: EQUAL
23619: IFFALSE 23643
// BurnTreeXYR ( unit , x , y , 8 ) ;
23621: LD_VAR 0 2
23625: PPUSH
23626: LD_VAR 0 4
23630: PPUSH
23631: LD_VAR 0 5
23635: PPUSH
23636: LD_INT 8
23638: PPUSH
23639: CALL 24042 0 4
// end ;
23643: LD_VAR 0 6
23647: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23648: LD_INT 0
23650: PPUSH
23651: PPUSH
23652: PPUSH
23653: PPUSH
23654: PPUSH
23655: PPUSH
23656: PPUSH
23657: PPUSH
23658: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23659: LD_VAR 0 1
23663: PPUSH
23664: CALL_OW 302
23668: NOT
23669: PUSH
23670: LD_VAR 0 2
23674: PPUSH
23675: LD_VAR 0 3
23679: PPUSH
23680: CALL_OW 488
23684: NOT
23685: OR
23686: PUSH
23687: LD_VAR 0 4
23691: NOT
23692: OR
23693: IFFALSE 23697
// exit ;
23695: GO 24037
// list := [ ] ;
23697: LD_ADDR_VAR 0 13
23701: PUSH
23702: EMPTY
23703: ST_TO_ADDR
// if x - r < 0 then
23704: LD_VAR 0 2
23708: PUSH
23709: LD_VAR 0 4
23713: MINUS
23714: PUSH
23715: LD_INT 0
23717: LESS
23718: IFFALSE 23730
// min_x := 0 else
23720: LD_ADDR_VAR 0 7
23724: PUSH
23725: LD_INT 0
23727: ST_TO_ADDR
23728: GO 23746
// min_x := x - r ;
23730: LD_ADDR_VAR 0 7
23734: PUSH
23735: LD_VAR 0 2
23739: PUSH
23740: LD_VAR 0 4
23744: MINUS
23745: ST_TO_ADDR
// if y - r < 0 then
23746: LD_VAR 0 3
23750: PUSH
23751: LD_VAR 0 4
23755: MINUS
23756: PUSH
23757: LD_INT 0
23759: LESS
23760: IFFALSE 23772
// min_y := 0 else
23762: LD_ADDR_VAR 0 8
23766: PUSH
23767: LD_INT 0
23769: ST_TO_ADDR
23770: GO 23788
// min_y := y - r ;
23772: LD_ADDR_VAR 0 8
23776: PUSH
23777: LD_VAR 0 3
23781: PUSH
23782: LD_VAR 0 4
23786: MINUS
23787: ST_TO_ADDR
// max_x := x + r ;
23788: LD_ADDR_VAR 0 9
23792: PUSH
23793: LD_VAR 0 2
23797: PUSH
23798: LD_VAR 0 4
23802: PLUS
23803: ST_TO_ADDR
// max_y := y + r ;
23804: LD_ADDR_VAR 0 10
23808: PUSH
23809: LD_VAR 0 3
23813: PUSH
23814: LD_VAR 0 4
23818: PLUS
23819: ST_TO_ADDR
// for _x = min_x to max_x do
23820: LD_ADDR_VAR 0 11
23824: PUSH
23825: DOUBLE
23826: LD_VAR 0 7
23830: DEC
23831: ST_TO_ADDR
23832: LD_VAR 0 9
23836: PUSH
23837: FOR_TO
23838: IFFALSE 23955
// for _y = min_y to max_y do
23840: LD_ADDR_VAR 0 12
23844: PUSH
23845: DOUBLE
23846: LD_VAR 0 8
23850: DEC
23851: ST_TO_ADDR
23852: LD_VAR 0 10
23856: PUSH
23857: FOR_TO
23858: IFFALSE 23951
// begin if not ValidHex ( _x , _y ) then
23860: LD_VAR 0 11
23864: PPUSH
23865: LD_VAR 0 12
23869: PPUSH
23870: CALL_OW 488
23874: NOT
23875: IFFALSE 23879
// continue ;
23877: GO 23857
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23879: LD_VAR 0 11
23883: PPUSH
23884: LD_VAR 0 12
23888: PPUSH
23889: CALL_OW 351
23893: PUSH
23894: LD_VAR 0 11
23898: PPUSH
23899: LD_VAR 0 12
23903: PPUSH
23904: CALL_OW 554
23908: AND
23909: IFFALSE 23949
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23911: LD_ADDR_VAR 0 13
23915: PUSH
23916: LD_VAR 0 13
23920: PPUSH
23921: LD_VAR 0 13
23925: PUSH
23926: LD_INT 1
23928: PLUS
23929: PPUSH
23930: LD_VAR 0 11
23934: PUSH
23935: LD_VAR 0 12
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PPUSH
23944: CALL_OW 2
23948: ST_TO_ADDR
// end ;
23949: GO 23857
23951: POP
23952: POP
23953: GO 23837
23955: POP
23956: POP
// if not list then
23957: LD_VAR 0 13
23961: NOT
23962: IFFALSE 23966
// exit ;
23964: GO 24037
// for i in list do
23966: LD_ADDR_VAR 0 6
23970: PUSH
23971: LD_VAR 0 13
23975: PUSH
23976: FOR_IN
23977: IFFALSE 24035
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23979: LD_VAR 0 1
23983: PPUSH
23984: LD_STRING M
23986: PUSH
23987: LD_VAR 0 6
23991: PUSH
23992: LD_INT 1
23994: ARRAY
23995: PUSH
23996: LD_VAR 0 6
24000: PUSH
24001: LD_INT 2
24003: ARRAY
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: PUSH
24026: EMPTY
24027: LIST
24028: PPUSH
24029: CALL_OW 447
24033: GO 23976
24035: POP
24036: POP
// end ;
24037: LD_VAR 0 5
24041: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24042: LD_INT 0
24044: PPUSH
24045: PPUSH
24046: PPUSH
24047: PPUSH
24048: PPUSH
24049: PPUSH
24050: PPUSH
24051: PPUSH
24052: PPUSH
24053: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24054: LD_VAR 0 1
24058: PPUSH
24059: CALL_OW 302
24063: NOT
24064: PUSH
24065: LD_VAR 0 2
24069: PPUSH
24070: LD_VAR 0 3
24074: PPUSH
24075: CALL_OW 488
24079: NOT
24080: OR
24081: PUSH
24082: LD_VAR 0 4
24086: NOT
24087: OR
24088: IFFALSE 24092
// exit ;
24090: GO 24605
// list := [ ] ;
24092: LD_ADDR_VAR 0 13
24096: PUSH
24097: EMPTY
24098: ST_TO_ADDR
// if x - r < 0 then
24099: LD_VAR 0 2
24103: PUSH
24104: LD_VAR 0 4
24108: MINUS
24109: PUSH
24110: LD_INT 0
24112: LESS
24113: IFFALSE 24125
// min_x := 0 else
24115: LD_ADDR_VAR 0 7
24119: PUSH
24120: LD_INT 0
24122: ST_TO_ADDR
24123: GO 24141
// min_x := x - r ;
24125: LD_ADDR_VAR 0 7
24129: PUSH
24130: LD_VAR 0 2
24134: PUSH
24135: LD_VAR 0 4
24139: MINUS
24140: ST_TO_ADDR
// if y - r < 0 then
24141: LD_VAR 0 3
24145: PUSH
24146: LD_VAR 0 4
24150: MINUS
24151: PUSH
24152: LD_INT 0
24154: LESS
24155: IFFALSE 24167
// min_y := 0 else
24157: LD_ADDR_VAR 0 8
24161: PUSH
24162: LD_INT 0
24164: ST_TO_ADDR
24165: GO 24183
// min_y := y - r ;
24167: LD_ADDR_VAR 0 8
24171: PUSH
24172: LD_VAR 0 3
24176: PUSH
24177: LD_VAR 0 4
24181: MINUS
24182: ST_TO_ADDR
// max_x := x + r ;
24183: LD_ADDR_VAR 0 9
24187: PUSH
24188: LD_VAR 0 2
24192: PUSH
24193: LD_VAR 0 4
24197: PLUS
24198: ST_TO_ADDR
// max_y := y + r ;
24199: LD_ADDR_VAR 0 10
24203: PUSH
24204: LD_VAR 0 3
24208: PUSH
24209: LD_VAR 0 4
24213: PLUS
24214: ST_TO_ADDR
// for _x = min_x to max_x do
24215: LD_ADDR_VAR 0 11
24219: PUSH
24220: DOUBLE
24221: LD_VAR 0 7
24225: DEC
24226: ST_TO_ADDR
24227: LD_VAR 0 9
24231: PUSH
24232: FOR_TO
24233: IFFALSE 24350
// for _y = min_y to max_y do
24235: LD_ADDR_VAR 0 12
24239: PUSH
24240: DOUBLE
24241: LD_VAR 0 8
24245: DEC
24246: ST_TO_ADDR
24247: LD_VAR 0 10
24251: PUSH
24252: FOR_TO
24253: IFFALSE 24346
// begin if not ValidHex ( _x , _y ) then
24255: LD_VAR 0 11
24259: PPUSH
24260: LD_VAR 0 12
24264: PPUSH
24265: CALL_OW 488
24269: NOT
24270: IFFALSE 24274
// continue ;
24272: GO 24252
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24274: LD_VAR 0 11
24278: PPUSH
24279: LD_VAR 0 12
24283: PPUSH
24284: CALL_OW 351
24288: PUSH
24289: LD_VAR 0 11
24293: PPUSH
24294: LD_VAR 0 12
24298: PPUSH
24299: CALL_OW 554
24303: AND
24304: IFFALSE 24344
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24306: LD_ADDR_VAR 0 13
24310: PUSH
24311: LD_VAR 0 13
24315: PPUSH
24316: LD_VAR 0 13
24320: PUSH
24321: LD_INT 1
24323: PLUS
24324: PPUSH
24325: LD_VAR 0 11
24329: PUSH
24330: LD_VAR 0 12
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PPUSH
24339: CALL_OW 2
24343: ST_TO_ADDR
// end ;
24344: GO 24252
24346: POP
24347: POP
24348: GO 24232
24350: POP
24351: POP
// if not list then
24352: LD_VAR 0 13
24356: NOT
24357: IFFALSE 24361
// exit ;
24359: GO 24605
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24361: LD_ADDR_VAR 0 13
24365: PUSH
24366: LD_VAR 0 1
24370: PPUSH
24371: LD_VAR 0 13
24375: PPUSH
24376: LD_INT 1
24378: PPUSH
24379: LD_INT 1
24381: PPUSH
24382: CALL 33218 0 4
24386: ST_TO_ADDR
// ComStop ( flame ) ;
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 141
// for i in list do
24396: LD_ADDR_VAR 0 6
24400: PUSH
24401: LD_VAR 0 13
24405: PUSH
24406: FOR_IN
24407: IFFALSE 24438
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24409: LD_VAR 0 1
24413: PPUSH
24414: LD_VAR 0 6
24418: PUSH
24419: LD_INT 1
24421: ARRAY
24422: PPUSH
24423: LD_VAR 0 6
24427: PUSH
24428: LD_INT 2
24430: ARRAY
24431: PPUSH
24432: CALL_OW 176
24436: GO 24406
24438: POP
24439: POP
// repeat wait ( 0 0$1 ) ;
24440: LD_INT 35
24442: PPUSH
24443: CALL_OW 67
// task := GetTaskList ( flame ) ;
24447: LD_ADDR_VAR 0 14
24451: PUSH
24452: LD_VAR 0 1
24456: PPUSH
24457: CALL_OW 437
24461: ST_TO_ADDR
// if not task then
24462: LD_VAR 0 14
24466: NOT
24467: IFFALSE 24471
// exit ;
24469: GO 24605
// if task [ 1 ] [ 1 ] <> | then
24471: LD_VAR 0 14
24475: PUSH
24476: LD_INT 1
24478: ARRAY
24479: PUSH
24480: LD_INT 1
24482: ARRAY
24483: PUSH
24484: LD_STRING |
24486: NONEQUAL
24487: IFFALSE 24491
// exit ;
24489: GO 24605
// _x := task [ 1 ] [ 2 ] ;
24491: LD_ADDR_VAR 0 11
24495: PUSH
24496: LD_VAR 0 14
24500: PUSH
24501: LD_INT 1
24503: ARRAY
24504: PUSH
24505: LD_INT 2
24507: ARRAY
24508: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24509: LD_ADDR_VAR 0 12
24513: PUSH
24514: LD_VAR 0 14
24518: PUSH
24519: LD_INT 1
24521: ARRAY
24522: PUSH
24523: LD_INT 3
24525: ARRAY
24526: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24527: LD_VAR 0 11
24531: PPUSH
24532: LD_VAR 0 12
24536: PPUSH
24537: CALL_OW 351
24541: NOT
24542: PUSH
24543: LD_VAR 0 11
24547: PPUSH
24548: LD_VAR 0 12
24552: PPUSH
24553: CALL_OW 554
24557: NOT
24558: OR
24559: IFFALSE 24593
// begin task := Delete ( task , 1 ) ;
24561: LD_ADDR_VAR 0 14
24565: PUSH
24566: LD_VAR 0 14
24570: PPUSH
24571: LD_INT 1
24573: PPUSH
24574: CALL_OW 3
24578: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24579: LD_VAR 0 1
24583: PPUSH
24584: LD_VAR 0 14
24588: PPUSH
24589: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24593: LD_VAR 0 1
24597: PPUSH
24598: CALL_OW 314
24602: NOT
24603: IFFALSE 24440
// end ;
24605: LD_VAR 0 5
24609: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24610: LD_EXP 80
24614: NOT
24615: IFFALSE 24665
24617: GO 24619
24619: DISABLE
// begin initHack := true ;
24620: LD_ADDR_EXP 80
24624: PUSH
24625: LD_INT 1
24627: ST_TO_ADDR
// hackTanks := [ ] ;
24628: LD_ADDR_EXP 81
24632: PUSH
24633: EMPTY
24634: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24635: LD_ADDR_EXP 82
24639: PUSH
24640: EMPTY
24641: ST_TO_ADDR
// hackLimit := 3 ;
24642: LD_ADDR_EXP 83
24646: PUSH
24647: LD_INT 3
24649: ST_TO_ADDR
// hackDist := 12 ;
24650: LD_ADDR_EXP 84
24654: PUSH
24655: LD_INT 12
24657: ST_TO_ADDR
// hackCounter := [ ] ;
24658: LD_ADDR_EXP 85
24662: PUSH
24663: EMPTY
24664: ST_TO_ADDR
// end ;
24665: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24666: LD_EXP 80
24670: PUSH
24671: LD_INT 34
24673: PUSH
24674: LD_INT 99
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PPUSH
24681: CALL_OW 69
24685: AND
24686: IFFALSE 24939
24688: GO 24690
24690: DISABLE
24691: LD_INT 0
24693: PPUSH
24694: PPUSH
// begin enable ;
24695: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24696: LD_ADDR_VAR 0 1
24700: PUSH
24701: LD_INT 34
24703: PUSH
24704: LD_INT 99
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: PUSH
24716: FOR_IN
24717: IFFALSE 24937
// begin if not i in hackTanks then
24719: LD_VAR 0 1
24723: PUSH
24724: LD_EXP 81
24728: IN
24729: NOT
24730: IFFALSE 24813
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24732: LD_ADDR_EXP 81
24736: PUSH
24737: LD_EXP 81
24741: PPUSH
24742: LD_EXP 81
24746: PUSH
24747: LD_INT 1
24749: PLUS
24750: PPUSH
24751: LD_VAR 0 1
24755: PPUSH
24756: CALL_OW 1
24760: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24761: LD_ADDR_EXP 82
24765: PUSH
24766: LD_EXP 82
24770: PPUSH
24771: LD_EXP 82
24775: PUSH
24776: LD_INT 1
24778: PLUS
24779: PPUSH
24780: EMPTY
24781: PPUSH
24782: CALL_OW 1
24786: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24787: LD_ADDR_EXP 85
24791: PUSH
24792: LD_EXP 85
24796: PPUSH
24797: LD_EXP 85
24801: PUSH
24802: LD_INT 1
24804: PLUS
24805: PPUSH
24806: EMPTY
24807: PPUSH
24808: CALL_OW 1
24812: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24813: LD_VAR 0 1
24817: PPUSH
24818: CALL_OW 302
24822: NOT
24823: IFFALSE 24836
// begin HackUnlinkAll ( i ) ;
24825: LD_VAR 0 1
24829: PPUSH
24830: CALL 24942 0 1
// continue ;
24834: GO 24716
// end ; HackCheckCapturedStatus ( i ) ;
24836: LD_VAR 0 1
24840: PPUSH
24841: CALL 25385 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_INT 81
24852: PUSH
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL_OW 255
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 33
24869: PUSH
24870: LD_INT 3
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 91
24879: PUSH
24880: LD_VAR 0 1
24884: PUSH
24885: LD_EXP 84
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 50
24897: PUSH
24898: EMPTY
24899: LIST
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: PPUSH
24907: CALL_OW 69
24911: ST_TO_ADDR
// if not tmp then
24912: LD_VAR 0 2
24916: NOT
24917: IFFALSE 24921
// continue ;
24919: GO 24716
// HackLink ( i , tmp ) ;
24921: LD_VAR 0 1
24925: PPUSH
24926: LD_VAR 0 2
24930: PPUSH
24931: CALL 25078 0 2
// end ;
24935: GO 24716
24937: POP
24938: POP
// end ;
24939: PPOPN 2
24941: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24942: LD_INT 0
24944: PPUSH
24945: PPUSH
24946: PPUSH
// if not hack in hackTanks then
24947: LD_VAR 0 1
24951: PUSH
24952: LD_EXP 81
24956: IN
24957: NOT
24958: IFFALSE 24962
// exit ;
24960: GO 25073
// index := GetElementIndex ( hackTanks , hack ) ;
24962: LD_ADDR_VAR 0 4
24966: PUSH
24967: LD_EXP 81
24971: PPUSH
24972: LD_VAR 0 1
24976: PPUSH
24977: CALL 32515 0 2
24981: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24982: LD_EXP 82
24986: PUSH
24987: LD_VAR 0 4
24991: ARRAY
24992: IFFALSE 25073
// begin for i in hackTanksCaptured [ index ] do
24994: LD_ADDR_VAR 0 3
24998: PUSH
24999: LD_EXP 82
25003: PUSH
25004: LD_VAR 0 4
25008: ARRAY
25009: PUSH
25010: FOR_IN
25011: IFFALSE 25037
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25013: LD_VAR 0 3
25017: PUSH
25018: LD_INT 1
25020: ARRAY
25021: PPUSH
25022: LD_VAR 0 3
25026: PUSH
25027: LD_INT 2
25029: ARRAY
25030: PPUSH
25031: CALL_OW 235
25035: GO 25010
25037: POP
25038: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25039: LD_ADDR_EXP 82
25043: PUSH
25044: LD_EXP 82
25048: PPUSH
25049: LD_VAR 0 4
25053: PPUSH
25054: EMPTY
25055: PPUSH
25056: CALL_OW 1
25060: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25061: LD_VAR 0 1
25065: PPUSH
25066: LD_INT 0
25068: PPUSH
25069: CALL_OW 505
// end ; end ;
25073: LD_VAR 0 2
25077: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25078: LD_INT 0
25080: PPUSH
25081: PPUSH
25082: PPUSH
// if not hack in hackTanks or not vehicles then
25083: LD_VAR 0 1
25087: PUSH
25088: LD_EXP 81
25092: IN
25093: NOT
25094: PUSH
25095: LD_VAR 0 2
25099: NOT
25100: OR
25101: IFFALSE 25105
// exit ;
25103: GO 25380
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25105: LD_ADDR_VAR 0 2
25109: PUSH
25110: LD_VAR 0 1
25114: PPUSH
25115: LD_VAR 0 2
25119: PPUSH
25120: LD_INT 1
25122: PPUSH
25123: LD_INT 1
25125: PPUSH
25126: CALL 33165 0 4
25130: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25131: LD_ADDR_VAR 0 5
25135: PUSH
25136: LD_EXP 81
25140: PPUSH
25141: LD_VAR 0 1
25145: PPUSH
25146: CALL 32515 0 2
25150: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25151: LD_EXP 82
25155: PUSH
25156: LD_VAR 0 5
25160: ARRAY
25161: PUSH
25162: LD_EXP 83
25166: LESS
25167: IFFALSE 25356
// begin for i := 1 to vehicles do
25169: LD_ADDR_VAR 0 4
25173: PUSH
25174: DOUBLE
25175: LD_INT 1
25177: DEC
25178: ST_TO_ADDR
25179: LD_VAR 0 2
25183: PUSH
25184: FOR_TO
25185: IFFALSE 25354
// begin if hackTanksCaptured [ index ] = hackLimit then
25187: LD_EXP 82
25191: PUSH
25192: LD_VAR 0 5
25196: ARRAY
25197: PUSH
25198: LD_EXP 83
25202: EQUAL
25203: IFFALSE 25207
// break ;
25205: GO 25354
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25207: LD_ADDR_EXP 85
25211: PUSH
25212: LD_EXP 85
25216: PPUSH
25217: LD_VAR 0 5
25221: PPUSH
25222: LD_EXP 85
25226: PUSH
25227: LD_VAR 0 5
25231: ARRAY
25232: PUSH
25233: LD_INT 1
25235: PLUS
25236: PPUSH
25237: CALL_OW 1
25241: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25242: LD_ADDR_EXP 82
25246: PUSH
25247: LD_EXP 82
25251: PPUSH
25252: LD_VAR 0 5
25256: PUSH
25257: LD_EXP 82
25261: PUSH
25262: LD_VAR 0 5
25266: ARRAY
25267: PUSH
25268: LD_INT 1
25270: PLUS
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PPUSH
25276: LD_VAR 0 2
25280: PUSH
25281: LD_VAR 0 4
25285: ARRAY
25286: PUSH
25287: LD_VAR 0 2
25291: PUSH
25292: LD_VAR 0 4
25296: ARRAY
25297: PPUSH
25298: CALL_OW 255
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PPUSH
25307: CALL 32730 0 3
25311: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25312: LD_VAR 0 2
25316: PUSH
25317: LD_VAR 0 4
25321: ARRAY
25322: PPUSH
25323: LD_VAR 0 1
25327: PPUSH
25328: CALL_OW 255
25332: PPUSH
25333: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25337: LD_VAR 0 2
25341: PUSH
25342: LD_VAR 0 4
25346: ARRAY
25347: PPUSH
25348: CALL_OW 141
// end ;
25352: GO 25184
25354: POP
25355: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25356: LD_VAR 0 1
25360: PPUSH
25361: LD_EXP 82
25365: PUSH
25366: LD_VAR 0 5
25370: ARRAY
25371: PUSH
25372: LD_INT 0
25374: PLUS
25375: PPUSH
25376: CALL_OW 505
// end ;
25380: LD_VAR 0 3
25384: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25385: LD_INT 0
25387: PPUSH
25388: PPUSH
25389: PPUSH
25390: PPUSH
// if not hack in hackTanks then
25391: LD_VAR 0 1
25395: PUSH
25396: LD_EXP 81
25400: IN
25401: NOT
25402: IFFALSE 25406
// exit ;
25404: GO 25646
// index := GetElementIndex ( hackTanks , hack ) ;
25406: LD_ADDR_VAR 0 4
25410: PUSH
25411: LD_EXP 81
25415: PPUSH
25416: LD_VAR 0 1
25420: PPUSH
25421: CALL 32515 0 2
25425: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25426: LD_ADDR_VAR 0 3
25430: PUSH
25431: DOUBLE
25432: LD_EXP 82
25436: PUSH
25437: LD_VAR 0 4
25441: ARRAY
25442: INC
25443: ST_TO_ADDR
25444: LD_INT 1
25446: PUSH
25447: FOR_DOWNTO
25448: IFFALSE 25620
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25450: LD_ADDR_VAR 0 5
25454: PUSH
25455: LD_EXP 82
25459: PUSH
25460: LD_VAR 0 4
25464: ARRAY
25465: PUSH
25466: LD_VAR 0 3
25470: ARRAY
25471: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25472: LD_VAR 0 5
25476: PUSH
25477: LD_INT 1
25479: ARRAY
25480: PPUSH
25481: CALL_OW 302
25485: NOT
25486: PUSH
25487: LD_VAR 0 5
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: PPUSH
25496: CALL_OW 255
25500: PUSH
25501: LD_VAR 0 1
25505: PPUSH
25506: CALL_OW 255
25510: NONEQUAL
25511: OR
25512: IFFALSE 25618
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25514: LD_VAR 0 5
25518: PUSH
25519: LD_INT 1
25521: ARRAY
25522: PPUSH
25523: CALL_OW 305
25527: PUSH
25528: LD_VAR 0 5
25532: PUSH
25533: LD_INT 1
25535: ARRAY
25536: PPUSH
25537: CALL_OW 255
25541: PUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: CALL_OW 255
25551: EQUAL
25552: AND
25553: IFFALSE 25577
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25555: LD_VAR 0 5
25559: PUSH
25560: LD_INT 1
25562: ARRAY
25563: PPUSH
25564: LD_VAR 0 5
25568: PUSH
25569: LD_INT 2
25571: ARRAY
25572: PPUSH
25573: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25577: LD_ADDR_EXP 82
25581: PUSH
25582: LD_EXP 82
25586: PPUSH
25587: LD_VAR 0 4
25591: PPUSH
25592: LD_EXP 82
25596: PUSH
25597: LD_VAR 0 4
25601: ARRAY
25602: PPUSH
25603: LD_VAR 0 3
25607: PPUSH
25608: CALL_OW 3
25612: PPUSH
25613: CALL_OW 1
25617: ST_TO_ADDR
// end ; end ;
25618: GO 25447
25620: POP
25621: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25622: LD_VAR 0 1
25626: PPUSH
25627: LD_EXP 82
25631: PUSH
25632: LD_VAR 0 4
25636: ARRAY
25637: PUSH
25638: LD_INT 0
25640: PLUS
25641: PPUSH
25642: CALL_OW 505
// end ;
25646: LD_VAR 0 2
25650: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25651: LD_INT 0
25653: PPUSH
25654: PPUSH
25655: PPUSH
25656: PPUSH
// if not hack in hackTanks then
25657: LD_VAR 0 1
25661: PUSH
25662: LD_EXP 81
25666: IN
25667: NOT
25668: IFFALSE 25672
// exit ;
25670: GO 25757
// index := GetElementIndex ( hackTanks , hack ) ;
25672: LD_ADDR_VAR 0 5
25676: PUSH
25677: LD_EXP 81
25681: PPUSH
25682: LD_VAR 0 1
25686: PPUSH
25687: CALL 32515 0 2
25691: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25692: LD_ADDR_VAR 0 4
25696: PUSH
25697: DOUBLE
25698: LD_INT 1
25700: DEC
25701: ST_TO_ADDR
25702: LD_EXP 82
25706: PUSH
25707: LD_VAR 0 5
25711: ARRAY
25712: PUSH
25713: FOR_TO
25714: IFFALSE 25755
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25716: LD_EXP 82
25720: PUSH
25721: LD_VAR 0 5
25725: ARRAY
25726: PUSH
25727: LD_VAR 0 4
25731: ARRAY
25732: PUSH
25733: LD_INT 1
25735: ARRAY
25736: PUSH
25737: LD_VAR 0 2
25741: EQUAL
25742: IFFALSE 25753
// KillUnit ( vehicle ) ;
25744: LD_VAR 0 2
25748: PPUSH
25749: CALL_OW 66
25753: GO 25713
25755: POP
25756: POP
// end ;
25757: LD_VAR 0 3
25761: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25762: LD_EXP 86
25766: NOT
25767: IFFALSE 25802
25769: GO 25771
25771: DISABLE
// begin initMiner := true ;
25772: LD_ADDR_EXP 86
25776: PUSH
25777: LD_INT 1
25779: ST_TO_ADDR
// minersList := [ ] ;
25780: LD_ADDR_EXP 87
25784: PUSH
25785: EMPTY
25786: ST_TO_ADDR
// minerMinesList := [ ] ;
25787: LD_ADDR_EXP 88
25791: PUSH
25792: EMPTY
25793: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25794: LD_ADDR_EXP 89
25798: PUSH
25799: LD_INT 5
25801: ST_TO_ADDR
// end ;
25802: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25803: LD_EXP 86
25807: PUSH
25808: LD_INT 34
25810: PUSH
25811: LD_INT 81
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PPUSH
25818: CALL_OW 69
25822: AND
25823: IFFALSE 26284
25825: GO 25827
25827: DISABLE
25828: LD_INT 0
25830: PPUSH
25831: PPUSH
25832: PPUSH
25833: PPUSH
// begin enable ;
25834: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25835: LD_ADDR_VAR 0 1
25839: PUSH
25840: LD_INT 34
25842: PUSH
25843: LD_INT 81
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PPUSH
25850: CALL_OW 69
25854: PUSH
25855: FOR_IN
25856: IFFALSE 25928
// begin if not i in minersList then
25858: LD_VAR 0 1
25862: PUSH
25863: LD_EXP 87
25867: IN
25868: NOT
25869: IFFALSE 25926
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25871: LD_ADDR_EXP 87
25875: PUSH
25876: LD_EXP 87
25880: PPUSH
25881: LD_EXP 87
25885: PUSH
25886: LD_INT 1
25888: PLUS
25889: PPUSH
25890: LD_VAR 0 1
25894: PPUSH
25895: CALL_OW 1
25899: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25900: LD_ADDR_EXP 88
25904: PUSH
25905: LD_EXP 88
25909: PPUSH
25910: LD_EXP 88
25914: PUSH
25915: LD_INT 1
25917: PLUS
25918: PPUSH
25919: EMPTY
25920: PPUSH
25921: CALL_OW 1
25925: ST_TO_ADDR
// end end ;
25926: GO 25855
25928: POP
25929: POP
// for i := minerMinesList downto 1 do
25930: LD_ADDR_VAR 0 1
25934: PUSH
25935: DOUBLE
25936: LD_EXP 88
25940: INC
25941: ST_TO_ADDR
25942: LD_INT 1
25944: PUSH
25945: FOR_DOWNTO
25946: IFFALSE 26282
// begin if IsLive ( minersList [ i ] ) then
25948: LD_EXP 87
25952: PUSH
25953: LD_VAR 0 1
25957: ARRAY
25958: PPUSH
25959: CALL_OW 300
25963: IFFALSE 25991
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25965: LD_EXP 87
25969: PUSH
25970: LD_VAR 0 1
25974: ARRAY
25975: PPUSH
25976: LD_EXP 88
25980: PUSH
25981: LD_VAR 0 1
25985: ARRAY
25986: PPUSH
25987: CALL_OW 505
// if not minerMinesList [ i ] then
25991: LD_EXP 88
25995: PUSH
25996: LD_VAR 0 1
26000: ARRAY
26001: NOT
26002: IFFALSE 26006
// continue ;
26004: GO 25945
// for j := minerMinesList [ i ] downto 1 do
26006: LD_ADDR_VAR 0 2
26010: PUSH
26011: DOUBLE
26012: LD_EXP 88
26016: PUSH
26017: LD_VAR 0 1
26021: ARRAY
26022: INC
26023: ST_TO_ADDR
26024: LD_INT 1
26026: PUSH
26027: FOR_DOWNTO
26028: IFFALSE 26278
// begin side := GetSide ( minersList [ i ] ) ;
26030: LD_ADDR_VAR 0 3
26034: PUSH
26035: LD_EXP 87
26039: PUSH
26040: LD_VAR 0 1
26044: ARRAY
26045: PPUSH
26046: CALL_OW 255
26050: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26051: LD_ADDR_VAR 0 4
26055: PUSH
26056: LD_EXP 88
26060: PUSH
26061: LD_VAR 0 1
26065: ARRAY
26066: PUSH
26067: LD_VAR 0 2
26071: ARRAY
26072: PUSH
26073: LD_INT 1
26075: ARRAY
26076: PPUSH
26077: LD_EXP 88
26081: PUSH
26082: LD_VAR 0 1
26086: ARRAY
26087: PUSH
26088: LD_VAR 0 2
26092: ARRAY
26093: PUSH
26094: LD_INT 2
26096: ARRAY
26097: PPUSH
26098: CALL_OW 428
26102: ST_TO_ADDR
// if not tmp then
26103: LD_VAR 0 4
26107: NOT
26108: IFFALSE 26112
// continue ;
26110: GO 26027
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26112: LD_VAR 0 4
26116: PUSH
26117: LD_INT 81
26119: PUSH
26120: LD_VAR 0 3
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PPUSH
26129: CALL_OW 69
26133: IN
26134: PUSH
26135: LD_EXP 88
26139: PUSH
26140: LD_VAR 0 1
26144: ARRAY
26145: PUSH
26146: LD_VAR 0 2
26150: ARRAY
26151: PUSH
26152: LD_INT 1
26154: ARRAY
26155: PPUSH
26156: LD_EXP 88
26160: PUSH
26161: LD_VAR 0 1
26165: ARRAY
26166: PUSH
26167: LD_VAR 0 2
26171: ARRAY
26172: PUSH
26173: LD_INT 2
26175: ARRAY
26176: PPUSH
26177: CALL_OW 458
26181: AND
26182: IFFALSE 26276
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26184: LD_EXP 88
26188: PUSH
26189: LD_VAR 0 1
26193: ARRAY
26194: PUSH
26195: LD_VAR 0 2
26199: ARRAY
26200: PUSH
26201: LD_INT 1
26203: ARRAY
26204: PPUSH
26205: LD_EXP 88
26209: PUSH
26210: LD_VAR 0 1
26214: ARRAY
26215: PUSH
26216: LD_VAR 0 2
26220: ARRAY
26221: PUSH
26222: LD_INT 2
26224: ARRAY
26225: PPUSH
26226: LD_VAR 0 3
26230: PPUSH
26231: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26235: LD_ADDR_EXP 88
26239: PUSH
26240: LD_EXP 88
26244: PPUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: LD_EXP 88
26254: PUSH
26255: LD_VAR 0 1
26259: ARRAY
26260: PPUSH
26261: LD_VAR 0 2
26265: PPUSH
26266: CALL_OW 3
26270: PPUSH
26271: CALL_OW 1
26275: ST_TO_ADDR
// end ; end ;
26276: GO 26027
26278: POP
26279: POP
// end ;
26280: GO 25945
26282: POP
26283: POP
// end ;
26284: PPOPN 4
26286: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26287: LD_INT 0
26289: PPUSH
26290: PPUSH
// result := false ;
26291: LD_ADDR_VAR 0 4
26295: PUSH
26296: LD_INT 0
26298: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26299: LD_VAR 0 1
26303: PPUSH
26304: CALL_OW 264
26308: PUSH
26309: LD_INT 81
26311: EQUAL
26312: NOT
26313: IFFALSE 26317
// exit ;
26315: GO 26557
// index := GetElementIndex ( minersList , unit ) ;
26317: LD_ADDR_VAR 0 5
26321: PUSH
26322: LD_EXP 87
26326: PPUSH
26327: LD_VAR 0 1
26331: PPUSH
26332: CALL 32515 0 2
26336: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26337: LD_EXP 88
26341: PUSH
26342: LD_VAR 0 5
26346: ARRAY
26347: PUSH
26348: LD_EXP 89
26352: GREATEREQUAL
26353: IFFALSE 26357
// exit ;
26355: GO 26557
// ComMoveXY ( unit , x , y ) ;
26357: LD_VAR 0 1
26361: PPUSH
26362: LD_VAR 0 2
26366: PPUSH
26367: LD_VAR 0 3
26371: PPUSH
26372: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26376: LD_INT 35
26378: PPUSH
26379: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26383: LD_VAR 0 1
26387: PPUSH
26388: LD_VAR 0 2
26392: PPUSH
26393: LD_VAR 0 3
26397: PPUSH
26398: CALL 64256 0 3
26402: NOT
26403: PUSH
26404: LD_VAR 0 1
26408: PPUSH
26409: CALL_OW 314
26413: AND
26414: IFFALSE 26418
// exit ;
26416: GO 26557
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26418: LD_VAR 0 2
26422: PPUSH
26423: LD_VAR 0 3
26427: PPUSH
26428: CALL_OW 428
26432: PUSH
26433: LD_VAR 0 1
26437: EQUAL
26438: PUSH
26439: LD_VAR 0 1
26443: PPUSH
26444: CALL_OW 314
26448: NOT
26449: AND
26450: IFFALSE 26376
// PlaySoundXY ( x , y , PlantMine ) ;
26452: LD_VAR 0 2
26456: PPUSH
26457: LD_VAR 0 3
26461: PPUSH
26462: LD_STRING PlantMine
26464: PPUSH
26465: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26469: LD_VAR 0 2
26473: PPUSH
26474: LD_VAR 0 3
26478: PPUSH
26479: LD_VAR 0 1
26483: PPUSH
26484: CALL_OW 255
26488: PPUSH
26489: LD_INT 0
26491: PPUSH
26492: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26496: LD_ADDR_EXP 88
26500: PUSH
26501: LD_EXP 88
26505: PPUSH
26506: LD_VAR 0 5
26510: PUSH
26511: LD_EXP 88
26515: PUSH
26516: LD_VAR 0 5
26520: ARRAY
26521: PUSH
26522: LD_INT 1
26524: PLUS
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PPUSH
26530: LD_VAR 0 2
26534: PUSH
26535: LD_VAR 0 3
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PPUSH
26544: CALL 32730 0 3
26548: ST_TO_ADDR
// result := true ;
26549: LD_ADDR_VAR 0 4
26553: PUSH
26554: LD_INT 1
26556: ST_TO_ADDR
// end ;
26557: LD_VAR 0 4
26561: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26562: LD_INT 0
26564: PPUSH
26565: PPUSH
26566: PPUSH
// if not unit in minersList then
26567: LD_VAR 0 1
26571: PUSH
26572: LD_EXP 87
26576: IN
26577: NOT
26578: IFFALSE 26582
// exit ;
26580: GO 26974
// index := GetElementIndex ( minersList , unit ) ;
26582: LD_ADDR_VAR 0 6
26586: PUSH
26587: LD_EXP 87
26591: PPUSH
26592: LD_VAR 0 1
26596: PPUSH
26597: CALL 32515 0 2
26601: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26602: LD_ADDR_VAR 0 5
26606: PUSH
26607: DOUBLE
26608: LD_EXP 88
26612: PUSH
26613: LD_VAR 0 6
26617: ARRAY
26618: INC
26619: ST_TO_ADDR
26620: LD_INT 1
26622: PUSH
26623: FOR_DOWNTO
26624: IFFALSE 26785
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26626: LD_EXP 88
26630: PUSH
26631: LD_VAR 0 6
26635: ARRAY
26636: PUSH
26637: LD_VAR 0 5
26641: ARRAY
26642: PUSH
26643: LD_INT 1
26645: ARRAY
26646: PUSH
26647: LD_VAR 0 2
26651: EQUAL
26652: PUSH
26653: LD_EXP 88
26657: PUSH
26658: LD_VAR 0 6
26662: ARRAY
26663: PUSH
26664: LD_VAR 0 5
26668: ARRAY
26669: PUSH
26670: LD_INT 2
26672: ARRAY
26673: PUSH
26674: LD_VAR 0 3
26678: EQUAL
26679: AND
26680: IFFALSE 26783
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26682: LD_EXP 88
26686: PUSH
26687: LD_VAR 0 6
26691: ARRAY
26692: PUSH
26693: LD_VAR 0 5
26697: ARRAY
26698: PUSH
26699: LD_INT 1
26701: ARRAY
26702: PPUSH
26703: LD_EXP 88
26707: PUSH
26708: LD_VAR 0 6
26712: ARRAY
26713: PUSH
26714: LD_VAR 0 5
26718: ARRAY
26719: PUSH
26720: LD_INT 2
26722: ARRAY
26723: PPUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 255
26733: PPUSH
26734: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26738: LD_ADDR_EXP 88
26742: PUSH
26743: LD_EXP 88
26747: PPUSH
26748: LD_VAR 0 6
26752: PPUSH
26753: LD_EXP 88
26757: PUSH
26758: LD_VAR 0 6
26762: ARRAY
26763: PPUSH
26764: LD_VAR 0 5
26768: PPUSH
26769: CALL_OW 3
26773: PPUSH
26774: CALL_OW 1
26778: ST_TO_ADDR
// exit ;
26779: POP
26780: POP
26781: GO 26974
// end ; end ;
26783: GO 26623
26785: POP
26786: POP
// for i := minerMinesList [ index ] downto 1 do
26787: LD_ADDR_VAR 0 5
26791: PUSH
26792: DOUBLE
26793: LD_EXP 88
26797: PUSH
26798: LD_VAR 0 6
26802: ARRAY
26803: INC
26804: ST_TO_ADDR
26805: LD_INT 1
26807: PUSH
26808: FOR_DOWNTO
26809: IFFALSE 26972
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26811: LD_EXP 88
26815: PUSH
26816: LD_VAR 0 6
26820: ARRAY
26821: PUSH
26822: LD_VAR 0 5
26826: ARRAY
26827: PUSH
26828: LD_INT 1
26830: ARRAY
26831: PPUSH
26832: LD_EXP 88
26836: PUSH
26837: LD_VAR 0 6
26841: ARRAY
26842: PUSH
26843: LD_VAR 0 5
26847: ARRAY
26848: PUSH
26849: LD_INT 2
26851: ARRAY
26852: PPUSH
26853: LD_VAR 0 2
26857: PPUSH
26858: LD_VAR 0 3
26862: PPUSH
26863: CALL_OW 298
26867: PUSH
26868: LD_INT 6
26870: LESS
26871: IFFALSE 26970
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26873: LD_EXP 88
26877: PUSH
26878: LD_VAR 0 6
26882: ARRAY
26883: PUSH
26884: LD_VAR 0 5
26888: ARRAY
26889: PUSH
26890: LD_INT 1
26892: ARRAY
26893: PPUSH
26894: LD_EXP 88
26898: PUSH
26899: LD_VAR 0 6
26903: ARRAY
26904: PUSH
26905: LD_VAR 0 5
26909: ARRAY
26910: PUSH
26911: LD_INT 2
26913: ARRAY
26914: PPUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 255
26924: PPUSH
26925: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26929: LD_ADDR_EXP 88
26933: PUSH
26934: LD_EXP 88
26938: PPUSH
26939: LD_VAR 0 6
26943: PPUSH
26944: LD_EXP 88
26948: PUSH
26949: LD_VAR 0 6
26953: ARRAY
26954: PPUSH
26955: LD_VAR 0 5
26959: PPUSH
26960: CALL_OW 3
26964: PPUSH
26965: CALL_OW 1
26969: ST_TO_ADDR
// end ; end ;
26970: GO 26808
26972: POP
26973: POP
// end ;
26974: LD_VAR 0 4
26978: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26979: LD_INT 0
26981: PPUSH
26982: PPUSH
26983: PPUSH
26984: PPUSH
26985: PPUSH
26986: PPUSH
26987: PPUSH
26988: PPUSH
26989: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26990: LD_VAR 0 1
26994: PPUSH
26995: CALL_OW 264
26999: PUSH
27000: LD_INT 81
27002: EQUAL
27003: NOT
27004: PUSH
27005: LD_VAR 0 1
27009: PUSH
27010: LD_EXP 87
27014: IN
27015: NOT
27016: OR
27017: IFFALSE 27021
// exit ;
27019: GO 27343
// index := GetElementIndex ( minersList , unit ) ;
27021: LD_ADDR_VAR 0 6
27025: PUSH
27026: LD_EXP 87
27030: PPUSH
27031: LD_VAR 0 1
27035: PPUSH
27036: CALL 32515 0 2
27040: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27041: LD_ADDR_VAR 0 8
27045: PUSH
27046: LD_EXP 89
27050: PUSH
27051: LD_EXP 88
27055: PUSH
27056: LD_VAR 0 6
27060: ARRAY
27061: MINUS
27062: ST_TO_ADDR
// if not minesFreeAmount then
27063: LD_VAR 0 8
27067: NOT
27068: IFFALSE 27072
// exit ;
27070: GO 27343
// tmp := [ ] ;
27072: LD_ADDR_VAR 0 7
27076: PUSH
27077: EMPTY
27078: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27079: LD_ADDR_VAR 0 5
27083: PUSH
27084: DOUBLE
27085: LD_INT 1
27087: DEC
27088: ST_TO_ADDR
27089: LD_VAR 0 8
27093: PUSH
27094: FOR_TO
27095: IFFALSE 27290
// begin _d := rand ( 0 , 5 ) ;
27097: LD_ADDR_VAR 0 11
27101: PUSH
27102: LD_INT 0
27104: PPUSH
27105: LD_INT 5
27107: PPUSH
27108: CALL_OW 12
27112: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27113: LD_ADDR_VAR 0 12
27117: PUSH
27118: LD_INT 2
27120: PPUSH
27121: LD_INT 6
27123: PPUSH
27124: CALL_OW 12
27128: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27129: LD_ADDR_VAR 0 9
27133: PUSH
27134: LD_VAR 0 2
27138: PPUSH
27139: LD_VAR 0 11
27143: PPUSH
27144: LD_VAR 0 12
27148: PPUSH
27149: CALL_OW 272
27153: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27154: LD_ADDR_VAR 0 10
27158: PUSH
27159: LD_VAR 0 3
27163: PPUSH
27164: LD_VAR 0 11
27168: PPUSH
27169: LD_VAR 0 12
27173: PPUSH
27174: CALL_OW 273
27178: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27179: LD_VAR 0 9
27183: PPUSH
27184: LD_VAR 0 10
27188: PPUSH
27189: CALL_OW 488
27193: PUSH
27194: LD_VAR 0 9
27198: PUSH
27199: LD_VAR 0 10
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_VAR 0 7
27212: IN
27213: NOT
27214: AND
27215: PUSH
27216: LD_VAR 0 9
27220: PPUSH
27221: LD_VAR 0 10
27225: PPUSH
27226: CALL_OW 458
27230: NOT
27231: AND
27232: IFFALSE 27274
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27234: LD_ADDR_VAR 0 7
27238: PUSH
27239: LD_VAR 0 7
27243: PPUSH
27244: LD_VAR 0 7
27248: PUSH
27249: LD_INT 1
27251: PLUS
27252: PPUSH
27253: LD_VAR 0 9
27257: PUSH
27258: LD_VAR 0 10
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PPUSH
27267: CALL_OW 1
27271: ST_TO_ADDR
27272: GO 27288
// i := i - 1 ;
27274: LD_ADDR_VAR 0 5
27278: PUSH
27279: LD_VAR 0 5
27283: PUSH
27284: LD_INT 1
27286: MINUS
27287: ST_TO_ADDR
// end ;
27288: GO 27094
27290: POP
27291: POP
// for i in tmp do
27292: LD_ADDR_VAR 0 5
27296: PUSH
27297: LD_VAR 0 7
27301: PUSH
27302: FOR_IN
27303: IFFALSE 27341
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27305: LD_VAR 0 1
27309: PPUSH
27310: LD_VAR 0 5
27314: PUSH
27315: LD_INT 1
27317: ARRAY
27318: PPUSH
27319: LD_VAR 0 5
27323: PUSH
27324: LD_INT 2
27326: ARRAY
27327: PPUSH
27328: CALL 26287 0 3
27332: NOT
27333: IFFALSE 27339
// exit ;
27335: POP
27336: POP
27337: GO 27343
27339: GO 27302
27341: POP
27342: POP
// end ;
27343: LD_VAR 0 4
27347: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27348: LD_INT 0
27350: PPUSH
27351: PPUSH
27352: PPUSH
27353: PPUSH
27354: PPUSH
27355: PPUSH
27356: PPUSH
// if not GetClass ( unit ) = class_sniper then
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 257
27366: PUSH
27367: LD_INT 5
27369: EQUAL
27370: NOT
27371: IFFALSE 27375
// exit ;
27373: GO 27763
// dist := 8 ;
27375: LD_ADDR_VAR 0 5
27379: PUSH
27380: LD_INT 8
27382: ST_TO_ADDR
// viewRange := 12 ;
27383: LD_ADDR_VAR 0 7
27387: PUSH
27388: LD_INT 12
27390: ST_TO_ADDR
// side := GetSide ( unit ) ;
27391: LD_ADDR_VAR 0 6
27395: PUSH
27396: LD_VAR 0 1
27400: PPUSH
27401: CALL_OW 255
27405: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27406: LD_INT 61
27408: PPUSH
27409: LD_VAR 0 6
27413: PPUSH
27414: CALL_OW 321
27418: PUSH
27419: LD_INT 2
27421: EQUAL
27422: IFFALSE 27432
// viewRange := 16 ;
27424: LD_ADDR_VAR 0 7
27428: PUSH
27429: LD_INT 16
27431: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27432: LD_VAR 0 1
27436: PPUSH
27437: LD_VAR 0 2
27441: PPUSH
27442: LD_VAR 0 3
27446: PPUSH
27447: CALL_OW 297
27451: PUSH
27452: LD_VAR 0 5
27456: GREATER
27457: IFFALSE 27536
// begin ComMoveXY ( unit , x , y ) ;
27459: LD_VAR 0 1
27463: PPUSH
27464: LD_VAR 0 2
27468: PPUSH
27469: LD_VAR 0 3
27473: PPUSH
27474: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27478: LD_INT 35
27480: PPUSH
27481: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27485: LD_VAR 0 1
27489: PPUSH
27490: LD_VAR 0 2
27494: PPUSH
27495: LD_VAR 0 3
27499: PPUSH
27500: CALL 64256 0 3
27504: NOT
27505: IFFALSE 27509
// exit ;
27507: GO 27763
// until GetDistUnitXY ( unit , x , y ) < dist ;
27509: LD_VAR 0 1
27513: PPUSH
27514: LD_VAR 0 2
27518: PPUSH
27519: LD_VAR 0 3
27523: PPUSH
27524: CALL_OW 297
27528: PUSH
27529: LD_VAR 0 5
27533: LESS
27534: IFFALSE 27478
// end ; ComTurnXY ( unit , x , y ) ;
27536: LD_VAR 0 1
27540: PPUSH
27541: LD_VAR 0 2
27545: PPUSH
27546: LD_VAR 0 3
27550: PPUSH
27551: CALL_OW 118
// wait ( 5 ) ;
27555: LD_INT 5
27557: PPUSH
27558: CALL_OW 67
// _d := GetDir ( unit ) ;
27562: LD_ADDR_VAR 0 10
27566: PUSH
27567: LD_VAR 0 1
27571: PPUSH
27572: CALL_OW 254
27576: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27577: LD_ADDR_VAR 0 8
27581: PUSH
27582: LD_VAR 0 1
27586: PPUSH
27587: CALL_OW 250
27591: PPUSH
27592: LD_VAR 0 10
27596: PPUSH
27597: LD_VAR 0 5
27601: PPUSH
27602: CALL_OW 272
27606: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27607: LD_ADDR_VAR 0 9
27611: PUSH
27612: LD_VAR 0 1
27616: PPUSH
27617: CALL_OW 251
27621: PPUSH
27622: LD_VAR 0 10
27626: PPUSH
27627: LD_VAR 0 5
27631: PPUSH
27632: CALL_OW 273
27636: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27637: LD_VAR 0 8
27641: PPUSH
27642: LD_VAR 0 9
27646: PPUSH
27647: CALL_OW 488
27651: NOT
27652: IFFALSE 27656
// exit ;
27654: GO 27763
// ComAnimCustom ( unit , 1 ) ;
27656: LD_VAR 0 1
27660: PPUSH
27661: LD_INT 1
27663: PPUSH
27664: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27668: LD_VAR 0 8
27672: PPUSH
27673: LD_VAR 0 9
27677: PPUSH
27678: LD_VAR 0 6
27682: PPUSH
27683: LD_VAR 0 7
27687: PPUSH
27688: CALL_OW 330
// repeat wait ( 1 ) ;
27692: LD_INT 1
27694: PPUSH
27695: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27699: LD_VAR 0 1
27703: PPUSH
27704: CALL_OW 316
27708: PUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: CALL_OW 314
27718: OR
27719: PUSH
27720: LD_VAR 0 1
27724: PPUSH
27725: CALL_OW 302
27729: NOT
27730: OR
27731: PUSH
27732: LD_VAR 0 1
27736: PPUSH
27737: CALL_OW 301
27741: OR
27742: IFFALSE 27692
// RemoveSeeing ( _x , _y , side ) ;
27744: LD_VAR 0 8
27748: PPUSH
27749: LD_VAR 0 9
27753: PPUSH
27754: LD_VAR 0 6
27758: PPUSH
27759: CALL_OW 331
// end ; end_of_file
27763: LD_VAR 0 4
27767: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27768: LD_INT 0
27770: PPUSH
27771: PPUSH
// if exist_mode then
27772: LD_VAR 0 2
27776: IFFALSE 27801
// unit := CreateCharacter ( prefix & ident ) else
27778: LD_ADDR_VAR 0 5
27782: PUSH
27783: LD_VAR 0 3
27787: PUSH
27788: LD_VAR 0 1
27792: STR
27793: PPUSH
27794: CALL_OW 34
27798: ST_TO_ADDR
27799: GO 27816
// unit := NewCharacter ( ident ) ;
27801: LD_ADDR_VAR 0 5
27805: PUSH
27806: LD_VAR 0 1
27810: PPUSH
27811: CALL_OW 25
27815: ST_TO_ADDR
// result := unit ;
27816: LD_ADDR_VAR 0 4
27820: PUSH
27821: LD_VAR 0 5
27825: ST_TO_ADDR
// end ;
27826: LD_VAR 0 4
27830: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27831: LD_INT 0
27833: PPUSH
27834: PPUSH
// if not side or not nation then
27835: LD_VAR 0 1
27839: NOT
27840: PUSH
27841: LD_VAR 0 2
27845: NOT
27846: OR
27847: IFFALSE 27851
// exit ;
27849: GO 28619
// case nation of nation_american :
27851: LD_VAR 0 2
27855: PUSH
27856: LD_INT 1
27858: DOUBLE
27859: EQUAL
27860: IFTRUE 27864
27862: GO 28078
27864: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27865: LD_ADDR_VAR 0 4
27869: PUSH
27870: LD_INT 35
27872: PUSH
27873: LD_INT 45
27875: PUSH
27876: LD_INT 46
27878: PUSH
27879: LD_INT 47
27881: PUSH
27882: LD_INT 82
27884: PUSH
27885: LD_INT 83
27887: PUSH
27888: LD_INT 84
27890: PUSH
27891: LD_INT 85
27893: PUSH
27894: LD_INT 86
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: LD_INT 2
27902: PUSH
27903: LD_INT 6
27905: PUSH
27906: LD_INT 15
27908: PUSH
27909: LD_INT 16
27911: PUSH
27912: LD_INT 7
27914: PUSH
27915: LD_INT 12
27917: PUSH
27918: LD_INT 13
27920: PUSH
27921: LD_INT 10
27923: PUSH
27924: LD_INT 14
27926: PUSH
27927: LD_INT 20
27929: PUSH
27930: LD_INT 21
27932: PUSH
27933: LD_INT 22
27935: PUSH
27936: LD_INT 25
27938: PUSH
27939: LD_INT 32
27941: PUSH
27942: LD_INT 27
27944: PUSH
27945: LD_INT 36
27947: PUSH
27948: LD_INT 69
27950: PUSH
27951: LD_INT 39
27953: PUSH
27954: LD_INT 34
27956: PUSH
27957: LD_INT 40
27959: PUSH
27960: LD_INT 48
27962: PUSH
27963: LD_INT 49
27965: PUSH
27966: LD_INT 50
27968: PUSH
27969: LD_INT 51
27971: PUSH
27972: LD_INT 52
27974: PUSH
27975: LD_INT 53
27977: PUSH
27978: LD_INT 54
27980: PUSH
27981: LD_INT 55
27983: PUSH
27984: LD_INT 56
27986: PUSH
27987: LD_INT 57
27989: PUSH
27990: LD_INT 58
27992: PUSH
27993: LD_INT 59
27995: PUSH
27996: LD_INT 60
27998: PUSH
27999: LD_INT 61
28001: PUSH
28002: LD_INT 62
28004: PUSH
28005: LD_INT 80
28007: PUSH
28008: LD_INT 82
28010: PUSH
28011: LD_INT 83
28013: PUSH
28014: LD_INT 84
28016: PUSH
28017: LD_INT 85
28019: PUSH
28020: LD_INT 86
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: ST_TO_ADDR
28076: GO 28543
28078: LD_INT 2
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28086
28084: GO 28312
28086: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28087: LD_ADDR_VAR 0 4
28091: PUSH
28092: LD_INT 35
28094: PUSH
28095: LD_INT 45
28097: PUSH
28098: LD_INT 46
28100: PUSH
28101: LD_INT 47
28103: PUSH
28104: LD_INT 82
28106: PUSH
28107: LD_INT 83
28109: PUSH
28110: LD_INT 84
28112: PUSH
28113: LD_INT 85
28115: PUSH
28116: LD_INT 87
28118: PUSH
28119: LD_INT 70
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: LD_INT 11
28127: PUSH
28128: LD_INT 3
28130: PUSH
28131: LD_INT 4
28133: PUSH
28134: LD_INT 5
28136: PUSH
28137: LD_INT 6
28139: PUSH
28140: LD_INT 15
28142: PUSH
28143: LD_INT 18
28145: PUSH
28146: LD_INT 7
28148: PUSH
28149: LD_INT 17
28151: PUSH
28152: LD_INT 8
28154: PUSH
28155: LD_INT 20
28157: PUSH
28158: LD_INT 21
28160: PUSH
28161: LD_INT 22
28163: PUSH
28164: LD_INT 72
28166: PUSH
28167: LD_INT 26
28169: PUSH
28170: LD_INT 69
28172: PUSH
28173: LD_INT 39
28175: PUSH
28176: LD_INT 40
28178: PUSH
28179: LD_INT 41
28181: PUSH
28182: LD_INT 42
28184: PUSH
28185: LD_INT 43
28187: PUSH
28188: LD_INT 48
28190: PUSH
28191: LD_INT 49
28193: PUSH
28194: LD_INT 50
28196: PUSH
28197: LD_INT 51
28199: PUSH
28200: LD_INT 52
28202: PUSH
28203: LD_INT 53
28205: PUSH
28206: LD_INT 54
28208: PUSH
28209: LD_INT 55
28211: PUSH
28212: LD_INT 56
28214: PUSH
28215: LD_INT 60
28217: PUSH
28218: LD_INT 61
28220: PUSH
28221: LD_INT 62
28223: PUSH
28224: LD_INT 66
28226: PUSH
28227: LD_INT 67
28229: PUSH
28230: LD_INT 68
28232: PUSH
28233: LD_INT 81
28235: PUSH
28236: LD_INT 82
28238: PUSH
28239: LD_INT 83
28241: PUSH
28242: LD_INT 84
28244: PUSH
28245: LD_INT 85
28247: PUSH
28248: LD_INT 87
28250: PUSH
28251: LD_INT 88
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: ST_TO_ADDR
28310: GO 28543
28312: LD_INT 3
28314: DOUBLE
28315: EQUAL
28316: IFTRUE 28320
28318: GO 28542
28320: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28321: LD_ADDR_VAR 0 4
28325: PUSH
28326: LD_INT 46
28328: PUSH
28329: LD_INT 47
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: LD_INT 2
28337: PUSH
28338: LD_INT 82
28340: PUSH
28341: LD_INT 83
28343: PUSH
28344: LD_INT 84
28346: PUSH
28347: LD_INT 85
28349: PUSH
28350: LD_INT 86
28352: PUSH
28353: LD_INT 11
28355: PUSH
28356: LD_INT 9
28358: PUSH
28359: LD_INT 20
28361: PUSH
28362: LD_INT 19
28364: PUSH
28365: LD_INT 21
28367: PUSH
28368: LD_INT 24
28370: PUSH
28371: LD_INT 22
28373: PUSH
28374: LD_INT 25
28376: PUSH
28377: LD_INT 28
28379: PUSH
28380: LD_INT 29
28382: PUSH
28383: LD_INT 30
28385: PUSH
28386: LD_INT 31
28388: PUSH
28389: LD_INT 37
28391: PUSH
28392: LD_INT 38
28394: PUSH
28395: LD_INT 32
28397: PUSH
28398: LD_INT 27
28400: PUSH
28401: LD_INT 33
28403: PUSH
28404: LD_INT 69
28406: PUSH
28407: LD_INT 39
28409: PUSH
28410: LD_INT 34
28412: PUSH
28413: LD_INT 40
28415: PUSH
28416: LD_INT 71
28418: PUSH
28419: LD_INT 23
28421: PUSH
28422: LD_INT 44
28424: PUSH
28425: LD_INT 48
28427: PUSH
28428: LD_INT 49
28430: PUSH
28431: LD_INT 50
28433: PUSH
28434: LD_INT 51
28436: PUSH
28437: LD_INT 52
28439: PUSH
28440: LD_INT 53
28442: PUSH
28443: LD_INT 54
28445: PUSH
28446: LD_INT 55
28448: PUSH
28449: LD_INT 56
28451: PUSH
28452: LD_INT 57
28454: PUSH
28455: LD_INT 58
28457: PUSH
28458: LD_INT 59
28460: PUSH
28461: LD_INT 63
28463: PUSH
28464: LD_INT 64
28466: PUSH
28467: LD_INT 65
28469: PUSH
28470: LD_INT 82
28472: PUSH
28473: LD_INT 83
28475: PUSH
28476: LD_INT 84
28478: PUSH
28479: LD_INT 85
28481: PUSH
28482: LD_INT 86
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: ST_TO_ADDR
28540: GO 28543
28542: POP
// if state > - 1 and state < 3 then
28543: LD_VAR 0 3
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: GREATER
28552: PUSH
28553: LD_VAR 0 3
28557: PUSH
28558: LD_INT 3
28560: LESS
28561: AND
28562: IFFALSE 28619
// for i in result do
28564: LD_ADDR_VAR 0 5
28568: PUSH
28569: LD_VAR 0 4
28573: PUSH
28574: FOR_IN
28575: IFFALSE 28617
// if GetTech ( i , side ) <> state then
28577: LD_VAR 0 5
28581: PPUSH
28582: LD_VAR 0 1
28586: PPUSH
28587: CALL_OW 321
28591: PUSH
28592: LD_VAR 0 3
28596: NONEQUAL
28597: IFFALSE 28615
// result := result diff i ;
28599: LD_ADDR_VAR 0 4
28603: PUSH
28604: LD_VAR 0 4
28608: PUSH
28609: LD_VAR 0 5
28613: DIFF
28614: ST_TO_ADDR
28615: GO 28574
28617: POP
28618: POP
// end ;
28619: LD_VAR 0 4
28623: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28624: LD_INT 0
28626: PPUSH
28627: PPUSH
28628: PPUSH
// result := true ;
28629: LD_ADDR_VAR 0 3
28633: PUSH
28634: LD_INT 1
28636: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28637: LD_ADDR_VAR 0 5
28641: PUSH
28642: LD_VAR 0 2
28646: PPUSH
28647: CALL_OW 480
28651: ST_TO_ADDR
// if not tmp then
28652: LD_VAR 0 5
28656: NOT
28657: IFFALSE 28661
// exit ;
28659: GO 28710
// for i in tmp do
28661: LD_ADDR_VAR 0 4
28665: PUSH
28666: LD_VAR 0 5
28670: PUSH
28671: FOR_IN
28672: IFFALSE 28708
// if GetTech ( i , side ) <> state_researched then
28674: LD_VAR 0 4
28678: PPUSH
28679: LD_VAR 0 1
28683: PPUSH
28684: CALL_OW 321
28688: PUSH
28689: LD_INT 2
28691: NONEQUAL
28692: IFFALSE 28706
// begin result := false ;
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 0
28701: ST_TO_ADDR
// exit ;
28702: POP
28703: POP
28704: GO 28710
// end ;
28706: GO 28671
28708: POP
28709: POP
// end ;
28710: LD_VAR 0 3
28714: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28715: LD_INT 0
28717: PPUSH
28718: PPUSH
28719: PPUSH
28720: PPUSH
28721: PPUSH
28722: PPUSH
28723: PPUSH
28724: PPUSH
28725: PPUSH
28726: PPUSH
28727: PPUSH
28728: PPUSH
28729: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28730: LD_VAR 0 1
28734: NOT
28735: PUSH
28736: LD_VAR 0 1
28740: PPUSH
28741: CALL_OW 257
28745: PUSH
28746: LD_INT 9
28748: NONEQUAL
28749: OR
28750: IFFALSE 28754
// exit ;
28752: GO 29327
// side := GetSide ( unit ) ;
28754: LD_ADDR_VAR 0 9
28758: PUSH
28759: LD_VAR 0 1
28763: PPUSH
28764: CALL_OW 255
28768: ST_TO_ADDR
// tech_space := tech_spacanom ;
28769: LD_ADDR_VAR 0 12
28773: PUSH
28774: LD_INT 29
28776: ST_TO_ADDR
// tech_time := tech_taurad ;
28777: LD_ADDR_VAR 0 13
28781: PUSH
28782: LD_INT 28
28784: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28785: LD_ADDR_VAR 0 11
28789: PUSH
28790: LD_VAR 0 1
28794: PPUSH
28795: CALL_OW 310
28799: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28800: LD_VAR 0 11
28804: PPUSH
28805: CALL_OW 247
28809: PUSH
28810: LD_INT 2
28812: EQUAL
28813: IFFALSE 28817
// exit ;
28815: GO 29327
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28817: LD_ADDR_VAR 0 8
28821: PUSH
28822: LD_INT 81
28824: PUSH
28825: LD_VAR 0 9
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 3
28836: PUSH
28837: LD_INT 21
28839: PUSH
28840: LD_INT 3
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PPUSH
28855: CALL_OW 69
28859: ST_TO_ADDR
// if not tmp then
28860: LD_VAR 0 8
28864: NOT
28865: IFFALSE 28869
// exit ;
28867: GO 29327
// if in_unit then
28869: LD_VAR 0 11
28873: IFFALSE 28897
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28875: LD_ADDR_VAR 0 10
28879: PUSH
28880: LD_VAR 0 8
28884: PPUSH
28885: LD_VAR 0 11
28889: PPUSH
28890: CALL_OW 74
28894: ST_TO_ADDR
28895: GO 28917
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28897: LD_ADDR_VAR 0 10
28901: PUSH
28902: LD_VAR 0 8
28906: PPUSH
28907: LD_VAR 0 1
28911: PPUSH
28912: CALL_OW 74
28916: ST_TO_ADDR
// if not enemy then
28917: LD_VAR 0 10
28921: NOT
28922: IFFALSE 28926
// exit ;
28924: GO 29327
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28926: LD_VAR 0 11
28930: PUSH
28931: LD_VAR 0 11
28935: PPUSH
28936: LD_VAR 0 10
28940: PPUSH
28941: CALL_OW 296
28945: PUSH
28946: LD_INT 13
28948: GREATER
28949: AND
28950: PUSH
28951: LD_VAR 0 1
28955: PPUSH
28956: LD_VAR 0 10
28960: PPUSH
28961: CALL_OW 296
28965: PUSH
28966: LD_INT 12
28968: GREATER
28969: OR
28970: IFFALSE 28974
// exit ;
28972: GO 29327
// missile := [ 1 ] ;
28974: LD_ADDR_VAR 0 14
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: EMPTY
28983: LIST
28984: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28985: LD_VAR 0 9
28989: PPUSH
28990: LD_VAR 0 12
28994: PPUSH
28995: CALL_OW 325
28999: IFFALSE 29028
// missile := Replace ( missile , missile + 1 , 2 ) ;
29001: LD_ADDR_VAR 0 14
29005: PUSH
29006: LD_VAR 0 14
29010: PPUSH
29011: LD_VAR 0 14
29015: PUSH
29016: LD_INT 1
29018: PLUS
29019: PPUSH
29020: LD_INT 2
29022: PPUSH
29023: CALL_OW 1
29027: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29028: LD_VAR 0 9
29032: PPUSH
29033: LD_VAR 0 13
29037: PPUSH
29038: CALL_OW 325
29042: PUSH
29043: LD_VAR 0 10
29047: PPUSH
29048: CALL_OW 255
29052: PPUSH
29053: LD_VAR 0 13
29057: PPUSH
29058: CALL_OW 325
29062: NOT
29063: AND
29064: IFFALSE 29093
// missile := Replace ( missile , missile + 1 , 3 ) ;
29066: LD_ADDR_VAR 0 14
29070: PUSH
29071: LD_VAR 0 14
29075: PPUSH
29076: LD_VAR 0 14
29080: PUSH
29081: LD_INT 1
29083: PLUS
29084: PPUSH
29085: LD_INT 3
29087: PPUSH
29088: CALL_OW 1
29092: ST_TO_ADDR
// if missile < 2 then
29093: LD_VAR 0 14
29097: PUSH
29098: LD_INT 2
29100: LESS
29101: IFFALSE 29105
// exit ;
29103: GO 29327
// x := GetX ( enemy ) ;
29105: LD_ADDR_VAR 0 4
29109: PUSH
29110: LD_VAR 0 10
29114: PPUSH
29115: CALL_OW 250
29119: ST_TO_ADDR
// y := GetY ( enemy ) ;
29120: LD_ADDR_VAR 0 5
29124: PUSH
29125: LD_VAR 0 10
29129: PPUSH
29130: CALL_OW 251
29134: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29135: LD_ADDR_VAR 0 6
29139: PUSH
29140: LD_VAR 0 4
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PPUSH
29149: LD_INT 1
29151: PPUSH
29152: CALL_OW 12
29156: PLUS
29157: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29158: LD_ADDR_VAR 0 7
29162: PUSH
29163: LD_VAR 0 5
29167: PUSH
29168: LD_INT 1
29170: NEG
29171: PPUSH
29172: LD_INT 1
29174: PPUSH
29175: CALL_OW 12
29179: PLUS
29180: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29181: LD_VAR 0 6
29185: PPUSH
29186: LD_VAR 0 7
29190: PPUSH
29191: CALL_OW 488
29195: NOT
29196: IFFALSE 29218
// begin _x := x ;
29198: LD_ADDR_VAR 0 6
29202: PUSH
29203: LD_VAR 0 4
29207: ST_TO_ADDR
// _y := y ;
29208: LD_ADDR_VAR 0 7
29212: PUSH
29213: LD_VAR 0 5
29217: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29218: LD_ADDR_VAR 0 3
29222: PUSH
29223: LD_INT 1
29225: PPUSH
29226: LD_VAR 0 14
29230: PPUSH
29231: CALL_OW 12
29235: ST_TO_ADDR
// case i of 1 :
29236: LD_VAR 0 3
29240: PUSH
29241: LD_INT 1
29243: DOUBLE
29244: EQUAL
29245: IFTRUE 29249
29247: GO 29266
29249: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29250: LD_VAR 0 1
29254: PPUSH
29255: LD_VAR 0 10
29259: PPUSH
29260: CALL_OW 115
29264: GO 29327
29266: LD_INT 2
29268: DOUBLE
29269: EQUAL
29270: IFTRUE 29274
29272: GO 29296
29274: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29275: LD_VAR 0 1
29279: PPUSH
29280: LD_VAR 0 6
29284: PPUSH
29285: LD_VAR 0 7
29289: PPUSH
29290: CALL_OW 153
29294: GO 29327
29296: LD_INT 3
29298: DOUBLE
29299: EQUAL
29300: IFTRUE 29304
29302: GO 29326
29304: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29305: LD_VAR 0 1
29309: PPUSH
29310: LD_VAR 0 6
29314: PPUSH
29315: LD_VAR 0 7
29319: PPUSH
29320: CALL_OW 154
29324: GO 29327
29326: POP
// end ;
29327: LD_VAR 0 2
29331: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29332: LD_INT 0
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
// if not unit or not building then
29340: LD_VAR 0 1
29344: NOT
29345: PUSH
29346: LD_VAR 0 2
29350: NOT
29351: OR
29352: IFFALSE 29356
// exit ;
29354: GO 29514
// x := GetX ( building ) ;
29356: LD_ADDR_VAR 0 5
29360: PUSH
29361: LD_VAR 0 2
29365: PPUSH
29366: CALL_OW 250
29370: ST_TO_ADDR
// y := GetY ( building ) ;
29371: LD_ADDR_VAR 0 6
29375: PUSH
29376: LD_VAR 0 2
29380: PPUSH
29381: CALL_OW 251
29385: ST_TO_ADDR
// for i = 0 to 5 do
29386: LD_ADDR_VAR 0 4
29390: PUSH
29391: DOUBLE
29392: LD_INT 0
29394: DEC
29395: ST_TO_ADDR
29396: LD_INT 5
29398: PUSH
29399: FOR_TO
29400: IFFALSE 29512
// begin _x := ShiftX ( x , i , 3 ) ;
29402: LD_ADDR_VAR 0 7
29406: PUSH
29407: LD_VAR 0 5
29411: PPUSH
29412: LD_VAR 0 4
29416: PPUSH
29417: LD_INT 3
29419: PPUSH
29420: CALL_OW 272
29424: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29425: LD_ADDR_VAR 0 8
29429: PUSH
29430: LD_VAR 0 6
29434: PPUSH
29435: LD_VAR 0 4
29439: PPUSH
29440: LD_INT 3
29442: PPUSH
29443: CALL_OW 273
29447: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29448: LD_VAR 0 7
29452: PPUSH
29453: LD_VAR 0 8
29457: PPUSH
29458: CALL_OW 488
29462: NOT
29463: IFFALSE 29467
// continue ;
29465: GO 29399
// if HexInfo ( _x , _y ) = 0 then
29467: LD_VAR 0 7
29471: PPUSH
29472: LD_VAR 0 8
29476: PPUSH
29477: CALL_OW 428
29481: PUSH
29482: LD_INT 0
29484: EQUAL
29485: IFFALSE 29510
// begin ComMoveXY ( unit , _x , _y ) ;
29487: LD_VAR 0 1
29491: PPUSH
29492: LD_VAR 0 7
29496: PPUSH
29497: LD_VAR 0 8
29501: PPUSH
29502: CALL_OW 111
// exit ;
29506: POP
29507: POP
29508: GO 29514
// end ; end ;
29510: GO 29399
29512: POP
29513: POP
// end ;
29514: LD_VAR 0 3
29518: RET
// export function ScanBase ( side , base_area ) ; begin
29519: LD_INT 0
29521: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29522: LD_ADDR_VAR 0 3
29526: PUSH
29527: LD_VAR 0 2
29531: PPUSH
29532: LD_INT 81
29534: PUSH
29535: LD_VAR 0 1
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PPUSH
29544: CALL_OW 70
29548: ST_TO_ADDR
// end ;
29549: LD_VAR 0 3
29553: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29554: LD_INT 0
29556: PPUSH
29557: PPUSH
29558: PPUSH
29559: PPUSH
// result := false ;
29560: LD_ADDR_VAR 0 2
29564: PUSH
29565: LD_INT 0
29567: ST_TO_ADDR
// side := GetSide ( unit ) ;
29568: LD_ADDR_VAR 0 3
29572: PUSH
29573: LD_VAR 0 1
29577: PPUSH
29578: CALL_OW 255
29582: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29583: LD_ADDR_VAR 0 4
29587: PUSH
29588: LD_VAR 0 1
29592: PPUSH
29593: CALL_OW 248
29597: ST_TO_ADDR
// case nat of 1 :
29598: LD_VAR 0 4
29602: PUSH
29603: LD_INT 1
29605: DOUBLE
29606: EQUAL
29607: IFTRUE 29611
29609: GO 29622
29611: POP
// tech := tech_lassight ; 2 :
29612: LD_ADDR_VAR 0 5
29616: PUSH
29617: LD_INT 12
29619: ST_TO_ADDR
29620: GO 29661
29622: LD_INT 2
29624: DOUBLE
29625: EQUAL
29626: IFTRUE 29630
29628: GO 29641
29630: POP
// tech := tech_mortar ; 3 :
29631: LD_ADDR_VAR 0 5
29635: PUSH
29636: LD_INT 41
29638: ST_TO_ADDR
29639: GO 29661
29641: LD_INT 3
29643: DOUBLE
29644: EQUAL
29645: IFTRUE 29649
29647: GO 29660
29649: POP
// tech := tech_bazooka ; end ;
29650: LD_ADDR_VAR 0 5
29654: PUSH
29655: LD_INT 44
29657: ST_TO_ADDR
29658: GO 29661
29660: POP
// if Researched ( side , tech ) then
29661: LD_VAR 0 3
29665: PPUSH
29666: LD_VAR 0 5
29670: PPUSH
29671: CALL_OW 325
29675: IFFALSE 29702
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29677: LD_ADDR_VAR 0 2
29681: PUSH
29682: LD_INT 5
29684: PUSH
29685: LD_INT 8
29687: PUSH
29688: LD_INT 9
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: PUSH
29696: LD_VAR 0 4
29700: ARRAY
29701: ST_TO_ADDR
// end ;
29702: LD_VAR 0 2
29706: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
29711: PPUSH
// if not mines then
29712: LD_VAR 0 2
29716: NOT
29717: IFFALSE 29721
// exit ;
29719: GO 29865
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29721: LD_ADDR_VAR 0 5
29725: PUSH
29726: LD_INT 81
29728: PUSH
29729: LD_VAR 0 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: LD_INT 21
29743: PUSH
29744: LD_INT 3
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PPUSH
29759: CALL_OW 69
29763: ST_TO_ADDR
// for i in mines do
29764: LD_ADDR_VAR 0 4
29768: PUSH
29769: LD_VAR 0 2
29773: PUSH
29774: FOR_IN
29775: IFFALSE 29863
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29777: LD_VAR 0 4
29781: PUSH
29782: LD_INT 1
29784: ARRAY
29785: PPUSH
29786: LD_VAR 0 4
29790: PUSH
29791: LD_INT 2
29793: ARRAY
29794: PPUSH
29795: CALL_OW 458
29799: NOT
29800: IFFALSE 29804
// continue ;
29802: GO 29774
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29804: LD_VAR 0 4
29808: PUSH
29809: LD_INT 1
29811: ARRAY
29812: PPUSH
29813: LD_VAR 0 4
29817: PUSH
29818: LD_INT 2
29820: ARRAY
29821: PPUSH
29822: CALL_OW 428
29826: PUSH
29827: LD_VAR 0 5
29831: IN
29832: IFFALSE 29861
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29834: LD_VAR 0 4
29838: PUSH
29839: LD_INT 1
29841: ARRAY
29842: PPUSH
29843: LD_VAR 0 4
29847: PUSH
29848: LD_INT 2
29850: ARRAY
29851: PPUSH
29852: LD_VAR 0 1
29856: PPUSH
29857: CALL_OW 456
// end ;
29861: GO 29774
29863: POP
29864: POP
// end ;
29865: LD_VAR 0 3
29869: RET
// export function Count ( array ) ; begin
29870: LD_INT 0
29872: PPUSH
// result := array + 0 ;
29873: LD_ADDR_VAR 0 2
29877: PUSH
29878: LD_VAR 0 1
29882: PUSH
29883: LD_INT 0
29885: PLUS
29886: ST_TO_ADDR
// end ;
29887: LD_VAR 0 2
29891: RET
// export function IsEmpty ( building ) ; begin
29892: LD_INT 0
29894: PPUSH
// if not building then
29895: LD_VAR 0 1
29899: NOT
29900: IFFALSE 29904
// exit ;
29902: GO 29947
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29904: LD_ADDR_VAR 0 2
29908: PUSH
29909: LD_VAR 0 1
29913: PUSH
29914: LD_INT 22
29916: PUSH
29917: LD_VAR 0 1
29921: PPUSH
29922: CALL_OW 255
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 58
29933: PUSH
29934: EMPTY
29935: LIST
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PPUSH
29941: CALL_OW 69
29945: IN
29946: ST_TO_ADDR
// end ;
29947: LD_VAR 0 2
29951: RET
// export function IsNotFull ( building ) ; var places ; begin
29952: LD_INT 0
29954: PPUSH
29955: PPUSH
// if not building then
29956: LD_VAR 0 1
29960: NOT
29961: IFFALSE 29965
// exit ;
29963: GO 29993
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29965: LD_ADDR_VAR 0 2
29969: PUSH
29970: LD_VAR 0 1
29974: PPUSH
29975: LD_INT 3
29977: PUSH
29978: LD_INT 62
29980: PUSH
29981: EMPTY
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PPUSH
29988: CALL_OW 72
29992: ST_TO_ADDR
// end ;
29993: LD_VAR 0 2
29997: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
30002: PPUSH
30003: PPUSH
// tmp := [ ] ;
30004: LD_ADDR_VAR 0 3
30008: PUSH
30009: EMPTY
30010: ST_TO_ADDR
// list := [ ] ;
30011: LD_ADDR_VAR 0 5
30015: PUSH
30016: EMPTY
30017: ST_TO_ADDR
// for i = 16 to 25 do
30018: LD_ADDR_VAR 0 4
30022: PUSH
30023: DOUBLE
30024: LD_INT 16
30026: DEC
30027: ST_TO_ADDR
30028: LD_INT 25
30030: PUSH
30031: FOR_TO
30032: IFFALSE 30105
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30034: LD_ADDR_VAR 0 3
30038: PUSH
30039: LD_VAR 0 3
30043: PUSH
30044: LD_INT 22
30046: PUSH
30047: LD_VAR 0 1
30051: PPUSH
30052: CALL_OW 255
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 91
30063: PUSH
30064: LD_VAR 0 1
30068: PUSH
30069: LD_INT 6
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 30
30079: PUSH
30080: LD_VAR 0 4
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: PUSH
30094: EMPTY
30095: LIST
30096: PPUSH
30097: CALL_OW 69
30101: ADD
30102: ST_TO_ADDR
30103: GO 30031
30105: POP
30106: POP
// for i = 1 to tmp do
30107: LD_ADDR_VAR 0 4
30111: PUSH
30112: DOUBLE
30113: LD_INT 1
30115: DEC
30116: ST_TO_ADDR
30117: LD_VAR 0 3
30121: PUSH
30122: FOR_TO
30123: IFFALSE 30211
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30125: LD_ADDR_VAR 0 5
30129: PUSH
30130: LD_VAR 0 5
30134: PUSH
30135: LD_VAR 0 3
30139: PUSH
30140: LD_VAR 0 4
30144: ARRAY
30145: PPUSH
30146: CALL_OW 266
30150: PUSH
30151: LD_VAR 0 3
30155: PUSH
30156: LD_VAR 0 4
30160: ARRAY
30161: PPUSH
30162: CALL_OW 250
30166: PUSH
30167: LD_VAR 0 3
30171: PUSH
30172: LD_VAR 0 4
30176: ARRAY
30177: PPUSH
30178: CALL_OW 251
30182: PUSH
30183: LD_VAR 0 3
30187: PUSH
30188: LD_VAR 0 4
30192: ARRAY
30193: PPUSH
30194: CALL_OW 254
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: PUSH
30205: EMPTY
30206: LIST
30207: ADD
30208: ST_TO_ADDR
30209: GO 30122
30211: POP
30212: POP
// result := list ;
30213: LD_ADDR_VAR 0 2
30217: PUSH
30218: LD_VAR 0 5
30222: ST_TO_ADDR
// end ;
30223: LD_VAR 0 2
30227: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30228: LD_INT 0
30230: PPUSH
30231: PPUSH
30232: PPUSH
30233: PPUSH
30234: PPUSH
30235: PPUSH
30236: PPUSH
// if not factory then
30237: LD_VAR 0 1
30241: NOT
30242: IFFALSE 30246
// exit ;
30244: GO 30839
// if control = control_apeman then
30246: LD_VAR 0 4
30250: PUSH
30251: LD_INT 5
30253: EQUAL
30254: IFFALSE 30363
// begin tmp := UnitsInside ( factory ) ;
30256: LD_ADDR_VAR 0 8
30260: PUSH
30261: LD_VAR 0 1
30265: PPUSH
30266: CALL_OW 313
30270: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30271: LD_VAR 0 8
30275: PPUSH
30276: LD_INT 25
30278: PUSH
30279: LD_INT 12
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PPUSH
30286: CALL_OW 72
30290: NOT
30291: IFFALSE 30301
// control := control_manual ;
30293: LD_ADDR_VAR 0 4
30297: PUSH
30298: LD_INT 1
30300: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30301: LD_ADDR_VAR 0 8
30305: PUSH
30306: LD_VAR 0 1
30310: PPUSH
30311: CALL 29998 0 1
30315: ST_TO_ADDR
// if tmp then
30316: LD_VAR 0 8
30320: IFFALSE 30363
// begin for i in tmp do
30322: LD_ADDR_VAR 0 7
30326: PUSH
30327: LD_VAR 0 8
30331: PUSH
30332: FOR_IN
30333: IFFALSE 30361
// if i [ 1 ] = b_ext_radio then
30335: LD_VAR 0 7
30339: PUSH
30340: LD_INT 1
30342: ARRAY
30343: PUSH
30344: LD_INT 22
30346: EQUAL
30347: IFFALSE 30359
// begin control := control_remote ;
30349: LD_ADDR_VAR 0 4
30353: PUSH
30354: LD_INT 2
30356: ST_TO_ADDR
// break ;
30357: GO 30361
// end ;
30359: GO 30332
30361: POP
30362: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30363: LD_VAR 0 1
30367: PPUSH
30368: LD_VAR 0 2
30372: PPUSH
30373: LD_VAR 0 3
30377: PPUSH
30378: LD_VAR 0 4
30382: PPUSH
30383: LD_VAR 0 5
30387: PPUSH
30388: CALL_OW 448
30392: IFFALSE 30427
// begin result := [ chassis , engine , control , weapon ] ;
30394: LD_ADDR_VAR 0 6
30398: PUSH
30399: LD_VAR 0 2
30403: PUSH
30404: LD_VAR 0 3
30408: PUSH
30409: LD_VAR 0 4
30413: PUSH
30414: LD_VAR 0 5
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: ST_TO_ADDR
// exit ;
30425: GO 30839
// end ; _chassis := AvailableChassisList ( factory ) ;
30427: LD_ADDR_VAR 0 9
30431: PUSH
30432: LD_VAR 0 1
30436: PPUSH
30437: CALL_OW 475
30441: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30442: LD_ADDR_VAR 0 11
30446: PUSH
30447: LD_VAR 0 1
30451: PPUSH
30452: CALL_OW 476
30456: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30457: LD_ADDR_VAR 0 12
30461: PUSH
30462: LD_VAR 0 1
30466: PPUSH
30467: CALL_OW 477
30471: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30472: LD_ADDR_VAR 0 10
30476: PUSH
30477: LD_VAR 0 1
30481: PPUSH
30482: CALL_OW 478
30486: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30487: LD_VAR 0 9
30491: NOT
30492: PUSH
30493: LD_VAR 0 11
30497: NOT
30498: OR
30499: PUSH
30500: LD_VAR 0 12
30504: NOT
30505: OR
30506: PUSH
30507: LD_VAR 0 10
30511: NOT
30512: OR
30513: IFFALSE 30548
// begin result := [ chassis , engine , control , weapon ] ;
30515: LD_ADDR_VAR 0 6
30519: PUSH
30520: LD_VAR 0 2
30524: PUSH
30525: LD_VAR 0 3
30529: PUSH
30530: LD_VAR 0 4
30534: PUSH
30535: LD_VAR 0 5
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: ST_TO_ADDR
// exit ;
30546: GO 30839
// end ; if not chassis in _chassis then
30548: LD_VAR 0 2
30552: PUSH
30553: LD_VAR 0 9
30557: IN
30558: NOT
30559: IFFALSE 30585
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30561: LD_ADDR_VAR 0 2
30565: PUSH
30566: LD_VAR 0 9
30570: PUSH
30571: LD_INT 1
30573: PPUSH
30574: LD_VAR 0 9
30578: PPUSH
30579: CALL_OW 12
30583: ARRAY
30584: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30585: LD_VAR 0 2
30589: PPUSH
30590: LD_VAR 0 3
30594: PPUSH
30595: CALL 30844 0 2
30599: NOT
30600: IFFALSE 30659
// repeat engine := _engine [ 1 ] ;
30602: LD_ADDR_VAR 0 3
30606: PUSH
30607: LD_VAR 0 11
30611: PUSH
30612: LD_INT 1
30614: ARRAY
30615: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30616: LD_ADDR_VAR 0 11
30620: PUSH
30621: LD_VAR 0 11
30625: PPUSH
30626: LD_INT 1
30628: PPUSH
30629: CALL_OW 3
30633: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30634: LD_VAR 0 2
30638: PPUSH
30639: LD_VAR 0 3
30643: PPUSH
30644: CALL 30844 0 2
30648: PUSH
30649: LD_VAR 0 11
30653: PUSH
30654: EMPTY
30655: EQUAL
30656: OR
30657: IFFALSE 30602
// if not control in _control then
30659: LD_VAR 0 4
30663: PUSH
30664: LD_VAR 0 12
30668: IN
30669: NOT
30670: IFFALSE 30696
// control := _control [ rand ( 1 , _control ) ] ;
30672: LD_ADDR_VAR 0 4
30676: PUSH
30677: LD_VAR 0 12
30681: PUSH
30682: LD_INT 1
30684: PPUSH
30685: LD_VAR 0 12
30689: PPUSH
30690: CALL_OW 12
30694: ARRAY
30695: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30696: LD_VAR 0 2
30700: PPUSH
30701: LD_VAR 0 5
30705: PPUSH
30706: CALL 31064 0 2
30710: NOT
30711: IFFALSE 30770
// repeat weapon := _weapon [ 1 ] ;
30713: LD_ADDR_VAR 0 5
30717: PUSH
30718: LD_VAR 0 10
30722: PUSH
30723: LD_INT 1
30725: ARRAY
30726: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30727: LD_ADDR_VAR 0 10
30731: PUSH
30732: LD_VAR 0 10
30736: PPUSH
30737: LD_INT 1
30739: PPUSH
30740: CALL_OW 3
30744: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30745: LD_VAR 0 2
30749: PPUSH
30750: LD_VAR 0 5
30754: PPUSH
30755: CALL 31064 0 2
30759: PUSH
30760: LD_VAR 0 10
30764: PUSH
30765: EMPTY
30766: EQUAL
30767: OR
30768: IFFALSE 30713
// result := [ ] ;
30770: LD_ADDR_VAR 0 6
30774: PUSH
30775: EMPTY
30776: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30777: LD_VAR 0 1
30781: PPUSH
30782: LD_VAR 0 2
30786: PPUSH
30787: LD_VAR 0 3
30791: PPUSH
30792: LD_VAR 0 4
30796: PPUSH
30797: LD_VAR 0 5
30801: PPUSH
30802: CALL_OW 448
30806: IFFALSE 30839
// result := [ chassis , engine , control , weapon ] ;
30808: LD_ADDR_VAR 0 6
30812: PUSH
30813: LD_VAR 0 2
30817: PUSH
30818: LD_VAR 0 3
30822: PUSH
30823: LD_VAR 0 4
30827: PUSH
30828: LD_VAR 0 5
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: ST_TO_ADDR
// end ;
30839: LD_VAR 0 6
30843: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30844: LD_INT 0
30846: PPUSH
// if not chassis or not engine then
30847: LD_VAR 0 1
30851: NOT
30852: PUSH
30853: LD_VAR 0 2
30857: NOT
30858: OR
30859: IFFALSE 30863
// exit ;
30861: GO 31059
// case engine of engine_solar :
30863: LD_VAR 0 2
30867: PUSH
30868: LD_INT 2
30870: DOUBLE
30871: EQUAL
30872: IFTRUE 30876
30874: GO 30914
30876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30877: LD_ADDR_VAR 0 3
30881: PUSH
30882: LD_INT 11
30884: PUSH
30885: LD_INT 12
30887: PUSH
30888: LD_INT 13
30890: PUSH
30891: LD_INT 14
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: ST_TO_ADDR
30912: GO 31043
30914: LD_INT 1
30916: DOUBLE
30917: EQUAL
30918: IFTRUE 30922
30920: GO 30984
30922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30923: LD_ADDR_VAR 0 3
30927: PUSH
30928: LD_INT 11
30930: PUSH
30931: LD_INT 12
30933: PUSH
30934: LD_INT 13
30936: PUSH
30937: LD_INT 14
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 2
30945: PUSH
30946: LD_INT 3
30948: PUSH
30949: LD_INT 4
30951: PUSH
30952: LD_INT 5
30954: PUSH
30955: LD_INT 21
30957: PUSH
30958: LD_INT 23
30960: PUSH
30961: LD_INT 22
30963: PUSH
30964: LD_INT 24
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: ST_TO_ADDR
30982: GO 31043
30984: LD_INT 3
30986: DOUBLE
30987: EQUAL
30988: IFTRUE 30992
30990: GO 31042
30992: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30993: LD_ADDR_VAR 0 3
30997: PUSH
30998: LD_INT 13
31000: PUSH
31001: LD_INT 14
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: LD_INT 4
31012: PUSH
31013: LD_INT 5
31015: PUSH
31016: LD_INT 21
31018: PUSH
31019: LD_INT 22
31021: PUSH
31022: LD_INT 23
31024: PUSH
31025: LD_INT 24
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: ST_TO_ADDR
31040: GO 31043
31042: POP
// result := ( chassis in result ) ;
31043: LD_ADDR_VAR 0 3
31047: PUSH
31048: LD_VAR 0 1
31052: PUSH
31053: LD_VAR 0 3
31057: IN
31058: ST_TO_ADDR
// end ;
31059: LD_VAR 0 3
31063: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31064: LD_INT 0
31066: PPUSH
// if not chassis or not weapon then
31067: LD_VAR 0 1
31071: NOT
31072: PUSH
31073: LD_VAR 0 2
31077: NOT
31078: OR
31079: IFFALSE 31083
// exit ;
31081: GO 32143
// case weapon of us_machine_gun :
31083: LD_VAR 0 2
31087: PUSH
31088: LD_INT 2
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31096
31094: GO 31126
31096: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31097: LD_ADDR_VAR 0 3
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: LD_INT 2
31107: PUSH
31108: LD_INT 3
31110: PUSH
31111: LD_INT 4
31113: PUSH
31114: LD_INT 5
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: ST_TO_ADDR
31124: GO 32127
31126: LD_INT 3
31128: DOUBLE
31129: EQUAL
31130: IFTRUE 31134
31132: GO 31164
31134: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31135: LD_ADDR_VAR 0 3
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: LD_INT 4
31151: PUSH
31152: LD_INT 5
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
31162: GO 32127
31164: LD_INT 11
31166: DOUBLE
31167: EQUAL
31168: IFTRUE 31172
31170: GO 31202
31172: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31173: LD_ADDR_VAR 0 3
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: LD_INT 3
31186: PUSH
31187: LD_INT 4
31189: PUSH
31190: LD_INT 5
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: ST_TO_ADDR
31200: GO 32127
31202: LD_INT 4
31204: DOUBLE
31205: EQUAL
31206: IFTRUE 31210
31208: GO 31236
31210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31211: LD_ADDR_VAR 0 3
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: LD_INT 3
31221: PUSH
31222: LD_INT 4
31224: PUSH
31225: LD_INT 5
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: ST_TO_ADDR
31234: GO 32127
31236: LD_INT 5
31238: DOUBLE
31239: EQUAL
31240: IFTRUE 31244
31242: GO 31270
31244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31245: LD_ADDR_VAR 0 3
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: LD_INT 4
31258: PUSH
31259: LD_INT 5
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: ST_TO_ADDR
31268: GO 32127
31270: LD_INT 9
31272: DOUBLE
31273: EQUAL
31274: IFTRUE 31278
31276: GO 31304
31278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31279: LD_ADDR_VAR 0 3
31283: PUSH
31284: LD_INT 2
31286: PUSH
31287: LD_INT 3
31289: PUSH
31290: LD_INT 4
31292: PUSH
31293: LD_INT 5
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: ST_TO_ADDR
31302: GO 32127
31304: LD_INT 7
31306: DOUBLE
31307: EQUAL
31308: IFTRUE 31312
31310: GO 31338
31312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31313: LD_ADDR_VAR 0 3
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: LD_INT 4
31326: PUSH
31327: LD_INT 5
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: ST_TO_ADDR
31336: GO 32127
31338: LD_INT 12
31340: DOUBLE
31341: EQUAL
31342: IFTRUE 31346
31344: GO 31372
31346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31347: LD_ADDR_VAR 0 3
31351: PUSH
31352: LD_INT 2
31354: PUSH
31355: LD_INT 3
31357: PUSH
31358: LD_INT 4
31360: PUSH
31361: LD_INT 5
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: ST_TO_ADDR
31370: GO 32127
31372: LD_INT 13
31374: DOUBLE
31375: EQUAL
31376: IFTRUE 31380
31378: GO 31406
31380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31381: LD_ADDR_VAR 0 3
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: LD_INT 4
31394: PUSH
31395: LD_INT 5
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: ST_TO_ADDR
31404: GO 32127
31406: LD_INT 14
31408: DOUBLE
31409: EQUAL
31410: IFTRUE 31414
31412: GO 31432
31414: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31415: LD_ADDR_VAR 0 3
31419: PUSH
31420: LD_INT 4
31422: PUSH
31423: LD_INT 5
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: ST_TO_ADDR
31430: GO 32127
31432: LD_INT 6
31434: DOUBLE
31435: EQUAL
31436: IFTRUE 31440
31438: GO 31458
31440: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31441: LD_ADDR_VAR 0 3
31445: PUSH
31446: LD_INT 4
31448: PUSH
31449: LD_INT 5
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: ST_TO_ADDR
31456: GO 32127
31458: LD_INT 10
31460: DOUBLE
31461: EQUAL
31462: IFTRUE 31466
31464: GO 31484
31466: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31467: LD_ADDR_VAR 0 3
31471: PUSH
31472: LD_INT 4
31474: PUSH
31475: LD_INT 5
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: ST_TO_ADDR
31482: GO 32127
31484: LD_INT 22
31486: DOUBLE
31487: EQUAL
31488: IFTRUE 31492
31490: GO 31518
31492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31493: LD_ADDR_VAR 0 3
31497: PUSH
31498: LD_INT 11
31500: PUSH
31501: LD_INT 12
31503: PUSH
31504: LD_INT 13
31506: PUSH
31507: LD_INT 14
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: ST_TO_ADDR
31516: GO 32127
31518: LD_INT 23
31520: DOUBLE
31521: EQUAL
31522: IFTRUE 31526
31524: GO 31552
31526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31527: LD_ADDR_VAR 0 3
31531: PUSH
31532: LD_INT 11
31534: PUSH
31535: LD_INT 12
31537: PUSH
31538: LD_INT 13
31540: PUSH
31541: LD_INT 14
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
31550: GO 32127
31552: LD_INT 24
31554: DOUBLE
31555: EQUAL
31556: IFTRUE 31560
31558: GO 31586
31560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31561: LD_ADDR_VAR 0 3
31565: PUSH
31566: LD_INT 11
31568: PUSH
31569: LD_INT 12
31571: PUSH
31572: LD_INT 13
31574: PUSH
31575: LD_INT 14
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: ST_TO_ADDR
31584: GO 32127
31586: LD_INT 30
31588: DOUBLE
31589: EQUAL
31590: IFTRUE 31594
31592: GO 31620
31594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31595: LD_ADDR_VAR 0 3
31599: PUSH
31600: LD_INT 11
31602: PUSH
31603: LD_INT 12
31605: PUSH
31606: LD_INT 13
31608: PUSH
31609: LD_INT 14
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
31618: GO 32127
31620: LD_INT 25
31622: DOUBLE
31623: EQUAL
31624: IFTRUE 31628
31626: GO 31646
31628: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31629: LD_ADDR_VAR 0 3
31633: PUSH
31634: LD_INT 13
31636: PUSH
31637: LD_INT 14
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: ST_TO_ADDR
31644: GO 32127
31646: LD_INT 27
31648: DOUBLE
31649: EQUAL
31650: IFTRUE 31654
31652: GO 31672
31654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31655: LD_ADDR_VAR 0 3
31659: PUSH
31660: LD_INT 13
31662: PUSH
31663: LD_INT 14
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: ST_TO_ADDR
31670: GO 32127
31672: LD_INT 92
31674: DOUBLE
31675: EQUAL
31676: IFTRUE 31680
31678: GO 31706
31680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31681: LD_ADDR_VAR 0 3
31685: PUSH
31686: LD_INT 11
31688: PUSH
31689: LD_INT 12
31691: PUSH
31692: LD_INT 13
31694: PUSH
31695: LD_INT 14
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: ST_TO_ADDR
31704: GO 32127
31706: LD_INT 28
31708: DOUBLE
31709: EQUAL
31710: IFTRUE 31714
31712: GO 31732
31714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31715: LD_ADDR_VAR 0 3
31719: PUSH
31720: LD_INT 13
31722: PUSH
31723: LD_INT 14
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: ST_TO_ADDR
31730: GO 32127
31732: LD_INT 29
31734: DOUBLE
31735: EQUAL
31736: IFTRUE 31740
31738: GO 31758
31740: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31741: LD_ADDR_VAR 0 3
31745: PUSH
31746: LD_INT 13
31748: PUSH
31749: LD_INT 14
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: ST_TO_ADDR
31756: GO 32127
31758: LD_INT 31
31760: DOUBLE
31761: EQUAL
31762: IFTRUE 31766
31764: GO 31784
31766: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31767: LD_ADDR_VAR 0 3
31771: PUSH
31772: LD_INT 13
31774: PUSH
31775: LD_INT 14
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: ST_TO_ADDR
31782: GO 32127
31784: LD_INT 26
31786: DOUBLE
31787: EQUAL
31788: IFTRUE 31792
31790: GO 31810
31792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31793: LD_ADDR_VAR 0 3
31797: PUSH
31798: LD_INT 13
31800: PUSH
31801: LD_INT 14
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: ST_TO_ADDR
31808: GO 32127
31810: LD_INT 42
31812: DOUBLE
31813: EQUAL
31814: IFTRUE 31818
31816: GO 31844
31818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31819: LD_ADDR_VAR 0 3
31823: PUSH
31824: LD_INT 21
31826: PUSH
31827: LD_INT 22
31829: PUSH
31830: LD_INT 23
31832: PUSH
31833: LD_INT 24
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: ST_TO_ADDR
31842: GO 32127
31844: LD_INT 43
31846: DOUBLE
31847: EQUAL
31848: IFTRUE 31852
31850: GO 31878
31852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31853: LD_ADDR_VAR 0 3
31857: PUSH
31858: LD_INT 21
31860: PUSH
31861: LD_INT 22
31863: PUSH
31864: LD_INT 23
31866: PUSH
31867: LD_INT 24
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: ST_TO_ADDR
31876: GO 32127
31878: LD_INT 44
31880: DOUBLE
31881: EQUAL
31882: IFTRUE 31886
31884: GO 31912
31886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31887: LD_ADDR_VAR 0 3
31891: PUSH
31892: LD_INT 21
31894: PUSH
31895: LD_INT 22
31897: PUSH
31898: LD_INT 23
31900: PUSH
31901: LD_INT 24
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: ST_TO_ADDR
31910: GO 32127
31912: LD_INT 45
31914: DOUBLE
31915: EQUAL
31916: IFTRUE 31920
31918: GO 31946
31920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31921: LD_ADDR_VAR 0 3
31925: PUSH
31926: LD_INT 21
31928: PUSH
31929: LD_INT 22
31931: PUSH
31932: LD_INT 23
31934: PUSH
31935: LD_INT 24
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: ST_TO_ADDR
31944: GO 32127
31946: LD_INT 49
31948: DOUBLE
31949: EQUAL
31950: IFTRUE 31954
31952: GO 31980
31954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31955: LD_ADDR_VAR 0 3
31959: PUSH
31960: LD_INT 21
31962: PUSH
31963: LD_INT 22
31965: PUSH
31966: LD_INT 23
31968: PUSH
31969: LD_INT 24
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: ST_TO_ADDR
31978: GO 32127
31980: LD_INT 51
31982: DOUBLE
31983: EQUAL
31984: IFTRUE 31988
31986: GO 32014
31988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31989: LD_ADDR_VAR 0 3
31993: PUSH
31994: LD_INT 21
31996: PUSH
31997: LD_INT 22
31999: PUSH
32000: LD_INT 23
32002: PUSH
32003: LD_INT 24
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: ST_TO_ADDR
32012: GO 32127
32014: LD_INT 52
32016: DOUBLE
32017: EQUAL
32018: IFTRUE 32022
32020: GO 32048
32022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32023: LD_ADDR_VAR 0 3
32027: PUSH
32028: LD_INT 21
32030: PUSH
32031: LD_INT 22
32033: PUSH
32034: LD_INT 23
32036: PUSH
32037: LD_INT 24
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: ST_TO_ADDR
32046: GO 32127
32048: LD_INT 53
32050: DOUBLE
32051: EQUAL
32052: IFTRUE 32056
32054: GO 32074
32056: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32057: LD_ADDR_VAR 0 3
32061: PUSH
32062: LD_INT 23
32064: PUSH
32065: LD_INT 24
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: ST_TO_ADDR
32072: GO 32127
32074: LD_INT 46
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32100
32082: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32083: LD_ADDR_VAR 0 3
32087: PUSH
32088: LD_INT 23
32090: PUSH
32091: LD_INT 24
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: ST_TO_ADDR
32098: GO 32127
32100: LD_INT 47
32102: DOUBLE
32103: EQUAL
32104: IFTRUE 32108
32106: GO 32126
32108: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32109: LD_ADDR_VAR 0 3
32113: PUSH
32114: LD_INT 23
32116: PUSH
32117: LD_INT 24
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: ST_TO_ADDR
32124: GO 32127
32126: POP
// result := ( chassis in result ) ;
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_VAR 0 1
32136: PUSH
32137: LD_VAR 0 3
32141: IN
32142: ST_TO_ADDR
// end ;
32143: LD_VAR 0 3
32147: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32148: LD_INT 0
32150: PPUSH
32151: PPUSH
32152: PPUSH
32153: PPUSH
32154: PPUSH
32155: PPUSH
32156: PPUSH
// result := array ;
32157: LD_ADDR_VAR 0 5
32161: PUSH
32162: LD_VAR 0 1
32166: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32167: LD_VAR 0 1
32171: NOT
32172: PUSH
32173: LD_VAR 0 2
32177: NOT
32178: OR
32179: PUSH
32180: LD_VAR 0 3
32184: NOT
32185: OR
32186: PUSH
32187: LD_VAR 0 2
32191: PUSH
32192: LD_VAR 0 1
32196: GREATER
32197: OR
32198: PUSH
32199: LD_VAR 0 3
32203: PUSH
32204: LD_VAR 0 1
32208: GREATER
32209: OR
32210: IFFALSE 32214
// exit ;
32212: GO 32510
// if direction then
32214: LD_VAR 0 4
32218: IFFALSE 32282
// begin d := 1 ;
32220: LD_ADDR_VAR 0 9
32224: PUSH
32225: LD_INT 1
32227: ST_TO_ADDR
// if i_from > i_to then
32228: LD_VAR 0 2
32232: PUSH
32233: LD_VAR 0 3
32237: GREATER
32238: IFFALSE 32264
// length := ( array - i_from ) + i_to else
32240: LD_ADDR_VAR 0 11
32244: PUSH
32245: LD_VAR 0 1
32249: PUSH
32250: LD_VAR 0 2
32254: MINUS
32255: PUSH
32256: LD_VAR 0 3
32260: PLUS
32261: ST_TO_ADDR
32262: GO 32280
// length := i_to - i_from ;
32264: LD_ADDR_VAR 0 11
32268: PUSH
32269: LD_VAR 0 3
32273: PUSH
32274: LD_VAR 0 2
32278: MINUS
32279: ST_TO_ADDR
// end else
32280: GO 32343
// begin d := - 1 ;
32282: LD_ADDR_VAR 0 9
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: ST_TO_ADDR
// if i_from > i_to then
32291: LD_VAR 0 2
32295: PUSH
32296: LD_VAR 0 3
32300: GREATER
32301: IFFALSE 32321
// length := i_from - i_to else
32303: LD_ADDR_VAR 0 11
32307: PUSH
32308: LD_VAR 0 2
32312: PUSH
32313: LD_VAR 0 3
32317: MINUS
32318: ST_TO_ADDR
32319: GO 32343
// length := ( array - i_to ) + i_from ;
32321: LD_ADDR_VAR 0 11
32325: PUSH
32326: LD_VAR 0 1
32330: PUSH
32331: LD_VAR 0 3
32335: MINUS
32336: PUSH
32337: LD_VAR 0 2
32341: PLUS
32342: ST_TO_ADDR
// end ; if not length then
32343: LD_VAR 0 11
32347: NOT
32348: IFFALSE 32352
// exit ;
32350: GO 32510
// tmp := array ;
32352: LD_ADDR_VAR 0 10
32356: PUSH
32357: LD_VAR 0 1
32361: ST_TO_ADDR
// for i = 1 to length do
32362: LD_ADDR_VAR 0 6
32366: PUSH
32367: DOUBLE
32368: LD_INT 1
32370: DEC
32371: ST_TO_ADDR
32372: LD_VAR 0 11
32376: PUSH
32377: FOR_TO
32378: IFFALSE 32498
// begin for j = 1 to array do
32380: LD_ADDR_VAR 0 7
32384: PUSH
32385: DOUBLE
32386: LD_INT 1
32388: DEC
32389: ST_TO_ADDR
32390: LD_VAR 0 1
32394: PUSH
32395: FOR_TO
32396: IFFALSE 32484
// begin k := j + d ;
32398: LD_ADDR_VAR 0 8
32402: PUSH
32403: LD_VAR 0 7
32407: PUSH
32408: LD_VAR 0 9
32412: PLUS
32413: ST_TO_ADDR
// if k > array then
32414: LD_VAR 0 8
32418: PUSH
32419: LD_VAR 0 1
32423: GREATER
32424: IFFALSE 32434
// k := 1 ;
32426: LD_ADDR_VAR 0 8
32430: PUSH
32431: LD_INT 1
32433: ST_TO_ADDR
// if not k then
32434: LD_VAR 0 8
32438: NOT
32439: IFFALSE 32451
// k := array ;
32441: LD_ADDR_VAR 0 8
32445: PUSH
32446: LD_VAR 0 1
32450: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32451: LD_ADDR_VAR 0 10
32455: PUSH
32456: LD_VAR 0 10
32460: PPUSH
32461: LD_VAR 0 8
32465: PPUSH
32466: LD_VAR 0 1
32470: PUSH
32471: LD_VAR 0 7
32475: ARRAY
32476: PPUSH
32477: CALL_OW 1
32481: ST_TO_ADDR
// end ;
32482: GO 32395
32484: POP
32485: POP
// array := tmp ;
32486: LD_ADDR_VAR 0 1
32490: PUSH
32491: LD_VAR 0 10
32495: ST_TO_ADDR
// end ;
32496: GO 32377
32498: POP
32499: POP
// result := array ;
32500: LD_ADDR_VAR 0 5
32504: PUSH
32505: LD_VAR 0 1
32509: ST_TO_ADDR
// end ;
32510: LD_VAR 0 5
32514: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32515: LD_INT 0
32517: PPUSH
32518: PPUSH
// result := 0 ;
32519: LD_ADDR_VAR 0 3
32523: PUSH
32524: LD_INT 0
32526: ST_TO_ADDR
// if not array or not value in array then
32527: LD_VAR 0 1
32531: NOT
32532: PUSH
32533: LD_VAR 0 2
32537: PUSH
32538: LD_VAR 0 1
32542: IN
32543: NOT
32544: OR
32545: IFFALSE 32549
// exit ;
32547: GO 32603
// for i = 1 to array do
32549: LD_ADDR_VAR 0 4
32553: PUSH
32554: DOUBLE
32555: LD_INT 1
32557: DEC
32558: ST_TO_ADDR
32559: LD_VAR 0 1
32563: PUSH
32564: FOR_TO
32565: IFFALSE 32601
// if value = array [ i ] then
32567: LD_VAR 0 2
32571: PUSH
32572: LD_VAR 0 1
32576: PUSH
32577: LD_VAR 0 4
32581: ARRAY
32582: EQUAL
32583: IFFALSE 32599
// begin result := i ;
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_VAR 0 4
32594: ST_TO_ADDR
// exit ;
32595: POP
32596: POP
32597: GO 32603
// end ;
32599: GO 32564
32601: POP
32602: POP
// end ;
32603: LD_VAR 0 3
32607: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32608: LD_INT 0
32610: PPUSH
// vc_chassis := chassis ;
32611: LD_ADDR_OWVAR 37
32615: PUSH
32616: LD_VAR 0 1
32620: ST_TO_ADDR
// vc_engine := engine ;
32621: LD_ADDR_OWVAR 39
32625: PUSH
32626: LD_VAR 0 2
32630: ST_TO_ADDR
// vc_control := control ;
32631: LD_ADDR_OWVAR 38
32635: PUSH
32636: LD_VAR 0 3
32640: ST_TO_ADDR
// vc_weapon := weapon ;
32641: LD_ADDR_OWVAR 40
32645: PUSH
32646: LD_VAR 0 4
32650: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32651: LD_ADDR_OWVAR 41
32655: PUSH
32656: LD_VAR 0 5
32660: ST_TO_ADDR
// end ;
32661: LD_VAR 0 6
32665: RET
// export function WantPlant ( unit ) ; var task ; begin
32666: LD_INT 0
32668: PPUSH
32669: PPUSH
// result := false ;
32670: LD_ADDR_VAR 0 2
32674: PUSH
32675: LD_INT 0
32677: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32678: LD_ADDR_VAR 0 3
32682: PUSH
32683: LD_VAR 0 1
32687: PPUSH
32688: CALL_OW 437
32692: ST_TO_ADDR
// if task then
32693: LD_VAR 0 3
32697: IFFALSE 32725
// if task [ 1 ] [ 1 ] = p then
32699: LD_VAR 0 3
32703: PUSH
32704: LD_INT 1
32706: ARRAY
32707: PUSH
32708: LD_INT 1
32710: ARRAY
32711: PUSH
32712: LD_STRING p
32714: EQUAL
32715: IFFALSE 32725
// result := true ;
32717: LD_ADDR_VAR 0 2
32721: PUSH
32722: LD_INT 1
32724: ST_TO_ADDR
// end ;
32725: LD_VAR 0 2
32729: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32730: LD_INT 0
32732: PPUSH
32733: PPUSH
32734: PPUSH
32735: PPUSH
// if pos < 1 then
32736: LD_VAR 0 2
32740: PUSH
32741: LD_INT 1
32743: LESS
32744: IFFALSE 32748
// exit ;
32746: GO 33051
// if pos = 1 then
32748: LD_VAR 0 2
32752: PUSH
32753: LD_INT 1
32755: EQUAL
32756: IFFALSE 32789
// result := Replace ( arr , pos [ 1 ] , value ) else
32758: LD_ADDR_VAR 0 4
32762: PUSH
32763: LD_VAR 0 1
32767: PPUSH
32768: LD_VAR 0 2
32772: PUSH
32773: LD_INT 1
32775: ARRAY
32776: PPUSH
32777: LD_VAR 0 3
32781: PPUSH
32782: CALL_OW 1
32786: ST_TO_ADDR
32787: GO 33051
// begin tmp := arr ;
32789: LD_ADDR_VAR 0 6
32793: PUSH
32794: LD_VAR 0 1
32798: ST_TO_ADDR
// s_arr := [ tmp ] ;
32799: LD_ADDR_VAR 0 7
32803: PUSH
32804: LD_VAR 0 6
32808: PUSH
32809: EMPTY
32810: LIST
32811: ST_TO_ADDR
// for i = 1 to pos - 1 do
32812: LD_ADDR_VAR 0 5
32816: PUSH
32817: DOUBLE
32818: LD_INT 1
32820: DEC
32821: ST_TO_ADDR
32822: LD_VAR 0 2
32826: PUSH
32827: LD_INT 1
32829: MINUS
32830: PUSH
32831: FOR_TO
32832: IFFALSE 32877
// begin tmp := tmp [ pos [ i ] ] ;
32834: LD_ADDR_VAR 0 6
32838: PUSH
32839: LD_VAR 0 6
32843: PUSH
32844: LD_VAR 0 2
32848: PUSH
32849: LD_VAR 0 5
32853: ARRAY
32854: ARRAY
32855: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32856: LD_ADDR_VAR 0 7
32860: PUSH
32861: LD_VAR 0 7
32865: PUSH
32866: LD_VAR 0 6
32870: PUSH
32871: EMPTY
32872: LIST
32873: ADD
32874: ST_TO_ADDR
// end ;
32875: GO 32831
32877: POP
32878: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32879: LD_ADDR_VAR 0 6
32883: PUSH
32884: LD_VAR 0 6
32888: PPUSH
32889: LD_VAR 0 2
32893: PUSH
32894: LD_VAR 0 2
32898: ARRAY
32899: PPUSH
32900: LD_VAR 0 3
32904: PPUSH
32905: CALL_OW 1
32909: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32910: LD_ADDR_VAR 0 7
32914: PUSH
32915: LD_VAR 0 7
32919: PPUSH
32920: LD_VAR 0 7
32924: PPUSH
32925: LD_VAR 0 6
32929: PPUSH
32930: CALL_OW 1
32934: ST_TO_ADDR
// for i = s_arr downto 2 do
32935: LD_ADDR_VAR 0 5
32939: PUSH
32940: DOUBLE
32941: LD_VAR 0 7
32945: INC
32946: ST_TO_ADDR
32947: LD_INT 2
32949: PUSH
32950: FOR_DOWNTO
32951: IFFALSE 33035
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32953: LD_ADDR_VAR 0 6
32957: PUSH
32958: LD_VAR 0 7
32962: PUSH
32963: LD_VAR 0 5
32967: PUSH
32968: LD_INT 1
32970: MINUS
32971: ARRAY
32972: PPUSH
32973: LD_VAR 0 2
32977: PUSH
32978: LD_VAR 0 5
32982: PUSH
32983: LD_INT 1
32985: MINUS
32986: ARRAY
32987: PPUSH
32988: LD_VAR 0 7
32992: PUSH
32993: LD_VAR 0 5
32997: ARRAY
32998: PPUSH
32999: CALL_OW 1
33003: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33004: LD_ADDR_VAR 0 7
33008: PUSH
33009: LD_VAR 0 7
33013: PPUSH
33014: LD_VAR 0 5
33018: PUSH
33019: LD_INT 1
33021: MINUS
33022: PPUSH
33023: LD_VAR 0 6
33027: PPUSH
33028: CALL_OW 1
33032: ST_TO_ADDR
// end ;
33033: GO 32950
33035: POP
33036: POP
// result := s_arr [ 1 ] ;
33037: LD_ADDR_VAR 0 4
33041: PUSH
33042: LD_VAR 0 7
33046: PUSH
33047: LD_INT 1
33049: ARRAY
33050: ST_TO_ADDR
// end ; end ;
33051: LD_VAR 0 4
33055: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33056: LD_INT 0
33058: PPUSH
33059: PPUSH
// if not list then
33060: LD_VAR 0 1
33064: NOT
33065: IFFALSE 33069
// exit ;
33067: GO 33160
// i := list [ pos1 ] ;
33069: LD_ADDR_VAR 0 5
33073: PUSH
33074: LD_VAR 0 1
33078: PUSH
33079: LD_VAR 0 2
33083: ARRAY
33084: ST_TO_ADDR
// if not i then
33085: LD_VAR 0 5
33089: NOT
33090: IFFALSE 33094
// exit ;
33092: GO 33160
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33094: LD_ADDR_VAR 0 1
33098: PUSH
33099: LD_VAR 0 1
33103: PPUSH
33104: LD_VAR 0 2
33108: PPUSH
33109: LD_VAR 0 1
33113: PUSH
33114: LD_VAR 0 3
33118: ARRAY
33119: PPUSH
33120: CALL_OW 1
33124: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33125: LD_ADDR_VAR 0 1
33129: PUSH
33130: LD_VAR 0 1
33134: PPUSH
33135: LD_VAR 0 3
33139: PPUSH
33140: LD_VAR 0 5
33144: PPUSH
33145: CALL_OW 1
33149: ST_TO_ADDR
// result := list ;
33150: LD_ADDR_VAR 0 4
33154: PUSH
33155: LD_VAR 0 1
33159: ST_TO_ADDR
// end ;
33160: LD_VAR 0 4
33164: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33165: LD_INT 0
33167: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33168: LD_ADDR_VAR 0 5
33172: PUSH
33173: LD_VAR 0 1
33177: PPUSH
33178: CALL_OW 250
33182: PPUSH
33183: LD_VAR 0 1
33187: PPUSH
33188: CALL_OW 251
33192: PPUSH
33193: LD_VAR 0 2
33197: PPUSH
33198: LD_VAR 0 3
33202: PPUSH
33203: LD_VAR 0 4
33207: PPUSH
33208: CALL 33586 0 5
33212: ST_TO_ADDR
// end ;
33213: LD_VAR 0 5
33217: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33218: LD_INT 0
33220: PPUSH
33221: PPUSH
33222: PPUSH
33223: PPUSH
// if not list or not unit then
33224: LD_VAR 0 2
33228: NOT
33229: PUSH
33230: LD_VAR 0 1
33234: NOT
33235: OR
33236: IFFALSE 33240
// exit ;
33238: GO 33581
// result := [ ] ;
33240: LD_ADDR_VAR 0 5
33244: PUSH
33245: EMPTY
33246: ST_TO_ADDR
// for i in list do
33247: LD_ADDR_VAR 0 6
33251: PUSH
33252: LD_VAR 0 2
33256: PUSH
33257: FOR_IN
33258: IFFALSE 33476
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33260: LD_ADDR_VAR 0 8
33264: PUSH
33265: LD_VAR 0 1
33269: PPUSH
33270: LD_VAR 0 6
33274: PUSH
33275: LD_INT 1
33277: ARRAY
33278: PPUSH
33279: LD_VAR 0 6
33283: PUSH
33284: LD_INT 2
33286: ARRAY
33287: PPUSH
33288: CALL_OW 297
33292: ST_TO_ADDR
// if not Count ( result ) then
33293: LD_VAR 0 5
33297: PPUSH
33298: CALL 29870 0 1
33302: NOT
33303: IFFALSE 33336
// begin result := Join ( result , [ i , tmp ] ) ;
33305: LD_ADDR_VAR 0 5
33309: PUSH
33310: LD_VAR 0 5
33314: PPUSH
33315: LD_VAR 0 6
33319: PUSH
33320: LD_VAR 0 8
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PPUSH
33329: CALL 65459 0 2
33333: ST_TO_ADDR
// continue ;
33334: GO 33257
// end ; if result [ result ] [ 2 ] <= tmp then
33336: LD_VAR 0 5
33340: PUSH
33341: LD_VAR 0 5
33345: ARRAY
33346: PUSH
33347: LD_INT 2
33349: ARRAY
33350: PUSH
33351: LD_VAR 0 8
33355: LESSEQUAL
33356: IFFALSE 33389
// result := Join ( result , [ i , tmp ] ) else
33358: LD_ADDR_VAR 0 5
33362: PUSH
33363: LD_VAR 0 5
33367: PPUSH
33368: LD_VAR 0 6
33372: PUSH
33373: LD_VAR 0 8
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PPUSH
33382: CALL 65459 0 2
33386: ST_TO_ADDR
33387: GO 33474
// begin for j := 1 to Count ( result ) do
33389: LD_ADDR_VAR 0 7
33393: PUSH
33394: DOUBLE
33395: LD_INT 1
33397: DEC
33398: ST_TO_ADDR
33399: LD_VAR 0 5
33403: PPUSH
33404: CALL 29870 0 1
33408: PUSH
33409: FOR_TO
33410: IFFALSE 33472
// begin if tmp < result [ j ] [ 2 ] then
33412: LD_VAR 0 8
33416: PUSH
33417: LD_VAR 0 5
33421: PUSH
33422: LD_VAR 0 7
33426: ARRAY
33427: PUSH
33428: LD_INT 2
33430: ARRAY
33431: LESS
33432: IFFALSE 33470
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33434: LD_ADDR_VAR 0 5
33438: PUSH
33439: LD_VAR 0 5
33443: PPUSH
33444: LD_VAR 0 7
33448: PPUSH
33449: LD_VAR 0 6
33453: PUSH
33454: LD_VAR 0 8
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PPUSH
33463: CALL_OW 2
33467: ST_TO_ADDR
// break ;
33468: GO 33472
// end ; end ;
33470: GO 33409
33472: POP
33473: POP
// end ; end ;
33474: GO 33257
33476: POP
33477: POP
// if result and not asc then
33478: LD_VAR 0 5
33482: PUSH
33483: LD_VAR 0 3
33487: NOT
33488: AND
33489: IFFALSE 33506
// result := ReverseArray ( result ) ;
33491: LD_ADDR_VAR 0 5
33495: PUSH
33496: LD_VAR 0 5
33500: PPUSH
33501: CALL 60746 0 1
33505: ST_TO_ADDR
// tmp := [ ] ;
33506: LD_ADDR_VAR 0 8
33510: PUSH
33511: EMPTY
33512: ST_TO_ADDR
// if mode then
33513: LD_VAR 0 4
33517: IFFALSE 33581
// begin for i := 1 to result do
33519: LD_ADDR_VAR 0 6
33523: PUSH
33524: DOUBLE
33525: LD_INT 1
33527: DEC
33528: ST_TO_ADDR
33529: LD_VAR 0 5
33533: PUSH
33534: FOR_TO
33535: IFFALSE 33569
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33537: LD_ADDR_VAR 0 8
33541: PUSH
33542: LD_VAR 0 8
33546: PPUSH
33547: LD_VAR 0 5
33551: PUSH
33552: LD_VAR 0 6
33556: ARRAY
33557: PUSH
33558: LD_INT 1
33560: ARRAY
33561: PPUSH
33562: CALL 65459 0 2
33566: ST_TO_ADDR
33567: GO 33534
33569: POP
33570: POP
// result := tmp ;
33571: LD_ADDR_VAR 0 5
33575: PUSH
33576: LD_VAR 0 8
33580: ST_TO_ADDR
// end ; end ;
33581: LD_VAR 0 5
33585: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33586: LD_INT 0
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
// if not list then
33592: LD_VAR 0 3
33596: NOT
33597: IFFALSE 33601
// exit ;
33599: GO 33989
// result := [ ] ;
33601: LD_ADDR_VAR 0 6
33605: PUSH
33606: EMPTY
33607: ST_TO_ADDR
// for i in list do
33608: LD_ADDR_VAR 0 7
33612: PUSH
33613: LD_VAR 0 3
33617: PUSH
33618: FOR_IN
33619: IFFALSE 33821
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33621: LD_ADDR_VAR 0 9
33625: PUSH
33626: LD_VAR 0 7
33630: PPUSH
33631: LD_VAR 0 1
33635: PPUSH
33636: LD_VAR 0 2
33640: PPUSH
33641: CALL_OW 297
33645: ST_TO_ADDR
// if not result then
33646: LD_VAR 0 6
33650: NOT
33651: IFFALSE 33677
// result := [ [ i , tmp ] ] else
33653: LD_ADDR_VAR 0 6
33657: PUSH
33658: LD_VAR 0 7
33662: PUSH
33663: LD_VAR 0 9
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: ST_TO_ADDR
33675: GO 33819
// begin if result [ result ] [ 2 ] < tmp then
33677: LD_VAR 0 6
33681: PUSH
33682: LD_VAR 0 6
33686: ARRAY
33687: PUSH
33688: LD_INT 2
33690: ARRAY
33691: PUSH
33692: LD_VAR 0 9
33696: LESS
33697: IFFALSE 33739
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33699: LD_ADDR_VAR 0 6
33703: PUSH
33704: LD_VAR 0 6
33708: PPUSH
33709: LD_VAR 0 6
33713: PUSH
33714: LD_INT 1
33716: PLUS
33717: PPUSH
33718: LD_VAR 0 7
33722: PUSH
33723: LD_VAR 0 9
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PPUSH
33732: CALL_OW 2
33736: ST_TO_ADDR
33737: GO 33819
// for j = 1 to result do
33739: LD_ADDR_VAR 0 8
33743: PUSH
33744: DOUBLE
33745: LD_INT 1
33747: DEC
33748: ST_TO_ADDR
33749: LD_VAR 0 6
33753: PUSH
33754: FOR_TO
33755: IFFALSE 33817
// begin if tmp < result [ j ] [ 2 ] then
33757: LD_VAR 0 9
33761: PUSH
33762: LD_VAR 0 6
33766: PUSH
33767: LD_VAR 0 8
33771: ARRAY
33772: PUSH
33773: LD_INT 2
33775: ARRAY
33776: LESS
33777: IFFALSE 33815
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33779: LD_ADDR_VAR 0 6
33783: PUSH
33784: LD_VAR 0 6
33788: PPUSH
33789: LD_VAR 0 8
33793: PPUSH
33794: LD_VAR 0 7
33798: PUSH
33799: LD_VAR 0 9
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PPUSH
33808: CALL_OW 2
33812: ST_TO_ADDR
// break ;
33813: GO 33817
// end ; end ;
33815: GO 33754
33817: POP
33818: POP
// end ; end ;
33819: GO 33618
33821: POP
33822: POP
// if result and not asc then
33823: LD_VAR 0 6
33827: PUSH
33828: LD_VAR 0 4
33832: NOT
33833: AND
33834: IFFALSE 33909
// begin tmp := result ;
33836: LD_ADDR_VAR 0 9
33840: PUSH
33841: LD_VAR 0 6
33845: ST_TO_ADDR
// for i = tmp downto 1 do
33846: LD_ADDR_VAR 0 7
33850: PUSH
33851: DOUBLE
33852: LD_VAR 0 9
33856: INC
33857: ST_TO_ADDR
33858: LD_INT 1
33860: PUSH
33861: FOR_DOWNTO
33862: IFFALSE 33907
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33864: LD_ADDR_VAR 0 6
33868: PUSH
33869: LD_VAR 0 6
33873: PPUSH
33874: LD_VAR 0 9
33878: PUSH
33879: LD_VAR 0 7
33883: MINUS
33884: PUSH
33885: LD_INT 1
33887: PLUS
33888: PPUSH
33889: LD_VAR 0 9
33893: PUSH
33894: LD_VAR 0 7
33898: ARRAY
33899: PPUSH
33900: CALL_OW 1
33904: ST_TO_ADDR
33905: GO 33861
33907: POP
33908: POP
// end ; tmp := [ ] ;
33909: LD_ADDR_VAR 0 9
33913: PUSH
33914: EMPTY
33915: ST_TO_ADDR
// if mode then
33916: LD_VAR 0 5
33920: IFFALSE 33989
// begin for i = 1 to result do
33922: LD_ADDR_VAR 0 7
33926: PUSH
33927: DOUBLE
33928: LD_INT 1
33930: DEC
33931: ST_TO_ADDR
33932: LD_VAR 0 6
33936: PUSH
33937: FOR_TO
33938: IFFALSE 33977
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33940: LD_ADDR_VAR 0 9
33944: PUSH
33945: LD_VAR 0 9
33949: PPUSH
33950: LD_VAR 0 7
33954: PPUSH
33955: LD_VAR 0 6
33959: PUSH
33960: LD_VAR 0 7
33964: ARRAY
33965: PUSH
33966: LD_INT 1
33968: ARRAY
33969: PPUSH
33970: CALL_OW 1
33974: ST_TO_ADDR
33975: GO 33937
33977: POP
33978: POP
// result := tmp ;
33979: LD_ADDR_VAR 0 6
33983: PUSH
33984: LD_VAR 0 9
33988: ST_TO_ADDR
// end ; end ;
33989: LD_VAR 0 6
33993: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33994: LD_INT 0
33996: PPUSH
33997: PPUSH
33998: PPUSH
33999: PPUSH
34000: PPUSH
34001: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34002: LD_ADDR_VAR 0 5
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: EMPTY
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
// if not x or not y then
34024: LD_VAR 0 2
34028: NOT
34029: PUSH
34030: LD_VAR 0 3
34034: NOT
34035: OR
34036: IFFALSE 34040
// exit ;
34038: GO 35690
// if not range then
34040: LD_VAR 0 4
34044: NOT
34045: IFFALSE 34055
// range := 10 ;
34047: LD_ADDR_VAR 0 4
34051: PUSH
34052: LD_INT 10
34054: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34055: LD_ADDR_VAR 0 8
34059: PUSH
34060: LD_INT 81
34062: PUSH
34063: LD_VAR 0 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 92
34074: PUSH
34075: LD_VAR 0 2
34079: PUSH
34080: LD_VAR 0 3
34084: PUSH
34085: LD_VAR 0 4
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 3
34098: PUSH
34099: LD_INT 21
34101: PUSH
34102: LD_INT 3
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: PPUSH
34118: CALL_OW 69
34122: ST_TO_ADDR
// if not tmp then
34123: LD_VAR 0 8
34127: NOT
34128: IFFALSE 34132
// exit ;
34130: GO 35690
// for i in tmp do
34132: LD_ADDR_VAR 0 6
34136: PUSH
34137: LD_VAR 0 8
34141: PUSH
34142: FOR_IN
34143: IFFALSE 35665
// begin points := [ 0 , 0 , 0 ] ;
34145: LD_ADDR_VAR 0 9
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: LIST
34163: ST_TO_ADDR
// bpoints := 1 ;
34164: LD_ADDR_VAR 0 10
34168: PUSH
34169: LD_INT 1
34171: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34172: LD_VAR 0 6
34176: PPUSH
34177: CALL_OW 247
34181: PUSH
34182: LD_INT 1
34184: DOUBLE
34185: EQUAL
34186: IFTRUE 34190
34188: GO 34768
34190: POP
// begin if GetClass ( i ) = 1 then
34191: LD_VAR 0 6
34195: PPUSH
34196: CALL_OW 257
34200: PUSH
34201: LD_INT 1
34203: EQUAL
34204: IFFALSE 34225
// points := [ 10 , 5 , 3 ] ;
34206: LD_ADDR_VAR 0 9
34210: PUSH
34211: LD_INT 10
34213: PUSH
34214: LD_INT 5
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34225: LD_VAR 0 6
34229: PPUSH
34230: CALL_OW 257
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: LD_INT 3
34240: PUSH
34241: LD_INT 4
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: LIST
34248: IN
34249: IFFALSE 34270
// points := [ 3 , 2 , 1 ] ;
34251: LD_ADDR_VAR 0 9
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: LD_INT 1
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34270: LD_VAR 0 6
34274: PPUSH
34275: CALL_OW 257
34279: PUSH
34280: LD_INT 5
34282: EQUAL
34283: IFFALSE 34304
// points := [ 130 , 5 , 2 ] ;
34285: LD_ADDR_VAR 0 9
34289: PUSH
34290: LD_INT 130
34292: PUSH
34293: LD_INT 5
34295: PUSH
34296: LD_INT 2
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34304: LD_VAR 0 6
34308: PPUSH
34309: CALL_OW 257
34313: PUSH
34314: LD_INT 8
34316: EQUAL
34317: IFFALSE 34338
// points := [ 35 , 35 , 30 ] ;
34319: LD_ADDR_VAR 0 9
34323: PUSH
34324: LD_INT 35
34326: PUSH
34327: LD_INT 35
34329: PUSH
34330: LD_INT 30
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34338: LD_VAR 0 6
34342: PPUSH
34343: CALL_OW 257
34347: PUSH
34348: LD_INT 9
34350: EQUAL
34351: IFFALSE 34372
// points := [ 20 , 55 , 40 ] ;
34353: LD_ADDR_VAR 0 9
34357: PUSH
34358: LD_INT 20
34360: PUSH
34361: LD_INT 55
34363: PUSH
34364: LD_INT 40
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34372: LD_VAR 0 6
34376: PPUSH
34377: CALL_OW 257
34381: PUSH
34382: LD_INT 12
34384: PUSH
34385: LD_INT 16
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: IN
34392: IFFALSE 34413
// points := [ 5 , 3 , 2 ] ;
34394: LD_ADDR_VAR 0 9
34398: PUSH
34399: LD_INT 5
34401: PUSH
34402: LD_INT 3
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: LIST
34412: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34413: LD_VAR 0 6
34417: PPUSH
34418: CALL_OW 257
34422: PUSH
34423: LD_INT 17
34425: EQUAL
34426: IFFALSE 34447
// points := [ 100 , 50 , 75 ] ;
34428: LD_ADDR_VAR 0 9
34432: PUSH
34433: LD_INT 100
34435: PUSH
34436: LD_INT 50
34438: PUSH
34439: LD_INT 75
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34447: LD_VAR 0 6
34451: PPUSH
34452: CALL_OW 257
34456: PUSH
34457: LD_INT 15
34459: EQUAL
34460: IFFALSE 34481
// points := [ 10 , 5 , 3 ] ;
34462: LD_ADDR_VAR 0 9
34466: PUSH
34467: LD_INT 10
34469: PUSH
34470: LD_INT 5
34472: PUSH
34473: LD_INT 3
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: LIST
34480: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34481: LD_VAR 0 6
34485: PPUSH
34486: CALL_OW 257
34490: PUSH
34491: LD_INT 14
34493: EQUAL
34494: IFFALSE 34515
// points := [ 10 , 0 , 0 ] ;
34496: LD_ADDR_VAR 0 9
34500: PUSH
34501: LD_INT 10
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: LIST
34514: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34515: LD_VAR 0 6
34519: PPUSH
34520: CALL_OW 257
34524: PUSH
34525: LD_INT 11
34527: EQUAL
34528: IFFALSE 34549
// points := [ 30 , 10 , 5 ] ;
34530: LD_ADDR_VAR 0 9
34534: PUSH
34535: LD_INT 30
34537: PUSH
34538: LD_INT 10
34540: PUSH
34541: LD_INT 5
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34549: LD_VAR 0 1
34553: PPUSH
34554: LD_INT 5
34556: PPUSH
34557: CALL_OW 321
34561: PUSH
34562: LD_INT 2
34564: EQUAL
34565: IFFALSE 34582
// bpoints := bpoints * 1.8 ;
34567: LD_ADDR_VAR 0 10
34571: PUSH
34572: LD_VAR 0 10
34576: PUSH
34577: LD_REAL  1.80000000000000E+0000
34580: MUL
34581: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34582: LD_VAR 0 6
34586: PPUSH
34587: CALL_OW 257
34591: PUSH
34592: LD_INT 1
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: LD_INT 3
34600: PUSH
34601: LD_INT 4
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: IN
34610: PUSH
34611: LD_VAR 0 1
34615: PPUSH
34616: LD_INT 51
34618: PPUSH
34619: CALL_OW 321
34623: PUSH
34624: LD_INT 2
34626: EQUAL
34627: AND
34628: IFFALSE 34645
// bpoints := bpoints * 1.2 ;
34630: LD_ADDR_VAR 0 10
34634: PUSH
34635: LD_VAR 0 10
34639: PUSH
34640: LD_REAL  1.20000000000000E+0000
34643: MUL
34644: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34645: LD_VAR 0 6
34649: PPUSH
34650: CALL_OW 257
34654: PUSH
34655: LD_INT 5
34657: PUSH
34658: LD_INT 7
34660: PUSH
34661: LD_INT 9
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: LIST
34668: IN
34669: PUSH
34670: LD_VAR 0 1
34674: PPUSH
34675: LD_INT 52
34677: PPUSH
34678: CALL_OW 321
34682: PUSH
34683: LD_INT 2
34685: EQUAL
34686: AND
34687: IFFALSE 34704
// bpoints := bpoints * 1.5 ;
34689: LD_ADDR_VAR 0 10
34693: PUSH
34694: LD_VAR 0 10
34698: PUSH
34699: LD_REAL  1.50000000000000E+0000
34702: MUL
34703: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34704: LD_VAR 0 1
34708: PPUSH
34709: LD_INT 66
34711: PPUSH
34712: CALL_OW 321
34716: PUSH
34717: LD_INT 2
34719: EQUAL
34720: IFFALSE 34737
// bpoints := bpoints * 1.1 ;
34722: LD_ADDR_VAR 0 10
34726: PUSH
34727: LD_VAR 0 10
34731: PUSH
34732: LD_REAL  1.10000000000000E+0000
34735: MUL
34736: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34737: LD_ADDR_VAR 0 10
34741: PUSH
34742: LD_VAR 0 10
34746: PUSH
34747: LD_VAR 0 6
34751: PPUSH
34752: LD_INT 1
34754: PPUSH
34755: CALL_OW 259
34759: PUSH
34760: LD_REAL  1.15000000000000E+0000
34763: MUL
34764: MUL
34765: ST_TO_ADDR
// end ; unit_vehicle :
34766: GO 35594
34768: LD_INT 2
34770: DOUBLE
34771: EQUAL
34772: IFTRUE 34776
34774: GO 35582
34776: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34777: LD_VAR 0 6
34781: PPUSH
34782: CALL_OW 264
34786: PUSH
34787: LD_INT 2
34789: PUSH
34790: LD_INT 42
34792: PUSH
34793: LD_INT 24
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: LIST
34800: IN
34801: IFFALSE 34822
// points := [ 25 , 5 , 3 ] ;
34803: LD_ADDR_VAR 0 9
34807: PUSH
34808: LD_INT 25
34810: PUSH
34811: LD_INT 5
34813: PUSH
34814: LD_INT 3
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34822: LD_VAR 0 6
34826: PPUSH
34827: CALL_OW 264
34831: PUSH
34832: LD_INT 4
34834: PUSH
34835: LD_INT 43
34837: PUSH
34838: LD_INT 25
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: IN
34846: IFFALSE 34867
// points := [ 40 , 15 , 5 ] ;
34848: LD_ADDR_VAR 0 9
34852: PUSH
34853: LD_INT 40
34855: PUSH
34856: LD_INT 15
34858: PUSH
34859: LD_INT 5
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34867: LD_VAR 0 6
34871: PPUSH
34872: CALL_OW 264
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: LD_INT 23
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: IN
34887: IFFALSE 34908
// points := [ 7 , 25 , 8 ] ;
34889: LD_ADDR_VAR 0 9
34893: PUSH
34894: LD_INT 7
34896: PUSH
34897: LD_INT 25
34899: PUSH
34900: LD_INT 8
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34908: LD_VAR 0 6
34912: PPUSH
34913: CALL_OW 264
34917: PUSH
34918: LD_INT 5
34920: PUSH
34921: LD_INT 27
34923: PUSH
34924: LD_INT 44
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: IN
34932: IFFALSE 34953
// points := [ 14 , 50 , 16 ] ;
34934: LD_ADDR_VAR 0 9
34938: PUSH
34939: LD_INT 14
34941: PUSH
34942: LD_INT 50
34944: PUSH
34945: LD_INT 16
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34953: LD_VAR 0 6
34957: PPUSH
34958: CALL_OW 264
34962: PUSH
34963: LD_INT 6
34965: PUSH
34966: LD_INT 46
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: IN
34973: IFFALSE 34994
// points := [ 32 , 120 , 70 ] ;
34975: LD_ADDR_VAR 0 9
34979: PUSH
34980: LD_INT 32
34982: PUSH
34983: LD_INT 120
34985: PUSH
34986: LD_INT 70
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34994: LD_VAR 0 6
34998: PPUSH
34999: CALL_OW 264
35003: PUSH
35004: LD_INT 7
35006: PUSH
35007: LD_INT 28
35009: PUSH
35010: LD_INT 45
35012: PUSH
35013: LD_INT 92
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: IN
35022: IFFALSE 35043
// points := [ 35 , 20 , 45 ] ;
35024: LD_ADDR_VAR 0 9
35028: PUSH
35029: LD_INT 35
35031: PUSH
35032: LD_INT 20
35034: PUSH
35035: LD_INT 45
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: LIST
35042: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35043: LD_VAR 0 6
35047: PPUSH
35048: CALL_OW 264
35052: PUSH
35053: LD_INT 47
35055: PUSH
35056: EMPTY
35057: LIST
35058: IN
35059: IFFALSE 35080
// points := [ 67 , 45 , 75 ] ;
35061: LD_ADDR_VAR 0 9
35065: PUSH
35066: LD_INT 67
35068: PUSH
35069: LD_INT 45
35071: PUSH
35072: LD_INT 75
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: LIST
35079: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35080: LD_VAR 0 6
35084: PPUSH
35085: CALL_OW 264
35089: PUSH
35090: LD_INT 26
35092: PUSH
35093: EMPTY
35094: LIST
35095: IN
35096: IFFALSE 35117
// points := [ 120 , 30 , 80 ] ;
35098: LD_ADDR_VAR 0 9
35102: PUSH
35103: LD_INT 120
35105: PUSH
35106: LD_INT 30
35108: PUSH
35109: LD_INT 80
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35117: LD_VAR 0 6
35121: PPUSH
35122: CALL_OW 264
35126: PUSH
35127: LD_INT 22
35129: PUSH
35130: EMPTY
35131: LIST
35132: IN
35133: IFFALSE 35154
// points := [ 40 , 1 , 1 ] ;
35135: LD_ADDR_VAR 0 9
35139: PUSH
35140: LD_INT 40
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: LIST
35153: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35154: LD_VAR 0 6
35158: PPUSH
35159: CALL_OW 264
35163: PUSH
35164: LD_INT 29
35166: PUSH
35167: EMPTY
35168: LIST
35169: IN
35170: IFFALSE 35191
// points := [ 70 , 200 , 400 ] ;
35172: LD_ADDR_VAR 0 9
35176: PUSH
35177: LD_INT 70
35179: PUSH
35180: LD_INT 200
35182: PUSH
35183: LD_INT 400
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35191: LD_VAR 0 6
35195: PPUSH
35196: CALL_OW 264
35200: PUSH
35201: LD_INT 14
35203: PUSH
35204: LD_INT 53
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: IN
35211: IFFALSE 35232
// points := [ 40 , 10 , 20 ] ;
35213: LD_ADDR_VAR 0 9
35217: PUSH
35218: LD_INT 40
35220: PUSH
35221: LD_INT 10
35223: PUSH
35224: LD_INT 20
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: LIST
35231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35232: LD_VAR 0 6
35236: PPUSH
35237: CALL_OW 264
35241: PUSH
35242: LD_INT 9
35244: PUSH
35245: EMPTY
35246: LIST
35247: IN
35248: IFFALSE 35269
// points := [ 5 , 70 , 20 ] ;
35250: LD_ADDR_VAR 0 9
35254: PUSH
35255: LD_INT 5
35257: PUSH
35258: LD_INT 70
35260: PUSH
35261: LD_INT 20
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: LIST
35268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35269: LD_VAR 0 6
35273: PPUSH
35274: CALL_OW 264
35278: PUSH
35279: LD_INT 10
35281: PUSH
35282: EMPTY
35283: LIST
35284: IN
35285: IFFALSE 35306
// points := [ 35 , 110 , 70 ] ;
35287: LD_ADDR_VAR 0 9
35291: PUSH
35292: LD_INT 35
35294: PUSH
35295: LD_INT 110
35297: PUSH
35298: LD_INT 70
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35306: LD_VAR 0 6
35310: PPUSH
35311: CALL_OW 265
35315: PUSH
35316: LD_INT 25
35318: EQUAL
35319: IFFALSE 35340
// points := [ 80 , 65 , 100 ] ;
35321: LD_ADDR_VAR 0 9
35325: PUSH
35326: LD_INT 80
35328: PUSH
35329: LD_INT 65
35331: PUSH
35332: LD_INT 100
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35340: LD_VAR 0 6
35344: PPUSH
35345: CALL_OW 263
35349: PUSH
35350: LD_INT 1
35352: EQUAL
35353: IFFALSE 35388
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35355: LD_ADDR_VAR 0 10
35359: PUSH
35360: LD_VAR 0 10
35364: PUSH
35365: LD_VAR 0 6
35369: PPUSH
35370: CALL_OW 311
35374: PPUSH
35375: LD_INT 3
35377: PPUSH
35378: CALL_OW 259
35382: PUSH
35383: LD_INT 4
35385: MUL
35386: MUL
35387: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35388: LD_VAR 0 6
35392: PPUSH
35393: CALL_OW 263
35397: PUSH
35398: LD_INT 2
35400: EQUAL
35401: IFFALSE 35452
// begin j := IsControledBy ( i ) ;
35403: LD_ADDR_VAR 0 7
35407: PUSH
35408: LD_VAR 0 6
35412: PPUSH
35413: CALL_OW 312
35417: ST_TO_ADDR
// if j then
35418: LD_VAR 0 7
35422: IFFALSE 35452
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35424: LD_ADDR_VAR 0 10
35428: PUSH
35429: LD_VAR 0 10
35433: PUSH
35434: LD_VAR 0 7
35438: PPUSH
35439: LD_INT 3
35441: PPUSH
35442: CALL_OW 259
35446: PUSH
35447: LD_INT 3
35449: MUL
35450: MUL
35451: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35452: LD_VAR 0 6
35456: PPUSH
35457: CALL_OW 264
35461: PUSH
35462: LD_INT 5
35464: PUSH
35465: LD_INT 6
35467: PUSH
35468: LD_INT 46
35470: PUSH
35471: LD_INT 44
35473: PUSH
35474: LD_INT 47
35476: PUSH
35477: LD_INT 45
35479: PUSH
35480: LD_INT 28
35482: PUSH
35483: LD_INT 7
35485: PUSH
35486: LD_INT 27
35488: PUSH
35489: LD_INT 29
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: IN
35504: PUSH
35505: LD_VAR 0 1
35509: PPUSH
35510: LD_INT 52
35512: PPUSH
35513: CALL_OW 321
35517: PUSH
35518: LD_INT 2
35520: EQUAL
35521: AND
35522: IFFALSE 35539
// bpoints := bpoints * 1.2 ;
35524: LD_ADDR_VAR 0 10
35528: PUSH
35529: LD_VAR 0 10
35533: PUSH
35534: LD_REAL  1.20000000000000E+0000
35537: MUL
35538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35539: LD_VAR 0 6
35543: PPUSH
35544: CALL_OW 264
35548: PUSH
35549: LD_INT 6
35551: PUSH
35552: LD_INT 46
35554: PUSH
35555: LD_INT 47
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: IN
35563: IFFALSE 35580
// bpoints := bpoints * 1.2 ;
35565: LD_ADDR_VAR 0 10
35569: PUSH
35570: LD_VAR 0 10
35574: PUSH
35575: LD_REAL  1.20000000000000E+0000
35578: MUL
35579: ST_TO_ADDR
// end ; unit_building :
35580: GO 35594
35582: LD_INT 3
35584: DOUBLE
35585: EQUAL
35586: IFTRUE 35590
35588: GO 35593
35590: POP
// ; end ;
35591: GO 35594
35593: POP
// for j = 1 to 3 do
35594: LD_ADDR_VAR 0 7
35598: PUSH
35599: DOUBLE
35600: LD_INT 1
35602: DEC
35603: ST_TO_ADDR
35604: LD_INT 3
35606: PUSH
35607: FOR_TO
35608: IFFALSE 35661
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35610: LD_ADDR_VAR 0 5
35614: PUSH
35615: LD_VAR 0 5
35619: PPUSH
35620: LD_VAR 0 7
35624: PPUSH
35625: LD_VAR 0 5
35629: PUSH
35630: LD_VAR 0 7
35634: ARRAY
35635: PUSH
35636: LD_VAR 0 9
35640: PUSH
35641: LD_VAR 0 7
35645: ARRAY
35646: PUSH
35647: LD_VAR 0 10
35651: MUL
35652: PLUS
35653: PPUSH
35654: CALL_OW 1
35658: ST_TO_ADDR
35659: GO 35607
35661: POP
35662: POP
// end ;
35663: GO 34142
35665: POP
35666: POP
// result := Replace ( result , 4 , tmp ) ;
35667: LD_ADDR_VAR 0 5
35671: PUSH
35672: LD_VAR 0 5
35676: PPUSH
35677: LD_INT 4
35679: PPUSH
35680: LD_VAR 0 8
35684: PPUSH
35685: CALL_OW 1
35689: ST_TO_ADDR
// end ;
35690: LD_VAR 0 5
35694: RET
// export function DangerAtRange ( unit , range ) ; begin
35695: LD_INT 0
35697: PPUSH
// if not unit then
35698: LD_VAR 0 1
35702: NOT
35703: IFFALSE 35707
// exit ;
35705: GO 35752
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: LD_VAR 0 1
35716: PPUSH
35717: CALL_OW 255
35721: PPUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 250
35731: PPUSH
35732: LD_VAR 0 1
35736: PPUSH
35737: CALL_OW 251
35741: PPUSH
35742: LD_VAR 0 2
35746: PPUSH
35747: CALL 33994 0 4
35751: ST_TO_ADDR
// end ;
35752: LD_VAR 0 3
35756: RET
// export function DangerInArea ( side , area ) ; begin
35757: LD_INT 0
35759: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35760: LD_ADDR_VAR 0 3
35764: PUSH
35765: LD_VAR 0 2
35769: PPUSH
35770: LD_INT 81
35772: PUSH
35773: LD_VAR 0 1
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PPUSH
35782: CALL_OW 70
35786: ST_TO_ADDR
// end ;
35787: LD_VAR 0 3
35791: RET
// export function IsExtension ( b ) ; begin
35792: LD_INT 0
35794: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35795: LD_ADDR_VAR 0 2
35799: PUSH
35800: LD_VAR 0 1
35804: PUSH
35805: LD_INT 23
35807: PUSH
35808: LD_INT 20
35810: PUSH
35811: LD_INT 22
35813: PUSH
35814: LD_INT 17
35816: PUSH
35817: LD_INT 24
35819: PUSH
35820: LD_INT 21
35822: PUSH
35823: LD_INT 19
35825: PUSH
35826: LD_INT 16
35828: PUSH
35829: LD_INT 25
35831: PUSH
35832: LD_INT 18
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: IN
35847: ST_TO_ADDR
// end ;
35848: LD_VAR 0 2
35852: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35853: LD_INT 0
35855: PPUSH
35856: PPUSH
35857: PPUSH
// result := [ ] ;
35858: LD_ADDR_VAR 0 4
35862: PUSH
35863: EMPTY
35864: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35865: LD_ADDR_VAR 0 5
35869: PUSH
35870: LD_VAR 0 2
35874: PPUSH
35875: LD_INT 21
35877: PUSH
35878: LD_INT 3
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PPUSH
35885: CALL_OW 70
35889: ST_TO_ADDR
// if not tmp then
35890: LD_VAR 0 5
35894: NOT
35895: IFFALSE 35899
// exit ;
35897: GO 35963
// if checkLink then
35899: LD_VAR 0 3
35903: IFFALSE 35953
// begin for i in tmp do
35905: LD_ADDR_VAR 0 6
35909: PUSH
35910: LD_VAR 0 5
35914: PUSH
35915: FOR_IN
35916: IFFALSE 35951
// if GetBase ( i ) <> base then
35918: LD_VAR 0 6
35922: PPUSH
35923: CALL_OW 274
35927: PUSH
35928: LD_VAR 0 1
35932: NONEQUAL
35933: IFFALSE 35949
// ComLinkToBase ( base , i ) ;
35935: LD_VAR 0 1
35939: PPUSH
35940: LD_VAR 0 6
35944: PPUSH
35945: CALL_OW 169
35949: GO 35915
35951: POP
35952: POP
// end ; result := tmp ;
35953: LD_ADDR_VAR 0 4
35957: PUSH
35958: LD_VAR 0 5
35962: ST_TO_ADDR
// end ;
35963: LD_VAR 0 4
35967: RET
// export function ComComplete ( units , b ) ; var i ; begin
35968: LD_INT 0
35970: PPUSH
35971: PPUSH
// if not units then
35972: LD_VAR 0 1
35976: NOT
35977: IFFALSE 35981
// exit ;
35979: GO 36071
// for i in units do
35981: LD_ADDR_VAR 0 4
35985: PUSH
35986: LD_VAR 0 1
35990: PUSH
35991: FOR_IN
35992: IFFALSE 36069
// if BuildingStatus ( b ) = bs_build then
35994: LD_VAR 0 2
35998: PPUSH
35999: CALL_OW 461
36003: PUSH
36004: LD_INT 1
36006: EQUAL
36007: IFFALSE 36067
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36009: LD_VAR 0 4
36013: PPUSH
36014: LD_STRING h
36016: PUSH
36017: LD_VAR 0 2
36021: PPUSH
36022: CALL_OW 250
36026: PUSH
36027: LD_VAR 0 2
36031: PPUSH
36032: CALL_OW 251
36036: PUSH
36037: LD_VAR 0 2
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: PUSH
36060: EMPTY
36061: LIST
36062: PPUSH
36063: CALL_OW 446
36067: GO 35991
36069: POP
36070: POP
// end ;
36071: LD_VAR 0 3
36075: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36076: LD_INT 0
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36084: LD_VAR 0 1
36088: NOT
36089: PUSH
36090: LD_VAR 0 1
36094: PPUSH
36095: CALL_OW 263
36099: PUSH
36100: LD_INT 2
36102: NONEQUAL
36103: OR
36104: IFFALSE 36108
// exit ;
36106: GO 36424
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36108: LD_ADDR_VAR 0 6
36112: PUSH
36113: LD_INT 22
36115: PUSH
36116: LD_VAR 0 1
36120: PPUSH
36121: CALL_OW 255
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: LD_INT 30
36135: PUSH
36136: LD_INT 36
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 34
36145: PUSH
36146: LD_INT 31
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PPUSH
36162: CALL_OW 69
36166: ST_TO_ADDR
// if not tmp then
36167: LD_VAR 0 6
36171: NOT
36172: IFFALSE 36176
// exit ;
36174: GO 36424
// result := [ ] ;
36176: LD_ADDR_VAR 0 2
36180: PUSH
36181: EMPTY
36182: ST_TO_ADDR
// for i in tmp do
36183: LD_ADDR_VAR 0 3
36187: PUSH
36188: LD_VAR 0 6
36192: PUSH
36193: FOR_IN
36194: IFFALSE 36265
// begin t := UnitsInside ( i ) ;
36196: LD_ADDR_VAR 0 4
36200: PUSH
36201: LD_VAR 0 3
36205: PPUSH
36206: CALL_OW 313
36210: ST_TO_ADDR
// if t then
36211: LD_VAR 0 4
36215: IFFALSE 36263
// for j in t do
36217: LD_ADDR_VAR 0 7
36221: PUSH
36222: LD_VAR 0 4
36226: PUSH
36227: FOR_IN
36228: IFFALSE 36261
// result := Replace ( result , result + 1 , j ) ;
36230: LD_ADDR_VAR 0 2
36234: PUSH
36235: LD_VAR 0 2
36239: PPUSH
36240: LD_VAR 0 2
36244: PUSH
36245: LD_INT 1
36247: PLUS
36248: PPUSH
36249: LD_VAR 0 7
36253: PPUSH
36254: CALL_OW 1
36258: ST_TO_ADDR
36259: GO 36227
36261: POP
36262: POP
// end ;
36263: GO 36193
36265: POP
36266: POP
// if not result then
36267: LD_VAR 0 2
36271: NOT
36272: IFFALSE 36276
// exit ;
36274: GO 36424
// mech := result [ 1 ] ;
36276: LD_ADDR_VAR 0 5
36280: PUSH
36281: LD_VAR 0 2
36285: PUSH
36286: LD_INT 1
36288: ARRAY
36289: ST_TO_ADDR
// if result > 1 then
36290: LD_VAR 0 2
36294: PUSH
36295: LD_INT 1
36297: GREATER
36298: IFFALSE 36410
// begin for i = 2 to result do
36300: LD_ADDR_VAR 0 3
36304: PUSH
36305: DOUBLE
36306: LD_INT 2
36308: DEC
36309: ST_TO_ADDR
36310: LD_VAR 0 2
36314: PUSH
36315: FOR_TO
36316: IFFALSE 36408
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36318: LD_ADDR_VAR 0 4
36322: PUSH
36323: LD_VAR 0 2
36327: PUSH
36328: LD_VAR 0 3
36332: ARRAY
36333: PPUSH
36334: LD_INT 3
36336: PPUSH
36337: CALL_OW 259
36341: PUSH
36342: LD_VAR 0 2
36346: PUSH
36347: LD_VAR 0 3
36351: ARRAY
36352: PPUSH
36353: CALL_OW 432
36357: MINUS
36358: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36359: LD_VAR 0 4
36363: PUSH
36364: LD_VAR 0 5
36368: PPUSH
36369: LD_INT 3
36371: PPUSH
36372: CALL_OW 259
36376: PUSH
36377: LD_VAR 0 5
36381: PPUSH
36382: CALL_OW 432
36386: MINUS
36387: GREATEREQUAL
36388: IFFALSE 36406
// mech := result [ i ] ;
36390: LD_ADDR_VAR 0 5
36394: PUSH
36395: LD_VAR 0 2
36399: PUSH
36400: LD_VAR 0 3
36404: ARRAY
36405: ST_TO_ADDR
// end ;
36406: GO 36315
36408: POP
36409: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36410: LD_VAR 0 1
36414: PPUSH
36415: LD_VAR 0 5
36419: PPUSH
36420: CALL_OW 135
// end ;
36424: LD_VAR 0 2
36428: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36429: LD_INT 0
36431: PPUSH
36432: PPUSH
36433: PPUSH
36434: PPUSH
36435: PPUSH
36436: PPUSH
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
36441: PPUSH
36442: PPUSH
36443: PPUSH
// result := [ ] ;
36444: LD_ADDR_VAR 0 7
36448: PUSH
36449: EMPTY
36450: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36451: LD_VAR 0 1
36455: PPUSH
36456: CALL_OW 266
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: IN
36471: NOT
36472: IFFALSE 36476
// exit ;
36474: GO 38110
// if name then
36476: LD_VAR 0 3
36480: IFFALSE 36496
// SetBName ( base_dep , name ) ;
36482: LD_VAR 0 1
36486: PPUSH
36487: LD_VAR 0 3
36491: PPUSH
36492: CALL_OW 500
// base := GetBase ( base_dep ) ;
36496: LD_ADDR_VAR 0 15
36500: PUSH
36501: LD_VAR 0 1
36505: PPUSH
36506: CALL_OW 274
36510: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36511: LD_ADDR_VAR 0 16
36515: PUSH
36516: LD_VAR 0 1
36520: PPUSH
36521: CALL_OW 255
36525: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36526: LD_ADDR_VAR 0 17
36530: PUSH
36531: LD_VAR 0 1
36535: PPUSH
36536: CALL_OW 248
36540: ST_TO_ADDR
// if sources then
36541: LD_VAR 0 5
36545: IFFALSE 36592
// for i = 1 to 3 do
36547: LD_ADDR_VAR 0 8
36551: PUSH
36552: DOUBLE
36553: LD_INT 1
36555: DEC
36556: ST_TO_ADDR
36557: LD_INT 3
36559: PUSH
36560: FOR_TO
36561: IFFALSE 36590
// AddResourceType ( base , i , sources [ i ] ) ;
36563: LD_VAR 0 15
36567: PPUSH
36568: LD_VAR 0 8
36572: PPUSH
36573: LD_VAR 0 5
36577: PUSH
36578: LD_VAR 0 8
36582: ARRAY
36583: PPUSH
36584: CALL_OW 276
36588: GO 36560
36590: POP
36591: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36592: LD_ADDR_VAR 0 18
36596: PUSH
36597: LD_VAR 0 15
36601: PPUSH
36602: LD_VAR 0 2
36606: PPUSH
36607: LD_INT 1
36609: PPUSH
36610: CALL 35853 0 3
36614: ST_TO_ADDR
// InitHc ;
36615: CALL_OW 19
// InitUc ;
36619: CALL_OW 18
// uc_side := side ;
36623: LD_ADDR_OWVAR 20
36627: PUSH
36628: LD_VAR 0 16
36632: ST_TO_ADDR
// uc_nation := nation ;
36633: LD_ADDR_OWVAR 21
36637: PUSH
36638: LD_VAR 0 17
36642: ST_TO_ADDR
// if buildings then
36643: LD_VAR 0 18
36647: IFFALSE 37969
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36649: LD_ADDR_VAR 0 19
36653: PUSH
36654: LD_VAR 0 18
36658: PPUSH
36659: LD_INT 2
36661: PUSH
36662: LD_INT 30
36664: PUSH
36665: LD_INT 29
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 30
36674: PUSH
36675: LD_INT 30
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: PPUSH
36687: CALL_OW 72
36691: ST_TO_ADDR
// if tmp then
36692: LD_VAR 0 19
36696: IFFALSE 36744
// for i in tmp do
36698: LD_ADDR_VAR 0 8
36702: PUSH
36703: LD_VAR 0 19
36707: PUSH
36708: FOR_IN
36709: IFFALSE 36742
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36711: LD_VAR 0 8
36715: PPUSH
36716: CALL_OW 250
36720: PPUSH
36721: LD_VAR 0 8
36725: PPUSH
36726: CALL_OW 251
36730: PPUSH
36731: LD_VAR 0 16
36735: PPUSH
36736: CALL_OW 441
36740: GO 36708
36742: POP
36743: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36744: LD_VAR 0 18
36748: PPUSH
36749: LD_INT 2
36751: PUSH
36752: LD_INT 30
36754: PUSH
36755: LD_INT 32
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 30
36764: PUSH
36765: LD_INT 33
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: PPUSH
36777: CALL_OW 72
36781: IFFALSE 36869
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36783: LD_ADDR_VAR 0 8
36787: PUSH
36788: LD_VAR 0 18
36792: PPUSH
36793: LD_INT 2
36795: PUSH
36796: LD_INT 30
36798: PUSH
36799: LD_INT 32
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 30
36808: PUSH
36809: LD_INT 33
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: PPUSH
36821: CALL_OW 72
36825: PUSH
36826: FOR_IN
36827: IFFALSE 36867
// begin if not GetBWeapon ( i ) then
36829: LD_VAR 0 8
36833: PPUSH
36834: CALL_OW 269
36838: NOT
36839: IFFALSE 36865
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36841: LD_VAR 0 8
36845: PPUSH
36846: LD_VAR 0 8
36850: PPUSH
36851: LD_VAR 0 2
36855: PPUSH
36856: CALL 38115 0 2
36860: PPUSH
36861: CALL_OW 431
// end ;
36865: GO 36826
36867: POP
36868: POP
// end ; for i = 1 to personel do
36869: LD_ADDR_VAR 0 8
36873: PUSH
36874: DOUBLE
36875: LD_INT 1
36877: DEC
36878: ST_TO_ADDR
36879: LD_VAR 0 6
36883: PUSH
36884: FOR_TO
36885: IFFALSE 37949
// begin if i > 4 then
36887: LD_VAR 0 8
36891: PUSH
36892: LD_INT 4
36894: GREATER
36895: IFFALSE 36899
// break ;
36897: GO 37949
// case i of 1 :
36899: LD_VAR 0 8
36903: PUSH
36904: LD_INT 1
36906: DOUBLE
36907: EQUAL
36908: IFTRUE 36912
36910: GO 36992
36912: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36913: LD_ADDR_VAR 0 12
36917: PUSH
36918: LD_VAR 0 18
36922: PPUSH
36923: LD_INT 22
36925: PUSH
36926: LD_VAR 0 16
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 58
36937: PUSH
36938: EMPTY
36939: LIST
36940: PUSH
36941: LD_INT 2
36943: PUSH
36944: LD_INT 30
36946: PUSH
36947: LD_INT 32
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 30
36956: PUSH
36957: LD_INT 4
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 30
36966: PUSH
36967: LD_INT 5
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: PPUSH
36985: CALL_OW 72
36989: ST_TO_ADDR
36990: GO 37214
36992: LD_INT 2
36994: DOUBLE
36995: EQUAL
36996: IFTRUE 37000
36998: GO 37062
37000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37001: LD_ADDR_VAR 0 12
37005: PUSH
37006: LD_VAR 0 18
37010: PPUSH
37011: LD_INT 22
37013: PUSH
37014: LD_VAR 0 16
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: LD_INT 30
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 30
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PPUSH
37055: CALL_OW 72
37059: ST_TO_ADDR
37060: GO 37214
37062: LD_INT 3
37064: DOUBLE
37065: EQUAL
37066: IFTRUE 37070
37068: GO 37132
37070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37071: LD_ADDR_VAR 0 12
37075: PUSH
37076: LD_VAR 0 18
37080: PPUSH
37081: LD_INT 22
37083: PUSH
37084: LD_VAR 0 16
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: LD_INT 30
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 30
37108: PUSH
37109: LD_INT 3
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PPUSH
37125: CALL_OW 72
37129: ST_TO_ADDR
37130: GO 37214
37132: LD_INT 4
37134: DOUBLE
37135: EQUAL
37136: IFTRUE 37140
37138: GO 37213
37140: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37141: LD_ADDR_VAR 0 12
37145: PUSH
37146: LD_VAR 0 18
37150: PPUSH
37151: LD_INT 22
37153: PUSH
37154: LD_VAR 0 16
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 2
37165: PUSH
37166: LD_INT 30
37168: PUSH
37169: LD_INT 6
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 30
37178: PUSH
37179: LD_INT 7
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 30
37188: PUSH
37189: LD_INT 8
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PPUSH
37206: CALL_OW 72
37210: ST_TO_ADDR
37211: GO 37214
37213: POP
// if i = 1 then
37214: LD_VAR 0 8
37218: PUSH
37219: LD_INT 1
37221: EQUAL
37222: IFFALSE 37333
// begin tmp := [ ] ;
37224: LD_ADDR_VAR 0 19
37228: PUSH
37229: EMPTY
37230: ST_TO_ADDR
// for j in f do
37231: LD_ADDR_VAR 0 9
37235: PUSH
37236: LD_VAR 0 12
37240: PUSH
37241: FOR_IN
37242: IFFALSE 37315
// if GetBType ( j ) = b_bunker then
37244: LD_VAR 0 9
37248: PPUSH
37249: CALL_OW 266
37253: PUSH
37254: LD_INT 32
37256: EQUAL
37257: IFFALSE 37284
// tmp := Insert ( tmp , 1 , j ) else
37259: LD_ADDR_VAR 0 19
37263: PUSH
37264: LD_VAR 0 19
37268: PPUSH
37269: LD_INT 1
37271: PPUSH
37272: LD_VAR 0 9
37276: PPUSH
37277: CALL_OW 2
37281: ST_TO_ADDR
37282: GO 37313
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37284: LD_ADDR_VAR 0 19
37288: PUSH
37289: LD_VAR 0 19
37293: PPUSH
37294: LD_VAR 0 19
37298: PUSH
37299: LD_INT 1
37301: PLUS
37302: PPUSH
37303: LD_VAR 0 9
37307: PPUSH
37308: CALL_OW 2
37312: ST_TO_ADDR
37313: GO 37241
37315: POP
37316: POP
// if tmp then
37317: LD_VAR 0 19
37321: IFFALSE 37333
// f := tmp ;
37323: LD_ADDR_VAR 0 12
37327: PUSH
37328: LD_VAR 0 19
37332: ST_TO_ADDR
// end ; x := personel [ i ] ;
37333: LD_ADDR_VAR 0 13
37337: PUSH
37338: LD_VAR 0 6
37342: PUSH
37343: LD_VAR 0 8
37347: ARRAY
37348: ST_TO_ADDR
// if x = - 1 then
37349: LD_VAR 0 13
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: EQUAL
37358: IFFALSE 37567
// begin for j in f do
37360: LD_ADDR_VAR 0 9
37364: PUSH
37365: LD_VAR 0 12
37369: PUSH
37370: FOR_IN
37371: IFFALSE 37563
// repeat InitHc ;
37373: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37377: LD_VAR 0 9
37381: PPUSH
37382: CALL_OW 266
37386: PUSH
37387: LD_INT 5
37389: EQUAL
37390: IFFALSE 37460
// begin if UnitsInside ( j ) < 3 then
37392: LD_VAR 0 9
37396: PPUSH
37397: CALL_OW 313
37401: PUSH
37402: LD_INT 3
37404: LESS
37405: IFFALSE 37441
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37407: LD_INT 0
37409: PPUSH
37410: LD_INT 5
37412: PUSH
37413: LD_INT 8
37415: PUSH
37416: LD_INT 9
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: PUSH
37424: LD_VAR 0 17
37428: ARRAY
37429: PPUSH
37430: LD_VAR 0 4
37434: PPUSH
37435: CALL_OW 380
37439: GO 37458
// PrepareHuman ( false , i , skill ) ;
37441: LD_INT 0
37443: PPUSH
37444: LD_VAR 0 8
37448: PPUSH
37449: LD_VAR 0 4
37453: PPUSH
37454: CALL_OW 380
// end else
37458: GO 37477
// PrepareHuman ( false , i , skill ) ;
37460: LD_INT 0
37462: PPUSH
37463: LD_VAR 0 8
37467: PPUSH
37468: LD_VAR 0 4
37472: PPUSH
37473: CALL_OW 380
// un := CreateHuman ;
37477: LD_ADDR_VAR 0 14
37481: PUSH
37482: CALL_OW 44
37486: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37487: LD_ADDR_VAR 0 7
37491: PUSH
37492: LD_VAR 0 7
37496: PPUSH
37497: LD_INT 1
37499: PPUSH
37500: LD_VAR 0 14
37504: PPUSH
37505: CALL_OW 2
37509: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37510: LD_VAR 0 14
37514: PPUSH
37515: LD_VAR 0 9
37519: PPUSH
37520: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37524: LD_VAR 0 9
37528: PPUSH
37529: CALL_OW 313
37533: PUSH
37534: LD_INT 6
37536: EQUAL
37537: PUSH
37538: LD_VAR 0 9
37542: PPUSH
37543: CALL_OW 266
37547: PUSH
37548: LD_INT 32
37550: PUSH
37551: LD_INT 31
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: IN
37558: OR
37559: IFFALSE 37373
37561: GO 37370
37563: POP
37564: POP
// end else
37565: GO 37947
// for j = 1 to x do
37567: LD_ADDR_VAR 0 9
37571: PUSH
37572: DOUBLE
37573: LD_INT 1
37575: DEC
37576: ST_TO_ADDR
37577: LD_VAR 0 13
37581: PUSH
37582: FOR_TO
37583: IFFALSE 37945
// begin InitHc ;
37585: CALL_OW 19
// if not f then
37589: LD_VAR 0 12
37593: NOT
37594: IFFALSE 37683
// begin PrepareHuman ( false , i , skill ) ;
37596: LD_INT 0
37598: PPUSH
37599: LD_VAR 0 8
37603: PPUSH
37604: LD_VAR 0 4
37608: PPUSH
37609: CALL_OW 380
// un := CreateHuman ;
37613: LD_ADDR_VAR 0 14
37617: PUSH
37618: CALL_OW 44
37622: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37623: LD_ADDR_VAR 0 7
37627: PUSH
37628: LD_VAR 0 7
37632: PPUSH
37633: LD_INT 1
37635: PPUSH
37636: LD_VAR 0 14
37640: PPUSH
37641: CALL_OW 2
37645: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37646: LD_VAR 0 14
37650: PPUSH
37651: LD_VAR 0 1
37655: PPUSH
37656: CALL_OW 250
37660: PPUSH
37661: LD_VAR 0 1
37665: PPUSH
37666: CALL_OW 251
37670: PPUSH
37671: LD_INT 10
37673: PPUSH
37674: LD_INT 0
37676: PPUSH
37677: CALL_OW 50
// continue ;
37681: GO 37582
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37683: LD_VAR 0 12
37687: PUSH
37688: LD_INT 1
37690: ARRAY
37691: PPUSH
37692: CALL_OW 313
37696: PUSH
37697: LD_VAR 0 12
37701: PUSH
37702: LD_INT 1
37704: ARRAY
37705: PPUSH
37706: CALL_OW 266
37710: PUSH
37711: LD_INT 32
37713: PUSH
37714: LD_INT 31
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: IN
37721: AND
37722: PUSH
37723: LD_VAR 0 12
37727: PUSH
37728: LD_INT 1
37730: ARRAY
37731: PPUSH
37732: CALL_OW 313
37736: PUSH
37737: LD_INT 6
37739: EQUAL
37740: OR
37741: IFFALSE 37761
// f := Delete ( f , 1 ) ;
37743: LD_ADDR_VAR 0 12
37747: PUSH
37748: LD_VAR 0 12
37752: PPUSH
37753: LD_INT 1
37755: PPUSH
37756: CALL_OW 3
37760: ST_TO_ADDR
// if not f then
37761: LD_VAR 0 12
37765: NOT
37766: IFFALSE 37784
// begin x := x + 2 ;
37768: LD_ADDR_VAR 0 13
37772: PUSH
37773: LD_VAR 0 13
37777: PUSH
37778: LD_INT 2
37780: PLUS
37781: ST_TO_ADDR
// continue ;
37782: GO 37582
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37784: LD_VAR 0 12
37788: PUSH
37789: LD_INT 1
37791: ARRAY
37792: PPUSH
37793: CALL_OW 266
37797: PUSH
37798: LD_INT 5
37800: EQUAL
37801: IFFALSE 37875
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37803: LD_VAR 0 12
37807: PUSH
37808: LD_INT 1
37810: ARRAY
37811: PPUSH
37812: CALL_OW 313
37816: PUSH
37817: LD_INT 3
37819: LESS
37820: IFFALSE 37856
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37822: LD_INT 0
37824: PPUSH
37825: LD_INT 5
37827: PUSH
37828: LD_INT 8
37830: PUSH
37831: LD_INT 9
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: PUSH
37839: LD_VAR 0 17
37843: ARRAY
37844: PPUSH
37845: LD_VAR 0 4
37849: PPUSH
37850: CALL_OW 380
37854: GO 37873
// PrepareHuman ( false , i , skill ) ;
37856: LD_INT 0
37858: PPUSH
37859: LD_VAR 0 8
37863: PPUSH
37864: LD_VAR 0 4
37868: PPUSH
37869: CALL_OW 380
// end else
37873: GO 37892
// PrepareHuman ( false , i , skill ) ;
37875: LD_INT 0
37877: PPUSH
37878: LD_VAR 0 8
37882: PPUSH
37883: LD_VAR 0 4
37887: PPUSH
37888: CALL_OW 380
// un := CreateHuman ;
37892: LD_ADDR_VAR 0 14
37896: PUSH
37897: CALL_OW 44
37901: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37902: LD_ADDR_VAR 0 7
37906: PUSH
37907: LD_VAR 0 7
37911: PPUSH
37912: LD_INT 1
37914: PPUSH
37915: LD_VAR 0 14
37919: PPUSH
37920: CALL_OW 2
37924: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37925: LD_VAR 0 14
37929: PPUSH
37930: LD_VAR 0 12
37934: PUSH
37935: LD_INT 1
37937: ARRAY
37938: PPUSH
37939: CALL_OW 52
// end ;
37943: GO 37582
37945: POP
37946: POP
// end ;
37947: GO 36884
37949: POP
37950: POP
// result := result ^ buildings ;
37951: LD_ADDR_VAR 0 7
37955: PUSH
37956: LD_VAR 0 7
37960: PUSH
37961: LD_VAR 0 18
37965: ADD
37966: ST_TO_ADDR
// end else
37967: GO 38110
// begin for i = 1 to personel do
37969: LD_ADDR_VAR 0 8
37973: PUSH
37974: DOUBLE
37975: LD_INT 1
37977: DEC
37978: ST_TO_ADDR
37979: LD_VAR 0 6
37983: PUSH
37984: FOR_TO
37985: IFFALSE 38108
// begin if i > 4 then
37987: LD_VAR 0 8
37991: PUSH
37992: LD_INT 4
37994: GREATER
37995: IFFALSE 37999
// break ;
37997: GO 38108
// x := personel [ i ] ;
37999: LD_ADDR_VAR 0 13
38003: PUSH
38004: LD_VAR 0 6
38008: PUSH
38009: LD_VAR 0 8
38013: ARRAY
38014: ST_TO_ADDR
// if x = - 1 then
38015: LD_VAR 0 13
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: EQUAL
38024: IFFALSE 38028
// continue ;
38026: GO 37984
// PrepareHuman ( false , i , skill ) ;
38028: LD_INT 0
38030: PPUSH
38031: LD_VAR 0 8
38035: PPUSH
38036: LD_VAR 0 4
38040: PPUSH
38041: CALL_OW 380
// un := CreateHuman ;
38045: LD_ADDR_VAR 0 14
38049: PUSH
38050: CALL_OW 44
38054: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38055: LD_VAR 0 14
38059: PPUSH
38060: LD_VAR 0 1
38064: PPUSH
38065: CALL_OW 250
38069: PPUSH
38070: LD_VAR 0 1
38074: PPUSH
38075: CALL_OW 251
38079: PPUSH
38080: LD_INT 10
38082: PPUSH
38083: LD_INT 0
38085: PPUSH
38086: CALL_OW 50
// result := result ^ un ;
38090: LD_ADDR_VAR 0 7
38094: PUSH
38095: LD_VAR 0 7
38099: PUSH
38100: LD_VAR 0 14
38104: ADD
38105: ST_TO_ADDR
// end ;
38106: GO 37984
38108: POP
38109: POP
// end ; end ;
38110: LD_VAR 0 7
38114: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38115: LD_INT 0
38117: PPUSH
38118: PPUSH
38119: PPUSH
38120: PPUSH
38121: PPUSH
38122: PPUSH
38123: PPUSH
38124: PPUSH
38125: PPUSH
38126: PPUSH
38127: PPUSH
38128: PPUSH
38129: PPUSH
38130: PPUSH
38131: PPUSH
38132: PPUSH
// result := false ;
38133: LD_ADDR_VAR 0 3
38137: PUSH
38138: LD_INT 0
38140: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38141: LD_VAR 0 1
38145: NOT
38146: PUSH
38147: LD_VAR 0 1
38151: PPUSH
38152: CALL_OW 266
38156: PUSH
38157: LD_INT 32
38159: PUSH
38160: LD_INT 33
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: IN
38167: NOT
38168: OR
38169: IFFALSE 38173
// exit ;
38171: GO 39282
// nat := GetNation ( tower ) ;
38173: LD_ADDR_VAR 0 12
38177: PUSH
38178: LD_VAR 0 1
38182: PPUSH
38183: CALL_OW 248
38187: ST_TO_ADDR
// side := GetSide ( tower ) ;
38188: LD_ADDR_VAR 0 16
38192: PUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL_OW 255
38202: ST_TO_ADDR
// x := GetX ( tower ) ;
38203: LD_ADDR_VAR 0 10
38207: PUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 250
38217: ST_TO_ADDR
// y := GetY ( tower ) ;
38218: LD_ADDR_VAR 0 11
38222: PUSH
38223: LD_VAR 0 1
38227: PPUSH
38228: CALL_OW 251
38232: ST_TO_ADDR
// if not x or not y then
38233: LD_VAR 0 10
38237: NOT
38238: PUSH
38239: LD_VAR 0 11
38243: NOT
38244: OR
38245: IFFALSE 38249
// exit ;
38247: GO 39282
// weapon := 0 ;
38249: LD_ADDR_VAR 0 18
38253: PUSH
38254: LD_INT 0
38256: ST_TO_ADDR
// fac_list := [ ] ;
38257: LD_ADDR_VAR 0 17
38261: PUSH
38262: EMPTY
38263: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38264: LD_ADDR_VAR 0 6
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 274
38278: PPUSH
38279: LD_VAR 0 2
38283: PPUSH
38284: LD_INT 0
38286: PPUSH
38287: CALL 35853 0 3
38291: PPUSH
38292: LD_INT 30
38294: PUSH
38295: LD_INT 3
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PPUSH
38302: CALL_OW 72
38306: ST_TO_ADDR
// if not factories then
38307: LD_VAR 0 6
38311: NOT
38312: IFFALSE 38316
// exit ;
38314: GO 39282
// for i in factories do
38316: LD_ADDR_VAR 0 8
38320: PUSH
38321: LD_VAR 0 6
38325: PUSH
38326: FOR_IN
38327: IFFALSE 38352
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38329: LD_ADDR_VAR 0 17
38333: PUSH
38334: LD_VAR 0 17
38338: PUSH
38339: LD_VAR 0 8
38343: PPUSH
38344: CALL_OW 478
38348: UNION
38349: ST_TO_ADDR
38350: GO 38326
38352: POP
38353: POP
// if not fac_list then
38354: LD_VAR 0 17
38358: NOT
38359: IFFALSE 38363
// exit ;
38361: GO 39282
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38363: LD_ADDR_VAR 0 5
38367: PUSH
38368: LD_INT 4
38370: PUSH
38371: LD_INT 5
38373: PUSH
38374: LD_INT 9
38376: PUSH
38377: LD_INT 10
38379: PUSH
38380: LD_INT 6
38382: PUSH
38383: LD_INT 7
38385: PUSH
38386: LD_INT 11
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 27
38400: PUSH
38401: LD_INT 28
38403: PUSH
38404: LD_INT 26
38406: PUSH
38407: LD_INT 30
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 43
38418: PUSH
38419: LD_INT 44
38421: PUSH
38422: LD_INT 46
38424: PUSH
38425: LD_INT 45
38427: PUSH
38428: LD_INT 47
38430: PUSH
38431: LD_INT 49
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: PUSH
38447: LD_VAR 0 12
38451: ARRAY
38452: ST_TO_ADDR
// list := list isect fac_list ;
38453: LD_ADDR_VAR 0 5
38457: PUSH
38458: LD_VAR 0 5
38462: PUSH
38463: LD_VAR 0 17
38467: ISECT
38468: ST_TO_ADDR
// if not list then
38469: LD_VAR 0 5
38473: NOT
38474: IFFALSE 38478
// exit ;
38476: GO 39282
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38478: LD_VAR 0 12
38482: PUSH
38483: LD_INT 3
38485: EQUAL
38486: PUSH
38487: LD_INT 49
38489: PUSH
38490: LD_VAR 0 5
38494: IN
38495: AND
38496: PUSH
38497: LD_INT 31
38499: PPUSH
38500: LD_VAR 0 16
38504: PPUSH
38505: CALL_OW 321
38509: PUSH
38510: LD_INT 2
38512: EQUAL
38513: AND
38514: IFFALSE 38574
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38516: LD_INT 22
38518: PUSH
38519: LD_VAR 0 16
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 35
38530: PUSH
38531: LD_INT 49
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 91
38540: PUSH
38541: LD_VAR 0 1
38545: PUSH
38546: LD_INT 10
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: PPUSH
38559: CALL_OW 69
38563: NOT
38564: IFFALSE 38574
// weapon := ru_time_lapser ;
38566: LD_ADDR_VAR 0 18
38570: PUSH
38571: LD_INT 49
38573: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38574: LD_VAR 0 12
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: IN
38589: PUSH
38590: LD_INT 11
38592: PUSH
38593: LD_VAR 0 5
38597: IN
38598: PUSH
38599: LD_INT 30
38601: PUSH
38602: LD_VAR 0 5
38606: IN
38607: OR
38608: AND
38609: PUSH
38610: LD_INT 6
38612: PPUSH
38613: LD_VAR 0 16
38617: PPUSH
38618: CALL_OW 321
38622: PUSH
38623: LD_INT 2
38625: EQUAL
38626: AND
38627: IFFALSE 38792
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38629: LD_INT 22
38631: PUSH
38632: LD_VAR 0 16
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: LD_INT 35
38646: PUSH
38647: LD_INT 11
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 35
38656: PUSH
38657: LD_INT 30
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 91
38671: PUSH
38672: LD_VAR 0 1
38676: PUSH
38677: LD_INT 18
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: PPUSH
38690: CALL_OW 69
38694: NOT
38695: PUSH
38696: LD_INT 22
38698: PUSH
38699: LD_VAR 0 16
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 30
38713: PUSH
38714: LD_INT 32
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 30
38723: PUSH
38724: LD_INT 33
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 91
38738: PUSH
38739: LD_VAR 0 1
38743: PUSH
38744: LD_INT 12
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: LIST
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: PUSH
38757: EMPTY
38758: LIST
38759: PPUSH
38760: CALL_OW 69
38764: PUSH
38765: LD_INT 2
38767: GREATER
38768: AND
38769: IFFALSE 38792
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38771: LD_ADDR_VAR 0 18
38775: PUSH
38776: LD_INT 11
38778: PUSH
38779: LD_INT 30
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_VAR 0 12
38790: ARRAY
38791: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38792: LD_VAR 0 18
38796: NOT
38797: PUSH
38798: LD_INT 40
38800: PPUSH
38801: LD_VAR 0 16
38805: PPUSH
38806: CALL_OW 321
38810: PUSH
38811: LD_INT 2
38813: EQUAL
38814: AND
38815: PUSH
38816: LD_INT 7
38818: PUSH
38819: LD_VAR 0 5
38823: IN
38824: PUSH
38825: LD_INT 28
38827: PUSH
38828: LD_VAR 0 5
38832: IN
38833: OR
38834: PUSH
38835: LD_INT 45
38837: PUSH
38838: LD_VAR 0 5
38842: IN
38843: OR
38844: AND
38845: IFFALSE 39099
// begin hex := GetHexInfo ( x , y ) ;
38847: LD_ADDR_VAR 0 4
38851: PUSH
38852: LD_VAR 0 10
38856: PPUSH
38857: LD_VAR 0 11
38861: PPUSH
38862: CALL_OW 546
38866: ST_TO_ADDR
// if hex [ 1 ] then
38867: LD_VAR 0 4
38871: PUSH
38872: LD_INT 1
38874: ARRAY
38875: IFFALSE 38879
// exit ;
38877: GO 39282
// height := hex [ 2 ] ;
38879: LD_ADDR_VAR 0 15
38883: PUSH
38884: LD_VAR 0 4
38888: PUSH
38889: LD_INT 2
38891: ARRAY
38892: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38893: LD_ADDR_VAR 0 14
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: LD_INT 3
38906: PUSH
38907: LD_INT 5
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: ST_TO_ADDR
// for i in tmp do
38916: LD_ADDR_VAR 0 8
38920: PUSH
38921: LD_VAR 0 14
38925: PUSH
38926: FOR_IN
38927: IFFALSE 39097
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38929: LD_ADDR_VAR 0 9
38933: PUSH
38934: LD_VAR 0 10
38938: PPUSH
38939: LD_VAR 0 8
38943: PPUSH
38944: LD_INT 5
38946: PPUSH
38947: CALL_OW 272
38951: PUSH
38952: LD_VAR 0 11
38956: PPUSH
38957: LD_VAR 0 8
38961: PPUSH
38962: LD_INT 5
38964: PPUSH
38965: CALL_OW 273
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38974: LD_VAR 0 9
38978: PUSH
38979: LD_INT 1
38981: ARRAY
38982: PPUSH
38983: LD_VAR 0 9
38987: PUSH
38988: LD_INT 2
38990: ARRAY
38991: PPUSH
38992: CALL_OW 488
38996: IFFALSE 39095
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38998: LD_ADDR_VAR 0 4
39002: PUSH
39003: LD_VAR 0 9
39007: PUSH
39008: LD_INT 1
39010: ARRAY
39011: PPUSH
39012: LD_VAR 0 9
39016: PUSH
39017: LD_INT 2
39019: ARRAY
39020: PPUSH
39021: CALL_OW 546
39025: ST_TO_ADDR
// if hex [ 1 ] then
39026: LD_VAR 0 4
39030: PUSH
39031: LD_INT 1
39033: ARRAY
39034: IFFALSE 39038
// continue ;
39036: GO 38926
// h := hex [ 2 ] ;
39038: LD_ADDR_VAR 0 13
39042: PUSH
39043: LD_VAR 0 4
39047: PUSH
39048: LD_INT 2
39050: ARRAY
39051: ST_TO_ADDR
// if h + 7 < height then
39052: LD_VAR 0 13
39056: PUSH
39057: LD_INT 7
39059: PLUS
39060: PUSH
39061: LD_VAR 0 15
39065: LESS
39066: IFFALSE 39095
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39068: LD_ADDR_VAR 0 18
39072: PUSH
39073: LD_INT 7
39075: PUSH
39076: LD_INT 28
39078: PUSH
39079: LD_INT 45
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: LIST
39086: PUSH
39087: LD_VAR 0 12
39091: ARRAY
39092: ST_TO_ADDR
// break ;
39093: GO 39097
// end ; end ; end ;
39095: GO 38926
39097: POP
39098: POP
// end ; if not weapon then
39099: LD_VAR 0 18
39103: NOT
39104: IFFALSE 39164
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39106: LD_ADDR_VAR 0 5
39110: PUSH
39111: LD_VAR 0 5
39115: PUSH
39116: LD_INT 11
39118: PUSH
39119: LD_INT 30
39121: PUSH
39122: LD_INT 49
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: DIFF
39130: ST_TO_ADDR
// if not list then
39131: LD_VAR 0 5
39135: NOT
39136: IFFALSE 39140
// exit ;
39138: GO 39282
// weapon := list [ rand ( 1 , list ) ] ;
39140: LD_ADDR_VAR 0 18
39144: PUSH
39145: LD_VAR 0 5
39149: PUSH
39150: LD_INT 1
39152: PPUSH
39153: LD_VAR 0 5
39157: PPUSH
39158: CALL_OW 12
39162: ARRAY
39163: ST_TO_ADDR
// end ; if weapon then
39164: LD_VAR 0 18
39168: IFFALSE 39282
// begin tmp := CostOfWeapon ( weapon ) ;
39170: LD_ADDR_VAR 0 14
39174: PUSH
39175: LD_VAR 0 18
39179: PPUSH
39180: CALL_OW 451
39184: ST_TO_ADDR
// j := GetBase ( tower ) ;
39185: LD_ADDR_VAR 0 9
39189: PUSH
39190: LD_VAR 0 1
39194: PPUSH
39195: CALL_OW 274
39199: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39200: LD_VAR 0 9
39204: PPUSH
39205: LD_INT 1
39207: PPUSH
39208: CALL_OW 275
39212: PUSH
39213: LD_VAR 0 14
39217: PUSH
39218: LD_INT 1
39220: ARRAY
39221: GREATEREQUAL
39222: PUSH
39223: LD_VAR 0 9
39227: PPUSH
39228: LD_INT 2
39230: PPUSH
39231: CALL_OW 275
39235: PUSH
39236: LD_VAR 0 14
39240: PUSH
39241: LD_INT 2
39243: ARRAY
39244: GREATEREQUAL
39245: AND
39246: PUSH
39247: LD_VAR 0 9
39251: PPUSH
39252: LD_INT 3
39254: PPUSH
39255: CALL_OW 275
39259: PUSH
39260: LD_VAR 0 14
39264: PUSH
39265: LD_INT 3
39267: ARRAY
39268: GREATEREQUAL
39269: AND
39270: IFFALSE 39282
// result := weapon ;
39272: LD_ADDR_VAR 0 3
39276: PUSH
39277: LD_VAR 0 18
39281: ST_TO_ADDR
// end ; end ;
39282: LD_VAR 0 3
39286: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39287: LD_INT 0
39289: PPUSH
39290: PPUSH
// result := true ;
39291: LD_ADDR_VAR 0 3
39295: PUSH
39296: LD_INT 1
39298: ST_TO_ADDR
// if array1 = array2 then
39299: LD_VAR 0 1
39303: PUSH
39304: LD_VAR 0 2
39308: EQUAL
39309: IFFALSE 39369
// begin for i = 1 to array1 do
39311: LD_ADDR_VAR 0 4
39315: PUSH
39316: DOUBLE
39317: LD_INT 1
39319: DEC
39320: ST_TO_ADDR
39321: LD_VAR 0 1
39325: PUSH
39326: FOR_TO
39327: IFFALSE 39365
// if array1 [ i ] <> array2 [ i ] then
39329: LD_VAR 0 1
39333: PUSH
39334: LD_VAR 0 4
39338: ARRAY
39339: PUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_VAR 0 4
39349: ARRAY
39350: NONEQUAL
39351: IFFALSE 39363
// begin result := false ;
39353: LD_ADDR_VAR 0 3
39357: PUSH
39358: LD_INT 0
39360: ST_TO_ADDR
// break ;
39361: GO 39365
// end ;
39363: GO 39326
39365: POP
39366: POP
// end else
39367: GO 39377
// result := false ;
39369: LD_ADDR_VAR 0 3
39373: PUSH
39374: LD_INT 0
39376: ST_TO_ADDR
// end ;
39377: LD_VAR 0 3
39381: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39382: LD_INT 0
39384: PPUSH
39385: PPUSH
// if not array1 or not array2 then
39386: LD_VAR 0 1
39390: NOT
39391: PUSH
39392: LD_VAR 0 2
39396: NOT
39397: OR
39398: IFFALSE 39402
// exit ;
39400: GO 39466
// result := true ;
39402: LD_ADDR_VAR 0 3
39406: PUSH
39407: LD_INT 1
39409: ST_TO_ADDR
// for i = 1 to array1 do
39410: LD_ADDR_VAR 0 4
39414: PUSH
39415: DOUBLE
39416: LD_INT 1
39418: DEC
39419: ST_TO_ADDR
39420: LD_VAR 0 1
39424: PUSH
39425: FOR_TO
39426: IFFALSE 39464
// if array1 [ i ] <> array2 [ i ] then
39428: LD_VAR 0 1
39432: PUSH
39433: LD_VAR 0 4
39437: ARRAY
39438: PUSH
39439: LD_VAR 0 2
39443: PUSH
39444: LD_VAR 0 4
39448: ARRAY
39449: NONEQUAL
39450: IFFALSE 39462
// begin result := false ;
39452: LD_ADDR_VAR 0 3
39456: PUSH
39457: LD_INT 0
39459: ST_TO_ADDR
// break ;
39460: GO 39464
// end ;
39462: GO 39425
39464: POP
39465: POP
// end ;
39466: LD_VAR 0 3
39470: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39471: LD_INT 0
39473: PPUSH
39474: PPUSH
39475: PPUSH
// pom := GetBase ( fac ) ;
39476: LD_ADDR_VAR 0 5
39480: PUSH
39481: LD_VAR 0 1
39485: PPUSH
39486: CALL_OW 274
39490: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39491: LD_ADDR_VAR 0 4
39495: PUSH
39496: LD_VAR 0 2
39500: PUSH
39501: LD_INT 1
39503: ARRAY
39504: PPUSH
39505: LD_VAR 0 2
39509: PUSH
39510: LD_INT 2
39512: ARRAY
39513: PPUSH
39514: LD_VAR 0 2
39518: PUSH
39519: LD_INT 3
39521: ARRAY
39522: PPUSH
39523: LD_VAR 0 2
39527: PUSH
39528: LD_INT 4
39530: ARRAY
39531: PPUSH
39532: CALL_OW 449
39536: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39537: LD_ADDR_VAR 0 3
39541: PUSH
39542: LD_VAR 0 5
39546: PPUSH
39547: LD_INT 1
39549: PPUSH
39550: CALL_OW 275
39554: PUSH
39555: LD_VAR 0 4
39559: PUSH
39560: LD_INT 1
39562: ARRAY
39563: GREATEREQUAL
39564: PUSH
39565: LD_VAR 0 5
39569: PPUSH
39570: LD_INT 2
39572: PPUSH
39573: CALL_OW 275
39577: PUSH
39578: LD_VAR 0 4
39582: PUSH
39583: LD_INT 2
39585: ARRAY
39586: GREATEREQUAL
39587: AND
39588: PUSH
39589: LD_VAR 0 5
39593: PPUSH
39594: LD_INT 3
39596: PPUSH
39597: CALL_OW 275
39601: PUSH
39602: LD_VAR 0 4
39606: PUSH
39607: LD_INT 3
39609: ARRAY
39610: GREATEREQUAL
39611: AND
39612: ST_TO_ADDR
// end ;
39613: LD_VAR 0 3
39617: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39618: LD_INT 0
39620: PPUSH
39621: PPUSH
39622: PPUSH
39623: PPUSH
// pom := GetBase ( building ) ;
39624: LD_ADDR_VAR 0 3
39628: PUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 274
39638: ST_TO_ADDR
// if not pom then
39639: LD_VAR 0 3
39643: NOT
39644: IFFALSE 39648
// exit ;
39646: GO 39818
// btype := GetBType ( building ) ;
39648: LD_ADDR_VAR 0 5
39652: PUSH
39653: LD_VAR 0 1
39657: PPUSH
39658: CALL_OW 266
39662: ST_TO_ADDR
// if btype = b_armoury then
39663: LD_VAR 0 5
39667: PUSH
39668: LD_INT 4
39670: EQUAL
39671: IFFALSE 39681
// btype := b_barracks ;
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: LD_INT 5
39680: ST_TO_ADDR
// if btype = b_depot then
39681: LD_VAR 0 5
39685: PUSH
39686: LD_INT 0
39688: EQUAL
39689: IFFALSE 39699
// btype := b_warehouse ;
39691: LD_ADDR_VAR 0 5
39695: PUSH
39696: LD_INT 1
39698: ST_TO_ADDR
// if btype = b_workshop then
39699: LD_VAR 0 5
39703: PUSH
39704: LD_INT 2
39706: EQUAL
39707: IFFALSE 39717
// btype := b_factory ;
39709: LD_ADDR_VAR 0 5
39713: PUSH
39714: LD_INT 3
39716: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39717: LD_ADDR_VAR 0 4
39721: PUSH
39722: LD_VAR 0 5
39726: PPUSH
39727: LD_VAR 0 1
39731: PPUSH
39732: CALL_OW 248
39736: PPUSH
39737: CALL_OW 450
39741: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39742: LD_ADDR_VAR 0 2
39746: PUSH
39747: LD_VAR 0 3
39751: PPUSH
39752: LD_INT 1
39754: PPUSH
39755: CALL_OW 275
39759: PUSH
39760: LD_VAR 0 4
39764: PUSH
39765: LD_INT 1
39767: ARRAY
39768: GREATEREQUAL
39769: PUSH
39770: LD_VAR 0 3
39774: PPUSH
39775: LD_INT 2
39777: PPUSH
39778: CALL_OW 275
39782: PUSH
39783: LD_VAR 0 4
39787: PUSH
39788: LD_INT 2
39790: ARRAY
39791: GREATEREQUAL
39792: AND
39793: PUSH
39794: LD_VAR 0 3
39798: PPUSH
39799: LD_INT 3
39801: PPUSH
39802: CALL_OW 275
39806: PUSH
39807: LD_VAR 0 4
39811: PUSH
39812: LD_INT 3
39814: ARRAY
39815: GREATEREQUAL
39816: AND
39817: ST_TO_ADDR
// end ;
39818: LD_VAR 0 2
39822: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39823: LD_INT 0
39825: PPUSH
39826: PPUSH
39827: PPUSH
// pom := GetBase ( building ) ;
39828: LD_ADDR_VAR 0 4
39832: PUSH
39833: LD_VAR 0 1
39837: PPUSH
39838: CALL_OW 274
39842: ST_TO_ADDR
// if not pom then
39843: LD_VAR 0 4
39847: NOT
39848: IFFALSE 39852
// exit ;
39850: GO 39953
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39852: LD_ADDR_VAR 0 5
39856: PUSH
39857: LD_VAR 0 2
39861: PPUSH
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 248
39871: PPUSH
39872: CALL_OW 450
39876: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39877: LD_ADDR_VAR 0 3
39881: PUSH
39882: LD_VAR 0 4
39886: PPUSH
39887: LD_INT 1
39889: PPUSH
39890: CALL_OW 275
39894: PUSH
39895: LD_VAR 0 5
39899: PUSH
39900: LD_INT 1
39902: ARRAY
39903: GREATEREQUAL
39904: PUSH
39905: LD_VAR 0 4
39909: PPUSH
39910: LD_INT 2
39912: PPUSH
39913: CALL_OW 275
39917: PUSH
39918: LD_VAR 0 5
39922: PUSH
39923: LD_INT 2
39925: ARRAY
39926: GREATEREQUAL
39927: AND
39928: PUSH
39929: LD_VAR 0 4
39933: PPUSH
39934: LD_INT 3
39936: PPUSH
39937: CALL_OW 275
39941: PUSH
39942: LD_VAR 0 5
39946: PUSH
39947: LD_INT 3
39949: ARRAY
39950: GREATEREQUAL
39951: AND
39952: ST_TO_ADDR
// end ;
39953: LD_VAR 0 3
39957: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39958: LD_INT 0
39960: PPUSH
39961: PPUSH
39962: PPUSH
39963: PPUSH
39964: PPUSH
39965: PPUSH
39966: PPUSH
39967: PPUSH
39968: PPUSH
39969: PPUSH
39970: PPUSH
// result := false ;
39971: LD_ADDR_VAR 0 8
39975: PUSH
39976: LD_INT 0
39978: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39979: LD_VAR 0 5
39983: NOT
39984: PUSH
39985: LD_VAR 0 1
39989: NOT
39990: OR
39991: PUSH
39992: LD_VAR 0 2
39996: NOT
39997: OR
39998: PUSH
39999: LD_VAR 0 3
40003: NOT
40004: OR
40005: IFFALSE 40009
// exit ;
40007: GO 40823
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40009: LD_ADDR_VAR 0 14
40013: PUSH
40014: LD_VAR 0 1
40018: PPUSH
40019: LD_VAR 0 2
40023: PPUSH
40024: LD_VAR 0 3
40028: PPUSH
40029: LD_VAR 0 4
40033: PPUSH
40034: LD_VAR 0 5
40038: PUSH
40039: LD_INT 1
40041: ARRAY
40042: PPUSH
40043: CALL_OW 248
40047: PPUSH
40048: LD_INT 0
40050: PPUSH
40051: CALL 42076 0 6
40055: ST_TO_ADDR
// if not hexes then
40056: LD_VAR 0 14
40060: NOT
40061: IFFALSE 40065
// exit ;
40063: GO 40823
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40065: LD_ADDR_VAR 0 17
40069: PUSH
40070: LD_VAR 0 5
40074: PPUSH
40075: LD_INT 22
40077: PUSH
40078: LD_VAR 0 13
40082: PPUSH
40083: CALL_OW 255
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 30
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 30
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PPUSH
40124: CALL_OW 72
40128: ST_TO_ADDR
// for i = 1 to hexes do
40129: LD_ADDR_VAR 0 9
40133: PUSH
40134: DOUBLE
40135: LD_INT 1
40137: DEC
40138: ST_TO_ADDR
40139: LD_VAR 0 14
40143: PUSH
40144: FOR_TO
40145: IFFALSE 40821
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40147: LD_ADDR_VAR 0 13
40151: PUSH
40152: LD_VAR 0 14
40156: PUSH
40157: LD_VAR 0 9
40161: ARRAY
40162: PUSH
40163: LD_INT 1
40165: ARRAY
40166: PPUSH
40167: LD_VAR 0 14
40171: PUSH
40172: LD_VAR 0 9
40176: ARRAY
40177: PUSH
40178: LD_INT 2
40180: ARRAY
40181: PPUSH
40182: CALL_OW 428
40186: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40187: LD_VAR 0 14
40191: PUSH
40192: LD_VAR 0 9
40196: ARRAY
40197: PUSH
40198: LD_INT 1
40200: ARRAY
40201: PPUSH
40202: LD_VAR 0 14
40206: PUSH
40207: LD_VAR 0 9
40211: ARRAY
40212: PUSH
40213: LD_INT 2
40215: ARRAY
40216: PPUSH
40217: CALL_OW 351
40221: PUSH
40222: LD_VAR 0 14
40226: PUSH
40227: LD_VAR 0 9
40231: ARRAY
40232: PUSH
40233: LD_INT 1
40235: ARRAY
40236: PPUSH
40237: LD_VAR 0 14
40241: PUSH
40242: LD_VAR 0 9
40246: ARRAY
40247: PUSH
40248: LD_INT 2
40250: ARRAY
40251: PPUSH
40252: CALL_OW 488
40256: NOT
40257: OR
40258: PUSH
40259: LD_VAR 0 13
40263: PPUSH
40264: CALL_OW 247
40268: PUSH
40269: LD_INT 3
40271: EQUAL
40272: OR
40273: IFFALSE 40279
// exit ;
40275: POP
40276: POP
40277: GO 40823
// if not tmp then
40279: LD_VAR 0 13
40283: NOT
40284: IFFALSE 40288
// continue ;
40286: GO 40144
// result := true ;
40288: LD_ADDR_VAR 0 8
40292: PUSH
40293: LD_INT 1
40295: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40296: LD_VAR 0 6
40300: PUSH
40301: LD_VAR 0 13
40305: PPUSH
40306: CALL_OW 247
40310: PUSH
40311: LD_INT 2
40313: EQUAL
40314: AND
40315: PUSH
40316: LD_VAR 0 13
40320: PPUSH
40321: CALL_OW 263
40325: PUSH
40326: LD_INT 1
40328: EQUAL
40329: AND
40330: IFFALSE 40494
// begin if IsDrivenBy ( tmp ) then
40332: LD_VAR 0 13
40336: PPUSH
40337: CALL_OW 311
40341: IFFALSE 40345
// continue ;
40343: GO 40144
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40345: LD_VAR 0 6
40349: PPUSH
40350: LD_INT 3
40352: PUSH
40353: LD_INT 60
40355: PUSH
40356: EMPTY
40357: LIST
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: PUSH
40366: LD_INT 55
40368: PUSH
40369: EMPTY
40370: LIST
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PPUSH
40380: CALL_OW 72
40384: IFFALSE 40492
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40386: LD_ADDR_VAR 0 18
40390: PUSH
40391: LD_VAR 0 6
40395: PPUSH
40396: LD_INT 3
40398: PUSH
40399: LD_INT 60
40401: PUSH
40402: EMPTY
40403: LIST
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 3
40411: PUSH
40412: LD_INT 55
40414: PUSH
40415: EMPTY
40416: LIST
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PPUSH
40426: CALL_OW 72
40430: PUSH
40431: LD_INT 1
40433: ARRAY
40434: ST_TO_ADDR
// if IsInUnit ( driver ) then
40435: LD_VAR 0 18
40439: PPUSH
40440: CALL_OW 310
40444: IFFALSE 40455
// ComExit ( driver ) ;
40446: LD_VAR 0 18
40450: PPUSH
40451: CALL 65857 0 1
// AddComEnterUnit ( driver , tmp ) ;
40455: LD_VAR 0 18
40459: PPUSH
40460: LD_VAR 0 13
40464: PPUSH
40465: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40469: LD_VAR 0 18
40473: PPUSH
40474: LD_VAR 0 7
40478: PPUSH
40479: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40483: LD_VAR 0 18
40487: PPUSH
40488: CALL_OW 181
// end ; continue ;
40492: GO 40144
// end ; if not cleaners or not tmp in cleaners then
40494: LD_VAR 0 6
40498: NOT
40499: PUSH
40500: LD_VAR 0 13
40504: PUSH
40505: LD_VAR 0 6
40509: IN
40510: NOT
40511: OR
40512: IFFALSE 40819
// begin if dep then
40514: LD_VAR 0 17
40518: IFFALSE 40654
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40520: LD_ADDR_VAR 0 16
40524: PUSH
40525: LD_VAR 0 17
40529: PUSH
40530: LD_INT 1
40532: ARRAY
40533: PPUSH
40534: CALL_OW 250
40538: PPUSH
40539: LD_VAR 0 17
40543: PUSH
40544: LD_INT 1
40546: ARRAY
40547: PPUSH
40548: CALL_OW 254
40552: PPUSH
40553: LD_INT 5
40555: PPUSH
40556: CALL_OW 272
40560: PUSH
40561: LD_VAR 0 17
40565: PUSH
40566: LD_INT 1
40568: ARRAY
40569: PPUSH
40570: CALL_OW 251
40574: PPUSH
40575: LD_VAR 0 17
40579: PUSH
40580: LD_INT 1
40582: ARRAY
40583: PPUSH
40584: CALL_OW 254
40588: PPUSH
40589: LD_INT 5
40591: PPUSH
40592: CALL_OW 273
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40601: LD_VAR 0 16
40605: PUSH
40606: LD_INT 1
40608: ARRAY
40609: PPUSH
40610: LD_VAR 0 16
40614: PUSH
40615: LD_INT 2
40617: ARRAY
40618: PPUSH
40619: CALL_OW 488
40623: IFFALSE 40654
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40625: LD_VAR 0 13
40629: PPUSH
40630: LD_VAR 0 16
40634: PUSH
40635: LD_INT 1
40637: ARRAY
40638: PPUSH
40639: LD_VAR 0 16
40643: PUSH
40644: LD_INT 2
40646: ARRAY
40647: PPUSH
40648: CALL_OW 111
// continue ;
40652: GO 40144
// end ; end ; r := GetDir ( tmp ) ;
40654: LD_ADDR_VAR 0 15
40658: PUSH
40659: LD_VAR 0 13
40663: PPUSH
40664: CALL_OW 254
40668: ST_TO_ADDR
// if r = 5 then
40669: LD_VAR 0 15
40673: PUSH
40674: LD_INT 5
40676: EQUAL
40677: IFFALSE 40687
// r := 0 ;
40679: LD_ADDR_VAR 0 15
40683: PUSH
40684: LD_INT 0
40686: ST_TO_ADDR
// for j = r to 5 do
40687: LD_ADDR_VAR 0 10
40691: PUSH
40692: DOUBLE
40693: LD_VAR 0 15
40697: DEC
40698: ST_TO_ADDR
40699: LD_INT 5
40701: PUSH
40702: FOR_TO
40703: IFFALSE 40817
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40705: LD_ADDR_VAR 0 11
40709: PUSH
40710: LD_VAR 0 13
40714: PPUSH
40715: CALL_OW 250
40719: PPUSH
40720: LD_VAR 0 10
40724: PPUSH
40725: LD_INT 2
40727: PPUSH
40728: CALL_OW 272
40732: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40733: LD_ADDR_VAR 0 12
40737: PUSH
40738: LD_VAR 0 13
40742: PPUSH
40743: CALL_OW 251
40747: PPUSH
40748: LD_VAR 0 10
40752: PPUSH
40753: LD_INT 2
40755: PPUSH
40756: CALL_OW 273
40760: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40761: LD_VAR 0 11
40765: PPUSH
40766: LD_VAR 0 12
40770: PPUSH
40771: CALL_OW 488
40775: PUSH
40776: LD_VAR 0 11
40780: PPUSH
40781: LD_VAR 0 12
40785: PPUSH
40786: CALL_OW 428
40790: NOT
40791: AND
40792: IFFALSE 40815
// begin ComMoveXY ( tmp , _x , _y ) ;
40794: LD_VAR 0 13
40798: PPUSH
40799: LD_VAR 0 11
40803: PPUSH
40804: LD_VAR 0 12
40808: PPUSH
40809: CALL_OW 111
// break ;
40813: GO 40817
// end ; end ;
40815: GO 40702
40817: POP
40818: POP
// end ; end ;
40819: GO 40144
40821: POP
40822: POP
// end ;
40823: LD_VAR 0 8
40827: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40828: LD_INT 0
40830: PPUSH
// result := true ;
40831: LD_ADDR_VAR 0 3
40835: PUSH
40836: LD_INT 1
40838: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40839: LD_VAR 0 2
40843: PUSH
40844: LD_INT 24
40846: DOUBLE
40847: EQUAL
40848: IFTRUE 40858
40850: LD_INT 33
40852: DOUBLE
40853: EQUAL
40854: IFTRUE 40858
40856: GO 40883
40858: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40859: LD_ADDR_VAR 0 3
40863: PUSH
40864: LD_INT 32
40866: PPUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: CALL_OW 321
40876: PUSH
40877: LD_INT 2
40879: EQUAL
40880: ST_TO_ADDR
40881: GO 41199
40883: LD_INT 20
40885: DOUBLE
40886: EQUAL
40887: IFTRUE 40891
40889: GO 40916
40891: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_INT 6
40899: PPUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: CALL_OW 321
40909: PUSH
40910: LD_INT 2
40912: EQUAL
40913: ST_TO_ADDR
40914: GO 41199
40916: LD_INT 22
40918: DOUBLE
40919: EQUAL
40920: IFTRUE 40930
40922: LD_INT 36
40924: DOUBLE
40925: EQUAL
40926: IFTRUE 40930
40928: GO 40955
40930: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40931: LD_ADDR_VAR 0 3
40935: PUSH
40936: LD_INT 15
40938: PPUSH
40939: LD_VAR 0 1
40943: PPUSH
40944: CALL_OW 321
40948: PUSH
40949: LD_INT 2
40951: EQUAL
40952: ST_TO_ADDR
40953: GO 41199
40955: LD_INT 30
40957: DOUBLE
40958: EQUAL
40959: IFTRUE 40963
40961: GO 40988
40963: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40964: LD_ADDR_VAR 0 3
40968: PUSH
40969: LD_INT 20
40971: PPUSH
40972: LD_VAR 0 1
40976: PPUSH
40977: CALL_OW 321
40981: PUSH
40982: LD_INT 2
40984: EQUAL
40985: ST_TO_ADDR
40986: GO 41199
40988: LD_INT 28
40990: DOUBLE
40991: EQUAL
40992: IFTRUE 41002
40994: LD_INT 21
40996: DOUBLE
40997: EQUAL
40998: IFTRUE 41002
41000: GO 41027
41002: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41003: LD_ADDR_VAR 0 3
41007: PUSH
41008: LD_INT 21
41010: PPUSH
41011: LD_VAR 0 1
41015: PPUSH
41016: CALL_OW 321
41020: PUSH
41021: LD_INT 2
41023: EQUAL
41024: ST_TO_ADDR
41025: GO 41199
41027: LD_INT 16
41029: DOUBLE
41030: EQUAL
41031: IFTRUE 41035
41033: GO 41060
41035: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41036: LD_ADDR_VAR 0 3
41040: PUSH
41041: LD_INT 84
41043: PPUSH
41044: LD_VAR 0 1
41048: PPUSH
41049: CALL_OW 321
41053: PUSH
41054: LD_INT 2
41056: EQUAL
41057: ST_TO_ADDR
41058: GO 41199
41060: LD_INT 19
41062: DOUBLE
41063: EQUAL
41064: IFTRUE 41074
41066: LD_INT 23
41068: DOUBLE
41069: EQUAL
41070: IFTRUE 41074
41072: GO 41099
41074: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41075: LD_ADDR_VAR 0 3
41079: PUSH
41080: LD_INT 83
41082: PPUSH
41083: LD_VAR 0 1
41087: PPUSH
41088: CALL_OW 321
41092: PUSH
41093: LD_INT 2
41095: EQUAL
41096: ST_TO_ADDR
41097: GO 41199
41099: LD_INT 17
41101: DOUBLE
41102: EQUAL
41103: IFTRUE 41107
41105: GO 41132
41107: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41108: LD_ADDR_VAR 0 3
41112: PUSH
41113: LD_INT 39
41115: PPUSH
41116: LD_VAR 0 1
41120: PPUSH
41121: CALL_OW 321
41125: PUSH
41126: LD_INT 2
41128: EQUAL
41129: ST_TO_ADDR
41130: GO 41199
41132: LD_INT 18
41134: DOUBLE
41135: EQUAL
41136: IFTRUE 41140
41138: GO 41165
41140: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41141: LD_ADDR_VAR 0 3
41145: PUSH
41146: LD_INT 40
41148: PPUSH
41149: LD_VAR 0 1
41153: PPUSH
41154: CALL_OW 321
41158: PUSH
41159: LD_INT 2
41161: EQUAL
41162: ST_TO_ADDR
41163: GO 41199
41165: LD_INT 27
41167: DOUBLE
41168: EQUAL
41169: IFTRUE 41173
41171: GO 41198
41173: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41174: LD_ADDR_VAR 0 3
41178: PUSH
41179: LD_INT 35
41181: PPUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL_OW 321
41191: PUSH
41192: LD_INT 2
41194: EQUAL
41195: ST_TO_ADDR
41196: GO 41199
41198: POP
// end ;
41199: LD_VAR 0 3
41203: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41204: LD_INT 0
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
41216: PPUSH
// result := false ;
41217: LD_ADDR_VAR 0 6
41221: PUSH
41222: LD_INT 0
41224: ST_TO_ADDR
// if btype = b_depot then
41225: LD_VAR 0 2
41229: PUSH
41230: LD_INT 0
41232: EQUAL
41233: IFFALSE 41245
// begin result := true ;
41235: LD_ADDR_VAR 0 6
41239: PUSH
41240: LD_INT 1
41242: ST_TO_ADDR
// exit ;
41243: GO 42071
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41245: LD_VAR 0 1
41249: NOT
41250: PUSH
41251: LD_VAR 0 1
41255: PPUSH
41256: CALL_OW 266
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: IN
41271: NOT
41272: OR
41273: PUSH
41274: LD_VAR 0 2
41278: NOT
41279: OR
41280: PUSH
41281: LD_VAR 0 5
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: LD_INT 3
41297: PUSH
41298: LD_INT 4
41300: PUSH
41301: LD_INT 5
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: IN
41312: NOT
41313: OR
41314: PUSH
41315: LD_VAR 0 3
41319: PPUSH
41320: LD_VAR 0 4
41324: PPUSH
41325: CALL_OW 488
41329: NOT
41330: OR
41331: IFFALSE 41335
// exit ;
41333: GO 42071
// side := GetSide ( depot ) ;
41335: LD_ADDR_VAR 0 9
41339: PUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 255
41349: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41350: LD_VAR 0 9
41354: PPUSH
41355: LD_VAR 0 2
41359: PPUSH
41360: CALL 40828 0 2
41364: NOT
41365: IFFALSE 41369
// exit ;
41367: GO 42071
// pom := GetBase ( depot ) ;
41369: LD_ADDR_VAR 0 10
41373: PUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: CALL_OW 274
41383: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41384: LD_ADDR_VAR 0 11
41388: PUSH
41389: LD_VAR 0 2
41393: PPUSH
41394: LD_VAR 0 1
41398: PPUSH
41399: CALL_OW 248
41403: PPUSH
41404: CALL_OW 450
41408: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41409: LD_VAR 0 10
41413: PPUSH
41414: LD_INT 1
41416: PPUSH
41417: CALL_OW 275
41421: PUSH
41422: LD_VAR 0 11
41426: PUSH
41427: LD_INT 1
41429: ARRAY
41430: GREATEREQUAL
41431: PUSH
41432: LD_VAR 0 10
41436: PPUSH
41437: LD_INT 2
41439: PPUSH
41440: CALL_OW 275
41444: PUSH
41445: LD_VAR 0 11
41449: PUSH
41450: LD_INT 2
41452: ARRAY
41453: GREATEREQUAL
41454: AND
41455: PUSH
41456: LD_VAR 0 10
41460: PPUSH
41461: LD_INT 3
41463: PPUSH
41464: CALL_OW 275
41468: PUSH
41469: LD_VAR 0 11
41473: PUSH
41474: LD_INT 3
41476: ARRAY
41477: GREATEREQUAL
41478: AND
41479: NOT
41480: IFFALSE 41484
// exit ;
41482: GO 42071
// if GetBType ( depot ) = b_depot then
41484: LD_VAR 0 1
41488: PPUSH
41489: CALL_OW 266
41493: PUSH
41494: LD_INT 0
41496: EQUAL
41497: IFFALSE 41509
// dist := 28 else
41499: LD_ADDR_VAR 0 14
41503: PUSH
41504: LD_INT 28
41506: ST_TO_ADDR
41507: GO 41517
// dist := 36 ;
41509: LD_ADDR_VAR 0 14
41513: PUSH
41514: LD_INT 36
41516: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41517: LD_VAR 0 1
41521: PPUSH
41522: LD_VAR 0 3
41526: PPUSH
41527: LD_VAR 0 4
41531: PPUSH
41532: CALL_OW 297
41536: PUSH
41537: LD_VAR 0 14
41541: GREATER
41542: IFFALSE 41546
// exit ;
41544: GO 42071
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41546: LD_ADDR_VAR 0 12
41550: PUSH
41551: LD_VAR 0 2
41555: PPUSH
41556: LD_VAR 0 3
41560: PPUSH
41561: LD_VAR 0 4
41565: PPUSH
41566: LD_VAR 0 5
41570: PPUSH
41571: LD_VAR 0 1
41575: PPUSH
41576: CALL_OW 248
41580: PPUSH
41581: LD_INT 0
41583: PPUSH
41584: CALL 42076 0 6
41588: ST_TO_ADDR
// if not hexes then
41589: LD_VAR 0 12
41593: NOT
41594: IFFALSE 41598
// exit ;
41596: GO 42071
// hex := GetHexInfo ( x , y ) ;
41598: LD_ADDR_VAR 0 15
41602: PUSH
41603: LD_VAR 0 3
41607: PPUSH
41608: LD_VAR 0 4
41612: PPUSH
41613: CALL_OW 546
41617: ST_TO_ADDR
// if hex [ 1 ] then
41618: LD_VAR 0 15
41622: PUSH
41623: LD_INT 1
41625: ARRAY
41626: IFFALSE 41630
// exit ;
41628: GO 42071
// height := hex [ 2 ] ;
41630: LD_ADDR_VAR 0 13
41634: PUSH
41635: LD_VAR 0 15
41639: PUSH
41640: LD_INT 2
41642: ARRAY
41643: ST_TO_ADDR
// for i = 1 to hexes do
41644: LD_ADDR_VAR 0 7
41648: PUSH
41649: DOUBLE
41650: LD_INT 1
41652: DEC
41653: ST_TO_ADDR
41654: LD_VAR 0 12
41658: PUSH
41659: FOR_TO
41660: IFFALSE 41990
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41662: LD_VAR 0 12
41666: PUSH
41667: LD_VAR 0 7
41671: ARRAY
41672: PUSH
41673: LD_INT 1
41675: ARRAY
41676: PPUSH
41677: LD_VAR 0 12
41681: PUSH
41682: LD_VAR 0 7
41686: ARRAY
41687: PUSH
41688: LD_INT 2
41690: ARRAY
41691: PPUSH
41692: CALL_OW 488
41696: NOT
41697: PUSH
41698: LD_VAR 0 12
41702: PUSH
41703: LD_VAR 0 7
41707: ARRAY
41708: PUSH
41709: LD_INT 1
41711: ARRAY
41712: PPUSH
41713: LD_VAR 0 12
41717: PUSH
41718: LD_VAR 0 7
41722: ARRAY
41723: PUSH
41724: LD_INT 2
41726: ARRAY
41727: PPUSH
41728: CALL_OW 428
41732: PUSH
41733: LD_INT 0
41735: GREATER
41736: OR
41737: PUSH
41738: LD_VAR 0 12
41742: PUSH
41743: LD_VAR 0 7
41747: ARRAY
41748: PUSH
41749: LD_INT 1
41751: ARRAY
41752: PPUSH
41753: LD_VAR 0 12
41757: PUSH
41758: LD_VAR 0 7
41762: ARRAY
41763: PUSH
41764: LD_INT 2
41766: ARRAY
41767: PPUSH
41768: CALL_OW 351
41772: OR
41773: IFFALSE 41779
// exit ;
41775: POP
41776: POP
41777: GO 42071
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41779: LD_ADDR_VAR 0 8
41783: PUSH
41784: LD_VAR 0 12
41788: PUSH
41789: LD_VAR 0 7
41793: ARRAY
41794: PUSH
41795: LD_INT 1
41797: ARRAY
41798: PPUSH
41799: LD_VAR 0 12
41803: PUSH
41804: LD_VAR 0 7
41808: ARRAY
41809: PUSH
41810: LD_INT 2
41812: ARRAY
41813: PPUSH
41814: CALL_OW 546
41818: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41819: LD_VAR 0 8
41823: PUSH
41824: LD_INT 1
41826: ARRAY
41827: PUSH
41828: LD_VAR 0 8
41832: PUSH
41833: LD_INT 2
41835: ARRAY
41836: PUSH
41837: LD_VAR 0 13
41841: PUSH
41842: LD_INT 2
41844: PLUS
41845: GREATER
41846: OR
41847: PUSH
41848: LD_VAR 0 8
41852: PUSH
41853: LD_INT 2
41855: ARRAY
41856: PUSH
41857: LD_VAR 0 13
41861: PUSH
41862: LD_INT 2
41864: MINUS
41865: LESS
41866: OR
41867: PUSH
41868: LD_VAR 0 8
41872: PUSH
41873: LD_INT 3
41875: ARRAY
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 8
41882: PUSH
41883: LD_INT 9
41885: PUSH
41886: LD_INT 10
41888: PUSH
41889: LD_INT 11
41891: PUSH
41892: LD_INT 12
41894: PUSH
41895: LD_INT 13
41897: PUSH
41898: LD_INT 16
41900: PUSH
41901: LD_INT 17
41903: PUSH
41904: LD_INT 18
41906: PUSH
41907: LD_INT 19
41909: PUSH
41910: LD_INT 20
41912: PUSH
41913: LD_INT 21
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: IN
41931: NOT
41932: OR
41933: PUSH
41934: LD_VAR 0 8
41938: PUSH
41939: LD_INT 5
41941: ARRAY
41942: NOT
41943: OR
41944: PUSH
41945: LD_VAR 0 8
41949: PUSH
41950: LD_INT 6
41952: ARRAY
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 7
41962: PUSH
41963: LD_INT 9
41965: PUSH
41966: LD_INT 10
41968: PUSH
41969: LD_INT 11
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: IN
41980: NOT
41981: OR
41982: IFFALSE 41988
// exit ;
41984: POP
41985: POP
41986: GO 42071
// end ;
41988: GO 41659
41990: POP
41991: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41992: LD_VAR 0 9
41996: PPUSH
41997: LD_VAR 0 3
42001: PPUSH
42002: LD_VAR 0 4
42006: PPUSH
42007: LD_INT 20
42009: PPUSH
42010: CALL 33994 0 4
42014: PUSH
42015: LD_INT 4
42017: ARRAY
42018: IFFALSE 42022
// exit ;
42020: GO 42071
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42022: LD_VAR 0 2
42026: PUSH
42027: LD_INT 29
42029: PUSH
42030: LD_INT 30
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: IN
42037: PUSH
42038: LD_VAR 0 3
42042: PPUSH
42043: LD_VAR 0 4
42047: PPUSH
42048: LD_VAR 0 9
42052: PPUSH
42053: CALL_OW 440
42057: NOT
42058: AND
42059: IFFALSE 42063
// exit ;
42061: GO 42071
// result := true ;
42063: LD_ADDR_VAR 0 6
42067: PUSH
42068: LD_INT 1
42070: ST_TO_ADDR
// end ;
42071: LD_VAR 0 6
42075: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42076: LD_INT 0
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
42103: PPUSH
42104: PPUSH
42105: PPUSH
42106: PPUSH
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
42111: PPUSH
42112: PPUSH
42113: PPUSH
42114: PPUSH
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
42119: PPUSH
42120: PPUSH
42121: PPUSH
42122: PPUSH
42123: PPUSH
42124: PPUSH
42125: PPUSH
42126: PPUSH
42127: PPUSH
42128: PPUSH
42129: PPUSH
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
42135: PPUSH
// result = [ ] ;
42136: LD_ADDR_VAR 0 7
42140: PUSH
42141: EMPTY
42142: ST_TO_ADDR
// temp_list = [ ] ;
42143: LD_ADDR_VAR 0 9
42147: PUSH
42148: EMPTY
42149: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42150: LD_VAR 0 4
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: LD_INT 4
42169: PUSH
42170: LD_INT 5
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: IN
42181: NOT
42182: PUSH
42183: LD_VAR 0 1
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: IN
42198: PUSH
42199: LD_VAR 0 5
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: IN
42218: NOT
42219: AND
42220: OR
42221: IFFALSE 42225
// exit ;
42223: GO 60616
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42225: LD_VAR 0 1
42229: PUSH
42230: LD_INT 6
42232: PUSH
42233: LD_INT 7
42235: PUSH
42236: LD_INT 8
42238: PUSH
42239: LD_INT 13
42241: PUSH
42242: LD_INT 12
42244: PUSH
42245: LD_INT 15
42247: PUSH
42248: LD_INT 11
42250: PUSH
42251: LD_INT 14
42253: PUSH
42254: LD_INT 10
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: IN
42268: IFFALSE 42278
// btype = b_lab ;
42270: LD_ADDR_VAR 0 1
42274: PUSH
42275: LD_INT 6
42277: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42278: LD_VAR 0 6
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: IN
42297: NOT
42298: PUSH
42299: LD_VAR 0 1
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: LD_INT 2
42312: PUSH
42313: LD_INT 3
42315: PUSH
42316: LD_INT 6
42318: PUSH
42319: LD_INT 36
42321: PUSH
42322: LD_INT 4
42324: PUSH
42325: LD_INT 5
42327: PUSH
42328: LD_INT 31
42330: PUSH
42331: LD_INT 32
42333: PUSH
42334: LD_INT 33
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: IN
42350: NOT
42351: PUSH
42352: LD_VAR 0 6
42356: PUSH
42357: LD_INT 1
42359: EQUAL
42360: AND
42361: OR
42362: PUSH
42363: LD_VAR 0 1
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: IN
42378: NOT
42379: PUSH
42380: LD_VAR 0 6
42384: PUSH
42385: LD_INT 2
42387: EQUAL
42388: AND
42389: OR
42390: IFFALSE 42400
// mode = 0 ;
42392: LD_ADDR_VAR 0 6
42396: PUSH
42397: LD_INT 0
42399: ST_TO_ADDR
// case mode of 0 :
42400: LD_VAR 0 6
42404: PUSH
42405: LD_INT 0
42407: DOUBLE
42408: EQUAL
42409: IFTRUE 42413
42411: GO 53866
42413: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42414: LD_ADDR_VAR 0 11
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: LD_INT 2
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: LD_INT 3
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: LD_INT 3
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42607: LD_ADDR_VAR 0 12
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 3
42764: NEG
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 3
42775: NEG
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42803: LD_ADDR_VAR 0 13
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 2
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: LD_INT 3
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 3
42962: NEG
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 3
42974: NEG
42975: PUSH
42976: LD_INT 3
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43002: LD_ADDR_VAR 0 14
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 3
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 3
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43198: LD_ADDR_VAR 0 15
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: NEG
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 3
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43391: LD_ADDR_VAR 0 16
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: NEG
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 3
43548: PUSH
43549: LD_INT 3
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: LD_INT 3
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43584: LD_ADDR_VAR 0 17
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 2
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: NEG
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43814: LD_ADDR_VAR 0 18
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: LD_INT 2
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: NEG
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44044: LD_ADDR_VAR 0 19
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44274: LD_ADDR_VAR 0 20
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 2
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44504: LD_ADDR_VAR 0 21
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44734: LD_ADDR_VAR 0 22
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44964: LD_ADDR_VAR 0 23
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: LD_INT 3
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 3
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45244: LD_ADDR_VAR 0 24
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 3
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45520: LD_ADDR_VAR 0 25
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: NEG
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 3
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: LD_INT 3
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 3
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45794: LD_ADDR_VAR 0 26
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 3
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46070: LD_ADDR_VAR 0 27
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 3
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 3
46315: NEG
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46350: LD_ADDR_VAR 0 28
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: LD_INT 3
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 3
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 3
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 3
46597: NEG
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46632: LD_ADDR_VAR 0 29
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 3
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 3
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: LD_INT 3
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 3
46876: NEG
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46911: LD_ADDR_VAR 0 30
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 3
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 3
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: LD_INT 3
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 3
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47189: LD_ADDR_VAR 0 31
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: LD_INT 3
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 3
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 3
47432: NEG
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47467: LD_ADDR_VAR 0 32
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 3
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: LD_INT 3
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: NEG
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47745: LD_ADDR_VAR 0 33
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 3
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 3
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 3
47989: NEG
47990: PUSH
47991: LD_INT 2
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48024: LD_ADDR_VAR 0 34
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 3
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 3
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48304: LD_ADDR_VAR 0 35
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48416: LD_ADDR_VAR 0 36
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48528: LD_ADDR_VAR 0 37
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48640: LD_ADDR_VAR 0 38
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48752: LD_ADDR_VAR 0 39
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48864: LD_ADDR_VAR 0 40
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48976: LD_ADDR_VAR 0 41
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 3
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 3
49219: PUSH
49220: LD_INT 3
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: LD_INT 3
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 3
49250: NEG
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 3
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 3
49273: NEG
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 3
49285: NEG
49286: PUSH
49287: LD_INT 3
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49326: LD_ADDR_VAR 0 42
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: LD_INT 2
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 3
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 3
49635: NEG
49636: PUSH
49637: LD_INT 3
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49676: LD_ADDR_VAR 0 43
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 3
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 3
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 3
49972: NEG
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50024: LD_ADDR_VAR 0 44
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: NEG
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 3
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 3
50298: NEG
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 3
50321: NEG
50322: PUSH
50323: LD_INT 2
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50374: LD_ADDR_VAR 0 45
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: LD_INT 3
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 3
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 3
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: LD_INT 3
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 3
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 3
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 3
50671: NEG
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: NEG
50684: PUSH
50685: LD_INT 3
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50724: LD_ADDR_VAR 0 46
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 3
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 3
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 3
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 3
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 3
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 3
51020: NEG
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51072: LD_ADDR_VAR 0 47
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51223: LD_ADDR_VAR 0 48
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51370: LD_ADDR_VAR 0 49
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51514: LD_ADDR_VAR 0 50
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51658: LD_ADDR_VAR 0 51
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: NEG
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51805: LD_ADDR_VAR 0 52
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51956: LD_ADDR_VAR 0 53
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52186: LD_ADDR_VAR 0 54
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52416: LD_ADDR_VAR 0 55
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52646: LD_ADDR_VAR 0 56
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52876: LD_ADDR_VAR 0 57
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53106: LD_ADDR_VAR 0 58
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53336: LD_ADDR_VAR 0 59
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53424: LD_ADDR_VAR 0 60
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53512: LD_ADDR_VAR 0 61
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53600: LD_ADDR_VAR 0 62
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53688: LD_ADDR_VAR 0 63
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53776: LD_ADDR_VAR 0 64
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// end ; 1 :
53864: GO 59761
53866: LD_INT 1
53868: DOUBLE
53869: EQUAL
53870: IFTRUE 53874
53872: GO 56497
53874: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53875: LD_ADDR_VAR 0 11
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 3
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 3
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53919: LD_ADDR_VAR 0 12
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53960: LD_ADDR_VAR 0 13
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: LD_INT 2
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 3
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54000: LD_ADDR_VAR 0 14
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: LIST
54040: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54041: LD_ADDR_VAR 0 15
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54085: LD_ADDR_VAR 0 16
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: LD_INT 3
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 3
54104: NEG
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: LD_INT 3
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54131: LD_ADDR_VAR 0 17
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 3
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: LIST
54174: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54175: LD_ADDR_VAR 0 18
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54216: LD_ADDR_VAR 0 19
54220: PUSH
54221: LD_INT 3
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 3
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54256: LD_ADDR_VAR 0 20
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: LIST
54296: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54297: LD_ADDR_VAR 0 21
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 3
54315: NEG
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 3
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54341: LD_ADDR_VAR 0 22
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 3
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: NEG
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 3
54372: NEG
54373: PUSH
54374: LD_INT 3
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54387: LD_ADDR_VAR 0 23
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: LD_INT 3
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 4
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 3
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: LIST
54430: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54431: LD_ADDR_VAR 0 24
54435: PUSH
54436: LD_INT 3
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 3
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 4
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: LIST
54471: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54472: LD_ADDR_VAR 0 25
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: LD_INT 3
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 4
54489: PUSH
54490: LD_INT 3
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: LD_INT 4
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54512: LD_ADDR_VAR 0 26
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 3
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 4
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 3
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54553: LD_ADDR_VAR 0 27
54557: PUSH
54558: LD_INT 3
54560: NEG
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 3
54571: NEG
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 4
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: LIST
54596: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54597: LD_ADDR_VAR 0 28
54601: PUSH
54602: LD_INT 3
54604: NEG
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: LD_INT 4
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 4
54628: NEG
54629: PUSH
54630: LD_INT 3
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: LIST
54642: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54643: LD_ADDR_VAR 0 29
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 3
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 4
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 4
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 5
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 5
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 4
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 6
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 6
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 5
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54798: LD_ADDR_VAR 0 30
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 4
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 4
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 4
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 5
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 5
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 5
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 6
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 6
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54941: LD_ADDR_VAR 0 31
54945: PUSH
54946: LD_INT 3
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: LD_INT 3
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: LD_INT 3
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: LD_INT 3
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 4
54988: PUSH
54989: LD_INT 4
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 3
54998: PUSH
54999: LD_INT 4
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 5
55008: PUSH
55009: LD_INT 4
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 5
55018: PUSH
55019: LD_INT 5
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 4
55028: PUSH
55029: LD_INT 5
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 6
55038: PUSH
55039: LD_INT 5
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 6
55048: PUSH
55049: LD_INT 6
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 5
55058: PUSH
55059: LD_INT 6
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55080: LD_ADDR_VAR 0 32
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 3
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 3
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 4
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 4
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 3
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: LD_INT 5
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 5
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: LD_INT 4
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: LD_INT 6
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 6
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 5
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55223: LD_ADDR_VAR 0 33
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 3
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 3
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 4
55275: NEG
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 4
55286: NEG
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 4
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 5
55309: NEG
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 5
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 5
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 6
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 6
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55378: LD_ADDR_VAR 0 34
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 3
55409: NEG
55410: PUSH
55411: LD_INT 3
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: NEG
55422: PUSH
55423: LD_INT 4
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 4
55433: NEG
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 4
55445: NEG
55446: PUSH
55447: LD_INT 4
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 4
55457: NEG
55458: PUSH
55459: LD_INT 5
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 5
55469: NEG
55470: PUSH
55471: LD_INT 4
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 5
55481: NEG
55482: PUSH
55483: LD_INT 5
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 5
55493: NEG
55494: PUSH
55495: LD_INT 6
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 6
55505: NEG
55506: PUSH
55507: LD_INT 5
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 6
55517: NEG
55518: PUSH
55519: LD_INT 6
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55541: LD_ADDR_VAR 0 41
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55585: LD_ADDR_VAR 0 42
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 3
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: LIST
55625: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55626: LD_ADDR_VAR 0 43
55630: PUSH
55631: LD_INT 2
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 3
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: LIST
55665: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55666: LD_ADDR_VAR 0 44
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: LD_INT 3
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: LIST
55706: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55707: LD_ADDR_VAR 0 45
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55751: LD_ADDR_VAR 0 46
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: LD_INT 3
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 3
55782: NEG
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: LIST
55796: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55797: LD_ADDR_VAR 0 47
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 3
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 3
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55830: LD_ADDR_VAR 0 48
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55861: LD_ADDR_VAR 0 49
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55890: LD_ADDR_VAR 0 50
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: LD_INT 3
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55919: LD_ADDR_VAR 0 51
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55950: LD_ADDR_VAR 0 52
55954: PUSH
55955: LD_INT 3
55957: NEG
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: NEG
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55983: LD_ADDR_VAR 0 53
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 3
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56027: LD_ADDR_VAR 0 54
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: LIST
56067: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56068: LD_ADDR_VAR 0 55
56072: PUSH
56073: LD_INT 3
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 3
56085: PUSH
56086: LD_INT 3
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 3
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56108: LD_ADDR_VAR 0 56
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 3
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 3
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: LIST
56148: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56149: LD_ADDR_VAR 0 57
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56193: LD_ADDR_VAR 0 58
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: LD_INT 3
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 3
56224: NEG
56225: PUSH
56226: LD_INT 3
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56239: LD_ADDR_VAR 0 59
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56283: LD_ADDR_VAR 0 60
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: LIST
56323: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56324: LD_ADDR_VAR 0 61
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56364: LD_ADDR_VAR 0 62
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56405: LD_ADDR_VAR 0 63
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: LIST
56448: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56449: LD_ADDR_VAR 0 64
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: LIST
56494: ST_TO_ADDR
// end ; 2 :
56495: GO 59761
56497: LD_INT 2
56499: DOUBLE
56500: EQUAL
56501: IFTRUE 56505
56503: GO 59760
56505: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56506: LD_ADDR_VAR 0 29
56510: PUSH
56511: LD_INT 4
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 4
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 5
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 4
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 5
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 4
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 4
56636: PUSH
56637: LD_INT 4
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: LD_INT 4
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: LD_INT 3
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 4
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 4
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 4
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: LD_INT 4
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 5
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 5
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 4
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: LD_INT 3
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: LD_INT 5
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 3
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 3
56789: NEG
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 3
56800: NEG
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 3
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 4
56845: NEG
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 4
56856: NEG
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 4
56868: NEG
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 4
56891: NEG
56892: PUSH
56893: LD_INT 4
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 4
56903: NEG
56904: PUSH
56905: LD_INT 5
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: LD_INT 4
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 4
56939: NEG
56940: PUSH
56941: LD_INT 3
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 5
56951: NEG
56952: PUSH
56953: LD_INT 4
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 5
56963: NEG
56964: PUSH
56965: LD_INT 5
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 3
56975: NEG
56976: PUSH
56977: LD_INT 5
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 5
56987: NEG
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57044: LD_ADDR_VAR 0 30
57048: PUSH
57049: LD_INT 4
57051: PUSH
57052: LD_INT 4
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 4
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 5
57071: PUSH
57072: LD_INT 4
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 5
57081: PUSH
57082: LD_INT 5
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 4
57091: PUSH
57092: LD_INT 5
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: LD_INT 4
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 3
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 5
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: LD_INT 5
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 3
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 4
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 4
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 3
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: LD_INT 4
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 4
57234: NEG
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 4
57245: NEG
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 3
57257: NEG
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 4
57279: NEG
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 5
57290: NEG
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 5
57301: NEG
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 5
57313: NEG
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 3
57325: NEG
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: NEG
57337: PUSH
57338: LD_INT 3
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: LD_INT 4
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: LD_INT 3
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: NEG
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 4
57396: NEG
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 4
57408: NEG
57409: PUSH
57410: LD_INT 4
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: LD_INT 4
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 4
57432: NEG
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 4
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 5
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: LD_INT 4
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 3
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: LD_INT 4
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 5
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: LD_INT 3
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: LD_INT 5
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57591: LD_ADDR_VAR 0 31
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 4
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 3
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 4
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 5
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 5
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 4
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 3
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: LD_INT 5
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 3
57691: NEG
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: NEG
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 3
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 4
57747: NEG
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 4
57758: NEG
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 4
57770: NEG
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: NEG
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 4
57793: NEG
57794: PUSH
57795: LD_INT 4
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 4
57805: NEG
57806: PUSH
57807: LD_INT 5
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 3
57817: NEG
57818: PUSH
57819: LD_INT 4
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 3
57829: NEG
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 4
57841: NEG
57842: PUSH
57843: LD_INT 3
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 5
57853: NEG
57854: PUSH
57855: LD_INT 4
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 5
57865: NEG
57866: PUSH
57867: LD_INT 5
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: LD_INT 5
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 5
57889: NEG
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 4
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 3
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 4
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: LD_INT 4
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 4
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 4
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 5
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 5
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 4
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 3
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 5
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58141: LD_ADDR_VAR 0 32
58145: PUSH
58146: LD_INT 4
58148: NEG
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 4
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 3
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 4
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 5
58204: NEG
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 5
58215: NEG
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 5
58227: NEG
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: NEG
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 3
58250: NEG
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 4
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: NEG
58323: PUSH
58324: LD_INT 4
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: LD_INT 4
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 4
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 4
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 5
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 4
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 3
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 3
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: LD_INT 4
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 5
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 5
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 3
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 4
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: LD_INT 2
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 4
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 4
58553: PUSH
58554: LD_INT 4
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 4
58563: PUSH
58564: LD_INT 3
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 5
58573: PUSH
58574: LD_INT 4
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 5
58583: PUSH
58584: LD_INT 5
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 4
58593: PUSH
58594: LD_INT 5
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: LD_INT 4
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 3
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 5
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 3
58633: PUSH
58634: LD_INT 5
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58688: LD_ADDR_VAR 0 33
58692: PUSH
58693: LD_INT 4
58695: NEG
58696: PUSH
58697: LD_INT 4
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 4
58707: NEG
58708: PUSH
58709: LD_INT 5
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 3
58719: NEG
58720: PUSH
58721: LD_INT 4
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 4
58743: NEG
58744: PUSH
58745: LD_INT 3
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 5
58755: NEG
58756: PUSH
58757: LD_INT 4
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 5
58767: NEG
58768: PUSH
58769: LD_INT 5
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: LD_INT 5
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 5
58791: NEG
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 4
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 4
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: LD_INT 4
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 4
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 4
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 5
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 5
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 4
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 3
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 5
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 3
58998: PUSH
58999: LD_INT 3
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 4
59018: PUSH
59019: LD_INT 3
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 4
59028: PUSH
59029: LD_INT 4
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 3
59038: PUSH
59039: LD_INT 4
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 4
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: LD_INT 4
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: LD_INT 4
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: LD_INT 4
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 5
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 5
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: LD_INT 4
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: LD_INT 3
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: LD_INT 5
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: LD_INT 3
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59226: LD_ADDR_VAR 0 34
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 4
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: LD_INT 5
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: LD_INT 4
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 3
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 4
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: LD_INT 5
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: LD_INT 3
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 5
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 4
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 4
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 4
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 4
59428: PUSH
59429: LD_INT 4
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 4
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 5
59448: PUSH
59449: LD_INT 4
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 5
59458: PUSH
59459: LD_INT 5
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 4
59468: PUSH
59469: LD_INT 5
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: LD_INT 4
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 3
59488: PUSH
59489: LD_INT 3
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 5
59498: PUSH
59499: LD_INT 3
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: LD_INT 5
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: LD_INT 3
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 4
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 4
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: LD_INT 4
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: NEG
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 4
59611: NEG
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 4
59622: NEG
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 4
59656: NEG
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 5
59667: NEG
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 5
59678: NEG
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 5
59690: NEG
59691: PUSH
59692: LD_INT 2
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: ST_TO_ADDR
// end ; end ;
59758: GO 59761
59760: POP
// case btype of b_depot , b_warehouse :
59761: LD_VAR 0 1
59765: PUSH
59766: LD_INT 0
59768: DOUBLE
59769: EQUAL
59770: IFTRUE 59780
59772: LD_INT 1
59774: DOUBLE
59775: EQUAL
59776: IFTRUE 59780
59778: GO 59981
59780: POP
// case nation of nation_american :
59781: LD_VAR 0 5
59785: PUSH
59786: LD_INT 1
59788: DOUBLE
59789: EQUAL
59790: IFTRUE 59794
59792: GO 59850
59794: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59795: LD_ADDR_VAR 0 9
59799: PUSH
59800: LD_VAR 0 11
59804: PUSH
59805: LD_VAR 0 12
59809: PUSH
59810: LD_VAR 0 13
59814: PUSH
59815: LD_VAR 0 14
59819: PUSH
59820: LD_VAR 0 15
59824: PUSH
59825: LD_VAR 0 16
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: PUSH
59838: LD_VAR 0 4
59842: PUSH
59843: LD_INT 1
59845: PLUS
59846: ARRAY
59847: ST_TO_ADDR
59848: GO 59979
59850: LD_INT 2
59852: DOUBLE
59853: EQUAL
59854: IFTRUE 59858
59856: GO 59914
59858: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59859: LD_ADDR_VAR 0 9
59863: PUSH
59864: LD_VAR 0 17
59868: PUSH
59869: LD_VAR 0 18
59873: PUSH
59874: LD_VAR 0 19
59878: PUSH
59879: LD_VAR 0 20
59883: PUSH
59884: LD_VAR 0 21
59888: PUSH
59889: LD_VAR 0 22
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: PUSH
59902: LD_VAR 0 4
59906: PUSH
59907: LD_INT 1
59909: PLUS
59910: ARRAY
59911: ST_TO_ADDR
59912: GO 59979
59914: LD_INT 3
59916: DOUBLE
59917: EQUAL
59918: IFTRUE 59922
59920: GO 59978
59922: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59923: LD_ADDR_VAR 0 9
59927: PUSH
59928: LD_VAR 0 23
59932: PUSH
59933: LD_VAR 0 24
59937: PUSH
59938: LD_VAR 0 25
59942: PUSH
59943: LD_VAR 0 26
59947: PUSH
59948: LD_VAR 0 27
59952: PUSH
59953: LD_VAR 0 28
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: PUSH
59966: LD_VAR 0 4
59970: PUSH
59971: LD_INT 1
59973: PLUS
59974: ARRAY
59975: ST_TO_ADDR
59976: GO 59979
59978: POP
59979: GO 60534
59981: LD_INT 2
59983: DOUBLE
59984: EQUAL
59985: IFTRUE 59995
59987: LD_INT 3
59989: DOUBLE
59990: EQUAL
59991: IFTRUE 59995
59993: GO 60051
59995: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59996: LD_ADDR_VAR 0 9
60000: PUSH
60001: LD_VAR 0 29
60005: PUSH
60006: LD_VAR 0 30
60010: PUSH
60011: LD_VAR 0 31
60015: PUSH
60016: LD_VAR 0 32
60020: PUSH
60021: LD_VAR 0 33
60025: PUSH
60026: LD_VAR 0 34
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: PUSH
60039: LD_VAR 0 4
60043: PUSH
60044: LD_INT 1
60046: PLUS
60047: ARRAY
60048: ST_TO_ADDR
60049: GO 60534
60051: LD_INT 16
60053: DOUBLE
60054: EQUAL
60055: IFTRUE 60113
60057: LD_INT 17
60059: DOUBLE
60060: EQUAL
60061: IFTRUE 60113
60063: LD_INT 18
60065: DOUBLE
60066: EQUAL
60067: IFTRUE 60113
60069: LD_INT 19
60071: DOUBLE
60072: EQUAL
60073: IFTRUE 60113
60075: LD_INT 22
60077: DOUBLE
60078: EQUAL
60079: IFTRUE 60113
60081: LD_INT 20
60083: DOUBLE
60084: EQUAL
60085: IFTRUE 60113
60087: LD_INT 21
60089: DOUBLE
60090: EQUAL
60091: IFTRUE 60113
60093: LD_INT 23
60095: DOUBLE
60096: EQUAL
60097: IFTRUE 60113
60099: LD_INT 24
60101: DOUBLE
60102: EQUAL
60103: IFTRUE 60113
60105: LD_INT 25
60107: DOUBLE
60108: EQUAL
60109: IFTRUE 60113
60111: GO 60169
60113: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60114: LD_ADDR_VAR 0 9
60118: PUSH
60119: LD_VAR 0 35
60123: PUSH
60124: LD_VAR 0 36
60128: PUSH
60129: LD_VAR 0 37
60133: PUSH
60134: LD_VAR 0 38
60138: PUSH
60139: LD_VAR 0 39
60143: PUSH
60144: LD_VAR 0 40
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: PUSH
60157: LD_VAR 0 4
60161: PUSH
60162: LD_INT 1
60164: PLUS
60165: ARRAY
60166: ST_TO_ADDR
60167: GO 60534
60169: LD_INT 6
60171: DOUBLE
60172: EQUAL
60173: IFTRUE 60225
60175: LD_INT 7
60177: DOUBLE
60178: EQUAL
60179: IFTRUE 60225
60181: LD_INT 8
60183: DOUBLE
60184: EQUAL
60185: IFTRUE 60225
60187: LD_INT 13
60189: DOUBLE
60190: EQUAL
60191: IFTRUE 60225
60193: LD_INT 12
60195: DOUBLE
60196: EQUAL
60197: IFTRUE 60225
60199: LD_INT 15
60201: DOUBLE
60202: EQUAL
60203: IFTRUE 60225
60205: LD_INT 11
60207: DOUBLE
60208: EQUAL
60209: IFTRUE 60225
60211: LD_INT 14
60213: DOUBLE
60214: EQUAL
60215: IFTRUE 60225
60217: LD_INT 10
60219: DOUBLE
60220: EQUAL
60221: IFTRUE 60225
60223: GO 60281
60225: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60226: LD_ADDR_VAR 0 9
60230: PUSH
60231: LD_VAR 0 41
60235: PUSH
60236: LD_VAR 0 42
60240: PUSH
60241: LD_VAR 0 43
60245: PUSH
60246: LD_VAR 0 44
60250: PUSH
60251: LD_VAR 0 45
60255: PUSH
60256: LD_VAR 0 46
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: PUSH
60269: LD_VAR 0 4
60273: PUSH
60274: LD_INT 1
60276: PLUS
60277: ARRAY
60278: ST_TO_ADDR
60279: GO 60534
60281: LD_INT 36
60283: DOUBLE
60284: EQUAL
60285: IFTRUE 60289
60287: GO 60345
60289: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60290: LD_ADDR_VAR 0 9
60294: PUSH
60295: LD_VAR 0 47
60299: PUSH
60300: LD_VAR 0 48
60304: PUSH
60305: LD_VAR 0 49
60309: PUSH
60310: LD_VAR 0 50
60314: PUSH
60315: LD_VAR 0 51
60319: PUSH
60320: LD_VAR 0 52
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: PUSH
60333: LD_VAR 0 4
60337: PUSH
60338: LD_INT 1
60340: PLUS
60341: ARRAY
60342: ST_TO_ADDR
60343: GO 60534
60345: LD_INT 4
60347: DOUBLE
60348: EQUAL
60349: IFTRUE 60371
60351: LD_INT 5
60353: DOUBLE
60354: EQUAL
60355: IFTRUE 60371
60357: LD_INT 34
60359: DOUBLE
60360: EQUAL
60361: IFTRUE 60371
60363: LD_INT 37
60365: DOUBLE
60366: EQUAL
60367: IFTRUE 60371
60369: GO 60427
60371: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60372: LD_ADDR_VAR 0 9
60376: PUSH
60377: LD_VAR 0 53
60381: PUSH
60382: LD_VAR 0 54
60386: PUSH
60387: LD_VAR 0 55
60391: PUSH
60392: LD_VAR 0 56
60396: PUSH
60397: LD_VAR 0 57
60401: PUSH
60402: LD_VAR 0 58
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: PUSH
60415: LD_VAR 0 4
60419: PUSH
60420: LD_INT 1
60422: PLUS
60423: ARRAY
60424: ST_TO_ADDR
60425: GO 60534
60427: LD_INT 31
60429: DOUBLE
60430: EQUAL
60431: IFTRUE 60477
60433: LD_INT 32
60435: DOUBLE
60436: EQUAL
60437: IFTRUE 60477
60439: LD_INT 33
60441: DOUBLE
60442: EQUAL
60443: IFTRUE 60477
60445: LD_INT 27
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60477
60451: LD_INT 26
60453: DOUBLE
60454: EQUAL
60455: IFTRUE 60477
60457: LD_INT 28
60459: DOUBLE
60460: EQUAL
60461: IFTRUE 60477
60463: LD_INT 29
60465: DOUBLE
60466: EQUAL
60467: IFTRUE 60477
60469: LD_INT 30
60471: DOUBLE
60472: EQUAL
60473: IFTRUE 60477
60475: GO 60533
60477: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60478: LD_ADDR_VAR 0 9
60482: PUSH
60483: LD_VAR 0 59
60487: PUSH
60488: LD_VAR 0 60
60492: PUSH
60493: LD_VAR 0 61
60497: PUSH
60498: LD_VAR 0 62
60502: PUSH
60503: LD_VAR 0 63
60507: PUSH
60508: LD_VAR 0 64
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: PUSH
60521: LD_VAR 0 4
60525: PUSH
60526: LD_INT 1
60528: PLUS
60529: ARRAY
60530: ST_TO_ADDR
60531: GO 60534
60533: POP
// temp_list2 = [ ] ;
60534: LD_ADDR_VAR 0 10
60538: PUSH
60539: EMPTY
60540: ST_TO_ADDR
// for i in temp_list do
60541: LD_ADDR_VAR 0 8
60545: PUSH
60546: LD_VAR 0 9
60550: PUSH
60551: FOR_IN
60552: IFFALSE 60604
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60554: LD_ADDR_VAR 0 10
60558: PUSH
60559: LD_VAR 0 10
60563: PUSH
60564: LD_VAR 0 8
60568: PUSH
60569: LD_INT 1
60571: ARRAY
60572: PUSH
60573: LD_VAR 0 2
60577: PLUS
60578: PUSH
60579: LD_VAR 0 8
60583: PUSH
60584: LD_INT 2
60586: ARRAY
60587: PUSH
60588: LD_VAR 0 3
60592: PLUS
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: EMPTY
60599: LIST
60600: ADD
60601: ST_TO_ADDR
60602: GO 60551
60604: POP
60605: POP
// result = temp_list2 ;
60606: LD_ADDR_VAR 0 7
60610: PUSH
60611: LD_VAR 0 10
60615: ST_TO_ADDR
// end ;
60616: LD_VAR 0 7
60620: RET
// export function EnemyInRange ( unit , dist ) ; begin
60621: LD_INT 0
60623: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60624: LD_ADDR_VAR 0 3
60628: PUSH
60629: LD_VAR 0 1
60633: PPUSH
60634: CALL_OW 255
60638: PPUSH
60639: LD_VAR 0 1
60643: PPUSH
60644: CALL_OW 250
60648: PPUSH
60649: LD_VAR 0 1
60653: PPUSH
60654: CALL_OW 251
60658: PPUSH
60659: LD_VAR 0 2
60663: PPUSH
60664: CALL 33994 0 4
60668: PUSH
60669: LD_INT 4
60671: ARRAY
60672: ST_TO_ADDR
// end ;
60673: LD_VAR 0 3
60677: RET
// export function PlayerSeeMe ( unit ) ; begin
60678: LD_INT 0
60680: PPUSH
// result := See ( your_side , unit ) ;
60681: LD_ADDR_VAR 0 2
60685: PUSH
60686: LD_OWVAR 2
60690: PPUSH
60691: LD_VAR 0 1
60695: PPUSH
60696: CALL_OW 292
60700: ST_TO_ADDR
// end ;
60701: LD_VAR 0 2
60705: RET
// export function ReverseDir ( unit ) ; begin
60706: LD_INT 0
60708: PPUSH
// if not unit then
60709: LD_VAR 0 1
60713: NOT
60714: IFFALSE 60718
// exit ;
60716: GO 60741
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60718: LD_ADDR_VAR 0 2
60722: PUSH
60723: LD_VAR 0 1
60727: PPUSH
60728: CALL_OW 254
60732: PUSH
60733: LD_INT 3
60735: PLUS
60736: PUSH
60737: LD_INT 6
60739: MOD
60740: ST_TO_ADDR
// end ;
60741: LD_VAR 0 2
60745: RET
// export function ReverseArray ( array ) ; var i ; begin
60746: LD_INT 0
60748: PPUSH
60749: PPUSH
// if not array then
60750: LD_VAR 0 1
60754: NOT
60755: IFFALSE 60759
// exit ;
60757: GO 60814
// result := [ ] ;
60759: LD_ADDR_VAR 0 2
60763: PUSH
60764: EMPTY
60765: ST_TO_ADDR
// for i := array downto 1 do
60766: LD_ADDR_VAR 0 3
60770: PUSH
60771: DOUBLE
60772: LD_VAR 0 1
60776: INC
60777: ST_TO_ADDR
60778: LD_INT 1
60780: PUSH
60781: FOR_DOWNTO
60782: IFFALSE 60812
// result := Join ( result , array [ i ] ) ;
60784: LD_ADDR_VAR 0 2
60788: PUSH
60789: LD_VAR 0 2
60793: PPUSH
60794: LD_VAR 0 1
60798: PUSH
60799: LD_VAR 0 3
60803: ARRAY
60804: PPUSH
60805: CALL 65459 0 2
60809: ST_TO_ADDR
60810: GO 60781
60812: POP
60813: POP
// end ;
60814: LD_VAR 0 2
60818: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60819: LD_INT 0
60821: PPUSH
60822: PPUSH
60823: PPUSH
60824: PPUSH
60825: PPUSH
60826: PPUSH
// if not unit or not hexes then
60827: LD_VAR 0 1
60831: NOT
60832: PUSH
60833: LD_VAR 0 2
60837: NOT
60838: OR
60839: IFFALSE 60843
// exit ;
60841: GO 60966
// dist := 9999 ;
60843: LD_ADDR_VAR 0 5
60847: PUSH
60848: LD_INT 9999
60850: ST_TO_ADDR
// for i = 1 to hexes do
60851: LD_ADDR_VAR 0 4
60855: PUSH
60856: DOUBLE
60857: LD_INT 1
60859: DEC
60860: ST_TO_ADDR
60861: LD_VAR 0 2
60865: PUSH
60866: FOR_TO
60867: IFFALSE 60954
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60869: LD_ADDR_VAR 0 6
60873: PUSH
60874: LD_VAR 0 1
60878: PPUSH
60879: LD_VAR 0 2
60883: PUSH
60884: LD_VAR 0 4
60888: ARRAY
60889: PUSH
60890: LD_INT 1
60892: ARRAY
60893: PPUSH
60894: LD_VAR 0 2
60898: PUSH
60899: LD_VAR 0 4
60903: ARRAY
60904: PUSH
60905: LD_INT 2
60907: ARRAY
60908: PPUSH
60909: CALL_OW 297
60913: ST_TO_ADDR
// if tdist < dist then
60914: LD_VAR 0 6
60918: PUSH
60919: LD_VAR 0 5
60923: LESS
60924: IFFALSE 60952
// begin hex := hexes [ i ] ;
60926: LD_ADDR_VAR 0 8
60930: PUSH
60931: LD_VAR 0 2
60935: PUSH
60936: LD_VAR 0 4
60940: ARRAY
60941: ST_TO_ADDR
// dist := tdist ;
60942: LD_ADDR_VAR 0 5
60946: PUSH
60947: LD_VAR 0 6
60951: ST_TO_ADDR
// end ; end ;
60952: GO 60866
60954: POP
60955: POP
// result := hex ;
60956: LD_ADDR_VAR 0 3
60960: PUSH
60961: LD_VAR 0 8
60965: ST_TO_ADDR
// end ;
60966: LD_VAR 0 3
60970: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60971: LD_INT 0
60973: PPUSH
60974: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60975: LD_VAR 0 1
60979: NOT
60980: PUSH
60981: LD_VAR 0 1
60985: PUSH
60986: LD_INT 21
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 23
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PPUSH
61010: CALL_OW 69
61014: IN
61015: NOT
61016: OR
61017: IFFALSE 61021
// exit ;
61019: GO 61068
// for i = 1 to 3 do
61021: LD_ADDR_VAR 0 3
61025: PUSH
61026: DOUBLE
61027: LD_INT 1
61029: DEC
61030: ST_TO_ADDR
61031: LD_INT 3
61033: PUSH
61034: FOR_TO
61035: IFFALSE 61066
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61037: LD_VAR 0 1
61041: PPUSH
61042: CALL_OW 250
61046: PPUSH
61047: LD_VAR 0 1
61051: PPUSH
61052: CALL_OW 251
61056: PPUSH
61057: LD_INT 1
61059: PPUSH
61060: CALL_OW 453
61064: GO 61034
61066: POP
61067: POP
// end ;
61068: LD_VAR 0 2
61072: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61073: LD_INT 0
61075: PPUSH
61076: PPUSH
61077: PPUSH
61078: PPUSH
61079: PPUSH
61080: PPUSH
// if not unit or not enemy_unit then
61081: LD_VAR 0 1
61085: NOT
61086: PUSH
61087: LD_VAR 0 2
61091: NOT
61092: OR
61093: IFFALSE 61097
// exit ;
61095: GO 61564
// if GetLives ( i ) < 250 then
61097: LD_VAR 0 4
61101: PPUSH
61102: CALL_OW 256
61106: PUSH
61107: LD_INT 250
61109: LESS
61110: IFFALSE 61123
// begin ComAutodestruct ( i ) ;
61112: LD_VAR 0 4
61116: PPUSH
61117: CALL 60971 0 1
// exit ;
61121: GO 61564
// end ; x := GetX ( enemy_unit ) ;
61123: LD_ADDR_VAR 0 7
61127: PUSH
61128: LD_VAR 0 2
61132: PPUSH
61133: CALL_OW 250
61137: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61138: LD_ADDR_VAR 0 8
61142: PUSH
61143: LD_VAR 0 2
61147: PPUSH
61148: CALL_OW 251
61152: ST_TO_ADDR
// if not x or not y then
61153: LD_VAR 0 7
61157: NOT
61158: PUSH
61159: LD_VAR 0 8
61163: NOT
61164: OR
61165: IFFALSE 61169
// exit ;
61167: GO 61564
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61169: LD_ADDR_VAR 0 6
61173: PUSH
61174: LD_VAR 0 7
61178: PPUSH
61179: LD_INT 0
61181: PPUSH
61182: LD_INT 4
61184: PPUSH
61185: CALL_OW 272
61189: PUSH
61190: LD_VAR 0 8
61194: PPUSH
61195: LD_INT 0
61197: PPUSH
61198: LD_INT 4
61200: PPUSH
61201: CALL_OW 273
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_VAR 0 7
61214: PPUSH
61215: LD_INT 1
61217: PPUSH
61218: LD_INT 4
61220: PPUSH
61221: CALL_OW 272
61225: PUSH
61226: LD_VAR 0 8
61230: PPUSH
61231: LD_INT 1
61233: PPUSH
61234: LD_INT 4
61236: PPUSH
61237: CALL_OW 273
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_VAR 0 7
61250: PPUSH
61251: LD_INT 2
61253: PPUSH
61254: LD_INT 4
61256: PPUSH
61257: CALL_OW 272
61261: PUSH
61262: LD_VAR 0 8
61266: PPUSH
61267: LD_INT 2
61269: PPUSH
61270: LD_INT 4
61272: PPUSH
61273: CALL_OW 273
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_VAR 0 7
61286: PPUSH
61287: LD_INT 3
61289: PPUSH
61290: LD_INT 4
61292: PPUSH
61293: CALL_OW 272
61297: PUSH
61298: LD_VAR 0 8
61302: PPUSH
61303: LD_INT 3
61305: PPUSH
61306: LD_INT 4
61308: PPUSH
61309: CALL_OW 273
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_VAR 0 7
61322: PPUSH
61323: LD_INT 4
61325: PPUSH
61326: LD_INT 4
61328: PPUSH
61329: CALL_OW 272
61333: PUSH
61334: LD_VAR 0 8
61338: PPUSH
61339: LD_INT 4
61341: PPUSH
61342: LD_INT 4
61344: PPUSH
61345: CALL_OW 273
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_VAR 0 7
61358: PPUSH
61359: LD_INT 5
61361: PPUSH
61362: LD_INT 4
61364: PPUSH
61365: CALL_OW 272
61369: PUSH
61370: LD_VAR 0 8
61374: PPUSH
61375: LD_INT 5
61377: PPUSH
61378: LD_INT 4
61380: PPUSH
61381: CALL_OW 273
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: ST_TO_ADDR
// for i = tmp downto 1 do
61398: LD_ADDR_VAR 0 4
61402: PUSH
61403: DOUBLE
61404: LD_VAR 0 6
61408: INC
61409: ST_TO_ADDR
61410: LD_INT 1
61412: PUSH
61413: FOR_DOWNTO
61414: IFFALSE 61515
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61416: LD_VAR 0 6
61420: PUSH
61421: LD_VAR 0 4
61425: ARRAY
61426: PUSH
61427: LD_INT 1
61429: ARRAY
61430: PPUSH
61431: LD_VAR 0 6
61435: PUSH
61436: LD_VAR 0 4
61440: ARRAY
61441: PUSH
61442: LD_INT 2
61444: ARRAY
61445: PPUSH
61446: CALL_OW 488
61450: NOT
61451: PUSH
61452: LD_VAR 0 6
61456: PUSH
61457: LD_VAR 0 4
61461: ARRAY
61462: PUSH
61463: LD_INT 1
61465: ARRAY
61466: PPUSH
61467: LD_VAR 0 6
61471: PUSH
61472: LD_VAR 0 4
61476: ARRAY
61477: PUSH
61478: LD_INT 2
61480: ARRAY
61481: PPUSH
61482: CALL_OW 428
61486: PUSH
61487: LD_INT 0
61489: NONEQUAL
61490: OR
61491: IFFALSE 61513
// tmp := Delete ( tmp , i ) ;
61493: LD_ADDR_VAR 0 6
61497: PUSH
61498: LD_VAR 0 6
61502: PPUSH
61503: LD_VAR 0 4
61507: PPUSH
61508: CALL_OW 3
61512: ST_TO_ADDR
61513: GO 61413
61515: POP
61516: POP
// j := GetClosestHex ( unit , tmp ) ;
61517: LD_ADDR_VAR 0 5
61521: PUSH
61522: LD_VAR 0 1
61526: PPUSH
61527: LD_VAR 0 6
61531: PPUSH
61532: CALL 60819 0 2
61536: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61537: LD_VAR 0 1
61541: PPUSH
61542: LD_VAR 0 5
61546: PUSH
61547: LD_INT 1
61549: ARRAY
61550: PPUSH
61551: LD_VAR 0 5
61555: PUSH
61556: LD_INT 2
61558: ARRAY
61559: PPUSH
61560: CALL_OW 111
// end ;
61564: LD_VAR 0 3
61568: RET
// export function PrepareApemanSoldier ( ) ; begin
61569: LD_INT 0
61571: PPUSH
// uc_nation := 0 ;
61572: LD_ADDR_OWVAR 21
61576: PUSH
61577: LD_INT 0
61579: ST_TO_ADDR
// hc_sex := sex_male ;
61580: LD_ADDR_OWVAR 27
61584: PUSH
61585: LD_INT 1
61587: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61588: LD_ADDR_OWVAR 28
61592: PUSH
61593: LD_INT 15
61595: ST_TO_ADDR
// hc_gallery :=  ;
61596: LD_ADDR_OWVAR 33
61600: PUSH
61601: LD_STRING 
61603: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61604: LD_ADDR_OWVAR 31
61608: PUSH
61609: LD_INT 0
61611: PPUSH
61612: LD_INT 3
61614: PPUSH
61615: CALL_OW 12
61619: PUSH
61620: LD_INT 0
61622: PPUSH
61623: LD_INT 3
61625: PPUSH
61626: CALL_OW 12
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: ST_TO_ADDR
// end ;
61643: LD_VAR 0 1
61647: RET
// export function PrepareApemanEngineer ( ) ; begin
61648: LD_INT 0
61650: PPUSH
// uc_nation := 0 ;
61651: LD_ADDR_OWVAR 21
61655: PUSH
61656: LD_INT 0
61658: ST_TO_ADDR
// hc_sex := sex_male ;
61659: LD_ADDR_OWVAR 27
61663: PUSH
61664: LD_INT 1
61666: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61667: LD_ADDR_OWVAR 28
61671: PUSH
61672: LD_INT 16
61674: ST_TO_ADDR
// hc_gallery :=  ;
61675: LD_ADDR_OWVAR 33
61679: PUSH
61680: LD_STRING 
61682: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61683: LD_ADDR_OWVAR 31
61687: PUSH
61688: LD_INT 0
61690: PPUSH
61691: LD_INT 3
61693: PPUSH
61694: CALL_OW 12
61698: PUSH
61699: LD_INT 0
61701: PPUSH
61702: LD_INT 3
61704: PPUSH
61705: CALL_OW 12
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: ST_TO_ADDR
// end ;
61722: LD_VAR 0 1
61726: RET
// export function PrepareApeman ( agressivity ) ; begin
61727: LD_INT 0
61729: PPUSH
// uc_side := 0 ;
61730: LD_ADDR_OWVAR 20
61734: PUSH
61735: LD_INT 0
61737: ST_TO_ADDR
// uc_nation := 0 ;
61738: LD_ADDR_OWVAR 21
61742: PUSH
61743: LD_INT 0
61745: ST_TO_ADDR
// hc_sex := sex_male ;
61746: LD_ADDR_OWVAR 27
61750: PUSH
61751: LD_INT 1
61753: ST_TO_ADDR
// hc_class := class_apeman ;
61754: LD_ADDR_OWVAR 28
61758: PUSH
61759: LD_INT 12
61761: ST_TO_ADDR
// hc_gallery :=  ;
61762: LD_ADDR_OWVAR 33
61766: PUSH
61767: LD_STRING 
61769: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61770: LD_ADDR_OWVAR 35
61774: PUSH
61775: LD_VAR 0 1
61779: NEG
61780: PPUSH
61781: LD_VAR 0 1
61785: PPUSH
61786: CALL_OW 12
61790: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61791: LD_ADDR_OWVAR 31
61795: PUSH
61796: LD_INT 0
61798: PPUSH
61799: LD_INT 3
61801: PPUSH
61802: CALL_OW 12
61806: PUSH
61807: LD_INT 0
61809: PPUSH
61810: LD_INT 3
61812: PPUSH
61813: CALL_OW 12
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: ST_TO_ADDR
// end ;
61830: LD_VAR 0 2
61834: RET
// export function PrepareTiger ( agressivity ) ; begin
61835: LD_INT 0
61837: PPUSH
// uc_side := 0 ;
61838: LD_ADDR_OWVAR 20
61842: PUSH
61843: LD_INT 0
61845: ST_TO_ADDR
// uc_nation := 0 ;
61846: LD_ADDR_OWVAR 21
61850: PUSH
61851: LD_INT 0
61853: ST_TO_ADDR
// hc_class := class_tiger ;
61854: LD_ADDR_OWVAR 28
61858: PUSH
61859: LD_INT 14
61861: ST_TO_ADDR
// hc_gallery :=  ;
61862: LD_ADDR_OWVAR 33
61866: PUSH
61867: LD_STRING 
61869: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61870: LD_ADDR_OWVAR 35
61874: PUSH
61875: LD_VAR 0 1
61879: NEG
61880: PPUSH
61881: LD_VAR 0 1
61885: PPUSH
61886: CALL_OW 12
61890: ST_TO_ADDR
// end ;
61891: LD_VAR 0 2
61895: RET
// export function PrepareEnchidna ( ) ; begin
61896: LD_INT 0
61898: PPUSH
// uc_side := 0 ;
61899: LD_ADDR_OWVAR 20
61903: PUSH
61904: LD_INT 0
61906: ST_TO_ADDR
// uc_nation := 0 ;
61907: LD_ADDR_OWVAR 21
61911: PUSH
61912: LD_INT 0
61914: ST_TO_ADDR
// hc_class := class_baggie ;
61915: LD_ADDR_OWVAR 28
61919: PUSH
61920: LD_INT 13
61922: ST_TO_ADDR
// hc_gallery :=  ;
61923: LD_ADDR_OWVAR 33
61927: PUSH
61928: LD_STRING 
61930: ST_TO_ADDR
// end ;
61931: LD_VAR 0 1
61935: RET
// export function PrepareFrog ( ) ; begin
61936: LD_INT 0
61938: PPUSH
// uc_side := 0 ;
61939: LD_ADDR_OWVAR 20
61943: PUSH
61944: LD_INT 0
61946: ST_TO_ADDR
// uc_nation := 0 ;
61947: LD_ADDR_OWVAR 21
61951: PUSH
61952: LD_INT 0
61954: ST_TO_ADDR
// hc_class := class_frog ;
61955: LD_ADDR_OWVAR 28
61959: PUSH
61960: LD_INT 19
61962: ST_TO_ADDR
// hc_gallery :=  ;
61963: LD_ADDR_OWVAR 33
61967: PUSH
61968: LD_STRING 
61970: ST_TO_ADDR
// end ;
61971: LD_VAR 0 1
61975: RET
// export function PrepareFish ( ) ; begin
61976: LD_INT 0
61978: PPUSH
// uc_side := 0 ;
61979: LD_ADDR_OWVAR 20
61983: PUSH
61984: LD_INT 0
61986: ST_TO_ADDR
// uc_nation := 0 ;
61987: LD_ADDR_OWVAR 21
61991: PUSH
61992: LD_INT 0
61994: ST_TO_ADDR
// hc_class := class_fish ;
61995: LD_ADDR_OWVAR 28
61999: PUSH
62000: LD_INT 20
62002: ST_TO_ADDR
// hc_gallery :=  ;
62003: LD_ADDR_OWVAR 33
62007: PUSH
62008: LD_STRING 
62010: ST_TO_ADDR
// end ;
62011: LD_VAR 0 1
62015: RET
// export function PrepareBird ( ) ; begin
62016: LD_INT 0
62018: PPUSH
// uc_side := 0 ;
62019: LD_ADDR_OWVAR 20
62023: PUSH
62024: LD_INT 0
62026: ST_TO_ADDR
// uc_nation := 0 ;
62027: LD_ADDR_OWVAR 21
62031: PUSH
62032: LD_INT 0
62034: ST_TO_ADDR
// hc_class := class_phororhacos ;
62035: LD_ADDR_OWVAR 28
62039: PUSH
62040: LD_INT 18
62042: ST_TO_ADDR
// hc_gallery :=  ;
62043: LD_ADDR_OWVAR 33
62047: PUSH
62048: LD_STRING 
62050: ST_TO_ADDR
// end ;
62051: LD_VAR 0 1
62055: RET
// export function PrepareHorse ( ) ; begin
62056: LD_INT 0
62058: PPUSH
// uc_side := 0 ;
62059: LD_ADDR_OWVAR 20
62063: PUSH
62064: LD_INT 0
62066: ST_TO_ADDR
// uc_nation := 0 ;
62067: LD_ADDR_OWVAR 21
62071: PUSH
62072: LD_INT 0
62074: ST_TO_ADDR
// hc_class := class_horse ;
62075: LD_ADDR_OWVAR 28
62079: PUSH
62080: LD_INT 21
62082: ST_TO_ADDR
// hc_gallery :=  ;
62083: LD_ADDR_OWVAR 33
62087: PUSH
62088: LD_STRING 
62090: ST_TO_ADDR
// end ;
62091: LD_VAR 0 1
62095: RET
// export function PrepareMastodont ( ) ; begin
62096: LD_INT 0
62098: PPUSH
// uc_side := 0 ;
62099: LD_ADDR_OWVAR 20
62103: PUSH
62104: LD_INT 0
62106: ST_TO_ADDR
// uc_nation := 0 ;
62107: LD_ADDR_OWVAR 21
62111: PUSH
62112: LD_INT 0
62114: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62115: LD_ADDR_OWVAR 37
62119: PUSH
62120: LD_INT 31
62122: ST_TO_ADDR
// vc_control := control_rider ;
62123: LD_ADDR_OWVAR 38
62127: PUSH
62128: LD_INT 4
62130: ST_TO_ADDR
// end ;
62131: LD_VAR 0 1
62135: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62136: LD_INT 0
62138: PPUSH
62139: PPUSH
62140: PPUSH
// uc_side = 0 ;
62141: LD_ADDR_OWVAR 20
62145: PUSH
62146: LD_INT 0
62148: ST_TO_ADDR
// uc_nation = 0 ;
62149: LD_ADDR_OWVAR 21
62153: PUSH
62154: LD_INT 0
62156: ST_TO_ADDR
// InitHc_All ( ) ;
62157: CALL_OW 584
// InitVc ;
62161: CALL_OW 20
// if mastodonts then
62165: LD_VAR 0 6
62169: IFFALSE 62236
// for i = 1 to mastodonts do
62171: LD_ADDR_VAR 0 11
62175: PUSH
62176: DOUBLE
62177: LD_INT 1
62179: DEC
62180: ST_TO_ADDR
62181: LD_VAR 0 6
62185: PUSH
62186: FOR_TO
62187: IFFALSE 62234
// begin vc_chassis := 31 ;
62189: LD_ADDR_OWVAR 37
62193: PUSH
62194: LD_INT 31
62196: ST_TO_ADDR
// vc_control := control_rider ;
62197: LD_ADDR_OWVAR 38
62201: PUSH
62202: LD_INT 4
62204: ST_TO_ADDR
// animal := CreateVehicle ;
62205: LD_ADDR_VAR 0 12
62209: PUSH
62210: CALL_OW 45
62214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62215: LD_VAR 0 12
62219: PPUSH
62220: LD_VAR 0 8
62224: PPUSH
62225: LD_INT 0
62227: PPUSH
62228: CALL 64364 0 3
// end ;
62232: GO 62186
62234: POP
62235: POP
// if horses then
62236: LD_VAR 0 5
62240: IFFALSE 62307
// for i = 1 to horses do
62242: LD_ADDR_VAR 0 11
62246: PUSH
62247: DOUBLE
62248: LD_INT 1
62250: DEC
62251: ST_TO_ADDR
62252: LD_VAR 0 5
62256: PUSH
62257: FOR_TO
62258: IFFALSE 62305
// begin hc_class := 21 ;
62260: LD_ADDR_OWVAR 28
62264: PUSH
62265: LD_INT 21
62267: ST_TO_ADDR
// hc_gallery :=  ;
62268: LD_ADDR_OWVAR 33
62272: PUSH
62273: LD_STRING 
62275: ST_TO_ADDR
// animal := CreateHuman ;
62276: LD_ADDR_VAR 0 12
62280: PUSH
62281: CALL_OW 44
62285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62286: LD_VAR 0 12
62290: PPUSH
62291: LD_VAR 0 8
62295: PPUSH
62296: LD_INT 0
62298: PPUSH
62299: CALL 64364 0 3
// end ;
62303: GO 62257
62305: POP
62306: POP
// if birds then
62307: LD_VAR 0 1
62311: IFFALSE 62378
// for i = 1 to birds do
62313: LD_ADDR_VAR 0 11
62317: PUSH
62318: DOUBLE
62319: LD_INT 1
62321: DEC
62322: ST_TO_ADDR
62323: LD_VAR 0 1
62327: PUSH
62328: FOR_TO
62329: IFFALSE 62376
// begin hc_class := 18 ;
62331: LD_ADDR_OWVAR 28
62335: PUSH
62336: LD_INT 18
62338: ST_TO_ADDR
// hc_gallery =  ;
62339: LD_ADDR_OWVAR 33
62343: PUSH
62344: LD_STRING 
62346: ST_TO_ADDR
// animal := CreateHuman ;
62347: LD_ADDR_VAR 0 12
62351: PUSH
62352: CALL_OW 44
62356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62357: LD_VAR 0 12
62361: PPUSH
62362: LD_VAR 0 8
62366: PPUSH
62367: LD_INT 0
62369: PPUSH
62370: CALL 64364 0 3
// end ;
62374: GO 62328
62376: POP
62377: POP
// if tigers then
62378: LD_VAR 0 2
62382: IFFALSE 62466
// for i = 1 to tigers do
62384: LD_ADDR_VAR 0 11
62388: PUSH
62389: DOUBLE
62390: LD_INT 1
62392: DEC
62393: ST_TO_ADDR
62394: LD_VAR 0 2
62398: PUSH
62399: FOR_TO
62400: IFFALSE 62464
// begin hc_class = class_tiger ;
62402: LD_ADDR_OWVAR 28
62406: PUSH
62407: LD_INT 14
62409: ST_TO_ADDR
// hc_gallery =  ;
62410: LD_ADDR_OWVAR 33
62414: PUSH
62415: LD_STRING 
62417: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62418: LD_ADDR_OWVAR 35
62422: PUSH
62423: LD_INT 7
62425: NEG
62426: PPUSH
62427: LD_INT 7
62429: PPUSH
62430: CALL_OW 12
62434: ST_TO_ADDR
// animal := CreateHuman ;
62435: LD_ADDR_VAR 0 12
62439: PUSH
62440: CALL_OW 44
62444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62445: LD_VAR 0 12
62449: PPUSH
62450: LD_VAR 0 8
62454: PPUSH
62455: LD_INT 0
62457: PPUSH
62458: CALL 64364 0 3
// end ;
62462: GO 62399
62464: POP
62465: POP
// if apemans then
62466: LD_VAR 0 3
62470: IFFALSE 62593
// for i = 1 to apemans do
62472: LD_ADDR_VAR 0 11
62476: PUSH
62477: DOUBLE
62478: LD_INT 1
62480: DEC
62481: ST_TO_ADDR
62482: LD_VAR 0 3
62486: PUSH
62487: FOR_TO
62488: IFFALSE 62591
// begin hc_class = class_apeman ;
62490: LD_ADDR_OWVAR 28
62494: PUSH
62495: LD_INT 12
62497: ST_TO_ADDR
// hc_gallery =  ;
62498: LD_ADDR_OWVAR 33
62502: PUSH
62503: LD_STRING 
62505: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62506: LD_ADDR_OWVAR 35
62510: PUSH
62511: LD_INT 2
62513: NEG
62514: PPUSH
62515: LD_INT 2
62517: PPUSH
62518: CALL_OW 12
62522: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62523: LD_ADDR_OWVAR 31
62527: PUSH
62528: LD_INT 1
62530: PPUSH
62531: LD_INT 3
62533: PPUSH
62534: CALL_OW 12
62538: PUSH
62539: LD_INT 1
62541: PPUSH
62542: LD_INT 3
62544: PPUSH
62545: CALL_OW 12
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: ST_TO_ADDR
// animal := CreateHuman ;
62562: LD_ADDR_VAR 0 12
62566: PUSH
62567: CALL_OW 44
62571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62572: LD_VAR 0 12
62576: PPUSH
62577: LD_VAR 0 8
62581: PPUSH
62582: LD_INT 0
62584: PPUSH
62585: CALL 64364 0 3
// end ;
62589: GO 62487
62591: POP
62592: POP
// if enchidnas then
62593: LD_VAR 0 4
62597: IFFALSE 62664
// for i = 1 to enchidnas do
62599: LD_ADDR_VAR 0 11
62603: PUSH
62604: DOUBLE
62605: LD_INT 1
62607: DEC
62608: ST_TO_ADDR
62609: LD_VAR 0 4
62613: PUSH
62614: FOR_TO
62615: IFFALSE 62662
// begin hc_class = 13 ;
62617: LD_ADDR_OWVAR 28
62621: PUSH
62622: LD_INT 13
62624: ST_TO_ADDR
// hc_gallery =  ;
62625: LD_ADDR_OWVAR 33
62629: PUSH
62630: LD_STRING 
62632: ST_TO_ADDR
// animal := CreateHuman ;
62633: LD_ADDR_VAR 0 12
62637: PUSH
62638: CALL_OW 44
62642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62643: LD_VAR 0 12
62647: PPUSH
62648: LD_VAR 0 8
62652: PPUSH
62653: LD_INT 0
62655: PPUSH
62656: CALL 64364 0 3
// end ;
62660: GO 62614
62662: POP
62663: POP
// if fishes then
62664: LD_VAR 0 7
62668: IFFALSE 62735
// for i = 1 to fishes do
62670: LD_ADDR_VAR 0 11
62674: PUSH
62675: DOUBLE
62676: LD_INT 1
62678: DEC
62679: ST_TO_ADDR
62680: LD_VAR 0 7
62684: PUSH
62685: FOR_TO
62686: IFFALSE 62733
// begin hc_class = 20 ;
62688: LD_ADDR_OWVAR 28
62692: PUSH
62693: LD_INT 20
62695: ST_TO_ADDR
// hc_gallery =  ;
62696: LD_ADDR_OWVAR 33
62700: PUSH
62701: LD_STRING 
62703: ST_TO_ADDR
// animal := CreateHuman ;
62704: LD_ADDR_VAR 0 12
62708: PUSH
62709: CALL_OW 44
62713: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62714: LD_VAR 0 12
62718: PPUSH
62719: LD_VAR 0 9
62723: PPUSH
62724: LD_INT 0
62726: PPUSH
62727: CALL 64364 0 3
// end ;
62731: GO 62685
62733: POP
62734: POP
// end ;
62735: LD_VAR 0 10
62739: RET
// export function WantHeal ( sci , unit ) ; begin
62740: LD_INT 0
62742: PPUSH
// if GetTaskList ( sci ) > 0 then
62743: LD_VAR 0 1
62747: PPUSH
62748: CALL_OW 437
62752: PUSH
62753: LD_INT 0
62755: GREATER
62756: IFFALSE 62826
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62758: LD_VAR 0 1
62762: PPUSH
62763: CALL_OW 437
62767: PUSH
62768: LD_INT 1
62770: ARRAY
62771: PUSH
62772: LD_INT 1
62774: ARRAY
62775: PUSH
62776: LD_STRING l
62778: EQUAL
62779: PUSH
62780: LD_VAR 0 1
62784: PPUSH
62785: CALL_OW 437
62789: PUSH
62790: LD_INT 1
62792: ARRAY
62793: PUSH
62794: LD_INT 4
62796: ARRAY
62797: PUSH
62798: LD_VAR 0 2
62802: EQUAL
62803: AND
62804: IFFALSE 62816
// result := true else
62806: LD_ADDR_VAR 0 3
62810: PUSH
62811: LD_INT 1
62813: ST_TO_ADDR
62814: GO 62824
// result := false ;
62816: LD_ADDR_VAR 0 3
62820: PUSH
62821: LD_INT 0
62823: ST_TO_ADDR
// end else
62824: GO 62834
// result := false ;
62826: LD_ADDR_VAR 0 3
62830: PUSH
62831: LD_INT 0
62833: ST_TO_ADDR
// end ;
62834: LD_VAR 0 3
62838: RET
// export function HealTarget ( sci ) ; begin
62839: LD_INT 0
62841: PPUSH
// if not sci then
62842: LD_VAR 0 1
62846: NOT
62847: IFFALSE 62851
// exit ;
62849: GO 62916
// result := 0 ;
62851: LD_ADDR_VAR 0 2
62855: PUSH
62856: LD_INT 0
62858: ST_TO_ADDR
// if GetTaskList ( sci ) then
62859: LD_VAR 0 1
62863: PPUSH
62864: CALL_OW 437
62868: IFFALSE 62916
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62870: LD_VAR 0 1
62874: PPUSH
62875: CALL_OW 437
62879: PUSH
62880: LD_INT 1
62882: ARRAY
62883: PUSH
62884: LD_INT 1
62886: ARRAY
62887: PUSH
62888: LD_STRING l
62890: EQUAL
62891: IFFALSE 62916
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62893: LD_ADDR_VAR 0 2
62897: PUSH
62898: LD_VAR 0 1
62902: PPUSH
62903: CALL_OW 437
62907: PUSH
62908: LD_INT 1
62910: ARRAY
62911: PUSH
62912: LD_INT 4
62914: ARRAY
62915: ST_TO_ADDR
// end ;
62916: LD_VAR 0 2
62920: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62921: LD_INT 0
62923: PPUSH
62924: PPUSH
62925: PPUSH
62926: PPUSH
// if not base_units then
62927: LD_VAR 0 1
62931: NOT
62932: IFFALSE 62936
// exit ;
62934: GO 63023
// result := false ;
62936: LD_ADDR_VAR 0 2
62940: PUSH
62941: LD_INT 0
62943: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62944: LD_ADDR_VAR 0 5
62948: PUSH
62949: LD_VAR 0 1
62953: PPUSH
62954: LD_INT 21
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PPUSH
62964: CALL_OW 72
62968: ST_TO_ADDR
// if not tmp then
62969: LD_VAR 0 5
62973: NOT
62974: IFFALSE 62978
// exit ;
62976: GO 63023
// for i in tmp do
62978: LD_ADDR_VAR 0 3
62982: PUSH
62983: LD_VAR 0 5
62987: PUSH
62988: FOR_IN
62989: IFFALSE 63021
// begin result := EnemyInRange ( i , 22 ) ;
62991: LD_ADDR_VAR 0 2
62995: PUSH
62996: LD_VAR 0 3
63000: PPUSH
63001: LD_INT 22
63003: PPUSH
63004: CALL 60621 0 2
63008: ST_TO_ADDR
// if result then
63009: LD_VAR 0 2
63013: IFFALSE 63019
// exit ;
63015: POP
63016: POP
63017: GO 63023
// end ;
63019: GO 62988
63021: POP
63022: POP
// end ;
63023: LD_VAR 0 2
63027: RET
// export function FilterByTag ( units , tag ) ; begin
63028: LD_INT 0
63030: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63031: LD_ADDR_VAR 0 3
63035: PUSH
63036: LD_VAR 0 1
63040: PPUSH
63041: LD_INT 120
63043: PUSH
63044: LD_VAR 0 2
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PPUSH
63053: CALL_OW 72
63057: ST_TO_ADDR
// end ;
63058: LD_VAR 0 3
63062: RET
// export function IsDriver ( un ) ; begin
63063: LD_INT 0
63065: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63066: LD_ADDR_VAR 0 2
63070: PUSH
63071: LD_VAR 0 1
63075: PUSH
63076: LD_INT 55
63078: PUSH
63079: EMPTY
63080: LIST
63081: PPUSH
63082: CALL_OW 69
63086: IN
63087: ST_TO_ADDR
// end ;
63088: LD_VAR 0 2
63092: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63093: LD_INT 0
63095: PPUSH
63096: PPUSH
// list := [ ] ;
63097: LD_ADDR_VAR 0 5
63101: PUSH
63102: EMPTY
63103: ST_TO_ADDR
// case d of 0 :
63104: LD_VAR 0 3
63108: PUSH
63109: LD_INT 0
63111: DOUBLE
63112: EQUAL
63113: IFTRUE 63117
63115: GO 63250
63117: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63118: LD_ADDR_VAR 0 5
63122: PUSH
63123: LD_VAR 0 1
63127: PUSH
63128: LD_INT 4
63130: MINUS
63131: PUSH
63132: LD_VAR 0 2
63136: PUSH
63137: LD_INT 4
63139: MINUS
63140: PUSH
63141: LD_INT 2
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: PUSH
63149: LD_VAR 0 1
63153: PUSH
63154: LD_INT 3
63156: MINUS
63157: PUSH
63158: LD_VAR 0 2
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: LIST
63170: PUSH
63171: LD_VAR 0 1
63175: PUSH
63176: LD_INT 4
63178: PLUS
63179: PUSH
63180: LD_VAR 0 2
63184: PUSH
63185: LD_INT 4
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: LIST
63192: PUSH
63193: LD_VAR 0 1
63197: PUSH
63198: LD_INT 3
63200: PLUS
63201: PUSH
63202: LD_VAR 0 2
63206: PUSH
63207: LD_INT 3
63209: PLUS
63210: PUSH
63211: LD_INT 5
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: LIST
63218: PUSH
63219: LD_VAR 0 1
63223: PUSH
63224: LD_VAR 0 2
63228: PUSH
63229: LD_INT 4
63231: PLUS
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: ST_TO_ADDR
// end ; 1 :
63248: GO 63948
63250: LD_INT 1
63252: DOUBLE
63253: EQUAL
63254: IFTRUE 63258
63256: GO 63391
63258: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63259: LD_ADDR_VAR 0 5
63263: PUSH
63264: LD_VAR 0 1
63268: PUSH
63269: LD_VAR 0 2
63273: PUSH
63274: LD_INT 4
63276: MINUS
63277: PUSH
63278: LD_INT 3
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: PUSH
63286: LD_VAR 0 1
63290: PUSH
63291: LD_INT 3
63293: MINUS
63294: PUSH
63295: LD_VAR 0 2
63299: PUSH
63300: LD_INT 3
63302: MINUS
63303: PUSH
63304: LD_INT 2
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: LIST
63311: PUSH
63312: LD_VAR 0 1
63316: PUSH
63317: LD_INT 4
63319: MINUS
63320: PUSH
63321: LD_VAR 0 2
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: LIST
63333: PUSH
63334: LD_VAR 0 1
63338: PUSH
63339: LD_VAR 0 2
63343: PUSH
63344: LD_INT 3
63346: PLUS
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: PUSH
63356: LD_VAR 0 1
63360: PUSH
63361: LD_INT 4
63363: PLUS
63364: PUSH
63365: LD_VAR 0 2
63369: PUSH
63370: LD_INT 4
63372: PLUS
63373: PUSH
63374: LD_INT 5
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: LIST
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: ST_TO_ADDR
// end ; 2 :
63389: GO 63948
63391: LD_INT 2
63393: DOUBLE
63394: EQUAL
63395: IFTRUE 63399
63397: GO 63528
63399: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63400: LD_ADDR_VAR 0 5
63404: PUSH
63405: LD_VAR 0 1
63409: PUSH
63410: LD_VAR 0 2
63414: PUSH
63415: LD_INT 3
63417: MINUS
63418: PUSH
63419: LD_INT 3
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: PUSH
63427: LD_VAR 0 1
63431: PUSH
63432: LD_INT 4
63434: PLUS
63435: PUSH
63436: LD_VAR 0 2
63440: PUSH
63441: LD_INT 4
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: PUSH
63449: LD_VAR 0 1
63453: PUSH
63454: LD_VAR 0 2
63458: PUSH
63459: LD_INT 4
63461: PLUS
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: PUSH
63471: LD_VAR 0 1
63475: PUSH
63476: LD_INT 3
63478: MINUS
63479: PUSH
63480: LD_VAR 0 2
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: LIST
63492: PUSH
63493: LD_VAR 0 1
63497: PUSH
63498: LD_INT 4
63500: MINUS
63501: PUSH
63502: LD_VAR 0 2
63506: PUSH
63507: LD_INT 4
63509: MINUS
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: LIST
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: ST_TO_ADDR
// end ; 3 :
63526: GO 63948
63528: LD_INT 3
63530: DOUBLE
63531: EQUAL
63532: IFTRUE 63536
63534: GO 63669
63536: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63537: LD_ADDR_VAR 0 5
63541: PUSH
63542: LD_VAR 0 1
63546: PUSH
63547: LD_INT 3
63549: PLUS
63550: PUSH
63551: LD_VAR 0 2
63555: PUSH
63556: LD_INT 4
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: PUSH
63564: LD_VAR 0 1
63568: PUSH
63569: LD_INT 4
63571: PLUS
63572: PUSH
63573: LD_VAR 0 2
63577: PUSH
63578: LD_INT 4
63580: PLUS
63581: PUSH
63582: LD_INT 5
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: PUSH
63590: LD_VAR 0 1
63594: PUSH
63595: LD_INT 4
63597: MINUS
63598: PUSH
63599: LD_VAR 0 2
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: PUSH
63612: LD_VAR 0 1
63616: PUSH
63617: LD_VAR 0 2
63621: PUSH
63622: LD_INT 4
63624: MINUS
63625: PUSH
63626: LD_INT 3
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: PUSH
63634: LD_VAR 0 1
63638: PUSH
63639: LD_INT 3
63641: MINUS
63642: PUSH
63643: LD_VAR 0 2
63647: PUSH
63648: LD_INT 3
63650: MINUS
63651: PUSH
63652: LD_INT 2
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: LIST
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: ST_TO_ADDR
// end ; 4 :
63667: GO 63948
63669: LD_INT 4
63671: DOUBLE
63672: EQUAL
63673: IFTRUE 63677
63675: GO 63810
63677: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63678: LD_ADDR_VAR 0 5
63682: PUSH
63683: LD_VAR 0 1
63687: PUSH
63688: LD_VAR 0 2
63692: PUSH
63693: LD_INT 4
63695: PLUS
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: PUSH
63705: LD_VAR 0 1
63709: PUSH
63710: LD_INT 3
63712: PLUS
63713: PUSH
63714: LD_VAR 0 2
63718: PUSH
63719: LD_INT 3
63721: PLUS
63722: PUSH
63723: LD_INT 5
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: PUSH
63731: LD_VAR 0 1
63735: PUSH
63736: LD_INT 4
63738: PLUS
63739: PUSH
63740: LD_VAR 0 2
63744: PUSH
63745: LD_INT 4
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: LIST
63752: PUSH
63753: LD_VAR 0 1
63757: PUSH
63758: LD_VAR 0 2
63762: PUSH
63763: LD_INT 3
63765: MINUS
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: PUSH
63775: LD_VAR 0 1
63779: PUSH
63780: LD_INT 4
63782: MINUS
63783: PUSH
63784: LD_VAR 0 2
63788: PUSH
63789: LD_INT 4
63791: MINUS
63792: PUSH
63793: LD_INT 2
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: LIST
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: ST_TO_ADDR
// end ; 5 :
63808: GO 63948
63810: LD_INT 5
63812: DOUBLE
63813: EQUAL
63814: IFTRUE 63818
63816: GO 63947
63818: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63819: LD_ADDR_VAR 0 5
63823: PUSH
63824: LD_VAR 0 1
63828: PUSH
63829: LD_INT 4
63831: MINUS
63832: PUSH
63833: LD_VAR 0 2
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: LIST
63845: PUSH
63846: LD_VAR 0 1
63850: PUSH
63851: LD_VAR 0 2
63855: PUSH
63856: LD_INT 4
63858: MINUS
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: PUSH
63868: LD_VAR 0 1
63872: PUSH
63873: LD_INT 4
63875: PLUS
63876: PUSH
63877: LD_VAR 0 2
63881: PUSH
63882: LD_INT 4
63884: PLUS
63885: PUSH
63886: LD_INT 5
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: LIST
63893: PUSH
63894: LD_VAR 0 1
63898: PUSH
63899: LD_INT 3
63901: PLUS
63902: PUSH
63903: LD_VAR 0 2
63907: PUSH
63908: LD_INT 4
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: LIST
63915: PUSH
63916: LD_VAR 0 1
63920: PUSH
63921: LD_VAR 0 2
63925: PUSH
63926: LD_INT 3
63928: PLUS
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: ST_TO_ADDR
// end ; end ;
63945: GO 63948
63947: POP
// result := list ;
63948: LD_ADDR_VAR 0 4
63952: PUSH
63953: LD_VAR 0 5
63957: ST_TO_ADDR
// end ;
63958: LD_VAR 0 4
63962: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63963: LD_INT 0
63965: PPUSH
63966: PPUSH
63967: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63968: LD_VAR 0 1
63972: NOT
63973: PUSH
63974: LD_VAR 0 2
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: LD_INT 3
63987: PUSH
63988: LD_INT 4
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: IN
63997: NOT
63998: OR
63999: IFFALSE 64003
// exit ;
64001: GO 64086
// tmp := [ ] ;
64003: LD_ADDR_VAR 0 5
64007: PUSH
64008: EMPTY
64009: ST_TO_ADDR
// for i in units do
64010: LD_ADDR_VAR 0 4
64014: PUSH
64015: LD_VAR 0 1
64019: PUSH
64020: FOR_IN
64021: IFFALSE 64055
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64023: LD_ADDR_VAR 0 5
64027: PUSH
64028: LD_VAR 0 5
64032: PPUSH
64033: LD_VAR 0 4
64037: PPUSH
64038: LD_VAR 0 2
64042: PPUSH
64043: CALL_OW 259
64047: PPUSH
64048: CALL 65459 0 2
64052: ST_TO_ADDR
64053: GO 64020
64055: POP
64056: POP
// if not tmp then
64057: LD_VAR 0 5
64061: NOT
64062: IFFALSE 64066
// exit ;
64064: GO 64086
// result := SortListByListDesc ( units , tmp ) ;
64066: LD_ADDR_VAR 0 3
64070: PUSH
64071: LD_VAR 0 1
64075: PPUSH
64076: LD_VAR 0 5
64080: PPUSH
64081: CALL_OW 77
64085: ST_TO_ADDR
// end ;
64086: LD_VAR 0 3
64090: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64091: LD_INT 0
64093: PPUSH
64094: PPUSH
64095: PPUSH
// result := false ;
64096: LD_ADDR_VAR 0 3
64100: PUSH
64101: LD_INT 0
64103: ST_TO_ADDR
// if not building then
64104: LD_VAR 0 2
64108: NOT
64109: IFFALSE 64113
// exit ;
64111: GO 64251
// x := GetX ( building ) ;
64113: LD_ADDR_VAR 0 4
64117: PUSH
64118: LD_VAR 0 2
64122: PPUSH
64123: CALL_OW 250
64127: ST_TO_ADDR
// y := GetY ( building ) ;
64128: LD_ADDR_VAR 0 5
64132: PUSH
64133: LD_VAR 0 2
64137: PPUSH
64138: CALL_OW 251
64142: ST_TO_ADDR
// if not x or not y then
64143: LD_VAR 0 4
64147: NOT
64148: PUSH
64149: LD_VAR 0 5
64153: NOT
64154: OR
64155: IFFALSE 64159
// exit ;
64157: GO 64251
// if GetTaskList ( unit ) then
64159: LD_VAR 0 1
64163: PPUSH
64164: CALL_OW 437
64168: IFFALSE 64251
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64170: LD_STRING e
64172: PUSH
64173: LD_VAR 0 1
64177: PPUSH
64178: CALL_OW 437
64182: PUSH
64183: LD_INT 1
64185: ARRAY
64186: PUSH
64187: LD_INT 1
64189: ARRAY
64190: EQUAL
64191: PUSH
64192: LD_VAR 0 4
64196: PUSH
64197: LD_VAR 0 1
64201: PPUSH
64202: CALL_OW 437
64206: PUSH
64207: LD_INT 1
64209: ARRAY
64210: PUSH
64211: LD_INT 2
64213: ARRAY
64214: EQUAL
64215: AND
64216: PUSH
64217: LD_VAR 0 5
64221: PUSH
64222: LD_VAR 0 1
64226: PPUSH
64227: CALL_OW 437
64231: PUSH
64232: LD_INT 1
64234: ARRAY
64235: PUSH
64236: LD_INT 3
64238: ARRAY
64239: EQUAL
64240: AND
64241: IFFALSE 64251
// result := true end ;
64243: LD_ADDR_VAR 0 3
64247: PUSH
64248: LD_INT 1
64250: ST_TO_ADDR
// end ;
64251: LD_VAR 0 3
64255: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64256: LD_INT 0
64258: PPUSH
// result := false ;
64259: LD_ADDR_VAR 0 4
64263: PUSH
64264: LD_INT 0
64266: ST_TO_ADDR
// if GetTaskList ( unit ) then
64267: LD_VAR 0 1
64271: PPUSH
64272: CALL_OW 437
64276: IFFALSE 64359
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64278: LD_STRING M
64280: PUSH
64281: LD_VAR 0 1
64285: PPUSH
64286: CALL_OW 437
64290: PUSH
64291: LD_INT 1
64293: ARRAY
64294: PUSH
64295: LD_INT 1
64297: ARRAY
64298: EQUAL
64299: PUSH
64300: LD_VAR 0 2
64304: PUSH
64305: LD_VAR 0 1
64309: PPUSH
64310: CALL_OW 437
64314: PUSH
64315: LD_INT 1
64317: ARRAY
64318: PUSH
64319: LD_INT 2
64321: ARRAY
64322: EQUAL
64323: AND
64324: PUSH
64325: LD_VAR 0 3
64329: PUSH
64330: LD_VAR 0 1
64334: PPUSH
64335: CALL_OW 437
64339: PUSH
64340: LD_INT 1
64342: ARRAY
64343: PUSH
64344: LD_INT 3
64346: ARRAY
64347: EQUAL
64348: AND
64349: IFFALSE 64359
// result := true ;
64351: LD_ADDR_VAR 0 4
64355: PUSH
64356: LD_INT 1
64358: ST_TO_ADDR
// end ; end ;
64359: LD_VAR 0 4
64363: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64364: LD_INT 0
64366: PPUSH
64367: PPUSH
64368: PPUSH
64369: PPUSH
// if not unit or not area then
64370: LD_VAR 0 1
64374: NOT
64375: PUSH
64376: LD_VAR 0 2
64380: NOT
64381: OR
64382: IFFALSE 64386
// exit ;
64384: GO 64562
// tmp := AreaToList ( area , i ) ;
64386: LD_ADDR_VAR 0 6
64390: PUSH
64391: LD_VAR 0 2
64395: PPUSH
64396: LD_VAR 0 5
64400: PPUSH
64401: CALL_OW 517
64405: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64406: LD_ADDR_VAR 0 5
64410: PUSH
64411: DOUBLE
64412: LD_INT 1
64414: DEC
64415: ST_TO_ADDR
64416: LD_VAR 0 6
64420: PUSH
64421: LD_INT 1
64423: ARRAY
64424: PUSH
64425: FOR_TO
64426: IFFALSE 64560
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64428: LD_ADDR_VAR 0 7
64432: PUSH
64433: LD_VAR 0 6
64437: PUSH
64438: LD_INT 1
64440: ARRAY
64441: PUSH
64442: LD_VAR 0 5
64446: ARRAY
64447: PUSH
64448: LD_VAR 0 6
64452: PUSH
64453: LD_INT 2
64455: ARRAY
64456: PUSH
64457: LD_VAR 0 5
64461: ARRAY
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64467: LD_INT 92
64469: PUSH
64470: LD_VAR 0 7
64474: PUSH
64475: LD_INT 1
64477: ARRAY
64478: PUSH
64479: LD_VAR 0 7
64483: PUSH
64484: LD_INT 2
64486: ARRAY
64487: PUSH
64488: LD_INT 2
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: PPUSH
64497: CALL_OW 69
64501: PUSH
64502: LD_INT 0
64504: EQUAL
64505: IFFALSE 64558
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64507: LD_VAR 0 1
64511: PPUSH
64512: LD_VAR 0 7
64516: PUSH
64517: LD_INT 1
64519: ARRAY
64520: PPUSH
64521: LD_VAR 0 7
64525: PUSH
64526: LD_INT 2
64528: ARRAY
64529: PPUSH
64530: LD_VAR 0 3
64534: PPUSH
64535: CALL_OW 48
// result := IsPlaced ( unit ) ;
64539: LD_ADDR_VAR 0 4
64543: PUSH
64544: LD_VAR 0 1
64548: PPUSH
64549: CALL_OW 305
64553: ST_TO_ADDR
// exit ;
64554: POP
64555: POP
64556: GO 64562
// end ; end ;
64558: GO 64425
64560: POP
64561: POP
// end ;
64562: LD_VAR 0 4
64566: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64567: LD_INT 0
64569: PPUSH
64570: PPUSH
64571: PPUSH
// if not side or side > 8 then
64572: LD_VAR 0 1
64576: NOT
64577: PUSH
64578: LD_VAR 0 1
64582: PUSH
64583: LD_INT 8
64585: GREATER
64586: OR
64587: IFFALSE 64591
// exit ;
64589: GO 64778
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64591: LD_ADDR_VAR 0 4
64595: PUSH
64596: LD_INT 22
64598: PUSH
64599: LD_VAR 0 1
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 21
64610: PUSH
64611: LD_INT 3
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PPUSH
64622: CALL_OW 69
64626: ST_TO_ADDR
// if not tmp then
64627: LD_VAR 0 4
64631: NOT
64632: IFFALSE 64636
// exit ;
64634: GO 64778
// enable_addtolog := true ;
64636: LD_ADDR_OWVAR 81
64640: PUSH
64641: LD_INT 1
64643: ST_TO_ADDR
// AddToLog ( [ ) ;
64644: LD_STRING [
64646: PPUSH
64647: CALL_OW 561
// for i in tmp do
64651: LD_ADDR_VAR 0 3
64655: PUSH
64656: LD_VAR 0 4
64660: PUSH
64661: FOR_IN
64662: IFFALSE 64769
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64664: LD_STRING [
64666: PUSH
64667: LD_VAR 0 3
64671: PPUSH
64672: CALL_OW 266
64676: STR
64677: PUSH
64678: LD_STRING , 
64680: STR
64681: PUSH
64682: LD_VAR 0 3
64686: PPUSH
64687: CALL_OW 250
64691: STR
64692: PUSH
64693: LD_STRING , 
64695: STR
64696: PUSH
64697: LD_VAR 0 3
64701: PPUSH
64702: CALL_OW 251
64706: STR
64707: PUSH
64708: LD_STRING , 
64710: STR
64711: PUSH
64712: LD_VAR 0 3
64716: PPUSH
64717: CALL_OW 254
64721: STR
64722: PUSH
64723: LD_STRING , 
64725: STR
64726: PUSH
64727: LD_VAR 0 3
64731: PPUSH
64732: LD_INT 1
64734: PPUSH
64735: CALL_OW 268
64739: STR
64740: PUSH
64741: LD_STRING , 
64743: STR
64744: PUSH
64745: LD_VAR 0 3
64749: PPUSH
64750: LD_INT 2
64752: PPUSH
64753: CALL_OW 268
64757: STR
64758: PUSH
64759: LD_STRING ],
64761: STR
64762: PPUSH
64763: CALL_OW 561
// end ;
64767: GO 64661
64769: POP
64770: POP
// AddToLog ( ]; ) ;
64771: LD_STRING ];
64773: PPUSH
64774: CALL_OW 561
// end ;
64778: LD_VAR 0 2
64782: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64783: LD_INT 0
64785: PPUSH
64786: PPUSH
64787: PPUSH
64788: PPUSH
64789: PPUSH
// if not area or not rate or not max then
64790: LD_VAR 0 1
64794: NOT
64795: PUSH
64796: LD_VAR 0 2
64800: NOT
64801: OR
64802: PUSH
64803: LD_VAR 0 4
64807: NOT
64808: OR
64809: IFFALSE 64813
// exit ;
64811: GO 65002
// while 1 do
64813: LD_INT 1
64815: IFFALSE 65002
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64817: LD_ADDR_VAR 0 9
64821: PUSH
64822: LD_VAR 0 1
64826: PPUSH
64827: LD_INT 1
64829: PPUSH
64830: CALL_OW 287
64834: PUSH
64835: LD_INT 10
64837: MUL
64838: ST_TO_ADDR
// r := rate / 10 ;
64839: LD_ADDR_VAR 0 7
64843: PUSH
64844: LD_VAR 0 2
64848: PUSH
64849: LD_INT 10
64851: DIVREAL
64852: ST_TO_ADDR
// time := 1 1$00 ;
64853: LD_ADDR_VAR 0 8
64857: PUSH
64858: LD_INT 2100
64860: ST_TO_ADDR
// if amount < min then
64861: LD_VAR 0 9
64865: PUSH
64866: LD_VAR 0 3
64870: LESS
64871: IFFALSE 64889
// r := r * 2 else
64873: LD_ADDR_VAR 0 7
64877: PUSH
64878: LD_VAR 0 7
64882: PUSH
64883: LD_INT 2
64885: MUL
64886: ST_TO_ADDR
64887: GO 64915
// if amount > max then
64889: LD_VAR 0 9
64893: PUSH
64894: LD_VAR 0 4
64898: GREATER
64899: IFFALSE 64915
// r := r / 2 ;
64901: LD_ADDR_VAR 0 7
64905: PUSH
64906: LD_VAR 0 7
64910: PUSH
64911: LD_INT 2
64913: DIVREAL
64914: ST_TO_ADDR
// time := time / r ;
64915: LD_ADDR_VAR 0 8
64919: PUSH
64920: LD_VAR 0 8
64924: PUSH
64925: LD_VAR 0 7
64929: DIVREAL
64930: ST_TO_ADDR
// if time < 0 then
64931: LD_VAR 0 8
64935: PUSH
64936: LD_INT 0
64938: LESS
64939: IFFALSE 64956
// time := time * - 1 ;
64941: LD_ADDR_VAR 0 8
64945: PUSH
64946: LD_VAR 0 8
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: MUL
64955: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64956: LD_VAR 0 8
64960: PUSH
64961: LD_INT 35
64963: PPUSH
64964: LD_INT 875
64966: PPUSH
64967: CALL_OW 12
64971: PLUS
64972: PPUSH
64973: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64977: LD_INT 1
64979: PPUSH
64980: LD_INT 5
64982: PPUSH
64983: CALL_OW 12
64987: PPUSH
64988: LD_VAR 0 1
64992: PPUSH
64993: LD_INT 1
64995: PPUSH
64996: CALL_OW 55
// end ;
65000: GO 64813
// end ;
65002: LD_VAR 0 5
65006: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65007: LD_INT 0
65009: PPUSH
65010: PPUSH
65011: PPUSH
65012: PPUSH
65013: PPUSH
65014: PPUSH
65015: PPUSH
65016: PPUSH
// if not turrets or not factories then
65017: LD_VAR 0 1
65021: NOT
65022: PUSH
65023: LD_VAR 0 2
65027: NOT
65028: OR
65029: IFFALSE 65033
// exit ;
65031: GO 65340
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65033: LD_ADDR_VAR 0 10
65037: PUSH
65038: LD_INT 5
65040: PUSH
65041: LD_INT 6
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: LD_INT 4
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: LD_INT 5
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 24
65075: PUSH
65076: LD_INT 25
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 23
65085: PUSH
65086: LD_INT 27
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 42
65099: PUSH
65100: LD_INT 43
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 44
65109: PUSH
65110: LD_INT 46
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 45
65119: PUSH
65120: LD_INT 47
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: ST_TO_ADDR
// result := [ ] ;
65137: LD_ADDR_VAR 0 3
65141: PUSH
65142: EMPTY
65143: ST_TO_ADDR
// for i in turrets do
65144: LD_ADDR_VAR 0 4
65148: PUSH
65149: LD_VAR 0 1
65153: PUSH
65154: FOR_IN
65155: IFFALSE 65338
// begin nat := GetNation ( i ) ;
65157: LD_ADDR_VAR 0 7
65161: PUSH
65162: LD_VAR 0 4
65166: PPUSH
65167: CALL_OW 248
65171: ST_TO_ADDR
// weapon := 0 ;
65172: LD_ADDR_VAR 0 8
65176: PUSH
65177: LD_INT 0
65179: ST_TO_ADDR
// if not nat then
65180: LD_VAR 0 7
65184: NOT
65185: IFFALSE 65189
// continue ;
65187: GO 65154
// for j in list [ nat ] do
65189: LD_ADDR_VAR 0 5
65193: PUSH
65194: LD_VAR 0 10
65198: PUSH
65199: LD_VAR 0 7
65203: ARRAY
65204: PUSH
65205: FOR_IN
65206: IFFALSE 65247
// if GetBWeapon ( i ) = j [ 1 ] then
65208: LD_VAR 0 4
65212: PPUSH
65213: CALL_OW 269
65217: PUSH
65218: LD_VAR 0 5
65222: PUSH
65223: LD_INT 1
65225: ARRAY
65226: EQUAL
65227: IFFALSE 65245
// begin weapon := j [ 2 ] ;
65229: LD_ADDR_VAR 0 8
65233: PUSH
65234: LD_VAR 0 5
65238: PUSH
65239: LD_INT 2
65241: ARRAY
65242: ST_TO_ADDR
// break ;
65243: GO 65247
// end ;
65245: GO 65205
65247: POP
65248: POP
// if not weapon then
65249: LD_VAR 0 8
65253: NOT
65254: IFFALSE 65258
// continue ;
65256: GO 65154
// for k in factories do
65258: LD_ADDR_VAR 0 6
65262: PUSH
65263: LD_VAR 0 2
65267: PUSH
65268: FOR_IN
65269: IFFALSE 65334
// begin weapons := AvailableWeaponList ( k ) ;
65271: LD_ADDR_VAR 0 9
65275: PUSH
65276: LD_VAR 0 6
65280: PPUSH
65281: CALL_OW 478
65285: ST_TO_ADDR
// if not weapons then
65286: LD_VAR 0 9
65290: NOT
65291: IFFALSE 65295
// continue ;
65293: GO 65268
// if weapon in weapons then
65295: LD_VAR 0 8
65299: PUSH
65300: LD_VAR 0 9
65304: IN
65305: IFFALSE 65332
// begin result := [ i , weapon ] ;
65307: LD_ADDR_VAR 0 3
65311: PUSH
65312: LD_VAR 0 4
65316: PUSH
65317: LD_VAR 0 8
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: ST_TO_ADDR
// exit ;
65326: POP
65327: POP
65328: POP
65329: POP
65330: GO 65340
// end ; end ;
65332: GO 65268
65334: POP
65335: POP
// end ;
65336: GO 65154
65338: POP
65339: POP
// end ;
65340: LD_VAR 0 3
65344: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65345: LD_INT 0
65347: PPUSH
// if not side or side > 8 then
65348: LD_VAR 0 3
65352: NOT
65353: PUSH
65354: LD_VAR 0 3
65358: PUSH
65359: LD_INT 8
65361: GREATER
65362: OR
65363: IFFALSE 65367
// exit ;
65365: GO 65426
// if not range then
65367: LD_VAR 0 4
65371: NOT
65372: IFFALSE 65383
// range := - 12 ;
65374: LD_ADDR_VAR 0 4
65378: PUSH
65379: LD_INT 12
65381: NEG
65382: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65383: LD_VAR 0 1
65387: PPUSH
65388: LD_VAR 0 2
65392: PPUSH
65393: LD_VAR 0 3
65397: PPUSH
65398: LD_VAR 0 4
65402: PPUSH
65403: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65407: LD_VAR 0 1
65411: PPUSH
65412: LD_VAR 0 2
65416: PPUSH
65417: LD_VAR 0 3
65421: PPUSH
65422: CALL_OW 331
// end ;
65426: LD_VAR 0 5
65430: RET
// export function Video ( mode ) ; begin
65431: LD_INT 0
65433: PPUSH
// ingame_video = mode ;
65434: LD_ADDR_OWVAR 52
65438: PUSH
65439: LD_VAR 0 1
65443: ST_TO_ADDR
// interface_hidden = mode ;
65444: LD_ADDR_OWVAR 54
65448: PUSH
65449: LD_VAR 0 1
65453: ST_TO_ADDR
// end ;
65454: LD_VAR 0 2
65458: RET
// export function Join ( array , element ) ; begin
65459: LD_INT 0
65461: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65462: LD_ADDR_VAR 0 3
65466: PUSH
65467: LD_VAR 0 1
65471: PPUSH
65472: LD_VAR 0 1
65476: PUSH
65477: LD_INT 1
65479: PLUS
65480: PPUSH
65481: LD_VAR 0 2
65485: PPUSH
65486: CALL_OW 1
65490: ST_TO_ADDR
// end ;
65491: LD_VAR 0 3
65495: RET
// export function JoinUnion ( array , element ) ; begin
65496: LD_INT 0
65498: PPUSH
// result := array union element ;
65499: LD_ADDR_VAR 0 3
65503: PUSH
65504: LD_VAR 0 1
65508: PUSH
65509: LD_VAR 0 2
65513: UNION
65514: ST_TO_ADDR
// end ;
65515: LD_VAR 0 3
65519: RET
// export function GetBehemoths ( side ) ; begin
65520: LD_INT 0
65522: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65523: LD_ADDR_VAR 0 2
65527: PUSH
65528: LD_INT 22
65530: PUSH
65531: LD_VAR 0 1
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 31
65542: PUSH
65543: LD_INT 25
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PPUSH
65554: CALL_OW 69
65558: ST_TO_ADDR
// end ;
65559: LD_VAR 0 2
65563: RET
// export function Shuffle ( array ) ; var i , index ; begin
65564: LD_INT 0
65566: PPUSH
65567: PPUSH
65568: PPUSH
// result := [ ] ;
65569: LD_ADDR_VAR 0 2
65573: PUSH
65574: EMPTY
65575: ST_TO_ADDR
// if not array then
65576: LD_VAR 0 1
65580: NOT
65581: IFFALSE 65585
// exit ;
65583: GO 65684
// Randomize ;
65585: CALL_OW 10
// for i = array downto 1 do
65589: LD_ADDR_VAR 0 3
65593: PUSH
65594: DOUBLE
65595: LD_VAR 0 1
65599: INC
65600: ST_TO_ADDR
65601: LD_INT 1
65603: PUSH
65604: FOR_DOWNTO
65605: IFFALSE 65682
// begin index := rand ( 1 , array ) ;
65607: LD_ADDR_VAR 0 4
65611: PUSH
65612: LD_INT 1
65614: PPUSH
65615: LD_VAR 0 1
65619: PPUSH
65620: CALL_OW 12
65624: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65625: LD_ADDR_VAR 0 2
65629: PUSH
65630: LD_VAR 0 2
65634: PPUSH
65635: LD_VAR 0 2
65639: PUSH
65640: LD_INT 1
65642: PLUS
65643: PPUSH
65644: LD_VAR 0 1
65648: PUSH
65649: LD_VAR 0 4
65653: ARRAY
65654: PPUSH
65655: CALL_OW 2
65659: ST_TO_ADDR
// array := Delete ( array , index ) ;
65660: LD_ADDR_VAR 0 1
65664: PUSH
65665: LD_VAR 0 1
65669: PPUSH
65670: LD_VAR 0 4
65674: PPUSH
65675: CALL_OW 3
65679: ST_TO_ADDR
// end ;
65680: GO 65604
65682: POP
65683: POP
// end ;
65684: LD_VAR 0 2
65688: RET
// export function GetBaseMaterials ( base ) ; begin
65689: LD_INT 0
65691: PPUSH
// result := [ 0 , 0 , 0 ] ;
65692: LD_ADDR_VAR 0 2
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: LD_INT 0
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: LIST
65710: ST_TO_ADDR
// if not base then
65711: LD_VAR 0 1
65715: NOT
65716: IFFALSE 65720
// exit ;
65718: GO 65769
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65720: LD_ADDR_VAR 0 2
65724: PUSH
65725: LD_VAR 0 1
65729: PPUSH
65730: LD_INT 1
65732: PPUSH
65733: CALL_OW 275
65737: PUSH
65738: LD_VAR 0 1
65742: PPUSH
65743: LD_INT 2
65745: PPUSH
65746: CALL_OW 275
65750: PUSH
65751: LD_VAR 0 1
65755: PPUSH
65756: LD_INT 3
65758: PPUSH
65759: CALL_OW 275
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: ST_TO_ADDR
// end ;
65769: LD_VAR 0 2
65773: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65774: LD_INT 0
65776: PPUSH
65777: PPUSH
// result := array ;
65778: LD_ADDR_VAR 0 3
65782: PUSH
65783: LD_VAR 0 1
65787: ST_TO_ADDR
// if size >= result then
65788: LD_VAR 0 2
65792: PUSH
65793: LD_VAR 0 3
65797: GREATEREQUAL
65798: IFFALSE 65802
// exit ;
65800: GO 65852
// if size then
65802: LD_VAR 0 2
65806: IFFALSE 65852
// for i := array downto size do
65808: LD_ADDR_VAR 0 4
65812: PUSH
65813: DOUBLE
65814: LD_VAR 0 1
65818: INC
65819: ST_TO_ADDR
65820: LD_VAR 0 2
65824: PUSH
65825: FOR_DOWNTO
65826: IFFALSE 65850
// result := Delete ( result , result ) ;
65828: LD_ADDR_VAR 0 3
65832: PUSH
65833: LD_VAR 0 3
65837: PPUSH
65838: LD_VAR 0 3
65842: PPUSH
65843: CALL_OW 3
65847: ST_TO_ADDR
65848: GO 65825
65850: POP
65851: POP
// end ;
65852: LD_VAR 0 3
65856: RET
// export function ComExit ( unit ) ; var tmp ; begin
65857: LD_INT 0
65859: PPUSH
65860: PPUSH
// if not IsInUnit ( unit ) then
65861: LD_VAR 0 1
65865: PPUSH
65866: CALL_OW 310
65870: NOT
65871: IFFALSE 65875
// exit ;
65873: GO 65935
// tmp := IsInUnit ( unit ) ;
65875: LD_ADDR_VAR 0 3
65879: PUSH
65880: LD_VAR 0 1
65884: PPUSH
65885: CALL_OW 310
65889: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65890: LD_VAR 0 3
65894: PPUSH
65895: CALL_OW 247
65899: PUSH
65900: LD_INT 2
65902: EQUAL
65903: IFFALSE 65916
// ComExitVehicle ( unit ) else
65905: LD_VAR 0 1
65909: PPUSH
65910: CALL_OW 121
65914: GO 65925
// ComExitBuilding ( unit ) ;
65916: LD_VAR 0 1
65920: PPUSH
65921: CALL_OW 122
// result := tmp ;
65925: LD_ADDR_VAR 0 2
65929: PUSH
65930: LD_VAR 0 3
65934: ST_TO_ADDR
// end ;
65935: LD_VAR 0 2
65939: RET
// export function ComExitAll ( units ) ; var i ; begin
65940: LD_INT 0
65942: PPUSH
65943: PPUSH
// if not units then
65944: LD_VAR 0 1
65948: NOT
65949: IFFALSE 65953
// exit ;
65951: GO 65979
// for i in units do
65953: LD_ADDR_VAR 0 3
65957: PUSH
65958: LD_VAR 0 1
65962: PUSH
65963: FOR_IN
65964: IFFALSE 65977
// ComExit ( i ) ;
65966: LD_VAR 0 3
65970: PPUSH
65971: CALL 65857 0 1
65975: GO 65963
65977: POP
65978: POP
// end ;
65979: LD_VAR 0 2
65983: RET
// export function ResetHc ; begin
65984: LD_INT 0
65986: PPUSH
// InitHc ;
65987: CALL_OW 19
// hc_importance := 0 ;
65991: LD_ADDR_OWVAR 32
65995: PUSH
65996: LD_INT 0
65998: ST_TO_ADDR
// end ;
65999: LD_VAR 0 1
66003: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66004: LD_INT 0
66006: PPUSH
66007: PPUSH
66008: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66009: LD_ADDR_VAR 0 6
66013: PUSH
66014: LD_VAR 0 1
66018: PUSH
66019: LD_VAR 0 3
66023: PLUS
66024: PUSH
66025: LD_INT 2
66027: DIV
66028: ST_TO_ADDR
// if _x < 0 then
66029: LD_VAR 0 6
66033: PUSH
66034: LD_INT 0
66036: LESS
66037: IFFALSE 66054
// _x := _x * - 1 ;
66039: LD_ADDR_VAR 0 6
66043: PUSH
66044: LD_VAR 0 6
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: MUL
66053: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66054: LD_ADDR_VAR 0 7
66058: PUSH
66059: LD_VAR 0 2
66063: PUSH
66064: LD_VAR 0 4
66068: PLUS
66069: PUSH
66070: LD_INT 2
66072: DIV
66073: ST_TO_ADDR
// if _y < 0 then
66074: LD_VAR 0 7
66078: PUSH
66079: LD_INT 0
66081: LESS
66082: IFFALSE 66099
// _y := _y * - 1 ;
66084: LD_ADDR_VAR 0 7
66088: PUSH
66089: LD_VAR 0 7
66093: PUSH
66094: LD_INT 1
66096: NEG
66097: MUL
66098: ST_TO_ADDR
// result := [ _x , _y ] ;
66099: LD_ADDR_VAR 0 5
66103: PUSH
66104: LD_VAR 0 6
66108: PUSH
66109: LD_VAR 0 7
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: ST_TO_ADDR
// end ;
66118: LD_VAR 0 5
66122: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66123: LD_INT 0
66125: PPUSH
66126: PPUSH
66127: PPUSH
66128: PPUSH
// task := GetTaskList ( unit ) ;
66129: LD_ADDR_VAR 0 7
66133: PUSH
66134: LD_VAR 0 1
66138: PPUSH
66139: CALL_OW 437
66143: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66144: LD_VAR 0 7
66148: NOT
66149: PUSH
66150: LD_VAR 0 1
66154: PPUSH
66155: LD_VAR 0 2
66159: PPUSH
66160: CALL_OW 308
66164: NOT
66165: AND
66166: IFFALSE 66170
// exit ;
66168: GO 66288
// if IsInArea ( unit , area ) then
66170: LD_VAR 0 1
66174: PPUSH
66175: LD_VAR 0 2
66179: PPUSH
66180: CALL_OW 308
66184: IFFALSE 66202
// begin ComMoveToArea ( unit , goAway ) ;
66186: LD_VAR 0 1
66190: PPUSH
66191: LD_VAR 0 3
66195: PPUSH
66196: CALL_OW 113
// exit ;
66200: GO 66288
// end ; if task [ 1 ] [ 1 ] <> M then
66202: LD_VAR 0 7
66206: PUSH
66207: LD_INT 1
66209: ARRAY
66210: PUSH
66211: LD_INT 1
66213: ARRAY
66214: PUSH
66215: LD_STRING M
66217: NONEQUAL
66218: IFFALSE 66222
// exit ;
66220: GO 66288
// x := task [ 1 ] [ 2 ] ;
66222: LD_ADDR_VAR 0 5
66226: PUSH
66227: LD_VAR 0 7
66231: PUSH
66232: LD_INT 1
66234: ARRAY
66235: PUSH
66236: LD_INT 2
66238: ARRAY
66239: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66240: LD_ADDR_VAR 0 6
66244: PUSH
66245: LD_VAR 0 7
66249: PUSH
66250: LD_INT 1
66252: ARRAY
66253: PUSH
66254: LD_INT 3
66256: ARRAY
66257: ST_TO_ADDR
// if InArea ( x , y , area ) then
66258: LD_VAR 0 5
66262: PPUSH
66263: LD_VAR 0 6
66267: PPUSH
66268: LD_VAR 0 2
66272: PPUSH
66273: CALL_OW 309
66277: IFFALSE 66288
// ComStop ( unit ) ;
66279: LD_VAR 0 1
66283: PPUSH
66284: CALL_OW 141
// end ;
66288: LD_VAR 0 4
66292: RET
// export function Abs ( value ) ; begin
66293: LD_INT 0
66295: PPUSH
// result := value ;
66296: LD_ADDR_VAR 0 2
66300: PUSH
66301: LD_VAR 0 1
66305: ST_TO_ADDR
// if value < 0 then
66306: LD_VAR 0 1
66310: PUSH
66311: LD_INT 0
66313: LESS
66314: IFFALSE 66331
// result := value * - 1 ;
66316: LD_ADDR_VAR 0 2
66320: PUSH
66321: LD_VAR 0 1
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: MUL
66330: ST_TO_ADDR
// end ;
66331: LD_VAR 0 2
66335: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66336: LD_INT 0
66338: PPUSH
66339: PPUSH
66340: PPUSH
66341: PPUSH
66342: PPUSH
66343: PPUSH
66344: PPUSH
66345: PPUSH
// if not unit or not building then
66346: LD_VAR 0 1
66350: NOT
66351: PUSH
66352: LD_VAR 0 2
66356: NOT
66357: OR
66358: IFFALSE 66362
// exit ;
66360: GO 66588
// x := GetX ( building ) ;
66362: LD_ADDR_VAR 0 4
66366: PUSH
66367: LD_VAR 0 2
66371: PPUSH
66372: CALL_OW 250
66376: ST_TO_ADDR
// y := GetY ( building ) ;
66377: LD_ADDR_VAR 0 6
66381: PUSH
66382: LD_VAR 0 2
66386: PPUSH
66387: CALL_OW 251
66391: ST_TO_ADDR
// d := GetDir ( building ) ;
66392: LD_ADDR_VAR 0 8
66396: PUSH
66397: LD_VAR 0 2
66401: PPUSH
66402: CALL_OW 254
66406: ST_TO_ADDR
// r := 4 ;
66407: LD_ADDR_VAR 0 9
66411: PUSH
66412: LD_INT 4
66414: ST_TO_ADDR
// for i := 1 to 5 do
66415: LD_ADDR_VAR 0 10
66419: PUSH
66420: DOUBLE
66421: LD_INT 1
66423: DEC
66424: ST_TO_ADDR
66425: LD_INT 5
66427: PUSH
66428: FOR_TO
66429: IFFALSE 66586
// begin _x := ShiftX ( x , d , r + i ) ;
66431: LD_ADDR_VAR 0 5
66435: PUSH
66436: LD_VAR 0 4
66440: PPUSH
66441: LD_VAR 0 8
66445: PPUSH
66446: LD_VAR 0 9
66450: PUSH
66451: LD_VAR 0 10
66455: PLUS
66456: PPUSH
66457: CALL_OW 272
66461: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66462: LD_ADDR_VAR 0 7
66466: PUSH
66467: LD_VAR 0 6
66471: PPUSH
66472: LD_VAR 0 8
66476: PPUSH
66477: LD_VAR 0 9
66481: PUSH
66482: LD_VAR 0 10
66486: PLUS
66487: PPUSH
66488: CALL_OW 273
66492: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66493: LD_VAR 0 5
66497: PPUSH
66498: LD_VAR 0 7
66502: PPUSH
66503: CALL_OW 488
66507: PUSH
66508: LD_VAR 0 5
66512: PPUSH
66513: LD_VAR 0 7
66517: PPUSH
66518: CALL_OW 428
66522: PPUSH
66523: CALL_OW 247
66527: PUSH
66528: LD_INT 3
66530: PUSH
66531: LD_INT 2
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: IN
66538: NOT
66539: AND
66540: IFFALSE 66584
// begin ComMoveXY ( unit , _x , _y ) ;
66542: LD_VAR 0 1
66546: PPUSH
66547: LD_VAR 0 5
66551: PPUSH
66552: LD_VAR 0 7
66556: PPUSH
66557: CALL_OW 111
// result := [ _x , _y ] ;
66561: LD_ADDR_VAR 0 3
66565: PUSH
66566: LD_VAR 0 5
66570: PUSH
66571: LD_VAR 0 7
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: ST_TO_ADDR
// exit ;
66580: POP
66581: POP
66582: GO 66588
// end ; end ;
66584: GO 66428
66586: POP
66587: POP
// end ;
66588: LD_VAR 0 3
66592: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66593: LD_INT 0
66595: PPUSH
66596: PPUSH
66597: PPUSH
// result := 0 ;
66598: LD_ADDR_VAR 0 3
66602: PUSH
66603: LD_INT 0
66605: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66606: LD_VAR 0 1
66610: PUSH
66611: LD_INT 0
66613: LESS
66614: PUSH
66615: LD_VAR 0 1
66619: PUSH
66620: LD_INT 8
66622: GREATER
66623: OR
66624: PUSH
66625: LD_VAR 0 2
66629: PUSH
66630: LD_INT 0
66632: LESS
66633: OR
66634: PUSH
66635: LD_VAR 0 2
66639: PUSH
66640: LD_INT 8
66642: GREATER
66643: OR
66644: IFFALSE 66648
// exit ;
66646: GO 66723
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66648: LD_ADDR_VAR 0 4
66652: PUSH
66653: LD_INT 22
66655: PUSH
66656: LD_VAR 0 2
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PPUSH
66665: CALL_OW 69
66669: PUSH
66670: FOR_IN
66671: IFFALSE 66721
// begin un := UnitShoot ( i ) ;
66673: LD_ADDR_VAR 0 5
66677: PUSH
66678: LD_VAR 0 4
66682: PPUSH
66683: CALL_OW 504
66687: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66688: LD_VAR 0 5
66692: PPUSH
66693: CALL_OW 255
66697: PUSH
66698: LD_VAR 0 1
66702: EQUAL
66703: IFFALSE 66719
// begin result := un ;
66705: LD_ADDR_VAR 0 3
66709: PUSH
66710: LD_VAR 0 5
66714: ST_TO_ADDR
// exit ;
66715: POP
66716: POP
66717: GO 66723
// end ; end ;
66719: GO 66670
66721: POP
66722: POP
// end ;
66723: LD_VAR 0 3
66727: RET
// export function GetCargoBay ( units ) ; begin
66728: LD_INT 0
66730: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66731: LD_ADDR_VAR 0 2
66735: PUSH
66736: LD_VAR 0 1
66740: PPUSH
66741: LD_INT 2
66743: PUSH
66744: LD_INT 34
66746: PUSH
66747: LD_INT 12
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 34
66756: PUSH
66757: LD_INT 51
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 34
66766: PUSH
66767: LD_INT 32
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 34
66776: PUSH
66777: LD_INT 89
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: PPUSH
66791: CALL_OW 72
66795: ST_TO_ADDR
// end ;
66796: LD_VAR 0 2
66800: RET
// export function Negate ( value ) ; begin
66801: LD_INT 0
66803: PPUSH
// result := not value ;
66804: LD_ADDR_VAR 0 2
66808: PUSH
66809: LD_VAR 0 1
66813: NOT
66814: ST_TO_ADDR
// end ;
66815: LD_VAR 0 2
66819: RET
// export function Inc ( value ) ; begin
66820: LD_INT 0
66822: PPUSH
// result := value + 1 ;
66823: LD_ADDR_VAR 0 2
66827: PUSH
66828: LD_VAR 0 1
66832: PUSH
66833: LD_INT 1
66835: PLUS
66836: ST_TO_ADDR
// end ;
66837: LD_VAR 0 2
66841: RET
// export function Dec ( value ) ; begin
66842: LD_INT 0
66844: PPUSH
// result := value - 1 ;
66845: LD_ADDR_VAR 0 2
66849: PUSH
66850: LD_VAR 0 1
66854: PUSH
66855: LD_INT 1
66857: MINUS
66858: ST_TO_ADDR
// end ;
66859: LD_VAR 0 2
66863: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66864: LD_INT 0
66866: PPUSH
66867: PPUSH
66868: PPUSH
66869: PPUSH
66870: PPUSH
66871: PPUSH
66872: PPUSH
66873: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66874: LD_VAR 0 1
66878: PPUSH
66879: LD_VAR 0 2
66883: PPUSH
66884: CALL_OW 488
66888: NOT
66889: PUSH
66890: LD_VAR 0 3
66894: PPUSH
66895: LD_VAR 0 4
66899: PPUSH
66900: CALL_OW 488
66904: NOT
66905: OR
66906: IFFALSE 66919
// begin result := - 1 ;
66908: LD_ADDR_VAR 0 5
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: ST_TO_ADDR
// exit ;
66917: GO 67154
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66919: LD_ADDR_VAR 0 12
66923: PUSH
66924: LD_VAR 0 1
66928: PPUSH
66929: LD_VAR 0 2
66933: PPUSH
66934: LD_VAR 0 3
66938: PPUSH
66939: LD_VAR 0 4
66943: PPUSH
66944: CALL 66004 0 4
66948: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66949: LD_ADDR_VAR 0 11
66953: PUSH
66954: LD_VAR 0 1
66958: PPUSH
66959: LD_VAR 0 2
66963: PPUSH
66964: LD_VAR 0 12
66968: PUSH
66969: LD_INT 1
66971: ARRAY
66972: PPUSH
66973: LD_VAR 0 12
66977: PUSH
66978: LD_INT 2
66980: ARRAY
66981: PPUSH
66982: CALL_OW 298
66986: ST_TO_ADDR
// distance := 9999 ;
66987: LD_ADDR_VAR 0 10
66991: PUSH
66992: LD_INT 9999
66994: ST_TO_ADDR
// for i := 0 to 5 do
66995: LD_ADDR_VAR 0 6
66999: PUSH
67000: DOUBLE
67001: LD_INT 0
67003: DEC
67004: ST_TO_ADDR
67005: LD_INT 5
67007: PUSH
67008: FOR_TO
67009: IFFALSE 67152
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67011: LD_ADDR_VAR 0 7
67015: PUSH
67016: LD_VAR 0 1
67020: PPUSH
67021: LD_VAR 0 6
67025: PPUSH
67026: LD_VAR 0 11
67030: PPUSH
67031: CALL_OW 272
67035: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67036: LD_ADDR_VAR 0 8
67040: PUSH
67041: LD_VAR 0 2
67045: PPUSH
67046: LD_VAR 0 6
67050: PPUSH
67051: LD_VAR 0 11
67055: PPUSH
67056: CALL_OW 273
67060: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67061: LD_VAR 0 7
67065: PPUSH
67066: LD_VAR 0 8
67070: PPUSH
67071: CALL_OW 488
67075: NOT
67076: IFFALSE 67080
// continue ;
67078: GO 67008
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67080: LD_ADDR_VAR 0 9
67084: PUSH
67085: LD_VAR 0 12
67089: PUSH
67090: LD_INT 1
67092: ARRAY
67093: PPUSH
67094: LD_VAR 0 12
67098: PUSH
67099: LD_INT 2
67101: ARRAY
67102: PPUSH
67103: LD_VAR 0 7
67107: PPUSH
67108: LD_VAR 0 8
67112: PPUSH
67113: CALL_OW 298
67117: ST_TO_ADDR
// if tmp < distance then
67118: LD_VAR 0 9
67122: PUSH
67123: LD_VAR 0 10
67127: LESS
67128: IFFALSE 67150
// begin result := i ;
67130: LD_ADDR_VAR 0 5
67134: PUSH
67135: LD_VAR 0 6
67139: ST_TO_ADDR
// distance := tmp ;
67140: LD_ADDR_VAR 0 10
67144: PUSH
67145: LD_VAR 0 9
67149: ST_TO_ADDR
// end ; end ;
67150: GO 67008
67152: POP
67153: POP
// end ;
67154: LD_VAR 0 5
67158: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67159: LD_INT 0
67161: PPUSH
67162: PPUSH
// if not driver or not IsInUnit ( driver ) then
67163: LD_VAR 0 1
67167: NOT
67168: PUSH
67169: LD_VAR 0 1
67173: PPUSH
67174: CALL_OW 310
67178: NOT
67179: OR
67180: IFFALSE 67184
// exit ;
67182: GO 67274
// vehicle := IsInUnit ( driver ) ;
67184: LD_ADDR_VAR 0 3
67188: PUSH
67189: LD_VAR 0 1
67193: PPUSH
67194: CALL_OW 310
67198: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67199: LD_VAR 0 1
67203: PPUSH
67204: LD_STRING \
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: PUSH
67234: LD_STRING E
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 0
67242: PUSH
67243: LD_VAR 0 3
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: LD_INT 0
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PPUSH
67270: CALL_OW 446
// end ;
67274: LD_VAR 0 2
67278: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67279: LD_INT 0
67281: PPUSH
67282: PPUSH
// if not driver or not IsInUnit ( driver ) then
67283: LD_VAR 0 1
67287: NOT
67288: PUSH
67289: LD_VAR 0 1
67293: PPUSH
67294: CALL_OW 310
67298: NOT
67299: OR
67300: IFFALSE 67304
// exit ;
67302: GO 67394
// vehicle := IsInUnit ( driver ) ;
67304: LD_ADDR_VAR 0 3
67308: PUSH
67309: LD_VAR 0 1
67313: PPUSH
67314: CALL_OW 310
67318: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67319: LD_VAR 0 1
67323: PPUSH
67324: LD_STRING \
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: LD_INT 0
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: LD_INT 0
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: PUSH
67354: LD_STRING E
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_VAR 0 3
67367: PUSH
67368: LD_INT 0
67370: PUSH
67371: LD_INT 0
67373: PUSH
67374: LD_INT 0
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PPUSH
67390: CALL_OW 447
// end ;
67394: LD_VAR 0 2
67398: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67399: LD_INT 0
67401: PPUSH
67402: PPUSH
67403: PPUSH
// tmp := [ ] ;
67404: LD_ADDR_VAR 0 5
67408: PUSH
67409: EMPTY
67410: ST_TO_ADDR
// for i in units do
67411: LD_ADDR_VAR 0 4
67415: PUSH
67416: LD_VAR 0 1
67420: PUSH
67421: FOR_IN
67422: IFFALSE 67460
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67424: LD_ADDR_VAR 0 5
67428: PUSH
67429: LD_VAR 0 5
67433: PPUSH
67434: LD_VAR 0 5
67438: PUSH
67439: LD_INT 1
67441: PLUS
67442: PPUSH
67443: LD_VAR 0 4
67447: PPUSH
67448: CALL_OW 256
67452: PPUSH
67453: CALL_OW 2
67457: ST_TO_ADDR
67458: GO 67421
67460: POP
67461: POP
// if not tmp then
67462: LD_VAR 0 5
67466: NOT
67467: IFFALSE 67471
// exit ;
67469: GO 67519
// if asc then
67471: LD_VAR 0 2
67475: IFFALSE 67499
// result := SortListByListAsc ( units , tmp ) else
67477: LD_ADDR_VAR 0 3
67481: PUSH
67482: LD_VAR 0 1
67486: PPUSH
67487: LD_VAR 0 5
67491: PPUSH
67492: CALL_OW 76
67496: ST_TO_ADDR
67497: GO 67519
// result := SortListByListDesc ( units , tmp ) ;
67499: LD_ADDR_VAR 0 3
67503: PUSH
67504: LD_VAR 0 1
67508: PPUSH
67509: LD_VAR 0 5
67513: PPUSH
67514: CALL_OW 77
67518: ST_TO_ADDR
// end ;
67519: LD_VAR 0 3
67523: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67524: LD_INT 0
67526: PPUSH
67527: PPUSH
// task := GetTaskList ( mech ) ;
67528: LD_ADDR_VAR 0 4
67532: PUSH
67533: LD_VAR 0 1
67537: PPUSH
67538: CALL_OW 437
67542: ST_TO_ADDR
// if not task then
67543: LD_VAR 0 4
67547: NOT
67548: IFFALSE 67552
// exit ;
67550: GO 67594
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67552: LD_ADDR_VAR 0 3
67556: PUSH
67557: LD_VAR 0 4
67561: PUSH
67562: LD_INT 1
67564: ARRAY
67565: PUSH
67566: LD_INT 1
67568: ARRAY
67569: PUSH
67570: LD_STRING r
67572: EQUAL
67573: PUSH
67574: LD_VAR 0 4
67578: PUSH
67579: LD_INT 1
67581: ARRAY
67582: PUSH
67583: LD_INT 4
67585: ARRAY
67586: PUSH
67587: LD_VAR 0 2
67591: EQUAL
67592: AND
67593: ST_TO_ADDR
// end ;
67594: LD_VAR 0 3
67598: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67599: LD_INT 0
67601: PPUSH
// SetDir ( unit , d ) ;
67602: LD_VAR 0 1
67606: PPUSH
67607: LD_VAR 0 4
67611: PPUSH
67612: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67616: LD_VAR 0 1
67620: PPUSH
67621: LD_VAR 0 2
67625: PPUSH
67626: LD_VAR 0 3
67630: PPUSH
67631: LD_VAR 0 5
67635: PPUSH
67636: CALL_OW 48
// end ;
67640: LD_VAR 0 6
67644: RET
// export function ToNaturalNumber ( number ) ; begin
67645: LD_INT 0
67647: PPUSH
// result := number div 1 ;
67648: LD_ADDR_VAR 0 2
67652: PUSH
67653: LD_VAR 0 1
67657: PUSH
67658: LD_INT 1
67660: DIV
67661: ST_TO_ADDR
// if number < 0 then
67662: LD_VAR 0 1
67666: PUSH
67667: LD_INT 0
67669: LESS
67670: IFFALSE 67680
// result := 0 ;
67672: LD_ADDR_VAR 0 2
67676: PUSH
67677: LD_INT 0
67679: ST_TO_ADDR
// end ;
67680: LD_VAR 0 2
67684: RET
// export function SortByClass ( units , class ) ; var un ; begin
67685: LD_INT 0
67687: PPUSH
67688: PPUSH
// if not units or not class then
67689: LD_VAR 0 1
67693: NOT
67694: PUSH
67695: LD_VAR 0 2
67699: NOT
67700: OR
67701: IFFALSE 67705
// exit ;
67703: GO 67800
// result := [ ] ;
67705: LD_ADDR_VAR 0 3
67709: PUSH
67710: EMPTY
67711: ST_TO_ADDR
// for un in units do
67712: LD_ADDR_VAR 0 4
67716: PUSH
67717: LD_VAR 0 1
67721: PUSH
67722: FOR_IN
67723: IFFALSE 67798
// if GetClass ( un ) = class then
67725: LD_VAR 0 4
67729: PPUSH
67730: CALL_OW 257
67734: PUSH
67735: LD_VAR 0 2
67739: EQUAL
67740: IFFALSE 67767
// result := Insert ( result , 1 , un ) else
67742: LD_ADDR_VAR 0 3
67746: PUSH
67747: LD_VAR 0 3
67751: PPUSH
67752: LD_INT 1
67754: PPUSH
67755: LD_VAR 0 4
67759: PPUSH
67760: CALL_OW 2
67764: ST_TO_ADDR
67765: GO 67796
// result := Replace ( result , result + 1 , un ) ;
67767: LD_ADDR_VAR 0 3
67771: PUSH
67772: LD_VAR 0 3
67776: PPUSH
67777: LD_VAR 0 3
67781: PUSH
67782: LD_INT 1
67784: PLUS
67785: PPUSH
67786: LD_VAR 0 4
67790: PPUSH
67791: CALL_OW 1
67795: ST_TO_ADDR
67796: GO 67722
67798: POP
67799: POP
// end ;
67800: LD_VAR 0 3
67804: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67805: LD_INT 0
67807: PPUSH
67808: PPUSH
67809: PPUSH
67810: PPUSH
67811: PPUSH
67812: PPUSH
67813: PPUSH
// result := [ ] ;
67814: LD_ADDR_VAR 0 4
67818: PUSH
67819: EMPTY
67820: ST_TO_ADDR
// if x - r < 0 then
67821: LD_VAR 0 1
67825: PUSH
67826: LD_VAR 0 3
67830: MINUS
67831: PUSH
67832: LD_INT 0
67834: LESS
67835: IFFALSE 67847
// min_x := 0 else
67837: LD_ADDR_VAR 0 8
67841: PUSH
67842: LD_INT 0
67844: ST_TO_ADDR
67845: GO 67863
// min_x := x - r ;
67847: LD_ADDR_VAR 0 8
67851: PUSH
67852: LD_VAR 0 1
67856: PUSH
67857: LD_VAR 0 3
67861: MINUS
67862: ST_TO_ADDR
// if y - r < 0 then
67863: LD_VAR 0 2
67867: PUSH
67868: LD_VAR 0 3
67872: MINUS
67873: PUSH
67874: LD_INT 0
67876: LESS
67877: IFFALSE 67889
// min_y := 0 else
67879: LD_ADDR_VAR 0 7
67883: PUSH
67884: LD_INT 0
67886: ST_TO_ADDR
67887: GO 67905
// min_y := y - r ;
67889: LD_ADDR_VAR 0 7
67893: PUSH
67894: LD_VAR 0 2
67898: PUSH
67899: LD_VAR 0 3
67903: MINUS
67904: ST_TO_ADDR
// max_x := x + r ;
67905: LD_ADDR_VAR 0 9
67909: PUSH
67910: LD_VAR 0 1
67914: PUSH
67915: LD_VAR 0 3
67919: PLUS
67920: ST_TO_ADDR
// max_y := y + r ;
67921: LD_ADDR_VAR 0 10
67925: PUSH
67926: LD_VAR 0 2
67930: PUSH
67931: LD_VAR 0 3
67935: PLUS
67936: ST_TO_ADDR
// for _x = min_x to max_x do
67937: LD_ADDR_VAR 0 5
67941: PUSH
67942: DOUBLE
67943: LD_VAR 0 8
67947: DEC
67948: ST_TO_ADDR
67949: LD_VAR 0 9
67953: PUSH
67954: FOR_TO
67955: IFFALSE 68056
// for _y = min_y to max_y do
67957: LD_ADDR_VAR 0 6
67961: PUSH
67962: DOUBLE
67963: LD_VAR 0 7
67967: DEC
67968: ST_TO_ADDR
67969: LD_VAR 0 10
67973: PUSH
67974: FOR_TO
67975: IFFALSE 68052
// begin if not ValidHex ( _x , _y ) then
67977: LD_VAR 0 5
67981: PPUSH
67982: LD_VAR 0 6
67986: PPUSH
67987: CALL_OW 488
67991: NOT
67992: IFFALSE 67996
// continue ;
67994: GO 67974
// if GetResourceTypeXY ( _x , _y ) then
67996: LD_VAR 0 5
68000: PPUSH
68001: LD_VAR 0 6
68005: PPUSH
68006: CALL_OW 283
68010: IFFALSE 68050
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68012: LD_ADDR_VAR 0 4
68016: PUSH
68017: LD_VAR 0 4
68021: PPUSH
68022: LD_VAR 0 4
68026: PUSH
68027: LD_INT 1
68029: PLUS
68030: PPUSH
68031: LD_VAR 0 5
68035: PUSH
68036: LD_VAR 0 6
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PPUSH
68045: CALL_OW 1
68049: ST_TO_ADDR
// end ;
68050: GO 67974
68052: POP
68053: POP
68054: GO 67954
68056: POP
68057: POP
// end ;
68058: LD_VAR 0 4
68062: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68063: LD_INT 0
68065: PPUSH
68066: PPUSH
68067: PPUSH
68068: PPUSH
68069: PPUSH
68070: PPUSH
68071: PPUSH
68072: PPUSH
// if not units then
68073: LD_VAR 0 1
68077: NOT
68078: IFFALSE 68082
// exit ;
68080: GO 68606
// result := UnitFilter ( units , [ f_ok ] ) ;
68082: LD_ADDR_VAR 0 3
68086: PUSH
68087: LD_VAR 0 1
68091: PPUSH
68092: LD_INT 50
68094: PUSH
68095: EMPTY
68096: LIST
68097: PPUSH
68098: CALL_OW 72
68102: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68103: LD_ADDR_VAR 0 8
68107: PUSH
68108: LD_VAR 0 1
68112: PUSH
68113: LD_INT 1
68115: ARRAY
68116: PPUSH
68117: CALL_OW 255
68121: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68122: LD_ADDR_VAR 0 10
68126: PUSH
68127: LD_INT 29
68129: PUSH
68130: LD_INT 91
68132: PUSH
68133: LD_INT 49
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// if not result then
68141: LD_VAR 0 3
68145: NOT
68146: IFFALSE 68150
// exit ;
68148: GO 68606
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68150: LD_ADDR_VAR 0 5
68154: PUSH
68155: LD_INT 81
68157: PUSH
68158: LD_VAR 0 8
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PPUSH
68167: CALL_OW 69
68171: ST_TO_ADDR
// for i in result do
68172: LD_ADDR_VAR 0 4
68176: PUSH
68177: LD_VAR 0 3
68181: PUSH
68182: FOR_IN
68183: IFFALSE 68604
// begin tag := GetTag ( i ) + 1 ;
68185: LD_ADDR_VAR 0 9
68189: PUSH
68190: LD_VAR 0 4
68194: PPUSH
68195: CALL_OW 110
68199: PUSH
68200: LD_INT 1
68202: PLUS
68203: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68204: LD_ADDR_VAR 0 7
68208: PUSH
68209: LD_VAR 0 4
68213: PPUSH
68214: CALL_OW 250
68218: PPUSH
68219: LD_VAR 0 4
68223: PPUSH
68224: CALL_OW 251
68228: PPUSH
68229: LD_INT 6
68231: PPUSH
68232: CALL 67805 0 3
68236: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68237: LD_VAR 0 4
68241: PPUSH
68242: CALL_OW 247
68246: PUSH
68247: LD_INT 2
68249: EQUAL
68250: PUSH
68251: LD_VAR 0 7
68255: AND
68256: PUSH
68257: LD_VAR 0 4
68261: PPUSH
68262: CALL_OW 264
68266: PUSH
68267: LD_VAR 0 10
68271: IN
68272: NOT
68273: AND
68274: IFFALSE 68313
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68276: LD_VAR 0 4
68280: PPUSH
68281: LD_VAR 0 7
68285: PUSH
68286: LD_INT 1
68288: ARRAY
68289: PUSH
68290: LD_INT 1
68292: ARRAY
68293: PPUSH
68294: LD_VAR 0 7
68298: PUSH
68299: LD_INT 1
68301: ARRAY
68302: PUSH
68303: LD_INT 2
68305: ARRAY
68306: PPUSH
68307: CALL_OW 116
68311: GO 68602
// if path > tag then
68313: LD_VAR 0 2
68317: PUSH
68318: LD_VAR 0 9
68322: GREATER
68323: IFFALSE 68531
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68325: LD_ADDR_VAR 0 6
68329: PUSH
68330: LD_VAR 0 5
68334: PPUSH
68335: LD_INT 91
68337: PUSH
68338: LD_VAR 0 4
68342: PUSH
68343: LD_INT 8
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: PPUSH
68351: CALL_OW 72
68355: ST_TO_ADDR
// if nearEnemy then
68356: LD_VAR 0 6
68360: IFFALSE 68429
// begin if GetWeapon ( i ) = ru_time_lapser then
68362: LD_VAR 0 4
68366: PPUSH
68367: CALL_OW 264
68371: PUSH
68372: LD_INT 49
68374: EQUAL
68375: IFFALSE 68403
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68377: LD_VAR 0 4
68381: PPUSH
68382: LD_VAR 0 6
68386: PPUSH
68387: LD_VAR 0 4
68391: PPUSH
68392: CALL_OW 74
68396: PPUSH
68397: CALL_OW 112
68401: GO 68427
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68403: LD_VAR 0 4
68407: PPUSH
68408: LD_VAR 0 6
68412: PPUSH
68413: LD_VAR 0 4
68417: PPUSH
68418: CALL_OW 74
68422: PPUSH
68423: CALL 69531 0 2
// end else
68427: GO 68529
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68429: LD_VAR 0 4
68433: PPUSH
68434: LD_VAR 0 2
68438: PUSH
68439: LD_VAR 0 9
68443: ARRAY
68444: PUSH
68445: LD_INT 1
68447: ARRAY
68448: PPUSH
68449: LD_VAR 0 2
68453: PUSH
68454: LD_VAR 0 9
68458: ARRAY
68459: PUSH
68460: LD_INT 2
68462: ARRAY
68463: PPUSH
68464: CALL_OW 297
68468: PUSH
68469: LD_INT 6
68471: GREATER
68472: IFFALSE 68515
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68474: LD_VAR 0 4
68478: PPUSH
68479: LD_VAR 0 2
68483: PUSH
68484: LD_VAR 0 9
68488: ARRAY
68489: PUSH
68490: LD_INT 1
68492: ARRAY
68493: PPUSH
68494: LD_VAR 0 2
68498: PUSH
68499: LD_VAR 0 9
68503: ARRAY
68504: PUSH
68505: LD_INT 2
68507: ARRAY
68508: PPUSH
68509: CALL_OW 114
68513: GO 68529
// SetTag ( i , tag ) ;
68515: LD_VAR 0 4
68519: PPUSH
68520: LD_VAR 0 9
68524: PPUSH
68525: CALL_OW 109
// end else
68529: GO 68602
// if enemy then
68531: LD_VAR 0 5
68535: IFFALSE 68602
// begin if GetWeapon ( i ) = ru_time_lapser then
68537: LD_VAR 0 4
68541: PPUSH
68542: CALL_OW 264
68546: PUSH
68547: LD_INT 49
68549: EQUAL
68550: IFFALSE 68578
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68552: LD_VAR 0 4
68556: PPUSH
68557: LD_VAR 0 5
68561: PPUSH
68562: LD_VAR 0 4
68566: PPUSH
68567: CALL_OW 74
68571: PPUSH
68572: CALL_OW 112
68576: GO 68602
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68578: LD_VAR 0 4
68582: PPUSH
68583: LD_VAR 0 5
68587: PPUSH
68588: LD_VAR 0 4
68592: PPUSH
68593: CALL_OW 74
68597: PPUSH
68598: CALL 69531 0 2
// end ; end ;
68602: GO 68182
68604: POP
68605: POP
// end ;
68606: LD_VAR 0 3
68610: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68611: LD_INT 0
68613: PPUSH
68614: PPUSH
68615: PPUSH
// if not unit or IsInUnit ( unit ) then
68616: LD_VAR 0 1
68620: NOT
68621: PUSH
68622: LD_VAR 0 1
68626: PPUSH
68627: CALL_OW 310
68631: OR
68632: IFFALSE 68636
// exit ;
68634: GO 68727
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68636: LD_ADDR_VAR 0 4
68640: PUSH
68641: LD_VAR 0 1
68645: PPUSH
68646: CALL_OW 250
68650: PPUSH
68651: LD_VAR 0 2
68655: PPUSH
68656: LD_INT 1
68658: PPUSH
68659: CALL_OW 272
68663: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68664: LD_ADDR_VAR 0 5
68668: PUSH
68669: LD_VAR 0 1
68673: PPUSH
68674: CALL_OW 251
68678: PPUSH
68679: LD_VAR 0 2
68683: PPUSH
68684: LD_INT 1
68686: PPUSH
68687: CALL_OW 273
68691: ST_TO_ADDR
// if ValidHex ( x , y ) then
68692: LD_VAR 0 4
68696: PPUSH
68697: LD_VAR 0 5
68701: PPUSH
68702: CALL_OW 488
68706: IFFALSE 68727
// ComTurnXY ( unit , x , y ) ;
68708: LD_VAR 0 1
68712: PPUSH
68713: LD_VAR 0 4
68717: PPUSH
68718: LD_VAR 0 5
68722: PPUSH
68723: CALL_OW 118
// end ;
68727: LD_VAR 0 3
68731: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68732: LD_INT 0
68734: PPUSH
68735: PPUSH
// result := false ;
68736: LD_ADDR_VAR 0 3
68740: PUSH
68741: LD_INT 0
68743: ST_TO_ADDR
// if not units then
68744: LD_VAR 0 2
68748: NOT
68749: IFFALSE 68753
// exit ;
68751: GO 68798
// for i in units do
68753: LD_ADDR_VAR 0 4
68757: PUSH
68758: LD_VAR 0 2
68762: PUSH
68763: FOR_IN
68764: IFFALSE 68796
// if See ( side , i ) then
68766: LD_VAR 0 1
68770: PPUSH
68771: LD_VAR 0 4
68775: PPUSH
68776: CALL_OW 292
68780: IFFALSE 68794
// begin result := true ;
68782: LD_ADDR_VAR 0 3
68786: PUSH
68787: LD_INT 1
68789: ST_TO_ADDR
// exit ;
68790: POP
68791: POP
68792: GO 68798
// end ;
68794: GO 68763
68796: POP
68797: POP
// end ;
68798: LD_VAR 0 3
68802: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68803: LD_INT 0
68805: PPUSH
68806: PPUSH
68807: PPUSH
68808: PPUSH
// if not unit or not points then
68809: LD_VAR 0 1
68813: NOT
68814: PUSH
68815: LD_VAR 0 2
68819: NOT
68820: OR
68821: IFFALSE 68825
// exit ;
68823: GO 68915
// dist := 99999 ;
68825: LD_ADDR_VAR 0 5
68829: PUSH
68830: LD_INT 99999
68832: ST_TO_ADDR
// for i in points do
68833: LD_ADDR_VAR 0 4
68837: PUSH
68838: LD_VAR 0 2
68842: PUSH
68843: FOR_IN
68844: IFFALSE 68913
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68846: LD_ADDR_VAR 0 6
68850: PUSH
68851: LD_VAR 0 1
68855: PPUSH
68856: LD_VAR 0 4
68860: PUSH
68861: LD_INT 1
68863: ARRAY
68864: PPUSH
68865: LD_VAR 0 4
68869: PUSH
68870: LD_INT 2
68872: ARRAY
68873: PPUSH
68874: CALL_OW 297
68878: ST_TO_ADDR
// if tmpDist < dist then
68879: LD_VAR 0 6
68883: PUSH
68884: LD_VAR 0 5
68888: LESS
68889: IFFALSE 68911
// begin result := i ;
68891: LD_ADDR_VAR 0 3
68895: PUSH
68896: LD_VAR 0 4
68900: ST_TO_ADDR
// dist := tmpDist ;
68901: LD_ADDR_VAR 0 5
68905: PUSH
68906: LD_VAR 0 6
68910: ST_TO_ADDR
// end ; end ;
68911: GO 68843
68913: POP
68914: POP
// end ;
68915: LD_VAR 0 3
68919: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68920: LD_INT 0
68922: PPUSH
// uc_side := side ;
68923: LD_ADDR_OWVAR 20
68927: PUSH
68928: LD_VAR 0 1
68932: ST_TO_ADDR
// uc_nation := 3 ;
68933: LD_ADDR_OWVAR 21
68937: PUSH
68938: LD_INT 3
68940: ST_TO_ADDR
// vc_chassis := 25 ;
68941: LD_ADDR_OWVAR 37
68945: PUSH
68946: LD_INT 25
68948: ST_TO_ADDR
// vc_engine := engine_siberite ;
68949: LD_ADDR_OWVAR 39
68953: PUSH
68954: LD_INT 3
68956: ST_TO_ADDR
// vc_control := control_computer ;
68957: LD_ADDR_OWVAR 38
68961: PUSH
68962: LD_INT 3
68964: ST_TO_ADDR
// vc_weapon := 59 ;
68965: LD_ADDR_OWVAR 40
68969: PUSH
68970: LD_INT 59
68972: ST_TO_ADDR
// result := CreateVehicle ;
68973: LD_ADDR_VAR 0 5
68977: PUSH
68978: CALL_OW 45
68982: ST_TO_ADDR
// SetDir ( result , d ) ;
68983: LD_VAR 0 5
68987: PPUSH
68988: LD_VAR 0 4
68992: PPUSH
68993: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68997: LD_VAR 0 5
69001: PPUSH
69002: LD_VAR 0 2
69006: PPUSH
69007: LD_VAR 0 3
69011: PPUSH
69012: LD_INT 0
69014: PPUSH
69015: CALL_OW 48
// end ;
69019: LD_VAR 0 5
69023: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69024: LD_INT 0
69026: PPUSH
69027: PPUSH
69028: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69029: LD_ADDR_VAR 0 2
69033: PUSH
69034: LD_INT 0
69036: PUSH
69037: LD_INT 0
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69052: LD_VAR 0 1
69056: NOT
69057: PUSH
69058: LD_VAR 0 1
69062: PPUSH
69063: CALL_OW 264
69067: PUSH
69068: LD_INT 12
69070: PUSH
69071: LD_INT 51
69073: PUSH
69074: LD_INT 32
69076: PUSH
69077: LD_INT 89
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: IN
69086: NOT
69087: OR
69088: IFFALSE 69092
// exit ;
69090: GO 69190
// for i := 1 to 3 do
69092: LD_ADDR_VAR 0 3
69096: PUSH
69097: DOUBLE
69098: LD_INT 1
69100: DEC
69101: ST_TO_ADDR
69102: LD_INT 3
69104: PUSH
69105: FOR_TO
69106: IFFALSE 69188
// begin tmp := GetCargo ( cargo , i ) ;
69108: LD_ADDR_VAR 0 4
69112: PUSH
69113: LD_VAR 0 1
69117: PPUSH
69118: LD_VAR 0 3
69122: PPUSH
69123: CALL_OW 289
69127: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69128: LD_ADDR_VAR 0 2
69132: PUSH
69133: LD_VAR 0 2
69137: PPUSH
69138: LD_VAR 0 3
69142: PPUSH
69143: LD_VAR 0 4
69147: PPUSH
69148: CALL_OW 1
69152: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69153: LD_ADDR_VAR 0 2
69157: PUSH
69158: LD_VAR 0 2
69162: PPUSH
69163: LD_INT 4
69165: PPUSH
69166: LD_VAR 0 2
69170: PUSH
69171: LD_INT 4
69173: ARRAY
69174: PUSH
69175: LD_VAR 0 4
69179: PLUS
69180: PPUSH
69181: CALL_OW 1
69185: ST_TO_ADDR
// end ;
69186: GO 69105
69188: POP
69189: POP
// end ;
69190: LD_VAR 0 2
69194: RET
// export function Length ( array ) ; begin
69195: LD_INT 0
69197: PPUSH
// result := array + 0 ;
69198: LD_ADDR_VAR 0 2
69202: PUSH
69203: LD_VAR 0 1
69207: PUSH
69208: LD_INT 0
69210: PLUS
69211: ST_TO_ADDR
// end ;
69212: LD_VAR 0 2
69216: RET
// export function PrepareArray ( array ) ; begin
69217: LD_INT 0
69219: PPUSH
// result := array diff 0 ;
69220: LD_ADDR_VAR 0 2
69224: PUSH
69225: LD_VAR 0 1
69229: PUSH
69230: LD_INT 0
69232: DIFF
69233: ST_TO_ADDR
// if not result [ 1 ] then
69234: LD_VAR 0 2
69238: PUSH
69239: LD_INT 1
69241: ARRAY
69242: NOT
69243: IFFALSE 69263
// result := Delete ( result , 1 ) ;
69245: LD_ADDR_VAR 0 2
69249: PUSH
69250: LD_VAR 0 2
69254: PPUSH
69255: LD_INT 1
69257: PPUSH
69258: CALL_OW 3
69262: ST_TO_ADDR
// end ;
69263: LD_VAR 0 2
69267: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69268: LD_INT 0
69270: PPUSH
69271: PPUSH
69272: PPUSH
69273: PPUSH
// sibRocketRange := 25 ;
69274: LD_ADDR_VAR 0 6
69278: PUSH
69279: LD_INT 25
69281: ST_TO_ADDR
// result := false ;
69282: LD_ADDR_VAR 0 4
69286: PUSH
69287: LD_INT 0
69289: ST_TO_ADDR
// for i := 0 to 5 do
69290: LD_ADDR_VAR 0 5
69294: PUSH
69295: DOUBLE
69296: LD_INT 0
69298: DEC
69299: ST_TO_ADDR
69300: LD_INT 5
69302: PUSH
69303: FOR_TO
69304: IFFALSE 69371
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69306: LD_VAR 0 1
69310: PPUSH
69311: LD_VAR 0 5
69315: PPUSH
69316: LD_VAR 0 6
69320: PPUSH
69321: CALL_OW 272
69325: PPUSH
69326: LD_VAR 0 2
69330: PPUSH
69331: LD_VAR 0 5
69335: PPUSH
69336: LD_VAR 0 6
69340: PPUSH
69341: CALL_OW 273
69345: PPUSH
69346: LD_VAR 0 3
69350: PPUSH
69351: CALL_OW 309
69355: IFFALSE 69369
// begin result := true ;
69357: LD_ADDR_VAR 0 4
69361: PUSH
69362: LD_INT 1
69364: ST_TO_ADDR
// exit ;
69365: POP
69366: POP
69367: GO 69373
// end ;
69369: GO 69303
69371: POP
69372: POP
// end ;
69373: LD_VAR 0 4
69377: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69378: LD_INT 0
69380: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69381: LD_VAR 0 1
69385: PPUSH
69386: LD_VAR 0 2
69390: PPUSH
69391: LD_INT 0
69393: PPUSH
69394: LD_INT 0
69396: PPUSH
69397: LD_INT 1
69399: PPUSH
69400: LD_INT 0
69402: PPUSH
69403: CALL_OW 587
// end ;
69407: LD_VAR 0 3
69411: RET
// export function CenterOnNow ( unit ) ; begin
69412: LD_INT 0
69414: PPUSH
// result := IsInUnit ( unit ) ;
69415: LD_ADDR_VAR 0 2
69419: PUSH
69420: LD_VAR 0 1
69424: PPUSH
69425: CALL_OW 310
69429: ST_TO_ADDR
// if not result then
69430: LD_VAR 0 2
69434: NOT
69435: IFFALSE 69447
// result := unit ;
69437: LD_ADDR_VAR 0 2
69441: PUSH
69442: LD_VAR 0 1
69446: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69447: LD_VAR 0 1
69451: PPUSH
69452: CALL_OW 87
// end ;
69456: LD_VAR 0 2
69460: RET
// export function ComMoveHex ( unit , hex ) ; begin
69461: LD_INT 0
69463: PPUSH
// if not hex then
69464: LD_VAR 0 2
69468: NOT
69469: IFFALSE 69473
// exit ;
69471: GO 69526
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69473: LD_VAR 0 2
69477: PUSH
69478: LD_INT 1
69480: ARRAY
69481: PPUSH
69482: LD_VAR 0 2
69486: PUSH
69487: LD_INT 2
69489: ARRAY
69490: PPUSH
69491: CALL_OW 428
69495: IFFALSE 69499
// exit ;
69497: GO 69526
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69499: LD_VAR 0 1
69503: PPUSH
69504: LD_VAR 0 2
69508: PUSH
69509: LD_INT 1
69511: ARRAY
69512: PPUSH
69513: LD_VAR 0 2
69517: PUSH
69518: LD_INT 2
69520: ARRAY
69521: PPUSH
69522: CALL_OW 111
// end ;
69526: LD_VAR 0 3
69530: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69531: LD_INT 0
69533: PPUSH
69534: PPUSH
69535: PPUSH
// if not unit or not enemy then
69536: LD_VAR 0 1
69540: NOT
69541: PUSH
69542: LD_VAR 0 2
69546: NOT
69547: OR
69548: IFFALSE 69552
// exit ;
69550: GO 69676
// x := GetX ( enemy ) ;
69552: LD_ADDR_VAR 0 4
69556: PUSH
69557: LD_VAR 0 2
69561: PPUSH
69562: CALL_OW 250
69566: ST_TO_ADDR
// y := GetY ( enemy ) ;
69567: LD_ADDR_VAR 0 5
69571: PUSH
69572: LD_VAR 0 2
69576: PPUSH
69577: CALL_OW 251
69581: ST_TO_ADDR
// if ValidHex ( x , y ) then
69582: LD_VAR 0 4
69586: PPUSH
69587: LD_VAR 0 5
69591: PPUSH
69592: CALL_OW 488
69596: IFFALSE 69676
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69598: LD_VAR 0 2
69602: PPUSH
69603: CALL_OW 247
69607: PUSH
69608: LD_INT 3
69610: PUSH
69611: LD_INT 2
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: IN
69618: PUSH
69619: LD_VAR 0 1
69623: PPUSH
69624: CALL_OW 255
69628: PPUSH
69629: LD_VAR 0 2
69633: PPUSH
69634: CALL_OW 292
69638: OR
69639: IFFALSE 69657
// ComAttackUnit ( unit , enemy ) else
69641: LD_VAR 0 1
69645: PPUSH
69646: LD_VAR 0 2
69650: PPUSH
69651: CALL_OW 115
69655: GO 69676
// ComAgressiveMove ( unit , x , y ) ;
69657: LD_VAR 0 1
69661: PPUSH
69662: LD_VAR 0 4
69666: PPUSH
69667: LD_VAR 0 5
69671: PPUSH
69672: CALL_OW 114
// end ;
69676: LD_VAR 0 3
69680: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69681: LD_INT 0
69683: PPUSH
69684: PPUSH
69685: PPUSH
// list := AreaToList ( area , 0 ) ;
69686: LD_ADDR_VAR 0 5
69690: PUSH
69691: LD_VAR 0 1
69695: PPUSH
69696: LD_INT 0
69698: PPUSH
69699: CALL_OW 517
69703: ST_TO_ADDR
// if not list then
69704: LD_VAR 0 5
69708: NOT
69709: IFFALSE 69713
// exit ;
69711: GO 69843
// if all then
69713: LD_VAR 0 2
69717: IFFALSE 69805
// begin for i := 1 to list [ 1 ] do
69719: LD_ADDR_VAR 0 4
69723: PUSH
69724: DOUBLE
69725: LD_INT 1
69727: DEC
69728: ST_TO_ADDR
69729: LD_VAR 0 5
69733: PUSH
69734: LD_INT 1
69736: ARRAY
69737: PUSH
69738: FOR_TO
69739: IFFALSE 69801
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69741: LD_ADDR_VAR 0 3
69745: PUSH
69746: LD_VAR 0 3
69750: PPUSH
69751: LD_VAR 0 3
69755: PUSH
69756: LD_INT 1
69758: PLUS
69759: PPUSH
69760: LD_VAR 0 5
69764: PUSH
69765: LD_INT 1
69767: ARRAY
69768: PUSH
69769: LD_VAR 0 4
69773: ARRAY
69774: PUSH
69775: LD_VAR 0 5
69779: PUSH
69780: LD_INT 2
69782: ARRAY
69783: PUSH
69784: LD_VAR 0 4
69788: ARRAY
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PPUSH
69794: CALL_OW 1
69798: ST_TO_ADDR
69799: GO 69738
69801: POP
69802: POP
// exit ;
69803: GO 69843
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69805: LD_ADDR_VAR 0 3
69809: PUSH
69810: LD_VAR 0 5
69814: PUSH
69815: LD_INT 1
69817: ARRAY
69818: PUSH
69819: LD_INT 1
69821: ARRAY
69822: PUSH
69823: LD_VAR 0 5
69827: PUSH
69828: LD_INT 2
69830: ARRAY
69831: PUSH
69832: LD_INT 1
69834: ARRAY
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: EMPTY
69841: LIST
69842: ST_TO_ADDR
// end ;
69843: LD_VAR 0 3
69847: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69848: LD_INT 0
69850: PPUSH
69851: PPUSH
// list := AreaToList ( area , 0 ) ;
69852: LD_ADDR_VAR 0 4
69856: PUSH
69857: LD_VAR 0 1
69861: PPUSH
69862: LD_INT 0
69864: PPUSH
69865: CALL_OW 517
69869: ST_TO_ADDR
// if not list then
69870: LD_VAR 0 4
69874: NOT
69875: IFFALSE 69879
// exit ;
69877: GO 69920
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69879: LD_ADDR_VAR 0 3
69883: PUSH
69884: LD_VAR 0 4
69888: PUSH
69889: LD_INT 1
69891: ARRAY
69892: PUSH
69893: LD_INT 1
69895: ARRAY
69896: PUSH
69897: LD_VAR 0 4
69901: PUSH
69902: LD_INT 2
69904: ARRAY
69905: PUSH
69906: LD_INT 1
69908: ARRAY
69909: PUSH
69910: LD_VAR 0 2
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: LIST
69919: ST_TO_ADDR
// end ;
69920: LD_VAR 0 3
69924: RET
// export function First ( array ) ; begin
69925: LD_INT 0
69927: PPUSH
// if not array then
69928: LD_VAR 0 1
69932: NOT
69933: IFFALSE 69937
// exit ;
69935: GO 69951
// result := array [ 1 ] ;
69937: LD_ADDR_VAR 0 2
69941: PUSH
69942: LD_VAR 0 1
69946: PUSH
69947: LD_INT 1
69949: ARRAY
69950: ST_TO_ADDR
// end ;
69951: LD_VAR 0 2
69955: RET
// export function Last ( array ) ; begin
69956: LD_INT 0
69958: PPUSH
// if not array then
69959: LD_VAR 0 1
69963: NOT
69964: IFFALSE 69968
// exit ;
69966: GO 69984
// result := array [ array ] ;
69968: LD_ADDR_VAR 0 2
69972: PUSH
69973: LD_VAR 0 1
69977: PUSH
69978: LD_VAR 0 1
69982: ARRAY
69983: ST_TO_ADDR
// end ;
69984: LD_VAR 0 2
69988: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69989: LD_INT 0
69991: PPUSH
69992: PPUSH
// result := [ ] ;
69993: LD_ADDR_VAR 0 5
69997: PUSH
69998: EMPTY
69999: ST_TO_ADDR
// if not array then
70000: LD_VAR 0 1
70004: NOT
70005: IFFALSE 70009
// exit ;
70007: GO 70121
// for i := 1 to array do
70009: LD_ADDR_VAR 0 6
70013: PUSH
70014: DOUBLE
70015: LD_INT 1
70017: DEC
70018: ST_TO_ADDR
70019: LD_VAR 0 1
70023: PUSH
70024: FOR_TO
70025: IFFALSE 70119
// if array [ i ] [ index ] = value then
70027: LD_VAR 0 1
70031: PUSH
70032: LD_VAR 0 6
70036: ARRAY
70037: PUSH
70038: LD_VAR 0 2
70042: ARRAY
70043: PUSH
70044: LD_VAR 0 3
70048: EQUAL
70049: IFFALSE 70117
// begin if indexColumn then
70051: LD_VAR 0 4
70055: IFFALSE 70091
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70057: LD_ADDR_VAR 0 5
70061: PUSH
70062: LD_VAR 0 5
70066: PPUSH
70067: LD_VAR 0 1
70071: PUSH
70072: LD_VAR 0 6
70076: ARRAY
70077: PUSH
70078: LD_VAR 0 4
70082: ARRAY
70083: PPUSH
70084: CALL 65459 0 2
70088: ST_TO_ADDR
70089: GO 70117
// result := Join ( result , array [ i ] ) ;
70091: LD_ADDR_VAR 0 5
70095: PUSH
70096: LD_VAR 0 5
70100: PPUSH
70101: LD_VAR 0 1
70105: PUSH
70106: LD_VAR 0 6
70110: ARRAY
70111: PPUSH
70112: CALL 65459 0 2
70116: ST_TO_ADDR
// end ;
70117: GO 70024
70119: POP
70120: POP
// end ;
70121: LD_VAR 0 5
70125: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70126: LD_INT 0
70128: PPUSH
70129: PPUSH
70130: PPUSH
// if btype = b_depot then
70131: LD_VAR 0 2
70135: PUSH
70136: LD_INT 0
70138: EQUAL
70139: IFFALSE 70151
// begin result := true ;
70141: LD_ADDR_VAR 0 3
70145: PUSH
70146: LD_INT 1
70148: ST_TO_ADDR
// exit ;
70149: GO 70267
// end ; pom := GetBase ( depot ) ;
70151: LD_ADDR_VAR 0 4
70155: PUSH
70156: LD_VAR 0 1
70160: PPUSH
70161: CALL_OW 274
70165: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70166: LD_ADDR_VAR 0 5
70170: PUSH
70171: LD_VAR 0 2
70175: PPUSH
70176: LD_VAR 0 1
70180: PPUSH
70181: CALL_OW 248
70185: PPUSH
70186: CALL_OW 450
70190: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70191: LD_ADDR_VAR 0 3
70195: PUSH
70196: LD_VAR 0 4
70200: PPUSH
70201: LD_INT 1
70203: PPUSH
70204: CALL_OW 275
70208: PUSH
70209: LD_VAR 0 5
70213: PUSH
70214: LD_INT 1
70216: ARRAY
70217: GREATEREQUAL
70218: PUSH
70219: LD_VAR 0 4
70223: PPUSH
70224: LD_INT 2
70226: PPUSH
70227: CALL_OW 275
70231: PUSH
70232: LD_VAR 0 5
70236: PUSH
70237: LD_INT 2
70239: ARRAY
70240: GREATEREQUAL
70241: AND
70242: PUSH
70243: LD_VAR 0 4
70247: PPUSH
70248: LD_INT 3
70250: PPUSH
70251: CALL_OW 275
70255: PUSH
70256: LD_VAR 0 5
70260: PUSH
70261: LD_INT 3
70263: ARRAY
70264: GREATEREQUAL
70265: AND
70266: ST_TO_ADDR
// end ;
70267: LD_VAR 0 3
70271: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70272: LD_INT 0
70274: PPUSH
// if not vehicles or not parkingPoint then
70275: LD_VAR 0 1
70279: NOT
70280: PUSH
70281: LD_VAR 0 2
70285: NOT
70286: OR
70287: IFFALSE 70291
// exit ;
70289: GO 70389
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70291: LD_ADDR_VAR 0 1
70295: PUSH
70296: LD_VAR 0 1
70300: PPUSH
70301: LD_INT 50
70303: PUSH
70304: EMPTY
70305: LIST
70306: PUSH
70307: LD_INT 3
70309: PUSH
70310: LD_INT 92
70312: PUSH
70313: LD_VAR 0 2
70317: PUSH
70318: LD_INT 1
70320: ARRAY
70321: PUSH
70322: LD_VAR 0 2
70326: PUSH
70327: LD_INT 2
70329: ARRAY
70330: PUSH
70331: LD_INT 8
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PPUSH
70348: CALL_OW 72
70352: ST_TO_ADDR
// if not vehicles then
70353: LD_VAR 0 1
70357: NOT
70358: IFFALSE 70362
// exit ;
70360: GO 70389
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70362: LD_VAR 0 1
70366: PPUSH
70367: LD_VAR 0 2
70371: PUSH
70372: LD_INT 1
70374: ARRAY
70375: PPUSH
70376: LD_VAR 0 2
70380: PUSH
70381: LD_INT 2
70383: ARRAY
70384: PPUSH
70385: CALL_OW 111
// end ;
70389: LD_VAR 0 3
70393: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70394: LD_INT 0
70396: PPUSH
70397: PPUSH
70398: PPUSH
// if not side or not area then
70399: LD_VAR 0 1
70403: NOT
70404: PUSH
70405: LD_VAR 0 2
70409: NOT
70410: OR
70411: IFFALSE 70415
// exit ;
70413: GO 70534
// tmp := AreaToList ( area , 0 ) ;
70415: LD_ADDR_VAR 0 5
70419: PUSH
70420: LD_VAR 0 2
70424: PPUSH
70425: LD_INT 0
70427: PPUSH
70428: CALL_OW 517
70432: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70433: LD_ADDR_VAR 0 4
70437: PUSH
70438: DOUBLE
70439: LD_INT 1
70441: DEC
70442: ST_TO_ADDR
70443: LD_VAR 0 5
70447: PUSH
70448: LD_INT 1
70450: ARRAY
70451: PUSH
70452: FOR_TO
70453: IFFALSE 70532
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70455: LD_VAR 0 5
70459: PUSH
70460: LD_INT 1
70462: ARRAY
70463: PUSH
70464: LD_VAR 0 4
70468: ARRAY
70469: PPUSH
70470: LD_VAR 0 5
70474: PUSH
70475: LD_INT 2
70477: ARRAY
70478: PUSH
70479: LD_VAR 0 4
70483: ARRAY
70484: PPUSH
70485: CALL_OW 351
70489: IFFALSE 70530
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70491: LD_VAR 0 5
70495: PUSH
70496: LD_INT 1
70498: ARRAY
70499: PUSH
70500: LD_VAR 0 4
70504: ARRAY
70505: PPUSH
70506: LD_VAR 0 5
70510: PUSH
70511: LD_INT 2
70513: ARRAY
70514: PUSH
70515: LD_VAR 0 4
70519: ARRAY
70520: PPUSH
70521: LD_VAR 0 1
70525: PPUSH
70526: CALL_OW 244
// end ;
70530: GO 70452
70532: POP
70533: POP
// end ; end_of_file
70534: LD_VAR 0 3
70538: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70539: LD_VAR 0 1
70543: PUSH
70544: LD_INT 200
70546: DOUBLE
70547: GREATEREQUAL
70548: IFFALSE 70556
70550: LD_INT 299
70552: DOUBLE
70553: LESSEQUAL
70554: IFTRUE 70558
70556: GO 70590
70558: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70559: LD_VAR 0 1
70563: PPUSH
70564: LD_VAR 0 2
70568: PPUSH
70569: LD_VAR 0 3
70573: PPUSH
70574: LD_VAR 0 4
70578: PPUSH
70579: LD_VAR 0 5
70583: PPUSH
70584: CALL 23250 0 5
70588: GO 70667
70590: LD_INT 300
70592: DOUBLE
70593: GREATEREQUAL
70594: IFFALSE 70602
70596: LD_INT 399
70598: DOUBLE
70599: LESSEQUAL
70600: IFTRUE 70604
70602: GO 70666
70604: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70605: LD_VAR 0 1
70609: PPUSH
70610: LD_VAR 0 2
70614: PPUSH
70615: LD_VAR 0 3
70619: PPUSH
70620: LD_VAR 0 4
70624: PPUSH
70625: LD_VAR 0 5
70629: PPUSH
70630: LD_VAR 0 6
70634: PPUSH
70635: LD_VAR 0 7
70639: PPUSH
70640: LD_VAR 0 8
70644: PPUSH
70645: LD_VAR 0 9
70649: PPUSH
70650: LD_VAR 0 10
70654: PPUSH
70655: LD_VAR 0 11
70659: PPUSH
70660: CALL 19575 0 11
70664: GO 70667
70666: POP
// end ;
70667: PPOPN 11
70669: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70670: LD_VAR 0 1
70674: PPUSH
70675: LD_VAR 0 2
70679: PPUSH
70680: LD_VAR 0 3
70684: PPUSH
70685: LD_VAR 0 4
70689: PPUSH
70690: LD_VAR 0 5
70694: PPUSH
70695: CALL 22986 0 5
// end ; end_of_file
70699: PPOPN 5
70701: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70702: LD_VAR 0 1
70706: PPUSH
70707: LD_VAR 0 2
70711: PPUSH
70712: LD_VAR 0 3
70716: PPUSH
70717: LD_VAR 0 4
70721: PPUSH
70722: LD_VAR 0 5
70726: PPUSH
70727: LD_VAR 0 6
70731: PPUSH
70732: CALL 7227 0 6
// end ;
70736: PPOPN 6
70738: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70739: LD_INT 0
70741: PPUSH
// begin if not units then
70742: LD_VAR 0 1
70746: NOT
70747: IFFALSE 70751
// exit ;
70749: GO 70751
// end ;
70751: PPOPN 7
70753: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70754: CALL 7114 0 0
// end ;
70758: PPOPN 1
70760: END
