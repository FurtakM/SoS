// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 230 0 0
// PrepareAllies ;
  12: CALL 2221 0 0
// Action ;
  16: CALL 4063 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 182 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 10
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 11
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 13
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 15
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_res_art := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// player_artifact_ready := false ;
 128: LD_ADDR_EXP 16
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 9
 140: PUSH
 141: LD_INT 52500
 143: PUSH
 144: LD_INT 67200
 146: PUSH
 147: LD_INT 84000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// bonus_num := 0 ;
 161: LD_ADDR_EXP 14
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// artifact_progress := 0 ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// end ;
 177: LD_VAR 0 1
 181: RET
// export function SetDiplomacy ; begin
 182: LD_INT 0
 184: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 185: LD_INT 92
 187: PPUSH
 188: LD_INT 48
 190: PPUSH
 191: LD_INT 8
 193: PPUSH
 194: LD_INT 32796
 196: NEG
 197: PPUSH
 198: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 202: LD_INT 92
 204: PPUSH
 205: LD_INT 48
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 215: LD_INT 5
 217: PPUSH
 218: LD_INT 8
 220: PPUSH
 221: CALL_OW 343
// end ; end_of_file
 225: LD_VAR 0 1
 229: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
// uc_side := 2 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 2
 257: ST_TO_ADDR
// uc_nation := nation_arabian ;
 258: LD_ADDR_OWVAR 21
 262: PUSH
 263: LD_INT 2
 265: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 6
 274: PPUSH
 275: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 279: LD_ADDR_OWVAR 26
 283: PUSH
 284: LD_STRING Nicolas Vervecken
 286: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING SecondCharsGal
 294: ST_TO_ADDR
// hc_face_number := 3 ;
 295: LD_ADDR_OWVAR 34
 299: PUSH
 300: LD_INT 3
 302: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 303: LD_ADDR_OWVAR 29
 307: PUSH
 308: LD_INT 11
 310: PUSH
 311: LD_INT 10
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// Vervecken := CreateHuman ;
 318: LD_ADDR_EXP 12
 322: PUSH
 323: CALL_OW 44
 327: ST_TO_ADDR
// InitHc ;
 328: CALL_OW 19
// uc_side := 8 ;
 332: LD_ADDR_OWVAR 20
 336: PUSH
 337: LD_INT 8
 339: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 340: LD_INT 23
 342: PPUSH
 343: CALL_OW 274
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 4000
 353: PUSH
 354: LD_INT 2500
 356: PUSH
 357: LD_INT 1250
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_OWVAR 67
 369: ARRAY
 370: PPUSH
 371: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 375: LD_INT 23
 377: PPUSH
 378: CALL_OW 274
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: LD_INT 300
 388: PPUSH
 389: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 393: LD_INT 23
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 3
 403: PPUSH
 404: LD_INT 100
 406: PUSH
 407: LD_INT 50
 409: PUSH
 410: LD_INT 30
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: PPUSH
 424: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 428: LD_ADDR_VAR 0 14
 432: PUSH
 433: LD_INT 23
 435: PPUSH
 436: CALL_OW 250
 440: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 441: LD_ADDR_VAR 0 15
 445: PUSH
 446: LD_INT 23
 448: PPUSH
 449: CALL_OW 251
 453: ST_TO_ADDR
// team := [ ] ;
 454: LD_ADDR_VAR 0 7
 458: PUSH
 459: EMPTY
 460: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 461: LD_ADDR_VAR 0 8
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: PUSH
 480: LD_OWVAR 67
 484: ARRAY
 485: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 486: LD_ADDR_VAR 0 9
 490: PUSH
 491: LD_INT 11
 493: PUSH
 494: LD_INT 9
 496: PUSH
 497: LD_INT 8
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 511: LD_ADDR_VAR 0 10
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_OWVAR 67
 534: ARRAY
 535: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 536: LD_ADDR_VAR 0 11
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 561: LD_ADDR_VAR 0 12
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 13
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 4
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 611: LD_ADDR_VAR 0 18
 615: PUSH
 616: LD_INT 13
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: LD_INT 26
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 14
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 25
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 14
 654: PUSH
 655: LD_INT 3
 657: PUSH
 658: LD_INT 5
 660: PUSH
 661: LD_INT 32
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 14
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: LD_INT 31
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_INT 14
 690: PUSH
 691: LD_INT 3
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 24
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 14
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: LD_INT 25
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: PUSH
 724: LD_INT 13
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 24
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_VAR 0 18
 765: PUSH
 766: LD_OWVAR 67
 770: MINUS
 771: PUSH
 772: LD_INT 1
 774: PLUS
 775: PUSH
 776: FOR_TO
 777: IFFALSE 906
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 779: LD_ADDR_OWVAR 37
 783: PUSH
 784: LD_VAR 0 18
 788: PUSH
 789: LD_VAR 0 2
 793: ARRAY
 794: PUSH
 795: LD_INT 1
 797: ARRAY
 798: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 799: LD_ADDR_OWVAR 39
 803: PUSH
 804: LD_VAR 0 18
 808: PUSH
 809: LD_VAR 0 2
 813: ARRAY
 814: PUSH
 815: LD_INT 2
 817: ARRAY
 818: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 819: LD_ADDR_OWVAR 38
 823: PUSH
 824: LD_VAR 0 18
 828: PUSH
 829: LD_VAR 0 2
 833: ARRAY
 834: PUSH
 835: LD_INT 3
 837: ARRAY
 838: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 839: LD_ADDR_OWVAR 40
 843: PUSH
 844: LD_VAR 0 18
 848: PUSH
 849: LD_VAR 0 2
 853: ARRAY
 854: PUSH
 855: LD_INT 4
 857: ARRAY
 858: ST_TO_ADDR
// un := CreateVehicle ;
 859: LD_ADDR_VAR 0 6
 863: PUSH
 864: CALL_OW 45
 868: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 869: LD_VAR 0 6
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: LD_INT 5
 879: PPUSH
 880: CALL_OW 12
 884: PPUSH
 885: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 889: LD_VAR 0 6
 893: PPUSH
 894: LD_INT 7
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 49
// end ;
 904: GO 776
 906: POP
 907: POP
// for i = 1 to ape_num do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_VAR 0 13
 922: PUSH
 923: FOR_TO
 924: IFFALSE 991
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 926: LD_INT 0
 928: PPUSH
 929: LD_INT 16
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: CALL_OW 12
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 960: LD_ADDR_VAR 0 7
 964: PUSH
 965: LD_VAR 0 7
 969: PPUSH
 970: LD_VAR 0 7
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: CALL_OW 44
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: GO 923
 991: POP
 992: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 993: LD_INT 1
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: LD_VAR 0 8
1003: PPUSH
1004: CALL_OW 380
// l1 := CreateHuman ;
1008: LD_ADDR_EXP 2
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_INT 23
1025: PPUSH
1026: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1030: LD_INT 1
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_VAR 0 8
1040: PPUSH
1041: CALL_OW 380
// l2 := CreateHuman ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: CALL_OW 44
1054: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 23
1062: PPUSH
1063: CALL_OW 52
// for class = 1 to 4 do
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 4
1079: PUSH
1080: FOR_TO
1081: IFFALSE 1180
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_VAR 0 9
1097: PUSH
1098: LD_VAR 0 10
1102: PUSH
1103: LD_VAR 0 11
1107: PUSH
1108: LD_VAR 0 12
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1176
// begin PrepareHuman ( false , class , skill ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_VAR 0 4
1135: PPUSH
1136: LD_VAR 0 8
1140: PPUSH
1141: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1145: LD_ADDR_VAR 0 7
1149: PUSH
1150: LD_VAR 0 7
1154: PPUSH
1155: LD_VAR 0 7
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: CALL_OW 44
1168: PPUSH
1169: CALL_OW 2
1173: ST_TO_ADDR
// end ;
1174: GO 1125
1176: POP
1177: POP
1178: GO 1080
1180: POP
1181: POP
// for i in team do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_VAR 0 7
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1669
// begin b := 0 ;
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 0
1202: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1203: LD_VAR 0 2
1207: PPUSH
1208: CALL_OW 257
1212: PUSH
1213: LD_INT 1
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1328
1221: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1222: LD_ADDR_VAR 0 5
1226: PUSH
1227: LD_INT 22
1229: PUSH
1230: LD_OWVAR 20
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 30
1254: PUSH
1255: LD_INT 31
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 58
1269: PUSH
1270: EMPTY
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 69
1282: ST_TO_ADDR
// if not b then
1283: LD_VAR 0 5
1287: NOT
1288: IFFALSE 1326
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1290: LD_ADDR_VAR 0 5
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_OWVAR 20
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 5
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL_OW 69
1325: ST_TO_ADDR
// end ; class_engineer :
1326: GO 1567
1328: LD_INT 2
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1375
1336: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1337: LD_ADDR_VAR 0 5
1341: PUSH
1342: LD_INT 22
1344: PUSH
1345: LD_OWVAR 20
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: LD_INT 30
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 69
1372: ST_TO_ADDR
1373: GO 1567
1375: LD_INT 3
1377: DOUBLE
1378: EQUAL
1379: IFTRUE 1383
1381: GO 1472
1383: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 5
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_OWVAR 20
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 21
1403: PUSH
1404: LD_INT 2
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 58
1413: PUSH
1414: EMPTY
1415: LIST
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 69
1426: ST_TO_ADDR
// if not b then
1427: LD_VAR 0 5
1431: NOT
1432: IFFALSE 1470
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1434: LD_ADDR_VAR 0 5
1438: PUSH
1439: LD_INT 22
1441: PUSH
1442: LD_OWVAR 20
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 30
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PPUSH
1465: CALL_OW 69
1469: ST_TO_ADDR
// end ; class_scientistic :
1470: GO 1567
1472: LD_INT 4
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1519
1480: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1481: LD_ADDR_VAR 0 5
1485: PUSH
1486: LD_INT 22
1488: PUSH
1489: LD_OWVAR 20
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 30
1500: PUSH
1501: LD_INT 8
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: ST_TO_ADDR
// end ; class_apeman_soldier :
1517: GO 1567
1519: LD_INT 15
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1566
1527: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1528: LD_ADDR_VAR 0 5
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_OWVAR 20
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 30
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PPUSH
1559: CALL_OW 69
1563: ST_TO_ADDR
1564: GO 1567
1566: POP
// if b then
1567: LD_VAR 0 5
1571: IFFALSE 1642
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1573: LD_VAR 0 5
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: CALL_OW 266
1586: PUSH
1587: LD_INT 31
1589: EQUAL
1590: IFFALSE 1612
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: PPUSH
1606: CALL 4830 0 2
1610: GO 1640
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_INT 1
1624: PPUSH
1625: LD_VAR 0 5
1629: PPUSH
1630: CALL_OW 12
1634: ARRAY
1635: PPUSH
1636: CALL_OW 52
1640: GO 1667
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 14
1651: PPUSH
1652: LD_VAR 0 15
1656: PPUSH
1657: LD_INT 15
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 50
// end ;
1667: GO 1192
1669: POP
1670: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1671: LD_ADDR_VAR 0 16
1675: PUSH
1676: LD_INT 26
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_OWVAR 67
1697: ARRAY
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 5
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_OWVAR 67
1724: ARRAY
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 24
1732: PUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 5
1738: PUSH
1739: LD_INT 4
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_OWVAR 67
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 30
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: LD_INT 1
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_OWVAR 67
1778: ARRAY
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_INT 22
1797: PUSH
1798: LD_OWVAR 20
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 32
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: PUSH
1826: FOR_IN
1827: IFFALSE 2000
// begin if weapons then
1829: LD_VAR 0 16
1833: IFFALSE 1957
// begin k := rand ( 1 , weapons ) ;
1835: LD_ADDR_VAR 0 3
1839: PUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_VAR 0 16
1847: PPUSH
1848: CALL_OW 12
1852: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1853: LD_ADDR_VAR 0 17
1857: PUSH
1858: LD_VAR 0 16
1862: PUSH
1863: LD_VAR 0 3
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1873: LD_ADDR_VAR 0 16
1877: PUSH
1878: LD_VAR 0 16
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: LD_INT 2
1890: PPUSH
1891: LD_VAR 0 16
1895: PUSH
1896: LD_VAR 0 3
1900: ARRAY
1901: PUSH
1902: LD_INT 2
1904: ARRAY
1905: PUSH
1906: LD_INT 1
1908: MINUS
1909: PPUSH
1910: CALL 4922 0 4
1914: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1915: LD_VAR 0 16
1919: PUSH
1920: LD_VAR 0 3
1924: ARRAY
1925: PUSH
1926: LD_INT 2
1928: ARRAY
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: IFFALSE 1955
// weapons := Delete ( weapons , k ) ;
1935: LD_ADDR_VAR 0 16
1939: PUSH
1940: LD_VAR 0 16
1944: PPUSH
1945: LD_VAR 0 3
1949: PPUSH
1950: CALL_OW 3
1954: ST_TO_ADDR
// end else
1955: GO 1984
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1957: LD_ADDR_VAR 0 17
1961: PUSH
1962: LD_INT 27
1964: PUSH
1965: LD_INT 23
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: CALL_OW 12
1982: ARRAY
1983: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_VAR 0 17
1993: PPUSH
1994: CALL_OW 431
// end ;
1998: GO 1826
2000: POP
2001: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2002: LD_INT 1
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_VAR 0 8
2012: PUSH
2013: LD_INT 1
2015: PLUS
2016: PPUSH
2017: CALL_OW 380
// hc_gallery := potter ;
2021: LD_ADDR_OWVAR 33
2025: PUSH
2026: LD_STRING potter
2028: ST_TO_ADDR
// hc_face_number := 1 ;
2029: LD_ADDR_OWVAR 34
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// hc_importance := 100 ;
2037: LD_ADDR_OWVAR 32
2041: PUSH
2042: LD_INT 100
2044: ST_TO_ADDR
// hc_name := Mike Gerste ;
2045: LD_ADDR_OWVAR 26
2049: PUSH
2050: LD_STRING Mike Gerste
2052: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 10
2060: PUSH
2061: LD_INT 11
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: ST_TO_ADDR
// legion_commander := CreateHuman ;
2068: LD_ADDR_EXP 1
2072: PUSH
2073: CALL_OW 44
2077: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2078: LD_EXP 1
2082: PPUSH
2083: LD_INT 23
2085: PPUSH
2086: CALL_OW 52
// uc_side := 5 ;
2090: LD_ADDR_OWVAR 20
2094: PUSH
2095: LD_INT 5
2097: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 8
2108: PPUSH
2109: CALL_OW 380
// hc_gallery := potter ;
2113: LD_ADDR_OWVAR 33
2117: PUSH
2118: LD_STRING potter
2120: ST_TO_ADDR
// hc_face_number := 2 ;
2121: LD_ADDR_OWVAR 34
2125: PUSH
2126: LD_INT 2
2128: ST_TO_ADDR
// hc_importance := 0 ;
2129: LD_ADDR_OWVAR 32
2133: PUSH
2134: LD_INT 0
2136: ST_TO_ADDR
// hc_name := George Potter ;
2137: LD_ADDR_OWVAR 26
2141: PUSH
2142: LD_STRING George Potter
2144: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2145: LD_ADDR_OWVAR 29
2149: PUSH
2150: LD_INT 12
2152: PUSH
2153: LD_INT 9
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: ST_TO_ADDR
// potter := CreateHuman ;
2160: LD_ADDR_EXP 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2170: LD_EXP 4
2174: PPUSH
2175: LD_INT 4
2177: PPUSH
2178: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2182: LD_EXP 4
2186: PPUSH
2187: LD_INT 103
2189: PPUSH
2190: LD_INT 45
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2200: LD_EXP 4
2204: PPUSH
2205: LD_INT 23
2207: PPUSH
2208: CALL_OW 119
// InitHc ( ) ;
2212: CALL_OW 19
// end ; end_of_file
2216: LD_VAR 0 1
2220: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 5 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 5
2235: ST_TO_ADDR
// uc_nation := nation_arabian ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_OWVAR 20
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 30
2263: PUSH
2264: LD_INT 5
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 69
2279: ST_TO_ADDR
// for i = 1 to 3 do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 3
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2332
// begin PrepareHuman ( false , 2 , 6 ) ;
2296: LD_INT 0
2298: PPUSH
2299: LD_INT 2
2301: PPUSH
2302: LD_INT 6
2304: PPUSH
2305: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2309: CALL_OW 44
2313: PPUSH
2314: LD_INT 27
2316: PPUSH
2317: LD_INT 22
2319: PPUSH
2320: LD_INT 5
2322: PPUSH
2323: LD_INT 0
2325: PPUSH
2326: CALL_OW 50
// end ;
2330: GO 2293
2332: POP
2333: POP
// for i = 1 to 3 do
2334: LD_ADDR_VAR 0 2
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 3
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2383
// begin PrepareHuman ( false , 1 , 6 ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 6
2358: PPUSH
2359: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 4
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PPUSH
2377: CALL_OW 52
// end ;
2381: GO 2347
2383: POP
2384: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: LD_INT 22
2392: PUSH
2393: LD_OWVAR 20
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 2
2404: PUSH
2405: LD_INT 30
2407: PUSH
2408: LD_INT 31
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 30
2417: PUSH
2418: LD_INT 32
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2527
// begin PrepareHuman ( false , 1 , 6 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2455: CALL_OW 44
2459: PPUSH
2460: LD_VAR 0 2
2464: PPUSH
2465: CALL 4830 0 2
// if GetBType ( i ) = b_bunker then
2469: LD_VAR 0 2
2473: PPUSH
2474: CALL_OW 266
2478: PUSH
2479: LD_INT 32
2481: EQUAL
2482: IFFALSE 2525
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 27
2491: PUSH
2492: LD_INT 25
2494: PUSH
2495: LD_INT 24
2497: PUSH
2498: LD_INT 28
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_VAR 0 2
2511: PUSH
2512: LD_INT 4
2514: MOD
2515: PUSH
2516: LD_INT 1
2518: PLUS
2519: ARRAY
2520: PPUSH
2521: CALL_OW 431
// end ;
2525: GO 2439
2527: POP
2528: POP
// for i = 1 to 3 do
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 3
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2660
// begin vc_chassis := ar_half_tracked ;
2545: LD_ADDR_OWVAR 37
2549: PUSH
2550: LD_INT 14
2552: ST_TO_ADDR
// vc_engine := engine_solar ;
2553: LD_ADDR_OWVAR 39
2557: PUSH
2558: LD_INT 2
2560: ST_TO_ADDR
// vc_control := control_manual ;
2561: LD_ADDR_OWVAR 38
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2569: LD_ADDR_OWVAR 40
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 27
2579: PUSH
2580: LD_INT 26
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_VAR 0 2
2592: ARRAY
2593: ST_TO_ADDR
// un := CreateVehicle ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 45
2603: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 3
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2644: CALL_OW 44
2648: PPUSH
2649: LD_VAR 0 3
2653: PPUSH
2654: CALL_OW 52
// end ;
2658: GO 2542
2660: POP
2661: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: LD_INT 6
2670: PPUSH
2671: CALL_OW 380
// al_commander := CreateHuman ;
2675: LD_ADDR_EXP 5
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2685: LD_EXP 5
2689: PPUSH
2690: LD_INT 22
2692: PUSH
2693: LD_OWVAR 20
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PPUSH
2725: CALL_OW 52
// InitHc ( ) ;
2729: CALL_OW 19
// end ;
2733: LD_VAR 0 1
2737: RET
// export function ChangeSide ( ) ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: LD_INT 22
2749: PUSH
2750: LD_INT 5
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 69
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2779
// SetSide ( i , 8 ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_INT 8
2772: PPUSH
2773: CALL_OW 235
2777: GO 2762
2779: POP
2780: POP
// end ;
2781: LD_VAR 0 1
2785: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IFFALSE 3328
2802: GO 2804
2804: DISABLE
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
// begin enable ;
2813: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: LD_INT 22
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 2
2831: PUSH
2832: LD_INT 21
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 21
2844: PUSH
2845: LD_INT 2
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PPUSH
2861: CALL_OW 69
2865: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2866: LD_ADDR_VAR 0 5
2870: PUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 5
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 32
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: LD_INT 24
2896: PUSH
2897: LD_INT 1000
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 69
2917: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 54
2933: PUSH
2934: EMPTY
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 25
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PPUSH
2955: CALL_OW 72
2959: ST_TO_ADDR
// if not list then
2960: LD_VAR 0 2
2964: NOT
2965: IFFALSE 2969
// exit ;
2967: GO 3328
// for i in list do
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 2
2978: PUSH
2979: FOR_IN
2980: IFFALSE 3326
// begin if b then
2982: LD_VAR 0 5
2986: IFFALSE 3067
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_INT 25
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PPUSH
3008: CALL_OW 72
3012: PUSH
3013: FOR_IN
3014: IFFALSE 3065
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 314
3025: NOT
3026: IFFALSE 3043
3028: PUSH
3029: LD_VAR 0 1
3033: PPUSH
3034: CALL_OW 110
3038: PUSH
3039: LD_INT 7
3041: NONEQUAL
3042: AND
3043: IFFALSE 3063
// ComRepairBuilding ( j , b [ 1 ] ) ;
3045: LD_VAR 0 4
3049: PPUSH
3050: LD_VAR 0 5
3054: PUSH
3055: LD_INT 1
3057: ARRAY
3058: PPUSH
3059: CALL_OW 130
3063: GO 3013
3065: POP
3066: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3067: LD_VAR 0 1
3071: PPUSH
3072: CALL_OW 256
3076: PUSH
3077: LD_INT 500
3079: LESS
3080: IFFALSE 3098
3082: PUSH
3083: LD_VAR 0 1
3087: PPUSH
3088: CALL_OW 110
3092: PUSH
3093: LD_INT 7
3095: EQUAL
3096: NOT
3097: AND
3098: IFFALSE 3148
// begin ComMoveToArea ( i , guard_hill ) ;
3100: LD_VAR 0 1
3104: PPUSH
3105: LD_INT 11
3107: PPUSH
3108: CALL_OW 113
// SetTag ( i , 7 ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 247
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: IFFALSE 3148
// begin AddComExitVehicle ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3148: LD_VAR 0 1
3152: PPUSH
3153: CALL_OW 256
3157: PUSH
3158: LD_INT 1000
3160: EQUAL
3161: IFFALSE 3178
3163: PUSH
3164: LD_VAR 0 1
3168: PPUSH
3169: CALL_OW 110
3173: PUSH
3174: LD_INT 7
3176: EQUAL
3177: AND
3178: IFFALSE 3192
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 310
3190: NOT
3191: AND
3192: IFFALSE 3200
3194: PUSH
3195: LD_VAR 0 6
3199: AND
3200: IFFALSE 3228
// begin SetTag ( i , 0 ) ;
3202: LD_VAR 0 1
3206: PPUSH
3207: LD_INT 0
3209: PPUSH
3210: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3214: LD_VAR 0 6
3218: PPUSH
3219: LD_VAR 0 1
3223: PPUSH
3224: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL_OW 247
3237: PUSH
3238: LD_INT 2
3240: EQUAL
3241: IFFALSE 3258
3243: PUSH
3244: LD_VAR 0 1
3248: PPUSH
3249: CALL_OW 110
3253: PUSH
3254: LD_INT 7
3256: NONEQUAL
3257: AND
3258: IFFALSE 3272
3260: PUSH
3261: LD_VAR 0 1
3265: PPUSH
3266: CALL_OW 314
3270: NOT
3271: AND
3272: IFFALSE 3324
// if FilterAllUnits ( [ f_side , 7 ] ) then
3274: LD_INT 22
3276: PUSH
3277: LD_INT 7
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: PPUSH
3284: CALL_OW 69
3288: IFFALSE 3324
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3290: LD_VAR 0 1
3294: PPUSH
3295: LD_INT 22
3297: PUSH
3298: LD_INT 7
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: PPUSH
3310: LD_VAR 0 1
3314: PPUSH
3315: CALL_OW 74
3319: PPUSH
3320: CALL_OW 115
// end ;
3324: GO 2979
3326: POP
3327: POP
// end ; end_of_file
3328: PPOPN 6
3330: END
// export function Game ; var i , val , areas , wave ; begin
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
3336: PPUSH
3337: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3338: LD_ADDR_VAR 0 4
3342: PUSH
3343: LD_INT 1
3345: PUSH
3346: LD_INT 2
3348: PUSH
3349: LD_INT 3
3351: PUSH
3352: LD_INT 4
3354: PUSH
3355: LD_INT 5
3357: PUSH
3358: LD_INT 6
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3369: LD_ADDR_VAR 0 3
3373: PUSH
3374: LD_INT 5
3376: PUSH
3377: LD_INT 6
3379: PUSH
3380: LD_INT 7
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: LIST
3387: PUSH
3388: LD_OWVAR 67
3392: ARRAY
3393: ST_TO_ADDR
// wave := 1 ;
3394: LD_ADDR_VAR 0 5
3398: PUSH
3399: LD_INT 1
3401: ST_TO_ADDR
// while not game_over do
3402: LD_EXP 7
3406: NOT
3407: IFFALSE 3565
// begin repeat begin Wait ( 0 0$01 ) ;
3409: LD_INT 35
3411: PPUSH
3412: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3416: LD_ADDR_EXP 11
3420: PUSH
3421: LD_EXP 11
3425: PUSH
3426: LD_INT 35
3428: PLUS
3429: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3430: LD_INT 22
3432: PUSH
3433: LD_INT 7
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PPUSH
3440: CALL_OW 69
3444: PUSH
3445: LD_INT 10
3447: LESS
3448: IFTRUE 3460
3450: PUSH
3451: LD_EXP 11
3455: PUSH
3456: LD_INT 21000
3458: GREATEREQUAL
3459: OR
3460: IFFALSE 3409
// wave_time := 0 0$00 ;
3462: LD_ADDR_EXP 11
3466: PUSH
3467: LD_INT 0
3469: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3470: LD_INT 5250
3472: PPUSH
3473: CALL_OW 67
// if not ignore_wave then
3477: LD_EXP 15
3481: NOT
3482: IFFALSE 3555
// begin for i = 1 to areas do
3484: LD_ADDR_VAR 0 2
3488: PUSH
3489: DOUBLE
3490: LD_INT 1
3492: DEC
3493: ST_TO_ADDR
3494: LD_VAR 0 4
3498: PUSH
3499: FOR_TO
3500: IFFALSE 3537
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3502: LD_VAR 0 5
3506: PUSH
3507: LD_VAR 0 3
3511: PLUS
3512: PPUSH
3513: LD_VAR 0 4
3517: PUSH
3518: LD_VAR 0 2
3522: ARRAY
3523: PPUSH
3524: CALL 3570 0 2
// Wait ( 0 0$10 ) ;
3528: LD_INT 350
3530: PPUSH
3531: CALL_OW 67
// end ;
3535: GO 3499
3537: POP
3538: POP
// wave := wave + 1 ;
3539: LD_ADDR_VAR 0 5
3543: PUSH
3544: LD_VAR 0 5
3548: PUSH
3549: LD_INT 1
3551: PLUS
3552: ST_TO_ADDR
// end else
3553: GO 3563
// ignore_wave := false ;
3555: LD_ADDR_EXP 15
3559: PUSH
3560: LD_INT 0
3562: ST_TO_ADDR
// end ;
3563: GO 3402
// end ;
3565: LD_VAR 0 1
3569: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3570: LD_INT 0
3572: PPUSH
3573: PPUSH
3574: PPUSH
3575: PPUSH
3576: PPUSH
// uc_side := 7 ;
3577: LD_ADDR_OWVAR 20
3581: PUSH
3582: LD_INT 7
3584: ST_TO_ADDR
// uc_nation := 2 ;
3585: LD_ADDR_OWVAR 21
3589: PUSH
3590: LD_INT 2
3592: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3593: LD_ADDR_VAR 0 5
3597: PUSH
3598: LD_INT 10
3600: PUSH
3601: LD_OWVAR 1
3605: PUSH
3606: LD_INT 10500
3608: DIV
3609: PLUS
3610: ST_TO_ADDR
// if v > 25 then
3611: LD_VAR 0 5
3615: PUSH
3616: LD_INT 25
3618: GREATER
3619: IFFALSE 3629
// v := 25 ;
3621: LD_ADDR_VAR 0 5
3625: PUSH
3626: LD_INT 25
3628: ST_TO_ADDR
// InitHc ( ) ;
3629: CALL_OW 19
// hc_gallery :=  ;
3633: LD_ADDR_OWVAR 33
3637: PUSH
3638: LD_STRING 
3640: ST_TO_ADDR
// hc_importance := 0 ;
3641: LD_ADDR_OWVAR 32
3645: PUSH
3646: LD_INT 0
3648: ST_TO_ADDR
// hc_name :=  ;
3649: LD_ADDR_OWVAR 26
3653: PUSH
3654: LD_STRING 
3656: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3657: LD_ADDR_OWVAR 29
3661: PUSH
3662: LD_VAR 0 5
3666: PUSH
3667: LD_VAR 0 5
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: ST_TO_ADDR
// if val > 35 then
3676: LD_VAR 0 1
3680: PUSH
3681: LD_INT 35
3683: GREATER
3684: IFFALSE 3694
// val := 35 ;
3686: LD_ADDR_VAR 0 1
3690: PUSH
3691: LD_INT 35
3693: ST_TO_ADDR
// for i = 1 to val do
3694: LD_ADDR_VAR 0 4
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_VAR 0 1
3708: PUSH
3709: FOR_TO
3710: IFFALSE 3921
// begin if i mod 9 = 0 then
3712: LD_VAR 0 4
3716: PUSH
3717: LD_INT 9
3719: MOD
3720: PUSH
3721: LD_INT 0
3723: EQUAL
3724: IFFALSE 3736
// class := class_apeman_kamikaze else
3726: LD_ADDR_VAR 0 7
3730: PUSH
3731: LD_INT 17
3733: ST_TO_ADDR
3734: GO 3768
// if i mod 4 = 0 then
3736: LD_VAR 0 4
3740: PUSH
3741: LD_INT 4
3743: MOD
3744: PUSH
3745: LD_INT 0
3747: EQUAL
3748: IFFALSE 3760
// class := class_apeman_soldier else
3750: LD_ADDR_VAR 0 7
3754: PUSH
3755: LD_INT 15
3757: ST_TO_ADDR
3758: GO 3768
// class := class_apeman ;
3760: LD_ADDR_VAR 0 7
3764: PUSH
3765: LD_INT 12
3767: ST_TO_ADDR
// if i mod 6 = 0 then
3768: LD_VAR 0 4
3772: PUSH
3773: LD_INT 6
3775: MOD
3776: PUSH
3777: LD_INT 0
3779: EQUAL
3780: IFFALSE 3853
// begin vc_chassis := ar_half_tracked ;
3782: LD_ADDR_OWVAR 37
3786: PUSH
3787: LD_INT 14
3789: ST_TO_ADDR
// vc_control := control_apeman ;
3790: LD_ADDR_OWVAR 38
3794: PUSH
3795: LD_INT 5
3797: ST_TO_ADDR
// vc_engine := engine_siberite ;
3798: LD_ADDR_OWVAR 39
3802: PUSH
3803: LD_INT 3
3805: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3806: LD_ADDR_OWVAR 40
3810: PUSH
3811: LD_INT 28
3813: PUSH
3814: LD_INT 27
3816: PUSH
3817: LD_INT 29
3819: PUSH
3820: LD_INT 91
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: PUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 4
3834: PPUSH
3835: CALL_OW 12
3839: ARRAY
3840: ST_TO_ADDR
// un := CreateVehicle ;
3841: LD_ADDR_VAR 0 6
3845: PUSH
3846: CALL_OW 45
3850: ST_TO_ADDR
// end else
3851: GO 3878
// begin PrepareHuman ( sex_male , class , 10 ) ;
3853: LD_INT 1
3855: PPUSH
3856: LD_VAR 0 7
3860: PPUSH
3861: LD_INT 10
3863: PPUSH
3864: CALL_OW 380
// un := CreateHuman ;
3868: LD_ADDR_VAR 0 6
3872: PUSH
3873: CALL_OW 44
3877: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3878: LD_VAR 0 6
3882: PPUSH
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3895: LD_VAR 0 6
3899: PPUSH
3900: CALL_OW 250
3904: PPUSH
3905: LD_VAR 0 6
3909: PPUSH
3910: CALL_OW 251
3914: PPUSH
3915: CALL_OW 494
// end ;
3919: GO 3709
3921: POP
3922: POP
// end ;
3923: LD_VAR 0 3
3927: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3928: LD_EXP 6
3932: IFFALSE 3941
3934: PUSH
3935: LD_EXP 7
3939: NOT
3940: AND
3941: IFFALSE 4060
3943: GO 3945
3945: DISABLE
3946: LD_INT 0
3948: PPUSH
3949: PPUSH
3950: PPUSH
// begin enable ;
3951: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_INT 22
3959: PUSH
3960: LD_INT 7
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PPUSH
3967: CALL_OW 69
3971: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3972: LD_ADDR_VAR 0 3
3976: PUSH
3977: LD_INT 81
3979: PUSH
3980: LD_INT 7
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: PPUSH
3987: CALL_OW 69
3991: ST_TO_ADDR
// if not list then
3992: LD_VAR 0 2
3996: NOT
3997: IFFALSE 4001
// exit ;
3999: GO 4060
// for i in list do
4001: LD_ADDR_VAR 0 1
4005: PUSH
4006: LD_VAR 0 2
4010: PUSH
4011: FOR_IN
4012: IFFALSE 4058
// begin if enemy then
4014: LD_VAR 0 3
4018: IFFALSE 4056
// if not HasTask ( i ) then
4020: LD_VAR 0 1
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4056
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4032: LD_VAR 0 1
4036: PPUSH
4037: LD_VAR 0 3
4041: PPUSH
4042: LD_VAR 0 1
4046: PPUSH
4047: CALL_OW 74
4051: PPUSH
4052: CALL_OW 115
// end ;
4056: GO 4011
4058: POP
4059: POP
// end ; end_of_file
4060: PPOPN 3
4062: END
// export function Action ; begin
4063: LD_INT 0
4065: PPUSH
// InGameOn ;
4066: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4070: LD_INT 23
4072: PPUSH
4073: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4077: LD_EXP 1
4081: PPUSH
4082: LD_STRING DL-1
4084: PPUSH
4085: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4089: LD_EXP 2
4093: PPUSH
4094: LD_STRING DA-1
4096: PPUSH
4097: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4101: LD_EXP 3
4105: PPUSH
4106: LD_STRING DA-2
4108: PPUSH
4109: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4113: LD_EXP 1
4117: PPUSH
4118: LD_STRING DL-2
4120: PPUSH
4121: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4125: LD_EXP 3
4129: PPUSH
4130: LD_STRING DA-3
4132: PPUSH
4133: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4137: LD_EXP 1
4141: PPUSH
4142: LD_STRING DL-3
4144: PPUSH
4145: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4149: LD_EXP 2
4153: PPUSH
4154: LD_STRING DA-4
4156: PPUSH
4157: CALL_OW 88
// if not dialogue_skipped then
4161: LD_OWVAR 59
4165: NOT
4166: IFFALSE 4251
// begin Wait ( 0 0$01 ) ;
4168: LD_INT 35
4170: PPUSH
4171: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4175: LD_EXP 2
4179: PUSH
4180: LD_EXP 3
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PPUSH
4189: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4193: LD_EXP 2
4197: PPUSH
4198: LD_INT 107
4200: PPUSH
4201: LD_INT 53
4203: PPUSH
4204: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4208: LD_EXP 3
4212: PPUSH
4213: LD_INT 108
4215: PPUSH
4216: LD_INT 53
4218: PPUSH
4219: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4223: LD_EXP 2
4227: PPUSH
4228: LD_EXP 4
4232: PPUSH
4233: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4237: LD_EXP 3
4241: PPUSH
4242: LD_EXP 4
4246: PPUSH
4247: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4251: LD_INT 35
4253: PPUSH
4254: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4258: LD_EXP 2
4262: PPUSH
4263: LD_INT 107
4265: PPUSH
4266: LD_INT 53
4268: PPUSH
4269: CALL_OW 307
4273: IFTRUE 4281
4275: PUSH
4276: LD_OWVAR 59
4280: OR
4281: IFFALSE 4251
// if not dialogue_skipped then
4283: LD_OWVAR 59
4287: NOT
4288: IFFALSE 4389
// begin ComTurnUnit ( potter , l1 ) ;
4290: LD_EXP 4
4294: PPUSH
4295: LD_EXP 2
4299: PPUSH
4300: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4304: LD_INT 10
4306: PPUSH
4307: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4311: LD_EXP 4
4315: PPUSH
4316: LD_INT 108
4318: PPUSH
4319: LD_INT 1
4321: PPUSH
4322: LD_INT 0
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 483
// Wait ( 0 0$01 ) ;
4332: LD_INT 35
4334: PPUSH
4335: CALL_OW 67
// RemoveUnit ( potter ) ;
4339: LD_EXP 4
4343: PPUSH
4344: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4348: LD_EXP 2
4352: PPUSH
4353: LD_STRING DA-5
4355: PPUSH
4356: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4360: LD_EXP 3
4364: PPUSH
4365: LD_STRING DA-6
4367: PPUSH
4368: CALL_OW 88
// Wait ( 0 0$02 ) ;
4372: LD_INT 70
4374: PPUSH
4375: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4379: LD_INT 25
4381: PPUSH
4382: LD_INT 19
4384: PPUSH
4385: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4389: LD_INT 20
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL 3570 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4399: LD_EXP 5
4403: PPUSH
4404: LD_STRING DLa-1
4406: PPUSH
4407: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4411: LD_EXP 1
4415: PPUSH
4416: LD_STRING DL-5
4418: PPUSH
4419: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4423: LD_INT 23
4425: PPUSH
4426: CALL_OW 87
// InGameOff ;
4430: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4434: LD_STRING C1
4436: PPUSH
4437: CALL_OW 337
// alert := true ;
4441: LD_ADDR_EXP 6
4445: PUSH
4446: LD_INT 1
4448: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4449: LD_EXP 5
4453: PPUSH
4454: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4458: LD_EXP 5
4462: PPUSH
4463: LD_INT 11
4465: PPUSH
4466: CALL_OW 173
// Wait ( 0 0$30 ) ;
4470: LD_INT 1050
4472: PPUSH
4473: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4477: LD_INT 10
4479: PPUSH
4480: LD_INT 4
4482: PPUSH
4483: CALL 3570 0 2
// Wait ( 0 0$35 ) ;
4487: LD_INT 1225
4489: PPUSH
4490: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4494: LD_INT 10
4496: PPUSH
4497: LD_INT 5
4499: PPUSH
4500: CALL 3570 0 2
// Wait ( 0 0$03 ) ;
4504: LD_INT 105
4506: PPUSH
4507: CALL_OW 67
// Game ;
4511: CALL 3331 0 0
// end ;
4515: LD_VAR 0 1
4519: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4520: LD_INT 22
4522: PUSH
4523: LD_INT 7
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: PPUSH
4530: CALL_OW 69
4534: PUSH
4535: LD_INT 0
4537: EQUAL
4538: IFFALSE 4550
4540: PUSH
4541: LD_EXP 10
4545: PUSH
4546: LD_INT 1500
4548: GREATEREQUAL
4549: AND
4550: IFFALSE 4778
4552: GO 4554
4554: DISABLE
4555: LD_INT 0
4557: PPUSH
4558: PPUSH
// begin DialogueOn ;
4559: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4563: LD_EXP 12
4567: PPUSH
4568: LD_STRING DVr-1
4570: PPUSH
4571: CALL_OW 94
// DialogueOff ;
4575: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4579: LD_STRING QBonusInfo
4581: PPUSH
4582: CALL_OW 97
4586: PUSH
4587: LD_INT 1
4589: DOUBLE
4590: EQUAL
4591: IFTRUE 4595
4593: GO 4606
4595: POP
// bonus_active := true ; end ;
4596: LD_ADDR_EXP 13
4600: PUSH
4601: LD_INT 1
4603: ST_TO_ADDR
4604: GO 4607
4606: POP
// bonus_num := 4 ;
4607: LD_ADDR_EXP 14
4611: PUSH
4612: LD_INT 4
4614: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ;
4615: LD_OWVAR 2
4619: PPUSH
4620: LD_INT 12
4622: PPUSH
4623: LD_INT 2
4625: PPUSH
4626: LD_INT 23
4628: PPUSH
4629: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4633: LD_ADDR_VAR 0 1
4637: PUSH
4638: LD_INT 500
4640: PUSH
4641: LD_INT 3500
4643: PUSH
4644: LD_INT 5750
4646: PUSH
4647: LD_INT 10000
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4656: LD_INT 10500
4658: PUSH
4659: LD_INT 12600
4661: PUSH
4662: LD_INT 14700
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: LIST
4669: PUSH
4670: LD_OWVAR 67
4674: ARRAY
4675: PPUSH
4676: CALL_OW 67
// for i = 1 to tmp do
4680: LD_ADDR_VAR 0 2
4684: PUSH
4685: DOUBLE
4686: LD_INT 1
4688: DEC
4689: ST_TO_ADDR
4690: LD_VAR 0 1
4694: PUSH
4695: FOR_TO
4696: IFFALSE 4728
// if points >= tmp [ i ] then
4698: LD_EXP 10
4702: PUSH
4703: LD_VAR 0 1
4707: PUSH
4708: LD_VAR 0 2
4712: ARRAY
4713: GREATEREQUAL
4714: IFFALSE 4726
// bonus_num := i ;
4716: LD_ADDR_EXP 14
4720: PUSH
4721: LD_VAR 0 2
4725: ST_TO_ADDR
4726: GO 4695
4728: POP
4729: POP
// case Query ( QBonusInfo ) of 1 :
4730: LD_STRING QBonusInfo
4732: PPUSH
4733: CALL_OW 97
4737: PUSH
4738: LD_INT 1
4740: DOUBLE
4741: EQUAL
4742: IFTRUE 4746
4744: GO 4767
4746: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4747: LD_OWVAR 2
4751: PPUSH
4752: LD_INT 12
4754: PPUSH
4755: LD_INT 2
4757: PPUSH
4758: LD_INT 23
4760: PPUSH
4761: CALL_OW 468
4765: GO 4768
4767: POP
// until points >= 15000 ;
4768: LD_EXP 10
4772: PUSH
4773: LD_INT 15000
4775: GREATEREQUAL
4776: IFFALSE 4656
// end ;
4778: PPOPN 2
4780: END
// export function Win ; begin
4781: LD_INT 0
4783: PPUSH
// AddMedal ( med , 1 ) ;
4784: LD_STRING med
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: CALL_OW 101
// AddMedal ( med , 1 ) ;
4794: LD_STRING med
4796: PPUSH
4797: LD_INT 1
4799: PPUSH
4800: CALL_OW 101
// AddMedal ( med , 1 ) ;
4804: LD_STRING med
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 101
// GiveMedals ( MAIN ) ;
4814: LD_STRING MAIN
4816: PPUSH
4817: CALL_OW 102
// YouWin ;
4821: CALL_OW 103
// end ; end_of_file
4825: LD_VAR 0 1
4829: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4830: LD_INT 0
4832: PPUSH
4833: PPUSH
// dir := GetDir ( b ) ;
4834: LD_ADDR_VAR 0 4
4838: PUSH
4839: LD_VAR 0 2
4843: PPUSH
4844: CALL_OW 254
4848: ST_TO_ADDR
// if dir < 3 then
4849: LD_VAR 0 4
4853: PUSH
4854: LD_INT 3
4856: LESS
4857: IFFALSE 4875
// dir := dir + 3 else
4859: LD_ADDR_VAR 0 4
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: LD_INT 3
4871: PLUS
4872: ST_TO_ADDR
4873: GO 4889
// dir := dir - 3 ;
4875: LD_ADDR_VAR 0 4
4879: PUSH
4880: LD_VAR 0 4
4884: PUSH
4885: LD_INT 3
4887: MINUS
4888: ST_TO_ADDR
// SetDir ( un , dir ) ;
4889: LD_VAR 0 1
4893: PPUSH
4894: LD_VAR 0 4
4898: PPUSH
4899: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4903: LD_VAR 0 1
4907: PPUSH
4908: LD_VAR 0 2
4912: PPUSH
4913: CALL_OW 52
// end ;
4917: LD_VAR 0 3
4921: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
4926: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4927: LD_ADDR_VAR 0 7
4931: PUSH
4932: LD_VAR 0 1
4936: PUSH
4937: LD_VAR 0 2
4941: ARRAY
4942: PPUSH
4943: LD_VAR 0 3
4947: PPUSH
4948: LD_VAR 0 4
4952: PPUSH
4953: CALL_OW 1
4957: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4958: LD_ADDR_VAR 0 1
4962: PUSH
4963: LD_VAR 0 1
4967: PPUSH
4968: LD_VAR 0 2
4972: PPUSH
4973: LD_VAR 0 7
4977: PPUSH
4978: CALL_OW 1
4982: ST_TO_ADDR
// result := tab ;
4983: LD_ADDR_VAR 0 5
4987: PUSH
4988: LD_VAR 0 1
4992: ST_TO_ADDR
// end ;
4993: LD_VAR 0 5
4997: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4998: LD_INT 0
5000: PPUSH
5001: PPUSH
5002: PPUSH
// if not GetControl ( veh ) = control_manual then
5003: LD_VAR 0 1
5007: PPUSH
5008: CALL_OW 263
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: NOT
5017: IFFALSE 5029
// result := false else
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 0
5026: ST_TO_ADDR
5027: GO 5174
// if veh in FilterAllUnits ( [ f_empty ] ) then
5029: LD_VAR 0 1
5033: PUSH
5034: LD_INT 58
5036: PUSH
5037: EMPTY
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: IN
5045: IFFALSE 5057
// result := false else
5047: LD_ADDR_VAR 0 2
5051: PUSH
5052: LD_INT 0
5054: ST_TO_ADDR
5055: GO 5174
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5057: LD_ADDR_VAR 0 4
5061: PUSH
5062: LD_INT 22
5064: PUSH
5065: LD_VAR 0 1
5069: PPUSH
5070: CALL_OW 255
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 55
5081: PUSH
5082: EMPTY
5083: LIST
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: ST_TO_ADDR
// if not filter then
5094: LD_VAR 0 4
5098: NOT
5099: IFFALSE 5111
// result := false else
5101: LD_ADDR_VAR 0 2
5105: PUSH
5106: LD_INT 0
5108: ST_TO_ADDR
5109: GO 5174
// for i = 1 to filter do
5111: LD_ADDR_VAR 0 3
5115: PUSH
5116: DOUBLE
5117: LD_INT 1
5119: DEC
5120: ST_TO_ADDR
5121: LD_VAR 0 4
5125: PUSH
5126: FOR_TO
5127: IFFALSE 5172
// if IsDriver ( filter [ i ] ) = veh then
5129: LD_VAR 0 4
5133: PUSH
5134: LD_VAR 0 3
5138: ARRAY
5139: PPUSH
5140: CALL 65095 0 1
5144: PUSH
5145: LD_VAR 0 1
5149: EQUAL
5150: IFFALSE 5170
// begin result := filter [ i ] ;
5152: LD_ADDR_VAR 0 2
5156: PUSH
5157: LD_VAR 0 4
5161: PUSH
5162: LD_VAR 0 3
5166: ARRAY
5167: ST_TO_ADDR
// break ;
5168: GO 5172
// end ;
5170: GO 5126
5172: POP
5173: POP
// end ; end ; end_of_file
5174: LD_VAR 0 2
5178: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5179: LD_VAR 0 1
5183: PPUSH
5184: CALL 23156 0 1
// if un = legion_commander then
5188: LD_VAR 0 1
5192: PUSH
5193: LD_EXP 1
5197: EQUAL
5198: IFFALSE 5207
// YouLost ( commanderDied ) ;
5200: LD_STRING commanderDied
5202: PPUSH
5203: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5207: LD_VAR 0 1
5211: PUSH
5212: LD_EXP 1
5216: PUSH
5217: LD_INT 23
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: IN
5224: IFFALSE 5234
// game_over := true ;
5226: LD_ADDR_EXP 7
5230: PUSH
5231: LD_INT 1
5233: ST_TO_ADDR
// if un = al_commander then
5234: LD_VAR 0 1
5238: PUSH
5239: LD_EXP 5
5243: EQUAL
5244: IFFALSE 5250
// ChangeSide ( ) ;
5246: CALL 2738 0 0
// if GetSide ( un ) = 7 then
5250: LD_VAR 0 1
5254: PPUSH
5255: CALL_OW 255
5259: PUSH
5260: LD_INT 7
5262: EQUAL
5263: IFFALSE 5381
// begin if GetClass ( un ) = class_apeman then
5265: LD_VAR 0 1
5269: PPUSH
5270: CALL_OW 257
5274: PUSH
5275: LD_INT 12
5277: EQUAL
5278: IFFALSE 5294
// points := points + 6 ;
5280: LD_ADDR_EXP 10
5284: PUSH
5285: LD_EXP 10
5289: PUSH
5290: LD_INT 6
5292: PLUS
5293: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5294: LD_VAR 0 1
5298: PPUSH
5299: CALL_OW 257
5303: PUSH
5304: LD_INT 17
5306: EQUAL
5307: IFFALSE 5323
// points := points + 11 ;
5309: LD_ADDR_EXP 10
5313: PUSH
5314: LD_EXP 10
5318: PUSH
5319: LD_INT 11
5321: PLUS
5322: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5323: LD_VAR 0 1
5327: PPUSH
5328: CALL_OW 257
5332: PUSH
5333: LD_INT 15
5335: EQUAL
5336: IFFALSE 5352
// points := points + 14 ;
5338: LD_ADDR_EXP 10
5342: PUSH
5343: LD_EXP 10
5347: PUSH
5348: LD_INT 14
5350: PLUS
5351: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5352: LD_VAR 0 1
5356: PPUSH
5357: CALL_OW 247
5361: PUSH
5362: LD_INT 2
5364: EQUAL
5365: IFFALSE 5381
// points := points + 50 ;
5367: LD_ADDR_EXP 10
5371: PUSH
5372: LD_EXP 10
5376: PUSH
5377: LD_INT 50
5379: PLUS
5380: ST_TO_ADDR
// end ; end ;
5381: PPOPN 1
5383: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5384: LD_EXP 5
5388: PPUSH
5389: CALL_OW 256
5393: PUSH
5394: LD_INT 1000
5396: LESS
5397: IFFALSE 5429
5399: GO 5401
5401: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5402: LD_EXP 5
5406: PPUSH
5407: CALL_OW 504
5411: PPUSH
5412: CALL_OW 255
5416: PUSH
5417: LD_INT 8
5419: EQUAL
5420: IFFALSE 5429
// YouLost ( FriendlyFire ) ;
5422: LD_STRING FriendlyFire
5424: PPUSH
5425: CALL_OW 104
5429: END
// on DialogueSkipped ( value ) do var i ;
5430: LD_INT 0
5432: PPUSH
// begin RemoveUnit ( potter ) ;
5433: LD_EXP 4
5437: PPUSH
5438: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5442: LD_EXP 2
5446: PUSH
5447: LD_EXP 3
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PPUSH
5456: CALL_OW 122
// Wait ( 1 ) ;
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5467: LD_EXP 2
5471: PPUSH
5472: LD_INT 107
5474: PPUSH
5475: LD_INT 53
5477: PPUSH
5478: LD_INT 0
5480: PPUSH
5481: LD_INT 0
5483: PPUSH
5484: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5488: LD_EXP 3
5492: PPUSH
5493: LD_INT 108
5495: PPUSH
5496: LD_INT 53
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: LD_INT 0
5504: PPUSH
5505: CALL_OW 483
// Wait ( 1 ) ;
5509: LD_INT 1
5511: PPUSH
5512: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5516: LD_EXP 2
5520: PUSH
5521: LD_EXP 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PPUSH
5530: LD_INT 108
5532: PPUSH
5533: LD_INT 1
5535: PPUSH
5536: CALL_OW 118
// end ;
5540: PPOPN 2
5542: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
5547: PPUSH
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5553: LD_ADDR_VAR 0 10
5557: PUSH
5558: LD_INT 2
5560: PPUSH
5561: CALL_OW 469
5565: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5566: LD_ADDR_VAR 0 12
5570: PUSH
5571: LD_INT 22
5573: PUSH
5574: LD_OWVAR 2
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: LD_INT 2
5585: PUSH
5586: LD_INT 30
5588: PUSH
5589: LD_INT 8
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PUSH
5596: LD_INT 30
5598: PUSH
5599: LD_INT 11
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PPUSH
5615: CALL_OW 69
5619: PPUSH
5620: LD_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: LD_VAR 0 10
5633: PUSH
5634: LD_INT 2
5636: ARRAY
5637: PPUSH
5638: CALL_OW 73
5642: ST_TO_ADDR
// if icon = art_exp_left then
5643: LD_VAR 0 2
5647: PUSH
5648: LD_INT 1
5650: EQUAL
5651: IFFALSE 5706
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5653: LD_VAR 0 12
5657: PPUSH
5658: LD_EXP 9
5662: PPUSH
5663: LD_INT 1
5665: PPUSH
5666: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5670: LD_VAR 0 12
5674: PPUSH
5675: LD_EXP 17
5679: PPUSH
5680: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5684: LD_OWVAR 2
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: LD_INT 0
5694: PPUSH
5695: LD_VAR 0 12
5699: PPUSH
5700: CALL_OW 468
// end else
5704: GO 6487
// begin DialogueOn ;
5706: CALL_OW 6
// uc_side := 8 ;
5710: LD_ADDR_OWVAR 20
5714: PUSH
5715: LD_INT 8
5717: ST_TO_ADDR
// uc_nation := 2 ;
5718: LD_ADDR_OWVAR 21
5722: PUSH
5723: LD_INT 2
5725: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5726: LD_ADDR_VAR 0 5
5730: PUSH
5731: LD_STRING QBonus
5733: PUSH
5734: LD_EXP 14
5738: STR
5739: ST_TO_ADDR
// off := true ;
5740: LD_ADDR_VAR 0 6
5744: PUSH
5745: LD_INT 1
5747: ST_TO_ADDR
// units := [ ] ;
5748: LD_ADDR_VAR 0 7
5752: PUSH
5753: EMPTY
5754: ST_TO_ADDR
// crates := 0 ;
5755: LD_ADDR_VAR 0 8
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5763: LD_EXP 12
5767: PPUSH
5768: LD_STRING DVr-2
5770: PPUSH
5771: CALL_OW 94
// wait ( 0 0$1 ) ;
5775: LD_INT 35
5777: PPUSH
5778: CALL_OW 67
// case Query ( bonus ) of 1 :
5782: LD_VAR 0 5
5786: PPUSH
5787: CALL_OW 97
5791: PUSH
5792: LD_INT 1
5794: DOUBLE
5795: EQUAL
5796: IFTRUE 5800
5798: GO 5885
5800: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5801: LD_ADDR_VAR 0 9
5805: PUSH
5806: LD_INT 1
5808: PUSH
5809: LD_INT 2
5811: PUSH
5812: LD_INT 5
5814: PUSH
5815: LD_INT 8
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_EXP 14
5828: ARRAY
5829: ST_TO_ADDR
// for i = 1 to tmp do
5830: LD_ADDR_VAR 0 11
5834: PUSH
5835: DOUBLE
5836: LD_INT 1
5838: DEC
5839: ST_TO_ADDR
5840: LD_VAR 0 9
5844: PUSH
5845: FOR_TO
5846: IFFALSE 5881
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5848: LD_INT 0
5850: PPUSH
5851: LD_INT 15
5853: PPUSH
5854: LD_VAR 0 9
5858: PPUSH
5859: CALL_OW 380
// units := units ^ CreateHuman ;
5863: LD_ADDR_VAR 0 7
5867: PUSH
5868: LD_VAR 0 7
5872: PUSH
5873: CALL_OW 44
5877: ADD
5878: ST_TO_ADDR
// end ;
5879: GO 5845
5881: POP
5882: POP
// end ; 2 :
5883: GO 6293
5885: LD_INT 2
5887: DOUBLE
5888: EQUAL
5889: IFTRUE 5893
5891: GO 5925
5893: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5894: LD_ADDR_VAR 0 8
5898: PUSH
5899: LD_INT 100
5901: PUSH
5902: LD_INT 150
5904: PUSH
5905: LD_INT 350
5907: PUSH
5908: LD_INT 500
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_EXP 14
5921: ARRAY
5922: ST_TO_ADDR
// end ; 3 :
5923: GO 6293
5925: LD_INT 3
5927: DOUBLE
5928: EQUAL
5929: IFTRUE 5933
5931: GO 6273
5933: POP
// begin if bonus_num = 1 then
5934: LD_EXP 14
5938: PUSH
5939: LD_INT 1
5941: EQUAL
5942: IFFALSE 5952
// ignore_wave := true ;
5944: LD_ADDR_EXP 15
5948: PUSH
5949: LD_INT 1
5951: ST_TO_ADDR
// if bonus_num = 2 then
5952: LD_EXP 14
5956: PUSH
5957: LD_INT 2
5959: EQUAL
5960: IFFALSE 6080
// begin for i = 1 to 2 do
5962: LD_ADDR_VAR 0 11
5966: PUSH
5967: DOUBLE
5968: LD_INT 1
5970: DEC
5971: ST_TO_ADDR
5972: LD_INT 2
5974: PUSH
5975: FOR_TO
5976: IFFALSE 6078
// begin uc_nation := nation_arabian ;
5978: LD_ADDR_OWVAR 21
5982: PUSH
5983: LD_INT 2
5985: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5986: LD_ADDR_OWVAR 37
5990: PUSH
5991: LD_INT 14
5993: ST_TO_ADDR
// vc_engine := engine_siberite ;
5994: LD_ADDR_OWVAR 39
5998: PUSH
5999: LD_INT 3
6001: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6002: LD_ADDR_OWVAR 38
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: LD_INT 5
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 1
6019: PPUSH
6020: LD_INT 2
6022: PPUSH
6023: CALL_OW 12
6027: ARRAY
6028: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6029: LD_ADDR_OWVAR 40
6033: PUSH
6034: LD_INT 28
6036: PUSH
6037: LD_INT 27
6039: PUSH
6040: LD_INT 25
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 1
6050: PPUSH
6051: LD_INT 3
6053: PPUSH
6054: CALL_OW 12
6058: ARRAY
6059: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6060: LD_ADDR_VAR 0 7
6064: PUSH
6065: LD_VAR 0 7
6069: PUSH
6070: CALL_OW 45
6074: ADD
6075: ST_TO_ADDR
// end ;
6076: GO 5975
6078: POP
6079: POP
// end ; if bonus_num = 3 then
6080: LD_EXP 14
6084: PUSH
6085: LD_INT 3
6087: EQUAL
6088: IFFALSE 6212
// begin for i = 1 to 4 do
6090: LD_ADDR_VAR 0 11
6094: PUSH
6095: DOUBLE
6096: LD_INT 1
6098: DEC
6099: ST_TO_ADDR
6100: LD_INT 4
6102: PUSH
6103: FOR_TO
6104: IFFALSE 6210
// begin uc_nation := nation_arabian ;
6106: LD_ADDR_OWVAR 21
6110: PUSH
6111: LD_INT 2
6113: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6114: LD_ADDR_OWVAR 37
6118: PUSH
6119: LD_INT 14
6121: ST_TO_ADDR
// vc_engine := engine_siberite ;
6122: LD_ADDR_OWVAR 39
6126: PUSH
6127: LD_INT 3
6129: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6130: LD_ADDR_OWVAR 38
6134: PUSH
6135: LD_INT 2
6137: PUSH
6138: LD_INT 5
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 1
6147: PPUSH
6148: LD_INT 2
6150: PPUSH
6151: CALL_OW 12
6155: ARRAY
6156: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6157: LD_ADDR_OWVAR 40
6161: PUSH
6162: LD_INT 28
6164: PUSH
6165: LD_INT 27
6167: PUSH
6168: LD_INT 28
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 1
6182: PPUSH
6183: LD_INT 4
6185: PPUSH
6186: CALL_OW 12
6190: ARRAY
6191: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6192: LD_ADDR_VAR 0 7
6196: PUSH
6197: LD_VAR 0 7
6201: PUSH
6202: CALL_OW 45
6206: ADD
6207: ST_TO_ADDR
// end ;
6208: GO 6103
6210: POP
6211: POP
// end ; if bonus_num = 4 then
6212: LD_EXP 14
6216: PUSH
6217: LD_INT 4
6219: EQUAL
6220: IFFALSE 6271
// for i = 1 to 3 do
6222: LD_ADDR_VAR 0 11
6226: PUSH
6227: DOUBLE
6228: LD_INT 1
6230: DEC
6231: ST_TO_ADDR
6232: LD_INT 3
6234: PUSH
6235: FOR_TO
6236: IFFALSE 6269
// begin PrepareHuman ( false , 3 , 8 ) ;
6238: LD_INT 0
6240: PPUSH
6241: LD_INT 3
6243: PPUSH
6244: LD_INT 8
6246: PPUSH
6247: CALL_OW 380
// units := units ^ CreateHuman ;
6251: LD_ADDR_VAR 0 7
6255: PUSH
6256: LD_VAR 0 7
6260: PUSH
6261: CALL_OW 44
6265: ADD
6266: ST_TO_ADDR
// end ;
6267: GO 6235
6269: POP
6270: POP
// end ; 4 :
6271: GO 6293
6273: LD_INT 4
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6292
6281: POP
// off := false ; end ;
6282: LD_ADDR_VAR 0 6
6286: PUSH
6287: LD_INT 0
6289: ST_TO_ADDR
6290: GO 6293
6292: POP
// DialogueOff ;
6293: CALL_OW 7
// if not off then
6297: LD_VAR 0 6
6301: NOT
6302: IFFALSE 6308
// exit else
6304: GO 6487
6306: GO 6361
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6308: LD_OWVAR 2
6312: PPUSH
6313: LD_INT 12
6315: PPUSH
6316: LD_INT 0
6318: PPUSH
6319: LD_INT 23
6321: PPUSH
6322: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6326: LD_EXP 12
6330: PPUSH
6331: LD_STRING DVr-3
6333: PUSH
6334: LD_STRING DVr-3a
6336: PUSH
6337: LD_STRING DVr-3b
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 1
6347: PPUSH
6348: LD_INT 3
6350: PPUSH
6351: CALL_OW 12
6355: ARRAY
6356: PPUSH
6357: CALL_OW 94
// end ; if units then
6361: LD_VAR 0 7
6365: IFFALSE 6429
// for i in units do
6367: LD_ADDR_VAR 0 11
6371: PUSH
6372: LD_VAR 0 7
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6427
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6380: LD_VAR 0 11
6384: PPUSH
6385: LD_INT 92
6387: PPUSH
6388: LD_INT 49
6390: PPUSH
6391: LD_INT 20
6393: PPUSH
6394: LD_INT 0
6396: PPUSH
6397: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6401: LD_VAR 0 11
6405: PPUSH
6406: CALL_OW 250
6410: PPUSH
6411: LD_VAR 0 11
6415: PPUSH
6416: CALL_OW 251
6420: PPUSH
6421: CALL_OW 494
// end ;
6425: GO 6377
6427: POP
6428: POP
// if crates then
6429: LD_VAR 0 8
6433: IFFALSE 6487
// for i = 1 to ( crates div 50 ) do
6435: LD_ADDR_VAR 0 11
6439: PUSH
6440: DOUBLE
6441: LD_INT 1
6443: DEC
6444: ST_TO_ADDR
6445: LD_VAR 0 8
6449: PUSH
6450: LD_INT 50
6452: DIV
6453: PUSH
6454: FOR_TO
6455: IFFALSE 6485
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6457: LD_INT 5
6459: PPUSH
6460: LD_INT 92
6462: PPUSH
6463: LD_INT 49
6465: PPUSH
6466: LD_INT 30
6468: PPUSH
6469: LD_INT 1
6471: PPUSH
6472: CALL_OW 56
// wait ( 0 0$02 ) ;
6476: LD_INT 70
6478: PPUSH
6479: CALL_OW 67
// end ;
6483: GO 6454
6485: POP
6486: POP
// end ; end ;
6487: PPOPN 12
6489: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: LD_VAR 0 2
6499: PPUSH
6500: LD_VAR 0 3
6504: PPUSH
6505: CALL 23190 0 3
// end ;
6509: PPOPN 3
6511: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL 23198 0 1
// end ;
6521: PPOPN 1
6523: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6524: LD_VAR 0 1
6528: PPUSH
6529: CALL_OW 255
6533: PUSH
6534: LD_OWVAR 2
6538: EQUAL
6539: IFFALSE 6549
// player_res_art := true ;
6541: LD_ADDR_EXP 8
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// end ;
6549: PPOPN 1
6551: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6552: LD_INT 22
6554: PUSH
6555: LD_OWVAR 2
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: LD_INT 2
6566: PUSH
6567: LD_INT 30
6569: PUSH
6570: LD_INT 7
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 30
6579: PUSH
6580: LD_INT 8
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 30
6589: PUSH
6590: LD_INT 11
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: IFFALSE 6844
6613: GO 6615
6615: DISABLE
6616: LD_INT 0
6618: PPUSH
6619: PPUSH
// begin enable ;
6620: ENABLE
// xy := FindArtifact ( 2 ) ;
6621: LD_ADDR_VAR 0 1
6625: PUSH
6626: LD_INT 2
6628: PPUSH
6629: CALL_OW 469
6633: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6634: LD_ADDR_VAR 0 2
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_OWVAR 2
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 2
6653: PUSH
6654: LD_INT 30
6656: PUSH
6657: LD_INT 8
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 30
6666: PUSH
6667: LD_INT 7
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 30
6676: PUSH
6677: LD_INT 11
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PPUSH
6694: CALL_OW 69
6698: PPUSH
6699: LD_VAR 0 1
6703: PUSH
6704: LD_INT 1
6706: ARRAY
6707: PPUSH
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 2
6715: ARRAY
6716: PPUSH
6717: CALL_OW 73
6721: ST_TO_ADDR
// if player_artifact_ready = false then
6722: LD_EXP 16
6726: PUSH
6727: LD_INT 0
6729: EQUAL
6730: IFFALSE 6844
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6732: LD_VAR 0 2
6736: PPUSH
6737: LD_VAR 0 1
6741: PUSH
6742: LD_INT 1
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 1
6750: PUSH
6751: LD_INT 2
6753: ARRAY
6754: PPUSH
6755: CALL_OW 297
6759: PUSH
6760: LD_INT 6
6762: LESS
6763: IFFALSE 6824
// begin if BuildingStatus ( lab ) = bs_idle then
6765: LD_VAR 0 2
6769: PPUSH
6770: CALL_OW 461
6774: PUSH
6775: LD_INT 2
6777: EQUAL
6778: IFFALSE 6802
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6780: LD_OWVAR 2
6784: PPUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_INT 2
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 468
6800: GO 6822
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6802: LD_OWVAR 2
6806: PPUSH
6807: LD_INT 1
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 2
6817: PPUSH
6818: CALL_OW 468
// end else
6822: GO 6844
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6824: LD_OWVAR 2
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: LD_VAR 0 2
6839: PPUSH
6840: CALL_OW 468
// end ;
6844: PPOPN 2
6846: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6847: LD_VAR 0 1
6851: PPUSH
6852: CALL_OW 255
6856: PUSH
6857: LD_OWVAR 2
6861: EQUAL
6862: IFFALSE 6888
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6864: LD_OWVAR 2
6868: PPUSH
6869: LD_INT 1
6871: PPUSH
6872: LD_INT 0
6874: PPUSH
6875: LD_VAR 0 1
6879: PPUSH
6880: CALL_OW 468
// Win ;
6884: CALL 4781 0 0
// end ; end ;
6888: PPOPN 1
6890: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6891: LD_ADDR_EXP 17
6895: PUSH
6896: LD_VAR 0 2
6900: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6901: LD_OWVAR 2
6905: PPUSH
6906: LD_INT 1
6908: PPUSH
6909: LD_INT 2
6911: PPUSH
6912: LD_VAR 0 1
6916: PPUSH
6917: CALL_OW 468
// end ;
6921: PPOPN 2
6923: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6924: LD_VAR 0 1
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: CALL 23214 0 2
// end ; end_of_file
6938: PPOPN 2
6940: END
// every 0 0$01 trigger not game_over do
6941: LD_EXP 7
6945: NOT
6946: IFFALSE 6979
6948: GO 6950
6950: DISABLE
// begin enable ;
6951: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6952: LD_ADDR_OWVAR 47
6956: PUSH
6957: LD_STRING #tick
6959: PUSH
6960: LD_OWVAR 1
6964: PUSH
6965: LD_STRING #points
6967: PUSH
6968: LD_EXP 10
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: ST_TO_ADDR
// end ;
6979: END
// every 0 0$01 trigger game_over do
6980: LD_EXP 7
6984: IFFALSE 7043
6986: GO 6988
6988: DISABLE
// begin Wait ( 0 0$02 ) ;
6989: LD_INT 70
6991: PPUSH
6992: CALL_OW 67
// DialogueOn ;
6996: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
7000: LD_ADDR_OWVAR 47
7004: PUSH
7005: LD_STRING #game-points
7007: PUSH
7008: LD_OWVAR 78
7012: PUSH
7013: LD_EXP 10
7017: PUSH
7018: LD_STRING #game-time
7020: PUSH
7021: LD_OWVAR 1
7025: PUSH
7026: LD_STRING #game-difficulty
7028: PUSH
7029: LD_OWVAR 67
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: ST_TO_ADDR
// end ; end_of_file
7043: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7044: LD_OWVAR 1
7048: PUSH
7049: LD_INT 52500
7051: LESS
7052: IFFALSE 7076
7054: GO 7056
7056: DISABLE
// begin enable ;
7057: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7058: LD_INT 1
7060: PPUSH
7061: LD_INT 5
7063: PPUSH
7064: CALL_OW 12
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: CALL_OW 57
// end ; end_of_file end_of_file
7076: END
// export globalGameSaveCounter ; every 0 0$1 do
7077: GO 7079
7079: DISABLE
// begin enable ;
7080: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7081: LD_STRING updateTimer(
7083: PUSH
7084: LD_OWVAR 1
7088: STR
7089: PUSH
7090: LD_STRING );
7092: STR
7093: PPUSH
7094: CALL_OW 559
// end ;
7098: END
// every 0 0$1 do
7099: GO 7101
7101: DISABLE
// begin globalGameSaveCounter := 0 ;
7102: LD_ADDR_EXP 18
7106: PUSH
7107: LD_INT 0
7109: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7110: LD_STRING setGameSaveCounter(0)
7112: PPUSH
7113: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7117: LD_STRING initStreamRollete();
7119: PPUSH
7120: CALL_OW 559
// InitStreamMode ;
7124: CALL 8469 0 0
// DefineStreamItems ( false ) ;
7128: LD_INT 0
7130: PPUSH
7131: CALL 8933 0 1
// end ;
7135: END
// export function SOS_MapStart ( ) ; begin
7136: LD_INT 0
7138: PPUSH
// if streamModeActive then
7139: LD_EXP 19
7143: IFFALSE 7152
// DefineStreamItems ( true ) ;
7145: LD_INT 1
7147: PPUSH
7148: CALL 8933 0 1
// UpdateLuaVariables ( ) ;
7152: CALL 7169 0 0
// UpdateFactoryWaypoints ( ) ;
7156: CALL 22055 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7160: CALL 22307 0 0
// end ;
7164: LD_VAR 0 1
7168: RET
// function UpdateLuaVariables ( ) ; begin
7169: LD_INT 0
7171: PPUSH
// if globalGameSaveCounter then
7172: LD_EXP 18
7176: IFFALSE 7210
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7178: LD_ADDR_EXP 18
7182: PUSH
7183: LD_EXP 18
7187: PPUSH
7188: CALL 68888 0 1
7192: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7193: LD_STRING setGameSaveCounter(
7195: PUSH
7196: LD_EXP 18
7200: STR
7201: PUSH
7202: LD_STRING )
7204: STR
7205: PPUSH
7206: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7210: LD_STRING setGameDifficulty(
7212: PUSH
7213: LD_OWVAR 67
7217: STR
7218: PUSH
7219: LD_STRING )
7221: STR
7222: PPUSH
7223: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7227: LD_STRING displayDifficulty(
7229: PUSH
7230: LD_OWVAR 67
7234: STR
7235: PUSH
7236: LD_STRING )
7238: STR
7239: PPUSH
7240: CALL_OW 559
// end ;
7244: LD_VAR 0 1
7248: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7249: LD_INT 0
7251: PPUSH
// if p2 = stream_mode then
7252: LD_VAR 0 2
7256: PUSH
7257: LD_INT 100
7259: EQUAL
7260: IFFALSE 8263
// begin if not StreamModeActive then
7262: LD_EXP 19
7266: NOT
7267: IFFALSE 7277
// StreamModeActive := true ;
7269: LD_ADDR_EXP 19
7273: PUSH
7274: LD_INT 1
7276: ST_TO_ADDR
// if p3 = 0 then
7277: LD_VAR 0 3
7281: PUSH
7282: LD_INT 0
7284: EQUAL
7285: IFFALSE 7291
// InitStreamMode ;
7287: CALL 8469 0 0
// if p3 = 1 then
7291: LD_VAR 0 3
7295: PUSH
7296: LD_INT 1
7298: EQUAL
7299: IFFALSE 7309
// sRocket := true ;
7301: LD_ADDR_EXP 24
7305: PUSH
7306: LD_INT 1
7308: ST_TO_ADDR
// if p3 = 2 then
7309: LD_VAR 0 3
7313: PUSH
7314: LD_INT 2
7316: EQUAL
7317: IFFALSE 7327
// sSpeed := true ;
7319: LD_ADDR_EXP 23
7323: PUSH
7324: LD_INT 1
7326: ST_TO_ADDR
// if p3 = 3 then
7327: LD_VAR 0 3
7331: PUSH
7332: LD_INT 3
7334: EQUAL
7335: IFFALSE 7345
// sEngine := true ;
7337: LD_ADDR_EXP 25
7341: PUSH
7342: LD_INT 1
7344: ST_TO_ADDR
// if p3 = 4 then
7345: LD_VAR 0 3
7349: PUSH
7350: LD_INT 4
7352: EQUAL
7353: IFFALSE 7363
// sSpec := true ;
7355: LD_ADDR_EXP 22
7359: PUSH
7360: LD_INT 1
7362: ST_TO_ADDR
// if p3 = 5 then
7363: LD_VAR 0 3
7367: PUSH
7368: LD_INT 5
7370: EQUAL
7371: IFFALSE 7381
// sLevel := true ;
7373: LD_ADDR_EXP 26
7377: PUSH
7378: LD_INT 1
7380: ST_TO_ADDR
// if p3 = 6 then
7381: LD_VAR 0 3
7385: PUSH
7386: LD_INT 6
7388: EQUAL
7389: IFFALSE 7399
// sArmoury := true ;
7391: LD_ADDR_EXP 27
7395: PUSH
7396: LD_INT 1
7398: ST_TO_ADDR
// if p3 = 7 then
7399: LD_VAR 0 3
7403: PUSH
7404: LD_INT 7
7406: EQUAL
7407: IFFALSE 7417
// sRadar := true ;
7409: LD_ADDR_EXP 28
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// if p3 = 8 then
7417: LD_VAR 0 3
7421: PUSH
7422: LD_INT 8
7424: EQUAL
7425: IFFALSE 7435
// sBunker := true ;
7427: LD_ADDR_EXP 29
7431: PUSH
7432: LD_INT 1
7434: ST_TO_ADDR
// if p3 = 9 then
7435: LD_VAR 0 3
7439: PUSH
7440: LD_INT 9
7442: EQUAL
7443: IFFALSE 7453
// sHack := true ;
7445: LD_ADDR_EXP 30
7449: PUSH
7450: LD_INT 1
7452: ST_TO_ADDR
// if p3 = 10 then
7453: LD_VAR 0 3
7457: PUSH
7458: LD_INT 10
7460: EQUAL
7461: IFFALSE 7471
// sFire := true ;
7463: LD_ADDR_EXP 31
7467: PUSH
7468: LD_INT 1
7470: ST_TO_ADDR
// if p3 = 11 then
7471: LD_VAR 0 3
7475: PUSH
7476: LD_INT 11
7478: EQUAL
7479: IFFALSE 7489
// sRefresh := true ;
7481: LD_ADDR_EXP 32
7485: PUSH
7486: LD_INT 1
7488: ST_TO_ADDR
// if p3 = 12 then
7489: LD_VAR 0 3
7493: PUSH
7494: LD_INT 12
7496: EQUAL
7497: IFFALSE 7507
// sExp := true ;
7499: LD_ADDR_EXP 33
7503: PUSH
7504: LD_INT 1
7506: ST_TO_ADDR
// if p3 = 13 then
7507: LD_VAR 0 3
7511: PUSH
7512: LD_INT 13
7514: EQUAL
7515: IFFALSE 7525
// sDepot := true ;
7517: LD_ADDR_EXP 34
7521: PUSH
7522: LD_INT 1
7524: ST_TO_ADDR
// if p3 = 14 then
7525: LD_VAR 0 3
7529: PUSH
7530: LD_INT 14
7532: EQUAL
7533: IFFALSE 7543
// sFlag := true ;
7535: LD_ADDR_EXP 35
7539: PUSH
7540: LD_INT 1
7542: ST_TO_ADDR
// if p3 = 15 then
7543: LD_VAR 0 3
7547: PUSH
7548: LD_INT 15
7550: EQUAL
7551: IFFALSE 7561
// sKamikadze := true ;
7553: LD_ADDR_EXP 43
7557: PUSH
7558: LD_INT 1
7560: ST_TO_ADDR
// if p3 = 16 then
7561: LD_VAR 0 3
7565: PUSH
7566: LD_INT 16
7568: EQUAL
7569: IFFALSE 7579
// sTroll := true ;
7571: LD_ADDR_EXP 44
7575: PUSH
7576: LD_INT 1
7578: ST_TO_ADDR
// if p3 = 17 then
7579: LD_VAR 0 3
7583: PUSH
7584: LD_INT 17
7586: EQUAL
7587: IFFALSE 7597
// sSlow := true ;
7589: LD_ADDR_EXP 45
7593: PUSH
7594: LD_INT 1
7596: ST_TO_ADDR
// if p3 = 18 then
7597: LD_VAR 0 3
7601: PUSH
7602: LD_INT 18
7604: EQUAL
7605: IFFALSE 7615
// sLack := true ;
7607: LD_ADDR_EXP 46
7611: PUSH
7612: LD_INT 1
7614: ST_TO_ADDR
// if p3 = 19 then
7615: LD_VAR 0 3
7619: PUSH
7620: LD_INT 19
7622: EQUAL
7623: IFFALSE 7633
// sTank := true ;
7625: LD_ADDR_EXP 48
7629: PUSH
7630: LD_INT 1
7632: ST_TO_ADDR
// if p3 = 20 then
7633: LD_VAR 0 3
7637: PUSH
7638: LD_INT 20
7640: EQUAL
7641: IFFALSE 7651
// sRemote := true ;
7643: LD_ADDR_EXP 49
7647: PUSH
7648: LD_INT 1
7650: ST_TO_ADDR
// if p3 = 21 then
7651: LD_VAR 0 3
7655: PUSH
7656: LD_INT 21
7658: EQUAL
7659: IFFALSE 7669
// sPowell := true ;
7661: LD_ADDR_EXP 50
7665: PUSH
7666: LD_INT 1
7668: ST_TO_ADDR
// if p3 = 22 then
7669: LD_VAR 0 3
7673: PUSH
7674: LD_INT 22
7676: EQUAL
7677: IFFALSE 7687
// sTeleport := true ;
7679: LD_ADDR_EXP 53
7683: PUSH
7684: LD_INT 1
7686: ST_TO_ADDR
// if p3 = 23 then
7687: LD_VAR 0 3
7691: PUSH
7692: LD_INT 23
7694: EQUAL
7695: IFFALSE 7705
// sOilTower := true ;
7697: LD_ADDR_EXP 55
7701: PUSH
7702: LD_INT 1
7704: ST_TO_ADDR
// if p3 = 24 then
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 24
7712: EQUAL
7713: IFFALSE 7723
// sShovel := true ;
7715: LD_ADDR_EXP 56
7719: PUSH
7720: LD_INT 1
7722: ST_TO_ADDR
// if p3 = 25 then
7723: LD_VAR 0 3
7727: PUSH
7728: LD_INT 25
7730: EQUAL
7731: IFFALSE 7741
// sSheik := true ;
7733: LD_ADDR_EXP 57
7737: PUSH
7738: LD_INT 1
7740: ST_TO_ADDR
// if p3 = 26 then
7741: LD_VAR 0 3
7745: PUSH
7746: LD_INT 26
7748: EQUAL
7749: IFFALSE 7759
// sEarthquake := true ;
7751: LD_ADDR_EXP 59
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
// if p3 = 27 then
7759: LD_VAR 0 3
7763: PUSH
7764: LD_INT 27
7766: EQUAL
7767: IFFALSE 7777
// sAI := true ;
7769: LD_ADDR_EXP 60
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// if p3 = 28 then
7777: LD_VAR 0 3
7781: PUSH
7782: LD_INT 28
7784: EQUAL
7785: IFFALSE 7795
// sCargo := true ;
7787: LD_ADDR_EXP 63
7791: PUSH
7792: LD_INT 1
7794: ST_TO_ADDR
// if p3 = 29 then
7795: LD_VAR 0 3
7799: PUSH
7800: LD_INT 29
7802: EQUAL
7803: IFFALSE 7813
// sDLaser := true ;
7805: LD_ADDR_EXP 64
7809: PUSH
7810: LD_INT 1
7812: ST_TO_ADDR
// if p3 = 30 then
7813: LD_VAR 0 3
7817: PUSH
7818: LD_INT 30
7820: EQUAL
7821: IFFALSE 7831
// sExchange := true ;
7823: LD_ADDR_EXP 65
7827: PUSH
7828: LD_INT 1
7830: ST_TO_ADDR
// if p3 = 31 then
7831: LD_VAR 0 3
7835: PUSH
7836: LD_INT 31
7838: EQUAL
7839: IFFALSE 7849
// sFac := true ;
7841: LD_ADDR_EXP 66
7845: PUSH
7846: LD_INT 1
7848: ST_TO_ADDR
// if p3 = 32 then
7849: LD_VAR 0 3
7853: PUSH
7854: LD_INT 32
7856: EQUAL
7857: IFFALSE 7867
// sPower := true ;
7859: LD_ADDR_EXP 67
7863: PUSH
7864: LD_INT 1
7866: ST_TO_ADDR
// if p3 = 33 then
7867: LD_VAR 0 3
7871: PUSH
7872: LD_INT 33
7874: EQUAL
7875: IFFALSE 7885
// sRandom := true ;
7877: LD_ADDR_EXP 68
7881: PUSH
7882: LD_INT 1
7884: ST_TO_ADDR
// if p3 = 34 then
7885: LD_VAR 0 3
7889: PUSH
7890: LD_INT 34
7892: EQUAL
7893: IFFALSE 7903
// sShield := true ;
7895: LD_ADDR_EXP 69
7899: PUSH
7900: LD_INT 1
7902: ST_TO_ADDR
// if p3 = 35 then
7903: LD_VAR 0 3
7907: PUSH
7908: LD_INT 35
7910: EQUAL
7911: IFFALSE 7921
// sTime := true ;
7913: LD_ADDR_EXP 70
7917: PUSH
7918: LD_INT 1
7920: ST_TO_ADDR
// if p3 = 36 then
7921: LD_VAR 0 3
7925: PUSH
7926: LD_INT 36
7928: EQUAL
7929: IFFALSE 7939
// sTools := true ;
7931: LD_ADDR_EXP 71
7935: PUSH
7936: LD_INT 1
7938: ST_TO_ADDR
// if p3 = 101 then
7939: LD_VAR 0 3
7943: PUSH
7944: LD_INT 101
7946: EQUAL
7947: IFFALSE 7957
// sSold := true ;
7949: LD_ADDR_EXP 36
7953: PUSH
7954: LD_INT 1
7956: ST_TO_ADDR
// if p3 = 102 then
7957: LD_VAR 0 3
7961: PUSH
7962: LD_INT 102
7964: EQUAL
7965: IFFALSE 7975
// sDiff := true ;
7967: LD_ADDR_EXP 37
7971: PUSH
7972: LD_INT 1
7974: ST_TO_ADDR
// if p3 = 103 then
7975: LD_VAR 0 3
7979: PUSH
7980: LD_INT 103
7982: EQUAL
7983: IFFALSE 7993
// sFog := true ;
7985: LD_ADDR_EXP 40
7989: PUSH
7990: LD_INT 1
7992: ST_TO_ADDR
// if p3 = 104 then
7993: LD_VAR 0 3
7997: PUSH
7998: LD_INT 104
8000: EQUAL
8001: IFFALSE 8011
// sReset := true ;
8003: LD_ADDR_EXP 41
8007: PUSH
8008: LD_INT 1
8010: ST_TO_ADDR
// if p3 = 105 then
8011: LD_VAR 0 3
8015: PUSH
8016: LD_INT 105
8018: EQUAL
8019: IFFALSE 8029
// sSun := true ;
8021: LD_ADDR_EXP 42
8025: PUSH
8026: LD_INT 1
8028: ST_TO_ADDR
// if p3 = 106 then
8029: LD_VAR 0 3
8033: PUSH
8034: LD_INT 106
8036: EQUAL
8037: IFFALSE 8047
// sTiger := true ;
8039: LD_ADDR_EXP 38
8043: PUSH
8044: LD_INT 1
8046: ST_TO_ADDR
// if p3 = 107 then
8047: LD_VAR 0 3
8051: PUSH
8052: LD_INT 107
8054: EQUAL
8055: IFFALSE 8065
// sBomb := true ;
8057: LD_ADDR_EXP 39
8061: PUSH
8062: LD_INT 1
8064: ST_TO_ADDR
// if p3 = 108 then
8065: LD_VAR 0 3
8069: PUSH
8070: LD_INT 108
8072: EQUAL
8073: IFFALSE 8083
// sWound := true ;
8075: LD_ADDR_EXP 47
8079: PUSH
8080: LD_INT 1
8082: ST_TO_ADDR
// if p3 = 109 then
8083: LD_VAR 0 3
8087: PUSH
8088: LD_INT 109
8090: EQUAL
8091: IFFALSE 8101
// sBetray := true ;
8093: LD_ADDR_EXP 51
8097: PUSH
8098: LD_INT 1
8100: ST_TO_ADDR
// if p3 = 110 then
8101: LD_VAR 0 3
8105: PUSH
8106: LD_INT 110
8108: EQUAL
8109: IFFALSE 8119
// sContamin := true ;
8111: LD_ADDR_EXP 52
8115: PUSH
8116: LD_INT 1
8118: ST_TO_ADDR
// if p3 = 111 then
8119: LD_VAR 0 3
8123: PUSH
8124: LD_INT 111
8126: EQUAL
8127: IFFALSE 8137
// sOil := true ;
8129: LD_ADDR_EXP 54
8133: PUSH
8134: LD_INT 1
8136: ST_TO_ADDR
// if p3 = 112 then
8137: LD_VAR 0 3
8141: PUSH
8142: LD_INT 112
8144: EQUAL
8145: IFFALSE 8155
// sStu := true ;
8147: LD_ADDR_EXP 58
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
// if p3 = 113 then
8155: LD_VAR 0 3
8159: PUSH
8160: LD_INT 113
8162: EQUAL
8163: IFFALSE 8173
// sBazooka := true ;
8165: LD_ADDR_EXP 61
8169: PUSH
8170: LD_INT 1
8172: ST_TO_ADDR
// if p3 = 114 then
8173: LD_VAR 0 3
8177: PUSH
8178: LD_INT 114
8180: EQUAL
8181: IFFALSE 8191
// sMortar := true ;
8183: LD_ADDR_EXP 62
8187: PUSH
8188: LD_INT 1
8190: ST_TO_ADDR
// if p3 = 115 then
8191: LD_VAR 0 3
8195: PUSH
8196: LD_INT 115
8198: EQUAL
8199: IFFALSE 8209
// sRanger := true ;
8201: LD_ADDR_EXP 72
8205: PUSH
8206: LD_INT 1
8208: ST_TO_ADDR
// if p3 = 116 then
8209: LD_VAR 0 3
8213: PUSH
8214: LD_INT 116
8216: EQUAL
8217: IFFALSE 8227
// sComputer := true ;
8219: LD_ADDR_EXP 73
8223: PUSH
8224: LD_INT 1
8226: ST_TO_ADDR
// if p3 = 117 then
8227: LD_VAR 0 3
8231: PUSH
8232: LD_INT 117
8234: EQUAL
8235: IFFALSE 8245
// s30 := true ;
8237: LD_ADDR_EXP 74
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// if p3 = 118 then
8245: LD_VAR 0 3
8249: PUSH
8250: LD_INT 118
8252: EQUAL
8253: IFFALSE 8263
// s60 := true ;
8255: LD_ADDR_EXP 75
8259: PUSH
8260: LD_INT 1
8262: ST_TO_ADDR
// end ; if p2 = hack_mode then
8263: LD_VAR 0 2
8267: PUSH
8268: LD_INT 101
8270: EQUAL
8271: IFFALSE 8399
// begin case p3 of 1 :
8273: LD_VAR 0 3
8277: PUSH
8278: LD_INT 1
8280: DOUBLE
8281: EQUAL
8282: IFTRUE 8286
8284: GO 8293
8286: POP
// hHackUnlimitedResources ; 2 :
8287: CALL 20662 0 0
8291: GO 8399
8293: LD_INT 2
8295: DOUBLE
8296: EQUAL
8297: IFTRUE 8301
8299: GO 8308
8301: POP
// hHackSetLevel10 ; 3 :
8302: CALL 20795 0 0
8306: GO 8399
8308: LD_INT 3
8310: DOUBLE
8311: EQUAL
8312: IFTRUE 8316
8314: GO 8323
8316: POP
// hHackSetLevel10YourUnits ; 4 :
8317: CALL 20880 0 0
8321: GO 8399
8323: LD_INT 4
8325: DOUBLE
8326: EQUAL
8327: IFTRUE 8331
8329: GO 8338
8331: POP
// hHackInvincible ; 5 :
8332: CALL 21328 0 0
8336: GO 8399
8338: LD_INT 5
8340: DOUBLE
8341: EQUAL
8342: IFTRUE 8346
8344: GO 8353
8346: POP
// hHackInvisible ; 6 :
8347: CALL 21439 0 0
8351: GO 8399
8353: LD_INT 6
8355: DOUBLE
8356: EQUAL
8357: IFTRUE 8361
8359: GO 8368
8361: POP
// hHackChangeYourSide ; 7 :
8362: CALL 21496 0 0
8366: GO 8399
8368: LD_INT 7
8370: DOUBLE
8371: EQUAL
8372: IFTRUE 8376
8374: GO 8383
8376: POP
// hHackChangeUnitSide ; 8 :
8377: CALL 21538 0 0
8381: GO 8399
8383: LD_INT 8
8385: DOUBLE
8386: EQUAL
8387: IFTRUE 8391
8389: GO 8398
8391: POP
// hHackFog ; end ;
8392: CALL 21639 0 0
8396: GO 8399
8398: POP
// end ; if p2 = game_save_mode then
8399: LD_VAR 0 2
8403: PUSH
8404: LD_INT 102
8406: EQUAL
8407: IFFALSE 8464
// begin if p3 = 1 then
8409: LD_VAR 0 3
8413: PUSH
8414: LD_INT 1
8416: EQUAL
8417: IFFALSE 8429
// globalGameSaveCounter := p4 ;
8419: LD_ADDR_EXP 18
8423: PUSH
8424: LD_VAR 0 4
8428: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8429: LD_VAR 0 3
8433: PUSH
8434: LD_INT 2
8436: EQUAL
8437: IFFALSE 8445
8439: PUSH
8440: LD_EXP 18
8444: AND
8445: IFFALSE 8464
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8447: LD_STRING setGameSaveCounter(
8449: PUSH
8450: LD_EXP 18
8454: STR
8455: PUSH
8456: LD_STRING )
8458: STR
8459: PPUSH
8460: CALL_OW 559
// end ; end ;
8464: LD_VAR 0 7
8468: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8469: LD_INT 0
8471: PPUSH
// streamModeActive := false ;
8472: LD_ADDR_EXP 19
8476: PUSH
8477: LD_INT 0
8479: ST_TO_ADDR
// normalCounter := 36 ;
8480: LD_ADDR_EXP 20
8484: PUSH
8485: LD_INT 36
8487: ST_TO_ADDR
// hardcoreCounter := 18 ;
8488: LD_ADDR_EXP 21
8492: PUSH
8493: LD_INT 18
8495: ST_TO_ADDR
// sRocket := false ;
8496: LD_ADDR_EXP 24
8500: PUSH
8501: LD_INT 0
8503: ST_TO_ADDR
// sSpeed := false ;
8504: LD_ADDR_EXP 23
8508: PUSH
8509: LD_INT 0
8511: ST_TO_ADDR
// sEngine := false ;
8512: LD_ADDR_EXP 25
8516: PUSH
8517: LD_INT 0
8519: ST_TO_ADDR
// sSpec := false ;
8520: LD_ADDR_EXP 22
8524: PUSH
8525: LD_INT 0
8527: ST_TO_ADDR
// sLevel := false ;
8528: LD_ADDR_EXP 26
8532: PUSH
8533: LD_INT 0
8535: ST_TO_ADDR
// sArmoury := false ;
8536: LD_ADDR_EXP 27
8540: PUSH
8541: LD_INT 0
8543: ST_TO_ADDR
// sRadar := false ;
8544: LD_ADDR_EXP 28
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// sBunker := false ;
8552: LD_ADDR_EXP 29
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// sHack := false ;
8560: LD_ADDR_EXP 30
8564: PUSH
8565: LD_INT 0
8567: ST_TO_ADDR
// sFire := false ;
8568: LD_ADDR_EXP 31
8572: PUSH
8573: LD_INT 0
8575: ST_TO_ADDR
// sRefresh := false ;
8576: LD_ADDR_EXP 32
8580: PUSH
8581: LD_INT 0
8583: ST_TO_ADDR
// sExp := false ;
8584: LD_ADDR_EXP 33
8588: PUSH
8589: LD_INT 0
8591: ST_TO_ADDR
// sDepot := false ;
8592: LD_ADDR_EXP 34
8596: PUSH
8597: LD_INT 0
8599: ST_TO_ADDR
// sFlag := false ;
8600: LD_ADDR_EXP 35
8604: PUSH
8605: LD_INT 0
8607: ST_TO_ADDR
// sKamikadze := false ;
8608: LD_ADDR_EXP 43
8612: PUSH
8613: LD_INT 0
8615: ST_TO_ADDR
// sTroll := false ;
8616: LD_ADDR_EXP 44
8620: PUSH
8621: LD_INT 0
8623: ST_TO_ADDR
// sSlow := false ;
8624: LD_ADDR_EXP 45
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// sLack := false ;
8632: LD_ADDR_EXP 46
8636: PUSH
8637: LD_INT 0
8639: ST_TO_ADDR
// sTank := false ;
8640: LD_ADDR_EXP 48
8644: PUSH
8645: LD_INT 0
8647: ST_TO_ADDR
// sRemote := false ;
8648: LD_ADDR_EXP 49
8652: PUSH
8653: LD_INT 0
8655: ST_TO_ADDR
// sPowell := false ;
8656: LD_ADDR_EXP 50
8660: PUSH
8661: LD_INT 0
8663: ST_TO_ADDR
// sTeleport := false ;
8664: LD_ADDR_EXP 53
8668: PUSH
8669: LD_INT 0
8671: ST_TO_ADDR
// sOilTower := false ;
8672: LD_ADDR_EXP 55
8676: PUSH
8677: LD_INT 0
8679: ST_TO_ADDR
// sShovel := false ;
8680: LD_ADDR_EXP 56
8684: PUSH
8685: LD_INT 0
8687: ST_TO_ADDR
// sSheik := false ;
8688: LD_ADDR_EXP 57
8692: PUSH
8693: LD_INT 0
8695: ST_TO_ADDR
// sEarthquake := false ;
8696: LD_ADDR_EXP 59
8700: PUSH
8701: LD_INT 0
8703: ST_TO_ADDR
// sAI := false ;
8704: LD_ADDR_EXP 60
8708: PUSH
8709: LD_INT 0
8711: ST_TO_ADDR
// sCargo := false ;
8712: LD_ADDR_EXP 63
8716: PUSH
8717: LD_INT 0
8719: ST_TO_ADDR
// sDLaser := false ;
8720: LD_ADDR_EXP 64
8724: PUSH
8725: LD_INT 0
8727: ST_TO_ADDR
// sExchange := false ;
8728: LD_ADDR_EXP 65
8732: PUSH
8733: LD_INT 0
8735: ST_TO_ADDR
// sFac := false ;
8736: LD_ADDR_EXP 66
8740: PUSH
8741: LD_INT 0
8743: ST_TO_ADDR
// sPower := false ;
8744: LD_ADDR_EXP 67
8748: PUSH
8749: LD_INT 0
8751: ST_TO_ADDR
// sRandom := false ;
8752: LD_ADDR_EXP 68
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// sShield := false ;
8760: LD_ADDR_EXP 69
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// sTime := false ;
8768: LD_ADDR_EXP 70
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// sTools := false ;
8776: LD_ADDR_EXP 71
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// sSold := false ;
8784: LD_ADDR_EXP 36
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// sDiff := false ;
8792: LD_ADDR_EXP 37
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// sFog := false ;
8800: LD_ADDR_EXP 40
8804: PUSH
8805: LD_INT 0
8807: ST_TO_ADDR
// sReset := false ;
8808: LD_ADDR_EXP 41
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// sSun := false ;
8816: LD_ADDR_EXP 42
8820: PUSH
8821: LD_INT 0
8823: ST_TO_ADDR
// sTiger := false ;
8824: LD_ADDR_EXP 38
8828: PUSH
8829: LD_INT 0
8831: ST_TO_ADDR
// sBomb := false ;
8832: LD_ADDR_EXP 39
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// sWound := false ;
8840: LD_ADDR_EXP 47
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// sBetray := false ;
8848: LD_ADDR_EXP 51
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// sContamin := false ;
8856: LD_ADDR_EXP 52
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// sOil := false ;
8864: LD_ADDR_EXP 54
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// sStu := false ;
8872: LD_ADDR_EXP 58
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// sBazooka := false ;
8880: LD_ADDR_EXP 61
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// sMortar := false ;
8888: LD_ADDR_EXP 62
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// sRanger := false ;
8896: LD_ADDR_EXP 72
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// sComputer := false ;
8904: LD_ADDR_EXP 73
8908: PUSH
8909: LD_INT 0
8911: ST_TO_ADDR
// s30 := false ;
8912: LD_ADDR_EXP 74
8916: PUSH
8917: LD_INT 0
8919: ST_TO_ADDR
// s60 := false ;
8920: LD_ADDR_EXP 75
8924: PUSH
8925: LD_INT 0
8927: ST_TO_ADDR
// end ;
8928: LD_VAR 0 1
8932: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8933: LD_INT 0
8935: PPUSH
8936: PPUSH
8937: PPUSH
8938: PPUSH
8939: PPUSH
8940: PPUSH
8941: PPUSH
// result := [ ] ;
8942: LD_ADDR_VAR 0 2
8946: PUSH
8947: EMPTY
8948: ST_TO_ADDR
// if campaign_id = 1 then
8949: LD_OWVAR 69
8953: PUSH
8954: LD_INT 1
8956: EQUAL
8957: IFFALSE 12123
// begin case mission_number of 1 :
8959: LD_OWVAR 70
8963: PUSH
8964: LD_INT 1
8966: DOUBLE
8967: EQUAL
8968: IFTRUE 8972
8970: GO 9048
8972: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8973: LD_ADDR_VAR 0 2
8977: PUSH
8978: LD_INT 2
8980: PUSH
8981: LD_INT 4
8983: PUSH
8984: LD_INT 11
8986: PUSH
8987: LD_INT 12
8989: PUSH
8990: LD_INT 15
8992: PUSH
8993: LD_INT 16
8995: PUSH
8996: LD_INT 22
8998: PUSH
8999: LD_INT 23
9001: PUSH
9002: LD_INT 26
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 101
9018: PUSH
9019: LD_INT 102
9021: PUSH
9022: LD_INT 106
9024: PUSH
9025: LD_INT 116
9027: PUSH
9028: LD_INT 117
9030: PUSH
9031: LD_INT 118
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: ST_TO_ADDR
9046: GO 12121
9048: LD_INT 2
9050: DOUBLE
9051: EQUAL
9052: IFTRUE 9056
9054: GO 9140
9056: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9057: LD_ADDR_VAR 0 2
9061: PUSH
9062: LD_INT 2
9064: PUSH
9065: LD_INT 4
9067: PUSH
9068: LD_INT 11
9070: PUSH
9071: LD_INT 12
9073: PUSH
9074: LD_INT 15
9076: PUSH
9077: LD_INT 16
9079: PUSH
9080: LD_INT 22
9082: PUSH
9083: LD_INT 23
9085: PUSH
9086: LD_INT 26
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 101
9102: PUSH
9103: LD_INT 102
9105: PUSH
9106: LD_INT 105
9108: PUSH
9109: LD_INT 106
9111: PUSH
9112: LD_INT 108
9114: PUSH
9115: LD_INT 116
9117: PUSH
9118: LD_INT 117
9120: PUSH
9121: LD_INT 118
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: ST_TO_ADDR
9138: GO 12121
9140: LD_INT 3
9142: DOUBLE
9143: EQUAL
9144: IFTRUE 9148
9146: GO 9236
9148: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9149: LD_ADDR_VAR 0 2
9153: PUSH
9154: LD_INT 2
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: LD_INT 5
9162: PUSH
9163: LD_INT 11
9165: PUSH
9166: LD_INT 12
9168: PUSH
9169: LD_INT 15
9171: PUSH
9172: LD_INT 16
9174: PUSH
9175: LD_INT 22
9177: PUSH
9178: LD_INT 26
9180: PUSH
9181: LD_INT 36
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 101
9198: PUSH
9199: LD_INT 102
9201: PUSH
9202: LD_INT 105
9204: PUSH
9205: LD_INT 106
9207: PUSH
9208: LD_INT 108
9210: PUSH
9211: LD_INT 116
9213: PUSH
9214: LD_INT 117
9216: PUSH
9217: LD_INT 118
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: ST_TO_ADDR
9234: GO 12121
9236: LD_INT 4
9238: DOUBLE
9239: EQUAL
9240: IFTRUE 9244
9242: GO 9340
9244: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9245: LD_ADDR_VAR 0 2
9249: PUSH
9250: LD_INT 2
9252: PUSH
9253: LD_INT 4
9255: PUSH
9256: LD_INT 5
9258: PUSH
9259: LD_INT 8
9261: PUSH
9262: LD_INT 11
9264: PUSH
9265: LD_INT 12
9267: PUSH
9268: LD_INT 15
9270: PUSH
9271: LD_INT 16
9273: PUSH
9274: LD_INT 22
9276: PUSH
9277: LD_INT 23
9279: PUSH
9280: LD_INT 26
9282: PUSH
9283: LD_INT 36
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 101
9302: PUSH
9303: LD_INT 102
9305: PUSH
9306: LD_INT 105
9308: PUSH
9309: LD_INT 106
9311: PUSH
9312: LD_INT 108
9314: PUSH
9315: LD_INT 116
9317: PUSH
9318: LD_INT 117
9320: PUSH
9321: LD_INT 118
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: ST_TO_ADDR
9338: GO 12121
9340: LD_INT 5
9342: DOUBLE
9343: EQUAL
9344: IFTRUE 9348
9346: GO 9460
9348: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9349: LD_ADDR_VAR 0 2
9353: PUSH
9354: LD_INT 2
9356: PUSH
9357: LD_INT 4
9359: PUSH
9360: LD_INT 5
9362: PUSH
9363: LD_INT 6
9365: PUSH
9366: LD_INT 8
9368: PUSH
9369: LD_INT 11
9371: PUSH
9372: LD_INT 12
9374: PUSH
9375: LD_INT 15
9377: PUSH
9378: LD_INT 16
9380: PUSH
9381: LD_INT 22
9383: PUSH
9384: LD_INT 23
9386: PUSH
9387: LD_INT 25
9389: PUSH
9390: LD_INT 26
9392: PUSH
9393: LD_INT 36
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 101
9414: PUSH
9415: LD_INT 102
9417: PUSH
9418: LD_INT 105
9420: PUSH
9421: LD_INT 106
9423: PUSH
9424: LD_INT 108
9426: PUSH
9427: LD_INT 109
9429: PUSH
9430: LD_INT 112
9432: PUSH
9433: LD_INT 116
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: LD_INT 118
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: ST_TO_ADDR
9458: GO 12121
9460: LD_INT 6
9462: DOUBLE
9463: EQUAL
9464: IFTRUE 9468
9466: GO 9600
9468: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9469: LD_ADDR_VAR 0 2
9473: PUSH
9474: LD_INT 2
9476: PUSH
9477: LD_INT 4
9479: PUSH
9480: LD_INT 5
9482: PUSH
9483: LD_INT 6
9485: PUSH
9486: LD_INT 8
9488: PUSH
9489: LD_INT 11
9491: PUSH
9492: LD_INT 12
9494: PUSH
9495: LD_INT 15
9497: PUSH
9498: LD_INT 16
9500: PUSH
9501: LD_INT 20
9503: PUSH
9504: LD_INT 21
9506: PUSH
9507: LD_INT 22
9509: PUSH
9510: LD_INT 23
9512: PUSH
9513: LD_INT 25
9515: PUSH
9516: LD_INT 26
9518: PUSH
9519: LD_INT 30
9521: PUSH
9522: LD_INT 31
9524: PUSH
9525: LD_INT 32
9527: PUSH
9528: LD_INT 36
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 101
9554: PUSH
9555: LD_INT 102
9557: PUSH
9558: LD_INT 105
9560: PUSH
9561: LD_INT 106
9563: PUSH
9564: LD_INT 108
9566: PUSH
9567: LD_INT 109
9569: PUSH
9570: LD_INT 112
9572: PUSH
9573: LD_INT 116
9575: PUSH
9576: LD_INT 117
9578: PUSH
9579: LD_INT 118
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: ST_TO_ADDR
9598: GO 12121
9600: LD_INT 7
9602: DOUBLE
9603: EQUAL
9604: IFTRUE 9608
9606: GO 9720
9608: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9609: LD_ADDR_VAR 0 2
9613: PUSH
9614: LD_INT 2
9616: PUSH
9617: LD_INT 4
9619: PUSH
9620: LD_INT 5
9622: PUSH
9623: LD_INT 7
9625: PUSH
9626: LD_INT 11
9628: PUSH
9629: LD_INT 12
9631: PUSH
9632: LD_INT 15
9634: PUSH
9635: LD_INT 16
9637: PUSH
9638: LD_INT 20
9640: PUSH
9641: LD_INT 21
9643: PUSH
9644: LD_INT 22
9646: PUSH
9647: LD_INT 23
9649: PUSH
9650: LD_INT 25
9652: PUSH
9653: LD_INT 26
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 101
9674: PUSH
9675: LD_INT 102
9677: PUSH
9678: LD_INT 103
9680: PUSH
9681: LD_INT 105
9683: PUSH
9684: LD_INT 106
9686: PUSH
9687: LD_INT 108
9689: PUSH
9690: LD_INT 112
9692: PUSH
9693: LD_INT 116
9695: PUSH
9696: LD_INT 117
9698: PUSH
9699: LD_INT 118
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: ST_TO_ADDR
9718: GO 12121
9720: LD_INT 8
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9868
9728: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9729: LD_ADDR_VAR 0 2
9733: PUSH
9734: LD_INT 2
9736: PUSH
9737: LD_INT 4
9739: PUSH
9740: LD_INT 5
9742: PUSH
9743: LD_INT 6
9745: PUSH
9746: LD_INT 7
9748: PUSH
9749: LD_INT 8
9751: PUSH
9752: LD_INT 11
9754: PUSH
9755: LD_INT 12
9757: PUSH
9758: LD_INT 15
9760: PUSH
9761: LD_INT 16
9763: PUSH
9764: LD_INT 20
9766: PUSH
9767: LD_INT 21
9769: PUSH
9770: LD_INT 22
9772: PUSH
9773: LD_INT 23
9775: PUSH
9776: LD_INT 25
9778: PUSH
9779: LD_INT 26
9781: PUSH
9782: LD_INT 30
9784: PUSH
9785: LD_INT 31
9787: PUSH
9788: LD_INT 32
9790: PUSH
9791: LD_INT 36
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 101
9818: PUSH
9819: LD_INT 102
9821: PUSH
9822: LD_INT 103
9824: PUSH
9825: LD_INT 105
9827: PUSH
9828: LD_INT 106
9830: PUSH
9831: LD_INT 108
9833: PUSH
9834: LD_INT 109
9836: PUSH
9837: LD_INT 112
9839: PUSH
9840: LD_INT 116
9842: PUSH
9843: LD_INT 117
9845: PUSH
9846: LD_INT 118
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: ST_TO_ADDR
9866: GO 12121
9868: LD_INT 9
9870: DOUBLE
9871: EQUAL
9872: IFTRUE 9876
9874: GO 10024
9876: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9877: LD_ADDR_VAR 0 2
9881: PUSH
9882: LD_INT 2
9884: PUSH
9885: LD_INT 4
9887: PUSH
9888: LD_INT 5
9890: PUSH
9891: LD_INT 6
9893: PUSH
9894: LD_INT 7
9896: PUSH
9897: LD_INT 8
9899: PUSH
9900: LD_INT 11
9902: PUSH
9903: LD_INT 12
9905: PUSH
9906: LD_INT 15
9908: PUSH
9909: LD_INT 16
9911: PUSH
9912: LD_INT 20
9914: PUSH
9915: LD_INT 21
9917: PUSH
9918: LD_INT 22
9920: PUSH
9921: LD_INT 23
9923: PUSH
9924: LD_INT 25
9926: PUSH
9927: LD_INT 26
9929: PUSH
9930: LD_INT 28
9932: PUSH
9933: LD_INT 30
9935: PUSH
9936: LD_INT 31
9938: PUSH
9939: LD_INT 32
9941: PUSH
9942: LD_INT 36
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 101
9970: PUSH
9971: LD_INT 102
9973: PUSH
9974: LD_INT 103
9976: PUSH
9977: LD_INT 105
9979: PUSH
9980: LD_INT 106
9982: PUSH
9983: LD_INT 108
9985: PUSH
9986: LD_INT 109
9988: PUSH
9989: LD_INT 112
9991: PUSH
9992: LD_INT 114
9994: PUSH
9995: LD_INT 116
9997: PUSH
9998: LD_INT 117
10000: PUSH
10001: LD_INT 118
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: ST_TO_ADDR
10022: GO 12121
10024: LD_INT 10
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10228
10032: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10033: LD_ADDR_VAR 0 2
10037: PUSH
10038: LD_INT 2
10040: PUSH
10041: LD_INT 4
10043: PUSH
10044: LD_INT 5
10046: PUSH
10047: LD_INT 6
10049: PUSH
10050: LD_INT 7
10052: PUSH
10053: LD_INT 8
10055: PUSH
10056: LD_INT 9
10058: PUSH
10059: LD_INT 10
10061: PUSH
10062: LD_INT 11
10064: PUSH
10065: LD_INT 12
10067: PUSH
10068: LD_INT 13
10070: PUSH
10071: LD_INT 14
10073: PUSH
10074: LD_INT 15
10076: PUSH
10077: LD_INT 16
10079: PUSH
10080: LD_INT 17
10082: PUSH
10083: LD_INT 18
10085: PUSH
10086: LD_INT 19
10088: PUSH
10089: LD_INT 20
10091: PUSH
10092: LD_INT 21
10094: PUSH
10095: LD_INT 22
10097: PUSH
10098: LD_INT 23
10100: PUSH
10101: LD_INT 24
10103: PUSH
10104: LD_INT 25
10106: PUSH
10107: LD_INT 26
10109: PUSH
10110: LD_INT 28
10112: PUSH
10113: LD_INT 30
10115: PUSH
10116: LD_INT 31
10118: PUSH
10119: LD_INT 32
10121: PUSH
10122: LD_INT 36
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 101
10158: PUSH
10159: LD_INT 102
10161: PUSH
10162: LD_INT 103
10164: PUSH
10165: LD_INT 104
10167: PUSH
10168: LD_INT 105
10170: PUSH
10171: LD_INT 106
10173: PUSH
10174: LD_INT 107
10176: PUSH
10177: LD_INT 108
10179: PUSH
10180: LD_INT 109
10182: PUSH
10183: LD_INT 110
10185: PUSH
10186: LD_INT 111
10188: PUSH
10189: LD_INT 112
10191: PUSH
10192: LD_INT 114
10194: PUSH
10195: LD_INT 116
10197: PUSH
10198: LD_INT 117
10200: PUSH
10201: LD_INT 118
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: ST_TO_ADDR
10226: GO 12121
10228: LD_INT 11
10230: DOUBLE
10231: EQUAL
10232: IFTRUE 10236
10234: GO 10440
10236: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10237: LD_ADDR_VAR 0 2
10241: PUSH
10242: LD_INT 2
10244: PUSH
10245: LD_INT 3
10247: PUSH
10248: LD_INT 4
10250: PUSH
10251: LD_INT 5
10253: PUSH
10254: LD_INT 6
10256: PUSH
10257: LD_INT 7
10259: PUSH
10260: LD_INT 8
10262: PUSH
10263: LD_INT 9
10265: PUSH
10266: LD_INT 10
10268: PUSH
10269: LD_INT 11
10271: PUSH
10272: LD_INT 12
10274: PUSH
10275: LD_INT 13
10277: PUSH
10278: LD_INT 14
10280: PUSH
10281: LD_INT 15
10283: PUSH
10284: LD_INT 16
10286: PUSH
10287: LD_INT 17
10289: PUSH
10290: LD_INT 18
10292: PUSH
10293: LD_INT 19
10295: PUSH
10296: LD_INT 20
10298: PUSH
10299: LD_INT 21
10301: PUSH
10302: LD_INT 22
10304: PUSH
10305: LD_INT 23
10307: PUSH
10308: LD_INT 24
10310: PUSH
10311: LD_INT 25
10313: PUSH
10314: LD_INT 26
10316: PUSH
10317: LD_INT 28
10319: PUSH
10320: LD_INT 30
10322: PUSH
10323: LD_INT 31
10325: PUSH
10326: LD_INT 32
10328: PUSH
10329: LD_INT 34
10331: PUSH
10332: LD_INT 36
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 101
10370: PUSH
10371: LD_INT 102
10373: PUSH
10374: LD_INT 103
10376: PUSH
10377: LD_INT 104
10379: PUSH
10380: LD_INT 105
10382: PUSH
10383: LD_INT 106
10385: PUSH
10386: LD_INT 107
10388: PUSH
10389: LD_INT 108
10391: PUSH
10392: LD_INT 109
10394: PUSH
10395: LD_INT 110
10397: PUSH
10398: LD_INT 111
10400: PUSH
10401: LD_INT 112
10403: PUSH
10404: LD_INT 114
10406: PUSH
10407: LD_INT 116
10409: PUSH
10410: LD_INT 117
10412: PUSH
10413: LD_INT 118
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: ST_TO_ADDR
10438: GO 12121
10440: LD_INT 12
10442: DOUBLE
10443: EQUAL
10444: IFTRUE 10448
10446: GO 10668
10448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: LD_INT 3
10462: PUSH
10463: LD_INT 4
10465: PUSH
10466: LD_INT 5
10468: PUSH
10469: LD_INT 6
10471: PUSH
10472: LD_INT 7
10474: PUSH
10475: LD_INT 8
10477: PUSH
10478: LD_INT 9
10480: PUSH
10481: LD_INT 10
10483: PUSH
10484: LD_INT 11
10486: PUSH
10487: LD_INT 12
10489: PUSH
10490: LD_INT 13
10492: PUSH
10493: LD_INT 14
10495: PUSH
10496: LD_INT 15
10498: PUSH
10499: LD_INT 16
10501: PUSH
10502: LD_INT 17
10504: PUSH
10505: LD_INT 18
10507: PUSH
10508: LD_INT 19
10510: PUSH
10511: LD_INT 20
10513: PUSH
10514: LD_INT 21
10516: PUSH
10517: LD_INT 22
10519: PUSH
10520: LD_INT 23
10522: PUSH
10523: LD_INT 24
10525: PUSH
10526: LD_INT 25
10528: PUSH
10529: LD_INT 26
10531: PUSH
10532: LD_INT 27
10534: PUSH
10535: LD_INT 28
10537: PUSH
10538: LD_INT 30
10540: PUSH
10541: LD_INT 31
10543: PUSH
10544: LD_INT 32
10546: PUSH
10547: LD_INT 33
10549: PUSH
10550: LD_INT 34
10552: PUSH
10553: LD_INT 36
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 101
10594: PUSH
10595: LD_INT 102
10597: PUSH
10598: LD_INT 103
10600: PUSH
10601: LD_INT 104
10603: PUSH
10604: LD_INT 105
10606: PUSH
10607: LD_INT 106
10609: PUSH
10610: LD_INT 107
10612: PUSH
10613: LD_INT 108
10615: PUSH
10616: LD_INT 109
10618: PUSH
10619: LD_INT 110
10621: PUSH
10622: LD_INT 111
10624: PUSH
10625: LD_INT 112
10627: PUSH
10628: LD_INT 113
10630: PUSH
10631: LD_INT 114
10633: PUSH
10634: LD_INT 116
10636: PUSH
10637: LD_INT 117
10639: PUSH
10640: LD_INT 118
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: ST_TO_ADDR
10666: GO 12121
10668: LD_INT 13
10670: DOUBLE
10671: EQUAL
10672: IFTRUE 10676
10674: GO 10884
10676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_INT 1
10684: PUSH
10685: LD_INT 2
10687: PUSH
10688: LD_INT 3
10690: PUSH
10691: LD_INT 4
10693: PUSH
10694: LD_INT 5
10696: PUSH
10697: LD_INT 8
10699: PUSH
10700: LD_INT 9
10702: PUSH
10703: LD_INT 10
10705: PUSH
10706: LD_INT 11
10708: PUSH
10709: LD_INT 12
10711: PUSH
10712: LD_INT 14
10714: PUSH
10715: LD_INT 15
10717: PUSH
10718: LD_INT 16
10720: PUSH
10721: LD_INT 17
10723: PUSH
10724: LD_INT 18
10726: PUSH
10727: LD_INT 19
10729: PUSH
10730: LD_INT 20
10732: PUSH
10733: LD_INT 21
10735: PUSH
10736: LD_INT 22
10738: PUSH
10739: LD_INT 23
10741: PUSH
10742: LD_INT 24
10744: PUSH
10745: LD_INT 25
10747: PUSH
10748: LD_INT 26
10750: PUSH
10751: LD_INT 27
10753: PUSH
10754: LD_INT 28
10756: PUSH
10757: LD_INT 30
10759: PUSH
10760: LD_INT 31
10762: PUSH
10763: LD_INT 32
10765: PUSH
10766: LD_INT 33
10768: PUSH
10769: LD_INT 34
10771: PUSH
10772: LD_INT 36
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 101
10810: PUSH
10811: LD_INT 102
10813: PUSH
10814: LD_INT 103
10816: PUSH
10817: LD_INT 104
10819: PUSH
10820: LD_INT 105
10822: PUSH
10823: LD_INT 106
10825: PUSH
10826: LD_INT 107
10828: PUSH
10829: LD_INT 108
10831: PUSH
10832: LD_INT 109
10834: PUSH
10835: LD_INT 110
10837: PUSH
10838: LD_INT 111
10840: PUSH
10841: LD_INT 112
10843: PUSH
10844: LD_INT 113
10846: PUSH
10847: LD_INT 114
10849: PUSH
10850: LD_INT 116
10852: PUSH
10853: LD_INT 117
10855: PUSH
10856: LD_INT 118
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: ST_TO_ADDR
10882: GO 12121
10884: LD_INT 14
10886: DOUBLE
10887: EQUAL
10888: IFTRUE 10892
10890: GO 11116
10892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10893: LD_ADDR_VAR 0 2
10897: PUSH
10898: LD_INT 1
10900: PUSH
10901: LD_INT 2
10903: PUSH
10904: LD_INT 3
10906: PUSH
10907: LD_INT 4
10909: PUSH
10910: LD_INT 5
10912: PUSH
10913: LD_INT 6
10915: PUSH
10916: LD_INT 7
10918: PUSH
10919: LD_INT 8
10921: PUSH
10922: LD_INT 9
10924: PUSH
10925: LD_INT 10
10927: PUSH
10928: LD_INT 11
10930: PUSH
10931: LD_INT 12
10933: PUSH
10934: LD_INT 13
10936: PUSH
10937: LD_INT 14
10939: PUSH
10940: LD_INT 15
10942: PUSH
10943: LD_INT 16
10945: PUSH
10946: LD_INT 17
10948: PUSH
10949: LD_INT 18
10951: PUSH
10952: LD_INT 19
10954: PUSH
10955: LD_INT 20
10957: PUSH
10958: LD_INT 21
10960: PUSH
10961: LD_INT 22
10963: PUSH
10964: LD_INT 23
10966: PUSH
10967: LD_INT 24
10969: PUSH
10970: LD_INT 25
10972: PUSH
10973: LD_INT 26
10975: PUSH
10976: LD_INT 27
10978: PUSH
10979: LD_INT 28
10981: PUSH
10982: LD_INT 29
10984: PUSH
10985: LD_INT 30
10987: PUSH
10988: LD_INT 31
10990: PUSH
10991: LD_INT 32
10993: PUSH
10994: LD_INT 33
10996: PUSH
10997: LD_INT 34
10999: PUSH
11000: LD_INT 36
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 101
11042: PUSH
11043: LD_INT 102
11045: PUSH
11046: LD_INT 103
11048: PUSH
11049: LD_INT 104
11051: PUSH
11052: LD_INT 105
11054: PUSH
11055: LD_INT 106
11057: PUSH
11058: LD_INT 107
11060: PUSH
11061: LD_INT 108
11063: PUSH
11064: LD_INT 109
11066: PUSH
11067: LD_INT 110
11069: PUSH
11070: LD_INT 111
11072: PUSH
11073: LD_INT 112
11075: PUSH
11076: LD_INT 113
11078: PUSH
11079: LD_INT 114
11081: PUSH
11082: LD_INT 116
11084: PUSH
11085: LD_INT 117
11087: PUSH
11088: LD_INT 118
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: ST_TO_ADDR
11114: GO 12121
11116: LD_INT 15
11118: DOUBLE
11119: EQUAL
11120: IFTRUE 11124
11122: GO 11348
11124: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11125: LD_ADDR_VAR 0 2
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: LD_INT 2
11135: PUSH
11136: LD_INT 3
11138: PUSH
11139: LD_INT 4
11141: PUSH
11142: LD_INT 5
11144: PUSH
11145: LD_INT 6
11147: PUSH
11148: LD_INT 7
11150: PUSH
11151: LD_INT 8
11153: PUSH
11154: LD_INT 9
11156: PUSH
11157: LD_INT 10
11159: PUSH
11160: LD_INT 11
11162: PUSH
11163: LD_INT 12
11165: PUSH
11166: LD_INT 13
11168: PUSH
11169: LD_INT 14
11171: PUSH
11172: LD_INT 15
11174: PUSH
11175: LD_INT 16
11177: PUSH
11178: LD_INT 17
11180: PUSH
11181: LD_INT 18
11183: PUSH
11184: LD_INT 19
11186: PUSH
11187: LD_INT 20
11189: PUSH
11190: LD_INT 21
11192: PUSH
11193: LD_INT 22
11195: PUSH
11196: LD_INT 23
11198: PUSH
11199: LD_INT 24
11201: PUSH
11202: LD_INT 25
11204: PUSH
11205: LD_INT 26
11207: PUSH
11208: LD_INT 27
11210: PUSH
11211: LD_INT 28
11213: PUSH
11214: LD_INT 29
11216: PUSH
11217: LD_INT 30
11219: PUSH
11220: LD_INT 31
11222: PUSH
11223: LD_INT 32
11225: PUSH
11226: LD_INT 33
11228: PUSH
11229: LD_INT 34
11231: PUSH
11232: LD_INT 36
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 101
11274: PUSH
11275: LD_INT 102
11277: PUSH
11278: LD_INT 103
11280: PUSH
11281: LD_INT 104
11283: PUSH
11284: LD_INT 105
11286: PUSH
11287: LD_INT 106
11289: PUSH
11290: LD_INT 107
11292: PUSH
11293: LD_INT 108
11295: PUSH
11296: LD_INT 109
11298: PUSH
11299: LD_INT 110
11301: PUSH
11302: LD_INT 111
11304: PUSH
11305: LD_INT 112
11307: PUSH
11308: LD_INT 113
11310: PUSH
11311: LD_INT 114
11313: PUSH
11314: LD_INT 116
11316: PUSH
11317: LD_INT 117
11319: PUSH
11320: LD_INT 118
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: ST_TO_ADDR
11346: GO 12121
11348: LD_INT 16
11350: DOUBLE
11351: EQUAL
11352: IFTRUE 11356
11354: GO 11492
11356: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11357: LD_ADDR_VAR 0 2
11361: PUSH
11362: LD_INT 2
11364: PUSH
11365: LD_INT 4
11367: PUSH
11368: LD_INT 5
11370: PUSH
11371: LD_INT 7
11373: PUSH
11374: LD_INT 11
11376: PUSH
11377: LD_INT 12
11379: PUSH
11380: LD_INT 15
11382: PUSH
11383: LD_INT 16
11385: PUSH
11386: LD_INT 20
11388: PUSH
11389: LD_INT 21
11391: PUSH
11392: LD_INT 22
11394: PUSH
11395: LD_INT 23
11397: PUSH
11398: LD_INT 25
11400: PUSH
11401: LD_INT 26
11403: PUSH
11404: LD_INT 30
11406: PUSH
11407: LD_INT 31
11409: PUSH
11410: LD_INT 32
11412: PUSH
11413: LD_INT 33
11415: PUSH
11416: LD_INT 34
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 101
11442: PUSH
11443: LD_INT 102
11445: PUSH
11446: LD_INT 103
11448: PUSH
11449: LD_INT 106
11451: PUSH
11452: LD_INT 108
11454: PUSH
11455: LD_INT 112
11457: PUSH
11458: LD_INT 113
11460: PUSH
11461: LD_INT 114
11463: PUSH
11464: LD_INT 116
11466: PUSH
11467: LD_INT 117
11469: PUSH
11470: LD_INT 118
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: ST_TO_ADDR
11490: GO 12121
11492: LD_INT 17
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11724
11500: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: LD_INT 2
11511: PUSH
11512: LD_INT 3
11514: PUSH
11515: LD_INT 4
11517: PUSH
11518: LD_INT 5
11520: PUSH
11521: LD_INT 6
11523: PUSH
11524: LD_INT 7
11526: PUSH
11527: LD_INT 8
11529: PUSH
11530: LD_INT 9
11532: PUSH
11533: LD_INT 10
11535: PUSH
11536: LD_INT 11
11538: PUSH
11539: LD_INT 12
11541: PUSH
11542: LD_INT 13
11544: PUSH
11545: LD_INT 14
11547: PUSH
11548: LD_INT 15
11550: PUSH
11551: LD_INT 16
11553: PUSH
11554: LD_INT 17
11556: PUSH
11557: LD_INT 18
11559: PUSH
11560: LD_INT 19
11562: PUSH
11563: LD_INT 20
11565: PUSH
11566: LD_INT 21
11568: PUSH
11569: LD_INT 22
11571: PUSH
11572: LD_INT 23
11574: PUSH
11575: LD_INT 24
11577: PUSH
11578: LD_INT 25
11580: PUSH
11581: LD_INT 26
11583: PUSH
11584: LD_INT 27
11586: PUSH
11587: LD_INT 28
11589: PUSH
11590: LD_INT 29
11592: PUSH
11593: LD_INT 30
11595: PUSH
11596: LD_INT 31
11598: PUSH
11599: LD_INT 32
11601: PUSH
11602: LD_INT 33
11604: PUSH
11605: LD_INT 34
11607: PUSH
11608: LD_INT 36
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 101
11650: PUSH
11651: LD_INT 102
11653: PUSH
11654: LD_INT 103
11656: PUSH
11657: LD_INT 104
11659: PUSH
11660: LD_INT 105
11662: PUSH
11663: LD_INT 106
11665: PUSH
11666: LD_INT 107
11668: PUSH
11669: LD_INT 108
11671: PUSH
11672: LD_INT 109
11674: PUSH
11675: LD_INT 110
11677: PUSH
11678: LD_INT 111
11680: PUSH
11681: LD_INT 112
11683: PUSH
11684: LD_INT 113
11686: PUSH
11687: LD_INT 114
11689: PUSH
11690: LD_INT 116
11692: PUSH
11693: LD_INT 117
11695: PUSH
11696: LD_INT 118
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: ST_TO_ADDR
11722: GO 12121
11724: LD_INT 18
11726: DOUBLE
11727: EQUAL
11728: IFTRUE 11732
11730: GO 11880
11732: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11733: LD_ADDR_VAR 0 2
11737: PUSH
11738: LD_INT 2
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: LD_INT 5
11746: PUSH
11747: LD_INT 7
11749: PUSH
11750: LD_INT 11
11752: PUSH
11753: LD_INT 12
11755: PUSH
11756: LD_INT 15
11758: PUSH
11759: LD_INT 16
11761: PUSH
11762: LD_INT 20
11764: PUSH
11765: LD_INT 21
11767: PUSH
11768: LD_INT 22
11770: PUSH
11771: LD_INT 23
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 26
11779: PUSH
11780: LD_INT 30
11782: PUSH
11783: LD_INT 31
11785: PUSH
11786: LD_INT 32
11788: PUSH
11789: LD_INT 33
11791: PUSH
11792: LD_INT 34
11794: PUSH
11795: LD_INT 35
11797: PUSH
11798: LD_INT 36
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 101
11826: PUSH
11827: LD_INT 102
11829: PUSH
11830: LD_INT 103
11832: PUSH
11833: LD_INT 106
11835: PUSH
11836: LD_INT 108
11838: PUSH
11839: LD_INT 112
11841: PUSH
11842: LD_INT 113
11844: PUSH
11845: LD_INT 114
11847: PUSH
11848: LD_INT 115
11850: PUSH
11851: LD_INT 116
11853: PUSH
11854: LD_INT 117
11856: PUSH
11857: LD_INT 118
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: ST_TO_ADDR
11878: GO 12121
11880: LD_INT 19
11882: DOUBLE
11883: EQUAL
11884: IFTRUE 11888
11886: GO 12120
11888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11889: LD_ADDR_VAR 0 2
11893: PUSH
11894: LD_INT 1
11896: PUSH
11897: LD_INT 2
11899: PUSH
11900: LD_INT 3
11902: PUSH
11903: LD_INT 4
11905: PUSH
11906: LD_INT 5
11908: PUSH
11909: LD_INT 6
11911: PUSH
11912: LD_INT 7
11914: PUSH
11915: LD_INT 8
11917: PUSH
11918: LD_INT 9
11920: PUSH
11921: LD_INT 10
11923: PUSH
11924: LD_INT 11
11926: PUSH
11927: LD_INT 12
11929: PUSH
11930: LD_INT 13
11932: PUSH
11933: LD_INT 14
11935: PUSH
11936: LD_INT 15
11938: PUSH
11939: LD_INT 16
11941: PUSH
11942: LD_INT 17
11944: PUSH
11945: LD_INT 18
11947: PUSH
11948: LD_INT 19
11950: PUSH
11951: LD_INT 20
11953: PUSH
11954: LD_INT 21
11956: PUSH
11957: LD_INT 22
11959: PUSH
11960: LD_INT 23
11962: PUSH
11963: LD_INT 24
11965: PUSH
11966: LD_INT 25
11968: PUSH
11969: LD_INT 26
11971: PUSH
11972: LD_INT 27
11974: PUSH
11975: LD_INT 28
11977: PUSH
11978: LD_INT 29
11980: PUSH
11981: LD_INT 30
11983: PUSH
11984: LD_INT 31
11986: PUSH
11987: LD_INT 32
11989: PUSH
11990: LD_INT 33
11992: PUSH
11993: LD_INT 34
11995: PUSH
11996: LD_INT 35
11998: PUSH
11999: LD_INT 36
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 101
12042: PUSH
12043: LD_INT 102
12045: PUSH
12046: LD_INT 103
12048: PUSH
12049: LD_INT 104
12051: PUSH
12052: LD_INT 105
12054: PUSH
12055: LD_INT 106
12057: PUSH
12058: LD_INT 107
12060: PUSH
12061: LD_INT 108
12063: PUSH
12064: LD_INT 109
12066: PUSH
12067: LD_INT 110
12069: PUSH
12070: LD_INT 111
12072: PUSH
12073: LD_INT 112
12075: PUSH
12076: LD_INT 113
12078: PUSH
12079: LD_INT 114
12081: PUSH
12082: LD_INT 115
12084: PUSH
12085: LD_INT 116
12087: PUSH
12088: LD_INT 117
12090: PUSH
12091: LD_INT 118
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: ST_TO_ADDR
12118: GO 12121
12120: POP
// end else
12121: GO 12352
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12123: LD_ADDR_VAR 0 2
12127: PUSH
12128: LD_INT 1
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: LD_INT 3
12136: PUSH
12137: LD_INT 4
12139: PUSH
12140: LD_INT 5
12142: PUSH
12143: LD_INT 6
12145: PUSH
12146: LD_INT 7
12148: PUSH
12149: LD_INT 8
12151: PUSH
12152: LD_INT 9
12154: PUSH
12155: LD_INT 10
12157: PUSH
12158: LD_INT 11
12160: PUSH
12161: LD_INT 12
12163: PUSH
12164: LD_INT 13
12166: PUSH
12167: LD_INT 14
12169: PUSH
12170: LD_INT 15
12172: PUSH
12173: LD_INT 16
12175: PUSH
12176: LD_INT 17
12178: PUSH
12179: LD_INT 18
12181: PUSH
12182: LD_INT 19
12184: PUSH
12185: LD_INT 20
12187: PUSH
12188: LD_INT 21
12190: PUSH
12191: LD_INT 22
12193: PUSH
12194: LD_INT 23
12196: PUSH
12197: LD_INT 24
12199: PUSH
12200: LD_INT 25
12202: PUSH
12203: LD_INT 26
12205: PUSH
12206: LD_INT 27
12208: PUSH
12209: LD_INT 28
12211: PUSH
12212: LD_INT 29
12214: PUSH
12215: LD_INT 30
12217: PUSH
12218: LD_INT 31
12220: PUSH
12221: LD_INT 32
12223: PUSH
12224: LD_INT 33
12226: PUSH
12227: LD_INT 34
12229: PUSH
12230: LD_INT 35
12232: PUSH
12233: LD_INT 36
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 101
12276: PUSH
12277: LD_INT 102
12279: PUSH
12280: LD_INT 103
12282: PUSH
12283: LD_INT 104
12285: PUSH
12286: LD_INT 105
12288: PUSH
12289: LD_INT 106
12291: PUSH
12292: LD_INT 107
12294: PUSH
12295: LD_INT 108
12297: PUSH
12298: LD_INT 109
12300: PUSH
12301: LD_INT 110
12303: PUSH
12304: LD_INT 111
12306: PUSH
12307: LD_INT 112
12309: PUSH
12310: LD_INT 113
12312: PUSH
12313: LD_INT 114
12315: PUSH
12316: LD_INT 115
12318: PUSH
12319: LD_INT 116
12321: PUSH
12322: LD_INT 117
12324: PUSH
12325: LD_INT 118
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: ST_TO_ADDR
// if result then
12352: LD_VAR 0 2
12356: IFFALSE 13142
// begin normal :=  ;
12358: LD_ADDR_VAR 0 5
12362: PUSH
12363: LD_STRING 
12365: ST_TO_ADDR
// hardcore :=  ;
12366: LD_ADDR_VAR 0 6
12370: PUSH
12371: LD_STRING 
12373: ST_TO_ADDR
// active :=  ;
12374: LD_ADDR_VAR 0 7
12378: PUSH
12379: LD_STRING 
12381: ST_TO_ADDR
// for i = 1 to normalCounter do
12382: LD_ADDR_VAR 0 8
12386: PUSH
12387: DOUBLE
12388: LD_INT 1
12390: DEC
12391: ST_TO_ADDR
12392: LD_EXP 20
12396: PUSH
12397: FOR_TO
12398: IFFALSE 12499
// begin tmp := 0 ;
12400: LD_ADDR_VAR 0 3
12404: PUSH
12405: LD_STRING 0
12407: ST_TO_ADDR
// if result [ 1 ] then
12408: LD_VAR 0 2
12412: PUSH
12413: LD_INT 1
12415: ARRAY
12416: IFFALSE 12481
// if result [ 1 ] [ 1 ] = i then
12418: LD_VAR 0 2
12422: PUSH
12423: LD_INT 1
12425: ARRAY
12426: PUSH
12427: LD_INT 1
12429: ARRAY
12430: PUSH
12431: LD_VAR 0 8
12435: EQUAL
12436: IFFALSE 12481
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12438: LD_ADDR_VAR 0 2
12442: PUSH
12443: LD_VAR 0 2
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: LD_VAR 0 2
12455: PUSH
12456: LD_INT 1
12458: ARRAY
12459: PPUSH
12460: LD_INT 1
12462: PPUSH
12463: CALL_OW 3
12467: PPUSH
12468: CALL_OW 1
12472: ST_TO_ADDR
// tmp := 1 ;
12473: LD_ADDR_VAR 0 3
12477: PUSH
12478: LD_STRING 1
12480: ST_TO_ADDR
// end ; normal := normal & tmp ;
12481: LD_ADDR_VAR 0 5
12485: PUSH
12486: LD_VAR 0 5
12490: PUSH
12491: LD_VAR 0 3
12495: STR
12496: ST_TO_ADDR
// end ;
12497: GO 12397
12499: POP
12500: POP
// for i = 1 to hardcoreCounter do
12501: LD_ADDR_VAR 0 8
12505: PUSH
12506: DOUBLE
12507: LD_INT 1
12509: DEC
12510: ST_TO_ADDR
12511: LD_EXP 21
12515: PUSH
12516: FOR_TO
12517: IFFALSE 12622
// begin tmp := 0 ;
12519: LD_ADDR_VAR 0 3
12523: PUSH
12524: LD_STRING 0
12526: ST_TO_ADDR
// if result [ 2 ] then
12527: LD_VAR 0 2
12531: PUSH
12532: LD_INT 2
12534: ARRAY
12535: IFFALSE 12604
// if result [ 2 ] [ 1 ] = 100 + i then
12537: LD_VAR 0 2
12541: PUSH
12542: LD_INT 2
12544: ARRAY
12545: PUSH
12546: LD_INT 1
12548: ARRAY
12549: PUSH
12550: LD_INT 100
12552: PUSH
12553: LD_VAR 0 8
12557: PLUS
12558: EQUAL
12559: IFFALSE 12604
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12561: LD_ADDR_VAR 0 2
12565: PUSH
12566: LD_VAR 0 2
12570: PPUSH
12571: LD_INT 2
12573: PPUSH
12574: LD_VAR 0 2
12578: PUSH
12579: LD_INT 2
12581: ARRAY
12582: PPUSH
12583: LD_INT 1
12585: PPUSH
12586: CALL_OW 3
12590: PPUSH
12591: CALL_OW 1
12595: ST_TO_ADDR
// tmp := 1 ;
12596: LD_ADDR_VAR 0 3
12600: PUSH
12601: LD_STRING 1
12603: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12604: LD_ADDR_VAR 0 6
12608: PUSH
12609: LD_VAR 0 6
12613: PUSH
12614: LD_VAR 0 3
12618: STR
12619: ST_TO_ADDR
// end ;
12620: GO 12516
12622: POP
12623: POP
// if isGameLoad then
12624: LD_VAR 0 1
12628: IFFALSE 13103
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12630: LD_ADDR_VAR 0 4
12634: PUSH
12635: LD_EXP 24
12639: PUSH
12640: LD_EXP 23
12644: PUSH
12645: LD_EXP 25
12649: PUSH
12650: LD_EXP 22
12654: PUSH
12655: LD_EXP 26
12659: PUSH
12660: LD_EXP 27
12664: PUSH
12665: LD_EXP 28
12669: PUSH
12670: LD_EXP 29
12674: PUSH
12675: LD_EXP 30
12679: PUSH
12680: LD_EXP 31
12684: PUSH
12685: LD_EXP 32
12689: PUSH
12690: LD_EXP 33
12694: PUSH
12695: LD_EXP 34
12699: PUSH
12700: LD_EXP 35
12704: PUSH
12705: LD_EXP 43
12709: PUSH
12710: LD_EXP 44
12714: PUSH
12715: LD_EXP 45
12719: PUSH
12720: LD_EXP 46
12724: PUSH
12725: LD_EXP 48
12729: PUSH
12730: LD_EXP 49
12734: PUSH
12735: LD_EXP 50
12739: PUSH
12740: LD_EXP 53
12744: PUSH
12745: LD_EXP 55
12749: PUSH
12750: LD_EXP 56
12754: PUSH
12755: LD_EXP 57
12759: PUSH
12760: LD_EXP 59
12764: PUSH
12765: LD_EXP 60
12769: PUSH
12770: LD_EXP 63
12774: PUSH
12775: LD_EXP 64
12779: PUSH
12780: LD_EXP 65
12784: PUSH
12785: LD_EXP 66
12789: PUSH
12790: LD_EXP 67
12794: PUSH
12795: LD_EXP 68
12799: PUSH
12800: LD_EXP 69
12804: PUSH
12805: LD_EXP 70
12809: PUSH
12810: LD_EXP 71
12814: PUSH
12815: LD_EXP 36
12819: PUSH
12820: LD_EXP 37
12824: PUSH
12825: LD_EXP 40
12829: PUSH
12830: LD_EXP 41
12834: PUSH
12835: LD_EXP 42
12839: PUSH
12840: LD_EXP 38
12844: PUSH
12845: LD_EXP 39
12849: PUSH
12850: LD_EXP 47
12854: PUSH
12855: LD_EXP 51
12859: PUSH
12860: LD_EXP 52
12864: PUSH
12865: LD_EXP 54
12869: PUSH
12870: LD_EXP 58
12874: PUSH
12875: LD_EXP 61
12879: PUSH
12880: LD_EXP 62
12884: PUSH
12885: LD_EXP 72
12889: PUSH
12890: LD_EXP 73
12894: PUSH
12895: LD_EXP 74
12899: PUSH
12900: LD_EXP 75
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: ST_TO_ADDR
// tmp :=  ;
12961: LD_ADDR_VAR 0 3
12965: PUSH
12966: LD_STRING 
12968: ST_TO_ADDR
// for i = 1 to normalCounter do
12969: LD_ADDR_VAR 0 8
12973: PUSH
12974: DOUBLE
12975: LD_INT 1
12977: DEC
12978: ST_TO_ADDR
12979: LD_EXP 20
12983: PUSH
12984: FOR_TO
12985: IFFALSE 13021
// begin if flags [ i ] then
12987: LD_VAR 0 4
12991: PUSH
12992: LD_VAR 0 8
12996: ARRAY
12997: IFFALSE 13019
// tmp := tmp & i & ; ;
12999: LD_ADDR_VAR 0 3
13003: PUSH
13004: LD_VAR 0 3
13008: PUSH
13009: LD_VAR 0 8
13013: STR
13014: PUSH
13015: LD_STRING ;
13017: STR
13018: ST_TO_ADDR
// end ;
13019: GO 12984
13021: POP
13022: POP
// for i = 1 to hardcoreCounter do
13023: LD_ADDR_VAR 0 8
13027: PUSH
13028: DOUBLE
13029: LD_INT 1
13031: DEC
13032: ST_TO_ADDR
13033: LD_EXP 21
13037: PUSH
13038: FOR_TO
13039: IFFALSE 13085
// begin if flags [ normalCounter + i ] then
13041: LD_VAR 0 4
13045: PUSH
13046: LD_EXP 20
13050: PUSH
13051: LD_VAR 0 8
13055: PLUS
13056: ARRAY
13057: IFFALSE 13083
// tmp := tmp & ( 100 + i ) & ; ;
13059: LD_ADDR_VAR 0 3
13063: PUSH
13064: LD_VAR 0 3
13068: PUSH
13069: LD_INT 100
13071: PUSH
13072: LD_VAR 0 8
13076: PLUS
13077: STR
13078: PUSH
13079: LD_STRING ;
13081: STR
13082: ST_TO_ADDR
// end ;
13083: GO 13038
13085: POP
13086: POP
// if tmp then
13087: LD_VAR 0 3
13091: IFFALSE 13103
// active := tmp ;
13093: LD_ADDR_VAR 0 7
13097: PUSH
13098: LD_VAR 0 3
13102: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13103: LD_STRING getStreamItemsFromMission("
13105: PUSH
13106: LD_VAR 0 5
13110: STR
13111: PUSH
13112: LD_STRING ","
13114: STR
13115: PUSH
13116: LD_VAR 0 6
13120: STR
13121: PUSH
13122: LD_STRING ","
13124: STR
13125: PUSH
13126: LD_VAR 0 7
13130: STR
13131: PUSH
13132: LD_STRING ")
13134: STR
13135: PPUSH
13136: CALL_OW 559
// end else
13140: GO 13149
// ToLua ( getStreamItemsFromMission("","","") ) ;
13142: LD_STRING getStreamItemsFromMission("","","")
13144: PPUSH
13145: CALL_OW 559
// end ;
13149: LD_VAR 0 2
13153: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13154: LD_EXP 19
13158: IFFALSE 13166
13160: PUSH
13161: LD_EXP 24
13165: AND
13166: IFFALSE 13290
13168: GO 13170
13170: DISABLE
13171: LD_INT 0
13173: PPUSH
13174: PPUSH
// begin enable ;
13175: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13176: LD_ADDR_VAR 0 2
13180: PUSH
13181: LD_INT 22
13183: PUSH
13184: LD_OWVAR 2
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 2
13195: PUSH
13196: LD_INT 34
13198: PUSH
13199: LD_INT 7
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 34
13208: PUSH
13209: LD_INT 45
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 34
13218: PUSH
13219: LD_INT 28
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 34
13228: PUSH
13229: LD_INT 47
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PPUSH
13247: CALL_OW 69
13251: ST_TO_ADDR
// if not tmp then
13252: LD_VAR 0 2
13256: NOT
13257: IFFALSE 13261
// exit ;
13259: GO 13290
// for i in tmp do
13261: LD_ADDR_VAR 0 1
13265: PUSH
13266: LD_VAR 0 2
13270: PUSH
13271: FOR_IN
13272: IFFALSE 13288
// begin SetLives ( i , 0 ) ;
13274: LD_VAR 0 1
13278: PPUSH
13279: LD_INT 0
13281: PPUSH
13282: CALL_OW 234
// end ;
13286: GO 13271
13288: POP
13289: POP
// end ;
13290: PPOPN 2
13292: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13293: LD_EXP 19
13297: IFFALSE 13305
13299: PUSH
13300: LD_EXP 25
13304: AND
13305: IFFALSE 13389
13307: GO 13309
13309: DISABLE
13310: LD_INT 0
13312: PPUSH
13313: PPUSH
// begin enable ;
13314: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13315: LD_ADDR_VAR 0 2
13319: PUSH
13320: LD_INT 22
13322: PUSH
13323: LD_OWVAR 2
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 32
13334: PUSH
13335: LD_INT 3
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: ST_TO_ADDR
// if not tmp then
13351: LD_VAR 0 2
13355: NOT
13356: IFFALSE 13360
// exit ;
13358: GO 13389
// for i in tmp do
13360: LD_ADDR_VAR 0 1
13364: PUSH
13365: LD_VAR 0 2
13369: PUSH
13370: FOR_IN
13371: IFFALSE 13387
// begin SetLives ( i , 0 ) ;
13373: LD_VAR 0 1
13377: PPUSH
13378: LD_INT 0
13380: PPUSH
13381: CALL_OW 234
// end ;
13385: GO 13370
13387: POP
13388: POP
// end ;
13389: PPOPN 2
13391: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13392: LD_EXP 19
13396: IFFALSE 13404
13398: PUSH
13399: LD_EXP 22
13403: AND
13404: IFFALSE 13497
13406: GO 13408
13408: DISABLE
13409: LD_INT 0
13411: PPUSH
// begin enable ;
13412: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13413: LD_ADDR_VAR 0 1
13417: PUSH
13418: LD_INT 22
13420: PUSH
13421: LD_OWVAR 2
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 2
13432: PUSH
13433: LD_INT 25
13435: PUSH
13436: LD_INT 5
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 25
13445: PUSH
13446: LD_INT 9
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 25
13455: PUSH
13456: LD_INT 8
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL_OW 69
13477: PUSH
13478: FOR_IN
13479: IFFALSE 13495
// begin SetClass ( i , 1 ) ;
13481: LD_VAR 0 1
13485: PPUSH
13486: LD_INT 1
13488: PPUSH
13489: CALL_OW 336
// end ;
13493: GO 13478
13495: POP
13496: POP
// end ;
13497: PPOPN 1
13499: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13500: LD_EXP 19
13504: IFFALSE 13512
13506: PUSH
13507: LD_EXP 23
13511: AND
13512: IFFALSE 13524
13514: PUSH
13515: LD_OWVAR 65
13519: PUSH
13520: LD_INT 7
13522: LESS
13523: AND
13524: IFFALSE 13538
13526: GO 13528
13528: DISABLE
// begin enable ;
13529: ENABLE
// game_speed := 7 ;
13530: LD_ADDR_OWVAR 65
13534: PUSH
13535: LD_INT 7
13537: ST_TO_ADDR
// end ;
13538: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13539: LD_EXP 19
13543: IFFALSE 13551
13545: PUSH
13546: LD_EXP 26
13550: AND
13551: IFFALSE 13753
13553: GO 13555
13555: DISABLE
13556: LD_INT 0
13558: PPUSH
13559: PPUSH
13560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13561: LD_ADDR_VAR 0 3
13565: PUSH
13566: LD_INT 81
13568: PUSH
13569: LD_OWVAR 2
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 21
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PPUSH
13592: CALL_OW 69
13596: ST_TO_ADDR
// if not tmp then
13597: LD_VAR 0 3
13601: NOT
13602: IFFALSE 13606
// exit ;
13604: GO 13753
// if tmp > 5 then
13606: LD_VAR 0 3
13610: PUSH
13611: LD_INT 5
13613: GREATER
13614: IFFALSE 13626
// k := 5 else
13616: LD_ADDR_VAR 0 2
13620: PUSH
13621: LD_INT 5
13623: ST_TO_ADDR
13624: GO 13636
// k := tmp ;
13626: LD_ADDR_VAR 0 2
13630: PUSH
13631: LD_VAR 0 3
13635: ST_TO_ADDR
// for i := 1 to k do
13636: LD_ADDR_VAR 0 1
13640: PUSH
13641: DOUBLE
13642: LD_INT 1
13644: DEC
13645: ST_TO_ADDR
13646: LD_VAR 0 2
13650: PUSH
13651: FOR_TO
13652: IFFALSE 13751
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13654: LD_VAR 0 3
13658: PUSH
13659: LD_VAR 0 1
13663: ARRAY
13664: PPUSH
13665: LD_VAR 0 1
13669: PUSH
13670: LD_INT 4
13672: MOD
13673: PUSH
13674: LD_INT 1
13676: PLUS
13677: PPUSH
13678: CALL_OW 259
13682: PUSH
13683: LD_INT 10
13685: LESS
13686: IFFALSE 13749
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13688: LD_VAR 0 3
13692: PUSH
13693: LD_VAR 0 1
13697: ARRAY
13698: PPUSH
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 4
13706: MOD
13707: PUSH
13708: LD_INT 1
13710: PLUS
13711: PPUSH
13712: LD_VAR 0 3
13716: PUSH
13717: LD_VAR 0 1
13721: ARRAY
13722: PPUSH
13723: LD_VAR 0 1
13727: PUSH
13728: LD_INT 4
13730: MOD
13731: PUSH
13732: LD_INT 1
13734: PLUS
13735: PPUSH
13736: CALL_OW 259
13740: PUSH
13741: LD_INT 1
13743: PLUS
13744: PPUSH
13745: CALL_OW 237
13749: GO 13651
13751: POP
13752: POP
// end ;
13753: PPOPN 3
13755: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13756: LD_EXP 19
13760: IFFALSE 13768
13762: PUSH
13763: LD_EXP 27
13767: AND
13768: IFFALSE 13788
13770: GO 13772
13772: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13773: LD_INT 4
13775: PPUSH
13776: LD_OWVAR 2
13780: PPUSH
13781: LD_INT 0
13783: PPUSH
13784: CALL_OW 324
13788: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13789: LD_EXP 19
13793: IFFALSE 13801
13795: PUSH
13796: LD_EXP 56
13800: AND
13801: IFFALSE 13821
13803: GO 13805
13805: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13806: LD_INT 19
13808: PPUSH
13809: LD_OWVAR 2
13813: PPUSH
13814: LD_INT 0
13816: PPUSH
13817: CALL_OW 324
13821: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13822: LD_EXP 19
13826: IFFALSE 13834
13828: PUSH
13829: LD_EXP 28
13833: AND
13834: IFFALSE 13936
13836: GO 13838
13838: DISABLE
13839: LD_INT 0
13841: PPUSH
13842: PPUSH
// begin enable ;
13843: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13844: LD_ADDR_VAR 0 2
13848: PUSH
13849: LD_INT 22
13851: PUSH
13852: LD_OWVAR 2
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 2
13863: PUSH
13864: LD_INT 34
13866: PUSH
13867: LD_INT 11
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 34
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PPUSH
13893: CALL_OW 69
13897: ST_TO_ADDR
// if not tmp then
13898: LD_VAR 0 2
13902: NOT
13903: IFFALSE 13907
// exit ;
13905: GO 13936
// for i in tmp do
13907: LD_ADDR_VAR 0 1
13911: PUSH
13912: LD_VAR 0 2
13916: PUSH
13917: FOR_IN
13918: IFFALSE 13934
// begin SetLives ( i , 0 ) ;
13920: LD_VAR 0 1
13924: PPUSH
13925: LD_INT 0
13927: PPUSH
13928: CALL_OW 234
// end ;
13932: GO 13917
13934: POP
13935: POP
// end ;
13936: PPOPN 2
13938: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13939: LD_EXP 19
13943: IFFALSE 13951
13945: PUSH
13946: LD_EXP 29
13950: AND
13951: IFFALSE 13971
13953: GO 13955
13955: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13956: LD_INT 32
13958: PPUSH
13959: LD_OWVAR 2
13963: PPUSH
13964: LD_INT 0
13966: PPUSH
13967: CALL_OW 324
13971: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13972: LD_EXP 19
13976: IFFALSE 13984
13978: PUSH
13979: LD_EXP 30
13983: AND
13984: IFFALSE 14167
13986: GO 13988
13988: DISABLE
13989: LD_INT 0
13991: PPUSH
13992: PPUSH
13993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13994: LD_ADDR_VAR 0 2
13998: PUSH
13999: LD_INT 22
14001: PUSH
14002: LD_OWVAR 2
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 33
14013: PUSH
14014: LD_INT 3
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: ST_TO_ADDR
// if not tmp then
14030: LD_VAR 0 2
14034: NOT
14035: IFFALSE 14039
// exit ;
14037: GO 14167
// side := 0 ;
14039: LD_ADDR_VAR 0 3
14043: PUSH
14044: LD_INT 0
14046: ST_TO_ADDR
// for i := 1 to 8 do
14047: LD_ADDR_VAR 0 1
14051: PUSH
14052: DOUBLE
14053: LD_INT 1
14055: DEC
14056: ST_TO_ADDR
14057: LD_INT 8
14059: PUSH
14060: FOR_TO
14061: IFFALSE 14111
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14063: LD_OWVAR 2
14067: PUSH
14068: LD_VAR 0 1
14072: NONEQUAL
14073: IFFALSE 14095
14075: PUSH
14076: LD_OWVAR 2
14080: PPUSH
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 81
14090: PUSH
14091: LD_INT 2
14093: EQUAL
14094: AND
14095: IFFALSE 14109
// begin side := i ;
14097: LD_ADDR_VAR 0 3
14101: PUSH
14102: LD_VAR 0 1
14106: ST_TO_ADDR
// break ;
14107: GO 14111
// end ;
14109: GO 14060
14111: POP
14112: POP
// if not side then
14113: LD_VAR 0 3
14117: NOT
14118: IFFALSE 14122
// exit ;
14120: GO 14167
// for i := 1 to tmp do
14122: LD_ADDR_VAR 0 1
14126: PUSH
14127: DOUBLE
14128: LD_INT 1
14130: DEC
14131: ST_TO_ADDR
14132: LD_VAR 0 2
14136: PUSH
14137: FOR_TO
14138: IFFALSE 14165
// if Prob ( 60 ) then
14140: LD_INT 60
14142: PPUSH
14143: CALL_OW 13
14147: IFFALSE 14163
// SetSide ( i , side ) ;
14149: LD_VAR 0 1
14153: PPUSH
14154: LD_VAR 0 3
14158: PPUSH
14159: CALL_OW 235
14163: GO 14137
14165: POP
14166: POP
// end ;
14167: PPOPN 3
14169: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14170: LD_EXP 19
14174: IFFALSE 14182
14176: PUSH
14177: LD_EXP 32
14181: AND
14182: IFFALSE 14301
14184: GO 14186
14186: DISABLE
14187: LD_INT 0
14189: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14190: LD_ADDR_VAR 0 1
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_OWVAR 2
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 21
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 3
14219: PUSH
14220: LD_INT 23
14222: PUSH
14223: LD_INT 0
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: PPUSH
14239: CALL_OW 69
14243: PUSH
14244: FOR_IN
14245: IFFALSE 14299
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14247: LD_VAR 0 1
14251: PPUSH
14252: CALL_OW 257
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: LD_INT 2
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: LD_INT 4
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: IN
14275: IFFALSE 14297
// SetClass ( un , rand ( 1 , 4 ) ) ;
14277: LD_VAR 0 1
14281: PPUSH
14282: LD_INT 1
14284: PPUSH
14285: LD_INT 4
14287: PPUSH
14288: CALL_OW 12
14292: PPUSH
14293: CALL_OW 336
14297: GO 14244
14299: POP
14300: POP
// end ;
14301: PPOPN 1
14303: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14304: LD_EXP 19
14308: IFFALSE 14316
14310: PUSH
14311: LD_EXP 31
14315: AND
14316: IFFALSE 14395
14318: GO 14320
14320: DISABLE
14321: LD_INT 0
14323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14324: LD_ADDR_VAR 0 1
14328: PUSH
14329: LD_INT 22
14331: PUSH
14332: LD_OWVAR 2
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 21
14343: PUSH
14344: LD_INT 3
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 69
14359: ST_TO_ADDR
// if not tmp then
14360: LD_VAR 0 1
14364: NOT
14365: IFFALSE 14369
// exit ;
14367: GO 14395
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14369: LD_VAR 0 1
14373: PUSH
14374: LD_INT 1
14376: PPUSH
14377: LD_VAR 0 1
14381: PPUSH
14382: CALL_OW 12
14386: ARRAY
14387: PPUSH
14388: LD_INT 100
14390: PPUSH
14391: CALL_OW 234
// end ;
14395: PPOPN 1
14397: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14398: LD_EXP 19
14402: IFFALSE 14410
14404: PUSH
14405: LD_EXP 33
14409: AND
14410: IFFALSE 14508
14412: GO 14414
14414: DISABLE
14415: LD_INT 0
14417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14418: LD_ADDR_VAR 0 1
14422: PUSH
14423: LD_INT 22
14425: PUSH
14426: LD_OWVAR 2
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 21
14437: PUSH
14438: LD_INT 1
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PPUSH
14449: CALL_OW 69
14453: ST_TO_ADDR
// if not tmp then
14454: LD_VAR 0 1
14458: NOT
14459: IFFALSE 14463
// exit ;
14461: GO 14508
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14463: LD_VAR 0 1
14467: PUSH
14468: LD_INT 1
14470: PPUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 12
14480: ARRAY
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: LD_INT 4
14487: PPUSH
14488: CALL_OW 12
14492: PPUSH
14493: LD_INT 3000
14495: PPUSH
14496: LD_INT 9000
14498: PPUSH
14499: CALL_OW 12
14503: PPUSH
14504: CALL_OW 492
// end ;
14508: PPOPN 1
14510: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14511: LD_EXP 19
14515: IFFALSE 14523
14517: PUSH
14518: LD_EXP 34
14522: AND
14523: IFFALSE 14543
14525: GO 14527
14527: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14528: LD_INT 1
14530: PPUSH
14531: LD_OWVAR 2
14535: PPUSH
14536: LD_INT 0
14538: PPUSH
14539: CALL_OW 324
14543: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14544: LD_EXP 19
14548: IFFALSE 14556
14550: PUSH
14551: LD_EXP 35
14555: AND
14556: IFFALSE 14639
14558: GO 14560
14560: DISABLE
14561: LD_INT 0
14563: PPUSH
14564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14565: LD_ADDR_VAR 0 2
14569: PUSH
14570: LD_INT 22
14572: PUSH
14573: LD_OWVAR 2
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 21
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: ST_TO_ADDR
// if not tmp then
14601: LD_VAR 0 2
14605: NOT
14606: IFFALSE 14610
// exit ;
14608: GO 14639
// for i in tmp do
14610: LD_ADDR_VAR 0 1
14614: PUSH
14615: LD_VAR 0 2
14619: PUSH
14620: FOR_IN
14621: IFFALSE 14637
// SetBLevel ( i , 10 ) ;
14623: LD_VAR 0 1
14627: PPUSH
14628: LD_INT 10
14630: PPUSH
14631: CALL_OW 241
14635: GO 14620
14637: POP
14638: POP
// end ;
14639: PPOPN 2
14641: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14642: LD_EXP 19
14646: IFFALSE 14654
14648: PUSH
14649: LD_EXP 36
14653: AND
14654: IFFALSE 14765
14656: GO 14658
14658: DISABLE
14659: LD_INT 0
14661: PPUSH
14662: PPUSH
14663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14664: LD_ADDR_VAR 0 3
14668: PUSH
14669: LD_INT 22
14671: PUSH
14672: LD_OWVAR 2
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 25
14683: PUSH
14684: LD_INT 1
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PPUSH
14695: CALL_OW 69
14699: ST_TO_ADDR
// if not tmp then
14700: LD_VAR 0 3
14704: NOT
14705: IFFALSE 14709
// exit ;
14707: GO 14765
// un := tmp [ rand ( 1 , tmp ) ] ;
14709: LD_ADDR_VAR 0 2
14713: PUSH
14714: LD_VAR 0 3
14718: PUSH
14719: LD_INT 1
14721: PPUSH
14722: LD_VAR 0 3
14726: PPUSH
14727: CALL_OW 12
14731: ARRAY
14732: ST_TO_ADDR
// if Crawls ( un ) then
14733: LD_VAR 0 2
14737: PPUSH
14738: CALL_OW 318
14742: IFFALSE 14753
// ComWalk ( un ) ;
14744: LD_VAR 0 2
14748: PPUSH
14749: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14753: LD_VAR 0 2
14757: PPUSH
14758: LD_INT 5
14760: PPUSH
14761: CALL_OW 336
// end ;
14765: PPOPN 3
14767: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14768: LD_EXP 19
14772: IFFALSE 14780
14774: PUSH
14775: LD_EXP 37
14779: AND
14780: IFFALSE 14792
14782: PUSH
14783: LD_OWVAR 67
14787: PUSH
14788: LD_INT 4
14790: LESS
14791: AND
14792: IFFALSE 14811
14794: GO 14796
14796: DISABLE
// begin Difficulty := Difficulty + 1 ;
14797: LD_ADDR_OWVAR 67
14801: PUSH
14802: LD_OWVAR 67
14806: PUSH
14807: LD_INT 1
14809: PLUS
14810: ST_TO_ADDR
// end ;
14811: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14812: LD_EXP 19
14816: IFFALSE 14824
14818: PUSH
14819: LD_EXP 38
14823: AND
14824: IFFALSE 14927
14826: GO 14828
14828: DISABLE
14829: LD_INT 0
14831: PPUSH
// begin for i := 1 to 5 do
14832: LD_ADDR_VAR 0 1
14836: PUSH
14837: DOUBLE
14838: LD_INT 1
14840: DEC
14841: ST_TO_ADDR
14842: LD_INT 5
14844: PUSH
14845: FOR_TO
14846: IFFALSE 14925
// begin uc_nation := nation_nature ;
14848: LD_ADDR_OWVAR 21
14852: PUSH
14853: LD_INT 0
14855: ST_TO_ADDR
// uc_side := 0 ;
14856: LD_ADDR_OWVAR 20
14860: PUSH
14861: LD_INT 0
14863: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14864: LD_ADDR_OWVAR 29
14868: PUSH
14869: LD_INT 12
14871: PUSH
14872: LD_INT 12
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: ST_TO_ADDR
// hc_agressivity := 20 ;
14879: LD_ADDR_OWVAR 35
14883: PUSH
14884: LD_INT 20
14886: ST_TO_ADDR
// hc_class := class_tiger ;
14887: LD_ADDR_OWVAR 28
14891: PUSH
14892: LD_INT 14
14894: ST_TO_ADDR
// hc_gallery :=  ;
14895: LD_ADDR_OWVAR 33
14899: PUSH
14900: LD_STRING 
14902: ST_TO_ADDR
// hc_name :=  ;
14903: LD_ADDR_OWVAR 26
14907: PUSH
14908: LD_STRING 
14910: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14911: CALL_OW 44
14915: PPUSH
14916: LD_INT 0
14918: PPUSH
14919: CALL_OW 51
// end ;
14923: GO 14845
14925: POP
14926: POP
// end ;
14927: PPOPN 1
14929: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14930: LD_EXP 19
14934: IFFALSE 14942
14936: PUSH
14937: LD_EXP 39
14941: AND
14942: IFFALSE 14951
14944: GO 14946
14946: DISABLE
// StreamSibBomb ;
14947: CALL 14952 0 0
14951: END
// export function StreamSibBomb ; var i , x , y ; begin
14952: LD_INT 0
14954: PPUSH
14955: PPUSH
14956: PPUSH
14957: PPUSH
// result := false ;
14958: LD_ADDR_VAR 0 1
14962: PUSH
14963: LD_INT 0
14965: ST_TO_ADDR
// for i := 1 to 16 do
14966: LD_ADDR_VAR 0 2
14970: PUSH
14971: DOUBLE
14972: LD_INT 1
14974: DEC
14975: ST_TO_ADDR
14976: LD_INT 16
14978: PUSH
14979: FOR_TO
14980: IFFALSE 15179
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14982: LD_ADDR_VAR 0 3
14986: PUSH
14987: LD_INT 10
14989: PUSH
14990: LD_INT 20
14992: PUSH
14993: LD_INT 30
14995: PUSH
14996: LD_INT 40
14998: PUSH
14999: LD_INT 50
15001: PUSH
15002: LD_INT 60
15004: PUSH
15005: LD_INT 70
15007: PUSH
15008: LD_INT 80
15010: PUSH
15011: LD_INT 90
15013: PUSH
15014: LD_INT 100
15016: PUSH
15017: LD_INT 110
15019: PUSH
15020: LD_INT 120
15022: PUSH
15023: LD_INT 130
15025: PUSH
15026: LD_INT 140
15028: PUSH
15029: LD_INT 150
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 1
15051: PPUSH
15052: LD_INT 15
15054: PPUSH
15055: CALL_OW 12
15059: ARRAY
15060: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15061: LD_ADDR_VAR 0 4
15065: PUSH
15066: LD_INT 10
15068: PUSH
15069: LD_INT 20
15071: PUSH
15072: LD_INT 30
15074: PUSH
15075: LD_INT 40
15077: PUSH
15078: LD_INT 50
15080: PUSH
15081: LD_INT 60
15083: PUSH
15084: LD_INT 70
15086: PUSH
15087: LD_INT 80
15089: PUSH
15090: LD_INT 90
15092: PUSH
15093: LD_INT 100
15095: PUSH
15096: LD_INT 110
15098: PUSH
15099: LD_INT 120
15101: PUSH
15102: LD_INT 130
15104: PUSH
15105: LD_INT 140
15107: PUSH
15108: LD_INT 150
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 1
15130: PPUSH
15131: LD_INT 15
15133: PPUSH
15134: CALL_OW 12
15138: ARRAY
15139: ST_TO_ADDR
// if ValidHex ( x , y ) then
15140: LD_VAR 0 3
15144: PPUSH
15145: LD_VAR 0 4
15149: PPUSH
15150: CALL_OW 488
15154: IFFALSE 15177
// begin result := [ x , y ] ;
15156: LD_ADDR_VAR 0 1
15160: PUSH
15161: LD_VAR 0 3
15165: PUSH
15166: LD_VAR 0 4
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: ST_TO_ADDR
// break ;
15175: GO 15179
// end ; end ;
15177: GO 14979
15179: POP
15180: POP
// if result then
15181: LD_VAR 0 1
15185: IFFALSE 15245
// begin ToLua ( playSibBomb() ) ;
15187: LD_STRING playSibBomb()
15189: PPUSH
15190: CALL_OW 559
// wait ( 0 0$14 ) ;
15194: LD_INT 490
15196: PPUSH
15197: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15201: LD_VAR 0 1
15205: PUSH
15206: LD_INT 1
15208: ARRAY
15209: PPUSH
15210: LD_VAR 0 1
15214: PUSH
15215: LD_INT 2
15217: ARRAY
15218: PPUSH
15219: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15223: LD_VAR 0 1
15227: PUSH
15228: LD_INT 1
15230: ARRAY
15231: PPUSH
15232: LD_VAR 0 1
15236: PUSH
15237: LD_INT 2
15239: ARRAY
15240: PPUSH
15241: CALL_OW 429
// end ; end ;
15245: LD_VAR 0 1
15249: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15250: LD_EXP 19
15254: IFFALSE 15262
15256: PUSH
15257: LD_EXP 41
15261: AND
15262: IFFALSE 15274
15264: GO 15266
15266: DISABLE
// YouLost (  ) ;
15267: LD_STRING 
15269: PPUSH
15270: CALL_OW 104
15274: END
// every 0 0$1 trigger StreamModeActive and sFog do
15275: LD_EXP 19
15279: IFFALSE 15287
15281: PUSH
15282: LD_EXP 40
15286: AND
15287: IFFALSE 15301
15289: GO 15291
15291: DISABLE
// FogOff ( your_side ) ;
15292: LD_OWVAR 2
15296: PPUSH
15297: CALL_OW 344
15301: END
// every 0 0$1 trigger StreamModeActive and sSun do
15302: LD_EXP 19
15306: IFFALSE 15314
15308: PUSH
15309: LD_EXP 42
15313: AND
15314: IFFALSE 15342
15316: GO 15318
15318: DISABLE
// begin solar_recharge_percent := 0 ;
15319: LD_ADDR_OWVAR 79
15323: PUSH
15324: LD_INT 0
15326: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15327: LD_INT 10500
15329: PPUSH
15330: CALL_OW 67
// solar_recharge_percent := 100 ;
15334: LD_ADDR_OWVAR 79
15338: PUSH
15339: LD_INT 100
15341: ST_TO_ADDR
// end ;
15342: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15343: LD_EXP 19
15347: IFFALSE 15355
15349: PUSH
15350: LD_EXP 43
15354: AND
15355: IFFALSE 15594
15357: GO 15359
15359: DISABLE
15360: LD_INT 0
15362: PPUSH
15363: PPUSH
15364: PPUSH
// begin tmp := [ ] ;
15365: LD_ADDR_VAR 0 3
15369: PUSH
15370: EMPTY
15371: ST_TO_ADDR
// for i := 1 to 6 do
15372: LD_ADDR_VAR 0 1
15376: PUSH
15377: DOUBLE
15378: LD_INT 1
15380: DEC
15381: ST_TO_ADDR
15382: LD_INT 6
15384: PUSH
15385: FOR_TO
15386: IFFALSE 15491
// begin uc_nation := nation_nature ;
15388: LD_ADDR_OWVAR 21
15392: PUSH
15393: LD_INT 0
15395: ST_TO_ADDR
// uc_side := 0 ;
15396: LD_ADDR_OWVAR 20
15400: PUSH
15401: LD_INT 0
15403: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15404: LD_ADDR_OWVAR 29
15408: PUSH
15409: LD_INT 12
15411: PUSH
15412: LD_INT 12
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: ST_TO_ADDR
// hc_agressivity := 20 ;
15419: LD_ADDR_OWVAR 35
15423: PUSH
15424: LD_INT 20
15426: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15427: LD_ADDR_OWVAR 28
15431: PUSH
15432: LD_INT 17
15434: ST_TO_ADDR
// hc_gallery :=  ;
15435: LD_ADDR_OWVAR 33
15439: PUSH
15440: LD_STRING 
15442: ST_TO_ADDR
// hc_name :=  ;
15443: LD_ADDR_OWVAR 26
15447: PUSH
15448: LD_STRING 
15450: ST_TO_ADDR
// un := CreateHuman ;
15451: LD_ADDR_VAR 0 2
15455: PUSH
15456: CALL_OW 44
15460: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15461: LD_VAR 0 2
15465: PPUSH
15466: LD_INT 1
15468: PPUSH
15469: CALL_OW 51
// tmp := tmp ^ un ;
15473: LD_ADDR_VAR 0 3
15477: PUSH
15478: LD_VAR 0 3
15482: PUSH
15483: LD_VAR 0 2
15487: ADD
15488: ST_TO_ADDR
// end ;
15489: GO 15385
15491: POP
15492: POP
// repeat wait ( 0 0$1 ) ;
15493: LD_INT 35
15495: PPUSH
15496: CALL_OW 67
// for un in tmp do
15500: LD_ADDR_VAR 0 2
15504: PUSH
15505: LD_VAR 0 3
15509: PUSH
15510: FOR_IN
15511: IFFALSE 15585
// begin if IsDead ( un ) then
15513: LD_VAR 0 2
15517: PPUSH
15518: CALL_OW 301
15522: IFFALSE 15542
// begin tmp := tmp diff un ;
15524: LD_ADDR_VAR 0 3
15528: PUSH
15529: LD_VAR 0 3
15533: PUSH
15534: LD_VAR 0 2
15538: DIFF
15539: ST_TO_ADDR
// continue ;
15540: GO 15510
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15542: LD_VAR 0 2
15546: PPUSH
15547: LD_INT 3
15549: PUSH
15550: LD_INT 22
15552: PUSH
15553: LD_INT 0
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PPUSH
15564: CALL_OW 69
15568: PPUSH
15569: LD_VAR 0 2
15573: PPUSH
15574: CALL_OW 74
15578: PPUSH
15579: CALL_OW 115
// end ;
15583: GO 15510
15585: POP
15586: POP
// until not tmp ;
15587: LD_VAR 0 3
15591: NOT
15592: IFFALSE 15493
// end ;
15594: PPOPN 3
15596: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15597: LD_EXP 19
15601: IFFALSE 15609
15603: PUSH
15604: LD_EXP 44
15608: AND
15609: IFFALSE 15663
15611: GO 15613
15613: DISABLE
// begin ToLua ( displayTroll(); ) ;
15614: LD_STRING displayTroll();
15616: PPUSH
15617: CALL_OW 559
// wait ( 3 3$00 ) ;
15621: LD_INT 6300
15623: PPUSH
15624: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15628: LD_STRING hideTroll();
15630: PPUSH
15631: CALL_OW 559
// wait ( 1 1$00 ) ;
15635: LD_INT 2100
15637: PPUSH
15638: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15642: LD_STRING displayTroll();
15644: PPUSH
15645: CALL_OW 559
// wait ( 1 1$00 ) ;
15649: LD_INT 2100
15651: PPUSH
15652: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15656: LD_STRING hideTroll();
15658: PPUSH
15659: CALL_OW 559
// end ;
15663: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15664: LD_EXP 19
15668: IFFALSE 15676
15670: PUSH
15671: LD_EXP 45
15675: AND
15676: IFFALSE 15739
15678: GO 15680
15680: DISABLE
15681: LD_INT 0
15683: PPUSH
// begin p := 0 ;
15684: LD_ADDR_VAR 0 1
15688: PUSH
15689: LD_INT 0
15691: ST_TO_ADDR
// repeat game_speed := 1 ;
15692: LD_ADDR_OWVAR 65
15696: PUSH
15697: LD_INT 1
15699: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15700: LD_INT 35
15702: PPUSH
15703: CALL_OW 67
// p := p + 1 ;
15707: LD_ADDR_VAR 0 1
15711: PUSH
15712: LD_VAR 0 1
15716: PUSH
15717: LD_INT 1
15719: PLUS
15720: ST_TO_ADDR
// until p >= 60 ;
15721: LD_VAR 0 1
15725: PUSH
15726: LD_INT 60
15728: GREATEREQUAL
15729: IFFALSE 15692
// game_speed := 4 ;
15731: LD_ADDR_OWVAR 65
15735: PUSH
15736: LD_INT 4
15738: ST_TO_ADDR
// end ;
15739: PPOPN 1
15741: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15742: LD_EXP 19
15746: IFFALSE 15754
15748: PUSH
15749: LD_EXP 46
15753: AND
15754: IFFALSE 15900
15756: GO 15758
15758: DISABLE
15759: LD_INT 0
15761: PPUSH
15762: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15763: LD_ADDR_VAR 0 1
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_OWVAR 2
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 2
15782: PUSH
15783: LD_INT 30
15785: PUSH
15786: LD_INT 0
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 30
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PPUSH
15812: CALL_OW 69
15816: ST_TO_ADDR
// if not depot then
15817: LD_VAR 0 1
15821: NOT
15822: IFFALSE 15826
// exit ;
15824: GO 15900
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15826: LD_ADDR_VAR 0 2
15830: PUSH
15831: LD_VAR 0 1
15835: PUSH
15836: LD_INT 1
15838: PPUSH
15839: LD_VAR 0 1
15843: PPUSH
15844: CALL_OW 12
15848: ARRAY
15849: PPUSH
15850: CALL_OW 274
15854: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15855: LD_VAR 0 2
15859: PPUSH
15860: LD_INT 1
15862: PPUSH
15863: LD_INT 0
15865: PPUSH
15866: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15870: LD_VAR 0 2
15874: PPUSH
15875: LD_INT 2
15877: PPUSH
15878: LD_INT 0
15880: PPUSH
15881: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15885: LD_VAR 0 2
15889: PPUSH
15890: LD_INT 3
15892: PPUSH
15893: LD_INT 0
15895: PPUSH
15896: CALL_OW 277
// end ;
15900: PPOPN 2
15902: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15903: LD_EXP 19
15907: IFFALSE 15915
15909: PUSH
15910: LD_EXP 47
15914: AND
15915: IFFALSE 16012
15917: GO 15919
15919: DISABLE
15920: LD_INT 0
15922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15923: LD_ADDR_VAR 0 1
15927: PUSH
15928: LD_INT 22
15930: PUSH
15931: LD_OWVAR 2
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 21
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 3
15952: PUSH
15953: LD_INT 23
15955: PUSH
15956: LD_INT 0
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: ST_TO_ADDR
// if not tmp then
15977: LD_VAR 0 1
15981: NOT
15982: IFFALSE 15986
// exit ;
15984: GO 16012
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15986: LD_VAR 0 1
15990: PUSH
15991: LD_INT 1
15993: PPUSH
15994: LD_VAR 0 1
15998: PPUSH
15999: CALL_OW 12
16003: ARRAY
16004: PPUSH
16005: LD_INT 200
16007: PPUSH
16008: CALL_OW 234
// end ;
16012: PPOPN 1
16014: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16015: LD_EXP 19
16019: IFFALSE 16027
16021: PUSH
16022: LD_EXP 48
16026: AND
16027: IFFALSE 16106
16029: GO 16031
16031: DISABLE
16032: LD_INT 0
16034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16035: LD_ADDR_VAR 0 1
16039: PUSH
16040: LD_INT 22
16042: PUSH
16043: LD_OWVAR 2
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 21
16054: PUSH
16055: LD_INT 2
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PPUSH
16066: CALL_OW 69
16070: ST_TO_ADDR
// if not tmp then
16071: LD_VAR 0 1
16075: NOT
16076: IFFALSE 16080
// exit ;
16078: GO 16106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16080: LD_VAR 0 1
16084: PUSH
16085: LD_INT 1
16087: PPUSH
16088: LD_VAR 0 1
16092: PPUSH
16093: CALL_OW 12
16097: ARRAY
16098: PPUSH
16099: LD_INT 60
16101: PPUSH
16102: CALL_OW 234
// end ;
16106: PPOPN 1
16108: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16109: LD_EXP 19
16113: IFFALSE 16121
16115: PUSH
16116: LD_EXP 49
16120: AND
16121: IFFALSE 16220
16123: GO 16125
16125: DISABLE
16126: LD_INT 0
16128: PPUSH
16129: PPUSH
// begin enable ;
16130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16131: LD_ADDR_VAR 0 1
16135: PUSH
16136: LD_INT 22
16138: PUSH
16139: LD_OWVAR 2
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 61
16150: PUSH
16151: EMPTY
16152: LIST
16153: PUSH
16154: LD_INT 33
16156: PUSH
16157: LD_INT 2
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: PPUSH
16169: CALL_OW 69
16173: ST_TO_ADDR
// if not tmp then
16174: LD_VAR 0 1
16178: NOT
16179: IFFALSE 16183
// exit ;
16181: GO 16220
// for i in tmp do
16183: LD_ADDR_VAR 0 2
16187: PUSH
16188: LD_VAR 0 1
16192: PUSH
16193: FOR_IN
16194: IFFALSE 16218
// if IsControledBy ( i ) then
16196: LD_VAR 0 2
16200: PPUSH
16201: CALL_OW 312
16205: IFFALSE 16216
// ComUnlink ( i ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: CALL_OW 136
16216: GO 16193
16218: POP
16219: POP
// end ;
16220: PPOPN 2
16222: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16223: LD_EXP 19
16227: IFFALSE 16235
16229: PUSH
16230: LD_EXP 50
16234: AND
16235: IFFALSE 16375
16237: GO 16239
16239: DISABLE
16240: LD_INT 0
16242: PPUSH
16243: PPUSH
// begin ToLua ( displayPowell(); ) ;
16244: LD_STRING displayPowell();
16246: PPUSH
16247: CALL_OW 559
// uc_side := 0 ;
16251: LD_ADDR_OWVAR 20
16255: PUSH
16256: LD_INT 0
16258: ST_TO_ADDR
// uc_nation := 2 ;
16259: LD_ADDR_OWVAR 21
16263: PUSH
16264: LD_INT 2
16266: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16267: LD_ADDR_OWVAR 37
16271: PUSH
16272: LD_INT 14
16274: ST_TO_ADDR
// vc_engine := engine_siberite ;
16275: LD_ADDR_OWVAR 39
16279: PUSH
16280: LD_INT 3
16282: ST_TO_ADDR
// vc_control := control_apeman ;
16283: LD_ADDR_OWVAR 38
16287: PUSH
16288: LD_INT 5
16290: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16291: LD_ADDR_OWVAR 40
16295: PUSH
16296: LD_INT 29
16298: ST_TO_ADDR
// un := CreateVehicle ;
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: CALL_OW 45
16308: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16309: LD_VAR 0 2
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16321: LD_INT 35
16323: PPUSH
16324: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16328: LD_VAR 0 2
16332: PPUSH
16333: LD_INT 22
16335: PUSH
16336: LD_OWVAR 2
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PPUSH
16345: CALL_OW 69
16349: PPUSH
16350: LD_VAR 0 2
16354: PPUSH
16355: CALL_OW 74
16359: PPUSH
16360: CALL_OW 115
// until IsDead ( un ) ;
16364: LD_VAR 0 2
16368: PPUSH
16369: CALL_OW 301
16373: IFFALSE 16321
// end ;
16375: PPOPN 2
16377: END
// every 0 0$1 trigger StreamModeActive and sStu do
16378: LD_EXP 19
16382: IFFALSE 16390
16384: PUSH
16385: LD_EXP 58
16389: AND
16390: IFFALSE 16406
16392: GO 16394
16394: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16395: LD_STRING displayStucuk();
16397: PPUSH
16398: CALL_OW 559
// ResetFog ;
16402: CALL_OW 335
// end ;
16406: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16407: LD_EXP 19
16411: IFFALSE 16419
16413: PUSH
16414: LD_EXP 51
16418: AND
16419: IFFALSE 16560
16421: GO 16423
16423: DISABLE
16424: LD_INT 0
16426: PPUSH
16427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16428: LD_ADDR_VAR 0 2
16432: PUSH
16433: LD_INT 22
16435: PUSH
16436: LD_OWVAR 2
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: ST_TO_ADDR
// if not tmp then
16464: LD_VAR 0 2
16468: NOT
16469: IFFALSE 16473
// exit ;
16471: GO 16560
// un := tmp [ rand ( 1 , tmp ) ] ;
16473: LD_ADDR_VAR 0 1
16477: PUSH
16478: LD_VAR 0 2
16482: PUSH
16483: LD_INT 1
16485: PPUSH
16486: LD_VAR 0 2
16490: PPUSH
16491: CALL_OW 12
16495: ARRAY
16496: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16497: LD_VAR 0 1
16501: PPUSH
16502: LD_INT 0
16504: PPUSH
16505: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16509: LD_VAR 0 1
16513: PPUSH
16514: LD_OWVAR 3
16518: PUSH
16519: LD_VAR 0 1
16523: DIFF
16524: PPUSH
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 74
16534: PPUSH
16535: CALL_OW 115
// wait ( 0 0$20 ) ;
16539: LD_INT 700
16541: PPUSH
16542: CALL_OW 67
// SetSide ( un , your_side ) ;
16546: LD_VAR 0 1
16550: PPUSH
16551: LD_OWVAR 2
16555: PPUSH
16556: CALL_OW 235
// end ;
16560: PPOPN 2
16562: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16563: LD_EXP 19
16567: IFFALSE 16575
16569: PUSH
16570: LD_EXP 52
16574: AND
16575: IFFALSE 16681
16577: GO 16579
16579: DISABLE
16580: LD_INT 0
16582: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16583: LD_ADDR_VAR 0 1
16587: PUSH
16588: LD_INT 22
16590: PUSH
16591: LD_OWVAR 2
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 2
16602: PUSH
16603: LD_INT 30
16605: PUSH
16606: LD_INT 0
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 30
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PPUSH
16632: CALL_OW 69
16636: ST_TO_ADDR
// if not depot then
16637: LD_VAR 0 1
16641: NOT
16642: IFFALSE 16646
// exit ;
16644: GO 16681
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16646: LD_VAR 0 1
16650: PUSH
16651: LD_INT 1
16653: ARRAY
16654: PPUSH
16655: CALL_OW 250
16659: PPUSH
16660: LD_VAR 0 1
16664: PUSH
16665: LD_INT 1
16667: ARRAY
16668: PPUSH
16669: CALL_OW 251
16673: PPUSH
16674: LD_INT 70
16676: PPUSH
16677: CALL_OW 495
// end ;
16681: PPOPN 1
16683: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16684: LD_EXP 19
16688: IFFALSE 16696
16690: PUSH
16691: LD_EXP 53
16695: AND
16696: IFFALSE 16907
16698: GO 16700
16700: DISABLE
16701: LD_INT 0
16703: PPUSH
16704: PPUSH
16705: PPUSH
16706: PPUSH
16707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16708: LD_ADDR_VAR 0 5
16712: PUSH
16713: LD_INT 22
16715: PUSH
16716: LD_OWVAR 2
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 21
16727: PUSH
16728: LD_INT 1
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PPUSH
16739: CALL_OW 69
16743: ST_TO_ADDR
// if not tmp then
16744: LD_VAR 0 5
16748: NOT
16749: IFFALSE 16753
// exit ;
16751: GO 16907
// for i in tmp do
16753: LD_ADDR_VAR 0 1
16757: PUSH
16758: LD_VAR 0 5
16762: PUSH
16763: FOR_IN
16764: IFFALSE 16905
// begin d := rand ( 0 , 5 ) ;
16766: LD_ADDR_VAR 0 4
16770: PUSH
16771: LD_INT 0
16773: PPUSH
16774: LD_INT 5
16776: PPUSH
16777: CALL_OW 12
16781: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16782: LD_ADDR_VAR 0 2
16786: PUSH
16787: LD_VAR 0 1
16791: PPUSH
16792: CALL_OW 250
16796: PPUSH
16797: LD_VAR 0 4
16801: PPUSH
16802: LD_INT 3
16804: PPUSH
16805: LD_INT 12
16807: PPUSH
16808: CALL_OW 12
16812: PPUSH
16813: CALL_OW 272
16817: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16818: LD_ADDR_VAR 0 3
16822: PUSH
16823: LD_VAR 0 1
16827: PPUSH
16828: CALL_OW 251
16832: PPUSH
16833: LD_VAR 0 4
16837: PPUSH
16838: LD_INT 3
16840: PPUSH
16841: LD_INT 12
16843: PPUSH
16844: CALL_OW 12
16848: PPUSH
16849: CALL_OW 273
16853: ST_TO_ADDR
// if ValidHex ( x , y ) then
16854: LD_VAR 0 2
16858: PPUSH
16859: LD_VAR 0 3
16863: PPUSH
16864: CALL_OW 488
16868: IFFALSE 16903
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16870: LD_VAR 0 1
16874: PPUSH
16875: LD_VAR 0 2
16879: PPUSH
16880: LD_VAR 0 3
16884: PPUSH
16885: LD_INT 3
16887: PPUSH
16888: LD_INT 6
16890: PPUSH
16891: CALL_OW 12
16895: PPUSH
16896: LD_INT 1
16898: PPUSH
16899: CALL_OW 483
// end ;
16903: GO 16763
16905: POP
16906: POP
// end ;
16907: PPOPN 5
16909: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16910: LD_EXP 19
16914: IFFALSE 16922
16916: PUSH
16917: LD_EXP 54
16921: AND
16922: IFFALSE 17016
16924: GO 16926
16926: DISABLE
16927: LD_INT 0
16929: PPUSH
16930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16931: LD_ADDR_VAR 0 2
16935: PUSH
16936: LD_INT 22
16938: PUSH
16939: LD_OWVAR 2
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 32
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 21
16960: PUSH
16961: LD_INT 2
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: LIST
16972: PPUSH
16973: CALL_OW 69
16977: ST_TO_ADDR
// if not tmp then
16978: LD_VAR 0 2
16982: NOT
16983: IFFALSE 16987
// exit ;
16985: GO 17016
// for i in tmp do
16987: LD_ADDR_VAR 0 1
16991: PUSH
16992: LD_VAR 0 2
16996: PUSH
16997: FOR_IN
16998: IFFALSE 17014
// SetFuel ( i , 0 ) ;
17000: LD_VAR 0 1
17004: PPUSH
17005: LD_INT 0
17007: PPUSH
17008: CALL_OW 240
17012: GO 16997
17014: POP
17015: POP
// end ;
17016: PPOPN 2
17018: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17019: LD_EXP 19
17023: IFFALSE 17031
17025: PUSH
17026: LD_EXP 55
17030: AND
17031: IFFALSE 17097
17033: GO 17035
17035: DISABLE
17036: LD_INT 0
17038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17039: LD_ADDR_VAR 0 1
17043: PUSH
17044: LD_INT 22
17046: PUSH
17047: LD_OWVAR 2
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 30
17058: PUSH
17059: LD_INT 29
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PPUSH
17070: CALL_OW 69
17074: ST_TO_ADDR
// if not tmp then
17075: LD_VAR 0 1
17079: NOT
17080: IFFALSE 17084
// exit ;
17082: GO 17097
// DestroyUnit ( tmp [ 1 ] ) ;
17084: LD_VAR 0 1
17088: PUSH
17089: LD_INT 1
17091: ARRAY
17092: PPUSH
17093: CALL_OW 65
// end ;
17097: PPOPN 1
17099: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17100: LD_EXP 19
17104: IFFALSE 17112
17106: PUSH
17107: LD_EXP 57
17111: AND
17112: IFFALSE 17241
17114: GO 17116
17116: DISABLE
17117: LD_INT 0
17119: PPUSH
// begin uc_side := 0 ;
17120: LD_ADDR_OWVAR 20
17124: PUSH
17125: LD_INT 0
17127: ST_TO_ADDR
// uc_nation := nation_arabian ;
17128: LD_ADDR_OWVAR 21
17132: PUSH
17133: LD_INT 2
17135: ST_TO_ADDR
// hc_gallery :=  ;
17136: LD_ADDR_OWVAR 33
17140: PUSH
17141: LD_STRING 
17143: ST_TO_ADDR
// hc_name :=  ;
17144: LD_ADDR_OWVAR 26
17148: PUSH
17149: LD_STRING 
17151: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17152: LD_INT 1
17154: PPUSH
17155: LD_INT 11
17157: PPUSH
17158: LD_INT 10
17160: PPUSH
17161: CALL_OW 380
// un := CreateHuman ;
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: CALL_OW 44
17174: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17175: LD_VAR 0 1
17179: PPUSH
17180: LD_INT 1
17182: PPUSH
17183: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17187: LD_INT 35
17189: PPUSH
17190: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17194: LD_VAR 0 1
17198: PPUSH
17199: LD_INT 22
17201: PUSH
17202: LD_OWVAR 2
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PPUSH
17211: CALL_OW 69
17215: PPUSH
17216: LD_VAR 0 1
17220: PPUSH
17221: CALL_OW 74
17225: PPUSH
17226: CALL_OW 115
// until IsDead ( un ) ;
17230: LD_VAR 0 1
17234: PPUSH
17235: CALL_OW 301
17239: IFFALSE 17187
// end ;
17241: PPOPN 1
17243: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17244: LD_EXP 19
17248: IFFALSE 17256
17250: PUSH
17251: LD_EXP 59
17255: AND
17256: IFFALSE 17268
17258: GO 17260
17260: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17261: LD_STRING earthquake(getX(game), 0, 32)
17263: PPUSH
17264: CALL_OW 559
17268: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17269: LD_EXP 19
17273: IFFALSE 17281
17275: PUSH
17276: LD_EXP 60
17280: AND
17281: IFFALSE 17372
17283: GO 17285
17285: DISABLE
17286: LD_INT 0
17288: PPUSH
// begin enable ;
17289: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17290: LD_ADDR_VAR 0 1
17294: PUSH
17295: LD_INT 22
17297: PUSH
17298: LD_OWVAR 2
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 21
17309: PUSH
17310: LD_INT 2
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 33
17319: PUSH
17320: LD_INT 3
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: PPUSH
17332: CALL_OW 69
17336: ST_TO_ADDR
// if not tmp then
17337: LD_VAR 0 1
17341: NOT
17342: IFFALSE 17346
// exit ;
17344: GO 17372
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17346: LD_VAR 0 1
17350: PUSH
17351: LD_INT 1
17353: PPUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 12
17363: ARRAY
17364: PPUSH
17365: LD_INT 1
17367: PPUSH
17368: CALL_OW 234
// end ;
17372: PPOPN 1
17374: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17375: LD_EXP 19
17379: IFFALSE 17387
17381: PUSH
17382: LD_EXP 61
17386: AND
17387: IFFALSE 17528
17389: GO 17391
17391: DISABLE
17392: LD_INT 0
17394: PPUSH
17395: PPUSH
17396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17397: LD_ADDR_VAR 0 3
17401: PUSH
17402: LD_INT 22
17404: PUSH
17405: LD_OWVAR 2
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 25
17416: PUSH
17417: LD_INT 1
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PPUSH
17428: CALL_OW 69
17432: ST_TO_ADDR
// if not tmp then
17433: LD_VAR 0 3
17437: NOT
17438: IFFALSE 17442
// exit ;
17440: GO 17528
// un := tmp [ rand ( 1 , tmp ) ] ;
17442: LD_ADDR_VAR 0 2
17446: PUSH
17447: LD_VAR 0 3
17451: PUSH
17452: LD_INT 1
17454: PPUSH
17455: LD_VAR 0 3
17459: PPUSH
17460: CALL_OW 12
17464: ARRAY
17465: ST_TO_ADDR
// if Crawls ( un ) then
17466: LD_VAR 0 2
17470: PPUSH
17471: CALL_OW 318
17475: IFFALSE 17486
// ComWalk ( un ) ;
17477: LD_VAR 0 2
17481: PPUSH
17482: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17486: LD_VAR 0 2
17490: PPUSH
17491: LD_INT 9
17493: PPUSH
17494: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17498: LD_INT 28
17500: PPUSH
17501: LD_OWVAR 2
17505: PPUSH
17506: LD_INT 2
17508: PPUSH
17509: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17513: LD_INT 29
17515: PPUSH
17516: LD_OWVAR 2
17520: PPUSH
17521: LD_INT 2
17523: PPUSH
17524: CALL_OW 322
// end ;
17528: PPOPN 3
17530: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17531: LD_EXP 19
17535: IFFALSE 17543
17537: PUSH
17538: LD_EXP 62
17542: AND
17543: IFFALSE 17654
17545: GO 17547
17547: DISABLE
17548: LD_INT 0
17550: PPUSH
17551: PPUSH
17552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17553: LD_ADDR_VAR 0 3
17557: PUSH
17558: LD_INT 22
17560: PUSH
17561: LD_OWVAR 2
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 25
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PPUSH
17584: CALL_OW 69
17588: ST_TO_ADDR
// if not tmp then
17589: LD_VAR 0 3
17593: NOT
17594: IFFALSE 17598
// exit ;
17596: GO 17654
// un := tmp [ rand ( 1 , tmp ) ] ;
17598: LD_ADDR_VAR 0 2
17602: PUSH
17603: LD_VAR 0 3
17607: PUSH
17608: LD_INT 1
17610: PPUSH
17611: LD_VAR 0 3
17615: PPUSH
17616: CALL_OW 12
17620: ARRAY
17621: ST_TO_ADDR
// if Crawls ( un ) then
17622: LD_VAR 0 2
17626: PPUSH
17627: CALL_OW 318
17631: IFFALSE 17642
// ComWalk ( un ) ;
17633: LD_VAR 0 2
17637: PPUSH
17638: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17642: LD_VAR 0 2
17646: PPUSH
17647: LD_INT 8
17649: PPUSH
17650: CALL_OW 336
// end ;
17654: PPOPN 3
17656: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17657: LD_EXP 19
17661: IFFALSE 17669
17663: PUSH
17664: LD_EXP 63
17668: AND
17669: IFFALSE 17813
17671: GO 17673
17673: DISABLE
17674: LD_INT 0
17676: PPUSH
17677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17678: LD_ADDR_VAR 0 2
17682: PUSH
17683: LD_INT 22
17685: PUSH
17686: LD_OWVAR 2
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 21
17697: PUSH
17698: LD_INT 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 2
17707: PUSH
17708: LD_INT 34
17710: PUSH
17711: LD_INT 12
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 34
17720: PUSH
17721: LD_INT 51
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 34
17730: PUSH
17731: LD_INT 32
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: LIST
17748: PPUSH
17749: CALL_OW 69
17753: ST_TO_ADDR
// if not tmp then
17754: LD_VAR 0 2
17758: NOT
17759: IFFALSE 17763
// exit ;
17761: GO 17813
// for i in tmp do
17763: LD_ADDR_VAR 0 1
17767: PUSH
17768: LD_VAR 0 2
17772: PUSH
17773: FOR_IN
17774: IFFALSE 17811
// if GetCargo ( i , mat_artifact ) = 0 then
17776: LD_VAR 0 1
17780: PPUSH
17781: LD_INT 4
17783: PPUSH
17784: CALL_OW 289
17788: PUSH
17789: LD_INT 0
17791: EQUAL
17792: IFFALSE 17809
// SetCargo ( i , mat_siberit , 100 ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 3
17801: PPUSH
17802: LD_INT 100
17804: PPUSH
17805: CALL_OW 290
17809: GO 17773
17811: POP
17812: POP
// end ;
17813: PPOPN 2
17815: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17816: LD_EXP 19
17820: IFFALSE 17828
17822: PUSH
17823: LD_EXP 64
17827: AND
17828: IFFALSE 18011
17830: GO 17832
17832: DISABLE
17833: LD_INT 0
17835: PPUSH
17836: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17837: LD_ADDR_VAR 0 2
17841: PUSH
17842: LD_INT 22
17844: PUSH
17845: LD_OWVAR 2
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PPUSH
17854: CALL_OW 69
17858: ST_TO_ADDR
// if not tmp then
17859: LD_VAR 0 2
17863: NOT
17864: IFFALSE 17868
// exit ;
17866: GO 18011
// for i := 1 to 2 do
17868: LD_ADDR_VAR 0 1
17872: PUSH
17873: DOUBLE
17874: LD_INT 1
17876: DEC
17877: ST_TO_ADDR
17878: LD_INT 2
17880: PUSH
17881: FOR_TO
17882: IFFALSE 18009
// begin uc_side := your_side ;
17884: LD_ADDR_OWVAR 20
17888: PUSH
17889: LD_OWVAR 2
17893: ST_TO_ADDR
// uc_nation := nation_american ;
17894: LD_ADDR_OWVAR 21
17898: PUSH
17899: LD_INT 1
17901: ST_TO_ADDR
// vc_chassis := us_morphling ;
17902: LD_ADDR_OWVAR 37
17906: PUSH
17907: LD_INT 5
17909: ST_TO_ADDR
// vc_engine := engine_siberite ;
17910: LD_ADDR_OWVAR 39
17914: PUSH
17915: LD_INT 3
17917: ST_TO_ADDR
// vc_control := control_computer ;
17918: LD_ADDR_OWVAR 38
17922: PUSH
17923: LD_INT 3
17925: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17926: LD_ADDR_OWVAR 40
17930: PUSH
17931: LD_INT 10
17933: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17934: LD_VAR 0 2
17938: PUSH
17939: LD_INT 1
17941: ARRAY
17942: PPUSH
17943: CALL_OW 310
17947: NOT
17948: IFFALSE 17995
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17950: CALL_OW 45
17954: PPUSH
17955: LD_VAR 0 2
17959: PUSH
17960: LD_INT 1
17962: ARRAY
17963: PPUSH
17964: CALL_OW 250
17968: PPUSH
17969: LD_VAR 0 2
17973: PUSH
17974: LD_INT 1
17976: ARRAY
17977: PPUSH
17978: CALL_OW 251
17982: PPUSH
17983: LD_INT 12
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: CALL_OW 50
17993: GO 18007
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17995: CALL_OW 45
17999: PPUSH
18000: LD_INT 1
18002: PPUSH
18003: CALL_OW 51
// end ;
18007: GO 17881
18009: POP
18010: POP
// end ;
18011: PPOPN 2
18013: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18014: LD_EXP 19
18018: IFFALSE 18026
18020: PUSH
18021: LD_EXP 65
18025: AND
18026: IFFALSE 18248
18028: GO 18030
18030: DISABLE
18031: LD_INT 0
18033: PPUSH
18034: PPUSH
18035: PPUSH
18036: PPUSH
18037: PPUSH
18038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18039: LD_ADDR_VAR 0 6
18043: PUSH
18044: LD_INT 22
18046: PUSH
18047: LD_OWVAR 2
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 21
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 3
18068: PUSH
18069: LD_INT 23
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: PPUSH
18088: CALL_OW 69
18092: ST_TO_ADDR
// if not tmp then
18093: LD_VAR 0 6
18097: NOT
18098: IFFALSE 18102
// exit ;
18100: GO 18248
// s1 := rand ( 1 , 4 ) ;
18102: LD_ADDR_VAR 0 2
18106: PUSH
18107: LD_INT 1
18109: PPUSH
18110: LD_INT 4
18112: PPUSH
18113: CALL_OW 12
18117: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18118: LD_ADDR_VAR 0 4
18122: PUSH
18123: LD_VAR 0 6
18127: PUSH
18128: LD_INT 1
18130: ARRAY
18131: PPUSH
18132: LD_VAR 0 2
18136: PPUSH
18137: CALL_OW 259
18141: ST_TO_ADDR
// if s1 = 1 then
18142: LD_VAR 0 2
18146: PUSH
18147: LD_INT 1
18149: EQUAL
18150: IFFALSE 18170
// s2 := rand ( 2 , 4 ) else
18152: LD_ADDR_VAR 0 3
18156: PUSH
18157: LD_INT 2
18159: PPUSH
18160: LD_INT 4
18162: PPUSH
18163: CALL_OW 12
18167: ST_TO_ADDR
18168: GO 18178
// s2 := 1 ;
18170: LD_ADDR_VAR 0 3
18174: PUSH
18175: LD_INT 1
18177: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18178: LD_ADDR_VAR 0 5
18182: PUSH
18183: LD_VAR 0 6
18187: PUSH
18188: LD_INT 1
18190: ARRAY
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: CALL_OW 259
18201: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18202: LD_VAR 0 6
18206: PUSH
18207: LD_INT 1
18209: ARRAY
18210: PPUSH
18211: LD_VAR 0 2
18215: PPUSH
18216: LD_VAR 0 5
18220: PPUSH
18221: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18225: LD_VAR 0 6
18229: PUSH
18230: LD_INT 1
18232: ARRAY
18233: PPUSH
18234: LD_VAR 0 3
18238: PPUSH
18239: LD_VAR 0 4
18243: PPUSH
18244: CALL_OW 237
// end ;
18248: PPOPN 6
18250: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18251: LD_EXP 19
18255: IFFALSE 18263
18257: PUSH
18258: LD_EXP 66
18262: AND
18263: IFFALSE 18342
18265: GO 18267
18267: DISABLE
18268: LD_INT 0
18270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18271: LD_ADDR_VAR 0 1
18275: PUSH
18276: LD_INT 22
18278: PUSH
18279: LD_OWVAR 2
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 30
18290: PUSH
18291: LD_INT 3
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PPUSH
18302: CALL_OW 69
18306: ST_TO_ADDR
// if not tmp then
18307: LD_VAR 0 1
18311: NOT
18312: IFFALSE 18316
// exit ;
18314: GO 18342
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18316: LD_VAR 0 1
18320: PUSH
18321: LD_INT 1
18323: PPUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 12
18333: ARRAY
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 234
// end ;
18342: PPOPN 1
18344: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18345: LD_EXP 19
18349: IFFALSE 18357
18351: PUSH
18352: LD_EXP 67
18356: AND
18357: IFFALSE 18469
18359: GO 18361
18361: DISABLE
18362: LD_INT 0
18364: PPUSH
18365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18366: LD_ADDR_VAR 0 2
18370: PUSH
18371: LD_INT 22
18373: PUSH
18374: LD_OWVAR 2
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 2
18385: PUSH
18386: LD_INT 30
18388: PUSH
18389: LD_INT 27
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 30
18398: PUSH
18399: LD_INT 26
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 30
18408: PUSH
18409: LD_INT 28
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PPUSH
18426: CALL_OW 69
18430: ST_TO_ADDR
// if not tmp then
18431: LD_VAR 0 2
18435: NOT
18436: IFFALSE 18440
// exit ;
18438: GO 18469
// for i in tmp do
18440: LD_ADDR_VAR 0 1
18444: PUSH
18445: LD_VAR 0 2
18449: PUSH
18450: FOR_IN
18451: IFFALSE 18467
// SetLives ( i , 1 ) ;
18453: LD_VAR 0 1
18457: PPUSH
18458: LD_INT 1
18460: PPUSH
18461: CALL_OW 234
18465: GO 18450
18467: POP
18468: POP
// end ;
18469: PPOPN 2
18471: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18472: LD_EXP 19
18476: IFFALSE 18484
18478: PUSH
18479: LD_EXP 68
18483: AND
18484: IFFALSE 18771
18486: GO 18488
18488: DISABLE
18489: LD_INT 0
18491: PPUSH
18492: PPUSH
18493: PPUSH
// begin i := rand ( 1 , 7 ) ;
18494: LD_ADDR_VAR 0 1
18498: PUSH
18499: LD_INT 1
18501: PPUSH
18502: LD_INT 7
18504: PPUSH
18505: CALL_OW 12
18509: ST_TO_ADDR
// case i of 1 :
18510: LD_VAR 0 1
18514: PUSH
18515: LD_INT 1
18517: DOUBLE
18518: EQUAL
18519: IFTRUE 18523
18521: GO 18533
18523: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18524: LD_STRING earthquake(getX(game), 0, 32)
18526: PPUSH
18527: CALL_OW 559
18531: GO 18771
18533: LD_INT 2
18535: DOUBLE
18536: EQUAL
18537: IFTRUE 18541
18539: GO 18555
18541: POP
// begin ToLua ( displayStucuk(); ) ;
18542: LD_STRING displayStucuk();
18544: PPUSH
18545: CALL_OW 559
// ResetFog ;
18549: CALL_OW 335
// end ; 3 :
18553: GO 18771
18555: LD_INT 3
18557: DOUBLE
18558: EQUAL
18559: IFTRUE 18563
18561: GO 18667
18563: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18564: LD_ADDR_VAR 0 2
18568: PUSH
18569: LD_INT 22
18571: PUSH
18572: LD_OWVAR 2
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 25
18583: PUSH
18584: LD_INT 1
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: ST_TO_ADDR
// if not tmp then
18600: LD_VAR 0 2
18604: NOT
18605: IFFALSE 18609
// exit ;
18607: GO 18771
// un := tmp [ rand ( 1 , tmp ) ] ;
18609: LD_ADDR_VAR 0 3
18613: PUSH
18614: LD_VAR 0 2
18618: PUSH
18619: LD_INT 1
18621: PPUSH
18622: LD_VAR 0 2
18626: PPUSH
18627: CALL_OW 12
18631: ARRAY
18632: ST_TO_ADDR
// if Crawls ( un ) then
18633: LD_VAR 0 3
18637: PPUSH
18638: CALL_OW 318
18642: IFFALSE 18653
// ComWalk ( un ) ;
18644: LD_VAR 0 3
18648: PPUSH
18649: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18653: LD_VAR 0 3
18657: PPUSH
18658: LD_INT 8
18660: PPUSH
18661: CALL_OW 336
// end ; 4 :
18665: GO 18771
18667: LD_INT 4
18669: DOUBLE
18670: EQUAL
18671: IFTRUE 18675
18673: GO 18749
18675: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18676: LD_ADDR_VAR 0 2
18680: PUSH
18681: LD_INT 22
18683: PUSH
18684: LD_OWVAR 2
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 30
18695: PUSH
18696: LD_INT 29
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PPUSH
18707: CALL_OW 69
18711: ST_TO_ADDR
// if not tmp then
18712: LD_VAR 0 2
18716: NOT
18717: IFFALSE 18721
// exit ;
18719: GO 18771
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18721: LD_VAR 0 2
18725: PUSH
18726: LD_INT 1
18728: ARRAY
18729: PPUSH
18730: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18734: LD_VAR 0 2
18738: PUSH
18739: LD_INT 1
18741: ARRAY
18742: PPUSH
18743: CALL_OW 65
// end ; 5 .. 7 :
18747: GO 18771
18749: LD_INT 5
18751: DOUBLE
18752: GREATEREQUAL
18753: IFFALSE 18761
18755: LD_INT 7
18757: DOUBLE
18758: LESSEQUAL
18759: IFTRUE 18763
18761: GO 18770
18763: POP
// StreamSibBomb ; end ;
18764: CALL 14952 0 0
18768: GO 18771
18770: POP
// end ;
18771: PPOPN 3
18773: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18774: LD_EXP 19
18778: IFFALSE 18786
18780: PUSH
18781: LD_EXP 69
18785: AND
18786: IFFALSE 18942
18788: GO 18790
18790: DISABLE
18791: LD_INT 0
18793: PPUSH
18794: PPUSH
18795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18796: LD_ADDR_VAR 0 2
18800: PUSH
18801: LD_INT 81
18803: PUSH
18804: LD_OWVAR 2
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: LD_INT 21
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 21
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PPUSH
18845: CALL_OW 69
18849: ST_TO_ADDR
// if not tmp then
18850: LD_VAR 0 2
18854: NOT
18855: IFFALSE 18859
// exit ;
18857: GO 18942
// p := 0 ;
18859: LD_ADDR_VAR 0 3
18863: PUSH
18864: LD_INT 0
18866: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18867: LD_INT 35
18869: PPUSH
18870: CALL_OW 67
// p := p + 1 ;
18874: LD_ADDR_VAR 0 3
18878: PUSH
18879: LD_VAR 0 3
18883: PUSH
18884: LD_INT 1
18886: PLUS
18887: ST_TO_ADDR
// for i in tmp do
18888: LD_ADDR_VAR 0 1
18892: PUSH
18893: LD_VAR 0 2
18897: PUSH
18898: FOR_IN
18899: IFFALSE 18930
// if GetLives ( i ) < 1000 then
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 256
18910: PUSH
18911: LD_INT 1000
18913: LESS
18914: IFFALSE 18928
// SetLives ( i , 1000 ) ;
18916: LD_VAR 0 1
18920: PPUSH
18921: LD_INT 1000
18923: PPUSH
18924: CALL_OW 234
18928: GO 18898
18930: POP
18931: POP
// until p > 20 ;
18932: LD_VAR 0 3
18936: PUSH
18937: LD_INT 20
18939: GREATER
18940: IFFALSE 18867
// end ;
18942: PPOPN 3
18944: END
// every 0 0$1 trigger StreamModeActive and sTime do
18945: LD_EXP 19
18949: IFFALSE 18957
18951: PUSH
18952: LD_EXP 70
18956: AND
18957: IFFALSE 18992
18959: GO 18961
18961: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18962: LD_INT 28
18964: PPUSH
18965: LD_OWVAR 2
18969: PPUSH
18970: LD_INT 2
18972: PPUSH
18973: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18977: LD_INT 30
18979: PPUSH
18980: LD_OWVAR 2
18984: PPUSH
18985: LD_INT 2
18987: PPUSH
18988: CALL_OW 322
// end ;
18992: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18993: LD_EXP 19
18997: IFFALSE 19005
18999: PUSH
19000: LD_EXP 71
19004: AND
19005: IFFALSE 19126
19007: GO 19009
19009: DISABLE
19010: LD_INT 0
19012: PPUSH
19013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19014: LD_ADDR_VAR 0 2
19018: PUSH
19019: LD_INT 22
19021: PUSH
19022: LD_OWVAR 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 21
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 3
19043: PUSH
19044: LD_INT 23
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL_OW 69
19067: ST_TO_ADDR
// if not tmp then
19068: LD_VAR 0 2
19072: NOT
19073: IFFALSE 19077
// exit ;
19075: GO 19126
// for i in tmp do
19077: LD_ADDR_VAR 0 1
19081: PUSH
19082: LD_VAR 0 2
19086: PUSH
19087: FOR_IN
19088: IFFALSE 19124
// begin if Crawls ( i ) then
19090: LD_VAR 0 1
19094: PPUSH
19095: CALL_OW 318
19099: IFFALSE 19110
// ComWalk ( i ) ;
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 138
// SetClass ( i , 2 ) ;
19110: LD_VAR 0 1
19114: PPUSH
19115: LD_INT 2
19117: PPUSH
19118: CALL_OW 336
// end ;
19122: GO 19087
19124: POP
19125: POP
// end ;
19126: PPOPN 2
19128: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19129: LD_EXP 19
19133: IFFALSE 19141
19135: PUSH
19136: LD_EXP 72
19140: AND
19141: IFFALSE 19431
19143: GO 19145
19145: DISABLE
19146: LD_INT 0
19148: PPUSH
19149: PPUSH
19150: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19151: LD_OWVAR 2
19155: PPUSH
19156: LD_INT 9
19158: PPUSH
19159: LD_INT 1
19161: PPUSH
19162: LD_INT 1
19164: PPUSH
19165: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19169: LD_INT 9
19171: PPUSH
19172: LD_OWVAR 2
19176: PPUSH
19177: CALL_OW 343
// uc_side := 9 ;
19181: LD_ADDR_OWVAR 20
19185: PUSH
19186: LD_INT 9
19188: ST_TO_ADDR
// uc_nation := 2 ;
19189: LD_ADDR_OWVAR 21
19193: PUSH
19194: LD_INT 2
19196: ST_TO_ADDR
// hc_name := Dark Warrior ;
19197: LD_ADDR_OWVAR 26
19201: PUSH
19202: LD_STRING Dark Warrior
19204: ST_TO_ADDR
// hc_gallery :=  ;
19205: LD_ADDR_OWVAR 33
19209: PUSH
19210: LD_STRING 
19212: ST_TO_ADDR
// hc_noskilllimit := true ;
19213: LD_ADDR_OWVAR 76
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19221: LD_ADDR_OWVAR 31
19225: PUSH
19226: LD_INT 30
19228: PUSH
19229: LD_INT 30
19231: PUSH
19232: LD_INT 30
19234: PUSH
19235: LD_INT 30
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: ST_TO_ADDR
// un := CreateHuman ;
19244: LD_ADDR_VAR 0 3
19248: PUSH
19249: CALL_OW 44
19253: ST_TO_ADDR
// hc_noskilllimit := false ;
19254: LD_ADDR_OWVAR 76
19258: PUSH
19259: LD_INT 0
19261: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19262: LD_VAR 0 3
19266: PPUSH
19267: LD_INT 1
19269: PPUSH
19270: CALL_OW 51
// ToLua ( playRanger() ) ;
19274: LD_STRING playRanger()
19276: PPUSH
19277: CALL_OW 559
// p := 0 ;
19281: LD_ADDR_VAR 0 2
19285: PUSH
19286: LD_INT 0
19288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19289: LD_INT 35
19291: PPUSH
19292: CALL_OW 67
// p := p + 1 ;
19296: LD_ADDR_VAR 0 2
19300: PUSH
19301: LD_VAR 0 2
19305: PUSH
19306: LD_INT 1
19308: PLUS
19309: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19310: LD_VAR 0 3
19314: PPUSH
19315: CALL_OW 256
19319: PUSH
19320: LD_INT 1000
19322: LESS
19323: IFFALSE 19337
// SetLives ( un , 1000 ) ;
19325: LD_VAR 0 3
19329: PPUSH
19330: LD_INT 1000
19332: PPUSH
19333: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19337: LD_VAR 0 3
19341: PPUSH
19342: LD_INT 81
19344: PUSH
19345: LD_OWVAR 2
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 91
19356: PUSH
19357: LD_VAR 0 3
19361: PUSH
19362: LD_INT 30
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PPUSH
19374: CALL_OW 69
19378: PPUSH
19379: LD_VAR 0 3
19383: PPUSH
19384: CALL_OW 74
19388: PPUSH
19389: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19393: LD_VAR 0 2
19397: PUSH
19398: LD_INT 80
19400: GREATER
19401: IFTRUE 19414
19403: PUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: CALL_OW 301
19413: OR
19414: IFFALSE 19289
// if un then
19416: LD_VAR 0 3
19420: IFFALSE 19431
// RemoveUnit ( un ) ;
19422: LD_VAR 0 3
19426: PPUSH
19427: CALL_OW 64
// end ;
19431: PPOPN 3
19433: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19434: LD_EXP 73
19438: IFFALSE 19554
19440: GO 19442
19442: DISABLE
19443: LD_INT 0
19445: PPUSH
19446: PPUSH
19447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: LD_INT 81
19455: PUSH
19456: LD_OWVAR 2
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 21
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PPUSH
19479: CALL_OW 69
19483: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19484: LD_STRING playComputer()
19486: PPUSH
19487: CALL_OW 559
// if not tmp then
19491: LD_VAR 0 2
19495: NOT
19496: IFFALSE 19500
// exit ;
19498: GO 19554
// for i in tmp do
19500: LD_ADDR_VAR 0 1
19504: PUSH
19505: LD_VAR 0 2
19509: PUSH
19510: FOR_IN
19511: IFFALSE 19552
// for j := 1 to 4 do
19513: LD_ADDR_VAR 0 3
19517: PUSH
19518: DOUBLE
19519: LD_INT 1
19521: DEC
19522: ST_TO_ADDR
19523: LD_INT 4
19525: PUSH
19526: FOR_TO
19527: IFFALSE 19548
// SetSkill ( i , j , 10 ) ;
19529: LD_VAR 0 1
19533: PPUSH
19534: LD_VAR 0 3
19538: PPUSH
19539: LD_INT 10
19541: PPUSH
19542: CALL_OW 237
19546: GO 19526
19548: POP
19549: POP
19550: GO 19510
19552: POP
19553: POP
// end ;
19554: PPOPN 3
19556: END
// every 0 0$1 trigger s30 do var i , tmp ;
19557: LD_EXP 74
19561: IFFALSE 19630
19563: GO 19565
19565: DISABLE
19566: LD_INT 0
19568: PPUSH
19569: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19570: LD_ADDR_VAR 0 2
19574: PUSH
19575: LD_INT 22
19577: PUSH
19578: LD_OWVAR 2
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 69
19591: ST_TO_ADDR
// if not tmp then
19592: LD_VAR 0 2
19596: NOT
19597: IFFALSE 19601
// exit ;
19599: GO 19630
// for i in tmp do
19601: LD_ADDR_VAR 0 1
19605: PUSH
19606: LD_VAR 0 2
19610: PUSH
19611: FOR_IN
19612: IFFALSE 19628
// SetLives ( i , 300 ) ;
19614: LD_VAR 0 1
19618: PPUSH
19619: LD_INT 300
19621: PPUSH
19622: CALL_OW 234
19626: GO 19611
19628: POP
19629: POP
// end ;
19630: PPOPN 2
19632: END
// every 0 0$1 trigger s60 do var i , tmp ;
19633: LD_EXP 75
19637: IFFALSE 19706
19639: GO 19641
19641: DISABLE
19642: LD_INT 0
19644: PPUSH
19645: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19646: LD_ADDR_VAR 0 2
19650: PUSH
19651: LD_INT 22
19653: PUSH
19654: LD_OWVAR 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PPUSH
19663: CALL_OW 69
19667: ST_TO_ADDR
// if not tmp then
19668: LD_VAR 0 2
19672: NOT
19673: IFFALSE 19677
// exit ;
19675: GO 19706
// for i in tmp do
19677: LD_ADDR_VAR 0 1
19681: PUSH
19682: LD_VAR 0 2
19686: PUSH
19687: FOR_IN
19688: IFFALSE 19704
// SetLives ( i , 600 ) ;
19690: LD_VAR 0 1
19694: PPUSH
19695: LD_INT 600
19697: PPUSH
19698: CALL_OW 234
19702: GO 19687
19704: POP
19705: POP
// end ;
19706: PPOPN 2
19708: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19709: LD_INT 0
19711: PPUSH
// case cmd of 301 :
19712: LD_VAR 0 1
19716: PUSH
19717: LD_INT 301
19719: DOUBLE
19720: EQUAL
19721: IFTRUE 19725
19723: GO 19757
19725: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19726: LD_VAR 0 6
19730: PPUSH
19731: LD_VAR 0 7
19735: PPUSH
19736: LD_VAR 0 8
19740: PPUSH
19741: LD_VAR 0 4
19745: PPUSH
19746: LD_VAR 0 5
19750: PPUSH
19751: CALL 20970 0 5
19755: GO 19878
19757: LD_INT 302
19759: DOUBLE
19760: EQUAL
19761: IFTRUE 19765
19763: GO 19802
19765: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19766: LD_VAR 0 6
19770: PPUSH
19771: LD_VAR 0 7
19775: PPUSH
19776: LD_VAR 0 8
19780: PPUSH
19781: LD_VAR 0 9
19785: PPUSH
19786: LD_VAR 0 4
19790: PPUSH
19791: LD_VAR 0 5
19795: PPUSH
19796: CALL 21061 0 6
19800: GO 19878
19802: LD_INT 303
19804: DOUBLE
19805: EQUAL
19806: IFTRUE 19810
19808: GO 19847
19810: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19811: LD_VAR 0 6
19815: PPUSH
19816: LD_VAR 0 7
19820: PPUSH
19821: LD_VAR 0 8
19825: PPUSH
19826: LD_VAR 0 9
19830: PPUSH
19831: LD_VAR 0 4
19835: PPUSH
19836: LD_VAR 0 5
19840: PPUSH
19841: CALL 19883 0 6
19845: GO 19878
19847: LD_INT 304
19849: DOUBLE
19850: EQUAL
19851: IFTRUE 19855
19853: GO 19877
19855: POP
// hHackTeleport ( unit , x , y ) ; end ;
19856: LD_VAR 0 2
19860: PPUSH
19861: LD_VAR 0 4
19865: PPUSH
19866: LD_VAR 0 5
19870: PPUSH
19871: CALL 21654 0 3
19875: GO 19878
19877: POP
// end ;
19878: LD_VAR 0 12
19882: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19883: LD_INT 0
19885: PPUSH
19886: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19887: LD_VAR 0 1
19891: PUSH
19892: LD_INT 1
19894: LESS
19895: IFTRUE 19907
19897: PUSH
19898: LD_VAR 0 1
19902: PUSH
19903: LD_INT 3
19905: GREATER
19906: OR
19907: IFTRUE 19925
19909: PUSH
19910: LD_VAR 0 5
19914: PPUSH
19915: LD_VAR 0 6
19919: PPUSH
19920: CALL_OW 428
19924: OR
19925: IFFALSE 19929
// exit ;
19927: GO 20657
// uc_side := your_side ;
19929: LD_ADDR_OWVAR 20
19933: PUSH
19934: LD_OWVAR 2
19938: ST_TO_ADDR
// uc_nation := nation ;
19939: LD_ADDR_OWVAR 21
19943: PUSH
19944: LD_VAR 0 1
19948: ST_TO_ADDR
// bc_level = 1 ;
19949: LD_ADDR_OWVAR 43
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// case btype of 1 :
19957: LD_VAR 0 2
19961: PUSH
19962: LD_INT 1
19964: DOUBLE
19965: EQUAL
19966: IFTRUE 19970
19968: GO 19981
19970: POP
// bc_type := b_depot ; 2 :
19971: LD_ADDR_OWVAR 42
19975: PUSH
19976: LD_INT 0
19978: ST_TO_ADDR
19979: GO 20601
19981: LD_INT 2
19983: DOUBLE
19984: EQUAL
19985: IFTRUE 19989
19987: GO 20000
19989: POP
// bc_type := b_warehouse ; 3 :
19990: LD_ADDR_OWVAR 42
19994: PUSH
19995: LD_INT 1
19997: ST_TO_ADDR
19998: GO 20601
20000: LD_INT 3
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20019
20008: POP
// bc_type := b_lab ; 4 .. 9 :
20009: LD_ADDR_OWVAR 42
20013: PUSH
20014: LD_INT 6
20016: ST_TO_ADDR
20017: GO 20601
20019: LD_INT 4
20021: DOUBLE
20022: GREATEREQUAL
20023: IFFALSE 20031
20025: LD_INT 9
20027: DOUBLE
20028: LESSEQUAL
20029: IFTRUE 20033
20031: GO 20093
20033: POP
// begin bc_type := b_lab_half ;
20034: LD_ADDR_OWVAR 42
20038: PUSH
20039: LD_INT 7
20041: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20042: LD_ADDR_OWVAR 44
20046: PUSH
20047: LD_INT 10
20049: PUSH
20050: LD_INT 11
20052: PUSH
20053: LD_INT 12
20055: PUSH
20056: LD_INT 15
20058: PUSH
20059: LD_INT 14
20061: PUSH
20062: LD_INT 13
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: PUSH
20073: LD_VAR 0 2
20077: PUSH
20078: LD_INT 3
20080: MINUS
20081: ARRAY
20082: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20083: LD_ADDR_OWVAR 45
20087: PUSH
20088: LD_INT 9
20090: ST_TO_ADDR
// end ; 10 .. 13 :
20091: GO 20601
20093: LD_INT 10
20095: DOUBLE
20096: GREATEREQUAL
20097: IFFALSE 20105
20099: LD_INT 13
20101: DOUBLE
20102: LESSEQUAL
20103: IFTRUE 20107
20105: GO 20184
20107: POP
// begin bc_type := b_lab_full ;
20108: LD_ADDR_OWVAR 42
20112: PUSH
20113: LD_INT 8
20115: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20116: LD_ADDR_OWVAR 44
20120: PUSH
20121: LD_INT 10
20123: PUSH
20124: LD_INT 12
20126: PUSH
20127: LD_INT 14
20129: PUSH
20130: LD_INT 13
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: PUSH
20139: LD_VAR 0 2
20143: PUSH
20144: LD_INT 9
20146: MINUS
20147: ARRAY
20148: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20149: LD_ADDR_OWVAR 45
20153: PUSH
20154: LD_INT 11
20156: PUSH
20157: LD_INT 15
20159: PUSH
20160: LD_INT 12
20162: PUSH
20163: LD_INT 15
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: PUSH
20172: LD_VAR 0 2
20176: PUSH
20177: LD_INT 9
20179: MINUS
20180: ARRAY
20181: ST_TO_ADDR
// end ; 14 :
20182: GO 20601
20184: LD_INT 14
20186: DOUBLE
20187: EQUAL
20188: IFTRUE 20192
20190: GO 20203
20192: POP
// bc_type := b_workshop ; 15 :
20193: LD_ADDR_OWVAR 42
20197: PUSH
20198: LD_INT 2
20200: ST_TO_ADDR
20201: GO 20601
20203: LD_INT 15
20205: DOUBLE
20206: EQUAL
20207: IFTRUE 20211
20209: GO 20222
20211: POP
// bc_type := b_factory ; 16 :
20212: LD_ADDR_OWVAR 42
20216: PUSH
20217: LD_INT 3
20219: ST_TO_ADDR
20220: GO 20601
20222: LD_INT 16
20224: DOUBLE
20225: EQUAL
20226: IFTRUE 20230
20228: GO 20241
20230: POP
// bc_type := b_ext_gun ; 17 :
20231: LD_ADDR_OWVAR 42
20235: PUSH
20236: LD_INT 17
20238: ST_TO_ADDR
20239: GO 20601
20241: LD_INT 17
20243: DOUBLE
20244: EQUAL
20245: IFTRUE 20249
20247: GO 20277
20249: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20250: LD_ADDR_OWVAR 42
20254: PUSH
20255: LD_INT 19
20257: PUSH
20258: LD_INT 23
20260: PUSH
20261: LD_INT 19
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: PUSH
20269: LD_VAR 0 1
20273: ARRAY
20274: ST_TO_ADDR
20275: GO 20601
20277: LD_INT 18
20279: DOUBLE
20280: EQUAL
20281: IFTRUE 20285
20283: GO 20296
20285: POP
// bc_type := b_ext_radar ; 19 :
20286: LD_ADDR_OWVAR 42
20290: PUSH
20291: LD_INT 20
20293: ST_TO_ADDR
20294: GO 20601
20296: LD_INT 19
20298: DOUBLE
20299: EQUAL
20300: IFTRUE 20304
20302: GO 20315
20304: POP
// bc_type := b_ext_radio ; 20 :
20305: LD_ADDR_OWVAR 42
20309: PUSH
20310: LD_INT 22
20312: ST_TO_ADDR
20313: GO 20601
20315: LD_INT 20
20317: DOUBLE
20318: EQUAL
20319: IFTRUE 20323
20321: GO 20334
20323: POP
// bc_type := b_ext_siberium ; 21 :
20324: LD_ADDR_OWVAR 42
20328: PUSH
20329: LD_INT 21
20331: ST_TO_ADDR
20332: GO 20601
20334: LD_INT 21
20336: DOUBLE
20337: EQUAL
20338: IFTRUE 20342
20340: GO 20353
20342: POP
// bc_type := b_ext_computer ; 22 :
20343: LD_ADDR_OWVAR 42
20347: PUSH
20348: LD_INT 24
20350: ST_TO_ADDR
20351: GO 20601
20353: LD_INT 22
20355: DOUBLE
20356: EQUAL
20357: IFTRUE 20361
20359: GO 20372
20361: POP
// bc_type := b_ext_track ; 23 :
20362: LD_ADDR_OWVAR 42
20366: PUSH
20367: LD_INT 16
20369: ST_TO_ADDR
20370: GO 20601
20372: LD_INT 23
20374: DOUBLE
20375: EQUAL
20376: IFTRUE 20380
20378: GO 20391
20380: POP
// bc_type := b_ext_laser ; 24 :
20381: LD_ADDR_OWVAR 42
20385: PUSH
20386: LD_INT 25
20388: ST_TO_ADDR
20389: GO 20601
20391: LD_INT 24
20393: DOUBLE
20394: EQUAL
20395: IFTRUE 20399
20397: GO 20410
20399: POP
// bc_type := b_control_tower ; 25 :
20400: LD_ADDR_OWVAR 42
20404: PUSH
20405: LD_INT 36
20407: ST_TO_ADDR
20408: GO 20601
20410: LD_INT 25
20412: DOUBLE
20413: EQUAL
20414: IFTRUE 20418
20416: GO 20429
20418: POP
// bc_type := b_breastwork ; 26 :
20419: LD_ADDR_OWVAR 42
20423: PUSH
20424: LD_INT 31
20426: ST_TO_ADDR
20427: GO 20601
20429: LD_INT 26
20431: DOUBLE
20432: EQUAL
20433: IFTRUE 20437
20435: GO 20448
20437: POP
// bc_type := b_bunker ; 27 :
20438: LD_ADDR_OWVAR 42
20442: PUSH
20443: LD_INT 32
20445: ST_TO_ADDR
20446: GO 20601
20448: LD_INT 27
20450: DOUBLE
20451: EQUAL
20452: IFTRUE 20456
20454: GO 20467
20456: POP
// bc_type := b_turret ; 28 :
20457: LD_ADDR_OWVAR 42
20461: PUSH
20462: LD_INT 33
20464: ST_TO_ADDR
20465: GO 20601
20467: LD_INT 28
20469: DOUBLE
20470: EQUAL
20471: IFTRUE 20475
20473: GO 20486
20475: POP
// bc_type := b_armoury ; 29 :
20476: LD_ADDR_OWVAR 42
20480: PUSH
20481: LD_INT 4
20483: ST_TO_ADDR
20484: GO 20601
20486: LD_INT 29
20488: DOUBLE
20489: EQUAL
20490: IFTRUE 20494
20492: GO 20505
20494: POP
// bc_type := b_barracks ; 30 :
20495: LD_ADDR_OWVAR 42
20499: PUSH
20500: LD_INT 5
20502: ST_TO_ADDR
20503: GO 20601
20505: LD_INT 30
20507: DOUBLE
20508: EQUAL
20509: IFTRUE 20513
20511: GO 20524
20513: POP
// bc_type := b_solar_power ; 31 :
20514: LD_ADDR_OWVAR 42
20518: PUSH
20519: LD_INT 27
20521: ST_TO_ADDR
20522: GO 20601
20524: LD_INT 31
20526: DOUBLE
20527: EQUAL
20528: IFTRUE 20532
20530: GO 20543
20532: POP
// bc_type := b_oil_power ; 32 :
20533: LD_ADDR_OWVAR 42
20537: PUSH
20538: LD_INT 26
20540: ST_TO_ADDR
20541: GO 20601
20543: LD_INT 32
20545: DOUBLE
20546: EQUAL
20547: IFTRUE 20551
20549: GO 20562
20551: POP
// bc_type := b_siberite_power ; 33 :
20552: LD_ADDR_OWVAR 42
20556: PUSH
20557: LD_INT 28
20559: ST_TO_ADDR
20560: GO 20601
20562: LD_INT 33
20564: DOUBLE
20565: EQUAL
20566: IFTRUE 20570
20568: GO 20581
20570: POP
// bc_type := b_oil_mine ; 34 :
20571: LD_ADDR_OWVAR 42
20575: PUSH
20576: LD_INT 29
20578: ST_TO_ADDR
20579: GO 20601
20581: LD_INT 34
20583: DOUBLE
20584: EQUAL
20585: IFTRUE 20589
20587: GO 20600
20589: POP
// bc_type := b_siberite_mine ; end ;
20590: LD_ADDR_OWVAR 42
20594: PUSH
20595: LD_INT 30
20597: ST_TO_ADDR
20598: GO 20601
20600: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20601: LD_ADDR_VAR 0 8
20605: PUSH
20606: LD_VAR 0 5
20610: PPUSH
20611: LD_VAR 0 6
20615: PPUSH
20616: LD_VAR 0 3
20620: PPUSH
20621: CALL_OW 47
20625: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20626: LD_OWVAR 42
20630: PUSH
20631: LD_INT 32
20633: PUSH
20634: LD_INT 33
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: IN
20641: IFFALSE 20657
// PlaceWeaponTurret ( b , weapon ) ;
20643: LD_VAR 0 8
20647: PPUSH
20648: LD_VAR 0 4
20652: PPUSH
20653: CALL_OW 431
// end ;
20657: LD_VAR 0 7
20661: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20662: LD_INT 0
20664: PPUSH
20665: PPUSH
20666: PPUSH
20667: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20668: LD_ADDR_VAR 0 4
20672: PUSH
20673: LD_INT 22
20675: PUSH
20676: LD_OWVAR 2
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 2
20687: PUSH
20688: LD_INT 30
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 30
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PPUSH
20717: CALL_OW 69
20721: ST_TO_ADDR
// if not tmp then
20722: LD_VAR 0 4
20726: NOT
20727: IFFALSE 20731
// exit ;
20729: GO 20790
// for i in tmp do
20731: LD_ADDR_VAR 0 2
20735: PUSH
20736: LD_VAR 0 4
20740: PUSH
20741: FOR_IN
20742: IFFALSE 20788
// for j = 1 to 3 do
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: DOUBLE
20750: LD_INT 1
20752: DEC
20753: ST_TO_ADDR
20754: LD_INT 3
20756: PUSH
20757: FOR_TO
20758: IFFALSE 20784
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20760: LD_VAR 0 2
20764: PPUSH
20765: CALL_OW 274
20769: PPUSH
20770: LD_VAR 0 3
20774: PPUSH
20775: LD_INT 99999
20777: PPUSH
20778: CALL_OW 277
20782: GO 20757
20784: POP
20785: POP
20786: GO 20741
20788: POP
20789: POP
// end ;
20790: LD_VAR 0 1
20794: RET
// export function hHackSetLevel10 ; var i , j ; begin
20795: LD_INT 0
20797: PPUSH
20798: PPUSH
20799: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20800: LD_ADDR_VAR 0 2
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PPUSH
20815: CALL_OW 69
20819: PUSH
20820: FOR_IN
20821: IFFALSE 20873
// if IsSelected ( i ) then
20823: LD_VAR 0 2
20827: PPUSH
20828: CALL_OW 306
20832: IFFALSE 20871
// begin for j := 1 to 4 do
20834: LD_ADDR_VAR 0 3
20838: PUSH
20839: DOUBLE
20840: LD_INT 1
20842: DEC
20843: ST_TO_ADDR
20844: LD_INT 4
20846: PUSH
20847: FOR_TO
20848: IFFALSE 20869
// SetSkill ( i , j , 10 ) ;
20850: LD_VAR 0 2
20854: PPUSH
20855: LD_VAR 0 3
20859: PPUSH
20860: LD_INT 10
20862: PPUSH
20863: CALL_OW 237
20867: GO 20847
20869: POP
20870: POP
// end ;
20871: GO 20820
20873: POP
20874: POP
// end ;
20875: LD_VAR 0 1
20879: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20880: LD_INT 0
20882: PPUSH
20883: PPUSH
20884: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20885: LD_ADDR_VAR 0 2
20889: PUSH
20890: LD_INT 22
20892: PUSH
20893: LD_OWVAR 2
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 21
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PPUSH
20916: CALL_OW 69
20920: PUSH
20921: FOR_IN
20922: IFFALSE 20963
// begin for j := 1 to 4 do
20924: LD_ADDR_VAR 0 3
20928: PUSH
20929: DOUBLE
20930: LD_INT 1
20932: DEC
20933: ST_TO_ADDR
20934: LD_INT 4
20936: PUSH
20937: FOR_TO
20938: IFFALSE 20959
// SetSkill ( i , j , 10 ) ;
20940: LD_VAR 0 2
20944: PPUSH
20945: LD_VAR 0 3
20949: PPUSH
20950: LD_INT 10
20952: PPUSH
20953: CALL_OW 237
20957: GO 20937
20959: POP
20960: POP
// end ;
20961: GO 20921
20963: POP
20964: POP
// end ;
20965: LD_VAR 0 1
20969: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20970: LD_INT 0
20972: PPUSH
// uc_side := your_side ;
20973: LD_ADDR_OWVAR 20
20977: PUSH
20978: LD_OWVAR 2
20982: ST_TO_ADDR
// uc_nation := nation ;
20983: LD_ADDR_OWVAR 21
20987: PUSH
20988: LD_VAR 0 1
20992: ST_TO_ADDR
// InitHc ;
20993: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20997: LD_INT 0
20999: PPUSH
21000: LD_VAR 0 2
21004: PPUSH
21005: LD_VAR 0 3
21009: PPUSH
21010: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21014: LD_VAR 0 4
21018: PPUSH
21019: LD_VAR 0 5
21023: PPUSH
21024: CALL_OW 428
21028: PUSH
21029: LD_INT 0
21031: EQUAL
21032: IFFALSE 21056
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21034: CALL_OW 44
21038: PPUSH
21039: LD_VAR 0 4
21043: PPUSH
21044: LD_VAR 0 5
21048: PPUSH
21049: LD_INT 1
21051: PPUSH
21052: CALL_OW 48
// end ;
21056: LD_VAR 0 6
21060: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21061: LD_INT 0
21063: PPUSH
21064: PPUSH
// uc_side := your_side ;
21065: LD_ADDR_OWVAR 20
21069: PUSH
21070: LD_OWVAR 2
21074: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21075: LD_VAR 0 1
21079: PUSH
21080: LD_INT 1
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: LD_INT 3
21088: PUSH
21089: LD_INT 4
21091: PUSH
21092: LD_INT 5
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: IN
21102: IFFALSE 21114
// uc_nation := nation_american else
21104: LD_ADDR_OWVAR 21
21108: PUSH
21109: LD_INT 1
21111: ST_TO_ADDR
21112: GO 21157
// if chassis in [ 11 , 12 , 13 , 14 ] then
21114: LD_VAR 0 1
21118: PUSH
21119: LD_INT 11
21121: PUSH
21122: LD_INT 12
21124: PUSH
21125: LD_INT 13
21127: PUSH
21128: LD_INT 14
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: IN
21137: IFFALSE 21149
// uc_nation := nation_arabian else
21139: LD_ADDR_OWVAR 21
21143: PUSH
21144: LD_INT 2
21146: ST_TO_ADDR
21147: GO 21157
// uc_nation := nation_russian ;
21149: LD_ADDR_OWVAR 21
21153: PUSH
21154: LD_INT 3
21156: ST_TO_ADDR
// vc_chassis := chassis ;
21157: LD_ADDR_OWVAR 37
21161: PUSH
21162: LD_VAR 0 1
21166: ST_TO_ADDR
// vc_engine := engine ;
21167: LD_ADDR_OWVAR 39
21171: PUSH
21172: LD_VAR 0 2
21176: ST_TO_ADDR
// vc_control := control ;
21177: LD_ADDR_OWVAR 38
21181: PUSH
21182: LD_VAR 0 3
21186: ST_TO_ADDR
// vc_weapon := weapon ;
21187: LD_ADDR_OWVAR 40
21191: PUSH
21192: LD_VAR 0 4
21196: ST_TO_ADDR
// un := CreateVehicle ;
21197: LD_ADDR_VAR 0 8
21201: PUSH
21202: CALL_OW 45
21206: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21207: LD_VAR 0 8
21211: PPUSH
21212: LD_INT 0
21214: PPUSH
21215: LD_INT 5
21217: PPUSH
21218: CALL_OW 12
21222: PPUSH
21223: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21227: LD_VAR 0 8
21231: PPUSH
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 6
21241: PPUSH
21242: LD_INT 1
21244: PPUSH
21245: CALL_OW 48
// end ;
21249: LD_VAR 0 7
21253: RET
// export hInvincible ; every 1 do
21254: GO 21256
21256: DISABLE
// hInvincible := [ ] ;
21257: LD_ADDR_EXP 76
21261: PUSH
21262: EMPTY
21263: ST_TO_ADDR
21264: END
// every 10 do var i ;
21265: GO 21267
21267: DISABLE
21268: LD_INT 0
21270: PPUSH
// begin enable ;
21271: ENABLE
// if not hInvincible then
21272: LD_EXP 76
21276: NOT
21277: IFFALSE 21281
// exit ;
21279: GO 21325
// for i in hInvincible do
21281: LD_ADDR_VAR 0 1
21285: PUSH
21286: LD_EXP 76
21290: PUSH
21291: FOR_IN
21292: IFFALSE 21323
// if GetLives ( i ) < 1000 then
21294: LD_VAR 0 1
21298: PPUSH
21299: CALL_OW 256
21303: PUSH
21304: LD_INT 1000
21306: LESS
21307: IFFALSE 21321
// SetLives ( i , 1000 ) ;
21309: LD_VAR 0 1
21313: PPUSH
21314: LD_INT 1000
21316: PPUSH
21317: CALL_OW 234
21321: GO 21291
21323: POP
21324: POP
// end ;
21325: PPOPN 1
21327: END
// export function hHackInvincible ; var i ; begin
21328: LD_INT 0
21330: PPUSH
21331: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21332: LD_ADDR_VAR 0 2
21336: PUSH
21337: LD_INT 2
21339: PUSH
21340: LD_INT 21
21342: PUSH
21343: LD_INT 1
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 21
21352: PUSH
21353: LD_INT 2
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: PPUSH
21365: CALL_OW 69
21369: PUSH
21370: FOR_IN
21371: IFFALSE 21432
// if IsSelected ( i ) then
21373: LD_VAR 0 2
21377: PPUSH
21378: CALL_OW 306
21382: IFFALSE 21430
// begin if i in hInvincible then
21384: LD_VAR 0 2
21388: PUSH
21389: LD_EXP 76
21393: IN
21394: IFFALSE 21414
// hInvincible := hInvincible diff i else
21396: LD_ADDR_EXP 76
21400: PUSH
21401: LD_EXP 76
21405: PUSH
21406: LD_VAR 0 2
21410: DIFF
21411: ST_TO_ADDR
21412: GO 21430
// hInvincible := hInvincible union i ;
21414: LD_ADDR_EXP 76
21418: PUSH
21419: LD_EXP 76
21423: PUSH
21424: LD_VAR 0 2
21428: UNION
21429: ST_TO_ADDR
// end ;
21430: GO 21370
21432: POP
21433: POP
// end ;
21434: LD_VAR 0 1
21438: RET
// export function hHackInvisible ; var i , j ; begin
21439: LD_INT 0
21441: PPUSH
21442: PPUSH
21443: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21444: LD_ADDR_VAR 0 2
21448: PUSH
21449: LD_INT 21
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PPUSH
21459: CALL_OW 69
21463: PUSH
21464: FOR_IN
21465: IFFALSE 21489
// if IsSelected ( i ) then
21467: LD_VAR 0 2
21471: PPUSH
21472: CALL_OW 306
21476: IFFALSE 21487
// ComForceInvisible ( i ) ;
21478: LD_VAR 0 2
21482: PPUSH
21483: CALL_OW 496
21487: GO 21464
21489: POP
21490: POP
// end ;
21491: LD_VAR 0 1
21495: RET
// export function hHackChangeYourSide ; begin
21496: LD_INT 0
21498: PPUSH
// if your_side = 8 then
21499: LD_OWVAR 2
21503: PUSH
21504: LD_INT 8
21506: EQUAL
21507: IFFALSE 21519
// your_side := 0 else
21509: LD_ADDR_OWVAR 2
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
21517: GO 21533
// your_side := your_side + 1 ;
21519: LD_ADDR_OWVAR 2
21523: PUSH
21524: LD_OWVAR 2
21528: PUSH
21529: LD_INT 1
21531: PLUS
21532: ST_TO_ADDR
// end ;
21533: LD_VAR 0 1
21537: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21538: LD_INT 0
21540: PPUSH
21541: PPUSH
21542: PPUSH
// for i in all_units do
21543: LD_ADDR_VAR 0 2
21547: PUSH
21548: LD_OWVAR 3
21552: PUSH
21553: FOR_IN
21554: IFFALSE 21632
// if IsSelected ( i ) then
21556: LD_VAR 0 2
21560: PPUSH
21561: CALL_OW 306
21565: IFFALSE 21630
// begin j := GetSide ( i ) ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_VAR 0 2
21576: PPUSH
21577: CALL_OW 255
21581: ST_TO_ADDR
// if j = 8 then
21582: LD_VAR 0 3
21586: PUSH
21587: LD_INT 8
21589: EQUAL
21590: IFFALSE 21602
// j := 0 else
21592: LD_ADDR_VAR 0 3
21596: PUSH
21597: LD_INT 0
21599: ST_TO_ADDR
21600: GO 21616
// j := j + 1 ;
21602: LD_ADDR_VAR 0 3
21606: PUSH
21607: LD_VAR 0 3
21611: PUSH
21612: LD_INT 1
21614: PLUS
21615: ST_TO_ADDR
// SetSide ( i , j ) ;
21616: LD_VAR 0 2
21620: PPUSH
21621: LD_VAR 0 3
21625: PPUSH
21626: CALL_OW 235
// end ;
21630: GO 21553
21632: POP
21633: POP
// end ;
21634: LD_VAR 0 1
21638: RET
// export function hHackFog ; begin
21639: LD_INT 0
21641: PPUSH
// FogOff ( true ) ;
21642: LD_INT 1
21644: PPUSH
21645: CALL_OW 344
// end ;
21649: LD_VAR 0 1
21653: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21654: LD_INT 0
21656: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21657: LD_VAR 0 1
21661: PPUSH
21662: LD_VAR 0 2
21666: PPUSH
21667: LD_VAR 0 3
21671: PPUSH
21672: LD_INT 1
21674: PPUSH
21675: LD_INT 1
21677: PPUSH
21678: CALL_OW 483
// CenterOnXY ( x , y ) ;
21682: LD_VAR 0 2
21686: PPUSH
21687: LD_VAR 0 3
21691: PPUSH
21692: CALL_OW 84
// end ;
21696: LD_VAR 0 4
21700: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21701: LD_INT 0
21703: PPUSH
21704: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21705: LD_VAR 0 1
21709: NOT
21710: IFTRUE 21729
21712: PUSH
21713: LD_VAR 0 2
21717: PPUSH
21718: LD_VAR 0 3
21722: PPUSH
21723: CALL_OW 488
21727: NOT
21728: OR
21729: IFTRUE 21764
21731: PUSH
21732: LD_VAR 0 1
21736: PPUSH
21737: CALL_OW 266
21741: PUSH
21742: LD_INT 3
21744: NONEQUAL
21745: IFFALSE 21763
21747: PUSH
21748: LD_VAR 0 1
21752: PPUSH
21753: CALL_OW 247
21757: PUSH
21758: LD_INT 1
21760: EQUAL
21761: NOT
21762: AND
21763: OR
21764: IFFALSE 21768
// exit ;
21766: GO 22050
// if GetType ( factory ) = unit_human then
21768: LD_VAR 0 1
21772: PPUSH
21773: CALL_OW 247
21777: PUSH
21778: LD_INT 1
21780: EQUAL
21781: IFFALSE 21798
// factory := IsInUnit ( factory ) ;
21783: LD_ADDR_VAR 0 1
21787: PUSH
21788: LD_VAR 0 1
21792: PPUSH
21793: CALL_OW 310
21797: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21798: LD_VAR 0 1
21802: PPUSH
21803: CALL_OW 266
21807: PUSH
21808: LD_INT 3
21810: NONEQUAL
21811: IFFALSE 21815
// exit ;
21813: GO 22050
// for i := 1 to Count ( factoryWaypoints ) do
21815: LD_ADDR_VAR 0 5
21819: PUSH
21820: DOUBLE
21821: LD_INT 1
21823: DEC
21824: ST_TO_ADDR
21825: LD_EXP 77
21829: PPUSH
21830: CALL 31583 0 1
21834: PUSH
21835: FOR_TO
21836: IFFALSE 21998
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
21838: LD_VAR 0 2
21842: PPUSH
21843: LD_VAR 0 3
21847: PPUSH
21848: CALL_OW 428
21852: PUSH
21853: LD_EXP 77
21857: PUSH
21858: LD_VAR 0 5
21862: ARRAY
21863: PUSH
21864: LD_INT 2
21866: ARRAY
21867: EQUAL
21868: IFFALSE 21900
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
21870: LD_ADDR_EXP 77
21874: PUSH
21875: LD_EXP 77
21879: PPUSH
21880: LD_VAR 0 5
21884: PPUSH
21885: CALL_OW 3
21889: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21890: CALL 22055 0 0
// exit ;
21894: POP
21895: POP
21896: GO 22050
// end else
21898: GO 21996
// if factory = factoryWaypoints [ i ] [ 2 ] then
21900: LD_VAR 0 1
21904: PUSH
21905: LD_EXP 77
21909: PUSH
21910: LD_VAR 0 5
21914: ARRAY
21915: PUSH
21916: LD_INT 2
21918: ARRAY
21919: EQUAL
21920: IFFALSE 21996
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
21922: LD_ADDR_EXP 77
21926: PUSH
21927: LD_EXP 77
21931: PPUSH
21932: LD_VAR 0 5
21936: PPUSH
21937: CALL_OW 3
21941: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
21942: LD_ADDR_EXP 77
21946: PUSH
21947: LD_EXP 77
21951: PPUSH
21952: LD_VAR 0 1
21956: PPUSH
21957: CALL_OW 255
21961: PUSH
21962: LD_VAR 0 1
21966: PUSH
21967: LD_VAR 0 2
21971: PUSH
21972: LD_VAR 0 3
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: PPUSH
21983: CALL 67515 0 2
21987: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21988: CALL 22055 0 0
// exit ;
21992: POP
21993: POP
21994: GO 22050
// end ; end ;
21996: GO 21835
21998: POP
21999: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22000: LD_ADDR_EXP 77
22004: PUSH
22005: LD_EXP 77
22009: PPUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 255
22019: PUSH
22020: LD_VAR 0 1
22024: PUSH
22025: LD_VAR 0 2
22029: PUSH
22030: LD_VAR 0 3
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL 67515 0 2
22045: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22046: CALL 22055 0 0
// end ;
22050: LD_VAR 0 4
22054: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22055: LD_INT 0
22057: PPUSH
22058: PPUSH
22059: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22060: LD_STRING resetFactoryWaypoint();
22062: PPUSH
22063: CALL_OW 559
// if factoryWaypoints then
22067: LD_EXP 77
22071: IFFALSE 22192
// begin list := factoryWaypoints ;
22073: LD_ADDR_VAR 0 3
22077: PUSH
22078: LD_EXP 77
22082: ST_TO_ADDR
// for i := 1 to list do
22083: LD_ADDR_VAR 0 2
22087: PUSH
22088: DOUBLE
22089: LD_INT 1
22091: DEC
22092: ST_TO_ADDR
22093: LD_VAR 0 3
22097: PUSH
22098: FOR_TO
22099: IFFALSE 22190
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22101: LD_STRING setFactoryWaypointXY(
22103: PUSH
22104: LD_VAR 0 3
22108: PUSH
22109: LD_VAR 0 2
22113: ARRAY
22114: PUSH
22115: LD_INT 1
22117: ARRAY
22118: STR
22119: PUSH
22120: LD_STRING ,
22122: STR
22123: PUSH
22124: LD_VAR 0 3
22128: PUSH
22129: LD_VAR 0 2
22133: ARRAY
22134: PUSH
22135: LD_INT 2
22137: ARRAY
22138: STR
22139: PUSH
22140: LD_STRING ,
22142: STR
22143: PUSH
22144: LD_VAR 0 3
22148: PUSH
22149: LD_VAR 0 2
22153: ARRAY
22154: PUSH
22155: LD_INT 3
22157: ARRAY
22158: STR
22159: PUSH
22160: LD_STRING ,
22162: STR
22163: PUSH
22164: LD_VAR 0 3
22168: PUSH
22169: LD_VAR 0 2
22173: ARRAY
22174: PUSH
22175: LD_INT 4
22177: ARRAY
22178: STR
22179: PUSH
22180: LD_STRING )
22182: STR
22183: PPUSH
22184: CALL_OW 559
22188: GO 22098
22190: POP
22191: POP
// end ; end ;
22192: LD_VAR 0 1
22196: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22197: LD_INT 0
22199: PPUSH
// if HexInfo ( x , y ) = warehouse then
22200: LD_VAR 0 2
22204: PPUSH
22205: LD_VAR 0 3
22209: PPUSH
22210: CALL_OW 428
22214: PUSH
22215: LD_VAR 0 1
22219: EQUAL
22220: IFFALSE 22247
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22222: LD_ADDR_EXP 79
22226: PUSH
22227: LD_EXP 79
22231: PPUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: LD_INT 0
22239: PPUSH
22240: CALL_OW 1
22244: ST_TO_ADDR
22245: GO 22298
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22247: LD_ADDR_EXP 79
22251: PUSH
22252: LD_EXP 79
22256: PPUSH
22257: LD_VAR 0 1
22261: PPUSH
22262: LD_VAR 0 1
22266: PPUSH
22267: CALL_OW 255
22271: PUSH
22272: LD_VAR 0 1
22276: PUSH
22277: LD_VAR 0 2
22281: PUSH
22282: LD_VAR 0 3
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: PPUSH
22293: CALL_OW 1
22297: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22298: CALL 22307 0 0
// end ;
22302: LD_VAR 0 4
22306: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22307: LD_INT 0
22309: PPUSH
22310: PPUSH
22311: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22312: LD_STRING resetWarehouseGatheringPoints();
22314: PPUSH
22315: CALL_OW 559
// if warehouseGatheringPoints then
22319: LD_EXP 79
22323: IFFALSE 22449
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22325: LD_ADDR_VAR 0 3
22329: PUSH
22330: LD_EXP 79
22334: PPUSH
22335: CALL 71449 0 1
22339: ST_TO_ADDR
// for i := 1 to list do
22340: LD_ADDR_VAR 0 2
22344: PUSH
22345: DOUBLE
22346: LD_INT 1
22348: DEC
22349: ST_TO_ADDR
22350: LD_VAR 0 3
22354: PUSH
22355: FOR_TO
22356: IFFALSE 22447
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22358: LD_STRING setWarehouseGatheringPointXY(
22360: PUSH
22361: LD_VAR 0 3
22365: PUSH
22366: LD_VAR 0 2
22370: ARRAY
22371: PUSH
22372: LD_INT 1
22374: ARRAY
22375: STR
22376: PUSH
22377: LD_STRING ,
22379: STR
22380: PUSH
22381: LD_VAR 0 3
22385: PUSH
22386: LD_VAR 0 2
22390: ARRAY
22391: PUSH
22392: LD_INT 2
22394: ARRAY
22395: STR
22396: PUSH
22397: LD_STRING ,
22399: STR
22400: PUSH
22401: LD_VAR 0 3
22405: PUSH
22406: LD_VAR 0 2
22410: ARRAY
22411: PUSH
22412: LD_INT 3
22414: ARRAY
22415: STR
22416: PUSH
22417: LD_STRING ,
22419: STR
22420: PUSH
22421: LD_VAR 0 3
22425: PUSH
22426: LD_VAR 0 2
22430: ARRAY
22431: PUSH
22432: LD_INT 4
22434: ARRAY
22435: STR
22436: PUSH
22437: LD_STRING )
22439: STR
22440: PPUSH
22441: CALL_OW 559
22445: GO 22355
22447: POP
22448: POP
// end ; end ;
22449: LD_VAR 0 1
22453: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22454: LD_EXP 79
22458: IFFALSE 23153
22460: GO 22462
22462: DISABLE
22463: LD_INT 0
22465: PPUSH
22466: PPUSH
22467: PPUSH
22468: PPUSH
22469: PPUSH
22470: PPUSH
22471: PPUSH
22472: PPUSH
22473: PPUSH
// begin enable ;
22474: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22475: LD_ADDR_VAR 0 3
22479: PUSH
22480: LD_EXP 79
22484: PPUSH
22485: CALL 71449 0 1
22489: ST_TO_ADDR
// if not list then
22490: LD_VAR 0 3
22494: NOT
22495: IFFALSE 22499
// exit ;
22497: GO 23153
// for i := 1 to list do
22499: LD_ADDR_VAR 0 1
22503: PUSH
22504: DOUBLE
22505: LD_INT 1
22507: DEC
22508: ST_TO_ADDR
22509: LD_VAR 0 3
22513: PUSH
22514: FOR_TO
22515: IFFALSE 23151
// begin depot := list [ i ] [ 2 ] ;
22517: LD_ADDR_VAR 0 8
22521: PUSH
22522: LD_VAR 0 3
22526: PUSH
22527: LD_VAR 0 1
22531: ARRAY
22532: PUSH
22533: LD_INT 2
22535: ARRAY
22536: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22537: LD_ADDR_VAR 0 5
22541: PUSH
22542: LD_VAR 0 3
22546: PUSH
22547: LD_VAR 0 1
22551: ARRAY
22552: PUSH
22553: LD_INT 1
22555: ARRAY
22556: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22557: LD_VAR 0 8
22561: PPUSH
22562: CALL_OW 301
22566: IFTRUE 22585
22568: PUSH
22569: LD_VAR 0 5
22573: PUSH
22574: LD_VAR 0 8
22578: PPUSH
22579: CALL_OW 255
22583: NONEQUAL
22584: OR
22585: IFFALSE 22614
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22587: LD_ADDR_EXP 79
22591: PUSH
22592: LD_EXP 79
22596: PPUSH
22597: LD_VAR 0 8
22601: PPUSH
22602: LD_INT 0
22604: PPUSH
22605: CALL_OW 1
22609: ST_TO_ADDR
// exit ;
22610: POP
22611: POP
22612: GO 23153
// end ; x := list [ i ] [ 3 ] ;
22614: LD_ADDR_VAR 0 6
22618: PUSH
22619: LD_VAR 0 3
22623: PUSH
22624: LD_VAR 0 1
22628: ARRAY
22629: PUSH
22630: LD_INT 3
22632: ARRAY
22633: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22634: LD_ADDR_VAR 0 7
22638: PUSH
22639: LD_VAR 0 3
22643: PUSH
22644: LD_VAR 0 1
22648: ARRAY
22649: PUSH
22650: LD_INT 4
22652: ARRAY
22653: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22654: LD_ADDR_VAR 0 9
22658: PUSH
22659: LD_VAR 0 6
22663: PPUSH
22664: LD_VAR 0 7
22668: PPUSH
22669: LD_INT 16
22671: PPUSH
22672: CALL 70023 0 3
22676: ST_TO_ADDR
// if not cratesNearbyPoint then
22677: LD_VAR 0 9
22681: NOT
22682: IFFALSE 22688
// exit ;
22684: POP
22685: POP
22686: GO 23153
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22688: LD_ADDR_VAR 0 4
22692: PUSH
22693: LD_INT 22
22695: PUSH
22696: LD_VAR 0 5
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 3
22707: PUSH
22708: LD_INT 60
22710: PUSH
22711: EMPTY
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 91
22720: PUSH
22721: LD_VAR 0 8
22725: PUSH
22726: LD_INT 6
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: LD_INT 25
22739: PUSH
22740: LD_INT 2
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 25
22749: PUSH
22750: LD_INT 16
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: PPUSH
22768: CALL_OW 69
22772: PUSH
22773: LD_VAR 0 8
22777: PPUSH
22778: CALL_OW 313
22782: PPUSH
22783: LD_INT 3
22785: PUSH
22786: LD_INT 60
22788: PUSH
22789: EMPTY
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 2
22798: PUSH
22799: LD_INT 25
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 25
22811: PUSH
22812: LD_INT 16
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PPUSH
22828: CALL_OW 72
22832: UNION
22833: ST_TO_ADDR
// if tmp then
22834: LD_VAR 0 4
22838: IFFALSE 22918
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22840: LD_ADDR_VAR 0 4
22844: PUSH
22845: LD_VAR 0 4
22849: PPUSH
22850: LD_INT 3
22852: PPUSH
22853: CALL 67830 0 2
22857: ST_TO_ADDR
// for j in tmp do
22858: LD_ADDR_VAR 0 2
22862: PUSH
22863: LD_VAR 0 4
22867: PUSH
22868: FOR_IN
22869: IFFALSE 22912
// begin if IsInUnit ( j ) then
22871: LD_VAR 0 2
22875: PPUSH
22876: CALL_OW 310
22880: IFFALSE 22891
// ComExit ( j ) ;
22882: LD_VAR 0 2
22886: PPUSH
22887: CALL 67913 0 1
// AddComCollect ( j , x , y ) ;
22891: LD_VAR 0 2
22895: PPUSH
22896: LD_VAR 0 6
22900: PPUSH
22901: LD_VAR 0 7
22905: PPUSH
22906: CALL_OW 177
// end ;
22910: GO 22868
22912: POP
22913: POP
// exit ;
22914: POP
22915: POP
22916: GO 23153
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22918: LD_ADDR_VAR 0 4
22922: PUSH
22923: LD_INT 22
22925: PUSH
22926: LD_VAR 0 5
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 91
22937: PUSH
22938: LD_VAR 0 8
22942: PUSH
22943: LD_INT 8
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: LD_INT 34
22956: PUSH
22957: LD_INT 12
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 34
22966: PUSH
22967: LD_INT 51
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 34
22976: PUSH
22977: LD_INT 32
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 34
22986: PUSH
22987: LD_INT 89
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: PPUSH
23006: CALL_OW 69
23010: ST_TO_ADDR
// if tmp then
23011: LD_VAR 0 4
23015: IFFALSE 23149
// begin for j in tmp do
23017: LD_ADDR_VAR 0 2
23021: PUSH
23022: LD_VAR 0 4
23026: PUSH
23027: FOR_IN
23028: IFFALSE 23147
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23030: LD_VAR 0 2
23034: PPUSH
23035: CALL_OW 262
23039: PUSH
23040: LD_INT 3
23042: EQUAL
23043: IFTRUE 23060
23045: PUSH
23046: LD_VAR 0 2
23050: PPUSH
23051: CALL_OW 261
23055: PUSH
23056: LD_INT 20
23058: GREATER
23059: OR
23060: IFFALSE 23074
23062: PUSH
23063: LD_VAR 0 2
23067: PPUSH
23068: CALL_OW 314
23072: NOT
23073: AND
23074: IFFALSE 23104
23076: PUSH
23077: LD_VAR 0 2
23081: PPUSH
23082: CALL_OW 263
23086: PUSH
23087: LD_INT 1
23089: NONEQUAL
23090: IFTRUE 23103
23092: PUSH
23093: LD_VAR 0 2
23097: PPUSH
23098: CALL_OW 311
23102: OR
23103: AND
23104: IFFALSE 23145
// begin ComCollect ( j , x , y ) ;
23106: LD_VAR 0 2
23110: PPUSH
23111: LD_VAR 0 6
23115: PPUSH
23116: LD_VAR 0 7
23120: PPUSH
23121: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23125: LD_VAR 0 2
23129: PPUSH
23130: LD_VAR 0 8
23134: PPUSH
23135: CALL_OW 172
// exit ;
23139: POP
23140: POP
23141: POP
23142: POP
23143: GO 23153
// end ;
23145: GO 23027
23147: POP
23148: POP
// end ; end ;
23149: GO 22514
23151: POP
23152: POP
// end ; end_of_file
23153: PPOPN 9
23155: END
// export function SOS_UnitDestroyed ( un ) ; begin
23156: LD_INT 0
23158: PPUSH
// ComRadiation ( un ) ;
23159: LD_VAR 0 1
23163: PPUSH
23164: CALL 24245 0 1
// end ;
23168: LD_VAR 0 2
23172: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23173: LD_INT 0
23175: PPUSH
// ComRadiation ( un ) ;
23176: LD_VAR 0 1
23180: PPUSH
23181: CALL 24245 0 1
// end ;
23185: LD_VAR 0 2
23189: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23190: LD_INT 0
23192: PPUSH
// end ;
23193: LD_VAR 0 4
23197: RET
// export function SOS_Command ( cmd ) ; begin
23198: LD_INT 0
23200: PPUSH
// end ;
23201: LD_VAR 0 2
23205: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23206: LD_INT 0
23208: PPUSH
// end ;
23209: LD_VAR 0 6
23213: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
23214: LD_INT 0
23216: PPUSH
23217: PPUSH
23218: PPUSH
23219: PPUSH
// if not vehicle or not factory then
23220: LD_VAR 0 1
23224: NOT
23225: IFTRUE 23234
23227: PUSH
23228: LD_VAR 0 2
23232: NOT
23233: OR
23234: IFFALSE 23238
// exit ;
23236: GO 23820
// if not factoryWaypoints then
23238: LD_EXP 77
23242: NOT
23243: IFFALSE 23247
// exit ;
23245: GO 23820
// for i := 1 to Count ( factoryWaypoints ) do
23247: LD_ADDR_VAR 0 4
23251: PUSH
23252: DOUBLE
23253: LD_INT 1
23255: DEC
23256: ST_TO_ADDR
23257: LD_EXP 77
23261: PPUSH
23262: CALL 31583 0 1
23266: PUSH
23267: FOR_TO
23268: IFFALSE 23818
// if factoryWaypoints [ i ] [ 2 ] = factory then
23270: LD_EXP 77
23274: PUSH
23275: LD_VAR 0 4
23279: ARRAY
23280: PUSH
23281: LD_INT 2
23283: ARRAY
23284: PUSH
23285: LD_VAR 0 2
23289: EQUAL
23290: IFFALSE 23816
// begin if GetControl ( vehicle ) = control_manual then
23292: LD_VAR 0 1
23296: PPUSH
23297: CALL_OW 263
23301: PUSH
23302: LD_INT 1
23304: EQUAL
23305: IFFALSE 23669
// begin driver := IsDrivenBy ( vehicle ) ;
23307: LD_ADDR_VAR 0 5
23311: PUSH
23312: LD_VAR 0 1
23316: PPUSH
23317: CALL_OW 311
23321: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23322: LD_VAR 0 5
23326: PUSH
23327: LD_EXP 78
23331: IN
23332: IFTRUE 23346
23334: PUSH
23335: LD_VAR 0 1
23339: PUSH
23340: LD_EXP 78
23344: IN
23345: OR
23346: IFFALSE 23352
// exit ;
23348: POP
23349: POP
23350: GO 23820
// if not HasTask ( driver ) then
23352: LD_VAR 0 5
23356: PPUSH
23357: CALL_OW 314
23361: NOT
23362: IFFALSE 23667
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
23364: LD_ADDR_EXP 78
23368: PUSH
23369: LD_EXP 78
23373: PPUSH
23374: LD_VAR 0 5
23378: PPUSH
23379: CALL 67515 0 2
23383: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
23384: LD_ADDR_EXP 78
23388: PUSH
23389: LD_EXP 78
23393: PPUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL 67515 0 2
23403: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23404: LD_ADDR_VAR 0 6
23408: PUSH
23409: LD_EXP 77
23413: PUSH
23414: LD_VAR 0 4
23418: ARRAY
23419: PUSH
23420: LD_INT 3
23422: ARRAY
23423: PPUSH
23424: LD_EXP 77
23428: PUSH
23429: LD_VAR 0 4
23433: ARRAY
23434: PUSH
23435: LD_INT 4
23437: ARRAY
23438: PPUSH
23439: CALL_OW 428
23443: ST_TO_ADDR
// if hex then
23444: LD_VAR 0 6
23448: IFFALSE 23466
// ComMoveUnit ( driver , hex ) else
23450: LD_VAR 0 5
23454: PPUSH
23455: LD_VAR 0 6
23459: PPUSH
23460: CALL_OW 112
23464: GO 23550
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
23466: LD_VAR 0 1
23470: PPUSH
23471: LD_EXP 77
23475: PUSH
23476: LD_VAR 0 4
23480: ARRAY
23481: PUSH
23482: LD_INT 3
23484: ARRAY
23485: PPUSH
23486: LD_EXP 77
23490: PUSH
23491: LD_VAR 0 4
23495: ARRAY
23496: PUSH
23497: LD_INT 4
23499: ARRAY
23500: PPUSH
23501: CALL_OW 297
23505: PUSH
23506: LD_INT 0
23508: GREATER
23509: IFFALSE 23550
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23511: LD_VAR 0 5
23515: PPUSH
23516: LD_EXP 77
23520: PUSH
23521: LD_VAR 0 4
23525: ARRAY
23526: PUSH
23527: LD_INT 3
23529: ARRAY
23530: PPUSH
23531: LD_EXP 77
23535: PUSH
23536: LD_VAR 0 4
23540: ARRAY
23541: PUSH
23542: LD_INT 4
23544: ARRAY
23545: PPUSH
23546: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23550: LD_VAR 0 5
23554: PPUSH
23555: CALL_OW 181
// if Multiplayer then
23559: LD_OWVAR 4
23563: IFFALSE 23612
// begin repeat wait ( 10 ) ;
23565: LD_INT 10
23567: PPUSH
23568: CALL_OW 67
// until not IsInUnit ( driver ) ;
23572: LD_VAR 0 5
23576: PPUSH
23577: CALL_OW 310
23581: NOT
23582: IFFALSE 23565
// if not HasTask ( driver ) then
23584: LD_VAR 0 5
23588: PPUSH
23589: CALL_OW 314
23593: NOT
23594: IFFALSE 23610
// ComEnterUnit ( driver , factory ) ;
23596: LD_VAR 0 5
23600: PPUSH
23601: LD_VAR 0 2
23605: PPUSH
23606: CALL_OW 120
// end else
23610: GO 23626
// AddComEnterUnit ( driver , factory ) ;
23612: LD_VAR 0 5
23616: PPUSH
23617: LD_VAR 0 2
23621: PPUSH
23622: CALL_OW 180
// wait ( 0 0$1 ) ;
23626: LD_INT 35
23628: PPUSH
23629: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
23633: LD_ADDR_EXP 78
23637: PUSH
23638: LD_EXP 78
23642: PUSH
23643: LD_VAR 0 5
23647: DIFF
23648: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
23649: LD_ADDR_EXP 78
23653: PUSH
23654: LD_EXP 78
23658: PUSH
23659: LD_VAR 0 1
23663: DIFF
23664: ST_TO_ADDR
// break ;
23665: GO 23818
// end ; end else
23667: GO 23816
// if GetControl ( vehicle ) = control_remote then
23669: LD_VAR 0 1
23673: PPUSH
23674: CALL_OW 263
23678: PUSH
23679: LD_INT 2
23681: EQUAL
23682: IFFALSE 23768
// begin wait ( 0 0$2 ) ;
23684: LD_INT 70
23686: PPUSH
23687: CALL_OW 67
// repeat wait ( 10 ) ;
23691: LD_INT 10
23693: PPUSH
23694: CALL_OW 67
// Connect ( vehicle ) ;
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL 37827 0 1
// until IsControledBy ( vehicle ) ;
23707: LD_VAR 0 1
23711: PPUSH
23712: CALL_OW 312
23716: IFFALSE 23691
// wait ( 10 ) ;
23718: LD_INT 10
23720: PPUSH
23721: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23725: LD_VAR 0 1
23729: PPUSH
23730: LD_EXP 77
23734: PUSH
23735: LD_VAR 0 4
23739: ARRAY
23740: PUSH
23741: LD_INT 3
23743: ARRAY
23744: PPUSH
23745: LD_EXP 77
23749: PUSH
23750: LD_VAR 0 4
23754: ARRAY
23755: PUSH
23756: LD_INT 4
23758: ARRAY
23759: PPUSH
23760: CALL_OW 111
// break ;
23764: GO 23818
// end else
23766: GO 23816
// begin wait ( 0 0$3 ) ;
23768: LD_INT 105
23770: PPUSH
23771: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23775: LD_VAR 0 1
23779: PPUSH
23780: LD_EXP 77
23784: PUSH
23785: LD_VAR 0 4
23789: ARRAY
23790: PUSH
23791: LD_INT 3
23793: ARRAY
23794: PPUSH
23795: LD_EXP 77
23799: PUSH
23800: LD_VAR 0 4
23804: ARRAY
23805: PUSH
23806: LD_INT 4
23808: ARRAY
23809: PPUSH
23810: CALL_OW 111
// break ;
23814: GO 23818
// end ; end ;
23816: GO 23267
23818: POP
23819: POP
// end ;
23820: LD_VAR 0 3
23824: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23825: LD_INT 0
23827: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23828: LD_VAR 0 1
23832: PUSH
23833: LD_INT 250
23835: EQUAL
23836: IFFALSE 23853
23838: PUSH
23839: LD_VAR 0 2
23843: PPUSH
23844: CALL_OW 264
23848: PUSH
23849: LD_INT 81
23851: EQUAL
23852: AND
23853: IFFALSE 23874
// MinerPlaceMine ( unit , x , y ) ;
23855: LD_VAR 0 2
23859: PPUSH
23860: LD_VAR 0 4
23864: PPUSH
23865: LD_VAR 0 5
23869: PPUSH
23870: CALL 27006 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23874: LD_VAR 0 1
23878: PUSH
23879: LD_INT 251
23881: EQUAL
23882: IFFALSE 23899
23884: PUSH
23885: LD_VAR 0 2
23889: PPUSH
23890: CALL_OW 264
23894: PUSH
23895: LD_INT 81
23897: EQUAL
23898: AND
23899: IFFALSE 23920
// MinerDetonateMine ( unit , x , y ) ;
23901: LD_VAR 0 2
23905: PPUSH
23906: LD_VAR 0 4
23910: PPUSH
23911: LD_VAR 0 5
23915: PPUSH
23916: CALL 27285 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23920: LD_VAR 0 1
23924: PUSH
23925: LD_INT 252
23927: EQUAL
23928: IFFALSE 23945
23930: PUSH
23931: LD_VAR 0 2
23935: PPUSH
23936: CALL_OW 264
23940: PUSH
23941: LD_INT 81
23943: EQUAL
23944: AND
23945: IFFALSE 23966
// MinerCreateMinefield ( unit , x , y ) ;
23947: LD_VAR 0 2
23951: PPUSH
23952: LD_VAR 0 4
23956: PPUSH
23957: LD_VAR 0 5
23961: PPUSH
23962: CALL 27704 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23966: LD_VAR 0 1
23970: PUSH
23971: LD_INT 253
23973: EQUAL
23974: IFFALSE 23991
23976: PUSH
23977: LD_VAR 0 2
23981: PPUSH
23982: CALL_OW 257
23986: PUSH
23987: LD_INT 5
23989: EQUAL
23990: AND
23991: IFFALSE 24012
// ComBinocular ( unit , x , y ) ;
23993: LD_VAR 0 2
23997: PPUSH
23998: LD_VAR 0 4
24002: PPUSH
24003: LD_VAR 0 5
24007: PPUSH
24008: CALL 28079 0 3
// if selectedUnit then
24012: LD_VAR 0 3
24016: IFFALSE 24076
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24018: LD_VAR 0 1
24022: PUSH
24023: LD_INT 254
24025: EQUAL
24026: IFFALSE 24043
24028: PUSH
24029: LD_VAR 0 2
24033: PPUSH
24034: CALL_OW 264
24038: PUSH
24039: LD_INT 99
24041: EQUAL
24042: AND
24043: IFFALSE 24060
24045: PUSH
24046: LD_VAR 0 3
24050: PPUSH
24051: CALL_OW 263
24055: PUSH
24056: LD_INT 3
24058: EQUAL
24059: AND
24060: IFFALSE 24076
// HackDestroyVehicle ( unit , selectedUnit ) ;
24062: LD_VAR 0 2
24066: PPUSH
24067: LD_VAR 0 3
24071: PPUSH
24072: CALL 26366 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24076: LD_VAR 0 1
24080: PUSH
24081: LD_INT 255
24083: EQUAL
24084: IFFALSE 24108
24086: PUSH
24087: LD_VAR 0 2
24091: PPUSH
24092: CALL_OW 264
24096: PUSH
24097: LD_INT 14
24099: PUSH
24100: LD_INT 53
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: IN
24107: AND
24108: IFFALSE 24126
24110: PUSH
24111: LD_VAR 0 4
24115: PPUSH
24116: LD_VAR 0 5
24120: PPUSH
24121: CALL_OW 488
24125: AND
24126: IFFALSE 24150
// CutTreeXYR ( unit , x , y , 12 ) ;
24128: LD_VAR 0 2
24132: PPUSH
24133: LD_VAR 0 4
24137: PPUSH
24138: LD_VAR 0 5
24142: PPUSH
24143: LD_INT 12
24145: PPUSH
24146: CALL 24341 0 4
// if cmd = 256 then
24150: LD_VAR 0 1
24154: PUSH
24155: LD_INT 256
24157: EQUAL
24158: IFFALSE 24179
// SetFactoryWaypoint ( unit , x , y ) ;
24160: LD_VAR 0 2
24164: PPUSH
24165: LD_VAR 0 4
24169: PPUSH
24170: LD_VAR 0 5
24174: PPUSH
24175: CALL 21701 0 3
// if cmd = 257 then
24179: LD_VAR 0 1
24183: PUSH
24184: LD_INT 257
24186: EQUAL
24187: IFFALSE 24208
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24189: LD_VAR 0 2
24193: PPUSH
24194: LD_VAR 0 4
24198: PPUSH
24199: LD_VAR 0 5
24203: PPUSH
24204: CALL 22197 0 3
// if cmd = 258 then
24208: LD_VAR 0 1
24212: PUSH
24213: LD_INT 258
24215: EQUAL
24216: IFFALSE 24240
// BurnTreeXYR ( unit , x , y , 8 ) ;
24218: LD_VAR 0 2
24222: PPUSH
24223: LD_VAR 0 4
24227: PPUSH
24228: LD_VAR 0 5
24232: PPUSH
24233: LD_INT 8
24235: PPUSH
24236: CALL 24741 0 4
// end ;
24240: LD_VAR 0 6
24244: RET
// export function ComRadiation ( un ) ; var eff ; begin
24245: LD_INT 0
24247: PPUSH
24248: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24249: LD_VAR 0 1
24253: PPUSH
24254: CALL_OW 264
24258: PUSH
24259: LD_INT 91
24261: NONEQUAL
24262: IFFALSE 24266
// exit ;
24264: GO 24336
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24266: LD_INT 68
24268: PPUSH
24269: LD_VAR 0 1
24273: PPUSH
24274: CALL_OW 255
24278: PPUSH
24279: CALL_OW 321
24283: PUSH
24284: LD_INT 2
24286: EQUAL
24287: IFFALSE 24299
// eff := 50 else
24289: LD_ADDR_VAR 0 3
24293: PUSH
24294: LD_INT 50
24296: ST_TO_ADDR
24297: GO 24307
// eff := 25 ;
24299: LD_ADDR_VAR 0 3
24303: PUSH
24304: LD_INT 25
24306: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 250
24316: PPUSH
24317: LD_VAR 0 1
24321: PPUSH
24322: CALL_OW 251
24326: PPUSH
24327: LD_VAR 0 3
24331: PPUSH
24332: CALL_OW 495
// end ;
24336: LD_VAR 0 2
24340: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24341: LD_INT 0
24343: PPUSH
24344: PPUSH
24345: PPUSH
24346: PPUSH
24347: PPUSH
24348: PPUSH
24349: PPUSH
24350: PPUSH
24351: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24352: LD_VAR 0 1
24356: PPUSH
24357: CALL_OW 302
24361: NOT
24362: IFTRUE 24381
24364: PUSH
24365: LD_VAR 0 2
24369: PPUSH
24370: LD_VAR 0 3
24374: PPUSH
24375: CALL_OW 488
24379: NOT
24380: OR
24381: IFTRUE 24390
24383: PUSH
24384: LD_VAR 0 4
24388: NOT
24389: OR
24390: IFFALSE 24394
// exit ;
24392: GO 24736
// list := [ ] ;
24394: LD_ADDR_VAR 0 13
24398: PUSH
24399: EMPTY
24400: ST_TO_ADDR
// if x - r < 0 then
24401: LD_VAR 0 2
24405: PUSH
24406: LD_VAR 0 4
24410: MINUS
24411: PUSH
24412: LD_INT 0
24414: LESS
24415: IFFALSE 24427
// min_x := 0 else
24417: LD_ADDR_VAR 0 7
24421: PUSH
24422: LD_INT 0
24424: ST_TO_ADDR
24425: GO 24443
// min_x := x - r ;
24427: LD_ADDR_VAR 0 7
24431: PUSH
24432: LD_VAR 0 2
24436: PUSH
24437: LD_VAR 0 4
24441: MINUS
24442: ST_TO_ADDR
// if y - r < 0 then
24443: LD_VAR 0 3
24447: PUSH
24448: LD_VAR 0 4
24452: MINUS
24453: PUSH
24454: LD_INT 0
24456: LESS
24457: IFFALSE 24469
// min_y := 0 else
24459: LD_ADDR_VAR 0 8
24463: PUSH
24464: LD_INT 0
24466: ST_TO_ADDR
24467: GO 24485
// min_y := y - r ;
24469: LD_ADDR_VAR 0 8
24473: PUSH
24474: LD_VAR 0 3
24478: PUSH
24479: LD_VAR 0 4
24483: MINUS
24484: ST_TO_ADDR
// max_x := x + r ;
24485: LD_ADDR_VAR 0 9
24489: PUSH
24490: LD_VAR 0 2
24494: PUSH
24495: LD_VAR 0 4
24499: PLUS
24500: ST_TO_ADDR
// max_y := y + r ;
24501: LD_ADDR_VAR 0 10
24505: PUSH
24506: LD_VAR 0 3
24510: PUSH
24511: LD_VAR 0 4
24515: PLUS
24516: ST_TO_ADDR
// for _x = min_x to max_x do
24517: LD_ADDR_VAR 0 11
24521: PUSH
24522: DOUBLE
24523: LD_VAR 0 7
24527: DEC
24528: ST_TO_ADDR
24529: LD_VAR 0 9
24533: PUSH
24534: FOR_TO
24535: IFFALSE 24654
// for _y = min_y to max_y do
24537: LD_ADDR_VAR 0 12
24541: PUSH
24542: DOUBLE
24543: LD_VAR 0 8
24547: DEC
24548: ST_TO_ADDR
24549: LD_VAR 0 10
24553: PUSH
24554: FOR_TO
24555: IFFALSE 24650
// begin if not ValidHex ( _x , _y ) then
24557: LD_VAR 0 11
24561: PPUSH
24562: LD_VAR 0 12
24566: PPUSH
24567: CALL_OW 488
24571: NOT
24572: IFFALSE 24576
// continue ;
24574: GO 24554
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24576: LD_VAR 0 11
24580: PPUSH
24581: LD_VAR 0 12
24585: PPUSH
24586: CALL_OW 351
24590: IFFALSE 24608
24592: PUSH
24593: LD_VAR 0 11
24597: PPUSH
24598: LD_VAR 0 12
24602: PPUSH
24603: CALL_OW 554
24607: AND
24608: IFFALSE 24648
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24610: LD_ADDR_VAR 0 13
24614: PUSH
24615: LD_VAR 0 13
24619: PPUSH
24620: LD_VAR 0 13
24624: PUSH
24625: LD_INT 1
24627: PLUS
24628: PPUSH
24629: LD_VAR 0 11
24633: PUSH
24634: LD_VAR 0 12
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PPUSH
24643: CALL_OW 2
24647: ST_TO_ADDR
// end ;
24648: GO 24554
24650: POP
24651: POP
24652: GO 24534
24654: POP
24655: POP
// if not list then
24656: LD_VAR 0 13
24660: NOT
24661: IFFALSE 24665
// exit ;
24663: GO 24736
// for i in list do
24665: LD_ADDR_VAR 0 6
24669: PUSH
24670: LD_VAR 0 13
24674: PUSH
24675: FOR_IN
24676: IFFALSE 24734
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24678: LD_VAR 0 1
24682: PPUSH
24683: LD_STRING M
24685: PUSH
24686: LD_VAR 0 6
24690: PUSH
24691: LD_INT 1
24693: ARRAY
24694: PUSH
24695: LD_VAR 0 6
24699: PUSH
24700: LD_INT 2
24702: ARRAY
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: PUSH
24725: EMPTY
24726: LIST
24727: PPUSH
24728: CALL_OW 447
24732: GO 24675
24734: POP
24735: POP
// end ;
24736: LD_VAR 0 5
24740: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24741: LD_INT 0
24743: PPUSH
24744: PPUSH
24745: PPUSH
24746: PPUSH
24747: PPUSH
24748: PPUSH
24749: PPUSH
24750: PPUSH
24751: PPUSH
24752: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24753: LD_VAR 0 1
24757: PPUSH
24758: CALL_OW 302
24762: NOT
24763: IFTRUE 24782
24765: PUSH
24766: LD_VAR 0 2
24770: PPUSH
24771: LD_VAR 0 3
24775: PPUSH
24776: CALL_OW 488
24780: NOT
24781: OR
24782: IFTRUE 24791
24784: PUSH
24785: LD_VAR 0 4
24789: NOT
24790: OR
24791: IFFALSE 24795
// exit ;
24793: GO 25312
// list := [ ] ;
24795: LD_ADDR_VAR 0 13
24799: PUSH
24800: EMPTY
24801: ST_TO_ADDR
// if x - r < 0 then
24802: LD_VAR 0 2
24806: PUSH
24807: LD_VAR 0 4
24811: MINUS
24812: PUSH
24813: LD_INT 0
24815: LESS
24816: IFFALSE 24828
// min_x := 0 else
24818: LD_ADDR_VAR 0 7
24822: PUSH
24823: LD_INT 0
24825: ST_TO_ADDR
24826: GO 24844
// min_x := x - r ;
24828: LD_ADDR_VAR 0 7
24832: PUSH
24833: LD_VAR 0 2
24837: PUSH
24838: LD_VAR 0 4
24842: MINUS
24843: ST_TO_ADDR
// if y - r < 0 then
24844: LD_VAR 0 3
24848: PUSH
24849: LD_VAR 0 4
24853: MINUS
24854: PUSH
24855: LD_INT 0
24857: LESS
24858: IFFALSE 24870
// min_y := 0 else
24860: LD_ADDR_VAR 0 8
24864: PUSH
24865: LD_INT 0
24867: ST_TO_ADDR
24868: GO 24886
// min_y := y - r ;
24870: LD_ADDR_VAR 0 8
24874: PUSH
24875: LD_VAR 0 3
24879: PUSH
24880: LD_VAR 0 4
24884: MINUS
24885: ST_TO_ADDR
// max_x := x + r ;
24886: LD_ADDR_VAR 0 9
24890: PUSH
24891: LD_VAR 0 2
24895: PUSH
24896: LD_VAR 0 4
24900: PLUS
24901: ST_TO_ADDR
// max_y := y + r ;
24902: LD_ADDR_VAR 0 10
24906: PUSH
24907: LD_VAR 0 3
24911: PUSH
24912: LD_VAR 0 4
24916: PLUS
24917: ST_TO_ADDR
// for _x = min_x to max_x do
24918: LD_ADDR_VAR 0 11
24922: PUSH
24923: DOUBLE
24924: LD_VAR 0 7
24928: DEC
24929: ST_TO_ADDR
24930: LD_VAR 0 9
24934: PUSH
24935: FOR_TO
24936: IFFALSE 25055
// for _y = min_y to max_y do
24938: LD_ADDR_VAR 0 12
24942: PUSH
24943: DOUBLE
24944: LD_VAR 0 8
24948: DEC
24949: ST_TO_ADDR
24950: LD_VAR 0 10
24954: PUSH
24955: FOR_TO
24956: IFFALSE 25051
// begin if not ValidHex ( _x , _y ) then
24958: LD_VAR 0 11
24962: PPUSH
24963: LD_VAR 0 12
24967: PPUSH
24968: CALL_OW 488
24972: NOT
24973: IFFALSE 24977
// continue ;
24975: GO 24955
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24977: LD_VAR 0 11
24981: PPUSH
24982: LD_VAR 0 12
24986: PPUSH
24987: CALL_OW 351
24991: IFFALSE 25009
24993: PUSH
24994: LD_VAR 0 11
24998: PPUSH
24999: LD_VAR 0 12
25003: PPUSH
25004: CALL_OW 554
25008: AND
25009: IFFALSE 25049
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25011: LD_ADDR_VAR 0 13
25015: PUSH
25016: LD_VAR 0 13
25020: PPUSH
25021: LD_VAR 0 13
25025: PUSH
25026: LD_INT 1
25028: PLUS
25029: PPUSH
25030: LD_VAR 0 11
25034: PUSH
25035: LD_VAR 0 12
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PPUSH
25044: CALL_OW 2
25048: ST_TO_ADDR
// end ;
25049: GO 24955
25051: POP
25052: POP
25053: GO 24935
25055: POP
25056: POP
// if not list then
25057: LD_VAR 0 13
25061: NOT
25062: IFFALSE 25066
// exit ;
25064: GO 25312
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25066: LD_ADDR_VAR 0 13
25070: PUSH
25071: LD_VAR 0 1
25075: PPUSH
25076: LD_VAR 0 13
25080: PPUSH
25081: LD_INT 1
25083: PPUSH
25084: LD_INT 1
25086: PPUSH
25087: CALL 34955 0 4
25091: ST_TO_ADDR
// ComStop ( flame ) ;
25092: LD_VAR 0 1
25096: PPUSH
25097: CALL_OW 141
// for i in list do
25101: LD_ADDR_VAR 0 6
25105: PUSH
25106: LD_VAR 0 13
25110: PUSH
25111: FOR_IN
25112: IFFALSE 25143
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25114: LD_VAR 0 1
25118: PPUSH
25119: LD_VAR 0 6
25123: PUSH
25124: LD_INT 1
25126: ARRAY
25127: PPUSH
25128: LD_VAR 0 6
25132: PUSH
25133: LD_INT 2
25135: ARRAY
25136: PPUSH
25137: CALL_OW 176
25141: GO 25111
25143: POP
25144: POP
// repeat wait ( 0 0$1 ) ;
25145: LD_INT 35
25147: PPUSH
25148: CALL_OW 67
// task := GetTaskList ( flame ) ;
25152: LD_ADDR_VAR 0 14
25156: PUSH
25157: LD_VAR 0 1
25161: PPUSH
25162: CALL_OW 437
25166: ST_TO_ADDR
// if not task then
25167: LD_VAR 0 14
25171: NOT
25172: IFFALSE 25176
// exit ;
25174: GO 25312
// if task [ 1 ] [ 1 ] <> | then
25176: LD_VAR 0 14
25180: PUSH
25181: LD_INT 1
25183: ARRAY
25184: PUSH
25185: LD_INT 1
25187: ARRAY
25188: PUSH
25189: LD_STRING |
25191: NONEQUAL
25192: IFFALSE 25196
// exit ;
25194: GO 25312
// _x := task [ 1 ] [ 2 ] ;
25196: LD_ADDR_VAR 0 11
25200: PUSH
25201: LD_VAR 0 14
25205: PUSH
25206: LD_INT 1
25208: ARRAY
25209: PUSH
25210: LD_INT 2
25212: ARRAY
25213: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25214: LD_ADDR_VAR 0 12
25218: PUSH
25219: LD_VAR 0 14
25223: PUSH
25224: LD_INT 1
25226: ARRAY
25227: PUSH
25228: LD_INT 3
25230: ARRAY
25231: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25232: LD_VAR 0 11
25236: PPUSH
25237: LD_VAR 0 12
25241: PPUSH
25242: CALL_OW 351
25246: NOT
25247: IFTRUE 25266
25249: PUSH
25250: LD_VAR 0 11
25254: PPUSH
25255: LD_VAR 0 12
25259: PPUSH
25260: CALL_OW 554
25264: NOT
25265: OR
25266: IFFALSE 25300
// begin task := Delete ( task , 1 ) ;
25268: LD_ADDR_VAR 0 14
25272: PUSH
25273: LD_VAR 0 14
25277: PPUSH
25278: LD_INT 1
25280: PPUSH
25281: CALL_OW 3
25285: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25286: LD_VAR 0 1
25290: PPUSH
25291: LD_VAR 0 14
25295: PPUSH
25296: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25300: LD_VAR 0 1
25304: PPUSH
25305: CALL_OW 314
25309: NOT
25310: IFFALSE 25145
// end ;
25312: LD_VAR 0 5
25316: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25317: LD_EXP 81
25321: NOT
25322: IFFALSE 25372
25324: GO 25326
25326: DISABLE
// begin initHack := true ;
25327: LD_ADDR_EXP 81
25331: PUSH
25332: LD_INT 1
25334: ST_TO_ADDR
// hackTanks := [ ] ;
25335: LD_ADDR_EXP 82
25339: PUSH
25340: EMPTY
25341: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25342: LD_ADDR_EXP 83
25346: PUSH
25347: EMPTY
25348: ST_TO_ADDR
// hackLimit := 3 ;
25349: LD_ADDR_EXP 84
25353: PUSH
25354: LD_INT 3
25356: ST_TO_ADDR
// hackDist := 12 ;
25357: LD_ADDR_EXP 85
25361: PUSH
25362: LD_INT 12
25364: ST_TO_ADDR
// hackCounter := [ ] ;
25365: LD_ADDR_EXP 86
25369: PUSH
25370: EMPTY
25371: ST_TO_ADDR
// end ;
25372: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25373: LD_EXP 81
25377: IFFALSE 25395
25379: PUSH
25380: LD_INT 34
25382: PUSH
25383: LD_INT 99
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PPUSH
25390: CALL_OW 69
25394: AND
25395: IFFALSE 25648
25397: GO 25399
25399: DISABLE
25400: LD_INT 0
25402: PPUSH
25403: PPUSH
// begin enable ;
25404: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25405: LD_ADDR_VAR 0 1
25409: PUSH
25410: LD_INT 34
25412: PUSH
25413: LD_INT 99
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PPUSH
25420: CALL_OW 69
25424: PUSH
25425: FOR_IN
25426: IFFALSE 25646
// begin if not i in hackTanks then
25428: LD_VAR 0 1
25432: PUSH
25433: LD_EXP 82
25437: IN
25438: NOT
25439: IFFALSE 25522
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25441: LD_ADDR_EXP 82
25445: PUSH
25446: LD_EXP 82
25450: PPUSH
25451: LD_EXP 82
25455: PUSH
25456: LD_INT 1
25458: PLUS
25459: PPUSH
25460: LD_VAR 0 1
25464: PPUSH
25465: CALL_OW 1
25469: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25470: LD_ADDR_EXP 83
25474: PUSH
25475: LD_EXP 83
25479: PPUSH
25480: LD_EXP 83
25484: PUSH
25485: LD_INT 1
25487: PLUS
25488: PPUSH
25489: EMPTY
25490: PPUSH
25491: CALL_OW 1
25495: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25496: LD_ADDR_EXP 86
25500: PUSH
25501: LD_EXP 86
25505: PPUSH
25506: LD_EXP 86
25510: PUSH
25511: LD_INT 1
25513: PLUS
25514: PPUSH
25515: EMPTY
25516: PPUSH
25517: CALL_OW 1
25521: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 302
25531: NOT
25532: IFFALSE 25545
// begin HackUnlinkAll ( i ) ;
25534: LD_VAR 0 1
25538: PPUSH
25539: CALL 25651 0 1
// continue ;
25543: GO 25425
// end ; HackCheckCapturedStatus ( i ) ;
25545: LD_VAR 0 1
25549: PPUSH
25550: CALL 26096 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25554: LD_ADDR_VAR 0 2
25558: PUSH
25559: LD_INT 81
25561: PUSH
25562: LD_VAR 0 1
25566: PPUSH
25567: CALL_OW 255
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 33
25578: PUSH
25579: LD_INT 3
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 91
25588: PUSH
25589: LD_VAR 0 1
25593: PUSH
25594: LD_EXP 85
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 50
25606: PUSH
25607: EMPTY
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: PPUSH
25616: CALL_OW 69
25620: ST_TO_ADDR
// if not tmp then
25621: LD_VAR 0 2
25625: NOT
25626: IFFALSE 25630
// continue ;
25628: GO 25425
// HackLink ( i , tmp ) ;
25630: LD_VAR 0 1
25634: PPUSH
25635: LD_VAR 0 2
25639: PPUSH
25640: CALL 25787 0 2
// end ;
25644: GO 25425
25646: POP
25647: POP
// end ;
25648: PPOPN 2
25650: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25651: LD_INT 0
25653: PPUSH
25654: PPUSH
25655: PPUSH
// if not hack in hackTanks then
25656: LD_VAR 0 1
25660: PUSH
25661: LD_EXP 82
25665: IN
25666: NOT
25667: IFFALSE 25671
// exit ;
25669: GO 25782
// index := GetElementIndex ( hackTanks , hack ) ;
25671: LD_ADDR_VAR 0 4
25675: PUSH
25676: LD_EXP 82
25680: PPUSH
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL 34250 0 2
25690: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25691: LD_EXP 83
25695: PUSH
25696: LD_VAR 0 4
25700: ARRAY
25701: IFFALSE 25782
// begin for i in hackTanksCaptured [ index ] do
25703: LD_ADDR_VAR 0 3
25707: PUSH
25708: LD_EXP 83
25712: PUSH
25713: LD_VAR 0 4
25717: ARRAY
25718: PUSH
25719: FOR_IN
25720: IFFALSE 25746
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25722: LD_VAR 0 3
25726: PUSH
25727: LD_INT 1
25729: ARRAY
25730: PPUSH
25731: LD_VAR 0 3
25735: PUSH
25736: LD_INT 2
25738: ARRAY
25739: PPUSH
25740: CALL_OW 235
25744: GO 25719
25746: POP
25747: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25748: LD_ADDR_EXP 83
25752: PUSH
25753: LD_EXP 83
25757: PPUSH
25758: LD_VAR 0 4
25762: PPUSH
25763: EMPTY
25764: PPUSH
25765: CALL_OW 1
25769: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25770: LD_VAR 0 1
25774: PPUSH
25775: LD_INT 0
25777: PPUSH
25778: CALL_OW 505
// end ; end ;
25782: LD_VAR 0 2
25786: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25787: LD_INT 0
25789: PPUSH
25790: PPUSH
25791: PPUSH
// if not hack in hackTanks or not vehicles then
25792: LD_VAR 0 1
25796: PUSH
25797: LD_EXP 82
25801: IN
25802: NOT
25803: IFTRUE 25812
25805: PUSH
25806: LD_VAR 0 2
25810: NOT
25811: OR
25812: IFFALSE 25816
// exit ;
25814: GO 26091
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25816: LD_ADDR_VAR 0 2
25820: PUSH
25821: LD_VAR 0 1
25825: PPUSH
25826: LD_VAR 0 2
25830: PPUSH
25831: LD_INT 1
25833: PPUSH
25834: LD_INT 1
25836: PPUSH
25837: CALL 34902 0 4
25841: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25842: LD_ADDR_VAR 0 5
25846: PUSH
25847: LD_EXP 82
25851: PPUSH
25852: LD_VAR 0 1
25856: PPUSH
25857: CALL 34250 0 2
25861: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25862: LD_EXP 83
25866: PUSH
25867: LD_VAR 0 5
25871: ARRAY
25872: PUSH
25873: LD_EXP 84
25877: LESS
25878: IFFALSE 26067
// begin for i := 1 to vehicles do
25880: LD_ADDR_VAR 0 4
25884: PUSH
25885: DOUBLE
25886: LD_INT 1
25888: DEC
25889: ST_TO_ADDR
25890: LD_VAR 0 2
25894: PUSH
25895: FOR_TO
25896: IFFALSE 26065
// begin if hackTanksCaptured [ index ] = hackLimit then
25898: LD_EXP 83
25902: PUSH
25903: LD_VAR 0 5
25907: ARRAY
25908: PUSH
25909: LD_EXP 84
25913: EQUAL
25914: IFFALSE 25918
// break ;
25916: GO 26065
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25918: LD_ADDR_EXP 86
25922: PUSH
25923: LD_EXP 86
25927: PPUSH
25928: LD_VAR 0 5
25932: PPUSH
25933: LD_EXP 86
25937: PUSH
25938: LD_VAR 0 5
25942: ARRAY
25943: PUSH
25944: LD_INT 1
25946: PLUS
25947: PPUSH
25948: CALL_OW 1
25952: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25953: LD_ADDR_EXP 83
25957: PUSH
25958: LD_EXP 83
25962: PPUSH
25963: LD_VAR 0 5
25967: PUSH
25968: LD_EXP 83
25972: PUSH
25973: LD_VAR 0 5
25977: ARRAY
25978: PUSH
25979: LD_INT 1
25981: PLUS
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PPUSH
25987: LD_VAR 0 2
25991: PUSH
25992: LD_VAR 0 4
25996: ARRAY
25997: PUSH
25998: LD_VAR 0 2
26002: PUSH
26003: LD_VAR 0 4
26007: ARRAY
26008: PPUSH
26009: CALL_OW 255
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PPUSH
26018: CALL 34467 0 3
26022: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26023: LD_VAR 0 2
26027: PUSH
26028: LD_VAR 0 4
26032: ARRAY
26033: PPUSH
26034: LD_VAR 0 1
26038: PPUSH
26039: CALL_OW 255
26043: PPUSH
26044: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26048: LD_VAR 0 2
26052: PUSH
26053: LD_VAR 0 4
26057: ARRAY
26058: PPUSH
26059: CALL_OW 141
// end ;
26063: GO 25895
26065: POP
26066: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26067: LD_VAR 0 1
26071: PPUSH
26072: LD_EXP 83
26076: PUSH
26077: LD_VAR 0 5
26081: ARRAY
26082: PUSH
26083: LD_INT 0
26085: PLUS
26086: PPUSH
26087: CALL_OW 505
// end ;
26091: LD_VAR 0 3
26095: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26096: LD_INT 0
26098: PPUSH
26099: PPUSH
26100: PPUSH
26101: PPUSH
// if not hack in hackTanks then
26102: LD_VAR 0 1
26106: PUSH
26107: LD_EXP 82
26111: IN
26112: NOT
26113: IFFALSE 26117
// exit ;
26115: GO 26361
// index := GetElementIndex ( hackTanks , hack ) ;
26117: LD_ADDR_VAR 0 4
26121: PUSH
26122: LD_EXP 82
26126: PPUSH
26127: LD_VAR 0 1
26131: PPUSH
26132: CALL 34250 0 2
26136: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26137: LD_ADDR_VAR 0 3
26141: PUSH
26142: DOUBLE
26143: LD_EXP 83
26147: PUSH
26148: LD_VAR 0 4
26152: ARRAY
26153: INC
26154: ST_TO_ADDR
26155: LD_INT 1
26157: PUSH
26158: FOR_DOWNTO
26159: IFFALSE 26335
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26161: LD_ADDR_VAR 0 5
26165: PUSH
26166: LD_EXP 83
26170: PUSH
26171: LD_VAR 0 4
26175: ARRAY
26176: PUSH
26177: LD_VAR 0 3
26181: ARRAY
26182: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26183: LD_VAR 0 5
26187: PUSH
26188: LD_INT 1
26190: ARRAY
26191: PPUSH
26192: CALL_OW 302
26196: NOT
26197: IFTRUE 26225
26199: PUSH
26200: LD_VAR 0 5
26204: PUSH
26205: LD_INT 1
26207: ARRAY
26208: PPUSH
26209: CALL_OW 255
26213: PUSH
26214: LD_VAR 0 1
26218: PPUSH
26219: CALL_OW 255
26223: NONEQUAL
26224: OR
26225: IFFALSE 26333
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26227: LD_VAR 0 5
26231: PUSH
26232: LD_INT 1
26234: ARRAY
26235: PPUSH
26236: CALL_OW 305
26240: IFFALSE 26268
26242: PUSH
26243: LD_VAR 0 5
26247: PUSH
26248: LD_INT 1
26250: ARRAY
26251: PPUSH
26252: CALL_OW 255
26256: PUSH
26257: LD_VAR 0 1
26261: PPUSH
26262: CALL_OW 255
26266: EQUAL
26267: AND
26268: IFFALSE 26292
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26270: LD_VAR 0 5
26274: PUSH
26275: LD_INT 1
26277: ARRAY
26278: PPUSH
26279: LD_VAR 0 5
26283: PUSH
26284: LD_INT 2
26286: ARRAY
26287: PPUSH
26288: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26292: LD_ADDR_EXP 83
26296: PUSH
26297: LD_EXP 83
26301: PPUSH
26302: LD_VAR 0 4
26306: PPUSH
26307: LD_EXP 83
26311: PUSH
26312: LD_VAR 0 4
26316: ARRAY
26317: PPUSH
26318: LD_VAR 0 3
26322: PPUSH
26323: CALL_OW 3
26327: PPUSH
26328: CALL_OW 1
26332: ST_TO_ADDR
// end ; end ;
26333: GO 26158
26335: POP
26336: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26337: LD_VAR 0 1
26341: PPUSH
26342: LD_EXP 83
26346: PUSH
26347: LD_VAR 0 4
26351: ARRAY
26352: PUSH
26353: LD_INT 0
26355: PLUS
26356: PPUSH
26357: CALL_OW 505
// end ;
26361: LD_VAR 0 2
26365: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26366: LD_INT 0
26368: PPUSH
26369: PPUSH
26370: PPUSH
26371: PPUSH
// if not hack in hackTanks then
26372: LD_VAR 0 1
26376: PUSH
26377: LD_EXP 82
26381: IN
26382: NOT
26383: IFFALSE 26387
// exit ;
26385: GO 26472
// index := GetElementIndex ( hackTanks , hack ) ;
26387: LD_ADDR_VAR 0 5
26391: PUSH
26392: LD_EXP 82
26396: PPUSH
26397: LD_VAR 0 1
26401: PPUSH
26402: CALL 34250 0 2
26406: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26407: LD_ADDR_VAR 0 4
26411: PUSH
26412: DOUBLE
26413: LD_INT 1
26415: DEC
26416: ST_TO_ADDR
26417: LD_EXP 83
26421: PUSH
26422: LD_VAR 0 5
26426: ARRAY
26427: PUSH
26428: FOR_TO
26429: IFFALSE 26470
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26431: LD_EXP 83
26435: PUSH
26436: LD_VAR 0 5
26440: ARRAY
26441: PUSH
26442: LD_VAR 0 4
26446: ARRAY
26447: PUSH
26448: LD_INT 1
26450: ARRAY
26451: PUSH
26452: LD_VAR 0 2
26456: EQUAL
26457: IFFALSE 26468
// KillUnit ( vehicle ) ;
26459: LD_VAR 0 2
26463: PPUSH
26464: CALL_OW 66
26468: GO 26428
26470: POP
26471: POP
// end ;
26472: LD_VAR 0 3
26476: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26477: LD_EXP 87
26481: NOT
26482: IFFALSE 26517
26484: GO 26486
26486: DISABLE
// begin initMiner := true ;
26487: LD_ADDR_EXP 87
26491: PUSH
26492: LD_INT 1
26494: ST_TO_ADDR
// minersList := [ ] ;
26495: LD_ADDR_EXP 88
26499: PUSH
26500: EMPTY
26501: ST_TO_ADDR
// minerMinesList := [ ] ;
26502: LD_ADDR_EXP 89
26506: PUSH
26507: EMPTY
26508: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26509: LD_ADDR_EXP 90
26513: PUSH
26514: LD_INT 5
26516: ST_TO_ADDR
// end ;
26517: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26518: LD_EXP 87
26522: IFFALSE 26540
26524: PUSH
26525: LD_INT 34
26527: PUSH
26528: LD_INT 81
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PPUSH
26535: CALL_OW 69
26539: AND
26540: IFFALSE 27003
26542: GO 26544
26544: DISABLE
26545: LD_INT 0
26547: PPUSH
26548: PPUSH
26549: PPUSH
26550: PPUSH
// begin enable ;
26551: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26552: LD_ADDR_VAR 0 1
26556: PUSH
26557: LD_INT 34
26559: PUSH
26560: LD_INT 81
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PPUSH
26567: CALL_OW 69
26571: PUSH
26572: FOR_IN
26573: IFFALSE 26645
// begin if not i in minersList then
26575: LD_VAR 0 1
26579: PUSH
26580: LD_EXP 88
26584: IN
26585: NOT
26586: IFFALSE 26643
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26588: LD_ADDR_EXP 88
26592: PUSH
26593: LD_EXP 88
26597: PPUSH
26598: LD_EXP 88
26602: PUSH
26603: LD_INT 1
26605: PLUS
26606: PPUSH
26607: LD_VAR 0 1
26611: PPUSH
26612: CALL_OW 1
26616: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26617: LD_ADDR_EXP 89
26621: PUSH
26622: LD_EXP 89
26626: PPUSH
26627: LD_EXP 89
26631: PUSH
26632: LD_INT 1
26634: PLUS
26635: PPUSH
26636: EMPTY
26637: PPUSH
26638: CALL_OW 1
26642: ST_TO_ADDR
// end end ;
26643: GO 26572
26645: POP
26646: POP
// for i := minerMinesList downto 1 do
26647: LD_ADDR_VAR 0 1
26651: PUSH
26652: DOUBLE
26653: LD_EXP 89
26657: INC
26658: ST_TO_ADDR
26659: LD_INT 1
26661: PUSH
26662: FOR_DOWNTO
26663: IFFALSE 27001
// begin if IsLive ( minersList [ i ] ) then
26665: LD_EXP 88
26669: PUSH
26670: LD_VAR 0 1
26674: ARRAY
26675: PPUSH
26676: CALL_OW 300
26680: IFFALSE 26708
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26682: LD_EXP 88
26686: PUSH
26687: LD_VAR 0 1
26691: ARRAY
26692: PPUSH
26693: LD_EXP 89
26697: PUSH
26698: LD_VAR 0 1
26702: ARRAY
26703: PPUSH
26704: CALL_OW 505
// if not minerMinesList [ i ] then
26708: LD_EXP 89
26712: PUSH
26713: LD_VAR 0 1
26717: ARRAY
26718: NOT
26719: IFFALSE 26723
// continue ;
26721: GO 26662
// for j := minerMinesList [ i ] downto 1 do
26723: LD_ADDR_VAR 0 2
26727: PUSH
26728: DOUBLE
26729: LD_EXP 89
26733: PUSH
26734: LD_VAR 0 1
26738: ARRAY
26739: INC
26740: ST_TO_ADDR
26741: LD_INT 1
26743: PUSH
26744: FOR_DOWNTO
26745: IFFALSE 26997
// begin side := GetSide ( minersList [ i ] ) ;
26747: LD_ADDR_VAR 0 3
26751: PUSH
26752: LD_EXP 88
26756: PUSH
26757: LD_VAR 0 1
26761: ARRAY
26762: PPUSH
26763: CALL_OW 255
26767: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26768: LD_ADDR_VAR 0 4
26772: PUSH
26773: LD_EXP 89
26777: PUSH
26778: LD_VAR 0 1
26782: ARRAY
26783: PUSH
26784: LD_VAR 0 2
26788: ARRAY
26789: PUSH
26790: LD_INT 1
26792: ARRAY
26793: PPUSH
26794: LD_EXP 89
26798: PUSH
26799: LD_VAR 0 1
26803: ARRAY
26804: PUSH
26805: LD_VAR 0 2
26809: ARRAY
26810: PUSH
26811: LD_INT 2
26813: ARRAY
26814: PPUSH
26815: CALL_OW 428
26819: ST_TO_ADDR
// if not tmp then
26820: LD_VAR 0 4
26824: NOT
26825: IFFALSE 26829
// continue ;
26827: GO 26744
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26829: LD_VAR 0 4
26833: PUSH
26834: LD_INT 81
26836: PUSH
26837: LD_VAR 0 3
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PPUSH
26846: CALL_OW 69
26850: IN
26851: IFFALSE 26901
26853: PUSH
26854: LD_EXP 89
26858: PUSH
26859: LD_VAR 0 1
26863: ARRAY
26864: PUSH
26865: LD_VAR 0 2
26869: ARRAY
26870: PUSH
26871: LD_INT 1
26873: ARRAY
26874: PPUSH
26875: LD_EXP 89
26879: PUSH
26880: LD_VAR 0 1
26884: ARRAY
26885: PUSH
26886: LD_VAR 0 2
26890: ARRAY
26891: PUSH
26892: LD_INT 2
26894: ARRAY
26895: PPUSH
26896: CALL_OW 458
26900: AND
26901: IFFALSE 26995
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26903: LD_EXP 89
26907: PUSH
26908: LD_VAR 0 1
26912: ARRAY
26913: PUSH
26914: LD_VAR 0 2
26918: ARRAY
26919: PUSH
26920: LD_INT 1
26922: ARRAY
26923: PPUSH
26924: LD_EXP 89
26928: PUSH
26929: LD_VAR 0 1
26933: ARRAY
26934: PUSH
26935: LD_VAR 0 2
26939: ARRAY
26940: PUSH
26941: LD_INT 2
26943: ARRAY
26944: PPUSH
26945: LD_VAR 0 3
26949: PPUSH
26950: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26954: LD_ADDR_EXP 89
26958: PUSH
26959: LD_EXP 89
26963: PPUSH
26964: LD_VAR 0 1
26968: PPUSH
26969: LD_EXP 89
26973: PUSH
26974: LD_VAR 0 1
26978: ARRAY
26979: PPUSH
26980: LD_VAR 0 2
26984: PPUSH
26985: CALL_OW 3
26989: PPUSH
26990: CALL_OW 1
26994: ST_TO_ADDR
// end ; end ;
26995: GO 26744
26997: POP
26998: POP
// end ;
26999: GO 26662
27001: POP
27002: POP
// end ;
27003: PPOPN 4
27005: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27006: LD_INT 0
27008: PPUSH
27009: PPUSH
// result := false ;
27010: LD_ADDR_VAR 0 4
27014: PUSH
27015: LD_INT 0
27017: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27018: LD_VAR 0 1
27022: PPUSH
27023: CALL_OW 264
27027: PUSH
27028: LD_INT 81
27030: EQUAL
27031: NOT
27032: IFFALSE 27036
// exit ;
27034: GO 27280
// index := GetElementIndex ( minersList , unit ) ;
27036: LD_ADDR_VAR 0 5
27040: PUSH
27041: LD_EXP 88
27045: PPUSH
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL 34250 0 2
27055: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27056: LD_EXP 89
27060: PUSH
27061: LD_VAR 0 5
27065: ARRAY
27066: PUSH
27067: LD_EXP 90
27071: GREATEREQUAL
27072: IFFALSE 27076
// exit ;
27074: GO 27280
// ComMoveXY ( unit , x , y ) ;
27076: LD_VAR 0 1
27080: PPUSH
27081: LD_VAR 0 2
27085: PPUSH
27086: LD_VAR 0 3
27090: PPUSH
27091: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27095: LD_INT 35
27097: PPUSH
27098: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27102: LD_VAR 0 1
27106: PPUSH
27107: LD_VAR 0 2
27111: PPUSH
27112: LD_VAR 0 3
27116: PPUSH
27117: CALL 66296 0 3
27121: NOT
27122: IFFALSE 27135
27124: PUSH
27125: LD_VAR 0 1
27129: PPUSH
27130: CALL_OW 314
27134: AND
27135: IFFALSE 27139
// exit ;
27137: GO 27280
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27139: LD_VAR 0 2
27143: PPUSH
27144: LD_VAR 0 3
27148: PPUSH
27149: CALL_OW 428
27153: PUSH
27154: LD_VAR 0 1
27158: EQUAL
27159: IFFALSE 27173
27161: PUSH
27162: LD_VAR 0 1
27166: PPUSH
27167: CALL_OW 314
27171: NOT
27172: AND
27173: IFFALSE 27095
// PlaySoundXY ( x , y , PlantMine ) ;
27175: LD_VAR 0 2
27179: PPUSH
27180: LD_VAR 0 3
27184: PPUSH
27185: LD_STRING PlantMine
27187: PPUSH
27188: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27192: LD_VAR 0 2
27196: PPUSH
27197: LD_VAR 0 3
27201: PPUSH
27202: LD_VAR 0 1
27206: PPUSH
27207: CALL_OW 255
27211: PPUSH
27212: LD_INT 0
27214: PPUSH
27215: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27219: LD_ADDR_EXP 89
27223: PUSH
27224: LD_EXP 89
27228: PPUSH
27229: LD_VAR 0 5
27233: PUSH
27234: LD_EXP 89
27238: PUSH
27239: LD_VAR 0 5
27243: ARRAY
27244: PUSH
27245: LD_INT 1
27247: PLUS
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PPUSH
27253: LD_VAR 0 2
27257: PUSH
27258: LD_VAR 0 3
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PPUSH
27267: CALL 34467 0 3
27271: ST_TO_ADDR
// result := true ;
27272: LD_ADDR_VAR 0 4
27276: PUSH
27277: LD_INT 1
27279: ST_TO_ADDR
// end ;
27280: LD_VAR 0 4
27284: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27285: LD_INT 0
27287: PPUSH
27288: PPUSH
27289: PPUSH
// if not unit in minersList then
27290: LD_VAR 0 1
27294: PUSH
27295: LD_EXP 88
27299: IN
27300: NOT
27301: IFFALSE 27305
// exit ;
27303: GO 27699
// index := GetElementIndex ( minersList , unit ) ;
27305: LD_ADDR_VAR 0 6
27309: PUSH
27310: LD_EXP 88
27314: PPUSH
27315: LD_VAR 0 1
27319: PPUSH
27320: CALL 34250 0 2
27324: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27325: LD_ADDR_VAR 0 5
27329: PUSH
27330: DOUBLE
27331: LD_EXP 89
27335: PUSH
27336: LD_VAR 0 6
27340: ARRAY
27341: INC
27342: ST_TO_ADDR
27343: LD_INT 1
27345: PUSH
27346: FOR_DOWNTO
27347: IFFALSE 27510
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27349: LD_EXP 89
27353: PUSH
27354: LD_VAR 0 6
27358: ARRAY
27359: PUSH
27360: LD_VAR 0 5
27364: ARRAY
27365: PUSH
27366: LD_INT 1
27368: ARRAY
27369: PUSH
27370: LD_VAR 0 2
27374: EQUAL
27375: IFFALSE 27405
27377: PUSH
27378: LD_EXP 89
27382: PUSH
27383: LD_VAR 0 6
27387: ARRAY
27388: PUSH
27389: LD_VAR 0 5
27393: ARRAY
27394: PUSH
27395: LD_INT 2
27397: ARRAY
27398: PUSH
27399: LD_VAR 0 3
27403: EQUAL
27404: AND
27405: IFFALSE 27508
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27407: LD_EXP 89
27411: PUSH
27412: LD_VAR 0 6
27416: ARRAY
27417: PUSH
27418: LD_VAR 0 5
27422: ARRAY
27423: PUSH
27424: LD_INT 1
27426: ARRAY
27427: PPUSH
27428: LD_EXP 89
27432: PUSH
27433: LD_VAR 0 6
27437: ARRAY
27438: PUSH
27439: LD_VAR 0 5
27443: ARRAY
27444: PUSH
27445: LD_INT 2
27447: ARRAY
27448: PPUSH
27449: LD_VAR 0 1
27453: PPUSH
27454: CALL_OW 255
27458: PPUSH
27459: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27463: LD_ADDR_EXP 89
27467: PUSH
27468: LD_EXP 89
27472: PPUSH
27473: LD_VAR 0 6
27477: PPUSH
27478: LD_EXP 89
27482: PUSH
27483: LD_VAR 0 6
27487: ARRAY
27488: PPUSH
27489: LD_VAR 0 5
27493: PPUSH
27494: CALL_OW 3
27498: PPUSH
27499: CALL_OW 1
27503: ST_TO_ADDR
// exit ;
27504: POP
27505: POP
27506: GO 27699
// end ; end ;
27508: GO 27346
27510: POP
27511: POP
// for i := minerMinesList [ index ] downto 1 do
27512: LD_ADDR_VAR 0 5
27516: PUSH
27517: DOUBLE
27518: LD_EXP 89
27522: PUSH
27523: LD_VAR 0 6
27527: ARRAY
27528: INC
27529: ST_TO_ADDR
27530: LD_INT 1
27532: PUSH
27533: FOR_DOWNTO
27534: IFFALSE 27697
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27536: LD_EXP 89
27540: PUSH
27541: LD_VAR 0 6
27545: ARRAY
27546: PUSH
27547: LD_VAR 0 5
27551: ARRAY
27552: PUSH
27553: LD_INT 1
27555: ARRAY
27556: PPUSH
27557: LD_EXP 89
27561: PUSH
27562: LD_VAR 0 6
27566: ARRAY
27567: PUSH
27568: LD_VAR 0 5
27572: ARRAY
27573: PUSH
27574: LD_INT 2
27576: ARRAY
27577: PPUSH
27578: LD_VAR 0 2
27582: PPUSH
27583: LD_VAR 0 3
27587: PPUSH
27588: CALL_OW 298
27592: PUSH
27593: LD_INT 6
27595: LESS
27596: IFFALSE 27695
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27598: LD_EXP 89
27602: PUSH
27603: LD_VAR 0 6
27607: ARRAY
27608: PUSH
27609: LD_VAR 0 5
27613: ARRAY
27614: PUSH
27615: LD_INT 1
27617: ARRAY
27618: PPUSH
27619: LD_EXP 89
27623: PUSH
27624: LD_VAR 0 6
27628: ARRAY
27629: PUSH
27630: LD_VAR 0 5
27634: ARRAY
27635: PUSH
27636: LD_INT 2
27638: ARRAY
27639: PPUSH
27640: LD_VAR 0 1
27644: PPUSH
27645: CALL_OW 255
27649: PPUSH
27650: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27654: LD_ADDR_EXP 89
27658: PUSH
27659: LD_EXP 89
27663: PPUSH
27664: LD_VAR 0 6
27668: PPUSH
27669: LD_EXP 89
27673: PUSH
27674: LD_VAR 0 6
27678: ARRAY
27679: PPUSH
27680: LD_VAR 0 5
27684: PPUSH
27685: CALL_OW 3
27689: PPUSH
27690: CALL_OW 1
27694: ST_TO_ADDR
// end ; end ;
27695: GO 27533
27697: POP
27698: POP
// end ;
27699: LD_VAR 0 4
27703: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27704: LD_INT 0
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
27711: PPUSH
27712: PPUSH
27713: PPUSH
27714: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27715: LD_VAR 0 1
27719: PPUSH
27720: CALL_OW 264
27724: PUSH
27725: LD_INT 81
27727: EQUAL
27728: NOT
27729: IFTRUE 27744
27731: PUSH
27732: LD_VAR 0 1
27736: PUSH
27737: LD_EXP 88
27741: IN
27742: NOT
27743: OR
27744: IFFALSE 27748
// exit ;
27746: GO 28074
// index := GetElementIndex ( minersList , unit ) ;
27748: LD_ADDR_VAR 0 6
27752: PUSH
27753: LD_EXP 88
27757: PPUSH
27758: LD_VAR 0 1
27762: PPUSH
27763: CALL 34250 0 2
27767: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27768: LD_ADDR_VAR 0 8
27772: PUSH
27773: LD_EXP 90
27777: PUSH
27778: LD_EXP 89
27782: PUSH
27783: LD_VAR 0 6
27787: ARRAY
27788: MINUS
27789: ST_TO_ADDR
// if not minesFreeAmount then
27790: LD_VAR 0 8
27794: NOT
27795: IFFALSE 27799
// exit ;
27797: GO 28074
// tmp := [ ] ;
27799: LD_ADDR_VAR 0 7
27803: PUSH
27804: EMPTY
27805: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27806: LD_ADDR_VAR 0 5
27810: PUSH
27811: DOUBLE
27812: LD_INT 1
27814: DEC
27815: ST_TO_ADDR
27816: LD_VAR 0 8
27820: PUSH
27821: FOR_TO
27822: IFFALSE 28021
// begin _d := rand ( 0 , 5 ) ;
27824: LD_ADDR_VAR 0 11
27828: PUSH
27829: LD_INT 0
27831: PPUSH
27832: LD_INT 5
27834: PPUSH
27835: CALL_OW 12
27839: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27840: LD_ADDR_VAR 0 12
27844: PUSH
27845: LD_INT 2
27847: PPUSH
27848: LD_INT 6
27850: PPUSH
27851: CALL_OW 12
27855: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27856: LD_ADDR_VAR 0 9
27860: PUSH
27861: LD_VAR 0 2
27865: PPUSH
27866: LD_VAR 0 11
27870: PPUSH
27871: LD_VAR 0 12
27875: PPUSH
27876: CALL_OW 272
27880: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27881: LD_ADDR_VAR 0 10
27885: PUSH
27886: LD_VAR 0 3
27890: PPUSH
27891: LD_VAR 0 11
27895: PPUSH
27896: LD_VAR 0 12
27900: PPUSH
27901: CALL_OW 273
27905: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27906: LD_VAR 0 9
27910: PPUSH
27911: LD_VAR 0 10
27915: PPUSH
27916: CALL_OW 488
27920: IFFALSE 27944
27922: PUSH
27923: LD_VAR 0 9
27927: PUSH
27928: LD_VAR 0 10
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_VAR 0 7
27941: IN
27942: NOT
27943: AND
27944: IFFALSE 27963
27946: PUSH
27947: LD_VAR 0 9
27951: PPUSH
27952: LD_VAR 0 10
27956: PPUSH
27957: CALL_OW 458
27961: NOT
27962: AND
27963: IFFALSE 28005
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27965: LD_ADDR_VAR 0 7
27969: PUSH
27970: LD_VAR 0 7
27974: PPUSH
27975: LD_VAR 0 7
27979: PUSH
27980: LD_INT 1
27982: PLUS
27983: PPUSH
27984: LD_VAR 0 9
27988: PUSH
27989: LD_VAR 0 10
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PPUSH
27998: CALL_OW 1
28002: ST_TO_ADDR
28003: GO 28019
// i := i - 1 ;
28005: LD_ADDR_VAR 0 5
28009: PUSH
28010: LD_VAR 0 5
28014: PUSH
28015: LD_INT 1
28017: MINUS
28018: ST_TO_ADDR
// end ;
28019: GO 27821
28021: POP
28022: POP
// for i in tmp do
28023: LD_ADDR_VAR 0 5
28027: PUSH
28028: LD_VAR 0 7
28032: PUSH
28033: FOR_IN
28034: IFFALSE 28072
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28036: LD_VAR 0 1
28040: PPUSH
28041: LD_VAR 0 5
28045: PUSH
28046: LD_INT 1
28048: ARRAY
28049: PPUSH
28050: LD_VAR 0 5
28054: PUSH
28055: LD_INT 2
28057: ARRAY
28058: PPUSH
28059: CALL 27006 0 3
28063: NOT
28064: IFFALSE 28070
// exit ;
28066: POP
28067: POP
28068: GO 28074
28070: GO 28033
28072: POP
28073: POP
// end ;
28074: LD_VAR 0 4
28078: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28079: LD_INT 0
28081: PPUSH
28082: PPUSH
28083: PPUSH
28084: PPUSH
28085: PPUSH
28086: PPUSH
28087: PPUSH
28088: PPUSH
28089: PPUSH
// if GetClass ( unit ) <> class_sniper then
28090: LD_VAR 0 1
28094: PPUSH
28095: CALL_OW 257
28099: PUSH
28100: LD_INT 5
28102: NONEQUAL
28103: IFFALSE 28107
// exit ;
28105: GO 28577
// dist := 8 ;
28107: LD_ADDR_VAR 0 5
28111: PUSH
28112: LD_INT 8
28114: ST_TO_ADDR
// viewRange := 12 ;
28115: LD_ADDR_VAR 0 8
28119: PUSH
28120: LD_INT 12
28122: ST_TO_ADDR
// side := GetSide ( unit ) ;
28123: LD_ADDR_VAR 0 6
28127: PUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 255
28137: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28138: LD_INT 61
28140: PPUSH
28141: LD_VAR 0 6
28145: PPUSH
28146: CALL_OW 321
28150: PUSH
28151: LD_INT 2
28153: EQUAL
28154: IFFALSE 28164
// viewRange := 16 ;
28156: LD_ADDR_VAR 0 8
28160: PUSH
28161: LD_INT 16
28163: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28164: LD_VAR 0 1
28168: PPUSH
28169: LD_VAR 0 2
28173: PPUSH
28174: LD_VAR 0 3
28178: PPUSH
28179: CALL_OW 297
28183: PUSH
28184: LD_VAR 0 5
28188: GREATER
28189: IFFALSE 28268
// begin ComMoveXY ( unit , x , y ) ;
28191: LD_VAR 0 1
28195: PPUSH
28196: LD_VAR 0 2
28200: PPUSH
28201: LD_VAR 0 3
28205: PPUSH
28206: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28210: LD_INT 35
28212: PPUSH
28213: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28217: LD_VAR 0 1
28221: PPUSH
28222: LD_VAR 0 2
28226: PPUSH
28227: LD_VAR 0 3
28231: PPUSH
28232: CALL 66296 0 3
28236: NOT
28237: IFFALSE 28241
// exit ;
28239: GO 28577
// until GetDistUnitXY ( unit , x , y ) < dist ;
28241: LD_VAR 0 1
28245: PPUSH
28246: LD_VAR 0 2
28250: PPUSH
28251: LD_VAR 0 3
28255: PPUSH
28256: CALL_OW 297
28260: PUSH
28261: LD_VAR 0 5
28265: LESS
28266: IFFALSE 28210
// end ; ComTurnXY ( unit , x , y ) ;
28268: LD_VAR 0 1
28272: PPUSH
28273: LD_VAR 0 2
28277: PPUSH
28278: LD_VAR 0 3
28282: PPUSH
28283: CALL_OW 118
// repeat if Multiplayer then
28287: LD_OWVAR 4
28291: IFFALSE 28302
// wait ( 35 ) else
28293: LD_INT 35
28295: PPUSH
28296: CALL_OW 67
28300: GO 28309
// wait ( 5 ) ;
28302: LD_INT 5
28304: PPUSH
28305: CALL_OW 67
// _d := GetDir ( unit ) ;
28309: LD_ADDR_VAR 0 11
28313: PUSH
28314: LD_VAR 0 1
28318: PPUSH
28319: CALL_OW 254
28323: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
28324: LD_ADDR_VAR 0 7
28328: PUSH
28329: LD_VAR 0 1
28333: PPUSH
28334: CALL_OW 250
28338: PPUSH
28339: LD_VAR 0 1
28343: PPUSH
28344: CALL_OW 251
28348: PPUSH
28349: LD_VAR 0 2
28353: PPUSH
28354: LD_VAR 0 3
28358: PPUSH
28359: CALL 68932 0 4
28363: ST_TO_ADDR
// until dir = _d ;
28364: LD_VAR 0 7
28368: PUSH
28369: LD_VAR 0 11
28373: EQUAL
28374: IFFALSE 28287
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
28376: LD_ADDR_VAR 0 9
28380: PUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: CALL_OW 250
28390: PPUSH
28391: LD_VAR 0 7
28395: PPUSH
28396: LD_VAR 0 5
28400: PPUSH
28401: CALL_OW 272
28405: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
28406: LD_ADDR_VAR 0 10
28410: PUSH
28411: LD_VAR 0 1
28415: PPUSH
28416: CALL_OW 251
28420: PPUSH
28421: LD_VAR 0 7
28425: PPUSH
28426: LD_VAR 0 5
28430: PPUSH
28431: CALL_OW 273
28435: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28436: LD_VAR 0 9
28440: PPUSH
28441: LD_VAR 0 10
28445: PPUSH
28446: CALL_OW 488
28450: NOT
28451: IFFALSE 28455
// exit ;
28453: GO 28577
// ComAnimCustom ( unit , 1 ) ;
28455: LD_VAR 0 1
28459: PPUSH
28460: LD_INT 1
28462: PPUSH
28463: CALL_OW 592
// p := 0 ;
28467: LD_ADDR_VAR 0 12
28471: PUSH
28472: LD_INT 0
28474: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28475: LD_VAR 0 9
28479: PPUSH
28480: LD_VAR 0 10
28484: PPUSH
28485: LD_VAR 0 6
28489: PPUSH
28490: LD_VAR 0 8
28494: PPUSH
28495: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
28499: LD_INT 35
28501: PPUSH
28502: CALL_OW 67
// p := Inc ( p ) ;
28506: LD_ADDR_VAR 0 12
28510: PUSH
28511: LD_VAR 0 12
28515: PPUSH
28516: CALL 68888 0 1
28520: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
28521: LD_VAR 0 12
28525: PUSH
28526: LD_INT 3
28528: EQUAL
28529: IFTRUE 28543
28531: PUSH
28532: LD_VAR 0 1
28536: PPUSH
28537: CALL_OW 302
28541: NOT
28542: OR
28543: IFTRUE 28556
28545: PUSH
28546: LD_VAR 0 1
28550: PPUSH
28551: CALL_OW 301
28555: OR
28556: IFFALSE 28499
// RemoveSeeing ( _x , _y , side ) ;
28558: LD_VAR 0 9
28562: PPUSH
28563: LD_VAR 0 10
28567: PPUSH
28568: LD_VAR 0 6
28572: PPUSH
28573: CALL_OW 331
// end ;
28577: LD_VAR 0 4
28581: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
28582: LD_INT 0
28584: PPUSH
28585: PPUSH
28586: PPUSH
28587: PPUSH
28588: PPUSH
28589: PPUSH
28590: PPUSH
28591: PPUSH
28592: PPUSH
28593: PPUSH
28594: PPUSH
// if not unit then
28595: LD_VAR 0 1
28599: NOT
28600: IFFALSE 28604
// exit ;
28602: GO 28875
// side := GetSide ( unit ) ;
28604: LD_ADDR_VAR 0 3
28608: PUSH
28609: LD_VAR 0 1
28613: PPUSH
28614: CALL_OW 255
28618: ST_TO_ADDR
// x := GetX ( unit ) ;
28619: LD_ADDR_VAR 0 5
28623: PUSH
28624: LD_VAR 0 1
28628: PPUSH
28629: CALL_OW 250
28633: ST_TO_ADDR
// y := GetY ( unit ) ;
28634: LD_ADDR_VAR 0 6
28638: PUSH
28639: LD_VAR 0 1
28643: PPUSH
28644: CALL_OW 251
28648: ST_TO_ADDR
// r := 8 ;
28649: LD_ADDR_VAR 0 4
28653: PUSH
28654: LD_INT 8
28656: ST_TO_ADDR
// if x - r < 0 then
28657: LD_VAR 0 5
28661: PUSH
28662: LD_VAR 0 4
28666: MINUS
28667: PUSH
28668: LD_INT 0
28670: LESS
28671: IFFALSE 28683
// min_x := 0 else
28673: LD_ADDR_VAR 0 7
28677: PUSH
28678: LD_INT 0
28680: ST_TO_ADDR
28681: GO 28699
// min_x := x - r ;
28683: LD_ADDR_VAR 0 7
28687: PUSH
28688: LD_VAR 0 5
28692: PUSH
28693: LD_VAR 0 4
28697: MINUS
28698: ST_TO_ADDR
// if y - r < 0 then
28699: LD_VAR 0 6
28703: PUSH
28704: LD_VAR 0 4
28708: MINUS
28709: PUSH
28710: LD_INT 0
28712: LESS
28713: IFFALSE 28725
// min_y := 0 else
28715: LD_ADDR_VAR 0 8
28719: PUSH
28720: LD_INT 0
28722: ST_TO_ADDR
28723: GO 28741
// min_y := y - r ;
28725: LD_ADDR_VAR 0 8
28729: PUSH
28730: LD_VAR 0 6
28734: PUSH
28735: LD_VAR 0 4
28739: MINUS
28740: ST_TO_ADDR
// max_x := x + r ;
28741: LD_ADDR_VAR 0 9
28745: PUSH
28746: LD_VAR 0 5
28750: PUSH
28751: LD_VAR 0 4
28755: PLUS
28756: ST_TO_ADDR
// max_y := y + r ;
28757: LD_ADDR_VAR 0 10
28761: PUSH
28762: LD_VAR 0 6
28766: PUSH
28767: LD_VAR 0 4
28771: PLUS
28772: ST_TO_ADDR
// for _x = min_x to max_x do
28773: LD_ADDR_VAR 0 11
28777: PUSH
28778: DOUBLE
28779: LD_VAR 0 7
28783: DEC
28784: ST_TO_ADDR
28785: LD_VAR 0 9
28789: PUSH
28790: FOR_TO
28791: IFFALSE 28873
// for _y = min_y to max_y do
28793: LD_ADDR_VAR 0 12
28797: PUSH
28798: DOUBLE
28799: LD_VAR 0 8
28803: DEC
28804: ST_TO_ADDR
28805: LD_VAR 0 10
28809: PUSH
28810: FOR_TO
28811: IFFALSE 28869
// begin if not ValidHex ( _x , _y ) then
28813: LD_VAR 0 11
28817: PPUSH
28818: LD_VAR 0 12
28822: PPUSH
28823: CALL_OW 488
28827: NOT
28828: IFFALSE 28832
// continue ;
28830: GO 28810
// if MineAtPos ( _x , _y ) then
28832: LD_VAR 0 11
28836: PPUSH
28837: LD_VAR 0 12
28841: PPUSH
28842: CALL_OW 458
28846: IFFALSE 28867
// ViewMineAtPos ( _x , _y , side ) ;
28848: LD_VAR 0 11
28852: PPUSH
28853: LD_VAR 0 12
28857: PPUSH
28858: LD_VAR 0 3
28862: PPUSH
28863: CALL_OW 457
// end ;
28867: GO 28810
28869: POP
28870: POP
28871: GO 28790
28873: POP
28874: POP
// end ;
28875: LD_VAR 0 2
28879: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
28880: LD_INT 0
28882: PPUSH
28883: PPUSH
28884: PPUSH
28885: PPUSH
28886: PPUSH
28887: PPUSH
// if not units then
28888: LD_VAR 0 1
28892: NOT
28893: IFFALSE 28897
// exit ;
28895: GO 29327
// scaners := [ ] ;
28897: LD_ADDR_VAR 0 6
28901: PUSH
28902: EMPTY
28903: ST_TO_ADDR
// for i in units do
28904: LD_ADDR_VAR 0 3
28908: PUSH
28909: LD_VAR 0 1
28913: PUSH
28914: FOR_IN
28915: IFFALSE 29072
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
28917: LD_VAR 0 3
28921: PPUSH
28922: CALL_OW 264
28926: PUSH
28927: LD_INT 11
28929: NONEQUAL
28930: IFTRUE 28944
28932: PUSH
28933: LD_VAR 0 3
28937: PPUSH
28938: CALL_OW 302
28942: NOT
28943: OR
28944: IFTRUE 28961
28946: PUSH
28947: LD_VAR 0 3
28951: PPUSH
28952: CALL_OW 110
28956: PUSH
28957: LD_INT 502
28959: EQUAL
28960: OR
28961: IFFALSE 28965
// continue ;
28963: GO 28914
// ComStop ( i ) ;
28965: LD_VAR 0 3
28969: PPUSH
28970: CALL_OW 141
// x := GetX ( i ) ;
28974: LD_ADDR_VAR 0 4
28978: PUSH
28979: LD_VAR 0 3
28983: PPUSH
28984: CALL_OW 250
28988: ST_TO_ADDR
// y := GetY ( i ) ;
28989: LD_ADDR_VAR 0 5
28993: PUSH
28994: LD_VAR 0 3
28998: PPUSH
28999: CALL_OW 251
29003: ST_TO_ADDR
// if GetSide ( i ) = your_side then
29004: LD_VAR 0 3
29008: PPUSH
29009: CALL_OW 255
29013: PUSH
29014: LD_OWVAR 2
29018: EQUAL
29019: IFFALSE 29038
// PlaySoundXY ( x , y , mineDetector ) ;
29021: LD_VAR 0 4
29025: PPUSH
29026: LD_VAR 0 5
29030: PPUSH
29031: LD_STRING mineDetector
29033: PPUSH
29034: CALL_OW 366
// scaners := Join ( scaners , i ) ;
29038: LD_ADDR_VAR 0 6
29042: PUSH
29043: LD_VAR 0 6
29047: PPUSH
29048: LD_VAR 0 3
29052: PPUSH
29053: CALL 67515 0 2
29057: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
29058: LD_VAR 0 3
29062: PPUSH
29063: LD_INT 502
29065: PPUSH
29066: CALL_OW 109
// end ;
29070: GO 28914
29072: POP
29073: POP
// if not scaners then
29074: LD_VAR 0 6
29078: NOT
29079: IFFALSE 29083
// exit ;
29081: GO 29327
// wait ( 3 ) ;
29083: LD_INT 3
29085: PPUSH
29086: CALL_OW 67
// timer := 6 ;
29090: LD_ADDR_VAR 0 7
29094: PUSH
29095: LD_INT 6
29097: ST_TO_ADDR
// repeat for i in scaners do
29098: LD_ADDR_VAR 0 3
29102: PUSH
29103: LD_VAR 0 6
29107: PUSH
29108: FOR_IN
29109: IFFALSE 29225
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
29111: LD_VAR 0 3
29115: PPUSH
29116: CALL_OW 302
29120: NOT
29121: IFTRUE 29134
29123: PUSH
29124: LD_VAR 0 3
29128: PPUSH
29129: CALL_OW 314
29133: OR
29134: IFTRUE 29165
29136: PUSH
29137: LD_VAR 0 3
29141: PPUSH
29142: CALL_OW 263
29146: PUSH
29147: LD_INT 1
29149: EQUAL
29150: IFFALSE 29164
29152: PUSH
29153: LD_VAR 0 3
29157: PPUSH
29158: CALL_OW 311
29162: NOT
29163: AND
29164: OR
29165: IFFALSE 29209
// begin SetUnitDisplayNumber ( i , 0 ) ;
29167: LD_VAR 0 3
29171: PPUSH
29172: LD_INT 0
29174: PPUSH
29175: CALL_OW 505
// SetTag ( i , 0 ) ;
29179: LD_VAR 0 3
29183: PPUSH
29184: LD_INT 0
29186: PPUSH
29187: CALL_OW 109
// scaners := scaners diff i ;
29191: LD_ADDR_VAR 0 6
29195: PUSH
29196: LD_VAR 0 6
29200: PUSH
29201: LD_VAR 0 3
29205: DIFF
29206: ST_TO_ADDR
// continue ;
29207: GO 29108
// end ; SetUnitDisplayNumber ( i , timer ) ;
29209: LD_VAR 0 3
29213: PPUSH
29214: LD_VAR 0 7
29218: PPUSH
29219: CALL_OW 505
// end ;
29223: GO 29108
29225: POP
29226: POP
// if not scaners then
29227: LD_VAR 0 6
29231: NOT
29232: IFFALSE 29236
// exit ;
29234: GO 29327
// timer := Dec ( timer ) ;
29236: LD_ADDR_VAR 0 7
29240: PUSH
29241: LD_VAR 0 7
29245: PPUSH
29246: CALL 68910 0 1
29250: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29251: LD_INT 35
29253: PPUSH
29254: CALL_OW 67
// until timer = 0 ;
29258: LD_VAR 0 7
29262: PUSH
29263: LD_INT 0
29265: EQUAL
29266: IFFALSE 29098
// if not scaners then
29268: LD_VAR 0 6
29272: NOT
29273: IFFALSE 29277
// exit ;
29275: GO 29327
// for i in scaners do
29277: LD_ADDR_VAR 0 3
29281: PUSH
29282: LD_VAR 0 6
29286: PUSH
29287: FOR_IN
29288: IFFALSE 29325
// begin SetUnitDisplayNumber ( i , 0 ) ;
29290: LD_VAR 0 3
29294: PPUSH
29295: LD_INT 0
29297: PPUSH
29298: CALL_OW 505
// SetTag ( i , 0 ) ;
29302: LD_VAR 0 3
29306: PPUSH
29307: LD_INT 0
29309: PPUSH
29310: CALL_OW 109
// RevealDetectorMine ( i ) ;
29314: LD_VAR 0 3
29318: PPUSH
29319: CALL 28582 0 1
// end ;
29323: GO 29287
29325: POP
29326: POP
// end ;
29327: LD_VAR 0 2
29331: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
29332: LD_INT 0
29334: PPUSH
// if p1 = mine_detector_mode then
29335: LD_VAR 0 2
29339: PUSH
29340: LD_INT 103
29342: EQUAL
29343: IFFALSE 29354
// DetectMine ( units ) ;
29345: LD_VAR 0 1
29349: PPUSH
29350: CALL 28880 0 1
// end ; end_of_file
29354: LD_VAR 0 7
29358: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29359: LD_INT 0
29361: PPUSH
29362: PPUSH
// if exist_mode then
29363: LD_VAR 0 2
29367: IFFALSE 29413
// begin unit := CreateCharacter ( prefix & ident ) ;
29369: LD_ADDR_VAR 0 5
29373: PUSH
29374: LD_VAR 0 3
29378: PUSH
29379: LD_VAR 0 1
29383: STR
29384: PPUSH
29385: CALL_OW 34
29389: ST_TO_ADDR
// if unit then
29390: LD_VAR 0 5
29394: IFFALSE 29411
// DeleteCharacters ( prefix & ident ) ;
29396: LD_VAR 0 3
29400: PUSH
29401: LD_VAR 0 1
29405: STR
29406: PPUSH
29407: CALL_OW 40
// end else
29411: GO 29428
// unit := NewCharacter ( ident ) ;
29413: LD_ADDR_VAR 0 5
29417: PUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: CALL_OW 25
29427: ST_TO_ADDR
// result := unit ;
29428: LD_ADDR_VAR 0 4
29432: PUSH
29433: LD_VAR 0 5
29437: ST_TO_ADDR
// end ;
29438: LD_VAR 0 4
29442: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
29443: LD_INT 0
29445: PPUSH
29446: PPUSH
// if exist_mode then
29447: LD_VAR 0 2
29451: IFFALSE 29476
// unit := CreateCharacter ( prefix & ident ) else
29453: LD_ADDR_VAR 0 5
29457: PUSH
29458: LD_VAR 0 3
29462: PUSH
29463: LD_VAR 0 1
29467: STR
29468: PPUSH
29469: CALL_OW 34
29473: ST_TO_ADDR
29474: GO 29491
// unit := NewCharacter ( ident ) ;
29476: LD_ADDR_VAR 0 5
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 25
29490: ST_TO_ADDR
// result := unit ;
29491: LD_ADDR_VAR 0 4
29495: PUSH
29496: LD_VAR 0 5
29500: ST_TO_ADDR
// end ;
29501: LD_VAR 0 4
29505: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29506: LD_INT 0
29508: PPUSH
29509: PPUSH
// if not side or not nation then
29510: LD_VAR 0 1
29514: NOT
29515: IFTRUE 29524
29517: PUSH
29518: LD_VAR 0 2
29522: NOT
29523: OR
29524: IFFALSE 29528
// exit ;
29526: GO 30322
// case nation of nation_american :
29528: LD_VAR 0 2
29532: PUSH
29533: LD_INT 1
29535: DOUBLE
29536: EQUAL
29537: IFTRUE 29541
29539: GO 29763
29541: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
29542: LD_ADDR_VAR 0 4
29546: PUSH
29547: LD_INT 35
29549: PUSH
29550: LD_INT 45
29552: PUSH
29553: LD_INT 46
29555: PUSH
29556: LD_INT 47
29558: PUSH
29559: LD_INT 82
29561: PUSH
29562: LD_INT 83
29564: PUSH
29565: LD_INT 84
29567: PUSH
29568: LD_INT 85
29570: PUSH
29571: LD_INT 86
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: LD_INT 6
29582: PUSH
29583: LD_INT 15
29585: PUSH
29586: LD_INT 16
29588: PUSH
29589: LD_INT 7
29591: PUSH
29592: LD_INT 12
29594: PUSH
29595: LD_INT 13
29597: PUSH
29598: LD_INT 10
29600: PUSH
29601: LD_INT 14
29603: PUSH
29604: LD_INT 20
29606: PUSH
29607: LD_INT 21
29609: PUSH
29610: LD_INT 22
29612: PUSH
29613: LD_INT 25
29615: PUSH
29616: LD_INT 32
29618: PUSH
29619: LD_INT 27
29621: PUSH
29622: LD_INT 36
29624: PUSH
29625: LD_INT 69
29627: PUSH
29628: LD_INT 39
29630: PUSH
29631: LD_INT 34
29633: PUSH
29634: LD_INT 40
29636: PUSH
29637: LD_INT 48
29639: PUSH
29640: LD_INT 49
29642: PUSH
29643: LD_INT 50
29645: PUSH
29646: LD_INT 51
29648: PUSH
29649: LD_INT 52
29651: PUSH
29652: LD_INT 53
29654: PUSH
29655: LD_INT 54
29657: PUSH
29658: LD_INT 55
29660: PUSH
29661: LD_INT 56
29663: PUSH
29664: LD_INT 57
29666: PUSH
29667: LD_INT 58
29669: PUSH
29670: LD_INT 59
29672: PUSH
29673: LD_INT 60
29675: PUSH
29676: LD_INT 61
29678: PUSH
29679: LD_INT 62
29681: PUSH
29682: LD_INT 80
29684: PUSH
29685: LD_INT 82
29687: PUSH
29688: LD_INT 83
29690: PUSH
29691: LD_INT 84
29693: PUSH
29694: LD_INT 85
29696: PUSH
29697: LD_INT 86
29699: PUSH
29700: LD_INT 90
29702: PUSH
29703: LD_INT 93
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: ST_TO_ADDR
29761: GO 30244
29763: LD_INT 2
29765: DOUBLE
29766: EQUAL
29767: IFTRUE 29771
29769: GO 30005
29771: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
29772: LD_ADDR_VAR 0 4
29776: PUSH
29777: LD_INT 35
29779: PUSH
29780: LD_INT 45
29782: PUSH
29783: LD_INT 46
29785: PUSH
29786: LD_INT 47
29788: PUSH
29789: LD_INT 82
29791: PUSH
29792: LD_INT 83
29794: PUSH
29795: LD_INT 84
29797: PUSH
29798: LD_INT 85
29800: PUSH
29801: LD_INT 87
29803: PUSH
29804: LD_INT 70
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: LD_INT 11
29812: PUSH
29813: LD_INT 3
29815: PUSH
29816: LD_INT 4
29818: PUSH
29819: LD_INT 5
29821: PUSH
29822: LD_INT 6
29824: PUSH
29825: LD_INT 15
29827: PUSH
29828: LD_INT 18
29830: PUSH
29831: LD_INT 7
29833: PUSH
29834: LD_INT 17
29836: PUSH
29837: LD_INT 8
29839: PUSH
29840: LD_INT 20
29842: PUSH
29843: LD_INT 21
29845: PUSH
29846: LD_INT 22
29848: PUSH
29849: LD_INT 72
29851: PUSH
29852: LD_INT 26
29854: PUSH
29855: LD_INT 69
29857: PUSH
29858: LD_INT 39
29860: PUSH
29861: LD_INT 40
29863: PUSH
29864: LD_INT 41
29866: PUSH
29867: LD_INT 42
29869: PUSH
29870: LD_INT 43
29872: PUSH
29873: LD_INT 48
29875: PUSH
29876: LD_INT 49
29878: PUSH
29879: LD_INT 50
29881: PUSH
29882: LD_INT 51
29884: PUSH
29885: LD_INT 52
29887: PUSH
29888: LD_INT 53
29890: PUSH
29891: LD_INT 54
29893: PUSH
29894: LD_INT 55
29896: PUSH
29897: LD_INT 56
29899: PUSH
29900: LD_INT 60
29902: PUSH
29903: LD_INT 61
29905: PUSH
29906: LD_INT 62
29908: PUSH
29909: LD_INT 66
29911: PUSH
29912: LD_INT 67
29914: PUSH
29915: LD_INT 68
29917: PUSH
29918: LD_INT 81
29920: PUSH
29921: LD_INT 82
29923: PUSH
29924: LD_INT 83
29926: PUSH
29927: LD_INT 84
29929: PUSH
29930: LD_INT 85
29932: PUSH
29933: LD_INT 87
29935: PUSH
29936: LD_INT 88
29938: PUSH
29939: LD_INT 92
29941: PUSH
29942: LD_INT 94
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
30003: GO 30244
30005: LD_INT 3
30007: DOUBLE
30008: EQUAL
30009: IFTRUE 30013
30011: GO 30243
30013: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30014: LD_ADDR_VAR 0 4
30018: PUSH
30019: LD_INT 46
30021: PUSH
30022: LD_INT 47
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 82
30033: PUSH
30034: LD_INT 83
30036: PUSH
30037: LD_INT 84
30039: PUSH
30040: LD_INT 85
30042: PUSH
30043: LD_INT 86
30045: PUSH
30046: LD_INT 11
30048: PUSH
30049: LD_INT 9
30051: PUSH
30052: LD_INT 20
30054: PUSH
30055: LD_INT 19
30057: PUSH
30058: LD_INT 21
30060: PUSH
30061: LD_INT 24
30063: PUSH
30064: LD_INT 22
30066: PUSH
30067: LD_INT 25
30069: PUSH
30070: LD_INT 28
30072: PUSH
30073: LD_INT 29
30075: PUSH
30076: LD_INT 30
30078: PUSH
30079: LD_INT 31
30081: PUSH
30082: LD_INT 37
30084: PUSH
30085: LD_INT 38
30087: PUSH
30088: LD_INT 32
30090: PUSH
30091: LD_INT 27
30093: PUSH
30094: LD_INT 33
30096: PUSH
30097: LD_INT 69
30099: PUSH
30100: LD_INT 39
30102: PUSH
30103: LD_INT 34
30105: PUSH
30106: LD_INT 40
30108: PUSH
30109: LD_INT 71
30111: PUSH
30112: LD_INT 23
30114: PUSH
30115: LD_INT 44
30117: PUSH
30118: LD_INT 48
30120: PUSH
30121: LD_INT 49
30123: PUSH
30124: LD_INT 50
30126: PUSH
30127: LD_INT 51
30129: PUSH
30130: LD_INT 52
30132: PUSH
30133: LD_INT 53
30135: PUSH
30136: LD_INT 54
30138: PUSH
30139: LD_INT 55
30141: PUSH
30142: LD_INT 56
30144: PUSH
30145: LD_INT 57
30147: PUSH
30148: LD_INT 58
30150: PUSH
30151: LD_INT 59
30153: PUSH
30154: LD_INT 63
30156: PUSH
30157: LD_INT 64
30159: PUSH
30160: LD_INT 65
30162: PUSH
30163: LD_INT 82
30165: PUSH
30166: LD_INT 83
30168: PUSH
30169: LD_INT 84
30171: PUSH
30172: LD_INT 85
30174: PUSH
30175: LD_INT 86
30177: PUSH
30178: LD_INT 89
30180: PUSH
30181: LD_INT 91
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: ST_TO_ADDR
30241: GO 30244
30243: POP
// if state > - 1 and state < 3 then
30244: LD_VAR 0 3
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: GREATER
30253: IFFALSE 30265
30255: PUSH
30256: LD_VAR 0 3
30260: PUSH
30261: LD_INT 3
30263: LESS
30264: AND
30265: IFFALSE 30322
// for i in result do
30267: LD_ADDR_VAR 0 5
30271: PUSH
30272: LD_VAR 0 4
30276: PUSH
30277: FOR_IN
30278: IFFALSE 30320
// if GetTech ( i , side ) <> state then
30280: LD_VAR 0 5
30284: PPUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 321
30294: PUSH
30295: LD_VAR 0 3
30299: NONEQUAL
30300: IFFALSE 30318
// result := result diff i ;
30302: LD_ADDR_VAR 0 4
30306: PUSH
30307: LD_VAR 0 4
30311: PUSH
30312: LD_VAR 0 5
30316: DIFF
30317: ST_TO_ADDR
30318: GO 30277
30320: POP
30321: POP
// end ;
30322: LD_VAR 0 4
30326: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30327: LD_INT 0
30329: PPUSH
30330: PPUSH
30331: PPUSH
// result := true ;
30332: LD_ADDR_VAR 0 3
30336: PUSH
30337: LD_INT 1
30339: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30340: LD_ADDR_VAR 0 5
30344: PUSH
30345: LD_VAR 0 2
30349: PPUSH
30350: CALL_OW 480
30354: ST_TO_ADDR
// if not tmp then
30355: LD_VAR 0 5
30359: NOT
30360: IFFALSE 30364
// exit ;
30362: GO 30413
// for i in tmp do
30364: LD_ADDR_VAR 0 4
30368: PUSH
30369: LD_VAR 0 5
30373: PUSH
30374: FOR_IN
30375: IFFALSE 30411
// if GetTech ( i , side ) <> state_researched then
30377: LD_VAR 0 4
30381: PPUSH
30382: LD_VAR 0 1
30386: PPUSH
30387: CALL_OW 321
30391: PUSH
30392: LD_INT 2
30394: NONEQUAL
30395: IFFALSE 30409
// begin result := false ;
30397: LD_ADDR_VAR 0 3
30401: PUSH
30402: LD_INT 0
30404: ST_TO_ADDR
// exit ;
30405: POP
30406: POP
30407: GO 30413
// end ;
30409: GO 30374
30411: POP
30412: POP
// end ;
30413: LD_VAR 0 3
30417: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30418: LD_INT 0
30420: PPUSH
30421: PPUSH
30422: PPUSH
30423: PPUSH
30424: PPUSH
30425: PPUSH
30426: PPUSH
30427: PPUSH
30428: PPUSH
30429: PPUSH
30430: PPUSH
30431: PPUSH
30432: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30433: LD_VAR 0 1
30437: NOT
30438: IFTRUE 30455
30440: PUSH
30441: LD_VAR 0 1
30445: PPUSH
30446: CALL_OW 257
30450: PUSH
30451: LD_INT 9
30453: NONEQUAL
30454: OR
30455: IFFALSE 30459
// exit ;
30457: GO 31038
// side := GetSide ( unit ) ;
30459: LD_ADDR_VAR 0 9
30463: PUSH
30464: LD_VAR 0 1
30468: PPUSH
30469: CALL_OW 255
30473: ST_TO_ADDR
// tech_space := tech_spacanom ;
30474: LD_ADDR_VAR 0 12
30478: PUSH
30479: LD_INT 29
30481: ST_TO_ADDR
// tech_time := tech_taurad ;
30482: LD_ADDR_VAR 0 13
30486: PUSH
30487: LD_INT 28
30489: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30490: LD_ADDR_VAR 0 11
30494: PUSH
30495: LD_VAR 0 1
30499: PPUSH
30500: CALL_OW 310
30504: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30505: LD_VAR 0 11
30509: PPUSH
30510: CALL_OW 247
30514: PUSH
30515: LD_INT 2
30517: EQUAL
30518: IFFALSE 30522
// exit ;
30520: GO 31038
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30522: LD_ADDR_VAR 0 8
30526: PUSH
30527: LD_INT 81
30529: PUSH
30530: LD_VAR 0 9
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: LD_INT 21
30544: PUSH
30545: LD_INT 3
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PPUSH
30560: CALL_OW 69
30564: ST_TO_ADDR
// if not tmp then
30565: LD_VAR 0 8
30569: NOT
30570: IFFALSE 30574
// exit ;
30572: GO 31038
// if in_unit then
30574: LD_VAR 0 11
30578: IFFALSE 30602
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30580: LD_ADDR_VAR 0 10
30584: PUSH
30585: LD_VAR 0 8
30589: PPUSH
30590: LD_VAR 0 11
30594: PPUSH
30595: CALL_OW 74
30599: ST_TO_ADDR
30600: GO 30622
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30602: LD_ADDR_VAR 0 10
30606: PUSH
30607: LD_VAR 0 8
30611: PPUSH
30612: LD_VAR 0 1
30616: PPUSH
30617: CALL_OW 74
30621: ST_TO_ADDR
// if not enemy then
30622: LD_VAR 0 10
30626: NOT
30627: IFFALSE 30631
// exit ;
30629: GO 31038
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30631: LD_VAR 0 11
30635: IFFALSE 30657
30637: PUSH
30638: LD_VAR 0 11
30642: PPUSH
30643: LD_VAR 0 10
30647: PPUSH
30648: CALL_OW 296
30652: PUSH
30653: LD_INT 13
30655: GREATER
30656: AND
30657: IFTRUE 30679
30659: PUSH
30660: LD_VAR 0 1
30664: PPUSH
30665: LD_VAR 0 10
30669: PPUSH
30670: CALL_OW 296
30674: PUSH
30675: LD_INT 12
30677: GREATER
30678: OR
30679: IFFALSE 30683
// exit ;
30681: GO 31038
// missile := [ 1 ] ;
30683: LD_ADDR_VAR 0 14
30687: PUSH
30688: LD_INT 1
30690: PUSH
30691: EMPTY
30692: LIST
30693: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30694: LD_VAR 0 9
30698: PPUSH
30699: LD_VAR 0 12
30703: PPUSH
30704: CALL_OW 325
30708: IFFALSE 30737
// missile := Replace ( missile , missile + 1 , 2 ) ;
30710: LD_ADDR_VAR 0 14
30714: PUSH
30715: LD_VAR 0 14
30719: PPUSH
30720: LD_VAR 0 14
30724: PUSH
30725: LD_INT 1
30727: PLUS
30728: PPUSH
30729: LD_INT 2
30731: PPUSH
30732: CALL_OW 1
30736: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30737: LD_VAR 0 9
30741: PPUSH
30742: LD_VAR 0 13
30746: PPUSH
30747: CALL_OW 325
30751: IFFALSE 30775
30753: PUSH
30754: LD_VAR 0 10
30758: PPUSH
30759: CALL_OW 255
30763: PPUSH
30764: LD_VAR 0 13
30768: PPUSH
30769: CALL_OW 325
30773: NOT
30774: AND
30775: IFFALSE 30804
// missile := Replace ( missile , missile + 1 , 3 ) ;
30777: LD_ADDR_VAR 0 14
30781: PUSH
30782: LD_VAR 0 14
30786: PPUSH
30787: LD_VAR 0 14
30791: PUSH
30792: LD_INT 1
30794: PLUS
30795: PPUSH
30796: LD_INT 3
30798: PPUSH
30799: CALL_OW 1
30803: ST_TO_ADDR
// if missile < 2 then
30804: LD_VAR 0 14
30808: PUSH
30809: LD_INT 2
30811: LESS
30812: IFFALSE 30816
// exit ;
30814: GO 31038
// x := GetX ( enemy ) ;
30816: LD_ADDR_VAR 0 4
30820: PUSH
30821: LD_VAR 0 10
30825: PPUSH
30826: CALL_OW 250
30830: ST_TO_ADDR
// y := GetY ( enemy ) ;
30831: LD_ADDR_VAR 0 5
30835: PUSH
30836: LD_VAR 0 10
30840: PPUSH
30841: CALL_OW 251
30845: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30846: LD_ADDR_VAR 0 6
30850: PUSH
30851: LD_VAR 0 4
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PPUSH
30860: LD_INT 1
30862: PPUSH
30863: CALL_OW 12
30867: PLUS
30868: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30869: LD_ADDR_VAR 0 7
30873: PUSH
30874: LD_VAR 0 5
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PPUSH
30883: LD_INT 1
30885: PPUSH
30886: CALL_OW 12
30890: PLUS
30891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30892: LD_VAR 0 6
30896: PPUSH
30897: LD_VAR 0 7
30901: PPUSH
30902: CALL_OW 488
30906: NOT
30907: IFFALSE 30929
// begin _x := x ;
30909: LD_ADDR_VAR 0 6
30913: PUSH
30914: LD_VAR 0 4
30918: ST_TO_ADDR
// _y := y ;
30919: LD_ADDR_VAR 0 7
30923: PUSH
30924: LD_VAR 0 5
30928: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30929: LD_ADDR_VAR 0 3
30933: PUSH
30934: LD_INT 1
30936: PPUSH
30937: LD_VAR 0 14
30941: PPUSH
30942: CALL_OW 12
30946: ST_TO_ADDR
// case i of 1 :
30947: LD_VAR 0 3
30951: PUSH
30952: LD_INT 1
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30977
30960: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30961: LD_VAR 0 1
30965: PPUSH
30966: LD_VAR 0 10
30970: PPUSH
30971: CALL_OW 115
30975: GO 31038
30977: LD_INT 2
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 31007
30985: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30986: LD_VAR 0 1
30990: PPUSH
30991: LD_VAR 0 6
30995: PPUSH
30996: LD_VAR 0 7
31000: PPUSH
31001: CALL_OW 153
31005: GO 31038
31007: LD_INT 3
31009: DOUBLE
31010: EQUAL
31011: IFTRUE 31015
31013: GO 31037
31015: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31016: LD_VAR 0 1
31020: PPUSH
31021: LD_VAR 0 6
31025: PPUSH
31026: LD_VAR 0 7
31030: PPUSH
31031: CALL_OW 154
31035: GO 31038
31037: POP
// end ;
31038: LD_VAR 0 2
31042: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31043: LD_INT 0
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
// if not unit or not building then
31051: LD_VAR 0 1
31055: NOT
31056: IFTRUE 31065
31058: PUSH
31059: LD_VAR 0 2
31063: NOT
31064: OR
31065: IFFALSE 31069
// exit ;
31067: GO 31227
// x := GetX ( building ) ;
31069: LD_ADDR_VAR 0 5
31073: PUSH
31074: LD_VAR 0 2
31078: PPUSH
31079: CALL_OW 250
31083: ST_TO_ADDR
// y := GetY ( building ) ;
31084: LD_ADDR_VAR 0 6
31088: PUSH
31089: LD_VAR 0 2
31093: PPUSH
31094: CALL_OW 251
31098: ST_TO_ADDR
// for i := 0 to 5 do
31099: LD_ADDR_VAR 0 4
31103: PUSH
31104: DOUBLE
31105: LD_INT 0
31107: DEC
31108: ST_TO_ADDR
31109: LD_INT 5
31111: PUSH
31112: FOR_TO
31113: IFFALSE 31225
// begin _x := ShiftX ( x , i , 3 ) ;
31115: LD_ADDR_VAR 0 7
31119: PUSH
31120: LD_VAR 0 5
31124: PPUSH
31125: LD_VAR 0 4
31129: PPUSH
31130: LD_INT 3
31132: PPUSH
31133: CALL_OW 272
31137: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31138: LD_ADDR_VAR 0 8
31142: PUSH
31143: LD_VAR 0 6
31147: PPUSH
31148: LD_VAR 0 4
31152: PPUSH
31153: LD_INT 3
31155: PPUSH
31156: CALL_OW 273
31160: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31161: LD_VAR 0 7
31165: PPUSH
31166: LD_VAR 0 8
31170: PPUSH
31171: CALL_OW 488
31175: NOT
31176: IFFALSE 31180
// continue ;
31178: GO 31112
// if HexInfo ( _x , _y ) = 0 then
31180: LD_VAR 0 7
31184: PPUSH
31185: LD_VAR 0 8
31189: PPUSH
31190: CALL_OW 428
31194: PUSH
31195: LD_INT 0
31197: EQUAL
31198: IFFALSE 31223
// begin ComMoveXY ( unit , _x , _y ) ;
31200: LD_VAR 0 1
31204: PPUSH
31205: LD_VAR 0 7
31209: PPUSH
31210: LD_VAR 0 8
31214: PPUSH
31215: CALL_OW 111
// exit ;
31219: POP
31220: POP
31221: GO 31227
// end ; end ;
31223: GO 31112
31225: POP
31226: POP
// end ;
31227: LD_VAR 0 3
31231: RET
// export function ScanBase ( side , base_area ) ; begin
31232: LD_INT 0
31234: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31235: LD_ADDR_VAR 0 3
31239: PUSH
31240: LD_VAR 0 2
31244: PPUSH
31245: LD_INT 81
31247: PUSH
31248: LD_VAR 0 1
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PPUSH
31257: CALL_OW 70
31261: ST_TO_ADDR
// end ;
31262: LD_VAR 0 3
31266: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31267: LD_INT 0
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
// result := false ;
31273: LD_ADDR_VAR 0 2
31277: PUSH
31278: LD_INT 0
31280: ST_TO_ADDR
// side := GetSide ( unit ) ;
31281: LD_ADDR_VAR 0 3
31285: PUSH
31286: LD_VAR 0 1
31290: PPUSH
31291: CALL_OW 255
31295: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31296: LD_ADDR_VAR 0 4
31300: PUSH
31301: LD_VAR 0 1
31305: PPUSH
31306: CALL_OW 248
31310: ST_TO_ADDR
// case nat of 1 :
31311: LD_VAR 0 4
31315: PUSH
31316: LD_INT 1
31318: DOUBLE
31319: EQUAL
31320: IFTRUE 31324
31322: GO 31335
31324: POP
// tech := tech_lassight ; 2 :
31325: LD_ADDR_VAR 0 5
31329: PUSH
31330: LD_INT 12
31332: ST_TO_ADDR
31333: GO 31374
31335: LD_INT 2
31337: DOUBLE
31338: EQUAL
31339: IFTRUE 31343
31341: GO 31354
31343: POP
// tech := tech_mortar ; 3 :
31344: LD_ADDR_VAR 0 5
31348: PUSH
31349: LD_INT 41
31351: ST_TO_ADDR
31352: GO 31374
31354: LD_INT 3
31356: DOUBLE
31357: EQUAL
31358: IFTRUE 31362
31360: GO 31373
31362: POP
// tech := tech_bazooka ; end ;
31363: LD_ADDR_VAR 0 5
31367: PUSH
31368: LD_INT 44
31370: ST_TO_ADDR
31371: GO 31374
31373: POP
// if Researched ( side , tech ) then
31374: LD_VAR 0 3
31378: PPUSH
31379: LD_VAR 0 5
31383: PPUSH
31384: CALL_OW 325
31388: IFFALSE 31415
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31390: LD_ADDR_VAR 0 2
31394: PUSH
31395: LD_INT 5
31397: PUSH
31398: LD_INT 8
31400: PUSH
31401: LD_INT 9
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: LIST
31408: PUSH
31409: LD_VAR 0 4
31413: ARRAY
31414: ST_TO_ADDR
// end ;
31415: LD_VAR 0 2
31419: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31420: LD_INT 0
31422: PPUSH
31423: PPUSH
31424: PPUSH
// if not mines then
31425: LD_VAR 0 2
31429: NOT
31430: IFFALSE 31434
// exit ;
31432: GO 31578
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31434: LD_ADDR_VAR 0 5
31438: PUSH
31439: LD_INT 81
31441: PUSH
31442: LD_VAR 0 1
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 3
31453: PUSH
31454: LD_INT 21
31456: PUSH
31457: LD_INT 3
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PPUSH
31472: CALL_OW 69
31476: ST_TO_ADDR
// for i in mines do
31477: LD_ADDR_VAR 0 4
31481: PUSH
31482: LD_VAR 0 2
31486: PUSH
31487: FOR_IN
31488: IFFALSE 31576
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31490: LD_VAR 0 4
31494: PUSH
31495: LD_INT 1
31497: ARRAY
31498: PPUSH
31499: LD_VAR 0 4
31503: PUSH
31504: LD_INT 2
31506: ARRAY
31507: PPUSH
31508: CALL_OW 458
31512: NOT
31513: IFFALSE 31517
// continue ;
31515: GO 31487
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31517: LD_VAR 0 4
31521: PUSH
31522: LD_INT 1
31524: ARRAY
31525: PPUSH
31526: LD_VAR 0 4
31530: PUSH
31531: LD_INT 2
31533: ARRAY
31534: PPUSH
31535: CALL_OW 428
31539: PUSH
31540: LD_VAR 0 5
31544: IN
31545: IFFALSE 31574
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31547: LD_VAR 0 4
31551: PUSH
31552: LD_INT 1
31554: ARRAY
31555: PPUSH
31556: LD_VAR 0 4
31560: PUSH
31561: LD_INT 2
31563: ARRAY
31564: PPUSH
31565: LD_VAR 0 1
31569: PPUSH
31570: CALL_OW 456
// end ;
31574: GO 31487
31576: POP
31577: POP
// end ;
31578: LD_VAR 0 3
31582: RET
// export function Count ( array ) ; begin
31583: LD_INT 0
31585: PPUSH
// result := array + 0 ;
31586: LD_ADDR_VAR 0 2
31590: PUSH
31591: LD_VAR 0 1
31595: PUSH
31596: LD_INT 0
31598: PLUS
31599: ST_TO_ADDR
// end ;
31600: LD_VAR 0 2
31604: RET
// export function IsEmpty ( building ) ; begin
31605: LD_INT 0
31607: PPUSH
// if not building then
31608: LD_VAR 0 1
31612: NOT
31613: IFFALSE 31617
// exit ;
31615: GO 31660
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31617: LD_ADDR_VAR 0 2
31621: PUSH
31622: LD_VAR 0 1
31626: PUSH
31627: LD_INT 22
31629: PUSH
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 255
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 58
31646: PUSH
31647: EMPTY
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PPUSH
31654: CALL_OW 69
31658: IN
31659: ST_TO_ADDR
// end ;
31660: LD_VAR 0 2
31664: RET
// export function IsNotFull ( building ) ; var places ; begin
31665: LD_INT 0
31667: PPUSH
31668: PPUSH
// if not building then
31669: LD_VAR 0 1
31673: NOT
31674: IFFALSE 31678
// exit ;
31676: GO 31706
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31678: LD_ADDR_VAR 0 2
31682: PUSH
31683: LD_VAR 0 1
31687: PPUSH
31688: LD_INT 3
31690: PUSH
31691: LD_INT 62
31693: PUSH
31694: EMPTY
31695: LIST
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PPUSH
31701: CALL_OW 72
31705: ST_TO_ADDR
// end ;
31706: LD_VAR 0 2
31710: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31711: LD_INT 0
31713: PPUSH
31714: PPUSH
31715: PPUSH
31716: PPUSH
// tmp := [ ] ;
31717: LD_ADDR_VAR 0 3
31721: PUSH
31722: EMPTY
31723: ST_TO_ADDR
// list := [ ] ;
31724: LD_ADDR_VAR 0 5
31728: PUSH
31729: EMPTY
31730: ST_TO_ADDR
// for i = 16 to 25 do
31731: LD_ADDR_VAR 0 4
31735: PUSH
31736: DOUBLE
31737: LD_INT 16
31739: DEC
31740: ST_TO_ADDR
31741: LD_INT 25
31743: PUSH
31744: FOR_TO
31745: IFFALSE 31818
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31747: LD_ADDR_VAR 0 3
31751: PUSH
31752: LD_VAR 0 3
31756: PUSH
31757: LD_INT 22
31759: PUSH
31760: LD_VAR 0 1
31764: PPUSH
31765: CALL_OW 255
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 91
31776: PUSH
31777: LD_VAR 0 1
31781: PUSH
31782: LD_INT 6
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 30
31792: PUSH
31793: LD_VAR 0 4
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: LIST
31806: PUSH
31807: EMPTY
31808: LIST
31809: PPUSH
31810: CALL_OW 69
31814: ADD
31815: ST_TO_ADDR
31816: GO 31744
31818: POP
31819: POP
// for i = 1 to tmp do
31820: LD_ADDR_VAR 0 4
31824: PUSH
31825: DOUBLE
31826: LD_INT 1
31828: DEC
31829: ST_TO_ADDR
31830: LD_VAR 0 3
31834: PUSH
31835: FOR_TO
31836: IFFALSE 31924
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31838: LD_ADDR_VAR 0 5
31842: PUSH
31843: LD_VAR 0 5
31847: PUSH
31848: LD_VAR 0 3
31852: PUSH
31853: LD_VAR 0 4
31857: ARRAY
31858: PPUSH
31859: CALL_OW 266
31863: PUSH
31864: LD_VAR 0 3
31868: PUSH
31869: LD_VAR 0 4
31873: ARRAY
31874: PPUSH
31875: CALL_OW 250
31879: PUSH
31880: LD_VAR 0 3
31884: PUSH
31885: LD_VAR 0 4
31889: ARRAY
31890: PPUSH
31891: CALL_OW 251
31895: PUSH
31896: LD_VAR 0 3
31900: PUSH
31901: LD_VAR 0 4
31905: ARRAY
31906: PPUSH
31907: CALL_OW 254
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: PUSH
31918: EMPTY
31919: LIST
31920: ADD
31921: ST_TO_ADDR
31922: GO 31835
31924: POP
31925: POP
// result := list ;
31926: LD_ADDR_VAR 0 2
31930: PUSH
31931: LD_VAR 0 5
31935: ST_TO_ADDR
// end ;
31936: LD_VAR 0 2
31940: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31941: LD_INT 0
31943: PPUSH
31944: PPUSH
31945: PPUSH
31946: PPUSH
31947: PPUSH
31948: PPUSH
31949: PPUSH
// if not factory then
31950: LD_VAR 0 1
31954: NOT
31955: IFFALSE 31959
// exit ;
31957: GO 32562
// if control = control_apeman then
31959: LD_VAR 0 4
31963: PUSH
31964: LD_INT 5
31966: EQUAL
31967: IFFALSE 32076
// begin tmp := UnitsInside ( factory ) ;
31969: LD_ADDR_VAR 0 8
31973: PUSH
31974: LD_VAR 0 1
31978: PPUSH
31979: CALL_OW 313
31983: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31984: LD_VAR 0 8
31988: PPUSH
31989: LD_INT 25
31991: PUSH
31992: LD_INT 12
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PPUSH
31999: CALL_OW 72
32003: NOT
32004: IFFALSE 32014
// control := control_manual ;
32006: LD_ADDR_VAR 0 4
32010: PUSH
32011: LD_INT 1
32013: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32014: LD_ADDR_VAR 0 8
32018: PUSH
32019: LD_VAR 0 1
32023: PPUSH
32024: CALL 31711 0 1
32028: ST_TO_ADDR
// if tmp then
32029: LD_VAR 0 8
32033: IFFALSE 32076
// begin for i in tmp do
32035: LD_ADDR_VAR 0 7
32039: PUSH
32040: LD_VAR 0 8
32044: PUSH
32045: FOR_IN
32046: IFFALSE 32074
// if i [ 1 ] = b_ext_radio then
32048: LD_VAR 0 7
32052: PUSH
32053: LD_INT 1
32055: ARRAY
32056: PUSH
32057: LD_INT 22
32059: EQUAL
32060: IFFALSE 32072
// begin control := control_remote ;
32062: LD_ADDR_VAR 0 4
32066: PUSH
32067: LD_INT 2
32069: ST_TO_ADDR
// break ;
32070: GO 32074
// end ;
32072: GO 32045
32074: POP
32075: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32076: LD_VAR 0 1
32080: PPUSH
32081: LD_VAR 0 2
32085: PPUSH
32086: LD_VAR 0 3
32090: PPUSH
32091: LD_VAR 0 4
32095: PPUSH
32096: LD_VAR 0 5
32100: PPUSH
32101: CALL_OW 448
32105: IFFALSE 32140
// begin result := [ chassis , engine , control , weapon ] ;
32107: LD_ADDR_VAR 0 6
32111: PUSH
32112: LD_VAR 0 2
32116: PUSH
32117: LD_VAR 0 3
32121: PUSH
32122: LD_VAR 0 4
32126: PUSH
32127: LD_VAR 0 5
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: ST_TO_ADDR
// exit ;
32138: GO 32562
// end ; _chassis := AvailableChassisList ( factory ) ;
32140: LD_ADDR_VAR 0 9
32144: PUSH
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL_OW 475
32154: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32155: LD_ADDR_VAR 0 11
32159: PUSH
32160: LD_VAR 0 1
32164: PPUSH
32165: CALL_OW 476
32169: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32170: LD_ADDR_VAR 0 12
32174: PUSH
32175: LD_VAR 0 1
32179: PPUSH
32180: CALL_OW 477
32184: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32185: LD_ADDR_VAR 0 10
32189: PUSH
32190: LD_VAR 0 1
32194: PPUSH
32195: CALL_OW 478
32199: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32200: LD_VAR 0 9
32204: NOT
32205: IFTRUE 32214
32207: PUSH
32208: LD_VAR 0 11
32212: NOT
32213: OR
32214: IFTRUE 32223
32216: PUSH
32217: LD_VAR 0 12
32221: NOT
32222: OR
32223: IFTRUE 32232
32225: PUSH
32226: LD_VAR 0 10
32230: NOT
32231: OR
32232: IFFALSE 32267
// begin result := [ chassis , engine , control , weapon ] ;
32234: LD_ADDR_VAR 0 6
32238: PUSH
32239: LD_VAR 0 2
32243: PUSH
32244: LD_VAR 0 3
32248: PUSH
32249: LD_VAR 0 4
32253: PUSH
32254: LD_VAR 0 5
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: ST_TO_ADDR
// exit ;
32265: GO 32562
// end ; if not chassis in _chassis then
32267: LD_VAR 0 2
32271: PUSH
32272: LD_VAR 0 9
32276: IN
32277: NOT
32278: IFFALSE 32304
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32280: LD_ADDR_VAR 0 2
32284: PUSH
32285: LD_VAR 0 9
32289: PUSH
32290: LD_INT 1
32292: PPUSH
32293: LD_VAR 0 9
32297: PPUSH
32298: CALL_OW 12
32302: ARRAY
32303: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32304: LD_VAR 0 2
32308: PPUSH
32309: LD_VAR 0 3
32313: PPUSH
32314: CALL 32567 0 2
32318: NOT
32319: IFFALSE 32380
// repeat engine := _engine [ 1 ] ;
32321: LD_ADDR_VAR 0 3
32325: PUSH
32326: LD_VAR 0 11
32330: PUSH
32331: LD_INT 1
32333: ARRAY
32334: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32335: LD_ADDR_VAR 0 11
32339: PUSH
32340: LD_VAR 0 11
32344: PPUSH
32345: LD_INT 1
32347: PPUSH
32348: CALL_OW 3
32352: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32353: LD_VAR 0 2
32357: PPUSH
32358: LD_VAR 0 3
32362: PPUSH
32363: CALL 32567 0 2
32367: IFTRUE 32378
32369: PUSH
32370: LD_VAR 0 11
32374: PUSH
32375: EMPTY
32376: EQUAL
32377: OR
32378: IFFALSE 32321
// if not control in _control then
32380: LD_VAR 0 4
32384: PUSH
32385: LD_VAR 0 12
32389: IN
32390: NOT
32391: IFFALSE 32417
// control := _control [ rand ( 1 , _control ) ] ;
32393: LD_ADDR_VAR 0 4
32397: PUSH
32398: LD_VAR 0 12
32402: PUSH
32403: LD_INT 1
32405: PPUSH
32406: LD_VAR 0 12
32410: PPUSH
32411: CALL_OW 12
32415: ARRAY
32416: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32417: LD_VAR 0 2
32421: PPUSH
32422: LD_VAR 0 5
32426: PPUSH
32427: CALL 32789 0 2
32431: NOT
32432: IFFALSE 32493
// repeat weapon := _weapon [ 1 ] ;
32434: LD_ADDR_VAR 0 5
32438: PUSH
32439: LD_VAR 0 10
32443: PUSH
32444: LD_INT 1
32446: ARRAY
32447: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32448: LD_ADDR_VAR 0 10
32452: PUSH
32453: LD_VAR 0 10
32457: PPUSH
32458: LD_INT 1
32460: PPUSH
32461: CALL_OW 3
32465: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32466: LD_VAR 0 2
32470: PPUSH
32471: LD_VAR 0 5
32475: PPUSH
32476: CALL 32789 0 2
32480: IFTRUE 32491
32482: PUSH
32483: LD_VAR 0 10
32487: PUSH
32488: EMPTY
32489: EQUAL
32490: OR
32491: IFFALSE 32434
// result := [ ] ;
32493: LD_ADDR_VAR 0 6
32497: PUSH
32498: EMPTY
32499: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32500: LD_VAR 0 1
32504: PPUSH
32505: LD_VAR 0 2
32509: PPUSH
32510: LD_VAR 0 3
32514: PPUSH
32515: LD_VAR 0 4
32519: PPUSH
32520: LD_VAR 0 5
32524: PPUSH
32525: CALL_OW 448
32529: IFFALSE 32562
// result := [ chassis , engine , control , weapon ] ;
32531: LD_ADDR_VAR 0 6
32535: PUSH
32536: LD_VAR 0 2
32540: PUSH
32541: LD_VAR 0 3
32545: PUSH
32546: LD_VAR 0 4
32550: PUSH
32551: LD_VAR 0 5
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: ST_TO_ADDR
// end ;
32562: LD_VAR 0 6
32566: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32567: LD_INT 0
32569: PPUSH
// if not chassis or not engine then
32570: LD_VAR 0 1
32574: NOT
32575: IFTRUE 32584
32577: PUSH
32578: LD_VAR 0 2
32582: NOT
32583: OR
32584: IFFALSE 32588
// exit ;
32586: GO 32784
// case engine of engine_solar :
32588: LD_VAR 0 2
32592: PUSH
32593: LD_INT 2
32595: DOUBLE
32596: EQUAL
32597: IFTRUE 32601
32599: GO 32639
32601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32602: LD_ADDR_VAR 0 3
32606: PUSH
32607: LD_INT 11
32609: PUSH
32610: LD_INT 12
32612: PUSH
32613: LD_INT 13
32615: PUSH
32616: LD_INT 14
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: LD_INT 3
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: ST_TO_ADDR
32637: GO 32768
32639: LD_INT 1
32641: DOUBLE
32642: EQUAL
32643: IFTRUE 32647
32645: GO 32709
32647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32648: LD_ADDR_VAR 0 3
32652: PUSH
32653: LD_INT 11
32655: PUSH
32656: LD_INT 12
32658: PUSH
32659: LD_INT 13
32661: PUSH
32662: LD_INT 14
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: LD_INT 3
32673: PUSH
32674: LD_INT 4
32676: PUSH
32677: LD_INT 5
32679: PUSH
32680: LD_INT 21
32682: PUSH
32683: LD_INT 23
32685: PUSH
32686: LD_INT 22
32688: PUSH
32689: LD_INT 24
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: ST_TO_ADDR
32707: GO 32768
32709: LD_INT 3
32711: DOUBLE
32712: EQUAL
32713: IFTRUE 32717
32715: GO 32767
32717: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32718: LD_ADDR_VAR 0 3
32722: PUSH
32723: LD_INT 13
32725: PUSH
32726: LD_INT 14
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 3
32734: PUSH
32735: LD_INT 4
32737: PUSH
32738: LD_INT 5
32740: PUSH
32741: LD_INT 21
32743: PUSH
32744: LD_INT 22
32746: PUSH
32747: LD_INT 23
32749: PUSH
32750: LD_INT 24
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: ST_TO_ADDR
32765: GO 32768
32767: POP
// result := ( chassis in result ) ;
32768: LD_ADDR_VAR 0 3
32772: PUSH
32773: LD_VAR 0 1
32777: PUSH
32778: LD_VAR 0 3
32782: IN
32783: ST_TO_ADDR
// end ;
32784: LD_VAR 0 3
32788: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32789: LD_INT 0
32791: PPUSH
// if not chassis or not weapon then
32792: LD_VAR 0 1
32796: NOT
32797: IFTRUE 32806
32799: PUSH
32800: LD_VAR 0 2
32804: NOT
32805: OR
32806: IFFALSE 32810
// exit ;
32808: GO 33870
// case weapon of us_machine_gun :
32810: LD_VAR 0 2
32814: PUSH
32815: LD_INT 2
32817: DOUBLE
32818: EQUAL
32819: IFTRUE 32823
32821: GO 32853
32823: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32824: LD_ADDR_VAR 0 3
32828: PUSH
32829: LD_INT 1
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: LD_INT 4
32840: PUSH
32841: LD_INT 5
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: ST_TO_ADDR
32851: GO 33854
32853: LD_INT 3
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32861
32859: GO 32891
32861: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32862: LD_ADDR_VAR 0 3
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: LD_INT 3
32875: PUSH
32876: LD_INT 4
32878: PUSH
32879: LD_INT 5
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: ST_TO_ADDR
32889: GO 33854
32891: LD_INT 11
32893: DOUBLE
32894: EQUAL
32895: IFTRUE 32899
32897: GO 32929
32899: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32900: LD_ADDR_VAR 0 3
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: LD_INT 3
32913: PUSH
32914: LD_INT 4
32916: PUSH
32917: LD_INT 5
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: ST_TO_ADDR
32927: GO 33854
32929: LD_INT 4
32931: DOUBLE
32932: EQUAL
32933: IFTRUE 32937
32935: GO 32963
32937: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32938: LD_ADDR_VAR 0 3
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: LD_INT 3
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: LD_INT 5
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: ST_TO_ADDR
32961: GO 33854
32963: LD_INT 5
32965: DOUBLE
32966: EQUAL
32967: IFTRUE 32971
32969: GO 32997
32971: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32972: LD_ADDR_VAR 0 3
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 3
32982: PUSH
32983: LD_INT 4
32985: PUSH
32986: LD_INT 5
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: ST_TO_ADDR
32995: GO 33854
32997: LD_INT 9
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33031
33005: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33006: LD_ADDR_VAR 0 3
33010: PUSH
33011: LD_INT 2
33013: PUSH
33014: LD_INT 3
33016: PUSH
33017: LD_INT 4
33019: PUSH
33020: LD_INT 5
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: ST_TO_ADDR
33029: GO 33854
33031: LD_INT 7
33033: DOUBLE
33034: EQUAL
33035: IFTRUE 33039
33037: GO 33065
33039: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33040: LD_ADDR_VAR 0 3
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: LD_INT 3
33050: PUSH
33051: LD_INT 4
33053: PUSH
33054: LD_INT 5
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: ST_TO_ADDR
33063: GO 33854
33065: LD_INT 12
33067: DOUBLE
33068: EQUAL
33069: IFTRUE 33073
33071: GO 33099
33073: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33074: LD_ADDR_VAR 0 3
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 3
33084: PUSH
33085: LD_INT 4
33087: PUSH
33088: LD_INT 5
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: ST_TO_ADDR
33097: GO 33854
33099: LD_INT 13
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33107
33105: GO 33133
33107: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33108: LD_ADDR_VAR 0 3
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: LD_INT 4
33121: PUSH
33122: LD_INT 5
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: ST_TO_ADDR
33131: GO 33854
33133: LD_INT 14
33135: DOUBLE
33136: EQUAL
33137: IFTRUE 33141
33139: GO 33159
33141: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33142: LD_ADDR_VAR 0 3
33146: PUSH
33147: LD_INT 4
33149: PUSH
33150: LD_INT 5
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: ST_TO_ADDR
33157: GO 33854
33159: LD_INT 6
33161: DOUBLE
33162: EQUAL
33163: IFTRUE 33167
33165: GO 33185
33167: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33168: LD_ADDR_VAR 0 3
33172: PUSH
33173: LD_INT 4
33175: PUSH
33176: LD_INT 5
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: ST_TO_ADDR
33183: GO 33854
33185: LD_INT 10
33187: DOUBLE
33188: EQUAL
33189: IFTRUE 33193
33191: GO 33211
33193: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33194: LD_ADDR_VAR 0 3
33198: PUSH
33199: LD_INT 4
33201: PUSH
33202: LD_INT 5
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: ST_TO_ADDR
33209: GO 33854
33211: LD_INT 22
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33219
33217: GO 33245
33219: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33220: LD_ADDR_VAR 0 3
33224: PUSH
33225: LD_INT 11
33227: PUSH
33228: LD_INT 12
33230: PUSH
33231: LD_INT 13
33233: PUSH
33234: LD_INT 14
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: ST_TO_ADDR
33243: GO 33854
33245: LD_INT 23
33247: DOUBLE
33248: EQUAL
33249: IFTRUE 33253
33251: GO 33279
33253: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33254: LD_ADDR_VAR 0 3
33258: PUSH
33259: LD_INT 11
33261: PUSH
33262: LD_INT 12
33264: PUSH
33265: LD_INT 13
33267: PUSH
33268: LD_INT 14
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: ST_TO_ADDR
33277: GO 33854
33279: LD_INT 24
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33287
33285: GO 33313
33287: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33288: LD_ADDR_VAR 0 3
33292: PUSH
33293: LD_INT 11
33295: PUSH
33296: LD_INT 12
33298: PUSH
33299: LD_INT 13
33301: PUSH
33302: LD_INT 14
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: ST_TO_ADDR
33311: GO 33854
33313: LD_INT 30
33315: DOUBLE
33316: EQUAL
33317: IFTRUE 33321
33319: GO 33347
33321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33322: LD_ADDR_VAR 0 3
33326: PUSH
33327: LD_INT 11
33329: PUSH
33330: LD_INT 12
33332: PUSH
33333: LD_INT 13
33335: PUSH
33336: LD_INT 14
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: ST_TO_ADDR
33345: GO 33854
33347: LD_INT 25
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33373
33355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33356: LD_ADDR_VAR 0 3
33360: PUSH
33361: LD_INT 13
33363: PUSH
33364: LD_INT 14
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: ST_TO_ADDR
33371: GO 33854
33373: LD_INT 27
33375: DOUBLE
33376: EQUAL
33377: IFTRUE 33381
33379: GO 33399
33381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33382: LD_ADDR_VAR 0 3
33386: PUSH
33387: LD_INT 13
33389: PUSH
33390: LD_INT 14
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: ST_TO_ADDR
33397: GO 33854
33399: LD_INT 92
33401: DOUBLE
33402: EQUAL
33403: IFTRUE 33407
33405: GO 33433
33407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33408: LD_ADDR_VAR 0 3
33412: PUSH
33413: LD_INT 11
33415: PUSH
33416: LD_INT 12
33418: PUSH
33419: LD_INT 13
33421: PUSH
33422: LD_INT 14
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: ST_TO_ADDR
33431: GO 33854
33433: LD_INT 28
33435: DOUBLE
33436: EQUAL
33437: IFTRUE 33441
33439: GO 33459
33441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33442: LD_ADDR_VAR 0 3
33446: PUSH
33447: LD_INT 13
33449: PUSH
33450: LD_INT 14
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: ST_TO_ADDR
33457: GO 33854
33459: LD_INT 29
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33467
33465: GO 33485
33467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33468: LD_ADDR_VAR 0 3
33472: PUSH
33473: LD_INT 13
33475: PUSH
33476: LD_INT 14
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: ST_TO_ADDR
33483: GO 33854
33485: LD_INT 31
33487: DOUBLE
33488: EQUAL
33489: IFTRUE 33493
33491: GO 33511
33493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33494: LD_ADDR_VAR 0 3
33498: PUSH
33499: LD_INT 13
33501: PUSH
33502: LD_INT 14
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: ST_TO_ADDR
33509: GO 33854
33511: LD_INT 26
33513: DOUBLE
33514: EQUAL
33515: IFTRUE 33519
33517: GO 33537
33519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33520: LD_ADDR_VAR 0 3
33524: PUSH
33525: LD_INT 13
33527: PUSH
33528: LD_INT 14
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: ST_TO_ADDR
33535: GO 33854
33537: LD_INT 42
33539: DOUBLE
33540: EQUAL
33541: IFTRUE 33545
33543: GO 33571
33545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33546: LD_ADDR_VAR 0 3
33550: PUSH
33551: LD_INT 21
33553: PUSH
33554: LD_INT 22
33556: PUSH
33557: LD_INT 23
33559: PUSH
33560: LD_INT 24
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: ST_TO_ADDR
33569: GO 33854
33571: LD_INT 43
33573: DOUBLE
33574: EQUAL
33575: IFTRUE 33579
33577: GO 33605
33579: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33580: LD_ADDR_VAR 0 3
33584: PUSH
33585: LD_INT 21
33587: PUSH
33588: LD_INT 22
33590: PUSH
33591: LD_INT 23
33593: PUSH
33594: LD_INT 24
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: ST_TO_ADDR
33603: GO 33854
33605: LD_INT 44
33607: DOUBLE
33608: EQUAL
33609: IFTRUE 33613
33611: GO 33639
33613: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33614: LD_ADDR_VAR 0 3
33618: PUSH
33619: LD_INT 21
33621: PUSH
33622: LD_INT 22
33624: PUSH
33625: LD_INT 23
33627: PUSH
33628: LD_INT 24
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: ST_TO_ADDR
33637: GO 33854
33639: LD_INT 45
33641: DOUBLE
33642: EQUAL
33643: IFTRUE 33647
33645: GO 33673
33647: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33648: LD_ADDR_VAR 0 3
33652: PUSH
33653: LD_INT 21
33655: PUSH
33656: LD_INT 22
33658: PUSH
33659: LD_INT 23
33661: PUSH
33662: LD_INT 24
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: ST_TO_ADDR
33671: GO 33854
33673: LD_INT 49
33675: DOUBLE
33676: EQUAL
33677: IFTRUE 33681
33679: GO 33707
33681: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33682: LD_ADDR_VAR 0 3
33686: PUSH
33687: LD_INT 21
33689: PUSH
33690: LD_INT 22
33692: PUSH
33693: LD_INT 23
33695: PUSH
33696: LD_INT 24
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: ST_TO_ADDR
33705: GO 33854
33707: LD_INT 51
33709: DOUBLE
33710: EQUAL
33711: IFTRUE 33715
33713: GO 33741
33715: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33716: LD_ADDR_VAR 0 3
33720: PUSH
33721: LD_INT 21
33723: PUSH
33724: LD_INT 22
33726: PUSH
33727: LD_INT 23
33729: PUSH
33730: LD_INT 24
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
33739: GO 33854
33741: LD_INT 52
33743: DOUBLE
33744: EQUAL
33745: IFTRUE 33749
33747: GO 33775
33749: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33750: LD_ADDR_VAR 0 3
33754: PUSH
33755: LD_INT 21
33757: PUSH
33758: LD_INT 22
33760: PUSH
33761: LD_INT 23
33763: PUSH
33764: LD_INT 24
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: ST_TO_ADDR
33773: GO 33854
33775: LD_INT 53
33777: DOUBLE
33778: EQUAL
33779: IFTRUE 33783
33781: GO 33801
33783: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33784: LD_ADDR_VAR 0 3
33788: PUSH
33789: LD_INT 23
33791: PUSH
33792: LD_INT 24
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: ST_TO_ADDR
33799: GO 33854
33801: LD_INT 46
33803: DOUBLE
33804: EQUAL
33805: IFTRUE 33809
33807: GO 33827
33809: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33810: LD_ADDR_VAR 0 3
33814: PUSH
33815: LD_INT 23
33817: PUSH
33818: LD_INT 24
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: ST_TO_ADDR
33825: GO 33854
33827: LD_INT 47
33829: DOUBLE
33830: EQUAL
33831: IFTRUE 33835
33833: GO 33853
33835: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33836: LD_ADDR_VAR 0 3
33840: PUSH
33841: LD_INT 23
33843: PUSH
33844: LD_INT 24
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: ST_TO_ADDR
33851: GO 33854
33853: POP
// result := ( chassis in result ) ;
33854: LD_ADDR_VAR 0 3
33858: PUSH
33859: LD_VAR 0 1
33863: PUSH
33864: LD_VAR 0 3
33868: IN
33869: ST_TO_ADDR
// end ;
33870: LD_VAR 0 3
33874: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33875: LD_INT 0
33877: PPUSH
33878: PPUSH
33879: PPUSH
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
// result := array ;
33884: LD_ADDR_VAR 0 5
33888: PUSH
33889: LD_VAR 0 1
33893: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33894: LD_VAR 0 1
33898: NOT
33899: IFTRUE 33908
33901: PUSH
33902: LD_VAR 0 2
33906: NOT
33907: OR
33908: IFTRUE 33917
33910: PUSH
33911: LD_VAR 0 3
33915: NOT
33916: OR
33917: IFTRUE 33931
33919: PUSH
33920: LD_VAR 0 2
33924: PUSH
33925: LD_VAR 0 1
33929: GREATER
33930: OR
33931: IFTRUE 33945
33933: PUSH
33934: LD_VAR 0 3
33938: PUSH
33939: LD_VAR 0 1
33943: GREATER
33944: OR
33945: IFFALSE 33949
// exit ;
33947: GO 34245
// if direction then
33949: LD_VAR 0 4
33953: IFFALSE 34017
// begin d := 1 ;
33955: LD_ADDR_VAR 0 9
33959: PUSH
33960: LD_INT 1
33962: ST_TO_ADDR
// if i_from > i_to then
33963: LD_VAR 0 2
33967: PUSH
33968: LD_VAR 0 3
33972: GREATER
33973: IFFALSE 33999
// length := ( array - i_from ) + i_to else
33975: LD_ADDR_VAR 0 11
33979: PUSH
33980: LD_VAR 0 1
33984: PUSH
33985: LD_VAR 0 2
33989: MINUS
33990: PUSH
33991: LD_VAR 0 3
33995: PLUS
33996: ST_TO_ADDR
33997: GO 34015
// length := i_to - i_from ;
33999: LD_ADDR_VAR 0 11
34003: PUSH
34004: LD_VAR 0 3
34008: PUSH
34009: LD_VAR 0 2
34013: MINUS
34014: ST_TO_ADDR
// end else
34015: GO 34078
// begin d := - 1 ;
34017: LD_ADDR_VAR 0 9
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: ST_TO_ADDR
// if i_from > i_to then
34026: LD_VAR 0 2
34030: PUSH
34031: LD_VAR 0 3
34035: GREATER
34036: IFFALSE 34056
// length := i_from - i_to else
34038: LD_ADDR_VAR 0 11
34042: PUSH
34043: LD_VAR 0 2
34047: PUSH
34048: LD_VAR 0 3
34052: MINUS
34053: ST_TO_ADDR
34054: GO 34078
// length := ( array - i_to ) + i_from ;
34056: LD_ADDR_VAR 0 11
34060: PUSH
34061: LD_VAR 0 1
34065: PUSH
34066: LD_VAR 0 3
34070: MINUS
34071: PUSH
34072: LD_VAR 0 2
34076: PLUS
34077: ST_TO_ADDR
// end ; if not length then
34078: LD_VAR 0 11
34082: NOT
34083: IFFALSE 34087
// exit ;
34085: GO 34245
// tmp := array ;
34087: LD_ADDR_VAR 0 10
34091: PUSH
34092: LD_VAR 0 1
34096: ST_TO_ADDR
// for i = 1 to length do
34097: LD_ADDR_VAR 0 6
34101: PUSH
34102: DOUBLE
34103: LD_INT 1
34105: DEC
34106: ST_TO_ADDR
34107: LD_VAR 0 11
34111: PUSH
34112: FOR_TO
34113: IFFALSE 34233
// begin for j = 1 to array do
34115: LD_ADDR_VAR 0 7
34119: PUSH
34120: DOUBLE
34121: LD_INT 1
34123: DEC
34124: ST_TO_ADDR
34125: LD_VAR 0 1
34129: PUSH
34130: FOR_TO
34131: IFFALSE 34219
// begin k := j + d ;
34133: LD_ADDR_VAR 0 8
34137: PUSH
34138: LD_VAR 0 7
34142: PUSH
34143: LD_VAR 0 9
34147: PLUS
34148: ST_TO_ADDR
// if k > array then
34149: LD_VAR 0 8
34153: PUSH
34154: LD_VAR 0 1
34158: GREATER
34159: IFFALSE 34169
// k := 1 ;
34161: LD_ADDR_VAR 0 8
34165: PUSH
34166: LD_INT 1
34168: ST_TO_ADDR
// if not k then
34169: LD_VAR 0 8
34173: NOT
34174: IFFALSE 34186
// k := array ;
34176: LD_ADDR_VAR 0 8
34180: PUSH
34181: LD_VAR 0 1
34185: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34186: LD_ADDR_VAR 0 10
34190: PUSH
34191: LD_VAR 0 10
34195: PPUSH
34196: LD_VAR 0 8
34200: PPUSH
34201: LD_VAR 0 1
34205: PUSH
34206: LD_VAR 0 7
34210: ARRAY
34211: PPUSH
34212: CALL_OW 1
34216: ST_TO_ADDR
// end ;
34217: GO 34130
34219: POP
34220: POP
// array := tmp ;
34221: LD_ADDR_VAR 0 1
34225: PUSH
34226: LD_VAR 0 10
34230: ST_TO_ADDR
// end ;
34231: GO 34112
34233: POP
34234: POP
// result := array ;
34235: LD_ADDR_VAR 0 5
34239: PUSH
34240: LD_VAR 0 1
34244: ST_TO_ADDR
// end ;
34245: LD_VAR 0 5
34249: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34250: LD_INT 0
34252: PPUSH
34253: PPUSH
// result := 0 ;
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_INT 0
34261: ST_TO_ADDR
// if not array or not value in array then
34262: LD_VAR 0 1
34266: NOT
34267: IFTRUE 34282
34269: PUSH
34270: LD_VAR 0 2
34274: PUSH
34275: LD_VAR 0 1
34279: IN
34280: NOT
34281: OR
34282: IFFALSE 34286
// exit ;
34284: GO 34340
// for i = 1 to array do
34286: LD_ADDR_VAR 0 4
34290: PUSH
34291: DOUBLE
34292: LD_INT 1
34294: DEC
34295: ST_TO_ADDR
34296: LD_VAR 0 1
34300: PUSH
34301: FOR_TO
34302: IFFALSE 34338
// if value = array [ i ] then
34304: LD_VAR 0 2
34308: PUSH
34309: LD_VAR 0 1
34313: PUSH
34314: LD_VAR 0 4
34318: ARRAY
34319: EQUAL
34320: IFFALSE 34336
// begin result := i ;
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_VAR 0 4
34331: ST_TO_ADDR
// exit ;
34332: POP
34333: POP
34334: GO 34340
// end ;
34336: GO 34301
34338: POP
34339: POP
// end ;
34340: LD_VAR 0 3
34344: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34345: LD_INT 0
34347: PPUSH
// vc_chassis := chassis ;
34348: LD_ADDR_OWVAR 37
34352: PUSH
34353: LD_VAR 0 1
34357: ST_TO_ADDR
// vc_engine := engine ;
34358: LD_ADDR_OWVAR 39
34362: PUSH
34363: LD_VAR 0 2
34367: ST_TO_ADDR
// vc_control := control ;
34368: LD_ADDR_OWVAR 38
34372: PUSH
34373: LD_VAR 0 3
34377: ST_TO_ADDR
// vc_weapon := weapon ;
34378: LD_ADDR_OWVAR 40
34382: PUSH
34383: LD_VAR 0 4
34387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34388: LD_ADDR_OWVAR 41
34392: PUSH
34393: LD_VAR 0 5
34397: ST_TO_ADDR
// end ;
34398: LD_VAR 0 6
34402: RET
// export function WantPlant ( unit ) ; var task ; begin
34403: LD_INT 0
34405: PPUSH
34406: PPUSH
// result := false ;
34407: LD_ADDR_VAR 0 2
34411: PUSH
34412: LD_INT 0
34414: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_VAR 0 1
34424: PPUSH
34425: CALL_OW 437
34429: ST_TO_ADDR
// if task then
34430: LD_VAR 0 3
34434: IFFALSE 34462
// if task [ 1 ] [ 1 ] = p then
34436: LD_VAR 0 3
34440: PUSH
34441: LD_INT 1
34443: ARRAY
34444: PUSH
34445: LD_INT 1
34447: ARRAY
34448: PUSH
34449: LD_STRING p
34451: EQUAL
34452: IFFALSE 34462
// result := true ;
34454: LD_ADDR_VAR 0 2
34458: PUSH
34459: LD_INT 1
34461: ST_TO_ADDR
// end ;
34462: LD_VAR 0 2
34466: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34467: LD_INT 0
34469: PPUSH
34470: PPUSH
34471: PPUSH
34472: PPUSH
// if pos < 1 then
34473: LD_VAR 0 2
34477: PUSH
34478: LD_INT 1
34480: LESS
34481: IFFALSE 34485
// exit ;
34483: GO 34788
// if pos = 1 then
34485: LD_VAR 0 2
34489: PUSH
34490: LD_INT 1
34492: EQUAL
34493: IFFALSE 34526
// result := Replace ( arr , pos [ 1 ] , value ) else
34495: LD_ADDR_VAR 0 4
34499: PUSH
34500: LD_VAR 0 1
34504: PPUSH
34505: LD_VAR 0 2
34509: PUSH
34510: LD_INT 1
34512: ARRAY
34513: PPUSH
34514: LD_VAR 0 3
34518: PPUSH
34519: CALL_OW 1
34523: ST_TO_ADDR
34524: GO 34788
// begin tmp := arr ;
34526: LD_ADDR_VAR 0 6
34530: PUSH
34531: LD_VAR 0 1
34535: ST_TO_ADDR
// s_arr := [ tmp ] ;
34536: LD_ADDR_VAR 0 7
34540: PUSH
34541: LD_VAR 0 6
34545: PUSH
34546: EMPTY
34547: LIST
34548: ST_TO_ADDR
// for i = 1 to pos - 1 do
34549: LD_ADDR_VAR 0 5
34553: PUSH
34554: DOUBLE
34555: LD_INT 1
34557: DEC
34558: ST_TO_ADDR
34559: LD_VAR 0 2
34563: PUSH
34564: LD_INT 1
34566: MINUS
34567: PUSH
34568: FOR_TO
34569: IFFALSE 34614
// begin tmp := tmp [ pos [ i ] ] ;
34571: LD_ADDR_VAR 0 6
34575: PUSH
34576: LD_VAR 0 6
34580: PUSH
34581: LD_VAR 0 2
34585: PUSH
34586: LD_VAR 0 5
34590: ARRAY
34591: ARRAY
34592: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34593: LD_ADDR_VAR 0 7
34597: PUSH
34598: LD_VAR 0 7
34602: PUSH
34603: LD_VAR 0 6
34607: PUSH
34608: EMPTY
34609: LIST
34610: ADD
34611: ST_TO_ADDR
// end ;
34612: GO 34568
34614: POP
34615: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34616: LD_ADDR_VAR 0 6
34620: PUSH
34621: LD_VAR 0 6
34625: PPUSH
34626: LD_VAR 0 2
34630: PUSH
34631: LD_VAR 0 2
34635: ARRAY
34636: PPUSH
34637: LD_VAR 0 3
34641: PPUSH
34642: CALL_OW 1
34646: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34647: LD_ADDR_VAR 0 7
34651: PUSH
34652: LD_VAR 0 7
34656: PPUSH
34657: LD_VAR 0 7
34661: PPUSH
34662: LD_VAR 0 6
34666: PPUSH
34667: CALL_OW 1
34671: ST_TO_ADDR
// for i = s_arr downto 2 do
34672: LD_ADDR_VAR 0 5
34676: PUSH
34677: DOUBLE
34678: LD_VAR 0 7
34682: INC
34683: ST_TO_ADDR
34684: LD_INT 2
34686: PUSH
34687: FOR_DOWNTO
34688: IFFALSE 34772
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34690: LD_ADDR_VAR 0 6
34694: PUSH
34695: LD_VAR 0 7
34699: PUSH
34700: LD_VAR 0 5
34704: PUSH
34705: LD_INT 1
34707: MINUS
34708: ARRAY
34709: PPUSH
34710: LD_VAR 0 2
34714: PUSH
34715: LD_VAR 0 5
34719: PUSH
34720: LD_INT 1
34722: MINUS
34723: ARRAY
34724: PPUSH
34725: LD_VAR 0 7
34729: PUSH
34730: LD_VAR 0 5
34734: ARRAY
34735: PPUSH
34736: CALL_OW 1
34740: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34741: LD_ADDR_VAR 0 7
34745: PUSH
34746: LD_VAR 0 7
34750: PPUSH
34751: LD_VAR 0 5
34755: PUSH
34756: LD_INT 1
34758: MINUS
34759: PPUSH
34760: LD_VAR 0 6
34764: PPUSH
34765: CALL_OW 1
34769: ST_TO_ADDR
// end ;
34770: GO 34687
34772: POP
34773: POP
// result := s_arr [ 1 ] ;
34774: LD_ADDR_VAR 0 4
34778: PUSH
34779: LD_VAR 0 7
34783: PUSH
34784: LD_INT 1
34786: ARRAY
34787: ST_TO_ADDR
// end ; end ;
34788: LD_VAR 0 4
34792: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34793: LD_INT 0
34795: PPUSH
34796: PPUSH
// if not list then
34797: LD_VAR 0 1
34801: NOT
34802: IFFALSE 34806
// exit ;
34804: GO 34897
// i := list [ pos1 ] ;
34806: LD_ADDR_VAR 0 5
34810: PUSH
34811: LD_VAR 0 1
34815: PUSH
34816: LD_VAR 0 2
34820: ARRAY
34821: ST_TO_ADDR
// if not i then
34822: LD_VAR 0 5
34826: NOT
34827: IFFALSE 34831
// exit ;
34829: GO 34897
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34831: LD_ADDR_VAR 0 1
34835: PUSH
34836: LD_VAR 0 1
34840: PPUSH
34841: LD_VAR 0 2
34845: PPUSH
34846: LD_VAR 0 1
34850: PUSH
34851: LD_VAR 0 3
34855: ARRAY
34856: PPUSH
34857: CALL_OW 1
34861: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34862: LD_ADDR_VAR 0 1
34866: PUSH
34867: LD_VAR 0 1
34871: PPUSH
34872: LD_VAR 0 3
34876: PPUSH
34877: LD_VAR 0 5
34881: PPUSH
34882: CALL_OW 1
34886: ST_TO_ADDR
// result := list ;
34887: LD_ADDR_VAR 0 4
34891: PUSH
34892: LD_VAR 0 1
34896: ST_TO_ADDR
// end ;
34897: LD_VAR 0 4
34901: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34902: LD_INT 0
34904: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34905: LD_ADDR_VAR 0 5
34909: PUSH
34910: LD_VAR 0 1
34914: PPUSH
34915: CALL_OW 250
34919: PPUSH
34920: LD_VAR 0 1
34924: PPUSH
34925: CALL_OW 251
34929: PPUSH
34930: LD_VAR 0 2
34934: PPUSH
34935: LD_VAR 0 3
34939: PPUSH
34940: LD_VAR 0 4
34944: PPUSH
34945: CALL 35327 0 5
34949: ST_TO_ADDR
// end ;
34950: LD_VAR 0 5
34954: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34955: LD_INT 0
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
// if not list or not unit then
34961: LD_VAR 0 2
34965: NOT
34966: IFTRUE 34975
34968: PUSH
34969: LD_VAR 0 1
34973: NOT
34974: OR
34975: IFFALSE 34979
// exit ;
34977: GO 35322
// result := [ ] ;
34979: LD_ADDR_VAR 0 5
34983: PUSH
34984: EMPTY
34985: ST_TO_ADDR
// for i in list do
34986: LD_ADDR_VAR 0 6
34990: PUSH
34991: LD_VAR 0 2
34995: PUSH
34996: FOR_IN
34997: IFFALSE 35215
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34999: LD_ADDR_VAR 0 8
35003: PUSH
35004: LD_VAR 0 1
35008: PPUSH
35009: LD_VAR 0 6
35013: PUSH
35014: LD_INT 1
35016: ARRAY
35017: PPUSH
35018: LD_VAR 0 6
35022: PUSH
35023: LD_INT 2
35025: ARRAY
35026: PPUSH
35027: CALL_OW 297
35031: ST_TO_ADDR
// if not Count ( result ) then
35032: LD_VAR 0 5
35036: PPUSH
35037: CALL 31583 0 1
35041: NOT
35042: IFFALSE 35075
// begin result := Join ( result , [ i , tmp ] ) ;
35044: LD_ADDR_VAR 0 5
35048: PUSH
35049: LD_VAR 0 5
35053: PPUSH
35054: LD_VAR 0 6
35058: PUSH
35059: LD_VAR 0 8
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PPUSH
35068: CALL 67515 0 2
35072: ST_TO_ADDR
// continue ;
35073: GO 34996
// end ; if result [ result ] [ 2 ] <= tmp then
35075: LD_VAR 0 5
35079: PUSH
35080: LD_VAR 0 5
35084: ARRAY
35085: PUSH
35086: LD_INT 2
35088: ARRAY
35089: PUSH
35090: LD_VAR 0 8
35094: LESSEQUAL
35095: IFFALSE 35128
// result := Join ( result , [ i , tmp ] ) else
35097: LD_ADDR_VAR 0 5
35101: PUSH
35102: LD_VAR 0 5
35106: PPUSH
35107: LD_VAR 0 6
35111: PUSH
35112: LD_VAR 0 8
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PPUSH
35121: CALL 67515 0 2
35125: ST_TO_ADDR
35126: GO 35213
// begin for j := 1 to Count ( result ) do
35128: LD_ADDR_VAR 0 7
35132: PUSH
35133: DOUBLE
35134: LD_INT 1
35136: DEC
35137: ST_TO_ADDR
35138: LD_VAR 0 5
35142: PPUSH
35143: CALL 31583 0 1
35147: PUSH
35148: FOR_TO
35149: IFFALSE 35211
// begin if tmp < result [ j ] [ 2 ] then
35151: LD_VAR 0 8
35155: PUSH
35156: LD_VAR 0 5
35160: PUSH
35161: LD_VAR 0 7
35165: ARRAY
35166: PUSH
35167: LD_INT 2
35169: ARRAY
35170: LESS
35171: IFFALSE 35209
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35173: LD_ADDR_VAR 0 5
35177: PUSH
35178: LD_VAR 0 5
35182: PPUSH
35183: LD_VAR 0 7
35187: PPUSH
35188: LD_VAR 0 6
35192: PUSH
35193: LD_VAR 0 8
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PPUSH
35202: CALL_OW 2
35206: ST_TO_ADDR
// break ;
35207: GO 35211
// end ; end ;
35209: GO 35148
35211: POP
35212: POP
// end ; end ;
35213: GO 34996
35215: POP
35216: POP
// if result and not asc then
35217: LD_VAR 0 5
35221: IFFALSE 35230
35223: PUSH
35224: LD_VAR 0 3
35228: NOT
35229: AND
35230: IFFALSE 35247
// result := ReverseArray ( result ) ;
35232: LD_ADDR_VAR 0 5
35236: PUSH
35237: LD_VAR 0 5
35241: PPUSH
35242: CALL 62605 0 1
35246: ST_TO_ADDR
// tmp := [ ] ;
35247: LD_ADDR_VAR 0 8
35251: PUSH
35252: EMPTY
35253: ST_TO_ADDR
// if mode then
35254: LD_VAR 0 4
35258: IFFALSE 35322
// begin for i := 1 to result do
35260: LD_ADDR_VAR 0 6
35264: PUSH
35265: DOUBLE
35266: LD_INT 1
35268: DEC
35269: ST_TO_ADDR
35270: LD_VAR 0 5
35274: PUSH
35275: FOR_TO
35276: IFFALSE 35310
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35278: LD_ADDR_VAR 0 8
35282: PUSH
35283: LD_VAR 0 8
35287: PPUSH
35288: LD_VAR 0 5
35292: PUSH
35293: LD_VAR 0 6
35297: ARRAY
35298: PUSH
35299: LD_INT 1
35301: ARRAY
35302: PPUSH
35303: CALL 67515 0 2
35307: ST_TO_ADDR
35308: GO 35275
35310: POP
35311: POP
// result := tmp ;
35312: LD_ADDR_VAR 0 5
35316: PUSH
35317: LD_VAR 0 8
35321: ST_TO_ADDR
// end ; end ;
35322: LD_VAR 0 5
35326: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35327: LD_INT 0
35329: PPUSH
35330: PPUSH
35331: PPUSH
35332: PPUSH
// if not list then
35333: LD_VAR 0 3
35337: NOT
35338: IFFALSE 35342
// exit ;
35340: GO 35732
// result := [ ] ;
35342: LD_ADDR_VAR 0 6
35346: PUSH
35347: EMPTY
35348: ST_TO_ADDR
// for i in list do
35349: LD_ADDR_VAR 0 7
35353: PUSH
35354: LD_VAR 0 3
35358: PUSH
35359: FOR_IN
35360: IFFALSE 35562
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35362: LD_ADDR_VAR 0 9
35366: PUSH
35367: LD_VAR 0 7
35371: PPUSH
35372: LD_VAR 0 1
35376: PPUSH
35377: LD_VAR 0 2
35381: PPUSH
35382: CALL_OW 297
35386: ST_TO_ADDR
// if not result then
35387: LD_VAR 0 6
35391: NOT
35392: IFFALSE 35418
// result := [ [ i , tmp ] ] else
35394: LD_ADDR_VAR 0 6
35398: PUSH
35399: LD_VAR 0 7
35403: PUSH
35404: LD_VAR 0 9
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: EMPTY
35414: LIST
35415: ST_TO_ADDR
35416: GO 35560
// begin if result [ result ] [ 2 ] <= tmp then
35418: LD_VAR 0 6
35422: PUSH
35423: LD_VAR 0 6
35427: ARRAY
35428: PUSH
35429: LD_INT 2
35431: ARRAY
35432: PUSH
35433: LD_VAR 0 9
35437: LESSEQUAL
35438: IFFALSE 35480
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35440: LD_ADDR_VAR 0 6
35444: PUSH
35445: LD_VAR 0 6
35449: PPUSH
35450: LD_VAR 0 6
35454: PUSH
35455: LD_INT 1
35457: PLUS
35458: PPUSH
35459: LD_VAR 0 7
35463: PUSH
35464: LD_VAR 0 9
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PPUSH
35473: CALL_OW 2
35477: ST_TO_ADDR
35478: GO 35560
// for j := 1 to result do
35480: LD_ADDR_VAR 0 8
35484: PUSH
35485: DOUBLE
35486: LD_INT 1
35488: DEC
35489: ST_TO_ADDR
35490: LD_VAR 0 6
35494: PUSH
35495: FOR_TO
35496: IFFALSE 35558
// begin if tmp < result [ j ] [ 2 ] then
35498: LD_VAR 0 9
35502: PUSH
35503: LD_VAR 0 6
35507: PUSH
35508: LD_VAR 0 8
35512: ARRAY
35513: PUSH
35514: LD_INT 2
35516: ARRAY
35517: LESS
35518: IFFALSE 35556
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35520: LD_ADDR_VAR 0 6
35524: PUSH
35525: LD_VAR 0 6
35529: PPUSH
35530: LD_VAR 0 8
35534: PPUSH
35535: LD_VAR 0 7
35539: PUSH
35540: LD_VAR 0 9
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PPUSH
35549: CALL_OW 2
35553: ST_TO_ADDR
// break ;
35554: GO 35558
// end ; end ;
35556: GO 35495
35558: POP
35559: POP
// end ; end ;
35560: GO 35359
35562: POP
35563: POP
// if result and not asc then
35564: LD_VAR 0 6
35568: IFFALSE 35577
35570: PUSH
35571: LD_VAR 0 4
35575: NOT
35576: AND
35577: IFFALSE 35652
// begin tmp := result ;
35579: LD_ADDR_VAR 0 9
35583: PUSH
35584: LD_VAR 0 6
35588: ST_TO_ADDR
// for i = tmp downto 1 do
35589: LD_ADDR_VAR 0 7
35593: PUSH
35594: DOUBLE
35595: LD_VAR 0 9
35599: INC
35600: ST_TO_ADDR
35601: LD_INT 1
35603: PUSH
35604: FOR_DOWNTO
35605: IFFALSE 35650
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35607: LD_ADDR_VAR 0 6
35611: PUSH
35612: LD_VAR 0 6
35616: PPUSH
35617: LD_VAR 0 9
35621: PUSH
35622: LD_VAR 0 7
35626: MINUS
35627: PUSH
35628: LD_INT 1
35630: PLUS
35631: PPUSH
35632: LD_VAR 0 9
35636: PUSH
35637: LD_VAR 0 7
35641: ARRAY
35642: PPUSH
35643: CALL_OW 1
35647: ST_TO_ADDR
35648: GO 35604
35650: POP
35651: POP
// end ; tmp := [ ] ;
35652: LD_ADDR_VAR 0 9
35656: PUSH
35657: EMPTY
35658: ST_TO_ADDR
// if mode then
35659: LD_VAR 0 5
35663: IFFALSE 35732
// begin for i = 1 to result do
35665: LD_ADDR_VAR 0 7
35669: PUSH
35670: DOUBLE
35671: LD_INT 1
35673: DEC
35674: ST_TO_ADDR
35675: LD_VAR 0 6
35679: PUSH
35680: FOR_TO
35681: IFFALSE 35720
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35683: LD_ADDR_VAR 0 9
35687: PUSH
35688: LD_VAR 0 9
35692: PPUSH
35693: LD_VAR 0 7
35697: PPUSH
35698: LD_VAR 0 6
35702: PUSH
35703: LD_VAR 0 7
35707: ARRAY
35708: PUSH
35709: LD_INT 1
35711: ARRAY
35712: PPUSH
35713: CALL_OW 1
35717: ST_TO_ADDR
35718: GO 35680
35720: POP
35721: POP
// result := tmp ;
35722: LD_ADDR_VAR 0 6
35726: PUSH
35727: LD_VAR 0 9
35731: ST_TO_ADDR
// end ; end ;
35732: LD_VAR 0 6
35736: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35737: LD_INT 0
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35745: LD_ADDR_VAR 0 5
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: ST_TO_ADDR
// if not x or not y then
35767: LD_VAR 0 2
35771: NOT
35772: IFTRUE 35781
35774: PUSH
35775: LD_VAR 0 3
35779: NOT
35780: OR
35781: IFFALSE 35785
// exit ;
35783: GO 37441
// if not range then
35785: LD_VAR 0 4
35789: NOT
35790: IFFALSE 35800
// range := 10 ;
35792: LD_ADDR_VAR 0 4
35796: PUSH
35797: LD_INT 10
35799: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35800: LD_ADDR_VAR 0 8
35804: PUSH
35805: LD_INT 81
35807: PUSH
35808: LD_VAR 0 1
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 92
35819: PUSH
35820: LD_VAR 0 2
35824: PUSH
35825: LD_VAR 0 3
35829: PUSH
35830: LD_VAR 0 4
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: LD_INT 21
35846: PUSH
35847: LD_INT 3
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: PPUSH
35863: CALL_OW 69
35867: ST_TO_ADDR
// if not tmp then
35868: LD_VAR 0 8
35872: NOT
35873: IFFALSE 35877
// exit ;
35875: GO 37441
// for i in tmp do
35877: LD_ADDR_VAR 0 6
35881: PUSH
35882: LD_VAR 0 8
35886: PUSH
35887: FOR_IN
35888: IFFALSE 37416
// begin points := [ 0 , 0 , 0 ] ;
35890: LD_ADDR_VAR 0 9
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: LIST
35908: ST_TO_ADDR
// bpoints := 1 ;
35909: LD_ADDR_VAR 0 10
35913: PUSH
35914: LD_INT 1
35916: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35917: LD_VAR 0 6
35921: PPUSH
35922: CALL_OW 247
35926: PUSH
35927: LD_INT 1
35929: DOUBLE
35930: EQUAL
35931: IFTRUE 35935
35933: GO 36517
35935: POP
// begin if GetClass ( i ) = 1 then
35936: LD_VAR 0 6
35940: PPUSH
35941: CALL_OW 257
35945: PUSH
35946: LD_INT 1
35948: EQUAL
35949: IFFALSE 35970
// points := [ 10 , 5 , 3 ] ;
35951: LD_ADDR_VAR 0 9
35955: PUSH
35956: LD_INT 10
35958: PUSH
35959: LD_INT 5
35961: PUSH
35962: LD_INT 3
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35970: LD_VAR 0 6
35974: PPUSH
35975: CALL_OW 257
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: LD_INT 3
35985: PUSH
35986: LD_INT 4
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: IN
35994: IFFALSE 36015
// points := [ 3 , 2 , 1 ] ;
35996: LD_ADDR_VAR 0 9
36000: PUSH
36001: LD_INT 3
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36015: LD_VAR 0 6
36019: PPUSH
36020: CALL_OW 257
36024: PUSH
36025: LD_INT 5
36027: EQUAL
36028: IFFALSE 36049
// points := [ 130 , 5 , 2 ] ;
36030: LD_ADDR_VAR 0 9
36034: PUSH
36035: LD_INT 130
36037: PUSH
36038: LD_INT 5
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36049: LD_VAR 0 6
36053: PPUSH
36054: CALL_OW 257
36058: PUSH
36059: LD_INT 8
36061: EQUAL
36062: IFFALSE 36083
// points := [ 35 , 35 , 30 ] ;
36064: LD_ADDR_VAR 0 9
36068: PUSH
36069: LD_INT 35
36071: PUSH
36072: LD_INT 35
36074: PUSH
36075: LD_INT 30
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36083: LD_VAR 0 6
36087: PPUSH
36088: CALL_OW 257
36092: PUSH
36093: LD_INT 9
36095: EQUAL
36096: IFFALSE 36117
// points := [ 20 , 55 , 40 ] ;
36098: LD_ADDR_VAR 0 9
36102: PUSH
36103: LD_INT 20
36105: PUSH
36106: LD_INT 55
36108: PUSH
36109: LD_INT 40
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: LIST
36116: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36117: LD_VAR 0 6
36121: PPUSH
36122: CALL_OW 257
36126: PUSH
36127: LD_INT 12
36129: PUSH
36130: LD_INT 16
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: IN
36137: IFFALSE 36158
// points := [ 5 , 3 , 2 ] ;
36139: LD_ADDR_VAR 0 9
36143: PUSH
36144: LD_INT 5
36146: PUSH
36147: LD_INT 3
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36158: LD_VAR 0 6
36162: PPUSH
36163: CALL_OW 257
36167: PUSH
36168: LD_INT 17
36170: EQUAL
36171: IFFALSE 36192
// points := [ 100 , 50 , 75 ] ;
36173: LD_ADDR_VAR 0 9
36177: PUSH
36178: LD_INT 100
36180: PUSH
36181: LD_INT 50
36183: PUSH
36184: LD_INT 75
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36192: LD_VAR 0 6
36196: PPUSH
36197: CALL_OW 257
36201: PUSH
36202: LD_INT 15
36204: EQUAL
36205: IFFALSE 36226
// points := [ 10 , 5 , 3 ] ;
36207: LD_ADDR_VAR 0 9
36211: PUSH
36212: LD_INT 10
36214: PUSH
36215: LD_INT 5
36217: PUSH
36218: LD_INT 3
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36226: LD_VAR 0 6
36230: PPUSH
36231: CALL_OW 257
36235: PUSH
36236: LD_INT 14
36238: EQUAL
36239: IFFALSE 36260
// points := [ 10 , 0 , 0 ] ;
36241: LD_ADDR_VAR 0 9
36245: PUSH
36246: LD_INT 10
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36260: LD_VAR 0 6
36264: PPUSH
36265: CALL_OW 257
36269: PUSH
36270: LD_INT 11
36272: EQUAL
36273: IFFALSE 36294
// points := [ 30 , 10 , 5 ] ;
36275: LD_ADDR_VAR 0 9
36279: PUSH
36280: LD_INT 30
36282: PUSH
36283: LD_INT 10
36285: PUSH
36286: LD_INT 5
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36294: LD_VAR 0 1
36298: PPUSH
36299: LD_INT 5
36301: PPUSH
36302: CALL_OW 321
36306: PUSH
36307: LD_INT 2
36309: EQUAL
36310: IFFALSE 36327
// bpoints := bpoints * 1.8 ;
36312: LD_ADDR_VAR 0 10
36316: PUSH
36317: LD_VAR 0 10
36321: PUSH
36322: LD_REAL  1.80000000000000E+0000
36325: MUL
36326: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36327: LD_VAR 0 6
36331: PPUSH
36332: CALL_OW 257
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: LD_INT 2
36342: PUSH
36343: LD_INT 3
36345: PUSH
36346: LD_INT 4
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: IN
36355: IFFALSE 36375
36357: PUSH
36358: LD_VAR 0 1
36362: PPUSH
36363: LD_INT 51
36365: PPUSH
36366: CALL_OW 321
36370: PUSH
36371: LD_INT 2
36373: EQUAL
36374: AND
36375: IFFALSE 36392
// bpoints := bpoints * 1.2 ;
36377: LD_ADDR_VAR 0 10
36381: PUSH
36382: LD_VAR 0 10
36386: PUSH
36387: LD_REAL  1.20000000000000E+0000
36390: MUL
36391: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36392: LD_VAR 0 6
36396: PPUSH
36397: CALL_OW 257
36401: PUSH
36402: LD_INT 5
36404: PUSH
36405: LD_INT 7
36407: PUSH
36408: LD_INT 9
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: IN
36416: IFFALSE 36436
36418: PUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: LD_INT 52
36426: PPUSH
36427: CALL_OW 321
36431: PUSH
36432: LD_INT 2
36434: EQUAL
36435: AND
36436: IFFALSE 36453
// bpoints := bpoints * 1.5 ;
36438: LD_ADDR_VAR 0 10
36442: PUSH
36443: LD_VAR 0 10
36447: PUSH
36448: LD_REAL  1.50000000000000E+0000
36451: MUL
36452: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36453: LD_VAR 0 1
36457: PPUSH
36458: LD_INT 66
36460: PPUSH
36461: CALL_OW 321
36465: PUSH
36466: LD_INT 2
36468: EQUAL
36469: IFFALSE 36486
// bpoints := bpoints * 1.1 ;
36471: LD_ADDR_VAR 0 10
36475: PUSH
36476: LD_VAR 0 10
36480: PUSH
36481: LD_REAL  1.10000000000000E+0000
36484: MUL
36485: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36486: LD_ADDR_VAR 0 10
36490: PUSH
36491: LD_VAR 0 10
36495: PUSH
36496: LD_VAR 0 6
36500: PPUSH
36501: LD_INT 1
36503: PPUSH
36504: CALL_OW 259
36508: PUSH
36509: LD_REAL  1.15000000000000E+0000
36512: MUL
36513: MUL
36514: ST_TO_ADDR
// end ; unit_vehicle :
36515: GO 37345
36517: LD_INT 2
36519: DOUBLE
36520: EQUAL
36521: IFTRUE 36525
36523: GO 37333
36525: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36526: LD_VAR 0 6
36530: PPUSH
36531: CALL_OW 264
36535: PUSH
36536: LD_INT 2
36538: PUSH
36539: LD_INT 42
36541: PUSH
36542: LD_INT 24
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: IN
36550: IFFALSE 36571
// points := [ 25 , 5 , 3 ] ;
36552: LD_ADDR_VAR 0 9
36556: PUSH
36557: LD_INT 25
36559: PUSH
36560: LD_INT 5
36562: PUSH
36563: LD_INT 3
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36571: LD_VAR 0 6
36575: PPUSH
36576: CALL_OW 264
36580: PUSH
36581: LD_INT 4
36583: PUSH
36584: LD_INT 43
36586: PUSH
36587: LD_INT 25
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: IN
36595: IFFALSE 36616
// points := [ 40 , 15 , 5 ] ;
36597: LD_ADDR_VAR 0 9
36601: PUSH
36602: LD_INT 40
36604: PUSH
36605: LD_INT 15
36607: PUSH
36608: LD_INT 5
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36616: LD_VAR 0 6
36620: PPUSH
36621: CALL_OW 264
36625: PUSH
36626: LD_INT 3
36628: PUSH
36629: LD_INT 23
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: IN
36636: IFFALSE 36657
// points := [ 7 , 25 , 8 ] ;
36638: LD_ADDR_VAR 0 9
36642: PUSH
36643: LD_INT 7
36645: PUSH
36646: LD_INT 25
36648: PUSH
36649: LD_INT 8
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36657: LD_VAR 0 6
36661: PPUSH
36662: CALL_OW 264
36666: PUSH
36667: LD_INT 5
36669: PUSH
36670: LD_INT 27
36672: PUSH
36673: LD_INT 44
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: IN
36681: IFFALSE 36702
// points := [ 14 , 50 , 16 ] ;
36683: LD_ADDR_VAR 0 9
36687: PUSH
36688: LD_INT 14
36690: PUSH
36691: LD_INT 50
36693: PUSH
36694: LD_INT 16
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: LIST
36701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36702: LD_VAR 0 6
36706: PPUSH
36707: CALL_OW 264
36711: PUSH
36712: LD_INT 6
36714: PUSH
36715: LD_INT 46
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: IN
36722: IFFALSE 36743
// points := [ 32 , 120 , 70 ] ;
36724: LD_ADDR_VAR 0 9
36728: PUSH
36729: LD_INT 32
36731: PUSH
36732: LD_INT 120
36734: PUSH
36735: LD_INT 70
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: LIST
36742: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36743: LD_VAR 0 6
36747: PPUSH
36748: CALL_OW 264
36752: PUSH
36753: LD_INT 7
36755: PUSH
36756: LD_INT 28
36758: PUSH
36759: LD_INT 45
36761: PUSH
36762: LD_INT 92
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: IN
36771: IFFALSE 36792
// points := [ 35 , 20 , 45 ] ;
36773: LD_ADDR_VAR 0 9
36777: PUSH
36778: LD_INT 35
36780: PUSH
36781: LD_INT 20
36783: PUSH
36784: LD_INT 45
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: LIST
36791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36792: LD_VAR 0 6
36796: PPUSH
36797: CALL_OW 264
36801: PUSH
36802: LD_INT 47
36804: PUSH
36805: EMPTY
36806: LIST
36807: IN
36808: IFFALSE 36829
// points := [ 67 , 45 , 75 ] ;
36810: LD_ADDR_VAR 0 9
36814: PUSH
36815: LD_INT 67
36817: PUSH
36818: LD_INT 45
36820: PUSH
36821: LD_INT 75
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36829: LD_VAR 0 6
36833: PPUSH
36834: CALL_OW 264
36838: PUSH
36839: LD_INT 26
36841: PUSH
36842: EMPTY
36843: LIST
36844: IN
36845: IFFALSE 36866
// points := [ 120 , 30 , 80 ] ;
36847: LD_ADDR_VAR 0 9
36851: PUSH
36852: LD_INT 120
36854: PUSH
36855: LD_INT 30
36857: PUSH
36858: LD_INT 80
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36866: LD_VAR 0 6
36870: PPUSH
36871: CALL_OW 264
36875: PUSH
36876: LD_INT 22
36878: PUSH
36879: EMPTY
36880: LIST
36881: IN
36882: IFFALSE 36903
// points := [ 40 , 1 , 1 ] ;
36884: LD_ADDR_VAR 0 9
36888: PUSH
36889: LD_INT 40
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36903: LD_VAR 0 6
36907: PPUSH
36908: CALL_OW 264
36912: PUSH
36913: LD_INT 29
36915: PUSH
36916: EMPTY
36917: LIST
36918: IN
36919: IFFALSE 36940
// points := [ 70 , 200 , 400 ] ;
36921: LD_ADDR_VAR 0 9
36925: PUSH
36926: LD_INT 70
36928: PUSH
36929: LD_INT 200
36931: PUSH
36932: LD_INT 400
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36940: LD_VAR 0 6
36944: PPUSH
36945: CALL_OW 264
36949: PUSH
36950: LD_INT 14
36952: PUSH
36953: LD_INT 53
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: IN
36960: IFFALSE 36981
// points := [ 40 , 10 , 20 ] ;
36962: LD_ADDR_VAR 0 9
36966: PUSH
36967: LD_INT 40
36969: PUSH
36970: LD_INT 10
36972: PUSH
36973: LD_INT 20
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36981: LD_VAR 0 6
36985: PPUSH
36986: CALL_OW 264
36990: PUSH
36991: LD_INT 9
36993: PUSH
36994: EMPTY
36995: LIST
36996: IN
36997: IFFALSE 37018
// points := [ 5 , 70 , 20 ] ;
36999: LD_ADDR_VAR 0 9
37003: PUSH
37004: LD_INT 5
37006: PUSH
37007: LD_INT 70
37009: PUSH
37010: LD_INT 20
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37018: LD_VAR 0 6
37022: PPUSH
37023: CALL_OW 264
37027: PUSH
37028: LD_INT 10
37030: PUSH
37031: EMPTY
37032: LIST
37033: IN
37034: IFFALSE 37055
// points := [ 35 , 110 , 70 ] ;
37036: LD_ADDR_VAR 0 9
37040: PUSH
37041: LD_INT 35
37043: PUSH
37044: LD_INT 110
37046: PUSH
37047: LD_INT 70
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37055: LD_VAR 0 6
37059: PPUSH
37060: CALL_OW 265
37064: PUSH
37065: LD_INT 25
37067: EQUAL
37068: IFFALSE 37089
// points := [ 80 , 65 , 100 ] ;
37070: LD_ADDR_VAR 0 9
37074: PUSH
37075: LD_INT 80
37077: PUSH
37078: LD_INT 65
37080: PUSH
37081: LD_INT 100
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: LIST
37088: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37089: LD_VAR 0 6
37093: PPUSH
37094: CALL_OW 263
37098: PUSH
37099: LD_INT 1
37101: EQUAL
37102: IFFALSE 37137
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37104: LD_ADDR_VAR 0 10
37108: PUSH
37109: LD_VAR 0 10
37113: PUSH
37114: LD_VAR 0 6
37118: PPUSH
37119: CALL_OW 311
37123: PPUSH
37124: LD_INT 3
37126: PPUSH
37127: CALL_OW 259
37131: PUSH
37132: LD_INT 4
37134: MUL
37135: MUL
37136: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37137: LD_VAR 0 6
37141: PPUSH
37142: CALL_OW 263
37146: PUSH
37147: LD_INT 2
37149: EQUAL
37150: IFFALSE 37201
// begin j := IsControledBy ( i ) ;
37152: LD_ADDR_VAR 0 7
37156: PUSH
37157: LD_VAR 0 6
37161: PPUSH
37162: CALL_OW 312
37166: ST_TO_ADDR
// if j then
37167: LD_VAR 0 7
37171: IFFALSE 37201
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37173: LD_ADDR_VAR 0 10
37177: PUSH
37178: LD_VAR 0 10
37182: PUSH
37183: LD_VAR 0 7
37187: PPUSH
37188: LD_INT 3
37190: PPUSH
37191: CALL_OW 259
37195: PUSH
37196: LD_INT 3
37198: MUL
37199: MUL
37200: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37201: LD_VAR 0 6
37205: PPUSH
37206: CALL_OW 264
37210: PUSH
37211: LD_INT 5
37213: PUSH
37214: LD_INT 6
37216: PUSH
37217: LD_INT 46
37219: PUSH
37220: LD_INT 44
37222: PUSH
37223: LD_INT 47
37225: PUSH
37226: LD_INT 45
37228: PUSH
37229: LD_INT 28
37231: PUSH
37232: LD_INT 7
37234: PUSH
37235: LD_INT 27
37237: PUSH
37238: LD_INT 29
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: IN
37253: IFFALSE 37273
37255: PUSH
37256: LD_VAR 0 1
37260: PPUSH
37261: LD_INT 52
37263: PPUSH
37264: CALL_OW 321
37268: PUSH
37269: LD_INT 2
37271: EQUAL
37272: AND
37273: IFFALSE 37290
// bpoints := bpoints * 1.2 ;
37275: LD_ADDR_VAR 0 10
37279: PUSH
37280: LD_VAR 0 10
37284: PUSH
37285: LD_REAL  1.20000000000000E+0000
37288: MUL
37289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37290: LD_VAR 0 6
37294: PPUSH
37295: CALL_OW 264
37299: PUSH
37300: LD_INT 6
37302: PUSH
37303: LD_INT 46
37305: PUSH
37306: LD_INT 47
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: IN
37314: IFFALSE 37331
// bpoints := bpoints * 1.2 ;
37316: LD_ADDR_VAR 0 10
37320: PUSH
37321: LD_VAR 0 10
37325: PUSH
37326: LD_REAL  1.20000000000000E+0000
37329: MUL
37330: ST_TO_ADDR
// end ; unit_building :
37331: GO 37345
37333: LD_INT 3
37335: DOUBLE
37336: EQUAL
37337: IFTRUE 37341
37339: GO 37344
37341: POP
// ; end ;
37342: GO 37345
37344: POP
// for j = 1 to 3 do
37345: LD_ADDR_VAR 0 7
37349: PUSH
37350: DOUBLE
37351: LD_INT 1
37353: DEC
37354: ST_TO_ADDR
37355: LD_INT 3
37357: PUSH
37358: FOR_TO
37359: IFFALSE 37412
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37361: LD_ADDR_VAR 0 5
37365: PUSH
37366: LD_VAR 0 5
37370: PPUSH
37371: LD_VAR 0 7
37375: PPUSH
37376: LD_VAR 0 5
37380: PUSH
37381: LD_VAR 0 7
37385: ARRAY
37386: PUSH
37387: LD_VAR 0 9
37391: PUSH
37392: LD_VAR 0 7
37396: ARRAY
37397: PUSH
37398: LD_VAR 0 10
37402: MUL
37403: PLUS
37404: PPUSH
37405: CALL_OW 1
37409: ST_TO_ADDR
37410: GO 37358
37412: POP
37413: POP
// end ;
37414: GO 35887
37416: POP
37417: POP
// result := Replace ( result , 4 , tmp ) ;
37418: LD_ADDR_VAR 0 5
37422: PUSH
37423: LD_VAR 0 5
37427: PPUSH
37428: LD_INT 4
37430: PPUSH
37431: LD_VAR 0 8
37435: PPUSH
37436: CALL_OW 1
37440: ST_TO_ADDR
// end ;
37441: LD_VAR 0 5
37445: RET
// export function DangerAtRange ( unit , range ) ; begin
37446: LD_INT 0
37448: PPUSH
// if not unit then
37449: LD_VAR 0 1
37453: NOT
37454: IFFALSE 37458
// exit ;
37456: GO 37503
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37458: LD_ADDR_VAR 0 3
37462: PUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: CALL_OW 255
37472: PPUSH
37473: LD_VAR 0 1
37477: PPUSH
37478: CALL_OW 250
37482: PPUSH
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 251
37492: PPUSH
37493: LD_VAR 0 2
37497: PPUSH
37498: CALL 35737 0 4
37502: ST_TO_ADDR
// end ;
37503: LD_VAR 0 3
37507: RET
// export function DangerInArea ( side , area ) ; begin
37508: LD_INT 0
37510: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37511: LD_ADDR_VAR 0 3
37515: PUSH
37516: LD_VAR 0 2
37520: PPUSH
37521: LD_INT 81
37523: PUSH
37524: LD_VAR 0 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PPUSH
37533: CALL_OW 70
37537: ST_TO_ADDR
// end ;
37538: LD_VAR 0 3
37542: RET
// export function IsExtension ( b ) ; begin
37543: LD_INT 0
37545: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37546: LD_ADDR_VAR 0 2
37550: PUSH
37551: LD_VAR 0 1
37555: PUSH
37556: LD_INT 23
37558: PUSH
37559: LD_INT 20
37561: PUSH
37562: LD_INT 22
37564: PUSH
37565: LD_INT 17
37567: PUSH
37568: LD_INT 24
37570: PUSH
37571: LD_INT 21
37573: PUSH
37574: LD_INT 19
37576: PUSH
37577: LD_INT 16
37579: PUSH
37580: LD_INT 25
37582: PUSH
37583: LD_INT 18
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: IN
37598: ST_TO_ADDR
// end ;
37599: LD_VAR 0 2
37603: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37604: LD_INT 0
37606: PPUSH
37607: PPUSH
37608: PPUSH
// result := [ ] ;
37609: LD_ADDR_VAR 0 4
37613: PUSH
37614: EMPTY
37615: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37616: LD_ADDR_VAR 0 5
37620: PUSH
37621: LD_VAR 0 2
37625: PPUSH
37626: LD_INT 21
37628: PUSH
37629: LD_INT 3
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PPUSH
37636: CALL_OW 70
37640: ST_TO_ADDR
// if not tmp then
37641: LD_VAR 0 5
37645: NOT
37646: IFFALSE 37650
// exit ;
37648: GO 37714
// if checkLink then
37650: LD_VAR 0 3
37654: IFFALSE 37704
// begin for i in tmp do
37656: LD_ADDR_VAR 0 6
37660: PUSH
37661: LD_VAR 0 5
37665: PUSH
37666: FOR_IN
37667: IFFALSE 37702
// if GetBase ( i ) <> base then
37669: LD_VAR 0 6
37673: PPUSH
37674: CALL_OW 274
37678: PUSH
37679: LD_VAR 0 1
37683: NONEQUAL
37684: IFFALSE 37700
// ComLinkToBase ( base , i ) ;
37686: LD_VAR 0 1
37690: PPUSH
37691: LD_VAR 0 6
37695: PPUSH
37696: CALL_OW 169
37700: GO 37666
37702: POP
37703: POP
// end ; result := tmp ;
37704: LD_ADDR_VAR 0 4
37708: PUSH
37709: LD_VAR 0 5
37713: ST_TO_ADDR
// end ;
37714: LD_VAR 0 4
37718: RET
// export function ComComplete ( units , b ) ; var i ; begin
37719: LD_INT 0
37721: PPUSH
37722: PPUSH
// if not units then
37723: LD_VAR 0 1
37727: NOT
37728: IFFALSE 37732
// exit ;
37730: GO 37822
// for i in units do
37732: LD_ADDR_VAR 0 4
37736: PUSH
37737: LD_VAR 0 1
37741: PUSH
37742: FOR_IN
37743: IFFALSE 37820
// if BuildingStatus ( b ) = bs_build then
37745: LD_VAR 0 2
37749: PPUSH
37750: CALL_OW 461
37754: PUSH
37755: LD_INT 1
37757: EQUAL
37758: IFFALSE 37818
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37760: LD_VAR 0 4
37764: PPUSH
37765: LD_STRING h
37767: PUSH
37768: LD_VAR 0 2
37772: PPUSH
37773: CALL_OW 250
37777: PUSH
37778: LD_VAR 0 2
37782: PPUSH
37783: CALL_OW 251
37787: PUSH
37788: LD_VAR 0 2
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 0
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: PUSH
37811: EMPTY
37812: LIST
37813: PPUSH
37814: CALL_OW 446
37818: GO 37742
37820: POP
37821: POP
// end ;
37822: LD_VAR 0 3
37826: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37827: LD_INT 0
37829: PPUSH
37830: PPUSH
37831: PPUSH
37832: PPUSH
37833: PPUSH
37834: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37835: LD_VAR 0 1
37839: NOT
37840: IFTRUE 37857
37842: PUSH
37843: LD_VAR 0 1
37847: PPUSH
37848: CALL_OW 263
37852: PUSH
37853: LD_INT 2
37855: NONEQUAL
37856: OR
37857: IFFALSE 37861
// exit ;
37859: GO 38177
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37861: LD_ADDR_VAR 0 6
37865: PUSH
37866: LD_INT 22
37868: PUSH
37869: LD_VAR 0 1
37873: PPUSH
37874: CALL_OW 255
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 30
37888: PUSH
37889: LD_INT 36
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 34
37898: PUSH
37899: LD_INT 31
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PPUSH
37915: CALL_OW 69
37919: ST_TO_ADDR
// if not tmp then
37920: LD_VAR 0 6
37924: NOT
37925: IFFALSE 37929
// exit ;
37927: GO 38177
// result := [ ] ;
37929: LD_ADDR_VAR 0 2
37933: PUSH
37934: EMPTY
37935: ST_TO_ADDR
// for i in tmp do
37936: LD_ADDR_VAR 0 3
37940: PUSH
37941: LD_VAR 0 6
37945: PUSH
37946: FOR_IN
37947: IFFALSE 38018
// begin t := UnitsInside ( i ) ;
37949: LD_ADDR_VAR 0 4
37953: PUSH
37954: LD_VAR 0 3
37958: PPUSH
37959: CALL_OW 313
37963: ST_TO_ADDR
// if t then
37964: LD_VAR 0 4
37968: IFFALSE 38016
// for j in t do
37970: LD_ADDR_VAR 0 7
37974: PUSH
37975: LD_VAR 0 4
37979: PUSH
37980: FOR_IN
37981: IFFALSE 38014
// result := Replace ( result , result + 1 , j ) ;
37983: LD_ADDR_VAR 0 2
37987: PUSH
37988: LD_VAR 0 2
37992: PPUSH
37993: LD_VAR 0 2
37997: PUSH
37998: LD_INT 1
38000: PLUS
38001: PPUSH
38002: LD_VAR 0 7
38006: PPUSH
38007: CALL_OW 1
38011: ST_TO_ADDR
38012: GO 37980
38014: POP
38015: POP
// end ;
38016: GO 37946
38018: POP
38019: POP
// if not result then
38020: LD_VAR 0 2
38024: NOT
38025: IFFALSE 38029
// exit ;
38027: GO 38177
// mech := result [ 1 ] ;
38029: LD_ADDR_VAR 0 5
38033: PUSH
38034: LD_VAR 0 2
38038: PUSH
38039: LD_INT 1
38041: ARRAY
38042: ST_TO_ADDR
// if result > 1 then
38043: LD_VAR 0 2
38047: PUSH
38048: LD_INT 1
38050: GREATER
38051: IFFALSE 38163
// begin for i = 2 to result do
38053: LD_ADDR_VAR 0 3
38057: PUSH
38058: DOUBLE
38059: LD_INT 2
38061: DEC
38062: ST_TO_ADDR
38063: LD_VAR 0 2
38067: PUSH
38068: FOR_TO
38069: IFFALSE 38161
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38071: LD_ADDR_VAR 0 4
38075: PUSH
38076: LD_VAR 0 2
38080: PUSH
38081: LD_VAR 0 3
38085: ARRAY
38086: PPUSH
38087: LD_INT 3
38089: PPUSH
38090: CALL_OW 259
38094: PUSH
38095: LD_VAR 0 2
38099: PUSH
38100: LD_VAR 0 3
38104: ARRAY
38105: PPUSH
38106: CALL_OW 432
38110: MINUS
38111: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38112: LD_VAR 0 4
38116: PUSH
38117: LD_VAR 0 5
38121: PPUSH
38122: LD_INT 3
38124: PPUSH
38125: CALL_OW 259
38129: PUSH
38130: LD_VAR 0 5
38134: PPUSH
38135: CALL_OW 432
38139: MINUS
38140: GREATEREQUAL
38141: IFFALSE 38159
// mech := result [ i ] ;
38143: LD_ADDR_VAR 0 5
38147: PUSH
38148: LD_VAR 0 2
38152: PUSH
38153: LD_VAR 0 3
38157: ARRAY
38158: ST_TO_ADDR
// end ;
38159: GO 38068
38161: POP
38162: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38163: LD_VAR 0 1
38167: PPUSH
38168: LD_VAR 0 5
38172: PPUSH
38173: CALL_OW 135
// end ;
38177: LD_VAR 0 2
38181: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38182: LD_INT 0
38184: PPUSH
38185: PPUSH
38186: PPUSH
38187: PPUSH
38188: PPUSH
38189: PPUSH
38190: PPUSH
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
// result := [ ] ;
38197: LD_ADDR_VAR 0 7
38201: PUSH
38202: EMPTY
38203: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38204: LD_VAR 0 1
38208: PPUSH
38209: CALL_OW 266
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: IN
38224: NOT
38225: IFFALSE 38229
// exit ;
38227: GO 39869
// if name then
38229: LD_VAR 0 3
38233: IFFALSE 38249
// SetBName ( base_dep , name ) ;
38235: LD_VAR 0 1
38239: PPUSH
38240: LD_VAR 0 3
38244: PPUSH
38245: CALL_OW 500
// base := GetBase ( base_dep ) ;
38249: LD_ADDR_VAR 0 15
38253: PUSH
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 274
38263: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38264: LD_ADDR_VAR 0 16
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 255
38278: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38279: LD_ADDR_VAR 0 17
38283: PUSH
38284: LD_VAR 0 1
38288: PPUSH
38289: CALL_OW 248
38293: ST_TO_ADDR
// if sources then
38294: LD_VAR 0 5
38298: IFFALSE 38345
// for i = 1 to 3 do
38300: LD_ADDR_VAR 0 8
38304: PUSH
38305: DOUBLE
38306: LD_INT 1
38308: DEC
38309: ST_TO_ADDR
38310: LD_INT 3
38312: PUSH
38313: FOR_TO
38314: IFFALSE 38343
// AddResourceType ( base , i , sources [ i ] ) ;
38316: LD_VAR 0 15
38320: PPUSH
38321: LD_VAR 0 8
38325: PPUSH
38326: LD_VAR 0 5
38330: PUSH
38331: LD_VAR 0 8
38335: ARRAY
38336: PPUSH
38337: CALL_OW 276
38341: GO 38313
38343: POP
38344: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38345: LD_ADDR_VAR 0 18
38349: PUSH
38350: LD_VAR 0 15
38354: PPUSH
38355: LD_VAR 0 2
38359: PPUSH
38360: LD_INT 1
38362: PPUSH
38363: CALL 37604 0 3
38367: ST_TO_ADDR
// InitHc ;
38368: CALL_OW 19
// InitUc ;
38372: CALL_OW 18
// uc_side := side ;
38376: LD_ADDR_OWVAR 20
38380: PUSH
38381: LD_VAR 0 16
38385: ST_TO_ADDR
// uc_nation := nation ;
38386: LD_ADDR_OWVAR 21
38390: PUSH
38391: LD_VAR 0 17
38395: ST_TO_ADDR
// if buildings then
38396: LD_VAR 0 18
38400: IFFALSE 39728
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38402: LD_ADDR_VAR 0 19
38406: PUSH
38407: LD_VAR 0 18
38411: PPUSH
38412: LD_INT 2
38414: PUSH
38415: LD_INT 30
38417: PUSH
38418: LD_INT 29
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 30
38427: PUSH
38428: LD_INT 30
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: PPUSH
38440: CALL_OW 72
38444: ST_TO_ADDR
// if tmp then
38445: LD_VAR 0 19
38449: IFFALSE 38497
// for i in tmp do
38451: LD_ADDR_VAR 0 8
38455: PUSH
38456: LD_VAR 0 19
38460: PUSH
38461: FOR_IN
38462: IFFALSE 38495
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38464: LD_VAR 0 8
38468: PPUSH
38469: CALL_OW 250
38473: PPUSH
38474: LD_VAR 0 8
38478: PPUSH
38479: CALL_OW 251
38483: PPUSH
38484: LD_VAR 0 16
38488: PPUSH
38489: CALL_OW 441
38493: GO 38461
38495: POP
38496: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38497: LD_VAR 0 18
38501: PPUSH
38502: LD_INT 2
38504: PUSH
38505: LD_INT 30
38507: PUSH
38508: LD_INT 32
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 30
38517: PUSH
38518: LD_INT 33
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: PPUSH
38530: CALL_OW 72
38534: IFFALSE 38622
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38536: LD_ADDR_VAR 0 8
38540: PUSH
38541: LD_VAR 0 18
38545: PPUSH
38546: LD_INT 2
38548: PUSH
38549: LD_INT 30
38551: PUSH
38552: LD_INT 32
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 30
38561: PUSH
38562: LD_INT 33
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: PPUSH
38574: CALL_OW 72
38578: PUSH
38579: FOR_IN
38580: IFFALSE 38620
// begin if not GetBWeapon ( i ) then
38582: LD_VAR 0 8
38586: PPUSH
38587: CALL_OW 269
38591: NOT
38592: IFFALSE 38618
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38594: LD_VAR 0 8
38598: PPUSH
38599: LD_VAR 0 8
38603: PPUSH
38604: LD_VAR 0 2
38608: PPUSH
38609: CALL 39874 0 2
38613: PPUSH
38614: CALL_OW 431
// end ;
38618: GO 38579
38620: POP
38621: POP
// end ; for i = 1 to personel do
38622: LD_ADDR_VAR 0 8
38626: PUSH
38627: DOUBLE
38628: LD_INT 1
38630: DEC
38631: ST_TO_ADDR
38632: LD_VAR 0 6
38636: PUSH
38637: FOR_TO
38638: IFFALSE 39708
// begin if i > 4 then
38640: LD_VAR 0 8
38644: PUSH
38645: LD_INT 4
38647: GREATER
38648: IFFALSE 38652
// break ;
38650: GO 39708
// case i of 1 :
38652: LD_VAR 0 8
38656: PUSH
38657: LD_INT 1
38659: DOUBLE
38660: EQUAL
38661: IFTRUE 38665
38663: GO 38745
38665: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38666: LD_ADDR_VAR 0 12
38670: PUSH
38671: LD_VAR 0 18
38675: PPUSH
38676: LD_INT 22
38678: PUSH
38679: LD_VAR 0 16
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 58
38690: PUSH
38691: EMPTY
38692: LIST
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: LD_INT 30
38699: PUSH
38700: LD_INT 32
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 30
38709: PUSH
38710: LD_INT 4
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 30
38719: PUSH
38720: LD_INT 5
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: PPUSH
38738: CALL_OW 72
38742: ST_TO_ADDR
38743: GO 38967
38745: LD_INT 2
38747: DOUBLE
38748: EQUAL
38749: IFTRUE 38753
38751: GO 38815
38753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38754: LD_ADDR_VAR 0 12
38758: PUSH
38759: LD_VAR 0 18
38763: PPUSH
38764: LD_INT 22
38766: PUSH
38767: LD_VAR 0 16
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: LD_INT 30
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 30
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PPUSH
38808: CALL_OW 72
38812: ST_TO_ADDR
38813: GO 38967
38815: LD_INT 3
38817: DOUBLE
38818: EQUAL
38819: IFTRUE 38823
38821: GO 38885
38823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38824: LD_ADDR_VAR 0 12
38828: PUSH
38829: LD_VAR 0 18
38833: PPUSH
38834: LD_INT 22
38836: PUSH
38837: LD_VAR 0 16
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: LD_INT 30
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 30
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: LIST
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PPUSH
38878: CALL_OW 72
38882: ST_TO_ADDR
38883: GO 38967
38885: LD_INT 4
38887: DOUBLE
38888: EQUAL
38889: IFTRUE 38893
38891: GO 38966
38893: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38894: LD_ADDR_VAR 0 12
38898: PUSH
38899: LD_VAR 0 18
38903: PPUSH
38904: LD_INT 22
38906: PUSH
38907: LD_VAR 0 16
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: LD_INT 30
38921: PUSH
38922: LD_INT 6
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 30
38931: PUSH
38932: LD_INT 7
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 30
38941: PUSH
38942: LD_INT 8
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PPUSH
38959: CALL_OW 72
38963: ST_TO_ADDR
38964: GO 38967
38966: POP
// if i = 1 then
38967: LD_VAR 0 8
38971: PUSH
38972: LD_INT 1
38974: EQUAL
38975: IFFALSE 39086
// begin tmp := [ ] ;
38977: LD_ADDR_VAR 0 19
38981: PUSH
38982: EMPTY
38983: ST_TO_ADDR
// for j in f do
38984: LD_ADDR_VAR 0 9
38988: PUSH
38989: LD_VAR 0 12
38993: PUSH
38994: FOR_IN
38995: IFFALSE 39068
// if GetBType ( j ) = b_bunker then
38997: LD_VAR 0 9
39001: PPUSH
39002: CALL_OW 266
39006: PUSH
39007: LD_INT 32
39009: EQUAL
39010: IFFALSE 39037
// tmp := Insert ( tmp , 1 , j ) else
39012: LD_ADDR_VAR 0 19
39016: PUSH
39017: LD_VAR 0 19
39021: PPUSH
39022: LD_INT 1
39024: PPUSH
39025: LD_VAR 0 9
39029: PPUSH
39030: CALL_OW 2
39034: ST_TO_ADDR
39035: GO 39066
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39037: LD_ADDR_VAR 0 19
39041: PUSH
39042: LD_VAR 0 19
39046: PPUSH
39047: LD_VAR 0 19
39051: PUSH
39052: LD_INT 1
39054: PLUS
39055: PPUSH
39056: LD_VAR 0 9
39060: PPUSH
39061: CALL_OW 2
39065: ST_TO_ADDR
39066: GO 38994
39068: POP
39069: POP
// if tmp then
39070: LD_VAR 0 19
39074: IFFALSE 39086
// f := tmp ;
39076: LD_ADDR_VAR 0 12
39080: PUSH
39081: LD_VAR 0 19
39085: ST_TO_ADDR
// end ; x := personel [ i ] ;
39086: LD_ADDR_VAR 0 13
39090: PUSH
39091: LD_VAR 0 6
39095: PUSH
39096: LD_VAR 0 8
39100: ARRAY
39101: ST_TO_ADDR
// if x = - 1 then
39102: LD_VAR 0 13
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: EQUAL
39111: IFFALSE 39322
// begin for j in f do
39113: LD_ADDR_VAR 0 9
39117: PUSH
39118: LD_VAR 0 12
39122: PUSH
39123: FOR_IN
39124: IFFALSE 39318
// repeat InitHc ;
39126: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39130: LD_VAR 0 9
39134: PPUSH
39135: CALL_OW 266
39139: PUSH
39140: LD_INT 5
39142: EQUAL
39143: IFFALSE 39213
// begin if UnitsInside ( j ) < 3 then
39145: LD_VAR 0 9
39149: PPUSH
39150: CALL_OW 313
39154: PUSH
39155: LD_INT 3
39157: LESS
39158: IFFALSE 39194
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39160: LD_INT 0
39162: PPUSH
39163: LD_INT 5
39165: PUSH
39166: LD_INT 8
39168: PUSH
39169: LD_INT 9
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: LIST
39176: PUSH
39177: LD_VAR 0 17
39181: ARRAY
39182: PPUSH
39183: LD_VAR 0 4
39187: PPUSH
39188: CALL_OW 380
39192: GO 39211
// PrepareHuman ( false , i , skill ) ;
39194: LD_INT 0
39196: PPUSH
39197: LD_VAR 0 8
39201: PPUSH
39202: LD_VAR 0 4
39206: PPUSH
39207: CALL_OW 380
// end else
39211: GO 39230
// PrepareHuman ( false , i , skill ) ;
39213: LD_INT 0
39215: PPUSH
39216: LD_VAR 0 8
39220: PPUSH
39221: LD_VAR 0 4
39225: PPUSH
39226: CALL_OW 380
// un := CreateHuman ;
39230: LD_ADDR_VAR 0 14
39234: PUSH
39235: CALL_OW 44
39239: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39240: LD_ADDR_VAR 0 7
39244: PUSH
39245: LD_VAR 0 7
39249: PPUSH
39250: LD_INT 1
39252: PPUSH
39253: LD_VAR 0 14
39257: PPUSH
39258: CALL_OW 2
39262: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39263: LD_VAR 0 14
39267: PPUSH
39268: LD_VAR 0 9
39272: PPUSH
39273: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39277: LD_VAR 0 9
39281: PPUSH
39282: CALL_OW 313
39286: PUSH
39287: LD_INT 6
39289: EQUAL
39290: IFTRUE 39314
39292: PUSH
39293: LD_VAR 0 9
39297: PPUSH
39298: CALL_OW 266
39302: PUSH
39303: LD_INT 32
39305: PUSH
39306: LD_INT 31
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: IN
39313: OR
39314: IFFALSE 39126
39316: GO 39123
39318: POP
39319: POP
// end else
39320: GO 39706
// for j = 1 to x do
39322: LD_ADDR_VAR 0 9
39326: PUSH
39327: DOUBLE
39328: LD_INT 1
39330: DEC
39331: ST_TO_ADDR
39332: LD_VAR 0 13
39336: PUSH
39337: FOR_TO
39338: IFFALSE 39704
// begin InitHc ;
39340: CALL_OW 19
// if not f then
39344: LD_VAR 0 12
39348: NOT
39349: IFFALSE 39438
// begin PrepareHuman ( false , i , skill ) ;
39351: LD_INT 0
39353: PPUSH
39354: LD_VAR 0 8
39358: PPUSH
39359: LD_VAR 0 4
39363: PPUSH
39364: CALL_OW 380
// un := CreateHuman ;
39368: LD_ADDR_VAR 0 14
39372: PUSH
39373: CALL_OW 44
39377: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39378: LD_ADDR_VAR 0 7
39382: PUSH
39383: LD_VAR 0 7
39387: PPUSH
39388: LD_INT 1
39390: PPUSH
39391: LD_VAR 0 14
39395: PPUSH
39396: CALL_OW 2
39400: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39401: LD_VAR 0 14
39405: PPUSH
39406: LD_VAR 0 1
39410: PPUSH
39411: CALL_OW 250
39415: PPUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: CALL_OW 251
39425: PPUSH
39426: LD_INT 10
39428: PPUSH
39429: LD_INT 0
39431: PPUSH
39432: CALL_OW 50
// continue ;
39436: GO 39337
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39438: LD_VAR 0 12
39442: PUSH
39443: LD_INT 1
39445: ARRAY
39446: PPUSH
39447: CALL_OW 313
39451: IFFALSE 39479
39453: PUSH
39454: LD_VAR 0 12
39458: PUSH
39459: LD_INT 1
39461: ARRAY
39462: PPUSH
39463: CALL_OW 266
39467: PUSH
39468: LD_INT 32
39470: PUSH
39471: LD_INT 31
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: IN
39478: AND
39479: IFTRUE 39500
39481: PUSH
39482: LD_VAR 0 12
39486: PUSH
39487: LD_INT 1
39489: ARRAY
39490: PPUSH
39491: CALL_OW 313
39495: PUSH
39496: LD_INT 6
39498: EQUAL
39499: OR
39500: IFFALSE 39520
// f := Delete ( f , 1 ) ;
39502: LD_ADDR_VAR 0 12
39506: PUSH
39507: LD_VAR 0 12
39511: PPUSH
39512: LD_INT 1
39514: PPUSH
39515: CALL_OW 3
39519: ST_TO_ADDR
// if not f then
39520: LD_VAR 0 12
39524: NOT
39525: IFFALSE 39543
// begin x := x + 2 ;
39527: LD_ADDR_VAR 0 13
39531: PUSH
39532: LD_VAR 0 13
39536: PUSH
39537: LD_INT 2
39539: PLUS
39540: ST_TO_ADDR
// continue ;
39541: GO 39337
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39543: LD_VAR 0 12
39547: PUSH
39548: LD_INT 1
39550: ARRAY
39551: PPUSH
39552: CALL_OW 266
39556: PUSH
39557: LD_INT 5
39559: EQUAL
39560: IFFALSE 39634
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39562: LD_VAR 0 12
39566: PUSH
39567: LD_INT 1
39569: ARRAY
39570: PPUSH
39571: CALL_OW 313
39575: PUSH
39576: LD_INT 3
39578: LESS
39579: IFFALSE 39615
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39581: LD_INT 0
39583: PPUSH
39584: LD_INT 5
39586: PUSH
39587: LD_INT 8
39589: PUSH
39590: LD_INT 9
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: PUSH
39598: LD_VAR 0 17
39602: ARRAY
39603: PPUSH
39604: LD_VAR 0 4
39608: PPUSH
39609: CALL_OW 380
39613: GO 39632
// PrepareHuman ( false , i , skill ) ;
39615: LD_INT 0
39617: PPUSH
39618: LD_VAR 0 8
39622: PPUSH
39623: LD_VAR 0 4
39627: PPUSH
39628: CALL_OW 380
// end else
39632: GO 39651
// PrepareHuman ( false , i , skill ) ;
39634: LD_INT 0
39636: PPUSH
39637: LD_VAR 0 8
39641: PPUSH
39642: LD_VAR 0 4
39646: PPUSH
39647: CALL_OW 380
// un := CreateHuman ;
39651: LD_ADDR_VAR 0 14
39655: PUSH
39656: CALL_OW 44
39660: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39661: LD_ADDR_VAR 0 7
39665: PUSH
39666: LD_VAR 0 7
39670: PPUSH
39671: LD_INT 1
39673: PPUSH
39674: LD_VAR 0 14
39678: PPUSH
39679: CALL_OW 2
39683: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39684: LD_VAR 0 14
39688: PPUSH
39689: LD_VAR 0 12
39693: PUSH
39694: LD_INT 1
39696: ARRAY
39697: PPUSH
39698: CALL_OW 52
// end ;
39702: GO 39337
39704: POP
39705: POP
// end ;
39706: GO 38637
39708: POP
39709: POP
// result := result ^ buildings ;
39710: LD_ADDR_VAR 0 7
39714: PUSH
39715: LD_VAR 0 7
39719: PUSH
39720: LD_VAR 0 18
39724: ADD
39725: ST_TO_ADDR
// end else
39726: GO 39869
// begin for i = 1 to personel do
39728: LD_ADDR_VAR 0 8
39732: PUSH
39733: DOUBLE
39734: LD_INT 1
39736: DEC
39737: ST_TO_ADDR
39738: LD_VAR 0 6
39742: PUSH
39743: FOR_TO
39744: IFFALSE 39867
// begin if i > 4 then
39746: LD_VAR 0 8
39750: PUSH
39751: LD_INT 4
39753: GREATER
39754: IFFALSE 39758
// break ;
39756: GO 39867
// x := personel [ i ] ;
39758: LD_ADDR_VAR 0 13
39762: PUSH
39763: LD_VAR 0 6
39767: PUSH
39768: LD_VAR 0 8
39772: ARRAY
39773: ST_TO_ADDR
// if x = - 1 then
39774: LD_VAR 0 13
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: EQUAL
39783: IFFALSE 39787
// continue ;
39785: GO 39743
// PrepareHuman ( false , i , skill ) ;
39787: LD_INT 0
39789: PPUSH
39790: LD_VAR 0 8
39794: PPUSH
39795: LD_VAR 0 4
39799: PPUSH
39800: CALL_OW 380
// un := CreateHuman ;
39804: LD_ADDR_VAR 0 14
39808: PUSH
39809: CALL_OW 44
39813: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39814: LD_VAR 0 14
39818: PPUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 250
39828: PPUSH
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 251
39838: PPUSH
39839: LD_INT 10
39841: PPUSH
39842: LD_INT 0
39844: PPUSH
39845: CALL_OW 50
// result := result ^ un ;
39849: LD_ADDR_VAR 0 7
39853: PUSH
39854: LD_VAR 0 7
39858: PUSH
39859: LD_VAR 0 14
39863: ADD
39864: ST_TO_ADDR
// end ;
39865: GO 39743
39867: POP
39868: POP
// end ; end ;
39869: LD_VAR 0 7
39873: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39874: LD_INT 0
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
// result := false ;
39892: LD_ADDR_VAR 0 3
39896: PUSH
39897: LD_INT 0
39899: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39900: LD_VAR 0 1
39904: NOT
39905: IFTRUE 39930
39907: PUSH
39908: LD_VAR 0 1
39912: PPUSH
39913: CALL_OW 266
39917: PUSH
39918: LD_INT 32
39920: PUSH
39921: LD_INT 33
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: IN
39928: NOT
39929: OR
39930: IFFALSE 39934
// exit ;
39932: GO 41069
// nat := GetNation ( tower ) ;
39934: LD_ADDR_VAR 0 12
39938: PUSH
39939: LD_VAR 0 1
39943: PPUSH
39944: CALL_OW 248
39948: ST_TO_ADDR
// side := GetSide ( tower ) ;
39949: LD_ADDR_VAR 0 16
39953: PUSH
39954: LD_VAR 0 1
39958: PPUSH
39959: CALL_OW 255
39963: ST_TO_ADDR
// x := GetX ( tower ) ;
39964: LD_ADDR_VAR 0 10
39968: PUSH
39969: LD_VAR 0 1
39973: PPUSH
39974: CALL_OW 250
39978: ST_TO_ADDR
// y := GetY ( tower ) ;
39979: LD_ADDR_VAR 0 11
39983: PUSH
39984: LD_VAR 0 1
39988: PPUSH
39989: CALL_OW 251
39993: ST_TO_ADDR
// if not x or not y then
39994: LD_VAR 0 10
39998: NOT
39999: IFTRUE 40008
40001: PUSH
40002: LD_VAR 0 11
40006: NOT
40007: OR
40008: IFFALSE 40012
// exit ;
40010: GO 41069
// weapon := 0 ;
40012: LD_ADDR_VAR 0 18
40016: PUSH
40017: LD_INT 0
40019: ST_TO_ADDR
// fac_list := [ ] ;
40020: LD_ADDR_VAR 0 17
40024: PUSH
40025: EMPTY
40026: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40027: LD_ADDR_VAR 0 6
40031: PUSH
40032: LD_VAR 0 1
40036: PPUSH
40037: CALL_OW 274
40041: PPUSH
40042: LD_VAR 0 2
40046: PPUSH
40047: LD_INT 0
40049: PPUSH
40050: CALL 37604 0 3
40054: PPUSH
40055: LD_INT 30
40057: PUSH
40058: LD_INT 3
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PPUSH
40065: CALL_OW 72
40069: ST_TO_ADDR
// if not factories then
40070: LD_VAR 0 6
40074: NOT
40075: IFFALSE 40079
// exit ;
40077: GO 41069
// for i in factories do
40079: LD_ADDR_VAR 0 8
40083: PUSH
40084: LD_VAR 0 6
40088: PUSH
40089: FOR_IN
40090: IFFALSE 40115
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40092: LD_ADDR_VAR 0 17
40096: PUSH
40097: LD_VAR 0 17
40101: PUSH
40102: LD_VAR 0 8
40106: PPUSH
40107: CALL_OW 478
40111: UNION
40112: ST_TO_ADDR
40113: GO 40089
40115: POP
40116: POP
// if not fac_list then
40117: LD_VAR 0 17
40121: NOT
40122: IFFALSE 40126
// exit ;
40124: GO 41069
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40126: LD_ADDR_VAR 0 5
40130: PUSH
40131: LD_INT 4
40133: PUSH
40134: LD_INT 5
40136: PUSH
40137: LD_INT 9
40139: PUSH
40140: LD_INT 10
40142: PUSH
40143: LD_INT 6
40145: PUSH
40146: LD_INT 7
40148: PUSH
40149: LD_INT 11
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 27
40163: PUSH
40164: LD_INT 28
40166: PUSH
40167: LD_INT 26
40169: PUSH
40170: LD_INT 30
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 43
40181: PUSH
40182: LD_INT 44
40184: PUSH
40185: LD_INT 46
40187: PUSH
40188: LD_INT 45
40190: PUSH
40191: LD_INT 47
40193: PUSH
40194: LD_INT 49
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: PUSH
40210: LD_VAR 0 12
40214: ARRAY
40215: ST_TO_ADDR
// list := list isect fac_list ;
40216: LD_ADDR_VAR 0 5
40220: PUSH
40221: LD_VAR 0 5
40225: PUSH
40226: LD_VAR 0 17
40230: ISECT
40231: ST_TO_ADDR
// if not list then
40232: LD_VAR 0 5
40236: NOT
40237: IFFALSE 40241
// exit ;
40239: GO 41069
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40241: LD_VAR 0 12
40245: PUSH
40246: LD_INT 3
40248: EQUAL
40249: IFFALSE 40261
40251: PUSH
40252: LD_INT 49
40254: PUSH
40255: LD_VAR 0 5
40259: IN
40260: AND
40261: IFFALSE 40281
40263: PUSH
40264: LD_INT 31
40266: PPUSH
40267: LD_VAR 0 16
40271: PPUSH
40272: CALL_OW 321
40276: PUSH
40277: LD_INT 2
40279: EQUAL
40280: AND
40281: IFFALSE 40341
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40283: LD_INT 22
40285: PUSH
40286: LD_VAR 0 16
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 35
40297: PUSH
40298: LD_INT 49
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 91
40307: PUSH
40308: LD_VAR 0 1
40312: PUSH
40313: LD_INT 10
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: PPUSH
40326: CALL_OW 69
40330: NOT
40331: IFFALSE 40341
// weapon := ru_time_lapser ;
40333: LD_ADDR_VAR 0 18
40337: PUSH
40338: LD_INT 49
40340: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40341: LD_VAR 0 12
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: IN
40356: IFFALSE 40380
40358: PUSH
40359: LD_INT 11
40361: PUSH
40362: LD_VAR 0 5
40366: IN
40367: IFTRUE 40379
40369: PUSH
40370: LD_INT 30
40372: PUSH
40373: LD_VAR 0 5
40377: IN
40378: OR
40379: AND
40380: IFFALSE 40400
40382: PUSH
40383: LD_INT 6
40385: PPUSH
40386: LD_VAR 0 16
40390: PPUSH
40391: CALL_OW 321
40395: PUSH
40396: LD_INT 2
40398: EQUAL
40399: AND
40400: IFFALSE 40567
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40402: LD_INT 22
40404: PUSH
40405: LD_VAR 0 16
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 35
40419: PUSH
40420: LD_INT 11
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 35
40429: PUSH
40430: LD_INT 30
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 91
40444: PUSH
40445: LD_VAR 0 1
40449: PUSH
40450: LD_INT 18
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: PPUSH
40463: CALL_OW 69
40467: NOT
40468: IFFALSE 40544
40470: PUSH
40471: LD_INT 22
40473: PUSH
40474: LD_VAR 0 16
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: LD_INT 30
40488: PUSH
40489: LD_INT 32
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 30
40498: PUSH
40499: LD_INT 33
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 91
40513: PUSH
40514: LD_VAR 0 1
40518: PUSH
40519: LD_INT 12
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: LIST
40531: PUSH
40532: EMPTY
40533: LIST
40534: PPUSH
40535: CALL_OW 69
40539: PUSH
40540: LD_INT 2
40542: GREATER
40543: AND
40544: IFFALSE 40567
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40546: LD_ADDR_VAR 0 18
40550: PUSH
40551: LD_INT 11
40553: PUSH
40554: LD_INT 30
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_VAR 0 12
40565: ARRAY
40566: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40567: LD_VAR 0 18
40571: NOT
40572: IFFALSE 40592
40574: PUSH
40575: LD_INT 40
40577: PPUSH
40578: LD_VAR 0 16
40582: PPUSH
40583: CALL_OW 321
40587: PUSH
40588: LD_INT 2
40590: EQUAL
40591: AND
40592: IFFALSE 40628
40594: PUSH
40595: LD_INT 7
40597: PUSH
40598: LD_VAR 0 5
40602: IN
40603: IFTRUE 40615
40605: PUSH
40606: LD_INT 28
40608: PUSH
40609: LD_VAR 0 5
40613: IN
40614: OR
40615: IFTRUE 40627
40617: PUSH
40618: LD_INT 45
40620: PUSH
40621: LD_VAR 0 5
40625: IN
40626: OR
40627: AND
40628: IFFALSE 40882
// begin hex := GetHexInfo ( x , y ) ;
40630: LD_ADDR_VAR 0 4
40634: PUSH
40635: LD_VAR 0 10
40639: PPUSH
40640: LD_VAR 0 11
40644: PPUSH
40645: CALL_OW 546
40649: ST_TO_ADDR
// if hex [ 1 ] then
40650: LD_VAR 0 4
40654: PUSH
40655: LD_INT 1
40657: ARRAY
40658: IFFALSE 40662
// exit ;
40660: GO 41069
// height := hex [ 2 ] ;
40662: LD_ADDR_VAR 0 15
40666: PUSH
40667: LD_VAR 0 4
40671: PUSH
40672: LD_INT 2
40674: ARRAY
40675: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40676: LD_ADDR_VAR 0 14
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: LD_INT 5
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: ST_TO_ADDR
// for i in tmp do
40699: LD_ADDR_VAR 0 8
40703: PUSH
40704: LD_VAR 0 14
40708: PUSH
40709: FOR_IN
40710: IFFALSE 40880
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40712: LD_ADDR_VAR 0 9
40716: PUSH
40717: LD_VAR 0 10
40721: PPUSH
40722: LD_VAR 0 8
40726: PPUSH
40727: LD_INT 5
40729: PPUSH
40730: CALL_OW 272
40734: PUSH
40735: LD_VAR 0 11
40739: PPUSH
40740: LD_VAR 0 8
40744: PPUSH
40745: LD_INT 5
40747: PPUSH
40748: CALL_OW 273
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40757: LD_VAR 0 9
40761: PUSH
40762: LD_INT 1
40764: ARRAY
40765: PPUSH
40766: LD_VAR 0 9
40770: PUSH
40771: LD_INT 2
40773: ARRAY
40774: PPUSH
40775: CALL_OW 488
40779: IFFALSE 40878
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40781: LD_ADDR_VAR 0 4
40785: PUSH
40786: LD_VAR 0 9
40790: PUSH
40791: LD_INT 1
40793: ARRAY
40794: PPUSH
40795: LD_VAR 0 9
40799: PUSH
40800: LD_INT 2
40802: ARRAY
40803: PPUSH
40804: CALL_OW 546
40808: ST_TO_ADDR
// if hex [ 1 ] then
40809: LD_VAR 0 4
40813: PUSH
40814: LD_INT 1
40816: ARRAY
40817: IFFALSE 40821
// continue ;
40819: GO 40709
// h := hex [ 2 ] ;
40821: LD_ADDR_VAR 0 13
40825: PUSH
40826: LD_VAR 0 4
40830: PUSH
40831: LD_INT 2
40833: ARRAY
40834: ST_TO_ADDR
// if h + 7 < height then
40835: LD_VAR 0 13
40839: PUSH
40840: LD_INT 7
40842: PLUS
40843: PUSH
40844: LD_VAR 0 15
40848: LESS
40849: IFFALSE 40878
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40851: LD_ADDR_VAR 0 18
40855: PUSH
40856: LD_INT 7
40858: PUSH
40859: LD_INT 28
40861: PUSH
40862: LD_INT 45
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: LIST
40869: PUSH
40870: LD_VAR 0 12
40874: ARRAY
40875: ST_TO_ADDR
// break ;
40876: GO 40880
// end ; end ; end ;
40878: GO 40709
40880: POP
40881: POP
// end ; if not weapon then
40882: LD_VAR 0 18
40886: NOT
40887: IFFALSE 40947
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40889: LD_ADDR_VAR 0 5
40893: PUSH
40894: LD_VAR 0 5
40898: PUSH
40899: LD_INT 11
40901: PUSH
40902: LD_INT 30
40904: PUSH
40905: LD_INT 49
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: DIFF
40913: ST_TO_ADDR
// if not list then
40914: LD_VAR 0 5
40918: NOT
40919: IFFALSE 40923
// exit ;
40921: GO 41069
// weapon := list [ rand ( 1 , list ) ] ;
40923: LD_ADDR_VAR 0 18
40927: PUSH
40928: LD_VAR 0 5
40932: PUSH
40933: LD_INT 1
40935: PPUSH
40936: LD_VAR 0 5
40940: PPUSH
40941: CALL_OW 12
40945: ARRAY
40946: ST_TO_ADDR
// end ; if weapon then
40947: LD_VAR 0 18
40951: IFFALSE 41069
// begin tmp := CostOfWeapon ( weapon ) ;
40953: LD_ADDR_VAR 0 14
40957: PUSH
40958: LD_VAR 0 18
40962: PPUSH
40963: CALL_OW 451
40967: ST_TO_ADDR
// j := GetBase ( tower ) ;
40968: LD_ADDR_VAR 0 9
40972: PUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 274
40982: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40983: LD_VAR 0 9
40987: PPUSH
40988: LD_INT 1
40990: PPUSH
40991: CALL_OW 275
40995: PUSH
40996: LD_VAR 0 14
41000: PUSH
41001: LD_INT 1
41003: ARRAY
41004: GREATEREQUAL
41005: IFFALSE 41031
41007: PUSH
41008: LD_VAR 0 9
41012: PPUSH
41013: LD_INT 2
41015: PPUSH
41016: CALL_OW 275
41020: PUSH
41021: LD_VAR 0 14
41025: PUSH
41026: LD_INT 2
41028: ARRAY
41029: GREATEREQUAL
41030: AND
41031: IFFALSE 41057
41033: PUSH
41034: LD_VAR 0 9
41038: PPUSH
41039: LD_INT 3
41041: PPUSH
41042: CALL_OW 275
41046: PUSH
41047: LD_VAR 0 14
41051: PUSH
41052: LD_INT 3
41054: ARRAY
41055: GREATEREQUAL
41056: AND
41057: IFFALSE 41069
// result := weapon ;
41059: LD_ADDR_VAR 0 3
41063: PUSH
41064: LD_VAR 0 18
41068: ST_TO_ADDR
// end ; end ;
41069: LD_VAR 0 3
41073: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41074: LD_INT 0
41076: PPUSH
41077: PPUSH
// result := true ;
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_INT 1
41085: ST_TO_ADDR
// if array1 = array2 then
41086: LD_VAR 0 1
41090: PUSH
41091: LD_VAR 0 2
41095: EQUAL
41096: IFFALSE 41156
// begin for i = 1 to array1 do
41098: LD_ADDR_VAR 0 4
41102: PUSH
41103: DOUBLE
41104: LD_INT 1
41106: DEC
41107: ST_TO_ADDR
41108: LD_VAR 0 1
41112: PUSH
41113: FOR_TO
41114: IFFALSE 41152
// if array1 [ i ] <> array2 [ i ] then
41116: LD_VAR 0 1
41120: PUSH
41121: LD_VAR 0 4
41125: ARRAY
41126: PUSH
41127: LD_VAR 0 2
41131: PUSH
41132: LD_VAR 0 4
41136: ARRAY
41137: NONEQUAL
41138: IFFALSE 41150
// begin result := false ;
41140: LD_ADDR_VAR 0 3
41144: PUSH
41145: LD_INT 0
41147: ST_TO_ADDR
// break ;
41148: GO 41152
// end ;
41150: GO 41113
41152: POP
41153: POP
// end else
41154: GO 41164
// result := false ;
41156: LD_ADDR_VAR 0 3
41160: PUSH
41161: LD_INT 0
41163: ST_TO_ADDR
// end ;
41164: LD_VAR 0 3
41168: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41169: LD_INT 0
41171: PPUSH
41172: PPUSH
// if not array1 or not array2 then
41173: LD_VAR 0 1
41177: NOT
41178: IFTRUE 41187
41180: PUSH
41181: LD_VAR 0 2
41185: NOT
41186: OR
41187: IFFALSE 41191
// exit ;
41189: GO 41255
// result := true ;
41191: LD_ADDR_VAR 0 3
41195: PUSH
41196: LD_INT 1
41198: ST_TO_ADDR
// for i = 1 to array1 do
41199: LD_ADDR_VAR 0 4
41203: PUSH
41204: DOUBLE
41205: LD_INT 1
41207: DEC
41208: ST_TO_ADDR
41209: LD_VAR 0 1
41213: PUSH
41214: FOR_TO
41215: IFFALSE 41253
// if array1 [ i ] <> array2 [ i ] then
41217: LD_VAR 0 1
41221: PUSH
41222: LD_VAR 0 4
41226: ARRAY
41227: PUSH
41228: LD_VAR 0 2
41232: PUSH
41233: LD_VAR 0 4
41237: ARRAY
41238: NONEQUAL
41239: IFFALSE 41251
// begin result := false ;
41241: LD_ADDR_VAR 0 3
41245: PUSH
41246: LD_INT 0
41248: ST_TO_ADDR
// break ;
41249: GO 41253
// end ;
41251: GO 41214
41253: POP
41254: POP
// end ;
41255: LD_VAR 0 3
41259: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41260: LD_INT 0
41262: PPUSH
41263: PPUSH
41264: PPUSH
// pom := GetBase ( fac ) ;
41265: LD_ADDR_VAR 0 5
41269: PUSH
41270: LD_VAR 0 1
41274: PPUSH
41275: CALL_OW 274
41279: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41280: LD_ADDR_VAR 0 4
41284: PUSH
41285: LD_VAR 0 2
41289: PUSH
41290: LD_INT 1
41292: ARRAY
41293: PPUSH
41294: LD_VAR 0 2
41298: PUSH
41299: LD_INT 2
41301: ARRAY
41302: PPUSH
41303: LD_VAR 0 2
41307: PUSH
41308: LD_INT 3
41310: ARRAY
41311: PPUSH
41312: LD_VAR 0 2
41316: PUSH
41317: LD_INT 4
41319: ARRAY
41320: PPUSH
41321: CALL_OW 449
41325: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41326: LD_ADDR_VAR 0 3
41330: PUSH
41331: LD_VAR 0 5
41335: PPUSH
41336: LD_INT 1
41338: PPUSH
41339: CALL_OW 275
41343: PUSH
41344: LD_VAR 0 4
41348: PUSH
41349: LD_INT 1
41351: ARRAY
41352: GREATEREQUAL
41353: IFFALSE 41379
41355: PUSH
41356: LD_VAR 0 5
41360: PPUSH
41361: LD_INT 2
41363: PPUSH
41364: CALL_OW 275
41368: PUSH
41369: LD_VAR 0 4
41373: PUSH
41374: LD_INT 2
41376: ARRAY
41377: GREATEREQUAL
41378: AND
41379: IFFALSE 41405
41381: PUSH
41382: LD_VAR 0 5
41386: PPUSH
41387: LD_INT 3
41389: PPUSH
41390: CALL_OW 275
41394: PUSH
41395: LD_VAR 0 4
41399: PUSH
41400: LD_INT 3
41402: ARRAY
41403: GREATEREQUAL
41404: AND
41405: ST_TO_ADDR
// end ;
41406: LD_VAR 0 3
41410: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41411: LD_INT 0
41413: PPUSH
41414: PPUSH
41415: PPUSH
41416: PPUSH
// pom := GetBase ( building ) ;
41417: LD_ADDR_VAR 0 3
41421: PUSH
41422: LD_VAR 0 1
41426: PPUSH
41427: CALL_OW 274
41431: ST_TO_ADDR
// if not pom then
41432: LD_VAR 0 3
41436: NOT
41437: IFFALSE 41441
// exit ;
41439: GO 41615
// btype := GetBType ( building ) ;
41441: LD_ADDR_VAR 0 5
41445: PUSH
41446: LD_VAR 0 1
41450: PPUSH
41451: CALL_OW 266
41455: ST_TO_ADDR
// if btype = b_armoury then
41456: LD_VAR 0 5
41460: PUSH
41461: LD_INT 4
41463: EQUAL
41464: IFFALSE 41474
// btype := b_barracks ;
41466: LD_ADDR_VAR 0 5
41470: PUSH
41471: LD_INT 5
41473: ST_TO_ADDR
// if btype = b_depot then
41474: LD_VAR 0 5
41478: PUSH
41479: LD_INT 0
41481: EQUAL
41482: IFFALSE 41492
// btype := b_warehouse ;
41484: LD_ADDR_VAR 0 5
41488: PUSH
41489: LD_INT 1
41491: ST_TO_ADDR
// if btype = b_workshop then
41492: LD_VAR 0 5
41496: PUSH
41497: LD_INT 2
41499: EQUAL
41500: IFFALSE 41510
// btype := b_factory ;
41502: LD_ADDR_VAR 0 5
41506: PUSH
41507: LD_INT 3
41509: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41510: LD_ADDR_VAR 0 4
41514: PUSH
41515: LD_VAR 0 5
41519: PPUSH
41520: LD_VAR 0 1
41524: PPUSH
41525: CALL_OW 248
41529: PPUSH
41530: CALL_OW 450
41534: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41535: LD_ADDR_VAR 0 2
41539: PUSH
41540: LD_VAR 0 3
41544: PPUSH
41545: LD_INT 1
41547: PPUSH
41548: CALL_OW 275
41552: PUSH
41553: LD_VAR 0 4
41557: PUSH
41558: LD_INT 1
41560: ARRAY
41561: GREATEREQUAL
41562: IFFALSE 41588
41564: PUSH
41565: LD_VAR 0 3
41569: PPUSH
41570: LD_INT 2
41572: PPUSH
41573: CALL_OW 275
41577: PUSH
41578: LD_VAR 0 4
41582: PUSH
41583: LD_INT 2
41585: ARRAY
41586: GREATEREQUAL
41587: AND
41588: IFFALSE 41614
41590: PUSH
41591: LD_VAR 0 3
41595: PPUSH
41596: LD_INT 3
41598: PPUSH
41599: CALL_OW 275
41603: PUSH
41604: LD_VAR 0 4
41608: PUSH
41609: LD_INT 3
41611: ARRAY
41612: GREATEREQUAL
41613: AND
41614: ST_TO_ADDR
// end ;
41615: LD_VAR 0 2
41619: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41620: LD_INT 0
41622: PPUSH
41623: PPUSH
41624: PPUSH
// pom := GetBase ( building ) ;
41625: LD_ADDR_VAR 0 4
41629: PUSH
41630: LD_VAR 0 1
41634: PPUSH
41635: CALL_OW 274
41639: ST_TO_ADDR
// if not pom then
41640: LD_VAR 0 4
41644: NOT
41645: IFFALSE 41649
// exit ;
41647: GO 41754
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41649: LD_ADDR_VAR 0 5
41653: PUSH
41654: LD_VAR 0 2
41658: PPUSH
41659: LD_VAR 0 1
41663: PPUSH
41664: CALL_OW 248
41668: PPUSH
41669: CALL_OW 450
41673: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41674: LD_ADDR_VAR 0 3
41678: PUSH
41679: LD_VAR 0 4
41683: PPUSH
41684: LD_INT 1
41686: PPUSH
41687: CALL_OW 275
41691: PUSH
41692: LD_VAR 0 5
41696: PUSH
41697: LD_INT 1
41699: ARRAY
41700: GREATEREQUAL
41701: IFFALSE 41727
41703: PUSH
41704: LD_VAR 0 4
41708: PPUSH
41709: LD_INT 2
41711: PPUSH
41712: CALL_OW 275
41716: PUSH
41717: LD_VAR 0 5
41721: PUSH
41722: LD_INT 2
41724: ARRAY
41725: GREATEREQUAL
41726: AND
41727: IFFALSE 41753
41729: PUSH
41730: LD_VAR 0 4
41734: PPUSH
41735: LD_INT 3
41737: PPUSH
41738: CALL_OW 275
41742: PUSH
41743: LD_VAR 0 5
41747: PUSH
41748: LD_INT 3
41750: ARRAY
41751: GREATEREQUAL
41752: AND
41753: ST_TO_ADDR
// end ;
41754: LD_VAR 0 3
41758: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41759: LD_INT 0
41761: PPUSH
41762: PPUSH
41763: PPUSH
41764: PPUSH
41765: PPUSH
41766: PPUSH
41767: PPUSH
41768: PPUSH
41769: PPUSH
41770: PPUSH
41771: PPUSH
// result := false ;
41772: LD_ADDR_VAR 0 8
41776: PUSH
41777: LD_INT 0
41779: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41780: LD_VAR 0 5
41784: NOT
41785: IFTRUE 41794
41787: PUSH
41788: LD_VAR 0 1
41792: NOT
41793: OR
41794: IFTRUE 41803
41796: PUSH
41797: LD_VAR 0 2
41801: NOT
41802: OR
41803: IFTRUE 41812
41805: PUSH
41806: LD_VAR 0 3
41810: NOT
41811: OR
41812: IFFALSE 41816
// exit ;
41814: GO 42642
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41816: LD_ADDR_VAR 0 14
41820: PUSH
41821: LD_VAR 0 1
41825: PPUSH
41826: LD_VAR 0 2
41830: PPUSH
41831: LD_VAR 0 3
41835: PPUSH
41836: LD_VAR 0 4
41840: PPUSH
41841: LD_VAR 0 5
41845: PUSH
41846: LD_INT 1
41848: ARRAY
41849: PPUSH
41850: CALL_OW 248
41854: PPUSH
41855: LD_INT 0
41857: PPUSH
41858: CALL 43923 0 6
41862: ST_TO_ADDR
// if not hexes then
41863: LD_VAR 0 14
41867: NOT
41868: IFFALSE 41872
// exit ;
41870: GO 42642
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41872: LD_ADDR_VAR 0 17
41876: PUSH
41877: LD_VAR 0 5
41881: PPUSH
41882: LD_INT 22
41884: PUSH
41885: LD_VAR 0 13
41889: PPUSH
41890: CALL_OW 255
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 30
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 30
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: LIST
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PPUSH
41931: CALL_OW 72
41935: ST_TO_ADDR
// for i = 1 to hexes do
41936: LD_ADDR_VAR 0 9
41940: PUSH
41941: DOUBLE
41942: LD_INT 1
41944: DEC
41945: ST_TO_ADDR
41946: LD_VAR 0 14
41950: PUSH
41951: FOR_TO
41952: IFFALSE 42640
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41954: LD_ADDR_VAR 0 13
41958: PUSH
41959: LD_VAR 0 14
41963: PUSH
41964: LD_VAR 0 9
41968: ARRAY
41969: PUSH
41970: LD_INT 1
41972: ARRAY
41973: PPUSH
41974: LD_VAR 0 14
41978: PUSH
41979: LD_VAR 0 9
41983: ARRAY
41984: PUSH
41985: LD_INT 2
41987: ARRAY
41988: PPUSH
41989: CALL_OW 428
41993: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41994: LD_VAR 0 14
41998: PUSH
41999: LD_VAR 0 9
42003: ARRAY
42004: PUSH
42005: LD_INT 1
42007: ARRAY
42008: PPUSH
42009: LD_VAR 0 14
42013: PUSH
42014: LD_VAR 0 9
42018: ARRAY
42019: PUSH
42020: LD_INT 2
42022: ARRAY
42023: PPUSH
42024: CALL_OW 351
42028: IFTRUE 42067
42030: PUSH
42031: LD_VAR 0 14
42035: PUSH
42036: LD_VAR 0 9
42040: ARRAY
42041: PUSH
42042: LD_INT 1
42044: ARRAY
42045: PPUSH
42046: LD_VAR 0 14
42050: PUSH
42051: LD_VAR 0 9
42055: ARRAY
42056: PUSH
42057: LD_INT 2
42059: ARRAY
42060: PPUSH
42061: CALL_OW 488
42065: NOT
42066: OR
42067: IFTRUE 42084
42069: PUSH
42070: LD_VAR 0 13
42074: PPUSH
42075: CALL_OW 247
42079: PUSH
42080: LD_INT 3
42082: EQUAL
42083: OR
42084: IFFALSE 42090
// exit ;
42086: POP
42087: POP
42088: GO 42642
// if not tmp then
42090: LD_VAR 0 13
42094: NOT
42095: IFFALSE 42099
// continue ;
42097: GO 41951
// result := true ;
42099: LD_ADDR_VAR 0 8
42103: PUSH
42104: LD_INT 1
42106: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42107: LD_VAR 0 6
42111: IFFALSE 42128
42113: PUSH
42114: LD_VAR 0 13
42118: PPUSH
42119: CALL_OW 247
42123: PUSH
42124: LD_INT 2
42126: EQUAL
42127: AND
42128: IFFALSE 42145
42130: PUSH
42131: LD_VAR 0 13
42135: PPUSH
42136: CALL_OW 263
42140: PUSH
42141: LD_INT 1
42143: EQUAL
42144: AND
42145: IFFALSE 42309
// begin if IsDrivenBy ( tmp ) then
42147: LD_VAR 0 13
42151: PPUSH
42152: CALL_OW 311
42156: IFFALSE 42160
// continue ;
42158: GO 41951
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42160: LD_VAR 0 6
42164: PPUSH
42165: LD_INT 3
42167: PUSH
42168: LD_INT 60
42170: PUSH
42171: EMPTY
42172: LIST
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: LD_INT 55
42183: PUSH
42184: EMPTY
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PPUSH
42195: CALL_OW 72
42199: IFFALSE 42307
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42201: LD_ADDR_VAR 0 18
42205: PUSH
42206: LD_VAR 0 6
42210: PPUSH
42211: LD_INT 3
42213: PUSH
42214: LD_INT 60
42216: PUSH
42217: EMPTY
42218: LIST
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 3
42226: PUSH
42227: LD_INT 55
42229: PUSH
42230: EMPTY
42231: LIST
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PPUSH
42241: CALL_OW 72
42245: PUSH
42246: LD_INT 1
42248: ARRAY
42249: ST_TO_ADDR
// if IsInUnit ( driver ) then
42250: LD_VAR 0 18
42254: PPUSH
42255: CALL_OW 310
42259: IFFALSE 42270
// ComExit ( driver ) ;
42261: LD_VAR 0 18
42265: PPUSH
42266: CALL 67913 0 1
// AddComEnterUnit ( driver , tmp ) ;
42270: LD_VAR 0 18
42274: PPUSH
42275: LD_VAR 0 13
42279: PPUSH
42280: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42284: LD_VAR 0 18
42288: PPUSH
42289: LD_VAR 0 7
42293: PPUSH
42294: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42298: LD_VAR 0 18
42302: PPUSH
42303: CALL_OW 181
// end ; continue ;
42307: GO 41951
// end ; if not cleaners or not tmp in cleaners then
42309: LD_VAR 0 6
42313: NOT
42314: IFTRUE 42329
42316: PUSH
42317: LD_VAR 0 13
42321: PUSH
42322: LD_VAR 0 6
42326: IN
42327: NOT
42328: OR
42329: IFFALSE 42638
// begin if dep then
42331: LD_VAR 0 17
42335: IFFALSE 42471
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42337: LD_ADDR_VAR 0 16
42341: PUSH
42342: LD_VAR 0 17
42346: PUSH
42347: LD_INT 1
42349: ARRAY
42350: PPUSH
42351: CALL_OW 250
42355: PPUSH
42356: LD_VAR 0 17
42360: PUSH
42361: LD_INT 1
42363: ARRAY
42364: PPUSH
42365: CALL_OW 254
42369: PPUSH
42370: LD_INT 5
42372: PPUSH
42373: CALL_OW 272
42377: PUSH
42378: LD_VAR 0 17
42382: PUSH
42383: LD_INT 1
42385: ARRAY
42386: PPUSH
42387: CALL_OW 251
42391: PPUSH
42392: LD_VAR 0 17
42396: PUSH
42397: LD_INT 1
42399: ARRAY
42400: PPUSH
42401: CALL_OW 254
42405: PPUSH
42406: LD_INT 5
42408: PPUSH
42409: CALL_OW 273
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42418: LD_VAR 0 16
42422: PUSH
42423: LD_INT 1
42425: ARRAY
42426: PPUSH
42427: LD_VAR 0 16
42431: PUSH
42432: LD_INT 2
42434: ARRAY
42435: PPUSH
42436: CALL_OW 488
42440: IFFALSE 42471
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42442: LD_VAR 0 13
42446: PPUSH
42447: LD_VAR 0 16
42451: PUSH
42452: LD_INT 1
42454: ARRAY
42455: PPUSH
42456: LD_VAR 0 16
42460: PUSH
42461: LD_INT 2
42463: ARRAY
42464: PPUSH
42465: CALL_OW 111
// continue ;
42469: GO 41951
// end ; end ; r := GetDir ( tmp ) ;
42471: LD_ADDR_VAR 0 15
42475: PUSH
42476: LD_VAR 0 13
42480: PPUSH
42481: CALL_OW 254
42485: ST_TO_ADDR
// if r = 5 then
42486: LD_VAR 0 15
42490: PUSH
42491: LD_INT 5
42493: EQUAL
42494: IFFALSE 42504
// r := 0 ;
42496: LD_ADDR_VAR 0 15
42500: PUSH
42501: LD_INT 0
42503: ST_TO_ADDR
// for j = r to 5 do
42504: LD_ADDR_VAR 0 10
42508: PUSH
42509: DOUBLE
42510: LD_VAR 0 15
42514: DEC
42515: ST_TO_ADDR
42516: LD_INT 5
42518: PUSH
42519: FOR_TO
42520: IFFALSE 42636
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42522: LD_ADDR_VAR 0 11
42526: PUSH
42527: LD_VAR 0 13
42531: PPUSH
42532: CALL_OW 250
42536: PPUSH
42537: LD_VAR 0 10
42541: PPUSH
42542: LD_INT 2
42544: PPUSH
42545: CALL_OW 272
42549: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42550: LD_ADDR_VAR 0 12
42554: PUSH
42555: LD_VAR 0 13
42559: PPUSH
42560: CALL_OW 251
42564: PPUSH
42565: LD_VAR 0 10
42569: PPUSH
42570: LD_INT 2
42572: PPUSH
42573: CALL_OW 273
42577: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42578: LD_VAR 0 11
42582: PPUSH
42583: LD_VAR 0 12
42587: PPUSH
42588: CALL_OW 488
42592: IFFALSE 42611
42594: PUSH
42595: LD_VAR 0 11
42599: PPUSH
42600: LD_VAR 0 12
42604: PPUSH
42605: CALL_OW 428
42609: NOT
42610: AND
42611: IFFALSE 42634
// begin ComMoveXY ( tmp , _x , _y ) ;
42613: LD_VAR 0 13
42617: PPUSH
42618: LD_VAR 0 11
42622: PPUSH
42623: LD_VAR 0 12
42627: PPUSH
42628: CALL_OW 111
// break ;
42632: GO 42636
// end ; end ;
42634: GO 42519
42636: POP
42637: POP
// end ; end ;
42638: GO 41951
42640: POP
42641: POP
// end ;
42642: LD_VAR 0 8
42646: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42647: LD_INT 0
42649: PPUSH
// result := true ;
42650: LD_ADDR_VAR 0 3
42654: PUSH
42655: LD_INT 1
42657: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42658: LD_VAR 0 2
42662: PUSH
42663: LD_INT 24
42665: DOUBLE
42666: EQUAL
42667: IFTRUE 42677
42669: LD_INT 33
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42677
42675: GO 42702
42677: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42678: LD_ADDR_VAR 0 3
42682: PUSH
42683: LD_INT 32
42685: PPUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 321
42695: PUSH
42696: LD_INT 2
42698: EQUAL
42699: ST_TO_ADDR
42700: GO 43018
42702: LD_INT 20
42704: DOUBLE
42705: EQUAL
42706: IFTRUE 42710
42708: GO 42735
42710: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42711: LD_ADDR_VAR 0 3
42715: PUSH
42716: LD_INT 6
42718: PPUSH
42719: LD_VAR 0 1
42723: PPUSH
42724: CALL_OW 321
42728: PUSH
42729: LD_INT 2
42731: EQUAL
42732: ST_TO_ADDR
42733: GO 43018
42735: LD_INT 22
42737: DOUBLE
42738: EQUAL
42739: IFTRUE 42749
42741: LD_INT 36
42743: DOUBLE
42744: EQUAL
42745: IFTRUE 42749
42747: GO 42774
42749: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42750: LD_ADDR_VAR 0 3
42754: PUSH
42755: LD_INT 15
42757: PPUSH
42758: LD_VAR 0 1
42762: PPUSH
42763: CALL_OW 321
42767: PUSH
42768: LD_INT 2
42770: EQUAL
42771: ST_TO_ADDR
42772: GO 43018
42774: LD_INT 30
42776: DOUBLE
42777: EQUAL
42778: IFTRUE 42782
42780: GO 42807
42782: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42783: LD_ADDR_VAR 0 3
42787: PUSH
42788: LD_INT 20
42790: PPUSH
42791: LD_VAR 0 1
42795: PPUSH
42796: CALL_OW 321
42800: PUSH
42801: LD_INT 2
42803: EQUAL
42804: ST_TO_ADDR
42805: GO 43018
42807: LD_INT 28
42809: DOUBLE
42810: EQUAL
42811: IFTRUE 42821
42813: LD_INT 21
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42821
42819: GO 42846
42821: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_INT 21
42829: PPUSH
42830: LD_VAR 0 1
42834: PPUSH
42835: CALL_OW 321
42839: PUSH
42840: LD_INT 2
42842: EQUAL
42843: ST_TO_ADDR
42844: GO 43018
42846: LD_INT 16
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42854
42852: GO 42879
42854: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_INT 84
42862: PPUSH
42863: LD_VAR 0 1
42867: PPUSH
42868: CALL_OW 321
42872: PUSH
42873: LD_INT 2
42875: EQUAL
42876: ST_TO_ADDR
42877: GO 43018
42879: LD_INT 19
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42893
42885: LD_INT 23
42887: DOUBLE
42888: EQUAL
42889: IFTRUE 42893
42891: GO 42918
42893: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42894: LD_ADDR_VAR 0 3
42898: PUSH
42899: LD_INT 83
42901: PPUSH
42902: LD_VAR 0 1
42906: PPUSH
42907: CALL_OW 321
42911: PUSH
42912: LD_INT 2
42914: EQUAL
42915: ST_TO_ADDR
42916: GO 43018
42918: LD_INT 17
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42926
42924: GO 42951
42926: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42927: LD_ADDR_VAR 0 3
42931: PUSH
42932: LD_INT 39
42934: PPUSH
42935: LD_VAR 0 1
42939: PPUSH
42940: CALL_OW 321
42944: PUSH
42945: LD_INT 2
42947: EQUAL
42948: ST_TO_ADDR
42949: GO 43018
42951: LD_INT 18
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42959
42957: GO 42984
42959: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42960: LD_ADDR_VAR 0 3
42964: PUSH
42965: LD_INT 40
42967: PPUSH
42968: LD_VAR 0 1
42972: PPUSH
42973: CALL_OW 321
42977: PUSH
42978: LD_INT 2
42980: EQUAL
42981: ST_TO_ADDR
42982: GO 43018
42984: LD_INT 27
42986: DOUBLE
42987: EQUAL
42988: IFTRUE 42992
42990: GO 43017
42992: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42993: LD_ADDR_VAR 0 3
42997: PUSH
42998: LD_INT 35
43000: PPUSH
43001: LD_VAR 0 1
43005: PPUSH
43006: CALL_OW 321
43010: PUSH
43011: LD_INT 2
43013: EQUAL
43014: ST_TO_ADDR
43015: GO 43018
43017: POP
// end ;
43018: LD_VAR 0 3
43022: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43023: LD_INT 0
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
// result := false ;
43036: LD_ADDR_VAR 0 6
43040: PUSH
43041: LD_INT 0
43043: ST_TO_ADDR
// if btype = b_depot then
43044: LD_VAR 0 2
43048: PUSH
43049: LD_INT 0
43051: EQUAL
43052: IFFALSE 43064
// begin result := true ;
43054: LD_ADDR_VAR 0 6
43058: PUSH
43059: LD_INT 1
43061: ST_TO_ADDR
// exit ;
43062: GO 43918
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43064: LD_VAR 0 1
43068: NOT
43069: IFTRUE 43094
43071: PUSH
43072: LD_VAR 0 1
43076: PPUSH
43077: CALL_OW 266
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: IN
43092: NOT
43093: OR
43094: IFTRUE 43103
43096: PUSH
43097: LD_VAR 0 2
43101: NOT
43102: OR
43103: IFTRUE 43139
43105: PUSH
43106: LD_VAR 0 5
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: LD_INT 4
43125: PUSH
43126: LD_INT 5
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: IN
43137: NOT
43138: OR
43139: IFTRUE 43158
43141: PUSH
43142: LD_VAR 0 3
43146: PPUSH
43147: LD_VAR 0 4
43151: PPUSH
43152: CALL_OW 488
43156: NOT
43157: OR
43158: IFFALSE 43162
// exit ;
43160: GO 43918
// side := GetSide ( depot ) ;
43162: LD_ADDR_VAR 0 9
43166: PUSH
43167: LD_VAR 0 1
43171: PPUSH
43172: CALL_OW 255
43176: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43177: LD_VAR 0 9
43181: PPUSH
43182: LD_VAR 0 2
43186: PPUSH
43187: CALL 42647 0 2
43191: NOT
43192: IFFALSE 43196
// exit ;
43194: GO 43918
// pom := GetBase ( depot ) ;
43196: LD_ADDR_VAR 0 10
43200: PUSH
43201: LD_VAR 0 1
43205: PPUSH
43206: CALL_OW 274
43210: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43211: LD_ADDR_VAR 0 11
43215: PUSH
43216: LD_VAR 0 2
43220: PPUSH
43221: LD_VAR 0 1
43225: PPUSH
43226: CALL_OW 248
43230: PPUSH
43231: CALL_OW 450
43235: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43236: LD_VAR 0 10
43240: PPUSH
43241: LD_INT 1
43243: PPUSH
43244: CALL_OW 275
43248: PUSH
43249: LD_VAR 0 11
43253: PUSH
43254: LD_INT 1
43256: ARRAY
43257: GREATEREQUAL
43258: IFFALSE 43284
43260: PUSH
43261: LD_VAR 0 10
43265: PPUSH
43266: LD_INT 2
43268: PPUSH
43269: CALL_OW 275
43273: PUSH
43274: LD_VAR 0 11
43278: PUSH
43279: LD_INT 2
43281: ARRAY
43282: GREATEREQUAL
43283: AND
43284: IFFALSE 43310
43286: PUSH
43287: LD_VAR 0 10
43291: PPUSH
43292: LD_INT 3
43294: PPUSH
43295: CALL_OW 275
43299: PUSH
43300: LD_VAR 0 11
43304: PUSH
43305: LD_INT 3
43307: ARRAY
43308: GREATEREQUAL
43309: AND
43310: NOT
43311: IFFALSE 43315
// exit ;
43313: GO 43918
// if GetBType ( depot ) = b_depot then
43315: LD_VAR 0 1
43319: PPUSH
43320: CALL_OW 266
43324: PUSH
43325: LD_INT 0
43327: EQUAL
43328: IFFALSE 43340
// dist := 28 else
43330: LD_ADDR_VAR 0 14
43334: PUSH
43335: LD_INT 28
43337: ST_TO_ADDR
43338: GO 43348
// dist := 36 ;
43340: LD_ADDR_VAR 0 14
43344: PUSH
43345: LD_INT 36
43347: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43348: LD_VAR 0 1
43352: PPUSH
43353: LD_VAR 0 3
43357: PPUSH
43358: LD_VAR 0 4
43362: PPUSH
43363: CALL_OW 297
43367: PUSH
43368: LD_VAR 0 14
43372: GREATER
43373: IFFALSE 43377
// exit ;
43375: GO 43918
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43377: LD_ADDR_VAR 0 12
43381: PUSH
43382: LD_VAR 0 2
43386: PPUSH
43387: LD_VAR 0 3
43391: PPUSH
43392: LD_VAR 0 4
43396: PPUSH
43397: LD_VAR 0 5
43401: PPUSH
43402: LD_VAR 0 1
43406: PPUSH
43407: CALL_OW 248
43411: PPUSH
43412: LD_INT 0
43414: PPUSH
43415: CALL 43923 0 6
43419: ST_TO_ADDR
// if not hexes then
43420: LD_VAR 0 12
43424: NOT
43425: IFFALSE 43429
// exit ;
43427: GO 43918
// hex := GetHexInfo ( x , y ) ;
43429: LD_ADDR_VAR 0 15
43433: PUSH
43434: LD_VAR 0 3
43438: PPUSH
43439: LD_VAR 0 4
43443: PPUSH
43444: CALL_OW 546
43448: ST_TO_ADDR
// if hex [ 1 ] then
43449: LD_VAR 0 15
43453: PUSH
43454: LD_INT 1
43456: ARRAY
43457: IFFALSE 43461
// exit ;
43459: GO 43918
// height := hex [ 2 ] ;
43461: LD_ADDR_VAR 0 13
43465: PUSH
43466: LD_VAR 0 15
43470: PUSH
43471: LD_INT 2
43473: ARRAY
43474: ST_TO_ADDR
// for i = 1 to hexes do
43475: LD_ADDR_VAR 0 7
43479: PUSH
43480: DOUBLE
43481: LD_INT 1
43483: DEC
43484: ST_TO_ADDR
43485: LD_VAR 0 12
43489: PUSH
43490: FOR_TO
43491: IFFALSE 43835
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43493: LD_VAR 0 12
43497: PUSH
43498: LD_VAR 0 7
43502: ARRAY
43503: PUSH
43504: LD_INT 1
43506: ARRAY
43507: PPUSH
43508: LD_VAR 0 12
43512: PUSH
43513: LD_VAR 0 7
43517: ARRAY
43518: PUSH
43519: LD_INT 2
43521: ARRAY
43522: PPUSH
43523: CALL_OW 488
43527: NOT
43528: IFTRUE 43570
43530: PUSH
43531: LD_VAR 0 12
43535: PUSH
43536: LD_VAR 0 7
43540: ARRAY
43541: PUSH
43542: LD_INT 1
43544: ARRAY
43545: PPUSH
43546: LD_VAR 0 12
43550: PUSH
43551: LD_VAR 0 7
43555: ARRAY
43556: PUSH
43557: LD_INT 2
43559: ARRAY
43560: PPUSH
43561: CALL_OW 428
43565: PUSH
43566: LD_INT 0
43568: GREATER
43569: OR
43570: IFTRUE 43608
43572: PUSH
43573: LD_VAR 0 12
43577: PUSH
43578: LD_VAR 0 7
43582: ARRAY
43583: PUSH
43584: LD_INT 1
43586: ARRAY
43587: PPUSH
43588: LD_VAR 0 12
43592: PUSH
43593: LD_VAR 0 7
43597: ARRAY
43598: PUSH
43599: LD_INT 2
43601: ARRAY
43602: PPUSH
43603: CALL_OW 351
43607: OR
43608: IFFALSE 43614
// exit ;
43610: POP
43611: POP
43612: GO 43918
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43614: LD_ADDR_VAR 0 8
43618: PUSH
43619: LD_VAR 0 12
43623: PUSH
43624: LD_VAR 0 7
43628: ARRAY
43629: PUSH
43630: LD_INT 1
43632: ARRAY
43633: PPUSH
43634: LD_VAR 0 12
43638: PUSH
43639: LD_VAR 0 7
43643: ARRAY
43644: PUSH
43645: LD_INT 2
43647: ARRAY
43648: PPUSH
43649: CALL_OW 546
43653: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43654: LD_VAR 0 8
43658: PUSH
43659: LD_INT 1
43661: ARRAY
43662: IFTRUE 43684
43664: PUSH
43665: LD_VAR 0 8
43669: PUSH
43670: LD_INT 2
43672: ARRAY
43673: PUSH
43674: LD_VAR 0 13
43678: PUSH
43679: LD_INT 2
43681: PLUS
43682: GREATER
43683: OR
43684: IFTRUE 43706
43686: PUSH
43687: LD_VAR 0 8
43691: PUSH
43692: LD_INT 2
43694: ARRAY
43695: PUSH
43696: LD_VAR 0 13
43700: PUSH
43701: LD_INT 2
43703: MINUS
43704: LESS
43705: OR
43706: IFTRUE 43774
43708: PUSH
43709: LD_VAR 0 8
43713: PUSH
43714: LD_INT 3
43716: ARRAY
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 8
43723: PUSH
43724: LD_INT 9
43726: PUSH
43727: LD_INT 10
43729: PUSH
43730: LD_INT 11
43732: PUSH
43733: LD_INT 12
43735: PUSH
43736: LD_INT 13
43738: PUSH
43739: LD_INT 16
43741: PUSH
43742: LD_INT 17
43744: PUSH
43745: LD_INT 18
43747: PUSH
43748: LD_INT 19
43750: PUSH
43751: LD_INT 20
43753: PUSH
43754: LD_INT 21
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: IN
43772: NOT
43773: OR
43774: IFTRUE 43787
43776: PUSH
43777: LD_VAR 0 8
43781: PUSH
43782: LD_INT 5
43784: ARRAY
43785: NOT
43786: OR
43787: IFTRUE 43827
43789: PUSH
43790: LD_VAR 0 8
43794: PUSH
43795: LD_INT 6
43797: ARRAY
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 2
43804: PUSH
43805: LD_INT 7
43807: PUSH
43808: LD_INT 9
43810: PUSH
43811: LD_INT 10
43813: PUSH
43814: LD_INT 11
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: IN
43825: NOT
43826: OR
43827: IFFALSE 43833
// exit ;
43829: POP
43830: POP
43831: GO 43918
// end ;
43833: GO 43490
43835: POP
43836: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43837: LD_VAR 0 9
43841: PPUSH
43842: LD_VAR 0 3
43846: PPUSH
43847: LD_VAR 0 4
43851: PPUSH
43852: LD_INT 20
43854: PPUSH
43855: CALL 35737 0 4
43859: PUSH
43860: LD_INT 4
43862: ARRAY
43863: IFFALSE 43867
// exit ;
43865: GO 43918
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43867: LD_VAR 0 2
43871: PUSH
43872: LD_INT 29
43874: PUSH
43875: LD_INT 30
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: IN
43882: IFFALSE 43906
43884: PUSH
43885: LD_VAR 0 3
43889: PPUSH
43890: LD_VAR 0 4
43894: PPUSH
43895: LD_VAR 0 9
43899: PPUSH
43900: CALL_OW 440
43904: NOT
43905: AND
43906: IFFALSE 43910
// exit ;
43908: GO 43918
// result := true ;
43910: LD_ADDR_VAR 0 6
43914: PUSH
43915: LD_INT 1
43917: ST_TO_ADDR
// end ;
43918: LD_VAR 0 6
43922: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43923: LD_INT 0
43925: PPUSH
43926: PPUSH
43927: PPUSH
43928: PPUSH
43929: PPUSH
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
43934: PPUSH
43935: PPUSH
43936: PPUSH
43937: PPUSH
43938: PPUSH
43939: PPUSH
43940: PPUSH
43941: PPUSH
43942: PPUSH
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
43947: PPUSH
43948: PPUSH
43949: PPUSH
43950: PPUSH
43951: PPUSH
43952: PPUSH
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
43963: PPUSH
43964: PPUSH
43965: PPUSH
43966: PPUSH
43967: PPUSH
43968: PPUSH
43969: PPUSH
43970: PPUSH
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
43978: PPUSH
43979: PPUSH
43980: PPUSH
43981: PPUSH
43982: PPUSH
// result = [ ] ;
43983: LD_ADDR_VAR 0 7
43987: PUSH
43988: EMPTY
43989: ST_TO_ADDR
// temp_list = [ ] ;
43990: LD_ADDR_VAR 0 9
43994: PUSH
43995: EMPTY
43996: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43997: LD_VAR 0 4
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: LD_INT 3
44013: PUSH
44014: LD_INT 4
44016: PUSH
44017: LD_INT 5
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: IN
44028: NOT
44029: IFTRUE 44072
44031: PUSH
44032: LD_VAR 0 1
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: IN
44047: IFFALSE 44071
44049: PUSH
44050: LD_VAR 0 5
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: LD_INT 2
44060: PUSH
44061: LD_INT 3
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: IN
44069: NOT
44070: AND
44071: OR
44072: IFFALSE 44076
// exit ;
44074: GO 62475
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44076: LD_VAR 0 1
44080: PUSH
44081: LD_INT 6
44083: PUSH
44084: LD_INT 7
44086: PUSH
44087: LD_INT 8
44089: PUSH
44090: LD_INT 13
44092: PUSH
44093: LD_INT 12
44095: PUSH
44096: LD_INT 15
44098: PUSH
44099: LD_INT 11
44101: PUSH
44102: LD_INT 14
44104: PUSH
44105: LD_INT 10
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: IN
44119: IFFALSE 44129
// btype = b_lab ;
44121: LD_ADDR_VAR 0 1
44125: PUSH
44126: LD_INT 6
44128: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44129: LD_VAR 0 6
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: IN
44148: NOT
44149: IFTRUE 44217
44151: PUSH
44152: LD_VAR 0 1
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: LD_INT 3
44168: PUSH
44169: LD_INT 6
44171: PUSH
44172: LD_INT 36
44174: PUSH
44175: LD_INT 4
44177: PUSH
44178: LD_INT 5
44180: PUSH
44181: LD_INT 31
44183: PUSH
44184: LD_INT 32
44186: PUSH
44187: LD_INT 33
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: IN
44203: NOT
44204: IFFALSE 44216
44206: PUSH
44207: LD_VAR 0 6
44211: PUSH
44212: LD_INT 1
44214: EQUAL
44215: AND
44216: OR
44217: IFTRUE 44249
44219: PUSH
44220: LD_VAR 0 1
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 3
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: IN
44235: NOT
44236: IFFALSE 44248
44238: PUSH
44239: LD_VAR 0 6
44243: PUSH
44244: LD_INT 2
44246: EQUAL
44247: AND
44248: OR
44249: IFFALSE 44259
// mode = 0 ;
44251: LD_ADDR_VAR 0 6
44255: PUSH
44256: LD_INT 0
44258: ST_TO_ADDR
// case mode of 0 :
44259: LD_VAR 0 6
44263: PUSH
44264: LD_INT 0
44266: DOUBLE
44267: EQUAL
44268: IFTRUE 44272
44270: GO 55725
44272: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44273: LD_ADDR_VAR 0 11
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 3
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 3
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44466: LD_ADDR_VAR 0 12
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 3
44623: NEG
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 3
44634: NEG
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44662: LD_ADDR_VAR 0 13
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: LD_INT 2
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 2
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: LD_INT 3
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 3
44821: NEG
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 3
44833: NEG
44834: PUSH
44835: LD_INT 3
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44861: LD_ADDR_VAR 0 14
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 3
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 3
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45057: LD_ADDR_VAR 0 15
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 3
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 3
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45250: LD_ADDR_VAR 0 16
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: PUSH
45408: LD_INT 3
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 3
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45443: LD_ADDR_VAR 0 17
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45673: LD_ADDR_VAR 0 18
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45903: LD_ADDR_VAR 0 19
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46133: LD_ADDR_VAR 0 20
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46363: LD_ADDR_VAR 0 21
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46593: LD_ADDR_VAR 0 22
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46823: LD_ADDR_VAR 0 23
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: LD_INT 3
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 3
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47103: LD_ADDR_VAR 0 24
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 2
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 2
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 3
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47379: LD_ADDR_VAR 0 25
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 3
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: LD_INT 3
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: LD_INT 3
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47653: LD_ADDR_VAR 0 26
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47929: LD_ADDR_VAR 0 27
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 3
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 3
48174: NEG
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48209: LD_ADDR_VAR 0 28
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 3
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 3
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 3
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 3
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48491: LD_ADDR_VAR 0 29
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 3
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 3
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 3
48735: NEG
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48770: LD_ADDR_VAR 0 30
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 3
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 3
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49048: LD_ADDR_VAR 0 31
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: LD_INT 3
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 3
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 3
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 3
49291: NEG
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49326: LD_ADDR_VAR 0 32
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 3
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 3
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 3
49569: NEG
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49604: LD_ADDR_VAR 0 33
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 3
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 3
49848: NEG
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49883: LD_ADDR_VAR 0 34
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 3
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: LD_INT 3
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 3
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50163: LD_ADDR_VAR 0 35
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50275: LD_ADDR_VAR 0 36
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50387: LD_ADDR_VAR 0 37
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50499: LD_ADDR_VAR 0 38
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50611: LD_ADDR_VAR 0 39
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50723: LD_ADDR_VAR 0 40
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50835: LD_ADDR_VAR 0 41
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 3
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 3
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 3
51109: NEG
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 3
51120: NEG
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 3
51132: NEG
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 3
51144: NEG
51145: PUSH
51146: LD_INT 3
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51185: LD_ADDR_VAR 0 42
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: NEG
51376: PUSH
51377: LD_INT 3
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: LD_INT 3
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 3
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 3
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: NEG
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 3
51494: NEG
51495: PUSH
51496: LD_INT 3
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51535: LD_ADDR_VAR 0 43
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 3
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 3
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 3
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: NEG
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 3
51842: NEG
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51883: LD_ADDR_VAR 0 44
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 3
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 3
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: LD_INT 3
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 3
52157: NEG
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: LD_INT 3
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52233: LD_ADDR_VAR 0 45
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 3
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 3
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 3
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 3
52479: PUSH
52480: LD_INT 3
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: LD_INT 3
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 3
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52583: LD_ADDR_VAR 0 46
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 3
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 3
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 3
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 3
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52931: LD_ADDR_VAR 0 47
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53082: LD_ADDR_VAR 0 48
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53229: LD_ADDR_VAR 0 49
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53373: LD_ADDR_VAR 0 50
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53517: LD_ADDR_VAR 0 51
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53664: LD_ADDR_VAR 0 52
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53815: LD_ADDR_VAR 0 53
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54045: LD_ADDR_VAR 0 54
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54275: LD_ADDR_VAR 0 55
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54505: LD_ADDR_VAR 0 56
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: LD_INT 2
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54735: LD_ADDR_VAR 0 57
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54965: LD_ADDR_VAR 0 58
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55195: LD_ADDR_VAR 0 59
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55283: LD_ADDR_VAR 0 60
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55371: LD_ADDR_VAR 0 61
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55459: LD_ADDR_VAR 0 62
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55547: LD_ADDR_VAR 0 63
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55635: LD_ADDR_VAR 0 64
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// end ; 1 :
55723: GO 61620
55725: LD_INT 1
55727: DOUBLE
55728: EQUAL
55729: IFTRUE 55733
55731: GO 58356
55733: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55734: LD_ADDR_VAR 0 11
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 3
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: LD_INT 3
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: LIST
55777: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55778: LD_ADDR_VAR 0 12
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: LIST
55818: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55819: LD_ADDR_VAR 0 13
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 3
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55859: LD_ADDR_VAR 0 14
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 3
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 3
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: LIST
55899: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55900: LD_ADDR_VAR 0 15
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: NEG
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: NEG
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55944: LD_ADDR_VAR 0 16
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 3
55963: NEG
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: NEG
55976: PUSH
55977: LD_INT 3
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55990: LD_ADDR_VAR 0 17
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 3
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: LIST
56033: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56034: LD_ADDR_VAR 0 18
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56075: LD_ADDR_VAR 0 19
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: LIST
56114: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56115: LD_ADDR_VAR 0 20
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 3
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 3
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56156: LD_ADDR_VAR 0 21
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 3
56174: NEG
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 3
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: LIST
56199: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56200: LD_ADDR_VAR 0 22
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: LD_INT 2
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56246: LD_ADDR_VAR 0 23
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 4
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 3
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56290: LD_ADDR_VAR 0 24
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 3
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 4
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56331: LD_ADDR_VAR 0 25
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: LD_INT 3
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 4
56348: PUSH
56349: LD_INT 3
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: LD_INT 4
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: LIST
56370: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56371: LD_ADDR_VAR 0 26
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 4
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56412: LD_ADDR_VAR 0 27
56416: PUSH
56417: LD_INT 3
56419: NEG
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 3
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 4
56441: NEG
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: LIST
56455: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56456: LD_ADDR_VAR 0 28
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 3
56475: NEG
56476: PUSH
56477: LD_INT 4
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 4
56487: NEG
56488: PUSH
56489: LD_INT 3
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56502: LD_ADDR_VAR 0 29
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 3
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 3
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 4
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 4
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 3
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 5
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 5
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 4
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 6
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 6
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 5
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56657: LD_ADDR_VAR 0 30
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 4
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 4
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 4
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 5
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 5
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 5
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 6
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 6
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56800: LD_ADDR_VAR 0 31
56804: PUSH
56805: LD_INT 3
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 4
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 4
56847: PUSH
56848: LD_INT 4
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: LD_INT 4
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 5
56867: PUSH
56868: LD_INT 4
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 5
56877: PUSH
56878: LD_INT 5
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 4
56887: PUSH
56888: LD_INT 5
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 6
56897: PUSH
56898: LD_INT 5
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 6
56907: PUSH
56908: LD_INT 6
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 5
56917: PUSH
56918: LD_INT 6
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56939: LD_ADDR_VAR 0 32
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 4
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 4
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 5
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: LD_INT 5
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 4
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 6
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 6
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 5
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57082: LD_ADDR_VAR 0 33
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 3
57111: NEG
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 4
57134: NEG
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 4
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 4
57157: NEG
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 5
57168: NEG
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 5
57179: NEG
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 5
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 6
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 6
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57237: LD_ADDR_VAR 0 34
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: LD_INT 3
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 3
57280: NEG
57281: PUSH
57282: LD_INT 4
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 4
57292: NEG
57293: PUSH
57294: LD_INT 3
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 4
57304: NEG
57305: PUSH
57306: LD_INT 4
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 4
57316: NEG
57317: PUSH
57318: LD_INT 5
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 5
57328: NEG
57329: PUSH
57330: LD_INT 4
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 5
57340: NEG
57341: PUSH
57342: LD_INT 5
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 5
57352: NEG
57353: PUSH
57354: LD_INT 6
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 6
57364: NEG
57365: PUSH
57366: LD_INT 5
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 6
57376: NEG
57377: PUSH
57378: LD_INT 6
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57400: LD_ADDR_VAR 0 41
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 3
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57444: LD_ADDR_VAR 0 42
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57485: LD_ADDR_VAR 0 43
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: LD_INT 2
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57525: LD_ADDR_VAR 0 44
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57566: LD_ADDR_VAR 0 45
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: LIST
57609: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57610: LD_ADDR_VAR 0 46
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: LD_INT 3
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: LIST
57655: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57656: LD_ADDR_VAR 0 47
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: LD_INT 3
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57689: LD_ADDR_VAR 0 48
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57720: LD_ADDR_VAR 0 49
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 3
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57749: LD_ADDR_VAR 0 50
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57778: LD_ADDR_VAR 0 51
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57809: LD_ADDR_VAR 0 52
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 3
57828: NEG
57829: PUSH
57830: LD_INT 2
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57842: LD_ADDR_VAR 0 53
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: LD_INT 3
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57886: LD_ADDR_VAR 0 54
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 3
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57927: LD_ADDR_VAR 0 55
57931: PUSH
57932: LD_INT 3
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: LD_INT 3
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: LIST
57966: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57967: LD_ADDR_VAR 0 56
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 3
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: LIST
58007: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58008: LD_ADDR_VAR 0 57
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 3
58037: NEG
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: LIST
58051: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58052: LD_ADDR_VAR 0 58
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: NEG
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58098: LD_ADDR_VAR 0 59
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: LIST
58141: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58142: LD_ADDR_VAR 0 60
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: LIST
58182: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58183: LD_ADDR_VAR 0 61
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58223: LD_ADDR_VAR 0 62
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58264: LD_ADDR_VAR 0 63
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: LIST
58307: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58308: LD_ADDR_VAR 0 64
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 2
58339: NEG
58340: PUSH
58341: LD_INT 2
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: LIST
58353: ST_TO_ADDR
// end ; 2 :
58354: GO 61620
58356: LD_INT 2
58358: DOUBLE
58359: EQUAL
58360: IFTRUE 58364
58362: GO 61619
58364: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58365: LD_ADDR_VAR 0 29
58369: PUSH
58370: LD_INT 4
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 4
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 5
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 5
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 4
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 3
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 3
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 5
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: LD_INT 3
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 4
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 4
58495: PUSH
58496: LD_INT 4
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: LD_INT 4
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 4
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: PUSH
58546: LD_INT 4
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 4
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: LD_INT 4
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: LD_INT 5
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 5
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: LD_INT 4
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 3
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 5
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 3
58659: NEG
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 4
58704: NEG
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 4
58715: NEG
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 4
58727: NEG
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 4
58750: NEG
58751: PUSH
58752: LD_INT 4
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 4
58762: NEG
58763: PUSH
58764: LD_INT 5
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 3
58774: NEG
58775: PUSH
58776: LD_INT 4
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 3
58786: NEG
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 4
58798: NEG
58799: PUSH
58800: LD_INT 3
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 5
58810: NEG
58811: PUSH
58812: LD_INT 4
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 5
58822: NEG
58823: PUSH
58824: LD_INT 5
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 3
58834: NEG
58835: PUSH
58836: LD_INT 5
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 5
58846: NEG
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58903: LD_ADDR_VAR 0 30
58907: PUSH
58908: LD_INT 4
58910: PUSH
58911: LD_INT 4
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 4
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 5
58930: PUSH
58931: LD_INT 4
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 5
58940: PUSH
58941: LD_INT 5
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 4
58950: PUSH
58951: LD_INT 5
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 4
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: LD_INT 3
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 5
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: PUSH
58991: LD_INT 5
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 3
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 4
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 4
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 2
59072: PUSH
59073: LD_INT 4
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 4
59093: NEG
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 4
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: NEG
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 4
59138: NEG
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 5
59149: NEG
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 5
59160: NEG
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 5
59172: NEG
59173: PUSH
59174: LD_INT 2
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 3
59195: NEG
59196: PUSH
59197: LD_INT 3
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: LD_INT 4
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: LD_INT 3
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 3
59243: NEG
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 4
59255: NEG
59256: PUSH
59257: LD_INT 3
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 4
59267: NEG
59268: PUSH
59269: LD_INT 4
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: LD_INT 4
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 4
59291: NEG
59292: PUSH
59293: LD_INT 2
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 4
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 5
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 4
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 3
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 4
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 5
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: NEG
59394: PUSH
59395: LD_INT 5
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59450: LD_ADDR_VAR 0 31
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 4
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: LD_INT 3
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 4
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 5
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 5
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 4
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: LD_INT 5
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 3
59595: NEG
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 4
59606: NEG
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 4
59617: NEG
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 4
59629: NEG
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 4
59652: NEG
59653: PUSH
59654: LD_INT 4
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 4
59664: NEG
59665: PUSH
59666: LD_INT 5
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 3
59676: NEG
59677: PUSH
59678: LD_INT 4
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 3
59688: NEG
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 4
59700: NEG
59701: PUSH
59702: LD_INT 3
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 5
59712: NEG
59713: PUSH
59714: LD_INT 4
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 5
59724: NEG
59725: PUSH
59726: LD_INT 5
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: LD_INT 5
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 5
59748: NEG
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 3
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 4
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 3
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: LD_INT 2
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 3
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: LD_INT 4
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: LD_INT 4
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 4
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 4
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 5
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 5
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 4
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 3
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 3
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 3
59934: PUSH
59935: LD_INT 2
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 5
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60000: LD_ADDR_VAR 0 32
60004: PUSH
60005: LD_INT 4
60007: NEG
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 4
60018: NEG
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 3
60030: NEG
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 3
60041: NEG
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 4
60052: NEG
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 5
60063: NEG
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 5
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 5
60086: NEG
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 3
60109: NEG
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 3
60121: NEG
60122: PUSH
60123: LD_INT 4
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: LD_INT 3
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: LD_INT 2
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 4
60169: NEG
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 4
60181: NEG
60182: PUSH
60183: LD_INT 4
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 2
60193: NEG
60194: PUSH
60195: LD_INT 4
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 4
60205: NEG
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: LD_INT 4
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: LD_INT 5
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: LD_INT 4
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_INT 3
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: LD_INT 4
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: LD_INT 5
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: PUSH
60297: LD_INT 3
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: LD_INT 5
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 4
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 4
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 3
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 2
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 4
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 4
60412: PUSH
60413: LD_INT 4
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 4
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 5
60432: PUSH
60433: LD_INT 4
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 5
60442: PUSH
60443: LD_INT 5
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 4
60452: PUSH
60453: LD_INT 5
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: LD_INT 4
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 5
60482: PUSH
60483: LD_INT 3
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 3
60492: PUSH
60493: LD_INT 5
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60547: LD_ADDR_VAR 0 33
60551: PUSH
60552: LD_INT 4
60554: NEG
60555: PUSH
60556: LD_INT 4
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 4
60566: NEG
60567: PUSH
60568: LD_INT 5
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: NEG
60579: PUSH
60580: LD_INT 4
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 3
60590: NEG
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 4
60602: NEG
60603: PUSH
60604: LD_INT 3
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 5
60614: NEG
60615: PUSH
60616: LD_INT 4
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 5
60626: NEG
60627: PUSH
60628: LD_INT 5
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 3
60638: NEG
60639: PUSH
60640: LD_INT 5
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 5
60650: NEG
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 3
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: LD_INT 4
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: LD_INT 3
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: LD_INT 2
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: LD_INT 4
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: LD_INT 4
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 4
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 4
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 5
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 5
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 4
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 3
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: LD_INT 2
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 5
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: LD_INT 3
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: LD_INT 2
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 4
60877: PUSH
60878: LD_INT 3
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 4
60887: PUSH
60888: LD_INT 4
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 4
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 4
60927: PUSH
60928: LD_INT 2
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 4
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 4
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 4
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 5
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 5
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: LD_INT 4
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 5
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61085: LD_ADDR_VAR 0 34
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: LD_INT 4
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 5
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: LD_INT 4
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: PUSH
61126: LD_INT 3
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: LD_INT 3
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 4
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 5
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: LD_INT 5
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 4
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 4
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 4
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 4
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 4
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 5
61307: PUSH
61308: LD_INT 4
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 5
61317: PUSH
61318: LD_INT 5
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 4
61327: PUSH
61328: LD_INT 5
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: PUSH
61338: LD_INT 4
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 3
61347: PUSH
61348: LD_INT 3
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 5
61357: PUSH
61358: LD_INT 3
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: LD_INT 5
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 4
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: PUSH
61450: LD_INT 4
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 4
61470: NEG
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 4
61481: NEG
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 3
61493: NEG
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 3
61504: NEG
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 4
61515: NEG
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 5
61526: NEG
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 5
61537: NEG
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 5
61549: NEG
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 3
61561: NEG
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// end ; end ;
61617: GO 61620
61619: POP
// case btype of b_depot , b_warehouse :
61620: LD_VAR 0 1
61624: PUSH
61625: LD_INT 0
61627: DOUBLE
61628: EQUAL
61629: IFTRUE 61639
61631: LD_INT 1
61633: DOUBLE
61634: EQUAL
61635: IFTRUE 61639
61637: GO 61840
61639: POP
// case nation of nation_american :
61640: LD_VAR 0 5
61644: PUSH
61645: LD_INT 1
61647: DOUBLE
61648: EQUAL
61649: IFTRUE 61653
61651: GO 61709
61653: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61654: LD_ADDR_VAR 0 9
61658: PUSH
61659: LD_VAR 0 11
61663: PUSH
61664: LD_VAR 0 12
61668: PUSH
61669: LD_VAR 0 13
61673: PUSH
61674: LD_VAR 0 14
61678: PUSH
61679: LD_VAR 0 15
61683: PUSH
61684: LD_VAR 0 16
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: PUSH
61697: LD_VAR 0 4
61701: PUSH
61702: LD_INT 1
61704: PLUS
61705: ARRAY
61706: ST_TO_ADDR
61707: GO 61838
61709: LD_INT 2
61711: DOUBLE
61712: EQUAL
61713: IFTRUE 61717
61715: GO 61773
61717: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61718: LD_ADDR_VAR 0 9
61722: PUSH
61723: LD_VAR 0 17
61727: PUSH
61728: LD_VAR 0 18
61732: PUSH
61733: LD_VAR 0 19
61737: PUSH
61738: LD_VAR 0 20
61742: PUSH
61743: LD_VAR 0 21
61747: PUSH
61748: LD_VAR 0 22
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: PUSH
61761: LD_VAR 0 4
61765: PUSH
61766: LD_INT 1
61768: PLUS
61769: ARRAY
61770: ST_TO_ADDR
61771: GO 61838
61773: LD_INT 3
61775: DOUBLE
61776: EQUAL
61777: IFTRUE 61781
61779: GO 61837
61781: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61782: LD_ADDR_VAR 0 9
61786: PUSH
61787: LD_VAR 0 23
61791: PUSH
61792: LD_VAR 0 24
61796: PUSH
61797: LD_VAR 0 25
61801: PUSH
61802: LD_VAR 0 26
61806: PUSH
61807: LD_VAR 0 27
61811: PUSH
61812: LD_VAR 0 28
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: PUSH
61825: LD_VAR 0 4
61829: PUSH
61830: LD_INT 1
61832: PLUS
61833: ARRAY
61834: ST_TO_ADDR
61835: GO 61838
61837: POP
61838: GO 62393
61840: LD_INT 2
61842: DOUBLE
61843: EQUAL
61844: IFTRUE 61854
61846: LD_INT 3
61848: DOUBLE
61849: EQUAL
61850: IFTRUE 61854
61852: GO 61910
61854: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61855: LD_ADDR_VAR 0 9
61859: PUSH
61860: LD_VAR 0 29
61864: PUSH
61865: LD_VAR 0 30
61869: PUSH
61870: LD_VAR 0 31
61874: PUSH
61875: LD_VAR 0 32
61879: PUSH
61880: LD_VAR 0 33
61884: PUSH
61885: LD_VAR 0 34
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: PUSH
61898: LD_VAR 0 4
61902: PUSH
61903: LD_INT 1
61905: PLUS
61906: ARRAY
61907: ST_TO_ADDR
61908: GO 62393
61910: LD_INT 16
61912: DOUBLE
61913: EQUAL
61914: IFTRUE 61972
61916: LD_INT 17
61918: DOUBLE
61919: EQUAL
61920: IFTRUE 61972
61922: LD_INT 18
61924: DOUBLE
61925: EQUAL
61926: IFTRUE 61972
61928: LD_INT 19
61930: DOUBLE
61931: EQUAL
61932: IFTRUE 61972
61934: LD_INT 22
61936: DOUBLE
61937: EQUAL
61938: IFTRUE 61972
61940: LD_INT 20
61942: DOUBLE
61943: EQUAL
61944: IFTRUE 61972
61946: LD_INT 21
61948: DOUBLE
61949: EQUAL
61950: IFTRUE 61972
61952: LD_INT 23
61954: DOUBLE
61955: EQUAL
61956: IFTRUE 61972
61958: LD_INT 24
61960: DOUBLE
61961: EQUAL
61962: IFTRUE 61972
61964: LD_INT 25
61966: DOUBLE
61967: EQUAL
61968: IFTRUE 61972
61970: GO 62028
61972: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61973: LD_ADDR_VAR 0 9
61977: PUSH
61978: LD_VAR 0 35
61982: PUSH
61983: LD_VAR 0 36
61987: PUSH
61988: LD_VAR 0 37
61992: PUSH
61993: LD_VAR 0 38
61997: PUSH
61998: LD_VAR 0 39
62002: PUSH
62003: LD_VAR 0 40
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: PUSH
62016: LD_VAR 0 4
62020: PUSH
62021: LD_INT 1
62023: PLUS
62024: ARRAY
62025: ST_TO_ADDR
62026: GO 62393
62028: LD_INT 6
62030: DOUBLE
62031: EQUAL
62032: IFTRUE 62084
62034: LD_INT 7
62036: DOUBLE
62037: EQUAL
62038: IFTRUE 62084
62040: LD_INT 8
62042: DOUBLE
62043: EQUAL
62044: IFTRUE 62084
62046: LD_INT 13
62048: DOUBLE
62049: EQUAL
62050: IFTRUE 62084
62052: LD_INT 12
62054: DOUBLE
62055: EQUAL
62056: IFTRUE 62084
62058: LD_INT 15
62060: DOUBLE
62061: EQUAL
62062: IFTRUE 62084
62064: LD_INT 11
62066: DOUBLE
62067: EQUAL
62068: IFTRUE 62084
62070: LD_INT 14
62072: DOUBLE
62073: EQUAL
62074: IFTRUE 62084
62076: LD_INT 10
62078: DOUBLE
62079: EQUAL
62080: IFTRUE 62084
62082: GO 62140
62084: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62085: LD_ADDR_VAR 0 9
62089: PUSH
62090: LD_VAR 0 41
62094: PUSH
62095: LD_VAR 0 42
62099: PUSH
62100: LD_VAR 0 43
62104: PUSH
62105: LD_VAR 0 44
62109: PUSH
62110: LD_VAR 0 45
62114: PUSH
62115: LD_VAR 0 46
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: PUSH
62128: LD_VAR 0 4
62132: PUSH
62133: LD_INT 1
62135: PLUS
62136: ARRAY
62137: ST_TO_ADDR
62138: GO 62393
62140: LD_INT 36
62142: DOUBLE
62143: EQUAL
62144: IFTRUE 62148
62146: GO 62204
62148: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62149: LD_ADDR_VAR 0 9
62153: PUSH
62154: LD_VAR 0 47
62158: PUSH
62159: LD_VAR 0 48
62163: PUSH
62164: LD_VAR 0 49
62168: PUSH
62169: LD_VAR 0 50
62173: PUSH
62174: LD_VAR 0 51
62178: PUSH
62179: LD_VAR 0 52
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: PUSH
62192: LD_VAR 0 4
62196: PUSH
62197: LD_INT 1
62199: PLUS
62200: ARRAY
62201: ST_TO_ADDR
62202: GO 62393
62204: LD_INT 4
62206: DOUBLE
62207: EQUAL
62208: IFTRUE 62230
62210: LD_INT 5
62212: DOUBLE
62213: EQUAL
62214: IFTRUE 62230
62216: LD_INT 34
62218: DOUBLE
62219: EQUAL
62220: IFTRUE 62230
62222: LD_INT 37
62224: DOUBLE
62225: EQUAL
62226: IFTRUE 62230
62228: GO 62286
62230: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62231: LD_ADDR_VAR 0 9
62235: PUSH
62236: LD_VAR 0 53
62240: PUSH
62241: LD_VAR 0 54
62245: PUSH
62246: LD_VAR 0 55
62250: PUSH
62251: LD_VAR 0 56
62255: PUSH
62256: LD_VAR 0 57
62260: PUSH
62261: LD_VAR 0 58
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: PUSH
62274: LD_VAR 0 4
62278: PUSH
62279: LD_INT 1
62281: PLUS
62282: ARRAY
62283: ST_TO_ADDR
62284: GO 62393
62286: LD_INT 31
62288: DOUBLE
62289: EQUAL
62290: IFTRUE 62336
62292: LD_INT 32
62294: DOUBLE
62295: EQUAL
62296: IFTRUE 62336
62298: LD_INT 33
62300: DOUBLE
62301: EQUAL
62302: IFTRUE 62336
62304: LD_INT 27
62306: DOUBLE
62307: EQUAL
62308: IFTRUE 62336
62310: LD_INT 26
62312: DOUBLE
62313: EQUAL
62314: IFTRUE 62336
62316: LD_INT 28
62318: DOUBLE
62319: EQUAL
62320: IFTRUE 62336
62322: LD_INT 29
62324: DOUBLE
62325: EQUAL
62326: IFTRUE 62336
62328: LD_INT 30
62330: DOUBLE
62331: EQUAL
62332: IFTRUE 62336
62334: GO 62392
62336: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62337: LD_ADDR_VAR 0 9
62341: PUSH
62342: LD_VAR 0 59
62346: PUSH
62347: LD_VAR 0 60
62351: PUSH
62352: LD_VAR 0 61
62356: PUSH
62357: LD_VAR 0 62
62361: PUSH
62362: LD_VAR 0 63
62366: PUSH
62367: LD_VAR 0 64
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: PUSH
62380: LD_VAR 0 4
62384: PUSH
62385: LD_INT 1
62387: PLUS
62388: ARRAY
62389: ST_TO_ADDR
62390: GO 62393
62392: POP
// temp_list2 = [ ] ;
62393: LD_ADDR_VAR 0 10
62397: PUSH
62398: EMPTY
62399: ST_TO_ADDR
// for i in temp_list do
62400: LD_ADDR_VAR 0 8
62404: PUSH
62405: LD_VAR 0 9
62409: PUSH
62410: FOR_IN
62411: IFFALSE 62463
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62413: LD_ADDR_VAR 0 10
62417: PUSH
62418: LD_VAR 0 10
62422: PUSH
62423: LD_VAR 0 8
62427: PUSH
62428: LD_INT 1
62430: ARRAY
62431: PUSH
62432: LD_VAR 0 2
62436: PLUS
62437: PUSH
62438: LD_VAR 0 8
62442: PUSH
62443: LD_INT 2
62445: ARRAY
62446: PUSH
62447: LD_VAR 0 3
62451: PLUS
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: EMPTY
62458: LIST
62459: ADD
62460: ST_TO_ADDR
62461: GO 62410
62463: POP
62464: POP
// result = temp_list2 ;
62465: LD_ADDR_VAR 0 7
62469: PUSH
62470: LD_VAR 0 10
62474: ST_TO_ADDR
// end ;
62475: LD_VAR 0 7
62479: RET
// export function EnemyInRange ( unit , dist ) ; begin
62480: LD_INT 0
62482: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62483: LD_ADDR_VAR 0 3
62487: PUSH
62488: LD_VAR 0 1
62492: PPUSH
62493: CALL_OW 255
62497: PPUSH
62498: LD_VAR 0 1
62502: PPUSH
62503: CALL_OW 250
62507: PPUSH
62508: LD_VAR 0 1
62512: PPUSH
62513: CALL_OW 251
62517: PPUSH
62518: LD_VAR 0 2
62522: PPUSH
62523: CALL 35737 0 4
62527: PUSH
62528: LD_INT 4
62530: ARRAY
62531: ST_TO_ADDR
// end ;
62532: LD_VAR 0 3
62536: RET
// export function PlayerSeeMe ( unit ) ; begin
62537: LD_INT 0
62539: PPUSH
// result := See ( your_side , unit ) ;
62540: LD_ADDR_VAR 0 2
62544: PUSH
62545: LD_OWVAR 2
62549: PPUSH
62550: LD_VAR 0 1
62554: PPUSH
62555: CALL_OW 292
62559: ST_TO_ADDR
// end ;
62560: LD_VAR 0 2
62564: RET
// export function ReverseDir ( unit ) ; begin
62565: LD_INT 0
62567: PPUSH
// if not unit then
62568: LD_VAR 0 1
62572: NOT
62573: IFFALSE 62577
// exit ;
62575: GO 62600
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62577: LD_ADDR_VAR 0 2
62581: PUSH
62582: LD_VAR 0 1
62586: PPUSH
62587: CALL_OW 254
62591: PUSH
62592: LD_INT 3
62594: PLUS
62595: PUSH
62596: LD_INT 6
62598: MOD
62599: ST_TO_ADDR
// end ;
62600: LD_VAR 0 2
62604: RET
// export function ReverseArray ( array ) ; var i ; begin
62605: LD_INT 0
62607: PPUSH
62608: PPUSH
// if not array then
62609: LD_VAR 0 1
62613: NOT
62614: IFFALSE 62618
// exit ;
62616: GO 62673
// result := [ ] ;
62618: LD_ADDR_VAR 0 2
62622: PUSH
62623: EMPTY
62624: ST_TO_ADDR
// for i := array downto 1 do
62625: LD_ADDR_VAR 0 3
62629: PUSH
62630: DOUBLE
62631: LD_VAR 0 1
62635: INC
62636: ST_TO_ADDR
62637: LD_INT 1
62639: PUSH
62640: FOR_DOWNTO
62641: IFFALSE 62671
// result := Join ( result , array [ i ] ) ;
62643: LD_ADDR_VAR 0 2
62647: PUSH
62648: LD_VAR 0 2
62652: PPUSH
62653: LD_VAR 0 1
62657: PUSH
62658: LD_VAR 0 3
62662: ARRAY
62663: PPUSH
62664: CALL 67515 0 2
62668: ST_TO_ADDR
62669: GO 62640
62671: POP
62672: POP
// end ;
62673: LD_VAR 0 2
62677: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62678: LD_INT 0
62680: PPUSH
62681: PPUSH
62682: PPUSH
62683: PPUSH
62684: PPUSH
62685: PPUSH
// if not unit or not hexes then
62686: LD_VAR 0 1
62690: NOT
62691: IFTRUE 62700
62693: PUSH
62694: LD_VAR 0 2
62698: NOT
62699: OR
62700: IFFALSE 62704
// exit ;
62702: GO 62827
// dist := 9999 ;
62704: LD_ADDR_VAR 0 5
62708: PUSH
62709: LD_INT 9999
62711: ST_TO_ADDR
// for i = 1 to hexes do
62712: LD_ADDR_VAR 0 4
62716: PUSH
62717: DOUBLE
62718: LD_INT 1
62720: DEC
62721: ST_TO_ADDR
62722: LD_VAR 0 2
62726: PUSH
62727: FOR_TO
62728: IFFALSE 62815
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62730: LD_ADDR_VAR 0 6
62734: PUSH
62735: LD_VAR 0 1
62739: PPUSH
62740: LD_VAR 0 2
62744: PUSH
62745: LD_VAR 0 4
62749: ARRAY
62750: PUSH
62751: LD_INT 1
62753: ARRAY
62754: PPUSH
62755: LD_VAR 0 2
62759: PUSH
62760: LD_VAR 0 4
62764: ARRAY
62765: PUSH
62766: LD_INT 2
62768: ARRAY
62769: PPUSH
62770: CALL_OW 297
62774: ST_TO_ADDR
// if tdist < dist then
62775: LD_VAR 0 6
62779: PUSH
62780: LD_VAR 0 5
62784: LESS
62785: IFFALSE 62813
// begin hex := hexes [ i ] ;
62787: LD_ADDR_VAR 0 8
62791: PUSH
62792: LD_VAR 0 2
62796: PUSH
62797: LD_VAR 0 4
62801: ARRAY
62802: ST_TO_ADDR
// dist := tdist ;
62803: LD_ADDR_VAR 0 5
62807: PUSH
62808: LD_VAR 0 6
62812: ST_TO_ADDR
// end ; end ;
62813: GO 62727
62815: POP
62816: POP
// result := hex ;
62817: LD_ADDR_VAR 0 3
62821: PUSH
62822: LD_VAR 0 8
62826: ST_TO_ADDR
// end ;
62827: LD_VAR 0 3
62831: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62832: LD_INT 0
62834: PPUSH
62835: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62836: LD_VAR 0 1
62840: NOT
62841: IFTRUE 62880
62843: PUSH
62844: LD_VAR 0 1
62848: PUSH
62849: LD_INT 21
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 23
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PPUSH
62873: CALL_OW 69
62877: IN
62878: NOT
62879: OR
62880: IFFALSE 62884
// exit ;
62882: GO 62931
// for i = 1 to 3 do
62884: LD_ADDR_VAR 0 3
62888: PUSH
62889: DOUBLE
62890: LD_INT 1
62892: DEC
62893: ST_TO_ADDR
62894: LD_INT 3
62896: PUSH
62897: FOR_TO
62898: IFFALSE 62929
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62900: LD_VAR 0 1
62904: PPUSH
62905: CALL_OW 250
62909: PPUSH
62910: LD_VAR 0 1
62914: PPUSH
62915: CALL_OW 251
62919: PPUSH
62920: LD_INT 1
62922: PPUSH
62923: CALL_OW 453
62927: GO 62897
62929: POP
62930: POP
// end ;
62931: LD_VAR 0 2
62935: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62936: LD_INT 0
62938: PPUSH
62939: PPUSH
62940: PPUSH
62941: PPUSH
62942: PPUSH
62943: PPUSH
// if not unit or not enemy_unit then
62944: LD_VAR 0 1
62948: NOT
62949: IFTRUE 62958
62951: PUSH
62952: LD_VAR 0 2
62956: NOT
62957: OR
62958: IFFALSE 62962
// exit ;
62960: GO 63433
// if GetLives ( i ) < 250 then
62962: LD_VAR 0 4
62966: PPUSH
62967: CALL_OW 256
62971: PUSH
62972: LD_INT 250
62974: LESS
62975: IFFALSE 62988
// begin ComAutodestruct ( i ) ;
62977: LD_VAR 0 4
62981: PPUSH
62982: CALL 62832 0 1
// exit ;
62986: GO 63433
// end ; x := GetX ( enemy_unit ) ;
62988: LD_ADDR_VAR 0 7
62992: PUSH
62993: LD_VAR 0 2
62997: PPUSH
62998: CALL_OW 250
63002: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63003: LD_ADDR_VAR 0 8
63007: PUSH
63008: LD_VAR 0 2
63012: PPUSH
63013: CALL_OW 251
63017: ST_TO_ADDR
// if not x or not y then
63018: LD_VAR 0 7
63022: NOT
63023: IFTRUE 63032
63025: PUSH
63026: LD_VAR 0 8
63030: NOT
63031: OR
63032: IFFALSE 63036
// exit ;
63034: GO 63433
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63036: LD_ADDR_VAR 0 6
63040: PUSH
63041: LD_VAR 0 7
63045: PPUSH
63046: LD_INT 0
63048: PPUSH
63049: LD_INT 4
63051: PPUSH
63052: CALL_OW 272
63056: PUSH
63057: LD_VAR 0 8
63061: PPUSH
63062: LD_INT 0
63064: PPUSH
63065: LD_INT 4
63067: PPUSH
63068: CALL_OW 273
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_VAR 0 7
63081: PPUSH
63082: LD_INT 1
63084: PPUSH
63085: LD_INT 4
63087: PPUSH
63088: CALL_OW 272
63092: PUSH
63093: LD_VAR 0 8
63097: PPUSH
63098: LD_INT 1
63100: PPUSH
63101: LD_INT 4
63103: PPUSH
63104: CALL_OW 273
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_VAR 0 7
63117: PPUSH
63118: LD_INT 2
63120: PPUSH
63121: LD_INT 4
63123: PPUSH
63124: CALL_OW 272
63128: PUSH
63129: LD_VAR 0 8
63133: PPUSH
63134: LD_INT 2
63136: PPUSH
63137: LD_INT 4
63139: PPUSH
63140: CALL_OW 273
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_VAR 0 7
63153: PPUSH
63154: LD_INT 3
63156: PPUSH
63157: LD_INT 4
63159: PPUSH
63160: CALL_OW 272
63164: PUSH
63165: LD_VAR 0 8
63169: PPUSH
63170: LD_INT 3
63172: PPUSH
63173: LD_INT 4
63175: PPUSH
63176: CALL_OW 273
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_VAR 0 7
63189: PPUSH
63190: LD_INT 4
63192: PPUSH
63193: LD_INT 4
63195: PPUSH
63196: CALL_OW 272
63200: PUSH
63201: LD_VAR 0 8
63205: PPUSH
63206: LD_INT 4
63208: PPUSH
63209: LD_INT 4
63211: PPUSH
63212: CALL_OW 273
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_VAR 0 7
63225: PPUSH
63226: LD_INT 5
63228: PPUSH
63229: LD_INT 4
63231: PPUSH
63232: CALL_OW 272
63236: PUSH
63237: LD_VAR 0 8
63241: PPUSH
63242: LD_INT 5
63244: PPUSH
63245: LD_INT 4
63247: PPUSH
63248: CALL_OW 273
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: ST_TO_ADDR
// for i = tmp downto 1 do
63265: LD_ADDR_VAR 0 4
63269: PUSH
63270: DOUBLE
63271: LD_VAR 0 6
63275: INC
63276: ST_TO_ADDR
63277: LD_INT 1
63279: PUSH
63280: FOR_DOWNTO
63281: IFFALSE 63384
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63283: LD_VAR 0 6
63287: PUSH
63288: LD_VAR 0 4
63292: ARRAY
63293: PUSH
63294: LD_INT 1
63296: ARRAY
63297: PPUSH
63298: LD_VAR 0 6
63302: PUSH
63303: LD_VAR 0 4
63307: ARRAY
63308: PUSH
63309: LD_INT 2
63311: ARRAY
63312: PPUSH
63313: CALL_OW 488
63317: NOT
63318: IFTRUE 63360
63320: PUSH
63321: LD_VAR 0 6
63325: PUSH
63326: LD_VAR 0 4
63330: ARRAY
63331: PUSH
63332: LD_INT 1
63334: ARRAY
63335: PPUSH
63336: LD_VAR 0 6
63340: PUSH
63341: LD_VAR 0 4
63345: ARRAY
63346: PUSH
63347: LD_INT 2
63349: ARRAY
63350: PPUSH
63351: CALL_OW 428
63355: PUSH
63356: LD_INT 0
63358: NONEQUAL
63359: OR
63360: IFFALSE 63382
// tmp := Delete ( tmp , i ) ;
63362: LD_ADDR_VAR 0 6
63366: PUSH
63367: LD_VAR 0 6
63371: PPUSH
63372: LD_VAR 0 4
63376: PPUSH
63377: CALL_OW 3
63381: ST_TO_ADDR
63382: GO 63280
63384: POP
63385: POP
// j := GetClosestHex ( unit , tmp ) ;
63386: LD_ADDR_VAR 0 5
63390: PUSH
63391: LD_VAR 0 1
63395: PPUSH
63396: LD_VAR 0 6
63400: PPUSH
63401: CALL 62678 0 2
63405: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63406: LD_VAR 0 1
63410: PPUSH
63411: LD_VAR 0 5
63415: PUSH
63416: LD_INT 1
63418: ARRAY
63419: PPUSH
63420: LD_VAR 0 5
63424: PUSH
63425: LD_INT 2
63427: ARRAY
63428: PPUSH
63429: CALL_OW 111
// end ;
63433: LD_VAR 0 3
63437: RET
// export function PrepareApemanSoldier ( ) ; begin
63438: LD_INT 0
63440: PPUSH
// uc_nation := 0 ;
63441: LD_ADDR_OWVAR 21
63445: PUSH
63446: LD_INT 0
63448: ST_TO_ADDR
// hc_sex := sex_male ;
63449: LD_ADDR_OWVAR 27
63453: PUSH
63454: LD_INT 1
63456: ST_TO_ADDR
// hc_name :=  ;
63457: LD_ADDR_OWVAR 26
63461: PUSH
63462: LD_STRING 
63464: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63465: LD_ADDR_OWVAR 28
63469: PUSH
63470: LD_INT 15
63472: ST_TO_ADDR
// hc_gallery :=  ;
63473: LD_ADDR_OWVAR 33
63477: PUSH
63478: LD_STRING 
63480: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63481: LD_ADDR_OWVAR 31
63485: PUSH
63486: LD_INT 0
63488: PPUSH
63489: LD_INT 3
63491: PPUSH
63492: CALL_OW 12
63496: PUSH
63497: LD_INT 0
63499: PPUSH
63500: LD_INT 3
63502: PPUSH
63503: CALL_OW 12
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63520: LD_ADDR_OWVAR 29
63524: PUSH
63525: LD_INT 12
63527: PUSH
63528: LD_INT 12
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: ST_TO_ADDR
// end ;
63535: LD_VAR 0 1
63539: RET
// export function PrepareApemanEngineer ( ) ; begin
63540: LD_INT 0
63542: PPUSH
// uc_nation := 0 ;
63543: LD_ADDR_OWVAR 21
63547: PUSH
63548: LD_INT 0
63550: ST_TO_ADDR
// hc_sex := sex_male ;
63551: LD_ADDR_OWVAR 27
63555: PUSH
63556: LD_INT 1
63558: ST_TO_ADDR
// hc_name :=  ;
63559: LD_ADDR_OWVAR 26
63563: PUSH
63564: LD_STRING 
63566: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63567: LD_ADDR_OWVAR 28
63571: PUSH
63572: LD_INT 16
63574: ST_TO_ADDR
// hc_gallery :=  ;
63575: LD_ADDR_OWVAR 33
63579: PUSH
63580: LD_STRING 
63582: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63583: LD_ADDR_OWVAR 31
63587: PUSH
63588: LD_INT 0
63590: PPUSH
63591: LD_INT 3
63593: PPUSH
63594: CALL_OW 12
63598: PUSH
63599: LD_INT 0
63601: PPUSH
63602: LD_INT 3
63604: PPUSH
63605: CALL_OW 12
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63622: LD_ADDR_OWVAR 29
63626: PUSH
63627: LD_INT 12
63629: PUSH
63630: LD_INT 12
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: ST_TO_ADDR
// end ;
63637: LD_VAR 0 1
63641: RET
// export function PrepareApeman ( agressivity ) ; begin
63642: LD_INT 0
63644: PPUSH
// uc_side := 0 ;
63645: LD_ADDR_OWVAR 20
63649: PUSH
63650: LD_INT 0
63652: ST_TO_ADDR
// uc_nation := 0 ;
63653: LD_ADDR_OWVAR 21
63657: PUSH
63658: LD_INT 0
63660: ST_TO_ADDR
// hc_sex := sex_male ;
63661: LD_ADDR_OWVAR 27
63665: PUSH
63666: LD_INT 1
63668: ST_TO_ADDR
// hc_class := class_apeman ;
63669: LD_ADDR_OWVAR 28
63673: PUSH
63674: LD_INT 12
63676: ST_TO_ADDR
// hc_gallery :=  ;
63677: LD_ADDR_OWVAR 33
63681: PUSH
63682: LD_STRING 
63684: ST_TO_ADDR
// hc_name :=  ;
63685: LD_ADDR_OWVAR 26
63689: PUSH
63690: LD_STRING 
63692: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63693: LD_ADDR_OWVAR 29
63697: PUSH
63698: LD_INT 12
63700: PUSH
63701: LD_INT 12
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: ST_TO_ADDR
// if agressivity = 0 then
63708: LD_VAR 0 1
63712: PUSH
63713: LD_INT 0
63715: EQUAL
63716: IFFALSE 63728
// hc_agressivity := 0 else
63718: LD_ADDR_OWVAR 35
63722: PUSH
63723: LD_INT 0
63725: ST_TO_ADDR
63726: GO 63749
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63728: LD_ADDR_OWVAR 35
63732: PUSH
63733: LD_VAR 0 1
63737: NEG
63738: PPUSH
63739: LD_VAR 0 1
63743: PPUSH
63744: CALL_OW 12
63748: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63749: LD_ADDR_OWVAR 31
63753: PUSH
63754: LD_INT 0
63756: PPUSH
63757: LD_INT 3
63759: PPUSH
63760: CALL_OW 12
63764: PUSH
63765: LD_INT 0
63767: PPUSH
63768: LD_INT 3
63770: PPUSH
63771: CALL_OW 12
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: ST_TO_ADDR
// end ;
63788: LD_VAR 0 2
63792: RET
// export function PrepareTiger ( agressivity ) ; begin
63793: LD_INT 0
63795: PPUSH
// uc_side := 0 ;
63796: LD_ADDR_OWVAR 20
63800: PUSH
63801: LD_INT 0
63803: ST_TO_ADDR
// uc_nation := 0 ;
63804: LD_ADDR_OWVAR 21
63808: PUSH
63809: LD_INT 0
63811: ST_TO_ADDR
// InitHc ;
63812: CALL_OW 19
// hc_class := class_tiger ;
63816: LD_ADDR_OWVAR 28
63820: PUSH
63821: LD_INT 14
63823: ST_TO_ADDR
// hc_gallery :=  ;
63824: LD_ADDR_OWVAR 33
63828: PUSH
63829: LD_STRING 
63831: ST_TO_ADDR
// hc_name :=  ;
63832: LD_ADDR_OWVAR 26
63836: PUSH
63837: LD_STRING 
63839: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63840: LD_ADDR_OWVAR 35
63844: PUSH
63845: LD_VAR 0 1
63849: NEG
63850: PPUSH
63851: LD_VAR 0 1
63855: PPUSH
63856: CALL_OW 12
63860: ST_TO_ADDR
// end ;
63861: LD_VAR 0 2
63865: RET
// export function PrepareEnchidna ( ) ; begin
63866: LD_INT 0
63868: PPUSH
// uc_side := 0 ;
63869: LD_ADDR_OWVAR 20
63873: PUSH
63874: LD_INT 0
63876: ST_TO_ADDR
// uc_nation := 0 ;
63877: LD_ADDR_OWVAR 21
63881: PUSH
63882: LD_INT 0
63884: ST_TO_ADDR
// InitHc ;
63885: CALL_OW 19
// hc_class := class_baggie ;
63889: LD_ADDR_OWVAR 28
63893: PUSH
63894: LD_INT 13
63896: ST_TO_ADDR
// hc_gallery :=  ;
63897: LD_ADDR_OWVAR 33
63901: PUSH
63902: LD_STRING 
63904: ST_TO_ADDR
// hc_name :=  ;
63905: LD_ADDR_OWVAR 26
63909: PUSH
63910: LD_STRING 
63912: ST_TO_ADDR
// end ;
63913: LD_VAR 0 1
63917: RET
// export function PrepareFrog ( ) ; begin
63918: LD_INT 0
63920: PPUSH
// uc_side := 0 ;
63921: LD_ADDR_OWVAR 20
63925: PUSH
63926: LD_INT 0
63928: ST_TO_ADDR
// uc_nation := 0 ;
63929: LD_ADDR_OWVAR 21
63933: PUSH
63934: LD_INT 0
63936: ST_TO_ADDR
// InitHc ;
63937: CALL_OW 19
// hc_class := class_frog ;
63941: LD_ADDR_OWVAR 28
63945: PUSH
63946: LD_INT 19
63948: ST_TO_ADDR
// hc_gallery :=  ;
63949: LD_ADDR_OWVAR 33
63953: PUSH
63954: LD_STRING 
63956: ST_TO_ADDR
// hc_name :=  ;
63957: LD_ADDR_OWVAR 26
63961: PUSH
63962: LD_STRING 
63964: ST_TO_ADDR
// end ;
63965: LD_VAR 0 1
63969: RET
// export function PrepareFish ( ) ; begin
63970: LD_INT 0
63972: PPUSH
// uc_side := 0 ;
63973: LD_ADDR_OWVAR 20
63977: PUSH
63978: LD_INT 0
63980: ST_TO_ADDR
// uc_nation := 0 ;
63981: LD_ADDR_OWVAR 21
63985: PUSH
63986: LD_INT 0
63988: ST_TO_ADDR
// InitHc ;
63989: CALL_OW 19
// hc_class := class_fish ;
63993: LD_ADDR_OWVAR 28
63997: PUSH
63998: LD_INT 20
64000: ST_TO_ADDR
// hc_gallery :=  ;
64001: LD_ADDR_OWVAR 33
64005: PUSH
64006: LD_STRING 
64008: ST_TO_ADDR
// hc_name :=  ;
64009: LD_ADDR_OWVAR 26
64013: PUSH
64014: LD_STRING 
64016: ST_TO_ADDR
// end ;
64017: LD_VAR 0 1
64021: RET
// export function PrepareBird ( ) ; begin
64022: LD_INT 0
64024: PPUSH
// uc_side := 0 ;
64025: LD_ADDR_OWVAR 20
64029: PUSH
64030: LD_INT 0
64032: ST_TO_ADDR
// uc_nation := 0 ;
64033: LD_ADDR_OWVAR 21
64037: PUSH
64038: LD_INT 0
64040: ST_TO_ADDR
// InitHc ;
64041: CALL_OW 19
// hc_class := class_phororhacos ;
64045: LD_ADDR_OWVAR 28
64049: PUSH
64050: LD_INT 18
64052: ST_TO_ADDR
// hc_gallery :=  ;
64053: LD_ADDR_OWVAR 33
64057: PUSH
64058: LD_STRING 
64060: ST_TO_ADDR
// hc_name :=  ;
64061: LD_ADDR_OWVAR 26
64065: PUSH
64066: LD_STRING 
64068: ST_TO_ADDR
// end ;
64069: LD_VAR 0 1
64073: RET
// export function PrepareHorse ( ) ; begin
64074: LD_INT 0
64076: PPUSH
// uc_side := 0 ;
64077: LD_ADDR_OWVAR 20
64081: PUSH
64082: LD_INT 0
64084: ST_TO_ADDR
// uc_nation := 0 ;
64085: LD_ADDR_OWVAR 21
64089: PUSH
64090: LD_INT 0
64092: ST_TO_ADDR
// InitHc ;
64093: CALL_OW 19
// hc_class := class_horse ;
64097: LD_ADDR_OWVAR 28
64101: PUSH
64102: LD_INT 21
64104: ST_TO_ADDR
// hc_gallery :=  ;
64105: LD_ADDR_OWVAR 33
64109: PUSH
64110: LD_STRING 
64112: ST_TO_ADDR
// hc_name :=  ;
64113: LD_ADDR_OWVAR 26
64117: PUSH
64118: LD_STRING 
64120: ST_TO_ADDR
// end ;
64121: LD_VAR 0 1
64125: RET
// export function PrepareMastodont ( ) ; begin
64126: LD_INT 0
64128: PPUSH
// uc_side := 0 ;
64129: LD_ADDR_OWVAR 20
64133: PUSH
64134: LD_INT 0
64136: ST_TO_ADDR
// uc_nation := 0 ;
64137: LD_ADDR_OWVAR 21
64141: PUSH
64142: LD_INT 0
64144: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64145: LD_ADDR_OWVAR 37
64149: PUSH
64150: LD_INT 31
64152: ST_TO_ADDR
// vc_control := control_rider ;
64153: LD_ADDR_OWVAR 38
64157: PUSH
64158: LD_INT 4
64160: ST_TO_ADDR
// end ;
64161: LD_VAR 0 1
64165: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64166: LD_INT 0
64168: PPUSH
64169: PPUSH
64170: PPUSH
// uc_side = 0 ;
64171: LD_ADDR_OWVAR 20
64175: PUSH
64176: LD_INT 0
64178: ST_TO_ADDR
// uc_nation = 0 ;
64179: LD_ADDR_OWVAR 21
64183: PUSH
64184: LD_INT 0
64186: ST_TO_ADDR
// InitHc_All ( ) ;
64187: CALL_OW 584
// InitVc ;
64191: CALL_OW 20
// if mastodonts then
64195: LD_VAR 0 6
64199: IFFALSE 64266
// for i = 1 to mastodonts do
64201: LD_ADDR_VAR 0 11
64205: PUSH
64206: DOUBLE
64207: LD_INT 1
64209: DEC
64210: ST_TO_ADDR
64211: LD_VAR 0 6
64215: PUSH
64216: FOR_TO
64217: IFFALSE 64264
// begin vc_chassis := 31 ;
64219: LD_ADDR_OWVAR 37
64223: PUSH
64224: LD_INT 31
64226: ST_TO_ADDR
// vc_control := control_rider ;
64227: LD_ADDR_OWVAR 38
64231: PUSH
64232: LD_INT 4
64234: ST_TO_ADDR
// animal := CreateVehicle ;
64235: LD_ADDR_VAR 0 12
64239: PUSH
64240: CALL_OW 45
64244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64245: LD_VAR 0 12
64249: PPUSH
64250: LD_VAR 0 8
64254: PPUSH
64255: LD_INT 0
64257: PPUSH
64258: CALL 66408 0 3
// end ;
64262: GO 64216
64264: POP
64265: POP
// if horses then
64266: LD_VAR 0 5
64270: IFFALSE 64337
// for i = 1 to horses do
64272: LD_ADDR_VAR 0 11
64276: PUSH
64277: DOUBLE
64278: LD_INT 1
64280: DEC
64281: ST_TO_ADDR
64282: LD_VAR 0 5
64286: PUSH
64287: FOR_TO
64288: IFFALSE 64335
// begin hc_class := 21 ;
64290: LD_ADDR_OWVAR 28
64294: PUSH
64295: LD_INT 21
64297: ST_TO_ADDR
// hc_gallery :=  ;
64298: LD_ADDR_OWVAR 33
64302: PUSH
64303: LD_STRING 
64305: ST_TO_ADDR
// animal := CreateHuman ;
64306: LD_ADDR_VAR 0 12
64310: PUSH
64311: CALL_OW 44
64315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64316: LD_VAR 0 12
64320: PPUSH
64321: LD_VAR 0 8
64325: PPUSH
64326: LD_INT 0
64328: PPUSH
64329: CALL 66408 0 3
// end ;
64333: GO 64287
64335: POP
64336: POP
// if birds then
64337: LD_VAR 0 1
64341: IFFALSE 64408
// for i = 1 to birds do
64343: LD_ADDR_VAR 0 11
64347: PUSH
64348: DOUBLE
64349: LD_INT 1
64351: DEC
64352: ST_TO_ADDR
64353: LD_VAR 0 1
64357: PUSH
64358: FOR_TO
64359: IFFALSE 64406
// begin hc_class := 18 ;
64361: LD_ADDR_OWVAR 28
64365: PUSH
64366: LD_INT 18
64368: ST_TO_ADDR
// hc_gallery =  ;
64369: LD_ADDR_OWVAR 33
64373: PUSH
64374: LD_STRING 
64376: ST_TO_ADDR
// animal := CreateHuman ;
64377: LD_ADDR_VAR 0 12
64381: PUSH
64382: CALL_OW 44
64386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64387: LD_VAR 0 12
64391: PPUSH
64392: LD_VAR 0 8
64396: PPUSH
64397: LD_INT 0
64399: PPUSH
64400: CALL 66408 0 3
// end ;
64404: GO 64358
64406: POP
64407: POP
// if tigers then
64408: LD_VAR 0 2
64412: IFFALSE 64496
// for i = 1 to tigers do
64414: LD_ADDR_VAR 0 11
64418: PUSH
64419: DOUBLE
64420: LD_INT 1
64422: DEC
64423: ST_TO_ADDR
64424: LD_VAR 0 2
64428: PUSH
64429: FOR_TO
64430: IFFALSE 64494
// begin hc_class = class_tiger ;
64432: LD_ADDR_OWVAR 28
64436: PUSH
64437: LD_INT 14
64439: ST_TO_ADDR
// hc_gallery =  ;
64440: LD_ADDR_OWVAR 33
64444: PUSH
64445: LD_STRING 
64447: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64448: LD_ADDR_OWVAR 35
64452: PUSH
64453: LD_INT 7
64455: NEG
64456: PPUSH
64457: LD_INT 7
64459: PPUSH
64460: CALL_OW 12
64464: ST_TO_ADDR
// animal := CreateHuman ;
64465: LD_ADDR_VAR 0 12
64469: PUSH
64470: CALL_OW 44
64474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64475: LD_VAR 0 12
64479: PPUSH
64480: LD_VAR 0 8
64484: PPUSH
64485: LD_INT 0
64487: PPUSH
64488: CALL 66408 0 3
// end ;
64492: GO 64429
64494: POP
64495: POP
// if apemans then
64496: LD_VAR 0 3
64500: IFFALSE 64623
// for i = 1 to apemans do
64502: LD_ADDR_VAR 0 11
64506: PUSH
64507: DOUBLE
64508: LD_INT 1
64510: DEC
64511: ST_TO_ADDR
64512: LD_VAR 0 3
64516: PUSH
64517: FOR_TO
64518: IFFALSE 64621
// begin hc_class = class_apeman ;
64520: LD_ADDR_OWVAR 28
64524: PUSH
64525: LD_INT 12
64527: ST_TO_ADDR
// hc_gallery =  ;
64528: LD_ADDR_OWVAR 33
64532: PUSH
64533: LD_STRING 
64535: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64536: LD_ADDR_OWVAR 35
64540: PUSH
64541: LD_INT 2
64543: NEG
64544: PPUSH
64545: LD_INT 2
64547: PPUSH
64548: CALL_OW 12
64552: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64553: LD_ADDR_OWVAR 31
64557: PUSH
64558: LD_INT 1
64560: PPUSH
64561: LD_INT 3
64563: PPUSH
64564: CALL_OW 12
64568: PUSH
64569: LD_INT 1
64571: PPUSH
64572: LD_INT 3
64574: PPUSH
64575: CALL_OW 12
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: ST_TO_ADDR
// animal := CreateHuman ;
64592: LD_ADDR_VAR 0 12
64596: PUSH
64597: CALL_OW 44
64601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64602: LD_VAR 0 12
64606: PPUSH
64607: LD_VAR 0 8
64611: PPUSH
64612: LD_INT 0
64614: PPUSH
64615: CALL 66408 0 3
// end ;
64619: GO 64517
64621: POP
64622: POP
// if enchidnas then
64623: LD_VAR 0 4
64627: IFFALSE 64694
// for i = 1 to enchidnas do
64629: LD_ADDR_VAR 0 11
64633: PUSH
64634: DOUBLE
64635: LD_INT 1
64637: DEC
64638: ST_TO_ADDR
64639: LD_VAR 0 4
64643: PUSH
64644: FOR_TO
64645: IFFALSE 64692
// begin hc_class = 13 ;
64647: LD_ADDR_OWVAR 28
64651: PUSH
64652: LD_INT 13
64654: ST_TO_ADDR
// hc_gallery =  ;
64655: LD_ADDR_OWVAR 33
64659: PUSH
64660: LD_STRING 
64662: ST_TO_ADDR
// animal := CreateHuman ;
64663: LD_ADDR_VAR 0 12
64667: PUSH
64668: CALL_OW 44
64672: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64673: LD_VAR 0 12
64677: PPUSH
64678: LD_VAR 0 8
64682: PPUSH
64683: LD_INT 0
64685: PPUSH
64686: CALL 66408 0 3
// end ;
64690: GO 64644
64692: POP
64693: POP
// if fishes then
64694: LD_VAR 0 7
64698: IFFALSE 64765
// for i = 1 to fishes do
64700: LD_ADDR_VAR 0 11
64704: PUSH
64705: DOUBLE
64706: LD_INT 1
64708: DEC
64709: ST_TO_ADDR
64710: LD_VAR 0 7
64714: PUSH
64715: FOR_TO
64716: IFFALSE 64763
// begin hc_class = 20 ;
64718: LD_ADDR_OWVAR 28
64722: PUSH
64723: LD_INT 20
64725: ST_TO_ADDR
// hc_gallery =  ;
64726: LD_ADDR_OWVAR 33
64730: PUSH
64731: LD_STRING 
64733: ST_TO_ADDR
// animal := CreateHuman ;
64734: LD_ADDR_VAR 0 12
64738: PUSH
64739: CALL_OW 44
64743: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64744: LD_VAR 0 12
64748: PPUSH
64749: LD_VAR 0 9
64753: PPUSH
64754: LD_INT 0
64756: PPUSH
64757: CALL 66408 0 3
// end ;
64761: GO 64715
64763: POP
64764: POP
// end ;
64765: LD_VAR 0 10
64769: RET
// export function WantHeal ( sci , unit ) ; begin
64770: LD_INT 0
64772: PPUSH
// if GetTaskList ( sci ) > 0 then
64773: LD_VAR 0 1
64777: PPUSH
64778: CALL_OW 437
64782: PUSH
64783: LD_INT 0
64785: GREATER
64786: IFFALSE 64858
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64788: LD_VAR 0 1
64792: PPUSH
64793: CALL_OW 437
64797: PUSH
64798: LD_INT 1
64800: ARRAY
64801: PUSH
64802: LD_INT 1
64804: ARRAY
64805: PUSH
64806: LD_STRING l
64808: EQUAL
64809: IFFALSE 64836
64811: PUSH
64812: LD_VAR 0 1
64816: PPUSH
64817: CALL_OW 437
64821: PUSH
64822: LD_INT 1
64824: ARRAY
64825: PUSH
64826: LD_INT 4
64828: ARRAY
64829: PUSH
64830: LD_VAR 0 2
64834: EQUAL
64835: AND
64836: IFFALSE 64848
// result := true else
64838: LD_ADDR_VAR 0 3
64842: PUSH
64843: LD_INT 1
64845: ST_TO_ADDR
64846: GO 64856
// result := false ;
64848: LD_ADDR_VAR 0 3
64852: PUSH
64853: LD_INT 0
64855: ST_TO_ADDR
// end else
64856: GO 64866
// result := false ;
64858: LD_ADDR_VAR 0 3
64862: PUSH
64863: LD_INT 0
64865: ST_TO_ADDR
// end ;
64866: LD_VAR 0 3
64870: RET
// export function HealTarget ( sci ) ; begin
64871: LD_INT 0
64873: PPUSH
// if not sci then
64874: LD_VAR 0 1
64878: NOT
64879: IFFALSE 64883
// exit ;
64881: GO 64948
// result := 0 ;
64883: LD_ADDR_VAR 0 2
64887: PUSH
64888: LD_INT 0
64890: ST_TO_ADDR
// if GetTaskList ( sci ) then
64891: LD_VAR 0 1
64895: PPUSH
64896: CALL_OW 437
64900: IFFALSE 64948
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64902: LD_VAR 0 1
64906: PPUSH
64907: CALL_OW 437
64911: PUSH
64912: LD_INT 1
64914: ARRAY
64915: PUSH
64916: LD_INT 1
64918: ARRAY
64919: PUSH
64920: LD_STRING l
64922: EQUAL
64923: IFFALSE 64948
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64925: LD_ADDR_VAR 0 2
64929: PUSH
64930: LD_VAR 0 1
64934: PPUSH
64935: CALL_OW 437
64939: PUSH
64940: LD_INT 1
64942: ARRAY
64943: PUSH
64944: LD_INT 4
64946: ARRAY
64947: ST_TO_ADDR
// end ;
64948: LD_VAR 0 2
64952: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64953: LD_INT 0
64955: PPUSH
64956: PPUSH
64957: PPUSH
64958: PPUSH
// if not base_units then
64959: LD_VAR 0 1
64963: NOT
64964: IFFALSE 64968
// exit ;
64966: GO 65055
// result := false ;
64968: LD_ADDR_VAR 0 2
64972: PUSH
64973: LD_INT 0
64975: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64976: LD_ADDR_VAR 0 5
64980: PUSH
64981: LD_VAR 0 1
64985: PPUSH
64986: LD_INT 21
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PPUSH
64996: CALL_OW 72
65000: ST_TO_ADDR
// if not tmp then
65001: LD_VAR 0 5
65005: NOT
65006: IFFALSE 65010
// exit ;
65008: GO 65055
// for i in tmp do
65010: LD_ADDR_VAR 0 3
65014: PUSH
65015: LD_VAR 0 5
65019: PUSH
65020: FOR_IN
65021: IFFALSE 65053
// begin result := EnemyInRange ( i , 22 ) ;
65023: LD_ADDR_VAR 0 2
65027: PUSH
65028: LD_VAR 0 3
65032: PPUSH
65033: LD_INT 22
65035: PPUSH
65036: CALL 62480 0 2
65040: ST_TO_ADDR
// if result then
65041: LD_VAR 0 2
65045: IFFALSE 65051
// exit ;
65047: POP
65048: POP
65049: GO 65055
// end ;
65051: GO 65020
65053: POP
65054: POP
// end ;
65055: LD_VAR 0 2
65059: RET
// export function FilterByTag ( units , tag ) ; begin
65060: LD_INT 0
65062: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65063: LD_ADDR_VAR 0 3
65067: PUSH
65068: LD_VAR 0 1
65072: PPUSH
65073: LD_INT 120
65075: PUSH
65076: LD_VAR 0 2
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PPUSH
65085: CALL_OW 72
65089: ST_TO_ADDR
// end ;
65090: LD_VAR 0 3
65094: RET
// export function IsDriver ( un ) ; begin
65095: LD_INT 0
65097: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65098: LD_ADDR_VAR 0 2
65102: PUSH
65103: LD_VAR 0 1
65107: PUSH
65108: LD_INT 55
65110: PUSH
65111: EMPTY
65112: LIST
65113: PPUSH
65114: CALL_OW 69
65118: IN
65119: ST_TO_ADDR
// end ;
65120: LD_VAR 0 2
65124: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65125: LD_INT 0
65127: PPUSH
65128: PPUSH
// list := [ ] ;
65129: LD_ADDR_VAR 0 5
65133: PUSH
65134: EMPTY
65135: ST_TO_ADDR
// case d of 0 :
65136: LD_VAR 0 3
65140: PUSH
65141: LD_INT 0
65143: DOUBLE
65144: EQUAL
65145: IFTRUE 65149
65147: GO 65282
65149: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65150: LD_ADDR_VAR 0 5
65154: PUSH
65155: LD_VAR 0 1
65159: PUSH
65160: LD_INT 4
65162: MINUS
65163: PUSH
65164: LD_VAR 0 2
65168: PUSH
65169: LD_INT 4
65171: MINUS
65172: PUSH
65173: LD_INT 2
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: LIST
65180: PUSH
65181: LD_VAR 0 1
65185: PUSH
65186: LD_INT 3
65188: MINUS
65189: PUSH
65190: LD_VAR 0 2
65194: PUSH
65195: LD_INT 1
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: PUSH
65203: LD_VAR 0 1
65207: PUSH
65208: LD_INT 4
65210: PLUS
65211: PUSH
65212: LD_VAR 0 2
65216: PUSH
65217: LD_INT 4
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: PUSH
65225: LD_VAR 0 1
65229: PUSH
65230: LD_INT 3
65232: PLUS
65233: PUSH
65234: LD_VAR 0 2
65238: PUSH
65239: LD_INT 3
65241: PLUS
65242: PUSH
65243: LD_INT 5
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: LIST
65250: PUSH
65251: LD_VAR 0 1
65255: PUSH
65256: LD_VAR 0 2
65260: PUSH
65261: LD_INT 4
65263: PLUS
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: LIST
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: ST_TO_ADDR
// end ; 1 :
65280: GO 65980
65282: LD_INT 1
65284: DOUBLE
65285: EQUAL
65286: IFTRUE 65290
65288: GO 65423
65290: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65291: LD_ADDR_VAR 0 5
65295: PUSH
65296: LD_VAR 0 1
65300: PUSH
65301: LD_VAR 0 2
65305: PUSH
65306: LD_INT 4
65308: MINUS
65309: PUSH
65310: LD_INT 3
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: LIST
65317: PUSH
65318: LD_VAR 0 1
65322: PUSH
65323: LD_INT 3
65325: MINUS
65326: PUSH
65327: LD_VAR 0 2
65331: PUSH
65332: LD_INT 3
65334: MINUS
65335: PUSH
65336: LD_INT 2
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: PUSH
65344: LD_VAR 0 1
65348: PUSH
65349: LD_INT 4
65351: MINUS
65352: PUSH
65353: LD_VAR 0 2
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: LIST
65365: PUSH
65366: LD_VAR 0 1
65370: PUSH
65371: LD_VAR 0 2
65375: PUSH
65376: LD_INT 3
65378: PLUS
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: LIST
65387: PUSH
65388: LD_VAR 0 1
65392: PUSH
65393: LD_INT 4
65395: PLUS
65396: PUSH
65397: LD_VAR 0 2
65401: PUSH
65402: LD_INT 4
65404: PLUS
65405: PUSH
65406: LD_INT 5
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: LIST
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: ST_TO_ADDR
// end ; 2 :
65421: GO 65980
65423: LD_INT 2
65425: DOUBLE
65426: EQUAL
65427: IFTRUE 65431
65429: GO 65560
65431: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65432: LD_ADDR_VAR 0 5
65436: PUSH
65437: LD_VAR 0 1
65441: PUSH
65442: LD_VAR 0 2
65446: PUSH
65447: LD_INT 3
65449: MINUS
65450: PUSH
65451: LD_INT 3
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: LIST
65458: PUSH
65459: LD_VAR 0 1
65463: PUSH
65464: LD_INT 4
65466: PLUS
65467: PUSH
65468: LD_VAR 0 2
65472: PUSH
65473: LD_INT 4
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: PUSH
65481: LD_VAR 0 1
65485: PUSH
65486: LD_VAR 0 2
65490: PUSH
65491: LD_INT 4
65493: PLUS
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: LIST
65502: PUSH
65503: LD_VAR 0 1
65507: PUSH
65508: LD_INT 3
65510: MINUS
65511: PUSH
65512: LD_VAR 0 2
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: LIST
65524: PUSH
65525: LD_VAR 0 1
65529: PUSH
65530: LD_INT 4
65532: MINUS
65533: PUSH
65534: LD_VAR 0 2
65538: PUSH
65539: LD_INT 4
65541: MINUS
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: ST_TO_ADDR
// end ; 3 :
65558: GO 65980
65560: LD_INT 3
65562: DOUBLE
65563: EQUAL
65564: IFTRUE 65568
65566: GO 65701
65568: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65569: LD_ADDR_VAR 0 5
65573: PUSH
65574: LD_VAR 0 1
65578: PUSH
65579: LD_INT 3
65581: PLUS
65582: PUSH
65583: LD_VAR 0 2
65587: PUSH
65588: LD_INT 4
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: LIST
65595: PUSH
65596: LD_VAR 0 1
65600: PUSH
65601: LD_INT 4
65603: PLUS
65604: PUSH
65605: LD_VAR 0 2
65609: PUSH
65610: LD_INT 4
65612: PLUS
65613: PUSH
65614: LD_INT 5
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: LIST
65621: PUSH
65622: LD_VAR 0 1
65626: PUSH
65627: LD_INT 4
65629: MINUS
65630: PUSH
65631: LD_VAR 0 2
65635: PUSH
65636: LD_INT 1
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: LIST
65643: PUSH
65644: LD_VAR 0 1
65648: PUSH
65649: LD_VAR 0 2
65653: PUSH
65654: LD_INT 4
65656: MINUS
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: LIST
65665: PUSH
65666: LD_VAR 0 1
65670: PUSH
65671: LD_INT 3
65673: MINUS
65674: PUSH
65675: LD_VAR 0 2
65679: PUSH
65680: LD_INT 3
65682: MINUS
65683: PUSH
65684: LD_INT 2
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: LIST
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: ST_TO_ADDR
// end ; 4 :
65699: GO 65980
65701: LD_INT 4
65703: DOUBLE
65704: EQUAL
65705: IFTRUE 65709
65707: GO 65842
65709: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65710: LD_ADDR_VAR 0 5
65714: PUSH
65715: LD_VAR 0 1
65719: PUSH
65720: LD_VAR 0 2
65724: PUSH
65725: LD_INT 4
65727: PLUS
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: PUSH
65737: LD_VAR 0 1
65741: PUSH
65742: LD_INT 3
65744: PLUS
65745: PUSH
65746: LD_VAR 0 2
65750: PUSH
65751: LD_INT 3
65753: PLUS
65754: PUSH
65755: LD_INT 5
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: LIST
65762: PUSH
65763: LD_VAR 0 1
65767: PUSH
65768: LD_INT 4
65770: PLUS
65771: PUSH
65772: LD_VAR 0 2
65776: PUSH
65777: LD_INT 4
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: LIST
65784: PUSH
65785: LD_VAR 0 1
65789: PUSH
65790: LD_VAR 0 2
65794: PUSH
65795: LD_INT 3
65797: MINUS
65798: PUSH
65799: LD_INT 3
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: LIST
65806: PUSH
65807: LD_VAR 0 1
65811: PUSH
65812: LD_INT 4
65814: MINUS
65815: PUSH
65816: LD_VAR 0 2
65820: PUSH
65821: LD_INT 4
65823: MINUS
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: ST_TO_ADDR
// end ; 5 :
65840: GO 65980
65842: LD_INT 5
65844: DOUBLE
65845: EQUAL
65846: IFTRUE 65850
65848: GO 65979
65850: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65851: LD_ADDR_VAR 0 5
65855: PUSH
65856: LD_VAR 0 1
65860: PUSH
65861: LD_INT 4
65863: MINUS
65864: PUSH
65865: LD_VAR 0 2
65869: PUSH
65870: LD_INT 1
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: LIST
65877: PUSH
65878: LD_VAR 0 1
65882: PUSH
65883: LD_VAR 0 2
65887: PUSH
65888: LD_INT 4
65890: MINUS
65891: PUSH
65892: LD_INT 3
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: LIST
65899: PUSH
65900: LD_VAR 0 1
65904: PUSH
65905: LD_INT 4
65907: PLUS
65908: PUSH
65909: LD_VAR 0 2
65913: PUSH
65914: LD_INT 4
65916: PLUS
65917: PUSH
65918: LD_INT 5
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: LIST
65925: PUSH
65926: LD_VAR 0 1
65930: PUSH
65931: LD_INT 3
65933: PLUS
65934: PUSH
65935: LD_VAR 0 2
65939: PUSH
65940: LD_INT 4
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: LIST
65947: PUSH
65948: LD_VAR 0 1
65952: PUSH
65953: LD_VAR 0 2
65957: PUSH
65958: LD_INT 3
65960: PLUS
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: LIST
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: ST_TO_ADDR
// end ; end ;
65977: GO 65980
65979: POP
// result := list ;
65980: LD_ADDR_VAR 0 4
65984: PUSH
65985: LD_VAR 0 5
65989: ST_TO_ADDR
// end ;
65990: LD_VAR 0 4
65994: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65995: LD_INT 0
65997: PPUSH
65998: PPUSH
65999: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66000: LD_VAR 0 1
66004: NOT
66005: IFTRUE 66033
66007: PUSH
66008: LD_VAR 0 2
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: LD_INT 2
66018: PUSH
66019: LD_INT 3
66021: PUSH
66022: LD_INT 4
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: IN
66031: NOT
66032: OR
66033: IFFALSE 66037
// exit ;
66035: GO 66120
// tmp := [ ] ;
66037: LD_ADDR_VAR 0 5
66041: PUSH
66042: EMPTY
66043: ST_TO_ADDR
// for i in units do
66044: LD_ADDR_VAR 0 4
66048: PUSH
66049: LD_VAR 0 1
66053: PUSH
66054: FOR_IN
66055: IFFALSE 66089
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66057: LD_ADDR_VAR 0 5
66061: PUSH
66062: LD_VAR 0 5
66066: PPUSH
66067: LD_VAR 0 4
66071: PPUSH
66072: LD_VAR 0 2
66076: PPUSH
66077: CALL_OW 259
66081: PPUSH
66082: CALL 67515 0 2
66086: ST_TO_ADDR
66087: GO 66054
66089: POP
66090: POP
// if not tmp then
66091: LD_VAR 0 5
66095: NOT
66096: IFFALSE 66100
// exit ;
66098: GO 66120
// result := SortListByListDesc ( units , tmp ) ;
66100: LD_ADDR_VAR 0 3
66104: PUSH
66105: LD_VAR 0 1
66109: PPUSH
66110: LD_VAR 0 5
66114: PPUSH
66115: CALL_OW 77
66119: ST_TO_ADDR
// end ;
66120: LD_VAR 0 3
66124: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66125: LD_INT 0
66127: PPUSH
66128: PPUSH
66129: PPUSH
// result := false ;
66130: LD_ADDR_VAR 0 3
66134: PUSH
66135: LD_INT 0
66137: ST_TO_ADDR
// if not building then
66138: LD_VAR 0 2
66142: NOT
66143: IFFALSE 66147
// exit ;
66145: GO 66291
// x := GetX ( building ) ;
66147: LD_ADDR_VAR 0 4
66151: PUSH
66152: LD_VAR 0 2
66156: PPUSH
66157: CALL_OW 250
66161: ST_TO_ADDR
// y := GetY ( building ) ;
66162: LD_ADDR_VAR 0 5
66166: PUSH
66167: LD_VAR 0 2
66171: PPUSH
66172: CALL_OW 251
66176: ST_TO_ADDR
// if not x or not y then
66177: LD_VAR 0 4
66181: NOT
66182: IFTRUE 66191
66184: PUSH
66185: LD_VAR 0 5
66189: NOT
66190: OR
66191: IFFALSE 66195
// exit ;
66193: GO 66291
// if GetTaskList ( unit ) then
66195: LD_VAR 0 1
66199: PPUSH
66200: CALL_OW 437
66204: IFFALSE 66291
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66206: LD_STRING e
66208: PUSH
66209: LD_VAR 0 1
66213: PPUSH
66214: CALL_OW 437
66218: PUSH
66219: LD_INT 1
66221: ARRAY
66222: PUSH
66223: LD_INT 1
66225: ARRAY
66226: EQUAL
66227: IFFALSE 66254
66229: PUSH
66230: LD_VAR 0 4
66234: PUSH
66235: LD_VAR 0 1
66239: PPUSH
66240: CALL_OW 437
66244: PUSH
66245: LD_INT 1
66247: ARRAY
66248: PUSH
66249: LD_INT 2
66251: ARRAY
66252: EQUAL
66253: AND
66254: IFFALSE 66281
66256: PUSH
66257: LD_VAR 0 5
66261: PUSH
66262: LD_VAR 0 1
66266: PPUSH
66267: CALL_OW 437
66271: PUSH
66272: LD_INT 1
66274: ARRAY
66275: PUSH
66276: LD_INT 3
66278: ARRAY
66279: EQUAL
66280: AND
66281: IFFALSE 66291
// result := true end ;
66283: LD_ADDR_VAR 0 3
66287: PUSH
66288: LD_INT 1
66290: ST_TO_ADDR
// end ;
66291: LD_VAR 0 3
66295: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66296: LD_INT 0
66298: PPUSH
// result := false ;
66299: LD_ADDR_VAR 0 4
66303: PUSH
66304: LD_INT 0
66306: ST_TO_ADDR
// if GetTaskList ( unit ) then
66307: LD_VAR 0 1
66311: PPUSH
66312: CALL_OW 437
66316: IFFALSE 66403
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66318: LD_STRING M
66320: PUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: CALL_OW 437
66330: PUSH
66331: LD_INT 1
66333: ARRAY
66334: PUSH
66335: LD_INT 1
66337: ARRAY
66338: EQUAL
66339: IFFALSE 66366
66341: PUSH
66342: LD_VAR 0 2
66346: PUSH
66347: LD_VAR 0 1
66351: PPUSH
66352: CALL_OW 437
66356: PUSH
66357: LD_INT 1
66359: ARRAY
66360: PUSH
66361: LD_INT 2
66363: ARRAY
66364: EQUAL
66365: AND
66366: IFFALSE 66393
66368: PUSH
66369: LD_VAR 0 3
66373: PUSH
66374: LD_VAR 0 1
66378: PPUSH
66379: CALL_OW 437
66383: PUSH
66384: LD_INT 1
66386: ARRAY
66387: PUSH
66388: LD_INT 3
66390: ARRAY
66391: EQUAL
66392: AND
66393: IFFALSE 66403
// result := true ;
66395: LD_ADDR_VAR 0 4
66399: PUSH
66400: LD_INT 1
66402: ST_TO_ADDR
// end ; end ;
66403: LD_VAR 0 4
66407: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66408: LD_INT 0
66410: PPUSH
66411: PPUSH
66412: PPUSH
66413: PPUSH
// if not unit or not area then
66414: LD_VAR 0 1
66418: NOT
66419: IFTRUE 66428
66421: PUSH
66422: LD_VAR 0 2
66426: NOT
66427: OR
66428: IFFALSE 66432
// exit ;
66430: GO 66608
// tmp := AreaToList ( area , i ) ;
66432: LD_ADDR_VAR 0 6
66436: PUSH
66437: LD_VAR 0 2
66441: PPUSH
66442: LD_VAR 0 5
66446: PPUSH
66447: CALL_OW 517
66451: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66452: LD_ADDR_VAR 0 5
66456: PUSH
66457: DOUBLE
66458: LD_INT 1
66460: DEC
66461: ST_TO_ADDR
66462: LD_VAR 0 6
66466: PUSH
66467: LD_INT 1
66469: ARRAY
66470: PUSH
66471: FOR_TO
66472: IFFALSE 66606
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66474: LD_ADDR_VAR 0 7
66478: PUSH
66479: LD_VAR 0 6
66483: PUSH
66484: LD_INT 1
66486: ARRAY
66487: PUSH
66488: LD_VAR 0 5
66492: ARRAY
66493: PUSH
66494: LD_VAR 0 6
66498: PUSH
66499: LD_INT 2
66501: ARRAY
66502: PUSH
66503: LD_VAR 0 5
66507: ARRAY
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66513: LD_INT 92
66515: PUSH
66516: LD_VAR 0 7
66520: PUSH
66521: LD_INT 1
66523: ARRAY
66524: PUSH
66525: LD_VAR 0 7
66529: PUSH
66530: LD_INT 2
66532: ARRAY
66533: PUSH
66534: LD_INT 2
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: PPUSH
66543: CALL_OW 69
66547: PUSH
66548: LD_INT 0
66550: EQUAL
66551: IFFALSE 66604
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66553: LD_VAR 0 1
66557: PPUSH
66558: LD_VAR 0 7
66562: PUSH
66563: LD_INT 1
66565: ARRAY
66566: PPUSH
66567: LD_VAR 0 7
66571: PUSH
66572: LD_INT 2
66574: ARRAY
66575: PPUSH
66576: LD_VAR 0 3
66580: PPUSH
66581: CALL_OW 48
// result := IsPlaced ( unit ) ;
66585: LD_ADDR_VAR 0 4
66589: PUSH
66590: LD_VAR 0 1
66594: PPUSH
66595: CALL_OW 305
66599: ST_TO_ADDR
// exit ;
66600: POP
66601: POP
66602: GO 66608
// end ; end ;
66604: GO 66471
66606: POP
66607: POP
// end ;
66608: LD_VAR 0 4
66612: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66613: LD_INT 0
66615: PPUSH
66616: PPUSH
66617: PPUSH
// if not side or side > 8 then
66618: LD_VAR 0 1
66622: NOT
66623: IFTRUE 66635
66625: PUSH
66626: LD_VAR 0 1
66630: PUSH
66631: LD_INT 8
66633: GREATER
66634: OR
66635: IFFALSE 66639
// exit ;
66637: GO 66826
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66639: LD_ADDR_VAR 0 4
66643: PUSH
66644: LD_INT 22
66646: PUSH
66647: LD_VAR 0 1
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 21
66658: PUSH
66659: LD_INT 3
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PPUSH
66670: CALL_OW 69
66674: ST_TO_ADDR
// if not tmp then
66675: LD_VAR 0 4
66679: NOT
66680: IFFALSE 66684
// exit ;
66682: GO 66826
// enable_addtolog := true ;
66684: LD_ADDR_OWVAR 81
66688: PUSH
66689: LD_INT 1
66691: ST_TO_ADDR
// AddToLog ( [ ) ;
66692: LD_STRING [
66694: PPUSH
66695: CALL_OW 561
// for i in tmp do
66699: LD_ADDR_VAR 0 3
66703: PUSH
66704: LD_VAR 0 4
66708: PUSH
66709: FOR_IN
66710: IFFALSE 66817
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66712: LD_STRING [
66714: PUSH
66715: LD_VAR 0 3
66719: PPUSH
66720: CALL_OW 266
66724: STR
66725: PUSH
66726: LD_STRING , 
66728: STR
66729: PUSH
66730: LD_VAR 0 3
66734: PPUSH
66735: CALL_OW 250
66739: STR
66740: PUSH
66741: LD_STRING , 
66743: STR
66744: PUSH
66745: LD_VAR 0 3
66749: PPUSH
66750: CALL_OW 251
66754: STR
66755: PUSH
66756: LD_STRING , 
66758: STR
66759: PUSH
66760: LD_VAR 0 3
66764: PPUSH
66765: CALL_OW 254
66769: STR
66770: PUSH
66771: LD_STRING , 
66773: STR
66774: PUSH
66775: LD_VAR 0 3
66779: PPUSH
66780: LD_INT 1
66782: PPUSH
66783: CALL_OW 268
66787: STR
66788: PUSH
66789: LD_STRING , 
66791: STR
66792: PUSH
66793: LD_VAR 0 3
66797: PPUSH
66798: LD_INT 2
66800: PPUSH
66801: CALL_OW 268
66805: STR
66806: PUSH
66807: LD_STRING ],
66809: STR
66810: PPUSH
66811: CALL_OW 561
// end ;
66815: GO 66709
66817: POP
66818: POP
// AddToLog ( ]; ) ;
66819: LD_STRING ];
66821: PPUSH
66822: CALL_OW 561
// end ;
66826: LD_VAR 0 2
66830: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66831: LD_INT 0
66833: PPUSH
66834: PPUSH
66835: PPUSH
66836: PPUSH
66837: PPUSH
// if not area or not rate or not max then
66838: LD_VAR 0 1
66842: NOT
66843: IFTRUE 66852
66845: PUSH
66846: LD_VAR 0 2
66850: NOT
66851: OR
66852: IFTRUE 66861
66854: PUSH
66855: LD_VAR 0 4
66859: NOT
66860: OR
66861: IFFALSE 66865
// exit ;
66863: GO 67054
// while 1 do
66865: LD_INT 1
66867: IFFALSE 67054
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66869: LD_ADDR_VAR 0 9
66873: PUSH
66874: LD_VAR 0 1
66878: PPUSH
66879: LD_INT 1
66881: PPUSH
66882: CALL_OW 287
66886: PUSH
66887: LD_INT 10
66889: MUL
66890: ST_TO_ADDR
// r := rate / 10 ;
66891: LD_ADDR_VAR 0 7
66895: PUSH
66896: LD_VAR 0 2
66900: PUSH
66901: LD_INT 10
66903: DIVREAL
66904: ST_TO_ADDR
// time := 1 1$00 ;
66905: LD_ADDR_VAR 0 8
66909: PUSH
66910: LD_INT 2100
66912: ST_TO_ADDR
// if amount < min then
66913: LD_VAR 0 9
66917: PUSH
66918: LD_VAR 0 3
66922: LESS
66923: IFFALSE 66941
// r := r * 2 else
66925: LD_ADDR_VAR 0 7
66929: PUSH
66930: LD_VAR 0 7
66934: PUSH
66935: LD_INT 2
66937: MUL
66938: ST_TO_ADDR
66939: GO 66967
// if amount > max then
66941: LD_VAR 0 9
66945: PUSH
66946: LD_VAR 0 4
66950: GREATER
66951: IFFALSE 66967
// r := r / 2 ;
66953: LD_ADDR_VAR 0 7
66957: PUSH
66958: LD_VAR 0 7
66962: PUSH
66963: LD_INT 2
66965: DIVREAL
66966: ST_TO_ADDR
// time := time / r ;
66967: LD_ADDR_VAR 0 8
66971: PUSH
66972: LD_VAR 0 8
66976: PUSH
66977: LD_VAR 0 7
66981: DIVREAL
66982: ST_TO_ADDR
// if time < 0 then
66983: LD_VAR 0 8
66987: PUSH
66988: LD_INT 0
66990: LESS
66991: IFFALSE 67008
// time := time * - 1 ;
66993: LD_ADDR_VAR 0 8
66997: PUSH
66998: LD_VAR 0 8
67002: PUSH
67003: LD_INT 1
67005: NEG
67006: MUL
67007: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67008: LD_VAR 0 8
67012: PUSH
67013: LD_INT 35
67015: PPUSH
67016: LD_INT 875
67018: PPUSH
67019: CALL_OW 12
67023: PLUS
67024: PPUSH
67025: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67029: LD_INT 1
67031: PPUSH
67032: LD_INT 5
67034: PPUSH
67035: CALL_OW 12
67039: PPUSH
67040: LD_VAR 0 1
67044: PPUSH
67045: LD_INT 1
67047: PPUSH
67048: CALL_OW 55
// end ;
67052: GO 66865
// end ;
67054: LD_VAR 0 5
67058: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67059: LD_INT 0
67061: PPUSH
67062: PPUSH
67063: PPUSH
67064: PPUSH
67065: PPUSH
67066: PPUSH
67067: PPUSH
67068: PPUSH
// if not turrets or not factories then
67069: LD_VAR 0 1
67073: NOT
67074: IFTRUE 67083
67076: PUSH
67077: LD_VAR 0 2
67081: NOT
67082: OR
67083: IFFALSE 67087
// exit ;
67085: GO 67394
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67087: LD_ADDR_VAR 0 10
67091: PUSH
67092: LD_INT 5
67094: PUSH
67095: LD_INT 6
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 2
67104: PUSH
67105: LD_INT 4
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 3
67114: PUSH
67115: LD_INT 5
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 24
67129: PUSH
67130: LD_INT 25
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 23
67139: PUSH
67140: LD_INT 27
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 42
67153: PUSH
67154: LD_INT 43
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 44
67163: PUSH
67164: LD_INT 46
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 45
67173: PUSH
67174: LD_INT 47
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: ST_TO_ADDR
// result := [ ] ;
67191: LD_ADDR_VAR 0 3
67195: PUSH
67196: EMPTY
67197: ST_TO_ADDR
// for i in turrets do
67198: LD_ADDR_VAR 0 4
67202: PUSH
67203: LD_VAR 0 1
67207: PUSH
67208: FOR_IN
67209: IFFALSE 67392
// begin nat := GetNation ( i ) ;
67211: LD_ADDR_VAR 0 7
67215: PUSH
67216: LD_VAR 0 4
67220: PPUSH
67221: CALL_OW 248
67225: ST_TO_ADDR
// weapon := 0 ;
67226: LD_ADDR_VAR 0 8
67230: PUSH
67231: LD_INT 0
67233: ST_TO_ADDR
// if not nat then
67234: LD_VAR 0 7
67238: NOT
67239: IFFALSE 67243
// continue ;
67241: GO 67208
// for j in list [ nat ] do
67243: LD_ADDR_VAR 0 5
67247: PUSH
67248: LD_VAR 0 10
67252: PUSH
67253: LD_VAR 0 7
67257: ARRAY
67258: PUSH
67259: FOR_IN
67260: IFFALSE 67301
// if GetBWeapon ( i ) = j [ 1 ] then
67262: LD_VAR 0 4
67266: PPUSH
67267: CALL_OW 269
67271: PUSH
67272: LD_VAR 0 5
67276: PUSH
67277: LD_INT 1
67279: ARRAY
67280: EQUAL
67281: IFFALSE 67299
// begin weapon := j [ 2 ] ;
67283: LD_ADDR_VAR 0 8
67287: PUSH
67288: LD_VAR 0 5
67292: PUSH
67293: LD_INT 2
67295: ARRAY
67296: ST_TO_ADDR
// break ;
67297: GO 67301
// end ;
67299: GO 67259
67301: POP
67302: POP
// if not weapon then
67303: LD_VAR 0 8
67307: NOT
67308: IFFALSE 67312
// continue ;
67310: GO 67208
// for k in factories do
67312: LD_ADDR_VAR 0 6
67316: PUSH
67317: LD_VAR 0 2
67321: PUSH
67322: FOR_IN
67323: IFFALSE 67388
// begin weapons := AvailableWeaponList ( k ) ;
67325: LD_ADDR_VAR 0 9
67329: PUSH
67330: LD_VAR 0 6
67334: PPUSH
67335: CALL_OW 478
67339: ST_TO_ADDR
// if not weapons then
67340: LD_VAR 0 9
67344: NOT
67345: IFFALSE 67349
// continue ;
67347: GO 67322
// if weapon in weapons then
67349: LD_VAR 0 8
67353: PUSH
67354: LD_VAR 0 9
67358: IN
67359: IFFALSE 67386
// begin result := [ i , weapon ] ;
67361: LD_ADDR_VAR 0 3
67365: PUSH
67366: LD_VAR 0 4
67370: PUSH
67371: LD_VAR 0 8
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: ST_TO_ADDR
// exit ;
67380: POP
67381: POP
67382: POP
67383: POP
67384: GO 67394
// end ; end ;
67386: GO 67322
67388: POP
67389: POP
// end ;
67390: GO 67208
67392: POP
67393: POP
// end ;
67394: LD_VAR 0 3
67398: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67399: LD_INT 0
67401: PPUSH
// if not side or side > 8 then
67402: LD_VAR 0 3
67406: NOT
67407: IFTRUE 67419
67409: PUSH
67410: LD_VAR 0 3
67414: PUSH
67415: LD_INT 8
67417: GREATER
67418: OR
67419: IFFALSE 67423
// exit ;
67421: GO 67482
// if not range then
67423: LD_VAR 0 4
67427: NOT
67428: IFFALSE 67439
// range := - 12 ;
67430: LD_ADDR_VAR 0 4
67434: PUSH
67435: LD_INT 12
67437: NEG
67438: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67439: LD_VAR 0 1
67443: PPUSH
67444: LD_VAR 0 2
67448: PPUSH
67449: LD_VAR 0 3
67453: PPUSH
67454: LD_VAR 0 4
67458: PPUSH
67459: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67463: LD_VAR 0 1
67467: PPUSH
67468: LD_VAR 0 2
67472: PPUSH
67473: LD_VAR 0 3
67477: PPUSH
67478: CALL_OW 331
// end ;
67482: LD_VAR 0 5
67486: RET
// export function Video ( mode ) ; begin
67487: LD_INT 0
67489: PPUSH
// ingame_video = mode ;
67490: LD_ADDR_OWVAR 52
67494: PUSH
67495: LD_VAR 0 1
67499: ST_TO_ADDR
// interface_hidden = mode ;
67500: LD_ADDR_OWVAR 54
67504: PUSH
67505: LD_VAR 0 1
67509: ST_TO_ADDR
// end ;
67510: LD_VAR 0 2
67514: RET
// export function Join ( array , element ) ; begin
67515: LD_INT 0
67517: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67518: LD_ADDR_VAR 0 3
67522: PUSH
67523: LD_VAR 0 1
67527: PPUSH
67528: LD_VAR 0 1
67532: PUSH
67533: LD_INT 1
67535: PLUS
67536: PPUSH
67537: LD_VAR 0 2
67541: PPUSH
67542: CALL_OW 1
67546: ST_TO_ADDR
// end ;
67547: LD_VAR 0 3
67551: RET
// export function JoinUnion ( array , element ) ; begin
67552: LD_INT 0
67554: PPUSH
// result := array union element ;
67555: LD_ADDR_VAR 0 3
67559: PUSH
67560: LD_VAR 0 1
67564: PUSH
67565: LD_VAR 0 2
67569: UNION
67570: ST_TO_ADDR
// end ;
67571: LD_VAR 0 3
67575: RET
// export function GetBehemoths ( side ) ; begin
67576: LD_INT 0
67578: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67579: LD_ADDR_VAR 0 2
67583: PUSH
67584: LD_INT 22
67586: PUSH
67587: LD_VAR 0 1
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 31
67598: PUSH
67599: LD_INT 25
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PPUSH
67610: CALL_OW 69
67614: ST_TO_ADDR
// end ;
67615: LD_VAR 0 2
67619: RET
// export function Shuffle ( array ) ; var i , index ; begin
67620: LD_INT 0
67622: PPUSH
67623: PPUSH
67624: PPUSH
// result := [ ] ;
67625: LD_ADDR_VAR 0 2
67629: PUSH
67630: EMPTY
67631: ST_TO_ADDR
// if not array then
67632: LD_VAR 0 1
67636: NOT
67637: IFFALSE 67641
// exit ;
67639: GO 67740
// Randomize ;
67641: CALL_OW 10
// for i = array downto 1 do
67645: LD_ADDR_VAR 0 3
67649: PUSH
67650: DOUBLE
67651: LD_VAR 0 1
67655: INC
67656: ST_TO_ADDR
67657: LD_INT 1
67659: PUSH
67660: FOR_DOWNTO
67661: IFFALSE 67738
// begin index := rand ( 1 , array ) ;
67663: LD_ADDR_VAR 0 4
67667: PUSH
67668: LD_INT 1
67670: PPUSH
67671: LD_VAR 0 1
67675: PPUSH
67676: CALL_OW 12
67680: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67681: LD_ADDR_VAR 0 2
67685: PUSH
67686: LD_VAR 0 2
67690: PPUSH
67691: LD_VAR 0 2
67695: PUSH
67696: LD_INT 1
67698: PLUS
67699: PPUSH
67700: LD_VAR 0 1
67704: PUSH
67705: LD_VAR 0 4
67709: ARRAY
67710: PPUSH
67711: CALL_OW 2
67715: ST_TO_ADDR
// array := Delete ( array , index ) ;
67716: LD_ADDR_VAR 0 1
67720: PUSH
67721: LD_VAR 0 1
67725: PPUSH
67726: LD_VAR 0 4
67730: PPUSH
67731: CALL_OW 3
67735: ST_TO_ADDR
// end ;
67736: GO 67660
67738: POP
67739: POP
// end ;
67740: LD_VAR 0 2
67744: RET
// export function GetBaseMaterials ( base ) ; begin
67745: LD_INT 0
67747: PPUSH
// result := [ 0 , 0 , 0 ] ;
67748: LD_ADDR_VAR 0 2
67752: PUSH
67753: LD_INT 0
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: LIST
67766: ST_TO_ADDR
// if not base then
67767: LD_VAR 0 1
67771: NOT
67772: IFFALSE 67776
// exit ;
67774: GO 67825
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67776: LD_ADDR_VAR 0 2
67780: PUSH
67781: LD_VAR 0 1
67785: PPUSH
67786: LD_INT 1
67788: PPUSH
67789: CALL_OW 275
67793: PUSH
67794: LD_VAR 0 1
67798: PPUSH
67799: LD_INT 2
67801: PPUSH
67802: CALL_OW 275
67806: PUSH
67807: LD_VAR 0 1
67811: PPUSH
67812: LD_INT 3
67814: PPUSH
67815: CALL_OW 275
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: LIST
67824: ST_TO_ADDR
// end ;
67825: LD_VAR 0 2
67829: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67830: LD_INT 0
67832: PPUSH
67833: PPUSH
// result := array ;
67834: LD_ADDR_VAR 0 3
67838: PUSH
67839: LD_VAR 0 1
67843: ST_TO_ADDR
// if size >= result then
67844: LD_VAR 0 2
67848: PUSH
67849: LD_VAR 0 3
67853: GREATEREQUAL
67854: IFFALSE 67858
// exit ;
67856: GO 67908
// if size then
67858: LD_VAR 0 2
67862: IFFALSE 67908
// for i := array downto size do
67864: LD_ADDR_VAR 0 4
67868: PUSH
67869: DOUBLE
67870: LD_VAR 0 1
67874: INC
67875: ST_TO_ADDR
67876: LD_VAR 0 2
67880: PUSH
67881: FOR_DOWNTO
67882: IFFALSE 67906
// result := Delete ( result , result ) ;
67884: LD_ADDR_VAR 0 3
67888: PUSH
67889: LD_VAR 0 3
67893: PPUSH
67894: LD_VAR 0 3
67898: PPUSH
67899: CALL_OW 3
67903: ST_TO_ADDR
67904: GO 67881
67906: POP
67907: POP
// end ;
67908: LD_VAR 0 3
67912: RET
// export function ComExit ( unit ) ; var tmp ; begin
67913: LD_INT 0
67915: PPUSH
67916: PPUSH
// if not IsInUnit ( unit ) then
67917: LD_VAR 0 1
67921: PPUSH
67922: CALL_OW 310
67926: NOT
67927: IFFALSE 67931
// exit ;
67929: GO 67991
// tmp := IsInUnit ( unit ) ;
67931: LD_ADDR_VAR 0 3
67935: PUSH
67936: LD_VAR 0 1
67940: PPUSH
67941: CALL_OW 310
67945: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67946: LD_VAR 0 3
67950: PPUSH
67951: CALL_OW 247
67955: PUSH
67956: LD_INT 2
67958: EQUAL
67959: IFFALSE 67972
// ComExitVehicle ( unit ) else
67961: LD_VAR 0 1
67965: PPUSH
67966: CALL_OW 121
67970: GO 67981
// ComExitBuilding ( unit ) ;
67972: LD_VAR 0 1
67976: PPUSH
67977: CALL_OW 122
// result := tmp ;
67981: LD_ADDR_VAR 0 2
67985: PUSH
67986: LD_VAR 0 3
67990: ST_TO_ADDR
// end ;
67991: LD_VAR 0 2
67995: RET
// export function ComExitAll ( units ) ; var i ; begin
67996: LD_INT 0
67998: PPUSH
67999: PPUSH
// if not units then
68000: LD_VAR 0 1
68004: NOT
68005: IFFALSE 68009
// exit ;
68007: GO 68035
// for i in units do
68009: LD_ADDR_VAR 0 3
68013: PUSH
68014: LD_VAR 0 1
68018: PUSH
68019: FOR_IN
68020: IFFALSE 68033
// ComExit ( i ) ;
68022: LD_VAR 0 3
68026: PPUSH
68027: CALL 67913 0 1
68031: GO 68019
68033: POP
68034: POP
// end ;
68035: LD_VAR 0 2
68039: RET
// export function ResetHc ; begin
68040: LD_INT 0
68042: PPUSH
// InitHc ;
68043: CALL_OW 19
// hc_importance := 0 ;
68047: LD_ADDR_OWVAR 32
68051: PUSH
68052: LD_INT 0
68054: ST_TO_ADDR
// end ;
68055: LD_VAR 0 1
68059: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68060: LD_INT 0
68062: PPUSH
68063: PPUSH
68064: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68065: LD_ADDR_VAR 0 6
68069: PUSH
68070: LD_VAR 0 1
68074: PUSH
68075: LD_VAR 0 3
68079: PLUS
68080: PUSH
68081: LD_INT 2
68083: DIV
68084: ST_TO_ADDR
// if _x < 0 then
68085: LD_VAR 0 6
68089: PUSH
68090: LD_INT 0
68092: LESS
68093: IFFALSE 68110
// _x := _x * - 1 ;
68095: LD_ADDR_VAR 0 6
68099: PUSH
68100: LD_VAR 0 6
68104: PUSH
68105: LD_INT 1
68107: NEG
68108: MUL
68109: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68110: LD_ADDR_VAR 0 7
68114: PUSH
68115: LD_VAR 0 2
68119: PUSH
68120: LD_VAR 0 4
68124: PLUS
68125: PUSH
68126: LD_INT 2
68128: DIV
68129: ST_TO_ADDR
// if _y < 0 then
68130: LD_VAR 0 7
68134: PUSH
68135: LD_INT 0
68137: LESS
68138: IFFALSE 68155
// _y := _y * - 1 ;
68140: LD_ADDR_VAR 0 7
68144: PUSH
68145: LD_VAR 0 7
68149: PUSH
68150: LD_INT 1
68152: NEG
68153: MUL
68154: ST_TO_ADDR
// result := [ _x , _y ] ;
68155: LD_ADDR_VAR 0 5
68159: PUSH
68160: LD_VAR 0 6
68164: PUSH
68165: LD_VAR 0 7
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: ST_TO_ADDR
// end ;
68174: LD_VAR 0 5
68178: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68179: LD_INT 0
68181: PPUSH
68182: PPUSH
68183: PPUSH
68184: PPUSH
// task := GetTaskList ( unit ) ;
68185: LD_ADDR_VAR 0 7
68189: PUSH
68190: LD_VAR 0 1
68194: PPUSH
68195: CALL_OW 437
68199: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68200: LD_VAR 0 7
68204: NOT
68205: IFFALSE 68224
68207: PUSH
68208: LD_VAR 0 1
68212: PPUSH
68213: LD_VAR 0 2
68217: PPUSH
68218: CALL_OW 308
68222: NOT
68223: AND
68224: IFFALSE 68228
// exit ;
68226: GO 68346
// if IsInArea ( unit , area ) then
68228: LD_VAR 0 1
68232: PPUSH
68233: LD_VAR 0 2
68237: PPUSH
68238: CALL_OW 308
68242: IFFALSE 68260
// begin ComMoveToArea ( unit , goAway ) ;
68244: LD_VAR 0 1
68248: PPUSH
68249: LD_VAR 0 3
68253: PPUSH
68254: CALL_OW 113
// exit ;
68258: GO 68346
// end ; if task [ 1 ] [ 1 ] <> M then
68260: LD_VAR 0 7
68264: PUSH
68265: LD_INT 1
68267: ARRAY
68268: PUSH
68269: LD_INT 1
68271: ARRAY
68272: PUSH
68273: LD_STRING M
68275: NONEQUAL
68276: IFFALSE 68280
// exit ;
68278: GO 68346
// x := task [ 1 ] [ 2 ] ;
68280: LD_ADDR_VAR 0 5
68284: PUSH
68285: LD_VAR 0 7
68289: PUSH
68290: LD_INT 1
68292: ARRAY
68293: PUSH
68294: LD_INT 2
68296: ARRAY
68297: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68298: LD_ADDR_VAR 0 6
68302: PUSH
68303: LD_VAR 0 7
68307: PUSH
68308: LD_INT 1
68310: ARRAY
68311: PUSH
68312: LD_INT 3
68314: ARRAY
68315: ST_TO_ADDR
// if InArea ( x , y , area ) then
68316: LD_VAR 0 5
68320: PPUSH
68321: LD_VAR 0 6
68325: PPUSH
68326: LD_VAR 0 2
68330: PPUSH
68331: CALL_OW 309
68335: IFFALSE 68346
// ComStop ( unit ) ;
68337: LD_VAR 0 1
68341: PPUSH
68342: CALL_OW 141
// end ;
68346: LD_VAR 0 4
68350: RET
// export function Abs ( value ) ; begin
68351: LD_INT 0
68353: PPUSH
// result := value ;
68354: LD_ADDR_VAR 0 2
68358: PUSH
68359: LD_VAR 0 1
68363: ST_TO_ADDR
// if value < 0 then
68364: LD_VAR 0 1
68368: PUSH
68369: LD_INT 0
68371: LESS
68372: IFFALSE 68389
// result := value * - 1 ;
68374: LD_ADDR_VAR 0 2
68378: PUSH
68379: LD_VAR 0 1
68383: PUSH
68384: LD_INT 1
68386: NEG
68387: MUL
68388: ST_TO_ADDR
// end ;
68389: LD_VAR 0 2
68393: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68394: LD_INT 0
68396: PPUSH
68397: PPUSH
68398: PPUSH
68399: PPUSH
68400: PPUSH
68401: PPUSH
68402: PPUSH
68403: PPUSH
// if not unit or not building then
68404: LD_VAR 0 1
68408: NOT
68409: IFTRUE 68418
68411: PUSH
68412: LD_VAR 0 2
68416: NOT
68417: OR
68418: IFFALSE 68422
// exit ;
68420: GO 68650
// x := GetX ( building ) ;
68422: LD_ADDR_VAR 0 4
68426: PUSH
68427: LD_VAR 0 2
68431: PPUSH
68432: CALL_OW 250
68436: ST_TO_ADDR
// y := GetY ( building ) ;
68437: LD_ADDR_VAR 0 6
68441: PUSH
68442: LD_VAR 0 2
68446: PPUSH
68447: CALL_OW 251
68451: ST_TO_ADDR
// d := GetDir ( building ) ;
68452: LD_ADDR_VAR 0 8
68456: PUSH
68457: LD_VAR 0 2
68461: PPUSH
68462: CALL_OW 254
68466: ST_TO_ADDR
// r := 4 ;
68467: LD_ADDR_VAR 0 9
68471: PUSH
68472: LD_INT 4
68474: ST_TO_ADDR
// for i := 1 to 5 do
68475: LD_ADDR_VAR 0 10
68479: PUSH
68480: DOUBLE
68481: LD_INT 1
68483: DEC
68484: ST_TO_ADDR
68485: LD_INT 5
68487: PUSH
68488: FOR_TO
68489: IFFALSE 68648
// begin _x := ShiftX ( x , d , r + i ) ;
68491: LD_ADDR_VAR 0 5
68495: PUSH
68496: LD_VAR 0 4
68500: PPUSH
68501: LD_VAR 0 8
68505: PPUSH
68506: LD_VAR 0 9
68510: PUSH
68511: LD_VAR 0 10
68515: PLUS
68516: PPUSH
68517: CALL_OW 272
68521: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68522: LD_ADDR_VAR 0 7
68526: PUSH
68527: LD_VAR 0 6
68531: PPUSH
68532: LD_VAR 0 8
68536: PPUSH
68537: LD_VAR 0 9
68541: PUSH
68542: LD_VAR 0 10
68546: PLUS
68547: PPUSH
68548: CALL_OW 273
68552: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68553: LD_VAR 0 5
68557: PPUSH
68558: LD_VAR 0 7
68562: PPUSH
68563: CALL_OW 488
68567: IFFALSE 68602
68569: PUSH
68570: LD_VAR 0 5
68574: PPUSH
68575: LD_VAR 0 7
68579: PPUSH
68580: CALL_OW 428
68584: PPUSH
68585: CALL_OW 247
68589: PUSH
68590: LD_INT 3
68592: PUSH
68593: LD_INT 2
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: IN
68600: NOT
68601: AND
68602: IFFALSE 68646
// begin ComMoveXY ( unit , _x , _y ) ;
68604: LD_VAR 0 1
68608: PPUSH
68609: LD_VAR 0 5
68613: PPUSH
68614: LD_VAR 0 7
68618: PPUSH
68619: CALL_OW 111
// result := [ _x , _y ] ;
68623: LD_ADDR_VAR 0 3
68627: PUSH
68628: LD_VAR 0 5
68632: PUSH
68633: LD_VAR 0 7
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: ST_TO_ADDR
// exit ;
68642: POP
68643: POP
68644: GO 68650
// end ; end ;
68646: GO 68488
68648: POP
68649: POP
// end ;
68650: LD_VAR 0 3
68654: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68655: LD_INT 0
68657: PPUSH
68658: PPUSH
68659: PPUSH
// result := 0 ;
68660: LD_ADDR_VAR 0 3
68664: PUSH
68665: LD_INT 0
68667: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68668: LD_VAR 0 1
68672: PUSH
68673: LD_INT 0
68675: LESS
68676: IFTRUE 68688
68678: PUSH
68679: LD_VAR 0 1
68683: PUSH
68684: LD_INT 8
68686: GREATER
68687: OR
68688: IFTRUE 68700
68690: PUSH
68691: LD_VAR 0 2
68695: PUSH
68696: LD_INT 0
68698: LESS
68699: OR
68700: IFTRUE 68712
68702: PUSH
68703: LD_VAR 0 2
68707: PUSH
68708: LD_INT 8
68710: GREATER
68711: OR
68712: IFFALSE 68716
// exit ;
68714: GO 68791
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68716: LD_ADDR_VAR 0 4
68720: PUSH
68721: LD_INT 22
68723: PUSH
68724: LD_VAR 0 2
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PPUSH
68733: CALL_OW 69
68737: PUSH
68738: FOR_IN
68739: IFFALSE 68789
// begin un := UnitShoot ( i ) ;
68741: LD_ADDR_VAR 0 5
68745: PUSH
68746: LD_VAR 0 4
68750: PPUSH
68751: CALL_OW 504
68755: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68756: LD_VAR 0 5
68760: PPUSH
68761: CALL_OW 255
68765: PUSH
68766: LD_VAR 0 1
68770: EQUAL
68771: IFFALSE 68787
// begin result := un ;
68773: LD_ADDR_VAR 0 3
68777: PUSH
68778: LD_VAR 0 5
68782: ST_TO_ADDR
// exit ;
68783: POP
68784: POP
68785: GO 68791
// end ; end ;
68787: GO 68738
68789: POP
68790: POP
// end ;
68791: LD_VAR 0 3
68795: RET
// export function GetCargoBay ( units ) ; begin
68796: LD_INT 0
68798: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68799: LD_ADDR_VAR 0 2
68803: PUSH
68804: LD_VAR 0 1
68808: PPUSH
68809: LD_INT 2
68811: PUSH
68812: LD_INT 34
68814: PUSH
68815: LD_INT 12
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 34
68824: PUSH
68825: LD_INT 51
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 34
68834: PUSH
68835: LD_INT 32
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 34
68844: PUSH
68845: LD_INT 89
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: PPUSH
68859: CALL_OW 72
68863: ST_TO_ADDR
// end ;
68864: LD_VAR 0 2
68868: RET
// export function Negate ( value ) ; begin
68869: LD_INT 0
68871: PPUSH
// result := not value ;
68872: LD_ADDR_VAR 0 2
68876: PUSH
68877: LD_VAR 0 1
68881: NOT
68882: ST_TO_ADDR
// end ;
68883: LD_VAR 0 2
68887: RET
// export function Inc ( value ) ; begin
68888: LD_INT 0
68890: PPUSH
// result := value + 1 ;
68891: LD_ADDR_VAR 0 2
68895: PUSH
68896: LD_VAR 0 1
68900: PUSH
68901: LD_INT 1
68903: PLUS
68904: ST_TO_ADDR
// end ;
68905: LD_VAR 0 2
68909: RET
// export function Dec ( value ) ; begin
68910: LD_INT 0
68912: PPUSH
// result := value - 1 ;
68913: LD_ADDR_VAR 0 2
68917: PUSH
68918: LD_VAR 0 1
68922: PUSH
68923: LD_INT 1
68925: MINUS
68926: ST_TO_ADDR
// end ;
68927: LD_VAR 0 2
68931: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68932: LD_INT 0
68934: PPUSH
68935: PPUSH
68936: PPUSH
68937: PPUSH
68938: PPUSH
68939: PPUSH
68940: PPUSH
68941: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68942: LD_VAR 0 1
68946: PPUSH
68947: LD_VAR 0 2
68951: PPUSH
68952: CALL_OW 488
68956: NOT
68957: IFTRUE 68976
68959: PUSH
68960: LD_VAR 0 3
68964: PPUSH
68965: LD_VAR 0 4
68969: PPUSH
68970: CALL_OW 488
68974: NOT
68975: OR
68976: IFFALSE 68989
// begin result := - 1 ;
68978: LD_ADDR_VAR 0 5
68982: PUSH
68983: LD_INT 1
68985: NEG
68986: ST_TO_ADDR
// exit ;
68987: GO 69224
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68989: LD_ADDR_VAR 0 12
68993: PUSH
68994: LD_VAR 0 1
68998: PPUSH
68999: LD_VAR 0 2
69003: PPUSH
69004: LD_VAR 0 3
69008: PPUSH
69009: LD_VAR 0 4
69013: PPUSH
69014: CALL 68060 0 4
69018: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69019: LD_ADDR_VAR 0 11
69023: PUSH
69024: LD_VAR 0 1
69028: PPUSH
69029: LD_VAR 0 2
69033: PPUSH
69034: LD_VAR 0 12
69038: PUSH
69039: LD_INT 1
69041: ARRAY
69042: PPUSH
69043: LD_VAR 0 12
69047: PUSH
69048: LD_INT 2
69050: ARRAY
69051: PPUSH
69052: CALL_OW 298
69056: ST_TO_ADDR
// distance := 9999 ;
69057: LD_ADDR_VAR 0 10
69061: PUSH
69062: LD_INT 9999
69064: ST_TO_ADDR
// for i := 0 to 5 do
69065: LD_ADDR_VAR 0 6
69069: PUSH
69070: DOUBLE
69071: LD_INT 0
69073: DEC
69074: ST_TO_ADDR
69075: LD_INT 5
69077: PUSH
69078: FOR_TO
69079: IFFALSE 69222
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69081: LD_ADDR_VAR 0 7
69085: PUSH
69086: LD_VAR 0 1
69090: PPUSH
69091: LD_VAR 0 6
69095: PPUSH
69096: LD_VAR 0 11
69100: PPUSH
69101: CALL_OW 272
69105: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69106: LD_ADDR_VAR 0 8
69110: PUSH
69111: LD_VAR 0 2
69115: PPUSH
69116: LD_VAR 0 6
69120: PPUSH
69121: LD_VAR 0 11
69125: PPUSH
69126: CALL_OW 273
69130: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69131: LD_VAR 0 7
69135: PPUSH
69136: LD_VAR 0 8
69140: PPUSH
69141: CALL_OW 488
69145: NOT
69146: IFFALSE 69150
// continue ;
69148: GO 69078
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69150: LD_ADDR_VAR 0 9
69154: PUSH
69155: LD_VAR 0 12
69159: PUSH
69160: LD_INT 1
69162: ARRAY
69163: PPUSH
69164: LD_VAR 0 12
69168: PUSH
69169: LD_INT 2
69171: ARRAY
69172: PPUSH
69173: LD_VAR 0 7
69177: PPUSH
69178: LD_VAR 0 8
69182: PPUSH
69183: CALL_OW 298
69187: ST_TO_ADDR
// if tmp < distance then
69188: LD_VAR 0 9
69192: PUSH
69193: LD_VAR 0 10
69197: LESS
69198: IFFALSE 69220
// begin result := i ;
69200: LD_ADDR_VAR 0 5
69204: PUSH
69205: LD_VAR 0 6
69209: ST_TO_ADDR
// distance := tmp ;
69210: LD_ADDR_VAR 0 10
69214: PUSH
69215: LD_VAR 0 9
69219: ST_TO_ADDR
// end ; end ;
69220: GO 69078
69222: POP
69223: POP
// end ;
69224: LD_VAR 0 5
69228: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69229: LD_INT 0
69231: PPUSH
69232: PPUSH
// if not driver or not IsInUnit ( driver ) then
69233: LD_VAR 0 1
69237: NOT
69238: IFTRUE 69252
69240: PUSH
69241: LD_VAR 0 1
69245: PPUSH
69246: CALL_OW 310
69250: NOT
69251: OR
69252: IFFALSE 69256
// exit ;
69254: GO 69346
// vehicle := IsInUnit ( driver ) ;
69256: LD_ADDR_VAR 0 3
69260: PUSH
69261: LD_VAR 0 1
69265: PPUSH
69266: CALL_OW 310
69270: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69271: LD_VAR 0 1
69275: PPUSH
69276: LD_STRING \
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: LD_INT 0
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: LD_INT 0
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: PUSH
69306: LD_STRING E
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: LD_VAR 0 3
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PPUSH
69342: CALL_OW 446
// end ;
69346: LD_VAR 0 2
69350: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69351: LD_INT 0
69353: PPUSH
69354: PPUSH
// if not driver or not IsInUnit ( driver ) then
69355: LD_VAR 0 1
69359: NOT
69360: IFTRUE 69374
69362: PUSH
69363: LD_VAR 0 1
69367: PPUSH
69368: CALL_OW 310
69372: NOT
69373: OR
69374: IFFALSE 69378
// exit ;
69376: GO 69468
// vehicle := IsInUnit ( driver ) ;
69378: LD_ADDR_VAR 0 3
69382: PUSH
69383: LD_VAR 0 1
69387: PPUSH
69388: CALL_OW 310
69392: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69393: LD_VAR 0 1
69397: PPUSH
69398: LD_STRING \
69400: PUSH
69401: LD_INT 0
69403: PUSH
69404: LD_INT 0
69406: PUSH
69407: LD_INT 0
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: LD_INT 0
69415: PUSH
69416: LD_INT 0
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: PUSH
69428: LD_STRING E
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: LD_INT 0
69436: PUSH
69437: LD_VAR 0 3
69441: PUSH
69442: LD_INT 0
69444: PUSH
69445: LD_INT 0
69447: PUSH
69448: LD_INT 0
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PPUSH
69464: CALL_OW 447
// end ;
69468: LD_VAR 0 2
69472: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69473: LD_INT 0
69475: PPUSH
69476: PPUSH
69477: PPUSH
// tmp := [ ] ;
69478: LD_ADDR_VAR 0 5
69482: PUSH
69483: EMPTY
69484: ST_TO_ADDR
// for i in units do
69485: LD_ADDR_VAR 0 4
69489: PUSH
69490: LD_VAR 0 1
69494: PUSH
69495: FOR_IN
69496: IFFALSE 69534
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69498: LD_ADDR_VAR 0 5
69502: PUSH
69503: LD_VAR 0 5
69507: PPUSH
69508: LD_VAR 0 5
69512: PUSH
69513: LD_INT 1
69515: PLUS
69516: PPUSH
69517: LD_VAR 0 4
69521: PPUSH
69522: CALL_OW 256
69526: PPUSH
69527: CALL_OW 2
69531: ST_TO_ADDR
69532: GO 69495
69534: POP
69535: POP
// if not tmp then
69536: LD_VAR 0 5
69540: NOT
69541: IFFALSE 69545
// exit ;
69543: GO 69593
// if asc then
69545: LD_VAR 0 2
69549: IFFALSE 69573
// result := SortListByListAsc ( units , tmp ) else
69551: LD_ADDR_VAR 0 3
69555: PUSH
69556: LD_VAR 0 1
69560: PPUSH
69561: LD_VAR 0 5
69565: PPUSH
69566: CALL_OW 76
69570: ST_TO_ADDR
69571: GO 69593
// result := SortListByListDesc ( units , tmp ) ;
69573: LD_ADDR_VAR 0 3
69577: PUSH
69578: LD_VAR 0 1
69582: PPUSH
69583: LD_VAR 0 5
69587: PPUSH
69588: CALL_OW 77
69592: ST_TO_ADDR
// end ;
69593: LD_VAR 0 3
69597: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69598: LD_INT 0
69600: PPUSH
69601: PPUSH
// task := GetTaskList ( mech ) ;
69602: LD_ADDR_VAR 0 4
69606: PUSH
69607: LD_VAR 0 1
69611: PPUSH
69612: CALL_OW 437
69616: ST_TO_ADDR
// if not task then
69617: LD_VAR 0 4
69621: NOT
69622: IFFALSE 69626
// exit ;
69624: GO 69670
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69626: LD_ADDR_VAR 0 3
69630: PUSH
69631: LD_VAR 0 4
69635: PUSH
69636: LD_INT 1
69638: ARRAY
69639: PUSH
69640: LD_INT 1
69642: ARRAY
69643: PUSH
69644: LD_STRING r
69646: EQUAL
69647: IFFALSE 69669
69649: PUSH
69650: LD_VAR 0 4
69654: PUSH
69655: LD_INT 1
69657: ARRAY
69658: PUSH
69659: LD_INT 4
69661: ARRAY
69662: PUSH
69663: LD_VAR 0 2
69667: EQUAL
69668: AND
69669: ST_TO_ADDR
// end ;
69670: LD_VAR 0 3
69674: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69675: LD_INT 0
69677: PPUSH
// SetDir ( unit , d ) ;
69678: LD_VAR 0 1
69682: PPUSH
69683: LD_VAR 0 4
69687: PPUSH
69688: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
69692: LD_ADDR_VAR 0 6
69696: PUSH
69697: LD_VAR 0 1
69701: PPUSH
69702: LD_VAR 0 2
69706: PPUSH
69707: LD_VAR 0 3
69711: PPUSH
69712: LD_VAR 0 5
69716: PPUSH
69717: CALL_OW 48
69721: ST_TO_ADDR
// end ;
69722: LD_VAR 0 6
69726: RET
// export function ToNaturalNumber ( number ) ; begin
69727: LD_INT 0
69729: PPUSH
// result := number div 1 ;
69730: LD_ADDR_VAR 0 2
69734: PUSH
69735: LD_VAR 0 1
69739: PUSH
69740: LD_INT 1
69742: DIV
69743: ST_TO_ADDR
// if number < 0 then
69744: LD_VAR 0 1
69748: PUSH
69749: LD_INT 0
69751: LESS
69752: IFFALSE 69762
// result := 0 ;
69754: LD_ADDR_VAR 0 2
69758: PUSH
69759: LD_INT 0
69761: ST_TO_ADDR
// end ;
69762: LD_VAR 0 2
69766: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
69767: LD_INT 0
69769: PPUSH
69770: PPUSH
69771: PPUSH
// if not buildings then
69772: LD_VAR 0 1
69776: NOT
69777: IFFALSE 69781
// exit ;
69779: GO 69896
// tmp := [ ] ;
69781: LD_ADDR_VAR 0 5
69785: PUSH
69786: EMPTY
69787: ST_TO_ADDR
// for b in buildings do
69788: LD_ADDR_VAR 0 4
69792: PUSH
69793: LD_VAR 0 1
69797: PUSH
69798: FOR_IN
69799: IFFALSE 69837
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
69801: LD_ADDR_VAR 0 5
69805: PUSH
69806: LD_VAR 0 5
69810: PPUSH
69811: LD_VAR 0 5
69815: PUSH
69816: LD_INT 1
69818: PLUS
69819: PPUSH
69820: LD_VAR 0 4
69824: PPUSH
69825: CALL_OW 266
69829: PPUSH
69830: CALL_OW 1
69834: ST_TO_ADDR
69835: GO 69798
69837: POP
69838: POP
// if not tmp then
69839: LD_VAR 0 5
69843: NOT
69844: IFFALSE 69848
// exit ;
69846: GO 69896
// if asc then
69848: LD_VAR 0 2
69852: IFFALSE 69876
// result := SortListByListAsc ( buildings , tmp ) else
69854: LD_ADDR_VAR 0 3
69858: PUSH
69859: LD_VAR 0 1
69863: PPUSH
69864: LD_VAR 0 5
69868: PPUSH
69869: CALL_OW 76
69873: ST_TO_ADDR
69874: GO 69896
// result := SortListByListDesc ( buildings , tmp ) ;
69876: LD_ADDR_VAR 0 3
69880: PUSH
69881: LD_VAR 0 1
69885: PPUSH
69886: LD_VAR 0 5
69890: PPUSH
69891: CALL_OW 77
69895: ST_TO_ADDR
// end ;
69896: LD_VAR 0 3
69900: RET
// export function SortByClass ( units , class ) ; var un ; begin
69901: LD_INT 0
69903: PPUSH
69904: PPUSH
// if not units or not class then
69905: LD_VAR 0 1
69909: NOT
69910: IFTRUE 69919
69912: PUSH
69913: LD_VAR 0 2
69917: NOT
69918: OR
69919: IFFALSE 69923
// exit ;
69921: GO 70018
// result := [ ] ;
69923: LD_ADDR_VAR 0 3
69927: PUSH
69928: EMPTY
69929: ST_TO_ADDR
// for un in units do
69930: LD_ADDR_VAR 0 4
69934: PUSH
69935: LD_VAR 0 1
69939: PUSH
69940: FOR_IN
69941: IFFALSE 70016
// if GetClass ( un ) = class then
69943: LD_VAR 0 4
69947: PPUSH
69948: CALL_OW 257
69952: PUSH
69953: LD_VAR 0 2
69957: EQUAL
69958: IFFALSE 69985
// result := Insert ( result , 1 , un ) else
69960: LD_ADDR_VAR 0 3
69964: PUSH
69965: LD_VAR 0 3
69969: PPUSH
69970: LD_INT 1
69972: PPUSH
69973: LD_VAR 0 4
69977: PPUSH
69978: CALL_OW 2
69982: ST_TO_ADDR
69983: GO 70014
// result := Replace ( result , result + 1 , un ) ;
69985: LD_ADDR_VAR 0 3
69989: PUSH
69990: LD_VAR 0 3
69994: PPUSH
69995: LD_VAR 0 3
69999: PUSH
70000: LD_INT 1
70002: PLUS
70003: PPUSH
70004: LD_VAR 0 4
70008: PPUSH
70009: CALL_OW 1
70013: ST_TO_ADDR
70014: GO 69940
70016: POP
70017: POP
// end ;
70018: LD_VAR 0 3
70022: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70023: LD_INT 0
70025: PPUSH
70026: PPUSH
70027: PPUSH
70028: PPUSH
70029: PPUSH
70030: PPUSH
70031: PPUSH
// result := [ ] ;
70032: LD_ADDR_VAR 0 4
70036: PUSH
70037: EMPTY
70038: ST_TO_ADDR
// if x - r < 0 then
70039: LD_VAR 0 1
70043: PUSH
70044: LD_VAR 0 3
70048: MINUS
70049: PUSH
70050: LD_INT 0
70052: LESS
70053: IFFALSE 70065
// min_x := 0 else
70055: LD_ADDR_VAR 0 8
70059: PUSH
70060: LD_INT 0
70062: ST_TO_ADDR
70063: GO 70081
// min_x := x - r ;
70065: LD_ADDR_VAR 0 8
70069: PUSH
70070: LD_VAR 0 1
70074: PUSH
70075: LD_VAR 0 3
70079: MINUS
70080: ST_TO_ADDR
// if y - r < 0 then
70081: LD_VAR 0 2
70085: PUSH
70086: LD_VAR 0 3
70090: MINUS
70091: PUSH
70092: LD_INT 0
70094: LESS
70095: IFFALSE 70107
// min_y := 0 else
70097: LD_ADDR_VAR 0 7
70101: PUSH
70102: LD_INT 0
70104: ST_TO_ADDR
70105: GO 70123
// min_y := y - r ;
70107: LD_ADDR_VAR 0 7
70111: PUSH
70112: LD_VAR 0 2
70116: PUSH
70117: LD_VAR 0 3
70121: MINUS
70122: ST_TO_ADDR
// max_x := x + r ;
70123: LD_ADDR_VAR 0 9
70127: PUSH
70128: LD_VAR 0 1
70132: PUSH
70133: LD_VAR 0 3
70137: PLUS
70138: ST_TO_ADDR
// max_y := y + r ;
70139: LD_ADDR_VAR 0 10
70143: PUSH
70144: LD_VAR 0 2
70148: PUSH
70149: LD_VAR 0 3
70153: PLUS
70154: ST_TO_ADDR
// for _x = min_x to max_x do
70155: LD_ADDR_VAR 0 5
70159: PUSH
70160: DOUBLE
70161: LD_VAR 0 8
70165: DEC
70166: ST_TO_ADDR
70167: LD_VAR 0 9
70171: PUSH
70172: FOR_TO
70173: IFFALSE 70274
// for _y = min_y to max_y do
70175: LD_ADDR_VAR 0 6
70179: PUSH
70180: DOUBLE
70181: LD_VAR 0 7
70185: DEC
70186: ST_TO_ADDR
70187: LD_VAR 0 10
70191: PUSH
70192: FOR_TO
70193: IFFALSE 70270
// begin if not ValidHex ( _x , _y ) then
70195: LD_VAR 0 5
70199: PPUSH
70200: LD_VAR 0 6
70204: PPUSH
70205: CALL_OW 488
70209: NOT
70210: IFFALSE 70214
// continue ;
70212: GO 70192
// if GetResourceTypeXY ( _x , _y ) then
70214: LD_VAR 0 5
70218: PPUSH
70219: LD_VAR 0 6
70223: PPUSH
70224: CALL_OW 283
70228: IFFALSE 70268
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70230: LD_ADDR_VAR 0 4
70234: PUSH
70235: LD_VAR 0 4
70239: PPUSH
70240: LD_VAR 0 4
70244: PUSH
70245: LD_INT 1
70247: PLUS
70248: PPUSH
70249: LD_VAR 0 5
70253: PUSH
70254: LD_VAR 0 6
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PPUSH
70263: CALL_OW 1
70267: ST_TO_ADDR
// end ;
70268: GO 70192
70270: POP
70271: POP
70272: GO 70172
70274: POP
70275: POP
// end ;
70276: LD_VAR 0 4
70280: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70281: LD_INT 0
70283: PPUSH
70284: PPUSH
70285: PPUSH
70286: PPUSH
70287: PPUSH
70288: PPUSH
70289: PPUSH
70290: PPUSH
// if not units then
70291: LD_VAR 0 1
70295: NOT
70296: IFFALSE 70300
// exit ;
70298: GO 70832
// result := UnitFilter ( units , [ f_ok ] ) ;
70300: LD_ADDR_VAR 0 3
70304: PUSH
70305: LD_VAR 0 1
70309: PPUSH
70310: LD_INT 50
70312: PUSH
70313: EMPTY
70314: LIST
70315: PPUSH
70316: CALL_OW 72
70320: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70321: LD_ADDR_VAR 0 8
70325: PUSH
70326: LD_VAR 0 1
70330: PUSH
70331: LD_INT 1
70333: ARRAY
70334: PPUSH
70335: CALL_OW 255
70339: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70340: LD_ADDR_VAR 0 10
70344: PUSH
70345: LD_INT 29
70347: PUSH
70348: LD_INT 91
70350: PUSH
70351: LD_INT 49
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: LIST
70358: ST_TO_ADDR
// if not result then
70359: LD_VAR 0 3
70363: NOT
70364: IFFALSE 70368
// exit ;
70366: GO 70832
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70368: LD_ADDR_VAR 0 5
70372: PUSH
70373: LD_INT 81
70375: PUSH
70376: LD_VAR 0 8
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PPUSH
70385: CALL_OW 69
70389: ST_TO_ADDR
// for i in result do
70390: LD_ADDR_VAR 0 4
70394: PUSH
70395: LD_VAR 0 3
70399: PUSH
70400: FOR_IN
70401: IFFALSE 70830
// begin tag := GetTag ( i ) + 1 ;
70403: LD_ADDR_VAR 0 9
70407: PUSH
70408: LD_VAR 0 4
70412: PPUSH
70413: CALL_OW 110
70417: PUSH
70418: LD_INT 1
70420: PLUS
70421: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
70422: LD_ADDR_VAR 0 7
70426: PUSH
70427: LD_VAR 0 4
70431: PPUSH
70432: CALL_OW 250
70436: PPUSH
70437: LD_VAR 0 4
70441: PPUSH
70442: CALL_OW 251
70446: PPUSH
70447: LD_INT 4
70449: PPUSH
70450: CALL 70023 0 3
70454: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
70455: LD_VAR 0 4
70459: PPUSH
70460: CALL_OW 247
70464: PUSH
70465: LD_INT 2
70467: EQUAL
70468: IFFALSE 70480
70470: PUSH
70471: LD_VAR 0 7
70475: PUSH
70476: LD_INT 2
70478: GREATER
70479: AND
70480: IFFALSE 70500
70482: PUSH
70483: LD_VAR 0 4
70487: PPUSH
70488: CALL_OW 264
70492: PUSH
70493: LD_VAR 0 10
70497: IN
70498: NOT
70499: AND
70500: IFFALSE 70539
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70502: LD_VAR 0 4
70506: PPUSH
70507: LD_VAR 0 7
70511: PUSH
70512: LD_INT 1
70514: ARRAY
70515: PUSH
70516: LD_INT 1
70518: ARRAY
70519: PPUSH
70520: LD_VAR 0 7
70524: PUSH
70525: LD_INT 1
70527: ARRAY
70528: PUSH
70529: LD_INT 2
70531: ARRAY
70532: PPUSH
70533: CALL_OW 116
70537: GO 70828
// if path > tag then
70539: LD_VAR 0 2
70543: PUSH
70544: LD_VAR 0 9
70548: GREATER
70549: IFFALSE 70757
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70551: LD_ADDR_VAR 0 6
70555: PUSH
70556: LD_VAR 0 5
70560: PPUSH
70561: LD_INT 91
70563: PUSH
70564: LD_VAR 0 4
70568: PUSH
70569: LD_INT 8
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: LIST
70576: PPUSH
70577: CALL_OW 72
70581: ST_TO_ADDR
// if nearEnemy then
70582: LD_VAR 0 6
70586: IFFALSE 70655
// begin if GetWeapon ( i ) = ru_time_lapser then
70588: LD_VAR 0 4
70592: PPUSH
70593: CALL_OW 264
70597: PUSH
70598: LD_INT 49
70600: EQUAL
70601: IFFALSE 70629
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70603: LD_VAR 0 4
70607: PPUSH
70608: LD_VAR 0 6
70612: PPUSH
70613: LD_VAR 0 4
70617: PPUSH
70618: CALL_OW 74
70622: PPUSH
70623: CALL_OW 112
70627: GO 70653
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70629: LD_VAR 0 4
70633: PPUSH
70634: LD_VAR 0 6
70638: PPUSH
70639: LD_VAR 0 4
70643: PPUSH
70644: CALL_OW 74
70648: PPUSH
70649: CALL 71913 0 2
// end else
70653: GO 70755
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70655: LD_VAR 0 4
70659: PPUSH
70660: LD_VAR 0 2
70664: PUSH
70665: LD_VAR 0 9
70669: ARRAY
70670: PUSH
70671: LD_INT 1
70673: ARRAY
70674: PPUSH
70675: LD_VAR 0 2
70679: PUSH
70680: LD_VAR 0 9
70684: ARRAY
70685: PUSH
70686: LD_INT 2
70688: ARRAY
70689: PPUSH
70690: CALL_OW 297
70694: PUSH
70695: LD_INT 6
70697: GREATER
70698: IFFALSE 70741
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70700: LD_VAR 0 4
70704: PPUSH
70705: LD_VAR 0 2
70709: PUSH
70710: LD_VAR 0 9
70714: ARRAY
70715: PUSH
70716: LD_INT 1
70718: ARRAY
70719: PPUSH
70720: LD_VAR 0 2
70724: PUSH
70725: LD_VAR 0 9
70729: ARRAY
70730: PUSH
70731: LD_INT 2
70733: ARRAY
70734: PPUSH
70735: CALL_OW 114
70739: GO 70755
// SetTag ( i , tag ) ;
70741: LD_VAR 0 4
70745: PPUSH
70746: LD_VAR 0 9
70750: PPUSH
70751: CALL_OW 109
// end else
70755: GO 70828
// if enemy then
70757: LD_VAR 0 5
70761: IFFALSE 70828
// begin if GetWeapon ( i ) = ru_time_lapser then
70763: LD_VAR 0 4
70767: PPUSH
70768: CALL_OW 264
70772: PUSH
70773: LD_INT 49
70775: EQUAL
70776: IFFALSE 70804
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70778: LD_VAR 0 4
70782: PPUSH
70783: LD_VAR 0 5
70787: PPUSH
70788: LD_VAR 0 4
70792: PPUSH
70793: CALL_OW 74
70797: PPUSH
70798: CALL_OW 112
70802: GO 70828
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70804: LD_VAR 0 4
70808: PPUSH
70809: LD_VAR 0 5
70813: PPUSH
70814: LD_VAR 0 4
70818: PPUSH
70819: CALL_OW 74
70823: PPUSH
70824: CALL 71913 0 2
// end ; end ;
70828: GO 70400
70830: POP
70831: POP
// end ;
70832: LD_VAR 0 3
70836: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70837: LD_INT 0
70839: PPUSH
70840: PPUSH
70841: PPUSH
// if not unit or IsInUnit ( unit ) then
70842: LD_VAR 0 1
70846: NOT
70847: IFTRUE 70860
70849: PUSH
70850: LD_VAR 0 1
70854: PPUSH
70855: CALL_OW 310
70859: OR
70860: IFFALSE 70864
// exit ;
70862: GO 70955
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70864: LD_ADDR_VAR 0 4
70868: PUSH
70869: LD_VAR 0 1
70873: PPUSH
70874: CALL_OW 250
70878: PPUSH
70879: LD_VAR 0 2
70883: PPUSH
70884: LD_INT 1
70886: PPUSH
70887: CALL_OW 272
70891: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70892: LD_ADDR_VAR 0 5
70896: PUSH
70897: LD_VAR 0 1
70901: PPUSH
70902: CALL_OW 251
70906: PPUSH
70907: LD_VAR 0 2
70911: PPUSH
70912: LD_INT 1
70914: PPUSH
70915: CALL_OW 273
70919: ST_TO_ADDR
// if ValidHex ( x , y ) then
70920: LD_VAR 0 4
70924: PPUSH
70925: LD_VAR 0 5
70929: PPUSH
70930: CALL_OW 488
70934: IFFALSE 70955
// ComTurnXY ( unit , x , y ) ;
70936: LD_VAR 0 1
70940: PPUSH
70941: LD_VAR 0 4
70945: PPUSH
70946: LD_VAR 0 5
70950: PPUSH
70951: CALL_OW 118
// end ;
70955: LD_VAR 0 3
70959: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70960: LD_INT 0
70962: PPUSH
70963: PPUSH
// result := false ;
70964: LD_ADDR_VAR 0 3
70968: PUSH
70969: LD_INT 0
70971: ST_TO_ADDR
// if not units then
70972: LD_VAR 0 2
70976: NOT
70977: IFFALSE 70981
// exit ;
70979: GO 71026
// for i in units do
70981: LD_ADDR_VAR 0 4
70985: PUSH
70986: LD_VAR 0 2
70990: PUSH
70991: FOR_IN
70992: IFFALSE 71024
// if See ( side , i ) then
70994: LD_VAR 0 1
70998: PPUSH
70999: LD_VAR 0 4
71003: PPUSH
71004: CALL_OW 292
71008: IFFALSE 71022
// begin result := true ;
71010: LD_ADDR_VAR 0 3
71014: PUSH
71015: LD_INT 1
71017: ST_TO_ADDR
// exit ;
71018: POP
71019: POP
71020: GO 71026
// end ;
71022: GO 70991
71024: POP
71025: POP
// end ;
71026: LD_VAR 0 3
71030: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71031: LD_INT 0
71033: PPUSH
71034: PPUSH
71035: PPUSH
71036: PPUSH
// if not unit or not points then
71037: LD_VAR 0 1
71041: NOT
71042: IFTRUE 71051
71044: PUSH
71045: LD_VAR 0 2
71049: NOT
71050: OR
71051: IFFALSE 71055
// exit ;
71053: GO 71145
// dist := 99999 ;
71055: LD_ADDR_VAR 0 5
71059: PUSH
71060: LD_INT 99999
71062: ST_TO_ADDR
// for i in points do
71063: LD_ADDR_VAR 0 4
71067: PUSH
71068: LD_VAR 0 2
71072: PUSH
71073: FOR_IN
71074: IFFALSE 71143
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71076: LD_ADDR_VAR 0 6
71080: PUSH
71081: LD_VAR 0 1
71085: PPUSH
71086: LD_VAR 0 4
71090: PUSH
71091: LD_INT 1
71093: ARRAY
71094: PPUSH
71095: LD_VAR 0 4
71099: PUSH
71100: LD_INT 2
71102: ARRAY
71103: PPUSH
71104: CALL_OW 297
71108: ST_TO_ADDR
// if tmpDist < dist then
71109: LD_VAR 0 6
71113: PUSH
71114: LD_VAR 0 5
71118: LESS
71119: IFFALSE 71141
// begin result := i ;
71121: LD_ADDR_VAR 0 3
71125: PUSH
71126: LD_VAR 0 4
71130: ST_TO_ADDR
// dist := tmpDist ;
71131: LD_ADDR_VAR 0 5
71135: PUSH
71136: LD_VAR 0 6
71140: ST_TO_ADDR
// end ; end ;
71141: GO 71073
71143: POP
71144: POP
// end ;
71145: LD_VAR 0 3
71149: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71150: LD_INT 0
71152: PPUSH
// uc_side := side ;
71153: LD_ADDR_OWVAR 20
71157: PUSH
71158: LD_VAR 0 1
71162: ST_TO_ADDR
// uc_nation := 3 ;
71163: LD_ADDR_OWVAR 21
71167: PUSH
71168: LD_INT 3
71170: ST_TO_ADDR
// vc_chassis := 25 ;
71171: LD_ADDR_OWVAR 37
71175: PUSH
71176: LD_INT 25
71178: ST_TO_ADDR
// vc_engine := engine_siberite ;
71179: LD_ADDR_OWVAR 39
71183: PUSH
71184: LD_INT 3
71186: ST_TO_ADDR
// vc_control := control_computer ;
71187: LD_ADDR_OWVAR 38
71191: PUSH
71192: LD_INT 3
71194: ST_TO_ADDR
// vc_weapon := 59 ;
71195: LD_ADDR_OWVAR 40
71199: PUSH
71200: LD_INT 59
71202: ST_TO_ADDR
// result := CreateVehicle ;
71203: LD_ADDR_VAR 0 5
71207: PUSH
71208: CALL_OW 45
71212: ST_TO_ADDR
// SetDir ( result , d ) ;
71213: LD_VAR 0 5
71217: PPUSH
71218: LD_VAR 0 4
71222: PPUSH
71223: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71227: LD_VAR 0 5
71231: PPUSH
71232: LD_VAR 0 2
71236: PPUSH
71237: LD_VAR 0 3
71241: PPUSH
71242: LD_INT 0
71244: PPUSH
71245: CALL_OW 48
// end ;
71249: LD_VAR 0 5
71253: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71254: LD_INT 0
71256: PPUSH
71257: PPUSH
71258: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71259: LD_ADDR_VAR 0 2
71263: PUSH
71264: LD_INT 0
71266: PUSH
71267: LD_INT 0
71269: PUSH
71270: LD_INT 0
71272: PUSH
71273: LD_INT 0
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71282: LD_VAR 0 1
71286: NOT
71287: IFTRUE 71320
71289: PUSH
71290: LD_VAR 0 1
71294: PPUSH
71295: CALL_OW 264
71299: PUSH
71300: LD_INT 12
71302: PUSH
71303: LD_INT 51
71305: PUSH
71306: LD_INT 32
71308: PUSH
71309: LD_INT 89
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: IN
71318: NOT
71319: OR
71320: IFFALSE 71324
// exit ;
71322: GO 71422
// for i := 1 to 3 do
71324: LD_ADDR_VAR 0 3
71328: PUSH
71329: DOUBLE
71330: LD_INT 1
71332: DEC
71333: ST_TO_ADDR
71334: LD_INT 3
71336: PUSH
71337: FOR_TO
71338: IFFALSE 71420
// begin tmp := GetCargo ( cargo , i ) ;
71340: LD_ADDR_VAR 0 4
71344: PUSH
71345: LD_VAR 0 1
71349: PPUSH
71350: LD_VAR 0 3
71354: PPUSH
71355: CALL_OW 289
71359: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71360: LD_ADDR_VAR 0 2
71364: PUSH
71365: LD_VAR 0 2
71369: PPUSH
71370: LD_VAR 0 3
71374: PPUSH
71375: LD_VAR 0 4
71379: PPUSH
71380: CALL_OW 1
71384: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71385: LD_ADDR_VAR 0 2
71389: PUSH
71390: LD_VAR 0 2
71394: PPUSH
71395: LD_INT 4
71397: PPUSH
71398: LD_VAR 0 2
71402: PUSH
71403: LD_INT 4
71405: ARRAY
71406: PUSH
71407: LD_VAR 0 4
71411: PLUS
71412: PPUSH
71413: CALL_OW 1
71417: ST_TO_ADDR
// end ;
71418: GO 71337
71420: POP
71421: POP
// end ;
71422: LD_VAR 0 2
71426: RET
// export function Length ( array ) ; begin
71427: LD_INT 0
71429: PPUSH
// result := array + 0 ;
71430: LD_ADDR_VAR 0 2
71434: PUSH
71435: LD_VAR 0 1
71439: PUSH
71440: LD_INT 0
71442: PLUS
71443: ST_TO_ADDR
// end ;
71444: LD_VAR 0 2
71448: RET
// export function PrepareArray ( array ) ; begin
71449: LD_INT 0
71451: PPUSH
// result := array diff 0 ;
71452: LD_ADDR_VAR 0 2
71456: PUSH
71457: LD_VAR 0 1
71461: PUSH
71462: LD_INT 0
71464: DIFF
71465: ST_TO_ADDR
// if not result [ 1 ] then
71466: LD_VAR 0 2
71470: PUSH
71471: LD_INT 1
71473: ARRAY
71474: NOT
71475: IFFALSE 71495
// result := Delete ( result , 1 ) ;
71477: LD_ADDR_VAR 0 2
71481: PUSH
71482: LD_VAR 0 2
71486: PPUSH
71487: LD_INT 1
71489: PPUSH
71490: CALL_OW 3
71494: ST_TO_ADDR
// end ;
71495: LD_VAR 0 2
71499: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71500: LD_INT 0
71502: PPUSH
71503: PPUSH
71504: PPUSH
71505: PPUSH
// sibRocketRange := 25 ;
71506: LD_ADDR_VAR 0 6
71510: PUSH
71511: LD_INT 25
71513: ST_TO_ADDR
// result := false ;
71514: LD_ADDR_VAR 0 4
71518: PUSH
71519: LD_INT 0
71521: ST_TO_ADDR
// for i := 0 to 5 do
71522: LD_ADDR_VAR 0 5
71526: PUSH
71527: DOUBLE
71528: LD_INT 0
71530: DEC
71531: ST_TO_ADDR
71532: LD_INT 5
71534: PUSH
71535: FOR_TO
71536: IFFALSE 71603
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71538: LD_VAR 0 1
71542: PPUSH
71543: LD_VAR 0 5
71547: PPUSH
71548: LD_VAR 0 6
71552: PPUSH
71553: CALL_OW 272
71557: PPUSH
71558: LD_VAR 0 2
71562: PPUSH
71563: LD_VAR 0 5
71567: PPUSH
71568: LD_VAR 0 6
71572: PPUSH
71573: CALL_OW 273
71577: PPUSH
71578: LD_VAR 0 3
71582: PPUSH
71583: CALL_OW 309
71587: IFFALSE 71601
// begin result := true ;
71589: LD_ADDR_VAR 0 4
71593: PUSH
71594: LD_INT 1
71596: ST_TO_ADDR
// exit ;
71597: POP
71598: POP
71599: GO 71605
// end ;
71601: GO 71535
71603: POP
71604: POP
// end ;
71605: LD_VAR 0 4
71609: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71610: LD_INT 0
71612: PPUSH
71613: PPUSH
71614: PPUSH
// if btype = b_depot then
71615: LD_VAR 0 2
71619: PUSH
71620: LD_INT 0
71622: EQUAL
71623: IFFALSE 71635
// begin result := true ;
71625: LD_ADDR_VAR 0 3
71629: PUSH
71630: LD_INT 1
71632: ST_TO_ADDR
// exit ;
71633: GO 71755
// end ; pom := GetBase ( depot ) ;
71635: LD_ADDR_VAR 0 4
71639: PUSH
71640: LD_VAR 0 1
71644: PPUSH
71645: CALL_OW 274
71649: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71650: LD_ADDR_VAR 0 5
71654: PUSH
71655: LD_VAR 0 2
71659: PPUSH
71660: LD_VAR 0 1
71664: PPUSH
71665: CALL_OW 248
71669: PPUSH
71670: CALL_OW 450
71674: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71675: LD_ADDR_VAR 0 3
71679: PUSH
71680: LD_VAR 0 4
71684: PPUSH
71685: LD_INT 1
71687: PPUSH
71688: CALL_OW 275
71692: PUSH
71693: LD_VAR 0 5
71697: PUSH
71698: LD_INT 1
71700: ARRAY
71701: GREATEREQUAL
71702: IFFALSE 71728
71704: PUSH
71705: LD_VAR 0 4
71709: PPUSH
71710: LD_INT 2
71712: PPUSH
71713: CALL_OW 275
71717: PUSH
71718: LD_VAR 0 5
71722: PUSH
71723: LD_INT 2
71725: ARRAY
71726: GREATEREQUAL
71727: AND
71728: IFFALSE 71754
71730: PUSH
71731: LD_VAR 0 4
71735: PPUSH
71736: LD_INT 3
71738: PPUSH
71739: CALL_OW 275
71743: PUSH
71744: LD_VAR 0 5
71748: PUSH
71749: LD_INT 3
71751: ARRAY
71752: GREATEREQUAL
71753: AND
71754: ST_TO_ADDR
// end ;
71755: LD_VAR 0 3
71759: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71760: LD_INT 0
71762: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71763: LD_VAR 0 1
71767: PPUSH
71768: LD_VAR 0 2
71772: PPUSH
71773: LD_INT 0
71775: PPUSH
71776: LD_INT 0
71778: PPUSH
71779: LD_INT 1
71781: PPUSH
71782: LD_INT 0
71784: PPUSH
71785: CALL_OW 587
// end ;
71789: LD_VAR 0 3
71793: RET
// export function CenterOnNow ( unit ) ; begin
71794: LD_INT 0
71796: PPUSH
// result := IsInUnit ( unit ) ;
71797: LD_ADDR_VAR 0 2
71801: PUSH
71802: LD_VAR 0 1
71806: PPUSH
71807: CALL_OW 310
71811: ST_TO_ADDR
// if not result then
71812: LD_VAR 0 2
71816: NOT
71817: IFFALSE 71829
// result := unit ;
71819: LD_ADDR_VAR 0 2
71823: PUSH
71824: LD_VAR 0 1
71828: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71829: LD_VAR 0 1
71833: PPUSH
71834: CALL_OW 87
// end ;
71838: LD_VAR 0 2
71842: RET
// export function ComMoveHex ( unit , hex ) ; begin
71843: LD_INT 0
71845: PPUSH
// if not hex then
71846: LD_VAR 0 2
71850: NOT
71851: IFFALSE 71855
// exit ;
71853: GO 71908
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71855: LD_VAR 0 2
71859: PUSH
71860: LD_INT 1
71862: ARRAY
71863: PPUSH
71864: LD_VAR 0 2
71868: PUSH
71869: LD_INT 2
71871: ARRAY
71872: PPUSH
71873: CALL_OW 428
71877: IFFALSE 71881
// exit ;
71879: GO 71908
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71881: LD_VAR 0 1
71885: PPUSH
71886: LD_VAR 0 2
71890: PUSH
71891: LD_INT 1
71893: ARRAY
71894: PPUSH
71895: LD_VAR 0 2
71899: PUSH
71900: LD_INT 2
71902: ARRAY
71903: PPUSH
71904: CALL_OW 111
// end ;
71908: LD_VAR 0 3
71912: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71913: LD_INT 0
71915: PPUSH
71916: PPUSH
71917: PPUSH
// if not unit or not enemy then
71918: LD_VAR 0 1
71922: NOT
71923: IFTRUE 71932
71925: PUSH
71926: LD_VAR 0 2
71930: NOT
71931: OR
71932: IFFALSE 71936
// exit ;
71934: GO 72062
// x := GetX ( enemy ) ;
71936: LD_ADDR_VAR 0 4
71940: PUSH
71941: LD_VAR 0 2
71945: PPUSH
71946: CALL_OW 250
71950: ST_TO_ADDR
// y := GetY ( enemy ) ;
71951: LD_ADDR_VAR 0 5
71955: PUSH
71956: LD_VAR 0 2
71960: PPUSH
71961: CALL_OW 251
71965: ST_TO_ADDR
// if ValidHex ( x , y ) then
71966: LD_VAR 0 4
71970: PPUSH
71971: LD_VAR 0 5
71975: PPUSH
71976: CALL_OW 488
71980: IFFALSE 72062
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71982: LD_VAR 0 2
71986: PPUSH
71987: CALL_OW 247
71991: PUSH
71992: LD_INT 3
71994: PUSH
71995: LD_INT 2
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: IN
72002: IFTRUE 72025
72004: PUSH
72005: LD_VAR 0 1
72009: PPUSH
72010: CALL_OW 255
72014: PPUSH
72015: LD_VAR 0 2
72019: PPUSH
72020: CALL_OW 292
72024: OR
72025: IFFALSE 72043
// ComAttackUnit ( unit , enemy ) else
72027: LD_VAR 0 1
72031: PPUSH
72032: LD_VAR 0 2
72036: PPUSH
72037: CALL_OW 115
72041: GO 72062
// ComAgressiveMove ( unit , x , y ) ;
72043: LD_VAR 0 1
72047: PPUSH
72048: LD_VAR 0 4
72052: PPUSH
72053: LD_VAR 0 5
72057: PPUSH
72058: CALL_OW 114
// end ;
72062: LD_VAR 0 3
72066: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72067: LD_INT 0
72069: PPUSH
72070: PPUSH
72071: PPUSH
// list := AreaToList ( area , 0 ) ;
72072: LD_ADDR_VAR 0 5
72076: PUSH
72077: LD_VAR 0 1
72081: PPUSH
72082: LD_INT 0
72084: PPUSH
72085: CALL_OW 517
72089: ST_TO_ADDR
// if not list then
72090: LD_VAR 0 5
72094: NOT
72095: IFFALSE 72099
// exit ;
72097: GO 72229
// if all then
72099: LD_VAR 0 2
72103: IFFALSE 72191
// begin for i := 1 to list [ 1 ] do
72105: LD_ADDR_VAR 0 4
72109: PUSH
72110: DOUBLE
72111: LD_INT 1
72113: DEC
72114: ST_TO_ADDR
72115: LD_VAR 0 5
72119: PUSH
72120: LD_INT 1
72122: ARRAY
72123: PUSH
72124: FOR_TO
72125: IFFALSE 72187
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72127: LD_ADDR_VAR 0 3
72131: PUSH
72132: LD_VAR 0 3
72136: PPUSH
72137: LD_VAR 0 3
72141: PUSH
72142: LD_INT 1
72144: PLUS
72145: PPUSH
72146: LD_VAR 0 5
72150: PUSH
72151: LD_INT 1
72153: ARRAY
72154: PUSH
72155: LD_VAR 0 4
72159: ARRAY
72160: PUSH
72161: LD_VAR 0 5
72165: PUSH
72166: LD_INT 2
72168: ARRAY
72169: PUSH
72170: LD_VAR 0 4
72174: ARRAY
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PPUSH
72180: CALL_OW 1
72184: ST_TO_ADDR
72185: GO 72124
72187: POP
72188: POP
// exit ;
72189: GO 72229
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72191: LD_ADDR_VAR 0 3
72195: PUSH
72196: LD_VAR 0 5
72200: PUSH
72201: LD_INT 1
72203: ARRAY
72204: PUSH
72205: LD_INT 1
72207: ARRAY
72208: PUSH
72209: LD_VAR 0 5
72213: PUSH
72214: LD_INT 2
72216: ARRAY
72217: PUSH
72218: LD_INT 1
72220: ARRAY
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: EMPTY
72227: LIST
72228: ST_TO_ADDR
// end ;
72229: LD_VAR 0 3
72233: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72234: LD_INT 0
72236: PPUSH
72237: PPUSH
// list := AreaToList ( area , 0 ) ;
72238: LD_ADDR_VAR 0 4
72242: PUSH
72243: LD_VAR 0 1
72247: PPUSH
72248: LD_INT 0
72250: PPUSH
72251: CALL_OW 517
72255: ST_TO_ADDR
// if not list then
72256: LD_VAR 0 4
72260: NOT
72261: IFFALSE 72265
// exit ;
72263: GO 72306
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72265: LD_ADDR_VAR 0 3
72269: PUSH
72270: LD_VAR 0 4
72274: PUSH
72275: LD_INT 1
72277: ARRAY
72278: PUSH
72279: LD_INT 1
72281: ARRAY
72282: PUSH
72283: LD_VAR 0 4
72287: PUSH
72288: LD_INT 2
72290: ARRAY
72291: PUSH
72292: LD_INT 1
72294: ARRAY
72295: PUSH
72296: LD_VAR 0 2
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: LIST
72305: ST_TO_ADDR
// end ;
72306: LD_VAR 0 3
72310: RET
// export function First ( array ) ; begin
72311: LD_INT 0
72313: PPUSH
// if not array then
72314: LD_VAR 0 1
72318: NOT
72319: IFFALSE 72323
// exit ;
72321: GO 72337
// result := array [ 1 ] ;
72323: LD_ADDR_VAR 0 2
72327: PUSH
72328: LD_VAR 0 1
72332: PUSH
72333: LD_INT 1
72335: ARRAY
72336: ST_TO_ADDR
// end ;
72337: LD_VAR 0 2
72341: RET
// export function Last ( array ) ; begin
72342: LD_INT 0
72344: PPUSH
// if not array then
72345: LD_VAR 0 1
72349: NOT
72350: IFFALSE 72354
// exit ;
72352: GO 72370
// result := array [ array ] ;
72354: LD_ADDR_VAR 0 2
72358: PUSH
72359: LD_VAR 0 1
72363: PUSH
72364: LD_VAR 0 1
72368: ARRAY
72369: ST_TO_ADDR
// end ;
72370: LD_VAR 0 2
72374: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
72375: LD_INT 0
72377: PPUSH
72378: PPUSH
// result := [ ] ;
72379: LD_ADDR_VAR 0 5
72383: PUSH
72384: EMPTY
72385: ST_TO_ADDR
// if not array then
72386: LD_VAR 0 1
72390: NOT
72391: IFFALSE 72395
// exit ;
72393: GO 72507
// for i := 1 to array do
72395: LD_ADDR_VAR 0 6
72399: PUSH
72400: DOUBLE
72401: LD_INT 1
72403: DEC
72404: ST_TO_ADDR
72405: LD_VAR 0 1
72409: PUSH
72410: FOR_TO
72411: IFFALSE 72505
// if array [ i ] [ index ] = value then
72413: LD_VAR 0 1
72417: PUSH
72418: LD_VAR 0 6
72422: ARRAY
72423: PUSH
72424: LD_VAR 0 2
72428: ARRAY
72429: PUSH
72430: LD_VAR 0 3
72434: EQUAL
72435: IFFALSE 72503
// begin if indexColumn then
72437: LD_VAR 0 4
72441: IFFALSE 72477
// result := Join ( result , array [ i ] [ indexColumn ] ) else
72443: LD_ADDR_VAR 0 5
72447: PUSH
72448: LD_VAR 0 5
72452: PPUSH
72453: LD_VAR 0 1
72457: PUSH
72458: LD_VAR 0 6
72462: ARRAY
72463: PUSH
72464: LD_VAR 0 4
72468: ARRAY
72469: PPUSH
72470: CALL 67515 0 2
72474: ST_TO_ADDR
72475: GO 72503
// result := Join ( result , array [ i ] ) ;
72477: LD_ADDR_VAR 0 5
72481: PUSH
72482: LD_VAR 0 5
72486: PPUSH
72487: LD_VAR 0 1
72491: PUSH
72492: LD_VAR 0 6
72496: ARRAY
72497: PPUSH
72498: CALL 67515 0 2
72502: ST_TO_ADDR
// end ;
72503: GO 72410
72505: POP
72506: POP
// end ;
72507: LD_VAR 0 5
72511: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72512: LD_INT 0
72514: PPUSH
// if not vehicles or not parkingPoint then
72515: LD_VAR 0 1
72519: NOT
72520: IFTRUE 72529
72522: PUSH
72523: LD_VAR 0 2
72527: NOT
72528: OR
72529: IFFALSE 72533
// exit ;
72531: GO 72631
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72533: LD_ADDR_VAR 0 1
72537: PUSH
72538: LD_VAR 0 1
72542: PPUSH
72543: LD_INT 50
72545: PUSH
72546: EMPTY
72547: LIST
72548: PUSH
72549: LD_INT 3
72551: PUSH
72552: LD_INT 92
72554: PUSH
72555: LD_VAR 0 2
72559: PUSH
72560: LD_INT 1
72562: ARRAY
72563: PUSH
72564: LD_VAR 0 2
72568: PUSH
72569: LD_INT 2
72571: ARRAY
72572: PUSH
72573: LD_INT 8
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PPUSH
72590: CALL_OW 72
72594: ST_TO_ADDR
// if not vehicles then
72595: LD_VAR 0 1
72599: NOT
72600: IFFALSE 72604
// exit ;
72602: GO 72631
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72604: LD_VAR 0 1
72608: PPUSH
72609: LD_VAR 0 2
72613: PUSH
72614: LD_INT 1
72616: ARRAY
72617: PPUSH
72618: LD_VAR 0 2
72622: PUSH
72623: LD_INT 2
72625: ARRAY
72626: PPUSH
72627: CALL_OW 111
// end ;
72631: LD_VAR 0 3
72635: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72636: LD_INT 0
72638: PPUSH
72639: PPUSH
72640: PPUSH
// if not side or not area then
72641: LD_VAR 0 1
72645: NOT
72646: IFTRUE 72655
72648: PUSH
72649: LD_VAR 0 2
72653: NOT
72654: OR
72655: IFFALSE 72659
// exit ;
72657: GO 72778
// tmp := AreaToList ( area , 0 ) ;
72659: LD_ADDR_VAR 0 5
72663: PUSH
72664: LD_VAR 0 2
72668: PPUSH
72669: LD_INT 0
72671: PPUSH
72672: CALL_OW 517
72676: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72677: LD_ADDR_VAR 0 4
72681: PUSH
72682: DOUBLE
72683: LD_INT 1
72685: DEC
72686: ST_TO_ADDR
72687: LD_VAR 0 5
72691: PUSH
72692: LD_INT 1
72694: ARRAY
72695: PUSH
72696: FOR_TO
72697: IFFALSE 72776
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72699: LD_VAR 0 5
72703: PUSH
72704: LD_INT 1
72706: ARRAY
72707: PUSH
72708: LD_VAR 0 4
72712: ARRAY
72713: PPUSH
72714: LD_VAR 0 5
72718: PUSH
72719: LD_INT 2
72721: ARRAY
72722: PUSH
72723: LD_VAR 0 4
72727: ARRAY
72728: PPUSH
72729: CALL_OW 351
72733: IFFALSE 72774
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72735: LD_VAR 0 5
72739: PUSH
72740: LD_INT 1
72742: ARRAY
72743: PUSH
72744: LD_VAR 0 4
72748: ARRAY
72749: PPUSH
72750: LD_VAR 0 5
72754: PUSH
72755: LD_INT 2
72757: ARRAY
72758: PUSH
72759: LD_VAR 0 4
72763: ARRAY
72764: PPUSH
72765: LD_VAR 0 1
72769: PPUSH
72770: CALL_OW 244
// end ;
72774: GO 72696
72776: POP
72777: POP
// end ;
72778: LD_VAR 0 3
72782: RET
// export function UniqueArray ( array ) ; var i ; begin
72783: LD_INT 0
72785: PPUSH
72786: PPUSH
// result := [ ] ;
72787: LD_ADDR_VAR 0 2
72791: PUSH
72792: EMPTY
72793: ST_TO_ADDR
// if not array then
72794: LD_VAR 0 1
72798: NOT
72799: IFFALSE 72803
// exit ;
72801: GO 72864
// for i := 1 to array do
72803: LD_ADDR_VAR 0 3
72807: PUSH
72808: DOUBLE
72809: LD_INT 1
72811: DEC
72812: ST_TO_ADDR
72813: LD_VAR 0 1
72817: PUSH
72818: FOR_TO
72819: IFFALSE 72862
// if not array [ i ] in result then
72821: LD_VAR 0 1
72825: PUSH
72826: LD_VAR 0 3
72830: ARRAY
72831: PUSH
72832: LD_VAR 0 2
72836: IN
72837: NOT
72838: IFFALSE 72860
// result := Join ( result , i ) ;
72840: LD_ADDR_VAR 0 2
72844: PUSH
72845: LD_VAR 0 2
72849: PPUSH
72850: LD_VAR 0 3
72854: PPUSH
72855: CALL 67515 0 2
72859: ST_TO_ADDR
72860: GO 72818
72862: POP
72863: POP
// end ; end_of_file
72864: LD_VAR 0 2
72868: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72869: LD_VAR 0 1
72873: PUSH
72874: LD_INT 200
72876: DOUBLE
72877: GREATEREQUAL
72878: IFFALSE 72886
72880: LD_INT 299
72882: DOUBLE
72883: LESSEQUAL
72884: IFTRUE 72888
72886: GO 72920
72888: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72889: LD_VAR 0 1
72893: PPUSH
72894: LD_VAR 0 2
72898: PPUSH
72899: LD_VAR 0 3
72903: PPUSH
72904: LD_VAR 0 4
72908: PPUSH
72909: LD_VAR 0 5
72913: PPUSH
72914: CALL 23825 0 5
72918: GO 72997
72920: LD_INT 300
72922: DOUBLE
72923: GREATEREQUAL
72924: IFFALSE 72932
72926: LD_INT 399
72928: DOUBLE
72929: LESSEQUAL
72930: IFTRUE 72934
72932: GO 72996
72934: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72935: LD_VAR 0 1
72939: PPUSH
72940: LD_VAR 0 2
72944: PPUSH
72945: LD_VAR 0 3
72949: PPUSH
72950: LD_VAR 0 4
72954: PPUSH
72955: LD_VAR 0 5
72959: PPUSH
72960: LD_VAR 0 6
72964: PPUSH
72965: LD_VAR 0 7
72969: PPUSH
72970: LD_VAR 0 8
72974: PPUSH
72975: LD_VAR 0 9
72979: PPUSH
72980: LD_VAR 0 10
72984: PPUSH
72985: LD_VAR 0 11
72989: PPUSH
72990: CALL 19709 0 11
72994: GO 72997
72996: POP
// end ;
72997: PPOPN 11
72999: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73000: LD_VAR 0 1
73004: PPUSH
73005: LD_VAR 0 2
73009: PPUSH
73010: LD_VAR 0 3
73014: PPUSH
73015: LD_VAR 0 4
73019: PPUSH
73020: LD_VAR 0 5
73024: PPUSH
73025: CALL 23206 0 5
// end ; end_of_file
73029: PPOPN 5
73031: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73032: LD_VAR 0 1
73036: PPUSH
73037: LD_VAR 0 2
73041: PPUSH
73042: LD_VAR 0 3
73046: PPUSH
73047: LD_VAR 0 4
73051: PPUSH
73052: LD_VAR 0 5
73056: PPUSH
73057: LD_VAR 0 6
73061: PPUSH
73062: CALL 7249 0 6
// end ;
73066: PPOPN 6
73068: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73069: LD_INT 0
73071: PPUSH
// begin if not units then
73072: LD_VAR 0 1
73076: NOT
73077: IFFALSE 73081
// exit ;
73079: GO 73115
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
73081: LD_VAR 0 1
73085: PPUSH
73086: LD_VAR 0 2
73090: PPUSH
73091: LD_VAR 0 3
73095: PPUSH
73096: LD_VAR 0 4
73100: PPUSH
73101: LD_VAR 0 5
73105: PPUSH
73106: LD_VAR 0 6
73110: PPUSH
73111: CALL 29332 0 6
// end ;
73115: PPOPN 7
73117: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73118: CALL 7136 0 0
// end ;
73122: PPOPN 1
73124: END
