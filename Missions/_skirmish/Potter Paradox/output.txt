// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 181 0 0
// PrepareAllies ;
  12: CALL 2172 0 0
// Action ;
  16: CALL 4314 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 133 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 8
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 9
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 11
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 13
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// bonus_num := 0 ;
 120: LD_ADDR_EXP 12
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ;
 128: LD_VAR 0 1
 132: RET
// export function SetDiplomacy ; begin
 133: LD_INT 0
 135: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 136: LD_INT 92
 138: PPUSH
 139: LD_INT 48
 141: PPUSH
 142: LD_INT 8
 144: PPUSH
 145: LD_INT 32796
 147: NEG
 148: PPUSH
 149: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 153: LD_INT 92
 155: PPUSH
 156: LD_INT 48
 158: PPUSH
 159: LD_INT 8
 161: PPUSH
 162: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 166: LD_INT 5
 168: PPUSH
 169: LD_INT 8
 171: PPUSH
 172: CALL_OW 343
// end ; end_of_file
 176: LD_VAR 0 1
 180: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 181: LD_INT 0
 183: PPUSH
 184: PPUSH
 185: PPUSH
 186: PPUSH
 187: PPUSH
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
 197: PPUSH
 198: PPUSH
 199: PPUSH
 200: PPUSH
// uc_side := 2 ;
 201: LD_ADDR_OWVAR 20
 205: PUSH
 206: LD_INT 2
 208: ST_TO_ADDR
// uc_nation := nation_arabian ;
 209: LD_ADDR_OWVAR 21
 213: PUSH
 214: LD_INT 2
 216: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: LD_INT 6
 225: PPUSH
 226: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 230: LD_ADDR_OWVAR 26
 234: PUSH
 235: LD_STRING Nicolas Vervecken
 237: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 238: LD_ADDR_OWVAR 33
 242: PUSH
 243: LD_STRING SecondCharsGal
 245: ST_TO_ADDR
// hc_face_number := 3 ;
 246: LD_ADDR_OWVAR 34
 250: PUSH
 251: LD_INT 3
 253: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 254: LD_ADDR_OWVAR 29
 258: PUSH
 259: LD_INT 11
 261: PUSH
 262: LD_INT 10
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// Vervecken := CreateHuman ;
 269: LD_ADDR_EXP 10
 273: PUSH
 274: CALL_OW 44
 278: ST_TO_ADDR
// InitHc ;
 279: CALL_OW 19
// uc_side := 8 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 8
 290: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 291: LD_INT 23
 293: PPUSH
 294: CALL_OW 274
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 4000
 304: PUSH
 305: LD_INT 2500
 307: PUSH
 308: LD_INT 1250
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_OWVAR 67
 320: ARRAY
 321: PPUSH
 322: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 326: LD_INT 23
 328: PPUSH
 329: CALL_OW 274
 333: PPUSH
 334: LD_INT 2
 336: PPUSH
 337: LD_INT 300
 339: PPUSH
 340: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 3
 354: PPUSH
 355: LD_INT 100
 357: PUSH
 358: LD_INT 50
 360: PUSH
 361: LD_INT 30
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 379: LD_ADDR_VAR 0 14
 383: PUSH
 384: LD_INT 23
 386: PPUSH
 387: CALL_OW 250
 391: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 392: LD_ADDR_VAR 0 15
 396: PUSH
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 251
 404: ST_TO_ADDR
// team := [ ] ;
 405: LD_ADDR_VAR 0 7
 409: PUSH
 410: EMPTY
 411: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 412: LD_ADDR_VAR 0 8
 416: PUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 8
 422: PUSH
 423: LD_INT 7
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: PUSH
 431: LD_OWVAR 67
 435: ARRAY
 436: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 437: LD_ADDR_VAR 0 9
 441: PUSH
 442: LD_INT 11
 444: PUSH
 445: LD_INT 9
 447: PUSH
 448: LD_INT 8
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_OWVAR 67
 460: ARRAY
 461: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 462: LD_ADDR_VAR 0 10
 466: PUSH
 467: LD_INT 3
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PUSH
 481: LD_OWVAR 67
 485: ARRAY
 486: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 487: LD_ADDR_VAR 0 11
 491: PUSH
 492: LD_INT 5
 494: PUSH
 495: LD_INT 4
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 512: LD_ADDR_VAR 0 12
 516: PUSH
 517: LD_INT 3
 519: PUSH
 520: LD_INT 2
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_OWVAR 67
 535: ARRAY
 536: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 537: LD_ADDR_VAR 0 13
 541: PUSH
 542: LD_INT 6
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: PUSH
 556: LD_OWVAR 67
 560: ARRAY
 561: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 562: LD_ADDR_VAR 0 18
 566: PUSH
 567: LD_INT 13
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 26
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 14
 587: PUSH
 588: LD_INT 3
 590: PUSH
 591: LD_INT 1
 593: PUSH
 594: LD_INT 25
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 14
 605: PUSH
 606: LD_INT 3
 608: PUSH
 609: LD_INT 5
 611: PUSH
 612: LD_INT 32
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 14
 623: PUSH
 624: LD_INT 3
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 31
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 14
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: LD_INT 24
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 14
 659: PUSH
 660: LD_INT 3
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 25
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 13
 677: PUSH
 678: LD_INT 3
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: LD_INT 24
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 18
 716: PUSH
 717: LD_OWVAR 67
 721: MINUS
 722: PUSH
 723: LD_INT 1
 725: PLUS
 726: PUSH
 727: FOR_TO
 728: IFFALSE 857
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 730: LD_ADDR_OWVAR 37
 734: PUSH
 735: LD_VAR 0 18
 739: PUSH
 740: LD_VAR 0 2
 744: ARRAY
 745: PUSH
 746: LD_INT 1
 748: ARRAY
 749: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 750: LD_ADDR_OWVAR 39
 754: PUSH
 755: LD_VAR 0 18
 759: PUSH
 760: LD_VAR 0 2
 764: ARRAY
 765: PUSH
 766: LD_INT 2
 768: ARRAY
 769: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 770: LD_ADDR_OWVAR 38
 774: PUSH
 775: LD_VAR 0 18
 779: PUSH
 780: LD_VAR 0 2
 784: ARRAY
 785: PUSH
 786: LD_INT 3
 788: ARRAY
 789: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 790: LD_ADDR_OWVAR 40
 794: PUSH
 795: LD_VAR 0 18
 799: PUSH
 800: LD_VAR 0 2
 804: ARRAY
 805: PUSH
 806: LD_INT 4
 808: ARRAY
 809: ST_TO_ADDR
// un := CreateVehicle ;
 810: LD_ADDR_VAR 0 6
 814: PUSH
 815: CALL_OW 45
 819: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 820: LD_VAR 0 6
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: LD_INT 5
 830: PPUSH
 831: CALL_OW 12
 835: PPUSH
 836: CALL_OW 233
// PlaceUnitArea ( un , parking , false ) ;
 840: LD_VAR 0 6
 844: PPUSH
 845: LD_INT 7
 847: PPUSH
 848: LD_INT 0
 850: PPUSH
 851: CALL_OW 49
// end ;
 855: GO 727
 857: POP
 858: POP
// for i = 1 to ape_num do
 859: LD_ADDR_VAR 0 2
 863: PUSH
 864: DOUBLE
 865: LD_INT 1
 867: DEC
 868: ST_TO_ADDR
 869: LD_VAR 0 13
 873: PUSH
 874: FOR_TO
 875: IFFALSE 942
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 877: LD_INT 0
 879: PPUSH
 880: LD_INT 16
 882: PUSH
 883: LD_INT 15
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 2
 895: PPUSH
 896: CALL_OW 12
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 8
 906: PPUSH
 907: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 911: LD_ADDR_VAR 0 7
 915: PUSH
 916: LD_VAR 0 7
 920: PPUSH
 921: LD_VAR 0 7
 925: PUSH
 926: LD_INT 1
 928: PLUS
 929: PPUSH
 930: CALL_OW 44
 934: PPUSH
 935: CALL_OW 2
 939: ST_TO_ADDR
// end ;
 940: GO 874
 942: POP
 943: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 1
 949: PPUSH
 950: LD_VAR 0 8
 954: PPUSH
 955: CALL_OW 380
// l1 := CreateHuman ;
 959: LD_ADDR_EXP 2
 963: PUSH
 964: CALL_OW 44
 968: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
 969: LD_EXP 2
 973: PPUSH
 974: LD_INT 23
 976: PPUSH
 977: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
 981: LD_INT 1
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_VAR 0 8
 991: PPUSH
 992: CALL_OW 380
// l2 := CreateHuman ;
 996: LD_ADDR_EXP 3
1000: PUSH
1001: CALL_OW 44
1005: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1006: LD_EXP 3
1010: PPUSH
1011: LD_INT 23
1013: PPUSH
1014: CALL_OW 52
// for class = 1 to 4 do
1018: LD_ADDR_VAR 0 4
1022: PUSH
1023: DOUBLE
1024: LD_INT 1
1026: DEC
1027: ST_TO_ADDR
1028: LD_INT 4
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1131
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_VAR 0 9
1048: PUSH
1049: LD_VAR 0 10
1053: PUSH
1054: LD_VAR 0 11
1058: PUSH
1059: LD_VAR 0 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_VAR 0 4
1074: ARRAY
1075: PUSH
1076: FOR_TO
1077: IFFALSE 1127
// begin PrepareHuman ( false , class , skill ) ;
1079: LD_INT 0
1081: PPUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 8
1091: PPUSH
1092: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1096: LD_ADDR_VAR 0 7
1100: PUSH
1101: LD_VAR 0 7
1105: PPUSH
1106: LD_VAR 0 7
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: PPUSH
1115: CALL_OW 44
1119: PPUSH
1120: CALL_OW 2
1124: ST_TO_ADDR
// end ;
1125: GO 1076
1127: POP
1128: POP
1129: GO 1031
1131: POP
1132: POP
// for i in team do
1133: LD_ADDR_VAR 0 2
1137: PUSH
1138: LD_VAR 0 7
1142: PUSH
1143: FOR_IN
1144: IFFALSE 1620
// begin b := 0 ;
1146: LD_ADDR_VAR 0 5
1150: PUSH
1151: LD_INT 0
1153: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1154: LD_VAR 0 2
1158: PPUSH
1159: CALL_OW 257
1163: PUSH
1164: LD_INT 1
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1279
1172: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_OWVAR 20
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 2
1192: PUSH
1193: LD_INT 30
1195: PUSH
1196: LD_INT 32
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 31
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 58
1220: PUSH
1221: EMPTY
1222: LIST
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: PPUSH
1229: CALL_OW 69
1233: ST_TO_ADDR
// if not b then
1234: LD_VAR 0 5
1238: NOT
1239: IFFALSE 1277
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1241: LD_ADDR_VAR 0 5
1245: PUSH
1246: LD_INT 22
1248: PUSH
1249: LD_OWVAR 20
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 30
1260: PUSH
1261: LD_INT 5
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PPUSH
1272: CALL_OW 69
1276: ST_TO_ADDR
// end ; class_engineer :
1277: GO 1518
1279: LD_INT 2
1281: DOUBLE
1282: EQUAL
1283: IFTRUE 1287
1285: GO 1326
1287: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1288: LD_ADDR_VAR 0 5
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_OWVAR 20
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: ST_TO_ADDR
1324: GO 1518
1326: LD_INT 3
1328: DOUBLE
1329: EQUAL
1330: IFTRUE 1334
1332: GO 1423
1334: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1335: LD_ADDR_VAR 0 5
1339: PUSH
1340: LD_INT 22
1342: PUSH
1343: LD_OWVAR 20
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 21
1354: PUSH
1355: LD_INT 2
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: EMPTY
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: LIST
1372: PPUSH
1373: CALL_OW 69
1377: ST_TO_ADDR
// if not b then
1378: LD_VAR 0 5
1382: NOT
1383: IFFALSE 1421
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1385: LD_ADDR_VAR 0 5
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_OWVAR 20
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: LD_INT 30
1404: PUSH
1405: LD_INT 3
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PPUSH
1416: CALL_OW 69
1420: ST_TO_ADDR
// end ; class_scientistic :
1421: GO 1518
1423: LD_INT 4
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1470
1431: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1432: LD_ADDR_VAR 0 5
1436: PUSH
1437: LD_INT 22
1439: PUSH
1440: LD_OWVAR 20
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 30
1451: PUSH
1452: LD_INT 8
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PPUSH
1463: CALL_OW 69
1467: ST_TO_ADDR
// end ; class_apeman_soldier :
1468: GO 1518
1470: LD_INT 15
1472: DOUBLE
1473: EQUAL
1474: IFTRUE 1478
1476: GO 1517
1478: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_INT 22
1486: PUSH
1487: LD_OWVAR 20
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 30
1498: PUSH
1499: LD_INT 5
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PPUSH
1510: CALL_OW 69
1514: ST_TO_ADDR
1515: GO 1518
1517: POP
// if b then
1518: LD_VAR 0 5
1522: IFFALSE 1593
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: PPUSH
1533: CALL_OW 266
1537: PUSH
1538: LD_INT 31
1540: EQUAL
1541: IFFALSE 1563
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_VAR 0 5
1552: PUSH
1553: LD_INT 1
1555: ARRAY
1556: PPUSH
1557: CALL 5028 0 2
1561: GO 1591
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1563: LD_VAR 0 2
1567: PPUSH
1568: LD_VAR 0 5
1572: PUSH
1573: LD_INT 1
1575: PPUSH
1576: LD_VAR 0 5
1580: PPUSH
1581: CALL_OW 12
1585: ARRAY
1586: PPUSH
1587: CALL_OW 52
1591: GO 1618
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1593: LD_VAR 0 2
1597: PPUSH
1598: LD_VAR 0 14
1602: PPUSH
1603: LD_VAR 0 15
1607: PPUSH
1608: LD_INT 15
1610: PPUSH
1611: LD_INT 0
1613: PPUSH
1614: CALL_OW 50
// end ;
1618: GO 1143
1620: POP
1621: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1622: LD_ADDR_VAR 0 16
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 3
1632: PUSH
1633: LD_INT 2
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: PUSH
1644: LD_OWVAR 67
1648: ARRAY
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 25
1656: PUSH
1657: LD_INT 5
1659: PUSH
1660: LD_INT 4
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_OWVAR 67
1675: ARRAY
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 24
1683: PUSH
1684: LD_INT 5
1686: PUSH
1687: LD_INT 5
1689: PUSH
1690: LD_INT 4
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_OWVAR 67
1702: ARRAY
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 30
1710: PUSH
1711: LD_INT 2
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: LD_INT 1
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_OWVAR 67
1729: ARRAY
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: LD_INT 22
1748: PUSH
1749: LD_OWVAR 20
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 30
1760: PUSH
1761: LD_INT 32
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PPUSH
1772: CALL_OW 69
1776: PUSH
1777: FOR_IN
1778: IFFALSE 1951
// begin if weapons then
1780: LD_VAR 0 16
1784: IFFALSE 1908
// begin k := rand ( 1 , weapons ) ;
1786: LD_ADDR_VAR 0 3
1790: PUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_VAR 0 16
1798: PPUSH
1799: CALL_OW 12
1803: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1804: LD_ADDR_VAR 0 17
1808: PUSH
1809: LD_VAR 0 16
1813: PUSH
1814: LD_VAR 0 3
1818: ARRAY
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1824: LD_ADDR_VAR 0 16
1828: PUSH
1829: LD_VAR 0 16
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_VAR 0 16
1846: PUSH
1847: LD_VAR 0 3
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PUSH
1857: LD_INT 1
1859: MINUS
1860: PPUSH
1861: CALL 5120 0 4
1865: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1866: LD_VAR 0 16
1870: PUSH
1871: LD_VAR 0 3
1875: ARRAY
1876: PUSH
1877: LD_INT 2
1879: ARRAY
1880: PUSH
1881: LD_INT 0
1883: EQUAL
1884: IFFALSE 1906
// weapons := Delete ( weapons , k ) ;
1886: LD_ADDR_VAR 0 16
1890: PUSH
1891: LD_VAR 0 16
1895: PPUSH
1896: LD_VAR 0 3
1900: PPUSH
1901: CALL_OW 3
1905: ST_TO_ADDR
// end else
1906: GO 1935
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1908: LD_ADDR_VAR 0 17
1912: PUSH
1913: LD_INT 27
1915: PUSH
1916: LD_INT 23
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 1
1925: PPUSH
1926: LD_INT 2
1928: PPUSH
1929: CALL_OW 12
1933: ARRAY
1934: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1935: LD_VAR 0 2
1939: PPUSH
1940: LD_VAR 0 17
1944: PPUSH
1945: CALL_OW 431
// end ;
1949: GO 1777
1951: POP
1952: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: LD_VAR 0 8
1963: PUSH
1964: LD_INT 1
1966: PLUS
1967: PPUSH
1968: CALL_OW 380
// hc_gallery := potter ;
1972: LD_ADDR_OWVAR 33
1976: PUSH
1977: LD_STRING potter
1979: ST_TO_ADDR
// hc_face_number := 1 ;
1980: LD_ADDR_OWVAR 34
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// hc_importance := 100 ;
1988: LD_ADDR_OWVAR 32
1992: PUSH
1993: LD_INT 100
1995: ST_TO_ADDR
// hc_name := Mike Gerste ;
1996: LD_ADDR_OWVAR 26
2000: PUSH
2001: LD_STRING Mike Gerste
2003: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2004: LD_ADDR_OWVAR 29
2008: PUSH
2009: LD_INT 10
2011: PUSH
2012: LD_INT 11
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: ST_TO_ADDR
// legion_commander := CreateHuman ;
2019: LD_ADDR_EXP 1
2023: PUSH
2024: CALL_OW 44
2028: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2029: LD_EXP 1
2033: PPUSH
2034: LD_INT 23
2036: PPUSH
2037: CALL_OW 52
// uc_side := 5 ;
2041: LD_ADDR_OWVAR 20
2045: PUSH
2046: LD_INT 5
2048: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2049: LD_INT 1
2051: PPUSH
2052: LD_INT 4
2054: PPUSH
2055: LD_VAR 0 8
2059: PPUSH
2060: CALL_OW 380
// hc_gallery := potter ;
2064: LD_ADDR_OWVAR 33
2068: PUSH
2069: LD_STRING potter
2071: ST_TO_ADDR
// hc_face_number := 2 ;
2072: LD_ADDR_OWVAR 34
2076: PUSH
2077: LD_INT 2
2079: ST_TO_ADDR
// hc_importance := 0 ;
2080: LD_ADDR_OWVAR 32
2084: PUSH
2085: LD_INT 0
2087: ST_TO_ADDR
// hc_name := George Potter ;
2088: LD_ADDR_OWVAR 26
2092: PUSH
2093: LD_STRING George Potter
2095: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2096: LD_ADDR_OWVAR 29
2100: PUSH
2101: LD_INT 12
2103: PUSH
2104: LD_INT 9
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: ST_TO_ADDR
// potter := CreateHuman ;
2111: LD_ADDR_EXP 4
2115: PUSH
2116: CALL_OW 44
2120: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2121: LD_EXP 4
2125: PPUSH
2126: LD_INT 4
2128: PPUSH
2129: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2133: LD_EXP 4
2137: PPUSH
2138: LD_INT 103
2140: PPUSH
2141: LD_INT 45
2143: PPUSH
2144: LD_INT 0
2146: PPUSH
2147: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2151: LD_EXP 4
2155: PPUSH
2156: LD_INT 23
2158: PPUSH
2159: CALL_OW 119
// InitHc ( ) ;
2163: CALL_OW 19
// end ; end_of_file
2167: LD_VAR 0 1
2171: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2172: LD_INT 0
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// uc_side := 5 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 5
2186: ST_TO_ADDR
// uc_nation := nation_arabian ;
2187: LD_ADDR_OWVAR 21
2191: PUSH
2192: LD_INT 2
2194: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2195: LD_ADDR_VAR 0 4
2199: PUSH
2200: LD_INT 22
2202: PUSH
2203: LD_OWVAR 20
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 30
2214: PUSH
2215: LD_INT 5
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PPUSH
2226: CALL_OW 69
2230: ST_TO_ADDR
// for i = 1 to 3 do
2231: LD_ADDR_VAR 0 2
2235: PUSH
2236: DOUBLE
2237: LD_INT 1
2239: DEC
2240: ST_TO_ADDR
2241: LD_INT 3
2243: PUSH
2244: FOR_TO
2245: IFFALSE 2283
// begin PrepareHuman ( false , 2 , 6 ) ;
2247: LD_INT 0
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 6
2255: PPUSH
2256: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2260: CALL_OW 44
2264: PPUSH
2265: LD_INT 27
2267: PPUSH
2268: LD_INT 22
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: CALL_OW 50
// end ;
2281: GO 2244
2283: POP
2284: POP
// for i = 1 to 3 do
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: DOUBLE
2291: LD_INT 1
2293: DEC
2294: ST_TO_ADDR
2295: LD_INT 3
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2334
// begin PrepareHuman ( false , 1 , 6 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 6
2309: PPUSH
2310: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2314: CALL_OW 44
2318: PPUSH
2319: LD_VAR 0 4
2323: PUSH
2324: LD_INT 1
2326: ARRAY
2327: PPUSH
2328: CALL_OW 52
// end ;
2332: GO 2298
2334: POP
2335: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: LD_INT 22
2343: PUSH
2344: LD_OWVAR 20
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 2
2355: PUSH
2356: LD_INT 30
2358: PUSH
2359: LD_INT 31
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: LD_INT 30
2368: PUSH
2369: LD_INT 32
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PPUSH
2385: CALL_OW 69
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2478
// begin PrepareHuman ( false , 1 , 6 ) ;
2393: LD_INT 0
2395: PPUSH
2396: LD_INT 1
2398: PPUSH
2399: LD_INT 6
2401: PPUSH
2402: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2406: CALL_OW 44
2410: PPUSH
2411: LD_VAR 0 2
2415: PPUSH
2416: CALL 5028 0 2
// if GetBType ( i ) = b_bunker then
2420: LD_VAR 0 2
2424: PPUSH
2425: CALL_OW 266
2429: PUSH
2430: LD_INT 32
2432: EQUAL
2433: IFFALSE 2476
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: LD_INT 27
2442: PUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 24
2448: PUSH
2449: LD_INT 28
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: LD_INT 4
2465: MOD
2466: PUSH
2467: LD_INT 1
2469: PLUS
2470: ARRAY
2471: PPUSH
2472: CALL_OW 431
// end ;
2476: GO 2390
2478: POP
2479: POP
// for i = 1 to 3 do
2480: LD_ADDR_VAR 0 2
2484: PUSH
2485: DOUBLE
2486: LD_INT 1
2488: DEC
2489: ST_TO_ADDR
2490: LD_INT 3
2492: PUSH
2493: FOR_TO
2494: IFFALSE 2611
// begin vc_chassis := ar_half_tracked ;
2496: LD_ADDR_OWVAR 37
2500: PUSH
2501: LD_INT 14
2503: ST_TO_ADDR
// vc_engine := engine_solar ;
2504: LD_ADDR_OWVAR 39
2508: PUSH
2509: LD_INT 2
2511: ST_TO_ADDR
// vc_control := control_manual ;
2512: LD_ADDR_OWVAR 38
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2520: LD_ADDR_OWVAR 40
2524: PUSH
2525: LD_INT 25
2527: PUSH
2528: LD_INT 27
2530: PUSH
2531: LD_INT 26
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: ST_TO_ADDR
// un := CreateVehicle ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 45
2554: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 5
2562: PPUSH
2563: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2567: LD_VAR 0 3
2571: PPUSH
2572: LD_INT 8
2574: PPUSH
2575: LD_INT 0
2577: PPUSH
2578: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2582: LD_INT 0
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2595: CALL_OW 44
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// end ;
2609: GO 2493
2611: POP
2612: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2613: LD_INT 1
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 6
2621: PPUSH
2622: CALL_OW 380
// al_commander := CreateHuman ;
2626: LD_ADDR_EXP 5
2630: PUSH
2631: CALL_OW 44
2635: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2636: LD_EXP 5
2640: PPUSH
2641: LD_INT 22
2643: PUSH
2644: LD_OWVAR 20
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 30
2655: PUSH
2656: LD_INT 0
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL_OW 69
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PPUSH
2676: CALL_OW 52
// InitHc ( ) ;
2680: CALL_OW 19
// end ;
2684: LD_VAR 0 1
2688: RET
// export function ChangeSide ( ) ; var i ; begin
2689: LD_INT 0
2691: PPUSH
2692: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 5
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PUSH
2713: FOR_IN
2714: IFFALSE 2730
// SetSide ( i , 8 ) ;
2716: LD_VAR 0 2
2720: PPUSH
2721: LD_INT 8
2723: PPUSH
2724: CALL_OW 235
2728: GO 2713
2730: POP
2731: POP
// end ;
2732: LD_VAR 0 1
2736: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2737: LD_INT 22
2739: PUSH
2740: LD_INT 5
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: IFFALSE 3265
2753: GO 2755
2755: DISABLE
2756: LD_INT 0
2758: PPUSH
2759: PPUSH
2760: PPUSH
2761: PPUSH
2762: PPUSH
2763: PPUSH
// begin enable ;
2764: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: LD_INT 22
2772: PUSH
2773: LD_INT 5
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: LD_INT 2
2782: PUSH
2783: LD_INT 21
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 21
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 69
2816: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_INT 22
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 30
2834: PUSH
2835: LD_INT 32
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 3
2844: PUSH
2845: LD_INT 24
2847: PUSH
2848: LD_INT 1000
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 69
2868: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2869: LD_ADDR_VAR 0 6
2873: PUSH
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 3
2881: PUSH
2882: LD_INT 54
2884: PUSH
2885: EMPTY
2886: LIST
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 25
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: ST_TO_ADDR
// if not list then
2911: LD_VAR 0 2
2915: NOT
2916: IFFALSE 2920
// exit ;
2918: GO 3265
// for i in list do
2920: LD_ADDR_VAR 0 1
2924: PUSH
2925: LD_VAR 0 2
2929: PUSH
2930: FOR_IN
2931: IFFALSE 3263
// begin if b then
2933: LD_VAR 0 5
2937: IFFALSE 3016
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2939: LD_ADDR_VAR 0 4
2943: PUSH
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_INT 25
2951: PUSH
2952: LD_INT 2
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: PUSH
2964: FOR_IN
2965: IFFALSE 3014
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
2967: LD_VAR 0 4
2971: PPUSH
2972: CALL_OW 314
2976: NOT
2977: PUSH
2978: LD_VAR 0 1
2982: PPUSH
2983: CALL_OW 110
2987: PUSH
2988: LD_INT 7
2990: NONEQUAL
2991: AND
2992: IFFALSE 3012
// ComRepairBuilding ( j , b [ 1 ] ) ;
2994: LD_VAR 0 4
2998: PPUSH
2999: LD_VAR 0 5
3003: PUSH
3004: LD_INT 1
3006: ARRAY
3007: PPUSH
3008: CALL_OW 130
3012: GO 2964
3014: POP
3015: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 256
3025: PUSH
3026: LD_INT 500
3028: LESS
3029: PUSH
3030: LD_VAR 0 1
3034: PPUSH
3035: CALL_OW 110
3039: PUSH
3040: LD_INT 7
3042: EQUAL
3043: NOT
3044: AND
3045: IFFALSE 3095
// begin ComMoveToArea ( i , guard_hill ) ;
3047: LD_VAR 0 1
3051: PPUSH
3052: LD_INT 11
3054: PPUSH
3055: CALL_OW 113
// SetTag ( i , 7 ) ;
3059: LD_VAR 0 1
3063: PPUSH
3064: LD_INT 7
3066: PPUSH
3067: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3071: LD_VAR 0 1
3075: PPUSH
3076: CALL_OW 247
3080: PUSH
3081: LD_INT 2
3083: EQUAL
3084: IFFALSE 3095
// begin AddComExitVehicle ( i ) ;
3086: LD_VAR 0 1
3090: PPUSH
3091: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3095: LD_VAR 0 1
3099: PPUSH
3100: CALL_OW 256
3104: PUSH
3105: LD_INT 1000
3107: EQUAL
3108: PUSH
3109: LD_VAR 0 1
3113: PPUSH
3114: CALL_OW 110
3118: PUSH
3119: LD_INT 7
3121: EQUAL
3122: AND
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 310
3133: NOT
3134: AND
3135: PUSH
3136: LD_VAR 0 6
3140: AND
3141: IFFALSE 3169
// begin SetTag ( i , 0 ) ;
3143: LD_VAR 0 1
3147: PPUSH
3148: LD_INT 0
3150: PPUSH
3151: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3155: LD_VAR 0 6
3159: PPUSH
3160: LD_VAR 0 1
3164: PPUSH
3165: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3169: LD_VAR 0 1
3173: PPUSH
3174: CALL_OW 247
3178: PUSH
3179: LD_INT 2
3181: EQUAL
3182: PUSH
3183: LD_VAR 0 1
3187: PPUSH
3188: CALL_OW 110
3192: PUSH
3193: LD_INT 7
3195: NONEQUAL
3196: AND
3197: PUSH
3198: LD_VAR 0 1
3202: PPUSH
3203: CALL_OW 314
3207: NOT
3208: AND
3209: IFFALSE 3261
// if FilterAllUnits ( [ f_side , 7 ] ) then
3211: LD_INT 22
3213: PUSH
3214: LD_INT 7
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 69
3225: IFFALSE 3261
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3227: LD_VAR 0 1
3231: PPUSH
3232: LD_INT 22
3234: PUSH
3235: LD_INT 7
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PPUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 74
3256: PPUSH
3257: CALL_OW 115
// end ;
3261: GO 2930
3263: POP
3264: POP
// end ; end_of_file
3265: PPOPN 6
3267: END
// export function Game ; var i , val , areas , wave ; begin
3268: LD_INT 0
3270: PPUSH
3271: PPUSH
3272: PPUSH
3273: PPUSH
3274: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 2
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 4
3291: PUSH
3292: LD_INT 5
3294: PUSH
3295: LD_INT 6
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: ST_TO_ADDR
// val := [ 10 , 20 , 30 ] [ Difficulty ] ;
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_INT 10
3313: PUSH
3314: LD_INT 20
3316: PUSH
3317: LD_INT 30
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: PUSH
3325: LD_OWVAR 67
3329: ARRAY
3330: ST_TO_ADDR
// wave := 1 ;
3331: LD_ADDR_VAR 0 5
3335: PUSH
3336: LD_INT 1
3338: ST_TO_ADDR
// while ( game_over = false ) do
3339: LD_EXP 7
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3511
// begin repeat begin Wait ( 0 0$01 ) ;
3349: LD_INT 35
3351: PPUSH
3352: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3356: LD_ADDR_EXP 9
3360: PUSH
3361: LD_EXP 9
3365: PUSH
3366: LD_INT 35
3368: PLUS
3369: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3370: LD_INT 22
3372: PUSH
3373: LD_INT 7
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PPUSH
3380: CALL_OW 69
3384: PUSH
3385: LD_INT 10
3387: LESS
3388: PUSH
3389: LD_EXP 9
3393: PUSH
3394: LD_INT 21000
3396: GREATEREQUAL
3397: OR
3398: IFFALSE 3349
// wave_time := 0 0$00 ;
3400: LD_ADDR_EXP 9
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3408: LD_INT 5250
3410: PPUSH
3411: CALL_OW 67
// if not ignore_wave then
3415: LD_EXP 13
3419: NOT
3420: IFFALSE 3501
// begin for i = 1 to wave do
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: DOUBLE
3428: LD_INT 1
3430: DEC
3431: ST_TO_ADDR
3432: LD_VAR 0 5
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3483
// begin SpawnPotter ( val * i , areas [ i mod 6 + 1 ] ) ;
3440: LD_VAR 0 3
3444: PUSH
3445: LD_VAR 0 2
3449: MUL
3450: PPUSH
3451: LD_VAR 0 4
3455: PUSH
3456: LD_VAR 0 2
3460: PUSH
3461: LD_INT 6
3463: MOD
3464: PUSH
3465: LD_INT 1
3467: PLUS
3468: ARRAY
3469: PPUSH
3470: CALL 3516 0 2
// Wait ( 0 0$10 ) ;
3474: LD_INT 350
3476: PPUSH
3477: CALL_OW 67
// end ;
3481: GO 3437
3483: POP
3484: POP
// wave := wave + 1 ;
3485: LD_ADDR_VAR 0 5
3489: PUSH
3490: LD_VAR 0 5
3494: PUSH
3495: LD_INT 1
3497: PLUS
3498: ST_TO_ADDR
// end else
3499: GO 3509
// ignore_wave := false ;
3501: LD_ADDR_EXP 13
3505: PUSH
3506: LD_INT 0
3508: ST_TO_ADDR
// end ;
3509: GO 3339
// end ;
3511: LD_VAR 0 1
3515: RET
// export function SpawnPotter ( val , area ) ; var i , un , class ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// uc_side := 7 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 7
3529: ST_TO_ADDR
// uc_nation := 2 ;
3530: LD_ADDR_OWVAR 21
3534: PUSH
3535: LD_INT 2
3537: ST_TO_ADDR
// InitHc ( ) ;
3538: CALL_OW 19
// hc_gallery :=  ;
3542: LD_ADDR_OWVAR 33
3546: PUSH
3547: LD_STRING 
3549: ST_TO_ADDR
// hc_importance := 0 ;
3550: LD_ADDR_OWVAR 32
3554: PUSH
3555: LD_INT 0
3557: ST_TO_ADDR
// hc_name :=  ;
3558: LD_ADDR_OWVAR 26
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// hc_attr := [ 10 + ( tick div 10 10$00 ) , 10 + ( tick div 10 10$00 ) ] ;
3566: LD_ADDR_OWVAR 29
3570: PUSH
3571: LD_INT 10
3573: PUSH
3574: LD_OWVAR 1
3578: PUSH
3579: LD_INT 21000
3581: DIV
3582: PLUS
3583: PUSH
3584: LD_INT 10
3586: PUSH
3587: LD_OWVAR 1
3591: PUSH
3592: LD_INT 21000
3594: DIV
3595: PLUS
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: ST_TO_ADDR
// for i = 1 to val do
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_VAR 0 1
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3824
// begin if i mod 9 = 0 then
3619: LD_VAR 0 4
3623: PUSH
3624: LD_INT 9
3626: MOD
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3643
// class := class_apeman_kamikaze else
3633: LD_ADDR_VAR 0 6
3637: PUSH
3638: LD_INT 17
3640: ST_TO_ADDR
3641: GO 3675
// if i mod 4 = 0 then
3643: LD_VAR 0 4
3647: PUSH
3648: LD_INT 4
3650: MOD
3651: PUSH
3652: LD_INT 0
3654: EQUAL
3655: IFFALSE 3667
// class := class_apeman_soldier else
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 15
3664: ST_TO_ADDR
3665: GO 3675
// class := class_apeman ;
3667: LD_ADDR_VAR 0 6
3671: PUSH
3672: LD_INT 12
3674: ST_TO_ADDR
// if i mod 33 = 0 then
3675: LD_VAR 0 4
3679: PUSH
3680: LD_INT 33
3682: MOD
3683: PUSH
3684: LD_INT 0
3686: EQUAL
3687: IFFALSE 3756
// begin vc_chassis := ar_half_tracked ;
3689: LD_ADDR_OWVAR 37
3693: PUSH
3694: LD_INT 14
3696: ST_TO_ADDR
// vc_control := control_apeman ;
3697: LD_ADDR_OWVAR 38
3701: PUSH
3702: LD_INT 5
3704: ST_TO_ADDR
// vc_engine := engine_combustion ;
3705: LD_ADDR_OWVAR 39
3709: PUSH
3710: LD_INT 1
3712: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ rand ( 1 , 2 ) ] ;
3713: LD_ADDR_OWVAR 40
3717: PUSH
3718: LD_INT 28
3720: PUSH
3721: LD_INT 27
3723: PUSH
3724: LD_INT 29
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 2
3737: PPUSH
3738: CALL_OW 12
3742: ARRAY
3743: ST_TO_ADDR
// un := CreateVehicle ;
3744: LD_ADDR_VAR 0 5
3748: PUSH
3749: CALL_OW 45
3753: ST_TO_ADDR
// end else
3754: GO 3781
// begin PrepareHuman ( sex_male , class , 10 ) ;
3756: LD_INT 1
3758: PPUSH
3759: LD_VAR 0 6
3763: PPUSH
3764: LD_INT 10
3766: PPUSH
3767: CALL_OW 380
// un := CreateHuman ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3781: LD_VAR 0 5
3785: PPUSH
3786: LD_VAR 0 2
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3798: LD_VAR 0 5
3802: PPUSH
3803: CALL_OW 250
3807: PPUSH
3808: LD_VAR 0 5
3812: PPUSH
3813: CALL_OW 251
3817: PPUSH
3818: CALL_OW 494
// end ;
3822: GO 3616
3824: POP
3825: POP
// end ;
3826: LD_VAR 0 3
3830: RET
// every 0 0$0.3 trigger alert and not game_over do var i , list , enemy ;
3831: LD_EXP 6
3835: PUSH
3836: LD_EXP 7
3840: NOT
3841: AND
3842: IFFALSE 4128
3844: GO 3846
3846: DISABLE
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
// begin enable ;
3852: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 7
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// if not list then
3873: LD_VAR 0 2
3877: NOT
3878: IFFALSE 3882
// exit ;
3880: GO 4128
// for i in list do
3882: LD_ADDR_VAR 0 1
3886: PUSH
3887: LD_VAR 0 2
3891: PUSH
3892: FOR_IN
3893: IFFALSE 4126
// begin enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 15 ] ] ) ;
3895: LD_ADDR_VAR 0 3
3899: PUSH
3900: LD_INT 81
3902: PUSH
3903: LD_INT 7
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 92
3912: PUSH
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 250
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: CALL_OW 251
3932: PUSH
3933: LD_INT 15
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PPUSH
3946: CALL_OW 69
3950: ST_TO_ADDR
// if not enemy then
3951: LD_VAR 0 3
3955: NOT
3956: IFFALSE 4014
// enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 30 ] ] ) ;
3958: LD_ADDR_VAR 0 3
3962: PUSH
3963: LD_INT 81
3965: PUSH
3966: LD_INT 7
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 92
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 250
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 251
3995: PUSH
3996: LD_INT 30
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 69
4013: ST_TO_ADDR
// if not enemy then
4014: LD_VAR 0 3
4018: NOT
4019: IFFALSE 4077
// enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 50 ] ] ) ;
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_INT 81
4028: PUSH
4029: LD_INT 7
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 92
4038: PUSH
4039: LD_VAR 0 1
4043: PPUSH
4044: CALL_OW 250
4048: PUSH
4049: LD_VAR 0 1
4053: PPUSH
4054: CALL_OW 251
4058: PUSH
4059: LD_INT 50
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 69
4076: ST_TO_ADDR
// if not enemy then
4077: LD_VAR 0 3
4081: NOT
4082: IFFALSE 4104
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
4084: LD_ADDR_VAR 0 3
4088: PUSH
4089: LD_INT 81
4091: PUSH
4092: LD_INT 7
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 69
4103: ST_TO_ADDR
// if enemy then
4104: LD_VAR 0 3
4108: IFFALSE 4124
// Attack ( i , enemy ) ;
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL 4131 0 2
// end ;
4124: GO 3892
4126: POP
4127: POP
// end ;
4128: PPOPN 3
4130: END
// function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
4131: LD_INT 0
4133: PPUSH
4134: PPUSH
4135: PPUSH
// if not unit then
4136: LD_VAR 0 1
4140: NOT
4141: IFFALSE 4145
// exit ;
4143: GO 4309
// targets_list := [ ] ;
4145: LD_ADDR_VAR 0 5
4149: PUSH
4150: EMPTY
4151: ST_TO_ADDR
// targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
4152: LD_ADDR_VAR 0 5
4156: PUSH
4157: LD_VAR 0 2
4161: PPUSH
4162: LD_INT 21
4164: PUSH
4165: LD_INT 1
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: LD_INT 54
4177: PUSH
4178: EMPTY
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PPUSH
4189: CALL_OW 72
4193: PUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_INT 21
4201: PUSH
4202: LD_INT 2
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PPUSH
4209: CALL_OW 72
4213: PUSH
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 21
4221: PUSH
4222: LD_INT 3
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 3
4231: PUSH
4232: LD_INT 58
4234: PUSH
4235: EMPTY
4236: LIST
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PPUSH
4246: CALL_OW 72
4250: PUSH
4251: LD_VAR 0 2
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: ST_TO_ADDR
// for target in targets_list do
4262: LD_ADDR_VAR 0 4
4266: PUSH
4267: LD_VAR 0 5
4271: PUSH
4272: FOR_IN
4273: IFFALSE 4307
// begin if target then
4275: LD_VAR 0 4
4279: IFFALSE 4305
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
4281: LD_VAR 0 1
4285: PPUSH
4286: LD_VAR 0 4
4290: PPUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 74
4300: PPUSH
4301: CALL_OW 115
// end ;
4305: GO 4272
4307: POP
4308: POP
// end ; end_of_file
4309: LD_VAR 0 3
4313: RET
// export function Action ; begin
4314: LD_INT 0
4316: PPUSH
// InGameOn ;
4317: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4321: LD_INT 23
4323: PPUSH
4324: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4328: LD_EXP 1
4332: PPUSH
4333: LD_STRING DL-1
4335: PPUSH
4336: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4340: LD_EXP 2
4344: PPUSH
4345: LD_STRING DA-1
4347: PPUSH
4348: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4352: LD_EXP 3
4356: PPUSH
4357: LD_STRING DA-2
4359: PPUSH
4360: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4364: LD_EXP 1
4368: PPUSH
4369: LD_STRING DL-2
4371: PPUSH
4372: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4376: LD_EXP 3
4380: PPUSH
4381: LD_STRING DA-3
4383: PPUSH
4384: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4388: LD_EXP 1
4392: PPUSH
4393: LD_STRING DL-3
4395: PPUSH
4396: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4400: LD_EXP 2
4404: PPUSH
4405: LD_STRING DA-4
4407: PPUSH
4408: CALL_OW 88
// if not dialogue_skipped then
4412: LD_OWVAR 59
4416: NOT
4417: IFFALSE 4502
// begin Wait ( 0 0$01 ) ;
4419: LD_INT 35
4421: PPUSH
4422: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4426: LD_EXP 2
4430: PUSH
4431: LD_EXP 3
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4444: LD_EXP 2
4448: PPUSH
4449: LD_INT 107
4451: PPUSH
4452: LD_INT 53
4454: PPUSH
4455: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4459: LD_EXP 3
4463: PPUSH
4464: LD_INT 108
4466: PPUSH
4467: LD_INT 53
4469: PPUSH
4470: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4474: LD_EXP 2
4478: PPUSH
4479: LD_EXP 4
4483: PPUSH
4484: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4488: LD_EXP 3
4492: PPUSH
4493: LD_EXP 4
4497: PPUSH
4498: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4502: LD_INT 35
4504: PPUSH
4505: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4509: LD_EXP 2
4513: PPUSH
4514: LD_INT 107
4516: PPUSH
4517: LD_INT 53
4519: PPUSH
4520: CALL_OW 307
4524: PUSH
4525: LD_OWVAR 59
4529: OR
4530: IFFALSE 4502
// if not dialogue_skipped then
4532: LD_OWVAR 59
4536: NOT
4537: IFFALSE 4638
// begin ComTurnUnit ( potter , l1 ) ;
4539: LD_EXP 4
4543: PPUSH
4544: LD_EXP 2
4548: PPUSH
4549: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4553: LD_INT 10
4555: PPUSH
4556: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4560: LD_EXP 4
4564: PPUSH
4565: LD_INT 108
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 483
// Wait ( 0 0$01 ) ;
4581: LD_INT 35
4583: PPUSH
4584: CALL_OW 67
// RemoveUnit ( potter ) ;
4588: LD_EXP 4
4592: PPUSH
4593: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4597: LD_EXP 2
4601: PPUSH
4602: LD_STRING DA-5
4604: PPUSH
4605: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4609: LD_EXP 3
4613: PPUSH
4614: LD_STRING DA-6
4616: PPUSH
4617: CALL_OW 88
// Wait ( 0 0$02 ) ;
4621: LD_INT 70
4623: PPUSH
4624: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4628: LD_INT 25
4630: PPUSH
4631: LD_INT 19
4633: PPUSH
4634: CALL_OW 84
// end ; SpawnPotter ( 30 , north_west_1 ) ;
4638: LD_INT 30
4640: PPUSH
4641: LD_INT 1
4643: PPUSH
4644: CALL 3516 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4648: LD_EXP 5
4652: PPUSH
4653: LD_STRING DLa-1
4655: PPUSH
4656: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4660: LD_EXP 1
4664: PPUSH
4665: LD_STRING DL-5
4667: PPUSH
4668: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4672: LD_INT 23
4674: PPUSH
4675: CALL_OW 87
// InGameOff ;
4679: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4683: LD_STRING C1
4685: PPUSH
4686: CALL_OW 337
// alert := true ;
4690: LD_ADDR_EXP 6
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4698: LD_EXP 5
4702: PPUSH
4703: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4707: LD_EXP 5
4711: PPUSH
4712: LD_INT 11
4714: PPUSH
4715: CALL_OW 173
// Wait ( 0 0$30 ) ;
4719: LD_INT 1050
4721: PPUSH
4722: CALL_OW 67
// SpawnPotter ( 20 , north_4 ) ;
4726: LD_INT 20
4728: PPUSH
4729: LD_INT 4
4731: PPUSH
4732: CALL 3516 0 2
// Wait ( 0 0$35 ) ;
4736: LD_INT 1225
4738: PPUSH
4739: CALL_OW 67
// SpawnPotter ( 20 , east_5 ) ;
4743: LD_INT 20
4745: PPUSH
4746: LD_INT 5
4748: PPUSH
4749: CALL 3516 0 2
// Wait ( 0 0$03 ) ;
4753: LD_INT 105
4755: PPUSH
4756: CALL_OW 67
// Game ;
4760: CALL 3268 0 0
// end ;
4764: LD_VAR 0 1
4768: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 500 do var tmp , i ;
4769: LD_INT 22
4771: PUSH
4772: LD_INT 7
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 69
4783: PUSH
4784: LD_INT 0
4786: EQUAL
4787: PUSH
4788: LD_EXP 8
4792: PUSH
4793: LD_INT 500
4795: GREATEREQUAL
4796: AND
4797: IFFALSE 5025
4799: GO 4801
4801: DISABLE
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
// begin DialogueOn ;
4806: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4810: LD_EXP 10
4814: PPUSH
4815: LD_STRING DVr-1
4817: PPUSH
4818: CALL_OW 94
// DialogueOff ;
4822: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4826: LD_STRING QBonusInfo
4828: PPUSH
4829: CALL_OW 97
4833: PUSH
4834: LD_INT 1
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4853
4842: POP
// bonus_active := true ; end ;
4843: LD_ADDR_EXP 11
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
4851: GO 4854
4853: POP
// bonus_num := 4 ;
4854: LD_ADDR_EXP 12
4858: PUSH
4859: LD_INT 4
4861: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_mid , art_instant , main_base ) ;
4862: LD_OWVAR 2
4866: PPUSH
4867: LD_INT 2
4869: PPUSH
4870: LD_INT 2
4872: PPUSH
4873: LD_INT 23
4875: PPUSH
4876: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_INT 500
4887: PUSH
4888: LD_INT 3500
4890: PUSH
4891: LD_INT 5750
4893: PUSH
4894: LD_INT 10000
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4903: LD_INT 10500
4905: PUSH
4906: LD_INT 12600
4908: PUSH
4909: LD_INT 14700
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: PUSH
4917: LD_OWVAR 67
4921: ARRAY
4922: PPUSH
4923: CALL_OW 67
// for i = 1 to tmp do
4927: LD_ADDR_VAR 0 2
4931: PUSH
4932: DOUBLE
4933: LD_INT 1
4935: DEC
4936: ST_TO_ADDR
4937: LD_VAR 0 1
4941: PUSH
4942: FOR_TO
4943: IFFALSE 4975
// if points >= tmp [ i ] then
4945: LD_EXP 8
4949: PUSH
4950: LD_VAR 0 1
4954: PUSH
4955: LD_VAR 0 2
4959: ARRAY
4960: GREATEREQUAL
4961: IFFALSE 4973
// bonus_num := i ;
4963: LD_ADDR_EXP 12
4967: PUSH
4968: LD_VAR 0 2
4972: ST_TO_ADDR
4973: GO 4942
4975: POP
4976: POP
// case Query ( QBonusInfo ) of 1 :
4977: LD_STRING QBonusInfo
4979: PPUSH
4980: CALL_OW 97
4984: PUSH
4985: LD_INT 1
4987: DOUBLE
4988: EQUAL
4989: IFTRUE 4993
4991: GO 5014
4993: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4994: LD_OWVAR 2
4998: PPUSH
4999: LD_INT 12
5001: PPUSH
5002: LD_INT 2
5004: PPUSH
5005: LD_INT 23
5007: PPUSH
5008: CALL_OW 468
5012: GO 5015
5014: POP
// until points >= 15000 ;
5015: LD_EXP 8
5019: PUSH
5020: LD_INT 15000
5022: GREATEREQUAL
5023: IFFALSE 4903
// end ; end_of_file
5025: PPOPN 2
5027: END
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
5028: LD_INT 0
5030: PPUSH
5031: PPUSH
// dir := GetDir ( b ) ;
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 2
5041: PPUSH
5042: CALL_OW 254
5046: ST_TO_ADDR
// if dir < 3 then
5047: LD_VAR 0 4
5051: PUSH
5052: LD_INT 3
5054: LESS
5055: IFFALSE 5073
// dir := dir + 3 else
5057: LD_ADDR_VAR 0 4
5061: PUSH
5062: LD_VAR 0 4
5066: PUSH
5067: LD_INT 3
5069: PLUS
5070: ST_TO_ADDR
5071: GO 5087
// dir := dir - 3 ;
5073: LD_ADDR_VAR 0 4
5077: PUSH
5078: LD_VAR 0 4
5082: PUSH
5083: LD_INT 3
5085: MINUS
5086: ST_TO_ADDR
// SetDir ( un , dir ) ;
5087: LD_VAR 0 1
5091: PPUSH
5092: LD_VAR 0 4
5096: PPUSH
5097: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5101: LD_VAR 0 1
5105: PPUSH
5106: LD_VAR 0 2
5110: PPUSH
5111: CALL_OW 52
// end ;
5115: LD_VAR 0 3
5119: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
5120: LD_INT 0
5122: PPUSH
5123: PPUSH
5124: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
5125: LD_ADDR_VAR 0 7
5129: PUSH
5130: LD_VAR 0 1
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PPUSH
5141: LD_VAR 0 3
5145: PPUSH
5146: LD_VAR 0 4
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
5156: LD_ADDR_VAR 0 1
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: LD_VAR 0 2
5170: PPUSH
5171: LD_VAR 0 7
5175: PPUSH
5176: CALL_OW 1
5180: ST_TO_ADDR
// result := tab ;
5181: LD_ADDR_VAR 0 5
5185: PUSH
5186: LD_VAR 0 1
5190: ST_TO_ADDR
// end ;
5191: LD_VAR 0 5
5195: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5196: LD_INT 0
5198: PPUSH
5199: PPUSH
5200: PPUSH
// if not GetControl ( veh ) = control_manual then
5201: LD_VAR 0 1
5205: PPUSH
5206: CALL_OW 263
5210: PUSH
5211: LD_INT 1
5213: EQUAL
5214: NOT
5215: IFFALSE 5227
// result := false else
5217: LD_ADDR_VAR 0 2
5221: PUSH
5222: LD_INT 0
5224: ST_TO_ADDR
5225: GO 5372
// if veh in FilterAllUnits ( [ f_empty ] ) then
5227: LD_VAR 0 1
5231: PUSH
5232: LD_INT 58
5234: PUSH
5235: EMPTY
5236: LIST
5237: PPUSH
5238: CALL_OW 69
5242: IN
5243: IFFALSE 5255
// result := false else
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
5253: GO 5372
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5255: LD_ADDR_VAR 0 4
5259: PUSH
5260: LD_INT 22
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 255
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 55
5279: PUSH
5280: EMPTY
5281: LIST
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: CALL_OW 69
5291: ST_TO_ADDR
// if not filter then
5292: LD_VAR 0 4
5296: NOT
5297: IFFALSE 5309
// result := false else
5299: LD_ADDR_VAR 0 2
5303: PUSH
5304: LD_INT 0
5306: ST_TO_ADDR
5307: GO 5372
// for i = 1 to filter do
5309: LD_ADDR_VAR 0 3
5313: PUSH
5314: DOUBLE
5315: LD_INT 1
5317: DEC
5318: ST_TO_ADDR
5319: LD_VAR 0 4
5323: PUSH
5324: FOR_TO
5325: IFFALSE 5370
// if IsDriver ( filter [ i ] ) = veh then
5327: LD_VAR 0 4
5331: PUSH
5332: LD_VAR 0 3
5336: ARRAY
5337: PPUSH
5338: CALL 54861 0 1
5342: PUSH
5343: LD_VAR 0 1
5347: EQUAL
5348: IFFALSE 5368
// begin result := filter [ i ] ;
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_VAR 0 4
5359: PUSH
5360: LD_VAR 0 3
5364: ARRAY
5365: ST_TO_ADDR
// break ;
5366: GO 5370
// end ;
5368: GO 5324
5370: POP
5371: POP
// end ; end ; end_of_file
5372: LD_VAR 0 2
5376: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5377: LD_VAR 0 1
5381: PPUSH
5382: CALL 19478 0 1
// if un in [ legion_commander , main_base ] then
5386: LD_VAR 0 1
5390: PUSH
5391: LD_EXP 1
5395: PUSH
5396: LD_INT 23
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: IN
5403: IFFALSE 5413
// game_over := true ;
5405: LD_ADDR_EXP 7
5409: PUSH
5410: LD_INT 1
5412: ST_TO_ADDR
// if un = al_commander then
5413: LD_VAR 0 1
5417: PUSH
5418: LD_EXP 5
5422: EQUAL
5423: IFFALSE 5429
// ChangeSide ( ) ;
5425: CALL 2689 0 0
// if GetSide ( un ) = 7 then
5429: LD_VAR 0 1
5433: PPUSH
5434: CALL_OW 255
5438: PUSH
5439: LD_INT 7
5441: EQUAL
5442: IFFALSE 5560
// begin if GetClass ( un ) = class_apeman then
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 257
5453: PUSH
5454: LD_INT 12
5456: EQUAL
5457: IFFALSE 5473
// points := points + 6 ;
5459: LD_ADDR_EXP 8
5463: PUSH
5464: LD_EXP 8
5468: PUSH
5469: LD_INT 6
5471: PLUS
5472: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL_OW 257
5482: PUSH
5483: LD_INT 17
5485: EQUAL
5486: IFFALSE 5502
// points := points + 11 ;
5488: LD_ADDR_EXP 8
5492: PUSH
5493: LD_EXP 8
5497: PUSH
5498: LD_INT 11
5500: PLUS
5501: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 257
5511: PUSH
5512: LD_INT 15
5514: EQUAL
5515: IFFALSE 5531
// points := points + 14 ;
5517: LD_ADDR_EXP 8
5521: PUSH
5522: LD_EXP 8
5526: PUSH
5527: LD_INT 14
5529: PLUS
5530: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5531: LD_VAR 0 1
5535: PPUSH
5536: CALL_OW 247
5540: PUSH
5541: LD_INT 2
5543: EQUAL
5544: IFFALSE 5560
// points := points + 50 ;
5546: LD_ADDR_EXP 8
5550: PUSH
5551: LD_EXP 8
5555: PUSH
5556: LD_INT 50
5558: PLUS
5559: ST_TO_ADDR
// end ; end ;
5560: PPOPN 1
5562: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5563: LD_EXP 5
5567: PPUSH
5568: CALL_OW 256
5572: PUSH
5573: LD_INT 1000
5575: LESS
5576: IFFALSE 5608
5578: GO 5580
5580: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5581: LD_EXP 5
5585: PPUSH
5586: CALL_OW 504
5590: PPUSH
5591: CALL_OW 255
5595: PUSH
5596: LD_INT 8
5598: EQUAL
5599: IFFALSE 5608
// YouLost (  ) ;
5601: LD_STRING 
5603: PPUSH
5604: CALL_OW 104
5608: END
// on DialogueSkipped ( value ) do var i ;
5609: LD_INT 0
5611: PPUSH
// begin RemoveUnit ( potter ) ;
5612: LD_EXP 4
5616: PPUSH
5617: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5621: LD_EXP 2
5625: PUSH
5626: LD_EXP 3
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 122
// Wait ( 1 ) ;
5639: LD_INT 1
5641: PPUSH
5642: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5646: LD_EXP 2
5650: PPUSH
5651: LD_INT 107
5653: PPUSH
5654: LD_INT 53
5656: PPUSH
5657: LD_INT 0
5659: PPUSH
5660: LD_INT 0
5662: PPUSH
5663: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5667: LD_EXP 3
5671: PPUSH
5672: LD_INT 108
5674: PPUSH
5675: LD_INT 53
5677: PPUSH
5678: LD_INT 0
5680: PPUSH
5681: LD_INT 0
5683: PPUSH
5684: CALL_OW 483
// Wait ( 1 ) ;
5688: LD_INT 1
5690: PPUSH
5691: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5695: LD_EXP 2
5699: PUSH
5700: LD_EXP 3
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PPUSH
5709: LD_INT 108
5711: PPUSH
5712: LD_INT 1
5714: PPUSH
5715: CALL_OW 118
// end ;
5719: PPOPN 2
5721: END
// on ArtifactUsed ( side , button , p3 , p4 ) do var bonus , off , units , crates , tmp , i ;
5722: LD_INT 0
5724: PPUSH
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
// begin DialogueOn ;
5730: CALL_OW 6
// uc_side := 8 ;
5734: LD_ADDR_OWVAR 20
5738: PUSH
5739: LD_INT 8
5741: ST_TO_ADDR
// uc_nation := 2 ;
5742: LD_ADDR_OWVAR 21
5746: PUSH
5747: LD_INT 2
5749: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5750: LD_ADDR_VAR 0 5
5754: PUSH
5755: LD_STRING QBonus
5757: PUSH
5758: LD_EXP 12
5762: STR
5763: ST_TO_ADDR
// off := true ;
5764: LD_ADDR_VAR 0 6
5768: PUSH
5769: LD_INT 1
5771: ST_TO_ADDR
// units := [ ] ;
5772: LD_ADDR_VAR 0 7
5776: PUSH
5777: EMPTY
5778: ST_TO_ADDR
// crates := 0 ;
5779: LD_ADDR_VAR 0 8
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5787: LD_EXP 10
5791: PPUSH
5792: LD_STRING DVr-2
5794: PPUSH
5795: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
5799: LD_INT 10
5801: PPUSH
5802: CALL_OW 67
// case Query ( bonus ) of 1 :
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL_OW 97
5815: PUSH
5816: LD_INT 1
5818: DOUBLE
5819: EQUAL
5820: IFTRUE 5824
5822: GO 5909
5824: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5825: LD_ADDR_VAR 0 9
5829: PUSH
5830: LD_INT 1
5832: PUSH
5833: LD_INT 2
5835: PUSH
5836: LD_INT 5
5838: PUSH
5839: LD_INT 8
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: PUSH
5848: LD_EXP 12
5852: ARRAY
5853: ST_TO_ADDR
// for i = 1 to tmp do
5854: LD_ADDR_VAR 0 10
5858: PUSH
5859: DOUBLE
5860: LD_INT 1
5862: DEC
5863: ST_TO_ADDR
5864: LD_VAR 0 9
5868: PUSH
5869: FOR_TO
5870: IFFALSE 5905
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5872: LD_INT 0
5874: PPUSH
5875: LD_INT 15
5877: PPUSH
5878: LD_VAR 0 9
5882: PPUSH
5883: CALL_OW 380
// units := units ^ CreateHuman ;
5887: LD_ADDR_VAR 0 7
5891: PUSH
5892: LD_VAR 0 7
5896: PUSH
5897: CALL_OW 44
5901: ADD
5902: ST_TO_ADDR
// end ;
5903: GO 5869
5905: POP
5906: POP
// end ; 2 :
5907: GO 6317
5909: LD_INT 2
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 5949
5917: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5918: LD_ADDR_VAR 0 8
5922: PUSH
5923: LD_INT 100
5925: PUSH
5926: LD_INT 150
5928: PUSH
5929: LD_INT 350
5931: PUSH
5932: LD_INT 500
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: PUSH
5941: LD_EXP 12
5945: ARRAY
5946: ST_TO_ADDR
// end ; 3 :
5947: GO 6317
5949: LD_INT 3
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5957
5955: GO 6297
5957: POP
// begin if bonus_num = 1 then
5958: LD_EXP 12
5962: PUSH
5963: LD_INT 1
5965: EQUAL
5966: IFFALSE 5976
// ignore_wave := true ;
5968: LD_ADDR_EXP 13
5972: PUSH
5973: LD_INT 1
5975: ST_TO_ADDR
// if bonus_num = 2 then
5976: LD_EXP 12
5980: PUSH
5981: LD_INT 2
5983: EQUAL
5984: IFFALSE 6104
// begin for i = 1 to 2 do
5986: LD_ADDR_VAR 0 10
5990: PUSH
5991: DOUBLE
5992: LD_INT 1
5994: DEC
5995: ST_TO_ADDR
5996: LD_INT 2
5998: PUSH
5999: FOR_TO
6000: IFFALSE 6102
// begin uc_nation := nation_arabian ;
6002: LD_ADDR_OWVAR 21
6006: PUSH
6007: LD_INT 2
6009: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6010: LD_ADDR_OWVAR 37
6014: PUSH
6015: LD_INT 14
6017: ST_TO_ADDR
// vc_engine := engine_siberite ;
6018: LD_ADDR_OWVAR 39
6022: PUSH
6023: LD_INT 3
6025: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6026: LD_ADDR_OWVAR 38
6030: PUSH
6031: LD_INT 2
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_INT 2
6046: PPUSH
6047: CALL_OW 12
6051: ARRAY
6052: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6053: LD_ADDR_OWVAR 40
6057: PUSH
6058: LD_INT 28
6060: PUSH
6061: LD_INT 27
6063: PUSH
6064: LD_INT 25
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 1
6074: PPUSH
6075: LD_INT 3
6077: PPUSH
6078: CALL_OW 12
6082: ARRAY
6083: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_VAR 0 7
6093: PUSH
6094: CALL_OW 45
6098: ADD
6099: ST_TO_ADDR
// end ;
6100: GO 5999
6102: POP
6103: POP
// end ; if bonus_num = 3 then
6104: LD_EXP 12
6108: PUSH
6109: LD_INT 3
6111: EQUAL
6112: IFFALSE 6236
// begin for i = 1 to 4 do
6114: LD_ADDR_VAR 0 10
6118: PUSH
6119: DOUBLE
6120: LD_INT 1
6122: DEC
6123: ST_TO_ADDR
6124: LD_INT 4
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6234
// begin uc_nation := nation_arabian ;
6130: LD_ADDR_OWVAR 21
6134: PUSH
6135: LD_INT 2
6137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6138: LD_ADDR_OWVAR 37
6142: PUSH
6143: LD_INT 14
6145: ST_TO_ADDR
// vc_engine := engine_siberite ;
6146: LD_ADDR_OWVAR 39
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 38
6158: PUSH
6159: LD_INT 2
6161: PUSH
6162: LD_INT 5
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6181: LD_ADDR_OWVAR 40
6185: PUSH
6186: LD_INT 28
6188: PUSH
6189: LD_INT 27
6191: PUSH
6192: LD_INT 28
6194: PUSH
6195: LD_INT 25
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 1
6206: PPUSH
6207: LD_INT 4
6209: PPUSH
6210: CALL_OW 12
6214: ARRAY
6215: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6216: LD_ADDR_VAR 0 7
6220: PUSH
6221: LD_VAR 0 7
6225: PUSH
6226: CALL_OW 45
6230: ADD
6231: ST_TO_ADDR
// end ;
6232: GO 6127
6234: POP
6235: POP
// end ; if bonus_num = 4 then
6236: LD_EXP 12
6240: PUSH
6241: LD_INT 4
6243: EQUAL
6244: IFFALSE 6295
// for i = 1 to 3 do
6246: LD_ADDR_VAR 0 10
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_INT 3
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6293
// begin PrepareHuman ( false , 3 , 8 ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 3
6267: PPUSH
6268: LD_INT 8
6270: PPUSH
6271: CALL_OW 380
// units := units ^ CreateHuman ;
6275: LD_ADDR_VAR 0 7
6279: PUSH
6280: LD_VAR 0 7
6284: PUSH
6285: CALL_OW 44
6289: ADD
6290: ST_TO_ADDR
// end ;
6291: GO 6259
6293: POP
6294: POP
// end ; 4 :
6295: GO 6317
6297: LD_INT 4
6299: DOUBLE
6300: EQUAL
6301: IFTRUE 6305
6303: GO 6316
6305: POP
// off := false ; end ;
6306: LD_ADDR_VAR 0 6
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
6314: GO 6317
6316: POP
// DialogueOff ;
6317: CALL_OW 7
// if not off then
6321: LD_VAR 0 6
6325: NOT
6326: IFFALSE 6332
// exit else
6328: GO 6511
6330: GO 6385
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6332: LD_OWVAR 2
6336: PPUSH
6337: LD_INT 12
6339: PPUSH
6340: LD_INT 0
6342: PPUSH
6343: LD_INT 23
6345: PPUSH
6346: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6350: LD_EXP 10
6354: PPUSH
6355: LD_STRING DVr-3
6357: PUSH
6358: LD_STRING DVr-3a
6360: PUSH
6361: LD_STRING DVr-3b
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 1
6371: PPUSH
6372: LD_INT 3
6374: PPUSH
6375: CALL_OW 12
6379: ARRAY
6380: PPUSH
6381: CALL_OW 94
// end ; if units then
6385: LD_VAR 0 7
6389: IFFALSE 6453
// for i in units do
6391: LD_ADDR_VAR 0 10
6395: PUSH
6396: LD_VAR 0 7
6400: PUSH
6401: FOR_IN
6402: IFFALSE 6451
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6404: LD_VAR 0 10
6408: PPUSH
6409: LD_INT 92
6411: PPUSH
6412: LD_INT 49
6414: PPUSH
6415: LD_INT 20
6417: PPUSH
6418: LD_INT 0
6420: PPUSH
6421: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6425: LD_VAR 0 10
6429: PPUSH
6430: CALL_OW 250
6434: PPUSH
6435: LD_VAR 0 10
6439: PPUSH
6440: CALL_OW 251
6444: PPUSH
6445: CALL_OW 494
// end ;
6449: GO 6401
6451: POP
6452: POP
// if crates then
6453: LD_VAR 0 8
6457: IFFALSE 6511
// for i = 1 to ( crates div 50 ) do
6459: LD_ADDR_VAR 0 10
6463: PUSH
6464: DOUBLE
6465: LD_INT 1
6467: DEC
6468: ST_TO_ADDR
6469: LD_VAR 0 8
6473: PUSH
6474: LD_INT 50
6476: DIV
6477: PUSH
6478: FOR_TO
6479: IFFALSE 6509
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6481: LD_INT 5
6483: PPUSH
6484: LD_INT 92
6486: PPUSH
6487: LD_INT 49
6489: PPUSH
6490: LD_INT 30
6492: PPUSH
6493: LD_INT 1
6495: PPUSH
6496: CALL_OW 56
// wait ( 0 0$02 ) ;
6500: LD_INT 70
6502: PPUSH
6503: CALL_OW 67
// end ;
6507: GO 6478
6509: POP
6510: POP
// end ;
6511: PPOPN 10
6513: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6514: LD_VAR 0 1
6518: PPUSH
6519: LD_VAR 0 2
6523: PPUSH
6524: LD_VAR 0 3
6528: PPUSH
6529: CALL 19576 0 3
// end ;
6533: PPOPN 3
6535: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL 19584 0 1
// end ; end_of_file
6545: PPOPN 1
6547: END
// every 0 0$01 trigger not game_over do
6548: LD_EXP 7
6552: NOT
6553: IFFALSE 6586
6555: GO 6557
6557: DISABLE
// begin enable ;
6558: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6559: LD_ADDR_OWVAR 47
6563: PUSH
6564: LD_STRING #tick
6566: PUSH
6567: LD_OWVAR 1
6571: PUSH
6572: LD_STRING #points
6574: PUSH
6575: LD_EXP 8
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: ST_TO_ADDR
// end ;
6586: END
// every 0 0$01 trigger game_over do
6587: LD_EXP 7
6591: IFFALSE 6650
6593: GO 6595
6595: DISABLE
// begin Wait ( 0 0$02 ) ;
6596: LD_INT 70
6598: PPUSH
6599: CALL_OW 67
// DialogueOn ;
6603: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6607: LD_ADDR_OWVAR 47
6611: PUSH
6612: LD_STRING #game-points
6614: PUSH
6615: LD_OWVAR 78
6619: PUSH
6620: LD_EXP 8
6624: PUSH
6625: LD_STRING #game-time
6627: PUSH
6628: LD_OWVAR 1
6632: PUSH
6633: LD_STRING #game-difficulty
6635: PUSH
6636: LD_OWVAR 67
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: ST_TO_ADDR
// end ; end_of_file
6650: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
6651: LD_OWVAR 1
6655: PUSH
6656: LD_INT 52500
6658: LESS
6659: IFFALSE 6683
6661: GO 6663
6663: DISABLE
// begin enable ;
6664: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
6665: LD_INT 1
6667: PPUSH
6668: LD_INT 5
6670: PPUSH
6671: CALL_OW 12
6675: PPUSH
6676: LD_INT 1
6678: PPUSH
6679: CALL_OW 57
// end ; end_of_file
6683: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
6684: LD_INT 0
6686: PPUSH
// ar_crane := 88 ;
6687: LD_ADDR_EXP 20
6691: PUSH
6692: LD_INT 88
6694: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
6695: LD_ADDR_EXP 15
6699: PUSH
6700: LD_INT 89
6702: ST_TO_ADDR
// us_hack := 99 ;
6703: LD_ADDR_EXP 16
6707: PUSH
6708: LD_INT 99
6710: ST_TO_ADDR
// us_artillery := 97 ;
6711: LD_ADDR_EXP 17
6715: PUSH
6716: LD_INT 97
6718: ST_TO_ADDR
// ar_bio_bomb := 91 ;
6719: LD_ADDR_EXP 18
6723: PUSH
6724: LD_INT 91
6726: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
6727: LD_ADDR_EXP 19
6731: PUSH
6732: LD_INT 92
6734: ST_TO_ADDR
// ru_radar := 98 ;
6735: LD_ADDR_EXP 14
6739: PUSH
6740: LD_INT 98
6742: ST_TO_ADDR
// tech_Artillery := 80 ;
6743: LD_ADDR_EXP 21
6747: PUSH
6748: LD_INT 80
6750: ST_TO_ADDR
// tech_RadMat := 81 ;
6751: LD_ADDR_EXP 22
6755: PUSH
6756: LD_INT 81
6758: ST_TO_ADDR
// tech_BasicTools := 82 ;
6759: LD_ADDR_EXP 23
6763: PUSH
6764: LD_INT 82
6766: ST_TO_ADDR
// tech_Cargo := 83 ;
6767: LD_ADDR_EXP 24
6771: PUSH
6772: LD_INT 83
6774: ST_TO_ADDR
// tech_Track := 84 ;
6775: LD_ADDR_EXP 25
6779: PUSH
6780: LD_INT 84
6782: ST_TO_ADDR
// tech_Crane := 85 ;
6783: LD_ADDR_EXP 26
6787: PUSH
6788: LD_INT 85
6790: ST_TO_ADDR
// tech_Bulldozer := 86 ;
6791: LD_ADDR_EXP 27
6795: PUSH
6796: LD_INT 86
6798: ST_TO_ADDR
// tech_Hovercraft := 87 ;
6799: LD_ADDR_EXP 28
6803: PUSH
6804: LD_INT 87
6806: ST_TO_ADDR
// end ;
6807: LD_VAR 0 1
6811: RET
// every 1 do
6812: GO 6814
6814: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
6815: CALL 6684 0 0
6819: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6820: LD_VAR 0 2
6824: PUSH
6825: LD_INT 100
6827: EQUAL
6828: IFFALSE 7777
// begin if not StreamModeActive then
6830: LD_EXP 29
6834: NOT
6835: IFFALSE 6845
// StreamModeActive := true ;
6837: LD_ADDR_EXP 29
6841: PUSH
6842: LD_INT 1
6844: ST_TO_ADDR
// if p3 = 0 then
6845: LD_VAR 0 3
6849: PUSH
6850: LD_INT 0
6852: EQUAL
6853: IFFALSE 6859
// InitStreamMode ;
6855: CALL 8010 0 0
// if p3 = 1 then
6859: LD_VAR 0 3
6863: PUSH
6864: LD_INT 1
6866: EQUAL
6867: IFFALSE 6877
// sRocket := true ;
6869: LD_ADDR_EXP 34
6873: PUSH
6874: LD_INT 1
6876: ST_TO_ADDR
// if p3 = 2 then
6877: LD_VAR 0 3
6881: PUSH
6882: LD_INT 2
6884: EQUAL
6885: IFFALSE 6895
// sSpeed := true ;
6887: LD_ADDR_EXP 33
6891: PUSH
6892: LD_INT 1
6894: ST_TO_ADDR
// if p3 = 3 then
6895: LD_VAR 0 3
6899: PUSH
6900: LD_INT 3
6902: EQUAL
6903: IFFALSE 6913
// sEngine := true ;
6905: LD_ADDR_EXP 35
6909: PUSH
6910: LD_INT 1
6912: ST_TO_ADDR
// if p3 = 4 then
6913: LD_VAR 0 3
6917: PUSH
6918: LD_INT 4
6920: EQUAL
6921: IFFALSE 6931
// sSpec := true ;
6923: LD_ADDR_EXP 32
6927: PUSH
6928: LD_INT 1
6930: ST_TO_ADDR
// if p3 = 5 then
6931: LD_VAR 0 3
6935: PUSH
6936: LD_INT 5
6938: EQUAL
6939: IFFALSE 6949
// sLevel := true ;
6941: LD_ADDR_EXP 36
6945: PUSH
6946: LD_INT 1
6948: ST_TO_ADDR
// if p3 = 6 then
6949: LD_VAR 0 3
6953: PUSH
6954: LD_INT 6
6956: EQUAL
6957: IFFALSE 6967
// sArmoury := true ;
6959: LD_ADDR_EXP 37
6963: PUSH
6964: LD_INT 1
6966: ST_TO_ADDR
// if p3 = 7 then
6967: LD_VAR 0 3
6971: PUSH
6972: LD_INT 7
6974: EQUAL
6975: IFFALSE 6985
// sRadar := true ;
6977: LD_ADDR_EXP 38
6981: PUSH
6982: LD_INT 1
6984: ST_TO_ADDR
// if p3 = 8 then
6985: LD_VAR 0 3
6989: PUSH
6990: LD_INT 8
6992: EQUAL
6993: IFFALSE 7003
// sBunker := true ;
6995: LD_ADDR_EXP 39
6999: PUSH
7000: LD_INT 1
7002: ST_TO_ADDR
// if p3 = 9 then
7003: LD_VAR 0 3
7007: PUSH
7008: LD_INT 9
7010: EQUAL
7011: IFFALSE 7021
// sHack := true ;
7013: LD_ADDR_EXP 40
7017: PUSH
7018: LD_INT 1
7020: ST_TO_ADDR
// if p3 = 10 then
7021: LD_VAR 0 3
7025: PUSH
7026: LD_INT 10
7028: EQUAL
7029: IFFALSE 7039
// sFire := true ;
7031: LD_ADDR_EXP 41
7035: PUSH
7036: LD_INT 1
7038: ST_TO_ADDR
// if p3 = 11 then
7039: LD_VAR 0 3
7043: PUSH
7044: LD_INT 11
7046: EQUAL
7047: IFFALSE 7057
// sRefresh := true ;
7049: LD_ADDR_EXP 42
7053: PUSH
7054: LD_INT 1
7056: ST_TO_ADDR
// if p3 = 12 then
7057: LD_VAR 0 3
7061: PUSH
7062: LD_INT 12
7064: EQUAL
7065: IFFALSE 7075
// sExp := true ;
7067: LD_ADDR_EXP 43
7071: PUSH
7072: LD_INT 1
7074: ST_TO_ADDR
// if p3 = 13 then
7075: LD_VAR 0 3
7079: PUSH
7080: LD_INT 13
7082: EQUAL
7083: IFFALSE 7093
// sDepot := true ;
7085: LD_ADDR_EXP 44
7089: PUSH
7090: LD_INT 1
7092: ST_TO_ADDR
// if p3 = 14 then
7093: LD_VAR 0 3
7097: PUSH
7098: LD_INT 14
7100: EQUAL
7101: IFFALSE 7111
// sFlag := true ;
7103: LD_ADDR_EXP 45
7107: PUSH
7108: LD_INT 1
7110: ST_TO_ADDR
// if p3 = 15 then
7111: LD_VAR 0 3
7115: PUSH
7116: LD_INT 15
7118: EQUAL
7119: IFFALSE 7129
// sKamikadze := true ;
7121: LD_ADDR_EXP 53
7125: PUSH
7126: LD_INT 1
7128: ST_TO_ADDR
// if p3 = 16 then
7129: LD_VAR 0 3
7133: PUSH
7134: LD_INT 16
7136: EQUAL
7137: IFFALSE 7147
// sTroll := true ;
7139: LD_ADDR_EXP 54
7143: PUSH
7144: LD_INT 1
7146: ST_TO_ADDR
// if p3 = 17 then
7147: LD_VAR 0 3
7151: PUSH
7152: LD_INT 17
7154: EQUAL
7155: IFFALSE 7165
// sSlow := true ;
7157: LD_ADDR_EXP 55
7161: PUSH
7162: LD_INT 1
7164: ST_TO_ADDR
// if p3 = 18 then
7165: LD_VAR 0 3
7169: PUSH
7170: LD_INT 18
7172: EQUAL
7173: IFFALSE 7183
// sLack := true ;
7175: LD_ADDR_EXP 56
7179: PUSH
7180: LD_INT 1
7182: ST_TO_ADDR
// if p3 = 19 then
7183: LD_VAR 0 3
7187: PUSH
7188: LD_INT 19
7190: EQUAL
7191: IFFALSE 7201
// sTank := true ;
7193: LD_ADDR_EXP 58
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// if p3 = 20 then
7201: LD_VAR 0 3
7205: PUSH
7206: LD_INT 20
7208: EQUAL
7209: IFFALSE 7219
// sRemote := true ;
7211: LD_ADDR_EXP 59
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// if p3 = 21 then
7219: LD_VAR 0 3
7223: PUSH
7224: LD_INT 21
7226: EQUAL
7227: IFFALSE 7237
// sPowell := true ;
7229: LD_ADDR_EXP 60
7233: PUSH
7234: LD_INT 1
7236: ST_TO_ADDR
// if p3 = 22 then
7237: LD_VAR 0 3
7241: PUSH
7242: LD_INT 22
7244: EQUAL
7245: IFFALSE 7255
// sTeleport := true ;
7247: LD_ADDR_EXP 63
7251: PUSH
7252: LD_INT 1
7254: ST_TO_ADDR
// if p3 = 23 then
7255: LD_VAR 0 3
7259: PUSH
7260: LD_INT 23
7262: EQUAL
7263: IFFALSE 7273
// sOilTower := true ;
7265: LD_ADDR_EXP 65
7269: PUSH
7270: LD_INT 1
7272: ST_TO_ADDR
// if p3 = 24 then
7273: LD_VAR 0 3
7277: PUSH
7278: LD_INT 24
7280: EQUAL
7281: IFFALSE 7291
// sShovel := true ;
7283: LD_ADDR_EXP 66
7287: PUSH
7288: LD_INT 1
7290: ST_TO_ADDR
// if p3 = 25 then
7291: LD_VAR 0 3
7295: PUSH
7296: LD_INT 25
7298: EQUAL
7299: IFFALSE 7309
// sSheik := true ;
7301: LD_ADDR_EXP 67
7305: PUSH
7306: LD_INT 1
7308: ST_TO_ADDR
// if p3 = 26 then
7309: LD_VAR 0 3
7313: PUSH
7314: LD_INT 26
7316: EQUAL
7317: IFFALSE 7327
// sEarthquake := true ;
7319: LD_ADDR_EXP 69
7323: PUSH
7324: LD_INT 1
7326: ST_TO_ADDR
// if p3 = 27 then
7327: LD_VAR 0 3
7331: PUSH
7332: LD_INT 27
7334: EQUAL
7335: IFFALSE 7345
// sAI := true ;
7337: LD_ADDR_EXP 70
7341: PUSH
7342: LD_INT 1
7344: ST_TO_ADDR
// if p3 = 28 then
7345: LD_VAR 0 3
7349: PUSH
7350: LD_INT 28
7352: EQUAL
7353: IFFALSE 7363
// sCargo := true ;
7355: LD_ADDR_EXP 73
7359: PUSH
7360: LD_INT 1
7362: ST_TO_ADDR
// if p3 = 29 then
7363: LD_VAR 0 3
7367: PUSH
7368: LD_INT 29
7370: EQUAL
7371: IFFALSE 7381
// sDLaser := true ;
7373: LD_ADDR_EXP 74
7377: PUSH
7378: LD_INT 1
7380: ST_TO_ADDR
// if p3 = 30 then
7381: LD_VAR 0 3
7385: PUSH
7386: LD_INT 30
7388: EQUAL
7389: IFFALSE 7399
// sExchange := true ;
7391: LD_ADDR_EXP 75
7395: PUSH
7396: LD_INT 1
7398: ST_TO_ADDR
// if p3 = 31 then
7399: LD_VAR 0 3
7403: PUSH
7404: LD_INT 31
7406: EQUAL
7407: IFFALSE 7417
// sFac := true ;
7409: LD_ADDR_EXP 76
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// if p3 = 32 then
7417: LD_VAR 0 3
7421: PUSH
7422: LD_INT 32
7424: EQUAL
7425: IFFALSE 7435
// sPower := true ;
7427: LD_ADDR_EXP 77
7431: PUSH
7432: LD_INT 1
7434: ST_TO_ADDR
// if p3 = 33 then
7435: LD_VAR 0 3
7439: PUSH
7440: LD_INT 33
7442: EQUAL
7443: IFFALSE 7453
// sRandom := true ;
7445: LD_ADDR_EXP 78
7449: PUSH
7450: LD_INT 1
7452: ST_TO_ADDR
// if p3 = 34 then
7453: LD_VAR 0 3
7457: PUSH
7458: LD_INT 34
7460: EQUAL
7461: IFFALSE 7471
// sShield := true ;
7463: LD_ADDR_EXP 79
7467: PUSH
7468: LD_INT 1
7470: ST_TO_ADDR
// if p3 = 35 then
7471: LD_VAR 0 3
7475: PUSH
7476: LD_INT 35
7478: EQUAL
7479: IFFALSE 7489
// sTime := true ;
7481: LD_ADDR_EXP 80
7485: PUSH
7486: LD_INT 1
7488: ST_TO_ADDR
// if p3 = 36 then
7489: LD_VAR 0 3
7493: PUSH
7494: LD_INT 36
7496: EQUAL
7497: IFFALSE 7507
// sTools := true ;
7499: LD_ADDR_EXP 81
7503: PUSH
7504: LD_INT 1
7506: ST_TO_ADDR
// if p3 = 101 then
7507: LD_VAR 0 3
7511: PUSH
7512: LD_INT 101
7514: EQUAL
7515: IFFALSE 7525
// sSold := true ;
7517: LD_ADDR_EXP 46
7521: PUSH
7522: LD_INT 1
7524: ST_TO_ADDR
// if p3 = 102 then
7525: LD_VAR 0 3
7529: PUSH
7530: LD_INT 102
7532: EQUAL
7533: IFFALSE 7543
// sDiff := true ;
7535: LD_ADDR_EXP 47
7539: PUSH
7540: LD_INT 1
7542: ST_TO_ADDR
// if p3 = 103 then
7543: LD_VAR 0 3
7547: PUSH
7548: LD_INT 103
7550: EQUAL
7551: IFFALSE 7561
// sFog := true ;
7553: LD_ADDR_EXP 50
7557: PUSH
7558: LD_INT 1
7560: ST_TO_ADDR
// if p3 = 104 then
7561: LD_VAR 0 3
7565: PUSH
7566: LD_INT 104
7568: EQUAL
7569: IFFALSE 7579
// sReset := true ;
7571: LD_ADDR_EXP 51
7575: PUSH
7576: LD_INT 1
7578: ST_TO_ADDR
// if p3 = 105 then
7579: LD_VAR 0 3
7583: PUSH
7584: LD_INT 105
7586: EQUAL
7587: IFFALSE 7597
// sSun := true ;
7589: LD_ADDR_EXP 52
7593: PUSH
7594: LD_INT 1
7596: ST_TO_ADDR
// if p3 = 106 then
7597: LD_VAR 0 3
7601: PUSH
7602: LD_INT 106
7604: EQUAL
7605: IFFALSE 7615
// sTiger := true ;
7607: LD_ADDR_EXP 48
7611: PUSH
7612: LD_INT 1
7614: ST_TO_ADDR
// if p3 = 107 then
7615: LD_VAR 0 3
7619: PUSH
7620: LD_INT 107
7622: EQUAL
7623: IFFALSE 7633
// sBomb := true ;
7625: LD_ADDR_EXP 49
7629: PUSH
7630: LD_INT 1
7632: ST_TO_ADDR
// if p3 = 108 then
7633: LD_VAR 0 3
7637: PUSH
7638: LD_INT 108
7640: EQUAL
7641: IFFALSE 7651
// sWound := true ;
7643: LD_ADDR_EXP 57
7647: PUSH
7648: LD_INT 1
7650: ST_TO_ADDR
// if p3 = 109 then
7651: LD_VAR 0 3
7655: PUSH
7656: LD_INT 109
7658: EQUAL
7659: IFFALSE 7669
// sBetray := true ;
7661: LD_ADDR_EXP 61
7665: PUSH
7666: LD_INT 1
7668: ST_TO_ADDR
// if p3 = 110 then
7669: LD_VAR 0 3
7673: PUSH
7674: LD_INT 110
7676: EQUAL
7677: IFFALSE 7687
// sContamin := true ;
7679: LD_ADDR_EXP 62
7683: PUSH
7684: LD_INT 1
7686: ST_TO_ADDR
// if p3 = 111 then
7687: LD_VAR 0 3
7691: PUSH
7692: LD_INT 111
7694: EQUAL
7695: IFFALSE 7705
// sOil := true ;
7697: LD_ADDR_EXP 64
7701: PUSH
7702: LD_INT 1
7704: ST_TO_ADDR
// if p3 = 112 then
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 112
7712: EQUAL
7713: IFFALSE 7723
// sStu := true ;
7715: LD_ADDR_EXP 68
7719: PUSH
7720: LD_INT 1
7722: ST_TO_ADDR
// if p3 = 113 then
7723: LD_VAR 0 3
7727: PUSH
7728: LD_INT 113
7730: EQUAL
7731: IFFALSE 7741
// sBazooka := true ;
7733: LD_ADDR_EXP 71
7737: PUSH
7738: LD_INT 1
7740: ST_TO_ADDR
// if p3 = 114 then
7741: LD_VAR 0 3
7745: PUSH
7746: LD_INT 114
7748: EQUAL
7749: IFFALSE 7759
// sMortar := true ;
7751: LD_ADDR_EXP 72
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
// if p3 = 115 then
7759: LD_VAR 0 3
7763: PUSH
7764: LD_INT 115
7766: EQUAL
7767: IFFALSE 7777
// sRanger := true ;
7769: LD_ADDR_EXP 82
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// end ; if p2 = 101 then
7777: LD_VAR 0 2
7781: PUSH
7782: LD_INT 101
7784: EQUAL
7785: IFFALSE 7988
// begin case p3 of 1 :
7787: LD_VAR 0 3
7791: PUSH
7792: LD_INT 1
7794: DOUBLE
7795: EQUAL
7796: IFTRUE 7800
7798: GO 7807
7800: POP
// hHackUnlimitedResources ; 2 :
7801: CALL 18082 0 0
7805: GO 7988
7807: LD_INT 2
7809: DOUBLE
7810: EQUAL
7811: IFTRUE 7815
7813: GO 7822
7815: POP
// hHackSetLevel10 ; 3 :
7816: CALL 18215 0 0
7820: GO 7988
7822: LD_INT 3
7824: DOUBLE
7825: EQUAL
7826: IFTRUE 7830
7828: GO 7837
7830: POP
// hHackSetLevel10YourUnits ; 4 :
7831: CALL 18300 0 0
7835: GO 7988
7837: LD_INT 4
7839: DOUBLE
7840: EQUAL
7841: IFTRUE 7845
7843: GO 7867
7845: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_VAR 0 5
7855: PPUSH
7856: LD_VAR 0 6
7860: PPUSH
7861: CALL 18390 0 3
7865: GO 7988
7867: LD_INT 5
7869: DOUBLE
7870: EQUAL
7871: IFTRUE 7875
7873: GO 7882
7875: POP
// hHackSpawnVehicle ; 6 :
7876: CALL 18451 0 0
7880: GO 7988
7882: LD_INT 6
7884: DOUBLE
7885: EQUAL
7886: IFTRUE 7890
7888: GO 7897
7890: POP
// hHackInvincible ; 7 :
7891: CALL 18997 0 0
7895: GO 7988
7897: LD_INT 7
7899: DOUBLE
7900: EQUAL
7901: IFTRUE 7905
7903: GO 7912
7905: POP
// hHackInvisible ; 8 :
7906: CALL 19108 0 0
7910: GO 7988
7912: LD_INT 8
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7920
7918: GO 7927
7920: POP
// hHackChangeYourSide ; 9 :
7921: CALL 19165 0 0
7925: GO 7988
7927: LD_INT 9
7929: DOUBLE
7930: EQUAL
7931: IFTRUE 7935
7933: GO 7942
7935: POP
// hHackChangeUnitSide ; 10 :
7936: CALL 19207 0 0
7940: GO 7988
7942: LD_INT 10
7944: DOUBLE
7945: EQUAL
7946: IFTRUE 7950
7948: GO 7957
7950: POP
// hHackFog ; 11 :
7951: CALL 19308 0 0
7955: GO 7988
7957: LD_INT 11
7959: DOUBLE
7960: EQUAL
7961: IFTRUE 7965
7963: GO 7972
7965: POP
// hHackApeman ; 12 :
7966: CALL 19323 0 0
7970: GO 7988
7972: LD_INT 12
7974: DOUBLE
7975: EQUAL
7976: IFTRUE 7980
7978: GO 7987
7980: POP
// hHackBoom ; end ;
7981: CALL 19408 0 0
7985: GO 7988
7987: POP
// end ; end ;
7988: PPOPN 6
7990: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7991: GO 7993
7993: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7994: LD_STRING initStreamRollete();
7996: PPUSH
7997: CALL_OW 559
// InitStreamMode ;
8001: CALL 8010 0 0
// DefineStreamItems ( ) ;
8005: CALL 8450 0 0
// end ;
8009: END
// function InitStreamMode ; begin
8010: LD_INT 0
8012: PPUSH
// streamModeActive := false ;
8013: LD_ADDR_EXP 29
8017: PUSH
8018: LD_INT 0
8020: ST_TO_ADDR
// normalCounter := 36 ;
8021: LD_ADDR_EXP 30
8025: PUSH
8026: LD_INT 36
8028: ST_TO_ADDR
// hardcoreCounter := 16 ;
8029: LD_ADDR_EXP 31
8033: PUSH
8034: LD_INT 16
8036: ST_TO_ADDR
// sRocket := false ;
8037: LD_ADDR_EXP 34
8041: PUSH
8042: LD_INT 0
8044: ST_TO_ADDR
// sSpeed := false ;
8045: LD_ADDR_EXP 33
8049: PUSH
8050: LD_INT 0
8052: ST_TO_ADDR
// sEngine := false ;
8053: LD_ADDR_EXP 35
8057: PUSH
8058: LD_INT 0
8060: ST_TO_ADDR
// sSpec := false ;
8061: LD_ADDR_EXP 32
8065: PUSH
8066: LD_INT 0
8068: ST_TO_ADDR
// sLevel := false ;
8069: LD_ADDR_EXP 36
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// sArmoury := false ;
8077: LD_ADDR_EXP 37
8081: PUSH
8082: LD_INT 0
8084: ST_TO_ADDR
// sRadar := false ;
8085: LD_ADDR_EXP 38
8089: PUSH
8090: LD_INT 0
8092: ST_TO_ADDR
// sBunker := false ;
8093: LD_ADDR_EXP 39
8097: PUSH
8098: LD_INT 0
8100: ST_TO_ADDR
// sHack := false ;
8101: LD_ADDR_EXP 40
8105: PUSH
8106: LD_INT 0
8108: ST_TO_ADDR
// sFire := false ;
8109: LD_ADDR_EXP 41
8113: PUSH
8114: LD_INT 0
8116: ST_TO_ADDR
// sRefresh := false ;
8117: LD_ADDR_EXP 42
8121: PUSH
8122: LD_INT 0
8124: ST_TO_ADDR
// sExp := false ;
8125: LD_ADDR_EXP 43
8129: PUSH
8130: LD_INT 0
8132: ST_TO_ADDR
// sDepot := false ;
8133: LD_ADDR_EXP 44
8137: PUSH
8138: LD_INT 0
8140: ST_TO_ADDR
// sFlag := false ;
8141: LD_ADDR_EXP 45
8145: PUSH
8146: LD_INT 0
8148: ST_TO_ADDR
// sKamikadze := false ;
8149: LD_ADDR_EXP 53
8153: PUSH
8154: LD_INT 0
8156: ST_TO_ADDR
// sTroll := false ;
8157: LD_ADDR_EXP 54
8161: PUSH
8162: LD_INT 0
8164: ST_TO_ADDR
// sSlow := false ;
8165: LD_ADDR_EXP 55
8169: PUSH
8170: LD_INT 0
8172: ST_TO_ADDR
// sLack := false ;
8173: LD_ADDR_EXP 56
8177: PUSH
8178: LD_INT 0
8180: ST_TO_ADDR
// sTank := false ;
8181: LD_ADDR_EXP 58
8185: PUSH
8186: LD_INT 0
8188: ST_TO_ADDR
// sRemote := false ;
8189: LD_ADDR_EXP 59
8193: PUSH
8194: LD_INT 0
8196: ST_TO_ADDR
// sPowell := false ;
8197: LD_ADDR_EXP 60
8201: PUSH
8202: LD_INT 0
8204: ST_TO_ADDR
// sTeleport := false ;
8205: LD_ADDR_EXP 63
8209: PUSH
8210: LD_INT 0
8212: ST_TO_ADDR
// sOilTower := false ;
8213: LD_ADDR_EXP 65
8217: PUSH
8218: LD_INT 0
8220: ST_TO_ADDR
// sShovel := false ;
8221: LD_ADDR_EXP 66
8225: PUSH
8226: LD_INT 0
8228: ST_TO_ADDR
// sSheik := false ;
8229: LD_ADDR_EXP 67
8233: PUSH
8234: LD_INT 0
8236: ST_TO_ADDR
// sEarthquake := false ;
8237: LD_ADDR_EXP 69
8241: PUSH
8242: LD_INT 0
8244: ST_TO_ADDR
// sAI := false ;
8245: LD_ADDR_EXP 70
8249: PUSH
8250: LD_INT 0
8252: ST_TO_ADDR
// sCargo := false ;
8253: LD_ADDR_EXP 73
8257: PUSH
8258: LD_INT 0
8260: ST_TO_ADDR
// sDLaser := false ;
8261: LD_ADDR_EXP 74
8265: PUSH
8266: LD_INT 0
8268: ST_TO_ADDR
// sExchange := false ;
8269: LD_ADDR_EXP 75
8273: PUSH
8274: LD_INT 0
8276: ST_TO_ADDR
// sFac := false ;
8277: LD_ADDR_EXP 76
8281: PUSH
8282: LD_INT 0
8284: ST_TO_ADDR
// sPower := false ;
8285: LD_ADDR_EXP 77
8289: PUSH
8290: LD_INT 0
8292: ST_TO_ADDR
// sRandom := false ;
8293: LD_ADDR_EXP 78
8297: PUSH
8298: LD_INT 0
8300: ST_TO_ADDR
// sShield := false ;
8301: LD_ADDR_EXP 79
8305: PUSH
8306: LD_INT 0
8308: ST_TO_ADDR
// sTime := false ;
8309: LD_ADDR_EXP 80
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// sTools := false ;
8317: LD_ADDR_EXP 81
8321: PUSH
8322: LD_INT 0
8324: ST_TO_ADDR
// sSold := false ;
8325: LD_ADDR_EXP 46
8329: PUSH
8330: LD_INT 0
8332: ST_TO_ADDR
// sDiff := false ;
8333: LD_ADDR_EXP 47
8337: PUSH
8338: LD_INT 0
8340: ST_TO_ADDR
// sFog := false ;
8341: LD_ADDR_EXP 50
8345: PUSH
8346: LD_INT 0
8348: ST_TO_ADDR
// sReset := false ;
8349: LD_ADDR_EXP 51
8353: PUSH
8354: LD_INT 0
8356: ST_TO_ADDR
// sSun := false ;
8357: LD_ADDR_EXP 52
8361: PUSH
8362: LD_INT 0
8364: ST_TO_ADDR
// sTiger := false ;
8365: LD_ADDR_EXP 48
8369: PUSH
8370: LD_INT 0
8372: ST_TO_ADDR
// sBomb := false ;
8373: LD_ADDR_EXP 49
8377: PUSH
8378: LD_INT 0
8380: ST_TO_ADDR
// sWound := false ;
8381: LD_ADDR_EXP 57
8385: PUSH
8386: LD_INT 0
8388: ST_TO_ADDR
// sBetray := false ;
8389: LD_ADDR_EXP 61
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// sContamin := false ;
8397: LD_ADDR_EXP 62
8401: PUSH
8402: LD_INT 0
8404: ST_TO_ADDR
// sOil := false ;
8405: LD_ADDR_EXP 64
8409: PUSH
8410: LD_INT 0
8412: ST_TO_ADDR
// sStu := false ;
8413: LD_ADDR_EXP 68
8417: PUSH
8418: LD_INT 0
8420: ST_TO_ADDR
// sBazooka := false ;
8421: LD_ADDR_EXP 71
8425: PUSH
8426: LD_INT 0
8428: ST_TO_ADDR
// sMortar := false ;
8429: LD_ADDR_EXP 72
8433: PUSH
8434: LD_INT 0
8436: ST_TO_ADDR
// sRanger := false ;
8437: LD_ADDR_EXP 82
8441: PUSH
8442: LD_INT 0
8444: ST_TO_ADDR
// end ;
8445: LD_VAR 0 1
8449: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8450: LD_INT 0
8452: PPUSH
8453: PPUSH
8454: PPUSH
8455: PPUSH
8456: PPUSH
// result := [ ] ;
8457: LD_ADDR_VAR 0 1
8461: PUSH
8462: EMPTY
8463: ST_TO_ADDR
// if campaign_id = 1 then
8464: LD_OWVAR 69
8468: PUSH
8469: LD_INT 1
8471: EQUAL
8472: IFFALSE 11410
// begin case mission_number of 1 :
8474: LD_OWVAR 70
8478: PUSH
8479: LD_INT 1
8481: DOUBLE
8482: EQUAL
8483: IFTRUE 8487
8485: GO 8551
8487: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8488: LD_ADDR_VAR 0 1
8492: PUSH
8493: LD_INT 2
8495: PUSH
8496: LD_INT 4
8498: PUSH
8499: LD_INT 11
8501: PUSH
8502: LD_INT 12
8504: PUSH
8505: LD_INT 15
8507: PUSH
8508: LD_INT 16
8510: PUSH
8511: LD_INT 22
8513: PUSH
8514: LD_INT 23
8516: PUSH
8517: LD_INT 26
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 101
8533: PUSH
8534: LD_INT 102
8536: PUSH
8537: LD_INT 106
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: LIST
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: ST_TO_ADDR
8549: GO 11408
8551: LD_INT 2
8553: DOUBLE
8554: EQUAL
8555: IFTRUE 8559
8557: GO 8631
8559: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8560: LD_ADDR_VAR 0 1
8564: PUSH
8565: LD_INT 2
8567: PUSH
8568: LD_INT 4
8570: PUSH
8571: LD_INT 11
8573: PUSH
8574: LD_INT 12
8576: PUSH
8577: LD_INT 15
8579: PUSH
8580: LD_INT 16
8582: PUSH
8583: LD_INT 22
8585: PUSH
8586: LD_INT 23
8588: PUSH
8589: LD_INT 26
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: PUSH
8603: LD_INT 101
8605: PUSH
8606: LD_INT 102
8608: PUSH
8609: LD_INT 105
8611: PUSH
8612: LD_INT 106
8614: PUSH
8615: LD_INT 108
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: ST_TO_ADDR
8629: GO 11408
8631: LD_INT 3
8633: DOUBLE
8634: EQUAL
8635: IFTRUE 8639
8637: GO 8715
8639: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8640: LD_ADDR_VAR 0 1
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: LD_INT 4
8650: PUSH
8651: LD_INT 5
8653: PUSH
8654: LD_INT 11
8656: PUSH
8657: LD_INT 12
8659: PUSH
8660: LD_INT 15
8662: PUSH
8663: LD_INT 16
8665: PUSH
8666: LD_INT 22
8668: PUSH
8669: LD_INT 26
8671: PUSH
8672: LD_INT 36
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 101
8689: PUSH
8690: LD_INT 102
8692: PUSH
8693: LD_INT 105
8695: PUSH
8696: LD_INT 106
8698: PUSH
8699: LD_INT 108
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: ST_TO_ADDR
8713: GO 11408
8715: LD_INT 4
8717: DOUBLE
8718: EQUAL
8719: IFTRUE 8723
8721: GO 8807
8723: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8724: LD_ADDR_VAR 0 1
8728: PUSH
8729: LD_INT 2
8731: PUSH
8732: LD_INT 4
8734: PUSH
8735: LD_INT 5
8737: PUSH
8738: LD_INT 8
8740: PUSH
8741: LD_INT 11
8743: PUSH
8744: LD_INT 12
8746: PUSH
8747: LD_INT 15
8749: PUSH
8750: LD_INT 16
8752: PUSH
8753: LD_INT 22
8755: PUSH
8756: LD_INT 23
8758: PUSH
8759: LD_INT 26
8761: PUSH
8762: LD_INT 36
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 101
8781: PUSH
8782: LD_INT 102
8784: PUSH
8785: LD_INT 105
8787: PUSH
8788: LD_INT 106
8790: PUSH
8791: LD_INT 108
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: ST_TO_ADDR
8805: GO 11408
8807: LD_INT 5
8809: DOUBLE
8810: EQUAL
8811: IFTRUE 8815
8813: GO 8915
8815: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8816: LD_ADDR_VAR 0 1
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: LD_INT 4
8826: PUSH
8827: LD_INT 5
8829: PUSH
8830: LD_INT 6
8832: PUSH
8833: LD_INT 8
8835: PUSH
8836: LD_INT 11
8838: PUSH
8839: LD_INT 12
8841: PUSH
8842: LD_INT 15
8844: PUSH
8845: LD_INT 16
8847: PUSH
8848: LD_INT 22
8850: PUSH
8851: LD_INT 23
8853: PUSH
8854: LD_INT 25
8856: PUSH
8857: LD_INT 26
8859: PUSH
8860: LD_INT 36
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 101
8881: PUSH
8882: LD_INT 102
8884: PUSH
8885: LD_INT 105
8887: PUSH
8888: LD_INT 106
8890: PUSH
8891: LD_INT 108
8893: PUSH
8894: LD_INT 109
8896: PUSH
8897: LD_INT 112
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: ST_TO_ADDR
8913: GO 11408
8915: LD_INT 6
8917: DOUBLE
8918: EQUAL
8919: IFTRUE 8923
8921: GO 9043
8923: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8924: LD_ADDR_VAR 0 1
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: LD_INT 4
8934: PUSH
8935: LD_INT 5
8937: PUSH
8938: LD_INT 6
8940: PUSH
8941: LD_INT 8
8943: PUSH
8944: LD_INT 11
8946: PUSH
8947: LD_INT 12
8949: PUSH
8950: LD_INT 15
8952: PUSH
8953: LD_INT 16
8955: PUSH
8956: LD_INT 20
8958: PUSH
8959: LD_INT 21
8961: PUSH
8962: LD_INT 22
8964: PUSH
8965: LD_INT 23
8967: PUSH
8968: LD_INT 25
8970: PUSH
8971: LD_INT 26
8973: PUSH
8974: LD_INT 30
8976: PUSH
8977: LD_INT 31
8979: PUSH
8980: LD_INT 32
8982: PUSH
8983: LD_INT 36
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 101
9009: PUSH
9010: LD_INT 102
9012: PUSH
9013: LD_INT 105
9015: PUSH
9016: LD_INT 106
9018: PUSH
9019: LD_INT 108
9021: PUSH
9022: LD_INT 109
9024: PUSH
9025: LD_INT 112
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: ST_TO_ADDR
9041: GO 11408
9043: LD_INT 7
9045: DOUBLE
9046: EQUAL
9047: IFTRUE 9051
9049: GO 9151
9051: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9052: LD_ADDR_VAR 0 1
9056: PUSH
9057: LD_INT 2
9059: PUSH
9060: LD_INT 4
9062: PUSH
9063: LD_INT 5
9065: PUSH
9066: LD_INT 7
9068: PUSH
9069: LD_INT 11
9071: PUSH
9072: LD_INT 12
9074: PUSH
9075: LD_INT 15
9077: PUSH
9078: LD_INT 16
9080: PUSH
9081: LD_INT 20
9083: PUSH
9084: LD_INT 21
9086: PUSH
9087: LD_INT 22
9089: PUSH
9090: LD_INT 23
9092: PUSH
9093: LD_INT 25
9095: PUSH
9096: LD_INT 26
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PUSH
9115: LD_INT 101
9117: PUSH
9118: LD_INT 102
9120: PUSH
9121: LD_INT 103
9123: PUSH
9124: LD_INT 105
9126: PUSH
9127: LD_INT 106
9129: PUSH
9130: LD_INT 108
9132: PUSH
9133: LD_INT 112
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: ST_TO_ADDR
9149: GO 11408
9151: LD_INT 8
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9287
9159: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9160: LD_ADDR_VAR 0 1
9164: PUSH
9165: LD_INT 2
9167: PUSH
9168: LD_INT 4
9170: PUSH
9171: LD_INT 5
9173: PUSH
9174: LD_INT 6
9176: PUSH
9177: LD_INT 7
9179: PUSH
9180: LD_INT 8
9182: PUSH
9183: LD_INT 11
9185: PUSH
9186: LD_INT 12
9188: PUSH
9189: LD_INT 15
9191: PUSH
9192: LD_INT 16
9194: PUSH
9195: LD_INT 20
9197: PUSH
9198: LD_INT 21
9200: PUSH
9201: LD_INT 22
9203: PUSH
9204: LD_INT 23
9206: PUSH
9207: LD_INT 25
9209: PUSH
9210: LD_INT 26
9212: PUSH
9213: LD_INT 30
9215: PUSH
9216: LD_INT 31
9218: PUSH
9219: LD_INT 32
9221: PUSH
9222: LD_INT 36
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 101
9249: PUSH
9250: LD_INT 102
9252: PUSH
9253: LD_INT 103
9255: PUSH
9256: LD_INT 105
9258: PUSH
9259: LD_INT 106
9261: PUSH
9262: LD_INT 108
9264: PUSH
9265: LD_INT 109
9267: PUSH
9268: LD_INT 112
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: ST_TO_ADDR
9285: GO 11408
9287: LD_INT 9
9289: DOUBLE
9290: EQUAL
9291: IFTRUE 9295
9293: GO 9431
9295: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9296: LD_ADDR_VAR 0 1
9300: PUSH
9301: LD_INT 2
9303: PUSH
9304: LD_INT 4
9306: PUSH
9307: LD_INT 5
9309: PUSH
9310: LD_INT 6
9312: PUSH
9313: LD_INT 7
9315: PUSH
9316: LD_INT 8
9318: PUSH
9319: LD_INT 11
9321: PUSH
9322: LD_INT 12
9324: PUSH
9325: LD_INT 15
9327: PUSH
9328: LD_INT 16
9330: PUSH
9331: LD_INT 20
9333: PUSH
9334: LD_INT 21
9336: PUSH
9337: LD_INT 22
9339: PUSH
9340: LD_INT 23
9342: PUSH
9343: LD_INT 25
9345: PUSH
9346: LD_INT 26
9348: PUSH
9349: LD_INT 28
9351: PUSH
9352: LD_INT 30
9354: PUSH
9355: LD_INT 31
9357: PUSH
9358: LD_INT 32
9360: PUSH
9361: LD_INT 36
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 101
9389: PUSH
9390: LD_INT 102
9392: PUSH
9393: LD_INT 103
9395: PUSH
9396: LD_INT 105
9398: PUSH
9399: LD_INT 106
9401: PUSH
9402: LD_INT 108
9404: PUSH
9405: LD_INT 109
9407: PUSH
9408: LD_INT 112
9410: PUSH
9411: LD_INT 114
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: ST_TO_ADDR
9429: GO 11408
9431: LD_INT 10
9433: DOUBLE
9434: EQUAL
9435: IFTRUE 9439
9437: GO 9623
9439: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9440: LD_ADDR_VAR 0 1
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: LD_INT 4
9450: PUSH
9451: LD_INT 5
9453: PUSH
9454: LD_INT 6
9456: PUSH
9457: LD_INT 7
9459: PUSH
9460: LD_INT 8
9462: PUSH
9463: LD_INT 9
9465: PUSH
9466: LD_INT 10
9468: PUSH
9469: LD_INT 11
9471: PUSH
9472: LD_INT 12
9474: PUSH
9475: LD_INT 13
9477: PUSH
9478: LD_INT 14
9480: PUSH
9481: LD_INT 15
9483: PUSH
9484: LD_INT 16
9486: PUSH
9487: LD_INT 17
9489: PUSH
9490: LD_INT 18
9492: PUSH
9493: LD_INT 19
9495: PUSH
9496: LD_INT 20
9498: PUSH
9499: LD_INT 21
9501: PUSH
9502: LD_INT 22
9504: PUSH
9505: LD_INT 23
9507: PUSH
9508: LD_INT 24
9510: PUSH
9511: LD_INT 25
9513: PUSH
9514: LD_INT 26
9516: PUSH
9517: LD_INT 28
9519: PUSH
9520: LD_INT 30
9522: PUSH
9523: LD_INT 31
9525: PUSH
9526: LD_INT 32
9528: PUSH
9529: LD_INT 36
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: PUSH
9563: LD_INT 101
9565: PUSH
9566: LD_INT 102
9568: PUSH
9569: LD_INT 103
9571: PUSH
9572: LD_INT 104
9574: PUSH
9575: LD_INT 105
9577: PUSH
9578: LD_INT 106
9580: PUSH
9581: LD_INT 107
9583: PUSH
9584: LD_INT 108
9586: PUSH
9587: LD_INT 109
9589: PUSH
9590: LD_INT 110
9592: PUSH
9593: LD_INT 111
9595: PUSH
9596: LD_INT 112
9598: PUSH
9599: LD_INT 114
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: ST_TO_ADDR
9621: GO 11408
9623: LD_INT 11
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9823
9631: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9632: LD_ADDR_VAR 0 1
9636: PUSH
9637: LD_INT 2
9639: PUSH
9640: LD_INT 3
9642: PUSH
9643: LD_INT 4
9645: PUSH
9646: LD_INT 5
9648: PUSH
9649: LD_INT 6
9651: PUSH
9652: LD_INT 7
9654: PUSH
9655: LD_INT 8
9657: PUSH
9658: LD_INT 9
9660: PUSH
9661: LD_INT 10
9663: PUSH
9664: LD_INT 11
9666: PUSH
9667: LD_INT 12
9669: PUSH
9670: LD_INT 13
9672: PUSH
9673: LD_INT 14
9675: PUSH
9676: LD_INT 15
9678: PUSH
9679: LD_INT 16
9681: PUSH
9682: LD_INT 17
9684: PUSH
9685: LD_INT 18
9687: PUSH
9688: LD_INT 19
9690: PUSH
9691: LD_INT 20
9693: PUSH
9694: LD_INT 21
9696: PUSH
9697: LD_INT 22
9699: PUSH
9700: LD_INT 23
9702: PUSH
9703: LD_INT 24
9705: PUSH
9706: LD_INT 25
9708: PUSH
9709: LD_INT 26
9711: PUSH
9712: LD_INT 28
9714: PUSH
9715: LD_INT 30
9717: PUSH
9718: LD_INT 31
9720: PUSH
9721: LD_INT 32
9723: PUSH
9724: LD_INT 34
9726: PUSH
9727: LD_INT 36
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 101
9765: PUSH
9766: LD_INT 102
9768: PUSH
9769: LD_INT 103
9771: PUSH
9772: LD_INT 104
9774: PUSH
9775: LD_INT 105
9777: PUSH
9778: LD_INT 106
9780: PUSH
9781: LD_INT 107
9783: PUSH
9784: LD_INT 108
9786: PUSH
9787: LD_INT 109
9789: PUSH
9790: LD_INT 110
9792: PUSH
9793: LD_INT 111
9795: PUSH
9796: LD_INT 112
9798: PUSH
9799: LD_INT 114
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: ST_TO_ADDR
9821: GO 11408
9823: LD_INT 12
9825: DOUBLE
9826: EQUAL
9827: IFTRUE 9831
9829: GO 10039
9831: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9832: LD_ADDR_VAR 0 1
9836: PUSH
9837: LD_INT 1
9839: PUSH
9840: LD_INT 2
9842: PUSH
9843: LD_INT 3
9845: PUSH
9846: LD_INT 4
9848: PUSH
9849: LD_INT 5
9851: PUSH
9852: LD_INT 6
9854: PUSH
9855: LD_INT 7
9857: PUSH
9858: LD_INT 8
9860: PUSH
9861: LD_INT 9
9863: PUSH
9864: LD_INT 10
9866: PUSH
9867: LD_INT 11
9869: PUSH
9870: LD_INT 12
9872: PUSH
9873: LD_INT 13
9875: PUSH
9876: LD_INT 14
9878: PUSH
9879: LD_INT 15
9881: PUSH
9882: LD_INT 16
9884: PUSH
9885: LD_INT 17
9887: PUSH
9888: LD_INT 18
9890: PUSH
9891: LD_INT 19
9893: PUSH
9894: LD_INT 20
9896: PUSH
9897: LD_INT 21
9899: PUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 23
9905: PUSH
9906: LD_INT 24
9908: PUSH
9909: LD_INT 25
9911: PUSH
9912: LD_INT 26
9914: PUSH
9915: LD_INT 27
9917: PUSH
9918: LD_INT 28
9920: PUSH
9921: LD_INT 30
9923: PUSH
9924: LD_INT 31
9926: PUSH
9927: LD_INT 32
9929: PUSH
9930: LD_INT 33
9932: PUSH
9933: LD_INT 34
9935: PUSH
9936: LD_INT 36
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 101
9977: PUSH
9978: LD_INT 102
9980: PUSH
9981: LD_INT 103
9983: PUSH
9984: LD_INT 104
9986: PUSH
9987: LD_INT 105
9989: PUSH
9990: LD_INT 106
9992: PUSH
9993: LD_INT 107
9995: PUSH
9996: LD_INT 108
9998: PUSH
9999: LD_INT 109
10001: PUSH
10002: LD_INT 110
10004: PUSH
10005: LD_INT 111
10007: PUSH
10008: LD_INT 112
10010: PUSH
10011: LD_INT 113
10013: PUSH
10014: LD_INT 114
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: ST_TO_ADDR
10037: GO 11408
10039: LD_INT 13
10041: DOUBLE
10042: EQUAL
10043: IFTRUE 10047
10045: GO 10243
10047: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10048: LD_ADDR_VAR 0 1
10052: PUSH
10053: LD_INT 1
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: LD_INT 4
10064: PUSH
10065: LD_INT 5
10067: PUSH
10068: LD_INT 8
10070: PUSH
10071: LD_INT 9
10073: PUSH
10074: LD_INT 10
10076: PUSH
10077: LD_INT 11
10079: PUSH
10080: LD_INT 12
10082: PUSH
10083: LD_INT 14
10085: PUSH
10086: LD_INT 15
10088: PUSH
10089: LD_INT 16
10091: PUSH
10092: LD_INT 17
10094: PUSH
10095: LD_INT 18
10097: PUSH
10098: LD_INT 19
10100: PUSH
10101: LD_INT 20
10103: PUSH
10104: LD_INT 21
10106: PUSH
10107: LD_INT 22
10109: PUSH
10110: LD_INT 23
10112: PUSH
10113: LD_INT 24
10115: PUSH
10116: LD_INT 25
10118: PUSH
10119: LD_INT 26
10121: PUSH
10122: LD_INT 27
10124: PUSH
10125: LD_INT 28
10127: PUSH
10128: LD_INT 30
10130: PUSH
10131: LD_INT 31
10133: PUSH
10134: LD_INT 32
10136: PUSH
10137: LD_INT 33
10139: PUSH
10140: LD_INT 34
10142: PUSH
10143: LD_INT 36
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 101
10181: PUSH
10182: LD_INT 102
10184: PUSH
10185: LD_INT 103
10187: PUSH
10188: LD_INT 104
10190: PUSH
10191: LD_INT 105
10193: PUSH
10194: LD_INT 106
10196: PUSH
10197: LD_INT 107
10199: PUSH
10200: LD_INT 108
10202: PUSH
10203: LD_INT 109
10205: PUSH
10206: LD_INT 110
10208: PUSH
10209: LD_INT 111
10211: PUSH
10212: LD_INT 112
10214: PUSH
10215: LD_INT 113
10217: PUSH
10218: LD_INT 114
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: ST_TO_ADDR
10241: GO 11408
10243: LD_INT 14
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10463
10251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10252: LD_ADDR_VAR 0 1
10256: PUSH
10257: LD_INT 1
10259: PUSH
10260: LD_INT 2
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: LD_INT 4
10268: PUSH
10269: LD_INT 5
10271: PUSH
10272: LD_INT 6
10274: PUSH
10275: LD_INT 7
10277: PUSH
10278: LD_INT 8
10280: PUSH
10281: LD_INT 9
10283: PUSH
10284: LD_INT 10
10286: PUSH
10287: LD_INT 11
10289: PUSH
10290: LD_INT 12
10292: PUSH
10293: LD_INT 13
10295: PUSH
10296: LD_INT 14
10298: PUSH
10299: LD_INT 15
10301: PUSH
10302: LD_INT 16
10304: PUSH
10305: LD_INT 17
10307: PUSH
10308: LD_INT 18
10310: PUSH
10311: LD_INT 19
10313: PUSH
10314: LD_INT 20
10316: PUSH
10317: LD_INT 21
10319: PUSH
10320: LD_INT 22
10322: PUSH
10323: LD_INT 23
10325: PUSH
10326: LD_INT 24
10328: PUSH
10329: LD_INT 25
10331: PUSH
10332: LD_INT 26
10334: PUSH
10335: LD_INT 27
10337: PUSH
10338: LD_INT 28
10340: PUSH
10341: LD_INT 29
10343: PUSH
10344: LD_INT 30
10346: PUSH
10347: LD_INT 31
10349: PUSH
10350: LD_INT 32
10352: PUSH
10353: LD_INT 33
10355: PUSH
10356: LD_INT 34
10358: PUSH
10359: LD_INT 36
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 101
10401: PUSH
10402: LD_INT 102
10404: PUSH
10405: LD_INT 103
10407: PUSH
10408: LD_INT 104
10410: PUSH
10411: LD_INT 105
10413: PUSH
10414: LD_INT 106
10416: PUSH
10417: LD_INT 107
10419: PUSH
10420: LD_INT 108
10422: PUSH
10423: LD_INT 109
10425: PUSH
10426: LD_INT 110
10428: PUSH
10429: LD_INT 111
10431: PUSH
10432: LD_INT 112
10434: PUSH
10435: LD_INT 113
10437: PUSH
10438: LD_INT 114
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: ST_TO_ADDR
10461: GO 11408
10463: LD_INT 15
10465: DOUBLE
10466: EQUAL
10467: IFTRUE 10471
10469: GO 10683
10471: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10472: LD_ADDR_VAR 0 1
10476: PUSH
10477: LD_INT 1
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 3
10485: PUSH
10486: LD_INT 4
10488: PUSH
10489: LD_INT 5
10491: PUSH
10492: LD_INT 6
10494: PUSH
10495: LD_INT 7
10497: PUSH
10498: LD_INT 8
10500: PUSH
10501: LD_INT 9
10503: PUSH
10504: LD_INT 10
10506: PUSH
10507: LD_INT 11
10509: PUSH
10510: LD_INT 12
10512: PUSH
10513: LD_INT 13
10515: PUSH
10516: LD_INT 14
10518: PUSH
10519: LD_INT 15
10521: PUSH
10522: LD_INT 16
10524: PUSH
10525: LD_INT 17
10527: PUSH
10528: LD_INT 18
10530: PUSH
10531: LD_INT 19
10533: PUSH
10534: LD_INT 20
10536: PUSH
10537: LD_INT 21
10539: PUSH
10540: LD_INT 22
10542: PUSH
10543: LD_INT 23
10545: PUSH
10546: LD_INT 24
10548: PUSH
10549: LD_INT 25
10551: PUSH
10552: LD_INT 26
10554: PUSH
10555: LD_INT 27
10557: PUSH
10558: LD_INT 28
10560: PUSH
10561: LD_INT 29
10563: PUSH
10564: LD_INT 30
10566: PUSH
10567: LD_INT 31
10569: PUSH
10570: LD_INT 32
10572: PUSH
10573: LD_INT 33
10575: PUSH
10576: LD_INT 34
10578: PUSH
10579: LD_INT 36
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 101
10621: PUSH
10622: LD_INT 102
10624: PUSH
10625: LD_INT 103
10627: PUSH
10628: LD_INT 104
10630: PUSH
10631: LD_INT 105
10633: PUSH
10634: LD_INT 106
10636: PUSH
10637: LD_INT 107
10639: PUSH
10640: LD_INT 108
10642: PUSH
10643: LD_INT 109
10645: PUSH
10646: LD_INT 110
10648: PUSH
10649: LD_INT 111
10651: PUSH
10652: LD_INT 112
10654: PUSH
10655: LD_INT 113
10657: PUSH
10658: LD_INT 114
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: ST_TO_ADDR
10681: GO 11408
10683: LD_INT 16
10685: DOUBLE
10686: EQUAL
10687: IFTRUE 10691
10689: GO 10815
10691: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10692: LD_ADDR_VAR 0 1
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 4
10702: PUSH
10703: LD_INT 5
10705: PUSH
10706: LD_INT 7
10708: PUSH
10709: LD_INT 11
10711: PUSH
10712: LD_INT 12
10714: PUSH
10715: LD_INT 15
10717: PUSH
10718: LD_INT 16
10720: PUSH
10721: LD_INT 20
10723: PUSH
10724: LD_INT 21
10726: PUSH
10727: LD_INT 22
10729: PUSH
10730: LD_INT 23
10732: PUSH
10733: LD_INT 25
10735: PUSH
10736: LD_INT 26
10738: PUSH
10739: LD_INT 30
10741: PUSH
10742: LD_INT 31
10744: PUSH
10745: LD_INT 32
10747: PUSH
10748: LD_INT 33
10750: PUSH
10751: LD_INT 34
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 101
10777: PUSH
10778: LD_INT 102
10780: PUSH
10781: LD_INT 103
10783: PUSH
10784: LD_INT 106
10786: PUSH
10787: LD_INT 108
10789: PUSH
10790: LD_INT 112
10792: PUSH
10793: LD_INT 113
10795: PUSH
10796: LD_INT 114
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: ST_TO_ADDR
10813: GO 11408
10815: LD_INT 17
10817: DOUBLE
10818: EQUAL
10819: IFTRUE 10823
10821: GO 11035
10823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10824: LD_ADDR_VAR 0 1
10828: PUSH
10829: LD_INT 1
10831: PUSH
10832: LD_INT 2
10834: PUSH
10835: LD_INT 3
10837: PUSH
10838: LD_INT 4
10840: PUSH
10841: LD_INT 5
10843: PUSH
10844: LD_INT 6
10846: PUSH
10847: LD_INT 7
10849: PUSH
10850: LD_INT 8
10852: PUSH
10853: LD_INT 9
10855: PUSH
10856: LD_INT 10
10858: PUSH
10859: LD_INT 11
10861: PUSH
10862: LD_INT 12
10864: PUSH
10865: LD_INT 13
10867: PUSH
10868: LD_INT 14
10870: PUSH
10871: LD_INT 15
10873: PUSH
10874: LD_INT 16
10876: PUSH
10877: LD_INT 17
10879: PUSH
10880: LD_INT 18
10882: PUSH
10883: LD_INT 19
10885: PUSH
10886: LD_INT 20
10888: PUSH
10889: LD_INT 21
10891: PUSH
10892: LD_INT 22
10894: PUSH
10895: LD_INT 23
10897: PUSH
10898: LD_INT 24
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 26
10906: PUSH
10907: LD_INT 27
10909: PUSH
10910: LD_INT 28
10912: PUSH
10913: LD_INT 29
10915: PUSH
10916: LD_INT 30
10918: PUSH
10919: LD_INT 31
10921: PUSH
10922: LD_INT 32
10924: PUSH
10925: LD_INT 33
10927: PUSH
10928: LD_INT 34
10930: PUSH
10931: LD_INT 36
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 101
10973: PUSH
10974: LD_INT 102
10976: PUSH
10977: LD_INT 103
10979: PUSH
10980: LD_INT 104
10982: PUSH
10983: LD_INT 105
10985: PUSH
10986: LD_INT 106
10988: PUSH
10989: LD_INT 107
10991: PUSH
10992: LD_INT 108
10994: PUSH
10995: LD_INT 109
10997: PUSH
10998: LD_INT 110
11000: PUSH
11001: LD_INT 111
11003: PUSH
11004: LD_INT 112
11006: PUSH
11007: LD_INT 113
11009: PUSH
11010: LD_INT 114
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: ST_TO_ADDR
11033: GO 11408
11035: LD_INT 18
11037: DOUBLE
11038: EQUAL
11039: IFTRUE 11043
11041: GO 11179
11043: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11044: LD_ADDR_VAR 0 1
11048: PUSH
11049: LD_INT 2
11051: PUSH
11052: LD_INT 4
11054: PUSH
11055: LD_INT 5
11057: PUSH
11058: LD_INT 7
11060: PUSH
11061: LD_INT 11
11063: PUSH
11064: LD_INT 12
11066: PUSH
11067: LD_INT 15
11069: PUSH
11070: LD_INT 16
11072: PUSH
11073: LD_INT 20
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 22
11081: PUSH
11082: LD_INT 23
11084: PUSH
11085: LD_INT 25
11087: PUSH
11088: LD_INT 26
11090: PUSH
11091: LD_INT 30
11093: PUSH
11094: LD_INT 31
11096: PUSH
11097: LD_INT 32
11099: PUSH
11100: LD_INT 33
11102: PUSH
11103: LD_INT 34
11105: PUSH
11106: LD_INT 35
11108: PUSH
11109: LD_INT 36
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: LD_INT 101
11137: PUSH
11138: LD_INT 102
11140: PUSH
11141: LD_INT 103
11143: PUSH
11144: LD_INT 106
11146: PUSH
11147: LD_INT 108
11149: PUSH
11150: LD_INT 112
11152: PUSH
11153: LD_INT 113
11155: PUSH
11156: LD_INT 114
11158: PUSH
11159: LD_INT 115
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: ST_TO_ADDR
11177: GO 11408
11179: LD_INT 19
11181: DOUBLE
11182: EQUAL
11183: IFTRUE 11187
11185: GO 11407
11187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11188: LD_ADDR_VAR 0 1
11192: PUSH
11193: LD_INT 1
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: LD_INT 3
11201: PUSH
11202: LD_INT 4
11204: PUSH
11205: LD_INT 5
11207: PUSH
11208: LD_INT 6
11210: PUSH
11211: LD_INT 7
11213: PUSH
11214: LD_INT 8
11216: PUSH
11217: LD_INT 9
11219: PUSH
11220: LD_INT 10
11222: PUSH
11223: LD_INT 11
11225: PUSH
11226: LD_INT 12
11228: PUSH
11229: LD_INT 13
11231: PUSH
11232: LD_INT 14
11234: PUSH
11235: LD_INT 15
11237: PUSH
11238: LD_INT 16
11240: PUSH
11241: LD_INT 17
11243: PUSH
11244: LD_INT 18
11246: PUSH
11247: LD_INT 19
11249: PUSH
11250: LD_INT 20
11252: PUSH
11253: LD_INT 21
11255: PUSH
11256: LD_INT 22
11258: PUSH
11259: LD_INT 23
11261: PUSH
11262: LD_INT 24
11264: PUSH
11265: LD_INT 25
11267: PUSH
11268: LD_INT 26
11270: PUSH
11271: LD_INT 27
11273: PUSH
11274: LD_INT 28
11276: PUSH
11277: LD_INT 29
11279: PUSH
11280: LD_INT 30
11282: PUSH
11283: LD_INT 31
11285: PUSH
11286: LD_INT 32
11288: PUSH
11289: LD_INT 33
11291: PUSH
11292: LD_INT 34
11294: PUSH
11295: LD_INT 35
11297: PUSH
11298: LD_INT 36
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 101
11341: PUSH
11342: LD_INT 102
11344: PUSH
11345: LD_INT 103
11347: PUSH
11348: LD_INT 104
11350: PUSH
11351: LD_INT 105
11353: PUSH
11354: LD_INT 106
11356: PUSH
11357: LD_INT 107
11359: PUSH
11360: LD_INT 108
11362: PUSH
11363: LD_INT 109
11365: PUSH
11366: LD_INT 110
11368: PUSH
11369: LD_INT 111
11371: PUSH
11372: LD_INT 112
11374: PUSH
11375: LD_INT 113
11377: PUSH
11378: LD_INT 114
11380: PUSH
11381: LD_INT 115
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: ST_TO_ADDR
11405: GO 11408
11407: POP
// end else
11408: GO 11627
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11410: LD_ADDR_VAR 0 1
11414: PUSH
11415: LD_INT 1
11417: PUSH
11418: LD_INT 2
11420: PUSH
11421: LD_INT 3
11423: PUSH
11424: LD_INT 4
11426: PUSH
11427: LD_INT 5
11429: PUSH
11430: LD_INT 6
11432: PUSH
11433: LD_INT 7
11435: PUSH
11436: LD_INT 8
11438: PUSH
11439: LD_INT 9
11441: PUSH
11442: LD_INT 10
11444: PUSH
11445: LD_INT 11
11447: PUSH
11448: LD_INT 12
11450: PUSH
11451: LD_INT 13
11453: PUSH
11454: LD_INT 14
11456: PUSH
11457: LD_INT 15
11459: PUSH
11460: LD_INT 16
11462: PUSH
11463: LD_INT 17
11465: PUSH
11466: LD_INT 18
11468: PUSH
11469: LD_INT 19
11471: PUSH
11472: LD_INT 20
11474: PUSH
11475: LD_INT 21
11477: PUSH
11478: LD_INT 22
11480: PUSH
11481: LD_INT 23
11483: PUSH
11484: LD_INT 24
11486: PUSH
11487: LD_INT 25
11489: PUSH
11490: LD_INT 26
11492: PUSH
11493: LD_INT 27
11495: PUSH
11496: LD_INT 28
11498: PUSH
11499: LD_INT 29
11501: PUSH
11502: LD_INT 30
11504: PUSH
11505: LD_INT 31
11507: PUSH
11508: LD_INT 32
11510: PUSH
11511: LD_INT 33
11513: PUSH
11514: LD_INT 34
11516: PUSH
11517: LD_INT 35
11519: PUSH
11520: LD_INT 36
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 101
11563: PUSH
11564: LD_INT 102
11566: PUSH
11567: LD_INT 103
11569: PUSH
11570: LD_INT 104
11572: PUSH
11573: LD_INT 105
11575: PUSH
11576: LD_INT 106
11578: PUSH
11579: LD_INT 107
11581: PUSH
11582: LD_INT 108
11584: PUSH
11585: LD_INT 109
11587: PUSH
11588: LD_INT 110
11590: PUSH
11591: LD_INT 111
11593: PUSH
11594: LD_INT 112
11596: PUSH
11597: LD_INT 113
11599: PUSH
11600: LD_INT 114
11602: PUSH
11603: LD_INT 115
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: ST_TO_ADDR
// if result then
11627: LD_VAR 0 1
11631: IFFALSE 11920
// begin normal :=  ;
11633: LD_ADDR_VAR 0 3
11637: PUSH
11638: LD_STRING 
11640: ST_TO_ADDR
// hardcore :=  ;
11641: LD_ADDR_VAR 0 4
11645: PUSH
11646: LD_STRING 
11648: ST_TO_ADDR
// for i = 1 to normalCounter do
11649: LD_ADDR_VAR 0 5
11653: PUSH
11654: DOUBLE
11655: LD_INT 1
11657: DEC
11658: ST_TO_ADDR
11659: LD_EXP 30
11663: PUSH
11664: FOR_TO
11665: IFFALSE 11766
// begin tmp := 0 ;
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: LD_STRING 0
11674: ST_TO_ADDR
// if result [ 1 ] then
11675: LD_VAR 0 1
11679: PUSH
11680: LD_INT 1
11682: ARRAY
11683: IFFALSE 11748
// if result [ 1 ] [ 1 ] = i then
11685: LD_VAR 0 1
11689: PUSH
11690: LD_INT 1
11692: ARRAY
11693: PUSH
11694: LD_INT 1
11696: ARRAY
11697: PUSH
11698: LD_VAR 0 5
11702: EQUAL
11703: IFFALSE 11748
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11705: LD_ADDR_VAR 0 1
11709: PUSH
11710: LD_VAR 0 1
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: LD_VAR 0 1
11722: PUSH
11723: LD_INT 1
11725: ARRAY
11726: PPUSH
11727: LD_INT 1
11729: PPUSH
11730: CALL_OW 3
11734: PPUSH
11735: CALL_OW 1
11739: ST_TO_ADDR
// tmp := 1 ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_STRING 1
11747: ST_TO_ADDR
// end ; normal := normal & tmp ;
11748: LD_ADDR_VAR 0 3
11752: PUSH
11753: LD_VAR 0 3
11757: PUSH
11758: LD_VAR 0 2
11762: STR
11763: ST_TO_ADDR
// end ;
11764: GO 11664
11766: POP
11767: POP
// for i = 1 to hardcoreCounter do
11768: LD_ADDR_VAR 0 5
11772: PUSH
11773: DOUBLE
11774: LD_INT 1
11776: DEC
11777: ST_TO_ADDR
11778: LD_EXP 31
11782: PUSH
11783: FOR_TO
11784: IFFALSE 11889
// begin tmp := 0 ;
11786: LD_ADDR_VAR 0 2
11790: PUSH
11791: LD_STRING 0
11793: ST_TO_ADDR
// if result [ 2 ] then
11794: LD_VAR 0 1
11798: PUSH
11799: LD_INT 2
11801: ARRAY
11802: IFFALSE 11871
// if result [ 2 ] [ 1 ] = 100 + i then
11804: LD_VAR 0 1
11808: PUSH
11809: LD_INT 2
11811: ARRAY
11812: PUSH
11813: LD_INT 1
11815: ARRAY
11816: PUSH
11817: LD_INT 100
11819: PUSH
11820: LD_VAR 0 5
11824: PLUS
11825: EQUAL
11826: IFFALSE 11871
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11828: LD_ADDR_VAR 0 1
11832: PUSH
11833: LD_VAR 0 1
11837: PPUSH
11838: LD_INT 2
11840: PPUSH
11841: LD_VAR 0 1
11845: PUSH
11846: LD_INT 2
11848: ARRAY
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL_OW 3
11857: PPUSH
11858: CALL_OW 1
11862: ST_TO_ADDR
// tmp := 1 ;
11863: LD_ADDR_VAR 0 2
11867: PUSH
11868: LD_STRING 1
11870: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11871: LD_ADDR_VAR 0 4
11875: PUSH
11876: LD_VAR 0 4
11880: PUSH
11881: LD_VAR 0 2
11885: STR
11886: ST_TO_ADDR
// end ;
11887: GO 11783
11889: POP
11890: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11891: LD_STRING getStreamItemsFromMission("
11893: PUSH
11894: LD_VAR 0 3
11898: STR
11899: PUSH
11900: LD_STRING ","
11902: STR
11903: PUSH
11904: LD_VAR 0 4
11908: STR
11909: PUSH
11910: LD_STRING ")
11912: STR
11913: PPUSH
11914: CALL_OW 559
// end else
11918: GO 11927
// ToLua ( getStreamItemsFromMission("","") ) ;
11920: LD_STRING getStreamItemsFromMission("","")
11922: PPUSH
11923: CALL_OW 559
// end ;
11927: LD_VAR 0 1
11931: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11932: LD_EXP 29
11936: PUSH
11937: LD_EXP 34
11941: AND
11942: IFFALSE 12066
11944: GO 11946
11946: DISABLE
11947: LD_INT 0
11949: PPUSH
11950: PPUSH
// begin enable ;
11951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11952: LD_ADDR_VAR 0 2
11956: PUSH
11957: LD_INT 22
11959: PUSH
11960: LD_OWVAR 2
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 2
11971: PUSH
11972: LD_INT 34
11974: PUSH
11975: LD_INT 7
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 34
11984: PUSH
11985: LD_INT 45
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 34
11994: PUSH
11995: LD_INT 28
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: LD_INT 34
12004: PUSH
12005: LD_INT 47
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PPUSH
12023: CALL_OW 69
12027: ST_TO_ADDR
// if not tmp then
12028: LD_VAR 0 2
12032: NOT
12033: IFFALSE 12037
// exit ;
12035: GO 12066
// for i in tmp do
12037: LD_ADDR_VAR 0 1
12041: PUSH
12042: LD_VAR 0 2
12046: PUSH
12047: FOR_IN
12048: IFFALSE 12064
// begin SetLives ( i , 0 ) ;
12050: LD_VAR 0 1
12054: PPUSH
12055: LD_INT 0
12057: PPUSH
12058: CALL_OW 234
// end ;
12062: GO 12047
12064: POP
12065: POP
// end ;
12066: PPOPN 2
12068: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12069: LD_EXP 29
12073: PUSH
12074: LD_EXP 35
12078: AND
12079: IFFALSE 12163
12081: GO 12083
12083: DISABLE
12084: LD_INT 0
12086: PPUSH
12087: PPUSH
// begin enable ;
12088: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12089: LD_ADDR_VAR 0 2
12093: PUSH
12094: LD_INT 22
12096: PUSH
12097: LD_OWVAR 2
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 32
12108: PUSH
12109: LD_INT 3
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 69
12124: ST_TO_ADDR
// if not tmp then
12125: LD_VAR 0 2
12129: NOT
12130: IFFALSE 12134
// exit ;
12132: GO 12163
// for i in tmp do
12134: LD_ADDR_VAR 0 1
12138: PUSH
12139: LD_VAR 0 2
12143: PUSH
12144: FOR_IN
12145: IFFALSE 12161
// begin SetLives ( i , 0 ) ;
12147: LD_VAR 0 1
12151: PPUSH
12152: LD_INT 0
12154: PPUSH
12155: CALL_OW 234
// end ;
12159: GO 12144
12161: POP
12162: POP
// end ;
12163: PPOPN 2
12165: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12166: LD_EXP 29
12170: PUSH
12171: LD_EXP 32
12175: AND
12176: IFFALSE 12269
12178: GO 12180
12180: DISABLE
12181: LD_INT 0
12183: PPUSH
// begin enable ;
12184: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_OWVAR 2
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: LD_INT 25
12207: PUSH
12208: LD_INT 5
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 25
12217: PUSH
12218: LD_INT 9
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 25
12227: PUSH
12228: LD_INT 8
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PPUSH
12245: CALL_OW 69
12249: PUSH
12250: FOR_IN
12251: IFFALSE 12267
// begin SetClass ( i , 1 ) ;
12253: LD_VAR 0 1
12257: PPUSH
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 336
// end ;
12265: GO 12250
12267: POP
12268: POP
// end ;
12269: PPOPN 1
12271: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12272: LD_EXP 29
12276: PUSH
12277: LD_EXP 33
12281: AND
12282: PUSH
12283: LD_OWVAR 65
12287: PUSH
12288: LD_INT 7
12290: LESS
12291: AND
12292: IFFALSE 12306
12294: GO 12296
12296: DISABLE
// begin enable ;
12297: ENABLE
// game_speed := 7 ;
12298: LD_ADDR_OWVAR 65
12302: PUSH
12303: LD_INT 7
12305: ST_TO_ADDR
// end ;
12306: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12307: LD_EXP 29
12311: PUSH
12312: LD_EXP 36
12316: AND
12317: IFFALSE 12519
12319: GO 12321
12321: DISABLE
12322: LD_INT 0
12324: PPUSH
12325: PPUSH
12326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12327: LD_ADDR_VAR 0 3
12331: PUSH
12332: LD_INT 81
12334: PUSH
12335: LD_OWVAR 2
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 21
12346: PUSH
12347: LD_INT 1
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: ST_TO_ADDR
// if not tmp then
12363: LD_VAR 0 3
12367: NOT
12368: IFFALSE 12372
// exit ;
12370: GO 12519
// if tmp > 5 then
12372: LD_VAR 0 3
12376: PUSH
12377: LD_INT 5
12379: GREATER
12380: IFFALSE 12392
// k := 5 else
12382: LD_ADDR_VAR 0 2
12386: PUSH
12387: LD_INT 5
12389: ST_TO_ADDR
12390: GO 12402
// k := tmp ;
12392: LD_ADDR_VAR 0 2
12396: PUSH
12397: LD_VAR 0 3
12401: ST_TO_ADDR
// for i := 1 to k do
12402: LD_ADDR_VAR 0 1
12406: PUSH
12407: DOUBLE
12408: LD_INT 1
12410: DEC
12411: ST_TO_ADDR
12412: LD_VAR 0 2
12416: PUSH
12417: FOR_TO
12418: IFFALSE 12517
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12420: LD_VAR 0 3
12424: PUSH
12425: LD_VAR 0 1
12429: ARRAY
12430: PPUSH
12431: LD_VAR 0 1
12435: PUSH
12436: LD_INT 4
12438: MOD
12439: PUSH
12440: LD_INT 1
12442: PLUS
12443: PPUSH
12444: CALL_OW 259
12448: PUSH
12449: LD_INT 10
12451: LESS
12452: IFFALSE 12515
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12454: LD_VAR 0 3
12458: PUSH
12459: LD_VAR 0 1
12463: ARRAY
12464: PPUSH
12465: LD_VAR 0 1
12469: PUSH
12470: LD_INT 4
12472: MOD
12473: PUSH
12474: LD_INT 1
12476: PLUS
12477: PPUSH
12478: LD_VAR 0 3
12482: PUSH
12483: LD_VAR 0 1
12487: ARRAY
12488: PPUSH
12489: LD_VAR 0 1
12493: PUSH
12494: LD_INT 4
12496: MOD
12497: PUSH
12498: LD_INT 1
12500: PLUS
12501: PPUSH
12502: CALL_OW 259
12506: PUSH
12507: LD_INT 1
12509: PLUS
12510: PPUSH
12511: CALL_OW 237
12515: GO 12417
12517: POP
12518: POP
// end ;
12519: PPOPN 3
12521: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12522: LD_EXP 29
12526: PUSH
12527: LD_EXP 37
12531: AND
12532: IFFALSE 12552
12534: GO 12536
12536: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12537: LD_INT 4
12539: PPUSH
12540: LD_OWVAR 2
12544: PPUSH
12545: LD_INT 0
12547: PPUSH
12548: CALL_OW 324
12552: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12553: LD_EXP 29
12557: PUSH
12558: LD_EXP 66
12562: AND
12563: IFFALSE 12583
12565: GO 12567
12567: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12568: LD_INT 19
12570: PPUSH
12571: LD_OWVAR 2
12575: PPUSH
12576: LD_INT 0
12578: PPUSH
12579: CALL_OW 324
12583: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12584: LD_EXP 29
12588: PUSH
12589: LD_EXP 38
12593: AND
12594: IFFALSE 12696
12596: GO 12598
12598: DISABLE
12599: LD_INT 0
12601: PPUSH
12602: PPUSH
// begin enable ;
12603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12604: LD_ADDR_VAR 0 2
12608: PUSH
12609: LD_INT 22
12611: PUSH
12612: LD_OWVAR 2
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 2
12623: PUSH
12624: LD_INT 34
12626: PUSH
12627: LD_INT 11
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 34
12636: PUSH
12637: LD_INT 30
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: ST_TO_ADDR
// if not tmp then
12658: LD_VAR 0 2
12662: NOT
12663: IFFALSE 12667
// exit ;
12665: GO 12696
// for i in tmp do
12667: LD_ADDR_VAR 0 1
12671: PUSH
12672: LD_VAR 0 2
12676: PUSH
12677: FOR_IN
12678: IFFALSE 12694
// begin SetLives ( i , 0 ) ;
12680: LD_VAR 0 1
12684: PPUSH
12685: LD_INT 0
12687: PPUSH
12688: CALL_OW 234
// end ;
12692: GO 12677
12694: POP
12695: POP
// end ;
12696: PPOPN 2
12698: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12699: LD_EXP 29
12703: PUSH
12704: LD_EXP 39
12708: AND
12709: IFFALSE 12729
12711: GO 12713
12713: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12714: LD_INT 32
12716: PPUSH
12717: LD_OWVAR 2
12721: PPUSH
12722: LD_INT 0
12724: PPUSH
12725: CALL_OW 324
12729: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12730: LD_EXP 29
12734: PUSH
12735: LD_EXP 40
12739: AND
12740: IFFALSE 12921
12742: GO 12744
12744: DISABLE
12745: LD_INT 0
12747: PPUSH
12748: PPUSH
12749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12750: LD_ADDR_VAR 0 2
12754: PUSH
12755: LD_INT 22
12757: PUSH
12758: LD_OWVAR 2
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 33
12769: PUSH
12770: LD_INT 3
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PPUSH
12781: CALL_OW 69
12785: ST_TO_ADDR
// if not tmp then
12786: LD_VAR 0 2
12790: NOT
12791: IFFALSE 12795
// exit ;
12793: GO 12921
// side := 0 ;
12795: LD_ADDR_VAR 0 3
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// for i := 1 to 8 do
12803: LD_ADDR_VAR 0 1
12807: PUSH
12808: DOUBLE
12809: LD_INT 1
12811: DEC
12812: ST_TO_ADDR
12813: LD_INT 8
12815: PUSH
12816: FOR_TO
12817: IFFALSE 12865
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12819: LD_OWVAR 2
12823: PUSH
12824: LD_VAR 0 1
12828: NONEQUAL
12829: PUSH
12830: LD_OWVAR 2
12834: PPUSH
12835: LD_VAR 0 1
12839: PPUSH
12840: CALL_OW 81
12844: PUSH
12845: LD_INT 2
12847: EQUAL
12848: AND
12849: IFFALSE 12863
// begin side := i ;
12851: LD_ADDR_VAR 0 3
12855: PUSH
12856: LD_VAR 0 1
12860: ST_TO_ADDR
// break ;
12861: GO 12865
// end ;
12863: GO 12816
12865: POP
12866: POP
// if not side then
12867: LD_VAR 0 3
12871: NOT
12872: IFFALSE 12876
// exit ;
12874: GO 12921
// for i := 1 to tmp do
12876: LD_ADDR_VAR 0 1
12880: PUSH
12881: DOUBLE
12882: LD_INT 1
12884: DEC
12885: ST_TO_ADDR
12886: LD_VAR 0 2
12890: PUSH
12891: FOR_TO
12892: IFFALSE 12919
// if Prob ( 60 ) then
12894: LD_INT 60
12896: PPUSH
12897: CALL_OW 13
12901: IFFALSE 12917
// SetSide ( i , side ) ;
12903: LD_VAR 0 1
12907: PPUSH
12908: LD_VAR 0 3
12912: PPUSH
12913: CALL_OW 235
12917: GO 12891
12919: POP
12920: POP
// end ;
12921: PPOPN 3
12923: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12924: LD_EXP 29
12928: PUSH
12929: LD_EXP 42
12933: AND
12934: IFFALSE 13053
12936: GO 12938
12938: DISABLE
12939: LD_INT 0
12941: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12942: LD_ADDR_VAR 0 1
12946: PUSH
12947: LD_INT 22
12949: PUSH
12950: LD_OWVAR 2
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 21
12961: PUSH
12962: LD_INT 1
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 3
12971: PUSH
12972: LD_INT 23
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 69
12995: PUSH
12996: FOR_IN
12997: IFFALSE 13051
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12999: LD_VAR 0 1
13003: PPUSH
13004: CALL_OW 257
13008: PUSH
13009: LD_INT 1
13011: PUSH
13012: LD_INT 2
13014: PUSH
13015: LD_INT 3
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: IN
13027: IFFALSE 13049
// SetClass ( un , rand ( 1 , 4 ) ) ;
13029: LD_VAR 0 1
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: LD_INT 4
13039: PPUSH
13040: CALL_OW 12
13044: PPUSH
13045: CALL_OW 336
13049: GO 12996
13051: POP
13052: POP
// end ;
13053: PPOPN 1
13055: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13056: LD_EXP 29
13060: PUSH
13061: LD_EXP 41
13065: AND
13066: IFFALSE 13145
13068: GO 13070
13070: DISABLE
13071: LD_INT 0
13073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13074: LD_ADDR_VAR 0 1
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: LD_OWVAR 2
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 21
13093: PUSH
13094: LD_INT 3
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PPUSH
13105: CALL_OW 69
13109: ST_TO_ADDR
// if not tmp then
13110: LD_VAR 0 1
13114: NOT
13115: IFFALSE 13119
// exit ;
13117: GO 13145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13119: LD_VAR 0 1
13123: PUSH
13124: LD_INT 1
13126: PPUSH
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 12
13136: ARRAY
13137: PPUSH
13138: LD_INT 100
13140: PPUSH
13141: CALL_OW 234
// end ;
13145: PPOPN 1
13147: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13148: LD_EXP 29
13152: PUSH
13153: LD_EXP 43
13157: AND
13158: IFFALSE 13256
13160: GO 13162
13162: DISABLE
13163: LD_INT 0
13165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13166: LD_ADDR_VAR 0 1
13170: PUSH
13171: LD_INT 22
13173: PUSH
13174: LD_OWVAR 2
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 21
13185: PUSH
13186: LD_INT 1
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 69
13201: ST_TO_ADDR
// if not tmp then
13202: LD_VAR 0 1
13206: NOT
13207: IFFALSE 13211
// exit ;
13209: GO 13256
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13211: LD_VAR 0 1
13215: PUSH
13216: LD_INT 1
13218: PPUSH
13219: LD_VAR 0 1
13223: PPUSH
13224: CALL_OW 12
13228: ARRAY
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: LD_INT 4
13235: PPUSH
13236: CALL_OW 12
13240: PPUSH
13241: LD_INT 3000
13243: PPUSH
13244: LD_INT 9000
13246: PPUSH
13247: CALL_OW 12
13251: PPUSH
13252: CALL_OW 492
// end ;
13256: PPOPN 1
13258: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13259: LD_EXP 29
13263: PUSH
13264: LD_EXP 44
13268: AND
13269: IFFALSE 13289
13271: GO 13273
13273: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13274: LD_INT 1
13276: PPUSH
13277: LD_OWVAR 2
13281: PPUSH
13282: LD_INT 0
13284: PPUSH
13285: CALL_OW 324
13289: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13290: LD_EXP 29
13294: PUSH
13295: LD_EXP 45
13299: AND
13300: IFFALSE 13383
13302: GO 13304
13304: DISABLE
13305: LD_INT 0
13307: PPUSH
13308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13309: LD_ADDR_VAR 0 2
13313: PUSH
13314: LD_INT 22
13316: PUSH
13317: LD_OWVAR 2
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 21
13328: PUSH
13329: LD_INT 3
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 69
13344: ST_TO_ADDR
// if not tmp then
13345: LD_VAR 0 2
13349: NOT
13350: IFFALSE 13354
// exit ;
13352: GO 13383
// for i in tmp do
13354: LD_ADDR_VAR 0 1
13358: PUSH
13359: LD_VAR 0 2
13363: PUSH
13364: FOR_IN
13365: IFFALSE 13381
// SetBLevel ( i , 10 ) ;
13367: LD_VAR 0 1
13371: PPUSH
13372: LD_INT 10
13374: PPUSH
13375: CALL_OW 241
13379: GO 13364
13381: POP
13382: POP
// end ;
13383: PPOPN 2
13385: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13386: LD_EXP 29
13390: PUSH
13391: LD_EXP 46
13395: AND
13396: IFFALSE 13507
13398: GO 13400
13400: DISABLE
13401: LD_INT 0
13403: PPUSH
13404: PPUSH
13405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13406: LD_ADDR_VAR 0 3
13410: PUSH
13411: LD_INT 22
13413: PUSH
13414: LD_OWVAR 2
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 25
13425: PUSH
13426: LD_INT 1
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL_OW 69
13441: ST_TO_ADDR
// if not tmp then
13442: LD_VAR 0 3
13446: NOT
13447: IFFALSE 13451
// exit ;
13449: GO 13507
// un := tmp [ rand ( 1 , tmp ) ] ;
13451: LD_ADDR_VAR 0 2
13455: PUSH
13456: LD_VAR 0 3
13460: PUSH
13461: LD_INT 1
13463: PPUSH
13464: LD_VAR 0 3
13468: PPUSH
13469: CALL_OW 12
13473: ARRAY
13474: ST_TO_ADDR
// if Crawls ( un ) then
13475: LD_VAR 0 2
13479: PPUSH
13480: CALL_OW 318
13484: IFFALSE 13495
// ComWalk ( un ) ;
13486: LD_VAR 0 2
13490: PPUSH
13491: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13495: LD_VAR 0 2
13499: PPUSH
13500: LD_INT 5
13502: PPUSH
13503: CALL_OW 336
// end ;
13507: PPOPN 3
13509: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13510: LD_EXP 29
13514: PUSH
13515: LD_EXP 47
13519: AND
13520: PUSH
13521: LD_OWVAR 67
13525: PUSH
13526: LD_INT 3
13528: LESS
13529: AND
13530: IFFALSE 13549
13532: GO 13534
13534: DISABLE
// Difficulty := Difficulty + 1 ;
13535: LD_ADDR_OWVAR 67
13539: PUSH
13540: LD_OWVAR 67
13544: PUSH
13545: LD_INT 1
13547: PLUS
13548: ST_TO_ADDR
13549: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13550: LD_EXP 29
13554: PUSH
13555: LD_EXP 48
13559: AND
13560: IFFALSE 13663
13562: GO 13564
13564: DISABLE
13565: LD_INT 0
13567: PPUSH
// begin for i := 1 to 5 do
13568: LD_ADDR_VAR 0 1
13572: PUSH
13573: DOUBLE
13574: LD_INT 1
13576: DEC
13577: ST_TO_ADDR
13578: LD_INT 5
13580: PUSH
13581: FOR_TO
13582: IFFALSE 13661
// begin uc_nation := nation_nature ;
13584: LD_ADDR_OWVAR 21
13588: PUSH
13589: LD_INT 0
13591: ST_TO_ADDR
// uc_side := 0 ;
13592: LD_ADDR_OWVAR 20
13596: PUSH
13597: LD_INT 0
13599: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13600: LD_ADDR_OWVAR 29
13604: PUSH
13605: LD_INT 12
13607: PUSH
13608: LD_INT 12
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: ST_TO_ADDR
// hc_agressivity := 20 ;
13615: LD_ADDR_OWVAR 35
13619: PUSH
13620: LD_INT 20
13622: ST_TO_ADDR
// hc_class := class_tiger ;
13623: LD_ADDR_OWVAR 28
13627: PUSH
13628: LD_INT 14
13630: ST_TO_ADDR
// hc_gallery :=  ;
13631: LD_ADDR_OWVAR 33
13635: PUSH
13636: LD_STRING 
13638: ST_TO_ADDR
// hc_name :=  ;
13639: LD_ADDR_OWVAR 26
13643: PUSH
13644: LD_STRING 
13646: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13647: CALL_OW 44
13651: PPUSH
13652: LD_INT 0
13654: PPUSH
13655: CALL_OW 51
// end ;
13659: GO 13581
13661: POP
13662: POP
// end ;
13663: PPOPN 1
13665: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13666: LD_EXP 29
13670: PUSH
13671: LD_EXP 49
13675: AND
13676: IFFALSE 13685
13678: GO 13680
13680: DISABLE
// StreamSibBomb ;
13681: CALL 13686 0 0
13685: END
// export function StreamSibBomb ; var i , x , y ; begin
13686: LD_INT 0
13688: PPUSH
13689: PPUSH
13690: PPUSH
13691: PPUSH
// result := false ;
13692: LD_ADDR_VAR 0 1
13696: PUSH
13697: LD_INT 0
13699: ST_TO_ADDR
// for i := 1 to 16 do
13700: LD_ADDR_VAR 0 2
13704: PUSH
13705: DOUBLE
13706: LD_INT 1
13708: DEC
13709: ST_TO_ADDR
13710: LD_INT 16
13712: PUSH
13713: FOR_TO
13714: IFFALSE 13913
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13716: LD_ADDR_VAR 0 3
13720: PUSH
13721: LD_INT 10
13723: PUSH
13724: LD_INT 20
13726: PUSH
13727: LD_INT 30
13729: PUSH
13730: LD_INT 40
13732: PUSH
13733: LD_INT 50
13735: PUSH
13736: LD_INT 60
13738: PUSH
13739: LD_INT 70
13741: PUSH
13742: LD_INT 80
13744: PUSH
13745: LD_INT 90
13747: PUSH
13748: LD_INT 100
13750: PUSH
13751: LD_INT 110
13753: PUSH
13754: LD_INT 120
13756: PUSH
13757: LD_INT 130
13759: PUSH
13760: LD_INT 140
13762: PUSH
13763: LD_INT 150
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 1
13785: PPUSH
13786: LD_INT 15
13788: PPUSH
13789: CALL_OW 12
13793: ARRAY
13794: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13795: LD_ADDR_VAR 0 4
13799: PUSH
13800: LD_INT 10
13802: PUSH
13803: LD_INT 20
13805: PUSH
13806: LD_INT 30
13808: PUSH
13809: LD_INT 40
13811: PUSH
13812: LD_INT 50
13814: PUSH
13815: LD_INT 60
13817: PUSH
13818: LD_INT 70
13820: PUSH
13821: LD_INT 80
13823: PUSH
13824: LD_INT 90
13826: PUSH
13827: LD_INT 100
13829: PUSH
13830: LD_INT 110
13832: PUSH
13833: LD_INT 120
13835: PUSH
13836: LD_INT 130
13838: PUSH
13839: LD_INT 140
13841: PUSH
13842: LD_INT 150
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 1
13864: PPUSH
13865: LD_INT 15
13867: PPUSH
13868: CALL_OW 12
13872: ARRAY
13873: ST_TO_ADDR
// if ValidHex ( x , y ) then
13874: LD_VAR 0 3
13878: PPUSH
13879: LD_VAR 0 4
13883: PPUSH
13884: CALL_OW 488
13888: IFFALSE 13911
// begin result := [ x , y ] ;
13890: LD_ADDR_VAR 0 1
13894: PUSH
13895: LD_VAR 0 3
13899: PUSH
13900: LD_VAR 0 4
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: ST_TO_ADDR
// break ;
13909: GO 13913
// end ; end ;
13911: GO 13713
13913: POP
13914: POP
// if result then
13915: LD_VAR 0 1
13919: IFFALSE 13979
// begin ToLua ( playSibBomb() ) ;
13921: LD_STRING playSibBomb()
13923: PPUSH
13924: CALL_OW 559
// wait ( 0 0$14 ) ;
13928: LD_INT 490
13930: PPUSH
13931: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13935: LD_VAR 0 1
13939: PUSH
13940: LD_INT 1
13942: ARRAY
13943: PPUSH
13944: LD_VAR 0 1
13948: PUSH
13949: LD_INT 2
13951: ARRAY
13952: PPUSH
13953: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13957: LD_VAR 0 1
13961: PUSH
13962: LD_INT 1
13964: ARRAY
13965: PPUSH
13966: LD_VAR 0 1
13970: PUSH
13971: LD_INT 2
13973: ARRAY
13974: PPUSH
13975: CALL_OW 429
// end ; end ;
13979: LD_VAR 0 1
13983: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13984: LD_EXP 29
13988: PUSH
13989: LD_EXP 51
13993: AND
13994: IFFALSE 14006
13996: GO 13998
13998: DISABLE
// YouLost (  ) ;
13999: LD_STRING 
14001: PPUSH
14002: CALL_OW 104
14006: END
// every 0 0$1 trigger StreamModeActive and sFog do
14007: LD_EXP 29
14011: PUSH
14012: LD_EXP 50
14016: AND
14017: IFFALSE 14031
14019: GO 14021
14021: DISABLE
// FogOff ( your_side ) ;
14022: LD_OWVAR 2
14026: PPUSH
14027: CALL_OW 344
14031: END
// every 0 0$1 trigger StreamModeActive and sSun do
14032: LD_EXP 29
14036: PUSH
14037: LD_EXP 52
14041: AND
14042: IFFALSE 14070
14044: GO 14046
14046: DISABLE
// begin solar_recharge_percent := 0 ;
14047: LD_ADDR_OWVAR 79
14051: PUSH
14052: LD_INT 0
14054: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14055: LD_INT 10500
14057: PPUSH
14058: CALL_OW 67
// solar_recharge_percent := 100 ;
14062: LD_ADDR_OWVAR 79
14066: PUSH
14067: LD_INT 100
14069: ST_TO_ADDR
// end ;
14070: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14071: LD_EXP 29
14075: PUSH
14076: LD_EXP 53
14080: AND
14081: IFFALSE 14320
14083: GO 14085
14085: DISABLE
14086: LD_INT 0
14088: PPUSH
14089: PPUSH
14090: PPUSH
// begin tmp := [ ] ;
14091: LD_ADDR_VAR 0 3
14095: PUSH
14096: EMPTY
14097: ST_TO_ADDR
// for i := 1 to 6 do
14098: LD_ADDR_VAR 0 1
14102: PUSH
14103: DOUBLE
14104: LD_INT 1
14106: DEC
14107: ST_TO_ADDR
14108: LD_INT 6
14110: PUSH
14111: FOR_TO
14112: IFFALSE 14217
// begin uc_nation := nation_nature ;
14114: LD_ADDR_OWVAR 21
14118: PUSH
14119: LD_INT 0
14121: ST_TO_ADDR
// uc_side := 0 ;
14122: LD_ADDR_OWVAR 20
14126: PUSH
14127: LD_INT 0
14129: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14130: LD_ADDR_OWVAR 29
14134: PUSH
14135: LD_INT 12
14137: PUSH
14138: LD_INT 12
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: ST_TO_ADDR
// hc_agressivity := 20 ;
14145: LD_ADDR_OWVAR 35
14149: PUSH
14150: LD_INT 20
14152: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14153: LD_ADDR_OWVAR 28
14157: PUSH
14158: LD_INT 17
14160: ST_TO_ADDR
// hc_gallery :=  ;
14161: LD_ADDR_OWVAR 33
14165: PUSH
14166: LD_STRING 
14168: ST_TO_ADDR
// hc_name :=  ;
14169: LD_ADDR_OWVAR 26
14173: PUSH
14174: LD_STRING 
14176: ST_TO_ADDR
// un := CreateHuman ;
14177: LD_ADDR_VAR 0 2
14181: PUSH
14182: CALL_OW 44
14186: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14187: LD_VAR 0 2
14191: PPUSH
14192: LD_INT 1
14194: PPUSH
14195: CALL_OW 51
// tmp := tmp ^ un ;
14199: LD_ADDR_VAR 0 3
14203: PUSH
14204: LD_VAR 0 3
14208: PUSH
14209: LD_VAR 0 2
14213: ADD
14214: ST_TO_ADDR
// end ;
14215: GO 14111
14217: POP
14218: POP
// repeat wait ( 0 0$1 ) ;
14219: LD_INT 35
14221: PPUSH
14222: CALL_OW 67
// for un in tmp do
14226: LD_ADDR_VAR 0 2
14230: PUSH
14231: LD_VAR 0 3
14235: PUSH
14236: FOR_IN
14237: IFFALSE 14311
// begin if IsDead ( un ) then
14239: LD_VAR 0 2
14243: PPUSH
14244: CALL_OW 301
14248: IFFALSE 14268
// begin tmp := tmp diff un ;
14250: LD_ADDR_VAR 0 3
14254: PUSH
14255: LD_VAR 0 3
14259: PUSH
14260: LD_VAR 0 2
14264: DIFF
14265: ST_TO_ADDR
// continue ;
14266: GO 14236
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14268: LD_VAR 0 2
14272: PPUSH
14273: LD_INT 3
14275: PUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 0
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PPUSH
14290: CALL_OW 69
14294: PPUSH
14295: LD_VAR 0 2
14299: PPUSH
14300: CALL_OW 74
14304: PPUSH
14305: CALL_OW 115
// end ;
14309: GO 14236
14311: POP
14312: POP
// until not tmp ;
14313: LD_VAR 0 3
14317: NOT
14318: IFFALSE 14219
// end ;
14320: PPOPN 3
14322: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14323: LD_EXP 29
14327: PUSH
14328: LD_EXP 54
14332: AND
14333: IFFALSE 14387
14335: GO 14337
14337: DISABLE
// begin ToLua ( displayTroll(); ) ;
14338: LD_STRING displayTroll();
14340: PPUSH
14341: CALL_OW 559
// wait ( 3 3$00 ) ;
14345: LD_INT 6300
14347: PPUSH
14348: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14352: LD_STRING hideTroll();
14354: PPUSH
14355: CALL_OW 559
// wait ( 1 1$00 ) ;
14359: LD_INT 2100
14361: PPUSH
14362: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14366: LD_STRING displayTroll();
14368: PPUSH
14369: CALL_OW 559
// wait ( 1 1$00 ) ;
14373: LD_INT 2100
14375: PPUSH
14376: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14380: LD_STRING hideTroll();
14382: PPUSH
14383: CALL_OW 559
// end ;
14387: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14388: LD_EXP 29
14392: PUSH
14393: LD_EXP 55
14397: AND
14398: IFFALSE 14461
14400: GO 14402
14402: DISABLE
14403: LD_INT 0
14405: PPUSH
// begin p := 0 ;
14406: LD_ADDR_VAR 0 1
14410: PUSH
14411: LD_INT 0
14413: ST_TO_ADDR
// repeat game_speed := 1 ;
14414: LD_ADDR_OWVAR 65
14418: PUSH
14419: LD_INT 1
14421: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14422: LD_INT 35
14424: PPUSH
14425: CALL_OW 67
// p := p + 1 ;
14429: LD_ADDR_VAR 0 1
14433: PUSH
14434: LD_VAR 0 1
14438: PUSH
14439: LD_INT 1
14441: PLUS
14442: ST_TO_ADDR
// until p >= 60 ;
14443: LD_VAR 0 1
14447: PUSH
14448: LD_INT 60
14450: GREATEREQUAL
14451: IFFALSE 14414
// game_speed := 4 ;
14453: LD_ADDR_OWVAR 65
14457: PUSH
14458: LD_INT 4
14460: ST_TO_ADDR
// end ;
14461: PPOPN 1
14463: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14464: LD_EXP 29
14468: PUSH
14469: LD_EXP 56
14473: AND
14474: IFFALSE 14620
14476: GO 14478
14478: DISABLE
14479: LD_INT 0
14481: PPUSH
14482: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14483: LD_ADDR_VAR 0 1
14487: PUSH
14488: LD_INT 22
14490: PUSH
14491: LD_OWVAR 2
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 2
14502: PUSH
14503: LD_INT 30
14505: PUSH
14506: LD_INT 0
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 30
14515: PUSH
14516: LD_INT 1
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: ST_TO_ADDR
// if not depot then
14537: LD_VAR 0 1
14541: NOT
14542: IFFALSE 14546
// exit ;
14544: GO 14620
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14546: LD_ADDR_VAR 0 2
14550: PUSH
14551: LD_VAR 0 1
14555: PUSH
14556: LD_INT 1
14558: PPUSH
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 12
14568: ARRAY
14569: PPUSH
14570: CALL_OW 274
14574: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14575: LD_VAR 0 2
14579: PPUSH
14580: LD_INT 1
14582: PPUSH
14583: LD_INT 0
14585: PPUSH
14586: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14590: LD_VAR 0 2
14594: PPUSH
14595: LD_INT 2
14597: PPUSH
14598: LD_INT 0
14600: PPUSH
14601: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14605: LD_VAR 0 2
14609: PPUSH
14610: LD_INT 3
14612: PPUSH
14613: LD_INT 0
14615: PPUSH
14616: CALL_OW 277
// end ;
14620: PPOPN 2
14622: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14623: LD_EXP 29
14627: PUSH
14628: LD_EXP 57
14632: AND
14633: IFFALSE 14730
14635: GO 14637
14637: DISABLE
14638: LD_INT 0
14640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14641: LD_ADDR_VAR 0 1
14645: PUSH
14646: LD_INT 22
14648: PUSH
14649: LD_OWVAR 2
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 21
14660: PUSH
14661: LD_INT 1
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 3
14670: PUSH
14671: LD_INT 23
14673: PUSH
14674: LD_INT 0
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: PPUSH
14690: CALL_OW 69
14694: ST_TO_ADDR
// if not tmp then
14695: LD_VAR 0 1
14699: NOT
14700: IFFALSE 14704
// exit ;
14702: GO 14730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14704: LD_VAR 0 1
14708: PUSH
14709: LD_INT 1
14711: PPUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 12
14721: ARRAY
14722: PPUSH
14723: LD_INT 200
14725: PPUSH
14726: CALL_OW 234
// end ;
14730: PPOPN 1
14732: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14733: LD_EXP 29
14737: PUSH
14738: LD_EXP 58
14742: AND
14743: IFFALSE 14822
14745: GO 14747
14747: DISABLE
14748: LD_INT 0
14750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: LD_INT 22
14758: PUSH
14759: LD_OWVAR 2
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 21
14770: PUSH
14771: LD_INT 2
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: ST_TO_ADDR
// if not tmp then
14787: LD_VAR 0 1
14791: NOT
14792: IFFALSE 14796
// exit ;
14794: GO 14822
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14796: LD_VAR 0 1
14800: PUSH
14801: LD_INT 1
14803: PPUSH
14804: LD_VAR 0 1
14808: PPUSH
14809: CALL_OW 12
14813: ARRAY
14814: PPUSH
14815: LD_INT 60
14817: PPUSH
14818: CALL_OW 234
// end ;
14822: PPOPN 1
14824: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14825: LD_EXP 29
14829: PUSH
14830: LD_EXP 59
14834: AND
14835: IFFALSE 14934
14837: GO 14839
14839: DISABLE
14840: LD_INT 0
14842: PPUSH
14843: PPUSH
// begin enable ;
14844: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14845: LD_ADDR_VAR 0 1
14849: PUSH
14850: LD_INT 22
14852: PUSH
14853: LD_OWVAR 2
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 61
14864: PUSH
14865: EMPTY
14866: LIST
14867: PUSH
14868: LD_INT 33
14870: PUSH
14871: LD_INT 2
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: ST_TO_ADDR
// if not tmp then
14888: LD_VAR 0 1
14892: NOT
14893: IFFALSE 14897
// exit ;
14895: GO 14934
// for i in tmp do
14897: LD_ADDR_VAR 0 2
14901: PUSH
14902: LD_VAR 0 1
14906: PUSH
14907: FOR_IN
14908: IFFALSE 14932
// if IsControledBy ( i ) then
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 312
14919: IFFALSE 14930
// ComUnlink ( i ) ;
14921: LD_VAR 0 2
14925: PPUSH
14926: CALL_OW 136
14930: GO 14907
14932: POP
14933: POP
// end ;
14934: PPOPN 2
14936: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14937: LD_EXP 29
14941: PUSH
14942: LD_EXP 60
14946: AND
14947: IFFALSE 15087
14949: GO 14951
14951: DISABLE
14952: LD_INT 0
14954: PPUSH
14955: PPUSH
// begin ToLua ( displayPowell(); ) ;
14956: LD_STRING displayPowell();
14958: PPUSH
14959: CALL_OW 559
// uc_side := 0 ;
14963: LD_ADDR_OWVAR 20
14967: PUSH
14968: LD_INT 0
14970: ST_TO_ADDR
// uc_nation := 2 ;
14971: LD_ADDR_OWVAR 21
14975: PUSH
14976: LD_INT 2
14978: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14979: LD_ADDR_OWVAR 37
14983: PUSH
14984: LD_INT 14
14986: ST_TO_ADDR
// vc_engine := engine_siberite ;
14987: LD_ADDR_OWVAR 39
14991: PUSH
14992: LD_INT 3
14994: ST_TO_ADDR
// vc_control := control_apeman ;
14995: LD_ADDR_OWVAR 38
14999: PUSH
15000: LD_INT 5
15002: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15003: LD_ADDR_OWVAR 40
15007: PUSH
15008: LD_INT 29
15010: ST_TO_ADDR
// un := CreateVehicle ;
15011: LD_ADDR_VAR 0 2
15015: PUSH
15016: CALL_OW 45
15020: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15021: LD_VAR 0 2
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15033: LD_INT 35
15035: PPUSH
15036: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15040: LD_VAR 0 2
15044: PPUSH
15045: LD_INT 22
15047: PUSH
15048: LD_OWVAR 2
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 69
15061: PPUSH
15062: LD_VAR 0 2
15066: PPUSH
15067: CALL_OW 74
15071: PPUSH
15072: CALL_OW 115
// until IsDead ( un ) ;
15076: LD_VAR 0 2
15080: PPUSH
15081: CALL_OW 301
15085: IFFALSE 15033
// end ;
15087: PPOPN 2
15089: END
// every 0 0$1 trigger StreamModeActive and sStu do
15090: LD_EXP 29
15094: PUSH
15095: LD_EXP 68
15099: AND
15100: IFFALSE 15116
15102: GO 15104
15104: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15105: LD_STRING displayStucuk();
15107: PPUSH
15108: CALL_OW 559
// ResetFog ;
15112: CALL_OW 335
// end ;
15116: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15117: LD_EXP 29
15121: PUSH
15122: LD_EXP 61
15126: AND
15127: IFFALSE 15268
15129: GO 15131
15131: DISABLE
15132: LD_INT 0
15134: PPUSH
15135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15136: LD_ADDR_VAR 0 2
15140: PUSH
15141: LD_INT 22
15143: PUSH
15144: LD_OWVAR 2
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 21
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PPUSH
15167: CALL_OW 69
15171: ST_TO_ADDR
// if not tmp then
15172: LD_VAR 0 2
15176: NOT
15177: IFFALSE 15181
// exit ;
15179: GO 15268
// un := tmp [ rand ( 1 , tmp ) ] ;
15181: LD_ADDR_VAR 0 1
15185: PUSH
15186: LD_VAR 0 2
15190: PUSH
15191: LD_INT 1
15193: PPUSH
15194: LD_VAR 0 2
15198: PPUSH
15199: CALL_OW 12
15203: ARRAY
15204: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15205: LD_VAR 0 1
15209: PPUSH
15210: LD_INT 0
15212: PPUSH
15213: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15217: LD_VAR 0 1
15221: PPUSH
15222: LD_OWVAR 3
15226: PUSH
15227: LD_VAR 0 1
15231: DIFF
15232: PPUSH
15233: LD_VAR 0 1
15237: PPUSH
15238: CALL_OW 74
15242: PPUSH
15243: CALL_OW 115
// wait ( 0 0$20 ) ;
15247: LD_INT 700
15249: PPUSH
15250: CALL_OW 67
// SetSide ( un , your_side ) ;
15254: LD_VAR 0 1
15258: PPUSH
15259: LD_OWVAR 2
15263: PPUSH
15264: CALL_OW 235
// end ;
15268: PPOPN 2
15270: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15271: LD_EXP 29
15275: PUSH
15276: LD_EXP 62
15280: AND
15281: IFFALSE 15387
15283: GO 15285
15285: DISABLE
15286: LD_INT 0
15288: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15289: LD_ADDR_VAR 0 1
15293: PUSH
15294: LD_INT 22
15296: PUSH
15297: LD_OWVAR 2
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 2
15308: PUSH
15309: LD_INT 30
15311: PUSH
15312: LD_INT 0
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 30
15321: PUSH
15322: LD_INT 1
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PPUSH
15338: CALL_OW 69
15342: ST_TO_ADDR
// if not depot then
15343: LD_VAR 0 1
15347: NOT
15348: IFFALSE 15352
// exit ;
15350: GO 15387
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15352: LD_VAR 0 1
15356: PUSH
15357: LD_INT 1
15359: ARRAY
15360: PPUSH
15361: CALL_OW 250
15365: PPUSH
15366: LD_VAR 0 1
15370: PUSH
15371: LD_INT 1
15373: ARRAY
15374: PPUSH
15375: CALL_OW 251
15379: PPUSH
15380: LD_INT 70
15382: PPUSH
15383: CALL_OW 495
// end ;
15387: PPOPN 1
15389: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15390: LD_EXP 29
15394: PUSH
15395: LD_EXP 63
15399: AND
15400: IFFALSE 15611
15402: GO 15404
15404: DISABLE
15405: LD_INT 0
15407: PPUSH
15408: PPUSH
15409: PPUSH
15410: PPUSH
15411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15412: LD_ADDR_VAR 0 5
15416: PUSH
15417: LD_INT 22
15419: PUSH
15420: LD_OWVAR 2
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 21
15431: PUSH
15432: LD_INT 1
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PPUSH
15443: CALL_OW 69
15447: ST_TO_ADDR
// if not tmp then
15448: LD_VAR 0 5
15452: NOT
15453: IFFALSE 15457
// exit ;
15455: GO 15611
// for i in tmp do
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: LD_VAR 0 5
15466: PUSH
15467: FOR_IN
15468: IFFALSE 15609
// begin d := rand ( 0 , 5 ) ;
15470: LD_ADDR_VAR 0 4
15474: PUSH
15475: LD_INT 0
15477: PPUSH
15478: LD_INT 5
15480: PPUSH
15481: CALL_OW 12
15485: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15486: LD_ADDR_VAR 0 2
15490: PUSH
15491: LD_VAR 0 1
15495: PPUSH
15496: CALL_OW 250
15500: PPUSH
15501: LD_VAR 0 4
15505: PPUSH
15506: LD_INT 3
15508: PPUSH
15509: LD_INT 12
15511: PPUSH
15512: CALL_OW 12
15516: PPUSH
15517: CALL_OW 272
15521: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15522: LD_ADDR_VAR 0 3
15526: PUSH
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 251
15536: PPUSH
15537: LD_VAR 0 4
15541: PPUSH
15542: LD_INT 3
15544: PPUSH
15545: LD_INT 12
15547: PPUSH
15548: CALL_OW 12
15552: PPUSH
15553: CALL_OW 273
15557: ST_TO_ADDR
// if ValidHex ( x , y ) then
15558: LD_VAR 0 2
15562: PPUSH
15563: LD_VAR 0 3
15567: PPUSH
15568: CALL_OW 488
15572: IFFALSE 15607
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15574: LD_VAR 0 1
15578: PPUSH
15579: LD_VAR 0 2
15583: PPUSH
15584: LD_VAR 0 3
15588: PPUSH
15589: LD_INT 3
15591: PPUSH
15592: LD_INT 6
15594: PPUSH
15595: CALL_OW 12
15599: PPUSH
15600: LD_INT 1
15602: PPUSH
15603: CALL_OW 483
// end ;
15607: GO 15467
15609: POP
15610: POP
// end ;
15611: PPOPN 5
15613: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15614: LD_EXP 29
15618: PUSH
15619: LD_EXP 64
15623: AND
15624: IFFALSE 15718
15626: GO 15628
15628: DISABLE
15629: LD_INT 0
15631: PPUSH
15632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15633: LD_ADDR_VAR 0 2
15637: PUSH
15638: LD_INT 22
15640: PUSH
15641: LD_OWVAR 2
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 32
15652: PUSH
15653: LD_INT 1
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 21
15662: PUSH
15663: LD_INT 2
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: CALL_OW 69
15679: ST_TO_ADDR
// if not tmp then
15680: LD_VAR 0 2
15684: NOT
15685: IFFALSE 15689
// exit ;
15687: GO 15718
// for i in tmp do
15689: LD_ADDR_VAR 0 1
15693: PUSH
15694: LD_VAR 0 2
15698: PUSH
15699: FOR_IN
15700: IFFALSE 15716
// SetFuel ( i , 0 ) ;
15702: LD_VAR 0 1
15706: PPUSH
15707: LD_INT 0
15709: PPUSH
15710: CALL_OW 240
15714: GO 15699
15716: POP
15717: POP
// end ;
15718: PPOPN 2
15720: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15721: LD_EXP 29
15725: PUSH
15726: LD_EXP 65
15730: AND
15731: IFFALSE 15797
15733: GO 15735
15735: DISABLE
15736: LD_INT 0
15738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15739: LD_ADDR_VAR 0 1
15743: PUSH
15744: LD_INT 22
15746: PUSH
15747: LD_OWVAR 2
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 30
15758: PUSH
15759: LD_INT 29
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PPUSH
15770: CALL_OW 69
15774: ST_TO_ADDR
// if not tmp then
15775: LD_VAR 0 1
15779: NOT
15780: IFFALSE 15784
// exit ;
15782: GO 15797
// DestroyUnit ( tmp [ 1 ] ) ;
15784: LD_VAR 0 1
15788: PUSH
15789: LD_INT 1
15791: ARRAY
15792: PPUSH
15793: CALL_OW 65
// end ;
15797: PPOPN 1
15799: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15800: LD_EXP 29
15804: PUSH
15805: LD_EXP 67
15809: AND
15810: IFFALSE 15939
15812: GO 15814
15814: DISABLE
15815: LD_INT 0
15817: PPUSH
// begin uc_side := 0 ;
15818: LD_ADDR_OWVAR 20
15822: PUSH
15823: LD_INT 0
15825: ST_TO_ADDR
// uc_nation := nation_arabian ;
15826: LD_ADDR_OWVAR 21
15830: PUSH
15831: LD_INT 2
15833: ST_TO_ADDR
// hc_gallery :=  ;
15834: LD_ADDR_OWVAR 33
15838: PUSH
15839: LD_STRING 
15841: ST_TO_ADDR
// hc_name :=  ;
15842: LD_ADDR_OWVAR 26
15846: PUSH
15847: LD_STRING 
15849: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15850: LD_INT 1
15852: PPUSH
15853: LD_INT 11
15855: PPUSH
15856: LD_INT 10
15858: PPUSH
15859: CALL_OW 380
// un := CreateHuman ;
15863: LD_ADDR_VAR 0 1
15867: PUSH
15868: CALL_OW 44
15872: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15873: LD_VAR 0 1
15877: PPUSH
15878: LD_INT 1
15880: PPUSH
15881: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15885: LD_INT 35
15887: PPUSH
15888: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15892: LD_VAR 0 1
15896: PPUSH
15897: LD_INT 22
15899: PUSH
15900: LD_OWVAR 2
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PPUSH
15909: CALL_OW 69
15913: PPUSH
15914: LD_VAR 0 1
15918: PPUSH
15919: CALL_OW 74
15923: PPUSH
15924: CALL_OW 115
// until IsDead ( un ) ;
15928: LD_VAR 0 1
15932: PPUSH
15933: CALL_OW 301
15937: IFFALSE 15885
// end ;
15939: PPOPN 1
15941: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15942: LD_EXP 29
15946: PUSH
15947: LD_EXP 69
15951: AND
15952: IFFALSE 15964
15954: GO 15956
15956: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15957: LD_STRING earthquake(getX(game), 0, 32)
15959: PPUSH
15960: CALL_OW 559
15964: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15965: LD_EXP 29
15969: PUSH
15970: LD_EXP 70
15974: AND
15975: IFFALSE 16066
15977: GO 15979
15979: DISABLE
15980: LD_INT 0
15982: PPUSH
// begin enable ;
15983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15984: LD_ADDR_VAR 0 1
15988: PUSH
15989: LD_INT 22
15991: PUSH
15992: LD_OWVAR 2
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 21
16003: PUSH
16004: LD_INT 2
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 33
16013: PUSH
16014: LD_INT 3
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: LIST
16025: PPUSH
16026: CALL_OW 69
16030: ST_TO_ADDR
// if not tmp then
16031: LD_VAR 0 1
16035: NOT
16036: IFFALSE 16040
// exit ;
16038: GO 16066
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16040: LD_VAR 0 1
16044: PUSH
16045: LD_INT 1
16047: PPUSH
16048: LD_VAR 0 1
16052: PPUSH
16053: CALL_OW 12
16057: ARRAY
16058: PPUSH
16059: LD_INT 1
16061: PPUSH
16062: CALL_OW 234
// end ;
16066: PPOPN 1
16068: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16069: LD_EXP 29
16073: PUSH
16074: LD_EXP 71
16078: AND
16079: IFFALSE 16220
16081: GO 16083
16083: DISABLE
16084: LD_INT 0
16086: PPUSH
16087: PPUSH
16088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16089: LD_ADDR_VAR 0 3
16093: PUSH
16094: LD_INT 22
16096: PUSH
16097: LD_OWVAR 2
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 25
16108: PUSH
16109: LD_INT 1
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PPUSH
16120: CALL_OW 69
16124: ST_TO_ADDR
// if not tmp then
16125: LD_VAR 0 3
16129: NOT
16130: IFFALSE 16134
// exit ;
16132: GO 16220
// un := tmp [ rand ( 1 , tmp ) ] ;
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: LD_VAR 0 3
16143: PUSH
16144: LD_INT 1
16146: PPUSH
16147: LD_VAR 0 3
16151: PPUSH
16152: CALL_OW 12
16156: ARRAY
16157: ST_TO_ADDR
// if Crawls ( un ) then
16158: LD_VAR 0 2
16162: PPUSH
16163: CALL_OW 318
16167: IFFALSE 16178
// ComWalk ( un ) ;
16169: LD_VAR 0 2
16173: PPUSH
16174: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16178: LD_VAR 0 2
16182: PPUSH
16183: LD_INT 9
16185: PPUSH
16186: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16190: LD_INT 28
16192: PPUSH
16193: LD_OWVAR 2
16197: PPUSH
16198: LD_INT 2
16200: PPUSH
16201: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16205: LD_INT 29
16207: PPUSH
16208: LD_OWVAR 2
16212: PPUSH
16213: LD_INT 2
16215: PPUSH
16216: CALL_OW 322
// end ;
16220: PPOPN 3
16222: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16223: LD_EXP 29
16227: PUSH
16228: LD_EXP 72
16232: AND
16233: IFFALSE 16344
16235: GO 16237
16237: DISABLE
16238: LD_INT 0
16240: PPUSH
16241: PPUSH
16242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16243: LD_ADDR_VAR 0 3
16247: PUSH
16248: LD_INT 22
16250: PUSH
16251: LD_OWVAR 2
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 25
16262: PUSH
16263: LD_INT 1
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PPUSH
16274: CALL_OW 69
16278: ST_TO_ADDR
// if not tmp then
16279: LD_VAR 0 3
16283: NOT
16284: IFFALSE 16288
// exit ;
16286: GO 16344
// un := tmp [ rand ( 1 , tmp ) ] ;
16288: LD_ADDR_VAR 0 2
16292: PUSH
16293: LD_VAR 0 3
16297: PUSH
16298: LD_INT 1
16300: PPUSH
16301: LD_VAR 0 3
16305: PPUSH
16306: CALL_OW 12
16310: ARRAY
16311: ST_TO_ADDR
// if Crawls ( un ) then
16312: LD_VAR 0 2
16316: PPUSH
16317: CALL_OW 318
16321: IFFALSE 16332
// ComWalk ( un ) ;
16323: LD_VAR 0 2
16327: PPUSH
16328: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16332: LD_VAR 0 2
16336: PPUSH
16337: LD_INT 8
16339: PPUSH
16340: CALL_OW 336
// end ;
16344: PPOPN 3
16346: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16347: LD_EXP 29
16351: PUSH
16352: LD_EXP 73
16356: AND
16357: IFFALSE 16501
16359: GO 16361
16361: DISABLE
16362: LD_INT 0
16364: PPUSH
16365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16366: LD_ADDR_VAR 0 2
16370: PUSH
16371: LD_INT 22
16373: PUSH
16374: LD_OWVAR 2
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 21
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 2
16395: PUSH
16396: LD_INT 34
16398: PUSH
16399: LD_INT 12
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 34
16408: PUSH
16409: LD_INT 51
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 34
16418: PUSH
16419: LD_INT 32
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: PPUSH
16437: CALL_OW 69
16441: ST_TO_ADDR
// if not tmp then
16442: LD_VAR 0 2
16446: NOT
16447: IFFALSE 16451
// exit ;
16449: GO 16501
// for i in tmp do
16451: LD_ADDR_VAR 0 1
16455: PUSH
16456: LD_VAR 0 2
16460: PUSH
16461: FOR_IN
16462: IFFALSE 16499
// if GetCargo ( i , mat_artifact ) = 0 then
16464: LD_VAR 0 1
16468: PPUSH
16469: LD_INT 4
16471: PPUSH
16472: CALL_OW 289
16476: PUSH
16477: LD_INT 0
16479: EQUAL
16480: IFFALSE 16497
// SetCargo ( i , mat_siberit , 100 ) ;
16482: LD_VAR 0 1
16486: PPUSH
16487: LD_INT 3
16489: PPUSH
16490: LD_INT 100
16492: PPUSH
16493: CALL_OW 290
16497: GO 16461
16499: POP
16500: POP
// end ;
16501: PPOPN 2
16503: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16504: LD_EXP 29
16508: PUSH
16509: LD_EXP 74
16513: AND
16514: IFFALSE 16697
16516: GO 16518
16518: DISABLE
16519: LD_INT 0
16521: PPUSH
16522: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16523: LD_ADDR_VAR 0 2
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_OWVAR 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PPUSH
16540: CALL_OW 69
16544: ST_TO_ADDR
// if not tmp then
16545: LD_VAR 0 2
16549: NOT
16550: IFFALSE 16554
// exit ;
16552: GO 16697
// for i := 1 to 2 do
16554: LD_ADDR_VAR 0 1
16558: PUSH
16559: DOUBLE
16560: LD_INT 1
16562: DEC
16563: ST_TO_ADDR
16564: LD_INT 2
16566: PUSH
16567: FOR_TO
16568: IFFALSE 16695
// begin uc_side := your_side ;
16570: LD_ADDR_OWVAR 20
16574: PUSH
16575: LD_OWVAR 2
16579: ST_TO_ADDR
// uc_nation := nation_american ;
16580: LD_ADDR_OWVAR 21
16584: PUSH
16585: LD_INT 1
16587: ST_TO_ADDR
// vc_chassis := us_morphling ;
16588: LD_ADDR_OWVAR 37
16592: PUSH
16593: LD_INT 5
16595: ST_TO_ADDR
// vc_engine := engine_siberite ;
16596: LD_ADDR_OWVAR 39
16600: PUSH
16601: LD_INT 3
16603: ST_TO_ADDR
// vc_control := control_computer ;
16604: LD_ADDR_OWVAR 38
16608: PUSH
16609: LD_INT 3
16611: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16612: LD_ADDR_OWVAR 40
16616: PUSH
16617: LD_INT 10
16619: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16620: LD_VAR 0 2
16624: PUSH
16625: LD_INT 1
16627: ARRAY
16628: PPUSH
16629: CALL_OW 310
16633: NOT
16634: IFFALSE 16681
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16636: CALL_OW 45
16640: PPUSH
16641: LD_VAR 0 2
16645: PUSH
16646: LD_INT 1
16648: ARRAY
16649: PPUSH
16650: CALL_OW 250
16654: PPUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_INT 1
16662: ARRAY
16663: PPUSH
16664: CALL_OW 251
16668: PPUSH
16669: LD_INT 12
16671: PPUSH
16672: LD_INT 1
16674: PPUSH
16675: CALL_OW 50
16679: GO 16693
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16681: CALL_OW 45
16685: PPUSH
16686: LD_INT 1
16688: PPUSH
16689: CALL_OW 51
// end ;
16693: GO 16567
16695: POP
16696: POP
// end ;
16697: PPOPN 2
16699: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16700: LD_EXP 29
16704: PUSH
16705: LD_EXP 75
16709: AND
16710: IFFALSE 16932
16712: GO 16714
16714: DISABLE
16715: LD_INT 0
16717: PPUSH
16718: PPUSH
16719: PPUSH
16720: PPUSH
16721: PPUSH
16722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16723: LD_ADDR_VAR 0 6
16727: PUSH
16728: LD_INT 22
16730: PUSH
16731: LD_OWVAR 2
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 21
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 3
16752: PUSH
16753: LD_INT 23
16755: PUSH
16756: LD_INT 0
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: LIST
16771: PPUSH
16772: CALL_OW 69
16776: ST_TO_ADDR
// if not tmp then
16777: LD_VAR 0 6
16781: NOT
16782: IFFALSE 16786
// exit ;
16784: GO 16932
// s1 := rand ( 1 , 4 ) ;
16786: LD_ADDR_VAR 0 2
16790: PUSH
16791: LD_INT 1
16793: PPUSH
16794: LD_INT 4
16796: PPUSH
16797: CALL_OW 12
16801: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16802: LD_ADDR_VAR 0 4
16806: PUSH
16807: LD_VAR 0 6
16811: PUSH
16812: LD_INT 1
16814: ARRAY
16815: PPUSH
16816: LD_VAR 0 2
16820: PPUSH
16821: CALL_OW 259
16825: ST_TO_ADDR
// if s1 = 1 then
16826: LD_VAR 0 2
16830: PUSH
16831: LD_INT 1
16833: EQUAL
16834: IFFALSE 16854
// s2 := rand ( 2 , 4 ) else
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: LD_INT 2
16843: PPUSH
16844: LD_INT 4
16846: PPUSH
16847: CALL_OW 12
16851: ST_TO_ADDR
16852: GO 16862
// s2 := 1 ;
16854: LD_ADDR_VAR 0 3
16858: PUSH
16859: LD_INT 1
16861: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16862: LD_ADDR_VAR 0 5
16866: PUSH
16867: LD_VAR 0 6
16871: PUSH
16872: LD_INT 1
16874: ARRAY
16875: PPUSH
16876: LD_VAR 0 3
16880: PPUSH
16881: CALL_OW 259
16885: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16886: LD_VAR 0 6
16890: PUSH
16891: LD_INT 1
16893: ARRAY
16894: PPUSH
16895: LD_VAR 0 2
16899: PPUSH
16900: LD_VAR 0 5
16904: PPUSH
16905: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16909: LD_VAR 0 6
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_VAR 0 3
16922: PPUSH
16923: LD_VAR 0 4
16927: PPUSH
16928: CALL_OW 237
// end ;
16932: PPOPN 6
16934: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16935: LD_EXP 29
16939: PUSH
16940: LD_EXP 76
16944: AND
16945: IFFALSE 17024
16947: GO 16949
16949: DISABLE
16950: LD_INT 0
16952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16953: LD_ADDR_VAR 0 1
16957: PUSH
16958: LD_INT 22
16960: PUSH
16961: LD_OWVAR 2
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 30
16972: PUSH
16973: LD_INT 3
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PPUSH
16984: CALL_OW 69
16988: ST_TO_ADDR
// if not tmp then
16989: LD_VAR 0 1
16993: NOT
16994: IFFALSE 16998
// exit ;
16996: GO 17024
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16998: LD_VAR 0 1
17002: PUSH
17003: LD_INT 1
17005: PPUSH
17006: LD_VAR 0 1
17010: PPUSH
17011: CALL_OW 12
17015: ARRAY
17016: PPUSH
17017: LD_INT 1
17019: PPUSH
17020: CALL_OW 234
// end ;
17024: PPOPN 1
17026: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17027: LD_EXP 29
17031: PUSH
17032: LD_EXP 77
17036: AND
17037: IFFALSE 17149
17039: GO 17041
17041: DISABLE
17042: LD_INT 0
17044: PPUSH
17045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17046: LD_ADDR_VAR 0 2
17050: PUSH
17051: LD_INT 22
17053: PUSH
17054: LD_OWVAR 2
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 2
17065: PUSH
17066: LD_INT 30
17068: PUSH
17069: LD_INT 27
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 30
17078: PUSH
17079: LD_INT 26
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 30
17088: PUSH
17089: LD_INT 28
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PPUSH
17106: CALL_OW 69
17110: ST_TO_ADDR
// if not tmp then
17111: LD_VAR 0 2
17115: NOT
17116: IFFALSE 17120
// exit ;
17118: GO 17149
// for i in tmp do
17120: LD_ADDR_VAR 0 1
17124: PUSH
17125: LD_VAR 0 2
17129: PUSH
17130: FOR_IN
17131: IFFALSE 17147
// SetLives ( i , 1 ) ;
17133: LD_VAR 0 1
17137: PPUSH
17138: LD_INT 1
17140: PPUSH
17141: CALL_OW 234
17145: GO 17130
17147: POP
17148: POP
// end ;
17149: PPOPN 2
17151: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17152: LD_EXP 29
17156: PUSH
17157: LD_EXP 78
17161: AND
17162: IFFALSE 17436
17164: GO 17166
17166: DISABLE
17167: LD_INT 0
17169: PPUSH
17170: PPUSH
17171: PPUSH
// begin i := rand ( 1 , 7 ) ;
17172: LD_ADDR_VAR 0 1
17176: PUSH
17177: LD_INT 1
17179: PPUSH
17180: LD_INT 7
17182: PPUSH
17183: CALL_OW 12
17187: ST_TO_ADDR
// case i of 1 :
17188: LD_VAR 0 1
17192: PUSH
17193: LD_INT 1
17195: DOUBLE
17196: EQUAL
17197: IFTRUE 17201
17199: GO 17211
17201: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17202: LD_STRING earthquake(getX(game), 0, 32)
17204: PPUSH
17205: CALL_OW 559
17209: GO 17436
17211: LD_INT 2
17213: DOUBLE
17214: EQUAL
17215: IFTRUE 17219
17217: GO 17233
17219: POP
// begin ToLua ( displayStucuk(); ) ;
17220: LD_STRING displayStucuk();
17222: PPUSH
17223: CALL_OW 559
// ResetFog ;
17227: CALL_OW 335
// end ; 3 :
17231: GO 17436
17233: LD_INT 3
17235: DOUBLE
17236: EQUAL
17237: IFTRUE 17241
17239: GO 17345
17241: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17242: LD_ADDR_VAR 0 2
17246: PUSH
17247: LD_INT 22
17249: PUSH
17250: LD_OWVAR 2
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 25
17261: PUSH
17262: LD_INT 1
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: ST_TO_ADDR
// if not tmp then
17278: LD_VAR 0 2
17282: NOT
17283: IFFALSE 17287
// exit ;
17285: GO 17436
// un := tmp [ rand ( 1 , tmp ) ] ;
17287: LD_ADDR_VAR 0 3
17291: PUSH
17292: LD_VAR 0 2
17296: PUSH
17297: LD_INT 1
17299: PPUSH
17300: LD_VAR 0 2
17304: PPUSH
17305: CALL_OW 12
17309: ARRAY
17310: ST_TO_ADDR
// if Crawls ( un ) then
17311: LD_VAR 0 3
17315: PPUSH
17316: CALL_OW 318
17320: IFFALSE 17331
// ComWalk ( un ) ;
17322: LD_VAR 0 3
17326: PPUSH
17327: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17331: LD_VAR 0 3
17335: PPUSH
17336: LD_INT 8
17338: PPUSH
17339: CALL_OW 336
// end ; 4 :
17343: GO 17436
17345: LD_INT 4
17347: DOUBLE
17348: EQUAL
17349: IFTRUE 17353
17351: GO 17414
17353: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17354: LD_ADDR_VAR 0 2
17358: PUSH
17359: LD_INT 22
17361: PUSH
17362: LD_OWVAR 2
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 30
17373: PUSH
17374: LD_INT 29
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PPUSH
17385: CALL_OW 69
17389: ST_TO_ADDR
// if not tmp then
17390: LD_VAR 0 2
17394: NOT
17395: IFFALSE 17399
// exit ;
17397: GO 17436
// DestroyUnit ( tmp [ 1 ] ) ;
17399: LD_VAR 0 2
17403: PUSH
17404: LD_INT 1
17406: ARRAY
17407: PPUSH
17408: CALL_OW 65
// end ; 5 .. 7 :
17412: GO 17436
17414: LD_INT 5
17416: DOUBLE
17417: GREATEREQUAL
17418: IFFALSE 17426
17420: LD_INT 7
17422: DOUBLE
17423: LESSEQUAL
17424: IFTRUE 17428
17426: GO 17435
17428: POP
// StreamSibBomb ; end ;
17429: CALL 13686 0 0
17433: GO 17436
17435: POP
// end ;
17436: PPOPN 3
17438: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17439: LD_EXP 29
17443: PUSH
17444: LD_EXP 79
17448: AND
17449: IFFALSE 17605
17451: GO 17453
17453: DISABLE
17454: LD_INT 0
17456: PPUSH
17457: PPUSH
17458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17459: LD_ADDR_VAR 0 2
17463: PUSH
17464: LD_INT 81
17466: PUSH
17467: LD_OWVAR 2
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 2
17478: PUSH
17479: LD_INT 21
17481: PUSH
17482: LD_INT 1
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 21
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PPUSH
17508: CALL_OW 69
17512: ST_TO_ADDR
// if not tmp then
17513: LD_VAR 0 2
17517: NOT
17518: IFFALSE 17522
// exit ;
17520: GO 17605
// p := 0 ;
17522: LD_ADDR_VAR 0 3
17526: PUSH
17527: LD_INT 0
17529: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17530: LD_INT 35
17532: PPUSH
17533: CALL_OW 67
// p := p + 1 ;
17537: LD_ADDR_VAR 0 3
17541: PUSH
17542: LD_VAR 0 3
17546: PUSH
17547: LD_INT 1
17549: PLUS
17550: ST_TO_ADDR
// for i in tmp do
17551: LD_ADDR_VAR 0 1
17555: PUSH
17556: LD_VAR 0 2
17560: PUSH
17561: FOR_IN
17562: IFFALSE 17593
// if GetLives ( i ) < 1000 then
17564: LD_VAR 0 1
17568: PPUSH
17569: CALL_OW 256
17573: PUSH
17574: LD_INT 1000
17576: LESS
17577: IFFALSE 17591
// SetLives ( i , 1000 ) ;
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_INT 1000
17586: PPUSH
17587: CALL_OW 234
17591: GO 17561
17593: POP
17594: POP
// until p > 20 ;
17595: LD_VAR 0 3
17599: PUSH
17600: LD_INT 20
17602: GREATER
17603: IFFALSE 17530
// end ;
17605: PPOPN 3
17607: END
// every 0 0$1 trigger StreamModeActive and sTime do
17608: LD_EXP 29
17612: PUSH
17613: LD_EXP 80
17617: AND
17618: IFFALSE 17653
17620: GO 17622
17622: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17623: LD_INT 28
17625: PPUSH
17626: LD_OWVAR 2
17630: PPUSH
17631: LD_INT 2
17633: PPUSH
17634: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17638: LD_INT 30
17640: PPUSH
17641: LD_OWVAR 2
17645: PPUSH
17646: LD_INT 2
17648: PPUSH
17649: CALL_OW 322
// end ;
17653: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17654: LD_EXP 29
17658: PUSH
17659: LD_EXP 81
17663: AND
17664: IFFALSE 17785
17666: GO 17668
17668: DISABLE
17669: LD_INT 0
17671: PPUSH
17672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17673: LD_ADDR_VAR 0 2
17677: PUSH
17678: LD_INT 22
17680: PUSH
17681: LD_OWVAR 2
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 21
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 3
17702: PUSH
17703: LD_INT 23
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: PPUSH
17722: CALL_OW 69
17726: ST_TO_ADDR
// if not tmp then
17727: LD_VAR 0 2
17731: NOT
17732: IFFALSE 17736
// exit ;
17734: GO 17785
// for i in tmp do
17736: LD_ADDR_VAR 0 1
17740: PUSH
17741: LD_VAR 0 2
17745: PUSH
17746: FOR_IN
17747: IFFALSE 17783
// begin if Crawls ( i ) then
17749: LD_VAR 0 1
17753: PPUSH
17754: CALL_OW 318
17758: IFFALSE 17769
// ComWalk ( i ) ;
17760: LD_VAR 0 1
17764: PPUSH
17765: CALL_OW 138
// SetClass ( i , 2 ) ;
17769: LD_VAR 0 1
17773: PPUSH
17774: LD_INT 2
17776: PPUSH
17777: CALL_OW 336
// end ;
17781: GO 17746
17783: POP
17784: POP
// end ;
17785: PPOPN 2
17787: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17788: LD_EXP 29
17792: PUSH
17793: LD_EXP 82
17797: AND
17798: IFFALSE 18079
17800: GO 17802
17802: DISABLE
17803: LD_INT 0
17805: PPUSH
17806: PPUSH
17807: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17808: LD_OWVAR 2
17812: PPUSH
17813: LD_INT 9
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: LD_INT 1
17821: PPUSH
17822: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17826: LD_INT 9
17828: PPUSH
17829: LD_OWVAR 2
17833: PPUSH
17834: CALL_OW 343
// uc_side := 9 ;
17838: LD_ADDR_OWVAR 20
17842: PUSH
17843: LD_INT 9
17845: ST_TO_ADDR
// uc_nation := 2 ;
17846: LD_ADDR_OWVAR 21
17850: PUSH
17851: LD_INT 2
17853: ST_TO_ADDR
// hc_name := Dark Warrior ;
17854: LD_ADDR_OWVAR 26
17858: PUSH
17859: LD_STRING Dark Warrior
17861: ST_TO_ADDR
// hc_gallery :=  ;
17862: LD_ADDR_OWVAR 33
17866: PUSH
17867: LD_STRING 
17869: ST_TO_ADDR
// hc_noskilllimit := true ;
17870: LD_ADDR_OWVAR 76
17874: PUSH
17875: LD_INT 1
17877: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17878: LD_ADDR_OWVAR 31
17882: PUSH
17883: LD_INT 30
17885: PUSH
17886: LD_INT 30
17888: PUSH
17889: LD_INT 30
17891: PUSH
17892: LD_INT 30
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: ST_TO_ADDR
// un := CreateHuman ;
17901: LD_ADDR_VAR 0 3
17905: PUSH
17906: CALL_OW 44
17910: ST_TO_ADDR
// hc_noskilllimit := false ;
17911: LD_ADDR_OWVAR 76
17915: PUSH
17916: LD_INT 0
17918: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17919: LD_VAR 0 3
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: CALL_OW 51
// p := 0 ;
17931: LD_ADDR_VAR 0 2
17935: PUSH
17936: LD_INT 0
17938: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17939: LD_INT 35
17941: PPUSH
17942: CALL_OW 67
// p := p + 1 ;
17946: LD_ADDR_VAR 0 2
17950: PUSH
17951: LD_VAR 0 2
17955: PUSH
17956: LD_INT 1
17958: PLUS
17959: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17960: LD_VAR 0 3
17964: PPUSH
17965: CALL_OW 256
17969: PUSH
17970: LD_INT 1000
17972: LESS
17973: IFFALSE 17987
// SetLives ( un , 1000 ) ;
17975: LD_VAR 0 3
17979: PPUSH
17980: LD_INT 1000
17982: PPUSH
17983: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17987: LD_VAR 0 3
17991: PPUSH
17992: LD_INT 81
17994: PUSH
17995: LD_OWVAR 2
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 91
18006: PUSH
18007: LD_VAR 0 3
18011: PUSH
18012: LD_INT 30
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PPUSH
18024: CALL_OW 69
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: CALL_OW 74
18038: PPUSH
18039: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18043: LD_VAR 0 2
18047: PUSH
18048: LD_INT 60
18050: GREATER
18051: PUSH
18052: LD_VAR 0 3
18056: PPUSH
18057: CALL_OW 301
18061: OR
18062: IFFALSE 17939
// if un then
18064: LD_VAR 0 3
18068: IFFALSE 18079
// RemoveUnit ( un ) ;
18070: LD_VAR 0 3
18074: PPUSH
18075: CALL_OW 64
// end ;
18079: PPOPN 3
18081: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18082: LD_INT 0
18084: PPUSH
18085: PPUSH
18086: PPUSH
18087: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18088: LD_ADDR_VAR 0 4
18092: PUSH
18093: LD_INT 22
18095: PUSH
18096: LD_OWVAR 2
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: LD_INT 30
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 30
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: ST_TO_ADDR
// if not tmp then
18142: LD_VAR 0 4
18146: NOT
18147: IFFALSE 18151
// exit ;
18149: GO 18210
// for i in tmp do
18151: LD_ADDR_VAR 0 2
18155: PUSH
18156: LD_VAR 0 4
18160: PUSH
18161: FOR_IN
18162: IFFALSE 18208
// for j = 1 to 3 do
18164: LD_ADDR_VAR 0 3
18168: PUSH
18169: DOUBLE
18170: LD_INT 1
18172: DEC
18173: ST_TO_ADDR
18174: LD_INT 3
18176: PUSH
18177: FOR_TO
18178: IFFALSE 18204
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18180: LD_VAR 0 2
18184: PPUSH
18185: CALL_OW 274
18189: PPUSH
18190: LD_VAR 0 3
18194: PPUSH
18195: LD_INT 99999
18197: PPUSH
18198: CALL_OW 277
18202: GO 18177
18204: POP
18205: POP
18206: GO 18161
18208: POP
18209: POP
// end ;
18210: LD_VAR 0 1
18214: RET
// export function hHackSetLevel10 ; var i , j ; begin
18215: LD_INT 0
18217: PPUSH
18218: PPUSH
18219: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_INT 21
18227: PUSH
18228: LD_INT 1
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PPUSH
18235: CALL_OW 69
18239: PUSH
18240: FOR_IN
18241: IFFALSE 18293
// if IsSelected ( i ) then
18243: LD_VAR 0 2
18247: PPUSH
18248: CALL_OW 306
18252: IFFALSE 18291
// begin for j := 1 to 4 do
18254: LD_ADDR_VAR 0 3
18258: PUSH
18259: DOUBLE
18260: LD_INT 1
18262: DEC
18263: ST_TO_ADDR
18264: LD_INT 4
18266: PUSH
18267: FOR_TO
18268: IFFALSE 18289
// SetSkill ( i , j , 10 ) ;
18270: LD_VAR 0 2
18274: PPUSH
18275: LD_VAR 0 3
18279: PPUSH
18280: LD_INT 10
18282: PPUSH
18283: CALL_OW 237
18287: GO 18267
18289: POP
18290: POP
// end ;
18291: GO 18240
18293: POP
18294: POP
// end ;
18295: LD_VAR 0 1
18299: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18300: LD_INT 0
18302: PPUSH
18303: PPUSH
18304: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18305: LD_ADDR_VAR 0 2
18309: PUSH
18310: LD_INT 22
18312: PUSH
18313: LD_OWVAR 2
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 21
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PPUSH
18336: CALL_OW 69
18340: PUSH
18341: FOR_IN
18342: IFFALSE 18383
// begin for j := 1 to 4 do
18344: LD_ADDR_VAR 0 3
18348: PUSH
18349: DOUBLE
18350: LD_INT 1
18352: DEC
18353: ST_TO_ADDR
18354: LD_INT 4
18356: PUSH
18357: FOR_TO
18358: IFFALSE 18379
// SetSkill ( i , j , 10 ) ;
18360: LD_VAR 0 2
18364: PPUSH
18365: LD_VAR 0 3
18369: PPUSH
18370: LD_INT 10
18372: PPUSH
18373: CALL_OW 237
18377: GO 18357
18379: POP
18380: POP
// end ;
18381: GO 18341
18383: POP
18384: POP
// end ;
18385: LD_VAR 0 1
18389: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
18390: LD_INT 0
18392: PPUSH
// uc_side := your_side ;
18393: LD_ADDR_OWVAR 20
18397: PUSH
18398: LD_OWVAR 2
18402: ST_TO_ADDR
// uc_nation := nation ;
18403: LD_ADDR_OWVAR 21
18407: PUSH
18408: LD_VAR 0 1
18412: ST_TO_ADDR
// InitHc ;
18413: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18417: LD_INT 0
18419: PPUSH
18420: LD_VAR 0 2
18424: PPUSH
18425: LD_VAR 0 3
18429: PPUSH
18430: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
18434: CALL_OW 44
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: CALL_OW 51
// end ;
18446: LD_VAR 0 4
18450: RET
// export function hHackSpawnVehicle ; begin
18451: LD_INT 0
18453: PPUSH
// uc_side := your_side ;
18454: LD_ADDR_OWVAR 20
18458: PUSH
18459: LD_OWVAR 2
18463: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
18464: LD_ADDR_OWVAR 21
18468: PUSH
18469: LD_INT 1
18471: PPUSH
18472: LD_INT 3
18474: PPUSH
18475: CALL_OW 12
18479: ST_TO_ADDR
// InitVc ;
18480: CALL_OW 20
// case uc_nation of 1 :
18484: LD_OWVAR 21
18488: PUSH
18489: LD_INT 1
18491: DOUBLE
18492: EQUAL
18493: IFTRUE 18497
18495: GO 18641
18497: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
18498: LD_ADDR_OWVAR 37
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: LD_INT 2
18508: PUSH
18509: LD_INT 3
18511: PUSH
18512: LD_INT 4
18514: PUSH
18515: LD_INT 5
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 1
18527: PPUSH
18528: LD_INT 5
18530: PPUSH
18531: CALL_OW 12
18535: ARRAY
18536: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18537: LD_ADDR_OWVAR 39
18541: PUSH
18542: LD_INT 1
18544: PPUSH
18545: LD_INT 3
18547: PPUSH
18548: CALL_OW 12
18552: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
18553: LD_ADDR_OWVAR 38
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: LD_INT 2
18563: PUSH
18564: LD_INT 3
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 1
18574: PPUSH
18575: LD_INT 3
18577: PPUSH
18578: CALL_OW 12
18582: ARRAY
18583: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
18584: LD_ADDR_OWVAR 40
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 4
18594: PUSH
18595: LD_INT 5
18597: PUSH
18598: LD_INT 3
18600: PUSH
18601: LD_INT 7
18603: PUSH
18604: LD_INT 8
18606: PUSH
18607: LD_INT 9
18609: PUSH
18610: LD_INT 10
18612: PUSH
18613: LD_INT 6
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 1
18629: PPUSH
18630: LD_INT 9
18632: PPUSH
18633: CALL_OW 12
18637: ARRAY
18638: ST_TO_ADDR
// end ; 2 :
18639: GO 18906
18641: LD_INT 2
18643: DOUBLE
18644: EQUAL
18645: IFTRUE 18649
18647: GO 18773
18649: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
18650: LD_ADDR_OWVAR 37
18654: PUSH
18655: LD_INT 11
18657: PUSH
18658: LD_INT 12
18660: PUSH
18661: LD_INT 13
18663: PUSH
18664: LD_INT 14
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: PPUSH
18676: LD_INT 4
18678: PPUSH
18679: CALL_OW 12
18683: ARRAY
18684: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18685: LD_ADDR_OWVAR 39
18689: PUSH
18690: LD_INT 1
18692: PPUSH
18693: LD_INT 3
18695: PPUSH
18696: CALL_OW 12
18700: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
18701: LD_ADDR_OWVAR 38
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: LD_INT 5
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 1
18722: PPUSH
18723: LD_INT 3
18725: PPUSH
18726: CALL_OW 12
18730: ARRAY
18731: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
18732: LD_ADDR_OWVAR 40
18736: PUSH
18737: LD_INT 24
18739: PUSH
18740: LD_INT 26
18742: PUSH
18743: LD_INT 27
18745: PUSH
18746: LD_INT 28
18748: PUSH
18749: LD_INT 29
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 1
18761: PPUSH
18762: LD_INT 5
18764: PPUSH
18765: CALL_OW 12
18769: ARRAY
18770: ST_TO_ADDR
// end ; 3 :
18771: GO 18906
18773: LD_INT 3
18775: DOUBLE
18776: EQUAL
18777: IFTRUE 18781
18779: GO 18905
18781: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
18782: LD_ADDR_OWVAR 37
18786: PUSH
18787: LD_INT 21
18789: PUSH
18790: LD_INT 23
18792: PUSH
18793: LD_INT 22
18795: PUSH
18796: LD_INT 24
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 1
18807: PPUSH
18808: LD_INT 4
18810: PPUSH
18811: CALL_OW 12
18815: ARRAY
18816: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18817: LD_ADDR_OWVAR 39
18821: PUSH
18822: LD_INT 1
18824: PPUSH
18825: LD_INT 3
18827: PPUSH
18828: CALL_OW 12
18832: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
18833: LD_ADDR_OWVAR 38
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: LD_INT 3
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 1
18850: PPUSH
18851: LD_INT 2
18853: PPUSH
18854: CALL_OW 12
18858: ARRAY
18859: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
18860: LD_ADDR_OWVAR 40
18864: PUSH
18865: LD_INT 42
18867: PUSH
18868: LD_INT 43
18870: PUSH
18871: LD_INT 44
18873: PUSH
18874: LD_INT 46
18876: PUSH
18877: LD_INT 48
18879: PUSH
18880: LD_INT 47
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: PPUSH
18894: LD_INT 6
18896: PPUSH
18897: CALL_OW 12
18901: ARRAY
18902: ST_TO_ADDR
// end ; end ;
18903: GO 18906
18905: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18906: CALL_OW 45
18910: PPUSH
18911: LD_INT 1
18913: PPUSH
18914: CALL_OW 51
// end ;
18918: LD_VAR 0 1
18922: RET
// export hInvincible ; every 1 do
18923: GO 18925
18925: DISABLE
// hInvincible := [ ] ;
18926: LD_ADDR_EXP 83
18930: PUSH
18931: EMPTY
18932: ST_TO_ADDR
18933: END
// every 10 do var i ;
18934: GO 18936
18936: DISABLE
18937: LD_INT 0
18939: PPUSH
// begin enable ;
18940: ENABLE
// if not hInvincible then
18941: LD_EXP 83
18945: NOT
18946: IFFALSE 18950
// exit ;
18948: GO 18994
// for i in hInvincible do
18950: LD_ADDR_VAR 0 1
18954: PUSH
18955: LD_EXP 83
18959: PUSH
18960: FOR_IN
18961: IFFALSE 18992
// if GetLives ( i ) < 1000 then
18963: LD_VAR 0 1
18967: PPUSH
18968: CALL_OW 256
18972: PUSH
18973: LD_INT 1000
18975: LESS
18976: IFFALSE 18990
// SetLives ( i , 1000 ) ;
18978: LD_VAR 0 1
18982: PPUSH
18983: LD_INT 1000
18985: PPUSH
18986: CALL_OW 234
18990: GO 18960
18992: POP
18993: POP
// end ;
18994: PPOPN 1
18996: END
// export function hHackInvincible ; var i ; begin
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19001: LD_ADDR_VAR 0 2
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: LD_INT 21
19011: PUSH
19012: LD_INT 1
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 21
19021: PUSH
19022: LD_INT 2
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: PPUSH
19034: CALL_OW 69
19038: PUSH
19039: FOR_IN
19040: IFFALSE 19101
// if IsSelected ( i ) then
19042: LD_VAR 0 2
19046: PPUSH
19047: CALL_OW 306
19051: IFFALSE 19099
// begin if i in hInvincible then
19053: LD_VAR 0 2
19057: PUSH
19058: LD_EXP 83
19062: IN
19063: IFFALSE 19083
// hInvincible := hInvincible diff i else
19065: LD_ADDR_EXP 83
19069: PUSH
19070: LD_EXP 83
19074: PUSH
19075: LD_VAR 0 2
19079: DIFF
19080: ST_TO_ADDR
19081: GO 19099
// hInvincible := hInvincible union i ;
19083: LD_ADDR_EXP 83
19087: PUSH
19088: LD_EXP 83
19092: PUSH
19093: LD_VAR 0 2
19097: UNION
19098: ST_TO_ADDR
// end ;
19099: GO 19039
19101: POP
19102: POP
// end ;
19103: LD_VAR 0 1
19107: RET
// export function hHackInvisible ; var i , j ; begin
19108: LD_INT 0
19110: PPUSH
19111: PPUSH
19112: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19113: LD_ADDR_VAR 0 2
19117: PUSH
19118: LD_INT 21
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PPUSH
19128: CALL_OW 69
19132: PUSH
19133: FOR_IN
19134: IFFALSE 19158
// if IsSelected ( i ) then
19136: LD_VAR 0 2
19140: PPUSH
19141: CALL_OW 306
19145: IFFALSE 19156
// ComForceInvisible ( i ) ;
19147: LD_VAR 0 2
19151: PPUSH
19152: CALL_OW 496
19156: GO 19133
19158: POP
19159: POP
// end ;
19160: LD_VAR 0 1
19164: RET
// export function hHackChangeYourSide ; begin
19165: LD_INT 0
19167: PPUSH
// if your_side = 8 then
19168: LD_OWVAR 2
19172: PUSH
19173: LD_INT 8
19175: EQUAL
19176: IFFALSE 19188
// your_side := 0 else
19178: LD_ADDR_OWVAR 2
19182: PUSH
19183: LD_INT 0
19185: ST_TO_ADDR
19186: GO 19202
// your_side := your_side + 1 ;
19188: LD_ADDR_OWVAR 2
19192: PUSH
19193: LD_OWVAR 2
19197: PUSH
19198: LD_INT 1
19200: PLUS
19201: ST_TO_ADDR
// end ;
19202: LD_VAR 0 1
19206: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19207: LD_INT 0
19209: PPUSH
19210: PPUSH
19211: PPUSH
// for i in all_units do
19212: LD_ADDR_VAR 0 2
19216: PUSH
19217: LD_OWVAR 3
19221: PUSH
19222: FOR_IN
19223: IFFALSE 19301
// if IsSelected ( i ) then
19225: LD_VAR 0 2
19229: PPUSH
19230: CALL_OW 306
19234: IFFALSE 19299
// begin j := GetSide ( i ) ;
19236: LD_ADDR_VAR 0 3
19240: PUSH
19241: LD_VAR 0 2
19245: PPUSH
19246: CALL_OW 255
19250: ST_TO_ADDR
// if j = 8 then
19251: LD_VAR 0 3
19255: PUSH
19256: LD_INT 8
19258: EQUAL
19259: IFFALSE 19271
// j := 0 else
19261: LD_ADDR_VAR 0 3
19265: PUSH
19266: LD_INT 0
19268: ST_TO_ADDR
19269: GO 19285
// j := j + 1 ;
19271: LD_ADDR_VAR 0 3
19275: PUSH
19276: LD_VAR 0 3
19280: PUSH
19281: LD_INT 1
19283: PLUS
19284: ST_TO_ADDR
// SetSide ( i , j ) ;
19285: LD_VAR 0 2
19289: PPUSH
19290: LD_VAR 0 3
19294: PPUSH
19295: CALL_OW 235
// end ;
19299: GO 19222
19301: POP
19302: POP
// end ;
19303: LD_VAR 0 1
19307: RET
// export function hHackFog ; begin
19308: LD_INT 0
19310: PPUSH
// FogOff ( true ) ;
19311: LD_INT 1
19313: PPUSH
19314: CALL_OW 344
// end ;
19318: LD_VAR 0 1
19322: RET
// export function hHackApeman ; begin
19323: LD_INT 0
19325: PPUSH
// uc_side := your_side ;
19326: LD_ADDR_OWVAR 20
19330: PUSH
19331: LD_OWVAR 2
19335: ST_TO_ADDR
// uc_nation := 0 ;
19336: LD_ADDR_OWVAR 21
19340: PUSH
19341: LD_INT 0
19343: ST_TO_ADDR
// hc_name :=  ;
19344: LD_ADDR_OWVAR 26
19348: PUSH
19349: LD_STRING 
19351: ST_TO_ADDR
// hc_gallery :=  ;
19352: LD_ADDR_OWVAR 33
19356: PUSH
19357: LD_STRING 
19359: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
19360: LD_ADDR_OWVAR 31
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: ST_TO_ADDR
// hc_class := class_apeman ;
19383: LD_ADDR_OWVAR 28
19387: PUSH
19388: LD_INT 12
19390: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
19391: CALL_OW 44
19395: PPUSH
19396: LD_INT 1
19398: PPUSH
19399: CALL_OW 51
// end ;
19403: LD_VAR 0 1
19407: RET
// export function hHackBoom ; begin
19408: LD_INT 0
19410: PPUSH
// uc_side := your_side ;
19411: LD_ADDR_OWVAR 20
19415: PUSH
19416: LD_OWVAR 2
19420: ST_TO_ADDR
// uc_nation := 1 ;
19421: LD_ADDR_OWVAR 21
19425: PUSH
19426: LD_INT 1
19428: ST_TO_ADDR
// vc_chassis := us_morphling ;
19429: LD_ADDR_OWVAR 37
19433: PUSH
19434: LD_INT 5
19436: ST_TO_ADDR
// vc_engine := engine_siberite ;
19437: LD_ADDR_OWVAR 39
19441: PUSH
19442: LD_INT 3
19444: ST_TO_ADDR
// vc_control := control_computer ;
19445: LD_ADDR_OWVAR 38
19449: PUSH
19450: LD_INT 3
19452: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
19453: LD_ADDR_OWVAR 40
19457: PUSH
19458: LD_INT 8
19460: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19461: CALL_OW 45
19465: PPUSH
19466: LD_INT 1
19468: PPUSH
19469: CALL_OW 51
// end ; end_of_file
19473: LD_VAR 0 1
19477: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19478: LD_INT 0
19480: PPUSH
19481: PPUSH
19482: PPUSH
19483: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19484: LD_VAR 0 1
19488: PPUSH
19489: CALL_OW 264
19493: PUSH
19494: LD_EXP 18
19498: EQUAL
19499: IFFALSE 19571
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19501: LD_INT 68
19503: PPUSH
19504: LD_VAR 0 1
19508: PPUSH
19509: CALL_OW 255
19513: PPUSH
19514: CALL_OW 321
19518: PUSH
19519: LD_INT 2
19521: EQUAL
19522: IFFALSE 19534
// eff := 70 else
19524: LD_ADDR_VAR 0 4
19528: PUSH
19529: LD_INT 70
19531: ST_TO_ADDR
19532: GO 19542
// eff := 30 ;
19534: LD_ADDR_VAR 0 4
19538: PUSH
19539: LD_INT 30
19541: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19542: LD_VAR 0 1
19546: PPUSH
19547: CALL_OW 250
19551: PPUSH
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL_OW 251
19561: PPUSH
19562: LD_VAR 0 4
19566: PPUSH
19567: CALL_OW 495
// end ; end ;
19571: LD_VAR 0 2
19575: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19576: LD_INT 0
19578: PPUSH
// end ;
19579: LD_VAR 0 4
19583: RET
// export function SOS_Command ( cmd ) ; begin
19584: LD_INT 0
19586: PPUSH
// end ;
19587: LD_VAR 0 2
19591: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19592: LD_VAR 0 1
19596: PUSH
19597: LD_INT 254
19599: EQUAL
19600: PUSH
19601: LD_VAR 0 2
19605: PPUSH
19606: CALL_OW 264
19610: PUSH
19611: LD_EXP 16
19615: EQUAL
19616: AND
19617: PUSH
19618: LD_VAR 0 3
19622: PPUSH
19623: CALL_OW 263
19627: PUSH
19628: LD_INT 3
19630: EQUAL
19631: AND
19632: IFFALSE 19648
// HackDestroyVehicle ( unit , selectedUnit ) ;
19634: LD_VAR 0 2
19638: PPUSH
19639: LD_VAR 0 3
19643: PPUSH
19644: CALL 21155 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19648: LD_VAR 0 1
19652: PUSH
19653: LD_INT 255
19655: EQUAL
19656: PUSH
19657: LD_VAR 0 2
19661: PPUSH
19662: CALL_OW 264
19666: PUSH
19667: LD_INT 14
19669: PUSH
19670: LD_INT 53
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: IN
19677: AND
19678: PUSH
19679: LD_VAR 0 4
19683: PPUSH
19684: LD_VAR 0 5
19688: PPUSH
19689: CALL_OW 488
19693: AND
19694: IFFALSE 19718
// CutTreeXYR ( unit , x , y , 12 ) ;
19696: LD_VAR 0 2
19700: PPUSH
19701: LD_VAR 0 4
19705: PPUSH
19706: LD_VAR 0 5
19710: PPUSH
19711: LD_INT 12
19713: PPUSH
19714: CALL 19721 0 4
// end ;
19718: PPOPN 5
19720: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19721: LD_INT 0
19723: PPUSH
19724: PPUSH
19725: PPUSH
19726: PPUSH
19727: PPUSH
19728: PPUSH
19729: PPUSH
19730: PPUSH
19731: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19732: LD_VAR 0 1
19736: NOT
19737: PUSH
19738: LD_VAR 0 2
19742: PPUSH
19743: LD_VAR 0 3
19747: PPUSH
19748: CALL_OW 488
19752: NOT
19753: OR
19754: PUSH
19755: LD_VAR 0 4
19759: NOT
19760: OR
19761: IFFALSE 19765
// exit ;
19763: GO 20105
// list := [ ] ;
19765: LD_ADDR_VAR 0 13
19769: PUSH
19770: EMPTY
19771: ST_TO_ADDR
// if x - r < 0 then
19772: LD_VAR 0 2
19776: PUSH
19777: LD_VAR 0 4
19781: MINUS
19782: PUSH
19783: LD_INT 0
19785: LESS
19786: IFFALSE 19798
// min_x := 0 else
19788: LD_ADDR_VAR 0 7
19792: PUSH
19793: LD_INT 0
19795: ST_TO_ADDR
19796: GO 19814
// min_x := x - r ;
19798: LD_ADDR_VAR 0 7
19802: PUSH
19803: LD_VAR 0 2
19807: PUSH
19808: LD_VAR 0 4
19812: MINUS
19813: ST_TO_ADDR
// if y - r < 0 then
19814: LD_VAR 0 3
19818: PUSH
19819: LD_VAR 0 4
19823: MINUS
19824: PUSH
19825: LD_INT 0
19827: LESS
19828: IFFALSE 19840
// min_y := 0 else
19830: LD_ADDR_VAR 0 8
19834: PUSH
19835: LD_INT 0
19837: ST_TO_ADDR
19838: GO 19856
// min_y := y - r ;
19840: LD_ADDR_VAR 0 8
19844: PUSH
19845: LD_VAR 0 3
19849: PUSH
19850: LD_VAR 0 4
19854: MINUS
19855: ST_TO_ADDR
// max_x := x + r ;
19856: LD_ADDR_VAR 0 9
19860: PUSH
19861: LD_VAR 0 2
19865: PUSH
19866: LD_VAR 0 4
19870: PLUS
19871: ST_TO_ADDR
// max_y := y + r ;
19872: LD_ADDR_VAR 0 10
19876: PUSH
19877: LD_VAR 0 3
19881: PUSH
19882: LD_VAR 0 4
19886: PLUS
19887: ST_TO_ADDR
// for _x = min_x to max_x do
19888: LD_ADDR_VAR 0 11
19892: PUSH
19893: DOUBLE
19894: LD_VAR 0 7
19898: DEC
19899: ST_TO_ADDR
19900: LD_VAR 0 9
19904: PUSH
19905: FOR_TO
19906: IFFALSE 20023
// for _y = min_y to max_y do
19908: LD_ADDR_VAR 0 12
19912: PUSH
19913: DOUBLE
19914: LD_VAR 0 8
19918: DEC
19919: ST_TO_ADDR
19920: LD_VAR 0 10
19924: PUSH
19925: FOR_TO
19926: IFFALSE 20019
// begin if not ValidHex ( _x , _y ) then
19928: LD_VAR 0 11
19932: PPUSH
19933: LD_VAR 0 12
19937: PPUSH
19938: CALL_OW 488
19942: NOT
19943: IFFALSE 19947
// continue ;
19945: GO 19925
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19947: LD_VAR 0 11
19951: PPUSH
19952: LD_VAR 0 12
19956: PPUSH
19957: CALL_OW 351
19961: PUSH
19962: LD_VAR 0 11
19966: PPUSH
19967: LD_VAR 0 12
19971: PPUSH
19972: CALL_OW 554
19976: AND
19977: IFFALSE 20017
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19979: LD_ADDR_VAR 0 13
19983: PUSH
19984: LD_VAR 0 13
19988: PPUSH
19989: LD_VAR 0 13
19993: PUSH
19994: LD_INT 1
19996: PLUS
19997: PPUSH
19998: LD_VAR 0 11
20002: PUSH
20003: LD_VAR 0 12
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PPUSH
20012: CALL_OW 2
20016: ST_TO_ADDR
// end ;
20017: GO 19925
20019: POP
20020: POP
20021: GO 19905
20023: POP
20024: POP
// if not list then
20025: LD_VAR 0 13
20029: NOT
20030: IFFALSE 20034
// exit ;
20032: GO 20105
// for i in list do
20034: LD_ADDR_VAR 0 6
20038: PUSH
20039: LD_VAR 0 13
20043: PUSH
20044: FOR_IN
20045: IFFALSE 20103
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20047: LD_VAR 0 1
20051: PPUSH
20052: LD_STRING M
20054: PUSH
20055: LD_VAR 0 6
20059: PUSH
20060: LD_INT 1
20062: ARRAY
20063: PUSH
20064: LD_VAR 0 6
20068: PUSH
20069: LD_INT 2
20071: ARRAY
20072: PUSH
20073: LD_INT 0
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: LD_INT 0
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: PPUSH
20097: CALL_OW 447
20101: GO 20044
20103: POP
20104: POP
// end ;
20105: LD_VAR 0 5
20109: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20110: LD_EXP 84
20114: NOT
20115: IFFALSE 20165
20117: GO 20119
20119: DISABLE
// begin initHack := true ;
20120: LD_ADDR_EXP 84
20124: PUSH
20125: LD_INT 1
20127: ST_TO_ADDR
// hackTanks := [ ] ;
20128: LD_ADDR_EXP 85
20132: PUSH
20133: EMPTY
20134: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20135: LD_ADDR_EXP 86
20139: PUSH
20140: EMPTY
20141: ST_TO_ADDR
// hackLimit := 3 ;
20142: LD_ADDR_EXP 87
20146: PUSH
20147: LD_INT 3
20149: ST_TO_ADDR
// hackDist := 12 ;
20150: LD_ADDR_EXP 88
20154: PUSH
20155: LD_INT 12
20157: ST_TO_ADDR
// hackCounter := [ ] ;
20158: LD_ADDR_EXP 89
20162: PUSH
20163: EMPTY
20164: ST_TO_ADDR
// end ;
20165: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20166: LD_EXP 84
20170: PUSH
20171: LD_INT 34
20173: PUSH
20174: LD_EXP 16
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PPUSH
20183: CALL_OW 69
20187: AND
20188: IFFALSE 20443
20190: GO 20192
20192: DISABLE
20193: LD_INT 0
20195: PPUSH
20196: PPUSH
// begin enable ;
20197: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20198: LD_ADDR_VAR 0 1
20202: PUSH
20203: LD_INT 34
20205: PUSH
20206: LD_EXP 16
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PPUSH
20215: CALL_OW 69
20219: PUSH
20220: FOR_IN
20221: IFFALSE 20441
// begin if not i in hackTanks then
20223: LD_VAR 0 1
20227: PUSH
20228: LD_EXP 85
20232: IN
20233: NOT
20234: IFFALSE 20317
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20236: LD_ADDR_EXP 85
20240: PUSH
20241: LD_EXP 85
20245: PPUSH
20246: LD_EXP 85
20250: PUSH
20251: LD_INT 1
20253: PLUS
20254: PPUSH
20255: LD_VAR 0 1
20259: PPUSH
20260: CALL_OW 1
20264: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20265: LD_ADDR_EXP 86
20269: PUSH
20270: LD_EXP 86
20274: PPUSH
20275: LD_EXP 86
20279: PUSH
20280: LD_INT 1
20282: PLUS
20283: PPUSH
20284: EMPTY
20285: PPUSH
20286: CALL_OW 1
20290: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20291: LD_ADDR_EXP 89
20295: PUSH
20296: LD_EXP 89
20300: PPUSH
20301: LD_EXP 89
20305: PUSH
20306: LD_INT 1
20308: PLUS
20309: PPUSH
20310: EMPTY
20311: PPUSH
20312: CALL_OW 1
20316: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20317: LD_VAR 0 1
20321: PPUSH
20322: CALL_OW 302
20326: NOT
20327: IFFALSE 20340
// begin HackUnlinkAll ( i ) ;
20329: LD_VAR 0 1
20333: PPUSH
20334: CALL 20446 0 1
// continue ;
20338: GO 20220
// end ; HackCheckCapturedStatus ( i ) ;
20340: LD_VAR 0 1
20344: PPUSH
20345: CALL 20889 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20349: LD_ADDR_VAR 0 2
20353: PUSH
20354: LD_INT 81
20356: PUSH
20357: LD_VAR 0 1
20361: PPUSH
20362: CALL_OW 255
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 33
20373: PUSH
20374: LD_INT 3
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 91
20383: PUSH
20384: LD_VAR 0 1
20388: PUSH
20389: LD_EXP 88
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 50
20401: PUSH
20402: EMPTY
20403: LIST
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: PPUSH
20411: CALL_OW 69
20415: ST_TO_ADDR
// if not tmp then
20416: LD_VAR 0 2
20420: NOT
20421: IFFALSE 20425
// continue ;
20423: GO 20220
// HackLink ( i , tmp ) ;
20425: LD_VAR 0 1
20429: PPUSH
20430: LD_VAR 0 2
20434: PPUSH
20435: CALL 20582 0 2
// end ;
20439: GO 20220
20441: POP
20442: POP
// end ;
20443: PPOPN 2
20445: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20446: LD_INT 0
20448: PPUSH
20449: PPUSH
20450: PPUSH
// if not hack in hackTanks then
20451: LD_VAR 0 1
20455: PUSH
20456: LD_EXP 85
20460: IN
20461: NOT
20462: IFFALSE 20466
// exit ;
20464: GO 20577
// index := GetElementIndex ( hackTanks , hack ) ;
20466: LD_ADDR_VAR 0 4
20470: PUSH
20471: LD_EXP 85
20475: PPUSH
20476: LD_VAR 0 1
20480: PPUSH
20481: CALL 25997 0 2
20485: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20486: LD_EXP 86
20490: PUSH
20491: LD_VAR 0 4
20495: ARRAY
20496: IFFALSE 20577
// begin for i in hackTanksCaptured [ index ] do
20498: LD_ADDR_VAR 0 3
20502: PUSH
20503: LD_EXP 86
20507: PUSH
20508: LD_VAR 0 4
20512: ARRAY
20513: PUSH
20514: FOR_IN
20515: IFFALSE 20541
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20517: LD_VAR 0 3
20521: PUSH
20522: LD_INT 1
20524: ARRAY
20525: PPUSH
20526: LD_VAR 0 3
20530: PUSH
20531: LD_INT 2
20533: ARRAY
20534: PPUSH
20535: CALL_OW 235
20539: GO 20514
20541: POP
20542: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20543: LD_ADDR_EXP 86
20547: PUSH
20548: LD_EXP 86
20552: PPUSH
20553: LD_VAR 0 4
20557: PPUSH
20558: EMPTY
20559: PPUSH
20560: CALL_OW 1
20564: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20565: LD_VAR 0 1
20569: PPUSH
20570: LD_INT 0
20572: PPUSH
20573: CALL_OW 505
// end ; end ;
20577: LD_VAR 0 2
20581: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20582: LD_INT 0
20584: PPUSH
20585: PPUSH
20586: PPUSH
// if not hack in hackTanks or not vehicles then
20587: LD_VAR 0 1
20591: PUSH
20592: LD_EXP 85
20596: IN
20597: NOT
20598: PUSH
20599: LD_VAR 0 2
20603: NOT
20604: OR
20605: IFFALSE 20609
// exit ;
20607: GO 20884
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20609: LD_ADDR_VAR 0 2
20613: PUSH
20614: LD_VAR 0 1
20618: PPUSH
20619: LD_VAR 0 2
20623: PPUSH
20624: LD_INT 1
20626: PPUSH
20627: LD_INT 1
20629: PPUSH
20630: CALL 26647 0 4
20634: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20635: LD_ADDR_VAR 0 5
20639: PUSH
20640: LD_EXP 85
20644: PPUSH
20645: LD_VAR 0 1
20649: PPUSH
20650: CALL 25997 0 2
20654: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20655: LD_EXP 86
20659: PUSH
20660: LD_VAR 0 5
20664: ARRAY
20665: PUSH
20666: LD_EXP 87
20670: LESS
20671: IFFALSE 20860
// begin for i := 1 to vehicles do
20673: LD_ADDR_VAR 0 4
20677: PUSH
20678: DOUBLE
20679: LD_INT 1
20681: DEC
20682: ST_TO_ADDR
20683: LD_VAR 0 2
20687: PUSH
20688: FOR_TO
20689: IFFALSE 20858
// begin if hackTanksCaptured [ index ] = hackLimit then
20691: LD_EXP 86
20695: PUSH
20696: LD_VAR 0 5
20700: ARRAY
20701: PUSH
20702: LD_EXP 87
20706: EQUAL
20707: IFFALSE 20711
// break ;
20709: GO 20858
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20711: LD_ADDR_EXP 89
20715: PUSH
20716: LD_EXP 89
20720: PPUSH
20721: LD_VAR 0 5
20725: PPUSH
20726: LD_EXP 89
20730: PUSH
20731: LD_VAR 0 5
20735: ARRAY
20736: PUSH
20737: LD_INT 1
20739: PLUS
20740: PPUSH
20741: CALL_OW 1
20745: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20746: LD_ADDR_EXP 86
20750: PUSH
20751: LD_EXP 86
20755: PPUSH
20756: LD_VAR 0 5
20760: PUSH
20761: LD_EXP 86
20765: PUSH
20766: LD_VAR 0 5
20770: ARRAY
20771: PUSH
20772: LD_INT 1
20774: PLUS
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PPUSH
20780: LD_VAR 0 2
20784: PUSH
20785: LD_VAR 0 4
20789: ARRAY
20790: PUSH
20791: LD_VAR 0 2
20795: PUSH
20796: LD_VAR 0 4
20800: ARRAY
20801: PPUSH
20802: CALL_OW 255
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PPUSH
20811: CALL 26212 0 3
20815: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20816: LD_VAR 0 2
20820: PUSH
20821: LD_VAR 0 4
20825: ARRAY
20826: PPUSH
20827: LD_VAR 0 1
20831: PPUSH
20832: CALL_OW 255
20836: PPUSH
20837: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20841: LD_VAR 0 2
20845: PUSH
20846: LD_VAR 0 4
20850: ARRAY
20851: PPUSH
20852: CALL_OW 141
// end ;
20856: GO 20688
20858: POP
20859: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20860: LD_VAR 0 1
20864: PPUSH
20865: LD_EXP 86
20869: PUSH
20870: LD_VAR 0 5
20874: ARRAY
20875: PUSH
20876: LD_INT 0
20878: PLUS
20879: PPUSH
20880: CALL_OW 505
// end ;
20884: LD_VAR 0 3
20888: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20889: LD_INT 0
20891: PPUSH
20892: PPUSH
20893: PPUSH
20894: PPUSH
// if not hack in hackTanks then
20895: LD_VAR 0 1
20899: PUSH
20900: LD_EXP 85
20904: IN
20905: NOT
20906: IFFALSE 20910
// exit ;
20908: GO 21150
// index := GetElementIndex ( hackTanks , hack ) ;
20910: LD_ADDR_VAR 0 4
20914: PUSH
20915: LD_EXP 85
20919: PPUSH
20920: LD_VAR 0 1
20924: PPUSH
20925: CALL 25997 0 2
20929: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20930: LD_ADDR_VAR 0 3
20934: PUSH
20935: DOUBLE
20936: LD_EXP 86
20940: PUSH
20941: LD_VAR 0 4
20945: ARRAY
20946: INC
20947: ST_TO_ADDR
20948: LD_INT 1
20950: PUSH
20951: FOR_DOWNTO
20952: IFFALSE 21124
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20954: LD_ADDR_VAR 0 5
20958: PUSH
20959: LD_EXP 86
20963: PUSH
20964: LD_VAR 0 4
20968: ARRAY
20969: PUSH
20970: LD_VAR 0 3
20974: ARRAY
20975: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20976: LD_VAR 0 5
20980: PUSH
20981: LD_INT 1
20983: ARRAY
20984: PPUSH
20985: CALL_OW 302
20989: NOT
20990: PUSH
20991: LD_VAR 0 5
20995: PUSH
20996: LD_INT 1
20998: ARRAY
20999: PPUSH
21000: CALL_OW 255
21004: PUSH
21005: LD_VAR 0 1
21009: PPUSH
21010: CALL_OW 255
21014: NONEQUAL
21015: OR
21016: IFFALSE 21122
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21018: LD_VAR 0 5
21022: PUSH
21023: LD_INT 1
21025: ARRAY
21026: PPUSH
21027: CALL_OW 305
21031: PUSH
21032: LD_VAR 0 5
21036: PUSH
21037: LD_INT 1
21039: ARRAY
21040: PPUSH
21041: CALL_OW 255
21045: PUSH
21046: LD_VAR 0 1
21050: PPUSH
21051: CALL_OW 255
21055: EQUAL
21056: AND
21057: IFFALSE 21081
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21059: LD_VAR 0 5
21063: PUSH
21064: LD_INT 1
21066: ARRAY
21067: PPUSH
21068: LD_VAR 0 5
21072: PUSH
21073: LD_INT 2
21075: ARRAY
21076: PPUSH
21077: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21081: LD_ADDR_EXP 86
21085: PUSH
21086: LD_EXP 86
21090: PPUSH
21091: LD_VAR 0 4
21095: PPUSH
21096: LD_EXP 86
21100: PUSH
21101: LD_VAR 0 4
21105: ARRAY
21106: PPUSH
21107: LD_VAR 0 3
21111: PPUSH
21112: CALL_OW 3
21116: PPUSH
21117: CALL_OW 1
21121: ST_TO_ADDR
// end ; end ;
21122: GO 20951
21124: POP
21125: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21126: LD_VAR 0 1
21130: PPUSH
21131: LD_EXP 86
21135: PUSH
21136: LD_VAR 0 4
21140: ARRAY
21141: PUSH
21142: LD_INT 0
21144: PLUS
21145: PPUSH
21146: CALL_OW 505
// end ;
21150: LD_VAR 0 2
21154: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21155: LD_INT 0
21157: PPUSH
21158: PPUSH
21159: PPUSH
21160: PPUSH
// if not hack in hackTanks then
21161: LD_VAR 0 1
21165: PUSH
21166: LD_EXP 85
21170: IN
21171: NOT
21172: IFFALSE 21176
// exit ;
21174: GO 21261
// index := GetElementIndex ( hackTanks , hack ) ;
21176: LD_ADDR_VAR 0 5
21180: PUSH
21181: LD_EXP 85
21185: PPUSH
21186: LD_VAR 0 1
21190: PPUSH
21191: CALL 25997 0 2
21195: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21196: LD_ADDR_VAR 0 4
21200: PUSH
21201: DOUBLE
21202: LD_INT 1
21204: DEC
21205: ST_TO_ADDR
21206: LD_EXP 86
21210: PUSH
21211: LD_VAR 0 5
21215: ARRAY
21216: PUSH
21217: FOR_TO
21218: IFFALSE 21259
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21220: LD_EXP 86
21224: PUSH
21225: LD_VAR 0 5
21229: ARRAY
21230: PUSH
21231: LD_VAR 0 4
21235: ARRAY
21236: PUSH
21237: LD_INT 1
21239: ARRAY
21240: PUSH
21241: LD_VAR 0 2
21245: EQUAL
21246: IFFALSE 21257
// KillUnit ( vehicle ) ;
21248: LD_VAR 0 2
21252: PPUSH
21253: CALL_OW 66
21257: GO 21217
21259: POP
21260: POP
// end ; end_of_file
21261: LD_VAR 0 3
21265: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21266: LD_INT 0
21268: PPUSH
21269: PPUSH
// if exist_mode then
21270: LD_VAR 0 2
21274: IFFALSE 21299
// unit := CreateCharacter ( prefix & ident ) else
21276: LD_ADDR_VAR 0 5
21280: PUSH
21281: LD_VAR 0 3
21285: PUSH
21286: LD_VAR 0 1
21290: STR
21291: PPUSH
21292: CALL_OW 34
21296: ST_TO_ADDR
21297: GO 21314
// unit := NewCharacter ( ident ) ;
21299: LD_ADDR_VAR 0 5
21303: PUSH
21304: LD_VAR 0 1
21308: PPUSH
21309: CALL_OW 25
21313: ST_TO_ADDR
// result := unit ;
21314: LD_ADDR_VAR 0 4
21318: PUSH
21319: LD_VAR 0 5
21323: ST_TO_ADDR
// end ;
21324: LD_VAR 0 4
21328: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21329: LD_INT 0
21331: PPUSH
21332: PPUSH
// if not side or not nation then
21333: LD_VAR 0 1
21337: NOT
21338: PUSH
21339: LD_VAR 0 2
21343: NOT
21344: OR
21345: IFFALSE 21349
// exit ;
21347: GO 22113
// case nation of nation_american :
21349: LD_VAR 0 2
21353: PUSH
21354: LD_INT 1
21356: DOUBLE
21357: EQUAL
21358: IFTRUE 21362
21360: GO 21576
21362: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21363: LD_ADDR_VAR 0 4
21367: PUSH
21368: LD_INT 35
21370: PUSH
21371: LD_INT 45
21373: PUSH
21374: LD_INT 46
21376: PUSH
21377: LD_INT 47
21379: PUSH
21380: LD_INT 82
21382: PUSH
21383: LD_INT 83
21385: PUSH
21386: LD_INT 84
21388: PUSH
21389: LD_INT 85
21391: PUSH
21392: LD_INT 86
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: LD_INT 6
21403: PUSH
21404: LD_INT 15
21406: PUSH
21407: LD_INT 16
21409: PUSH
21410: LD_INT 7
21412: PUSH
21413: LD_INT 12
21415: PUSH
21416: LD_INT 13
21418: PUSH
21419: LD_INT 10
21421: PUSH
21422: LD_INT 14
21424: PUSH
21425: LD_INT 20
21427: PUSH
21428: LD_INT 21
21430: PUSH
21431: LD_INT 22
21433: PUSH
21434: LD_INT 25
21436: PUSH
21437: LD_INT 32
21439: PUSH
21440: LD_INT 27
21442: PUSH
21443: LD_INT 36
21445: PUSH
21446: LD_INT 69
21448: PUSH
21449: LD_INT 39
21451: PUSH
21452: LD_INT 34
21454: PUSH
21455: LD_INT 40
21457: PUSH
21458: LD_INT 48
21460: PUSH
21461: LD_INT 49
21463: PUSH
21464: LD_INT 50
21466: PUSH
21467: LD_INT 51
21469: PUSH
21470: LD_INT 52
21472: PUSH
21473: LD_INT 53
21475: PUSH
21476: LD_INT 54
21478: PUSH
21479: LD_INT 55
21481: PUSH
21482: LD_INT 56
21484: PUSH
21485: LD_INT 57
21487: PUSH
21488: LD_INT 58
21490: PUSH
21491: LD_INT 59
21493: PUSH
21494: LD_INT 60
21496: PUSH
21497: LD_INT 61
21499: PUSH
21500: LD_INT 62
21502: PUSH
21503: LD_INT 80
21505: PUSH
21506: LD_INT 82
21508: PUSH
21509: LD_INT 83
21511: PUSH
21512: LD_INT 84
21514: PUSH
21515: LD_INT 85
21517: PUSH
21518: LD_INT 86
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: ST_TO_ADDR
21574: GO 22037
21576: LD_INT 2
21578: DOUBLE
21579: EQUAL
21580: IFTRUE 21584
21582: GO 21806
21584: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21585: LD_ADDR_VAR 0 4
21589: PUSH
21590: LD_INT 35
21592: PUSH
21593: LD_INT 45
21595: PUSH
21596: LD_INT 46
21598: PUSH
21599: LD_INT 47
21601: PUSH
21602: LD_INT 82
21604: PUSH
21605: LD_INT 83
21607: PUSH
21608: LD_INT 84
21610: PUSH
21611: LD_INT 85
21613: PUSH
21614: LD_INT 87
21616: PUSH
21617: LD_INT 70
21619: PUSH
21620: LD_INT 1
21622: PUSH
21623: LD_INT 11
21625: PUSH
21626: LD_INT 3
21628: PUSH
21629: LD_INT 4
21631: PUSH
21632: LD_INT 5
21634: PUSH
21635: LD_INT 6
21637: PUSH
21638: LD_INT 15
21640: PUSH
21641: LD_INT 18
21643: PUSH
21644: LD_INT 7
21646: PUSH
21647: LD_INT 17
21649: PUSH
21650: LD_INT 8
21652: PUSH
21653: LD_INT 20
21655: PUSH
21656: LD_INT 21
21658: PUSH
21659: LD_INT 22
21661: PUSH
21662: LD_INT 72
21664: PUSH
21665: LD_INT 26
21667: PUSH
21668: LD_INT 69
21670: PUSH
21671: LD_INT 39
21673: PUSH
21674: LD_INT 40
21676: PUSH
21677: LD_INT 41
21679: PUSH
21680: LD_INT 42
21682: PUSH
21683: LD_INT 43
21685: PUSH
21686: LD_INT 48
21688: PUSH
21689: LD_INT 49
21691: PUSH
21692: LD_INT 50
21694: PUSH
21695: LD_INT 51
21697: PUSH
21698: LD_INT 52
21700: PUSH
21701: LD_INT 53
21703: PUSH
21704: LD_INT 54
21706: PUSH
21707: LD_INT 55
21709: PUSH
21710: LD_INT 56
21712: PUSH
21713: LD_INT 60
21715: PUSH
21716: LD_INT 61
21718: PUSH
21719: LD_INT 62
21721: PUSH
21722: LD_INT 66
21724: PUSH
21725: LD_INT 67
21727: PUSH
21728: LD_INT 68
21730: PUSH
21731: LD_INT 81
21733: PUSH
21734: LD_INT 82
21736: PUSH
21737: LD_INT 83
21739: PUSH
21740: LD_INT 84
21742: PUSH
21743: LD_INT 85
21745: PUSH
21746: LD_INT 87
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: ST_TO_ADDR
21804: GO 22037
21806: LD_INT 3
21808: DOUBLE
21809: EQUAL
21810: IFTRUE 21814
21812: GO 22036
21814: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21815: LD_ADDR_VAR 0 4
21819: PUSH
21820: LD_INT 46
21822: PUSH
21823: LD_INT 47
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 2
21831: PUSH
21832: LD_INT 82
21834: PUSH
21835: LD_INT 83
21837: PUSH
21838: LD_INT 84
21840: PUSH
21841: LD_INT 85
21843: PUSH
21844: LD_INT 86
21846: PUSH
21847: LD_INT 11
21849: PUSH
21850: LD_INT 9
21852: PUSH
21853: LD_INT 20
21855: PUSH
21856: LD_INT 19
21858: PUSH
21859: LD_INT 21
21861: PUSH
21862: LD_INT 24
21864: PUSH
21865: LD_INT 22
21867: PUSH
21868: LD_INT 25
21870: PUSH
21871: LD_INT 28
21873: PUSH
21874: LD_INT 29
21876: PUSH
21877: LD_INT 30
21879: PUSH
21880: LD_INT 31
21882: PUSH
21883: LD_INT 37
21885: PUSH
21886: LD_INT 38
21888: PUSH
21889: LD_INT 32
21891: PUSH
21892: LD_INT 27
21894: PUSH
21895: LD_INT 33
21897: PUSH
21898: LD_INT 69
21900: PUSH
21901: LD_INT 39
21903: PUSH
21904: LD_INT 34
21906: PUSH
21907: LD_INT 40
21909: PUSH
21910: LD_INT 71
21912: PUSH
21913: LD_INT 23
21915: PUSH
21916: LD_INT 44
21918: PUSH
21919: LD_INT 48
21921: PUSH
21922: LD_INT 49
21924: PUSH
21925: LD_INT 50
21927: PUSH
21928: LD_INT 51
21930: PUSH
21931: LD_INT 52
21933: PUSH
21934: LD_INT 53
21936: PUSH
21937: LD_INT 54
21939: PUSH
21940: LD_INT 55
21942: PUSH
21943: LD_INT 56
21945: PUSH
21946: LD_INT 57
21948: PUSH
21949: LD_INT 58
21951: PUSH
21952: LD_INT 59
21954: PUSH
21955: LD_INT 63
21957: PUSH
21958: LD_INT 64
21960: PUSH
21961: LD_INT 65
21963: PUSH
21964: LD_INT 82
21966: PUSH
21967: LD_INT 83
21969: PUSH
21970: LD_INT 84
21972: PUSH
21973: LD_INT 85
21975: PUSH
21976: LD_INT 86
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: ST_TO_ADDR
22034: GO 22037
22036: POP
// if state > - 1 and state < 3 then
22037: LD_VAR 0 3
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: GREATER
22046: PUSH
22047: LD_VAR 0 3
22051: PUSH
22052: LD_INT 3
22054: LESS
22055: AND
22056: IFFALSE 22113
// for i in result do
22058: LD_ADDR_VAR 0 5
22062: PUSH
22063: LD_VAR 0 4
22067: PUSH
22068: FOR_IN
22069: IFFALSE 22111
// if GetTech ( i , side ) <> state then
22071: LD_VAR 0 5
22075: PPUSH
22076: LD_VAR 0 1
22080: PPUSH
22081: CALL_OW 321
22085: PUSH
22086: LD_VAR 0 3
22090: NONEQUAL
22091: IFFALSE 22109
// result := result diff i ;
22093: LD_ADDR_VAR 0 4
22097: PUSH
22098: LD_VAR 0 4
22102: PUSH
22103: LD_VAR 0 5
22107: DIFF
22108: ST_TO_ADDR
22109: GO 22068
22111: POP
22112: POP
// end ;
22113: LD_VAR 0 4
22117: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22118: LD_INT 0
22120: PPUSH
22121: PPUSH
22122: PPUSH
// result := true ;
22123: LD_ADDR_VAR 0 3
22127: PUSH
22128: LD_INT 1
22130: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22131: LD_ADDR_VAR 0 5
22135: PUSH
22136: LD_VAR 0 2
22140: PPUSH
22141: CALL_OW 480
22145: ST_TO_ADDR
// if not tmp then
22146: LD_VAR 0 5
22150: NOT
22151: IFFALSE 22155
// exit ;
22153: GO 22204
// for i in tmp do
22155: LD_ADDR_VAR 0 4
22159: PUSH
22160: LD_VAR 0 5
22164: PUSH
22165: FOR_IN
22166: IFFALSE 22202
// if GetTech ( i , side ) <> state_researched then
22168: LD_VAR 0 4
22172: PPUSH
22173: LD_VAR 0 1
22177: PPUSH
22178: CALL_OW 321
22182: PUSH
22183: LD_INT 2
22185: NONEQUAL
22186: IFFALSE 22200
// begin result := false ;
22188: LD_ADDR_VAR 0 3
22192: PUSH
22193: LD_INT 0
22195: ST_TO_ADDR
// exit ;
22196: POP
22197: POP
22198: GO 22204
// end ;
22200: GO 22165
22202: POP
22203: POP
// end ;
22204: LD_VAR 0 3
22208: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22209: LD_INT 0
22211: PPUSH
22212: PPUSH
22213: PPUSH
22214: PPUSH
22215: PPUSH
22216: PPUSH
22217: PPUSH
22218: PPUSH
22219: PPUSH
22220: PPUSH
22221: PPUSH
22222: PPUSH
22223: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22224: LD_VAR 0 1
22228: NOT
22229: PUSH
22230: LD_VAR 0 1
22234: PPUSH
22235: CALL_OW 257
22239: PUSH
22240: LD_INT 9
22242: NONEQUAL
22243: OR
22244: IFFALSE 22248
// exit ;
22246: GO 22821
// side := GetSide ( unit ) ;
22248: LD_ADDR_VAR 0 9
22252: PUSH
22253: LD_VAR 0 1
22257: PPUSH
22258: CALL_OW 255
22262: ST_TO_ADDR
// tech_space := tech_spacanom ;
22263: LD_ADDR_VAR 0 12
22267: PUSH
22268: LD_INT 29
22270: ST_TO_ADDR
// tech_time := tech_taurad ;
22271: LD_ADDR_VAR 0 13
22275: PUSH
22276: LD_INT 28
22278: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22279: LD_ADDR_VAR 0 11
22283: PUSH
22284: LD_VAR 0 1
22288: PPUSH
22289: CALL_OW 310
22293: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22294: LD_VAR 0 11
22298: PPUSH
22299: CALL_OW 247
22303: PUSH
22304: LD_INT 2
22306: EQUAL
22307: IFFALSE 22311
// exit ;
22309: GO 22821
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22311: LD_ADDR_VAR 0 8
22315: PUSH
22316: LD_INT 81
22318: PUSH
22319: LD_VAR 0 9
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 3
22330: PUSH
22331: LD_INT 21
22333: PUSH
22334: LD_INT 3
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PPUSH
22349: CALL_OW 69
22353: ST_TO_ADDR
// if not tmp then
22354: LD_VAR 0 8
22358: NOT
22359: IFFALSE 22363
// exit ;
22361: GO 22821
// if in_unit then
22363: LD_VAR 0 11
22367: IFFALSE 22391
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22369: LD_ADDR_VAR 0 10
22373: PUSH
22374: LD_VAR 0 8
22378: PPUSH
22379: LD_VAR 0 11
22383: PPUSH
22384: CALL_OW 74
22388: ST_TO_ADDR
22389: GO 22411
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22391: LD_ADDR_VAR 0 10
22395: PUSH
22396: LD_VAR 0 8
22400: PPUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 74
22410: ST_TO_ADDR
// if not enemy then
22411: LD_VAR 0 10
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22821
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22420: LD_VAR 0 11
22424: PUSH
22425: LD_VAR 0 11
22429: PPUSH
22430: LD_VAR 0 10
22434: PPUSH
22435: CALL_OW 296
22439: PUSH
22440: LD_INT 13
22442: GREATER
22443: AND
22444: PUSH
22445: LD_VAR 0 1
22449: PPUSH
22450: LD_VAR 0 10
22454: PPUSH
22455: CALL_OW 296
22459: PUSH
22460: LD_INT 12
22462: GREATER
22463: OR
22464: IFFALSE 22468
// exit ;
22466: GO 22821
// missile := [ 1 ] ;
22468: LD_ADDR_VAR 0 14
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: EMPTY
22477: LIST
22478: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22479: LD_VAR 0 9
22483: PPUSH
22484: LD_VAR 0 12
22488: PPUSH
22489: CALL_OW 325
22493: IFFALSE 22522
// missile := Insert ( missile , missile + 1 , 2 ) ;
22495: LD_ADDR_VAR 0 14
22499: PUSH
22500: LD_VAR 0 14
22504: PPUSH
22505: LD_VAR 0 14
22509: PUSH
22510: LD_INT 1
22512: PLUS
22513: PPUSH
22514: LD_INT 2
22516: PPUSH
22517: CALL_OW 2
22521: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22522: LD_VAR 0 9
22526: PPUSH
22527: LD_VAR 0 13
22531: PPUSH
22532: CALL_OW 325
22536: PUSH
22537: LD_VAR 0 10
22541: PPUSH
22542: CALL_OW 255
22546: PPUSH
22547: LD_VAR 0 13
22551: PPUSH
22552: CALL_OW 325
22556: NOT
22557: AND
22558: IFFALSE 22587
// missile := Insert ( missile , missile + 1 , 3 ) ;
22560: LD_ADDR_VAR 0 14
22564: PUSH
22565: LD_VAR 0 14
22569: PPUSH
22570: LD_VAR 0 14
22574: PUSH
22575: LD_INT 1
22577: PLUS
22578: PPUSH
22579: LD_INT 3
22581: PPUSH
22582: CALL_OW 2
22586: ST_TO_ADDR
// if missile < 2 then
22587: LD_VAR 0 14
22591: PUSH
22592: LD_INT 2
22594: LESS
22595: IFFALSE 22599
// exit ;
22597: GO 22821
// x := GetX ( enemy ) ;
22599: LD_ADDR_VAR 0 4
22603: PUSH
22604: LD_VAR 0 10
22608: PPUSH
22609: CALL_OW 250
22613: ST_TO_ADDR
// y := GetY ( enemy ) ;
22614: LD_ADDR_VAR 0 5
22618: PUSH
22619: LD_VAR 0 10
22623: PPUSH
22624: CALL_OW 251
22628: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22629: LD_ADDR_VAR 0 6
22633: PUSH
22634: LD_VAR 0 4
22638: PUSH
22639: LD_INT 1
22641: NEG
22642: PPUSH
22643: LD_INT 1
22645: PPUSH
22646: CALL_OW 12
22650: PLUS
22651: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22652: LD_ADDR_VAR 0 7
22656: PUSH
22657: LD_VAR 0 5
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PPUSH
22666: LD_INT 1
22668: PPUSH
22669: CALL_OW 12
22673: PLUS
22674: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22675: LD_VAR 0 6
22679: PPUSH
22680: LD_VAR 0 7
22684: PPUSH
22685: CALL_OW 488
22689: NOT
22690: IFFALSE 22712
// begin _x := x ;
22692: LD_ADDR_VAR 0 6
22696: PUSH
22697: LD_VAR 0 4
22701: ST_TO_ADDR
// _y := y ;
22702: LD_ADDR_VAR 0 7
22706: PUSH
22707: LD_VAR 0 5
22711: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22712: LD_ADDR_VAR 0 3
22716: PUSH
22717: LD_INT 1
22719: PPUSH
22720: LD_VAR 0 14
22724: PPUSH
22725: CALL_OW 12
22729: ST_TO_ADDR
// case i of 1 :
22730: LD_VAR 0 3
22734: PUSH
22735: LD_INT 1
22737: DOUBLE
22738: EQUAL
22739: IFTRUE 22743
22741: GO 22760
22743: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22744: LD_VAR 0 1
22748: PPUSH
22749: LD_VAR 0 10
22753: PPUSH
22754: CALL_OW 115
22758: GO 22821
22760: LD_INT 2
22762: DOUBLE
22763: EQUAL
22764: IFTRUE 22768
22766: GO 22790
22768: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22769: LD_VAR 0 1
22773: PPUSH
22774: LD_VAR 0 6
22778: PPUSH
22779: LD_VAR 0 7
22783: PPUSH
22784: CALL_OW 153
22788: GO 22821
22790: LD_INT 3
22792: DOUBLE
22793: EQUAL
22794: IFTRUE 22798
22796: GO 22820
22798: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22799: LD_VAR 0 1
22803: PPUSH
22804: LD_VAR 0 6
22808: PPUSH
22809: LD_VAR 0 7
22813: PPUSH
22814: CALL_OW 154
22818: GO 22821
22820: POP
// end ;
22821: LD_VAR 0 2
22825: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22826: LD_INT 0
22828: PPUSH
22829: PPUSH
22830: PPUSH
22831: PPUSH
22832: PPUSH
22833: PPUSH
// if not unit or not building then
22834: LD_VAR 0 1
22838: NOT
22839: PUSH
22840: LD_VAR 0 2
22844: NOT
22845: OR
22846: IFFALSE 22850
// exit ;
22848: GO 23008
// x := GetX ( building ) ;
22850: LD_ADDR_VAR 0 5
22854: PUSH
22855: LD_VAR 0 2
22859: PPUSH
22860: CALL_OW 250
22864: ST_TO_ADDR
// y := GetY ( building ) ;
22865: LD_ADDR_VAR 0 6
22869: PUSH
22870: LD_VAR 0 2
22874: PPUSH
22875: CALL_OW 251
22879: ST_TO_ADDR
// for i = 0 to 5 do
22880: LD_ADDR_VAR 0 4
22884: PUSH
22885: DOUBLE
22886: LD_INT 0
22888: DEC
22889: ST_TO_ADDR
22890: LD_INT 5
22892: PUSH
22893: FOR_TO
22894: IFFALSE 23006
// begin _x := ShiftX ( x , i , 3 ) ;
22896: LD_ADDR_VAR 0 7
22900: PUSH
22901: LD_VAR 0 5
22905: PPUSH
22906: LD_VAR 0 4
22910: PPUSH
22911: LD_INT 3
22913: PPUSH
22914: CALL_OW 272
22918: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22919: LD_ADDR_VAR 0 8
22923: PUSH
22924: LD_VAR 0 6
22928: PPUSH
22929: LD_VAR 0 4
22933: PPUSH
22934: LD_INT 3
22936: PPUSH
22937: CALL_OW 273
22941: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22942: LD_VAR 0 7
22946: PPUSH
22947: LD_VAR 0 8
22951: PPUSH
22952: CALL_OW 488
22956: NOT
22957: IFFALSE 22961
// continue ;
22959: GO 22893
// if HexInfo ( _x , _y ) = 0 then
22961: LD_VAR 0 7
22965: PPUSH
22966: LD_VAR 0 8
22970: PPUSH
22971: CALL_OW 428
22975: PUSH
22976: LD_INT 0
22978: EQUAL
22979: IFFALSE 23004
// begin ComMoveXY ( unit , _x , _y ) ;
22981: LD_VAR 0 1
22985: PPUSH
22986: LD_VAR 0 7
22990: PPUSH
22991: LD_VAR 0 8
22995: PPUSH
22996: CALL_OW 111
// exit ;
23000: POP
23001: POP
23002: GO 23008
// end ; end ;
23004: GO 22893
23006: POP
23007: POP
// end ;
23008: LD_VAR 0 3
23012: RET
// export function ScanBase ( side , base_area ) ; begin
23013: LD_INT 0
23015: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23016: LD_ADDR_VAR 0 3
23020: PUSH
23021: LD_VAR 0 2
23025: PPUSH
23026: LD_INT 81
23028: PUSH
23029: LD_VAR 0 1
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PPUSH
23038: CALL_OW 70
23042: ST_TO_ADDR
// end ;
23043: LD_VAR 0 3
23047: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23048: LD_INT 0
23050: PPUSH
23051: PPUSH
23052: PPUSH
23053: PPUSH
// result := false ;
23054: LD_ADDR_VAR 0 2
23058: PUSH
23059: LD_INT 0
23061: ST_TO_ADDR
// side := GetSide ( unit ) ;
23062: LD_ADDR_VAR 0 3
23066: PUSH
23067: LD_VAR 0 1
23071: PPUSH
23072: CALL_OW 255
23076: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23077: LD_ADDR_VAR 0 4
23081: PUSH
23082: LD_VAR 0 1
23086: PPUSH
23087: CALL_OW 248
23091: ST_TO_ADDR
// case nat of 1 :
23092: LD_VAR 0 4
23096: PUSH
23097: LD_INT 1
23099: DOUBLE
23100: EQUAL
23101: IFTRUE 23105
23103: GO 23116
23105: POP
// tech := tech_lassight ; 2 :
23106: LD_ADDR_VAR 0 5
23110: PUSH
23111: LD_INT 12
23113: ST_TO_ADDR
23114: GO 23155
23116: LD_INT 2
23118: DOUBLE
23119: EQUAL
23120: IFTRUE 23124
23122: GO 23135
23124: POP
// tech := tech_mortar ; 3 :
23125: LD_ADDR_VAR 0 5
23129: PUSH
23130: LD_INT 41
23132: ST_TO_ADDR
23133: GO 23155
23135: LD_INT 3
23137: DOUBLE
23138: EQUAL
23139: IFTRUE 23143
23141: GO 23154
23143: POP
// tech := tech_bazooka ; end ;
23144: LD_ADDR_VAR 0 5
23148: PUSH
23149: LD_INT 44
23151: ST_TO_ADDR
23152: GO 23155
23154: POP
// if Researched ( side , tech ) then
23155: LD_VAR 0 3
23159: PPUSH
23160: LD_VAR 0 5
23164: PPUSH
23165: CALL_OW 325
23169: IFFALSE 23196
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23171: LD_ADDR_VAR 0 2
23175: PUSH
23176: LD_INT 5
23178: PUSH
23179: LD_INT 8
23181: PUSH
23182: LD_INT 9
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: PUSH
23190: LD_VAR 0 4
23194: ARRAY
23195: ST_TO_ADDR
// end ;
23196: LD_VAR 0 2
23200: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23201: LD_INT 0
23203: PPUSH
23204: PPUSH
23205: PPUSH
// if not mines then
23206: LD_VAR 0 2
23210: NOT
23211: IFFALSE 23215
// exit ;
23213: GO 23359
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23215: LD_ADDR_VAR 0 5
23219: PUSH
23220: LD_INT 81
23222: PUSH
23223: LD_VAR 0 1
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 3
23234: PUSH
23235: LD_INT 21
23237: PUSH
23238: LD_INT 3
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PPUSH
23253: CALL_OW 69
23257: ST_TO_ADDR
// for i in mines do
23258: LD_ADDR_VAR 0 4
23262: PUSH
23263: LD_VAR 0 2
23267: PUSH
23268: FOR_IN
23269: IFFALSE 23357
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23271: LD_VAR 0 4
23275: PUSH
23276: LD_INT 1
23278: ARRAY
23279: PPUSH
23280: LD_VAR 0 4
23284: PUSH
23285: LD_INT 2
23287: ARRAY
23288: PPUSH
23289: CALL_OW 458
23293: NOT
23294: IFFALSE 23298
// continue ;
23296: GO 23268
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23298: LD_VAR 0 4
23302: PUSH
23303: LD_INT 1
23305: ARRAY
23306: PPUSH
23307: LD_VAR 0 4
23311: PUSH
23312: LD_INT 2
23314: ARRAY
23315: PPUSH
23316: CALL_OW 428
23320: PUSH
23321: LD_VAR 0 5
23325: IN
23326: IFFALSE 23355
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23328: LD_VAR 0 4
23332: PUSH
23333: LD_INT 1
23335: ARRAY
23336: PPUSH
23337: LD_VAR 0 4
23341: PUSH
23342: LD_INT 2
23344: ARRAY
23345: PPUSH
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 456
// end ;
23355: GO 23268
23357: POP
23358: POP
// end ;
23359: LD_VAR 0 3
23363: RET
// export function Count ( array ) ; var i ; begin
23364: LD_INT 0
23366: PPUSH
23367: PPUSH
// result := 0 ;
23368: LD_ADDR_VAR 0 2
23372: PUSH
23373: LD_INT 0
23375: ST_TO_ADDR
// for i in array do
23376: LD_ADDR_VAR 0 3
23380: PUSH
23381: LD_VAR 0 1
23385: PUSH
23386: FOR_IN
23387: IFFALSE 23411
// if i then
23389: LD_VAR 0 3
23393: IFFALSE 23409
// result := result + 1 ;
23395: LD_ADDR_VAR 0 2
23399: PUSH
23400: LD_VAR 0 2
23404: PUSH
23405: LD_INT 1
23407: PLUS
23408: ST_TO_ADDR
23409: GO 23386
23411: POP
23412: POP
// end ;
23413: LD_VAR 0 2
23417: RET
// export function IsEmpty ( building ) ; begin
23418: LD_INT 0
23420: PPUSH
// if not building then
23421: LD_VAR 0 1
23425: NOT
23426: IFFALSE 23430
// exit ;
23428: GO 23473
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23430: LD_ADDR_VAR 0 2
23434: PUSH
23435: LD_VAR 0 1
23439: PUSH
23440: LD_INT 22
23442: PUSH
23443: LD_VAR 0 1
23447: PPUSH
23448: CALL_OW 255
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 58
23459: PUSH
23460: EMPTY
23461: LIST
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PPUSH
23467: CALL_OW 69
23471: IN
23472: ST_TO_ADDR
// end ;
23473: LD_VAR 0 2
23477: RET
// export function IsNotFull ( building ) ; begin
23478: LD_INT 0
23480: PPUSH
// if not building then
23481: LD_VAR 0 1
23485: NOT
23486: IFFALSE 23490
// exit ;
23488: GO 23509
// result := UnitsInside ( building ) < 6 ;
23490: LD_ADDR_VAR 0 2
23494: PUSH
23495: LD_VAR 0 1
23499: PPUSH
23500: CALL_OW 313
23504: PUSH
23505: LD_INT 6
23507: LESS
23508: ST_TO_ADDR
// end ;
23509: LD_VAR 0 2
23513: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23514: LD_INT 0
23516: PPUSH
23517: PPUSH
23518: PPUSH
23519: PPUSH
// tmp := [ ] ;
23520: LD_ADDR_VAR 0 3
23524: PUSH
23525: EMPTY
23526: ST_TO_ADDR
// list := [ ] ;
23527: LD_ADDR_VAR 0 5
23531: PUSH
23532: EMPTY
23533: ST_TO_ADDR
// for i = 16 to 25 do
23534: LD_ADDR_VAR 0 4
23538: PUSH
23539: DOUBLE
23540: LD_INT 16
23542: DEC
23543: ST_TO_ADDR
23544: LD_INT 25
23546: PUSH
23547: FOR_TO
23548: IFFALSE 23621
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23550: LD_ADDR_VAR 0 3
23554: PUSH
23555: LD_VAR 0 3
23559: PUSH
23560: LD_INT 22
23562: PUSH
23563: LD_VAR 0 1
23567: PPUSH
23568: CALL_OW 255
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 91
23579: PUSH
23580: LD_VAR 0 1
23584: PUSH
23585: LD_INT 6
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 30
23595: PUSH
23596: LD_VAR 0 4
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: LIST
23609: PUSH
23610: EMPTY
23611: LIST
23612: PPUSH
23613: CALL_OW 69
23617: ADD
23618: ST_TO_ADDR
23619: GO 23547
23621: POP
23622: POP
// for i = 1 to tmp do
23623: LD_ADDR_VAR 0 4
23627: PUSH
23628: DOUBLE
23629: LD_INT 1
23631: DEC
23632: ST_TO_ADDR
23633: LD_VAR 0 3
23637: PUSH
23638: FOR_TO
23639: IFFALSE 23727
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23641: LD_ADDR_VAR 0 5
23645: PUSH
23646: LD_VAR 0 5
23650: PUSH
23651: LD_VAR 0 3
23655: PUSH
23656: LD_VAR 0 4
23660: ARRAY
23661: PPUSH
23662: CALL_OW 266
23666: PUSH
23667: LD_VAR 0 3
23671: PUSH
23672: LD_VAR 0 4
23676: ARRAY
23677: PPUSH
23678: CALL_OW 250
23682: PUSH
23683: LD_VAR 0 3
23687: PUSH
23688: LD_VAR 0 4
23692: ARRAY
23693: PPUSH
23694: CALL_OW 251
23698: PUSH
23699: LD_VAR 0 3
23703: PUSH
23704: LD_VAR 0 4
23708: ARRAY
23709: PPUSH
23710: CALL_OW 254
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: PUSH
23721: EMPTY
23722: LIST
23723: ADD
23724: ST_TO_ADDR
23725: GO 23638
23727: POP
23728: POP
// result := list ;
23729: LD_ADDR_VAR 0 2
23733: PUSH
23734: LD_VAR 0 5
23738: ST_TO_ADDR
// end ;
23739: LD_VAR 0 2
23743: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23744: LD_INT 0
23746: PPUSH
23747: PPUSH
23748: PPUSH
23749: PPUSH
23750: PPUSH
23751: PPUSH
23752: PPUSH
// if not factory then
23753: LD_VAR 0 1
23757: NOT
23758: IFFALSE 23762
// exit ;
23760: GO 24355
// if control = control_apeman then
23762: LD_VAR 0 4
23766: PUSH
23767: LD_INT 5
23769: EQUAL
23770: IFFALSE 23879
// begin tmp := UnitsInside ( factory ) ;
23772: LD_ADDR_VAR 0 8
23776: PUSH
23777: LD_VAR 0 1
23781: PPUSH
23782: CALL_OW 313
23786: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23787: LD_VAR 0 8
23791: PPUSH
23792: LD_INT 25
23794: PUSH
23795: LD_INT 12
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PPUSH
23802: CALL_OW 72
23806: NOT
23807: IFFALSE 23817
// control := control_manual ;
23809: LD_ADDR_VAR 0 4
23813: PUSH
23814: LD_INT 1
23816: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23817: LD_ADDR_VAR 0 8
23821: PUSH
23822: LD_VAR 0 1
23826: PPUSH
23827: CALL 23514 0 1
23831: ST_TO_ADDR
// if tmp then
23832: LD_VAR 0 8
23836: IFFALSE 23879
// begin for i in tmp do
23838: LD_ADDR_VAR 0 7
23842: PUSH
23843: LD_VAR 0 8
23847: PUSH
23848: FOR_IN
23849: IFFALSE 23877
// if i [ 1 ] = b_ext_radio then
23851: LD_VAR 0 7
23855: PUSH
23856: LD_INT 1
23858: ARRAY
23859: PUSH
23860: LD_INT 22
23862: EQUAL
23863: IFFALSE 23875
// begin control := control_remote ;
23865: LD_ADDR_VAR 0 4
23869: PUSH
23870: LD_INT 2
23872: ST_TO_ADDR
// break ;
23873: GO 23877
// end ;
23875: GO 23848
23877: POP
23878: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23879: LD_VAR 0 1
23883: PPUSH
23884: LD_VAR 0 2
23888: PPUSH
23889: LD_VAR 0 3
23893: PPUSH
23894: LD_VAR 0 4
23898: PPUSH
23899: LD_VAR 0 5
23903: PPUSH
23904: CALL_OW 448
23908: IFFALSE 23943
// begin result := [ chassis , engine , control , weapon ] ;
23910: LD_ADDR_VAR 0 6
23914: PUSH
23915: LD_VAR 0 2
23919: PUSH
23920: LD_VAR 0 3
23924: PUSH
23925: LD_VAR 0 4
23929: PUSH
23930: LD_VAR 0 5
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: ST_TO_ADDR
// exit ;
23941: GO 24355
// end ; _chassis := AvailableChassisList ( factory ) ;
23943: LD_ADDR_VAR 0 9
23947: PUSH
23948: LD_VAR 0 1
23952: PPUSH
23953: CALL_OW 475
23957: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23958: LD_ADDR_VAR 0 11
23962: PUSH
23963: LD_VAR 0 1
23967: PPUSH
23968: CALL_OW 476
23972: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23973: LD_ADDR_VAR 0 12
23977: PUSH
23978: LD_VAR 0 1
23982: PPUSH
23983: CALL_OW 477
23987: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23988: LD_ADDR_VAR 0 10
23992: PUSH
23993: LD_VAR 0 1
23997: PPUSH
23998: CALL_OW 478
24002: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24003: LD_VAR 0 9
24007: NOT
24008: PUSH
24009: LD_VAR 0 11
24013: NOT
24014: OR
24015: PUSH
24016: LD_VAR 0 12
24020: NOT
24021: OR
24022: PUSH
24023: LD_VAR 0 10
24027: NOT
24028: OR
24029: IFFALSE 24064
// begin result := [ chassis , engine , control , weapon ] ;
24031: LD_ADDR_VAR 0 6
24035: PUSH
24036: LD_VAR 0 2
24040: PUSH
24041: LD_VAR 0 3
24045: PUSH
24046: LD_VAR 0 4
24050: PUSH
24051: LD_VAR 0 5
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: ST_TO_ADDR
// exit ;
24062: GO 24355
// end ; if not chassis in _chassis then
24064: LD_VAR 0 2
24068: PUSH
24069: LD_VAR 0 9
24073: IN
24074: NOT
24075: IFFALSE 24101
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24077: LD_ADDR_VAR 0 2
24081: PUSH
24082: LD_VAR 0 9
24086: PUSH
24087: LD_INT 1
24089: PPUSH
24090: LD_VAR 0 9
24094: PPUSH
24095: CALL_OW 12
24099: ARRAY
24100: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24101: LD_VAR 0 2
24105: PPUSH
24106: LD_VAR 0 3
24110: PPUSH
24111: CALL 24360 0 2
24115: NOT
24116: IFFALSE 24175
// repeat engine := _engine [ 1 ] ;
24118: LD_ADDR_VAR 0 3
24122: PUSH
24123: LD_VAR 0 11
24127: PUSH
24128: LD_INT 1
24130: ARRAY
24131: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24132: LD_ADDR_VAR 0 11
24136: PUSH
24137: LD_VAR 0 11
24141: PPUSH
24142: LD_INT 1
24144: PPUSH
24145: CALL_OW 3
24149: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24150: LD_VAR 0 2
24154: PPUSH
24155: LD_VAR 0 3
24159: PPUSH
24160: CALL 24360 0 2
24164: PUSH
24165: LD_VAR 0 11
24169: PUSH
24170: EMPTY
24171: EQUAL
24172: OR
24173: IFFALSE 24118
// if not control in _control then
24175: LD_VAR 0 4
24179: PUSH
24180: LD_VAR 0 12
24184: IN
24185: NOT
24186: IFFALSE 24212
// control := _control [ rand ( 1 , _control ) ] ;
24188: LD_ADDR_VAR 0 4
24192: PUSH
24193: LD_VAR 0 12
24197: PUSH
24198: LD_INT 1
24200: PPUSH
24201: LD_VAR 0 12
24205: PPUSH
24206: CALL_OW 12
24210: ARRAY
24211: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24212: LD_VAR 0 2
24216: PPUSH
24217: LD_VAR 0 5
24221: PPUSH
24222: CALL 24580 0 2
24226: NOT
24227: IFFALSE 24286
// repeat weapon := _weapon [ 1 ] ;
24229: LD_ADDR_VAR 0 5
24233: PUSH
24234: LD_VAR 0 10
24238: PUSH
24239: LD_INT 1
24241: ARRAY
24242: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24243: LD_ADDR_VAR 0 10
24247: PUSH
24248: LD_VAR 0 10
24252: PPUSH
24253: LD_INT 1
24255: PPUSH
24256: CALL_OW 3
24260: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24261: LD_VAR 0 2
24265: PPUSH
24266: LD_VAR 0 5
24270: PPUSH
24271: CALL 24580 0 2
24275: PUSH
24276: LD_VAR 0 10
24280: PUSH
24281: EMPTY
24282: EQUAL
24283: OR
24284: IFFALSE 24229
// result := [ ] ;
24286: LD_ADDR_VAR 0 6
24290: PUSH
24291: EMPTY
24292: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24293: LD_VAR 0 1
24297: PPUSH
24298: LD_VAR 0 2
24302: PPUSH
24303: LD_VAR 0 3
24307: PPUSH
24308: LD_VAR 0 4
24312: PPUSH
24313: LD_VAR 0 5
24317: PPUSH
24318: CALL_OW 448
24322: IFFALSE 24355
// result := [ chassis , engine , control , weapon ] ;
24324: LD_ADDR_VAR 0 6
24328: PUSH
24329: LD_VAR 0 2
24333: PUSH
24334: LD_VAR 0 3
24338: PUSH
24339: LD_VAR 0 4
24343: PUSH
24344: LD_VAR 0 5
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: ST_TO_ADDR
// end ;
24355: LD_VAR 0 6
24359: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24360: LD_INT 0
24362: PPUSH
// if not chassis or not engine then
24363: LD_VAR 0 1
24367: NOT
24368: PUSH
24369: LD_VAR 0 2
24373: NOT
24374: OR
24375: IFFALSE 24379
// exit ;
24377: GO 24575
// case engine of engine_solar :
24379: LD_VAR 0 2
24383: PUSH
24384: LD_INT 2
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24430
24392: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24393: LD_ADDR_VAR 0 3
24397: PUSH
24398: LD_INT 11
24400: PUSH
24401: LD_INT 12
24403: PUSH
24404: LD_INT 13
24406: PUSH
24407: LD_INT 14
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: LD_INT 3
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: ST_TO_ADDR
24428: GO 24559
24430: LD_INT 1
24432: DOUBLE
24433: EQUAL
24434: IFTRUE 24438
24436: GO 24500
24438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24439: LD_ADDR_VAR 0 3
24443: PUSH
24444: LD_INT 11
24446: PUSH
24447: LD_INT 12
24449: PUSH
24450: LD_INT 13
24452: PUSH
24453: LD_INT 14
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: LD_INT 2
24461: PUSH
24462: LD_INT 3
24464: PUSH
24465: LD_INT 4
24467: PUSH
24468: LD_INT 5
24470: PUSH
24471: LD_INT 21
24473: PUSH
24474: LD_INT 23
24476: PUSH
24477: LD_INT 22
24479: PUSH
24480: LD_INT 24
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: ST_TO_ADDR
24498: GO 24559
24500: LD_INT 3
24502: DOUBLE
24503: EQUAL
24504: IFTRUE 24508
24506: GO 24558
24508: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24509: LD_ADDR_VAR 0 3
24513: PUSH
24514: LD_INT 13
24516: PUSH
24517: LD_INT 14
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: LD_INT 3
24525: PUSH
24526: LD_INT 4
24528: PUSH
24529: LD_INT 5
24531: PUSH
24532: LD_INT 21
24534: PUSH
24535: LD_INT 22
24537: PUSH
24538: LD_INT 23
24540: PUSH
24541: LD_INT 24
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: ST_TO_ADDR
24556: GO 24559
24558: POP
// result := ( chassis in result ) ;
24559: LD_ADDR_VAR 0 3
24563: PUSH
24564: LD_VAR 0 1
24568: PUSH
24569: LD_VAR 0 3
24573: IN
24574: ST_TO_ADDR
// end ;
24575: LD_VAR 0 3
24579: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24580: LD_INT 0
24582: PPUSH
// if not chassis or not weapon then
24583: LD_VAR 0 1
24587: NOT
24588: PUSH
24589: LD_VAR 0 2
24593: NOT
24594: OR
24595: IFFALSE 24599
// exit ;
24597: GO 25625
// case weapon of us_machine_gun :
24599: LD_VAR 0 2
24603: PUSH
24604: LD_INT 2
24606: DOUBLE
24607: EQUAL
24608: IFTRUE 24612
24610: GO 24642
24612: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24613: LD_ADDR_VAR 0 3
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: LD_INT 3
24626: PUSH
24627: LD_INT 4
24629: PUSH
24630: LD_INT 5
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: ST_TO_ADDR
24640: GO 25609
24642: LD_INT 3
24644: DOUBLE
24645: EQUAL
24646: IFTRUE 24650
24648: GO 24680
24650: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24651: LD_ADDR_VAR 0 3
24655: PUSH
24656: LD_INT 1
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: LD_INT 3
24664: PUSH
24665: LD_INT 4
24667: PUSH
24668: LD_INT 5
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: ST_TO_ADDR
24678: GO 25609
24680: LD_INT 11
24682: DOUBLE
24683: EQUAL
24684: IFTRUE 24688
24686: GO 24718
24688: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24689: LD_ADDR_VAR 0 3
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: LD_INT 4
24705: PUSH
24706: LD_INT 5
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: ST_TO_ADDR
24716: GO 25609
24718: LD_INT 4
24720: DOUBLE
24721: EQUAL
24722: IFTRUE 24726
24724: GO 24752
24726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24727: LD_ADDR_VAR 0 3
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: LD_INT 3
24737: PUSH
24738: LD_INT 4
24740: PUSH
24741: LD_INT 5
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: ST_TO_ADDR
24750: GO 25609
24752: LD_INT 5
24754: DOUBLE
24755: EQUAL
24756: IFTRUE 24760
24758: GO 24786
24760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24761: LD_ADDR_VAR 0 3
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: LD_INT 3
24771: PUSH
24772: LD_INT 4
24774: PUSH
24775: LD_INT 5
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: ST_TO_ADDR
24784: GO 25609
24786: LD_INT 9
24788: DOUBLE
24789: EQUAL
24790: IFTRUE 24794
24792: GO 24820
24794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24795: LD_ADDR_VAR 0 3
24799: PUSH
24800: LD_INT 2
24802: PUSH
24803: LD_INT 3
24805: PUSH
24806: LD_INT 4
24808: PUSH
24809: LD_INT 5
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: ST_TO_ADDR
24818: GO 25609
24820: LD_INT 7
24822: DOUBLE
24823: EQUAL
24824: IFTRUE 24828
24826: GO 24854
24828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24829: LD_ADDR_VAR 0 3
24833: PUSH
24834: LD_INT 2
24836: PUSH
24837: LD_INT 3
24839: PUSH
24840: LD_INT 4
24842: PUSH
24843: LD_INT 5
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: ST_TO_ADDR
24852: GO 25609
24854: LD_INT 12
24856: DOUBLE
24857: EQUAL
24858: IFTRUE 24862
24860: GO 24888
24862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24863: LD_ADDR_VAR 0 3
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: LD_INT 3
24873: PUSH
24874: LD_INT 4
24876: PUSH
24877: LD_INT 5
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: ST_TO_ADDR
24886: GO 25609
24888: LD_INT 13
24890: DOUBLE
24891: EQUAL
24892: IFTRUE 24896
24894: GO 24922
24896: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24897: LD_ADDR_VAR 0 3
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: LD_INT 3
24907: PUSH
24908: LD_INT 4
24910: PUSH
24911: LD_INT 5
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: ST_TO_ADDR
24920: GO 25609
24922: LD_INT 14
24924: DOUBLE
24925: EQUAL
24926: IFTRUE 24930
24928: GO 24948
24930: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24931: LD_ADDR_VAR 0 3
24935: PUSH
24936: LD_INT 4
24938: PUSH
24939: LD_INT 5
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: ST_TO_ADDR
24946: GO 25609
24948: LD_INT 6
24950: DOUBLE
24951: EQUAL
24952: IFTRUE 24956
24954: GO 24974
24956: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24957: LD_ADDR_VAR 0 3
24961: PUSH
24962: LD_INT 4
24964: PUSH
24965: LD_INT 5
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: ST_TO_ADDR
24972: GO 25609
24974: LD_INT 10
24976: DOUBLE
24977: EQUAL
24978: IFTRUE 24982
24980: GO 25000
24982: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24983: LD_ADDR_VAR 0 3
24987: PUSH
24988: LD_INT 4
24990: PUSH
24991: LD_INT 5
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: ST_TO_ADDR
24998: GO 25609
25000: LD_INT 22
25002: DOUBLE
25003: EQUAL
25004: IFTRUE 25008
25006: GO 25034
25008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_INT 11
25016: PUSH
25017: LD_INT 12
25019: PUSH
25020: LD_INT 13
25022: PUSH
25023: LD_INT 14
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: ST_TO_ADDR
25032: GO 25609
25034: LD_INT 23
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25068
25042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: LD_INT 11
25050: PUSH
25051: LD_INT 12
25053: PUSH
25054: LD_INT 13
25056: PUSH
25057: LD_INT 14
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: ST_TO_ADDR
25066: GO 25609
25068: LD_INT 24
25070: DOUBLE
25071: EQUAL
25072: IFTRUE 25076
25074: GO 25102
25076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25077: LD_ADDR_VAR 0 3
25081: PUSH
25082: LD_INT 11
25084: PUSH
25085: LD_INT 12
25087: PUSH
25088: LD_INT 13
25090: PUSH
25091: LD_INT 14
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: ST_TO_ADDR
25100: GO 25609
25102: LD_INT 30
25104: DOUBLE
25105: EQUAL
25106: IFTRUE 25110
25108: GO 25136
25110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25111: LD_ADDR_VAR 0 3
25115: PUSH
25116: LD_INT 11
25118: PUSH
25119: LD_INT 12
25121: PUSH
25122: LD_INT 13
25124: PUSH
25125: LD_INT 14
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: ST_TO_ADDR
25134: GO 25609
25136: LD_INT 25
25138: DOUBLE
25139: EQUAL
25140: IFTRUE 25144
25142: GO 25162
25144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25145: LD_ADDR_VAR 0 3
25149: PUSH
25150: LD_INT 13
25152: PUSH
25153: LD_INT 14
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: ST_TO_ADDR
25160: GO 25609
25162: LD_INT 27
25164: DOUBLE
25165: EQUAL
25166: IFTRUE 25170
25168: GO 25188
25170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25171: LD_ADDR_VAR 0 3
25175: PUSH
25176: LD_INT 13
25178: PUSH
25179: LD_INT 14
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: ST_TO_ADDR
25186: GO 25609
25188: LD_INT 28
25190: DOUBLE
25191: EQUAL
25192: IFTRUE 25196
25194: GO 25214
25196: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25197: LD_ADDR_VAR 0 3
25201: PUSH
25202: LD_INT 13
25204: PUSH
25205: LD_INT 14
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: ST_TO_ADDR
25212: GO 25609
25214: LD_INT 29
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25240
25222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25223: LD_ADDR_VAR 0 3
25227: PUSH
25228: LD_INT 13
25230: PUSH
25231: LD_INT 14
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: ST_TO_ADDR
25238: GO 25609
25240: LD_INT 31
25242: DOUBLE
25243: EQUAL
25244: IFTRUE 25248
25246: GO 25266
25248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25249: LD_ADDR_VAR 0 3
25253: PUSH
25254: LD_INT 13
25256: PUSH
25257: LD_INT 14
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: ST_TO_ADDR
25264: GO 25609
25266: LD_INT 26
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25292
25274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25275: LD_ADDR_VAR 0 3
25279: PUSH
25280: LD_INT 13
25282: PUSH
25283: LD_INT 14
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: ST_TO_ADDR
25290: GO 25609
25292: LD_INT 42
25294: DOUBLE
25295: EQUAL
25296: IFTRUE 25300
25298: GO 25326
25300: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25301: LD_ADDR_VAR 0 3
25305: PUSH
25306: LD_INT 21
25308: PUSH
25309: LD_INT 22
25311: PUSH
25312: LD_INT 23
25314: PUSH
25315: LD_INT 24
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: ST_TO_ADDR
25324: GO 25609
25326: LD_INT 43
25328: DOUBLE
25329: EQUAL
25330: IFTRUE 25334
25332: GO 25360
25334: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25335: LD_ADDR_VAR 0 3
25339: PUSH
25340: LD_INT 21
25342: PUSH
25343: LD_INT 22
25345: PUSH
25346: LD_INT 23
25348: PUSH
25349: LD_INT 24
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: ST_TO_ADDR
25358: GO 25609
25360: LD_INT 44
25362: DOUBLE
25363: EQUAL
25364: IFTRUE 25368
25366: GO 25394
25368: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25369: LD_ADDR_VAR 0 3
25373: PUSH
25374: LD_INT 21
25376: PUSH
25377: LD_INT 22
25379: PUSH
25380: LD_INT 23
25382: PUSH
25383: LD_INT 24
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: ST_TO_ADDR
25392: GO 25609
25394: LD_INT 45
25396: DOUBLE
25397: EQUAL
25398: IFTRUE 25402
25400: GO 25428
25402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25403: LD_ADDR_VAR 0 3
25407: PUSH
25408: LD_INT 21
25410: PUSH
25411: LD_INT 22
25413: PUSH
25414: LD_INT 23
25416: PUSH
25417: LD_INT 24
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: ST_TO_ADDR
25426: GO 25609
25428: LD_INT 49
25430: DOUBLE
25431: EQUAL
25432: IFTRUE 25436
25434: GO 25462
25436: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25437: LD_ADDR_VAR 0 3
25441: PUSH
25442: LD_INT 21
25444: PUSH
25445: LD_INT 22
25447: PUSH
25448: LD_INT 23
25450: PUSH
25451: LD_INT 24
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: ST_TO_ADDR
25460: GO 25609
25462: LD_INT 51
25464: DOUBLE
25465: EQUAL
25466: IFTRUE 25470
25468: GO 25496
25470: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25471: LD_ADDR_VAR 0 3
25475: PUSH
25476: LD_INT 21
25478: PUSH
25479: LD_INT 22
25481: PUSH
25482: LD_INT 23
25484: PUSH
25485: LD_INT 24
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: ST_TO_ADDR
25494: GO 25609
25496: LD_INT 52
25498: DOUBLE
25499: EQUAL
25500: IFTRUE 25504
25502: GO 25530
25504: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25505: LD_ADDR_VAR 0 3
25509: PUSH
25510: LD_INT 21
25512: PUSH
25513: LD_INT 22
25515: PUSH
25516: LD_INT 23
25518: PUSH
25519: LD_INT 24
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: ST_TO_ADDR
25528: GO 25609
25530: LD_INT 53
25532: DOUBLE
25533: EQUAL
25534: IFTRUE 25538
25536: GO 25556
25538: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25539: LD_ADDR_VAR 0 3
25543: PUSH
25544: LD_INT 23
25546: PUSH
25547: LD_INT 24
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: ST_TO_ADDR
25554: GO 25609
25556: LD_INT 46
25558: DOUBLE
25559: EQUAL
25560: IFTRUE 25564
25562: GO 25582
25564: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_INT 23
25572: PUSH
25573: LD_INT 24
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: ST_TO_ADDR
25580: GO 25609
25582: LD_INT 47
25584: DOUBLE
25585: EQUAL
25586: IFTRUE 25590
25588: GO 25608
25590: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25591: LD_ADDR_VAR 0 3
25595: PUSH
25596: LD_INT 23
25598: PUSH
25599: LD_INT 24
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: ST_TO_ADDR
25606: GO 25609
25608: POP
// result := ( chassis in result ) ;
25609: LD_ADDR_VAR 0 3
25613: PUSH
25614: LD_VAR 0 1
25618: PUSH
25619: LD_VAR 0 3
25623: IN
25624: ST_TO_ADDR
// end ;
25625: LD_VAR 0 3
25629: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25630: LD_INT 0
25632: PPUSH
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
25637: PPUSH
25638: PPUSH
// result := array ;
25639: LD_ADDR_VAR 0 5
25643: PUSH
25644: LD_VAR 0 1
25648: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25649: LD_VAR 0 1
25653: NOT
25654: PUSH
25655: LD_VAR 0 2
25659: NOT
25660: OR
25661: PUSH
25662: LD_VAR 0 3
25666: NOT
25667: OR
25668: PUSH
25669: LD_VAR 0 2
25673: PUSH
25674: LD_VAR 0 1
25678: GREATER
25679: OR
25680: PUSH
25681: LD_VAR 0 3
25685: PUSH
25686: LD_VAR 0 1
25690: GREATER
25691: OR
25692: IFFALSE 25696
// exit ;
25694: GO 25992
// if direction then
25696: LD_VAR 0 4
25700: IFFALSE 25764
// begin d := 1 ;
25702: LD_ADDR_VAR 0 9
25706: PUSH
25707: LD_INT 1
25709: ST_TO_ADDR
// if i_from > i_to then
25710: LD_VAR 0 2
25714: PUSH
25715: LD_VAR 0 3
25719: GREATER
25720: IFFALSE 25746
// length := ( array - i_from ) + i_to else
25722: LD_ADDR_VAR 0 11
25726: PUSH
25727: LD_VAR 0 1
25731: PUSH
25732: LD_VAR 0 2
25736: MINUS
25737: PUSH
25738: LD_VAR 0 3
25742: PLUS
25743: ST_TO_ADDR
25744: GO 25762
// length := i_to - i_from ;
25746: LD_ADDR_VAR 0 11
25750: PUSH
25751: LD_VAR 0 3
25755: PUSH
25756: LD_VAR 0 2
25760: MINUS
25761: ST_TO_ADDR
// end else
25762: GO 25825
// begin d := - 1 ;
25764: LD_ADDR_VAR 0 9
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: ST_TO_ADDR
// if i_from > i_to then
25773: LD_VAR 0 2
25777: PUSH
25778: LD_VAR 0 3
25782: GREATER
25783: IFFALSE 25803
// length := i_from - i_to else
25785: LD_ADDR_VAR 0 11
25789: PUSH
25790: LD_VAR 0 2
25794: PUSH
25795: LD_VAR 0 3
25799: MINUS
25800: ST_TO_ADDR
25801: GO 25825
// length := ( array - i_to ) + i_from ;
25803: LD_ADDR_VAR 0 11
25807: PUSH
25808: LD_VAR 0 1
25812: PUSH
25813: LD_VAR 0 3
25817: MINUS
25818: PUSH
25819: LD_VAR 0 2
25823: PLUS
25824: ST_TO_ADDR
// end ; if not length then
25825: LD_VAR 0 11
25829: NOT
25830: IFFALSE 25834
// exit ;
25832: GO 25992
// tmp := array ;
25834: LD_ADDR_VAR 0 10
25838: PUSH
25839: LD_VAR 0 1
25843: ST_TO_ADDR
// for i = 1 to length do
25844: LD_ADDR_VAR 0 6
25848: PUSH
25849: DOUBLE
25850: LD_INT 1
25852: DEC
25853: ST_TO_ADDR
25854: LD_VAR 0 11
25858: PUSH
25859: FOR_TO
25860: IFFALSE 25980
// begin for j = 1 to array do
25862: LD_ADDR_VAR 0 7
25866: PUSH
25867: DOUBLE
25868: LD_INT 1
25870: DEC
25871: ST_TO_ADDR
25872: LD_VAR 0 1
25876: PUSH
25877: FOR_TO
25878: IFFALSE 25966
// begin k := j + d ;
25880: LD_ADDR_VAR 0 8
25884: PUSH
25885: LD_VAR 0 7
25889: PUSH
25890: LD_VAR 0 9
25894: PLUS
25895: ST_TO_ADDR
// if k > array then
25896: LD_VAR 0 8
25900: PUSH
25901: LD_VAR 0 1
25905: GREATER
25906: IFFALSE 25916
// k := 1 ;
25908: LD_ADDR_VAR 0 8
25912: PUSH
25913: LD_INT 1
25915: ST_TO_ADDR
// if not k then
25916: LD_VAR 0 8
25920: NOT
25921: IFFALSE 25933
// k := array ;
25923: LD_ADDR_VAR 0 8
25927: PUSH
25928: LD_VAR 0 1
25932: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25933: LD_ADDR_VAR 0 10
25937: PUSH
25938: LD_VAR 0 10
25942: PPUSH
25943: LD_VAR 0 8
25947: PPUSH
25948: LD_VAR 0 1
25952: PUSH
25953: LD_VAR 0 7
25957: ARRAY
25958: PPUSH
25959: CALL_OW 1
25963: ST_TO_ADDR
// end ;
25964: GO 25877
25966: POP
25967: POP
// array := tmp ;
25968: LD_ADDR_VAR 0 1
25972: PUSH
25973: LD_VAR 0 10
25977: ST_TO_ADDR
// end ;
25978: GO 25859
25980: POP
25981: POP
// result := array ;
25982: LD_ADDR_VAR 0 5
25986: PUSH
25987: LD_VAR 0 1
25991: ST_TO_ADDR
// end ;
25992: LD_VAR 0 5
25996: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25997: LD_INT 0
25999: PPUSH
26000: PPUSH
// result := 0 ;
26001: LD_ADDR_VAR 0 3
26005: PUSH
26006: LD_INT 0
26008: ST_TO_ADDR
// if not array or not value in array then
26009: LD_VAR 0 1
26013: NOT
26014: PUSH
26015: LD_VAR 0 2
26019: PUSH
26020: LD_VAR 0 1
26024: IN
26025: NOT
26026: OR
26027: IFFALSE 26031
// exit ;
26029: GO 26085
// for i = 1 to array do
26031: LD_ADDR_VAR 0 4
26035: PUSH
26036: DOUBLE
26037: LD_INT 1
26039: DEC
26040: ST_TO_ADDR
26041: LD_VAR 0 1
26045: PUSH
26046: FOR_TO
26047: IFFALSE 26083
// if value = array [ i ] then
26049: LD_VAR 0 2
26053: PUSH
26054: LD_VAR 0 1
26058: PUSH
26059: LD_VAR 0 4
26063: ARRAY
26064: EQUAL
26065: IFFALSE 26081
// begin result := i ;
26067: LD_ADDR_VAR 0 3
26071: PUSH
26072: LD_VAR 0 4
26076: ST_TO_ADDR
// exit ;
26077: POP
26078: POP
26079: GO 26085
// end ;
26081: GO 26046
26083: POP
26084: POP
// end ;
26085: LD_VAR 0 3
26089: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26090: LD_INT 0
26092: PPUSH
// vc_chassis := chassis ;
26093: LD_ADDR_OWVAR 37
26097: PUSH
26098: LD_VAR 0 1
26102: ST_TO_ADDR
// vc_engine := engine ;
26103: LD_ADDR_OWVAR 39
26107: PUSH
26108: LD_VAR 0 2
26112: ST_TO_ADDR
// vc_control := control ;
26113: LD_ADDR_OWVAR 38
26117: PUSH
26118: LD_VAR 0 3
26122: ST_TO_ADDR
// vc_weapon := weapon ;
26123: LD_ADDR_OWVAR 40
26127: PUSH
26128: LD_VAR 0 4
26132: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26133: LD_ADDR_OWVAR 41
26137: PUSH
26138: LD_VAR 0 5
26142: ST_TO_ADDR
// end ;
26143: LD_VAR 0 6
26147: RET
// export function WantPlant ( unit ) ; var task ; begin
26148: LD_INT 0
26150: PPUSH
26151: PPUSH
// result := false ;
26152: LD_ADDR_VAR 0 2
26156: PUSH
26157: LD_INT 0
26159: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26160: LD_ADDR_VAR 0 3
26164: PUSH
26165: LD_VAR 0 1
26169: PPUSH
26170: CALL_OW 437
26174: ST_TO_ADDR
// if task then
26175: LD_VAR 0 3
26179: IFFALSE 26207
// if task [ 1 ] [ 1 ] = p then
26181: LD_VAR 0 3
26185: PUSH
26186: LD_INT 1
26188: ARRAY
26189: PUSH
26190: LD_INT 1
26192: ARRAY
26193: PUSH
26194: LD_STRING p
26196: EQUAL
26197: IFFALSE 26207
// result := true ;
26199: LD_ADDR_VAR 0 2
26203: PUSH
26204: LD_INT 1
26206: ST_TO_ADDR
// end ;
26207: LD_VAR 0 2
26211: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26212: LD_INT 0
26214: PPUSH
26215: PPUSH
26216: PPUSH
26217: PPUSH
// if pos < 1 then
26218: LD_VAR 0 2
26222: PUSH
26223: LD_INT 1
26225: LESS
26226: IFFALSE 26230
// exit ;
26228: GO 26533
// if pos = 1 then
26230: LD_VAR 0 2
26234: PUSH
26235: LD_INT 1
26237: EQUAL
26238: IFFALSE 26271
// result := Replace ( arr , pos [ 1 ] , value ) else
26240: LD_ADDR_VAR 0 4
26244: PUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: LD_VAR 0 2
26254: PUSH
26255: LD_INT 1
26257: ARRAY
26258: PPUSH
26259: LD_VAR 0 3
26263: PPUSH
26264: CALL_OW 1
26268: ST_TO_ADDR
26269: GO 26533
// begin tmp := arr ;
26271: LD_ADDR_VAR 0 6
26275: PUSH
26276: LD_VAR 0 1
26280: ST_TO_ADDR
// s_arr := [ tmp ] ;
26281: LD_ADDR_VAR 0 7
26285: PUSH
26286: LD_VAR 0 6
26290: PUSH
26291: EMPTY
26292: LIST
26293: ST_TO_ADDR
// for i = 1 to pos - 1 do
26294: LD_ADDR_VAR 0 5
26298: PUSH
26299: DOUBLE
26300: LD_INT 1
26302: DEC
26303: ST_TO_ADDR
26304: LD_VAR 0 2
26308: PUSH
26309: LD_INT 1
26311: MINUS
26312: PUSH
26313: FOR_TO
26314: IFFALSE 26359
// begin tmp := tmp [ pos [ i ] ] ;
26316: LD_ADDR_VAR 0 6
26320: PUSH
26321: LD_VAR 0 6
26325: PUSH
26326: LD_VAR 0 2
26330: PUSH
26331: LD_VAR 0 5
26335: ARRAY
26336: ARRAY
26337: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26338: LD_ADDR_VAR 0 7
26342: PUSH
26343: LD_VAR 0 7
26347: PUSH
26348: LD_VAR 0 6
26352: PUSH
26353: EMPTY
26354: LIST
26355: ADD
26356: ST_TO_ADDR
// end ;
26357: GO 26313
26359: POP
26360: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26361: LD_ADDR_VAR 0 6
26365: PUSH
26366: LD_VAR 0 6
26370: PPUSH
26371: LD_VAR 0 2
26375: PUSH
26376: LD_VAR 0 2
26380: ARRAY
26381: PPUSH
26382: LD_VAR 0 3
26386: PPUSH
26387: CALL_OW 1
26391: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26392: LD_ADDR_VAR 0 7
26396: PUSH
26397: LD_VAR 0 7
26401: PPUSH
26402: LD_VAR 0 7
26406: PPUSH
26407: LD_VAR 0 6
26411: PPUSH
26412: CALL_OW 1
26416: ST_TO_ADDR
// for i = s_arr downto 2 do
26417: LD_ADDR_VAR 0 5
26421: PUSH
26422: DOUBLE
26423: LD_VAR 0 7
26427: INC
26428: ST_TO_ADDR
26429: LD_INT 2
26431: PUSH
26432: FOR_DOWNTO
26433: IFFALSE 26517
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26435: LD_ADDR_VAR 0 6
26439: PUSH
26440: LD_VAR 0 7
26444: PUSH
26445: LD_VAR 0 5
26449: PUSH
26450: LD_INT 1
26452: MINUS
26453: ARRAY
26454: PPUSH
26455: LD_VAR 0 2
26459: PUSH
26460: LD_VAR 0 5
26464: PUSH
26465: LD_INT 1
26467: MINUS
26468: ARRAY
26469: PPUSH
26470: LD_VAR 0 7
26474: PUSH
26475: LD_VAR 0 5
26479: ARRAY
26480: PPUSH
26481: CALL_OW 1
26485: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26486: LD_ADDR_VAR 0 7
26490: PUSH
26491: LD_VAR 0 7
26495: PPUSH
26496: LD_VAR 0 5
26500: PUSH
26501: LD_INT 1
26503: MINUS
26504: PPUSH
26505: LD_VAR 0 6
26509: PPUSH
26510: CALL_OW 1
26514: ST_TO_ADDR
// end ;
26515: GO 26432
26517: POP
26518: POP
// result := s_arr [ 1 ] ;
26519: LD_ADDR_VAR 0 4
26523: PUSH
26524: LD_VAR 0 7
26528: PUSH
26529: LD_INT 1
26531: ARRAY
26532: ST_TO_ADDR
// end ; end ;
26533: LD_VAR 0 4
26537: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26538: LD_INT 0
26540: PPUSH
26541: PPUSH
// if not list then
26542: LD_VAR 0 1
26546: NOT
26547: IFFALSE 26551
// exit ;
26549: GO 26642
// i := list [ pos1 ] ;
26551: LD_ADDR_VAR 0 5
26555: PUSH
26556: LD_VAR 0 1
26560: PUSH
26561: LD_VAR 0 2
26565: ARRAY
26566: ST_TO_ADDR
// if not i then
26567: LD_VAR 0 5
26571: NOT
26572: IFFALSE 26576
// exit ;
26574: GO 26642
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26576: LD_ADDR_VAR 0 1
26580: PUSH
26581: LD_VAR 0 1
26585: PPUSH
26586: LD_VAR 0 2
26590: PPUSH
26591: LD_VAR 0 1
26595: PUSH
26596: LD_VAR 0 3
26600: ARRAY
26601: PPUSH
26602: CALL_OW 1
26606: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26607: LD_ADDR_VAR 0 1
26611: PUSH
26612: LD_VAR 0 1
26616: PPUSH
26617: LD_VAR 0 3
26621: PPUSH
26622: LD_VAR 0 5
26626: PPUSH
26627: CALL_OW 1
26631: ST_TO_ADDR
// result := list ;
26632: LD_ADDR_VAR 0 4
26636: PUSH
26637: LD_VAR 0 1
26641: ST_TO_ADDR
// end ;
26642: LD_VAR 0 4
26646: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26647: LD_INT 0
26649: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26650: LD_ADDR_VAR 0 5
26654: PUSH
26655: LD_VAR 0 1
26659: PPUSH
26660: CALL_OW 250
26664: PPUSH
26665: LD_VAR 0 1
26669: PPUSH
26670: CALL_OW 251
26674: PPUSH
26675: LD_VAR 0 2
26679: PPUSH
26680: LD_VAR 0 3
26684: PPUSH
26685: LD_VAR 0 4
26689: PPUSH
26690: CALL 26700 0 5
26694: ST_TO_ADDR
// end ;
26695: LD_VAR 0 5
26699: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26700: LD_INT 0
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
// if not list then
26706: LD_VAR 0 3
26710: NOT
26711: IFFALSE 26715
// exit ;
26713: GO 27103
// result := [ ] ;
26715: LD_ADDR_VAR 0 6
26719: PUSH
26720: EMPTY
26721: ST_TO_ADDR
// for i in list do
26722: LD_ADDR_VAR 0 7
26726: PUSH
26727: LD_VAR 0 3
26731: PUSH
26732: FOR_IN
26733: IFFALSE 26935
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26735: LD_ADDR_VAR 0 9
26739: PUSH
26740: LD_VAR 0 7
26744: PPUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: LD_VAR 0 2
26754: PPUSH
26755: CALL_OW 297
26759: ST_TO_ADDR
// if not result then
26760: LD_VAR 0 6
26764: NOT
26765: IFFALSE 26791
// result := [ [ i , tmp ] ] else
26767: LD_ADDR_VAR 0 6
26771: PUSH
26772: LD_VAR 0 7
26776: PUSH
26777: LD_VAR 0 9
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: EMPTY
26787: LIST
26788: ST_TO_ADDR
26789: GO 26933
// begin if result [ result ] [ 2 ] < tmp then
26791: LD_VAR 0 6
26795: PUSH
26796: LD_VAR 0 6
26800: ARRAY
26801: PUSH
26802: LD_INT 2
26804: ARRAY
26805: PUSH
26806: LD_VAR 0 9
26810: LESS
26811: IFFALSE 26853
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26813: LD_ADDR_VAR 0 6
26817: PUSH
26818: LD_VAR 0 6
26822: PPUSH
26823: LD_VAR 0 6
26827: PUSH
26828: LD_INT 1
26830: PLUS
26831: PPUSH
26832: LD_VAR 0 7
26836: PUSH
26837: LD_VAR 0 9
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PPUSH
26846: CALL_OW 2
26850: ST_TO_ADDR
26851: GO 26933
// for j = 1 to result do
26853: LD_ADDR_VAR 0 8
26857: PUSH
26858: DOUBLE
26859: LD_INT 1
26861: DEC
26862: ST_TO_ADDR
26863: LD_VAR 0 6
26867: PUSH
26868: FOR_TO
26869: IFFALSE 26931
// begin if tmp < result [ j ] [ 2 ] then
26871: LD_VAR 0 9
26875: PUSH
26876: LD_VAR 0 6
26880: PUSH
26881: LD_VAR 0 8
26885: ARRAY
26886: PUSH
26887: LD_INT 2
26889: ARRAY
26890: LESS
26891: IFFALSE 26929
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26893: LD_ADDR_VAR 0 6
26897: PUSH
26898: LD_VAR 0 6
26902: PPUSH
26903: LD_VAR 0 8
26907: PPUSH
26908: LD_VAR 0 7
26912: PUSH
26913: LD_VAR 0 9
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PPUSH
26922: CALL_OW 2
26926: ST_TO_ADDR
// break ;
26927: GO 26931
// end ; end ;
26929: GO 26868
26931: POP
26932: POP
// end ; end ;
26933: GO 26732
26935: POP
26936: POP
// if result and not asc then
26937: LD_VAR 0 6
26941: PUSH
26942: LD_VAR 0 4
26946: NOT
26947: AND
26948: IFFALSE 27023
// begin tmp := result ;
26950: LD_ADDR_VAR 0 9
26954: PUSH
26955: LD_VAR 0 6
26959: ST_TO_ADDR
// for i = tmp downto 1 do
26960: LD_ADDR_VAR 0 7
26964: PUSH
26965: DOUBLE
26966: LD_VAR 0 9
26970: INC
26971: ST_TO_ADDR
26972: LD_INT 1
26974: PUSH
26975: FOR_DOWNTO
26976: IFFALSE 27021
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26978: LD_ADDR_VAR 0 6
26982: PUSH
26983: LD_VAR 0 6
26987: PPUSH
26988: LD_VAR 0 9
26992: PUSH
26993: LD_VAR 0 7
26997: MINUS
26998: PUSH
26999: LD_INT 1
27001: PLUS
27002: PPUSH
27003: LD_VAR 0 9
27007: PUSH
27008: LD_VAR 0 7
27012: ARRAY
27013: PPUSH
27014: CALL_OW 1
27018: ST_TO_ADDR
27019: GO 26975
27021: POP
27022: POP
// end ; tmp := [ ] ;
27023: LD_ADDR_VAR 0 9
27027: PUSH
27028: EMPTY
27029: ST_TO_ADDR
// if mode then
27030: LD_VAR 0 5
27034: IFFALSE 27103
// begin for i = 1 to result do
27036: LD_ADDR_VAR 0 7
27040: PUSH
27041: DOUBLE
27042: LD_INT 1
27044: DEC
27045: ST_TO_ADDR
27046: LD_VAR 0 6
27050: PUSH
27051: FOR_TO
27052: IFFALSE 27091
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27054: LD_ADDR_VAR 0 9
27058: PUSH
27059: LD_VAR 0 9
27063: PPUSH
27064: LD_VAR 0 7
27068: PPUSH
27069: LD_VAR 0 6
27073: PUSH
27074: LD_VAR 0 7
27078: ARRAY
27079: PUSH
27080: LD_INT 1
27082: ARRAY
27083: PPUSH
27084: CALL_OW 1
27088: ST_TO_ADDR
27089: GO 27051
27091: POP
27092: POP
// result := tmp ;
27093: LD_ADDR_VAR 0 6
27097: PUSH
27098: LD_VAR 0 9
27102: ST_TO_ADDR
// end ; end ;
27103: LD_VAR 0 6
27107: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27108: LD_INT 0
27110: PPUSH
27111: PPUSH
27112: PPUSH
27113: PPUSH
27114: PPUSH
27115: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27116: LD_ADDR_VAR 0 5
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: EMPTY
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: ST_TO_ADDR
// if not x or not y then
27138: LD_VAR 0 2
27142: NOT
27143: PUSH
27144: LD_VAR 0 3
27148: NOT
27149: OR
27150: IFFALSE 27154
// exit ;
27152: GO 28800
// if not range then
27154: LD_VAR 0 4
27158: NOT
27159: IFFALSE 27169
// range := 10 ;
27161: LD_ADDR_VAR 0 4
27165: PUSH
27166: LD_INT 10
27168: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27169: LD_ADDR_VAR 0 8
27173: PUSH
27174: LD_INT 81
27176: PUSH
27177: LD_VAR 0 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 92
27188: PUSH
27189: LD_VAR 0 2
27193: PUSH
27194: LD_VAR 0 3
27198: PUSH
27199: LD_VAR 0 4
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 3
27212: PUSH
27213: LD_INT 21
27215: PUSH
27216: LD_INT 3
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: PPUSH
27232: CALL_OW 69
27236: ST_TO_ADDR
// if not tmp then
27237: LD_VAR 0 8
27241: NOT
27242: IFFALSE 27246
// exit ;
27244: GO 28800
// for i in tmp do
27246: LD_ADDR_VAR 0 6
27250: PUSH
27251: LD_VAR 0 8
27255: PUSH
27256: FOR_IN
27257: IFFALSE 28775
// begin points := [ 0 , 0 , 0 ] ;
27259: LD_ADDR_VAR 0 9
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: ST_TO_ADDR
// bpoints := 1 ;
27278: LD_ADDR_VAR 0 10
27282: PUSH
27283: LD_INT 1
27285: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27286: LD_VAR 0 6
27290: PPUSH
27291: CALL_OW 247
27295: PUSH
27296: LD_INT 1
27298: DOUBLE
27299: EQUAL
27300: IFTRUE 27304
27302: GO 27882
27304: POP
// begin if GetClass ( i ) = 1 then
27305: LD_VAR 0 6
27309: PPUSH
27310: CALL_OW 257
27314: PUSH
27315: LD_INT 1
27317: EQUAL
27318: IFFALSE 27339
// points := [ 10 , 5 , 3 ] ;
27320: LD_ADDR_VAR 0 9
27324: PUSH
27325: LD_INT 10
27327: PUSH
27328: LD_INT 5
27330: PUSH
27331: LD_INT 3
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: LIST
27338: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27339: LD_VAR 0 6
27343: PPUSH
27344: CALL_OW 257
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: LD_INT 3
27354: PUSH
27355: LD_INT 4
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: LIST
27362: IN
27363: IFFALSE 27384
// points := [ 3 , 2 , 1 ] ;
27365: LD_ADDR_VAR 0 9
27369: PUSH
27370: LD_INT 3
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27384: LD_VAR 0 6
27388: PPUSH
27389: CALL_OW 257
27393: PUSH
27394: LD_INT 5
27396: EQUAL
27397: IFFALSE 27418
// points := [ 130 , 5 , 2 ] ;
27399: LD_ADDR_VAR 0 9
27403: PUSH
27404: LD_INT 130
27406: PUSH
27407: LD_INT 5
27409: PUSH
27410: LD_INT 2
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: LIST
27417: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27418: LD_VAR 0 6
27422: PPUSH
27423: CALL_OW 257
27427: PUSH
27428: LD_INT 8
27430: EQUAL
27431: IFFALSE 27452
// points := [ 35 , 35 , 30 ] ;
27433: LD_ADDR_VAR 0 9
27437: PUSH
27438: LD_INT 35
27440: PUSH
27441: LD_INT 35
27443: PUSH
27444: LD_INT 30
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: LIST
27451: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27452: LD_VAR 0 6
27456: PPUSH
27457: CALL_OW 257
27461: PUSH
27462: LD_INT 9
27464: EQUAL
27465: IFFALSE 27486
// points := [ 20 , 55 , 40 ] ;
27467: LD_ADDR_VAR 0 9
27471: PUSH
27472: LD_INT 20
27474: PUSH
27475: LD_INT 55
27477: PUSH
27478: LD_INT 40
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: LIST
27485: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27486: LD_VAR 0 6
27490: PPUSH
27491: CALL_OW 257
27495: PUSH
27496: LD_INT 12
27498: PUSH
27499: LD_INT 16
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: IN
27506: IFFALSE 27527
// points := [ 5 , 3 , 2 ] ;
27508: LD_ADDR_VAR 0 9
27512: PUSH
27513: LD_INT 5
27515: PUSH
27516: LD_INT 3
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: LIST
27526: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27527: LD_VAR 0 6
27531: PPUSH
27532: CALL_OW 257
27536: PUSH
27537: LD_INT 17
27539: EQUAL
27540: IFFALSE 27561
// points := [ 100 , 50 , 75 ] ;
27542: LD_ADDR_VAR 0 9
27546: PUSH
27547: LD_INT 100
27549: PUSH
27550: LD_INT 50
27552: PUSH
27553: LD_INT 75
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27561: LD_VAR 0 6
27565: PPUSH
27566: CALL_OW 257
27570: PUSH
27571: LD_INT 15
27573: EQUAL
27574: IFFALSE 27595
// points := [ 10 , 5 , 3 ] ;
27576: LD_ADDR_VAR 0 9
27580: PUSH
27581: LD_INT 10
27583: PUSH
27584: LD_INT 5
27586: PUSH
27587: LD_INT 3
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: LIST
27594: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27595: LD_VAR 0 6
27599: PPUSH
27600: CALL_OW 257
27604: PUSH
27605: LD_INT 14
27607: EQUAL
27608: IFFALSE 27629
// points := [ 10 , 0 , 0 ] ;
27610: LD_ADDR_VAR 0 9
27614: PUSH
27615: LD_INT 10
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: LIST
27628: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27629: LD_VAR 0 6
27633: PPUSH
27634: CALL_OW 257
27638: PUSH
27639: LD_INT 11
27641: EQUAL
27642: IFFALSE 27663
// points := [ 30 , 10 , 5 ] ;
27644: LD_ADDR_VAR 0 9
27648: PUSH
27649: LD_INT 30
27651: PUSH
27652: LD_INT 10
27654: PUSH
27655: LD_INT 5
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: LIST
27662: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27663: LD_VAR 0 1
27667: PPUSH
27668: LD_INT 5
27670: PPUSH
27671: CALL_OW 321
27675: PUSH
27676: LD_INT 2
27678: EQUAL
27679: IFFALSE 27696
// bpoints := bpoints * 1.8 ;
27681: LD_ADDR_VAR 0 10
27685: PUSH
27686: LD_VAR 0 10
27690: PUSH
27691: LD_REAL  1.80000000000000E+0000
27694: MUL
27695: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27696: LD_VAR 0 6
27700: PPUSH
27701: CALL_OW 257
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: LD_INT 3
27714: PUSH
27715: LD_INT 4
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: IN
27724: PUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: LD_INT 51
27732: PPUSH
27733: CALL_OW 321
27737: PUSH
27738: LD_INT 2
27740: EQUAL
27741: AND
27742: IFFALSE 27759
// bpoints := bpoints * 1.2 ;
27744: LD_ADDR_VAR 0 10
27748: PUSH
27749: LD_VAR 0 10
27753: PUSH
27754: LD_REAL  1.20000000000000E+0000
27757: MUL
27758: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27759: LD_VAR 0 6
27763: PPUSH
27764: CALL_OW 257
27768: PUSH
27769: LD_INT 5
27771: PUSH
27772: LD_INT 7
27774: PUSH
27775: LD_INT 9
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: IN
27783: PUSH
27784: LD_VAR 0 1
27788: PPUSH
27789: LD_INT 52
27791: PPUSH
27792: CALL_OW 321
27796: PUSH
27797: LD_INT 2
27799: EQUAL
27800: AND
27801: IFFALSE 27818
// bpoints := bpoints * 1.5 ;
27803: LD_ADDR_VAR 0 10
27807: PUSH
27808: LD_VAR 0 10
27812: PUSH
27813: LD_REAL  1.50000000000000E+0000
27816: MUL
27817: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27818: LD_VAR 0 1
27822: PPUSH
27823: LD_INT 66
27825: PPUSH
27826: CALL_OW 321
27830: PUSH
27831: LD_INT 2
27833: EQUAL
27834: IFFALSE 27851
// bpoints := bpoints * 1.1 ;
27836: LD_ADDR_VAR 0 10
27840: PUSH
27841: LD_VAR 0 10
27845: PUSH
27846: LD_REAL  1.10000000000000E+0000
27849: MUL
27850: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27851: LD_ADDR_VAR 0 10
27855: PUSH
27856: LD_VAR 0 10
27860: PUSH
27861: LD_VAR 0 6
27865: PPUSH
27866: LD_INT 1
27868: PPUSH
27869: CALL_OW 259
27873: PUSH
27874: LD_REAL  1.15000000000000E+0000
27877: MUL
27878: MUL
27879: ST_TO_ADDR
// end ; unit_vehicle :
27880: GO 28704
27882: LD_INT 2
27884: DOUBLE
27885: EQUAL
27886: IFTRUE 27890
27888: GO 28692
27890: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27891: LD_VAR 0 6
27895: PPUSH
27896: CALL_OW 264
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 42
27906: PUSH
27907: LD_INT 24
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: IN
27915: IFFALSE 27936
// points := [ 25 , 5 , 3 ] ;
27917: LD_ADDR_VAR 0 9
27921: PUSH
27922: LD_INT 25
27924: PUSH
27925: LD_INT 5
27927: PUSH
27928: LD_INT 3
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27936: LD_VAR 0 6
27940: PPUSH
27941: CALL_OW 264
27945: PUSH
27946: LD_INT 4
27948: PUSH
27949: LD_INT 43
27951: PUSH
27952: LD_INT 25
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: LIST
27959: IN
27960: IFFALSE 27981
// points := [ 40 , 15 , 5 ] ;
27962: LD_ADDR_VAR 0 9
27966: PUSH
27967: LD_INT 40
27969: PUSH
27970: LD_INT 15
27972: PUSH
27973: LD_INT 5
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27981: LD_VAR 0 6
27985: PPUSH
27986: CALL_OW 264
27990: PUSH
27991: LD_INT 3
27993: PUSH
27994: LD_INT 23
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: IN
28001: IFFALSE 28022
// points := [ 7 , 25 , 8 ] ;
28003: LD_ADDR_VAR 0 9
28007: PUSH
28008: LD_INT 7
28010: PUSH
28011: LD_INT 25
28013: PUSH
28014: LD_INT 8
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28022: LD_VAR 0 6
28026: PPUSH
28027: CALL_OW 264
28031: PUSH
28032: LD_INT 5
28034: PUSH
28035: LD_INT 27
28037: PUSH
28038: LD_INT 44
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: LIST
28045: IN
28046: IFFALSE 28067
// points := [ 14 , 50 , 16 ] ;
28048: LD_ADDR_VAR 0 9
28052: PUSH
28053: LD_INT 14
28055: PUSH
28056: LD_INT 50
28058: PUSH
28059: LD_INT 16
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: LIST
28066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28067: LD_VAR 0 6
28071: PPUSH
28072: CALL_OW 264
28076: PUSH
28077: LD_INT 6
28079: PUSH
28080: LD_INT 46
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: IN
28087: IFFALSE 28108
// points := [ 32 , 120 , 70 ] ;
28089: LD_ADDR_VAR 0 9
28093: PUSH
28094: LD_INT 32
28096: PUSH
28097: LD_INT 120
28099: PUSH
28100: LD_INT 70
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: LIST
28107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28108: LD_VAR 0 6
28112: PPUSH
28113: CALL_OW 264
28117: PUSH
28118: LD_INT 7
28120: PUSH
28121: LD_INT 28
28123: PUSH
28124: LD_INT 45
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: LIST
28131: IN
28132: IFFALSE 28153
// points := [ 35 , 20 , 45 ] ;
28134: LD_ADDR_VAR 0 9
28138: PUSH
28139: LD_INT 35
28141: PUSH
28142: LD_INT 20
28144: PUSH
28145: LD_INT 45
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: LIST
28152: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28153: LD_VAR 0 6
28157: PPUSH
28158: CALL_OW 264
28162: PUSH
28163: LD_INT 47
28165: PUSH
28166: EMPTY
28167: LIST
28168: IN
28169: IFFALSE 28190
// points := [ 67 , 45 , 75 ] ;
28171: LD_ADDR_VAR 0 9
28175: PUSH
28176: LD_INT 67
28178: PUSH
28179: LD_INT 45
28181: PUSH
28182: LD_INT 75
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28190: LD_VAR 0 6
28194: PPUSH
28195: CALL_OW 264
28199: PUSH
28200: LD_INT 26
28202: PUSH
28203: EMPTY
28204: LIST
28205: IN
28206: IFFALSE 28227
// points := [ 120 , 30 , 80 ] ;
28208: LD_ADDR_VAR 0 9
28212: PUSH
28213: LD_INT 120
28215: PUSH
28216: LD_INT 30
28218: PUSH
28219: LD_INT 80
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28227: LD_VAR 0 6
28231: PPUSH
28232: CALL_OW 264
28236: PUSH
28237: LD_INT 22
28239: PUSH
28240: EMPTY
28241: LIST
28242: IN
28243: IFFALSE 28264
// points := [ 40 , 1 , 1 ] ;
28245: LD_ADDR_VAR 0 9
28249: PUSH
28250: LD_INT 40
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28264: LD_VAR 0 6
28268: PPUSH
28269: CALL_OW 264
28273: PUSH
28274: LD_INT 29
28276: PUSH
28277: EMPTY
28278: LIST
28279: IN
28280: IFFALSE 28301
// points := [ 70 , 200 , 400 ] ;
28282: LD_ADDR_VAR 0 9
28286: PUSH
28287: LD_INT 70
28289: PUSH
28290: LD_INT 200
28292: PUSH
28293: LD_INT 400
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: LIST
28300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28301: LD_VAR 0 6
28305: PPUSH
28306: CALL_OW 264
28310: PUSH
28311: LD_INT 14
28313: PUSH
28314: LD_INT 53
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: IN
28321: IFFALSE 28342
// points := [ 40 , 10 , 20 ] ;
28323: LD_ADDR_VAR 0 9
28327: PUSH
28328: LD_INT 40
28330: PUSH
28331: LD_INT 10
28333: PUSH
28334: LD_INT 20
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: LIST
28341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28342: LD_VAR 0 6
28346: PPUSH
28347: CALL_OW 264
28351: PUSH
28352: LD_INT 9
28354: PUSH
28355: EMPTY
28356: LIST
28357: IN
28358: IFFALSE 28379
// points := [ 5 , 70 , 20 ] ;
28360: LD_ADDR_VAR 0 9
28364: PUSH
28365: LD_INT 5
28367: PUSH
28368: LD_INT 70
28370: PUSH
28371: LD_INT 20
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28379: LD_VAR 0 6
28383: PPUSH
28384: CALL_OW 264
28388: PUSH
28389: LD_INT 10
28391: PUSH
28392: EMPTY
28393: LIST
28394: IN
28395: IFFALSE 28416
// points := [ 35 , 110 , 70 ] ;
28397: LD_ADDR_VAR 0 9
28401: PUSH
28402: LD_INT 35
28404: PUSH
28405: LD_INT 110
28407: PUSH
28408: LD_INT 70
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28416: LD_VAR 0 6
28420: PPUSH
28421: CALL_OW 265
28425: PUSH
28426: LD_INT 25
28428: EQUAL
28429: IFFALSE 28450
// points := [ 80 , 65 , 100 ] ;
28431: LD_ADDR_VAR 0 9
28435: PUSH
28436: LD_INT 80
28438: PUSH
28439: LD_INT 65
28441: PUSH
28442: LD_INT 100
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: LIST
28449: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28450: LD_VAR 0 6
28454: PPUSH
28455: CALL_OW 263
28459: PUSH
28460: LD_INT 1
28462: EQUAL
28463: IFFALSE 28498
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28465: LD_ADDR_VAR 0 10
28469: PUSH
28470: LD_VAR 0 10
28474: PUSH
28475: LD_VAR 0 6
28479: PPUSH
28480: CALL_OW 311
28484: PPUSH
28485: LD_INT 3
28487: PPUSH
28488: CALL_OW 259
28492: PUSH
28493: LD_INT 4
28495: MUL
28496: MUL
28497: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28498: LD_VAR 0 6
28502: PPUSH
28503: CALL_OW 263
28507: PUSH
28508: LD_INT 2
28510: EQUAL
28511: IFFALSE 28562
// begin j := IsControledBy ( i ) ;
28513: LD_ADDR_VAR 0 7
28517: PUSH
28518: LD_VAR 0 6
28522: PPUSH
28523: CALL_OW 312
28527: ST_TO_ADDR
// if j then
28528: LD_VAR 0 7
28532: IFFALSE 28562
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28534: LD_ADDR_VAR 0 10
28538: PUSH
28539: LD_VAR 0 10
28543: PUSH
28544: LD_VAR 0 7
28548: PPUSH
28549: LD_INT 3
28551: PPUSH
28552: CALL_OW 259
28556: PUSH
28557: LD_INT 3
28559: MUL
28560: MUL
28561: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28562: LD_VAR 0 6
28566: PPUSH
28567: CALL_OW 264
28571: PUSH
28572: LD_INT 5
28574: PUSH
28575: LD_INT 6
28577: PUSH
28578: LD_INT 46
28580: PUSH
28581: LD_INT 44
28583: PUSH
28584: LD_INT 47
28586: PUSH
28587: LD_INT 45
28589: PUSH
28590: LD_INT 28
28592: PUSH
28593: LD_INT 7
28595: PUSH
28596: LD_INT 27
28598: PUSH
28599: LD_INT 29
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: IN
28614: PUSH
28615: LD_VAR 0 1
28619: PPUSH
28620: LD_INT 52
28622: PPUSH
28623: CALL_OW 321
28627: PUSH
28628: LD_INT 2
28630: EQUAL
28631: AND
28632: IFFALSE 28649
// bpoints := bpoints * 1.2 ;
28634: LD_ADDR_VAR 0 10
28638: PUSH
28639: LD_VAR 0 10
28643: PUSH
28644: LD_REAL  1.20000000000000E+0000
28647: MUL
28648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28649: LD_VAR 0 6
28653: PPUSH
28654: CALL_OW 264
28658: PUSH
28659: LD_INT 6
28661: PUSH
28662: LD_INT 46
28664: PUSH
28665: LD_INT 47
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: IN
28673: IFFALSE 28690
// bpoints := bpoints * 1.2 ;
28675: LD_ADDR_VAR 0 10
28679: PUSH
28680: LD_VAR 0 10
28684: PUSH
28685: LD_REAL  1.20000000000000E+0000
28688: MUL
28689: ST_TO_ADDR
// end ; unit_building :
28690: GO 28704
28692: LD_INT 3
28694: DOUBLE
28695: EQUAL
28696: IFTRUE 28700
28698: GO 28703
28700: POP
// ; end ;
28701: GO 28704
28703: POP
// for j = 1 to 3 do
28704: LD_ADDR_VAR 0 7
28708: PUSH
28709: DOUBLE
28710: LD_INT 1
28712: DEC
28713: ST_TO_ADDR
28714: LD_INT 3
28716: PUSH
28717: FOR_TO
28718: IFFALSE 28771
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28720: LD_ADDR_VAR 0 5
28724: PUSH
28725: LD_VAR 0 5
28729: PPUSH
28730: LD_VAR 0 7
28734: PPUSH
28735: LD_VAR 0 5
28739: PUSH
28740: LD_VAR 0 7
28744: ARRAY
28745: PUSH
28746: LD_VAR 0 9
28750: PUSH
28751: LD_VAR 0 7
28755: ARRAY
28756: PUSH
28757: LD_VAR 0 10
28761: MUL
28762: PLUS
28763: PPUSH
28764: CALL_OW 1
28768: ST_TO_ADDR
28769: GO 28717
28771: POP
28772: POP
// end ;
28773: GO 27256
28775: POP
28776: POP
// result := Replace ( result , 4 , tmp ) ;
28777: LD_ADDR_VAR 0 5
28781: PUSH
28782: LD_VAR 0 5
28786: PPUSH
28787: LD_INT 4
28789: PPUSH
28790: LD_VAR 0 8
28794: PPUSH
28795: CALL_OW 1
28799: ST_TO_ADDR
// end ;
28800: LD_VAR 0 5
28804: RET
// export function DangerAtRange ( unit , range ) ; begin
28805: LD_INT 0
28807: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_VAR 0 1
28817: PPUSH
28818: CALL_OW 255
28822: PPUSH
28823: LD_VAR 0 1
28827: PPUSH
28828: CALL_OW 250
28832: PPUSH
28833: LD_VAR 0 1
28837: PPUSH
28838: CALL_OW 251
28842: PPUSH
28843: LD_VAR 0 2
28847: PPUSH
28848: CALL 27108 0 4
28852: ST_TO_ADDR
// end ;
28853: LD_VAR 0 3
28857: RET
// export function DangerInArea ( side , area ) ; begin
28858: LD_INT 0
28860: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28861: LD_ADDR_VAR 0 3
28865: PUSH
28866: LD_VAR 0 2
28870: PPUSH
28871: LD_INT 81
28873: PUSH
28874: LD_VAR 0 1
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PPUSH
28883: CALL_OW 70
28887: ST_TO_ADDR
// end ;
28888: LD_VAR 0 3
28892: RET
// export function IsExtension ( b ) ; begin
28893: LD_INT 0
28895: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28896: LD_ADDR_VAR 0 2
28900: PUSH
28901: LD_VAR 0 1
28905: PUSH
28906: LD_INT 23
28908: PUSH
28909: LD_INT 20
28911: PUSH
28912: LD_INT 22
28914: PUSH
28915: LD_INT 17
28917: PUSH
28918: LD_INT 24
28920: PUSH
28921: LD_INT 21
28923: PUSH
28924: LD_INT 19
28926: PUSH
28927: LD_INT 16
28929: PUSH
28930: LD_INT 25
28932: PUSH
28933: LD_INT 18
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: IN
28948: ST_TO_ADDR
// end ;
28949: LD_VAR 0 2
28953: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28954: LD_INT 0
28956: PPUSH
28957: PPUSH
28958: PPUSH
// result := [ ] ;
28959: LD_ADDR_VAR 0 3
28963: PUSH
28964: EMPTY
28965: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28966: LD_ADDR_VAR 0 4
28970: PUSH
28971: LD_VAR 0 2
28975: PPUSH
28976: LD_INT 21
28978: PUSH
28979: LD_INT 3
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PPUSH
28986: CALL_OW 70
28990: ST_TO_ADDR
// if not tmp then
28991: LD_VAR 0 4
28995: NOT
28996: IFFALSE 29000
// exit ;
28998: GO 29058
// for i in tmp do
29000: LD_ADDR_VAR 0 5
29004: PUSH
29005: LD_VAR 0 4
29009: PUSH
29010: FOR_IN
29011: IFFALSE 29046
// if GetBase ( i ) <> base then
29013: LD_VAR 0 5
29017: PPUSH
29018: CALL_OW 274
29022: PUSH
29023: LD_VAR 0 1
29027: NONEQUAL
29028: IFFALSE 29044
// ComLinkToBase ( base , i ) ;
29030: LD_VAR 0 1
29034: PPUSH
29035: LD_VAR 0 5
29039: PPUSH
29040: CALL_OW 169
29044: GO 29010
29046: POP
29047: POP
// result := tmp ;
29048: LD_ADDR_VAR 0 3
29052: PUSH
29053: LD_VAR 0 4
29057: ST_TO_ADDR
// end ;
29058: LD_VAR 0 3
29062: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29063: LD_INT 0
29065: PPUSH
29066: PPUSH
// if BuildingStatus ( b ) = bs_build then
29067: LD_VAR 0 2
29071: PPUSH
29072: CALL_OW 461
29076: PUSH
29077: LD_INT 1
29079: EQUAL
29080: IFFALSE 29140
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29082: LD_VAR 0 1
29086: PPUSH
29087: LD_STRING h
29089: PUSH
29090: LD_VAR 0 2
29094: PPUSH
29095: CALL_OW 250
29099: PUSH
29100: LD_VAR 0 2
29104: PPUSH
29105: CALL_OW 251
29109: PUSH
29110: LD_VAR 0 2
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: PPUSH
29136: CALL_OW 446
// end ;
29140: LD_VAR 0 3
29144: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29145: LD_INT 0
29147: PPUSH
29148: PPUSH
29149: PPUSH
29150: PPUSH
29151: PPUSH
29152: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29153: LD_VAR 0 1
29157: NOT
29158: PUSH
29159: LD_VAR 0 1
29163: PPUSH
29164: CALL_OW 263
29168: PUSH
29169: LD_INT 2
29171: EQUAL
29172: NOT
29173: OR
29174: IFFALSE 29178
// exit ;
29176: GO 29494
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29178: LD_ADDR_VAR 0 6
29182: PUSH
29183: LD_INT 22
29185: PUSH
29186: LD_VAR 0 1
29190: PPUSH
29191: CALL_OW 255
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: LD_INT 30
29205: PUSH
29206: LD_INT 36
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 34
29215: PUSH
29216: LD_INT 31
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PPUSH
29232: CALL_OW 69
29236: ST_TO_ADDR
// if not tmp then
29237: LD_VAR 0 6
29241: NOT
29242: IFFALSE 29246
// exit ;
29244: GO 29494
// result := [ ] ;
29246: LD_ADDR_VAR 0 2
29250: PUSH
29251: EMPTY
29252: ST_TO_ADDR
// for i in tmp do
29253: LD_ADDR_VAR 0 3
29257: PUSH
29258: LD_VAR 0 6
29262: PUSH
29263: FOR_IN
29264: IFFALSE 29335
// begin t := UnitsInside ( i ) ;
29266: LD_ADDR_VAR 0 4
29270: PUSH
29271: LD_VAR 0 3
29275: PPUSH
29276: CALL_OW 313
29280: ST_TO_ADDR
// if t then
29281: LD_VAR 0 4
29285: IFFALSE 29333
// for j in t do
29287: LD_ADDR_VAR 0 7
29291: PUSH
29292: LD_VAR 0 4
29296: PUSH
29297: FOR_IN
29298: IFFALSE 29331
// result := Insert ( result , result + 1 , j ) ;
29300: LD_ADDR_VAR 0 2
29304: PUSH
29305: LD_VAR 0 2
29309: PPUSH
29310: LD_VAR 0 2
29314: PUSH
29315: LD_INT 1
29317: PLUS
29318: PPUSH
29319: LD_VAR 0 7
29323: PPUSH
29324: CALL_OW 2
29328: ST_TO_ADDR
29329: GO 29297
29331: POP
29332: POP
// end ;
29333: GO 29263
29335: POP
29336: POP
// if not result then
29337: LD_VAR 0 2
29341: NOT
29342: IFFALSE 29346
// exit ;
29344: GO 29494
// mech := result [ 1 ] ;
29346: LD_ADDR_VAR 0 5
29350: PUSH
29351: LD_VAR 0 2
29355: PUSH
29356: LD_INT 1
29358: ARRAY
29359: ST_TO_ADDR
// if result > 1 then
29360: LD_VAR 0 2
29364: PUSH
29365: LD_INT 1
29367: GREATER
29368: IFFALSE 29480
// for i = 2 to result do
29370: LD_ADDR_VAR 0 3
29374: PUSH
29375: DOUBLE
29376: LD_INT 2
29378: DEC
29379: ST_TO_ADDR
29380: LD_VAR 0 2
29384: PUSH
29385: FOR_TO
29386: IFFALSE 29478
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29388: LD_ADDR_VAR 0 4
29392: PUSH
29393: LD_VAR 0 2
29397: PUSH
29398: LD_VAR 0 3
29402: ARRAY
29403: PPUSH
29404: LD_INT 3
29406: PPUSH
29407: CALL_OW 259
29411: PUSH
29412: LD_VAR 0 2
29416: PUSH
29417: LD_VAR 0 3
29421: ARRAY
29422: PPUSH
29423: CALL_OW 432
29427: MINUS
29428: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29429: LD_VAR 0 4
29433: PUSH
29434: LD_VAR 0 5
29438: PPUSH
29439: LD_INT 3
29441: PPUSH
29442: CALL_OW 259
29446: PUSH
29447: LD_VAR 0 5
29451: PPUSH
29452: CALL_OW 432
29456: MINUS
29457: GREATEREQUAL
29458: IFFALSE 29476
// mech := result [ i ] ;
29460: LD_ADDR_VAR 0 5
29464: PUSH
29465: LD_VAR 0 2
29469: PUSH
29470: LD_VAR 0 3
29474: ARRAY
29475: ST_TO_ADDR
// end ;
29476: GO 29385
29478: POP
29479: POP
// ComLinkTo ( vehicle , mech ) ;
29480: LD_VAR 0 1
29484: PPUSH
29485: LD_VAR 0 5
29489: PPUSH
29490: CALL_OW 135
// end ;
29494: LD_VAR 0 2
29498: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29499: LD_INT 0
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
29507: PPUSH
29508: PPUSH
29509: PPUSH
29510: PPUSH
29511: PPUSH
29512: PPUSH
29513: PPUSH
// result := [ ] ;
29514: LD_ADDR_VAR 0 7
29518: PUSH
29519: EMPTY
29520: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29521: LD_VAR 0 1
29525: PPUSH
29526: CALL_OW 266
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: IN
29541: NOT
29542: IFFALSE 29546
// exit ;
29544: GO 31177
// if name then
29546: LD_VAR 0 3
29550: IFFALSE 29566
// SetBName ( base_dep , name ) ;
29552: LD_VAR 0 1
29556: PPUSH
29557: LD_VAR 0 3
29561: PPUSH
29562: CALL_OW 500
// base := GetBase ( base_dep ) ;
29566: LD_ADDR_VAR 0 15
29570: PUSH
29571: LD_VAR 0 1
29575: PPUSH
29576: CALL_OW 274
29580: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29581: LD_ADDR_VAR 0 16
29585: PUSH
29586: LD_VAR 0 1
29590: PPUSH
29591: CALL_OW 255
29595: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29596: LD_ADDR_VAR 0 17
29600: PUSH
29601: LD_VAR 0 1
29605: PPUSH
29606: CALL_OW 248
29610: ST_TO_ADDR
// if sources then
29611: LD_VAR 0 5
29615: IFFALSE 29662
// for i = 1 to 3 do
29617: LD_ADDR_VAR 0 8
29621: PUSH
29622: DOUBLE
29623: LD_INT 1
29625: DEC
29626: ST_TO_ADDR
29627: LD_INT 3
29629: PUSH
29630: FOR_TO
29631: IFFALSE 29660
// AddResourceType ( base , i , sources [ i ] ) ;
29633: LD_VAR 0 15
29637: PPUSH
29638: LD_VAR 0 8
29642: PPUSH
29643: LD_VAR 0 5
29647: PUSH
29648: LD_VAR 0 8
29652: ARRAY
29653: PPUSH
29654: CALL_OW 276
29658: GO 29630
29660: POP
29661: POP
// buildings := GetBaseBuildings ( base , area ) ;
29662: LD_ADDR_VAR 0 18
29666: PUSH
29667: LD_VAR 0 15
29671: PPUSH
29672: LD_VAR 0 2
29676: PPUSH
29677: CALL 28954 0 2
29681: ST_TO_ADDR
// InitHc ;
29682: CALL_OW 19
// InitUc ;
29686: CALL_OW 18
// uc_side := side ;
29690: LD_ADDR_OWVAR 20
29694: PUSH
29695: LD_VAR 0 16
29699: ST_TO_ADDR
// uc_nation := nation ;
29700: LD_ADDR_OWVAR 21
29704: PUSH
29705: LD_VAR 0 17
29709: ST_TO_ADDR
// if buildings then
29710: LD_VAR 0 18
29714: IFFALSE 31036
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29716: LD_ADDR_VAR 0 19
29720: PUSH
29721: LD_VAR 0 18
29725: PPUSH
29726: LD_INT 2
29728: PUSH
29729: LD_INT 30
29731: PUSH
29732: LD_INT 29
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 30
29741: PUSH
29742: LD_INT 30
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: LIST
29753: PPUSH
29754: CALL_OW 72
29758: ST_TO_ADDR
// if tmp then
29759: LD_VAR 0 19
29763: IFFALSE 29811
// for i in tmp do
29765: LD_ADDR_VAR 0 8
29769: PUSH
29770: LD_VAR 0 19
29774: PUSH
29775: FOR_IN
29776: IFFALSE 29809
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29778: LD_VAR 0 8
29782: PPUSH
29783: CALL_OW 250
29787: PPUSH
29788: LD_VAR 0 8
29792: PPUSH
29793: CALL_OW 251
29797: PPUSH
29798: LD_VAR 0 16
29802: PPUSH
29803: CALL_OW 441
29807: GO 29775
29809: POP
29810: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29811: LD_VAR 0 18
29815: PPUSH
29816: LD_INT 2
29818: PUSH
29819: LD_INT 30
29821: PUSH
29822: LD_INT 32
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 30
29831: PUSH
29832: LD_INT 33
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: PPUSH
29844: CALL_OW 72
29848: IFFALSE 29936
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29850: LD_ADDR_VAR 0 8
29854: PUSH
29855: LD_VAR 0 18
29859: PPUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 30
29865: PUSH
29866: LD_INT 32
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 30
29875: PUSH
29876: LD_INT 33
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: LIST
29887: PPUSH
29888: CALL_OW 72
29892: PUSH
29893: FOR_IN
29894: IFFALSE 29934
// begin if not GetBWeapon ( i ) then
29896: LD_VAR 0 8
29900: PPUSH
29901: CALL_OW 269
29905: NOT
29906: IFFALSE 29932
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29908: LD_VAR 0 8
29912: PPUSH
29913: LD_VAR 0 8
29917: PPUSH
29918: LD_VAR 0 2
29922: PPUSH
29923: CALL 31182 0 2
29927: PPUSH
29928: CALL_OW 431
// end ;
29932: GO 29893
29934: POP
29935: POP
// end ; for i = 1 to personel do
29936: LD_ADDR_VAR 0 8
29940: PUSH
29941: DOUBLE
29942: LD_INT 1
29944: DEC
29945: ST_TO_ADDR
29946: LD_VAR 0 6
29950: PUSH
29951: FOR_TO
29952: IFFALSE 31016
// begin if i > 4 then
29954: LD_VAR 0 8
29958: PUSH
29959: LD_INT 4
29961: GREATER
29962: IFFALSE 29966
// break ;
29964: GO 31016
// case i of 1 :
29966: LD_VAR 0 8
29970: PUSH
29971: LD_INT 1
29973: DOUBLE
29974: EQUAL
29975: IFTRUE 29979
29977: GO 30059
29979: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29980: LD_ADDR_VAR 0 12
29984: PUSH
29985: LD_VAR 0 18
29989: PPUSH
29990: LD_INT 22
29992: PUSH
29993: LD_VAR 0 16
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 58
30004: PUSH
30005: EMPTY
30006: LIST
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: LD_INT 30
30013: PUSH
30014: LD_INT 32
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 30
30023: PUSH
30024: LD_INT 4
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 30
30033: PUSH
30034: LD_INT 5
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: LIST
30051: PPUSH
30052: CALL_OW 72
30056: ST_TO_ADDR
30057: GO 30281
30059: LD_INT 2
30061: DOUBLE
30062: EQUAL
30063: IFTRUE 30067
30065: GO 30129
30067: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30068: LD_ADDR_VAR 0 12
30072: PUSH
30073: LD_VAR 0 18
30077: PPUSH
30078: LD_INT 22
30080: PUSH
30081: LD_VAR 0 16
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 2
30092: PUSH
30093: LD_INT 30
30095: PUSH
30096: LD_INT 0
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 30
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PPUSH
30122: CALL_OW 72
30126: ST_TO_ADDR
30127: GO 30281
30129: LD_INT 3
30131: DOUBLE
30132: EQUAL
30133: IFTRUE 30137
30135: GO 30199
30137: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30138: LD_ADDR_VAR 0 12
30142: PUSH
30143: LD_VAR 0 18
30147: PPUSH
30148: LD_INT 22
30150: PUSH
30151: LD_VAR 0 16
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 2
30162: PUSH
30163: LD_INT 30
30165: PUSH
30166: LD_INT 2
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 30
30175: PUSH
30176: LD_INT 3
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: LIST
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PPUSH
30192: CALL_OW 72
30196: ST_TO_ADDR
30197: GO 30281
30199: LD_INT 4
30201: DOUBLE
30202: EQUAL
30203: IFTRUE 30207
30205: GO 30280
30207: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30208: LD_ADDR_VAR 0 12
30212: PUSH
30213: LD_VAR 0 18
30217: PPUSH
30218: LD_INT 22
30220: PUSH
30221: LD_VAR 0 16
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: LD_INT 30
30235: PUSH
30236: LD_INT 6
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 30
30245: PUSH
30246: LD_INT 7
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 30
30255: PUSH
30256: LD_INT 8
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PPUSH
30273: CALL_OW 72
30277: ST_TO_ADDR
30278: GO 30281
30280: POP
// if i = 1 then
30281: LD_VAR 0 8
30285: PUSH
30286: LD_INT 1
30288: EQUAL
30289: IFFALSE 30400
// begin tmp := [ ] ;
30291: LD_ADDR_VAR 0 19
30295: PUSH
30296: EMPTY
30297: ST_TO_ADDR
// for j in f do
30298: LD_ADDR_VAR 0 9
30302: PUSH
30303: LD_VAR 0 12
30307: PUSH
30308: FOR_IN
30309: IFFALSE 30382
// if GetBType ( j ) = b_bunker then
30311: LD_VAR 0 9
30315: PPUSH
30316: CALL_OW 266
30320: PUSH
30321: LD_INT 32
30323: EQUAL
30324: IFFALSE 30351
// tmp := Insert ( tmp , 1 , j ) else
30326: LD_ADDR_VAR 0 19
30330: PUSH
30331: LD_VAR 0 19
30335: PPUSH
30336: LD_INT 1
30338: PPUSH
30339: LD_VAR 0 9
30343: PPUSH
30344: CALL_OW 2
30348: ST_TO_ADDR
30349: GO 30380
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30351: LD_ADDR_VAR 0 19
30355: PUSH
30356: LD_VAR 0 19
30360: PPUSH
30361: LD_VAR 0 19
30365: PUSH
30366: LD_INT 1
30368: PLUS
30369: PPUSH
30370: LD_VAR 0 9
30374: PPUSH
30375: CALL_OW 2
30379: ST_TO_ADDR
30380: GO 30308
30382: POP
30383: POP
// if tmp then
30384: LD_VAR 0 19
30388: IFFALSE 30400
// f := tmp ;
30390: LD_ADDR_VAR 0 12
30394: PUSH
30395: LD_VAR 0 19
30399: ST_TO_ADDR
// end ; x := personel [ i ] ;
30400: LD_ADDR_VAR 0 13
30404: PUSH
30405: LD_VAR 0 6
30409: PUSH
30410: LD_VAR 0 8
30414: ARRAY
30415: ST_TO_ADDR
// if x = - 1 then
30416: LD_VAR 0 13
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: EQUAL
30425: IFFALSE 30634
// begin for j in f do
30427: LD_ADDR_VAR 0 9
30431: PUSH
30432: LD_VAR 0 12
30436: PUSH
30437: FOR_IN
30438: IFFALSE 30630
// repeat InitHc ;
30440: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30444: LD_VAR 0 9
30448: PPUSH
30449: CALL_OW 266
30453: PUSH
30454: LD_INT 5
30456: EQUAL
30457: IFFALSE 30527
// begin if UnitsInside ( j ) < 3 then
30459: LD_VAR 0 9
30463: PPUSH
30464: CALL_OW 313
30468: PUSH
30469: LD_INT 3
30471: LESS
30472: IFFALSE 30508
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30474: LD_INT 0
30476: PPUSH
30477: LD_INT 5
30479: PUSH
30480: LD_INT 8
30482: PUSH
30483: LD_INT 9
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: PUSH
30491: LD_VAR 0 17
30495: ARRAY
30496: PPUSH
30497: LD_VAR 0 4
30501: PPUSH
30502: CALL_OW 380
30506: GO 30525
// PrepareHuman ( false , i , skill ) ;
30508: LD_INT 0
30510: PPUSH
30511: LD_VAR 0 8
30515: PPUSH
30516: LD_VAR 0 4
30520: PPUSH
30521: CALL_OW 380
// end else
30525: GO 30544
// PrepareHuman ( false , i , skill ) ;
30527: LD_INT 0
30529: PPUSH
30530: LD_VAR 0 8
30534: PPUSH
30535: LD_VAR 0 4
30539: PPUSH
30540: CALL_OW 380
// un := CreateHuman ;
30544: LD_ADDR_VAR 0 14
30548: PUSH
30549: CALL_OW 44
30553: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30554: LD_ADDR_VAR 0 7
30558: PUSH
30559: LD_VAR 0 7
30563: PPUSH
30564: LD_INT 1
30566: PPUSH
30567: LD_VAR 0 14
30571: PPUSH
30572: CALL_OW 2
30576: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30577: LD_VAR 0 14
30581: PPUSH
30582: LD_VAR 0 9
30586: PPUSH
30587: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30591: LD_VAR 0 9
30595: PPUSH
30596: CALL_OW 313
30600: PUSH
30601: LD_INT 6
30603: EQUAL
30604: PUSH
30605: LD_VAR 0 9
30609: PPUSH
30610: CALL_OW 266
30614: PUSH
30615: LD_INT 32
30617: PUSH
30618: LD_INT 31
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: IN
30625: OR
30626: IFFALSE 30440
30628: GO 30437
30630: POP
30631: POP
// end else
30632: GO 31014
// for j = 1 to x do
30634: LD_ADDR_VAR 0 9
30638: PUSH
30639: DOUBLE
30640: LD_INT 1
30642: DEC
30643: ST_TO_ADDR
30644: LD_VAR 0 13
30648: PUSH
30649: FOR_TO
30650: IFFALSE 31012
// begin InitHc ;
30652: CALL_OW 19
// if not f then
30656: LD_VAR 0 12
30660: NOT
30661: IFFALSE 30750
// begin PrepareHuman ( false , i , skill ) ;
30663: LD_INT 0
30665: PPUSH
30666: LD_VAR 0 8
30670: PPUSH
30671: LD_VAR 0 4
30675: PPUSH
30676: CALL_OW 380
// un := CreateHuman ;
30680: LD_ADDR_VAR 0 14
30684: PUSH
30685: CALL_OW 44
30689: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30690: LD_ADDR_VAR 0 7
30694: PUSH
30695: LD_VAR 0 7
30699: PPUSH
30700: LD_INT 1
30702: PPUSH
30703: LD_VAR 0 14
30707: PPUSH
30708: CALL_OW 2
30712: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30713: LD_VAR 0 14
30717: PPUSH
30718: LD_VAR 0 1
30722: PPUSH
30723: CALL_OW 250
30727: PPUSH
30728: LD_VAR 0 1
30732: PPUSH
30733: CALL_OW 251
30737: PPUSH
30738: LD_INT 10
30740: PPUSH
30741: LD_INT 0
30743: PPUSH
30744: CALL_OW 50
// continue ;
30748: GO 30649
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30750: LD_VAR 0 12
30754: PUSH
30755: LD_INT 1
30757: ARRAY
30758: PPUSH
30759: CALL_OW 313
30763: PUSH
30764: LD_VAR 0 12
30768: PUSH
30769: LD_INT 1
30771: ARRAY
30772: PPUSH
30773: CALL_OW 266
30777: PUSH
30778: LD_INT 32
30780: PUSH
30781: LD_INT 31
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: IN
30788: AND
30789: PUSH
30790: LD_VAR 0 12
30794: PUSH
30795: LD_INT 1
30797: ARRAY
30798: PPUSH
30799: CALL_OW 313
30803: PUSH
30804: LD_INT 6
30806: EQUAL
30807: OR
30808: IFFALSE 30828
// f := Delete ( f , 1 ) ;
30810: LD_ADDR_VAR 0 12
30814: PUSH
30815: LD_VAR 0 12
30819: PPUSH
30820: LD_INT 1
30822: PPUSH
30823: CALL_OW 3
30827: ST_TO_ADDR
// if not f then
30828: LD_VAR 0 12
30832: NOT
30833: IFFALSE 30851
// begin x := x + 2 ;
30835: LD_ADDR_VAR 0 13
30839: PUSH
30840: LD_VAR 0 13
30844: PUSH
30845: LD_INT 2
30847: PLUS
30848: ST_TO_ADDR
// continue ;
30849: GO 30649
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30851: LD_VAR 0 12
30855: PUSH
30856: LD_INT 1
30858: ARRAY
30859: PPUSH
30860: CALL_OW 266
30864: PUSH
30865: LD_INT 5
30867: EQUAL
30868: IFFALSE 30942
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30870: LD_VAR 0 12
30874: PUSH
30875: LD_INT 1
30877: ARRAY
30878: PPUSH
30879: CALL_OW 313
30883: PUSH
30884: LD_INT 3
30886: LESS
30887: IFFALSE 30923
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30889: LD_INT 0
30891: PPUSH
30892: LD_INT 5
30894: PUSH
30895: LD_INT 8
30897: PUSH
30898: LD_INT 9
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: PUSH
30906: LD_VAR 0 17
30910: ARRAY
30911: PPUSH
30912: LD_VAR 0 4
30916: PPUSH
30917: CALL_OW 380
30921: GO 30940
// PrepareHuman ( false , i , skill ) ;
30923: LD_INT 0
30925: PPUSH
30926: LD_VAR 0 8
30930: PPUSH
30931: LD_VAR 0 4
30935: PPUSH
30936: CALL_OW 380
// end else
30940: GO 30959
// PrepareHuman ( false , i , skill ) ;
30942: LD_INT 0
30944: PPUSH
30945: LD_VAR 0 8
30949: PPUSH
30950: LD_VAR 0 4
30954: PPUSH
30955: CALL_OW 380
// un := CreateHuman ;
30959: LD_ADDR_VAR 0 14
30963: PUSH
30964: CALL_OW 44
30968: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30969: LD_ADDR_VAR 0 7
30973: PUSH
30974: LD_VAR 0 7
30978: PPUSH
30979: LD_INT 1
30981: PPUSH
30982: LD_VAR 0 14
30986: PPUSH
30987: CALL_OW 2
30991: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30992: LD_VAR 0 14
30996: PPUSH
30997: LD_VAR 0 12
31001: PUSH
31002: LD_INT 1
31004: ARRAY
31005: PPUSH
31006: CALL_OW 52
// end ;
31010: GO 30649
31012: POP
31013: POP
// end ;
31014: GO 29951
31016: POP
31017: POP
// result := result ^ buildings ;
31018: LD_ADDR_VAR 0 7
31022: PUSH
31023: LD_VAR 0 7
31027: PUSH
31028: LD_VAR 0 18
31032: ADD
31033: ST_TO_ADDR
// end else
31034: GO 31177
// begin for i = 1 to personel do
31036: LD_ADDR_VAR 0 8
31040: PUSH
31041: DOUBLE
31042: LD_INT 1
31044: DEC
31045: ST_TO_ADDR
31046: LD_VAR 0 6
31050: PUSH
31051: FOR_TO
31052: IFFALSE 31175
// begin if i > 4 then
31054: LD_VAR 0 8
31058: PUSH
31059: LD_INT 4
31061: GREATER
31062: IFFALSE 31066
// break ;
31064: GO 31175
// x := personel [ i ] ;
31066: LD_ADDR_VAR 0 13
31070: PUSH
31071: LD_VAR 0 6
31075: PUSH
31076: LD_VAR 0 8
31080: ARRAY
31081: ST_TO_ADDR
// if x = - 1 then
31082: LD_VAR 0 13
31086: PUSH
31087: LD_INT 1
31089: NEG
31090: EQUAL
31091: IFFALSE 31095
// continue ;
31093: GO 31051
// PrepareHuman ( false , i , skill ) ;
31095: LD_INT 0
31097: PPUSH
31098: LD_VAR 0 8
31102: PPUSH
31103: LD_VAR 0 4
31107: PPUSH
31108: CALL_OW 380
// un := CreateHuman ;
31112: LD_ADDR_VAR 0 14
31116: PUSH
31117: CALL_OW 44
31121: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31122: LD_VAR 0 14
31126: PPUSH
31127: LD_VAR 0 1
31131: PPUSH
31132: CALL_OW 250
31136: PPUSH
31137: LD_VAR 0 1
31141: PPUSH
31142: CALL_OW 251
31146: PPUSH
31147: LD_INT 10
31149: PPUSH
31150: LD_INT 0
31152: PPUSH
31153: CALL_OW 50
// result := result ^ un ;
31157: LD_ADDR_VAR 0 7
31161: PUSH
31162: LD_VAR 0 7
31166: PUSH
31167: LD_VAR 0 14
31171: ADD
31172: ST_TO_ADDR
// end ;
31173: GO 31051
31175: POP
31176: POP
// end ; end ;
31177: LD_VAR 0 7
31181: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31182: LD_INT 0
31184: PPUSH
31185: PPUSH
31186: PPUSH
31187: PPUSH
31188: PPUSH
31189: PPUSH
31190: PPUSH
31191: PPUSH
31192: PPUSH
31193: PPUSH
31194: PPUSH
31195: PPUSH
31196: PPUSH
31197: PPUSH
31198: PPUSH
31199: PPUSH
// result := false ;
31200: LD_ADDR_VAR 0 3
31204: PUSH
31205: LD_INT 0
31207: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31208: LD_VAR 0 1
31212: NOT
31213: PUSH
31214: LD_VAR 0 1
31218: PPUSH
31219: CALL_OW 266
31223: PUSH
31224: LD_INT 32
31226: PUSH
31227: LD_INT 33
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: IN
31234: NOT
31235: OR
31236: IFFALSE 31240
// exit ;
31238: GO 32376
// nat := GetNation ( tower ) ;
31240: LD_ADDR_VAR 0 12
31244: PUSH
31245: LD_VAR 0 1
31249: PPUSH
31250: CALL_OW 248
31254: ST_TO_ADDR
// side := GetSide ( tower ) ;
31255: LD_ADDR_VAR 0 16
31259: PUSH
31260: LD_VAR 0 1
31264: PPUSH
31265: CALL_OW 255
31269: ST_TO_ADDR
// x := GetX ( tower ) ;
31270: LD_ADDR_VAR 0 10
31274: PUSH
31275: LD_VAR 0 1
31279: PPUSH
31280: CALL_OW 250
31284: ST_TO_ADDR
// y := GetY ( tower ) ;
31285: LD_ADDR_VAR 0 11
31289: PUSH
31290: LD_VAR 0 1
31294: PPUSH
31295: CALL_OW 251
31299: ST_TO_ADDR
// if not x or not y then
31300: LD_VAR 0 10
31304: NOT
31305: PUSH
31306: LD_VAR 0 11
31310: NOT
31311: OR
31312: IFFALSE 31316
// exit ;
31314: GO 32376
// weapon := 0 ;
31316: LD_ADDR_VAR 0 18
31320: PUSH
31321: LD_INT 0
31323: ST_TO_ADDR
// fac_list := [ ] ;
31324: LD_ADDR_VAR 0 17
31328: PUSH
31329: EMPTY
31330: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31331: LD_ADDR_VAR 0 6
31335: PUSH
31336: LD_VAR 0 1
31340: PPUSH
31341: CALL_OW 274
31345: PPUSH
31346: LD_VAR 0 2
31350: PPUSH
31351: CALL 28954 0 2
31355: PPUSH
31356: LD_INT 30
31358: PUSH
31359: LD_INT 3
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PPUSH
31366: CALL_OW 72
31370: ST_TO_ADDR
// if not factories then
31371: LD_VAR 0 6
31375: NOT
31376: IFFALSE 31380
// exit ;
31378: GO 32376
// for i in factories do
31380: LD_ADDR_VAR 0 8
31384: PUSH
31385: LD_VAR 0 6
31389: PUSH
31390: FOR_IN
31391: IFFALSE 31416
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31393: LD_ADDR_VAR 0 17
31397: PUSH
31398: LD_VAR 0 17
31402: PUSH
31403: LD_VAR 0 8
31407: PPUSH
31408: CALL_OW 478
31412: UNION
31413: ST_TO_ADDR
31414: GO 31390
31416: POP
31417: POP
// if not fac_list then
31418: LD_VAR 0 17
31422: NOT
31423: IFFALSE 31427
// exit ;
31425: GO 32376
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31427: LD_ADDR_VAR 0 5
31431: PUSH
31432: LD_INT 4
31434: PUSH
31435: LD_INT 5
31437: PUSH
31438: LD_INT 9
31440: PUSH
31441: LD_INT 10
31443: PUSH
31444: LD_INT 6
31446: PUSH
31447: LD_INT 7
31449: PUSH
31450: LD_INT 11
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 27
31464: PUSH
31465: LD_INT 28
31467: PUSH
31468: LD_INT 26
31470: PUSH
31471: LD_INT 30
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 43
31482: PUSH
31483: LD_INT 44
31485: PUSH
31486: LD_INT 46
31488: PUSH
31489: LD_INT 45
31491: PUSH
31492: LD_INT 47
31494: PUSH
31495: LD_INT 49
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: LIST
31510: PUSH
31511: LD_VAR 0 12
31515: ARRAY
31516: ST_TO_ADDR
// for i in list do
31517: LD_ADDR_VAR 0 8
31521: PUSH
31522: LD_VAR 0 5
31526: PUSH
31527: FOR_IN
31528: IFFALSE 31561
// if not i in fac_list then
31530: LD_VAR 0 8
31534: PUSH
31535: LD_VAR 0 17
31539: IN
31540: NOT
31541: IFFALSE 31559
// list := list diff i ;
31543: LD_ADDR_VAR 0 5
31547: PUSH
31548: LD_VAR 0 5
31552: PUSH
31553: LD_VAR 0 8
31557: DIFF
31558: ST_TO_ADDR
31559: GO 31527
31561: POP
31562: POP
// if not list then
31563: LD_VAR 0 5
31567: NOT
31568: IFFALSE 31572
// exit ;
31570: GO 32376
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31572: LD_VAR 0 12
31576: PUSH
31577: LD_INT 3
31579: EQUAL
31580: PUSH
31581: LD_INT 49
31583: PUSH
31584: LD_VAR 0 5
31588: IN
31589: AND
31590: PUSH
31591: LD_INT 31
31593: PPUSH
31594: LD_VAR 0 16
31598: PPUSH
31599: CALL_OW 321
31603: PUSH
31604: LD_INT 2
31606: EQUAL
31607: AND
31608: IFFALSE 31668
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31610: LD_INT 22
31612: PUSH
31613: LD_VAR 0 16
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 35
31624: PUSH
31625: LD_INT 49
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 91
31634: PUSH
31635: LD_VAR 0 1
31639: PUSH
31640: LD_INT 10
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: PPUSH
31653: CALL_OW 69
31657: NOT
31658: IFFALSE 31668
// weapon := ru_time_lapser ;
31660: LD_ADDR_VAR 0 18
31664: PUSH
31665: LD_INT 49
31667: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31668: LD_VAR 0 12
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: IN
31683: PUSH
31684: LD_INT 11
31686: PUSH
31687: LD_VAR 0 5
31691: IN
31692: PUSH
31693: LD_INT 30
31695: PUSH
31696: LD_VAR 0 5
31700: IN
31701: OR
31702: AND
31703: PUSH
31704: LD_INT 6
31706: PPUSH
31707: LD_VAR 0 16
31711: PPUSH
31712: CALL_OW 321
31716: PUSH
31717: LD_INT 2
31719: EQUAL
31720: AND
31721: IFFALSE 31886
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31723: LD_INT 22
31725: PUSH
31726: LD_VAR 0 16
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: PUSH
31738: LD_INT 35
31740: PUSH
31741: LD_INT 11
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 35
31750: PUSH
31751: LD_INT 30
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 91
31765: PUSH
31766: LD_VAR 0 1
31770: PUSH
31771: LD_INT 18
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: LIST
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: LIST
31783: PPUSH
31784: CALL_OW 69
31788: NOT
31789: PUSH
31790: LD_INT 22
31792: PUSH
31793: LD_VAR 0 16
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 2
31804: PUSH
31805: LD_INT 30
31807: PUSH
31808: LD_INT 32
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 30
31817: PUSH
31818: LD_INT 33
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 91
31832: PUSH
31833: LD_VAR 0 1
31837: PUSH
31838: LD_INT 12
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: LIST
31850: PUSH
31851: EMPTY
31852: LIST
31853: PPUSH
31854: CALL_OW 69
31858: PUSH
31859: LD_INT 2
31861: GREATER
31862: AND
31863: IFFALSE 31886
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31865: LD_ADDR_VAR 0 18
31869: PUSH
31870: LD_INT 11
31872: PUSH
31873: LD_INT 30
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_VAR 0 12
31884: ARRAY
31885: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31886: LD_VAR 0 18
31890: NOT
31891: PUSH
31892: LD_INT 40
31894: PPUSH
31895: LD_VAR 0 16
31899: PPUSH
31900: CALL_OW 321
31904: PUSH
31905: LD_INT 2
31907: EQUAL
31908: AND
31909: PUSH
31910: LD_INT 7
31912: PUSH
31913: LD_VAR 0 5
31917: IN
31918: PUSH
31919: LD_INT 28
31921: PUSH
31922: LD_VAR 0 5
31926: IN
31927: OR
31928: PUSH
31929: LD_INT 45
31931: PUSH
31932: LD_VAR 0 5
31936: IN
31937: OR
31938: AND
31939: IFFALSE 32193
// begin hex := GetHexInfo ( x , y ) ;
31941: LD_ADDR_VAR 0 4
31945: PUSH
31946: LD_VAR 0 10
31950: PPUSH
31951: LD_VAR 0 11
31955: PPUSH
31956: CALL_OW 546
31960: ST_TO_ADDR
// if hex [ 1 ] then
31961: LD_VAR 0 4
31965: PUSH
31966: LD_INT 1
31968: ARRAY
31969: IFFALSE 31973
// exit ;
31971: GO 32376
// height := hex [ 2 ] ;
31973: LD_ADDR_VAR 0 15
31977: PUSH
31978: LD_VAR 0 4
31982: PUSH
31983: LD_INT 2
31985: ARRAY
31986: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31987: LD_ADDR_VAR 0 14
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: LD_INT 3
32000: PUSH
32001: LD_INT 5
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: ST_TO_ADDR
// for i in tmp do
32010: LD_ADDR_VAR 0 8
32014: PUSH
32015: LD_VAR 0 14
32019: PUSH
32020: FOR_IN
32021: IFFALSE 32191
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32023: LD_ADDR_VAR 0 9
32027: PUSH
32028: LD_VAR 0 10
32032: PPUSH
32033: LD_VAR 0 8
32037: PPUSH
32038: LD_INT 5
32040: PPUSH
32041: CALL_OW 272
32045: PUSH
32046: LD_VAR 0 11
32050: PPUSH
32051: LD_VAR 0 8
32055: PPUSH
32056: LD_INT 5
32058: PPUSH
32059: CALL_OW 273
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32068: LD_VAR 0 9
32072: PUSH
32073: LD_INT 1
32075: ARRAY
32076: PPUSH
32077: LD_VAR 0 9
32081: PUSH
32082: LD_INT 2
32084: ARRAY
32085: PPUSH
32086: CALL_OW 488
32090: IFFALSE 32189
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32092: LD_ADDR_VAR 0 4
32096: PUSH
32097: LD_VAR 0 9
32101: PUSH
32102: LD_INT 1
32104: ARRAY
32105: PPUSH
32106: LD_VAR 0 9
32110: PUSH
32111: LD_INT 2
32113: ARRAY
32114: PPUSH
32115: CALL_OW 546
32119: ST_TO_ADDR
// if hex [ 1 ] then
32120: LD_VAR 0 4
32124: PUSH
32125: LD_INT 1
32127: ARRAY
32128: IFFALSE 32132
// continue ;
32130: GO 32020
// h := hex [ 2 ] ;
32132: LD_ADDR_VAR 0 13
32136: PUSH
32137: LD_VAR 0 4
32141: PUSH
32142: LD_INT 2
32144: ARRAY
32145: ST_TO_ADDR
// if h + 7 < height then
32146: LD_VAR 0 13
32150: PUSH
32151: LD_INT 7
32153: PLUS
32154: PUSH
32155: LD_VAR 0 15
32159: LESS
32160: IFFALSE 32189
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32162: LD_ADDR_VAR 0 18
32166: PUSH
32167: LD_INT 7
32169: PUSH
32170: LD_INT 28
32172: PUSH
32173: LD_INT 45
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: PUSH
32181: LD_VAR 0 12
32185: ARRAY
32186: ST_TO_ADDR
// break ;
32187: GO 32191
// end ; end ; end ;
32189: GO 32020
32191: POP
32192: POP
// end ; if not weapon then
32193: LD_VAR 0 18
32197: NOT
32198: IFFALSE 32258
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32200: LD_ADDR_VAR 0 5
32204: PUSH
32205: LD_VAR 0 5
32209: PUSH
32210: LD_INT 11
32212: PUSH
32213: LD_INT 30
32215: PUSH
32216: LD_INT 49
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: DIFF
32224: ST_TO_ADDR
// if not list then
32225: LD_VAR 0 5
32229: NOT
32230: IFFALSE 32234
// exit ;
32232: GO 32376
// weapon := list [ rand ( 1 , list ) ] ;
32234: LD_ADDR_VAR 0 18
32238: PUSH
32239: LD_VAR 0 5
32243: PUSH
32244: LD_INT 1
32246: PPUSH
32247: LD_VAR 0 5
32251: PPUSH
32252: CALL_OW 12
32256: ARRAY
32257: ST_TO_ADDR
// end ; if weapon then
32258: LD_VAR 0 18
32262: IFFALSE 32376
// begin tmp := CostOfWeapon ( weapon ) ;
32264: LD_ADDR_VAR 0 14
32268: PUSH
32269: LD_VAR 0 18
32273: PPUSH
32274: CALL_OW 451
32278: ST_TO_ADDR
// j := GetBase ( tower ) ;
32279: LD_ADDR_VAR 0 9
32283: PUSH
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL_OW 274
32293: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32294: LD_VAR 0 9
32298: PPUSH
32299: LD_INT 1
32301: PPUSH
32302: CALL_OW 275
32306: PUSH
32307: LD_VAR 0 14
32311: PUSH
32312: LD_INT 1
32314: ARRAY
32315: GREATEREQUAL
32316: PUSH
32317: LD_VAR 0 9
32321: PPUSH
32322: LD_INT 2
32324: PPUSH
32325: CALL_OW 275
32329: PUSH
32330: LD_VAR 0 14
32334: PUSH
32335: LD_INT 2
32337: ARRAY
32338: GREATEREQUAL
32339: AND
32340: PUSH
32341: LD_VAR 0 9
32345: PPUSH
32346: LD_INT 3
32348: PPUSH
32349: CALL_OW 275
32353: PUSH
32354: LD_VAR 0 14
32358: PUSH
32359: LD_INT 3
32361: ARRAY
32362: GREATEREQUAL
32363: AND
32364: IFFALSE 32376
// result := weapon ;
32366: LD_ADDR_VAR 0 3
32370: PUSH
32371: LD_VAR 0 18
32375: ST_TO_ADDR
// end ; end ;
32376: LD_VAR 0 3
32380: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32381: LD_INT 0
32383: PPUSH
32384: PPUSH
// result := true ;
32385: LD_ADDR_VAR 0 3
32389: PUSH
32390: LD_INT 1
32392: ST_TO_ADDR
// if array1 = array2 then
32393: LD_VAR 0 1
32397: PUSH
32398: LD_VAR 0 2
32402: EQUAL
32403: IFFALSE 32463
// begin for i = 1 to array1 do
32405: LD_ADDR_VAR 0 4
32409: PUSH
32410: DOUBLE
32411: LD_INT 1
32413: DEC
32414: ST_TO_ADDR
32415: LD_VAR 0 1
32419: PUSH
32420: FOR_TO
32421: IFFALSE 32459
// if array1 [ i ] <> array2 [ i ] then
32423: LD_VAR 0 1
32427: PUSH
32428: LD_VAR 0 4
32432: ARRAY
32433: PUSH
32434: LD_VAR 0 2
32438: PUSH
32439: LD_VAR 0 4
32443: ARRAY
32444: NONEQUAL
32445: IFFALSE 32457
// begin result := false ;
32447: LD_ADDR_VAR 0 3
32451: PUSH
32452: LD_INT 0
32454: ST_TO_ADDR
// break ;
32455: GO 32459
// end ;
32457: GO 32420
32459: POP
32460: POP
// end else
32461: GO 32471
// result := false ;
32463: LD_ADDR_VAR 0 3
32467: PUSH
32468: LD_INT 0
32470: ST_TO_ADDR
// end ;
32471: LD_VAR 0 3
32475: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32476: LD_INT 0
32478: PPUSH
32479: PPUSH
32480: PPUSH
// pom := GetBase ( fac ) ;
32481: LD_ADDR_VAR 0 5
32485: PUSH
32486: LD_VAR 0 1
32490: PPUSH
32491: CALL_OW 274
32495: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32496: LD_ADDR_VAR 0 4
32500: PUSH
32501: LD_VAR 0 2
32505: PUSH
32506: LD_INT 1
32508: ARRAY
32509: PPUSH
32510: LD_VAR 0 2
32514: PUSH
32515: LD_INT 2
32517: ARRAY
32518: PPUSH
32519: LD_VAR 0 2
32523: PUSH
32524: LD_INT 3
32526: ARRAY
32527: PPUSH
32528: LD_VAR 0 2
32532: PUSH
32533: LD_INT 4
32535: ARRAY
32536: PPUSH
32537: CALL_OW 449
32541: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32542: LD_ADDR_VAR 0 3
32546: PUSH
32547: LD_VAR 0 5
32551: PPUSH
32552: LD_INT 1
32554: PPUSH
32555: CALL_OW 275
32559: PUSH
32560: LD_VAR 0 4
32564: PUSH
32565: LD_INT 1
32567: ARRAY
32568: GREATEREQUAL
32569: PUSH
32570: LD_VAR 0 5
32574: PPUSH
32575: LD_INT 2
32577: PPUSH
32578: CALL_OW 275
32582: PUSH
32583: LD_VAR 0 4
32587: PUSH
32588: LD_INT 2
32590: ARRAY
32591: GREATEREQUAL
32592: AND
32593: PUSH
32594: LD_VAR 0 5
32598: PPUSH
32599: LD_INT 3
32601: PPUSH
32602: CALL_OW 275
32606: PUSH
32607: LD_VAR 0 4
32611: PUSH
32612: LD_INT 3
32614: ARRAY
32615: GREATEREQUAL
32616: AND
32617: ST_TO_ADDR
// end ;
32618: LD_VAR 0 3
32622: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32623: LD_INT 0
32625: PPUSH
32626: PPUSH
32627: PPUSH
32628: PPUSH
// pom := GetBase ( building ) ;
32629: LD_ADDR_VAR 0 3
32633: PUSH
32634: LD_VAR 0 1
32638: PPUSH
32639: CALL_OW 274
32643: ST_TO_ADDR
// if not pom then
32644: LD_VAR 0 3
32648: NOT
32649: IFFALSE 32653
// exit ;
32651: GO 32823
// btype := GetBType ( building ) ;
32653: LD_ADDR_VAR 0 5
32657: PUSH
32658: LD_VAR 0 1
32662: PPUSH
32663: CALL_OW 266
32667: ST_TO_ADDR
// if btype = b_armoury then
32668: LD_VAR 0 5
32672: PUSH
32673: LD_INT 4
32675: EQUAL
32676: IFFALSE 32686
// btype := b_barracks ;
32678: LD_ADDR_VAR 0 5
32682: PUSH
32683: LD_INT 5
32685: ST_TO_ADDR
// if btype = b_depot then
32686: LD_VAR 0 5
32690: PUSH
32691: LD_INT 0
32693: EQUAL
32694: IFFALSE 32704
// btype := b_warehouse ;
32696: LD_ADDR_VAR 0 5
32700: PUSH
32701: LD_INT 1
32703: ST_TO_ADDR
// if btype = b_workshop then
32704: LD_VAR 0 5
32708: PUSH
32709: LD_INT 2
32711: EQUAL
32712: IFFALSE 32722
// btype := b_factory ;
32714: LD_ADDR_VAR 0 5
32718: PUSH
32719: LD_INT 3
32721: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32722: LD_ADDR_VAR 0 4
32726: PUSH
32727: LD_VAR 0 5
32731: PPUSH
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL_OW 248
32741: PPUSH
32742: CALL_OW 450
32746: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32747: LD_ADDR_VAR 0 2
32751: PUSH
32752: LD_VAR 0 3
32756: PPUSH
32757: LD_INT 1
32759: PPUSH
32760: CALL_OW 275
32764: PUSH
32765: LD_VAR 0 4
32769: PUSH
32770: LD_INT 1
32772: ARRAY
32773: GREATEREQUAL
32774: PUSH
32775: LD_VAR 0 3
32779: PPUSH
32780: LD_INT 2
32782: PPUSH
32783: CALL_OW 275
32787: PUSH
32788: LD_VAR 0 4
32792: PUSH
32793: LD_INT 2
32795: ARRAY
32796: GREATEREQUAL
32797: AND
32798: PUSH
32799: LD_VAR 0 3
32803: PPUSH
32804: LD_INT 3
32806: PPUSH
32807: CALL_OW 275
32811: PUSH
32812: LD_VAR 0 4
32816: PUSH
32817: LD_INT 3
32819: ARRAY
32820: GREATEREQUAL
32821: AND
32822: ST_TO_ADDR
// end ;
32823: LD_VAR 0 2
32827: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32828: LD_INT 0
32830: PPUSH
32831: PPUSH
32832: PPUSH
// pom := GetBase ( building ) ;
32833: LD_ADDR_VAR 0 4
32837: PUSH
32838: LD_VAR 0 1
32842: PPUSH
32843: CALL_OW 274
32847: ST_TO_ADDR
// if not pom then
32848: LD_VAR 0 4
32852: NOT
32853: IFFALSE 32857
// exit ;
32855: GO 32958
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32857: LD_ADDR_VAR 0 5
32861: PUSH
32862: LD_VAR 0 2
32866: PPUSH
32867: LD_VAR 0 1
32871: PPUSH
32872: CALL_OW 248
32876: PPUSH
32877: CALL_OW 450
32881: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32882: LD_ADDR_VAR 0 3
32886: PUSH
32887: LD_VAR 0 4
32891: PPUSH
32892: LD_INT 1
32894: PPUSH
32895: CALL_OW 275
32899: PUSH
32900: LD_VAR 0 5
32904: PUSH
32905: LD_INT 1
32907: ARRAY
32908: GREATEREQUAL
32909: PUSH
32910: LD_VAR 0 4
32914: PPUSH
32915: LD_INT 2
32917: PPUSH
32918: CALL_OW 275
32922: PUSH
32923: LD_VAR 0 5
32927: PUSH
32928: LD_INT 2
32930: ARRAY
32931: GREATEREQUAL
32932: AND
32933: PUSH
32934: LD_VAR 0 4
32938: PPUSH
32939: LD_INT 3
32941: PPUSH
32942: CALL_OW 275
32946: PUSH
32947: LD_VAR 0 5
32951: PUSH
32952: LD_INT 3
32954: ARRAY
32955: GREATEREQUAL
32956: AND
32957: ST_TO_ADDR
// end ;
32958: LD_VAR 0 3
32962: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32963: LD_INT 0
32965: PPUSH
32966: PPUSH
32967: PPUSH
32968: PPUSH
32969: PPUSH
32970: PPUSH
32971: PPUSH
32972: PPUSH
32973: PPUSH
32974: PPUSH
// result := false ;
32975: LD_ADDR_VAR 0 6
32979: PUSH
32980: LD_INT 0
32982: ST_TO_ADDR
// if not base or not btype or not x or not y then
32983: LD_VAR 0 1
32987: NOT
32988: PUSH
32989: LD_VAR 0 2
32993: NOT
32994: OR
32995: PUSH
32996: LD_VAR 0 3
33000: NOT
33001: OR
33002: PUSH
33003: LD_VAR 0 4
33007: NOT
33008: OR
33009: IFFALSE 33013
// exit ;
33011: GO 33622
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33013: LD_ADDR_VAR 0 12
33017: PUSH
33018: LD_VAR 0 2
33022: PPUSH
33023: LD_VAR 0 3
33027: PPUSH
33028: LD_VAR 0 4
33032: PPUSH
33033: LD_VAR 0 5
33037: PPUSH
33038: LD_VAR 0 1
33042: PUSH
33043: LD_INT 1
33045: ARRAY
33046: PPUSH
33047: CALL_OW 248
33051: PPUSH
33052: LD_INT 0
33054: PPUSH
33055: CALL 34459 0 6
33059: ST_TO_ADDR
// if not hexes then
33060: LD_VAR 0 12
33064: NOT
33065: IFFALSE 33069
// exit ;
33067: GO 33622
// for i = 1 to hexes do
33069: LD_ADDR_VAR 0 7
33073: PUSH
33074: DOUBLE
33075: LD_INT 1
33077: DEC
33078: ST_TO_ADDR
33079: LD_VAR 0 12
33083: PUSH
33084: FOR_TO
33085: IFFALSE 33620
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33087: LD_ADDR_VAR 0 11
33091: PUSH
33092: LD_VAR 0 12
33096: PUSH
33097: LD_VAR 0 7
33101: ARRAY
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: PPUSH
33107: LD_VAR 0 12
33111: PUSH
33112: LD_VAR 0 7
33116: ARRAY
33117: PUSH
33118: LD_INT 2
33120: ARRAY
33121: PPUSH
33122: CALL_OW 428
33126: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33127: LD_VAR 0 12
33131: PUSH
33132: LD_VAR 0 7
33136: ARRAY
33137: PUSH
33138: LD_INT 1
33140: ARRAY
33141: PPUSH
33142: LD_VAR 0 12
33146: PUSH
33147: LD_VAR 0 7
33151: ARRAY
33152: PUSH
33153: LD_INT 2
33155: ARRAY
33156: PPUSH
33157: CALL_OW 351
33161: PUSH
33162: LD_VAR 0 12
33166: PUSH
33167: LD_VAR 0 7
33171: ARRAY
33172: PUSH
33173: LD_INT 1
33175: ARRAY
33176: PPUSH
33177: LD_VAR 0 12
33181: PUSH
33182: LD_VAR 0 7
33186: ARRAY
33187: PUSH
33188: LD_INT 2
33190: ARRAY
33191: PPUSH
33192: CALL_OW 488
33196: NOT
33197: OR
33198: PUSH
33199: LD_VAR 0 11
33203: PPUSH
33204: CALL_OW 247
33208: PUSH
33209: LD_INT 3
33211: EQUAL
33212: OR
33213: IFFALSE 33219
// exit ;
33215: POP
33216: POP
33217: GO 33622
// if not tmp or not tmp in base then
33219: LD_VAR 0 11
33223: NOT
33224: PUSH
33225: LD_VAR 0 11
33229: PUSH
33230: LD_VAR 0 1
33234: IN
33235: NOT
33236: OR
33237: IFFALSE 33241
// continue ;
33239: GO 33084
// result := true ;
33241: LD_ADDR_VAR 0 6
33245: PUSH
33246: LD_INT 1
33248: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33249: LD_ADDR_VAR 0 15
33253: PUSH
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_INT 22
33261: PUSH
33262: LD_VAR 0 11
33266: PPUSH
33267: CALL_OW 255
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: LD_INT 30
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 30
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PPUSH
33308: CALL_OW 72
33312: ST_TO_ADDR
// if dep then
33313: LD_VAR 0 15
33317: IFFALSE 33453
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33319: LD_ADDR_VAR 0 14
33323: PUSH
33324: LD_VAR 0 15
33328: PUSH
33329: LD_INT 1
33331: ARRAY
33332: PPUSH
33333: CALL_OW 250
33337: PPUSH
33338: LD_VAR 0 15
33342: PUSH
33343: LD_INT 1
33345: ARRAY
33346: PPUSH
33347: CALL_OW 254
33351: PPUSH
33352: LD_INT 5
33354: PPUSH
33355: CALL_OW 272
33359: PUSH
33360: LD_VAR 0 15
33364: PUSH
33365: LD_INT 1
33367: ARRAY
33368: PPUSH
33369: CALL_OW 251
33373: PPUSH
33374: LD_VAR 0 15
33378: PUSH
33379: LD_INT 1
33381: ARRAY
33382: PPUSH
33383: CALL_OW 254
33387: PPUSH
33388: LD_INT 5
33390: PPUSH
33391: CALL_OW 273
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33400: LD_VAR 0 14
33404: PUSH
33405: LD_INT 1
33407: ARRAY
33408: PPUSH
33409: LD_VAR 0 14
33413: PUSH
33414: LD_INT 2
33416: ARRAY
33417: PPUSH
33418: CALL_OW 488
33422: IFFALSE 33453
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33424: LD_VAR 0 11
33428: PPUSH
33429: LD_VAR 0 14
33433: PUSH
33434: LD_INT 1
33436: ARRAY
33437: PPUSH
33438: LD_VAR 0 14
33442: PUSH
33443: LD_INT 2
33445: ARRAY
33446: PPUSH
33447: CALL_OW 111
// continue ;
33451: GO 33084
// end ; end ; r := GetDir ( tmp ) ;
33453: LD_ADDR_VAR 0 13
33457: PUSH
33458: LD_VAR 0 11
33462: PPUSH
33463: CALL_OW 254
33467: ST_TO_ADDR
// if r = 5 then
33468: LD_VAR 0 13
33472: PUSH
33473: LD_INT 5
33475: EQUAL
33476: IFFALSE 33486
// r := 0 ;
33478: LD_ADDR_VAR 0 13
33482: PUSH
33483: LD_INT 0
33485: ST_TO_ADDR
// for j = r to 5 do
33486: LD_ADDR_VAR 0 8
33490: PUSH
33491: DOUBLE
33492: LD_VAR 0 13
33496: DEC
33497: ST_TO_ADDR
33498: LD_INT 5
33500: PUSH
33501: FOR_TO
33502: IFFALSE 33616
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33504: LD_ADDR_VAR 0 9
33508: PUSH
33509: LD_VAR 0 11
33513: PPUSH
33514: CALL_OW 250
33518: PPUSH
33519: LD_VAR 0 8
33523: PPUSH
33524: LD_INT 2
33526: PPUSH
33527: CALL_OW 272
33531: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33532: LD_ADDR_VAR 0 10
33536: PUSH
33537: LD_VAR 0 11
33541: PPUSH
33542: CALL_OW 251
33546: PPUSH
33547: LD_VAR 0 8
33551: PPUSH
33552: LD_INT 2
33554: PPUSH
33555: CALL_OW 273
33559: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33560: LD_VAR 0 9
33564: PPUSH
33565: LD_VAR 0 10
33569: PPUSH
33570: CALL_OW 488
33574: PUSH
33575: LD_VAR 0 9
33579: PPUSH
33580: LD_VAR 0 10
33584: PPUSH
33585: CALL_OW 428
33589: NOT
33590: AND
33591: IFFALSE 33614
// begin ComMoveXY ( tmp , _x , _y ) ;
33593: LD_VAR 0 11
33597: PPUSH
33598: LD_VAR 0 9
33602: PPUSH
33603: LD_VAR 0 10
33607: PPUSH
33608: CALL_OW 111
// break ;
33612: GO 33616
// end ; end ;
33614: GO 33501
33616: POP
33617: POP
// end ;
33618: GO 33084
33620: POP
33621: POP
// end ;
33622: LD_VAR 0 6
33626: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
33633: PPUSH
33634: PPUSH
33635: PPUSH
33636: PPUSH
33637: PPUSH
33638: PPUSH
// result := false ;
33639: LD_ADDR_VAR 0 6
33643: PUSH
33644: LD_INT 0
33646: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33647: LD_VAR 0 1
33651: NOT
33652: PUSH
33653: LD_VAR 0 1
33657: PPUSH
33658: CALL_OW 266
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: IN
33673: NOT
33674: OR
33675: PUSH
33676: LD_VAR 0 2
33680: NOT
33681: OR
33682: PUSH
33683: LD_VAR 0 5
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: LD_INT 4
33702: PUSH
33703: LD_INT 5
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: IN
33714: NOT
33715: OR
33716: PUSH
33717: LD_VAR 0 3
33721: PPUSH
33722: LD_VAR 0 4
33726: PPUSH
33727: CALL_OW 488
33731: NOT
33732: OR
33733: IFFALSE 33737
// exit ;
33735: GO 34454
// pom := GetBase ( depot ) ;
33737: LD_ADDR_VAR 0 10
33741: PUSH
33742: LD_VAR 0 1
33746: PPUSH
33747: CALL_OW 274
33751: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33752: LD_ADDR_VAR 0 11
33756: PUSH
33757: LD_VAR 0 2
33761: PPUSH
33762: LD_VAR 0 1
33766: PPUSH
33767: CALL_OW 248
33771: PPUSH
33772: CALL_OW 450
33776: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33777: LD_VAR 0 10
33781: PPUSH
33782: LD_INT 1
33784: PPUSH
33785: CALL_OW 275
33789: PUSH
33790: LD_VAR 0 11
33794: PUSH
33795: LD_INT 1
33797: ARRAY
33798: GREATEREQUAL
33799: PUSH
33800: LD_VAR 0 10
33804: PPUSH
33805: LD_INT 2
33807: PPUSH
33808: CALL_OW 275
33812: PUSH
33813: LD_VAR 0 11
33817: PUSH
33818: LD_INT 2
33820: ARRAY
33821: GREATEREQUAL
33822: AND
33823: PUSH
33824: LD_VAR 0 10
33828: PPUSH
33829: LD_INT 3
33831: PPUSH
33832: CALL_OW 275
33836: PUSH
33837: LD_VAR 0 11
33841: PUSH
33842: LD_INT 3
33844: ARRAY
33845: GREATEREQUAL
33846: AND
33847: NOT
33848: IFFALSE 33852
// exit ;
33850: GO 34454
// if GetBType ( depot ) = b_depot then
33852: LD_VAR 0 1
33856: PPUSH
33857: CALL_OW 266
33861: PUSH
33862: LD_INT 0
33864: EQUAL
33865: IFFALSE 33877
// dist := 28 else
33867: LD_ADDR_VAR 0 14
33871: PUSH
33872: LD_INT 28
33874: ST_TO_ADDR
33875: GO 33885
// dist := 36 ;
33877: LD_ADDR_VAR 0 14
33881: PUSH
33882: LD_INT 36
33884: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33885: LD_VAR 0 1
33889: PPUSH
33890: LD_VAR 0 3
33894: PPUSH
33895: LD_VAR 0 4
33899: PPUSH
33900: CALL_OW 297
33904: PUSH
33905: LD_VAR 0 14
33909: GREATER
33910: IFFALSE 33914
// exit ;
33912: GO 34454
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33914: LD_ADDR_VAR 0 12
33918: PUSH
33919: LD_VAR 0 2
33923: PPUSH
33924: LD_VAR 0 3
33928: PPUSH
33929: LD_VAR 0 4
33933: PPUSH
33934: LD_VAR 0 5
33938: PPUSH
33939: LD_VAR 0 1
33943: PPUSH
33944: CALL_OW 248
33948: PPUSH
33949: LD_INT 0
33951: PPUSH
33952: CALL 34459 0 6
33956: ST_TO_ADDR
// if not hexes then
33957: LD_VAR 0 12
33961: NOT
33962: IFFALSE 33966
// exit ;
33964: GO 34454
// hex := GetHexInfo ( x , y ) ;
33966: LD_ADDR_VAR 0 15
33970: PUSH
33971: LD_VAR 0 3
33975: PPUSH
33976: LD_VAR 0 4
33980: PPUSH
33981: CALL_OW 546
33985: ST_TO_ADDR
// if hex [ 1 ] then
33986: LD_VAR 0 15
33990: PUSH
33991: LD_INT 1
33993: ARRAY
33994: IFFALSE 33998
// exit ;
33996: GO 34454
// height := hex [ 2 ] ;
33998: LD_ADDR_VAR 0 13
34002: PUSH
34003: LD_VAR 0 15
34007: PUSH
34008: LD_INT 2
34010: ARRAY
34011: ST_TO_ADDR
// for i = 1 to hexes do
34012: LD_ADDR_VAR 0 7
34016: PUSH
34017: DOUBLE
34018: LD_INT 1
34020: DEC
34021: ST_TO_ADDR
34022: LD_VAR 0 12
34026: PUSH
34027: FOR_TO
34028: IFFALSE 34358
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34030: LD_VAR 0 12
34034: PUSH
34035: LD_VAR 0 7
34039: ARRAY
34040: PUSH
34041: LD_INT 1
34043: ARRAY
34044: PPUSH
34045: LD_VAR 0 12
34049: PUSH
34050: LD_VAR 0 7
34054: ARRAY
34055: PUSH
34056: LD_INT 2
34058: ARRAY
34059: PPUSH
34060: CALL_OW 488
34064: NOT
34065: PUSH
34066: LD_VAR 0 12
34070: PUSH
34071: LD_VAR 0 7
34075: ARRAY
34076: PUSH
34077: LD_INT 1
34079: ARRAY
34080: PPUSH
34081: LD_VAR 0 12
34085: PUSH
34086: LD_VAR 0 7
34090: ARRAY
34091: PUSH
34092: LD_INT 2
34094: ARRAY
34095: PPUSH
34096: CALL_OW 428
34100: PUSH
34101: LD_INT 0
34103: GREATER
34104: OR
34105: PUSH
34106: LD_VAR 0 12
34110: PUSH
34111: LD_VAR 0 7
34115: ARRAY
34116: PUSH
34117: LD_INT 1
34119: ARRAY
34120: PPUSH
34121: LD_VAR 0 12
34125: PUSH
34126: LD_VAR 0 7
34130: ARRAY
34131: PUSH
34132: LD_INT 2
34134: ARRAY
34135: PPUSH
34136: CALL_OW 351
34140: OR
34141: IFFALSE 34147
// exit ;
34143: POP
34144: POP
34145: GO 34454
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34147: LD_ADDR_VAR 0 8
34151: PUSH
34152: LD_VAR 0 12
34156: PUSH
34157: LD_VAR 0 7
34161: ARRAY
34162: PUSH
34163: LD_INT 1
34165: ARRAY
34166: PPUSH
34167: LD_VAR 0 12
34171: PUSH
34172: LD_VAR 0 7
34176: ARRAY
34177: PUSH
34178: LD_INT 2
34180: ARRAY
34181: PPUSH
34182: CALL_OW 546
34186: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34187: LD_VAR 0 8
34191: PUSH
34192: LD_INT 1
34194: ARRAY
34195: PUSH
34196: LD_VAR 0 8
34200: PUSH
34201: LD_INT 2
34203: ARRAY
34204: PUSH
34205: LD_VAR 0 13
34209: PUSH
34210: LD_INT 2
34212: PLUS
34213: GREATER
34214: OR
34215: PUSH
34216: LD_VAR 0 8
34220: PUSH
34221: LD_INT 2
34223: ARRAY
34224: PUSH
34225: LD_VAR 0 13
34229: PUSH
34230: LD_INT 2
34232: MINUS
34233: LESS
34234: OR
34235: PUSH
34236: LD_VAR 0 8
34240: PUSH
34241: LD_INT 3
34243: ARRAY
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 8
34250: PUSH
34251: LD_INT 9
34253: PUSH
34254: LD_INT 10
34256: PUSH
34257: LD_INT 11
34259: PUSH
34260: LD_INT 12
34262: PUSH
34263: LD_INT 13
34265: PUSH
34266: LD_INT 16
34268: PUSH
34269: LD_INT 17
34271: PUSH
34272: LD_INT 18
34274: PUSH
34275: LD_INT 19
34277: PUSH
34278: LD_INT 20
34280: PUSH
34281: LD_INT 21
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: IN
34299: NOT
34300: OR
34301: PUSH
34302: LD_VAR 0 8
34306: PUSH
34307: LD_INT 5
34309: ARRAY
34310: NOT
34311: OR
34312: PUSH
34313: LD_VAR 0 8
34317: PUSH
34318: LD_INT 6
34320: ARRAY
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: LD_INT 7
34330: PUSH
34331: LD_INT 9
34333: PUSH
34334: LD_INT 10
34336: PUSH
34337: LD_INT 11
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: IN
34348: NOT
34349: OR
34350: IFFALSE 34356
// exit ;
34352: POP
34353: POP
34354: GO 34454
// end ;
34356: GO 34027
34358: POP
34359: POP
// side := GetSide ( depot ) ;
34360: LD_ADDR_VAR 0 9
34364: PUSH
34365: LD_VAR 0 1
34369: PPUSH
34370: CALL_OW 255
34374: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34375: LD_VAR 0 9
34379: PPUSH
34380: LD_VAR 0 3
34384: PPUSH
34385: LD_VAR 0 4
34389: PPUSH
34390: LD_INT 20
34392: PPUSH
34393: CALL 27108 0 4
34397: PUSH
34398: LD_INT 4
34400: ARRAY
34401: IFFALSE 34405
// exit ;
34403: GO 34454
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34405: LD_VAR 0 2
34409: PUSH
34410: LD_INT 29
34412: PUSH
34413: LD_INT 30
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: IN
34420: PUSH
34421: LD_VAR 0 3
34425: PPUSH
34426: LD_VAR 0 4
34430: PPUSH
34431: LD_VAR 0 9
34435: PPUSH
34436: CALL_OW 440
34440: NOT
34441: AND
34442: IFFALSE 34446
// exit ;
34444: GO 34454
// result := true ;
34446: LD_ADDR_VAR 0 6
34450: PUSH
34451: LD_INT 1
34453: ST_TO_ADDR
// end ;
34454: LD_VAR 0 6
34458: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34459: LD_INT 0
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
34467: PPUSH
34468: PPUSH
34469: PPUSH
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
34476: PPUSH
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
34482: PPUSH
34483: PPUSH
34484: PPUSH
34485: PPUSH
34486: PPUSH
34487: PPUSH
34488: PPUSH
34489: PPUSH
34490: PPUSH
34491: PPUSH
34492: PPUSH
34493: PPUSH
34494: PPUSH
34495: PPUSH
34496: PPUSH
34497: PPUSH
34498: PPUSH
34499: PPUSH
34500: PPUSH
34501: PPUSH
34502: PPUSH
34503: PPUSH
34504: PPUSH
34505: PPUSH
34506: PPUSH
34507: PPUSH
34508: PPUSH
34509: PPUSH
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
34514: PPUSH
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
// result = [ ] ;
34519: LD_ADDR_VAR 0 7
34523: PUSH
34524: EMPTY
34525: ST_TO_ADDR
// temp_list = [ ] ;
34526: LD_ADDR_VAR 0 9
34530: PUSH
34531: EMPTY
34532: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34533: LD_VAR 0 4
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: LD_INT 3
34549: PUSH
34550: LD_INT 4
34552: PUSH
34553: LD_INT 5
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: IN
34564: NOT
34565: PUSH
34566: LD_VAR 0 1
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: IN
34581: PUSH
34582: LD_VAR 0 5
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 3
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: IN
34601: NOT
34602: AND
34603: OR
34604: IFFALSE 34608
// exit ;
34606: GO 52999
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34608: LD_VAR 0 1
34612: PUSH
34613: LD_INT 6
34615: PUSH
34616: LD_INT 7
34618: PUSH
34619: LD_INT 8
34621: PUSH
34622: LD_INT 13
34624: PUSH
34625: LD_INT 12
34627: PUSH
34628: LD_INT 15
34630: PUSH
34631: LD_INT 11
34633: PUSH
34634: LD_INT 14
34636: PUSH
34637: LD_INT 10
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: IN
34651: IFFALSE 34661
// btype = b_lab ;
34653: LD_ADDR_VAR 0 1
34657: PUSH
34658: LD_INT 6
34660: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34661: LD_VAR 0 6
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: IN
34680: NOT
34681: PUSH
34682: LD_VAR 0 1
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 3
34698: PUSH
34699: LD_INT 6
34701: PUSH
34702: LD_INT 36
34704: PUSH
34705: LD_INT 4
34707: PUSH
34708: LD_INT 5
34710: PUSH
34711: LD_INT 31
34713: PUSH
34714: LD_INT 32
34716: PUSH
34717: LD_INT 33
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: IN
34733: NOT
34734: PUSH
34735: LD_VAR 0 6
34739: PUSH
34740: LD_INT 1
34742: EQUAL
34743: AND
34744: OR
34745: PUSH
34746: LD_VAR 0 1
34750: PUSH
34751: LD_INT 2
34753: PUSH
34754: LD_INT 3
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: IN
34761: NOT
34762: PUSH
34763: LD_VAR 0 6
34767: PUSH
34768: LD_INT 2
34770: EQUAL
34771: AND
34772: OR
34773: IFFALSE 34783
// mode = 0 ;
34775: LD_ADDR_VAR 0 6
34779: PUSH
34780: LD_INT 0
34782: ST_TO_ADDR
// case mode of 0 :
34783: LD_VAR 0 6
34787: PUSH
34788: LD_INT 0
34790: DOUBLE
34791: EQUAL
34792: IFTRUE 34796
34794: GO 46249
34796: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34797: LD_ADDR_VAR 0 11
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: NEG
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: LD_INT 2
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: LD_INT 2
34893: NEG
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: LD_INT 2
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 1
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: LD_INT 3
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 3
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34990: LD_ADDR_VAR 0 12
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 2
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 2
35124: NEG
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: LD_INT 1
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 3
35147: NEG
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 3
35158: NEG
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35186: LD_ADDR_VAR 0 13
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 2
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 2
35321: NEG
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: NEG
35334: PUSH
35335: LD_INT 3
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 3
35345: NEG
35346: PUSH
35347: LD_INT 2
35349: NEG
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 3
35357: NEG
35358: PUSH
35359: LD_INT 3
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35385: LD_ADDR_VAR 0 14
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 2
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: NEG
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: NEG
35532: PUSH
35533: LD_INT 3
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: LD_INT 3
35546: NEG
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35581: LD_ADDR_VAR 0 15
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 2
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 3
35738: PUSH
35739: LD_INT 0
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 3
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35774: LD_ADDR_VAR 0 16
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: LD_INT 2
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 2
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: LD_INT 2
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 2
35897: NEG
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: NEG
35910: PUSH
35911: LD_INT 2
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: LD_INT 2
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 3
35931: PUSH
35932: LD_INT 3
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: LD_INT 3
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35967: LD_ADDR_VAR 0 17
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: LD_INT 1
35987: NEG
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: NEG
36049: PUSH
36050: LD_INT 2
36052: NEG
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: LD_INT 2
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: NEG
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 2
36166: NEG
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36197: LD_ADDR_VAR 0 18
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 2
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: LD_INT 2
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 2
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 2
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 2
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 1
36362: NEG
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 2
36373: NEG
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 2
36384: NEG
36385: PUSH
36386: LD_INT 1
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 2
36396: NEG
36397: PUSH
36398: LD_INT 2
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36427: LD_ADDR_VAR 0 19
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: LD_INT 2
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: LD_INT 2
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 2
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 1
36592: NEG
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 2
36614: NEG
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: LD_INT 2
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36657: LD_ADDR_VAR 0 20
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: LD_INT 2
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 2
36833: NEG
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 2
36844: NEG
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: LD_INT 2
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36887: LD_ADDR_VAR 0 21
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: LD_INT 2
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: LD_INT 2
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 2
37063: NEG
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 2
37074: NEG
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: LD_INT 2
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37117: LD_ADDR_VAR 0 22
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: NEG
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 2
37293: NEG
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 2
37304: NEG
37305: PUSH
37306: LD_INT 1
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 2
37316: NEG
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37347: LD_ADDR_VAR 0 23
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: LD_INT 2
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: NEG
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: NEG
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 2
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: LD_INT 3
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: LD_INT 3
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37627: LD_ADDR_VAR 0 24
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 2
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: LD_INT 1
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 3
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 3
37870: PUSH
37871: LD_INT 2
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37903: LD_ADDR_VAR 0 25
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: LD_INT 2
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 2
38079: NEG
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: NEG
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 3
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 3
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: LD_INT 3
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: LD_INT 3
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38177: LD_ADDR_VAR 0 26
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: NEG
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: LD_INT 2
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 2
38353: NEG
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 2
38364: NEG
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: LD_INT 2
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: LD_INT 3
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: LD_INT 3
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: LD_INT 1
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38453: LD_ADDR_VAR 0 27
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: NEG
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: LD_INT 2
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 2
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 3
38686: NEG
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 3
38698: NEG
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38733: LD_ADDR_VAR 0 28
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: LD_INT 2
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 1
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 2
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 2
38932: NEG
38933: PUSH
38934: LD_INT 2
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 2
38944: NEG
38945: PUSH
38946: LD_INT 3
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 3
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 3
38968: NEG
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 3
38980: NEG
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39015: LD_ADDR_VAR 0 29
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: LD_INT 1
39035: NEG
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 2
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 2
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: NEG
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: NEG
39194: PUSH
39195: LD_INT 2
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 2
39205: NEG
39206: PUSH
39207: LD_INT 3
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 3
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: LD_INT 3
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 3
39259: NEG
39260: PUSH
39261: LD_INT 2
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39294: LD_ADDR_VAR 0 30
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: LD_INT 3
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 3
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: LD_INT 3
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 3
39537: NEG
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39572: LD_ADDR_VAR 0 31
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 2
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: LD_INT 2
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: LD_INT 2
39753: NEG
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: LD_INT 3
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 3
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: LD_INT 3
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 3
39815: NEG
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39850: LD_ADDR_VAR 0 32
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: NEG
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: LD_INT 3
40043: NEG
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 3
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40128: LD_ADDR_VAR 0 33
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 3
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 3
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 3
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 3
40372: NEG
40373: PUSH
40374: LD_INT 2
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40407: LD_ADDR_VAR 0 34
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: LD_INT 2
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: LD_INT 3
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 3
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: LD_INT 3
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: NEG
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 3
40652: NEG
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40687: LD_ADDR_VAR 0 35
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: NEG
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40799: LD_ADDR_VAR 0 36
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: LD_INT 2
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40911: LD_ADDR_VAR 0 37
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41023: LD_ADDR_VAR 0 38
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41135: LD_ADDR_VAR 0 39
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 2
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41247: LD_ADDR_VAR 0 40
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41359: LD_ADDR_VAR 0 41
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: LD_INT 3
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 3
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 3
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 3
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 3
41602: PUSH
41603: LD_INT 3
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 3
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 3
41633: NEG
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 3
41644: NEG
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 3
41656: NEG
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 3
41668: NEG
41669: PUSH
41670: LD_INT 3
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41709: LD_ADDR_VAR 0 42
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 2
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: NEG
41900: PUSH
41901: LD_INT 3
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 3
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 3
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 3
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 3
41955: PUSH
41956: LD_INT 3
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: LD_INT 3
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 3
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 3
42006: NEG
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 3
42018: NEG
42019: PUSH
42020: LD_INT 3
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42059: LD_ADDR_VAR 0 43
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 3
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 3
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 3
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 3
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 3
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 3
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 3
42355: NEG
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 3
42366: NEG
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42407: LD_ADDR_VAR 0 44
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: LD_INT 2
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: NEG
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 3
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 3
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 3
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 3
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: LD_INT 3
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: LD_INT 3
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 3
42704: NEG
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 3
42716: NEG
42717: PUSH
42718: LD_INT 3
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42757: LD_ADDR_VAR 0 45
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: LD_INT 3
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: LD_INT 3
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 3
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 3
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: LD_INT 3
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: LD_INT 3
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 3
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 3
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 3
43054: NEG
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 3
43066: NEG
43067: PUSH
43068: LD_INT 3
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43107: LD_ADDR_VAR 0 46
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: LD_INT 3
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 3
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 3
43403: NEG
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43455: LD_ADDR_VAR 0 47
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: LD_INT 2
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43606: LD_ADDR_VAR 0 48
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43753: LD_ADDR_VAR 0 49
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43897: LD_ADDR_VAR 0 50
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: LD_INT 2
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: LD_INT 2
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44041: LD_ADDR_VAR 0 51
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44188: LD_ADDR_VAR 0 52
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44339: LD_ADDR_VAR 0 53
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44569: LD_ADDR_VAR 0 54
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 2
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 2
44745: NEG
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 2
44768: NEG
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44799: LD_ADDR_VAR 0 55
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45029: LD_ADDR_VAR 0 56
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45259: LD_ADDR_VAR 0 57
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45489: LD_ADDR_VAR 0 58
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45719: LD_ADDR_VAR 0 59
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45807: LD_ADDR_VAR 0 60
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45895: LD_ADDR_VAR 0 61
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45983: LD_ADDR_VAR 0 62
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46071: LD_ADDR_VAR 0 63
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46159: LD_ADDR_VAR 0 64
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: ST_TO_ADDR
// end ; 1 :
46247: GO 52144
46249: LD_INT 1
46251: DOUBLE
46252: EQUAL
46253: IFTRUE 46257
46255: GO 48880
46257: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46258: LD_ADDR_VAR 0 11
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 3
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 3
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46302: LD_ADDR_VAR 0 12
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 3
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46343: LD_ADDR_VAR 0 13
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: LIST
46382: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46383: LD_ADDR_VAR 0 14
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 3
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 3
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46424: LD_ADDR_VAR 0 15
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 3
46442: NEG
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 3
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46468: LD_ADDR_VAR 0 16
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 3
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 3
46499: NEG
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46514: LD_ADDR_VAR 0 17
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 3
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 3
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: LIST
46557: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46558: LD_ADDR_VAR 0 18
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 3
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 3
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46599: LD_ADDR_VAR 0 19
46603: PUSH
46604: LD_INT 3
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: LD_INT 3
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46639: LD_ADDR_VAR 0 20
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 3
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46680: LD_ADDR_VAR 0 21
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 3
46698: NEG
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46724: LD_ADDR_VAR 0 22
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 3
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 3
46743: NEG
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 3
46755: NEG
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46770: LD_ADDR_VAR 0 23
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 4
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 3
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46814: LD_ADDR_VAR 0 24
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 3
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 4
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: LIST
46854: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46855: LD_ADDR_VAR 0 25
46859: PUSH
46860: LD_INT 3
46862: PUSH
46863: LD_INT 3
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 4
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: LD_INT 4
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46895: LD_ADDR_VAR 0 26
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 4
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 3
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: LIST
46935: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46936: LD_ADDR_VAR 0 27
46940: PUSH
46941: LD_INT 3
46943: NEG
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 3
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 4
46965: NEG
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46980: LD_ADDR_VAR 0 28
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 3
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: LD_INT 4
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 4
47011: NEG
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47026: LD_ADDR_VAR 0 29
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 3
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 3
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: LD_INT 4
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 4
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 3
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 5
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 5
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 4
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 6
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 6
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 5
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47181: LD_ADDR_VAR 0 30
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 3
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 4
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 4
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 4
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 5
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 5
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 5
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 6
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 6
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47324: LD_ADDR_VAR 0 31
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: LD_INT 3
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: LD_INT 3
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 4
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 4
47371: PUSH
47372: LD_INT 4
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: LD_INT 4
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 5
47391: PUSH
47392: LD_INT 4
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 5
47401: PUSH
47402: LD_INT 5
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 4
47411: PUSH
47412: LD_INT 5
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 6
47421: PUSH
47422: LD_INT 5
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 6
47431: PUSH
47432: LD_INT 6
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 5
47441: PUSH
47442: LD_INT 6
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47463: LD_ADDR_VAR 0 32
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 4
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 4
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 3
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 5
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 5
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 4
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 6
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 6
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 5
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47606: LD_ADDR_VAR 0 33
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 3
47624: NEG
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 3
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 4
47658: NEG
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 4
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 4
47681: NEG
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 5
47692: NEG
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 5
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 5
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 6
47726: NEG
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 6
47737: NEG
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47761: LD_ADDR_VAR 0 34
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 3
47780: NEG
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 3
47792: NEG
47793: PUSH
47794: LD_INT 3
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: LD_INT 4
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 4
47816: NEG
47817: PUSH
47818: LD_INT 3
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 4
47828: NEG
47829: PUSH
47830: LD_INT 4
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 4
47840: NEG
47841: PUSH
47842: LD_INT 5
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 5
47852: NEG
47853: PUSH
47854: LD_INT 4
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 5
47864: NEG
47865: PUSH
47866: LD_INT 5
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 5
47876: NEG
47877: PUSH
47878: LD_INT 6
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 6
47888: NEG
47889: PUSH
47890: LD_INT 5
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 6
47900: NEG
47901: PUSH
47902: LD_INT 6
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47924: LD_ADDR_VAR 0 41
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 3
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47968: LD_ADDR_VAR 0 42
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 3
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48009: LD_ADDR_VAR 0 43
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48049: LD_ADDR_VAR 0 44
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 3
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48090: LD_ADDR_VAR 0 45
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 3
48119: NEG
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48134: LD_ADDR_VAR 0 46
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: LD_INT 3
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 3
48165: NEG
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48180: LD_ADDR_VAR 0 47
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: LD_INT 3
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48213: LD_ADDR_VAR 0 48
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48244: LD_ADDR_VAR 0 49
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48273: LD_ADDR_VAR 0 50
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 3
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48302: LD_ADDR_VAR 0 51
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48333: LD_ADDR_VAR 0 52
48337: PUSH
48338: LD_INT 3
48340: NEG
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 3
48352: NEG
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48366: LD_ADDR_VAR 0 53
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 3
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 3
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48410: LD_ADDR_VAR 0 54
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48451: LD_ADDR_VAR 0 55
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 3
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 3
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48491: LD_ADDR_VAR 0 56
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 3
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 3
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48532: LD_ADDR_VAR 0 57
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 3
48550: NEG
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 3
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: LIST
48575: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48576: LD_ADDR_VAR 0 58
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: LD_INT 3
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: LD_INT 3
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48622: LD_ADDR_VAR 0 59
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48666: LD_ADDR_VAR 0 60
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48707: LD_ADDR_VAR 0 61
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: LIST
48746: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48747: LD_ADDR_VAR 0 62
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: LIST
48787: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48788: LD_ADDR_VAR 0 63
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48832: LD_ADDR_VAR 0 64
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: ST_TO_ADDR
// end ; 2 :
48878: GO 52144
48880: LD_INT 2
48882: DOUBLE
48883: EQUAL
48884: IFTRUE 48888
48886: GO 52143
48888: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48889: LD_ADDR_VAR 0 29
48893: PUSH
48894: LD_INT 4
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 4
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 5
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 5
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 4
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 3
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 5
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 3
48989: PUSH
48990: LD_INT 3
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 3
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 4
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 4
49019: PUSH
49020: LD_INT 4
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: PUSH
49030: LD_INT 4
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: LD_INT 3
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: LD_INT 2
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 4
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: LD_INT 4
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 4
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 3
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 4
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 5
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 5
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 4
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: LD_INT 5
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 3
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 3
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 4
49228: NEG
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 4
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 4
49251: NEG
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 4
49274: NEG
49275: PUSH
49276: LD_INT 4
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 4
49286: NEG
49287: PUSH
49288: LD_INT 5
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 3
49298: NEG
49299: PUSH
49300: LD_INT 4
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 3
49310: NEG
49311: PUSH
49312: LD_INT 3
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 4
49322: NEG
49323: PUSH
49324: LD_INT 3
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 5
49334: NEG
49335: PUSH
49336: LD_INT 4
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 5
49346: NEG
49347: PUSH
49348: LD_INT 5
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 3
49358: NEG
49359: PUSH
49360: LD_INT 5
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 5
49370: NEG
49371: PUSH
49372: LD_INT 3
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49427: LD_ADDR_VAR 0 30
49431: PUSH
49432: LD_INT 4
49434: PUSH
49435: LD_INT 4
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 4
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 5
49454: PUSH
49455: LD_INT 4
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 5
49464: PUSH
49465: LD_INT 5
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 4
49474: PUSH
49475: LD_INT 5
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: PUSH
49485: LD_INT 4
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: LD_INT 3
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 5
49504: PUSH
49505: LD_INT 3
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: LD_INT 5
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 3
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 4
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 4
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 3
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 4
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 4
49617: NEG
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 4
49628: NEG
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: NEG
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 4
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 5
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 5
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 5
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 3
49719: NEG
49720: PUSH
49721: LD_INT 3
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 3
49731: NEG
49732: PUSH
49733: LD_INT 4
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 3
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 3
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 4
49779: NEG
49780: PUSH
49781: LD_INT 3
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 4
49791: NEG
49792: PUSH
49793: LD_INT 4
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 4
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 4
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 4
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 5
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 4
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 3
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 4
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 5
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 5
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49974: LD_ADDR_VAR 0 31
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 4
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 4
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 5
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 5
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 4
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 3
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: LD_INT 5
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: LD_INT 3
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 3
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 4
50130: NEG
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 4
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 4
50153: NEG
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 4
50176: NEG
50177: PUSH
50178: LD_INT 4
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 4
50188: NEG
50189: PUSH
50190: LD_INT 5
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 3
50200: NEG
50201: PUSH
50202: LD_INT 4
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 3
50212: NEG
50213: PUSH
50214: LD_INT 3
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 4
50224: NEG
50225: PUSH
50226: LD_INT 3
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 5
50236: NEG
50237: PUSH
50238: LD_INT 4
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 5
50248: NEG
50249: PUSH
50250: LD_INT 5
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 3
50260: NEG
50261: PUSH
50262: LD_INT 5
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 5
50272: NEG
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 3
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 4
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: LD_INT 3
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: LD_INT 4
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 4
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 4
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 4
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 5
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 5
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 4
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 3
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 5
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50524: LD_ADDR_VAR 0 32
50528: PUSH
50529: LD_INT 4
50531: NEG
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 4
50542: NEG
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 4
50576: NEG
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 5
50587: NEG
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 5
50598: NEG
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 5
50610: NEG
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 3
50633: NEG
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: LD_INT 4
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 3
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 3
50681: NEG
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 4
50693: NEG
50694: PUSH
50695: LD_INT 3
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 4
50705: NEG
50706: PUSH
50707: LD_INT 4
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: LD_INT 4
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 4
50729: NEG
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 4
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 5
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 4
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 3
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 4
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 5
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 3
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 5
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 3
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 3
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 4
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 4
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 3
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 4
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 4
50936: PUSH
50937: LD_INT 4
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 4
50946: PUSH
50947: LD_INT 3
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 5
50956: PUSH
50957: LD_INT 4
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 5
50966: PUSH
50967: LD_INT 5
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 4
50976: PUSH
50977: LD_INT 5
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 3
50986: PUSH
50987: LD_INT 4
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 5
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 3
51016: PUSH
51017: LD_INT 5
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51071: LD_ADDR_VAR 0 33
51075: PUSH
51076: LD_INT 4
51078: NEG
51079: PUSH
51080: LD_INT 4
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 4
51090: NEG
51091: PUSH
51092: LD_INT 5
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 3
51102: NEG
51103: PUSH
51104: LD_INT 4
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 3
51114: NEG
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 4
51126: NEG
51127: PUSH
51128: LD_INT 3
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 5
51138: NEG
51139: PUSH
51140: LD_INT 4
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 5
51150: NEG
51151: PUSH
51152: LD_INT 5
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: LD_INT 5
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 5
51174: NEG
51175: PUSH
51176: LD_INT 3
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 3
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 4
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 3
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 3
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 4
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 4
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 4
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 4
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 5
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 5
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 4
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 5
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 3
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 4
51401: PUSH
51402: LD_INT 3
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 4
51411: PUSH
51412: LD_INT 4
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: PUSH
51422: LD_INT 4
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 4
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 4
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 3
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 4
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 5
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 5
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 4
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 5
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51609: LD_ADDR_VAR 0 34
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 4
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 5
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 4
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 3
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 4
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 5
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 3
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 5
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 4
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 4
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 4
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 4
51811: PUSH
51812: LD_INT 4
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 4
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 5
51831: PUSH
51832: LD_INT 4
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 5
51841: PUSH
51842: LD_INT 5
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 4
51851: PUSH
51852: LD_INT 5
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: LD_INT 4
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 3
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 5
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 5
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 4
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 4
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: LD_INT 3
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 4
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 4
51994: NEG
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 4
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 4
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 5
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 5
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 5
52073: NEG
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: NEG
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: ST_TO_ADDR
// end ; end ;
52141: GO 52144
52143: POP
// case btype of b_depot , b_warehouse :
52144: LD_VAR 0 1
52148: PUSH
52149: LD_INT 0
52151: DOUBLE
52152: EQUAL
52153: IFTRUE 52163
52155: LD_INT 1
52157: DOUBLE
52158: EQUAL
52159: IFTRUE 52163
52161: GO 52364
52163: POP
// case nation of nation_american :
52164: LD_VAR 0 5
52168: PUSH
52169: LD_INT 1
52171: DOUBLE
52172: EQUAL
52173: IFTRUE 52177
52175: GO 52233
52177: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52178: LD_ADDR_VAR 0 9
52182: PUSH
52183: LD_VAR 0 11
52187: PUSH
52188: LD_VAR 0 12
52192: PUSH
52193: LD_VAR 0 13
52197: PUSH
52198: LD_VAR 0 14
52202: PUSH
52203: LD_VAR 0 15
52207: PUSH
52208: LD_VAR 0 16
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: PUSH
52221: LD_VAR 0 4
52225: PUSH
52226: LD_INT 1
52228: PLUS
52229: ARRAY
52230: ST_TO_ADDR
52231: GO 52362
52233: LD_INT 2
52235: DOUBLE
52236: EQUAL
52237: IFTRUE 52241
52239: GO 52297
52241: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52242: LD_ADDR_VAR 0 9
52246: PUSH
52247: LD_VAR 0 17
52251: PUSH
52252: LD_VAR 0 18
52256: PUSH
52257: LD_VAR 0 19
52261: PUSH
52262: LD_VAR 0 20
52266: PUSH
52267: LD_VAR 0 21
52271: PUSH
52272: LD_VAR 0 22
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: PUSH
52285: LD_VAR 0 4
52289: PUSH
52290: LD_INT 1
52292: PLUS
52293: ARRAY
52294: ST_TO_ADDR
52295: GO 52362
52297: LD_INT 3
52299: DOUBLE
52300: EQUAL
52301: IFTRUE 52305
52303: GO 52361
52305: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52306: LD_ADDR_VAR 0 9
52310: PUSH
52311: LD_VAR 0 23
52315: PUSH
52316: LD_VAR 0 24
52320: PUSH
52321: LD_VAR 0 25
52325: PUSH
52326: LD_VAR 0 26
52330: PUSH
52331: LD_VAR 0 27
52335: PUSH
52336: LD_VAR 0 28
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: PUSH
52349: LD_VAR 0 4
52353: PUSH
52354: LD_INT 1
52356: PLUS
52357: ARRAY
52358: ST_TO_ADDR
52359: GO 52362
52361: POP
52362: GO 52917
52364: LD_INT 2
52366: DOUBLE
52367: EQUAL
52368: IFTRUE 52378
52370: LD_INT 3
52372: DOUBLE
52373: EQUAL
52374: IFTRUE 52378
52376: GO 52434
52378: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52379: LD_ADDR_VAR 0 9
52383: PUSH
52384: LD_VAR 0 29
52388: PUSH
52389: LD_VAR 0 30
52393: PUSH
52394: LD_VAR 0 31
52398: PUSH
52399: LD_VAR 0 32
52403: PUSH
52404: LD_VAR 0 33
52408: PUSH
52409: LD_VAR 0 34
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: PUSH
52422: LD_VAR 0 4
52426: PUSH
52427: LD_INT 1
52429: PLUS
52430: ARRAY
52431: ST_TO_ADDR
52432: GO 52917
52434: LD_INT 16
52436: DOUBLE
52437: EQUAL
52438: IFTRUE 52496
52440: LD_INT 17
52442: DOUBLE
52443: EQUAL
52444: IFTRUE 52496
52446: LD_INT 18
52448: DOUBLE
52449: EQUAL
52450: IFTRUE 52496
52452: LD_INT 19
52454: DOUBLE
52455: EQUAL
52456: IFTRUE 52496
52458: LD_INT 22
52460: DOUBLE
52461: EQUAL
52462: IFTRUE 52496
52464: LD_INT 20
52466: DOUBLE
52467: EQUAL
52468: IFTRUE 52496
52470: LD_INT 21
52472: DOUBLE
52473: EQUAL
52474: IFTRUE 52496
52476: LD_INT 23
52478: DOUBLE
52479: EQUAL
52480: IFTRUE 52496
52482: LD_INT 24
52484: DOUBLE
52485: EQUAL
52486: IFTRUE 52496
52488: LD_INT 25
52490: DOUBLE
52491: EQUAL
52492: IFTRUE 52496
52494: GO 52552
52496: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52497: LD_ADDR_VAR 0 9
52501: PUSH
52502: LD_VAR 0 35
52506: PUSH
52507: LD_VAR 0 36
52511: PUSH
52512: LD_VAR 0 37
52516: PUSH
52517: LD_VAR 0 38
52521: PUSH
52522: LD_VAR 0 39
52526: PUSH
52527: LD_VAR 0 40
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: PUSH
52540: LD_VAR 0 4
52544: PUSH
52545: LD_INT 1
52547: PLUS
52548: ARRAY
52549: ST_TO_ADDR
52550: GO 52917
52552: LD_INT 6
52554: DOUBLE
52555: EQUAL
52556: IFTRUE 52608
52558: LD_INT 7
52560: DOUBLE
52561: EQUAL
52562: IFTRUE 52608
52564: LD_INT 8
52566: DOUBLE
52567: EQUAL
52568: IFTRUE 52608
52570: LD_INT 13
52572: DOUBLE
52573: EQUAL
52574: IFTRUE 52608
52576: LD_INT 12
52578: DOUBLE
52579: EQUAL
52580: IFTRUE 52608
52582: LD_INT 15
52584: DOUBLE
52585: EQUAL
52586: IFTRUE 52608
52588: LD_INT 11
52590: DOUBLE
52591: EQUAL
52592: IFTRUE 52608
52594: LD_INT 14
52596: DOUBLE
52597: EQUAL
52598: IFTRUE 52608
52600: LD_INT 10
52602: DOUBLE
52603: EQUAL
52604: IFTRUE 52608
52606: GO 52664
52608: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52609: LD_ADDR_VAR 0 9
52613: PUSH
52614: LD_VAR 0 41
52618: PUSH
52619: LD_VAR 0 42
52623: PUSH
52624: LD_VAR 0 43
52628: PUSH
52629: LD_VAR 0 44
52633: PUSH
52634: LD_VAR 0 45
52638: PUSH
52639: LD_VAR 0 46
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: PUSH
52652: LD_VAR 0 4
52656: PUSH
52657: LD_INT 1
52659: PLUS
52660: ARRAY
52661: ST_TO_ADDR
52662: GO 52917
52664: LD_INT 36
52666: DOUBLE
52667: EQUAL
52668: IFTRUE 52672
52670: GO 52728
52672: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52673: LD_ADDR_VAR 0 9
52677: PUSH
52678: LD_VAR 0 47
52682: PUSH
52683: LD_VAR 0 48
52687: PUSH
52688: LD_VAR 0 49
52692: PUSH
52693: LD_VAR 0 50
52697: PUSH
52698: LD_VAR 0 51
52702: PUSH
52703: LD_VAR 0 52
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: PUSH
52716: LD_VAR 0 4
52720: PUSH
52721: LD_INT 1
52723: PLUS
52724: ARRAY
52725: ST_TO_ADDR
52726: GO 52917
52728: LD_INT 4
52730: DOUBLE
52731: EQUAL
52732: IFTRUE 52754
52734: LD_INT 5
52736: DOUBLE
52737: EQUAL
52738: IFTRUE 52754
52740: LD_INT 34
52742: DOUBLE
52743: EQUAL
52744: IFTRUE 52754
52746: LD_INT 37
52748: DOUBLE
52749: EQUAL
52750: IFTRUE 52754
52752: GO 52810
52754: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52755: LD_ADDR_VAR 0 9
52759: PUSH
52760: LD_VAR 0 53
52764: PUSH
52765: LD_VAR 0 54
52769: PUSH
52770: LD_VAR 0 55
52774: PUSH
52775: LD_VAR 0 56
52779: PUSH
52780: LD_VAR 0 57
52784: PUSH
52785: LD_VAR 0 58
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: PUSH
52798: LD_VAR 0 4
52802: PUSH
52803: LD_INT 1
52805: PLUS
52806: ARRAY
52807: ST_TO_ADDR
52808: GO 52917
52810: LD_INT 31
52812: DOUBLE
52813: EQUAL
52814: IFTRUE 52860
52816: LD_INT 32
52818: DOUBLE
52819: EQUAL
52820: IFTRUE 52860
52822: LD_INT 33
52824: DOUBLE
52825: EQUAL
52826: IFTRUE 52860
52828: LD_INT 27
52830: DOUBLE
52831: EQUAL
52832: IFTRUE 52860
52834: LD_INT 26
52836: DOUBLE
52837: EQUAL
52838: IFTRUE 52860
52840: LD_INT 28
52842: DOUBLE
52843: EQUAL
52844: IFTRUE 52860
52846: LD_INT 29
52848: DOUBLE
52849: EQUAL
52850: IFTRUE 52860
52852: LD_INT 30
52854: DOUBLE
52855: EQUAL
52856: IFTRUE 52860
52858: GO 52916
52860: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52861: LD_ADDR_VAR 0 9
52865: PUSH
52866: LD_VAR 0 59
52870: PUSH
52871: LD_VAR 0 60
52875: PUSH
52876: LD_VAR 0 61
52880: PUSH
52881: LD_VAR 0 62
52885: PUSH
52886: LD_VAR 0 63
52890: PUSH
52891: LD_VAR 0 64
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: PUSH
52904: LD_VAR 0 4
52908: PUSH
52909: LD_INT 1
52911: PLUS
52912: ARRAY
52913: ST_TO_ADDR
52914: GO 52917
52916: POP
// temp_list2 = [ ] ;
52917: LD_ADDR_VAR 0 10
52921: PUSH
52922: EMPTY
52923: ST_TO_ADDR
// for i in temp_list do
52924: LD_ADDR_VAR 0 8
52928: PUSH
52929: LD_VAR 0 9
52933: PUSH
52934: FOR_IN
52935: IFFALSE 52987
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52937: LD_ADDR_VAR 0 10
52941: PUSH
52942: LD_VAR 0 10
52946: PUSH
52947: LD_VAR 0 8
52951: PUSH
52952: LD_INT 1
52954: ARRAY
52955: PUSH
52956: LD_VAR 0 2
52960: PLUS
52961: PUSH
52962: LD_VAR 0 8
52966: PUSH
52967: LD_INT 2
52969: ARRAY
52970: PUSH
52971: LD_VAR 0 3
52975: PLUS
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: EMPTY
52982: LIST
52983: ADD
52984: ST_TO_ADDR
52985: GO 52934
52987: POP
52988: POP
// result = temp_list2 ;
52989: LD_ADDR_VAR 0 7
52993: PUSH
52994: LD_VAR 0 10
52998: ST_TO_ADDR
// end ;
52999: LD_VAR 0 7
53003: RET
// export function EnemyInRange ( unit , dist ) ; begin
53004: LD_INT 0
53006: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53007: LD_ADDR_VAR 0 3
53011: PUSH
53012: LD_VAR 0 1
53016: PPUSH
53017: CALL_OW 255
53021: PPUSH
53022: LD_VAR 0 1
53026: PPUSH
53027: CALL_OW 250
53031: PPUSH
53032: LD_VAR 0 1
53036: PPUSH
53037: CALL_OW 251
53041: PPUSH
53042: LD_VAR 0 2
53046: PPUSH
53047: CALL 27108 0 4
53051: PUSH
53052: LD_INT 4
53054: ARRAY
53055: ST_TO_ADDR
// end ;
53056: LD_VAR 0 3
53060: RET
// export function PlayerSeeMe ( unit ) ; begin
53061: LD_INT 0
53063: PPUSH
// result := See ( your_side , unit ) ;
53064: LD_ADDR_VAR 0 2
53068: PUSH
53069: LD_OWVAR 2
53073: PPUSH
53074: LD_VAR 0 1
53078: PPUSH
53079: CALL_OW 292
53083: ST_TO_ADDR
// end ;
53084: LD_VAR 0 2
53088: RET
// export function ReverseDir ( unit ) ; begin
53089: LD_INT 0
53091: PPUSH
// if not unit then
53092: LD_VAR 0 1
53096: NOT
53097: IFFALSE 53101
// exit ;
53099: GO 53124
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53101: LD_ADDR_VAR 0 2
53105: PUSH
53106: LD_VAR 0 1
53110: PPUSH
53111: CALL_OW 254
53115: PUSH
53116: LD_INT 3
53118: PLUS
53119: PUSH
53120: LD_INT 6
53122: MOD
53123: ST_TO_ADDR
// end ;
53124: LD_VAR 0 2
53128: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53129: LD_INT 0
53131: PPUSH
53132: PPUSH
53133: PPUSH
53134: PPUSH
53135: PPUSH
// if not hexes then
53136: LD_VAR 0 2
53140: NOT
53141: IFFALSE 53145
// exit ;
53143: GO 53293
// dist := 9999 ;
53145: LD_ADDR_VAR 0 5
53149: PUSH
53150: LD_INT 9999
53152: ST_TO_ADDR
// for i = 1 to hexes do
53153: LD_ADDR_VAR 0 4
53157: PUSH
53158: DOUBLE
53159: LD_INT 1
53161: DEC
53162: ST_TO_ADDR
53163: LD_VAR 0 2
53167: PUSH
53168: FOR_TO
53169: IFFALSE 53281
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53171: LD_VAR 0 1
53175: PPUSH
53176: LD_VAR 0 2
53180: PUSH
53181: LD_VAR 0 4
53185: ARRAY
53186: PUSH
53187: LD_INT 1
53189: ARRAY
53190: PPUSH
53191: LD_VAR 0 2
53195: PUSH
53196: LD_VAR 0 4
53200: ARRAY
53201: PUSH
53202: LD_INT 2
53204: ARRAY
53205: PPUSH
53206: CALL_OW 297
53210: PUSH
53211: LD_VAR 0 5
53215: LESS
53216: IFFALSE 53279
// begin hex := hexes [ i ] ;
53218: LD_ADDR_VAR 0 7
53222: PUSH
53223: LD_VAR 0 2
53227: PUSH
53228: LD_VAR 0 4
53232: ARRAY
53233: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53234: LD_ADDR_VAR 0 5
53238: PUSH
53239: LD_VAR 0 1
53243: PPUSH
53244: LD_VAR 0 2
53248: PUSH
53249: LD_VAR 0 4
53253: ARRAY
53254: PUSH
53255: LD_INT 1
53257: ARRAY
53258: PPUSH
53259: LD_VAR 0 2
53263: PUSH
53264: LD_VAR 0 4
53268: ARRAY
53269: PUSH
53270: LD_INT 2
53272: ARRAY
53273: PPUSH
53274: CALL_OW 297
53278: ST_TO_ADDR
// end ; end ;
53279: GO 53168
53281: POP
53282: POP
// result := hex ;
53283: LD_ADDR_VAR 0 3
53287: PUSH
53288: LD_VAR 0 7
53292: ST_TO_ADDR
// end ;
53293: LD_VAR 0 3
53297: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53298: LD_INT 0
53300: PPUSH
53301: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53302: LD_VAR 0 1
53306: NOT
53307: PUSH
53308: LD_VAR 0 1
53312: PUSH
53313: LD_INT 21
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 23
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PPUSH
53337: CALL_OW 69
53341: IN
53342: NOT
53343: OR
53344: IFFALSE 53348
// exit ;
53346: GO 53395
// for i = 1 to 3 do
53348: LD_ADDR_VAR 0 3
53352: PUSH
53353: DOUBLE
53354: LD_INT 1
53356: DEC
53357: ST_TO_ADDR
53358: LD_INT 3
53360: PUSH
53361: FOR_TO
53362: IFFALSE 53393
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53364: LD_VAR 0 1
53368: PPUSH
53369: CALL_OW 250
53373: PPUSH
53374: LD_VAR 0 1
53378: PPUSH
53379: CALL_OW 251
53383: PPUSH
53384: LD_INT 1
53386: PPUSH
53387: CALL_OW 453
53391: GO 53361
53393: POP
53394: POP
// end ;
53395: LD_VAR 0 2
53399: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53400: LD_INT 0
53402: PPUSH
53403: PPUSH
53404: PPUSH
53405: PPUSH
53406: PPUSH
53407: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53408: LD_VAR 0 1
53412: NOT
53413: PUSH
53414: LD_VAR 0 2
53418: NOT
53419: OR
53420: PUSH
53421: LD_VAR 0 1
53425: PPUSH
53426: CALL_OW 314
53430: OR
53431: IFFALSE 53435
// exit ;
53433: GO 53876
// x := GetX ( enemy_unit ) ;
53435: LD_ADDR_VAR 0 7
53439: PUSH
53440: LD_VAR 0 2
53444: PPUSH
53445: CALL_OW 250
53449: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53450: LD_ADDR_VAR 0 8
53454: PUSH
53455: LD_VAR 0 2
53459: PPUSH
53460: CALL_OW 251
53464: ST_TO_ADDR
// if not x or not y then
53465: LD_VAR 0 7
53469: NOT
53470: PUSH
53471: LD_VAR 0 8
53475: NOT
53476: OR
53477: IFFALSE 53481
// exit ;
53479: GO 53876
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53481: LD_ADDR_VAR 0 6
53485: PUSH
53486: LD_VAR 0 7
53490: PPUSH
53491: LD_INT 0
53493: PPUSH
53494: LD_INT 4
53496: PPUSH
53497: CALL_OW 272
53501: PUSH
53502: LD_VAR 0 8
53506: PPUSH
53507: LD_INT 0
53509: PPUSH
53510: LD_INT 4
53512: PPUSH
53513: CALL_OW 273
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_VAR 0 7
53526: PPUSH
53527: LD_INT 1
53529: PPUSH
53530: LD_INT 4
53532: PPUSH
53533: CALL_OW 272
53537: PUSH
53538: LD_VAR 0 8
53542: PPUSH
53543: LD_INT 1
53545: PPUSH
53546: LD_INT 4
53548: PPUSH
53549: CALL_OW 273
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_VAR 0 7
53562: PPUSH
53563: LD_INT 2
53565: PPUSH
53566: LD_INT 4
53568: PPUSH
53569: CALL_OW 272
53573: PUSH
53574: LD_VAR 0 8
53578: PPUSH
53579: LD_INT 2
53581: PPUSH
53582: LD_INT 4
53584: PPUSH
53585: CALL_OW 273
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_VAR 0 7
53598: PPUSH
53599: LD_INT 3
53601: PPUSH
53602: LD_INT 4
53604: PPUSH
53605: CALL_OW 272
53609: PUSH
53610: LD_VAR 0 8
53614: PPUSH
53615: LD_INT 3
53617: PPUSH
53618: LD_INT 4
53620: PPUSH
53621: CALL_OW 273
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_VAR 0 7
53634: PPUSH
53635: LD_INT 4
53637: PPUSH
53638: LD_INT 4
53640: PPUSH
53641: CALL_OW 272
53645: PUSH
53646: LD_VAR 0 8
53650: PPUSH
53651: LD_INT 4
53653: PPUSH
53654: LD_INT 4
53656: PPUSH
53657: CALL_OW 273
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_VAR 0 7
53670: PPUSH
53671: LD_INT 5
53673: PPUSH
53674: LD_INT 4
53676: PPUSH
53677: CALL_OW 272
53681: PUSH
53682: LD_VAR 0 8
53686: PPUSH
53687: LD_INT 5
53689: PPUSH
53690: LD_INT 4
53692: PPUSH
53693: CALL_OW 273
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: ST_TO_ADDR
// for i = tmp downto 1 do
53710: LD_ADDR_VAR 0 4
53714: PUSH
53715: DOUBLE
53716: LD_VAR 0 6
53720: INC
53721: ST_TO_ADDR
53722: LD_INT 1
53724: PUSH
53725: FOR_DOWNTO
53726: IFFALSE 53827
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53728: LD_VAR 0 6
53732: PUSH
53733: LD_VAR 0 4
53737: ARRAY
53738: PUSH
53739: LD_INT 1
53741: ARRAY
53742: PPUSH
53743: LD_VAR 0 6
53747: PUSH
53748: LD_VAR 0 4
53752: ARRAY
53753: PUSH
53754: LD_INT 2
53756: ARRAY
53757: PPUSH
53758: CALL_OW 488
53762: NOT
53763: PUSH
53764: LD_VAR 0 6
53768: PUSH
53769: LD_VAR 0 4
53773: ARRAY
53774: PUSH
53775: LD_INT 1
53777: ARRAY
53778: PPUSH
53779: LD_VAR 0 6
53783: PUSH
53784: LD_VAR 0 4
53788: ARRAY
53789: PUSH
53790: LD_INT 2
53792: ARRAY
53793: PPUSH
53794: CALL_OW 428
53798: PUSH
53799: LD_INT 0
53801: NONEQUAL
53802: OR
53803: IFFALSE 53825
// tmp := Delete ( tmp , i ) ;
53805: LD_ADDR_VAR 0 6
53809: PUSH
53810: LD_VAR 0 6
53814: PPUSH
53815: LD_VAR 0 4
53819: PPUSH
53820: CALL_OW 3
53824: ST_TO_ADDR
53825: GO 53725
53827: POP
53828: POP
// j := GetClosestHex ( unit , tmp ) ;
53829: LD_ADDR_VAR 0 5
53833: PUSH
53834: LD_VAR 0 1
53838: PPUSH
53839: LD_VAR 0 6
53843: PPUSH
53844: CALL 53129 0 2
53848: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53849: LD_VAR 0 1
53853: PPUSH
53854: LD_VAR 0 5
53858: PUSH
53859: LD_INT 1
53861: ARRAY
53862: PPUSH
53863: LD_VAR 0 5
53867: PUSH
53868: LD_INT 2
53870: ARRAY
53871: PPUSH
53872: CALL_OW 111
// end ;
53876: LD_VAR 0 3
53880: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53881: LD_INT 0
53883: PPUSH
53884: PPUSH
53885: PPUSH
// uc_side = 0 ;
53886: LD_ADDR_OWVAR 20
53890: PUSH
53891: LD_INT 0
53893: ST_TO_ADDR
// uc_nation = 0 ;
53894: LD_ADDR_OWVAR 21
53898: PUSH
53899: LD_INT 0
53901: ST_TO_ADDR
// InitHc ;
53902: CALL_OW 19
// InitVc ;
53906: CALL_OW 20
// if mastodonts then
53910: LD_VAR 0 6
53914: IFFALSE 53981
// for i = 1 to mastodonts do
53916: LD_ADDR_VAR 0 11
53920: PUSH
53921: DOUBLE
53922: LD_INT 1
53924: DEC
53925: ST_TO_ADDR
53926: LD_VAR 0 6
53930: PUSH
53931: FOR_TO
53932: IFFALSE 53979
// begin vc_chassis := 31 ;
53934: LD_ADDR_OWVAR 37
53938: PUSH
53939: LD_INT 31
53941: ST_TO_ADDR
// vc_control := control_rider ;
53942: LD_ADDR_OWVAR 38
53946: PUSH
53947: LD_INT 4
53949: ST_TO_ADDR
// animal := CreateVehicle ;
53950: LD_ADDR_VAR 0 12
53954: PUSH
53955: CALL_OW 45
53959: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53960: LD_VAR 0 12
53964: PPUSH
53965: LD_VAR 0 8
53969: PPUSH
53970: LD_INT 0
53972: PPUSH
53973: CALL 56050 0 3
// end ;
53977: GO 53931
53979: POP
53980: POP
// if horses then
53981: LD_VAR 0 5
53985: IFFALSE 54052
// for i = 1 to horses do
53987: LD_ADDR_VAR 0 11
53991: PUSH
53992: DOUBLE
53993: LD_INT 1
53995: DEC
53996: ST_TO_ADDR
53997: LD_VAR 0 5
54001: PUSH
54002: FOR_TO
54003: IFFALSE 54050
// begin hc_class := 21 ;
54005: LD_ADDR_OWVAR 28
54009: PUSH
54010: LD_INT 21
54012: ST_TO_ADDR
// hc_gallery :=  ;
54013: LD_ADDR_OWVAR 33
54017: PUSH
54018: LD_STRING 
54020: ST_TO_ADDR
// animal := CreateHuman ;
54021: LD_ADDR_VAR 0 12
54025: PUSH
54026: CALL_OW 44
54030: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54031: LD_VAR 0 12
54035: PPUSH
54036: LD_VAR 0 8
54040: PPUSH
54041: LD_INT 0
54043: PPUSH
54044: CALL 56050 0 3
// end ;
54048: GO 54002
54050: POP
54051: POP
// if birds then
54052: LD_VAR 0 1
54056: IFFALSE 54123
// for i = 1 to birds do
54058: LD_ADDR_VAR 0 11
54062: PUSH
54063: DOUBLE
54064: LD_INT 1
54066: DEC
54067: ST_TO_ADDR
54068: LD_VAR 0 1
54072: PUSH
54073: FOR_TO
54074: IFFALSE 54121
// begin hc_class = 18 ;
54076: LD_ADDR_OWVAR 28
54080: PUSH
54081: LD_INT 18
54083: ST_TO_ADDR
// hc_gallery =  ;
54084: LD_ADDR_OWVAR 33
54088: PUSH
54089: LD_STRING 
54091: ST_TO_ADDR
// animal := CreateHuman ;
54092: LD_ADDR_VAR 0 12
54096: PUSH
54097: CALL_OW 44
54101: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54102: LD_VAR 0 12
54106: PPUSH
54107: LD_VAR 0 8
54111: PPUSH
54112: LD_INT 0
54114: PPUSH
54115: CALL 56050 0 3
// end ;
54119: GO 54073
54121: POP
54122: POP
// if tigers then
54123: LD_VAR 0 2
54127: IFFALSE 54211
// for i = 1 to tigers do
54129: LD_ADDR_VAR 0 11
54133: PUSH
54134: DOUBLE
54135: LD_INT 1
54137: DEC
54138: ST_TO_ADDR
54139: LD_VAR 0 2
54143: PUSH
54144: FOR_TO
54145: IFFALSE 54209
// begin hc_class = class_tiger ;
54147: LD_ADDR_OWVAR 28
54151: PUSH
54152: LD_INT 14
54154: ST_TO_ADDR
// hc_gallery =  ;
54155: LD_ADDR_OWVAR 33
54159: PUSH
54160: LD_STRING 
54162: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54163: LD_ADDR_OWVAR 35
54167: PUSH
54168: LD_INT 7
54170: NEG
54171: PPUSH
54172: LD_INT 7
54174: PPUSH
54175: CALL_OW 12
54179: ST_TO_ADDR
// animal := CreateHuman ;
54180: LD_ADDR_VAR 0 12
54184: PUSH
54185: CALL_OW 44
54189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54190: LD_VAR 0 12
54194: PPUSH
54195: LD_VAR 0 8
54199: PPUSH
54200: LD_INT 0
54202: PPUSH
54203: CALL 56050 0 3
// end ;
54207: GO 54144
54209: POP
54210: POP
// if apemans then
54211: LD_VAR 0 3
54215: IFFALSE 54338
// for i = 1 to apemans do
54217: LD_ADDR_VAR 0 11
54221: PUSH
54222: DOUBLE
54223: LD_INT 1
54225: DEC
54226: ST_TO_ADDR
54227: LD_VAR 0 3
54231: PUSH
54232: FOR_TO
54233: IFFALSE 54336
// begin hc_class = class_apeman ;
54235: LD_ADDR_OWVAR 28
54239: PUSH
54240: LD_INT 12
54242: ST_TO_ADDR
// hc_gallery =  ;
54243: LD_ADDR_OWVAR 33
54247: PUSH
54248: LD_STRING 
54250: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54251: LD_ADDR_OWVAR 35
54255: PUSH
54256: LD_INT 5
54258: NEG
54259: PPUSH
54260: LD_INT 5
54262: PPUSH
54263: CALL_OW 12
54267: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54268: LD_ADDR_OWVAR 31
54272: PUSH
54273: LD_INT 1
54275: PPUSH
54276: LD_INT 3
54278: PPUSH
54279: CALL_OW 12
54283: PUSH
54284: LD_INT 1
54286: PPUSH
54287: LD_INT 3
54289: PPUSH
54290: CALL_OW 12
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: ST_TO_ADDR
// animal := CreateHuman ;
54307: LD_ADDR_VAR 0 12
54311: PUSH
54312: CALL_OW 44
54316: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54317: LD_VAR 0 12
54321: PPUSH
54322: LD_VAR 0 8
54326: PPUSH
54327: LD_INT 0
54329: PPUSH
54330: CALL 56050 0 3
// end ;
54334: GO 54232
54336: POP
54337: POP
// if enchidnas then
54338: LD_VAR 0 4
54342: IFFALSE 54409
// for i = 1 to enchidnas do
54344: LD_ADDR_VAR 0 11
54348: PUSH
54349: DOUBLE
54350: LD_INT 1
54352: DEC
54353: ST_TO_ADDR
54354: LD_VAR 0 4
54358: PUSH
54359: FOR_TO
54360: IFFALSE 54407
// begin hc_class = 13 ;
54362: LD_ADDR_OWVAR 28
54366: PUSH
54367: LD_INT 13
54369: ST_TO_ADDR
// hc_gallery =  ;
54370: LD_ADDR_OWVAR 33
54374: PUSH
54375: LD_STRING 
54377: ST_TO_ADDR
// animal := CreateHuman ;
54378: LD_ADDR_VAR 0 12
54382: PUSH
54383: CALL_OW 44
54387: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54388: LD_VAR 0 12
54392: PPUSH
54393: LD_VAR 0 8
54397: PPUSH
54398: LD_INT 0
54400: PPUSH
54401: CALL 56050 0 3
// end ;
54405: GO 54359
54407: POP
54408: POP
// if fishes then
54409: LD_VAR 0 7
54413: IFFALSE 54480
// for i = 1 to fishes do
54415: LD_ADDR_VAR 0 11
54419: PUSH
54420: DOUBLE
54421: LD_INT 1
54423: DEC
54424: ST_TO_ADDR
54425: LD_VAR 0 7
54429: PUSH
54430: FOR_TO
54431: IFFALSE 54478
// begin hc_class = 20 ;
54433: LD_ADDR_OWVAR 28
54437: PUSH
54438: LD_INT 20
54440: ST_TO_ADDR
// hc_gallery =  ;
54441: LD_ADDR_OWVAR 33
54445: PUSH
54446: LD_STRING 
54448: ST_TO_ADDR
// animal := CreateHuman ;
54449: LD_ADDR_VAR 0 12
54453: PUSH
54454: CALL_OW 44
54458: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54459: LD_VAR 0 12
54463: PPUSH
54464: LD_VAR 0 9
54468: PPUSH
54469: LD_INT 0
54471: PPUSH
54472: CALL 56050 0 3
// end ;
54476: GO 54430
54478: POP
54479: POP
// end ;
54480: LD_VAR 0 10
54484: RET
// export function WantHeal ( sci , unit ) ; begin
54485: LD_INT 0
54487: PPUSH
// if GetTaskList ( sci ) > 0 then
54488: LD_VAR 0 1
54492: PPUSH
54493: CALL_OW 437
54497: PUSH
54498: LD_INT 0
54500: GREATER
54501: IFFALSE 54571
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54503: LD_VAR 0 1
54507: PPUSH
54508: CALL_OW 437
54512: PUSH
54513: LD_INT 1
54515: ARRAY
54516: PUSH
54517: LD_INT 1
54519: ARRAY
54520: PUSH
54521: LD_STRING l
54523: EQUAL
54524: PUSH
54525: LD_VAR 0 1
54529: PPUSH
54530: CALL_OW 437
54534: PUSH
54535: LD_INT 1
54537: ARRAY
54538: PUSH
54539: LD_INT 4
54541: ARRAY
54542: PUSH
54543: LD_VAR 0 2
54547: EQUAL
54548: AND
54549: IFFALSE 54561
// result := true else
54551: LD_ADDR_VAR 0 3
54555: PUSH
54556: LD_INT 1
54558: ST_TO_ADDR
54559: GO 54569
// result := false ;
54561: LD_ADDR_VAR 0 3
54565: PUSH
54566: LD_INT 0
54568: ST_TO_ADDR
// end else
54569: GO 54579
// result := false ;
54571: LD_ADDR_VAR 0 3
54575: PUSH
54576: LD_INT 0
54578: ST_TO_ADDR
// end ;
54579: LD_VAR 0 3
54583: RET
// export function HealTarget ( sci ) ; begin
54584: LD_INT 0
54586: PPUSH
// if not sci then
54587: LD_VAR 0 1
54591: NOT
54592: IFFALSE 54596
// exit ;
54594: GO 54661
// result := 0 ;
54596: LD_ADDR_VAR 0 2
54600: PUSH
54601: LD_INT 0
54603: ST_TO_ADDR
// if GetTaskList ( sci ) then
54604: LD_VAR 0 1
54608: PPUSH
54609: CALL_OW 437
54613: IFFALSE 54661
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54615: LD_VAR 0 1
54619: PPUSH
54620: CALL_OW 437
54624: PUSH
54625: LD_INT 1
54627: ARRAY
54628: PUSH
54629: LD_INT 1
54631: ARRAY
54632: PUSH
54633: LD_STRING l
54635: EQUAL
54636: IFFALSE 54661
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54638: LD_ADDR_VAR 0 2
54642: PUSH
54643: LD_VAR 0 1
54647: PPUSH
54648: CALL_OW 437
54652: PUSH
54653: LD_INT 1
54655: ARRAY
54656: PUSH
54657: LD_INT 4
54659: ARRAY
54660: ST_TO_ADDR
// end ;
54661: LD_VAR 0 2
54665: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54666: LD_INT 0
54668: PPUSH
54669: PPUSH
54670: PPUSH
54671: PPUSH
// if not base_units then
54672: LD_VAR 0 1
54676: NOT
54677: IFFALSE 54681
// exit ;
54679: GO 54768
// result := false ;
54681: LD_ADDR_VAR 0 2
54685: PUSH
54686: LD_INT 0
54688: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54689: LD_ADDR_VAR 0 5
54693: PUSH
54694: LD_VAR 0 1
54698: PPUSH
54699: LD_INT 21
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PPUSH
54709: CALL_OW 72
54713: ST_TO_ADDR
// if not tmp then
54714: LD_VAR 0 5
54718: NOT
54719: IFFALSE 54723
// exit ;
54721: GO 54768
// for i in tmp do
54723: LD_ADDR_VAR 0 3
54727: PUSH
54728: LD_VAR 0 5
54732: PUSH
54733: FOR_IN
54734: IFFALSE 54766
// begin result := EnemyInRange ( i , 22 ) ;
54736: LD_ADDR_VAR 0 2
54740: PUSH
54741: LD_VAR 0 3
54745: PPUSH
54746: LD_INT 22
54748: PPUSH
54749: CALL 53004 0 2
54753: ST_TO_ADDR
// if result then
54754: LD_VAR 0 2
54758: IFFALSE 54764
// exit ;
54760: POP
54761: POP
54762: GO 54768
// end ;
54764: GO 54733
54766: POP
54767: POP
// end ;
54768: LD_VAR 0 2
54772: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54773: LD_INT 0
54775: PPUSH
54776: PPUSH
// if not units then
54777: LD_VAR 0 1
54781: NOT
54782: IFFALSE 54786
// exit ;
54784: GO 54856
// result := [ ] ;
54786: LD_ADDR_VAR 0 3
54790: PUSH
54791: EMPTY
54792: ST_TO_ADDR
// for i in units do
54793: LD_ADDR_VAR 0 4
54797: PUSH
54798: LD_VAR 0 1
54802: PUSH
54803: FOR_IN
54804: IFFALSE 54854
// if GetTag ( i ) = tag then
54806: LD_VAR 0 4
54810: PPUSH
54811: CALL_OW 110
54815: PUSH
54816: LD_VAR 0 2
54820: EQUAL
54821: IFFALSE 54852
// result := Insert ( result , result + 1 , i ) ;
54823: LD_ADDR_VAR 0 3
54827: PUSH
54828: LD_VAR 0 3
54832: PPUSH
54833: LD_VAR 0 3
54837: PUSH
54838: LD_INT 1
54840: PLUS
54841: PPUSH
54842: LD_VAR 0 4
54846: PPUSH
54847: CALL_OW 2
54851: ST_TO_ADDR
54852: GO 54803
54854: POP
54855: POP
// end ;
54856: LD_VAR 0 3
54860: RET
// export function IsDriver ( un ) ; begin
54861: LD_INT 0
54863: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54864: LD_ADDR_VAR 0 2
54868: PUSH
54869: LD_VAR 0 1
54873: PUSH
54874: LD_INT 55
54876: PUSH
54877: EMPTY
54878: LIST
54879: PPUSH
54880: CALL_OW 69
54884: IN
54885: ST_TO_ADDR
// end ;
54886: LD_VAR 0 2
54890: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54891: LD_INT 0
54893: PPUSH
54894: PPUSH
// list := [ ] ;
54895: LD_ADDR_VAR 0 5
54899: PUSH
54900: EMPTY
54901: ST_TO_ADDR
// case d of 0 :
54902: LD_VAR 0 3
54906: PUSH
54907: LD_INT 0
54909: DOUBLE
54910: EQUAL
54911: IFTRUE 54915
54913: GO 55048
54915: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54916: LD_ADDR_VAR 0 5
54920: PUSH
54921: LD_VAR 0 1
54925: PUSH
54926: LD_INT 4
54928: MINUS
54929: PUSH
54930: LD_VAR 0 2
54934: PUSH
54935: LD_INT 4
54937: MINUS
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: PUSH
54947: LD_VAR 0 1
54951: PUSH
54952: LD_INT 3
54954: MINUS
54955: PUSH
54956: LD_VAR 0 2
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: LIST
54968: PUSH
54969: LD_VAR 0 1
54973: PUSH
54974: LD_INT 4
54976: PLUS
54977: PUSH
54978: LD_VAR 0 2
54982: PUSH
54983: LD_INT 4
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: PUSH
54991: LD_VAR 0 1
54995: PUSH
54996: LD_INT 3
54998: PLUS
54999: PUSH
55000: LD_VAR 0 2
55004: PUSH
55005: LD_INT 3
55007: PLUS
55008: PUSH
55009: LD_INT 5
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: LIST
55016: PUSH
55017: LD_VAR 0 1
55021: PUSH
55022: LD_VAR 0 2
55026: PUSH
55027: LD_INT 4
55029: PLUS
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: ST_TO_ADDR
// end ; 1 :
55046: GO 55746
55048: LD_INT 1
55050: DOUBLE
55051: EQUAL
55052: IFTRUE 55056
55054: GO 55189
55056: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55057: LD_ADDR_VAR 0 5
55061: PUSH
55062: LD_VAR 0 1
55066: PUSH
55067: LD_VAR 0 2
55071: PUSH
55072: LD_INT 4
55074: MINUS
55075: PUSH
55076: LD_INT 3
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: PUSH
55084: LD_VAR 0 1
55088: PUSH
55089: LD_INT 3
55091: MINUS
55092: PUSH
55093: LD_VAR 0 2
55097: PUSH
55098: LD_INT 3
55100: MINUS
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: LIST
55109: PUSH
55110: LD_VAR 0 1
55114: PUSH
55115: LD_INT 4
55117: MINUS
55118: PUSH
55119: LD_VAR 0 2
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: PUSH
55132: LD_VAR 0 1
55136: PUSH
55137: LD_VAR 0 2
55141: PUSH
55142: LD_INT 3
55144: PLUS
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: LIST
55153: PUSH
55154: LD_VAR 0 1
55158: PUSH
55159: LD_INT 4
55161: PLUS
55162: PUSH
55163: LD_VAR 0 2
55167: PUSH
55168: LD_INT 4
55170: PLUS
55171: PUSH
55172: LD_INT 5
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: ST_TO_ADDR
// end ; 2 :
55187: GO 55746
55189: LD_INT 2
55191: DOUBLE
55192: EQUAL
55193: IFTRUE 55197
55195: GO 55326
55197: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55198: LD_ADDR_VAR 0 5
55202: PUSH
55203: LD_VAR 0 1
55207: PUSH
55208: LD_VAR 0 2
55212: PUSH
55213: LD_INT 3
55215: MINUS
55216: PUSH
55217: LD_INT 3
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: LIST
55224: PUSH
55225: LD_VAR 0 1
55229: PUSH
55230: LD_INT 4
55232: PLUS
55233: PUSH
55234: LD_VAR 0 2
55238: PUSH
55239: LD_INT 4
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: PUSH
55247: LD_VAR 0 1
55251: PUSH
55252: LD_VAR 0 2
55256: PUSH
55257: LD_INT 4
55259: PLUS
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: PUSH
55269: LD_VAR 0 1
55273: PUSH
55274: LD_INT 3
55276: MINUS
55277: PUSH
55278: LD_VAR 0 2
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: PUSH
55291: LD_VAR 0 1
55295: PUSH
55296: LD_INT 4
55298: MINUS
55299: PUSH
55300: LD_VAR 0 2
55304: PUSH
55305: LD_INT 4
55307: MINUS
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: ST_TO_ADDR
// end ; 3 :
55324: GO 55746
55326: LD_INT 3
55328: DOUBLE
55329: EQUAL
55330: IFTRUE 55334
55332: GO 55467
55334: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55335: LD_ADDR_VAR 0 5
55339: PUSH
55340: LD_VAR 0 1
55344: PUSH
55345: LD_INT 3
55347: PLUS
55348: PUSH
55349: LD_VAR 0 2
55353: PUSH
55354: LD_INT 4
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: PUSH
55362: LD_VAR 0 1
55366: PUSH
55367: LD_INT 4
55369: PLUS
55370: PUSH
55371: LD_VAR 0 2
55375: PUSH
55376: LD_INT 4
55378: PLUS
55379: PUSH
55380: LD_INT 5
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: LIST
55387: PUSH
55388: LD_VAR 0 1
55392: PUSH
55393: LD_INT 4
55395: MINUS
55396: PUSH
55397: LD_VAR 0 2
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: PUSH
55410: LD_VAR 0 1
55414: PUSH
55415: LD_VAR 0 2
55419: PUSH
55420: LD_INT 4
55422: MINUS
55423: PUSH
55424: LD_INT 3
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: LIST
55431: PUSH
55432: LD_VAR 0 1
55436: PUSH
55437: LD_INT 3
55439: MINUS
55440: PUSH
55441: LD_VAR 0 2
55445: PUSH
55446: LD_INT 3
55448: MINUS
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: ST_TO_ADDR
// end ; 4 :
55465: GO 55746
55467: LD_INT 4
55469: DOUBLE
55470: EQUAL
55471: IFTRUE 55475
55473: GO 55608
55475: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55476: LD_ADDR_VAR 0 5
55480: PUSH
55481: LD_VAR 0 1
55485: PUSH
55486: LD_VAR 0 2
55490: PUSH
55491: LD_INT 4
55493: PLUS
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: PUSH
55503: LD_VAR 0 1
55507: PUSH
55508: LD_INT 3
55510: PLUS
55511: PUSH
55512: LD_VAR 0 2
55516: PUSH
55517: LD_INT 3
55519: PLUS
55520: PUSH
55521: LD_INT 5
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: PUSH
55529: LD_VAR 0 1
55533: PUSH
55534: LD_INT 4
55536: PLUS
55537: PUSH
55538: LD_VAR 0 2
55542: PUSH
55543: LD_INT 4
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: LIST
55550: PUSH
55551: LD_VAR 0 1
55555: PUSH
55556: LD_VAR 0 2
55560: PUSH
55561: LD_INT 3
55563: MINUS
55564: PUSH
55565: LD_INT 3
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: LIST
55572: PUSH
55573: LD_VAR 0 1
55577: PUSH
55578: LD_INT 4
55580: MINUS
55581: PUSH
55582: LD_VAR 0 2
55586: PUSH
55587: LD_INT 4
55589: MINUS
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: ST_TO_ADDR
// end ; 5 :
55606: GO 55746
55608: LD_INT 5
55610: DOUBLE
55611: EQUAL
55612: IFTRUE 55616
55614: GO 55745
55616: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55617: LD_ADDR_VAR 0 5
55621: PUSH
55622: LD_VAR 0 1
55626: PUSH
55627: LD_INT 4
55629: MINUS
55630: PUSH
55631: LD_VAR 0 2
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: LIST
55643: PUSH
55644: LD_VAR 0 1
55648: PUSH
55649: LD_VAR 0 2
55653: PUSH
55654: LD_INT 4
55656: MINUS
55657: PUSH
55658: LD_INT 3
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: LIST
55665: PUSH
55666: LD_VAR 0 1
55670: PUSH
55671: LD_INT 4
55673: PLUS
55674: PUSH
55675: LD_VAR 0 2
55679: PUSH
55680: LD_INT 4
55682: PLUS
55683: PUSH
55684: LD_INT 5
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: PUSH
55692: LD_VAR 0 1
55696: PUSH
55697: LD_INT 3
55699: PLUS
55700: PUSH
55701: LD_VAR 0 2
55705: PUSH
55706: LD_INT 4
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: PUSH
55714: LD_VAR 0 1
55718: PUSH
55719: LD_VAR 0 2
55723: PUSH
55724: LD_INT 3
55726: PLUS
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: ST_TO_ADDR
// end ; end ;
55743: GO 55746
55745: POP
// result := list ;
55746: LD_ADDR_VAR 0 4
55750: PUSH
55751: LD_VAR 0 5
55755: ST_TO_ADDR
// end ;
55756: LD_VAR 0 4
55760: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55761: LD_INT 0
55763: PPUSH
55764: PPUSH
55765: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55766: LD_VAR 0 1
55770: NOT
55771: PUSH
55772: LD_VAR 0 2
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: LD_INT 4
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: IN
55795: NOT
55796: OR
55797: IFFALSE 55801
// exit ;
55799: GO 55893
// tmp := [ ] ;
55801: LD_ADDR_VAR 0 5
55805: PUSH
55806: EMPTY
55807: ST_TO_ADDR
// for i in units do
55808: LD_ADDR_VAR 0 4
55812: PUSH
55813: LD_VAR 0 1
55817: PUSH
55818: FOR_IN
55819: IFFALSE 55862
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55821: LD_ADDR_VAR 0 5
55825: PUSH
55826: LD_VAR 0 5
55830: PPUSH
55831: LD_VAR 0 5
55835: PUSH
55836: LD_INT 1
55838: PLUS
55839: PPUSH
55840: LD_VAR 0 4
55844: PPUSH
55845: LD_VAR 0 2
55849: PPUSH
55850: CALL_OW 259
55854: PPUSH
55855: CALL_OW 2
55859: ST_TO_ADDR
55860: GO 55818
55862: POP
55863: POP
// if not tmp then
55864: LD_VAR 0 5
55868: NOT
55869: IFFALSE 55873
// exit ;
55871: GO 55893
// result := SortListByListDesc ( units , tmp ) ;
55873: LD_ADDR_VAR 0 3
55877: PUSH
55878: LD_VAR 0 1
55882: PPUSH
55883: LD_VAR 0 5
55887: PPUSH
55888: CALL_OW 77
55892: ST_TO_ADDR
// end ;
55893: LD_VAR 0 3
55897: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55898: LD_INT 0
55900: PPUSH
55901: PPUSH
55902: PPUSH
// x := GetX ( building ) ;
55903: LD_ADDR_VAR 0 4
55907: PUSH
55908: LD_VAR 0 2
55912: PPUSH
55913: CALL_OW 250
55917: ST_TO_ADDR
// y := GetY ( building ) ;
55918: LD_ADDR_VAR 0 5
55922: PUSH
55923: LD_VAR 0 2
55927: PPUSH
55928: CALL_OW 251
55932: ST_TO_ADDR
// if GetTaskList ( unit ) then
55933: LD_VAR 0 1
55937: PPUSH
55938: CALL_OW 437
55942: IFFALSE 56037
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55944: LD_STRING e
55946: PUSH
55947: LD_VAR 0 1
55951: PPUSH
55952: CALL_OW 437
55956: PUSH
55957: LD_INT 1
55959: ARRAY
55960: PUSH
55961: LD_INT 1
55963: ARRAY
55964: EQUAL
55965: PUSH
55966: LD_VAR 0 4
55970: PUSH
55971: LD_VAR 0 1
55975: PPUSH
55976: CALL_OW 437
55980: PUSH
55981: LD_INT 1
55983: ARRAY
55984: PUSH
55985: LD_INT 2
55987: ARRAY
55988: EQUAL
55989: AND
55990: PUSH
55991: LD_VAR 0 5
55995: PUSH
55996: LD_VAR 0 1
56000: PPUSH
56001: CALL_OW 437
56005: PUSH
56006: LD_INT 1
56008: ARRAY
56009: PUSH
56010: LD_INT 3
56012: ARRAY
56013: EQUAL
56014: AND
56015: IFFALSE 56027
// result := true else
56017: LD_ADDR_VAR 0 3
56021: PUSH
56022: LD_INT 1
56024: ST_TO_ADDR
56025: GO 56035
// result := false ;
56027: LD_ADDR_VAR 0 3
56031: PUSH
56032: LD_INT 0
56034: ST_TO_ADDR
// end else
56035: GO 56045
// result := false ;
56037: LD_ADDR_VAR 0 3
56041: PUSH
56042: LD_INT 0
56044: ST_TO_ADDR
// end ;
56045: LD_VAR 0 3
56049: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56050: LD_INT 0
56052: PPUSH
56053: PPUSH
56054: PPUSH
56055: PPUSH
// if not unit or not area then
56056: LD_VAR 0 1
56060: NOT
56061: PUSH
56062: LD_VAR 0 2
56066: NOT
56067: OR
56068: IFFALSE 56072
// exit ;
56070: GO 56236
// tmp := AreaToList ( area , i ) ;
56072: LD_ADDR_VAR 0 6
56076: PUSH
56077: LD_VAR 0 2
56081: PPUSH
56082: LD_VAR 0 5
56086: PPUSH
56087: CALL_OW 517
56091: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56092: LD_ADDR_VAR 0 5
56096: PUSH
56097: DOUBLE
56098: LD_INT 1
56100: DEC
56101: ST_TO_ADDR
56102: LD_VAR 0 6
56106: PUSH
56107: LD_INT 1
56109: ARRAY
56110: PUSH
56111: FOR_TO
56112: IFFALSE 56234
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56114: LD_ADDR_VAR 0 7
56118: PUSH
56119: LD_VAR 0 6
56123: PUSH
56124: LD_INT 1
56126: ARRAY
56127: PUSH
56128: LD_VAR 0 5
56132: ARRAY
56133: PUSH
56134: LD_VAR 0 6
56138: PUSH
56139: LD_INT 2
56141: ARRAY
56142: PUSH
56143: LD_VAR 0 5
56147: ARRAY
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56153: LD_VAR 0 7
56157: PUSH
56158: LD_INT 1
56160: ARRAY
56161: PPUSH
56162: LD_VAR 0 7
56166: PUSH
56167: LD_INT 2
56169: ARRAY
56170: PPUSH
56171: CALL_OW 428
56175: PUSH
56176: LD_INT 0
56178: EQUAL
56179: IFFALSE 56232
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56181: LD_VAR 0 1
56185: PPUSH
56186: LD_VAR 0 7
56190: PUSH
56191: LD_INT 1
56193: ARRAY
56194: PPUSH
56195: LD_VAR 0 7
56199: PUSH
56200: LD_INT 2
56202: ARRAY
56203: PPUSH
56204: LD_VAR 0 3
56208: PPUSH
56209: CALL_OW 48
// result := IsPlaced ( unit ) ;
56213: LD_ADDR_VAR 0 4
56217: PUSH
56218: LD_VAR 0 1
56222: PPUSH
56223: CALL_OW 305
56227: ST_TO_ADDR
// exit ;
56228: POP
56229: POP
56230: GO 56236
// end ; end ;
56232: GO 56111
56234: POP
56235: POP
// end ;
56236: LD_VAR 0 4
56240: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56241: LD_INT 0
56243: PPUSH
56244: PPUSH
56245: PPUSH
// if not side or side > 8 then
56246: LD_VAR 0 1
56250: NOT
56251: PUSH
56252: LD_VAR 0 1
56256: PUSH
56257: LD_INT 8
56259: GREATER
56260: OR
56261: IFFALSE 56265
// exit ;
56263: GO 56452
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56265: LD_ADDR_VAR 0 4
56269: PUSH
56270: LD_INT 22
56272: PUSH
56273: LD_VAR 0 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 21
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PPUSH
56296: CALL_OW 69
56300: ST_TO_ADDR
// if not tmp then
56301: LD_VAR 0 4
56305: NOT
56306: IFFALSE 56310
// exit ;
56308: GO 56452
// enable_addtolog := true ;
56310: LD_ADDR_OWVAR 81
56314: PUSH
56315: LD_INT 1
56317: ST_TO_ADDR
// AddToLog ( [ ) ;
56318: LD_STRING [
56320: PPUSH
56321: CALL_OW 561
// for i in tmp do
56325: LD_ADDR_VAR 0 3
56329: PUSH
56330: LD_VAR 0 4
56334: PUSH
56335: FOR_IN
56336: IFFALSE 56443
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56338: LD_STRING [
56340: PUSH
56341: LD_VAR 0 3
56345: PPUSH
56346: CALL_OW 266
56350: STR
56351: PUSH
56352: LD_STRING , 
56354: STR
56355: PUSH
56356: LD_VAR 0 3
56360: PPUSH
56361: CALL_OW 250
56365: STR
56366: PUSH
56367: LD_STRING , 
56369: STR
56370: PUSH
56371: LD_VAR 0 3
56375: PPUSH
56376: CALL_OW 251
56380: STR
56381: PUSH
56382: LD_STRING , 
56384: STR
56385: PUSH
56386: LD_VAR 0 3
56390: PPUSH
56391: CALL_OW 254
56395: STR
56396: PUSH
56397: LD_STRING , 
56399: STR
56400: PUSH
56401: LD_VAR 0 3
56405: PPUSH
56406: LD_INT 1
56408: PPUSH
56409: CALL_OW 268
56413: STR
56414: PUSH
56415: LD_STRING , 
56417: STR
56418: PUSH
56419: LD_VAR 0 3
56423: PPUSH
56424: LD_INT 2
56426: PPUSH
56427: CALL_OW 268
56431: STR
56432: PUSH
56433: LD_STRING ],
56435: STR
56436: PPUSH
56437: CALL_OW 561
// end ;
56441: GO 56335
56443: POP
56444: POP
// AddToLog ( ]; ) ;
56445: LD_STRING ];
56447: PPUSH
56448: CALL_OW 561
// end ;
56452: LD_VAR 0 2
56456: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56457: LD_INT 0
56459: PPUSH
56460: PPUSH
56461: PPUSH
56462: PPUSH
56463: PPUSH
// if not area or not rate or not max then
56464: LD_VAR 0 1
56468: NOT
56469: PUSH
56470: LD_VAR 0 2
56474: NOT
56475: OR
56476: PUSH
56477: LD_VAR 0 4
56481: NOT
56482: OR
56483: IFFALSE 56487
// exit ;
56485: GO 56679
// while 1 do
56487: LD_INT 1
56489: IFFALSE 56679
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56491: LD_ADDR_VAR 0 9
56495: PUSH
56496: LD_VAR 0 1
56500: PPUSH
56501: LD_INT 1
56503: PPUSH
56504: CALL_OW 287
56508: PUSH
56509: LD_INT 10
56511: MUL
56512: ST_TO_ADDR
// r := rate / 10 ;
56513: LD_ADDR_VAR 0 7
56517: PUSH
56518: LD_VAR 0 2
56522: PUSH
56523: LD_INT 10
56525: DIVREAL
56526: ST_TO_ADDR
// time := 1 1$00 ;
56527: LD_ADDR_VAR 0 8
56531: PUSH
56532: LD_INT 2100
56534: ST_TO_ADDR
// if amount < min then
56535: LD_VAR 0 9
56539: PUSH
56540: LD_VAR 0 3
56544: LESS
56545: IFFALSE 56563
// r := r * 2 else
56547: LD_ADDR_VAR 0 7
56551: PUSH
56552: LD_VAR 0 7
56556: PUSH
56557: LD_INT 2
56559: MUL
56560: ST_TO_ADDR
56561: GO 56589
// if amount > max then
56563: LD_VAR 0 9
56567: PUSH
56568: LD_VAR 0 4
56572: GREATER
56573: IFFALSE 56589
// r := r / 2 ;
56575: LD_ADDR_VAR 0 7
56579: PUSH
56580: LD_VAR 0 7
56584: PUSH
56585: LD_INT 2
56587: DIVREAL
56588: ST_TO_ADDR
// time := time / r ;
56589: LD_ADDR_VAR 0 8
56593: PUSH
56594: LD_VAR 0 8
56598: PUSH
56599: LD_VAR 0 7
56603: DIVREAL
56604: ST_TO_ADDR
// if time < 0 then
56605: LD_VAR 0 8
56609: PUSH
56610: LD_INT 0
56612: LESS
56613: IFFALSE 56630
// time := time * - 1 ;
56615: LD_ADDR_VAR 0 8
56619: PUSH
56620: LD_VAR 0 8
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: MUL
56629: ST_TO_ADDR
// wait ( time ) ;
56630: LD_VAR 0 8
56634: PPUSH
56635: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56639: LD_INT 35
56641: PPUSH
56642: LD_INT 875
56644: PPUSH
56645: CALL_OW 12
56649: PPUSH
56650: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56654: LD_INT 1
56656: PPUSH
56657: LD_INT 5
56659: PPUSH
56660: CALL_OW 12
56664: PPUSH
56665: LD_VAR 0 1
56669: PPUSH
56670: LD_INT 1
56672: PPUSH
56673: CALL_OW 55
// end ;
56677: GO 56487
// end ;
56679: LD_VAR 0 5
56683: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56684: LD_INT 0
56686: PPUSH
56687: PPUSH
56688: PPUSH
56689: PPUSH
56690: PPUSH
56691: PPUSH
56692: PPUSH
56693: PPUSH
// if not turrets or not factories then
56694: LD_VAR 0 1
56698: NOT
56699: PUSH
56700: LD_VAR 0 2
56704: NOT
56705: OR
56706: IFFALSE 56710
// exit ;
56708: GO 57017
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56710: LD_ADDR_VAR 0 10
56714: PUSH
56715: LD_INT 5
56717: PUSH
56718: LD_INT 6
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 2
56727: PUSH
56728: LD_INT 4
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: LD_INT 5
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 24
56752: PUSH
56753: LD_INT 25
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 23
56762: PUSH
56763: LD_INT 27
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 42
56776: PUSH
56777: LD_INT 43
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 44
56786: PUSH
56787: LD_INT 46
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 45
56796: PUSH
56797: LD_INT 47
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: ST_TO_ADDR
// result := [ ] ;
56814: LD_ADDR_VAR 0 3
56818: PUSH
56819: EMPTY
56820: ST_TO_ADDR
// for i in turrets do
56821: LD_ADDR_VAR 0 4
56825: PUSH
56826: LD_VAR 0 1
56830: PUSH
56831: FOR_IN
56832: IFFALSE 57015
// begin nat := GetNation ( i ) ;
56834: LD_ADDR_VAR 0 7
56838: PUSH
56839: LD_VAR 0 4
56843: PPUSH
56844: CALL_OW 248
56848: ST_TO_ADDR
// weapon := 0 ;
56849: LD_ADDR_VAR 0 8
56853: PUSH
56854: LD_INT 0
56856: ST_TO_ADDR
// if not nat then
56857: LD_VAR 0 7
56861: NOT
56862: IFFALSE 56866
// continue ;
56864: GO 56831
// for j in list [ nat ] do
56866: LD_ADDR_VAR 0 5
56870: PUSH
56871: LD_VAR 0 10
56875: PUSH
56876: LD_VAR 0 7
56880: ARRAY
56881: PUSH
56882: FOR_IN
56883: IFFALSE 56924
// if GetBWeapon ( i ) = j [ 1 ] then
56885: LD_VAR 0 4
56889: PPUSH
56890: CALL_OW 269
56894: PUSH
56895: LD_VAR 0 5
56899: PUSH
56900: LD_INT 1
56902: ARRAY
56903: EQUAL
56904: IFFALSE 56922
// begin weapon := j [ 2 ] ;
56906: LD_ADDR_VAR 0 8
56910: PUSH
56911: LD_VAR 0 5
56915: PUSH
56916: LD_INT 2
56918: ARRAY
56919: ST_TO_ADDR
// break ;
56920: GO 56924
// end ;
56922: GO 56882
56924: POP
56925: POP
// if not weapon then
56926: LD_VAR 0 8
56930: NOT
56931: IFFALSE 56935
// continue ;
56933: GO 56831
// for k in factories do
56935: LD_ADDR_VAR 0 6
56939: PUSH
56940: LD_VAR 0 2
56944: PUSH
56945: FOR_IN
56946: IFFALSE 57011
// begin weapons := AvailableWeaponList ( k ) ;
56948: LD_ADDR_VAR 0 9
56952: PUSH
56953: LD_VAR 0 6
56957: PPUSH
56958: CALL_OW 478
56962: ST_TO_ADDR
// if not weapons then
56963: LD_VAR 0 9
56967: NOT
56968: IFFALSE 56972
// continue ;
56970: GO 56945
// if weapon in weapons then
56972: LD_VAR 0 8
56976: PUSH
56977: LD_VAR 0 9
56981: IN
56982: IFFALSE 57009
// begin result := [ i , weapon ] ;
56984: LD_ADDR_VAR 0 3
56988: PUSH
56989: LD_VAR 0 4
56993: PUSH
56994: LD_VAR 0 8
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: ST_TO_ADDR
// exit ;
57003: POP
57004: POP
57005: POP
57006: POP
57007: GO 57017
// end ; end ;
57009: GO 56945
57011: POP
57012: POP
// end ;
57013: GO 56831
57015: POP
57016: POP
// end ;
57017: LD_VAR 0 3
57021: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57022: LD_INT 0
57024: PPUSH
// if not side or side > 8 then
57025: LD_VAR 0 3
57029: NOT
57030: PUSH
57031: LD_VAR 0 3
57035: PUSH
57036: LD_INT 8
57038: GREATER
57039: OR
57040: IFFALSE 57044
// exit ;
57042: GO 57103
// if not range then
57044: LD_VAR 0 4
57048: NOT
57049: IFFALSE 57060
// range := - 12 ;
57051: LD_ADDR_VAR 0 4
57055: PUSH
57056: LD_INT 12
57058: NEG
57059: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57060: LD_VAR 0 1
57064: PPUSH
57065: LD_VAR 0 2
57069: PPUSH
57070: LD_VAR 0 3
57074: PPUSH
57075: LD_VAR 0 4
57079: PPUSH
57080: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57084: LD_VAR 0 1
57088: PPUSH
57089: LD_VAR 0 2
57093: PPUSH
57094: LD_VAR 0 3
57098: PPUSH
57099: CALL_OW 331
// end ;
57103: LD_VAR 0 5
57107: RET
// export function Video ( mode ) ; begin
57108: LD_INT 0
57110: PPUSH
// ingame_video = mode ;
57111: LD_ADDR_OWVAR 52
57115: PUSH
57116: LD_VAR 0 1
57120: ST_TO_ADDR
// interface_hidden = mode ;
57121: LD_ADDR_OWVAR 54
57125: PUSH
57126: LD_VAR 0 1
57130: ST_TO_ADDR
// end ;
57131: LD_VAR 0 2
57135: RET
// export function Join ( array , element ) ; begin
57136: LD_INT 0
57138: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57139: LD_ADDR_VAR 0 3
57143: PUSH
57144: LD_VAR 0 1
57148: PPUSH
57149: LD_VAR 0 1
57153: PUSH
57154: LD_INT 1
57156: PLUS
57157: PPUSH
57158: LD_VAR 0 2
57162: PPUSH
57163: CALL_OW 1
57167: ST_TO_ADDR
// end ;
57168: LD_VAR 0 3
57172: RET
// export function JoinUnion ( array , element ) ; begin
57173: LD_INT 0
57175: PPUSH
// result := array union element ;
57176: LD_ADDR_VAR 0 3
57180: PUSH
57181: LD_VAR 0 1
57185: PUSH
57186: LD_VAR 0 2
57190: UNION
57191: ST_TO_ADDR
// end ;
57192: LD_VAR 0 3
57196: RET
// export function GetBehemoths ( side ) ; begin
57197: LD_INT 0
57199: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57200: LD_ADDR_VAR 0 2
57204: PUSH
57205: LD_INT 22
57207: PUSH
57208: LD_VAR 0 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 31
57219: PUSH
57220: LD_INT 25
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PPUSH
57231: CALL_OW 69
57235: ST_TO_ADDR
// end ;
57236: LD_VAR 0 2
57240: RET
// export function Shuffle ( array ) ; var i , index ; begin
57241: LD_INT 0
57243: PPUSH
57244: PPUSH
57245: PPUSH
// result := [ ] ;
57246: LD_ADDR_VAR 0 2
57250: PUSH
57251: EMPTY
57252: ST_TO_ADDR
// if not array then
57253: LD_VAR 0 1
57257: NOT
57258: IFFALSE 57262
// exit ;
57260: GO 57361
// Randomize ;
57262: CALL_OW 10
// for i = array downto 1 do
57266: LD_ADDR_VAR 0 3
57270: PUSH
57271: DOUBLE
57272: LD_VAR 0 1
57276: INC
57277: ST_TO_ADDR
57278: LD_INT 1
57280: PUSH
57281: FOR_DOWNTO
57282: IFFALSE 57359
// begin index := rand ( 1 , array ) ;
57284: LD_ADDR_VAR 0 4
57288: PUSH
57289: LD_INT 1
57291: PPUSH
57292: LD_VAR 0 1
57296: PPUSH
57297: CALL_OW 12
57301: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57302: LD_ADDR_VAR 0 2
57306: PUSH
57307: LD_VAR 0 2
57311: PPUSH
57312: LD_VAR 0 2
57316: PUSH
57317: LD_INT 1
57319: PLUS
57320: PPUSH
57321: LD_VAR 0 1
57325: PUSH
57326: LD_VAR 0 4
57330: ARRAY
57331: PPUSH
57332: CALL_OW 2
57336: ST_TO_ADDR
// array := Delete ( array , index ) ;
57337: LD_ADDR_VAR 0 1
57341: PUSH
57342: LD_VAR 0 1
57346: PPUSH
57347: LD_VAR 0 4
57351: PPUSH
57352: CALL_OW 3
57356: ST_TO_ADDR
// end ;
57357: GO 57281
57359: POP
57360: POP
// end ;
57361: LD_VAR 0 2
57365: RET
// export function GetBaseMaterials ( base ) ; begin
57366: LD_INT 0
57368: PPUSH
// result := [ 0 , 0 , 0 ] ;
57369: LD_ADDR_VAR 0 2
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: ST_TO_ADDR
// if not base then
57388: LD_VAR 0 1
57392: NOT
57393: IFFALSE 57397
// exit ;
57395: GO 57446
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57397: LD_ADDR_VAR 0 2
57401: PUSH
57402: LD_VAR 0 1
57406: PPUSH
57407: LD_INT 1
57409: PPUSH
57410: CALL_OW 275
57414: PUSH
57415: LD_VAR 0 1
57419: PPUSH
57420: LD_INT 2
57422: PPUSH
57423: CALL_OW 275
57427: PUSH
57428: LD_VAR 0 1
57432: PPUSH
57433: LD_INT 3
57435: PPUSH
57436: CALL_OW 275
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: ST_TO_ADDR
// end ;
57446: LD_VAR 0 2
57450: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57451: LD_INT 0
57453: PPUSH
57454: PPUSH
// result := array ;
57455: LD_ADDR_VAR 0 3
57459: PUSH
57460: LD_VAR 0 1
57464: ST_TO_ADDR
// if size > 0 then
57465: LD_VAR 0 2
57469: PUSH
57470: LD_INT 0
57472: GREATER
57473: IFFALSE 57519
// for i := array downto size do
57475: LD_ADDR_VAR 0 4
57479: PUSH
57480: DOUBLE
57481: LD_VAR 0 1
57485: INC
57486: ST_TO_ADDR
57487: LD_VAR 0 2
57491: PUSH
57492: FOR_DOWNTO
57493: IFFALSE 57517
// result := Delete ( result , result ) ;
57495: LD_ADDR_VAR 0 3
57499: PUSH
57500: LD_VAR 0 3
57504: PPUSH
57505: LD_VAR 0 3
57509: PPUSH
57510: CALL_OW 3
57514: ST_TO_ADDR
57515: GO 57492
57517: POP
57518: POP
// end ;
57519: LD_VAR 0 3
57523: RET
// export function ComExit ( unit ) ; var tmp ; begin
57524: LD_INT 0
57526: PPUSH
57527: PPUSH
// if not IsInUnit ( unit ) then
57528: LD_VAR 0 1
57532: PPUSH
57533: CALL_OW 310
57537: NOT
57538: IFFALSE 57542
// exit ;
57540: GO 57602
// tmp := IsInUnit ( unit ) ;
57542: LD_ADDR_VAR 0 3
57546: PUSH
57547: LD_VAR 0 1
57551: PPUSH
57552: CALL_OW 310
57556: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57557: LD_VAR 0 3
57561: PPUSH
57562: CALL_OW 247
57566: PUSH
57567: LD_INT 2
57569: EQUAL
57570: IFFALSE 57583
// ComExitVehicle ( unit ) else
57572: LD_VAR 0 1
57576: PPUSH
57577: CALL_OW 121
57581: GO 57592
// ComExitBuilding ( unit ) ;
57583: LD_VAR 0 1
57587: PPUSH
57588: CALL_OW 122
// result := tmp ;
57592: LD_ADDR_VAR 0 2
57596: PUSH
57597: LD_VAR 0 3
57601: ST_TO_ADDR
// end ;
57602: LD_VAR 0 2
57606: RET
// export function ResetHc ; begin
57607: LD_INT 0
57609: PPUSH
// InitHc ;
57610: CALL_OW 19
// hc_importance := 0 ;
57614: LD_ADDR_OWVAR 32
57618: PUSH
57619: LD_INT 0
57621: ST_TO_ADDR
// end ;
57622: LD_VAR 0 1
57626: RET
