// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 230 0 0
// PrepareAllies ;
  12: CALL 2221 0 0
// Action ;
  16: CALL 4045 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 182 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 10
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 11
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 13
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 15
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_res_art := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// player_artifact_ready := false ;
 128: LD_ADDR_EXP 16
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 9
 140: PUSH
 141: LD_INT 52500
 143: PUSH
 144: LD_INT 67200
 146: PUSH
 147: LD_INT 84000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// bonus_num := 0 ;
 161: LD_ADDR_EXP 14
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// artifact_progress := 0 ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// end ;
 177: LD_VAR 0 1
 181: RET
// export function SetDiplomacy ; begin
 182: LD_INT 0
 184: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 185: LD_INT 92
 187: PPUSH
 188: LD_INT 48
 190: PPUSH
 191: LD_INT 8
 193: PPUSH
 194: LD_INT 32796
 196: NEG
 197: PPUSH
 198: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 202: LD_INT 92
 204: PPUSH
 205: LD_INT 48
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 215: LD_INT 5
 217: PPUSH
 218: LD_INT 8
 220: PPUSH
 221: CALL_OW 343
// end ; end_of_file
 225: LD_VAR 0 1
 229: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
// uc_side := 2 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 2
 257: ST_TO_ADDR
// uc_nation := nation_arabian ;
 258: LD_ADDR_OWVAR 21
 262: PUSH
 263: LD_INT 2
 265: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 6
 274: PPUSH
 275: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 279: LD_ADDR_OWVAR 26
 283: PUSH
 284: LD_STRING Nicolas Vervecken
 286: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING SecondCharsGal
 294: ST_TO_ADDR
// hc_face_number := 3 ;
 295: LD_ADDR_OWVAR 34
 299: PUSH
 300: LD_INT 3
 302: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 303: LD_ADDR_OWVAR 29
 307: PUSH
 308: LD_INT 11
 310: PUSH
 311: LD_INT 10
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// Vervecken := CreateHuman ;
 318: LD_ADDR_EXP 12
 322: PUSH
 323: CALL_OW 44
 327: ST_TO_ADDR
// InitHc ;
 328: CALL_OW 19
// uc_side := 8 ;
 332: LD_ADDR_OWVAR 20
 336: PUSH
 337: LD_INT 8
 339: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 340: LD_INT 23
 342: PPUSH
 343: CALL_OW 274
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 4000
 353: PUSH
 354: LD_INT 2500
 356: PUSH
 357: LD_INT 1250
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_OWVAR 67
 369: ARRAY
 370: PPUSH
 371: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 375: LD_INT 23
 377: PPUSH
 378: CALL_OW 274
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: LD_INT 300
 388: PPUSH
 389: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 393: LD_INT 23
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 3
 403: PPUSH
 404: LD_INT 100
 406: PUSH
 407: LD_INT 50
 409: PUSH
 410: LD_INT 30
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: PPUSH
 424: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 428: LD_ADDR_VAR 0 14
 432: PUSH
 433: LD_INT 23
 435: PPUSH
 436: CALL_OW 250
 440: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 441: LD_ADDR_VAR 0 15
 445: PUSH
 446: LD_INT 23
 448: PPUSH
 449: CALL_OW 251
 453: ST_TO_ADDR
// team := [ ] ;
 454: LD_ADDR_VAR 0 7
 458: PUSH
 459: EMPTY
 460: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 461: LD_ADDR_VAR 0 8
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: PUSH
 480: LD_OWVAR 67
 484: ARRAY
 485: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 486: LD_ADDR_VAR 0 9
 490: PUSH
 491: LD_INT 11
 493: PUSH
 494: LD_INT 9
 496: PUSH
 497: LD_INT 8
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 511: LD_ADDR_VAR 0 10
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_OWVAR 67
 534: ARRAY
 535: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 536: LD_ADDR_VAR 0 11
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 561: LD_ADDR_VAR 0 12
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 13
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 4
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 611: LD_ADDR_VAR 0 18
 615: PUSH
 616: LD_INT 13
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: LD_INT 26
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 14
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 25
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 14
 654: PUSH
 655: LD_INT 3
 657: PUSH
 658: LD_INT 5
 660: PUSH
 661: LD_INT 32
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 14
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: LD_INT 31
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_INT 14
 690: PUSH
 691: LD_INT 3
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 24
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 14
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: LD_INT 25
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: PUSH
 724: LD_INT 13
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 24
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_VAR 0 18
 765: PUSH
 766: LD_OWVAR 67
 770: MINUS
 771: PUSH
 772: LD_INT 1
 774: PLUS
 775: PUSH
 776: FOR_TO
 777: IFFALSE 906
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 779: LD_ADDR_OWVAR 37
 783: PUSH
 784: LD_VAR 0 18
 788: PUSH
 789: LD_VAR 0 2
 793: ARRAY
 794: PUSH
 795: LD_INT 1
 797: ARRAY
 798: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 799: LD_ADDR_OWVAR 39
 803: PUSH
 804: LD_VAR 0 18
 808: PUSH
 809: LD_VAR 0 2
 813: ARRAY
 814: PUSH
 815: LD_INT 2
 817: ARRAY
 818: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 819: LD_ADDR_OWVAR 38
 823: PUSH
 824: LD_VAR 0 18
 828: PUSH
 829: LD_VAR 0 2
 833: ARRAY
 834: PUSH
 835: LD_INT 3
 837: ARRAY
 838: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 839: LD_ADDR_OWVAR 40
 843: PUSH
 844: LD_VAR 0 18
 848: PUSH
 849: LD_VAR 0 2
 853: ARRAY
 854: PUSH
 855: LD_INT 4
 857: ARRAY
 858: ST_TO_ADDR
// un := CreateVehicle ;
 859: LD_ADDR_VAR 0 6
 863: PUSH
 864: CALL_OW 45
 868: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 869: LD_VAR 0 6
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: LD_INT 5
 879: PPUSH
 880: CALL_OW 12
 884: PPUSH
 885: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 889: LD_VAR 0 6
 893: PPUSH
 894: LD_INT 7
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 49
// end ;
 904: GO 776
 906: POP
 907: POP
// for i = 1 to ape_num do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_VAR 0 13
 922: PUSH
 923: FOR_TO
 924: IFFALSE 991
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 926: LD_INT 0
 928: PPUSH
 929: LD_INT 16
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: CALL_OW 12
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 960: LD_ADDR_VAR 0 7
 964: PUSH
 965: LD_VAR 0 7
 969: PPUSH
 970: LD_VAR 0 7
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: CALL_OW 44
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: GO 923
 991: POP
 992: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 993: LD_INT 1
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: LD_VAR 0 8
1003: PPUSH
1004: CALL_OW 380
// l1 := CreateHuman ;
1008: LD_ADDR_EXP 2
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_INT 23
1025: PPUSH
1026: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1030: LD_INT 1
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_VAR 0 8
1040: PPUSH
1041: CALL_OW 380
// l2 := CreateHuman ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: CALL_OW 44
1054: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 23
1062: PPUSH
1063: CALL_OW 52
// for class = 1 to 4 do
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 4
1079: PUSH
1080: FOR_TO
1081: IFFALSE 1180
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_VAR 0 9
1097: PUSH
1098: LD_VAR 0 10
1102: PUSH
1103: LD_VAR 0 11
1107: PUSH
1108: LD_VAR 0 12
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1176
// begin PrepareHuman ( false , class , skill ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_VAR 0 4
1135: PPUSH
1136: LD_VAR 0 8
1140: PPUSH
1141: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1145: LD_ADDR_VAR 0 7
1149: PUSH
1150: LD_VAR 0 7
1154: PPUSH
1155: LD_VAR 0 7
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: CALL_OW 44
1168: PPUSH
1169: CALL_OW 2
1173: ST_TO_ADDR
// end ;
1174: GO 1125
1176: POP
1177: POP
1178: GO 1080
1180: POP
1181: POP
// for i in team do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_VAR 0 7
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1669
// begin b := 0 ;
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 0
1202: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1203: LD_VAR 0 2
1207: PPUSH
1208: CALL_OW 257
1212: PUSH
1213: LD_INT 1
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1328
1221: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1222: LD_ADDR_VAR 0 5
1226: PUSH
1227: LD_INT 22
1229: PUSH
1230: LD_OWVAR 20
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 30
1254: PUSH
1255: LD_INT 31
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 58
1269: PUSH
1270: EMPTY
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 69
1282: ST_TO_ADDR
// if not b then
1283: LD_VAR 0 5
1287: NOT
1288: IFFALSE 1326
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1290: LD_ADDR_VAR 0 5
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_OWVAR 20
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 5
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL_OW 69
1325: ST_TO_ADDR
// end ; class_engineer :
1326: GO 1567
1328: LD_INT 2
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1375
1336: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1337: LD_ADDR_VAR 0 5
1341: PUSH
1342: LD_INT 22
1344: PUSH
1345: LD_OWVAR 20
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: LD_INT 30
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 69
1372: ST_TO_ADDR
1373: GO 1567
1375: LD_INT 3
1377: DOUBLE
1378: EQUAL
1379: IFTRUE 1383
1381: GO 1472
1383: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 5
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_OWVAR 20
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 21
1403: PUSH
1404: LD_INT 2
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 58
1413: PUSH
1414: EMPTY
1415: LIST
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 69
1426: ST_TO_ADDR
// if not b then
1427: LD_VAR 0 5
1431: NOT
1432: IFFALSE 1470
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1434: LD_ADDR_VAR 0 5
1438: PUSH
1439: LD_INT 22
1441: PUSH
1442: LD_OWVAR 20
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 30
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PPUSH
1465: CALL_OW 69
1469: ST_TO_ADDR
// end ; class_scientistic :
1470: GO 1567
1472: LD_INT 4
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1519
1480: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1481: LD_ADDR_VAR 0 5
1485: PUSH
1486: LD_INT 22
1488: PUSH
1489: LD_OWVAR 20
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 30
1500: PUSH
1501: LD_INT 8
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: ST_TO_ADDR
// end ; class_apeman_soldier :
1517: GO 1567
1519: LD_INT 15
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1566
1527: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1528: LD_ADDR_VAR 0 5
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_OWVAR 20
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 30
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PPUSH
1559: CALL_OW 69
1563: ST_TO_ADDR
1564: GO 1567
1566: POP
// if b then
1567: LD_VAR 0 5
1571: IFFALSE 1642
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1573: LD_VAR 0 5
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: CALL_OW 266
1586: PUSH
1587: LD_INT 31
1589: EQUAL
1590: IFFALSE 1612
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: PPUSH
1606: CALL 4808 0 2
1610: GO 1640
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_INT 1
1624: PPUSH
1625: LD_VAR 0 5
1629: PPUSH
1630: CALL_OW 12
1634: ARRAY
1635: PPUSH
1636: CALL_OW 52
1640: GO 1667
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 14
1651: PPUSH
1652: LD_VAR 0 15
1656: PPUSH
1657: LD_INT 15
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 50
// end ;
1667: GO 1192
1669: POP
1670: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1671: LD_ADDR_VAR 0 16
1675: PUSH
1676: LD_INT 26
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_OWVAR 67
1697: ARRAY
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 5
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_OWVAR 67
1724: ARRAY
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 24
1732: PUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 5
1738: PUSH
1739: LD_INT 4
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_OWVAR 67
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 30
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: LD_INT 1
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_OWVAR 67
1778: ARRAY
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_INT 22
1797: PUSH
1798: LD_OWVAR 20
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 32
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: PUSH
1826: FOR_IN
1827: IFFALSE 2000
// begin if weapons then
1829: LD_VAR 0 16
1833: IFFALSE 1957
// begin k := rand ( 1 , weapons ) ;
1835: LD_ADDR_VAR 0 3
1839: PUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_VAR 0 16
1847: PPUSH
1848: CALL_OW 12
1852: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1853: LD_ADDR_VAR 0 17
1857: PUSH
1858: LD_VAR 0 16
1862: PUSH
1863: LD_VAR 0 3
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1873: LD_ADDR_VAR 0 16
1877: PUSH
1878: LD_VAR 0 16
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: LD_INT 2
1890: PPUSH
1891: LD_VAR 0 16
1895: PUSH
1896: LD_VAR 0 3
1900: ARRAY
1901: PUSH
1902: LD_INT 2
1904: ARRAY
1905: PUSH
1906: LD_INT 1
1908: MINUS
1909: PPUSH
1910: CALL 4900 0 4
1914: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1915: LD_VAR 0 16
1919: PUSH
1920: LD_VAR 0 3
1924: ARRAY
1925: PUSH
1926: LD_INT 2
1928: ARRAY
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: IFFALSE 1955
// weapons := Delete ( weapons , k ) ;
1935: LD_ADDR_VAR 0 16
1939: PUSH
1940: LD_VAR 0 16
1944: PPUSH
1945: LD_VAR 0 3
1949: PPUSH
1950: CALL_OW 3
1954: ST_TO_ADDR
// end else
1955: GO 1984
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1957: LD_ADDR_VAR 0 17
1961: PUSH
1962: LD_INT 27
1964: PUSH
1965: LD_INT 23
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: CALL_OW 12
1982: ARRAY
1983: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_VAR 0 17
1993: PPUSH
1994: CALL_OW 431
// end ;
1998: GO 1826
2000: POP
2001: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2002: LD_INT 1
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_VAR 0 8
2012: PUSH
2013: LD_INT 1
2015: PLUS
2016: PPUSH
2017: CALL_OW 380
// hc_gallery := potter ;
2021: LD_ADDR_OWVAR 33
2025: PUSH
2026: LD_STRING potter
2028: ST_TO_ADDR
// hc_face_number := 1 ;
2029: LD_ADDR_OWVAR 34
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// hc_importance := 100 ;
2037: LD_ADDR_OWVAR 32
2041: PUSH
2042: LD_INT 100
2044: ST_TO_ADDR
// hc_name := Mike Gerste ;
2045: LD_ADDR_OWVAR 26
2049: PUSH
2050: LD_STRING Mike Gerste
2052: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 10
2060: PUSH
2061: LD_INT 11
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: ST_TO_ADDR
// legion_commander := CreateHuman ;
2068: LD_ADDR_EXP 1
2072: PUSH
2073: CALL_OW 44
2077: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2078: LD_EXP 1
2082: PPUSH
2083: LD_INT 23
2085: PPUSH
2086: CALL_OW 52
// uc_side := 5 ;
2090: LD_ADDR_OWVAR 20
2094: PUSH
2095: LD_INT 5
2097: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 8
2108: PPUSH
2109: CALL_OW 380
// hc_gallery := potter ;
2113: LD_ADDR_OWVAR 33
2117: PUSH
2118: LD_STRING potter
2120: ST_TO_ADDR
// hc_face_number := 2 ;
2121: LD_ADDR_OWVAR 34
2125: PUSH
2126: LD_INT 2
2128: ST_TO_ADDR
// hc_importance := 0 ;
2129: LD_ADDR_OWVAR 32
2133: PUSH
2134: LD_INT 0
2136: ST_TO_ADDR
// hc_name := George Potter ;
2137: LD_ADDR_OWVAR 26
2141: PUSH
2142: LD_STRING George Potter
2144: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2145: LD_ADDR_OWVAR 29
2149: PUSH
2150: LD_INT 12
2152: PUSH
2153: LD_INT 9
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: ST_TO_ADDR
// potter := CreateHuman ;
2160: LD_ADDR_EXP 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2170: LD_EXP 4
2174: PPUSH
2175: LD_INT 4
2177: PPUSH
2178: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2182: LD_EXP 4
2186: PPUSH
2187: LD_INT 103
2189: PPUSH
2190: LD_INT 45
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2200: LD_EXP 4
2204: PPUSH
2205: LD_INT 23
2207: PPUSH
2208: CALL_OW 119
// InitHc ( ) ;
2212: CALL_OW 19
// end ; end_of_file
2216: LD_VAR 0 1
2220: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 5 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 5
2235: ST_TO_ADDR
// uc_nation := nation_arabian ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_OWVAR 20
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 30
2263: PUSH
2264: LD_INT 5
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 69
2279: ST_TO_ADDR
// for i = 1 to 3 do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 3
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2332
// begin PrepareHuman ( false , 2 , 6 ) ;
2296: LD_INT 0
2298: PPUSH
2299: LD_INT 2
2301: PPUSH
2302: LD_INT 6
2304: PPUSH
2305: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2309: CALL_OW 44
2313: PPUSH
2314: LD_INT 27
2316: PPUSH
2317: LD_INT 22
2319: PPUSH
2320: LD_INT 5
2322: PPUSH
2323: LD_INT 0
2325: PPUSH
2326: CALL_OW 50
// end ;
2330: GO 2293
2332: POP
2333: POP
// for i = 1 to 3 do
2334: LD_ADDR_VAR 0 2
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 3
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2383
// begin PrepareHuman ( false , 1 , 6 ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 6
2358: PPUSH
2359: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 4
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PPUSH
2377: CALL_OW 52
// end ;
2381: GO 2347
2383: POP
2384: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: LD_INT 22
2392: PUSH
2393: LD_OWVAR 20
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 2
2404: PUSH
2405: LD_INT 30
2407: PUSH
2408: LD_INT 31
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 30
2417: PUSH
2418: LD_INT 32
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2527
// begin PrepareHuman ( false , 1 , 6 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2455: CALL_OW 44
2459: PPUSH
2460: LD_VAR 0 2
2464: PPUSH
2465: CALL 4808 0 2
// if GetBType ( i ) = b_bunker then
2469: LD_VAR 0 2
2473: PPUSH
2474: CALL_OW 266
2478: PUSH
2479: LD_INT 32
2481: EQUAL
2482: IFFALSE 2525
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 27
2491: PUSH
2492: LD_INT 25
2494: PUSH
2495: LD_INT 24
2497: PUSH
2498: LD_INT 28
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_VAR 0 2
2511: PUSH
2512: LD_INT 4
2514: MOD
2515: PUSH
2516: LD_INT 1
2518: PLUS
2519: ARRAY
2520: PPUSH
2521: CALL_OW 431
// end ;
2525: GO 2439
2527: POP
2528: POP
// for i = 1 to 3 do
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 3
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2660
// begin vc_chassis := ar_half_tracked ;
2545: LD_ADDR_OWVAR 37
2549: PUSH
2550: LD_INT 14
2552: ST_TO_ADDR
// vc_engine := engine_solar ;
2553: LD_ADDR_OWVAR 39
2557: PUSH
2558: LD_INT 2
2560: ST_TO_ADDR
// vc_control := control_manual ;
2561: LD_ADDR_OWVAR 38
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2569: LD_ADDR_OWVAR 40
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 27
2579: PUSH
2580: LD_INT 26
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_VAR 0 2
2592: ARRAY
2593: ST_TO_ADDR
// un := CreateVehicle ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 45
2603: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 3
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2644: CALL_OW 44
2648: PPUSH
2649: LD_VAR 0 3
2653: PPUSH
2654: CALL_OW 52
// end ;
2658: GO 2542
2660: POP
2661: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: LD_INT 6
2670: PPUSH
2671: CALL_OW 380
// al_commander := CreateHuman ;
2675: LD_ADDR_EXP 5
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2685: LD_EXP 5
2689: PPUSH
2690: LD_INT 22
2692: PUSH
2693: LD_OWVAR 20
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PPUSH
2725: CALL_OW 52
// InitHc ( ) ;
2729: CALL_OW 19
// end ;
2733: LD_VAR 0 1
2737: RET
// export function ChangeSide ( ) ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: LD_INT 22
2749: PUSH
2750: LD_INT 5
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 69
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2779
// SetSide ( i , 8 ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_INT 8
2772: PPUSH
2773: CALL_OW 235
2777: GO 2762
2779: POP
2780: POP
// end ;
2781: LD_VAR 0 1
2785: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IFFALSE 3314
2802: GO 2804
2804: DISABLE
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
// begin enable ;
2813: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: LD_INT 22
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 2
2831: PUSH
2832: LD_INT 21
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 21
2844: PUSH
2845: LD_INT 2
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PPUSH
2861: CALL_OW 69
2865: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2866: LD_ADDR_VAR 0 5
2870: PUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 5
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 32
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: LD_INT 24
2896: PUSH
2897: LD_INT 1000
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 69
2917: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 54
2933: PUSH
2934: EMPTY
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 25
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PPUSH
2955: CALL_OW 72
2959: ST_TO_ADDR
// if not list then
2960: LD_VAR 0 2
2964: NOT
2965: IFFALSE 2969
// exit ;
2967: GO 3314
// for i in list do
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 2
2978: PUSH
2979: FOR_IN
2980: IFFALSE 3312
// begin if b then
2982: LD_VAR 0 5
2986: IFFALSE 3065
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_INT 25
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PPUSH
3008: CALL_OW 72
3012: PUSH
3013: FOR_IN
3014: IFFALSE 3063
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 314
3025: NOT
3026: PUSH
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 110
3036: PUSH
3037: LD_INT 7
3039: NONEQUAL
3040: AND
3041: IFFALSE 3061
// ComRepairBuilding ( j , b [ 1 ] ) ;
3043: LD_VAR 0 4
3047: PPUSH
3048: LD_VAR 0 5
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: CALL_OW 130
3061: GO 3013
3063: POP
3064: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 256
3074: PUSH
3075: LD_INT 500
3077: LESS
3078: PUSH
3079: LD_VAR 0 1
3083: PPUSH
3084: CALL_OW 110
3088: PUSH
3089: LD_INT 7
3091: EQUAL
3092: NOT
3093: AND
3094: IFFALSE 3144
// begin ComMoveToArea ( i , guard_hill ) ;
3096: LD_VAR 0 1
3100: PPUSH
3101: LD_INT 11
3103: PPUSH
3104: CALL_OW 113
// SetTag ( i , 7 ) ;
3108: LD_VAR 0 1
3112: PPUSH
3113: LD_INT 7
3115: PPUSH
3116: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3120: LD_VAR 0 1
3124: PPUSH
3125: CALL_OW 247
3129: PUSH
3130: LD_INT 2
3132: EQUAL
3133: IFFALSE 3144
// begin AddComExitVehicle ( i ) ;
3135: LD_VAR 0 1
3139: PPUSH
3140: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3144: LD_VAR 0 1
3148: PPUSH
3149: CALL_OW 256
3153: PUSH
3154: LD_INT 1000
3156: EQUAL
3157: PUSH
3158: LD_VAR 0 1
3162: PPUSH
3163: CALL_OW 110
3167: PUSH
3168: LD_INT 7
3170: EQUAL
3171: AND
3172: PUSH
3173: LD_VAR 0 1
3177: PPUSH
3178: CALL_OW 310
3182: NOT
3183: AND
3184: PUSH
3185: LD_VAR 0 6
3189: AND
3190: IFFALSE 3218
// begin SetTag ( i , 0 ) ;
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3204: LD_VAR 0 6
3208: PPUSH
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3218: LD_VAR 0 1
3222: PPUSH
3223: CALL_OW 247
3227: PUSH
3228: LD_INT 2
3230: EQUAL
3231: PUSH
3232: LD_VAR 0 1
3236: PPUSH
3237: CALL_OW 110
3241: PUSH
3242: LD_INT 7
3244: NONEQUAL
3245: AND
3246: PUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 314
3256: NOT
3257: AND
3258: IFFALSE 3310
// if FilterAllUnits ( [ f_side , 7 ] ) then
3260: LD_INT 22
3262: PUSH
3263: LD_INT 7
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PPUSH
3270: CALL_OW 69
3274: IFFALSE 3310
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 7
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_VAR 0 1
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: CALL_OW 115
// end ;
3310: GO 2979
3312: POP
3313: POP
// end ; end_of_file
3314: PPOPN 6
3316: END
// export function Game ; var i , val , areas , wave ; begin
3317: LD_INT 0
3319: PPUSH
3320: PPUSH
3321: PPUSH
3322: PPUSH
3323: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_INT 1
3331: PUSH
3332: LD_INT 2
3334: PUSH
3335: LD_INT 3
3337: PUSH
3338: LD_INT 4
3340: PUSH
3341: LD_INT 5
3343: PUSH
3344: LD_INT 6
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3355: LD_ADDR_VAR 0 3
3359: PUSH
3360: LD_INT 5
3362: PUSH
3363: LD_INT 6
3365: PUSH
3366: LD_INT 7
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: LD_OWVAR 67
3378: ARRAY
3379: ST_TO_ADDR
// wave := 1 ;
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// while not game_over do
3388: LD_EXP 7
3392: NOT
3393: IFFALSE 3549
// begin repeat begin Wait ( 0 0$01 ) ;
3395: LD_INT 35
3397: PPUSH
3398: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3402: LD_ADDR_EXP 11
3406: PUSH
3407: LD_EXP 11
3411: PUSH
3412: LD_INT 35
3414: PLUS
3415: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3416: LD_INT 22
3418: PUSH
3419: LD_INT 7
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PPUSH
3426: CALL_OW 69
3430: PUSH
3431: LD_INT 10
3433: LESS
3434: PUSH
3435: LD_EXP 11
3439: PUSH
3440: LD_INT 21000
3442: GREATEREQUAL
3443: OR
3444: IFFALSE 3395
// wave_time := 0 0$00 ;
3446: LD_ADDR_EXP 11
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3454: LD_INT 5250
3456: PPUSH
3457: CALL_OW 67
// if not ignore_wave then
3461: LD_EXP 15
3465: NOT
3466: IFFALSE 3539
// begin for i = 1 to areas do
3468: LD_ADDR_VAR 0 2
3472: PUSH
3473: DOUBLE
3474: LD_INT 1
3476: DEC
3477: ST_TO_ADDR
3478: LD_VAR 0 4
3482: PUSH
3483: FOR_TO
3484: IFFALSE 3521
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3486: LD_VAR 0 5
3490: PUSH
3491: LD_VAR 0 3
3495: PLUS
3496: PPUSH
3497: LD_VAR 0 4
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PPUSH
3508: CALL 3554 0 2
// Wait ( 0 0$10 ) ;
3512: LD_INT 350
3514: PPUSH
3515: CALL_OW 67
// end ;
3519: GO 3483
3521: POP
3522: POP
// wave := wave + 1 ;
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: LD_VAR 0 5
3532: PUSH
3533: LD_INT 1
3535: PLUS
3536: ST_TO_ADDR
// end else
3537: GO 3547
// ignore_wave := false ;
3539: LD_ADDR_EXP 15
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// end ;
3547: GO 3388
// end ;
3549: LD_VAR 0 1
3553: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3554: LD_INT 0
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
// uc_side := 7 ;
3561: LD_ADDR_OWVAR 20
3565: PUSH
3566: LD_INT 7
3568: ST_TO_ADDR
// uc_nation := 2 ;
3569: LD_ADDR_OWVAR 21
3573: PUSH
3574: LD_INT 2
3576: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_INT 10
3584: PUSH
3585: LD_OWVAR 1
3589: PUSH
3590: LD_INT 10500
3592: DIV
3593: PLUS
3594: ST_TO_ADDR
// if v > 25 then
3595: LD_VAR 0 5
3599: PUSH
3600: LD_INT 25
3602: GREATER
3603: IFFALSE 3613
// v := 25 ;
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: LD_INT 25
3612: ST_TO_ADDR
// InitHc ( ) ;
3613: CALL_OW 19
// hc_gallery :=  ;
3617: LD_ADDR_OWVAR 33
3621: PUSH
3622: LD_STRING 
3624: ST_TO_ADDR
// hc_importance := 0 ;
3625: LD_ADDR_OWVAR 32
3629: PUSH
3630: LD_INT 0
3632: ST_TO_ADDR
// hc_name :=  ;
3633: LD_ADDR_OWVAR 26
3637: PUSH
3638: LD_STRING 
3640: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3641: LD_ADDR_OWVAR 29
3645: PUSH
3646: LD_VAR 0 5
3650: PUSH
3651: LD_VAR 0 5
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: ST_TO_ADDR
// if val > 35 then
3660: LD_VAR 0 1
3664: PUSH
3665: LD_INT 35
3667: GREATER
3668: IFFALSE 3678
// val := 35 ;
3670: LD_ADDR_VAR 0 1
3674: PUSH
3675: LD_INT 35
3677: ST_TO_ADDR
// for i = 1 to val do
3678: LD_ADDR_VAR 0 4
3682: PUSH
3683: DOUBLE
3684: LD_INT 1
3686: DEC
3687: ST_TO_ADDR
3688: LD_VAR 0 1
3692: PUSH
3693: FOR_TO
3694: IFFALSE 3905
// begin if i mod 9 = 0 then
3696: LD_VAR 0 4
3700: PUSH
3701: LD_INT 9
3703: MOD
3704: PUSH
3705: LD_INT 0
3707: EQUAL
3708: IFFALSE 3720
// class := class_apeman_kamikaze else
3710: LD_ADDR_VAR 0 7
3714: PUSH
3715: LD_INT 17
3717: ST_TO_ADDR
3718: GO 3752
// if i mod 4 = 0 then
3720: LD_VAR 0 4
3724: PUSH
3725: LD_INT 4
3727: MOD
3728: PUSH
3729: LD_INT 0
3731: EQUAL
3732: IFFALSE 3744
// class := class_apeman_soldier else
3734: LD_ADDR_VAR 0 7
3738: PUSH
3739: LD_INT 15
3741: ST_TO_ADDR
3742: GO 3752
// class := class_apeman ;
3744: LD_ADDR_VAR 0 7
3748: PUSH
3749: LD_INT 12
3751: ST_TO_ADDR
// if i mod 6 = 0 then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_INT 6
3759: MOD
3760: PUSH
3761: LD_INT 0
3763: EQUAL
3764: IFFALSE 3837
// begin vc_chassis := ar_half_tracked ;
3766: LD_ADDR_OWVAR 37
3770: PUSH
3771: LD_INT 14
3773: ST_TO_ADDR
// vc_control := control_apeman ;
3774: LD_ADDR_OWVAR 38
3778: PUSH
3779: LD_INT 5
3781: ST_TO_ADDR
// vc_engine := engine_siberite ;
3782: LD_ADDR_OWVAR 39
3786: PUSH
3787: LD_INT 3
3789: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3790: LD_ADDR_OWVAR 40
3794: PUSH
3795: LD_INT 28
3797: PUSH
3798: LD_INT 27
3800: PUSH
3801: LD_INT 29
3803: PUSH
3804: LD_INT 91
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 4
3818: PPUSH
3819: CALL_OW 12
3823: ARRAY
3824: ST_TO_ADDR
// un := CreateVehicle ;
3825: LD_ADDR_VAR 0 6
3829: PUSH
3830: CALL_OW 45
3834: ST_TO_ADDR
// end else
3835: GO 3862
// begin PrepareHuman ( sex_male , class , 10 ) ;
3837: LD_INT 1
3839: PPUSH
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_INT 10
3847: PPUSH
3848: CALL_OW 380
// un := CreateHuman ;
3852: LD_ADDR_VAR 0 6
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3862: LD_VAR 0 6
3866: PPUSH
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3879: LD_VAR 0 6
3883: PPUSH
3884: CALL_OW 250
3888: PPUSH
3889: LD_VAR 0 6
3893: PPUSH
3894: CALL_OW 251
3898: PPUSH
3899: CALL_OW 494
// end ;
3903: GO 3693
3905: POP
3906: POP
// end ;
3907: LD_VAR 0 3
3911: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3912: LD_EXP 6
3916: PUSH
3917: LD_EXP 7
3921: NOT
3922: AND
3923: IFFALSE 4042
3925: GO 3927
3927: DISABLE
3928: LD_INT 0
3930: PPUSH
3931: PPUSH
3932: PPUSH
// begin enable ;
3933: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: LD_INT 22
3941: PUSH
3942: LD_INT 7
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 69
3953: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3954: LD_ADDR_VAR 0 3
3958: PUSH
3959: LD_INT 81
3961: PUSH
3962: LD_INT 7
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PPUSH
3969: CALL_OW 69
3973: ST_TO_ADDR
// if not list then
3974: LD_VAR 0 2
3978: NOT
3979: IFFALSE 3983
// exit ;
3981: GO 4042
// for i in list do
3983: LD_ADDR_VAR 0 1
3987: PUSH
3988: LD_VAR 0 2
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4040
// begin if enemy then
3996: LD_VAR 0 3
4000: IFFALSE 4038
// if not HasTask ( i ) then
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 314
4011: NOT
4012: IFFALSE 4038
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 74
4033: PPUSH
4034: CALL_OW 115
// end ;
4038: GO 3993
4040: POP
4041: POP
// end ; end_of_file
4042: PPOPN 3
4044: END
// export function Action ; begin
4045: LD_INT 0
4047: PPUSH
// InGameOn ;
4048: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4052: LD_INT 23
4054: PPUSH
4055: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4059: LD_EXP 1
4063: PPUSH
4064: LD_STRING DL-1
4066: PPUSH
4067: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4071: LD_EXP 2
4075: PPUSH
4076: LD_STRING DA-1
4078: PPUSH
4079: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4083: LD_EXP 3
4087: PPUSH
4088: LD_STRING DA-2
4090: PPUSH
4091: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4095: LD_EXP 1
4099: PPUSH
4100: LD_STRING DL-2
4102: PPUSH
4103: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4107: LD_EXP 3
4111: PPUSH
4112: LD_STRING DA-3
4114: PPUSH
4115: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4119: LD_EXP 1
4123: PPUSH
4124: LD_STRING DL-3
4126: PPUSH
4127: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4131: LD_EXP 2
4135: PPUSH
4136: LD_STRING DA-4
4138: PPUSH
4139: CALL_OW 88
// if not dialogue_skipped then
4143: LD_OWVAR 59
4147: NOT
4148: IFFALSE 4233
// begin Wait ( 0 0$01 ) ;
4150: LD_INT 35
4152: PPUSH
4153: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4157: LD_EXP 2
4161: PUSH
4162: LD_EXP 3
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PPUSH
4171: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4175: LD_EXP 2
4179: PPUSH
4180: LD_INT 107
4182: PPUSH
4183: LD_INT 53
4185: PPUSH
4186: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4190: LD_EXP 3
4194: PPUSH
4195: LD_INT 108
4197: PPUSH
4198: LD_INT 53
4200: PPUSH
4201: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4205: LD_EXP 2
4209: PPUSH
4210: LD_EXP 4
4214: PPUSH
4215: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4219: LD_EXP 3
4223: PPUSH
4224: LD_EXP 4
4228: PPUSH
4229: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4233: LD_INT 35
4235: PPUSH
4236: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4240: LD_EXP 2
4244: PPUSH
4245: LD_INT 107
4247: PPUSH
4248: LD_INT 53
4250: PPUSH
4251: CALL_OW 307
4255: PUSH
4256: LD_OWVAR 59
4260: OR
4261: IFFALSE 4233
// if not dialogue_skipped then
4263: LD_OWVAR 59
4267: NOT
4268: IFFALSE 4369
// begin ComTurnUnit ( potter , l1 ) ;
4270: LD_EXP 4
4274: PPUSH
4275: LD_EXP 2
4279: PPUSH
4280: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4284: LD_INT 10
4286: PPUSH
4287: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4291: LD_EXP 4
4295: PPUSH
4296: LD_INT 108
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 0
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 483
// Wait ( 0 0$01 ) ;
4312: LD_INT 35
4314: PPUSH
4315: CALL_OW 67
// RemoveUnit ( potter ) ;
4319: LD_EXP 4
4323: PPUSH
4324: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4328: LD_EXP 2
4332: PPUSH
4333: LD_STRING DA-5
4335: PPUSH
4336: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4340: LD_EXP 3
4344: PPUSH
4345: LD_STRING DA-6
4347: PPUSH
4348: CALL_OW 88
// Wait ( 0 0$02 ) ;
4352: LD_INT 70
4354: PPUSH
4355: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4359: LD_INT 25
4361: PPUSH
4362: LD_INT 19
4364: PPUSH
4365: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4369: LD_INT 20
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: CALL 3554 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4379: LD_EXP 5
4383: PPUSH
4384: LD_STRING DLa-1
4386: PPUSH
4387: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4391: LD_EXP 1
4395: PPUSH
4396: LD_STRING DL-5
4398: PPUSH
4399: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4403: LD_INT 23
4405: PPUSH
4406: CALL_OW 87
// InGameOff ;
4410: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4414: LD_STRING C1
4416: PPUSH
4417: CALL_OW 337
// alert := true ;
4421: LD_ADDR_EXP 6
4425: PUSH
4426: LD_INT 1
4428: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4429: LD_EXP 5
4433: PPUSH
4434: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4438: LD_EXP 5
4442: PPUSH
4443: LD_INT 11
4445: PPUSH
4446: CALL_OW 173
// Wait ( 0 0$30 ) ;
4450: LD_INT 1050
4452: PPUSH
4453: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4457: LD_INT 10
4459: PPUSH
4460: LD_INT 4
4462: PPUSH
4463: CALL 3554 0 2
// Wait ( 0 0$35 ) ;
4467: LD_INT 1225
4469: PPUSH
4470: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4474: LD_INT 10
4476: PPUSH
4477: LD_INT 5
4479: PPUSH
4480: CALL 3554 0 2
// Wait ( 0 0$03 ) ;
4484: LD_INT 105
4486: PPUSH
4487: CALL_OW 67
// Game ;
4491: CALL 3317 0 0
// end ;
4495: LD_VAR 0 1
4499: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4500: LD_INT 22
4502: PUSH
4503: LD_INT 7
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 0
4517: EQUAL
4518: PUSH
4519: LD_EXP 10
4523: PUSH
4524: LD_INT 1500
4526: GREATEREQUAL
4527: AND
4528: IFFALSE 4756
4530: GO 4532
4532: DISABLE
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
// begin DialogueOn ;
4537: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4541: LD_EXP 12
4545: PPUSH
4546: LD_STRING DVr-1
4548: PPUSH
4549: CALL_OW 94
// DialogueOff ;
4553: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4557: LD_STRING QBonusInfo
4559: PPUSH
4560: CALL_OW 97
4564: PUSH
4565: LD_INT 1
4567: DOUBLE
4568: EQUAL
4569: IFTRUE 4573
4571: GO 4584
4573: POP
// bonus_active := true ; end ;
4574: LD_ADDR_EXP 13
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
4582: GO 4585
4584: POP
// bonus_num := 4 ;
4585: LD_ADDR_EXP 14
4589: PUSH
4590: LD_INT 4
4592: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ;
4593: LD_OWVAR 2
4597: PPUSH
4598: LD_INT 12
4600: PPUSH
4601: LD_INT 2
4603: PPUSH
4604: LD_INT 23
4606: PPUSH
4607: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4611: LD_ADDR_VAR 0 1
4615: PUSH
4616: LD_INT 500
4618: PUSH
4619: LD_INT 3500
4621: PUSH
4622: LD_INT 5750
4624: PUSH
4625: LD_INT 10000
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4634: LD_INT 10500
4636: PUSH
4637: LD_INT 12600
4639: PUSH
4640: LD_INT 14700
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: PUSH
4648: LD_OWVAR 67
4652: ARRAY
4653: PPUSH
4654: CALL_OW 67
// for i = 1 to tmp do
4658: LD_ADDR_VAR 0 2
4662: PUSH
4663: DOUBLE
4664: LD_INT 1
4666: DEC
4667: ST_TO_ADDR
4668: LD_VAR 0 1
4672: PUSH
4673: FOR_TO
4674: IFFALSE 4706
// if points >= tmp [ i ] then
4676: LD_EXP 10
4680: PUSH
4681: LD_VAR 0 1
4685: PUSH
4686: LD_VAR 0 2
4690: ARRAY
4691: GREATEREQUAL
4692: IFFALSE 4704
// bonus_num := i ;
4694: LD_ADDR_EXP 14
4698: PUSH
4699: LD_VAR 0 2
4703: ST_TO_ADDR
4704: GO 4673
4706: POP
4707: POP
// case Query ( QBonusInfo ) of 1 :
4708: LD_STRING QBonusInfo
4710: PPUSH
4711: CALL_OW 97
4715: PUSH
4716: LD_INT 1
4718: DOUBLE
4719: EQUAL
4720: IFTRUE 4724
4722: GO 4745
4724: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4725: LD_OWVAR 2
4729: PPUSH
4730: LD_INT 12
4732: PPUSH
4733: LD_INT 2
4735: PPUSH
4736: LD_INT 23
4738: PPUSH
4739: CALL_OW 468
4743: GO 4746
4745: POP
// until points >= 15000 ;
4746: LD_EXP 10
4750: PUSH
4751: LD_INT 15000
4753: GREATEREQUAL
4754: IFFALSE 4634
// end ;
4756: PPOPN 2
4758: END
// export function Win ; begin
4759: LD_INT 0
4761: PPUSH
// AddMedal ( med , 1 ) ;
4762: LD_STRING med
4764: PPUSH
4765: LD_INT 1
4767: PPUSH
4768: CALL_OW 101
// AddMedal ( med , 1 ) ;
4772: LD_STRING med
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 101
// AddMedal ( med , 1 ) ;
4782: LD_STRING med
4784: PPUSH
4785: LD_INT 1
4787: PPUSH
4788: CALL_OW 101
// GiveMedals ( MAIN ) ;
4792: LD_STRING MAIN
4794: PPUSH
4795: CALL_OW 102
// YouWin ;
4799: CALL_OW 103
// end ; end_of_file
4803: LD_VAR 0 1
4807: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4808: LD_INT 0
4810: PPUSH
4811: PPUSH
// dir := GetDir ( b ) ;
4812: LD_ADDR_VAR 0 4
4816: PUSH
4817: LD_VAR 0 2
4821: PPUSH
4822: CALL_OW 254
4826: ST_TO_ADDR
// if dir < 3 then
4827: LD_VAR 0 4
4831: PUSH
4832: LD_INT 3
4834: LESS
4835: IFFALSE 4853
// dir := dir + 3 else
4837: LD_ADDR_VAR 0 4
4841: PUSH
4842: LD_VAR 0 4
4846: PUSH
4847: LD_INT 3
4849: PLUS
4850: ST_TO_ADDR
4851: GO 4867
// dir := dir - 3 ;
4853: LD_ADDR_VAR 0 4
4857: PUSH
4858: LD_VAR 0 4
4862: PUSH
4863: LD_INT 3
4865: MINUS
4866: ST_TO_ADDR
// SetDir ( un , dir ) ;
4867: LD_VAR 0 1
4871: PPUSH
4872: LD_VAR 0 4
4876: PPUSH
4877: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_VAR 0 2
4890: PPUSH
4891: CALL_OW 52
// end ;
4895: LD_VAR 0 3
4899: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4900: LD_INT 0
4902: PPUSH
4903: PPUSH
4904: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4905: LD_ADDR_VAR 0 7
4909: PUSH
4910: LD_VAR 0 1
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_VAR 0 4
4930: PPUSH
4931: CALL_OW 1
4935: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4936: LD_ADDR_VAR 0 1
4940: PUSH
4941: LD_VAR 0 1
4945: PPUSH
4946: LD_VAR 0 2
4950: PPUSH
4951: LD_VAR 0 7
4955: PPUSH
4956: CALL_OW 1
4960: ST_TO_ADDR
// result := tab ;
4961: LD_ADDR_VAR 0 5
4965: PUSH
4966: LD_VAR 0 1
4970: ST_TO_ADDR
// end ;
4971: LD_VAR 0 5
4975: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4976: LD_INT 0
4978: PPUSH
4979: PPUSH
4980: PPUSH
// if not GetControl ( veh ) = control_manual then
4981: LD_VAR 0 1
4985: PPUSH
4986: CALL_OW 263
4990: PUSH
4991: LD_INT 1
4993: EQUAL
4994: NOT
4995: IFFALSE 5007
// result := false else
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
5005: GO 5152
// if veh in FilterAllUnits ( [ f_empty ] ) then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 58
5014: PUSH
5015: EMPTY
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: IN
5023: IFFALSE 5035
// result := false else
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
5033: GO 5152
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5035: LD_ADDR_VAR 0 4
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 255
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 55
5059: PUSH
5060: EMPTY
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 69
5071: ST_TO_ADDR
// if not filter then
5072: LD_VAR 0 4
5076: NOT
5077: IFFALSE 5089
// result := false else
5079: LD_ADDR_VAR 0 2
5083: PUSH
5084: LD_INT 0
5086: ST_TO_ADDR
5087: GO 5152
// for i = 1 to filter do
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: DOUBLE
5095: LD_INT 1
5097: DEC
5098: ST_TO_ADDR
5099: LD_VAR 0 4
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5150
// if IsDriver ( filter [ i ] ) = veh then
5107: LD_VAR 0 4
5111: PUSH
5112: LD_VAR 0 3
5116: ARRAY
5117: PPUSH
5118: CALL 61978 0 1
5122: PUSH
5123: LD_VAR 0 1
5127: EQUAL
5128: IFFALSE 5148
// begin result := filter [ i ] ;
5130: LD_ADDR_VAR 0 2
5134: PUSH
5135: LD_VAR 0 4
5139: PUSH
5140: LD_VAR 0 3
5144: ARRAY
5145: ST_TO_ADDR
// break ;
5146: GO 5150
// end ;
5148: GO 5104
5150: POP
5151: POP
// end ; end ; end_of_file
5152: LD_VAR 0 2
5156: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: CALL 22704 0 1
// if un = legion_commander then
5166: LD_VAR 0 1
5170: PUSH
5171: LD_EXP 1
5175: EQUAL
5176: IFFALSE 5185
// YouLost ( commanderDied ) ;
5178: LD_STRING commanderDied
5180: PPUSH
5181: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5185: LD_VAR 0 1
5189: PUSH
5190: LD_EXP 1
5194: PUSH
5195: LD_INT 23
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: IN
5202: IFFALSE 5212
// game_over := true ;
5204: LD_ADDR_EXP 7
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// if un = al_commander then
5212: LD_VAR 0 1
5216: PUSH
5217: LD_EXP 5
5221: EQUAL
5222: IFFALSE 5228
// ChangeSide ( ) ;
5224: CALL 2738 0 0
// if GetSide ( un ) = 7 then
5228: LD_VAR 0 1
5232: PPUSH
5233: CALL_OW 255
5237: PUSH
5238: LD_INT 7
5240: EQUAL
5241: IFFALSE 5359
// begin if GetClass ( un ) = class_apeman then
5243: LD_VAR 0 1
5247: PPUSH
5248: CALL_OW 257
5252: PUSH
5253: LD_INT 12
5255: EQUAL
5256: IFFALSE 5272
// points := points + 6 ;
5258: LD_ADDR_EXP 10
5262: PUSH
5263: LD_EXP 10
5267: PUSH
5268: LD_INT 6
5270: PLUS
5271: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 257
5281: PUSH
5282: LD_INT 17
5284: EQUAL
5285: IFFALSE 5301
// points := points + 11 ;
5287: LD_ADDR_EXP 10
5291: PUSH
5292: LD_EXP 10
5296: PUSH
5297: LD_INT 11
5299: PLUS
5300: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 257
5310: PUSH
5311: LD_INT 15
5313: EQUAL
5314: IFFALSE 5330
// points := points + 14 ;
5316: LD_ADDR_EXP 10
5320: PUSH
5321: LD_EXP 10
5325: PUSH
5326: LD_INT 14
5328: PLUS
5329: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 247
5339: PUSH
5340: LD_INT 2
5342: EQUAL
5343: IFFALSE 5359
// points := points + 50 ;
5345: LD_ADDR_EXP 10
5349: PUSH
5350: LD_EXP 10
5354: PUSH
5355: LD_INT 50
5357: PLUS
5358: ST_TO_ADDR
// end ; end ;
5359: PPOPN 1
5361: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5362: LD_EXP 5
5366: PPUSH
5367: CALL_OW 256
5371: PUSH
5372: LD_INT 1000
5374: LESS
5375: IFFALSE 5407
5377: GO 5379
5379: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5380: LD_EXP 5
5384: PPUSH
5385: CALL_OW 504
5389: PPUSH
5390: CALL_OW 255
5394: PUSH
5395: LD_INT 8
5397: EQUAL
5398: IFFALSE 5407
// YouLost ( FriendlyFire ) ;
5400: LD_STRING FriendlyFire
5402: PPUSH
5403: CALL_OW 104
5407: END
// on DialogueSkipped ( value ) do var i ;
5408: LD_INT 0
5410: PPUSH
// begin RemoveUnit ( potter ) ;
5411: LD_EXP 4
5415: PPUSH
5416: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5420: LD_EXP 2
5424: PUSH
5425: LD_EXP 3
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 122
// Wait ( 1 ) ;
5438: LD_INT 1
5440: PPUSH
5441: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5445: LD_EXP 2
5449: PPUSH
5450: LD_INT 107
5452: PPUSH
5453: LD_INT 53
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: LD_INT 0
5461: PPUSH
5462: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5466: LD_EXP 3
5470: PPUSH
5471: LD_INT 108
5473: PPUSH
5474: LD_INT 53
5476: PPUSH
5477: LD_INT 0
5479: PPUSH
5480: LD_INT 0
5482: PPUSH
5483: CALL_OW 483
// Wait ( 1 ) ;
5487: LD_INT 1
5489: PPUSH
5490: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5494: LD_EXP 2
5498: PUSH
5499: LD_EXP 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: LD_INT 108
5510: PPUSH
5511: LD_INT 1
5513: PPUSH
5514: CALL_OW 118
// end ;
5518: PPOPN 2
5520: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5521: LD_INT 0
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5531: LD_ADDR_VAR 0 10
5535: PUSH
5536: LD_INT 2
5538: PPUSH
5539: CALL_OW 469
5543: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5544: LD_ADDR_VAR 0 12
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_OWVAR 2
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 2
5563: PUSH
5564: LD_INT 30
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 30
5576: PUSH
5577: LD_INT 11
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL_OW 69
5597: PPUSH
5598: LD_VAR 0 10
5602: PUSH
5603: LD_INT 1
5605: ARRAY
5606: PPUSH
5607: LD_VAR 0 10
5611: PUSH
5612: LD_INT 2
5614: ARRAY
5615: PPUSH
5616: CALL_OW 73
5620: ST_TO_ADDR
// if icon = art_exp_left then
5621: LD_VAR 0 2
5625: PUSH
5626: LD_INT 1
5628: EQUAL
5629: IFFALSE 5684
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5631: LD_VAR 0 12
5635: PPUSH
5636: LD_EXP 9
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5648: LD_VAR 0 12
5652: PPUSH
5653: LD_EXP 17
5657: PPUSH
5658: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5662: LD_OWVAR 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: LD_VAR 0 12
5677: PPUSH
5678: CALL_OW 468
// end else
5682: GO 6465
// begin DialogueOn ;
5684: CALL_OW 6
// uc_side := 8 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 8
5695: ST_TO_ADDR
// uc_nation := 2 ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 2
5703: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: LD_STRING QBonus
5711: PUSH
5712: LD_EXP 14
5716: STR
5717: ST_TO_ADDR
// off := true ;
5718: LD_ADDR_VAR 0 6
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// units := [ ] ;
5726: LD_ADDR_VAR 0 7
5730: PUSH
5731: EMPTY
5732: ST_TO_ADDR
// crates := 0 ;
5733: LD_ADDR_VAR 0 8
5737: PUSH
5738: LD_INT 0
5740: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5741: LD_EXP 12
5745: PPUSH
5746: LD_STRING DVr-2
5748: PPUSH
5749: CALL_OW 94
// wait ( 0 0$1 ) ;
5753: LD_INT 35
5755: PPUSH
5756: CALL_OW 67
// case Query ( bonus ) of 1 :
5760: LD_VAR 0 5
5764: PPUSH
5765: CALL_OW 97
5769: PUSH
5770: LD_INT 1
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5863
5778: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5779: LD_ADDR_VAR 0 9
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 5
5792: PUSH
5793: LD_INT 8
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: PUSH
5802: LD_EXP 14
5806: ARRAY
5807: ST_TO_ADDR
// for i = 1 to tmp do
5808: LD_ADDR_VAR 0 11
5812: PUSH
5813: DOUBLE
5814: LD_INT 1
5816: DEC
5817: ST_TO_ADDR
5818: LD_VAR 0 9
5822: PUSH
5823: FOR_TO
5824: IFFALSE 5859
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5826: LD_INT 0
5828: PPUSH
5829: LD_INT 15
5831: PPUSH
5832: LD_VAR 0 9
5836: PPUSH
5837: CALL_OW 380
// units := units ^ CreateHuman ;
5841: LD_ADDR_VAR 0 7
5845: PUSH
5846: LD_VAR 0 7
5850: PUSH
5851: CALL_OW 44
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5823
5859: POP
5860: POP
// end ; 2 :
5861: GO 6271
5863: LD_INT 2
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5903
5871: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5872: LD_ADDR_VAR 0 8
5876: PUSH
5877: LD_INT 100
5879: PUSH
5880: LD_INT 150
5882: PUSH
5883: LD_INT 350
5885: PUSH
5886: LD_INT 500
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PUSH
5895: LD_EXP 14
5899: ARRAY
5900: ST_TO_ADDR
// end ; 3 :
5901: GO 6271
5903: LD_INT 3
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 6251
5911: POP
// begin if bonus_num = 1 then
5912: LD_EXP 14
5916: PUSH
5917: LD_INT 1
5919: EQUAL
5920: IFFALSE 5930
// ignore_wave := true ;
5922: LD_ADDR_EXP 15
5926: PUSH
5927: LD_INT 1
5929: ST_TO_ADDR
// if bonus_num = 2 then
5930: LD_EXP 14
5934: PUSH
5935: LD_INT 2
5937: EQUAL
5938: IFFALSE 6058
// begin for i = 1 to 2 do
5940: LD_ADDR_VAR 0 11
5944: PUSH
5945: DOUBLE
5946: LD_INT 1
5948: DEC
5949: ST_TO_ADDR
5950: LD_INT 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6056
// begin uc_nation := nation_arabian ;
5956: LD_ADDR_OWVAR 21
5960: PUSH
5961: LD_INT 2
5963: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5964: LD_ADDR_OWVAR 37
5968: PUSH
5969: LD_INT 14
5971: ST_TO_ADDR
// vc_engine := engine_siberite ;
5972: LD_ADDR_OWVAR 39
5976: PUSH
5977: LD_INT 3
5979: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5980: LD_ADDR_OWVAR 38
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: LD_INT 5
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 2
6000: PPUSH
6001: CALL_OW 12
6005: ARRAY
6006: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6007: LD_ADDR_OWVAR 40
6011: PUSH
6012: LD_INT 28
6014: PUSH
6015: LD_INT 27
6017: PUSH
6018: LD_INT 25
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 3
6031: PPUSH
6032: CALL_OW 12
6036: ARRAY
6037: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6038: LD_ADDR_VAR 0 7
6042: PUSH
6043: LD_VAR 0 7
6047: PUSH
6048: CALL_OW 45
6052: ADD
6053: ST_TO_ADDR
// end ;
6054: GO 5953
6056: POP
6057: POP
// end ; if bonus_num = 3 then
6058: LD_EXP 14
6062: PUSH
6063: LD_INT 3
6065: EQUAL
6066: IFFALSE 6190
// begin for i = 1 to 4 do
6068: LD_ADDR_VAR 0 11
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 4
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6188
// begin uc_nation := nation_arabian ;
6084: LD_ADDR_OWVAR 21
6088: PUSH
6089: LD_INT 2
6091: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6092: LD_ADDR_OWVAR 37
6096: PUSH
6097: LD_INT 14
6099: ST_TO_ADDR
// vc_engine := engine_siberite ;
6100: LD_ADDR_OWVAR 39
6104: PUSH
6105: LD_INT 3
6107: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6108: LD_ADDR_OWVAR 38
6112: PUSH
6113: LD_INT 2
6115: PUSH
6116: LD_INT 5
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 1
6125: PPUSH
6126: LD_INT 2
6128: PPUSH
6129: CALL_OW 12
6133: ARRAY
6134: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6135: LD_ADDR_OWVAR 40
6139: PUSH
6140: LD_INT 28
6142: PUSH
6143: LD_INT 27
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 25
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_INT 4
6163: PPUSH
6164: CALL_OW 12
6168: ARRAY
6169: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6170: LD_ADDR_VAR 0 7
6174: PUSH
6175: LD_VAR 0 7
6179: PUSH
6180: CALL_OW 45
6184: ADD
6185: ST_TO_ADDR
// end ;
6186: GO 6081
6188: POP
6189: POP
// end ; if bonus_num = 4 then
6190: LD_EXP 14
6194: PUSH
6195: LD_INT 4
6197: EQUAL
6198: IFFALSE 6249
// for i = 1 to 3 do
6200: LD_ADDR_VAR 0 11
6204: PUSH
6205: DOUBLE
6206: LD_INT 1
6208: DEC
6209: ST_TO_ADDR
6210: LD_INT 3
6212: PUSH
6213: FOR_TO
6214: IFFALSE 6247
// begin PrepareHuman ( false , 3 , 8 ) ;
6216: LD_INT 0
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 8
6224: PPUSH
6225: CALL_OW 380
// units := units ^ CreateHuman ;
6229: LD_ADDR_VAR 0 7
6233: PUSH
6234: LD_VAR 0 7
6238: PUSH
6239: CALL_OW 44
6243: ADD
6244: ST_TO_ADDR
// end ;
6245: GO 6213
6247: POP
6248: POP
// end ; 4 :
6249: GO 6271
6251: LD_INT 4
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6270
6259: POP
// off := false ; end ;
6260: LD_ADDR_VAR 0 6
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
6268: GO 6271
6270: POP
// DialogueOff ;
6271: CALL_OW 7
// if not off then
6275: LD_VAR 0 6
6279: NOT
6280: IFFALSE 6286
// exit else
6282: GO 6465
6284: GO 6339
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6286: LD_OWVAR 2
6290: PPUSH
6291: LD_INT 12
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 23
6299: PPUSH
6300: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6304: LD_EXP 12
6308: PPUSH
6309: LD_STRING DVr-3
6311: PUSH
6312: LD_STRING DVr-3a
6314: PUSH
6315: LD_STRING DVr-3b
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 1
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: CALL_OW 12
6333: ARRAY
6334: PPUSH
6335: CALL_OW 94
// end ; if units then
6339: LD_VAR 0 7
6343: IFFALSE 6407
// for i in units do
6345: LD_ADDR_VAR 0 11
6349: PUSH
6350: LD_VAR 0 7
6354: PUSH
6355: FOR_IN
6356: IFFALSE 6405
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6358: LD_VAR 0 11
6362: PPUSH
6363: LD_INT 92
6365: PPUSH
6366: LD_INT 49
6368: PPUSH
6369: LD_INT 20
6371: PPUSH
6372: LD_INT 0
6374: PPUSH
6375: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6379: LD_VAR 0 11
6383: PPUSH
6384: CALL_OW 250
6388: PPUSH
6389: LD_VAR 0 11
6393: PPUSH
6394: CALL_OW 251
6398: PPUSH
6399: CALL_OW 494
// end ;
6403: GO 6355
6405: POP
6406: POP
// if crates then
6407: LD_VAR 0 8
6411: IFFALSE 6465
// for i = 1 to ( crates div 50 ) do
6413: LD_ADDR_VAR 0 11
6417: PUSH
6418: DOUBLE
6419: LD_INT 1
6421: DEC
6422: ST_TO_ADDR
6423: LD_VAR 0 8
6427: PUSH
6428: LD_INT 50
6430: DIV
6431: PUSH
6432: FOR_TO
6433: IFFALSE 6463
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6435: LD_INT 5
6437: PPUSH
6438: LD_INT 92
6440: PPUSH
6441: LD_INT 49
6443: PPUSH
6444: LD_INT 30
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 56
// wait ( 0 0$02 ) ;
6454: LD_INT 70
6456: PPUSH
6457: CALL_OW 67
// end ;
6461: GO 6432
6463: POP
6464: POP
// end ; end ;
6465: PPOPN 12
6467: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6468: LD_VAR 0 1
6472: PPUSH
6473: LD_VAR 0 2
6477: PPUSH
6478: LD_VAR 0 3
6482: PPUSH
6483: CALL 22800 0 3
// end ;
6487: PPOPN 3
6489: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL 22808 0 1
// end ;
6499: PPOPN 1
6501: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 255
6511: PUSH
6512: LD_OWVAR 2
6516: EQUAL
6517: IFFALSE 6527
// player_res_art := true ;
6519: LD_ADDR_EXP 8
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// end ;
6527: PPOPN 1
6529: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6530: LD_INT 22
6532: PUSH
6533: LD_OWVAR 2
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 2
6544: PUSH
6545: LD_INT 30
6547: PUSH
6548: LD_INT 7
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 30
6557: PUSH
6558: LD_INT 8
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 30
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 69
6589: IFFALSE 6822
6591: GO 6593
6593: DISABLE
6594: LD_INT 0
6596: PPUSH
6597: PPUSH
// begin enable ;
6598: ENABLE
// xy := FindArtifact ( 2 ) ;
6599: LD_ADDR_VAR 0 1
6603: PUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 469
6611: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6612: LD_ADDR_VAR 0 2
6616: PUSH
6617: LD_INT 22
6619: PUSH
6620: LD_OWVAR 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 8
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 30
6644: PUSH
6645: LD_INT 7
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 30
6654: PUSH
6655: LD_INT 11
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PPUSH
6672: CALL_OW 69
6676: PPUSH
6677: LD_VAR 0 1
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 1
6690: PUSH
6691: LD_INT 2
6693: ARRAY
6694: PPUSH
6695: CALL_OW 73
6699: ST_TO_ADDR
// if player_artifact_ready = false then
6700: LD_EXP 16
6704: PUSH
6705: LD_INT 0
6707: EQUAL
6708: IFFALSE 6822
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 1
6719: PUSH
6720: LD_INT 1
6722: ARRAY
6723: PPUSH
6724: LD_VAR 0 1
6728: PUSH
6729: LD_INT 2
6731: ARRAY
6732: PPUSH
6733: CALL_OW 297
6737: PUSH
6738: LD_INT 6
6740: LESS
6741: IFFALSE 6802
// begin if BuildingStatus ( lab ) = bs_idle then
6743: LD_VAR 0 2
6747: PPUSH
6748: CALL_OW 461
6752: PUSH
6753: LD_INT 2
6755: EQUAL
6756: IFFALSE 6780
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6758: LD_OWVAR 2
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 2
6768: PPUSH
6769: LD_VAR 0 2
6773: PPUSH
6774: CALL_OW 468
6778: GO 6800
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6780: LD_OWVAR 2
6784: PPUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 468
// end else
6800: GO 6822
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6802: LD_OWVAR 2
6806: PPUSH
6807: LD_INT 1
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 2
6817: PPUSH
6818: CALL_OW 468
// end ;
6822: PPOPN 2
6824: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6825: LD_VAR 0 1
6829: PPUSH
6830: CALL_OW 255
6834: PUSH
6835: LD_OWVAR 2
6839: EQUAL
6840: IFFALSE 6866
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6842: LD_OWVAR 2
6846: PPUSH
6847: LD_INT 1
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 468
// Win ;
6862: CALL 4759 0 0
// end ; end ;
6866: PPOPN 1
6868: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6869: LD_ADDR_EXP 17
6873: PUSH
6874: LD_VAR 0 2
6878: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6879: LD_OWVAR 2
6883: PPUSH
6884: LD_INT 1
6886: PPUSH
6887: LD_INT 2
6889: PPUSH
6890: LD_VAR 0 1
6894: PPUSH
6895: CALL_OW 468
// end ;
6899: PPOPN 2
6901: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6902: LD_VAR 0 1
6906: PPUSH
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL 22824 0 2
// end ; end_of_file
6916: PPOPN 2
6918: END
// every 0 0$01 trigger not game_over do
6919: LD_EXP 7
6923: NOT
6924: IFFALSE 6957
6926: GO 6928
6928: DISABLE
// begin enable ;
6929: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6930: LD_ADDR_OWVAR 47
6934: PUSH
6935: LD_STRING #tick
6937: PUSH
6938: LD_OWVAR 1
6942: PUSH
6943: LD_STRING #points
6945: PUSH
6946: LD_EXP 10
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: ST_TO_ADDR
// end ;
6957: END
// every 0 0$01 trigger game_over do
6958: LD_EXP 7
6962: IFFALSE 7021
6964: GO 6966
6966: DISABLE
// begin Wait ( 0 0$02 ) ;
6967: LD_INT 70
6969: PPUSH
6970: CALL_OW 67
// DialogueOn ;
6974: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6978: LD_ADDR_OWVAR 47
6982: PUSH
6983: LD_STRING #game-points
6985: PUSH
6986: LD_OWVAR 78
6990: PUSH
6991: LD_EXP 10
6995: PUSH
6996: LD_STRING #game-time
6998: PUSH
6999: LD_OWVAR 1
7003: PUSH
7004: LD_STRING #game-difficulty
7006: PUSH
7007: LD_OWVAR 67
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; end_of_file
7021: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7022: LD_OWVAR 1
7026: PUSH
7027: LD_INT 52500
7029: LESS
7030: IFFALSE 7054
7032: GO 7034
7034: DISABLE
// begin enable ;
7035: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 5
7041: PPUSH
7042: CALL_OW 12
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL_OW 57
// end ; end_of_file end_of_file
7054: END
// every 0 0$1 do
7055: GO 7057
7057: DISABLE
// begin enable ;
7058: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7059: LD_STRING updateTimer(
7061: PUSH
7062: LD_OWVAR 1
7066: STR
7067: PUSH
7068: LD_STRING );
7070: STR
7071: PPUSH
7072: CALL_OW 559
// end ;
7076: END
// export function SOS_MapStart ( ) ; begin
7077: LD_INT 0
7079: PPUSH
// if streamModeActive then
7080: LD_EXP 18
7084: IFFALSE 7093
// DefineStreamItems ( true ) ;
7086: LD_INT 1
7088: PPUSH
7089: CALL 8747 0 1
// UpdateFactoryWaypoints ( ) ;
7093: CALL 21608 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7097: CALL 21865 0 0
// end ;
7101: LD_VAR 0 1
7105: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7106: LD_INT 0
7108: PPUSH
// if p2 = 100 then
7109: LD_VAR 0 2
7113: PUSH
7114: LD_INT 100
7116: EQUAL
7117: IFFALSE 8120
// begin if not StreamModeActive then
7119: LD_EXP 18
7123: NOT
7124: IFFALSE 7134
// StreamModeActive := true ;
7126: LD_ADDR_EXP 18
7130: PUSH
7131: LD_INT 1
7133: ST_TO_ADDR
// if p3 = 0 then
7134: LD_VAR 0 3
7138: PUSH
7139: LD_INT 0
7141: EQUAL
7142: IFFALSE 7148
// InitStreamMode ;
7144: CALL 8283 0 0
// if p3 = 1 then
7148: LD_VAR 0 3
7152: PUSH
7153: LD_INT 1
7155: EQUAL
7156: IFFALSE 7166
// sRocket := true ;
7158: LD_ADDR_EXP 23
7162: PUSH
7163: LD_INT 1
7165: ST_TO_ADDR
// if p3 = 2 then
7166: LD_VAR 0 3
7170: PUSH
7171: LD_INT 2
7173: EQUAL
7174: IFFALSE 7184
// sSpeed := true ;
7176: LD_ADDR_EXP 22
7180: PUSH
7181: LD_INT 1
7183: ST_TO_ADDR
// if p3 = 3 then
7184: LD_VAR 0 3
7188: PUSH
7189: LD_INT 3
7191: EQUAL
7192: IFFALSE 7202
// sEngine := true ;
7194: LD_ADDR_EXP 24
7198: PUSH
7199: LD_INT 1
7201: ST_TO_ADDR
// if p3 = 4 then
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 4
7209: EQUAL
7210: IFFALSE 7220
// sSpec := true ;
7212: LD_ADDR_EXP 21
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
// if p3 = 5 then
7220: LD_VAR 0 3
7224: PUSH
7225: LD_INT 5
7227: EQUAL
7228: IFFALSE 7238
// sLevel := true ;
7230: LD_ADDR_EXP 25
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// if p3 = 6 then
7238: LD_VAR 0 3
7242: PUSH
7243: LD_INT 6
7245: EQUAL
7246: IFFALSE 7256
// sArmoury := true ;
7248: LD_ADDR_EXP 26
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// if p3 = 7 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 7
7263: EQUAL
7264: IFFALSE 7274
// sRadar := true ;
7266: LD_ADDR_EXP 27
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// if p3 = 8 then
7274: LD_VAR 0 3
7278: PUSH
7279: LD_INT 8
7281: EQUAL
7282: IFFALSE 7292
// sBunker := true ;
7284: LD_ADDR_EXP 28
7288: PUSH
7289: LD_INT 1
7291: ST_TO_ADDR
// if p3 = 9 then
7292: LD_VAR 0 3
7296: PUSH
7297: LD_INT 9
7299: EQUAL
7300: IFFALSE 7310
// sHack := true ;
7302: LD_ADDR_EXP 29
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// if p3 = 10 then
7310: LD_VAR 0 3
7314: PUSH
7315: LD_INT 10
7317: EQUAL
7318: IFFALSE 7328
// sFire := true ;
7320: LD_ADDR_EXP 30
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
// if p3 = 11 then
7328: LD_VAR 0 3
7332: PUSH
7333: LD_INT 11
7335: EQUAL
7336: IFFALSE 7346
// sRefresh := true ;
7338: LD_ADDR_EXP 31
7342: PUSH
7343: LD_INT 1
7345: ST_TO_ADDR
// if p3 = 12 then
7346: LD_VAR 0 3
7350: PUSH
7351: LD_INT 12
7353: EQUAL
7354: IFFALSE 7364
// sExp := true ;
7356: LD_ADDR_EXP 32
7360: PUSH
7361: LD_INT 1
7363: ST_TO_ADDR
// if p3 = 13 then
7364: LD_VAR 0 3
7368: PUSH
7369: LD_INT 13
7371: EQUAL
7372: IFFALSE 7382
// sDepot := true ;
7374: LD_ADDR_EXP 33
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// if p3 = 14 then
7382: LD_VAR 0 3
7386: PUSH
7387: LD_INT 14
7389: EQUAL
7390: IFFALSE 7400
// sFlag := true ;
7392: LD_ADDR_EXP 34
7396: PUSH
7397: LD_INT 1
7399: ST_TO_ADDR
// if p3 = 15 then
7400: LD_VAR 0 3
7404: PUSH
7405: LD_INT 15
7407: EQUAL
7408: IFFALSE 7418
// sKamikadze := true ;
7410: LD_ADDR_EXP 42
7414: PUSH
7415: LD_INT 1
7417: ST_TO_ADDR
// if p3 = 16 then
7418: LD_VAR 0 3
7422: PUSH
7423: LD_INT 16
7425: EQUAL
7426: IFFALSE 7436
// sTroll := true ;
7428: LD_ADDR_EXP 43
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if p3 = 17 then
7436: LD_VAR 0 3
7440: PUSH
7441: LD_INT 17
7443: EQUAL
7444: IFFALSE 7454
// sSlow := true ;
7446: LD_ADDR_EXP 44
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// if p3 = 18 then
7454: LD_VAR 0 3
7458: PUSH
7459: LD_INT 18
7461: EQUAL
7462: IFFALSE 7472
// sLack := true ;
7464: LD_ADDR_EXP 45
7468: PUSH
7469: LD_INT 1
7471: ST_TO_ADDR
// if p3 = 19 then
7472: LD_VAR 0 3
7476: PUSH
7477: LD_INT 19
7479: EQUAL
7480: IFFALSE 7490
// sTank := true ;
7482: LD_ADDR_EXP 47
7486: PUSH
7487: LD_INT 1
7489: ST_TO_ADDR
// if p3 = 20 then
7490: LD_VAR 0 3
7494: PUSH
7495: LD_INT 20
7497: EQUAL
7498: IFFALSE 7508
// sRemote := true ;
7500: LD_ADDR_EXP 48
7504: PUSH
7505: LD_INT 1
7507: ST_TO_ADDR
// if p3 = 21 then
7508: LD_VAR 0 3
7512: PUSH
7513: LD_INT 21
7515: EQUAL
7516: IFFALSE 7526
// sPowell := true ;
7518: LD_ADDR_EXP 49
7522: PUSH
7523: LD_INT 1
7525: ST_TO_ADDR
// if p3 = 22 then
7526: LD_VAR 0 3
7530: PUSH
7531: LD_INT 22
7533: EQUAL
7534: IFFALSE 7544
// sTeleport := true ;
7536: LD_ADDR_EXP 52
7540: PUSH
7541: LD_INT 1
7543: ST_TO_ADDR
// if p3 = 23 then
7544: LD_VAR 0 3
7548: PUSH
7549: LD_INT 23
7551: EQUAL
7552: IFFALSE 7562
// sOilTower := true ;
7554: LD_ADDR_EXP 54
7558: PUSH
7559: LD_INT 1
7561: ST_TO_ADDR
// if p3 = 24 then
7562: LD_VAR 0 3
7566: PUSH
7567: LD_INT 24
7569: EQUAL
7570: IFFALSE 7580
// sShovel := true ;
7572: LD_ADDR_EXP 55
7576: PUSH
7577: LD_INT 1
7579: ST_TO_ADDR
// if p3 = 25 then
7580: LD_VAR 0 3
7584: PUSH
7585: LD_INT 25
7587: EQUAL
7588: IFFALSE 7598
// sSheik := true ;
7590: LD_ADDR_EXP 56
7594: PUSH
7595: LD_INT 1
7597: ST_TO_ADDR
// if p3 = 26 then
7598: LD_VAR 0 3
7602: PUSH
7603: LD_INT 26
7605: EQUAL
7606: IFFALSE 7616
// sEarthquake := true ;
7608: LD_ADDR_EXP 58
7612: PUSH
7613: LD_INT 1
7615: ST_TO_ADDR
// if p3 = 27 then
7616: LD_VAR 0 3
7620: PUSH
7621: LD_INT 27
7623: EQUAL
7624: IFFALSE 7634
// sAI := true ;
7626: LD_ADDR_EXP 59
7630: PUSH
7631: LD_INT 1
7633: ST_TO_ADDR
// if p3 = 28 then
7634: LD_VAR 0 3
7638: PUSH
7639: LD_INT 28
7641: EQUAL
7642: IFFALSE 7652
// sCargo := true ;
7644: LD_ADDR_EXP 62
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// if p3 = 29 then
7652: LD_VAR 0 3
7656: PUSH
7657: LD_INT 29
7659: EQUAL
7660: IFFALSE 7670
// sDLaser := true ;
7662: LD_ADDR_EXP 63
7666: PUSH
7667: LD_INT 1
7669: ST_TO_ADDR
// if p3 = 30 then
7670: LD_VAR 0 3
7674: PUSH
7675: LD_INT 30
7677: EQUAL
7678: IFFALSE 7688
// sExchange := true ;
7680: LD_ADDR_EXP 64
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// if p3 = 31 then
7688: LD_VAR 0 3
7692: PUSH
7693: LD_INT 31
7695: EQUAL
7696: IFFALSE 7706
// sFac := true ;
7698: LD_ADDR_EXP 65
7702: PUSH
7703: LD_INT 1
7705: ST_TO_ADDR
// if p3 = 32 then
7706: LD_VAR 0 3
7710: PUSH
7711: LD_INT 32
7713: EQUAL
7714: IFFALSE 7724
// sPower := true ;
7716: LD_ADDR_EXP 66
7720: PUSH
7721: LD_INT 1
7723: ST_TO_ADDR
// if p3 = 33 then
7724: LD_VAR 0 3
7728: PUSH
7729: LD_INT 33
7731: EQUAL
7732: IFFALSE 7742
// sRandom := true ;
7734: LD_ADDR_EXP 67
7738: PUSH
7739: LD_INT 1
7741: ST_TO_ADDR
// if p3 = 34 then
7742: LD_VAR 0 3
7746: PUSH
7747: LD_INT 34
7749: EQUAL
7750: IFFALSE 7760
// sShield := true ;
7752: LD_ADDR_EXP 68
7756: PUSH
7757: LD_INT 1
7759: ST_TO_ADDR
// if p3 = 35 then
7760: LD_VAR 0 3
7764: PUSH
7765: LD_INT 35
7767: EQUAL
7768: IFFALSE 7778
// sTime := true ;
7770: LD_ADDR_EXP 69
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// if p3 = 36 then
7778: LD_VAR 0 3
7782: PUSH
7783: LD_INT 36
7785: EQUAL
7786: IFFALSE 7796
// sTools := true ;
7788: LD_ADDR_EXP 70
7792: PUSH
7793: LD_INT 1
7795: ST_TO_ADDR
// if p3 = 101 then
7796: LD_VAR 0 3
7800: PUSH
7801: LD_INT 101
7803: EQUAL
7804: IFFALSE 7814
// sSold := true ;
7806: LD_ADDR_EXP 35
7810: PUSH
7811: LD_INT 1
7813: ST_TO_ADDR
// if p3 = 102 then
7814: LD_VAR 0 3
7818: PUSH
7819: LD_INT 102
7821: EQUAL
7822: IFFALSE 7832
// sDiff := true ;
7824: LD_ADDR_EXP 36
7828: PUSH
7829: LD_INT 1
7831: ST_TO_ADDR
// if p3 = 103 then
7832: LD_VAR 0 3
7836: PUSH
7837: LD_INT 103
7839: EQUAL
7840: IFFALSE 7850
// sFog := true ;
7842: LD_ADDR_EXP 39
7846: PUSH
7847: LD_INT 1
7849: ST_TO_ADDR
// if p3 = 104 then
7850: LD_VAR 0 3
7854: PUSH
7855: LD_INT 104
7857: EQUAL
7858: IFFALSE 7868
// sReset := true ;
7860: LD_ADDR_EXP 40
7864: PUSH
7865: LD_INT 1
7867: ST_TO_ADDR
// if p3 = 105 then
7868: LD_VAR 0 3
7872: PUSH
7873: LD_INT 105
7875: EQUAL
7876: IFFALSE 7886
// sSun := true ;
7878: LD_ADDR_EXP 41
7882: PUSH
7883: LD_INT 1
7885: ST_TO_ADDR
// if p3 = 106 then
7886: LD_VAR 0 3
7890: PUSH
7891: LD_INT 106
7893: EQUAL
7894: IFFALSE 7904
// sTiger := true ;
7896: LD_ADDR_EXP 37
7900: PUSH
7901: LD_INT 1
7903: ST_TO_ADDR
// if p3 = 107 then
7904: LD_VAR 0 3
7908: PUSH
7909: LD_INT 107
7911: EQUAL
7912: IFFALSE 7922
// sBomb := true ;
7914: LD_ADDR_EXP 38
7918: PUSH
7919: LD_INT 1
7921: ST_TO_ADDR
// if p3 = 108 then
7922: LD_VAR 0 3
7926: PUSH
7927: LD_INT 108
7929: EQUAL
7930: IFFALSE 7940
// sWound := true ;
7932: LD_ADDR_EXP 46
7936: PUSH
7937: LD_INT 1
7939: ST_TO_ADDR
// if p3 = 109 then
7940: LD_VAR 0 3
7944: PUSH
7945: LD_INT 109
7947: EQUAL
7948: IFFALSE 7958
// sBetray := true ;
7950: LD_ADDR_EXP 50
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// if p3 = 110 then
7958: LD_VAR 0 3
7962: PUSH
7963: LD_INT 110
7965: EQUAL
7966: IFFALSE 7976
// sContamin := true ;
7968: LD_ADDR_EXP 51
7972: PUSH
7973: LD_INT 1
7975: ST_TO_ADDR
// if p3 = 111 then
7976: LD_VAR 0 3
7980: PUSH
7981: LD_INT 111
7983: EQUAL
7984: IFFALSE 7994
// sOil := true ;
7986: LD_ADDR_EXP 53
7990: PUSH
7991: LD_INT 1
7993: ST_TO_ADDR
// if p3 = 112 then
7994: LD_VAR 0 3
7998: PUSH
7999: LD_INT 112
8001: EQUAL
8002: IFFALSE 8012
// sStu := true ;
8004: LD_ADDR_EXP 57
8008: PUSH
8009: LD_INT 1
8011: ST_TO_ADDR
// if p3 = 113 then
8012: LD_VAR 0 3
8016: PUSH
8017: LD_INT 113
8019: EQUAL
8020: IFFALSE 8030
// sBazooka := true ;
8022: LD_ADDR_EXP 60
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// if p3 = 114 then
8030: LD_VAR 0 3
8034: PUSH
8035: LD_INT 114
8037: EQUAL
8038: IFFALSE 8048
// sMortar := true ;
8040: LD_ADDR_EXP 61
8044: PUSH
8045: LD_INT 1
8047: ST_TO_ADDR
// if p3 = 115 then
8048: LD_VAR 0 3
8052: PUSH
8053: LD_INT 115
8055: EQUAL
8056: IFFALSE 8066
// sRanger := true ;
8058: LD_ADDR_EXP 71
8062: PUSH
8063: LD_INT 1
8065: ST_TO_ADDR
// if p3 = 116 then
8066: LD_VAR 0 3
8070: PUSH
8071: LD_INT 116
8073: EQUAL
8074: IFFALSE 8084
// sComputer := true ;
8076: LD_ADDR_EXP 72
8080: PUSH
8081: LD_INT 1
8083: ST_TO_ADDR
// if p3 = 117 then
8084: LD_VAR 0 3
8088: PUSH
8089: LD_INT 117
8091: EQUAL
8092: IFFALSE 8102
// s30 := true ;
8094: LD_ADDR_EXP 73
8098: PUSH
8099: LD_INT 1
8101: ST_TO_ADDR
// if p3 = 118 then
8102: LD_VAR 0 3
8106: PUSH
8107: LD_INT 118
8109: EQUAL
8110: IFFALSE 8120
// s60 := true ;
8112: LD_ADDR_EXP 74
8116: PUSH
8117: LD_INT 1
8119: ST_TO_ADDR
// end ; if p2 = 101 then
8120: LD_VAR 0 2
8124: PUSH
8125: LD_INT 101
8127: EQUAL
8128: IFFALSE 8256
// begin case p3 of 1 :
8130: LD_VAR 0 3
8134: PUSH
8135: LD_INT 1
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8150
8143: POP
// hHackUnlimitedResources ; 2 :
8144: CALL 20354 0 0
8148: GO 8256
8150: LD_INT 2
8152: DOUBLE
8153: EQUAL
8154: IFTRUE 8158
8156: GO 8165
8158: POP
// hHackSetLevel10 ; 3 :
8159: CALL 20487 0 0
8163: GO 8256
8165: LD_INT 3
8167: DOUBLE
8168: EQUAL
8169: IFTRUE 8173
8171: GO 8180
8173: POP
// hHackSetLevel10YourUnits ; 4 :
8174: CALL 20572 0 0
8178: GO 8256
8180: LD_INT 4
8182: DOUBLE
8183: EQUAL
8184: IFTRUE 8188
8186: GO 8195
8188: POP
// hHackInvincible ; 5 :
8189: CALL 21020 0 0
8193: GO 8256
8195: LD_INT 5
8197: DOUBLE
8198: EQUAL
8199: IFTRUE 8203
8201: GO 8210
8203: POP
// hHackInvisible ; 6 :
8204: CALL 21131 0 0
8208: GO 8256
8210: LD_INT 6
8212: DOUBLE
8213: EQUAL
8214: IFTRUE 8218
8216: GO 8225
8218: POP
// hHackChangeYourSide ; 7 :
8219: CALL 21188 0 0
8223: GO 8256
8225: LD_INT 7
8227: DOUBLE
8228: EQUAL
8229: IFTRUE 8233
8231: GO 8240
8233: POP
// hHackChangeUnitSide ; 8 :
8234: CALL 21230 0 0
8238: GO 8256
8240: LD_INT 8
8242: DOUBLE
8243: EQUAL
8244: IFTRUE 8248
8246: GO 8255
8248: POP
// hHackFog ; end ;
8249: CALL 21331 0 0
8253: GO 8256
8255: POP
// end ; end ;
8256: LD_VAR 0 7
8260: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8261: GO 8263
8263: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8264: LD_STRING initStreamRollete();
8266: PPUSH
8267: CALL_OW 559
// InitStreamMode ;
8271: CALL 8283 0 0
// DefineStreamItems ( false ) ;
8275: LD_INT 0
8277: PPUSH
8278: CALL 8747 0 1
// end ;
8282: END
// function InitStreamMode ; begin
8283: LD_INT 0
8285: PPUSH
// streamModeActive := false ;
8286: LD_ADDR_EXP 18
8290: PUSH
8291: LD_INT 0
8293: ST_TO_ADDR
// normalCounter := 36 ;
8294: LD_ADDR_EXP 19
8298: PUSH
8299: LD_INT 36
8301: ST_TO_ADDR
// hardcoreCounter := 18 ;
8302: LD_ADDR_EXP 20
8306: PUSH
8307: LD_INT 18
8309: ST_TO_ADDR
// sRocket := false ;
8310: LD_ADDR_EXP 23
8314: PUSH
8315: LD_INT 0
8317: ST_TO_ADDR
// sSpeed := false ;
8318: LD_ADDR_EXP 22
8322: PUSH
8323: LD_INT 0
8325: ST_TO_ADDR
// sEngine := false ;
8326: LD_ADDR_EXP 24
8330: PUSH
8331: LD_INT 0
8333: ST_TO_ADDR
// sSpec := false ;
8334: LD_ADDR_EXP 21
8338: PUSH
8339: LD_INT 0
8341: ST_TO_ADDR
// sLevel := false ;
8342: LD_ADDR_EXP 25
8346: PUSH
8347: LD_INT 0
8349: ST_TO_ADDR
// sArmoury := false ;
8350: LD_ADDR_EXP 26
8354: PUSH
8355: LD_INT 0
8357: ST_TO_ADDR
// sRadar := false ;
8358: LD_ADDR_EXP 27
8362: PUSH
8363: LD_INT 0
8365: ST_TO_ADDR
// sBunker := false ;
8366: LD_ADDR_EXP 28
8370: PUSH
8371: LD_INT 0
8373: ST_TO_ADDR
// sHack := false ;
8374: LD_ADDR_EXP 29
8378: PUSH
8379: LD_INT 0
8381: ST_TO_ADDR
// sFire := false ;
8382: LD_ADDR_EXP 30
8386: PUSH
8387: LD_INT 0
8389: ST_TO_ADDR
// sRefresh := false ;
8390: LD_ADDR_EXP 31
8394: PUSH
8395: LD_INT 0
8397: ST_TO_ADDR
// sExp := false ;
8398: LD_ADDR_EXP 32
8402: PUSH
8403: LD_INT 0
8405: ST_TO_ADDR
// sDepot := false ;
8406: LD_ADDR_EXP 33
8410: PUSH
8411: LD_INT 0
8413: ST_TO_ADDR
// sFlag := false ;
8414: LD_ADDR_EXP 34
8418: PUSH
8419: LD_INT 0
8421: ST_TO_ADDR
// sKamikadze := false ;
8422: LD_ADDR_EXP 42
8426: PUSH
8427: LD_INT 0
8429: ST_TO_ADDR
// sTroll := false ;
8430: LD_ADDR_EXP 43
8434: PUSH
8435: LD_INT 0
8437: ST_TO_ADDR
// sSlow := false ;
8438: LD_ADDR_EXP 44
8442: PUSH
8443: LD_INT 0
8445: ST_TO_ADDR
// sLack := false ;
8446: LD_ADDR_EXP 45
8450: PUSH
8451: LD_INT 0
8453: ST_TO_ADDR
// sTank := false ;
8454: LD_ADDR_EXP 47
8458: PUSH
8459: LD_INT 0
8461: ST_TO_ADDR
// sRemote := false ;
8462: LD_ADDR_EXP 48
8466: PUSH
8467: LD_INT 0
8469: ST_TO_ADDR
// sPowell := false ;
8470: LD_ADDR_EXP 49
8474: PUSH
8475: LD_INT 0
8477: ST_TO_ADDR
// sTeleport := false ;
8478: LD_ADDR_EXP 52
8482: PUSH
8483: LD_INT 0
8485: ST_TO_ADDR
// sOilTower := false ;
8486: LD_ADDR_EXP 54
8490: PUSH
8491: LD_INT 0
8493: ST_TO_ADDR
// sShovel := false ;
8494: LD_ADDR_EXP 55
8498: PUSH
8499: LD_INT 0
8501: ST_TO_ADDR
// sSheik := false ;
8502: LD_ADDR_EXP 56
8506: PUSH
8507: LD_INT 0
8509: ST_TO_ADDR
// sEarthquake := false ;
8510: LD_ADDR_EXP 58
8514: PUSH
8515: LD_INT 0
8517: ST_TO_ADDR
// sAI := false ;
8518: LD_ADDR_EXP 59
8522: PUSH
8523: LD_INT 0
8525: ST_TO_ADDR
// sCargo := false ;
8526: LD_ADDR_EXP 62
8530: PUSH
8531: LD_INT 0
8533: ST_TO_ADDR
// sDLaser := false ;
8534: LD_ADDR_EXP 63
8538: PUSH
8539: LD_INT 0
8541: ST_TO_ADDR
// sExchange := false ;
8542: LD_ADDR_EXP 64
8546: PUSH
8547: LD_INT 0
8549: ST_TO_ADDR
// sFac := false ;
8550: LD_ADDR_EXP 65
8554: PUSH
8555: LD_INT 0
8557: ST_TO_ADDR
// sPower := false ;
8558: LD_ADDR_EXP 66
8562: PUSH
8563: LD_INT 0
8565: ST_TO_ADDR
// sRandom := false ;
8566: LD_ADDR_EXP 67
8570: PUSH
8571: LD_INT 0
8573: ST_TO_ADDR
// sShield := false ;
8574: LD_ADDR_EXP 68
8578: PUSH
8579: LD_INT 0
8581: ST_TO_ADDR
// sTime := false ;
8582: LD_ADDR_EXP 69
8586: PUSH
8587: LD_INT 0
8589: ST_TO_ADDR
// sTools := false ;
8590: LD_ADDR_EXP 70
8594: PUSH
8595: LD_INT 0
8597: ST_TO_ADDR
// sSold := false ;
8598: LD_ADDR_EXP 35
8602: PUSH
8603: LD_INT 0
8605: ST_TO_ADDR
// sDiff := false ;
8606: LD_ADDR_EXP 36
8610: PUSH
8611: LD_INT 0
8613: ST_TO_ADDR
// sFog := false ;
8614: LD_ADDR_EXP 39
8618: PUSH
8619: LD_INT 0
8621: ST_TO_ADDR
// sReset := false ;
8622: LD_ADDR_EXP 40
8626: PUSH
8627: LD_INT 0
8629: ST_TO_ADDR
// sSun := false ;
8630: LD_ADDR_EXP 41
8634: PUSH
8635: LD_INT 0
8637: ST_TO_ADDR
// sTiger := false ;
8638: LD_ADDR_EXP 37
8642: PUSH
8643: LD_INT 0
8645: ST_TO_ADDR
// sBomb := false ;
8646: LD_ADDR_EXP 38
8650: PUSH
8651: LD_INT 0
8653: ST_TO_ADDR
// sWound := false ;
8654: LD_ADDR_EXP 46
8658: PUSH
8659: LD_INT 0
8661: ST_TO_ADDR
// sBetray := false ;
8662: LD_ADDR_EXP 50
8666: PUSH
8667: LD_INT 0
8669: ST_TO_ADDR
// sContamin := false ;
8670: LD_ADDR_EXP 51
8674: PUSH
8675: LD_INT 0
8677: ST_TO_ADDR
// sOil := false ;
8678: LD_ADDR_EXP 53
8682: PUSH
8683: LD_INT 0
8685: ST_TO_ADDR
// sStu := false ;
8686: LD_ADDR_EXP 57
8690: PUSH
8691: LD_INT 0
8693: ST_TO_ADDR
// sBazooka := false ;
8694: LD_ADDR_EXP 60
8698: PUSH
8699: LD_INT 0
8701: ST_TO_ADDR
// sMortar := false ;
8702: LD_ADDR_EXP 61
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// sRanger := false ;
8710: LD_ADDR_EXP 71
8714: PUSH
8715: LD_INT 0
8717: ST_TO_ADDR
// sComputer := false ;
8718: LD_ADDR_EXP 72
8722: PUSH
8723: LD_INT 0
8725: ST_TO_ADDR
// s30 := false ;
8726: LD_ADDR_EXP 73
8730: PUSH
8731: LD_INT 0
8733: ST_TO_ADDR
// s60 := false ;
8734: LD_ADDR_EXP 74
8738: PUSH
8739: LD_INT 0
8741: ST_TO_ADDR
// end ;
8742: LD_VAR 0 1
8746: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8747: LD_INT 0
8749: PPUSH
8750: PPUSH
8751: PPUSH
8752: PPUSH
8753: PPUSH
8754: PPUSH
8755: PPUSH
// result := [ ] ;
8756: LD_ADDR_VAR 0 2
8760: PUSH
8761: EMPTY
8762: ST_TO_ADDR
// if campaign_id = 1 then
8763: LD_OWVAR 69
8767: PUSH
8768: LD_INT 1
8770: EQUAL
8771: IFFALSE 11937
// begin case mission_number of 1 :
8773: LD_OWVAR 70
8777: PUSH
8778: LD_INT 1
8780: DOUBLE
8781: EQUAL
8782: IFTRUE 8786
8784: GO 8862
8786: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8787: LD_ADDR_VAR 0 2
8791: PUSH
8792: LD_INT 2
8794: PUSH
8795: LD_INT 4
8797: PUSH
8798: LD_INT 11
8800: PUSH
8801: LD_INT 12
8803: PUSH
8804: LD_INT 15
8806: PUSH
8807: LD_INT 16
8809: PUSH
8810: LD_INT 22
8812: PUSH
8813: LD_INT 23
8815: PUSH
8816: LD_INT 26
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 101
8832: PUSH
8833: LD_INT 102
8835: PUSH
8836: LD_INT 106
8838: PUSH
8839: LD_INT 116
8841: PUSH
8842: LD_INT 117
8844: PUSH
8845: LD_INT 118
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: ST_TO_ADDR
8860: GO 11935
8862: LD_INT 2
8864: DOUBLE
8865: EQUAL
8866: IFTRUE 8870
8868: GO 8954
8870: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8871: LD_ADDR_VAR 0 2
8875: PUSH
8876: LD_INT 2
8878: PUSH
8879: LD_INT 4
8881: PUSH
8882: LD_INT 11
8884: PUSH
8885: LD_INT 12
8887: PUSH
8888: LD_INT 15
8890: PUSH
8891: LD_INT 16
8893: PUSH
8894: LD_INT 22
8896: PUSH
8897: LD_INT 23
8899: PUSH
8900: LD_INT 26
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 101
8916: PUSH
8917: LD_INT 102
8919: PUSH
8920: LD_INT 105
8922: PUSH
8923: LD_INT 106
8925: PUSH
8926: LD_INT 108
8928: PUSH
8929: LD_INT 116
8931: PUSH
8932: LD_INT 117
8934: PUSH
8935: LD_INT 118
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: ST_TO_ADDR
8952: GO 11935
8954: LD_INT 3
8956: DOUBLE
8957: EQUAL
8958: IFTRUE 8962
8960: GO 9050
8962: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8963: LD_ADDR_VAR 0 2
8967: PUSH
8968: LD_INT 2
8970: PUSH
8971: LD_INT 4
8973: PUSH
8974: LD_INT 5
8976: PUSH
8977: LD_INT 11
8979: PUSH
8980: LD_INT 12
8982: PUSH
8983: LD_INT 15
8985: PUSH
8986: LD_INT 16
8988: PUSH
8989: LD_INT 22
8991: PUSH
8992: LD_INT 26
8994: PUSH
8995: LD_INT 36
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 101
9012: PUSH
9013: LD_INT 102
9015: PUSH
9016: LD_INT 105
9018: PUSH
9019: LD_INT 106
9021: PUSH
9022: LD_INT 108
9024: PUSH
9025: LD_INT 116
9027: PUSH
9028: LD_INT 117
9030: PUSH
9031: LD_INT 118
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: ST_TO_ADDR
9048: GO 11935
9050: LD_INT 4
9052: DOUBLE
9053: EQUAL
9054: IFTRUE 9058
9056: GO 9154
9058: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9059: LD_ADDR_VAR 0 2
9063: PUSH
9064: LD_INT 2
9066: PUSH
9067: LD_INT 4
9069: PUSH
9070: LD_INT 5
9072: PUSH
9073: LD_INT 8
9075: PUSH
9076: LD_INT 11
9078: PUSH
9079: LD_INT 12
9081: PUSH
9082: LD_INT 15
9084: PUSH
9085: LD_INT 16
9087: PUSH
9088: LD_INT 22
9090: PUSH
9091: LD_INT 23
9093: PUSH
9094: LD_INT 26
9096: PUSH
9097: LD_INT 36
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 101
9116: PUSH
9117: LD_INT 102
9119: PUSH
9120: LD_INT 105
9122: PUSH
9123: LD_INT 106
9125: PUSH
9126: LD_INT 108
9128: PUSH
9129: LD_INT 116
9131: PUSH
9132: LD_INT 117
9134: PUSH
9135: LD_INT 118
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: ST_TO_ADDR
9152: GO 11935
9154: LD_INT 5
9156: DOUBLE
9157: EQUAL
9158: IFTRUE 9162
9160: GO 9274
9162: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9163: LD_ADDR_VAR 0 2
9167: PUSH
9168: LD_INT 2
9170: PUSH
9171: LD_INT 4
9173: PUSH
9174: LD_INT 5
9176: PUSH
9177: LD_INT 6
9179: PUSH
9180: LD_INT 8
9182: PUSH
9183: LD_INT 11
9185: PUSH
9186: LD_INT 12
9188: PUSH
9189: LD_INT 15
9191: PUSH
9192: LD_INT 16
9194: PUSH
9195: LD_INT 22
9197: PUSH
9198: LD_INT 23
9200: PUSH
9201: LD_INT 25
9203: PUSH
9204: LD_INT 26
9206: PUSH
9207: LD_INT 36
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 101
9228: PUSH
9229: LD_INT 102
9231: PUSH
9232: LD_INT 105
9234: PUSH
9235: LD_INT 106
9237: PUSH
9238: LD_INT 108
9240: PUSH
9241: LD_INT 109
9243: PUSH
9244: LD_INT 112
9246: PUSH
9247: LD_INT 116
9249: PUSH
9250: LD_INT 117
9252: PUSH
9253: LD_INT 118
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: ST_TO_ADDR
9272: GO 11935
9274: LD_INT 6
9276: DOUBLE
9277: EQUAL
9278: IFTRUE 9282
9280: GO 9414
9282: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9283: LD_ADDR_VAR 0 2
9287: PUSH
9288: LD_INT 2
9290: PUSH
9291: LD_INT 4
9293: PUSH
9294: LD_INT 5
9296: PUSH
9297: LD_INT 6
9299: PUSH
9300: LD_INT 8
9302: PUSH
9303: LD_INT 11
9305: PUSH
9306: LD_INT 12
9308: PUSH
9309: LD_INT 15
9311: PUSH
9312: LD_INT 16
9314: PUSH
9315: LD_INT 20
9317: PUSH
9318: LD_INT 21
9320: PUSH
9321: LD_INT 22
9323: PUSH
9324: LD_INT 23
9326: PUSH
9327: LD_INT 25
9329: PUSH
9330: LD_INT 26
9332: PUSH
9333: LD_INT 30
9335: PUSH
9336: LD_INT 31
9338: PUSH
9339: LD_INT 32
9341: PUSH
9342: LD_INT 36
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 101
9368: PUSH
9369: LD_INT 102
9371: PUSH
9372: LD_INT 105
9374: PUSH
9375: LD_INT 106
9377: PUSH
9378: LD_INT 108
9380: PUSH
9381: LD_INT 109
9383: PUSH
9384: LD_INT 112
9386: PUSH
9387: LD_INT 116
9389: PUSH
9390: LD_INT 117
9392: PUSH
9393: LD_INT 118
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: ST_TO_ADDR
9412: GO 11935
9414: LD_INT 7
9416: DOUBLE
9417: EQUAL
9418: IFTRUE 9422
9420: GO 9534
9422: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9423: LD_ADDR_VAR 0 2
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: LD_INT 4
9433: PUSH
9434: LD_INT 5
9436: PUSH
9437: LD_INT 7
9439: PUSH
9440: LD_INT 11
9442: PUSH
9443: LD_INT 12
9445: PUSH
9446: LD_INT 15
9448: PUSH
9449: LD_INT 16
9451: PUSH
9452: LD_INT 20
9454: PUSH
9455: LD_INT 21
9457: PUSH
9458: LD_INT 22
9460: PUSH
9461: LD_INT 23
9463: PUSH
9464: LD_INT 25
9466: PUSH
9467: LD_INT 26
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 101
9488: PUSH
9489: LD_INT 102
9491: PUSH
9492: LD_INT 103
9494: PUSH
9495: LD_INT 105
9497: PUSH
9498: LD_INT 106
9500: PUSH
9501: LD_INT 108
9503: PUSH
9504: LD_INT 112
9506: PUSH
9507: LD_INT 116
9509: PUSH
9510: LD_INT 117
9512: PUSH
9513: LD_INT 118
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: ST_TO_ADDR
9532: GO 11935
9534: LD_INT 8
9536: DOUBLE
9537: EQUAL
9538: IFTRUE 9542
9540: GO 9682
9542: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 2
9550: PUSH
9551: LD_INT 4
9553: PUSH
9554: LD_INT 5
9556: PUSH
9557: LD_INT 6
9559: PUSH
9560: LD_INT 7
9562: PUSH
9563: LD_INT 8
9565: PUSH
9566: LD_INT 11
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: LD_INT 15
9574: PUSH
9575: LD_INT 16
9577: PUSH
9578: LD_INT 20
9580: PUSH
9581: LD_INT 21
9583: PUSH
9584: LD_INT 22
9586: PUSH
9587: LD_INT 23
9589: PUSH
9590: LD_INT 25
9592: PUSH
9593: LD_INT 26
9595: PUSH
9596: LD_INT 30
9598: PUSH
9599: LD_INT 31
9601: PUSH
9602: LD_INT 32
9604: PUSH
9605: LD_INT 36
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 101
9632: PUSH
9633: LD_INT 102
9635: PUSH
9636: LD_INT 103
9638: PUSH
9639: LD_INT 105
9641: PUSH
9642: LD_INT 106
9644: PUSH
9645: LD_INT 108
9647: PUSH
9648: LD_INT 109
9650: PUSH
9651: LD_INT 112
9653: PUSH
9654: LD_INT 116
9656: PUSH
9657: LD_INT 117
9659: PUSH
9660: LD_INT 118
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: ST_TO_ADDR
9680: GO 11935
9682: LD_INT 9
9684: DOUBLE
9685: EQUAL
9686: IFTRUE 9690
9688: GO 9838
9690: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9691: LD_ADDR_VAR 0 2
9695: PUSH
9696: LD_INT 2
9698: PUSH
9699: LD_INT 4
9701: PUSH
9702: LD_INT 5
9704: PUSH
9705: LD_INT 6
9707: PUSH
9708: LD_INT 7
9710: PUSH
9711: LD_INT 8
9713: PUSH
9714: LD_INT 11
9716: PUSH
9717: LD_INT 12
9719: PUSH
9720: LD_INT 15
9722: PUSH
9723: LD_INT 16
9725: PUSH
9726: LD_INT 20
9728: PUSH
9729: LD_INT 21
9731: PUSH
9732: LD_INT 22
9734: PUSH
9735: LD_INT 23
9737: PUSH
9738: LD_INT 25
9740: PUSH
9741: LD_INT 26
9743: PUSH
9744: LD_INT 28
9746: PUSH
9747: LD_INT 30
9749: PUSH
9750: LD_INT 31
9752: PUSH
9753: LD_INT 32
9755: PUSH
9756: LD_INT 36
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 101
9784: PUSH
9785: LD_INT 102
9787: PUSH
9788: LD_INT 103
9790: PUSH
9791: LD_INT 105
9793: PUSH
9794: LD_INT 106
9796: PUSH
9797: LD_INT 108
9799: PUSH
9800: LD_INT 109
9802: PUSH
9803: LD_INT 112
9805: PUSH
9806: LD_INT 114
9808: PUSH
9809: LD_INT 116
9811: PUSH
9812: LD_INT 117
9814: PUSH
9815: LD_INT 118
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: ST_TO_ADDR
9836: GO 11935
9838: LD_INT 10
9840: DOUBLE
9841: EQUAL
9842: IFTRUE 9846
9844: GO 10042
9846: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9847: LD_ADDR_VAR 0 2
9851: PUSH
9852: LD_INT 2
9854: PUSH
9855: LD_INT 4
9857: PUSH
9858: LD_INT 5
9860: PUSH
9861: LD_INT 6
9863: PUSH
9864: LD_INT 7
9866: PUSH
9867: LD_INT 8
9869: PUSH
9870: LD_INT 9
9872: PUSH
9873: LD_INT 10
9875: PUSH
9876: LD_INT 11
9878: PUSH
9879: LD_INT 12
9881: PUSH
9882: LD_INT 13
9884: PUSH
9885: LD_INT 14
9887: PUSH
9888: LD_INT 15
9890: PUSH
9891: LD_INT 16
9893: PUSH
9894: LD_INT 17
9896: PUSH
9897: LD_INT 18
9899: PUSH
9900: LD_INT 19
9902: PUSH
9903: LD_INT 20
9905: PUSH
9906: LD_INT 21
9908: PUSH
9909: LD_INT 22
9911: PUSH
9912: LD_INT 23
9914: PUSH
9915: LD_INT 24
9917: PUSH
9918: LD_INT 25
9920: PUSH
9921: LD_INT 26
9923: PUSH
9924: LD_INT 28
9926: PUSH
9927: LD_INT 30
9929: PUSH
9930: LD_INT 31
9932: PUSH
9933: LD_INT 32
9935: PUSH
9936: LD_INT 36
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 101
9972: PUSH
9973: LD_INT 102
9975: PUSH
9976: LD_INT 103
9978: PUSH
9979: LD_INT 104
9981: PUSH
9982: LD_INT 105
9984: PUSH
9985: LD_INT 106
9987: PUSH
9988: LD_INT 107
9990: PUSH
9991: LD_INT 108
9993: PUSH
9994: LD_INT 109
9996: PUSH
9997: LD_INT 110
9999: PUSH
10000: LD_INT 111
10002: PUSH
10003: LD_INT 112
10005: PUSH
10006: LD_INT 114
10008: PUSH
10009: LD_INT 116
10011: PUSH
10012: LD_INT 117
10014: PUSH
10015: LD_INT 118
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: ST_TO_ADDR
10040: GO 11935
10042: LD_INT 11
10044: DOUBLE
10045: EQUAL
10046: IFTRUE 10050
10048: GO 10254
10050: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10051: LD_ADDR_VAR 0 2
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: LD_INT 4
10064: PUSH
10065: LD_INT 5
10067: PUSH
10068: LD_INT 6
10070: PUSH
10071: LD_INT 7
10073: PUSH
10074: LD_INT 8
10076: PUSH
10077: LD_INT 9
10079: PUSH
10080: LD_INT 10
10082: PUSH
10083: LD_INT 11
10085: PUSH
10086: LD_INT 12
10088: PUSH
10089: LD_INT 13
10091: PUSH
10092: LD_INT 14
10094: PUSH
10095: LD_INT 15
10097: PUSH
10098: LD_INT 16
10100: PUSH
10101: LD_INT 17
10103: PUSH
10104: LD_INT 18
10106: PUSH
10107: LD_INT 19
10109: PUSH
10110: LD_INT 20
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 23
10121: PUSH
10122: LD_INT 24
10124: PUSH
10125: LD_INT 25
10127: PUSH
10128: LD_INT 26
10130: PUSH
10131: LD_INT 28
10133: PUSH
10134: LD_INT 30
10136: PUSH
10137: LD_INT 31
10139: PUSH
10140: LD_INT 32
10142: PUSH
10143: LD_INT 34
10145: PUSH
10146: LD_INT 36
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 101
10184: PUSH
10185: LD_INT 102
10187: PUSH
10188: LD_INT 103
10190: PUSH
10191: LD_INT 104
10193: PUSH
10194: LD_INT 105
10196: PUSH
10197: LD_INT 106
10199: PUSH
10200: LD_INT 107
10202: PUSH
10203: LD_INT 108
10205: PUSH
10206: LD_INT 109
10208: PUSH
10209: LD_INT 110
10211: PUSH
10212: LD_INT 111
10214: PUSH
10215: LD_INT 112
10217: PUSH
10218: LD_INT 114
10220: PUSH
10221: LD_INT 116
10223: PUSH
10224: LD_INT 117
10226: PUSH
10227: LD_INT 118
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: ST_TO_ADDR
10252: GO 11935
10254: LD_INT 12
10256: DOUBLE
10257: EQUAL
10258: IFTRUE 10262
10260: GO 10482
10262: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10263: LD_ADDR_VAR 0 2
10267: PUSH
10268: LD_INT 1
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: LD_INT 3
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: LD_INT 5
10282: PUSH
10283: LD_INT 6
10285: PUSH
10286: LD_INT 7
10288: PUSH
10289: LD_INT 8
10291: PUSH
10292: LD_INT 9
10294: PUSH
10295: LD_INT 10
10297: PUSH
10298: LD_INT 11
10300: PUSH
10301: LD_INT 12
10303: PUSH
10304: LD_INT 13
10306: PUSH
10307: LD_INT 14
10309: PUSH
10310: LD_INT 15
10312: PUSH
10313: LD_INT 16
10315: PUSH
10316: LD_INT 17
10318: PUSH
10319: LD_INT 18
10321: PUSH
10322: LD_INT 19
10324: PUSH
10325: LD_INT 20
10327: PUSH
10328: LD_INT 21
10330: PUSH
10331: LD_INT 22
10333: PUSH
10334: LD_INT 23
10336: PUSH
10337: LD_INT 24
10339: PUSH
10340: LD_INT 25
10342: PUSH
10343: LD_INT 26
10345: PUSH
10346: LD_INT 27
10348: PUSH
10349: LD_INT 28
10351: PUSH
10352: LD_INT 30
10354: PUSH
10355: LD_INT 31
10357: PUSH
10358: LD_INT 32
10360: PUSH
10361: LD_INT 33
10363: PUSH
10364: LD_INT 34
10366: PUSH
10367: LD_INT 36
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 101
10408: PUSH
10409: LD_INT 102
10411: PUSH
10412: LD_INT 103
10414: PUSH
10415: LD_INT 104
10417: PUSH
10418: LD_INT 105
10420: PUSH
10421: LD_INT 106
10423: PUSH
10424: LD_INT 107
10426: PUSH
10427: LD_INT 108
10429: PUSH
10430: LD_INT 109
10432: PUSH
10433: LD_INT 110
10435: PUSH
10436: LD_INT 111
10438: PUSH
10439: LD_INT 112
10441: PUSH
10442: LD_INT 113
10444: PUSH
10445: LD_INT 114
10447: PUSH
10448: LD_INT 116
10450: PUSH
10451: LD_INT 117
10453: PUSH
10454: LD_INT 118
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: ST_TO_ADDR
10480: GO 11935
10482: LD_INT 13
10484: DOUBLE
10485: EQUAL
10486: IFTRUE 10490
10488: GO 10698
10490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10491: LD_ADDR_VAR 0 2
10495: PUSH
10496: LD_INT 1
10498: PUSH
10499: LD_INT 2
10501: PUSH
10502: LD_INT 3
10504: PUSH
10505: LD_INT 4
10507: PUSH
10508: LD_INT 5
10510: PUSH
10511: LD_INT 8
10513: PUSH
10514: LD_INT 9
10516: PUSH
10517: LD_INT 10
10519: PUSH
10520: LD_INT 11
10522: PUSH
10523: LD_INT 12
10525: PUSH
10526: LD_INT 14
10528: PUSH
10529: LD_INT 15
10531: PUSH
10532: LD_INT 16
10534: PUSH
10535: LD_INT 17
10537: PUSH
10538: LD_INT 18
10540: PUSH
10541: LD_INT 19
10543: PUSH
10544: LD_INT 20
10546: PUSH
10547: LD_INT 21
10549: PUSH
10550: LD_INT 22
10552: PUSH
10553: LD_INT 23
10555: PUSH
10556: LD_INT 24
10558: PUSH
10559: LD_INT 25
10561: PUSH
10562: LD_INT 26
10564: PUSH
10565: LD_INT 27
10567: PUSH
10568: LD_INT 28
10570: PUSH
10571: LD_INT 30
10573: PUSH
10574: LD_INT 31
10576: PUSH
10577: LD_INT 32
10579: PUSH
10580: LD_INT 33
10582: PUSH
10583: LD_INT 34
10585: PUSH
10586: LD_INT 36
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 101
10624: PUSH
10625: LD_INT 102
10627: PUSH
10628: LD_INT 103
10630: PUSH
10631: LD_INT 104
10633: PUSH
10634: LD_INT 105
10636: PUSH
10637: LD_INT 106
10639: PUSH
10640: LD_INT 107
10642: PUSH
10643: LD_INT 108
10645: PUSH
10646: LD_INT 109
10648: PUSH
10649: LD_INT 110
10651: PUSH
10652: LD_INT 111
10654: PUSH
10655: LD_INT 112
10657: PUSH
10658: LD_INT 113
10660: PUSH
10661: LD_INT 114
10663: PUSH
10664: LD_INT 116
10666: PUSH
10667: LD_INT 117
10669: PUSH
10670: LD_INT 118
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: ST_TO_ADDR
10696: GO 11935
10698: LD_INT 14
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10930
10706: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: LD_INT 3
10720: PUSH
10721: LD_INT 4
10723: PUSH
10724: LD_INT 5
10726: PUSH
10727: LD_INT 6
10729: PUSH
10730: LD_INT 7
10732: PUSH
10733: LD_INT 8
10735: PUSH
10736: LD_INT 9
10738: PUSH
10739: LD_INT 10
10741: PUSH
10742: LD_INT 11
10744: PUSH
10745: LD_INT 12
10747: PUSH
10748: LD_INT 13
10750: PUSH
10751: LD_INT 14
10753: PUSH
10754: LD_INT 15
10756: PUSH
10757: LD_INT 16
10759: PUSH
10760: LD_INT 17
10762: PUSH
10763: LD_INT 18
10765: PUSH
10766: LD_INT 19
10768: PUSH
10769: LD_INT 20
10771: PUSH
10772: LD_INT 21
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_INT 23
10780: PUSH
10781: LD_INT 24
10783: PUSH
10784: LD_INT 25
10786: PUSH
10787: LD_INT 26
10789: PUSH
10790: LD_INT 27
10792: PUSH
10793: LD_INT 28
10795: PUSH
10796: LD_INT 29
10798: PUSH
10799: LD_INT 30
10801: PUSH
10802: LD_INT 31
10804: PUSH
10805: LD_INT 32
10807: PUSH
10808: LD_INT 33
10810: PUSH
10811: LD_INT 34
10813: PUSH
10814: LD_INT 36
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 101
10856: PUSH
10857: LD_INT 102
10859: PUSH
10860: LD_INT 103
10862: PUSH
10863: LD_INT 104
10865: PUSH
10866: LD_INT 105
10868: PUSH
10869: LD_INT 106
10871: PUSH
10872: LD_INT 107
10874: PUSH
10875: LD_INT 108
10877: PUSH
10878: LD_INT 109
10880: PUSH
10881: LD_INT 110
10883: PUSH
10884: LD_INT 111
10886: PUSH
10887: LD_INT 112
10889: PUSH
10890: LD_INT 113
10892: PUSH
10893: LD_INT 114
10895: PUSH
10896: LD_INT 116
10898: PUSH
10899: LD_INT 117
10901: PUSH
10902: LD_INT 118
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: ST_TO_ADDR
10928: GO 11935
10930: LD_INT 15
10932: DOUBLE
10933: EQUAL
10934: IFTRUE 10938
10936: GO 11162
10938: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10939: LD_ADDR_VAR 0 2
10943: PUSH
10944: LD_INT 1
10946: PUSH
10947: LD_INT 2
10949: PUSH
10950: LD_INT 3
10952: PUSH
10953: LD_INT 4
10955: PUSH
10956: LD_INT 5
10958: PUSH
10959: LD_INT 6
10961: PUSH
10962: LD_INT 7
10964: PUSH
10965: LD_INT 8
10967: PUSH
10968: LD_INT 9
10970: PUSH
10971: LD_INT 10
10973: PUSH
10974: LD_INT 11
10976: PUSH
10977: LD_INT 12
10979: PUSH
10980: LD_INT 13
10982: PUSH
10983: LD_INT 14
10985: PUSH
10986: LD_INT 15
10988: PUSH
10989: LD_INT 16
10991: PUSH
10992: LD_INT 17
10994: PUSH
10995: LD_INT 18
10997: PUSH
10998: LD_INT 19
11000: PUSH
11001: LD_INT 20
11003: PUSH
11004: LD_INT 21
11006: PUSH
11007: LD_INT 22
11009: PUSH
11010: LD_INT 23
11012: PUSH
11013: LD_INT 24
11015: PUSH
11016: LD_INT 25
11018: PUSH
11019: LD_INT 26
11021: PUSH
11022: LD_INT 27
11024: PUSH
11025: LD_INT 28
11027: PUSH
11028: LD_INT 29
11030: PUSH
11031: LD_INT 30
11033: PUSH
11034: LD_INT 31
11036: PUSH
11037: LD_INT 32
11039: PUSH
11040: LD_INT 33
11042: PUSH
11043: LD_INT 34
11045: PUSH
11046: LD_INT 36
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 101
11088: PUSH
11089: LD_INT 102
11091: PUSH
11092: LD_INT 103
11094: PUSH
11095: LD_INT 104
11097: PUSH
11098: LD_INT 105
11100: PUSH
11101: LD_INT 106
11103: PUSH
11104: LD_INT 107
11106: PUSH
11107: LD_INT 108
11109: PUSH
11110: LD_INT 109
11112: PUSH
11113: LD_INT 110
11115: PUSH
11116: LD_INT 111
11118: PUSH
11119: LD_INT 112
11121: PUSH
11122: LD_INT 113
11124: PUSH
11125: LD_INT 114
11127: PUSH
11128: LD_INT 116
11130: PUSH
11131: LD_INT 117
11133: PUSH
11134: LD_INT 118
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: ST_TO_ADDR
11160: GO 11935
11162: LD_INT 16
11164: DOUBLE
11165: EQUAL
11166: IFTRUE 11170
11168: GO 11306
11170: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11171: LD_ADDR_VAR 0 2
11175: PUSH
11176: LD_INT 2
11178: PUSH
11179: LD_INT 4
11181: PUSH
11182: LD_INT 5
11184: PUSH
11185: LD_INT 7
11187: PUSH
11188: LD_INT 11
11190: PUSH
11191: LD_INT 12
11193: PUSH
11194: LD_INT 15
11196: PUSH
11197: LD_INT 16
11199: PUSH
11200: LD_INT 20
11202: PUSH
11203: LD_INT 21
11205: PUSH
11206: LD_INT 22
11208: PUSH
11209: LD_INT 23
11211: PUSH
11212: LD_INT 25
11214: PUSH
11215: LD_INT 26
11217: PUSH
11218: LD_INT 30
11220: PUSH
11221: LD_INT 31
11223: PUSH
11224: LD_INT 32
11226: PUSH
11227: LD_INT 33
11229: PUSH
11230: LD_INT 34
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 101
11256: PUSH
11257: LD_INT 102
11259: PUSH
11260: LD_INT 103
11262: PUSH
11263: LD_INT 106
11265: PUSH
11266: LD_INT 108
11268: PUSH
11269: LD_INT 112
11271: PUSH
11272: LD_INT 113
11274: PUSH
11275: LD_INT 114
11277: PUSH
11278: LD_INT 116
11280: PUSH
11281: LD_INT 117
11283: PUSH
11284: LD_INT 118
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: ST_TO_ADDR
11304: GO 11935
11306: LD_INT 17
11308: DOUBLE
11309: EQUAL
11310: IFTRUE 11314
11312: GO 11538
11314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11315: LD_ADDR_VAR 0 2
11319: PUSH
11320: LD_INT 1
11322: PUSH
11323: LD_INT 2
11325: PUSH
11326: LD_INT 3
11328: PUSH
11329: LD_INT 4
11331: PUSH
11332: LD_INT 5
11334: PUSH
11335: LD_INT 6
11337: PUSH
11338: LD_INT 7
11340: PUSH
11341: LD_INT 8
11343: PUSH
11344: LD_INT 9
11346: PUSH
11347: LD_INT 10
11349: PUSH
11350: LD_INT 11
11352: PUSH
11353: LD_INT 12
11355: PUSH
11356: LD_INT 13
11358: PUSH
11359: LD_INT 14
11361: PUSH
11362: LD_INT 15
11364: PUSH
11365: LD_INT 16
11367: PUSH
11368: LD_INT 17
11370: PUSH
11371: LD_INT 18
11373: PUSH
11374: LD_INT 19
11376: PUSH
11377: LD_INT 20
11379: PUSH
11380: LD_INT 21
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 23
11388: PUSH
11389: LD_INT 24
11391: PUSH
11392: LD_INT 25
11394: PUSH
11395: LD_INT 26
11397: PUSH
11398: LD_INT 27
11400: PUSH
11401: LD_INT 28
11403: PUSH
11404: LD_INT 29
11406: PUSH
11407: LD_INT 30
11409: PUSH
11410: LD_INT 31
11412: PUSH
11413: LD_INT 32
11415: PUSH
11416: LD_INT 33
11418: PUSH
11419: LD_INT 34
11421: PUSH
11422: LD_INT 36
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 101
11464: PUSH
11465: LD_INT 102
11467: PUSH
11468: LD_INT 103
11470: PUSH
11471: LD_INT 104
11473: PUSH
11474: LD_INT 105
11476: PUSH
11477: LD_INT 106
11479: PUSH
11480: LD_INT 107
11482: PUSH
11483: LD_INT 108
11485: PUSH
11486: LD_INT 109
11488: PUSH
11489: LD_INT 110
11491: PUSH
11492: LD_INT 111
11494: PUSH
11495: LD_INT 112
11497: PUSH
11498: LD_INT 113
11500: PUSH
11501: LD_INT 114
11503: PUSH
11504: LD_INT 116
11506: PUSH
11507: LD_INT 117
11509: PUSH
11510: LD_INT 118
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: ST_TO_ADDR
11536: GO 11935
11538: LD_INT 18
11540: DOUBLE
11541: EQUAL
11542: IFTRUE 11546
11544: GO 11694
11546: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11547: LD_ADDR_VAR 0 2
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 4
11557: PUSH
11558: LD_INT 5
11560: PUSH
11561: LD_INT 7
11563: PUSH
11564: LD_INT 11
11566: PUSH
11567: LD_INT 12
11569: PUSH
11570: LD_INT 15
11572: PUSH
11573: LD_INT 16
11575: PUSH
11576: LD_INT 20
11578: PUSH
11579: LD_INT 21
11581: PUSH
11582: LD_INT 22
11584: PUSH
11585: LD_INT 23
11587: PUSH
11588: LD_INT 25
11590: PUSH
11591: LD_INT 26
11593: PUSH
11594: LD_INT 30
11596: PUSH
11597: LD_INT 31
11599: PUSH
11600: LD_INT 32
11602: PUSH
11603: LD_INT 33
11605: PUSH
11606: LD_INT 34
11608: PUSH
11609: LD_INT 35
11611: PUSH
11612: LD_INT 36
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 101
11640: PUSH
11641: LD_INT 102
11643: PUSH
11644: LD_INT 103
11646: PUSH
11647: LD_INT 106
11649: PUSH
11650: LD_INT 108
11652: PUSH
11653: LD_INT 112
11655: PUSH
11656: LD_INT 113
11658: PUSH
11659: LD_INT 114
11661: PUSH
11662: LD_INT 115
11664: PUSH
11665: LD_INT 116
11667: PUSH
11668: LD_INT 117
11670: PUSH
11671: LD_INT 118
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: ST_TO_ADDR
11692: GO 11935
11694: LD_INT 19
11696: DOUBLE
11697: EQUAL
11698: IFTRUE 11702
11700: GO 11934
11702: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11703: LD_ADDR_VAR 0 2
11707: PUSH
11708: LD_INT 1
11710: PUSH
11711: LD_INT 2
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: LD_INT 4
11719: PUSH
11720: LD_INT 5
11722: PUSH
11723: LD_INT 6
11725: PUSH
11726: LD_INT 7
11728: PUSH
11729: LD_INT 8
11731: PUSH
11732: LD_INT 9
11734: PUSH
11735: LD_INT 10
11737: PUSH
11738: LD_INT 11
11740: PUSH
11741: LD_INT 12
11743: PUSH
11744: LD_INT 13
11746: PUSH
11747: LD_INT 14
11749: PUSH
11750: LD_INT 15
11752: PUSH
11753: LD_INT 16
11755: PUSH
11756: LD_INT 17
11758: PUSH
11759: LD_INT 18
11761: PUSH
11762: LD_INT 19
11764: PUSH
11765: LD_INT 20
11767: PUSH
11768: LD_INT 21
11770: PUSH
11771: LD_INT 22
11773: PUSH
11774: LD_INT 23
11776: PUSH
11777: LD_INT 24
11779: PUSH
11780: LD_INT 25
11782: PUSH
11783: LD_INT 26
11785: PUSH
11786: LD_INT 27
11788: PUSH
11789: LD_INT 28
11791: PUSH
11792: LD_INT 29
11794: PUSH
11795: LD_INT 30
11797: PUSH
11798: LD_INT 31
11800: PUSH
11801: LD_INT 32
11803: PUSH
11804: LD_INT 33
11806: PUSH
11807: LD_INT 34
11809: PUSH
11810: LD_INT 35
11812: PUSH
11813: LD_INT 36
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 101
11856: PUSH
11857: LD_INT 102
11859: PUSH
11860: LD_INT 103
11862: PUSH
11863: LD_INT 104
11865: PUSH
11866: LD_INT 105
11868: PUSH
11869: LD_INT 106
11871: PUSH
11872: LD_INT 107
11874: PUSH
11875: LD_INT 108
11877: PUSH
11878: LD_INT 109
11880: PUSH
11881: LD_INT 110
11883: PUSH
11884: LD_INT 111
11886: PUSH
11887: LD_INT 112
11889: PUSH
11890: LD_INT 113
11892: PUSH
11893: LD_INT 114
11895: PUSH
11896: LD_INT 115
11898: PUSH
11899: LD_INT 116
11901: PUSH
11902: LD_INT 117
11904: PUSH
11905: LD_INT 118
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: ST_TO_ADDR
11932: GO 11935
11934: POP
// end else
11935: GO 12166
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11937: LD_ADDR_VAR 0 2
11941: PUSH
11942: LD_INT 1
11944: PUSH
11945: LD_INT 2
11947: PUSH
11948: LD_INT 3
11950: PUSH
11951: LD_INT 4
11953: PUSH
11954: LD_INT 5
11956: PUSH
11957: LD_INT 6
11959: PUSH
11960: LD_INT 7
11962: PUSH
11963: LD_INT 8
11965: PUSH
11966: LD_INT 9
11968: PUSH
11969: LD_INT 10
11971: PUSH
11972: LD_INT 11
11974: PUSH
11975: LD_INT 12
11977: PUSH
11978: LD_INT 13
11980: PUSH
11981: LD_INT 14
11983: PUSH
11984: LD_INT 15
11986: PUSH
11987: LD_INT 16
11989: PUSH
11990: LD_INT 17
11992: PUSH
11993: LD_INT 18
11995: PUSH
11996: LD_INT 19
11998: PUSH
11999: LD_INT 20
12001: PUSH
12002: LD_INT 21
12004: PUSH
12005: LD_INT 22
12007: PUSH
12008: LD_INT 23
12010: PUSH
12011: LD_INT 24
12013: PUSH
12014: LD_INT 25
12016: PUSH
12017: LD_INT 26
12019: PUSH
12020: LD_INT 27
12022: PUSH
12023: LD_INT 28
12025: PUSH
12026: LD_INT 29
12028: PUSH
12029: LD_INT 30
12031: PUSH
12032: LD_INT 31
12034: PUSH
12035: LD_INT 32
12037: PUSH
12038: LD_INT 33
12040: PUSH
12041: LD_INT 34
12043: PUSH
12044: LD_INT 35
12046: PUSH
12047: LD_INT 36
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 101
12090: PUSH
12091: LD_INT 102
12093: PUSH
12094: LD_INT 103
12096: PUSH
12097: LD_INT 104
12099: PUSH
12100: LD_INT 105
12102: PUSH
12103: LD_INT 106
12105: PUSH
12106: LD_INT 107
12108: PUSH
12109: LD_INT 108
12111: PUSH
12112: LD_INT 109
12114: PUSH
12115: LD_INT 110
12117: PUSH
12118: LD_INT 111
12120: PUSH
12121: LD_INT 112
12123: PUSH
12124: LD_INT 113
12126: PUSH
12127: LD_INT 114
12129: PUSH
12130: LD_INT 115
12132: PUSH
12133: LD_INT 116
12135: PUSH
12136: LD_INT 117
12138: PUSH
12139: LD_INT 118
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: ST_TO_ADDR
// if result then
12166: LD_VAR 0 2
12170: IFFALSE 12956
// begin normal :=  ;
12172: LD_ADDR_VAR 0 5
12176: PUSH
12177: LD_STRING 
12179: ST_TO_ADDR
// hardcore :=  ;
12180: LD_ADDR_VAR 0 6
12184: PUSH
12185: LD_STRING 
12187: ST_TO_ADDR
// active :=  ;
12188: LD_ADDR_VAR 0 7
12192: PUSH
12193: LD_STRING 
12195: ST_TO_ADDR
// for i = 1 to normalCounter do
12196: LD_ADDR_VAR 0 8
12200: PUSH
12201: DOUBLE
12202: LD_INT 1
12204: DEC
12205: ST_TO_ADDR
12206: LD_EXP 19
12210: PUSH
12211: FOR_TO
12212: IFFALSE 12313
// begin tmp := 0 ;
12214: LD_ADDR_VAR 0 3
12218: PUSH
12219: LD_STRING 0
12221: ST_TO_ADDR
// if result [ 1 ] then
12222: LD_VAR 0 2
12226: PUSH
12227: LD_INT 1
12229: ARRAY
12230: IFFALSE 12295
// if result [ 1 ] [ 1 ] = i then
12232: LD_VAR 0 2
12236: PUSH
12237: LD_INT 1
12239: ARRAY
12240: PUSH
12241: LD_INT 1
12243: ARRAY
12244: PUSH
12245: LD_VAR 0 8
12249: EQUAL
12250: IFFALSE 12295
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12252: LD_ADDR_VAR 0 2
12256: PUSH
12257: LD_VAR 0 2
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: LD_VAR 0 2
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: CALL_OW 3
12281: PPUSH
12282: CALL_OW 1
12286: ST_TO_ADDR
// tmp := 1 ;
12287: LD_ADDR_VAR 0 3
12291: PUSH
12292: LD_STRING 1
12294: ST_TO_ADDR
// end ; normal := normal & tmp ;
12295: LD_ADDR_VAR 0 5
12299: PUSH
12300: LD_VAR 0 5
12304: PUSH
12305: LD_VAR 0 3
12309: STR
12310: ST_TO_ADDR
// end ;
12311: GO 12211
12313: POP
12314: POP
// for i = 1 to hardcoreCounter do
12315: LD_ADDR_VAR 0 8
12319: PUSH
12320: DOUBLE
12321: LD_INT 1
12323: DEC
12324: ST_TO_ADDR
12325: LD_EXP 20
12329: PUSH
12330: FOR_TO
12331: IFFALSE 12436
// begin tmp := 0 ;
12333: LD_ADDR_VAR 0 3
12337: PUSH
12338: LD_STRING 0
12340: ST_TO_ADDR
// if result [ 2 ] then
12341: LD_VAR 0 2
12345: PUSH
12346: LD_INT 2
12348: ARRAY
12349: IFFALSE 12418
// if result [ 2 ] [ 1 ] = 100 + i then
12351: LD_VAR 0 2
12355: PUSH
12356: LD_INT 2
12358: ARRAY
12359: PUSH
12360: LD_INT 1
12362: ARRAY
12363: PUSH
12364: LD_INT 100
12366: PUSH
12367: LD_VAR 0 8
12371: PLUS
12372: EQUAL
12373: IFFALSE 12418
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12375: LD_ADDR_VAR 0 2
12379: PUSH
12380: LD_VAR 0 2
12384: PPUSH
12385: LD_INT 2
12387: PPUSH
12388: LD_VAR 0 2
12392: PUSH
12393: LD_INT 2
12395: ARRAY
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 3
12404: PPUSH
12405: CALL_OW 1
12409: ST_TO_ADDR
// tmp := 1 ;
12410: LD_ADDR_VAR 0 3
12414: PUSH
12415: LD_STRING 1
12417: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12418: LD_ADDR_VAR 0 6
12422: PUSH
12423: LD_VAR 0 6
12427: PUSH
12428: LD_VAR 0 3
12432: STR
12433: ST_TO_ADDR
// end ;
12434: GO 12330
12436: POP
12437: POP
// if isGameLoad then
12438: LD_VAR 0 1
12442: IFFALSE 12917
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12444: LD_ADDR_VAR 0 4
12448: PUSH
12449: LD_EXP 23
12453: PUSH
12454: LD_EXP 22
12458: PUSH
12459: LD_EXP 24
12463: PUSH
12464: LD_EXP 21
12468: PUSH
12469: LD_EXP 25
12473: PUSH
12474: LD_EXP 26
12478: PUSH
12479: LD_EXP 27
12483: PUSH
12484: LD_EXP 28
12488: PUSH
12489: LD_EXP 29
12493: PUSH
12494: LD_EXP 30
12498: PUSH
12499: LD_EXP 31
12503: PUSH
12504: LD_EXP 32
12508: PUSH
12509: LD_EXP 33
12513: PUSH
12514: LD_EXP 34
12518: PUSH
12519: LD_EXP 42
12523: PUSH
12524: LD_EXP 43
12528: PUSH
12529: LD_EXP 44
12533: PUSH
12534: LD_EXP 45
12538: PUSH
12539: LD_EXP 47
12543: PUSH
12544: LD_EXP 48
12548: PUSH
12549: LD_EXP 49
12553: PUSH
12554: LD_EXP 52
12558: PUSH
12559: LD_EXP 54
12563: PUSH
12564: LD_EXP 55
12568: PUSH
12569: LD_EXP 56
12573: PUSH
12574: LD_EXP 58
12578: PUSH
12579: LD_EXP 59
12583: PUSH
12584: LD_EXP 62
12588: PUSH
12589: LD_EXP 63
12593: PUSH
12594: LD_EXP 64
12598: PUSH
12599: LD_EXP 65
12603: PUSH
12604: LD_EXP 66
12608: PUSH
12609: LD_EXP 67
12613: PUSH
12614: LD_EXP 68
12618: PUSH
12619: LD_EXP 69
12623: PUSH
12624: LD_EXP 70
12628: PUSH
12629: LD_EXP 35
12633: PUSH
12634: LD_EXP 36
12638: PUSH
12639: LD_EXP 39
12643: PUSH
12644: LD_EXP 40
12648: PUSH
12649: LD_EXP 41
12653: PUSH
12654: LD_EXP 37
12658: PUSH
12659: LD_EXP 38
12663: PUSH
12664: LD_EXP 46
12668: PUSH
12669: LD_EXP 50
12673: PUSH
12674: LD_EXP 51
12678: PUSH
12679: LD_EXP 53
12683: PUSH
12684: LD_EXP 57
12688: PUSH
12689: LD_EXP 60
12693: PUSH
12694: LD_EXP 61
12698: PUSH
12699: LD_EXP 71
12703: PUSH
12704: LD_EXP 72
12708: PUSH
12709: LD_EXP 73
12713: PUSH
12714: LD_EXP 74
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: ST_TO_ADDR
// tmp :=  ;
12775: LD_ADDR_VAR 0 3
12779: PUSH
12780: LD_STRING 
12782: ST_TO_ADDR
// for i = 1 to normalCounter do
12783: LD_ADDR_VAR 0 8
12787: PUSH
12788: DOUBLE
12789: LD_INT 1
12791: DEC
12792: ST_TO_ADDR
12793: LD_EXP 19
12797: PUSH
12798: FOR_TO
12799: IFFALSE 12835
// begin if flags [ i ] then
12801: LD_VAR 0 4
12805: PUSH
12806: LD_VAR 0 8
12810: ARRAY
12811: IFFALSE 12833
// tmp := tmp & i & ; ;
12813: LD_ADDR_VAR 0 3
12817: PUSH
12818: LD_VAR 0 3
12822: PUSH
12823: LD_VAR 0 8
12827: STR
12828: PUSH
12829: LD_STRING ;
12831: STR
12832: ST_TO_ADDR
// end ;
12833: GO 12798
12835: POP
12836: POP
// for i = 1 to hardcoreCounter do
12837: LD_ADDR_VAR 0 8
12841: PUSH
12842: DOUBLE
12843: LD_INT 1
12845: DEC
12846: ST_TO_ADDR
12847: LD_EXP 20
12851: PUSH
12852: FOR_TO
12853: IFFALSE 12899
// begin if flags [ normalCounter + i ] then
12855: LD_VAR 0 4
12859: PUSH
12860: LD_EXP 19
12864: PUSH
12865: LD_VAR 0 8
12869: PLUS
12870: ARRAY
12871: IFFALSE 12897
// tmp := tmp & ( 100 + i ) & ; ;
12873: LD_ADDR_VAR 0 3
12877: PUSH
12878: LD_VAR 0 3
12882: PUSH
12883: LD_INT 100
12885: PUSH
12886: LD_VAR 0 8
12890: PLUS
12891: STR
12892: PUSH
12893: LD_STRING ;
12895: STR
12896: ST_TO_ADDR
// end ;
12897: GO 12852
12899: POP
12900: POP
// if tmp then
12901: LD_VAR 0 3
12905: IFFALSE 12917
// active := tmp ;
12907: LD_ADDR_VAR 0 7
12911: PUSH
12912: LD_VAR 0 3
12916: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12917: LD_STRING getStreamItemsFromMission("
12919: PUSH
12920: LD_VAR 0 5
12924: STR
12925: PUSH
12926: LD_STRING ","
12928: STR
12929: PUSH
12930: LD_VAR 0 6
12934: STR
12935: PUSH
12936: LD_STRING ","
12938: STR
12939: PUSH
12940: LD_VAR 0 7
12944: STR
12945: PUSH
12946: LD_STRING ")
12948: STR
12949: PPUSH
12950: CALL_OW 559
// end else
12954: GO 12963
// ToLua ( getStreamItemsFromMission("","","") ) ;
12956: LD_STRING getStreamItemsFromMission("","","")
12958: PPUSH
12959: CALL_OW 559
// end ;
12963: LD_VAR 0 2
12967: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12968: LD_EXP 18
12972: PUSH
12973: LD_EXP 23
12977: AND
12978: IFFALSE 13102
12980: GO 12982
12982: DISABLE
12983: LD_INT 0
12985: PPUSH
12986: PPUSH
// begin enable ;
12987: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12988: LD_ADDR_VAR 0 2
12992: PUSH
12993: LD_INT 22
12995: PUSH
12996: LD_OWVAR 2
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 2
13007: PUSH
13008: LD_INT 34
13010: PUSH
13011: LD_INT 7
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 34
13020: PUSH
13021: LD_INT 45
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: LD_INT 34
13030: PUSH
13031: LD_INT 28
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 34
13040: PUSH
13041: LD_INT 47
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PPUSH
13059: CALL_OW 69
13063: ST_TO_ADDR
// if not tmp then
13064: LD_VAR 0 2
13068: NOT
13069: IFFALSE 13073
// exit ;
13071: GO 13102
// for i in tmp do
13073: LD_ADDR_VAR 0 1
13077: PUSH
13078: LD_VAR 0 2
13082: PUSH
13083: FOR_IN
13084: IFFALSE 13100
// begin SetLives ( i , 0 ) ;
13086: LD_VAR 0 1
13090: PPUSH
13091: LD_INT 0
13093: PPUSH
13094: CALL_OW 234
// end ;
13098: GO 13083
13100: POP
13101: POP
// end ;
13102: PPOPN 2
13104: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13105: LD_EXP 18
13109: PUSH
13110: LD_EXP 24
13114: AND
13115: IFFALSE 13199
13117: GO 13119
13119: DISABLE
13120: LD_INT 0
13122: PPUSH
13123: PPUSH
// begin enable ;
13124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_INT 22
13132: PUSH
13133: LD_OWVAR 2
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 32
13144: PUSH
13145: LD_INT 3
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PPUSH
13156: CALL_OW 69
13160: ST_TO_ADDR
// if not tmp then
13161: LD_VAR 0 2
13165: NOT
13166: IFFALSE 13170
// exit ;
13168: GO 13199
// for i in tmp do
13170: LD_ADDR_VAR 0 1
13174: PUSH
13175: LD_VAR 0 2
13179: PUSH
13180: FOR_IN
13181: IFFALSE 13197
// begin SetLives ( i , 0 ) ;
13183: LD_VAR 0 1
13187: PPUSH
13188: LD_INT 0
13190: PPUSH
13191: CALL_OW 234
// end ;
13195: GO 13180
13197: POP
13198: POP
// end ;
13199: PPOPN 2
13201: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13202: LD_EXP 18
13206: PUSH
13207: LD_EXP 21
13211: AND
13212: IFFALSE 13305
13214: GO 13216
13216: DISABLE
13217: LD_INT 0
13219: PPUSH
// begin enable ;
13220: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13221: LD_ADDR_VAR 0 1
13225: PUSH
13226: LD_INT 22
13228: PUSH
13229: LD_OWVAR 2
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 5
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 9
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 25
13263: PUSH
13264: LD_INT 8
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 69
13285: PUSH
13286: FOR_IN
13287: IFFALSE 13303
// begin SetClass ( i , 1 ) ;
13289: LD_VAR 0 1
13293: PPUSH
13294: LD_INT 1
13296: PPUSH
13297: CALL_OW 336
// end ;
13301: GO 13286
13303: POP
13304: POP
// end ;
13305: PPOPN 1
13307: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13308: LD_EXP 18
13312: PUSH
13313: LD_EXP 22
13317: AND
13318: PUSH
13319: LD_OWVAR 65
13323: PUSH
13324: LD_INT 7
13326: LESS
13327: AND
13328: IFFALSE 13342
13330: GO 13332
13332: DISABLE
// begin enable ;
13333: ENABLE
// game_speed := 7 ;
13334: LD_ADDR_OWVAR 65
13338: PUSH
13339: LD_INT 7
13341: ST_TO_ADDR
// end ;
13342: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13343: LD_EXP 18
13347: PUSH
13348: LD_EXP 25
13352: AND
13353: IFFALSE 13555
13355: GO 13357
13357: DISABLE
13358: LD_INT 0
13360: PPUSH
13361: PPUSH
13362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13363: LD_ADDR_VAR 0 3
13367: PUSH
13368: LD_INT 81
13370: PUSH
13371: LD_OWVAR 2
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 21
13382: PUSH
13383: LD_INT 1
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PPUSH
13394: CALL_OW 69
13398: ST_TO_ADDR
// if not tmp then
13399: LD_VAR 0 3
13403: NOT
13404: IFFALSE 13408
// exit ;
13406: GO 13555
// if tmp > 5 then
13408: LD_VAR 0 3
13412: PUSH
13413: LD_INT 5
13415: GREATER
13416: IFFALSE 13428
// k := 5 else
13418: LD_ADDR_VAR 0 2
13422: PUSH
13423: LD_INT 5
13425: ST_TO_ADDR
13426: GO 13438
// k := tmp ;
13428: LD_ADDR_VAR 0 2
13432: PUSH
13433: LD_VAR 0 3
13437: ST_TO_ADDR
// for i := 1 to k do
13438: LD_ADDR_VAR 0 1
13442: PUSH
13443: DOUBLE
13444: LD_INT 1
13446: DEC
13447: ST_TO_ADDR
13448: LD_VAR 0 2
13452: PUSH
13453: FOR_TO
13454: IFFALSE 13553
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13456: LD_VAR 0 3
13460: PUSH
13461: LD_VAR 0 1
13465: ARRAY
13466: PPUSH
13467: LD_VAR 0 1
13471: PUSH
13472: LD_INT 4
13474: MOD
13475: PUSH
13476: LD_INT 1
13478: PLUS
13479: PPUSH
13480: CALL_OW 259
13484: PUSH
13485: LD_INT 10
13487: LESS
13488: IFFALSE 13551
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13490: LD_VAR 0 3
13494: PUSH
13495: LD_VAR 0 1
13499: ARRAY
13500: PPUSH
13501: LD_VAR 0 1
13505: PUSH
13506: LD_INT 4
13508: MOD
13509: PUSH
13510: LD_INT 1
13512: PLUS
13513: PPUSH
13514: LD_VAR 0 3
13518: PUSH
13519: LD_VAR 0 1
13523: ARRAY
13524: PPUSH
13525: LD_VAR 0 1
13529: PUSH
13530: LD_INT 4
13532: MOD
13533: PUSH
13534: LD_INT 1
13536: PLUS
13537: PPUSH
13538: CALL_OW 259
13542: PUSH
13543: LD_INT 1
13545: PLUS
13546: PPUSH
13547: CALL_OW 237
13551: GO 13453
13553: POP
13554: POP
// end ;
13555: PPOPN 3
13557: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13558: LD_EXP 18
13562: PUSH
13563: LD_EXP 26
13567: AND
13568: IFFALSE 13588
13570: GO 13572
13572: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13573: LD_INT 4
13575: PPUSH
13576: LD_OWVAR 2
13580: PPUSH
13581: LD_INT 0
13583: PPUSH
13584: CALL_OW 324
13588: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13589: LD_EXP 18
13593: PUSH
13594: LD_EXP 55
13598: AND
13599: IFFALSE 13619
13601: GO 13603
13603: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13604: LD_INT 19
13606: PPUSH
13607: LD_OWVAR 2
13611: PPUSH
13612: LD_INT 0
13614: PPUSH
13615: CALL_OW 324
13619: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13620: LD_EXP 18
13624: PUSH
13625: LD_EXP 27
13629: AND
13630: IFFALSE 13732
13632: GO 13634
13634: DISABLE
13635: LD_INT 0
13637: PPUSH
13638: PPUSH
// begin enable ;
13639: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_INT 22
13647: PUSH
13648: LD_OWVAR 2
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 2
13659: PUSH
13660: LD_INT 34
13662: PUSH
13663: LD_INT 11
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 34
13672: PUSH
13673: LD_INT 30
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: ST_TO_ADDR
// if not tmp then
13694: LD_VAR 0 2
13698: NOT
13699: IFFALSE 13703
// exit ;
13701: GO 13732
// for i in tmp do
13703: LD_ADDR_VAR 0 1
13707: PUSH
13708: LD_VAR 0 2
13712: PUSH
13713: FOR_IN
13714: IFFALSE 13730
// begin SetLives ( i , 0 ) ;
13716: LD_VAR 0 1
13720: PPUSH
13721: LD_INT 0
13723: PPUSH
13724: CALL_OW 234
// end ;
13728: GO 13713
13730: POP
13731: POP
// end ;
13732: PPOPN 2
13734: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13735: LD_EXP 18
13739: PUSH
13740: LD_EXP 28
13744: AND
13745: IFFALSE 13765
13747: GO 13749
13749: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13750: LD_INT 32
13752: PPUSH
13753: LD_OWVAR 2
13757: PPUSH
13758: LD_INT 0
13760: PPUSH
13761: CALL_OW 324
13765: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13766: LD_EXP 18
13770: PUSH
13771: LD_EXP 29
13775: AND
13776: IFFALSE 13957
13778: GO 13780
13780: DISABLE
13781: LD_INT 0
13783: PPUSH
13784: PPUSH
13785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13786: LD_ADDR_VAR 0 2
13790: PUSH
13791: LD_INT 22
13793: PUSH
13794: LD_OWVAR 2
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 33
13805: PUSH
13806: LD_INT 3
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 69
13821: ST_TO_ADDR
// if not tmp then
13822: LD_VAR 0 2
13826: NOT
13827: IFFALSE 13831
// exit ;
13829: GO 13957
// side := 0 ;
13831: LD_ADDR_VAR 0 3
13835: PUSH
13836: LD_INT 0
13838: ST_TO_ADDR
// for i := 1 to 8 do
13839: LD_ADDR_VAR 0 1
13843: PUSH
13844: DOUBLE
13845: LD_INT 1
13847: DEC
13848: ST_TO_ADDR
13849: LD_INT 8
13851: PUSH
13852: FOR_TO
13853: IFFALSE 13901
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13855: LD_OWVAR 2
13859: PUSH
13860: LD_VAR 0 1
13864: NONEQUAL
13865: PUSH
13866: LD_OWVAR 2
13870: PPUSH
13871: LD_VAR 0 1
13875: PPUSH
13876: CALL_OW 81
13880: PUSH
13881: LD_INT 2
13883: EQUAL
13884: AND
13885: IFFALSE 13899
// begin side := i ;
13887: LD_ADDR_VAR 0 3
13891: PUSH
13892: LD_VAR 0 1
13896: ST_TO_ADDR
// break ;
13897: GO 13901
// end ;
13899: GO 13852
13901: POP
13902: POP
// if not side then
13903: LD_VAR 0 3
13907: NOT
13908: IFFALSE 13912
// exit ;
13910: GO 13957
// for i := 1 to tmp do
13912: LD_ADDR_VAR 0 1
13916: PUSH
13917: DOUBLE
13918: LD_INT 1
13920: DEC
13921: ST_TO_ADDR
13922: LD_VAR 0 2
13926: PUSH
13927: FOR_TO
13928: IFFALSE 13955
// if Prob ( 60 ) then
13930: LD_INT 60
13932: PPUSH
13933: CALL_OW 13
13937: IFFALSE 13953
// SetSide ( i , side ) ;
13939: LD_VAR 0 1
13943: PPUSH
13944: LD_VAR 0 3
13948: PPUSH
13949: CALL_OW 235
13953: GO 13927
13955: POP
13956: POP
// end ;
13957: PPOPN 3
13959: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13960: LD_EXP 18
13964: PUSH
13965: LD_EXP 31
13969: AND
13970: IFFALSE 14089
13972: GO 13974
13974: DISABLE
13975: LD_INT 0
13977: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13978: LD_ADDR_VAR 0 1
13982: PUSH
13983: LD_INT 22
13985: PUSH
13986: LD_OWVAR 2
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 21
13997: PUSH
13998: LD_INT 1
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 3
14007: PUSH
14008: LD_INT 23
14010: PUSH
14011: LD_INT 0
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: PPUSH
14027: CALL_OW 69
14031: PUSH
14032: FOR_IN
14033: IFFALSE 14087
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 257
14044: PUSH
14045: LD_INT 1
14047: PUSH
14048: LD_INT 2
14050: PUSH
14051: LD_INT 3
14053: PUSH
14054: LD_INT 4
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: IN
14063: IFFALSE 14085
// SetClass ( un , rand ( 1 , 4 ) ) ;
14065: LD_VAR 0 1
14069: PPUSH
14070: LD_INT 1
14072: PPUSH
14073: LD_INT 4
14075: PPUSH
14076: CALL_OW 12
14080: PPUSH
14081: CALL_OW 336
14085: GO 14032
14087: POP
14088: POP
// end ;
14089: PPOPN 1
14091: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14092: LD_EXP 18
14096: PUSH
14097: LD_EXP 30
14101: AND
14102: IFFALSE 14181
14104: GO 14106
14106: DISABLE
14107: LD_INT 0
14109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14110: LD_ADDR_VAR 0 1
14114: PUSH
14115: LD_INT 22
14117: PUSH
14118: LD_OWVAR 2
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 21
14129: PUSH
14130: LD_INT 3
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 69
14145: ST_TO_ADDR
// if not tmp then
14146: LD_VAR 0 1
14150: NOT
14151: IFFALSE 14155
// exit ;
14153: GO 14181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14155: LD_VAR 0 1
14159: PUSH
14160: LD_INT 1
14162: PPUSH
14163: LD_VAR 0 1
14167: PPUSH
14168: CALL_OW 12
14172: ARRAY
14173: PPUSH
14174: LD_INT 100
14176: PPUSH
14177: CALL_OW 234
// end ;
14181: PPOPN 1
14183: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14184: LD_EXP 18
14188: PUSH
14189: LD_EXP 32
14193: AND
14194: IFFALSE 14292
14196: GO 14198
14198: DISABLE
14199: LD_INT 0
14201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14202: LD_ADDR_VAR 0 1
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_OWVAR 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 21
14221: PUSH
14222: LD_INT 1
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PPUSH
14233: CALL_OW 69
14237: ST_TO_ADDR
// if not tmp then
14238: LD_VAR 0 1
14242: NOT
14243: IFFALSE 14247
// exit ;
14245: GO 14292
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14247: LD_VAR 0 1
14251: PUSH
14252: LD_INT 1
14254: PPUSH
14255: LD_VAR 0 1
14259: PPUSH
14260: CALL_OW 12
14264: ARRAY
14265: PPUSH
14266: LD_INT 1
14268: PPUSH
14269: LD_INT 4
14271: PPUSH
14272: CALL_OW 12
14276: PPUSH
14277: LD_INT 3000
14279: PPUSH
14280: LD_INT 9000
14282: PPUSH
14283: CALL_OW 12
14287: PPUSH
14288: CALL_OW 492
// end ;
14292: PPOPN 1
14294: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14295: LD_EXP 18
14299: PUSH
14300: LD_EXP 33
14304: AND
14305: IFFALSE 14325
14307: GO 14309
14309: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14310: LD_INT 1
14312: PPUSH
14313: LD_OWVAR 2
14317: PPUSH
14318: LD_INT 0
14320: PPUSH
14321: CALL_OW 324
14325: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14326: LD_EXP 18
14330: PUSH
14331: LD_EXP 34
14335: AND
14336: IFFALSE 14419
14338: GO 14340
14340: DISABLE
14341: LD_INT 0
14343: PPUSH
14344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14345: LD_ADDR_VAR 0 2
14349: PUSH
14350: LD_INT 22
14352: PUSH
14353: LD_OWVAR 2
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 21
14364: PUSH
14365: LD_INT 3
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PPUSH
14376: CALL_OW 69
14380: ST_TO_ADDR
// if not tmp then
14381: LD_VAR 0 2
14385: NOT
14386: IFFALSE 14390
// exit ;
14388: GO 14419
// for i in tmp do
14390: LD_ADDR_VAR 0 1
14394: PUSH
14395: LD_VAR 0 2
14399: PUSH
14400: FOR_IN
14401: IFFALSE 14417
// SetBLevel ( i , 10 ) ;
14403: LD_VAR 0 1
14407: PPUSH
14408: LD_INT 10
14410: PPUSH
14411: CALL_OW 241
14415: GO 14400
14417: POP
14418: POP
// end ;
14419: PPOPN 2
14421: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14422: LD_EXP 18
14426: PUSH
14427: LD_EXP 35
14431: AND
14432: IFFALSE 14543
14434: GO 14436
14436: DISABLE
14437: LD_INT 0
14439: PPUSH
14440: PPUSH
14441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14442: LD_ADDR_VAR 0 3
14446: PUSH
14447: LD_INT 22
14449: PUSH
14450: LD_OWVAR 2
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 25
14461: PUSH
14462: LD_INT 1
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PPUSH
14473: CALL_OW 69
14477: ST_TO_ADDR
// if not tmp then
14478: LD_VAR 0 3
14482: NOT
14483: IFFALSE 14487
// exit ;
14485: GO 14543
// un := tmp [ rand ( 1 , tmp ) ] ;
14487: LD_ADDR_VAR 0 2
14491: PUSH
14492: LD_VAR 0 3
14496: PUSH
14497: LD_INT 1
14499: PPUSH
14500: LD_VAR 0 3
14504: PPUSH
14505: CALL_OW 12
14509: ARRAY
14510: ST_TO_ADDR
// if Crawls ( un ) then
14511: LD_VAR 0 2
14515: PPUSH
14516: CALL_OW 318
14520: IFFALSE 14531
// ComWalk ( un ) ;
14522: LD_VAR 0 2
14526: PPUSH
14527: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14531: LD_VAR 0 2
14535: PPUSH
14536: LD_INT 5
14538: PPUSH
14539: CALL_OW 336
// end ;
14543: PPOPN 3
14545: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14546: LD_EXP 18
14550: PUSH
14551: LD_EXP 36
14555: AND
14556: PUSH
14557: LD_OWVAR 67
14561: PUSH
14562: LD_INT 4
14564: LESS
14565: AND
14566: IFFALSE 14585
14568: GO 14570
14570: DISABLE
// begin Difficulty := Difficulty + 1 ;
14571: LD_ADDR_OWVAR 67
14575: PUSH
14576: LD_OWVAR 67
14580: PUSH
14581: LD_INT 1
14583: PLUS
14584: ST_TO_ADDR
// end ;
14585: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14586: LD_EXP 18
14590: PUSH
14591: LD_EXP 37
14595: AND
14596: IFFALSE 14699
14598: GO 14600
14600: DISABLE
14601: LD_INT 0
14603: PPUSH
// begin for i := 1 to 5 do
14604: LD_ADDR_VAR 0 1
14608: PUSH
14609: DOUBLE
14610: LD_INT 1
14612: DEC
14613: ST_TO_ADDR
14614: LD_INT 5
14616: PUSH
14617: FOR_TO
14618: IFFALSE 14697
// begin uc_nation := nation_nature ;
14620: LD_ADDR_OWVAR 21
14624: PUSH
14625: LD_INT 0
14627: ST_TO_ADDR
// uc_side := 0 ;
14628: LD_ADDR_OWVAR 20
14632: PUSH
14633: LD_INT 0
14635: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14636: LD_ADDR_OWVAR 29
14640: PUSH
14641: LD_INT 12
14643: PUSH
14644: LD_INT 12
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: ST_TO_ADDR
// hc_agressivity := 20 ;
14651: LD_ADDR_OWVAR 35
14655: PUSH
14656: LD_INT 20
14658: ST_TO_ADDR
// hc_class := class_tiger ;
14659: LD_ADDR_OWVAR 28
14663: PUSH
14664: LD_INT 14
14666: ST_TO_ADDR
// hc_gallery :=  ;
14667: LD_ADDR_OWVAR 33
14671: PUSH
14672: LD_STRING 
14674: ST_TO_ADDR
// hc_name :=  ;
14675: LD_ADDR_OWVAR 26
14679: PUSH
14680: LD_STRING 
14682: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14683: CALL_OW 44
14687: PPUSH
14688: LD_INT 0
14690: PPUSH
14691: CALL_OW 51
// end ;
14695: GO 14617
14697: POP
14698: POP
// end ;
14699: PPOPN 1
14701: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14702: LD_EXP 18
14706: PUSH
14707: LD_EXP 38
14711: AND
14712: IFFALSE 14721
14714: GO 14716
14716: DISABLE
// StreamSibBomb ;
14717: CALL 14722 0 0
14721: END
// export function StreamSibBomb ; var i , x , y ; begin
14722: LD_INT 0
14724: PPUSH
14725: PPUSH
14726: PPUSH
14727: PPUSH
// result := false ;
14728: LD_ADDR_VAR 0 1
14732: PUSH
14733: LD_INT 0
14735: ST_TO_ADDR
// for i := 1 to 16 do
14736: LD_ADDR_VAR 0 2
14740: PUSH
14741: DOUBLE
14742: LD_INT 1
14744: DEC
14745: ST_TO_ADDR
14746: LD_INT 16
14748: PUSH
14749: FOR_TO
14750: IFFALSE 14949
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14752: LD_ADDR_VAR 0 3
14756: PUSH
14757: LD_INT 10
14759: PUSH
14760: LD_INT 20
14762: PUSH
14763: LD_INT 30
14765: PUSH
14766: LD_INT 40
14768: PUSH
14769: LD_INT 50
14771: PUSH
14772: LD_INT 60
14774: PUSH
14775: LD_INT 70
14777: PUSH
14778: LD_INT 80
14780: PUSH
14781: LD_INT 90
14783: PUSH
14784: LD_INT 100
14786: PUSH
14787: LD_INT 110
14789: PUSH
14790: LD_INT 120
14792: PUSH
14793: LD_INT 130
14795: PUSH
14796: LD_INT 140
14798: PUSH
14799: LD_INT 150
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 1
14821: PPUSH
14822: LD_INT 15
14824: PPUSH
14825: CALL_OW 12
14829: ARRAY
14830: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14831: LD_ADDR_VAR 0 4
14835: PUSH
14836: LD_INT 10
14838: PUSH
14839: LD_INT 20
14841: PUSH
14842: LD_INT 30
14844: PUSH
14845: LD_INT 40
14847: PUSH
14848: LD_INT 50
14850: PUSH
14851: LD_INT 60
14853: PUSH
14854: LD_INT 70
14856: PUSH
14857: LD_INT 80
14859: PUSH
14860: LD_INT 90
14862: PUSH
14863: LD_INT 100
14865: PUSH
14866: LD_INT 110
14868: PUSH
14869: LD_INT 120
14871: PUSH
14872: LD_INT 130
14874: PUSH
14875: LD_INT 140
14877: PUSH
14878: LD_INT 150
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 1
14900: PPUSH
14901: LD_INT 15
14903: PPUSH
14904: CALL_OW 12
14908: ARRAY
14909: ST_TO_ADDR
// if ValidHex ( x , y ) then
14910: LD_VAR 0 3
14914: PPUSH
14915: LD_VAR 0 4
14919: PPUSH
14920: CALL_OW 488
14924: IFFALSE 14947
// begin result := [ x , y ] ;
14926: LD_ADDR_VAR 0 1
14930: PUSH
14931: LD_VAR 0 3
14935: PUSH
14936: LD_VAR 0 4
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: ST_TO_ADDR
// break ;
14945: GO 14949
// end ; end ;
14947: GO 14749
14949: POP
14950: POP
// if result then
14951: LD_VAR 0 1
14955: IFFALSE 15015
// begin ToLua ( playSibBomb() ) ;
14957: LD_STRING playSibBomb()
14959: PPUSH
14960: CALL_OW 559
// wait ( 0 0$14 ) ;
14964: LD_INT 490
14966: PPUSH
14967: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14971: LD_VAR 0 1
14975: PUSH
14976: LD_INT 1
14978: ARRAY
14979: PPUSH
14980: LD_VAR 0 1
14984: PUSH
14985: LD_INT 2
14987: ARRAY
14988: PPUSH
14989: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14993: LD_VAR 0 1
14997: PUSH
14998: LD_INT 1
15000: ARRAY
15001: PPUSH
15002: LD_VAR 0 1
15006: PUSH
15007: LD_INT 2
15009: ARRAY
15010: PPUSH
15011: CALL_OW 429
// end ; end ;
15015: LD_VAR 0 1
15019: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15020: LD_EXP 18
15024: PUSH
15025: LD_EXP 40
15029: AND
15030: IFFALSE 15042
15032: GO 15034
15034: DISABLE
// YouLost (  ) ;
15035: LD_STRING 
15037: PPUSH
15038: CALL_OW 104
15042: END
// every 0 0$1 trigger StreamModeActive and sFog do
15043: LD_EXP 18
15047: PUSH
15048: LD_EXP 39
15052: AND
15053: IFFALSE 15067
15055: GO 15057
15057: DISABLE
// FogOff ( your_side ) ;
15058: LD_OWVAR 2
15062: PPUSH
15063: CALL_OW 344
15067: END
// every 0 0$1 trigger StreamModeActive and sSun do
15068: LD_EXP 18
15072: PUSH
15073: LD_EXP 41
15077: AND
15078: IFFALSE 15106
15080: GO 15082
15082: DISABLE
// begin solar_recharge_percent := 0 ;
15083: LD_ADDR_OWVAR 79
15087: PUSH
15088: LD_INT 0
15090: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15091: LD_INT 10500
15093: PPUSH
15094: CALL_OW 67
// solar_recharge_percent := 100 ;
15098: LD_ADDR_OWVAR 79
15102: PUSH
15103: LD_INT 100
15105: ST_TO_ADDR
// end ;
15106: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15107: LD_EXP 18
15111: PUSH
15112: LD_EXP 42
15116: AND
15117: IFFALSE 15356
15119: GO 15121
15121: DISABLE
15122: LD_INT 0
15124: PPUSH
15125: PPUSH
15126: PPUSH
// begin tmp := [ ] ;
15127: LD_ADDR_VAR 0 3
15131: PUSH
15132: EMPTY
15133: ST_TO_ADDR
// for i := 1 to 6 do
15134: LD_ADDR_VAR 0 1
15138: PUSH
15139: DOUBLE
15140: LD_INT 1
15142: DEC
15143: ST_TO_ADDR
15144: LD_INT 6
15146: PUSH
15147: FOR_TO
15148: IFFALSE 15253
// begin uc_nation := nation_nature ;
15150: LD_ADDR_OWVAR 21
15154: PUSH
15155: LD_INT 0
15157: ST_TO_ADDR
// uc_side := 0 ;
15158: LD_ADDR_OWVAR 20
15162: PUSH
15163: LD_INT 0
15165: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15166: LD_ADDR_OWVAR 29
15170: PUSH
15171: LD_INT 12
15173: PUSH
15174: LD_INT 12
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: ST_TO_ADDR
// hc_agressivity := 20 ;
15181: LD_ADDR_OWVAR 35
15185: PUSH
15186: LD_INT 20
15188: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15189: LD_ADDR_OWVAR 28
15193: PUSH
15194: LD_INT 17
15196: ST_TO_ADDR
// hc_gallery :=  ;
15197: LD_ADDR_OWVAR 33
15201: PUSH
15202: LD_STRING 
15204: ST_TO_ADDR
// hc_name :=  ;
15205: LD_ADDR_OWVAR 26
15209: PUSH
15210: LD_STRING 
15212: ST_TO_ADDR
// un := CreateHuman ;
15213: LD_ADDR_VAR 0 2
15217: PUSH
15218: CALL_OW 44
15222: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15223: LD_VAR 0 2
15227: PPUSH
15228: LD_INT 1
15230: PPUSH
15231: CALL_OW 51
// tmp := tmp ^ un ;
15235: LD_ADDR_VAR 0 3
15239: PUSH
15240: LD_VAR 0 3
15244: PUSH
15245: LD_VAR 0 2
15249: ADD
15250: ST_TO_ADDR
// end ;
15251: GO 15147
15253: POP
15254: POP
// repeat wait ( 0 0$1 ) ;
15255: LD_INT 35
15257: PPUSH
15258: CALL_OW 67
// for un in tmp do
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_VAR 0 3
15271: PUSH
15272: FOR_IN
15273: IFFALSE 15347
// begin if IsDead ( un ) then
15275: LD_VAR 0 2
15279: PPUSH
15280: CALL_OW 301
15284: IFFALSE 15304
// begin tmp := tmp diff un ;
15286: LD_ADDR_VAR 0 3
15290: PUSH
15291: LD_VAR 0 3
15295: PUSH
15296: LD_VAR 0 2
15300: DIFF
15301: ST_TO_ADDR
// continue ;
15302: GO 15272
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15304: LD_VAR 0 2
15308: PPUSH
15309: LD_INT 3
15311: PUSH
15312: LD_INT 22
15314: PUSH
15315: LD_INT 0
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PPUSH
15326: CALL_OW 69
15330: PPUSH
15331: LD_VAR 0 2
15335: PPUSH
15336: CALL_OW 74
15340: PPUSH
15341: CALL_OW 115
// end ;
15345: GO 15272
15347: POP
15348: POP
// until not tmp ;
15349: LD_VAR 0 3
15353: NOT
15354: IFFALSE 15255
// end ;
15356: PPOPN 3
15358: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15359: LD_EXP 18
15363: PUSH
15364: LD_EXP 43
15368: AND
15369: IFFALSE 15423
15371: GO 15373
15373: DISABLE
// begin ToLua ( displayTroll(); ) ;
15374: LD_STRING displayTroll();
15376: PPUSH
15377: CALL_OW 559
// wait ( 3 3$00 ) ;
15381: LD_INT 6300
15383: PPUSH
15384: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15388: LD_STRING hideTroll();
15390: PPUSH
15391: CALL_OW 559
// wait ( 1 1$00 ) ;
15395: LD_INT 2100
15397: PPUSH
15398: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15402: LD_STRING displayTroll();
15404: PPUSH
15405: CALL_OW 559
// wait ( 1 1$00 ) ;
15409: LD_INT 2100
15411: PPUSH
15412: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15416: LD_STRING hideTroll();
15418: PPUSH
15419: CALL_OW 559
// end ;
15423: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15424: LD_EXP 18
15428: PUSH
15429: LD_EXP 44
15433: AND
15434: IFFALSE 15497
15436: GO 15438
15438: DISABLE
15439: LD_INT 0
15441: PPUSH
// begin p := 0 ;
15442: LD_ADDR_VAR 0 1
15446: PUSH
15447: LD_INT 0
15449: ST_TO_ADDR
// repeat game_speed := 1 ;
15450: LD_ADDR_OWVAR 65
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15458: LD_INT 35
15460: PPUSH
15461: CALL_OW 67
// p := p + 1 ;
15465: LD_ADDR_VAR 0 1
15469: PUSH
15470: LD_VAR 0 1
15474: PUSH
15475: LD_INT 1
15477: PLUS
15478: ST_TO_ADDR
// until p >= 60 ;
15479: LD_VAR 0 1
15483: PUSH
15484: LD_INT 60
15486: GREATEREQUAL
15487: IFFALSE 15450
// game_speed := 4 ;
15489: LD_ADDR_OWVAR 65
15493: PUSH
15494: LD_INT 4
15496: ST_TO_ADDR
// end ;
15497: PPOPN 1
15499: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15500: LD_EXP 18
15504: PUSH
15505: LD_EXP 45
15509: AND
15510: IFFALSE 15656
15512: GO 15514
15514: DISABLE
15515: LD_INT 0
15517: PPUSH
15518: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15519: LD_ADDR_VAR 0 1
15523: PUSH
15524: LD_INT 22
15526: PUSH
15527: LD_OWVAR 2
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 2
15538: PUSH
15539: LD_INT 30
15541: PUSH
15542: LD_INT 0
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 30
15551: PUSH
15552: LD_INT 1
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PPUSH
15568: CALL_OW 69
15572: ST_TO_ADDR
// if not depot then
15573: LD_VAR 0 1
15577: NOT
15578: IFFALSE 15582
// exit ;
15580: GO 15656
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15582: LD_ADDR_VAR 0 2
15586: PUSH
15587: LD_VAR 0 1
15591: PUSH
15592: LD_INT 1
15594: PPUSH
15595: LD_VAR 0 1
15599: PPUSH
15600: CALL_OW 12
15604: ARRAY
15605: PPUSH
15606: CALL_OW 274
15610: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15611: LD_VAR 0 2
15615: PPUSH
15616: LD_INT 1
15618: PPUSH
15619: LD_INT 0
15621: PPUSH
15622: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15626: LD_VAR 0 2
15630: PPUSH
15631: LD_INT 2
15633: PPUSH
15634: LD_INT 0
15636: PPUSH
15637: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15641: LD_VAR 0 2
15645: PPUSH
15646: LD_INT 3
15648: PPUSH
15649: LD_INT 0
15651: PPUSH
15652: CALL_OW 277
// end ;
15656: PPOPN 2
15658: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15659: LD_EXP 18
15663: PUSH
15664: LD_EXP 46
15668: AND
15669: IFFALSE 15766
15671: GO 15673
15673: DISABLE
15674: LD_INT 0
15676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15677: LD_ADDR_VAR 0 1
15681: PUSH
15682: LD_INT 22
15684: PUSH
15685: LD_OWVAR 2
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 21
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 3
15706: PUSH
15707: LD_INT 23
15709: PUSH
15710: LD_INT 0
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: PPUSH
15726: CALL_OW 69
15730: ST_TO_ADDR
// if not tmp then
15731: LD_VAR 0 1
15735: NOT
15736: IFFALSE 15740
// exit ;
15738: GO 15766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15740: LD_VAR 0 1
15744: PUSH
15745: LD_INT 1
15747: PPUSH
15748: LD_VAR 0 1
15752: PPUSH
15753: CALL_OW 12
15757: ARRAY
15758: PPUSH
15759: LD_INT 200
15761: PPUSH
15762: CALL_OW 234
// end ;
15766: PPOPN 1
15768: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15769: LD_EXP 18
15773: PUSH
15774: LD_EXP 47
15778: AND
15779: IFFALSE 15858
15781: GO 15783
15783: DISABLE
15784: LD_INT 0
15786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15787: LD_ADDR_VAR 0 1
15791: PUSH
15792: LD_INT 22
15794: PUSH
15795: LD_OWVAR 2
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 21
15806: PUSH
15807: LD_INT 2
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PPUSH
15818: CALL_OW 69
15822: ST_TO_ADDR
// if not tmp then
15823: LD_VAR 0 1
15827: NOT
15828: IFFALSE 15832
// exit ;
15830: GO 15858
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15832: LD_VAR 0 1
15836: PUSH
15837: LD_INT 1
15839: PPUSH
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 12
15849: ARRAY
15850: PPUSH
15851: LD_INT 60
15853: PPUSH
15854: CALL_OW 234
// end ;
15858: PPOPN 1
15860: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15861: LD_EXP 18
15865: PUSH
15866: LD_EXP 48
15870: AND
15871: IFFALSE 15970
15873: GO 15875
15875: DISABLE
15876: LD_INT 0
15878: PPUSH
15879: PPUSH
// begin enable ;
15880: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15881: LD_ADDR_VAR 0 1
15885: PUSH
15886: LD_INT 22
15888: PUSH
15889: LD_OWVAR 2
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 61
15900: PUSH
15901: EMPTY
15902: LIST
15903: PUSH
15904: LD_INT 33
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: PPUSH
15919: CALL_OW 69
15923: ST_TO_ADDR
// if not tmp then
15924: LD_VAR 0 1
15928: NOT
15929: IFFALSE 15933
// exit ;
15931: GO 15970
// for i in tmp do
15933: LD_ADDR_VAR 0 2
15937: PUSH
15938: LD_VAR 0 1
15942: PUSH
15943: FOR_IN
15944: IFFALSE 15968
// if IsControledBy ( i ) then
15946: LD_VAR 0 2
15950: PPUSH
15951: CALL_OW 312
15955: IFFALSE 15966
// ComUnlink ( i ) ;
15957: LD_VAR 0 2
15961: PPUSH
15962: CALL_OW 136
15966: GO 15943
15968: POP
15969: POP
// end ;
15970: PPOPN 2
15972: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15973: LD_EXP 18
15977: PUSH
15978: LD_EXP 49
15982: AND
15983: IFFALSE 16123
15985: GO 15987
15987: DISABLE
15988: LD_INT 0
15990: PPUSH
15991: PPUSH
// begin ToLua ( displayPowell(); ) ;
15992: LD_STRING displayPowell();
15994: PPUSH
15995: CALL_OW 559
// uc_side := 0 ;
15999: LD_ADDR_OWVAR 20
16003: PUSH
16004: LD_INT 0
16006: ST_TO_ADDR
// uc_nation := 2 ;
16007: LD_ADDR_OWVAR 21
16011: PUSH
16012: LD_INT 2
16014: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16015: LD_ADDR_OWVAR 37
16019: PUSH
16020: LD_INT 14
16022: ST_TO_ADDR
// vc_engine := engine_siberite ;
16023: LD_ADDR_OWVAR 39
16027: PUSH
16028: LD_INT 3
16030: ST_TO_ADDR
// vc_control := control_apeman ;
16031: LD_ADDR_OWVAR 38
16035: PUSH
16036: LD_INT 5
16038: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16039: LD_ADDR_OWVAR 40
16043: PUSH
16044: LD_INT 29
16046: ST_TO_ADDR
// un := CreateVehicle ;
16047: LD_ADDR_VAR 0 2
16051: PUSH
16052: CALL_OW 45
16056: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16057: LD_VAR 0 2
16061: PPUSH
16062: LD_INT 1
16064: PPUSH
16065: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16069: LD_INT 35
16071: PPUSH
16072: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16076: LD_VAR 0 2
16080: PPUSH
16081: LD_INT 22
16083: PUSH
16084: LD_OWVAR 2
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PPUSH
16093: CALL_OW 69
16097: PPUSH
16098: LD_VAR 0 2
16102: PPUSH
16103: CALL_OW 74
16107: PPUSH
16108: CALL_OW 115
// until IsDead ( un ) ;
16112: LD_VAR 0 2
16116: PPUSH
16117: CALL_OW 301
16121: IFFALSE 16069
// end ;
16123: PPOPN 2
16125: END
// every 0 0$1 trigger StreamModeActive and sStu do
16126: LD_EXP 18
16130: PUSH
16131: LD_EXP 57
16135: AND
16136: IFFALSE 16152
16138: GO 16140
16140: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16141: LD_STRING displayStucuk();
16143: PPUSH
16144: CALL_OW 559
// ResetFog ;
16148: CALL_OW 335
// end ;
16152: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16153: LD_EXP 18
16157: PUSH
16158: LD_EXP 50
16162: AND
16163: IFFALSE 16304
16165: GO 16167
16167: DISABLE
16168: LD_INT 0
16170: PPUSH
16171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16172: LD_ADDR_VAR 0 2
16176: PUSH
16177: LD_INT 22
16179: PUSH
16180: LD_OWVAR 2
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 21
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PPUSH
16203: CALL_OW 69
16207: ST_TO_ADDR
// if not tmp then
16208: LD_VAR 0 2
16212: NOT
16213: IFFALSE 16217
// exit ;
16215: GO 16304
// un := tmp [ rand ( 1 , tmp ) ] ;
16217: LD_ADDR_VAR 0 1
16221: PUSH
16222: LD_VAR 0 2
16226: PUSH
16227: LD_INT 1
16229: PPUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL_OW 12
16239: ARRAY
16240: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16241: LD_VAR 0 1
16245: PPUSH
16246: LD_INT 0
16248: PPUSH
16249: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16253: LD_VAR 0 1
16257: PPUSH
16258: LD_OWVAR 3
16262: PUSH
16263: LD_VAR 0 1
16267: DIFF
16268: PPUSH
16269: LD_VAR 0 1
16273: PPUSH
16274: CALL_OW 74
16278: PPUSH
16279: CALL_OW 115
// wait ( 0 0$20 ) ;
16283: LD_INT 700
16285: PPUSH
16286: CALL_OW 67
// SetSide ( un , your_side ) ;
16290: LD_VAR 0 1
16294: PPUSH
16295: LD_OWVAR 2
16299: PPUSH
16300: CALL_OW 235
// end ;
16304: PPOPN 2
16306: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16307: LD_EXP 18
16311: PUSH
16312: LD_EXP 51
16316: AND
16317: IFFALSE 16423
16319: GO 16321
16321: DISABLE
16322: LD_INT 0
16324: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16325: LD_ADDR_VAR 0 1
16329: PUSH
16330: LD_INT 22
16332: PUSH
16333: LD_OWVAR 2
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 2
16344: PUSH
16345: LD_INT 30
16347: PUSH
16348: LD_INT 0
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 30
16357: PUSH
16358: LD_INT 1
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PPUSH
16374: CALL_OW 69
16378: ST_TO_ADDR
// if not depot then
16379: LD_VAR 0 1
16383: NOT
16384: IFFALSE 16388
// exit ;
16386: GO 16423
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16388: LD_VAR 0 1
16392: PUSH
16393: LD_INT 1
16395: ARRAY
16396: PPUSH
16397: CALL_OW 250
16401: PPUSH
16402: LD_VAR 0 1
16406: PUSH
16407: LD_INT 1
16409: ARRAY
16410: PPUSH
16411: CALL_OW 251
16415: PPUSH
16416: LD_INT 70
16418: PPUSH
16419: CALL_OW 495
// end ;
16423: PPOPN 1
16425: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16426: LD_EXP 18
16430: PUSH
16431: LD_EXP 52
16435: AND
16436: IFFALSE 16647
16438: GO 16440
16440: DISABLE
16441: LD_INT 0
16443: PPUSH
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16448: LD_ADDR_VAR 0 5
16452: PUSH
16453: LD_INT 22
16455: PUSH
16456: LD_OWVAR 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 21
16467: PUSH
16468: LD_INT 1
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL_OW 69
16483: ST_TO_ADDR
// if not tmp then
16484: LD_VAR 0 5
16488: NOT
16489: IFFALSE 16493
// exit ;
16491: GO 16647
// for i in tmp do
16493: LD_ADDR_VAR 0 1
16497: PUSH
16498: LD_VAR 0 5
16502: PUSH
16503: FOR_IN
16504: IFFALSE 16645
// begin d := rand ( 0 , 5 ) ;
16506: LD_ADDR_VAR 0 4
16510: PUSH
16511: LD_INT 0
16513: PPUSH
16514: LD_INT 5
16516: PPUSH
16517: CALL_OW 12
16521: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16522: LD_ADDR_VAR 0 2
16526: PUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: CALL_OW 250
16536: PPUSH
16537: LD_VAR 0 4
16541: PPUSH
16542: LD_INT 3
16544: PPUSH
16545: LD_INT 12
16547: PPUSH
16548: CALL_OW 12
16552: PPUSH
16553: CALL_OW 272
16557: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16558: LD_ADDR_VAR 0 3
16562: PUSH
16563: LD_VAR 0 1
16567: PPUSH
16568: CALL_OW 251
16572: PPUSH
16573: LD_VAR 0 4
16577: PPUSH
16578: LD_INT 3
16580: PPUSH
16581: LD_INT 12
16583: PPUSH
16584: CALL_OW 12
16588: PPUSH
16589: CALL_OW 273
16593: ST_TO_ADDR
// if ValidHex ( x , y ) then
16594: LD_VAR 0 2
16598: PPUSH
16599: LD_VAR 0 3
16603: PPUSH
16604: CALL_OW 488
16608: IFFALSE 16643
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16610: LD_VAR 0 1
16614: PPUSH
16615: LD_VAR 0 2
16619: PPUSH
16620: LD_VAR 0 3
16624: PPUSH
16625: LD_INT 3
16627: PPUSH
16628: LD_INT 6
16630: PPUSH
16631: CALL_OW 12
16635: PPUSH
16636: LD_INT 1
16638: PPUSH
16639: CALL_OW 483
// end ;
16643: GO 16503
16645: POP
16646: POP
// end ;
16647: PPOPN 5
16649: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16650: LD_EXP 18
16654: PUSH
16655: LD_EXP 53
16659: AND
16660: IFFALSE 16754
16662: GO 16664
16664: DISABLE
16665: LD_INT 0
16667: PPUSH
16668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16669: LD_ADDR_VAR 0 2
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_OWVAR 2
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 32
16688: PUSH
16689: LD_INT 1
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 21
16698: PUSH
16699: LD_INT 2
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: PPUSH
16711: CALL_OW 69
16715: ST_TO_ADDR
// if not tmp then
16716: LD_VAR 0 2
16720: NOT
16721: IFFALSE 16725
// exit ;
16723: GO 16754
// for i in tmp do
16725: LD_ADDR_VAR 0 1
16729: PUSH
16730: LD_VAR 0 2
16734: PUSH
16735: FOR_IN
16736: IFFALSE 16752
// SetFuel ( i , 0 ) ;
16738: LD_VAR 0 1
16742: PPUSH
16743: LD_INT 0
16745: PPUSH
16746: CALL_OW 240
16750: GO 16735
16752: POP
16753: POP
// end ;
16754: PPOPN 2
16756: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16757: LD_EXP 18
16761: PUSH
16762: LD_EXP 54
16766: AND
16767: IFFALSE 16833
16769: GO 16771
16771: DISABLE
16772: LD_INT 0
16774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16775: LD_ADDR_VAR 0 1
16779: PUSH
16780: LD_INT 22
16782: PUSH
16783: LD_OWVAR 2
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 30
16794: PUSH
16795: LD_INT 29
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PPUSH
16806: CALL_OW 69
16810: ST_TO_ADDR
// if not tmp then
16811: LD_VAR 0 1
16815: NOT
16816: IFFALSE 16820
// exit ;
16818: GO 16833
// DestroyUnit ( tmp [ 1 ] ) ;
16820: LD_VAR 0 1
16824: PUSH
16825: LD_INT 1
16827: ARRAY
16828: PPUSH
16829: CALL_OW 65
// end ;
16833: PPOPN 1
16835: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16836: LD_EXP 18
16840: PUSH
16841: LD_EXP 56
16845: AND
16846: IFFALSE 16975
16848: GO 16850
16850: DISABLE
16851: LD_INT 0
16853: PPUSH
// begin uc_side := 0 ;
16854: LD_ADDR_OWVAR 20
16858: PUSH
16859: LD_INT 0
16861: ST_TO_ADDR
// uc_nation := nation_arabian ;
16862: LD_ADDR_OWVAR 21
16866: PUSH
16867: LD_INT 2
16869: ST_TO_ADDR
// hc_gallery :=  ;
16870: LD_ADDR_OWVAR 33
16874: PUSH
16875: LD_STRING 
16877: ST_TO_ADDR
// hc_name :=  ;
16878: LD_ADDR_OWVAR 26
16882: PUSH
16883: LD_STRING 
16885: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16886: LD_INT 1
16888: PPUSH
16889: LD_INT 11
16891: PPUSH
16892: LD_INT 10
16894: PPUSH
16895: CALL_OW 380
// un := CreateHuman ;
16899: LD_ADDR_VAR 0 1
16903: PUSH
16904: CALL_OW 44
16908: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 1
16916: PPUSH
16917: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16921: LD_INT 35
16923: PPUSH
16924: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16928: LD_VAR 0 1
16932: PPUSH
16933: LD_INT 22
16935: PUSH
16936: LD_OWVAR 2
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 69
16949: PPUSH
16950: LD_VAR 0 1
16954: PPUSH
16955: CALL_OW 74
16959: PPUSH
16960: CALL_OW 115
// until IsDead ( un ) ;
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 301
16973: IFFALSE 16921
// end ;
16975: PPOPN 1
16977: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16978: LD_EXP 18
16982: PUSH
16983: LD_EXP 58
16987: AND
16988: IFFALSE 17000
16990: GO 16992
16992: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16993: LD_STRING earthquake(getX(game), 0, 32)
16995: PPUSH
16996: CALL_OW 559
17000: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17001: LD_EXP 18
17005: PUSH
17006: LD_EXP 59
17010: AND
17011: IFFALSE 17102
17013: GO 17015
17015: DISABLE
17016: LD_INT 0
17018: PPUSH
// begin enable ;
17019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17020: LD_ADDR_VAR 0 1
17024: PUSH
17025: LD_INT 22
17027: PUSH
17028: LD_OWVAR 2
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 21
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 33
17049: PUSH
17050: LD_INT 3
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: PPUSH
17062: CALL_OW 69
17066: ST_TO_ADDR
// if not tmp then
17067: LD_VAR 0 1
17071: NOT
17072: IFFALSE 17076
// exit ;
17074: GO 17102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17076: LD_VAR 0 1
17080: PUSH
17081: LD_INT 1
17083: PPUSH
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 12
17093: ARRAY
17094: PPUSH
17095: LD_INT 1
17097: PPUSH
17098: CALL_OW 234
// end ;
17102: PPOPN 1
17104: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17105: LD_EXP 18
17109: PUSH
17110: LD_EXP 60
17114: AND
17115: IFFALSE 17256
17117: GO 17119
17119: DISABLE
17120: LD_INT 0
17122: PPUSH
17123: PPUSH
17124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17125: LD_ADDR_VAR 0 3
17129: PUSH
17130: LD_INT 22
17132: PUSH
17133: LD_OWVAR 2
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 25
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PPUSH
17156: CALL_OW 69
17160: ST_TO_ADDR
// if not tmp then
17161: LD_VAR 0 3
17165: NOT
17166: IFFALSE 17170
// exit ;
17168: GO 17256
// un := tmp [ rand ( 1 , tmp ) ] ;
17170: LD_ADDR_VAR 0 2
17174: PUSH
17175: LD_VAR 0 3
17179: PUSH
17180: LD_INT 1
17182: PPUSH
17183: LD_VAR 0 3
17187: PPUSH
17188: CALL_OW 12
17192: ARRAY
17193: ST_TO_ADDR
// if Crawls ( un ) then
17194: LD_VAR 0 2
17198: PPUSH
17199: CALL_OW 318
17203: IFFALSE 17214
// ComWalk ( un ) ;
17205: LD_VAR 0 2
17209: PPUSH
17210: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17214: LD_VAR 0 2
17218: PPUSH
17219: LD_INT 9
17221: PPUSH
17222: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17226: LD_INT 28
17228: PPUSH
17229: LD_OWVAR 2
17233: PPUSH
17234: LD_INT 2
17236: PPUSH
17237: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17241: LD_INT 29
17243: PPUSH
17244: LD_OWVAR 2
17248: PPUSH
17249: LD_INT 2
17251: PPUSH
17252: CALL_OW 322
// end ;
17256: PPOPN 3
17258: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17259: LD_EXP 18
17263: PUSH
17264: LD_EXP 61
17268: AND
17269: IFFALSE 17380
17271: GO 17273
17273: DISABLE
17274: LD_INT 0
17276: PPUSH
17277: PPUSH
17278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17279: LD_ADDR_VAR 0 3
17283: PUSH
17284: LD_INT 22
17286: PUSH
17287: LD_OWVAR 2
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 25
17298: PUSH
17299: LD_INT 1
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PPUSH
17310: CALL_OW 69
17314: ST_TO_ADDR
// if not tmp then
17315: LD_VAR 0 3
17319: NOT
17320: IFFALSE 17324
// exit ;
17322: GO 17380
// un := tmp [ rand ( 1 , tmp ) ] ;
17324: LD_ADDR_VAR 0 2
17328: PUSH
17329: LD_VAR 0 3
17333: PUSH
17334: LD_INT 1
17336: PPUSH
17337: LD_VAR 0 3
17341: PPUSH
17342: CALL_OW 12
17346: ARRAY
17347: ST_TO_ADDR
// if Crawls ( un ) then
17348: LD_VAR 0 2
17352: PPUSH
17353: CALL_OW 318
17357: IFFALSE 17368
// ComWalk ( un ) ;
17359: LD_VAR 0 2
17363: PPUSH
17364: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17368: LD_VAR 0 2
17372: PPUSH
17373: LD_INT 8
17375: PPUSH
17376: CALL_OW 336
// end ;
17380: PPOPN 3
17382: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17383: LD_EXP 18
17387: PUSH
17388: LD_EXP 62
17392: AND
17393: IFFALSE 17537
17395: GO 17397
17397: DISABLE
17398: LD_INT 0
17400: PPUSH
17401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17402: LD_ADDR_VAR 0 2
17406: PUSH
17407: LD_INT 22
17409: PUSH
17410: LD_OWVAR 2
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 21
17421: PUSH
17422: LD_INT 2
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 34
17434: PUSH
17435: LD_INT 12
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 34
17444: PUSH
17445: LD_INT 51
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 34
17454: PUSH
17455: LD_INT 32
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: PPUSH
17473: CALL_OW 69
17477: ST_TO_ADDR
// if not tmp then
17478: LD_VAR 0 2
17482: NOT
17483: IFFALSE 17487
// exit ;
17485: GO 17537
// for i in tmp do
17487: LD_ADDR_VAR 0 1
17491: PUSH
17492: LD_VAR 0 2
17496: PUSH
17497: FOR_IN
17498: IFFALSE 17535
// if GetCargo ( i , mat_artifact ) = 0 then
17500: LD_VAR 0 1
17504: PPUSH
17505: LD_INT 4
17507: PPUSH
17508: CALL_OW 289
17512: PUSH
17513: LD_INT 0
17515: EQUAL
17516: IFFALSE 17533
// SetCargo ( i , mat_siberit , 100 ) ;
17518: LD_VAR 0 1
17522: PPUSH
17523: LD_INT 3
17525: PPUSH
17526: LD_INT 100
17528: PPUSH
17529: CALL_OW 290
17533: GO 17497
17535: POP
17536: POP
// end ;
17537: PPOPN 2
17539: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17540: LD_EXP 18
17544: PUSH
17545: LD_EXP 63
17549: AND
17550: IFFALSE 17733
17552: GO 17554
17554: DISABLE
17555: LD_INT 0
17557: PPUSH
17558: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17559: LD_ADDR_VAR 0 2
17563: PUSH
17564: LD_INT 22
17566: PUSH
17567: LD_OWVAR 2
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 69
17580: ST_TO_ADDR
// if not tmp then
17581: LD_VAR 0 2
17585: NOT
17586: IFFALSE 17590
// exit ;
17588: GO 17733
// for i := 1 to 2 do
17590: LD_ADDR_VAR 0 1
17594: PUSH
17595: DOUBLE
17596: LD_INT 1
17598: DEC
17599: ST_TO_ADDR
17600: LD_INT 2
17602: PUSH
17603: FOR_TO
17604: IFFALSE 17731
// begin uc_side := your_side ;
17606: LD_ADDR_OWVAR 20
17610: PUSH
17611: LD_OWVAR 2
17615: ST_TO_ADDR
// uc_nation := nation_american ;
17616: LD_ADDR_OWVAR 21
17620: PUSH
17621: LD_INT 1
17623: ST_TO_ADDR
// vc_chassis := us_morphling ;
17624: LD_ADDR_OWVAR 37
17628: PUSH
17629: LD_INT 5
17631: ST_TO_ADDR
// vc_engine := engine_siberite ;
17632: LD_ADDR_OWVAR 39
17636: PUSH
17637: LD_INT 3
17639: ST_TO_ADDR
// vc_control := control_computer ;
17640: LD_ADDR_OWVAR 38
17644: PUSH
17645: LD_INT 3
17647: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17648: LD_ADDR_OWVAR 40
17652: PUSH
17653: LD_INT 10
17655: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17656: LD_VAR 0 2
17660: PUSH
17661: LD_INT 1
17663: ARRAY
17664: PPUSH
17665: CALL_OW 310
17669: NOT
17670: IFFALSE 17717
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17672: CALL_OW 45
17676: PPUSH
17677: LD_VAR 0 2
17681: PUSH
17682: LD_INT 1
17684: ARRAY
17685: PPUSH
17686: CALL_OW 250
17690: PPUSH
17691: LD_VAR 0 2
17695: PUSH
17696: LD_INT 1
17698: ARRAY
17699: PPUSH
17700: CALL_OW 251
17704: PPUSH
17705: LD_INT 12
17707: PPUSH
17708: LD_INT 1
17710: PPUSH
17711: CALL_OW 50
17715: GO 17729
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17717: CALL_OW 45
17721: PPUSH
17722: LD_INT 1
17724: PPUSH
17725: CALL_OW 51
// end ;
17729: GO 17603
17731: POP
17732: POP
// end ;
17733: PPOPN 2
17735: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17736: LD_EXP 18
17740: PUSH
17741: LD_EXP 64
17745: AND
17746: IFFALSE 17968
17748: GO 17750
17750: DISABLE
17751: LD_INT 0
17753: PPUSH
17754: PPUSH
17755: PPUSH
17756: PPUSH
17757: PPUSH
17758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17759: LD_ADDR_VAR 0 6
17763: PUSH
17764: LD_INT 22
17766: PUSH
17767: LD_OWVAR 2
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 21
17778: PUSH
17779: LD_INT 1
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 3
17788: PUSH
17789: LD_INT 23
17791: PUSH
17792: LD_INT 0
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: LIST
17807: PPUSH
17808: CALL_OW 69
17812: ST_TO_ADDR
// if not tmp then
17813: LD_VAR 0 6
17817: NOT
17818: IFFALSE 17822
// exit ;
17820: GO 17968
// s1 := rand ( 1 , 4 ) ;
17822: LD_ADDR_VAR 0 2
17826: PUSH
17827: LD_INT 1
17829: PPUSH
17830: LD_INT 4
17832: PPUSH
17833: CALL_OW 12
17837: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17838: LD_ADDR_VAR 0 4
17842: PUSH
17843: LD_VAR 0 6
17847: PUSH
17848: LD_INT 1
17850: ARRAY
17851: PPUSH
17852: LD_VAR 0 2
17856: PPUSH
17857: CALL_OW 259
17861: ST_TO_ADDR
// if s1 = 1 then
17862: LD_VAR 0 2
17866: PUSH
17867: LD_INT 1
17869: EQUAL
17870: IFFALSE 17890
// s2 := rand ( 2 , 4 ) else
17872: LD_ADDR_VAR 0 3
17876: PUSH
17877: LD_INT 2
17879: PPUSH
17880: LD_INT 4
17882: PPUSH
17883: CALL_OW 12
17887: ST_TO_ADDR
17888: GO 17898
// s2 := 1 ;
17890: LD_ADDR_VAR 0 3
17894: PUSH
17895: LD_INT 1
17897: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17898: LD_ADDR_VAR 0 5
17902: PUSH
17903: LD_VAR 0 6
17907: PUSH
17908: LD_INT 1
17910: ARRAY
17911: PPUSH
17912: LD_VAR 0 3
17916: PPUSH
17917: CALL_OW 259
17921: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17922: LD_VAR 0 6
17926: PUSH
17927: LD_INT 1
17929: ARRAY
17930: PPUSH
17931: LD_VAR 0 2
17935: PPUSH
17936: LD_VAR 0 5
17940: PPUSH
17941: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17945: LD_VAR 0 6
17949: PUSH
17950: LD_INT 1
17952: ARRAY
17953: PPUSH
17954: LD_VAR 0 3
17958: PPUSH
17959: LD_VAR 0 4
17963: PPUSH
17964: CALL_OW 237
// end ;
17968: PPOPN 6
17970: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17971: LD_EXP 18
17975: PUSH
17976: LD_EXP 65
17980: AND
17981: IFFALSE 18060
17983: GO 17985
17985: DISABLE
17986: LD_INT 0
17988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17989: LD_ADDR_VAR 0 1
17993: PUSH
17994: LD_INT 22
17996: PUSH
17997: LD_OWVAR 2
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 30
18008: PUSH
18009: LD_INT 3
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PPUSH
18020: CALL_OW 69
18024: ST_TO_ADDR
// if not tmp then
18025: LD_VAR 0 1
18029: NOT
18030: IFFALSE 18034
// exit ;
18032: GO 18060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18034: LD_VAR 0 1
18038: PUSH
18039: LD_INT 1
18041: PPUSH
18042: LD_VAR 0 1
18046: PPUSH
18047: CALL_OW 12
18051: ARRAY
18052: PPUSH
18053: LD_INT 1
18055: PPUSH
18056: CALL_OW 234
// end ;
18060: PPOPN 1
18062: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18063: LD_EXP 18
18067: PUSH
18068: LD_EXP 66
18072: AND
18073: IFFALSE 18185
18075: GO 18077
18077: DISABLE
18078: LD_INT 0
18080: PPUSH
18081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18082: LD_ADDR_VAR 0 2
18086: PUSH
18087: LD_INT 22
18089: PUSH
18090: LD_OWVAR 2
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 2
18101: PUSH
18102: LD_INT 30
18104: PUSH
18105: LD_INT 27
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 30
18114: PUSH
18115: LD_INT 26
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 30
18124: PUSH
18125: LD_INT 28
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PPUSH
18142: CALL_OW 69
18146: ST_TO_ADDR
// if not tmp then
18147: LD_VAR 0 2
18151: NOT
18152: IFFALSE 18156
// exit ;
18154: GO 18185
// for i in tmp do
18156: LD_ADDR_VAR 0 1
18160: PUSH
18161: LD_VAR 0 2
18165: PUSH
18166: FOR_IN
18167: IFFALSE 18183
// SetLives ( i , 1 ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: LD_INT 1
18176: PPUSH
18177: CALL_OW 234
18181: GO 18166
18183: POP
18184: POP
// end ;
18185: PPOPN 2
18187: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18188: LD_EXP 18
18192: PUSH
18193: LD_EXP 67
18197: AND
18198: IFFALSE 18485
18200: GO 18202
18202: DISABLE
18203: LD_INT 0
18205: PPUSH
18206: PPUSH
18207: PPUSH
// begin i := rand ( 1 , 7 ) ;
18208: LD_ADDR_VAR 0 1
18212: PUSH
18213: LD_INT 1
18215: PPUSH
18216: LD_INT 7
18218: PPUSH
18219: CALL_OW 12
18223: ST_TO_ADDR
// case i of 1 :
18224: LD_VAR 0 1
18228: PUSH
18229: LD_INT 1
18231: DOUBLE
18232: EQUAL
18233: IFTRUE 18237
18235: GO 18247
18237: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18238: LD_STRING earthquake(getX(game), 0, 32)
18240: PPUSH
18241: CALL_OW 559
18245: GO 18485
18247: LD_INT 2
18249: DOUBLE
18250: EQUAL
18251: IFTRUE 18255
18253: GO 18269
18255: POP
// begin ToLua ( displayStucuk(); ) ;
18256: LD_STRING displayStucuk();
18258: PPUSH
18259: CALL_OW 559
// ResetFog ;
18263: CALL_OW 335
// end ; 3 :
18267: GO 18485
18269: LD_INT 3
18271: DOUBLE
18272: EQUAL
18273: IFTRUE 18277
18275: GO 18381
18277: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18278: LD_ADDR_VAR 0 2
18282: PUSH
18283: LD_INT 22
18285: PUSH
18286: LD_OWVAR 2
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 25
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PPUSH
18309: CALL_OW 69
18313: ST_TO_ADDR
// if not tmp then
18314: LD_VAR 0 2
18318: NOT
18319: IFFALSE 18323
// exit ;
18321: GO 18485
// un := tmp [ rand ( 1 , tmp ) ] ;
18323: LD_ADDR_VAR 0 3
18327: PUSH
18328: LD_VAR 0 2
18332: PUSH
18333: LD_INT 1
18335: PPUSH
18336: LD_VAR 0 2
18340: PPUSH
18341: CALL_OW 12
18345: ARRAY
18346: ST_TO_ADDR
// if Crawls ( un ) then
18347: LD_VAR 0 3
18351: PPUSH
18352: CALL_OW 318
18356: IFFALSE 18367
// ComWalk ( un ) ;
18358: LD_VAR 0 3
18362: PPUSH
18363: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18367: LD_VAR 0 3
18371: PPUSH
18372: LD_INT 8
18374: PPUSH
18375: CALL_OW 336
// end ; 4 :
18379: GO 18485
18381: LD_INT 4
18383: DOUBLE
18384: EQUAL
18385: IFTRUE 18389
18387: GO 18463
18389: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18390: LD_ADDR_VAR 0 2
18394: PUSH
18395: LD_INT 22
18397: PUSH
18398: LD_OWVAR 2
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 30
18409: PUSH
18410: LD_INT 29
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PPUSH
18421: CALL_OW 69
18425: ST_TO_ADDR
// if not tmp then
18426: LD_VAR 0 2
18430: NOT
18431: IFFALSE 18435
// exit ;
18433: GO 18485
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18435: LD_VAR 0 2
18439: PUSH
18440: LD_INT 1
18442: ARRAY
18443: PPUSH
18444: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18448: LD_VAR 0 2
18452: PUSH
18453: LD_INT 1
18455: ARRAY
18456: PPUSH
18457: CALL_OW 65
// end ; 5 .. 7 :
18461: GO 18485
18463: LD_INT 5
18465: DOUBLE
18466: GREATEREQUAL
18467: IFFALSE 18475
18469: LD_INT 7
18471: DOUBLE
18472: LESSEQUAL
18473: IFTRUE 18477
18475: GO 18484
18477: POP
// StreamSibBomb ; end ;
18478: CALL 14722 0 0
18482: GO 18485
18484: POP
// end ;
18485: PPOPN 3
18487: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18488: LD_EXP 18
18492: PUSH
18493: LD_EXP 68
18497: AND
18498: IFFALSE 18654
18500: GO 18502
18502: DISABLE
18503: LD_INT 0
18505: PPUSH
18506: PPUSH
18507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18508: LD_ADDR_VAR 0 2
18512: PUSH
18513: LD_INT 81
18515: PUSH
18516: LD_OWVAR 2
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 2
18527: PUSH
18528: LD_INT 21
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 21
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PPUSH
18557: CALL_OW 69
18561: ST_TO_ADDR
// if not tmp then
18562: LD_VAR 0 2
18566: NOT
18567: IFFALSE 18571
// exit ;
18569: GO 18654
// p := 0 ;
18571: LD_ADDR_VAR 0 3
18575: PUSH
18576: LD_INT 0
18578: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18579: LD_INT 35
18581: PPUSH
18582: CALL_OW 67
// p := p + 1 ;
18586: LD_ADDR_VAR 0 3
18590: PUSH
18591: LD_VAR 0 3
18595: PUSH
18596: LD_INT 1
18598: PLUS
18599: ST_TO_ADDR
// for i in tmp do
18600: LD_ADDR_VAR 0 1
18604: PUSH
18605: LD_VAR 0 2
18609: PUSH
18610: FOR_IN
18611: IFFALSE 18642
// if GetLives ( i ) < 1000 then
18613: LD_VAR 0 1
18617: PPUSH
18618: CALL_OW 256
18622: PUSH
18623: LD_INT 1000
18625: LESS
18626: IFFALSE 18640
// SetLives ( i , 1000 ) ;
18628: LD_VAR 0 1
18632: PPUSH
18633: LD_INT 1000
18635: PPUSH
18636: CALL_OW 234
18640: GO 18610
18642: POP
18643: POP
// until p > 20 ;
18644: LD_VAR 0 3
18648: PUSH
18649: LD_INT 20
18651: GREATER
18652: IFFALSE 18579
// end ;
18654: PPOPN 3
18656: END
// every 0 0$1 trigger StreamModeActive and sTime do
18657: LD_EXP 18
18661: PUSH
18662: LD_EXP 69
18666: AND
18667: IFFALSE 18702
18669: GO 18671
18671: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18672: LD_INT 28
18674: PPUSH
18675: LD_OWVAR 2
18679: PPUSH
18680: LD_INT 2
18682: PPUSH
18683: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18687: LD_INT 30
18689: PPUSH
18690: LD_OWVAR 2
18694: PPUSH
18695: LD_INT 2
18697: PPUSH
18698: CALL_OW 322
// end ;
18702: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18703: LD_EXP 18
18707: PUSH
18708: LD_EXP 70
18712: AND
18713: IFFALSE 18834
18715: GO 18717
18717: DISABLE
18718: LD_INT 0
18720: PPUSH
18721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18722: LD_ADDR_VAR 0 2
18726: PUSH
18727: LD_INT 22
18729: PUSH
18730: LD_OWVAR 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 21
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 3
18751: PUSH
18752: LD_INT 23
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: PPUSH
18771: CALL_OW 69
18775: ST_TO_ADDR
// if not tmp then
18776: LD_VAR 0 2
18780: NOT
18781: IFFALSE 18785
// exit ;
18783: GO 18834
// for i in tmp do
18785: LD_ADDR_VAR 0 1
18789: PUSH
18790: LD_VAR 0 2
18794: PUSH
18795: FOR_IN
18796: IFFALSE 18832
// begin if Crawls ( i ) then
18798: LD_VAR 0 1
18802: PPUSH
18803: CALL_OW 318
18807: IFFALSE 18818
// ComWalk ( i ) ;
18809: LD_VAR 0 1
18813: PPUSH
18814: CALL_OW 138
// SetClass ( i , 2 ) ;
18818: LD_VAR 0 1
18822: PPUSH
18823: LD_INT 2
18825: PPUSH
18826: CALL_OW 336
// end ;
18830: GO 18795
18832: POP
18833: POP
// end ;
18834: PPOPN 2
18836: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18837: LD_EXP 18
18841: PUSH
18842: LD_EXP 71
18846: AND
18847: IFFALSE 19135
18849: GO 18851
18851: DISABLE
18852: LD_INT 0
18854: PPUSH
18855: PPUSH
18856: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18857: LD_OWVAR 2
18861: PPUSH
18862: LD_INT 9
18864: PPUSH
18865: LD_INT 1
18867: PPUSH
18868: LD_INT 1
18870: PPUSH
18871: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18875: LD_INT 9
18877: PPUSH
18878: LD_OWVAR 2
18882: PPUSH
18883: CALL_OW 343
// uc_side := 9 ;
18887: LD_ADDR_OWVAR 20
18891: PUSH
18892: LD_INT 9
18894: ST_TO_ADDR
// uc_nation := 2 ;
18895: LD_ADDR_OWVAR 21
18899: PUSH
18900: LD_INT 2
18902: ST_TO_ADDR
// hc_name := Dark Warrior ;
18903: LD_ADDR_OWVAR 26
18907: PUSH
18908: LD_STRING Dark Warrior
18910: ST_TO_ADDR
// hc_gallery :=  ;
18911: LD_ADDR_OWVAR 33
18915: PUSH
18916: LD_STRING 
18918: ST_TO_ADDR
// hc_noskilllimit := true ;
18919: LD_ADDR_OWVAR 76
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18927: LD_ADDR_OWVAR 31
18931: PUSH
18932: LD_INT 30
18934: PUSH
18935: LD_INT 30
18937: PUSH
18938: LD_INT 30
18940: PUSH
18941: LD_INT 30
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: ST_TO_ADDR
// un := CreateHuman ;
18950: LD_ADDR_VAR 0 3
18954: PUSH
18955: CALL_OW 44
18959: ST_TO_ADDR
// hc_noskilllimit := false ;
18960: LD_ADDR_OWVAR 76
18964: PUSH
18965: LD_INT 0
18967: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18968: LD_VAR 0 3
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: CALL_OW 51
// ToLua ( playRanger() ) ;
18980: LD_STRING playRanger()
18982: PPUSH
18983: CALL_OW 559
// p := 0 ;
18987: LD_ADDR_VAR 0 2
18991: PUSH
18992: LD_INT 0
18994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18995: LD_INT 35
18997: PPUSH
18998: CALL_OW 67
// p := p + 1 ;
19002: LD_ADDR_VAR 0 2
19006: PUSH
19007: LD_VAR 0 2
19011: PUSH
19012: LD_INT 1
19014: PLUS
19015: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19016: LD_VAR 0 3
19020: PPUSH
19021: CALL_OW 256
19025: PUSH
19026: LD_INT 1000
19028: LESS
19029: IFFALSE 19043
// SetLives ( un , 1000 ) ;
19031: LD_VAR 0 3
19035: PPUSH
19036: LD_INT 1000
19038: PPUSH
19039: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19043: LD_VAR 0 3
19047: PPUSH
19048: LD_INT 81
19050: PUSH
19051: LD_OWVAR 2
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 91
19062: PUSH
19063: LD_VAR 0 3
19067: PUSH
19068: LD_INT 30
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 69
19084: PPUSH
19085: LD_VAR 0 3
19089: PPUSH
19090: CALL_OW 74
19094: PPUSH
19095: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19099: LD_VAR 0 2
19103: PUSH
19104: LD_INT 80
19106: GREATER
19107: PUSH
19108: LD_VAR 0 3
19112: PPUSH
19113: CALL_OW 301
19117: OR
19118: IFFALSE 18995
// if un then
19120: LD_VAR 0 3
19124: IFFALSE 19135
// RemoveUnit ( un ) ;
19126: LD_VAR 0 3
19130: PPUSH
19131: CALL_OW 64
// end ;
19135: PPOPN 3
19137: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19138: LD_EXP 72
19142: IFFALSE 19258
19144: GO 19146
19146: DISABLE
19147: LD_INT 0
19149: PPUSH
19150: PPUSH
19151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19152: LD_ADDR_VAR 0 2
19156: PUSH
19157: LD_INT 81
19159: PUSH
19160: LD_OWVAR 2
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 21
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PPUSH
19183: CALL_OW 69
19187: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19188: LD_STRING playComputer()
19190: PPUSH
19191: CALL_OW 559
// if not tmp then
19195: LD_VAR 0 2
19199: NOT
19200: IFFALSE 19204
// exit ;
19202: GO 19258
// for i in tmp do
19204: LD_ADDR_VAR 0 1
19208: PUSH
19209: LD_VAR 0 2
19213: PUSH
19214: FOR_IN
19215: IFFALSE 19256
// for j := 1 to 4 do
19217: LD_ADDR_VAR 0 3
19221: PUSH
19222: DOUBLE
19223: LD_INT 1
19225: DEC
19226: ST_TO_ADDR
19227: LD_INT 4
19229: PUSH
19230: FOR_TO
19231: IFFALSE 19252
// SetSkill ( i , j , 10 ) ;
19233: LD_VAR 0 1
19237: PPUSH
19238: LD_VAR 0 3
19242: PPUSH
19243: LD_INT 10
19245: PPUSH
19246: CALL_OW 237
19250: GO 19230
19252: POP
19253: POP
19254: GO 19214
19256: POP
19257: POP
// end ;
19258: PPOPN 3
19260: END
// every 0 0$1 trigger s30 do var i , tmp ;
19261: LD_EXP 73
19265: IFFALSE 19334
19267: GO 19269
19269: DISABLE
19270: LD_INT 0
19272: PPUSH
19273: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19274: LD_ADDR_VAR 0 2
19278: PUSH
19279: LD_INT 22
19281: PUSH
19282: LD_OWVAR 2
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PPUSH
19291: CALL_OW 69
19295: ST_TO_ADDR
// if not tmp then
19296: LD_VAR 0 2
19300: NOT
19301: IFFALSE 19305
// exit ;
19303: GO 19334
// for i in tmp do
19305: LD_ADDR_VAR 0 1
19309: PUSH
19310: LD_VAR 0 2
19314: PUSH
19315: FOR_IN
19316: IFFALSE 19332
// SetLives ( i , 300 ) ;
19318: LD_VAR 0 1
19322: PPUSH
19323: LD_INT 300
19325: PPUSH
19326: CALL_OW 234
19330: GO 19315
19332: POP
19333: POP
// end ;
19334: PPOPN 2
19336: END
// every 0 0$1 trigger s60 do var i , tmp ;
19337: LD_EXP 74
19341: IFFALSE 19410
19343: GO 19345
19345: DISABLE
19346: LD_INT 0
19348: PPUSH
19349: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19350: LD_ADDR_VAR 0 2
19354: PUSH
19355: LD_INT 22
19357: PUSH
19358: LD_OWVAR 2
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PPUSH
19367: CALL_OW 69
19371: ST_TO_ADDR
// if not tmp then
19372: LD_VAR 0 2
19376: NOT
19377: IFFALSE 19381
// exit ;
19379: GO 19410
// for i in tmp do
19381: LD_ADDR_VAR 0 1
19385: PUSH
19386: LD_VAR 0 2
19390: PUSH
19391: FOR_IN
19392: IFFALSE 19408
// SetLives ( i , 600 ) ;
19394: LD_VAR 0 1
19398: PPUSH
19399: LD_INT 600
19401: PPUSH
19402: CALL_OW 234
19406: GO 19391
19408: POP
19409: POP
// end ;
19410: PPOPN 2
19412: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19413: LD_INT 0
19415: PPUSH
// case cmd of 301 :
19416: LD_VAR 0 1
19420: PUSH
19421: LD_INT 301
19423: DOUBLE
19424: EQUAL
19425: IFTRUE 19429
19427: GO 19461
19429: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19430: LD_VAR 0 6
19434: PPUSH
19435: LD_VAR 0 7
19439: PPUSH
19440: LD_VAR 0 8
19444: PPUSH
19445: LD_VAR 0 4
19449: PPUSH
19450: LD_VAR 0 5
19454: PPUSH
19455: CALL 20662 0 5
19459: GO 19582
19461: LD_INT 302
19463: DOUBLE
19464: EQUAL
19465: IFTRUE 19469
19467: GO 19506
19469: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19470: LD_VAR 0 6
19474: PPUSH
19475: LD_VAR 0 7
19479: PPUSH
19480: LD_VAR 0 8
19484: PPUSH
19485: LD_VAR 0 9
19489: PPUSH
19490: LD_VAR 0 4
19494: PPUSH
19495: LD_VAR 0 5
19499: PPUSH
19500: CALL 20753 0 6
19504: GO 19582
19506: LD_INT 303
19508: DOUBLE
19509: EQUAL
19510: IFTRUE 19514
19512: GO 19551
19514: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19515: LD_VAR 0 6
19519: PPUSH
19520: LD_VAR 0 7
19524: PPUSH
19525: LD_VAR 0 8
19529: PPUSH
19530: LD_VAR 0 9
19534: PPUSH
19535: LD_VAR 0 4
19539: PPUSH
19540: LD_VAR 0 5
19544: PPUSH
19545: CALL 19587 0 6
19549: GO 19582
19551: LD_INT 304
19553: DOUBLE
19554: EQUAL
19555: IFTRUE 19559
19557: GO 19581
19559: POP
// hHackTeleport ( unit , x , y ) ; end ;
19560: LD_VAR 0 2
19564: PPUSH
19565: LD_VAR 0 4
19569: PPUSH
19570: LD_VAR 0 5
19574: PPUSH
19575: CALL 21346 0 3
19579: GO 19582
19581: POP
// end ;
19582: LD_VAR 0 12
19586: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19587: LD_INT 0
19589: PPUSH
19590: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19591: LD_VAR 0 1
19595: PUSH
19596: LD_INT 1
19598: LESS
19599: PUSH
19600: LD_VAR 0 1
19604: PUSH
19605: LD_INT 3
19607: GREATER
19608: OR
19609: PUSH
19610: LD_VAR 0 5
19614: PPUSH
19615: LD_VAR 0 6
19619: PPUSH
19620: CALL_OW 428
19624: OR
19625: IFFALSE 19629
// exit ;
19627: GO 20349
// uc_side := your_side ;
19629: LD_ADDR_OWVAR 20
19633: PUSH
19634: LD_OWVAR 2
19638: ST_TO_ADDR
// uc_nation := nation ;
19639: LD_ADDR_OWVAR 21
19643: PUSH
19644: LD_VAR 0 1
19648: ST_TO_ADDR
// bc_level = 1 ;
19649: LD_ADDR_OWVAR 43
19653: PUSH
19654: LD_INT 1
19656: ST_TO_ADDR
// case btype of 1 :
19657: LD_VAR 0 2
19661: PUSH
19662: LD_INT 1
19664: DOUBLE
19665: EQUAL
19666: IFTRUE 19670
19668: GO 19681
19670: POP
// bc_type := b_depot ; 2 :
19671: LD_ADDR_OWVAR 42
19675: PUSH
19676: LD_INT 0
19678: ST_TO_ADDR
19679: GO 20293
19681: LD_INT 2
19683: DOUBLE
19684: EQUAL
19685: IFTRUE 19689
19687: GO 19700
19689: POP
// bc_type := b_warehouse ; 3 :
19690: LD_ADDR_OWVAR 42
19694: PUSH
19695: LD_INT 1
19697: ST_TO_ADDR
19698: GO 20293
19700: LD_INT 3
19702: DOUBLE
19703: EQUAL
19704: IFTRUE 19708
19706: GO 19719
19708: POP
// bc_type := b_lab ; 4 .. 9 :
19709: LD_ADDR_OWVAR 42
19713: PUSH
19714: LD_INT 6
19716: ST_TO_ADDR
19717: GO 20293
19719: LD_INT 4
19721: DOUBLE
19722: GREATEREQUAL
19723: IFFALSE 19731
19725: LD_INT 9
19727: DOUBLE
19728: LESSEQUAL
19729: IFTRUE 19733
19731: GO 19785
19733: POP
// begin bc_type := b_lab_half ;
19734: LD_ADDR_OWVAR 42
19738: PUSH
19739: LD_INT 7
19741: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19742: LD_ADDR_OWVAR 44
19746: PUSH
19747: LD_INT 10
19749: PUSH
19750: LD_INT 11
19752: PUSH
19753: LD_INT 12
19755: PUSH
19756: LD_INT 15
19758: PUSH
19759: LD_INT 14
19761: PUSH
19762: LD_INT 13
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: PUSH
19773: LD_VAR 0 2
19777: PUSH
19778: LD_INT 3
19780: MINUS
19781: ARRAY
19782: ST_TO_ADDR
// end ; 10 .. 13 :
19783: GO 20293
19785: LD_INT 10
19787: DOUBLE
19788: GREATEREQUAL
19789: IFFALSE 19797
19791: LD_INT 13
19793: DOUBLE
19794: LESSEQUAL
19795: IFTRUE 19799
19797: GO 19876
19799: POP
// begin bc_type := b_lab_full ;
19800: LD_ADDR_OWVAR 42
19804: PUSH
19805: LD_INT 8
19807: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19808: LD_ADDR_OWVAR 44
19812: PUSH
19813: LD_INT 10
19815: PUSH
19816: LD_INT 12
19818: PUSH
19819: LD_INT 14
19821: PUSH
19822: LD_INT 13
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: PUSH
19831: LD_VAR 0 2
19835: PUSH
19836: LD_INT 9
19838: MINUS
19839: ARRAY
19840: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19841: LD_ADDR_OWVAR 45
19845: PUSH
19846: LD_INT 11
19848: PUSH
19849: LD_INT 15
19851: PUSH
19852: LD_INT 12
19854: PUSH
19855: LD_INT 15
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: PUSH
19864: LD_VAR 0 2
19868: PUSH
19869: LD_INT 9
19871: MINUS
19872: ARRAY
19873: ST_TO_ADDR
// end ; 14 :
19874: GO 20293
19876: LD_INT 14
19878: DOUBLE
19879: EQUAL
19880: IFTRUE 19884
19882: GO 19895
19884: POP
// bc_type := b_workshop ; 15 :
19885: LD_ADDR_OWVAR 42
19889: PUSH
19890: LD_INT 2
19892: ST_TO_ADDR
19893: GO 20293
19895: LD_INT 15
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 19914
19903: POP
// bc_type := b_factory ; 16 :
19904: LD_ADDR_OWVAR 42
19908: PUSH
19909: LD_INT 3
19911: ST_TO_ADDR
19912: GO 20293
19914: LD_INT 16
19916: DOUBLE
19917: EQUAL
19918: IFTRUE 19922
19920: GO 19933
19922: POP
// bc_type := b_ext_gun ; 17 :
19923: LD_ADDR_OWVAR 42
19927: PUSH
19928: LD_INT 17
19930: ST_TO_ADDR
19931: GO 20293
19933: LD_INT 17
19935: DOUBLE
19936: EQUAL
19937: IFTRUE 19941
19939: GO 19969
19941: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19942: LD_ADDR_OWVAR 42
19946: PUSH
19947: LD_INT 19
19949: PUSH
19950: LD_INT 23
19952: PUSH
19953: LD_INT 19
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: PUSH
19961: LD_VAR 0 1
19965: ARRAY
19966: ST_TO_ADDR
19967: GO 20293
19969: LD_INT 18
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 19988
19977: POP
// bc_type := b_ext_radar ; 19 :
19978: LD_ADDR_OWVAR 42
19982: PUSH
19983: LD_INT 20
19985: ST_TO_ADDR
19986: GO 20293
19988: LD_INT 19
19990: DOUBLE
19991: EQUAL
19992: IFTRUE 19996
19994: GO 20007
19996: POP
// bc_type := b_ext_radio ; 20 :
19997: LD_ADDR_OWVAR 42
20001: PUSH
20002: LD_INT 22
20004: ST_TO_ADDR
20005: GO 20293
20007: LD_INT 20
20009: DOUBLE
20010: EQUAL
20011: IFTRUE 20015
20013: GO 20026
20015: POP
// bc_type := b_ext_siberium ; 21 :
20016: LD_ADDR_OWVAR 42
20020: PUSH
20021: LD_INT 21
20023: ST_TO_ADDR
20024: GO 20293
20026: LD_INT 21
20028: DOUBLE
20029: EQUAL
20030: IFTRUE 20034
20032: GO 20045
20034: POP
// bc_type := b_ext_computer ; 22 :
20035: LD_ADDR_OWVAR 42
20039: PUSH
20040: LD_INT 24
20042: ST_TO_ADDR
20043: GO 20293
20045: LD_INT 22
20047: DOUBLE
20048: EQUAL
20049: IFTRUE 20053
20051: GO 20064
20053: POP
// bc_type := b_ext_track ; 23 :
20054: LD_ADDR_OWVAR 42
20058: PUSH
20059: LD_INT 16
20061: ST_TO_ADDR
20062: GO 20293
20064: LD_INT 23
20066: DOUBLE
20067: EQUAL
20068: IFTRUE 20072
20070: GO 20083
20072: POP
// bc_type := b_ext_laser ; 24 :
20073: LD_ADDR_OWVAR 42
20077: PUSH
20078: LD_INT 25
20080: ST_TO_ADDR
20081: GO 20293
20083: LD_INT 24
20085: DOUBLE
20086: EQUAL
20087: IFTRUE 20091
20089: GO 20102
20091: POP
// bc_type := b_control_tower ; 25 :
20092: LD_ADDR_OWVAR 42
20096: PUSH
20097: LD_INT 36
20099: ST_TO_ADDR
20100: GO 20293
20102: LD_INT 25
20104: DOUBLE
20105: EQUAL
20106: IFTRUE 20110
20108: GO 20121
20110: POP
// bc_type := b_breastwork ; 26 :
20111: LD_ADDR_OWVAR 42
20115: PUSH
20116: LD_INT 31
20118: ST_TO_ADDR
20119: GO 20293
20121: LD_INT 26
20123: DOUBLE
20124: EQUAL
20125: IFTRUE 20129
20127: GO 20140
20129: POP
// bc_type := b_bunker ; 27 :
20130: LD_ADDR_OWVAR 42
20134: PUSH
20135: LD_INT 32
20137: ST_TO_ADDR
20138: GO 20293
20140: LD_INT 27
20142: DOUBLE
20143: EQUAL
20144: IFTRUE 20148
20146: GO 20159
20148: POP
// bc_type := b_turret ; 28 :
20149: LD_ADDR_OWVAR 42
20153: PUSH
20154: LD_INT 33
20156: ST_TO_ADDR
20157: GO 20293
20159: LD_INT 28
20161: DOUBLE
20162: EQUAL
20163: IFTRUE 20167
20165: GO 20178
20167: POP
// bc_type := b_armoury ; 29 :
20168: LD_ADDR_OWVAR 42
20172: PUSH
20173: LD_INT 4
20175: ST_TO_ADDR
20176: GO 20293
20178: LD_INT 29
20180: DOUBLE
20181: EQUAL
20182: IFTRUE 20186
20184: GO 20197
20186: POP
// bc_type := b_barracks ; 30 :
20187: LD_ADDR_OWVAR 42
20191: PUSH
20192: LD_INT 5
20194: ST_TO_ADDR
20195: GO 20293
20197: LD_INT 30
20199: DOUBLE
20200: EQUAL
20201: IFTRUE 20205
20203: GO 20216
20205: POP
// bc_type := b_solar_power ; 31 :
20206: LD_ADDR_OWVAR 42
20210: PUSH
20211: LD_INT 27
20213: ST_TO_ADDR
20214: GO 20293
20216: LD_INT 31
20218: DOUBLE
20219: EQUAL
20220: IFTRUE 20224
20222: GO 20235
20224: POP
// bc_type := b_oil_power ; 32 :
20225: LD_ADDR_OWVAR 42
20229: PUSH
20230: LD_INT 26
20232: ST_TO_ADDR
20233: GO 20293
20235: LD_INT 32
20237: DOUBLE
20238: EQUAL
20239: IFTRUE 20243
20241: GO 20254
20243: POP
// bc_type := b_siberite_power ; 33 :
20244: LD_ADDR_OWVAR 42
20248: PUSH
20249: LD_INT 28
20251: ST_TO_ADDR
20252: GO 20293
20254: LD_INT 33
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20273
20262: POP
// bc_type := b_oil_mine ; 34 :
20263: LD_ADDR_OWVAR 42
20267: PUSH
20268: LD_INT 29
20270: ST_TO_ADDR
20271: GO 20293
20273: LD_INT 34
20275: DOUBLE
20276: EQUAL
20277: IFTRUE 20281
20279: GO 20292
20281: POP
// bc_type := b_siberite_mine ; end ;
20282: LD_ADDR_OWVAR 42
20286: PUSH
20287: LD_INT 30
20289: ST_TO_ADDR
20290: GO 20293
20292: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20293: LD_ADDR_VAR 0 8
20297: PUSH
20298: LD_VAR 0 5
20302: PPUSH
20303: LD_VAR 0 6
20307: PPUSH
20308: LD_VAR 0 3
20312: PPUSH
20313: CALL_OW 47
20317: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20318: LD_OWVAR 42
20322: PUSH
20323: LD_INT 32
20325: PUSH
20326: LD_INT 33
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: IN
20333: IFFALSE 20349
// PlaceWeaponTurret ( b , weapon ) ;
20335: LD_VAR 0 8
20339: PPUSH
20340: LD_VAR 0 4
20344: PPUSH
20345: CALL_OW 431
// end ;
20349: LD_VAR 0 7
20353: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20354: LD_INT 0
20356: PPUSH
20357: PPUSH
20358: PPUSH
20359: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20360: LD_ADDR_VAR 0 4
20364: PUSH
20365: LD_INT 22
20367: PUSH
20368: LD_OWVAR 2
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: LD_INT 30
20382: PUSH
20383: LD_INT 0
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 30
20392: PUSH
20393: LD_INT 1
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: LIST
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PPUSH
20409: CALL_OW 69
20413: ST_TO_ADDR
// if not tmp then
20414: LD_VAR 0 4
20418: NOT
20419: IFFALSE 20423
// exit ;
20421: GO 20482
// for i in tmp do
20423: LD_ADDR_VAR 0 2
20427: PUSH
20428: LD_VAR 0 4
20432: PUSH
20433: FOR_IN
20434: IFFALSE 20480
// for j = 1 to 3 do
20436: LD_ADDR_VAR 0 3
20440: PUSH
20441: DOUBLE
20442: LD_INT 1
20444: DEC
20445: ST_TO_ADDR
20446: LD_INT 3
20448: PUSH
20449: FOR_TO
20450: IFFALSE 20476
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20452: LD_VAR 0 2
20456: PPUSH
20457: CALL_OW 274
20461: PPUSH
20462: LD_VAR 0 3
20466: PPUSH
20467: LD_INT 99999
20469: PPUSH
20470: CALL_OW 277
20474: GO 20449
20476: POP
20477: POP
20478: GO 20433
20480: POP
20481: POP
// end ;
20482: LD_VAR 0 1
20486: RET
// export function hHackSetLevel10 ; var i , j ; begin
20487: LD_INT 0
20489: PPUSH
20490: PPUSH
20491: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20492: LD_ADDR_VAR 0 2
20496: PUSH
20497: LD_INT 21
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PPUSH
20507: CALL_OW 69
20511: PUSH
20512: FOR_IN
20513: IFFALSE 20565
// if IsSelected ( i ) then
20515: LD_VAR 0 2
20519: PPUSH
20520: CALL_OW 306
20524: IFFALSE 20563
// begin for j := 1 to 4 do
20526: LD_ADDR_VAR 0 3
20530: PUSH
20531: DOUBLE
20532: LD_INT 1
20534: DEC
20535: ST_TO_ADDR
20536: LD_INT 4
20538: PUSH
20539: FOR_TO
20540: IFFALSE 20561
// SetSkill ( i , j , 10 ) ;
20542: LD_VAR 0 2
20546: PPUSH
20547: LD_VAR 0 3
20551: PPUSH
20552: LD_INT 10
20554: PPUSH
20555: CALL_OW 237
20559: GO 20539
20561: POP
20562: POP
// end ;
20563: GO 20512
20565: POP
20566: POP
// end ;
20567: LD_VAR 0 1
20571: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20572: LD_INT 0
20574: PPUSH
20575: PPUSH
20576: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20577: LD_ADDR_VAR 0 2
20581: PUSH
20582: LD_INT 22
20584: PUSH
20585: LD_OWVAR 2
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 21
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PPUSH
20608: CALL_OW 69
20612: PUSH
20613: FOR_IN
20614: IFFALSE 20655
// begin for j := 1 to 4 do
20616: LD_ADDR_VAR 0 3
20620: PUSH
20621: DOUBLE
20622: LD_INT 1
20624: DEC
20625: ST_TO_ADDR
20626: LD_INT 4
20628: PUSH
20629: FOR_TO
20630: IFFALSE 20651
// SetSkill ( i , j , 10 ) ;
20632: LD_VAR 0 2
20636: PPUSH
20637: LD_VAR 0 3
20641: PPUSH
20642: LD_INT 10
20644: PPUSH
20645: CALL_OW 237
20649: GO 20629
20651: POP
20652: POP
// end ;
20653: GO 20613
20655: POP
20656: POP
// end ;
20657: LD_VAR 0 1
20661: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20662: LD_INT 0
20664: PPUSH
// uc_side := your_side ;
20665: LD_ADDR_OWVAR 20
20669: PUSH
20670: LD_OWVAR 2
20674: ST_TO_ADDR
// uc_nation := nation ;
20675: LD_ADDR_OWVAR 21
20679: PUSH
20680: LD_VAR 0 1
20684: ST_TO_ADDR
// InitHc ;
20685: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20689: LD_INT 0
20691: PPUSH
20692: LD_VAR 0 2
20696: PPUSH
20697: LD_VAR 0 3
20701: PPUSH
20702: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20706: LD_VAR 0 4
20710: PPUSH
20711: LD_VAR 0 5
20715: PPUSH
20716: CALL_OW 428
20720: PUSH
20721: LD_INT 0
20723: EQUAL
20724: IFFALSE 20748
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20726: CALL_OW 44
20730: PPUSH
20731: LD_VAR 0 4
20735: PPUSH
20736: LD_VAR 0 5
20740: PPUSH
20741: LD_INT 1
20743: PPUSH
20744: CALL_OW 48
// end ;
20748: LD_VAR 0 6
20752: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20753: LD_INT 0
20755: PPUSH
20756: PPUSH
// uc_side := your_side ;
20757: LD_ADDR_OWVAR 20
20761: PUSH
20762: LD_OWVAR 2
20766: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20767: LD_VAR 0 1
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: LD_INT 3
20780: PUSH
20781: LD_INT 4
20783: PUSH
20784: LD_INT 5
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: IN
20794: IFFALSE 20806
// uc_nation := nation_american else
20796: LD_ADDR_OWVAR 21
20800: PUSH
20801: LD_INT 1
20803: ST_TO_ADDR
20804: GO 20849
// if chassis in [ 11 , 12 , 13 , 14 ] then
20806: LD_VAR 0 1
20810: PUSH
20811: LD_INT 11
20813: PUSH
20814: LD_INT 12
20816: PUSH
20817: LD_INT 13
20819: PUSH
20820: LD_INT 14
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: IN
20829: IFFALSE 20841
// uc_nation := nation_arabian else
20831: LD_ADDR_OWVAR 21
20835: PUSH
20836: LD_INT 2
20838: ST_TO_ADDR
20839: GO 20849
// uc_nation := nation_russian ;
20841: LD_ADDR_OWVAR 21
20845: PUSH
20846: LD_INT 3
20848: ST_TO_ADDR
// vc_chassis := chassis ;
20849: LD_ADDR_OWVAR 37
20853: PUSH
20854: LD_VAR 0 1
20858: ST_TO_ADDR
// vc_engine := engine ;
20859: LD_ADDR_OWVAR 39
20863: PUSH
20864: LD_VAR 0 2
20868: ST_TO_ADDR
// vc_control := control ;
20869: LD_ADDR_OWVAR 38
20873: PUSH
20874: LD_VAR 0 3
20878: ST_TO_ADDR
// vc_weapon := weapon ;
20879: LD_ADDR_OWVAR 40
20883: PUSH
20884: LD_VAR 0 4
20888: ST_TO_ADDR
// un := CreateVehicle ;
20889: LD_ADDR_VAR 0 8
20893: PUSH
20894: CALL_OW 45
20898: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20899: LD_VAR 0 8
20903: PPUSH
20904: LD_INT 0
20906: PPUSH
20907: LD_INT 5
20909: PPUSH
20910: CALL_OW 12
20914: PPUSH
20915: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20919: LD_VAR 0 8
20923: PPUSH
20924: LD_VAR 0 5
20928: PPUSH
20929: LD_VAR 0 6
20933: PPUSH
20934: LD_INT 1
20936: PPUSH
20937: CALL_OW 48
// end ;
20941: LD_VAR 0 7
20945: RET
// export hInvincible ; every 1 do
20946: GO 20948
20948: DISABLE
// hInvincible := [ ] ;
20949: LD_ADDR_EXP 75
20953: PUSH
20954: EMPTY
20955: ST_TO_ADDR
20956: END
// every 10 do var i ;
20957: GO 20959
20959: DISABLE
20960: LD_INT 0
20962: PPUSH
// begin enable ;
20963: ENABLE
// if not hInvincible then
20964: LD_EXP 75
20968: NOT
20969: IFFALSE 20973
// exit ;
20971: GO 21017
// for i in hInvincible do
20973: LD_ADDR_VAR 0 1
20977: PUSH
20978: LD_EXP 75
20982: PUSH
20983: FOR_IN
20984: IFFALSE 21015
// if GetLives ( i ) < 1000 then
20986: LD_VAR 0 1
20990: PPUSH
20991: CALL_OW 256
20995: PUSH
20996: LD_INT 1000
20998: LESS
20999: IFFALSE 21013
// SetLives ( i , 1000 ) ;
21001: LD_VAR 0 1
21005: PPUSH
21006: LD_INT 1000
21008: PPUSH
21009: CALL_OW 234
21013: GO 20983
21015: POP
21016: POP
// end ;
21017: PPOPN 1
21019: END
// export function hHackInvincible ; var i ; begin
21020: LD_INT 0
21022: PPUSH
21023: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21024: LD_ADDR_VAR 0 2
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: LD_INT 21
21034: PUSH
21035: LD_INT 1
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 21
21044: PUSH
21045: LD_INT 2
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: PPUSH
21057: CALL_OW 69
21061: PUSH
21062: FOR_IN
21063: IFFALSE 21124
// if IsSelected ( i ) then
21065: LD_VAR 0 2
21069: PPUSH
21070: CALL_OW 306
21074: IFFALSE 21122
// begin if i in hInvincible then
21076: LD_VAR 0 2
21080: PUSH
21081: LD_EXP 75
21085: IN
21086: IFFALSE 21106
// hInvincible := hInvincible diff i else
21088: LD_ADDR_EXP 75
21092: PUSH
21093: LD_EXP 75
21097: PUSH
21098: LD_VAR 0 2
21102: DIFF
21103: ST_TO_ADDR
21104: GO 21122
// hInvincible := hInvincible union i ;
21106: LD_ADDR_EXP 75
21110: PUSH
21111: LD_EXP 75
21115: PUSH
21116: LD_VAR 0 2
21120: UNION
21121: ST_TO_ADDR
// end ;
21122: GO 21062
21124: POP
21125: POP
// end ;
21126: LD_VAR 0 1
21130: RET
// export function hHackInvisible ; var i , j ; begin
21131: LD_INT 0
21133: PPUSH
21134: PPUSH
21135: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21136: LD_ADDR_VAR 0 2
21140: PUSH
21141: LD_INT 21
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PPUSH
21151: CALL_OW 69
21155: PUSH
21156: FOR_IN
21157: IFFALSE 21181
// if IsSelected ( i ) then
21159: LD_VAR 0 2
21163: PPUSH
21164: CALL_OW 306
21168: IFFALSE 21179
// ComForceInvisible ( i ) ;
21170: LD_VAR 0 2
21174: PPUSH
21175: CALL_OW 496
21179: GO 21156
21181: POP
21182: POP
// end ;
21183: LD_VAR 0 1
21187: RET
// export function hHackChangeYourSide ; begin
21188: LD_INT 0
21190: PPUSH
// if your_side = 8 then
21191: LD_OWVAR 2
21195: PUSH
21196: LD_INT 8
21198: EQUAL
21199: IFFALSE 21211
// your_side := 0 else
21201: LD_ADDR_OWVAR 2
21205: PUSH
21206: LD_INT 0
21208: ST_TO_ADDR
21209: GO 21225
// your_side := your_side + 1 ;
21211: LD_ADDR_OWVAR 2
21215: PUSH
21216: LD_OWVAR 2
21220: PUSH
21221: LD_INT 1
21223: PLUS
21224: ST_TO_ADDR
// end ;
21225: LD_VAR 0 1
21229: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21230: LD_INT 0
21232: PPUSH
21233: PPUSH
21234: PPUSH
// for i in all_units do
21235: LD_ADDR_VAR 0 2
21239: PUSH
21240: LD_OWVAR 3
21244: PUSH
21245: FOR_IN
21246: IFFALSE 21324
// if IsSelected ( i ) then
21248: LD_VAR 0 2
21252: PPUSH
21253: CALL_OW 306
21257: IFFALSE 21322
// begin j := GetSide ( i ) ;
21259: LD_ADDR_VAR 0 3
21263: PUSH
21264: LD_VAR 0 2
21268: PPUSH
21269: CALL_OW 255
21273: ST_TO_ADDR
// if j = 8 then
21274: LD_VAR 0 3
21278: PUSH
21279: LD_INT 8
21281: EQUAL
21282: IFFALSE 21294
// j := 0 else
21284: LD_ADDR_VAR 0 3
21288: PUSH
21289: LD_INT 0
21291: ST_TO_ADDR
21292: GO 21308
// j := j + 1 ;
21294: LD_ADDR_VAR 0 3
21298: PUSH
21299: LD_VAR 0 3
21303: PUSH
21304: LD_INT 1
21306: PLUS
21307: ST_TO_ADDR
// SetSide ( i , j ) ;
21308: LD_VAR 0 2
21312: PPUSH
21313: LD_VAR 0 3
21317: PPUSH
21318: CALL_OW 235
// end ;
21322: GO 21245
21324: POP
21325: POP
// end ;
21326: LD_VAR 0 1
21330: RET
// export function hHackFog ; begin
21331: LD_INT 0
21333: PPUSH
// FogOff ( true ) ;
21334: LD_INT 1
21336: PPUSH
21337: CALL_OW 344
// end ;
21341: LD_VAR 0 1
21345: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21346: LD_INT 0
21348: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21349: LD_VAR 0 1
21353: PPUSH
21354: LD_VAR 0 2
21358: PPUSH
21359: LD_VAR 0 3
21363: PPUSH
21364: LD_INT 1
21366: PPUSH
21367: LD_INT 1
21369: PPUSH
21370: CALL_OW 483
// CenterOnXY ( x , y ) ;
21374: LD_VAR 0 2
21378: PPUSH
21379: LD_VAR 0 3
21383: PPUSH
21384: CALL_OW 84
// end ;
21388: LD_VAR 0 4
21392: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21393: LD_INT 0
21395: PPUSH
21396: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21397: LD_VAR 0 1
21401: NOT
21402: PUSH
21403: LD_VAR 0 2
21407: PPUSH
21408: LD_VAR 0 3
21412: PPUSH
21413: CALL_OW 488
21417: NOT
21418: OR
21419: PUSH
21420: LD_VAR 0 1
21424: PPUSH
21425: CALL_OW 266
21429: PUSH
21430: LD_INT 3
21432: NONEQUAL
21433: PUSH
21434: LD_VAR 0 1
21438: PPUSH
21439: CALL_OW 247
21443: PUSH
21444: LD_INT 1
21446: EQUAL
21447: NOT
21448: AND
21449: OR
21450: IFFALSE 21454
// exit ;
21452: GO 21603
// if GetType ( factory ) = unit_human then
21454: LD_VAR 0 1
21458: PPUSH
21459: CALL_OW 247
21463: PUSH
21464: LD_INT 1
21466: EQUAL
21467: IFFALSE 21484
// factory := IsInUnit ( factory ) ;
21469: LD_ADDR_VAR 0 1
21473: PUSH
21474: LD_VAR 0 1
21478: PPUSH
21479: CALL_OW 310
21483: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL_OW 266
21493: PUSH
21494: LD_INT 3
21496: NONEQUAL
21497: IFFALSE 21501
// exit ;
21499: GO 21603
// if HexInfo ( x , y ) = factory then
21501: LD_VAR 0 2
21505: PPUSH
21506: LD_VAR 0 3
21510: PPUSH
21511: CALL_OW 428
21515: PUSH
21516: LD_VAR 0 1
21520: EQUAL
21521: IFFALSE 21548
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21523: LD_ADDR_EXP 76
21527: PUSH
21528: LD_EXP 76
21532: PPUSH
21533: LD_VAR 0 1
21537: PPUSH
21538: LD_INT 0
21540: PPUSH
21541: CALL_OW 1
21545: ST_TO_ADDR
21546: GO 21599
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21548: LD_ADDR_EXP 76
21552: PUSH
21553: LD_EXP 76
21557: PPUSH
21558: LD_VAR 0 1
21562: PPUSH
21563: LD_VAR 0 1
21567: PPUSH
21568: CALL_OW 255
21572: PUSH
21573: LD_VAR 0 1
21577: PUSH
21578: LD_VAR 0 2
21582: PUSH
21583: LD_VAR 0 3
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: PPUSH
21594: CALL_OW 1
21598: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21599: CALL 21608 0 0
// end ;
21603: LD_VAR 0 4
21607: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21608: LD_INT 0
21610: PPUSH
21611: PPUSH
21612: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21613: LD_STRING resetFactoryWaypoint();
21615: PPUSH
21616: CALL_OW 559
// if factoryWaypoints then
21620: LD_EXP 76
21624: IFFALSE 21750
// begin list := PrepareArray ( factoryWaypoints ) ;
21626: LD_ADDR_VAR 0 3
21630: PUSH
21631: LD_EXP 76
21635: PPUSH
21636: CALL 68127 0 1
21640: ST_TO_ADDR
// for i := 1 to list do
21641: LD_ADDR_VAR 0 2
21645: PUSH
21646: DOUBLE
21647: LD_INT 1
21649: DEC
21650: ST_TO_ADDR
21651: LD_VAR 0 3
21655: PUSH
21656: FOR_TO
21657: IFFALSE 21748
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21659: LD_STRING setFactoryWaypointXY(
21661: PUSH
21662: LD_VAR 0 3
21666: PUSH
21667: LD_VAR 0 2
21671: ARRAY
21672: PUSH
21673: LD_INT 1
21675: ARRAY
21676: STR
21677: PUSH
21678: LD_STRING ,
21680: STR
21681: PUSH
21682: LD_VAR 0 3
21686: PUSH
21687: LD_VAR 0 2
21691: ARRAY
21692: PUSH
21693: LD_INT 2
21695: ARRAY
21696: STR
21697: PUSH
21698: LD_STRING ,
21700: STR
21701: PUSH
21702: LD_VAR 0 3
21706: PUSH
21707: LD_VAR 0 2
21711: ARRAY
21712: PUSH
21713: LD_INT 3
21715: ARRAY
21716: STR
21717: PUSH
21718: LD_STRING ,
21720: STR
21721: PUSH
21722: LD_VAR 0 3
21726: PUSH
21727: LD_VAR 0 2
21731: ARRAY
21732: PUSH
21733: LD_INT 4
21735: ARRAY
21736: STR
21737: PUSH
21738: LD_STRING )
21740: STR
21741: PPUSH
21742: CALL_OW 559
21746: GO 21656
21748: POP
21749: POP
// end ; end ;
21750: LD_VAR 0 1
21754: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21755: LD_INT 0
21757: PPUSH
// if HexInfo ( x , y ) = warehouse then
21758: LD_VAR 0 2
21762: PPUSH
21763: LD_VAR 0 3
21767: PPUSH
21768: CALL_OW 428
21772: PUSH
21773: LD_VAR 0 1
21777: EQUAL
21778: IFFALSE 21805
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21780: LD_ADDR_EXP 77
21784: PUSH
21785: LD_EXP 77
21789: PPUSH
21790: LD_VAR 0 1
21794: PPUSH
21795: LD_INT 0
21797: PPUSH
21798: CALL_OW 1
21802: ST_TO_ADDR
21803: GO 21856
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21805: LD_ADDR_EXP 77
21809: PUSH
21810: LD_EXP 77
21814: PPUSH
21815: LD_VAR 0 1
21819: PPUSH
21820: LD_VAR 0 1
21824: PPUSH
21825: CALL_OW 255
21829: PUSH
21830: LD_VAR 0 1
21834: PUSH
21835: LD_VAR 0 2
21839: PUSH
21840: LD_VAR 0 3
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: PPUSH
21851: CALL_OW 1
21855: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21856: CALL 21865 0 0
// end ;
21860: LD_VAR 0 4
21864: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21865: LD_INT 0
21867: PPUSH
21868: PPUSH
21869: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21870: LD_STRING resetWarehouseGatheringPoints();
21872: PPUSH
21873: CALL_OW 559
// if warehouseGatheringPoints then
21877: LD_EXP 77
21881: IFFALSE 22007
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21883: LD_ADDR_VAR 0 3
21887: PUSH
21888: LD_EXP 77
21892: PPUSH
21893: CALL 68127 0 1
21897: ST_TO_ADDR
// for i := 1 to list do
21898: LD_ADDR_VAR 0 2
21902: PUSH
21903: DOUBLE
21904: LD_INT 1
21906: DEC
21907: ST_TO_ADDR
21908: LD_VAR 0 3
21912: PUSH
21913: FOR_TO
21914: IFFALSE 22005
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21916: LD_STRING setWarehouseGatheringPointXY(
21918: PUSH
21919: LD_VAR 0 3
21923: PUSH
21924: LD_VAR 0 2
21928: ARRAY
21929: PUSH
21930: LD_INT 1
21932: ARRAY
21933: STR
21934: PUSH
21935: LD_STRING ,
21937: STR
21938: PUSH
21939: LD_VAR 0 3
21943: PUSH
21944: LD_VAR 0 2
21948: ARRAY
21949: PUSH
21950: LD_INT 2
21952: ARRAY
21953: STR
21954: PUSH
21955: LD_STRING ,
21957: STR
21958: PUSH
21959: LD_VAR 0 3
21963: PUSH
21964: LD_VAR 0 2
21968: ARRAY
21969: PUSH
21970: LD_INT 3
21972: ARRAY
21973: STR
21974: PUSH
21975: LD_STRING ,
21977: STR
21978: PUSH
21979: LD_VAR 0 3
21983: PUSH
21984: LD_VAR 0 2
21988: ARRAY
21989: PUSH
21990: LD_INT 4
21992: ARRAY
21993: STR
21994: PUSH
21995: LD_STRING )
21997: STR
21998: PPUSH
21999: CALL_OW 559
22003: GO 21913
22005: POP
22006: POP
// end ; end ;
22007: LD_VAR 0 1
22011: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22012: LD_EXP 77
22016: IFFALSE 22701
22018: GO 22020
22020: DISABLE
22021: LD_INT 0
22023: PPUSH
22024: PPUSH
22025: PPUSH
22026: PPUSH
22027: PPUSH
22028: PPUSH
22029: PPUSH
22030: PPUSH
22031: PPUSH
// begin enable ;
22032: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22033: LD_ADDR_VAR 0 3
22037: PUSH
22038: LD_EXP 77
22042: PPUSH
22043: CALL 68127 0 1
22047: ST_TO_ADDR
// if not list then
22048: LD_VAR 0 3
22052: NOT
22053: IFFALSE 22057
// exit ;
22055: GO 22701
// for i := 1 to list do
22057: LD_ADDR_VAR 0 1
22061: PUSH
22062: DOUBLE
22063: LD_INT 1
22065: DEC
22066: ST_TO_ADDR
22067: LD_VAR 0 3
22071: PUSH
22072: FOR_TO
22073: IFFALSE 22699
// begin depot := list [ i ] [ 2 ] ;
22075: LD_ADDR_VAR 0 8
22079: PUSH
22080: LD_VAR 0 3
22084: PUSH
22085: LD_VAR 0 1
22089: ARRAY
22090: PUSH
22091: LD_INT 2
22093: ARRAY
22094: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22095: LD_ADDR_VAR 0 5
22099: PUSH
22100: LD_VAR 0 3
22104: PUSH
22105: LD_VAR 0 1
22109: ARRAY
22110: PUSH
22111: LD_INT 1
22113: ARRAY
22114: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22115: LD_VAR 0 8
22119: PPUSH
22120: CALL_OW 301
22124: PUSH
22125: LD_VAR 0 5
22129: PUSH
22130: LD_VAR 0 8
22134: PPUSH
22135: CALL_OW 255
22139: NONEQUAL
22140: OR
22141: IFFALSE 22170
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22143: LD_ADDR_EXP 77
22147: PUSH
22148: LD_EXP 77
22152: PPUSH
22153: LD_VAR 0 8
22157: PPUSH
22158: LD_INT 0
22160: PPUSH
22161: CALL_OW 1
22165: ST_TO_ADDR
// exit ;
22166: POP
22167: POP
22168: GO 22701
// end ; x := list [ i ] [ 3 ] ;
22170: LD_ADDR_VAR 0 6
22174: PUSH
22175: LD_VAR 0 3
22179: PUSH
22180: LD_VAR 0 1
22184: ARRAY
22185: PUSH
22186: LD_INT 3
22188: ARRAY
22189: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22190: LD_ADDR_VAR 0 7
22194: PUSH
22195: LD_VAR 0 3
22199: PUSH
22200: LD_VAR 0 1
22204: ARRAY
22205: PUSH
22206: LD_INT 4
22208: ARRAY
22209: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22210: LD_ADDR_VAR 0 9
22214: PUSH
22215: LD_VAR 0 6
22219: PPUSH
22220: LD_VAR 0 7
22224: PPUSH
22225: LD_INT 16
22227: PPUSH
22228: CALL 66715 0 3
22232: ST_TO_ADDR
// if not cratesNearbyPoint then
22233: LD_VAR 0 9
22237: NOT
22238: IFFALSE 22244
// exit ;
22240: POP
22241: POP
22242: GO 22701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22244: LD_ADDR_VAR 0 4
22248: PUSH
22249: LD_INT 22
22251: PUSH
22252: LD_VAR 0 5
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 3
22263: PUSH
22264: LD_INT 60
22266: PUSH
22267: EMPTY
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 91
22276: PUSH
22277: LD_VAR 0 8
22281: PUSH
22282: LD_INT 6
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: PUSH
22293: LD_INT 25
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 25
22305: PUSH
22306: LD_INT 16
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: PPUSH
22324: CALL_OW 69
22328: PUSH
22329: LD_VAR 0 8
22333: PPUSH
22334: CALL_OW 313
22338: PPUSH
22339: LD_INT 3
22341: PUSH
22342: LD_INT 60
22344: PUSH
22345: EMPTY
22346: LIST
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: LD_INT 25
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 25
22367: PUSH
22368: LD_INT 16
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: LIST
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PPUSH
22384: CALL_OW 72
22388: UNION
22389: ST_TO_ADDR
// if tmp then
22390: LD_VAR 0 4
22394: IFFALSE 22474
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22396: LD_ADDR_VAR 0 4
22400: PUSH
22401: LD_VAR 0 4
22405: PPUSH
22406: LD_INT 3
22408: PPUSH
22409: CALL 64684 0 2
22413: ST_TO_ADDR
// for j in tmp do
22414: LD_ADDR_VAR 0 2
22418: PUSH
22419: LD_VAR 0 4
22423: PUSH
22424: FOR_IN
22425: IFFALSE 22468
// begin if IsInUnit ( j ) then
22427: LD_VAR 0 2
22431: PPUSH
22432: CALL_OW 310
22436: IFFALSE 22447
// ComExit ( j ) ;
22438: LD_VAR 0 2
22442: PPUSH
22443: CALL 64767 0 1
// AddComCollect ( j , x , y ) ;
22447: LD_VAR 0 2
22451: PPUSH
22452: LD_VAR 0 6
22456: PPUSH
22457: LD_VAR 0 7
22461: PPUSH
22462: CALL_OW 177
// end ;
22466: GO 22424
22468: POP
22469: POP
// exit ;
22470: POP
22471: POP
22472: GO 22701
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22474: LD_ADDR_VAR 0 4
22478: PUSH
22479: LD_INT 22
22481: PUSH
22482: LD_VAR 0 5
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 91
22493: PUSH
22494: LD_VAR 0 8
22498: PUSH
22499: LD_INT 8
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: LD_INT 34
22512: PUSH
22513: LD_INT 12
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 34
22522: PUSH
22523: LD_INT 51
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 34
22532: PUSH
22533: LD_INT 32
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 34
22542: PUSH
22543: LD_INT 89
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: LIST
22561: PPUSH
22562: CALL_OW 69
22566: ST_TO_ADDR
// if tmp then
22567: LD_VAR 0 4
22571: IFFALSE 22697
// begin for j in tmp do
22573: LD_ADDR_VAR 0 2
22577: PUSH
22578: LD_VAR 0 4
22582: PUSH
22583: FOR_IN
22584: IFFALSE 22695
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22586: LD_VAR 0 2
22590: PPUSH
22591: CALL_OW 262
22595: PUSH
22596: LD_INT 3
22598: EQUAL
22599: PUSH
22600: LD_VAR 0 2
22604: PPUSH
22605: CALL_OW 261
22609: PUSH
22610: LD_INT 20
22612: GREATER
22613: OR
22614: PUSH
22615: LD_VAR 0 2
22619: PPUSH
22620: CALL_OW 314
22624: NOT
22625: AND
22626: PUSH
22627: LD_VAR 0 2
22631: PPUSH
22632: CALL_OW 263
22636: PUSH
22637: LD_INT 1
22639: NONEQUAL
22640: PUSH
22641: LD_VAR 0 2
22645: PPUSH
22646: CALL_OW 311
22650: OR
22651: AND
22652: IFFALSE 22693
// begin ComCollect ( j , x , y ) ;
22654: LD_VAR 0 2
22658: PPUSH
22659: LD_VAR 0 6
22663: PPUSH
22664: LD_VAR 0 7
22668: PPUSH
22669: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22673: LD_VAR 0 2
22677: PPUSH
22678: LD_VAR 0 8
22682: PPUSH
22683: CALL_OW 172
// exit ;
22687: POP
22688: POP
22689: POP
22690: POP
22691: GO 22701
// end ;
22693: GO 22583
22695: POP
22696: POP
// end ; end ;
22697: GO 22072
22699: POP
22700: POP
// end ; end_of_file
22701: PPOPN 9
22703: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22704: LD_INT 0
22706: PPUSH
22707: PPUSH
22708: PPUSH
22709: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22710: LD_VAR 0 1
22714: PPUSH
22715: CALL_OW 264
22719: PUSH
22720: LD_INT 91
22722: EQUAL
22723: IFFALSE 22795
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22725: LD_INT 68
22727: PPUSH
22728: LD_VAR 0 1
22732: PPUSH
22733: CALL_OW 255
22737: PPUSH
22738: CALL_OW 321
22742: PUSH
22743: LD_INT 2
22745: EQUAL
22746: IFFALSE 22758
// eff := 70 else
22748: LD_ADDR_VAR 0 4
22752: PUSH
22753: LD_INT 70
22755: ST_TO_ADDR
22756: GO 22766
// eff := 30 ;
22758: LD_ADDR_VAR 0 4
22762: PUSH
22763: LD_INT 30
22765: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22766: LD_VAR 0 1
22770: PPUSH
22771: CALL_OW 250
22775: PPUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 251
22785: PPUSH
22786: LD_VAR 0 4
22790: PPUSH
22791: CALL_OW 495
// end ; end ;
22795: LD_VAR 0 2
22799: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22800: LD_INT 0
22802: PPUSH
// end ;
22803: LD_VAR 0 4
22807: RET
// export function SOS_Command ( cmd ) ; begin
22808: LD_INT 0
22810: PPUSH
// end ;
22811: LD_VAR 0 2
22815: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22816: LD_INT 0
22818: PPUSH
// end ;
22819: LD_VAR 0 6
22823: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22824: LD_INT 0
22826: PPUSH
22827: PPUSH
// if not vehicle or not factory then
22828: LD_VAR 0 1
22832: NOT
22833: PUSH
22834: LD_VAR 0 2
22838: NOT
22839: OR
22840: IFFALSE 22844
// exit ;
22842: GO 23075
// if factoryWaypoints >= factory then
22844: LD_EXP 76
22848: PUSH
22849: LD_VAR 0 2
22853: GREATEREQUAL
22854: IFFALSE 23075
// if factoryWaypoints [ factory ] then
22856: LD_EXP 76
22860: PUSH
22861: LD_VAR 0 2
22865: ARRAY
22866: IFFALSE 23075
// begin if GetControl ( vehicle ) = control_manual then
22868: LD_VAR 0 1
22872: PPUSH
22873: CALL_OW 263
22877: PUSH
22878: LD_INT 1
22880: EQUAL
22881: IFFALSE 22962
// begin driver := IsDrivenBy ( vehicle ) ;
22883: LD_ADDR_VAR 0 4
22887: PUSH
22888: LD_VAR 0 1
22892: PPUSH
22893: CALL_OW 311
22897: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22898: LD_VAR 0 4
22902: PPUSH
22903: LD_EXP 76
22907: PUSH
22908: LD_VAR 0 2
22912: ARRAY
22913: PUSH
22914: LD_INT 3
22916: ARRAY
22917: PPUSH
22918: LD_EXP 76
22922: PUSH
22923: LD_VAR 0 2
22927: ARRAY
22928: PUSH
22929: LD_INT 4
22931: ARRAY
22932: PPUSH
22933: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22937: LD_VAR 0 4
22941: PPUSH
22942: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22946: LD_VAR 0 4
22950: PPUSH
22951: LD_VAR 0 2
22955: PPUSH
22956: CALL_OW 180
// end else
22960: GO 23075
// if GetControl ( vehicle ) = control_remote then
22962: LD_VAR 0 1
22966: PPUSH
22967: CALL_OW 263
22971: PUSH
22972: LD_INT 2
22974: EQUAL
22975: IFFALSE 23036
// begin wait ( 0 0$2 ) ;
22977: LD_INT 70
22979: PPUSH
22980: CALL_OW 67
// if Connect ( vehicle ) then
22984: LD_VAR 0 1
22988: PPUSH
22989: CALL 35099 0 1
22993: IFFALSE 23034
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22995: LD_VAR 0 1
22999: PPUSH
23000: LD_EXP 76
23004: PUSH
23005: LD_VAR 0 2
23009: ARRAY
23010: PUSH
23011: LD_INT 3
23013: ARRAY
23014: PPUSH
23015: LD_EXP 76
23019: PUSH
23020: LD_VAR 0 2
23024: ARRAY
23025: PUSH
23026: LD_INT 4
23028: ARRAY
23029: PPUSH
23030: CALL_OW 171
// end else
23034: GO 23075
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23036: LD_VAR 0 1
23040: PPUSH
23041: LD_EXP 76
23045: PUSH
23046: LD_VAR 0 2
23050: ARRAY
23051: PUSH
23052: LD_INT 3
23054: ARRAY
23055: PPUSH
23056: LD_EXP 76
23060: PUSH
23061: LD_VAR 0 2
23065: ARRAY
23066: PUSH
23067: LD_INT 4
23069: ARRAY
23070: PPUSH
23071: CALL_OW 171
// end ; end ;
23075: LD_VAR 0 3
23079: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23080: LD_INT 0
23082: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23083: LD_VAR 0 1
23087: PUSH
23088: LD_INT 250
23090: EQUAL
23091: PUSH
23092: LD_VAR 0 2
23096: PPUSH
23097: CALL_OW 264
23101: PUSH
23102: LD_INT 81
23104: EQUAL
23105: AND
23106: IFFALSE 23127
// MinerPlaceMine ( unit , x , y ) ;
23108: LD_VAR 0 2
23112: PPUSH
23113: LD_VAR 0 4
23117: PPUSH
23118: LD_VAR 0 5
23122: PPUSH
23123: CALL 25512 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23127: LD_VAR 0 1
23131: PUSH
23132: LD_INT 251
23134: EQUAL
23135: PUSH
23136: LD_VAR 0 2
23140: PPUSH
23141: CALL_OW 264
23145: PUSH
23146: LD_INT 81
23148: EQUAL
23149: AND
23150: IFFALSE 23171
// MinerDetonateMine ( unit , x , y ) ;
23152: LD_VAR 0 2
23156: PPUSH
23157: LD_VAR 0 4
23161: PPUSH
23162: LD_VAR 0 5
23166: PPUSH
23167: CALL 25787 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23171: LD_VAR 0 1
23175: PUSH
23176: LD_INT 252
23178: EQUAL
23179: PUSH
23180: LD_VAR 0 2
23184: PPUSH
23185: CALL_OW 264
23189: PUSH
23190: LD_INT 81
23192: EQUAL
23193: AND
23194: IFFALSE 23215
// MinerCreateMinefield ( unit , x , y ) ;
23196: LD_VAR 0 2
23200: PPUSH
23201: LD_VAR 0 4
23205: PPUSH
23206: LD_VAR 0 5
23210: PPUSH
23211: CALL 26204 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23215: LD_VAR 0 1
23219: PUSH
23220: LD_INT 253
23222: EQUAL
23223: PUSH
23224: LD_VAR 0 2
23228: PPUSH
23229: CALL_OW 257
23233: PUSH
23234: LD_INT 5
23236: EQUAL
23237: AND
23238: IFFALSE 23259
// ComBinocular ( unit , x , y ) ;
23240: LD_VAR 0 2
23244: PPUSH
23245: LD_VAR 0 4
23249: PPUSH
23250: LD_VAR 0 5
23254: PPUSH
23255: CALL 26573 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23259: LD_VAR 0 1
23263: PUSH
23264: LD_INT 254
23266: EQUAL
23267: PUSH
23268: LD_VAR 0 2
23272: PPUSH
23273: CALL_OW 264
23277: PUSH
23278: LD_INT 99
23280: EQUAL
23281: AND
23282: PUSH
23283: LD_VAR 0 3
23287: PPUSH
23288: CALL_OW 263
23292: PUSH
23293: LD_INT 3
23295: EQUAL
23296: AND
23297: IFFALSE 23313
// HackDestroyVehicle ( unit , selectedUnit ) ;
23299: LD_VAR 0 2
23303: PPUSH
23304: LD_VAR 0 3
23308: PPUSH
23309: CALL 24876 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23313: LD_VAR 0 1
23317: PUSH
23318: LD_INT 255
23320: EQUAL
23321: PUSH
23322: LD_VAR 0 2
23326: PPUSH
23327: CALL_OW 264
23331: PUSH
23332: LD_INT 14
23334: PUSH
23335: LD_INT 53
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: IN
23342: AND
23343: PUSH
23344: LD_VAR 0 4
23348: PPUSH
23349: LD_VAR 0 5
23353: PPUSH
23354: CALL_OW 488
23358: AND
23359: IFFALSE 23383
// CutTreeXYR ( unit , x , y , 12 ) ;
23361: LD_VAR 0 2
23365: PPUSH
23366: LD_VAR 0 4
23370: PPUSH
23371: LD_VAR 0 5
23375: PPUSH
23376: LD_INT 12
23378: PPUSH
23379: CALL 23446 0 4
// if cmd = 256 then
23383: LD_VAR 0 1
23387: PUSH
23388: LD_INT 256
23390: EQUAL
23391: IFFALSE 23412
// SetFactoryWaypoint ( unit , x , y ) ;
23393: LD_VAR 0 2
23397: PPUSH
23398: LD_VAR 0 4
23402: PPUSH
23403: LD_VAR 0 5
23407: PPUSH
23408: CALL 21393 0 3
// if cmd = 257 then
23412: LD_VAR 0 1
23416: PUSH
23417: LD_INT 257
23419: EQUAL
23420: IFFALSE 23441
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23422: LD_VAR 0 2
23426: PPUSH
23427: LD_VAR 0 4
23431: PPUSH
23432: LD_VAR 0 5
23436: PPUSH
23437: CALL 21755 0 3
// end ;
23441: LD_VAR 0 6
23445: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23446: LD_INT 0
23448: PPUSH
23449: PPUSH
23450: PPUSH
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
23456: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23457: LD_VAR 0 1
23461: NOT
23462: PUSH
23463: LD_VAR 0 2
23467: PPUSH
23468: LD_VAR 0 3
23472: PPUSH
23473: CALL_OW 488
23477: NOT
23478: OR
23479: PUSH
23480: LD_VAR 0 4
23484: NOT
23485: OR
23486: IFFALSE 23490
// exit ;
23488: GO 23830
// list := [ ] ;
23490: LD_ADDR_VAR 0 13
23494: PUSH
23495: EMPTY
23496: ST_TO_ADDR
// if x - r < 0 then
23497: LD_VAR 0 2
23501: PUSH
23502: LD_VAR 0 4
23506: MINUS
23507: PUSH
23508: LD_INT 0
23510: LESS
23511: IFFALSE 23523
// min_x := 0 else
23513: LD_ADDR_VAR 0 7
23517: PUSH
23518: LD_INT 0
23520: ST_TO_ADDR
23521: GO 23539
// min_x := x - r ;
23523: LD_ADDR_VAR 0 7
23527: PUSH
23528: LD_VAR 0 2
23532: PUSH
23533: LD_VAR 0 4
23537: MINUS
23538: ST_TO_ADDR
// if y - r < 0 then
23539: LD_VAR 0 3
23543: PUSH
23544: LD_VAR 0 4
23548: MINUS
23549: PUSH
23550: LD_INT 0
23552: LESS
23553: IFFALSE 23565
// min_y := 0 else
23555: LD_ADDR_VAR 0 8
23559: PUSH
23560: LD_INT 0
23562: ST_TO_ADDR
23563: GO 23581
// min_y := y - r ;
23565: LD_ADDR_VAR 0 8
23569: PUSH
23570: LD_VAR 0 3
23574: PUSH
23575: LD_VAR 0 4
23579: MINUS
23580: ST_TO_ADDR
// max_x := x + r ;
23581: LD_ADDR_VAR 0 9
23585: PUSH
23586: LD_VAR 0 2
23590: PUSH
23591: LD_VAR 0 4
23595: PLUS
23596: ST_TO_ADDR
// max_y := y + r ;
23597: LD_ADDR_VAR 0 10
23601: PUSH
23602: LD_VAR 0 3
23606: PUSH
23607: LD_VAR 0 4
23611: PLUS
23612: ST_TO_ADDR
// for _x = min_x to max_x do
23613: LD_ADDR_VAR 0 11
23617: PUSH
23618: DOUBLE
23619: LD_VAR 0 7
23623: DEC
23624: ST_TO_ADDR
23625: LD_VAR 0 9
23629: PUSH
23630: FOR_TO
23631: IFFALSE 23748
// for _y = min_y to max_y do
23633: LD_ADDR_VAR 0 12
23637: PUSH
23638: DOUBLE
23639: LD_VAR 0 8
23643: DEC
23644: ST_TO_ADDR
23645: LD_VAR 0 10
23649: PUSH
23650: FOR_TO
23651: IFFALSE 23744
// begin if not ValidHex ( _x , _y ) then
23653: LD_VAR 0 11
23657: PPUSH
23658: LD_VAR 0 12
23662: PPUSH
23663: CALL_OW 488
23667: NOT
23668: IFFALSE 23672
// continue ;
23670: GO 23650
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23672: LD_VAR 0 11
23676: PPUSH
23677: LD_VAR 0 12
23681: PPUSH
23682: CALL_OW 351
23686: PUSH
23687: LD_VAR 0 11
23691: PPUSH
23692: LD_VAR 0 12
23696: PPUSH
23697: CALL_OW 554
23701: AND
23702: IFFALSE 23742
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23704: LD_ADDR_VAR 0 13
23708: PUSH
23709: LD_VAR 0 13
23713: PPUSH
23714: LD_VAR 0 13
23718: PUSH
23719: LD_INT 1
23721: PLUS
23722: PPUSH
23723: LD_VAR 0 11
23727: PUSH
23728: LD_VAR 0 12
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PPUSH
23737: CALL_OW 2
23741: ST_TO_ADDR
// end ;
23742: GO 23650
23744: POP
23745: POP
23746: GO 23630
23748: POP
23749: POP
// if not list then
23750: LD_VAR 0 13
23754: NOT
23755: IFFALSE 23759
// exit ;
23757: GO 23830
// for i in list do
23759: LD_ADDR_VAR 0 6
23763: PUSH
23764: LD_VAR 0 13
23768: PUSH
23769: FOR_IN
23770: IFFALSE 23828
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23772: LD_VAR 0 1
23776: PPUSH
23777: LD_STRING M
23779: PUSH
23780: LD_VAR 0 6
23784: PUSH
23785: LD_INT 1
23787: ARRAY
23788: PUSH
23789: LD_VAR 0 6
23793: PUSH
23794: LD_INT 2
23796: ARRAY
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 0
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: PUSH
23819: EMPTY
23820: LIST
23821: PPUSH
23822: CALL_OW 447
23826: GO 23769
23828: POP
23829: POP
// end ;
23830: LD_VAR 0 5
23834: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23835: LD_EXP 79
23839: NOT
23840: IFFALSE 23890
23842: GO 23844
23844: DISABLE
// begin initHack := true ;
23845: LD_ADDR_EXP 79
23849: PUSH
23850: LD_INT 1
23852: ST_TO_ADDR
// hackTanks := [ ] ;
23853: LD_ADDR_EXP 80
23857: PUSH
23858: EMPTY
23859: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23860: LD_ADDR_EXP 81
23864: PUSH
23865: EMPTY
23866: ST_TO_ADDR
// hackLimit := 3 ;
23867: LD_ADDR_EXP 82
23871: PUSH
23872: LD_INT 3
23874: ST_TO_ADDR
// hackDist := 12 ;
23875: LD_ADDR_EXP 83
23879: PUSH
23880: LD_INT 12
23882: ST_TO_ADDR
// hackCounter := [ ] ;
23883: LD_ADDR_EXP 84
23887: PUSH
23888: EMPTY
23889: ST_TO_ADDR
// end ;
23890: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23891: LD_EXP 79
23895: PUSH
23896: LD_INT 34
23898: PUSH
23899: LD_INT 99
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PPUSH
23906: CALL_OW 69
23910: AND
23911: IFFALSE 24164
23913: GO 23915
23915: DISABLE
23916: LD_INT 0
23918: PPUSH
23919: PPUSH
// begin enable ;
23920: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23921: LD_ADDR_VAR 0 1
23925: PUSH
23926: LD_INT 34
23928: PUSH
23929: LD_INT 99
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PPUSH
23936: CALL_OW 69
23940: PUSH
23941: FOR_IN
23942: IFFALSE 24162
// begin if not i in hackTanks then
23944: LD_VAR 0 1
23948: PUSH
23949: LD_EXP 80
23953: IN
23954: NOT
23955: IFFALSE 24038
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23957: LD_ADDR_EXP 80
23961: PUSH
23962: LD_EXP 80
23966: PPUSH
23967: LD_EXP 80
23971: PUSH
23972: LD_INT 1
23974: PLUS
23975: PPUSH
23976: LD_VAR 0 1
23980: PPUSH
23981: CALL_OW 1
23985: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23986: LD_ADDR_EXP 81
23990: PUSH
23991: LD_EXP 81
23995: PPUSH
23996: LD_EXP 81
24000: PUSH
24001: LD_INT 1
24003: PLUS
24004: PPUSH
24005: EMPTY
24006: PPUSH
24007: CALL_OW 1
24011: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24012: LD_ADDR_EXP 84
24016: PUSH
24017: LD_EXP 84
24021: PPUSH
24022: LD_EXP 84
24026: PUSH
24027: LD_INT 1
24029: PLUS
24030: PPUSH
24031: EMPTY
24032: PPUSH
24033: CALL_OW 1
24037: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24038: LD_VAR 0 1
24042: PPUSH
24043: CALL_OW 302
24047: NOT
24048: IFFALSE 24061
// begin HackUnlinkAll ( i ) ;
24050: LD_VAR 0 1
24054: PPUSH
24055: CALL 24167 0 1
// continue ;
24059: GO 23941
// end ; HackCheckCapturedStatus ( i ) ;
24061: LD_VAR 0 1
24065: PPUSH
24066: CALL 24610 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24070: LD_ADDR_VAR 0 2
24074: PUSH
24075: LD_INT 81
24077: PUSH
24078: LD_VAR 0 1
24082: PPUSH
24083: CALL_OW 255
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 33
24094: PUSH
24095: LD_INT 3
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 91
24104: PUSH
24105: LD_VAR 0 1
24109: PUSH
24110: LD_EXP 83
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 50
24122: PUSH
24123: EMPTY
24124: LIST
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: PPUSH
24132: CALL_OW 69
24136: ST_TO_ADDR
// if not tmp then
24137: LD_VAR 0 2
24141: NOT
24142: IFFALSE 24146
// continue ;
24144: GO 23941
// HackLink ( i , tmp ) ;
24146: LD_VAR 0 1
24150: PPUSH
24151: LD_VAR 0 2
24155: PPUSH
24156: CALL 24303 0 2
// end ;
24160: GO 23941
24162: POP
24163: POP
// end ;
24164: PPOPN 2
24166: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24167: LD_INT 0
24169: PPUSH
24170: PPUSH
24171: PPUSH
// if not hack in hackTanks then
24172: LD_VAR 0 1
24176: PUSH
24177: LD_EXP 80
24181: IN
24182: NOT
24183: IFFALSE 24187
// exit ;
24185: GO 24298
// index := GetElementIndex ( hackTanks , hack ) ;
24187: LD_ADDR_VAR 0 4
24191: PUSH
24192: LD_EXP 80
24196: PPUSH
24197: LD_VAR 0 1
24201: PPUSH
24202: CALL 31915 0 2
24206: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24207: LD_EXP 81
24211: PUSH
24212: LD_VAR 0 4
24216: ARRAY
24217: IFFALSE 24298
// begin for i in hackTanksCaptured [ index ] do
24219: LD_ADDR_VAR 0 3
24223: PUSH
24224: LD_EXP 81
24228: PUSH
24229: LD_VAR 0 4
24233: ARRAY
24234: PUSH
24235: FOR_IN
24236: IFFALSE 24262
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24238: LD_VAR 0 3
24242: PUSH
24243: LD_INT 1
24245: ARRAY
24246: PPUSH
24247: LD_VAR 0 3
24251: PUSH
24252: LD_INT 2
24254: ARRAY
24255: PPUSH
24256: CALL_OW 235
24260: GO 24235
24262: POP
24263: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24264: LD_ADDR_EXP 81
24268: PUSH
24269: LD_EXP 81
24273: PPUSH
24274: LD_VAR 0 4
24278: PPUSH
24279: EMPTY
24280: PPUSH
24281: CALL_OW 1
24285: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24286: LD_VAR 0 1
24290: PPUSH
24291: LD_INT 0
24293: PPUSH
24294: CALL_OW 505
// end ; end ;
24298: LD_VAR 0 2
24302: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24303: LD_INT 0
24305: PPUSH
24306: PPUSH
24307: PPUSH
// if not hack in hackTanks or not vehicles then
24308: LD_VAR 0 1
24312: PUSH
24313: LD_EXP 80
24317: IN
24318: NOT
24319: PUSH
24320: LD_VAR 0 2
24324: NOT
24325: OR
24326: IFFALSE 24330
// exit ;
24328: GO 24605
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24330: LD_ADDR_VAR 0 2
24334: PUSH
24335: LD_VAR 0 1
24339: PPUSH
24340: LD_VAR 0 2
24344: PPUSH
24345: LD_INT 1
24347: PPUSH
24348: LD_INT 1
24350: PPUSH
24351: CALL 32565 0 4
24355: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24356: LD_ADDR_VAR 0 5
24360: PUSH
24361: LD_EXP 80
24365: PPUSH
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL 31915 0 2
24375: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24376: LD_EXP 81
24380: PUSH
24381: LD_VAR 0 5
24385: ARRAY
24386: PUSH
24387: LD_EXP 82
24391: LESS
24392: IFFALSE 24581
// begin for i := 1 to vehicles do
24394: LD_ADDR_VAR 0 4
24398: PUSH
24399: DOUBLE
24400: LD_INT 1
24402: DEC
24403: ST_TO_ADDR
24404: LD_VAR 0 2
24408: PUSH
24409: FOR_TO
24410: IFFALSE 24579
// begin if hackTanksCaptured [ index ] = hackLimit then
24412: LD_EXP 81
24416: PUSH
24417: LD_VAR 0 5
24421: ARRAY
24422: PUSH
24423: LD_EXP 82
24427: EQUAL
24428: IFFALSE 24432
// break ;
24430: GO 24579
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24432: LD_ADDR_EXP 84
24436: PUSH
24437: LD_EXP 84
24441: PPUSH
24442: LD_VAR 0 5
24446: PPUSH
24447: LD_EXP 84
24451: PUSH
24452: LD_VAR 0 5
24456: ARRAY
24457: PUSH
24458: LD_INT 1
24460: PLUS
24461: PPUSH
24462: CALL_OW 1
24466: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24467: LD_ADDR_EXP 81
24471: PUSH
24472: LD_EXP 81
24476: PPUSH
24477: LD_VAR 0 5
24481: PUSH
24482: LD_EXP 81
24486: PUSH
24487: LD_VAR 0 5
24491: ARRAY
24492: PUSH
24493: LD_INT 1
24495: PLUS
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PPUSH
24501: LD_VAR 0 2
24505: PUSH
24506: LD_VAR 0 4
24510: ARRAY
24511: PUSH
24512: LD_VAR 0 2
24516: PUSH
24517: LD_VAR 0 4
24521: ARRAY
24522: PPUSH
24523: CALL_OW 255
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL 32130 0 3
24536: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24537: LD_VAR 0 2
24541: PUSH
24542: LD_VAR 0 4
24546: ARRAY
24547: PPUSH
24548: LD_VAR 0 1
24552: PPUSH
24553: CALL_OW 255
24557: PPUSH
24558: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24562: LD_VAR 0 2
24566: PUSH
24567: LD_VAR 0 4
24571: ARRAY
24572: PPUSH
24573: CALL_OW 141
// end ;
24577: GO 24409
24579: POP
24580: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24581: LD_VAR 0 1
24585: PPUSH
24586: LD_EXP 81
24590: PUSH
24591: LD_VAR 0 5
24595: ARRAY
24596: PUSH
24597: LD_INT 0
24599: PLUS
24600: PPUSH
24601: CALL_OW 505
// end ;
24605: LD_VAR 0 3
24609: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24610: LD_INT 0
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
// if not hack in hackTanks then
24616: LD_VAR 0 1
24620: PUSH
24621: LD_EXP 80
24625: IN
24626: NOT
24627: IFFALSE 24631
// exit ;
24629: GO 24871
// index := GetElementIndex ( hackTanks , hack ) ;
24631: LD_ADDR_VAR 0 4
24635: PUSH
24636: LD_EXP 80
24640: PPUSH
24641: LD_VAR 0 1
24645: PPUSH
24646: CALL 31915 0 2
24650: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24651: LD_ADDR_VAR 0 3
24655: PUSH
24656: DOUBLE
24657: LD_EXP 81
24661: PUSH
24662: LD_VAR 0 4
24666: ARRAY
24667: INC
24668: ST_TO_ADDR
24669: LD_INT 1
24671: PUSH
24672: FOR_DOWNTO
24673: IFFALSE 24845
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24675: LD_ADDR_VAR 0 5
24679: PUSH
24680: LD_EXP 81
24684: PUSH
24685: LD_VAR 0 4
24689: ARRAY
24690: PUSH
24691: LD_VAR 0 3
24695: ARRAY
24696: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24697: LD_VAR 0 5
24701: PUSH
24702: LD_INT 1
24704: ARRAY
24705: PPUSH
24706: CALL_OW 302
24710: NOT
24711: PUSH
24712: LD_VAR 0 5
24716: PUSH
24717: LD_INT 1
24719: ARRAY
24720: PPUSH
24721: CALL_OW 255
24725: PUSH
24726: LD_VAR 0 1
24730: PPUSH
24731: CALL_OW 255
24735: NONEQUAL
24736: OR
24737: IFFALSE 24843
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24739: LD_VAR 0 5
24743: PUSH
24744: LD_INT 1
24746: ARRAY
24747: PPUSH
24748: CALL_OW 305
24752: PUSH
24753: LD_VAR 0 5
24757: PUSH
24758: LD_INT 1
24760: ARRAY
24761: PPUSH
24762: CALL_OW 255
24766: PUSH
24767: LD_VAR 0 1
24771: PPUSH
24772: CALL_OW 255
24776: EQUAL
24777: AND
24778: IFFALSE 24802
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24780: LD_VAR 0 5
24784: PUSH
24785: LD_INT 1
24787: ARRAY
24788: PPUSH
24789: LD_VAR 0 5
24793: PUSH
24794: LD_INT 2
24796: ARRAY
24797: PPUSH
24798: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24802: LD_ADDR_EXP 81
24806: PUSH
24807: LD_EXP 81
24811: PPUSH
24812: LD_VAR 0 4
24816: PPUSH
24817: LD_EXP 81
24821: PUSH
24822: LD_VAR 0 4
24826: ARRAY
24827: PPUSH
24828: LD_VAR 0 3
24832: PPUSH
24833: CALL_OW 3
24837: PPUSH
24838: CALL_OW 1
24842: ST_TO_ADDR
// end ; end ;
24843: GO 24672
24845: POP
24846: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24847: LD_VAR 0 1
24851: PPUSH
24852: LD_EXP 81
24856: PUSH
24857: LD_VAR 0 4
24861: ARRAY
24862: PUSH
24863: LD_INT 0
24865: PLUS
24866: PPUSH
24867: CALL_OW 505
// end ;
24871: LD_VAR 0 2
24875: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24876: LD_INT 0
24878: PPUSH
24879: PPUSH
24880: PPUSH
24881: PPUSH
// if not hack in hackTanks then
24882: LD_VAR 0 1
24886: PUSH
24887: LD_EXP 80
24891: IN
24892: NOT
24893: IFFALSE 24897
// exit ;
24895: GO 24982
// index := GetElementIndex ( hackTanks , hack ) ;
24897: LD_ADDR_VAR 0 5
24901: PUSH
24902: LD_EXP 80
24906: PPUSH
24907: LD_VAR 0 1
24911: PPUSH
24912: CALL 31915 0 2
24916: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24917: LD_ADDR_VAR 0 4
24921: PUSH
24922: DOUBLE
24923: LD_INT 1
24925: DEC
24926: ST_TO_ADDR
24927: LD_EXP 81
24931: PUSH
24932: LD_VAR 0 5
24936: ARRAY
24937: PUSH
24938: FOR_TO
24939: IFFALSE 24980
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24941: LD_EXP 81
24945: PUSH
24946: LD_VAR 0 5
24950: ARRAY
24951: PUSH
24952: LD_VAR 0 4
24956: ARRAY
24957: PUSH
24958: LD_INT 1
24960: ARRAY
24961: PUSH
24962: LD_VAR 0 2
24966: EQUAL
24967: IFFALSE 24978
// KillUnit ( vehicle ) ;
24969: LD_VAR 0 2
24973: PPUSH
24974: CALL_OW 66
24978: GO 24938
24980: POP
24981: POP
// end ;
24982: LD_VAR 0 3
24986: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24987: LD_EXP 85
24991: NOT
24992: IFFALSE 25027
24994: GO 24996
24996: DISABLE
// begin initMiner := true ;
24997: LD_ADDR_EXP 85
25001: PUSH
25002: LD_INT 1
25004: ST_TO_ADDR
// minersList := [ ] ;
25005: LD_ADDR_EXP 86
25009: PUSH
25010: EMPTY
25011: ST_TO_ADDR
// minerMinesList := [ ] ;
25012: LD_ADDR_EXP 87
25016: PUSH
25017: EMPTY
25018: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25019: LD_ADDR_EXP 88
25023: PUSH
25024: LD_INT 5
25026: ST_TO_ADDR
// end ;
25027: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25028: LD_EXP 85
25032: PUSH
25033: LD_INT 34
25035: PUSH
25036: LD_INT 81
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PPUSH
25043: CALL_OW 69
25047: AND
25048: IFFALSE 25509
25050: GO 25052
25052: DISABLE
25053: LD_INT 0
25055: PPUSH
25056: PPUSH
25057: PPUSH
25058: PPUSH
// begin enable ;
25059: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25060: LD_ADDR_VAR 0 1
25064: PUSH
25065: LD_INT 34
25067: PUSH
25068: LD_INT 81
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PPUSH
25075: CALL_OW 69
25079: PUSH
25080: FOR_IN
25081: IFFALSE 25153
// begin if not i in minersList then
25083: LD_VAR 0 1
25087: PUSH
25088: LD_EXP 86
25092: IN
25093: NOT
25094: IFFALSE 25151
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25096: LD_ADDR_EXP 86
25100: PUSH
25101: LD_EXP 86
25105: PPUSH
25106: LD_EXP 86
25110: PUSH
25111: LD_INT 1
25113: PLUS
25114: PPUSH
25115: LD_VAR 0 1
25119: PPUSH
25120: CALL_OW 1
25124: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25125: LD_ADDR_EXP 87
25129: PUSH
25130: LD_EXP 87
25134: PPUSH
25135: LD_EXP 87
25139: PUSH
25140: LD_INT 1
25142: PLUS
25143: PPUSH
25144: EMPTY
25145: PPUSH
25146: CALL_OW 1
25150: ST_TO_ADDR
// end end ;
25151: GO 25080
25153: POP
25154: POP
// for i := minerMinesList downto 1 do
25155: LD_ADDR_VAR 0 1
25159: PUSH
25160: DOUBLE
25161: LD_EXP 87
25165: INC
25166: ST_TO_ADDR
25167: LD_INT 1
25169: PUSH
25170: FOR_DOWNTO
25171: IFFALSE 25507
// begin if IsLive ( minersList [ i ] ) then
25173: LD_EXP 86
25177: PUSH
25178: LD_VAR 0 1
25182: ARRAY
25183: PPUSH
25184: CALL_OW 300
25188: IFFALSE 25216
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25190: LD_EXP 86
25194: PUSH
25195: LD_VAR 0 1
25199: ARRAY
25200: PPUSH
25201: LD_EXP 87
25205: PUSH
25206: LD_VAR 0 1
25210: ARRAY
25211: PPUSH
25212: CALL_OW 505
// if not minerMinesList [ i ] then
25216: LD_EXP 87
25220: PUSH
25221: LD_VAR 0 1
25225: ARRAY
25226: NOT
25227: IFFALSE 25231
// continue ;
25229: GO 25170
// for j := minerMinesList [ i ] downto 1 do
25231: LD_ADDR_VAR 0 2
25235: PUSH
25236: DOUBLE
25237: LD_EXP 87
25241: PUSH
25242: LD_VAR 0 1
25246: ARRAY
25247: INC
25248: ST_TO_ADDR
25249: LD_INT 1
25251: PUSH
25252: FOR_DOWNTO
25253: IFFALSE 25503
// begin side := GetSide ( minersList [ i ] ) ;
25255: LD_ADDR_VAR 0 3
25259: PUSH
25260: LD_EXP 86
25264: PUSH
25265: LD_VAR 0 1
25269: ARRAY
25270: PPUSH
25271: CALL_OW 255
25275: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25276: LD_ADDR_VAR 0 4
25280: PUSH
25281: LD_EXP 87
25285: PUSH
25286: LD_VAR 0 1
25290: ARRAY
25291: PUSH
25292: LD_VAR 0 2
25296: ARRAY
25297: PUSH
25298: LD_INT 1
25300: ARRAY
25301: PPUSH
25302: LD_EXP 87
25306: PUSH
25307: LD_VAR 0 1
25311: ARRAY
25312: PUSH
25313: LD_VAR 0 2
25317: ARRAY
25318: PUSH
25319: LD_INT 2
25321: ARRAY
25322: PPUSH
25323: CALL_OW 428
25327: ST_TO_ADDR
// if not tmp then
25328: LD_VAR 0 4
25332: NOT
25333: IFFALSE 25337
// continue ;
25335: GO 25252
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25337: LD_VAR 0 4
25341: PUSH
25342: LD_INT 81
25344: PUSH
25345: LD_VAR 0 3
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PPUSH
25354: CALL_OW 69
25358: IN
25359: PUSH
25360: LD_EXP 87
25364: PUSH
25365: LD_VAR 0 1
25369: ARRAY
25370: PUSH
25371: LD_VAR 0 2
25375: ARRAY
25376: PUSH
25377: LD_INT 1
25379: ARRAY
25380: PPUSH
25381: LD_EXP 87
25385: PUSH
25386: LD_VAR 0 1
25390: ARRAY
25391: PUSH
25392: LD_VAR 0 2
25396: ARRAY
25397: PUSH
25398: LD_INT 2
25400: ARRAY
25401: PPUSH
25402: CALL_OW 458
25406: AND
25407: IFFALSE 25501
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25409: LD_EXP 87
25413: PUSH
25414: LD_VAR 0 1
25418: ARRAY
25419: PUSH
25420: LD_VAR 0 2
25424: ARRAY
25425: PUSH
25426: LD_INT 1
25428: ARRAY
25429: PPUSH
25430: LD_EXP 87
25434: PUSH
25435: LD_VAR 0 1
25439: ARRAY
25440: PUSH
25441: LD_VAR 0 2
25445: ARRAY
25446: PUSH
25447: LD_INT 2
25449: ARRAY
25450: PPUSH
25451: LD_VAR 0 3
25455: PPUSH
25456: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25460: LD_ADDR_EXP 87
25464: PUSH
25465: LD_EXP 87
25469: PPUSH
25470: LD_VAR 0 1
25474: PPUSH
25475: LD_EXP 87
25479: PUSH
25480: LD_VAR 0 1
25484: ARRAY
25485: PPUSH
25486: LD_VAR 0 2
25490: PPUSH
25491: CALL_OW 3
25495: PPUSH
25496: CALL_OW 1
25500: ST_TO_ADDR
// end ; end ;
25501: GO 25252
25503: POP
25504: POP
// end ;
25505: GO 25170
25507: POP
25508: POP
// end ;
25509: PPOPN 4
25511: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25512: LD_INT 0
25514: PPUSH
25515: PPUSH
// result := false ;
25516: LD_ADDR_VAR 0 4
25520: PUSH
25521: LD_INT 0
25523: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25524: LD_VAR 0 1
25528: PPUSH
25529: CALL_OW 264
25533: PUSH
25534: LD_INT 81
25536: EQUAL
25537: NOT
25538: IFFALSE 25542
// exit ;
25540: GO 25782
// index := GetElementIndex ( minersList , unit ) ;
25542: LD_ADDR_VAR 0 5
25546: PUSH
25547: LD_EXP 86
25551: PPUSH
25552: LD_VAR 0 1
25556: PPUSH
25557: CALL 31915 0 2
25561: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25562: LD_EXP 87
25566: PUSH
25567: LD_VAR 0 5
25571: ARRAY
25572: PUSH
25573: LD_EXP 88
25577: GREATEREQUAL
25578: IFFALSE 25582
// exit ;
25580: GO 25782
// ComMoveXY ( unit , x , y ) ;
25582: LD_VAR 0 1
25586: PPUSH
25587: LD_VAR 0 2
25591: PPUSH
25592: LD_VAR 0 3
25596: PPUSH
25597: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25601: LD_INT 35
25603: PPUSH
25604: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25608: LD_VAR 0 1
25612: PPUSH
25613: LD_VAR 0 2
25617: PPUSH
25618: LD_VAR 0 3
25622: PPUSH
25623: CALL 63178 0 3
25627: NOT
25628: PUSH
25629: LD_VAR 0 1
25633: PPUSH
25634: CALL_OW 314
25638: AND
25639: IFFALSE 25643
// exit ;
25641: GO 25782
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25643: LD_VAR 0 2
25647: PPUSH
25648: LD_VAR 0 3
25652: PPUSH
25653: CALL_OW 428
25657: PUSH
25658: LD_VAR 0 1
25662: EQUAL
25663: PUSH
25664: LD_VAR 0 1
25668: PPUSH
25669: CALL_OW 314
25673: NOT
25674: AND
25675: IFFALSE 25601
// PlaySoundXY ( x , y , PlantMine ) ;
25677: LD_VAR 0 2
25681: PPUSH
25682: LD_VAR 0 3
25686: PPUSH
25687: LD_STRING PlantMine
25689: PPUSH
25690: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25694: LD_VAR 0 2
25698: PPUSH
25699: LD_VAR 0 3
25703: PPUSH
25704: LD_VAR 0 1
25708: PPUSH
25709: CALL_OW 255
25713: PPUSH
25714: LD_INT 0
25716: PPUSH
25717: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25721: LD_ADDR_EXP 87
25725: PUSH
25726: LD_EXP 87
25730: PPUSH
25731: LD_VAR 0 5
25735: PUSH
25736: LD_EXP 87
25740: PUSH
25741: LD_VAR 0 5
25745: ARRAY
25746: PUSH
25747: LD_INT 1
25749: PLUS
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PPUSH
25755: LD_VAR 0 2
25759: PUSH
25760: LD_VAR 0 3
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PPUSH
25769: CALL 32130 0 3
25773: ST_TO_ADDR
// result := true ;
25774: LD_ADDR_VAR 0 4
25778: PUSH
25779: LD_INT 1
25781: ST_TO_ADDR
// end ;
25782: LD_VAR 0 4
25786: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25787: LD_INT 0
25789: PPUSH
25790: PPUSH
25791: PPUSH
// if not unit in minersList then
25792: LD_VAR 0 1
25796: PUSH
25797: LD_EXP 86
25801: IN
25802: NOT
25803: IFFALSE 25807
// exit ;
25805: GO 26199
// index := GetElementIndex ( minersList , unit ) ;
25807: LD_ADDR_VAR 0 6
25811: PUSH
25812: LD_EXP 86
25816: PPUSH
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL 31915 0 2
25826: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25827: LD_ADDR_VAR 0 5
25831: PUSH
25832: DOUBLE
25833: LD_EXP 87
25837: PUSH
25838: LD_VAR 0 6
25842: ARRAY
25843: INC
25844: ST_TO_ADDR
25845: LD_INT 1
25847: PUSH
25848: FOR_DOWNTO
25849: IFFALSE 26010
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25851: LD_EXP 87
25855: PUSH
25856: LD_VAR 0 6
25860: ARRAY
25861: PUSH
25862: LD_VAR 0 5
25866: ARRAY
25867: PUSH
25868: LD_INT 1
25870: ARRAY
25871: PUSH
25872: LD_VAR 0 2
25876: EQUAL
25877: PUSH
25878: LD_EXP 87
25882: PUSH
25883: LD_VAR 0 6
25887: ARRAY
25888: PUSH
25889: LD_VAR 0 5
25893: ARRAY
25894: PUSH
25895: LD_INT 2
25897: ARRAY
25898: PUSH
25899: LD_VAR 0 3
25903: EQUAL
25904: AND
25905: IFFALSE 26008
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25907: LD_EXP 87
25911: PUSH
25912: LD_VAR 0 6
25916: ARRAY
25917: PUSH
25918: LD_VAR 0 5
25922: ARRAY
25923: PUSH
25924: LD_INT 1
25926: ARRAY
25927: PPUSH
25928: LD_EXP 87
25932: PUSH
25933: LD_VAR 0 6
25937: ARRAY
25938: PUSH
25939: LD_VAR 0 5
25943: ARRAY
25944: PUSH
25945: LD_INT 2
25947: ARRAY
25948: PPUSH
25949: LD_VAR 0 1
25953: PPUSH
25954: CALL_OW 255
25958: PPUSH
25959: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25963: LD_ADDR_EXP 87
25967: PUSH
25968: LD_EXP 87
25972: PPUSH
25973: LD_VAR 0 6
25977: PPUSH
25978: LD_EXP 87
25982: PUSH
25983: LD_VAR 0 6
25987: ARRAY
25988: PPUSH
25989: LD_VAR 0 5
25993: PPUSH
25994: CALL_OW 3
25998: PPUSH
25999: CALL_OW 1
26003: ST_TO_ADDR
// exit ;
26004: POP
26005: POP
26006: GO 26199
// end ; end ;
26008: GO 25848
26010: POP
26011: POP
// for i := minerMinesList [ index ] downto 1 do
26012: LD_ADDR_VAR 0 5
26016: PUSH
26017: DOUBLE
26018: LD_EXP 87
26022: PUSH
26023: LD_VAR 0 6
26027: ARRAY
26028: INC
26029: ST_TO_ADDR
26030: LD_INT 1
26032: PUSH
26033: FOR_DOWNTO
26034: IFFALSE 26197
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26036: LD_EXP 87
26040: PUSH
26041: LD_VAR 0 6
26045: ARRAY
26046: PUSH
26047: LD_VAR 0 5
26051: ARRAY
26052: PUSH
26053: LD_INT 1
26055: ARRAY
26056: PPUSH
26057: LD_EXP 87
26061: PUSH
26062: LD_VAR 0 6
26066: ARRAY
26067: PUSH
26068: LD_VAR 0 5
26072: ARRAY
26073: PUSH
26074: LD_INT 2
26076: ARRAY
26077: PPUSH
26078: LD_VAR 0 2
26082: PPUSH
26083: LD_VAR 0 3
26087: PPUSH
26088: CALL_OW 298
26092: PUSH
26093: LD_INT 6
26095: LESS
26096: IFFALSE 26195
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26098: LD_EXP 87
26102: PUSH
26103: LD_VAR 0 6
26107: ARRAY
26108: PUSH
26109: LD_VAR 0 5
26113: ARRAY
26114: PUSH
26115: LD_INT 1
26117: ARRAY
26118: PPUSH
26119: LD_EXP 87
26123: PUSH
26124: LD_VAR 0 6
26128: ARRAY
26129: PUSH
26130: LD_VAR 0 5
26134: ARRAY
26135: PUSH
26136: LD_INT 2
26138: ARRAY
26139: PPUSH
26140: LD_VAR 0 1
26144: PPUSH
26145: CALL_OW 255
26149: PPUSH
26150: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26154: LD_ADDR_EXP 87
26158: PUSH
26159: LD_EXP 87
26163: PPUSH
26164: LD_VAR 0 6
26168: PPUSH
26169: LD_EXP 87
26173: PUSH
26174: LD_VAR 0 6
26178: ARRAY
26179: PPUSH
26180: LD_VAR 0 5
26184: PPUSH
26185: CALL_OW 3
26189: PPUSH
26190: CALL_OW 1
26194: ST_TO_ADDR
// end ; end ;
26195: GO 26033
26197: POP
26198: POP
// end ;
26199: LD_VAR 0 4
26203: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26204: LD_INT 0
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
26210: PPUSH
26211: PPUSH
26212: PPUSH
26213: PPUSH
26214: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26215: LD_VAR 0 1
26219: PPUSH
26220: CALL_OW 264
26224: PUSH
26225: LD_INT 81
26227: EQUAL
26228: NOT
26229: PUSH
26230: LD_VAR 0 1
26234: PUSH
26235: LD_EXP 86
26239: IN
26240: NOT
26241: OR
26242: IFFALSE 26246
// exit ;
26244: GO 26568
// index := GetElementIndex ( minersList , unit ) ;
26246: LD_ADDR_VAR 0 6
26250: PUSH
26251: LD_EXP 86
26255: PPUSH
26256: LD_VAR 0 1
26260: PPUSH
26261: CALL 31915 0 2
26265: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26266: LD_ADDR_VAR 0 8
26270: PUSH
26271: LD_EXP 88
26275: PUSH
26276: LD_EXP 87
26280: PUSH
26281: LD_VAR 0 6
26285: ARRAY
26286: MINUS
26287: ST_TO_ADDR
// if not minesFreeAmount then
26288: LD_VAR 0 8
26292: NOT
26293: IFFALSE 26297
// exit ;
26295: GO 26568
// tmp := [ ] ;
26297: LD_ADDR_VAR 0 7
26301: PUSH
26302: EMPTY
26303: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26304: LD_ADDR_VAR 0 5
26308: PUSH
26309: DOUBLE
26310: LD_INT 1
26312: DEC
26313: ST_TO_ADDR
26314: LD_VAR 0 8
26318: PUSH
26319: FOR_TO
26320: IFFALSE 26515
// begin _d := rand ( 0 , 5 ) ;
26322: LD_ADDR_VAR 0 11
26326: PUSH
26327: LD_INT 0
26329: PPUSH
26330: LD_INT 5
26332: PPUSH
26333: CALL_OW 12
26337: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26338: LD_ADDR_VAR 0 12
26342: PUSH
26343: LD_INT 2
26345: PPUSH
26346: LD_INT 6
26348: PPUSH
26349: CALL_OW 12
26353: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26354: LD_ADDR_VAR 0 9
26358: PUSH
26359: LD_VAR 0 2
26363: PPUSH
26364: LD_VAR 0 11
26368: PPUSH
26369: LD_VAR 0 12
26373: PPUSH
26374: CALL_OW 272
26378: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26379: LD_ADDR_VAR 0 10
26383: PUSH
26384: LD_VAR 0 3
26388: PPUSH
26389: LD_VAR 0 11
26393: PPUSH
26394: LD_VAR 0 12
26398: PPUSH
26399: CALL_OW 273
26403: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26404: LD_VAR 0 9
26408: PPUSH
26409: LD_VAR 0 10
26413: PPUSH
26414: CALL_OW 488
26418: PUSH
26419: LD_VAR 0 9
26423: PUSH
26424: LD_VAR 0 10
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_VAR 0 7
26437: IN
26438: NOT
26439: AND
26440: PUSH
26441: LD_VAR 0 9
26445: PPUSH
26446: LD_VAR 0 10
26450: PPUSH
26451: CALL_OW 458
26455: NOT
26456: AND
26457: IFFALSE 26499
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26459: LD_ADDR_VAR 0 7
26463: PUSH
26464: LD_VAR 0 7
26468: PPUSH
26469: LD_VAR 0 7
26473: PUSH
26474: LD_INT 1
26476: PLUS
26477: PPUSH
26478: LD_VAR 0 9
26482: PUSH
26483: LD_VAR 0 10
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PPUSH
26492: CALL_OW 1
26496: ST_TO_ADDR
26497: GO 26513
// i := i - 1 ;
26499: LD_ADDR_VAR 0 5
26503: PUSH
26504: LD_VAR 0 5
26508: PUSH
26509: LD_INT 1
26511: MINUS
26512: ST_TO_ADDR
// end ;
26513: GO 26319
26515: POP
26516: POP
// for i in tmp do
26517: LD_ADDR_VAR 0 5
26521: PUSH
26522: LD_VAR 0 7
26526: PUSH
26527: FOR_IN
26528: IFFALSE 26566
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26530: LD_VAR 0 1
26534: PPUSH
26535: LD_VAR 0 5
26539: PUSH
26540: LD_INT 1
26542: ARRAY
26543: PPUSH
26544: LD_VAR 0 5
26548: PUSH
26549: LD_INT 2
26551: ARRAY
26552: PPUSH
26553: CALL 25512 0 3
26557: NOT
26558: IFFALSE 26564
// exit ;
26560: POP
26561: POP
26562: GO 26568
26564: GO 26527
26566: POP
26567: POP
// end ;
26568: LD_VAR 0 4
26572: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26573: LD_INT 0
26575: PPUSH
26576: PPUSH
26577: PPUSH
26578: PPUSH
26579: PPUSH
26580: PPUSH
26581: PPUSH
// if not GetClass ( unit ) = class_sniper then
26582: LD_VAR 0 1
26586: PPUSH
26587: CALL_OW 257
26591: PUSH
26592: LD_INT 5
26594: EQUAL
26595: NOT
26596: IFFALSE 26600
// exit ;
26598: GO 26988
// dist := 8 ;
26600: LD_ADDR_VAR 0 5
26604: PUSH
26605: LD_INT 8
26607: ST_TO_ADDR
// viewRange := 12 ;
26608: LD_ADDR_VAR 0 7
26612: PUSH
26613: LD_INT 12
26615: ST_TO_ADDR
// side := GetSide ( unit ) ;
26616: LD_ADDR_VAR 0 6
26620: PUSH
26621: LD_VAR 0 1
26625: PPUSH
26626: CALL_OW 255
26630: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26631: LD_INT 61
26633: PPUSH
26634: LD_VAR 0 6
26638: PPUSH
26639: CALL_OW 321
26643: PUSH
26644: LD_INT 2
26646: EQUAL
26647: IFFALSE 26657
// viewRange := 16 ;
26649: LD_ADDR_VAR 0 7
26653: PUSH
26654: LD_INT 16
26656: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26657: LD_VAR 0 1
26661: PPUSH
26662: LD_VAR 0 2
26666: PPUSH
26667: LD_VAR 0 3
26671: PPUSH
26672: CALL_OW 297
26676: PUSH
26677: LD_VAR 0 5
26681: GREATER
26682: IFFALSE 26761
// begin ComMoveXY ( unit , x , y ) ;
26684: LD_VAR 0 1
26688: PPUSH
26689: LD_VAR 0 2
26693: PPUSH
26694: LD_VAR 0 3
26698: PPUSH
26699: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26703: LD_INT 35
26705: PPUSH
26706: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26710: LD_VAR 0 1
26714: PPUSH
26715: LD_VAR 0 2
26719: PPUSH
26720: LD_VAR 0 3
26724: PPUSH
26725: CALL 63178 0 3
26729: NOT
26730: IFFALSE 26734
// exit ;
26732: GO 26988
// until GetDistUnitXY ( unit , x , y ) < dist ;
26734: LD_VAR 0 1
26738: PPUSH
26739: LD_VAR 0 2
26743: PPUSH
26744: LD_VAR 0 3
26748: PPUSH
26749: CALL_OW 297
26753: PUSH
26754: LD_VAR 0 5
26758: LESS
26759: IFFALSE 26703
// end ; ComTurnXY ( unit , x , y ) ;
26761: LD_VAR 0 1
26765: PPUSH
26766: LD_VAR 0 2
26770: PPUSH
26771: LD_VAR 0 3
26775: PPUSH
26776: CALL_OW 118
// wait ( 5 ) ;
26780: LD_INT 5
26782: PPUSH
26783: CALL_OW 67
// _d := GetDir ( unit ) ;
26787: LD_ADDR_VAR 0 10
26791: PUSH
26792: LD_VAR 0 1
26796: PPUSH
26797: CALL_OW 254
26801: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26802: LD_ADDR_VAR 0 8
26806: PUSH
26807: LD_VAR 0 1
26811: PPUSH
26812: CALL_OW 250
26816: PPUSH
26817: LD_VAR 0 10
26821: PPUSH
26822: LD_VAR 0 5
26826: PPUSH
26827: CALL_OW 272
26831: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26832: LD_ADDR_VAR 0 9
26836: PUSH
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 251
26846: PPUSH
26847: LD_VAR 0 10
26851: PPUSH
26852: LD_VAR 0 5
26856: PPUSH
26857: CALL_OW 273
26861: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26862: LD_VAR 0 8
26866: PPUSH
26867: LD_VAR 0 9
26871: PPUSH
26872: CALL_OW 488
26876: NOT
26877: IFFALSE 26881
// exit ;
26879: GO 26988
// ComAnimCustom ( unit , 1 ) ;
26881: LD_VAR 0 1
26885: PPUSH
26886: LD_INT 1
26888: PPUSH
26889: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26893: LD_VAR 0 8
26897: PPUSH
26898: LD_VAR 0 9
26902: PPUSH
26903: LD_VAR 0 6
26907: PPUSH
26908: LD_VAR 0 7
26912: PPUSH
26913: CALL_OW 330
// repeat wait ( 1 ) ;
26917: LD_INT 1
26919: PPUSH
26920: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26924: LD_VAR 0 1
26928: PPUSH
26929: CALL_OW 316
26933: PUSH
26934: LD_VAR 0 1
26938: PPUSH
26939: CALL_OW 314
26943: OR
26944: PUSH
26945: LD_VAR 0 1
26949: PPUSH
26950: CALL_OW 302
26954: NOT
26955: OR
26956: PUSH
26957: LD_VAR 0 1
26961: PPUSH
26962: CALL_OW 301
26966: OR
26967: IFFALSE 26917
// RemoveSeeing ( _x , _y , side ) ;
26969: LD_VAR 0 8
26973: PPUSH
26974: LD_VAR 0 9
26978: PPUSH
26979: LD_VAR 0 6
26983: PPUSH
26984: CALL_OW 331
// end ; end_of_file
26988: LD_VAR 0 4
26992: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26993: LD_INT 0
26995: PPUSH
26996: PPUSH
// if exist_mode then
26997: LD_VAR 0 2
27001: IFFALSE 27026
// unit := CreateCharacter ( prefix & ident ) else
27003: LD_ADDR_VAR 0 5
27007: PUSH
27008: LD_VAR 0 3
27012: PUSH
27013: LD_VAR 0 1
27017: STR
27018: PPUSH
27019: CALL_OW 34
27023: ST_TO_ADDR
27024: GO 27041
// unit := NewCharacter ( ident ) ;
27026: LD_ADDR_VAR 0 5
27030: PUSH
27031: LD_VAR 0 1
27035: PPUSH
27036: CALL_OW 25
27040: ST_TO_ADDR
// result := unit ;
27041: LD_ADDR_VAR 0 4
27045: PUSH
27046: LD_VAR 0 5
27050: ST_TO_ADDR
// end ;
27051: LD_VAR 0 4
27055: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27056: LD_INT 0
27058: PPUSH
27059: PPUSH
// if not side or not nation then
27060: LD_VAR 0 1
27064: NOT
27065: PUSH
27066: LD_VAR 0 2
27070: NOT
27071: OR
27072: IFFALSE 27076
// exit ;
27074: GO 27844
// case nation of nation_american :
27076: LD_VAR 0 2
27080: PUSH
27081: LD_INT 1
27083: DOUBLE
27084: EQUAL
27085: IFTRUE 27089
27087: GO 27303
27089: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27090: LD_ADDR_VAR 0 4
27094: PUSH
27095: LD_INT 35
27097: PUSH
27098: LD_INT 45
27100: PUSH
27101: LD_INT 46
27103: PUSH
27104: LD_INT 47
27106: PUSH
27107: LD_INT 82
27109: PUSH
27110: LD_INT 83
27112: PUSH
27113: LD_INT 84
27115: PUSH
27116: LD_INT 85
27118: PUSH
27119: LD_INT 86
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: LD_INT 6
27130: PUSH
27131: LD_INT 15
27133: PUSH
27134: LD_INT 16
27136: PUSH
27137: LD_INT 7
27139: PUSH
27140: LD_INT 12
27142: PUSH
27143: LD_INT 13
27145: PUSH
27146: LD_INT 10
27148: PUSH
27149: LD_INT 14
27151: PUSH
27152: LD_INT 20
27154: PUSH
27155: LD_INT 21
27157: PUSH
27158: LD_INT 22
27160: PUSH
27161: LD_INT 25
27163: PUSH
27164: LD_INT 32
27166: PUSH
27167: LD_INT 27
27169: PUSH
27170: LD_INT 36
27172: PUSH
27173: LD_INT 69
27175: PUSH
27176: LD_INT 39
27178: PUSH
27179: LD_INT 34
27181: PUSH
27182: LD_INT 40
27184: PUSH
27185: LD_INT 48
27187: PUSH
27188: LD_INT 49
27190: PUSH
27191: LD_INT 50
27193: PUSH
27194: LD_INT 51
27196: PUSH
27197: LD_INT 52
27199: PUSH
27200: LD_INT 53
27202: PUSH
27203: LD_INT 54
27205: PUSH
27206: LD_INT 55
27208: PUSH
27209: LD_INT 56
27211: PUSH
27212: LD_INT 57
27214: PUSH
27215: LD_INT 58
27217: PUSH
27218: LD_INT 59
27220: PUSH
27221: LD_INT 60
27223: PUSH
27224: LD_INT 61
27226: PUSH
27227: LD_INT 62
27229: PUSH
27230: LD_INT 80
27232: PUSH
27233: LD_INT 82
27235: PUSH
27236: LD_INT 83
27238: PUSH
27239: LD_INT 84
27241: PUSH
27242: LD_INT 85
27244: PUSH
27245: LD_INT 86
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: ST_TO_ADDR
27301: GO 27768
27303: LD_INT 2
27305: DOUBLE
27306: EQUAL
27307: IFTRUE 27311
27309: GO 27537
27311: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27312: LD_ADDR_VAR 0 4
27316: PUSH
27317: LD_INT 35
27319: PUSH
27320: LD_INT 45
27322: PUSH
27323: LD_INT 46
27325: PUSH
27326: LD_INT 47
27328: PUSH
27329: LD_INT 82
27331: PUSH
27332: LD_INT 83
27334: PUSH
27335: LD_INT 84
27337: PUSH
27338: LD_INT 85
27340: PUSH
27341: LD_INT 87
27343: PUSH
27344: LD_INT 70
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: LD_INT 11
27352: PUSH
27353: LD_INT 3
27355: PUSH
27356: LD_INT 4
27358: PUSH
27359: LD_INT 5
27361: PUSH
27362: LD_INT 6
27364: PUSH
27365: LD_INT 15
27367: PUSH
27368: LD_INT 18
27370: PUSH
27371: LD_INT 7
27373: PUSH
27374: LD_INT 17
27376: PUSH
27377: LD_INT 8
27379: PUSH
27380: LD_INT 20
27382: PUSH
27383: LD_INT 21
27385: PUSH
27386: LD_INT 22
27388: PUSH
27389: LD_INT 72
27391: PUSH
27392: LD_INT 26
27394: PUSH
27395: LD_INT 69
27397: PUSH
27398: LD_INT 39
27400: PUSH
27401: LD_INT 40
27403: PUSH
27404: LD_INT 41
27406: PUSH
27407: LD_INT 42
27409: PUSH
27410: LD_INT 43
27412: PUSH
27413: LD_INT 48
27415: PUSH
27416: LD_INT 49
27418: PUSH
27419: LD_INT 50
27421: PUSH
27422: LD_INT 51
27424: PUSH
27425: LD_INT 52
27427: PUSH
27428: LD_INT 53
27430: PUSH
27431: LD_INT 54
27433: PUSH
27434: LD_INT 55
27436: PUSH
27437: LD_INT 56
27439: PUSH
27440: LD_INT 60
27442: PUSH
27443: LD_INT 61
27445: PUSH
27446: LD_INT 62
27448: PUSH
27449: LD_INT 66
27451: PUSH
27452: LD_INT 67
27454: PUSH
27455: LD_INT 68
27457: PUSH
27458: LD_INT 81
27460: PUSH
27461: LD_INT 82
27463: PUSH
27464: LD_INT 83
27466: PUSH
27467: LD_INT 84
27469: PUSH
27470: LD_INT 85
27472: PUSH
27473: LD_INT 87
27475: PUSH
27476: LD_INT 88
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: ST_TO_ADDR
27535: GO 27768
27537: LD_INT 3
27539: DOUBLE
27540: EQUAL
27541: IFTRUE 27545
27543: GO 27767
27545: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27546: LD_ADDR_VAR 0 4
27550: PUSH
27551: LD_INT 46
27553: PUSH
27554: LD_INT 47
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: LD_INT 2
27562: PUSH
27563: LD_INT 82
27565: PUSH
27566: LD_INT 83
27568: PUSH
27569: LD_INT 84
27571: PUSH
27572: LD_INT 85
27574: PUSH
27575: LD_INT 86
27577: PUSH
27578: LD_INT 11
27580: PUSH
27581: LD_INT 9
27583: PUSH
27584: LD_INT 20
27586: PUSH
27587: LD_INT 19
27589: PUSH
27590: LD_INT 21
27592: PUSH
27593: LD_INT 24
27595: PUSH
27596: LD_INT 22
27598: PUSH
27599: LD_INT 25
27601: PUSH
27602: LD_INT 28
27604: PUSH
27605: LD_INT 29
27607: PUSH
27608: LD_INT 30
27610: PUSH
27611: LD_INT 31
27613: PUSH
27614: LD_INT 37
27616: PUSH
27617: LD_INT 38
27619: PUSH
27620: LD_INT 32
27622: PUSH
27623: LD_INT 27
27625: PUSH
27626: LD_INT 33
27628: PUSH
27629: LD_INT 69
27631: PUSH
27632: LD_INT 39
27634: PUSH
27635: LD_INT 34
27637: PUSH
27638: LD_INT 40
27640: PUSH
27641: LD_INT 71
27643: PUSH
27644: LD_INT 23
27646: PUSH
27647: LD_INT 44
27649: PUSH
27650: LD_INT 48
27652: PUSH
27653: LD_INT 49
27655: PUSH
27656: LD_INT 50
27658: PUSH
27659: LD_INT 51
27661: PUSH
27662: LD_INT 52
27664: PUSH
27665: LD_INT 53
27667: PUSH
27668: LD_INT 54
27670: PUSH
27671: LD_INT 55
27673: PUSH
27674: LD_INT 56
27676: PUSH
27677: LD_INT 57
27679: PUSH
27680: LD_INT 58
27682: PUSH
27683: LD_INT 59
27685: PUSH
27686: LD_INT 63
27688: PUSH
27689: LD_INT 64
27691: PUSH
27692: LD_INT 65
27694: PUSH
27695: LD_INT 82
27697: PUSH
27698: LD_INT 83
27700: PUSH
27701: LD_INT 84
27703: PUSH
27704: LD_INT 85
27706: PUSH
27707: LD_INT 86
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: ST_TO_ADDR
27765: GO 27768
27767: POP
// if state > - 1 and state < 3 then
27768: LD_VAR 0 3
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: GREATER
27777: PUSH
27778: LD_VAR 0 3
27782: PUSH
27783: LD_INT 3
27785: LESS
27786: AND
27787: IFFALSE 27844
// for i in result do
27789: LD_ADDR_VAR 0 5
27793: PUSH
27794: LD_VAR 0 4
27798: PUSH
27799: FOR_IN
27800: IFFALSE 27842
// if GetTech ( i , side ) <> state then
27802: LD_VAR 0 5
27806: PPUSH
27807: LD_VAR 0 1
27811: PPUSH
27812: CALL_OW 321
27816: PUSH
27817: LD_VAR 0 3
27821: NONEQUAL
27822: IFFALSE 27840
// result := result diff i ;
27824: LD_ADDR_VAR 0 4
27828: PUSH
27829: LD_VAR 0 4
27833: PUSH
27834: LD_VAR 0 5
27838: DIFF
27839: ST_TO_ADDR
27840: GO 27799
27842: POP
27843: POP
// end ;
27844: LD_VAR 0 4
27848: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27849: LD_INT 0
27851: PPUSH
27852: PPUSH
27853: PPUSH
// result := true ;
27854: LD_ADDR_VAR 0 3
27858: PUSH
27859: LD_INT 1
27861: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27862: LD_ADDR_VAR 0 5
27866: PUSH
27867: LD_VAR 0 2
27871: PPUSH
27872: CALL_OW 480
27876: ST_TO_ADDR
// if not tmp then
27877: LD_VAR 0 5
27881: NOT
27882: IFFALSE 27886
// exit ;
27884: GO 27935
// for i in tmp do
27886: LD_ADDR_VAR 0 4
27890: PUSH
27891: LD_VAR 0 5
27895: PUSH
27896: FOR_IN
27897: IFFALSE 27933
// if GetTech ( i , side ) <> state_researched then
27899: LD_VAR 0 4
27903: PPUSH
27904: LD_VAR 0 1
27908: PPUSH
27909: CALL_OW 321
27913: PUSH
27914: LD_INT 2
27916: NONEQUAL
27917: IFFALSE 27931
// begin result := false ;
27919: LD_ADDR_VAR 0 3
27923: PUSH
27924: LD_INT 0
27926: ST_TO_ADDR
// exit ;
27927: POP
27928: POP
27929: GO 27935
// end ;
27931: GO 27896
27933: POP
27934: POP
// end ;
27935: LD_VAR 0 3
27939: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27940: LD_INT 0
27942: PPUSH
27943: PPUSH
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
27952: PPUSH
27953: PPUSH
27954: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27955: LD_VAR 0 1
27959: NOT
27960: PUSH
27961: LD_VAR 0 1
27965: PPUSH
27966: CALL_OW 257
27970: PUSH
27971: LD_INT 9
27973: NONEQUAL
27974: OR
27975: IFFALSE 27979
// exit ;
27977: GO 28552
// side := GetSide ( unit ) ;
27979: LD_ADDR_VAR 0 9
27983: PUSH
27984: LD_VAR 0 1
27988: PPUSH
27989: CALL_OW 255
27993: ST_TO_ADDR
// tech_space := tech_spacanom ;
27994: LD_ADDR_VAR 0 12
27998: PUSH
27999: LD_INT 29
28001: ST_TO_ADDR
// tech_time := tech_taurad ;
28002: LD_ADDR_VAR 0 13
28006: PUSH
28007: LD_INT 28
28009: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28010: LD_ADDR_VAR 0 11
28014: PUSH
28015: LD_VAR 0 1
28019: PPUSH
28020: CALL_OW 310
28024: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28025: LD_VAR 0 11
28029: PPUSH
28030: CALL_OW 247
28034: PUSH
28035: LD_INT 2
28037: EQUAL
28038: IFFALSE 28042
// exit ;
28040: GO 28552
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28042: LD_ADDR_VAR 0 8
28046: PUSH
28047: LD_INT 81
28049: PUSH
28050: LD_VAR 0 9
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 3
28061: PUSH
28062: LD_INT 21
28064: PUSH
28065: LD_INT 3
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PPUSH
28080: CALL_OW 69
28084: ST_TO_ADDR
// if not tmp then
28085: LD_VAR 0 8
28089: NOT
28090: IFFALSE 28094
// exit ;
28092: GO 28552
// if in_unit then
28094: LD_VAR 0 11
28098: IFFALSE 28122
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28100: LD_ADDR_VAR 0 10
28104: PUSH
28105: LD_VAR 0 8
28109: PPUSH
28110: LD_VAR 0 11
28114: PPUSH
28115: CALL_OW 74
28119: ST_TO_ADDR
28120: GO 28142
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28122: LD_ADDR_VAR 0 10
28126: PUSH
28127: LD_VAR 0 8
28131: PPUSH
28132: LD_VAR 0 1
28136: PPUSH
28137: CALL_OW 74
28141: ST_TO_ADDR
// if not enemy then
28142: LD_VAR 0 10
28146: NOT
28147: IFFALSE 28151
// exit ;
28149: GO 28552
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28151: LD_VAR 0 11
28155: PUSH
28156: LD_VAR 0 11
28160: PPUSH
28161: LD_VAR 0 10
28165: PPUSH
28166: CALL_OW 296
28170: PUSH
28171: LD_INT 13
28173: GREATER
28174: AND
28175: PUSH
28176: LD_VAR 0 1
28180: PPUSH
28181: LD_VAR 0 10
28185: PPUSH
28186: CALL_OW 296
28190: PUSH
28191: LD_INT 12
28193: GREATER
28194: OR
28195: IFFALSE 28199
// exit ;
28197: GO 28552
// missile := [ 1 ] ;
28199: LD_ADDR_VAR 0 14
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: EMPTY
28208: LIST
28209: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28210: LD_VAR 0 9
28214: PPUSH
28215: LD_VAR 0 12
28219: PPUSH
28220: CALL_OW 325
28224: IFFALSE 28253
// missile := Replace ( missile , missile + 1 , 2 ) ;
28226: LD_ADDR_VAR 0 14
28230: PUSH
28231: LD_VAR 0 14
28235: PPUSH
28236: LD_VAR 0 14
28240: PUSH
28241: LD_INT 1
28243: PLUS
28244: PPUSH
28245: LD_INT 2
28247: PPUSH
28248: CALL_OW 1
28252: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28253: LD_VAR 0 9
28257: PPUSH
28258: LD_VAR 0 13
28262: PPUSH
28263: CALL_OW 325
28267: PUSH
28268: LD_VAR 0 10
28272: PPUSH
28273: CALL_OW 255
28277: PPUSH
28278: LD_VAR 0 13
28282: PPUSH
28283: CALL_OW 325
28287: NOT
28288: AND
28289: IFFALSE 28318
// missile := Replace ( missile , missile + 1 , 3 ) ;
28291: LD_ADDR_VAR 0 14
28295: PUSH
28296: LD_VAR 0 14
28300: PPUSH
28301: LD_VAR 0 14
28305: PUSH
28306: LD_INT 1
28308: PLUS
28309: PPUSH
28310: LD_INT 3
28312: PPUSH
28313: CALL_OW 1
28317: ST_TO_ADDR
// if missile < 2 then
28318: LD_VAR 0 14
28322: PUSH
28323: LD_INT 2
28325: LESS
28326: IFFALSE 28330
// exit ;
28328: GO 28552
// x := GetX ( enemy ) ;
28330: LD_ADDR_VAR 0 4
28334: PUSH
28335: LD_VAR 0 10
28339: PPUSH
28340: CALL_OW 250
28344: ST_TO_ADDR
// y := GetY ( enemy ) ;
28345: LD_ADDR_VAR 0 5
28349: PUSH
28350: LD_VAR 0 10
28354: PPUSH
28355: CALL_OW 251
28359: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28360: LD_ADDR_VAR 0 6
28364: PUSH
28365: LD_VAR 0 4
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PPUSH
28374: LD_INT 1
28376: PPUSH
28377: CALL_OW 12
28381: PLUS
28382: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28383: LD_ADDR_VAR 0 7
28387: PUSH
28388: LD_VAR 0 5
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PPUSH
28397: LD_INT 1
28399: PPUSH
28400: CALL_OW 12
28404: PLUS
28405: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28406: LD_VAR 0 6
28410: PPUSH
28411: LD_VAR 0 7
28415: PPUSH
28416: CALL_OW 488
28420: NOT
28421: IFFALSE 28443
// begin _x := x ;
28423: LD_ADDR_VAR 0 6
28427: PUSH
28428: LD_VAR 0 4
28432: ST_TO_ADDR
// _y := y ;
28433: LD_ADDR_VAR 0 7
28437: PUSH
28438: LD_VAR 0 5
28442: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28443: LD_ADDR_VAR 0 3
28447: PUSH
28448: LD_INT 1
28450: PPUSH
28451: LD_VAR 0 14
28455: PPUSH
28456: CALL_OW 12
28460: ST_TO_ADDR
// case i of 1 :
28461: LD_VAR 0 3
28465: PUSH
28466: LD_INT 1
28468: DOUBLE
28469: EQUAL
28470: IFTRUE 28474
28472: GO 28491
28474: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28475: LD_VAR 0 1
28479: PPUSH
28480: LD_VAR 0 10
28484: PPUSH
28485: CALL_OW 115
28489: GO 28552
28491: LD_INT 2
28493: DOUBLE
28494: EQUAL
28495: IFTRUE 28499
28497: GO 28521
28499: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28500: LD_VAR 0 1
28504: PPUSH
28505: LD_VAR 0 6
28509: PPUSH
28510: LD_VAR 0 7
28514: PPUSH
28515: CALL_OW 153
28519: GO 28552
28521: LD_INT 3
28523: DOUBLE
28524: EQUAL
28525: IFTRUE 28529
28527: GO 28551
28529: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28530: LD_VAR 0 1
28534: PPUSH
28535: LD_VAR 0 6
28539: PPUSH
28540: LD_VAR 0 7
28544: PPUSH
28545: CALL_OW 154
28549: GO 28552
28551: POP
// end ;
28552: LD_VAR 0 2
28556: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28557: LD_INT 0
28559: PPUSH
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
// if not unit or not building then
28565: LD_VAR 0 1
28569: NOT
28570: PUSH
28571: LD_VAR 0 2
28575: NOT
28576: OR
28577: IFFALSE 28581
// exit ;
28579: GO 28739
// x := GetX ( building ) ;
28581: LD_ADDR_VAR 0 5
28585: PUSH
28586: LD_VAR 0 2
28590: PPUSH
28591: CALL_OW 250
28595: ST_TO_ADDR
// y := GetY ( building ) ;
28596: LD_ADDR_VAR 0 6
28600: PUSH
28601: LD_VAR 0 2
28605: PPUSH
28606: CALL_OW 251
28610: ST_TO_ADDR
// for i = 0 to 5 do
28611: LD_ADDR_VAR 0 4
28615: PUSH
28616: DOUBLE
28617: LD_INT 0
28619: DEC
28620: ST_TO_ADDR
28621: LD_INT 5
28623: PUSH
28624: FOR_TO
28625: IFFALSE 28737
// begin _x := ShiftX ( x , i , 3 ) ;
28627: LD_ADDR_VAR 0 7
28631: PUSH
28632: LD_VAR 0 5
28636: PPUSH
28637: LD_VAR 0 4
28641: PPUSH
28642: LD_INT 3
28644: PPUSH
28645: CALL_OW 272
28649: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28650: LD_ADDR_VAR 0 8
28654: PUSH
28655: LD_VAR 0 6
28659: PPUSH
28660: LD_VAR 0 4
28664: PPUSH
28665: LD_INT 3
28667: PPUSH
28668: CALL_OW 273
28672: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28673: LD_VAR 0 7
28677: PPUSH
28678: LD_VAR 0 8
28682: PPUSH
28683: CALL_OW 488
28687: NOT
28688: IFFALSE 28692
// continue ;
28690: GO 28624
// if HexInfo ( _x , _y ) = 0 then
28692: LD_VAR 0 7
28696: PPUSH
28697: LD_VAR 0 8
28701: PPUSH
28702: CALL_OW 428
28706: PUSH
28707: LD_INT 0
28709: EQUAL
28710: IFFALSE 28735
// begin ComMoveXY ( unit , _x , _y ) ;
28712: LD_VAR 0 1
28716: PPUSH
28717: LD_VAR 0 7
28721: PPUSH
28722: LD_VAR 0 8
28726: PPUSH
28727: CALL_OW 111
// exit ;
28731: POP
28732: POP
28733: GO 28739
// end ; end ;
28735: GO 28624
28737: POP
28738: POP
// end ;
28739: LD_VAR 0 3
28743: RET
// export function ScanBase ( side , base_area ) ; begin
28744: LD_INT 0
28746: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28747: LD_ADDR_VAR 0 3
28751: PUSH
28752: LD_VAR 0 2
28756: PPUSH
28757: LD_INT 81
28759: PUSH
28760: LD_VAR 0 1
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PPUSH
28769: CALL_OW 70
28773: ST_TO_ADDR
// end ;
28774: LD_VAR 0 3
28778: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28779: LD_INT 0
28781: PPUSH
28782: PPUSH
28783: PPUSH
28784: PPUSH
// result := false ;
28785: LD_ADDR_VAR 0 2
28789: PUSH
28790: LD_INT 0
28792: ST_TO_ADDR
// side := GetSide ( unit ) ;
28793: LD_ADDR_VAR 0 3
28797: PUSH
28798: LD_VAR 0 1
28802: PPUSH
28803: CALL_OW 255
28807: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28808: LD_ADDR_VAR 0 4
28812: PUSH
28813: LD_VAR 0 1
28817: PPUSH
28818: CALL_OW 248
28822: ST_TO_ADDR
// case nat of 1 :
28823: LD_VAR 0 4
28827: PUSH
28828: LD_INT 1
28830: DOUBLE
28831: EQUAL
28832: IFTRUE 28836
28834: GO 28847
28836: POP
// tech := tech_lassight ; 2 :
28837: LD_ADDR_VAR 0 5
28841: PUSH
28842: LD_INT 12
28844: ST_TO_ADDR
28845: GO 28886
28847: LD_INT 2
28849: DOUBLE
28850: EQUAL
28851: IFTRUE 28855
28853: GO 28866
28855: POP
// tech := tech_mortar ; 3 :
28856: LD_ADDR_VAR 0 5
28860: PUSH
28861: LD_INT 41
28863: ST_TO_ADDR
28864: GO 28886
28866: LD_INT 3
28868: DOUBLE
28869: EQUAL
28870: IFTRUE 28874
28872: GO 28885
28874: POP
// tech := tech_bazooka ; end ;
28875: LD_ADDR_VAR 0 5
28879: PUSH
28880: LD_INT 44
28882: ST_TO_ADDR
28883: GO 28886
28885: POP
// if Researched ( side , tech ) then
28886: LD_VAR 0 3
28890: PPUSH
28891: LD_VAR 0 5
28895: PPUSH
28896: CALL_OW 325
28900: IFFALSE 28927
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28902: LD_ADDR_VAR 0 2
28906: PUSH
28907: LD_INT 5
28909: PUSH
28910: LD_INT 8
28912: PUSH
28913: LD_INT 9
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: PUSH
28921: LD_VAR 0 4
28925: ARRAY
28926: ST_TO_ADDR
// end ;
28927: LD_VAR 0 2
28931: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28932: LD_INT 0
28934: PPUSH
28935: PPUSH
28936: PPUSH
// if not mines then
28937: LD_VAR 0 2
28941: NOT
28942: IFFALSE 28946
// exit ;
28944: GO 29090
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28946: LD_ADDR_VAR 0 5
28950: PUSH
28951: LD_INT 81
28953: PUSH
28954: LD_VAR 0 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 3
28965: PUSH
28966: LD_INT 21
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PPUSH
28984: CALL_OW 69
28988: ST_TO_ADDR
// for i in mines do
28989: LD_ADDR_VAR 0 4
28993: PUSH
28994: LD_VAR 0 2
28998: PUSH
28999: FOR_IN
29000: IFFALSE 29088
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29002: LD_VAR 0 4
29006: PUSH
29007: LD_INT 1
29009: ARRAY
29010: PPUSH
29011: LD_VAR 0 4
29015: PUSH
29016: LD_INT 2
29018: ARRAY
29019: PPUSH
29020: CALL_OW 458
29024: NOT
29025: IFFALSE 29029
// continue ;
29027: GO 28999
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29029: LD_VAR 0 4
29033: PUSH
29034: LD_INT 1
29036: ARRAY
29037: PPUSH
29038: LD_VAR 0 4
29042: PUSH
29043: LD_INT 2
29045: ARRAY
29046: PPUSH
29047: CALL_OW 428
29051: PUSH
29052: LD_VAR 0 5
29056: IN
29057: IFFALSE 29086
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29059: LD_VAR 0 4
29063: PUSH
29064: LD_INT 1
29066: ARRAY
29067: PPUSH
29068: LD_VAR 0 4
29072: PUSH
29073: LD_INT 2
29075: ARRAY
29076: PPUSH
29077: LD_VAR 0 1
29081: PPUSH
29082: CALL_OW 456
// end ;
29086: GO 28999
29088: POP
29089: POP
// end ;
29090: LD_VAR 0 3
29094: RET
// export function Count ( array ) ; var i ; begin
29095: LD_INT 0
29097: PPUSH
29098: PPUSH
// result := 0 ;
29099: LD_ADDR_VAR 0 2
29103: PUSH
29104: LD_INT 0
29106: ST_TO_ADDR
// for i in array do
29107: LD_ADDR_VAR 0 3
29111: PUSH
29112: LD_VAR 0 1
29116: PUSH
29117: FOR_IN
29118: IFFALSE 29142
// if i then
29120: LD_VAR 0 3
29124: IFFALSE 29140
// result := result + 1 ;
29126: LD_ADDR_VAR 0 2
29130: PUSH
29131: LD_VAR 0 2
29135: PUSH
29136: LD_INT 1
29138: PLUS
29139: ST_TO_ADDR
29140: GO 29117
29142: POP
29143: POP
// end ;
29144: LD_VAR 0 2
29148: RET
// export function IsEmpty ( building ) ; begin
29149: LD_INT 0
29151: PPUSH
// if not building then
29152: LD_VAR 0 1
29156: NOT
29157: IFFALSE 29161
// exit ;
29159: GO 29204
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29161: LD_ADDR_VAR 0 2
29165: PUSH
29166: LD_VAR 0 1
29170: PUSH
29171: LD_INT 22
29173: PUSH
29174: LD_VAR 0 1
29178: PPUSH
29179: CALL_OW 255
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 58
29190: PUSH
29191: EMPTY
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PPUSH
29198: CALL_OW 69
29202: IN
29203: ST_TO_ADDR
// end ;
29204: LD_VAR 0 2
29208: RET
// export function IsNotFull ( building ) ; var places ; begin
29209: LD_INT 0
29211: PPUSH
29212: PPUSH
// if not building then
29213: LD_VAR 0 1
29217: NOT
29218: IFFALSE 29222
// exit ;
29220: GO 29393
// result := false ;
29222: LD_ADDR_VAR 0 2
29226: PUSH
29227: LD_INT 0
29229: ST_TO_ADDR
// places := 0 ;
29230: LD_ADDR_VAR 0 3
29234: PUSH
29235: LD_INT 0
29237: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29238: LD_VAR 0 1
29242: PPUSH
29243: CALL_OW 266
29247: PUSH
29248: LD_INT 0
29250: DOUBLE
29251: EQUAL
29252: IFTRUE 29310
29254: LD_INT 1
29256: DOUBLE
29257: EQUAL
29258: IFTRUE 29310
29260: LD_INT 6
29262: DOUBLE
29263: EQUAL
29264: IFTRUE 29310
29266: LD_INT 7
29268: DOUBLE
29269: EQUAL
29270: IFTRUE 29310
29272: LD_INT 8
29274: DOUBLE
29275: EQUAL
29276: IFTRUE 29310
29278: LD_INT 4
29280: DOUBLE
29281: EQUAL
29282: IFTRUE 29310
29284: LD_INT 5
29286: DOUBLE
29287: EQUAL
29288: IFTRUE 29310
29290: LD_INT 2
29292: DOUBLE
29293: EQUAL
29294: IFTRUE 29310
29296: LD_INT 3
29298: DOUBLE
29299: EQUAL
29300: IFTRUE 29310
29302: LD_INT 35
29304: DOUBLE
29305: EQUAL
29306: IFTRUE 29310
29308: GO 29321
29310: POP
// places := 6 ; b_bunker , b_breastwork :
29311: LD_ADDR_VAR 0 3
29315: PUSH
29316: LD_INT 6
29318: ST_TO_ADDR
29319: GO 29366
29321: LD_INT 32
29323: DOUBLE
29324: EQUAL
29325: IFTRUE 29335
29327: LD_INT 31
29329: DOUBLE
29330: EQUAL
29331: IFTRUE 29335
29333: GO 29346
29335: POP
// places := 1 ; b_control_tower :
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 1
29343: ST_TO_ADDR
29344: GO 29366
29346: LD_INT 36
29348: DOUBLE
29349: EQUAL
29350: IFTRUE 29354
29352: GO 29365
29354: POP
// places := 3 ; end ;
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_INT 3
29362: ST_TO_ADDR
29363: GO 29366
29365: POP
// if places then
29366: LD_VAR 0 3
29370: IFFALSE 29393
// result := UnitsInside ( building ) < places ;
29372: LD_ADDR_VAR 0 2
29376: PUSH
29377: LD_VAR 0 1
29381: PPUSH
29382: CALL_OW 313
29386: PUSH
29387: LD_VAR 0 3
29391: LESS
29392: ST_TO_ADDR
// end ;
29393: LD_VAR 0 2
29397: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29398: LD_INT 0
29400: PPUSH
29401: PPUSH
29402: PPUSH
29403: PPUSH
// tmp := [ ] ;
29404: LD_ADDR_VAR 0 3
29408: PUSH
29409: EMPTY
29410: ST_TO_ADDR
// list := [ ] ;
29411: LD_ADDR_VAR 0 5
29415: PUSH
29416: EMPTY
29417: ST_TO_ADDR
// for i = 16 to 25 do
29418: LD_ADDR_VAR 0 4
29422: PUSH
29423: DOUBLE
29424: LD_INT 16
29426: DEC
29427: ST_TO_ADDR
29428: LD_INT 25
29430: PUSH
29431: FOR_TO
29432: IFFALSE 29505
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29434: LD_ADDR_VAR 0 3
29438: PUSH
29439: LD_VAR 0 3
29443: PUSH
29444: LD_INT 22
29446: PUSH
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL_OW 255
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 91
29463: PUSH
29464: LD_VAR 0 1
29468: PUSH
29469: LD_INT 6
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 30
29479: PUSH
29480: LD_VAR 0 4
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: PPUSH
29497: CALL_OW 69
29501: ADD
29502: ST_TO_ADDR
29503: GO 29431
29505: POP
29506: POP
// for i = 1 to tmp do
29507: LD_ADDR_VAR 0 4
29511: PUSH
29512: DOUBLE
29513: LD_INT 1
29515: DEC
29516: ST_TO_ADDR
29517: LD_VAR 0 3
29521: PUSH
29522: FOR_TO
29523: IFFALSE 29611
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29525: LD_ADDR_VAR 0 5
29529: PUSH
29530: LD_VAR 0 5
29534: PUSH
29535: LD_VAR 0 3
29539: PUSH
29540: LD_VAR 0 4
29544: ARRAY
29545: PPUSH
29546: CALL_OW 266
29550: PUSH
29551: LD_VAR 0 3
29555: PUSH
29556: LD_VAR 0 4
29560: ARRAY
29561: PPUSH
29562: CALL_OW 250
29566: PUSH
29567: LD_VAR 0 3
29571: PUSH
29572: LD_VAR 0 4
29576: ARRAY
29577: PPUSH
29578: CALL_OW 251
29582: PUSH
29583: LD_VAR 0 3
29587: PUSH
29588: LD_VAR 0 4
29592: ARRAY
29593: PPUSH
29594: CALL_OW 254
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: ADD
29608: ST_TO_ADDR
29609: GO 29522
29611: POP
29612: POP
// result := list ;
29613: LD_ADDR_VAR 0 2
29617: PUSH
29618: LD_VAR 0 5
29622: ST_TO_ADDR
// end ;
29623: LD_VAR 0 2
29627: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29628: LD_INT 0
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
// if not factory then
29637: LD_VAR 0 1
29641: NOT
29642: IFFALSE 29646
// exit ;
29644: GO 30239
// if control = control_apeman then
29646: LD_VAR 0 4
29650: PUSH
29651: LD_INT 5
29653: EQUAL
29654: IFFALSE 29763
// begin tmp := UnitsInside ( factory ) ;
29656: LD_ADDR_VAR 0 8
29660: PUSH
29661: LD_VAR 0 1
29665: PPUSH
29666: CALL_OW 313
29670: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29671: LD_VAR 0 8
29675: PPUSH
29676: LD_INT 25
29678: PUSH
29679: LD_INT 12
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PPUSH
29686: CALL_OW 72
29690: NOT
29691: IFFALSE 29701
// control := control_manual ;
29693: LD_ADDR_VAR 0 4
29697: PUSH
29698: LD_INT 1
29700: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29701: LD_ADDR_VAR 0 8
29705: PUSH
29706: LD_VAR 0 1
29710: PPUSH
29711: CALL 29398 0 1
29715: ST_TO_ADDR
// if tmp then
29716: LD_VAR 0 8
29720: IFFALSE 29763
// begin for i in tmp do
29722: LD_ADDR_VAR 0 7
29726: PUSH
29727: LD_VAR 0 8
29731: PUSH
29732: FOR_IN
29733: IFFALSE 29761
// if i [ 1 ] = b_ext_radio then
29735: LD_VAR 0 7
29739: PUSH
29740: LD_INT 1
29742: ARRAY
29743: PUSH
29744: LD_INT 22
29746: EQUAL
29747: IFFALSE 29759
// begin control := control_remote ;
29749: LD_ADDR_VAR 0 4
29753: PUSH
29754: LD_INT 2
29756: ST_TO_ADDR
// break ;
29757: GO 29761
// end ;
29759: GO 29732
29761: POP
29762: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29763: LD_VAR 0 1
29767: PPUSH
29768: LD_VAR 0 2
29772: PPUSH
29773: LD_VAR 0 3
29777: PPUSH
29778: LD_VAR 0 4
29782: PPUSH
29783: LD_VAR 0 5
29787: PPUSH
29788: CALL_OW 448
29792: IFFALSE 29827
// begin result := [ chassis , engine , control , weapon ] ;
29794: LD_ADDR_VAR 0 6
29798: PUSH
29799: LD_VAR 0 2
29803: PUSH
29804: LD_VAR 0 3
29808: PUSH
29809: LD_VAR 0 4
29813: PUSH
29814: LD_VAR 0 5
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: ST_TO_ADDR
// exit ;
29825: GO 30239
// end ; _chassis := AvailableChassisList ( factory ) ;
29827: LD_ADDR_VAR 0 9
29831: PUSH
29832: LD_VAR 0 1
29836: PPUSH
29837: CALL_OW 475
29841: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29842: LD_ADDR_VAR 0 11
29846: PUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL_OW 476
29856: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29857: LD_ADDR_VAR 0 12
29861: PUSH
29862: LD_VAR 0 1
29866: PPUSH
29867: CALL_OW 477
29871: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29872: LD_ADDR_VAR 0 10
29876: PUSH
29877: LD_VAR 0 1
29881: PPUSH
29882: CALL_OW 478
29886: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29887: LD_VAR 0 9
29891: NOT
29892: PUSH
29893: LD_VAR 0 11
29897: NOT
29898: OR
29899: PUSH
29900: LD_VAR 0 12
29904: NOT
29905: OR
29906: PUSH
29907: LD_VAR 0 10
29911: NOT
29912: OR
29913: IFFALSE 29948
// begin result := [ chassis , engine , control , weapon ] ;
29915: LD_ADDR_VAR 0 6
29919: PUSH
29920: LD_VAR 0 2
29924: PUSH
29925: LD_VAR 0 3
29929: PUSH
29930: LD_VAR 0 4
29934: PUSH
29935: LD_VAR 0 5
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: ST_TO_ADDR
// exit ;
29946: GO 30239
// end ; if not chassis in _chassis then
29948: LD_VAR 0 2
29952: PUSH
29953: LD_VAR 0 9
29957: IN
29958: NOT
29959: IFFALSE 29985
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29961: LD_ADDR_VAR 0 2
29965: PUSH
29966: LD_VAR 0 9
29970: PUSH
29971: LD_INT 1
29973: PPUSH
29974: LD_VAR 0 9
29978: PPUSH
29979: CALL_OW 12
29983: ARRAY
29984: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29985: LD_VAR 0 2
29989: PPUSH
29990: LD_VAR 0 3
29994: PPUSH
29995: CALL 30244 0 2
29999: NOT
30000: IFFALSE 30059
// repeat engine := _engine [ 1 ] ;
30002: LD_ADDR_VAR 0 3
30006: PUSH
30007: LD_VAR 0 11
30011: PUSH
30012: LD_INT 1
30014: ARRAY
30015: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30016: LD_ADDR_VAR 0 11
30020: PUSH
30021: LD_VAR 0 11
30025: PPUSH
30026: LD_INT 1
30028: PPUSH
30029: CALL_OW 3
30033: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30034: LD_VAR 0 2
30038: PPUSH
30039: LD_VAR 0 3
30043: PPUSH
30044: CALL 30244 0 2
30048: PUSH
30049: LD_VAR 0 11
30053: PUSH
30054: EMPTY
30055: EQUAL
30056: OR
30057: IFFALSE 30002
// if not control in _control then
30059: LD_VAR 0 4
30063: PUSH
30064: LD_VAR 0 12
30068: IN
30069: NOT
30070: IFFALSE 30096
// control := _control [ rand ( 1 , _control ) ] ;
30072: LD_ADDR_VAR 0 4
30076: PUSH
30077: LD_VAR 0 12
30081: PUSH
30082: LD_INT 1
30084: PPUSH
30085: LD_VAR 0 12
30089: PPUSH
30090: CALL_OW 12
30094: ARRAY
30095: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30096: LD_VAR 0 2
30100: PPUSH
30101: LD_VAR 0 5
30105: PPUSH
30106: CALL 30464 0 2
30110: NOT
30111: IFFALSE 30170
// repeat weapon := _weapon [ 1 ] ;
30113: LD_ADDR_VAR 0 5
30117: PUSH
30118: LD_VAR 0 10
30122: PUSH
30123: LD_INT 1
30125: ARRAY
30126: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30127: LD_ADDR_VAR 0 10
30131: PUSH
30132: LD_VAR 0 10
30136: PPUSH
30137: LD_INT 1
30139: PPUSH
30140: CALL_OW 3
30144: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30145: LD_VAR 0 2
30149: PPUSH
30150: LD_VAR 0 5
30154: PPUSH
30155: CALL 30464 0 2
30159: PUSH
30160: LD_VAR 0 10
30164: PUSH
30165: EMPTY
30166: EQUAL
30167: OR
30168: IFFALSE 30113
// result := [ ] ;
30170: LD_ADDR_VAR 0 6
30174: PUSH
30175: EMPTY
30176: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30177: LD_VAR 0 1
30181: PPUSH
30182: LD_VAR 0 2
30186: PPUSH
30187: LD_VAR 0 3
30191: PPUSH
30192: LD_VAR 0 4
30196: PPUSH
30197: LD_VAR 0 5
30201: PPUSH
30202: CALL_OW 448
30206: IFFALSE 30239
// result := [ chassis , engine , control , weapon ] ;
30208: LD_ADDR_VAR 0 6
30212: PUSH
30213: LD_VAR 0 2
30217: PUSH
30218: LD_VAR 0 3
30222: PUSH
30223: LD_VAR 0 4
30227: PUSH
30228: LD_VAR 0 5
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: ST_TO_ADDR
// end ;
30239: LD_VAR 0 6
30243: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30244: LD_INT 0
30246: PPUSH
// if not chassis or not engine then
30247: LD_VAR 0 1
30251: NOT
30252: PUSH
30253: LD_VAR 0 2
30257: NOT
30258: OR
30259: IFFALSE 30263
// exit ;
30261: GO 30459
// case engine of engine_solar :
30263: LD_VAR 0 2
30267: PUSH
30268: LD_INT 2
30270: DOUBLE
30271: EQUAL
30272: IFTRUE 30276
30274: GO 30314
30276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30277: LD_ADDR_VAR 0 3
30281: PUSH
30282: LD_INT 11
30284: PUSH
30285: LD_INT 12
30287: PUSH
30288: LD_INT 13
30290: PUSH
30291: LD_INT 14
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: LD_INT 2
30299: PUSH
30300: LD_INT 3
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
30312: GO 30443
30314: LD_INT 1
30316: DOUBLE
30317: EQUAL
30318: IFTRUE 30322
30320: GO 30384
30322: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30323: LD_ADDR_VAR 0 3
30327: PUSH
30328: LD_INT 11
30330: PUSH
30331: LD_INT 12
30333: PUSH
30334: LD_INT 13
30336: PUSH
30337: LD_INT 14
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 3
30348: PUSH
30349: LD_INT 4
30351: PUSH
30352: LD_INT 5
30354: PUSH
30355: LD_INT 21
30357: PUSH
30358: LD_INT 23
30360: PUSH
30361: LD_INT 22
30363: PUSH
30364: LD_INT 24
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: ST_TO_ADDR
30382: GO 30443
30384: LD_INT 3
30386: DOUBLE
30387: EQUAL
30388: IFTRUE 30392
30390: GO 30442
30392: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30393: LD_ADDR_VAR 0 3
30397: PUSH
30398: LD_INT 13
30400: PUSH
30401: LD_INT 14
30403: PUSH
30404: LD_INT 2
30406: PUSH
30407: LD_INT 3
30409: PUSH
30410: LD_INT 4
30412: PUSH
30413: LD_INT 5
30415: PUSH
30416: LD_INT 21
30418: PUSH
30419: LD_INT 22
30421: PUSH
30422: LD_INT 23
30424: PUSH
30425: LD_INT 24
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: ST_TO_ADDR
30440: GO 30443
30442: POP
// result := ( chassis in result ) ;
30443: LD_ADDR_VAR 0 3
30447: PUSH
30448: LD_VAR 0 1
30452: PUSH
30453: LD_VAR 0 3
30457: IN
30458: ST_TO_ADDR
// end ;
30459: LD_VAR 0 3
30463: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30464: LD_INT 0
30466: PPUSH
// if not chassis or not weapon then
30467: LD_VAR 0 1
30471: NOT
30472: PUSH
30473: LD_VAR 0 2
30477: NOT
30478: OR
30479: IFFALSE 30483
// exit ;
30481: GO 31543
// case weapon of us_machine_gun :
30483: LD_VAR 0 2
30487: PUSH
30488: LD_INT 2
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30526
30496: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30497: LD_ADDR_VAR 0 3
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: LD_INT 3
30510: PUSH
30511: LD_INT 4
30513: PUSH
30514: LD_INT 5
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: ST_TO_ADDR
30524: GO 31527
30526: LD_INT 3
30528: DOUBLE
30529: EQUAL
30530: IFTRUE 30534
30532: GO 30564
30534: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30535: LD_ADDR_VAR 0 3
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: LD_INT 4
30551: PUSH
30552: LD_INT 5
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: ST_TO_ADDR
30562: GO 31527
30564: LD_INT 11
30566: DOUBLE
30567: EQUAL
30568: IFTRUE 30572
30570: GO 30602
30572: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30573: LD_ADDR_VAR 0 3
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: LD_INT 2
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 4
30589: PUSH
30590: LD_INT 5
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: ST_TO_ADDR
30600: GO 31527
30602: LD_INT 4
30604: DOUBLE
30605: EQUAL
30606: IFTRUE 30610
30608: GO 30636
30610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30611: LD_ADDR_VAR 0 3
30615: PUSH
30616: LD_INT 2
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: LD_INT 4
30624: PUSH
30625: LD_INT 5
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: ST_TO_ADDR
30634: GO 31527
30636: LD_INT 5
30638: DOUBLE
30639: EQUAL
30640: IFTRUE 30644
30642: GO 30670
30644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30645: LD_ADDR_VAR 0 3
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: LD_INT 4
30658: PUSH
30659: LD_INT 5
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
30668: GO 31527
30670: LD_INT 9
30672: DOUBLE
30673: EQUAL
30674: IFTRUE 30678
30676: GO 30704
30678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30679: LD_ADDR_VAR 0 3
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: LD_INT 3
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: LD_INT 5
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: ST_TO_ADDR
30702: GO 31527
30704: LD_INT 7
30706: DOUBLE
30707: EQUAL
30708: IFTRUE 30712
30710: GO 30738
30712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30713: LD_ADDR_VAR 0 3
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: LD_INT 3
30723: PUSH
30724: LD_INT 4
30726: PUSH
30727: LD_INT 5
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: ST_TO_ADDR
30736: GO 31527
30738: LD_INT 12
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30772
30746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30747: LD_ADDR_VAR 0 3
30751: PUSH
30752: LD_INT 2
30754: PUSH
30755: LD_INT 3
30757: PUSH
30758: LD_INT 4
30760: PUSH
30761: LD_INT 5
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: ST_TO_ADDR
30770: GO 31527
30772: LD_INT 13
30774: DOUBLE
30775: EQUAL
30776: IFTRUE 30780
30778: GO 30806
30780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30781: LD_ADDR_VAR 0 3
30785: PUSH
30786: LD_INT 2
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: LD_INT 4
30794: PUSH
30795: LD_INT 5
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
30804: GO 31527
30806: LD_INT 14
30808: DOUBLE
30809: EQUAL
30810: IFTRUE 30814
30812: GO 30832
30814: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30815: LD_ADDR_VAR 0 3
30819: PUSH
30820: LD_INT 4
30822: PUSH
30823: LD_INT 5
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: ST_TO_ADDR
30830: GO 31527
30832: LD_INT 6
30834: DOUBLE
30835: EQUAL
30836: IFTRUE 30840
30838: GO 30858
30840: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30841: LD_ADDR_VAR 0 3
30845: PUSH
30846: LD_INT 4
30848: PUSH
30849: LD_INT 5
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: ST_TO_ADDR
30856: GO 31527
30858: LD_INT 10
30860: DOUBLE
30861: EQUAL
30862: IFTRUE 30866
30864: GO 30884
30866: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30867: LD_ADDR_VAR 0 3
30871: PUSH
30872: LD_INT 4
30874: PUSH
30875: LD_INT 5
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: ST_TO_ADDR
30882: GO 31527
30884: LD_INT 22
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30918
30892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30893: LD_ADDR_VAR 0 3
30897: PUSH
30898: LD_INT 11
30900: PUSH
30901: LD_INT 12
30903: PUSH
30904: LD_INT 13
30906: PUSH
30907: LD_INT 14
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: ST_TO_ADDR
30916: GO 31527
30918: LD_INT 23
30920: DOUBLE
30921: EQUAL
30922: IFTRUE 30926
30924: GO 30952
30926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30927: LD_ADDR_VAR 0 3
30931: PUSH
30932: LD_INT 11
30934: PUSH
30935: LD_INT 12
30937: PUSH
30938: LD_INT 13
30940: PUSH
30941: LD_INT 14
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
30950: GO 31527
30952: LD_INT 24
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30986
30960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 11
30968: PUSH
30969: LD_INT 12
30971: PUSH
30972: LD_INT 13
30974: PUSH
30975: LD_INT 14
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: ST_TO_ADDR
30984: GO 31527
30986: LD_INT 30
30988: DOUBLE
30989: EQUAL
30990: IFTRUE 30994
30992: GO 31020
30994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30995: LD_ADDR_VAR 0 3
30999: PUSH
31000: LD_INT 11
31002: PUSH
31003: LD_INT 12
31005: PUSH
31006: LD_INT 13
31008: PUSH
31009: LD_INT 14
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
31018: GO 31527
31020: LD_INT 25
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31046
31028: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31029: LD_ADDR_VAR 0 3
31033: PUSH
31034: LD_INT 13
31036: PUSH
31037: LD_INT 14
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: ST_TO_ADDR
31044: GO 31527
31046: LD_INT 27
31048: DOUBLE
31049: EQUAL
31050: IFTRUE 31054
31052: GO 31072
31054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31055: LD_ADDR_VAR 0 3
31059: PUSH
31060: LD_INT 13
31062: PUSH
31063: LD_INT 14
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: ST_TO_ADDR
31070: GO 31527
31072: LD_INT 92
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31106
31080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31081: LD_ADDR_VAR 0 3
31085: PUSH
31086: LD_INT 11
31088: PUSH
31089: LD_INT 12
31091: PUSH
31092: LD_INT 13
31094: PUSH
31095: LD_INT 14
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
31104: GO 31527
31106: LD_INT 28
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31132
31114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31115: LD_ADDR_VAR 0 3
31119: PUSH
31120: LD_INT 13
31122: PUSH
31123: LD_INT 14
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: ST_TO_ADDR
31130: GO 31527
31132: LD_INT 29
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31158
31140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31141: LD_ADDR_VAR 0 3
31145: PUSH
31146: LD_INT 13
31148: PUSH
31149: LD_INT 14
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: ST_TO_ADDR
31156: GO 31527
31158: LD_INT 31
31160: DOUBLE
31161: EQUAL
31162: IFTRUE 31166
31164: GO 31184
31166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31167: LD_ADDR_VAR 0 3
31171: PUSH
31172: LD_INT 13
31174: PUSH
31175: LD_INT 14
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: ST_TO_ADDR
31182: GO 31527
31184: LD_INT 26
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31210
31192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31193: LD_ADDR_VAR 0 3
31197: PUSH
31198: LD_INT 13
31200: PUSH
31201: LD_INT 14
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: ST_TO_ADDR
31208: GO 31527
31210: LD_INT 42
31212: DOUBLE
31213: EQUAL
31214: IFTRUE 31218
31216: GO 31244
31218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31219: LD_ADDR_VAR 0 3
31223: PUSH
31224: LD_INT 21
31226: PUSH
31227: LD_INT 22
31229: PUSH
31230: LD_INT 23
31232: PUSH
31233: LD_INT 24
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: ST_TO_ADDR
31242: GO 31527
31244: LD_INT 43
31246: DOUBLE
31247: EQUAL
31248: IFTRUE 31252
31250: GO 31278
31252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31253: LD_ADDR_VAR 0 3
31257: PUSH
31258: LD_INT 21
31260: PUSH
31261: LD_INT 22
31263: PUSH
31264: LD_INT 23
31266: PUSH
31267: LD_INT 24
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: ST_TO_ADDR
31276: GO 31527
31278: LD_INT 44
31280: DOUBLE
31281: EQUAL
31282: IFTRUE 31286
31284: GO 31312
31286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31287: LD_ADDR_VAR 0 3
31291: PUSH
31292: LD_INT 21
31294: PUSH
31295: LD_INT 22
31297: PUSH
31298: LD_INT 23
31300: PUSH
31301: LD_INT 24
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: ST_TO_ADDR
31310: GO 31527
31312: LD_INT 45
31314: DOUBLE
31315: EQUAL
31316: IFTRUE 31320
31318: GO 31346
31320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31321: LD_ADDR_VAR 0 3
31325: PUSH
31326: LD_INT 21
31328: PUSH
31329: LD_INT 22
31331: PUSH
31332: LD_INT 23
31334: PUSH
31335: LD_INT 24
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
31344: GO 31527
31346: LD_INT 49
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31380
31354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31355: LD_ADDR_VAR 0 3
31359: PUSH
31360: LD_INT 21
31362: PUSH
31363: LD_INT 22
31365: PUSH
31366: LD_INT 23
31368: PUSH
31369: LD_INT 24
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: ST_TO_ADDR
31378: GO 31527
31380: LD_INT 51
31382: DOUBLE
31383: EQUAL
31384: IFTRUE 31388
31386: GO 31414
31388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31389: LD_ADDR_VAR 0 3
31393: PUSH
31394: LD_INT 21
31396: PUSH
31397: LD_INT 22
31399: PUSH
31400: LD_INT 23
31402: PUSH
31403: LD_INT 24
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: ST_TO_ADDR
31412: GO 31527
31414: LD_INT 52
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31448
31422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31423: LD_ADDR_VAR 0 3
31427: PUSH
31428: LD_INT 21
31430: PUSH
31431: LD_INT 22
31433: PUSH
31434: LD_INT 23
31436: PUSH
31437: LD_INT 24
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: ST_TO_ADDR
31446: GO 31527
31448: LD_INT 53
31450: DOUBLE
31451: EQUAL
31452: IFTRUE 31456
31454: GO 31474
31456: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31457: LD_ADDR_VAR 0 3
31461: PUSH
31462: LD_INT 23
31464: PUSH
31465: LD_INT 24
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: ST_TO_ADDR
31472: GO 31527
31474: LD_INT 46
31476: DOUBLE
31477: EQUAL
31478: IFTRUE 31482
31480: GO 31500
31482: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31483: LD_ADDR_VAR 0 3
31487: PUSH
31488: LD_INT 23
31490: PUSH
31491: LD_INT 24
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: ST_TO_ADDR
31498: GO 31527
31500: LD_INT 47
31502: DOUBLE
31503: EQUAL
31504: IFTRUE 31508
31506: GO 31526
31508: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31509: LD_ADDR_VAR 0 3
31513: PUSH
31514: LD_INT 23
31516: PUSH
31517: LD_INT 24
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: ST_TO_ADDR
31524: GO 31527
31526: POP
// result := ( chassis in result ) ;
31527: LD_ADDR_VAR 0 3
31531: PUSH
31532: LD_VAR 0 1
31536: PUSH
31537: LD_VAR 0 3
31541: IN
31542: ST_TO_ADDR
// end ;
31543: LD_VAR 0 3
31547: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31548: LD_INT 0
31550: PPUSH
31551: PPUSH
31552: PPUSH
31553: PPUSH
31554: PPUSH
31555: PPUSH
31556: PPUSH
// result := array ;
31557: LD_ADDR_VAR 0 5
31561: PUSH
31562: LD_VAR 0 1
31566: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31567: LD_VAR 0 1
31571: NOT
31572: PUSH
31573: LD_VAR 0 2
31577: NOT
31578: OR
31579: PUSH
31580: LD_VAR 0 3
31584: NOT
31585: OR
31586: PUSH
31587: LD_VAR 0 2
31591: PUSH
31592: LD_VAR 0 1
31596: GREATER
31597: OR
31598: PUSH
31599: LD_VAR 0 3
31603: PUSH
31604: LD_VAR 0 1
31608: GREATER
31609: OR
31610: IFFALSE 31614
// exit ;
31612: GO 31910
// if direction then
31614: LD_VAR 0 4
31618: IFFALSE 31682
// begin d := 1 ;
31620: LD_ADDR_VAR 0 9
31624: PUSH
31625: LD_INT 1
31627: ST_TO_ADDR
// if i_from > i_to then
31628: LD_VAR 0 2
31632: PUSH
31633: LD_VAR 0 3
31637: GREATER
31638: IFFALSE 31664
// length := ( array - i_from ) + i_to else
31640: LD_ADDR_VAR 0 11
31644: PUSH
31645: LD_VAR 0 1
31649: PUSH
31650: LD_VAR 0 2
31654: MINUS
31655: PUSH
31656: LD_VAR 0 3
31660: PLUS
31661: ST_TO_ADDR
31662: GO 31680
// length := i_to - i_from ;
31664: LD_ADDR_VAR 0 11
31668: PUSH
31669: LD_VAR 0 3
31673: PUSH
31674: LD_VAR 0 2
31678: MINUS
31679: ST_TO_ADDR
// end else
31680: GO 31743
// begin d := - 1 ;
31682: LD_ADDR_VAR 0 9
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: ST_TO_ADDR
// if i_from > i_to then
31691: LD_VAR 0 2
31695: PUSH
31696: LD_VAR 0 3
31700: GREATER
31701: IFFALSE 31721
// length := i_from - i_to else
31703: LD_ADDR_VAR 0 11
31707: PUSH
31708: LD_VAR 0 2
31712: PUSH
31713: LD_VAR 0 3
31717: MINUS
31718: ST_TO_ADDR
31719: GO 31743
// length := ( array - i_to ) + i_from ;
31721: LD_ADDR_VAR 0 11
31725: PUSH
31726: LD_VAR 0 1
31730: PUSH
31731: LD_VAR 0 3
31735: MINUS
31736: PUSH
31737: LD_VAR 0 2
31741: PLUS
31742: ST_TO_ADDR
// end ; if not length then
31743: LD_VAR 0 11
31747: NOT
31748: IFFALSE 31752
// exit ;
31750: GO 31910
// tmp := array ;
31752: LD_ADDR_VAR 0 10
31756: PUSH
31757: LD_VAR 0 1
31761: ST_TO_ADDR
// for i = 1 to length do
31762: LD_ADDR_VAR 0 6
31766: PUSH
31767: DOUBLE
31768: LD_INT 1
31770: DEC
31771: ST_TO_ADDR
31772: LD_VAR 0 11
31776: PUSH
31777: FOR_TO
31778: IFFALSE 31898
// begin for j = 1 to array do
31780: LD_ADDR_VAR 0 7
31784: PUSH
31785: DOUBLE
31786: LD_INT 1
31788: DEC
31789: ST_TO_ADDR
31790: LD_VAR 0 1
31794: PUSH
31795: FOR_TO
31796: IFFALSE 31884
// begin k := j + d ;
31798: LD_ADDR_VAR 0 8
31802: PUSH
31803: LD_VAR 0 7
31807: PUSH
31808: LD_VAR 0 9
31812: PLUS
31813: ST_TO_ADDR
// if k > array then
31814: LD_VAR 0 8
31818: PUSH
31819: LD_VAR 0 1
31823: GREATER
31824: IFFALSE 31834
// k := 1 ;
31826: LD_ADDR_VAR 0 8
31830: PUSH
31831: LD_INT 1
31833: ST_TO_ADDR
// if not k then
31834: LD_VAR 0 8
31838: NOT
31839: IFFALSE 31851
// k := array ;
31841: LD_ADDR_VAR 0 8
31845: PUSH
31846: LD_VAR 0 1
31850: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31851: LD_ADDR_VAR 0 10
31855: PUSH
31856: LD_VAR 0 10
31860: PPUSH
31861: LD_VAR 0 8
31865: PPUSH
31866: LD_VAR 0 1
31870: PUSH
31871: LD_VAR 0 7
31875: ARRAY
31876: PPUSH
31877: CALL_OW 1
31881: ST_TO_ADDR
// end ;
31882: GO 31795
31884: POP
31885: POP
// array := tmp ;
31886: LD_ADDR_VAR 0 1
31890: PUSH
31891: LD_VAR 0 10
31895: ST_TO_ADDR
// end ;
31896: GO 31777
31898: POP
31899: POP
// result := array ;
31900: LD_ADDR_VAR 0 5
31904: PUSH
31905: LD_VAR 0 1
31909: ST_TO_ADDR
// end ;
31910: LD_VAR 0 5
31914: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31915: LD_INT 0
31917: PPUSH
31918: PPUSH
// result := 0 ;
31919: LD_ADDR_VAR 0 3
31923: PUSH
31924: LD_INT 0
31926: ST_TO_ADDR
// if not array or not value in array then
31927: LD_VAR 0 1
31931: NOT
31932: PUSH
31933: LD_VAR 0 2
31937: PUSH
31938: LD_VAR 0 1
31942: IN
31943: NOT
31944: OR
31945: IFFALSE 31949
// exit ;
31947: GO 32003
// for i = 1 to array do
31949: LD_ADDR_VAR 0 4
31953: PUSH
31954: DOUBLE
31955: LD_INT 1
31957: DEC
31958: ST_TO_ADDR
31959: LD_VAR 0 1
31963: PUSH
31964: FOR_TO
31965: IFFALSE 32001
// if value = array [ i ] then
31967: LD_VAR 0 2
31971: PUSH
31972: LD_VAR 0 1
31976: PUSH
31977: LD_VAR 0 4
31981: ARRAY
31982: EQUAL
31983: IFFALSE 31999
// begin result := i ;
31985: LD_ADDR_VAR 0 3
31989: PUSH
31990: LD_VAR 0 4
31994: ST_TO_ADDR
// exit ;
31995: POP
31996: POP
31997: GO 32003
// end ;
31999: GO 31964
32001: POP
32002: POP
// end ;
32003: LD_VAR 0 3
32007: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32008: LD_INT 0
32010: PPUSH
// vc_chassis := chassis ;
32011: LD_ADDR_OWVAR 37
32015: PUSH
32016: LD_VAR 0 1
32020: ST_TO_ADDR
// vc_engine := engine ;
32021: LD_ADDR_OWVAR 39
32025: PUSH
32026: LD_VAR 0 2
32030: ST_TO_ADDR
// vc_control := control ;
32031: LD_ADDR_OWVAR 38
32035: PUSH
32036: LD_VAR 0 3
32040: ST_TO_ADDR
// vc_weapon := weapon ;
32041: LD_ADDR_OWVAR 40
32045: PUSH
32046: LD_VAR 0 4
32050: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32051: LD_ADDR_OWVAR 41
32055: PUSH
32056: LD_VAR 0 5
32060: ST_TO_ADDR
// end ;
32061: LD_VAR 0 6
32065: RET
// export function WantPlant ( unit ) ; var task ; begin
32066: LD_INT 0
32068: PPUSH
32069: PPUSH
// result := false ;
32070: LD_ADDR_VAR 0 2
32074: PUSH
32075: LD_INT 0
32077: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: LD_VAR 0 1
32087: PPUSH
32088: CALL_OW 437
32092: ST_TO_ADDR
// if task then
32093: LD_VAR 0 3
32097: IFFALSE 32125
// if task [ 1 ] [ 1 ] = p then
32099: LD_VAR 0 3
32103: PUSH
32104: LD_INT 1
32106: ARRAY
32107: PUSH
32108: LD_INT 1
32110: ARRAY
32111: PUSH
32112: LD_STRING p
32114: EQUAL
32115: IFFALSE 32125
// result := true ;
32117: LD_ADDR_VAR 0 2
32121: PUSH
32122: LD_INT 1
32124: ST_TO_ADDR
// end ;
32125: LD_VAR 0 2
32129: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32130: LD_INT 0
32132: PPUSH
32133: PPUSH
32134: PPUSH
32135: PPUSH
// if pos < 1 then
32136: LD_VAR 0 2
32140: PUSH
32141: LD_INT 1
32143: LESS
32144: IFFALSE 32148
// exit ;
32146: GO 32451
// if pos = 1 then
32148: LD_VAR 0 2
32152: PUSH
32153: LD_INT 1
32155: EQUAL
32156: IFFALSE 32189
// result := Replace ( arr , pos [ 1 ] , value ) else
32158: LD_ADDR_VAR 0 4
32162: PUSH
32163: LD_VAR 0 1
32167: PPUSH
32168: LD_VAR 0 2
32172: PUSH
32173: LD_INT 1
32175: ARRAY
32176: PPUSH
32177: LD_VAR 0 3
32181: PPUSH
32182: CALL_OW 1
32186: ST_TO_ADDR
32187: GO 32451
// begin tmp := arr ;
32189: LD_ADDR_VAR 0 6
32193: PUSH
32194: LD_VAR 0 1
32198: ST_TO_ADDR
// s_arr := [ tmp ] ;
32199: LD_ADDR_VAR 0 7
32203: PUSH
32204: LD_VAR 0 6
32208: PUSH
32209: EMPTY
32210: LIST
32211: ST_TO_ADDR
// for i = 1 to pos - 1 do
32212: LD_ADDR_VAR 0 5
32216: PUSH
32217: DOUBLE
32218: LD_INT 1
32220: DEC
32221: ST_TO_ADDR
32222: LD_VAR 0 2
32226: PUSH
32227: LD_INT 1
32229: MINUS
32230: PUSH
32231: FOR_TO
32232: IFFALSE 32277
// begin tmp := tmp [ pos [ i ] ] ;
32234: LD_ADDR_VAR 0 6
32238: PUSH
32239: LD_VAR 0 6
32243: PUSH
32244: LD_VAR 0 2
32248: PUSH
32249: LD_VAR 0 5
32253: ARRAY
32254: ARRAY
32255: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32256: LD_ADDR_VAR 0 7
32260: PUSH
32261: LD_VAR 0 7
32265: PUSH
32266: LD_VAR 0 6
32270: PUSH
32271: EMPTY
32272: LIST
32273: ADD
32274: ST_TO_ADDR
// end ;
32275: GO 32231
32277: POP
32278: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32279: LD_ADDR_VAR 0 6
32283: PUSH
32284: LD_VAR 0 6
32288: PPUSH
32289: LD_VAR 0 2
32293: PUSH
32294: LD_VAR 0 2
32298: ARRAY
32299: PPUSH
32300: LD_VAR 0 3
32304: PPUSH
32305: CALL_OW 1
32309: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32310: LD_ADDR_VAR 0 7
32314: PUSH
32315: LD_VAR 0 7
32319: PPUSH
32320: LD_VAR 0 7
32324: PPUSH
32325: LD_VAR 0 6
32329: PPUSH
32330: CALL_OW 1
32334: ST_TO_ADDR
// for i = s_arr downto 2 do
32335: LD_ADDR_VAR 0 5
32339: PUSH
32340: DOUBLE
32341: LD_VAR 0 7
32345: INC
32346: ST_TO_ADDR
32347: LD_INT 2
32349: PUSH
32350: FOR_DOWNTO
32351: IFFALSE 32435
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32353: LD_ADDR_VAR 0 6
32357: PUSH
32358: LD_VAR 0 7
32362: PUSH
32363: LD_VAR 0 5
32367: PUSH
32368: LD_INT 1
32370: MINUS
32371: ARRAY
32372: PPUSH
32373: LD_VAR 0 2
32377: PUSH
32378: LD_VAR 0 5
32382: PUSH
32383: LD_INT 1
32385: MINUS
32386: ARRAY
32387: PPUSH
32388: LD_VAR 0 7
32392: PUSH
32393: LD_VAR 0 5
32397: ARRAY
32398: PPUSH
32399: CALL_OW 1
32403: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32404: LD_ADDR_VAR 0 7
32408: PUSH
32409: LD_VAR 0 7
32413: PPUSH
32414: LD_VAR 0 5
32418: PUSH
32419: LD_INT 1
32421: MINUS
32422: PPUSH
32423: LD_VAR 0 6
32427: PPUSH
32428: CALL_OW 1
32432: ST_TO_ADDR
// end ;
32433: GO 32350
32435: POP
32436: POP
// result := s_arr [ 1 ] ;
32437: LD_ADDR_VAR 0 4
32441: PUSH
32442: LD_VAR 0 7
32446: PUSH
32447: LD_INT 1
32449: ARRAY
32450: ST_TO_ADDR
// end ; end ;
32451: LD_VAR 0 4
32455: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32456: LD_INT 0
32458: PPUSH
32459: PPUSH
// if not list then
32460: LD_VAR 0 1
32464: NOT
32465: IFFALSE 32469
// exit ;
32467: GO 32560
// i := list [ pos1 ] ;
32469: LD_ADDR_VAR 0 5
32473: PUSH
32474: LD_VAR 0 1
32478: PUSH
32479: LD_VAR 0 2
32483: ARRAY
32484: ST_TO_ADDR
// if not i then
32485: LD_VAR 0 5
32489: NOT
32490: IFFALSE 32494
// exit ;
32492: GO 32560
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32494: LD_ADDR_VAR 0 1
32498: PUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: LD_VAR 0 2
32508: PPUSH
32509: LD_VAR 0 1
32513: PUSH
32514: LD_VAR 0 3
32518: ARRAY
32519: PPUSH
32520: CALL_OW 1
32524: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32525: LD_ADDR_VAR 0 1
32529: PUSH
32530: LD_VAR 0 1
32534: PPUSH
32535: LD_VAR 0 3
32539: PPUSH
32540: LD_VAR 0 5
32544: PPUSH
32545: CALL_OW 1
32549: ST_TO_ADDR
// result := list ;
32550: LD_ADDR_VAR 0 4
32554: PUSH
32555: LD_VAR 0 1
32559: ST_TO_ADDR
// end ;
32560: LD_VAR 0 4
32564: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32565: LD_INT 0
32567: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32568: LD_ADDR_VAR 0 5
32572: PUSH
32573: LD_VAR 0 1
32577: PPUSH
32578: CALL_OW 250
32582: PPUSH
32583: LD_VAR 0 1
32587: PPUSH
32588: CALL_OW 251
32592: PPUSH
32593: LD_VAR 0 2
32597: PPUSH
32598: LD_VAR 0 3
32602: PPUSH
32603: LD_VAR 0 4
32607: PPUSH
32608: CALL 32618 0 5
32612: ST_TO_ADDR
// end ;
32613: LD_VAR 0 5
32617: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32618: LD_INT 0
32620: PPUSH
32621: PPUSH
32622: PPUSH
32623: PPUSH
// if not list then
32624: LD_VAR 0 3
32628: NOT
32629: IFFALSE 32633
// exit ;
32631: GO 33021
// result := [ ] ;
32633: LD_ADDR_VAR 0 6
32637: PUSH
32638: EMPTY
32639: ST_TO_ADDR
// for i in list do
32640: LD_ADDR_VAR 0 7
32644: PUSH
32645: LD_VAR 0 3
32649: PUSH
32650: FOR_IN
32651: IFFALSE 32853
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32653: LD_ADDR_VAR 0 9
32657: PUSH
32658: LD_VAR 0 7
32662: PPUSH
32663: LD_VAR 0 1
32667: PPUSH
32668: LD_VAR 0 2
32672: PPUSH
32673: CALL_OW 297
32677: ST_TO_ADDR
// if not result then
32678: LD_VAR 0 6
32682: NOT
32683: IFFALSE 32709
// result := [ [ i , tmp ] ] else
32685: LD_ADDR_VAR 0 6
32689: PUSH
32690: LD_VAR 0 7
32694: PUSH
32695: LD_VAR 0 9
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: EMPTY
32705: LIST
32706: ST_TO_ADDR
32707: GO 32851
// begin if result [ result ] [ 2 ] < tmp then
32709: LD_VAR 0 6
32713: PUSH
32714: LD_VAR 0 6
32718: ARRAY
32719: PUSH
32720: LD_INT 2
32722: ARRAY
32723: PUSH
32724: LD_VAR 0 9
32728: LESS
32729: IFFALSE 32771
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32731: LD_ADDR_VAR 0 6
32735: PUSH
32736: LD_VAR 0 6
32740: PPUSH
32741: LD_VAR 0 6
32745: PUSH
32746: LD_INT 1
32748: PLUS
32749: PPUSH
32750: LD_VAR 0 7
32754: PUSH
32755: LD_VAR 0 9
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PPUSH
32764: CALL_OW 2
32768: ST_TO_ADDR
32769: GO 32851
// for j = 1 to result do
32771: LD_ADDR_VAR 0 8
32775: PUSH
32776: DOUBLE
32777: LD_INT 1
32779: DEC
32780: ST_TO_ADDR
32781: LD_VAR 0 6
32785: PUSH
32786: FOR_TO
32787: IFFALSE 32849
// begin if tmp < result [ j ] [ 2 ] then
32789: LD_VAR 0 9
32793: PUSH
32794: LD_VAR 0 6
32798: PUSH
32799: LD_VAR 0 8
32803: ARRAY
32804: PUSH
32805: LD_INT 2
32807: ARRAY
32808: LESS
32809: IFFALSE 32847
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32811: LD_ADDR_VAR 0 6
32815: PUSH
32816: LD_VAR 0 6
32820: PPUSH
32821: LD_VAR 0 8
32825: PPUSH
32826: LD_VAR 0 7
32830: PUSH
32831: LD_VAR 0 9
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PPUSH
32840: CALL_OW 2
32844: ST_TO_ADDR
// break ;
32845: GO 32849
// end ; end ;
32847: GO 32786
32849: POP
32850: POP
// end ; end ;
32851: GO 32650
32853: POP
32854: POP
// if result and not asc then
32855: LD_VAR 0 6
32859: PUSH
32860: LD_VAR 0 4
32864: NOT
32865: AND
32866: IFFALSE 32941
// begin tmp := result ;
32868: LD_ADDR_VAR 0 9
32872: PUSH
32873: LD_VAR 0 6
32877: ST_TO_ADDR
// for i = tmp downto 1 do
32878: LD_ADDR_VAR 0 7
32882: PUSH
32883: DOUBLE
32884: LD_VAR 0 9
32888: INC
32889: ST_TO_ADDR
32890: LD_INT 1
32892: PUSH
32893: FOR_DOWNTO
32894: IFFALSE 32939
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32896: LD_ADDR_VAR 0 6
32900: PUSH
32901: LD_VAR 0 6
32905: PPUSH
32906: LD_VAR 0 9
32910: PUSH
32911: LD_VAR 0 7
32915: MINUS
32916: PUSH
32917: LD_INT 1
32919: PLUS
32920: PPUSH
32921: LD_VAR 0 9
32925: PUSH
32926: LD_VAR 0 7
32930: ARRAY
32931: PPUSH
32932: CALL_OW 1
32936: ST_TO_ADDR
32937: GO 32893
32939: POP
32940: POP
// end ; tmp := [ ] ;
32941: LD_ADDR_VAR 0 9
32945: PUSH
32946: EMPTY
32947: ST_TO_ADDR
// if mode then
32948: LD_VAR 0 5
32952: IFFALSE 33021
// begin for i = 1 to result do
32954: LD_ADDR_VAR 0 7
32958: PUSH
32959: DOUBLE
32960: LD_INT 1
32962: DEC
32963: ST_TO_ADDR
32964: LD_VAR 0 6
32968: PUSH
32969: FOR_TO
32970: IFFALSE 33009
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32972: LD_ADDR_VAR 0 9
32976: PUSH
32977: LD_VAR 0 9
32981: PPUSH
32982: LD_VAR 0 7
32986: PPUSH
32987: LD_VAR 0 6
32991: PUSH
32992: LD_VAR 0 7
32996: ARRAY
32997: PUSH
32998: LD_INT 1
33000: ARRAY
33001: PPUSH
33002: CALL_OW 1
33006: ST_TO_ADDR
33007: GO 32969
33009: POP
33010: POP
// result := tmp ;
33011: LD_ADDR_VAR 0 6
33015: PUSH
33016: LD_VAR 0 9
33020: ST_TO_ADDR
// end ; end ;
33021: LD_VAR 0 6
33025: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33026: LD_INT 0
33028: PPUSH
33029: PPUSH
33030: PPUSH
33031: PPUSH
33032: PPUSH
33033: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33034: LD_ADDR_VAR 0 5
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: EMPTY
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: ST_TO_ADDR
// if not x or not y then
33056: LD_VAR 0 2
33060: NOT
33061: PUSH
33062: LD_VAR 0 3
33066: NOT
33067: OR
33068: IFFALSE 33072
// exit ;
33070: GO 34722
// if not range then
33072: LD_VAR 0 4
33076: NOT
33077: IFFALSE 33087
// range := 10 ;
33079: LD_ADDR_VAR 0 4
33083: PUSH
33084: LD_INT 10
33086: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33087: LD_ADDR_VAR 0 8
33091: PUSH
33092: LD_INT 81
33094: PUSH
33095: LD_VAR 0 1
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 92
33106: PUSH
33107: LD_VAR 0 2
33111: PUSH
33112: LD_VAR 0 3
33116: PUSH
33117: LD_VAR 0 4
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 3
33130: PUSH
33131: LD_INT 21
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: LIST
33149: PPUSH
33150: CALL_OW 69
33154: ST_TO_ADDR
// if not tmp then
33155: LD_VAR 0 8
33159: NOT
33160: IFFALSE 33164
// exit ;
33162: GO 34722
// for i in tmp do
33164: LD_ADDR_VAR 0 6
33168: PUSH
33169: LD_VAR 0 8
33173: PUSH
33174: FOR_IN
33175: IFFALSE 34697
// begin points := [ 0 , 0 , 0 ] ;
33177: LD_ADDR_VAR 0 9
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
// bpoints := 1 ;
33196: LD_ADDR_VAR 0 10
33200: PUSH
33201: LD_INT 1
33203: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33204: LD_VAR 0 6
33208: PPUSH
33209: CALL_OW 247
33213: PUSH
33214: LD_INT 1
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33800
33222: POP
// begin if GetClass ( i ) = 1 then
33223: LD_VAR 0 6
33227: PPUSH
33228: CALL_OW 257
33232: PUSH
33233: LD_INT 1
33235: EQUAL
33236: IFFALSE 33257
// points := [ 10 , 5 , 3 ] ;
33238: LD_ADDR_VAR 0 9
33242: PUSH
33243: LD_INT 10
33245: PUSH
33246: LD_INT 5
33248: PUSH
33249: LD_INT 3
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33257: LD_VAR 0 6
33261: PPUSH
33262: CALL_OW 257
33266: PUSH
33267: LD_INT 2
33269: PUSH
33270: LD_INT 3
33272: PUSH
33273: LD_INT 4
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: IN
33281: IFFALSE 33302
// points := [ 3 , 2 , 1 ] ;
33283: LD_ADDR_VAR 0 9
33287: PUSH
33288: LD_INT 3
33290: PUSH
33291: LD_INT 2
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33302: LD_VAR 0 6
33306: PPUSH
33307: CALL_OW 257
33311: PUSH
33312: LD_INT 5
33314: EQUAL
33315: IFFALSE 33336
// points := [ 130 , 5 , 2 ] ;
33317: LD_ADDR_VAR 0 9
33321: PUSH
33322: LD_INT 130
33324: PUSH
33325: LD_INT 5
33327: PUSH
33328: LD_INT 2
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33336: LD_VAR 0 6
33340: PPUSH
33341: CALL_OW 257
33345: PUSH
33346: LD_INT 8
33348: EQUAL
33349: IFFALSE 33370
// points := [ 35 , 35 , 30 ] ;
33351: LD_ADDR_VAR 0 9
33355: PUSH
33356: LD_INT 35
33358: PUSH
33359: LD_INT 35
33361: PUSH
33362: LD_INT 30
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33370: LD_VAR 0 6
33374: PPUSH
33375: CALL_OW 257
33379: PUSH
33380: LD_INT 9
33382: EQUAL
33383: IFFALSE 33404
// points := [ 20 , 55 , 40 ] ;
33385: LD_ADDR_VAR 0 9
33389: PUSH
33390: LD_INT 20
33392: PUSH
33393: LD_INT 55
33395: PUSH
33396: LD_INT 40
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: LIST
33403: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33404: LD_VAR 0 6
33408: PPUSH
33409: CALL_OW 257
33413: PUSH
33414: LD_INT 12
33416: PUSH
33417: LD_INT 16
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: IN
33424: IFFALSE 33445
// points := [ 5 , 3 , 2 ] ;
33426: LD_ADDR_VAR 0 9
33430: PUSH
33431: LD_INT 5
33433: PUSH
33434: LD_INT 3
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33445: LD_VAR 0 6
33449: PPUSH
33450: CALL_OW 257
33454: PUSH
33455: LD_INT 17
33457: EQUAL
33458: IFFALSE 33479
// points := [ 100 , 50 , 75 ] ;
33460: LD_ADDR_VAR 0 9
33464: PUSH
33465: LD_INT 100
33467: PUSH
33468: LD_INT 50
33470: PUSH
33471: LD_INT 75
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33479: LD_VAR 0 6
33483: PPUSH
33484: CALL_OW 257
33488: PUSH
33489: LD_INT 15
33491: EQUAL
33492: IFFALSE 33513
// points := [ 10 , 5 , 3 ] ;
33494: LD_ADDR_VAR 0 9
33498: PUSH
33499: LD_INT 10
33501: PUSH
33502: LD_INT 5
33504: PUSH
33505: LD_INT 3
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33513: LD_VAR 0 6
33517: PPUSH
33518: CALL_OW 257
33522: PUSH
33523: LD_INT 14
33525: EQUAL
33526: IFFALSE 33547
// points := [ 10 , 0 , 0 ] ;
33528: LD_ADDR_VAR 0 9
33532: PUSH
33533: LD_INT 10
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: LIST
33546: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33547: LD_VAR 0 6
33551: PPUSH
33552: CALL_OW 257
33556: PUSH
33557: LD_INT 11
33559: EQUAL
33560: IFFALSE 33581
// points := [ 30 , 10 , 5 ] ;
33562: LD_ADDR_VAR 0 9
33566: PUSH
33567: LD_INT 30
33569: PUSH
33570: LD_INT 10
33572: PUSH
33573: LD_INT 5
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: LIST
33580: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33581: LD_VAR 0 1
33585: PPUSH
33586: LD_INT 5
33588: PPUSH
33589: CALL_OW 321
33593: PUSH
33594: LD_INT 2
33596: EQUAL
33597: IFFALSE 33614
// bpoints := bpoints * 1.8 ;
33599: LD_ADDR_VAR 0 10
33603: PUSH
33604: LD_VAR 0 10
33608: PUSH
33609: LD_REAL  1.80000000000000E+0000
33612: MUL
33613: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33614: LD_VAR 0 6
33618: PPUSH
33619: CALL_OW 257
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 3
33632: PUSH
33633: LD_INT 4
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: IN
33642: PUSH
33643: LD_VAR 0 1
33647: PPUSH
33648: LD_INT 51
33650: PPUSH
33651: CALL_OW 321
33655: PUSH
33656: LD_INT 2
33658: EQUAL
33659: AND
33660: IFFALSE 33677
// bpoints := bpoints * 1.2 ;
33662: LD_ADDR_VAR 0 10
33666: PUSH
33667: LD_VAR 0 10
33671: PUSH
33672: LD_REAL  1.20000000000000E+0000
33675: MUL
33676: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33677: LD_VAR 0 6
33681: PPUSH
33682: CALL_OW 257
33686: PUSH
33687: LD_INT 5
33689: PUSH
33690: LD_INT 7
33692: PUSH
33693: LD_INT 9
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: IN
33701: PUSH
33702: LD_VAR 0 1
33706: PPUSH
33707: LD_INT 52
33709: PPUSH
33710: CALL_OW 321
33714: PUSH
33715: LD_INT 2
33717: EQUAL
33718: AND
33719: IFFALSE 33736
// bpoints := bpoints * 1.5 ;
33721: LD_ADDR_VAR 0 10
33725: PUSH
33726: LD_VAR 0 10
33730: PUSH
33731: LD_REAL  1.50000000000000E+0000
33734: MUL
33735: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33736: LD_VAR 0 1
33740: PPUSH
33741: LD_INT 66
33743: PPUSH
33744: CALL_OW 321
33748: PUSH
33749: LD_INT 2
33751: EQUAL
33752: IFFALSE 33769
// bpoints := bpoints * 1.1 ;
33754: LD_ADDR_VAR 0 10
33758: PUSH
33759: LD_VAR 0 10
33763: PUSH
33764: LD_REAL  1.10000000000000E+0000
33767: MUL
33768: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33769: LD_ADDR_VAR 0 10
33773: PUSH
33774: LD_VAR 0 10
33778: PUSH
33779: LD_VAR 0 6
33783: PPUSH
33784: LD_INT 1
33786: PPUSH
33787: CALL_OW 259
33791: PUSH
33792: LD_REAL  1.15000000000000E+0000
33795: MUL
33796: MUL
33797: ST_TO_ADDR
// end ; unit_vehicle :
33798: GO 34626
33800: LD_INT 2
33802: DOUBLE
33803: EQUAL
33804: IFTRUE 33808
33806: GO 34614
33808: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33809: LD_VAR 0 6
33813: PPUSH
33814: CALL_OW 264
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 42
33824: PUSH
33825: LD_INT 24
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: LIST
33832: IN
33833: IFFALSE 33854
// points := [ 25 , 5 , 3 ] ;
33835: LD_ADDR_VAR 0 9
33839: PUSH
33840: LD_INT 25
33842: PUSH
33843: LD_INT 5
33845: PUSH
33846: LD_INT 3
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33854: LD_VAR 0 6
33858: PPUSH
33859: CALL_OW 264
33863: PUSH
33864: LD_INT 4
33866: PUSH
33867: LD_INT 43
33869: PUSH
33870: LD_INT 25
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: IN
33878: IFFALSE 33899
// points := [ 40 , 15 , 5 ] ;
33880: LD_ADDR_VAR 0 9
33884: PUSH
33885: LD_INT 40
33887: PUSH
33888: LD_INT 15
33890: PUSH
33891: LD_INT 5
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: LIST
33898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33899: LD_VAR 0 6
33903: PPUSH
33904: CALL_OW 264
33908: PUSH
33909: LD_INT 3
33911: PUSH
33912: LD_INT 23
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: IN
33919: IFFALSE 33940
// points := [ 7 , 25 , 8 ] ;
33921: LD_ADDR_VAR 0 9
33925: PUSH
33926: LD_INT 7
33928: PUSH
33929: LD_INT 25
33931: PUSH
33932: LD_INT 8
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: LIST
33939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33940: LD_VAR 0 6
33944: PPUSH
33945: CALL_OW 264
33949: PUSH
33950: LD_INT 5
33952: PUSH
33953: LD_INT 27
33955: PUSH
33956: LD_INT 44
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: IN
33964: IFFALSE 33985
// points := [ 14 , 50 , 16 ] ;
33966: LD_ADDR_VAR 0 9
33970: PUSH
33971: LD_INT 14
33973: PUSH
33974: LD_INT 50
33976: PUSH
33977: LD_INT 16
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33985: LD_VAR 0 6
33989: PPUSH
33990: CALL_OW 264
33994: PUSH
33995: LD_INT 6
33997: PUSH
33998: LD_INT 46
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: IN
34005: IFFALSE 34026
// points := [ 32 , 120 , 70 ] ;
34007: LD_ADDR_VAR 0 9
34011: PUSH
34012: LD_INT 32
34014: PUSH
34015: LD_INT 120
34017: PUSH
34018: LD_INT 70
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: LIST
34025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34026: LD_VAR 0 6
34030: PPUSH
34031: CALL_OW 264
34035: PUSH
34036: LD_INT 7
34038: PUSH
34039: LD_INT 28
34041: PUSH
34042: LD_INT 45
34044: PUSH
34045: LD_INT 92
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: IN
34054: IFFALSE 34075
// points := [ 35 , 20 , 45 ] ;
34056: LD_ADDR_VAR 0 9
34060: PUSH
34061: LD_INT 35
34063: PUSH
34064: LD_INT 20
34066: PUSH
34067: LD_INT 45
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34075: LD_VAR 0 6
34079: PPUSH
34080: CALL_OW 264
34084: PUSH
34085: LD_INT 47
34087: PUSH
34088: EMPTY
34089: LIST
34090: IN
34091: IFFALSE 34112
// points := [ 67 , 45 , 75 ] ;
34093: LD_ADDR_VAR 0 9
34097: PUSH
34098: LD_INT 67
34100: PUSH
34101: LD_INT 45
34103: PUSH
34104: LD_INT 75
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: LIST
34111: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34112: LD_VAR 0 6
34116: PPUSH
34117: CALL_OW 264
34121: PUSH
34122: LD_INT 26
34124: PUSH
34125: EMPTY
34126: LIST
34127: IN
34128: IFFALSE 34149
// points := [ 120 , 30 , 80 ] ;
34130: LD_ADDR_VAR 0 9
34134: PUSH
34135: LD_INT 120
34137: PUSH
34138: LD_INT 30
34140: PUSH
34141: LD_INT 80
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: LIST
34148: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34149: LD_VAR 0 6
34153: PPUSH
34154: CALL_OW 264
34158: PUSH
34159: LD_INT 22
34161: PUSH
34162: EMPTY
34163: LIST
34164: IN
34165: IFFALSE 34186
// points := [ 40 , 1 , 1 ] ;
34167: LD_ADDR_VAR 0 9
34171: PUSH
34172: LD_INT 40
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34186: LD_VAR 0 6
34190: PPUSH
34191: CALL_OW 264
34195: PUSH
34196: LD_INT 29
34198: PUSH
34199: EMPTY
34200: LIST
34201: IN
34202: IFFALSE 34223
// points := [ 70 , 200 , 400 ] ;
34204: LD_ADDR_VAR 0 9
34208: PUSH
34209: LD_INT 70
34211: PUSH
34212: LD_INT 200
34214: PUSH
34215: LD_INT 400
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34223: LD_VAR 0 6
34227: PPUSH
34228: CALL_OW 264
34232: PUSH
34233: LD_INT 14
34235: PUSH
34236: LD_INT 53
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: IN
34243: IFFALSE 34264
// points := [ 40 , 10 , 20 ] ;
34245: LD_ADDR_VAR 0 9
34249: PUSH
34250: LD_INT 40
34252: PUSH
34253: LD_INT 10
34255: PUSH
34256: LD_INT 20
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: LIST
34263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34264: LD_VAR 0 6
34268: PPUSH
34269: CALL_OW 264
34273: PUSH
34274: LD_INT 9
34276: PUSH
34277: EMPTY
34278: LIST
34279: IN
34280: IFFALSE 34301
// points := [ 5 , 70 , 20 ] ;
34282: LD_ADDR_VAR 0 9
34286: PUSH
34287: LD_INT 5
34289: PUSH
34290: LD_INT 70
34292: PUSH
34293: LD_INT 20
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34301: LD_VAR 0 6
34305: PPUSH
34306: CALL_OW 264
34310: PUSH
34311: LD_INT 10
34313: PUSH
34314: EMPTY
34315: LIST
34316: IN
34317: IFFALSE 34338
// points := [ 35 , 110 , 70 ] ;
34319: LD_ADDR_VAR 0 9
34323: PUSH
34324: LD_INT 35
34326: PUSH
34327: LD_INT 110
34329: PUSH
34330: LD_INT 70
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34338: LD_VAR 0 6
34342: PPUSH
34343: CALL_OW 265
34347: PUSH
34348: LD_INT 25
34350: EQUAL
34351: IFFALSE 34372
// points := [ 80 , 65 , 100 ] ;
34353: LD_ADDR_VAR 0 9
34357: PUSH
34358: LD_INT 80
34360: PUSH
34361: LD_INT 65
34363: PUSH
34364: LD_INT 100
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34372: LD_VAR 0 6
34376: PPUSH
34377: CALL_OW 263
34381: PUSH
34382: LD_INT 1
34384: EQUAL
34385: IFFALSE 34420
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34387: LD_ADDR_VAR 0 10
34391: PUSH
34392: LD_VAR 0 10
34396: PUSH
34397: LD_VAR 0 6
34401: PPUSH
34402: CALL_OW 311
34406: PPUSH
34407: LD_INT 3
34409: PPUSH
34410: CALL_OW 259
34414: PUSH
34415: LD_INT 4
34417: MUL
34418: MUL
34419: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34420: LD_VAR 0 6
34424: PPUSH
34425: CALL_OW 263
34429: PUSH
34430: LD_INT 2
34432: EQUAL
34433: IFFALSE 34484
// begin j := IsControledBy ( i ) ;
34435: LD_ADDR_VAR 0 7
34439: PUSH
34440: LD_VAR 0 6
34444: PPUSH
34445: CALL_OW 312
34449: ST_TO_ADDR
// if j then
34450: LD_VAR 0 7
34454: IFFALSE 34484
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34456: LD_ADDR_VAR 0 10
34460: PUSH
34461: LD_VAR 0 10
34465: PUSH
34466: LD_VAR 0 7
34470: PPUSH
34471: LD_INT 3
34473: PPUSH
34474: CALL_OW 259
34478: PUSH
34479: LD_INT 3
34481: MUL
34482: MUL
34483: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34484: LD_VAR 0 6
34488: PPUSH
34489: CALL_OW 264
34493: PUSH
34494: LD_INT 5
34496: PUSH
34497: LD_INT 6
34499: PUSH
34500: LD_INT 46
34502: PUSH
34503: LD_INT 44
34505: PUSH
34506: LD_INT 47
34508: PUSH
34509: LD_INT 45
34511: PUSH
34512: LD_INT 28
34514: PUSH
34515: LD_INT 7
34517: PUSH
34518: LD_INT 27
34520: PUSH
34521: LD_INT 29
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: IN
34536: PUSH
34537: LD_VAR 0 1
34541: PPUSH
34542: LD_INT 52
34544: PPUSH
34545: CALL_OW 321
34549: PUSH
34550: LD_INT 2
34552: EQUAL
34553: AND
34554: IFFALSE 34571
// bpoints := bpoints * 1.2 ;
34556: LD_ADDR_VAR 0 10
34560: PUSH
34561: LD_VAR 0 10
34565: PUSH
34566: LD_REAL  1.20000000000000E+0000
34569: MUL
34570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34571: LD_VAR 0 6
34575: PPUSH
34576: CALL_OW 264
34580: PUSH
34581: LD_INT 6
34583: PUSH
34584: LD_INT 46
34586: PUSH
34587: LD_INT 47
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: IN
34595: IFFALSE 34612
// bpoints := bpoints * 1.2 ;
34597: LD_ADDR_VAR 0 10
34601: PUSH
34602: LD_VAR 0 10
34606: PUSH
34607: LD_REAL  1.20000000000000E+0000
34610: MUL
34611: ST_TO_ADDR
// end ; unit_building :
34612: GO 34626
34614: LD_INT 3
34616: DOUBLE
34617: EQUAL
34618: IFTRUE 34622
34620: GO 34625
34622: POP
// ; end ;
34623: GO 34626
34625: POP
// for j = 1 to 3 do
34626: LD_ADDR_VAR 0 7
34630: PUSH
34631: DOUBLE
34632: LD_INT 1
34634: DEC
34635: ST_TO_ADDR
34636: LD_INT 3
34638: PUSH
34639: FOR_TO
34640: IFFALSE 34693
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34642: LD_ADDR_VAR 0 5
34646: PUSH
34647: LD_VAR 0 5
34651: PPUSH
34652: LD_VAR 0 7
34656: PPUSH
34657: LD_VAR 0 5
34661: PUSH
34662: LD_VAR 0 7
34666: ARRAY
34667: PUSH
34668: LD_VAR 0 9
34672: PUSH
34673: LD_VAR 0 7
34677: ARRAY
34678: PUSH
34679: LD_VAR 0 10
34683: MUL
34684: PLUS
34685: PPUSH
34686: CALL_OW 1
34690: ST_TO_ADDR
34691: GO 34639
34693: POP
34694: POP
// end ;
34695: GO 33174
34697: POP
34698: POP
// result := Replace ( result , 4 , tmp ) ;
34699: LD_ADDR_VAR 0 5
34703: PUSH
34704: LD_VAR 0 5
34708: PPUSH
34709: LD_INT 4
34711: PPUSH
34712: LD_VAR 0 8
34716: PPUSH
34717: CALL_OW 1
34721: ST_TO_ADDR
// end ;
34722: LD_VAR 0 5
34726: RET
// export function DangerAtRange ( unit , range ) ; begin
34727: LD_INT 0
34729: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34730: LD_ADDR_VAR 0 3
34734: PUSH
34735: LD_VAR 0 1
34739: PPUSH
34740: CALL_OW 255
34744: PPUSH
34745: LD_VAR 0 1
34749: PPUSH
34750: CALL_OW 250
34754: PPUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 251
34764: PPUSH
34765: LD_VAR 0 2
34769: PPUSH
34770: CALL 33026 0 4
34774: ST_TO_ADDR
// end ;
34775: LD_VAR 0 3
34779: RET
// export function DangerInArea ( side , area ) ; begin
34780: LD_INT 0
34782: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34783: LD_ADDR_VAR 0 3
34787: PUSH
34788: LD_VAR 0 2
34792: PPUSH
34793: LD_INT 81
34795: PUSH
34796: LD_VAR 0 1
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PPUSH
34805: CALL_OW 70
34809: ST_TO_ADDR
// end ;
34810: LD_VAR 0 3
34814: RET
// export function IsExtension ( b ) ; begin
34815: LD_INT 0
34817: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34818: LD_ADDR_VAR 0 2
34822: PUSH
34823: LD_VAR 0 1
34827: PUSH
34828: LD_INT 23
34830: PUSH
34831: LD_INT 20
34833: PUSH
34834: LD_INT 22
34836: PUSH
34837: LD_INT 17
34839: PUSH
34840: LD_INT 24
34842: PUSH
34843: LD_INT 21
34845: PUSH
34846: LD_INT 19
34848: PUSH
34849: LD_INT 16
34851: PUSH
34852: LD_INT 25
34854: PUSH
34855: LD_INT 18
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: IN
34870: ST_TO_ADDR
// end ;
34871: LD_VAR 0 2
34875: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34876: LD_INT 0
34878: PPUSH
34879: PPUSH
34880: PPUSH
// result := [ ] ;
34881: LD_ADDR_VAR 0 4
34885: PUSH
34886: EMPTY
34887: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34888: LD_ADDR_VAR 0 5
34892: PUSH
34893: LD_VAR 0 2
34897: PPUSH
34898: LD_INT 21
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PPUSH
34908: CALL_OW 70
34912: ST_TO_ADDR
// if not tmp then
34913: LD_VAR 0 5
34917: NOT
34918: IFFALSE 34922
// exit ;
34920: GO 34986
// if checkLink then
34922: LD_VAR 0 3
34926: IFFALSE 34976
// begin for i in tmp do
34928: LD_ADDR_VAR 0 6
34932: PUSH
34933: LD_VAR 0 5
34937: PUSH
34938: FOR_IN
34939: IFFALSE 34974
// if GetBase ( i ) <> base then
34941: LD_VAR 0 6
34945: PPUSH
34946: CALL_OW 274
34950: PUSH
34951: LD_VAR 0 1
34955: NONEQUAL
34956: IFFALSE 34972
// ComLinkToBase ( base , i ) ;
34958: LD_VAR 0 1
34962: PPUSH
34963: LD_VAR 0 6
34967: PPUSH
34968: CALL_OW 169
34972: GO 34938
34974: POP
34975: POP
// end ; result := tmp ;
34976: LD_ADDR_VAR 0 4
34980: PUSH
34981: LD_VAR 0 5
34985: ST_TO_ADDR
// end ;
34986: LD_VAR 0 4
34990: RET
// export function ComComplete ( units , b ) ; var i ; begin
34991: LD_INT 0
34993: PPUSH
34994: PPUSH
// if not units then
34995: LD_VAR 0 1
34999: NOT
35000: IFFALSE 35004
// exit ;
35002: GO 35094
// for i in units do
35004: LD_ADDR_VAR 0 4
35008: PUSH
35009: LD_VAR 0 1
35013: PUSH
35014: FOR_IN
35015: IFFALSE 35092
// if BuildingStatus ( b ) = bs_build then
35017: LD_VAR 0 2
35021: PPUSH
35022: CALL_OW 461
35026: PUSH
35027: LD_INT 1
35029: EQUAL
35030: IFFALSE 35090
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35032: LD_VAR 0 4
35036: PPUSH
35037: LD_STRING h
35039: PUSH
35040: LD_VAR 0 2
35044: PPUSH
35045: CALL_OW 250
35049: PUSH
35050: LD_VAR 0 2
35054: PPUSH
35055: CALL_OW 251
35059: PUSH
35060: LD_VAR 0 2
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: PUSH
35083: EMPTY
35084: LIST
35085: PPUSH
35086: CALL_OW 446
35090: GO 35014
35092: POP
35093: POP
// end ;
35094: LD_VAR 0 3
35098: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35099: LD_INT 0
35101: PPUSH
35102: PPUSH
35103: PPUSH
35104: PPUSH
35105: PPUSH
35106: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35107: LD_VAR 0 1
35111: NOT
35112: PUSH
35113: LD_VAR 0 1
35117: PPUSH
35118: CALL_OW 263
35122: PUSH
35123: LD_INT 2
35125: NONEQUAL
35126: OR
35127: IFFALSE 35131
// exit ;
35129: GO 35447
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35131: LD_ADDR_VAR 0 6
35135: PUSH
35136: LD_INT 22
35138: PUSH
35139: LD_VAR 0 1
35143: PPUSH
35144: CALL_OW 255
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: LD_INT 30
35158: PUSH
35159: LD_INT 36
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 34
35168: PUSH
35169: LD_INT 31
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PPUSH
35185: CALL_OW 69
35189: ST_TO_ADDR
// if not tmp then
35190: LD_VAR 0 6
35194: NOT
35195: IFFALSE 35199
// exit ;
35197: GO 35447
// result := [ ] ;
35199: LD_ADDR_VAR 0 2
35203: PUSH
35204: EMPTY
35205: ST_TO_ADDR
// for i in tmp do
35206: LD_ADDR_VAR 0 3
35210: PUSH
35211: LD_VAR 0 6
35215: PUSH
35216: FOR_IN
35217: IFFALSE 35288
// begin t := UnitsInside ( i ) ;
35219: LD_ADDR_VAR 0 4
35223: PUSH
35224: LD_VAR 0 3
35228: PPUSH
35229: CALL_OW 313
35233: ST_TO_ADDR
// if t then
35234: LD_VAR 0 4
35238: IFFALSE 35286
// for j in t do
35240: LD_ADDR_VAR 0 7
35244: PUSH
35245: LD_VAR 0 4
35249: PUSH
35250: FOR_IN
35251: IFFALSE 35284
// result := Replace ( result , result + 1 , j ) ;
35253: LD_ADDR_VAR 0 2
35257: PUSH
35258: LD_VAR 0 2
35262: PPUSH
35263: LD_VAR 0 2
35267: PUSH
35268: LD_INT 1
35270: PLUS
35271: PPUSH
35272: LD_VAR 0 7
35276: PPUSH
35277: CALL_OW 1
35281: ST_TO_ADDR
35282: GO 35250
35284: POP
35285: POP
// end ;
35286: GO 35216
35288: POP
35289: POP
// if not result then
35290: LD_VAR 0 2
35294: NOT
35295: IFFALSE 35299
// exit ;
35297: GO 35447
// mech := result [ 1 ] ;
35299: LD_ADDR_VAR 0 5
35303: PUSH
35304: LD_VAR 0 2
35308: PUSH
35309: LD_INT 1
35311: ARRAY
35312: ST_TO_ADDR
// if result > 1 then
35313: LD_VAR 0 2
35317: PUSH
35318: LD_INT 1
35320: GREATER
35321: IFFALSE 35433
// begin for i = 2 to result do
35323: LD_ADDR_VAR 0 3
35327: PUSH
35328: DOUBLE
35329: LD_INT 2
35331: DEC
35332: ST_TO_ADDR
35333: LD_VAR 0 2
35337: PUSH
35338: FOR_TO
35339: IFFALSE 35431
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35341: LD_ADDR_VAR 0 4
35345: PUSH
35346: LD_VAR 0 2
35350: PUSH
35351: LD_VAR 0 3
35355: ARRAY
35356: PPUSH
35357: LD_INT 3
35359: PPUSH
35360: CALL_OW 259
35364: PUSH
35365: LD_VAR 0 2
35369: PUSH
35370: LD_VAR 0 3
35374: ARRAY
35375: PPUSH
35376: CALL_OW 432
35380: MINUS
35381: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35382: LD_VAR 0 4
35386: PUSH
35387: LD_VAR 0 5
35391: PPUSH
35392: LD_INT 3
35394: PPUSH
35395: CALL_OW 259
35399: PUSH
35400: LD_VAR 0 5
35404: PPUSH
35405: CALL_OW 432
35409: MINUS
35410: GREATEREQUAL
35411: IFFALSE 35429
// mech := result [ i ] ;
35413: LD_ADDR_VAR 0 5
35417: PUSH
35418: LD_VAR 0 2
35422: PUSH
35423: LD_VAR 0 3
35427: ARRAY
35428: ST_TO_ADDR
// end ;
35429: GO 35338
35431: POP
35432: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35433: LD_VAR 0 1
35437: PPUSH
35438: LD_VAR 0 5
35442: PPUSH
35443: CALL_OW 135
// end ;
35447: LD_VAR 0 2
35451: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35452: LD_INT 0
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
35462: PPUSH
35463: PPUSH
35464: PPUSH
35465: PPUSH
35466: PPUSH
// result := [ ] ;
35467: LD_ADDR_VAR 0 7
35471: PUSH
35472: EMPTY
35473: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35474: LD_VAR 0 1
35478: PPUSH
35479: CALL_OW 266
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: IN
35494: NOT
35495: IFFALSE 35499
// exit ;
35497: GO 37133
// if name then
35499: LD_VAR 0 3
35503: IFFALSE 35519
// SetBName ( base_dep , name ) ;
35505: LD_VAR 0 1
35509: PPUSH
35510: LD_VAR 0 3
35514: PPUSH
35515: CALL_OW 500
// base := GetBase ( base_dep ) ;
35519: LD_ADDR_VAR 0 15
35523: PUSH
35524: LD_VAR 0 1
35528: PPUSH
35529: CALL_OW 274
35533: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35534: LD_ADDR_VAR 0 16
35538: PUSH
35539: LD_VAR 0 1
35543: PPUSH
35544: CALL_OW 255
35548: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35549: LD_ADDR_VAR 0 17
35553: PUSH
35554: LD_VAR 0 1
35558: PPUSH
35559: CALL_OW 248
35563: ST_TO_ADDR
// if sources then
35564: LD_VAR 0 5
35568: IFFALSE 35615
// for i = 1 to 3 do
35570: LD_ADDR_VAR 0 8
35574: PUSH
35575: DOUBLE
35576: LD_INT 1
35578: DEC
35579: ST_TO_ADDR
35580: LD_INT 3
35582: PUSH
35583: FOR_TO
35584: IFFALSE 35613
// AddResourceType ( base , i , sources [ i ] ) ;
35586: LD_VAR 0 15
35590: PPUSH
35591: LD_VAR 0 8
35595: PPUSH
35596: LD_VAR 0 5
35600: PUSH
35601: LD_VAR 0 8
35605: ARRAY
35606: PPUSH
35607: CALL_OW 276
35611: GO 35583
35613: POP
35614: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35615: LD_ADDR_VAR 0 18
35619: PUSH
35620: LD_VAR 0 15
35624: PPUSH
35625: LD_VAR 0 2
35629: PPUSH
35630: LD_INT 1
35632: PPUSH
35633: CALL 34876 0 3
35637: ST_TO_ADDR
// InitHc ;
35638: CALL_OW 19
// InitUc ;
35642: CALL_OW 18
// uc_side := side ;
35646: LD_ADDR_OWVAR 20
35650: PUSH
35651: LD_VAR 0 16
35655: ST_TO_ADDR
// uc_nation := nation ;
35656: LD_ADDR_OWVAR 21
35660: PUSH
35661: LD_VAR 0 17
35665: ST_TO_ADDR
// if buildings then
35666: LD_VAR 0 18
35670: IFFALSE 36992
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35672: LD_ADDR_VAR 0 19
35676: PUSH
35677: LD_VAR 0 18
35681: PPUSH
35682: LD_INT 2
35684: PUSH
35685: LD_INT 30
35687: PUSH
35688: LD_INT 29
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 30
35697: PUSH
35698: LD_INT 30
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: PPUSH
35710: CALL_OW 72
35714: ST_TO_ADDR
// if tmp then
35715: LD_VAR 0 19
35719: IFFALSE 35767
// for i in tmp do
35721: LD_ADDR_VAR 0 8
35725: PUSH
35726: LD_VAR 0 19
35730: PUSH
35731: FOR_IN
35732: IFFALSE 35765
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35734: LD_VAR 0 8
35738: PPUSH
35739: CALL_OW 250
35743: PPUSH
35744: LD_VAR 0 8
35748: PPUSH
35749: CALL_OW 251
35753: PPUSH
35754: LD_VAR 0 16
35758: PPUSH
35759: CALL_OW 441
35763: GO 35731
35765: POP
35766: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35767: LD_VAR 0 18
35771: PPUSH
35772: LD_INT 2
35774: PUSH
35775: LD_INT 30
35777: PUSH
35778: LD_INT 32
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 30
35787: PUSH
35788: LD_INT 33
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: PPUSH
35800: CALL_OW 72
35804: IFFALSE 35892
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35806: LD_ADDR_VAR 0 8
35810: PUSH
35811: LD_VAR 0 18
35815: PPUSH
35816: LD_INT 2
35818: PUSH
35819: LD_INT 30
35821: PUSH
35822: LD_INT 32
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 30
35831: PUSH
35832: LD_INT 33
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: PPUSH
35844: CALL_OW 72
35848: PUSH
35849: FOR_IN
35850: IFFALSE 35890
// begin if not GetBWeapon ( i ) then
35852: LD_VAR 0 8
35856: PPUSH
35857: CALL_OW 269
35861: NOT
35862: IFFALSE 35888
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35864: LD_VAR 0 8
35868: PPUSH
35869: LD_VAR 0 8
35873: PPUSH
35874: LD_VAR 0 2
35878: PPUSH
35879: CALL 37138 0 2
35883: PPUSH
35884: CALL_OW 431
// end ;
35888: GO 35849
35890: POP
35891: POP
// end ; for i = 1 to personel do
35892: LD_ADDR_VAR 0 8
35896: PUSH
35897: DOUBLE
35898: LD_INT 1
35900: DEC
35901: ST_TO_ADDR
35902: LD_VAR 0 6
35906: PUSH
35907: FOR_TO
35908: IFFALSE 36972
// begin if i > 4 then
35910: LD_VAR 0 8
35914: PUSH
35915: LD_INT 4
35917: GREATER
35918: IFFALSE 35922
// break ;
35920: GO 36972
// case i of 1 :
35922: LD_VAR 0 8
35926: PUSH
35927: LD_INT 1
35929: DOUBLE
35930: EQUAL
35931: IFTRUE 35935
35933: GO 36015
35935: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35936: LD_ADDR_VAR 0 12
35940: PUSH
35941: LD_VAR 0 18
35945: PPUSH
35946: LD_INT 22
35948: PUSH
35949: LD_VAR 0 16
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 58
35960: PUSH
35961: EMPTY
35962: LIST
35963: PUSH
35964: LD_INT 2
35966: PUSH
35967: LD_INT 30
35969: PUSH
35970: LD_INT 32
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 30
35979: PUSH
35980: LD_INT 4
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 30
35989: PUSH
35990: LD_INT 5
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: PPUSH
36008: CALL_OW 72
36012: ST_TO_ADDR
36013: GO 36237
36015: LD_INT 2
36017: DOUBLE
36018: EQUAL
36019: IFTRUE 36023
36021: GO 36085
36023: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36024: LD_ADDR_VAR 0 12
36028: PUSH
36029: LD_VAR 0 18
36033: PPUSH
36034: LD_INT 22
36036: PUSH
36037: LD_VAR 0 16
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 2
36048: PUSH
36049: LD_INT 30
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 30
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: LIST
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PPUSH
36078: CALL_OW 72
36082: ST_TO_ADDR
36083: GO 36237
36085: LD_INT 3
36087: DOUBLE
36088: EQUAL
36089: IFTRUE 36093
36091: GO 36155
36093: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36094: LD_ADDR_VAR 0 12
36098: PUSH
36099: LD_VAR 0 18
36103: PPUSH
36104: LD_INT 22
36106: PUSH
36107: LD_VAR 0 16
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 2
36118: PUSH
36119: LD_INT 30
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 30
36131: PUSH
36132: LD_INT 3
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PPUSH
36148: CALL_OW 72
36152: ST_TO_ADDR
36153: GO 36237
36155: LD_INT 4
36157: DOUBLE
36158: EQUAL
36159: IFTRUE 36163
36161: GO 36236
36163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36164: LD_ADDR_VAR 0 12
36168: PUSH
36169: LD_VAR 0 18
36173: PPUSH
36174: LD_INT 22
36176: PUSH
36177: LD_VAR 0 16
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 30
36191: PUSH
36192: LD_INT 6
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 30
36201: PUSH
36202: LD_INT 7
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 30
36211: PUSH
36212: LD_INT 8
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PPUSH
36229: CALL_OW 72
36233: ST_TO_ADDR
36234: GO 36237
36236: POP
// if i = 1 then
36237: LD_VAR 0 8
36241: PUSH
36242: LD_INT 1
36244: EQUAL
36245: IFFALSE 36356
// begin tmp := [ ] ;
36247: LD_ADDR_VAR 0 19
36251: PUSH
36252: EMPTY
36253: ST_TO_ADDR
// for j in f do
36254: LD_ADDR_VAR 0 9
36258: PUSH
36259: LD_VAR 0 12
36263: PUSH
36264: FOR_IN
36265: IFFALSE 36338
// if GetBType ( j ) = b_bunker then
36267: LD_VAR 0 9
36271: PPUSH
36272: CALL_OW 266
36276: PUSH
36277: LD_INT 32
36279: EQUAL
36280: IFFALSE 36307
// tmp := Insert ( tmp , 1 , j ) else
36282: LD_ADDR_VAR 0 19
36286: PUSH
36287: LD_VAR 0 19
36291: PPUSH
36292: LD_INT 1
36294: PPUSH
36295: LD_VAR 0 9
36299: PPUSH
36300: CALL_OW 2
36304: ST_TO_ADDR
36305: GO 36336
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36307: LD_ADDR_VAR 0 19
36311: PUSH
36312: LD_VAR 0 19
36316: PPUSH
36317: LD_VAR 0 19
36321: PUSH
36322: LD_INT 1
36324: PLUS
36325: PPUSH
36326: LD_VAR 0 9
36330: PPUSH
36331: CALL_OW 2
36335: ST_TO_ADDR
36336: GO 36264
36338: POP
36339: POP
// if tmp then
36340: LD_VAR 0 19
36344: IFFALSE 36356
// f := tmp ;
36346: LD_ADDR_VAR 0 12
36350: PUSH
36351: LD_VAR 0 19
36355: ST_TO_ADDR
// end ; x := personel [ i ] ;
36356: LD_ADDR_VAR 0 13
36360: PUSH
36361: LD_VAR 0 6
36365: PUSH
36366: LD_VAR 0 8
36370: ARRAY
36371: ST_TO_ADDR
// if x = - 1 then
36372: LD_VAR 0 13
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: EQUAL
36381: IFFALSE 36590
// begin for j in f do
36383: LD_ADDR_VAR 0 9
36387: PUSH
36388: LD_VAR 0 12
36392: PUSH
36393: FOR_IN
36394: IFFALSE 36586
// repeat InitHc ;
36396: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36400: LD_VAR 0 9
36404: PPUSH
36405: CALL_OW 266
36409: PUSH
36410: LD_INT 5
36412: EQUAL
36413: IFFALSE 36483
// begin if UnitsInside ( j ) < 3 then
36415: LD_VAR 0 9
36419: PPUSH
36420: CALL_OW 313
36424: PUSH
36425: LD_INT 3
36427: LESS
36428: IFFALSE 36464
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36430: LD_INT 0
36432: PPUSH
36433: LD_INT 5
36435: PUSH
36436: LD_INT 8
36438: PUSH
36439: LD_INT 9
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: PUSH
36447: LD_VAR 0 17
36451: ARRAY
36452: PPUSH
36453: LD_VAR 0 4
36457: PPUSH
36458: CALL_OW 380
36462: GO 36481
// PrepareHuman ( false , i , skill ) ;
36464: LD_INT 0
36466: PPUSH
36467: LD_VAR 0 8
36471: PPUSH
36472: LD_VAR 0 4
36476: PPUSH
36477: CALL_OW 380
// end else
36481: GO 36500
// PrepareHuman ( false , i , skill ) ;
36483: LD_INT 0
36485: PPUSH
36486: LD_VAR 0 8
36490: PPUSH
36491: LD_VAR 0 4
36495: PPUSH
36496: CALL_OW 380
// un := CreateHuman ;
36500: LD_ADDR_VAR 0 14
36504: PUSH
36505: CALL_OW 44
36509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36510: LD_ADDR_VAR 0 7
36514: PUSH
36515: LD_VAR 0 7
36519: PPUSH
36520: LD_INT 1
36522: PPUSH
36523: LD_VAR 0 14
36527: PPUSH
36528: CALL_OW 2
36532: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36533: LD_VAR 0 14
36537: PPUSH
36538: LD_VAR 0 9
36542: PPUSH
36543: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36547: LD_VAR 0 9
36551: PPUSH
36552: CALL_OW 313
36556: PUSH
36557: LD_INT 6
36559: EQUAL
36560: PUSH
36561: LD_VAR 0 9
36565: PPUSH
36566: CALL_OW 266
36570: PUSH
36571: LD_INT 32
36573: PUSH
36574: LD_INT 31
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: IN
36581: OR
36582: IFFALSE 36396
36584: GO 36393
36586: POP
36587: POP
// end else
36588: GO 36970
// for j = 1 to x do
36590: LD_ADDR_VAR 0 9
36594: PUSH
36595: DOUBLE
36596: LD_INT 1
36598: DEC
36599: ST_TO_ADDR
36600: LD_VAR 0 13
36604: PUSH
36605: FOR_TO
36606: IFFALSE 36968
// begin InitHc ;
36608: CALL_OW 19
// if not f then
36612: LD_VAR 0 12
36616: NOT
36617: IFFALSE 36706
// begin PrepareHuman ( false , i , skill ) ;
36619: LD_INT 0
36621: PPUSH
36622: LD_VAR 0 8
36626: PPUSH
36627: LD_VAR 0 4
36631: PPUSH
36632: CALL_OW 380
// un := CreateHuman ;
36636: LD_ADDR_VAR 0 14
36640: PUSH
36641: CALL_OW 44
36645: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36646: LD_ADDR_VAR 0 7
36650: PUSH
36651: LD_VAR 0 7
36655: PPUSH
36656: LD_INT 1
36658: PPUSH
36659: LD_VAR 0 14
36663: PPUSH
36664: CALL_OW 2
36668: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36669: LD_VAR 0 14
36673: PPUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL_OW 250
36683: PPUSH
36684: LD_VAR 0 1
36688: PPUSH
36689: CALL_OW 251
36693: PPUSH
36694: LD_INT 10
36696: PPUSH
36697: LD_INT 0
36699: PPUSH
36700: CALL_OW 50
// continue ;
36704: GO 36605
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36706: LD_VAR 0 12
36710: PUSH
36711: LD_INT 1
36713: ARRAY
36714: PPUSH
36715: CALL_OW 313
36719: PUSH
36720: LD_VAR 0 12
36724: PUSH
36725: LD_INT 1
36727: ARRAY
36728: PPUSH
36729: CALL_OW 266
36733: PUSH
36734: LD_INT 32
36736: PUSH
36737: LD_INT 31
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: IN
36744: AND
36745: PUSH
36746: LD_VAR 0 12
36750: PUSH
36751: LD_INT 1
36753: ARRAY
36754: PPUSH
36755: CALL_OW 313
36759: PUSH
36760: LD_INT 6
36762: EQUAL
36763: OR
36764: IFFALSE 36784
// f := Delete ( f , 1 ) ;
36766: LD_ADDR_VAR 0 12
36770: PUSH
36771: LD_VAR 0 12
36775: PPUSH
36776: LD_INT 1
36778: PPUSH
36779: CALL_OW 3
36783: ST_TO_ADDR
// if not f then
36784: LD_VAR 0 12
36788: NOT
36789: IFFALSE 36807
// begin x := x + 2 ;
36791: LD_ADDR_VAR 0 13
36795: PUSH
36796: LD_VAR 0 13
36800: PUSH
36801: LD_INT 2
36803: PLUS
36804: ST_TO_ADDR
// continue ;
36805: GO 36605
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36807: LD_VAR 0 12
36811: PUSH
36812: LD_INT 1
36814: ARRAY
36815: PPUSH
36816: CALL_OW 266
36820: PUSH
36821: LD_INT 5
36823: EQUAL
36824: IFFALSE 36898
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36826: LD_VAR 0 12
36830: PUSH
36831: LD_INT 1
36833: ARRAY
36834: PPUSH
36835: CALL_OW 313
36839: PUSH
36840: LD_INT 3
36842: LESS
36843: IFFALSE 36879
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36845: LD_INT 0
36847: PPUSH
36848: LD_INT 5
36850: PUSH
36851: LD_INT 8
36853: PUSH
36854: LD_INT 9
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: PUSH
36862: LD_VAR 0 17
36866: ARRAY
36867: PPUSH
36868: LD_VAR 0 4
36872: PPUSH
36873: CALL_OW 380
36877: GO 36896
// PrepareHuman ( false , i , skill ) ;
36879: LD_INT 0
36881: PPUSH
36882: LD_VAR 0 8
36886: PPUSH
36887: LD_VAR 0 4
36891: PPUSH
36892: CALL_OW 380
// end else
36896: GO 36915
// PrepareHuman ( false , i , skill ) ;
36898: LD_INT 0
36900: PPUSH
36901: LD_VAR 0 8
36905: PPUSH
36906: LD_VAR 0 4
36910: PPUSH
36911: CALL_OW 380
// un := CreateHuman ;
36915: LD_ADDR_VAR 0 14
36919: PUSH
36920: CALL_OW 44
36924: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36925: LD_ADDR_VAR 0 7
36929: PUSH
36930: LD_VAR 0 7
36934: PPUSH
36935: LD_INT 1
36937: PPUSH
36938: LD_VAR 0 14
36942: PPUSH
36943: CALL_OW 2
36947: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36948: LD_VAR 0 14
36952: PPUSH
36953: LD_VAR 0 12
36957: PUSH
36958: LD_INT 1
36960: ARRAY
36961: PPUSH
36962: CALL_OW 52
// end ;
36966: GO 36605
36968: POP
36969: POP
// end ;
36970: GO 35907
36972: POP
36973: POP
// result := result ^ buildings ;
36974: LD_ADDR_VAR 0 7
36978: PUSH
36979: LD_VAR 0 7
36983: PUSH
36984: LD_VAR 0 18
36988: ADD
36989: ST_TO_ADDR
// end else
36990: GO 37133
// begin for i = 1 to personel do
36992: LD_ADDR_VAR 0 8
36996: PUSH
36997: DOUBLE
36998: LD_INT 1
37000: DEC
37001: ST_TO_ADDR
37002: LD_VAR 0 6
37006: PUSH
37007: FOR_TO
37008: IFFALSE 37131
// begin if i > 4 then
37010: LD_VAR 0 8
37014: PUSH
37015: LD_INT 4
37017: GREATER
37018: IFFALSE 37022
// break ;
37020: GO 37131
// x := personel [ i ] ;
37022: LD_ADDR_VAR 0 13
37026: PUSH
37027: LD_VAR 0 6
37031: PUSH
37032: LD_VAR 0 8
37036: ARRAY
37037: ST_TO_ADDR
// if x = - 1 then
37038: LD_VAR 0 13
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: EQUAL
37047: IFFALSE 37051
// continue ;
37049: GO 37007
// PrepareHuman ( false , i , skill ) ;
37051: LD_INT 0
37053: PPUSH
37054: LD_VAR 0 8
37058: PPUSH
37059: LD_VAR 0 4
37063: PPUSH
37064: CALL_OW 380
// un := CreateHuman ;
37068: LD_ADDR_VAR 0 14
37072: PUSH
37073: CALL_OW 44
37077: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37078: LD_VAR 0 14
37082: PPUSH
37083: LD_VAR 0 1
37087: PPUSH
37088: CALL_OW 250
37092: PPUSH
37093: LD_VAR 0 1
37097: PPUSH
37098: CALL_OW 251
37102: PPUSH
37103: LD_INT 10
37105: PPUSH
37106: LD_INT 0
37108: PPUSH
37109: CALL_OW 50
// result := result ^ un ;
37113: LD_ADDR_VAR 0 7
37117: PUSH
37118: LD_VAR 0 7
37122: PUSH
37123: LD_VAR 0 14
37127: ADD
37128: ST_TO_ADDR
// end ;
37129: GO 37007
37131: POP
37132: POP
// end ; end ;
37133: LD_VAR 0 7
37137: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37138: LD_INT 0
37140: PPUSH
37141: PPUSH
37142: PPUSH
37143: PPUSH
37144: PPUSH
37145: PPUSH
37146: PPUSH
37147: PPUSH
37148: PPUSH
37149: PPUSH
37150: PPUSH
37151: PPUSH
37152: PPUSH
37153: PPUSH
37154: PPUSH
37155: PPUSH
// result := false ;
37156: LD_ADDR_VAR 0 3
37160: PUSH
37161: LD_INT 0
37163: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37164: LD_VAR 0 1
37168: NOT
37169: PUSH
37170: LD_VAR 0 1
37174: PPUSH
37175: CALL_OW 266
37179: PUSH
37180: LD_INT 32
37182: PUSH
37183: LD_INT 33
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: IN
37190: NOT
37191: OR
37192: IFFALSE 37196
// exit ;
37194: GO 38305
// nat := GetNation ( tower ) ;
37196: LD_ADDR_VAR 0 12
37200: PUSH
37201: LD_VAR 0 1
37205: PPUSH
37206: CALL_OW 248
37210: ST_TO_ADDR
// side := GetSide ( tower ) ;
37211: LD_ADDR_VAR 0 16
37215: PUSH
37216: LD_VAR 0 1
37220: PPUSH
37221: CALL_OW 255
37225: ST_TO_ADDR
// x := GetX ( tower ) ;
37226: LD_ADDR_VAR 0 10
37230: PUSH
37231: LD_VAR 0 1
37235: PPUSH
37236: CALL_OW 250
37240: ST_TO_ADDR
// y := GetY ( tower ) ;
37241: LD_ADDR_VAR 0 11
37245: PUSH
37246: LD_VAR 0 1
37250: PPUSH
37251: CALL_OW 251
37255: ST_TO_ADDR
// if not x or not y then
37256: LD_VAR 0 10
37260: NOT
37261: PUSH
37262: LD_VAR 0 11
37266: NOT
37267: OR
37268: IFFALSE 37272
// exit ;
37270: GO 38305
// weapon := 0 ;
37272: LD_ADDR_VAR 0 18
37276: PUSH
37277: LD_INT 0
37279: ST_TO_ADDR
// fac_list := [ ] ;
37280: LD_ADDR_VAR 0 17
37284: PUSH
37285: EMPTY
37286: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37287: LD_ADDR_VAR 0 6
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 274
37301: PPUSH
37302: LD_VAR 0 2
37306: PPUSH
37307: LD_INT 0
37309: PPUSH
37310: CALL 34876 0 3
37314: PPUSH
37315: LD_INT 30
37317: PUSH
37318: LD_INT 3
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PPUSH
37325: CALL_OW 72
37329: ST_TO_ADDR
// if not factories then
37330: LD_VAR 0 6
37334: NOT
37335: IFFALSE 37339
// exit ;
37337: GO 38305
// for i in factories do
37339: LD_ADDR_VAR 0 8
37343: PUSH
37344: LD_VAR 0 6
37348: PUSH
37349: FOR_IN
37350: IFFALSE 37375
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37352: LD_ADDR_VAR 0 17
37356: PUSH
37357: LD_VAR 0 17
37361: PUSH
37362: LD_VAR 0 8
37366: PPUSH
37367: CALL_OW 478
37371: UNION
37372: ST_TO_ADDR
37373: GO 37349
37375: POP
37376: POP
// if not fac_list then
37377: LD_VAR 0 17
37381: NOT
37382: IFFALSE 37386
// exit ;
37384: GO 38305
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37386: LD_ADDR_VAR 0 5
37390: PUSH
37391: LD_INT 4
37393: PUSH
37394: LD_INT 5
37396: PUSH
37397: LD_INT 9
37399: PUSH
37400: LD_INT 10
37402: PUSH
37403: LD_INT 6
37405: PUSH
37406: LD_INT 7
37408: PUSH
37409: LD_INT 11
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 27
37423: PUSH
37424: LD_INT 28
37426: PUSH
37427: LD_INT 26
37429: PUSH
37430: LD_INT 30
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 43
37441: PUSH
37442: LD_INT 44
37444: PUSH
37445: LD_INT 46
37447: PUSH
37448: LD_INT 45
37450: PUSH
37451: LD_INT 47
37453: PUSH
37454: LD_INT 49
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: PUSH
37470: LD_VAR 0 12
37474: ARRAY
37475: ST_TO_ADDR
// list := list isect fac_list ;
37476: LD_ADDR_VAR 0 5
37480: PUSH
37481: LD_VAR 0 5
37485: PUSH
37486: LD_VAR 0 17
37490: ISECT
37491: ST_TO_ADDR
// if not list then
37492: LD_VAR 0 5
37496: NOT
37497: IFFALSE 37501
// exit ;
37499: GO 38305
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37501: LD_VAR 0 12
37505: PUSH
37506: LD_INT 3
37508: EQUAL
37509: PUSH
37510: LD_INT 49
37512: PUSH
37513: LD_VAR 0 5
37517: IN
37518: AND
37519: PUSH
37520: LD_INT 31
37522: PPUSH
37523: LD_VAR 0 16
37527: PPUSH
37528: CALL_OW 321
37532: PUSH
37533: LD_INT 2
37535: EQUAL
37536: AND
37537: IFFALSE 37597
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37539: LD_INT 22
37541: PUSH
37542: LD_VAR 0 16
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 35
37553: PUSH
37554: LD_INT 49
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 91
37563: PUSH
37564: LD_VAR 0 1
37568: PUSH
37569: LD_INT 10
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: PPUSH
37582: CALL_OW 69
37586: NOT
37587: IFFALSE 37597
// weapon := ru_time_lapser ;
37589: LD_ADDR_VAR 0 18
37593: PUSH
37594: LD_INT 49
37596: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37597: LD_VAR 0 12
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: IN
37612: PUSH
37613: LD_INT 11
37615: PUSH
37616: LD_VAR 0 5
37620: IN
37621: PUSH
37622: LD_INT 30
37624: PUSH
37625: LD_VAR 0 5
37629: IN
37630: OR
37631: AND
37632: PUSH
37633: LD_INT 6
37635: PPUSH
37636: LD_VAR 0 16
37640: PPUSH
37641: CALL_OW 321
37645: PUSH
37646: LD_INT 2
37648: EQUAL
37649: AND
37650: IFFALSE 37815
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37652: LD_INT 22
37654: PUSH
37655: LD_VAR 0 16
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 35
37669: PUSH
37670: LD_INT 11
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 35
37679: PUSH
37680: LD_INT 30
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 91
37694: PUSH
37695: LD_VAR 0 1
37699: PUSH
37700: LD_INT 18
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: PPUSH
37713: CALL_OW 69
37717: NOT
37718: PUSH
37719: LD_INT 22
37721: PUSH
37722: LD_VAR 0 16
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: LD_INT 30
37736: PUSH
37737: LD_INT 32
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 30
37746: PUSH
37747: LD_INT 33
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 91
37761: PUSH
37762: LD_VAR 0 1
37766: PUSH
37767: LD_INT 12
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: LIST
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: PUSH
37780: EMPTY
37781: LIST
37782: PPUSH
37783: CALL_OW 69
37787: PUSH
37788: LD_INT 2
37790: GREATER
37791: AND
37792: IFFALSE 37815
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37794: LD_ADDR_VAR 0 18
37798: PUSH
37799: LD_INT 11
37801: PUSH
37802: LD_INT 30
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_VAR 0 12
37813: ARRAY
37814: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37815: LD_VAR 0 18
37819: NOT
37820: PUSH
37821: LD_INT 40
37823: PPUSH
37824: LD_VAR 0 16
37828: PPUSH
37829: CALL_OW 321
37833: PUSH
37834: LD_INT 2
37836: EQUAL
37837: AND
37838: PUSH
37839: LD_INT 7
37841: PUSH
37842: LD_VAR 0 5
37846: IN
37847: PUSH
37848: LD_INT 28
37850: PUSH
37851: LD_VAR 0 5
37855: IN
37856: OR
37857: PUSH
37858: LD_INT 45
37860: PUSH
37861: LD_VAR 0 5
37865: IN
37866: OR
37867: AND
37868: IFFALSE 38122
// begin hex := GetHexInfo ( x , y ) ;
37870: LD_ADDR_VAR 0 4
37874: PUSH
37875: LD_VAR 0 10
37879: PPUSH
37880: LD_VAR 0 11
37884: PPUSH
37885: CALL_OW 546
37889: ST_TO_ADDR
// if hex [ 1 ] then
37890: LD_VAR 0 4
37894: PUSH
37895: LD_INT 1
37897: ARRAY
37898: IFFALSE 37902
// exit ;
37900: GO 38305
// height := hex [ 2 ] ;
37902: LD_ADDR_VAR 0 15
37906: PUSH
37907: LD_VAR 0 4
37911: PUSH
37912: LD_INT 2
37914: ARRAY
37915: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37916: LD_ADDR_VAR 0 14
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: LD_INT 3
37929: PUSH
37930: LD_INT 5
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
// for i in tmp do
37939: LD_ADDR_VAR 0 8
37943: PUSH
37944: LD_VAR 0 14
37948: PUSH
37949: FOR_IN
37950: IFFALSE 38120
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37952: LD_ADDR_VAR 0 9
37956: PUSH
37957: LD_VAR 0 10
37961: PPUSH
37962: LD_VAR 0 8
37966: PPUSH
37967: LD_INT 5
37969: PPUSH
37970: CALL_OW 272
37974: PUSH
37975: LD_VAR 0 11
37979: PPUSH
37980: LD_VAR 0 8
37984: PPUSH
37985: LD_INT 5
37987: PPUSH
37988: CALL_OW 273
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37997: LD_VAR 0 9
38001: PUSH
38002: LD_INT 1
38004: ARRAY
38005: PPUSH
38006: LD_VAR 0 9
38010: PUSH
38011: LD_INT 2
38013: ARRAY
38014: PPUSH
38015: CALL_OW 488
38019: IFFALSE 38118
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38021: LD_ADDR_VAR 0 4
38025: PUSH
38026: LD_VAR 0 9
38030: PUSH
38031: LD_INT 1
38033: ARRAY
38034: PPUSH
38035: LD_VAR 0 9
38039: PUSH
38040: LD_INT 2
38042: ARRAY
38043: PPUSH
38044: CALL_OW 546
38048: ST_TO_ADDR
// if hex [ 1 ] then
38049: LD_VAR 0 4
38053: PUSH
38054: LD_INT 1
38056: ARRAY
38057: IFFALSE 38061
// continue ;
38059: GO 37949
// h := hex [ 2 ] ;
38061: LD_ADDR_VAR 0 13
38065: PUSH
38066: LD_VAR 0 4
38070: PUSH
38071: LD_INT 2
38073: ARRAY
38074: ST_TO_ADDR
// if h + 7 < height then
38075: LD_VAR 0 13
38079: PUSH
38080: LD_INT 7
38082: PLUS
38083: PUSH
38084: LD_VAR 0 15
38088: LESS
38089: IFFALSE 38118
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38091: LD_ADDR_VAR 0 18
38095: PUSH
38096: LD_INT 7
38098: PUSH
38099: LD_INT 28
38101: PUSH
38102: LD_INT 45
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: PUSH
38110: LD_VAR 0 12
38114: ARRAY
38115: ST_TO_ADDR
// break ;
38116: GO 38120
// end ; end ; end ;
38118: GO 37949
38120: POP
38121: POP
// end ; if not weapon then
38122: LD_VAR 0 18
38126: NOT
38127: IFFALSE 38187
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38129: LD_ADDR_VAR 0 5
38133: PUSH
38134: LD_VAR 0 5
38138: PUSH
38139: LD_INT 11
38141: PUSH
38142: LD_INT 30
38144: PUSH
38145: LD_INT 49
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: DIFF
38153: ST_TO_ADDR
// if not list then
38154: LD_VAR 0 5
38158: NOT
38159: IFFALSE 38163
// exit ;
38161: GO 38305
// weapon := list [ rand ( 1 , list ) ] ;
38163: LD_ADDR_VAR 0 18
38167: PUSH
38168: LD_VAR 0 5
38172: PUSH
38173: LD_INT 1
38175: PPUSH
38176: LD_VAR 0 5
38180: PPUSH
38181: CALL_OW 12
38185: ARRAY
38186: ST_TO_ADDR
// end ; if weapon then
38187: LD_VAR 0 18
38191: IFFALSE 38305
// begin tmp := CostOfWeapon ( weapon ) ;
38193: LD_ADDR_VAR 0 14
38197: PUSH
38198: LD_VAR 0 18
38202: PPUSH
38203: CALL_OW 451
38207: ST_TO_ADDR
// j := GetBase ( tower ) ;
38208: LD_ADDR_VAR 0 9
38212: PUSH
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL_OW 274
38222: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38223: LD_VAR 0 9
38227: PPUSH
38228: LD_INT 1
38230: PPUSH
38231: CALL_OW 275
38235: PUSH
38236: LD_VAR 0 14
38240: PUSH
38241: LD_INT 1
38243: ARRAY
38244: GREATEREQUAL
38245: PUSH
38246: LD_VAR 0 9
38250: PPUSH
38251: LD_INT 2
38253: PPUSH
38254: CALL_OW 275
38258: PUSH
38259: LD_VAR 0 14
38263: PUSH
38264: LD_INT 2
38266: ARRAY
38267: GREATEREQUAL
38268: AND
38269: PUSH
38270: LD_VAR 0 9
38274: PPUSH
38275: LD_INT 3
38277: PPUSH
38278: CALL_OW 275
38282: PUSH
38283: LD_VAR 0 14
38287: PUSH
38288: LD_INT 3
38290: ARRAY
38291: GREATEREQUAL
38292: AND
38293: IFFALSE 38305
// result := weapon ;
38295: LD_ADDR_VAR 0 3
38299: PUSH
38300: LD_VAR 0 18
38304: ST_TO_ADDR
// end ; end ;
38305: LD_VAR 0 3
38309: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38310: LD_INT 0
38312: PPUSH
38313: PPUSH
// result := true ;
38314: LD_ADDR_VAR 0 3
38318: PUSH
38319: LD_INT 1
38321: ST_TO_ADDR
// if array1 = array2 then
38322: LD_VAR 0 1
38326: PUSH
38327: LD_VAR 0 2
38331: EQUAL
38332: IFFALSE 38392
// begin for i = 1 to array1 do
38334: LD_ADDR_VAR 0 4
38338: PUSH
38339: DOUBLE
38340: LD_INT 1
38342: DEC
38343: ST_TO_ADDR
38344: LD_VAR 0 1
38348: PUSH
38349: FOR_TO
38350: IFFALSE 38388
// if array1 [ i ] <> array2 [ i ] then
38352: LD_VAR 0 1
38356: PUSH
38357: LD_VAR 0 4
38361: ARRAY
38362: PUSH
38363: LD_VAR 0 2
38367: PUSH
38368: LD_VAR 0 4
38372: ARRAY
38373: NONEQUAL
38374: IFFALSE 38386
// begin result := false ;
38376: LD_ADDR_VAR 0 3
38380: PUSH
38381: LD_INT 0
38383: ST_TO_ADDR
// break ;
38384: GO 38388
// end ;
38386: GO 38349
38388: POP
38389: POP
// end else
38390: GO 38400
// result := false ;
38392: LD_ADDR_VAR 0 3
38396: PUSH
38397: LD_INT 0
38399: ST_TO_ADDR
// end ;
38400: LD_VAR 0 3
38404: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38405: LD_INT 0
38407: PPUSH
38408: PPUSH
// if not array1 or not array2 then
38409: LD_VAR 0 1
38413: NOT
38414: PUSH
38415: LD_VAR 0 2
38419: NOT
38420: OR
38421: IFFALSE 38425
// exit ;
38423: GO 38489
// result := true ;
38425: LD_ADDR_VAR 0 3
38429: PUSH
38430: LD_INT 1
38432: ST_TO_ADDR
// for i = 1 to array1 do
38433: LD_ADDR_VAR 0 4
38437: PUSH
38438: DOUBLE
38439: LD_INT 1
38441: DEC
38442: ST_TO_ADDR
38443: LD_VAR 0 1
38447: PUSH
38448: FOR_TO
38449: IFFALSE 38487
// if array1 [ i ] <> array2 [ i ] then
38451: LD_VAR 0 1
38455: PUSH
38456: LD_VAR 0 4
38460: ARRAY
38461: PUSH
38462: LD_VAR 0 2
38466: PUSH
38467: LD_VAR 0 4
38471: ARRAY
38472: NONEQUAL
38473: IFFALSE 38485
// begin result := false ;
38475: LD_ADDR_VAR 0 3
38479: PUSH
38480: LD_INT 0
38482: ST_TO_ADDR
// break ;
38483: GO 38487
// end ;
38485: GO 38448
38487: POP
38488: POP
// end ;
38489: LD_VAR 0 3
38493: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38494: LD_INT 0
38496: PPUSH
38497: PPUSH
38498: PPUSH
// pom := GetBase ( fac ) ;
38499: LD_ADDR_VAR 0 5
38503: PUSH
38504: LD_VAR 0 1
38508: PPUSH
38509: CALL_OW 274
38513: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38514: LD_ADDR_VAR 0 4
38518: PUSH
38519: LD_VAR 0 2
38523: PUSH
38524: LD_INT 1
38526: ARRAY
38527: PPUSH
38528: LD_VAR 0 2
38532: PUSH
38533: LD_INT 2
38535: ARRAY
38536: PPUSH
38537: LD_VAR 0 2
38541: PUSH
38542: LD_INT 3
38544: ARRAY
38545: PPUSH
38546: LD_VAR 0 2
38550: PUSH
38551: LD_INT 4
38553: ARRAY
38554: PPUSH
38555: CALL_OW 449
38559: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38560: LD_ADDR_VAR 0 3
38564: PUSH
38565: LD_VAR 0 5
38569: PPUSH
38570: LD_INT 1
38572: PPUSH
38573: CALL_OW 275
38577: PUSH
38578: LD_VAR 0 4
38582: PUSH
38583: LD_INT 1
38585: ARRAY
38586: GREATEREQUAL
38587: PUSH
38588: LD_VAR 0 5
38592: PPUSH
38593: LD_INT 2
38595: PPUSH
38596: CALL_OW 275
38600: PUSH
38601: LD_VAR 0 4
38605: PUSH
38606: LD_INT 2
38608: ARRAY
38609: GREATEREQUAL
38610: AND
38611: PUSH
38612: LD_VAR 0 5
38616: PPUSH
38617: LD_INT 3
38619: PPUSH
38620: CALL_OW 275
38624: PUSH
38625: LD_VAR 0 4
38629: PUSH
38630: LD_INT 3
38632: ARRAY
38633: GREATEREQUAL
38634: AND
38635: ST_TO_ADDR
// end ;
38636: LD_VAR 0 3
38640: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38641: LD_INT 0
38643: PPUSH
38644: PPUSH
38645: PPUSH
38646: PPUSH
// pom := GetBase ( building ) ;
38647: LD_ADDR_VAR 0 3
38651: PUSH
38652: LD_VAR 0 1
38656: PPUSH
38657: CALL_OW 274
38661: ST_TO_ADDR
// if not pom then
38662: LD_VAR 0 3
38666: NOT
38667: IFFALSE 38671
// exit ;
38669: GO 38841
// btype := GetBType ( building ) ;
38671: LD_ADDR_VAR 0 5
38675: PUSH
38676: LD_VAR 0 1
38680: PPUSH
38681: CALL_OW 266
38685: ST_TO_ADDR
// if btype = b_armoury then
38686: LD_VAR 0 5
38690: PUSH
38691: LD_INT 4
38693: EQUAL
38694: IFFALSE 38704
// btype := b_barracks ;
38696: LD_ADDR_VAR 0 5
38700: PUSH
38701: LD_INT 5
38703: ST_TO_ADDR
// if btype = b_depot then
38704: LD_VAR 0 5
38708: PUSH
38709: LD_INT 0
38711: EQUAL
38712: IFFALSE 38722
// btype := b_warehouse ;
38714: LD_ADDR_VAR 0 5
38718: PUSH
38719: LD_INT 1
38721: ST_TO_ADDR
// if btype = b_workshop then
38722: LD_VAR 0 5
38726: PUSH
38727: LD_INT 2
38729: EQUAL
38730: IFFALSE 38740
// btype := b_factory ;
38732: LD_ADDR_VAR 0 5
38736: PUSH
38737: LD_INT 3
38739: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38740: LD_ADDR_VAR 0 4
38744: PUSH
38745: LD_VAR 0 5
38749: PPUSH
38750: LD_VAR 0 1
38754: PPUSH
38755: CALL_OW 248
38759: PPUSH
38760: CALL_OW 450
38764: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38765: LD_ADDR_VAR 0 2
38769: PUSH
38770: LD_VAR 0 3
38774: PPUSH
38775: LD_INT 1
38777: PPUSH
38778: CALL_OW 275
38782: PUSH
38783: LD_VAR 0 4
38787: PUSH
38788: LD_INT 1
38790: ARRAY
38791: GREATEREQUAL
38792: PUSH
38793: LD_VAR 0 3
38797: PPUSH
38798: LD_INT 2
38800: PPUSH
38801: CALL_OW 275
38805: PUSH
38806: LD_VAR 0 4
38810: PUSH
38811: LD_INT 2
38813: ARRAY
38814: GREATEREQUAL
38815: AND
38816: PUSH
38817: LD_VAR 0 3
38821: PPUSH
38822: LD_INT 3
38824: PPUSH
38825: CALL_OW 275
38829: PUSH
38830: LD_VAR 0 4
38834: PUSH
38835: LD_INT 3
38837: ARRAY
38838: GREATEREQUAL
38839: AND
38840: ST_TO_ADDR
// end ;
38841: LD_VAR 0 2
38845: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38846: LD_INT 0
38848: PPUSH
38849: PPUSH
38850: PPUSH
// pom := GetBase ( building ) ;
38851: LD_ADDR_VAR 0 4
38855: PUSH
38856: LD_VAR 0 1
38860: PPUSH
38861: CALL_OW 274
38865: ST_TO_ADDR
// if not pom then
38866: LD_VAR 0 4
38870: NOT
38871: IFFALSE 38875
// exit ;
38873: GO 38976
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38875: LD_ADDR_VAR 0 5
38879: PUSH
38880: LD_VAR 0 2
38884: PPUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 248
38894: PPUSH
38895: CALL_OW 450
38899: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38900: LD_ADDR_VAR 0 3
38904: PUSH
38905: LD_VAR 0 4
38909: PPUSH
38910: LD_INT 1
38912: PPUSH
38913: CALL_OW 275
38917: PUSH
38918: LD_VAR 0 5
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: GREATEREQUAL
38927: PUSH
38928: LD_VAR 0 4
38932: PPUSH
38933: LD_INT 2
38935: PPUSH
38936: CALL_OW 275
38940: PUSH
38941: LD_VAR 0 5
38945: PUSH
38946: LD_INT 2
38948: ARRAY
38949: GREATEREQUAL
38950: AND
38951: PUSH
38952: LD_VAR 0 4
38956: PPUSH
38957: LD_INT 3
38959: PPUSH
38960: CALL_OW 275
38964: PUSH
38965: LD_VAR 0 5
38969: PUSH
38970: LD_INT 3
38972: ARRAY
38973: GREATEREQUAL
38974: AND
38975: ST_TO_ADDR
// end ;
38976: LD_VAR 0 3
38980: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38981: LD_INT 0
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
38989: PPUSH
38990: PPUSH
38991: PPUSH
38992: PPUSH
38993: PPUSH
// result := false ;
38994: LD_ADDR_VAR 0 8
38998: PUSH
38999: LD_INT 0
39001: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39002: LD_VAR 0 5
39006: NOT
39007: PUSH
39008: LD_VAR 0 1
39012: NOT
39013: OR
39014: PUSH
39015: LD_VAR 0 2
39019: NOT
39020: OR
39021: PUSH
39022: LD_VAR 0 3
39026: NOT
39027: OR
39028: IFFALSE 39032
// exit ;
39030: GO 39846
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39032: LD_ADDR_VAR 0 14
39036: PUSH
39037: LD_VAR 0 1
39041: PPUSH
39042: LD_VAR 0 2
39046: PPUSH
39047: LD_VAR 0 3
39051: PPUSH
39052: LD_VAR 0 4
39056: PPUSH
39057: LD_VAR 0 5
39061: PUSH
39062: LD_INT 1
39064: ARRAY
39065: PPUSH
39066: CALL_OW 248
39070: PPUSH
39071: LD_INT 0
39073: PPUSH
39074: CALL 41079 0 6
39078: ST_TO_ADDR
// if not hexes then
39079: LD_VAR 0 14
39083: NOT
39084: IFFALSE 39088
// exit ;
39086: GO 39846
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39088: LD_ADDR_VAR 0 17
39092: PUSH
39093: LD_VAR 0 5
39097: PPUSH
39098: LD_INT 22
39100: PUSH
39101: LD_VAR 0 13
39105: PPUSH
39106: CALL_OW 255
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: LD_INT 30
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 30
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PPUSH
39147: CALL_OW 72
39151: ST_TO_ADDR
// for i = 1 to hexes do
39152: LD_ADDR_VAR 0 9
39156: PUSH
39157: DOUBLE
39158: LD_INT 1
39160: DEC
39161: ST_TO_ADDR
39162: LD_VAR 0 14
39166: PUSH
39167: FOR_TO
39168: IFFALSE 39844
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39170: LD_ADDR_VAR 0 13
39174: PUSH
39175: LD_VAR 0 14
39179: PUSH
39180: LD_VAR 0 9
39184: ARRAY
39185: PUSH
39186: LD_INT 1
39188: ARRAY
39189: PPUSH
39190: LD_VAR 0 14
39194: PUSH
39195: LD_VAR 0 9
39199: ARRAY
39200: PUSH
39201: LD_INT 2
39203: ARRAY
39204: PPUSH
39205: CALL_OW 428
39209: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39210: LD_VAR 0 14
39214: PUSH
39215: LD_VAR 0 9
39219: ARRAY
39220: PUSH
39221: LD_INT 1
39223: ARRAY
39224: PPUSH
39225: LD_VAR 0 14
39229: PUSH
39230: LD_VAR 0 9
39234: ARRAY
39235: PUSH
39236: LD_INT 2
39238: ARRAY
39239: PPUSH
39240: CALL_OW 351
39244: PUSH
39245: LD_VAR 0 14
39249: PUSH
39250: LD_VAR 0 9
39254: ARRAY
39255: PUSH
39256: LD_INT 1
39258: ARRAY
39259: PPUSH
39260: LD_VAR 0 14
39264: PUSH
39265: LD_VAR 0 9
39269: ARRAY
39270: PUSH
39271: LD_INT 2
39273: ARRAY
39274: PPUSH
39275: CALL_OW 488
39279: NOT
39280: OR
39281: PUSH
39282: LD_VAR 0 13
39286: PPUSH
39287: CALL_OW 247
39291: PUSH
39292: LD_INT 3
39294: EQUAL
39295: OR
39296: IFFALSE 39302
// exit ;
39298: POP
39299: POP
39300: GO 39846
// if not tmp then
39302: LD_VAR 0 13
39306: NOT
39307: IFFALSE 39311
// continue ;
39309: GO 39167
// result := true ;
39311: LD_ADDR_VAR 0 8
39315: PUSH
39316: LD_INT 1
39318: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39319: LD_VAR 0 6
39323: PUSH
39324: LD_VAR 0 13
39328: PPUSH
39329: CALL_OW 247
39333: PUSH
39334: LD_INT 2
39336: EQUAL
39337: AND
39338: PUSH
39339: LD_VAR 0 13
39343: PPUSH
39344: CALL_OW 263
39348: PUSH
39349: LD_INT 1
39351: EQUAL
39352: AND
39353: IFFALSE 39517
// begin if IsDrivenBy ( tmp ) then
39355: LD_VAR 0 13
39359: PPUSH
39360: CALL_OW 311
39364: IFFALSE 39368
// continue ;
39366: GO 39167
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39368: LD_VAR 0 6
39372: PPUSH
39373: LD_INT 3
39375: PUSH
39376: LD_INT 60
39378: PUSH
39379: EMPTY
39380: LIST
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 3
39388: PUSH
39389: LD_INT 55
39391: PUSH
39392: EMPTY
39393: LIST
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PPUSH
39403: CALL_OW 72
39407: IFFALSE 39515
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39409: LD_ADDR_VAR 0 18
39413: PUSH
39414: LD_VAR 0 6
39418: PPUSH
39419: LD_INT 3
39421: PUSH
39422: LD_INT 60
39424: PUSH
39425: EMPTY
39426: LIST
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 3
39434: PUSH
39435: LD_INT 55
39437: PUSH
39438: EMPTY
39439: LIST
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PPUSH
39449: CALL_OW 72
39453: PUSH
39454: LD_INT 1
39456: ARRAY
39457: ST_TO_ADDR
// if IsInUnit ( driver ) then
39458: LD_VAR 0 18
39462: PPUSH
39463: CALL_OW 310
39467: IFFALSE 39478
// ComExit ( driver ) ;
39469: LD_VAR 0 18
39473: PPUSH
39474: CALL 64767 0 1
// AddComEnterUnit ( driver , tmp ) ;
39478: LD_VAR 0 18
39482: PPUSH
39483: LD_VAR 0 13
39487: PPUSH
39488: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39492: LD_VAR 0 18
39496: PPUSH
39497: LD_VAR 0 7
39501: PPUSH
39502: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39506: LD_VAR 0 18
39510: PPUSH
39511: CALL_OW 181
// end ; continue ;
39515: GO 39167
// end ; if not cleaners or not tmp in cleaners then
39517: LD_VAR 0 6
39521: NOT
39522: PUSH
39523: LD_VAR 0 13
39527: PUSH
39528: LD_VAR 0 6
39532: IN
39533: NOT
39534: OR
39535: IFFALSE 39842
// begin if dep then
39537: LD_VAR 0 17
39541: IFFALSE 39677
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39543: LD_ADDR_VAR 0 16
39547: PUSH
39548: LD_VAR 0 17
39552: PUSH
39553: LD_INT 1
39555: ARRAY
39556: PPUSH
39557: CALL_OW 250
39561: PPUSH
39562: LD_VAR 0 17
39566: PUSH
39567: LD_INT 1
39569: ARRAY
39570: PPUSH
39571: CALL_OW 254
39575: PPUSH
39576: LD_INT 5
39578: PPUSH
39579: CALL_OW 272
39583: PUSH
39584: LD_VAR 0 17
39588: PUSH
39589: LD_INT 1
39591: ARRAY
39592: PPUSH
39593: CALL_OW 251
39597: PPUSH
39598: LD_VAR 0 17
39602: PUSH
39603: LD_INT 1
39605: ARRAY
39606: PPUSH
39607: CALL_OW 254
39611: PPUSH
39612: LD_INT 5
39614: PPUSH
39615: CALL_OW 273
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39624: LD_VAR 0 16
39628: PUSH
39629: LD_INT 1
39631: ARRAY
39632: PPUSH
39633: LD_VAR 0 16
39637: PUSH
39638: LD_INT 2
39640: ARRAY
39641: PPUSH
39642: CALL_OW 488
39646: IFFALSE 39677
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39648: LD_VAR 0 13
39652: PPUSH
39653: LD_VAR 0 16
39657: PUSH
39658: LD_INT 1
39660: ARRAY
39661: PPUSH
39662: LD_VAR 0 16
39666: PUSH
39667: LD_INT 2
39669: ARRAY
39670: PPUSH
39671: CALL_OW 111
// continue ;
39675: GO 39167
// end ; end ; r := GetDir ( tmp ) ;
39677: LD_ADDR_VAR 0 15
39681: PUSH
39682: LD_VAR 0 13
39686: PPUSH
39687: CALL_OW 254
39691: ST_TO_ADDR
// if r = 5 then
39692: LD_VAR 0 15
39696: PUSH
39697: LD_INT 5
39699: EQUAL
39700: IFFALSE 39710
// r := 0 ;
39702: LD_ADDR_VAR 0 15
39706: PUSH
39707: LD_INT 0
39709: ST_TO_ADDR
// for j = r to 5 do
39710: LD_ADDR_VAR 0 10
39714: PUSH
39715: DOUBLE
39716: LD_VAR 0 15
39720: DEC
39721: ST_TO_ADDR
39722: LD_INT 5
39724: PUSH
39725: FOR_TO
39726: IFFALSE 39840
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39728: LD_ADDR_VAR 0 11
39732: PUSH
39733: LD_VAR 0 13
39737: PPUSH
39738: CALL_OW 250
39742: PPUSH
39743: LD_VAR 0 10
39747: PPUSH
39748: LD_INT 2
39750: PPUSH
39751: CALL_OW 272
39755: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39756: LD_ADDR_VAR 0 12
39760: PUSH
39761: LD_VAR 0 13
39765: PPUSH
39766: CALL_OW 251
39770: PPUSH
39771: LD_VAR 0 10
39775: PPUSH
39776: LD_INT 2
39778: PPUSH
39779: CALL_OW 273
39783: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39784: LD_VAR 0 11
39788: PPUSH
39789: LD_VAR 0 12
39793: PPUSH
39794: CALL_OW 488
39798: PUSH
39799: LD_VAR 0 11
39803: PPUSH
39804: LD_VAR 0 12
39808: PPUSH
39809: CALL_OW 428
39813: NOT
39814: AND
39815: IFFALSE 39838
// begin ComMoveXY ( tmp , _x , _y ) ;
39817: LD_VAR 0 13
39821: PPUSH
39822: LD_VAR 0 11
39826: PPUSH
39827: LD_VAR 0 12
39831: PPUSH
39832: CALL_OW 111
// break ;
39836: GO 39840
// end ; end ;
39838: GO 39725
39840: POP
39841: POP
// end ; end ;
39842: GO 39167
39844: POP
39845: POP
// end ;
39846: LD_VAR 0 8
39850: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39851: LD_INT 0
39853: PPUSH
// result := true ;
39854: LD_ADDR_VAR 0 3
39858: PUSH
39859: LD_INT 1
39861: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39862: LD_VAR 0 2
39866: PUSH
39867: LD_INT 24
39869: DOUBLE
39870: EQUAL
39871: IFTRUE 39881
39873: LD_INT 33
39875: DOUBLE
39876: EQUAL
39877: IFTRUE 39881
39879: GO 39906
39881: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_INT 32
39889: PPUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: CALL_OW 321
39899: PUSH
39900: LD_INT 2
39902: EQUAL
39903: ST_TO_ADDR
39904: GO 40222
39906: LD_INT 20
39908: DOUBLE
39909: EQUAL
39910: IFTRUE 39914
39912: GO 39939
39914: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39915: LD_ADDR_VAR 0 3
39919: PUSH
39920: LD_INT 6
39922: PPUSH
39923: LD_VAR 0 1
39927: PPUSH
39928: CALL_OW 321
39932: PUSH
39933: LD_INT 2
39935: EQUAL
39936: ST_TO_ADDR
39937: GO 40222
39939: LD_INT 22
39941: DOUBLE
39942: EQUAL
39943: IFTRUE 39953
39945: LD_INT 36
39947: DOUBLE
39948: EQUAL
39949: IFTRUE 39953
39951: GO 39978
39953: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39954: LD_ADDR_VAR 0 3
39958: PUSH
39959: LD_INT 15
39961: PPUSH
39962: LD_VAR 0 1
39966: PPUSH
39967: CALL_OW 321
39971: PUSH
39972: LD_INT 2
39974: EQUAL
39975: ST_TO_ADDR
39976: GO 40222
39978: LD_INT 30
39980: DOUBLE
39981: EQUAL
39982: IFTRUE 39986
39984: GO 40011
39986: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_INT 20
39994: PPUSH
39995: LD_VAR 0 1
39999: PPUSH
40000: CALL_OW 321
40004: PUSH
40005: LD_INT 2
40007: EQUAL
40008: ST_TO_ADDR
40009: GO 40222
40011: LD_INT 28
40013: DOUBLE
40014: EQUAL
40015: IFTRUE 40025
40017: LD_INT 21
40019: DOUBLE
40020: EQUAL
40021: IFTRUE 40025
40023: GO 40050
40025: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40026: LD_ADDR_VAR 0 3
40030: PUSH
40031: LD_INT 21
40033: PPUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: CALL_OW 321
40043: PUSH
40044: LD_INT 2
40046: EQUAL
40047: ST_TO_ADDR
40048: GO 40222
40050: LD_INT 16
40052: DOUBLE
40053: EQUAL
40054: IFTRUE 40058
40056: GO 40083
40058: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40059: LD_ADDR_VAR 0 3
40063: PUSH
40064: LD_INT 84
40066: PPUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: CALL_OW 321
40076: PUSH
40077: LD_INT 2
40079: EQUAL
40080: ST_TO_ADDR
40081: GO 40222
40083: LD_INT 19
40085: DOUBLE
40086: EQUAL
40087: IFTRUE 40097
40089: LD_INT 23
40091: DOUBLE
40092: EQUAL
40093: IFTRUE 40097
40095: GO 40122
40097: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40098: LD_ADDR_VAR 0 3
40102: PUSH
40103: LD_INT 83
40105: PPUSH
40106: LD_VAR 0 1
40110: PPUSH
40111: CALL_OW 321
40115: PUSH
40116: LD_INT 2
40118: EQUAL
40119: ST_TO_ADDR
40120: GO 40222
40122: LD_INT 17
40124: DOUBLE
40125: EQUAL
40126: IFTRUE 40130
40128: GO 40155
40130: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40131: LD_ADDR_VAR 0 3
40135: PUSH
40136: LD_INT 39
40138: PPUSH
40139: LD_VAR 0 1
40143: PPUSH
40144: CALL_OW 321
40148: PUSH
40149: LD_INT 2
40151: EQUAL
40152: ST_TO_ADDR
40153: GO 40222
40155: LD_INT 18
40157: DOUBLE
40158: EQUAL
40159: IFTRUE 40163
40161: GO 40188
40163: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40164: LD_ADDR_VAR 0 3
40168: PUSH
40169: LD_INT 40
40171: PPUSH
40172: LD_VAR 0 1
40176: PPUSH
40177: CALL_OW 321
40181: PUSH
40182: LD_INT 2
40184: EQUAL
40185: ST_TO_ADDR
40186: GO 40222
40188: LD_INT 27
40190: DOUBLE
40191: EQUAL
40192: IFTRUE 40196
40194: GO 40221
40196: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40197: LD_ADDR_VAR 0 3
40201: PUSH
40202: LD_INT 35
40204: PPUSH
40205: LD_VAR 0 1
40209: PPUSH
40210: CALL_OW 321
40214: PUSH
40215: LD_INT 2
40217: EQUAL
40218: ST_TO_ADDR
40219: GO 40222
40221: POP
// end ;
40222: LD_VAR 0 3
40226: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40227: LD_INT 0
40229: PPUSH
40230: PPUSH
40231: PPUSH
40232: PPUSH
40233: PPUSH
40234: PPUSH
40235: PPUSH
40236: PPUSH
40237: PPUSH
40238: PPUSH
40239: PPUSH
// result := false ;
40240: LD_ADDR_VAR 0 6
40244: PUSH
40245: LD_INT 0
40247: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40248: LD_VAR 0 1
40252: NOT
40253: PUSH
40254: LD_VAR 0 1
40258: PPUSH
40259: CALL_OW 266
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: IN
40274: NOT
40275: OR
40276: PUSH
40277: LD_VAR 0 2
40281: NOT
40282: OR
40283: PUSH
40284: LD_VAR 0 5
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 3
40300: PUSH
40301: LD_INT 4
40303: PUSH
40304: LD_INT 5
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: IN
40315: NOT
40316: OR
40317: PUSH
40318: LD_VAR 0 3
40322: PPUSH
40323: LD_VAR 0 4
40327: PPUSH
40328: CALL_OW 488
40332: NOT
40333: OR
40334: IFFALSE 40338
// exit ;
40336: GO 41074
// side := GetSide ( depot ) ;
40338: LD_ADDR_VAR 0 9
40342: PUSH
40343: LD_VAR 0 1
40347: PPUSH
40348: CALL_OW 255
40352: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40353: LD_VAR 0 9
40357: PPUSH
40358: LD_VAR 0 2
40362: PPUSH
40363: CALL 39851 0 2
40367: NOT
40368: IFFALSE 40372
// exit ;
40370: GO 41074
// pom := GetBase ( depot ) ;
40372: LD_ADDR_VAR 0 10
40376: PUSH
40377: LD_VAR 0 1
40381: PPUSH
40382: CALL_OW 274
40386: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40387: LD_ADDR_VAR 0 11
40391: PUSH
40392: LD_VAR 0 2
40396: PPUSH
40397: LD_VAR 0 1
40401: PPUSH
40402: CALL_OW 248
40406: PPUSH
40407: CALL_OW 450
40411: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40412: LD_VAR 0 10
40416: PPUSH
40417: LD_INT 1
40419: PPUSH
40420: CALL_OW 275
40424: PUSH
40425: LD_VAR 0 11
40429: PUSH
40430: LD_INT 1
40432: ARRAY
40433: GREATEREQUAL
40434: PUSH
40435: LD_VAR 0 10
40439: PPUSH
40440: LD_INT 2
40442: PPUSH
40443: CALL_OW 275
40447: PUSH
40448: LD_VAR 0 11
40452: PUSH
40453: LD_INT 2
40455: ARRAY
40456: GREATEREQUAL
40457: AND
40458: PUSH
40459: LD_VAR 0 10
40463: PPUSH
40464: LD_INT 3
40466: PPUSH
40467: CALL_OW 275
40471: PUSH
40472: LD_VAR 0 11
40476: PUSH
40477: LD_INT 3
40479: ARRAY
40480: GREATEREQUAL
40481: AND
40482: NOT
40483: IFFALSE 40487
// exit ;
40485: GO 41074
// if GetBType ( depot ) = b_depot then
40487: LD_VAR 0 1
40491: PPUSH
40492: CALL_OW 266
40496: PUSH
40497: LD_INT 0
40499: EQUAL
40500: IFFALSE 40512
// dist := 28 else
40502: LD_ADDR_VAR 0 14
40506: PUSH
40507: LD_INT 28
40509: ST_TO_ADDR
40510: GO 40520
// dist := 36 ;
40512: LD_ADDR_VAR 0 14
40516: PUSH
40517: LD_INT 36
40519: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40520: LD_VAR 0 1
40524: PPUSH
40525: LD_VAR 0 3
40529: PPUSH
40530: LD_VAR 0 4
40534: PPUSH
40535: CALL_OW 297
40539: PUSH
40540: LD_VAR 0 14
40544: GREATER
40545: IFFALSE 40549
// exit ;
40547: GO 41074
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40549: LD_ADDR_VAR 0 12
40553: PUSH
40554: LD_VAR 0 2
40558: PPUSH
40559: LD_VAR 0 3
40563: PPUSH
40564: LD_VAR 0 4
40568: PPUSH
40569: LD_VAR 0 5
40573: PPUSH
40574: LD_VAR 0 1
40578: PPUSH
40579: CALL_OW 248
40583: PPUSH
40584: LD_INT 0
40586: PPUSH
40587: CALL 41079 0 6
40591: ST_TO_ADDR
// if not hexes then
40592: LD_VAR 0 12
40596: NOT
40597: IFFALSE 40601
// exit ;
40599: GO 41074
// hex := GetHexInfo ( x , y ) ;
40601: LD_ADDR_VAR 0 15
40605: PUSH
40606: LD_VAR 0 3
40610: PPUSH
40611: LD_VAR 0 4
40615: PPUSH
40616: CALL_OW 546
40620: ST_TO_ADDR
// if hex [ 1 ] then
40621: LD_VAR 0 15
40625: PUSH
40626: LD_INT 1
40628: ARRAY
40629: IFFALSE 40633
// exit ;
40631: GO 41074
// height := hex [ 2 ] ;
40633: LD_ADDR_VAR 0 13
40637: PUSH
40638: LD_VAR 0 15
40642: PUSH
40643: LD_INT 2
40645: ARRAY
40646: ST_TO_ADDR
// for i = 1 to hexes do
40647: LD_ADDR_VAR 0 7
40651: PUSH
40652: DOUBLE
40653: LD_INT 1
40655: DEC
40656: ST_TO_ADDR
40657: LD_VAR 0 12
40661: PUSH
40662: FOR_TO
40663: IFFALSE 40993
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40665: LD_VAR 0 12
40669: PUSH
40670: LD_VAR 0 7
40674: ARRAY
40675: PUSH
40676: LD_INT 1
40678: ARRAY
40679: PPUSH
40680: LD_VAR 0 12
40684: PUSH
40685: LD_VAR 0 7
40689: ARRAY
40690: PUSH
40691: LD_INT 2
40693: ARRAY
40694: PPUSH
40695: CALL_OW 488
40699: NOT
40700: PUSH
40701: LD_VAR 0 12
40705: PUSH
40706: LD_VAR 0 7
40710: ARRAY
40711: PUSH
40712: LD_INT 1
40714: ARRAY
40715: PPUSH
40716: LD_VAR 0 12
40720: PUSH
40721: LD_VAR 0 7
40725: ARRAY
40726: PUSH
40727: LD_INT 2
40729: ARRAY
40730: PPUSH
40731: CALL_OW 428
40735: PUSH
40736: LD_INT 0
40738: GREATER
40739: OR
40740: PUSH
40741: LD_VAR 0 12
40745: PUSH
40746: LD_VAR 0 7
40750: ARRAY
40751: PUSH
40752: LD_INT 1
40754: ARRAY
40755: PPUSH
40756: LD_VAR 0 12
40760: PUSH
40761: LD_VAR 0 7
40765: ARRAY
40766: PUSH
40767: LD_INT 2
40769: ARRAY
40770: PPUSH
40771: CALL_OW 351
40775: OR
40776: IFFALSE 40782
// exit ;
40778: POP
40779: POP
40780: GO 41074
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40782: LD_ADDR_VAR 0 8
40786: PUSH
40787: LD_VAR 0 12
40791: PUSH
40792: LD_VAR 0 7
40796: ARRAY
40797: PUSH
40798: LD_INT 1
40800: ARRAY
40801: PPUSH
40802: LD_VAR 0 12
40806: PUSH
40807: LD_VAR 0 7
40811: ARRAY
40812: PUSH
40813: LD_INT 2
40815: ARRAY
40816: PPUSH
40817: CALL_OW 546
40821: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40822: LD_VAR 0 8
40826: PUSH
40827: LD_INT 1
40829: ARRAY
40830: PUSH
40831: LD_VAR 0 8
40835: PUSH
40836: LD_INT 2
40838: ARRAY
40839: PUSH
40840: LD_VAR 0 13
40844: PUSH
40845: LD_INT 2
40847: PLUS
40848: GREATER
40849: OR
40850: PUSH
40851: LD_VAR 0 8
40855: PUSH
40856: LD_INT 2
40858: ARRAY
40859: PUSH
40860: LD_VAR 0 13
40864: PUSH
40865: LD_INT 2
40867: MINUS
40868: LESS
40869: OR
40870: PUSH
40871: LD_VAR 0 8
40875: PUSH
40876: LD_INT 3
40878: ARRAY
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 8
40885: PUSH
40886: LD_INT 9
40888: PUSH
40889: LD_INT 10
40891: PUSH
40892: LD_INT 11
40894: PUSH
40895: LD_INT 12
40897: PUSH
40898: LD_INT 13
40900: PUSH
40901: LD_INT 16
40903: PUSH
40904: LD_INT 17
40906: PUSH
40907: LD_INT 18
40909: PUSH
40910: LD_INT 19
40912: PUSH
40913: LD_INT 20
40915: PUSH
40916: LD_INT 21
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: IN
40934: NOT
40935: OR
40936: PUSH
40937: LD_VAR 0 8
40941: PUSH
40942: LD_INT 5
40944: ARRAY
40945: NOT
40946: OR
40947: PUSH
40948: LD_VAR 0 8
40952: PUSH
40953: LD_INT 6
40955: ARRAY
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: LD_INT 7
40965: PUSH
40966: LD_INT 9
40968: PUSH
40969: LD_INT 10
40971: PUSH
40972: LD_INT 11
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: IN
40983: NOT
40984: OR
40985: IFFALSE 40991
// exit ;
40987: POP
40988: POP
40989: GO 41074
// end ;
40991: GO 40662
40993: POP
40994: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40995: LD_VAR 0 9
40999: PPUSH
41000: LD_VAR 0 3
41004: PPUSH
41005: LD_VAR 0 4
41009: PPUSH
41010: LD_INT 20
41012: PPUSH
41013: CALL 33026 0 4
41017: PUSH
41018: LD_INT 4
41020: ARRAY
41021: IFFALSE 41025
// exit ;
41023: GO 41074
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41025: LD_VAR 0 2
41029: PUSH
41030: LD_INT 29
41032: PUSH
41033: LD_INT 30
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: IN
41040: PUSH
41041: LD_VAR 0 3
41045: PPUSH
41046: LD_VAR 0 4
41050: PPUSH
41051: LD_VAR 0 9
41055: PPUSH
41056: CALL_OW 440
41060: NOT
41061: AND
41062: IFFALSE 41066
// exit ;
41064: GO 41074
// result := true ;
41066: LD_ADDR_VAR 0 6
41070: PUSH
41071: LD_INT 1
41073: ST_TO_ADDR
// end ;
41074: LD_VAR 0 6
41078: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41079: LD_INT 0
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
41085: PPUSH
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
41101: PPUSH
41102: PPUSH
41103: PPUSH
41104: PPUSH
41105: PPUSH
41106: PPUSH
41107: PPUSH
41108: PPUSH
41109: PPUSH
41110: PPUSH
41111: PPUSH
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
41116: PPUSH
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
41127: PPUSH
41128: PPUSH
41129: PPUSH
41130: PPUSH
41131: PPUSH
41132: PPUSH
41133: PPUSH
41134: PPUSH
41135: PPUSH
41136: PPUSH
41137: PPUSH
41138: PPUSH
// result = [ ] ;
41139: LD_ADDR_VAR 0 7
41143: PUSH
41144: EMPTY
41145: ST_TO_ADDR
// temp_list = [ ] ;
41146: LD_ADDR_VAR 0 9
41150: PUSH
41151: EMPTY
41152: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41153: LD_VAR 0 4
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 3
41169: PUSH
41170: LD_INT 4
41172: PUSH
41173: LD_INT 5
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: IN
41184: NOT
41185: PUSH
41186: LD_VAR 0 1
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: IN
41201: PUSH
41202: LD_VAR 0 5
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: LD_INT 3
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: LIST
41220: IN
41221: NOT
41222: AND
41223: OR
41224: IFFALSE 41228
// exit ;
41226: GO 59619
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41228: LD_VAR 0 1
41232: PUSH
41233: LD_INT 6
41235: PUSH
41236: LD_INT 7
41238: PUSH
41239: LD_INT 8
41241: PUSH
41242: LD_INT 13
41244: PUSH
41245: LD_INT 12
41247: PUSH
41248: LD_INT 15
41250: PUSH
41251: LD_INT 11
41253: PUSH
41254: LD_INT 14
41256: PUSH
41257: LD_INT 10
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: IN
41271: IFFALSE 41281
// btype = b_lab ;
41273: LD_ADDR_VAR 0 1
41277: PUSH
41278: LD_INT 6
41280: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41281: LD_VAR 0 6
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: LIST
41299: IN
41300: NOT
41301: PUSH
41302: LD_VAR 0 1
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: LD_INT 3
41318: PUSH
41319: LD_INT 6
41321: PUSH
41322: LD_INT 36
41324: PUSH
41325: LD_INT 4
41327: PUSH
41328: LD_INT 5
41330: PUSH
41331: LD_INT 31
41333: PUSH
41334: LD_INT 32
41336: PUSH
41337: LD_INT 33
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: IN
41353: NOT
41354: PUSH
41355: LD_VAR 0 6
41359: PUSH
41360: LD_INT 1
41362: EQUAL
41363: AND
41364: OR
41365: PUSH
41366: LD_VAR 0 1
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: IN
41381: NOT
41382: PUSH
41383: LD_VAR 0 6
41387: PUSH
41388: LD_INT 2
41390: EQUAL
41391: AND
41392: OR
41393: IFFALSE 41403
// mode = 0 ;
41395: LD_ADDR_VAR 0 6
41399: PUSH
41400: LD_INT 0
41402: ST_TO_ADDR
// case mode of 0 :
41403: LD_VAR 0 6
41407: PUSH
41408: LD_INT 0
41410: DOUBLE
41411: EQUAL
41412: IFTRUE 41416
41414: GO 52869
41416: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41417: LD_ADDR_VAR 0 11
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 3
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41610: LD_ADDR_VAR 0 12
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: NEG
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 3
41767: NEG
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 3
41778: NEG
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41806: LD_ADDR_VAR 0 13
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 2
41929: NEG
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: LD_INT 3
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 3
41965: NEG
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 3
41977: NEG
41978: PUSH
41979: LD_INT 3
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42005: LD_ADDR_VAR 0 14
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 2
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 3
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: LD_INT 3
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42201: LD_ADDR_VAR 0 15
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 3
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 3
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42394: LD_ADDR_VAR 0 16
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: LD_INT 2
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 3
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: LD_INT 3
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 2
42561: PUSH
42562: LD_INT 3
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42587: LD_ADDR_VAR 0 17
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42817: LD_ADDR_VAR 0 18
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: LD_INT 1
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: LD_INT 2
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43047: LD_ADDR_VAR 0 19
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: NEG
43247: PUSH
43248: LD_INT 2
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43277: LD_ADDR_VAR 0 20
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 2
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: LD_INT 2
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43507: LD_ADDR_VAR 0 21
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: LD_INT 2
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43737: LD_ADDR_VAR 0 22
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43967: LD_ADDR_VAR 0 23
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: LD_INT 3
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 3
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44247: LD_ADDR_VAR 0 24
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: NEG
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: NEG
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44523: LD_ADDR_VAR 0 25
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 2
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 3
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 3
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44797: LD_ADDR_VAR 0 26
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 3
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45073: LD_ADDR_VAR 0 27
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 3
45306: NEG
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 3
45318: NEG
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45353: LD_ADDR_VAR 0 28
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: LD_INT 3
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 3
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 3
45600: NEG
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45635: LD_ADDR_VAR 0 29
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: LD_INT 3
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 3
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 3
45879: NEG
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45914: LD_ADDR_VAR 0 30
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: LD_INT 3
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46192: LD_ADDR_VAR 0 31
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 3
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 3
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 3
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 3
46435: NEG
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46470: LD_ADDR_VAR 0 32
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 3
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 3
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46748: LD_ADDR_VAR 0 33
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: LD_INT 3
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 3
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 3
46992: NEG
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47027: LD_ADDR_VAR 0 34
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 3
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 3
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47307: LD_ADDR_VAR 0 35
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47419: LD_ADDR_VAR 0 36
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47531: LD_ADDR_VAR 0 37
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47643: LD_ADDR_VAR 0 38
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47755: LD_ADDR_VAR 0 39
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47867: LD_ADDR_VAR 0 40
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47979: LD_ADDR_VAR 0 41
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: NEG
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: LD_INT 3
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: LD_INT 3
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: LD_INT 3
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 3
48253: NEG
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 3
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 3
48276: NEG
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 3
48288: NEG
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48329: LD_ADDR_VAR 0 42
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: LD_INT 3
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 3
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 3
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 3
48575: PUSH
48576: LD_INT 3
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 3
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48679: LD_ADDR_VAR 0 43
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 3
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 3
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 3
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 3
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 3
48975: NEG
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 3
48986: NEG
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49027: LD_ADDR_VAR 0 44
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 2
49182: NEG
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: LD_INT 3
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 3
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 3
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 3
49270: PUSH
49271: LD_INT 3
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 3
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 3
49301: NEG
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 3
49312: NEG
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 3
49324: NEG
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 3
49336: NEG
49337: PUSH
49338: LD_INT 3
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49377: LD_ADDR_VAR 0 45
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: NEG
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: LD_INT 3
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 3
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 3
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 3
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 3
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 3
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 3
49674: NEG
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: NEG
49687: PUSH
49688: LD_INT 3
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49727: LD_ADDR_VAR 0 46
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 3
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50075: LD_ADDR_VAR 0 47
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: NEG
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50226: LD_ADDR_VAR 0 48
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 2
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50373: LD_ADDR_VAR 0 49
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50517: LD_ADDR_VAR 0 50
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: LD_INT 2
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50661: LD_ADDR_VAR 0 51
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50808: LD_ADDR_VAR 0 52
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50959: LD_ADDR_VAR 0 53
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51189: LD_ADDR_VAR 0 54
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51419: LD_ADDR_VAR 0 55
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51649: LD_ADDR_VAR 0 56
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 2
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 2
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51879: LD_ADDR_VAR 0 57
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52109: LD_ADDR_VAR 0 58
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52339: LD_ADDR_VAR 0 59
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52427: LD_ADDR_VAR 0 60
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52515: LD_ADDR_VAR 0 61
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52603: LD_ADDR_VAR 0 62
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52691: LD_ADDR_VAR 0 63
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52779: LD_ADDR_VAR 0 64
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: ST_TO_ADDR
// end ; 1 :
52867: GO 58764
52869: LD_INT 1
52871: DOUBLE
52872: EQUAL
52873: IFTRUE 52877
52875: GO 55500
52877: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52878: LD_ADDR_VAR 0 11
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 3
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 3
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52922: LD_ADDR_VAR 0 12
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 3
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52963: LD_ADDR_VAR 0 13
52967: PUSH
52968: LD_INT 3
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 3
52980: PUSH
52981: LD_INT 3
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: LD_INT 3
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: LIST
53002: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53003: LD_ADDR_VAR 0 14
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53044: LD_ADDR_VAR 0 15
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 3
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53088: LD_ADDR_VAR 0 16
53092: PUSH
53093: LD_INT 2
53095: NEG
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: NEG
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: LIST
53133: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53134: LD_ADDR_VAR 0 17
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 3
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: LIST
53177: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53178: LD_ADDR_VAR 0 18
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 3
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53219: LD_ADDR_VAR 0 19
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 3
53236: PUSH
53237: LD_INT 3
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: LIST
53258: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53259: LD_ADDR_VAR 0 20
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: LIST
53299: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53300: LD_ADDR_VAR 0 21
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 3
53318: NEG
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: LIST
53343: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53344: LD_ADDR_VAR 0 22
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: LD_INT 3
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 3
53375: NEG
53376: PUSH
53377: LD_INT 3
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: LIST
53389: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53390: LD_ADDR_VAR 0 23
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: LD_INT 3
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: LD_INT 4
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 3
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: LIST
53433: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53434: LD_ADDR_VAR 0 24
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 4
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53475: LD_ADDR_VAR 0 25
53479: PUSH
53480: LD_INT 3
53482: PUSH
53483: LD_INT 3
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 4
53492: PUSH
53493: LD_INT 3
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 3
53502: PUSH
53503: LD_INT 4
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: LIST
53514: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53515: LD_ADDR_VAR 0 26
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 4
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: LIST
53555: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53556: LD_ADDR_VAR 0 27
53560: PUSH
53561: LD_INT 3
53563: NEG
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 4
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53600: LD_ADDR_VAR 0 28
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: LD_INT 3
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: LD_INT 4
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 4
53631: NEG
53632: PUSH
53633: LD_INT 3
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: LIST
53645: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53646: LD_ADDR_VAR 0 29
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 3
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 4
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 4
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 5
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 5
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: LD_INT 4
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: LD_INT 6
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 6
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 5
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53801: LD_ADDR_VAR 0 30
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 3
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 4
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 4
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 4
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 5
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 5
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 6
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 6
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53944: LD_ADDR_VAR 0 31
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 3
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 4
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 4
53991: PUSH
53992: LD_INT 4
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: LD_INT 4
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 5
54011: PUSH
54012: LD_INT 4
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 5
54021: PUSH
54022: LD_INT 5
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 4
54031: PUSH
54032: LD_INT 5
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 6
54041: PUSH
54042: LD_INT 5
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 6
54051: PUSH
54052: LD_INT 6
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 5
54061: PUSH
54062: LD_INT 6
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54083: LD_ADDR_VAR 0 32
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 3
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 4
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 4
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 5
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 5
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 4
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 6
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 6
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 5
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54226: LD_ADDR_VAR 0 33
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 3
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: NEG
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 4
54278: NEG
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 4
54289: NEG
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 4
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 5
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 5
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 5
54335: NEG
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 6
54346: NEG
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 6
54357: NEG
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54381: LD_ADDR_VAR 0 34
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 3
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 3
54412: NEG
54413: PUSH
54414: LD_INT 3
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 3
54424: NEG
54425: PUSH
54426: LD_INT 4
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 4
54436: NEG
54437: PUSH
54438: LD_INT 3
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 4
54448: NEG
54449: PUSH
54450: LD_INT 4
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 4
54460: NEG
54461: PUSH
54462: LD_INT 5
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 5
54472: NEG
54473: PUSH
54474: LD_INT 4
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 5
54484: NEG
54485: PUSH
54486: LD_INT 5
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 5
54496: NEG
54497: PUSH
54498: LD_INT 6
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 6
54508: NEG
54509: PUSH
54510: LD_INT 5
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 6
54520: NEG
54521: PUSH
54522: LD_INT 6
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54544: LD_ADDR_VAR 0 41
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 3
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 2
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54588: LD_ADDR_VAR 0 42
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54629: LD_ADDR_VAR 0 43
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: LD_INT 3
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: LIST
54668: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54669: LD_ADDR_VAR 0 44
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 3
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: LIST
54709: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54710: LD_ADDR_VAR 0 45
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 3
54739: NEG
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54754: LD_ADDR_VAR 0 46
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: LD_INT 3
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 3
54785: NEG
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: LIST
54799: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54800: LD_ADDR_VAR 0 47
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: LD_INT 3
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 3
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54833: LD_ADDR_VAR 0 48
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54864: LD_ADDR_VAR 0 49
54868: PUSH
54869: LD_INT 3
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54893: LD_ADDR_VAR 0 50
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 3
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54922: LD_ADDR_VAR 0 51
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54953: LD_ADDR_VAR 0 52
54957: PUSH
54958: LD_INT 3
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 3
54972: NEG
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54986: LD_ADDR_VAR 0 53
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 3
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: LIST
55029: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55030: LD_ADDR_VAR 0 54
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: LIST
55070: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55071: LD_ADDR_VAR 0 55
55075: PUSH
55076: LD_INT 3
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: LD_INT 3
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: LIST
55110: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55111: LD_ADDR_VAR 0 56
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 3
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 3
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: LIST
55151: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55152: LD_ADDR_VAR 0 57
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55196: LD_ADDR_VAR 0 58
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: LD_INT 3
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 3
55227: NEG
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55242: LD_ADDR_VAR 0 59
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55286: LD_ADDR_VAR 0 60
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55327: LD_ADDR_VAR 0 61
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55367: LD_ADDR_VAR 0 62
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55408: LD_ADDR_VAR 0 63
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55452: LD_ADDR_VAR 0 64
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: LIST
55497: ST_TO_ADDR
// end ; 2 :
55498: GO 58764
55500: LD_INT 2
55502: DOUBLE
55503: EQUAL
55504: IFTRUE 55508
55506: GO 58763
55508: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55509: LD_ADDR_VAR 0 29
55513: PUSH
55514: LD_INT 4
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 4
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 5
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 5
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 4
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 5
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: LD_INT 3
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 4
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 4
55639: PUSH
55640: LD_INT 4
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: LD_INT 4
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 3
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 4
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 4
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 4
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: LD_INT 4
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 5
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 5
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 4
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 3
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 5
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 3
55837: NEG
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 4
55848: NEG
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 4
55859: NEG
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 4
55871: NEG
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 4
55894: NEG
55895: PUSH
55896: LD_INT 4
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 4
55906: NEG
55907: PUSH
55908: LD_INT 5
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: NEG
55919: PUSH
55920: LD_INT 4
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: NEG
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 4
55942: NEG
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 5
55954: NEG
55955: PUSH
55956: LD_INT 4
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 5
55966: NEG
55967: PUSH
55968: LD_INT 5
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 3
55978: NEG
55979: PUSH
55980: LD_INT 5
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 5
55990: NEG
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56047: LD_ADDR_VAR 0 30
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: LD_INT 4
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 4
56064: PUSH
56065: LD_INT 3
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 5
56074: PUSH
56075: LD_INT 4
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 5
56084: PUSH
56085: LD_INT 5
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 4
56094: PUSH
56095: LD_INT 5
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 3
56104: PUSH
56105: LD_INT 4
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 3
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 5
56124: PUSH
56125: LD_INT 3
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 3
56134: PUSH
56135: LD_INT 5
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 3
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 3
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 4
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 4
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 4
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 4
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 4
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 4
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 5
56293: NEG
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 5
56304: NEG
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 5
56316: NEG
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: NEG
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 3
56351: NEG
56352: PUSH
56353: LD_INT 4
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: LD_INT 3
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: NEG
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 4
56399: NEG
56400: PUSH
56401: LD_INT 3
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 4
56411: NEG
56412: PUSH
56413: LD_INT 4
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: LD_INT 4
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 4
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 5
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 4
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 3
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 4
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 5
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: LD_INT 3
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: LD_INT 5
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56594: LD_ADDR_VAR 0 31
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 4
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 5
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 5
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 4
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 3
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 5
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 4
56750: NEG
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 4
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 4
56773: NEG
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 2
56785: NEG
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 4
56796: NEG
56797: PUSH
56798: LD_INT 4
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 4
56808: NEG
56809: PUSH
56810: LD_INT 5
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 3
56820: NEG
56821: PUSH
56822: LD_INT 4
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 3
56832: NEG
56833: PUSH
56834: LD_INT 3
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 4
56844: NEG
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 5
56856: NEG
56857: PUSH
56858: LD_INT 4
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 5
56868: NEG
56869: PUSH
56870: LD_INT 5
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 3
56880: NEG
56881: PUSH
56882: LD_INT 5
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 5
56892: NEG
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 4
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: LD_INT 4
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 4
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 4
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 4
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 5
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 5
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 4
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 5
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57144: LD_ADDR_VAR 0 32
57148: PUSH
57149: LD_INT 4
57151: NEG
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 4
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 4
57196: NEG
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 5
57207: NEG
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 5
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 5
57230: NEG
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: LD_INT 3
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: NEG
57266: PUSH
57267: LD_INT 4
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: LD_INT 3
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: NEG
57314: PUSH
57315: LD_INT 3
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 4
57325: NEG
57326: PUSH
57327: LD_INT 4
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 4
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 4
57349: NEG
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 4
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 5
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: LD_INT 4
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: LD_INT 3
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 4
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 5
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 3
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 4
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 4
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 4
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 4
57556: PUSH
57557: LD_INT 4
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 4
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 5
57576: PUSH
57577: LD_INT 4
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 5
57586: PUSH
57587: LD_INT 5
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 4
57596: PUSH
57597: LD_INT 5
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: LD_INT 4
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: LD_INT 3
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 5
57626: PUSH
57627: LD_INT 3
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: LD_INT 5
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57691: LD_ADDR_VAR 0 33
57695: PUSH
57696: LD_INT 4
57698: NEG
57699: PUSH
57700: LD_INT 4
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: LD_INT 5
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 3
57722: NEG
57723: PUSH
57724: LD_INT 4
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 4
57746: NEG
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 5
57758: NEG
57759: PUSH
57760: LD_INT 4
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 5
57770: NEG
57771: PUSH
57772: LD_INT 5
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: LD_INT 5
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 5
57794: NEG
57795: PUSH
57796: LD_INT 3
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 4
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 3
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: LD_INT 4
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: LD_INT 4
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 4
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 5
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 3
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 5
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 3
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 4
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 4
58031: PUSH
58032: LD_INT 4
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 3
58041: PUSH
58042: LD_INT 4
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 4
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: LD_INT 4
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 4
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 4
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: LD_INT 5
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: LD_INT 5
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: LD_INT 4
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: LD_INT 5
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58229: LD_ADDR_VAR 0 34
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 4
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 5
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 4
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 3
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: LD_INT 3
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 4
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 5
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: LD_INT 3
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 5
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 3
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 4
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 4
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 4
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 4
58431: PUSH
58432: LD_INT 4
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 4
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 5
58451: PUSH
58452: LD_INT 4
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 5
58461: PUSH
58462: LD_INT 5
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 4
58471: PUSH
58472: LD_INT 5
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 3
58481: PUSH
58482: LD_INT 4
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 3
58491: PUSH
58492: LD_INT 3
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 5
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: LD_INT 5
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: LD_INT 4
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 4
58614: NEG
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 4
58625: NEG
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 3
58637: NEG
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 4
58659: NEG
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 5
58670: NEG
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 5
58681: NEG
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 5
58693: NEG
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 3
58705: NEG
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: ST_TO_ADDR
// end ; end ;
58761: GO 58764
58763: POP
// case btype of b_depot , b_warehouse :
58764: LD_VAR 0 1
58768: PUSH
58769: LD_INT 0
58771: DOUBLE
58772: EQUAL
58773: IFTRUE 58783
58775: LD_INT 1
58777: DOUBLE
58778: EQUAL
58779: IFTRUE 58783
58781: GO 58984
58783: POP
// case nation of nation_american :
58784: LD_VAR 0 5
58788: PUSH
58789: LD_INT 1
58791: DOUBLE
58792: EQUAL
58793: IFTRUE 58797
58795: GO 58853
58797: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58798: LD_ADDR_VAR 0 9
58802: PUSH
58803: LD_VAR 0 11
58807: PUSH
58808: LD_VAR 0 12
58812: PUSH
58813: LD_VAR 0 13
58817: PUSH
58818: LD_VAR 0 14
58822: PUSH
58823: LD_VAR 0 15
58827: PUSH
58828: LD_VAR 0 16
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: PUSH
58841: LD_VAR 0 4
58845: PUSH
58846: LD_INT 1
58848: PLUS
58849: ARRAY
58850: ST_TO_ADDR
58851: GO 58982
58853: LD_INT 2
58855: DOUBLE
58856: EQUAL
58857: IFTRUE 58861
58859: GO 58917
58861: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58862: LD_ADDR_VAR 0 9
58866: PUSH
58867: LD_VAR 0 17
58871: PUSH
58872: LD_VAR 0 18
58876: PUSH
58877: LD_VAR 0 19
58881: PUSH
58882: LD_VAR 0 20
58886: PUSH
58887: LD_VAR 0 21
58891: PUSH
58892: LD_VAR 0 22
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: PUSH
58905: LD_VAR 0 4
58909: PUSH
58910: LD_INT 1
58912: PLUS
58913: ARRAY
58914: ST_TO_ADDR
58915: GO 58982
58917: LD_INT 3
58919: DOUBLE
58920: EQUAL
58921: IFTRUE 58925
58923: GO 58981
58925: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58926: LD_ADDR_VAR 0 9
58930: PUSH
58931: LD_VAR 0 23
58935: PUSH
58936: LD_VAR 0 24
58940: PUSH
58941: LD_VAR 0 25
58945: PUSH
58946: LD_VAR 0 26
58950: PUSH
58951: LD_VAR 0 27
58955: PUSH
58956: LD_VAR 0 28
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: PUSH
58969: LD_VAR 0 4
58973: PUSH
58974: LD_INT 1
58976: PLUS
58977: ARRAY
58978: ST_TO_ADDR
58979: GO 58982
58981: POP
58982: GO 59537
58984: LD_INT 2
58986: DOUBLE
58987: EQUAL
58988: IFTRUE 58998
58990: LD_INT 3
58992: DOUBLE
58993: EQUAL
58994: IFTRUE 58998
58996: GO 59054
58998: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58999: LD_ADDR_VAR 0 9
59003: PUSH
59004: LD_VAR 0 29
59008: PUSH
59009: LD_VAR 0 30
59013: PUSH
59014: LD_VAR 0 31
59018: PUSH
59019: LD_VAR 0 32
59023: PUSH
59024: LD_VAR 0 33
59028: PUSH
59029: LD_VAR 0 34
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: PUSH
59042: LD_VAR 0 4
59046: PUSH
59047: LD_INT 1
59049: PLUS
59050: ARRAY
59051: ST_TO_ADDR
59052: GO 59537
59054: LD_INT 16
59056: DOUBLE
59057: EQUAL
59058: IFTRUE 59116
59060: LD_INT 17
59062: DOUBLE
59063: EQUAL
59064: IFTRUE 59116
59066: LD_INT 18
59068: DOUBLE
59069: EQUAL
59070: IFTRUE 59116
59072: LD_INT 19
59074: DOUBLE
59075: EQUAL
59076: IFTRUE 59116
59078: LD_INT 22
59080: DOUBLE
59081: EQUAL
59082: IFTRUE 59116
59084: LD_INT 20
59086: DOUBLE
59087: EQUAL
59088: IFTRUE 59116
59090: LD_INT 21
59092: DOUBLE
59093: EQUAL
59094: IFTRUE 59116
59096: LD_INT 23
59098: DOUBLE
59099: EQUAL
59100: IFTRUE 59116
59102: LD_INT 24
59104: DOUBLE
59105: EQUAL
59106: IFTRUE 59116
59108: LD_INT 25
59110: DOUBLE
59111: EQUAL
59112: IFTRUE 59116
59114: GO 59172
59116: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59117: LD_ADDR_VAR 0 9
59121: PUSH
59122: LD_VAR 0 35
59126: PUSH
59127: LD_VAR 0 36
59131: PUSH
59132: LD_VAR 0 37
59136: PUSH
59137: LD_VAR 0 38
59141: PUSH
59142: LD_VAR 0 39
59146: PUSH
59147: LD_VAR 0 40
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: PUSH
59160: LD_VAR 0 4
59164: PUSH
59165: LD_INT 1
59167: PLUS
59168: ARRAY
59169: ST_TO_ADDR
59170: GO 59537
59172: LD_INT 6
59174: DOUBLE
59175: EQUAL
59176: IFTRUE 59228
59178: LD_INT 7
59180: DOUBLE
59181: EQUAL
59182: IFTRUE 59228
59184: LD_INT 8
59186: DOUBLE
59187: EQUAL
59188: IFTRUE 59228
59190: LD_INT 13
59192: DOUBLE
59193: EQUAL
59194: IFTRUE 59228
59196: LD_INT 12
59198: DOUBLE
59199: EQUAL
59200: IFTRUE 59228
59202: LD_INT 15
59204: DOUBLE
59205: EQUAL
59206: IFTRUE 59228
59208: LD_INT 11
59210: DOUBLE
59211: EQUAL
59212: IFTRUE 59228
59214: LD_INT 14
59216: DOUBLE
59217: EQUAL
59218: IFTRUE 59228
59220: LD_INT 10
59222: DOUBLE
59223: EQUAL
59224: IFTRUE 59228
59226: GO 59284
59228: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59229: LD_ADDR_VAR 0 9
59233: PUSH
59234: LD_VAR 0 41
59238: PUSH
59239: LD_VAR 0 42
59243: PUSH
59244: LD_VAR 0 43
59248: PUSH
59249: LD_VAR 0 44
59253: PUSH
59254: LD_VAR 0 45
59258: PUSH
59259: LD_VAR 0 46
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: PUSH
59272: LD_VAR 0 4
59276: PUSH
59277: LD_INT 1
59279: PLUS
59280: ARRAY
59281: ST_TO_ADDR
59282: GO 59537
59284: LD_INT 36
59286: DOUBLE
59287: EQUAL
59288: IFTRUE 59292
59290: GO 59348
59292: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59293: LD_ADDR_VAR 0 9
59297: PUSH
59298: LD_VAR 0 47
59302: PUSH
59303: LD_VAR 0 48
59307: PUSH
59308: LD_VAR 0 49
59312: PUSH
59313: LD_VAR 0 50
59317: PUSH
59318: LD_VAR 0 51
59322: PUSH
59323: LD_VAR 0 52
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: PUSH
59336: LD_VAR 0 4
59340: PUSH
59341: LD_INT 1
59343: PLUS
59344: ARRAY
59345: ST_TO_ADDR
59346: GO 59537
59348: LD_INT 4
59350: DOUBLE
59351: EQUAL
59352: IFTRUE 59374
59354: LD_INT 5
59356: DOUBLE
59357: EQUAL
59358: IFTRUE 59374
59360: LD_INT 34
59362: DOUBLE
59363: EQUAL
59364: IFTRUE 59374
59366: LD_INT 37
59368: DOUBLE
59369: EQUAL
59370: IFTRUE 59374
59372: GO 59430
59374: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59375: LD_ADDR_VAR 0 9
59379: PUSH
59380: LD_VAR 0 53
59384: PUSH
59385: LD_VAR 0 54
59389: PUSH
59390: LD_VAR 0 55
59394: PUSH
59395: LD_VAR 0 56
59399: PUSH
59400: LD_VAR 0 57
59404: PUSH
59405: LD_VAR 0 58
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: PUSH
59418: LD_VAR 0 4
59422: PUSH
59423: LD_INT 1
59425: PLUS
59426: ARRAY
59427: ST_TO_ADDR
59428: GO 59537
59430: LD_INT 31
59432: DOUBLE
59433: EQUAL
59434: IFTRUE 59480
59436: LD_INT 32
59438: DOUBLE
59439: EQUAL
59440: IFTRUE 59480
59442: LD_INT 33
59444: DOUBLE
59445: EQUAL
59446: IFTRUE 59480
59448: LD_INT 27
59450: DOUBLE
59451: EQUAL
59452: IFTRUE 59480
59454: LD_INT 26
59456: DOUBLE
59457: EQUAL
59458: IFTRUE 59480
59460: LD_INT 28
59462: DOUBLE
59463: EQUAL
59464: IFTRUE 59480
59466: LD_INT 29
59468: DOUBLE
59469: EQUAL
59470: IFTRUE 59480
59472: LD_INT 30
59474: DOUBLE
59475: EQUAL
59476: IFTRUE 59480
59478: GO 59536
59480: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59481: LD_ADDR_VAR 0 9
59485: PUSH
59486: LD_VAR 0 59
59490: PUSH
59491: LD_VAR 0 60
59495: PUSH
59496: LD_VAR 0 61
59500: PUSH
59501: LD_VAR 0 62
59505: PUSH
59506: LD_VAR 0 63
59510: PUSH
59511: LD_VAR 0 64
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: PUSH
59524: LD_VAR 0 4
59528: PUSH
59529: LD_INT 1
59531: PLUS
59532: ARRAY
59533: ST_TO_ADDR
59534: GO 59537
59536: POP
// temp_list2 = [ ] ;
59537: LD_ADDR_VAR 0 10
59541: PUSH
59542: EMPTY
59543: ST_TO_ADDR
// for i in temp_list do
59544: LD_ADDR_VAR 0 8
59548: PUSH
59549: LD_VAR 0 9
59553: PUSH
59554: FOR_IN
59555: IFFALSE 59607
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59557: LD_ADDR_VAR 0 10
59561: PUSH
59562: LD_VAR 0 10
59566: PUSH
59567: LD_VAR 0 8
59571: PUSH
59572: LD_INT 1
59574: ARRAY
59575: PUSH
59576: LD_VAR 0 2
59580: PLUS
59581: PUSH
59582: LD_VAR 0 8
59586: PUSH
59587: LD_INT 2
59589: ARRAY
59590: PUSH
59591: LD_VAR 0 3
59595: PLUS
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: EMPTY
59602: LIST
59603: ADD
59604: ST_TO_ADDR
59605: GO 59554
59607: POP
59608: POP
// result = temp_list2 ;
59609: LD_ADDR_VAR 0 7
59613: PUSH
59614: LD_VAR 0 10
59618: ST_TO_ADDR
// end ;
59619: LD_VAR 0 7
59623: RET
// export function EnemyInRange ( unit , dist ) ; begin
59624: LD_INT 0
59626: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59627: LD_ADDR_VAR 0 3
59631: PUSH
59632: LD_VAR 0 1
59636: PPUSH
59637: CALL_OW 255
59641: PPUSH
59642: LD_VAR 0 1
59646: PPUSH
59647: CALL_OW 250
59651: PPUSH
59652: LD_VAR 0 1
59656: PPUSH
59657: CALL_OW 251
59661: PPUSH
59662: LD_VAR 0 2
59666: PPUSH
59667: CALL 33026 0 4
59671: PUSH
59672: LD_INT 4
59674: ARRAY
59675: ST_TO_ADDR
// end ;
59676: LD_VAR 0 3
59680: RET
// export function PlayerSeeMe ( unit ) ; begin
59681: LD_INT 0
59683: PPUSH
// result := See ( your_side , unit ) ;
59684: LD_ADDR_VAR 0 2
59688: PUSH
59689: LD_OWVAR 2
59693: PPUSH
59694: LD_VAR 0 1
59698: PPUSH
59699: CALL_OW 292
59703: ST_TO_ADDR
// end ;
59704: LD_VAR 0 2
59708: RET
// export function ReverseDir ( unit ) ; begin
59709: LD_INT 0
59711: PPUSH
// if not unit then
59712: LD_VAR 0 1
59716: NOT
59717: IFFALSE 59721
// exit ;
59719: GO 59744
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59721: LD_ADDR_VAR 0 2
59725: PUSH
59726: LD_VAR 0 1
59730: PPUSH
59731: CALL_OW 254
59735: PUSH
59736: LD_INT 3
59738: PLUS
59739: PUSH
59740: LD_INT 6
59742: MOD
59743: ST_TO_ADDR
// end ;
59744: LD_VAR 0 2
59748: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59749: LD_INT 0
59751: PPUSH
59752: PPUSH
59753: PPUSH
59754: PPUSH
59755: PPUSH
59756: PPUSH
// if not unit or not hexes then
59757: LD_VAR 0 1
59761: NOT
59762: PUSH
59763: LD_VAR 0 2
59767: NOT
59768: OR
59769: IFFALSE 59773
// exit ;
59771: GO 59896
// dist := 9999 ;
59773: LD_ADDR_VAR 0 5
59777: PUSH
59778: LD_INT 9999
59780: ST_TO_ADDR
// for i = 1 to hexes do
59781: LD_ADDR_VAR 0 4
59785: PUSH
59786: DOUBLE
59787: LD_INT 1
59789: DEC
59790: ST_TO_ADDR
59791: LD_VAR 0 2
59795: PUSH
59796: FOR_TO
59797: IFFALSE 59884
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59799: LD_ADDR_VAR 0 6
59803: PUSH
59804: LD_VAR 0 1
59808: PPUSH
59809: LD_VAR 0 2
59813: PUSH
59814: LD_VAR 0 4
59818: ARRAY
59819: PUSH
59820: LD_INT 1
59822: ARRAY
59823: PPUSH
59824: LD_VAR 0 2
59828: PUSH
59829: LD_VAR 0 4
59833: ARRAY
59834: PUSH
59835: LD_INT 2
59837: ARRAY
59838: PPUSH
59839: CALL_OW 297
59843: ST_TO_ADDR
// if tdist < dist then
59844: LD_VAR 0 6
59848: PUSH
59849: LD_VAR 0 5
59853: LESS
59854: IFFALSE 59882
// begin hex := hexes [ i ] ;
59856: LD_ADDR_VAR 0 8
59860: PUSH
59861: LD_VAR 0 2
59865: PUSH
59866: LD_VAR 0 4
59870: ARRAY
59871: ST_TO_ADDR
// dist := tdist ;
59872: LD_ADDR_VAR 0 5
59876: PUSH
59877: LD_VAR 0 6
59881: ST_TO_ADDR
// end ; end ;
59882: GO 59796
59884: POP
59885: POP
// result := hex ;
59886: LD_ADDR_VAR 0 3
59890: PUSH
59891: LD_VAR 0 8
59895: ST_TO_ADDR
// end ;
59896: LD_VAR 0 3
59900: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59901: LD_INT 0
59903: PPUSH
59904: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59905: LD_VAR 0 1
59909: NOT
59910: PUSH
59911: LD_VAR 0 1
59915: PUSH
59916: LD_INT 21
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 23
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PPUSH
59940: CALL_OW 69
59944: IN
59945: NOT
59946: OR
59947: IFFALSE 59951
// exit ;
59949: GO 59998
// for i = 1 to 3 do
59951: LD_ADDR_VAR 0 3
59955: PUSH
59956: DOUBLE
59957: LD_INT 1
59959: DEC
59960: ST_TO_ADDR
59961: LD_INT 3
59963: PUSH
59964: FOR_TO
59965: IFFALSE 59996
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59967: LD_VAR 0 1
59971: PPUSH
59972: CALL_OW 250
59976: PPUSH
59977: LD_VAR 0 1
59981: PPUSH
59982: CALL_OW 251
59986: PPUSH
59987: LD_INT 1
59989: PPUSH
59990: CALL_OW 453
59994: GO 59964
59996: POP
59997: POP
// end ;
59998: LD_VAR 0 2
60002: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60003: LD_INT 0
60005: PPUSH
60006: PPUSH
60007: PPUSH
60008: PPUSH
60009: PPUSH
60010: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60011: LD_VAR 0 1
60015: NOT
60016: PUSH
60017: LD_VAR 0 2
60021: NOT
60022: OR
60023: PUSH
60024: LD_VAR 0 1
60028: PPUSH
60029: CALL_OW 314
60033: OR
60034: IFFALSE 60038
// exit ;
60036: GO 60479
// x := GetX ( enemy_unit ) ;
60038: LD_ADDR_VAR 0 7
60042: PUSH
60043: LD_VAR 0 2
60047: PPUSH
60048: CALL_OW 250
60052: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60053: LD_ADDR_VAR 0 8
60057: PUSH
60058: LD_VAR 0 2
60062: PPUSH
60063: CALL_OW 251
60067: ST_TO_ADDR
// if not x or not y then
60068: LD_VAR 0 7
60072: NOT
60073: PUSH
60074: LD_VAR 0 8
60078: NOT
60079: OR
60080: IFFALSE 60084
// exit ;
60082: GO 60479
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60084: LD_ADDR_VAR 0 6
60088: PUSH
60089: LD_VAR 0 7
60093: PPUSH
60094: LD_INT 0
60096: PPUSH
60097: LD_INT 4
60099: PPUSH
60100: CALL_OW 272
60104: PUSH
60105: LD_VAR 0 8
60109: PPUSH
60110: LD_INT 0
60112: PPUSH
60113: LD_INT 4
60115: PPUSH
60116: CALL_OW 273
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_VAR 0 7
60129: PPUSH
60130: LD_INT 1
60132: PPUSH
60133: LD_INT 4
60135: PPUSH
60136: CALL_OW 272
60140: PUSH
60141: LD_VAR 0 8
60145: PPUSH
60146: LD_INT 1
60148: PPUSH
60149: LD_INT 4
60151: PPUSH
60152: CALL_OW 273
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_VAR 0 7
60165: PPUSH
60166: LD_INT 2
60168: PPUSH
60169: LD_INT 4
60171: PPUSH
60172: CALL_OW 272
60176: PUSH
60177: LD_VAR 0 8
60181: PPUSH
60182: LD_INT 2
60184: PPUSH
60185: LD_INT 4
60187: PPUSH
60188: CALL_OW 273
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_VAR 0 7
60201: PPUSH
60202: LD_INT 3
60204: PPUSH
60205: LD_INT 4
60207: PPUSH
60208: CALL_OW 272
60212: PUSH
60213: LD_VAR 0 8
60217: PPUSH
60218: LD_INT 3
60220: PPUSH
60221: LD_INT 4
60223: PPUSH
60224: CALL_OW 273
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_VAR 0 7
60237: PPUSH
60238: LD_INT 4
60240: PPUSH
60241: LD_INT 4
60243: PPUSH
60244: CALL_OW 272
60248: PUSH
60249: LD_VAR 0 8
60253: PPUSH
60254: LD_INT 4
60256: PPUSH
60257: LD_INT 4
60259: PPUSH
60260: CALL_OW 273
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_VAR 0 7
60273: PPUSH
60274: LD_INT 5
60276: PPUSH
60277: LD_INT 4
60279: PPUSH
60280: CALL_OW 272
60284: PUSH
60285: LD_VAR 0 8
60289: PPUSH
60290: LD_INT 5
60292: PPUSH
60293: LD_INT 4
60295: PPUSH
60296: CALL_OW 273
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: ST_TO_ADDR
// for i = tmp downto 1 do
60313: LD_ADDR_VAR 0 4
60317: PUSH
60318: DOUBLE
60319: LD_VAR 0 6
60323: INC
60324: ST_TO_ADDR
60325: LD_INT 1
60327: PUSH
60328: FOR_DOWNTO
60329: IFFALSE 60430
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60331: LD_VAR 0 6
60335: PUSH
60336: LD_VAR 0 4
60340: ARRAY
60341: PUSH
60342: LD_INT 1
60344: ARRAY
60345: PPUSH
60346: LD_VAR 0 6
60350: PUSH
60351: LD_VAR 0 4
60355: ARRAY
60356: PUSH
60357: LD_INT 2
60359: ARRAY
60360: PPUSH
60361: CALL_OW 488
60365: NOT
60366: PUSH
60367: LD_VAR 0 6
60371: PUSH
60372: LD_VAR 0 4
60376: ARRAY
60377: PUSH
60378: LD_INT 1
60380: ARRAY
60381: PPUSH
60382: LD_VAR 0 6
60386: PUSH
60387: LD_VAR 0 4
60391: ARRAY
60392: PUSH
60393: LD_INT 2
60395: ARRAY
60396: PPUSH
60397: CALL_OW 428
60401: PUSH
60402: LD_INT 0
60404: NONEQUAL
60405: OR
60406: IFFALSE 60428
// tmp := Delete ( tmp , i ) ;
60408: LD_ADDR_VAR 0 6
60412: PUSH
60413: LD_VAR 0 6
60417: PPUSH
60418: LD_VAR 0 4
60422: PPUSH
60423: CALL_OW 3
60427: ST_TO_ADDR
60428: GO 60328
60430: POP
60431: POP
// j := GetClosestHex ( unit , tmp ) ;
60432: LD_ADDR_VAR 0 5
60436: PUSH
60437: LD_VAR 0 1
60441: PPUSH
60442: LD_VAR 0 6
60446: PPUSH
60447: CALL 59749 0 2
60451: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60452: LD_VAR 0 1
60456: PPUSH
60457: LD_VAR 0 5
60461: PUSH
60462: LD_INT 1
60464: ARRAY
60465: PPUSH
60466: LD_VAR 0 5
60470: PUSH
60471: LD_INT 2
60473: ARRAY
60474: PPUSH
60475: CALL_OW 111
// end ;
60479: LD_VAR 0 3
60483: RET
// export function PrepareApemanSoldier ( ) ; begin
60484: LD_INT 0
60486: PPUSH
// uc_nation := 0 ;
60487: LD_ADDR_OWVAR 21
60491: PUSH
60492: LD_INT 0
60494: ST_TO_ADDR
// hc_sex := sex_male ;
60495: LD_ADDR_OWVAR 27
60499: PUSH
60500: LD_INT 1
60502: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60503: LD_ADDR_OWVAR 28
60507: PUSH
60508: LD_INT 15
60510: ST_TO_ADDR
// hc_gallery :=  ;
60511: LD_ADDR_OWVAR 33
60515: PUSH
60516: LD_STRING 
60518: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60519: LD_ADDR_OWVAR 31
60523: PUSH
60524: LD_INT 0
60526: PPUSH
60527: LD_INT 3
60529: PPUSH
60530: CALL_OW 12
60534: PUSH
60535: LD_INT 0
60537: PPUSH
60538: LD_INT 3
60540: PPUSH
60541: CALL_OW 12
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: ST_TO_ADDR
// end ;
60558: LD_VAR 0 1
60562: RET
// export function PrepareApemanEngineer ( ) ; begin
60563: LD_INT 0
60565: PPUSH
// uc_nation := 0 ;
60566: LD_ADDR_OWVAR 21
60570: PUSH
60571: LD_INT 0
60573: ST_TO_ADDR
// hc_sex := sex_male ;
60574: LD_ADDR_OWVAR 27
60578: PUSH
60579: LD_INT 1
60581: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60582: LD_ADDR_OWVAR 28
60586: PUSH
60587: LD_INT 16
60589: ST_TO_ADDR
// hc_gallery :=  ;
60590: LD_ADDR_OWVAR 33
60594: PUSH
60595: LD_STRING 
60597: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60598: LD_ADDR_OWVAR 31
60602: PUSH
60603: LD_INT 0
60605: PPUSH
60606: LD_INT 3
60608: PPUSH
60609: CALL_OW 12
60613: PUSH
60614: LD_INT 0
60616: PPUSH
60617: LD_INT 3
60619: PPUSH
60620: CALL_OW 12
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: ST_TO_ADDR
// end ;
60637: LD_VAR 0 1
60641: RET
// export function PrepareApeman ( agressivity ) ; begin
60642: LD_INT 0
60644: PPUSH
// uc_side := 0 ;
60645: LD_ADDR_OWVAR 20
60649: PUSH
60650: LD_INT 0
60652: ST_TO_ADDR
// uc_nation := 0 ;
60653: LD_ADDR_OWVAR 21
60657: PUSH
60658: LD_INT 0
60660: ST_TO_ADDR
// hc_sex := sex_male ;
60661: LD_ADDR_OWVAR 27
60665: PUSH
60666: LD_INT 1
60668: ST_TO_ADDR
// hc_class := class_apeman ;
60669: LD_ADDR_OWVAR 28
60673: PUSH
60674: LD_INT 12
60676: ST_TO_ADDR
// hc_gallery :=  ;
60677: LD_ADDR_OWVAR 33
60681: PUSH
60682: LD_STRING 
60684: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60685: LD_ADDR_OWVAR 35
60689: PUSH
60690: LD_VAR 0 1
60694: NEG
60695: PPUSH
60696: LD_VAR 0 1
60700: PPUSH
60701: CALL_OW 12
60705: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60706: LD_ADDR_OWVAR 31
60710: PUSH
60711: LD_INT 0
60713: PPUSH
60714: LD_INT 3
60716: PPUSH
60717: CALL_OW 12
60721: PUSH
60722: LD_INT 0
60724: PPUSH
60725: LD_INT 3
60727: PPUSH
60728: CALL_OW 12
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: ST_TO_ADDR
// end ;
60745: LD_VAR 0 2
60749: RET
// export function PrepareTiger ( agressivity ) ; begin
60750: LD_INT 0
60752: PPUSH
// uc_side := 0 ;
60753: LD_ADDR_OWVAR 20
60757: PUSH
60758: LD_INT 0
60760: ST_TO_ADDR
// uc_nation := 0 ;
60761: LD_ADDR_OWVAR 21
60765: PUSH
60766: LD_INT 0
60768: ST_TO_ADDR
// hc_class := class_tiger ;
60769: LD_ADDR_OWVAR 28
60773: PUSH
60774: LD_INT 14
60776: ST_TO_ADDR
// hc_gallery :=  ;
60777: LD_ADDR_OWVAR 33
60781: PUSH
60782: LD_STRING 
60784: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60785: LD_ADDR_OWVAR 35
60789: PUSH
60790: LD_VAR 0 1
60794: NEG
60795: PPUSH
60796: LD_VAR 0 1
60800: PPUSH
60801: CALL_OW 12
60805: ST_TO_ADDR
// end ;
60806: LD_VAR 0 2
60810: RET
// export function PrepareEnchidna ( ) ; begin
60811: LD_INT 0
60813: PPUSH
// uc_side := 0 ;
60814: LD_ADDR_OWVAR 20
60818: PUSH
60819: LD_INT 0
60821: ST_TO_ADDR
// uc_nation := 0 ;
60822: LD_ADDR_OWVAR 21
60826: PUSH
60827: LD_INT 0
60829: ST_TO_ADDR
// hc_class := class_baggie ;
60830: LD_ADDR_OWVAR 28
60834: PUSH
60835: LD_INT 13
60837: ST_TO_ADDR
// hc_gallery :=  ;
60838: LD_ADDR_OWVAR 33
60842: PUSH
60843: LD_STRING 
60845: ST_TO_ADDR
// end ;
60846: LD_VAR 0 1
60850: RET
// export function PrepareFrog ( ) ; begin
60851: LD_INT 0
60853: PPUSH
// uc_side := 0 ;
60854: LD_ADDR_OWVAR 20
60858: PUSH
60859: LD_INT 0
60861: ST_TO_ADDR
// uc_nation := 0 ;
60862: LD_ADDR_OWVAR 21
60866: PUSH
60867: LD_INT 0
60869: ST_TO_ADDR
// hc_class := class_frog ;
60870: LD_ADDR_OWVAR 28
60874: PUSH
60875: LD_INT 19
60877: ST_TO_ADDR
// hc_gallery :=  ;
60878: LD_ADDR_OWVAR 33
60882: PUSH
60883: LD_STRING 
60885: ST_TO_ADDR
// end ;
60886: LD_VAR 0 1
60890: RET
// export function PrepareFish ( ) ; begin
60891: LD_INT 0
60893: PPUSH
// uc_side := 0 ;
60894: LD_ADDR_OWVAR 20
60898: PUSH
60899: LD_INT 0
60901: ST_TO_ADDR
// uc_nation := 0 ;
60902: LD_ADDR_OWVAR 21
60906: PUSH
60907: LD_INT 0
60909: ST_TO_ADDR
// hc_class := class_fish ;
60910: LD_ADDR_OWVAR 28
60914: PUSH
60915: LD_INT 20
60917: ST_TO_ADDR
// hc_gallery :=  ;
60918: LD_ADDR_OWVAR 33
60922: PUSH
60923: LD_STRING 
60925: ST_TO_ADDR
// end ;
60926: LD_VAR 0 1
60930: RET
// export function PrepareBird ( ) ; begin
60931: LD_INT 0
60933: PPUSH
// uc_side := 0 ;
60934: LD_ADDR_OWVAR 20
60938: PUSH
60939: LD_INT 0
60941: ST_TO_ADDR
// uc_nation := 0 ;
60942: LD_ADDR_OWVAR 21
60946: PUSH
60947: LD_INT 0
60949: ST_TO_ADDR
// hc_class := class_phororhacos ;
60950: LD_ADDR_OWVAR 28
60954: PUSH
60955: LD_INT 18
60957: ST_TO_ADDR
// hc_gallery :=  ;
60958: LD_ADDR_OWVAR 33
60962: PUSH
60963: LD_STRING 
60965: ST_TO_ADDR
// end ;
60966: LD_VAR 0 1
60970: RET
// export function PrepareHorse ( ) ; begin
60971: LD_INT 0
60973: PPUSH
// uc_side := 0 ;
60974: LD_ADDR_OWVAR 20
60978: PUSH
60979: LD_INT 0
60981: ST_TO_ADDR
// uc_nation := 0 ;
60982: LD_ADDR_OWVAR 21
60986: PUSH
60987: LD_INT 0
60989: ST_TO_ADDR
// hc_class := class_horse ;
60990: LD_ADDR_OWVAR 28
60994: PUSH
60995: LD_INT 21
60997: ST_TO_ADDR
// hc_gallery :=  ;
60998: LD_ADDR_OWVAR 33
61002: PUSH
61003: LD_STRING 
61005: ST_TO_ADDR
// end ;
61006: LD_VAR 0 1
61010: RET
// export function PrepareMastodont ( ) ; begin
61011: LD_INT 0
61013: PPUSH
// uc_side := 0 ;
61014: LD_ADDR_OWVAR 20
61018: PUSH
61019: LD_INT 0
61021: ST_TO_ADDR
// uc_nation := 0 ;
61022: LD_ADDR_OWVAR 21
61026: PUSH
61027: LD_INT 0
61029: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61030: LD_ADDR_OWVAR 37
61034: PUSH
61035: LD_INT 31
61037: ST_TO_ADDR
// vc_control := control_rider ;
61038: LD_ADDR_OWVAR 38
61042: PUSH
61043: LD_INT 4
61045: ST_TO_ADDR
// end ;
61046: LD_VAR 0 1
61050: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61051: LD_INT 0
61053: PPUSH
61054: PPUSH
61055: PPUSH
// uc_side = 0 ;
61056: LD_ADDR_OWVAR 20
61060: PUSH
61061: LD_INT 0
61063: ST_TO_ADDR
// uc_nation = 0 ;
61064: LD_ADDR_OWVAR 21
61068: PUSH
61069: LD_INT 0
61071: ST_TO_ADDR
// InitHc_All ( ) ;
61072: CALL_OW 584
// InitVc ;
61076: CALL_OW 20
// if mastodonts then
61080: LD_VAR 0 6
61084: IFFALSE 61151
// for i = 1 to mastodonts do
61086: LD_ADDR_VAR 0 11
61090: PUSH
61091: DOUBLE
61092: LD_INT 1
61094: DEC
61095: ST_TO_ADDR
61096: LD_VAR 0 6
61100: PUSH
61101: FOR_TO
61102: IFFALSE 61149
// begin vc_chassis := 31 ;
61104: LD_ADDR_OWVAR 37
61108: PUSH
61109: LD_INT 31
61111: ST_TO_ADDR
// vc_control := control_rider ;
61112: LD_ADDR_OWVAR 38
61116: PUSH
61117: LD_INT 4
61119: ST_TO_ADDR
// animal := CreateVehicle ;
61120: LD_ADDR_VAR 0 12
61124: PUSH
61125: CALL_OW 45
61129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61130: LD_VAR 0 12
61134: PPUSH
61135: LD_VAR 0 8
61139: PPUSH
61140: LD_INT 0
61142: PPUSH
61143: CALL 63286 0 3
// end ;
61147: GO 61101
61149: POP
61150: POP
// if horses then
61151: LD_VAR 0 5
61155: IFFALSE 61222
// for i = 1 to horses do
61157: LD_ADDR_VAR 0 11
61161: PUSH
61162: DOUBLE
61163: LD_INT 1
61165: DEC
61166: ST_TO_ADDR
61167: LD_VAR 0 5
61171: PUSH
61172: FOR_TO
61173: IFFALSE 61220
// begin hc_class := 21 ;
61175: LD_ADDR_OWVAR 28
61179: PUSH
61180: LD_INT 21
61182: ST_TO_ADDR
// hc_gallery :=  ;
61183: LD_ADDR_OWVAR 33
61187: PUSH
61188: LD_STRING 
61190: ST_TO_ADDR
// animal := CreateHuman ;
61191: LD_ADDR_VAR 0 12
61195: PUSH
61196: CALL_OW 44
61200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61201: LD_VAR 0 12
61205: PPUSH
61206: LD_VAR 0 8
61210: PPUSH
61211: LD_INT 0
61213: PPUSH
61214: CALL 63286 0 3
// end ;
61218: GO 61172
61220: POP
61221: POP
// if birds then
61222: LD_VAR 0 1
61226: IFFALSE 61293
// for i = 1 to birds do
61228: LD_ADDR_VAR 0 11
61232: PUSH
61233: DOUBLE
61234: LD_INT 1
61236: DEC
61237: ST_TO_ADDR
61238: LD_VAR 0 1
61242: PUSH
61243: FOR_TO
61244: IFFALSE 61291
// begin hc_class = 18 ;
61246: LD_ADDR_OWVAR 28
61250: PUSH
61251: LD_INT 18
61253: ST_TO_ADDR
// hc_gallery =  ;
61254: LD_ADDR_OWVAR 33
61258: PUSH
61259: LD_STRING 
61261: ST_TO_ADDR
// animal := CreateHuman ;
61262: LD_ADDR_VAR 0 12
61266: PUSH
61267: CALL_OW 44
61271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61272: LD_VAR 0 12
61276: PPUSH
61277: LD_VAR 0 8
61281: PPUSH
61282: LD_INT 0
61284: PPUSH
61285: CALL 63286 0 3
// end ;
61289: GO 61243
61291: POP
61292: POP
// if tigers then
61293: LD_VAR 0 2
61297: IFFALSE 61381
// for i = 1 to tigers do
61299: LD_ADDR_VAR 0 11
61303: PUSH
61304: DOUBLE
61305: LD_INT 1
61307: DEC
61308: ST_TO_ADDR
61309: LD_VAR 0 2
61313: PUSH
61314: FOR_TO
61315: IFFALSE 61379
// begin hc_class = class_tiger ;
61317: LD_ADDR_OWVAR 28
61321: PUSH
61322: LD_INT 14
61324: ST_TO_ADDR
// hc_gallery =  ;
61325: LD_ADDR_OWVAR 33
61329: PUSH
61330: LD_STRING 
61332: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61333: LD_ADDR_OWVAR 35
61337: PUSH
61338: LD_INT 7
61340: NEG
61341: PPUSH
61342: LD_INT 7
61344: PPUSH
61345: CALL_OW 12
61349: ST_TO_ADDR
// animal := CreateHuman ;
61350: LD_ADDR_VAR 0 12
61354: PUSH
61355: CALL_OW 44
61359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61360: LD_VAR 0 12
61364: PPUSH
61365: LD_VAR 0 8
61369: PPUSH
61370: LD_INT 0
61372: PPUSH
61373: CALL 63286 0 3
// end ;
61377: GO 61314
61379: POP
61380: POP
// if apemans then
61381: LD_VAR 0 3
61385: IFFALSE 61508
// for i = 1 to apemans do
61387: LD_ADDR_VAR 0 11
61391: PUSH
61392: DOUBLE
61393: LD_INT 1
61395: DEC
61396: ST_TO_ADDR
61397: LD_VAR 0 3
61401: PUSH
61402: FOR_TO
61403: IFFALSE 61506
// begin hc_class = class_apeman ;
61405: LD_ADDR_OWVAR 28
61409: PUSH
61410: LD_INT 12
61412: ST_TO_ADDR
// hc_gallery =  ;
61413: LD_ADDR_OWVAR 33
61417: PUSH
61418: LD_STRING 
61420: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61421: LD_ADDR_OWVAR 35
61425: PUSH
61426: LD_INT 2
61428: NEG
61429: PPUSH
61430: LD_INT 2
61432: PPUSH
61433: CALL_OW 12
61437: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61438: LD_ADDR_OWVAR 31
61442: PUSH
61443: LD_INT 1
61445: PPUSH
61446: LD_INT 3
61448: PPUSH
61449: CALL_OW 12
61453: PUSH
61454: LD_INT 1
61456: PPUSH
61457: LD_INT 3
61459: PPUSH
61460: CALL_OW 12
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: ST_TO_ADDR
// animal := CreateHuman ;
61477: LD_ADDR_VAR 0 12
61481: PUSH
61482: CALL_OW 44
61486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61487: LD_VAR 0 12
61491: PPUSH
61492: LD_VAR 0 8
61496: PPUSH
61497: LD_INT 0
61499: PPUSH
61500: CALL 63286 0 3
// end ;
61504: GO 61402
61506: POP
61507: POP
// if enchidnas then
61508: LD_VAR 0 4
61512: IFFALSE 61579
// for i = 1 to enchidnas do
61514: LD_ADDR_VAR 0 11
61518: PUSH
61519: DOUBLE
61520: LD_INT 1
61522: DEC
61523: ST_TO_ADDR
61524: LD_VAR 0 4
61528: PUSH
61529: FOR_TO
61530: IFFALSE 61577
// begin hc_class = 13 ;
61532: LD_ADDR_OWVAR 28
61536: PUSH
61537: LD_INT 13
61539: ST_TO_ADDR
// hc_gallery =  ;
61540: LD_ADDR_OWVAR 33
61544: PUSH
61545: LD_STRING 
61547: ST_TO_ADDR
// animal := CreateHuman ;
61548: LD_ADDR_VAR 0 12
61552: PUSH
61553: CALL_OW 44
61557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61558: LD_VAR 0 12
61562: PPUSH
61563: LD_VAR 0 8
61567: PPUSH
61568: LD_INT 0
61570: PPUSH
61571: CALL 63286 0 3
// end ;
61575: GO 61529
61577: POP
61578: POP
// if fishes then
61579: LD_VAR 0 7
61583: IFFALSE 61650
// for i = 1 to fishes do
61585: LD_ADDR_VAR 0 11
61589: PUSH
61590: DOUBLE
61591: LD_INT 1
61593: DEC
61594: ST_TO_ADDR
61595: LD_VAR 0 7
61599: PUSH
61600: FOR_TO
61601: IFFALSE 61648
// begin hc_class = 20 ;
61603: LD_ADDR_OWVAR 28
61607: PUSH
61608: LD_INT 20
61610: ST_TO_ADDR
// hc_gallery =  ;
61611: LD_ADDR_OWVAR 33
61615: PUSH
61616: LD_STRING 
61618: ST_TO_ADDR
// animal := CreateHuman ;
61619: LD_ADDR_VAR 0 12
61623: PUSH
61624: CALL_OW 44
61628: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61629: LD_VAR 0 12
61633: PPUSH
61634: LD_VAR 0 9
61638: PPUSH
61639: LD_INT 0
61641: PPUSH
61642: CALL 63286 0 3
// end ;
61646: GO 61600
61648: POP
61649: POP
// end ;
61650: LD_VAR 0 10
61654: RET
// export function WantHeal ( sci , unit ) ; begin
61655: LD_INT 0
61657: PPUSH
// if GetTaskList ( sci ) > 0 then
61658: LD_VAR 0 1
61662: PPUSH
61663: CALL_OW 437
61667: PUSH
61668: LD_INT 0
61670: GREATER
61671: IFFALSE 61741
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61673: LD_VAR 0 1
61677: PPUSH
61678: CALL_OW 437
61682: PUSH
61683: LD_INT 1
61685: ARRAY
61686: PUSH
61687: LD_INT 1
61689: ARRAY
61690: PUSH
61691: LD_STRING l
61693: EQUAL
61694: PUSH
61695: LD_VAR 0 1
61699: PPUSH
61700: CALL_OW 437
61704: PUSH
61705: LD_INT 1
61707: ARRAY
61708: PUSH
61709: LD_INT 4
61711: ARRAY
61712: PUSH
61713: LD_VAR 0 2
61717: EQUAL
61718: AND
61719: IFFALSE 61731
// result := true else
61721: LD_ADDR_VAR 0 3
61725: PUSH
61726: LD_INT 1
61728: ST_TO_ADDR
61729: GO 61739
// result := false ;
61731: LD_ADDR_VAR 0 3
61735: PUSH
61736: LD_INT 0
61738: ST_TO_ADDR
// end else
61739: GO 61749
// result := false ;
61741: LD_ADDR_VAR 0 3
61745: PUSH
61746: LD_INT 0
61748: ST_TO_ADDR
// end ;
61749: LD_VAR 0 3
61753: RET
// export function HealTarget ( sci ) ; begin
61754: LD_INT 0
61756: PPUSH
// if not sci then
61757: LD_VAR 0 1
61761: NOT
61762: IFFALSE 61766
// exit ;
61764: GO 61831
// result := 0 ;
61766: LD_ADDR_VAR 0 2
61770: PUSH
61771: LD_INT 0
61773: ST_TO_ADDR
// if GetTaskList ( sci ) then
61774: LD_VAR 0 1
61778: PPUSH
61779: CALL_OW 437
61783: IFFALSE 61831
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61785: LD_VAR 0 1
61789: PPUSH
61790: CALL_OW 437
61794: PUSH
61795: LD_INT 1
61797: ARRAY
61798: PUSH
61799: LD_INT 1
61801: ARRAY
61802: PUSH
61803: LD_STRING l
61805: EQUAL
61806: IFFALSE 61831
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61808: LD_ADDR_VAR 0 2
61812: PUSH
61813: LD_VAR 0 1
61817: PPUSH
61818: CALL_OW 437
61822: PUSH
61823: LD_INT 1
61825: ARRAY
61826: PUSH
61827: LD_INT 4
61829: ARRAY
61830: ST_TO_ADDR
// end ;
61831: LD_VAR 0 2
61835: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61836: LD_INT 0
61838: PPUSH
61839: PPUSH
61840: PPUSH
61841: PPUSH
// if not base_units then
61842: LD_VAR 0 1
61846: NOT
61847: IFFALSE 61851
// exit ;
61849: GO 61938
// result := false ;
61851: LD_ADDR_VAR 0 2
61855: PUSH
61856: LD_INT 0
61858: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61859: LD_ADDR_VAR 0 5
61863: PUSH
61864: LD_VAR 0 1
61868: PPUSH
61869: LD_INT 21
61871: PUSH
61872: LD_INT 3
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PPUSH
61879: CALL_OW 72
61883: ST_TO_ADDR
// if not tmp then
61884: LD_VAR 0 5
61888: NOT
61889: IFFALSE 61893
// exit ;
61891: GO 61938
// for i in tmp do
61893: LD_ADDR_VAR 0 3
61897: PUSH
61898: LD_VAR 0 5
61902: PUSH
61903: FOR_IN
61904: IFFALSE 61936
// begin result := EnemyInRange ( i , 22 ) ;
61906: LD_ADDR_VAR 0 2
61910: PUSH
61911: LD_VAR 0 3
61915: PPUSH
61916: LD_INT 22
61918: PPUSH
61919: CALL 59624 0 2
61923: ST_TO_ADDR
// if result then
61924: LD_VAR 0 2
61928: IFFALSE 61934
// exit ;
61930: POP
61931: POP
61932: GO 61938
// end ;
61934: GO 61903
61936: POP
61937: POP
// end ;
61938: LD_VAR 0 2
61942: RET
// export function FilterByTag ( units , tag ) ; begin
61943: LD_INT 0
61945: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61946: LD_ADDR_VAR 0 3
61950: PUSH
61951: LD_VAR 0 1
61955: PPUSH
61956: LD_INT 120
61958: PUSH
61959: LD_VAR 0 2
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PPUSH
61968: CALL_OW 72
61972: ST_TO_ADDR
// end ;
61973: LD_VAR 0 3
61977: RET
// export function IsDriver ( un ) ; begin
61978: LD_INT 0
61980: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61981: LD_ADDR_VAR 0 2
61985: PUSH
61986: LD_VAR 0 1
61990: PUSH
61991: LD_INT 55
61993: PUSH
61994: EMPTY
61995: LIST
61996: PPUSH
61997: CALL_OW 69
62001: IN
62002: ST_TO_ADDR
// end ;
62003: LD_VAR 0 2
62007: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62008: LD_INT 0
62010: PPUSH
62011: PPUSH
// list := [ ] ;
62012: LD_ADDR_VAR 0 5
62016: PUSH
62017: EMPTY
62018: ST_TO_ADDR
// case d of 0 :
62019: LD_VAR 0 3
62023: PUSH
62024: LD_INT 0
62026: DOUBLE
62027: EQUAL
62028: IFTRUE 62032
62030: GO 62165
62032: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62033: LD_ADDR_VAR 0 5
62037: PUSH
62038: LD_VAR 0 1
62042: PUSH
62043: LD_INT 4
62045: MINUS
62046: PUSH
62047: LD_VAR 0 2
62051: PUSH
62052: LD_INT 4
62054: MINUS
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: LIST
62063: PUSH
62064: LD_VAR 0 1
62068: PUSH
62069: LD_INT 3
62071: MINUS
62072: PUSH
62073: LD_VAR 0 2
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: LIST
62085: PUSH
62086: LD_VAR 0 1
62090: PUSH
62091: LD_INT 4
62093: PLUS
62094: PUSH
62095: LD_VAR 0 2
62099: PUSH
62100: LD_INT 4
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: LIST
62107: PUSH
62108: LD_VAR 0 1
62112: PUSH
62113: LD_INT 3
62115: PLUS
62116: PUSH
62117: LD_VAR 0 2
62121: PUSH
62122: LD_INT 3
62124: PLUS
62125: PUSH
62126: LD_INT 5
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: PUSH
62134: LD_VAR 0 1
62138: PUSH
62139: LD_VAR 0 2
62143: PUSH
62144: LD_INT 4
62146: PLUS
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: LIST
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: ST_TO_ADDR
// end ; 1 :
62163: GO 62863
62165: LD_INT 1
62167: DOUBLE
62168: EQUAL
62169: IFTRUE 62173
62171: GO 62306
62173: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62174: LD_ADDR_VAR 0 5
62178: PUSH
62179: LD_VAR 0 1
62183: PUSH
62184: LD_VAR 0 2
62188: PUSH
62189: LD_INT 4
62191: MINUS
62192: PUSH
62193: LD_INT 3
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: LIST
62200: PUSH
62201: LD_VAR 0 1
62205: PUSH
62206: LD_INT 3
62208: MINUS
62209: PUSH
62210: LD_VAR 0 2
62214: PUSH
62215: LD_INT 3
62217: MINUS
62218: PUSH
62219: LD_INT 2
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: PUSH
62227: LD_VAR 0 1
62231: PUSH
62232: LD_INT 4
62234: MINUS
62235: PUSH
62236: LD_VAR 0 2
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: PUSH
62249: LD_VAR 0 1
62253: PUSH
62254: LD_VAR 0 2
62258: PUSH
62259: LD_INT 3
62261: PLUS
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: PUSH
62271: LD_VAR 0 1
62275: PUSH
62276: LD_INT 4
62278: PLUS
62279: PUSH
62280: LD_VAR 0 2
62284: PUSH
62285: LD_INT 4
62287: PLUS
62288: PUSH
62289: LD_INT 5
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: LIST
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: ST_TO_ADDR
// end ; 2 :
62304: GO 62863
62306: LD_INT 2
62308: DOUBLE
62309: EQUAL
62310: IFTRUE 62314
62312: GO 62443
62314: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62315: LD_ADDR_VAR 0 5
62319: PUSH
62320: LD_VAR 0 1
62324: PUSH
62325: LD_VAR 0 2
62329: PUSH
62330: LD_INT 3
62332: MINUS
62333: PUSH
62334: LD_INT 3
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: LIST
62341: PUSH
62342: LD_VAR 0 1
62346: PUSH
62347: LD_INT 4
62349: PLUS
62350: PUSH
62351: LD_VAR 0 2
62355: PUSH
62356: LD_INT 4
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: LIST
62363: PUSH
62364: LD_VAR 0 1
62368: PUSH
62369: LD_VAR 0 2
62373: PUSH
62374: LD_INT 4
62376: PLUS
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: PUSH
62386: LD_VAR 0 1
62390: PUSH
62391: LD_INT 3
62393: MINUS
62394: PUSH
62395: LD_VAR 0 2
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: PUSH
62408: LD_VAR 0 1
62412: PUSH
62413: LD_INT 4
62415: MINUS
62416: PUSH
62417: LD_VAR 0 2
62421: PUSH
62422: LD_INT 4
62424: MINUS
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: LIST
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: ST_TO_ADDR
// end ; 3 :
62441: GO 62863
62443: LD_INT 3
62445: DOUBLE
62446: EQUAL
62447: IFTRUE 62451
62449: GO 62584
62451: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62452: LD_ADDR_VAR 0 5
62456: PUSH
62457: LD_VAR 0 1
62461: PUSH
62462: LD_INT 3
62464: PLUS
62465: PUSH
62466: LD_VAR 0 2
62470: PUSH
62471: LD_INT 4
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: PUSH
62479: LD_VAR 0 1
62483: PUSH
62484: LD_INT 4
62486: PLUS
62487: PUSH
62488: LD_VAR 0 2
62492: PUSH
62493: LD_INT 4
62495: PLUS
62496: PUSH
62497: LD_INT 5
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: PUSH
62505: LD_VAR 0 1
62509: PUSH
62510: LD_INT 4
62512: MINUS
62513: PUSH
62514: LD_VAR 0 2
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: LIST
62526: PUSH
62527: LD_VAR 0 1
62531: PUSH
62532: LD_VAR 0 2
62536: PUSH
62537: LD_INT 4
62539: MINUS
62540: PUSH
62541: LD_INT 3
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: LIST
62548: PUSH
62549: LD_VAR 0 1
62553: PUSH
62554: LD_INT 3
62556: MINUS
62557: PUSH
62558: LD_VAR 0 2
62562: PUSH
62563: LD_INT 3
62565: MINUS
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: LIST
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: ST_TO_ADDR
// end ; 4 :
62582: GO 62863
62584: LD_INT 4
62586: DOUBLE
62587: EQUAL
62588: IFTRUE 62592
62590: GO 62725
62592: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62593: LD_ADDR_VAR 0 5
62597: PUSH
62598: LD_VAR 0 1
62602: PUSH
62603: LD_VAR 0 2
62607: PUSH
62608: LD_INT 4
62610: PLUS
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: LIST
62619: PUSH
62620: LD_VAR 0 1
62624: PUSH
62625: LD_INT 3
62627: PLUS
62628: PUSH
62629: LD_VAR 0 2
62633: PUSH
62634: LD_INT 3
62636: PLUS
62637: PUSH
62638: LD_INT 5
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: PUSH
62646: LD_VAR 0 1
62650: PUSH
62651: LD_INT 4
62653: PLUS
62654: PUSH
62655: LD_VAR 0 2
62659: PUSH
62660: LD_INT 4
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: PUSH
62668: LD_VAR 0 1
62672: PUSH
62673: LD_VAR 0 2
62677: PUSH
62678: LD_INT 3
62680: MINUS
62681: PUSH
62682: LD_INT 3
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: LIST
62689: PUSH
62690: LD_VAR 0 1
62694: PUSH
62695: LD_INT 4
62697: MINUS
62698: PUSH
62699: LD_VAR 0 2
62703: PUSH
62704: LD_INT 4
62706: MINUS
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: LIST
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: ST_TO_ADDR
// end ; 5 :
62723: GO 62863
62725: LD_INT 5
62727: DOUBLE
62728: EQUAL
62729: IFTRUE 62733
62731: GO 62862
62733: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62734: LD_ADDR_VAR 0 5
62738: PUSH
62739: LD_VAR 0 1
62743: PUSH
62744: LD_INT 4
62746: MINUS
62747: PUSH
62748: LD_VAR 0 2
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: LIST
62760: PUSH
62761: LD_VAR 0 1
62765: PUSH
62766: LD_VAR 0 2
62770: PUSH
62771: LD_INT 4
62773: MINUS
62774: PUSH
62775: LD_INT 3
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: LIST
62782: PUSH
62783: LD_VAR 0 1
62787: PUSH
62788: LD_INT 4
62790: PLUS
62791: PUSH
62792: LD_VAR 0 2
62796: PUSH
62797: LD_INT 4
62799: PLUS
62800: PUSH
62801: LD_INT 5
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: LIST
62808: PUSH
62809: LD_VAR 0 1
62813: PUSH
62814: LD_INT 3
62816: PLUS
62817: PUSH
62818: LD_VAR 0 2
62822: PUSH
62823: LD_INT 4
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: PUSH
62831: LD_VAR 0 1
62835: PUSH
62836: LD_VAR 0 2
62840: PUSH
62841: LD_INT 3
62843: PLUS
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: ST_TO_ADDR
// end ; end ;
62860: GO 62863
62862: POP
// result := list ;
62863: LD_ADDR_VAR 0 4
62867: PUSH
62868: LD_VAR 0 5
62872: ST_TO_ADDR
// end ;
62873: LD_VAR 0 4
62877: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62878: LD_INT 0
62880: PPUSH
62881: PPUSH
62882: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62883: LD_VAR 0 1
62887: NOT
62888: PUSH
62889: LD_VAR 0 2
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: LD_INT 2
62899: PUSH
62900: LD_INT 3
62902: PUSH
62903: LD_INT 4
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: IN
62912: NOT
62913: OR
62914: IFFALSE 62918
// exit ;
62916: GO 63010
// tmp := [ ] ;
62918: LD_ADDR_VAR 0 5
62922: PUSH
62923: EMPTY
62924: ST_TO_ADDR
// for i in units do
62925: LD_ADDR_VAR 0 4
62929: PUSH
62930: LD_VAR 0 1
62934: PUSH
62935: FOR_IN
62936: IFFALSE 62979
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62938: LD_ADDR_VAR 0 5
62942: PUSH
62943: LD_VAR 0 5
62947: PPUSH
62948: LD_VAR 0 5
62952: PUSH
62953: LD_INT 1
62955: PLUS
62956: PPUSH
62957: LD_VAR 0 4
62961: PPUSH
62962: LD_VAR 0 2
62966: PPUSH
62967: CALL_OW 259
62971: PPUSH
62972: CALL_OW 2
62976: ST_TO_ADDR
62977: GO 62935
62979: POP
62980: POP
// if not tmp then
62981: LD_VAR 0 5
62985: NOT
62986: IFFALSE 62990
// exit ;
62988: GO 63010
// result := SortListByListDesc ( units , tmp ) ;
62990: LD_ADDR_VAR 0 3
62994: PUSH
62995: LD_VAR 0 1
62999: PPUSH
63000: LD_VAR 0 5
63004: PPUSH
63005: CALL_OW 77
63009: ST_TO_ADDR
// end ;
63010: LD_VAR 0 3
63014: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63015: LD_INT 0
63017: PPUSH
63018: PPUSH
63019: PPUSH
// result := false ;
63020: LD_ADDR_VAR 0 3
63024: PUSH
63025: LD_INT 0
63027: ST_TO_ADDR
// x := GetX ( building ) ;
63028: LD_ADDR_VAR 0 4
63032: PUSH
63033: LD_VAR 0 2
63037: PPUSH
63038: CALL_OW 250
63042: ST_TO_ADDR
// y := GetY ( building ) ;
63043: LD_ADDR_VAR 0 5
63047: PUSH
63048: LD_VAR 0 2
63052: PPUSH
63053: CALL_OW 251
63057: ST_TO_ADDR
// if not building or not x or not y then
63058: LD_VAR 0 2
63062: NOT
63063: PUSH
63064: LD_VAR 0 4
63068: NOT
63069: OR
63070: PUSH
63071: LD_VAR 0 5
63075: NOT
63076: OR
63077: IFFALSE 63081
// exit ;
63079: GO 63173
// if GetTaskList ( unit ) then
63081: LD_VAR 0 1
63085: PPUSH
63086: CALL_OW 437
63090: IFFALSE 63173
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63092: LD_STRING e
63094: PUSH
63095: LD_VAR 0 1
63099: PPUSH
63100: CALL_OW 437
63104: PUSH
63105: LD_INT 1
63107: ARRAY
63108: PUSH
63109: LD_INT 1
63111: ARRAY
63112: EQUAL
63113: PUSH
63114: LD_VAR 0 4
63118: PUSH
63119: LD_VAR 0 1
63123: PPUSH
63124: CALL_OW 437
63128: PUSH
63129: LD_INT 1
63131: ARRAY
63132: PUSH
63133: LD_INT 2
63135: ARRAY
63136: EQUAL
63137: AND
63138: PUSH
63139: LD_VAR 0 5
63143: PUSH
63144: LD_VAR 0 1
63148: PPUSH
63149: CALL_OW 437
63153: PUSH
63154: LD_INT 1
63156: ARRAY
63157: PUSH
63158: LD_INT 3
63160: ARRAY
63161: EQUAL
63162: AND
63163: IFFALSE 63173
// result := true end ;
63165: LD_ADDR_VAR 0 3
63169: PUSH
63170: LD_INT 1
63172: ST_TO_ADDR
// end ;
63173: LD_VAR 0 3
63177: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63178: LD_INT 0
63180: PPUSH
// result := false ;
63181: LD_ADDR_VAR 0 4
63185: PUSH
63186: LD_INT 0
63188: ST_TO_ADDR
// if GetTaskList ( unit ) then
63189: LD_VAR 0 1
63193: PPUSH
63194: CALL_OW 437
63198: IFFALSE 63281
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63200: LD_STRING M
63202: PUSH
63203: LD_VAR 0 1
63207: PPUSH
63208: CALL_OW 437
63212: PUSH
63213: LD_INT 1
63215: ARRAY
63216: PUSH
63217: LD_INT 1
63219: ARRAY
63220: EQUAL
63221: PUSH
63222: LD_VAR 0 2
63226: PUSH
63227: LD_VAR 0 1
63231: PPUSH
63232: CALL_OW 437
63236: PUSH
63237: LD_INT 1
63239: ARRAY
63240: PUSH
63241: LD_INT 2
63243: ARRAY
63244: EQUAL
63245: AND
63246: PUSH
63247: LD_VAR 0 3
63251: PUSH
63252: LD_VAR 0 1
63256: PPUSH
63257: CALL_OW 437
63261: PUSH
63262: LD_INT 1
63264: ARRAY
63265: PUSH
63266: LD_INT 3
63268: ARRAY
63269: EQUAL
63270: AND
63271: IFFALSE 63281
// result := true ;
63273: LD_ADDR_VAR 0 4
63277: PUSH
63278: LD_INT 1
63280: ST_TO_ADDR
// end ; end ;
63281: LD_VAR 0 4
63285: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63286: LD_INT 0
63288: PPUSH
63289: PPUSH
63290: PPUSH
63291: PPUSH
// if not unit or not area then
63292: LD_VAR 0 1
63296: NOT
63297: PUSH
63298: LD_VAR 0 2
63302: NOT
63303: OR
63304: IFFALSE 63308
// exit ;
63306: GO 63472
// tmp := AreaToList ( area , i ) ;
63308: LD_ADDR_VAR 0 6
63312: PUSH
63313: LD_VAR 0 2
63317: PPUSH
63318: LD_VAR 0 5
63322: PPUSH
63323: CALL_OW 517
63327: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63328: LD_ADDR_VAR 0 5
63332: PUSH
63333: DOUBLE
63334: LD_INT 1
63336: DEC
63337: ST_TO_ADDR
63338: LD_VAR 0 6
63342: PUSH
63343: LD_INT 1
63345: ARRAY
63346: PUSH
63347: FOR_TO
63348: IFFALSE 63470
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63350: LD_ADDR_VAR 0 7
63354: PUSH
63355: LD_VAR 0 6
63359: PUSH
63360: LD_INT 1
63362: ARRAY
63363: PUSH
63364: LD_VAR 0 5
63368: ARRAY
63369: PUSH
63370: LD_VAR 0 6
63374: PUSH
63375: LD_INT 2
63377: ARRAY
63378: PUSH
63379: LD_VAR 0 5
63383: ARRAY
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63389: LD_VAR 0 7
63393: PUSH
63394: LD_INT 1
63396: ARRAY
63397: PPUSH
63398: LD_VAR 0 7
63402: PUSH
63403: LD_INT 2
63405: ARRAY
63406: PPUSH
63407: CALL_OW 428
63411: PUSH
63412: LD_INT 0
63414: EQUAL
63415: IFFALSE 63468
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63417: LD_VAR 0 1
63421: PPUSH
63422: LD_VAR 0 7
63426: PUSH
63427: LD_INT 1
63429: ARRAY
63430: PPUSH
63431: LD_VAR 0 7
63435: PUSH
63436: LD_INT 2
63438: ARRAY
63439: PPUSH
63440: LD_VAR 0 3
63444: PPUSH
63445: CALL_OW 48
// result := IsPlaced ( unit ) ;
63449: LD_ADDR_VAR 0 4
63453: PUSH
63454: LD_VAR 0 1
63458: PPUSH
63459: CALL_OW 305
63463: ST_TO_ADDR
// exit ;
63464: POP
63465: POP
63466: GO 63472
// end ; end ;
63468: GO 63347
63470: POP
63471: POP
// end ;
63472: LD_VAR 0 4
63476: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63477: LD_INT 0
63479: PPUSH
63480: PPUSH
63481: PPUSH
// if not side or side > 8 then
63482: LD_VAR 0 1
63486: NOT
63487: PUSH
63488: LD_VAR 0 1
63492: PUSH
63493: LD_INT 8
63495: GREATER
63496: OR
63497: IFFALSE 63501
// exit ;
63499: GO 63688
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63501: LD_ADDR_VAR 0 4
63505: PUSH
63506: LD_INT 22
63508: PUSH
63509: LD_VAR 0 1
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 21
63520: PUSH
63521: LD_INT 3
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PPUSH
63532: CALL_OW 69
63536: ST_TO_ADDR
// if not tmp then
63537: LD_VAR 0 4
63541: NOT
63542: IFFALSE 63546
// exit ;
63544: GO 63688
// enable_addtolog := true ;
63546: LD_ADDR_OWVAR 81
63550: PUSH
63551: LD_INT 1
63553: ST_TO_ADDR
// AddToLog ( [ ) ;
63554: LD_STRING [
63556: PPUSH
63557: CALL_OW 561
// for i in tmp do
63561: LD_ADDR_VAR 0 3
63565: PUSH
63566: LD_VAR 0 4
63570: PUSH
63571: FOR_IN
63572: IFFALSE 63679
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63574: LD_STRING [
63576: PUSH
63577: LD_VAR 0 3
63581: PPUSH
63582: CALL_OW 266
63586: STR
63587: PUSH
63588: LD_STRING , 
63590: STR
63591: PUSH
63592: LD_VAR 0 3
63596: PPUSH
63597: CALL_OW 250
63601: STR
63602: PUSH
63603: LD_STRING , 
63605: STR
63606: PUSH
63607: LD_VAR 0 3
63611: PPUSH
63612: CALL_OW 251
63616: STR
63617: PUSH
63618: LD_STRING , 
63620: STR
63621: PUSH
63622: LD_VAR 0 3
63626: PPUSH
63627: CALL_OW 254
63631: STR
63632: PUSH
63633: LD_STRING , 
63635: STR
63636: PUSH
63637: LD_VAR 0 3
63641: PPUSH
63642: LD_INT 1
63644: PPUSH
63645: CALL_OW 268
63649: STR
63650: PUSH
63651: LD_STRING , 
63653: STR
63654: PUSH
63655: LD_VAR 0 3
63659: PPUSH
63660: LD_INT 2
63662: PPUSH
63663: CALL_OW 268
63667: STR
63668: PUSH
63669: LD_STRING ],
63671: STR
63672: PPUSH
63673: CALL_OW 561
// end ;
63677: GO 63571
63679: POP
63680: POP
// AddToLog ( ]; ) ;
63681: LD_STRING ];
63683: PPUSH
63684: CALL_OW 561
// end ;
63688: LD_VAR 0 2
63692: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63693: LD_INT 0
63695: PPUSH
63696: PPUSH
63697: PPUSH
63698: PPUSH
63699: PPUSH
// if not area or not rate or not max then
63700: LD_VAR 0 1
63704: NOT
63705: PUSH
63706: LD_VAR 0 2
63710: NOT
63711: OR
63712: PUSH
63713: LD_VAR 0 4
63717: NOT
63718: OR
63719: IFFALSE 63723
// exit ;
63721: GO 63912
// while 1 do
63723: LD_INT 1
63725: IFFALSE 63912
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63727: LD_ADDR_VAR 0 9
63731: PUSH
63732: LD_VAR 0 1
63736: PPUSH
63737: LD_INT 1
63739: PPUSH
63740: CALL_OW 287
63744: PUSH
63745: LD_INT 10
63747: MUL
63748: ST_TO_ADDR
// r := rate / 10 ;
63749: LD_ADDR_VAR 0 7
63753: PUSH
63754: LD_VAR 0 2
63758: PUSH
63759: LD_INT 10
63761: DIVREAL
63762: ST_TO_ADDR
// time := 1 1$00 ;
63763: LD_ADDR_VAR 0 8
63767: PUSH
63768: LD_INT 2100
63770: ST_TO_ADDR
// if amount < min then
63771: LD_VAR 0 9
63775: PUSH
63776: LD_VAR 0 3
63780: LESS
63781: IFFALSE 63799
// r := r * 2 else
63783: LD_ADDR_VAR 0 7
63787: PUSH
63788: LD_VAR 0 7
63792: PUSH
63793: LD_INT 2
63795: MUL
63796: ST_TO_ADDR
63797: GO 63825
// if amount > max then
63799: LD_VAR 0 9
63803: PUSH
63804: LD_VAR 0 4
63808: GREATER
63809: IFFALSE 63825
// r := r / 2 ;
63811: LD_ADDR_VAR 0 7
63815: PUSH
63816: LD_VAR 0 7
63820: PUSH
63821: LD_INT 2
63823: DIVREAL
63824: ST_TO_ADDR
// time := time / r ;
63825: LD_ADDR_VAR 0 8
63829: PUSH
63830: LD_VAR 0 8
63834: PUSH
63835: LD_VAR 0 7
63839: DIVREAL
63840: ST_TO_ADDR
// if time < 0 then
63841: LD_VAR 0 8
63845: PUSH
63846: LD_INT 0
63848: LESS
63849: IFFALSE 63866
// time := time * - 1 ;
63851: LD_ADDR_VAR 0 8
63855: PUSH
63856: LD_VAR 0 8
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: MUL
63865: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63866: LD_VAR 0 8
63870: PUSH
63871: LD_INT 35
63873: PPUSH
63874: LD_INT 875
63876: PPUSH
63877: CALL_OW 12
63881: PLUS
63882: PPUSH
63883: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63887: LD_INT 1
63889: PPUSH
63890: LD_INT 5
63892: PPUSH
63893: CALL_OW 12
63897: PPUSH
63898: LD_VAR 0 1
63902: PPUSH
63903: LD_INT 1
63905: PPUSH
63906: CALL_OW 55
// end ;
63910: GO 63723
// end ;
63912: LD_VAR 0 5
63916: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63917: LD_INT 0
63919: PPUSH
63920: PPUSH
63921: PPUSH
63922: PPUSH
63923: PPUSH
63924: PPUSH
63925: PPUSH
63926: PPUSH
// if not turrets or not factories then
63927: LD_VAR 0 1
63931: NOT
63932: PUSH
63933: LD_VAR 0 2
63937: NOT
63938: OR
63939: IFFALSE 63943
// exit ;
63941: GO 64250
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63943: LD_ADDR_VAR 0 10
63947: PUSH
63948: LD_INT 5
63950: PUSH
63951: LD_INT 6
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: PUSH
63961: LD_INT 4
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 3
63970: PUSH
63971: LD_INT 5
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 24
63985: PUSH
63986: LD_INT 25
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 23
63995: PUSH
63996: LD_INT 27
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 42
64009: PUSH
64010: LD_INT 43
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 44
64019: PUSH
64020: LD_INT 46
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 45
64029: PUSH
64030: LD_INT 47
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: LIST
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: ST_TO_ADDR
// result := [ ] ;
64047: LD_ADDR_VAR 0 3
64051: PUSH
64052: EMPTY
64053: ST_TO_ADDR
// for i in turrets do
64054: LD_ADDR_VAR 0 4
64058: PUSH
64059: LD_VAR 0 1
64063: PUSH
64064: FOR_IN
64065: IFFALSE 64248
// begin nat := GetNation ( i ) ;
64067: LD_ADDR_VAR 0 7
64071: PUSH
64072: LD_VAR 0 4
64076: PPUSH
64077: CALL_OW 248
64081: ST_TO_ADDR
// weapon := 0 ;
64082: LD_ADDR_VAR 0 8
64086: PUSH
64087: LD_INT 0
64089: ST_TO_ADDR
// if not nat then
64090: LD_VAR 0 7
64094: NOT
64095: IFFALSE 64099
// continue ;
64097: GO 64064
// for j in list [ nat ] do
64099: LD_ADDR_VAR 0 5
64103: PUSH
64104: LD_VAR 0 10
64108: PUSH
64109: LD_VAR 0 7
64113: ARRAY
64114: PUSH
64115: FOR_IN
64116: IFFALSE 64157
// if GetBWeapon ( i ) = j [ 1 ] then
64118: LD_VAR 0 4
64122: PPUSH
64123: CALL_OW 269
64127: PUSH
64128: LD_VAR 0 5
64132: PUSH
64133: LD_INT 1
64135: ARRAY
64136: EQUAL
64137: IFFALSE 64155
// begin weapon := j [ 2 ] ;
64139: LD_ADDR_VAR 0 8
64143: PUSH
64144: LD_VAR 0 5
64148: PUSH
64149: LD_INT 2
64151: ARRAY
64152: ST_TO_ADDR
// break ;
64153: GO 64157
// end ;
64155: GO 64115
64157: POP
64158: POP
// if not weapon then
64159: LD_VAR 0 8
64163: NOT
64164: IFFALSE 64168
// continue ;
64166: GO 64064
// for k in factories do
64168: LD_ADDR_VAR 0 6
64172: PUSH
64173: LD_VAR 0 2
64177: PUSH
64178: FOR_IN
64179: IFFALSE 64244
// begin weapons := AvailableWeaponList ( k ) ;
64181: LD_ADDR_VAR 0 9
64185: PUSH
64186: LD_VAR 0 6
64190: PPUSH
64191: CALL_OW 478
64195: ST_TO_ADDR
// if not weapons then
64196: LD_VAR 0 9
64200: NOT
64201: IFFALSE 64205
// continue ;
64203: GO 64178
// if weapon in weapons then
64205: LD_VAR 0 8
64209: PUSH
64210: LD_VAR 0 9
64214: IN
64215: IFFALSE 64242
// begin result := [ i , weapon ] ;
64217: LD_ADDR_VAR 0 3
64221: PUSH
64222: LD_VAR 0 4
64226: PUSH
64227: LD_VAR 0 8
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: ST_TO_ADDR
// exit ;
64236: POP
64237: POP
64238: POP
64239: POP
64240: GO 64250
// end ; end ;
64242: GO 64178
64244: POP
64245: POP
// end ;
64246: GO 64064
64248: POP
64249: POP
// end ;
64250: LD_VAR 0 3
64254: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64255: LD_INT 0
64257: PPUSH
// if not side or side > 8 then
64258: LD_VAR 0 3
64262: NOT
64263: PUSH
64264: LD_VAR 0 3
64268: PUSH
64269: LD_INT 8
64271: GREATER
64272: OR
64273: IFFALSE 64277
// exit ;
64275: GO 64336
// if not range then
64277: LD_VAR 0 4
64281: NOT
64282: IFFALSE 64293
// range := - 12 ;
64284: LD_ADDR_VAR 0 4
64288: PUSH
64289: LD_INT 12
64291: NEG
64292: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64293: LD_VAR 0 1
64297: PPUSH
64298: LD_VAR 0 2
64302: PPUSH
64303: LD_VAR 0 3
64307: PPUSH
64308: LD_VAR 0 4
64312: PPUSH
64313: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64317: LD_VAR 0 1
64321: PPUSH
64322: LD_VAR 0 2
64326: PPUSH
64327: LD_VAR 0 3
64331: PPUSH
64332: CALL_OW 331
// end ;
64336: LD_VAR 0 5
64340: RET
// export function Video ( mode ) ; begin
64341: LD_INT 0
64343: PPUSH
// ingame_video = mode ;
64344: LD_ADDR_OWVAR 52
64348: PUSH
64349: LD_VAR 0 1
64353: ST_TO_ADDR
// interface_hidden = mode ;
64354: LD_ADDR_OWVAR 54
64358: PUSH
64359: LD_VAR 0 1
64363: ST_TO_ADDR
// end ;
64364: LD_VAR 0 2
64368: RET
// export function Join ( array , element ) ; begin
64369: LD_INT 0
64371: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64372: LD_ADDR_VAR 0 3
64376: PUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: LD_VAR 0 1
64386: PUSH
64387: LD_INT 1
64389: PLUS
64390: PPUSH
64391: LD_VAR 0 2
64395: PPUSH
64396: CALL_OW 1
64400: ST_TO_ADDR
// end ;
64401: LD_VAR 0 3
64405: RET
// export function JoinUnion ( array , element ) ; begin
64406: LD_INT 0
64408: PPUSH
// result := array union element ;
64409: LD_ADDR_VAR 0 3
64413: PUSH
64414: LD_VAR 0 1
64418: PUSH
64419: LD_VAR 0 2
64423: UNION
64424: ST_TO_ADDR
// end ;
64425: LD_VAR 0 3
64429: RET
// export function GetBehemoths ( side ) ; begin
64430: LD_INT 0
64432: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64433: LD_ADDR_VAR 0 2
64437: PUSH
64438: LD_INT 22
64440: PUSH
64441: LD_VAR 0 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 31
64452: PUSH
64453: LD_INT 25
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PPUSH
64464: CALL_OW 69
64468: ST_TO_ADDR
// end ;
64469: LD_VAR 0 2
64473: RET
// export function Shuffle ( array ) ; var i , index ; begin
64474: LD_INT 0
64476: PPUSH
64477: PPUSH
64478: PPUSH
// result := [ ] ;
64479: LD_ADDR_VAR 0 2
64483: PUSH
64484: EMPTY
64485: ST_TO_ADDR
// if not array then
64486: LD_VAR 0 1
64490: NOT
64491: IFFALSE 64495
// exit ;
64493: GO 64594
// Randomize ;
64495: CALL_OW 10
// for i = array downto 1 do
64499: LD_ADDR_VAR 0 3
64503: PUSH
64504: DOUBLE
64505: LD_VAR 0 1
64509: INC
64510: ST_TO_ADDR
64511: LD_INT 1
64513: PUSH
64514: FOR_DOWNTO
64515: IFFALSE 64592
// begin index := rand ( 1 , array ) ;
64517: LD_ADDR_VAR 0 4
64521: PUSH
64522: LD_INT 1
64524: PPUSH
64525: LD_VAR 0 1
64529: PPUSH
64530: CALL_OW 12
64534: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64535: LD_ADDR_VAR 0 2
64539: PUSH
64540: LD_VAR 0 2
64544: PPUSH
64545: LD_VAR 0 2
64549: PUSH
64550: LD_INT 1
64552: PLUS
64553: PPUSH
64554: LD_VAR 0 1
64558: PUSH
64559: LD_VAR 0 4
64563: ARRAY
64564: PPUSH
64565: CALL_OW 2
64569: ST_TO_ADDR
// array := Delete ( array , index ) ;
64570: LD_ADDR_VAR 0 1
64574: PUSH
64575: LD_VAR 0 1
64579: PPUSH
64580: LD_VAR 0 4
64584: PPUSH
64585: CALL_OW 3
64589: ST_TO_ADDR
// end ;
64590: GO 64514
64592: POP
64593: POP
// end ;
64594: LD_VAR 0 2
64598: RET
// export function GetBaseMaterials ( base ) ; begin
64599: LD_INT 0
64601: PPUSH
// result := [ 0 , 0 , 0 ] ;
64602: LD_ADDR_VAR 0 2
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: LIST
64620: ST_TO_ADDR
// if not base then
64621: LD_VAR 0 1
64625: NOT
64626: IFFALSE 64630
// exit ;
64628: GO 64679
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64630: LD_ADDR_VAR 0 2
64634: PUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: LD_INT 1
64642: PPUSH
64643: CALL_OW 275
64647: PUSH
64648: LD_VAR 0 1
64652: PPUSH
64653: LD_INT 2
64655: PPUSH
64656: CALL_OW 275
64660: PUSH
64661: LD_VAR 0 1
64665: PPUSH
64666: LD_INT 3
64668: PPUSH
64669: CALL_OW 275
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: LIST
64678: ST_TO_ADDR
// end ;
64679: LD_VAR 0 2
64683: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64684: LD_INT 0
64686: PPUSH
64687: PPUSH
// result := array ;
64688: LD_ADDR_VAR 0 3
64692: PUSH
64693: LD_VAR 0 1
64697: ST_TO_ADDR
// if size >= result then
64698: LD_VAR 0 2
64702: PUSH
64703: LD_VAR 0 3
64707: GREATEREQUAL
64708: IFFALSE 64712
// exit ;
64710: GO 64762
// if size then
64712: LD_VAR 0 2
64716: IFFALSE 64762
// for i := array downto size do
64718: LD_ADDR_VAR 0 4
64722: PUSH
64723: DOUBLE
64724: LD_VAR 0 1
64728: INC
64729: ST_TO_ADDR
64730: LD_VAR 0 2
64734: PUSH
64735: FOR_DOWNTO
64736: IFFALSE 64760
// result := Delete ( result , result ) ;
64738: LD_ADDR_VAR 0 3
64742: PUSH
64743: LD_VAR 0 3
64747: PPUSH
64748: LD_VAR 0 3
64752: PPUSH
64753: CALL_OW 3
64757: ST_TO_ADDR
64758: GO 64735
64760: POP
64761: POP
// end ;
64762: LD_VAR 0 3
64766: RET
// export function ComExit ( unit ) ; var tmp ; begin
64767: LD_INT 0
64769: PPUSH
64770: PPUSH
// if not IsInUnit ( unit ) then
64771: LD_VAR 0 1
64775: PPUSH
64776: CALL_OW 310
64780: NOT
64781: IFFALSE 64785
// exit ;
64783: GO 64845
// tmp := IsInUnit ( unit ) ;
64785: LD_ADDR_VAR 0 3
64789: PUSH
64790: LD_VAR 0 1
64794: PPUSH
64795: CALL_OW 310
64799: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64800: LD_VAR 0 3
64804: PPUSH
64805: CALL_OW 247
64809: PUSH
64810: LD_INT 2
64812: EQUAL
64813: IFFALSE 64826
// ComExitVehicle ( unit ) else
64815: LD_VAR 0 1
64819: PPUSH
64820: CALL_OW 121
64824: GO 64835
// ComExitBuilding ( unit ) ;
64826: LD_VAR 0 1
64830: PPUSH
64831: CALL_OW 122
// result := tmp ;
64835: LD_ADDR_VAR 0 2
64839: PUSH
64840: LD_VAR 0 3
64844: ST_TO_ADDR
// end ;
64845: LD_VAR 0 2
64849: RET
// export function ComExitAll ( units ) ; var i ; begin
64850: LD_INT 0
64852: PPUSH
64853: PPUSH
// if not units then
64854: LD_VAR 0 1
64858: NOT
64859: IFFALSE 64863
// exit ;
64861: GO 64889
// for i in units do
64863: LD_ADDR_VAR 0 3
64867: PUSH
64868: LD_VAR 0 1
64872: PUSH
64873: FOR_IN
64874: IFFALSE 64887
// ComExit ( i ) ;
64876: LD_VAR 0 3
64880: PPUSH
64881: CALL 64767 0 1
64885: GO 64873
64887: POP
64888: POP
// end ;
64889: LD_VAR 0 2
64893: RET
// export function ResetHc ; begin
64894: LD_INT 0
64896: PPUSH
// InitHc ;
64897: CALL_OW 19
// hc_importance := 0 ;
64901: LD_ADDR_OWVAR 32
64905: PUSH
64906: LD_INT 0
64908: ST_TO_ADDR
// end ;
64909: LD_VAR 0 1
64913: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64914: LD_INT 0
64916: PPUSH
64917: PPUSH
64918: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64919: LD_ADDR_VAR 0 6
64923: PUSH
64924: LD_VAR 0 1
64928: PUSH
64929: LD_VAR 0 3
64933: PLUS
64934: PUSH
64935: LD_INT 2
64937: DIV
64938: ST_TO_ADDR
// if _x < 0 then
64939: LD_VAR 0 6
64943: PUSH
64944: LD_INT 0
64946: LESS
64947: IFFALSE 64964
// _x := _x * - 1 ;
64949: LD_ADDR_VAR 0 6
64953: PUSH
64954: LD_VAR 0 6
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: MUL
64963: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64964: LD_ADDR_VAR 0 7
64968: PUSH
64969: LD_VAR 0 2
64973: PUSH
64974: LD_VAR 0 4
64978: PLUS
64979: PUSH
64980: LD_INT 2
64982: DIV
64983: ST_TO_ADDR
// if _y < 0 then
64984: LD_VAR 0 7
64988: PUSH
64989: LD_INT 0
64991: LESS
64992: IFFALSE 65009
// _y := _y * - 1 ;
64994: LD_ADDR_VAR 0 7
64998: PUSH
64999: LD_VAR 0 7
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: MUL
65008: ST_TO_ADDR
// result := [ _x , _y ] ;
65009: LD_ADDR_VAR 0 5
65013: PUSH
65014: LD_VAR 0 6
65018: PUSH
65019: LD_VAR 0 7
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: ST_TO_ADDR
// end ;
65028: LD_VAR 0 5
65032: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65033: LD_INT 0
65035: PPUSH
65036: PPUSH
65037: PPUSH
65038: PPUSH
// task := GetTaskList ( unit ) ;
65039: LD_ADDR_VAR 0 7
65043: PUSH
65044: LD_VAR 0 1
65048: PPUSH
65049: CALL_OW 437
65053: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65054: LD_VAR 0 7
65058: NOT
65059: PUSH
65060: LD_VAR 0 1
65064: PPUSH
65065: LD_VAR 0 2
65069: PPUSH
65070: CALL_OW 308
65074: NOT
65075: AND
65076: IFFALSE 65080
// exit ;
65078: GO 65198
// if IsInArea ( unit , area ) then
65080: LD_VAR 0 1
65084: PPUSH
65085: LD_VAR 0 2
65089: PPUSH
65090: CALL_OW 308
65094: IFFALSE 65112
// begin ComMoveToArea ( unit , goAway ) ;
65096: LD_VAR 0 1
65100: PPUSH
65101: LD_VAR 0 3
65105: PPUSH
65106: CALL_OW 113
// exit ;
65110: GO 65198
// end ; if task [ 1 ] [ 1 ] <> M then
65112: LD_VAR 0 7
65116: PUSH
65117: LD_INT 1
65119: ARRAY
65120: PUSH
65121: LD_INT 1
65123: ARRAY
65124: PUSH
65125: LD_STRING M
65127: NONEQUAL
65128: IFFALSE 65132
// exit ;
65130: GO 65198
// x := task [ 1 ] [ 2 ] ;
65132: LD_ADDR_VAR 0 5
65136: PUSH
65137: LD_VAR 0 7
65141: PUSH
65142: LD_INT 1
65144: ARRAY
65145: PUSH
65146: LD_INT 2
65148: ARRAY
65149: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65150: LD_ADDR_VAR 0 6
65154: PUSH
65155: LD_VAR 0 7
65159: PUSH
65160: LD_INT 1
65162: ARRAY
65163: PUSH
65164: LD_INT 3
65166: ARRAY
65167: ST_TO_ADDR
// if InArea ( x , y , area ) then
65168: LD_VAR 0 5
65172: PPUSH
65173: LD_VAR 0 6
65177: PPUSH
65178: LD_VAR 0 2
65182: PPUSH
65183: CALL_OW 309
65187: IFFALSE 65198
// ComStop ( unit ) ;
65189: LD_VAR 0 1
65193: PPUSH
65194: CALL_OW 141
// end ;
65198: LD_VAR 0 4
65202: RET
// export function Abs ( value ) ; begin
65203: LD_INT 0
65205: PPUSH
// result := value ;
65206: LD_ADDR_VAR 0 2
65210: PUSH
65211: LD_VAR 0 1
65215: ST_TO_ADDR
// if value < 0 then
65216: LD_VAR 0 1
65220: PUSH
65221: LD_INT 0
65223: LESS
65224: IFFALSE 65241
// result := value * - 1 ;
65226: LD_ADDR_VAR 0 2
65230: PUSH
65231: LD_VAR 0 1
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: MUL
65240: ST_TO_ADDR
// end ;
65241: LD_VAR 0 2
65245: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65246: LD_INT 0
65248: PPUSH
65249: PPUSH
65250: PPUSH
65251: PPUSH
65252: PPUSH
65253: PPUSH
65254: PPUSH
65255: PPUSH
// if not unit or not building then
65256: LD_VAR 0 1
65260: NOT
65261: PUSH
65262: LD_VAR 0 2
65266: NOT
65267: OR
65268: IFFALSE 65272
// exit ;
65270: GO 65498
// x := GetX ( building ) ;
65272: LD_ADDR_VAR 0 4
65276: PUSH
65277: LD_VAR 0 2
65281: PPUSH
65282: CALL_OW 250
65286: ST_TO_ADDR
// y := GetY ( building ) ;
65287: LD_ADDR_VAR 0 6
65291: PUSH
65292: LD_VAR 0 2
65296: PPUSH
65297: CALL_OW 251
65301: ST_TO_ADDR
// d := GetDir ( building ) ;
65302: LD_ADDR_VAR 0 8
65306: PUSH
65307: LD_VAR 0 2
65311: PPUSH
65312: CALL_OW 254
65316: ST_TO_ADDR
// r := 4 ;
65317: LD_ADDR_VAR 0 9
65321: PUSH
65322: LD_INT 4
65324: ST_TO_ADDR
// for i := 1 to 5 do
65325: LD_ADDR_VAR 0 10
65329: PUSH
65330: DOUBLE
65331: LD_INT 1
65333: DEC
65334: ST_TO_ADDR
65335: LD_INT 5
65337: PUSH
65338: FOR_TO
65339: IFFALSE 65496
// begin _x := ShiftX ( x , d , r + i ) ;
65341: LD_ADDR_VAR 0 5
65345: PUSH
65346: LD_VAR 0 4
65350: PPUSH
65351: LD_VAR 0 8
65355: PPUSH
65356: LD_VAR 0 9
65360: PUSH
65361: LD_VAR 0 10
65365: PLUS
65366: PPUSH
65367: CALL_OW 272
65371: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65372: LD_ADDR_VAR 0 7
65376: PUSH
65377: LD_VAR 0 6
65381: PPUSH
65382: LD_VAR 0 8
65386: PPUSH
65387: LD_VAR 0 9
65391: PUSH
65392: LD_VAR 0 10
65396: PLUS
65397: PPUSH
65398: CALL_OW 273
65402: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65403: LD_VAR 0 5
65407: PPUSH
65408: LD_VAR 0 7
65412: PPUSH
65413: CALL_OW 488
65417: PUSH
65418: LD_VAR 0 5
65422: PPUSH
65423: LD_VAR 0 7
65427: PPUSH
65428: CALL_OW 428
65432: PPUSH
65433: CALL_OW 247
65437: PUSH
65438: LD_INT 3
65440: PUSH
65441: LD_INT 2
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: IN
65448: NOT
65449: AND
65450: IFFALSE 65494
// begin ComMoveXY ( unit , _x , _y ) ;
65452: LD_VAR 0 1
65456: PPUSH
65457: LD_VAR 0 5
65461: PPUSH
65462: LD_VAR 0 7
65466: PPUSH
65467: CALL_OW 111
// result := [ _x , _y ] ;
65471: LD_ADDR_VAR 0 3
65475: PUSH
65476: LD_VAR 0 5
65480: PUSH
65481: LD_VAR 0 7
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: ST_TO_ADDR
// exit ;
65490: POP
65491: POP
65492: GO 65498
// end ; end ;
65494: GO 65338
65496: POP
65497: POP
// end ;
65498: LD_VAR 0 3
65502: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65503: LD_INT 0
65505: PPUSH
65506: PPUSH
65507: PPUSH
// result := 0 ;
65508: LD_ADDR_VAR 0 3
65512: PUSH
65513: LD_INT 0
65515: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65516: LD_VAR 0 1
65520: PUSH
65521: LD_INT 0
65523: LESS
65524: PUSH
65525: LD_VAR 0 1
65529: PUSH
65530: LD_INT 8
65532: GREATER
65533: OR
65534: PUSH
65535: LD_VAR 0 2
65539: PUSH
65540: LD_INT 0
65542: LESS
65543: OR
65544: PUSH
65545: LD_VAR 0 2
65549: PUSH
65550: LD_INT 8
65552: GREATER
65553: OR
65554: IFFALSE 65558
// exit ;
65556: GO 65633
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65558: LD_ADDR_VAR 0 4
65562: PUSH
65563: LD_INT 22
65565: PUSH
65566: LD_VAR 0 2
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PPUSH
65575: CALL_OW 69
65579: PUSH
65580: FOR_IN
65581: IFFALSE 65631
// begin un := UnitShoot ( i ) ;
65583: LD_ADDR_VAR 0 5
65587: PUSH
65588: LD_VAR 0 4
65592: PPUSH
65593: CALL_OW 504
65597: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65598: LD_VAR 0 5
65602: PPUSH
65603: CALL_OW 255
65607: PUSH
65608: LD_VAR 0 1
65612: EQUAL
65613: IFFALSE 65629
// begin result := un ;
65615: LD_ADDR_VAR 0 3
65619: PUSH
65620: LD_VAR 0 5
65624: ST_TO_ADDR
// exit ;
65625: POP
65626: POP
65627: GO 65633
// end ; end ;
65629: GO 65580
65631: POP
65632: POP
// end ;
65633: LD_VAR 0 3
65637: RET
// export function GetCargoBay ( units ) ; begin
65638: LD_INT 0
65640: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65641: LD_ADDR_VAR 0 2
65645: PUSH
65646: LD_VAR 0 1
65650: PPUSH
65651: LD_INT 2
65653: PUSH
65654: LD_INT 34
65656: PUSH
65657: LD_INT 12
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 34
65666: PUSH
65667: LD_INT 51
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 34
65676: PUSH
65677: LD_INT 32
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 34
65686: PUSH
65687: LD_INT 89
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: PPUSH
65701: CALL_OW 72
65705: ST_TO_ADDR
// end ;
65706: LD_VAR 0 2
65710: RET
// export function Negate ( value ) ; begin
65711: LD_INT 0
65713: PPUSH
// result := not value ;
65714: LD_ADDR_VAR 0 2
65718: PUSH
65719: LD_VAR 0 1
65723: NOT
65724: ST_TO_ADDR
// end ;
65725: LD_VAR 0 2
65729: RET
// export function Inc ( value ) ; begin
65730: LD_INT 0
65732: PPUSH
// result := value + 1 ;
65733: LD_ADDR_VAR 0 2
65737: PUSH
65738: LD_VAR 0 1
65742: PUSH
65743: LD_INT 1
65745: PLUS
65746: ST_TO_ADDR
// end ;
65747: LD_VAR 0 2
65751: RET
// export function Dec ( value ) ; begin
65752: LD_INT 0
65754: PPUSH
// result := value - 1 ;
65755: LD_ADDR_VAR 0 2
65759: PUSH
65760: LD_VAR 0 1
65764: PUSH
65765: LD_INT 1
65767: MINUS
65768: ST_TO_ADDR
// end ;
65769: LD_VAR 0 2
65773: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65774: LD_INT 0
65776: PPUSH
65777: PPUSH
65778: PPUSH
65779: PPUSH
65780: PPUSH
65781: PPUSH
65782: PPUSH
65783: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65784: LD_VAR 0 1
65788: PPUSH
65789: LD_VAR 0 2
65793: PPUSH
65794: CALL_OW 488
65798: NOT
65799: PUSH
65800: LD_VAR 0 3
65804: PPUSH
65805: LD_VAR 0 4
65809: PPUSH
65810: CALL_OW 488
65814: NOT
65815: OR
65816: IFFALSE 65829
// begin result := - 1 ;
65818: LD_ADDR_VAR 0 5
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: ST_TO_ADDR
// exit ;
65827: GO 66064
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65829: LD_ADDR_VAR 0 12
65833: PUSH
65834: LD_VAR 0 1
65838: PPUSH
65839: LD_VAR 0 2
65843: PPUSH
65844: LD_VAR 0 3
65848: PPUSH
65849: LD_VAR 0 4
65853: PPUSH
65854: CALL 64914 0 4
65858: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65859: LD_ADDR_VAR 0 11
65863: PUSH
65864: LD_VAR 0 1
65868: PPUSH
65869: LD_VAR 0 2
65873: PPUSH
65874: LD_VAR 0 12
65878: PUSH
65879: LD_INT 1
65881: ARRAY
65882: PPUSH
65883: LD_VAR 0 12
65887: PUSH
65888: LD_INT 2
65890: ARRAY
65891: PPUSH
65892: CALL_OW 298
65896: ST_TO_ADDR
// distance := 9999 ;
65897: LD_ADDR_VAR 0 10
65901: PUSH
65902: LD_INT 9999
65904: ST_TO_ADDR
// for i := 0 to 5 do
65905: LD_ADDR_VAR 0 6
65909: PUSH
65910: DOUBLE
65911: LD_INT 0
65913: DEC
65914: ST_TO_ADDR
65915: LD_INT 5
65917: PUSH
65918: FOR_TO
65919: IFFALSE 66062
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65921: LD_ADDR_VAR 0 7
65925: PUSH
65926: LD_VAR 0 1
65930: PPUSH
65931: LD_VAR 0 6
65935: PPUSH
65936: LD_VAR 0 11
65940: PPUSH
65941: CALL_OW 272
65945: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65946: LD_ADDR_VAR 0 8
65950: PUSH
65951: LD_VAR 0 2
65955: PPUSH
65956: LD_VAR 0 6
65960: PPUSH
65961: LD_VAR 0 11
65965: PPUSH
65966: CALL_OW 273
65970: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65971: LD_VAR 0 7
65975: PPUSH
65976: LD_VAR 0 8
65980: PPUSH
65981: CALL_OW 488
65985: NOT
65986: IFFALSE 65990
// continue ;
65988: GO 65918
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65990: LD_ADDR_VAR 0 9
65994: PUSH
65995: LD_VAR 0 12
65999: PUSH
66000: LD_INT 1
66002: ARRAY
66003: PPUSH
66004: LD_VAR 0 12
66008: PUSH
66009: LD_INT 2
66011: ARRAY
66012: PPUSH
66013: LD_VAR 0 7
66017: PPUSH
66018: LD_VAR 0 8
66022: PPUSH
66023: CALL_OW 298
66027: ST_TO_ADDR
// if tmp < distance then
66028: LD_VAR 0 9
66032: PUSH
66033: LD_VAR 0 10
66037: LESS
66038: IFFALSE 66060
// begin result := i ;
66040: LD_ADDR_VAR 0 5
66044: PUSH
66045: LD_VAR 0 6
66049: ST_TO_ADDR
// distance := tmp ;
66050: LD_ADDR_VAR 0 10
66054: PUSH
66055: LD_VAR 0 9
66059: ST_TO_ADDR
// end ; end ;
66060: GO 65918
66062: POP
66063: POP
// end ;
66064: LD_VAR 0 5
66068: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66069: LD_INT 0
66071: PPUSH
66072: PPUSH
// if not driver or not IsInUnit ( driver ) then
66073: LD_VAR 0 1
66077: NOT
66078: PUSH
66079: LD_VAR 0 1
66083: PPUSH
66084: CALL_OW 310
66088: NOT
66089: OR
66090: IFFALSE 66094
// exit ;
66092: GO 66184
// vehicle := IsInUnit ( driver ) ;
66094: LD_ADDR_VAR 0 3
66098: PUSH
66099: LD_VAR 0 1
66103: PPUSH
66104: CALL_OW 310
66108: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66109: LD_VAR 0 1
66113: PPUSH
66114: LD_STRING \
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: PUSH
66144: LD_STRING E
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: LD_VAR 0 3
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PPUSH
66180: CALL_OW 446
// end ;
66184: LD_VAR 0 2
66188: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66189: LD_INT 0
66191: PPUSH
66192: PPUSH
// if not driver or not IsInUnit ( driver ) then
66193: LD_VAR 0 1
66197: NOT
66198: PUSH
66199: LD_VAR 0 1
66203: PPUSH
66204: CALL_OW 310
66208: NOT
66209: OR
66210: IFFALSE 66214
// exit ;
66212: GO 66304
// vehicle := IsInUnit ( driver ) ;
66214: LD_ADDR_VAR 0 3
66218: PUSH
66219: LD_VAR 0 1
66223: PPUSH
66224: CALL_OW 310
66228: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66229: LD_VAR 0 1
66233: PPUSH
66234: LD_STRING \
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: LD_INT 0
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: PUSH
66264: LD_STRING E
66266: PUSH
66267: LD_INT 0
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: LD_VAR 0 3
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: LD_INT 0
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PPUSH
66300: CALL_OW 447
// end ;
66304: LD_VAR 0 2
66308: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66309: LD_INT 0
66311: PPUSH
66312: PPUSH
66313: PPUSH
// tmp := [ ] ;
66314: LD_ADDR_VAR 0 5
66318: PUSH
66319: EMPTY
66320: ST_TO_ADDR
// for i in units do
66321: LD_ADDR_VAR 0 4
66325: PUSH
66326: LD_VAR 0 1
66330: PUSH
66331: FOR_IN
66332: IFFALSE 66370
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66334: LD_ADDR_VAR 0 5
66338: PUSH
66339: LD_VAR 0 5
66343: PPUSH
66344: LD_VAR 0 5
66348: PUSH
66349: LD_INT 1
66351: PLUS
66352: PPUSH
66353: LD_VAR 0 4
66357: PPUSH
66358: CALL_OW 256
66362: PPUSH
66363: CALL_OW 2
66367: ST_TO_ADDR
66368: GO 66331
66370: POP
66371: POP
// if not tmp then
66372: LD_VAR 0 5
66376: NOT
66377: IFFALSE 66381
// exit ;
66379: GO 66429
// if asc then
66381: LD_VAR 0 2
66385: IFFALSE 66409
// result := SortListByListAsc ( units , tmp ) else
66387: LD_ADDR_VAR 0 3
66391: PUSH
66392: LD_VAR 0 1
66396: PPUSH
66397: LD_VAR 0 5
66401: PPUSH
66402: CALL_OW 76
66406: ST_TO_ADDR
66407: GO 66429
// result := SortListByListDesc ( units , tmp ) ;
66409: LD_ADDR_VAR 0 3
66413: PUSH
66414: LD_VAR 0 1
66418: PPUSH
66419: LD_VAR 0 5
66423: PPUSH
66424: CALL_OW 77
66428: ST_TO_ADDR
// end ;
66429: LD_VAR 0 3
66433: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66434: LD_INT 0
66436: PPUSH
66437: PPUSH
// task := GetTaskList ( mech ) ;
66438: LD_ADDR_VAR 0 4
66442: PUSH
66443: LD_VAR 0 1
66447: PPUSH
66448: CALL_OW 437
66452: ST_TO_ADDR
// if not task then
66453: LD_VAR 0 4
66457: NOT
66458: IFFALSE 66462
// exit ;
66460: GO 66504
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66462: LD_ADDR_VAR 0 3
66466: PUSH
66467: LD_VAR 0 4
66471: PUSH
66472: LD_INT 1
66474: ARRAY
66475: PUSH
66476: LD_INT 1
66478: ARRAY
66479: PUSH
66480: LD_STRING r
66482: EQUAL
66483: PUSH
66484: LD_VAR 0 4
66488: PUSH
66489: LD_INT 1
66491: ARRAY
66492: PUSH
66493: LD_INT 4
66495: ARRAY
66496: PUSH
66497: LD_VAR 0 2
66501: EQUAL
66502: AND
66503: ST_TO_ADDR
// end ;
66504: LD_VAR 0 3
66508: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66509: LD_INT 0
66511: PPUSH
// SetDir ( unit , d ) ;
66512: LD_VAR 0 1
66516: PPUSH
66517: LD_VAR 0 4
66521: PPUSH
66522: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66526: LD_VAR 0 1
66530: PPUSH
66531: LD_VAR 0 2
66535: PPUSH
66536: LD_VAR 0 3
66540: PPUSH
66541: LD_VAR 0 5
66545: PPUSH
66546: CALL_OW 48
// end ;
66550: LD_VAR 0 6
66554: RET
// export function ToNaturalNumber ( number ) ; begin
66555: LD_INT 0
66557: PPUSH
// result := number div 1 ;
66558: LD_ADDR_VAR 0 2
66562: PUSH
66563: LD_VAR 0 1
66567: PUSH
66568: LD_INT 1
66570: DIV
66571: ST_TO_ADDR
// if number < 0 then
66572: LD_VAR 0 1
66576: PUSH
66577: LD_INT 0
66579: LESS
66580: IFFALSE 66590
// result := 0 ;
66582: LD_ADDR_VAR 0 2
66586: PUSH
66587: LD_INT 0
66589: ST_TO_ADDR
// end ;
66590: LD_VAR 0 2
66594: RET
// export function SortByClass ( units , class ) ; var un ; begin
66595: LD_INT 0
66597: PPUSH
66598: PPUSH
// if not units or not class then
66599: LD_VAR 0 1
66603: NOT
66604: PUSH
66605: LD_VAR 0 2
66609: NOT
66610: OR
66611: IFFALSE 66615
// exit ;
66613: GO 66710
// result := [ ] ;
66615: LD_ADDR_VAR 0 3
66619: PUSH
66620: EMPTY
66621: ST_TO_ADDR
// for un in units do
66622: LD_ADDR_VAR 0 4
66626: PUSH
66627: LD_VAR 0 1
66631: PUSH
66632: FOR_IN
66633: IFFALSE 66708
// if GetClass ( un ) = class then
66635: LD_VAR 0 4
66639: PPUSH
66640: CALL_OW 257
66644: PUSH
66645: LD_VAR 0 2
66649: EQUAL
66650: IFFALSE 66677
// result := Insert ( result , 1 , un ) else
66652: LD_ADDR_VAR 0 3
66656: PUSH
66657: LD_VAR 0 3
66661: PPUSH
66662: LD_INT 1
66664: PPUSH
66665: LD_VAR 0 4
66669: PPUSH
66670: CALL_OW 2
66674: ST_TO_ADDR
66675: GO 66706
// result := Replace ( result , result + 1 , un ) ;
66677: LD_ADDR_VAR 0 3
66681: PUSH
66682: LD_VAR 0 3
66686: PPUSH
66687: LD_VAR 0 3
66691: PUSH
66692: LD_INT 1
66694: PLUS
66695: PPUSH
66696: LD_VAR 0 4
66700: PPUSH
66701: CALL_OW 1
66705: ST_TO_ADDR
66706: GO 66632
66708: POP
66709: POP
// end ;
66710: LD_VAR 0 3
66714: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66715: LD_INT 0
66717: PPUSH
66718: PPUSH
66719: PPUSH
66720: PPUSH
66721: PPUSH
66722: PPUSH
66723: PPUSH
// result := [ ] ;
66724: LD_ADDR_VAR 0 4
66728: PUSH
66729: EMPTY
66730: ST_TO_ADDR
// if x - r < 0 then
66731: LD_VAR 0 1
66735: PUSH
66736: LD_VAR 0 3
66740: MINUS
66741: PUSH
66742: LD_INT 0
66744: LESS
66745: IFFALSE 66757
// min_x := 0 else
66747: LD_ADDR_VAR 0 8
66751: PUSH
66752: LD_INT 0
66754: ST_TO_ADDR
66755: GO 66773
// min_x := x - r ;
66757: LD_ADDR_VAR 0 8
66761: PUSH
66762: LD_VAR 0 1
66766: PUSH
66767: LD_VAR 0 3
66771: MINUS
66772: ST_TO_ADDR
// if y - r < 0 then
66773: LD_VAR 0 2
66777: PUSH
66778: LD_VAR 0 3
66782: MINUS
66783: PUSH
66784: LD_INT 0
66786: LESS
66787: IFFALSE 66799
// min_y := 0 else
66789: LD_ADDR_VAR 0 7
66793: PUSH
66794: LD_INT 0
66796: ST_TO_ADDR
66797: GO 66815
// min_y := y - r ;
66799: LD_ADDR_VAR 0 7
66803: PUSH
66804: LD_VAR 0 2
66808: PUSH
66809: LD_VAR 0 3
66813: MINUS
66814: ST_TO_ADDR
// max_x := x + r ;
66815: LD_ADDR_VAR 0 9
66819: PUSH
66820: LD_VAR 0 1
66824: PUSH
66825: LD_VAR 0 3
66829: PLUS
66830: ST_TO_ADDR
// max_y := y + r ;
66831: LD_ADDR_VAR 0 10
66835: PUSH
66836: LD_VAR 0 2
66840: PUSH
66841: LD_VAR 0 3
66845: PLUS
66846: ST_TO_ADDR
// for _x = min_x to max_x do
66847: LD_ADDR_VAR 0 5
66851: PUSH
66852: DOUBLE
66853: LD_VAR 0 8
66857: DEC
66858: ST_TO_ADDR
66859: LD_VAR 0 9
66863: PUSH
66864: FOR_TO
66865: IFFALSE 66966
// for _y = min_y to max_y do
66867: LD_ADDR_VAR 0 6
66871: PUSH
66872: DOUBLE
66873: LD_VAR 0 7
66877: DEC
66878: ST_TO_ADDR
66879: LD_VAR 0 10
66883: PUSH
66884: FOR_TO
66885: IFFALSE 66962
// begin if not ValidHex ( _x , _y ) then
66887: LD_VAR 0 5
66891: PPUSH
66892: LD_VAR 0 6
66896: PPUSH
66897: CALL_OW 488
66901: NOT
66902: IFFALSE 66906
// continue ;
66904: GO 66884
// if GetResourceTypeXY ( _x , _y ) then
66906: LD_VAR 0 5
66910: PPUSH
66911: LD_VAR 0 6
66915: PPUSH
66916: CALL_OW 283
66920: IFFALSE 66960
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66922: LD_ADDR_VAR 0 4
66926: PUSH
66927: LD_VAR 0 4
66931: PPUSH
66932: LD_VAR 0 4
66936: PUSH
66937: LD_INT 1
66939: PLUS
66940: PPUSH
66941: LD_VAR 0 5
66945: PUSH
66946: LD_VAR 0 6
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PPUSH
66955: CALL_OW 1
66959: ST_TO_ADDR
// end ;
66960: GO 66884
66962: POP
66963: POP
66964: GO 66864
66966: POP
66967: POP
// end ;
66968: LD_VAR 0 4
66972: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66973: LD_INT 0
66975: PPUSH
66976: PPUSH
66977: PPUSH
66978: PPUSH
66979: PPUSH
66980: PPUSH
66981: PPUSH
66982: PPUSH
// if not units then
66983: LD_VAR 0 1
66987: NOT
66988: IFFALSE 66992
// exit ;
66990: GO 67516
// result := UnitFilter ( units , [ f_ok ] ) ;
66992: LD_ADDR_VAR 0 3
66996: PUSH
66997: LD_VAR 0 1
67001: PPUSH
67002: LD_INT 50
67004: PUSH
67005: EMPTY
67006: LIST
67007: PPUSH
67008: CALL_OW 72
67012: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67013: LD_ADDR_VAR 0 8
67017: PUSH
67018: LD_VAR 0 1
67022: PUSH
67023: LD_INT 1
67025: ARRAY
67026: PPUSH
67027: CALL_OW 255
67031: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67032: LD_ADDR_VAR 0 10
67036: PUSH
67037: LD_INT 29
67039: PUSH
67040: LD_INT 91
67042: PUSH
67043: LD_INT 49
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: ST_TO_ADDR
// if not result then
67051: LD_VAR 0 3
67055: NOT
67056: IFFALSE 67060
// exit ;
67058: GO 67516
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67060: LD_ADDR_VAR 0 5
67064: PUSH
67065: LD_INT 81
67067: PUSH
67068: LD_VAR 0 8
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PPUSH
67077: CALL_OW 69
67081: ST_TO_ADDR
// for i in result do
67082: LD_ADDR_VAR 0 4
67086: PUSH
67087: LD_VAR 0 3
67091: PUSH
67092: FOR_IN
67093: IFFALSE 67514
// begin tag := GetTag ( i ) + 1 ;
67095: LD_ADDR_VAR 0 9
67099: PUSH
67100: LD_VAR 0 4
67104: PPUSH
67105: CALL_OW 110
67109: PUSH
67110: LD_INT 1
67112: PLUS
67113: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67114: LD_ADDR_VAR 0 7
67118: PUSH
67119: LD_VAR 0 4
67123: PPUSH
67124: CALL_OW 250
67128: PPUSH
67129: LD_VAR 0 4
67133: PPUSH
67134: CALL_OW 251
67138: PPUSH
67139: LD_INT 6
67141: PPUSH
67142: CALL 66715 0 3
67146: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67147: LD_VAR 0 4
67151: PPUSH
67152: CALL_OW 247
67156: PUSH
67157: LD_INT 2
67159: EQUAL
67160: PUSH
67161: LD_VAR 0 7
67165: AND
67166: PUSH
67167: LD_VAR 0 4
67171: PPUSH
67172: CALL_OW 264
67176: PUSH
67177: LD_VAR 0 10
67181: IN
67182: NOT
67183: AND
67184: IFFALSE 67223
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67186: LD_VAR 0 4
67190: PPUSH
67191: LD_VAR 0 7
67195: PUSH
67196: LD_INT 1
67198: ARRAY
67199: PUSH
67200: LD_INT 1
67202: ARRAY
67203: PPUSH
67204: LD_VAR 0 7
67208: PUSH
67209: LD_INT 1
67211: ARRAY
67212: PUSH
67213: LD_INT 2
67215: ARRAY
67216: PPUSH
67217: CALL_OW 116
67221: GO 67512
// if path > tag then
67223: LD_VAR 0 2
67227: PUSH
67228: LD_VAR 0 9
67232: GREATER
67233: IFFALSE 67441
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67235: LD_ADDR_VAR 0 6
67239: PUSH
67240: LD_VAR 0 5
67244: PPUSH
67245: LD_INT 91
67247: PUSH
67248: LD_VAR 0 4
67252: PUSH
67253: LD_INT 8
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: LIST
67260: PPUSH
67261: CALL_OW 72
67265: ST_TO_ADDR
// if nearEnemy then
67266: LD_VAR 0 6
67270: IFFALSE 67339
// begin if GetWeapon ( i ) = ru_time_lapser then
67272: LD_VAR 0 4
67276: PPUSH
67277: CALL_OW 264
67281: PUSH
67282: LD_INT 49
67284: EQUAL
67285: IFFALSE 67313
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67287: LD_VAR 0 4
67291: PPUSH
67292: LD_VAR 0 6
67296: PPUSH
67297: LD_VAR 0 4
67301: PPUSH
67302: CALL_OW 74
67306: PPUSH
67307: CALL_OW 112
67311: GO 67337
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67313: LD_VAR 0 4
67317: PPUSH
67318: LD_VAR 0 6
67322: PPUSH
67323: LD_VAR 0 4
67327: PPUSH
67328: CALL_OW 74
67332: PPUSH
67333: CALL_OW 115
// end else
67337: GO 67439
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67339: LD_VAR 0 4
67343: PPUSH
67344: LD_VAR 0 2
67348: PUSH
67349: LD_VAR 0 9
67353: ARRAY
67354: PUSH
67355: LD_INT 1
67357: ARRAY
67358: PPUSH
67359: LD_VAR 0 2
67363: PUSH
67364: LD_VAR 0 9
67368: ARRAY
67369: PUSH
67370: LD_INT 2
67372: ARRAY
67373: PPUSH
67374: CALL_OW 297
67378: PUSH
67379: LD_INT 6
67381: GREATER
67382: IFFALSE 67425
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67384: LD_VAR 0 4
67388: PPUSH
67389: LD_VAR 0 2
67393: PUSH
67394: LD_VAR 0 9
67398: ARRAY
67399: PUSH
67400: LD_INT 1
67402: ARRAY
67403: PPUSH
67404: LD_VAR 0 2
67408: PUSH
67409: LD_VAR 0 9
67413: ARRAY
67414: PUSH
67415: LD_INT 2
67417: ARRAY
67418: PPUSH
67419: CALL_OW 114
67423: GO 67439
// SetTag ( i , tag ) ;
67425: LD_VAR 0 4
67429: PPUSH
67430: LD_VAR 0 9
67434: PPUSH
67435: CALL_OW 109
// end else
67439: GO 67512
// if enemy then
67441: LD_VAR 0 5
67445: IFFALSE 67512
// begin if GetWeapon ( i ) = ru_time_lapser then
67447: LD_VAR 0 4
67451: PPUSH
67452: CALL_OW 264
67456: PUSH
67457: LD_INT 49
67459: EQUAL
67460: IFFALSE 67488
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67462: LD_VAR 0 4
67466: PPUSH
67467: LD_VAR 0 5
67471: PPUSH
67472: LD_VAR 0 4
67476: PPUSH
67477: CALL_OW 74
67481: PPUSH
67482: CALL_OW 112
67486: GO 67512
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67488: LD_VAR 0 4
67492: PPUSH
67493: LD_VAR 0 5
67497: PPUSH
67498: LD_VAR 0 4
67502: PPUSH
67503: CALL_OW 74
67507: PPUSH
67508: CALL_OW 115
// end ; end ;
67512: GO 67092
67514: POP
67515: POP
// end ;
67516: LD_VAR 0 3
67520: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67521: LD_INT 0
67523: PPUSH
67524: PPUSH
67525: PPUSH
// if not unit or IsInUnit ( unit ) then
67526: LD_VAR 0 1
67530: NOT
67531: PUSH
67532: LD_VAR 0 1
67536: PPUSH
67537: CALL_OW 310
67541: OR
67542: IFFALSE 67546
// exit ;
67544: GO 67637
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67546: LD_ADDR_VAR 0 4
67550: PUSH
67551: LD_VAR 0 1
67555: PPUSH
67556: CALL_OW 250
67560: PPUSH
67561: LD_VAR 0 2
67565: PPUSH
67566: LD_INT 1
67568: PPUSH
67569: CALL_OW 272
67573: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67574: LD_ADDR_VAR 0 5
67578: PUSH
67579: LD_VAR 0 1
67583: PPUSH
67584: CALL_OW 251
67588: PPUSH
67589: LD_VAR 0 2
67593: PPUSH
67594: LD_INT 1
67596: PPUSH
67597: CALL_OW 273
67601: ST_TO_ADDR
// if ValidHex ( x , y ) then
67602: LD_VAR 0 4
67606: PPUSH
67607: LD_VAR 0 5
67611: PPUSH
67612: CALL_OW 488
67616: IFFALSE 67637
// ComTurnXY ( unit , x , y ) ;
67618: LD_VAR 0 1
67622: PPUSH
67623: LD_VAR 0 4
67627: PPUSH
67628: LD_VAR 0 5
67632: PPUSH
67633: CALL_OW 118
// end ;
67637: LD_VAR 0 3
67641: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67642: LD_INT 0
67644: PPUSH
67645: PPUSH
// result := false ;
67646: LD_ADDR_VAR 0 3
67650: PUSH
67651: LD_INT 0
67653: ST_TO_ADDR
// if not units then
67654: LD_VAR 0 2
67658: NOT
67659: IFFALSE 67663
// exit ;
67661: GO 67708
// for i in units do
67663: LD_ADDR_VAR 0 4
67667: PUSH
67668: LD_VAR 0 2
67672: PUSH
67673: FOR_IN
67674: IFFALSE 67706
// if See ( side , i ) then
67676: LD_VAR 0 1
67680: PPUSH
67681: LD_VAR 0 4
67685: PPUSH
67686: CALL_OW 292
67690: IFFALSE 67704
// begin result := true ;
67692: LD_ADDR_VAR 0 3
67696: PUSH
67697: LD_INT 1
67699: ST_TO_ADDR
// exit ;
67700: POP
67701: POP
67702: GO 67708
// end ;
67704: GO 67673
67706: POP
67707: POP
// end ;
67708: LD_VAR 0 3
67712: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67713: LD_INT 0
67715: PPUSH
67716: PPUSH
67717: PPUSH
67718: PPUSH
// if not unit or not points then
67719: LD_VAR 0 1
67723: NOT
67724: PUSH
67725: LD_VAR 0 2
67729: NOT
67730: OR
67731: IFFALSE 67735
// exit ;
67733: GO 67825
// dist := 99999 ;
67735: LD_ADDR_VAR 0 5
67739: PUSH
67740: LD_INT 99999
67742: ST_TO_ADDR
// for i in points do
67743: LD_ADDR_VAR 0 4
67747: PUSH
67748: LD_VAR 0 2
67752: PUSH
67753: FOR_IN
67754: IFFALSE 67823
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67756: LD_ADDR_VAR 0 6
67760: PUSH
67761: LD_VAR 0 1
67765: PPUSH
67766: LD_VAR 0 4
67770: PUSH
67771: LD_INT 1
67773: ARRAY
67774: PPUSH
67775: LD_VAR 0 4
67779: PUSH
67780: LD_INT 2
67782: ARRAY
67783: PPUSH
67784: CALL_OW 297
67788: ST_TO_ADDR
// if tmpDist < dist then
67789: LD_VAR 0 6
67793: PUSH
67794: LD_VAR 0 5
67798: LESS
67799: IFFALSE 67821
// begin result := i ;
67801: LD_ADDR_VAR 0 3
67805: PUSH
67806: LD_VAR 0 4
67810: ST_TO_ADDR
// dist := tmpDist ;
67811: LD_ADDR_VAR 0 5
67815: PUSH
67816: LD_VAR 0 6
67820: ST_TO_ADDR
// end ; end ;
67821: GO 67753
67823: POP
67824: POP
// end ;
67825: LD_VAR 0 3
67829: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67830: LD_INT 0
67832: PPUSH
// uc_side := side ;
67833: LD_ADDR_OWVAR 20
67837: PUSH
67838: LD_VAR 0 1
67842: ST_TO_ADDR
// uc_nation := 3 ;
67843: LD_ADDR_OWVAR 21
67847: PUSH
67848: LD_INT 3
67850: ST_TO_ADDR
// vc_chassis := 25 ;
67851: LD_ADDR_OWVAR 37
67855: PUSH
67856: LD_INT 25
67858: ST_TO_ADDR
// vc_engine := engine_siberite ;
67859: LD_ADDR_OWVAR 39
67863: PUSH
67864: LD_INT 3
67866: ST_TO_ADDR
// vc_control := control_computer ;
67867: LD_ADDR_OWVAR 38
67871: PUSH
67872: LD_INT 3
67874: ST_TO_ADDR
// vc_weapon := 59 ;
67875: LD_ADDR_OWVAR 40
67879: PUSH
67880: LD_INT 59
67882: ST_TO_ADDR
// result := CreateVehicle ;
67883: LD_ADDR_VAR 0 5
67887: PUSH
67888: CALL_OW 45
67892: ST_TO_ADDR
// SetDir ( result , d ) ;
67893: LD_VAR 0 5
67897: PPUSH
67898: LD_VAR 0 4
67902: PPUSH
67903: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67907: LD_VAR 0 5
67911: PPUSH
67912: LD_VAR 0 2
67916: PPUSH
67917: LD_VAR 0 3
67921: PPUSH
67922: LD_INT 0
67924: PPUSH
67925: CALL_OW 48
// end ;
67929: LD_VAR 0 5
67933: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67934: LD_INT 0
67936: PPUSH
67937: PPUSH
67938: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67939: LD_ADDR_VAR 0 2
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: LD_INT 0
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: LD_INT 0
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67962: LD_VAR 0 1
67966: NOT
67967: PUSH
67968: LD_VAR 0 1
67972: PPUSH
67973: CALL_OW 264
67977: PUSH
67978: LD_INT 12
67980: PUSH
67981: LD_INT 51
67983: PUSH
67984: LD_INT 32
67986: PUSH
67987: LD_INT 89
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: IN
67996: NOT
67997: OR
67998: IFFALSE 68002
// exit ;
68000: GO 68100
// for i := 1 to 3 do
68002: LD_ADDR_VAR 0 3
68006: PUSH
68007: DOUBLE
68008: LD_INT 1
68010: DEC
68011: ST_TO_ADDR
68012: LD_INT 3
68014: PUSH
68015: FOR_TO
68016: IFFALSE 68098
// begin tmp := GetCargo ( cargo , i ) ;
68018: LD_ADDR_VAR 0 4
68022: PUSH
68023: LD_VAR 0 1
68027: PPUSH
68028: LD_VAR 0 3
68032: PPUSH
68033: CALL_OW 289
68037: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68038: LD_ADDR_VAR 0 2
68042: PUSH
68043: LD_VAR 0 2
68047: PPUSH
68048: LD_VAR 0 3
68052: PPUSH
68053: LD_VAR 0 4
68057: PPUSH
68058: CALL_OW 1
68062: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68063: LD_ADDR_VAR 0 2
68067: PUSH
68068: LD_VAR 0 2
68072: PPUSH
68073: LD_INT 4
68075: PPUSH
68076: LD_VAR 0 2
68080: PUSH
68081: LD_INT 4
68083: ARRAY
68084: PUSH
68085: LD_VAR 0 4
68089: PLUS
68090: PPUSH
68091: CALL_OW 1
68095: ST_TO_ADDR
// end ;
68096: GO 68015
68098: POP
68099: POP
// end ;
68100: LD_VAR 0 2
68104: RET
// export function Length ( array ) ; begin
68105: LD_INT 0
68107: PPUSH
// result := array + 0 ;
68108: LD_ADDR_VAR 0 2
68112: PUSH
68113: LD_VAR 0 1
68117: PUSH
68118: LD_INT 0
68120: PLUS
68121: ST_TO_ADDR
// end ;
68122: LD_VAR 0 2
68126: RET
// export function PrepareArray ( array ) ; begin
68127: LD_INT 0
68129: PPUSH
// result := array diff 0 ;
68130: LD_ADDR_VAR 0 2
68134: PUSH
68135: LD_VAR 0 1
68139: PUSH
68140: LD_INT 0
68142: DIFF
68143: ST_TO_ADDR
// if not result [ 1 ] then
68144: LD_VAR 0 2
68148: PUSH
68149: LD_INT 1
68151: ARRAY
68152: NOT
68153: IFFALSE 68173
// result := Delete ( result , 1 ) ;
68155: LD_ADDR_VAR 0 2
68159: PUSH
68160: LD_VAR 0 2
68164: PPUSH
68165: LD_INT 1
68167: PPUSH
68168: CALL_OW 3
68172: ST_TO_ADDR
// end ; end_of_file
68173: LD_VAR 0 2
68177: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68178: LD_VAR 0 1
68182: PUSH
68183: LD_INT 200
68185: DOUBLE
68186: GREATEREQUAL
68187: IFFALSE 68195
68189: LD_INT 299
68191: DOUBLE
68192: LESSEQUAL
68193: IFTRUE 68197
68195: GO 68229
68197: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68198: LD_VAR 0 1
68202: PPUSH
68203: LD_VAR 0 2
68207: PPUSH
68208: LD_VAR 0 3
68212: PPUSH
68213: LD_VAR 0 4
68217: PPUSH
68218: LD_VAR 0 5
68222: PPUSH
68223: CALL 23080 0 5
68227: GO 68306
68229: LD_INT 300
68231: DOUBLE
68232: GREATEREQUAL
68233: IFFALSE 68241
68235: LD_INT 399
68237: DOUBLE
68238: LESSEQUAL
68239: IFTRUE 68243
68241: GO 68305
68243: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68244: LD_VAR 0 1
68248: PPUSH
68249: LD_VAR 0 2
68253: PPUSH
68254: LD_VAR 0 3
68258: PPUSH
68259: LD_VAR 0 4
68263: PPUSH
68264: LD_VAR 0 5
68268: PPUSH
68269: LD_VAR 0 6
68273: PPUSH
68274: LD_VAR 0 7
68278: PPUSH
68279: LD_VAR 0 8
68283: PPUSH
68284: LD_VAR 0 9
68288: PPUSH
68289: LD_VAR 0 10
68293: PPUSH
68294: LD_VAR 0 11
68298: PPUSH
68299: CALL 19413 0 11
68303: GO 68306
68305: POP
// end ;
68306: PPOPN 11
68308: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68309: LD_VAR 0 1
68313: PPUSH
68314: LD_VAR 0 2
68318: PPUSH
68319: LD_VAR 0 3
68323: PPUSH
68324: LD_VAR 0 4
68328: PPUSH
68329: LD_VAR 0 5
68333: PPUSH
68334: CALL 22816 0 5
// end ; end_of_file
68338: PPOPN 5
68340: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68341: LD_VAR 0 1
68345: PPUSH
68346: LD_VAR 0 2
68350: PPUSH
68351: LD_VAR 0 3
68355: PPUSH
68356: LD_VAR 0 4
68360: PPUSH
68361: LD_VAR 0 5
68365: PPUSH
68366: LD_VAR 0 6
68370: PPUSH
68371: CALL 7106 0 6
// end ;
68375: PPOPN 6
68377: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68378: LD_INT 0
68380: PPUSH
// begin if not units then
68381: LD_VAR 0 1
68385: NOT
68386: IFFALSE 68390
// exit ;
68388: GO 68390
// end ;
68390: PPOPN 7
68392: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68393: CALL 7077 0 0
// end ;
68397: PPOPN 1
68399: END
