// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 181 0 0
// PrepareAllies ;
  12: CALL 2172 0 0
// Action ;
  16: CALL 4314 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 133 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 8
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 9
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 11
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 13
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// bonus_num := 0 ;
 120: LD_ADDR_EXP 12
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ;
 128: LD_VAR 0 1
 132: RET
// export function SetDiplomacy ; begin
 133: LD_INT 0
 135: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 136: LD_INT 92
 138: PPUSH
 139: LD_INT 48
 141: PPUSH
 142: LD_INT 8
 144: PPUSH
 145: LD_INT 32796
 147: NEG
 148: PPUSH
 149: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 153: LD_INT 92
 155: PPUSH
 156: LD_INT 48
 158: PPUSH
 159: LD_INT 8
 161: PPUSH
 162: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 166: LD_INT 5
 168: PPUSH
 169: LD_INT 8
 171: PPUSH
 172: CALL_OW 343
// end ; end_of_file
 176: LD_VAR 0 1
 180: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 181: LD_INT 0
 183: PPUSH
 184: PPUSH
 185: PPUSH
 186: PPUSH
 187: PPUSH
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
 197: PPUSH
 198: PPUSH
 199: PPUSH
 200: PPUSH
// uc_side := 2 ;
 201: LD_ADDR_OWVAR 20
 205: PUSH
 206: LD_INT 2
 208: ST_TO_ADDR
// uc_nation := nation_arabian ;
 209: LD_ADDR_OWVAR 21
 213: PUSH
 214: LD_INT 2
 216: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: LD_INT 6
 225: PPUSH
 226: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 230: LD_ADDR_OWVAR 26
 234: PUSH
 235: LD_STRING Nicolas Vervecken
 237: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 238: LD_ADDR_OWVAR 33
 242: PUSH
 243: LD_STRING SecondCharsGal
 245: ST_TO_ADDR
// hc_face_number := 3 ;
 246: LD_ADDR_OWVAR 34
 250: PUSH
 251: LD_INT 3
 253: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 254: LD_ADDR_OWVAR 29
 258: PUSH
 259: LD_INT 11
 261: PUSH
 262: LD_INT 10
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// Vervecken := CreateHuman ;
 269: LD_ADDR_EXP 10
 273: PUSH
 274: CALL_OW 44
 278: ST_TO_ADDR
// InitHc ;
 279: CALL_OW 19
// uc_side := 8 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 8
 290: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 291: LD_INT 23
 293: PPUSH
 294: CALL_OW 274
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 4000
 304: PUSH
 305: LD_INT 2500
 307: PUSH
 308: LD_INT 1250
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_OWVAR 67
 320: ARRAY
 321: PPUSH
 322: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 326: LD_INT 23
 328: PPUSH
 329: CALL_OW 274
 333: PPUSH
 334: LD_INT 2
 336: PPUSH
 337: LD_INT 300
 339: PPUSH
 340: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 3
 354: PPUSH
 355: LD_INT 100
 357: PUSH
 358: LD_INT 50
 360: PUSH
 361: LD_INT 30
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 379: LD_ADDR_VAR 0 14
 383: PUSH
 384: LD_INT 23
 386: PPUSH
 387: CALL_OW 250
 391: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 392: LD_ADDR_VAR 0 15
 396: PUSH
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 251
 404: ST_TO_ADDR
// team := [ ] ;
 405: LD_ADDR_VAR 0 7
 409: PUSH
 410: EMPTY
 411: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 412: LD_ADDR_VAR 0 8
 416: PUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 8
 422: PUSH
 423: LD_INT 7
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: PUSH
 431: LD_OWVAR 67
 435: ARRAY
 436: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 437: LD_ADDR_VAR 0 9
 441: PUSH
 442: LD_INT 11
 444: PUSH
 445: LD_INT 9
 447: PUSH
 448: LD_INT 8
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_OWVAR 67
 460: ARRAY
 461: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 462: LD_ADDR_VAR 0 10
 466: PUSH
 467: LD_INT 3
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PUSH
 481: LD_OWVAR 67
 485: ARRAY
 486: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 487: LD_ADDR_VAR 0 11
 491: PUSH
 492: LD_INT 5
 494: PUSH
 495: LD_INT 4
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 512: LD_ADDR_VAR 0 12
 516: PUSH
 517: LD_INT 3
 519: PUSH
 520: LD_INT 2
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_OWVAR 67
 535: ARRAY
 536: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 537: LD_ADDR_VAR 0 13
 541: PUSH
 542: LD_INT 6
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: PUSH
 556: LD_OWVAR 67
 560: ARRAY
 561: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 562: LD_ADDR_VAR 0 18
 566: PUSH
 567: LD_INT 13
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 26
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 14
 587: PUSH
 588: LD_INT 3
 590: PUSH
 591: LD_INT 1
 593: PUSH
 594: LD_INT 25
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 14
 605: PUSH
 606: LD_INT 3
 608: PUSH
 609: LD_INT 5
 611: PUSH
 612: LD_INT 32
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 14
 623: PUSH
 624: LD_INT 3
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 31
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 14
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: LD_INT 24
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 14
 659: PUSH
 660: LD_INT 3
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 25
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 13
 677: PUSH
 678: LD_INT 3
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: LD_INT 24
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 18
 716: PUSH
 717: LD_OWVAR 67
 721: MINUS
 722: PUSH
 723: LD_INT 1
 725: PLUS
 726: PUSH
 727: FOR_TO
 728: IFFALSE 857
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 730: LD_ADDR_OWVAR 37
 734: PUSH
 735: LD_VAR 0 18
 739: PUSH
 740: LD_VAR 0 2
 744: ARRAY
 745: PUSH
 746: LD_INT 1
 748: ARRAY
 749: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 750: LD_ADDR_OWVAR 39
 754: PUSH
 755: LD_VAR 0 18
 759: PUSH
 760: LD_VAR 0 2
 764: ARRAY
 765: PUSH
 766: LD_INT 2
 768: ARRAY
 769: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 770: LD_ADDR_OWVAR 38
 774: PUSH
 775: LD_VAR 0 18
 779: PUSH
 780: LD_VAR 0 2
 784: ARRAY
 785: PUSH
 786: LD_INT 3
 788: ARRAY
 789: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 790: LD_ADDR_OWVAR 40
 794: PUSH
 795: LD_VAR 0 18
 799: PUSH
 800: LD_VAR 0 2
 804: ARRAY
 805: PUSH
 806: LD_INT 4
 808: ARRAY
 809: ST_TO_ADDR
// un := CreateVehicle ;
 810: LD_ADDR_VAR 0 6
 814: PUSH
 815: CALL_OW 45
 819: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 820: LD_VAR 0 6
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: LD_INT 5
 830: PPUSH
 831: CALL_OW 12
 835: PPUSH
 836: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 840: LD_VAR 0 6
 844: PPUSH
 845: LD_INT 7
 847: PPUSH
 848: LD_INT 0
 850: PPUSH
 851: CALL_OW 49
// end ;
 855: GO 727
 857: POP
 858: POP
// for i = 1 to ape_num do
 859: LD_ADDR_VAR 0 2
 863: PUSH
 864: DOUBLE
 865: LD_INT 1
 867: DEC
 868: ST_TO_ADDR
 869: LD_VAR 0 13
 873: PUSH
 874: FOR_TO
 875: IFFALSE 942
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 877: LD_INT 0
 879: PPUSH
 880: LD_INT 16
 882: PUSH
 883: LD_INT 15
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 2
 895: PPUSH
 896: CALL_OW 12
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 8
 906: PPUSH
 907: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 911: LD_ADDR_VAR 0 7
 915: PUSH
 916: LD_VAR 0 7
 920: PPUSH
 921: LD_VAR 0 7
 925: PUSH
 926: LD_INT 1
 928: PLUS
 929: PPUSH
 930: CALL_OW 44
 934: PPUSH
 935: CALL_OW 2
 939: ST_TO_ADDR
// end ;
 940: GO 874
 942: POP
 943: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 1
 949: PPUSH
 950: LD_VAR 0 8
 954: PPUSH
 955: CALL_OW 380
// l1 := CreateHuman ;
 959: LD_ADDR_EXP 2
 963: PUSH
 964: CALL_OW 44
 968: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
 969: LD_EXP 2
 973: PPUSH
 974: LD_INT 23
 976: PPUSH
 977: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
 981: LD_INT 1
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_VAR 0 8
 991: PPUSH
 992: CALL_OW 380
// l2 := CreateHuman ;
 996: LD_ADDR_EXP 3
1000: PUSH
1001: CALL_OW 44
1005: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1006: LD_EXP 3
1010: PPUSH
1011: LD_INT 23
1013: PPUSH
1014: CALL_OW 52
// for class = 1 to 4 do
1018: LD_ADDR_VAR 0 4
1022: PUSH
1023: DOUBLE
1024: LD_INT 1
1026: DEC
1027: ST_TO_ADDR
1028: LD_INT 4
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1131
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_VAR 0 9
1048: PUSH
1049: LD_VAR 0 10
1053: PUSH
1054: LD_VAR 0 11
1058: PUSH
1059: LD_VAR 0 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_VAR 0 4
1074: ARRAY
1075: PUSH
1076: FOR_TO
1077: IFFALSE 1127
// begin PrepareHuman ( false , class , skill ) ;
1079: LD_INT 0
1081: PPUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 8
1091: PPUSH
1092: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1096: LD_ADDR_VAR 0 7
1100: PUSH
1101: LD_VAR 0 7
1105: PPUSH
1106: LD_VAR 0 7
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: PPUSH
1115: CALL_OW 44
1119: PPUSH
1120: CALL_OW 2
1124: ST_TO_ADDR
// end ;
1125: GO 1076
1127: POP
1128: POP
1129: GO 1031
1131: POP
1132: POP
// for i in team do
1133: LD_ADDR_VAR 0 2
1137: PUSH
1138: LD_VAR 0 7
1142: PUSH
1143: FOR_IN
1144: IFFALSE 1620
// begin b := 0 ;
1146: LD_ADDR_VAR 0 5
1150: PUSH
1151: LD_INT 0
1153: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1154: LD_VAR 0 2
1158: PPUSH
1159: CALL_OW 257
1163: PUSH
1164: LD_INT 1
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1279
1172: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_OWVAR 20
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 2
1192: PUSH
1193: LD_INT 30
1195: PUSH
1196: LD_INT 32
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 31
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 58
1220: PUSH
1221: EMPTY
1222: LIST
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: PPUSH
1229: CALL_OW 69
1233: ST_TO_ADDR
// if not b then
1234: LD_VAR 0 5
1238: NOT
1239: IFFALSE 1277
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1241: LD_ADDR_VAR 0 5
1245: PUSH
1246: LD_INT 22
1248: PUSH
1249: LD_OWVAR 20
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 30
1260: PUSH
1261: LD_INT 5
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PPUSH
1272: CALL_OW 69
1276: ST_TO_ADDR
// end ; class_engineer :
1277: GO 1518
1279: LD_INT 2
1281: DOUBLE
1282: EQUAL
1283: IFTRUE 1287
1285: GO 1326
1287: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1288: LD_ADDR_VAR 0 5
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_OWVAR 20
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: ST_TO_ADDR
1324: GO 1518
1326: LD_INT 3
1328: DOUBLE
1329: EQUAL
1330: IFTRUE 1334
1332: GO 1423
1334: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1335: LD_ADDR_VAR 0 5
1339: PUSH
1340: LD_INT 22
1342: PUSH
1343: LD_OWVAR 20
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 21
1354: PUSH
1355: LD_INT 2
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: EMPTY
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: LIST
1372: PPUSH
1373: CALL_OW 69
1377: ST_TO_ADDR
// if not b then
1378: LD_VAR 0 5
1382: NOT
1383: IFFALSE 1421
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1385: LD_ADDR_VAR 0 5
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_OWVAR 20
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: LD_INT 30
1404: PUSH
1405: LD_INT 3
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PPUSH
1416: CALL_OW 69
1420: ST_TO_ADDR
// end ; class_scientistic :
1421: GO 1518
1423: LD_INT 4
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1470
1431: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1432: LD_ADDR_VAR 0 5
1436: PUSH
1437: LD_INT 22
1439: PUSH
1440: LD_OWVAR 20
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 30
1451: PUSH
1452: LD_INT 8
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PPUSH
1463: CALL_OW 69
1467: ST_TO_ADDR
// end ; class_apeman_soldier :
1468: GO 1518
1470: LD_INT 15
1472: DOUBLE
1473: EQUAL
1474: IFTRUE 1478
1476: GO 1517
1478: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_INT 22
1486: PUSH
1487: LD_OWVAR 20
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 30
1498: PUSH
1499: LD_INT 5
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PPUSH
1510: CALL_OW 69
1514: ST_TO_ADDR
1515: GO 1518
1517: POP
// if b then
1518: LD_VAR 0 5
1522: IFFALSE 1593
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: PPUSH
1533: CALL_OW 266
1537: PUSH
1538: LD_INT 31
1540: EQUAL
1541: IFFALSE 1563
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_VAR 0 5
1552: PUSH
1553: LD_INT 1
1555: ARRAY
1556: PPUSH
1557: CALL 5028 0 2
1561: GO 1591
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1563: LD_VAR 0 2
1567: PPUSH
1568: LD_VAR 0 5
1572: PUSH
1573: LD_INT 1
1575: PPUSH
1576: LD_VAR 0 5
1580: PPUSH
1581: CALL_OW 12
1585: ARRAY
1586: PPUSH
1587: CALL_OW 52
1591: GO 1618
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1593: LD_VAR 0 2
1597: PPUSH
1598: LD_VAR 0 14
1602: PPUSH
1603: LD_VAR 0 15
1607: PPUSH
1608: LD_INT 15
1610: PPUSH
1611: LD_INT 0
1613: PPUSH
1614: CALL_OW 50
// end ;
1618: GO 1143
1620: POP
1621: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1622: LD_ADDR_VAR 0 16
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 3
1632: PUSH
1633: LD_INT 2
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: PUSH
1644: LD_OWVAR 67
1648: ARRAY
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 25
1656: PUSH
1657: LD_INT 5
1659: PUSH
1660: LD_INT 4
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_OWVAR 67
1675: ARRAY
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 24
1683: PUSH
1684: LD_INT 5
1686: PUSH
1687: LD_INT 5
1689: PUSH
1690: LD_INT 4
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_OWVAR 67
1702: ARRAY
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 30
1710: PUSH
1711: LD_INT 2
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: LD_INT 1
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_OWVAR 67
1729: ARRAY
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: LD_INT 22
1748: PUSH
1749: LD_OWVAR 20
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 30
1760: PUSH
1761: LD_INT 32
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PPUSH
1772: CALL_OW 69
1776: PUSH
1777: FOR_IN
1778: IFFALSE 1951
// begin if weapons then
1780: LD_VAR 0 16
1784: IFFALSE 1908
// begin k := rand ( 1 , weapons ) ;
1786: LD_ADDR_VAR 0 3
1790: PUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_VAR 0 16
1798: PPUSH
1799: CALL_OW 12
1803: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1804: LD_ADDR_VAR 0 17
1808: PUSH
1809: LD_VAR 0 16
1813: PUSH
1814: LD_VAR 0 3
1818: ARRAY
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1824: LD_ADDR_VAR 0 16
1828: PUSH
1829: LD_VAR 0 16
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_VAR 0 16
1846: PUSH
1847: LD_VAR 0 3
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PUSH
1857: LD_INT 1
1859: MINUS
1860: PPUSH
1861: CALL 5120 0 4
1865: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1866: LD_VAR 0 16
1870: PUSH
1871: LD_VAR 0 3
1875: ARRAY
1876: PUSH
1877: LD_INT 2
1879: ARRAY
1880: PUSH
1881: LD_INT 0
1883: EQUAL
1884: IFFALSE 1906
// weapons := Delete ( weapons , k ) ;
1886: LD_ADDR_VAR 0 16
1890: PUSH
1891: LD_VAR 0 16
1895: PPUSH
1896: LD_VAR 0 3
1900: PPUSH
1901: CALL_OW 3
1905: ST_TO_ADDR
// end else
1906: GO 1935
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1908: LD_ADDR_VAR 0 17
1912: PUSH
1913: LD_INT 27
1915: PUSH
1916: LD_INT 23
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 1
1925: PPUSH
1926: LD_INT 2
1928: PPUSH
1929: CALL_OW 12
1933: ARRAY
1934: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1935: LD_VAR 0 2
1939: PPUSH
1940: LD_VAR 0 17
1944: PPUSH
1945: CALL_OW 431
// end ;
1949: GO 1777
1951: POP
1952: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: LD_VAR 0 8
1963: PUSH
1964: LD_INT 1
1966: PLUS
1967: PPUSH
1968: CALL_OW 380
// hc_gallery := potter ;
1972: LD_ADDR_OWVAR 33
1976: PUSH
1977: LD_STRING potter
1979: ST_TO_ADDR
// hc_face_number := 1 ;
1980: LD_ADDR_OWVAR 34
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// hc_importance := 100 ;
1988: LD_ADDR_OWVAR 32
1992: PUSH
1993: LD_INT 100
1995: ST_TO_ADDR
// hc_name := Mike Gerste ;
1996: LD_ADDR_OWVAR 26
2000: PUSH
2001: LD_STRING Mike Gerste
2003: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2004: LD_ADDR_OWVAR 29
2008: PUSH
2009: LD_INT 10
2011: PUSH
2012: LD_INT 11
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: ST_TO_ADDR
// legion_commander := CreateHuman ;
2019: LD_ADDR_EXP 1
2023: PUSH
2024: CALL_OW 44
2028: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2029: LD_EXP 1
2033: PPUSH
2034: LD_INT 23
2036: PPUSH
2037: CALL_OW 52
// uc_side := 5 ;
2041: LD_ADDR_OWVAR 20
2045: PUSH
2046: LD_INT 5
2048: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2049: LD_INT 1
2051: PPUSH
2052: LD_INT 4
2054: PPUSH
2055: LD_VAR 0 8
2059: PPUSH
2060: CALL_OW 380
// hc_gallery := potter ;
2064: LD_ADDR_OWVAR 33
2068: PUSH
2069: LD_STRING potter
2071: ST_TO_ADDR
// hc_face_number := 2 ;
2072: LD_ADDR_OWVAR 34
2076: PUSH
2077: LD_INT 2
2079: ST_TO_ADDR
// hc_importance := 0 ;
2080: LD_ADDR_OWVAR 32
2084: PUSH
2085: LD_INT 0
2087: ST_TO_ADDR
// hc_name := George Potter ;
2088: LD_ADDR_OWVAR 26
2092: PUSH
2093: LD_STRING George Potter
2095: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2096: LD_ADDR_OWVAR 29
2100: PUSH
2101: LD_INT 12
2103: PUSH
2104: LD_INT 9
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: ST_TO_ADDR
// potter := CreateHuman ;
2111: LD_ADDR_EXP 4
2115: PUSH
2116: CALL_OW 44
2120: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2121: LD_EXP 4
2125: PPUSH
2126: LD_INT 4
2128: PPUSH
2129: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2133: LD_EXP 4
2137: PPUSH
2138: LD_INT 103
2140: PPUSH
2141: LD_INT 45
2143: PPUSH
2144: LD_INT 0
2146: PPUSH
2147: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2151: LD_EXP 4
2155: PPUSH
2156: LD_INT 23
2158: PPUSH
2159: CALL_OW 119
// InitHc ( ) ;
2163: CALL_OW 19
// end ; end_of_file
2167: LD_VAR 0 1
2171: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2172: LD_INT 0
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// uc_side := 5 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 5
2186: ST_TO_ADDR
// uc_nation := nation_arabian ;
2187: LD_ADDR_OWVAR 21
2191: PUSH
2192: LD_INT 2
2194: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2195: LD_ADDR_VAR 0 4
2199: PUSH
2200: LD_INT 22
2202: PUSH
2203: LD_OWVAR 20
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 30
2214: PUSH
2215: LD_INT 5
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PPUSH
2226: CALL_OW 69
2230: ST_TO_ADDR
// for i = 1 to 3 do
2231: LD_ADDR_VAR 0 2
2235: PUSH
2236: DOUBLE
2237: LD_INT 1
2239: DEC
2240: ST_TO_ADDR
2241: LD_INT 3
2243: PUSH
2244: FOR_TO
2245: IFFALSE 2283
// begin PrepareHuman ( false , 2 , 6 ) ;
2247: LD_INT 0
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 6
2255: PPUSH
2256: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2260: CALL_OW 44
2264: PPUSH
2265: LD_INT 27
2267: PPUSH
2268: LD_INT 22
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: CALL_OW 50
// end ;
2281: GO 2244
2283: POP
2284: POP
// for i = 1 to 3 do
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: DOUBLE
2291: LD_INT 1
2293: DEC
2294: ST_TO_ADDR
2295: LD_INT 3
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2334
// begin PrepareHuman ( false , 1 , 6 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 6
2309: PPUSH
2310: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2314: CALL_OW 44
2318: PPUSH
2319: LD_VAR 0 4
2323: PUSH
2324: LD_INT 1
2326: ARRAY
2327: PPUSH
2328: CALL_OW 52
// end ;
2332: GO 2298
2334: POP
2335: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: LD_INT 22
2343: PUSH
2344: LD_OWVAR 20
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 2
2355: PUSH
2356: LD_INT 30
2358: PUSH
2359: LD_INT 31
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: LD_INT 30
2368: PUSH
2369: LD_INT 32
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PPUSH
2385: CALL_OW 69
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2478
// begin PrepareHuman ( false , 1 , 6 ) ;
2393: LD_INT 0
2395: PPUSH
2396: LD_INT 1
2398: PPUSH
2399: LD_INT 6
2401: PPUSH
2402: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2406: CALL_OW 44
2410: PPUSH
2411: LD_VAR 0 2
2415: PPUSH
2416: CALL 5028 0 2
// if GetBType ( i ) = b_bunker then
2420: LD_VAR 0 2
2424: PPUSH
2425: CALL_OW 266
2429: PUSH
2430: LD_INT 32
2432: EQUAL
2433: IFFALSE 2476
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: LD_INT 27
2442: PUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 24
2448: PUSH
2449: LD_INT 28
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: LD_INT 4
2465: MOD
2466: PUSH
2467: LD_INT 1
2469: PLUS
2470: ARRAY
2471: PPUSH
2472: CALL_OW 431
// end ;
2476: GO 2390
2478: POP
2479: POP
// for i = 1 to 3 do
2480: LD_ADDR_VAR 0 2
2484: PUSH
2485: DOUBLE
2486: LD_INT 1
2488: DEC
2489: ST_TO_ADDR
2490: LD_INT 3
2492: PUSH
2493: FOR_TO
2494: IFFALSE 2611
// begin vc_chassis := ar_half_tracked ;
2496: LD_ADDR_OWVAR 37
2500: PUSH
2501: LD_INT 14
2503: ST_TO_ADDR
// vc_engine := engine_solar ;
2504: LD_ADDR_OWVAR 39
2508: PUSH
2509: LD_INT 2
2511: ST_TO_ADDR
// vc_control := control_manual ;
2512: LD_ADDR_OWVAR 38
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2520: LD_ADDR_OWVAR 40
2524: PUSH
2525: LD_INT 25
2527: PUSH
2528: LD_INT 27
2530: PUSH
2531: LD_INT 26
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: ST_TO_ADDR
// un := CreateVehicle ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 45
2554: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 5
2562: PPUSH
2563: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2567: LD_VAR 0 3
2571: PPUSH
2572: LD_INT 8
2574: PPUSH
2575: LD_INT 0
2577: PPUSH
2578: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2582: LD_INT 0
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2595: CALL_OW 44
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// end ;
2609: GO 2493
2611: POP
2612: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2613: LD_INT 1
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 6
2621: PPUSH
2622: CALL_OW 380
// al_commander := CreateHuman ;
2626: LD_ADDR_EXP 5
2630: PUSH
2631: CALL_OW 44
2635: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2636: LD_EXP 5
2640: PPUSH
2641: LD_INT 22
2643: PUSH
2644: LD_OWVAR 20
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 30
2655: PUSH
2656: LD_INT 0
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL_OW 69
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PPUSH
2676: CALL_OW 52
// InitHc ( ) ;
2680: CALL_OW 19
// end ;
2684: LD_VAR 0 1
2688: RET
// export function ChangeSide ( ) ; var i ; begin
2689: LD_INT 0
2691: PPUSH
2692: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 5
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PUSH
2713: FOR_IN
2714: IFFALSE 2730
// SetSide ( i , 8 ) ;
2716: LD_VAR 0 2
2720: PPUSH
2721: LD_INT 8
2723: PPUSH
2724: CALL_OW 235
2728: GO 2713
2730: POP
2731: POP
// end ;
2732: LD_VAR 0 1
2736: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2737: LD_INT 22
2739: PUSH
2740: LD_INT 5
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: IFFALSE 3265
2753: GO 2755
2755: DISABLE
2756: LD_INT 0
2758: PPUSH
2759: PPUSH
2760: PPUSH
2761: PPUSH
2762: PPUSH
2763: PPUSH
// begin enable ;
2764: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: LD_INT 22
2772: PUSH
2773: LD_INT 5
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: LD_INT 2
2782: PUSH
2783: LD_INT 21
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 21
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 69
2816: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_INT 22
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 30
2834: PUSH
2835: LD_INT 32
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 3
2844: PUSH
2845: LD_INT 24
2847: PUSH
2848: LD_INT 1000
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 69
2868: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2869: LD_ADDR_VAR 0 6
2873: PUSH
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 3
2881: PUSH
2882: LD_INT 54
2884: PUSH
2885: EMPTY
2886: LIST
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 25
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: ST_TO_ADDR
// if not list then
2911: LD_VAR 0 2
2915: NOT
2916: IFFALSE 2920
// exit ;
2918: GO 3265
// for i in list do
2920: LD_ADDR_VAR 0 1
2924: PUSH
2925: LD_VAR 0 2
2929: PUSH
2930: FOR_IN
2931: IFFALSE 3263
// begin if b then
2933: LD_VAR 0 5
2937: IFFALSE 3016
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2939: LD_ADDR_VAR 0 4
2943: PUSH
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_INT 25
2951: PUSH
2952: LD_INT 2
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: PUSH
2964: FOR_IN
2965: IFFALSE 3014
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
2967: LD_VAR 0 4
2971: PPUSH
2972: CALL_OW 314
2976: NOT
2977: PUSH
2978: LD_VAR 0 1
2982: PPUSH
2983: CALL_OW 110
2987: PUSH
2988: LD_INT 7
2990: NONEQUAL
2991: AND
2992: IFFALSE 3012
// ComRepairBuilding ( j , b [ 1 ] ) ;
2994: LD_VAR 0 4
2998: PPUSH
2999: LD_VAR 0 5
3003: PUSH
3004: LD_INT 1
3006: ARRAY
3007: PPUSH
3008: CALL_OW 130
3012: GO 2964
3014: POP
3015: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 256
3025: PUSH
3026: LD_INT 500
3028: LESS
3029: PUSH
3030: LD_VAR 0 1
3034: PPUSH
3035: CALL_OW 110
3039: PUSH
3040: LD_INT 7
3042: EQUAL
3043: NOT
3044: AND
3045: IFFALSE 3095
// begin ComMoveToArea ( i , guard_hill ) ;
3047: LD_VAR 0 1
3051: PPUSH
3052: LD_INT 11
3054: PPUSH
3055: CALL_OW 113
// SetTag ( i , 7 ) ;
3059: LD_VAR 0 1
3063: PPUSH
3064: LD_INT 7
3066: PPUSH
3067: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3071: LD_VAR 0 1
3075: PPUSH
3076: CALL_OW 247
3080: PUSH
3081: LD_INT 2
3083: EQUAL
3084: IFFALSE 3095
// begin AddComExitVehicle ( i ) ;
3086: LD_VAR 0 1
3090: PPUSH
3091: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3095: LD_VAR 0 1
3099: PPUSH
3100: CALL_OW 256
3104: PUSH
3105: LD_INT 1000
3107: EQUAL
3108: PUSH
3109: LD_VAR 0 1
3113: PPUSH
3114: CALL_OW 110
3118: PUSH
3119: LD_INT 7
3121: EQUAL
3122: AND
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 310
3133: NOT
3134: AND
3135: PUSH
3136: LD_VAR 0 6
3140: AND
3141: IFFALSE 3169
// begin SetTag ( i , 0 ) ;
3143: LD_VAR 0 1
3147: PPUSH
3148: LD_INT 0
3150: PPUSH
3151: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3155: LD_VAR 0 6
3159: PPUSH
3160: LD_VAR 0 1
3164: PPUSH
3165: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3169: LD_VAR 0 1
3173: PPUSH
3174: CALL_OW 247
3178: PUSH
3179: LD_INT 2
3181: EQUAL
3182: PUSH
3183: LD_VAR 0 1
3187: PPUSH
3188: CALL_OW 110
3192: PUSH
3193: LD_INT 7
3195: NONEQUAL
3196: AND
3197: PUSH
3198: LD_VAR 0 1
3202: PPUSH
3203: CALL_OW 314
3207: NOT
3208: AND
3209: IFFALSE 3261
// if FilterAllUnits ( [ f_side , 7 ] ) then
3211: LD_INT 22
3213: PUSH
3214: LD_INT 7
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 69
3225: IFFALSE 3261
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3227: LD_VAR 0 1
3231: PPUSH
3232: LD_INT 22
3234: PUSH
3235: LD_INT 7
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PPUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 74
3256: PPUSH
3257: CALL_OW 115
// end ;
3261: GO 2930
3263: POP
3264: POP
// end ; end_of_file
3265: PPOPN 6
3267: END
// export function Game ; var i , val , areas , wave ; begin
3268: LD_INT 0
3270: PPUSH
3271: PPUSH
3272: PPUSH
3273: PPUSH
3274: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 2
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 4
3291: PUSH
3292: LD_INT 5
3294: PUSH
3295: LD_INT 6
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: ST_TO_ADDR
// val := [ 10 , 20 , 30 ] [ Difficulty ] ;
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_INT 10
3313: PUSH
3314: LD_INT 20
3316: PUSH
3317: LD_INT 30
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: PUSH
3325: LD_OWVAR 67
3329: ARRAY
3330: ST_TO_ADDR
// wave := 1 ;
3331: LD_ADDR_VAR 0 5
3335: PUSH
3336: LD_INT 1
3338: ST_TO_ADDR
// while ( game_over = false ) do
3339: LD_EXP 7
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3511
// begin repeat begin Wait ( 0 0$01 ) ;
3349: LD_INT 35
3351: PPUSH
3352: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3356: LD_ADDR_EXP 9
3360: PUSH
3361: LD_EXP 9
3365: PUSH
3366: LD_INT 35
3368: PLUS
3369: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3370: LD_INT 22
3372: PUSH
3373: LD_INT 7
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PPUSH
3380: CALL_OW 69
3384: PUSH
3385: LD_INT 10
3387: LESS
3388: PUSH
3389: LD_EXP 9
3393: PUSH
3394: LD_INT 21000
3396: GREATEREQUAL
3397: OR
3398: IFFALSE 3349
// wave_time := 0 0$00 ;
3400: LD_ADDR_EXP 9
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3408: LD_INT 5250
3410: PPUSH
3411: CALL_OW 67
// if not ignore_wave then
3415: LD_EXP 13
3419: NOT
3420: IFFALSE 3501
// begin for i = 1 to wave do
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: DOUBLE
3428: LD_INT 1
3430: DEC
3431: ST_TO_ADDR
3432: LD_VAR 0 5
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3483
// begin SpawnPotter ( val * i , areas [ i mod 6 + 1 ] ) ;
3440: LD_VAR 0 3
3444: PUSH
3445: LD_VAR 0 2
3449: MUL
3450: PPUSH
3451: LD_VAR 0 4
3455: PUSH
3456: LD_VAR 0 2
3460: PUSH
3461: LD_INT 6
3463: MOD
3464: PUSH
3465: LD_INT 1
3467: PLUS
3468: ARRAY
3469: PPUSH
3470: CALL 3516 0 2
// Wait ( 0 0$10 ) ;
3474: LD_INT 350
3476: PPUSH
3477: CALL_OW 67
// end ;
3481: GO 3437
3483: POP
3484: POP
// wave := wave + 1 ;
3485: LD_ADDR_VAR 0 5
3489: PUSH
3490: LD_VAR 0 5
3494: PUSH
3495: LD_INT 1
3497: PLUS
3498: ST_TO_ADDR
// end else
3499: GO 3509
// ignore_wave := false ;
3501: LD_ADDR_EXP 13
3505: PUSH
3506: LD_INT 0
3508: ST_TO_ADDR
// end ;
3509: GO 3339
// end ;
3511: LD_VAR 0 1
3515: RET
// export function SpawnPotter ( val , area ) ; var i , un , class ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// uc_side := 7 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 7
3529: ST_TO_ADDR
// uc_nation := 2 ;
3530: LD_ADDR_OWVAR 21
3534: PUSH
3535: LD_INT 2
3537: ST_TO_ADDR
// InitHc ( ) ;
3538: CALL_OW 19
// hc_gallery :=  ;
3542: LD_ADDR_OWVAR 33
3546: PUSH
3547: LD_STRING 
3549: ST_TO_ADDR
// hc_importance := 0 ;
3550: LD_ADDR_OWVAR 32
3554: PUSH
3555: LD_INT 0
3557: ST_TO_ADDR
// hc_name :=  ;
3558: LD_ADDR_OWVAR 26
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// hc_attr := [ 10 + ( tick div 10 10$00 ) , 10 + ( tick div 10 10$00 ) ] ;
3566: LD_ADDR_OWVAR 29
3570: PUSH
3571: LD_INT 10
3573: PUSH
3574: LD_OWVAR 1
3578: PUSH
3579: LD_INT 21000
3581: DIV
3582: PLUS
3583: PUSH
3584: LD_INT 10
3586: PUSH
3587: LD_OWVAR 1
3591: PUSH
3592: LD_INT 21000
3594: DIV
3595: PLUS
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: ST_TO_ADDR
// for i = 1 to val do
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_VAR 0 1
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3824
// begin if i mod 9 = 0 then
3619: LD_VAR 0 4
3623: PUSH
3624: LD_INT 9
3626: MOD
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3643
// class := class_apeman_kamikaze else
3633: LD_ADDR_VAR 0 6
3637: PUSH
3638: LD_INT 17
3640: ST_TO_ADDR
3641: GO 3675
// if i mod 4 = 0 then
3643: LD_VAR 0 4
3647: PUSH
3648: LD_INT 4
3650: MOD
3651: PUSH
3652: LD_INT 0
3654: EQUAL
3655: IFFALSE 3667
// class := class_apeman_soldier else
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 15
3664: ST_TO_ADDR
3665: GO 3675
// class := class_apeman ;
3667: LD_ADDR_VAR 0 6
3671: PUSH
3672: LD_INT 12
3674: ST_TO_ADDR
// if i mod 33 = 0 then
3675: LD_VAR 0 4
3679: PUSH
3680: LD_INT 33
3682: MOD
3683: PUSH
3684: LD_INT 0
3686: EQUAL
3687: IFFALSE 3756
// begin vc_chassis := ar_half_tracked ;
3689: LD_ADDR_OWVAR 37
3693: PUSH
3694: LD_INT 14
3696: ST_TO_ADDR
// vc_control := control_apeman ;
3697: LD_ADDR_OWVAR 38
3701: PUSH
3702: LD_INT 5
3704: ST_TO_ADDR
// vc_engine := engine_combustion ;
3705: LD_ADDR_OWVAR 39
3709: PUSH
3710: LD_INT 1
3712: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ rand ( 1 , 2 ) ] ;
3713: LD_ADDR_OWVAR 40
3717: PUSH
3718: LD_INT 28
3720: PUSH
3721: LD_INT 27
3723: PUSH
3724: LD_INT 29
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 2
3737: PPUSH
3738: CALL_OW 12
3742: ARRAY
3743: ST_TO_ADDR
// un := CreateVehicle ;
3744: LD_ADDR_VAR 0 5
3748: PUSH
3749: CALL_OW 45
3753: ST_TO_ADDR
// end else
3754: GO 3781
// begin PrepareHuman ( sex_male , class , 10 ) ;
3756: LD_INT 1
3758: PPUSH
3759: LD_VAR 0 6
3763: PPUSH
3764: LD_INT 10
3766: PPUSH
3767: CALL_OW 380
// un := CreateHuman ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3781: LD_VAR 0 5
3785: PPUSH
3786: LD_VAR 0 2
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3798: LD_VAR 0 5
3802: PPUSH
3803: CALL_OW 250
3807: PPUSH
3808: LD_VAR 0 5
3812: PPUSH
3813: CALL_OW 251
3817: PPUSH
3818: CALL_OW 494
// end ;
3822: GO 3616
3824: POP
3825: POP
// end ;
3826: LD_VAR 0 3
3830: RET
// every 0 0$0.3 trigger alert and not game_over do var i , list , enemy ;
3831: LD_EXP 6
3835: PUSH
3836: LD_EXP 7
3840: NOT
3841: AND
3842: IFFALSE 4128
3844: GO 3846
3846: DISABLE
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
// begin enable ;
3852: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 7
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// if not list then
3873: LD_VAR 0 2
3877: NOT
3878: IFFALSE 3882
// exit ;
3880: GO 4128
// for i in list do
3882: LD_ADDR_VAR 0 1
3886: PUSH
3887: LD_VAR 0 2
3891: PUSH
3892: FOR_IN
3893: IFFALSE 4126
// begin enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 15 ] ] ) ;
3895: LD_ADDR_VAR 0 3
3899: PUSH
3900: LD_INT 81
3902: PUSH
3903: LD_INT 7
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 92
3912: PUSH
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 250
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: CALL_OW 251
3932: PUSH
3933: LD_INT 15
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PPUSH
3946: CALL_OW 69
3950: ST_TO_ADDR
// if not enemy then
3951: LD_VAR 0 3
3955: NOT
3956: IFFALSE 4014
// enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 30 ] ] ) ;
3958: LD_ADDR_VAR 0 3
3962: PUSH
3963: LD_INT 81
3965: PUSH
3966: LD_INT 7
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 92
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 250
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 251
3995: PUSH
3996: LD_INT 30
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 69
4013: ST_TO_ADDR
// if not enemy then
4014: LD_VAR 0 3
4018: NOT
4019: IFFALSE 4077
// enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 50 ] ] ) ;
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_INT 81
4028: PUSH
4029: LD_INT 7
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 92
4038: PUSH
4039: LD_VAR 0 1
4043: PPUSH
4044: CALL_OW 250
4048: PUSH
4049: LD_VAR 0 1
4053: PPUSH
4054: CALL_OW 251
4058: PUSH
4059: LD_INT 50
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 69
4076: ST_TO_ADDR
// if not enemy then
4077: LD_VAR 0 3
4081: NOT
4082: IFFALSE 4104
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
4084: LD_ADDR_VAR 0 3
4088: PUSH
4089: LD_INT 81
4091: PUSH
4092: LD_INT 7
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 69
4103: ST_TO_ADDR
// if enemy then
4104: LD_VAR 0 3
4108: IFFALSE 4124
// Attack ( i , enemy ) ;
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL 4131 0 2
// end ;
4124: GO 3892
4126: POP
4127: POP
// end ;
4128: PPOPN 3
4130: END
// function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
4131: LD_INT 0
4133: PPUSH
4134: PPUSH
4135: PPUSH
// if not unit then
4136: LD_VAR 0 1
4140: NOT
4141: IFFALSE 4145
// exit ;
4143: GO 4309
// targets_list := [ ] ;
4145: LD_ADDR_VAR 0 5
4149: PUSH
4150: EMPTY
4151: ST_TO_ADDR
// targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
4152: LD_ADDR_VAR 0 5
4156: PUSH
4157: LD_VAR 0 2
4161: PPUSH
4162: LD_INT 21
4164: PUSH
4165: LD_INT 1
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: LD_INT 54
4177: PUSH
4178: EMPTY
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PPUSH
4189: CALL_OW 72
4193: PUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_INT 21
4201: PUSH
4202: LD_INT 2
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PPUSH
4209: CALL_OW 72
4213: PUSH
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 21
4221: PUSH
4222: LD_INT 3
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 3
4231: PUSH
4232: LD_INT 58
4234: PUSH
4235: EMPTY
4236: LIST
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PPUSH
4246: CALL_OW 72
4250: PUSH
4251: LD_VAR 0 2
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: ST_TO_ADDR
// for target in targets_list do
4262: LD_ADDR_VAR 0 4
4266: PUSH
4267: LD_VAR 0 5
4271: PUSH
4272: FOR_IN
4273: IFFALSE 4307
// begin if target then
4275: LD_VAR 0 4
4279: IFFALSE 4305
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
4281: LD_VAR 0 1
4285: PPUSH
4286: LD_VAR 0 4
4290: PPUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 74
4300: PPUSH
4301: CALL_OW 115
// end ;
4305: GO 4272
4307: POP
4308: POP
// end ; end_of_file
4309: LD_VAR 0 3
4313: RET
// export function Action ; begin
4314: LD_INT 0
4316: PPUSH
// InGameOn ;
4317: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4321: LD_INT 23
4323: PPUSH
4324: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4328: LD_EXP 1
4332: PPUSH
4333: LD_STRING DL-1
4335: PPUSH
4336: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4340: LD_EXP 2
4344: PPUSH
4345: LD_STRING DA-1
4347: PPUSH
4348: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4352: LD_EXP 3
4356: PPUSH
4357: LD_STRING DA-2
4359: PPUSH
4360: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4364: LD_EXP 1
4368: PPUSH
4369: LD_STRING DL-2
4371: PPUSH
4372: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4376: LD_EXP 3
4380: PPUSH
4381: LD_STRING DA-3
4383: PPUSH
4384: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4388: LD_EXP 1
4392: PPUSH
4393: LD_STRING DL-3
4395: PPUSH
4396: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4400: LD_EXP 2
4404: PPUSH
4405: LD_STRING DA-4
4407: PPUSH
4408: CALL_OW 88
// if not dialogue_skipped then
4412: LD_OWVAR 59
4416: NOT
4417: IFFALSE 4502
// begin Wait ( 0 0$01 ) ;
4419: LD_INT 35
4421: PPUSH
4422: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4426: LD_EXP 2
4430: PUSH
4431: LD_EXP 3
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4444: LD_EXP 2
4448: PPUSH
4449: LD_INT 107
4451: PPUSH
4452: LD_INT 53
4454: PPUSH
4455: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4459: LD_EXP 3
4463: PPUSH
4464: LD_INT 108
4466: PPUSH
4467: LD_INT 53
4469: PPUSH
4470: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4474: LD_EXP 2
4478: PPUSH
4479: LD_EXP 4
4483: PPUSH
4484: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4488: LD_EXP 3
4492: PPUSH
4493: LD_EXP 4
4497: PPUSH
4498: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4502: LD_INT 35
4504: PPUSH
4505: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4509: LD_EXP 2
4513: PPUSH
4514: LD_INT 107
4516: PPUSH
4517: LD_INT 53
4519: PPUSH
4520: CALL_OW 307
4524: PUSH
4525: LD_OWVAR 59
4529: OR
4530: IFFALSE 4502
// if not dialogue_skipped then
4532: LD_OWVAR 59
4536: NOT
4537: IFFALSE 4638
// begin ComTurnUnit ( potter , l1 ) ;
4539: LD_EXP 4
4543: PPUSH
4544: LD_EXP 2
4548: PPUSH
4549: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4553: LD_INT 10
4555: PPUSH
4556: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4560: LD_EXP 4
4564: PPUSH
4565: LD_INT 108
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 483
// Wait ( 0 0$01 ) ;
4581: LD_INT 35
4583: PPUSH
4584: CALL_OW 67
// RemoveUnit ( potter ) ;
4588: LD_EXP 4
4592: PPUSH
4593: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4597: LD_EXP 2
4601: PPUSH
4602: LD_STRING DA-5
4604: PPUSH
4605: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4609: LD_EXP 3
4613: PPUSH
4614: LD_STRING DA-6
4616: PPUSH
4617: CALL_OW 88
// Wait ( 0 0$02 ) ;
4621: LD_INT 70
4623: PPUSH
4624: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4628: LD_INT 25
4630: PPUSH
4631: LD_INT 19
4633: PPUSH
4634: CALL_OW 84
// end ; SpawnPotter ( 30 , north_west_1 ) ;
4638: LD_INT 30
4640: PPUSH
4641: LD_INT 1
4643: PPUSH
4644: CALL 3516 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4648: LD_EXP 5
4652: PPUSH
4653: LD_STRING DLa-1
4655: PPUSH
4656: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4660: LD_EXP 1
4664: PPUSH
4665: LD_STRING DL-5
4667: PPUSH
4668: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4672: LD_INT 23
4674: PPUSH
4675: CALL_OW 87
// InGameOff ;
4679: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4683: LD_STRING C1
4685: PPUSH
4686: CALL_OW 337
// alert := true ;
4690: LD_ADDR_EXP 6
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4698: LD_EXP 5
4702: PPUSH
4703: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4707: LD_EXP 5
4711: PPUSH
4712: LD_INT 11
4714: PPUSH
4715: CALL_OW 173
// Wait ( 0 0$30 ) ;
4719: LD_INT 1050
4721: PPUSH
4722: CALL_OW 67
// SpawnPotter ( 20 , north_4 ) ;
4726: LD_INT 20
4728: PPUSH
4729: LD_INT 4
4731: PPUSH
4732: CALL 3516 0 2
// Wait ( 0 0$35 ) ;
4736: LD_INT 1225
4738: PPUSH
4739: CALL_OW 67
// SpawnPotter ( 20 , east_5 ) ;
4743: LD_INT 20
4745: PPUSH
4746: LD_INT 5
4748: PPUSH
4749: CALL 3516 0 2
// Wait ( 0 0$03 ) ;
4753: LD_INT 105
4755: PPUSH
4756: CALL_OW 67
// Game ;
4760: CALL 3268 0 0
// end ;
4764: LD_VAR 0 1
4768: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 500 do var tmp , i ;
4769: LD_INT 22
4771: PUSH
4772: LD_INT 7
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 69
4783: PUSH
4784: LD_INT 0
4786: EQUAL
4787: PUSH
4788: LD_EXP 8
4792: PUSH
4793: LD_INT 500
4795: GREATEREQUAL
4796: AND
4797: IFFALSE 5025
4799: GO 4801
4801: DISABLE
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
// begin DialogueOn ;
4806: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4810: LD_EXP 10
4814: PPUSH
4815: LD_STRING DVr-1
4817: PPUSH
4818: CALL_OW 94
// DialogueOff ;
4822: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4826: LD_STRING QBonusInfo
4828: PPUSH
4829: CALL_OW 97
4833: PUSH
4834: LD_INT 1
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4853
4842: POP
// bonus_active := true ; end ;
4843: LD_ADDR_EXP 11
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
4851: GO 4854
4853: POP
// bonus_num := 4 ;
4854: LD_ADDR_EXP 12
4858: PUSH
4859: LD_INT 4
4861: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_mid , art_instant , main_base ) ;
4862: LD_OWVAR 2
4866: PPUSH
4867: LD_INT 2
4869: PPUSH
4870: LD_INT 2
4872: PPUSH
4873: LD_INT 23
4875: PPUSH
4876: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_INT 500
4887: PUSH
4888: LD_INT 3500
4890: PUSH
4891: LD_INT 5750
4893: PUSH
4894: LD_INT 10000
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4903: LD_INT 10500
4905: PUSH
4906: LD_INT 12600
4908: PUSH
4909: LD_INT 14700
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: PUSH
4917: LD_OWVAR 67
4921: ARRAY
4922: PPUSH
4923: CALL_OW 67
// for i = 1 to tmp do
4927: LD_ADDR_VAR 0 2
4931: PUSH
4932: DOUBLE
4933: LD_INT 1
4935: DEC
4936: ST_TO_ADDR
4937: LD_VAR 0 1
4941: PUSH
4942: FOR_TO
4943: IFFALSE 4975
// if points >= tmp [ i ] then
4945: LD_EXP 8
4949: PUSH
4950: LD_VAR 0 1
4954: PUSH
4955: LD_VAR 0 2
4959: ARRAY
4960: GREATEREQUAL
4961: IFFALSE 4973
// bonus_num := i ;
4963: LD_ADDR_EXP 12
4967: PUSH
4968: LD_VAR 0 2
4972: ST_TO_ADDR
4973: GO 4942
4975: POP
4976: POP
// case Query ( QBonusInfo ) of 1 :
4977: LD_STRING QBonusInfo
4979: PPUSH
4980: CALL_OW 97
4984: PUSH
4985: LD_INT 1
4987: DOUBLE
4988: EQUAL
4989: IFTRUE 4993
4991: GO 5014
4993: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4994: LD_OWVAR 2
4998: PPUSH
4999: LD_INT 12
5001: PPUSH
5002: LD_INT 2
5004: PPUSH
5005: LD_INT 23
5007: PPUSH
5008: CALL_OW 468
5012: GO 5015
5014: POP
// until points >= 15000 ;
5015: LD_EXP 8
5019: PUSH
5020: LD_INT 15000
5022: GREATEREQUAL
5023: IFFALSE 4903
// end ; end_of_file
5025: PPOPN 2
5027: END
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
5028: LD_INT 0
5030: PPUSH
5031: PPUSH
// dir := GetDir ( b ) ;
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 2
5041: PPUSH
5042: CALL_OW 254
5046: ST_TO_ADDR
// if dir < 3 then
5047: LD_VAR 0 4
5051: PUSH
5052: LD_INT 3
5054: LESS
5055: IFFALSE 5073
// dir := dir + 3 else
5057: LD_ADDR_VAR 0 4
5061: PUSH
5062: LD_VAR 0 4
5066: PUSH
5067: LD_INT 3
5069: PLUS
5070: ST_TO_ADDR
5071: GO 5087
// dir := dir - 3 ;
5073: LD_ADDR_VAR 0 4
5077: PUSH
5078: LD_VAR 0 4
5082: PUSH
5083: LD_INT 3
5085: MINUS
5086: ST_TO_ADDR
// SetDir ( un , dir ) ;
5087: LD_VAR 0 1
5091: PPUSH
5092: LD_VAR 0 4
5096: PPUSH
5097: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5101: LD_VAR 0 1
5105: PPUSH
5106: LD_VAR 0 2
5110: PPUSH
5111: CALL_OW 52
// end ;
5115: LD_VAR 0 3
5119: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
5120: LD_INT 0
5122: PPUSH
5123: PPUSH
5124: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
5125: LD_ADDR_VAR 0 7
5129: PUSH
5130: LD_VAR 0 1
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PPUSH
5141: LD_VAR 0 3
5145: PPUSH
5146: LD_VAR 0 4
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
5156: LD_ADDR_VAR 0 1
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: LD_VAR 0 2
5170: PPUSH
5171: LD_VAR 0 7
5175: PPUSH
5176: CALL_OW 1
5180: ST_TO_ADDR
// result := tab ;
5181: LD_ADDR_VAR 0 5
5185: PUSH
5186: LD_VAR 0 1
5190: ST_TO_ADDR
// end ;
5191: LD_VAR 0 5
5195: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5196: LD_INT 0
5198: PPUSH
5199: PPUSH
5200: PPUSH
// if not GetControl ( veh ) = control_manual then
5201: LD_VAR 0 1
5205: PPUSH
5206: CALL_OW 263
5210: PUSH
5211: LD_INT 1
5213: EQUAL
5214: NOT
5215: IFFALSE 5227
// result := false else
5217: LD_ADDR_VAR 0 2
5221: PUSH
5222: LD_INT 0
5224: ST_TO_ADDR
5225: GO 5372
// if veh in FilterAllUnits ( [ f_empty ] ) then
5227: LD_VAR 0 1
5231: PUSH
5232: LD_INT 58
5234: PUSH
5235: EMPTY
5236: LIST
5237: PPUSH
5238: CALL_OW 69
5242: IN
5243: IFFALSE 5255
// result := false else
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
5253: GO 5372
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5255: LD_ADDR_VAR 0 4
5259: PUSH
5260: LD_INT 22
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 255
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 55
5279: PUSH
5280: EMPTY
5281: LIST
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: CALL_OW 69
5291: ST_TO_ADDR
// if not filter then
5292: LD_VAR 0 4
5296: NOT
5297: IFFALSE 5309
// result := false else
5299: LD_ADDR_VAR 0 2
5303: PUSH
5304: LD_INT 0
5306: ST_TO_ADDR
5307: GO 5372
// for i = 1 to filter do
5309: LD_ADDR_VAR 0 3
5313: PUSH
5314: DOUBLE
5315: LD_INT 1
5317: DEC
5318: ST_TO_ADDR
5319: LD_VAR 0 4
5323: PUSH
5324: FOR_TO
5325: IFFALSE 5370
// if IsDriver ( filter [ i ] ) = veh then
5327: LD_VAR 0 4
5331: PUSH
5332: LD_VAR 0 3
5336: ARRAY
5337: PPUSH
5338: CALL 57959 0 1
5342: PUSH
5343: LD_VAR 0 1
5347: EQUAL
5348: IFFALSE 5368
// begin result := filter [ i ] ;
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_VAR 0 4
5359: PUSH
5360: LD_VAR 0 3
5364: ARRAY
5365: ST_TO_ADDR
// break ;
5366: GO 5370
// end ;
5368: GO 5324
5370: POP
5371: POP
// end ; end ; end_of_file
5372: LD_VAR 0 2
5376: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5377: LD_VAR 0 1
5381: PPUSH
5382: CALL 20016 0 1
// if un in [ legion_commander , main_base ] then
5386: LD_VAR 0 1
5390: PUSH
5391: LD_EXP 1
5395: PUSH
5396: LD_INT 23
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: IN
5403: IFFALSE 5413
// game_over := true ;
5405: LD_ADDR_EXP 7
5409: PUSH
5410: LD_INT 1
5412: ST_TO_ADDR
// if un = al_commander then
5413: LD_VAR 0 1
5417: PUSH
5418: LD_EXP 5
5422: EQUAL
5423: IFFALSE 5429
// ChangeSide ( ) ;
5425: CALL 2689 0 0
// if GetSide ( un ) = 7 then
5429: LD_VAR 0 1
5433: PPUSH
5434: CALL_OW 255
5438: PUSH
5439: LD_INT 7
5441: EQUAL
5442: IFFALSE 5560
// begin if GetClass ( un ) = class_apeman then
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 257
5453: PUSH
5454: LD_INT 12
5456: EQUAL
5457: IFFALSE 5473
// points := points + 6 ;
5459: LD_ADDR_EXP 8
5463: PUSH
5464: LD_EXP 8
5468: PUSH
5469: LD_INT 6
5471: PLUS
5472: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL_OW 257
5482: PUSH
5483: LD_INT 17
5485: EQUAL
5486: IFFALSE 5502
// points := points + 11 ;
5488: LD_ADDR_EXP 8
5492: PUSH
5493: LD_EXP 8
5497: PUSH
5498: LD_INT 11
5500: PLUS
5501: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 257
5511: PUSH
5512: LD_INT 15
5514: EQUAL
5515: IFFALSE 5531
// points := points + 14 ;
5517: LD_ADDR_EXP 8
5521: PUSH
5522: LD_EXP 8
5526: PUSH
5527: LD_INT 14
5529: PLUS
5530: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5531: LD_VAR 0 1
5535: PPUSH
5536: CALL_OW 247
5540: PUSH
5541: LD_INT 2
5543: EQUAL
5544: IFFALSE 5560
// points := points + 50 ;
5546: LD_ADDR_EXP 8
5550: PUSH
5551: LD_EXP 8
5555: PUSH
5556: LD_INT 50
5558: PLUS
5559: ST_TO_ADDR
// end ; end ;
5560: PPOPN 1
5562: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5563: LD_EXP 5
5567: PPUSH
5568: CALL_OW 256
5572: PUSH
5573: LD_INT 1000
5575: LESS
5576: IFFALSE 5608
5578: GO 5580
5580: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5581: LD_EXP 5
5585: PPUSH
5586: CALL_OW 504
5590: PPUSH
5591: CALL_OW 255
5595: PUSH
5596: LD_INT 8
5598: EQUAL
5599: IFFALSE 5608
// YouLost (  ) ;
5601: LD_STRING 
5603: PPUSH
5604: CALL_OW 104
5608: END
// on DialogueSkipped ( value ) do var i ;
5609: LD_INT 0
5611: PPUSH
// begin RemoveUnit ( potter ) ;
5612: LD_EXP 4
5616: PPUSH
5617: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5621: LD_EXP 2
5625: PUSH
5626: LD_EXP 3
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 122
// Wait ( 1 ) ;
5639: LD_INT 1
5641: PPUSH
5642: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5646: LD_EXP 2
5650: PPUSH
5651: LD_INT 107
5653: PPUSH
5654: LD_INT 53
5656: PPUSH
5657: LD_INT 0
5659: PPUSH
5660: LD_INT 0
5662: PPUSH
5663: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5667: LD_EXP 3
5671: PPUSH
5672: LD_INT 108
5674: PPUSH
5675: LD_INT 53
5677: PPUSH
5678: LD_INT 0
5680: PPUSH
5681: LD_INT 0
5683: PPUSH
5684: CALL_OW 483
// Wait ( 1 ) ;
5688: LD_INT 1
5690: PPUSH
5691: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5695: LD_EXP 2
5699: PUSH
5700: LD_EXP 3
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PPUSH
5709: LD_INT 108
5711: PPUSH
5712: LD_INT 1
5714: PPUSH
5715: CALL_OW 118
// end ;
5719: PPOPN 2
5721: END
// on ArtifactUsed ( side , button , p3 , p4 ) do var bonus , off , units , crates , tmp , i ;
5722: LD_INT 0
5724: PPUSH
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
// begin DialogueOn ;
5730: CALL_OW 6
// uc_side := 8 ;
5734: LD_ADDR_OWVAR 20
5738: PUSH
5739: LD_INT 8
5741: ST_TO_ADDR
// uc_nation := 2 ;
5742: LD_ADDR_OWVAR 21
5746: PUSH
5747: LD_INT 2
5749: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5750: LD_ADDR_VAR 0 5
5754: PUSH
5755: LD_STRING QBonus
5757: PUSH
5758: LD_EXP 12
5762: STR
5763: ST_TO_ADDR
// off := true ;
5764: LD_ADDR_VAR 0 6
5768: PUSH
5769: LD_INT 1
5771: ST_TO_ADDR
// units := [ ] ;
5772: LD_ADDR_VAR 0 7
5776: PUSH
5777: EMPTY
5778: ST_TO_ADDR
// crates := 0 ;
5779: LD_ADDR_VAR 0 8
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5787: LD_EXP 10
5791: PPUSH
5792: LD_STRING DVr-2
5794: PPUSH
5795: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
5799: LD_INT 10
5801: PPUSH
5802: CALL_OW 67
// case Query ( bonus ) of 1 :
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL_OW 97
5815: PUSH
5816: LD_INT 1
5818: DOUBLE
5819: EQUAL
5820: IFTRUE 5824
5822: GO 5909
5824: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5825: LD_ADDR_VAR 0 9
5829: PUSH
5830: LD_INT 1
5832: PUSH
5833: LD_INT 2
5835: PUSH
5836: LD_INT 5
5838: PUSH
5839: LD_INT 8
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: PUSH
5848: LD_EXP 12
5852: ARRAY
5853: ST_TO_ADDR
// for i = 1 to tmp do
5854: LD_ADDR_VAR 0 10
5858: PUSH
5859: DOUBLE
5860: LD_INT 1
5862: DEC
5863: ST_TO_ADDR
5864: LD_VAR 0 9
5868: PUSH
5869: FOR_TO
5870: IFFALSE 5905
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5872: LD_INT 0
5874: PPUSH
5875: LD_INT 15
5877: PPUSH
5878: LD_VAR 0 9
5882: PPUSH
5883: CALL_OW 380
// units := units ^ CreateHuman ;
5887: LD_ADDR_VAR 0 7
5891: PUSH
5892: LD_VAR 0 7
5896: PUSH
5897: CALL_OW 44
5901: ADD
5902: ST_TO_ADDR
// end ;
5903: GO 5869
5905: POP
5906: POP
// end ; 2 :
5907: GO 6317
5909: LD_INT 2
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 5949
5917: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5918: LD_ADDR_VAR 0 8
5922: PUSH
5923: LD_INT 100
5925: PUSH
5926: LD_INT 150
5928: PUSH
5929: LD_INT 350
5931: PUSH
5932: LD_INT 500
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: PUSH
5941: LD_EXP 12
5945: ARRAY
5946: ST_TO_ADDR
// end ; 3 :
5947: GO 6317
5949: LD_INT 3
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5957
5955: GO 6297
5957: POP
// begin if bonus_num = 1 then
5958: LD_EXP 12
5962: PUSH
5963: LD_INT 1
5965: EQUAL
5966: IFFALSE 5976
// ignore_wave := true ;
5968: LD_ADDR_EXP 13
5972: PUSH
5973: LD_INT 1
5975: ST_TO_ADDR
// if bonus_num = 2 then
5976: LD_EXP 12
5980: PUSH
5981: LD_INT 2
5983: EQUAL
5984: IFFALSE 6104
// begin for i = 1 to 2 do
5986: LD_ADDR_VAR 0 10
5990: PUSH
5991: DOUBLE
5992: LD_INT 1
5994: DEC
5995: ST_TO_ADDR
5996: LD_INT 2
5998: PUSH
5999: FOR_TO
6000: IFFALSE 6102
// begin uc_nation := nation_arabian ;
6002: LD_ADDR_OWVAR 21
6006: PUSH
6007: LD_INT 2
6009: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6010: LD_ADDR_OWVAR 37
6014: PUSH
6015: LD_INT 14
6017: ST_TO_ADDR
// vc_engine := engine_siberite ;
6018: LD_ADDR_OWVAR 39
6022: PUSH
6023: LD_INT 3
6025: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6026: LD_ADDR_OWVAR 38
6030: PUSH
6031: LD_INT 2
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_INT 2
6046: PPUSH
6047: CALL_OW 12
6051: ARRAY
6052: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6053: LD_ADDR_OWVAR 40
6057: PUSH
6058: LD_INT 28
6060: PUSH
6061: LD_INT 27
6063: PUSH
6064: LD_INT 25
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 1
6074: PPUSH
6075: LD_INT 3
6077: PPUSH
6078: CALL_OW 12
6082: ARRAY
6083: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_VAR 0 7
6093: PUSH
6094: CALL_OW 45
6098: ADD
6099: ST_TO_ADDR
// end ;
6100: GO 5999
6102: POP
6103: POP
// end ; if bonus_num = 3 then
6104: LD_EXP 12
6108: PUSH
6109: LD_INT 3
6111: EQUAL
6112: IFFALSE 6236
// begin for i = 1 to 4 do
6114: LD_ADDR_VAR 0 10
6118: PUSH
6119: DOUBLE
6120: LD_INT 1
6122: DEC
6123: ST_TO_ADDR
6124: LD_INT 4
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6234
// begin uc_nation := nation_arabian ;
6130: LD_ADDR_OWVAR 21
6134: PUSH
6135: LD_INT 2
6137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6138: LD_ADDR_OWVAR 37
6142: PUSH
6143: LD_INT 14
6145: ST_TO_ADDR
// vc_engine := engine_siberite ;
6146: LD_ADDR_OWVAR 39
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 38
6158: PUSH
6159: LD_INT 2
6161: PUSH
6162: LD_INT 5
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6181: LD_ADDR_OWVAR 40
6185: PUSH
6186: LD_INT 28
6188: PUSH
6189: LD_INT 27
6191: PUSH
6192: LD_INT 28
6194: PUSH
6195: LD_INT 25
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 1
6206: PPUSH
6207: LD_INT 4
6209: PPUSH
6210: CALL_OW 12
6214: ARRAY
6215: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6216: LD_ADDR_VAR 0 7
6220: PUSH
6221: LD_VAR 0 7
6225: PUSH
6226: CALL_OW 45
6230: ADD
6231: ST_TO_ADDR
// end ;
6232: GO 6127
6234: POP
6235: POP
// end ; if bonus_num = 4 then
6236: LD_EXP 12
6240: PUSH
6241: LD_INT 4
6243: EQUAL
6244: IFFALSE 6295
// for i = 1 to 3 do
6246: LD_ADDR_VAR 0 10
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_INT 3
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6293
// begin PrepareHuman ( false , 3 , 8 ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 3
6267: PPUSH
6268: LD_INT 8
6270: PPUSH
6271: CALL_OW 380
// units := units ^ CreateHuman ;
6275: LD_ADDR_VAR 0 7
6279: PUSH
6280: LD_VAR 0 7
6284: PUSH
6285: CALL_OW 44
6289: ADD
6290: ST_TO_ADDR
// end ;
6291: GO 6259
6293: POP
6294: POP
// end ; 4 :
6295: GO 6317
6297: LD_INT 4
6299: DOUBLE
6300: EQUAL
6301: IFTRUE 6305
6303: GO 6316
6305: POP
// off := false ; end ;
6306: LD_ADDR_VAR 0 6
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
6314: GO 6317
6316: POP
// DialogueOff ;
6317: CALL_OW 7
// if not off then
6321: LD_VAR 0 6
6325: NOT
6326: IFFALSE 6332
// exit else
6328: GO 6511
6330: GO 6385
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6332: LD_OWVAR 2
6336: PPUSH
6337: LD_INT 12
6339: PPUSH
6340: LD_INT 0
6342: PPUSH
6343: LD_INT 23
6345: PPUSH
6346: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6350: LD_EXP 10
6354: PPUSH
6355: LD_STRING DVr-3
6357: PUSH
6358: LD_STRING DVr-3a
6360: PUSH
6361: LD_STRING DVr-3b
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 1
6371: PPUSH
6372: LD_INT 3
6374: PPUSH
6375: CALL_OW 12
6379: ARRAY
6380: PPUSH
6381: CALL_OW 94
// end ; if units then
6385: LD_VAR 0 7
6389: IFFALSE 6453
// for i in units do
6391: LD_ADDR_VAR 0 10
6395: PUSH
6396: LD_VAR 0 7
6400: PUSH
6401: FOR_IN
6402: IFFALSE 6451
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6404: LD_VAR 0 10
6408: PPUSH
6409: LD_INT 92
6411: PPUSH
6412: LD_INT 49
6414: PPUSH
6415: LD_INT 20
6417: PPUSH
6418: LD_INT 0
6420: PPUSH
6421: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6425: LD_VAR 0 10
6429: PPUSH
6430: CALL_OW 250
6434: PPUSH
6435: LD_VAR 0 10
6439: PPUSH
6440: CALL_OW 251
6444: PPUSH
6445: CALL_OW 494
// end ;
6449: GO 6401
6451: POP
6452: POP
// if crates then
6453: LD_VAR 0 8
6457: IFFALSE 6511
// for i = 1 to ( crates div 50 ) do
6459: LD_ADDR_VAR 0 10
6463: PUSH
6464: DOUBLE
6465: LD_INT 1
6467: DEC
6468: ST_TO_ADDR
6469: LD_VAR 0 8
6473: PUSH
6474: LD_INT 50
6476: DIV
6477: PUSH
6478: FOR_TO
6479: IFFALSE 6509
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6481: LD_INT 5
6483: PPUSH
6484: LD_INT 92
6486: PPUSH
6487: LD_INT 49
6489: PPUSH
6490: LD_INT 30
6492: PPUSH
6493: LD_INT 1
6495: PPUSH
6496: CALL_OW 56
// wait ( 0 0$02 ) ;
6500: LD_INT 70
6502: PPUSH
6503: CALL_OW 67
// end ;
6507: GO 6478
6509: POP
6510: POP
// end ;
6511: PPOPN 10
6513: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6514: LD_VAR 0 1
6518: PPUSH
6519: LD_VAR 0 2
6523: PPUSH
6524: LD_VAR 0 3
6528: PPUSH
6529: CALL 20114 0 3
// end ;
6533: PPOPN 3
6535: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL 20122 0 1
// end ; end_of_file
6545: PPOPN 1
6547: END
// every 0 0$01 trigger not game_over do
6548: LD_EXP 7
6552: NOT
6553: IFFALSE 6586
6555: GO 6557
6557: DISABLE
// begin enable ;
6558: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6559: LD_ADDR_OWVAR 47
6563: PUSH
6564: LD_STRING #tick
6566: PUSH
6567: LD_OWVAR 1
6571: PUSH
6572: LD_STRING #points
6574: PUSH
6575: LD_EXP 8
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: ST_TO_ADDR
// end ;
6586: END
// every 0 0$01 trigger game_over do
6587: LD_EXP 7
6591: IFFALSE 6650
6593: GO 6595
6595: DISABLE
// begin Wait ( 0 0$02 ) ;
6596: LD_INT 70
6598: PPUSH
6599: CALL_OW 67
// DialogueOn ;
6603: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6607: LD_ADDR_OWVAR 47
6611: PUSH
6612: LD_STRING #game-points
6614: PUSH
6615: LD_OWVAR 78
6619: PUSH
6620: LD_EXP 8
6624: PUSH
6625: LD_STRING #game-time
6627: PUSH
6628: LD_OWVAR 1
6632: PUSH
6633: LD_STRING #game-difficulty
6635: PUSH
6636: LD_OWVAR 67
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: ST_TO_ADDR
// end ; end_of_file
6650: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
6651: LD_OWVAR 1
6655: PUSH
6656: LD_INT 52500
6658: LESS
6659: IFFALSE 6683
6661: GO 6663
6663: DISABLE
// begin enable ;
6664: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
6665: LD_INT 1
6667: PPUSH
6668: LD_INT 5
6670: PPUSH
6671: CALL_OW 12
6675: PPUSH
6676: LD_INT 1
6678: PPUSH
6679: CALL_OW 57
// end ; end_of_file
6683: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
6684: LD_INT 0
6686: PPUSH
// ar_miner := 81 ;
6687: LD_ADDR_EXP 21
6691: PUSH
6692: LD_INT 81
6694: ST_TO_ADDR
// ar_crane := 88 ;
6695: LD_ADDR_EXP 20
6699: PUSH
6700: LD_INT 88
6702: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
6703: LD_ADDR_EXP 15
6707: PUSH
6708: LD_INT 89
6710: ST_TO_ADDR
// us_hack := 99 ;
6711: LD_ADDR_EXP 16
6715: PUSH
6716: LD_INT 99
6718: ST_TO_ADDR
// us_artillery := 97 ;
6719: LD_ADDR_EXP 17
6723: PUSH
6724: LD_INT 97
6726: ST_TO_ADDR
// ar_bio_bomb := 91 ;
6727: LD_ADDR_EXP 18
6731: PUSH
6732: LD_INT 91
6734: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
6735: LD_ADDR_EXP 19
6739: PUSH
6740: LD_INT 92
6742: ST_TO_ADDR
// ru_radar := 98 ;
6743: LD_ADDR_EXP 14
6747: PUSH
6748: LD_INT 98
6750: ST_TO_ADDR
// tech_Artillery := 80 ;
6751: LD_ADDR_EXP 22
6755: PUSH
6756: LD_INT 80
6758: ST_TO_ADDR
// tech_RadMat := 81 ;
6759: LD_ADDR_EXP 23
6763: PUSH
6764: LD_INT 81
6766: ST_TO_ADDR
// tech_BasicTools := 82 ;
6767: LD_ADDR_EXP 24
6771: PUSH
6772: LD_INT 82
6774: ST_TO_ADDR
// tech_Cargo := 83 ;
6775: LD_ADDR_EXP 25
6779: PUSH
6780: LD_INT 83
6782: ST_TO_ADDR
// tech_Track := 84 ;
6783: LD_ADDR_EXP 26
6787: PUSH
6788: LD_INT 84
6790: ST_TO_ADDR
// tech_Crane := 85 ;
6791: LD_ADDR_EXP 27
6795: PUSH
6796: LD_INT 85
6798: ST_TO_ADDR
// tech_Bulldozer := 86 ;
6799: LD_ADDR_EXP 28
6803: PUSH
6804: LD_INT 86
6806: ST_TO_ADDR
// tech_Hovercraft := 87 ;
6807: LD_ADDR_EXP 29
6811: PUSH
6812: LD_INT 87
6814: ST_TO_ADDR
// class_mastodont := 31 ;
6815: LD_ADDR_EXP 30
6819: PUSH
6820: LD_INT 31
6822: ST_TO_ADDR
// class_horse := 21 ;
6823: LD_ADDR_EXP 31
6827: PUSH
6828: LD_INT 21
6830: ST_TO_ADDR
// end ;
6831: LD_VAR 0 1
6835: RET
// every 1 do
6836: GO 6838
6838: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
6839: CALL 6684 0 0
6843: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6844: LD_INT 0
6846: PPUSH
// if p2 = 100 then
6847: LD_VAR 0 2
6851: PUSH
6852: LD_INT 100
6854: EQUAL
6855: IFFALSE 7804
// begin if not StreamModeActive then
6857: LD_EXP 32
6861: NOT
6862: IFFALSE 6872
// StreamModeActive := true ;
6864: LD_ADDR_EXP 32
6868: PUSH
6869: LD_INT 1
6871: ST_TO_ADDR
// if p3 = 0 then
6872: LD_VAR 0 3
6876: PUSH
6877: LD_INT 0
6879: EQUAL
6880: IFFALSE 6886
// InitStreamMode ;
6882: CALL 7964 0 0
// if p3 = 1 then
6886: LD_VAR 0 3
6890: PUSH
6891: LD_INT 1
6893: EQUAL
6894: IFFALSE 6904
// sRocket := true ;
6896: LD_ADDR_EXP 37
6900: PUSH
6901: LD_INT 1
6903: ST_TO_ADDR
// if p3 = 2 then
6904: LD_VAR 0 3
6908: PUSH
6909: LD_INT 2
6911: EQUAL
6912: IFFALSE 6922
// sSpeed := true ;
6914: LD_ADDR_EXP 36
6918: PUSH
6919: LD_INT 1
6921: ST_TO_ADDR
// if p3 = 3 then
6922: LD_VAR 0 3
6926: PUSH
6927: LD_INT 3
6929: EQUAL
6930: IFFALSE 6940
// sEngine := true ;
6932: LD_ADDR_EXP 38
6936: PUSH
6937: LD_INT 1
6939: ST_TO_ADDR
// if p3 = 4 then
6940: LD_VAR 0 3
6944: PUSH
6945: LD_INT 4
6947: EQUAL
6948: IFFALSE 6958
// sSpec := true ;
6950: LD_ADDR_EXP 35
6954: PUSH
6955: LD_INT 1
6957: ST_TO_ADDR
// if p3 = 5 then
6958: LD_VAR 0 3
6962: PUSH
6963: LD_INT 5
6965: EQUAL
6966: IFFALSE 6976
// sLevel := true ;
6968: LD_ADDR_EXP 39
6972: PUSH
6973: LD_INT 1
6975: ST_TO_ADDR
// if p3 = 6 then
6976: LD_VAR 0 3
6980: PUSH
6981: LD_INT 6
6983: EQUAL
6984: IFFALSE 6994
// sArmoury := true ;
6986: LD_ADDR_EXP 40
6990: PUSH
6991: LD_INT 1
6993: ST_TO_ADDR
// if p3 = 7 then
6994: LD_VAR 0 3
6998: PUSH
6999: LD_INT 7
7001: EQUAL
7002: IFFALSE 7012
// sRadar := true ;
7004: LD_ADDR_EXP 41
7008: PUSH
7009: LD_INT 1
7011: ST_TO_ADDR
// if p3 = 8 then
7012: LD_VAR 0 3
7016: PUSH
7017: LD_INT 8
7019: EQUAL
7020: IFFALSE 7030
// sBunker := true ;
7022: LD_ADDR_EXP 42
7026: PUSH
7027: LD_INT 1
7029: ST_TO_ADDR
// if p3 = 9 then
7030: LD_VAR 0 3
7034: PUSH
7035: LD_INT 9
7037: EQUAL
7038: IFFALSE 7048
// sHack := true ;
7040: LD_ADDR_EXP 43
7044: PUSH
7045: LD_INT 1
7047: ST_TO_ADDR
// if p3 = 10 then
7048: LD_VAR 0 3
7052: PUSH
7053: LD_INT 10
7055: EQUAL
7056: IFFALSE 7066
// sFire := true ;
7058: LD_ADDR_EXP 44
7062: PUSH
7063: LD_INT 1
7065: ST_TO_ADDR
// if p3 = 11 then
7066: LD_VAR 0 3
7070: PUSH
7071: LD_INT 11
7073: EQUAL
7074: IFFALSE 7084
// sRefresh := true ;
7076: LD_ADDR_EXP 45
7080: PUSH
7081: LD_INT 1
7083: ST_TO_ADDR
// if p3 = 12 then
7084: LD_VAR 0 3
7088: PUSH
7089: LD_INT 12
7091: EQUAL
7092: IFFALSE 7102
// sExp := true ;
7094: LD_ADDR_EXP 46
7098: PUSH
7099: LD_INT 1
7101: ST_TO_ADDR
// if p3 = 13 then
7102: LD_VAR 0 3
7106: PUSH
7107: LD_INT 13
7109: EQUAL
7110: IFFALSE 7120
// sDepot := true ;
7112: LD_ADDR_EXP 47
7116: PUSH
7117: LD_INT 1
7119: ST_TO_ADDR
// if p3 = 14 then
7120: LD_VAR 0 3
7124: PUSH
7125: LD_INT 14
7127: EQUAL
7128: IFFALSE 7138
// sFlag := true ;
7130: LD_ADDR_EXP 48
7134: PUSH
7135: LD_INT 1
7137: ST_TO_ADDR
// if p3 = 15 then
7138: LD_VAR 0 3
7142: PUSH
7143: LD_INT 15
7145: EQUAL
7146: IFFALSE 7156
// sKamikadze := true ;
7148: LD_ADDR_EXP 56
7152: PUSH
7153: LD_INT 1
7155: ST_TO_ADDR
// if p3 = 16 then
7156: LD_VAR 0 3
7160: PUSH
7161: LD_INT 16
7163: EQUAL
7164: IFFALSE 7174
// sTroll := true ;
7166: LD_ADDR_EXP 57
7170: PUSH
7171: LD_INT 1
7173: ST_TO_ADDR
// if p3 = 17 then
7174: LD_VAR 0 3
7178: PUSH
7179: LD_INT 17
7181: EQUAL
7182: IFFALSE 7192
// sSlow := true ;
7184: LD_ADDR_EXP 58
7188: PUSH
7189: LD_INT 1
7191: ST_TO_ADDR
// if p3 = 18 then
7192: LD_VAR 0 3
7196: PUSH
7197: LD_INT 18
7199: EQUAL
7200: IFFALSE 7210
// sLack := true ;
7202: LD_ADDR_EXP 59
7206: PUSH
7207: LD_INT 1
7209: ST_TO_ADDR
// if p3 = 19 then
7210: LD_VAR 0 3
7214: PUSH
7215: LD_INT 19
7217: EQUAL
7218: IFFALSE 7228
// sTank := true ;
7220: LD_ADDR_EXP 61
7224: PUSH
7225: LD_INT 1
7227: ST_TO_ADDR
// if p3 = 20 then
7228: LD_VAR 0 3
7232: PUSH
7233: LD_INT 20
7235: EQUAL
7236: IFFALSE 7246
// sRemote := true ;
7238: LD_ADDR_EXP 62
7242: PUSH
7243: LD_INT 1
7245: ST_TO_ADDR
// if p3 = 21 then
7246: LD_VAR 0 3
7250: PUSH
7251: LD_INT 21
7253: EQUAL
7254: IFFALSE 7264
// sPowell := true ;
7256: LD_ADDR_EXP 63
7260: PUSH
7261: LD_INT 1
7263: ST_TO_ADDR
// if p3 = 22 then
7264: LD_VAR 0 3
7268: PUSH
7269: LD_INT 22
7271: EQUAL
7272: IFFALSE 7282
// sTeleport := true ;
7274: LD_ADDR_EXP 66
7278: PUSH
7279: LD_INT 1
7281: ST_TO_ADDR
// if p3 = 23 then
7282: LD_VAR 0 3
7286: PUSH
7287: LD_INT 23
7289: EQUAL
7290: IFFALSE 7300
// sOilTower := true ;
7292: LD_ADDR_EXP 68
7296: PUSH
7297: LD_INT 1
7299: ST_TO_ADDR
// if p3 = 24 then
7300: LD_VAR 0 3
7304: PUSH
7305: LD_INT 24
7307: EQUAL
7308: IFFALSE 7318
// sShovel := true ;
7310: LD_ADDR_EXP 69
7314: PUSH
7315: LD_INT 1
7317: ST_TO_ADDR
// if p3 = 25 then
7318: LD_VAR 0 3
7322: PUSH
7323: LD_INT 25
7325: EQUAL
7326: IFFALSE 7336
// sSheik := true ;
7328: LD_ADDR_EXP 70
7332: PUSH
7333: LD_INT 1
7335: ST_TO_ADDR
// if p3 = 26 then
7336: LD_VAR 0 3
7340: PUSH
7341: LD_INT 26
7343: EQUAL
7344: IFFALSE 7354
// sEarthquake := true ;
7346: LD_ADDR_EXP 72
7350: PUSH
7351: LD_INT 1
7353: ST_TO_ADDR
// if p3 = 27 then
7354: LD_VAR 0 3
7358: PUSH
7359: LD_INT 27
7361: EQUAL
7362: IFFALSE 7372
// sAI := true ;
7364: LD_ADDR_EXP 73
7368: PUSH
7369: LD_INT 1
7371: ST_TO_ADDR
// if p3 = 28 then
7372: LD_VAR 0 3
7376: PUSH
7377: LD_INT 28
7379: EQUAL
7380: IFFALSE 7390
// sCargo := true ;
7382: LD_ADDR_EXP 76
7386: PUSH
7387: LD_INT 1
7389: ST_TO_ADDR
// if p3 = 29 then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 29
7397: EQUAL
7398: IFFALSE 7408
// sDLaser := true ;
7400: LD_ADDR_EXP 77
7404: PUSH
7405: LD_INT 1
7407: ST_TO_ADDR
// if p3 = 30 then
7408: LD_VAR 0 3
7412: PUSH
7413: LD_INT 30
7415: EQUAL
7416: IFFALSE 7426
// sExchange := true ;
7418: LD_ADDR_EXP 78
7422: PUSH
7423: LD_INT 1
7425: ST_TO_ADDR
// if p3 = 31 then
7426: LD_VAR 0 3
7430: PUSH
7431: LD_INT 31
7433: EQUAL
7434: IFFALSE 7444
// sFac := true ;
7436: LD_ADDR_EXP 79
7440: PUSH
7441: LD_INT 1
7443: ST_TO_ADDR
// if p3 = 32 then
7444: LD_VAR 0 3
7448: PUSH
7449: LD_INT 32
7451: EQUAL
7452: IFFALSE 7462
// sPower := true ;
7454: LD_ADDR_EXP 80
7458: PUSH
7459: LD_INT 1
7461: ST_TO_ADDR
// if p3 = 33 then
7462: LD_VAR 0 3
7466: PUSH
7467: LD_INT 33
7469: EQUAL
7470: IFFALSE 7480
// sRandom := true ;
7472: LD_ADDR_EXP 81
7476: PUSH
7477: LD_INT 1
7479: ST_TO_ADDR
// if p3 = 34 then
7480: LD_VAR 0 3
7484: PUSH
7485: LD_INT 34
7487: EQUAL
7488: IFFALSE 7498
// sShield := true ;
7490: LD_ADDR_EXP 82
7494: PUSH
7495: LD_INT 1
7497: ST_TO_ADDR
// if p3 = 35 then
7498: LD_VAR 0 3
7502: PUSH
7503: LD_INT 35
7505: EQUAL
7506: IFFALSE 7516
// sTime := true ;
7508: LD_ADDR_EXP 83
7512: PUSH
7513: LD_INT 1
7515: ST_TO_ADDR
// if p3 = 36 then
7516: LD_VAR 0 3
7520: PUSH
7521: LD_INT 36
7523: EQUAL
7524: IFFALSE 7534
// sTools := true ;
7526: LD_ADDR_EXP 84
7530: PUSH
7531: LD_INT 1
7533: ST_TO_ADDR
// if p3 = 101 then
7534: LD_VAR 0 3
7538: PUSH
7539: LD_INT 101
7541: EQUAL
7542: IFFALSE 7552
// sSold := true ;
7544: LD_ADDR_EXP 49
7548: PUSH
7549: LD_INT 1
7551: ST_TO_ADDR
// if p3 = 102 then
7552: LD_VAR 0 3
7556: PUSH
7557: LD_INT 102
7559: EQUAL
7560: IFFALSE 7570
// sDiff := true ;
7562: LD_ADDR_EXP 50
7566: PUSH
7567: LD_INT 1
7569: ST_TO_ADDR
// if p3 = 103 then
7570: LD_VAR 0 3
7574: PUSH
7575: LD_INT 103
7577: EQUAL
7578: IFFALSE 7588
// sFog := true ;
7580: LD_ADDR_EXP 53
7584: PUSH
7585: LD_INT 1
7587: ST_TO_ADDR
// if p3 = 104 then
7588: LD_VAR 0 3
7592: PUSH
7593: LD_INT 104
7595: EQUAL
7596: IFFALSE 7606
// sReset := true ;
7598: LD_ADDR_EXP 54
7602: PUSH
7603: LD_INT 1
7605: ST_TO_ADDR
// if p3 = 105 then
7606: LD_VAR 0 3
7610: PUSH
7611: LD_INT 105
7613: EQUAL
7614: IFFALSE 7624
// sSun := true ;
7616: LD_ADDR_EXP 55
7620: PUSH
7621: LD_INT 1
7623: ST_TO_ADDR
// if p3 = 106 then
7624: LD_VAR 0 3
7628: PUSH
7629: LD_INT 106
7631: EQUAL
7632: IFFALSE 7642
// sTiger := true ;
7634: LD_ADDR_EXP 51
7638: PUSH
7639: LD_INT 1
7641: ST_TO_ADDR
// if p3 = 107 then
7642: LD_VAR 0 3
7646: PUSH
7647: LD_INT 107
7649: EQUAL
7650: IFFALSE 7660
// sBomb := true ;
7652: LD_ADDR_EXP 52
7656: PUSH
7657: LD_INT 1
7659: ST_TO_ADDR
// if p3 = 108 then
7660: LD_VAR 0 3
7664: PUSH
7665: LD_INT 108
7667: EQUAL
7668: IFFALSE 7678
// sWound := true ;
7670: LD_ADDR_EXP 60
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// if p3 = 109 then
7678: LD_VAR 0 3
7682: PUSH
7683: LD_INT 109
7685: EQUAL
7686: IFFALSE 7696
// sBetray := true ;
7688: LD_ADDR_EXP 64
7692: PUSH
7693: LD_INT 1
7695: ST_TO_ADDR
// if p3 = 110 then
7696: LD_VAR 0 3
7700: PUSH
7701: LD_INT 110
7703: EQUAL
7704: IFFALSE 7714
// sContamin := true ;
7706: LD_ADDR_EXP 65
7710: PUSH
7711: LD_INT 1
7713: ST_TO_ADDR
// if p3 = 111 then
7714: LD_VAR 0 3
7718: PUSH
7719: LD_INT 111
7721: EQUAL
7722: IFFALSE 7732
// sOil := true ;
7724: LD_ADDR_EXP 67
7728: PUSH
7729: LD_INT 1
7731: ST_TO_ADDR
// if p3 = 112 then
7732: LD_VAR 0 3
7736: PUSH
7737: LD_INT 112
7739: EQUAL
7740: IFFALSE 7750
// sStu := true ;
7742: LD_ADDR_EXP 71
7746: PUSH
7747: LD_INT 1
7749: ST_TO_ADDR
// if p3 = 113 then
7750: LD_VAR 0 3
7754: PUSH
7755: LD_INT 113
7757: EQUAL
7758: IFFALSE 7768
// sBazooka := true ;
7760: LD_ADDR_EXP 74
7764: PUSH
7765: LD_INT 1
7767: ST_TO_ADDR
// if p3 = 114 then
7768: LD_VAR 0 3
7772: PUSH
7773: LD_INT 114
7775: EQUAL
7776: IFFALSE 7786
// sMortar := true ;
7778: LD_ADDR_EXP 75
7782: PUSH
7783: LD_INT 1
7785: ST_TO_ADDR
// if p3 = 115 then
7786: LD_VAR 0 3
7790: PUSH
7791: LD_INT 115
7793: EQUAL
7794: IFFALSE 7804
// sRanger := true ;
7796: LD_ADDR_EXP 85
7800: PUSH
7801: LD_INT 1
7803: ST_TO_ADDR
// end ; if p2 = 101 then
7804: LD_VAR 0 2
7808: PUSH
7809: LD_INT 101
7811: EQUAL
7812: IFFALSE 7940
// begin case p3 of 1 :
7814: LD_VAR 0 3
7818: PUSH
7819: LD_INT 1
7821: DOUBLE
7822: EQUAL
7823: IFTRUE 7827
7825: GO 7834
7827: POP
// hHackUnlimitedResources ; 2 :
7828: CALL 18977 0 0
7832: GO 7940
7834: LD_INT 2
7836: DOUBLE
7837: EQUAL
7838: IFTRUE 7842
7840: GO 7849
7842: POP
// hHackSetLevel10 ; 3 :
7843: CALL 19110 0 0
7847: GO 7940
7849: LD_INT 3
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7857
7855: GO 7864
7857: POP
// hHackSetLevel10YourUnits ; 4 :
7858: CALL 19195 0 0
7862: GO 7940
7864: LD_INT 4
7866: DOUBLE
7867: EQUAL
7868: IFTRUE 7872
7870: GO 7879
7872: POP
// hHackInvincible ; 5 :
7873: CALL 19643 0 0
7877: GO 7940
7879: LD_INT 5
7881: DOUBLE
7882: EQUAL
7883: IFTRUE 7887
7885: GO 7894
7887: POP
// hHackInvisible ; 6 :
7888: CALL 19754 0 0
7892: GO 7940
7894: LD_INT 6
7896: DOUBLE
7897: EQUAL
7898: IFTRUE 7902
7900: GO 7909
7902: POP
// hHackChangeYourSide ; 7 :
7903: CALL 19811 0 0
7907: GO 7940
7909: LD_INT 7
7911: DOUBLE
7912: EQUAL
7913: IFTRUE 7917
7915: GO 7924
7917: POP
// hHackChangeUnitSide ; 8 :
7918: CALL 19853 0 0
7922: GO 7940
7924: LD_INT 8
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7939
7932: POP
// hHackFog ; end ;
7933: CALL 19954 0 0
7937: GO 7940
7939: POP
// end ; end ;
7940: LD_VAR 0 7
7944: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7945: GO 7947
7947: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7948: LD_STRING initStreamRollete();
7950: PPUSH
7951: CALL_OW 559
// InitStreamMode ;
7955: CALL 7964 0 0
// DefineStreamItems ( ) ;
7959: CALL 8404 0 0
// end ;
7963: END
// function InitStreamMode ; begin
7964: LD_INT 0
7966: PPUSH
// streamModeActive := false ;
7967: LD_ADDR_EXP 32
7971: PUSH
7972: LD_INT 0
7974: ST_TO_ADDR
// normalCounter := 36 ;
7975: LD_ADDR_EXP 33
7979: PUSH
7980: LD_INT 36
7982: ST_TO_ADDR
// hardcoreCounter := 16 ;
7983: LD_ADDR_EXP 34
7987: PUSH
7988: LD_INT 16
7990: ST_TO_ADDR
// sRocket := false ;
7991: LD_ADDR_EXP 37
7995: PUSH
7996: LD_INT 0
7998: ST_TO_ADDR
// sSpeed := false ;
7999: LD_ADDR_EXP 36
8003: PUSH
8004: LD_INT 0
8006: ST_TO_ADDR
// sEngine := false ;
8007: LD_ADDR_EXP 38
8011: PUSH
8012: LD_INT 0
8014: ST_TO_ADDR
// sSpec := false ;
8015: LD_ADDR_EXP 35
8019: PUSH
8020: LD_INT 0
8022: ST_TO_ADDR
// sLevel := false ;
8023: LD_ADDR_EXP 39
8027: PUSH
8028: LD_INT 0
8030: ST_TO_ADDR
// sArmoury := false ;
8031: LD_ADDR_EXP 40
8035: PUSH
8036: LD_INT 0
8038: ST_TO_ADDR
// sRadar := false ;
8039: LD_ADDR_EXP 41
8043: PUSH
8044: LD_INT 0
8046: ST_TO_ADDR
// sBunker := false ;
8047: LD_ADDR_EXP 42
8051: PUSH
8052: LD_INT 0
8054: ST_TO_ADDR
// sHack := false ;
8055: LD_ADDR_EXP 43
8059: PUSH
8060: LD_INT 0
8062: ST_TO_ADDR
// sFire := false ;
8063: LD_ADDR_EXP 44
8067: PUSH
8068: LD_INT 0
8070: ST_TO_ADDR
// sRefresh := false ;
8071: LD_ADDR_EXP 45
8075: PUSH
8076: LD_INT 0
8078: ST_TO_ADDR
// sExp := false ;
8079: LD_ADDR_EXP 46
8083: PUSH
8084: LD_INT 0
8086: ST_TO_ADDR
// sDepot := false ;
8087: LD_ADDR_EXP 47
8091: PUSH
8092: LD_INT 0
8094: ST_TO_ADDR
// sFlag := false ;
8095: LD_ADDR_EXP 48
8099: PUSH
8100: LD_INT 0
8102: ST_TO_ADDR
// sKamikadze := false ;
8103: LD_ADDR_EXP 56
8107: PUSH
8108: LD_INT 0
8110: ST_TO_ADDR
// sTroll := false ;
8111: LD_ADDR_EXP 57
8115: PUSH
8116: LD_INT 0
8118: ST_TO_ADDR
// sSlow := false ;
8119: LD_ADDR_EXP 58
8123: PUSH
8124: LD_INT 0
8126: ST_TO_ADDR
// sLack := false ;
8127: LD_ADDR_EXP 59
8131: PUSH
8132: LD_INT 0
8134: ST_TO_ADDR
// sTank := false ;
8135: LD_ADDR_EXP 61
8139: PUSH
8140: LD_INT 0
8142: ST_TO_ADDR
// sRemote := false ;
8143: LD_ADDR_EXP 62
8147: PUSH
8148: LD_INT 0
8150: ST_TO_ADDR
// sPowell := false ;
8151: LD_ADDR_EXP 63
8155: PUSH
8156: LD_INT 0
8158: ST_TO_ADDR
// sTeleport := false ;
8159: LD_ADDR_EXP 66
8163: PUSH
8164: LD_INT 0
8166: ST_TO_ADDR
// sOilTower := false ;
8167: LD_ADDR_EXP 68
8171: PUSH
8172: LD_INT 0
8174: ST_TO_ADDR
// sShovel := false ;
8175: LD_ADDR_EXP 69
8179: PUSH
8180: LD_INT 0
8182: ST_TO_ADDR
// sSheik := false ;
8183: LD_ADDR_EXP 70
8187: PUSH
8188: LD_INT 0
8190: ST_TO_ADDR
// sEarthquake := false ;
8191: LD_ADDR_EXP 72
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// sAI := false ;
8199: LD_ADDR_EXP 73
8203: PUSH
8204: LD_INT 0
8206: ST_TO_ADDR
// sCargo := false ;
8207: LD_ADDR_EXP 76
8211: PUSH
8212: LD_INT 0
8214: ST_TO_ADDR
// sDLaser := false ;
8215: LD_ADDR_EXP 77
8219: PUSH
8220: LD_INT 0
8222: ST_TO_ADDR
// sExchange := false ;
8223: LD_ADDR_EXP 78
8227: PUSH
8228: LD_INT 0
8230: ST_TO_ADDR
// sFac := false ;
8231: LD_ADDR_EXP 79
8235: PUSH
8236: LD_INT 0
8238: ST_TO_ADDR
// sPower := false ;
8239: LD_ADDR_EXP 80
8243: PUSH
8244: LD_INT 0
8246: ST_TO_ADDR
// sRandom := false ;
8247: LD_ADDR_EXP 81
8251: PUSH
8252: LD_INT 0
8254: ST_TO_ADDR
// sShield := false ;
8255: LD_ADDR_EXP 82
8259: PUSH
8260: LD_INT 0
8262: ST_TO_ADDR
// sTime := false ;
8263: LD_ADDR_EXP 83
8267: PUSH
8268: LD_INT 0
8270: ST_TO_ADDR
// sTools := false ;
8271: LD_ADDR_EXP 84
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// sSold := false ;
8279: LD_ADDR_EXP 49
8283: PUSH
8284: LD_INT 0
8286: ST_TO_ADDR
// sDiff := false ;
8287: LD_ADDR_EXP 50
8291: PUSH
8292: LD_INT 0
8294: ST_TO_ADDR
// sFog := false ;
8295: LD_ADDR_EXP 53
8299: PUSH
8300: LD_INT 0
8302: ST_TO_ADDR
// sReset := false ;
8303: LD_ADDR_EXP 54
8307: PUSH
8308: LD_INT 0
8310: ST_TO_ADDR
// sSun := false ;
8311: LD_ADDR_EXP 55
8315: PUSH
8316: LD_INT 0
8318: ST_TO_ADDR
// sTiger := false ;
8319: LD_ADDR_EXP 51
8323: PUSH
8324: LD_INT 0
8326: ST_TO_ADDR
// sBomb := false ;
8327: LD_ADDR_EXP 52
8331: PUSH
8332: LD_INT 0
8334: ST_TO_ADDR
// sWound := false ;
8335: LD_ADDR_EXP 60
8339: PUSH
8340: LD_INT 0
8342: ST_TO_ADDR
// sBetray := false ;
8343: LD_ADDR_EXP 64
8347: PUSH
8348: LD_INT 0
8350: ST_TO_ADDR
// sContamin := false ;
8351: LD_ADDR_EXP 65
8355: PUSH
8356: LD_INT 0
8358: ST_TO_ADDR
// sOil := false ;
8359: LD_ADDR_EXP 67
8363: PUSH
8364: LD_INT 0
8366: ST_TO_ADDR
// sStu := false ;
8367: LD_ADDR_EXP 71
8371: PUSH
8372: LD_INT 0
8374: ST_TO_ADDR
// sBazooka := false ;
8375: LD_ADDR_EXP 74
8379: PUSH
8380: LD_INT 0
8382: ST_TO_ADDR
// sMortar := false ;
8383: LD_ADDR_EXP 75
8387: PUSH
8388: LD_INT 0
8390: ST_TO_ADDR
// sRanger := false ;
8391: LD_ADDR_EXP 85
8395: PUSH
8396: LD_INT 0
8398: ST_TO_ADDR
// end ;
8399: LD_VAR 0 1
8403: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8404: LD_INT 0
8406: PPUSH
8407: PPUSH
8408: PPUSH
8409: PPUSH
8410: PPUSH
// result := [ ] ;
8411: LD_ADDR_VAR 0 1
8415: PUSH
8416: EMPTY
8417: ST_TO_ADDR
// if campaign_id = 1 then
8418: LD_OWVAR 69
8422: PUSH
8423: LD_INT 1
8425: EQUAL
8426: IFFALSE 11364
// begin case mission_number of 1 :
8428: LD_OWVAR 70
8432: PUSH
8433: LD_INT 1
8435: DOUBLE
8436: EQUAL
8437: IFTRUE 8441
8439: GO 8505
8441: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8442: LD_ADDR_VAR 0 1
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: LD_INT 4
8452: PUSH
8453: LD_INT 11
8455: PUSH
8456: LD_INT 12
8458: PUSH
8459: LD_INT 15
8461: PUSH
8462: LD_INT 16
8464: PUSH
8465: LD_INT 22
8467: PUSH
8468: LD_INT 23
8470: PUSH
8471: LD_INT 26
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 101
8487: PUSH
8488: LD_INT 102
8490: PUSH
8491: LD_INT 106
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: LIST
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: ST_TO_ADDR
8503: GO 11362
8505: LD_INT 2
8507: DOUBLE
8508: EQUAL
8509: IFTRUE 8513
8511: GO 8585
8513: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8514: LD_ADDR_VAR 0 1
8518: PUSH
8519: LD_INT 2
8521: PUSH
8522: LD_INT 4
8524: PUSH
8525: LD_INT 11
8527: PUSH
8528: LD_INT 12
8530: PUSH
8531: LD_INT 15
8533: PUSH
8534: LD_INT 16
8536: PUSH
8537: LD_INT 22
8539: PUSH
8540: LD_INT 23
8542: PUSH
8543: LD_INT 26
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 101
8559: PUSH
8560: LD_INT 102
8562: PUSH
8563: LD_INT 105
8565: PUSH
8566: LD_INT 106
8568: PUSH
8569: LD_INT 108
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: ST_TO_ADDR
8583: GO 11362
8585: LD_INT 3
8587: DOUBLE
8588: EQUAL
8589: IFTRUE 8593
8591: GO 8669
8593: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8594: LD_ADDR_VAR 0 1
8598: PUSH
8599: LD_INT 2
8601: PUSH
8602: LD_INT 4
8604: PUSH
8605: LD_INT 5
8607: PUSH
8608: LD_INT 11
8610: PUSH
8611: LD_INT 12
8613: PUSH
8614: LD_INT 15
8616: PUSH
8617: LD_INT 16
8619: PUSH
8620: LD_INT 22
8622: PUSH
8623: LD_INT 26
8625: PUSH
8626: LD_INT 36
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 101
8643: PUSH
8644: LD_INT 102
8646: PUSH
8647: LD_INT 105
8649: PUSH
8650: LD_INT 106
8652: PUSH
8653: LD_INT 108
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: ST_TO_ADDR
8667: GO 11362
8669: LD_INT 4
8671: DOUBLE
8672: EQUAL
8673: IFTRUE 8677
8675: GO 8761
8677: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8678: LD_ADDR_VAR 0 1
8682: PUSH
8683: LD_INT 2
8685: PUSH
8686: LD_INT 4
8688: PUSH
8689: LD_INT 5
8691: PUSH
8692: LD_INT 8
8694: PUSH
8695: LD_INT 11
8697: PUSH
8698: LD_INT 12
8700: PUSH
8701: LD_INT 15
8703: PUSH
8704: LD_INT 16
8706: PUSH
8707: LD_INT 22
8709: PUSH
8710: LD_INT 23
8712: PUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 36
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 101
8735: PUSH
8736: LD_INT 102
8738: PUSH
8739: LD_INT 105
8741: PUSH
8742: LD_INT 106
8744: PUSH
8745: LD_INT 108
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: ST_TO_ADDR
8759: GO 11362
8761: LD_INT 5
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8869
8769: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8770: LD_ADDR_VAR 0 1
8774: PUSH
8775: LD_INT 2
8777: PUSH
8778: LD_INT 4
8780: PUSH
8781: LD_INT 5
8783: PUSH
8784: LD_INT 6
8786: PUSH
8787: LD_INT 8
8789: PUSH
8790: LD_INT 11
8792: PUSH
8793: LD_INT 12
8795: PUSH
8796: LD_INT 15
8798: PUSH
8799: LD_INT 16
8801: PUSH
8802: LD_INT 22
8804: PUSH
8805: LD_INT 23
8807: PUSH
8808: LD_INT 25
8810: PUSH
8811: LD_INT 26
8813: PUSH
8814: LD_INT 36
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 101
8835: PUSH
8836: LD_INT 102
8838: PUSH
8839: LD_INT 105
8841: PUSH
8842: LD_INT 106
8844: PUSH
8845: LD_INT 108
8847: PUSH
8848: LD_INT 109
8850: PUSH
8851: LD_INT 112
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: ST_TO_ADDR
8867: GO 11362
8869: LD_INT 6
8871: DOUBLE
8872: EQUAL
8873: IFTRUE 8877
8875: GO 8997
8877: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8878: LD_ADDR_VAR 0 1
8882: PUSH
8883: LD_INT 2
8885: PUSH
8886: LD_INT 4
8888: PUSH
8889: LD_INT 5
8891: PUSH
8892: LD_INT 6
8894: PUSH
8895: LD_INT 8
8897: PUSH
8898: LD_INT 11
8900: PUSH
8901: LD_INT 12
8903: PUSH
8904: LD_INT 15
8906: PUSH
8907: LD_INT 16
8909: PUSH
8910: LD_INT 20
8912: PUSH
8913: LD_INT 21
8915: PUSH
8916: LD_INT 22
8918: PUSH
8919: LD_INT 23
8921: PUSH
8922: LD_INT 25
8924: PUSH
8925: LD_INT 26
8927: PUSH
8928: LD_INT 30
8930: PUSH
8931: LD_INT 31
8933: PUSH
8934: LD_INT 32
8936: PUSH
8937: LD_INT 36
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 101
8963: PUSH
8964: LD_INT 102
8966: PUSH
8967: LD_INT 105
8969: PUSH
8970: LD_INT 106
8972: PUSH
8973: LD_INT 108
8975: PUSH
8976: LD_INT 109
8978: PUSH
8979: LD_INT 112
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: ST_TO_ADDR
8995: GO 11362
8997: LD_INT 7
8999: DOUBLE
9000: EQUAL
9001: IFTRUE 9005
9003: GO 9105
9005: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9006: LD_ADDR_VAR 0 1
9010: PUSH
9011: LD_INT 2
9013: PUSH
9014: LD_INT 4
9016: PUSH
9017: LD_INT 5
9019: PUSH
9020: LD_INT 7
9022: PUSH
9023: LD_INT 11
9025: PUSH
9026: LD_INT 12
9028: PUSH
9029: LD_INT 15
9031: PUSH
9032: LD_INT 16
9034: PUSH
9035: LD_INT 20
9037: PUSH
9038: LD_INT 21
9040: PUSH
9041: LD_INT 22
9043: PUSH
9044: LD_INT 23
9046: PUSH
9047: LD_INT 25
9049: PUSH
9050: LD_INT 26
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 101
9071: PUSH
9072: LD_INT 102
9074: PUSH
9075: LD_INT 103
9077: PUSH
9078: LD_INT 105
9080: PUSH
9081: LD_INT 106
9083: PUSH
9084: LD_INT 108
9086: PUSH
9087: LD_INT 112
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: ST_TO_ADDR
9103: GO 11362
9105: LD_INT 8
9107: DOUBLE
9108: EQUAL
9109: IFTRUE 9113
9111: GO 9241
9113: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9114: LD_ADDR_VAR 0 1
9118: PUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 4
9124: PUSH
9125: LD_INT 5
9127: PUSH
9128: LD_INT 6
9130: PUSH
9131: LD_INT 7
9133: PUSH
9134: LD_INT 8
9136: PUSH
9137: LD_INT 11
9139: PUSH
9140: LD_INT 12
9142: PUSH
9143: LD_INT 15
9145: PUSH
9146: LD_INT 16
9148: PUSH
9149: LD_INT 20
9151: PUSH
9152: LD_INT 21
9154: PUSH
9155: LD_INT 22
9157: PUSH
9158: LD_INT 23
9160: PUSH
9161: LD_INT 25
9163: PUSH
9164: LD_INT 26
9166: PUSH
9167: LD_INT 30
9169: PUSH
9170: LD_INT 31
9172: PUSH
9173: LD_INT 32
9175: PUSH
9176: LD_INT 36
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 101
9203: PUSH
9204: LD_INT 102
9206: PUSH
9207: LD_INT 103
9209: PUSH
9210: LD_INT 105
9212: PUSH
9213: LD_INT 106
9215: PUSH
9216: LD_INT 108
9218: PUSH
9219: LD_INT 109
9221: PUSH
9222: LD_INT 112
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: ST_TO_ADDR
9239: GO 11362
9241: LD_INT 9
9243: DOUBLE
9244: EQUAL
9245: IFTRUE 9249
9247: GO 9385
9249: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9250: LD_ADDR_VAR 0 1
9254: PUSH
9255: LD_INT 2
9257: PUSH
9258: LD_INT 4
9260: PUSH
9261: LD_INT 5
9263: PUSH
9264: LD_INT 6
9266: PUSH
9267: LD_INT 7
9269: PUSH
9270: LD_INT 8
9272: PUSH
9273: LD_INT 11
9275: PUSH
9276: LD_INT 12
9278: PUSH
9279: LD_INT 15
9281: PUSH
9282: LD_INT 16
9284: PUSH
9285: LD_INT 20
9287: PUSH
9288: LD_INT 21
9290: PUSH
9291: LD_INT 22
9293: PUSH
9294: LD_INT 23
9296: PUSH
9297: LD_INT 25
9299: PUSH
9300: LD_INT 26
9302: PUSH
9303: LD_INT 28
9305: PUSH
9306: LD_INT 30
9308: PUSH
9309: LD_INT 31
9311: PUSH
9312: LD_INT 32
9314: PUSH
9315: LD_INT 36
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: PUSH
9341: LD_INT 101
9343: PUSH
9344: LD_INT 102
9346: PUSH
9347: LD_INT 103
9349: PUSH
9350: LD_INT 105
9352: PUSH
9353: LD_INT 106
9355: PUSH
9356: LD_INT 108
9358: PUSH
9359: LD_INT 109
9361: PUSH
9362: LD_INT 112
9364: PUSH
9365: LD_INT 114
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: ST_TO_ADDR
9383: GO 11362
9385: LD_INT 10
9387: DOUBLE
9388: EQUAL
9389: IFTRUE 9393
9391: GO 9577
9393: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9394: LD_ADDR_VAR 0 1
9398: PUSH
9399: LD_INT 2
9401: PUSH
9402: LD_INT 4
9404: PUSH
9405: LD_INT 5
9407: PUSH
9408: LD_INT 6
9410: PUSH
9411: LD_INT 7
9413: PUSH
9414: LD_INT 8
9416: PUSH
9417: LD_INT 9
9419: PUSH
9420: LD_INT 10
9422: PUSH
9423: LD_INT 11
9425: PUSH
9426: LD_INT 12
9428: PUSH
9429: LD_INT 13
9431: PUSH
9432: LD_INT 14
9434: PUSH
9435: LD_INT 15
9437: PUSH
9438: LD_INT 16
9440: PUSH
9441: LD_INT 17
9443: PUSH
9444: LD_INT 18
9446: PUSH
9447: LD_INT 19
9449: PUSH
9450: LD_INT 20
9452: PUSH
9453: LD_INT 21
9455: PUSH
9456: LD_INT 22
9458: PUSH
9459: LD_INT 23
9461: PUSH
9462: LD_INT 24
9464: PUSH
9465: LD_INT 25
9467: PUSH
9468: LD_INT 26
9470: PUSH
9471: LD_INT 28
9473: PUSH
9474: LD_INT 30
9476: PUSH
9477: LD_INT 31
9479: PUSH
9480: LD_INT 32
9482: PUSH
9483: LD_INT 36
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 101
9519: PUSH
9520: LD_INT 102
9522: PUSH
9523: LD_INT 103
9525: PUSH
9526: LD_INT 104
9528: PUSH
9529: LD_INT 105
9531: PUSH
9532: LD_INT 106
9534: PUSH
9535: LD_INT 107
9537: PUSH
9538: LD_INT 108
9540: PUSH
9541: LD_INT 109
9543: PUSH
9544: LD_INT 110
9546: PUSH
9547: LD_INT 111
9549: PUSH
9550: LD_INT 112
9552: PUSH
9553: LD_INT 114
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: ST_TO_ADDR
9575: GO 11362
9577: LD_INT 11
9579: DOUBLE
9580: EQUAL
9581: IFTRUE 9585
9583: GO 9777
9585: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9586: LD_ADDR_VAR 0 1
9590: PUSH
9591: LD_INT 2
9593: PUSH
9594: LD_INT 3
9596: PUSH
9597: LD_INT 4
9599: PUSH
9600: LD_INT 5
9602: PUSH
9603: LD_INT 6
9605: PUSH
9606: LD_INT 7
9608: PUSH
9609: LD_INT 8
9611: PUSH
9612: LD_INT 9
9614: PUSH
9615: LD_INT 10
9617: PUSH
9618: LD_INT 11
9620: PUSH
9621: LD_INT 12
9623: PUSH
9624: LD_INT 13
9626: PUSH
9627: LD_INT 14
9629: PUSH
9630: LD_INT 15
9632: PUSH
9633: LD_INT 16
9635: PUSH
9636: LD_INT 17
9638: PUSH
9639: LD_INT 18
9641: PUSH
9642: LD_INT 19
9644: PUSH
9645: LD_INT 20
9647: PUSH
9648: LD_INT 21
9650: PUSH
9651: LD_INT 22
9653: PUSH
9654: LD_INT 23
9656: PUSH
9657: LD_INT 24
9659: PUSH
9660: LD_INT 25
9662: PUSH
9663: LD_INT 26
9665: PUSH
9666: LD_INT 28
9668: PUSH
9669: LD_INT 30
9671: PUSH
9672: LD_INT 31
9674: PUSH
9675: LD_INT 32
9677: PUSH
9678: LD_INT 34
9680: PUSH
9681: LD_INT 36
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 101
9719: PUSH
9720: LD_INT 102
9722: PUSH
9723: LD_INT 103
9725: PUSH
9726: LD_INT 104
9728: PUSH
9729: LD_INT 105
9731: PUSH
9732: LD_INT 106
9734: PUSH
9735: LD_INT 107
9737: PUSH
9738: LD_INT 108
9740: PUSH
9741: LD_INT 109
9743: PUSH
9744: LD_INT 110
9746: PUSH
9747: LD_INT 111
9749: PUSH
9750: LD_INT 112
9752: PUSH
9753: LD_INT 114
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: ST_TO_ADDR
9775: GO 11362
9777: LD_INT 12
9779: DOUBLE
9780: EQUAL
9781: IFTRUE 9785
9783: GO 9993
9785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9786: LD_ADDR_VAR 0 1
9790: PUSH
9791: LD_INT 1
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: LD_INT 3
9799: PUSH
9800: LD_INT 4
9802: PUSH
9803: LD_INT 5
9805: PUSH
9806: LD_INT 6
9808: PUSH
9809: LD_INT 7
9811: PUSH
9812: LD_INT 8
9814: PUSH
9815: LD_INT 9
9817: PUSH
9818: LD_INT 10
9820: PUSH
9821: LD_INT 11
9823: PUSH
9824: LD_INT 12
9826: PUSH
9827: LD_INT 13
9829: PUSH
9830: LD_INT 14
9832: PUSH
9833: LD_INT 15
9835: PUSH
9836: LD_INT 16
9838: PUSH
9839: LD_INT 17
9841: PUSH
9842: LD_INT 18
9844: PUSH
9845: LD_INT 19
9847: PUSH
9848: LD_INT 20
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 22
9856: PUSH
9857: LD_INT 23
9859: PUSH
9860: LD_INT 24
9862: PUSH
9863: LD_INT 25
9865: PUSH
9866: LD_INT 26
9868: PUSH
9869: LD_INT 27
9871: PUSH
9872: LD_INT 28
9874: PUSH
9875: LD_INT 30
9877: PUSH
9878: LD_INT 31
9880: PUSH
9881: LD_INT 32
9883: PUSH
9884: LD_INT 33
9886: PUSH
9887: LD_INT 34
9889: PUSH
9890: LD_INT 36
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: PUSH
9929: LD_INT 101
9931: PUSH
9932: LD_INT 102
9934: PUSH
9935: LD_INT 103
9937: PUSH
9938: LD_INT 104
9940: PUSH
9941: LD_INT 105
9943: PUSH
9944: LD_INT 106
9946: PUSH
9947: LD_INT 107
9949: PUSH
9950: LD_INT 108
9952: PUSH
9953: LD_INT 109
9955: PUSH
9956: LD_INT 110
9958: PUSH
9959: LD_INT 111
9961: PUSH
9962: LD_INT 112
9964: PUSH
9965: LD_INT 113
9967: PUSH
9968: LD_INT 114
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: ST_TO_ADDR
9991: GO 11362
9993: LD_INT 13
9995: DOUBLE
9996: EQUAL
9997: IFTRUE 10001
9999: GO 10197
10001: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10002: LD_ADDR_VAR 0 1
10006: PUSH
10007: LD_INT 1
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: LD_INT 3
10015: PUSH
10016: LD_INT 4
10018: PUSH
10019: LD_INT 5
10021: PUSH
10022: LD_INT 8
10024: PUSH
10025: LD_INT 9
10027: PUSH
10028: LD_INT 10
10030: PUSH
10031: LD_INT 11
10033: PUSH
10034: LD_INT 12
10036: PUSH
10037: LD_INT 14
10039: PUSH
10040: LD_INT 15
10042: PUSH
10043: LD_INT 16
10045: PUSH
10046: LD_INT 17
10048: PUSH
10049: LD_INT 18
10051: PUSH
10052: LD_INT 19
10054: PUSH
10055: LD_INT 20
10057: PUSH
10058: LD_INT 21
10060: PUSH
10061: LD_INT 22
10063: PUSH
10064: LD_INT 23
10066: PUSH
10067: LD_INT 24
10069: PUSH
10070: LD_INT 25
10072: PUSH
10073: LD_INT 26
10075: PUSH
10076: LD_INT 27
10078: PUSH
10079: LD_INT 28
10081: PUSH
10082: LD_INT 30
10084: PUSH
10085: LD_INT 31
10087: PUSH
10088: LD_INT 32
10090: PUSH
10091: LD_INT 33
10093: PUSH
10094: LD_INT 34
10096: PUSH
10097: LD_INT 36
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 101
10135: PUSH
10136: LD_INT 102
10138: PUSH
10139: LD_INT 103
10141: PUSH
10142: LD_INT 104
10144: PUSH
10145: LD_INT 105
10147: PUSH
10148: LD_INT 106
10150: PUSH
10151: LD_INT 107
10153: PUSH
10154: LD_INT 108
10156: PUSH
10157: LD_INT 109
10159: PUSH
10160: LD_INT 110
10162: PUSH
10163: LD_INT 111
10165: PUSH
10166: LD_INT 112
10168: PUSH
10169: LD_INT 113
10171: PUSH
10172: LD_INT 114
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: ST_TO_ADDR
10195: GO 11362
10197: LD_INT 14
10199: DOUBLE
10200: EQUAL
10201: IFTRUE 10205
10203: GO 10417
10205: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10206: LD_ADDR_VAR 0 1
10210: PUSH
10211: LD_INT 1
10213: PUSH
10214: LD_INT 2
10216: PUSH
10217: LD_INT 3
10219: PUSH
10220: LD_INT 4
10222: PUSH
10223: LD_INT 5
10225: PUSH
10226: LD_INT 6
10228: PUSH
10229: LD_INT 7
10231: PUSH
10232: LD_INT 8
10234: PUSH
10235: LD_INT 9
10237: PUSH
10238: LD_INT 10
10240: PUSH
10241: LD_INT 11
10243: PUSH
10244: LD_INT 12
10246: PUSH
10247: LD_INT 13
10249: PUSH
10250: LD_INT 14
10252: PUSH
10253: LD_INT 15
10255: PUSH
10256: LD_INT 16
10258: PUSH
10259: LD_INT 17
10261: PUSH
10262: LD_INT 18
10264: PUSH
10265: LD_INT 19
10267: PUSH
10268: LD_INT 20
10270: PUSH
10271: LD_INT 21
10273: PUSH
10274: LD_INT 22
10276: PUSH
10277: LD_INT 23
10279: PUSH
10280: LD_INT 24
10282: PUSH
10283: LD_INT 25
10285: PUSH
10286: LD_INT 26
10288: PUSH
10289: LD_INT 27
10291: PUSH
10292: LD_INT 28
10294: PUSH
10295: LD_INT 29
10297: PUSH
10298: LD_INT 30
10300: PUSH
10301: LD_INT 31
10303: PUSH
10304: LD_INT 32
10306: PUSH
10307: LD_INT 33
10309: PUSH
10310: LD_INT 34
10312: PUSH
10313: LD_INT 36
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 101
10355: PUSH
10356: LD_INT 102
10358: PUSH
10359: LD_INT 103
10361: PUSH
10362: LD_INT 104
10364: PUSH
10365: LD_INT 105
10367: PUSH
10368: LD_INT 106
10370: PUSH
10371: LD_INT 107
10373: PUSH
10374: LD_INT 108
10376: PUSH
10377: LD_INT 109
10379: PUSH
10380: LD_INT 110
10382: PUSH
10383: LD_INT 111
10385: PUSH
10386: LD_INT 112
10388: PUSH
10389: LD_INT 113
10391: PUSH
10392: LD_INT 114
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: ST_TO_ADDR
10415: GO 11362
10417: LD_INT 15
10419: DOUBLE
10420: EQUAL
10421: IFTRUE 10425
10423: GO 10637
10425: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10426: LD_ADDR_VAR 0 1
10430: PUSH
10431: LD_INT 1
10433: PUSH
10434: LD_INT 2
10436: PUSH
10437: LD_INT 3
10439: PUSH
10440: LD_INT 4
10442: PUSH
10443: LD_INT 5
10445: PUSH
10446: LD_INT 6
10448: PUSH
10449: LD_INT 7
10451: PUSH
10452: LD_INT 8
10454: PUSH
10455: LD_INT 9
10457: PUSH
10458: LD_INT 10
10460: PUSH
10461: LD_INT 11
10463: PUSH
10464: LD_INT 12
10466: PUSH
10467: LD_INT 13
10469: PUSH
10470: LD_INT 14
10472: PUSH
10473: LD_INT 15
10475: PUSH
10476: LD_INT 16
10478: PUSH
10479: LD_INT 17
10481: PUSH
10482: LD_INT 18
10484: PUSH
10485: LD_INT 19
10487: PUSH
10488: LD_INT 20
10490: PUSH
10491: LD_INT 21
10493: PUSH
10494: LD_INT 22
10496: PUSH
10497: LD_INT 23
10499: PUSH
10500: LD_INT 24
10502: PUSH
10503: LD_INT 25
10505: PUSH
10506: LD_INT 26
10508: PUSH
10509: LD_INT 27
10511: PUSH
10512: LD_INT 28
10514: PUSH
10515: LD_INT 29
10517: PUSH
10518: LD_INT 30
10520: PUSH
10521: LD_INT 31
10523: PUSH
10524: LD_INT 32
10526: PUSH
10527: LD_INT 33
10529: PUSH
10530: LD_INT 34
10532: PUSH
10533: LD_INT 36
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 101
10575: PUSH
10576: LD_INT 102
10578: PUSH
10579: LD_INT 103
10581: PUSH
10582: LD_INT 104
10584: PUSH
10585: LD_INT 105
10587: PUSH
10588: LD_INT 106
10590: PUSH
10591: LD_INT 107
10593: PUSH
10594: LD_INT 108
10596: PUSH
10597: LD_INT 109
10599: PUSH
10600: LD_INT 110
10602: PUSH
10603: LD_INT 111
10605: PUSH
10606: LD_INT 112
10608: PUSH
10609: LD_INT 113
10611: PUSH
10612: LD_INT 114
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: ST_TO_ADDR
10635: GO 11362
10637: LD_INT 16
10639: DOUBLE
10640: EQUAL
10641: IFTRUE 10645
10643: GO 10769
10645: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10646: LD_ADDR_VAR 0 1
10650: PUSH
10651: LD_INT 2
10653: PUSH
10654: LD_INT 4
10656: PUSH
10657: LD_INT 5
10659: PUSH
10660: LD_INT 7
10662: PUSH
10663: LD_INT 11
10665: PUSH
10666: LD_INT 12
10668: PUSH
10669: LD_INT 15
10671: PUSH
10672: LD_INT 16
10674: PUSH
10675: LD_INT 20
10677: PUSH
10678: LD_INT 21
10680: PUSH
10681: LD_INT 22
10683: PUSH
10684: LD_INT 23
10686: PUSH
10687: LD_INT 25
10689: PUSH
10690: LD_INT 26
10692: PUSH
10693: LD_INT 30
10695: PUSH
10696: LD_INT 31
10698: PUSH
10699: LD_INT 32
10701: PUSH
10702: LD_INT 33
10704: PUSH
10705: LD_INT 34
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 101
10731: PUSH
10732: LD_INT 102
10734: PUSH
10735: LD_INT 103
10737: PUSH
10738: LD_INT 106
10740: PUSH
10741: LD_INT 108
10743: PUSH
10744: LD_INT 112
10746: PUSH
10747: LD_INT 113
10749: PUSH
10750: LD_INT 114
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: ST_TO_ADDR
10767: GO 11362
10769: LD_INT 17
10771: DOUBLE
10772: EQUAL
10773: IFTRUE 10777
10775: GO 10989
10777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10778: LD_ADDR_VAR 0 1
10782: PUSH
10783: LD_INT 1
10785: PUSH
10786: LD_INT 2
10788: PUSH
10789: LD_INT 3
10791: PUSH
10792: LD_INT 4
10794: PUSH
10795: LD_INT 5
10797: PUSH
10798: LD_INT 6
10800: PUSH
10801: LD_INT 7
10803: PUSH
10804: LD_INT 8
10806: PUSH
10807: LD_INT 9
10809: PUSH
10810: LD_INT 10
10812: PUSH
10813: LD_INT 11
10815: PUSH
10816: LD_INT 12
10818: PUSH
10819: LD_INT 13
10821: PUSH
10822: LD_INT 14
10824: PUSH
10825: LD_INT 15
10827: PUSH
10828: LD_INT 16
10830: PUSH
10831: LD_INT 17
10833: PUSH
10834: LD_INT 18
10836: PUSH
10837: LD_INT 19
10839: PUSH
10840: LD_INT 20
10842: PUSH
10843: LD_INT 21
10845: PUSH
10846: LD_INT 22
10848: PUSH
10849: LD_INT 23
10851: PUSH
10852: LD_INT 24
10854: PUSH
10855: LD_INT 25
10857: PUSH
10858: LD_INT 26
10860: PUSH
10861: LD_INT 27
10863: PUSH
10864: LD_INT 28
10866: PUSH
10867: LD_INT 29
10869: PUSH
10870: LD_INT 30
10872: PUSH
10873: LD_INT 31
10875: PUSH
10876: LD_INT 32
10878: PUSH
10879: LD_INT 33
10881: PUSH
10882: LD_INT 34
10884: PUSH
10885: LD_INT 36
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 101
10927: PUSH
10928: LD_INT 102
10930: PUSH
10931: LD_INT 103
10933: PUSH
10934: LD_INT 104
10936: PUSH
10937: LD_INT 105
10939: PUSH
10940: LD_INT 106
10942: PUSH
10943: LD_INT 107
10945: PUSH
10946: LD_INT 108
10948: PUSH
10949: LD_INT 109
10951: PUSH
10952: LD_INT 110
10954: PUSH
10955: LD_INT 111
10957: PUSH
10958: LD_INT 112
10960: PUSH
10961: LD_INT 113
10963: PUSH
10964: LD_INT 114
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: ST_TO_ADDR
10987: GO 11362
10989: LD_INT 18
10991: DOUBLE
10992: EQUAL
10993: IFTRUE 10997
10995: GO 11133
10997: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10998: LD_ADDR_VAR 0 1
11002: PUSH
11003: LD_INT 2
11005: PUSH
11006: LD_INT 4
11008: PUSH
11009: LD_INT 5
11011: PUSH
11012: LD_INT 7
11014: PUSH
11015: LD_INT 11
11017: PUSH
11018: LD_INT 12
11020: PUSH
11021: LD_INT 15
11023: PUSH
11024: LD_INT 16
11026: PUSH
11027: LD_INT 20
11029: PUSH
11030: LD_INT 21
11032: PUSH
11033: LD_INT 22
11035: PUSH
11036: LD_INT 23
11038: PUSH
11039: LD_INT 25
11041: PUSH
11042: LD_INT 26
11044: PUSH
11045: LD_INT 30
11047: PUSH
11048: LD_INT 31
11050: PUSH
11051: LD_INT 32
11053: PUSH
11054: LD_INT 33
11056: PUSH
11057: LD_INT 34
11059: PUSH
11060: LD_INT 35
11062: PUSH
11063: LD_INT 36
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 101
11091: PUSH
11092: LD_INT 102
11094: PUSH
11095: LD_INT 103
11097: PUSH
11098: LD_INT 106
11100: PUSH
11101: LD_INT 108
11103: PUSH
11104: LD_INT 112
11106: PUSH
11107: LD_INT 113
11109: PUSH
11110: LD_INT 114
11112: PUSH
11113: LD_INT 115
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: ST_TO_ADDR
11131: GO 11362
11133: LD_INT 19
11135: DOUBLE
11136: EQUAL
11137: IFTRUE 11141
11139: GO 11361
11141: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_INT 1
11149: PUSH
11150: LD_INT 2
11152: PUSH
11153: LD_INT 3
11155: PUSH
11156: LD_INT 4
11158: PUSH
11159: LD_INT 5
11161: PUSH
11162: LD_INT 6
11164: PUSH
11165: LD_INT 7
11167: PUSH
11168: LD_INT 8
11170: PUSH
11171: LD_INT 9
11173: PUSH
11174: LD_INT 10
11176: PUSH
11177: LD_INT 11
11179: PUSH
11180: LD_INT 12
11182: PUSH
11183: LD_INT 13
11185: PUSH
11186: LD_INT 14
11188: PUSH
11189: LD_INT 15
11191: PUSH
11192: LD_INT 16
11194: PUSH
11195: LD_INT 17
11197: PUSH
11198: LD_INT 18
11200: PUSH
11201: LD_INT 19
11203: PUSH
11204: LD_INT 20
11206: PUSH
11207: LD_INT 21
11209: PUSH
11210: LD_INT 22
11212: PUSH
11213: LD_INT 23
11215: PUSH
11216: LD_INT 24
11218: PUSH
11219: LD_INT 25
11221: PUSH
11222: LD_INT 26
11224: PUSH
11225: LD_INT 27
11227: PUSH
11228: LD_INT 28
11230: PUSH
11231: LD_INT 29
11233: PUSH
11234: LD_INT 30
11236: PUSH
11237: LD_INT 31
11239: PUSH
11240: LD_INT 32
11242: PUSH
11243: LD_INT 33
11245: PUSH
11246: LD_INT 34
11248: PUSH
11249: LD_INT 35
11251: PUSH
11252: LD_INT 36
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 101
11295: PUSH
11296: LD_INT 102
11298: PUSH
11299: LD_INT 103
11301: PUSH
11302: LD_INT 104
11304: PUSH
11305: LD_INT 105
11307: PUSH
11308: LD_INT 106
11310: PUSH
11311: LD_INT 107
11313: PUSH
11314: LD_INT 108
11316: PUSH
11317: LD_INT 109
11319: PUSH
11320: LD_INT 110
11322: PUSH
11323: LD_INT 111
11325: PUSH
11326: LD_INT 112
11328: PUSH
11329: LD_INT 113
11331: PUSH
11332: LD_INT 114
11334: PUSH
11335: LD_INT 115
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: ST_TO_ADDR
11359: GO 11362
11361: POP
// end else
11362: GO 11581
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11364: LD_ADDR_VAR 0 1
11368: PUSH
11369: LD_INT 1
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 3
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: LD_INT 5
11383: PUSH
11384: LD_INT 6
11386: PUSH
11387: LD_INT 7
11389: PUSH
11390: LD_INT 8
11392: PUSH
11393: LD_INT 9
11395: PUSH
11396: LD_INT 10
11398: PUSH
11399: LD_INT 11
11401: PUSH
11402: LD_INT 12
11404: PUSH
11405: LD_INT 13
11407: PUSH
11408: LD_INT 14
11410: PUSH
11411: LD_INT 15
11413: PUSH
11414: LD_INT 16
11416: PUSH
11417: LD_INT 17
11419: PUSH
11420: LD_INT 18
11422: PUSH
11423: LD_INT 19
11425: PUSH
11426: LD_INT 20
11428: PUSH
11429: LD_INT 21
11431: PUSH
11432: LD_INT 22
11434: PUSH
11435: LD_INT 23
11437: PUSH
11438: LD_INT 24
11440: PUSH
11441: LD_INT 25
11443: PUSH
11444: LD_INT 26
11446: PUSH
11447: LD_INT 27
11449: PUSH
11450: LD_INT 28
11452: PUSH
11453: LD_INT 29
11455: PUSH
11456: LD_INT 30
11458: PUSH
11459: LD_INT 31
11461: PUSH
11462: LD_INT 32
11464: PUSH
11465: LD_INT 33
11467: PUSH
11468: LD_INT 34
11470: PUSH
11471: LD_INT 35
11473: PUSH
11474: LD_INT 36
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 101
11517: PUSH
11518: LD_INT 102
11520: PUSH
11521: LD_INT 103
11523: PUSH
11524: LD_INT 104
11526: PUSH
11527: LD_INT 105
11529: PUSH
11530: LD_INT 106
11532: PUSH
11533: LD_INT 107
11535: PUSH
11536: LD_INT 108
11538: PUSH
11539: LD_INT 109
11541: PUSH
11542: LD_INT 110
11544: PUSH
11545: LD_INT 111
11547: PUSH
11548: LD_INT 112
11550: PUSH
11551: LD_INT 113
11553: PUSH
11554: LD_INT 114
11556: PUSH
11557: LD_INT 115
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: ST_TO_ADDR
// if result then
11581: LD_VAR 0 1
11585: IFFALSE 11874
// begin normal :=  ;
11587: LD_ADDR_VAR 0 3
11591: PUSH
11592: LD_STRING 
11594: ST_TO_ADDR
// hardcore :=  ;
11595: LD_ADDR_VAR 0 4
11599: PUSH
11600: LD_STRING 
11602: ST_TO_ADDR
// for i = 1 to normalCounter do
11603: LD_ADDR_VAR 0 5
11607: PUSH
11608: DOUBLE
11609: LD_INT 1
11611: DEC
11612: ST_TO_ADDR
11613: LD_EXP 33
11617: PUSH
11618: FOR_TO
11619: IFFALSE 11720
// begin tmp := 0 ;
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_STRING 0
11628: ST_TO_ADDR
// if result [ 1 ] then
11629: LD_VAR 0 1
11633: PUSH
11634: LD_INT 1
11636: ARRAY
11637: IFFALSE 11702
// if result [ 1 ] [ 1 ] = i then
11639: LD_VAR 0 1
11643: PUSH
11644: LD_INT 1
11646: ARRAY
11647: PUSH
11648: LD_INT 1
11650: ARRAY
11651: PUSH
11652: LD_VAR 0 5
11656: EQUAL
11657: IFFALSE 11702
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11659: LD_ADDR_VAR 0 1
11663: PUSH
11664: LD_VAR 0 1
11668: PPUSH
11669: LD_INT 1
11671: PPUSH
11672: LD_VAR 0 1
11676: PUSH
11677: LD_INT 1
11679: ARRAY
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 3
11688: PPUSH
11689: CALL_OW 1
11693: ST_TO_ADDR
// tmp := 1 ;
11694: LD_ADDR_VAR 0 2
11698: PUSH
11699: LD_STRING 1
11701: ST_TO_ADDR
// end ; normal := normal & tmp ;
11702: LD_ADDR_VAR 0 3
11706: PUSH
11707: LD_VAR 0 3
11711: PUSH
11712: LD_VAR 0 2
11716: STR
11717: ST_TO_ADDR
// end ;
11718: GO 11618
11720: POP
11721: POP
// for i = 1 to hardcoreCounter do
11722: LD_ADDR_VAR 0 5
11726: PUSH
11727: DOUBLE
11728: LD_INT 1
11730: DEC
11731: ST_TO_ADDR
11732: LD_EXP 34
11736: PUSH
11737: FOR_TO
11738: IFFALSE 11843
// begin tmp := 0 ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_STRING 0
11747: ST_TO_ADDR
// if result [ 2 ] then
11748: LD_VAR 0 1
11752: PUSH
11753: LD_INT 2
11755: ARRAY
11756: IFFALSE 11825
// if result [ 2 ] [ 1 ] = 100 + i then
11758: LD_VAR 0 1
11762: PUSH
11763: LD_INT 2
11765: ARRAY
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PUSH
11771: LD_INT 100
11773: PUSH
11774: LD_VAR 0 5
11778: PLUS
11779: EQUAL
11780: IFFALSE 11825
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11782: LD_ADDR_VAR 0 1
11786: PUSH
11787: LD_VAR 0 1
11791: PPUSH
11792: LD_INT 2
11794: PPUSH
11795: LD_VAR 0 1
11799: PUSH
11800: LD_INT 2
11802: ARRAY
11803: PPUSH
11804: LD_INT 1
11806: PPUSH
11807: CALL_OW 3
11811: PPUSH
11812: CALL_OW 1
11816: ST_TO_ADDR
// tmp := 1 ;
11817: LD_ADDR_VAR 0 2
11821: PUSH
11822: LD_STRING 1
11824: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11825: LD_ADDR_VAR 0 4
11829: PUSH
11830: LD_VAR 0 4
11834: PUSH
11835: LD_VAR 0 2
11839: STR
11840: ST_TO_ADDR
// end ;
11841: GO 11737
11843: POP
11844: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11845: LD_STRING getStreamItemsFromMission("
11847: PUSH
11848: LD_VAR 0 3
11852: STR
11853: PUSH
11854: LD_STRING ","
11856: STR
11857: PUSH
11858: LD_VAR 0 4
11862: STR
11863: PUSH
11864: LD_STRING ")
11866: STR
11867: PPUSH
11868: CALL_OW 559
// end else
11872: GO 11881
// ToLua ( getStreamItemsFromMission("","") ) ;
11874: LD_STRING getStreamItemsFromMission("","")
11876: PPUSH
11877: CALL_OW 559
// end ;
11881: LD_VAR 0 1
11885: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11886: LD_EXP 32
11890: PUSH
11891: LD_EXP 37
11895: AND
11896: IFFALSE 12020
11898: GO 11900
11900: DISABLE
11901: LD_INT 0
11903: PPUSH
11904: PPUSH
// begin enable ;
11905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11906: LD_ADDR_VAR 0 2
11910: PUSH
11911: LD_INT 22
11913: PUSH
11914: LD_OWVAR 2
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 2
11925: PUSH
11926: LD_INT 34
11928: PUSH
11929: LD_INT 7
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 34
11938: PUSH
11939: LD_INT 45
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 34
11948: PUSH
11949: LD_INT 28
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 34
11958: PUSH
11959: LD_INT 47
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PPUSH
11977: CALL_OW 69
11981: ST_TO_ADDR
// if not tmp then
11982: LD_VAR 0 2
11986: NOT
11987: IFFALSE 11991
// exit ;
11989: GO 12020
// for i in tmp do
11991: LD_ADDR_VAR 0 1
11995: PUSH
11996: LD_VAR 0 2
12000: PUSH
12001: FOR_IN
12002: IFFALSE 12018
// begin SetLives ( i , 0 ) ;
12004: LD_VAR 0 1
12008: PPUSH
12009: LD_INT 0
12011: PPUSH
12012: CALL_OW 234
// end ;
12016: GO 12001
12018: POP
12019: POP
// end ;
12020: PPOPN 2
12022: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12023: LD_EXP 32
12027: PUSH
12028: LD_EXP 38
12032: AND
12033: IFFALSE 12117
12035: GO 12037
12037: DISABLE
12038: LD_INT 0
12040: PPUSH
12041: PPUSH
// begin enable ;
12042: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12043: LD_ADDR_VAR 0 2
12047: PUSH
12048: LD_INT 22
12050: PUSH
12051: LD_OWVAR 2
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 32
12062: PUSH
12063: LD_INT 3
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PPUSH
12074: CALL_OW 69
12078: ST_TO_ADDR
// if not tmp then
12079: LD_VAR 0 2
12083: NOT
12084: IFFALSE 12088
// exit ;
12086: GO 12117
// for i in tmp do
12088: LD_ADDR_VAR 0 1
12092: PUSH
12093: LD_VAR 0 2
12097: PUSH
12098: FOR_IN
12099: IFFALSE 12115
// begin SetLives ( i , 0 ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_INT 0
12108: PPUSH
12109: CALL_OW 234
// end ;
12113: GO 12098
12115: POP
12116: POP
// end ;
12117: PPOPN 2
12119: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12120: LD_EXP 32
12124: PUSH
12125: LD_EXP 35
12129: AND
12130: IFFALSE 12223
12132: GO 12134
12134: DISABLE
12135: LD_INT 0
12137: PPUSH
// begin enable ;
12138: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12139: LD_ADDR_VAR 0 1
12143: PUSH
12144: LD_INT 22
12146: PUSH
12147: LD_OWVAR 2
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 2
12158: PUSH
12159: LD_INT 25
12161: PUSH
12162: LD_INT 5
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: LD_INT 25
12171: PUSH
12172: LD_INT 9
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 25
12181: PUSH
12182: LD_INT 8
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PPUSH
12199: CALL_OW 69
12203: PUSH
12204: FOR_IN
12205: IFFALSE 12221
// begin SetClass ( i , 1 ) ;
12207: LD_VAR 0 1
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 336
// end ;
12219: GO 12204
12221: POP
12222: POP
// end ;
12223: PPOPN 1
12225: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12226: LD_EXP 32
12230: PUSH
12231: LD_EXP 36
12235: AND
12236: PUSH
12237: LD_OWVAR 65
12241: PUSH
12242: LD_INT 7
12244: LESS
12245: AND
12246: IFFALSE 12260
12248: GO 12250
12250: DISABLE
// begin enable ;
12251: ENABLE
// game_speed := 7 ;
12252: LD_ADDR_OWVAR 65
12256: PUSH
12257: LD_INT 7
12259: ST_TO_ADDR
// end ;
12260: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12261: LD_EXP 32
12265: PUSH
12266: LD_EXP 39
12270: AND
12271: IFFALSE 12473
12273: GO 12275
12275: DISABLE
12276: LD_INT 0
12278: PPUSH
12279: PPUSH
12280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12281: LD_ADDR_VAR 0 3
12285: PUSH
12286: LD_INT 81
12288: PUSH
12289: LD_OWVAR 2
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 21
12300: PUSH
12301: LD_INT 1
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PPUSH
12312: CALL_OW 69
12316: ST_TO_ADDR
// if not tmp then
12317: LD_VAR 0 3
12321: NOT
12322: IFFALSE 12326
// exit ;
12324: GO 12473
// if tmp > 5 then
12326: LD_VAR 0 3
12330: PUSH
12331: LD_INT 5
12333: GREATER
12334: IFFALSE 12346
// k := 5 else
12336: LD_ADDR_VAR 0 2
12340: PUSH
12341: LD_INT 5
12343: ST_TO_ADDR
12344: GO 12356
// k := tmp ;
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: LD_VAR 0 3
12355: ST_TO_ADDR
// for i := 1 to k do
12356: LD_ADDR_VAR 0 1
12360: PUSH
12361: DOUBLE
12362: LD_INT 1
12364: DEC
12365: ST_TO_ADDR
12366: LD_VAR 0 2
12370: PUSH
12371: FOR_TO
12372: IFFALSE 12471
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12374: LD_VAR 0 3
12378: PUSH
12379: LD_VAR 0 1
12383: ARRAY
12384: PPUSH
12385: LD_VAR 0 1
12389: PUSH
12390: LD_INT 4
12392: MOD
12393: PUSH
12394: LD_INT 1
12396: PLUS
12397: PPUSH
12398: CALL_OW 259
12402: PUSH
12403: LD_INT 10
12405: LESS
12406: IFFALSE 12469
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12408: LD_VAR 0 3
12412: PUSH
12413: LD_VAR 0 1
12417: ARRAY
12418: PPUSH
12419: LD_VAR 0 1
12423: PUSH
12424: LD_INT 4
12426: MOD
12427: PUSH
12428: LD_INT 1
12430: PLUS
12431: PPUSH
12432: LD_VAR 0 3
12436: PUSH
12437: LD_VAR 0 1
12441: ARRAY
12442: PPUSH
12443: LD_VAR 0 1
12447: PUSH
12448: LD_INT 4
12450: MOD
12451: PUSH
12452: LD_INT 1
12454: PLUS
12455: PPUSH
12456: CALL_OW 259
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: CALL_OW 237
12469: GO 12371
12471: POP
12472: POP
// end ;
12473: PPOPN 3
12475: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12476: LD_EXP 32
12480: PUSH
12481: LD_EXP 40
12485: AND
12486: IFFALSE 12506
12488: GO 12490
12490: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12491: LD_INT 4
12493: PPUSH
12494: LD_OWVAR 2
12498: PPUSH
12499: LD_INT 0
12501: PPUSH
12502: CALL_OW 324
12506: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12507: LD_EXP 32
12511: PUSH
12512: LD_EXP 69
12516: AND
12517: IFFALSE 12537
12519: GO 12521
12521: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12522: LD_INT 19
12524: PPUSH
12525: LD_OWVAR 2
12529: PPUSH
12530: LD_INT 0
12532: PPUSH
12533: CALL_OW 324
12537: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12538: LD_EXP 32
12542: PUSH
12543: LD_EXP 41
12547: AND
12548: IFFALSE 12650
12550: GO 12552
12552: DISABLE
12553: LD_INT 0
12555: PPUSH
12556: PPUSH
// begin enable ;
12557: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12558: LD_ADDR_VAR 0 2
12562: PUSH
12563: LD_INT 22
12565: PUSH
12566: LD_OWVAR 2
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 2
12577: PUSH
12578: LD_INT 34
12580: PUSH
12581: LD_INT 11
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 34
12590: PUSH
12591: LD_INT 30
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 69
12611: ST_TO_ADDR
// if not tmp then
12612: LD_VAR 0 2
12616: NOT
12617: IFFALSE 12621
// exit ;
12619: GO 12650
// for i in tmp do
12621: LD_ADDR_VAR 0 1
12625: PUSH
12626: LD_VAR 0 2
12630: PUSH
12631: FOR_IN
12632: IFFALSE 12648
// begin SetLives ( i , 0 ) ;
12634: LD_VAR 0 1
12638: PPUSH
12639: LD_INT 0
12641: PPUSH
12642: CALL_OW 234
// end ;
12646: GO 12631
12648: POP
12649: POP
// end ;
12650: PPOPN 2
12652: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12653: LD_EXP 32
12657: PUSH
12658: LD_EXP 42
12662: AND
12663: IFFALSE 12683
12665: GO 12667
12667: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12668: LD_INT 32
12670: PPUSH
12671: LD_OWVAR 2
12675: PPUSH
12676: LD_INT 0
12678: PPUSH
12679: CALL_OW 324
12683: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12684: LD_EXP 32
12688: PUSH
12689: LD_EXP 43
12693: AND
12694: IFFALSE 12875
12696: GO 12698
12698: DISABLE
12699: LD_INT 0
12701: PPUSH
12702: PPUSH
12703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_INT 22
12711: PUSH
12712: LD_OWVAR 2
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 33
12723: PUSH
12724: LD_INT 3
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PPUSH
12735: CALL_OW 69
12739: ST_TO_ADDR
// if not tmp then
12740: LD_VAR 0 2
12744: NOT
12745: IFFALSE 12749
// exit ;
12747: GO 12875
// side := 0 ;
12749: LD_ADDR_VAR 0 3
12753: PUSH
12754: LD_INT 0
12756: ST_TO_ADDR
// for i := 1 to 8 do
12757: LD_ADDR_VAR 0 1
12761: PUSH
12762: DOUBLE
12763: LD_INT 1
12765: DEC
12766: ST_TO_ADDR
12767: LD_INT 8
12769: PUSH
12770: FOR_TO
12771: IFFALSE 12819
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12773: LD_OWVAR 2
12777: PUSH
12778: LD_VAR 0 1
12782: NONEQUAL
12783: PUSH
12784: LD_OWVAR 2
12788: PPUSH
12789: LD_VAR 0 1
12793: PPUSH
12794: CALL_OW 81
12798: PUSH
12799: LD_INT 2
12801: EQUAL
12802: AND
12803: IFFALSE 12817
// begin side := i ;
12805: LD_ADDR_VAR 0 3
12809: PUSH
12810: LD_VAR 0 1
12814: ST_TO_ADDR
// break ;
12815: GO 12819
// end ;
12817: GO 12770
12819: POP
12820: POP
// if not side then
12821: LD_VAR 0 3
12825: NOT
12826: IFFALSE 12830
// exit ;
12828: GO 12875
// for i := 1 to tmp do
12830: LD_ADDR_VAR 0 1
12834: PUSH
12835: DOUBLE
12836: LD_INT 1
12838: DEC
12839: ST_TO_ADDR
12840: LD_VAR 0 2
12844: PUSH
12845: FOR_TO
12846: IFFALSE 12873
// if Prob ( 60 ) then
12848: LD_INT 60
12850: PPUSH
12851: CALL_OW 13
12855: IFFALSE 12871
// SetSide ( i , side ) ;
12857: LD_VAR 0 1
12861: PPUSH
12862: LD_VAR 0 3
12866: PPUSH
12867: CALL_OW 235
12871: GO 12845
12873: POP
12874: POP
// end ;
12875: PPOPN 3
12877: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12878: LD_EXP 32
12882: PUSH
12883: LD_EXP 45
12887: AND
12888: IFFALSE 13007
12890: GO 12892
12892: DISABLE
12893: LD_INT 0
12895: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12896: LD_ADDR_VAR 0 1
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_OWVAR 2
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 21
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 3
12925: PUSH
12926: LD_INT 23
12928: PUSH
12929: LD_INT 0
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: PPUSH
12945: CALL_OW 69
12949: PUSH
12950: FOR_IN
12951: IFFALSE 13005
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12953: LD_VAR 0 1
12957: PPUSH
12958: CALL_OW 257
12962: PUSH
12963: LD_INT 1
12965: PUSH
12966: LD_INT 2
12968: PUSH
12969: LD_INT 3
12971: PUSH
12972: LD_INT 4
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: IN
12981: IFFALSE 13003
// SetClass ( un , rand ( 1 , 4 ) ) ;
12983: LD_VAR 0 1
12987: PPUSH
12988: LD_INT 1
12990: PPUSH
12991: LD_INT 4
12993: PPUSH
12994: CALL_OW 12
12998: PPUSH
12999: CALL_OW 336
13003: GO 12950
13005: POP
13006: POP
// end ;
13007: PPOPN 1
13009: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13010: LD_EXP 32
13014: PUSH
13015: LD_EXP 44
13019: AND
13020: IFFALSE 13099
13022: GO 13024
13024: DISABLE
13025: LD_INT 0
13027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13028: LD_ADDR_VAR 0 1
13032: PUSH
13033: LD_INT 22
13035: PUSH
13036: LD_OWVAR 2
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 21
13047: PUSH
13048: LD_INT 3
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PPUSH
13059: CALL_OW 69
13063: ST_TO_ADDR
// if not tmp then
13064: LD_VAR 0 1
13068: NOT
13069: IFFALSE 13073
// exit ;
13071: GO 13099
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13073: LD_VAR 0 1
13077: PUSH
13078: LD_INT 1
13080: PPUSH
13081: LD_VAR 0 1
13085: PPUSH
13086: CALL_OW 12
13090: ARRAY
13091: PPUSH
13092: LD_INT 100
13094: PPUSH
13095: CALL_OW 234
// end ;
13099: PPOPN 1
13101: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13102: LD_EXP 32
13106: PUSH
13107: LD_EXP 46
13111: AND
13112: IFFALSE 13210
13114: GO 13116
13116: DISABLE
13117: LD_INT 0
13119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13120: LD_ADDR_VAR 0 1
13124: PUSH
13125: LD_INT 22
13127: PUSH
13128: LD_OWVAR 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 21
13139: PUSH
13140: LD_INT 1
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: ST_TO_ADDR
// if not tmp then
13156: LD_VAR 0 1
13160: NOT
13161: IFFALSE 13165
// exit ;
13163: GO 13210
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13165: LD_VAR 0 1
13169: PUSH
13170: LD_INT 1
13172: PPUSH
13173: LD_VAR 0 1
13177: PPUSH
13178: CALL_OW 12
13182: ARRAY
13183: PPUSH
13184: LD_INT 1
13186: PPUSH
13187: LD_INT 4
13189: PPUSH
13190: CALL_OW 12
13194: PPUSH
13195: LD_INT 3000
13197: PPUSH
13198: LD_INT 9000
13200: PPUSH
13201: CALL_OW 12
13205: PPUSH
13206: CALL_OW 492
// end ;
13210: PPOPN 1
13212: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13213: LD_EXP 32
13217: PUSH
13218: LD_EXP 47
13222: AND
13223: IFFALSE 13243
13225: GO 13227
13227: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13228: LD_INT 1
13230: PPUSH
13231: LD_OWVAR 2
13235: PPUSH
13236: LD_INT 0
13238: PPUSH
13239: CALL_OW 324
13243: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13244: LD_EXP 32
13248: PUSH
13249: LD_EXP 48
13253: AND
13254: IFFALSE 13337
13256: GO 13258
13258: DISABLE
13259: LD_INT 0
13261: PPUSH
13262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: LD_INT 22
13270: PUSH
13271: LD_OWVAR 2
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 21
13282: PUSH
13283: LD_INT 3
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: ST_TO_ADDR
// if not tmp then
13299: LD_VAR 0 2
13303: NOT
13304: IFFALSE 13308
// exit ;
13306: GO 13337
// for i in tmp do
13308: LD_ADDR_VAR 0 1
13312: PUSH
13313: LD_VAR 0 2
13317: PUSH
13318: FOR_IN
13319: IFFALSE 13335
// SetBLevel ( i , 10 ) ;
13321: LD_VAR 0 1
13325: PPUSH
13326: LD_INT 10
13328: PPUSH
13329: CALL_OW 241
13333: GO 13318
13335: POP
13336: POP
// end ;
13337: PPOPN 2
13339: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13340: LD_EXP 32
13344: PUSH
13345: LD_EXP 49
13349: AND
13350: IFFALSE 13461
13352: GO 13354
13354: DISABLE
13355: LD_INT 0
13357: PPUSH
13358: PPUSH
13359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13360: LD_ADDR_VAR 0 3
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_OWVAR 2
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 25
13379: PUSH
13380: LD_INT 1
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 69
13395: ST_TO_ADDR
// if not tmp then
13396: LD_VAR 0 3
13400: NOT
13401: IFFALSE 13405
// exit ;
13403: GO 13461
// un := tmp [ rand ( 1 , tmp ) ] ;
13405: LD_ADDR_VAR 0 2
13409: PUSH
13410: LD_VAR 0 3
13414: PUSH
13415: LD_INT 1
13417: PPUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: CALL_OW 12
13427: ARRAY
13428: ST_TO_ADDR
// if Crawls ( un ) then
13429: LD_VAR 0 2
13433: PPUSH
13434: CALL_OW 318
13438: IFFALSE 13449
// ComWalk ( un ) ;
13440: LD_VAR 0 2
13444: PPUSH
13445: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13449: LD_VAR 0 2
13453: PPUSH
13454: LD_INT 5
13456: PPUSH
13457: CALL_OW 336
// end ;
13461: PPOPN 3
13463: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13464: LD_EXP 32
13468: PUSH
13469: LD_EXP 50
13473: AND
13474: PUSH
13475: LD_OWVAR 67
13479: PUSH
13480: LD_INT 3
13482: LESS
13483: AND
13484: IFFALSE 13503
13486: GO 13488
13488: DISABLE
// Difficulty := Difficulty + 1 ;
13489: LD_ADDR_OWVAR 67
13493: PUSH
13494: LD_OWVAR 67
13498: PUSH
13499: LD_INT 1
13501: PLUS
13502: ST_TO_ADDR
13503: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13504: LD_EXP 32
13508: PUSH
13509: LD_EXP 51
13513: AND
13514: IFFALSE 13617
13516: GO 13518
13518: DISABLE
13519: LD_INT 0
13521: PPUSH
// begin for i := 1 to 5 do
13522: LD_ADDR_VAR 0 1
13526: PUSH
13527: DOUBLE
13528: LD_INT 1
13530: DEC
13531: ST_TO_ADDR
13532: LD_INT 5
13534: PUSH
13535: FOR_TO
13536: IFFALSE 13615
// begin uc_nation := nation_nature ;
13538: LD_ADDR_OWVAR 21
13542: PUSH
13543: LD_INT 0
13545: ST_TO_ADDR
// uc_side := 0 ;
13546: LD_ADDR_OWVAR 20
13550: PUSH
13551: LD_INT 0
13553: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13554: LD_ADDR_OWVAR 29
13558: PUSH
13559: LD_INT 12
13561: PUSH
13562: LD_INT 12
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: ST_TO_ADDR
// hc_agressivity := 20 ;
13569: LD_ADDR_OWVAR 35
13573: PUSH
13574: LD_INT 20
13576: ST_TO_ADDR
// hc_class := class_tiger ;
13577: LD_ADDR_OWVAR 28
13581: PUSH
13582: LD_INT 14
13584: ST_TO_ADDR
// hc_gallery :=  ;
13585: LD_ADDR_OWVAR 33
13589: PUSH
13590: LD_STRING 
13592: ST_TO_ADDR
// hc_name :=  ;
13593: LD_ADDR_OWVAR 26
13597: PUSH
13598: LD_STRING 
13600: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13601: CALL_OW 44
13605: PPUSH
13606: LD_INT 0
13608: PPUSH
13609: CALL_OW 51
// end ;
13613: GO 13535
13615: POP
13616: POP
// end ;
13617: PPOPN 1
13619: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13620: LD_EXP 32
13624: PUSH
13625: LD_EXP 52
13629: AND
13630: IFFALSE 13639
13632: GO 13634
13634: DISABLE
// StreamSibBomb ;
13635: CALL 13640 0 0
13639: END
// export function StreamSibBomb ; var i , x , y ; begin
13640: LD_INT 0
13642: PPUSH
13643: PPUSH
13644: PPUSH
13645: PPUSH
// result := false ;
13646: LD_ADDR_VAR 0 1
13650: PUSH
13651: LD_INT 0
13653: ST_TO_ADDR
// for i := 1 to 16 do
13654: LD_ADDR_VAR 0 2
13658: PUSH
13659: DOUBLE
13660: LD_INT 1
13662: DEC
13663: ST_TO_ADDR
13664: LD_INT 16
13666: PUSH
13667: FOR_TO
13668: IFFALSE 13867
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13670: LD_ADDR_VAR 0 3
13674: PUSH
13675: LD_INT 10
13677: PUSH
13678: LD_INT 20
13680: PUSH
13681: LD_INT 30
13683: PUSH
13684: LD_INT 40
13686: PUSH
13687: LD_INT 50
13689: PUSH
13690: LD_INT 60
13692: PUSH
13693: LD_INT 70
13695: PUSH
13696: LD_INT 80
13698: PUSH
13699: LD_INT 90
13701: PUSH
13702: LD_INT 100
13704: PUSH
13705: LD_INT 110
13707: PUSH
13708: LD_INT 120
13710: PUSH
13711: LD_INT 130
13713: PUSH
13714: LD_INT 140
13716: PUSH
13717: LD_INT 150
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: PUSH
13737: LD_INT 1
13739: PPUSH
13740: LD_INT 15
13742: PPUSH
13743: CALL_OW 12
13747: ARRAY
13748: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13749: LD_ADDR_VAR 0 4
13753: PUSH
13754: LD_INT 10
13756: PUSH
13757: LD_INT 20
13759: PUSH
13760: LD_INT 30
13762: PUSH
13763: LD_INT 40
13765: PUSH
13766: LD_INT 50
13768: PUSH
13769: LD_INT 60
13771: PUSH
13772: LD_INT 70
13774: PUSH
13775: LD_INT 80
13777: PUSH
13778: LD_INT 90
13780: PUSH
13781: LD_INT 100
13783: PUSH
13784: LD_INT 110
13786: PUSH
13787: LD_INT 120
13789: PUSH
13790: LD_INT 130
13792: PUSH
13793: LD_INT 140
13795: PUSH
13796: LD_INT 150
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 1
13818: PPUSH
13819: LD_INT 15
13821: PPUSH
13822: CALL_OW 12
13826: ARRAY
13827: ST_TO_ADDR
// if ValidHex ( x , y ) then
13828: LD_VAR 0 3
13832: PPUSH
13833: LD_VAR 0 4
13837: PPUSH
13838: CALL_OW 488
13842: IFFALSE 13865
// begin result := [ x , y ] ;
13844: LD_ADDR_VAR 0 1
13848: PUSH
13849: LD_VAR 0 3
13853: PUSH
13854: LD_VAR 0 4
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: ST_TO_ADDR
// break ;
13863: GO 13867
// end ; end ;
13865: GO 13667
13867: POP
13868: POP
// if result then
13869: LD_VAR 0 1
13873: IFFALSE 13933
// begin ToLua ( playSibBomb() ) ;
13875: LD_STRING playSibBomb()
13877: PPUSH
13878: CALL_OW 559
// wait ( 0 0$14 ) ;
13882: LD_INT 490
13884: PPUSH
13885: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13889: LD_VAR 0 1
13893: PUSH
13894: LD_INT 1
13896: ARRAY
13897: PPUSH
13898: LD_VAR 0 1
13902: PUSH
13903: LD_INT 2
13905: ARRAY
13906: PPUSH
13907: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13911: LD_VAR 0 1
13915: PUSH
13916: LD_INT 1
13918: ARRAY
13919: PPUSH
13920: LD_VAR 0 1
13924: PUSH
13925: LD_INT 2
13927: ARRAY
13928: PPUSH
13929: CALL_OW 429
// end ; end ;
13933: LD_VAR 0 1
13937: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13938: LD_EXP 32
13942: PUSH
13943: LD_EXP 54
13947: AND
13948: IFFALSE 13960
13950: GO 13952
13952: DISABLE
// YouLost (  ) ;
13953: LD_STRING 
13955: PPUSH
13956: CALL_OW 104
13960: END
// every 0 0$1 trigger StreamModeActive and sFog do
13961: LD_EXP 32
13965: PUSH
13966: LD_EXP 53
13970: AND
13971: IFFALSE 13985
13973: GO 13975
13975: DISABLE
// FogOff ( your_side ) ;
13976: LD_OWVAR 2
13980: PPUSH
13981: CALL_OW 344
13985: END
// every 0 0$1 trigger StreamModeActive and sSun do
13986: LD_EXP 32
13990: PUSH
13991: LD_EXP 55
13995: AND
13996: IFFALSE 14024
13998: GO 14000
14000: DISABLE
// begin solar_recharge_percent := 0 ;
14001: LD_ADDR_OWVAR 79
14005: PUSH
14006: LD_INT 0
14008: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14009: LD_INT 10500
14011: PPUSH
14012: CALL_OW 67
// solar_recharge_percent := 100 ;
14016: LD_ADDR_OWVAR 79
14020: PUSH
14021: LD_INT 100
14023: ST_TO_ADDR
// end ;
14024: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14025: LD_EXP 32
14029: PUSH
14030: LD_EXP 56
14034: AND
14035: IFFALSE 14274
14037: GO 14039
14039: DISABLE
14040: LD_INT 0
14042: PPUSH
14043: PPUSH
14044: PPUSH
// begin tmp := [ ] ;
14045: LD_ADDR_VAR 0 3
14049: PUSH
14050: EMPTY
14051: ST_TO_ADDR
// for i := 1 to 6 do
14052: LD_ADDR_VAR 0 1
14056: PUSH
14057: DOUBLE
14058: LD_INT 1
14060: DEC
14061: ST_TO_ADDR
14062: LD_INT 6
14064: PUSH
14065: FOR_TO
14066: IFFALSE 14171
// begin uc_nation := nation_nature ;
14068: LD_ADDR_OWVAR 21
14072: PUSH
14073: LD_INT 0
14075: ST_TO_ADDR
// uc_side := 0 ;
14076: LD_ADDR_OWVAR 20
14080: PUSH
14081: LD_INT 0
14083: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14084: LD_ADDR_OWVAR 29
14088: PUSH
14089: LD_INT 12
14091: PUSH
14092: LD_INT 12
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: ST_TO_ADDR
// hc_agressivity := 20 ;
14099: LD_ADDR_OWVAR 35
14103: PUSH
14104: LD_INT 20
14106: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14107: LD_ADDR_OWVAR 28
14111: PUSH
14112: LD_INT 17
14114: ST_TO_ADDR
// hc_gallery :=  ;
14115: LD_ADDR_OWVAR 33
14119: PUSH
14120: LD_STRING 
14122: ST_TO_ADDR
// hc_name :=  ;
14123: LD_ADDR_OWVAR 26
14127: PUSH
14128: LD_STRING 
14130: ST_TO_ADDR
// un := CreateHuman ;
14131: LD_ADDR_VAR 0 2
14135: PUSH
14136: CALL_OW 44
14140: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14141: LD_VAR 0 2
14145: PPUSH
14146: LD_INT 1
14148: PPUSH
14149: CALL_OW 51
// tmp := tmp ^ un ;
14153: LD_ADDR_VAR 0 3
14157: PUSH
14158: LD_VAR 0 3
14162: PUSH
14163: LD_VAR 0 2
14167: ADD
14168: ST_TO_ADDR
// end ;
14169: GO 14065
14171: POP
14172: POP
// repeat wait ( 0 0$1 ) ;
14173: LD_INT 35
14175: PPUSH
14176: CALL_OW 67
// for un in tmp do
14180: LD_ADDR_VAR 0 2
14184: PUSH
14185: LD_VAR 0 3
14189: PUSH
14190: FOR_IN
14191: IFFALSE 14265
// begin if IsDead ( un ) then
14193: LD_VAR 0 2
14197: PPUSH
14198: CALL_OW 301
14202: IFFALSE 14222
// begin tmp := tmp diff un ;
14204: LD_ADDR_VAR 0 3
14208: PUSH
14209: LD_VAR 0 3
14213: PUSH
14214: LD_VAR 0 2
14218: DIFF
14219: ST_TO_ADDR
// continue ;
14220: GO 14190
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14222: LD_VAR 0 2
14226: PPUSH
14227: LD_INT 3
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_INT 0
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PPUSH
14244: CALL_OW 69
14248: PPUSH
14249: LD_VAR 0 2
14253: PPUSH
14254: CALL_OW 74
14258: PPUSH
14259: CALL_OW 115
// end ;
14263: GO 14190
14265: POP
14266: POP
// until not tmp ;
14267: LD_VAR 0 3
14271: NOT
14272: IFFALSE 14173
// end ;
14274: PPOPN 3
14276: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14277: LD_EXP 32
14281: PUSH
14282: LD_EXP 57
14286: AND
14287: IFFALSE 14341
14289: GO 14291
14291: DISABLE
// begin ToLua ( displayTroll(); ) ;
14292: LD_STRING displayTroll();
14294: PPUSH
14295: CALL_OW 559
// wait ( 3 3$00 ) ;
14299: LD_INT 6300
14301: PPUSH
14302: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14306: LD_STRING hideTroll();
14308: PPUSH
14309: CALL_OW 559
// wait ( 1 1$00 ) ;
14313: LD_INT 2100
14315: PPUSH
14316: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14320: LD_STRING displayTroll();
14322: PPUSH
14323: CALL_OW 559
// wait ( 1 1$00 ) ;
14327: LD_INT 2100
14329: PPUSH
14330: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14334: LD_STRING hideTroll();
14336: PPUSH
14337: CALL_OW 559
// end ;
14341: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14342: LD_EXP 32
14346: PUSH
14347: LD_EXP 58
14351: AND
14352: IFFALSE 14415
14354: GO 14356
14356: DISABLE
14357: LD_INT 0
14359: PPUSH
// begin p := 0 ;
14360: LD_ADDR_VAR 0 1
14364: PUSH
14365: LD_INT 0
14367: ST_TO_ADDR
// repeat game_speed := 1 ;
14368: LD_ADDR_OWVAR 65
14372: PUSH
14373: LD_INT 1
14375: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14376: LD_INT 35
14378: PPUSH
14379: CALL_OW 67
// p := p + 1 ;
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: LD_VAR 0 1
14392: PUSH
14393: LD_INT 1
14395: PLUS
14396: ST_TO_ADDR
// until p >= 60 ;
14397: LD_VAR 0 1
14401: PUSH
14402: LD_INT 60
14404: GREATEREQUAL
14405: IFFALSE 14368
// game_speed := 4 ;
14407: LD_ADDR_OWVAR 65
14411: PUSH
14412: LD_INT 4
14414: ST_TO_ADDR
// end ;
14415: PPOPN 1
14417: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14418: LD_EXP 32
14422: PUSH
14423: LD_EXP 59
14427: AND
14428: IFFALSE 14574
14430: GO 14432
14432: DISABLE
14433: LD_INT 0
14435: PPUSH
14436: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14437: LD_ADDR_VAR 0 1
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_OWVAR 2
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: LD_INT 30
14459: PUSH
14460: LD_INT 0
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 30
14469: PUSH
14470: LD_INT 1
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: LIST
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PPUSH
14486: CALL_OW 69
14490: ST_TO_ADDR
// if not depot then
14491: LD_VAR 0 1
14495: NOT
14496: IFFALSE 14500
// exit ;
14498: GO 14574
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14500: LD_ADDR_VAR 0 2
14504: PUSH
14505: LD_VAR 0 1
14509: PUSH
14510: LD_INT 1
14512: PPUSH
14513: LD_VAR 0 1
14517: PPUSH
14518: CALL_OW 12
14522: ARRAY
14523: PPUSH
14524: CALL_OW 274
14528: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14529: LD_VAR 0 2
14533: PPUSH
14534: LD_INT 1
14536: PPUSH
14537: LD_INT 0
14539: PPUSH
14540: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14544: LD_VAR 0 2
14548: PPUSH
14549: LD_INT 2
14551: PPUSH
14552: LD_INT 0
14554: PPUSH
14555: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14559: LD_VAR 0 2
14563: PPUSH
14564: LD_INT 3
14566: PPUSH
14567: LD_INT 0
14569: PPUSH
14570: CALL_OW 277
// end ;
14574: PPOPN 2
14576: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14577: LD_EXP 32
14581: PUSH
14582: LD_EXP 60
14586: AND
14587: IFFALSE 14684
14589: GO 14591
14591: DISABLE
14592: LD_INT 0
14594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14595: LD_ADDR_VAR 0 1
14599: PUSH
14600: LD_INT 22
14602: PUSH
14603: LD_OWVAR 2
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 21
14614: PUSH
14615: LD_INT 1
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 3
14624: PUSH
14625: LD_INT 23
14627: PUSH
14628: LD_INT 0
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: ST_TO_ADDR
// if not tmp then
14649: LD_VAR 0 1
14653: NOT
14654: IFFALSE 14658
// exit ;
14656: GO 14684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14658: LD_VAR 0 1
14662: PUSH
14663: LD_INT 1
14665: PPUSH
14666: LD_VAR 0 1
14670: PPUSH
14671: CALL_OW 12
14675: ARRAY
14676: PPUSH
14677: LD_INT 200
14679: PPUSH
14680: CALL_OW 234
// end ;
14684: PPOPN 1
14686: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14687: LD_EXP 32
14691: PUSH
14692: LD_EXP 61
14696: AND
14697: IFFALSE 14776
14699: GO 14701
14701: DISABLE
14702: LD_INT 0
14704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14705: LD_ADDR_VAR 0 1
14709: PUSH
14710: LD_INT 22
14712: PUSH
14713: LD_OWVAR 2
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 21
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: ST_TO_ADDR
// if not tmp then
14741: LD_VAR 0 1
14745: NOT
14746: IFFALSE 14750
// exit ;
14748: GO 14776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14750: LD_VAR 0 1
14754: PUSH
14755: LD_INT 1
14757: PPUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 12
14767: ARRAY
14768: PPUSH
14769: LD_INT 60
14771: PPUSH
14772: CALL_OW 234
// end ;
14776: PPOPN 1
14778: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14779: LD_EXP 32
14783: PUSH
14784: LD_EXP 62
14788: AND
14789: IFFALSE 14888
14791: GO 14793
14793: DISABLE
14794: LD_INT 0
14796: PPUSH
14797: PPUSH
// begin enable ;
14798: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14799: LD_ADDR_VAR 0 1
14803: PUSH
14804: LD_INT 22
14806: PUSH
14807: LD_OWVAR 2
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 61
14818: PUSH
14819: EMPTY
14820: LIST
14821: PUSH
14822: LD_INT 33
14824: PUSH
14825: LD_INT 2
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: PPUSH
14837: CALL_OW 69
14841: ST_TO_ADDR
// if not tmp then
14842: LD_VAR 0 1
14846: NOT
14847: IFFALSE 14851
// exit ;
14849: GO 14888
// for i in tmp do
14851: LD_ADDR_VAR 0 2
14855: PUSH
14856: LD_VAR 0 1
14860: PUSH
14861: FOR_IN
14862: IFFALSE 14886
// if IsControledBy ( i ) then
14864: LD_VAR 0 2
14868: PPUSH
14869: CALL_OW 312
14873: IFFALSE 14884
// ComUnlink ( i ) ;
14875: LD_VAR 0 2
14879: PPUSH
14880: CALL_OW 136
14884: GO 14861
14886: POP
14887: POP
// end ;
14888: PPOPN 2
14890: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14891: LD_EXP 32
14895: PUSH
14896: LD_EXP 63
14900: AND
14901: IFFALSE 15041
14903: GO 14905
14905: DISABLE
14906: LD_INT 0
14908: PPUSH
14909: PPUSH
// begin ToLua ( displayPowell(); ) ;
14910: LD_STRING displayPowell();
14912: PPUSH
14913: CALL_OW 559
// uc_side := 0 ;
14917: LD_ADDR_OWVAR 20
14921: PUSH
14922: LD_INT 0
14924: ST_TO_ADDR
// uc_nation := 2 ;
14925: LD_ADDR_OWVAR 21
14929: PUSH
14930: LD_INT 2
14932: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14933: LD_ADDR_OWVAR 37
14937: PUSH
14938: LD_INT 14
14940: ST_TO_ADDR
// vc_engine := engine_siberite ;
14941: LD_ADDR_OWVAR 39
14945: PUSH
14946: LD_INT 3
14948: ST_TO_ADDR
// vc_control := control_apeman ;
14949: LD_ADDR_OWVAR 38
14953: PUSH
14954: LD_INT 5
14956: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14957: LD_ADDR_OWVAR 40
14961: PUSH
14962: LD_INT 29
14964: ST_TO_ADDR
// un := CreateVehicle ;
14965: LD_ADDR_VAR 0 2
14969: PUSH
14970: CALL_OW 45
14974: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14975: LD_VAR 0 2
14979: PPUSH
14980: LD_INT 1
14982: PPUSH
14983: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14987: LD_INT 35
14989: PPUSH
14990: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14994: LD_VAR 0 2
14998: PPUSH
14999: LD_INT 22
15001: PUSH
15002: LD_OWVAR 2
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PPUSH
15011: CALL_OW 69
15015: PPUSH
15016: LD_VAR 0 2
15020: PPUSH
15021: CALL_OW 74
15025: PPUSH
15026: CALL_OW 115
// until IsDead ( un ) ;
15030: LD_VAR 0 2
15034: PPUSH
15035: CALL_OW 301
15039: IFFALSE 14987
// end ;
15041: PPOPN 2
15043: END
// every 0 0$1 trigger StreamModeActive and sStu do
15044: LD_EXP 32
15048: PUSH
15049: LD_EXP 71
15053: AND
15054: IFFALSE 15070
15056: GO 15058
15058: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15059: LD_STRING displayStucuk();
15061: PPUSH
15062: CALL_OW 559
// ResetFog ;
15066: CALL_OW 335
// end ;
15070: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15071: LD_EXP 32
15075: PUSH
15076: LD_EXP 64
15080: AND
15081: IFFALSE 15222
15083: GO 15085
15085: DISABLE
15086: LD_INT 0
15088: PPUSH
15089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15090: LD_ADDR_VAR 0 2
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_OWVAR 2
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 21
15109: PUSH
15110: LD_INT 1
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PPUSH
15121: CALL_OW 69
15125: ST_TO_ADDR
// if not tmp then
15126: LD_VAR 0 2
15130: NOT
15131: IFFALSE 15135
// exit ;
15133: GO 15222
// un := tmp [ rand ( 1 , tmp ) ] ;
15135: LD_ADDR_VAR 0 1
15139: PUSH
15140: LD_VAR 0 2
15144: PUSH
15145: LD_INT 1
15147: PPUSH
15148: LD_VAR 0 2
15152: PPUSH
15153: CALL_OW 12
15157: ARRAY
15158: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15159: LD_VAR 0 1
15163: PPUSH
15164: LD_INT 0
15166: PPUSH
15167: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15171: LD_VAR 0 1
15175: PPUSH
15176: LD_OWVAR 3
15180: PUSH
15181: LD_VAR 0 1
15185: DIFF
15186: PPUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 74
15196: PPUSH
15197: CALL_OW 115
// wait ( 0 0$20 ) ;
15201: LD_INT 700
15203: PPUSH
15204: CALL_OW 67
// SetSide ( un , your_side ) ;
15208: LD_VAR 0 1
15212: PPUSH
15213: LD_OWVAR 2
15217: PPUSH
15218: CALL_OW 235
// end ;
15222: PPOPN 2
15224: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15225: LD_EXP 32
15229: PUSH
15230: LD_EXP 65
15234: AND
15235: IFFALSE 15341
15237: GO 15239
15239: DISABLE
15240: LD_INT 0
15242: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15243: LD_ADDR_VAR 0 1
15247: PUSH
15248: LD_INT 22
15250: PUSH
15251: LD_OWVAR 2
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 2
15262: PUSH
15263: LD_INT 30
15265: PUSH
15266: LD_INT 0
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 30
15275: PUSH
15276: LD_INT 1
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PPUSH
15292: CALL_OW 69
15296: ST_TO_ADDR
// if not depot then
15297: LD_VAR 0 1
15301: NOT
15302: IFFALSE 15306
// exit ;
15304: GO 15341
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15306: LD_VAR 0 1
15310: PUSH
15311: LD_INT 1
15313: ARRAY
15314: PPUSH
15315: CALL_OW 250
15319: PPUSH
15320: LD_VAR 0 1
15324: PUSH
15325: LD_INT 1
15327: ARRAY
15328: PPUSH
15329: CALL_OW 251
15333: PPUSH
15334: LD_INT 70
15336: PPUSH
15337: CALL_OW 495
// end ;
15341: PPOPN 1
15343: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15344: LD_EXP 32
15348: PUSH
15349: LD_EXP 66
15353: AND
15354: IFFALSE 15565
15356: GO 15358
15358: DISABLE
15359: LD_INT 0
15361: PPUSH
15362: PPUSH
15363: PPUSH
15364: PPUSH
15365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15366: LD_ADDR_VAR 0 5
15370: PUSH
15371: LD_INT 22
15373: PUSH
15374: LD_OWVAR 2
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: LD_INT 21
15385: PUSH
15386: LD_INT 1
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PPUSH
15397: CALL_OW 69
15401: ST_TO_ADDR
// if not tmp then
15402: LD_VAR 0 5
15406: NOT
15407: IFFALSE 15411
// exit ;
15409: GO 15565
// for i in tmp do
15411: LD_ADDR_VAR 0 1
15415: PUSH
15416: LD_VAR 0 5
15420: PUSH
15421: FOR_IN
15422: IFFALSE 15563
// begin d := rand ( 0 , 5 ) ;
15424: LD_ADDR_VAR 0 4
15428: PUSH
15429: LD_INT 0
15431: PPUSH
15432: LD_INT 5
15434: PPUSH
15435: CALL_OW 12
15439: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15440: LD_ADDR_VAR 0 2
15444: PUSH
15445: LD_VAR 0 1
15449: PPUSH
15450: CALL_OW 250
15454: PPUSH
15455: LD_VAR 0 4
15459: PPUSH
15460: LD_INT 3
15462: PPUSH
15463: LD_INT 12
15465: PPUSH
15466: CALL_OW 12
15470: PPUSH
15471: CALL_OW 272
15475: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15476: LD_ADDR_VAR 0 3
15480: PUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 251
15490: PPUSH
15491: LD_VAR 0 4
15495: PPUSH
15496: LD_INT 3
15498: PPUSH
15499: LD_INT 12
15501: PPUSH
15502: CALL_OW 12
15506: PPUSH
15507: CALL_OW 273
15511: ST_TO_ADDR
// if ValidHex ( x , y ) then
15512: LD_VAR 0 2
15516: PPUSH
15517: LD_VAR 0 3
15521: PPUSH
15522: CALL_OW 488
15526: IFFALSE 15561
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15528: LD_VAR 0 1
15532: PPUSH
15533: LD_VAR 0 2
15537: PPUSH
15538: LD_VAR 0 3
15542: PPUSH
15543: LD_INT 3
15545: PPUSH
15546: LD_INT 6
15548: PPUSH
15549: CALL_OW 12
15553: PPUSH
15554: LD_INT 1
15556: PPUSH
15557: CALL_OW 483
// end ;
15561: GO 15421
15563: POP
15564: POP
// end ;
15565: PPOPN 5
15567: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15568: LD_EXP 32
15572: PUSH
15573: LD_EXP 67
15577: AND
15578: IFFALSE 15672
15580: GO 15582
15582: DISABLE
15583: LD_INT 0
15585: PPUSH
15586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15587: LD_ADDR_VAR 0 2
15591: PUSH
15592: LD_INT 22
15594: PUSH
15595: LD_OWVAR 2
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 32
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 21
15616: PUSH
15617: LD_INT 2
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: PPUSH
15629: CALL_OW 69
15633: ST_TO_ADDR
// if not tmp then
15634: LD_VAR 0 2
15638: NOT
15639: IFFALSE 15643
// exit ;
15641: GO 15672
// for i in tmp do
15643: LD_ADDR_VAR 0 1
15647: PUSH
15648: LD_VAR 0 2
15652: PUSH
15653: FOR_IN
15654: IFFALSE 15670
// SetFuel ( i , 0 ) ;
15656: LD_VAR 0 1
15660: PPUSH
15661: LD_INT 0
15663: PPUSH
15664: CALL_OW 240
15668: GO 15653
15670: POP
15671: POP
// end ;
15672: PPOPN 2
15674: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15675: LD_EXP 32
15679: PUSH
15680: LD_EXP 68
15684: AND
15685: IFFALSE 15751
15687: GO 15689
15689: DISABLE
15690: LD_INT 0
15692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15693: LD_ADDR_VAR 0 1
15697: PUSH
15698: LD_INT 22
15700: PUSH
15701: LD_OWVAR 2
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 30
15712: PUSH
15713: LD_INT 29
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PPUSH
15724: CALL_OW 69
15728: ST_TO_ADDR
// if not tmp then
15729: LD_VAR 0 1
15733: NOT
15734: IFFALSE 15738
// exit ;
15736: GO 15751
// DestroyUnit ( tmp [ 1 ] ) ;
15738: LD_VAR 0 1
15742: PUSH
15743: LD_INT 1
15745: ARRAY
15746: PPUSH
15747: CALL_OW 65
// end ;
15751: PPOPN 1
15753: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15754: LD_EXP 32
15758: PUSH
15759: LD_EXP 70
15763: AND
15764: IFFALSE 15893
15766: GO 15768
15768: DISABLE
15769: LD_INT 0
15771: PPUSH
// begin uc_side := 0 ;
15772: LD_ADDR_OWVAR 20
15776: PUSH
15777: LD_INT 0
15779: ST_TO_ADDR
// uc_nation := nation_arabian ;
15780: LD_ADDR_OWVAR 21
15784: PUSH
15785: LD_INT 2
15787: ST_TO_ADDR
// hc_gallery :=  ;
15788: LD_ADDR_OWVAR 33
15792: PUSH
15793: LD_STRING 
15795: ST_TO_ADDR
// hc_name :=  ;
15796: LD_ADDR_OWVAR 26
15800: PUSH
15801: LD_STRING 
15803: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15804: LD_INT 1
15806: PPUSH
15807: LD_INT 11
15809: PPUSH
15810: LD_INT 10
15812: PPUSH
15813: CALL_OW 380
// un := CreateHuman ;
15817: LD_ADDR_VAR 0 1
15821: PUSH
15822: CALL_OW 44
15826: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15827: LD_VAR 0 1
15831: PPUSH
15832: LD_INT 1
15834: PPUSH
15835: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15839: LD_INT 35
15841: PPUSH
15842: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15846: LD_VAR 0 1
15850: PPUSH
15851: LD_INT 22
15853: PUSH
15854: LD_OWVAR 2
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PPUSH
15863: CALL_OW 69
15867: PPUSH
15868: LD_VAR 0 1
15872: PPUSH
15873: CALL_OW 74
15877: PPUSH
15878: CALL_OW 115
// until IsDead ( un ) ;
15882: LD_VAR 0 1
15886: PPUSH
15887: CALL_OW 301
15891: IFFALSE 15839
// end ;
15893: PPOPN 1
15895: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15896: LD_EXP 32
15900: PUSH
15901: LD_EXP 72
15905: AND
15906: IFFALSE 15918
15908: GO 15910
15910: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15911: LD_STRING earthquake(getX(game), 0, 32)
15913: PPUSH
15914: CALL_OW 559
15918: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15919: LD_EXP 32
15923: PUSH
15924: LD_EXP 73
15928: AND
15929: IFFALSE 16020
15931: GO 15933
15933: DISABLE
15934: LD_INT 0
15936: PPUSH
// begin enable ;
15937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15938: LD_ADDR_VAR 0 1
15942: PUSH
15943: LD_INT 22
15945: PUSH
15946: LD_OWVAR 2
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 21
15957: PUSH
15958: LD_INT 2
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 33
15967: PUSH
15968: LD_INT 3
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 69
15984: ST_TO_ADDR
// if not tmp then
15985: LD_VAR 0 1
15989: NOT
15990: IFFALSE 15994
// exit ;
15992: GO 16020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15994: LD_VAR 0 1
15998: PUSH
15999: LD_INT 1
16001: PPUSH
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 12
16011: ARRAY
16012: PPUSH
16013: LD_INT 1
16015: PPUSH
16016: CALL_OW 234
// end ;
16020: PPOPN 1
16022: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16023: LD_EXP 32
16027: PUSH
16028: LD_EXP 74
16032: AND
16033: IFFALSE 16174
16035: GO 16037
16037: DISABLE
16038: LD_INT 0
16040: PPUSH
16041: PPUSH
16042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16043: LD_ADDR_VAR 0 3
16047: PUSH
16048: LD_INT 22
16050: PUSH
16051: LD_OWVAR 2
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 25
16062: PUSH
16063: LD_INT 1
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PPUSH
16074: CALL_OW 69
16078: ST_TO_ADDR
// if not tmp then
16079: LD_VAR 0 3
16083: NOT
16084: IFFALSE 16088
// exit ;
16086: GO 16174
// un := tmp [ rand ( 1 , tmp ) ] ;
16088: LD_ADDR_VAR 0 2
16092: PUSH
16093: LD_VAR 0 3
16097: PUSH
16098: LD_INT 1
16100: PPUSH
16101: LD_VAR 0 3
16105: PPUSH
16106: CALL_OW 12
16110: ARRAY
16111: ST_TO_ADDR
// if Crawls ( un ) then
16112: LD_VAR 0 2
16116: PPUSH
16117: CALL_OW 318
16121: IFFALSE 16132
// ComWalk ( un ) ;
16123: LD_VAR 0 2
16127: PPUSH
16128: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16132: LD_VAR 0 2
16136: PPUSH
16137: LD_INT 9
16139: PPUSH
16140: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16144: LD_INT 28
16146: PPUSH
16147: LD_OWVAR 2
16151: PPUSH
16152: LD_INT 2
16154: PPUSH
16155: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16159: LD_INT 29
16161: PPUSH
16162: LD_OWVAR 2
16166: PPUSH
16167: LD_INT 2
16169: PPUSH
16170: CALL_OW 322
// end ;
16174: PPOPN 3
16176: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16177: LD_EXP 32
16181: PUSH
16182: LD_EXP 75
16186: AND
16187: IFFALSE 16298
16189: GO 16191
16191: DISABLE
16192: LD_INT 0
16194: PPUSH
16195: PPUSH
16196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16197: LD_ADDR_VAR 0 3
16201: PUSH
16202: LD_INT 22
16204: PUSH
16205: LD_OWVAR 2
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 25
16216: PUSH
16217: LD_INT 1
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 69
16232: ST_TO_ADDR
// if not tmp then
16233: LD_VAR 0 3
16237: NOT
16238: IFFALSE 16242
// exit ;
16240: GO 16298
// un := tmp [ rand ( 1 , tmp ) ] ;
16242: LD_ADDR_VAR 0 2
16246: PUSH
16247: LD_VAR 0 3
16251: PUSH
16252: LD_INT 1
16254: PPUSH
16255: LD_VAR 0 3
16259: PPUSH
16260: CALL_OW 12
16264: ARRAY
16265: ST_TO_ADDR
// if Crawls ( un ) then
16266: LD_VAR 0 2
16270: PPUSH
16271: CALL_OW 318
16275: IFFALSE 16286
// ComWalk ( un ) ;
16277: LD_VAR 0 2
16281: PPUSH
16282: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16286: LD_VAR 0 2
16290: PPUSH
16291: LD_INT 8
16293: PPUSH
16294: CALL_OW 336
// end ;
16298: PPOPN 3
16300: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16301: LD_EXP 32
16305: PUSH
16306: LD_EXP 76
16310: AND
16311: IFFALSE 16455
16313: GO 16315
16315: DISABLE
16316: LD_INT 0
16318: PPUSH
16319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16320: LD_ADDR_VAR 0 2
16324: PUSH
16325: LD_INT 22
16327: PUSH
16328: LD_OWVAR 2
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 21
16339: PUSH
16340: LD_INT 2
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 2
16349: PUSH
16350: LD_INT 34
16352: PUSH
16353: LD_INT 12
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 34
16362: PUSH
16363: LD_INT 51
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 34
16372: PUSH
16373: LD_INT 32
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: PPUSH
16391: CALL_OW 69
16395: ST_TO_ADDR
// if not tmp then
16396: LD_VAR 0 2
16400: NOT
16401: IFFALSE 16405
// exit ;
16403: GO 16455
// for i in tmp do
16405: LD_ADDR_VAR 0 1
16409: PUSH
16410: LD_VAR 0 2
16414: PUSH
16415: FOR_IN
16416: IFFALSE 16453
// if GetCargo ( i , mat_artifact ) = 0 then
16418: LD_VAR 0 1
16422: PPUSH
16423: LD_INT 4
16425: PPUSH
16426: CALL_OW 289
16430: PUSH
16431: LD_INT 0
16433: EQUAL
16434: IFFALSE 16451
// SetCargo ( i , mat_siberit , 100 ) ;
16436: LD_VAR 0 1
16440: PPUSH
16441: LD_INT 3
16443: PPUSH
16444: LD_INT 100
16446: PPUSH
16447: CALL_OW 290
16451: GO 16415
16453: POP
16454: POP
// end ;
16455: PPOPN 2
16457: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16458: LD_EXP 32
16462: PUSH
16463: LD_EXP 77
16467: AND
16468: IFFALSE 16651
16470: GO 16472
16472: DISABLE
16473: LD_INT 0
16475: PPUSH
16476: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16477: LD_ADDR_VAR 0 2
16481: PUSH
16482: LD_INT 22
16484: PUSH
16485: LD_OWVAR 2
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PPUSH
16494: CALL_OW 69
16498: ST_TO_ADDR
// if not tmp then
16499: LD_VAR 0 2
16503: NOT
16504: IFFALSE 16508
// exit ;
16506: GO 16651
// for i := 1 to 2 do
16508: LD_ADDR_VAR 0 1
16512: PUSH
16513: DOUBLE
16514: LD_INT 1
16516: DEC
16517: ST_TO_ADDR
16518: LD_INT 2
16520: PUSH
16521: FOR_TO
16522: IFFALSE 16649
// begin uc_side := your_side ;
16524: LD_ADDR_OWVAR 20
16528: PUSH
16529: LD_OWVAR 2
16533: ST_TO_ADDR
// uc_nation := nation_american ;
16534: LD_ADDR_OWVAR 21
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
// vc_chassis := us_morphling ;
16542: LD_ADDR_OWVAR 37
16546: PUSH
16547: LD_INT 5
16549: ST_TO_ADDR
// vc_engine := engine_siberite ;
16550: LD_ADDR_OWVAR 39
16554: PUSH
16555: LD_INT 3
16557: ST_TO_ADDR
// vc_control := control_computer ;
16558: LD_ADDR_OWVAR 38
16562: PUSH
16563: LD_INT 3
16565: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16566: LD_ADDR_OWVAR 40
16570: PUSH
16571: LD_INT 10
16573: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16574: LD_VAR 0 2
16578: PUSH
16579: LD_INT 1
16581: ARRAY
16582: PPUSH
16583: CALL_OW 310
16587: NOT
16588: IFFALSE 16635
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16590: CALL_OW 45
16594: PPUSH
16595: LD_VAR 0 2
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PPUSH
16604: CALL_OW 250
16608: PPUSH
16609: LD_VAR 0 2
16613: PUSH
16614: LD_INT 1
16616: ARRAY
16617: PPUSH
16618: CALL_OW 251
16622: PPUSH
16623: LD_INT 12
16625: PPUSH
16626: LD_INT 1
16628: PPUSH
16629: CALL_OW 50
16633: GO 16647
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16635: CALL_OW 45
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: CALL_OW 51
// end ;
16647: GO 16521
16649: POP
16650: POP
// end ;
16651: PPOPN 2
16653: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16654: LD_EXP 32
16658: PUSH
16659: LD_EXP 78
16663: AND
16664: IFFALSE 16886
16666: GO 16668
16668: DISABLE
16669: LD_INT 0
16671: PPUSH
16672: PPUSH
16673: PPUSH
16674: PPUSH
16675: PPUSH
16676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16677: LD_ADDR_VAR 0 6
16681: PUSH
16682: LD_INT 22
16684: PUSH
16685: LD_OWVAR 2
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 21
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 3
16706: PUSH
16707: LD_INT 23
16709: PUSH
16710: LD_INT 0
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: PPUSH
16726: CALL_OW 69
16730: ST_TO_ADDR
// if not tmp then
16731: LD_VAR 0 6
16735: NOT
16736: IFFALSE 16740
// exit ;
16738: GO 16886
// s1 := rand ( 1 , 4 ) ;
16740: LD_ADDR_VAR 0 2
16744: PUSH
16745: LD_INT 1
16747: PPUSH
16748: LD_INT 4
16750: PPUSH
16751: CALL_OW 12
16755: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16756: LD_ADDR_VAR 0 4
16760: PUSH
16761: LD_VAR 0 6
16765: PUSH
16766: LD_INT 1
16768: ARRAY
16769: PPUSH
16770: LD_VAR 0 2
16774: PPUSH
16775: CALL_OW 259
16779: ST_TO_ADDR
// if s1 = 1 then
16780: LD_VAR 0 2
16784: PUSH
16785: LD_INT 1
16787: EQUAL
16788: IFFALSE 16808
// s2 := rand ( 2 , 4 ) else
16790: LD_ADDR_VAR 0 3
16794: PUSH
16795: LD_INT 2
16797: PPUSH
16798: LD_INT 4
16800: PPUSH
16801: CALL_OW 12
16805: ST_TO_ADDR
16806: GO 16816
// s2 := 1 ;
16808: LD_ADDR_VAR 0 3
16812: PUSH
16813: LD_INT 1
16815: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16816: LD_ADDR_VAR 0 5
16820: PUSH
16821: LD_VAR 0 6
16825: PUSH
16826: LD_INT 1
16828: ARRAY
16829: PPUSH
16830: LD_VAR 0 3
16834: PPUSH
16835: CALL_OW 259
16839: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16840: LD_VAR 0 6
16844: PUSH
16845: LD_INT 1
16847: ARRAY
16848: PPUSH
16849: LD_VAR 0 2
16853: PPUSH
16854: LD_VAR 0 5
16858: PPUSH
16859: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16863: LD_VAR 0 6
16867: PUSH
16868: LD_INT 1
16870: ARRAY
16871: PPUSH
16872: LD_VAR 0 3
16876: PPUSH
16877: LD_VAR 0 4
16881: PPUSH
16882: CALL_OW 237
// end ;
16886: PPOPN 6
16888: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16889: LD_EXP 32
16893: PUSH
16894: LD_EXP 79
16898: AND
16899: IFFALSE 16978
16901: GO 16903
16903: DISABLE
16904: LD_INT 0
16906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16907: LD_ADDR_VAR 0 1
16911: PUSH
16912: LD_INT 22
16914: PUSH
16915: LD_OWVAR 2
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 30
16926: PUSH
16927: LD_INT 3
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PPUSH
16938: CALL_OW 69
16942: ST_TO_ADDR
// if not tmp then
16943: LD_VAR 0 1
16947: NOT
16948: IFFALSE 16952
// exit ;
16950: GO 16978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16952: LD_VAR 0 1
16956: PUSH
16957: LD_INT 1
16959: PPUSH
16960: LD_VAR 0 1
16964: PPUSH
16965: CALL_OW 12
16969: ARRAY
16970: PPUSH
16971: LD_INT 1
16973: PPUSH
16974: CALL_OW 234
// end ;
16978: PPOPN 1
16980: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16981: LD_EXP 32
16985: PUSH
16986: LD_EXP 80
16990: AND
16991: IFFALSE 17103
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
16999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17000: LD_ADDR_VAR 0 2
17004: PUSH
17005: LD_INT 22
17007: PUSH
17008: LD_OWVAR 2
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: LD_INT 30
17022: PUSH
17023: LD_INT 27
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 30
17032: PUSH
17033: LD_INT 26
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 30
17042: PUSH
17043: LD_INT 28
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PPUSH
17060: CALL_OW 69
17064: ST_TO_ADDR
// if not tmp then
17065: LD_VAR 0 2
17069: NOT
17070: IFFALSE 17074
// exit ;
17072: GO 17103
// for i in tmp do
17074: LD_ADDR_VAR 0 1
17078: PUSH
17079: LD_VAR 0 2
17083: PUSH
17084: FOR_IN
17085: IFFALSE 17101
// SetLives ( i , 1 ) ;
17087: LD_VAR 0 1
17091: PPUSH
17092: LD_INT 1
17094: PPUSH
17095: CALL_OW 234
17099: GO 17084
17101: POP
17102: POP
// end ;
17103: PPOPN 2
17105: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17106: LD_EXP 32
17110: PUSH
17111: LD_EXP 81
17115: AND
17116: IFFALSE 17390
17118: GO 17120
17120: DISABLE
17121: LD_INT 0
17123: PPUSH
17124: PPUSH
17125: PPUSH
// begin i := rand ( 1 , 7 ) ;
17126: LD_ADDR_VAR 0 1
17130: PUSH
17131: LD_INT 1
17133: PPUSH
17134: LD_INT 7
17136: PPUSH
17137: CALL_OW 12
17141: ST_TO_ADDR
// case i of 1 :
17142: LD_VAR 0 1
17146: PUSH
17147: LD_INT 1
17149: DOUBLE
17150: EQUAL
17151: IFTRUE 17155
17153: GO 17165
17155: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17156: LD_STRING earthquake(getX(game), 0, 32)
17158: PPUSH
17159: CALL_OW 559
17163: GO 17390
17165: LD_INT 2
17167: DOUBLE
17168: EQUAL
17169: IFTRUE 17173
17171: GO 17187
17173: POP
// begin ToLua ( displayStucuk(); ) ;
17174: LD_STRING displayStucuk();
17176: PPUSH
17177: CALL_OW 559
// ResetFog ;
17181: CALL_OW 335
// end ; 3 :
17185: GO 17390
17187: LD_INT 3
17189: DOUBLE
17190: EQUAL
17191: IFTRUE 17195
17193: GO 17299
17195: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17196: LD_ADDR_VAR 0 2
17200: PUSH
17201: LD_INT 22
17203: PUSH
17204: LD_OWVAR 2
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 25
17215: PUSH
17216: LD_INT 1
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PPUSH
17227: CALL_OW 69
17231: ST_TO_ADDR
// if not tmp then
17232: LD_VAR 0 2
17236: NOT
17237: IFFALSE 17241
// exit ;
17239: GO 17390
// un := tmp [ rand ( 1 , tmp ) ] ;
17241: LD_ADDR_VAR 0 3
17245: PUSH
17246: LD_VAR 0 2
17250: PUSH
17251: LD_INT 1
17253: PPUSH
17254: LD_VAR 0 2
17258: PPUSH
17259: CALL_OW 12
17263: ARRAY
17264: ST_TO_ADDR
// if Crawls ( un ) then
17265: LD_VAR 0 3
17269: PPUSH
17270: CALL_OW 318
17274: IFFALSE 17285
// ComWalk ( un ) ;
17276: LD_VAR 0 3
17280: PPUSH
17281: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17285: LD_VAR 0 3
17289: PPUSH
17290: LD_INT 8
17292: PPUSH
17293: CALL_OW 336
// end ; 4 :
17297: GO 17390
17299: LD_INT 4
17301: DOUBLE
17302: EQUAL
17303: IFTRUE 17307
17305: GO 17368
17307: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17308: LD_ADDR_VAR 0 2
17312: PUSH
17313: LD_INT 22
17315: PUSH
17316: LD_OWVAR 2
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 30
17327: PUSH
17328: LD_INT 29
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PPUSH
17339: CALL_OW 69
17343: ST_TO_ADDR
// if not tmp then
17344: LD_VAR 0 2
17348: NOT
17349: IFFALSE 17353
// exit ;
17351: GO 17390
// DestroyUnit ( tmp [ 1 ] ) ;
17353: LD_VAR 0 2
17357: PUSH
17358: LD_INT 1
17360: ARRAY
17361: PPUSH
17362: CALL_OW 65
// end ; 5 .. 7 :
17366: GO 17390
17368: LD_INT 5
17370: DOUBLE
17371: GREATEREQUAL
17372: IFFALSE 17380
17374: LD_INT 7
17376: DOUBLE
17377: LESSEQUAL
17378: IFTRUE 17382
17380: GO 17389
17382: POP
// StreamSibBomb ; end ;
17383: CALL 13640 0 0
17387: GO 17390
17389: POP
// end ;
17390: PPOPN 3
17392: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17393: LD_EXP 32
17397: PUSH
17398: LD_EXP 82
17402: AND
17403: IFFALSE 17559
17405: GO 17407
17407: DISABLE
17408: LD_INT 0
17410: PPUSH
17411: PPUSH
17412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17413: LD_ADDR_VAR 0 2
17417: PUSH
17418: LD_INT 81
17420: PUSH
17421: LD_OWVAR 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 2
17432: PUSH
17433: LD_INT 21
17435: PUSH
17436: LD_INT 1
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 21
17445: PUSH
17446: LD_INT 2
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: LIST
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PPUSH
17462: CALL_OW 69
17466: ST_TO_ADDR
// if not tmp then
17467: LD_VAR 0 2
17471: NOT
17472: IFFALSE 17476
// exit ;
17474: GO 17559
// p := 0 ;
17476: LD_ADDR_VAR 0 3
17480: PUSH
17481: LD_INT 0
17483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17484: LD_INT 35
17486: PPUSH
17487: CALL_OW 67
// p := p + 1 ;
17491: LD_ADDR_VAR 0 3
17495: PUSH
17496: LD_VAR 0 3
17500: PUSH
17501: LD_INT 1
17503: PLUS
17504: ST_TO_ADDR
// for i in tmp do
17505: LD_ADDR_VAR 0 1
17509: PUSH
17510: LD_VAR 0 2
17514: PUSH
17515: FOR_IN
17516: IFFALSE 17547
// if GetLives ( i ) < 1000 then
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 256
17527: PUSH
17528: LD_INT 1000
17530: LESS
17531: IFFALSE 17545
// SetLives ( i , 1000 ) ;
17533: LD_VAR 0 1
17537: PPUSH
17538: LD_INT 1000
17540: PPUSH
17541: CALL_OW 234
17545: GO 17515
17547: POP
17548: POP
// until p > 20 ;
17549: LD_VAR 0 3
17553: PUSH
17554: LD_INT 20
17556: GREATER
17557: IFFALSE 17484
// end ;
17559: PPOPN 3
17561: END
// every 0 0$1 trigger StreamModeActive and sTime do
17562: LD_EXP 32
17566: PUSH
17567: LD_EXP 83
17571: AND
17572: IFFALSE 17607
17574: GO 17576
17576: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17577: LD_INT 28
17579: PPUSH
17580: LD_OWVAR 2
17584: PPUSH
17585: LD_INT 2
17587: PPUSH
17588: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17592: LD_INT 30
17594: PPUSH
17595: LD_OWVAR 2
17599: PPUSH
17600: LD_INT 2
17602: PPUSH
17603: CALL_OW 322
// end ;
17607: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17608: LD_EXP 32
17612: PUSH
17613: LD_EXP 84
17617: AND
17618: IFFALSE 17739
17620: GO 17622
17622: DISABLE
17623: LD_INT 0
17625: PPUSH
17626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17627: LD_ADDR_VAR 0 2
17631: PUSH
17632: LD_INT 22
17634: PUSH
17635: LD_OWVAR 2
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 21
17646: PUSH
17647: LD_INT 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 3
17656: PUSH
17657: LD_INT 23
17659: PUSH
17660: LD_INT 0
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 69
17680: ST_TO_ADDR
// if not tmp then
17681: LD_VAR 0 2
17685: NOT
17686: IFFALSE 17690
// exit ;
17688: GO 17739
// for i in tmp do
17690: LD_ADDR_VAR 0 1
17694: PUSH
17695: LD_VAR 0 2
17699: PUSH
17700: FOR_IN
17701: IFFALSE 17737
// begin if Crawls ( i ) then
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 318
17712: IFFALSE 17723
// ComWalk ( i ) ;
17714: LD_VAR 0 1
17718: PPUSH
17719: CALL_OW 138
// SetClass ( i , 2 ) ;
17723: LD_VAR 0 1
17727: PPUSH
17728: LD_INT 2
17730: PPUSH
17731: CALL_OW 336
// end ;
17735: GO 17700
17737: POP
17738: POP
// end ;
17739: PPOPN 2
17741: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17742: LD_EXP 32
17746: PUSH
17747: LD_EXP 85
17751: AND
17752: IFFALSE 18033
17754: GO 17756
17756: DISABLE
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
17761: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17762: LD_OWVAR 2
17766: PPUSH
17767: LD_INT 9
17769: PPUSH
17770: LD_INT 1
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17780: LD_INT 9
17782: PPUSH
17783: LD_OWVAR 2
17787: PPUSH
17788: CALL_OW 343
// uc_side := 9 ;
17792: LD_ADDR_OWVAR 20
17796: PUSH
17797: LD_INT 9
17799: ST_TO_ADDR
// uc_nation := 2 ;
17800: LD_ADDR_OWVAR 21
17804: PUSH
17805: LD_INT 2
17807: ST_TO_ADDR
// hc_name := Dark Warrior ;
17808: LD_ADDR_OWVAR 26
17812: PUSH
17813: LD_STRING Dark Warrior
17815: ST_TO_ADDR
// hc_gallery :=  ;
17816: LD_ADDR_OWVAR 33
17820: PUSH
17821: LD_STRING 
17823: ST_TO_ADDR
// hc_noskilllimit := true ;
17824: LD_ADDR_OWVAR 76
17828: PUSH
17829: LD_INT 1
17831: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17832: LD_ADDR_OWVAR 31
17836: PUSH
17837: LD_INT 30
17839: PUSH
17840: LD_INT 30
17842: PUSH
17843: LD_INT 30
17845: PUSH
17846: LD_INT 30
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: ST_TO_ADDR
// un := CreateHuman ;
17855: LD_ADDR_VAR 0 3
17859: PUSH
17860: CALL_OW 44
17864: ST_TO_ADDR
// hc_noskilllimit := false ;
17865: LD_ADDR_OWVAR 76
17869: PUSH
17870: LD_INT 0
17872: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17873: LD_VAR 0 3
17877: PPUSH
17878: LD_INT 1
17880: PPUSH
17881: CALL_OW 51
// p := 0 ;
17885: LD_ADDR_VAR 0 2
17889: PUSH
17890: LD_INT 0
17892: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17893: LD_INT 35
17895: PPUSH
17896: CALL_OW 67
// p := p + 1 ;
17900: LD_ADDR_VAR 0 2
17904: PUSH
17905: LD_VAR 0 2
17909: PUSH
17910: LD_INT 1
17912: PLUS
17913: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17914: LD_VAR 0 3
17918: PPUSH
17919: CALL_OW 256
17923: PUSH
17924: LD_INT 1000
17926: LESS
17927: IFFALSE 17941
// SetLives ( un , 1000 ) ;
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_INT 1000
17936: PPUSH
17937: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17941: LD_VAR 0 3
17945: PPUSH
17946: LD_INT 81
17948: PUSH
17949: LD_OWVAR 2
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 91
17960: PUSH
17961: LD_VAR 0 3
17965: PUSH
17966: LD_INT 30
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PPUSH
17978: CALL_OW 69
17982: PPUSH
17983: LD_VAR 0 3
17987: PPUSH
17988: CALL_OW 74
17992: PPUSH
17993: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17997: LD_VAR 0 2
18001: PUSH
18002: LD_INT 60
18004: GREATER
18005: PUSH
18006: LD_VAR 0 3
18010: PPUSH
18011: CALL_OW 301
18015: OR
18016: IFFALSE 17893
// if un then
18018: LD_VAR 0 3
18022: IFFALSE 18033
// RemoveUnit ( un ) ;
18024: LD_VAR 0 3
18028: PPUSH
18029: CALL_OW 64
// end ;
18033: PPOPN 3
18035: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18036: LD_INT 0
18038: PPUSH
// case cmd of 301 :
18039: LD_VAR 0 1
18043: PUSH
18044: LD_INT 301
18046: DOUBLE
18047: EQUAL
18048: IFTRUE 18052
18050: GO 18084
18052: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18053: LD_VAR 0 6
18057: PPUSH
18058: LD_VAR 0 7
18062: PPUSH
18063: LD_VAR 0 8
18067: PPUSH
18068: LD_VAR 0 4
18072: PPUSH
18073: LD_VAR 0 5
18077: PPUSH
18078: CALL 19285 0 5
18082: GO 18205
18084: LD_INT 302
18086: DOUBLE
18087: EQUAL
18088: IFTRUE 18092
18090: GO 18129
18092: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18093: LD_VAR 0 6
18097: PPUSH
18098: LD_VAR 0 7
18102: PPUSH
18103: LD_VAR 0 8
18107: PPUSH
18108: LD_VAR 0 9
18112: PPUSH
18113: LD_VAR 0 4
18117: PPUSH
18118: LD_VAR 0 5
18122: PPUSH
18123: CALL 19376 0 6
18127: GO 18205
18129: LD_INT 303
18131: DOUBLE
18132: EQUAL
18133: IFTRUE 18137
18135: GO 18174
18137: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18138: LD_VAR 0 6
18142: PPUSH
18143: LD_VAR 0 7
18147: PPUSH
18148: LD_VAR 0 8
18152: PPUSH
18153: LD_VAR 0 9
18157: PPUSH
18158: LD_VAR 0 4
18162: PPUSH
18163: LD_VAR 0 5
18167: PPUSH
18168: CALL 18210 0 6
18172: GO 18205
18174: LD_INT 304
18176: DOUBLE
18177: EQUAL
18178: IFTRUE 18182
18180: GO 18204
18182: POP
// hHackTeleport ( unit , x , y ) ; end ;
18183: LD_VAR 0 2
18187: PPUSH
18188: LD_VAR 0 4
18192: PPUSH
18193: LD_VAR 0 5
18197: PPUSH
18198: CALL 19969 0 3
18202: GO 18205
18204: POP
// end ;
18205: LD_VAR 0 12
18209: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18210: LD_INT 0
18212: PPUSH
18213: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18214: LD_VAR 0 1
18218: PUSH
18219: LD_INT 1
18221: LESS
18222: PUSH
18223: LD_VAR 0 1
18227: PUSH
18228: LD_INT 3
18230: GREATER
18231: OR
18232: PUSH
18233: LD_VAR 0 5
18237: PPUSH
18238: LD_VAR 0 6
18242: PPUSH
18243: CALL_OW 428
18247: OR
18248: IFFALSE 18252
// exit ;
18250: GO 18972
// uc_side := your_side ;
18252: LD_ADDR_OWVAR 20
18256: PUSH
18257: LD_OWVAR 2
18261: ST_TO_ADDR
// uc_nation := nation ;
18262: LD_ADDR_OWVAR 21
18266: PUSH
18267: LD_VAR 0 1
18271: ST_TO_ADDR
// bc_level = 1 ;
18272: LD_ADDR_OWVAR 43
18276: PUSH
18277: LD_INT 1
18279: ST_TO_ADDR
// case btype of 1 :
18280: LD_VAR 0 2
18284: PUSH
18285: LD_INT 1
18287: DOUBLE
18288: EQUAL
18289: IFTRUE 18293
18291: GO 18304
18293: POP
// bc_type := b_depot ; 2 :
18294: LD_ADDR_OWVAR 42
18298: PUSH
18299: LD_INT 0
18301: ST_TO_ADDR
18302: GO 18916
18304: LD_INT 2
18306: DOUBLE
18307: EQUAL
18308: IFTRUE 18312
18310: GO 18323
18312: POP
// bc_type := b_warehouse ; 3 :
18313: LD_ADDR_OWVAR 42
18317: PUSH
18318: LD_INT 1
18320: ST_TO_ADDR
18321: GO 18916
18323: LD_INT 3
18325: DOUBLE
18326: EQUAL
18327: IFTRUE 18331
18329: GO 18342
18331: POP
// bc_type := b_lab ; 4 .. 9 :
18332: LD_ADDR_OWVAR 42
18336: PUSH
18337: LD_INT 6
18339: ST_TO_ADDR
18340: GO 18916
18342: LD_INT 4
18344: DOUBLE
18345: GREATEREQUAL
18346: IFFALSE 18354
18348: LD_INT 9
18350: DOUBLE
18351: LESSEQUAL
18352: IFTRUE 18356
18354: GO 18408
18356: POP
// begin bc_type := b_lab_half ;
18357: LD_ADDR_OWVAR 42
18361: PUSH
18362: LD_INT 7
18364: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18365: LD_ADDR_OWVAR 44
18369: PUSH
18370: LD_INT 10
18372: PUSH
18373: LD_INT 11
18375: PUSH
18376: LD_INT 12
18378: PUSH
18379: LD_INT 15
18381: PUSH
18382: LD_INT 14
18384: PUSH
18385: LD_INT 13
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: PUSH
18396: LD_VAR 0 2
18400: PUSH
18401: LD_INT 3
18403: MINUS
18404: ARRAY
18405: ST_TO_ADDR
// end ; 10 .. 13 :
18406: GO 18916
18408: LD_INT 10
18410: DOUBLE
18411: GREATEREQUAL
18412: IFFALSE 18420
18414: LD_INT 13
18416: DOUBLE
18417: LESSEQUAL
18418: IFTRUE 18422
18420: GO 18499
18422: POP
// begin bc_type := b_lab_full ;
18423: LD_ADDR_OWVAR 42
18427: PUSH
18428: LD_INT 8
18430: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18431: LD_ADDR_OWVAR 44
18435: PUSH
18436: LD_INT 10
18438: PUSH
18439: LD_INT 12
18441: PUSH
18442: LD_INT 14
18444: PUSH
18445: LD_INT 13
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: PUSH
18454: LD_VAR 0 2
18458: PUSH
18459: LD_INT 9
18461: MINUS
18462: ARRAY
18463: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18464: LD_ADDR_OWVAR 45
18468: PUSH
18469: LD_INT 11
18471: PUSH
18472: LD_INT 15
18474: PUSH
18475: LD_INT 12
18477: PUSH
18478: LD_INT 15
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: PUSH
18487: LD_VAR 0 2
18491: PUSH
18492: LD_INT 9
18494: MINUS
18495: ARRAY
18496: ST_TO_ADDR
// end ; 14 :
18497: GO 18916
18499: LD_INT 14
18501: DOUBLE
18502: EQUAL
18503: IFTRUE 18507
18505: GO 18518
18507: POP
// bc_type := b_workshop ; 15 :
18508: LD_ADDR_OWVAR 42
18512: PUSH
18513: LD_INT 2
18515: ST_TO_ADDR
18516: GO 18916
18518: LD_INT 15
18520: DOUBLE
18521: EQUAL
18522: IFTRUE 18526
18524: GO 18537
18526: POP
// bc_type := b_factory ; 16 :
18527: LD_ADDR_OWVAR 42
18531: PUSH
18532: LD_INT 3
18534: ST_TO_ADDR
18535: GO 18916
18537: LD_INT 16
18539: DOUBLE
18540: EQUAL
18541: IFTRUE 18545
18543: GO 18556
18545: POP
// bc_type := b_ext_gun ; 17 :
18546: LD_ADDR_OWVAR 42
18550: PUSH
18551: LD_INT 17
18553: ST_TO_ADDR
18554: GO 18916
18556: LD_INT 17
18558: DOUBLE
18559: EQUAL
18560: IFTRUE 18564
18562: GO 18592
18564: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18565: LD_ADDR_OWVAR 42
18569: PUSH
18570: LD_INT 19
18572: PUSH
18573: LD_INT 23
18575: PUSH
18576: LD_INT 19
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: PUSH
18584: LD_VAR 0 1
18588: ARRAY
18589: ST_TO_ADDR
18590: GO 18916
18592: LD_INT 18
18594: DOUBLE
18595: EQUAL
18596: IFTRUE 18600
18598: GO 18611
18600: POP
// bc_type := b_ext_radar ; 19 :
18601: LD_ADDR_OWVAR 42
18605: PUSH
18606: LD_INT 20
18608: ST_TO_ADDR
18609: GO 18916
18611: LD_INT 19
18613: DOUBLE
18614: EQUAL
18615: IFTRUE 18619
18617: GO 18630
18619: POP
// bc_type := b_ext_radio ; 20 :
18620: LD_ADDR_OWVAR 42
18624: PUSH
18625: LD_INT 22
18627: ST_TO_ADDR
18628: GO 18916
18630: LD_INT 20
18632: DOUBLE
18633: EQUAL
18634: IFTRUE 18638
18636: GO 18649
18638: POP
// bc_type := b_ext_siberium ; 21 :
18639: LD_ADDR_OWVAR 42
18643: PUSH
18644: LD_INT 21
18646: ST_TO_ADDR
18647: GO 18916
18649: LD_INT 21
18651: DOUBLE
18652: EQUAL
18653: IFTRUE 18657
18655: GO 18668
18657: POP
// bc_type := b_ext_computer ; 22 :
18658: LD_ADDR_OWVAR 42
18662: PUSH
18663: LD_INT 24
18665: ST_TO_ADDR
18666: GO 18916
18668: LD_INT 22
18670: DOUBLE
18671: EQUAL
18672: IFTRUE 18676
18674: GO 18687
18676: POP
// bc_type := b_ext_track ; 23 :
18677: LD_ADDR_OWVAR 42
18681: PUSH
18682: LD_INT 16
18684: ST_TO_ADDR
18685: GO 18916
18687: LD_INT 23
18689: DOUBLE
18690: EQUAL
18691: IFTRUE 18695
18693: GO 18706
18695: POP
// bc_type := b_ext_laser ; 24 :
18696: LD_ADDR_OWVAR 42
18700: PUSH
18701: LD_INT 25
18703: ST_TO_ADDR
18704: GO 18916
18706: LD_INT 24
18708: DOUBLE
18709: EQUAL
18710: IFTRUE 18714
18712: GO 18725
18714: POP
// bc_type := b_control_tower ; 25 :
18715: LD_ADDR_OWVAR 42
18719: PUSH
18720: LD_INT 36
18722: ST_TO_ADDR
18723: GO 18916
18725: LD_INT 25
18727: DOUBLE
18728: EQUAL
18729: IFTRUE 18733
18731: GO 18744
18733: POP
// bc_type := b_breastwork ; 26 :
18734: LD_ADDR_OWVAR 42
18738: PUSH
18739: LD_INT 31
18741: ST_TO_ADDR
18742: GO 18916
18744: LD_INT 26
18746: DOUBLE
18747: EQUAL
18748: IFTRUE 18752
18750: GO 18763
18752: POP
// bc_type := b_bunker ; 27 :
18753: LD_ADDR_OWVAR 42
18757: PUSH
18758: LD_INT 32
18760: ST_TO_ADDR
18761: GO 18916
18763: LD_INT 27
18765: DOUBLE
18766: EQUAL
18767: IFTRUE 18771
18769: GO 18782
18771: POP
// bc_type := b_turret ; 28 :
18772: LD_ADDR_OWVAR 42
18776: PUSH
18777: LD_INT 33
18779: ST_TO_ADDR
18780: GO 18916
18782: LD_INT 28
18784: DOUBLE
18785: EQUAL
18786: IFTRUE 18790
18788: GO 18801
18790: POP
// bc_type := b_armoury ; 29 :
18791: LD_ADDR_OWVAR 42
18795: PUSH
18796: LD_INT 4
18798: ST_TO_ADDR
18799: GO 18916
18801: LD_INT 29
18803: DOUBLE
18804: EQUAL
18805: IFTRUE 18809
18807: GO 18820
18809: POP
// bc_type := b_barracks ; 30 :
18810: LD_ADDR_OWVAR 42
18814: PUSH
18815: LD_INT 5
18817: ST_TO_ADDR
18818: GO 18916
18820: LD_INT 30
18822: DOUBLE
18823: EQUAL
18824: IFTRUE 18828
18826: GO 18839
18828: POP
// bc_type := b_solar_power ; 31 :
18829: LD_ADDR_OWVAR 42
18833: PUSH
18834: LD_INT 27
18836: ST_TO_ADDR
18837: GO 18916
18839: LD_INT 31
18841: DOUBLE
18842: EQUAL
18843: IFTRUE 18847
18845: GO 18858
18847: POP
// bc_type := b_oil_power ; 32 :
18848: LD_ADDR_OWVAR 42
18852: PUSH
18853: LD_INT 26
18855: ST_TO_ADDR
18856: GO 18916
18858: LD_INT 32
18860: DOUBLE
18861: EQUAL
18862: IFTRUE 18866
18864: GO 18877
18866: POP
// bc_type := b_siberite_power ; 33 :
18867: LD_ADDR_OWVAR 42
18871: PUSH
18872: LD_INT 28
18874: ST_TO_ADDR
18875: GO 18916
18877: LD_INT 33
18879: DOUBLE
18880: EQUAL
18881: IFTRUE 18885
18883: GO 18896
18885: POP
// bc_type := b_oil_mine ; 34 :
18886: LD_ADDR_OWVAR 42
18890: PUSH
18891: LD_INT 29
18893: ST_TO_ADDR
18894: GO 18916
18896: LD_INT 34
18898: DOUBLE
18899: EQUAL
18900: IFTRUE 18904
18902: GO 18915
18904: POP
// bc_type := b_siberite_mine ; end ;
18905: LD_ADDR_OWVAR 42
18909: PUSH
18910: LD_INT 30
18912: ST_TO_ADDR
18913: GO 18916
18915: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18916: LD_ADDR_VAR 0 8
18920: PUSH
18921: LD_VAR 0 5
18925: PPUSH
18926: LD_VAR 0 6
18930: PPUSH
18931: LD_VAR 0 3
18935: PPUSH
18936: CALL_OW 47
18940: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18941: LD_OWVAR 42
18945: PUSH
18946: LD_INT 32
18948: PUSH
18949: LD_INT 33
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: IN
18956: IFFALSE 18972
// PlaceWeaponTurret ( b , weapon ) ;
18958: LD_VAR 0 8
18962: PPUSH
18963: LD_VAR 0 4
18967: PPUSH
18968: CALL_OW 431
// end ;
18972: LD_VAR 0 7
18976: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18977: LD_INT 0
18979: PPUSH
18980: PPUSH
18981: PPUSH
18982: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18983: LD_ADDR_VAR 0 4
18987: PUSH
18988: LD_INT 22
18990: PUSH
18991: LD_OWVAR 2
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: LD_INT 30
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 30
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: LIST
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PPUSH
19032: CALL_OW 69
19036: ST_TO_ADDR
// if not tmp then
19037: LD_VAR 0 4
19041: NOT
19042: IFFALSE 19046
// exit ;
19044: GO 19105
// for i in tmp do
19046: LD_ADDR_VAR 0 2
19050: PUSH
19051: LD_VAR 0 4
19055: PUSH
19056: FOR_IN
19057: IFFALSE 19103
// for j = 1 to 3 do
19059: LD_ADDR_VAR 0 3
19063: PUSH
19064: DOUBLE
19065: LD_INT 1
19067: DEC
19068: ST_TO_ADDR
19069: LD_INT 3
19071: PUSH
19072: FOR_TO
19073: IFFALSE 19099
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19075: LD_VAR 0 2
19079: PPUSH
19080: CALL_OW 274
19084: PPUSH
19085: LD_VAR 0 3
19089: PPUSH
19090: LD_INT 99999
19092: PPUSH
19093: CALL_OW 277
19097: GO 19072
19099: POP
19100: POP
19101: GO 19056
19103: POP
19104: POP
// end ;
19105: LD_VAR 0 1
19109: RET
// export function hHackSetLevel10 ; var i , j ; begin
19110: LD_INT 0
19112: PPUSH
19113: PPUSH
19114: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19115: LD_ADDR_VAR 0 2
19119: PUSH
19120: LD_INT 21
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PPUSH
19130: CALL_OW 69
19134: PUSH
19135: FOR_IN
19136: IFFALSE 19188
// if IsSelected ( i ) then
19138: LD_VAR 0 2
19142: PPUSH
19143: CALL_OW 306
19147: IFFALSE 19186
// begin for j := 1 to 4 do
19149: LD_ADDR_VAR 0 3
19153: PUSH
19154: DOUBLE
19155: LD_INT 1
19157: DEC
19158: ST_TO_ADDR
19159: LD_INT 4
19161: PUSH
19162: FOR_TO
19163: IFFALSE 19184
// SetSkill ( i , j , 10 ) ;
19165: LD_VAR 0 2
19169: PPUSH
19170: LD_VAR 0 3
19174: PPUSH
19175: LD_INT 10
19177: PPUSH
19178: CALL_OW 237
19182: GO 19162
19184: POP
19185: POP
// end ;
19186: GO 19135
19188: POP
19189: POP
// end ;
19190: LD_VAR 0 1
19194: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19195: LD_INT 0
19197: PPUSH
19198: PPUSH
19199: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19200: LD_ADDR_VAR 0 2
19204: PUSH
19205: LD_INT 22
19207: PUSH
19208: LD_OWVAR 2
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 21
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PPUSH
19231: CALL_OW 69
19235: PUSH
19236: FOR_IN
19237: IFFALSE 19278
// begin for j := 1 to 4 do
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: DOUBLE
19245: LD_INT 1
19247: DEC
19248: ST_TO_ADDR
19249: LD_INT 4
19251: PUSH
19252: FOR_TO
19253: IFFALSE 19274
// SetSkill ( i , j , 10 ) ;
19255: LD_VAR 0 2
19259: PPUSH
19260: LD_VAR 0 3
19264: PPUSH
19265: LD_INT 10
19267: PPUSH
19268: CALL_OW 237
19272: GO 19252
19274: POP
19275: POP
// end ;
19276: GO 19236
19278: POP
19279: POP
// end ;
19280: LD_VAR 0 1
19284: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19285: LD_INT 0
19287: PPUSH
// uc_side := your_side ;
19288: LD_ADDR_OWVAR 20
19292: PUSH
19293: LD_OWVAR 2
19297: ST_TO_ADDR
// uc_nation := nation ;
19298: LD_ADDR_OWVAR 21
19302: PUSH
19303: LD_VAR 0 1
19307: ST_TO_ADDR
// InitHc ;
19308: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19312: LD_INT 0
19314: PPUSH
19315: LD_VAR 0 2
19319: PPUSH
19320: LD_VAR 0 3
19324: PPUSH
19325: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19329: LD_VAR 0 4
19333: PPUSH
19334: LD_VAR 0 5
19338: PPUSH
19339: CALL_OW 428
19343: PUSH
19344: LD_INT 0
19346: EQUAL
19347: IFFALSE 19371
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19349: CALL_OW 44
19353: PPUSH
19354: LD_VAR 0 4
19358: PPUSH
19359: LD_VAR 0 5
19363: PPUSH
19364: LD_INT 1
19366: PPUSH
19367: CALL_OW 48
// end ;
19371: LD_VAR 0 6
19375: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19376: LD_INT 0
19378: PPUSH
19379: PPUSH
// uc_side := your_side ;
19380: LD_ADDR_OWVAR 20
19384: PUSH
19385: LD_OWVAR 2
19389: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19390: LD_VAR 0 1
19394: PUSH
19395: LD_INT 1
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: LD_INT 3
19403: PUSH
19404: LD_INT 4
19406: PUSH
19407: LD_INT 5
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: IN
19417: IFFALSE 19429
// uc_nation := nation_american else
19419: LD_ADDR_OWVAR 21
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
19427: GO 19472
// if chassis in [ 11 , 12 , 13 , 14 ] then
19429: LD_VAR 0 1
19433: PUSH
19434: LD_INT 11
19436: PUSH
19437: LD_INT 12
19439: PUSH
19440: LD_INT 13
19442: PUSH
19443: LD_INT 14
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: IN
19452: IFFALSE 19464
// uc_nation := nation_arabian else
19454: LD_ADDR_OWVAR 21
19458: PUSH
19459: LD_INT 2
19461: ST_TO_ADDR
19462: GO 19472
// uc_nation := nation_russian ;
19464: LD_ADDR_OWVAR 21
19468: PUSH
19469: LD_INT 3
19471: ST_TO_ADDR
// vc_chassis := chassis ;
19472: LD_ADDR_OWVAR 37
19476: PUSH
19477: LD_VAR 0 1
19481: ST_TO_ADDR
// vc_engine := engine ;
19482: LD_ADDR_OWVAR 39
19486: PUSH
19487: LD_VAR 0 2
19491: ST_TO_ADDR
// vc_control := control ;
19492: LD_ADDR_OWVAR 38
19496: PUSH
19497: LD_VAR 0 3
19501: ST_TO_ADDR
// vc_weapon := weapon ;
19502: LD_ADDR_OWVAR 40
19506: PUSH
19507: LD_VAR 0 4
19511: ST_TO_ADDR
// un := CreateVehicle ;
19512: LD_ADDR_VAR 0 8
19516: PUSH
19517: CALL_OW 45
19521: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19522: LD_VAR 0 8
19526: PPUSH
19527: LD_INT 0
19529: PPUSH
19530: LD_INT 5
19532: PPUSH
19533: CALL_OW 12
19537: PPUSH
19538: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19542: LD_VAR 0 8
19546: PPUSH
19547: LD_VAR 0 5
19551: PPUSH
19552: LD_VAR 0 6
19556: PPUSH
19557: LD_INT 1
19559: PPUSH
19560: CALL_OW 48
// end ;
19564: LD_VAR 0 7
19568: RET
// export hInvincible ; every 1 do
19569: GO 19571
19571: DISABLE
// hInvincible := [ ] ;
19572: LD_ADDR_EXP 86
19576: PUSH
19577: EMPTY
19578: ST_TO_ADDR
19579: END
// every 10 do var i ;
19580: GO 19582
19582: DISABLE
19583: LD_INT 0
19585: PPUSH
// begin enable ;
19586: ENABLE
// if not hInvincible then
19587: LD_EXP 86
19591: NOT
19592: IFFALSE 19596
// exit ;
19594: GO 19640
// for i in hInvincible do
19596: LD_ADDR_VAR 0 1
19600: PUSH
19601: LD_EXP 86
19605: PUSH
19606: FOR_IN
19607: IFFALSE 19638
// if GetLives ( i ) < 1000 then
19609: LD_VAR 0 1
19613: PPUSH
19614: CALL_OW 256
19618: PUSH
19619: LD_INT 1000
19621: LESS
19622: IFFALSE 19636
// SetLives ( i , 1000 ) ;
19624: LD_VAR 0 1
19628: PPUSH
19629: LD_INT 1000
19631: PPUSH
19632: CALL_OW 234
19636: GO 19606
19638: POP
19639: POP
// end ;
19640: PPOPN 1
19642: END
// export function hHackInvincible ; var i ; begin
19643: LD_INT 0
19645: PPUSH
19646: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19647: LD_ADDR_VAR 0 2
19651: PUSH
19652: LD_INT 2
19654: PUSH
19655: LD_INT 21
19657: PUSH
19658: LD_INT 1
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 21
19667: PUSH
19668: LD_INT 2
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: LIST
19679: PPUSH
19680: CALL_OW 69
19684: PUSH
19685: FOR_IN
19686: IFFALSE 19747
// if IsSelected ( i ) then
19688: LD_VAR 0 2
19692: PPUSH
19693: CALL_OW 306
19697: IFFALSE 19745
// begin if i in hInvincible then
19699: LD_VAR 0 2
19703: PUSH
19704: LD_EXP 86
19708: IN
19709: IFFALSE 19729
// hInvincible := hInvincible diff i else
19711: LD_ADDR_EXP 86
19715: PUSH
19716: LD_EXP 86
19720: PUSH
19721: LD_VAR 0 2
19725: DIFF
19726: ST_TO_ADDR
19727: GO 19745
// hInvincible := hInvincible union i ;
19729: LD_ADDR_EXP 86
19733: PUSH
19734: LD_EXP 86
19738: PUSH
19739: LD_VAR 0 2
19743: UNION
19744: ST_TO_ADDR
// end ;
19745: GO 19685
19747: POP
19748: POP
// end ;
19749: LD_VAR 0 1
19753: RET
// export function hHackInvisible ; var i , j ; begin
19754: LD_INT 0
19756: PPUSH
19757: PPUSH
19758: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19759: LD_ADDR_VAR 0 2
19763: PUSH
19764: LD_INT 21
19766: PUSH
19767: LD_INT 1
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PPUSH
19774: CALL_OW 69
19778: PUSH
19779: FOR_IN
19780: IFFALSE 19804
// if IsSelected ( i ) then
19782: LD_VAR 0 2
19786: PPUSH
19787: CALL_OW 306
19791: IFFALSE 19802
// ComForceInvisible ( i ) ;
19793: LD_VAR 0 2
19797: PPUSH
19798: CALL_OW 496
19802: GO 19779
19804: POP
19805: POP
// end ;
19806: LD_VAR 0 1
19810: RET
// export function hHackChangeYourSide ; begin
19811: LD_INT 0
19813: PPUSH
// if your_side = 8 then
19814: LD_OWVAR 2
19818: PUSH
19819: LD_INT 8
19821: EQUAL
19822: IFFALSE 19834
// your_side := 0 else
19824: LD_ADDR_OWVAR 2
19828: PUSH
19829: LD_INT 0
19831: ST_TO_ADDR
19832: GO 19848
// your_side := your_side + 1 ;
19834: LD_ADDR_OWVAR 2
19838: PUSH
19839: LD_OWVAR 2
19843: PUSH
19844: LD_INT 1
19846: PLUS
19847: ST_TO_ADDR
// end ;
19848: LD_VAR 0 1
19852: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19853: LD_INT 0
19855: PPUSH
19856: PPUSH
19857: PPUSH
// for i in all_units do
19858: LD_ADDR_VAR 0 2
19862: PUSH
19863: LD_OWVAR 3
19867: PUSH
19868: FOR_IN
19869: IFFALSE 19947
// if IsSelected ( i ) then
19871: LD_VAR 0 2
19875: PPUSH
19876: CALL_OW 306
19880: IFFALSE 19945
// begin j := GetSide ( i ) ;
19882: LD_ADDR_VAR 0 3
19886: PUSH
19887: LD_VAR 0 2
19891: PPUSH
19892: CALL_OW 255
19896: ST_TO_ADDR
// if j = 8 then
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 8
19904: EQUAL
19905: IFFALSE 19917
// j := 0 else
19907: LD_ADDR_VAR 0 3
19911: PUSH
19912: LD_INT 0
19914: ST_TO_ADDR
19915: GO 19931
// j := j + 1 ;
19917: LD_ADDR_VAR 0 3
19921: PUSH
19922: LD_VAR 0 3
19926: PUSH
19927: LD_INT 1
19929: PLUS
19930: ST_TO_ADDR
// SetSide ( i , j ) ;
19931: LD_VAR 0 2
19935: PPUSH
19936: LD_VAR 0 3
19940: PPUSH
19941: CALL_OW 235
// end ;
19945: GO 19868
19947: POP
19948: POP
// end ;
19949: LD_VAR 0 1
19953: RET
// export function hHackFog ; begin
19954: LD_INT 0
19956: PPUSH
// FogOff ( true ) ;
19957: LD_INT 1
19959: PPUSH
19960: CALL_OW 344
// end ;
19964: LD_VAR 0 1
19968: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19969: LD_INT 0
19971: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19972: LD_VAR 0 1
19976: PPUSH
19977: LD_VAR 0 2
19981: PPUSH
19982: LD_VAR 0 3
19986: PPUSH
19987: LD_INT 1
19989: PPUSH
19990: LD_INT 1
19992: PPUSH
19993: CALL_OW 483
// CenterOnXY ( x , y ) ;
19997: LD_VAR 0 2
20001: PPUSH
20002: LD_VAR 0 3
20006: PPUSH
20007: CALL_OW 84
// end ; end_of_file
20011: LD_VAR 0 4
20015: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20016: LD_INT 0
20018: PPUSH
20019: PPUSH
20020: PPUSH
20021: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20022: LD_VAR 0 1
20026: PPUSH
20027: CALL_OW 264
20031: PUSH
20032: LD_EXP 18
20036: EQUAL
20037: IFFALSE 20109
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20039: LD_INT 68
20041: PPUSH
20042: LD_VAR 0 1
20046: PPUSH
20047: CALL_OW 255
20051: PPUSH
20052: CALL_OW 321
20056: PUSH
20057: LD_INT 2
20059: EQUAL
20060: IFFALSE 20072
// eff := 70 else
20062: LD_ADDR_VAR 0 4
20066: PUSH
20067: LD_INT 70
20069: ST_TO_ADDR
20070: GO 20080
// eff := 30 ;
20072: LD_ADDR_VAR 0 4
20076: PUSH
20077: LD_INT 30
20079: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20080: LD_VAR 0 1
20084: PPUSH
20085: CALL_OW 250
20089: PPUSH
20090: LD_VAR 0 1
20094: PPUSH
20095: CALL_OW 251
20099: PPUSH
20100: LD_VAR 0 4
20104: PPUSH
20105: CALL_OW 495
// end ; end ;
20109: LD_VAR 0 2
20113: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20114: LD_INT 0
20116: PPUSH
// end ;
20117: LD_VAR 0 4
20121: RET
// export function SOS_Command ( cmd ) ; begin
20122: LD_INT 0
20124: PPUSH
// end ;
20125: LD_VAR 0 2
20129: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20130: LD_INT 0
20132: PPUSH
// if cmd = 121 then
20133: LD_VAR 0 1
20137: PUSH
20138: LD_INT 121
20140: EQUAL
20141: IFFALSE 20143
// end ;
20143: LD_VAR 0 6
20147: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20148: LD_INT 0
20150: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20151: LD_VAR 0 1
20155: PUSH
20156: LD_INT 250
20158: EQUAL
20159: PUSH
20160: LD_VAR 0 2
20164: PPUSH
20165: CALL_OW 264
20169: PUSH
20170: LD_EXP 21
20174: EQUAL
20175: AND
20176: IFFALSE 20197
// MinerPlaceMine ( unit , x , y ) ;
20178: LD_VAR 0 2
20182: PPUSH
20183: LD_VAR 0 4
20187: PPUSH
20188: LD_VAR 0 5
20192: PPUSH
20193: CALL 22546 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20197: LD_VAR 0 1
20201: PUSH
20202: LD_INT 251
20204: EQUAL
20205: PUSH
20206: LD_VAR 0 2
20210: PPUSH
20211: CALL_OW 264
20215: PUSH
20216: LD_EXP 21
20220: EQUAL
20221: AND
20222: IFFALSE 20243
// MinerDetonateMine ( unit , x , y ) ;
20224: LD_VAR 0 2
20228: PPUSH
20229: LD_VAR 0 4
20233: PPUSH
20234: LD_VAR 0 5
20238: PPUSH
20239: CALL 22823 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20243: LD_VAR 0 1
20247: PUSH
20248: LD_INT 252
20250: EQUAL
20251: PUSH
20252: LD_VAR 0 2
20256: PPUSH
20257: CALL_OW 264
20261: PUSH
20262: LD_EXP 21
20266: EQUAL
20267: AND
20268: IFFALSE 20289
// MinerCreateMinefield ( unit , x , y ) ;
20270: LD_VAR 0 2
20274: PPUSH
20275: LD_VAR 0 4
20279: PPUSH
20280: LD_VAR 0 5
20284: PPUSH
20285: CALL 23240 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20289: LD_VAR 0 1
20293: PUSH
20294: LD_INT 253
20296: EQUAL
20297: PUSH
20298: LD_VAR 0 2
20302: PPUSH
20303: CALL_OW 257
20307: PUSH
20308: LD_INT 5
20310: EQUAL
20311: AND
20312: IFFALSE 20333
// ComBinocular ( unit , x , y ) ;
20314: LD_VAR 0 2
20318: PPUSH
20319: LD_VAR 0 4
20323: PPUSH
20324: LD_VAR 0 5
20328: PPUSH
20329: CALL 23611 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20333: LD_VAR 0 1
20337: PUSH
20338: LD_INT 254
20340: EQUAL
20341: PUSH
20342: LD_VAR 0 2
20346: PPUSH
20347: CALL_OW 264
20351: PUSH
20352: LD_EXP 16
20356: EQUAL
20357: AND
20358: PUSH
20359: LD_VAR 0 3
20363: PPUSH
20364: CALL_OW 263
20368: PUSH
20369: LD_INT 3
20371: EQUAL
20372: AND
20373: IFFALSE 20389
// HackDestroyVehicle ( unit , selectedUnit ) ;
20375: LD_VAR 0 2
20379: PPUSH
20380: LD_VAR 0 3
20384: PPUSH
20385: CALL 21906 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20389: LD_VAR 0 1
20393: PUSH
20394: LD_INT 255
20396: EQUAL
20397: PUSH
20398: LD_VAR 0 2
20402: PPUSH
20403: CALL_OW 264
20407: PUSH
20408: LD_INT 14
20410: PUSH
20411: LD_INT 53
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: IN
20418: AND
20419: PUSH
20420: LD_VAR 0 4
20424: PPUSH
20425: LD_VAR 0 5
20429: PPUSH
20430: CALL_OW 488
20434: AND
20435: IFFALSE 20459
// CutTreeXYR ( unit , x , y , 12 ) ;
20437: LD_VAR 0 2
20441: PPUSH
20442: LD_VAR 0 4
20446: PPUSH
20447: LD_VAR 0 5
20451: PPUSH
20452: LD_INT 12
20454: PPUSH
20455: CALL 20472 0 4
// end ;
20459: LD_VAR 0 6
20463: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20464: LD_INT 0
20466: PPUSH
// end ;
20467: LD_VAR 0 4
20471: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20472: LD_INT 0
20474: PPUSH
20475: PPUSH
20476: PPUSH
20477: PPUSH
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
20482: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20483: LD_VAR 0 1
20487: NOT
20488: PUSH
20489: LD_VAR 0 2
20493: PPUSH
20494: LD_VAR 0 3
20498: PPUSH
20499: CALL_OW 488
20503: NOT
20504: OR
20505: PUSH
20506: LD_VAR 0 4
20510: NOT
20511: OR
20512: IFFALSE 20516
// exit ;
20514: GO 20856
// list := [ ] ;
20516: LD_ADDR_VAR 0 13
20520: PUSH
20521: EMPTY
20522: ST_TO_ADDR
// if x - r < 0 then
20523: LD_VAR 0 2
20527: PUSH
20528: LD_VAR 0 4
20532: MINUS
20533: PUSH
20534: LD_INT 0
20536: LESS
20537: IFFALSE 20549
// min_x := 0 else
20539: LD_ADDR_VAR 0 7
20543: PUSH
20544: LD_INT 0
20546: ST_TO_ADDR
20547: GO 20565
// min_x := x - r ;
20549: LD_ADDR_VAR 0 7
20553: PUSH
20554: LD_VAR 0 2
20558: PUSH
20559: LD_VAR 0 4
20563: MINUS
20564: ST_TO_ADDR
// if y - r < 0 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_VAR 0 4
20574: MINUS
20575: PUSH
20576: LD_INT 0
20578: LESS
20579: IFFALSE 20591
// min_y := 0 else
20581: LD_ADDR_VAR 0 8
20585: PUSH
20586: LD_INT 0
20588: ST_TO_ADDR
20589: GO 20607
// min_y := y - r ;
20591: LD_ADDR_VAR 0 8
20595: PUSH
20596: LD_VAR 0 3
20600: PUSH
20601: LD_VAR 0 4
20605: MINUS
20606: ST_TO_ADDR
// max_x := x + r ;
20607: LD_ADDR_VAR 0 9
20611: PUSH
20612: LD_VAR 0 2
20616: PUSH
20617: LD_VAR 0 4
20621: PLUS
20622: ST_TO_ADDR
// max_y := y + r ;
20623: LD_ADDR_VAR 0 10
20627: PUSH
20628: LD_VAR 0 3
20632: PUSH
20633: LD_VAR 0 4
20637: PLUS
20638: ST_TO_ADDR
// for _x = min_x to max_x do
20639: LD_ADDR_VAR 0 11
20643: PUSH
20644: DOUBLE
20645: LD_VAR 0 7
20649: DEC
20650: ST_TO_ADDR
20651: LD_VAR 0 9
20655: PUSH
20656: FOR_TO
20657: IFFALSE 20774
// for _y = min_y to max_y do
20659: LD_ADDR_VAR 0 12
20663: PUSH
20664: DOUBLE
20665: LD_VAR 0 8
20669: DEC
20670: ST_TO_ADDR
20671: LD_VAR 0 10
20675: PUSH
20676: FOR_TO
20677: IFFALSE 20770
// begin if not ValidHex ( _x , _y ) then
20679: LD_VAR 0 11
20683: PPUSH
20684: LD_VAR 0 12
20688: PPUSH
20689: CALL_OW 488
20693: NOT
20694: IFFALSE 20698
// continue ;
20696: GO 20676
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20698: LD_VAR 0 11
20702: PPUSH
20703: LD_VAR 0 12
20707: PPUSH
20708: CALL_OW 351
20712: PUSH
20713: LD_VAR 0 11
20717: PPUSH
20718: LD_VAR 0 12
20722: PPUSH
20723: CALL_OW 554
20727: AND
20728: IFFALSE 20768
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20730: LD_ADDR_VAR 0 13
20734: PUSH
20735: LD_VAR 0 13
20739: PPUSH
20740: LD_VAR 0 13
20744: PUSH
20745: LD_INT 1
20747: PLUS
20748: PPUSH
20749: LD_VAR 0 11
20753: PUSH
20754: LD_VAR 0 12
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PPUSH
20763: CALL_OW 2
20767: ST_TO_ADDR
// end ;
20768: GO 20676
20770: POP
20771: POP
20772: GO 20656
20774: POP
20775: POP
// if not list then
20776: LD_VAR 0 13
20780: NOT
20781: IFFALSE 20785
// exit ;
20783: GO 20856
// for i in list do
20785: LD_ADDR_VAR 0 6
20789: PUSH
20790: LD_VAR 0 13
20794: PUSH
20795: FOR_IN
20796: IFFALSE 20854
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20798: LD_VAR 0 1
20802: PPUSH
20803: LD_STRING M
20805: PUSH
20806: LD_VAR 0 6
20810: PUSH
20811: LD_INT 1
20813: ARRAY
20814: PUSH
20815: LD_VAR 0 6
20819: PUSH
20820: LD_INT 2
20822: ARRAY
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: LD_INT 0
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: PPUSH
20848: CALL_OW 447
20852: GO 20795
20854: POP
20855: POP
// end ;
20856: LD_VAR 0 5
20860: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20861: LD_EXP 89
20865: NOT
20866: IFFALSE 20916
20868: GO 20870
20870: DISABLE
// begin initHack := true ;
20871: LD_ADDR_EXP 89
20875: PUSH
20876: LD_INT 1
20878: ST_TO_ADDR
// hackTanks := [ ] ;
20879: LD_ADDR_EXP 90
20883: PUSH
20884: EMPTY
20885: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20886: LD_ADDR_EXP 91
20890: PUSH
20891: EMPTY
20892: ST_TO_ADDR
// hackLimit := 3 ;
20893: LD_ADDR_EXP 92
20897: PUSH
20898: LD_INT 3
20900: ST_TO_ADDR
// hackDist := 12 ;
20901: LD_ADDR_EXP 93
20905: PUSH
20906: LD_INT 12
20908: ST_TO_ADDR
// hackCounter := [ ] ;
20909: LD_ADDR_EXP 94
20913: PUSH
20914: EMPTY
20915: ST_TO_ADDR
// end ;
20916: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20917: LD_EXP 89
20921: PUSH
20922: LD_INT 34
20924: PUSH
20925: LD_EXP 16
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PPUSH
20934: CALL_OW 69
20938: AND
20939: IFFALSE 21194
20941: GO 20943
20943: DISABLE
20944: LD_INT 0
20946: PPUSH
20947: PPUSH
// begin enable ;
20948: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20949: LD_ADDR_VAR 0 1
20953: PUSH
20954: LD_INT 34
20956: PUSH
20957: LD_EXP 16
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PPUSH
20966: CALL_OW 69
20970: PUSH
20971: FOR_IN
20972: IFFALSE 21192
// begin if not i in hackTanks then
20974: LD_VAR 0 1
20978: PUSH
20979: LD_EXP 90
20983: IN
20984: NOT
20985: IFFALSE 21068
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20987: LD_ADDR_EXP 90
20991: PUSH
20992: LD_EXP 90
20996: PPUSH
20997: LD_EXP 90
21001: PUSH
21002: LD_INT 1
21004: PLUS
21005: PPUSH
21006: LD_VAR 0 1
21010: PPUSH
21011: CALL_OW 1
21015: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21016: LD_ADDR_EXP 91
21020: PUSH
21021: LD_EXP 91
21025: PPUSH
21026: LD_EXP 91
21030: PUSH
21031: LD_INT 1
21033: PLUS
21034: PPUSH
21035: EMPTY
21036: PPUSH
21037: CALL_OW 1
21041: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21042: LD_ADDR_EXP 94
21046: PUSH
21047: LD_EXP 94
21051: PPUSH
21052: LD_EXP 94
21056: PUSH
21057: LD_INT 1
21059: PLUS
21060: PPUSH
21061: EMPTY
21062: PPUSH
21063: CALL_OW 1
21067: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL_OW 302
21077: NOT
21078: IFFALSE 21091
// begin HackUnlinkAll ( i ) ;
21080: LD_VAR 0 1
21084: PPUSH
21085: CALL 21197 0 1
// continue ;
21089: GO 20971
// end ; HackCheckCapturedStatus ( i ) ;
21091: LD_VAR 0 1
21095: PPUSH
21096: CALL 21640 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: LD_INT 81
21107: PUSH
21108: LD_VAR 0 1
21112: PPUSH
21113: CALL_OW 255
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 33
21124: PUSH
21125: LD_INT 3
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 91
21134: PUSH
21135: LD_VAR 0 1
21139: PUSH
21140: LD_EXP 93
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 50
21152: PUSH
21153: EMPTY
21154: LIST
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: ST_TO_ADDR
// if not tmp then
21167: LD_VAR 0 2
21171: NOT
21172: IFFALSE 21176
// continue ;
21174: GO 20971
// HackLink ( i , tmp ) ;
21176: LD_VAR 0 1
21180: PPUSH
21181: LD_VAR 0 2
21185: PPUSH
21186: CALL 21333 0 2
// end ;
21190: GO 20971
21192: POP
21193: POP
// end ;
21194: PPOPN 2
21196: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21197: LD_INT 0
21199: PPUSH
21200: PPUSH
21201: PPUSH
// if not hack in hackTanks then
21202: LD_VAR 0 1
21206: PUSH
21207: LD_EXP 90
21211: IN
21212: NOT
21213: IFFALSE 21217
// exit ;
21215: GO 21328
// index := GetElementIndex ( hackTanks , hack ) ;
21217: LD_ADDR_VAR 0 4
21221: PUSH
21222: LD_EXP 90
21226: PPUSH
21227: LD_VAR 0 1
21231: PPUSH
21232: CALL 28762 0 2
21236: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21237: LD_EXP 91
21241: PUSH
21242: LD_VAR 0 4
21246: ARRAY
21247: IFFALSE 21328
// begin for i in hackTanksCaptured [ index ] do
21249: LD_ADDR_VAR 0 3
21253: PUSH
21254: LD_EXP 91
21258: PUSH
21259: LD_VAR 0 4
21263: ARRAY
21264: PUSH
21265: FOR_IN
21266: IFFALSE 21292
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21268: LD_VAR 0 3
21272: PUSH
21273: LD_INT 1
21275: ARRAY
21276: PPUSH
21277: LD_VAR 0 3
21281: PUSH
21282: LD_INT 2
21284: ARRAY
21285: PPUSH
21286: CALL_OW 235
21290: GO 21265
21292: POP
21293: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21294: LD_ADDR_EXP 91
21298: PUSH
21299: LD_EXP 91
21303: PPUSH
21304: LD_VAR 0 4
21308: PPUSH
21309: EMPTY
21310: PPUSH
21311: CALL_OW 1
21315: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21316: LD_VAR 0 1
21320: PPUSH
21321: LD_INT 0
21323: PPUSH
21324: CALL_OW 505
// end ; end ;
21328: LD_VAR 0 2
21332: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21333: LD_INT 0
21335: PPUSH
21336: PPUSH
21337: PPUSH
// if not hack in hackTanks or not vehicles then
21338: LD_VAR 0 1
21342: PUSH
21343: LD_EXP 90
21347: IN
21348: NOT
21349: PUSH
21350: LD_VAR 0 2
21354: NOT
21355: OR
21356: IFFALSE 21360
// exit ;
21358: GO 21635
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21360: LD_ADDR_VAR 0 2
21364: PUSH
21365: LD_VAR 0 1
21369: PPUSH
21370: LD_VAR 0 2
21374: PPUSH
21375: LD_INT 1
21377: PPUSH
21378: LD_INT 1
21380: PPUSH
21381: CALL 29412 0 4
21385: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21386: LD_ADDR_VAR 0 5
21390: PUSH
21391: LD_EXP 90
21395: PPUSH
21396: LD_VAR 0 1
21400: PPUSH
21401: CALL 28762 0 2
21405: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21406: LD_EXP 91
21410: PUSH
21411: LD_VAR 0 5
21415: ARRAY
21416: PUSH
21417: LD_EXP 92
21421: LESS
21422: IFFALSE 21611
// begin for i := 1 to vehicles do
21424: LD_ADDR_VAR 0 4
21428: PUSH
21429: DOUBLE
21430: LD_INT 1
21432: DEC
21433: ST_TO_ADDR
21434: LD_VAR 0 2
21438: PUSH
21439: FOR_TO
21440: IFFALSE 21609
// begin if hackTanksCaptured [ index ] = hackLimit then
21442: LD_EXP 91
21446: PUSH
21447: LD_VAR 0 5
21451: ARRAY
21452: PUSH
21453: LD_EXP 92
21457: EQUAL
21458: IFFALSE 21462
// break ;
21460: GO 21609
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21462: LD_ADDR_EXP 94
21466: PUSH
21467: LD_EXP 94
21471: PPUSH
21472: LD_VAR 0 5
21476: PPUSH
21477: LD_EXP 94
21481: PUSH
21482: LD_VAR 0 5
21486: ARRAY
21487: PUSH
21488: LD_INT 1
21490: PLUS
21491: PPUSH
21492: CALL_OW 1
21496: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21497: LD_ADDR_EXP 91
21501: PUSH
21502: LD_EXP 91
21506: PPUSH
21507: LD_VAR 0 5
21511: PUSH
21512: LD_EXP 91
21516: PUSH
21517: LD_VAR 0 5
21521: ARRAY
21522: PUSH
21523: LD_INT 1
21525: PLUS
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PPUSH
21531: LD_VAR 0 2
21535: PUSH
21536: LD_VAR 0 4
21540: ARRAY
21541: PUSH
21542: LD_VAR 0 2
21546: PUSH
21547: LD_VAR 0 4
21551: ARRAY
21552: PPUSH
21553: CALL_OW 255
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PPUSH
21562: CALL 28977 0 3
21566: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21567: LD_VAR 0 2
21571: PUSH
21572: LD_VAR 0 4
21576: ARRAY
21577: PPUSH
21578: LD_VAR 0 1
21582: PPUSH
21583: CALL_OW 255
21587: PPUSH
21588: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21592: LD_VAR 0 2
21596: PUSH
21597: LD_VAR 0 4
21601: ARRAY
21602: PPUSH
21603: CALL_OW 141
// end ;
21607: GO 21439
21609: POP
21610: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21611: LD_VAR 0 1
21615: PPUSH
21616: LD_EXP 91
21620: PUSH
21621: LD_VAR 0 5
21625: ARRAY
21626: PUSH
21627: LD_INT 0
21629: PLUS
21630: PPUSH
21631: CALL_OW 505
// end ;
21635: LD_VAR 0 3
21639: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21640: LD_INT 0
21642: PPUSH
21643: PPUSH
21644: PPUSH
21645: PPUSH
// if not hack in hackTanks then
21646: LD_VAR 0 1
21650: PUSH
21651: LD_EXP 90
21655: IN
21656: NOT
21657: IFFALSE 21661
// exit ;
21659: GO 21901
// index := GetElementIndex ( hackTanks , hack ) ;
21661: LD_ADDR_VAR 0 4
21665: PUSH
21666: LD_EXP 90
21670: PPUSH
21671: LD_VAR 0 1
21675: PPUSH
21676: CALL 28762 0 2
21680: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21681: LD_ADDR_VAR 0 3
21685: PUSH
21686: DOUBLE
21687: LD_EXP 91
21691: PUSH
21692: LD_VAR 0 4
21696: ARRAY
21697: INC
21698: ST_TO_ADDR
21699: LD_INT 1
21701: PUSH
21702: FOR_DOWNTO
21703: IFFALSE 21875
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21705: LD_ADDR_VAR 0 5
21709: PUSH
21710: LD_EXP 91
21714: PUSH
21715: LD_VAR 0 4
21719: ARRAY
21720: PUSH
21721: LD_VAR 0 3
21725: ARRAY
21726: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21727: LD_VAR 0 5
21731: PUSH
21732: LD_INT 1
21734: ARRAY
21735: PPUSH
21736: CALL_OW 302
21740: NOT
21741: PUSH
21742: LD_VAR 0 5
21746: PUSH
21747: LD_INT 1
21749: ARRAY
21750: PPUSH
21751: CALL_OW 255
21755: PUSH
21756: LD_VAR 0 1
21760: PPUSH
21761: CALL_OW 255
21765: NONEQUAL
21766: OR
21767: IFFALSE 21873
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21769: LD_VAR 0 5
21773: PUSH
21774: LD_INT 1
21776: ARRAY
21777: PPUSH
21778: CALL_OW 305
21782: PUSH
21783: LD_VAR 0 5
21787: PUSH
21788: LD_INT 1
21790: ARRAY
21791: PPUSH
21792: CALL_OW 255
21796: PUSH
21797: LD_VAR 0 1
21801: PPUSH
21802: CALL_OW 255
21806: EQUAL
21807: AND
21808: IFFALSE 21832
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21810: LD_VAR 0 5
21814: PUSH
21815: LD_INT 1
21817: ARRAY
21818: PPUSH
21819: LD_VAR 0 5
21823: PUSH
21824: LD_INT 2
21826: ARRAY
21827: PPUSH
21828: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21832: LD_ADDR_EXP 91
21836: PUSH
21837: LD_EXP 91
21841: PPUSH
21842: LD_VAR 0 4
21846: PPUSH
21847: LD_EXP 91
21851: PUSH
21852: LD_VAR 0 4
21856: ARRAY
21857: PPUSH
21858: LD_VAR 0 3
21862: PPUSH
21863: CALL_OW 3
21867: PPUSH
21868: CALL_OW 1
21872: ST_TO_ADDR
// end ; end ;
21873: GO 21702
21875: POP
21876: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21877: LD_VAR 0 1
21881: PPUSH
21882: LD_EXP 91
21886: PUSH
21887: LD_VAR 0 4
21891: ARRAY
21892: PUSH
21893: LD_INT 0
21895: PLUS
21896: PPUSH
21897: CALL_OW 505
// end ;
21901: LD_VAR 0 2
21905: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21906: LD_INT 0
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
// if not hack in hackTanks then
21912: LD_VAR 0 1
21916: PUSH
21917: LD_EXP 90
21921: IN
21922: NOT
21923: IFFALSE 21927
// exit ;
21925: GO 22012
// index := GetElementIndex ( hackTanks , hack ) ;
21927: LD_ADDR_VAR 0 5
21931: PUSH
21932: LD_EXP 90
21936: PPUSH
21937: LD_VAR 0 1
21941: PPUSH
21942: CALL 28762 0 2
21946: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21947: LD_ADDR_VAR 0 4
21951: PUSH
21952: DOUBLE
21953: LD_INT 1
21955: DEC
21956: ST_TO_ADDR
21957: LD_EXP 91
21961: PUSH
21962: LD_VAR 0 5
21966: ARRAY
21967: PUSH
21968: FOR_TO
21969: IFFALSE 22010
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21971: LD_EXP 91
21975: PUSH
21976: LD_VAR 0 5
21980: ARRAY
21981: PUSH
21982: LD_VAR 0 4
21986: ARRAY
21987: PUSH
21988: LD_INT 1
21990: ARRAY
21991: PUSH
21992: LD_VAR 0 2
21996: EQUAL
21997: IFFALSE 22008
// KillUnit ( vehicle ) ;
21999: LD_VAR 0 2
22003: PPUSH
22004: CALL_OW 66
22008: GO 21968
22010: POP
22011: POP
// end ;
22012: LD_VAR 0 3
22016: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22017: LD_EXP 95
22021: NOT
22022: IFFALSE 22057
22024: GO 22026
22026: DISABLE
// begin initMiner := true ;
22027: LD_ADDR_EXP 95
22031: PUSH
22032: LD_INT 1
22034: ST_TO_ADDR
// minersList := [ ] ;
22035: LD_ADDR_EXP 96
22039: PUSH
22040: EMPTY
22041: ST_TO_ADDR
// minerMinesList := [ ] ;
22042: LD_ADDR_EXP 97
22046: PUSH
22047: EMPTY
22048: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22049: LD_ADDR_EXP 98
22053: PUSH
22054: LD_INT 5
22056: ST_TO_ADDR
// end ;
22057: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22058: LD_EXP 95
22062: PUSH
22063: LD_INT 34
22065: PUSH
22066: LD_EXP 21
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PPUSH
22075: CALL_OW 69
22079: AND
22080: IFFALSE 22543
22082: GO 22084
22084: DISABLE
22085: LD_INT 0
22087: PPUSH
22088: PPUSH
22089: PPUSH
22090: PPUSH
// begin enable ;
22091: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22092: LD_ADDR_VAR 0 1
22096: PUSH
22097: LD_INT 34
22099: PUSH
22100: LD_EXP 21
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 69
22113: PUSH
22114: FOR_IN
22115: IFFALSE 22187
// begin if not i in minersList then
22117: LD_VAR 0 1
22121: PUSH
22122: LD_EXP 96
22126: IN
22127: NOT
22128: IFFALSE 22185
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22130: LD_ADDR_EXP 96
22134: PUSH
22135: LD_EXP 96
22139: PPUSH
22140: LD_EXP 96
22144: PUSH
22145: LD_INT 1
22147: PLUS
22148: PPUSH
22149: LD_VAR 0 1
22153: PPUSH
22154: CALL_OW 1
22158: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22159: LD_ADDR_EXP 97
22163: PUSH
22164: LD_EXP 97
22168: PPUSH
22169: LD_EXP 97
22173: PUSH
22174: LD_INT 1
22176: PLUS
22177: PPUSH
22178: EMPTY
22179: PPUSH
22180: CALL_OW 1
22184: ST_TO_ADDR
// end end ;
22185: GO 22114
22187: POP
22188: POP
// for i := minerMinesList downto 1 do
22189: LD_ADDR_VAR 0 1
22193: PUSH
22194: DOUBLE
22195: LD_EXP 97
22199: INC
22200: ST_TO_ADDR
22201: LD_INT 1
22203: PUSH
22204: FOR_DOWNTO
22205: IFFALSE 22541
// begin if IsLive ( minersList [ i ] ) then
22207: LD_EXP 96
22211: PUSH
22212: LD_VAR 0 1
22216: ARRAY
22217: PPUSH
22218: CALL_OW 300
22222: IFFALSE 22250
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22224: LD_EXP 96
22228: PUSH
22229: LD_VAR 0 1
22233: ARRAY
22234: PPUSH
22235: LD_EXP 97
22239: PUSH
22240: LD_VAR 0 1
22244: ARRAY
22245: PPUSH
22246: CALL_OW 505
// if not minerMinesList [ i ] then
22250: LD_EXP 97
22254: PUSH
22255: LD_VAR 0 1
22259: ARRAY
22260: NOT
22261: IFFALSE 22265
// continue ;
22263: GO 22204
// for j := minerMinesList [ i ] downto 1 do
22265: LD_ADDR_VAR 0 2
22269: PUSH
22270: DOUBLE
22271: LD_EXP 97
22275: PUSH
22276: LD_VAR 0 1
22280: ARRAY
22281: INC
22282: ST_TO_ADDR
22283: LD_INT 1
22285: PUSH
22286: FOR_DOWNTO
22287: IFFALSE 22537
// begin side := GetSide ( minersList [ i ] ) ;
22289: LD_ADDR_VAR 0 3
22293: PUSH
22294: LD_EXP 96
22298: PUSH
22299: LD_VAR 0 1
22303: ARRAY
22304: PPUSH
22305: CALL_OW 255
22309: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22310: LD_ADDR_VAR 0 4
22314: PUSH
22315: LD_EXP 97
22319: PUSH
22320: LD_VAR 0 1
22324: ARRAY
22325: PUSH
22326: LD_VAR 0 2
22330: ARRAY
22331: PUSH
22332: LD_INT 1
22334: ARRAY
22335: PPUSH
22336: LD_EXP 97
22340: PUSH
22341: LD_VAR 0 1
22345: ARRAY
22346: PUSH
22347: LD_VAR 0 2
22351: ARRAY
22352: PUSH
22353: LD_INT 2
22355: ARRAY
22356: PPUSH
22357: CALL_OW 428
22361: ST_TO_ADDR
// if not tmp then
22362: LD_VAR 0 4
22366: NOT
22367: IFFALSE 22371
// continue ;
22369: GO 22286
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22371: LD_VAR 0 4
22375: PUSH
22376: LD_INT 81
22378: PUSH
22379: LD_VAR 0 3
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PPUSH
22388: CALL_OW 69
22392: IN
22393: PUSH
22394: LD_EXP 97
22398: PUSH
22399: LD_VAR 0 1
22403: ARRAY
22404: PUSH
22405: LD_VAR 0 2
22409: ARRAY
22410: PUSH
22411: LD_INT 1
22413: ARRAY
22414: PPUSH
22415: LD_EXP 97
22419: PUSH
22420: LD_VAR 0 1
22424: ARRAY
22425: PUSH
22426: LD_VAR 0 2
22430: ARRAY
22431: PUSH
22432: LD_INT 2
22434: ARRAY
22435: PPUSH
22436: CALL_OW 458
22440: AND
22441: IFFALSE 22535
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22443: LD_EXP 97
22447: PUSH
22448: LD_VAR 0 1
22452: ARRAY
22453: PUSH
22454: LD_VAR 0 2
22458: ARRAY
22459: PUSH
22460: LD_INT 1
22462: ARRAY
22463: PPUSH
22464: LD_EXP 97
22468: PUSH
22469: LD_VAR 0 1
22473: ARRAY
22474: PUSH
22475: LD_VAR 0 2
22479: ARRAY
22480: PUSH
22481: LD_INT 2
22483: ARRAY
22484: PPUSH
22485: LD_VAR 0 3
22489: PPUSH
22490: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22494: LD_ADDR_EXP 97
22498: PUSH
22499: LD_EXP 97
22503: PPUSH
22504: LD_VAR 0 1
22508: PPUSH
22509: LD_EXP 97
22513: PUSH
22514: LD_VAR 0 1
22518: ARRAY
22519: PPUSH
22520: LD_VAR 0 2
22524: PPUSH
22525: CALL_OW 3
22529: PPUSH
22530: CALL_OW 1
22534: ST_TO_ADDR
// end ; end ;
22535: GO 22286
22537: POP
22538: POP
// end ;
22539: GO 22204
22541: POP
22542: POP
// end ;
22543: PPOPN 4
22545: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22546: LD_INT 0
22548: PPUSH
22549: PPUSH
// result := false ;
22550: LD_ADDR_VAR 0 4
22554: PUSH
22555: LD_INT 0
22557: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22558: LD_VAR 0 1
22562: PPUSH
22563: CALL_OW 264
22567: PUSH
22568: LD_EXP 21
22572: EQUAL
22573: NOT
22574: IFFALSE 22578
// exit ;
22576: GO 22818
// index := GetElementIndex ( minersList , unit ) ;
22578: LD_ADDR_VAR 0 5
22582: PUSH
22583: LD_EXP 96
22587: PPUSH
22588: LD_VAR 0 1
22592: PPUSH
22593: CALL 28762 0 2
22597: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22598: LD_EXP 97
22602: PUSH
22603: LD_VAR 0 5
22607: ARRAY
22608: PUSH
22609: LD_EXP 98
22613: GREATEREQUAL
22614: IFFALSE 22618
// exit ;
22616: GO 22818
// ComMoveXY ( unit , x , y ) ;
22618: LD_VAR 0 1
22622: PPUSH
22623: LD_VAR 0 2
22627: PPUSH
22628: LD_VAR 0 3
22632: PPUSH
22633: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22637: LD_INT 35
22639: PPUSH
22640: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22644: LD_VAR 0 1
22648: PPUSH
22649: LD_VAR 0 2
22653: PPUSH
22654: LD_VAR 0 3
22658: PPUSH
22659: CALL 59159 0 3
22663: NOT
22664: PUSH
22665: LD_VAR 0 1
22669: PPUSH
22670: CALL_OW 314
22674: AND
22675: IFFALSE 22679
// exit ;
22677: GO 22818
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22679: LD_VAR 0 2
22683: PPUSH
22684: LD_VAR 0 3
22688: PPUSH
22689: CALL_OW 428
22693: PUSH
22694: LD_VAR 0 1
22698: EQUAL
22699: PUSH
22700: LD_VAR 0 1
22704: PPUSH
22705: CALL_OW 314
22709: NOT
22710: AND
22711: IFFALSE 22637
// PlaySoundXY ( x , y , PlantMine ) ;
22713: LD_VAR 0 2
22717: PPUSH
22718: LD_VAR 0 3
22722: PPUSH
22723: LD_STRING PlantMine
22725: PPUSH
22726: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22730: LD_VAR 0 2
22734: PPUSH
22735: LD_VAR 0 3
22739: PPUSH
22740: LD_VAR 0 1
22744: PPUSH
22745: CALL_OW 255
22749: PPUSH
22750: LD_INT 0
22752: PPUSH
22753: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22757: LD_ADDR_EXP 97
22761: PUSH
22762: LD_EXP 97
22766: PPUSH
22767: LD_VAR 0 5
22771: PUSH
22772: LD_EXP 97
22776: PUSH
22777: LD_VAR 0 5
22781: ARRAY
22782: PUSH
22783: LD_INT 1
22785: PLUS
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PPUSH
22791: LD_VAR 0 2
22795: PUSH
22796: LD_VAR 0 3
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PPUSH
22805: CALL 28977 0 3
22809: ST_TO_ADDR
// result := true ;
22810: LD_ADDR_VAR 0 4
22814: PUSH
22815: LD_INT 1
22817: ST_TO_ADDR
// end ;
22818: LD_VAR 0 4
22822: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22823: LD_INT 0
22825: PPUSH
22826: PPUSH
22827: PPUSH
// if not unit in minersList then
22828: LD_VAR 0 1
22832: PUSH
22833: LD_EXP 96
22837: IN
22838: NOT
22839: IFFALSE 22843
// exit ;
22841: GO 23235
// index := GetElementIndex ( minersList , unit ) ;
22843: LD_ADDR_VAR 0 6
22847: PUSH
22848: LD_EXP 96
22852: PPUSH
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL 28762 0 2
22862: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22863: LD_ADDR_VAR 0 5
22867: PUSH
22868: DOUBLE
22869: LD_EXP 97
22873: PUSH
22874: LD_VAR 0 6
22878: ARRAY
22879: INC
22880: ST_TO_ADDR
22881: LD_INT 1
22883: PUSH
22884: FOR_DOWNTO
22885: IFFALSE 23046
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22887: LD_EXP 97
22891: PUSH
22892: LD_VAR 0 6
22896: ARRAY
22897: PUSH
22898: LD_VAR 0 5
22902: ARRAY
22903: PUSH
22904: LD_INT 1
22906: ARRAY
22907: PUSH
22908: LD_VAR 0 2
22912: EQUAL
22913: PUSH
22914: LD_EXP 97
22918: PUSH
22919: LD_VAR 0 6
22923: ARRAY
22924: PUSH
22925: LD_VAR 0 5
22929: ARRAY
22930: PUSH
22931: LD_INT 2
22933: ARRAY
22934: PUSH
22935: LD_VAR 0 3
22939: EQUAL
22940: AND
22941: IFFALSE 23044
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22943: LD_EXP 97
22947: PUSH
22948: LD_VAR 0 6
22952: ARRAY
22953: PUSH
22954: LD_VAR 0 5
22958: ARRAY
22959: PUSH
22960: LD_INT 1
22962: ARRAY
22963: PPUSH
22964: LD_EXP 97
22968: PUSH
22969: LD_VAR 0 6
22973: ARRAY
22974: PUSH
22975: LD_VAR 0 5
22979: ARRAY
22980: PUSH
22981: LD_INT 2
22983: ARRAY
22984: PPUSH
22985: LD_VAR 0 1
22989: PPUSH
22990: CALL_OW 255
22994: PPUSH
22995: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22999: LD_ADDR_EXP 97
23003: PUSH
23004: LD_EXP 97
23008: PPUSH
23009: LD_VAR 0 6
23013: PPUSH
23014: LD_EXP 97
23018: PUSH
23019: LD_VAR 0 6
23023: ARRAY
23024: PPUSH
23025: LD_VAR 0 5
23029: PPUSH
23030: CALL_OW 3
23034: PPUSH
23035: CALL_OW 1
23039: ST_TO_ADDR
// exit ;
23040: POP
23041: POP
23042: GO 23235
// end ; end ;
23044: GO 22884
23046: POP
23047: POP
// for i := minerMinesList [ index ] downto 1 do
23048: LD_ADDR_VAR 0 5
23052: PUSH
23053: DOUBLE
23054: LD_EXP 97
23058: PUSH
23059: LD_VAR 0 6
23063: ARRAY
23064: INC
23065: ST_TO_ADDR
23066: LD_INT 1
23068: PUSH
23069: FOR_DOWNTO
23070: IFFALSE 23233
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23072: LD_EXP 97
23076: PUSH
23077: LD_VAR 0 6
23081: ARRAY
23082: PUSH
23083: LD_VAR 0 5
23087: ARRAY
23088: PUSH
23089: LD_INT 1
23091: ARRAY
23092: PPUSH
23093: LD_EXP 97
23097: PUSH
23098: LD_VAR 0 6
23102: ARRAY
23103: PUSH
23104: LD_VAR 0 5
23108: ARRAY
23109: PUSH
23110: LD_INT 2
23112: ARRAY
23113: PPUSH
23114: LD_VAR 0 2
23118: PPUSH
23119: LD_VAR 0 3
23123: PPUSH
23124: CALL_OW 298
23128: PUSH
23129: LD_INT 6
23131: LESS
23132: IFFALSE 23231
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23134: LD_EXP 97
23138: PUSH
23139: LD_VAR 0 6
23143: ARRAY
23144: PUSH
23145: LD_VAR 0 5
23149: ARRAY
23150: PUSH
23151: LD_INT 1
23153: ARRAY
23154: PPUSH
23155: LD_EXP 97
23159: PUSH
23160: LD_VAR 0 6
23164: ARRAY
23165: PUSH
23166: LD_VAR 0 5
23170: ARRAY
23171: PUSH
23172: LD_INT 2
23174: ARRAY
23175: PPUSH
23176: LD_VAR 0 1
23180: PPUSH
23181: CALL_OW 255
23185: PPUSH
23186: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23190: LD_ADDR_EXP 97
23194: PUSH
23195: LD_EXP 97
23199: PPUSH
23200: LD_VAR 0 6
23204: PPUSH
23205: LD_EXP 97
23209: PUSH
23210: LD_VAR 0 6
23214: ARRAY
23215: PPUSH
23216: LD_VAR 0 5
23220: PPUSH
23221: CALL_OW 3
23225: PPUSH
23226: CALL_OW 1
23230: ST_TO_ADDR
// end ; end ;
23231: GO 23069
23233: POP
23234: POP
// end ;
23235: LD_VAR 0 4
23239: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23240: LD_INT 0
23242: PPUSH
23243: PPUSH
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
23250: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23251: LD_VAR 0 1
23255: PPUSH
23256: CALL_OW 264
23260: PUSH
23261: LD_EXP 21
23265: EQUAL
23266: NOT
23267: PUSH
23268: LD_VAR 0 1
23272: PUSH
23273: LD_EXP 96
23277: IN
23278: NOT
23279: OR
23280: IFFALSE 23284
// exit ;
23282: GO 23606
// index := GetElementIndex ( minersList , unit ) ;
23284: LD_ADDR_VAR 0 6
23288: PUSH
23289: LD_EXP 96
23293: PPUSH
23294: LD_VAR 0 1
23298: PPUSH
23299: CALL 28762 0 2
23303: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23304: LD_ADDR_VAR 0 8
23308: PUSH
23309: LD_EXP 98
23313: PUSH
23314: LD_EXP 97
23318: PUSH
23319: LD_VAR 0 6
23323: ARRAY
23324: MINUS
23325: ST_TO_ADDR
// if not minesFreeAmount then
23326: LD_VAR 0 8
23330: NOT
23331: IFFALSE 23335
// exit ;
23333: GO 23606
// tmp := [ ] ;
23335: LD_ADDR_VAR 0 7
23339: PUSH
23340: EMPTY
23341: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23342: LD_ADDR_VAR 0 5
23346: PUSH
23347: DOUBLE
23348: LD_INT 1
23350: DEC
23351: ST_TO_ADDR
23352: LD_VAR 0 8
23356: PUSH
23357: FOR_TO
23358: IFFALSE 23553
// begin _d := rand ( 0 , 5 ) ;
23360: LD_ADDR_VAR 0 11
23364: PUSH
23365: LD_INT 0
23367: PPUSH
23368: LD_INT 5
23370: PPUSH
23371: CALL_OW 12
23375: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23376: LD_ADDR_VAR 0 12
23380: PUSH
23381: LD_INT 2
23383: PPUSH
23384: LD_INT 6
23386: PPUSH
23387: CALL_OW 12
23391: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23392: LD_ADDR_VAR 0 9
23396: PUSH
23397: LD_VAR 0 2
23401: PPUSH
23402: LD_VAR 0 11
23406: PPUSH
23407: LD_VAR 0 12
23411: PPUSH
23412: CALL_OW 272
23416: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23417: LD_ADDR_VAR 0 10
23421: PUSH
23422: LD_VAR 0 3
23426: PPUSH
23427: LD_VAR 0 11
23431: PPUSH
23432: LD_VAR 0 12
23436: PPUSH
23437: CALL_OW 273
23441: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23442: LD_VAR 0 9
23446: PPUSH
23447: LD_VAR 0 10
23451: PPUSH
23452: CALL_OW 488
23456: PUSH
23457: LD_VAR 0 9
23461: PUSH
23462: LD_VAR 0 10
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_VAR 0 7
23475: IN
23476: NOT
23477: AND
23478: PUSH
23479: LD_VAR 0 9
23483: PPUSH
23484: LD_VAR 0 10
23488: PPUSH
23489: CALL_OW 458
23493: NOT
23494: AND
23495: IFFALSE 23537
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23497: LD_ADDR_VAR 0 7
23501: PUSH
23502: LD_VAR 0 7
23506: PPUSH
23507: LD_VAR 0 7
23511: PUSH
23512: LD_INT 1
23514: PLUS
23515: PPUSH
23516: LD_VAR 0 9
23520: PUSH
23521: LD_VAR 0 10
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PPUSH
23530: CALL_OW 1
23534: ST_TO_ADDR
23535: GO 23551
// i := i - 1 ;
23537: LD_ADDR_VAR 0 5
23541: PUSH
23542: LD_VAR 0 5
23546: PUSH
23547: LD_INT 1
23549: MINUS
23550: ST_TO_ADDR
// end ;
23551: GO 23357
23553: POP
23554: POP
// for i in tmp do
23555: LD_ADDR_VAR 0 5
23559: PUSH
23560: LD_VAR 0 7
23564: PUSH
23565: FOR_IN
23566: IFFALSE 23604
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23568: LD_VAR 0 1
23572: PPUSH
23573: LD_VAR 0 5
23577: PUSH
23578: LD_INT 1
23580: ARRAY
23581: PPUSH
23582: LD_VAR 0 5
23586: PUSH
23587: LD_INT 2
23589: ARRAY
23590: PPUSH
23591: CALL 22546 0 3
23595: NOT
23596: IFFALSE 23602
// exit ;
23598: POP
23599: POP
23600: GO 23606
23602: GO 23565
23604: POP
23605: POP
// end ;
23606: LD_VAR 0 4
23610: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23611: LD_INT 0
23613: PPUSH
23614: PPUSH
23615: PPUSH
23616: PPUSH
23617: PPUSH
23618: PPUSH
23619: PPUSH
// if not GetClass ( unit ) = class_sniper then
23620: LD_VAR 0 1
23624: PPUSH
23625: CALL_OW 257
23629: PUSH
23630: LD_INT 5
23632: EQUAL
23633: NOT
23634: IFFALSE 23638
// exit ;
23636: GO 24026
// dist := 8 ;
23638: LD_ADDR_VAR 0 5
23642: PUSH
23643: LD_INT 8
23645: ST_TO_ADDR
// viewRange := 12 ;
23646: LD_ADDR_VAR 0 7
23650: PUSH
23651: LD_INT 12
23653: ST_TO_ADDR
// side := GetSide ( unit ) ;
23654: LD_ADDR_VAR 0 6
23658: PUSH
23659: LD_VAR 0 1
23663: PPUSH
23664: CALL_OW 255
23668: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23669: LD_INT 61
23671: PPUSH
23672: LD_VAR 0 6
23676: PPUSH
23677: CALL_OW 321
23681: PUSH
23682: LD_INT 2
23684: EQUAL
23685: IFFALSE 23695
// viewRange := 16 ;
23687: LD_ADDR_VAR 0 7
23691: PUSH
23692: LD_INT 16
23694: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23695: LD_VAR 0 1
23699: PPUSH
23700: LD_VAR 0 2
23704: PPUSH
23705: LD_VAR 0 3
23709: PPUSH
23710: CALL_OW 297
23714: PUSH
23715: LD_VAR 0 5
23719: GREATER
23720: IFFALSE 23799
// begin ComMoveXY ( unit , x , y ) ;
23722: LD_VAR 0 1
23726: PPUSH
23727: LD_VAR 0 2
23731: PPUSH
23732: LD_VAR 0 3
23736: PPUSH
23737: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23741: LD_INT 35
23743: PPUSH
23744: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23748: LD_VAR 0 1
23752: PPUSH
23753: LD_VAR 0 2
23757: PPUSH
23758: LD_VAR 0 3
23762: PPUSH
23763: CALL 59159 0 3
23767: NOT
23768: IFFALSE 23772
// exit ;
23770: GO 24026
// until GetDistUnitXY ( unit , x , y ) < dist ;
23772: LD_VAR 0 1
23776: PPUSH
23777: LD_VAR 0 2
23781: PPUSH
23782: LD_VAR 0 3
23786: PPUSH
23787: CALL_OW 297
23791: PUSH
23792: LD_VAR 0 5
23796: LESS
23797: IFFALSE 23741
// end ; ComTurnXY ( unit , x , y ) ;
23799: LD_VAR 0 1
23803: PPUSH
23804: LD_VAR 0 2
23808: PPUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: CALL_OW 118
// wait ( 5 ) ;
23818: LD_INT 5
23820: PPUSH
23821: CALL_OW 67
// _d := GetDir ( unit ) ;
23825: LD_ADDR_VAR 0 10
23829: PUSH
23830: LD_VAR 0 1
23834: PPUSH
23835: CALL_OW 254
23839: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23840: LD_ADDR_VAR 0 8
23844: PUSH
23845: LD_VAR 0 1
23849: PPUSH
23850: CALL_OW 250
23854: PPUSH
23855: LD_VAR 0 10
23859: PPUSH
23860: LD_VAR 0 5
23864: PPUSH
23865: CALL_OW 272
23869: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23870: LD_ADDR_VAR 0 9
23874: PUSH
23875: LD_VAR 0 1
23879: PPUSH
23880: CALL_OW 251
23884: PPUSH
23885: LD_VAR 0 10
23889: PPUSH
23890: LD_VAR 0 5
23894: PPUSH
23895: CALL_OW 273
23899: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23900: LD_VAR 0 8
23904: PPUSH
23905: LD_VAR 0 9
23909: PPUSH
23910: CALL_OW 488
23914: NOT
23915: IFFALSE 23919
// exit ;
23917: GO 24026
// ComAnimCustom ( unit , 1 ) ;
23919: LD_VAR 0 1
23923: PPUSH
23924: LD_INT 1
23926: PPUSH
23927: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23931: LD_VAR 0 8
23935: PPUSH
23936: LD_VAR 0 9
23940: PPUSH
23941: LD_VAR 0 6
23945: PPUSH
23946: LD_VAR 0 7
23950: PPUSH
23951: CALL_OW 330
// repeat wait ( 1 ) ;
23955: LD_INT 1
23957: PPUSH
23958: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23962: LD_VAR 0 1
23966: PPUSH
23967: CALL_OW 316
23971: PUSH
23972: LD_VAR 0 1
23976: PPUSH
23977: CALL_OW 314
23981: OR
23982: PUSH
23983: LD_VAR 0 1
23987: PPUSH
23988: CALL_OW 302
23992: NOT
23993: OR
23994: PUSH
23995: LD_VAR 0 1
23999: PPUSH
24000: CALL_OW 301
24004: OR
24005: IFFALSE 23955
// RemoveSeeing ( _x , _y , side ) ;
24007: LD_VAR 0 8
24011: PPUSH
24012: LD_VAR 0 9
24016: PPUSH
24017: LD_VAR 0 6
24021: PPUSH
24022: CALL_OW 331
// end ; end_of_file
24026: LD_VAR 0 4
24030: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24031: LD_INT 0
24033: PPUSH
24034: PPUSH
// if exist_mode then
24035: LD_VAR 0 2
24039: IFFALSE 24064
// unit := CreateCharacter ( prefix & ident ) else
24041: LD_ADDR_VAR 0 5
24045: PUSH
24046: LD_VAR 0 3
24050: PUSH
24051: LD_VAR 0 1
24055: STR
24056: PPUSH
24057: CALL_OW 34
24061: ST_TO_ADDR
24062: GO 24079
// unit := NewCharacter ( ident ) ;
24064: LD_ADDR_VAR 0 5
24068: PUSH
24069: LD_VAR 0 1
24073: PPUSH
24074: CALL_OW 25
24078: ST_TO_ADDR
// result := unit ;
24079: LD_ADDR_VAR 0 4
24083: PUSH
24084: LD_VAR 0 5
24088: ST_TO_ADDR
// end ;
24089: LD_VAR 0 4
24093: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24094: LD_INT 0
24096: PPUSH
24097: PPUSH
// if not side or not nation then
24098: LD_VAR 0 1
24102: NOT
24103: PUSH
24104: LD_VAR 0 2
24108: NOT
24109: OR
24110: IFFALSE 24114
// exit ;
24112: GO 24878
// case nation of nation_american :
24114: LD_VAR 0 2
24118: PUSH
24119: LD_INT 1
24121: DOUBLE
24122: EQUAL
24123: IFTRUE 24127
24125: GO 24341
24127: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24128: LD_ADDR_VAR 0 4
24132: PUSH
24133: LD_INT 35
24135: PUSH
24136: LD_INT 45
24138: PUSH
24139: LD_INT 46
24141: PUSH
24142: LD_INT 47
24144: PUSH
24145: LD_INT 82
24147: PUSH
24148: LD_INT 83
24150: PUSH
24151: LD_INT 84
24153: PUSH
24154: LD_INT 85
24156: PUSH
24157: LD_INT 86
24159: PUSH
24160: LD_INT 1
24162: PUSH
24163: LD_INT 2
24165: PUSH
24166: LD_INT 6
24168: PUSH
24169: LD_INT 15
24171: PUSH
24172: LD_INT 16
24174: PUSH
24175: LD_INT 7
24177: PUSH
24178: LD_INT 12
24180: PUSH
24181: LD_INT 13
24183: PUSH
24184: LD_INT 10
24186: PUSH
24187: LD_INT 14
24189: PUSH
24190: LD_INT 20
24192: PUSH
24193: LD_INT 21
24195: PUSH
24196: LD_INT 22
24198: PUSH
24199: LD_INT 25
24201: PUSH
24202: LD_INT 32
24204: PUSH
24205: LD_INT 27
24207: PUSH
24208: LD_INT 36
24210: PUSH
24211: LD_INT 69
24213: PUSH
24214: LD_INT 39
24216: PUSH
24217: LD_INT 34
24219: PUSH
24220: LD_INT 40
24222: PUSH
24223: LD_INT 48
24225: PUSH
24226: LD_INT 49
24228: PUSH
24229: LD_INT 50
24231: PUSH
24232: LD_INT 51
24234: PUSH
24235: LD_INT 52
24237: PUSH
24238: LD_INT 53
24240: PUSH
24241: LD_INT 54
24243: PUSH
24244: LD_INT 55
24246: PUSH
24247: LD_INT 56
24249: PUSH
24250: LD_INT 57
24252: PUSH
24253: LD_INT 58
24255: PUSH
24256: LD_INT 59
24258: PUSH
24259: LD_INT 60
24261: PUSH
24262: LD_INT 61
24264: PUSH
24265: LD_INT 62
24267: PUSH
24268: LD_INT 80
24270: PUSH
24271: LD_INT 82
24273: PUSH
24274: LD_INT 83
24276: PUSH
24277: LD_INT 84
24279: PUSH
24280: LD_INT 85
24282: PUSH
24283: LD_INT 86
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: ST_TO_ADDR
24339: GO 24802
24341: LD_INT 2
24343: DOUBLE
24344: EQUAL
24345: IFTRUE 24349
24347: GO 24571
24349: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24350: LD_ADDR_VAR 0 4
24354: PUSH
24355: LD_INT 35
24357: PUSH
24358: LD_INT 45
24360: PUSH
24361: LD_INT 46
24363: PUSH
24364: LD_INT 47
24366: PUSH
24367: LD_INT 82
24369: PUSH
24370: LD_INT 83
24372: PUSH
24373: LD_INT 84
24375: PUSH
24376: LD_INT 85
24378: PUSH
24379: LD_INT 87
24381: PUSH
24382: LD_INT 70
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: LD_INT 11
24390: PUSH
24391: LD_INT 3
24393: PUSH
24394: LD_INT 4
24396: PUSH
24397: LD_INT 5
24399: PUSH
24400: LD_INT 6
24402: PUSH
24403: LD_INT 15
24405: PUSH
24406: LD_INT 18
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 17
24414: PUSH
24415: LD_INT 8
24417: PUSH
24418: LD_INT 20
24420: PUSH
24421: LD_INT 21
24423: PUSH
24424: LD_INT 22
24426: PUSH
24427: LD_INT 72
24429: PUSH
24430: LD_INT 26
24432: PUSH
24433: LD_INT 69
24435: PUSH
24436: LD_INT 39
24438: PUSH
24439: LD_INT 40
24441: PUSH
24442: LD_INT 41
24444: PUSH
24445: LD_INT 42
24447: PUSH
24448: LD_INT 43
24450: PUSH
24451: LD_INT 48
24453: PUSH
24454: LD_INT 49
24456: PUSH
24457: LD_INT 50
24459: PUSH
24460: LD_INT 51
24462: PUSH
24463: LD_INT 52
24465: PUSH
24466: LD_INT 53
24468: PUSH
24469: LD_INT 54
24471: PUSH
24472: LD_INT 55
24474: PUSH
24475: LD_INT 56
24477: PUSH
24478: LD_INT 60
24480: PUSH
24481: LD_INT 61
24483: PUSH
24484: LD_INT 62
24486: PUSH
24487: LD_INT 66
24489: PUSH
24490: LD_INT 67
24492: PUSH
24493: LD_INT 68
24495: PUSH
24496: LD_INT 81
24498: PUSH
24499: LD_INT 82
24501: PUSH
24502: LD_INT 83
24504: PUSH
24505: LD_INT 84
24507: PUSH
24508: LD_INT 85
24510: PUSH
24511: LD_INT 87
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: ST_TO_ADDR
24569: GO 24802
24571: LD_INT 3
24573: DOUBLE
24574: EQUAL
24575: IFTRUE 24579
24577: GO 24801
24579: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24580: LD_ADDR_VAR 0 4
24584: PUSH
24585: LD_INT 46
24587: PUSH
24588: LD_INT 47
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 82
24599: PUSH
24600: LD_INT 83
24602: PUSH
24603: LD_INT 84
24605: PUSH
24606: LD_INT 85
24608: PUSH
24609: LD_INT 86
24611: PUSH
24612: LD_INT 11
24614: PUSH
24615: LD_INT 9
24617: PUSH
24618: LD_INT 20
24620: PUSH
24621: LD_INT 19
24623: PUSH
24624: LD_INT 21
24626: PUSH
24627: LD_INT 24
24629: PUSH
24630: LD_INT 22
24632: PUSH
24633: LD_INT 25
24635: PUSH
24636: LD_INT 28
24638: PUSH
24639: LD_INT 29
24641: PUSH
24642: LD_INT 30
24644: PUSH
24645: LD_INT 31
24647: PUSH
24648: LD_INT 37
24650: PUSH
24651: LD_INT 38
24653: PUSH
24654: LD_INT 32
24656: PUSH
24657: LD_INT 27
24659: PUSH
24660: LD_INT 33
24662: PUSH
24663: LD_INT 69
24665: PUSH
24666: LD_INT 39
24668: PUSH
24669: LD_INT 34
24671: PUSH
24672: LD_INT 40
24674: PUSH
24675: LD_INT 71
24677: PUSH
24678: LD_INT 23
24680: PUSH
24681: LD_INT 44
24683: PUSH
24684: LD_INT 48
24686: PUSH
24687: LD_INT 49
24689: PUSH
24690: LD_INT 50
24692: PUSH
24693: LD_INT 51
24695: PUSH
24696: LD_INT 52
24698: PUSH
24699: LD_INT 53
24701: PUSH
24702: LD_INT 54
24704: PUSH
24705: LD_INT 55
24707: PUSH
24708: LD_INT 56
24710: PUSH
24711: LD_INT 57
24713: PUSH
24714: LD_INT 58
24716: PUSH
24717: LD_INT 59
24719: PUSH
24720: LD_INT 63
24722: PUSH
24723: LD_INT 64
24725: PUSH
24726: LD_INT 65
24728: PUSH
24729: LD_INT 82
24731: PUSH
24732: LD_INT 83
24734: PUSH
24735: LD_INT 84
24737: PUSH
24738: LD_INT 85
24740: PUSH
24741: LD_INT 86
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: ST_TO_ADDR
24799: GO 24802
24801: POP
// if state > - 1 and state < 3 then
24802: LD_VAR 0 3
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: GREATER
24811: PUSH
24812: LD_VAR 0 3
24816: PUSH
24817: LD_INT 3
24819: LESS
24820: AND
24821: IFFALSE 24878
// for i in result do
24823: LD_ADDR_VAR 0 5
24827: PUSH
24828: LD_VAR 0 4
24832: PUSH
24833: FOR_IN
24834: IFFALSE 24876
// if GetTech ( i , side ) <> state then
24836: LD_VAR 0 5
24840: PPUSH
24841: LD_VAR 0 1
24845: PPUSH
24846: CALL_OW 321
24850: PUSH
24851: LD_VAR 0 3
24855: NONEQUAL
24856: IFFALSE 24874
// result := result diff i ;
24858: LD_ADDR_VAR 0 4
24862: PUSH
24863: LD_VAR 0 4
24867: PUSH
24868: LD_VAR 0 5
24872: DIFF
24873: ST_TO_ADDR
24874: GO 24833
24876: POP
24877: POP
// end ;
24878: LD_VAR 0 4
24882: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24883: LD_INT 0
24885: PPUSH
24886: PPUSH
24887: PPUSH
// result := true ;
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_INT 1
24895: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24896: LD_ADDR_VAR 0 5
24900: PUSH
24901: LD_VAR 0 2
24905: PPUSH
24906: CALL_OW 480
24910: ST_TO_ADDR
// if not tmp then
24911: LD_VAR 0 5
24915: NOT
24916: IFFALSE 24920
// exit ;
24918: GO 24969
// for i in tmp do
24920: LD_ADDR_VAR 0 4
24924: PUSH
24925: LD_VAR 0 5
24929: PUSH
24930: FOR_IN
24931: IFFALSE 24967
// if GetTech ( i , side ) <> state_researched then
24933: LD_VAR 0 4
24937: PPUSH
24938: LD_VAR 0 1
24942: PPUSH
24943: CALL_OW 321
24947: PUSH
24948: LD_INT 2
24950: NONEQUAL
24951: IFFALSE 24965
// begin result := false ;
24953: LD_ADDR_VAR 0 3
24957: PUSH
24958: LD_INT 0
24960: ST_TO_ADDR
// exit ;
24961: POP
24962: POP
24963: GO 24969
// end ;
24965: GO 24930
24967: POP
24968: POP
// end ;
24969: LD_VAR 0 3
24973: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24974: LD_INT 0
24976: PPUSH
24977: PPUSH
24978: PPUSH
24979: PPUSH
24980: PPUSH
24981: PPUSH
24982: PPUSH
24983: PPUSH
24984: PPUSH
24985: PPUSH
24986: PPUSH
24987: PPUSH
24988: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24989: LD_VAR 0 1
24993: NOT
24994: PUSH
24995: LD_VAR 0 1
24999: PPUSH
25000: CALL_OW 257
25004: PUSH
25005: LD_INT 9
25007: NONEQUAL
25008: OR
25009: IFFALSE 25013
// exit ;
25011: GO 25586
// side := GetSide ( unit ) ;
25013: LD_ADDR_VAR 0 9
25017: PUSH
25018: LD_VAR 0 1
25022: PPUSH
25023: CALL_OW 255
25027: ST_TO_ADDR
// tech_space := tech_spacanom ;
25028: LD_ADDR_VAR 0 12
25032: PUSH
25033: LD_INT 29
25035: ST_TO_ADDR
// tech_time := tech_taurad ;
25036: LD_ADDR_VAR 0 13
25040: PUSH
25041: LD_INT 28
25043: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25044: LD_ADDR_VAR 0 11
25048: PUSH
25049: LD_VAR 0 1
25053: PPUSH
25054: CALL_OW 310
25058: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25059: LD_VAR 0 11
25063: PPUSH
25064: CALL_OW 247
25068: PUSH
25069: LD_INT 2
25071: EQUAL
25072: IFFALSE 25076
// exit ;
25074: GO 25586
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25076: LD_ADDR_VAR 0 8
25080: PUSH
25081: LD_INT 81
25083: PUSH
25084: LD_VAR 0 9
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 3
25095: PUSH
25096: LD_INT 21
25098: PUSH
25099: LD_INT 3
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PPUSH
25114: CALL_OW 69
25118: ST_TO_ADDR
// if not tmp then
25119: LD_VAR 0 8
25123: NOT
25124: IFFALSE 25128
// exit ;
25126: GO 25586
// if in_unit then
25128: LD_VAR 0 11
25132: IFFALSE 25156
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25134: LD_ADDR_VAR 0 10
25138: PUSH
25139: LD_VAR 0 8
25143: PPUSH
25144: LD_VAR 0 11
25148: PPUSH
25149: CALL_OW 74
25153: ST_TO_ADDR
25154: GO 25176
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25156: LD_ADDR_VAR 0 10
25160: PUSH
25161: LD_VAR 0 8
25165: PPUSH
25166: LD_VAR 0 1
25170: PPUSH
25171: CALL_OW 74
25175: ST_TO_ADDR
// if not enemy then
25176: LD_VAR 0 10
25180: NOT
25181: IFFALSE 25185
// exit ;
25183: GO 25586
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25185: LD_VAR 0 11
25189: PUSH
25190: LD_VAR 0 11
25194: PPUSH
25195: LD_VAR 0 10
25199: PPUSH
25200: CALL_OW 296
25204: PUSH
25205: LD_INT 13
25207: GREATER
25208: AND
25209: PUSH
25210: LD_VAR 0 1
25214: PPUSH
25215: LD_VAR 0 10
25219: PPUSH
25220: CALL_OW 296
25224: PUSH
25225: LD_INT 12
25227: GREATER
25228: OR
25229: IFFALSE 25233
// exit ;
25231: GO 25586
// missile := [ 1 ] ;
25233: LD_ADDR_VAR 0 14
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: EMPTY
25242: LIST
25243: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25244: LD_VAR 0 9
25248: PPUSH
25249: LD_VAR 0 12
25253: PPUSH
25254: CALL_OW 325
25258: IFFALSE 25287
// missile := Insert ( missile , missile + 1 , 2 ) ;
25260: LD_ADDR_VAR 0 14
25264: PUSH
25265: LD_VAR 0 14
25269: PPUSH
25270: LD_VAR 0 14
25274: PUSH
25275: LD_INT 1
25277: PLUS
25278: PPUSH
25279: LD_INT 2
25281: PPUSH
25282: CALL_OW 2
25286: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25287: LD_VAR 0 9
25291: PPUSH
25292: LD_VAR 0 13
25296: PPUSH
25297: CALL_OW 325
25301: PUSH
25302: LD_VAR 0 10
25306: PPUSH
25307: CALL_OW 255
25311: PPUSH
25312: LD_VAR 0 13
25316: PPUSH
25317: CALL_OW 325
25321: NOT
25322: AND
25323: IFFALSE 25352
// missile := Insert ( missile , missile + 1 , 3 ) ;
25325: LD_ADDR_VAR 0 14
25329: PUSH
25330: LD_VAR 0 14
25334: PPUSH
25335: LD_VAR 0 14
25339: PUSH
25340: LD_INT 1
25342: PLUS
25343: PPUSH
25344: LD_INT 3
25346: PPUSH
25347: CALL_OW 2
25351: ST_TO_ADDR
// if missile < 2 then
25352: LD_VAR 0 14
25356: PUSH
25357: LD_INT 2
25359: LESS
25360: IFFALSE 25364
// exit ;
25362: GO 25586
// x := GetX ( enemy ) ;
25364: LD_ADDR_VAR 0 4
25368: PUSH
25369: LD_VAR 0 10
25373: PPUSH
25374: CALL_OW 250
25378: ST_TO_ADDR
// y := GetY ( enemy ) ;
25379: LD_ADDR_VAR 0 5
25383: PUSH
25384: LD_VAR 0 10
25388: PPUSH
25389: CALL_OW 251
25393: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25394: LD_ADDR_VAR 0 6
25398: PUSH
25399: LD_VAR 0 4
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PPUSH
25408: LD_INT 1
25410: PPUSH
25411: CALL_OW 12
25415: PLUS
25416: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25417: LD_ADDR_VAR 0 7
25421: PUSH
25422: LD_VAR 0 5
25426: PUSH
25427: LD_INT 1
25429: NEG
25430: PPUSH
25431: LD_INT 1
25433: PPUSH
25434: CALL_OW 12
25438: PLUS
25439: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25440: LD_VAR 0 6
25444: PPUSH
25445: LD_VAR 0 7
25449: PPUSH
25450: CALL_OW 488
25454: NOT
25455: IFFALSE 25477
// begin _x := x ;
25457: LD_ADDR_VAR 0 6
25461: PUSH
25462: LD_VAR 0 4
25466: ST_TO_ADDR
// _y := y ;
25467: LD_ADDR_VAR 0 7
25471: PUSH
25472: LD_VAR 0 5
25476: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25477: LD_ADDR_VAR 0 3
25481: PUSH
25482: LD_INT 1
25484: PPUSH
25485: LD_VAR 0 14
25489: PPUSH
25490: CALL_OW 12
25494: ST_TO_ADDR
// case i of 1 :
25495: LD_VAR 0 3
25499: PUSH
25500: LD_INT 1
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25525
25508: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25509: LD_VAR 0 1
25513: PPUSH
25514: LD_VAR 0 10
25518: PPUSH
25519: CALL_OW 115
25523: GO 25586
25525: LD_INT 2
25527: DOUBLE
25528: EQUAL
25529: IFTRUE 25533
25531: GO 25555
25533: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25534: LD_VAR 0 1
25538: PPUSH
25539: LD_VAR 0 6
25543: PPUSH
25544: LD_VAR 0 7
25548: PPUSH
25549: CALL_OW 153
25553: GO 25586
25555: LD_INT 3
25557: DOUBLE
25558: EQUAL
25559: IFTRUE 25563
25561: GO 25585
25563: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25564: LD_VAR 0 1
25568: PPUSH
25569: LD_VAR 0 6
25573: PPUSH
25574: LD_VAR 0 7
25578: PPUSH
25579: CALL_OW 154
25583: GO 25586
25585: POP
// end ;
25586: LD_VAR 0 2
25590: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25591: LD_INT 0
25593: PPUSH
25594: PPUSH
25595: PPUSH
25596: PPUSH
25597: PPUSH
25598: PPUSH
// if not unit or not building then
25599: LD_VAR 0 1
25603: NOT
25604: PUSH
25605: LD_VAR 0 2
25609: NOT
25610: OR
25611: IFFALSE 25615
// exit ;
25613: GO 25773
// x := GetX ( building ) ;
25615: LD_ADDR_VAR 0 5
25619: PUSH
25620: LD_VAR 0 2
25624: PPUSH
25625: CALL_OW 250
25629: ST_TO_ADDR
// y := GetY ( building ) ;
25630: LD_ADDR_VAR 0 6
25634: PUSH
25635: LD_VAR 0 2
25639: PPUSH
25640: CALL_OW 251
25644: ST_TO_ADDR
// for i = 0 to 5 do
25645: LD_ADDR_VAR 0 4
25649: PUSH
25650: DOUBLE
25651: LD_INT 0
25653: DEC
25654: ST_TO_ADDR
25655: LD_INT 5
25657: PUSH
25658: FOR_TO
25659: IFFALSE 25771
// begin _x := ShiftX ( x , i , 3 ) ;
25661: LD_ADDR_VAR 0 7
25665: PUSH
25666: LD_VAR 0 5
25670: PPUSH
25671: LD_VAR 0 4
25675: PPUSH
25676: LD_INT 3
25678: PPUSH
25679: CALL_OW 272
25683: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25684: LD_ADDR_VAR 0 8
25688: PUSH
25689: LD_VAR 0 6
25693: PPUSH
25694: LD_VAR 0 4
25698: PPUSH
25699: LD_INT 3
25701: PPUSH
25702: CALL_OW 273
25706: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25707: LD_VAR 0 7
25711: PPUSH
25712: LD_VAR 0 8
25716: PPUSH
25717: CALL_OW 488
25721: NOT
25722: IFFALSE 25726
// continue ;
25724: GO 25658
// if HexInfo ( _x , _y ) = 0 then
25726: LD_VAR 0 7
25730: PPUSH
25731: LD_VAR 0 8
25735: PPUSH
25736: CALL_OW 428
25740: PUSH
25741: LD_INT 0
25743: EQUAL
25744: IFFALSE 25769
// begin ComMoveXY ( unit , _x , _y ) ;
25746: LD_VAR 0 1
25750: PPUSH
25751: LD_VAR 0 7
25755: PPUSH
25756: LD_VAR 0 8
25760: PPUSH
25761: CALL_OW 111
// exit ;
25765: POP
25766: POP
25767: GO 25773
// end ; end ;
25769: GO 25658
25771: POP
25772: POP
// end ;
25773: LD_VAR 0 3
25777: RET
// export function ScanBase ( side , base_area ) ; begin
25778: LD_INT 0
25780: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25781: LD_ADDR_VAR 0 3
25785: PUSH
25786: LD_VAR 0 2
25790: PPUSH
25791: LD_INT 81
25793: PUSH
25794: LD_VAR 0 1
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PPUSH
25803: CALL_OW 70
25807: ST_TO_ADDR
// end ;
25808: LD_VAR 0 3
25812: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25813: LD_INT 0
25815: PPUSH
25816: PPUSH
25817: PPUSH
25818: PPUSH
// result := false ;
25819: LD_ADDR_VAR 0 2
25823: PUSH
25824: LD_INT 0
25826: ST_TO_ADDR
// side := GetSide ( unit ) ;
25827: LD_ADDR_VAR 0 3
25831: PUSH
25832: LD_VAR 0 1
25836: PPUSH
25837: CALL_OW 255
25841: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25842: LD_ADDR_VAR 0 4
25846: PUSH
25847: LD_VAR 0 1
25851: PPUSH
25852: CALL_OW 248
25856: ST_TO_ADDR
// case nat of 1 :
25857: LD_VAR 0 4
25861: PUSH
25862: LD_INT 1
25864: DOUBLE
25865: EQUAL
25866: IFTRUE 25870
25868: GO 25881
25870: POP
// tech := tech_lassight ; 2 :
25871: LD_ADDR_VAR 0 5
25875: PUSH
25876: LD_INT 12
25878: ST_TO_ADDR
25879: GO 25920
25881: LD_INT 2
25883: DOUBLE
25884: EQUAL
25885: IFTRUE 25889
25887: GO 25900
25889: POP
// tech := tech_mortar ; 3 :
25890: LD_ADDR_VAR 0 5
25894: PUSH
25895: LD_INT 41
25897: ST_TO_ADDR
25898: GO 25920
25900: LD_INT 3
25902: DOUBLE
25903: EQUAL
25904: IFTRUE 25908
25906: GO 25919
25908: POP
// tech := tech_bazooka ; end ;
25909: LD_ADDR_VAR 0 5
25913: PUSH
25914: LD_INT 44
25916: ST_TO_ADDR
25917: GO 25920
25919: POP
// if Researched ( side , tech ) then
25920: LD_VAR 0 3
25924: PPUSH
25925: LD_VAR 0 5
25929: PPUSH
25930: CALL_OW 325
25934: IFFALSE 25961
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25936: LD_ADDR_VAR 0 2
25940: PUSH
25941: LD_INT 5
25943: PUSH
25944: LD_INT 8
25946: PUSH
25947: LD_INT 9
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: PUSH
25955: LD_VAR 0 4
25959: ARRAY
25960: ST_TO_ADDR
// end ;
25961: LD_VAR 0 2
25965: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25966: LD_INT 0
25968: PPUSH
25969: PPUSH
25970: PPUSH
// if not mines then
25971: LD_VAR 0 2
25975: NOT
25976: IFFALSE 25980
// exit ;
25978: GO 26124
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25980: LD_ADDR_VAR 0 5
25984: PUSH
25985: LD_INT 81
25987: PUSH
25988: LD_VAR 0 1
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 3
25999: PUSH
26000: LD_INT 21
26002: PUSH
26003: LD_INT 3
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PPUSH
26018: CALL_OW 69
26022: ST_TO_ADDR
// for i in mines do
26023: LD_ADDR_VAR 0 4
26027: PUSH
26028: LD_VAR 0 2
26032: PUSH
26033: FOR_IN
26034: IFFALSE 26122
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26036: LD_VAR 0 4
26040: PUSH
26041: LD_INT 1
26043: ARRAY
26044: PPUSH
26045: LD_VAR 0 4
26049: PUSH
26050: LD_INT 2
26052: ARRAY
26053: PPUSH
26054: CALL_OW 458
26058: NOT
26059: IFFALSE 26063
// continue ;
26061: GO 26033
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26063: LD_VAR 0 4
26067: PUSH
26068: LD_INT 1
26070: ARRAY
26071: PPUSH
26072: LD_VAR 0 4
26076: PUSH
26077: LD_INT 2
26079: ARRAY
26080: PPUSH
26081: CALL_OW 428
26085: PUSH
26086: LD_VAR 0 5
26090: IN
26091: IFFALSE 26120
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26093: LD_VAR 0 4
26097: PUSH
26098: LD_INT 1
26100: ARRAY
26101: PPUSH
26102: LD_VAR 0 4
26106: PUSH
26107: LD_INT 2
26109: ARRAY
26110: PPUSH
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 456
// end ;
26120: GO 26033
26122: POP
26123: POP
// end ;
26124: LD_VAR 0 3
26128: RET
// export function Count ( array ) ; var i ; begin
26129: LD_INT 0
26131: PPUSH
26132: PPUSH
// result := 0 ;
26133: LD_ADDR_VAR 0 2
26137: PUSH
26138: LD_INT 0
26140: ST_TO_ADDR
// for i in array do
26141: LD_ADDR_VAR 0 3
26145: PUSH
26146: LD_VAR 0 1
26150: PUSH
26151: FOR_IN
26152: IFFALSE 26176
// if i then
26154: LD_VAR 0 3
26158: IFFALSE 26174
// result := result + 1 ;
26160: LD_ADDR_VAR 0 2
26164: PUSH
26165: LD_VAR 0 2
26169: PUSH
26170: LD_INT 1
26172: PLUS
26173: ST_TO_ADDR
26174: GO 26151
26176: POP
26177: POP
// end ;
26178: LD_VAR 0 2
26182: RET
// export function IsEmpty ( building ) ; begin
26183: LD_INT 0
26185: PPUSH
// if not building then
26186: LD_VAR 0 1
26190: NOT
26191: IFFALSE 26195
// exit ;
26193: GO 26238
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26195: LD_ADDR_VAR 0 2
26199: PUSH
26200: LD_VAR 0 1
26204: PUSH
26205: LD_INT 22
26207: PUSH
26208: LD_VAR 0 1
26212: PPUSH
26213: CALL_OW 255
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 58
26224: PUSH
26225: EMPTY
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PPUSH
26232: CALL_OW 69
26236: IN
26237: ST_TO_ADDR
// end ;
26238: LD_VAR 0 2
26242: RET
// export function IsNotFull ( building ) ; begin
26243: LD_INT 0
26245: PPUSH
// if not building then
26246: LD_VAR 0 1
26250: NOT
26251: IFFALSE 26255
// exit ;
26253: GO 26274
// result := UnitsInside ( building ) < 6 ;
26255: LD_ADDR_VAR 0 2
26259: PUSH
26260: LD_VAR 0 1
26264: PPUSH
26265: CALL_OW 313
26269: PUSH
26270: LD_INT 6
26272: LESS
26273: ST_TO_ADDR
// end ;
26274: LD_VAR 0 2
26278: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26279: LD_INT 0
26281: PPUSH
26282: PPUSH
26283: PPUSH
26284: PPUSH
// tmp := [ ] ;
26285: LD_ADDR_VAR 0 3
26289: PUSH
26290: EMPTY
26291: ST_TO_ADDR
// list := [ ] ;
26292: LD_ADDR_VAR 0 5
26296: PUSH
26297: EMPTY
26298: ST_TO_ADDR
// for i = 16 to 25 do
26299: LD_ADDR_VAR 0 4
26303: PUSH
26304: DOUBLE
26305: LD_INT 16
26307: DEC
26308: ST_TO_ADDR
26309: LD_INT 25
26311: PUSH
26312: FOR_TO
26313: IFFALSE 26386
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26315: LD_ADDR_VAR 0 3
26319: PUSH
26320: LD_VAR 0 3
26324: PUSH
26325: LD_INT 22
26327: PUSH
26328: LD_VAR 0 1
26332: PPUSH
26333: CALL_OW 255
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 91
26344: PUSH
26345: LD_VAR 0 1
26349: PUSH
26350: LD_INT 6
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 30
26360: PUSH
26361: LD_VAR 0 4
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: PUSH
26375: EMPTY
26376: LIST
26377: PPUSH
26378: CALL_OW 69
26382: ADD
26383: ST_TO_ADDR
26384: GO 26312
26386: POP
26387: POP
// for i = 1 to tmp do
26388: LD_ADDR_VAR 0 4
26392: PUSH
26393: DOUBLE
26394: LD_INT 1
26396: DEC
26397: ST_TO_ADDR
26398: LD_VAR 0 3
26402: PUSH
26403: FOR_TO
26404: IFFALSE 26492
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26406: LD_ADDR_VAR 0 5
26410: PUSH
26411: LD_VAR 0 5
26415: PUSH
26416: LD_VAR 0 3
26420: PUSH
26421: LD_VAR 0 4
26425: ARRAY
26426: PPUSH
26427: CALL_OW 266
26431: PUSH
26432: LD_VAR 0 3
26436: PUSH
26437: LD_VAR 0 4
26441: ARRAY
26442: PPUSH
26443: CALL_OW 250
26447: PUSH
26448: LD_VAR 0 3
26452: PUSH
26453: LD_VAR 0 4
26457: ARRAY
26458: PPUSH
26459: CALL_OW 251
26463: PUSH
26464: LD_VAR 0 3
26468: PUSH
26469: LD_VAR 0 4
26473: ARRAY
26474: PPUSH
26475: CALL_OW 254
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: PUSH
26486: EMPTY
26487: LIST
26488: ADD
26489: ST_TO_ADDR
26490: GO 26403
26492: POP
26493: POP
// result := list ;
26494: LD_ADDR_VAR 0 2
26498: PUSH
26499: LD_VAR 0 5
26503: ST_TO_ADDR
// end ;
26504: LD_VAR 0 2
26508: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26509: LD_INT 0
26511: PPUSH
26512: PPUSH
26513: PPUSH
26514: PPUSH
26515: PPUSH
26516: PPUSH
26517: PPUSH
// if not factory then
26518: LD_VAR 0 1
26522: NOT
26523: IFFALSE 26527
// exit ;
26525: GO 27120
// if control = control_apeman then
26527: LD_VAR 0 4
26531: PUSH
26532: LD_INT 5
26534: EQUAL
26535: IFFALSE 26644
// begin tmp := UnitsInside ( factory ) ;
26537: LD_ADDR_VAR 0 8
26541: PUSH
26542: LD_VAR 0 1
26546: PPUSH
26547: CALL_OW 313
26551: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26552: LD_VAR 0 8
26556: PPUSH
26557: LD_INT 25
26559: PUSH
26560: LD_INT 12
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PPUSH
26567: CALL_OW 72
26571: NOT
26572: IFFALSE 26582
// control := control_manual ;
26574: LD_ADDR_VAR 0 4
26578: PUSH
26579: LD_INT 1
26581: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26582: LD_ADDR_VAR 0 8
26586: PUSH
26587: LD_VAR 0 1
26591: PPUSH
26592: CALL 26279 0 1
26596: ST_TO_ADDR
// if tmp then
26597: LD_VAR 0 8
26601: IFFALSE 26644
// begin for i in tmp do
26603: LD_ADDR_VAR 0 7
26607: PUSH
26608: LD_VAR 0 8
26612: PUSH
26613: FOR_IN
26614: IFFALSE 26642
// if i [ 1 ] = b_ext_radio then
26616: LD_VAR 0 7
26620: PUSH
26621: LD_INT 1
26623: ARRAY
26624: PUSH
26625: LD_INT 22
26627: EQUAL
26628: IFFALSE 26640
// begin control := control_remote ;
26630: LD_ADDR_VAR 0 4
26634: PUSH
26635: LD_INT 2
26637: ST_TO_ADDR
// break ;
26638: GO 26642
// end ;
26640: GO 26613
26642: POP
26643: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26644: LD_VAR 0 1
26648: PPUSH
26649: LD_VAR 0 2
26653: PPUSH
26654: LD_VAR 0 3
26658: PPUSH
26659: LD_VAR 0 4
26663: PPUSH
26664: LD_VAR 0 5
26668: PPUSH
26669: CALL_OW 448
26673: IFFALSE 26708
// begin result := [ chassis , engine , control , weapon ] ;
26675: LD_ADDR_VAR 0 6
26679: PUSH
26680: LD_VAR 0 2
26684: PUSH
26685: LD_VAR 0 3
26689: PUSH
26690: LD_VAR 0 4
26694: PUSH
26695: LD_VAR 0 5
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: ST_TO_ADDR
// exit ;
26706: GO 27120
// end ; _chassis := AvailableChassisList ( factory ) ;
26708: LD_ADDR_VAR 0 9
26712: PUSH
26713: LD_VAR 0 1
26717: PPUSH
26718: CALL_OW 475
26722: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26723: LD_ADDR_VAR 0 11
26727: PUSH
26728: LD_VAR 0 1
26732: PPUSH
26733: CALL_OW 476
26737: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26738: LD_ADDR_VAR 0 12
26742: PUSH
26743: LD_VAR 0 1
26747: PPUSH
26748: CALL_OW 477
26752: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26753: LD_ADDR_VAR 0 10
26757: PUSH
26758: LD_VAR 0 1
26762: PPUSH
26763: CALL_OW 478
26767: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26768: LD_VAR 0 9
26772: NOT
26773: PUSH
26774: LD_VAR 0 11
26778: NOT
26779: OR
26780: PUSH
26781: LD_VAR 0 12
26785: NOT
26786: OR
26787: PUSH
26788: LD_VAR 0 10
26792: NOT
26793: OR
26794: IFFALSE 26829
// begin result := [ chassis , engine , control , weapon ] ;
26796: LD_ADDR_VAR 0 6
26800: PUSH
26801: LD_VAR 0 2
26805: PUSH
26806: LD_VAR 0 3
26810: PUSH
26811: LD_VAR 0 4
26815: PUSH
26816: LD_VAR 0 5
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: ST_TO_ADDR
// exit ;
26827: GO 27120
// end ; if not chassis in _chassis then
26829: LD_VAR 0 2
26833: PUSH
26834: LD_VAR 0 9
26838: IN
26839: NOT
26840: IFFALSE 26866
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26842: LD_ADDR_VAR 0 2
26846: PUSH
26847: LD_VAR 0 9
26851: PUSH
26852: LD_INT 1
26854: PPUSH
26855: LD_VAR 0 9
26859: PPUSH
26860: CALL_OW 12
26864: ARRAY
26865: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26866: LD_VAR 0 2
26870: PPUSH
26871: LD_VAR 0 3
26875: PPUSH
26876: CALL 27125 0 2
26880: NOT
26881: IFFALSE 26940
// repeat engine := _engine [ 1 ] ;
26883: LD_ADDR_VAR 0 3
26887: PUSH
26888: LD_VAR 0 11
26892: PUSH
26893: LD_INT 1
26895: ARRAY
26896: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26897: LD_ADDR_VAR 0 11
26901: PUSH
26902: LD_VAR 0 11
26906: PPUSH
26907: LD_INT 1
26909: PPUSH
26910: CALL_OW 3
26914: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26915: LD_VAR 0 2
26919: PPUSH
26920: LD_VAR 0 3
26924: PPUSH
26925: CALL 27125 0 2
26929: PUSH
26930: LD_VAR 0 11
26934: PUSH
26935: EMPTY
26936: EQUAL
26937: OR
26938: IFFALSE 26883
// if not control in _control then
26940: LD_VAR 0 4
26944: PUSH
26945: LD_VAR 0 12
26949: IN
26950: NOT
26951: IFFALSE 26977
// control := _control [ rand ( 1 , _control ) ] ;
26953: LD_ADDR_VAR 0 4
26957: PUSH
26958: LD_VAR 0 12
26962: PUSH
26963: LD_INT 1
26965: PPUSH
26966: LD_VAR 0 12
26970: PPUSH
26971: CALL_OW 12
26975: ARRAY
26976: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26977: LD_VAR 0 2
26981: PPUSH
26982: LD_VAR 0 5
26986: PPUSH
26987: CALL 27345 0 2
26991: NOT
26992: IFFALSE 27051
// repeat weapon := _weapon [ 1 ] ;
26994: LD_ADDR_VAR 0 5
26998: PUSH
26999: LD_VAR 0 10
27003: PUSH
27004: LD_INT 1
27006: ARRAY
27007: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27008: LD_ADDR_VAR 0 10
27012: PUSH
27013: LD_VAR 0 10
27017: PPUSH
27018: LD_INT 1
27020: PPUSH
27021: CALL_OW 3
27025: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27026: LD_VAR 0 2
27030: PPUSH
27031: LD_VAR 0 5
27035: PPUSH
27036: CALL 27345 0 2
27040: PUSH
27041: LD_VAR 0 10
27045: PUSH
27046: EMPTY
27047: EQUAL
27048: OR
27049: IFFALSE 26994
// result := [ ] ;
27051: LD_ADDR_VAR 0 6
27055: PUSH
27056: EMPTY
27057: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27058: LD_VAR 0 1
27062: PPUSH
27063: LD_VAR 0 2
27067: PPUSH
27068: LD_VAR 0 3
27072: PPUSH
27073: LD_VAR 0 4
27077: PPUSH
27078: LD_VAR 0 5
27082: PPUSH
27083: CALL_OW 448
27087: IFFALSE 27120
// result := [ chassis , engine , control , weapon ] ;
27089: LD_ADDR_VAR 0 6
27093: PUSH
27094: LD_VAR 0 2
27098: PUSH
27099: LD_VAR 0 3
27103: PUSH
27104: LD_VAR 0 4
27108: PUSH
27109: LD_VAR 0 5
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: ST_TO_ADDR
// end ;
27120: LD_VAR 0 6
27124: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27125: LD_INT 0
27127: PPUSH
// if not chassis or not engine then
27128: LD_VAR 0 1
27132: NOT
27133: PUSH
27134: LD_VAR 0 2
27138: NOT
27139: OR
27140: IFFALSE 27144
// exit ;
27142: GO 27340
// case engine of engine_solar :
27144: LD_VAR 0 2
27148: PUSH
27149: LD_INT 2
27151: DOUBLE
27152: EQUAL
27153: IFTRUE 27157
27155: GO 27195
27157: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27158: LD_ADDR_VAR 0 3
27162: PUSH
27163: LD_INT 11
27165: PUSH
27166: LD_INT 12
27168: PUSH
27169: LD_INT 13
27171: PUSH
27172: LD_INT 14
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: LD_INT 2
27180: PUSH
27181: LD_INT 3
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: ST_TO_ADDR
27193: GO 27324
27195: LD_INT 1
27197: DOUBLE
27198: EQUAL
27199: IFTRUE 27203
27201: GO 27265
27203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27204: LD_ADDR_VAR 0 3
27208: PUSH
27209: LD_INT 11
27211: PUSH
27212: LD_INT 12
27214: PUSH
27215: LD_INT 13
27217: PUSH
27218: LD_INT 14
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 2
27226: PUSH
27227: LD_INT 3
27229: PUSH
27230: LD_INT 4
27232: PUSH
27233: LD_INT 5
27235: PUSH
27236: LD_INT 21
27238: PUSH
27239: LD_INT 23
27241: PUSH
27242: LD_INT 22
27244: PUSH
27245: LD_INT 24
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: ST_TO_ADDR
27263: GO 27324
27265: LD_INT 3
27267: DOUBLE
27268: EQUAL
27269: IFTRUE 27273
27271: GO 27323
27273: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27274: LD_ADDR_VAR 0 3
27278: PUSH
27279: LD_INT 13
27281: PUSH
27282: LD_INT 14
27284: PUSH
27285: LD_INT 2
27287: PUSH
27288: LD_INT 3
27290: PUSH
27291: LD_INT 4
27293: PUSH
27294: LD_INT 5
27296: PUSH
27297: LD_INT 21
27299: PUSH
27300: LD_INT 22
27302: PUSH
27303: LD_INT 23
27305: PUSH
27306: LD_INT 24
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: ST_TO_ADDR
27321: GO 27324
27323: POP
// result := ( chassis in result ) ;
27324: LD_ADDR_VAR 0 3
27328: PUSH
27329: LD_VAR 0 1
27333: PUSH
27334: LD_VAR 0 3
27338: IN
27339: ST_TO_ADDR
// end ;
27340: LD_VAR 0 3
27344: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27345: LD_INT 0
27347: PPUSH
// if not chassis or not weapon then
27348: LD_VAR 0 1
27352: NOT
27353: PUSH
27354: LD_VAR 0 2
27358: NOT
27359: OR
27360: IFFALSE 27364
// exit ;
27362: GO 28390
// case weapon of us_machine_gun :
27364: LD_VAR 0 2
27368: PUSH
27369: LD_INT 2
27371: DOUBLE
27372: EQUAL
27373: IFTRUE 27377
27375: GO 27407
27377: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27378: LD_ADDR_VAR 0 3
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: LD_INT 3
27391: PUSH
27392: LD_INT 4
27394: PUSH
27395: LD_INT 5
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: ST_TO_ADDR
27405: GO 28374
27407: LD_INT 3
27409: DOUBLE
27410: EQUAL
27411: IFTRUE 27415
27413: GO 27445
27415: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27416: LD_ADDR_VAR 0 3
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: LD_INT 3
27429: PUSH
27430: LD_INT 4
27432: PUSH
27433: LD_INT 5
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: ST_TO_ADDR
27443: GO 28374
27445: LD_INT 11
27447: DOUBLE
27448: EQUAL
27449: IFTRUE 27453
27451: GO 27483
27453: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27454: LD_ADDR_VAR 0 3
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: LD_INT 2
27464: PUSH
27465: LD_INT 3
27467: PUSH
27468: LD_INT 4
27470: PUSH
27471: LD_INT 5
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: ST_TO_ADDR
27481: GO 28374
27483: LD_INT 4
27485: DOUBLE
27486: EQUAL
27487: IFTRUE 27491
27489: GO 27517
27491: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27492: LD_ADDR_VAR 0 3
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 3
27502: PUSH
27503: LD_INT 4
27505: PUSH
27506: LD_INT 5
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: ST_TO_ADDR
27515: GO 28374
27517: LD_INT 5
27519: DOUBLE
27520: EQUAL
27521: IFTRUE 27525
27523: GO 27551
27525: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27526: LD_ADDR_VAR 0 3
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 3
27536: PUSH
27537: LD_INT 4
27539: PUSH
27540: LD_INT 5
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
27549: GO 28374
27551: LD_INT 9
27553: DOUBLE
27554: EQUAL
27555: IFTRUE 27559
27557: GO 27585
27559: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27560: LD_ADDR_VAR 0 3
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: LD_INT 4
27573: PUSH
27574: LD_INT 5
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: ST_TO_ADDR
27583: GO 28374
27585: LD_INT 7
27587: DOUBLE
27588: EQUAL
27589: IFTRUE 27593
27591: GO 27619
27593: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27594: LD_ADDR_VAR 0 3
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: LD_INT 3
27604: PUSH
27605: LD_INT 4
27607: PUSH
27608: LD_INT 5
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: ST_TO_ADDR
27617: GO 28374
27619: LD_INT 12
27621: DOUBLE
27622: EQUAL
27623: IFTRUE 27627
27625: GO 27653
27627: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27628: LD_ADDR_VAR 0 3
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: LD_INT 3
27638: PUSH
27639: LD_INT 4
27641: PUSH
27642: LD_INT 5
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: ST_TO_ADDR
27651: GO 28374
27653: LD_INT 13
27655: DOUBLE
27656: EQUAL
27657: IFTRUE 27661
27659: GO 27687
27661: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27662: LD_ADDR_VAR 0 3
27666: PUSH
27667: LD_INT 2
27669: PUSH
27670: LD_INT 3
27672: PUSH
27673: LD_INT 4
27675: PUSH
27676: LD_INT 5
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: ST_TO_ADDR
27685: GO 28374
27687: LD_INT 14
27689: DOUBLE
27690: EQUAL
27691: IFTRUE 27695
27693: GO 27713
27695: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27696: LD_ADDR_VAR 0 3
27700: PUSH
27701: LD_INT 4
27703: PUSH
27704: LD_INT 5
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: ST_TO_ADDR
27711: GO 28374
27713: LD_INT 6
27715: DOUBLE
27716: EQUAL
27717: IFTRUE 27721
27719: GO 27739
27721: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27722: LD_ADDR_VAR 0 3
27726: PUSH
27727: LD_INT 4
27729: PUSH
27730: LD_INT 5
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: ST_TO_ADDR
27737: GO 28374
27739: LD_INT 10
27741: DOUBLE
27742: EQUAL
27743: IFTRUE 27747
27745: GO 27765
27747: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27748: LD_ADDR_VAR 0 3
27752: PUSH
27753: LD_INT 4
27755: PUSH
27756: LD_INT 5
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: ST_TO_ADDR
27763: GO 28374
27765: LD_INT 22
27767: DOUBLE
27768: EQUAL
27769: IFTRUE 27773
27771: GO 27799
27773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27774: LD_ADDR_VAR 0 3
27778: PUSH
27779: LD_INT 11
27781: PUSH
27782: LD_INT 12
27784: PUSH
27785: LD_INT 13
27787: PUSH
27788: LD_INT 14
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: ST_TO_ADDR
27797: GO 28374
27799: LD_INT 23
27801: DOUBLE
27802: EQUAL
27803: IFTRUE 27807
27805: GO 27833
27807: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27808: LD_ADDR_VAR 0 3
27812: PUSH
27813: LD_INT 11
27815: PUSH
27816: LD_INT 12
27818: PUSH
27819: LD_INT 13
27821: PUSH
27822: LD_INT 14
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: ST_TO_ADDR
27831: GO 28374
27833: LD_INT 24
27835: DOUBLE
27836: EQUAL
27837: IFTRUE 27841
27839: GO 27867
27841: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27842: LD_ADDR_VAR 0 3
27846: PUSH
27847: LD_INT 11
27849: PUSH
27850: LD_INT 12
27852: PUSH
27853: LD_INT 13
27855: PUSH
27856: LD_INT 14
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: ST_TO_ADDR
27865: GO 28374
27867: LD_INT 30
27869: DOUBLE
27870: EQUAL
27871: IFTRUE 27875
27873: GO 27901
27875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27876: LD_ADDR_VAR 0 3
27880: PUSH
27881: LD_INT 11
27883: PUSH
27884: LD_INT 12
27886: PUSH
27887: LD_INT 13
27889: PUSH
27890: LD_INT 14
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: ST_TO_ADDR
27899: GO 28374
27901: LD_INT 25
27903: DOUBLE
27904: EQUAL
27905: IFTRUE 27909
27907: GO 27927
27909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27910: LD_ADDR_VAR 0 3
27914: PUSH
27915: LD_INT 13
27917: PUSH
27918: LD_INT 14
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: ST_TO_ADDR
27925: GO 28374
27927: LD_INT 27
27929: DOUBLE
27930: EQUAL
27931: IFTRUE 27935
27933: GO 27953
27935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27936: LD_ADDR_VAR 0 3
27940: PUSH
27941: LD_INT 13
27943: PUSH
27944: LD_INT 14
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: ST_TO_ADDR
27951: GO 28374
27953: LD_INT 28
27955: DOUBLE
27956: EQUAL
27957: IFTRUE 27961
27959: GO 27979
27961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27962: LD_ADDR_VAR 0 3
27966: PUSH
27967: LD_INT 13
27969: PUSH
27970: LD_INT 14
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: ST_TO_ADDR
27977: GO 28374
27979: LD_INT 29
27981: DOUBLE
27982: EQUAL
27983: IFTRUE 27987
27985: GO 28005
27987: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27988: LD_ADDR_VAR 0 3
27992: PUSH
27993: LD_INT 13
27995: PUSH
27996: LD_INT 14
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: ST_TO_ADDR
28003: GO 28374
28005: LD_INT 31
28007: DOUBLE
28008: EQUAL
28009: IFTRUE 28013
28011: GO 28031
28013: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28014: LD_ADDR_VAR 0 3
28018: PUSH
28019: LD_INT 13
28021: PUSH
28022: LD_INT 14
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: ST_TO_ADDR
28029: GO 28374
28031: LD_INT 26
28033: DOUBLE
28034: EQUAL
28035: IFTRUE 28039
28037: GO 28057
28039: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28040: LD_ADDR_VAR 0 3
28044: PUSH
28045: LD_INT 13
28047: PUSH
28048: LD_INT 14
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: ST_TO_ADDR
28055: GO 28374
28057: LD_INT 42
28059: DOUBLE
28060: EQUAL
28061: IFTRUE 28065
28063: GO 28091
28065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28066: LD_ADDR_VAR 0 3
28070: PUSH
28071: LD_INT 21
28073: PUSH
28074: LD_INT 22
28076: PUSH
28077: LD_INT 23
28079: PUSH
28080: LD_INT 24
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: ST_TO_ADDR
28089: GO 28374
28091: LD_INT 43
28093: DOUBLE
28094: EQUAL
28095: IFTRUE 28099
28097: GO 28125
28099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28100: LD_ADDR_VAR 0 3
28104: PUSH
28105: LD_INT 21
28107: PUSH
28108: LD_INT 22
28110: PUSH
28111: LD_INT 23
28113: PUSH
28114: LD_INT 24
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
28123: GO 28374
28125: LD_INT 44
28127: DOUBLE
28128: EQUAL
28129: IFTRUE 28133
28131: GO 28159
28133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28134: LD_ADDR_VAR 0 3
28138: PUSH
28139: LD_INT 21
28141: PUSH
28142: LD_INT 22
28144: PUSH
28145: LD_INT 23
28147: PUSH
28148: LD_INT 24
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: ST_TO_ADDR
28157: GO 28374
28159: LD_INT 45
28161: DOUBLE
28162: EQUAL
28163: IFTRUE 28167
28165: GO 28193
28167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28168: LD_ADDR_VAR 0 3
28172: PUSH
28173: LD_INT 21
28175: PUSH
28176: LD_INT 22
28178: PUSH
28179: LD_INT 23
28181: PUSH
28182: LD_INT 24
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: ST_TO_ADDR
28191: GO 28374
28193: LD_INT 49
28195: DOUBLE
28196: EQUAL
28197: IFTRUE 28201
28199: GO 28227
28201: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28202: LD_ADDR_VAR 0 3
28206: PUSH
28207: LD_INT 21
28209: PUSH
28210: LD_INT 22
28212: PUSH
28213: LD_INT 23
28215: PUSH
28216: LD_INT 24
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: ST_TO_ADDR
28225: GO 28374
28227: LD_INT 51
28229: DOUBLE
28230: EQUAL
28231: IFTRUE 28235
28233: GO 28261
28235: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28236: LD_ADDR_VAR 0 3
28240: PUSH
28241: LD_INT 21
28243: PUSH
28244: LD_INT 22
28246: PUSH
28247: LD_INT 23
28249: PUSH
28250: LD_INT 24
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: ST_TO_ADDR
28259: GO 28374
28261: LD_INT 52
28263: DOUBLE
28264: EQUAL
28265: IFTRUE 28269
28267: GO 28295
28269: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28270: LD_ADDR_VAR 0 3
28274: PUSH
28275: LD_INT 21
28277: PUSH
28278: LD_INT 22
28280: PUSH
28281: LD_INT 23
28283: PUSH
28284: LD_INT 24
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: ST_TO_ADDR
28293: GO 28374
28295: LD_INT 53
28297: DOUBLE
28298: EQUAL
28299: IFTRUE 28303
28301: GO 28321
28303: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: LD_INT 23
28311: PUSH
28312: LD_INT 24
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: ST_TO_ADDR
28319: GO 28374
28321: LD_INT 46
28323: DOUBLE
28324: EQUAL
28325: IFTRUE 28329
28327: GO 28347
28329: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28330: LD_ADDR_VAR 0 3
28334: PUSH
28335: LD_INT 23
28337: PUSH
28338: LD_INT 24
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: ST_TO_ADDR
28345: GO 28374
28347: LD_INT 47
28349: DOUBLE
28350: EQUAL
28351: IFTRUE 28355
28353: GO 28373
28355: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28356: LD_ADDR_VAR 0 3
28360: PUSH
28361: LD_INT 23
28363: PUSH
28364: LD_INT 24
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: ST_TO_ADDR
28371: GO 28374
28373: POP
// result := ( chassis in result ) ;
28374: LD_ADDR_VAR 0 3
28378: PUSH
28379: LD_VAR 0 1
28383: PUSH
28384: LD_VAR 0 3
28388: IN
28389: ST_TO_ADDR
// end ;
28390: LD_VAR 0 3
28394: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28395: LD_INT 0
28397: PPUSH
28398: PPUSH
28399: PPUSH
28400: PPUSH
28401: PPUSH
28402: PPUSH
28403: PPUSH
// result := array ;
28404: LD_ADDR_VAR 0 5
28408: PUSH
28409: LD_VAR 0 1
28413: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28414: LD_VAR 0 1
28418: NOT
28419: PUSH
28420: LD_VAR 0 2
28424: NOT
28425: OR
28426: PUSH
28427: LD_VAR 0 3
28431: NOT
28432: OR
28433: PUSH
28434: LD_VAR 0 2
28438: PUSH
28439: LD_VAR 0 1
28443: GREATER
28444: OR
28445: PUSH
28446: LD_VAR 0 3
28450: PUSH
28451: LD_VAR 0 1
28455: GREATER
28456: OR
28457: IFFALSE 28461
// exit ;
28459: GO 28757
// if direction then
28461: LD_VAR 0 4
28465: IFFALSE 28529
// begin d := 1 ;
28467: LD_ADDR_VAR 0 9
28471: PUSH
28472: LD_INT 1
28474: ST_TO_ADDR
// if i_from > i_to then
28475: LD_VAR 0 2
28479: PUSH
28480: LD_VAR 0 3
28484: GREATER
28485: IFFALSE 28511
// length := ( array - i_from ) + i_to else
28487: LD_ADDR_VAR 0 11
28491: PUSH
28492: LD_VAR 0 1
28496: PUSH
28497: LD_VAR 0 2
28501: MINUS
28502: PUSH
28503: LD_VAR 0 3
28507: PLUS
28508: ST_TO_ADDR
28509: GO 28527
// length := i_to - i_from ;
28511: LD_ADDR_VAR 0 11
28515: PUSH
28516: LD_VAR 0 3
28520: PUSH
28521: LD_VAR 0 2
28525: MINUS
28526: ST_TO_ADDR
// end else
28527: GO 28590
// begin d := - 1 ;
28529: LD_ADDR_VAR 0 9
28533: PUSH
28534: LD_INT 1
28536: NEG
28537: ST_TO_ADDR
// if i_from > i_to then
28538: LD_VAR 0 2
28542: PUSH
28543: LD_VAR 0 3
28547: GREATER
28548: IFFALSE 28568
// length := i_from - i_to else
28550: LD_ADDR_VAR 0 11
28554: PUSH
28555: LD_VAR 0 2
28559: PUSH
28560: LD_VAR 0 3
28564: MINUS
28565: ST_TO_ADDR
28566: GO 28590
// length := ( array - i_to ) + i_from ;
28568: LD_ADDR_VAR 0 11
28572: PUSH
28573: LD_VAR 0 1
28577: PUSH
28578: LD_VAR 0 3
28582: MINUS
28583: PUSH
28584: LD_VAR 0 2
28588: PLUS
28589: ST_TO_ADDR
// end ; if not length then
28590: LD_VAR 0 11
28594: NOT
28595: IFFALSE 28599
// exit ;
28597: GO 28757
// tmp := array ;
28599: LD_ADDR_VAR 0 10
28603: PUSH
28604: LD_VAR 0 1
28608: ST_TO_ADDR
// for i = 1 to length do
28609: LD_ADDR_VAR 0 6
28613: PUSH
28614: DOUBLE
28615: LD_INT 1
28617: DEC
28618: ST_TO_ADDR
28619: LD_VAR 0 11
28623: PUSH
28624: FOR_TO
28625: IFFALSE 28745
// begin for j = 1 to array do
28627: LD_ADDR_VAR 0 7
28631: PUSH
28632: DOUBLE
28633: LD_INT 1
28635: DEC
28636: ST_TO_ADDR
28637: LD_VAR 0 1
28641: PUSH
28642: FOR_TO
28643: IFFALSE 28731
// begin k := j + d ;
28645: LD_ADDR_VAR 0 8
28649: PUSH
28650: LD_VAR 0 7
28654: PUSH
28655: LD_VAR 0 9
28659: PLUS
28660: ST_TO_ADDR
// if k > array then
28661: LD_VAR 0 8
28665: PUSH
28666: LD_VAR 0 1
28670: GREATER
28671: IFFALSE 28681
// k := 1 ;
28673: LD_ADDR_VAR 0 8
28677: PUSH
28678: LD_INT 1
28680: ST_TO_ADDR
// if not k then
28681: LD_VAR 0 8
28685: NOT
28686: IFFALSE 28698
// k := array ;
28688: LD_ADDR_VAR 0 8
28692: PUSH
28693: LD_VAR 0 1
28697: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28698: LD_ADDR_VAR 0 10
28702: PUSH
28703: LD_VAR 0 10
28707: PPUSH
28708: LD_VAR 0 8
28712: PPUSH
28713: LD_VAR 0 1
28717: PUSH
28718: LD_VAR 0 7
28722: ARRAY
28723: PPUSH
28724: CALL_OW 1
28728: ST_TO_ADDR
// end ;
28729: GO 28642
28731: POP
28732: POP
// array := tmp ;
28733: LD_ADDR_VAR 0 1
28737: PUSH
28738: LD_VAR 0 10
28742: ST_TO_ADDR
// end ;
28743: GO 28624
28745: POP
28746: POP
// result := array ;
28747: LD_ADDR_VAR 0 5
28751: PUSH
28752: LD_VAR 0 1
28756: ST_TO_ADDR
// end ;
28757: LD_VAR 0 5
28761: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28762: LD_INT 0
28764: PPUSH
28765: PPUSH
// result := 0 ;
28766: LD_ADDR_VAR 0 3
28770: PUSH
28771: LD_INT 0
28773: ST_TO_ADDR
// if not array or not value in array then
28774: LD_VAR 0 1
28778: NOT
28779: PUSH
28780: LD_VAR 0 2
28784: PUSH
28785: LD_VAR 0 1
28789: IN
28790: NOT
28791: OR
28792: IFFALSE 28796
// exit ;
28794: GO 28850
// for i = 1 to array do
28796: LD_ADDR_VAR 0 4
28800: PUSH
28801: DOUBLE
28802: LD_INT 1
28804: DEC
28805: ST_TO_ADDR
28806: LD_VAR 0 1
28810: PUSH
28811: FOR_TO
28812: IFFALSE 28848
// if value = array [ i ] then
28814: LD_VAR 0 2
28818: PUSH
28819: LD_VAR 0 1
28823: PUSH
28824: LD_VAR 0 4
28828: ARRAY
28829: EQUAL
28830: IFFALSE 28846
// begin result := i ;
28832: LD_ADDR_VAR 0 3
28836: PUSH
28837: LD_VAR 0 4
28841: ST_TO_ADDR
// exit ;
28842: POP
28843: POP
28844: GO 28850
// end ;
28846: GO 28811
28848: POP
28849: POP
// end ;
28850: LD_VAR 0 3
28854: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28855: LD_INT 0
28857: PPUSH
// vc_chassis := chassis ;
28858: LD_ADDR_OWVAR 37
28862: PUSH
28863: LD_VAR 0 1
28867: ST_TO_ADDR
// vc_engine := engine ;
28868: LD_ADDR_OWVAR 39
28872: PUSH
28873: LD_VAR 0 2
28877: ST_TO_ADDR
// vc_control := control ;
28878: LD_ADDR_OWVAR 38
28882: PUSH
28883: LD_VAR 0 3
28887: ST_TO_ADDR
// vc_weapon := weapon ;
28888: LD_ADDR_OWVAR 40
28892: PUSH
28893: LD_VAR 0 4
28897: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28898: LD_ADDR_OWVAR 41
28902: PUSH
28903: LD_VAR 0 5
28907: ST_TO_ADDR
// end ;
28908: LD_VAR 0 6
28912: RET
// export function WantPlant ( unit ) ; var task ; begin
28913: LD_INT 0
28915: PPUSH
28916: PPUSH
// result := false ;
28917: LD_ADDR_VAR 0 2
28921: PUSH
28922: LD_INT 0
28924: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28925: LD_ADDR_VAR 0 3
28929: PUSH
28930: LD_VAR 0 1
28934: PPUSH
28935: CALL_OW 437
28939: ST_TO_ADDR
// if task then
28940: LD_VAR 0 3
28944: IFFALSE 28972
// if task [ 1 ] [ 1 ] = p then
28946: LD_VAR 0 3
28950: PUSH
28951: LD_INT 1
28953: ARRAY
28954: PUSH
28955: LD_INT 1
28957: ARRAY
28958: PUSH
28959: LD_STRING p
28961: EQUAL
28962: IFFALSE 28972
// result := true ;
28964: LD_ADDR_VAR 0 2
28968: PUSH
28969: LD_INT 1
28971: ST_TO_ADDR
// end ;
28972: LD_VAR 0 2
28976: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28977: LD_INT 0
28979: PPUSH
28980: PPUSH
28981: PPUSH
28982: PPUSH
// if pos < 1 then
28983: LD_VAR 0 2
28987: PUSH
28988: LD_INT 1
28990: LESS
28991: IFFALSE 28995
// exit ;
28993: GO 29298
// if pos = 1 then
28995: LD_VAR 0 2
28999: PUSH
29000: LD_INT 1
29002: EQUAL
29003: IFFALSE 29036
// result := Replace ( arr , pos [ 1 ] , value ) else
29005: LD_ADDR_VAR 0 4
29009: PUSH
29010: LD_VAR 0 1
29014: PPUSH
29015: LD_VAR 0 2
29019: PUSH
29020: LD_INT 1
29022: ARRAY
29023: PPUSH
29024: LD_VAR 0 3
29028: PPUSH
29029: CALL_OW 1
29033: ST_TO_ADDR
29034: GO 29298
// begin tmp := arr ;
29036: LD_ADDR_VAR 0 6
29040: PUSH
29041: LD_VAR 0 1
29045: ST_TO_ADDR
// s_arr := [ tmp ] ;
29046: LD_ADDR_VAR 0 7
29050: PUSH
29051: LD_VAR 0 6
29055: PUSH
29056: EMPTY
29057: LIST
29058: ST_TO_ADDR
// for i = 1 to pos - 1 do
29059: LD_ADDR_VAR 0 5
29063: PUSH
29064: DOUBLE
29065: LD_INT 1
29067: DEC
29068: ST_TO_ADDR
29069: LD_VAR 0 2
29073: PUSH
29074: LD_INT 1
29076: MINUS
29077: PUSH
29078: FOR_TO
29079: IFFALSE 29124
// begin tmp := tmp [ pos [ i ] ] ;
29081: LD_ADDR_VAR 0 6
29085: PUSH
29086: LD_VAR 0 6
29090: PUSH
29091: LD_VAR 0 2
29095: PUSH
29096: LD_VAR 0 5
29100: ARRAY
29101: ARRAY
29102: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29103: LD_ADDR_VAR 0 7
29107: PUSH
29108: LD_VAR 0 7
29112: PUSH
29113: LD_VAR 0 6
29117: PUSH
29118: EMPTY
29119: LIST
29120: ADD
29121: ST_TO_ADDR
// end ;
29122: GO 29078
29124: POP
29125: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29126: LD_ADDR_VAR 0 6
29130: PUSH
29131: LD_VAR 0 6
29135: PPUSH
29136: LD_VAR 0 2
29140: PUSH
29141: LD_VAR 0 2
29145: ARRAY
29146: PPUSH
29147: LD_VAR 0 3
29151: PPUSH
29152: CALL_OW 1
29156: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29157: LD_ADDR_VAR 0 7
29161: PUSH
29162: LD_VAR 0 7
29166: PPUSH
29167: LD_VAR 0 7
29171: PPUSH
29172: LD_VAR 0 6
29176: PPUSH
29177: CALL_OW 1
29181: ST_TO_ADDR
// for i = s_arr downto 2 do
29182: LD_ADDR_VAR 0 5
29186: PUSH
29187: DOUBLE
29188: LD_VAR 0 7
29192: INC
29193: ST_TO_ADDR
29194: LD_INT 2
29196: PUSH
29197: FOR_DOWNTO
29198: IFFALSE 29282
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29200: LD_ADDR_VAR 0 6
29204: PUSH
29205: LD_VAR 0 7
29209: PUSH
29210: LD_VAR 0 5
29214: PUSH
29215: LD_INT 1
29217: MINUS
29218: ARRAY
29219: PPUSH
29220: LD_VAR 0 2
29224: PUSH
29225: LD_VAR 0 5
29229: PUSH
29230: LD_INT 1
29232: MINUS
29233: ARRAY
29234: PPUSH
29235: LD_VAR 0 7
29239: PUSH
29240: LD_VAR 0 5
29244: ARRAY
29245: PPUSH
29246: CALL_OW 1
29250: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29251: LD_ADDR_VAR 0 7
29255: PUSH
29256: LD_VAR 0 7
29260: PPUSH
29261: LD_VAR 0 5
29265: PUSH
29266: LD_INT 1
29268: MINUS
29269: PPUSH
29270: LD_VAR 0 6
29274: PPUSH
29275: CALL_OW 1
29279: ST_TO_ADDR
// end ;
29280: GO 29197
29282: POP
29283: POP
// result := s_arr [ 1 ] ;
29284: LD_ADDR_VAR 0 4
29288: PUSH
29289: LD_VAR 0 7
29293: PUSH
29294: LD_INT 1
29296: ARRAY
29297: ST_TO_ADDR
// end ; end ;
29298: LD_VAR 0 4
29302: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29303: LD_INT 0
29305: PPUSH
29306: PPUSH
// if not list then
29307: LD_VAR 0 1
29311: NOT
29312: IFFALSE 29316
// exit ;
29314: GO 29407
// i := list [ pos1 ] ;
29316: LD_ADDR_VAR 0 5
29320: PUSH
29321: LD_VAR 0 1
29325: PUSH
29326: LD_VAR 0 2
29330: ARRAY
29331: ST_TO_ADDR
// if not i then
29332: LD_VAR 0 5
29336: NOT
29337: IFFALSE 29341
// exit ;
29339: GO 29407
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29341: LD_ADDR_VAR 0 1
29345: PUSH
29346: LD_VAR 0 1
29350: PPUSH
29351: LD_VAR 0 2
29355: PPUSH
29356: LD_VAR 0 1
29360: PUSH
29361: LD_VAR 0 3
29365: ARRAY
29366: PPUSH
29367: CALL_OW 1
29371: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29372: LD_ADDR_VAR 0 1
29376: PUSH
29377: LD_VAR 0 1
29381: PPUSH
29382: LD_VAR 0 3
29386: PPUSH
29387: LD_VAR 0 5
29391: PPUSH
29392: CALL_OW 1
29396: ST_TO_ADDR
// result := list ;
29397: LD_ADDR_VAR 0 4
29401: PUSH
29402: LD_VAR 0 1
29406: ST_TO_ADDR
// end ;
29407: LD_VAR 0 4
29411: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29412: LD_INT 0
29414: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29415: LD_ADDR_VAR 0 5
29419: PUSH
29420: LD_VAR 0 1
29424: PPUSH
29425: CALL_OW 250
29429: PPUSH
29430: LD_VAR 0 1
29434: PPUSH
29435: CALL_OW 251
29439: PPUSH
29440: LD_VAR 0 2
29444: PPUSH
29445: LD_VAR 0 3
29449: PPUSH
29450: LD_VAR 0 4
29454: PPUSH
29455: CALL 29465 0 5
29459: ST_TO_ADDR
// end ;
29460: LD_VAR 0 5
29464: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29465: LD_INT 0
29467: PPUSH
29468: PPUSH
29469: PPUSH
29470: PPUSH
// if not list then
29471: LD_VAR 0 3
29475: NOT
29476: IFFALSE 29480
// exit ;
29478: GO 29868
// result := [ ] ;
29480: LD_ADDR_VAR 0 6
29484: PUSH
29485: EMPTY
29486: ST_TO_ADDR
// for i in list do
29487: LD_ADDR_VAR 0 7
29491: PUSH
29492: LD_VAR 0 3
29496: PUSH
29497: FOR_IN
29498: IFFALSE 29700
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29500: LD_ADDR_VAR 0 9
29504: PUSH
29505: LD_VAR 0 7
29509: PPUSH
29510: LD_VAR 0 1
29514: PPUSH
29515: LD_VAR 0 2
29519: PPUSH
29520: CALL_OW 297
29524: ST_TO_ADDR
// if not result then
29525: LD_VAR 0 6
29529: NOT
29530: IFFALSE 29556
// result := [ [ i , tmp ] ] else
29532: LD_ADDR_VAR 0 6
29536: PUSH
29537: LD_VAR 0 7
29541: PUSH
29542: LD_VAR 0 9
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: EMPTY
29552: LIST
29553: ST_TO_ADDR
29554: GO 29698
// begin if result [ result ] [ 2 ] < tmp then
29556: LD_VAR 0 6
29560: PUSH
29561: LD_VAR 0 6
29565: ARRAY
29566: PUSH
29567: LD_INT 2
29569: ARRAY
29570: PUSH
29571: LD_VAR 0 9
29575: LESS
29576: IFFALSE 29618
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29578: LD_ADDR_VAR 0 6
29582: PUSH
29583: LD_VAR 0 6
29587: PPUSH
29588: LD_VAR 0 6
29592: PUSH
29593: LD_INT 1
29595: PLUS
29596: PPUSH
29597: LD_VAR 0 7
29601: PUSH
29602: LD_VAR 0 9
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 2
29615: ST_TO_ADDR
29616: GO 29698
// for j = 1 to result do
29618: LD_ADDR_VAR 0 8
29622: PUSH
29623: DOUBLE
29624: LD_INT 1
29626: DEC
29627: ST_TO_ADDR
29628: LD_VAR 0 6
29632: PUSH
29633: FOR_TO
29634: IFFALSE 29696
// begin if tmp < result [ j ] [ 2 ] then
29636: LD_VAR 0 9
29640: PUSH
29641: LD_VAR 0 6
29645: PUSH
29646: LD_VAR 0 8
29650: ARRAY
29651: PUSH
29652: LD_INT 2
29654: ARRAY
29655: LESS
29656: IFFALSE 29694
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29658: LD_ADDR_VAR 0 6
29662: PUSH
29663: LD_VAR 0 6
29667: PPUSH
29668: LD_VAR 0 8
29672: PPUSH
29673: LD_VAR 0 7
29677: PUSH
29678: LD_VAR 0 9
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PPUSH
29687: CALL_OW 2
29691: ST_TO_ADDR
// break ;
29692: GO 29696
// end ; end ;
29694: GO 29633
29696: POP
29697: POP
// end ; end ;
29698: GO 29497
29700: POP
29701: POP
// if result and not asc then
29702: LD_VAR 0 6
29706: PUSH
29707: LD_VAR 0 4
29711: NOT
29712: AND
29713: IFFALSE 29788
// begin tmp := result ;
29715: LD_ADDR_VAR 0 9
29719: PUSH
29720: LD_VAR 0 6
29724: ST_TO_ADDR
// for i = tmp downto 1 do
29725: LD_ADDR_VAR 0 7
29729: PUSH
29730: DOUBLE
29731: LD_VAR 0 9
29735: INC
29736: ST_TO_ADDR
29737: LD_INT 1
29739: PUSH
29740: FOR_DOWNTO
29741: IFFALSE 29786
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29743: LD_ADDR_VAR 0 6
29747: PUSH
29748: LD_VAR 0 6
29752: PPUSH
29753: LD_VAR 0 9
29757: PUSH
29758: LD_VAR 0 7
29762: MINUS
29763: PUSH
29764: LD_INT 1
29766: PLUS
29767: PPUSH
29768: LD_VAR 0 9
29772: PUSH
29773: LD_VAR 0 7
29777: ARRAY
29778: PPUSH
29779: CALL_OW 1
29783: ST_TO_ADDR
29784: GO 29740
29786: POP
29787: POP
// end ; tmp := [ ] ;
29788: LD_ADDR_VAR 0 9
29792: PUSH
29793: EMPTY
29794: ST_TO_ADDR
// if mode then
29795: LD_VAR 0 5
29799: IFFALSE 29868
// begin for i = 1 to result do
29801: LD_ADDR_VAR 0 7
29805: PUSH
29806: DOUBLE
29807: LD_INT 1
29809: DEC
29810: ST_TO_ADDR
29811: LD_VAR 0 6
29815: PUSH
29816: FOR_TO
29817: IFFALSE 29856
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29819: LD_ADDR_VAR 0 9
29823: PUSH
29824: LD_VAR 0 9
29828: PPUSH
29829: LD_VAR 0 7
29833: PPUSH
29834: LD_VAR 0 6
29838: PUSH
29839: LD_VAR 0 7
29843: ARRAY
29844: PUSH
29845: LD_INT 1
29847: ARRAY
29848: PPUSH
29849: CALL_OW 1
29853: ST_TO_ADDR
29854: GO 29816
29856: POP
29857: POP
// result := tmp ;
29858: LD_ADDR_VAR 0 6
29862: PUSH
29863: LD_VAR 0 9
29867: ST_TO_ADDR
// end ; end ;
29868: LD_VAR 0 6
29872: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29873: LD_INT 0
29875: PPUSH
29876: PPUSH
29877: PPUSH
29878: PPUSH
29879: PPUSH
29880: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29881: LD_ADDR_VAR 0 5
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: EMPTY
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: ST_TO_ADDR
// if not x or not y then
29903: LD_VAR 0 2
29907: NOT
29908: PUSH
29909: LD_VAR 0 3
29913: NOT
29914: OR
29915: IFFALSE 29919
// exit ;
29917: GO 31565
// if not range then
29919: LD_VAR 0 4
29923: NOT
29924: IFFALSE 29934
// range := 10 ;
29926: LD_ADDR_VAR 0 4
29930: PUSH
29931: LD_INT 10
29933: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29934: LD_ADDR_VAR 0 8
29938: PUSH
29939: LD_INT 81
29941: PUSH
29942: LD_VAR 0 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 92
29953: PUSH
29954: LD_VAR 0 2
29958: PUSH
29959: LD_VAR 0 3
29963: PUSH
29964: LD_VAR 0 4
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 3
29977: PUSH
29978: LD_INT 21
29980: PUSH
29981: LD_INT 3
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: LIST
29996: PPUSH
29997: CALL_OW 69
30001: ST_TO_ADDR
// if not tmp then
30002: LD_VAR 0 8
30006: NOT
30007: IFFALSE 30011
// exit ;
30009: GO 31565
// for i in tmp do
30011: LD_ADDR_VAR 0 6
30015: PUSH
30016: LD_VAR 0 8
30020: PUSH
30021: FOR_IN
30022: IFFALSE 31540
// begin points := [ 0 , 0 , 0 ] ;
30024: LD_ADDR_VAR 0 9
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: ST_TO_ADDR
// bpoints := 1 ;
30043: LD_ADDR_VAR 0 10
30047: PUSH
30048: LD_INT 1
30050: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30051: LD_VAR 0 6
30055: PPUSH
30056: CALL_OW 247
30060: PUSH
30061: LD_INT 1
30063: DOUBLE
30064: EQUAL
30065: IFTRUE 30069
30067: GO 30647
30069: POP
// begin if GetClass ( i ) = 1 then
30070: LD_VAR 0 6
30074: PPUSH
30075: CALL_OW 257
30079: PUSH
30080: LD_INT 1
30082: EQUAL
30083: IFFALSE 30104
// points := [ 10 , 5 , 3 ] ;
30085: LD_ADDR_VAR 0 9
30089: PUSH
30090: LD_INT 10
30092: PUSH
30093: LD_INT 5
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: LIST
30103: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30104: LD_VAR 0 6
30108: PPUSH
30109: CALL_OW 257
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: LD_INT 4
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: IN
30128: IFFALSE 30149
// points := [ 3 , 2 , 1 ] ;
30130: LD_ADDR_VAR 0 9
30134: PUSH
30135: LD_INT 3
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: LIST
30148: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30149: LD_VAR 0 6
30153: PPUSH
30154: CALL_OW 257
30158: PUSH
30159: LD_INT 5
30161: EQUAL
30162: IFFALSE 30183
// points := [ 130 , 5 , 2 ] ;
30164: LD_ADDR_VAR 0 9
30168: PUSH
30169: LD_INT 130
30171: PUSH
30172: LD_INT 5
30174: PUSH
30175: LD_INT 2
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30183: LD_VAR 0 6
30187: PPUSH
30188: CALL_OW 257
30192: PUSH
30193: LD_INT 8
30195: EQUAL
30196: IFFALSE 30217
// points := [ 35 , 35 , 30 ] ;
30198: LD_ADDR_VAR 0 9
30202: PUSH
30203: LD_INT 35
30205: PUSH
30206: LD_INT 35
30208: PUSH
30209: LD_INT 30
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30217: LD_VAR 0 6
30221: PPUSH
30222: CALL_OW 257
30226: PUSH
30227: LD_INT 9
30229: EQUAL
30230: IFFALSE 30251
// points := [ 20 , 55 , 40 ] ;
30232: LD_ADDR_VAR 0 9
30236: PUSH
30237: LD_INT 20
30239: PUSH
30240: LD_INT 55
30242: PUSH
30243: LD_INT 40
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: LIST
30250: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30251: LD_VAR 0 6
30255: PPUSH
30256: CALL_OW 257
30260: PUSH
30261: LD_INT 12
30263: PUSH
30264: LD_INT 16
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: IN
30271: IFFALSE 30292
// points := [ 5 , 3 , 2 ] ;
30273: LD_ADDR_VAR 0 9
30277: PUSH
30278: LD_INT 5
30280: PUSH
30281: LD_INT 3
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: LIST
30291: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30292: LD_VAR 0 6
30296: PPUSH
30297: CALL_OW 257
30301: PUSH
30302: LD_INT 17
30304: EQUAL
30305: IFFALSE 30326
// points := [ 100 , 50 , 75 ] ;
30307: LD_ADDR_VAR 0 9
30311: PUSH
30312: LD_INT 100
30314: PUSH
30315: LD_INT 50
30317: PUSH
30318: LD_INT 75
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: LIST
30325: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30326: LD_VAR 0 6
30330: PPUSH
30331: CALL_OW 257
30335: PUSH
30336: LD_INT 15
30338: EQUAL
30339: IFFALSE 30360
// points := [ 10 , 5 , 3 ] ;
30341: LD_ADDR_VAR 0 9
30345: PUSH
30346: LD_INT 10
30348: PUSH
30349: LD_INT 5
30351: PUSH
30352: LD_INT 3
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: LIST
30359: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30360: LD_VAR 0 6
30364: PPUSH
30365: CALL_OW 257
30369: PUSH
30370: LD_INT 14
30372: EQUAL
30373: IFFALSE 30394
// points := [ 10 , 0 , 0 ] ;
30375: LD_ADDR_VAR 0 9
30379: PUSH
30380: LD_INT 10
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30394: LD_VAR 0 6
30398: PPUSH
30399: CALL_OW 257
30403: PUSH
30404: LD_INT 11
30406: EQUAL
30407: IFFALSE 30428
// points := [ 30 , 10 , 5 ] ;
30409: LD_ADDR_VAR 0 9
30413: PUSH
30414: LD_INT 30
30416: PUSH
30417: LD_INT 10
30419: PUSH
30420: LD_INT 5
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: LIST
30427: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30428: LD_VAR 0 1
30432: PPUSH
30433: LD_INT 5
30435: PPUSH
30436: CALL_OW 321
30440: PUSH
30441: LD_INT 2
30443: EQUAL
30444: IFFALSE 30461
// bpoints := bpoints * 1.8 ;
30446: LD_ADDR_VAR 0 10
30450: PUSH
30451: LD_VAR 0 10
30455: PUSH
30456: LD_REAL  1.80000000000000E+0000
30459: MUL
30460: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30461: LD_VAR 0 6
30465: PPUSH
30466: CALL_OW 257
30470: PUSH
30471: LD_INT 1
30473: PUSH
30474: LD_INT 2
30476: PUSH
30477: LD_INT 3
30479: PUSH
30480: LD_INT 4
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: IN
30489: PUSH
30490: LD_VAR 0 1
30494: PPUSH
30495: LD_INT 51
30497: PPUSH
30498: CALL_OW 321
30502: PUSH
30503: LD_INT 2
30505: EQUAL
30506: AND
30507: IFFALSE 30524
// bpoints := bpoints * 1.2 ;
30509: LD_ADDR_VAR 0 10
30513: PUSH
30514: LD_VAR 0 10
30518: PUSH
30519: LD_REAL  1.20000000000000E+0000
30522: MUL
30523: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30524: LD_VAR 0 6
30528: PPUSH
30529: CALL_OW 257
30533: PUSH
30534: LD_INT 5
30536: PUSH
30537: LD_INT 7
30539: PUSH
30540: LD_INT 9
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: LIST
30547: IN
30548: PUSH
30549: LD_VAR 0 1
30553: PPUSH
30554: LD_INT 52
30556: PPUSH
30557: CALL_OW 321
30561: PUSH
30562: LD_INT 2
30564: EQUAL
30565: AND
30566: IFFALSE 30583
// bpoints := bpoints * 1.5 ;
30568: LD_ADDR_VAR 0 10
30572: PUSH
30573: LD_VAR 0 10
30577: PUSH
30578: LD_REAL  1.50000000000000E+0000
30581: MUL
30582: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30583: LD_VAR 0 1
30587: PPUSH
30588: LD_INT 66
30590: PPUSH
30591: CALL_OW 321
30595: PUSH
30596: LD_INT 2
30598: EQUAL
30599: IFFALSE 30616
// bpoints := bpoints * 1.1 ;
30601: LD_ADDR_VAR 0 10
30605: PUSH
30606: LD_VAR 0 10
30610: PUSH
30611: LD_REAL  1.10000000000000E+0000
30614: MUL
30615: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30616: LD_ADDR_VAR 0 10
30620: PUSH
30621: LD_VAR 0 10
30625: PUSH
30626: LD_VAR 0 6
30630: PPUSH
30631: LD_INT 1
30633: PPUSH
30634: CALL_OW 259
30638: PUSH
30639: LD_REAL  1.15000000000000E+0000
30642: MUL
30643: MUL
30644: ST_TO_ADDR
// end ; unit_vehicle :
30645: GO 31469
30647: LD_INT 2
30649: DOUBLE
30650: EQUAL
30651: IFTRUE 30655
30653: GO 31457
30655: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30656: LD_VAR 0 6
30660: PPUSH
30661: CALL_OW 264
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 42
30671: PUSH
30672: LD_INT 24
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: IN
30680: IFFALSE 30701
// points := [ 25 , 5 , 3 ] ;
30682: LD_ADDR_VAR 0 9
30686: PUSH
30687: LD_INT 25
30689: PUSH
30690: LD_INT 5
30692: PUSH
30693: LD_INT 3
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30701: LD_VAR 0 6
30705: PPUSH
30706: CALL_OW 264
30710: PUSH
30711: LD_INT 4
30713: PUSH
30714: LD_INT 43
30716: PUSH
30717: LD_INT 25
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: IN
30725: IFFALSE 30746
// points := [ 40 , 15 , 5 ] ;
30727: LD_ADDR_VAR 0 9
30731: PUSH
30732: LD_INT 40
30734: PUSH
30735: LD_INT 15
30737: PUSH
30738: LD_INT 5
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30746: LD_VAR 0 6
30750: PPUSH
30751: CALL_OW 264
30755: PUSH
30756: LD_INT 3
30758: PUSH
30759: LD_INT 23
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: IN
30766: IFFALSE 30787
// points := [ 7 , 25 , 8 ] ;
30768: LD_ADDR_VAR 0 9
30772: PUSH
30773: LD_INT 7
30775: PUSH
30776: LD_INT 25
30778: PUSH
30779: LD_INT 8
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30787: LD_VAR 0 6
30791: PPUSH
30792: CALL_OW 264
30796: PUSH
30797: LD_INT 5
30799: PUSH
30800: LD_INT 27
30802: PUSH
30803: LD_INT 44
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: IN
30811: IFFALSE 30832
// points := [ 14 , 50 , 16 ] ;
30813: LD_ADDR_VAR 0 9
30817: PUSH
30818: LD_INT 14
30820: PUSH
30821: LD_INT 50
30823: PUSH
30824: LD_INT 16
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: LIST
30831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30832: LD_VAR 0 6
30836: PPUSH
30837: CALL_OW 264
30841: PUSH
30842: LD_INT 6
30844: PUSH
30845: LD_INT 46
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: IN
30852: IFFALSE 30873
// points := [ 32 , 120 , 70 ] ;
30854: LD_ADDR_VAR 0 9
30858: PUSH
30859: LD_INT 32
30861: PUSH
30862: LD_INT 120
30864: PUSH
30865: LD_INT 70
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30873: LD_VAR 0 6
30877: PPUSH
30878: CALL_OW 264
30882: PUSH
30883: LD_INT 7
30885: PUSH
30886: LD_INT 28
30888: PUSH
30889: LD_INT 45
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: IN
30897: IFFALSE 30918
// points := [ 35 , 20 , 45 ] ;
30899: LD_ADDR_VAR 0 9
30903: PUSH
30904: LD_INT 35
30906: PUSH
30907: LD_INT 20
30909: PUSH
30910: LD_INT 45
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30918: LD_VAR 0 6
30922: PPUSH
30923: CALL_OW 264
30927: PUSH
30928: LD_INT 47
30930: PUSH
30931: EMPTY
30932: LIST
30933: IN
30934: IFFALSE 30955
// points := [ 67 , 45 , 75 ] ;
30936: LD_ADDR_VAR 0 9
30940: PUSH
30941: LD_INT 67
30943: PUSH
30944: LD_INT 45
30946: PUSH
30947: LD_INT 75
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30955: LD_VAR 0 6
30959: PPUSH
30960: CALL_OW 264
30964: PUSH
30965: LD_INT 26
30967: PUSH
30968: EMPTY
30969: LIST
30970: IN
30971: IFFALSE 30992
// points := [ 120 , 30 , 80 ] ;
30973: LD_ADDR_VAR 0 9
30977: PUSH
30978: LD_INT 120
30980: PUSH
30981: LD_INT 30
30983: PUSH
30984: LD_INT 80
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: LIST
30991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30992: LD_VAR 0 6
30996: PPUSH
30997: CALL_OW 264
31001: PUSH
31002: LD_INT 22
31004: PUSH
31005: EMPTY
31006: LIST
31007: IN
31008: IFFALSE 31029
// points := [ 40 , 1 , 1 ] ;
31010: LD_ADDR_VAR 0 9
31014: PUSH
31015: LD_INT 40
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31029: LD_VAR 0 6
31033: PPUSH
31034: CALL_OW 264
31038: PUSH
31039: LD_INT 29
31041: PUSH
31042: EMPTY
31043: LIST
31044: IN
31045: IFFALSE 31066
// points := [ 70 , 200 , 400 ] ;
31047: LD_ADDR_VAR 0 9
31051: PUSH
31052: LD_INT 70
31054: PUSH
31055: LD_INT 200
31057: PUSH
31058: LD_INT 400
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31066: LD_VAR 0 6
31070: PPUSH
31071: CALL_OW 264
31075: PUSH
31076: LD_INT 14
31078: PUSH
31079: LD_INT 53
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: IN
31086: IFFALSE 31107
// points := [ 40 , 10 , 20 ] ;
31088: LD_ADDR_VAR 0 9
31092: PUSH
31093: LD_INT 40
31095: PUSH
31096: LD_INT 10
31098: PUSH
31099: LD_INT 20
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31107: LD_VAR 0 6
31111: PPUSH
31112: CALL_OW 264
31116: PUSH
31117: LD_INT 9
31119: PUSH
31120: EMPTY
31121: LIST
31122: IN
31123: IFFALSE 31144
// points := [ 5 , 70 , 20 ] ;
31125: LD_ADDR_VAR 0 9
31129: PUSH
31130: LD_INT 5
31132: PUSH
31133: LD_INT 70
31135: PUSH
31136: LD_INT 20
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31144: LD_VAR 0 6
31148: PPUSH
31149: CALL_OW 264
31153: PUSH
31154: LD_INT 10
31156: PUSH
31157: EMPTY
31158: LIST
31159: IN
31160: IFFALSE 31181
// points := [ 35 , 110 , 70 ] ;
31162: LD_ADDR_VAR 0 9
31166: PUSH
31167: LD_INT 35
31169: PUSH
31170: LD_INT 110
31172: PUSH
31173: LD_INT 70
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31181: LD_VAR 0 6
31185: PPUSH
31186: CALL_OW 265
31190: PUSH
31191: LD_INT 25
31193: EQUAL
31194: IFFALSE 31215
// points := [ 80 , 65 , 100 ] ;
31196: LD_ADDR_VAR 0 9
31200: PUSH
31201: LD_INT 80
31203: PUSH
31204: LD_INT 65
31206: PUSH
31207: LD_INT 100
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31215: LD_VAR 0 6
31219: PPUSH
31220: CALL_OW 263
31224: PUSH
31225: LD_INT 1
31227: EQUAL
31228: IFFALSE 31263
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31230: LD_ADDR_VAR 0 10
31234: PUSH
31235: LD_VAR 0 10
31239: PUSH
31240: LD_VAR 0 6
31244: PPUSH
31245: CALL_OW 311
31249: PPUSH
31250: LD_INT 3
31252: PPUSH
31253: CALL_OW 259
31257: PUSH
31258: LD_INT 4
31260: MUL
31261: MUL
31262: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31263: LD_VAR 0 6
31267: PPUSH
31268: CALL_OW 263
31272: PUSH
31273: LD_INT 2
31275: EQUAL
31276: IFFALSE 31327
// begin j := IsControledBy ( i ) ;
31278: LD_ADDR_VAR 0 7
31282: PUSH
31283: LD_VAR 0 6
31287: PPUSH
31288: CALL_OW 312
31292: ST_TO_ADDR
// if j then
31293: LD_VAR 0 7
31297: IFFALSE 31327
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31299: LD_ADDR_VAR 0 10
31303: PUSH
31304: LD_VAR 0 10
31308: PUSH
31309: LD_VAR 0 7
31313: PPUSH
31314: LD_INT 3
31316: PPUSH
31317: CALL_OW 259
31321: PUSH
31322: LD_INT 3
31324: MUL
31325: MUL
31326: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31327: LD_VAR 0 6
31331: PPUSH
31332: CALL_OW 264
31336: PUSH
31337: LD_INT 5
31339: PUSH
31340: LD_INT 6
31342: PUSH
31343: LD_INT 46
31345: PUSH
31346: LD_INT 44
31348: PUSH
31349: LD_INT 47
31351: PUSH
31352: LD_INT 45
31354: PUSH
31355: LD_INT 28
31357: PUSH
31358: LD_INT 7
31360: PUSH
31361: LD_INT 27
31363: PUSH
31364: LD_INT 29
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: IN
31379: PUSH
31380: LD_VAR 0 1
31384: PPUSH
31385: LD_INT 52
31387: PPUSH
31388: CALL_OW 321
31392: PUSH
31393: LD_INT 2
31395: EQUAL
31396: AND
31397: IFFALSE 31414
// bpoints := bpoints * 1.2 ;
31399: LD_ADDR_VAR 0 10
31403: PUSH
31404: LD_VAR 0 10
31408: PUSH
31409: LD_REAL  1.20000000000000E+0000
31412: MUL
31413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31414: LD_VAR 0 6
31418: PPUSH
31419: CALL_OW 264
31423: PUSH
31424: LD_INT 6
31426: PUSH
31427: LD_INT 46
31429: PUSH
31430: LD_INT 47
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: IN
31438: IFFALSE 31455
// bpoints := bpoints * 1.2 ;
31440: LD_ADDR_VAR 0 10
31444: PUSH
31445: LD_VAR 0 10
31449: PUSH
31450: LD_REAL  1.20000000000000E+0000
31453: MUL
31454: ST_TO_ADDR
// end ; unit_building :
31455: GO 31469
31457: LD_INT 3
31459: DOUBLE
31460: EQUAL
31461: IFTRUE 31465
31463: GO 31468
31465: POP
// ; end ;
31466: GO 31469
31468: POP
// for j = 1 to 3 do
31469: LD_ADDR_VAR 0 7
31473: PUSH
31474: DOUBLE
31475: LD_INT 1
31477: DEC
31478: ST_TO_ADDR
31479: LD_INT 3
31481: PUSH
31482: FOR_TO
31483: IFFALSE 31536
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31485: LD_ADDR_VAR 0 5
31489: PUSH
31490: LD_VAR 0 5
31494: PPUSH
31495: LD_VAR 0 7
31499: PPUSH
31500: LD_VAR 0 5
31504: PUSH
31505: LD_VAR 0 7
31509: ARRAY
31510: PUSH
31511: LD_VAR 0 9
31515: PUSH
31516: LD_VAR 0 7
31520: ARRAY
31521: PUSH
31522: LD_VAR 0 10
31526: MUL
31527: PLUS
31528: PPUSH
31529: CALL_OW 1
31533: ST_TO_ADDR
31534: GO 31482
31536: POP
31537: POP
// end ;
31538: GO 30021
31540: POP
31541: POP
// result := Replace ( result , 4 , tmp ) ;
31542: LD_ADDR_VAR 0 5
31546: PUSH
31547: LD_VAR 0 5
31551: PPUSH
31552: LD_INT 4
31554: PPUSH
31555: LD_VAR 0 8
31559: PPUSH
31560: CALL_OW 1
31564: ST_TO_ADDR
// end ;
31565: LD_VAR 0 5
31569: RET
// export function DangerAtRange ( unit , range ) ; begin
31570: LD_INT 0
31572: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31573: LD_ADDR_VAR 0 3
31577: PUSH
31578: LD_VAR 0 1
31582: PPUSH
31583: CALL_OW 255
31587: PPUSH
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 250
31597: PPUSH
31598: LD_VAR 0 1
31602: PPUSH
31603: CALL_OW 251
31607: PPUSH
31608: LD_VAR 0 2
31612: PPUSH
31613: CALL 29873 0 4
31617: ST_TO_ADDR
// end ;
31618: LD_VAR 0 3
31622: RET
// export function DangerInArea ( side , area ) ; begin
31623: LD_INT 0
31625: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31626: LD_ADDR_VAR 0 3
31630: PUSH
31631: LD_VAR 0 2
31635: PPUSH
31636: LD_INT 81
31638: PUSH
31639: LD_VAR 0 1
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PPUSH
31648: CALL_OW 70
31652: ST_TO_ADDR
// end ;
31653: LD_VAR 0 3
31657: RET
// export function IsExtension ( b ) ; begin
31658: LD_INT 0
31660: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31661: LD_ADDR_VAR 0 2
31665: PUSH
31666: LD_VAR 0 1
31670: PUSH
31671: LD_INT 23
31673: PUSH
31674: LD_INT 20
31676: PUSH
31677: LD_INT 22
31679: PUSH
31680: LD_INT 17
31682: PUSH
31683: LD_INT 24
31685: PUSH
31686: LD_INT 21
31688: PUSH
31689: LD_INT 19
31691: PUSH
31692: LD_INT 16
31694: PUSH
31695: LD_INT 25
31697: PUSH
31698: LD_INT 18
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: IN
31713: ST_TO_ADDR
// end ;
31714: LD_VAR 0 2
31718: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31719: LD_INT 0
31721: PPUSH
31722: PPUSH
31723: PPUSH
// result := [ ] ;
31724: LD_ADDR_VAR 0 4
31728: PUSH
31729: EMPTY
31730: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31731: LD_ADDR_VAR 0 5
31735: PUSH
31736: LD_VAR 0 2
31740: PPUSH
31741: LD_INT 21
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PPUSH
31751: CALL_OW 70
31755: ST_TO_ADDR
// if not tmp then
31756: LD_VAR 0 5
31760: NOT
31761: IFFALSE 31765
// exit ;
31763: GO 31829
// if checkLink then
31765: LD_VAR 0 3
31769: IFFALSE 31819
// begin for i in tmp do
31771: LD_ADDR_VAR 0 6
31775: PUSH
31776: LD_VAR 0 5
31780: PUSH
31781: FOR_IN
31782: IFFALSE 31817
// if GetBase ( i ) <> base then
31784: LD_VAR 0 6
31788: PPUSH
31789: CALL_OW 274
31793: PUSH
31794: LD_VAR 0 1
31798: NONEQUAL
31799: IFFALSE 31815
// ComLinkToBase ( base , i ) ;
31801: LD_VAR 0 1
31805: PPUSH
31806: LD_VAR 0 6
31810: PPUSH
31811: CALL_OW 169
31815: GO 31781
31817: POP
31818: POP
// end ; result := tmp ;
31819: LD_ADDR_VAR 0 4
31823: PUSH
31824: LD_VAR 0 5
31828: ST_TO_ADDR
// end ;
31829: LD_VAR 0 4
31833: RET
// export function ComComplete ( units , b ) ; var i ; begin
31834: LD_INT 0
31836: PPUSH
31837: PPUSH
// if not units then
31838: LD_VAR 0 1
31842: NOT
31843: IFFALSE 31847
// exit ;
31845: GO 31937
// for i in units do
31847: LD_ADDR_VAR 0 4
31851: PUSH
31852: LD_VAR 0 1
31856: PUSH
31857: FOR_IN
31858: IFFALSE 31935
// if BuildingStatus ( b ) = bs_build then
31860: LD_VAR 0 2
31864: PPUSH
31865: CALL_OW 461
31869: PUSH
31870: LD_INT 1
31872: EQUAL
31873: IFFALSE 31933
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31875: LD_VAR 0 4
31879: PPUSH
31880: LD_STRING h
31882: PUSH
31883: LD_VAR 0 2
31887: PPUSH
31888: CALL_OW 250
31892: PUSH
31893: LD_VAR 0 2
31897: PPUSH
31898: CALL_OW 251
31902: PUSH
31903: LD_VAR 0 2
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: PUSH
31926: EMPTY
31927: LIST
31928: PPUSH
31929: CALL_OW 446
31933: GO 31857
31935: POP
31936: POP
// end ;
31937: LD_VAR 0 3
31941: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31942: LD_INT 0
31944: PPUSH
31945: PPUSH
31946: PPUSH
31947: PPUSH
31948: PPUSH
31949: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31950: LD_VAR 0 1
31954: NOT
31955: PUSH
31956: LD_VAR 0 1
31960: PPUSH
31961: CALL_OW 263
31965: PUSH
31966: LD_INT 2
31968: EQUAL
31969: NOT
31970: OR
31971: IFFALSE 31975
// exit ;
31973: GO 32291
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31975: LD_ADDR_VAR 0 6
31979: PUSH
31980: LD_INT 22
31982: PUSH
31983: LD_VAR 0 1
31987: PPUSH
31988: CALL_OW 255
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 2
31999: PUSH
32000: LD_INT 30
32002: PUSH
32003: LD_INT 36
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 34
32012: PUSH
32013: LD_INT 31
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PPUSH
32029: CALL_OW 69
32033: ST_TO_ADDR
// if not tmp then
32034: LD_VAR 0 6
32038: NOT
32039: IFFALSE 32043
// exit ;
32041: GO 32291
// result := [ ] ;
32043: LD_ADDR_VAR 0 2
32047: PUSH
32048: EMPTY
32049: ST_TO_ADDR
// for i in tmp do
32050: LD_ADDR_VAR 0 3
32054: PUSH
32055: LD_VAR 0 6
32059: PUSH
32060: FOR_IN
32061: IFFALSE 32132
// begin t := UnitsInside ( i ) ;
32063: LD_ADDR_VAR 0 4
32067: PUSH
32068: LD_VAR 0 3
32072: PPUSH
32073: CALL_OW 313
32077: ST_TO_ADDR
// if t then
32078: LD_VAR 0 4
32082: IFFALSE 32130
// for j in t do
32084: LD_ADDR_VAR 0 7
32088: PUSH
32089: LD_VAR 0 4
32093: PUSH
32094: FOR_IN
32095: IFFALSE 32128
// result := Insert ( result , result + 1 , j ) ;
32097: LD_ADDR_VAR 0 2
32101: PUSH
32102: LD_VAR 0 2
32106: PPUSH
32107: LD_VAR 0 2
32111: PUSH
32112: LD_INT 1
32114: PLUS
32115: PPUSH
32116: LD_VAR 0 7
32120: PPUSH
32121: CALL_OW 2
32125: ST_TO_ADDR
32126: GO 32094
32128: POP
32129: POP
// end ;
32130: GO 32060
32132: POP
32133: POP
// if not result then
32134: LD_VAR 0 2
32138: NOT
32139: IFFALSE 32143
// exit ;
32141: GO 32291
// mech := result [ 1 ] ;
32143: LD_ADDR_VAR 0 5
32147: PUSH
32148: LD_VAR 0 2
32152: PUSH
32153: LD_INT 1
32155: ARRAY
32156: ST_TO_ADDR
// if result > 1 then
32157: LD_VAR 0 2
32161: PUSH
32162: LD_INT 1
32164: GREATER
32165: IFFALSE 32277
// for i = 2 to result do
32167: LD_ADDR_VAR 0 3
32171: PUSH
32172: DOUBLE
32173: LD_INT 2
32175: DEC
32176: ST_TO_ADDR
32177: LD_VAR 0 2
32181: PUSH
32182: FOR_TO
32183: IFFALSE 32275
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32185: LD_ADDR_VAR 0 4
32189: PUSH
32190: LD_VAR 0 2
32194: PUSH
32195: LD_VAR 0 3
32199: ARRAY
32200: PPUSH
32201: LD_INT 3
32203: PPUSH
32204: CALL_OW 259
32208: PUSH
32209: LD_VAR 0 2
32213: PUSH
32214: LD_VAR 0 3
32218: ARRAY
32219: PPUSH
32220: CALL_OW 432
32224: MINUS
32225: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32226: LD_VAR 0 4
32230: PUSH
32231: LD_VAR 0 5
32235: PPUSH
32236: LD_INT 3
32238: PPUSH
32239: CALL_OW 259
32243: PUSH
32244: LD_VAR 0 5
32248: PPUSH
32249: CALL_OW 432
32253: MINUS
32254: GREATEREQUAL
32255: IFFALSE 32273
// mech := result [ i ] ;
32257: LD_ADDR_VAR 0 5
32261: PUSH
32262: LD_VAR 0 2
32266: PUSH
32267: LD_VAR 0 3
32271: ARRAY
32272: ST_TO_ADDR
// end ;
32273: GO 32182
32275: POP
32276: POP
// ComLinkTo ( vehicle , mech ) ;
32277: LD_VAR 0 1
32281: PPUSH
32282: LD_VAR 0 5
32286: PPUSH
32287: CALL_OW 135
// end ;
32291: LD_VAR 0 2
32295: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32296: LD_INT 0
32298: PPUSH
32299: PPUSH
32300: PPUSH
32301: PPUSH
32302: PPUSH
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
// result := [ ] ;
32311: LD_ADDR_VAR 0 7
32315: PUSH
32316: EMPTY
32317: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32318: LD_VAR 0 1
32322: PPUSH
32323: CALL_OW 266
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: IN
32338: NOT
32339: IFFALSE 32343
// exit ;
32341: GO 33977
// if name then
32343: LD_VAR 0 3
32347: IFFALSE 32363
// SetBName ( base_dep , name ) ;
32349: LD_VAR 0 1
32353: PPUSH
32354: LD_VAR 0 3
32358: PPUSH
32359: CALL_OW 500
// base := GetBase ( base_dep ) ;
32363: LD_ADDR_VAR 0 15
32367: PUSH
32368: LD_VAR 0 1
32372: PPUSH
32373: CALL_OW 274
32377: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32378: LD_ADDR_VAR 0 16
32382: PUSH
32383: LD_VAR 0 1
32387: PPUSH
32388: CALL_OW 255
32392: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32393: LD_ADDR_VAR 0 17
32397: PUSH
32398: LD_VAR 0 1
32402: PPUSH
32403: CALL_OW 248
32407: ST_TO_ADDR
// if sources then
32408: LD_VAR 0 5
32412: IFFALSE 32459
// for i = 1 to 3 do
32414: LD_ADDR_VAR 0 8
32418: PUSH
32419: DOUBLE
32420: LD_INT 1
32422: DEC
32423: ST_TO_ADDR
32424: LD_INT 3
32426: PUSH
32427: FOR_TO
32428: IFFALSE 32457
// AddResourceType ( base , i , sources [ i ] ) ;
32430: LD_VAR 0 15
32434: PPUSH
32435: LD_VAR 0 8
32439: PPUSH
32440: LD_VAR 0 5
32444: PUSH
32445: LD_VAR 0 8
32449: ARRAY
32450: PPUSH
32451: CALL_OW 276
32455: GO 32427
32457: POP
32458: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32459: LD_ADDR_VAR 0 18
32463: PUSH
32464: LD_VAR 0 15
32468: PPUSH
32469: LD_VAR 0 2
32473: PPUSH
32474: LD_INT 1
32476: PPUSH
32477: CALL 31719 0 3
32481: ST_TO_ADDR
// InitHc ;
32482: CALL_OW 19
// InitUc ;
32486: CALL_OW 18
// uc_side := side ;
32490: LD_ADDR_OWVAR 20
32494: PUSH
32495: LD_VAR 0 16
32499: ST_TO_ADDR
// uc_nation := nation ;
32500: LD_ADDR_OWVAR 21
32504: PUSH
32505: LD_VAR 0 17
32509: ST_TO_ADDR
// if buildings then
32510: LD_VAR 0 18
32514: IFFALSE 33836
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32516: LD_ADDR_VAR 0 19
32520: PUSH
32521: LD_VAR 0 18
32525: PPUSH
32526: LD_INT 2
32528: PUSH
32529: LD_INT 30
32531: PUSH
32532: LD_INT 29
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 30
32541: PUSH
32542: LD_INT 30
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: PPUSH
32554: CALL_OW 72
32558: ST_TO_ADDR
// if tmp then
32559: LD_VAR 0 19
32563: IFFALSE 32611
// for i in tmp do
32565: LD_ADDR_VAR 0 8
32569: PUSH
32570: LD_VAR 0 19
32574: PUSH
32575: FOR_IN
32576: IFFALSE 32609
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32578: LD_VAR 0 8
32582: PPUSH
32583: CALL_OW 250
32587: PPUSH
32588: LD_VAR 0 8
32592: PPUSH
32593: CALL_OW 251
32597: PPUSH
32598: LD_VAR 0 16
32602: PPUSH
32603: CALL_OW 441
32607: GO 32575
32609: POP
32610: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32611: LD_VAR 0 18
32615: PPUSH
32616: LD_INT 2
32618: PUSH
32619: LD_INT 30
32621: PUSH
32622: LD_INT 32
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 30
32631: PUSH
32632: LD_INT 33
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: PPUSH
32644: CALL_OW 72
32648: IFFALSE 32736
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32650: LD_ADDR_VAR 0 8
32654: PUSH
32655: LD_VAR 0 18
32659: PPUSH
32660: LD_INT 2
32662: PUSH
32663: LD_INT 30
32665: PUSH
32666: LD_INT 32
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 30
32675: PUSH
32676: LD_INT 33
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: LIST
32687: PPUSH
32688: CALL_OW 72
32692: PUSH
32693: FOR_IN
32694: IFFALSE 32734
// begin if not GetBWeapon ( i ) then
32696: LD_VAR 0 8
32700: PPUSH
32701: CALL_OW 269
32705: NOT
32706: IFFALSE 32732
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32708: LD_VAR 0 8
32712: PPUSH
32713: LD_VAR 0 8
32717: PPUSH
32718: LD_VAR 0 2
32722: PPUSH
32723: CALL 33982 0 2
32727: PPUSH
32728: CALL_OW 431
// end ;
32732: GO 32693
32734: POP
32735: POP
// end ; for i = 1 to personel do
32736: LD_ADDR_VAR 0 8
32740: PUSH
32741: DOUBLE
32742: LD_INT 1
32744: DEC
32745: ST_TO_ADDR
32746: LD_VAR 0 6
32750: PUSH
32751: FOR_TO
32752: IFFALSE 33816
// begin if i > 4 then
32754: LD_VAR 0 8
32758: PUSH
32759: LD_INT 4
32761: GREATER
32762: IFFALSE 32766
// break ;
32764: GO 33816
// case i of 1 :
32766: LD_VAR 0 8
32770: PUSH
32771: LD_INT 1
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32779
32777: GO 32859
32779: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32780: LD_ADDR_VAR 0 12
32784: PUSH
32785: LD_VAR 0 18
32789: PPUSH
32790: LD_INT 22
32792: PUSH
32793: LD_VAR 0 16
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 58
32804: PUSH
32805: EMPTY
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: LD_INT 30
32813: PUSH
32814: LD_INT 32
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 30
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 30
32833: PUSH
32834: LD_INT 5
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: PPUSH
32852: CALL_OW 72
32856: ST_TO_ADDR
32857: GO 33081
32859: LD_INT 2
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32867
32865: GO 32929
32867: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32868: LD_ADDR_VAR 0 12
32872: PUSH
32873: LD_VAR 0 18
32877: PPUSH
32878: LD_INT 22
32880: PUSH
32881: LD_VAR 0 16
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: LD_INT 30
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 30
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: LIST
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PPUSH
32922: CALL_OW 72
32926: ST_TO_ADDR
32927: GO 33081
32929: LD_INT 3
32931: DOUBLE
32932: EQUAL
32933: IFTRUE 32937
32935: GO 32999
32937: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32938: LD_ADDR_VAR 0 12
32942: PUSH
32943: LD_VAR 0 18
32947: PPUSH
32948: LD_INT 22
32950: PUSH
32951: LD_VAR 0 16
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 30
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 30
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PPUSH
32992: CALL_OW 72
32996: ST_TO_ADDR
32997: GO 33081
32999: LD_INT 4
33001: DOUBLE
33002: EQUAL
33003: IFTRUE 33007
33005: GO 33080
33007: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33008: LD_ADDR_VAR 0 12
33012: PUSH
33013: LD_VAR 0 18
33017: PPUSH
33018: LD_INT 22
33020: PUSH
33021: LD_VAR 0 16
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 2
33032: PUSH
33033: LD_INT 30
33035: PUSH
33036: LD_INT 6
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 30
33045: PUSH
33046: LD_INT 7
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 30
33055: PUSH
33056: LD_INT 8
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PPUSH
33073: CALL_OW 72
33077: ST_TO_ADDR
33078: GO 33081
33080: POP
// if i = 1 then
33081: LD_VAR 0 8
33085: PUSH
33086: LD_INT 1
33088: EQUAL
33089: IFFALSE 33200
// begin tmp := [ ] ;
33091: LD_ADDR_VAR 0 19
33095: PUSH
33096: EMPTY
33097: ST_TO_ADDR
// for j in f do
33098: LD_ADDR_VAR 0 9
33102: PUSH
33103: LD_VAR 0 12
33107: PUSH
33108: FOR_IN
33109: IFFALSE 33182
// if GetBType ( j ) = b_bunker then
33111: LD_VAR 0 9
33115: PPUSH
33116: CALL_OW 266
33120: PUSH
33121: LD_INT 32
33123: EQUAL
33124: IFFALSE 33151
// tmp := Insert ( tmp , 1 , j ) else
33126: LD_ADDR_VAR 0 19
33130: PUSH
33131: LD_VAR 0 19
33135: PPUSH
33136: LD_INT 1
33138: PPUSH
33139: LD_VAR 0 9
33143: PPUSH
33144: CALL_OW 2
33148: ST_TO_ADDR
33149: GO 33180
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33151: LD_ADDR_VAR 0 19
33155: PUSH
33156: LD_VAR 0 19
33160: PPUSH
33161: LD_VAR 0 19
33165: PUSH
33166: LD_INT 1
33168: PLUS
33169: PPUSH
33170: LD_VAR 0 9
33174: PPUSH
33175: CALL_OW 2
33179: ST_TO_ADDR
33180: GO 33108
33182: POP
33183: POP
// if tmp then
33184: LD_VAR 0 19
33188: IFFALSE 33200
// f := tmp ;
33190: LD_ADDR_VAR 0 12
33194: PUSH
33195: LD_VAR 0 19
33199: ST_TO_ADDR
// end ; x := personel [ i ] ;
33200: LD_ADDR_VAR 0 13
33204: PUSH
33205: LD_VAR 0 6
33209: PUSH
33210: LD_VAR 0 8
33214: ARRAY
33215: ST_TO_ADDR
// if x = - 1 then
33216: LD_VAR 0 13
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: EQUAL
33225: IFFALSE 33434
// begin for j in f do
33227: LD_ADDR_VAR 0 9
33231: PUSH
33232: LD_VAR 0 12
33236: PUSH
33237: FOR_IN
33238: IFFALSE 33430
// repeat InitHc ;
33240: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33244: LD_VAR 0 9
33248: PPUSH
33249: CALL_OW 266
33253: PUSH
33254: LD_INT 5
33256: EQUAL
33257: IFFALSE 33327
// begin if UnitsInside ( j ) < 3 then
33259: LD_VAR 0 9
33263: PPUSH
33264: CALL_OW 313
33268: PUSH
33269: LD_INT 3
33271: LESS
33272: IFFALSE 33308
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33274: LD_INT 0
33276: PPUSH
33277: LD_INT 5
33279: PUSH
33280: LD_INT 8
33282: PUSH
33283: LD_INT 9
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: PUSH
33291: LD_VAR 0 17
33295: ARRAY
33296: PPUSH
33297: LD_VAR 0 4
33301: PPUSH
33302: CALL_OW 380
33306: GO 33325
// PrepareHuman ( false , i , skill ) ;
33308: LD_INT 0
33310: PPUSH
33311: LD_VAR 0 8
33315: PPUSH
33316: LD_VAR 0 4
33320: PPUSH
33321: CALL_OW 380
// end else
33325: GO 33344
// PrepareHuman ( false , i , skill ) ;
33327: LD_INT 0
33329: PPUSH
33330: LD_VAR 0 8
33334: PPUSH
33335: LD_VAR 0 4
33339: PPUSH
33340: CALL_OW 380
// un := CreateHuman ;
33344: LD_ADDR_VAR 0 14
33348: PUSH
33349: CALL_OW 44
33353: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33354: LD_ADDR_VAR 0 7
33358: PUSH
33359: LD_VAR 0 7
33363: PPUSH
33364: LD_INT 1
33366: PPUSH
33367: LD_VAR 0 14
33371: PPUSH
33372: CALL_OW 2
33376: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33377: LD_VAR 0 14
33381: PPUSH
33382: LD_VAR 0 9
33386: PPUSH
33387: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33391: LD_VAR 0 9
33395: PPUSH
33396: CALL_OW 313
33400: PUSH
33401: LD_INT 6
33403: EQUAL
33404: PUSH
33405: LD_VAR 0 9
33409: PPUSH
33410: CALL_OW 266
33414: PUSH
33415: LD_INT 32
33417: PUSH
33418: LD_INT 31
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: IN
33425: OR
33426: IFFALSE 33240
33428: GO 33237
33430: POP
33431: POP
// end else
33432: GO 33814
// for j = 1 to x do
33434: LD_ADDR_VAR 0 9
33438: PUSH
33439: DOUBLE
33440: LD_INT 1
33442: DEC
33443: ST_TO_ADDR
33444: LD_VAR 0 13
33448: PUSH
33449: FOR_TO
33450: IFFALSE 33812
// begin InitHc ;
33452: CALL_OW 19
// if not f then
33456: LD_VAR 0 12
33460: NOT
33461: IFFALSE 33550
// begin PrepareHuman ( false , i , skill ) ;
33463: LD_INT 0
33465: PPUSH
33466: LD_VAR 0 8
33470: PPUSH
33471: LD_VAR 0 4
33475: PPUSH
33476: CALL_OW 380
// un := CreateHuman ;
33480: LD_ADDR_VAR 0 14
33484: PUSH
33485: CALL_OW 44
33489: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33490: LD_ADDR_VAR 0 7
33494: PUSH
33495: LD_VAR 0 7
33499: PPUSH
33500: LD_INT 1
33502: PPUSH
33503: LD_VAR 0 14
33507: PPUSH
33508: CALL_OW 2
33512: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33513: LD_VAR 0 14
33517: PPUSH
33518: LD_VAR 0 1
33522: PPUSH
33523: CALL_OW 250
33527: PPUSH
33528: LD_VAR 0 1
33532: PPUSH
33533: CALL_OW 251
33537: PPUSH
33538: LD_INT 10
33540: PPUSH
33541: LD_INT 0
33543: PPUSH
33544: CALL_OW 50
// continue ;
33548: GO 33449
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33550: LD_VAR 0 12
33554: PUSH
33555: LD_INT 1
33557: ARRAY
33558: PPUSH
33559: CALL_OW 313
33563: PUSH
33564: LD_VAR 0 12
33568: PUSH
33569: LD_INT 1
33571: ARRAY
33572: PPUSH
33573: CALL_OW 266
33577: PUSH
33578: LD_INT 32
33580: PUSH
33581: LD_INT 31
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: IN
33588: AND
33589: PUSH
33590: LD_VAR 0 12
33594: PUSH
33595: LD_INT 1
33597: ARRAY
33598: PPUSH
33599: CALL_OW 313
33603: PUSH
33604: LD_INT 6
33606: EQUAL
33607: OR
33608: IFFALSE 33628
// f := Delete ( f , 1 ) ;
33610: LD_ADDR_VAR 0 12
33614: PUSH
33615: LD_VAR 0 12
33619: PPUSH
33620: LD_INT 1
33622: PPUSH
33623: CALL_OW 3
33627: ST_TO_ADDR
// if not f then
33628: LD_VAR 0 12
33632: NOT
33633: IFFALSE 33651
// begin x := x + 2 ;
33635: LD_ADDR_VAR 0 13
33639: PUSH
33640: LD_VAR 0 13
33644: PUSH
33645: LD_INT 2
33647: PLUS
33648: ST_TO_ADDR
// continue ;
33649: GO 33449
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33651: LD_VAR 0 12
33655: PUSH
33656: LD_INT 1
33658: ARRAY
33659: PPUSH
33660: CALL_OW 266
33664: PUSH
33665: LD_INT 5
33667: EQUAL
33668: IFFALSE 33742
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33670: LD_VAR 0 12
33674: PUSH
33675: LD_INT 1
33677: ARRAY
33678: PPUSH
33679: CALL_OW 313
33683: PUSH
33684: LD_INT 3
33686: LESS
33687: IFFALSE 33723
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33689: LD_INT 0
33691: PPUSH
33692: LD_INT 5
33694: PUSH
33695: LD_INT 8
33697: PUSH
33698: LD_INT 9
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: PUSH
33706: LD_VAR 0 17
33710: ARRAY
33711: PPUSH
33712: LD_VAR 0 4
33716: PPUSH
33717: CALL_OW 380
33721: GO 33740
// PrepareHuman ( false , i , skill ) ;
33723: LD_INT 0
33725: PPUSH
33726: LD_VAR 0 8
33730: PPUSH
33731: LD_VAR 0 4
33735: PPUSH
33736: CALL_OW 380
// end else
33740: GO 33759
// PrepareHuman ( false , i , skill ) ;
33742: LD_INT 0
33744: PPUSH
33745: LD_VAR 0 8
33749: PPUSH
33750: LD_VAR 0 4
33754: PPUSH
33755: CALL_OW 380
// un := CreateHuman ;
33759: LD_ADDR_VAR 0 14
33763: PUSH
33764: CALL_OW 44
33768: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33769: LD_ADDR_VAR 0 7
33773: PUSH
33774: LD_VAR 0 7
33778: PPUSH
33779: LD_INT 1
33781: PPUSH
33782: LD_VAR 0 14
33786: PPUSH
33787: CALL_OW 2
33791: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33792: LD_VAR 0 14
33796: PPUSH
33797: LD_VAR 0 12
33801: PUSH
33802: LD_INT 1
33804: ARRAY
33805: PPUSH
33806: CALL_OW 52
// end ;
33810: GO 33449
33812: POP
33813: POP
// end ;
33814: GO 32751
33816: POP
33817: POP
// result := result ^ buildings ;
33818: LD_ADDR_VAR 0 7
33822: PUSH
33823: LD_VAR 0 7
33827: PUSH
33828: LD_VAR 0 18
33832: ADD
33833: ST_TO_ADDR
// end else
33834: GO 33977
// begin for i = 1 to personel do
33836: LD_ADDR_VAR 0 8
33840: PUSH
33841: DOUBLE
33842: LD_INT 1
33844: DEC
33845: ST_TO_ADDR
33846: LD_VAR 0 6
33850: PUSH
33851: FOR_TO
33852: IFFALSE 33975
// begin if i > 4 then
33854: LD_VAR 0 8
33858: PUSH
33859: LD_INT 4
33861: GREATER
33862: IFFALSE 33866
// break ;
33864: GO 33975
// x := personel [ i ] ;
33866: LD_ADDR_VAR 0 13
33870: PUSH
33871: LD_VAR 0 6
33875: PUSH
33876: LD_VAR 0 8
33880: ARRAY
33881: ST_TO_ADDR
// if x = - 1 then
33882: LD_VAR 0 13
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: EQUAL
33891: IFFALSE 33895
// continue ;
33893: GO 33851
// PrepareHuman ( false , i , skill ) ;
33895: LD_INT 0
33897: PPUSH
33898: LD_VAR 0 8
33902: PPUSH
33903: LD_VAR 0 4
33907: PPUSH
33908: CALL_OW 380
// un := CreateHuman ;
33912: LD_ADDR_VAR 0 14
33916: PUSH
33917: CALL_OW 44
33921: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33922: LD_VAR 0 14
33926: PPUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL_OW 250
33936: PPUSH
33937: LD_VAR 0 1
33941: PPUSH
33942: CALL_OW 251
33946: PPUSH
33947: LD_INT 10
33949: PPUSH
33950: LD_INT 0
33952: PPUSH
33953: CALL_OW 50
// result := result ^ un ;
33957: LD_ADDR_VAR 0 7
33961: PUSH
33962: LD_VAR 0 7
33966: PUSH
33967: LD_VAR 0 14
33971: ADD
33972: ST_TO_ADDR
// end ;
33973: GO 33851
33975: POP
33976: POP
// end ; end ;
33977: LD_VAR 0 7
33981: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33982: LD_INT 0
33984: PPUSH
33985: PPUSH
33986: PPUSH
33987: PPUSH
33988: PPUSH
33989: PPUSH
33990: PPUSH
33991: PPUSH
33992: PPUSH
33993: PPUSH
33994: PPUSH
33995: PPUSH
33996: PPUSH
33997: PPUSH
33998: PPUSH
33999: PPUSH
// result := false ;
34000: LD_ADDR_VAR 0 3
34004: PUSH
34005: LD_INT 0
34007: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34008: LD_VAR 0 1
34012: NOT
34013: PUSH
34014: LD_VAR 0 1
34018: PPUSH
34019: CALL_OW 266
34023: PUSH
34024: LD_INT 32
34026: PUSH
34027: LD_INT 33
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: IN
34034: NOT
34035: OR
34036: IFFALSE 34040
// exit ;
34038: GO 35179
// nat := GetNation ( tower ) ;
34040: LD_ADDR_VAR 0 12
34044: PUSH
34045: LD_VAR 0 1
34049: PPUSH
34050: CALL_OW 248
34054: ST_TO_ADDR
// side := GetSide ( tower ) ;
34055: LD_ADDR_VAR 0 16
34059: PUSH
34060: LD_VAR 0 1
34064: PPUSH
34065: CALL_OW 255
34069: ST_TO_ADDR
// x := GetX ( tower ) ;
34070: LD_ADDR_VAR 0 10
34074: PUSH
34075: LD_VAR 0 1
34079: PPUSH
34080: CALL_OW 250
34084: ST_TO_ADDR
// y := GetY ( tower ) ;
34085: LD_ADDR_VAR 0 11
34089: PUSH
34090: LD_VAR 0 1
34094: PPUSH
34095: CALL_OW 251
34099: ST_TO_ADDR
// if not x or not y then
34100: LD_VAR 0 10
34104: NOT
34105: PUSH
34106: LD_VAR 0 11
34110: NOT
34111: OR
34112: IFFALSE 34116
// exit ;
34114: GO 35179
// weapon := 0 ;
34116: LD_ADDR_VAR 0 18
34120: PUSH
34121: LD_INT 0
34123: ST_TO_ADDR
// fac_list := [ ] ;
34124: LD_ADDR_VAR 0 17
34128: PUSH
34129: EMPTY
34130: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34131: LD_ADDR_VAR 0 6
34135: PUSH
34136: LD_VAR 0 1
34140: PPUSH
34141: CALL_OW 274
34145: PPUSH
34146: LD_VAR 0 2
34150: PPUSH
34151: LD_INT 0
34153: PPUSH
34154: CALL 31719 0 3
34158: PPUSH
34159: LD_INT 30
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PPUSH
34169: CALL_OW 72
34173: ST_TO_ADDR
// if not factories then
34174: LD_VAR 0 6
34178: NOT
34179: IFFALSE 34183
// exit ;
34181: GO 35179
// for i in factories do
34183: LD_ADDR_VAR 0 8
34187: PUSH
34188: LD_VAR 0 6
34192: PUSH
34193: FOR_IN
34194: IFFALSE 34219
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34196: LD_ADDR_VAR 0 17
34200: PUSH
34201: LD_VAR 0 17
34205: PUSH
34206: LD_VAR 0 8
34210: PPUSH
34211: CALL_OW 478
34215: UNION
34216: ST_TO_ADDR
34217: GO 34193
34219: POP
34220: POP
// if not fac_list then
34221: LD_VAR 0 17
34225: NOT
34226: IFFALSE 34230
// exit ;
34228: GO 35179
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34230: LD_ADDR_VAR 0 5
34234: PUSH
34235: LD_INT 4
34237: PUSH
34238: LD_INT 5
34240: PUSH
34241: LD_INT 9
34243: PUSH
34244: LD_INT 10
34246: PUSH
34247: LD_INT 6
34249: PUSH
34250: LD_INT 7
34252: PUSH
34253: LD_INT 11
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 27
34267: PUSH
34268: LD_INT 28
34270: PUSH
34271: LD_INT 26
34273: PUSH
34274: LD_INT 30
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 43
34285: PUSH
34286: LD_INT 44
34288: PUSH
34289: LD_INT 46
34291: PUSH
34292: LD_INT 45
34294: PUSH
34295: LD_INT 47
34297: PUSH
34298: LD_INT 49
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: LIST
34313: PUSH
34314: LD_VAR 0 12
34318: ARRAY
34319: ST_TO_ADDR
// for i in list do
34320: LD_ADDR_VAR 0 8
34324: PUSH
34325: LD_VAR 0 5
34329: PUSH
34330: FOR_IN
34331: IFFALSE 34364
// if not i in fac_list then
34333: LD_VAR 0 8
34337: PUSH
34338: LD_VAR 0 17
34342: IN
34343: NOT
34344: IFFALSE 34362
// list := list diff i ;
34346: LD_ADDR_VAR 0 5
34350: PUSH
34351: LD_VAR 0 5
34355: PUSH
34356: LD_VAR 0 8
34360: DIFF
34361: ST_TO_ADDR
34362: GO 34330
34364: POP
34365: POP
// if not list then
34366: LD_VAR 0 5
34370: NOT
34371: IFFALSE 34375
// exit ;
34373: GO 35179
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34375: LD_VAR 0 12
34379: PUSH
34380: LD_INT 3
34382: EQUAL
34383: PUSH
34384: LD_INT 49
34386: PUSH
34387: LD_VAR 0 5
34391: IN
34392: AND
34393: PUSH
34394: LD_INT 31
34396: PPUSH
34397: LD_VAR 0 16
34401: PPUSH
34402: CALL_OW 321
34406: PUSH
34407: LD_INT 2
34409: EQUAL
34410: AND
34411: IFFALSE 34471
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34413: LD_INT 22
34415: PUSH
34416: LD_VAR 0 16
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 35
34427: PUSH
34428: LD_INT 49
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 91
34437: PUSH
34438: LD_VAR 0 1
34442: PUSH
34443: LD_INT 10
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: PPUSH
34456: CALL_OW 69
34460: NOT
34461: IFFALSE 34471
// weapon := ru_time_lapser ;
34463: LD_ADDR_VAR 0 18
34467: PUSH
34468: LD_INT 49
34470: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34471: LD_VAR 0 12
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: IN
34486: PUSH
34487: LD_INT 11
34489: PUSH
34490: LD_VAR 0 5
34494: IN
34495: PUSH
34496: LD_INT 30
34498: PUSH
34499: LD_VAR 0 5
34503: IN
34504: OR
34505: AND
34506: PUSH
34507: LD_INT 6
34509: PPUSH
34510: LD_VAR 0 16
34514: PPUSH
34515: CALL_OW 321
34519: PUSH
34520: LD_INT 2
34522: EQUAL
34523: AND
34524: IFFALSE 34689
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34526: LD_INT 22
34528: PUSH
34529: LD_VAR 0 16
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: LD_INT 35
34543: PUSH
34544: LD_INT 11
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 35
34553: PUSH
34554: LD_INT 30
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 91
34568: PUSH
34569: LD_VAR 0 1
34573: PUSH
34574: LD_INT 18
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: LIST
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: LIST
34586: PPUSH
34587: CALL_OW 69
34591: NOT
34592: PUSH
34593: LD_INT 22
34595: PUSH
34596: LD_VAR 0 16
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: LD_INT 30
34610: PUSH
34611: LD_INT 32
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 30
34620: PUSH
34621: LD_INT 33
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 91
34635: PUSH
34636: LD_VAR 0 1
34640: PUSH
34641: LD_INT 12
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: LIST
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: LIST
34653: PUSH
34654: EMPTY
34655: LIST
34656: PPUSH
34657: CALL_OW 69
34661: PUSH
34662: LD_INT 2
34664: GREATER
34665: AND
34666: IFFALSE 34689
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34668: LD_ADDR_VAR 0 18
34672: PUSH
34673: LD_INT 11
34675: PUSH
34676: LD_INT 30
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_VAR 0 12
34687: ARRAY
34688: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34689: LD_VAR 0 18
34693: NOT
34694: PUSH
34695: LD_INT 40
34697: PPUSH
34698: LD_VAR 0 16
34702: PPUSH
34703: CALL_OW 321
34707: PUSH
34708: LD_INT 2
34710: EQUAL
34711: AND
34712: PUSH
34713: LD_INT 7
34715: PUSH
34716: LD_VAR 0 5
34720: IN
34721: PUSH
34722: LD_INT 28
34724: PUSH
34725: LD_VAR 0 5
34729: IN
34730: OR
34731: PUSH
34732: LD_INT 45
34734: PUSH
34735: LD_VAR 0 5
34739: IN
34740: OR
34741: AND
34742: IFFALSE 34996
// begin hex := GetHexInfo ( x , y ) ;
34744: LD_ADDR_VAR 0 4
34748: PUSH
34749: LD_VAR 0 10
34753: PPUSH
34754: LD_VAR 0 11
34758: PPUSH
34759: CALL_OW 546
34763: ST_TO_ADDR
// if hex [ 1 ] then
34764: LD_VAR 0 4
34768: PUSH
34769: LD_INT 1
34771: ARRAY
34772: IFFALSE 34776
// exit ;
34774: GO 35179
// height := hex [ 2 ] ;
34776: LD_ADDR_VAR 0 15
34780: PUSH
34781: LD_VAR 0 4
34785: PUSH
34786: LD_INT 2
34788: ARRAY
34789: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34790: LD_ADDR_VAR 0 14
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: LD_INT 3
34803: PUSH
34804: LD_INT 5
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: ST_TO_ADDR
// for i in tmp do
34813: LD_ADDR_VAR 0 8
34817: PUSH
34818: LD_VAR 0 14
34822: PUSH
34823: FOR_IN
34824: IFFALSE 34994
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34826: LD_ADDR_VAR 0 9
34830: PUSH
34831: LD_VAR 0 10
34835: PPUSH
34836: LD_VAR 0 8
34840: PPUSH
34841: LD_INT 5
34843: PPUSH
34844: CALL_OW 272
34848: PUSH
34849: LD_VAR 0 11
34853: PPUSH
34854: LD_VAR 0 8
34858: PPUSH
34859: LD_INT 5
34861: PPUSH
34862: CALL_OW 273
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34871: LD_VAR 0 9
34875: PUSH
34876: LD_INT 1
34878: ARRAY
34879: PPUSH
34880: LD_VAR 0 9
34884: PUSH
34885: LD_INT 2
34887: ARRAY
34888: PPUSH
34889: CALL_OW 488
34893: IFFALSE 34992
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34895: LD_ADDR_VAR 0 4
34899: PUSH
34900: LD_VAR 0 9
34904: PUSH
34905: LD_INT 1
34907: ARRAY
34908: PPUSH
34909: LD_VAR 0 9
34913: PUSH
34914: LD_INT 2
34916: ARRAY
34917: PPUSH
34918: CALL_OW 546
34922: ST_TO_ADDR
// if hex [ 1 ] then
34923: LD_VAR 0 4
34927: PUSH
34928: LD_INT 1
34930: ARRAY
34931: IFFALSE 34935
// continue ;
34933: GO 34823
// h := hex [ 2 ] ;
34935: LD_ADDR_VAR 0 13
34939: PUSH
34940: LD_VAR 0 4
34944: PUSH
34945: LD_INT 2
34947: ARRAY
34948: ST_TO_ADDR
// if h + 7 < height then
34949: LD_VAR 0 13
34953: PUSH
34954: LD_INT 7
34956: PLUS
34957: PUSH
34958: LD_VAR 0 15
34962: LESS
34963: IFFALSE 34992
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34965: LD_ADDR_VAR 0 18
34969: PUSH
34970: LD_INT 7
34972: PUSH
34973: LD_INT 28
34975: PUSH
34976: LD_INT 45
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: LIST
34983: PUSH
34984: LD_VAR 0 12
34988: ARRAY
34989: ST_TO_ADDR
// break ;
34990: GO 34994
// end ; end ; end ;
34992: GO 34823
34994: POP
34995: POP
// end ; if not weapon then
34996: LD_VAR 0 18
35000: NOT
35001: IFFALSE 35061
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35003: LD_ADDR_VAR 0 5
35007: PUSH
35008: LD_VAR 0 5
35012: PUSH
35013: LD_INT 11
35015: PUSH
35016: LD_INT 30
35018: PUSH
35019: LD_INT 49
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: DIFF
35027: ST_TO_ADDR
// if not list then
35028: LD_VAR 0 5
35032: NOT
35033: IFFALSE 35037
// exit ;
35035: GO 35179
// weapon := list [ rand ( 1 , list ) ] ;
35037: LD_ADDR_VAR 0 18
35041: PUSH
35042: LD_VAR 0 5
35046: PUSH
35047: LD_INT 1
35049: PPUSH
35050: LD_VAR 0 5
35054: PPUSH
35055: CALL_OW 12
35059: ARRAY
35060: ST_TO_ADDR
// end ; if weapon then
35061: LD_VAR 0 18
35065: IFFALSE 35179
// begin tmp := CostOfWeapon ( weapon ) ;
35067: LD_ADDR_VAR 0 14
35071: PUSH
35072: LD_VAR 0 18
35076: PPUSH
35077: CALL_OW 451
35081: ST_TO_ADDR
// j := GetBase ( tower ) ;
35082: LD_ADDR_VAR 0 9
35086: PUSH
35087: LD_VAR 0 1
35091: PPUSH
35092: CALL_OW 274
35096: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35097: LD_VAR 0 9
35101: PPUSH
35102: LD_INT 1
35104: PPUSH
35105: CALL_OW 275
35109: PUSH
35110: LD_VAR 0 14
35114: PUSH
35115: LD_INT 1
35117: ARRAY
35118: GREATEREQUAL
35119: PUSH
35120: LD_VAR 0 9
35124: PPUSH
35125: LD_INT 2
35127: PPUSH
35128: CALL_OW 275
35132: PUSH
35133: LD_VAR 0 14
35137: PUSH
35138: LD_INT 2
35140: ARRAY
35141: GREATEREQUAL
35142: AND
35143: PUSH
35144: LD_VAR 0 9
35148: PPUSH
35149: LD_INT 3
35151: PPUSH
35152: CALL_OW 275
35156: PUSH
35157: LD_VAR 0 14
35161: PUSH
35162: LD_INT 3
35164: ARRAY
35165: GREATEREQUAL
35166: AND
35167: IFFALSE 35179
// result := weapon ;
35169: LD_ADDR_VAR 0 3
35173: PUSH
35174: LD_VAR 0 18
35178: ST_TO_ADDR
// end ; end ;
35179: LD_VAR 0 3
35183: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35184: LD_INT 0
35186: PPUSH
35187: PPUSH
// result := true ;
35188: LD_ADDR_VAR 0 3
35192: PUSH
35193: LD_INT 1
35195: ST_TO_ADDR
// if array1 = array2 then
35196: LD_VAR 0 1
35200: PUSH
35201: LD_VAR 0 2
35205: EQUAL
35206: IFFALSE 35266
// begin for i = 1 to array1 do
35208: LD_ADDR_VAR 0 4
35212: PUSH
35213: DOUBLE
35214: LD_INT 1
35216: DEC
35217: ST_TO_ADDR
35218: LD_VAR 0 1
35222: PUSH
35223: FOR_TO
35224: IFFALSE 35262
// if array1 [ i ] <> array2 [ i ] then
35226: LD_VAR 0 1
35230: PUSH
35231: LD_VAR 0 4
35235: ARRAY
35236: PUSH
35237: LD_VAR 0 2
35241: PUSH
35242: LD_VAR 0 4
35246: ARRAY
35247: NONEQUAL
35248: IFFALSE 35260
// begin result := false ;
35250: LD_ADDR_VAR 0 3
35254: PUSH
35255: LD_INT 0
35257: ST_TO_ADDR
// break ;
35258: GO 35262
// end ;
35260: GO 35223
35262: POP
35263: POP
// end else
35264: GO 35274
// result := false ;
35266: LD_ADDR_VAR 0 3
35270: PUSH
35271: LD_INT 0
35273: ST_TO_ADDR
// end ;
35274: LD_VAR 0 3
35278: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35279: LD_INT 0
35281: PPUSH
35282: PPUSH
// if not array1 or not array2 then
35283: LD_VAR 0 1
35287: NOT
35288: PUSH
35289: LD_VAR 0 2
35293: NOT
35294: OR
35295: IFFALSE 35299
// exit ;
35297: GO 35363
// result := true ;
35299: LD_ADDR_VAR 0 3
35303: PUSH
35304: LD_INT 1
35306: ST_TO_ADDR
// for i = 1 to array1 do
35307: LD_ADDR_VAR 0 4
35311: PUSH
35312: DOUBLE
35313: LD_INT 1
35315: DEC
35316: ST_TO_ADDR
35317: LD_VAR 0 1
35321: PUSH
35322: FOR_TO
35323: IFFALSE 35361
// if array1 [ i ] <> array2 [ i ] then
35325: LD_VAR 0 1
35329: PUSH
35330: LD_VAR 0 4
35334: ARRAY
35335: PUSH
35336: LD_VAR 0 2
35340: PUSH
35341: LD_VAR 0 4
35345: ARRAY
35346: NONEQUAL
35347: IFFALSE 35359
// begin result := false ;
35349: LD_ADDR_VAR 0 3
35353: PUSH
35354: LD_INT 0
35356: ST_TO_ADDR
// break ;
35357: GO 35361
// end ;
35359: GO 35322
35361: POP
35362: POP
// end ;
35363: LD_VAR 0 3
35367: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35368: LD_INT 0
35370: PPUSH
35371: PPUSH
35372: PPUSH
// pom := GetBase ( fac ) ;
35373: LD_ADDR_VAR 0 5
35377: PUSH
35378: LD_VAR 0 1
35382: PPUSH
35383: CALL_OW 274
35387: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35388: LD_ADDR_VAR 0 4
35392: PUSH
35393: LD_VAR 0 2
35397: PUSH
35398: LD_INT 1
35400: ARRAY
35401: PPUSH
35402: LD_VAR 0 2
35406: PUSH
35407: LD_INT 2
35409: ARRAY
35410: PPUSH
35411: LD_VAR 0 2
35415: PUSH
35416: LD_INT 3
35418: ARRAY
35419: PPUSH
35420: LD_VAR 0 2
35424: PUSH
35425: LD_INT 4
35427: ARRAY
35428: PPUSH
35429: CALL_OW 449
35433: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35434: LD_ADDR_VAR 0 3
35438: PUSH
35439: LD_VAR 0 5
35443: PPUSH
35444: LD_INT 1
35446: PPUSH
35447: CALL_OW 275
35451: PUSH
35452: LD_VAR 0 4
35456: PUSH
35457: LD_INT 1
35459: ARRAY
35460: GREATEREQUAL
35461: PUSH
35462: LD_VAR 0 5
35466: PPUSH
35467: LD_INT 2
35469: PPUSH
35470: CALL_OW 275
35474: PUSH
35475: LD_VAR 0 4
35479: PUSH
35480: LD_INT 2
35482: ARRAY
35483: GREATEREQUAL
35484: AND
35485: PUSH
35486: LD_VAR 0 5
35490: PPUSH
35491: LD_INT 3
35493: PPUSH
35494: CALL_OW 275
35498: PUSH
35499: LD_VAR 0 4
35503: PUSH
35504: LD_INT 3
35506: ARRAY
35507: GREATEREQUAL
35508: AND
35509: ST_TO_ADDR
// end ;
35510: LD_VAR 0 3
35514: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35515: LD_INT 0
35517: PPUSH
35518: PPUSH
35519: PPUSH
35520: PPUSH
// pom := GetBase ( building ) ;
35521: LD_ADDR_VAR 0 3
35525: PUSH
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 274
35535: ST_TO_ADDR
// if not pom then
35536: LD_VAR 0 3
35540: NOT
35541: IFFALSE 35545
// exit ;
35543: GO 35715
// btype := GetBType ( building ) ;
35545: LD_ADDR_VAR 0 5
35549: PUSH
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL_OW 266
35559: ST_TO_ADDR
// if btype = b_armoury then
35560: LD_VAR 0 5
35564: PUSH
35565: LD_INT 4
35567: EQUAL
35568: IFFALSE 35578
// btype := b_barracks ;
35570: LD_ADDR_VAR 0 5
35574: PUSH
35575: LD_INT 5
35577: ST_TO_ADDR
// if btype = b_depot then
35578: LD_VAR 0 5
35582: PUSH
35583: LD_INT 0
35585: EQUAL
35586: IFFALSE 35596
// btype := b_warehouse ;
35588: LD_ADDR_VAR 0 5
35592: PUSH
35593: LD_INT 1
35595: ST_TO_ADDR
// if btype = b_workshop then
35596: LD_VAR 0 5
35600: PUSH
35601: LD_INT 2
35603: EQUAL
35604: IFFALSE 35614
// btype := b_factory ;
35606: LD_ADDR_VAR 0 5
35610: PUSH
35611: LD_INT 3
35613: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35614: LD_ADDR_VAR 0 4
35618: PUSH
35619: LD_VAR 0 5
35623: PPUSH
35624: LD_VAR 0 1
35628: PPUSH
35629: CALL_OW 248
35633: PPUSH
35634: CALL_OW 450
35638: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35639: LD_ADDR_VAR 0 2
35643: PUSH
35644: LD_VAR 0 3
35648: PPUSH
35649: LD_INT 1
35651: PPUSH
35652: CALL_OW 275
35656: PUSH
35657: LD_VAR 0 4
35661: PUSH
35662: LD_INT 1
35664: ARRAY
35665: GREATEREQUAL
35666: PUSH
35667: LD_VAR 0 3
35671: PPUSH
35672: LD_INT 2
35674: PPUSH
35675: CALL_OW 275
35679: PUSH
35680: LD_VAR 0 4
35684: PUSH
35685: LD_INT 2
35687: ARRAY
35688: GREATEREQUAL
35689: AND
35690: PUSH
35691: LD_VAR 0 3
35695: PPUSH
35696: LD_INT 3
35698: PPUSH
35699: CALL_OW 275
35703: PUSH
35704: LD_VAR 0 4
35708: PUSH
35709: LD_INT 3
35711: ARRAY
35712: GREATEREQUAL
35713: AND
35714: ST_TO_ADDR
// end ;
35715: LD_VAR 0 2
35719: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35720: LD_INT 0
35722: PPUSH
35723: PPUSH
35724: PPUSH
// pom := GetBase ( building ) ;
35725: LD_ADDR_VAR 0 4
35729: PUSH
35730: LD_VAR 0 1
35734: PPUSH
35735: CALL_OW 274
35739: ST_TO_ADDR
// if not pom then
35740: LD_VAR 0 4
35744: NOT
35745: IFFALSE 35749
// exit ;
35747: GO 35850
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35749: LD_ADDR_VAR 0 5
35753: PUSH
35754: LD_VAR 0 2
35758: PPUSH
35759: LD_VAR 0 1
35763: PPUSH
35764: CALL_OW 248
35768: PPUSH
35769: CALL_OW 450
35773: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35774: LD_ADDR_VAR 0 3
35778: PUSH
35779: LD_VAR 0 4
35783: PPUSH
35784: LD_INT 1
35786: PPUSH
35787: CALL_OW 275
35791: PUSH
35792: LD_VAR 0 5
35796: PUSH
35797: LD_INT 1
35799: ARRAY
35800: GREATEREQUAL
35801: PUSH
35802: LD_VAR 0 4
35806: PPUSH
35807: LD_INT 2
35809: PPUSH
35810: CALL_OW 275
35814: PUSH
35815: LD_VAR 0 5
35819: PUSH
35820: LD_INT 2
35822: ARRAY
35823: GREATEREQUAL
35824: AND
35825: PUSH
35826: LD_VAR 0 4
35830: PPUSH
35831: LD_INT 3
35833: PPUSH
35834: CALL_OW 275
35838: PUSH
35839: LD_VAR 0 5
35843: PUSH
35844: LD_INT 3
35846: ARRAY
35847: GREATEREQUAL
35848: AND
35849: ST_TO_ADDR
// end ;
35850: LD_VAR 0 3
35854: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35855: LD_INT 0
35857: PPUSH
35858: PPUSH
35859: PPUSH
35860: PPUSH
35861: PPUSH
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
35867: PPUSH
// result := false ;
35868: LD_ADDR_VAR 0 8
35872: PUSH
35873: LD_INT 0
35875: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35876: LD_VAR 0 5
35880: NOT
35881: PUSH
35882: LD_VAR 0 1
35886: NOT
35887: OR
35888: PUSH
35889: LD_VAR 0 2
35893: NOT
35894: OR
35895: PUSH
35896: LD_VAR 0 3
35900: NOT
35901: OR
35902: IFFALSE 35906
// exit ;
35904: GO 36720
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35906: LD_ADDR_VAR 0 14
35910: PUSH
35911: LD_VAR 0 1
35915: PPUSH
35916: LD_VAR 0 2
35920: PPUSH
35921: LD_VAR 0 3
35925: PPUSH
35926: LD_VAR 0 4
35930: PPUSH
35931: LD_VAR 0 5
35935: PUSH
35936: LD_INT 1
35938: ARRAY
35939: PPUSH
35940: CALL_OW 248
35944: PPUSH
35945: LD_INT 0
35947: PPUSH
35948: CALL 37557 0 6
35952: ST_TO_ADDR
// if not hexes then
35953: LD_VAR 0 14
35957: NOT
35958: IFFALSE 35962
// exit ;
35960: GO 36720
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35962: LD_ADDR_VAR 0 17
35966: PUSH
35967: LD_VAR 0 5
35971: PPUSH
35972: LD_INT 22
35974: PUSH
35975: LD_VAR 0 13
35979: PPUSH
35980: CALL_OW 255
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 2
35991: PUSH
35992: LD_INT 30
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 30
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: LIST
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PPUSH
36021: CALL_OW 72
36025: ST_TO_ADDR
// for i = 1 to hexes do
36026: LD_ADDR_VAR 0 9
36030: PUSH
36031: DOUBLE
36032: LD_INT 1
36034: DEC
36035: ST_TO_ADDR
36036: LD_VAR 0 14
36040: PUSH
36041: FOR_TO
36042: IFFALSE 36718
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36044: LD_ADDR_VAR 0 13
36048: PUSH
36049: LD_VAR 0 14
36053: PUSH
36054: LD_VAR 0 9
36058: ARRAY
36059: PUSH
36060: LD_INT 1
36062: ARRAY
36063: PPUSH
36064: LD_VAR 0 14
36068: PUSH
36069: LD_VAR 0 9
36073: ARRAY
36074: PUSH
36075: LD_INT 2
36077: ARRAY
36078: PPUSH
36079: CALL_OW 428
36083: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36084: LD_VAR 0 14
36088: PUSH
36089: LD_VAR 0 9
36093: ARRAY
36094: PUSH
36095: LD_INT 1
36097: ARRAY
36098: PPUSH
36099: LD_VAR 0 14
36103: PUSH
36104: LD_VAR 0 9
36108: ARRAY
36109: PUSH
36110: LD_INT 2
36112: ARRAY
36113: PPUSH
36114: CALL_OW 351
36118: PUSH
36119: LD_VAR 0 14
36123: PUSH
36124: LD_VAR 0 9
36128: ARRAY
36129: PUSH
36130: LD_INT 1
36132: ARRAY
36133: PPUSH
36134: LD_VAR 0 14
36138: PUSH
36139: LD_VAR 0 9
36143: ARRAY
36144: PUSH
36145: LD_INT 2
36147: ARRAY
36148: PPUSH
36149: CALL_OW 488
36153: NOT
36154: OR
36155: PUSH
36156: LD_VAR 0 13
36160: PPUSH
36161: CALL_OW 247
36165: PUSH
36166: LD_INT 3
36168: EQUAL
36169: OR
36170: IFFALSE 36176
// exit ;
36172: POP
36173: POP
36174: GO 36720
// if not tmp then
36176: LD_VAR 0 13
36180: NOT
36181: IFFALSE 36185
// continue ;
36183: GO 36041
// result := true ;
36185: LD_ADDR_VAR 0 8
36189: PUSH
36190: LD_INT 1
36192: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36193: LD_VAR 0 6
36197: PUSH
36198: LD_VAR 0 13
36202: PPUSH
36203: CALL_OW 247
36207: PUSH
36208: LD_INT 2
36210: EQUAL
36211: AND
36212: PUSH
36213: LD_VAR 0 13
36217: PPUSH
36218: CALL_OW 263
36222: PUSH
36223: LD_INT 1
36225: EQUAL
36226: AND
36227: IFFALSE 36391
// begin if IsDrivenBy ( tmp ) then
36229: LD_VAR 0 13
36233: PPUSH
36234: CALL_OW 311
36238: IFFALSE 36242
// continue ;
36240: GO 36041
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36242: LD_VAR 0 6
36246: PPUSH
36247: LD_INT 3
36249: PUSH
36250: LD_INT 60
36252: PUSH
36253: EMPTY
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 3
36262: PUSH
36263: LD_INT 55
36265: PUSH
36266: EMPTY
36267: LIST
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PPUSH
36277: CALL_OW 72
36281: IFFALSE 36389
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36283: LD_ADDR_VAR 0 18
36287: PUSH
36288: LD_VAR 0 6
36292: PPUSH
36293: LD_INT 3
36295: PUSH
36296: LD_INT 60
36298: PUSH
36299: EMPTY
36300: LIST
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 3
36308: PUSH
36309: LD_INT 55
36311: PUSH
36312: EMPTY
36313: LIST
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PPUSH
36323: CALL_OW 72
36327: PUSH
36328: LD_INT 1
36330: ARRAY
36331: ST_TO_ADDR
// if IsInUnit ( driver ) then
36332: LD_VAR 0 18
36336: PPUSH
36337: CALL_OW 310
36341: IFFALSE 36352
// ComExit ( driver ) ;
36343: LD_VAR 0 18
36347: PPUSH
36348: CALL 60741 0 1
// AddComEnterUnit ( driver , tmp ) ;
36352: LD_VAR 0 18
36356: PPUSH
36357: LD_VAR 0 13
36361: PPUSH
36362: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36366: LD_VAR 0 18
36370: PPUSH
36371: LD_VAR 0 7
36375: PPUSH
36376: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36380: LD_VAR 0 18
36384: PPUSH
36385: CALL_OW 181
// end ; continue ;
36389: GO 36041
// end ; if not cleaners or not tmp in cleaners then
36391: LD_VAR 0 6
36395: NOT
36396: PUSH
36397: LD_VAR 0 13
36401: PUSH
36402: LD_VAR 0 6
36406: IN
36407: NOT
36408: OR
36409: IFFALSE 36716
// begin if dep then
36411: LD_VAR 0 17
36415: IFFALSE 36551
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36417: LD_ADDR_VAR 0 16
36421: PUSH
36422: LD_VAR 0 17
36426: PUSH
36427: LD_INT 1
36429: ARRAY
36430: PPUSH
36431: CALL_OW 250
36435: PPUSH
36436: LD_VAR 0 17
36440: PUSH
36441: LD_INT 1
36443: ARRAY
36444: PPUSH
36445: CALL_OW 254
36449: PPUSH
36450: LD_INT 5
36452: PPUSH
36453: CALL_OW 272
36457: PUSH
36458: LD_VAR 0 17
36462: PUSH
36463: LD_INT 1
36465: ARRAY
36466: PPUSH
36467: CALL_OW 251
36471: PPUSH
36472: LD_VAR 0 17
36476: PUSH
36477: LD_INT 1
36479: ARRAY
36480: PPUSH
36481: CALL_OW 254
36485: PPUSH
36486: LD_INT 5
36488: PPUSH
36489: CALL_OW 273
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36498: LD_VAR 0 16
36502: PUSH
36503: LD_INT 1
36505: ARRAY
36506: PPUSH
36507: LD_VAR 0 16
36511: PUSH
36512: LD_INT 2
36514: ARRAY
36515: PPUSH
36516: CALL_OW 488
36520: IFFALSE 36551
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36522: LD_VAR 0 13
36526: PPUSH
36527: LD_VAR 0 16
36531: PUSH
36532: LD_INT 1
36534: ARRAY
36535: PPUSH
36536: LD_VAR 0 16
36540: PUSH
36541: LD_INT 2
36543: ARRAY
36544: PPUSH
36545: CALL_OW 111
// continue ;
36549: GO 36041
// end ; end ; r := GetDir ( tmp ) ;
36551: LD_ADDR_VAR 0 15
36555: PUSH
36556: LD_VAR 0 13
36560: PPUSH
36561: CALL_OW 254
36565: ST_TO_ADDR
// if r = 5 then
36566: LD_VAR 0 15
36570: PUSH
36571: LD_INT 5
36573: EQUAL
36574: IFFALSE 36584
// r := 0 ;
36576: LD_ADDR_VAR 0 15
36580: PUSH
36581: LD_INT 0
36583: ST_TO_ADDR
// for j = r to 5 do
36584: LD_ADDR_VAR 0 10
36588: PUSH
36589: DOUBLE
36590: LD_VAR 0 15
36594: DEC
36595: ST_TO_ADDR
36596: LD_INT 5
36598: PUSH
36599: FOR_TO
36600: IFFALSE 36714
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36602: LD_ADDR_VAR 0 11
36606: PUSH
36607: LD_VAR 0 13
36611: PPUSH
36612: CALL_OW 250
36616: PPUSH
36617: LD_VAR 0 10
36621: PPUSH
36622: LD_INT 2
36624: PPUSH
36625: CALL_OW 272
36629: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36630: LD_ADDR_VAR 0 12
36634: PUSH
36635: LD_VAR 0 13
36639: PPUSH
36640: CALL_OW 251
36644: PPUSH
36645: LD_VAR 0 10
36649: PPUSH
36650: LD_INT 2
36652: PPUSH
36653: CALL_OW 273
36657: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36658: LD_VAR 0 11
36662: PPUSH
36663: LD_VAR 0 12
36667: PPUSH
36668: CALL_OW 488
36672: PUSH
36673: LD_VAR 0 11
36677: PPUSH
36678: LD_VAR 0 12
36682: PPUSH
36683: CALL_OW 428
36687: NOT
36688: AND
36689: IFFALSE 36712
// begin ComMoveXY ( tmp , _x , _y ) ;
36691: LD_VAR 0 13
36695: PPUSH
36696: LD_VAR 0 11
36700: PPUSH
36701: LD_VAR 0 12
36705: PPUSH
36706: CALL_OW 111
// break ;
36710: GO 36714
// end ; end ;
36712: GO 36599
36714: POP
36715: POP
// end ; end ;
36716: GO 36041
36718: POP
36719: POP
// end ;
36720: LD_VAR 0 8
36724: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36725: LD_INT 0
36727: PPUSH
36728: PPUSH
36729: PPUSH
36730: PPUSH
36731: PPUSH
36732: PPUSH
36733: PPUSH
36734: PPUSH
36735: PPUSH
36736: PPUSH
// result := false ;
36737: LD_ADDR_VAR 0 6
36741: PUSH
36742: LD_INT 0
36744: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36745: LD_VAR 0 1
36749: NOT
36750: PUSH
36751: LD_VAR 0 1
36755: PPUSH
36756: CALL_OW 266
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: IN
36771: NOT
36772: OR
36773: PUSH
36774: LD_VAR 0 2
36778: NOT
36779: OR
36780: PUSH
36781: LD_VAR 0 5
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 3
36797: PUSH
36798: LD_INT 4
36800: PUSH
36801: LD_INT 5
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: IN
36812: NOT
36813: OR
36814: PUSH
36815: LD_VAR 0 3
36819: PPUSH
36820: LD_VAR 0 4
36824: PPUSH
36825: CALL_OW 488
36829: NOT
36830: OR
36831: IFFALSE 36835
// exit ;
36833: GO 37552
// pom := GetBase ( depot ) ;
36835: LD_ADDR_VAR 0 10
36839: PUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL_OW 274
36849: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36850: LD_ADDR_VAR 0 11
36854: PUSH
36855: LD_VAR 0 2
36859: PPUSH
36860: LD_VAR 0 1
36864: PPUSH
36865: CALL_OW 248
36869: PPUSH
36870: CALL_OW 450
36874: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36875: LD_VAR 0 10
36879: PPUSH
36880: LD_INT 1
36882: PPUSH
36883: CALL_OW 275
36887: PUSH
36888: LD_VAR 0 11
36892: PUSH
36893: LD_INT 1
36895: ARRAY
36896: GREATEREQUAL
36897: PUSH
36898: LD_VAR 0 10
36902: PPUSH
36903: LD_INT 2
36905: PPUSH
36906: CALL_OW 275
36910: PUSH
36911: LD_VAR 0 11
36915: PUSH
36916: LD_INT 2
36918: ARRAY
36919: GREATEREQUAL
36920: AND
36921: PUSH
36922: LD_VAR 0 10
36926: PPUSH
36927: LD_INT 3
36929: PPUSH
36930: CALL_OW 275
36934: PUSH
36935: LD_VAR 0 11
36939: PUSH
36940: LD_INT 3
36942: ARRAY
36943: GREATEREQUAL
36944: AND
36945: NOT
36946: IFFALSE 36950
// exit ;
36948: GO 37552
// if GetBType ( depot ) = b_depot then
36950: LD_VAR 0 1
36954: PPUSH
36955: CALL_OW 266
36959: PUSH
36960: LD_INT 0
36962: EQUAL
36963: IFFALSE 36975
// dist := 28 else
36965: LD_ADDR_VAR 0 14
36969: PUSH
36970: LD_INT 28
36972: ST_TO_ADDR
36973: GO 36983
// dist := 36 ;
36975: LD_ADDR_VAR 0 14
36979: PUSH
36980: LD_INT 36
36982: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36983: LD_VAR 0 1
36987: PPUSH
36988: LD_VAR 0 3
36992: PPUSH
36993: LD_VAR 0 4
36997: PPUSH
36998: CALL_OW 297
37002: PUSH
37003: LD_VAR 0 14
37007: GREATER
37008: IFFALSE 37012
// exit ;
37010: GO 37552
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37012: LD_ADDR_VAR 0 12
37016: PUSH
37017: LD_VAR 0 2
37021: PPUSH
37022: LD_VAR 0 3
37026: PPUSH
37027: LD_VAR 0 4
37031: PPUSH
37032: LD_VAR 0 5
37036: PPUSH
37037: LD_VAR 0 1
37041: PPUSH
37042: CALL_OW 248
37046: PPUSH
37047: LD_INT 0
37049: PPUSH
37050: CALL 37557 0 6
37054: ST_TO_ADDR
// if not hexes then
37055: LD_VAR 0 12
37059: NOT
37060: IFFALSE 37064
// exit ;
37062: GO 37552
// hex := GetHexInfo ( x , y ) ;
37064: LD_ADDR_VAR 0 15
37068: PUSH
37069: LD_VAR 0 3
37073: PPUSH
37074: LD_VAR 0 4
37078: PPUSH
37079: CALL_OW 546
37083: ST_TO_ADDR
// if hex [ 1 ] then
37084: LD_VAR 0 15
37088: PUSH
37089: LD_INT 1
37091: ARRAY
37092: IFFALSE 37096
// exit ;
37094: GO 37552
// height := hex [ 2 ] ;
37096: LD_ADDR_VAR 0 13
37100: PUSH
37101: LD_VAR 0 15
37105: PUSH
37106: LD_INT 2
37108: ARRAY
37109: ST_TO_ADDR
// for i = 1 to hexes do
37110: LD_ADDR_VAR 0 7
37114: PUSH
37115: DOUBLE
37116: LD_INT 1
37118: DEC
37119: ST_TO_ADDR
37120: LD_VAR 0 12
37124: PUSH
37125: FOR_TO
37126: IFFALSE 37456
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37128: LD_VAR 0 12
37132: PUSH
37133: LD_VAR 0 7
37137: ARRAY
37138: PUSH
37139: LD_INT 1
37141: ARRAY
37142: PPUSH
37143: LD_VAR 0 12
37147: PUSH
37148: LD_VAR 0 7
37152: ARRAY
37153: PUSH
37154: LD_INT 2
37156: ARRAY
37157: PPUSH
37158: CALL_OW 488
37162: NOT
37163: PUSH
37164: LD_VAR 0 12
37168: PUSH
37169: LD_VAR 0 7
37173: ARRAY
37174: PUSH
37175: LD_INT 1
37177: ARRAY
37178: PPUSH
37179: LD_VAR 0 12
37183: PUSH
37184: LD_VAR 0 7
37188: ARRAY
37189: PUSH
37190: LD_INT 2
37192: ARRAY
37193: PPUSH
37194: CALL_OW 428
37198: PUSH
37199: LD_INT 0
37201: GREATER
37202: OR
37203: PUSH
37204: LD_VAR 0 12
37208: PUSH
37209: LD_VAR 0 7
37213: ARRAY
37214: PUSH
37215: LD_INT 1
37217: ARRAY
37218: PPUSH
37219: LD_VAR 0 12
37223: PUSH
37224: LD_VAR 0 7
37228: ARRAY
37229: PUSH
37230: LD_INT 2
37232: ARRAY
37233: PPUSH
37234: CALL_OW 351
37238: OR
37239: IFFALSE 37245
// exit ;
37241: POP
37242: POP
37243: GO 37552
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37245: LD_ADDR_VAR 0 8
37249: PUSH
37250: LD_VAR 0 12
37254: PUSH
37255: LD_VAR 0 7
37259: ARRAY
37260: PUSH
37261: LD_INT 1
37263: ARRAY
37264: PPUSH
37265: LD_VAR 0 12
37269: PUSH
37270: LD_VAR 0 7
37274: ARRAY
37275: PUSH
37276: LD_INT 2
37278: ARRAY
37279: PPUSH
37280: CALL_OW 546
37284: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37285: LD_VAR 0 8
37289: PUSH
37290: LD_INT 1
37292: ARRAY
37293: PUSH
37294: LD_VAR 0 8
37298: PUSH
37299: LD_INT 2
37301: ARRAY
37302: PUSH
37303: LD_VAR 0 13
37307: PUSH
37308: LD_INT 2
37310: PLUS
37311: GREATER
37312: OR
37313: PUSH
37314: LD_VAR 0 8
37318: PUSH
37319: LD_INT 2
37321: ARRAY
37322: PUSH
37323: LD_VAR 0 13
37327: PUSH
37328: LD_INT 2
37330: MINUS
37331: LESS
37332: OR
37333: PUSH
37334: LD_VAR 0 8
37338: PUSH
37339: LD_INT 3
37341: ARRAY
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 8
37348: PUSH
37349: LD_INT 9
37351: PUSH
37352: LD_INT 10
37354: PUSH
37355: LD_INT 11
37357: PUSH
37358: LD_INT 12
37360: PUSH
37361: LD_INT 13
37363: PUSH
37364: LD_INT 16
37366: PUSH
37367: LD_INT 17
37369: PUSH
37370: LD_INT 18
37372: PUSH
37373: LD_INT 19
37375: PUSH
37376: LD_INT 20
37378: PUSH
37379: LD_INT 21
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: IN
37397: NOT
37398: OR
37399: PUSH
37400: LD_VAR 0 8
37404: PUSH
37405: LD_INT 5
37407: ARRAY
37408: NOT
37409: OR
37410: PUSH
37411: LD_VAR 0 8
37415: PUSH
37416: LD_INT 6
37418: ARRAY
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: LD_INT 7
37428: PUSH
37429: LD_INT 9
37431: PUSH
37432: LD_INT 10
37434: PUSH
37435: LD_INT 11
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: IN
37446: NOT
37447: OR
37448: IFFALSE 37454
// exit ;
37450: POP
37451: POP
37452: GO 37552
// end ;
37454: GO 37125
37456: POP
37457: POP
// side := GetSide ( depot ) ;
37458: LD_ADDR_VAR 0 9
37462: PUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: CALL_OW 255
37472: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37473: LD_VAR 0 9
37477: PPUSH
37478: LD_VAR 0 3
37482: PPUSH
37483: LD_VAR 0 4
37487: PPUSH
37488: LD_INT 20
37490: PPUSH
37491: CALL 29873 0 4
37495: PUSH
37496: LD_INT 4
37498: ARRAY
37499: IFFALSE 37503
// exit ;
37501: GO 37552
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37503: LD_VAR 0 2
37507: PUSH
37508: LD_INT 29
37510: PUSH
37511: LD_INT 30
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: IN
37518: PUSH
37519: LD_VAR 0 3
37523: PPUSH
37524: LD_VAR 0 4
37528: PPUSH
37529: LD_VAR 0 9
37533: PPUSH
37534: CALL_OW 440
37538: NOT
37539: AND
37540: IFFALSE 37544
// exit ;
37542: GO 37552
// result := true ;
37544: LD_ADDR_VAR 0 6
37548: PUSH
37549: LD_INT 1
37551: ST_TO_ADDR
// end ;
37552: LD_VAR 0 6
37556: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37557: LD_INT 0
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
37603: PPUSH
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
37615: PPUSH
37616: PPUSH
// result = [ ] ;
37617: LD_ADDR_VAR 0 7
37621: PUSH
37622: EMPTY
37623: ST_TO_ADDR
// temp_list = [ ] ;
37624: LD_ADDR_VAR 0 9
37628: PUSH
37629: EMPTY
37630: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37631: LD_VAR 0 4
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: LD_INT 3
37647: PUSH
37648: LD_INT 4
37650: PUSH
37651: LD_INT 5
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: IN
37662: NOT
37663: PUSH
37664: LD_VAR 0 1
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: IN
37679: PUSH
37680: LD_VAR 0 5
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: IN
37699: NOT
37700: AND
37701: OR
37702: IFFALSE 37706
// exit ;
37704: GO 56097
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37706: LD_VAR 0 1
37710: PUSH
37711: LD_INT 6
37713: PUSH
37714: LD_INT 7
37716: PUSH
37717: LD_INT 8
37719: PUSH
37720: LD_INT 13
37722: PUSH
37723: LD_INT 12
37725: PUSH
37726: LD_INT 15
37728: PUSH
37729: LD_INT 11
37731: PUSH
37732: LD_INT 14
37734: PUSH
37735: LD_INT 10
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: IN
37749: IFFALSE 37759
// btype = b_lab ;
37751: LD_ADDR_VAR 0 1
37755: PUSH
37756: LD_INT 6
37758: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37759: LD_VAR 0 6
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: IN
37778: NOT
37779: PUSH
37780: LD_VAR 0 1
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 2
37793: PUSH
37794: LD_INT 3
37796: PUSH
37797: LD_INT 6
37799: PUSH
37800: LD_INT 36
37802: PUSH
37803: LD_INT 4
37805: PUSH
37806: LD_INT 5
37808: PUSH
37809: LD_INT 31
37811: PUSH
37812: LD_INT 32
37814: PUSH
37815: LD_INT 33
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: IN
37831: NOT
37832: PUSH
37833: LD_VAR 0 6
37837: PUSH
37838: LD_INT 1
37840: EQUAL
37841: AND
37842: OR
37843: PUSH
37844: LD_VAR 0 1
37848: PUSH
37849: LD_INT 2
37851: PUSH
37852: LD_INT 3
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: IN
37859: NOT
37860: PUSH
37861: LD_VAR 0 6
37865: PUSH
37866: LD_INT 2
37868: EQUAL
37869: AND
37870: OR
37871: IFFALSE 37881
// mode = 0 ;
37873: LD_ADDR_VAR 0 6
37877: PUSH
37878: LD_INT 0
37880: ST_TO_ADDR
// case mode of 0 :
37881: LD_VAR 0 6
37885: PUSH
37886: LD_INT 0
37888: DOUBLE
37889: EQUAL
37890: IFTRUE 37894
37892: GO 49347
37894: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37895: LD_ADDR_VAR 0 11
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: LD_INT 2
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: LD_INT 2
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: LD_INT 2
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 3
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 3
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 2
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38088: LD_ADDR_VAR 0 12
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: LD_INT 1
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 2
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 2
38211: NEG
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 3
38256: NEG
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38284: LD_ADDR_VAR 0 13
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 1
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: LD_INT 2
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 2
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: LD_INT 3
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 3
38443: NEG
38444: PUSH
38445: LD_INT 2
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 3
38455: NEG
38456: PUSH
38457: LD_INT 3
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38483: LD_ADDR_VAR 0 14
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: LD_INT 1
38556: NEG
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: LD_INT 2
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 3
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 3
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38679: LD_ADDR_VAR 0 15
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: NEG
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 3
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 3
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38872: LD_ADDR_VAR 0 16
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: LD_INT 2
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39065: LD_ADDR_VAR 0 17
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 2
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: NEG
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: LD_INT 2
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39295: LD_ADDR_VAR 0 18
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: LD_INT 2
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 2
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 2
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: NEG
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39525: LD_ADDR_VAR 0 19
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 2
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: NEG
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: NEG
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: LD_INT 2
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39755: LD_ADDR_VAR 0 20
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 2
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: NEG
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 2
39942: NEG
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 2
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39985: LD_ADDR_VAR 0 21
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 2
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 2
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: LD_INT 2
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: NEG
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: NEG
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: LD_INT 2
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40215: LD_ADDR_VAR 0 22
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 2
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: LD_INT 2
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 2
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 2
40402: NEG
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 2
40414: NEG
40415: PUSH
40416: LD_INT 2
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40445: LD_ADDR_VAR 0 23
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: LD_INT 2
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 2
40541: NEG
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 2
40621: NEG
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: NEG
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: LD_INT 2
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: NEG
40657: PUSH
40658: LD_INT 3
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 3
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40725: LD_ADDR_VAR 0 24
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 2
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: NEG
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: NEG
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 3
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 3
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41001: LD_ADDR_VAR 0 25
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 3
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 3
41222: PUSH
41223: LD_INT 2
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 3
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: LD_INT 3
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41275: LD_ADDR_VAR 0 26
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 2
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: NEG
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: LD_INT 3
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 3
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41551: LD_ADDR_VAR 0 27
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: LD_INT 2
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 3
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41831: LD_ADDR_VAR 0 28
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: LD_INT 3
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: LD_INT 3
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 3
42066: NEG
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 3
42078: NEG
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42113: LD_ADDR_VAR 0 29
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: LD_INT 2
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 2
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 2
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 3
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 3
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 3
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 3
42357: NEG
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42392: LD_ADDR_VAR 0 30
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 2
42569: NEG
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: LD_INT 3
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 3
42604: PUSH
42605: LD_INT 2
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 3
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 3
42635: NEG
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42670: LD_ADDR_VAR 0 31
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: NEG
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: LD_INT 3
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 3
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: LD_INT 2
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 3
42913: NEG
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42948: LD_ADDR_VAR 0 32
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: NEG
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 3
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 3
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 3
43191: NEG
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43226: LD_ADDR_VAR 0 33
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 2
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: NEG
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 3
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 3
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 3
43470: NEG
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43505: LD_ADDR_VAR 0 34
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 2
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 2
43661: NEG
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: LD_INT 3
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 3
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 3
43750: NEG
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43785: LD_ADDR_VAR 0 35
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43897: LD_ADDR_VAR 0 36
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44009: LD_ADDR_VAR 0 37
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44121: LD_ADDR_VAR 0 38
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44233: LD_ADDR_VAR 0 39
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44345: LD_ADDR_VAR 0 40
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44457: LD_ADDR_VAR 0 41
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: LD_INT 3
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 3
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 3
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: LD_INT 3
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: LD_INT 3
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 3
44731: NEG
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 3
44742: NEG
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 3
44766: NEG
44767: PUSH
44768: LD_INT 3
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44807: LD_ADDR_VAR 0 42
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: LD_INT 3
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 3
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 3
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 3
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 3
45053: PUSH
45054: LD_INT 3
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: LD_INT 3
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 3
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 3
45104: NEG
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 3
45116: NEG
45117: PUSH
45118: LD_INT 3
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45157: LD_ADDR_VAR 0 43
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 3
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 3
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 3
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 3
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 3
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 3
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 3
45453: NEG
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45505: LD_ADDR_VAR 0 44
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 3
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: LD_INT 3
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 3
45802: NEG
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 3
45814: NEG
45815: PUSH
45816: LD_INT 3
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45855: LD_ADDR_VAR 0 45
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: NEG
46034: PUSH
46035: LD_INT 2
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: LD_INT 3
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 3
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 3
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: LD_INT 3
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 3
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 3
46164: NEG
46165: PUSH
46166: LD_INT 3
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46205: LD_ADDR_VAR 0 46
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 3
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 3
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 2
46490: NEG
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 3
46501: NEG
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 3
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46553: LD_ADDR_VAR 0 47
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46704: LD_ADDR_VAR 0 48
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46851: LD_ADDR_VAR 0 49
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46995: LD_ADDR_VAR 0 50
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47139: LD_ADDR_VAR 0 51
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47286: LD_ADDR_VAR 0 52
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: NEG
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47437: LD_ADDR_VAR 0 53
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 2
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47667: LD_ADDR_VAR 0 54
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47897: LD_ADDR_VAR 0 55
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 2
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48127: LD_ADDR_VAR 0 56
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48357: LD_ADDR_VAR 0 57
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48587: LD_ADDR_VAR 0 58
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48817: LD_ADDR_VAR 0 59
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48905: LD_ADDR_VAR 0 60
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48993: LD_ADDR_VAR 0 61
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49081: LD_ADDR_VAR 0 62
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49169: LD_ADDR_VAR 0 63
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49257: LD_ADDR_VAR 0 64
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: ST_TO_ADDR
// end ; 1 :
49345: GO 55242
49347: LD_INT 1
49349: DOUBLE
49350: EQUAL
49351: IFTRUE 49355
49353: GO 51978
49355: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49356: LD_ADDR_VAR 0 11
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 3
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 3
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 2
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: LIST
49399: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49400: LD_ADDR_VAR 0 12
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 3
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49441: LD_ADDR_VAR 0 13
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: LD_INT 3
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: LIST
49480: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49481: LD_ADDR_VAR 0 14
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 3
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 3
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49522: LD_ADDR_VAR 0 15
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 3
49540: NEG
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49566: LD_ADDR_VAR 0 16
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: LD_INT 3
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 3
49585: NEG
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 3
49597: NEG
49598: PUSH
49599: LD_INT 3
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: LIST
49611: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49612: LD_ADDR_VAR 0 17
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49656: LD_ADDR_VAR 0 18
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 3
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: LIST
49696: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49697: LD_ADDR_VAR 0 19
49701: PUSH
49702: LD_INT 3
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 3
49714: PUSH
49715: LD_INT 3
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: LD_INT 3
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: LIST
49736: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49737: LD_ADDR_VAR 0 20
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 3
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 3
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: LIST
49777: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49778: LD_ADDR_VAR 0 21
49782: PUSH
49783: LD_INT 2
49785: NEG
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 3
49796: NEG
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 3
49807: NEG
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: LIST
49821: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49822: LD_ADDR_VAR 0 22
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 3
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: NEG
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: LD_INT 3
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49868: LD_ADDR_VAR 0 23
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: LD_INT 4
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 3
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: LIST
49911: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49912: LD_ADDR_VAR 0 24
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 4
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49953: LD_ADDR_VAR 0 25
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 4
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: LD_INT 4
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49993: LD_ADDR_VAR 0 26
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 3
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 4
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50034: LD_ADDR_VAR 0 27
50038: PUSH
50039: LD_INT 3
50041: NEG
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 3
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 4
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: LIST
50077: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50078: LD_ADDR_VAR 0 28
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: LD_INT 3
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: LD_INT 4
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 4
50109: NEG
50110: PUSH
50111: LD_INT 3
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50124: LD_ADDR_VAR 0 29
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: LD_INT 4
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 4
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 3
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 5
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 5
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 4
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: LD_INT 6
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 6
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 5
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50279: LD_ADDR_VAR 0 30
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 3
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 4
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 4
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 4
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 5
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 5
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 5
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 6
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 6
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50422: LD_ADDR_VAR 0 31
50426: PUSH
50427: LD_INT 3
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 3
50439: PUSH
50440: LD_INT 3
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 2
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 4
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 4
50469: PUSH
50470: LD_INT 4
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 3
50479: PUSH
50480: LD_INT 4
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 5
50489: PUSH
50490: LD_INT 4
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 5
50499: PUSH
50500: LD_INT 5
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 4
50509: PUSH
50510: LD_INT 5
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 6
50519: PUSH
50520: LD_INT 5
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 6
50529: PUSH
50530: LD_INT 6
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 5
50539: PUSH
50540: LD_INT 6
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50561: LD_ADDR_VAR 0 32
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 3
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 4
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 4
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 3
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 5
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 5
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 4
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 6
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 6
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 5
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50704: LD_ADDR_VAR 0 33
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: NEG
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 3
50733: NEG
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 4
50756: NEG
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 4
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 4
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 5
50790: NEG
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 5
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 5
50813: NEG
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 6
50824: NEG
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 6
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50859: LD_ADDR_VAR 0 34
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: LD_INT 3
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: LD_INT 3
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 3
50902: NEG
50903: PUSH
50904: LD_INT 4
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 4
50914: NEG
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 4
50926: NEG
50927: PUSH
50928: LD_INT 4
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 4
50938: NEG
50939: PUSH
50940: LD_INT 5
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 5
50950: NEG
50951: PUSH
50952: LD_INT 4
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 5
50962: NEG
50963: PUSH
50964: LD_INT 5
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 5
50974: NEG
50975: PUSH
50976: LD_INT 6
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 6
50986: NEG
50987: PUSH
50988: LD_INT 5
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 6
50998: NEG
50999: PUSH
51000: LD_INT 6
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51022: LD_ADDR_VAR 0 41
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 3
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: LIST
51065: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51066: LD_ADDR_VAR 0 42
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 3
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: LIST
51106: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51107: LD_ADDR_VAR 0 43
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 3
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: LIST
51146: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51147: LD_ADDR_VAR 0 44
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51188: LD_ADDR_VAR 0 45
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51232: LD_ADDR_VAR 0 46
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 3
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: NEG
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51278: LD_ADDR_VAR 0 47
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: LD_INT 3
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51311: LD_ADDR_VAR 0 48
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51342: LD_ADDR_VAR 0 49
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51371: LD_ADDR_VAR 0 50
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 3
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51400: LD_ADDR_VAR 0 51
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51431: LD_ADDR_VAR 0 52
51435: PUSH
51436: LD_INT 3
51438: NEG
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: NEG
51451: PUSH
51452: LD_INT 2
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51464: LD_ADDR_VAR 0 53
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51508: LD_ADDR_VAR 0 54
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51549: LD_ADDR_VAR 0 55
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: LD_INT 3
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 3
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51589: LD_ADDR_VAR 0 56
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: LIST
51629: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51630: LD_ADDR_VAR 0 57
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 3
51648: NEG
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: LIST
51673: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51674: LD_ADDR_VAR 0 58
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: LD_INT 3
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 3
51705: NEG
51706: PUSH
51707: LD_INT 3
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: LIST
51719: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51720: LD_ADDR_VAR 0 59
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: LIST
51763: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51764: LD_ADDR_VAR 0 60
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51805: LD_ADDR_VAR 0 61
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: LIST
51844: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51845: LD_ADDR_VAR 0 62
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51886: LD_ADDR_VAR 0 63
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51930: LD_ADDR_VAR 0 64
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: ST_TO_ADDR
// end ; 2 :
51976: GO 55242
51978: LD_INT 2
51980: DOUBLE
51981: EQUAL
51982: IFTRUE 51986
51984: GO 55241
51986: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51987: LD_ADDR_VAR 0 29
51991: PUSH
51992: LD_INT 4
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 4
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 5
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 5
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 4
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 5
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: LD_INT 3
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 4
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 4
52117: PUSH
52118: LD_INT 4
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: LD_INT 4
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 4
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: LD_INT 4
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 4
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 4
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 5
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 5
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 4
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 2
52249: PUSH
52250: LD_INT 5
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 3
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 3
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: NEG
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 4
52326: NEG
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 4
52337: NEG
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 4
52349: NEG
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 4
52372: NEG
52373: PUSH
52374: LD_INT 4
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 4
52384: NEG
52385: PUSH
52386: LD_INT 5
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 3
52396: NEG
52397: PUSH
52398: LD_INT 4
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: NEG
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 4
52420: NEG
52421: PUSH
52422: LD_INT 3
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 5
52432: NEG
52433: PUSH
52434: LD_INT 4
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 5
52444: NEG
52445: PUSH
52446: LD_INT 5
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: NEG
52457: PUSH
52458: LD_INT 5
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 5
52468: NEG
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52525: LD_ADDR_VAR 0 30
52529: PUSH
52530: LD_INT 4
52532: PUSH
52533: LD_INT 4
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 4
52542: PUSH
52543: LD_INT 3
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 5
52552: PUSH
52553: LD_INT 4
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 5
52562: PUSH
52563: LD_INT 5
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 4
52572: PUSH
52573: LD_INT 5
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: LD_INT 4
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 5
52602: PUSH
52603: LD_INT 3
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 3
52612: PUSH
52613: LD_INT 5
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 3
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 4
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 4
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: LD_INT 4
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 4
52715: NEG
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 4
52726: NEG
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 3
52738: NEG
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: NEG
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 4
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 5
52771: NEG
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 5
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 5
52794: NEG
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 3
52817: NEG
52818: PUSH
52819: LD_INT 3
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: NEG
52830: PUSH
52831: LD_INT 4
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 3
52865: NEG
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 4
52877: NEG
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 4
52889: NEG
52890: PUSH
52891: LD_INT 4
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: LD_INT 4
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 4
52913: NEG
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 4
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 5
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 4
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: LD_INT 3
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 3
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 4
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 5
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: LD_INT 5
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53072: LD_ADDR_VAR 0 31
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 4
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 4
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 5
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 5
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 5
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 3
53172: NEG
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 3
53183: NEG
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 4
53228: NEG
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 4
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 4
53251: NEG
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 4
53274: NEG
53275: PUSH
53276: LD_INT 4
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 4
53286: NEG
53287: PUSH
53288: LD_INT 5
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: LD_INT 4
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 3
53310: NEG
53311: PUSH
53312: LD_INT 3
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 4
53322: NEG
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 5
53334: NEG
53335: PUSH
53336: LD_INT 4
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 5
53346: NEG
53347: PUSH
53348: LD_INT 5
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: LD_INT 5
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 5
53370: NEG
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 4
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 4
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 4
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 4
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 4
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 5
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 5
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 4
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 3
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 5
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53622: LD_ADDR_VAR 0 32
53626: PUSH
53627: LD_INT 4
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 4
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 3
53652: NEG
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 4
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 5
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 5
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 5
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: NEG
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 3
53731: NEG
53732: PUSH
53733: LD_INT 3
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 3
53743: NEG
53744: PUSH
53745: LD_INT 4
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 3
53779: NEG
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 4
53791: NEG
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 4
53803: NEG
53804: PUSH
53805: LD_INT 4
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: LD_INT 4
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 4
53827: NEG
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 4
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 5
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 4
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 3
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: LD_INT 4
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 5
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 3
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: LD_INT 5
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 4
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 4
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 4
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 4
54034: PUSH
54035: LD_INT 4
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 4
54044: PUSH
54045: LD_INT 3
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 5
54054: PUSH
54055: LD_INT 4
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 5
54064: PUSH
54065: LD_INT 5
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 4
54074: PUSH
54075: LD_INT 5
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 3
54084: PUSH
54085: LD_INT 4
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 3
54094: PUSH
54095: LD_INT 3
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 5
54104: PUSH
54105: LD_INT 3
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: LD_INT 5
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54169: LD_ADDR_VAR 0 33
54173: PUSH
54174: LD_INT 4
54176: NEG
54177: PUSH
54178: LD_INT 4
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 4
54188: NEG
54189: PUSH
54190: LD_INT 5
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: LD_INT 4
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 3
54212: NEG
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 4
54224: NEG
54225: PUSH
54226: LD_INT 3
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 5
54236: NEG
54237: PUSH
54238: LD_INT 4
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 5
54248: NEG
54249: PUSH
54250: LD_INT 5
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: LD_INT 5
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 5
54272: NEG
54273: PUSH
54274: LD_INT 3
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 3
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 4
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 3
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 4
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 4
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 4
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 4
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 5
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 5
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 4
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 3
54458: PUSH
54459: LD_INT 2
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 5
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: LD_INT 3
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 4
54499: PUSH
54500: LD_INT 3
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 4
54509: PUSH
54510: LD_INT 4
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 3
54519: PUSH
54520: LD_INT 4
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: LD_INT 3
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 4
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 4
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 4
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 4
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 5
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 5
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: LD_INT 4
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 5
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54707: LD_ADDR_VAR 0 34
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 4
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 5
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 4
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 3
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 3
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 4
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 5
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: LD_INT 5
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 4
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 4
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 3
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 4
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 4
54909: PUSH
54910: LD_INT 4
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 4
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 5
54929: PUSH
54930: LD_INT 4
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 5
54939: PUSH
54940: LD_INT 5
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 4
54949: PUSH
54950: LD_INT 5
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: LD_INT 4
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 3
54969: PUSH
54970: LD_INT 3
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 5
54979: PUSH
54980: LD_INT 3
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 3
54989: PUSH
54990: LD_INT 5
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 3
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 4
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 4
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: LD_INT 4
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 4
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 4
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 4
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 5
55148: NEG
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 5
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 5
55171: NEG
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 3
55183: NEG
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: ST_TO_ADDR
// end ; end ;
55239: GO 55242
55241: POP
// case btype of b_depot , b_warehouse :
55242: LD_VAR 0 1
55246: PUSH
55247: LD_INT 0
55249: DOUBLE
55250: EQUAL
55251: IFTRUE 55261
55253: LD_INT 1
55255: DOUBLE
55256: EQUAL
55257: IFTRUE 55261
55259: GO 55462
55261: POP
// case nation of nation_american :
55262: LD_VAR 0 5
55266: PUSH
55267: LD_INT 1
55269: DOUBLE
55270: EQUAL
55271: IFTRUE 55275
55273: GO 55331
55275: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55276: LD_ADDR_VAR 0 9
55280: PUSH
55281: LD_VAR 0 11
55285: PUSH
55286: LD_VAR 0 12
55290: PUSH
55291: LD_VAR 0 13
55295: PUSH
55296: LD_VAR 0 14
55300: PUSH
55301: LD_VAR 0 15
55305: PUSH
55306: LD_VAR 0 16
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: PUSH
55319: LD_VAR 0 4
55323: PUSH
55324: LD_INT 1
55326: PLUS
55327: ARRAY
55328: ST_TO_ADDR
55329: GO 55460
55331: LD_INT 2
55333: DOUBLE
55334: EQUAL
55335: IFTRUE 55339
55337: GO 55395
55339: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55340: LD_ADDR_VAR 0 9
55344: PUSH
55345: LD_VAR 0 17
55349: PUSH
55350: LD_VAR 0 18
55354: PUSH
55355: LD_VAR 0 19
55359: PUSH
55360: LD_VAR 0 20
55364: PUSH
55365: LD_VAR 0 21
55369: PUSH
55370: LD_VAR 0 22
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: PUSH
55383: LD_VAR 0 4
55387: PUSH
55388: LD_INT 1
55390: PLUS
55391: ARRAY
55392: ST_TO_ADDR
55393: GO 55460
55395: LD_INT 3
55397: DOUBLE
55398: EQUAL
55399: IFTRUE 55403
55401: GO 55459
55403: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55404: LD_ADDR_VAR 0 9
55408: PUSH
55409: LD_VAR 0 23
55413: PUSH
55414: LD_VAR 0 24
55418: PUSH
55419: LD_VAR 0 25
55423: PUSH
55424: LD_VAR 0 26
55428: PUSH
55429: LD_VAR 0 27
55433: PUSH
55434: LD_VAR 0 28
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: PUSH
55447: LD_VAR 0 4
55451: PUSH
55452: LD_INT 1
55454: PLUS
55455: ARRAY
55456: ST_TO_ADDR
55457: GO 55460
55459: POP
55460: GO 56015
55462: LD_INT 2
55464: DOUBLE
55465: EQUAL
55466: IFTRUE 55476
55468: LD_INT 3
55470: DOUBLE
55471: EQUAL
55472: IFTRUE 55476
55474: GO 55532
55476: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55477: LD_ADDR_VAR 0 9
55481: PUSH
55482: LD_VAR 0 29
55486: PUSH
55487: LD_VAR 0 30
55491: PUSH
55492: LD_VAR 0 31
55496: PUSH
55497: LD_VAR 0 32
55501: PUSH
55502: LD_VAR 0 33
55506: PUSH
55507: LD_VAR 0 34
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: PUSH
55520: LD_VAR 0 4
55524: PUSH
55525: LD_INT 1
55527: PLUS
55528: ARRAY
55529: ST_TO_ADDR
55530: GO 56015
55532: LD_INT 16
55534: DOUBLE
55535: EQUAL
55536: IFTRUE 55594
55538: LD_INT 17
55540: DOUBLE
55541: EQUAL
55542: IFTRUE 55594
55544: LD_INT 18
55546: DOUBLE
55547: EQUAL
55548: IFTRUE 55594
55550: LD_INT 19
55552: DOUBLE
55553: EQUAL
55554: IFTRUE 55594
55556: LD_INT 22
55558: DOUBLE
55559: EQUAL
55560: IFTRUE 55594
55562: LD_INT 20
55564: DOUBLE
55565: EQUAL
55566: IFTRUE 55594
55568: LD_INT 21
55570: DOUBLE
55571: EQUAL
55572: IFTRUE 55594
55574: LD_INT 23
55576: DOUBLE
55577: EQUAL
55578: IFTRUE 55594
55580: LD_INT 24
55582: DOUBLE
55583: EQUAL
55584: IFTRUE 55594
55586: LD_INT 25
55588: DOUBLE
55589: EQUAL
55590: IFTRUE 55594
55592: GO 55650
55594: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55595: LD_ADDR_VAR 0 9
55599: PUSH
55600: LD_VAR 0 35
55604: PUSH
55605: LD_VAR 0 36
55609: PUSH
55610: LD_VAR 0 37
55614: PUSH
55615: LD_VAR 0 38
55619: PUSH
55620: LD_VAR 0 39
55624: PUSH
55625: LD_VAR 0 40
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: PUSH
55638: LD_VAR 0 4
55642: PUSH
55643: LD_INT 1
55645: PLUS
55646: ARRAY
55647: ST_TO_ADDR
55648: GO 56015
55650: LD_INT 6
55652: DOUBLE
55653: EQUAL
55654: IFTRUE 55706
55656: LD_INT 7
55658: DOUBLE
55659: EQUAL
55660: IFTRUE 55706
55662: LD_INT 8
55664: DOUBLE
55665: EQUAL
55666: IFTRUE 55706
55668: LD_INT 13
55670: DOUBLE
55671: EQUAL
55672: IFTRUE 55706
55674: LD_INT 12
55676: DOUBLE
55677: EQUAL
55678: IFTRUE 55706
55680: LD_INT 15
55682: DOUBLE
55683: EQUAL
55684: IFTRUE 55706
55686: LD_INT 11
55688: DOUBLE
55689: EQUAL
55690: IFTRUE 55706
55692: LD_INT 14
55694: DOUBLE
55695: EQUAL
55696: IFTRUE 55706
55698: LD_INT 10
55700: DOUBLE
55701: EQUAL
55702: IFTRUE 55706
55704: GO 55762
55706: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55707: LD_ADDR_VAR 0 9
55711: PUSH
55712: LD_VAR 0 41
55716: PUSH
55717: LD_VAR 0 42
55721: PUSH
55722: LD_VAR 0 43
55726: PUSH
55727: LD_VAR 0 44
55731: PUSH
55732: LD_VAR 0 45
55736: PUSH
55737: LD_VAR 0 46
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: PUSH
55750: LD_VAR 0 4
55754: PUSH
55755: LD_INT 1
55757: PLUS
55758: ARRAY
55759: ST_TO_ADDR
55760: GO 56015
55762: LD_INT 36
55764: DOUBLE
55765: EQUAL
55766: IFTRUE 55770
55768: GO 55826
55770: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55771: LD_ADDR_VAR 0 9
55775: PUSH
55776: LD_VAR 0 47
55780: PUSH
55781: LD_VAR 0 48
55785: PUSH
55786: LD_VAR 0 49
55790: PUSH
55791: LD_VAR 0 50
55795: PUSH
55796: LD_VAR 0 51
55800: PUSH
55801: LD_VAR 0 52
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: PUSH
55814: LD_VAR 0 4
55818: PUSH
55819: LD_INT 1
55821: PLUS
55822: ARRAY
55823: ST_TO_ADDR
55824: GO 56015
55826: LD_INT 4
55828: DOUBLE
55829: EQUAL
55830: IFTRUE 55852
55832: LD_INT 5
55834: DOUBLE
55835: EQUAL
55836: IFTRUE 55852
55838: LD_INT 34
55840: DOUBLE
55841: EQUAL
55842: IFTRUE 55852
55844: LD_INT 37
55846: DOUBLE
55847: EQUAL
55848: IFTRUE 55852
55850: GO 55908
55852: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55853: LD_ADDR_VAR 0 9
55857: PUSH
55858: LD_VAR 0 53
55862: PUSH
55863: LD_VAR 0 54
55867: PUSH
55868: LD_VAR 0 55
55872: PUSH
55873: LD_VAR 0 56
55877: PUSH
55878: LD_VAR 0 57
55882: PUSH
55883: LD_VAR 0 58
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: PUSH
55896: LD_VAR 0 4
55900: PUSH
55901: LD_INT 1
55903: PLUS
55904: ARRAY
55905: ST_TO_ADDR
55906: GO 56015
55908: LD_INT 31
55910: DOUBLE
55911: EQUAL
55912: IFTRUE 55958
55914: LD_INT 32
55916: DOUBLE
55917: EQUAL
55918: IFTRUE 55958
55920: LD_INT 33
55922: DOUBLE
55923: EQUAL
55924: IFTRUE 55958
55926: LD_INT 27
55928: DOUBLE
55929: EQUAL
55930: IFTRUE 55958
55932: LD_INT 26
55934: DOUBLE
55935: EQUAL
55936: IFTRUE 55958
55938: LD_INT 28
55940: DOUBLE
55941: EQUAL
55942: IFTRUE 55958
55944: LD_INT 29
55946: DOUBLE
55947: EQUAL
55948: IFTRUE 55958
55950: LD_INT 30
55952: DOUBLE
55953: EQUAL
55954: IFTRUE 55958
55956: GO 56014
55958: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55959: LD_ADDR_VAR 0 9
55963: PUSH
55964: LD_VAR 0 59
55968: PUSH
55969: LD_VAR 0 60
55973: PUSH
55974: LD_VAR 0 61
55978: PUSH
55979: LD_VAR 0 62
55983: PUSH
55984: LD_VAR 0 63
55988: PUSH
55989: LD_VAR 0 64
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: PUSH
56002: LD_VAR 0 4
56006: PUSH
56007: LD_INT 1
56009: PLUS
56010: ARRAY
56011: ST_TO_ADDR
56012: GO 56015
56014: POP
// temp_list2 = [ ] ;
56015: LD_ADDR_VAR 0 10
56019: PUSH
56020: EMPTY
56021: ST_TO_ADDR
// for i in temp_list do
56022: LD_ADDR_VAR 0 8
56026: PUSH
56027: LD_VAR 0 9
56031: PUSH
56032: FOR_IN
56033: IFFALSE 56085
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56035: LD_ADDR_VAR 0 10
56039: PUSH
56040: LD_VAR 0 10
56044: PUSH
56045: LD_VAR 0 8
56049: PUSH
56050: LD_INT 1
56052: ARRAY
56053: PUSH
56054: LD_VAR 0 2
56058: PLUS
56059: PUSH
56060: LD_VAR 0 8
56064: PUSH
56065: LD_INT 2
56067: ARRAY
56068: PUSH
56069: LD_VAR 0 3
56073: PLUS
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: EMPTY
56080: LIST
56081: ADD
56082: ST_TO_ADDR
56083: GO 56032
56085: POP
56086: POP
// result = temp_list2 ;
56087: LD_ADDR_VAR 0 7
56091: PUSH
56092: LD_VAR 0 10
56096: ST_TO_ADDR
// end ;
56097: LD_VAR 0 7
56101: RET
// export function EnemyInRange ( unit , dist ) ; begin
56102: LD_INT 0
56104: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56105: LD_ADDR_VAR 0 3
56109: PUSH
56110: LD_VAR 0 1
56114: PPUSH
56115: CALL_OW 255
56119: PPUSH
56120: LD_VAR 0 1
56124: PPUSH
56125: CALL_OW 250
56129: PPUSH
56130: LD_VAR 0 1
56134: PPUSH
56135: CALL_OW 251
56139: PPUSH
56140: LD_VAR 0 2
56144: PPUSH
56145: CALL 29873 0 4
56149: PUSH
56150: LD_INT 4
56152: ARRAY
56153: ST_TO_ADDR
// end ;
56154: LD_VAR 0 3
56158: RET
// export function PlayerSeeMe ( unit ) ; begin
56159: LD_INT 0
56161: PPUSH
// result := See ( your_side , unit ) ;
56162: LD_ADDR_VAR 0 2
56166: PUSH
56167: LD_OWVAR 2
56171: PPUSH
56172: LD_VAR 0 1
56176: PPUSH
56177: CALL_OW 292
56181: ST_TO_ADDR
// end ;
56182: LD_VAR 0 2
56186: RET
// export function ReverseDir ( unit ) ; begin
56187: LD_INT 0
56189: PPUSH
// if not unit then
56190: LD_VAR 0 1
56194: NOT
56195: IFFALSE 56199
// exit ;
56197: GO 56222
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56199: LD_ADDR_VAR 0 2
56203: PUSH
56204: LD_VAR 0 1
56208: PPUSH
56209: CALL_OW 254
56213: PUSH
56214: LD_INT 3
56216: PLUS
56217: PUSH
56218: LD_INT 6
56220: MOD
56221: ST_TO_ADDR
// end ;
56222: LD_VAR 0 2
56226: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56227: LD_INT 0
56229: PPUSH
56230: PPUSH
56231: PPUSH
56232: PPUSH
56233: PPUSH
// if not hexes then
56234: LD_VAR 0 2
56238: NOT
56239: IFFALSE 56243
// exit ;
56241: GO 56391
// dist := 9999 ;
56243: LD_ADDR_VAR 0 5
56247: PUSH
56248: LD_INT 9999
56250: ST_TO_ADDR
// for i = 1 to hexes do
56251: LD_ADDR_VAR 0 4
56255: PUSH
56256: DOUBLE
56257: LD_INT 1
56259: DEC
56260: ST_TO_ADDR
56261: LD_VAR 0 2
56265: PUSH
56266: FOR_TO
56267: IFFALSE 56379
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56269: LD_VAR 0 1
56273: PPUSH
56274: LD_VAR 0 2
56278: PUSH
56279: LD_VAR 0 4
56283: ARRAY
56284: PUSH
56285: LD_INT 1
56287: ARRAY
56288: PPUSH
56289: LD_VAR 0 2
56293: PUSH
56294: LD_VAR 0 4
56298: ARRAY
56299: PUSH
56300: LD_INT 2
56302: ARRAY
56303: PPUSH
56304: CALL_OW 297
56308: PUSH
56309: LD_VAR 0 5
56313: LESS
56314: IFFALSE 56377
// begin hex := hexes [ i ] ;
56316: LD_ADDR_VAR 0 7
56320: PUSH
56321: LD_VAR 0 2
56325: PUSH
56326: LD_VAR 0 4
56330: ARRAY
56331: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56332: LD_ADDR_VAR 0 5
56336: PUSH
56337: LD_VAR 0 1
56341: PPUSH
56342: LD_VAR 0 2
56346: PUSH
56347: LD_VAR 0 4
56351: ARRAY
56352: PUSH
56353: LD_INT 1
56355: ARRAY
56356: PPUSH
56357: LD_VAR 0 2
56361: PUSH
56362: LD_VAR 0 4
56366: ARRAY
56367: PUSH
56368: LD_INT 2
56370: ARRAY
56371: PPUSH
56372: CALL_OW 297
56376: ST_TO_ADDR
// end ; end ;
56377: GO 56266
56379: POP
56380: POP
// result := hex ;
56381: LD_ADDR_VAR 0 3
56385: PUSH
56386: LD_VAR 0 7
56390: ST_TO_ADDR
// end ;
56391: LD_VAR 0 3
56395: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56396: LD_INT 0
56398: PPUSH
56399: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56400: LD_VAR 0 1
56404: NOT
56405: PUSH
56406: LD_VAR 0 1
56410: PUSH
56411: LD_INT 21
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 23
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PPUSH
56435: CALL_OW 69
56439: IN
56440: NOT
56441: OR
56442: IFFALSE 56446
// exit ;
56444: GO 56493
// for i = 1 to 3 do
56446: LD_ADDR_VAR 0 3
56450: PUSH
56451: DOUBLE
56452: LD_INT 1
56454: DEC
56455: ST_TO_ADDR
56456: LD_INT 3
56458: PUSH
56459: FOR_TO
56460: IFFALSE 56491
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56462: LD_VAR 0 1
56466: PPUSH
56467: CALL_OW 250
56471: PPUSH
56472: LD_VAR 0 1
56476: PPUSH
56477: CALL_OW 251
56481: PPUSH
56482: LD_INT 1
56484: PPUSH
56485: CALL_OW 453
56489: GO 56459
56491: POP
56492: POP
// end ;
56493: LD_VAR 0 2
56497: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56498: LD_INT 0
56500: PPUSH
56501: PPUSH
56502: PPUSH
56503: PPUSH
56504: PPUSH
56505: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56506: LD_VAR 0 1
56510: NOT
56511: PUSH
56512: LD_VAR 0 2
56516: NOT
56517: OR
56518: PUSH
56519: LD_VAR 0 1
56523: PPUSH
56524: CALL_OW 314
56528: OR
56529: IFFALSE 56533
// exit ;
56531: GO 56974
// x := GetX ( enemy_unit ) ;
56533: LD_ADDR_VAR 0 7
56537: PUSH
56538: LD_VAR 0 2
56542: PPUSH
56543: CALL_OW 250
56547: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56548: LD_ADDR_VAR 0 8
56552: PUSH
56553: LD_VAR 0 2
56557: PPUSH
56558: CALL_OW 251
56562: ST_TO_ADDR
// if not x or not y then
56563: LD_VAR 0 7
56567: NOT
56568: PUSH
56569: LD_VAR 0 8
56573: NOT
56574: OR
56575: IFFALSE 56579
// exit ;
56577: GO 56974
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56579: LD_ADDR_VAR 0 6
56583: PUSH
56584: LD_VAR 0 7
56588: PPUSH
56589: LD_INT 0
56591: PPUSH
56592: LD_INT 4
56594: PPUSH
56595: CALL_OW 272
56599: PUSH
56600: LD_VAR 0 8
56604: PPUSH
56605: LD_INT 0
56607: PPUSH
56608: LD_INT 4
56610: PPUSH
56611: CALL_OW 273
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_VAR 0 7
56624: PPUSH
56625: LD_INT 1
56627: PPUSH
56628: LD_INT 4
56630: PPUSH
56631: CALL_OW 272
56635: PUSH
56636: LD_VAR 0 8
56640: PPUSH
56641: LD_INT 1
56643: PPUSH
56644: LD_INT 4
56646: PPUSH
56647: CALL_OW 273
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_VAR 0 7
56660: PPUSH
56661: LD_INT 2
56663: PPUSH
56664: LD_INT 4
56666: PPUSH
56667: CALL_OW 272
56671: PUSH
56672: LD_VAR 0 8
56676: PPUSH
56677: LD_INT 2
56679: PPUSH
56680: LD_INT 4
56682: PPUSH
56683: CALL_OW 273
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_VAR 0 7
56696: PPUSH
56697: LD_INT 3
56699: PPUSH
56700: LD_INT 4
56702: PPUSH
56703: CALL_OW 272
56707: PUSH
56708: LD_VAR 0 8
56712: PPUSH
56713: LD_INT 3
56715: PPUSH
56716: LD_INT 4
56718: PPUSH
56719: CALL_OW 273
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_VAR 0 7
56732: PPUSH
56733: LD_INT 4
56735: PPUSH
56736: LD_INT 4
56738: PPUSH
56739: CALL_OW 272
56743: PUSH
56744: LD_VAR 0 8
56748: PPUSH
56749: LD_INT 4
56751: PPUSH
56752: LD_INT 4
56754: PPUSH
56755: CALL_OW 273
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_VAR 0 7
56768: PPUSH
56769: LD_INT 5
56771: PPUSH
56772: LD_INT 4
56774: PPUSH
56775: CALL_OW 272
56779: PUSH
56780: LD_VAR 0 8
56784: PPUSH
56785: LD_INT 5
56787: PPUSH
56788: LD_INT 4
56790: PPUSH
56791: CALL_OW 273
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: ST_TO_ADDR
// for i = tmp downto 1 do
56808: LD_ADDR_VAR 0 4
56812: PUSH
56813: DOUBLE
56814: LD_VAR 0 6
56818: INC
56819: ST_TO_ADDR
56820: LD_INT 1
56822: PUSH
56823: FOR_DOWNTO
56824: IFFALSE 56925
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56826: LD_VAR 0 6
56830: PUSH
56831: LD_VAR 0 4
56835: ARRAY
56836: PUSH
56837: LD_INT 1
56839: ARRAY
56840: PPUSH
56841: LD_VAR 0 6
56845: PUSH
56846: LD_VAR 0 4
56850: ARRAY
56851: PUSH
56852: LD_INT 2
56854: ARRAY
56855: PPUSH
56856: CALL_OW 488
56860: NOT
56861: PUSH
56862: LD_VAR 0 6
56866: PUSH
56867: LD_VAR 0 4
56871: ARRAY
56872: PUSH
56873: LD_INT 1
56875: ARRAY
56876: PPUSH
56877: LD_VAR 0 6
56881: PUSH
56882: LD_VAR 0 4
56886: ARRAY
56887: PUSH
56888: LD_INT 2
56890: ARRAY
56891: PPUSH
56892: CALL_OW 428
56896: PUSH
56897: LD_INT 0
56899: NONEQUAL
56900: OR
56901: IFFALSE 56923
// tmp := Delete ( tmp , i ) ;
56903: LD_ADDR_VAR 0 6
56907: PUSH
56908: LD_VAR 0 6
56912: PPUSH
56913: LD_VAR 0 4
56917: PPUSH
56918: CALL_OW 3
56922: ST_TO_ADDR
56923: GO 56823
56925: POP
56926: POP
// j := GetClosestHex ( unit , tmp ) ;
56927: LD_ADDR_VAR 0 5
56931: PUSH
56932: LD_VAR 0 1
56936: PPUSH
56937: LD_VAR 0 6
56941: PPUSH
56942: CALL 56227 0 2
56946: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56947: LD_VAR 0 1
56951: PPUSH
56952: LD_VAR 0 5
56956: PUSH
56957: LD_INT 1
56959: ARRAY
56960: PPUSH
56961: LD_VAR 0 5
56965: PUSH
56966: LD_INT 2
56968: ARRAY
56969: PPUSH
56970: CALL_OW 111
// end ;
56974: LD_VAR 0 3
56978: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56979: LD_INT 0
56981: PPUSH
56982: PPUSH
56983: PPUSH
// uc_side = 0 ;
56984: LD_ADDR_OWVAR 20
56988: PUSH
56989: LD_INT 0
56991: ST_TO_ADDR
// uc_nation = 0 ;
56992: LD_ADDR_OWVAR 21
56996: PUSH
56997: LD_INT 0
56999: ST_TO_ADDR
// InitHc_All ( ) ;
57000: CALL_OW 584
// InitVc ;
57004: CALL_OW 20
// if mastodonts then
57008: LD_VAR 0 6
57012: IFFALSE 57079
// for i = 1 to mastodonts do
57014: LD_ADDR_VAR 0 11
57018: PUSH
57019: DOUBLE
57020: LD_INT 1
57022: DEC
57023: ST_TO_ADDR
57024: LD_VAR 0 6
57028: PUSH
57029: FOR_TO
57030: IFFALSE 57077
// begin vc_chassis := 31 ;
57032: LD_ADDR_OWVAR 37
57036: PUSH
57037: LD_INT 31
57039: ST_TO_ADDR
// vc_control := control_rider ;
57040: LD_ADDR_OWVAR 38
57044: PUSH
57045: LD_INT 4
57047: ST_TO_ADDR
// animal := CreateVehicle ;
57048: LD_ADDR_VAR 0 12
57052: PUSH
57053: CALL_OW 45
57057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57058: LD_VAR 0 12
57062: PPUSH
57063: LD_VAR 0 8
57067: PPUSH
57068: LD_INT 0
57070: PPUSH
57071: CALL 59267 0 3
// end ;
57075: GO 57029
57077: POP
57078: POP
// if horses then
57079: LD_VAR 0 5
57083: IFFALSE 57150
// for i = 1 to horses do
57085: LD_ADDR_VAR 0 11
57089: PUSH
57090: DOUBLE
57091: LD_INT 1
57093: DEC
57094: ST_TO_ADDR
57095: LD_VAR 0 5
57099: PUSH
57100: FOR_TO
57101: IFFALSE 57148
// begin hc_class := 21 ;
57103: LD_ADDR_OWVAR 28
57107: PUSH
57108: LD_INT 21
57110: ST_TO_ADDR
// hc_gallery :=  ;
57111: LD_ADDR_OWVAR 33
57115: PUSH
57116: LD_STRING 
57118: ST_TO_ADDR
// animal := CreateHuman ;
57119: LD_ADDR_VAR 0 12
57123: PUSH
57124: CALL_OW 44
57128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57129: LD_VAR 0 12
57133: PPUSH
57134: LD_VAR 0 8
57138: PPUSH
57139: LD_INT 0
57141: PPUSH
57142: CALL 59267 0 3
// end ;
57146: GO 57100
57148: POP
57149: POP
// if birds then
57150: LD_VAR 0 1
57154: IFFALSE 57221
// for i = 1 to birds do
57156: LD_ADDR_VAR 0 11
57160: PUSH
57161: DOUBLE
57162: LD_INT 1
57164: DEC
57165: ST_TO_ADDR
57166: LD_VAR 0 1
57170: PUSH
57171: FOR_TO
57172: IFFALSE 57219
// begin hc_class = 18 ;
57174: LD_ADDR_OWVAR 28
57178: PUSH
57179: LD_INT 18
57181: ST_TO_ADDR
// hc_gallery =  ;
57182: LD_ADDR_OWVAR 33
57186: PUSH
57187: LD_STRING 
57189: ST_TO_ADDR
// animal := CreateHuman ;
57190: LD_ADDR_VAR 0 12
57194: PUSH
57195: CALL_OW 44
57199: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57200: LD_VAR 0 12
57204: PPUSH
57205: LD_VAR 0 8
57209: PPUSH
57210: LD_INT 0
57212: PPUSH
57213: CALL 59267 0 3
// end ;
57217: GO 57171
57219: POP
57220: POP
// if tigers then
57221: LD_VAR 0 2
57225: IFFALSE 57309
// for i = 1 to tigers do
57227: LD_ADDR_VAR 0 11
57231: PUSH
57232: DOUBLE
57233: LD_INT 1
57235: DEC
57236: ST_TO_ADDR
57237: LD_VAR 0 2
57241: PUSH
57242: FOR_TO
57243: IFFALSE 57307
// begin hc_class = class_tiger ;
57245: LD_ADDR_OWVAR 28
57249: PUSH
57250: LD_INT 14
57252: ST_TO_ADDR
// hc_gallery =  ;
57253: LD_ADDR_OWVAR 33
57257: PUSH
57258: LD_STRING 
57260: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57261: LD_ADDR_OWVAR 35
57265: PUSH
57266: LD_INT 7
57268: NEG
57269: PPUSH
57270: LD_INT 7
57272: PPUSH
57273: CALL_OW 12
57277: ST_TO_ADDR
// animal := CreateHuman ;
57278: LD_ADDR_VAR 0 12
57282: PUSH
57283: CALL_OW 44
57287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57288: LD_VAR 0 12
57292: PPUSH
57293: LD_VAR 0 8
57297: PPUSH
57298: LD_INT 0
57300: PPUSH
57301: CALL 59267 0 3
// end ;
57305: GO 57242
57307: POP
57308: POP
// if apemans then
57309: LD_VAR 0 3
57313: IFFALSE 57436
// for i = 1 to apemans do
57315: LD_ADDR_VAR 0 11
57319: PUSH
57320: DOUBLE
57321: LD_INT 1
57323: DEC
57324: ST_TO_ADDR
57325: LD_VAR 0 3
57329: PUSH
57330: FOR_TO
57331: IFFALSE 57434
// begin hc_class = class_apeman ;
57333: LD_ADDR_OWVAR 28
57337: PUSH
57338: LD_INT 12
57340: ST_TO_ADDR
// hc_gallery =  ;
57341: LD_ADDR_OWVAR 33
57345: PUSH
57346: LD_STRING 
57348: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
57349: LD_ADDR_OWVAR 35
57353: PUSH
57354: LD_INT 5
57356: NEG
57357: PPUSH
57358: LD_INT 5
57360: PPUSH
57361: CALL_OW 12
57365: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57366: LD_ADDR_OWVAR 31
57370: PUSH
57371: LD_INT 1
57373: PPUSH
57374: LD_INT 3
57376: PPUSH
57377: CALL_OW 12
57381: PUSH
57382: LD_INT 1
57384: PPUSH
57385: LD_INT 3
57387: PPUSH
57388: CALL_OW 12
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: ST_TO_ADDR
// animal := CreateHuman ;
57405: LD_ADDR_VAR 0 12
57409: PUSH
57410: CALL_OW 44
57414: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57415: LD_VAR 0 12
57419: PPUSH
57420: LD_VAR 0 8
57424: PPUSH
57425: LD_INT 0
57427: PPUSH
57428: CALL 59267 0 3
// end ;
57432: GO 57330
57434: POP
57435: POP
// if enchidnas then
57436: LD_VAR 0 4
57440: IFFALSE 57507
// for i = 1 to enchidnas do
57442: LD_ADDR_VAR 0 11
57446: PUSH
57447: DOUBLE
57448: LD_INT 1
57450: DEC
57451: ST_TO_ADDR
57452: LD_VAR 0 4
57456: PUSH
57457: FOR_TO
57458: IFFALSE 57505
// begin hc_class = 13 ;
57460: LD_ADDR_OWVAR 28
57464: PUSH
57465: LD_INT 13
57467: ST_TO_ADDR
// hc_gallery =  ;
57468: LD_ADDR_OWVAR 33
57472: PUSH
57473: LD_STRING 
57475: ST_TO_ADDR
// animal := CreateHuman ;
57476: LD_ADDR_VAR 0 12
57480: PUSH
57481: CALL_OW 44
57485: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57486: LD_VAR 0 12
57490: PPUSH
57491: LD_VAR 0 8
57495: PPUSH
57496: LD_INT 0
57498: PPUSH
57499: CALL 59267 0 3
// end ;
57503: GO 57457
57505: POP
57506: POP
// if fishes then
57507: LD_VAR 0 7
57511: IFFALSE 57578
// for i = 1 to fishes do
57513: LD_ADDR_VAR 0 11
57517: PUSH
57518: DOUBLE
57519: LD_INT 1
57521: DEC
57522: ST_TO_ADDR
57523: LD_VAR 0 7
57527: PUSH
57528: FOR_TO
57529: IFFALSE 57576
// begin hc_class = 20 ;
57531: LD_ADDR_OWVAR 28
57535: PUSH
57536: LD_INT 20
57538: ST_TO_ADDR
// hc_gallery =  ;
57539: LD_ADDR_OWVAR 33
57543: PUSH
57544: LD_STRING 
57546: ST_TO_ADDR
// animal := CreateHuman ;
57547: LD_ADDR_VAR 0 12
57551: PUSH
57552: CALL_OW 44
57556: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57557: LD_VAR 0 12
57561: PPUSH
57562: LD_VAR 0 9
57566: PPUSH
57567: LD_INT 0
57569: PPUSH
57570: CALL 59267 0 3
// end ;
57574: GO 57528
57576: POP
57577: POP
// end ;
57578: LD_VAR 0 10
57582: RET
// export function WantHeal ( sci , unit ) ; begin
57583: LD_INT 0
57585: PPUSH
// if GetTaskList ( sci ) > 0 then
57586: LD_VAR 0 1
57590: PPUSH
57591: CALL_OW 437
57595: PUSH
57596: LD_INT 0
57598: GREATER
57599: IFFALSE 57669
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57601: LD_VAR 0 1
57605: PPUSH
57606: CALL_OW 437
57610: PUSH
57611: LD_INT 1
57613: ARRAY
57614: PUSH
57615: LD_INT 1
57617: ARRAY
57618: PUSH
57619: LD_STRING l
57621: EQUAL
57622: PUSH
57623: LD_VAR 0 1
57627: PPUSH
57628: CALL_OW 437
57632: PUSH
57633: LD_INT 1
57635: ARRAY
57636: PUSH
57637: LD_INT 4
57639: ARRAY
57640: PUSH
57641: LD_VAR 0 2
57645: EQUAL
57646: AND
57647: IFFALSE 57659
// result := true else
57649: LD_ADDR_VAR 0 3
57653: PUSH
57654: LD_INT 1
57656: ST_TO_ADDR
57657: GO 57667
// result := false ;
57659: LD_ADDR_VAR 0 3
57663: PUSH
57664: LD_INT 0
57666: ST_TO_ADDR
// end else
57667: GO 57677
// result := false ;
57669: LD_ADDR_VAR 0 3
57673: PUSH
57674: LD_INT 0
57676: ST_TO_ADDR
// end ;
57677: LD_VAR 0 3
57681: RET
// export function HealTarget ( sci ) ; begin
57682: LD_INT 0
57684: PPUSH
// if not sci then
57685: LD_VAR 0 1
57689: NOT
57690: IFFALSE 57694
// exit ;
57692: GO 57759
// result := 0 ;
57694: LD_ADDR_VAR 0 2
57698: PUSH
57699: LD_INT 0
57701: ST_TO_ADDR
// if GetTaskList ( sci ) then
57702: LD_VAR 0 1
57706: PPUSH
57707: CALL_OW 437
57711: IFFALSE 57759
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57713: LD_VAR 0 1
57717: PPUSH
57718: CALL_OW 437
57722: PUSH
57723: LD_INT 1
57725: ARRAY
57726: PUSH
57727: LD_INT 1
57729: ARRAY
57730: PUSH
57731: LD_STRING l
57733: EQUAL
57734: IFFALSE 57759
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57736: LD_ADDR_VAR 0 2
57740: PUSH
57741: LD_VAR 0 1
57745: PPUSH
57746: CALL_OW 437
57750: PUSH
57751: LD_INT 1
57753: ARRAY
57754: PUSH
57755: LD_INT 4
57757: ARRAY
57758: ST_TO_ADDR
// end ;
57759: LD_VAR 0 2
57763: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57764: LD_INT 0
57766: PPUSH
57767: PPUSH
57768: PPUSH
57769: PPUSH
// if not base_units then
57770: LD_VAR 0 1
57774: NOT
57775: IFFALSE 57779
// exit ;
57777: GO 57866
// result := false ;
57779: LD_ADDR_VAR 0 2
57783: PUSH
57784: LD_INT 0
57786: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57787: LD_ADDR_VAR 0 5
57791: PUSH
57792: LD_VAR 0 1
57796: PPUSH
57797: LD_INT 21
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PPUSH
57807: CALL_OW 72
57811: ST_TO_ADDR
// if not tmp then
57812: LD_VAR 0 5
57816: NOT
57817: IFFALSE 57821
// exit ;
57819: GO 57866
// for i in tmp do
57821: LD_ADDR_VAR 0 3
57825: PUSH
57826: LD_VAR 0 5
57830: PUSH
57831: FOR_IN
57832: IFFALSE 57864
// begin result := EnemyInRange ( i , 22 ) ;
57834: LD_ADDR_VAR 0 2
57838: PUSH
57839: LD_VAR 0 3
57843: PPUSH
57844: LD_INT 22
57846: PPUSH
57847: CALL 56102 0 2
57851: ST_TO_ADDR
// if result then
57852: LD_VAR 0 2
57856: IFFALSE 57862
// exit ;
57858: POP
57859: POP
57860: GO 57866
// end ;
57862: GO 57831
57864: POP
57865: POP
// end ;
57866: LD_VAR 0 2
57870: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57871: LD_INT 0
57873: PPUSH
57874: PPUSH
// if not units then
57875: LD_VAR 0 1
57879: NOT
57880: IFFALSE 57884
// exit ;
57882: GO 57954
// result := [ ] ;
57884: LD_ADDR_VAR 0 3
57888: PUSH
57889: EMPTY
57890: ST_TO_ADDR
// for i in units do
57891: LD_ADDR_VAR 0 4
57895: PUSH
57896: LD_VAR 0 1
57900: PUSH
57901: FOR_IN
57902: IFFALSE 57952
// if GetTag ( i ) = tag then
57904: LD_VAR 0 4
57908: PPUSH
57909: CALL_OW 110
57913: PUSH
57914: LD_VAR 0 2
57918: EQUAL
57919: IFFALSE 57950
// result := Insert ( result , result + 1 , i ) ;
57921: LD_ADDR_VAR 0 3
57925: PUSH
57926: LD_VAR 0 3
57930: PPUSH
57931: LD_VAR 0 3
57935: PUSH
57936: LD_INT 1
57938: PLUS
57939: PPUSH
57940: LD_VAR 0 4
57944: PPUSH
57945: CALL_OW 2
57949: ST_TO_ADDR
57950: GO 57901
57952: POP
57953: POP
// end ;
57954: LD_VAR 0 3
57958: RET
// export function IsDriver ( un ) ; begin
57959: LD_INT 0
57961: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57962: LD_ADDR_VAR 0 2
57966: PUSH
57967: LD_VAR 0 1
57971: PUSH
57972: LD_INT 55
57974: PUSH
57975: EMPTY
57976: LIST
57977: PPUSH
57978: CALL_OW 69
57982: IN
57983: ST_TO_ADDR
// end ;
57984: LD_VAR 0 2
57988: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57989: LD_INT 0
57991: PPUSH
57992: PPUSH
// list := [ ] ;
57993: LD_ADDR_VAR 0 5
57997: PUSH
57998: EMPTY
57999: ST_TO_ADDR
// case d of 0 :
58000: LD_VAR 0 3
58004: PUSH
58005: LD_INT 0
58007: DOUBLE
58008: EQUAL
58009: IFTRUE 58013
58011: GO 58146
58013: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58014: LD_ADDR_VAR 0 5
58018: PUSH
58019: LD_VAR 0 1
58023: PUSH
58024: LD_INT 4
58026: MINUS
58027: PUSH
58028: LD_VAR 0 2
58032: PUSH
58033: LD_INT 4
58035: MINUS
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: PUSH
58045: LD_VAR 0 1
58049: PUSH
58050: LD_INT 3
58052: MINUS
58053: PUSH
58054: LD_VAR 0 2
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: LIST
58066: PUSH
58067: LD_VAR 0 1
58071: PUSH
58072: LD_INT 4
58074: PLUS
58075: PUSH
58076: LD_VAR 0 2
58080: PUSH
58081: LD_INT 4
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: PUSH
58089: LD_VAR 0 1
58093: PUSH
58094: LD_INT 3
58096: PLUS
58097: PUSH
58098: LD_VAR 0 2
58102: PUSH
58103: LD_INT 3
58105: PLUS
58106: PUSH
58107: LD_INT 5
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: LIST
58114: PUSH
58115: LD_VAR 0 1
58119: PUSH
58120: LD_VAR 0 2
58124: PUSH
58125: LD_INT 4
58127: PLUS
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: LIST
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: ST_TO_ADDR
// end ; 1 :
58144: GO 58844
58146: LD_INT 1
58148: DOUBLE
58149: EQUAL
58150: IFTRUE 58154
58152: GO 58287
58154: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58155: LD_ADDR_VAR 0 5
58159: PUSH
58160: LD_VAR 0 1
58164: PUSH
58165: LD_VAR 0 2
58169: PUSH
58170: LD_INT 4
58172: MINUS
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: LIST
58181: PUSH
58182: LD_VAR 0 1
58186: PUSH
58187: LD_INT 3
58189: MINUS
58190: PUSH
58191: LD_VAR 0 2
58195: PUSH
58196: LD_INT 3
58198: MINUS
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: PUSH
58208: LD_VAR 0 1
58212: PUSH
58213: LD_INT 4
58215: MINUS
58216: PUSH
58217: LD_VAR 0 2
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: PUSH
58230: LD_VAR 0 1
58234: PUSH
58235: LD_VAR 0 2
58239: PUSH
58240: LD_INT 3
58242: PLUS
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: LIST
58251: PUSH
58252: LD_VAR 0 1
58256: PUSH
58257: LD_INT 4
58259: PLUS
58260: PUSH
58261: LD_VAR 0 2
58265: PUSH
58266: LD_INT 4
58268: PLUS
58269: PUSH
58270: LD_INT 5
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: ST_TO_ADDR
// end ; 2 :
58285: GO 58844
58287: LD_INT 2
58289: DOUBLE
58290: EQUAL
58291: IFTRUE 58295
58293: GO 58424
58295: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58296: LD_ADDR_VAR 0 5
58300: PUSH
58301: LD_VAR 0 1
58305: PUSH
58306: LD_VAR 0 2
58310: PUSH
58311: LD_INT 3
58313: MINUS
58314: PUSH
58315: LD_INT 3
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: PUSH
58323: LD_VAR 0 1
58327: PUSH
58328: LD_INT 4
58330: PLUS
58331: PUSH
58332: LD_VAR 0 2
58336: PUSH
58337: LD_INT 4
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: LIST
58344: PUSH
58345: LD_VAR 0 1
58349: PUSH
58350: LD_VAR 0 2
58354: PUSH
58355: LD_INT 4
58357: PLUS
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: LIST
58366: PUSH
58367: LD_VAR 0 1
58371: PUSH
58372: LD_INT 3
58374: MINUS
58375: PUSH
58376: LD_VAR 0 2
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: LIST
58388: PUSH
58389: LD_VAR 0 1
58393: PUSH
58394: LD_INT 4
58396: MINUS
58397: PUSH
58398: LD_VAR 0 2
58402: PUSH
58403: LD_INT 4
58405: MINUS
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// end ; 3 :
58422: GO 58844
58424: LD_INT 3
58426: DOUBLE
58427: EQUAL
58428: IFTRUE 58432
58430: GO 58565
58432: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58433: LD_ADDR_VAR 0 5
58437: PUSH
58438: LD_VAR 0 1
58442: PUSH
58443: LD_INT 3
58445: PLUS
58446: PUSH
58447: LD_VAR 0 2
58451: PUSH
58452: LD_INT 4
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: LIST
58459: PUSH
58460: LD_VAR 0 1
58464: PUSH
58465: LD_INT 4
58467: PLUS
58468: PUSH
58469: LD_VAR 0 2
58473: PUSH
58474: LD_INT 4
58476: PLUS
58477: PUSH
58478: LD_INT 5
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: PUSH
58486: LD_VAR 0 1
58490: PUSH
58491: LD_INT 4
58493: MINUS
58494: PUSH
58495: LD_VAR 0 2
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: LIST
58507: PUSH
58508: LD_VAR 0 1
58512: PUSH
58513: LD_VAR 0 2
58517: PUSH
58518: LD_INT 4
58520: MINUS
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: LIST
58529: PUSH
58530: LD_VAR 0 1
58534: PUSH
58535: LD_INT 3
58537: MINUS
58538: PUSH
58539: LD_VAR 0 2
58543: PUSH
58544: LD_INT 3
58546: MINUS
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: ST_TO_ADDR
// end ; 4 :
58563: GO 58844
58565: LD_INT 4
58567: DOUBLE
58568: EQUAL
58569: IFTRUE 58573
58571: GO 58706
58573: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58574: LD_ADDR_VAR 0 5
58578: PUSH
58579: LD_VAR 0 1
58583: PUSH
58584: LD_VAR 0 2
58588: PUSH
58589: LD_INT 4
58591: PLUS
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: LIST
58600: PUSH
58601: LD_VAR 0 1
58605: PUSH
58606: LD_INT 3
58608: PLUS
58609: PUSH
58610: LD_VAR 0 2
58614: PUSH
58615: LD_INT 3
58617: PLUS
58618: PUSH
58619: LD_INT 5
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: LIST
58626: PUSH
58627: LD_VAR 0 1
58631: PUSH
58632: LD_INT 4
58634: PLUS
58635: PUSH
58636: LD_VAR 0 2
58640: PUSH
58641: LD_INT 4
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: PUSH
58649: LD_VAR 0 1
58653: PUSH
58654: LD_VAR 0 2
58658: PUSH
58659: LD_INT 3
58661: MINUS
58662: PUSH
58663: LD_INT 3
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: PUSH
58671: LD_VAR 0 1
58675: PUSH
58676: LD_INT 4
58678: MINUS
58679: PUSH
58680: LD_VAR 0 2
58684: PUSH
58685: LD_INT 4
58687: MINUS
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: ST_TO_ADDR
// end ; 5 :
58704: GO 58844
58706: LD_INT 5
58708: DOUBLE
58709: EQUAL
58710: IFTRUE 58714
58712: GO 58843
58714: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58715: LD_ADDR_VAR 0 5
58719: PUSH
58720: LD_VAR 0 1
58724: PUSH
58725: LD_INT 4
58727: MINUS
58728: PUSH
58729: LD_VAR 0 2
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: LIST
58741: PUSH
58742: LD_VAR 0 1
58746: PUSH
58747: LD_VAR 0 2
58751: PUSH
58752: LD_INT 4
58754: MINUS
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: LIST
58763: PUSH
58764: LD_VAR 0 1
58768: PUSH
58769: LD_INT 4
58771: PLUS
58772: PUSH
58773: LD_VAR 0 2
58777: PUSH
58778: LD_INT 4
58780: PLUS
58781: PUSH
58782: LD_INT 5
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: PUSH
58790: LD_VAR 0 1
58794: PUSH
58795: LD_INT 3
58797: PLUS
58798: PUSH
58799: LD_VAR 0 2
58803: PUSH
58804: LD_INT 4
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: LIST
58811: PUSH
58812: LD_VAR 0 1
58816: PUSH
58817: LD_VAR 0 2
58821: PUSH
58822: LD_INT 3
58824: PLUS
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: ST_TO_ADDR
// end ; end ;
58841: GO 58844
58843: POP
// result := list ;
58844: LD_ADDR_VAR 0 4
58848: PUSH
58849: LD_VAR 0 5
58853: ST_TO_ADDR
// end ;
58854: LD_VAR 0 4
58858: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58859: LD_INT 0
58861: PPUSH
58862: PPUSH
58863: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58864: LD_VAR 0 1
58868: NOT
58869: PUSH
58870: LD_VAR 0 2
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: LD_INT 4
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: IN
58893: NOT
58894: OR
58895: IFFALSE 58899
// exit ;
58897: GO 58991
// tmp := [ ] ;
58899: LD_ADDR_VAR 0 5
58903: PUSH
58904: EMPTY
58905: ST_TO_ADDR
// for i in units do
58906: LD_ADDR_VAR 0 4
58910: PUSH
58911: LD_VAR 0 1
58915: PUSH
58916: FOR_IN
58917: IFFALSE 58960
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58919: LD_ADDR_VAR 0 5
58923: PUSH
58924: LD_VAR 0 5
58928: PPUSH
58929: LD_VAR 0 5
58933: PUSH
58934: LD_INT 1
58936: PLUS
58937: PPUSH
58938: LD_VAR 0 4
58942: PPUSH
58943: LD_VAR 0 2
58947: PPUSH
58948: CALL_OW 259
58952: PPUSH
58953: CALL_OW 2
58957: ST_TO_ADDR
58958: GO 58916
58960: POP
58961: POP
// if not tmp then
58962: LD_VAR 0 5
58966: NOT
58967: IFFALSE 58971
// exit ;
58969: GO 58991
// result := SortListByListDesc ( units , tmp ) ;
58971: LD_ADDR_VAR 0 3
58975: PUSH
58976: LD_VAR 0 1
58980: PPUSH
58981: LD_VAR 0 5
58985: PPUSH
58986: CALL_OW 77
58990: ST_TO_ADDR
// end ;
58991: LD_VAR 0 3
58995: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58996: LD_INT 0
58998: PPUSH
58999: PPUSH
59000: PPUSH
// result := false ;
59001: LD_ADDR_VAR 0 3
59005: PUSH
59006: LD_INT 0
59008: ST_TO_ADDR
// x := GetX ( building ) ;
59009: LD_ADDR_VAR 0 4
59013: PUSH
59014: LD_VAR 0 2
59018: PPUSH
59019: CALL_OW 250
59023: ST_TO_ADDR
// y := GetY ( building ) ;
59024: LD_ADDR_VAR 0 5
59028: PUSH
59029: LD_VAR 0 2
59033: PPUSH
59034: CALL_OW 251
59038: ST_TO_ADDR
// if not building or not x or not y then
59039: LD_VAR 0 2
59043: NOT
59044: PUSH
59045: LD_VAR 0 4
59049: NOT
59050: OR
59051: PUSH
59052: LD_VAR 0 5
59056: NOT
59057: OR
59058: IFFALSE 59062
// exit ;
59060: GO 59154
// if GetTaskList ( unit ) then
59062: LD_VAR 0 1
59066: PPUSH
59067: CALL_OW 437
59071: IFFALSE 59154
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59073: LD_STRING e
59075: PUSH
59076: LD_VAR 0 1
59080: PPUSH
59081: CALL_OW 437
59085: PUSH
59086: LD_INT 1
59088: ARRAY
59089: PUSH
59090: LD_INT 1
59092: ARRAY
59093: EQUAL
59094: PUSH
59095: LD_VAR 0 4
59099: PUSH
59100: LD_VAR 0 1
59104: PPUSH
59105: CALL_OW 437
59109: PUSH
59110: LD_INT 1
59112: ARRAY
59113: PUSH
59114: LD_INT 2
59116: ARRAY
59117: EQUAL
59118: AND
59119: PUSH
59120: LD_VAR 0 5
59124: PUSH
59125: LD_VAR 0 1
59129: PPUSH
59130: CALL_OW 437
59134: PUSH
59135: LD_INT 1
59137: ARRAY
59138: PUSH
59139: LD_INT 3
59141: ARRAY
59142: EQUAL
59143: AND
59144: IFFALSE 59154
// result := true end ;
59146: LD_ADDR_VAR 0 3
59150: PUSH
59151: LD_INT 1
59153: ST_TO_ADDR
// end ;
59154: LD_VAR 0 3
59158: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59159: LD_INT 0
59161: PPUSH
// result := false ;
59162: LD_ADDR_VAR 0 4
59166: PUSH
59167: LD_INT 0
59169: ST_TO_ADDR
// if GetTaskList ( unit ) then
59170: LD_VAR 0 1
59174: PPUSH
59175: CALL_OW 437
59179: IFFALSE 59262
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59181: LD_STRING M
59183: PUSH
59184: LD_VAR 0 1
59188: PPUSH
59189: CALL_OW 437
59193: PUSH
59194: LD_INT 1
59196: ARRAY
59197: PUSH
59198: LD_INT 1
59200: ARRAY
59201: EQUAL
59202: PUSH
59203: LD_VAR 0 2
59207: PUSH
59208: LD_VAR 0 1
59212: PPUSH
59213: CALL_OW 437
59217: PUSH
59218: LD_INT 1
59220: ARRAY
59221: PUSH
59222: LD_INT 2
59224: ARRAY
59225: EQUAL
59226: AND
59227: PUSH
59228: LD_VAR 0 3
59232: PUSH
59233: LD_VAR 0 1
59237: PPUSH
59238: CALL_OW 437
59242: PUSH
59243: LD_INT 1
59245: ARRAY
59246: PUSH
59247: LD_INT 3
59249: ARRAY
59250: EQUAL
59251: AND
59252: IFFALSE 59262
// result := true ;
59254: LD_ADDR_VAR 0 4
59258: PUSH
59259: LD_INT 1
59261: ST_TO_ADDR
// end ; end ;
59262: LD_VAR 0 4
59266: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59267: LD_INT 0
59269: PPUSH
59270: PPUSH
59271: PPUSH
59272: PPUSH
// if not unit or not area then
59273: LD_VAR 0 1
59277: NOT
59278: PUSH
59279: LD_VAR 0 2
59283: NOT
59284: OR
59285: IFFALSE 59289
// exit ;
59287: GO 59453
// tmp := AreaToList ( area , i ) ;
59289: LD_ADDR_VAR 0 6
59293: PUSH
59294: LD_VAR 0 2
59298: PPUSH
59299: LD_VAR 0 5
59303: PPUSH
59304: CALL_OW 517
59308: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59309: LD_ADDR_VAR 0 5
59313: PUSH
59314: DOUBLE
59315: LD_INT 1
59317: DEC
59318: ST_TO_ADDR
59319: LD_VAR 0 6
59323: PUSH
59324: LD_INT 1
59326: ARRAY
59327: PUSH
59328: FOR_TO
59329: IFFALSE 59451
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59331: LD_ADDR_VAR 0 7
59335: PUSH
59336: LD_VAR 0 6
59340: PUSH
59341: LD_INT 1
59343: ARRAY
59344: PUSH
59345: LD_VAR 0 5
59349: ARRAY
59350: PUSH
59351: LD_VAR 0 6
59355: PUSH
59356: LD_INT 2
59358: ARRAY
59359: PUSH
59360: LD_VAR 0 5
59364: ARRAY
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59370: LD_VAR 0 7
59374: PUSH
59375: LD_INT 1
59377: ARRAY
59378: PPUSH
59379: LD_VAR 0 7
59383: PUSH
59384: LD_INT 2
59386: ARRAY
59387: PPUSH
59388: CALL_OW 428
59392: PUSH
59393: LD_INT 0
59395: EQUAL
59396: IFFALSE 59449
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59398: LD_VAR 0 1
59402: PPUSH
59403: LD_VAR 0 7
59407: PUSH
59408: LD_INT 1
59410: ARRAY
59411: PPUSH
59412: LD_VAR 0 7
59416: PUSH
59417: LD_INT 2
59419: ARRAY
59420: PPUSH
59421: LD_VAR 0 3
59425: PPUSH
59426: CALL_OW 48
// result := IsPlaced ( unit ) ;
59430: LD_ADDR_VAR 0 4
59434: PUSH
59435: LD_VAR 0 1
59439: PPUSH
59440: CALL_OW 305
59444: ST_TO_ADDR
// exit ;
59445: POP
59446: POP
59447: GO 59453
// end ; end ;
59449: GO 59328
59451: POP
59452: POP
// end ;
59453: LD_VAR 0 4
59457: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59458: LD_INT 0
59460: PPUSH
59461: PPUSH
59462: PPUSH
// if not side or side > 8 then
59463: LD_VAR 0 1
59467: NOT
59468: PUSH
59469: LD_VAR 0 1
59473: PUSH
59474: LD_INT 8
59476: GREATER
59477: OR
59478: IFFALSE 59482
// exit ;
59480: GO 59669
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59482: LD_ADDR_VAR 0 4
59486: PUSH
59487: LD_INT 22
59489: PUSH
59490: LD_VAR 0 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 21
59501: PUSH
59502: LD_INT 3
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PPUSH
59513: CALL_OW 69
59517: ST_TO_ADDR
// if not tmp then
59518: LD_VAR 0 4
59522: NOT
59523: IFFALSE 59527
// exit ;
59525: GO 59669
// enable_addtolog := true ;
59527: LD_ADDR_OWVAR 81
59531: PUSH
59532: LD_INT 1
59534: ST_TO_ADDR
// AddToLog ( [ ) ;
59535: LD_STRING [
59537: PPUSH
59538: CALL_OW 561
// for i in tmp do
59542: LD_ADDR_VAR 0 3
59546: PUSH
59547: LD_VAR 0 4
59551: PUSH
59552: FOR_IN
59553: IFFALSE 59660
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59555: LD_STRING [
59557: PUSH
59558: LD_VAR 0 3
59562: PPUSH
59563: CALL_OW 266
59567: STR
59568: PUSH
59569: LD_STRING , 
59571: STR
59572: PUSH
59573: LD_VAR 0 3
59577: PPUSH
59578: CALL_OW 250
59582: STR
59583: PUSH
59584: LD_STRING , 
59586: STR
59587: PUSH
59588: LD_VAR 0 3
59592: PPUSH
59593: CALL_OW 251
59597: STR
59598: PUSH
59599: LD_STRING , 
59601: STR
59602: PUSH
59603: LD_VAR 0 3
59607: PPUSH
59608: CALL_OW 254
59612: STR
59613: PUSH
59614: LD_STRING , 
59616: STR
59617: PUSH
59618: LD_VAR 0 3
59622: PPUSH
59623: LD_INT 1
59625: PPUSH
59626: CALL_OW 268
59630: STR
59631: PUSH
59632: LD_STRING , 
59634: STR
59635: PUSH
59636: LD_VAR 0 3
59640: PPUSH
59641: LD_INT 2
59643: PPUSH
59644: CALL_OW 268
59648: STR
59649: PUSH
59650: LD_STRING ],
59652: STR
59653: PPUSH
59654: CALL_OW 561
// end ;
59658: GO 59552
59660: POP
59661: POP
// AddToLog ( ]; ) ;
59662: LD_STRING ];
59664: PPUSH
59665: CALL_OW 561
// end ;
59669: LD_VAR 0 2
59673: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59674: LD_INT 0
59676: PPUSH
59677: PPUSH
59678: PPUSH
59679: PPUSH
59680: PPUSH
// if not area or not rate or not max then
59681: LD_VAR 0 1
59685: NOT
59686: PUSH
59687: LD_VAR 0 2
59691: NOT
59692: OR
59693: PUSH
59694: LD_VAR 0 4
59698: NOT
59699: OR
59700: IFFALSE 59704
// exit ;
59702: GO 59896
// while 1 do
59704: LD_INT 1
59706: IFFALSE 59896
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59708: LD_ADDR_VAR 0 9
59712: PUSH
59713: LD_VAR 0 1
59717: PPUSH
59718: LD_INT 1
59720: PPUSH
59721: CALL_OW 287
59725: PUSH
59726: LD_INT 10
59728: MUL
59729: ST_TO_ADDR
// r := rate / 10 ;
59730: LD_ADDR_VAR 0 7
59734: PUSH
59735: LD_VAR 0 2
59739: PUSH
59740: LD_INT 10
59742: DIVREAL
59743: ST_TO_ADDR
// time := 1 1$00 ;
59744: LD_ADDR_VAR 0 8
59748: PUSH
59749: LD_INT 2100
59751: ST_TO_ADDR
// if amount < min then
59752: LD_VAR 0 9
59756: PUSH
59757: LD_VAR 0 3
59761: LESS
59762: IFFALSE 59780
// r := r * 2 else
59764: LD_ADDR_VAR 0 7
59768: PUSH
59769: LD_VAR 0 7
59773: PUSH
59774: LD_INT 2
59776: MUL
59777: ST_TO_ADDR
59778: GO 59806
// if amount > max then
59780: LD_VAR 0 9
59784: PUSH
59785: LD_VAR 0 4
59789: GREATER
59790: IFFALSE 59806
// r := r / 2 ;
59792: LD_ADDR_VAR 0 7
59796: PUSH
59797: LD_VAR 0 7
59801: PUSH
59802: LD_INT 2
59804: DIVREAL
59805: ST_TO_ADDR
// time := time / r ;
59806: LD_ADDR_VAR 0 8
59810: PUSH
59811: LD_VAR 0 8
59815: PUSH
59816: LD_VAR 0 7
59820: DIVREAL
59821: ST_TO_ADDR
// if time < 0 then
59822: LD_VAR 0 8
59826: PUSH
59827: LD_INT 0
59829: LESS
59830: IFFALSE 59847
// time := time * - 1 ;
59832: LD_ADDR_VAR 0 8
59836: PUSH
59837: LD_VAR 0 8
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: MUL
59846: ST_TO_ADDR
// wait ( time ) ;
59847: LD_VAR 0 8
59851: PPUSH
59852: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59856: LD_INT 35
59858: PPUSH
59859: LD_INT 875
59861: PPUSH
59862: CALL_OW 12
59866: PPUSH
59867: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59871: LD_INT 1
59873: PPUSH
59874: LD_INT 5
59876: PPUSH
59877: CALL_OW 12
59881: PPUSH
59882: LD_VAR 0 1
59886: PPUSH
59887: LD_INT 1
59889: PPUSH
59890: CALL_OW 55
// end ;
59894: GO 59704
// end ;
59896: LD_VAR 0 5
59900: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59901: LD_INT 0
59903: PPUSH
59904: PPUSH
59905: PPUSH
59906: PPUSH
59907: PPUSH
59908: PPUSH
59909: PPUSH
59910: PPUSH
// if not turrets or not factories then
59911: LD_VAR 0 1
59915: NOT
59916: PUSH
59917: LD_VAR 0 2
59921: NOT
59922: OR
59923: IFFALSE 59927
// exit ;
59925: GO 60234
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59927: LD_ADDR_VAR 0 10
59931: PUSH
59932: LD_INT 5
59934: PUSH
59935: LD_INT 6
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 4
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: PUSH
59955: LD_INT 5
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 24
59969: PUSH
59970: LD_INT 25
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 23
59979: PUSH
59980: LD_INT 27
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 42
59993: PUSH
59994: LD_INT 43
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 44
60003: PUSH
60004: LD_INT 46
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 45
60013: PUSH
60014: LD_INT 47
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: LIST
60030: ST_TO_ADDR
// result := [ ] ;
60031: LD_ADDR_VAR 0 3
60035: PUSH
60036: EMPTY
60037: ST_TO_ADDR
// for i in turrets do
60038: LD_ADDR_VAR 0 4
60042: PUSH
60043: LD_VAR 0 1
60047: PUSH
60048: FOR_IN
60049: IFFALSE 60232
// begin nat := GetNation ( i ) ;
60051: LD_ADDR_VAR 0 7
60055: PUSH
60056: LD_VAR 0 4
60060: PPUSH
60061: CALL_OW 248
60065: ST_TO_ADDR
// weapon := 0 ;
60066: LD_ADDR_VAR 0 8
60070: PUSH
60071: LD_INT 0
60073: ST_TO_ADDR
// if not nat then
60074: LD_VAR 0 7
60078: NOT
60079: IFFALSE 60083
// continue ;
60081: GO 60048
// for j in list [ nat ] do
60083: LD_ADDR_VAR 0 5
60087: PUSH
60088: LD_VAR 0 10
60092: PUSH
60093: LD_VAR 0 7
60097: ARRAY
60098: PUSH
60099: FOR_IN
60100: IFFALSE 60141
// if GetBWeapon ( i ) = j [ 1 ] then
60102: LD_VAR 0 4
60106: PPUSH
60107: CALL_OW 269
60111: PUSH
60112: LD_VAR 0 5
60116: PUSH
60117: LD_INT 1
60119: ARRAY
60120: EQUAL
60121: IFFALSE 60139
// begin weapon := j [ 2 ] ;
60123: LD_ADDR_VAR 0 8
60127: PUSH
60128: LD_VAR 0 5
60132: PUSH
60133: LD_INT 2
60135: ARRAY
60136: ST_TO_ADDR
// break ;
60137: GO 60141
// end ;
60139: GO 60099
60141: POP
60142: POP
// if not weapon then
60143: LD_VAR 0 8
60147: NOT
60148: IFFALSE 60152
// continue ;
60150: GO 60048
// for k in factories do
60152: LD_ADDR_VAR 0 6
60156: PUSH
60157: LD_VAR 0 2
60161: PUSH
60162: FOR_IN
60163: IFFALSE 60228
// begin weapons := AvailableWeaponList ( k ) ;
60165: LD_ADDR_VAR 0 9
60169: PUSH
60170: LD_VAR 0 6
60174: PPUSH
60175: CALL_OW 478
60179: ST_TO_ADDR
// if not weapons then
60180: LD_VAR 0 9
60184: NOT
60185: IFFALSE 60189
// continue ;
60187: GO 60162
// if weapon in weapons then
60189: LD_VAR 0 8
60193: PUSH
60194: LD_VAR 0 9
60198: IN
60199: IFFALSE 60226
// begin result := [ i , weapon ] ;
60201: LD_ADDR_VAR 0 3
60205: PUSH
60206: LD_VAR 0 4
60210: PUSH
60211: LD_VAR 0 8
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: ST_TO_ADDR
// exit ;
60220: POP
60221: POP
60222: POP
60223: POP
60224: GO 60234
// end ; end ;
60226: GO 60162
60228: POP
60229: POP
// end ;
60230: GO 60048
60232: POP
60233: POP
// end ;
60234: LD_VAR 0 3
60238: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60239: LD_INT 0
60241: PPUSH
// if not side or side > 8 then
60242: LD_VAR 0 3
60246: NOT
60247: PUSH
60248: LD_VAR 0 3
60252: PUSH
60253: LD_INT 8
60255: GREATER
60256: OR
60257: IFFALSE 60261
// exit ;
60259: GO 60320
// if not range then
60261: LD_VAR 0 4
60265: NOT
60266: IFFALSE 60277
// range := - 12 ;
60268: LD_ADDR_VAR 0 4
60272: PUSH
60273: LD_INT 12
60275: NEG
60276: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60277: LD_VAR 0 1
60281: PPUSH
60282: LD_VAR 0 2
60286: PPUSH
60287: LD_VAR 0 3
60291: PPUSH
60292: LD_VAR 0 4
60296: PPUSH
60297: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60301: LD_VAR 0 1
60305: PPUSH
60306: LD_VAR 0 2
60310: PPUSH
60311: LD_VAR 0 3
60315: PPUSH
60316: CALL_OW 331
// end ;
60320: LD_VAR 0 5
60324: RET
// export function Video ( mode ) ; begin
60325: LD_INT 0
60327: PPUSH
// ingame_video = mode ;
60328: LD_ADDR_OWVAR 52
60332: PUSH
60333: LD_VAR 0 1
60337: ST_TO_ADDR
// interface_hidden = mode ;
60338: LD_ADDR_OWVAR 54
60342: PUSH
60343: LD_VAR 0 1
60347: ST_TO_ADDR
// end ;
60348: LD_VAR 0 2
60352: RET
// export function Join ( array , element ) ; begin
60353: LD_INT 0
60355: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60356: LD_ADDR_VAR 0 3
60360: PUSH
60361: LD_VAR 0 1
60365: PPUSH
60366: LD_VAR 0 1
60370: PUSH
60371: LD_INT 1
60373: PLUS
60374: PPUSH
60375: LD_VAR 0 2
60379: PPUSH
60380: CALL_OW 1
60384: ST_TO_ADDR
// end ;
60385: LD_VAR 0 3
60389: RET
// export function JoinUnion ( array , element ) ; begin
60390: LD_INT 0
60392: PPUSH
// result := array union element ;
60393: LD_ADDR_VAR 0 3
60397: PUSH
60398: LD_VAR 0 1
60402: PUSH
60403: LD_VAR 0 2
60407: UNION
60408: ST_TO_ADDR
// end ;
60409: LD_VAR 0 3
60413: RET
// export function GetBehemoths ( side ) ; begin
60414: LD_INT 0
60416: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60417: LD_ADDR_VAR 0 2
60421: PUSH
60422: LD_INT 22
60424: PUSH
60425: LD_VAR 0 1
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 31
60436: PUSH
60437: LD_INT 25
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PPUSH
60448: CALL_OW 69
60452: ST_TO_ADDR
// end ;
60453: LD_VAR 0 2
60457: RET
// export function Shuffle ( array ) ; var i , index ; begin
60458: LD_INT 0
60460: PPUSH
60461: PPUSH
60462: PPUSH
// result := [ ] ;
60463: LD_ADDR_VAR 0 2
60467: PUSH
60468: EMPTY
60469: ST_TO_ADDR
// if not array then
60470: LD_VAR 0 1
60474: NOT
60475: IFFALSE 60479
// exit ;
60477: GO 60578
// Randomize ;
60479: CALL_OW 10
// for i = array downto 1 do
60483: LD_ADDR_VAR 0 3
60487: PUSH
60488: DOUBLE
60489: LD_VAR 0 1
60493: INC
60494: ST_TO_ADDR
60495: LD_INT 1
60497: PUSH
60498: FOR_DOWNTO
60499: IFFALSE 60576
// begin index := rand ( 1 , array ) ;
60501: LD_ADDR_VAR 0 4
60505: PUSH
60506: LD_INT 1
60508: PPUSH
60509: LD_VAR 0 1
60513: PPUSH
60514: CALL_OW 12
60518: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60519: LD_ADDR_VAR 0 2
60523: PUSH
60524: LD_VAR 0 2
60528: PPUSH
60529: LD_VAR 0 2
60533: PUSH
60534: LD_INT 1
60536: PLUS
60537: PPUSH
60538: LD_VAR 0 1
60542: PUSH
60543: LD_VAR 0 4
60547: ARRAY
60548: PPUSH
60549: CALL_OW 2
60553: ST_TO_ADDR
// array := Delete ( array , index ) ;
60554: LD_ADDR_VAR 0 1
60558: PUSH
60559: LD_VAR 0 1
60563: PPUSH
60564: LD_VAR 0 4
60568: PPUSH
60569: CALL_OW 3
60573: ST_TO_ADDR
// end ;
60574: GO 60498
60576: POP
60577: POP
// end ;
60578: LD_VAR 0 2
60582: RET
// export function GetBaseMaterials ( base ) ; begin
60583: LD_INT 0
60585: PPUSH
// result := [ 0 , 0 , 0 ] ;
60586: LD_ADDR_VAR 0 2
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: LIST
60604: ST_TO_ADDR
// if not base then
60605: LD_VAR 0 1
60609: NOT
60610: IFFALSE 60614
// exit ;
60612: GO 60663
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60614: LD_ADDR_VAR 0 2
60618: PUSH
60619: LD_VAR 0 1
60623: PPUSH
60624: LD_INT 1
60626: PPUSH
60627: CALL_OW 275
60631: PUSH
60632: LD_VAR 0 1
60636: PPUSH
60637: LD_INT 2
60639: PPUSH
60640: CALL_OW 275
60644: PUSH
60645: LD_VAR 0 1
60649: PPUSH
60650: LD_INT 3
60652: PPUSH
60653: CALL_OW 275
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: ST_TO_ADDR
// end ;
60663: LD_VAR 0 2
60667: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60668: LD_INT 0
60670: PPUSH
60671: PPUSH
// result := array ;
60672: LD_ADDR_VAR 0 3
60676: PUSH
60677: LD_VAR 0 1
60681: ST_TO_ADDR
// if size > 0 then
60682: LD_VAR 0 2
60686: PUSH
60687: LD_INT 0
60689: GREATER
60690: IFFALSE 60736
// for i := array downto size do
60692: LD_ADDR_VAR 0 4
60696: PUSH
60697: DOUBLE
60698: LD_VAR 0 1
60702: INC
60703: ST_TO_ADDR
60704: LD_VAR 0 2
60708: PUSH
60709: FOR_DOWNTO
60710: IFFALSE 60734
// result := Delete ( result , result ) ;
60712: LD_ADDR_VAR 0 3
60716: PUSH
60717: LD_VAR 0 3
60721: PPUSH
60722: LD_VAR 0 3
60726: PPUSH
60727: CALL_OW 3
60731: ST_TO_ADDR
60732: GO 60709
60734: POP
60735: POP
// end ;
60736: LD_VAR 0 3
60740: RET
// export function ComExit ( unit ) ; var tmp ; begin
60741: LD_INT 0
60743: PPUSH
60744: PPUSH
// if not IsInUnit ( unit ) then
60745: LD_VAR 0 1
60749: PPUSH
60750: CALL_OW 310
60754: NOT
60755: IFFALSE 60759
// exit ;
60757: GO 60819
// tmp := IsInUnit ( unit ) ;
60759: LD_ADDR_VAR 0 3
60763: PUSH
60764: LD_VAR 0 1
60768: PPUSH
60769: CALL_OW 310
60773: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60774: LD_VAR 0 3
60778: PPUSH
60779: CALL_OW 247
60783: PUSH
60784: LD_INT 2
60786: EQUAL
60787: IFFALSE 60800
// ComExitVehicle ( unit ) else
60789: LD_VAR 0 1
60793: PPUSH
60794: CALL_OW 121
60798: GO 60809
// ComExitBuilding ( unit ) ;
60800: LD_VAR 0 1
60804: PPUSH
60805: CALL_OW 122
// result := tmp ;
60809: LD_ADDR_VAR 0 2
60813: PUSH
60814: LD_VAR 0 3
60818: ST_TO_ADDR
// end ;
60819: LD_VAR 0 2
60823: RET
// export function ComExitAll ( units ) ; var i ; begin
60824: LD_INT 0
60826: PPUSH
60827: PPUSH
// if not units then
60828: LD_VAR 0 1
60832: NOT
60833: IFFALSE 60837
// exit ;
60835: GO 60863
// for i in units do
60837: LD_ADDR_VAR 0 3
60841: PUSH
60842: LD_VAR 0 1
60846: PUSH
60847: FOR_IN
60848: IFFALSE 60861
// ComExit ( i ) ;
60850: LD_VAR 0 3
60854: PPUSH
60855: CALL 60741 0 1
60859: GO 60847
60861: POP
60862: POP
// end ;
60863: LD_VAR 0 2
60867: RET
// export function ResetHc ; begin
60868: LD_INT 0
60870: PPUSH
// InitHc ;
60871: CALL_OW 19
// hc_importance := 0 ;
60875: LD_ADDR_OWVAR 32
60879: PUSH
60880: LD_INT 0
60882: ST_TO_ADDR
// end ;
60883: LD_VAR 0 1
60887: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60888: LD_INT 0
60890: PPUSH
60891: PPUSH
60892: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60893: LD_ADDR_VAR 0 6
60897: PUSH
60898: LD_VAR 0 1
60902: PUSH
60903: LD_VAR 0 3
60907: PLUS
60908: PUSH
60909: LD_INT 2
60911: DIV
60912: ST_TO_ADDR
// if _x < 0 then
60913: LD_VAR 0 6
60917: PUSH
60918: LD_INT 0
60920: LESS
60921: IFFALSE 60938
// _x := _x * - 1 ;
60923: LD_ADDR_VAR 0 6
60927: PUSH
60928: LD_VAR 0 6
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: MUL
60937: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60938: LD_ADDR_VAR 0 7
60942: PUSH
60943: LD_VAR 0 2
60947: PUSH
60948: LD_VAR 0 4
60952: PLUS
60953: PUSH
60954: LD_INT 2
60956: DIV
60957: ST_TO_ADDR
// if _y < 0 then
60958: LD_VAR 0 7
60962: PUSH
60963: LD_INT 0
60965: LESS
60966: IFFALSE 60983
// _y := _y * - 1 ;
60968: LD_ADDR_VAR 0 7
60972: PUSH
60973: LD_VAR 0 7
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: MUL
60982: ST_TO_ADDR
// result := [ _x , _y ] ;
60983: LD_ADDR_VAR 0 5
60987: PUSH
60988: LD_VAR 0 6
60992: PUSH
60993: LD_VAR 0 7
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: ST_TO_ADDR
// end ;
61002: LD_VAR 0 5
61006: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61007: LD_INT 0
61009: PPUSH
61010: PPUSH
61011: PPUSH
61012: PPUSH
// task := GetTaskList ( unit ) ;
61013: LD_ADDR_VAR 0 7
61017: PUSH
61018: LD_VAR 0 1
61022: PPUSH
61023: CALL_OW 437
61027: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61028: LD_VAR 0 7
61032: NOT
61033: PUSH
61034: LD_VAR 0 1
61038: PPUSH
61039: LD_VAR 0 2
61043: PPUSH
61044: CALL_OW 308
61048: NOT
61049: AND
61050: IFFALSE 61054
// exit ;
61052: GO 61172
// if IsInArea ( unit , area ) then
61054: LD_VAR 0 1
61058: PPUSH
61059: LD_VAR 0 2
61063: PPUSH
61064: CALL_OW 308
61068: IFFALSE 61086
// begin ComMoveToArea ( unit , goAway ) ;
61070: LD_VAR 0 1
61074: PPUSH
61075: LD_VAR 0 3
61079: PPUSH
61080: CALL_OW 113
// exit ;
61084: GO 61172
// end ; if task [ 1 ] [ 1 ] <> M then
61086: LD_VAR 0 7
61090: PUSH
61091: LD_INT 1
61093: ARRAY
61094: PUSH
61095: LD_INT 1
61097: ARRAY
61098: PUSH
61099: LD_STRING M
61101: NONEQUAL
61102: IFFALSE 61106
// exit ;
61104: GO 61172
// x := task [ 1 ] [ 2 ] ;
61106: LD_ADDR_VAR 0 5
61110: PUSH
61111: LD_VAR 0 7
61115: PUSH
61116: LD_INT 1
61118: ARRAY
61119: PUSH
61120: LD_INT 2
61122: ARRAY
61123: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61124: LD_ADDR_VAR 0 6
61128: PUSH
61129: LD_VAR 0 7
61133: PUSH
61134: LD_INT 1
61136: ARRAY
61137: PUSH
61138: LD_INT 3
61140: ARRAY
61141: ST_TO_ADDR
// if InArea ( x , y , area ) then
61142: LD_VAR 0 5
61146: PPUSH
61147: LD_VAR 0 6
61151: PPUSH
61152: LD_VAR 0 2
61156: PPUSH
61157: CALL_OW 309
61161: IFFALSE 61172
// ComStop ( unit ) ;
61163: LD_VAR 0 1
61167: PPUSH
61168: CALL_OW 141
// end ;
61172: LD_VAR 0 4
61176: RET
// export function Abs ( value ) ; begin
61177: LD_INT 0
61179: PPUSH
// result := value ;
61180: LD_ADDR_VAR 0 2
61184: PUSH
61185: LD_VAR 0 1
61189: ST_TO_ADDR
// if value < 0 then
61190: LD_VAR 0 1
61194: PUSH
61195: LD_INT 0
61197: LESS
61198: IFFALSE 61215
// result := value * - 1 ;
61200: LD_ADDR_VAR 0 2
61204: PUSH
61205: LD_VAR 0 1
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: MUL
61214: ST_TO_ADDR
// end ;
61215: LD_VAR 0 2
61219: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61220: LD_INT 0
61222: PPUSH
61223: PPUSH
61224: PPUSH
61225: PPUSH
61226: PPUSH
61227: PPUSH
61228: PPUSH
61229: PPUSH
// if not unit or not building then
61230: LD_VAR 0 1
61234: NOT
61235: PUSH
61236: LD_VAR 0 2
61240: NOT
61241: OR
61242: IFFALSE 61246
// exit ;
61244: GO 61472
// x := GetX ( building ) ;
61246: LD_ADDR_VAR 0 4
61250: PUSH
61251: LD_VAR 0 2
61255: PPUSH
61256: CALL_OW 250
61260: ST_TO_ADDR
// y := GetY ( building ) ;
61261: LD_ADDR_VAR 0 6
61265: PUSH
61266: LD_VAR 0 2
61270: PPUSH
61271: CALL_OW 251
61275: ST_TO_ADDR
// d := GetDir ( building ) ;
61276: LD_ADDR_VAR 0 8
61280: PUSH
61281: LD_VAR 0 2
61285: PPUSH
61286: CALL_OW 254
61290: ST_TO_ADDR
// r := 4 ;
61291: LD_ADDR_VAR 0 9
61295: PUSH
61296: LD_INT 4
61298: ST_TO_ADDR
// for i := 1 to 5 do
61299: LD_ADDR_VAR 0 10
61303: PUSH
61304: DOUBLE
61305: LD_INT 1
61307: DEC
61308: ST_TO_ADDR
61309: LD_INT 5
61311: PUSH
61312: FOR_TO
61313: IFFALSE 61470
// begin _x := ShiftX ( x , d , r + i ) ;
61315: LD_ADDR_VAR 0 5
61319: PUSH
61320: LD_VAR 0 4
61324: PPUSH
61325: LD_VAR 0 8
61329: PPUSH
61330: LD_VAR 0 9
61334: PUSH
61335: LD_VAR 0 10
61339: PLUS
61340: PPUSH
61341: CALL_OW 272
61345: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61346: LD_ADDR_VAR 0 7
61350: PUSH
61351: LD_VAR 0 6
61355: PPUSH
61356: LD_VAR 0 8
61360: PPUSH
61361: LD_VAR 0 9
61365: PUSH
61366: LD_VAR 0 10
61370: PLUS
61371: PPUSH
61372: CALL_OW 273
61376: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61377: LD_VAR 0 5
61381: PPUSH
61382: LD_VAR 0 7
61386: PPUSH
61387: CALL_OW 488
61391: PUSH
61392: LD_VAR 0 5
61396: PPUSH
61397: LD_VAR 0 7
61401: PPUSH
61402: CALL_OW 428
61406: PPUSH
61407: CALL_OW 247
61411: PUSH
61412: LD_INT 3
61414: PUSH
61415: LD_INT 2
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: IN
61422: NOT
61423: AND
61424: IFFALSE 61468
// begin ComMoveXY ( unit , _x , _y ) ;
61426: LD_VAR 0 1
61430: PPUSH
61431: LD_VAR 0 5
61435: PPUSH
61436: LD_VAR 0 7
61440: PPUSH
61441: CALL_OW 111
// result := [ _x , _y ] ;
61445: LD_ADDR_VAR 0 3
61449: PUSH
61450: LD_VAR 0 5
61454: PUSH
61455: LD_VAR 0 7
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: ST_TO_ADDR
// exit ;
61464: POP
61465: POP
61466: GO 61472
// end ; end ;
61468: GO 61312
61470: POP
61471: POP
// end ;
61472: LD_VAR 0 3
61476: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61477: LD_INT 0
61479: PPUSH
61480: PPUSH
61481: PPUSH
// result := 0 ;
61482: LD_ADDR_VAR 0 3
61486: PUSH
61487: LD_INT 0
61489: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61490: LD_VAR 0 1
61494: PUSH
61495: LD_INT 0
61497: LESS
61498: PUSH
61499: LD_VAR 0 1
61503: PUSH
61504: LD_INT 8
61506: GREATER
61507: OR
61508: PUSH
61509: LD_VAR 0 2
61513: PUSH
61514: LD_INT 0
61516: LESS
61517: OR
61518: PUSH
61519: LD_VAR 0 2
61523: PUSH
61524: LD_INT 8
61526: GREATER
61527: OR
61528: IFFALSE 61532
// exit ;
61530: GO 61607
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61532: LD_ADDR_VAR 0 4
61536: PUSH
61537: LD_INT 22
61539: PUSH
61540: LD_VAR 0 2
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PPUSH
61549: CALL_OW 69
61553: PUSH
61554: FOR_IN
61555: IFFALSE 61605
// begin un := UnitShoot ( i ) ;
61557: LD_ADDR_VAR 0 5
61561: PUSH
61562: LD_VAR 0 4
61566: PPUSH
61567: CALL_OW 504
61571: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61572: LD_VAR 0 5
61576: PPUSH
61577: CALL_OW 255
61581: PUSH
61582: LD_VAR 0 1
61586: EQUAL
61587: IFFALSE 61603
// begin result := un ;
61589: LD_ADDR_VAR 0 3
61593: PUSH
61594: LD_VAR 0 5
61598: ST_TO_ADDR
// exit ;
61599: POP
61600: POP
61601: GO 61607
// end ; end ;
61603: GO 61554
61605: POP
61606: POP
// end ;
61607: LD_VAR 0 3
61611: RET
// export function GetCargoBay ( units ) ; begin
61612: LD_INT 0
61614: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61615: LD_ADDR_VAR 0 2
61619: PUSH
61620: LD_VAR 0 1
61624: PPUSH
61625: LD_INT 2
61627: PUSH
61628: LD_INT 34
61630: PUSH
61631: LD_INT 12
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 34
61640: PUSH
61641: LD_INT 51
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 34
61650: PUSH
61651: LD_INT 32
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 34
61660: PUSH
61661: LD_EXP 15
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: PPUSH
61677: CALL_OW 72
61681: ST_TO_ADDR
// end ; end_of_file
61682: LD_VAR 0 2
61686: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61687: LD_VAR 0 1
61691: PUSH
61692: LD_INT 200
61694: DOUBLE
61695: GREATEREQUAL
61696: IFFALSE 61704
61698: LD_INT 299
61700: DOUBLE
61701: LESSEQUAL
61702: IFTRUE 61706
61704: GO 61738
61706: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61707: LD_VAR 0 1
61711: PPUSH
61712: LD_VAR 0 2
61716: PPUSH
61717: LD_VAR 0 3
61721: PPUSH
61722: LD_VAR 0 4
61726: PPUSH
61727: LD_VAR 0 5
61731: PPUSH
61732: CALL 20148 0 5
61736: GO 61815
61738: LD_INT 300
61740: DOUBLE
61741: GREATEREQUAL
61742: IFFALSE 61750
61744: LD_INT 399
61746: DOUBLE
61747: LESSEQUAL
61748: IFTRUE 61752
61750: GO 61814
61752: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61753: LD_VAR 0 1
61757: PPUSH
61758: LD_VAR 0 2
61762: PPUSH
61763: LD_VAR 0 3
61767: PPUSH
61768: LD_VAR 0 4
61772: PPUSH
61773: LD_VAR 0 5
61777: PPUSH
61778: LD_VAR 0 6
61782: PPUSH
61783: LD_VAR 0 7
61787: PPUSH
61788: LD_VAR 0 8
61792: PPUSH
61793: LD_VAR 0 9
61797: PPUSH
61798: LD_VAR 0 10
61802: PPUSH
61803: LD_VAR 0 11
61807: PPUSH
61808: CALL 18036 0 11
61812: GO 61815
61814: POP
// end ;
61815: PPOPN 11
61817: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61818: LD_VAR 0 1
61822: PPUSH
61823: LD_VAR 0 2
61827: PPUSH
61828: LD_VAR 0 3
61832: PPUSH
61833: LD_VAR 0 4
61837: PPUSH
61838: LD_VAR 0 5
61842: PPUSH
61843: CALL 20130 0 5
// end ; end_of_file
61847: PPOPN 5
61849: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61850: LD_VAR 0 1
61854: PPUSH
61855: LD_VAR 0 2
61859: PPUSH
61860: LD_VAR 0 3
61864: PPUSH
61865: LD_VAR 0 4
61869: PPUSH
61870: LD_VAR 0 5
61874: PPUSH
61875: LD_VAR 0 6
61879: PPUSH
61880: CALL 6844 0 6
// end ;
61884: PPOPN 6
61886: END
