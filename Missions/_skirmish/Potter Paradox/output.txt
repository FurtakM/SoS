// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 25 0 0
// InitGlobalVariables ;
   8: CALL 7061 0 0
// PrepareLegion ;
  12: CALL 234 0 0
// PrepareAllies ;
  16: CALL 2225 0 0
// Action ;
  20: CALL 4051 0 0
// end ;
  24: END
// function InitGame ; begin
  25: LD_INT 0
  27: PPUSH
// RandomizeAll ;
  28: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  32: LD_ADDR_OWVAR 67
  36: PUSH
  37: LD_INT 0
  39: PPUSH
  40: CALL_OW 426
  44: ST_TO_ADDR
// if not Difficulty then
  45: LD_OWVAR 67
  49: NOT
  50: IFFALSE 60
// Difficulty := 2 ;
  52: LD_ADDR_OWVAR 67
  56: PUSH
  57: LD_INT 2
  59: ST_TO_ADDR
// InitVariables ;
  60: CALL 73 0 0
// SetDiplomacy ;
  64: CALL 186 0 0
// end ; end_of_file
  68: LD_VAR 0 1
  72: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  73: LD_INT 0
  75: PPUSH
// points := 0 ;
  76: LD_ADDR_EXP 10
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// alert := false ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// game_over := false ;
  92: LD_ADDR_EXP 7
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// wave_time := 0 0$00 ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// bonus_active := false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// ignore_wave := false ;
 116: LD_ADDR_EXP 15
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// player_res_art := false ;
 124: LD_ADDR_EXP 8
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// player_artifact_ready := false ;
 132: LD_ADDR_EXP 16
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 140: LD_ADDR_EXP 9
 144: PUSH
 145: LD_INT 52500
 147: PUSH
 148: LD_INT 67200
 150: PUSH
 151: LD_INT 84000
 153: PUSH
 154: EMPTY
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// bonus_num := 0 ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// artifact_progress := 0 ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// export function SetDiplomacy ; begin
 186: LD_INT 0
 188: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 189: LD_INT 92
 191: PPUSH
 192: LD_INT 48
 194: PPUSH
 195: LD_INT 8
 197: PPUSH
 198: LD_INT 32796
 200: NEG
 201: PPUSH
 202: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 206: LD_INT 92
 208: PPUSH
 209: LD_INT 48
 211: PPUSH
 212: LD_INT 8
 214: PPUSH
 215: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 219: LD_INT 5
 221: PPUSH
 222: LD_INT 8
 224: PPUSH
 225: CALL_OW 343
// end ; end_of_file
 229: LD_VAR 0 1
 233: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 234: LD_INT 0
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
 253: PPUSH
// uc_side := 2 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 2
 261: ST_TO_ADDR
// uc_nation := nation_arabian ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 2
 269: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 270: LD_INT 1
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 6
 278: PPUSH
 279: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 283: LD_ADDR_OWVAR 26
 287: PUSH
 288: LD_STRING Nicolas Vervecken
 290: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 291: LD_ADDR_OWVAR 33
 295: PUSH
 296: LD_STRING SecondCharsGal
 298: ST_TO_ADDR
// hc_face_number := 3 ;
 299: LD_ADDR_OWVAR 34
 303: PUSH
 304: LD_INT 3
 306: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 307: LD_ADDR_OWVAR 29
 311: PUSH
 312: LD_INT 11
 314: PUSH
 315: LD_INT 10
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Vervecken := CreateHuman ;
 322: LD_ADDR_EXP 12
 326: PUSH
 327: CALL_OW 44
 331: ST_TO_ADDR
// InitHc ;
 332: CALL_OW 19
// uc_side := 8 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 8
 343: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 1
 354: PPUSH
 355: LD_INT 4000
 357: PUSH
 358: LD_INT 2500
 360: PUSH
 361: LD_INT 1250
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 379: LD_INT 23
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: LD_INT 300
 392: PPUSH
 393: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 274
 404: PPUSH
 405: LD_INT 3
 407: PPUSH
 408: LD_INT 100
 410: PUSH
 411: LD_INT 50
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: PPUSH
 428: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 432: LD_ADDR_VAR 0 14
 436: PUSH
 437: LD_INT 23
 439: PPUSH
 440: CALL_OW 250
 444: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 445: LD_ADDR_VAR 0 15
 449: PUSH
 450: LD_INT 23
 452: PPUSH
 453: CALL_OW 251
 457: ST_TO_ADDR
// team := [ ] ;
 458: LD_ADDR_VAR 0 7
 462: PUSH
 463: EMPTY
 464: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 465: LD_ADDR_VAR 0 8
 469: PUSH
 470: LD_INT 9
 472: PUSH
 473: LD_INT 8
 475: PUSH
 476: LD_INT 7
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 490: LD_ADDR_VAR 0 9
 494: PUSH
 495: LD_INT 11
 497: PUSH
 498: LD_INT 9
 500: PUSH
 501: LD_INT 8
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 515: LD_ADDR_VAR 0 10
 519: PUSH
 520: LD_INT 3
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_OWVAR 67
 538: ARRAY
 539: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 540: LD_ADDR_VAR 0 11
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: LD_INT 3
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_OWVAR 67
 563: ARRAY
 564: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 565: LD_ADDR_VAR 0 12
 569: PUSH
 570: LD_INT 3
 572: PUSH
 573: LD_INT 2
 575: PUSH
 576: LD_INT 2
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: PUSH
 584: LD_OWVAR 67
 588: ARRAY
 589: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 590: LD_ADDR_VAR 0 13
 594: PUSH
 595: LD_INT 6
 597: PUSH
 598: LD_INT 5
 600: PUSH
 601: LD_INT 4
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: LD_OWVAR 67
 613: ARRAY
 614: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 615: LD_ADDR_VAR 0 18
 619: PUSH
 620: LD_INT 13
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: LD_INT 26
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 14
 640: PUSH
 641: LD_INT 3
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: LD_INT 25
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 14
 658: PUSH
 659: LD_INT 3
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 32
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 14
 676: PUSH
 677: LD_INT 3
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: LD_INT 31
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 14
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 24
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 14
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 25
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 13
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 24
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 755: LD_ADDR_VAR 0 2
 759: PUSH
 760: DOUBLE
 761: LD_INT 1
 763: DEC
 764: ST_TO_ADDR
 765: LD_VAR 0 18
 769: PUSH
 770: LD_OWVAR 67
 774: MINUS
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: PUSH
 780: FOR_TO
 781: IFFALSE 910
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 783: LD_ADDR_OWVAR 37
 787: PUSH
 788: LD_VAR 0 18
 792: PUSH
 793: LD_VAR 0 2
 797: ARRAY
 798: PUSH
 799: LD_INT 1
 801: ARRAY
 802: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 803: LD_ADDR_OWVAR 39
 807: PUSH
 808: LD_VAR 0 18
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PUSH
 819: LD_INT 2
 821: ARRAY
 822: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 823: LD_ADDR_OWVAR 38
 827: PUSH
 828: LD_VAR 0 18
 832: PUSH
 833: LD_VAR 0 2
 837: ARRAY
 838: PUSH
 839: LD_INT 3
 841: ARRAY
 842: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 843: LD_ADDR_OWVAR 40
 847: PUSH
 848: LD_VAR 0 18
 852: PUSH
 853: LD_VAR 0 2
 857: ARRAY
 858: PUSH
 859: LD_INT 4
 861: ARRAY
 862: ST_TO_ADDR
// un := CreateVehicle ;
 863: LD_ADDR_VAR 0 6
 867: PUSH
 868: CALL_OW 45
 872: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 873: LD_VAR 0 6
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 5
 883: PPUSH
 884: CALL_OW 12
 888: PPUSH
 889: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 893: LD_VAR 0 6
 897: PPUSH
 898: LD_INT 7
 900: PPUSH
 901: LD_INT 0
 903: PPUSH
 904: CALL_OW 49
// end ;
 908: GO 780
 910: POP
 911: POP
// for i = 1 to ape_num do
 912: LD_ADDR_VAR 0 2
 916: PUSH
 917: DOUBLE
 918: LD_INT 1
 920: DEC
 921: ST_TO_ADDR
 922: LD_VAR 0 13
 926: PUSH
 927: FOR_TO
 928: IFFALSE 995
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 930: LD_INT 0
 932: PPUSH
 933: LD_INT 16
 935: PUSH
 936: LD_INT 15
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 1
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: CALL_OW 12
 953: ARRAY
 954: PPUSH
 955: LD_VAR 0 8
 959: PPUSH
 960: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 964: LD_ADDR_VAR 0 7
 968: PUSH
 969: LD_VAR 0 7
 973: PPUSH
 974: LD_VAR 0 7
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: PPUSH
 983: CALL_OW 44
 987: PPUSH
 988: CALL_OW 2
 992: ST_TO_ADDR
// end ;
 993: GO 927
 995: POP
 996: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 997: LD_INT 1
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_VAR 0 8
1007: PPUSH
1008: CALL_OW 380
// l1 := CreateHuman ;
1012: LD_ADDR_EXP 2
1016: PUSH
1017: CALL_OW 44
1021: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1022: LD_EXP 2
1026: PPUSH
1027: LD_INT 23
1029: PPUSH
1030: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 8
1044: PPUSH
1045: CALL_OW 380
// l2 := CreateHuman ;
1049: LD_ADDR_EXP 3
1053: PUSH
1054: CALL_OW 44
1058: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_INT 23
1066: PPUSH
1067: CALL_OW 52
// for class = 1 to 4 do
1071: LD_ADDR_VAR 0 4
1075: PUSH
1076: DOUBLE
1077: LD_INT 1
1079: DEC
1080: ST_TO_ADDR
1081: LD_INT 4
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1184
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1087: LD_ADDR_VAR 0 2
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_VAR 0 9
1101: PUSH
1102: LD_VAR 0 10
1106: PUSH
1107: LD_VAR 0 11
1111: PUSH
1112: LD_VAR 0 12
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_VAR 0 4
1127: ARRAY
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1180
// begin PrepareHuman ( false , class , skill ) ;
1132: LD_INT 0
1134: PPUSH
1135: LD_VAR 0 4
1139: PPUSH
1140: LD_VAR 0 8
1144: PPUSH
1145: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1149: LD_ADDR_VAR 0 7
1153: PUSH
1154: LD_VAR 0 7
1158: PPUSH
1159: LD_VAR 0 7
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: PPUSH
1168: CALL_OW 44
1172: PPUSH
1173: CALL_OW 2
1177: ST_TO_ADDR
// end ;
1178: GO 1129
1180: POP
1181: POP
1182: GO 1084
1184: POP
1185: POP
// for i in team do
1186: LD_ADDR_VAR 0 2
1190: PUSH
1191: LD_VAR 0 7
1195: PUSH
1196: FOR_IN
1197: IFFALSE 1673
// begin b := 0 ;
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 0
1206: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1207: LD_VAR 0 2
1211: PPUSH
1212: CALL_OW 257
1216: PUSH
1217: LD_INT 1
1219: DOUBLE
1220: EQUAL
1221: IFTRUE 1225
1223: GO 1332
1225: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1226: LD_ADDR_VAR 0 5
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_OWVAR 20
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 30
1248: PUSH
1249: LD_INT 32
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PUSH
1256: LD_INT 30
1258: PUSH
1259: LD_INT 31
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// if not b then
1287: LD_VAR 0 5
1291: NOT
1292: IFFALSE 1330
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 22
1301: PUSH
1302: LD_OWVAR 20
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 30
1313: PUSH
1314: LD_INT 5
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PPUSH
1325: CALL_OW 69
1329: ST_TO_ADDR
// end ; class_engineer :
1330: GO 1571
1332: LD_INT 2
1334: DOUBLE
1335: EQUAL
1336: IFTRUE 1340
1338: GO 1379
1340: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1341: LD_ADDR_VAR 0 5
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_OWVAR 20
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 30
1360: PUSH
1361: LD_INT 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 69
1376: ST_TO_ADDR
1377: GO 1571
1379: LD_INT 3
1381: DOUBLE
1382: EQUAL
1383: IFTRUE 1387
1385: GO 1476
1387: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 5
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_OWVAR 20
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 21
1407: PUSH
1408: LD_INT 2
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: PUSH
1415: LD_INT 58
1417: PUSH
1418: EMPTY
1419: LIST
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: PPUSH
1426: CALL_OW 69
1430: ST_TO_ADDR
// if not b then
1431: LD_VAR 0 5
1435: NOT
1436: IFFALSE 1474
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1438: LD_ADDR_VAR 0 5
1442: PUSH
1443: LD_INT 22
1445: PUSH
1446: LD_OWVAR 20
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 30
1457: PUSH
1458: LD_INT 3
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PPUSH
1469: CALL_OW 69
1473: ST_TO_ADDR
// end ; class_scientistic :
1474: GO 1571
1476: LD_INT 4
1478: DOUBLE
1479: EQUAL
1480: IFTRUE 1484
1482: GO 1523
1484: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1485: LD_ADDR_VAR 0 5
1489: PUSH
1490: LD_INT 22
1492: PUSH
1493: LD_OWVAR 20
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 30
1504: PUSH
1505: LD_INT 8
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 69
1520: ST_TO_ADDR
// end ; class_apeman_soldier :
1521: GO 1571
1523: LD_INT 15
1525: DOUBLE
1526: EQUAL
1527: IFTRUE 1531
1529: GO 1570
1531: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: LD_INT 22
1539: PUSH
1540: LD_OWVAR 20
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 30
1551: PUSH
1552: LD_INT 5
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PPUSH
1563: CALL_OW 69
1567: ST_TO_ADDR
1568: GO 1571
1570: POP
// if b then
1571: LD_VAR 0 5
1575: IFFALSE 1646
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1577: LD_VAR 0 5
1581: PUSH
1582: LD_INT 1
1584: ARRAY
1585: PPUSH
1586: CALL_OW 266
1590: PUSH
1591: LD_INT 31
1593: EQUAL
1594: IFFALSE 1616
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1596: LD_VAR 0 2
1600: PPUSH
1601: LD_VAR 0 5
1605: PUSH
1606: LD_INT 1
1608: ARRAY
1609: PPUSH
1610: CALL 4814 0 2
1614: GO 1644
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1616: LD_VAR 0 2
1620: PPUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_INT 1
1628: PPUSH
1629: LD_VAR 0 5
1633: PPUSH
1634: CALL_OW 12
1638: ARRAY
1639: PPUSH
1640: CALL_OW 52
1644: GO 1671
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1646: LD_VAR 0 2
1650: PPUSH
1651: LD_VAR 0 14
1655: PPUSH
1656: LD_VAR 0 15
1660: PPUSH
1661: LD_INT 15
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL_OW 50
// end ;
1671: GO 1196
1673: POP
1674: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1675: LD_ADDR_VAR 0 16
1679: PUSH
1680: LD_INT 26
1682: PUSH
1683: LD_INT 3
1685: PUSH
1686: LD_INT 2
1688: PUSH
1689: LD_INT 1
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: PUSH
1697: LD_OWVAR 67
1701: ARRAY
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: LD_INT 3
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_OWVAR 67
1728: ARRAY
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 24
1736: PUSH
1737: LD_INT 5
1739: PUSH
1740: LD_INT 5
1742: PUSH
1743: LD_INT 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: LD_OWVAR 67
1755: ARRAY
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 30
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_OWVAR 67
1782: ARRAY
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1794: LD_ADDR_VAR 0 2
1798: PUSH
1799: LD_INT 22
1801: PUSH
1802: LD_OWVAR 20
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 30
1813: PUSH
1814: LD_INT 32
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: CALL_OW 69
1829: PUSH
1830: FOR_IN
1831: IFFALSE 2004
// begin if weapons then
1833: LD_VAR 0 16
1837: IFFALSE 1961
// begin k := rand ( 1 , weapons ) ;
1839: LD_ADDR_VAR 0 3
1843: PUSH
1844: LD_INT 1
1846: PPUSH
1847: LD_VAR 0 16
1851: PPUSH
1852: CALL_OW 12
1856: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1857: LD_ADDR_VAR 0 17
1861: PUSH
1862: LD_VAR 0 16
1866: PUSH
1867: LD_VAR 0 3
1871: ARRAY
1872: PUSH
1873: LD_INT 1
1875: ARRAY
1876: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1877: LD_ADDR_VAR 0 16
1881: PUSH
1882: LD_VAR 0 16
1886: PPUSH
1887: LD_VAR 0 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: LD_VAR 0 16
1899: PUSH
1900: LD_VAR 0 3
1904: ARRAY
1905: PUSH
1906: LD_INT 2
1908: ARRAY
1909: PUSH
1910: LD_INT 1
1912: MINUS
1913: PPUSH
1914: CALL 4906 0 4
1918: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1919: LD_VAR 0 16
1923: PUSH
1924: LD_VAR 0 3
1928: ARRAY
1929: PUSH
1930: LD_INT 2
1932: ARRAY
1933: PUSH
1934: LD_INT 0
1936: EQUAL
1937: IFFALSE 1959
// weapons := Delete ( weapons , k ) ;
1939: LD_ADDR_VAR 0 16
1943: PUSH
1944: LD_VAR 0 16
1948: PPUSH
1949: LD_VAR 0 3
1953: PPUSH
1954: CALL_OW 3
1958: ST_TO_ADDR
// end else
1959: GO 1988
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1961: LD_ADDR_VAR 0 17
1965: PUSH
1966: LD_INT 27
1968: PUSH
1969: LD_INT 23
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 12
1986: ARRAY
1987: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_VAR 0 17
1997: PPUSH
1998: CALL_OW 431
// end ;
2002: GO 1830
2004: POP
2005: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_VAR 0 8
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: CALL_OW 380
// hc_gallery := potter ;
2025: LD_ADDR_OWVAR 33
2029: PUSH
2030: LD_STRING potter
2032: ST_TO_ADDR
// hc_face_number := 1 ;
2033: LD_ADDR_OWVAR 34
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// hc_importance := 100 ;
2041: LD_ADDR_OWVAR 32
2045: PUSH
2046: LD_INT 100
2048: ST_TO_ADDR
// hc_name := Mike Gerste ;
2049: LD_ADDR_OWVAR 26
2053: PUSH
2054: LD_STRING Mike Gerste
2056: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2057: LD_ADDR_OWVAR 29
2061: PUSH
2062: LD_INT 10
2064: PUSH
2065: LD_INT 11
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: ST_TO_ADDR
// legion_commander := CreateHuman ;
2072: LD_ADDR_EXP 1
2076: PUSH
2077: CALL_OW 44
2081: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2082: LD_EXP 1
2086: PPUSH
2087: LD_INT 23
2089: PPUSH
2090: CALL_OW 52
// uc_side := 5 ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_INT 5
2101: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 4
2107: PPUSH
2108: LD_VAR 0 8
2112: PPUSH
2113: CALL_OW 380
// hc_gallery := potter ;
2117: LD_ADDR_OWVAR 33
2121: PUSH
2122: LD_STRING potter
2124: ST_TO_ADDR
// hc_face_number := 2 ;
2125: LD_ADDR_OWVAR 34
2129: PUSH
2130: LD_INT 2
2132: ST_TO_ADDR
// hc_importance := 0 ;
2133: LD_ADDR_OWVAR 32
2137: PUSH
2138: LD_INT 0
2140: ST_TO_ADDR
// hc_name := George Potter ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING George Potter
2148: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 12
2156: PUSH
2157: LD_INT 9
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// potter := CreateHuman ;
2164: LD_ADDR_EXP 4
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2174: LD_EXP 4
2178: PPUSH
2179: LD_INT 4
2181: PPUSH
2182: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2186: LD_EXP 4
2190: PPUSH
2191: LD_INT 103
2193: PPUSH
2194: LD_INT 45
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2204: LD_EXP 4
2208: PPUSH
2209: LD_INT 23
2211: PPUSH
2212: CALL_OW 119
// InitHc ( ) ;
2216: CALL_OW 19
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
// uc_side := 5 ;
2232: LD_ADDR_OWVAR 20
2236: PUSH
2237: LD_INT 5
2239: ST_TO_ADDR
// uc_nation := nation_arabian ;
2240: LD_ADDR_OWVAR 21
2244: PUSH
2245: LD_INT 2
2247: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: LD_INT 22
2255: PUSH
2256: LD_OWVAR 20
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 30
2267: PUSH
2268: LD_INT 5
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: ST_TO_ADDR
// for i = 1 to 3 do
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: DOUBLE
2290: LD_INT 1
2292: DEC
2293: ST_TO_ADDR
2294: LD_INT 3
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2336
// begin PrepareHuman ( false , 2 , 6 ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: LD_INT 6
2308: PPUSH
2309: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2313: CALL_OW 44
2317: PPUSH
2318: LD_INT 27
2320: PPUSH
2321: LD_INT 22
2323: PPUSH
2324: LD_INT 5
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 50
// end ;
2334: GO 2297
2336: POP
2337: POP
// for i = 1 to 3 do
2338: LD_ADDR_VAR 0 2
2342: PUSH
2343: DOUBLE
2344: LD_INT 1
2346: DEC
2347: ST_TO_ADDR
2348: LD_INT 3
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2387
// begin PrepareHuman ( false , 1 , 6 ) ;
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 6
2362: PPUSH
2363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2367: CALL_OW 44
2371: PPUSH
2372: LD_VAR 0 4
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: CALL_OW 52
// end ;
2385: GO 2351
2387: POP
2388: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2389: LD_ADDR_VAR 0 2
2393: PUSH
2394: LD_INT 22
2396: PUSH
2397: LD_OWVAR 20
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 31
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 32
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 69
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2531
// begin PrepareHuman ( false , 1 , 6 ) ;
2446: LD_INT 0
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: LD_INT 6
2454: PPUSH
2455: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2459: CALL_OW 44
2463: PPUSH
2464: LD_VAR 0 2
2468: PPUSH
2469: CALL 4814 0 2
// if GetBType ( i ) = b_bunker then
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 266
2482: PUSH
2483: LD_INT 32
2485: EQUAL
2486: IFFALSE 2529
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2488: LD_VAR 0 2
2492: PPUSH
2493: LD_INT 27
2495: PUSH
2496: LD_INT 25
2498: PUSH
2499: LD_INT 24
2501: PUSH
2502: LD_INT 28
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: LD_VAR 0 2
2515: PUSH
2516: LD_INT 4
2518: MOD
2519: PUSH
2520: LD_INT 1
2522: PLUS
2523: ARRAY
2524: PPUSH
2525: CALL_OW 431
// end ;
2529: GO 2443
2531: POP
2532: POP
// for i = 1 to 3 do
2533: LD_ADDR_VAR 0 2
2537: PUSH
2538: DOUBLE
2539: LD_INT 1
2541: DEC
2542: ST_TO_ADDR
2543: LD_INT 3
2545: PUSH
2546: FOR_TO
2547: IFFALSE 2664
// begin vc_chassis := ar_half_tracked ;
2549: LD_ADDR_OWVAR 37
2553: PUSH
2554: LD_INT 14
2556: ST_TO_ADDR
// vc_engine := engine_solar ;
2557: LD_ADDR_OWVAR 39
2561: PUSH
2562: LD_INT 2
2564: ST_TO_ADDR
// vc_control := control_manual ;
2565: LD_ADDR_OWVAR 38
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2573: LD_ADDR_OWVAR 40
2577: PUSH
2578: LD_INT 25
2580: PUSH
2581: LD_INT 27
2583: PUSH
2584: LD_INT 26
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: ST_TO_ADDR
// un := CreateVehicle ;
2598: LD_ADDR_VAR 0 3
2602: PUSH
2603: CALL_OW 45
2607: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2608: LD_VAR 0 3
2612: PPUSH
2613: LD_INT 5
2615: PPUSH
2616: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 8
2627: PPUSH
2628: LD_INT 0
2630: PPUSH
2631: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: LD_INT 7
2643: PPUSH
2644: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2648: CALL_OW 44
2652: PPUSH
2653: LD_VAR 0 3
2657: PPUSH
2658: CALL_OW 52
// end ;
2662: GO 2546
2664: POP
2665: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 6
2674: PPUSH
2675: CALL_OW 380
// al_commander := CreateHuman ;
2679: LD_ADDR_EXP 5
2683: PUSH
2684: CALL_OW 44
2688: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2689: LD_EXP 5
2693: PPUSH
2694: LD_INT 22
2696: PUSH
2697: LD_OWVAR 20
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PPUSH
2720: CALL_OW 69
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: PPUSH
2729: CALL_OW 52
// InitHc ( ) ;
2733: CALL_OW 19
// end ;
2737: LD_VAR 0 1
2741: RET
// export function ChangeSide ( ) ; var i ; begin
2742: LD_INT 0
2744: PPUSH
2745: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2746: LD_ADDR_VAR 0 2
2750: PUSH
2751: LD_INT 22
2753: PUSH
2754: LD_INT 5
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PPUSH
2761: CALL_OW 69
2765: PUSH
2766: FOR_IN
2767: IFFALSE 2783
// SetSide ( i , 8 ) ;
2769: LD_VAR 0 2
2773: PPUSH
2774: LD_INT 8
2776: PPUSH
2777: CALL_OW 235
2781: GO 2766
2783: POP
2784: POP
// end ;
2785: LD_VAR 0 1
2789: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2790: LD_INT 22
2792: PUSH
2793: LD_INT 5
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 69
2804: IFFALSE 3318
2806: GO 2808
2808: DISABLE
2809: LD_INT 0
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
// begin enable ;
2817: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: LD_INT 22
2825: PUSH
2826: LD_INT 5
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 2
2835: PUSH
2836: LD_INT 21
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 21
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PPUSH
2865: CALL_OW 69
2869: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2870: LD_ADDR_VAR 0 5
2874: PUSH
2875: LD_INT 22
2877: PUSH
2878: LD_INT 5
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 32
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: LD_INT 24
2900: PUSH
2901: LD_INT 1000
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: PPUSH
2917: CALL_OW 69
2921: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2922: LD_ADDR_VAR 0 6
2926: PUSH
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 3
2934: PUSH
2935: LD_INT 54
2937: PUSH
2938: EMPTY
2939: LIST
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_INT 25
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: ST_TO_ADDR
// if not list then
2964: LD_VAR 0 2
2968: NOT
2969: IFFALSE 2973
// exit ;
2971: GO 3318
// for i in list do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: LD_VAR 0 2
2982: PUSH
2983: FOR_IN
2984: IFFALSE 3316
// begin if b then
2986: LD_VAR 0 5
2990: IFFALSE 3069
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2992: LD_ADDR_VAR 0 4
2996: PUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_INT 25
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PUSH
3017: FOR_IN
3018: IFFALSE 3067
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3020: LD_VAR 0 4
3024: PPUSH
3025: CALL_OW 314
3029: NOT
3030: PUSH
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 110
3040: PUSH
3041: LD_INT 7
3043: NONEQUAL
3044: AND
3045: IFFALSE 3065
// ComRepairBuilding ( j , b [ 1 ] ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 130
3065: GO 3017
3067: POP
3068: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 256
3078: PUSH
3079: LD_INT 500
3081: LESS
3082: PUSH
3083: LD_VAR 0 1
3087: PPUSH
3088: CALL_OW 110
3092: PUSH
3093: LD_INT 7
3095: EQUAL
3096: NOT
3097: AND
3098: IFFALSE 3148
// begin ComMoveToArea ( i , guard_hill ) ;
3100: LD_VAR 0 1
3104: PPUSH
3105: LD_INT 11
3107: PPUSH
3108: CALL_OW 113
// SetTag ( i , 7 ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 247
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: IFFALSE 3148
// begin AddComExitVehicle ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3148: LD_VAR 0 1
3152: PPUSH
3153: CALL_OW 256
3157: PUSH
3158: LD_INT 1000
3160: EQUAL
3161: PUSH
3162: LD_VAR 0 1
3166: PPUSH
3167: CALL_OW 110
3171: PUSH
3172: LD_INT 7
3174: EQUAL
3175: AND
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: CALL_OW 310
3186: NOT
3187: AND
3188: PUSH
3189: LD_VAR 0 6
3193: AND
3194: IFFALSE 3222
// begin SetTag ( i , 0 ) ;
3196: LD_VAR 0 1
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3208: LD_VAR 0 6
3212: PPUSH
3213: LD_VAR 0 1
3217: PPUSH
3218: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: CALL_OW 247
3231: PUSH
3232: LD_INT 2
3234: EQUAL
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 110
3245: PUSH
3246: LD_INT 7
3248: NONEQUAL
3249: AND
3250: PUSH
3251: LD_VAR 0 1
3255: PPUSH
3256: CALL_OW 314
3260: NOT
3261: AND
3262: IFFALSE 3314
// if FilterAllUnits ( [ f_side , 7 ] ) then
3264: LD_INT 22
3266: PUSH
3267: LD_INT 7
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 69
3278: IFFALSE 3314
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3280: LD_VAR 0 1
3284: PPUSH
3285: LD_INT 22
3287: PUSH
3288: LD_INT 7
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PPUSH
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 74
3309: PPUSH
3310: CALL_OW 115
// end ;
3314: GO 2983
3316: POP
3317: POP
// end ; end_of_file
3318: PPOPN 6
3320: END
// export function Game ; var i , val , areas , wave ; begin
3321: LD_INT 0
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
3327: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: LD_INT 1
3335: PUSH
3336: LD_INT 2
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 4
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: LD_INT 6
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_INT 5
3366: PUSH
3367: LD_INT 6
3369: PUSH
3370: LD_INT 7
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: PUSH
3378: LD_OWVAR 67
3382: ARRAY
3383: ST_TO_ADDR
// wave := 1 ;
3384: LD_ADDR_VAR 0 5
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// while not game_over do
3392: LD_EXP 7
3396: NOT
3397: IFFALSE 3553
// begin repeat begin Wait ( 0 0$01 ) ;
3399: LD_INT 35
3401: PPUSH
3402: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3406: LD_ADDR_EXP 11
3410: PUSH
3411: LD_EXP 11
3415: PUSH
3416: LD_INT 35
3418: PLUS
3419: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3420: LD_INT 22
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: PUSH
3435: LD_INT 10
3437: LESS
3438: PUSH
3439: LD_EXP 11
3443: PUSH
3444: LD_INT 21000
3446: GREATEREQUAL
3447: OR
3448: IFFALSE 3399
// wave_time := 0 0$00 ;
3450: LD_ADDR_EXP 11
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3458: LD_INT 5250
3460: PPUSH
3461: CALL_OW 67
// if not ignore_wave then
3465: LD_EXP 15
3469: NOT
3470: IFFALSE 3543
// begin for i = 1 to areas do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_VAR 0 4
3486: PUSH
3487: FOR_TO
3488: IFFALSE 3525
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3490: LD_VAR 0 5
3494: PUSH
3495: LD_VAR 0 3
3499: PLUS
3500: PPUSH
3501: LD_VAR 0 4
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PPUSH
3512: CALL 3558 0 2
// Wait ( 0 0$10 ) ;
3516: LD_INT 350
3518: PPUSH
3519: CALL_OW 67
// end ;
3523: GO 3487
3525: POP
3526: POP
// wave := wave + 1 ;
3527: LD_ADDR_VAR 0 5
3531: PUSH
3532: LD_VAR 0 5
3536: PUSH
3537: LD_INT 1
3539: PLUS
3540: ST_TO_ADDR
// end else
3541: GO 3551
// ignore_wave := false ;
3543: LD_ADDR_EXP 15
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// end ;
3551: GO 3392
// end ;
3553: LD_VAR 0 1
3557: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// uc_side := 7 ;
3565: LD_ADDR_OWVAR 20
3569: PUSH
3570: LD_INT 7
3572: ST_TO_ADDR
// uc_nation := 2 ;
3573: LD_ADDR_OWVAR 21
3577: PUSH
3578: LD_INT 2
3580: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3581: LD_ADDR_VAR 0 5
3585: PUSH
3586: LD_INT 10
3588: PUSH
3589: LD_OWVAR 1
3593: PUSH
3594: LD_INT 10500
3596: DIV
3597: PLUS
3598: ST_TO_ADDR
// if v > 25 then
3599: LD_VAR 0 5
3603: PUSH
3604: LD_INT 25
3606: GREATER
3607: IFFALSE 3617
// v := 25 ;
3609: LD_ADDR_VAR 0 5
3613: PUSH
3614: LD_INT 25
3616: ST_TO_ADDR
// InitHc ( ) ;
3617: CALL_OW 19
// hc_gallery :=  ;
3621: LD_ADDR_OWVAR 33
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// hc_importance := 0 ;
3629: LD_ADDR_OWVAR 32
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// hc_name :=  ;
3637: LD_ADDR_OWVAR 26
3641: PUSH
3642: LD_STRING 
3644: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3645: LD_ADDR_OWVAR 29
3649: PUSH
3650: LD_VAR 0 5
3654: PUSH
3655: LD_VAR 0 5
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: ST_TO_ADDR
// if val > 35 then
3664: LD_VAR 0 1
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: IFFALSE 3682
// val := 35 ;
3674: LD_ADDR_VAR 0 1
3678: PUSH
3679: LD_INT 35
3681: ST_TO_ADDR
// for i = 1 to val do
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: DOUBLE
3688: LD_INT 1
3690: DEC
3691: ST_TO_ADDR
3692: LD_VAR 0 1
3696: PUSH
3697: FOR_TO
3698: IFFALSE 3911
// begin if i mod 9 = 0 then
3700: LD_VAR 0 4
3704: PUSH
3705: LD_INT 9
3707: MOD
3708: PUSH
3709: LD_INT 0
3711: EQUAL
3712: IFFALSE 3724
// class := class_apeman_kamikaze else
3714: LD_ADDR_VAR 0 7
3718: PUSH
3719: LD_INT 17
3721: ST_TO_ADDR
3722: GO 3756
// if i mod 4 = 0 then
3724: LD_VAR 0 4
3728: PUSH
3729: LD_INT 4
3731: MOD
3732: PUSH
3733: LD_INT 0
3735: EQUAL
3736: IFFALSE 3748
// class := class_apeman_soldier else
3738: LD_ADDR_VAR 0 7
3742: PUSH
3743: LD_INT 15
3745: ST_TO_ADDR
3746: GO 3756
// class := class_apeman ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 12
3755: ST_TO_ADDR
// if i mod 6 = 0 then
3756: LD_VAR 0 4
3760: PUSH
3761: LD_INT 6
3763: MOD
3764: PUSH
3765: LD_INT 0
3767: EQUAL
3768: IFFALSE 3843
// begin vc_chassis := ar_half_tracked ;
3770: LD_ADDR_OWVAR 37
3774: PUSH
3775: LD_INT 14
3777: ST_TO_ADDR
// vc_control := control_apeman ;
3778: LD_ADDR_OWVAR 38
3782: PUSH
3783: LD_INT 5
3785: ST_TO_ADDR
// vc_engine := engine_siberite ;
3786: LD_ADDR_OWVAR 39
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3794: LD_ADDR_OWVAR 40
3798: PUSH
3799: LD_INT 28
3801: PUSH
3802: LD_INT 27
3804: PUSH
3805: LD_INT 29
3807: PUSH
3808: LD_EXP 22
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 1
3821: PPUSH
3822: LD_INT 4
3824: PPUSH
3825: CALL_OW 12
3829: ARRAY
3830: ST_TO_ADDR
// un := CreateVehicle ;
3831: LD_ADDR_VAR 0 6
3835: PUSH
3836: CALL_OW 45
3840: ST_TO_ADDR
// end else
3841: GO 3868
// begin PrepareHuman ( sex_male , class , 10 ) ;
3843: LD_INT 1
3845: PPUSH
3846: LD_VAR 0 7
3850: PPUSH
3851: LD_INT 10
3853: PPUSH
3854: CALL_OW 380
// un := CreateHuman ;
3858: LD_ADDR_VAR 0 6
3862: PUSH
3863: CALL_OW 44
3867: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3868: LD_VAR 0 6
3872: PPUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3885: LD_VAR 0 6
3889: PPUSH
3890: CALL_OW 250
3894: PPUSH
3895: LD_VAR 0 6
3899: PPUSH
3900: CALL_OW 251
3904: PPUSH
3905: CALL_OW 494
// end ;
3909: GO 3697
3911: POP
3912: POP
// end ;
3913: LD_VAR 0 3
3917: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3918: LD_EXP 6
3922: PUSH
3923: LD_EXP 7
3927: NOT
3928: AND
3929: IFFALSE 4048
3931: GO 3933
3933: DISABLE
3934: LD_INT 0
3936: PPUSH
3937: PPUSH
3938: PPUSH
// begin enable ;
3939: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3940: LD_ADDR_VAR 0 2
3944: PUSH
3945: LD_INT 22
3947: PUSH
3948: LD_INT 7
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 69
3959: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: LD_INT 81
3967: PUSH
3968: LD_INT 7
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 69
3979: ST_TO_ADDR
// if not list then
3980: LD_VAR 0 2
3984: NOT
3985: IFFALSE 3989
// exit ;
3987: GO 4048
// for i in list do
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_VAR 0 2
3998: PUSH
3999: FOR_IN
4000: IFFALSE 4046
// begin if enemy then
4002: LD_VAR 0 3
4006: IFFALSE 4044
// if not HasTask ( i ) then
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 314
4017: NOT
4018: IFFALSE 4044
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4020: LD_VAR 0 1
4024: PPUSH
4025: LD_VAR 0 3
4029: PPUSH
4030: LD_VAR 0 1
4034: PPUSH
4035: CALL_OW 74
4039: PPUSH
4040: CALL_OW 115
// end ;
4044: GO 3999
4046: POP
4047: POP
// end ; end_of_file
4048: PPOPN 3
4050: END
// export function Action ; begin
4051: LD_INT 0
4053: PPUSH
// InGameOn ;
4054: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4058: LD_INT 23
4060: PPUSH
4061: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4065: LD_EXP 1
4069: PPUSH
4070: LD_STRING DL-1
4072: PPUSH
4073: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4077: LD_EXP 2
4081: PPUSH
4082: LD_STRING DA-1
4084: PPUSH
4085: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4089: LD_EXP 3
4093: PPUSH
4094: LD_STRING DA-2
4096: PPUSH
4097: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4101: LD_EXP 1
4105: PPUSH
4106: LD_STRING DL-2
4108: PPUSH
4109: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4113: LD_EXP 3
4117: PPUSH
4118: LD_STRING DA-3
4120: PPUSH
4121: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4125: LD_EXP 1
4129: PPUSH
4130: LD_STRING DL-3
4132: PPUSH
4133: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4137: LD_EXP 2
4141: PPUSH
4142: LD_STRING DA-4
4144: PPUSH
4145: CALL_OW 88
// if not dialogue_skipped then
4149: LD_OWVAR 59
4153: NOT
4154: IFFALSE 4239
// begin Wait ( 0 0$01 ) ;
4156: LD_INT 35
4158: PPUSH
4159: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4163: LD_EXP 2
4167: PUSH
4168: LD_EXP 3
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4181: LD_EXP 2
4185: PPUSH
4186: LD_INT 107
4188: PPUSH
4189: LD_INT 53
4191: PPUSH
4192: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4196: LD_EXP 3
4200: PPUSH
4201: LD_INT 108
4203: PPUSH
4204: LD_INT 53
4206: PPUSH
4207: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4211: LD_EXP 2
4215: PPUSH
4216: LD_EXP 4
4220: PPUSH
4221: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4225: LD_EXP 3
4229: PPUSH
4230: LD_EXP 4
4234: PPUSH
4235: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4239: LD_INT 35
4241: PPUSH
4242: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4246: LD_EXP 2
4250: PPUSH
4251: LD_INT 107
4253: PPUSH
4254: LD_INT 53
4256: PPUSH
4257: CALL_OW 307
4261: PUSH
4262: LD_OWVAR 59
4266: OR
4267: IFFALSE 4239
// if not dialogue_skipped then
4269: LD_OWVAR 59
4273: NOT
4274: IFFALSE 4375
// begin ComTurnUnit ( potter , l1 ) ;
4276: LD_EXP 4
4280: PPUSH
4281: LD_EXP 2
4285: PPUSH
4286: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4290: LD_INT 10
4292: PPUSH
4293: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4297: LD_EXP 4
4301: PPUSH
4302: LD_INT 108
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: LD_INT 0
4313: PPUSH
4314: CALL_OW 483
// Wait ( 0 0$01 ) ;
4318: LD_INT 35
4320: PPUSH
4321: CALL_OW 67
// RemoveUnit ( potter ) ;
4325: LD_EXP 4
4329: PPUSH
4330: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DA-5
4341: PPUSH
4342: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4346: LD_EXP 3
4350: PPUSH
4351: LD_STRING DA-6
4353: PPUSH
4354: CALL_OW 88
// Wait ( 0 0$02 ) ;
4358: LD_INT 70
4360: PPUSH
4361: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4365: LD_INT 25
4367: PPUSH
4368: LD_INT 19
4370: PPUSH
4371: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4375: LD_INT 20
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL 3558 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4385: LD_EXP 5
4389: PPUSH
4390: LD_STRING DLa-1
4392: PPUSH
4393: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4397: LD_EXP 1
4401: PPUSH
4402: LD_STRING DL-5
4404: PPUSH
4405: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4409: LD_INT 23
4411: PPUSH
4412: CALL_OW 87
// InGameOff ;
4416: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4420: LD_STRING C1
4422: PPUSH
4423: CALL_OW 337
// alert := true ;
4427: LD_ADDR_EXP 6
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4435: LD_EXP 5
4439: PPUSH
4440: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4444: LD_EXP 5
4448: PPUSH
4449: LD_INT 11
4451: PPUSH
4452: CALL_OW 173
// Wait ( 0 0$30 ) ;
4456: LD_INT 1050
4458: PPUSH
4459: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4463: LD_INT 10
4465: PPUSH
4466: LD_INT 4
4468: PPUSH
4469: CALL 3558 0 2
// Wait ( 0 0$35 ) ;
4473: LD_INT 1225
4475: PPUSH
4476: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4480: LD_INT 10
4482: PPUSH
4483: LD_INT 5
4485: PPUSH
4486: CALL 3558 0 2
// Wait ( 0 0$03 ) ;
4490: LD_INT 105
4492: PPUSH
4493: CALL_OW 67
// Game ;
4497: CALL 3321 0 0
// end ;
4501: LD_VAR 0 1
4505: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4506: LD_INT 22
4508: PUSH
4509: LD_INT 7
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 69
4520: PUSH
4521: LD_INT 0
4523: EQUAL
4524: PUSH
4525: LD_EXP 10
4529: PUSH
4530: LD_INT 1500
4532: GREATEREQUAL
4533: AND
4534: IFFALSE 4762
4536: GO 4538
4538: DISABLE
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// begin DialogueOn ;
4543: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4547: LD_EXP 12
4551: PPUSH
4552: LD_STRING DVr-1
4554: PPUSH
4555: CALL_OW 94
// DialogueOff ;
4559: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4563: LD_STRING QBonusInfo
4565: PPUSH
4566: CALL_OW 97
4570: PUSH
4571: LD_INT 1
4573: DOUBLE
4574: EQUAL
4575: IFTRUE 4579
4577: GO 4590
4579: POP
// bonus_active := true ; end ;
4580: LD_ADDR_EXP 13
4584: PUSH
4585: LD_INT 1
4587: ST_TO_ADDR
4588: GO 4591
4590: POP
// bonus_num := 4 ;
4591: LD_ADDR_EXP 14
4595: PUSH
4596: LD_INT 4
4598: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_mid , art_instant , main_base ) ;
4599: LD_OWVAR 2
4603: PPUSH
4604: LD_INT 2
4606: PPUSH
4607: LD_INT 2
4609: PPUSH
4610: LD_INT 23
4612: PPUSH
4613: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4617: LD_ADDR_VAR 0 1
4621: PUSH
4622: LD_INT 500
4624: PUSH
4625: LD_INT 3500
4627: PUSH
4628: LD_INT 5750
4630: PUSH
4631: LD_INT 10000
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4640: LD_INT 10500
4642: PUSH
4643: LD_INT 12600
4645: PUSH
4646: LD_INT 14700
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_OWVAR 67
4658: ARRAY
4659: PPUSH
4660: CALL_OW 67
// for i = 1 to tmp do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_VAR 0 1
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4712
// if points >= tmp [ i ] then
4682: LD_EXP 10
4686: PUSH
4687: LD_VAR 0 1
4691: PUSH
4692: LD_VAR 0 2
4696: ARRAY
4697: GREATEREQUAL
4698: IFFALSE 4710
// bonus_num := i ;
4700: LD_ADDR_EXP 14
4704: PUSH
4705: LD_VAR 0 2
4709: ST_TO_ADDR
4710: GO 4679
4712: POP
4713: POP
// case Query ( QBonusInfo ) of 1 :
4714: LD_STRING QBonusInfo
4716: PPUSH
4717: CALL_OW 97
4721: PUSH
4722: LD_INT 1
4724: DOUBLE
4725: EQUAL
4726: IFTRUE 4730
4728: GO 4751
4730: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4731: LD_OWVAR 2
4735: PPUSH
4736: LD_INT 12
4738: PPUSH
4739: LD_INT 2
4741: PPUSH
4742: LD_INT 23
4744: PPUSH
4745: CALL_OW 468
4749: GO 4752
4751: POP
// until points >= 15000 ;
4752: LD_EXP 10
4756: PUSH
4757: LD_INT 15000
4759: GREATEREQUAL
4760: IFFALSE 4640
// end ;
4762: PPOPN 2
4764: END
// export function Win ; begin
4765: LD_INT 0
4767: PPUSH
// AddMedal ( med , 1 ) ;
4768: LD_STRING med
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 101
// AddMedal ( med , 1 ) ;
4778: LD_STRING med
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 101
// AddMedal ( med , 1 ) ;
4788: LD_STRING med
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 101
// GiveMedals ( MAIN ) ;
4798: LD_STRING MAIN
4800: PPUSH
4801: CALL_OW 102
// YouWin ;
4805: CALL_OW 103
// end ; end_of_file
4809: LD_VAR 0 1
4813: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4814: LD_INT 0
4816: PPUSH
4817: PPUSH
// dir := GetDir ( b ) ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: LD_VAR 0 2
4827: PPUSH
4828: CALL_OW 254
4832: ST_TO_ADDR
// if dir < 3 then
4833: LD_VAR 0 4
4837: PUSH
4838: LD_INT 3
4840: LESS
4841: IFFALSE 4859
// dir := dir + 3 else
4843: LD_ADDR_VAR 0 4
4847: PUSH
4848: LD_VAR 0 4
4852: PUSH
4853: LD_INT 3
4855: PLUS
4856: ST_TO_ADDR
4857: GO 4873
// dir := dir - 3 ;
4859: LD_ADDR_VAR 0 4
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: LD_INT 3
4871: MINUS
4872: ST_TO_ADDR
// SetDir ( un , dir ) ;
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_VAR 0 4
4882: PPUSH
4883: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_VAR 0 2
4896: PPUSH
4897: CALL_OW 52
// end ;
4901: LD_VAR 0 3
4905: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4906: LD_INT 0
4908: PPUSH
4909: PPUSH
4910: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4911: LD_ADDR_VAR 0 7
4915: PUSH
4916: LD_VAR 0 1
4920: PUSH
4921: LD_VAR 0 2
4925: ARRAY
4926: PPUSH
4927: LD_VAR 0 3
4931: PPUSH
4932: LD_VAR 0 4
4936: PPUSH
4937: CALL_OW 1
4941: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4942: LD_ADDR_VAR 0 1
4946: PUSH
4947: LD_VAR 0 1
4951: PPUSH
4952: LD_VAR 0 2
4956: PPUSH
4957: LD_VAR 0 7
4961: PPUSH
4962: CALL_OW 1
4966: ST_TO_ADDR
// result := tab ;
4967: LD_ADDR_VAR 0 5
4971: PUSH
4972: LD_VAR 0 1
4976: ST_TO_ADDR
// end ;
4977: LD_VAR 0 5
4981: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4982: LD_INT 0
4984: PPUSH
4985: PPUSH
4986: PPUSH
// if not GetControl ( veh ) = control_manual then
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL_OW 263
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: NOT
5001: IFFALSE 5013
// result := false else
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: LD_INT 0
5010: ST_TO_ADDR
5011: GO 5158
// if veh in FilterAllUnits ( [ f_empty ] ) then
5013: LD_VAR 0 1
5017: PUSH
5018: LD_INT 58
5020: PUSH
5021: EMPTY
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: IN
5029: IFFALSE 5041
// result := false else
5031: LD_ADDR_VAR 0 2
5035: PUSH
5036: LD_INT 0
5038: ST_TO_ADDR
5039: GO 5158
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5041: LD_ADDR_VAR 0 4
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 55
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 69
5077: ST_TO_ADDR
// if not filter then
5078: LD_VAR 0 4
5082: NOT
5083: IFFALSE 5095
// result := false else
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_INT 0
5092: ST_TO_ADDR
5093: GO 5158
// for i = 1 to filter do
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_VAR 0 4
5109: PUSH
5110: FOR_TO
5111: IFFALSE 5156
// if IsDriver ( filter [ i ] ) = veh then
5113: LD_VAR 0 4
5117: PUSH
5118: LD_VAR 0 3
5122: ARRAY
5123: PPUSH
5124: CALL 60541 0 1
5128: PUSH
5129: LD_VAR 0 1
5133: EQUAL
5134: IFFALSE 5154
// begin result := filter [ i ] ;
5136: LD_ADDR_VAR 0 2
5140: PUSH
5141: LD_VAR 0 4
5145: PUSH
5146: LD_VAR 0 3
5150: ARRAY
5151: ST_TO_ADDR
// break ;
5152: GO 5156
// end ;
5154: GO 5110
5156: POP
5157: POP
// end ; end ; end_of_file
5158: LD_VAR 0 2
5162: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL 21558 0 1
// if un = legion_commander then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_EXP 1
5181: EQUAL
5182: IFFALSE 5191
// YouLost ( commanderDied ) ;
5184: LD_STRING commanderDied
5186: PPUSH
5187: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5191: LD_VAR 0 1
5195: PUSH
5196: LD_EXP 1
5200: PUSH
5201: LD_INT 23
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: IN
5208: IFFALSE 5218
// game_over := true ;
5210: LD_ADDR_EXP 7
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if un = al_commander then
5218: LD_VAR 0 1
5222: PUSH
5223: LD_EXP 5
5227: EQUAL
5228: IFFALSE 5234
// ChangeSide ( ) ;
5230: CALL 2742 0 0
// if GetSide ( un ) = 7 then
5234: LD_VAR 0 1
5238: PPUSH
5239: CALL_OW 255
5243: PUSH
5244: LD_INT 7
5246: EQUAL
5247: IFFALSE 5365
// begin if GetClass ( un ) = class_apeman then
5249: LD_VAR 0 1
5253: PPUSH
5254: CALL_OW 257
5258: PUSH
5259: LD_INT 12
5261: EQUAL
5262: IFFALSE 5278
// points := points + 6 ;
5264: LD_ADDR_EXP 10
5268: PUSH
5269: LD_EXP 10
5273: PUSH
5274: LD_INT 6
5276: PLUS
5277: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 257
5287: PUSH
5288: LD_INT 17
5290: EQUAL
5291: IFFALSE 5307
// points := points + 11 ;
5293: LD_ADDR_EXP 10
5297: PUSH
5298: LD_EXP 10
5302: PUSH
5303: LD_INT 11
5305: PLUS
5306: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 257
5316: PUSH
5317: LD_INT 15
5319: EQUAL
5320: IFFALSE 5336
// points := points + 14 ;
5322: LD_ADDR_EXP 10
5326: PUSH
5327: LD_EXP 10
5331: PUSH
5332: LD_INT 14
5334: PLUS
5335: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 247
5345: PUSH
5346: LD_INT 2
5348: EQUAL
5349: IFFALSE 5365
// points := points + 50 ;
5351: LD_ADDR_EXP 10
5355: PUSH
5356: LD_EXP 10
5360: PUSH
5361: LD_INT 50
5363: PLUS
5364: ST_TO_ADDR
// end ; end ;
5365: PPOPN 1
5367: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5368: LD_EXP 5
5372: PPUSH
5373: CALL_OW 256
5377: PUSH
5378: LD_INT 1000
5380: LESS
5381: IFFALSE 5413
5383: GO 5385
5385: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5386: LD_EXP 5
5390: PPUSH
5391: CALL_OW 504
5395: PPUSH
5396: CALL_OW 255
5400: PUSH
5401: LD_INT 8
5403: EQUAL
5404: IFFALSE 5413
// YouLost ( FriendlyFire ) ;
5406: LD_STRING FriendlyFire
5408: PPUSH
5409: CALL_OW 104
5413: END
// on DialogueSkipped ( value ) do var i ;
5414: LD_INT 0
5416: PPUSH
// begin RemoveUnit ( potter ) ;
5417: LD_EXP 4
5421: PPUSH
5422: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5426: LD_EXP 2
5430: PUSH
5431: LD_EXP 3
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PPUSH
5440: CALL_OW 122
// Wait ( 1 ) ;
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5451: LD_EXP 2
5455: PPUSH
5456: LD_INT 107
5458: PPUSH
5459: LD_INT 53
5461: PPUSH
5462: LD_INT 0
5464: PPUSH
5465: LD_INT 0
5467: PPUSH
5468: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5472: LD_EXP 3
5476: PPUSH
5477: LD_INT 108
5479: PPUSH
5480: LD_INT 53
5482: PPUSH
5483: LD_INT 0
5485: PPUSH
5486: LD_INT 0
5488: PPUSH
5489: CALL_OW 483
// Wait ( 1 ) ;
5493: LD_INT 1
5495: PPUSH
5496: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5500: LD_EXP 2
5504: PUSH
5505: LD_EXP 3
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: LD_INT 108
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 118
// end ;
5524: PPOPN 2
5526: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
5536: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5537: LD_ADDR_VAR 0 10
5541: PUSH
5542: LD_INT 2
5544: PPUSH
5545: CALL_OW 469
5549: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5550: LD_ADDR_VAR 0 12
5554: PUSH
5555: LD_INT 22
5557: PUSH
5558: LD_OWVAR 2
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 30
5572: PUSH
5573: LD_INT 8
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 30
5582: PUSH
5583: LD_INT 11
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PPUSH
5604: LD_VAR 0 10
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 10
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 73
5626: ST_TO_ADDR
// if icon = art_exp_left then
5627: LD_VAR 0 2
5631: PUSH
5632: LD_INT 1
5634: EQUAL
5635: IFFALSE 5690
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5637: LD_VAR 0 12
5641: PPUSH
5642: LD_EXP 9
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5654: LD_VAR 0 12
5658: PPUSH
5659: LD_EXP 17
5663: PPUSH
5664: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5668: LD_OWVAR 2
5672: PPUSH
5673: LD_INT 1
5675: PPUSH
5676: LD_INT 0
5678: PPUSH
5679: LD_VAR 0 12
5683: PPUSH
5684: CALL_OW 468
// end else
5688: GO 6471
// begin DialogueOn ;
5690: CALL_OW 6
// uc_side := 8 ;
5694: LD_ADDR_OWVAR 20
5698: PUSH
5699: LD_INT 8
5701: ST_TO_ADDR
// uc_nation := 2 ;
5702: LD_ADDR_OWVAR 21
5706: PUSH
5707: LD_INT 2
5709: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5710: LD_ADDR_VAR 0 5
5714: PUSH
5715: LD_STRING QBonus
5717: PUSH
5718: LD_EXP 14
5722: STR
5723: ST_TO_ADDR
// off := true ;
5724: LD_ADDR_VAR 0 6
5728: PUSH
5729: LD_INT 1
5731: ST_TO_ADDR
// units := [ ] ;
5732: LD_ADDR_VAR 0 7
5736: PUSH
5737: EMPTY
5738: ST_TO_ADDR
// crates := 0 ;
5739: LD_ADDR_VAR 0 8
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5747: LD_EXP 12
5751: PPUSH
5752: LD_STRING DVr-2
5754: PPUSH
5755: CALL_OW 94
// wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// case Query ( bonus ) of 1 :
5766: LD_VAR 0 5
5770: PPUSH
5771: CALL_OW 97
5775: PUSH
5776: LD_INT 1
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5869
5784: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5785: LD_ADDR_VAR 0 9
5789: PUSH
5790: LD_INT 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 5
5798: PUSH
5799: LD_INT 8
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: PUSH
5808: LD_EXP 14
5812: ARRAY
5813: ST_TO_ADDR
// for i = 1 to tmp do
5814: LD_ADDR_VAR 0 11
5818: PUSH
5819: DOUBLE
5820: LD_INT 1
5822: DEC
5823: ST_TO_ADDR
5824: LD_VAR 0 9
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5865
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5832: LD_INT 0
5834: PPUSH
5835: LD_INT 15
5837: PPUSH
5838: LD_VAR 0 9
5842: PPUSH
5843: CALL_OW 380
// units := units ^ CreateHuman ;
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: LD_VAR 0 7
5856: PUSH
5857: CALL_OW 44
5861: ADD
5862: ST_TO_ADDR
// end ;
5863: GO 5829
5865: POP
5866: POP
// end ; 2 :
5867: GO 6277
5869: LD_INT 2
5871: DOUBLE
5872: EQUAL
5873: IFTRUE 5877
5875: GO 5909
5877: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5878: LD_ADDR_VAR 0 8
5882: PUSH
5883: LD_INT 100
5885: PUSH
5886: LD_INT 150
5888: PUSH
5889: LD_INT 350
5891: PUSH
5892: LD_INT 500
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: LD_EXP 14
5905: ARRAY
5906: ST_TO_ADDR
// end ; 3 :
5907: GO 6277
5909: LD_INT 3
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 6257
5917: POP
// begin if bonus_num = 1 then
5918: LD_EXP 14
5922: PUSH
5923: LD_INT 1
5925: EQUAL
5926: IFFALSE 5936
// ignore_wave := true ;
5928: LD_ADDR_EXP 15
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// if bonus_num = 2 then
5936: LD_EXP 14
5940: PUSH
5941: LD_INT 2
5943: EQUAL
5944: IFFALSE 6064
// begin for i = 1 to 2 do
5946: LD_ADDR_VAR 0 11
5950: PUSH
5951: DOUBLE
5952: LD_INT 1
5954: DEC
5955: ST_TO_ADDR
5956: LD_INT 2
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6062
// begin uc_nation := nation_arabian ;
5962: LD_ADDR_OWVAR 21
5966: PUSH
5967: LD_INT 2
5969: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5970: LD_ADDR_OWVAR 37
5974: PUSH
5975: LD_INT 14
5977: ST_TO_ADDR
// vc_engine := engine_siberite ;
5978: LD_ADDR_OWVAR 39
5982: PUSH
5983: LD_INT 3
5985: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5986: LD_ADDR_OWVAR 38
5990: PUSH
5991: LD_INT 2
5993: PUSH
5994: LD_INT 5
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 2
6006: PPUSH
6007: CALL_OW 12
6011: ARRAY
6012: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6013: LD_ADDR_OWVAR 40
6017: PUSH
6018: LD_INT 28
6020: PUSH
6021: LD_INT 27
6023: PUSH
6024: LD_INT 25
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 3
6037: PPUSH
6038: CALL_OW 12
6042: ARRAY
6043: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: LD_VAR 0 7
6053: PUSH
6054: CALL_OW 45
6058: ADD
6059: ST_TO_ADDR
// end ;
6060: GO 5959
6062: POP
6063: POP
// end ; if bonus_num = 3 then
6064: LD_EXP 14
6068: PUSH
6069: LD_INT 3
6071: EQUAL
6072: IFFALSE 6196
// begin for i = 1 to 4 do
6074: LD_ADDR_VAR 0 11
6078: PUSH
6079: DOUBLE
6080: LD_INT 1
6082: DEC
6083: ST_TO_ADDR
6084: LD_INT 4
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6194
// begin uc_nation := nation_arabian ;
6090: LD_ADDR_OWVAR 21
6094: PUSH
6095: LD_INT 2
6097: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6098: LD_ADDR_OWVAR 37
6102: PUSH
6103: LD_INT 14
6105: ST_TO_ADDR
// vc_engine := engine_siberite ;
6106: LD_ADDR_OWVAR 39
6110: PUSH
6111: LD_INT 3
6113: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6114: LD_ADDR_OWVAR 38
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: LD_INT 5
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 1
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: CALL_OW 12
6139: ARRAY
6140: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6141: LD_ADDR_OWVAR 40
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 27
6151: PUSH
6152: LD_INT 28
6154: PUSH
6155: LD_INT 25
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 4
6169: PPUSH
6170: CALL_OW 12
6174: ARRAY
6175: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6176: LD_ADDR_VAR 0 7
6180: PUSH
6181: LD_VAR 0 7
6185: PUSH
6186: CALL_OW 45
6190: ADD
6191: ST_TO_ADDR
// end ;
6192: GO 6087
6194: POP
6195: POP
// end ; if bonus_num = 4 then
6196: LD_EXP 14
6200: PUSH
6201: LD_INT 4
6203: EQUAL
6204: IFFALSE 6255
// for i = 1 to 3 do
6206: LD_ADDR_VAR 0 11
6210: PUSH
6211: DOUBLE
6212: LD_INT 1
6214: DEC
6215: ST_TO_ADDR
6216: LD_INT 3
6218: PUSH
6219: FOR_TO
6220: IFFALSE 6253
// begin PrepareHuman ( false , 3 , 8 ) ;
6222: LD_INT 0
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: LD_INT 8
6230: PPUSH
6231: CALL_OW 380
// units := units ^ CreateHuman ;
6235: LD_ADDR_VAR 0 7
6239: PUSH
6240: LD_VAR 0 7
6244: PUSH
6245: CALL_OW 44
6249: ADD
6250: ST_TO_ADDR
// end ;
6251: GO 6219
6253: POP
6254: POP
// end ; 4 :
6255: GO 6277
6257: LD_INT 4
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6276
6265: POP
// off := false ; end ;
6266: LD_ADDR_VAR 0 6
6270: PUSH
6271: LD_INT 0
6273: ST_TO_ADDR
6274: GO 6277
6276: POP
// DialogueOff ;
6277: CALL_OW 7
// if not off then
6281: LD_VAR 0 6
6285: NOT
6286: IFFALSE 6292
// exit else
6288: GO 6471
6290: GO 6345
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6292: LD_OWVAR 2
6296: PPUSH
6297: LD_INT 12
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_INT 23
6305: PPUSH
6306: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6310: LD_EXP 12
6314: PPUSH
6315: LD_STRING DVr-3
6317: PUSH
6318: LD_STRING DVr-3a
6320: PUSH
6321: LD_STRING DVr-3b
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 1
6331: PPUSH
6332: LD_INT 3
6334: PPUSH
6335: CALL_OW 12
6339: ARRAY
6340: PPUSH
6341: CALL_OW 94
// end ; if units then
6345: LD_VAR 0 7
6349: IFFALSE 6413
// for i in units do
6351: LD_ADDR_VAR 0 11
6355: PUSH
6356: LD_VAR 0 7
6360: PUSH
6361: FOR_IN
6362: IFFALSE 6411
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6364: LD_VAR 0 11
6368: PPUSH
6369: LD_INT 92
6371: PPUSH
6372: LD_INT 49
6374: PPUSH
6375: LD_INT 20
6377: PPUSH
6378: LD_INT 0
6380: PPUSH
6381: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6385: LD_VAR 0 11
6389: PPUSH
6390: CALL_OW 250
6394: PPUSH
6395: LD_VAR 0 11
6399: PPUSH
6400: CALL_OW 251
6404: PPUSH
6405: CALL_OW 494
// end ;
6409: GO 6361
6411: POP
6412: POP
// if crates then
6413: LD_VAR 0 8
6417: IFFALSE 6471
// for i = 1 to ( crates div 50 ) do
6419: LD_ADDR_VAR 0 11
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_VAR 0 8
6433: PUSH
6434: LD_INT 50
6436: DIV
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6469
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6441: LD_INT 5
6443: PPUSH
6444: LD_INT 92
6446: PPUSH
6447: LD_INT 49
6449: PPUSH
6450: LD_INT 30
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: CALL_OW 56
// wait ( 0 0$02 ) ;
6460: LD_INT 70
6462: PPUSH
6463: CALL_OW 67
// end ;
6467: GO 6438
6469: POP
6470: POP
// end ; end ;
6471: PPOPN 12
6473: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: LD_VAR 0 3
6488: PPUSH
6489: CALL 21656 0 3
// end ;
6493: PPOPN 3
6495: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6496: LD_VAR 0 1
6500: PPUSH
6501: CALL 21664 0 1
// end ;
6505: PPOPN 1
6507: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6508: LD_VAR 0 1
6512: PPUSH
6513: CALL_OW 255
6517: PUSH
6518: LD_OWVAR 2
6522: EQUAL
6523: IFFALSE 6533
// player_res_art := true ;
6525: LD_ADDR_EXP 8
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// end ;
6533: PPOPN 1
6535: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6536: LD_INT 22
6538: PUSH
6539: LD_OWVAR 2
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: LD_INT 30
6553: PUSH
6554: LD_INT 7
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 30
6563: PUSH
6564: LD_INT 8
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 30
6573: PUSH
6574: LD_INT 11
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PPUSH
6591: CALL_OW 69
6595: IFFALSE 6828
6597: GO 6599
6599: DISABLE
6600: LD_INT 0
6602: PPUSH
6603: PPUSH
// begin enable ;
6604: ENABLE
// xy := FindArtifact ( 2 ) ;
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: LD_INT 2
6612: PPUSH
6613: CALL_OW 469
6617: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6618: LD_ADDR_VAR 0 2
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_OWVAR 2
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: LD_INT 30
6640: PUSH
6641: LD_INT 8
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 30
6650: PUSH
6651: LD_INT 7
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 30
6660: PUSH
6661: LD_INT 11
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 69
6682: PPUSH
6683: LD_VAR 0 1
6687: PUSH
6688: LD_INT 1
6690: ARRAY
6691: PPUSH
6692: LD_VAR 0 1
6696: PUSH
6697: LD_INT 2
6699: ARRAY
6700: PPUSH
6701: CALL_OW 73
6705: ST_TO_ADDR
// if player_artifact_ready = false then
6706: LD_EXP 16
6710: PUSH
6711: LD_INT 0
6713: EQUAL
6714: IFFALSE 6828
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6716: LD_VAR 0 2
6720: PPUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_INT 1
6728: ARRAY
6729: PPUSH
6730: LD_VAR 0 1
6734: PUSH
6735: LD_INT 2
6737: ARRAY
6738: PPUSH
6739: CALL_OW 297
6743: PUSH
6744: LD_INT 6
6746: LESS
6747: IFFALSE 6808
// begin if BuildingStatus ( lab ) = bs_idle then
6749: LD_VAR 0 2
6753: PPUSH
6754: CALL_OW 461
6758: PUSH
6759: LD_INT 2
6761: EQUAL
6762: IFFALSE 6786
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6764: LD_OWVAR 2
6768: PPUSH
6769: LD_INT 1
6771: PPUSH
6772: LD_INT 2
6774: PPUSH
6775: LD_VAR 0 2
6779: PPUSH
6780: CALL_OW 468
6784: GO 6806
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6786: LD_OWVAR 2
6790: PPUSH
6791: LD_INT 1
6793: PPUSH
6794: LD_INT 1
6796: PPUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 468
// end else
6806: GO 6828
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6808: LD_OWVAR 2
6812: PPUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: LD_VAR 0 2
6823: PPUSH
6824: CALL_OW 468
// end ;
6828: PPOPN 2
6830: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 255
6840: PUSH
6841: LD_OWVAR 2
6845: EQUAL
6846: IFFALSE 6872
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6848: LD_OWVAR 2
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 0
6858: PPUSH
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 468
// Win ;
6868: CALL 4765 0 0
// end ; end ;
6872: PPOPN 1
6874: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6875: LD_ADDR_EXP 17
6879: PUSH
6880: LD_VAR 0 2
6884: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6885: LD_OWVAR 2
6889: PPUSH
6890: LD_INT 1
6892: PPUSH
6893: LD_INT 2
6895: PPUSH
6896: LD_VAR 0 1
6900: PPUSH
6901: CALL_OW 468
// end ;
6905: PPOPN 2
6907: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6908: LD_VAR 0 1
6912: PPUSH
6913: LD_VAR 0 2
6917: PPUSH
6918: CALL 21680 0 2
// end ; end_of_file
6922: PPOPN 2
6924: END
// every 0 0$01 trigger not game_over do
6925: LD_EXP 7
6929: NOT
6930: IFFALSE 6963
6932: GO 6934
6934: DISABLE
// begin enable ;
6935: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6936: LD_ADDR_OWVAR 47
6940: PUSH
6941: LD_STRING #tick
6943: PUSH
6944: LD_OWVAR 1
6948: PUSH
6949: LD_STRING #points
6951: PUSH
6952: LD_EXP 10
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: ST_TO_ADDR
// end ;
6963: END
// every 0 0$01 trigger game_over do
6964: LD_EXP 7
6968: IFFALSE 7027
6970: GO 6972
6972: DISABLE
// begin Wait ( 0 0$02 ) ;
6973: LD_INT 70
6975: PPUSH
6976: CALL_OW 67
// DialogueOn ;
6980: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6984: LD_ADDR_OWVAR 47
6988: PUSH
6989: LD_STRING #game-points
6991: PUSH
6992: LD_OWVAR 78
6996: PUSH
6997: LD_EXP 10
7001: PUSH
7002: LD_STRING #game-time
7004: PUSH
7005: LD_OWVAR 1
7009: PUSH
7010: LD_STRING #game-difficulty
7012: PUSH
7013: LD_OWVAR 67
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: ST_TO_ADDR
// end ; end_of_file
7027: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7028: LD_OWVAR 1
7032: PUSH
7033: LD_INT 52500
7035: LESS
7036: IFFALSE 7060
7038: GO 7040
7040: DISABLE
// begin enable ;
7041: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7042: LD_INT 1
7044: PPUSH
7045: LD_INT 5
7047: PPUSH
7048: CALL_OW 12
7052: PPUSH
7053: LD_INT 1
7055: PPUSH
7056: CALL_OW 57
// end ; end_of_file
7060: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7061: LD_INT 0
7063: PPUSH
// ar_miner := 81 ;
7064: LD_ADDR_EXP 25
7068: PUSH
7069: LD_INT 81
7071: ST_TO_ADDR
// ar_crane := 88 ;
7072: LD_ADDR_EXP 24
7076: PUSH
7077: LD_INT 88
7079: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7080: LD_ADDR_EXP 19
7084: PUSH
7085: LD_INT 89
7087: ST_TO_ADDR
// us_hack := 99 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_INT 99
7095: ST_TO_ADDR
// us_artillery := 97 ;
7096: LD_ADDR_EXP 21
7100: PUSH
7101: LD_INT 97
7103: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7104: LD_ADDR_EXP 22
7108: PUSH
7109: LD_INT 91
7111: ST_TO_ADDR
// ar_mortar := 92 ;
7112: LD_ADDR_EXP 23
7116: PUSH
7117: LD_INT 92
7119: ST_TO_ADDR
// ru_radar := 98 ;
7120: LD_ADDR_EXP 18
7124: PUSH
7125: LD_INT 98
7127: ST_TO_ADDR
// tech_Artillery := 80 ;
7128: LD_ADDR_EXP 26
7132: PUSH
7133: LD_INT 80
7135: ST_TO_ADDR
// tech_RadMat := 81 ;
7136: LD_ADDR_EXP 27
7140: PUSH
7141: LD_INT 81
7143: ST_TO_ADDR
// tech_BasicTools := 82 ;
7144: LD_ADDR_EXP 28
7148: PUSH
7149: LD_INT 82
7151: ST_TO_ADDR
// tech_Cargo := 83 ;
7152: LD_ADDR_EXP 29
7156: PUSH
7157: LD_INT 83
7159: ST_TO_ADDR
// tech_Track := 84 ;
7160: LD_ADDR_EXP 30
7164: PUSH
7165: LD_INT 84
7167: ST_TO_ADDR
// tech_Crane := 85 ;
7168: LD_ADDR_EXP 31
7172: PUSH
7173: LD_INT 85
7175: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7176: LD_ADDR_EXP 32
7180: PUSH
7181: LD_INT 86
7183: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7184: LD_ADDR_EXP 33
7188: PUSH
7189: LD_INT 87
7191: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7192: LD_ADDR_EXP 34
7196: PUSH
7197: LD_INT 88
7199: ST_TO_ADDR
// class_mastodont := 31 ;
7200: LD_ADDR_EXP 35
7204: PUSH
7205: LD_INT 31
7207: ST_TO_ADDR
// class_horse := 21 ;
7208: LD_ADDR_EXP 36
7212: PUSH
7213: LD_INT 21
7215: ST_TO_ADDR
// end ;
7216: LD_VAR 0 1
7220: RET
// every 1 do
7221: GO 7223
7223: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7224: CALL 7061 0 0
7228: END
// every 0 0$1 do
7229: GO 7231
7231: DISABLE
// begin enable ;
7232: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7233: LD_STRING updateTimer(
7235: PUSH
7236: LD_OWVAR 1
7240: STR
7241: PUSH
7242: LD_STRING );
7244: STR
7245: PPUSH
7246: CALL_OW 559
// end ;
7250: END
// on MapStart ( p ) do begin if streamModeActive then
7251: LD_EXP 37
7255: IFFALSE 7264
// DefineStreamItems ( true ) ;
7257: LD_INT 1
7259: PPUSH
7260: CALL 8912 0 1
// UpdateFactoryWaypoints ( ) ;
7264: CALL 22496 0 0
// end ;
7268: PPOPN 1
7270: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7271: LD_INT 0
7273: PPUSH
// if p2 = 100 then
7274: LD_VAR 0 2
7278: PUSH
7279: LD_INT 100
7281: EQUAL
7282: IFFALSE 8285
// begin if not StreamModeActive then
7284: LD_EXP 37
7288: NOT
7289: IFFALSE 7299
// StreamModeActive := true ;
7291: LD_ADDR_EXP 37
7295: PUSH
7296: LD_INT 1
7298: ST_TO_ADDR
// if p3 = 0 then
7299: LD_VAR 0 3
7303: PUSH
7304: LD_INT 0
7306: EQUAL
7307: IFFALSE 7313
// InitStreamMode ;
7309: CALL 8448 0 0
// if p3 = 1 then
7313: LD_VAR 0 3
7317: PUSH
7318: LD_INT 1
7320: EQUAL
7321: IFFALSE 7331
// sRocket := true ;
7323: LD_ADDR_EXP 42
7327: PUSH
7328: LD_INT 1
7330: ST_TO_ADDR
// if p3 = 2 then
7331: LD_VAR 0 3
7335: PUSH
7336: LD_INT 2
7338: EQUAL
7339: IFFALSE 7349
// sSpeed := true ;
7341: LD_ADDR_EXP 41
7345: PUSH
7346: LD_INT 1
7348: ST_TO_ADDR
// if p3 = 3 then
7349: LD_VAR 0 3
7353: PUSH
7354: LD_INT 3
7356: EQUAL
7357: IFFALSE 7367
// sEngine := true ;
7359: LD_ADDR_EXP 43
7363: PUSH
7364: LD_INT 1
7366: ST_TO_ADDR
// if p3 = 4 then
7367: LD_VAR 0 3
7371: PUSH
7372: LD_INT 4
7374: EQUAL
7375: IFFALSE 7385
// sSpec := true ;
7377: LD_ADDR_EXP 40
7381: PUSH
7382: LD_INT 1
7384: ST_TO_ADDR
// if p3 = 5 then
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 5
7392: EQUAL
7393: IFFALSE 7403
// sLevel := true ;
7395: LD_ADDR_EXP 44
7399: PUSH
7400: LD_INT 1
7402: ST_TO_ADDR
// if p3 = 6 then
7403: LD_VAR 0 3
7407: PUSH
7408: LD_INT 6
7410: EQUAL
7411: IFFALSE 7421
// sArmoury := true ;
7413: LD_ADDR_EXP 45
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// if p3 = 7 then
7421: LD_VAR 0 3
7425: PUSH
7426: LD_INT 7
7428: EQUAL
7429: IFFALSE 7439
// sRadar := true ;
7431: LD_ADDR_EXP 46
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// if p3 = 8 then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 8
7446: EQUAL
7447: IFFALSE 7457
// sBunker := true ;
7449: LD_ADDR_EXP 47
7453: PUSH
7454: LD_INT 1
7456: ST_TO_ADDR
// if p3 = 9 then
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 9
7464: EQUAL
7465: IFFALSE 7475
// sHack := true ;
7467: LD_ADDR_EXP 48
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// if p3 = 10 then
7475: LD_VAR 0 3
7479: PUSH
7480: LD_INT 10
7482: EQUAL
7483: IFFALSE 7493
// sFire := true ;
7485: LD_ADDR_EXP 49
7489: PUSH
7490: LD_INT 1
7492: ST_TO_ADDR
// if p3 = 11 then
7493: LD_VAR 0 3
7497: PUSH
7498: LD_INT 11
7500: EQUAL
7501: IFFALSE 7511
// sRefresh := true ;
7503: LD_ADDR_EXP 50
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// if p3 = 12 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 12
7518: EQUAL
7519: IFFALSE 7529
// sExp := true ;
7521: LD_ADDR_EXP 51
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 13 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 13
7536: EQUAL
7537: IFFALSE 7547
// sDepot := true ;
7539: LD_ADDR_EXP 52
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 14 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 14
7554: EQUAL
7555: IFFALSE 7565
// sFlag := true ;
7557: LD_ADDR_EXP 53
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 15 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 15
7572: EQUAL
7573: IFFALSE 7583
// sKamikadze := true ;
7575: LD_ADDR_EXP 61
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 16 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 16
7590: EQUAL
7591: IFFALSE 7601
// sTroll := true ;
7593: LD_ADDR_EXP 62
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 17 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 17
7608: EQUAL
7609: IFFALSE 7619
// sSlow := true ;
7611: LD_ADDR_EXP 63
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// if p3 = 18 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 18
7626: EQUAL
7627: IFFALSE 7637
// sLack := true ;
7629: LD_ADDR_EXP 64
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 19 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 19
7644: EQUAL
7645: IFFALSE 7655
// sTank := true ;
7647: LD_ADDR_EXP 66
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 20 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 20
7662: EQUAL
7663: IFFALSE 7673
// sRemote := true ;
7665: LD_ADDR_EXP 67
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 21 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 21
7680: EQUAL
7681: IFFALSE 7691
// sPowell := true ;
7683: LD_ADDR_EXP 68
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 22 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 22
7698: EQUAL
7699: IFFALSE 7709
// sTeleport := true ;
7701: LD_ADDR_EXP 71
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 23 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 23
7716: EQUAL
7717: IFFALSE 7727
// sOilTower := true ;
7719: LD_ADDR_EXP 73
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 24 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 24
7734: EQUAL
7735: IFFALSE 7745
// sShovel := true ;
7737: LD_ADDR_EXP 74
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 25 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 25
7752: EQUAL
7753: IFFALSE 7763
// sSheik := true ;
7755: LD_ADDR_EXP 75
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 26 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 26
7770: EQUAL
7771: IFFALSE 7781
// sEarthquake := true ;
7773: LD_ADDR_EXP 77
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 27 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 27
7788: EQUAL
7789: IFFALSE 7799
// sAI := true ;
7791: LD_ADDR_EXP 78
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 28 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 28
7806: EQUAL
7807: IFFALSE 7817
// sCargo := true ;
7809: LD_ADDR_EXP 81
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 29 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 29
7824: EQUAL
7825: IFFALSE 7835
// sDLaser := true ;
7827: LD_ADDR_EXP 82
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 30 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 30
7842: EQUAL
7843: IFFALSE 7853
// sExchange := true ;
7845: LD_ADDR_EXP 83
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 31 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 31
7860: EQUAL
7861: IFFALSE 7871
// sFac := true ;
7863: LD_ADDR_EXP 84
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 32 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 32
7878: EQUAL
7879: IFFALSE 7889
// sPower := true ;
7881: LD_ADDR_EXP 85
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 33 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 33
7896: EQUAL
7897: IFFALSE 7907
// sRandom := true ;
7899: LD_ADDR_EXP 86
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 34 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 34
7914: EQUAL
7915: IFFALSE 7925
// sShield := true ;
7917: LD_ADDR_EXP 87
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 35 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 35
7932: EQUAL
7933: IFFALSE 7943
// sTime := true ;
7935: LD_ADDR_EXP 88
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 36 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 36
7950: EQUAL
7951: IFFALSE 7961
// sTools := true ;
7953: LD_ADDR_EXP 89
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 101 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 101
7968: EQUAL
7969: IFFALSE 7979
// sSold := true ;
7971: LD_ADDR_EXP 54
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 102 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 102
7986: EQUAL
7987: IFFALSE 7997
// sDiff := true ;
7989: LD_ADDR_EXP 55
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// if p3 = 103 then
7997: LD_VAR 0 3
8001: PUSH
8002: LD_INT 103
8004: EQUAL
8005: IFFALSE 8015
// sFog := true ;
8007: LD_ADDR_EXP 58
8011: PUSH
8012: LD_INT 1
8014: ST_TO_ADDR
// if p3 = 104 then
8015: LD_VAR 0 3
8019: PUSH
8020: LD_INT 104
8022: EQUAL
8023: IFFALSE 8033
// sReset := true ;
8025: LD_ADDR_EXP 59
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// if p3 = 105 then
8033: LD_VAR 0 3
8037: PUSH
8038: LD_INT 105
8040: EQUAL
8041: IFFALSE 8051
// sSun := true ;
8043: LD_ADDR_EXP 60
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// if p3 = 106 then
8051: LD_VAR 0 3
8055: PUSH
8056: LD_INT 106
8058: EQUAL
8059: IFFALSE 8069
// sTiger := true ;
8061: LD_ADDR_EXP 56
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// if p3 = 107 then
8069: LD_VAR 0 3
8073: PUSH
8074: LD_INT 107
8076: EQUAL
8077: IFFALSE 8087
// sBomb := true ;
8079: LD_ADDR_EXP 57
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// if p3 = 108 then
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 108
8094: EQUAL
8095: IFFALSE 8105
// sWound := true ;
8097: LD_ADDR_EXP 65
8101: PUSH
8102: LD_INT 1
8104: ST_TO_ADDR
// if p3 = 109 then
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 109
8112: EQUAL
8113: IFFALSE 8123
// sBetray := true ;
8115: LD_ADDR_EXP 69
8119: PUSH
8120: LD_INT 1
8122: ST_TO_ADDR
// if p3 = 110 then
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 110
8130: EQUAL
8131: IFFALSE 8141
// sContamin := true ;
8133: LD_ADDR_EXP 70
8137: PUSH
8138: LD_INT 1
8140: ST_TO_ADDR
// if p3 = 111 then
8141: LD_VAR 0 3
8145: PUSH
8146: LD_INT 111
8148: EQUAL
8149: IFFALSE 8159
// sOil := true ;
8151: LD_ADDR_EXP 72
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// if p3 = 112 then
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 112
8166: EQUAL
8167: IFFALSE 8177
// sStu := true ;
8169: LD_ADDR_EXP 76
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// if p3 = 113 then
8177: LD_VAR 0 3
8181: PUSH
8182: LD_INT 113
8184: EQUAL
8185: IFFALSE 8195
// sBazooka := true ;
8187: LD_ADDR_EXP 79
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// if p3 = 114 then
8195: LD_VAR 0 3
8199: PUSH
8200: LD_INT 114
8202: EQUAL
8203: IFFALSE 8213
// sMortar := true ;
8205: LD_ADDR_EXP 80
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// if p3 = 115 then
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 115
8220: EQUAL
8221: IFFALSE 8231
// sRanger := true ;
8223: LD_ADDR_EXP 90
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// if p3 = 116 then
8231: LD_VAR 0 3
8235: PUSH
8236: LD_INT 116
8238: EQUAL
8239: IFFALSE 8249
// sComputer := true ;
8241: LD_ADDR_EXP 91
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// if p3 = 117 then
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 117
8256: EQUAL
8257: IFFALSE 8267
// s30 := true ;
8259: LD_ADDR_EXP 92
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// if p3 = 118 then
8267: LD_VAR 0 3
8271: PUSH
8272: LD_INT 118
8274: EQUAL
8275: IFFALSE 8285
// s60 := true ;
8277: LD_ADDR_EXP 93
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// end ; if p2 = 101 then
8285: LD_VAR 0 2
8289: PUSH
8290: LD_INT 101
8292: EQUAL
8293: IFFALSE 8421
// begin case p3 of 1 :
8295: LD_VAR 0 3
8299: PUSH
8300: LD_INT 1
8302: DOUBLE
8303: EQUAL
8304: IFTRUE 8308
8306: GO 8315
8308: POP
// hHackUnlimitedResources ; 2 :
8309: CALL 20519 0 0
8313: GO 8421
8315: LD_INT 2
8317: DOUBLE
8318: EQUAL
8319: IFTRUE 8323
8321: GO 8330
8323: POP
// hHackSetLevel10 ; 3 :
8324: CALL 20652 0 0
8328: GO 8421
8330: LD_INT 3
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8338
8336: GO 8345
8338: POP
// hHackSetLevel10YourUnits ; 4 :
8339: CALL 20737 0 0
8343: GO 8421
8345: LD_INT 4
8347: DOUBLE
8348: EQUAL
8349: IFTRUE 8353
8351: GO 8360
8353: POP
// hHackInvincible ; 5 :
8354: CALL 21185 0 0
8358: GO 8421
8360: LD_INT 5
8362: DOUBLE
8363: EQUAL
8364: IFTRUE 8368
8366: GO 8375
8368: POP
// hHackInvisible ; 6 :
8369: CALL 21296 0 0
8373: GO 8421
8375: LD_INT 6
8377: DOUBLE
8378: EQUAL
8379: IFTRUE 8383
8381: GO 8390
8383: POP
// hHackChangeYourSide ; 7 :
8384: CALL 21353 0 0
8388: GO 8421
8390: LD_INT 7
8392: DOUBLE
8393: EQUAL
8394: IFTRUE 8398
8396: GO 8405
8398: POP
// hHackChangeUnitSide ; 8 :
8399: CALL 21395 0 0
8403: GO 8421
8405: LD_INT 8
8407: DOUBLE
8408: EQUAL
8409: IFTRUE 8413
8411: GO 8420
8413: POP
// hHackFog ; end ;
8414: CALL 21496 0 0
8418: GO 8421
8420: POP
// end ; end ;
8421: LD_VAR 0 7
8425: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8426: GO 8428
8428: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8429: LD_STRING initStreamRollete();
8431: PPUSH
8432: CALL_OW 559
// InitStreamMode ;
8436: CALL 8448 0 0
// DefineStreamItems ( false ) ;
8440: LD_INT 0
8442: PPUSH
8443: CALL 8912 0 1
// end ;
8447: END
// function InitStreamMode ; begin
8448: LD_INT 0
8450: PPUSH
// streamModeActive := false ;
8451: LD_ADDR_EXP 37
8455: PUSH
8456: LD_INT 0
8458: ST_TO_ADDR
// normalCounter := 36 ;
8459: LD_ADDR_EXP 38
8463: PUSH
8464: LD_INT 36
8466: ST_TO_ADDR
// hardcoreCounter := 18 ;
8467: LD_ADDR_EXP 39
8471: PUSH
8472: LD_INT 18
8474: ST_TO_ADDR
// sRocket := false ;
8475: LD_ADDR_EXP 42
8479: PUSH
8480: LD_INT 0
8482: ST_TO_ADDR
// sSpeed := false ;
8483: LD_ADDR_EXP 41
8487: PUSH
8488: LD_INT 0
8490: ST_TO_ADDR
// sEngine := false ;
8491: LD_ADDR_EXP 43
8495: PUSH
8496: LD_INT 0
8498: ST_TO_ADDR
// sSpec := false ;
8499: LD_ADDR_EXP 40
8503: PUSH
8504: LD_INT 0
8506: ST_TO_ADDR
// sLevel := false ;
8507: LD_ADDR_EXP 44
8511: PUSH
8512: LD_INT 0
8514: ST_TO_ADDR
// sArmoury := false ;
8515: LD_ADDR_EXP 45
8519: PUSH
8520: LD_INT 0
8522: ST_TO_ADDR
// sRadar := false ;
8523: LD_ADDR_EXP 46
8527: PUSH
8528: LD_INT 0
8530: ST_TO_ADDR
// sBunker := false ;
8531: LD_ADDR_EXP 47
8535: PUSH
8536: LD_INT 0
8538: ST_TO_ADDR
// sHack := false ;
8539: LD_ADDR_EXP 48
8543: PUSH
8544: LD_INT 0
8546: ST_TO_ADDR
// sFire := false ;
8547: LD_ADDR_EXP 49
8551: PUSH
8552: LD_INT 0
8554: ST_TO_ADDR
// sRefresh := false ;
8555: LD_ADDR_EXP 50
8559: PUSH
8560: LD_INT 0
8562: ST_TO_ADDR
// sExp := false ;
8563: LD_ADDR_EXP 51
8567: PUSH
8568: LD_INT 0
8570: ST_TO_ADDR
// sDepot := false ;
8571: LD_ADDR_EXP 52
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
// sFlag := false ;
8579: LD_ADDR_EXP 53
8583: PUSH
8584: LD_INT 0
8586: ST_TO_ADDR
// sKamikadze := false ;
8587: LD_ADDR_EXP 61
8591: PUSH
8592: LD_INT 0
8594: ST_TO_ADDR
// sTroll := false ;
8595: LD_ADDR_EXP 62
8599: PUSH
8600: LD_INT 0
8602: ST_TO_ADDR
// sSlow := false ;
8603: LD_ADDR_EXP 63
8607: PUSH
8608: LD_INT 0
8610: ST_TO_ADDR
// sLack := false ;
8611: LD_ADDR_EXP 64
8615: PUSH
8616: LD_INT 0
8618: ST_TO_ADDR
// sTank := false ;
8619: LD_ADDR_EXP 66
8623: PUSH
8624: LD_INT 0
8626: ST_TO_ADDR
// sRemote := false ;
8627: LD_ADDR_EXP 67
8631: PUSH
8632: LD_INT 0
8634: ST_TO_ADDR
// sPowell := false ;
8635: LD_ADDR_EXP 68
8639: PUSH
8640: LD_INT 0
8642: ST_TO_ADDR
// sTeleport := false ;
8643: LD_ADDR_EXP 71
8647: PUSH
8648: LD_INT 0
8650: ST_TO_ADDR
// sOilTower := false ;
8651: LD_ADDR_EXP 73
8655: PUSH
8656: LD_INT 0
8658: ST_TO_ADDR
// sShovel := false ;
8659: LD_ADDR_EXP 74
8663: PUSH
8664: LD_INT 0
8666: ST_TO_ADDR
// sSheik := false ;
8667: LD_ADDR_EXP 75
8671: PUSH
8672: LD_INT 0
8674: ST_TO_ADDR
// sEarthquake := false ;
8675: LD_ADDR_EXP 77
8679: PUSH
8680: LD_INT 0
8682: ST_TO_ADDR
// sAI := false ;
8683: LD_ADDR_EXP 78
8687: PUSH
8688: LD_INT 0
8690: ST_TO_ADDR
// sCargo := false ;
8691: LD_ADDR_EXP 81
8695: PUSH
8696: LD_INT 0
8698: ST_TO_ADDR
// sDLaser := false ;
8699: LD_ADDR_EXP 82
8703: PUSH
8704: LD_INT 0
8706: ST_TO_ADDR
// sExchange := false ;
8707: LD_ADDR_EXP 83
8711: PUSH
8712: LD_INT 0
8714: ST_TO_ADDR
// sFac := false ;
8715: LD_ADDR_EXP 84
8719: PUSH
8720: LD_INT 0
8722: ST_TO_ADDR
// sPower := false ;
8723: LD_ADDR_EXP 85
8727: PUSH
8728: LD_INT 0
8730: ST_TO_ADDR
// sRandom := false ;
8731: LD_ADDR_EXP 86
8735: PUSH
8736: LD_INT 0
8738: ST_TO_ADDR
// sShield := false ;
8739: LD_ADDR_EXP 87
8743: PUSH
8744: LD_INT 0
8746: ST_TO_ADDR
// sTime := false ;
8747: LD_ADDR_EXP 88
8751: PUSH
8752: LD_INT 0
8754: ST_TO_ADDR
// sTools := false ;
8755: LD_ADDR_EXP 89
8759: PUSH
8760: LD_INT 0
8762: ST_TO_ADDR
// sSold := false ;
8763: LD_ADDR_EXP 54
8767: PUSH
8768: LD_INT 0
8770: ST_TO_ADDR
// sDiff := false ;
8771: LD_ADDR_EXP 55
8775: PUSH
8776: LD_INT 0
8778: ST_TO_ADDR
// sFog := false ;
8779: LD_ADDR_EXP 58
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// sReset := false ;
8787: LD_ADDR_EXP 59
8791: PUSH
8792: LD_INT 0
8794: ST_TO_ADDR
// sSun := false ;
8795: LD_ADDR_EXP 60
8799: PUSH
8800: LD_INT 0
8802: ST_TO_ADDR
// sTiger := false ;
8803: LD_ADDR_EXP 56
8807: PUSH
8808: LD_INT 0
8810: ST_TO_ADDR
// sBomb := false ;
8811: LD_ADDR_EXP 57
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// sWound := false ;
8819: LD_ADDR_EXP 65
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// sBetray := false ;
8827: LD_ADDR_EXP 69
8831: PUSH
8832: LD_INT 0
8834: ST_TO_ADDR
// sContamin := false ;
8835: LD_ADDR_EXP 70
8839: PUSH
8840: LD_INT 0
8842: ST_TO_ADDR
// sOil := false ;
8843: LD_ADDR_EXP 72
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// sStu := false ;
8851: LD_ADDR_EXP 76
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// sBazooka := false ;
8859: LD_ADDR_EXP 79
8863: PUSH
8864: LD_INT 0
8866: ST_TO_ADDR
// sMortar := false ;
8867: LD_ADDR_EXP 80
8871: PUSH
8872: LD_INT 0
8874: ST_TO_ADDR
// sRanger := false ;
8875: LD_ADDR_EXP 90
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// sComputer := false ;
8883: LD_ADDR_EXP 91
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// s30 := false ;
8891: LD_ADDR_EXP 92
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// s60 := false ;
8899: LD_ADDR_EXP 93
8903: PUSH
8904: LD_INT 0
8906: ST_TO_ADDR
// end ;
8907: LD_VAR 0 1
8911: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8912: LD_INT 0
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
8920: PPUSH
// result := [ ] ;
8921: LD_ADDR_VAR 0 2
8925: PUSH
8926: EMPTY
8927: ST_TO_ADDR
// if campaign_id = 1 then
8928: LD_OWVAR 69
8932: PUSH
8933: LD_INT 1
8935: EQUAL
8936: IFFALSE 12102
// begin case mission_number of 1 :
8938: LD_OWVAR 70
8942: PUSH
8943: LD_INT 1
8945: DOUBLE
8946: EQUAL
8947: IFTRUE 8951
8949: GO 9027
8951: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8952: LD_ADDR_VAR 0 2
8956: PUSH
8957: LD_INT 2
8959: PUSH
8960: LD_INT 4
8962: PUSH
8963: LD_INT 11
8965: PUSH
8966: LD_INT 12
8968: PUSH
8969: LD_INT 15
8971: PUSH
8972: LD_INT 16
8974: PUSH
8975: LD_INT 22
8977: PUSH
8978: LD_INT 23
8980: PUSH
8981: LD_INT 26
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 101
8997: PUSH
8998: LD_INT 102
9000: PUSH
9001: LD_INT 106
9003: PUSH
9004: LD_INT 116
9006: PUSH
9007: LD_INT 117
9009: PUSH
9010: LD_INT 118
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: ST_TO_ADDR
9025: GO 12100
9027: LD_INT 2
9029: DOUBLE
9030: EQUAL
9031: IFTRUE 9035
9033: GO 9119
9035: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9036: LD_ADDR_VAR 0 2
9040: PUSH
9041: LD_INT 2
9043: PUSH
9044: LD_INT 4
9046: PUSH
9047: LD_INT 11
9049: PUSH
9050: LD_INT 12
9052: PUSH
9053: LD_INT 15
9055: PUSH
9056: LD_INT 16
9058: PUSH
9059: LD_INT 22
9061: PUSH
9062: LD_INT 23
9064: PUSH
9065: LD_INT 26
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 101
9081: PUSH
9082: LD_INT 102
9084: PUSH
9085: LD_INT 105
9087: PUSH
9088: LD_INT 106
9090: PUSH
9091: LD_INT 108
9093: PUSH
9094: LD_INT 116
9096: PUSH
9097: LD_INT 117
9099: PUSH
9100: LD_INT 118
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: ST_TO_ADDR
9117: GO 12100
9119: LD_INT 3
9121: DOUBLE
9122: EQUAL
9123: IFTRUE 9127
9125: GO 9215
9127: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9128: LD_ADDR_VAR 0 2
9132: PUSH
9133: LD_INT 2
9135: PUSH
9136: LD_INT 4
9138: PUSH
9139: LD_INT 5
9141: PUSH
9142: LD_INT 11
9144: PUSH
9145: LD_INT 12
9147: PUSH
9148: LD_INT 15
9150: PUSH
9151: LD_INT 16
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_INT 26
9159: PUSH
9160: LD_INT 36
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 101
9177: PUSH
9178: LD_INT 102
9180: PUSH
9181: LD_INT 105
9183: PUSH
9184: LD_INT 106
9186: PUSH
9187: LD_INT 108
9189: PUSH
9190: LD_INT 116
9192: PUSH
9193: LD_INT 117
9195: PUSH
9196: LD_INT 118
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: ST_TO_ADDR
9213: GO 12100
9215: LD_INT 4
9217: DOUBLE
9218: EQUAL
9219: IFTRUE 9223
9221: GO 9319
9223: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9224: LD_ADDR_VAR 0 2
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: LD_INT 4
9234: PUSH
9235: LD_INT 5
9237: PUSH
9238: LD_INT 8
9240: PUSH
9241: LD_INT 11
9243: PUSH
9244: LD_INT 12
9246: PUSH
9247: LD_INT 15
9249: PUSH
9250: LD_INT 16
9252: PUSH
9253: LD_INT 22
9255: PUSH
9256: LD_INT 23
9258: PUSH
9259: LD_INT 26
9261: PUSH
9262: LD_INT 36
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 101
9281: PUSH
9282: LD_INT 102
9284: PUSH
9285: LD_INT 105
9287: PUSH
9288: LD_INT 106
9290: PUSH
9291: LD_INT 108
9293: PUSH
9294: LD_INT 116
9296: PUSH
9297: LD_INT 117
9299: PUSH
9300: LD_INT 118
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: ST_TO_ADDR
9317: GO 12100
9319: LD_INT 5
9321: DOUBLE
9322: EQUAL
9323: IFTRUE 9327
9325: GO 9439
9327: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9328: LD_ADDR_VAR 0 2
9332: PUSH
9333: LD_INT 2
9335: PUSH
9336: LD_INT 4
9338: PUSH
9339: LD_INT 5
9341: PUSH
9342: LD_INT 6
9344: PUSH
9345: LD_INT 8
9347: PUSH
9348: LD_INT 11
9350: PUSH
9351: LD_INT 12
9353: PUSH
9354: LD_INT 15
9356: PUSH
9357: LD_INT 16
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_INT 23
9365: PUSH
9366: LD_INT 25
9368: PUSH
9369: LD_INT 26
9371: PUSH
9372: LD_INT 36
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 101
9393: PUSH
9394: LD_INT 102
9396: PUSH
9397: LD_INT 105
9399: PUSH
9400: LD_INT 106
9402: PUSH
9403: LD_INT 108
9405: PUSH
9406: LD_INT 109
9408: PUSH
9409: LD_INT 112
9411: PUSH
9412: LD_INT 116
9414: PUSH
9415: LD_INT 117
9417: PUSH
9418: LD_INT 118
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: ST_TO_ADDR
9437: GO 12100
9439: LD_INT 6
9441: DOUBLE
9442: EQUAL
9443: IFTRUE 9447
9445: GO 9579
9447: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9448: LD_ADDR_VAR 0 2
9452: PUSH
9453: LD_INT 2
9455: PUSH
9456: LD_INT 4
9458: PUSH
9459: LD_INT 5
9461: PUSH
9462: LD_INT 6
9464: PUSH
9465: LD_INT 8
9467: PUSH
9468: LD_INT 11
9470: PUSH
9471: LD_INT 12
9473: PUSH
9474: LD_INT 15
9476: PUSH
9477: LD_INT 16
9479: PUSH
9480: LD_INT 20
9482: PUSH
9483: LD_INT 21
9485: PUSH
9486: LD_INT 22
9488: PUSH
9489: LD_INT 23
9491: PUSH
9492: LD_INT 25
9494: PUSH
9495: LD_INT 26
9497: PUSH
9498: LD_INT 30
9500: PUSH
9501: LD_INT 31
9503: PUSH
9504: LD_INT 32
9506: PUSH
9507: LD_INT 36
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 101
9533: PUSH
9534: LD_INT 102
9536: PUSH
9537: LD_INT 105
9539: PUSH
9540: LD_INT 106
9542: PUSH
9543: LD_INT 108
9545: PUSH
9546: LD_INT 109
9548: PUSH
9549: LD_INT 112
9551: PUSH
9552: LD_INT 116
9554: PUSH
9555: LD_INT 117
9557: PUSH
9558: LD_INT 118
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: ST_TO_ADDR
9577: GO 12100
9579: LD_INT 7
9581: DOUBLE
9582: EQUAL
9583: IFTRUE 9587
9585: GO 9699
9587: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9588: LD_ADDR_VAR 0 2
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: LD_INT 4
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: LD_INT 7
9604: PUSH
9605: LD_INT 11
9607: PUSH
9608: LD_INT 12
9610: PUSH
9611: LD_INT 15
9613: PUSH
9614: LD_INT 16
9616: PUSH
9617: LD_INT 20
9619: PUSH
9620: LD_INT 21
9622: PUSH
9623: LD_INT 22
9625: PUSH
9626: LD_INT 23
9628: PUSH
9629: LD_INT 25
9631: PUSH
9632: LD_INT 26
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 101
9653: PUSH
9654: LD_INT 102
9656: PUSH
9657: LD_INT 103
9659: PUSH
9660: LD_INT 105
9662: PUSH
9663: LD_INT 106
9665: PUSH
9666: LD_INT 108
9668: PUSH
9669: LD_INT 112
9671: PUSH
9672: LD_INT 116
9674: PUSH
9675: LD_INT 117
9677: PUSH
9678: LD_INT 118
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: ST_TO_ADDR
9697: GO 12100
9699: LD_INT 8
9701: DOUBLE
9702: EQUAL
9703: IFTRUE 9707
9705: GO 9847
9707: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9708: LD_ADDR_VAR 0 2
9712: PUSH
9713: LD_INT 2
9715: PUSH
9716: LD_INT 4
9718: PUSH
9719: LD_INT 5
9721: PUSH
9722: LD_INT 6
9724: PUSH
9725: LD_INT 7
9727: PUSH
9728: LD_INT 8
9730: PUSH
9731: LD_INT 11
9733: PUSH
9734: LD_INT 12
9736: PUSH
9737: LD_INT 15
9739: PUSH
9740: LD_INT 16
9742: PUSH
9743: LD_INT 20
9745: PUSH
9746: LD_INT 21
9748: PUSH
9749: LD_INT 22
9751: PUSH
9752: LD_INT 23
9754: PUSH
9755: LD_INT 25
9757: PUSH
9758: LD_INT 26
9760: PUSH
9761: LD_INT 30
9763: PUSH
9764: LD_INT 31
9766: PUSH
9767: LD_INT 32
9769: PUSH
9770: LD_INT 36
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 101
9797: PUSH
9798: LD_INT 102
9800: PUSH
9801: LD_INT 103
9803: PUSH
9804: LD_INT 105
9806: PUSH
9807: LD_INT 106
9809: PUSH
9810: LD_INT 108
9812: PUSH
9813: LD_INT 109
9815: PUSH
9816: LD_INT 112
9818: PUSH
9819: LD_INT 116
9821: PUSH
9822: LD_INT 117
9824: PUSH
9825: LD_INT 118
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: ST_TO_ADDR
9845: GO 12100
9847: LD_INT 9
9849: DOUBLE
9850: EQUAL
9851: IFTRUE 9855
9853: GO 10003
9855: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9856: LD_ADDR_VAR 0 2
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: LD_INT 4
9866: PUSH
9867: LD_INT 5
9869: PUSH
9870: LD_INT 6
9872: PUSH
9873: LD_INT 7
9875: PUSH
9876: LD_INT 8
9878: PUSH
9879: LD_INT 11
9881: PUSH
9882: LD_INT 12
9884: PUSH
9885: LD_INT 15
9887: PUSH
9888: LD_INT 16
9890: PUSH
9891: LD_INT 20
9893: PUSH
9894: LD_INT 21
9896: PUSH
9897: LD_INT 22
9899: PUSH
9900: LD_INT 23
9902: PUSH
9903: LD_INT 25
9905: PUSH
9906: LD_INT 26
9908: PUSH
9909: LD_INT 28
9911: PUSH
9912: LD_INT 30
9914: PUSH
9915: LD_INT 31
9917: PUSH
9918: LD_INT 32
9920: PUSH
9921: LD_INT 36
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 101
9949: PUSH
9950: LD_INT 102
9952: PUSH
9953: LD_INT 103
9955: PUSH
9956: LD_INT 105
9958: PUSH
9959: LD_INT 106
9961: PUSH
9962: LD_INT 108
9964: PUSH
9965: LD_INT 109
9967: PUSH
9968: LD_INT 112
9970: PUSH
9971: LD_INT 114
9973: PUSH
9974: LD_INT 116
9976: PUSH
9977: LD_INT 117
9979: PUSH
9980: LD_INT 118
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: ST_TO_ADDR
10001: GO 12100
10003: LD_INT 10
10005: DOUBLE
10006: EQUAL
10007: IFTRUE 10011
10009: GO 10207
10011: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10012: LD_ADDR_VAR 0 2
10016: PUSH
10017: LD_INT 2
10019: PUSH
10020: LD_INT 4
10022: PUSH
10023: LD_INT 5
10025: PUSH
10026: LD_INT 6
10028: PUSH
10029: LD_INT 7
10031: PUSH
10032: LD_INT 8
10034: PUSH
10035: LD_INT 9
10037: PUSH
10038: LD_INT 10
10040: PUSH
10041: LD_INT 11
10043: PUSH
10044: LD_INT 12
10046: PUSH
10047: LD_INT 13
10049: PUSH
10050: LD_INT 14
10052: PUSH
10053: LD_INT 15
10055: PUSH
10056: LD_INT 16
10058: PUSH
10059: LD_INT 17
10061: PUSH
10062: LD_INT 18
10064: PUSH
10065: LD_INT 19
10067: PUSH
10068: LD_INT 20
10070: PUSH
10071: LD_INT 21
10073: PUSH
10074: LD_INT 22
10076: PUSH
10077: LD_INT 23
10079: PUSH
10080: LD_INT 24
10082: PUSH
10083: LD_INT 25
10085: PUSH
10086: LD_INT 26
10088: PUSH
10089: LD_INT 28
10091: PUSH
10092: LD_INT 30
10094: PUSH
10095: LD_INT 31
10097: PUSH
10098: LD_INT 32
10100: PUSH
10101: LD_INT 36
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 101
10137: PUSH
10138: LD_INT 102
10140: PUSH
10141: LD_INT 103
10143: PUSH
10144: LD_INT 104
10146: PUSH
10147: LD_INT 105
10149: PUSH
10150: LD_INT 106
10152: PUSH
10153: LD_INT 107
10155: PUSH
10156: LD_INT 108
10158: PUSH
10159: LD_INT 109
10161: PUSH
10162: LD_INT 110
10164: PUSH
10165: LD_INT 111
10167: PUSH
10168: LD_INT 112
10170: PUSH
10171: LD_INT 114
10173: PUSH
10174: LD_INT 116
10176: PUSH
10177: LD_INT 117
10179: PUSH
10180: LD_INT 118
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: ST_TO_ADDR
10205: GO 12100
10207: LD_INT 11
10209: DOUBLE
10210: EQUAL
10211: IFTRUE 10215
10213: GO 10419
10215: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10216: LD_ADDR_VAR 0 2
10220: PUSH
10221: LD_INT 2
10223: PUSH
10224: LD_INT 3
10226: PUSH
10227: LD_INT 4
10229: PUSH
10230: LD_INT 5
10232: PUSH
10233: LD_INT 6
10235: PUSH
10236: LD_INT 7
10238: PUSH
10239: LD_INT 8
10241: PUSH
10242: LD_INT 9
10244: PUSH
10245: LD_INT 10
10247: PUSH
10248: LD_INT 11
10250: PUSH
10251: LD_INT 12
10253: PUSH
10254: LD_INT 13
10256: PUSH
10257: LD_INT 14
10259: PUSH
10260: LD_INT 15
10262: PUSH
10263: LD_INT 16
10265: PUSH
10266: LD_INT 17
10268: PUSH
10269: LD_INT 18
10271: PUSH
10272: LD_INT 19
10274: PUSH
10275: LD_INT 20
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 23
10286: PUSH
10287: LD_INT 24
10289: PUSH
10290: LD_INT 25
10292: PUSH
10293: LD_INT 26
10295: PUSH
10296: LD_INT 28
10298: PUSH
10299: LD_INT 30
10301: PUSH
10302: LD_INT 31
10304: PUSH
10305: LD_INT 32
10307: PUSH
10308: LD_INT 34
10310: PUSH
10311: LD_INT 36
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 101
10349: PUSH
10350: LD_INT 102
10352: PUSH
10353: LD_INT 103
10355: PUSH
10356: LD_INT 104
10358: PUSH
10359: LD_INT 105
10361: PUSH
10362: LD_INT 106
10364: PUSH
10365: LD_INT 107
10367: PUSH
10368: LD_INT 108
10370: PUSH
10371: LD_INT 109
10373: PUSH
10374: LD_INT 110
10376: PUSH
10377: LD_INT 111
10379: PUSH
10380: LD_INT 112
10382: PUSH
10383: LD_INT 114
10385: PUSH
10386: LD_INT 116
10388: PUSH
10389: LD_INT 117
10391: PUSH
10392: LD_INT 118
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: ST_TO_ADDR
10417: GO 12100
10419: LD_INT 12
10421: DOUBLE
10422: EQUAL
10423: IFTRUE 10427
10425: GO 10647
10427: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10428: LD_ADDR_VAR 0 2
10432: PUSH
10433: LD_INT 1
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: LD_INT 3
10441: PUSH
10442: LD_INT 4
10444: PUSH
10445: LD_INT 5
10447: PUSH
10448: LD_INT 6
10450: PUSH
10451: LD_INT 7
10453: PUSH
10454: LD_INT 8
10456: PUSH
10457: LD_INT 9
10459: PUSH
10460: LD_INT 10
10462: PUSH
10463: LD_INT 11
10465: PUSH
10466: LD_INT 12
10468: PUSH
10469: LD_INT 13
10471: PUSH
10472: LD_INT 14
10474: PUSH
10475: LD_INT 15
10477: PUSH
10478: LD_INT 16
10480: PUSH
10481: LD_INT 17
10483: PUSH
10484: LD_INT 18
10486: PUSH
10487: LD_INT 19
10489: PUSH
10490: LD_INT 20
10492: PUSH
10493: LD_INT 21
10495: PUSH
10496: LD_INT 22
10498: PUSH
10499: LD_INT 23
10501: PUSH
10502: LD_INT 24
10504: PUSH
10505: LD_INT 25
10507: PUSH
10508: LD_INT 26
10510: PUSH
10511: LD_INT 27
10513: PUSH
10514: LD_INT 28
10516: PUSH
10517: LD_INT 30
10519: PUSH
10520: LD_INT 31
10522: PUSH
10523: LD_INT 32
10525: PUSH
10526: LD_INT 33
10528: PUSH
10529: LD_INT 34
10531: PUSH
10532: LD_INT 36
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 101
10573: PUSH
10574: LD_INT 102
10576: PUSH
10577: LD_INT 103
10579: PUSH
10580: LD_INT 104
10582: PUSH
10583: LD_INT 105
10585: PUSH
10586: LD_INT 106
10588: PUSH
10589: LD_INT 107
10591: PUSH
10592: LD_INT 108
10594: PUSH
10595: LD_INT 109
10597: PUSH
10598: LD_INT 110
10600: PUSH
10601: LD_INT 111
10603: PUSH
10604: LD_INT 112
10606: PUSH
10607: LD_INT 113
10609: PUSH
10610: LD_INT 114
10612: PUSH
10613: LD_INT 116
10615: PUSH
10616: LD_INT 117
10618: PUSH
10619: LD_INT 118
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: ST_TO_ADDR
10645: GO 12100
10647: LD_INT 13
10649: DOUBLE
10650: EQUAL
10651: IFTRUE 10655
10653: GO 10863
10655: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10656: LD_ADDR_VAR 0 2
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: LD_INT 3
10669: PUSH
10670: LD_INT 4
10672: PUSH
10673: LD_INT 5
10675: PUSH
10676: LD_INT 8
10678: PUSH
10679: LD_INT 9
10681: PUSH
10682: LD_INT 10
10684: PUSH
10685: LD_INT 11
10687: PUSH
10688: LD_INT 12
10690: PUSH
10691: LD_INT 14
10693: PUSH
10694: LD_INT 15
10696: PUSH
10697: LD_INT 16
10699: PUSH
10700: LD_INT 17
10702: PUSH
10703: LD_INT 18
10705: PUSH
10706: LD_INT 19
10708: PUSH
10709: LD_INT 20
10711: PUSH
10712: LD_INT 21
10714: PUSH
10715: LD_INT 22
10717: PUSH
10718: LD_INT 23
10720: PUSH
10721: LD_INT 24
10723: PUSH
10724: LD_INT 25
10726: PUSH
10727: LD_INT 26
10729: PUSH
10730: LD_INT 27
10732: PUSH
10733: LD_INT 28
10735: PUSH
10736: LD_INT 30
10738: PUSH
10739: LD_INT 31
10741: PUSH
10742: LD_INT 32
10744: PUSH
10745: LD_INT 33
10747: PUSH
10748: LD_INT 34
10750: PUSH
10751: LD_INT 36
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 101
10789: PUSH
10790: LD_INT 102
10792: PUSH
10793: LD_INT 103
10795: PUSH
10796: LD_INT 104
10798: PUSH
10799: LD_INT 105
10801: PUSH
10802: LD_INT 106
10804: PUSH
10805: LD_INT 107
10807: PUSH
10808: LD_INT 108
10810: PUSH
10811: LD_INT 109
10813: PUSH
10814: LD_INT 110
10816: PUSH
10817: LD_INT 111
10819: PUSH
10820: LD_INT 112
10822: PUSH
10823: LD_INT 113
10825: PUSH
10826: LD_INT 114
10828: PUSH
10829: LD_INT 116
10831: PUSH
10832: LD_INT 117
10834: PUSH
10835: LD_INT 118
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: ST_TO_ADDR
10861: GO 12100
10863: LD_INT 14
10865: DOUBLE
10866: EQUAL
10867: IFTRUE 10871
10869: GO 11095
10871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10872: LD_ADDR_VAR 0 2
10876: PUSH
10877: LD_INT 1
10879: PUSH
10880: LD_INT 2
10882: PUSH
10883: LD_INT 3
10885: PUSH
10886: LD_INT 4
10888: PUSH
10889: LD_INT 5
10891: PUSH
10892: LD_INT 6
10894: PUSH
10895: LD_INT 7
10897: PUSH
10898: LD_INT 8
10900: PUSH
10901: LD_INT 9
10903: PUSH
10904: LD_INT 10
10906: PUSH
10907: LD_INT 11
10909: PUSH
10910: LD_INT 12
10912: PUSH
10913: LD_INT 13
10915: PUSH
10916: LD_INT 14
10918: PUSH
10919: LD_INT 15
10921: PUSH
10922: LD_INT 16
10924: PUSH
10925: LD_INT 17
10927: PUSH
10928: LD_INT 18
10930: PUSH
10931: LD_INT 19
10933: PUSH
10934: LD_INT 20
10936: PUSH
10937: LD_INT 21
10939: PUSH
10940: LD_INT 22
10942: PUSH
10943: LD_INT 23
10945: PUSH
10946: LD_INT 24
10948: PUSH
10949: LD_INT 25
10951: PUSH
10952: LD_INT 26
10954: PUSH
10955: LD_INT 27
10957: PUSH
10958: LD_INT 28
10960: PUSH
10961: LD_INT 29
10963: PUSH
10964: LD_INT 30
10966: PUSH
10967: LD_INT 31
10969: PUSH
10970: LD_INT 32
10972: PUSH
10973: LD_INT 33
10975: PUSH
10976: LD_INT 34
10978: PUSH
10979: LD_INT 36
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 101
11021: PUSH
11022: LD_INT 102
11024: PUSH
11025: LD_INT 103
11027: PUSH
11028: LD_INT 104
11030: PUSH
11031: LD_INT 105
11033: PUSH
11034: LD_INT 106
11036: PUSH
11037: LD_INT 107
11039: PUSH
11040: LD_INT 108
11042: PUSH
11043: LD_INT 109
11045: PUSH
11046: LD_INT 110
11048: PUSH
11049: LD_INT 111
11051: PUSH
11052: LD_INT 112
11054: PUSH
11055: LD_INT 113
11057: PUSH
11058: LD_INT 114
11060: PUSH
11061: LD_INT 116
11063: PUSH
11064: LD_INT 117
11066: PUSH
11067: LD_INT 118
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: ST_TO_ADDR
11093: GO 12100
11095: LD_INT 15
11097: DOUBLE
11098: EQUAL
11099: IFTRUE 11103
11101: GO 11327
11103: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11104: LD_ADDR_VAR 0 2
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: LD_INT 2
11114: PUSH
11115: LD_INT 3
11117: PUSH
11118: LD_INT 4
11120: PUSH
11121: LD_INT 5
11123: PUSH
11124: LD_INT 6
11126: PUSH
11127: LD_INT 7
11129: PUSH
11130: LD_INT 8
11132: PUSH
11133: LD_INT 9
11135: PUSH
11136: LD_INT 10
11138: PUSH
11139: LD_INT 11
11141: PUSH
11142: LD_INT 12
11144: PUSH
11145: LD_INT 13
11147: PUSH
11148: LD_INT 14
11150: PUSH
11151: LD_INT 15
11153: PUSH
11154: LD_INT 16
11156: PUSH
11157: LD_INT 17
11159: PUSH
11160: LD_INT 18
11162: PUSH
11163: LD_INT 19
11165: PUSH
11166: LD_INT 20
11168: PUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_INT 23
11177: PUSH
11178: LD_INT 24
11180: PUSH
11181: LD_INT 25
11183: PUSH
11184: LD_INT 26
11186: PUSH
11187: LD_INT 27
11189: PUSH
11190: LD_INT 28
11192: PUSH
11193: LD_INT 29
11195: PUSH
11196: LD_INT 30
11198: PUSH
11199: LD_INT 31
11201: PUSH
11202: LD_INT 32
11204: PUSH
11205: LD_INT 33
11207: PUSH
11208: LD_INT 34
11210: PUSH
11211: LD_INT 36
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 101
11253: PUSH
11254: LD_INT 102
11256: PUSH
11257: LD_INT 103
11259: PUSH
11260: LD_INT 104
11262: PUSH
11263: LD_INT 105
11265: PUSH
11266: LD_INT 106
11268: PUSH
11269: LD_INT 107
11271: PUSH
11272: LD_INT 108
11274: PUSH
11275: LD_INT 109
11277: PUSH
11278: LD_INT 110
11280: PUSH
11281: LD_INT 111
11283: PUSH
11284: LD_INT 112
11286: PUSH
11287: LD_INT 113
11289: PUSH
11290: LD_INT 114
11292: PUSH
11293: LD_INT 116
11295: PUSH
11296: LD_INT 117
11298: PUSH
11299: LD_INT 118
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: ST_TO_ADDR
11325: GO 12100
11327: LD_INT 16
11329: DOUBLE
11330: EQUAL
11331: IFTRUE 11335
11333: GO 11471
11335: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11336: LD_ADDR_VAR 0 2
11340: PUSH
11341: LD_INT 2
11343: PUSH
11344: LD_INT 4
11346: PUSH
11347: LD_INT 5
11349: PUSH
11350: LD_INT 7
11352: PUSH
11353: LD_INT 11
11355: PUSH
11356: LD_INT 12
11358: PUSH
11359: LD_INT 15
11361: PUSH
11362: LD_INT 16
11364: PUSH
11365: LD_INT 20
11367: PUSH
11368: LD_INT 21
11370: PUSH
11371: LD_INT 22
11373: PUSH
11374: LD_INT 23
11376: PUSH
11377: LD_INT 25
11379: PUSH
11380: LD_INT 26
11382: PUSH
11383: LD_INT 30
11385: PUSH
11386: LD_INT 31
11388: PUSH
11389: LD_INT 32
11391: PUSH
11392: LD_INT 33
11394: PUSH
11395: LD_INT 34
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 101
11421: PUSH
11422: LD_INT 102
11424: PUSH
11425: LD_INT 103
11427: PUSH
11428: LD_INT 106
11430: PUSH
11431: LD_INT 108
11433: PUSH
11434: LD_INT 112
11436: PUSH
11437: LD_INT 113
11439: PUSH
11440: LD_INT 114
11442: PUSH
11443: LD_INT 116
11445: PUSH
11446: LD_INT 117
11448: PUSH
11449: LD_INT 118
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: ST_TO_ADDR
11469: GO 12100
11471: LD_INT 17
11473: DOUBLE
11474: EQUAL
11475: IFTRUE 11479
11477: GO 11703
11479: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11480: LD_ADDR_VAR 0 2
11484: PUSH
11485: LD_INT 1
11487: PUSH
11488: LD_INT 2
11490: PUSH
11491: LD_INT 3
11493: PUSH
11494: LD_INT 4
11496: PUSH
11497: LD_INT 5
11499: PUSH
11500: LD_INT 6
11502: PUSH
11503: LD_INT 7
11505: PUSH
11506: LD_INT 8
11508: PUSH
11509: LD_INT 9
11511: PUSH
11512: LD_INT 10
11514: PUSH
11515: LD_INT 11
11517: PUSH
11518: LD_INT 12
11520: PUSH
11521: LD_INT 13
11523: PUSH
11524: LD_INT 14
11526: PUSH
11527: LD_INT 15
11529: PUSH
11530: LD_INT 16
11532: PUSH
11533: LD_INT 17
11535: PUSH
11536: LD_INT 18
11538: PUSH
11539: LD_INT 19
11541: PUSH
11542: LD_INT 20
11544: PUSH
11545: LD_INT 21
11547: PUSH
11548: LD_INT 22
11550: PUSH
11551: LD_INT 23
11553: PUSH
11554: LD_INT 24
11556: PUSH
11557: LD_INT 25
11559: PUSH
11560: LD_INT 26
11562: PUSH
11563: LD_INT 27
11565: PUSH
11566: LD_INT 28
11568: PUSH
11569: LD_INT 29
11571: PUSH
11572: LD_INT 30
11574: PUSH
11575: LD_INT 31
11577: PUSH
11578: LD_INT 32
11580: PUSH
11581: LD_INT 33
11583: PUSH
11584: LD_INT 34
11586: PUSH
11587: LD_INT 36
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 101
11629: PUSH
11630: LD_INT 102
11632: PUSH
11633: LD_INT 103
11635: PUSH
11636: LD_INT 104
11638: PUSH
11639: LD_INT 105
11641: PUSH
11642: LD_INT 106
11644: PUSH
11645: LD_INT 107
11647: PUSH
11648: LD_INT 108
11650: PUSH
11651: LD_INT 109
11653: PUSH
11654: LD_INT 110
11656: PUSH
11657: LD_INT 111
11659: PUSH
11660: LD_INT 112
11662: PUSH
11663: LD_INT 113
11665: PUSH
11666: LD_INT 114
11668: PUSH
11669: LD_INT 116
11671: PUSH
11672: LD_INT 117
11674: PUSH
11675: LD_INT 118
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: ST_TO_ADDR
11701: GO 12100
11703: LD_INT 18
11705: DOUBLE
11706: EQUAL
11707: IFTRUE 11711
11709: GO 11859
11711: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11712: LD_ADDR_VAR 0 2
11716: PUSH
11717: LD_INT 2
11719: PUSH
11720: LD_INT 4
11722: PUSH
11723: LD_INT 5
11725: PUSH
11726: LD_INT 7
11728: PUSH
11729: LD_INT 11
11731: PUSH
11732: LD_INT 12
11734: PUSH
11735: LD_INT 15
11737: PUSH
11738: LD_INT 16
11740: PUSH
11741: LD_INT 20
11743: PUSH
11744: LD_INT 21
11746: PUSH
11747: LD_INT 22
11749: PUSH
11750: LD_INT 23
11752: PUSH
11753: LD_INT 25
11755: PUSH
11756: LD_INT 26
11758: PUSH
11759: LD_INT 30
11761: PUSH
11762: LD_INT 31
11764: PUSH
11765: LD_INT 32
11767: PUSH
11768: LD_INT 33
11770: PUSH
11771: LD_INT 34
11773: PUSH
11774: LD_INT 35
11776: PUSH
11777: LD_INT 36
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 101
11805: PUSH
11806: LD_INT 102
11808: PUSH
11809: LD_INT 103
11811: PUSH
11812: LD_INT 106
11814: PUSH
11815: LD_INT 108
11817: PUSH
11818: LD_INT 112
11820: PUSH
11821: LD_INT 113
11823: PUSH
11824: LD_INT 114
11826: PUSH
11827: LD_INT 115
11829: PUSH
11830: LD_INT 116
11832: PUSH
11833: LD_INT 117
11835: PUSH
11836: LD_INT 118
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: ST_TO_ADDR
11857: GO 12100
11859: LD_INT 19
11861: DOUBLE
11862: EQUAL
11863: IFTRUE 11867
11865: GO 12099
11867: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11868: LD_ADDR_VAR 0 2
11872: PUSH
11873: LD_INT 1
11875: PUSH
11876: LD_INT 2
11878: PUSH
11879: LD_INT 3
11881: PUSH
11882: LD_INT 4
11884: PUSH
11885: LD_INT 5
11887: PUSH
11888: LD_INT 6
11890: PUSH
11891: LD_INT 7
11893: PUSH
11894: LD_INT 8
11896: PUSH
11897: LD_INT 9
11899: PUSH
11900: LD_INT 10
11902: PUSH
11903: LD_INT 11
11905: PUSH
11906: LD_INT 12
11908: PUSH
11909: LD_INT 13
11911: PUSH
11912: LD_INT 14
11914: PUSH
11915: LD_INT 15
11917: PUSH
11918: LD_INT 16
11920: PUSH
11921: LD_INT 17
11923: PUSH
11924: LD_INT 18
11926: PUSH
11927: LD_INT 19
11929: PUSH
11930: LD_INT 20
11932: PUSH
11933: LD_INT 21
11935: PUSH
11936: LD_INT 22
11938: PUSH
11939: LD_INT 23
11941: PUSH
11942: LD_INT 24
11944: PUSH
11945: LD_INT 25
11947: PUSH
11948: LD_INT 26
11950: PUSH
11951: LD_INT 27
11953: PUSH
11954: LD_INT 28
11956: PUSH
11957: LD_INT 29
11959: PUSH
11960: LD_INT 30
11962: PUSH
11963: LD_INT 31
11965: PUSH
11966: LD_INT 32
11968: PUSH
11969: LD_INT 33
11971: PUSH
11972: LD_INT 34
11974: PUSH
11975: LD_INT 35
11977: PUSH
11978: LD_INT 36
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 101
12021: PUSH
12022: LD_INT 102
12024: PUSH
12025: LD_INT 103
12027: PUSH
12028: LD_INT 104
12030: PUSH
12031: LD_INT 105
12033: PUSH
12034: LD_INT 106
12036: PUSH
12037: LD_INT 107
12039: PUSH
12040: LD_INT 108
12042: PUSH
12043: LD_INT 109
12045: PUSH
12046: LD_INT 110
12048: PUSH
12049: LD_INT 111
12051: PUSH
12052: LD_INT 112
12054: PUSH
12055: LD_INT 113
12057: PUSH
12058: LD_INT 114
12060: PUSH
12061: LD_INT 115
12063: PUSH
12064: LD_INT 116
12066: PUSH
12067: LD_INT 117
12069: PUSH
12070: LD_INT 118
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: ST_TO_ADDR
12097: GO 12100
12099: POP
// end else
12100: GO 12331
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_INT 1
12109: PUSH
12110: LD_INT 2
12112: PUSH
12113: LD_INT 3
12115: PUSH
12116: LD_INT 4
12118: PUSH
12119: LD_INT 5
12121: PUSH
12122: LD_INT 6
12124: PUSH
12125: LD_INT 7
12127: PUSH
12128: LD_INT 8
12130: PUSH
12131: LD_INT 9
12133: PUSH
12134: LD_INT 10
12136: PUSH
12137: LD_INT 11
12139: PUSH
12140: LD_INT 12
12142: PUSH
12143: LD_INT 13
12145: PUSH
12146: LD_INT 14
12148: PUSH
12149: LD_INT 15
12151: PUSH
12152: LD_INT 16
12154: PUSH
12155: LD_INT 17
12157: PUSH
12158: LD_INT 18
12160: PUSH
12161: LD_INT 19
12163: PUSH
12164: LD_INT 20
12166: PUSH
12167: LD_INT 21
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: LD_INT 23
12175: PUSH
12176: LD_INT 24
12178: PUSH
12179: LD_INT 25
12181: PUSH
12182: LD_INT 26
12184: PUSH
12185: LD_INT 27
12187: PUSH
12188: LD_INT 28
12190: PUSH
12191: LD_INT 29
12193: PUSH
12194: LD_INT 30
12196: PUSH
12197: LD_INT 31
12199: PUSH
12200: LD_INT 32
12202: PUSH
12203: LD_INT 33
12205: PUSH
12206: LD_INT 34
12208: PUSH
12209: LD_INT 35
12211: PUSH
12212: LD_INT 36
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 101
12255: PUSH
12256: LD_INT 102
12258: PUSH
12259: LD_INT 103
12261: PUSH
12262: LD_INT 104
12264: PUSH
12265: LD_INT 105
12267: PUSH
12268: LD_INT 106
12270: PUSH
12271: LD_INT 107
12273: PUSH
12274: LD_INT 108
12276: PUSH
12277: LD_INT 109
12279: PUSH
12280: LD_INT 110
12282: PUSH
12283: LD_INT 111
12285: PUSH
12286: LD_INT 112
12288: PUSH
12289: LD_INT 113
12291: PUSH
12292: LD_INT 114
12294: PUSH
12295: LD_INT 115
12297: PUSH
12298: LD_INT 116
12300: PUSH
12301: LD_INT 117
12303: PUSH
12304: LD_INT 118
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: ST_TO_ADDR
// if result then
12331: LD_VAR 0 2
12335: IFFALSE 13121
// begin normal :=  ;
12337: LD_ADDR_VAR 0 5
12341: PUSH
12342: LD_STRING 
12344: ST_TO_ADDR
// hardcore :=  ;
12345: LD_ADDR_VAR 0 6
12349: PUSH
12350: LD_STRING 
12352: ST_TO_ADDR
// active :=  ;
12353: LD_ADDR_VAR 0 7
12357: PUSH
12358: LD_STRING 
12360: ST_TO_ADDR
// for i = 1 to normalCounter do
12361: LD_ADDR_VAR 0 8
12365: PUSH
12366: DOUBLE
12367: LD_INT 1
12369: DEC
12370: ST_TO_ADDR
12371: LD_EXP 38
12375: PUSH
12376: FOR_TO
12377: IFFALSE 12478
// begin tmp := 0 ;
12379: LD_ADDR_VAR 0 3
12383: PUSH
12384: LD_STRING 0
12386: ST_TO_ADDR
// if result [ 1 ] then
12387: LD_VAR 0 2
12391: PUSH
12392: LD_INT 1
12394: ARRAY
12395: IFFALSE 12460
// if result [ 1 ] [ 1 ] = i then
12397: LD_VAR 0 2
12401: PUSH
12402: LD_INT 1
12404: ARRAY
12405: PUSH
12406: LD_INT 1
12408: ARRAY
12409: PUSH
12410: LD_VAR 0 8
12414: EQUAL
12415: IFFALSE 12460
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12417: LD_ADDR_VAR 0 2
12421: PUSH
12422: LD_VAR 0 2
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: LD_VAR 0 2
12434: PUSH
12435: LD_INT 1
12437: ARRAY
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 3
12446: PPUSH
12447: CALL_OW 1
12451: ST_TO_ADDR
// tmp := 1 ;
12452: LD_ADDR_VAR 0 3
12456: PUSH
12457: LD_STRING 1
12459: ST_TO_ADDR
// end ; normal := normal & tmp ;
12460: LD_ADDR_VAR 0 5
12464: PUSH
12465: LD_VAR 0 5
12469: PUSH
12470: LD_VAR 0 3
12474: STR
12475: ST_TO_ADDR
// end ;
12476: GO 12376
12478: POP
12479: POP
// for i = 1 to hardcoreCounter do
12480: LD_ADDR_VAR 0 8
12484: PUSH
12485: DOUBLE
12486: LD_INT 1
12488: DEC
12489: ST_TO_ADDR
12490: LD_EXP 39
12494: PUSH
12495: FOR_TO
12496: IFFALSE 12601
// begin tmp := 0 ;
12498: LD_ADDR_VAR 0 3
12502: PUSH
12503: LD_STRING 0
12505: ST_TO_ADDR
// if result [ 2 ] then
12506: LD_VAR 0 2
12510: PUSH
12511: LD_INT 2
12513: ARRAY
12514: IFFALSE 12583
// if result [ 2 ] [ 1 ] = 100 + i then
12516: LD_VAR 0 2
12520: PUSH
12521: LD_INT 2
12523: ARRAY
12524: PUSH
12525: LD_INT 1
12527: ARRAY
12528: PUSH
12529: LD_INT 100
12531: PUSH
12532: LD_VAR 0 8
12536: PLUS
12537: EQUAL
12538: IFFALSE 12583
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12540: LD_ADDR_VAR 0 2
12544: PUSH
12545: LD_VAR 0 2
12549: PPUSH
12550: LD_INT 2
12552: PPUSH
12553: LD_VAR 0 2
12557: PUSH
12558: LD_INT 2
12560: ARRAY
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: CALL_OW 3
12569: PPUSH
12570: CALL_OW 1
12574: ST_TO_ADDR
// tmp := 1 ;
12575: LD_ADDR_VAR 0 3
12579: PUSH
12580: LD_STRING 1
12582: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12583: LD_ADDR_VAR 0 6
12587: PUSH
12588: LD_VAR 0 6
12592: PUSH
12593: LD_VAR 0 3
12597: STR
12598: ST_TO_ADDR
// end ;
12599: GO 12495
12601: POP
12602: POP
// if isGameLoad then
12603: LD_VAR 0 1
12607: IFFALSE 13082
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12609: LD_ADDR_VAR 0 4
12613: PUSH
12614: LD_EXP 42
12618: PUSH
12619: LD_EXP 41
12623: PUSH
12624: LD_EXP 43
12628: PUSH
12629: LD_EXP 40
12633: PUSH
12634: LD_EXP 44
12638: PUSH
12639: LD_EXP 45
12643: PUSH
12644: LD_EXP 46
12648: PUSH
12649: LD_EXP 47
12653: PUSH
12654: LD_EXP 48
12658: PUSH
12659: LD_EXP 49
12663: PUSH
12664: LD_EXP 50
12668: PUSH
12669: LD_EXP 51
12673: PUSH
12674: LD_EXP 52
12678: PUSH
12679: LD_EXP 53
12683: PUSH
12684: LD_EXP 61
12688: PUSH
12689: LD_EXP 62
12693: PUSH
12694: LD_EXP 63
12698: PUSH
12699: LD_EXP 64
12703: PUSH
12704: LD_EXP 66
12708: PUSH
12709: LD_EXP 67
12713: PUSH
12714: LD_EXP 68
12718: PUSH
12719: LD_EXP 71
12723: PUSH
12724: LD_EXP 73
12728: PUSH
12729: LD_EXP 74
12733: PUSH
12734: LD_EXP 75
12738: PUSH
12739: LD_EXP 77
12743: PUSH
12744: LD_EXP 78
12748: PUSH
12749: LD_EXP 81
12753: PUSH
12754: LD_EXP 82
12758: PUSH
12759: LD_EXP 83
12763: PUSH
12764: LD_EXP 84
12768: PUSH
12769: LD_EXP 85
12773: PUSH
12774: LD_EXP 86
12778: PUSH
12779: LD_EXP 87
12783: PUSH
12784: LD_EXP 88
12788: PUSH
12789: LD_EXP 89
12793: PUSH
12794: LD_EXP 54
12798: PUSH
12799: LD_EXP 55
12803: PUSH
12804: LD_EXP 58
12808: PUSH
12809: LD_EXP 59
12813: PUSH
12814: LD_EXP 60
12818: PUSH
12819: LD_EXP 56
12823: PUSH
12824: LD_EXP 57
12828: PUSH
12829: LD_EXP 65
12833: PUSH
12834: LD_EXP 69
12838: PUSH
12839: LD_EXP 70
12843: PUSH
12844: LD_EXP 72
12848: PUSH
12849: LD_EXP 76
12853: PUSH
12854: LD_EXP 79
12858: PUSH
12859: LD_EXP 80
12863: PUSH
12864: LD_EXP 90
12868: PUSH
12869: LD_EXP 91
12873: PUSH
12874: LD_EXP 92
12878: PUSH
12879: LD_EXP 93
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: ST_TO_ADDR
// tmp :=  ;
12940: LD_ADDR_VAR 0 3
12944: PUSH
12945: LD_STRING 
12947: ST_TO_ADDR
// for i = 1 to normalCounter do
12948: LD_ADDR_VAR 0 8
12952: PUSH
12953: DOUBLE
12954: LD_INT 1
12956: DEC
12957: ST_TO_ADDR
12958: LD_EXP 38
12962: PUSH
12963: FOR_TO
12964: IFFALSE 13000
// begin if flags [ i ] then
12966: LD_VAR 0 4
12970: PUSH
12971: LD_VAR 0 8
12975: ARRAY
12976: IFFALSE 12998
// tmp := tmp & i & ; ;
12978: LD_ADDR_VAR 0 3
12982: PUSH
12983: LD_VAR 0 3
12987: PUSH
12988: LD_VAR 0 8
12992: STR
12993: PUSH
12994: LD_STRING ;
12996: STR
12997: ST_TO_ADDR
// end ;
12998: GO 12963
13000: POP
13001: POP
// for i = 1 to hardcoreCounter do
13002: LD_ADDR_VAR 0 8
13006: PUSH
13007: DOUBLE
13008: LD_INT 1
13010: DEC
13011: ST_TO_ADDR
13012: LD_EXP 39
13016: PUSH
13017: FOR_TO
13018: IFFALSE 13064
// begin if flags [ normalCounter + i ] then
13020: LD_VAR 0 4
13024: PUSH
13025: LD_EXP 38
13029: PUSH
13030: LD_VAR 0 8
13034: PLUS
13035: ARRAY
13036: IFFALSE 13062
// tmp := tmp & ( 100 + i ) & ; ;
13038: LD_ADDR_VAR 0 3
13042: PUSH
13043: LD_VAR 0 3
13047: PUSH
13048: LD_INT 100
13050: PUSH
13051: LD_VAR 0 8
13055: PLUS
13056: STR
13057: PUSH
13058: LD_STRING ;
13060: STR
13061: ST_TO_ADDR
// end ;
13062: GO 13017
13064: POP
13065: POP
// if tmp then
13066: LD_VAR 0 3
13070: IFFALSE 13082
// active := tmp ;
13072: LD_ADDR_VAR 0 7
13076: PUSH
13077: LD_VAR 0 3
13081: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13082: LD_STRING getStreamItemsFromMission("
13084: PUSH
13085: LD_VAR 0 5
13089: STR
13090: PUSH
13091: LD_STRING ","
13093: STR
13094: PUSH
13095: LD_VAR 0 6
13099: STR
13100: PUSH
13101: LD_STRING ","
13103: STR
13104: PUSH
13105: LD_VAR 0 7
13109: STR
13110: PUSH
13111: LD_STRING ")
13113: STR
13114: PPUSH
13115: CALL_OW 559
// end else
13119: GO 13128
// ToLua ( getStreamItemsFromMission("","","") ) ;
13121: LD_STRING getStreamItemsFromMission("","","")
13123: PPUSH
13124: CALL_OW 559
// end ;
13128: LD_VAR 0 2
13132: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13133: LD_EXP 37
13137: PUSH
13138: LD_EXP 42
13142: AND
13143: IFFALSE 13267
13145: GO 13147
13147: DISABLE
13148: LD_INT 0
13150: PPUSH
13151: PPUSH
// begin enable ;
13152: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13153: LD_ADDR_VAR 0 2
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_OWVAR 2
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 2
13172: PUSH
13173: LD_INT 34
13175: PUSH
13176: LD_INT 7
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 34
13185: PUSH
13186: LD_INT 45
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 34
13195: PUSH
13196: LD_INT 28
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 34
13205: PUSH
13206: LD_INT 47
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: ST_TO_ADDR
// if not tmp then
13229: LD_VAR 0 2
13233: NOT
13234: IFFALSE 13238
// exit ;
13236: GO 13267
// for i in tmp do
13238: LD_ADDR_VAR 0 1
13242: PUSH
13243: LD_VAR 0 2
13247: PUSH
13248: FOR_IN
13249: IFFALSE 13265
// begin SetLives ( i , 0 ) ;
13251: LD_VAR 0 1
13255: PPUSH
13256: LD_INT 0
13258: PPUSH
13259: CALL_OW 234
// end ;
13263: GO 13248
13265: POP
13266: POP
// end ;
13267: PPOPN 2
13269: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13270: LD_EXP 37
13274: PUSH
13275: LD_EXP 43
13279: AND
13280: IFFALSE 13364
13282: GO 13284
13284: DISABLE
13285: LD_INT 0
13287: PPUSH
13288: PPUSH
// begin enable ;
13289: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13290: LD_ADDR_VAR 0 2
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_OWVAR 2
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 32
13309: PUSH
13310: LD_INT 3
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PPUSH
13321: CALL_OW 69
13325: ST_TO_ADDR
// if not tmp then
13326: LD_VAR 0 2
13330: NOT
13331: IFFALSE 13335
// exit ;
13333: GO 13364
// for i in tmp do
13335: LD_ADDR_VAR 0 1
13339: PUSH
13340: LD_VAR 0 2
13344: PUSH
13345: FOR_IN
13346: IFFALSE 13362
// begin SetLives ( i , 0 ) ;
13348: LD_VAR 0 1
13352: PPUSH
13353: LD_INT 0
13355: PPUSH
13356: CALL_OW 234
// end ;
13360: GO 13345
13362: POP
13363: POP
// end ;
13364: PPOPN 2
13366: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13367: LD_EXP 37
13371: PUSH
13372: LD_EXP 40
13376: AND
13377: IFFALSE 13470
13379: GO 13381
13381: DISABLE
13382: LD_INT 0
13384: PPUSH
// begin enable ;
13385: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13386: LD_ADDR_VAR 0 1
13390: PUSH
13391: LD_INT 22
13393: PUSH
13394: LD_OWVAR 2
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 5
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 25
13418: PUSH
13419: LD_INT 9
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 25
13428: PUSH
13429: LD_INT 8
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PPUSH
13446: CALL_OW 69
13450: PUSH
13451: FOR_IN
13452: IFFALSE 13468
// begin SetClass ( i , 1 ) ;
13454: LD_VAR 0 1
13458: PPUSH
13459: LD_INT 1
13461: PPUSH
13462: CALL_OW 336
// end ;
13466: GO 13451
13468: POP
13469: POP
// end ;
13470: PPOPN 1
13472: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13473: LD_EXP 37
13477: PUSH
13478: LD_EXP 41
13482: AND
13483: PUSH
13484: LD_OWVAR 65
13488: PUSH
13489: LD_INT 7
13491: LESS
13492: AND
13493: IFFALSE 13507
13495: GO 13497
13497: DISABLE
// begin enable ;
13498: ENABLE
// game_speed := 7 ;
13499: LD_ADDR_OWVAR 65
13503: PUSH
13504: LD_INT 7
13506: ST_TO_ADDR
// end ;
13507: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13508: LD_EXP 37
13512: PUSH
13513: LD_EXP 44
13517: AND
13518: IFFALSE 13720
13520: GO 13522
13522: DISABLE
13523: LD_INT 0
13525: PPUSH
13526: PPUSH
13527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13528: LD_ADDR_VAR 0 3
13532: PUSH
13533: LD_INT 81
13535: PUSH
13536: LD_OWVAR 2
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 21
13547: PUSH
13548: LD_INT 1
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PPUSH
13559: CALL_OW 69
13563: ST_TO_ADDR
// if not tmp then
13564: LD_VAR 0 3
13568: NOT
13569: IFFALSE 13573
// exit ;
13571: GO 13720
// if tmp > 5 then
13573: LD_VAR 0 3
13577: PUSH
13578: LD_INT 5
13580: GREATER
13581: IFFALSE 13593
// k := 5 else
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_INT 5
13590: ST_TO_ADDR
13591: GO 13603
// k := tmp ;
13593: LD_ADDR_VAR 0 2
13597: PUSH
13598: LD_VAR 0 3
13602: ST_TO_ADDR
// for i := 1 to k do
13603: LD_ADDR_VAR 0 1
13607: PUSH
13608: DOUBLE
13609: LD_INT 1
13611: DEC
13612: ST_TO_ADDR
13613: LD_VAR 0 2
13617: PUSH
13618: FOR_TO
13619: IFFALSE 13718
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13621: LD_VAR 0 3
13625: PUSH
13626: LD_VAR 0 1
13630: ARRAY
13631: PPUSH
13632: LD_VAR 0 1
13636: PUSH
13637: LD_INT 4
13639: MOD
13640: PUSH
13641: LD_INT 1
13643: PLUS
13644: PPUSH
13645: CALL_OW 259
13649: PUSH
13650: LD_INT 10
13652: LESS
13653: IFFALSE 13716
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13655: LD_VAR 0 3
13659: PUSH
13660: LD_VAR 0 1
13664: ARRAY
13665: PPUSH
13666: LD_VAR 0 1
13670: PUSH
13671: LD_INT 4
13673: MOD
13674: PUSH
13675: LD_INT 1
13677: PLUS
13678: PPUSH
13679: LD_VAR 0 3
13683: PUSH
13684: LD_VAR 0 1
13688: ARRAY
13689: PPUSH
13690: LD_VAR 0 1
13694: PUSH
13695: LD_INT 4
13697: MOD
13698: PUSH
13699: LD_INT 1
13701: PLUS
13702: PPUSH
13703: CALL_OW 259
13707: PUSH
13708: LD_INT 1
13710: PLUS
13711: PPUSH
13712: CALL_OW 237
13716: GO 13618
13718: POP
13719: POP
// end ;
13720: PPOPN 3
13722: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13723: LD_EXP 37
13727: PUSH
13728: LD_EXP 45
13732: AND
13733: IFFALSE 13753
13735: GO 13737
13737: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13738: LD_INT 4
13740: PPUSH
13741: LD_OWVAR 2
13745: PPUSH
13746: LD_INT 0
13748: PPUSH
13749: CALL_OW 324
13753: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13754: LD_EXP 37
13758: PUSH
13759: LD_EXP 74
13763: AND
13764: IFFALSE 13784
13766: GO 13768
13768: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13769: LD_INT 19
13771: PPUSH
13772: LD_OWVAR 2
13776: PPUSH
13777: LD_INT 0
13779: PPUSH
13780: CALL_OW 324
13784: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13785: LD_EXP 37
13789: PUSH
13790: LD_EXP 46
13794: AND
13795: IFFALSE 13897
13797: GO 13799
13799: DISABLE
13800: LD_INT 0
13802: PPUSH
13803: PPUSH
// begin enable ;
13804: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13805: LD_ADDR_VAR 0 2
13809: PUSH
13810: LD_INT 22
13812: PUSH
13813: LD_OWVAR 2
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 2
13824: PUSH
13825: LD_INT 34
13827: PUSH
13828: LD_INT 11
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 34
13837: PUSH
13838: LD_INT 30
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PPUSH
13854: CALL_OW 69
13858: ST_TO_ADDR
// if not tmp then
13859: LD_VAR 0 2
13863: NOT
13864: IFFALSE 13868
// exit ;
13866: GO 13897
// for i in tmp do
13868: LD_ADDR_VAR 0 1
13872: PUSH
13873: LD_VAR 0 2
13877: PUSH
13878: FOR_IN
13879: IFFALSE 13895
// begin SetLives ( i , 0 ) ;
13881: LD_VAR 0 1
13885: PPUSH
13886: LD_INT 0
13888: PPUSH
13889: CALL_OW 234
// end ;
13893: GO 13878
13895: POP
13896: POP
// end ;
13897: PPOPN 2
13899: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13900: LD_EXP 37
13904: PUSH
13905: LD_EXP 47
13909: AND
13910: IFFALSE 13930
13912: GO 13914
13914: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13915: LD_INT 32
13917: PPUSH
13918: LD_OWVAR 2
13922: PPUSH
13923: LD_INT 0
13925: PPUSH
13926: CALL_OW 324
13930: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13931: LD_EXP 37
13935: PUSH
13936: LD_EXP 48
13940: AND
13941: IFFALSE 14122
13943: GO 13945
13945: DISABLE
13946: LD_INT 0
13948: PPUSH
13949: PPUSH
13950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13951: LD_ADDR_VAR 0 2
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_OWVAR 2
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 33
13970: PUSH
13971: LD_INT 3
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PPUSH
13982: CALL_OW 69
13986: ST_TO_ADDR
// if not tmp then
13987: LD_VAR 0 2
13991: NOT
13992: IFFALSE 13996
// exit ;
13994: GO 14122
// side := 0 ;
13996: LD_ADDR_VAR 0 3
14000: PUSH
14001: LD_INT 0
14003: ST_TO_ADDR
// for i := 1 to 8 do
14004: LD_ADDR_VAR 0 1
14008: PUSH
14009: DOUBLE
14010: LD_INT 1
14012: DEC
14013: ST_TO_ADDR
14014: LD_INT 8
14016: PUSH
14017: FOR_TO
14018: IFFALSE 14066
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14020: LD_OWVAR 2
14024: PUSH
14025: LD_VAR 0 1
14029: NONEQUAL
14030: PUSH
14031: LD_OWVAR 2
14035: PPUSH
14036: LD_VAR 0 1
14040: PPUSH
14041: CALL_OW 81
14045: PUSH
14046: LD_INT 2
14048: EQUAL
14049: AND
14050: IFFALSE 14064
// begin side := i ;
14052: LD_ADDR_VAR 0 3
14056: PUSH
14057: LD_VAR 0 1
14061: ST_TO_ADDR
// break ;
14062: GO 14066
// end ;
14064: GO 14017
14066: POP
14067: POP
// if not side then
14068: LD_VAR 0 3
14072: NOT
14073: IFFALSE 14077
// exit ;
14075: GO 14122
// for i := 1 to tmp do
14077: LD_ADDR_VAR 0 1
14081: PUSH
14082: DOUBLE
14083: LD_INT 1
14085: DEC
14086: ST_TO_ADDR
14087: LD_VAR 0 2
14091: PUSH
14092: FOR_TO
14093: IFFALSE 14120
// if Prob ( 60 ) then
14095: LD_INT 60
14097: PPUSH
14098: CALL_OW 13
14102: IFFALSE 14118
// SetSide ( i , side ) ;
14104: LD_VAR 0 1
14108: PPUSH
14109: LD_VAR 0 3
14113: PPUSH
14114: CALL_OW 235
14118: GO 14092
14120: POP
14121: POP
// end ;
14122: PPOPN 3
14124: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14125: LD_EXP 37
14129: PUSH
14130: LD_EXP 50
14134: AND
14135: IFFALSE 14254
14137: GO 14139
14139: DISABLE
14140: LD_INT 0
14142: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14143: LD_ADDR_VAR 0 1
14147: PUSH
14148: LD_INT 22
14150: PUSH
14151: LD_OWVAR 2
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 21
14162: PUSH
14163: LD_INT 1
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 3
14172: PUSH
14173: LD_INT 23
14175: PUSH
14176: LD_INT 0
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: PPUSH
14192: CALL_OW 69
14196: PUSH
14197: FOR_IN
14198: IFFALSE 14252
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14200: LD_VAR 0 1
14204: PPUSH
14205: CALL_OW 257
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: LD_INT 2
14215: PUSH
14216: LD_INT 3
14218: PUSH
14219: LD_INT 4
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: IN
14228: IFFALSE 14250
// SetClass ( un , rand ( 1 , 4 ) ) ;
14230: LD_VAR 0 1
14234: PPUSH
14235: LD_INT 1
14237: PPUSH
14238: LD_INT 4
14240: PPUSH
14241: CALL_OW 12
14245: PPUSH
14246: CALL_OW 336
14250: GO 14197
14252: POP
14253: POP
// end ;
14254: PPOPN 1
14256: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14257: LD_EXP 37
14261: PUSH
14262: LD_EXP 49
14266: AND
14267: IFFALSE 14346
14269: GO 14271
14271: DISABLE
14272: LD_INT 0
14274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14275: LD_ADDR_VAR 0 1
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_OWVAR 2
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 3
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 69
14310: ST_TO_ADDR
// if not tmp then
14311: LD_VAR 0 1
14315: NOT
14316: IFFALSE 14320
// exit ;
14318: GO 14346
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14320: LD_VAR 0 1
14324: PUSH
14325: LD_INT 1
14327: PPUSH
14328: LD_VAR 0 1
14332: PPUSH
14333: CALL_OW 12
14337: ARRAY
14338: PPUSH
14339: LD_INT 100
14341: PPUSH
14342: CALL_OW 234
// end ;
14346: PPOPN 1
14348: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14349: LD_EXP 37
14353: PUSH
14354: LD_EXP 51
14358: AND
14359: IFFALSE 14457
14361: GO 14363
14363: DISABLE
14364: LD_INT 0
14366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14367: LD_ADDR_VAR 0 1
14371: PUSH
14372: LD_INT 22
14374: PUSH
14375: LD_OWVAR 2
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 21
14386: PUSH
14387: LD_INT 1
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PPUSH
14398: CALL_OW 69
14402: ST_TO_ADDR
// if not tmp then
14403: LD_VAR 0 1
14407: NOT
14408: IFFALSE 14412
// exit ;
14410: GO 14457
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14412: LD_VAR 0 1
14416: PUSH
14417: LD_INT 1
14419: PPUSH
14420: LD_VAR 0 1
14424: PPUSH
14425: CALL_OW 12
14429: ARRAY
14430: PPUSH
14431: LD_INT 1
14433: PPUSH
14434: LD_INT 4
14436: PPUSH
14437: CALL_OW 12
14441: PPUSH
14442: LD_INT 3000
14444: PPUSH
14445: LD_INT 9000
14447: PPUSH
14448: CALL_OW 12
14452: PPUSH
14453: CALL_OW 492
// end ;
14457: PPOPN 1
14459: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14460: LD_EXP 37
14464: PUSH
14465: LD_EXP 52
14469: AND
14470: IFFALSE 14490
14472: GO 14474
14474: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14475: LD_INT 1
14477: PPUSH
14478: LD_OWVAR 2
14482: PPUSH
14483: LD_INT 0
14485: PPUSH
14486: CALL_OW 324
14490: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14491: LD_EXP 37
14495: PUSH
14496: LD_EXP 53
14500: AND
14501: IFFALSE 14584
14503: GO 14505
14505: DISABLE
14506: LD_INT 0
14508: PPUSH
14509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14510: LD_ADDR_VAR 0 2
14514: PUSH
14515: LD_INT 22
14517: PUSH
14518: LD_OWVAR 2
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 21
14529: PUSH
14530: LD_INT 3
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: ST_TO_ADDR
// if not tmp then
14546: LD_VAR 0 2
14550: NOT
14551: IFFALSE 14555
// exit ;
14553: GO 14584
// for i in tmp do
14555: LD_ADDR_VAR 0 1
14559: PUSH
14560: LD_VAR 0 2
14564: PUSH
14565: FOR_IN
14566: IFFALSE 14582
// SetBLevel ( i , 10 ) ;
14568: LD_VAR 0 1
14572: PPUSH
14573: LD_INT 10
14575: PPUSH
14576: CALL_OW 241
14580: GO 14565
14582: POP
14583: POP
// end ;
14584: PPOPN 2
14586: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14587: LD_EXP 37
14591: PUSH
14592: LD_EXP 54
14596: AND
14597: IFFALSE 14708
14599: GO 14601
14601: DISABLE
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14607: LD_ADDR_VAR 0 3
14611: PUSH
14612: LD_INT 22
14614: PUSH
14615: LD_OWVAR 2
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 25
14626: PUSH
14627: LD_INT 1
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PPUSH
14638: CALL_OW 69
14642: ST_TO_ADDR
// if not tmp then
14643: LD_VAR 0 3
14647: NOT
14648: IFFALSE 14652
// exit ;
14650: GO 14708
// un := tmp [ rand ( 1 , tmp ) ] ;
14652: LD_ADDR_VAR 0 2
14656: PUSH
14657: LD_VAR 0 3
14661: PUSH
14662: LD_INT 1
14664: PPUSH
14665: LD_VAR 0 3
14669: PPUSH
14670: CALL_OW 12
14674: ARRAY
14675: ST_TO_ADDR
// if Crawls ( un ) then
14676: LD_VAR 0 2
14680: PPUSH
14681: CALL_OW 318
14685: IFFALSE 14696
// ComWalk ( un ) ;
14687: LD_VAR 0 2
14691: PPUSH
14692: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_INT 5
14703: PPUSH
14704: CALL_OW 336
// end ;
14708: PPOPN 3
14710: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14711: LD_EXP 37
14715: PUSH
14716: LD_EXP 55
14720: AND
14721: PUSH
14722: LD_OWVAR 67
14726: PUSH
14727: LD_INT 4
14729: LESS
14730: AND
14731: IFFALSE 14750
14733: GO 14735
14735: DISABLE
// begin Difficulty := Difficulty + 1 ;
14736: LD_ADDR_OWVAR 67
14740: PUSH
14741: LD_OWVAR 67
14745: PUSH
14746: LD_INT 1
14748: PLUS
14749: ST_TO_ADDR
// end ;
14750: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14751: LD_EXP 37
14755: PUSH
14756: LD_EXP 56
14760: AND
14761: IFFALSE 14864
14763: GO 14765
14765: DISABLE
14766: LD_INT 0
14768: PPUSH
// begin for i := 1 to 5 do
14769: LD_ADDR_VAR 0 1
14773: PUSH
14774: DOUBLE
14775: LD_INT 1
14777: DEC
14778: ST_TO_ADDR
14779: LD_INT 5
14781: PUSH
14782: FOR_TO
14783: IFFALSE 14862
// begin uc_nation := nation_nature ;
14785: LD_ADDR_OWVAR 21
14789: PUSH
14790: LD_INT 0
14792: ST_TO_ADDR
// uc_side := 0 ;
14793: LD_ADDR_OWVAR 20
14797: PUSH
14798: LD_INT 0
14800: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14801: LD_ADDR_OWVAR 29
14805: PUSH
14806: LD_INT 12
14808: PUSH
14809: LD_INT 12
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: ST_TO_ADDR
// hc_agressivity := 20 ;
14816: LD_ADDR_OWVAR 35
14820: PUSH
14821: LD_INT 20
14823: ST_TO_ADDR
// hc_class := class_tiger ;
14824: LD_ADDR_OWVAR 28
14828: PUSH
14829: LD_INT 14
14831: ST_TO_ADDR
// hc_gallery :=  ;
14832: LD_ADDR_OWVAR 33
14836: PUSH
14837: LD_STRING 
14839: ST_TO_ADDR
// hc_name :=  ;
14840: LD_ADDR_OWVAR 26
14844: PUSH
14845: LD_STRING 
14847: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14848: CALL_OW 44
14852: PPUSH
14853: LD_INT 0
14855: PPUSH
14856: CALL_OW 51
// end ;
14860: GO 14782
14862: POP
14863: POP
// end ;
14864: PPOPN 1
14866: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14867: LD_EXP 37
14871: PUSH
14872: LD_EXP 57
14876: AND
14877: IFFALSE 14886
14879: GO 14881
14881: DISABLE
// StreamSibBomb ;
14882: CALL 14887 0 0
14886: END
// export function StreamSibBomb ; var i , x , y ; begin
14887: LD_INT 0
14889: PPUSH
14890: PPUSH
14891: PPUSH
14892: PPUSH
// result := false ;
14893: LD_ADDR_VAR 0 1
14897: PUSH
14898: LD_INT 0
14900: ST_TO_ADDR
// for i := 1 to 16 do
14901: LD_ADDR_VAR 0 2
14905: PUSH
14906: DOUBLE
14907: LD_INT 1
14909: DEC
14910: ST_TO_ADDR
14911: LD_INT 16
14913: PUSH
14914: FOR_TO
14915: IFFALSE 15114
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14917: LD_ADDR_VAR 0 3
14921: PUSH
14922: LD_INT 10
14924: PUSH
14925: LD_INT 20
14927: PUSH
14928: LD_INT 30
14930: PUSH
14931: LD_INT 40
14933: PUSH
14934: LD_INT 50
14936: PUSH
14937: LD_INT 60
14939: PUSH
14940: LD_INT 70
14942: PUSH
14943: LD_INT 80
14945: PUSH
14946: LD_INT 90
14948: PUSH
14949: LD_INT 100
14951: PUSH
14952: LD_INT 110
14954: PUSH
14955: LD_INT 120
14957: PUSH
14958: LD_INT 130
14960: PUSH
14961: LD_INT 140
14963: PUSH
14964: LD_INT 150
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 1
14986: PPUSH
14987: LD_INT 15
14989: PPUSH
14990: CALL_OW 12
14994: ARRAY
14995: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14996: LD_ADDR_VAR 0 4
15000: PUSH
15001: LD_INT 10
15003: PUSH
15004: LD_INT 20
15006: PUSH
15007: LD_INT 30
15009: PUSH
15010: LD_INT 40
15012: PUSH
15013: LD_INT 50
15015: PUSH
15016: LD_INT 60
15018: PUSH
15019: LD_INT 70
15021: PUSH
15022: LD_INT 80
15024: PUSH
15025: LD_INT 90
15027: PUSH
15028: LD_INT 100
15030: PUSH
15031: LD_INT 110
15033: PUSH
15034: LD_INT 120
15036: PUSH
15037: LD_INT 130
15039: PUSH
15040: LD_INT 140
15042: PUSH
15043: LD_INT 150
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 1
15065: PPUSH
15066: LD_INT 15
15068: PPUSH
15069: CALL_OW 12
15073: ARRAY
15074: ST_TO_ADDR
// if ValidHex ( x , y ) then
15075: LD_VAR 0 3
15079: PPUSH
15080: LD_VAR 0 4
15084: PPUSH
15085: CALL_OW 488
15089: IFFALSE 15112
// begin result := [ x , y ] ;
15091: LD_ADDR_VAR 0 1
15095: PUSH
15096: LD_VAR 0 3
15100: PUSH
15101: LD_VAR 0 4
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: ST_TO_ADDR
// break ;
15110: GO 15114
// end ; end ;
15112: GO 14914
15114: POP
15115: POP
// if result then
15116: LD_VAR 0 1
15120: IFFALSE 15180
// begin ToLua ( playSibBomb() ) ;
15122: LD_STRING playSibBomb()
15124: PPUSH
15125: CALL_OW 559
// wait ( 0 0$14 ) ;
15129: LD_INT 490
15131: PPUSH
15132: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15136: LD_VAR 0 1
15140: PUSH
15141: LD_INT 1
15143: ARRAY
15144: PPUSH
15145: LD_VAR 0 1
15149: PUSH
15150: LD_INT 2
15152: ARRAY
15153: PPUSH
15154: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15158: LD_VAR 0 1
15162: PUSH
15163: LD_INT 1
15165: ARRAY
15166: PPUSH
15167: LD_VAR 0 1
15171: PUSH
15172: LD_INT 2
15174: ARRAY
15175: PPUSH
15176: CALL_OW 429
// end ; end ;
15180: LD_VAR 0 1
15184: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15185: LD_EXP 37
15189: PUSH
15190: LD_EXP 59
15194: AND
15195: IFFALSE 15207
15197: GO 15199
15199: DISABLE
// YouLost (  ) ;
15200: LD_STRING 
15202: PPUSH
15203: CALL_OW 104
15207: END
// every 0 0$1 trigger StreamModeActive and sFog do
15208: LD_EXP 37
15212: PUSH
15213: LD_EXP 58
15217: AND
15218: IFFALSE 15232
15220: GO 15222
15222: DISABLE
// FogOff ( your_side ) ;
15223: LD_OWVAR 2
15227: PPUSH
15228: CALL_OW 344
15232: END
// every 0 0$1 trigger StreamModeActive and sSun do
15233: LD_EXP 37
15237: PUSH
15238: LD_EXP 60
15242: AND
15243: IFFALSE 15271
15245: GO 15247
15247: DISABLE
// begin solar_recharge_percent := 0 ;
15248: LD_ADDR_OWVAR 79
15252: PUSH
15253: LD_INT 0
15255: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15256: LD_INT 10500
15258: PPUSH
15259: CALL_OW 67
// solar_recharge_percent := 100 ;
15263: LD_ADDR_OWVAR 79
15267: PUSH
15268: LD_INT 100
15270: ST_TO_ADDR
// end ;
15271: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15272: LD_EXP 37
15276: PUSH
15277: LD_EXP 61
15281: AND
15282: IFFALSE 15521
15284: GO 15286
15286: DISABLE
15287: LD_INT 0
15289: PPUSH
15290: PPUSH
15291: PPUSH
// begin tmp := [ ] ;
15292: LD_ADDR_VAR 0 3
15296: PUSH
15297: EMPTY
15298: ST_TO_ADDR
// for i := 1 to 6 do
15299: LD_ADDR_VAR 0 1
15303: PUSH
15304: DOUBLE
15305: LD_INT 1
15307: DEC
15308: ST_TO_ADDR
15309: LD_INT 6
15311: PUSH
15312: FOR_TO
15313: IFFALSE 15418
// begin uc_nation := nation_nature ;
15315: LD_ADDR_OWVAR 21
15319: PUSH
15320: LD_INT 0
15322: ST_TO_ADDR
// uc_side := 0 ;
15323: LD_ADDR_OWVAR 20
15327: PUSH
15328: LD_INT 0
15330: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15331: LD_ADDR_OWVAR 29
15335: PUSH
15336: LD_INT 12
15338: PUSH
15339: LD_INT 12
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: ST_TO_ADDR
// hc_agressivity := 20 ;
15346: LD_ADDR_OWVAR 35
15350: PUSH
15351: LD_INT 20
15353: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15354: LD_ADDR_OWVAR 28
15358: PUSH
15359: LD_INT 17
15361: ST_TO_ADDR
// hc_gallery :=  ;
15362: LD_ADDR_OWVAR 33
15366: PUSH
15367: LD_STRING 
15369: ST_TO_ADDR
// hc_name :=  ;
15370: LD_ADDR_OWVAR 26
15374: PUSH
15375: LD_STRING 
15377: ST_TO_ADDR
// un := CreateHuman ;
15378: LD_ADDR_VAR 0 2
15382: PUSH
15383: CALL_OW 44
15387: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15388: LD_VAR 0 2
15392: PPUSH
15393: LD_INT 1
15395: PPUSH
15396: CALL_OW 51
// tmp := tmp ^ un ;
15400: LD_ADDR_VAR 0 3
15404: PUSH
15405: LD_VAR 0 3
15409: PUSH
15410: LD_VAR 0 2
15414: ADD
15415: ST_TO_ADDR
// end ;
15416: GO 15312
15418: POP
15419: POP
// repeat wait ( 0 0$1 ) ;
15420: LD_INT 35
15422: PPUSH
15423: CALL_OW 67
// for un in tmp do
15427: LD_ADDR_VAR 0 2
15431: PUSH
15432: LD_VAR 0 3
15436: PUSH
15437: FOR_IN
15438: IFFALSE 15512
// begin if IsDead ( un ) then
15440: LD_VAR 0 2
15444: PPUSH
15445: CALL_OW 301
15449: IFFALSE 15469
// begin tmp := tmp diff un ;
15451: LD_ADDR_VAR 0 3
15455: PUSH
15456: LD_VAR 0 3
15460: PUSH
15461: LD_VAR 0 2
15465: DIFF
15466: ST_TO_ADDR
// continue ;
15467: GO 15437
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15469: LD_VAR 0 2
15473: PPUSH
15474: LD_INT 3
15476: PUSH
15477: LD_INT 22
15479: PUSH
15480: LD_INT 0
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PPUSH
15491: CALL_OW 69
15495: PPUSH
15496: LD_VAR 0 2
15500: PPUSH
15501: CALL_OW 74
15505: PPUSH
15506: CALL_OW 115
// end ;
15510: GO 15437
15512: POP
15513: POP
// until not tmp ;
15514: LD_VAR 0 3
15518: NOT
15519: IFFALSE 15420
// end ;
15521: PPOPN 3
15523: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15524: LD_EXP 37
15528: PUSH
15529: LD_EXP 62
15533: AND
15534: IFFALSE 15588
15536: GO 15538
15538: DISABLE
// begin ToLua ( displayTroll(); ) ;
15539: LD_STRING displayTroll();
15541: PPUSH
15542: CALL_OW 559
// wait ( 3 3$00 ) ;
15546: LD_INT 6300
15548: PPUSH
15549: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15553: LD_STRING hideTroll();
15555: PPUSH
15556: CALL_OW 559
// wait ( 1 1$00 ) ;
15560: LD_INT 2100
15562: PPUSH
15563: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15567: LD_STRING displayTroll();
15569: PPUSH
15570: CALL_OW 559
// wait ( 1 1$00 ) ;
15574: LD_INT 2100
15576: PPUSH
15577: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15581: LD_STRING hideTroll();
15583: PPUSH
15584: CALL_OW 559
// end ;
15588: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15589: LD_EXP 37
15593: PUSH
15594: LD_EXP 63
15598: AND
15599: IFFALSE 15662
15601: GO 15603
15603: DISABLE
15604: LD_INT 0
15606: PPUSH
// begin p := 0 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 0
15614: ST_TO_ADDR
// repeat game_speed := 1 ;
15615: LD_ADDR_OWVAR 65
15619: PUSH
15620: LD_INT 1
15622: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15623: LD_INT 35
15625: PPUSH
15626: CALL_OW 67
// p := p + 1 ;
15630: LD_ADDR_VAR 0 1
15634: PUSH
15635: LD_VAR 0 1
15639: PUSH
15640: LD_INT 1
15642: PLUS
15643: ST_TO_ADDR
// until p >= 60 ;
15644: LD_VAR 0 1
15648: PUSH
15649: LD_INT 60
15651: GREATEREQUAL
15652: IFFALSE 15615
// game_speed := 4 ;
15654: LD_ADDR_OWVAR 65
15658: PUSH
15659: LD_INT 4
15661: ST_TO_ADDR
// end ;
15662: PPOPN 1
15664: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15665: LD_EXP 37
15669: PUSH
15670: LD_EXP 64
15674: AND
15675: IFFALSE 15821
15677: GO 15679
15679: DISABLE
15680: LD_INT 0
15682: PPUSH
15683: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15684: LD_ADDR_VAR 0 1
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_OWVAR 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 30
15706: PUSH
15707: LD_INT 0
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 30
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PPUSH
15733: CALL_OW 69
15737: ST_TO_ADDR
// if not depot then
15738: LD_VAR 0 1
15742: NOT
15743: IFFALSE 15747
// exit ;
15745: GO 15821
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15747: LD_ADDR_VAR 0 2
15751: PUSH
15752: LD_VAR 0 1
15756: PUSH
15757: LD_INT 1
15759: PPUSH
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 12
15769: ARRAY
15770: PPUSH
15771: CALL_OW 274
15775: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15776: LD_VAR 0 2
15780: PPUSH
15781: LD_INT 1
15783: PPUSH
15784: LD_INT 0
15786: PPUSH
15787: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15791: LD_VAR 0 2
15795: PPUSH
15796: LD_INT 2
15798: PPUSH
15799: LD_INT 0
15801: PPUSH
15802: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15806: LD_VAR 0 2
15810: PPUSH
15811: LD_INT 3
15813: PPUSH
15814: LD_INT 0
15816: PPUSH
15817: CALL_OW 277
// end ;
15821: PPOPN 2
15823: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15824: LD_EXP 37
15828: PUSH
15829: LD_EXP 65
15833: AND
15834: IFFALSE 15931
15836: GO 15838
15838: DISABLE
15839: LD_INT 0
15841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15842: LD_ADDR_VAR 0 1
15846: PUSH
15847: LD_INT 22
15849: PUSH
15850: LD_OWVAR 2
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 21
15861: PUSH
15862: LD_INT 1
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: LD_INT 3
15871: PUSH
15872: LD_INT 23
15874: PUSH
15875: LD_INT 0
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: LIST
15890: PPUSH
15891: CALL_OW 69
15895: ST_TO_ADDR
// if not tmp then
15896: LD_VAR 0 1
15900: NOT
15901: IFFALSE 15905
// exit ;
15903: GO 15931
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15905: LD_VAR 0 1
15909: PUSH
15910: LD_INT 1
15912: PPUSH
15913: LD_VAR 0 1
15917: PPUSH
15918: CALL_OW 12
15922: ARRAY
15923: PPUSH
15924: LD_INT 200
15926: PPUSH
15927: CALL_OW 234
// end ;
15931: PPOPN 1
15933: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15934: LD_EXP 37
15938: PUSH
15939: LD_EXP 66
15943: AND
15944: IFFALSE 16023
15946: GO 15948
15948: DISABLE
15949: LD_INT 0
15951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15952: LD_ADDR_VAR 0 1
15956: PUSH
15957: LD_INT 22
15959: PUSH
15960: LD_OWVAR 2
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 21
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PPUSH
15983: CALL_OW 69
15987: ST_TO_ADDR
// if not tmp then
15988: LD_VAR 0 1
15992: NOT
15993: IFFALSE 15997
// exit ;
15995: GO 16023
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15997: LD_VAR 0 1
16001: PUSH
16002: LD_INT 1
16004: PPUSH
16005: LD_VAR 0 1
16009: PPUSH
16010: CALL_OW 12
16014: ARRAY
16015: PPUSH
16016: LD_INT 60
16018: PPUSH
16019: CALL_OW 234
// end ;
16023: PPOPN 1
16025: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16026: LD_EXP 37
16030: PUSH
16031: LD_EXP 67
16035: AND
16036: IFFALSE 16135
16038: GO 16040
16040: DISABLE
16041: LD_INT 0
16043: PPUSH
16044: PPUSH
// begin enable ;
16045: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16046: LD_ADDR_VAR 0 1
16050: PUSH
16051: LD_INT 22
16053: PUSH
16054: LD_OWVAR 2
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 61
16065: PUSH
16066: EMPTY
16067: LIST
16068: PUSH
16069: LD_INT 33
16071: PUSH
16072: LD_INT 2
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: PPUSH
16084: CALL_OW 69
16088: ST_TO_ADDR
// if not tmp then
16089: LD_VAR 0 1
16093: NOT
16094: IFFALSE 16098
// exit ;
16096: GO 16135
// for i in tmp do
16098: LD_ADDR_VAR 0 2
16102: PUSH
16103: LD_VAR 0 1
16107: PUSH
16108: FOR_IN
16109: IFFALSE 16133
// if IsControledBy ( i ) then
16111: LD_VAR 0 2
16115: PPUSH
16116: CALL_OW 312
16120: IFFALSE 16131
// ComUnlink ( i ) ;
16122: LD_VAR 0 2
16126: PPUSH
16127: CALL_OW 136
16131: GO 16108
16133: POP
16134: POP
// end ;
16135: PPOPN 2
16137: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16138: LD_EXP 37
16142: PUSH
16143: LD_EXP 68
16147: AND
16148: IFFALSE 16288
16150: GO 16152
16152: DISABLE
16153: LD_INT 0
16155: PPUSH
16156: PPUSH
// begin ToLua ( displayPowell(); ) ;
16157: LD_STRING displayPowell();
16159: PPUSH
16160: CALL_OW 559
// uc_side := 0 ;
16164: LD_ADDR_OWVAR 20
16168: PUSH
16169: LD_INT 0
16171: ST_TO_ADDR
// uc_nation := 2 ;
16172: LD_ADDR_OWVAR 21
16176: PUSH
16177: LD_INT 2
16179: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16180: LD_ADDR_OWVAR 37
16184: PUSH
16185: LD_INT 14
16187: ST_TO_ADDR
// vc_engine := engine_siberite ;
16188: LD_ADDR_OWVAR 39
16192: PUSH
16193: LD_INT 3
16195: ST_TO_ADDR
// vc_control := control_apeman ;
16196: LD_ADDR_OWVAR 38
16200: PUSH
16201: LD_INT 5
16203: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16204: LD_ADDR_OWVAR 40
16208: PUSH
16209: LD_INT 29
16211: ST_TO_ADDR
// un := CreateVehicle ;
16212: LD_ADDR_VAR 0 2
16216: PUSH
16217: CALL_OW 45
16221: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16222: LD_VAR 0 2
16226: PPUSH
16227: LD_INT 1
16229: PPUSH
16230: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16234: LD_INT 35
16236: PPUSH
16237: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16241: LD_VAR 0 2
16245: PPUSH
16246: LD_INT 22
16248: PUSH
16249: LD_OWVAR 2
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PPUSH
16258: CALL_OW 69
16262: PPUSH
16263: LD_VAR 0 2
16267: PPUSH
16268: CALL_OW 74
16272: PPUSH
16273: CALL_OW 115
// until IsDead ( un ) ;
16277: LD_VAR 0 2
16281: PPUSH
16282: CALL_OW 301
16286: IFFALSE 16234
// end ;
16288: PPOPN 2
16290: END
// every 0 0$1 trigger StreamModeActive and sStu do
16291: LD_EXP 37
16295: PUSH
16296: LD_EXP 76
16300: AND
16301: IFFALSE 16317
16303: GO 16305
16305: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16306: LD_STRING displayStucuk();
16308: PPUSH
16309: CALL_OW 559
// ResetFog ;
16313: CALL_OW 335
// end ;
16317: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16318: LD_EXP 37
16322: PUSH
16323: LD_EXP 69
16327: AND
16328: IFFALSE 16469
16330: GO 16332
16332: DISABLE
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16337: LD_ADDR_VAR 0 2
16341: PUSH
16342: LD_INT 22
16344: PUSH
16345: LD_OWVAR 2
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 21
16356: PUSH
16357: LD_INT 1
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PPUSH
16368: CALL_OW 69
16372: ST_TO_ADDR
// if not tmp then
16373: LD_VAR 0 2
16377: NOT
16378: IFFALSE 16382
// exit ;
16380: GO 16469
// un := tmp [ rand ( 1 , tmp ) ] ;
16382: LD_ADDR_VAR 0 1
16386: PUSH
16387: LD_VAR 0 2
16391: PUSH
16392: LD_INT 1
16394: PPUSH
16395: LD_VAR 0 2
16399: PPUSH
16400: CALL_OW 12
16404: ARRAY
16405: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16406: LD_VAR 0 1
16410: PPUSH
16411: LD_INT 0
16413: PPUSH
16414: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16418: LD_VAR 0 1
16422: PPUSH
16423: LD_OWVAR 3
16427: PUSH
16428: LD_VAR 0 1
16432: DIFF
16433: PPUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 74
16443: PPUSH
16444: CALL_OW 115
// wait ( 0 0$20 ) ;
16448: LD_INT 700
16450: PPUSH
16451: CALL_OW 67
// SetSide ( un , your_side ) ;
16455: LD_VAR 0 1
16459: PPUSH
16460: LD_OWVAR 2
16464: PPUSH
16465: CALL_OW 235
// end ;
16469: PPOPN 2
16471: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16472: LD_EXP 37
16476: PUSH
16477: LD_EXP 70
16481: AND
16482: IFFALSE 16588
16484: GO 16486
16486: DISABLE
16487: LD_INT 0
16489: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16490: LD_ADDR_VAR 0 1
16494: PUSH
16495: LD_INT 22
16497: PUSH
16498: LD_OWVAR 2
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 2
16509: PUSH
16510: LD_INT 30
16512: PUSH
16513: LD_INT 0
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 30
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: LIST
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PPUSH
16539: CALL_OW 69
16543: ST_TO_ADDR
// if not depot then
16544: LD_VAR 0 1
16548: NOT
16549: IFFALSE 16553
// exit ;
16551: GO 16588
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16553: LD_VAR 0 1
16557: PUSH
16558: LD_INT 1
16560: ARRAY
16561: PPUSH
16562: CALL_OW 250
16566: PPUSH
16567: LD_VAR 0 1
16571: PUSH
16572: LD_INT 1
16574: ARRAY
16575: PPUSH
16576: CALL_OW 251
16580: PPUSH
16581: LD_INT 70
16583: PPUSH
16584: CALL_OW 495
// end ;
16588: PPOPN 1
16590: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16591: LD_EXP 37
16595: PUSH
16596: LD_EXP 71
16600: AND
16601: IFFALSE 16812
16603: GO 16605
16605: DISABLE
16606: LD_INT 0
16608: PPUSH
16609: PPUSH
16610: PPUSH
16611: PPUSH
16612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16613: LD_ADDR_VAR 0 5
16617: PUSH
16618: LD_INT 22
16620: PUSH
16621: LD_OWVAR 2
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 21
16632: PUSH
16633: LD_INT 1
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PPUSH
16644: CALL_OW 69
16648: ST_TO_ADDR
// if not tmp then
16649: LD_VAR 0 5
16653: NOT
16654: IFFALSE 16658
// exit ;
16656: GO 16812
// for i in tmp do
16658: LD_ADDR_VAR 0 1
16662: PUSH
16663: LD_VAR 0 5
16667: PUSH
16668: FOR_IN
16669: IFFALSE 16810
// begin d := rand ( 0 , 5 ) ;
16671: LD_ADDR_VAR 0 4
16675: PUSH
16676: LD_INT 0
16678: PPUSH
16679: LD_INT 5
16681: PPUSH
16682: CALL_OW 12
16686: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16687: LD_ADDR_VAR 0 2
16691: PUSH
16692: LD_VAR 0 1
16696: PPUSH
16697: CALL_OW 250
16701: PPUSH
16702: LD_VAR 0 4
16706: PPUSH
16707: LD_INT 3
16709: PPUSH
16710: LD_INT 12
16712: PPUSH
16713: CALL_OW 12
16717: PPUSH
16718: CALL_OW 272
16722: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16723: LD_ADDR_VAR 0 3
16727: PUSH
16728: LD_VAR 0 1
16732: PPUSH
16733: CALL_OW 251
16737: PPUSH
16738: LD_VAR 0 4
16742: PPUSH
16743: LD_INT 3
16745: PPUSH
16746: LD_INT 12
16748: PPUSH
16749: CALL_OW 12
16753: PPUSH
16754: CALL_OW 273
16758: ST_TO_ADDR
// if ValidHex ( x , y ) then
16759: LD_VAR 0 2
16763: PPUSH
16764: LD_VAR 0 3
16768: PPUSH
16769: CALL_OW 488
16773: IFFALSE 16808
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16775: LD_VAR 0 1
16779: PPUSH
16780: LD_VAR 0 2
16784: PPUSH
16785: LD_VAR 0 3
16789: PPUSH
16790: LD_INT 3
16792: PPUSH
16793: LD_INT 6
16795: PPUSH
16796: CALL_OW 12
16800: PPUSH
16801: LD_INT 1
16803: PPUSH
16804: CALL_OW 483
// end ;
16808: GO 16668
16810: POP
16811: POP
// end ;
16812: PPOPN 5
16814: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16815: LD_EXP 37
16819: PUSH
16820: LD_EXP 72
16824: AND
16825: IFFALSE 16919
16827: GO 16829
16829: DISABLE
16830: LD_INT 0
16832: PPUSH
16833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16834: LD_ADDR_VAR 0 2
16838: PUSH
16839: LD_INT 22
16841: PUSH
16842: LD_OWVAR 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 32
16853: PUSH
16854: LD_INT 1
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 21
16863: PUSH
16864: LD_INT 2
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 69
16880: ST_TO_ADDR
// if not tmp then
16881: LD_VAR 0 2
16885: NOT
16886: IFFALSE 16890
// exit ;
16888: GO 16919
// for i in tmp do
16890: LD_ADDR_VAR 0 1
16894: PUSH
16895: LD_VAR 0 2
16899: PUSH
16900: FOR_IN
16901: IFFALSE 16917
// SetFuel ( i , 0 ) ;
16903: LD_VAR 0 1
16907: PPUSH
16908: LD_INT 0
16910: PPUSH
16911: CALL_OW 240
16915: GO 16900
16917: POP
16918: POP
// end ;
16919: PPOPN 2
16921: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16922: LD_EXP 37
16926: PUSH
16927: LD_EXP 73
16931: AND
16932: IFFALSE 16998
16934: GO 16936
16936: DISABLE
16937: LD_INT 0
16939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16940: LD_ADDR_VAR 0 1
16944: PUSH
16945: LD_INT 22
16947: PUSH
16948: LD_OWVAR 2
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 30
16959: PUSH
16960: LD_INT 29
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PPUSH
16971: CALL_OW 69
16975: ST_TO_ADDR
// if not tmp then
16976: LD_VAR 0 1
16980: NOT
16981: IFFALSE 16985
// exit ;
16983: GO 16998
// DestroyUnit ( tmp [ 1 ] ) ;
16985: LD_VAR 0 1
16989: PUSH
16990: LD_INT 1
16992: ARRAY
16993: PPUSH
16994: CALL_OW 65
// end ;
16998: PPOPN 1
17000: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17001: LD_EXP 37
17005: PUSH
17006: LD_EXP 75
17010: AND
17011: IFFALSE 17140
17013: GO 17015
17015: DISABLE
17016: LD_INT 0
17018: PPUSH
// begin uc_side := 0 ;
17019: LD_ADDR_OWVAR 20
17023: PUSH
17024: LD_INT 0
17026: ST_TO_ADDR
// uc_nation := nation_arabian ;
17027: LD_ADDR_OWVAR 21
17031: PUSH
17032: LD_INT 2
17034: ST_TO_ADDR
// hc_gallery :=  ;
17035: LD_ADDR_OWVAR 33
17039: PUSH
17040: LD_STRING 
17042: ST_TO_ADDR
// hc_name :=  ;
17043: LD_ADDR_OWVAR 26
17047: PUSH
17048: LD_STRING 
17050: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17051: LD_INT 1
17053: PPUSH
17054: LD_INT 11
17056: PPUSH
17057: LD_INT 10
17059: PPUSH
17060: CALL_OW 380
// un := CreateHuman ;
17064: LD_ADDR_VAR 0 1
17068: PUSH
17069: CALL_OW 44
17073: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17074: LD_VAR 0 1
17078: PPUSH
17079: LD_INT 1
17081: PPUSH
17082: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17086: LD_INT 35
17088: PPUSH
17089: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17093: LD_VAR 0 1
17097: PPUSH
17098: LD_INT 22
17100: PUSH
17101: LD_OWVAR 2
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 69
17114: PPUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 74
17124: PPUSH
17125: CALL_OW 115
// until IsDead ( un ) ;
17129: LD_VAR 0 1
17133: PPUSH
17134: CALL_OW 301
17138: IFFALSE 17086
// end ;
17140: PPOPN 1
17142: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17143: LD_EXP 37
17147: PUSH
17148: LD_EXP 77
17152: AND
17153: IFFALSE 17165
17155: GO 17157
17157: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17158: LD_STRING earthquake(getX(game), 0, 32)
17160: PPUSH
17161: CALL_OW 559
17165: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17166: LD_EXP 37
17170: PUSH
17171: LD_EXP 78
17175: AND
17176: IFFALSE 17267
17178: GO 17180
17180: DISABLE
17181: LD_INT 0
17183: PPUSH
// begin enable ;
17184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17185: LD_ADDR_VAR 0 1
17189: PUSH
17190: LD_INT 22
17192: PUSH
17193: LD_OWVAR 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 21
17204: PUSH
17205: LD_INT 2
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 33
17214: PUSH
17215: LD_INT 3
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: PPUSH
17227: CALL_OW 69
17231: ST_TO_ADDR
// if not tmp then
17232: LD_VAR 0 1
17236: NOT
17237: IFFALSE 17241
// exit ;
17239: GO 17267
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17241: LD_VAR 0 1
17245: PUSH
17246: LD_INT 1
17248: PPUSH
17249: LD_VAR 0 1
17253: PPUSH
17254: CALL_OW 12
17258: ARRAY
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL_OW 234
// end ;
17267: PPOPN 1
17269: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17270: LD_EXP 37
17274: PUSH
17275: LD_EXP 79
17279: AND
17280: IFFALSE 17421
17282: GO 17284
17284: DISABLE
17285: LD_INT 0
17287: PPUSH
17288: PPUSH
17289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17290: LD_ADDR_VAR 0 3
17294: PUSH
17295: LD_INT 22
17297: PUSH
17298: LD_OWVAR 2
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 25
17309: PUSH
17310: LD_INT 1
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PPUSH
17321: CALL_OW 69
17325: ST_TO_ADDR
// if not tmp then
17326: LD_VAR 0 3
17330: NOT
17331: IFFALSE 17335
// exit ;
17333: GO 17421
// un := tmp [ rand ( 1 , tmp ) ] ;
17335: LD_ADDR_VAR 0 2
17339: PUSH
17340: LD_VAR 0 3
17344: PUSH
17345: LD_INT 1
17347: PPUSH
17348: LD_VAR 0 3
17352: PPUSH
17353: CALL_OW 12
17357: ARRAY
17358: ST_TO_ADDR
// if Crawls ( un ) then
17359: LD_VAR 0 2
17363: PPUSH
17364: CALL_OW 318
17368: IFFALSE 17379
// ComWalk ( un ) ;
17370: LD_VAR 0 2
17374: PPUSH
17375: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17379: LD_VAR 0 2
17383: PPUSH
17384: LD_INT 9
17386: PPUSH
17387: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17391: LD_INT 28
17393: PPUSH
17394: LD_OWVAR 2
17398: PPUSH
17399: LD_INT 2
17401: PPUSH
17402: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17406: LD_INT 29
17408: PPUSH
17409: LD_OWVAR 2
17413: PPUSH
17414: LD_INT 2
17416: PPUSH
17417: CALL_OW 322
// end ;
17421: PPOPN 3
17423: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17424: LD_EXP 37
17428: PUSH
17429: LD_EXP 80
17433: AND
17434: IFFALSE 17545
17436: GO 17438
17438: DISABLE
17439: LD_INT 0
17441: PPUSH
17442: PPUSH
17443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17444: LD_ADDR_VAR 0 3
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_OWVAR 2
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 25
17463: PUSH
17464: LD_INT 1
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PPUSH
17475: CALL_OW 69
17479: ST_TO_ADDR
// if not tmp then
17480: LD_VAR 0 3
17484: NOT
17485: IFFALSE 17489
// exit ;
17487: GO 17545
// un := tmp [ rand ( 1 , tmp ) ] ;
17489: LD_ADDR_VAR 0 2
17493: PUSH
17494: LD_VAR 0 3
17498: PUSH
17499: LD_INT 1
17501: PPUSH
17502: LD_VAR 0 3
17506: PPUSH
17507: CALL_OW 12
17511: ARRAY
17512: ST_TO_ADDR
// if Crawls ( un ) then
17513: LD_VAR 0 2
17517: PPUSH
17518: CALL_OW 318
17522: IFFALSE 17533
// ComWalk ( un ) ;
17524: LD_VAR 0 2
17528: PPUSH
17529: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17533: LD_VAR 0 2
17537: PPUSH
17538: LD_INT 8
17540: PPUSH
17541: CALL_OW 336
// end ;
17545: PPOPN 3
17547: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17548: LD_EXP 37
17552: PUSH
17553: LD_EXP 81
17557: AND
17558: IFFALSE 17702
17560: GO 17562
17562: DISABLE
17563: LD_INT 0
17565: PPUSH
17566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17567: LD_ADDR_VAR 0 2
17571: PUSH
17572: LD_INT 22
17574: PUSH
17575: LD_OWVAR 2
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 21
17586: PUSH
17587: LD_INT 2
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 2
17596: PUSH
17597: LD_INT 34
17599: PUSH
17600: LD_INT 12
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 34
17609: PUSH
17610: LD_INT 51
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 34
17619: PUSH
17620: LD_INT 32
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 69
17642: ST_TO_ADDR
// if not tmp then
17643: LD_VAR 0 2
17647: NOT
17648: IFFALSE 17652
// exit ;
17650: GO 17702
// for i in tmp do
17652: LD_ADDR_VAR 0 1
17656: PUSH
17657: LD_VAR 0 2
17661: PUSH
17662: FOR_IN
17663: IFFALSE 17700
// if GetCargo ( i , mat_artifact ) = 0 then
17665: LD_VAR 0 1
17669: PPUSH
17670: LD_INT 4
17672: PPUSH
17673: CALL_OW 289
17677: PUSH
17678: LD_INT 0
17680: EQUAL
17681: IFFALSE 17698
// SetCargo ( i , mat_siberit , 100 ) ;
17683: LD_VAR 0 1
17687: PPUSH
17688: LD_INT 3
17690: PPUSH
17691: LD_INT 100
17693: PPUSH
17694: CALL_OW 290
17698: GO 17662
17700: POP
17701: POP
// end ;
17702: PPOPN 2
17704: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17705: LD_EXP 37
17709: PUSH
17710: LD_EXP 82
17714: AND
17715: IFFALSE 17898
17717: GO 17719
17719: DISABLE
17720: LD_INT 0
17722: PPUSH
17723: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17724: LD_ADDR_VAR 0 2
17728: PUSH
17729: LD_INT 22
17731: PUSH
17732: LD_OWVAR 2
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PPUSH
17741: CALL_OW 69
17745: ST_TO_ADDR
// if not tmp then
17746: LD_VAR 0 2
17750: NOT
17751: IFFALSE 17755
// exit ;
17753: GO 17898
// for i := 1 to 2 do
17755: LD_ADDR_VAR 0 1
17759: PUSH
17760: DOUBLE
17761: LD_INT 1
17763: DEC
17764: ST_TO_ADDR
17765: LD_INT 2
17767: PUSH
17768: FOR_TO
17769: IFFALSE 17896
// begin uc_side := your_side ;
17771: LD_ADDR_OWVAR 20
17775: PUSH
17776: LD_OWVAR 2
17780: ST_TO_ADDR
// uc_nation := nation_american ;
17781: LD_ADDR_OWVAR 21
17785: PUSH
17786: LD_INT 1
17788: ST_TO_ADDR
// vc_chassis := us_morphling ;
17789: LD_ADDR_OWVAR 37
17793: PUSH
17794: LD_INT 5
17796: ST_TO_ADDR
// vc_engine := engine_siberite ;
17797: LD_ADDR_OWVAR 39
17801: PUSH
17802: LD_INT 3
17804: ST_TO_ADDR
// vc_control := control_computer ;
17805: LD_ADDR_OWVAR 38
17809: PUSH
17810: LD_INT 3
17812: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17813: LD_ADDR_OWVAR 40
17817: PUSH
17818: LD_INT 10
17820: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17821: LD_VAR 0 2
17825: PUSH
17826: LD_INT 1
17828: ARRAY
17829: PPUSH
17830: CALL_OW 310
17834: NOT
17835: IFFALSE 17882
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17837: CALL_OW 45
17841: PPUSH
17842: LD_VAR 0 2
17846: PUSH
17847: LD_INT 1
17849: ARRAY
17850: PPUSH
17851: CALL_OW 250
17855: PPUSH
17856: LD_VAR 0 2
17860: PUSH
17861: LD_INT 1
17863: ARRAY
17864: PPUSH
17865: CALL_OW 251
17869: PPUSH
17870: LD_INT 12
17872: PPUSH
17873: LD_INT 1
17875: PPUSH
17876: CALL_OW 50
17880: GO 17894
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17882: CALL_OW 45
17886: PPUSH
17887: LD_INT 1
17889: PPUSH
17890: CALL_OW 51
// end ;
17894: GO 17768
17896: POP
17897: POP
// end ;
17898: PPOPN 2
17900: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17901: LD_EXP 37
17905: PUSH
17906: LD_EXP 83
17910: AND
17911: IFFALSE 18133
17913: GO 17915
17915: DISABLE
17916: LD_INT 0
17918: PPUSH
17919: PPUSH
17920: PPUSH
17921: PPUSH
17922: PPUSH
17923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17924: LD_ADDR_VAR 0 6
17928: PUSH
17929: LD_INT 22
17931: PUSH
17932: LD_OWVAR 2
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 21
17943: PUSH
17944: LD_INT 1
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 3
17953: PUSH
17954: LD_INT 23
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: PPUSH
17973: CALL_OW 69
17977: ST_TO_ADDR
// if not tmp then
17978: LD_VAR 0 6
17982: NOT
17983: IFFALSE 17987
// exit ;
17985: GO 18133
// s1 := rand ( 1 , 4 ) ;
17987: LD_ADDR_VAR 0 2
17991: PUSH
17992: LD_INT 1
17994: PPUSH
17995: LD_INT 4
17997: PPUSH
17998: CALL_OW 12
18002: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18003: LD_ADDR_VAR 0 4
18007: PUSH
18008: LD_VAR 0 6
18012: PUSH
18013: LD_INT 1
18015: ARRAY
18016: PPUSH
18017: LD_VAR 0 2
18021: PPUSH
18022: CALL_OW 259
18026: ST_TO_ADDR
// if s1 = 1 then
18027: LD_VAR 0 2
18031: PUSH
18032: LD_INT 1
18034: EQUAL
18035: IFFALSE 18055
// s2 := rand ( 2 , 4 ) else
18037: LD_ADDR_VAR 0 3
18041: PUSH
18042: LD_INT 2
18044: PPUSH
18045: LD_INT 4
18047: PPUSH
18048: CALL_OW 12
18052: ST_TO_ADDR
18053: GO 18063
// s2 := 1 ;
18055: LD_ADDR_VAR 0 3
18059: PUSH
18060: LD_INT 1
18062: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18063: LD_ADDR_VAR 0 5
18067: PUSH
18068: LD_VAR 0 6
18072: PUSH
18073: LD_INT 1
18075: ARRAY
18076: PPUSH
18077: LD_VAR 0 3
18081: PPUSH
18082: CALL_OW 259
18086: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18087: LD_VAR 0 6
18091: PUSH
18092: LD_INT 1
18094: ARRAY
18095: PPUSH
18096: LD_VAR 0 2
18100: PPUSH
18101: LD_VAR 0 5
18105: PPUSH
18106: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18110: LD_VAR 0 6
18114: PUSH
18115: LD_INT 1
18117: ARRAY
18118: PPUSH
18119: LD_VAR 0 3
18123: PPUSH
18124: LD_VAR 0 4
18128: PPUSH
18129: CALL_OW 237
// end ;
18133: PPOPN 6
18135: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18136: LD_EXP 37
18140: PUSH
18141: LD_EXP 84
18145: AND
18146: IFFALSE 18225
18148: GO 18150
18150: DISABLE
18151: LD_INT 0
18153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18154: LD_ADDR_VAR 0 1
18158: PUSH
18159: LD_INT 22
18161: PUSH
18162: LD_OWVAR 2
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 30
18173: PUSH
18174: LD_INT 3
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PPUSH
18185: CALL_OW 69
18189: ST_TO_ADDR
// if not tmp then
18190: LD_VAR 0 1
18194: NOT
18195: IFFALSE 18199
// exit ;
18197: GO 18225
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18199: LD_VAR 0 1
18203: PUSH
18204: LD_INT 1
18206: PPUSH
18207: LD_VAR 0 1
18211: PPUSH
18212: CALL_OW 12
18216: ARRAY
18217: PPUSH
18218: LD_INT 1
18220: PPUSH
18221: CALL_OW 234
// end ;
18225: PPOPN 1
18227: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18228: LD_EXP 37
18232: PUSH
18233: LD_EXP 85
18237: AND
18238: IFFALSE 18350
18240: GO 18242
18242: DISABLE
18243: LD_INT 0
18245: PPUSH
18246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18247: LD_ADDR_VAR 0 2
18251: PUSH
18252: LD_INT 22
18254: PUSH
18255: LD_OWVAR 2
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_INT 27
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 26
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 30
18289: PUSH
18290: LD_INT 28
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PPUSH
18307: CALL_OW 69
18311: ST_TO_ADDR
// if not tmp then
18312: LD_VAR 0 2
18316: NOT
18317: IFFALSE 18321
// exit ;
18319: GO 18350
// for i in tmp do
18321: LD_ADDR_VAR 0 1
18325: PUSH
18326: LD_VAR 0 2
18330: PUSH
18331: FOR_IN
18332: IFFALSE 18348
// SetLives ( i , 1 ) ;
18334: LD_VAR 0 1
18338: PPUSH
18339: LD_INT 1
18341: PPUSH
18342: CALL_OW 234
18346: GO 18331
18348: POP
18349: POP
// end ;
18350: PPOPN 2
18352: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18353: LD_EXP 37
18357: PUSH
18358: LD_EXP 86
18362: AND
18363: IFFALSE 18650
18365: GO 18367
18367: DISABLE
18368: LD_INT 0
18370: PPUSH
18371: PPUSH
18372: PPUSH
// begin i := rand ( 1 , 7 ) ;
18373: LD_ADDR_VAR 0 1
18377: PUSH
18378: LD_INT 1
18380: PPUSH
18381: LD_INT 7
18383: PPUSH
18384: CALL_OW 12
18388: ST_TO_ADDR
// case i of 1 :
18389: LD_VAR 0 1
18393: PUSH
18394: LD_INT 1
18396: DOUBLE
18397: EQUAL
18398: IFTRUE 18402
18400: GO 18412
18402: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18403: LD_STRING earthquake(getX(game), 0, 32)
18405: PPUSH
18406: CALL_OW 559
18410: GO 18650
18412: LD_INT 2
18414: DOUBLE
18415: EQUAL
18416: IFTRUE 18420
18418: GO 18434
18420: POP
// begin ToLua ( displayStucuk(); ) ;
18421: LD_STRING displayStucuk();
18423: PPUSH
18424: CALL_OW 559
// ResetFog ;
18428: CALL_OW 335
// end ; 3 :
18432: GO 18650
18434: LD_INT 3
18436: DOUBLE
18437: EQUAL
18438: IFTRUE 18442
18440: GO 18546
18442: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18443: LD_ADDR_VAR 0 2
18447: PUSH
18448: LD_INT 22
18450: PUSH
18451: LD_OWVAR 2
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 25
18462: PUSH
18463: LD_INT 1
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: ST_TO_ADDR
// if not tmp then
18479: LD_VAR 0 2
18483: NOT
18484: IFFALSE 18488
// exit ;
18486: GO 18650
// un := tmp [ rand ( 1 , tmp ) ] ;
18488: LD_ADDR_VAR 0 3
18492: PUSH
18493: LD_VAR 0 2
18497: PUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_VAR 0 2
18505: PPUSH
18506: CALL_OW 12
18510: ARRAY
18511: ST_TO_ADDR
// if Crawls ( un ) then
18512: LD_VAR 0 3
18516: PPUSH
18517: CALL_OW 318
18521: IFFALSE 18532
// ComWalk ( un ) ;
18523: LD_VAR 0 3
18527: PPUSH
18528: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18532: LD_VAR 0 3
18536: PPUSH
18537: LD_INT 8
18539: PPUSH
18540: CALL_OW 336
// end ; 4 :
18544: GO 18650
18546: LD_INT 4
18548: DOUBLE
18549: EQUAL
18550: IFTRUE 18554
18552: GO 18628
18554: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18555: LD_ADDR_VAR 0 2
18559: PUSH
18560: LD_INT 22
18562: PUSH
18563: LD_OWVAR 2
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 30
18574: PUSH
18575: LD_INT 29
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PPUSH
18586: CALL_OW 69
18590: ST_TO_ADDR
// if not tmp then
18591: LD_VAR 0 2
18595: NOT
18596: IFFALSE 18600
// exit ;
18598: GO 18650
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18600: LD_VAR 0 2
18604: PUSH
18605: LD_INT 1
18607: ARRAY
18608: PPUSH
18609: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18613: LD_VAR 0 2
18617: PUSH
18618: LD_INT 1
18620: ARRAY
18621: PPUSH
18622: CALL_OW 65
// end ; 5 .. 7 :
18626: GO 18650
18628: LD_INT 5
18630: DOUBLE
18631: GREATEREQUAL
18632: IFFALSE 18640
18634: LD_INT 7
18636: DOUBLE
18637: LESSEQUAL
18638: IFTRUE 18642
18640: GO 18649
18642: POP
// StreamSibBomb ; end ;
18643: CALL 14887 0 0
18647: GO 18650
18649: POP
// end ;
18650: PPOPN 3
18652: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18653: LD_EXP 37
18657: PUSH
18658: LD_EXP 87
18662: AND
18663: IFFALSE 18819
18665: GO 18667
18667: DISABLE
18668: LD_INT 0
18670: PPUSH
18671: PPUSH
18672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18673: LD_ADDR_VAR 0 2
18677: PUSH
18678: LD_INT 81
18680: PUSH
18681: LD_OWVAR 2
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: LD_INT 21
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 21
18705: PUSH
18706: LD_INT 2
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: LIST
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PPUSH
18722: CALL_OW 69
18726: ST_TO_ADDR
// if not tmp then
18727: LD_VAR 0 2
18731: NOT
18732: IFFALSE 18736
// exit ;
18734: GO 18819
// p := 0 ;
18736: LD_ADDR_VAR 0 3
18740: PUSH
18741: LD_INT 0
18743: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18744: LD_INT 35
18746: PPUSH
18747: CALL_OW 67
// p := p + 1 ;
18751: LD_ADDR_VAR 0 3
18755: PUSH
18756: LD_VAR 0 3
18760: PUSH
18761: LD_INT 1
18763: PLUS
18764: ST_TO_ADDR
// for i in tmp do
18765: LD_ADDR_VAR 0 1
18769: PUSH
18770: LD_VAR 0 2
18774: PUSH
18775: FOR_IN
18776: IFFALSE 18807
// if GetLives ( i ) < 1000 then
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 256
18787: PUSH
18788: LD_INT 1000
18790: LESS
18791: IFFALSE 18805
// SetLives ( i , 1000 ) ;
18793: LD_VAR 0 1
18797: PPUSH
18798: LD_INT 1000
18800: PPUSH
18801: CALL_OW 234
18805: GO 18775
18807: POP
18808: POP
// until p > 20 ;
18809: LD_VAR 0 3
18813: PUSH
18814: LD_INT 20
18816: GREATER
18817: IFFALSE 18744
// end ;
18819: PPOPN 3
18821: END
// every 0 0$1 trigger StreamModeActive and sTime do
18822: LD_EXP 37
18826: PUSH
18827: LD_EXP 88
18831: AND
18832: IFFALSE 18867
18834: GO 18836
18836: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18837: LD_INT 28
18839: PPUSH
18840: LD_OWVAR 2
18844: PPUSH
18845: LD_INT 2
18847: PPUSH
18848: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18852: LD_INT 30
18854: PPUSH
18855: LD_OWVAR 2
18859: PPUSH
18860: LD_INT 2
18862: PPUSH
18863: CALL_OW 322
// end ;
18867: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18868: LD_EXP 37
18872: PUSH
18873: LD_EXP 89
18877: AND
18878: IFFALSE 18999
18880: GO 18882
18882: DISABLE
18883: LD_INT 0
18885: PPUSH
18886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18887: LD_ADDR_VAR 0 2
18891: PUSH
18892: LD_INT 22
18894: PUSH
18895: LD_OWVAR 2
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 21
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 3
18916: PUSH
18917: LD_INT 23
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: PPUSH
18936: CALL_OW 69
18940: ST_TO_ADDR
// if not tmp then
18941: LD_VAR 0 2
18945: NOT
18946: IFFALSE 18950
// exit ;
18948: GO 18999
// for i in tmp do
18950: LD_ADDR_VAR 0 1
18954: PUSH
18955: LD_VAR 0 2
18959: PUSH
18960: FOR_IN
18961: IFFALSE 18997
// begin if Crawls ( i ) then
18963: LD_VAR 0 1
18967: PPUSH
18968: CALL_OW 318
18972: IFFALSE 18983
// ComWalk ( i ) ;
18974: LD_VAR 0 1
18978: PPUSH
18979: CALL_OW 138
// SetClass ( i , 2 ) ;
18983: LD_VAR 0 1
18987: PPUSH
18988: LD_INT 2
18990: PPUSH
18991: CALL_OW 336
// end ;
18995: GO 18960
18997: POP
18998: POP
// end ;
18999: PPOPN 2
19001: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19002: LD_EXP 37
19006: PUSH
19007: LD_EXP 90
19011: AND
19012: IFFALSE 19300
19014: GO 19016
19016: DISABLE
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
19021: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19022: LD_OWVAR 2
19026: PPUSH
19027: LD_INT 9
19029: PPUSH
19030: LD_INT 1
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19040: LD_INT 9
19042: PPUSH
19043: LD_OWVAR 2
19047: PPUSH
19048: CALL_OW 343
// uc_side := 9 ;
19052: LD_ADDR_OWVAR 20
19056: PUSH
19057: LD_INT 9
19059: ST_TO_ADDR
// uc_nation := 2 ;
19060: LD_ADDR_OWVAR 21
19064: PUSH
19065: LD_INT 2
19067: ST_TO_ADDR
// hc_name := Dark Warrior ;
19068: LD_ADDR_OWVAR 26
19072: PUSH
19073: LD_STRING Dark Warrior
19075: ST_TO_ADDR
// hc_gallery :=  ;
19076: LD_ADDR_OWVAR 33
19080: PUSH
19081: LD_STRING 
19083: ST_TO_ADDR
// hc_noskilllimit := true ;
19084: LD_ADDR_OWVAR 76
19088: PUSH
19089: LD_INT 1
19091: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19092: LD_ADDR_OWVAR 31
19096: PUSH
19097: LD_INT 30
19099: PUSH
19100: LD_INT 30
19102: PUSH
19103: LD_INT 30
19105: PUSH
19106: LD_INT 30
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: ST_TO_ADDR
// un := CreateHuman ;
19115: LD_ADDR_VAR 0 3
19119: PUSH
19120: CALL_OW 44
19124: ST_TO_ADDR
// hc_noskilllimit := false ;
19125: LD_ADDR_OWVAR 76
19129: PUSH
19130: LD_INT 0
19132: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19133: LD_VAR 0 3
19137: PPUSH
19138: LD_INT 1
19140: PPUSH
19141: CALL_OW 51
// ToLua ( playRanger() ) ;
19145: LD_STRING playRanger()
19147: PPUSH
19148: CALL_OW 559
// p := 0 ;
19152: LD_ADDR_VAR 0 2
19156: PUSH
19157: LD_INT 0
19159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19160: LD_INT 35
19162: PPUSH
19163: CALL_OW 67
// p := p + 1 ;
19167: LD_ADDR_VAR 0 2
19171: PUSH
19172: LD_VAR 0 2
19176: PUSH
19177: LD_INT 1
19179: PLUS
19180: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19181: LD_VAR 0 3
19185: PPUSH
19186: CALL_OW 256
19190: PUSH
19191: LD_INT 1000
19193: LESS
19194: IFFALSE 19208
// SetLives ( un , 1000 ) ;
19196: LD_VAR 0 3
19200: PPUSH
19201: LD_INT 1000
19203: PPUSH
19204: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19208: LD_VAR 0 3
19212: PPUSH
19213: LD_INT 81
19215: PUSH
19216: LD_OWVAR 2
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 91
19227: PUSH
19228: LD_VAR 0 3
19232: PUSH
19233: LD_INT 30
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PPUSH
19245: CALL_OW 69
19249: PPUSH
19250: LD_VAR 0 3
19254: PPUSH
19255: CALL_OW 74
19259: PPUSH
19260: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19264: LD_VAR 0 2
19268: PUSH
19269: LD_INT 80
19271: GREATER
19272: PUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: CALL_OW 301
19282: OR
19283: IFFALSE 19160
// if un then
19285: LD_VAR 0 3
19289: IFFALSE 19300
// RemoveUnit ( un ) ;
19291: LD_VAR 0 3
19295: PPUSH
19296: CALL_OW 64
// end ;
19300: PPOPN 3
19302: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19303: LD_EXP 91
19307: IFFALSE 19423
19309: GO 19311
19311: DISABLE
19312: LD_INT 0
19314: PPUSH
19315: PPUSH
19316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19317: LD_ADDR_VAR 0 2
19321: PUSH
19322: LD_INT 81
19324: PUSH
19325: LD_OWVAR 2
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 21
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PPUSH
19348: CALL_OW 69
19352: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19353: LD_STRING playComputer()
19355: PPUSH
19356: CALL_OW 559
// if not tmp then
19360: LD_VAR 0 2
19364: NOT
19365: IFFALSE 19369
// exit ;
19367: GO 19423
// for i in tmp do
19369: LD_ADDR_VAR 0 1
19373: PUSH
19374: LD_VAR 0 2
19378: PUSH
19379: FOR_IN
19380: IFFALSE 19421
// for j := 1 to 4 do
19382: LD_ADDR_VAR 0 3
19386: PUSH
19387: DOUBLE
19388: LD_INT 1
19390: DEC
19391: ST_TO_ADDR
19392: LD_INT 4
19394: PUSH
19395: FOR_TO
19396: IFFALSE 19417
// SetSkill ( i , j , 10 ) ;
19398: LD_VAR 0 1
19402: PPUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: LD_INT 10
19410: PPUSH
19411: CALL_OW 237
19415: GO 19395
19417: POP
19418: POP
19419: GO 19379
19421: POP
19422: POP
// end ;
19423: PPOPN 3
19425: END
// every 0 0$1 trigger s30 do var i , tmp ;
19426: LD_EXP 92
19430: IFFALSE 19499
19432: GO 19434
19434: DISABLE
19435: LD_INT 0
19437: PPUSH
19438: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19439: LD_ADDR_VAR 0 2
19443: PUSH
19444: LD_INT 22
19446: PUSH
19447: LD_OWVAR 2
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PPUSH
19456: CALL_OW 69
19460: ST_TO_ADDR
// if not tmp then
19461: LD_VAR 0 2
19465: NOT
19466: IFFALSE 19470
// exit ;
19468: GO 19499
// for i in tmp do
19470: LD_ADDR_VAR 0 1
19474: PUSH
19475: LD_VAR 0 2
19479: PUSH
19480: FOR_IN
19481: IFFALSE 19497
// SetLives ( i , 300 ) ;
19483: LD_VAR 0 1
19487: PPUSH
19488: LD_INT 300
19490: PPUSH
19491: CALL_OW 234
19495: GO 19480
19497: POP
19498: POP
// end ;
19499: PPOPN 2
19501: END
// every 0 0$1 trigger s60 do var i , tmp ;
19502: LD_EXP 93
19506: IFFALSE 19575
19508: GO 19510
19510: DISABLE
19511: LD_INT 0
19513: PPUSH
19514: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19515: LD_ADDR_VAR 0 2
19519: PUSH
19520: LD_INT 22
19522: PUSH
19523: LD_OWVAR 2
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PPUSH
19532: CALL_OW 69
19536: ST_TO_ADDR
// if not tmp then
19537: LD_VAR 0 2
19541: NOT
19542: IFFALSE 19546
// exit ;
19544: GO 19575
// for i in tmp do
19546: LD_ADDR_VAR 0 1
19550: PUSH
19551: LD_VAR 0 2
19555: PUSH
19556: FOR_IN
19557: IFFALSE 19573
// SetLives ( i , 600 ) ;
19559: LD_VAR 0 1
19563: PPUSH
19564: LD_INT 600
19566: PPUSH
19567: CALL_OW 234
19571: GO 19556
19573: POP
19574: POP
// end ;
19575: PPOPN 2
19577: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19578: LD_INT 0
19580: PPUSH
// case cmd of 301 :
19581: LD_VAR 0 1
19585: PUSH
19586: LD_INT 301
19588: DOUBLE
19589: EQUAL
19590: IFTRUE 19594
19592: GO 19626
19594: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19595: LD_VAR 0 6
19599: PPUSH
19600: LD_VAR 0 7
19604: PPUSH
19605: LD_VAR 0 8
19609: PPUSH
19610: LD_VAR 0 4
19614: PPUSH
19615: LD_VAR 0 5
19619: PPUSH
19620: CALL 20827 0 5
19624: GO 19747
19626: LD_INT 302
19628: DOUBLE
19629: EQUAL
19630: IFTRUE 19634
19632: GO 19671
19634: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19635: LD_VAR 0 6
19639: PPUSH
19640: LD_VAR 0 7
19644: PPUSH
19645: LD_VAR 0 8
19649: PPUSH
19650: LD_VAR 0 9
19654: PPUSH
19655: LD_VAR 0 4
19659: PPUSH
19660: LD_VAR 0 5
19664: PPUSH
19665: CALL 20918 0 6
19669: GO 19747
19671: LD_INT 303
19673: DOUBLE
19674: EQUAL
19675: IFTRUE 19679
19677: GO 19716
19679: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19680: LD_VAR 0 6
19684: PPUSH
19685: LD_VAR 0 7
19689: PPUSH
19690: LD_VAR 0 8
19694: PPUSH
19695: LD_VAR 0 9
19699: PPUSH
19700: LD_VAR 0 4
19704: PPUSH
19705: LD_VAR 0 5
19709: PPUSH
19710: CALL 19752 0 6
19714: GO 19747
19716: LD_INT 304
19718: DOUBLE
19719: EQUAL
19720: IFTRUE 19724
19722: GO 19746
19724: POP
// hHackTeleport ( unit , x , y ) ; end ;
19725: LD_VAR 0 2
19729: PPUSH
19730: LD_VAR 0 4
19734: PPUSH
19735: LD_VAR 0 5
19739: PPUSH
19740: CALL 21511 0 3
19744: GO 19747
19746: POP
// end ;
19747: LD_VAR 0 12
19751: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19752: LD_INT 0
19754: PPUSH
19755: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19756: LD_VAR 0 1
19760: PUSH
19761: LD_INT 1
19763: LESS
19764: PUSH
19765: LD_VAR 0 1
19769: PUSH
19770: LD_INT 3
19772: GREATER
19773: OR
19774: PUSH
19775: LD_VAR 0 5
19779: PPUSH
19780: LD_VAR 0 6
19784: PPUSH
19785: CALL_OW 428
19789: OR
19790: IFFALSE 19794
// exit ;
19792: GO 20514
// uc_side := your_side ;
19794: LD_ADDR_OWVAR 20
19798: PUSH
19799: LD_OWVAR 2
19803: ST_TO_ADDR
// uc_nation := nation ;
19804: LD_ADDR_OWVAR 21
19808: PUSH
19809: LD_VAR 0 1
19813: ST_TO_ADDR
// bc_level = 1 ;
19814: LD_ADDR_OWVAR 43
19818: PUSH
19819: LD_INT 1
19821: ST_TO_ADDR
// case btype of 1 :
19822: LD_VAR 0 2
19826: PUSH
19827: LD_INT 1
19829: DOUBLE
19830: EQUAL
19831: IFTRUE 19835
19833: GO 19846
19835: POP
// bc_type := b_depot ; 2 :
19836: LD_ADDR_OWVAR 42
19840: PUSH
19841: LD_INT 0
19843: ST_TO_ADDR
19844: GO 20458
19846: LD_INT 2
19848: DOUBLE
19849: EQUAL
19850: IFTRUE 19854
19852: GO 19865
19854: POP
// bc_type := b_warehouse ; 3 :
19855: LD_ADDR_OWVAR 42
19859: PUSH
19860: LD_INT 1
19862: ST_TO_ADDR
19863: GO 20458
19865: LD_INT 3
19867: DOUBLE
19868: EQUAL
19869: IFTRUE 19873
19871: GO 19884
19873: POP
// bc_type := b_lab ; 4 .. 9 :
19874: LD_ADDR_OWVAR 42
19878: PUSH
19879: LD_INT 6
19881: ST_TO_ADDR
19882: GO 20458
19884: LD_INT 4
19886: DOUBLE
19887: GREATEREQUAL
19888: IFFALSE 19896
19890: LD_INT 9
19892: DOUBLE
19893: LESSEQUAL
19894: IFTRUE 19898
19896: GO 19950
19898: POP
// begin bc_type := b_lab_half ;
19899: LD_ADDR_OWVAR 42
19903: PUSH
19904: LD_INT 7
19906: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19907: LD_ADDR_OWVAR 44
19911: PUSH
19912: LD_INT 10
19914: PUSH
19915: LD_INT 11
19917: PUSH
19918: LD_INT 12
19920: PUSH
19921: LD_INT 15
19923: PUSH
19924: LD_INT 14
19926: PUSH
19927: LD_INT 13
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: PUSH
19938: LD_VAR 0 2
19942: PUSH
19943: LD_INT 3
19945: MINUS
19946: ARRAY
19947: ST_TO_ADDR
// end ; 10 .. 13 :
19948: GO 20458
19950: LD_INT 10
19952: DOUBLE
19953: GREATEREQUAL
19954: IFFALSE 19962
19956: LD_INT 13
19958: DOUBLE
19959: LESSEQUAL
19960: IFTRUE 19964
19962: GO 20041
19964: POP
// begin bc_type := b_lab_full ;
19965: LD_ADDR_OWVAR 42
19969: PUSH
19970: LD_INT 8
19972: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19973: LD_ADDR_OWVAR 44
19977: PUSH
19978: LD_INT 10
19980: PUSH
19981: LD_INT 12
19983: PUSH
19984: LD_INT 14
19986: PUSH
19987: LD_INT 13
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: PUSH
19996: LD_VAR 0 2
20000: PUSH
20001: LD_INT 9
20003: MINUS
20004: ARRAY
20005: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20006: LD_ADDR_OWVAR 45
20010: PUSH
20011: LD_INT 11
20013: PUSH
20014: LD_INT 15
20016: PUSH
20017: LD_INT 12
20019: PUSH
20020: LD_INT 15
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: PUSH
20029: LD_VAR 0 2
20033: PUSH
20034: LD_INT 9
20036: MINUS
20037: ARRAY
20038: ST_TO_ADDR
// end ; 14 :
20039: GO 20458
20041: LD_INT 14
20043: DOUBLE
20044: EQUAL
20045: IFTRUE 20049
20047: GO 20060
20049: POP
// bc_type := b_workshop ; 15 :
20050: LD_ADDR_OWVAR 42
20054: PUSH
20055: LD_INT 2
20057: ST_TO_ADDR
20058: GO 20458
20060: LD_INT 15
20062: DOUBLE
20063: EQUAL
20064: IFTRUE 20068
20066: GO 20079
20068: POP
// bc_type := b_factory ; 16 :
20069: LD_ADDR_OWVAR 42
20073: PUSH
20074: LD_INT 3
20076: ST_TO_ADDR
20077: GO 20458
20079: LD_INT 16
20081: DOUBLE
20082: EQUAL
20083: IFTRUE 20087
20085: GO 20098
20087: POP
// bc_type := b_ext_gun ; 17 :
20088: LD_ADDR_OWVAR 42
20092: PUSH
20093: LD_INT 17
20095: ST_TO_ADDR
20096: GO 20458
20098: LD_INT 17
20100: DOUBLE
20101: EQUAL
20102: IFTRUE 20106
20104: GO 20134
20106: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20107: LD_ADDR_OWVAR 42
20111: PUSH
20112: LD_INT 19
20114: PUSH
20115: LD_INT 23
20117: PUSH
20118: LD_INT 19
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: PUSH
20126: LD_VAR 0 1
20130: ARRAY
20131: ST_TO_ADDR
20132: GO 20458
20134: LD_INT 18
20136: DOUBLE
20137: EQUAL
20138: IFTRUE 20142
20140: GO 20153
20142: POP
// bc_type := b_ext_radar ; 19 :
20143: LD_ADDR_OWVAR 42
20147: PUSH
20148: LD_INT 20
20150: ST_TO_ADDR
20151: GO 20458
20153: LD_INT 19
20155: DOUBLE
20156: EQUAL
20157: IFTRUE 20161
20159: GO 20172
20161: POP
// bc_type := b_ext_radio ; 20 :
20162: LD_ADDR_OWVAR 42
20166: PUSH
20167: LD_INT 22
20169: ST_TO_ADDR
20170: GO 20458
20172: LD_INT 20
20174: DOUBLE
20175: EQUAL
20176: IFTRUE 20180
20178: GO 20191
20180: POP
// bc_type := b_ext_siberium ; 21 :
20181: LD_ADDR_OWVAR 42
20185: PUSH
20186: LD_INT 21
20188: ST_TO_ADDR
20189: GO 20458
20191: LD_INT 21
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20210
20199: POP
// bc_type := b_ext_computer ; 22 :
20200: LD_ADDR_OWVAR 42
20204: PUSH
20205: LD_INT 24
20207: ST_TO_ADDR
20208: GO 20458
20210: LD_INT 22
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20229
20218: POP
// bc_type := b_ext_track ; 23 :
20219: LD_ADDR_OWVAR 42
20223: PUSH
20224: LD_INT 16
20226: ST_TO_ADDR
20227: GO 20458
20229: LD_INT 23
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20248
20237: POP
// bc_type := b_ext_laser ; 24 :
20238: LD_ADDR_OWVAR 42
20242: PUSH
20243: LD_INT 25
20245: ST_TO_ADDR
20246: GO 20458
20248: LD_INT 24
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20267
20256: POP
// bc_type := b_control_tower ; 25 :
20257: LD_ADDR_OWVAR 42
20261: PUSH
20262: LD_INT 36
20264: ST_TO_ADDR
20265: GO 20458
20267: LD_INT 25
20269: DOUBLE
20270: EQUAL
20271: IFTRUE 20275
20273: GO 20286
20275: POP
// bc_type := b_breastwork ; 26 :
20276: LD_ADDR_OWVAR 42
20280: PUSH
20281: LD_INT 31
20283: ST_TO_ADDR
20284: GO 20458
20286: LD_INT 26
20288: DOUBLE
20289: EQUAL
20290: IFTRUE 20294
20292: GO 20305
20294: POP
// bc_type := b_bunker ; 27 :
20295: LD_ADDR_OWVAR 42
20299: PUSH
20300: LD_INT 32
20302: ST_TO_ADDR
20303: GO 20458
20305: LD_INT 27
20307: DOUBLE
20308: EQUAL
20309: IFTRUE 20313
20311: GO 20324
20313: POP
// bc_type := b_turret ; 28 :
20314: LD_ADDR_OWVAR 42
20318: PUSH
20319: LD_INT 33
20321: ST_TO_ADDR
20322: GO 20458
20324: LD_INT 28
20326: DOUBLE
20327: EQUAL
20328: IFTRUE 20332
20330: GO 20343
20332: POP
// bc_type := b_armoury ; 29 :
20333: LD_ADDR_OWVAR 42
20337: PUSH
20338: LD_INT 4
20340: ST_TO_ADDR
20341: GO 20458
20343: LD_INT 29
20345: DOUBLE
20346: EQUAL
20347: IFTRUE 20351
20349: GO 20362
20351: POP
// bc_type := b_barracks ; 30 :
20352: LD_ADDR_OWVAR 42
20356: PUSH
20357: LD_INT 5
20359: ST_TO_ADDR
20360: GO 20458
20362: LD_INT 30
20364: DOUBLE
20365: EQUAL
20366: IFTRUE 20370
20368: GO 20381
20370: POP
// bc_type := b_solar_power ; 31 :
20371: LD_ADDR_OWVAR 42
20375: PUSH
20376: LD_INT 27
20378: ST_TO_ADDR
20379: GO 20458
20381: LD_INT 31
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20400
20389: POP
// bc_type := b_oil_power ; 32 :
20390: LD_ADDR_OWVAR 42
20394: PUSH
20395: LD_INT 26
20397: ST_TO_ADDR
20398: GO 20458
20400: LD_INT 32
20402: DOUBLE
20403: EQUAL
20404: IFTRUE 20408
20406: GO 20419
20408: POP
// bc_type := b_siberite_power ; 33 :
20409: LD_ADDR_OWVAR 42
20413: PUSH
20414: LD_INT 28
20416: ST_TO_ADDR
20417: GO 20458
20419: LD_INT 33
20421: DOUBLE
20422: EQUAL
20423: IFTRUE 20427
20425: GO 20438
20427: POP
// bc_type := b_oil_mine ; 34 :
20428: LD_ADDR_OWVAR 42
20432: PUSH
20433: LD_INT 29
20435: ST_TO_ADDR
20436: GO 20458
20438: LD_INT 34
20440: DOUBLE
20441: EQUAL
20442: IFTRUE 20446
20444: GO 20457
20446: POP
// bc_type := b_siberite_mine ; end ;
20447: LD_ADDR_OWVAR 42
20451: PUSH
20452: LD_INT 30
20454: ST_TO_ADDR
20455: GO 20458
20457: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20458: LD_ADDR_VAR 0 8
20462: PUSH
20463: LD_VAR 0 5
20467: PPUSH
20468: LD_VAR 0 6
20472: PPUSH
20473: LD_VAR 0 3
20477: PPUSH
20478: CALL_OW 47
20482: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20483: LD_OWVAR 42
20487: PUSH
20488: LD_INT 32
20490: PUSH
20491: LD_INT 33
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: IN
20498: IFFALSE 20514
// PlaceWeaponTurret ( b , weapon ) ;
20500: LD_VAR 0 8
20504: PPUSH
20505: LD_VAR 0 4
20509: PPUSH
20510: CALL_OW 431
// end ;
20514: LD_VAR 0 7
20518: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20519: LD_INT 0
20521: PPUSH
20522: PPUSH
20523: PPUSH
20524: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20525: LD_ADDR_VAR 0 4
20529: PUSH
20530: LD_INT 22
20532: PUSH
20533: LD_OWVAR 2
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 2
20544: PUSH
20545: LD_INT 30
20547: PUSH
20548: LD_INT 0
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 30
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: LIST
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PPUSH
20574: CALL_OW 69
20578: ST_TO_ADDR
// if not tmp then
20579: LD_VAR 0 4
20583: NOT
20584: IFFALSE 20588
// exit ;
20586: GO 20647
// for i in tmp do
20588: LD_ADDR_VAR 0 2
20592: PUSH
20593: LD_VAR 0 4
20597: PUSH
20598: FOR_IN
20599: IFFALSE 20645
// for j = 1 to 3 do
20601: LD_ADDR_VAR 0 3
20605: PUSH
20606: DOUBLE
20607: LD_INT 1
20609: DEC
20610: ST_TO_ADDR
20611: LD_INT 3
20613: PUSH
20614: FOR_TO
20615: IFFALSE 20641
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20617: LD_VAR 0 2
20621: PPUSH
20622: CALL_OW 274
20626: PPUSH
20627: LD_VAR 0 3
20631: PPUSH
20632: LD_INT 99999
20634: PPUSH
20635: CALL_OW 277
20639: GO 20614
20641: POP
20642: POP
20643: GO 20598
20645: POP
20646: POP
// end ;
20647: LD_VAR 0 1
20651: RET
// export function hHackSetLevel10 ; var i , j ; begin
20652: LD_INT 0
20654: PPUSH
20655: PPUSH
20656: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20657: LD_ADDR_VAR 0 2
20661: PUSH
20662: LD_INT 21
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PPUSH
20672: CALL_OW 69
20676: PUSH
20677: FOR_IN
20678: IFFALSE 20730
// if IsSelected ( i ) then
20680: LD_VAR 0 2
20684: PPUSH
20685: CALL_OW 306
20689: IFFALSE 20728
// begin for j := 1 to 4 do
20691: LD_ADDR_VAR 0 3
20695: PUSH
20696: DOUBLE
20697: LD_INT 1
20699: DEC
20700: ST_TO_ADDR
20701: LD_INT 4
20703: PUSH
20704: FOR_TO
20705: IFFALSE 20726
// SetSkill ( i , j , 10 ) ;
20707: LD_VAR 0 2
20711: PPUSH
20712: LD_VAR 0 3
20716: PPUSH
20717: LD_INT 10
20719: PPUSH
20720: CALL_OW 237
20724: GO 20704
20726: POP
20727: POP
// end ;
20728: GO 20677
20730: POP
20731: POP
// end ;
20732: LD_VAR 0 1
20736: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20737: LD_INT 0
20739: PPUSH
20740: PPUSH
20741: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20742: LD_ADDR_VAR 0 2
20746: PUSH
20747: LD_INT 22
20749: PUSH
20750: LD_OWVAR 2
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 21
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PPUSH
20773: CALL_OW 69
20777: PUSH
20778: FOR_IN
20779: IFFALSE 20820
// begin for j := 1 to 4 do
20781: LD_ADDR_VAR 0 3
20785: PUSH
20786: DOUBLE
20787: LD_INT 1
20789: DEC
20790: ST_TO_ADDR
20791: LD_INT 4
20793: PUSH
20794: FOR_TO
20795: IFFALSE 20816
// SetSkill ( i , j , 10 ) ;
20797: LD_VAR 0 2
20801: PPUSH
20802: LD_VAR 0 3
20806: PPUSH
20807: LD_INT 10
20809: PPUSH
20810: CALL_OW 237
20814: GO 20794
20816: POP
20817: POP
// end ;
20818: GO 20778
20820: POP
20821: POP
// end ;
20822: LD_VAR 0 1
20826: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20827: LD_INT 0
20829: PPUSH
// uc_side := your_side ;
20830: LD_ADDR_OWVAR 20
20834: PUSH
20835: LD_OWVAR 2
20839: ST_TO_ADDR
// uc_nation := nation ;
20840: LD_ADDR_OWVAR 21
20844: PUSH
20845: LD_VAR 0 1
20849: ST_TO_ADDR
// InitHc ;
20850: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20854: LD_INT 0
20856: PPUSH
20857: LD_VAR 0 2
20861: PPUSH
20862: LD_VAR 0 3
20866: PPUSH
20867: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20871: LD_VAR 0 4
20875: PPUSH
20876: LD_VAR 0 5
20880: PPUSH
20881: CALL_OW 428
20885: PUSH
20886: LD_INT 0
20888: EQUAL
20889: IFFALSE 20913
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20891: CALL_OW 44
20895: PPUSH
20896: LD_VAR 0 4
20900: PPUSH
20901: LD_VAR 0 5
20905: PPUSH
20906: LD_INT 1
20908: PPUSH
20909: CALL_OW 48
// end ;
20913: LD_VAR 0 6
20917: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20918: LD_INT 0
20920: PPUSH
20921: PPUSH
// uc_side := your_side ;
20922: LD_ADDR_OWVAR 20
20926: PUSH
20927: LD_OWVAR 2
20931: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20932: LD_VAR 0 1
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: LD_INT 2
20942: PUSH
20943: LD_INT 3
20945: PUSH
20946: LD_INT 4
20948: PUSH
20949: LD_INT 5
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: IN
20959: IFFALSE 20971
// uc_nation := nation_american else
20961: LD_ADDR_OWVAR 21
20965: PUSH
20966: LD_INT 1
20968: ST_TO_ADDR
20969: GO 21014
// if chassis in [ 11 , 12 , 13 , 14 ] then
20971: LD_VAR 0 1
20975: PUSH
20976: LD_INT 11
20978: PUSH
20979: LD_INT 12
20981: PUSH
20982: LD_INT 13
20984: PUSH
20985: LD_INT 14
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: IN
20994: IFFALSE 21006
// uc_nation := nation_arabian else
20996: LD_ADDR_OWVAR 21
21000: PUSH
21001: LD_INT 2
21003: ST_TO_ADDR
21004: GO 21014
// uc_nation := nation_russian ;
21006: LD_ADDR_OWVAR 21
21010: PUSH
21011: LD_INT 3
21013: ST_TO_ADDR
// vc_chassis := chassis ;
21014: LD_ADDR_OWVAR 37
21018: PUSH
21019: LD_VAR 0 1
21023: ST_TO_ADDR
// vc_engine := engine ;
21024: LD_ADDR_OWVAR 39
21028: PUSH
21029: LD_VAR 0 2
21033: ST_TO_ADDR
// vc_control := control ;
21034: LD_ADDR_OWVAR 38
21038: PUSH
21039: LD_VAR 0 3
21043: ST_TO_ADDR
// vc_weapon := weapon ;
21044: LD_ADDR_OWVAR 40
21048: PUSH
21049: LD_VAR 0 4
21053: ST_TO_ADDR
// un := CreateVehicle ;
21054: LD_ADDR_VAR 0 8
21058: PUSH
21059: CALL_OW 45
21063: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21064: LD_VAR 0 8
21068: PPUSH
21069: LD_INT 0
21071: PPUSH
21072: LD_INT 5
21074: PPUSH
21075: CALL_OW 12
21079: PPUSH
21080: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21084: LD_VAR 0 8
21088: PPUSH
21089: LD_VAR 0 5
21093: PPUSH
21094: LD_VAR 0 6
21098: PPUSH
21099: LD_INT 1
21101: PPUSH
21102: CALL_OW 48
// end ;
21106: LD_VAR 0 7
21110: RET
// export hInvincible ; every 1 do
21111: GO 21113
21113: DISABLE
// hInvincible := [ ] ;
21114: LD_ADDR_EXP 94
21118: PUSH
21119: EMPTY
21120: ST_TO_ADDR
21121: END
// every 10 do var i ;
21122: GO 21124
21124: DISABLE
21125: LD_INT 0
21127: PPUSH
// begin enable ;
21128: ENABLE
// if not hInvincible then
21129: LD_EXP 94
21133: NOT
21134: IFFALSE 21138
// exit ;
21136: GO 21182
// for i in hInvincible do
21138: LD_ADDR_VAR 0 1
21142: PUSH
21143: LD_EXP 94
21147: PUSH
21148: FOR_IN
21149: IFFALSE 21180
// if GetLives ( i ) < 1000 then
21151: LD_VAR 0 1
21155: PPUSH
21156: CALL_OW 256
21160: PUSH
21161: LD_INT 1000
21163: LESS
21164: IFFALSE 21178
// SetLives ( i , 1000 ) ;
21166: LD_VAR 0 1
21170: PPUSH
21171: LD_INT 1000
21173: PPUSH
21174: CALL_OW 234
21178: GO 21148
21180: POP
21181: POP
// end ;
21182: PPOPN 1
21184: END
// export function hHackInvincible ; var i ; begin
21185: LD_INT 0
21187: PPUSH
21188: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21189: LD_ADDR_VAR 0 2
21193: PUSH
21194: LD_INT 2
21196: PUSH
21197: LD_INT 21
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 21
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: LIST
21221: PPUSH
21222: CALL_OW 69
21226: PUSH
21227: FOR_IN
21228: IFFALSE 21289
// if IsSelected ( i ) then
21230: LD_VAR 0 2
21234: PPUSH
21235: CALL_OW 306
21239: IFFALSE 21287
// begin if i in hInvincible then
21241: LD_VAR 0 2
21245: PUSH
21246: LD_EXP 94
21250: IN
21251: IFFALSE 21271
// hInvincible := hInvincible diff i else
21253: LD_ADDR_EXP 94
21257: PUSH
21258: LD_EXP 94
21262: PUSH
21263: LD_VAR 0 2
21267: DIFF
21268: ST_TO_ADDR
21269: GO 21287
// hInvincible := hInvincible union i ;
21271: LD_ADDR_EXP 94
21275: PUSH
21276: LD_EXP 94
21280: PUSH
21281: LD_VAR 0 2
21285: UNION
21286: ST_TO_ADDR
// end ;
21287: GO 21227
21289: POP
21290: POP
// end ;
21291: LD_VAR 0 1
21295: RET
// export function hHackInvisible ; var i , j ; begin
21296: LD_INT 0
21298: PPUSH
21299: PPUSH
21300: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21301: LD_ADDR_VAR 0 2
21305: PUSH
21306: LD_INT 21
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PPUSH
21316: CALL_OW 69
21320: PUSH
21321: FOR_IN
21322: IFFALSE 21346
// if IsSelected ( i ) then
21324: LD_VAR 0 2
21328: PPUSH
21329: CALL_OW 306
21333: IFFALSE 21344
// ComForceInvisible ( i ) ;
21335: LD_VAR 0 2
21339: PPUSH
21340: CALL_OW 496
21344: GO 21321
21346: POP
21347: POP
// end ;
21348: LD_VAR 0 1
21352: RET
// export function hHackChangeYourSide ; begin
21353: LD_INT 0
21355: PPUSH
// if your_side = 8 then
21356: LD_OWVAR 2
21360: PUSH
21361: LD_INT 8
21363: EQUAL
21364: IFFALSE 21376
// your_side := 0 else
21366: LD_ADDR_OWVAR 2
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
21374: GO 21390
// your_side := your_side + 1 ;
21376: LD_ADDR_OWVAR 2
21380: PUSH
21381: LD_OWVAR 2
21385: PUSH
21386: LD_INT 1
21388: PLUS
21389: ST_TO_ADDR
// end ;
21390: LD_VAR 0 1
21394: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21395: LD_INT 0
21397: PPUSH
21398: PPUSH
21399: PPUSH
// for i in all_units do
21400: LD_ADDR_VAR 0 2
21404: PUSH
21405: LD_OWVAR 3
21409: PUSH
21410: FOR_IN
21411: IFFALSE 21489
// if IsSelected ( i ) then
21413: LD_VAR 0 2
21417: PPUSH
21418: CALL_OW 306
21422: IFFALSE 21487
// begin j := GetSide ( i ) ;
21424: LD_ADDR_VAR 0 3
21428: PUSH
21429: LD_VAR 0 2
21433: PPUSH
21434: CALL_OW 255
21438: ST_TO_ADDR
// if j = 8 then
21439: LD_VAR 0 3
21443: PUSH
21444: LD_INT 8
21446: EQUAL
21447: IFFALSE 21459
// j := 0 else
21449: LD_ADDR_VAR 0 3
21453: PUSH
21454: LD_INT 0
21456: ST_TO_ADDR
21457: GO 21473
// j := j + 1 ;
21459: LD_ADDR_VAR 0 3
21463: PUSH
21464: LD_VAR 0 3
21468: PUSH
21469: LD_INT 1
21471: PLUS
21472: ST_TO_ADDR
// SetSide ( i , j ) ;
21473: LD_VAR 0 2
21477: PPUSH
21478: LD_VAR 0 3
21482: PPUSH
21483: CALL_OW 235
// end ;
21487: GO 21410
21489: POP
21490: POP
// end ;
21491: LD_VAR 0 1
21495: RET
// export function hHackFog ; begin
21496: LD_INT 0
21498: PPUSH
// FogOff ( true ) ;
21499: LD_INT 1
21501: PPUSH
21502: CALL_OW 344
// end ;
21506: LD_VAR 0 1
21510: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21511: LD_INT 0
21513: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21514: LD_VAR 0 1
21518: PPUSH
21519: LD_VAR 0 2
21523: PPUSH
21524: LD_VAR 0 3
21528: PPUSH
21529: LD_INT 1
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 483
// CenterOnXY ( x , y ) ;
21539: LD_VAR 0 2
21543: PPUSH
21544: LD_VAR 0 3
21548: PPUSH
21549: CALL_OW 84
// end ; end_of_file
21553: LD_VAR 0 4
21557: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21558: LD_INT 0
21560: PPUSH
21561: PPUSH
21562: PPUSH
21563: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21564: LD_VAR 0 1
21568: PPUSH
21569: CALL_OW 264
21573: PUSH
21574: LD_EXP 22
21578: EQUAL
21579: IFFALSE 21651
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21581: LD_INT 68
21583: PPUSH
21584: LD_VAR 0 1
21588: PPUSH
21589: CALL_OW 255
21593: PPUSH
21594: CALL_OW 321
21598: PUSH
21599: LD_INT 2
21601: EQUAL
21602: IFFALSE 21614
// eff := 70 else
21604: LD_ADDR_VAR 0 4
21608: PUSH
21609: LD_INT 70
21611: ST_TO_ADDR
21612: GO 21622
// eff := 30 ;
21614: LD_ADDR_VAR 0 4
21618: PUSH
21619: LD_INT 30
21621: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21622: LD_VAR 0 1
21626: PPUSH
21627: CALL_OW 250
21631: PPUSH
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 251
21641: PPUSH
21642: LD_VAR 0 4
21646: PPUSH
21647: CALL_OW 495
// end ; end ;
21651: LD_VAR 0 2
21655: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21656: LD_INT 0
21658: PPUSH
// end ;
21659: LD_VAR 0 4
21663: RET
// export function SOS_Command ( cmd ) ; begin
21664: LD_INT 0
21666: PPUSH
// end ;
21667: LD_VAR 0 2
21671: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21672: LD_INT 0
21674: PPUSH
// end ;
21675: LD_VAR 0 6
21679: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21680: LD_INT 0
21682: PPUSH
21683: PPUSH
// if not vehicle or not factory then
21684: LD_VAR 0 1
21688: NOT
21689: PUSH
21690: LD_VAR 0 2
21694: NOT
21695: OR
21696: IFFALSE 21700
// exit ;
21698: GO 21931
// if factoryWaypoints >= factory then
21700: LD_EXP 95
21704: PUSH
21705: LD_VAR 0 2
21709: GREATEREQUAL
21710: IFFALSE 21931
// if factoryWaypoints [ factory ] then
21712: LD_EXP 95
21716: PUSH
21717: LD_VAR 0 2
21721: ARRAY
21722: IFFALSE 21931
// begin if GetControl ( vehicle ) = control_manual then
21724: LD_VAR 0 1
21728: PPUSH
21729: CALL_OW 263
21733: PUSH
21734: LD_INT 1
21736: EQUAL
21737: IFFALSE 21818
// begin driver := IsDrivenBy ( vehicle ) ;
21739: LD_ADDR_VAR 0 4
21743: PUSH
21744: LD_VAR 0 1
21748: PPUSH
21749: CALL_OW 311
21753: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
21754: LD_VAR 0 4
21758: PPUSH
21759: LD_EXP 95
21763: PUSH
21764: LD_VAR 0 2
21768: ARRAY
21769: PUSH
21770: LD_INT 1
21772: ARRAY
21773: PPUSH
21774: LD_EXP 95
21778: PUSH
21779: LD_VAR 0 2
21783: ARRAY
21784: PUSH
21785: LD_INT 2
21787: ARRAY
21788: PPUSH
21789: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21793: LD_VAR 0 4
21797: PPUSH
21798: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21802: LD_VAR 0 4
21806: PPUSH
21807: LD_VAR 0 2
21811: PPUSH
21812: CALL_OW 180
// end else
21816: GO 21931
// if GetControl ( vehicle ) = control_remote then
21818: LD_VAR 0 1
21822: PPUSH
21823: CALL_OW 263
21827: PUSH
21828: LD_INT 2
21830: EQUAL
21831: IFFALSE 21892
// begin wait ( 0 0$2 ) ;
21833: LD_INT 70
21835: PPUSH
21836: CALL_OW 67
// if Connect ( vehicle ) then
21840: LD_VAR 0 1
21844: PPUSH
21845: CALL 34155 0 1
21849: IFFALSE 21890
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
21851: LD_VAR 0 1
21855: PPUSH
21856: LD_EXP 95
21860: PUSH
21861: LD_VAR 0 2
21865: ARRAY
21866: PUSH
21867: LD_INT 1
21869: ARRAY
21870: PPUSH
21871: LD_EXP 95
21875: PUSH
21876: LD_VAR 0 2
21880: ARRAY
21881: PUSH
21882: LD_INT 2
21884: ARRAY
21885: PPUSH
21886: CALL_OW 171
// end else
21890: GO 21931
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
21892: LD_VAR 0 1
21896: PPUSH
21897: LD_EXP 95
21901: PUSH
21902: LD_VAR 0 2
21906: ARRAY
21907: PUSH
21908: LD_INT 1
21910: ARRAY
21911: PPUSH
21912: LD_EXP 95
21916: PUSH
21917: LD_VAR 0 2
21921: ARRAY
21922: PUSH
21923: LD_INT 2
21925: ARRAY
21926: PPUSH
21927: CALL_OW 171
// end ; end ;
21931: LD_VAR 0 3
21935: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21936: LD_INT 0
21938: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21939: LD_VAR 0 1
21943: PUSH
21944: LD_INT 250
21946: EQUAL
21947: PUSH
21948: LD_VAR 0 2
21952: PPUSH
21953: CALL_OW 264
21957: PUSH
21958: LD_EXP 25
21962: EQUAL
21963: AND
21964: IFFALSE 21985
// MinerPlaceMine ( unit , x , y ) ;
21966: LD_VAR 0 2
21970: PPUSH
21971: LD_VAR 0 4
21975: PPUSH
21976: LD_VAR 0 5
21980: PPUSH
21981: CALL 24713 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21985: LD_VAR 0 1
21989: PUSH
21990: LD_INT 251
21992: EQUAL
21993: PUSH
21994: LD_VAR 0 2
21998: PPUSH
21999: CALL_OW 264
22003: PUSH
22004: LD_EXP 25
22008: EQUAL
22009: AND
22010: IFFALSE 22031
// MinerDetonateMine ( unit , x , y ) ;
22012: LD_VAR 0 2
22016: PPUSH
22017: LD_VAR 0 4
22021: PPUSH
22022: LD_VAR 0 5
22026: PPUSH
22027: CALL 24990 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22031: LD_VAR 0 1
22035: PUSH
22036: LD_INT 252
22038: EQUAL
22039: PUSH
22040: LD_VAR 0 2
22044: PPUSH
22045: CALL_OW 264
22049: PUSH
22050: LD_EXP 25
22054: EQUAL
22055: AND
22056: IFFALSE 22077
// MinerCreateMinefield ( unit , x , y ) ;
22058: LD_VAR 0 2
22062: PPUSH
22063: LD_VAR 0 4
22067: PPUSH
22068: LD_VAR 0 5
22072: PPUSH
22073: CALL 25407 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22077: LD_VAR 0 1
22081: PUSH
22082: LD_INT 253
22084: EQUAL
22085: PUSH
22086: LD_VAR 0 2
22090: PPUSH
22091: CALL_OW 257
22095: PUSH
22096: LD_INT 5
22098: EQUAL
22099: AND
22100: IFFALSE 22121
// ComBinocular ( unit , x , y ) ;
22102: LD_VAR 0 2
22106: PPUSH
22107: LD_VAR 0 4
22111: PPUSH
22112: LD_VAR 0 5
22116: PPUSH
22117: CALL 25778 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22121: LD_VAR 0 1
22125: PUSH
22126: LD_INT 254
22128: EQUAL
22129: PUSH
22130: LD_VAR 0 2
22134: PPUSH
22135: CALL_OW 264
22139: PUSH
22140: LD_EXP 20
22144: EQUAL
22145: AND
22146: PUSH
22147: LD_VAR 0 3
22151: PPUSH
22152: CALL_OW 263
22156: PUSH
22157: LD_INT 3
22159: EQUAL
22160: AND
22161: IFFALSE 22177
// HackDestroyVehicle ( unit , selectedUnit ) ;
22163: LD_VAR 0 2
22167: PPUSH
22168: LD_VAR 0 3
22172: PPUSH
22173: CALL 24073 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22177: LD_VAR 0 1
22181: PUSH
22182: LD_INT 255
22184: EQUAL
22185: PUSH
22186: LD_VAR 0 2
22190: PPUSH
22191: CALL_OW 264
22195: PUSH
22196: LD_INT 14
22198: PUSH
22199: LD_INT 53
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: IN
22206: AND
22207: PUSH
22208: LD_VAR 0 4
22212: PPUSH
22213: LD_VAR 0 5
22217: PPUSH
22218: CALL_OW 488
22222: AND
22223: IFFALSE 22247
// CutTreeXYR ( unit , x , y , 12 ) ;
22225: LD_VAR 0 2
22229: PPUSH
22230: LD_VAR 0 4
22234: PPUSH
22235: LD_VAR 0 5
22239: PPUSH
22240: LD_INT 12
22242: PPUSH
22243: CALL 22639 0 4
// if cmd = 256 then
22247: LD_VAR 0 1
22251: PUSH
22252: LD_INT 256
22254: EQUAL
22255: IFFALSE 22276
// SetFactoryWaypoint ( unit , x , y ) ;
22257: LD_VAR 0 2
22261: PPUSH
22262: LD_VAR 0 4
22266: PPUSH
22267: LD_VAR 0 5
22271: PPUSH
22272: CALL 22281 0 3
// end ;
22276: LD_VAR 0 6
22280: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22281: LD_INT 0
22283: PPUSH
22284: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22285: LD_VAR 0 1
22289: NOT
22290: PUSH
22291: LD_VAR 0 2
22295: PPUSH
22296: LD_VAR 0 3
22300: PPUSH
22301: CALL_OW 488
22305: NOT
22306: OR
22307: PUSH
22308: LD_VAR 0 1
22312: PPUSH
22313: CALL_OW 266
22317: PUSH
22318: LD_INT 3
22320: NONEQUAL
22321: PUSH
22322: LD_VAR 0 1
22326: PPUSH
22327: CALL_OW 247
22331: PUSH
22332: LD_INT 1
22334: EQUAL
22335: NOT
22336: AND
22337: OR
22338: IFFALSE 22342
// exit ;
22340: GO 22491
// if GetType ( factory ) = unit_human then
22342: LD_VAR 0 1
22346: PPUSH
22347: CALL_OW 247
22351: PUSH
22352: LD_INT 1
22354: EQUAL
22355: IFFALSE 22372
// factory := IsInUnit ( factory ) ;
22357: LD_ADDR_VAR 0 1
22361: PUSH
22362: LD_VAR 0 1
22366: PPUSH
22367: CALL_OW 310
22371: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22372: LD_VAR 0 1
22376: PPUSH
22377: CALL_OW 266
22381: PUSH
22382: LD_INT 3
22384: NONEQUAL
22385: IFFALSE 22389
// exit ;
22387: GO 22491
// if HexInfo ( x , y ) = factory then
22389: LD_VAR 0 2
22393: PPUSH
22394: LD_VAR 0 3
22398: PPUSH
22399: CALL_OW 428
22403: PUSH
22404: LD_VAR 0 1
22408: EQUAL
22409: IFFALSE 22436
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22411: LD_ADDR_EXP 95
22415: PUSH
22416: LD_EXP 95
22420: PPUSH
22421: LD_VAR 0 1
22425: PPUSH
22426: LD_INT 0
22428: PPUSH
22429: CALL_OW 1
22433: ST_TO_ADDR
22434: GO 22487
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22436: LD_ADDR_EXP 95
22440: PUSH
22441: LD_EXP 95
22445: PPUSH
22446: LD_VAR 0 1
22450: PPUSH
22451: LD_VAR 0 1
22455: PPUSH
22456: CALL_OW 255
22460: PUSH
22461: LD_VAR 0 1
22465: PUSH
22466: LD_VAR 0 2
22470: PUSH
22471: LD_VAR 0 3
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: PPUSH
22482: CALL_OW 1
22486: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22487: CALL 22496 0 0
// end ;
22491: LD_VAR 0 4
22495: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
22496: LD_INT 0
22498: PPUSH
22499: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22500: LD_STRING resetFactoryWaypoint();
22502: PPUSH
22503: CALL_OW 559
// if factoryWaypoints then
22507: LD_EXP 95
22511: IFFALSE 22634
// begin for i := 1 to factoryWaypoints do
22513: LD_ADDR_VAR 0 2
22517: PUSH
22518: DOUBLE
22519: LD_INT 1
22521: DEC
22522: ST_TO_ADDR
22523: LD_EXP 95
22527: PUSH
22528: FOR_TO
22529: IFFALSE 22632
// if factoryWaypoints [ i ] then
22531: LD_EXP 95
22535: PUSH
22536: LD_VAR 0 2
22540: ARRAY
22541: IFFALSE 22630
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
22543: LD_STRING setFactoryWaypointXY(
22545: PUSH
22546: LD_EXP 95
22550: PUSH
22551: LD_VAR 0 2
22555: ARRAY
22556: PUSH
22557: LD_INT 1
22559: ARRAY
22560: STR
22561: PUSH
22562: LD_STRING ,
22564: STR
22565: PUSH
22566: LD_EXP 95
22570: PUSH
22571: LD_VAR 0 2
22575: ARRAY
22576: PUSH
22577: LD_INT 2
22579: ARRAY
22580: STR
22581: PUSH
22582: LD_STRING ,
22584: STR
22585: PUSH
22586: LD_EXP 95
22590: PUSH
22591: LD_VAR 0 2
22595: ARRAY
22596: PUSH
22597: LD_INT 3
22599: ARRAY
22600: STR
22601: PUSH
22602: LD_STRING ,
22604: STR
22605: PUSH
22606: LD_EXP 95
22610: PUSH
22611: LD_VAR 0 2
22615: ARRAY
22616: PUSH
22617: LD_INT 4
22619: ARRAY
22620: STR
22621: PUSH
22622: LD_STRING )
22624: STR
22625: PPUSH
22626: CALL_OW 559
22630: GO 22528
22632: POP
22633: POP
// end ; end ;
22634: LD_VAR 0 1
22638: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22639: LD_INT 0
22641: PPUSH
22642: PPUSH
22643: PPUSH
22644: PPUSH
22645: PPUSH
22646: PPUSH
22647: PPUSH
22648: PPUSH
22649: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22650: LD_VAR 0 1
22654: NOT
22655: PUSH
22656: LD_VAR 0 2
22660: PPUSH
22661: LD_VAR 0 3
22665: PPUSH
22666: CALL_OW 488
22670: NOT
22671: OR
22672: PUSH
22673: LD_VAR 0 4
22677: NOT
22678: OR
22679: IFFALSE 22683
// exit ;
22681: GO 23023
// list := [ ] ;
22683: LD_ADDR_VAR 0 13
22687: PUSH
22688: EMPTY
22689: ST_TO_ADDR
// if x - r < 0 then
22690: LD_VAR 0 2
22694: PUSH
22695: LD_VAR 0 4
22699: MINUS
22700: PUSH
22701: LD_INT 0
22703: LESS
22704: IFFALSE 22716
// min_x := 0 else
22706: LD_ADDR_VAR 0 7
22710: PUSH
22711: LD_INT 0
22713: ST_TO_ADDR
22714: GO 22732
// min_x := x - r ;
22716: LD_ADDR_VAR 0 7
22720: PUSH
22721: LD_VAR 0 2
22725: PUSH
22726: LD_VAR 0 4
22730: MINUS
22731: ST_TO_ADDR
// if y - r < 0 then
22732: LD_VAR 0 3
22736: PUSH
22737: LD_VAR 0 4
22741: MINUS
22742: PUSH
22743: LD_INT 0
22745: LESS
22746: IFFALSE 22758
// min_y := 0 else
22748: LD_ADDR_VAR 0 8
22752: PUSH
22753: LD_INT 0
22755: ST_TO_ADDR
22756: GO 22774
// min_y := y - r ;
22758: LD_ADDR_VAR 0 8
22762: PUSH
22763: LD_VAR 0 3
22767: PUSH
22768: LD_VAR 0 4
22772: MINUS
22773: ST_TO_ADDR
// max_x := x + r ;
22774: LD_ADDR_VAR 0 9
22778: PUSH
22779: LD_VAR 0 2
22783: PUSH
22784: LD_VAR 0 4
22788: PLUS
22789: ST_TO_ADDR
// max_y := y + r ;
22790: LD_ADDR_VAR 0 10
22794: PUSH
22795: LD_VAR 0 3
22799: PUSH
22800: LD_VAR 0 4
22804: PLUS
22805: ST_TO_ADDR
// for _x = min_x to max_x do
22806: LD_ADDR_VAR 0 11
22810: PUSH
22811: DOUBLE
22812: LD_VAR 0 7
22816: DEC
22817: ST_TO_ADDR
22818: LD_VAR 0 9
22822: PUSH
22823: FOR_TO
22824: IFFALSE 22941
// for _y = min_y to max_y do
22826: LD_ADDR_VAR 0 12
22830: PUSH
22831: DOUBLE
22832: LD_VAR 0 8
22836: DEC
22837: ST_TO_ADDR
22838: LD_VAR 0 10
22842: PUSH
22843: FOR_TO
22844: IFFALSE 22937
// begin if not ValidHex ( _x , _y ) then
22846: LD_VAR 0 11
22850: PPUSH
22851: LD_VAR 0 12
22855: PPUSH
22856: CALL_OW 488
22860: NOT
22861: IFFALSE 22865
// continue ;
22863: GO 22843
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22865: LD_VAR 0 11
22869: PPUSH
22870: LD_VAR 0 12
22874: PPUSH
22875: CALL_OW 351
22879: PUSH
22880: LD_VAR 0 11
22884: PPUSH
22885: LD_VAR 0 12
22889: PPUSH
22890: CALL_OW 554
22894: AND
22895: IFFALSE 22935
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22897: LD_ADDR_VAR 0 13
22901: PUSH
22902: LD_VAR 0 13
22906: PPUSH
22907: LD_VAR 0 13
22911: PUSH
22912: LD_INT 1
22914: PLUS
22915: PPUSH
22916: LD_VAR 0 11
22920: PUSH
22921: LD_VAR 0 12
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 2
22934: ST_TO_ADDR
// end ;
22935: GO 22843
22937: POP
22938: POP
22939: GO 22823
22941: POP
22942: POP
// if not list then
22943: LD_VAR 0 13
22947: NOT
22948: IFFALSE 22952
// exit ;
22950: GO 23023
// for i in list do
22952: LD_ADDR_VAR 0 6
22956: PUSH
22957: LD_VAR 0 13
22961: PUSH
22962: FOR_IN
22963: IFFALSE 23021
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22965: LD_VAR 0 1
22969: PPUSH
22970: LD_STRING M
22972: PUSH
22973: LD_VAR 0 6
22977: PUSH
22978: LD_INT 1
22980: ARRAY
22981: PUSH
22982: LD_VAR 0 6
22986: PUSH
22987: LD_INT 2
22989: ARRAY
22990: PUSH
22991: LD_INT 0
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: LD_INT 0
22999: PUSH
23000: LD_INT 0
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: PUSH
23012: EMPTY
23013: LIST
23014: PPUSH
23015: CALL_OW 447
23019: GO 22962
23021: POP
23022: POP
// end ;
23023: LD_VAR 0 5
23027: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23028: LD_EXP 96
23032: NOT
23033: IFFALSE 23083
23035: GO 23037
23037: DISABLE
// begin initHack := true ;
23038: LD_ADDR_EXP 96
23042: PUSH
23043: LD_INT 1
23045: ST_TO_ADDR
// hackTanks := [ ] ;
23046: LD_ADDR_EXP 97
23050: PUSH
23051: EMPTY
23052: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23053: LD_ADDR_EXP 98
23057: PUSH
23058: EMPTY
23059: ST_TO_ADDR
// hackLimit := 3 ;
23060: LD_ADDR_EXP 99
23064: PUSH
23065: LD_INT 3
23067: ST_TO_ADDR
// hackDist := 12 ;
23068: LD_ADDR_EXP 100
23072: PUSH
23073: LD_INT 12
23075: ST_TO_ADDR
// hackCounter := [ ] ;
23076: LD_ADDR_EXP 101
23080: PUSH
23081: EMPTY
23082: ST_TO_ADDR
// end ;
23083: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23084: LD_EXP 96
23088: PUSH
23089: LD_INT 34
23091: PUSH
23092: LD_EXP 20
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: AND
23106: IFFALSE 23361
23108: GO 23110
23110: DISABLE
23111: LD_INT 0
23113: PPUSH
23114: PPUSH
// begin enable ;
23115: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23116: LD_ADDR_VAR 0 1
23120: PUSH
23121: LD_INT 34
23123: PUSH
23124: LD_EXP 20
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PPUSH
23133: CALL_OW 69
23137: PUSH
23138: FOR_IN
23139: IFFALSE 23359
// begin if not i in hackTanks then
23141: LD_VAR 0 1
23145: PUSH
23146: LD_EXP 97
23150: IN
23151: NOT
23152: IFFALSE 23235
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23154: LD_ADDR_EXP 97
23158: PUSH
23159: LD_EXP 97
23163: PPUSH
23164: LD_EXP 97
23168: PUSH
23169: LD_INT 1
23171: PLUS
23172: PPUSH
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 1
23182: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23183: LD_ADDR_EXP 98
23187: PUSH
23188: LD_EXP 98
23192: PPUSH
23193: LD_EXP 98
23197: PUSH
23198: LD_INT 1
23200: PLUS
23201: PPUSH
23202: EMPTY
23203: PPUSH
23204: CALL_OW 1
23208: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23209: LD_ADDR_EXP 101
23213: PUSH
23214: LD_EXP 101
23218: PPUSH
23219: LD_EXP 101
23223: PUSH
23224: LD_INT 1
23226: PLUS
23227: PPUSH
23228: EMPTY
23229: PPUSH
23230: CALL_OW 1
23234: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23235: LD_VAR 0 1
23239: PPUSH
23240: CALL_OW 302
23244: NOT
23245: IFFALSE 23258
// begin HackUnlinkAll ( i ) ;
23247: LD_VAR 0 1
23251: PPUSH
23252: CALL 23364 0 1
// continue ;
23256: GO 23138
// end ; HackCheckCapturedStatus ( i ) ;
23258: LD_VAR 0 1
23262: PPUSH
23263: CALL 23807 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23267: LD_ADDR_VAR 0 2
23271: PUSH
23272: LD_INT 81
23274: PUSH
23275: LD_VAR 0 1
23279: PPUSH
23280: CALL_OW 255
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 33
23291: PUSH
23292: LD_INT 3
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 91
23301: PUSH
23302: LD_VAR 0 1
23306: PUSH
23307: LD_EXP 100
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 50
23319: PUSH
23320: EMPTY
23321: LIST
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: PPUSH
23329: CALL_OW 69
23333: ST_TO_ADDR
// if not tmp then
23334: LD_VAR 0 2
23338: NOT
23339: IFFALSE 23343
// continue ;
23341: GO 23138
// HackLink ( i , tmp ) ;
23343: LD_VAR 0 1
23347: PPUSH
23348: LD_VAR 0 2
23352: PPUSH
23353: CALL 23500 0 2
// end ;
23357: GO 23138
23359: POP
23360: POP
// end ;
23361: PPOPN 2
23363: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23364: LD_INT 0
23366: PPUSH
23367: PPUSH
23368: PPUSH
// if not hack in hackTanks then
23369: LD_VAR 0 1
23373: PUSH
23374: LD_EXP 97
23378: IN
23379: NOT
23380: IFFALSE 23384
// exit ;
23382: GO 23495
// index := GetElementIndex ( hackTanks , hack ) ;
23384: LD_ADDR_VAR 0 4
23388: PUSH
23389: LD_EXP 97
23393: PPUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL 30969 0 2
23403: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23404: LD_EXP 98
23408: PUSH
23409: LD_VAR 0 4
23413: ARRAY
23414: IFFALSE 23495
// begin for i in hackTanksCaptured [ index ] do
23416: LD_ADDR_VAR 0 3
23420: PUSH
23421: LD_EXP 98
23425: PUSH
23426: LD_VAR 0 4
23430: ARRAY
23431: PUSH
23432: FOR_IN
23433: IFFALSE 23459
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23435: LD_VAR 0 3
23439: PUSH
23440: LD_INT 1
23442: ARRAY
23443: PPUSH
23444: LD_VAR 0 3
23448: PUSH
23449: LD_INT 2
23451: ARRAY
23452: PPUSH
23453: CALL_OW 235
23457: GO 23432
23459: POP
23460: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23461: LD_ADDR_EXP 98
23465: PUSH
23466: LD_EXP 98
23470: PPUSH
23471: LD_VAR 0 4
23475: PPUSH
23476: EMPTY
23477: PPUSH
23478: CALL_OW 1
23482: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23483: LD_VAR 0 1
23487: PPUSH
23488: LD_INT 0
23490: PPUSH
23491: CALL_OW 505
// end ; end ;
23495: LD_VAR 0 2
23499: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23500: LD_INT 0
23502: PPUSH
23503: PPUSH
23504: PPUSH
// if not hack in hackTanks or not vehicles then
23505: LD_VAR 0 1
23509: PUSH
23510: LD_EXP 97
23514: IN
23515: NOT
23516: PUSH
23517: LD_VAR 0 2
23521: NOT
23522: OR
23523: IFFALSE 23527
// exit ;
23525: GO 23802
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: LD_VAR 0 1
23536: PPUSH
23537: LD_VAR 0 2
23541: PPUSH
23542: LD_INT 1
23544: PPUSH
23545: LD_INT 1
23547: PPUSH
23548: CALL 31619 0 4
23552: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23553: LD_ADDR_VAR 0 5
23557: PUSH
23558: LD_EXP 97
23562: PPUSH
23563: LD_VAR 0 1
23567: PPUSH
23568: CALL 30969 0 2
23572: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23573: LD_EXP 98
23577: PUSH
23578: LD_VAR 0 5
23582: ARRAY
23583: PUSH
23584: LD_EXP 99
23588: LESS
23589: IFFALSE 23778
// begin for i := 1 to vehicles do
23591: LD_ADDR_VAR 0 4
23595: PUSH
23596: DOUBLE
23597: LD_INT 1
23599: DEC
23600: ST_TO_ADDR
23601: LD_VAR 0 2
23605: PUSH
23606: FOR_TO
23607: IFFALSE 23776
// begin if hackTanksCaptured [ index ] = hackLimit then
23609: LD_EXP 98
23613: PUSH
23614: LD_VAR 0 5
23618: ARRAY
23619: PUSH
23620: LD_EXP 99
23624: EQUAL
23625: IFFALSE 23629
// break ;
23627: GO 23776
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23629: LD_ADDR_EXP 101
23633: PUSH
23634: LD_EXP 101
23638: PPUSH
23639: LD_VAR 0 5
23643: PPUSH
23644: LD_EXP 101
23648: PUSH
23649: LD_VAR 0 5
23653: ARRAY
23654: PUSH
23655: LD_INT 1
23657: PLUS
23658: PPUSH
23659: CALL_OW 1
23663: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23664: LD_ADDR_EXP 98
23668: PUSH
23669: LD_EXP 98
23673: PPUSH
23674: LD_VAR 0 5
23678: PUSH
23679: LD_EXP 98
23683: PUSH
23684: LD_VAR 0 5
23688: ARRAY
23689: PUSH
23690: LD_INT 1
23692: PLUS
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PPUSH
23698: LD_VAR 0 2
23702: PUSH
23703: LD_VAR 0 4
23707: ARRAY
23708: PUSH
23709: LD_VAR 0 2
23713: PUSH
23714: LD_VAR 0 4
23718: ARRAY
23719: PPUSH
23720: CALL_OW 255
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PPUSH
23729: CALL 31184 0 3
23733: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23734: LD_VAR 0 2
23738: PUSH
23739: LD_VAR 0 4
23743: ARRAY
23744: PPUSH
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 255
23754: PPUSH
23755: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23759: LD_VAR 0 2
23763: PUSH
23764: LD_VAR 0 4
23768: ARRAY
23769: PPUSH
23770: CALL_OW 141
// end ;
23774: GO 23606
23776: POP
23777: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23778: LD_VAR 0 1
23782: PPUSH
23783: LD_EXP 98
23787: PUSH
23788: LD_VAR 0 5
23792: ARRAY
23793: PUSH
23794: LD_INT 0
23796: PLUS
23797: PPUSH
23798: CALL_OW 505
// end ;
23802: LD_VAR 0 3
23806: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23807: LD_INT 0
23809: PPUSH
23810: PPUSH
23811: PPUSH
23812: PPUSH
// if not hack in hackTanks then
23813: LD_VAR 0 1
23817: PUSH
23818: LD_EXP 97
23822: IN
23823: NOT
23824: IFFALSE 23828
// exit ;
23826: GO 24068
// index := GetElementIndex ( hackTanks , hack ) ;
23828: LD_ADDR_VAR 0 4
23832: PUSH
23833: LD_EXP 97
23837: PPUSH
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL 30969 0 2
23847: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23848: LD_ADDR_VAR 0 3
23852: PUSH
23853: DOUBLE
23854: LD_EXP 98
23858: PUSH
23859: LD_VAR 0 4
23863: ARRAY
23864: INC
23865: ST_TO_ADDR
23866: LD_INT 1
23868: PUSH
23869: FOR_DOWNTO
23870: IFFALSE 24042
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23872: LD_ADDR_VAR 0 5
23876: PUSH
23877: LD_EXP 98
23881: PUSH
23882: LD_VAR 0 4
23886: ARRAY
23887: PUSH
23888: LD_VAR 0 3
23892: ARRAY
23893: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23894: LD_VAR 0 5
23898: PUSH
23899: LD_INT 1
23901: ARRAY
23902: PPUSH
23903: CALL_OW 302
23907: NOT
23908: PUSH
23909: LD_VAR 0 5
23913: PUSH
23914: LD_INT 1
23916: ARRAY
23917: PPUSH
23918: CALL_OW 255
23922: PUSH
23923: LD_VAR 0 1
23927: PPUSH
23928: CALL_OW 255
23932: NONEQUAL
23933: OR
23934: IFFALSE 24040
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23936: LD_VAR 0 5
23940: PUSH
23941: LD_INT 1
23943: ARRAY
23944: PPUSH
23945: CALL_OW 305
23949: PUSH
23950: LD_VAR 0 5
23954: PUSH
23955: LD_INT 1
23957: ARRAY
23958: PPUSH
23959: CALL_OW 255
23963: PUSH
23964: LD_VAR 0 1
23968: PPUSH
23969: CALL_OW 255
23973: EQUAL
23974: AND
23975: IFFALSE 23999
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23977: LD_VAR 0 5
23981: PUSH
23982: LD_INT 1
23984: ARRAY
23985: PPUSH
23986: LD_VAR 0 5
23990: PUSH
23991: LD_INT 2
23993: ARRAY
23994: PPUSH
23995: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23999: LD_ADDR_EXP 98
24003: PUSH
24004: LD_EXP 98
24008: PPUSH
24009: LD_VAR 0 4
24013: PPUSH
24014: LD_EXP 98
24018: PUSH
24019: LD_VAR 0 4
24023: ARRAY
24024: PPUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: CALL_OW 3
24034: PPUSH
24035: CALL_OW 1
24039: ST_TO_ADDR
// end ; end ;
24040: GO 23869
24042: POP
24043: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24044: LD_VAR 0 1
24048: PPUSH
24049: LD_EXP 98
24053: PUSH
24054: LD_VAR 0 4
24058: ARRAY
24059: PUSH
24060: LD_INT 0
24062: PLUS
24063: PPUSH
24064: CALL_OW 505
// end ;
24068: LD_VAR 0 2
24072: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24073: LD_INT 0
24075: PPUSH
24076: PPUSH
24077: PPUSH
24078: PPUSH
// if not hack in hackTanks then
24079: LD_VAR 0 1
24083: PUSH
24084: LD_EXP 97
24088: IN
24089: NOT
24090: IFFALSE 24094
// exit ;
24092: GO 24179
// index := GetElementIndex ( hackTanks , hack ) ;
24094: LD_ADDR_VAR 0 5
24098: PUSH
24099: LD_EXP 97
24103: PPUSH
24104: LD_VAR 0 1
24108: PPUSH
24109: CALL 30969 0 2
24113: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24114: LD_ADDR_VAR 0 4
24118: PUSH
24119: DOUBLE
24120: LD_INT 1
24122: DEC
24123: ST_TO_ADDR
24124: LD_EXP 98
24128: PUSH
24129: LD_VAR 0 5
24133: ARRAY
24134: PUSH
24135: FOR_TO
24136: IFFALSE 24177
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24138: LD_EXP 98
24142: PUSH
24143: LD_VAR 0 5
24147: ARRAY
24148: PUSH
24149: LD_VAR 0 4
24153: ARRAY
24154: PUSH
24155: LD_INT 1
24157: ARRAY
24158: PUSH
24159: LD_VAR 0 2
24163: EQUAL
24164: IFFALSE 24175
// KillUnit ( vehicle ) ;
24166: LD_VAR 0 2
24170: PPUSH
24171: CALL_OW 66
24175: GO 24135
24177: POP
24178: POP
// end ;
24179: LD_VAR 0 3
24183: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24184: LD_EXP 102
24188: NOT
24189: IFFALSE 24224
24191: GO 24193
24193: DISABLE
// begin initMiner := true ;
24194: LD_ADDR_EXP 102
24198: PUSH
24199: LD_INT 1
24201: ST_TO_ADDR
// minersList := [ ] ;
24202: LD_ADDR_EXP 103
24206: PUSH
24207: EMPTY
24208: ST_TO_ADDR
// minerMinesList := [ ] ;
24209: LD_ADDR_EXP 104
24213: PUSH
24214: EMPTY
24215: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24216: LD_ADDR_EXP 105
24220: PUSH
24221: LD_INT 5
24223: ST_TO_ADDR
// end ;
24224: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24225: LD_EXP 102
24229: PUSH
24230: LD_INT 34
24232: PUSH
24233: LD_EXP 25
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PPUSH
24242: CALL_OW 69
24246: AND
24247: IFFALSE 24710
24249: GO 24251
24251: DISABLE
24252: LD_INT 0
24254: PPUSH
24255: PPUSH
24256: PPUSH
24257: PPUSH
// begin enable ;
24258: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24259: LD_ADDR_VAR 0 1
24263: PUSH
24264: LD_INT 34
24266: PUSH
24267: LD_EXP 25
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PPUSH
24276: CALL_OW 69
24280: PUSH
24281: FOR_IN
24282: IFFALSE 24354
// begin if not i in minersList then
24284: LD_VAR 0 1
24288: PUSH
24289: LD_EXP 103
24293: IN
24294: NOT
24295: IFFALSE 24352
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24297: LD_ADDR_EXP 103
24301: PUSH
24302: LD_EXP 103
24306: PPUSH
24307: LD_EXP 103
24311: PUSH
24312: LD_INT 1
24314: PLUS
24315: PPUSH
24316: LD_VAR 0 1
24320: PPUSH
24321: CALL_OW 1
24325: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24326: LD_ADDR_EXP 104
24330: PUSH
24331: LD_EXP 104
24335: PPUSH
24336: LD_EXP 104
24340: PUSH
24341: LD_INT 1
24343: PLUS
24344: PPUSH
24345: EMPTY
24346: PPUSH
24347: CALL_OW 1
24351: ST_TO_ADDR
// end end ;
24352: GO 24281
24354: POP
24355: POP
// for i := minerMinesList downto 1 do
24356: LD_ADDR_VAR 0 1
24360: PUSH
24361: DOUBLE
24362: LD_EXP 104
24366: INC
24367: ST_TO_ADDR
24368: LD_INT 1
24370: PUSH
24371: FOR_DOWNTO
24372: IFFALSE 24708
// begin if IsLive ( minersList [ i ] ) then
24374: LD_EXP 103
24378: PUSH
24379: LD_VAR 0 1
24383: ARRAY
24384: PPUSH
24385: CALL_OW 300
24389: IFFALSE 24417
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24391: LD_EXP 103
24395: PUSH
24396: LD_VAR 0 1
24400: ARRAY
24401: PPUSH
24402: LD_EXP 104
24406: PUSH
24407: LD_VAR 0 1
24411: ARRAY
24412: PPUSH
24413: CALL_OW 505
// if not minerMinesList [ i ] then
24417: LD_EXP 104
24421: PUSH
24422: LD_VAR 0 1
24426: ARRAY
24427: NOT
24428: IFFALSE 24432
// continue ;
24430: GO 24371
// for j := minerMinesList [ i ] downto 1 do
24432: LD_ADDR_VAR 0 2
24436: PUSH
24437: DOUBLE
24438: LD_EXP 104
24442: PUSH
24443: LD_VAR 0 1
24447: ARRAY
24448: INC
24449: ST_TO_ADDR
24450: LD_INT 1
24452: PUSH
24453: FOR_DOWNTO
24454: IFFALSE 24704
// begin side := GetSide ( minersList [ i ] ) ;
24456: LD_ADDR_VAR 0 3
24460: PUSH
24461: LD_EXP 103
24465: PUSH
24466: LD_VAR 0 1
24470: ARRAY
24471: PPUSH
24472: CALL_OW 255
24476: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24477: LD_ADDR_VAR 0 4
24481: PUSH
24482: LD_EXP 104
24486: PUSH
24487: LD_VAR 0 1
24491: ARRAY
24492: PUSH
24493: LD_VAR 0 2
24497: ARRAY
24498: PUSH
24499: LD_INT 1
24501: ARRAY
24502: PPUSH
24503: LD_EXP 104
24507: PUSH
24508: LD_VAR 0 1
24512: ARRAY
24513: PUSH
24514: LD_VAR 0 2
24518: ARRAY
24519: PUSH
24520: LD_INT 2
24522: ARRAY
24523: PPUSH
24524: CALL_OW 428
24528: ST_TO_ADDR
// if not tmp then
24529: LD_VAR 0 4
24533: NOT
24534: IFFALSE 24538
// continue ;
24536: GO 24453
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24538: LD_VAR 0 4
24542: PUSH
24543: LD_INT 81
24545: PUSH
24546: LD_VAR 0 3
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PPUSH
24555: CALL_OW 69
24559: IN
24560: PUSH
24561: LD_EXP 104
24565: PUSH
24566: LD_VAR 0 1
24570: ARRAY
24571: PUSH
24572: LD_VAR 0 2
24576: ARRAY
24577: PUSH
24578: LD_INT 1
24580: ARRAY
24581: PPUSH
24582: LD_EXP 104
24586: PUSH
24587: LD_VAR 0 1
24591: ARRAY
24592: PUSH
24593: LD_VAR 0 2
24597: ARRAY
24598: PUSH
24599: LD_INT 2
24601: ARRAY
24602: PPUSH
24603: CALL_OW 458
24607: AND
24608: IFFALSE 24702
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24610: LD_EXP 104
24614: PUSH
24615: LD_VAR 0 1
24619: ARRAY
24620: PUSH
24621: LD_VAR 0 2
24625: ARRAY
24626: PUSH
24627: LD_INT 1
24629: ARRAY
24630: PPUSH
24631: LD_EXP 104
24635: PUSH
24636: LD_VAR 0 1
24640: ARRAY
24641: PUSH
24642: LD_VAR 0 2
24646: ARRAY
24647: PUSH
24648: LD_INT 2
24650: ARRAY
24651: PPUSH
24652: LD_VAR 0 3
24656: PPUSH
24657: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24661: LD_ADDR_EXP 104
24665: PUSH
24666: LD_EXP 104
24670: PPUSH
24671: LD_VAR 0 1
24675: PPUSH
24676: LD_EXP 104
24680: PUSH
24681: LD_VAR 0 1
24685: ARRAY
24686: PPUSH
24687: LD_VAR 0 2
24691: PPUSH
24692: CALL_OW 3
24696: PPUSH
24697: CALL_OW 1
24701: ST_TO_ADDR
// end ; end ;
24702: GO 24453
24704: POP
24705: POP
// end ;
24706: GO 24371
24708: POP
24709: POP
// end ;
24710: PPOPN 4
24712: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24713: LD_INT 0
24715: PPUSH
24716: PPUSH
// result := false ;
24717: LD_ADDR_VAR 0 4
24721: PUSH
24722: LD_INT 0
24724: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24725: LD_VAR 0 1
24729: PPUSH
24730: CALL_OW 264
24734: PUSH
24735: LD_EXP 25
24739: EQUAL
24740: NOT
24741: IFFALSE 24745
// exit ;
24743: GO 24985
// index := GetElementIndex ( minersList , unit ) ;
24745: LD_ADDR_VAR 0 5
24749: PUSH
24750: LD_EXP 103
24754: PPUSH
24755: LD_VAR 0 1
24759: PPUSH
24760: CALL 30969 0 2
24764: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24765: LD_EXP 104
24769: PUSH
24770: LD_VAR 0 5
24774: ARRAY
24775: PUSH
24776: LD_EXP 105
24780: GREATEREQUAL
24781: IFFALSE 24785
// exit ;
24783: GO 24985
// ComMoveXY ( unit , x , y ) ;
24785: LD_VAR 0 1
24789: PPUSH
24790: LD_VAR 0 2
24794: PPUSH
24795: LD_VAR 0 3
24799: PPUSH
24800: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24804: LD_INT 35
24806: PPUSH
24807: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24811: LD_VAR 0 1
24815: PPUSH
24816: LD_VAR 0 2
24820: PPUSH
24821: LD_VAR 0 3
24825: PPUSH
24826: CALL 61741 0 3
24830: NOT
24831: PUSH
24832: LD_VAR 0 1
24836: PPUSH
24837: CALL_OW 314
24841: AND
24842: IFFALSE 24846
// exit ;
24844: GO 24985
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24846: LD_VAR 0 2
24850: PPUSH
24851: LD_VAR 0 3
24855: PPUSH
24856: CALL_OW 428
24860: PUSH
24861: LD_VAR 0 1
24865: EQUAL
24866: PUSH
24867: LD_VAR 0 1
24871: PPUSH
24872: CALL_OW 314
24876: NOT
24877: AND
24878: IFFALSE 24804
// PlaySoundXY ( x , y , PlantMine ) ;
24880: LD_VAR 0 2
24884: PPUSH
24885: LD_VAR 0 3
24889: PPUSH
24890: LD_STRING PlantMine
24892: PPUSH
24893: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24897: LD_VAR 0 2
24901: PPUSH
24902: LD_VAR 0 3
24906: PPUSH
24907: LD_VAR 0 1
24911: PPUSH
24912: CALL_OW 255
24916: PPUSH
24917: LD_INT 0
24919: PPUSH
24920: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24924: LD_ADDR_EXP 104
24928: PUSH
24929: LD_EXP 104
24933: PPUSH
24934: LD_VAR 0 5
24938: PUSH
24939: LD_EXP 104
24943: PUSH
24944: LD_VAR 0 5
24948: ARRAY
24949: PUSH
24950: LD_INT 1
24952: PLUS
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PPUSH
24958: LD_VAR 0 2
24962: PUSH
24963: LD_VAR 0 3
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PPUSH
24972: CALL 31184 0 3
24976: ST_TO_ADDR
// result := true ;
24977: LD_ADDR_VAR 0 4
24981: PUSH
24982: LD_INT 1
24984: ST_TO_ADDR
// end ;
24985: LD_VAR 0 4
24989: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24990: LD_INT 0
24992: PPUSH
24993: PPUSH
24994: PPUSH
// if not unit in minersList then
24995: LD_VAR 0 1
24999: PUSH
25000: LD_EXP 103
25004: IN
25005: NOT
25006: IFFALSE 25010
// exit ;
25008: GO 25402
// index := GetElementIndex ( minersList , unit ) ;
25010: LD_ADDR_VAR 0 6
25014: PUSH
25015: LD_EXP 103
25019: PPUSH
25020: LD_VAR 0 1
25024: PPUSH
25025: CALL 30969 0 2
25029: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25030: LD_ADDR_VAR 0 5
25034: PUSH
25035: DOUBLE
25036: LD_EXP 104
25040: PUSH
25041: LD_VAR 0 6
25045: ARRAY
25046: INC
25047: ST_TO_ADDR
25048: LD_INT 1
25050: PUSH
25051: FOR_DOWNTO
25052: IFFALSE 25213
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25054: LD_EXP 104
25058: PUSH
25059: LD_VAR 0 6
25063: ARRAY
25064: PUSH
25065: LD_VAR 0 5
25069: ARRAY
25070: PUSH
25071: LD_INT 1
25073: ARRAY
25074: PUSH
25075: LD_VAR 0 2
25079: EQUAL
25080: PUSH
25081: LD_EXP 104
25085: PUSH
25086: LD_VAR 0 6
25090: ARRAY
25091: PUSH
25092: LD_VAR 0 5
25096: ARRAY
25097: PUSH
25098: LD_INT 2
25100: ARRAY
25101: PUSH
25102: LD_VAR 0 3
25106: EQUAL
25107: AND
25108: IFFALSE 25211
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25110: LD_EXP 104
25114: PUSH
25115: LD_VAR 0 6
25119: ARRAY
25120: PUSH
25121: LD_VAR 0 5
25125: ARRAY
25126: PUSH
25127: LD_INT 1
25129: ARRAY
25130: PPUSH
25131: LD_EXP 104
25135: PUSH
25136: LD_VAR 0 6
25140: ARRAY
25141: PUSH
25142: LD_VAR 0 5
25146: ARRAY
25147: PUSH
25148: LD_INT 2
25150: ARRAY
25151: PPUSH
25152: LD_VAR 0 1
25156: PPUSH
25157: CALL_OW 255
25161: PPUSH
25162: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25166: LD_ADDR_EXP 104
25170: PUSH
25171: LD_EXP 104
25175: PPUSH
25176: LD_VAR 0 6
25180: PPUSH
25181: LD_EXP 104
25185: PUSH
25186: LD_VAR 0 6
25190: ARRAY
25191: PPUSH
25192: LD_VAR 0 5
25196: PPUSH
25197: CALL_OW 3
25201: PPUSH
25202: CALL_OW 1
25206: ST_TO_ADDR
// exit ;
25207: POP
25208: POP
25209: GO 25402
// end ; end ;
25211: GO 25051
25213: POP
25214: POP
// for i := minerMinesList [ index ] downto 1 do
25215: LD_ADDR_VAR 0 5
25219: PUSH
25220: DOUBLE
25221: LD_EXP 104
25225: PUSH
25226: LD_VAR 0 6
25230: ARRAY
25231: INC
25232: ST_TO_ADDR
25233: LD_INT 1
25235: PUSH
25236: FOR_DOWNTO
25237: IFFALSE 25400
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25239: LD_EXP 104
25243: PUSH
25244: LD_VAR 0 6
25248: ARRAY
25249: PUSH
25250: LD_VAR 0 5
25254: ARRAY
25255: PUSH
25256: LD_INT 1
25258: ARRAY
25259: PPUSH
25260: LD_EXP 104
25264: PUSH
25265: LD_VAR 0 6
25269: ARRAY
25270: PUSH
25271: LD_VAR 0 5
25275: ARRAY
25276: PUSH
25277: LD_INT 2
25279: ARRAY
25280: PPUSH
25281: LD_VAR 0 2
25285: PPUSH
25286: LD_VAR 0 3
25290: PPUSH
25291: CALL_OW 298
25295: PUSH
25296: LD_INT 6
25298: LESS
25299: IFFALSE 25398
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25301: LD_EXP 104
25305: PUSH
25306: LD_VAR 0 6
25310: ARRAY
25311: PUSH
25312: LD_VAR 0 5
25316: ARRAY
25317: PUSH
25318: LD_INT 1
25320: ARRAY
25321: PPUSH
25322: LD_EXP 104
25326: PUSH
25327: LD_VAR 0 6
25331: ARRAY
25332: PUSH
25333: LD_VAR 0 5
25337: ARRAY
25338: PUSH
25339: LD_INT 2
25341: ARRAY
25342: PPUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: CALL_OW 255
25352: PPUSH
25353: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25357: LD_ADDR_EXP 104
25361: PUSH
25362: LD_EXP 104
25366: PPUSH
25367: LD_VAR 0 6
25371: PPUSH
25372: LD_EXP 104
25376: PUSH
25377: LD_VAR 0 6
25381: ARRAY
25382: PPUSH
25383: LD_VAR 0 5
25387: PPUSH
25388: CALL_OW 3
25392: PPUSH
25393: CALL_OW 1
25397: ST_TO_ADDR
// end ; end ;
25398: GO 25236
25400: POP
25401: POP
// end ;
25402: LD_VAR 0 4
25406: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25407: LD_INT 0
25409: PPUSH
25410: PPUSH
25411: PPUSH
25412: PPUSH
25413: PPUSH
25414: PPUSH
25415: PPUSH
25416: PPUSH
25417: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25418: LD_VAR 0 1
25422: PPUSH
25423: CALL_OW 264
25427: PUSH
25428: LD_EXP 25
25432: EQUAL
25433: NOT
25434: PUSH
25435: LD_VAR 0 1
25439: PUSH
25440: LD_EXP 103
25444: IN
25445: NOT
25446: OR
25447: IFFALSE 25451
// exit ;
25449: GO 25773
// index := GetElementIndex ( minersList , unit ) ;
25451: LD_ADDR_VAR 0 6
25455: PUSH
25456: LD_EXP 103
25460: PPUSH
25461: LD_VAR 0 1
25465: PPUSH
25466: CALL 30969 0 2
25470: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25471: LD_ADDR_VAR 0 8
25475: PUSH
25476: LD_EXP 105
25480: PUSH
25481: LD_EXP 104
25485: PUSH
25486: LD_VAR 0 6
25490: ARRAY
25491: MINUS
25492: ST_TO_ADDR
// if not minesFreeAmount then
25493: LD_VAR 0 8
25497: NOT
25498: IFFALSE 25502
// exit ;
25500: GO 25773
// tmp := [ ] ;
25502: LD_ADDR_VAR 0 7
25506: PUSH
25507: EMPTY
25508: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25509: LD_ADDR_VAR 0 5
25513: PUSH
25514: DOUBLE
25515: LD_INT 1
25517: DEC
25518: ST_TO_ADDR
25519: LD_VAR 0 8
25523: PUSH
25524: FOR_TO
25525: IFFALSE 25720
// begin _d := rand ( 0 , 5 ) ;
25527: LD_ADDR_VAR 0 11
25531: PUSH
25532: LD_INT 0
25534: PPUSH
25535: LD_INT 5
25537: PPUSH
25538: CALL_OW 12
25542: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25543: LD_ADDR_VAR 0 12
25547: PUSH
25548: LD_INT 2
25550: PPUSH
25551: LD_INT 6
25553: PPUSH
25554: CALL_OW 12
25558: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25559: LD_ADDR_VAR 0 9
25563: PUSH
25564: LD_VAR 0 2
25568: PPUSH
25569: LD_VAR 0 11
25573: PPUSH
25574: LD_VAR 0 12
25578: PPUSH
25579: CALL_OW 272
25583: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25584: LD_ADDR_VAR 0 10
25588: PUSH
25589: LD_VAR 0 3
25593: PPUSH
25594: LD_VAR 0 11
25598: PPUSH
25599: LD_VAR 0 12
25603: PPUSH
25604: CALL_OW 273
25608: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25609: LD_VAR 0 9
25613: PPUSH
25614: LD_VAR 0 10
25618: PPUSH
25619: CALL_OW 488
25623: PUSH
25624: LD_VAR 0 9
25628: PUSH
25629: LD_VAR 0 10
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_VAR 0 7
25642: IN
25643: NOT
25644: AND
25645: PUSH
25646: LD_VAR 0 9
25650: PPUSH
25651: LD_VAR 0 10
25655: PPUSH
25656: CALL_OW 458
25660: NOT
25661: AND
25662: IFFALSE 25704
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25664: LD_ADDR_VAR 0 7
25668: PUSH
25669: LD_VAR 0 7
25673: PPUSH
25674: LD_VAR 0 7
25678: PUSH
25679: LD_INT 1
25681: PLUS
25682: PPUSH
25683: LD_VAR 0 9
25687: PUSH
25688: LD_VAR 0 10
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PPUSH
25697: CALL_OW 1
25701: ST_TO_ADDR
25702: GO 25718
// i := i - 1 ;
25704: LD_ADDR_VAR 0 5
25708: PUSH
25709: LD_VAR 0 5
25713: PUSH
25714: LD_INT 1
25716: MINUS
25717: ST_TO_ADDR
// end ;
25718: GO 25524
25720: POP
25721: POP
// for i in tmp do
25722: LD_ADDR_VAR 0 5
25726: PUSH
25727: LD_VAR 0 7
25731: PUSH
25732: FOR_IN
25733: IFFALSE 25771
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25735: LD_VAR 0 1
25739: PPUSH
25740: LD_VAR 0 5
25744: PUSH
25745: LD_INT 1
25747: ARRAY
25748: PPUSH
25749: LD_VAR 0 5
25753: PUSH
25754: LD_INT 2
25756: ARRAY
25757: PPUSH
25758: CALL 24713 0 3
25762: NOT
25763: IFFALSE 25769
// exit ;
25765: POP
25766: POP
25767: GO 25773
25769: GO 25732
25771: POP
25772: POP
// end ;
25773: LD_VAR 0 4
25777: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25778: LD_INT 0
25780: PPUSH
25781: PPUSH
25782: PPUSH
25783: PPUSH
25784: PPUSH
25785: PPUSH
25786: PPUSH
// if not GetClass ( unit ) = class_sniper then
25787: LD_VAR 0 1
25791: PPUSH
25792: CALL_OW 257
25796: PUSH
25797: LD_INT 5
25799: EQUAL
25800: NOT
25801: IFFALSE 25805
// exit ;
25803: GO 26193
// dist := 8 ;
25805: LD_ADDR_VAR 0 5
25809: PUSH
25810: LD_INT 8
25812: ST_TO_ADDR
// viewRange := 12 ;
25813: LD_ADDR_VAR 0 7
25817: PUSH
25818: LD_INT 12
25820: ST_TO_ADDR
// side := GetSide ( unit ) ;
25821: LD_ADDR_VAR 0 6
25825: PUSH
25826: LD_VAR 0 1
25830: PPUSH
25831: CALL_OW 255
25835: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25836: LD_INT 61
25838: PPUSH
25839: LD_VAR 0 6
25843: PPUSH
25844: CALL_OW 321
25848: PUSH
25849: LD_INT 2
25851: EQUAL
25852: IFFALSE 25862
// viewRange := 16 ;
25854: LD_ADDR_VAR 0 7
25858: PUSH
25859: LD_INT 16
25861: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25862: LD_VAR 0 1
25866: PPUSH
25867: LD_VAR 0 2
25871: PPUSH
25872: LD_VAR 0 3
25876: PPUSH
25877: CALL_OW 297
25881: PUSH
25882: LD_VAR 0 5
25886: GREATER
25887: IFFALSE 25966
// begin ComMoveXY ( unit , x , y ) ;
25889: LD_VAR 0 1
25893: PPUSH
25894: LD_VAR 0 2
25898: PPUSH
25899: LD_VAR 0 3
25903: PPUSH
25904: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25908: LD_INT 35
25910: PPUSH
25911: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25915: LD_VAR 0 1
25919: PPUSH
25920: LD_VAR 0 2
25924: PPUSH
25925: LD_VAR 0 3
25929: PPUSH
25930: CALL 61741 0 3
25934: NOT
25935: IFFALSE 25939
// exit ;
25937: GO 26193
// until GetDistUnitXY ( unit , x , y ) < dist ;
25939: LD_VAR 0 1
25943: PPUSH
25944: LD_VAR 0 2
25948: PPUSH
25949: LD_VAR 0 3
25953: PPUSH
25954: CALL_OW 297
25958: PUSH
25959: LD_VAR 0 5
25963: LESS
25964: IFFALSE 25908
// end ; ComTurnXY ( unit , x , y ) ;
25966: LD_VAR 0 1
25970: PPUSH
25971: LD_VAR 0 2
25975: PPUSH
25976: LD_VAR 0 3
25980: PPUSH
25981: CALL_OW 118
// wait ( 5 ) ;
25985: LD_INT 5
25987: PPUSH
25988: CALL_OW 67
// _d := GetDir ( unit ) ;
25992: LD_ADDR_VAR 0 10
25996: PUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 254
26006: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26007: LD_ADDR_VAR 0 8
26011: PUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: CALL_OW 250
26021: PPUSH
26022: LD_VAR 0 10
26026: PPUSH
26027: LD_VAR 0 5
26031: PPUSH
26032: CALL_OW 272
26036: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26037: LD_ADDR_VAR 0 9
26041: PUSH
26042: LD_VAR 0 1
26046: PPUSH
26047: CALL_OW 251
26051: PPUSH
26052: LD_VAR 0 10
26056: PPUSH
26057: LD_VAR 0 5
26061: PPUSH
26062: CALL_OW 273
26066: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26067: LD_VAR 0 8
26071: PPUSH
26072: LD_VAR 0 9
26076: PPUSH
26077: CALL_OW 488
26081: NOT
26082: IFFALSE 26086
// exit ;
26084: GO 26193
// ComAnimCustom ( unit , 1 ) ;
26086: LD_VAR 0 1
26090: PPUSH
26091: LD_INT 1
26093: PPUSH
26094: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26098: LD_VAR 0 8
26102: PPUSH
26103: LD_VAR 0 9
26107: PPUSH
26108: LD_VAR 0 6
26112: PPUSH
26113: LD_VAR 0 7
26117: PPUSH
26118: CALL_OW 330
// repeat wait ( 1 ) ;
26122: LD_INT 1
26124: PPUSH
26125: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26129: LD_VAR 0 1
26133: PPUSH
26134: CALL_OW 316
26138: PUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: CALL_OW 314
26148: OR
26149: PUSH
26150: LD_VAR 0 1
26154: PPUSH
26155: CALL_OW 302
26159: NOT
26160: OR
26161: PUSH
26162: LD_VAR 0 1
26166: PPUSH
26167: CALL_OW 301
26171: OR
26172: IFFALSE 26122
// RemoveSeeing ( _x , _y , side ) ;
26174: LD_VAR 0 8
26178: PPUSH
26179: LD_VAR 0 9
26183: PPUSH
26184: LD_VAR 0 6
26188: PPUSH
26189: CALL_OW 331
// end ; end_of_file
26193: LD_VAR 0 4
26197: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26198: LD_INT 0
26200: PPUSH
26201: PPUSH
// if exist_mode then
26202: LD_VAR 0 2
26206: IFFALSE 26231
// unit := CreateCharacter ( prefix & ident ) else
26208: LD_ADDR_VAR 0 5
26212: PUSH
26213: LD_VAR 0 3
26217: PUSH
26218: LD_VAR 0 1
26222: STR
26223: PPUSH
26224: CALL_OW 34
26228: ST_TO_ADDR
26229: GO 26246
// unit := NewCharacter ( ident ) ;
26231: LD_ADDR_VAR 0 5
26235: PUSH
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 25
26245: ST_TO_ADDR
// result := unit ;
26246: LD_ADDR_VAR 0 4
26250: PUSH
26251: LD_VAR 0 5
26255: ST_TO_ADDR
// end ;
26256: LD_VAR 0 4
26260: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26261: LD_INT 0
26263: PPUSH
26264: PPUSH
// if not side or not nation then
26265: LD_VAR 0 1
26269: NOT
26270: PUSH
26271: LD_VAR 0 2
26275: NOT
26276: OR
26277: IFFALSE 26281
// exit ;
26279: GO 27049
// case nation of nation_american :
26281: LD_VAR 0 2
26285: PUSH
26286: LD_INT 1
26288: DOUBLE
26289: EQUAL
26290: IFTRUE 26294
26292: GO 26508
26294: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26295: LD_ADDR_VAR 0 4
26299: PUSH
26300: LD_INT 35
26302: PUSH
26303: LD_INT 45
26305: PUSH
26306: LD_INT 46
26308: PUSH
26309: LD_INT 47
26311: PUSH
26312: LD_INT 82
26314: PUSH
26315: LD_INT 83
26317: PUSH
26318: LD_INT 84
26320: PUSH
26321: LD_INT 85
26323: PUSH
26324: LD_INT 86
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: LD_INT 6
26335: PUSH
26336: LD_INT 15
26338: PUSH
26339: LD_INT 16
26341: PUSH
26342: LD_INT 7
26344: PUSH
26345: LD_INT 12
26347: PUSH
26348: LD_INT 13
26350: PUSH
26351: LD_INT 10
26353: PUSH
26354: LD_INT 14
26356: PUSH
26357: LD_INT 20
26359: PUSH
26360: LD_INT 21
26362: PUSH
26363: LD_INT 22
26365: PUSH
26366: LD_INT 25
26368: PUSH
26369: LD_INT 32
26371: PUSH
26372: LD_INT 27
26374: PUSH
26375: LD_INT 36
26377: PUSH
26378: LD_INT 69
26380: PUSH
26381: LD_INT 39
26383: PUSH
26384: LD_INT 34
26386: PUSH
26387: LD_INT 40
26389: PUSH
26390: LD_INT 48
26392: PUSH
26393: LD_INT 49
26395: PUSH
26396: LD_INT 50
26398: PUSH
26399: LD_INT 51
26401: PUSH
26402: LD_INT 52
26404: PUSH
26405: LD_INT 53
26407: PUSH
26408: LD_INT 54
26410: PUSH
26411: LD_INT 55
26413: PUSH
26414: LD_INT 56
26416: PUSH
26417: LD_INT 57
26419: PUSH
26420: LD_INT 58
26422: PUSH
26423: LD_INT 59
26425: PUSH
26426: LD_INT 60
26428: PUSH
26429: LD_INT 61
26431: PUSH
26432: LD_INT 62
26434: PUSH
26435: LD_INT 80
26437: PUSH
26438: LD_INT 82
26440: PUSH
26441: LD_INT 83
26443: PUSH
26444: LD_INT 84
26446: PUSH
26447: LD_INT 85
26449: PUSH
26450: LD_INT 86
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: ST_TO_ADDR
26506: GO 26973
26508: LD_INT 2
26510: DOUBLE
26511: EQUAL
26512: IFTRUE 26516
26514: GO 26742
26516: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26517: LD_ADDR_VAR 0 4
26521: PUSH
26522: LD_INT 35
26524: PUSH
26525: LD_INT 45
26527: PUSH
26528: LD_INT 46
26530: PUSH
26531: LD_INT 47
26533: PUSH
26534: LD_INT 82
26536: PUSH
26537: LD_INT 83
26539: PUSH
26540: LD_INT 84
26542: PUSH
26543: LD_INT 85
26545: PUSH
26546: LD_INT 87
26548: PUSH
26549: LD_INT 70
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 11
26557: PUSH
26558: LD_INT 3
26560: PUSH
26561: LD_INT 4
26563: PUSH
26564: LD_INT 5
26566: PUSH
26567: LD_INT 6
26569: PUSH
26570: LD_INT 15
26572: PUSH
26573: LD_INT 18
26575: PUSH
26576: LD_INT 7
26578: PUSH
26579: LD_INT 17
26581: PUSH
26582: LD_INT 8
26584: PUSH
26585: LD_INT 20
26587: PUSH
26588: LD_INT 21
26590: PUSH
26591: LD_INT 22
26593: PUSH
26594: LD_INT 72
26596: PUSH
26597: LD_INT 26
26599: PUSH
26600: LD_INT 69
26602: PUSH
26603: LD_INT 39
26605: PUSH
26606: LD_INT 40
26608: PUSH
26609: LD_INT 41
26611: PUSH
26612: LD_INT 42
26614: PUSH
26615: LD_INT 43
26617: PUSH
26618: LD_INT 48
26620: PUSH
26621: LD_INT 49
26623: PUSH
26624: LD_INT 50
26626: PUSH
26627: LD_INT 51
26629: PUSH
26630: LD_INT 52
26632: PUSH
26633: LD_INT 53
26635: PUSH
26636: LD_INT 54
26638: PUSH
26639: LD_INT 55
26641: PUSH
26642: LD_INT 56
26644: PUSH
26645: LD_INT 60
26647: PUSH
26648: LD_INT 61
26650: PUSH
26651: LD_INT 62
26653: PUSH
26654: LD_INT 66
26656: PUSH
26657: LD_INT 67
26659: PUSH
26660: LD_INT 68
26662: PUSH
26663: LD_INT 81
26665: PUSH
26666: LD_INT 82
26668: PUSH
26669: LD_INT 83
26671: PUSH
26672: LD_INT 84
26674: PUSH
26675: LD_INT 85
26677: PUSH
26678: LD_INT 87
26680: PUSH
26681: LD_INT 88
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: ST_TO_ADDR
26740: GO 26973
26742: LD_INT 3
26744: DOUBLE
26745: EQUAL
26746: IFTRUE 26750
26748: GO 26972
26750: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26751: LD_ADDR_VAR 0 4
26755: PUSH
26756: LD_INT 46
26758: PUSH
26759: LD_INT 47
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: LD_INT 2
26767: PUSH
26768: LD_INT 82
26770: PUSH
26771: LD_INT 83
26773: PUSH
26774: LD_INT 84
26776: PUSH
26777: LD_INT 85
26779: PUSH
26780: LD_INT 86
26782: PUSH
26783: LD_INT 11
26785: PUSH
26786: LD_INT 9
26788: PUSH
26789: LD_INT 20
26791: PUSH
26792: LD_INT 19
26794: PUSH
26795: LD_INT 21
26797: PUSH
26798: LD_INT 24
26800: PUSH
26801: LD_INT 22
26803: PUSH
26804: LD_INT 25
26806: PUSH
26807: LD_INT 28
26809: PUSH
26810: LD_INT 29
26812: PUSH
26813: LD_INT 30
26815: PUSH
26816: LD_INT 31
26818: PUSH
26819: LD_INT 37
26821: PUSH
26822: LD_INT 38
26824: PUSH
26825: LD_INT 32
26827: PUSH
26828: LD_INT 27
26830: PUSH
26831: LD_INT 33
26833: PUSH
26834: LD_INT 69
26836: PUSH
26837: LD_INT 39
26839: PUSH
26840: LD_INT 34
26842: PUSH
26843: LD_INT 40
26845: PUSH
26846: LD_INT 71
26848: PUSH
26849: LD_INT 23
26851: PUSH
26852: LD_INT 44
26854: PUSH
26855: LD_INT 48
26857: PUSH
26858: LD_INT 49
26860: PUSH
26861: LD_INT 50
26863: PUSH
26864: LD_INT 51
26866: PUSH
26867: LD_INT 52
26869: PUSH
26870: LD_INT 53
26872: PUSH
26873: LD_INT 54
26875: PUSH
26876: LD_INT 55
26878: PUSH
26879: LD_INT 56
26881: PUSH
26882: LD_INT 57
26884: PUSH
26885: LD_INT 58
26887: PUSH
26888: LD_INT 59
26890: PUSH
26891: LD_INT 63
26893: PUSH
26894: LD_INT 64
26896: PUSH
26897: LD_INT 65
26899: PUSH
26900: LD_INT 82
26902: PUSH
26903: LD_INT 83
26905: PUSH
26906: LD_INT 84
26908: PUSH
26909: LD_INT 85
26911: PUSH
26912: LD_INT 86
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: ST_TO_ADDR
26970: GO 26973
26972: POP
// if state > - 1 and state < 3 then
26973: LD_VAR 0 3
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: GREATER
26982: PUSH
26983: LD_VAR 0 3
26987: PUSH
26988: LD_INT 3
26990: LESS
26991: AND
26992: IFFALSE 27049
// for i in result do
26994: LD_ADDR_VAR 0 5
26998: PUSH
26999: LD_VAR 0 4
27003: PUSH
27004: FOR_IN
27005: IFFALSE 27047
// if GetTech ( i , side ) <> state then
27007: LD_VAR 0 5
27011: PPUSH
27012: LD_VAR 0 1
27016: PPUSH
27017: CALL_OW 321
27021: PUSH
27022: LD_VAR 0 3
27026: NONEQUAL
27027: IFFALSE 27045
// result := result diff i ;
27029: LD_ADDR_VAR 0 4
27033: PUSH
27034: LD_VAR 0 4
27038: PUSH
27039: LD_VAR 0 5
27043: DIFF
27044: ST_TO_ADDR
27045: GO 27004
27047: POP
27048: POP
// end ;
27049: LD_VAR 0 4
27053: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27054: LD_INT 0
27056: PPUSH
27057: PPUSH
27058: PPUSH
// result := true ;
27059: LD_ADDR_VAR 0 3
27063: PUSH
27064: LD_INT 1
27066: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27067: LD_ADDR_VAR 0 5
27071: PUSH
27072: LD_VAR 0 2
27076: PPUSH
27077: CALL_OW 480
27081: ST_TO_ADDR
// if not tmp then
27082: LD_VAR 0 5
27086: NOT
27087: IFFALSE 27091
// exit ;
27089: GO 27140
// for i in tmp do
27091: LD_ADDR_VAR 0 4
27095: PUSH
27096: LD_VAR 0 5
27100: PUSH
27101: FOR_IN
27102: IFFALSE 27138
// if GetTech ( i , side ) <> state_researched then
27104: LD_VAR 0 4
27108: PPUSH
27109: LD_VAR 0 1
27113: PPUSH
27114: CALL_OW 321
27118: PUSH
27119: LD_INT 2
27121: NONEQUAL
27122: IFFALSE 27136
// begin result := false ;
27124: LD_ADDR_VAR 0 3
27128: PUSH
27129: LD_INT 0
27131: ST_TO_ADDR
// exit ;
27132: POP
27133: POP
27134: GO 27140
// end ;
27136: GO 27101
27138: POP
27139: POP
// end ;
27140: LD_VAR 0 3
27144: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27145: LD_INT 0
27147: PPUSH
27148: PPUSH
27149: PPUSH
27150: PPUSH
27151: PPUSH
27152: PPUSH
27153: PPUSH
27154: PPUSH
27155: PPUSH
27156: PPUSH
27157: PPUSH
27158: PPUSH
27159: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27160: LD_VAR 0 1
27164: NOT
27165: PUSH
27166: LD_VAR 0 1
27170: PPUSH
27171: CALL_OW 257
27175: PUSH
27176: LD_INT 9
27178: NONEQUAL
27179: OR
27180: IFFALSE 27184
// exit ;
27182: GO 27757
// side := GetSide ( unit ) ;
27184: LD_ADDR_VAR 0 9
27188: PUSH
27189: LD_VAR 0 1
27193: PPUSH
27194: CALL_OW 255
27198: ST_TO_ADDR
// tech_space := tech_spacanom ;
27199: LD_ADDR_VAR 0 12
27203: PUSH
27204: LD_INT 29
27206: ST_TO_ADDR
// tech_time := tech_taurad ;
27207: LD_ADDR_VAR 0 13
27211: PUSH
27212: LD_INT 28
27214: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27215: LD_ADDR_VAR 0 11
27219: PUSH
27220: LD_VAR 0 1
27224: PPUSH
27225: CALL_OW 310
27229: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27230: LD_VAR 0 11
27234: PPUSH
27235: CALL_OW 247
27239: PUSH
27240: LD_INT 2
27242: EQUAL
27243: IFFALSE 27247
// exit ;
27245: GO 27757
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27247: LD_ADDR_VAR 0 8
27251: PUSH
27252: LD_INT 81
27254: PUSH
27255: LD_VAR 0 9
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 3
27266: PUSH
27267: LD_INT 21
27269: PUSH
27270: LD_INT 3
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PPUSH
27285: CALL_OW 69
27289: ST_TO_ADDR
// if not tmp then
27290: LD_VAR 0 8
27294: NOT
27295: IFFALSE 27299
// exit ;
27297: GO 27757
// if in_unit then
27299: LD_VAR 0 11
27303: IFFALSE 27327
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27305: LD_ADDR_VAR 0 10
27309: PUSH
27310: LD_VAR 0 8
27314: PPUSH
27315: LD_VAR 0 11
27319: PPUSH
27320: CALL_OW 74
27324: ST_TO_ADDR
27325: GO 27347
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27327: LD_ADDR_VAR 0 10
27331: PUSH
27332: LD_VAR 0 8
27336: PPUSH
27337: LD_VAR 0 1
27341: PPUSH
27342: CALL_OW 74
27346: ST_TO_ADDR
// if not enemy then
27347: LD_VAR 0 10
27351: NOT
27352: IFFALSE 27356
// exit ;
27354: GO 27757
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27356: LD_VAR 0 11
27360: PUSH
27361: LD_VAR 0 11
27365: PPUSH
27366: LD_VAR 0 10
27370: PPUSH
27371: CALL_OW 296
27375: PUSH
27376: LD_INT 13
27378: GREATER
27379: AND
27380: PUSH
27381: LD_VAR 0 1
27385: PPUSH
27386: LD_VAR 0 10
27390: PPUSH
27391: CALL_OW 296
27395: PUSH
27396: LD_INT 12
27398: GREATER
27399: OR
27400: IFFALSE 27404
// exit ;
27402: GO 27757
// missile := [ 1 ] ;
27404: LD_ADDR_VAR 0 14
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27415: LD_VAR 0 9
27419: PPUSH
27420: LD_VAR 0 12
27424: PPUSH
27425: CALL_OW 325
27429: IFFALSE 27458
// missile := Insert ( missile , missile + 1 , 2 ) ;
27431: LD_ADDR_VAR 0 14
27435: PUSH
27436: LD_VAR 0 14
27440: PPUSH
27441: LD_VAR 0 14
27445: PUSH
27446: LD_INT 1
27448: PLUS
27449: PPUSH
27450: LD_INT 2
27452: PPUSH
27453: CALL_OW 2
27457: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27458: LD_VAR 0 9
27462: PPUSH
27463: LD_VAR 0 13
27467: PPUSH
27468: CALL_OW 325
27472: PUSH
27473: LD_VAR 0 10
27477: PPUSH
27478: CALL_OW 255
27482: PPUSH
27483: LD_VAR 0 13
27487: PPUSH
27488: CALL_OW 325
27492: NOT
27493: AND
27494: IFFALSE 27523
// missile := Insert ( missile , missile + 1 , 3 ) ;
27496: LD_ADDR_VAR 0 14
27500: PUSH
27501: LD_VAR 0 14
27505: PPUSH
27506: LD_VAR 0 14
27510: PUSH
27511: LD_INT 1
27513: PLUS
27514: PPUSH
27515: LD_INT 3
27517: PPUSH
27518: CALL_OW 2
27522: ST_TO_ADDR
// if missile < 2 then
27523: LD_VAR 0 14
27527: PUSH
27528: LD_INT 2
27530: LESS
27531: IFFALSE 27535
// exit ;
27533: GO 27757
// x := GetX ( enemy ) ;
27535: LD_ADDR_VAR 0 4
27539: PUSH
27540: LD_VAR 0 10
27544: PPUSH
27545: CALL_OW 250
27549: ST_TO_ADDR
// y := GetY ( enemy ) ;
27550: LD_ADDR_VAR 0 5
27554: PUSH
27555: LD_VAR 0 10
27559: PPUSH
27560: CALL_OW 251
27564: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27565: LD_ADDR_VAR 0 6
27569: PUSH
27570: LD_VAR 0 4
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PPUSH
27579: LD_INT 1
27581: PPUSH
27582: CALL_OW 12
27586: PLUS
27587: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27588: LD_ADDR_VAR 0 7
27592: PUSH
27593: LD_VAR 0 5
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PPUSH
27602: LD_INT 1
27604: PPUSH
27605: CALL_OW 12
27609: PLUS
27610: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27611: LD_VAR 0 6
27615: PPUSH
27616: LD_VAR 0 7
27620: PPUSH
27621: CALL_OW 488
27625: NOT
27626: IFFALSE 27648
// begin _x := x ;
27628: LD_ADDR_VAR 0 6
27632: PUSH
27633: LD_VAR 0 4
27637: ST_TO_ADDR
// _y := y ;
27638: LD_ADDR_VAR 0 7
27642: PUSH
27643: LD_VAR 0 5
27647: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27648: LD_ADDR_VAR 0 3
27652: PUSH
27653: LD_INT 1
27655: PPUSH
27656: LD_VAR 0 14
27660: PPUSH
27661: CALL_OW 12
27665: ST_TO_ADDR
// case i of 1 :
27666: LD_VAR 0 3
27670: PUSH
27671: LD_INT 1
27673: DOUBLE
27674: EQUAL
27675: IFTRUE 27679
27677: GO 27696
27679: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27680: LD_VAR 0 1
27684: PPUSH
27685: LD_VAR 0 10
27689: PPUSH
27690: CALL_OW 115
27694: GO 27757
27696: LD_INT 2
27698: DOUBLE
27699: EQUAL
27700: IFTRUE 27704
27702: GO 27726
27704: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27705: LD_VAR 0 1
27709: PPUSH
27710: LD_VAR 0 6
27714: PPUSH
27715: LD_VAR 0 7
27719: PPUSH
27720: CALL_OW 153
27724: GO 27757
27726: LD_INT 3
27728: DOUBLE
27729: EQUAL
27730: IFTRUE 27734
27732: GO 27756
27734: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27735: LD_VAR 0 1
27739: PPUSH
27740: LD_VAR 0 6
27744: PPUSH
27745: LD_VAR 0 7
27749: PPUSH
27750: CALL_OW 154
27754: GO 27757
27756: POP
// end ;
27757: LD_VAR 0 2
27761: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27762: LD_INT 0
27764: PPUSH
27765: PPUSH
27766: PPUSH
27767: PPUSH
27768: PPUSH
27769: PPUSH
// if not unit or not building then
27770: LD_VAR 0 1
27774: NOT
27775: PUSH
27776: LD_VAR 0 2
27780: NOT
27781: OR
27782: IFFALSE 27786
// exit ;
27784: GO 27944
// x := GetX ( building ) ;
27786: LD_ADDR_VAR 0 5
27790: PUSH
27791: LD_VAR 0 2
27795: PPUSH
27796: CALL_OW 250
27800: ST_TO_ADDR
// y := GetY ( building ) ;
27801: LD_ADDR_VAR 0 6
27805: PUSH
27806: LD_VAR 0 2
27810: PPUSH
27811: CALL_OW 251
27815: ST_TO_ADDR
// for i = 0 to 5 do
27816: LD_ADDR_VAR 0 4
27820: PUSH
27821: DOUBLE
27822: LD_INT 0
27824: DEC
27825: ST_TO_ADDR
27826: LD_INT 5
27828: PUSH
27829: FOR_TO
27830: IFFALSE 27942
// begin _x := ShiftX ( x , i , 3 ) ;
27832: LD_ADDR_VAR 0 7
27836: PUSH
27837: LD_VAR 0 5
27841: PPUSH
27842: LD_VAR 0 4
27846: PPUSH
27847: LD_INT 3
27849: PPUSH
27850: CALL_OW 272
27854: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27855: LD_ADDR_VAR 0 8
27859: PUSH
27860: LD_VAR 0 6
27864: PPUSH
27865: LD_VAR 0 4
27869: PPUSH
27870: LD_INT 3
27872: PPUSH
27873: CALL_OW 273
27877: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27878: LD_VAR 0 7
27882: PPUSH
27883: LD_VAR 0 8
27887: PPUSH
27888: CALL_OW 488
27892: NOT
27893: IFFALSE 27897
// continue ;
27895: GO 27829
// if HexInfo ( _x , _y ) = 0 then
27897: LD_VAR 0 7
27901: PPUSH
27902: LD_VAR 0 8
27906: PPUSH
27907: CALL_OW 428
27911: PUSH
27912: LD_INT 0
27914: EQUAL
27915: IFFALSE 27940
// begin ComMoveXY ( unit , _x , _y ) ;
27917: LD_VAR 0 1
27921: PPUSH
27922: LD_VAR 0 7
27926: PPUSH
27927: LD_VAR 0 8
27931: PPUSH
27932: CALL_OW 111
// exit ;
27936: POP
27937: POP
27938: GO 27944
// end ; end ;
27940: GO 27829
27942: POP
27943: POP
// end ;
27944: LD_VAR 0 3
27948: RET
// export function ScanBase ( side , base_area ) ; begin
27949: LD_INT 0
27951: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27952: LD_ADDR_VAR 0 3
27956: PUSH
27957: LD_VAR 0 2
27961: PPUSH
27962: LD_INT 81
27964: PUSH
27965: LD_VAR 0 1
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PPUSH
27974: CALL_OW 70
27978: ST_TO_ADDR
// end ;
27979: LD_VAR 0 3
27983: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27984: LD_INT 0
27986: PPUSH
27987: PPUSH
27988: PPUSH
27989: PPUSH
// result := false ;
27990: LD_ADDR_VAR 0 2
27994: PUSH
27995: LD_INT 0
27997: ST_TO_ADDR
// side := GetSide ( unit ) ;
27998: LD_ADDR_VAR 0 3
28002: PUSH
28003: LD_VAR 0 1
28007: PPUSH
28008: CALL_OW 255
28012: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28013: LD_ADDR_VAR 0 4
28017: PUSH
28018: LD_VAR 0 1
28022: PPUSH
28023: CALL_OW 248
28027: ST_TO_ADDR
// case nat of 1 :
28028: LD_VAR 0 4
28032: PUSH
28033: LD_INT 1
28035: DOUBLE
28036: EQUAL
28037: IFTRUE 28041
28039: GO 28052
28041: POP
// tech := tech_lassight ; 2 :
28042: LD_ADDR_VAR 0 5
28046: PUSH
28047: LD_INT 12
28049: ST_TO_ADDR
28050: GO 28091
28052: LD_INT 2
28054: DOUBLE
28055: EQUAL
28056: IFTRUE 28060
28058: GO 28071
28060: POP
// tech := tech_mortar ; 3 :
28061: LD_ADDR_VAR 0 5
28065: PUSH
28066: LD_INT 41
28068: ST_TO_ADDR
28069: GO 28091
28071: LD_INT 3
28073: DOUBLE
28074: EQUAL
28075: IFTRUE 28079
28077: GO 28090
28079: POP
// tech := tech_bazooka ; end ;
28080: LD_ADDR_VAR 0 5
28084: PUSH
28085: LD_INT 44
28087: ST_TO_ADDR
28088: GO 28091
28090: POP
// if Researched ( side , tech ) then
28091: LD_VAR 0 3
28095: PPUSH
28096: LD_VAR 0 5
28100: PPUSH
28101: CALL_OW 325
28105: IFFALSE 28132
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28107: LD_ADDR_VAR 0 2
28111: PUSH
28112: LD_INT 5
28114: PUSH
28115: LD_INT 8
28117: PUSH
28118: LD_INT 9
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: LIST
28125: PUSH
28126: LD_VAR 0 4
28130: ARRAY
28131: ST_TO_ADDR
// end ;
28132: LD_VAR 0 2
28136: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28137: LD_INT 0
28139: PPUSH
28140: PPUSH
28141: PPUSH
// if not mines then
28142: LD_VAR 0 2
28146: NOT
28147: IFFALSE 28151
// exit ;
28149: GO 28295
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28151: LD_ADDR_VAR 0 5
28155: PUSH
28156: LD_INT 81
28158: PUSH
28159: LD_VAR 0 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 3
28170: PUSH
28171: LD_INT 21
28173: PUSH
28174: LD_INT 3
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PPUSH
28189: CALL_OW 69
28193: ST_TO_ADDR
// for i in mines do
28194: LD_ADDR_VAR 0 4
28198: PUSH
28199: LD_VAR 0 2
28203: PUSH
28204: FOR_IN
28205: IFFALSE 28293
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28207: LD_VAR 0 4
28211: PUSH
28212: LD_INT 1
28214: ARRAY
28215: PPUSH
28216: LD_VAR 0 4
28220: PUSH
28221: LD_INT 2
28223: ARRAY
28224: PPUSH
28225: CALL_OW 458
28229: NOT
28230: IFFALSE 28234
// continue ;
28232: GO 28204
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28234: LD_VAR 0 4
28238: PUSH
28239: LD_INT 1
28241: ARRAY
28242: PPUSH
28243: LD_VAR 0 4
28247: PUSH
28248: LD_INT 2
28250: ARRAY
28251: PPUSH
28252: CALL_OW 428
28256: PUSH
28257: LD_VAR 0 5
28261: IN
28262: IFFALSE 28291
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28264: LD_VAR 0 4
28268: PUSH
28269: LD_INT 1
28271: ARRAY
28272: PPUSH
28273: LD_VAR 0 4
28277: PUSH
28278: LD_INT 2
28280: ARRAY
28281: PPUSH
28282: LD_VAR 0 1
28286: PPUSH
28287: CALL_OW 456
// end ;
28291: GO 28204
28293: POP
28294: POP
// end ;
28295: LD_VAR 0 3
28299: RET
// export function Count ( array ) ; var i ; begin
28300: LD_INT 0
28302: PPUSH
28303: PPUSH
// result := 0 ;
28304: LD_ADDR_VAR 0 2
28308: PUSH
28309: LD_INT 0
28311: ST_TO_ADDR
// for i in array do
28312: LD_ADDR_VAR 0 3
28316: PUSH
28317: LD_VAR 0 1
28321: PUSH
28322: FOR_IN
28323: IFFALSE 28347
// if i then
28325: LD_VAR 0 3
28329: IFFALSE 28345
// result := result + 1 ;
28331: LD_ADDR_VAR 0 2
28335: PUSH
28336: LD_VAR 0 2
28340: PUSH
28341: LD_INT 1
28343: PLUS
28344: ST_TO_ADDR
28345: GO 28322
28347: POP
28348: POP
// end ;
28349: LD_VAR 0 2
28353: RET
// export function IsEmpty ( building ) ; begin
28354: LD_INT 0
28356: PPUSH
// if not building then
28357: LD_VAR 0 1
28361: NOT
28362: IFFALSE 28366
// exit ;
28364: GO 28409
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28366: LD_ADDR_VAR 0 2
28370: PUSH
28371: LD_VAR 0 1
28375: PUSH
28376: LD_INT 22
28378: PUSH
28379: LD_VAR 0 1
28383: PPUSH
28384: CALL_OW 255
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 58
28395: PUSH
28396: EMPTY
28397: LIST
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PPUSH
28403: CALL_OW 69
28407: IN
28408: ST_TO_ADDR
// end ;
28409: LD_VAR 0 2
28413: RET
// export function IsNotFull ( building ) ; begin
28414: LD_INT 0
28416: PPUSH
// if not building then
28417: LD_VAR 0 1
28421: NOT
28422: IFFALSE 28426
// exit ;
28424: GO 28445
// result := UnitsInside ( building ) < 6 ;
28426: LD_ADDR_VAR 0 2
28430: PUSH
28431: LD_VAR 0 1
28435: PPUSH
28436: CALL_OW 313
28440: PUSH
28441: LD_INT 6
28443: LESS
28444: ST_TO_ADDR
// end ;
28445: LD_VAR 0 2
28449: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28450: LD_INT 0
28452: PPUSH
28453: PPUSH
28454: PPUSH
28455: PPUSH
// tmp := [ ] ;
28456: LD_ADDR_VAR 0 3
28460: PUSH
28461: EMPTY
28462: ST_TO_ADDR
// list := [ ] ;
28463: LD_ADDR_VAR 0 5
28467: PUSH
28468: EMPTY
28469: ST_TO_ADDR
// for i = 16 to 25 do
28470: LD_ADDR_VAR 0 4
28474: PUSH
28475: DOUBLE
28476: LD_INT 16
28478: DEC
28479: ST_TO_ADDR
28480: LD_INT 25
28482: PUSH
28483: FOR_TO
28484: IFFALSE 28557
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: LD_VAR 0 3
28495: PUSH
28496: LD_INT 22
28498: PUSH
28499: LD_VAR 0 1
28503: PPUSH
28504: CALL_OW 255
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 91
28515: PUSH
28516: LD_VAR 0 1
28520: PUSH
28521: LD_INT 6
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 30
28531: PUSH
28532: LD_VAR 0 4
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: PPUSH
28549: CALL_OW 69
28553: ADD
28554: ST_TO_ADDR
28555: GO 28483
28557: POP
28558: POP
// for i = 1 to tmp do
28559: LD_ADDR_VAR 0 4
28563: PUSH
28564: DOUBLE
28565: LD_INT 1
28567: DEC
28568: ST_TO_ADDR
28569: LD_VAR 0 3
28573: PUSH
28574: FOR_TO
28575: IFFALSE 28663
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28577: LD_ADDR_VAR 0 5
28581: PUSH
28582: LD_VAR 0 5
28586: PUSH
28587: LD_VAR 0 3
28591: PUSH
28592: LD_VAR 0 4
28596: ARRAY
28597: PPUSH
28598: CALL_OW 266
28602: PUSH
28603: LD_VAR 0 3
28607: PUSH
28608: LD_VAR 0 4
28612: ARRAY
28613: PPUSH
28614: CALL_OW 250
28618: PUSH
28619: LD_VAR 0 3
28623: PUSH
28624: LD_VAR 0 4
28628: ARRAY
28629: PPUSH
28630: CALL_OW 251
28634: PUSH
28635: LD_VAR 0 3
28639: PUSH
28640: LD_VAR 0 4
28644: ARRAY
28645: PPUSH
28646: CALL_OW 254
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: PUSH
28657: EMPTY
28658: LIST
28659: ADD
28660: ST_TO_ADDR
28661: GO 28574
28663: POP
28664: POP
// result := list ;
28665: LD_ADDR_VAR 0 2
28669: PUSH
28670: LD_VAR 0 5
28674: ST_TO_ADDR
// end ;
28675: LD_VAR 0 2
28679: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28680: LD_INT 0
28682: PPUSH
28683: PPUSH
28684: PPUSH
28685: PPUSH
28686: PPUSH
28687: PPUSH
28688: PPUSH
// if not factory then
28689: LD_VAR 0 1
28693: NOT
28694: IFFALSE 28698
// exit ;
28696: GO 29291
// if control = control_apeman then
28698: LD_VAR 0 4
28702: PUSH
28703: LD_INT 5
28705: EQUAL
28706: IFFALSE 28815
// begin tmp := UnitsInside ( factory ) ;
28708: LD_ADDR_VAR 0 8
28712: PUSH
28713: LD_VAR 0 1
28717: PPUSH
28718: CALL_OW 313
28722: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28723: LD_VAR 0 8
28727: PPUSH
28728: LD_INT 25
28730: PUSH
28731: LD_INT 12
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PPUSH
28738: CALL_OW 72
28742: NOT
28743: IFFALSE 28753
// control := control_manual ;
28745: LD_ADDR_VAR 0 4
28749: PUSH
28750: LD_INT 1
28752: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28753: LD_ADDR_VAR 0 8
28757: PUSH
28758: LD_VAR 0 1
28762: PPUSH
28763: CALL 28450 0 1
28767: ST_TO_ADDR
// if tmp then
28768: LD_VAR 0 8
28772: IFFALSE 28815
// begin for i in tmp do
28774: LD_ADDR_VAR 0 7
28778: PUSH
28779: LD_VAR 0 8
28783: PUSH
28784: FOR_IN
28785: IFFALSE 28813
// if i [ 1 ] = b_ext_radio then
28787: LD_VAR 0 7
28791: PUSH
28792: LD_INT 1
28794: ARRAY
28795: PUSH
28796: LD_INT 22
28798: EQUAL
28799: IFFALSE 28811
// begin control := control_remote ;
28801: LD_ADDR_VAR 0 4
28805: PUSH
28806: LD_INT 2
28808: ST_TO_ADDR
// break ;
28809: GO 28813
// end ;
28811: GO 28784
28813: POP
28814: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28815: LD_VAR 0 1
28819: PPUSH
28820: LD_VAR 0 2
28824: PPUSH
28825: LD_VAR 0 3
28829: PPUSH
28830: LD_VAR 0 4
28834: PPUSH
28835: LD_VAR 0 5
28839: PPUSH
28840: CALL_OW 448
28844: IFFALSE 28879
// begin result := [ chassis , engine , control , weapon ] ;
28846: LD_ADDR_VAR 0 6
28850: PUSH
28851: LD_VAR 0 2
28855: PUSH
28856: LD_VAR 0 3
28860: PUSH
28861: LD_VAR 0 4
28865: PUSH
28866: LD_VAR 0 5
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: ST_TO_ADDR
// exit ;
28877: GO 29291
// end ; _chassis := AvailableChassisList ( factory ) ;
28879: LD_ADDR_VAR 0 9
28883: PUSH
28884: LD_VAR 0 1
28888: PPUSH
28889: CALL_OW 475
28893: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28894: LD_ADDR_VAR 0 11
28898: PUSH
28899: LD_VAR 0 1
28903: PPUSH
28904: CALL_OW 476
28908: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28909: LD_ADDR_VAR 0 12
28913: PUSH
28914: LD_VAR 0 1
28918: PPUSH
28919: CALL_OW 477
28923: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28924: LD_ADDR_VAR 0 10
28928: PUSH
28929: LD_VAR 0 1
28933: PPUSH
28934: CALL_OW 478
28938: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28939: LD_VAR 0 9
28943: NOT
28944: PUSH
28945: LD_VAR 0 11
28949: NOT
28950: OR
28951: PUSH
28952: LD_VAR 0 12
28956: NOT
28957: OR
28958: PUSH
28959: LD_VAR 0 10
28963: NOT
28964: OR
28965: IFFALSE 29000
// begin result := [ chassis , engine , control , weapon ] ;
28967: LD_ADDR_VAR 0 6
28971: PUSH
28972: LD_VAR 0 2
28976: PUSH
28977: LD_VAR 0 3
28981: PUSH
28982: LD_VAR 0 4
28986: PUSH
28987: LD_VAR 0 5
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: ST_TO_ADDR
// exit ;
28998: GO 29291
// end ; if not chassis in _chassis then
29000: LD_VAR 0 2
29004: PUSH
29005: LD_VAR 0 9
29009: IN
29010: NOT
29011: IFFALSE 29037
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29013: LD_ADDR_VAR 0 2
29017: PUSH
29018: LD_VAR 0 9
29022: PUSH
29023: LD_INT 1
29025: PPUSH
29026: LD_VAR 0 9
29030: PPUSH
29031: CALL_OW 12
29035: ARRAY
29036: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29037: LD_VAR 0 2
29041: PPUSH
29042: LD_VAR 0 3
29046: PPUSH
29047: CALL 29296 0 2
29051: NOT
29052: IFFALSE 29111
// repeat engine := _engine [ 1 ] ;
29054: LD_ADDR_VAR 0 3
29058: PUSH
29059: LD_VAR 0 11
29063: PUSH
29064: LD_INT 1
29066: ARRAY
29067: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29068: LD_ADDR_VAR 0 11
29072: PUSH
29073: LD_VAR 0 11
29077: PPUSH
29078: LD_INT 1
29080: PPUSH
29081: CALL_OW 3
29085: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29086: LD_VAR 0 2
29090: PPUSH
29091: LD_VAR 0 3
29095: PPUSH
29096: CALL 29296 0 2
29100: PUSH
29101: LD_VAR 0 11
29105: PUSH
29106: EMPTY
29107: EQUAL
29108: OR
29109: IFFALSE 29054
// if not control in _control then
29111: LD_VAR 0 4
29115: PUSH
29116: LD_VAR 0 12
29120: IN
29121: NOT
29122: IFFALSE 29148
// control := _control [ rand ( 1 , _control ) ] ;
29124: LD_ADDR_VAR 0 4
29128: PUSH
29129: LD_VAR 0 12
29133: PUSH
29134: LD_INT 1
29136: PPUSH
29137: LD_VAR 0 12
29141: PPUSH
29142: CALL_OW 12
29146: ARRAY
29147: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29148: LD_VAR 0 2
29152: PPUSH
29153: LD_VAR 0 5
29157: PPUSH
29158: CALL 29516 0 2
29162: NOT
29163: IFFALSE 29222
// repeat weapon := _weapon [ 1 ] ;
29165: LD_ADDR_VAR 0 5
29169: PUSH
29170: LD_VAR 0 10
29174: PUSH
29175: LD_INT 1
29177: ARRAY
29178: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29179: LD_ADDR_VAR 0 10
29183: PUSH
29184: LD_VAR 0 10
29188: PPUSH
29189: LD_INT 1
29191: PPUSH
29192: CALL_OW 3
29196: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29197: LD_VAR 0 2
29201: PPUSH
29202: LD_VAR 0 5
29206: PPUSH
29207: CALL 29516 0 2
29211: PUSH
29212: LD_VAR 0 10
29216: PUSH
29217: EMPTY
29218: EQUAL
29219: OR
29220: IFFALSE 29165
// result := [ ] ;
29222: LD_ADDR_VAR 0 6
29226: PUSH
29227: EMPTY
29228: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29229: LD_VAR 0 1
29233: PPUSH
29234: LD_VAR 0 2
29238: PPUSH
29239: LD_VAR 0 3
29243: PPUSH
29244: LD_VAR 0 4
29248: PPUSH
29249: LD_VAR 0 5
29253: PPUSH
29254: CALL_OW 448
29258: IFFALSE 29291
// result := [ chassis , engine , control , weapon ] ;
29260: LD_ADDR_VAR 0 6
29264: PUSH
29265: LD_VAR 0 2
29269: PUSH
29270: LD_VAR 0 3
29274: PUSH
29275: LD_VAR 0 4
29279: PUSH
29280: LD_VAR 0 5
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
// end ;
29291: LD_VAR 0 6
29295: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29296: LD_INT 0
29298: PPUSH
// if not chassis or not engine then
29299: LD_VAR 0 1
29303: NOT
29304: PUSH
29305: LD_VAR 0 2
29309: NOT
29310: OR
29311: IFFALSE 29315
// exit ;
29313: GO 29511
// case engine of engine_solar :
29315: LD_VAR 0 2
29319: PUSH
29320: LD_INT 2
29322: DOUBLE
29323: EQUAL
29324: IFTRUE 29328
29326: GO 29366
29328: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_INT 11
29336: PUSH
29337: LD_INT 12
29339: PUSH
29340: LD_INT 13
29342: PUSH
29343: LD_INT 14
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: ST_TO_ADDR
29364: GO 29495
29366: LD_INT 1
29368: DOUBLE
29369: EQUAL
29370: IFTRUE 29374
29372: GO 29436
29374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29375: LD_ADDR_VAR 0 3
29379: PUSH
29380: LD_INT 11
29382: PUSH
29383: LD_INT 12
29385: PUSH
29386: LD_INT 13
29388: PUSH
29389: LD_INT 14
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: LD_INT 3
29400: PUSH
29401: LD_INT 4
29403: PUSH
29404: LD_INT 5
29406: PUSH
29407: LD_INT 21
29409: PUSH
29410: LD_INT 23
29412: PUSH
29413: LD_INT 22
29415: PUSH
29416: LD_INT 24
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: ST_TO_ADDR
29434: GO 29495
29436: LD_INT 3
29438: DOUBLE
29439: EQUAL
29440: IFTRUE 29444
29442: GO 29494
29444: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29445: LD_ADDR_VAR 0 3
29449: PUSH
29450: LD_INT 13
29452: PUSH
29453: LD_INT 14
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: LD_INT 3
29461: PUSH
29462: LD_INT 4
29464: PUSH
29465: LD_INT 5
29467: PUSH
29468: LD_INT 21
29470: PUSH
29471: LD_INT 22
29473: PUSH
29474: LD_INT 23
29476: PUSH
29477: LD_INT 24
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
29492: GO 29495
29494: POP
// result := ( chassis in result ) ;
29495: LD_ADDR_VAR 0 3
29499: PUSH
29500: LD_VAR 0 1
29504: PUSH
29505: LD_VAR 0 3
29509: IN
29510: ST_TO_ADDR
// end ;
29511: LD_VAR 0 3
29515: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29516: LD_INT 0
29518: PPUSH
// if not chassis or not weapon then
29519: LD_VAR 0 1
29523: NOT
29524: PUSH
29525: LD_VAR 0 2
29529: NOT
29530: OR
29531: IFFALSE 29535
// exit ;
29533: GO 30597
// case weapon of us_machine_gun :
29535: LD_VAR 0 2
29539: PUSH
29540: LD_INT 2
29542: DOUBLE
29543: EQUAL
29544: IFTRUE 29548
29546: GO 29578
29548: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29549: LD_ADDR_VAR 0 3
29553: PUSH
29554: LD_INT 1
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 4
29565: PUSH
29566: LD_INT 5
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: ST_TO_ADDR
29576: GO 30581
29578: LD_INT 3
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29616
29586: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29587: LD_ADDR_VAR 0 3
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: LD_INT 3
29600: PUSH
29601: LD_INT 4
29603: PUSH
29604: LD_INT 5
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: ST_TO_ADDR
29614: GO 30581
29616: LD_INT 11
29618: DOUBLE
29619: EQUAL
29620: IFTRUE 29624
29622: GO 29654
29624: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29625: LD_ADDR_VAR 0 3
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: LD_INT 4
29641: PUSH
29642: LD_INT 5
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: ST_TO_ADDR
29652: GO 30581
29654: LD_INT 4
29656: DOUBLE
29657: EQUAL
29658: IFTRUE 29662
29660: GO 29688
29662: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29663: LD_ADDR_VAR 0 3
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 4
29676: PUSH
29677: LD_INT 5
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: ST_TO_ADDR
29686: GO 30581
29688: LD_INT 5
29690: DOUBLE
29691: EQUAL
29692: IFTRUE 29696
29694: GO 29722
29696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29697: LD_ADDR_VAR 0 3
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: LD_INT 3
29707: PUSH
29708: LD_INT 4
29710: PUSH
29711: LD_INT 5
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: ST_TO_ADDR
29720: GO 30581
29722: LD_INT 9
29724: DOUBLE
29725: EQUAL
29726: IFTRUE 29730
29728: GO 29756
29730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29731: LD_ADDR_VAR 0 3
29735: PUSH
29736: LD_INT 2
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: LD_INT 4
29744: PUSH
29745: LD_INT 5
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: ST_TO_ADDR
29754: GO 30581
29756: LD_INT 7
29758: DOUBLE
29759: EQUAL
29760: IFTRUE 29764
29762: GO 29790
29764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29765: LD_ADDR_VAR 0 3
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: LD_INT 4
29778: PUSH
29779: LD_INT 5
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: ST_TO_ADDR
29788: GO 30581
29790: LD_INT 12
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29824
29798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29799: LD_ADDR_VAR 0 3
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 3
29809: PUSH
29810: LD_INT 4
29812: PUSH
29813: LD_INT 5
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: ST_TO_ADDR
29822: GO 30581
29824: LD_INT 13
29826: DOUBLE
29827: EQUAL
29828: IFTRUE 29832
29830: GO 29858
29832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29833: LD_ADDR_VAR 0 3
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: LD_INT 3
29843: PUSH
29844: LD_INT 4
29846: PUSH
29847: LD_INT 5
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: ST_TO_ADDR
29856: GO 30581
29858: LD_INT 14
29860: DOUBLE
29861: EQUAL
29862: IFTRUE 29866
29864: GO 29884
29866: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29867: LD_ADDR_VAR 0 3
29871: PUSH
29872: LD_INT 4
29874: PUSH
29875: LD_INT 5
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: ST_TO_ADDR
29882: GO 30581
29884: LD_INT 6
29886: DOUBLE
29887: EQUAL
29888: IFTRUE 29892
29890: GO 29910
29892: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29893: LD_ADDR_VAR 0 3
29897: PUSH
29898: LD_INT 4
29900: PUSH
29901: LD_INT 5
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: ST_TO_ADDR
29908: GO 30581
29910: LD_INT 10
29912: DOUBLE
29913: EQUAL
29914: IFTRUE 29918
29916: GO 29936
29918: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29919: LD_ADDR_VAR 0 3
29923: PUSH
29924: LD_INT 4
29926: PUSH
29927: LD_INT 5
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: ST_TO_ADDR
29934: GO 30581
29936: LD_INT 22
29938: DOUBLE
29939: EQUAL
29940: IFTRUE 29944
29942: GO 29970
29944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29945: LD_ADDR_VAR 0 3
29949: PUSH
29950: LD_INT 11
29952: PUSH
29953: LD_INT 12
29955: PUSH
29956: LD_INT 13
29958: PUSH
29959: LD_INT 14
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: ST_TO_ADDR
29968: GO 30581
29970: LD_INT 23
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 30004
29978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29979: LD_ADDR_VAR 0 3
29983: PUSH
29984: LD_INT 11
29986: PUSH
29987: LD_INT 12
29989: PUSH
29990: LD_INT 13
29992: PUSH
29993: LD_INT 14
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: ST_TO_ADDR
30002: GO 30581
30004: LD_INT 24
30006: DOUBLE
30007: EQUAL
30008: IFTRUE 30012
30010: GO 30038
30012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_INT 11
30020: PUSH
30021: LD_INT 12
30023: PUSH
30024: LD_INT 13
30026: PUSH
30027: LD_INT 14
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: ST_TO_ADDR
30036: GO 30581
30038: LD_INT 30
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30072
30046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30047: LD_ADDR_VAR 0 3
30051: PUSH
30052: LD_INT 11
30054: PUSH
30055: LD_INT 12
30057: PUSH
30058: LD_INT 13
30060: PUSH
30061: LD_INT 14
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: ST_TO_ADDR
30070: GO 30581
30072: LD_INT 25
30074: DOUBLE
30075: EQUAL
30076: IFTRUE 30080
30078: GO 30098
30080: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30081: LD_ADDR_VAR 0 3
30085: PUSH
30086: LD_INT 13
30088: PUSH
30089: LD_INT 14
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: ST_TO_ADDR
30096: GO 30581
30098: LD_INT 27
30100: DOUBLE
30101: EQUAL
30102: IFTRUE 30106
30104: GO 30124
30106: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_INT 13
30114: PUSH
30115: LD_INT 14
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: ST_TO_ADDR
30122: GO 30581
30124: LD_EXP 23
30128: DOUBLE
30129: EQUAL
30130: IFTRUE 30134
30132: GO 30160
30134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30135: LD_ADDR_VAR 0 3
30139: PUSH
30140: LD_INT 11
30142: PUSH
30143: LD_INT 12
30145: PUSH
30146: LD_INT 13
30148: PUSH
30149: LD_INT 14
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: ST_TO_ADDR
30158: GO 30581
30160: LD_INT 28
30162: DOUBLE
30163: EQUAL
30164: IFTRUE 30168
30166: GO 30186
30168: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30169: LD_ADDR_VAR 0 3
30173: PUSH
30174: LD_INT 13
30176: PUSH
30177: LD_INT 14
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: ST_TO_ADDR
30184: GO 30581
30186: LD_INT 29
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30212
30194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30195: LD_ADDR_VAR 0 3
30199: PUSH
30200: LD_INT 13
30202: PUSH
30203: LD_INT 14
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: ST_TO_ADDR
30210: GO 30581
30212: LD_INT 31
30214: DOUBLE
30215: EQUAL
30216: IFTRUE 30220
30218: GO 30238
30220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30221: LD_ADDR_VAR 0 3
30225: PUSH
30226: LD_INT 13
30228: PUSH
30229: LD_INT 14
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: ST_TO_ADDR
30236: GO 30581
30238: LD_INT 26
30240: DOUBLE
30241: EQUAL
30242: IFTRUE 30246
30244: GO 30264
30246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_INT 13
30254: PUSH
30255: LD_INT 14
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: ST_TO_ADDR
30262: GO 30581
30264: LD_INT 42
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30298
30272: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30273: LD_ADDR_VAR 0 3
30277: PUSH
30278: LD_INT 21
30280: PUSH
30281: LD_INT 22
30283: PUSH
30284: LD_INT 23
30286: PUSH
30287: LD_INT 24
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: ST_TO_ADDR
30296: GO 30581
30298: LD_INT 43
30300: DOUBLE
30301: EQUAL
30302: IFTRUE 30306
30304: GO 30332
30306: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30307: LD_ADDR_VAR 0 3
30311: PUSH
30312: LD_INT 21
30314: PUSH
30315: LD_INT 22
30317: PUSH
30318: LD_INT 23
30320: PUSH
30321: LD_INT 24
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: ST_TO_ADDR
30330: GO 30581
30332: LD_INT 44
30334: DOUBLE
30335: EQUAL
30336: IFTRUE 30340
30338: GO 30366
30340: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30341: LD_ADDR_VAR 0 3
30345: PUSH
30346: LD_INT 21
30348: PUSH
30349: LD_INT 22
30351: PUSH
30352: LD_INT 23
30354: PUSH
30355: LD_INT 24
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: ST_TO_ADDR
30364: GO 30581
30366: LD_INT 45
30368: DOUBLE
30369: EQUAL
30370: IFTRUE 30374
30372: GO 30400
30374: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30375: LD_ADDR_VAR 0 3
30379: PUSH
30380: LD_INT 21
30382: PUSH
30383: LD_INT 22
30385: PUSH
30386: LD_INT 23
30388: PUSH
30389: LD_INT 24
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: ST_TO_ADDR
30398: GO 30581
30400: LD_INT 49
30402: DOUBLE
30403: EQUAL
30404: IFTRUE 30408
30406: GO 30434
30408: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30409: LD_ADDR_VAR 0 3
30413: PUSH
30414: LD_INT 21
30416: PUSH
30417: LD_INT 22
30419: PUSH
30420: LD_INT 23
30422: PUSH
30423: LD_INT 24
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: ST_TO_ADDR
30432: GO 30581
30434: LD_INT 51
30436: DOUBLE
30437: EQUAL
30438: IFTRUE 30442
30440: GO 30468
30442: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30443: LD_ADDR_VAR 0 3
30447: PUSH
30448: LD_INT 21
30450: PUSH
30451: LD_INT 22
30453: PUSH
30454: LD_INT 23
30456: PUSH
30457: LD_INT 24
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: ST_TO_ADDR
30466: GO 30581
30468: LD_INT 52
30470: DOUBLE
30471: EQUAL
30472: IFTRUE 30476
30474: GO 30502
30476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30477: LD_ADDR_VAR 0 3
30481: PUSH
30482: LD_INT 21
30484: PUSH
30485: LD_INT 22
30487: PUSH
30488: LD_INT 23
30490: PUSH
30491: LD_INT 24
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: ST_TO_ADDR
30500: GO 30581
30502: LD_INT 53
30504: DOUBLE
30505: EQUAL
30506: IFTRUE 30510
30508: GO 30528
30510: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30511: LD_ADDR_VAR 0 3
30515: PUSH
30516: LD_INT 23
30518: PUSH
30519: LD_INT 24
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: ST_TO_ADDR
30526: GO 30581
30528: LD_INT 46
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30536
30534: GO 30554
30536: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30537: LD_ADDR_VAR 0 3
30541: PUSH
30542: LD_INT 23
30544: PUSH
30545: LD_INT 24
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: ST_TO_ADDR
30552: GO 30581
30554: LD_INT 47
30556: DOUBLE
30557: EQUAL
30558: IFTRUE 30562
30560: GO 30580
30562: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30563: LD_ADDR_VAR 0 3
30567: PUSH
30568: LD_INT 23
30570: PUSH
30571: LD_INT 24
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: ST_TO_ADDR
30578: GO 30581
30580: POP
// result := ( chassis in result ) ;
30581: LD_ADDR_VAR 0 3
30585: PUSH
30586: LD_VAR 0 1
30590: PUSH
30591: LD_VAR 0 3
30595: IN
30596: ST_TO_ADDR
// end ;
30597: LD_VAR 0 3
30601: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30602: LD_INT 0
30604: PPUSH
30605: PPUSH
30606: PPUSH
30607: PPUSH
30608: PPUSH
30609: PPUSH
30610: PPUSH
// result := array ;
30611: LD_ADDR_VAR 0 5
30615: PUSH
30616: LD_VAR 0 1
30620: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30621: LD_VAR 0 1
30625: NOT
30626: PUSH
30627: LD_VAR 0 2
30631: NOT
30632: OR
30633: PUSH
30634: LD_VAR 0 3
30638: NOT
30639: OR
30640: PUSH
30641: LD_VAR 0 2
30645: PUSH
30646: LD_VAR 0 1
30650: GREATER
30651: OR
30652: PUSH
30653: LD_VAR 0 3
30657: PUSH
30658: LD_VAR 0 1
30662: GREATER
30663: OR
30664: IFFALSE 30668
// exit ;
30666: GO 30964
// if direction then
30668: LD_VAR 0 4
30672: IFFALSE 30736
// begin d := 1 ;
30674: LD_ADDR_VAR 0 9
30678: PUSH
30679: LD_INT 1
30681: ST_TO_ADDR
// if i_from > i_to then
30682: LD_VAR 0 2
30686: PUSH
30687: LD_VAR 0 3
30691: GREATER
30692: IFFALSE 30718
// length := ( array - i_from ) + i_to else
30694: LD_ADDR_VAR 0 11
30698: PUSH
30699: LD_VAR 0 1
30703: PUSH
30704: LD_VAR 0 2
30708: MINUS
30709: PUSH
30710: LD_VAR 0 3
30714: PLUS
30715: ST_TO_ADDR
30716: GO 30734
// length := i_to - i_from ;
30718: LD_ADDR_VAR 0 11
30722: PUSH
30723: LD_VAR 0 3
30727: PUSH
30728: LD_VAR 0 2
30732: MINUS
30733: ST_TO_ADDR
// end else
30734: GO 30797
// begin d := - 1 ;
30736: LD_ADDR_VAR 0 9
30740: PUSH
30741: LD_INT 1
30743: NEG
30744: ST_TO_ADDR
// if i_from > i_to then
30745: LD_VAR 0 2
30749: PUSH
30750: LD_VAR 0 3
30754: GREATER
30755: IFFALSE 30775
// length := i_from - i_to else
30757: LD_ADDR_VAR 0 11
30761: PUSH
30762: LD_VAR 0 2
30766: PUSH
30767: LD_VAR 0 3
30771: MINUS
30772: ST_TO_ADDR
30773: GO 30797
// length := ( array - i_to ) + i_from ;
30775: LD_ADDR_VAR 0 11
30779: PUSH
30780: LD_VAR 0 1
30784: PUSH
30785: LD_VAR 0 3
30789: MINUS
30790: PUSH
30791: LD_VAR 0 2
30795: PLUS
30796: ST_TO_ADDR
// end ; if not length then
30797: LD_VAR 0 11
30801: NOT
30802: IFFALSE 30806
// exit ;
30804: GO 30964
// tmp := array ;
30806: LD_ADDR_VAR 0 10
30810: PUSH
30811: LD_VAR 0 1
30815: ST_TO_ADDR
// for i = 1 to length do
30816: LD_ADDR_VAR 0 6
30820: PUSH
30821: DOUBLE
30822: LD_INT 1
30824: DEC
30825: ST_TO_ADDR
30826: LD_VAR 0 11
30830: PUSH
30831: FOR_TO
30832: IFFALSE 30952
// begin for j = 1 to array do
30834: LD_ADDR_VAR 0 7
30838: PUSH
30839: DOUBLE
30840: LD_INT 1
30842: DEC
30843: ST_TO_ADDR
30844: LD_VAR 0 1
30848: PUSH
30849: FOR_TO
30850: IFFALSE 30938
// begin k := j + d ;
30852: LD_ADDR_VAR 0 8
30856: PUSH
30857: LD_VAR 0 7
30861: PUSH
30862: LD_VAR 0 9
30866: PLUS
30867: ST_TO_ADDR
// if k > array then
30868: LD_VAR 0 8
30872: PUSH
30873: LD_VAR 0 1
30877: GREATER
30878: IFFALSE 30888
// k := 1 ;
30880: LD_ADDR_VAR 0 8
30884: PUSH
30885: LD_INT 1
30887: ST_TO_ADDR
// if not k then
30888: LD_VAR 0 8
30892: NOT
30893: IFFALSE 30905
// k := array ;
30895: LD_ADDR_VAR 0 8
30899: PUSH
30900: LD_VAR 0 1
30904: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30905: LD_ADDR_VAR 0 10
30909: PUSH
30910: LD_VAR 0 10
30914: PPUSH
30915: LD_VAR 0 8
30919: PPUSH
30920: LD_VAR 0 1
30924: PUSH
30925: LD_VAR 0 7
30929: ARRAY
30930: PPUSH
30931: CALL_OW 1
30935: ST_TO_ADDR
// end ;
30936: GO 30849
30938: POP
30939: POP
// array := tmp ;
30940: LD_ADDR_VAR 0 1
30944: PUSH
30945: LD_VAR 0 10
30949: ST_TO_ADDR
// end ;
30950: GO 30831
30952: POP
30953: POP
// result := array ;
30954: LD_ADDR_VAR 0 5
30958: PUSH
30959: LD_VAR 0 1
30963: ST_TO_ADDR
// end ;
30964: LD_VAR 0 5
30968: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30969: LD_INT 0
30971: PPUSH
30972: PPUSH
// result := 0 ;
30973: LD_ADDR_VAR 0 3
30977: PUSH
30978: LD_INT 0
30980: ST_TO_ADDR
// if not array or not value in array then
30981: LD_VAR 0 1
30985: NOT
30986: PUSH
30987: LD_VAR 0 2
30991: PUSH
30992: LD_VAR 0 1
30996: IN
30997: NOT
30998: OR
30999: IFFALSE 31003
// exit ;
31001: GO 31057
// for i = 1 to array do
31003: LD_ADDR_VAR 0 4
31007: PUSH
31008: DOUBLE
31009: LD_INT 1
31011: DEC
31012: ST_TO_ADDR
31013: LD_VAR 0 1
31017: PUSH
31018: FOR_TO
31019: IFFALSE 31055
// if value = array [ i ] then
31021: LD_VAR 0 2
31025: PUSH
31026: LD_VAR 0 1
31030: PUSH
31031: LD_VAR 0 4
31035: ARRAY
31036: EQUAL
31037: IFFALSE 31053
// begin result := i ;
31039: LD_ADDR_VAR 0 3
31043: PUSH
31044: LD_VAR 0 4
31048: ST_TO_ADDR
// exit ;
31049: POP
31050: POP
31051: GO 31057
// end ;
31053: GO 31018
31055: POP
31056: POP
// end ;
31057: LD_VAR 0 3
31061: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31062: LD_INT 0
31064: PPUSH
// vc_chassis := chassis ;
31065: LD_ADDR_OWVAR 37
31069: PUSH
31070: LD_VAR 0 1
31074: ST_TO_ADDR
// vc_engine := engine ;
31075: LD_ADDR_OWVAR 39
31079: PUSH
31080: LD_VAR 0 2
31084: ST_TO_ADDR
// vc_control := control ;
31085: LD_ADDR_OWVAR 38
31089: PUSH
31090: LD_VAR 0 3
31094: ST_TO_ADDR
// vc_weapon := weapon ;
31095: LD_ADDR_OWVAR 40
31099: PUSH
31100: LD_VAR 0 4
31104: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31105: LD_ADDR_OWVAR 41
31109: PUSH
31110: LD_VAR 0 5
31114: ST_TO_ADDR
// end ;
31115: LD_VAR 0 6
31119: RET
// export function WantPlant ( unit ) ; var task ; begin
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
// result := false ;
31124: LD_ADDR_VAR 0 2
31128: PUSH
31129: LD_INT 0
31131: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31132: LD_ADDR_VAR 0 3
31136: PUSH
31137: LD_VAR 0 1
31141: PPUSH
31142: CALL_OW 437
31146: ST_TO_ADDR
// if task then
31147: LD_VAR 0 3
31151: IFFALSE 31179
// if task [ 1 ] [ 1 ] = p then
31153: LD_VAR 0 3
31157: PUSH
31158: LD_INT 1
31160: ARRAY
31161: PUSH
31162: LD_INT 1
31164: ARRAY
31165: PUSH
31166: LD_STRING p
31168: EQUAL
31169: IFFALSE 31179
// result := true ;
31171: LD_ADDR_VAR 0 2
31175: PUSH
31176: LD_INT 1
31178: ST_TO_ADDR
// end ;
31179: LD_VAR 0 2
31183: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31184: LD_INT 0
31186: PPUSH
31187: PPUSH
31188: PPUSH
31189: PPUSH
// if pos < 1 then
31190: LD_VAR 0 2
31194: PUSH
31195: LD_INT 1
31197: LESS
31198: IFFALSE 31202
// exit ;
31200: GO 31505
// if pos = 1 then
31202: LD_VAR 0 2
31206: PUSH
31207: LD_INT 1
31209: EQUAL
31210: IFFALSE 31243
// result := Replace ( arr , pos [ 1 ] , value ) else
31212: LD_ADDR_VAR 0 4
31216: PUSH
31217: LD_VAR 0 1
31221: PPUSH
31222: LD_VAR 0 2
31226: PUSH
31227: LD_INT 1
31229: ARRAY
31230: PPUSH
31231: LD_VAR 0 3
31235: PPUSH
31236: CALL_OW 1
31240: ST_TO_ADDR
31241: GO 31505
// begin tmp := arr ;
31243: LD_ADDR_VAR 0 6
31247: PUSH
31248: LD_VAR 0 1
31252: ST_TO_ADDR
// s_arr := [ tmp ] ;
31253: LD_ADDR_VAR 0 7
31257: PUSH
31258: LD_VAR 0 6
31262: PUSH
31263: EMPTY
31264: LIST
31265: ST_TO_ADDR
// for i = 1 to pos - 1 do
31266: LD_ADDR_VAR 0 5
31270: PUSH
31271: DOUBLE
31272: LD_INT 1
31274: DEC
31275: ST_TO_ADDR
31276: LD_VAR 0 2
31280: PUSH
31281: LD_INT 1
31283: MINUS
31284: PUSH
31285: FOR_TO
31286: IFFALSE 31331
// begin tmp := tmp [ pos [ i ] ] ;
31288: LD_ADDR_VAR 0 6
31292: PUSH
31293: LD_VAR 0 6
31297: PUSH
31298: LD_VAR 0 2
31302: PUSH
31303: LD_VAR 0 5
31307: ARRAY
31308: ARRAY
31309: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31310: LD_ADDR_VAR 0 7
31314: PUSH
31315: LD_VAR 0 7
31319: PUSH
31320: LD_VAR 0 6
31324: PUSH
31325: EMPTY
31326: LIST
31327: ADD
31328: ST_TO_ADDR
// end ;
31329: GO 31285
31331: POP
31332: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31333: LD_ADDR_VAR 0 6
31337: PUSH
31338: LD_VAR 0 6
31342: PPUSH
31343: LD_VAR 0 2
31347: PUSH
31348: LD_VAR 0 2
31352: ARRAY
31353: PPUSH
31354: LD_VAR 0 3
31358: PPUSH
31359: CALL_OW 1
31363: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31364: LD_ADDR_VAR 0 7
31368: PUSH
31369: LD_VAR 0 7
31373: PPUSH
31374: LD_VAR 0 7
31378: PPUSH
31379: LD_VAR 0 6
31383: PPUSH
31384: CALL_OW 1
31388: ST_TO_ADDR
// for i = s_arr downto 2 do
31389: LD_ADDR_VAR 0 5
31393: PUSH
31394: DOUBLE
31395: LD_VAR 0 7
31399: INC
31400: ST_TO_ADDR
31401: LD_INT 2
31403: PUSH
31404: FOR_DOWNTO
31405: IFFALSE 31489
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31407: LD_ADDR_VAR 0 6
31411: PUSH
31412: LD_VAR 0 7
31416: PUSH
31417: LD_VAR 0 5
31421: PUSH
31422: LD_INT 1
31424: MINUS
31425: ARRAY
31426: PPUSH
31427: LD_VAR 0 2
31431: PUSH
31432: LD_VAR 0 5
31436: PUSH
31437: LD_INT 1
31439: MINUS
31440: ARRAY
31441: PPUSH
31442: LD_VAR 0 7
31446: PUSH
31447: LD_VAR 0 5
31451: ARRAY
31452: PPUSH
31453: CALL_OW 1
31457: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31458: LD_ADDR_VAR 0 7
31462: PUSH
31463: LD_VAR 0 7
31467: PPUSH
31468: LD_VAR 0 5
31472: PUSH
31473: LD_INT 1
31475: MINUS
31476: PPUSH
31477: LD_VAR 0 6
31481: PPUSH
31482: CALL_OW 1
31486: ST_TO_ADDR
// end ;
31487: GO 31404
31489: POP
31490: POP
// result := s_arr [ 1 ] ;
31491: LD_ADDR_VAR 0 4
31495: PUSH
31496: LD_VAR 0 7
31500: PUSH
31501: LD_INT 1
31503: ARRAY
31504: ST_TO_ADDR
// end ; end ;
31505: LD_VAR 0 4
31509: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31510: LD_INT 0
31512: PPUSH
31513: PPUSH
// if not list then
31514: LD_VAR 0 1
31518: NOT
31519: IFFALSE 31523
// exit ;
31521: GO 31614
// i := list [ pos1 ] ;
31523: LD_ADDR_VAR 0 5
31527: PUSH
31528: LD_VAR 0 1
31532: PUSH
31533: LD_VAR 0 2
31537: ARRAY
31538: ST_TO_ADDR
// if not i then
31539: LD_VAR 0 5
31543: NOT
31544: IFFALSE 31548
// exit ;
31546: GO 31614
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31548: LD_ADDR_VAR 0 1
31552: PUSH
31553: LD_VAR 0 1
31557: PPUSH
31558: LD_VAR 0 2
31562: PPUSH
31563: LD_VAR 0 1
31567: PUSH
31568: LD_VAR 0 3
31572: ARRAY
31573: PPUSH
31574: CALL_OW 1
31578: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31579: LD_ADDR_VAR 0 1
31583: PUSH
31584: LD_VAR 0 1
31588: PPUSH
31589: LD_VAR 0 3
31593: PPUSH
31594: LD_VAR 0 5
31598: PPUSH
31599: CALL_OW 1
31603: ST_TO_ADDR
// result := list ;
31604: LD_ADDR_VAR 0 4
31608: PUSH
31609: LD_VAR 0 1
31613: ST_TO_ADDR
// end ;
31614: LD_VAR 0 4
31618: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31619: LD_INT 0
31621: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31622: LD_ADDR_VAR 0 5
31626: PUSH
31627: LD_VAR 0 1
31631: PPUSH
31632: CALL_OW 250
31636: PPUSH
31637: LD_VAR 0 1
31641: PPUSH
31642: CALL_OW 251
31646: PPUSH
31647: LD_VAR 0 2
31651: PPUSH
31652: LD_VAR 0 3
31656: PPUSH
31657: LD_VAR 0 4
31661: PPUSH
31662: CALL 31672 0 5
31666: ST_TO_ADDR
// end ;
31667: LD_VAR 0 5
31671: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31672: LD_INT 0
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
// if not list then
31678: LD_VAR 0 3
31682: NOT
31683: IFFALSE 31687
// exit ;
31685: GO 32075
// result := [ ] ;
31687: LD_ADDR_VAR 0 6
31691: PUSH
31692: EMPTY
31693: ST_TO_ADDR
// for i in list do
31694: LD_ADDR_VAR 0 7
31698: PUSH
31699: LD_VAR 0 3
31703: PUSH
31704: FOR_IN
31705: IFFALSE 31907
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31707: LD_ADDR_VAR 0 9
31711: PUSH
31712: LD_VAR 0 7
31716: PPUSH
31717: LD_VAR 0 1
31721: PPUSH
31722: LD_VAR 0 2
31726: PPUSH
31727: CALL_OW 297
31731: ST_TO_ADDR
// if not result then
31732: LD_VAR 0 6
31736: NOT
31737: IFFALSE 31763
// result := [ [ i , tmp ] ] else
31739: LD_ADDR_VAR 0 6
31743: PUSH
31744: LD_VAR 0 7
31748: PUSH
31749: LD_VAR 0 9
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: ST_TO_ADDR
31761: GO 31905
// begin if result [ result ] [ 2 ] < tmp then
31763: LD_VAR 0 6
31767: PUSH
31768: LD_VAR 0 6
31772: ARRAY
31773: PUSH
31774: LD_INT 2
31776: ARRAY
31777: PUSH
31778: LD_VAR 0 9
31782: LESS
31783: IFFALSE 31825
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31785: LD_ADDR_VAR 0 6
31789: PUSH
31790: LD_VAR 0 6
31794: PPUSH
31795: LD_VAR 0 6
31799: PUSH
31800: LD_INT 1
31802: PLUS
31803: PPUSH
31804: LD_VAR 0 7
31808: PUSH
31809: LD_VAR 0 9
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PPUSH
31818: CALL_OW 2
31822: ST_TO_ADDR
31823: GO 31905
// for j = 1 to result do
31825: LD_ADDR_VAR 0 8
31829: PUSH
31830: DOUBLE
31831: LD_INT 1
31833: DEC
31834: ST_TO_ADDR
31835: LD_VAR 0 6
31839: PUSH
31840: FOR_TO
31841: IFFALSE 31903
// begin if tmp < result [ j ] [ 2 ] then
31843: LD_VAR 0 9
31847: PUSH
31848: LD_VAR 0 6
31852: PUSH
31853: LD_VAR 0 8
31857: ARRAY
31858: PUSH
31859: LD_INT 2
31861: ARRAY
31862: LESS
31863: IFFALSE 31901
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31865: LD_ADDR_VAR 0 6
31869: PUSH
31870: LD_VAR 0 6
31874: PPUSH
31875: LD_VAR 0 8
31879: PPUSH
31880: LD_VAR 0 7
31884: PUSH
31885: LD_VAR 0 9
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PPUSH
31894: CALL_OW 2
31898: ST_TO_ADDR
// break ;
31899: GO 31903
// end ; end ;
31901: GO 31840
31903: POP
31904: POP
// end ; end ;
31905: GO 31704
31907: POP
31908: POP
// if result and not asc then
31909: LD_VAR 0 6
31913: PUSH
31914: LD_VAR 0 4
31918: NOT
31919: AND
31920: IFFALSE 31995
// begin tmp := result ;
31922: LD_ADDR_VAR 0 9
31926: PUSH
31927: LD_VAR 0 6
31931: ST_TO_ADDR
// for i = tmp downto 1 do
31932: LD_ADDR_VAR 0 7
31936: PUSH
31937: DOUBLE
31938: LD_VAR 0 9
31942: INC
31943: ST_TO_ADDR
31944: LD_INT 1
31946: PUSH
31947: FOR_DOWNTO
31948: IFFALSE 31993
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31950: LD_ADDR_VAR 0 6
31954: PUSH
31955: LD_VAR 0 6
31959: PPUSH
31960: LD_VAR 0 9
31964: PUSH
31965: LD_VAR 0 7
31969: MINUS
31970: PUSH
31971: LD_INT 1
31973: PLUS
31974: PPUSH
31975: LD_VAR 0 9
31979: PUSH
31980: LD_VAR 0 7
31984: ARRAY
31985: PPUSH
31986: CALL_OW 1
31990: ST_TO_ADDR
31991: GO 31947
31993: POP
31994: POP
// end ; tmp := [ ] ;
31995: LD_ADDR_VAR 0 9
31999: PUSH
32000: EMPTY
32001: ST_TO_ADDR
// if mode then
32002: LD_VAR 0 5
32006: IFFALSE 32075
// begin for i = 1 to result do
32008: LD_ADDR_VAR 0 7
32012: PUSH
32013: DOUBLE
32014: LD_INT 1
32016: DEC
32017: ST_TO_ADDR
32018: LD_VAR 0 6
32022: PUSH
32023: FOR_TO
32024: IFFALSE 32063
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32026: LD_ADDR_VAR 0 9
32030: PUSH
32031: LD_VAR 0 9
32035: PPUSH
32036: LD_VAR 0 7
32040: PPUSH
32041: LD_VAR 0 6
32045: PUSH
32046: LD_VAR 0 7
32050: ARRAY
32051: PUSH
32052: LD_INT 1
32054: ARRAY
32055: PPUSH
32056: CALL_OW 1
32060: ST_TO_ADDR
32061: GO 32023
32063: POP
32064: POP
// result := tmp ;
32065: LD_ADDR_VAR 0 6
32069: PUSH
32070: LD_VAR 0 9
32074: ST_TO_ADDR
// end ; end ;
32075: LD_VAR 0 6
32079: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32080: LD_INT 0
32082: PPUSH
32083: PPUSH
32084: PPUSH
32085: PPUSH
32086: PPUSH
32087: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32088: LD_ADDR_VAR 0 5
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: EMPTY
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: ST_TO_ADDR
// if not x or not y then
32110: LD_VAR 0 2
32114: NOT
32115: PUSH
32116: LD_VAR 0 3
32120: NOT
32121: OR
32122: IFFALSE 32126
// exit ;
32124: GO 33778
// if not range then
32126: LD_VAR 0 4
32130: NOT
32131: IFFALSE 32141
// range := 10 ;
32133: LD_ADDR_VAR 0 4
32137: PUSH
32138: LD_INT 10
32140: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32141: LD_ADDR_VAR 0 8
32145: PUSH
32146: LD_INT 81
32148: PUSH
32149: LD_VAR 0 1
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 92
32160: PUSH
32161: LD_VAR 0 2
32165: PUSH
32166: LD_VAR 0 3
32170: PUSH
32171: LD_VAR 0 4
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 3
32184: PUSH
32185: LD_INT 21
32187: PUSH
32188: LD_INT 3
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: LIST
32203: PPUSH
32204: CALL_OW 69
32208: ST_TO_ADDR
// if not tmp then
32209: LD_VAR 0 8
32213: NOT
32214: IFFALSE 32218
// exit ;
32216: GO 33778
// for i in tmp do
32218: LD_ADDR_VAR 0 6
32222: PUSH
32223: LD_VAR 0 8
32227: PUSH
32228: FOR_IN
32229: IFFALSE 33753
// begin points := [ 0 , 0 , 0 ] ;
32231: LD_ADDR_VAR 0 9
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: LIST
32249: ST_TO_ADDR
// bpoints := 1 ;
32250: LD_ADDR_VAR 0 10
32254: PUSH
32255: LD_INT 1
32257: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32258: LD_VAR 0 6
32262: PPUSH
32263: CALL_OW 247
32267: PUSH
32268: LD_INT 1
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32854
32276: POP
// begin if GetClass ( i ) = 1 then
32277: LD_VAR 0 6
32281: PPUSH
32282: CALL_OW 257
32286: PUSH
32287: LD_INT 1
32289: EQUAL
32290: IFFALSE 32311
// points := [ 10 , 5 , 3 ] ;
32292: LD_ADDR_VAR 0 9
32296: PUSH
32297: LD_INT 10
32299: PUSH
32300: LD_INT 5
32302: PUSH
32303: LD_INT 3
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: LIST
32310: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32311: LD_VAR 0 6
32315: PPUSH
32316: CALL_OW 257
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: LD_INT 3
32326: PUSH
32327: LD_INT 4
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: IN
32335: IFFALSE 32356
// points := [ 3 , 2 , 1 ] ;
32337: LD_ADDR_VAR 0 9
32341: PUSH
32342: LD_INT 3
32344: PUSH
32345: LD_INT 2
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32356: LD_VAR 0 6
32360: PPUSH
32361: CALL_OW 257
32365: PUSH
32366: LD_INT 5
32368: EQUAL
32369: IFFALSE 32390
// points := [ 130 , 5 , 2 ] ;
32371: LD_ADDR_VAR 0 9
32375: PUSH
32376: LD_INT 130
32378: PUSH
32379: LD_INT 5
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: LIST
32389: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32390: LD_VAR 0 6
32394: PPUSH
32395: CALL_OW 257
32399: PUSH
32400: LD_INT 8
32402: EQUAL
32403: IFFALSE 32424
// points := [ 35 , 35 , 30 ] ;
32405: LD_ADDR_VAR 0 9
32409: PUSH
32410: LD_INT 35
32412: PUSH
32413: LD_INT 35
32415: PUSH
32416: LD_INT 30
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: LIST
32423: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32424: LD_VAR 0 6
32428: PPUSH
32429: CALL_OW 257
32433: PUSH
32434: LD_INT 9
32436: EQUAL
32437: IFFALSE 32458
// points := [ 20 , 55 , 40 ] ;
32439: LD_ADDR_VAR 0 9
32443: PUSH
32444: LD_INT 20
32446: PUSH
32447: LD_INT 55
32449: PUSH
32450: LD_INT 40
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: LIST
32457: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32458: LD_VAR 0 6
32462: PPUSH
32463: CALL_OW 257
32467: PUSH
32468: LD_INT 12
32470: PUSH
32471: LD_INT 16
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: IN
32478: IFFALSE 32499
// points := [ 5 , 3 , 2 ] ;
32480: LD_ADDR_VAR 0 9
32484: PUSH
32485: LD_INT 5
32487: PUSH
32488: LD_INT 3
32490: PUSH
32491: LD_INT 2
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: LIST
32498: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32499: LD_VAR 0 6
32503: PPUSH
32504: CALL_OW 257
32508: PUSH
32509: LD_INT 17
32511: EQUAL
32512: IFFALSE 32533
// points := [ 100 , 50 , 75 ] ;
32514: LD_ADDR_VAR 0 9
32518: PUSH
32519: LD_INT 100
32521: PUSH
32522: LD_INT 50
32524: PUSH
32525: LD_INT 75
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32533: LD_VAR 0 6
32537: PPUSH
32538: CALL_OW 257
32542: PUSH
32543: LD_INT 15
32545: EQUAL
32546: IFFALSE 32567
// points := [ 10 , 5 , 3 ] ;
32548: LD_ADDR_VAR 0 9
32552: PUSH
32553: LD_INT 10
32555: PUSH
32556: LD_INT 5
32558: PUSH
32559: LD_INT 3
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: LIST
32566: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32567: LD_VAR 0 6
32571: PPUSH
32572: CALL_OW 257
32576: PUSH
32577: LD_INT 14
32579: EQUAL
32580: IFFALSE 32601
// points := [ 10 , 0 , 0 ] ;
32582: LD_ADDR_VAR 0 9
32586: PUSH
32587: LD_INT 10
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32601: LD_VAR 0 6
32605: PPUSH
32606: CALL_OW 257
32610: PUSH
32611: LD_INT 11
32613: EQUAL
32614: IFFALSE 32635
// points := [ 30 , 10 , 5 ] ;
32616: LD_ADDR_VAR 0 9
32620: PUSH
32621: LD_INT 30
32623: PUSH
32624: LD_INT 10
32626: PUSH
32627: LD_INT 5
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: LIST
32634: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32635: LD_VAR 0 1
32639: PPUSH
32640: LD_INT 5
32642: PPUSH
32643: CALL_OW 321
32647: PUSH
32648: LD_INT 2
32650: EQUAL
32651: IFFALSE 32668
// bpoints := bpoints * 1.8 ;
32653: LD_ADDR_VAR 0 10
32657: PUSH
32658: LD_VAR 0 10
32662: PUSH
32663: LD_REAL  1.80000000000000E+0000
32666: MUL
32667: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32668: LD_VAR 0 6
32672: PPUSH
32673: CALL_OW 257
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: LD_INT 3
32686: PUSH
32687: LD_INT 4
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: IN
32696: PUSH
32697: LD_VAR 0 1
32701: PPUSH
32702: LD_INT 51
32704: PPUSH
32705: CALL_OW 321
32709: PUSH
32710: LD_INT 2
32712: EQUAL
32713: AND
32714: IFFALSE 32731
// bpoints := bpoints * 1.2 ;
32716: LD_ADDR_VAR 0 10
32720: PUSH
32721: LD_VAR 0 10
32725: PUSH
32726: LD_REAL  1.20000000000000E+0000
32729: MUL
32730: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32731: LD_VAR 0 6
32735: PPUSH
32736: CALL_OW 257
32740: PUSH
32741: LD_INT 5
32743: PUSH
32744: LD_INT 7
32746: PUSH
32747: LD_INT 9
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: IN
32755: PUSH
32756: LD_VAR 0 1
32760: PPUSH
32761: LD_INT 52
32763: PPUSH
32764: CALL_OW 321
32768: PUSH
32769: LD_INT 2
32771: EQUAL
32772: AND
32773: IFFALSE 32790
// bpoints := bpoints * 1.5 ;
32775: LD_ADDR_VAR 0 10
32779: PUSH
32780: LD_VAR 0 10
32784: PUSH
32785: LD_REAL  1.50000000000000E+0000
32788: MUL
32789: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32790: LD_VAR 0 1
32794: PPUSH
32795: LD_INT 66
32797: PPUSH
32798: CALL_OW 321
32802: PUSH
32803: LD_INT 2
32805: EQUAL
32806: IFFALSE 32823
// bpoints := bpoints * 1.1 ;
32808: LD_ADDR_VAR 0 10
32812: PUSH
32813: LD_VAR 0 10
32817: PUSH
32818: LD_REAL  1.10000000000000E+0000
32821: MUL
32822: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32823: LD_ADDR_VAR 0 10
32827: PUSH
32828: LD_VAR 0 10
32832: PUSH
32833: LD_VAR 0 6
32837: PPUSH
32838: LD_INT 1
32840: PPUSH
32841: CALL_OW 259
32845: PUSH
32846: LD_REAL  1.15000000000000E+0000
32849: MUL
32850: MUL
32851: ST_TO_ADDR
// end ; unit_vehicle :
32852: GO 33682
32854: LD_INT 2
32856: DOUBLE
32857: EQUAL
32858: IFTRUE 32862
32860: GO 33670
32862: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32863: LD_VAR 0 6
32867: PPUSH
32868: CALL_OW 264
32872: PUSH
32873: LD_INT 2
32875: PUSH
32876: LD_INT 42
32878: PUSH
32879: LD_INT 24
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: IN
32887: IFFALSE 32908
// points := [ 25 , 5 , 3 ] ;
32889: LD_ADDR_VAR 0 9
32893: PUSH
32894: LD_INT 25
32896: PUSH
32897: LD_INT 5
32899: PUSH
32900: LD_INT 3
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: LIST
32907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32908: LD_VAR 0 6
32912: PPUSH
32913: CALL_OW 264
32917: PUSH
32918: LD_INT 4
32920: PUSH
32921: LD_INT 43
32923: PUSH
32924: LD_INT 25
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: IN
32932: IFFALSE 32953
// points := [ 40 , 15 , 5 ] ;
32934: LD_ADDR_VAR 0 9
32938: PUSH
32939: LD_INT 40
32941: PUSH
32942: LD_INT 15
32944: PUSH
32945: LD_INT 5
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32953: LD_VAR 0 6
32957: PPUSH
32958: CALL_OW 264
32962: PUSH
32963: LD_INT 3
32965: PUSH
32966: LD_INT 23
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: IN
32973: IFFALSE 32994
// points := [ 7 , 25 , 8 ] ;
32975: LD_ADDR_VAR 0 9
32979: PUSH
32980: LD_INT 7
32982: PUSH
32983: LD_INT 25
32985: PUSH
32986: LD_INT 8
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32994: LD_VAR 0 6
32998: PPUSH
32999: CALL_OW 264
33003: PUSH
33004: LD_INT 5
33006: PUSH
33007: LD_INT 27
33009: PUSH
33010: LD_INT 44
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: IN
33018: IFFALSE 33039
// points := [ 14 , 50 , 16 ] ;
33020: LD_ADDR_VAR 0 9
33024: PUSH
33025: LD_INT 14
33027: PUSH
33028: LD_INT 50
33030: PUSH
33031: LD_INT 16
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33039: LD_VAR 0 6
33043: PPUSH
33044: CALL_OW 264
33048: PUSH
33049: LD_INT 6
33051: PUSH
33052: LD_INT 46
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: IN
33059: IFFALSE 33080
// points := [ 32 , 120 , 70 ] ;
33061: LD_ADDR_VAR 0 9
33065: PUSH
33066: LD_INT 32
33068: PUSH
33069: LD_INT 120
33071: PUSH
33072: LD_INT 70
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33080: LD_VAR 0 6
33084: PPUSH
33085: CALL_OW 264
33089: PUSH
33090: LD_INT 7
33092: PUSH
33093: LD_INT 28
33095: PUSH
33096: LD_INT 45
33098: PUSH
33099: LD_EXP 23
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: IN
33110: IFFALSE 33131
// points := [ 35 , 20 , 45 ] ;
33112: LD_ADDR_VAR 0 9
33116: PUSH
33117: LD_INT 35
33119: PUSH
33120: LD_INT 20
33122: PUSH
33123: LD_INT 45
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: LIST
33130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33131: LD_VAR 0 6
33135: PPUSH
33136: CALL_OW 264
33140: PUSH
33141: LD_INT 47
33143: PUSH
33144: EMPTY
33145: LIST
33146: IN
33147: IFFALSE 33168
// points := [ 67 , 45 , 75 ] ;
33149: LD_ADDR_VAR 0 9
33153: PUSH
33154: LD_INT 67
33156: PUSH
33157: LD_INT 45
33159: PUSH
33160: LD_INT 75
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: LIST
33167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33168: LD_VAR 0 6
33172: PPUSH
33173: CALL_OW 264
33177: PUSH
33178: LD_INT 26
33180: PUSH
33181: EMPTY
33182: LIST
33183: IN
33184: IFFALSE 33205
// points := [ 120 , 30 , 80 ] ;
33186: LD_ADDR_VAR 0 9
33190: PUSH
33191: LD_INT 120
33193: PUSH
33194: LD_INT 30
33196: PUSH
33197: LD_INT 80
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33205: LD_VAR 0 6
33209: PPUSH
33210: CALL_OW 264
33214: PUSH
33215: LD_INT 22
33217: PUSH
33218: EMPTY
33219: LIST
33220: IN
33221: IFFALSE 33242
// points := [ 40 , 1 , 1 ] ;
33223: LD_ADDR_VAR 0 9
33227: PUSH
33228: LD_INT 40
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33242: LD_VAR 0 6
33246: PPUSH
33247: CALL_OW 264
33251: PUSH
33252: LD_INT 29
33254: PUSH
33255: EMPTY
33256: LIST
33257: IN
33258: IFFALSE 33279
// points := [ 70 , 200 , 400 ] ;
33260: LD_ADDR_VAR 0 9
33264: PUSH
33265: LD_INT 70
33267: PUSH
33268: LD_INT 200
33270: PUSH
33271: LD_INT 400
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33279: LD_VAR 0 6
33283: PPUSH
33284: CALL_OW 264
33288: PUSH
33289: LD_INT 14
33291: PUSH
33292: LD_INT 53
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: IN
33299: IFFALSE 33320
// points := [ 40 , 10 , 20 ] ;
33301: LD_ADDR_VAR 0 9
33305: PUSH
33306: LD_INT 40
33308: PUSH
33309: LD_INT 10
33311: PUSH
33312: LD_INT 20
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33320: LD_VAR 0 6
33324: PPUSH
33325: CALL_OW 264
33329: PUSH
33330: LD_INT 9
33332: PUSH
33333: EMPTY
33334: LIST
33335: IN
33336: IFFALSE 33357
// points := [ 5 , 70 , 20 ] ;
33338: LD_ADDR_VAR 0 9
33342: PUSH
33343: LD_INT 5
33345: PUSH
33346: LD_INT 70
33348: PUSH
33349: LD_INT 20
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33357: LD_VAR 0 6
33361: PPUSH
33362: CALL_OW 264
33366: PUSH
33367: LD_INT 10
33369: PUSH
33370: EMPTY
33371: LIST
33372: IN
33373: IFFALSE 33394
// points := [ 35 , 110 , 70 ] ;
33375: LD_ADDR_VAR 0 9
33379: PUSH
33380: LD_INT 35
33382: PUSH
33383: LD_INT 110
33385: PUSH
33386: LD_INT 70
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: LIST
33393: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33394: LD_VAR 0 6
33398: PPUSH
33399: CALL_OW 265
33403: PUSH
33404: LD_INT 25
33406: EQUAL
33407: IFFALSE 33428
// points := [ 80 , 65 , 100 ] ;
33409: LD_ADDR_VAR 0 9
33413: PUSH
33414: LD_INT 80
33416: PUSH
33417: LD_INT 65
33419: PUSH
33420: LD_INT 100
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: LIST
33427: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33428: LD_VAR 0 6
33432: PPUSH
33433: CALL_OW 263
33437: PUSH
33438: LD_INT 1
33440: EQUAL
33441: IFFALSE 33476
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33443: LD_ADDR_VAR 0 10
33447: PUSH
33448: LD_VAR 0 10
33452: PUSH
33453: LD_VAR 0 6
33457: PPUSH
33458: CALL_OW 311
33462: PPUSH
33463: LD_INT 3
33465: PPUSH
33466: CALL_OW 259
33470: PUSH
33471: LD_INT 4
33473: MUL
33474: MUL
33475: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33476: LD_VAR 0 6
33480: PPUSH
33481: CALL_OW 263
33485: PUSH
33486: LD_INT 2
33488: EQUAL
33489: IFFALSE 33540
// begin j := IsControledBy ( i ) ;
33491: LD_ADDR_VAR 0 7
33495: PUSH
33496: LD_VAR 0 6
33500: PPUSH
33501: CALL_OW 312
33505: ST_TO_ADDR
// if j then
33506: LD_VAR 0 7
33510: IFFALSE 33540
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33512: LD_ADDR_VAR 0 10
33516: PUSH
33517: LD_VAR 0 10
33521: PUSH
33522: LD_VAR 0 7
33526: PPUSH
33527: LD_INT 3
33529: PPUSH
33530: CALL_OW 259
33534: PUSH
33535: LD_INT 3
33537: MUL
33538: MUL
33539: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33540: LD_VAR 0 6
33544: PPUSH
33545: CALL_OW 264
33549: PUSH
33550: LD_INT 5
33552: PUSH
33553: LD_INT 6
33555: PUSH
33556: LD_INT 46
33558: PUSH
33559: LD_INT 44
33561: PUSH
33562: LD_INT 47
33564: PUSH
33565: LD_INT 45
33567: PUSH
33568: LD_INT 28
33570: PUSH
33571: LD_INT 7
33573: PUSH
33574: LD_INT 27
33576: PUSH
33577: LD_INT 29
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: IN
33592: PUSH
33593: LD_VAR 0 1
33597: PPUSH
33598: LD_INT 52
33600: PPUSH
33601: CALL_OW 321
33605: PUSH
33606: LD_INT 2
33608: EQUAL
33609: AND
33610: IFFALSE 33627
// bpoints := bpoints * 1.2 ;
33612: LD_ADDR_VAR 0 10
33616: PUSH
33617: LD_VAR 0 10
33621: PUSH
33622: LD_REAL  1.20000000000000E+0000
33625: MUL
33626: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33627: LD_VAR 0 6
33631: PPUSH
33632: CALL_OW 264
33636: PUSH
33637: LD_INT 6
33639: PUSH
33640: LD_INT 46
33642: PUSH
33643: LD_INT 47
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: IN
33651: IFFALSE 33668
// bpoints := bpoints * 1.2 ;
33653: LD_ADDR_VAR 0 10
33657: PUSH
33658: LD_VAR 0 10
33662: PUSH
33663: LD_REAL  1.20000000000000E+0000
33666: MUL
33667: ST_TO_ADDR
// end ; unit_building :
33668: GO 33682
33670: LD_INT 3
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33681
33678: POP
// ; end ;
33679: GO 33682
33681: POP
// for j = 1 to 3 do
33682: LD_ADDR_VAR 0 7
33686: PUSH
33687: DOUBLE
33688: LD_INT 1
33690: DEC
33691: ST_TO_ADDR
33692: LD_INT 3
33694: PUSH
33695: FOR_TO
33696: IFFALSE 33749
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33698: LD_ADDR_VAR 0 5
33702: PUSH
33703: LD_VAR 0 5
33707: PPUSH
33708: LD_VAR 0 7
33712: PPUSH
33713: LD_VAR 0 5
33717: PUSH
33718: LD_VAR 0 7
33722: ARRAY
33723: PUSH
33724: LD_VAR 0 9
33728: PUSH
33729: LD_VAR 0 7
33733: ARRAY
33734: PUSH
33735: LD_VAR 0 10
33739: MUL
33740: PLUS
33741: PPUSH
33742: CALL_OW 1
33746: ST_TO_ADDR
33747: GO 33695
33749: POP
33750: POP
// end ;
33751: GO 32228
33753: POP
33754: POP
// result := Replace ( result , 4 , tmp ) ;
33755: LD_ADDR_VAR 0 5
33759: PUSH
33760: LD_VAR 0 5
33764: PPUSH
33765: LD_INT 4
33767: PPUSH
33768: LD_VAR 0 8
33772: PPUSH
33773: CALL_OW 1
33777: ST_TO_ADDR
// end ;
33778: LD_VAR 0 5
33782: RET
// export function DangerAtRange ( unit , range ) ; begin
33783: LD_INT 0
33785: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33786: LD_ADDR_VAR 0 3
33790: PUSH
33791: LD_VAR 0 1
33795: PPUSH
33796: CALL_OW 255
33800: PPUSH
33801: LD_VAR 0 1
33805: PPUSH
33806: CALL_OW 250
33810: PPUSH
33811: LD_VAR 0 1
33815: PPUSH
33816: CALL_OW 251
33820: PPUSH
33821: LD_VAR 0 2
33825: PPUSH
33826: CALL 32080 0 4
33830: ST_TO_ADDR
// end ;
33831: LD_VAR 0 3
33835: RET
// export function DangerInArea ( side , area ) ; begin
33836: LD_INT 0
33838: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33839: LD_ADDR_VAR 0 3
33843: PUSH
33844: LD_VAR 0 2
33848: PPUSH
33849: LD_INT 81
33851: PUSH
33852: LD_VAR 0 1
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PPUSH
33861: CALL_OW 70
33865: ST_TO_ADDR
// end ;
33866: LD_VAR 0 3
33870: RET
// export function IsExtension ( b ) ; begin
33871: LD_INT 0
33873: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33874: LD_ADDR_VAR 0 2
33878: PUSH
33879: LD_VAR 0 1
33883: PUSH
33884: LD_INT 23
33886: PUSH
33887: LD_INT 20
33889: PUSH
33890: LD_INT 22
33892: PUSH
33893: LD_INT 17
33895: PUSH
33896: LD_INT 24
33898: PUSH
33899: LD_INT 21
33901: PUSH
33902: LD_INT 19
33904: PUSH
33905: LD_INT 16
33907: PUSH
33908: LD_INT 25
33910: PUSH
33911: LD_INT 18
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: IN
33926: ST_TO_ADDR
// end ;
33927: LD_VAR 0 2
33931: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33932: LD_INT 0
33934: PPUSH
33935: PPUSH
33936: PPUSH
// result := [ ] ;
33937: LD_ADDR_VAR 0 4
33941: PUSH
33942: EMPTY
33943: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33944: LD_ADDR_VAR 0 5
33948: PUSH
33949: LD_VAR 0 2
33953: PPUSH
33954: LD_INT 21
33956: PUSH
33957: LD_INT 3
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PPUSH
33964: CALL_OW 70
33968: ST_TO_ADDR
// if not tmp then
33969: LD_VAR 0 5
33973: NOT
33974: IFFALSE 33978
// exit ;
33976: GO 34042
// if checkLink then
33978: LD_VAR 0 3
33982: IFFALSE 34032
// begin for i in tmp do
33984: LD_ADDR_VAR 0 6
33988: PUSH
33989: LD_VAR 0 5
33993: PUSH
33994: FOR_IN
33995: IFFALSE 34030
// if GetBase ( i ) <> base then
33997: LD_VAR 0 6
34001: PPUSH
34002: CALL_OW 274
34006: PUSH
34007: LD_VAR 0 1
34011: NONEQUAL
34012: IFFALSE 34028
// ComLinkToBase ( base , i ) ;
34014: LD_VAR 0 1
34018: PPUSH
34019: LD_VAR 0 6
34023: PPUSH
34024: CALL_OW 169
34028: GO 33994
34030: POP
34031: POP
// end ; result := tmp ;
34032: LD_ADDR_VAR 0 4
34036: PUSH
34037: LD_VAR 0 5
34041: ST_TO_ADDR
// end ;
34042: LD_VAR 0 4
34046: RET
// export function ComComplete ( units , b ) ; var i ; begin
34047: LD_INT 0
34049: PPUSH
34050: PPUSH
// if not units then
34051: LD_VAR 0 1
34055: NOT
34056: IFFALSE 34060
// exit ;
34058: GO 34150
// for i in units do
34060: LD_ADDR_VAR 0 4
34064: PUSH
34065: LD_VAR 0 1
34069: PUSH
34070: FOR_IN
34071: IFFALSE 34148
// if BuildingStatus ( b ) = bs_build then
34073: LD_VAR 0 2
34077: PPUSH
34078: CALL_OW 461
34082: PUSH
34083: LD_INT 1
34085: EQUAL
34086: IFFALSE 34146
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34088: LD_VAR 0 4
34092: PPUSH
34093: LD_STRING h
34095: PUSH
34096: LD_VAR 0 2
34100: PPUSH
34101: CALL_OW 250
34105: PUSH
34106: LD_VAR 0 2
34110: PPUSH
34111: CALL_OW 251
34115: PUSH
34116: LD_VAR 0 2
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: PUSH
34139: EMPTY
34140: LIST
34141: PPUSH
34142: CALL_OW 446
34146: GO 34070
34148: POP
34149: POP
// end ;
34150: LD_VAR 0 3
34154: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34155: LD_INT 0
34157: PPUSH
34158: PPUSH
34159: PPUSH
34160: PPUSH
34161: PPUSH
34162: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34163: LD_VAR 0 1
34167: NOT
34168: PUSH
34169: LD_VAR 0 1
34173: PPUSH
34174: CALL_OW 263
34178: PUSH
34179: LD_INT 2
34181: NONEQUAL
34182: OR
34183: IFFALSE 34187
// exit ;
34185: GO 34503
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34187: LD_ADDR_VAR 0 6
34191: PUSH
34192: LD_INT 22
34194: PUSH
34195: LD_VAR 0 1
34199: PPUSH
34200: CALL_OW 255
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 30
34214: PUSH
34215: LD_INT 36
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 34
34224: PUSH
34225: LD_INT 31
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PPUSH
34241: CALL_OW 69
34245: ST_TO_ADDR
// if not tmp then
34246: LD_VAR 0 6
34250: NOT
34251: IFFALSE 34255
// exit ;
34253: GO 34503
// result := [ ] ;
34255: LD_ADDR_VAR 0 2
34259: PUSH
34260: EMPTY
34261: ST_TO_ADDR
// for i in tmp do
34262: LD_ADDR_VAR 0 3
34266: PUSH
34267: LD_VAR 0 6
34271: PUSH
34272: FOR_IN
34273: IFFALSE 34344
// begin t := UnitsInside ( i ) ;
34275: LD_ADDR_VAR 0 4
34279: PUSH
34280: LD_VAR 0 3
34284: PPUSH
34285: CALL_OW 313
34289: ST_TO_ADDR
// if t then
34290: LD_VAR 0 4
34294: IFFALSE 34342
// for j in t do
34296: LD_ADDR_VAR 0 7
34300: PUSH
34301: LD_VAR 0 4
34305: PUSH
34306: FOR_IN
34307: IFFALSE 34340
// result := Replace ( result , result + 1 , j ) ;
34309: LD_ADDR_VAR 0 2
34313: PUSH
34314: LD_VAR 0 2
34318: PPUSH
34319: LD_VAR 0 2
34323: PUSH
34324: LD_INT 1
34326: PLUS
34327: PPUSH
34328: LD_VAR 0 7
34332: PPUSH
34333: CALL_OW 1
34337: ST_TO_ADDR
34338: GO 34306
34340: POP
34341: POP
// end ;
34342: GO 34272
34344: POP
34345: POP
// if not result then
34346: LD_VAR 0 2
34350: NOT
34351: IFFALSE 34355
// exit ;
34353: GO 34503
// mech := result [ 1 ] ;
34355: LD_ADDR_VAR 0 5
34359: PUSH
34360: LD_VAR 0 2
34364: PUSH
34365: LD_INT 1
34367: ARRAY
34368: ST_TO_ADDR
// if result > 1 then
34369: LD_VAR 0 2
34373: PUSH
34374: LD_INT 1
34376: GREATER
34377: IFFALSE 34489
// begin for i = 2 to result do
34379: LD_ADDR_VAR 0 3
34383: PUSH
34384: DOUBLE
34385: LD_INT 2
34387: DEC
34388: ST_TO_ADDR
34389: LD_VAR 0 2
34393: PUSH
34394: FOR_TO
34395: IFFALSE 34487
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34397: LD_ADDR_VAR 0 4
34401: PUSH
34402: LD_VAR 0 2
34406: PUSH
34407: LD_VAR 0 3
34411: ARRAY
34412: PPUSH
34413: LD_INT 3
34415: PPUSH
34416: CALL_OW 259
34420: PUSH
34421: LD_VAR 0 2
34425: PUSH
34426: LD_VAR 0 3
34430: ARRAY
34431: PPUSH
34432: CALL_OW 432
34436: MINUS
34437: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34438: LD_VAR 0 4
34442: PUSH
34443: LD_VAR 0 5
34447: PPUSH
34448: LD_INT 3
34450: PPUSH
34451: CALL_OW 259
34455: PUSH
34456: LD_VAR 0 5
34460: PPUSH
34461: CALL_OW 432
34465: MINUS
34466: GREATEREQUAL
34467: IFFALSE 34485
// mech := result [ i ] ;
34469: LD_ADDR_VAR 0 5
34473: PUSH
34474: LD_VAR 0 2
34478: PUSH
34479: LD_VAR 0 3
34483: ARRAY
34484: ST_TO_ADDR
// end ;
34485: GO 34394
34487: POP
34488: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34489: LD_VAR 0 1
34493: PPUSH
34494: LD_VAR 0 5
34498: PPUSH
34499: CALL_OW 135
// end ;
34503: LD_VAR 0 2
34507: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34508: LD_INT 0
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
34514: PPUSH
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
// result := [ ] ;
34523: LD_ADDR_VAR 0 7
34527: PUSH
34528: EMPTY
34529: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34530: LD_VAR 0 1
34534: PPUSH
34535: CALL_OW 266
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: IN
34550: NOT
34551: IFFALSE 34555
// exit ;
34553: GO 36189
// if name then
34555: LD_VAR 0 3
34559: IFFALSE 34575
// SetBName ( base_dep , name ) ;
34561: LD_VAR 0 1
34565: PPUSH
34566: LD_VAR 0 3
34570: PPUSH
34571: CALL_OW 500
// base := GetBase ( base_dep ) ;
34575: LD_ADDR_VAR 0 15
34579: PUSH
34580: LD_VAR 0 1
34584: PPUSH
34585: CALL_OW 274
34589: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34590: LD_ADDR_VAR 0 16
34594: PUSH
34595: LD_VAR 0 1
34599: PPUSH
34600: CALL_OW 255
34604: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34605: LD_ADDR_VAR 0 17
34609: PUSH
34610: LD_VAR 0 1
34614: PPUSH
34615: CALL_OW 248
34619: ST_TO_ADDR
// if sources then
34620: LD_VAR 0 5
34624: IFFALSE 34671
// for i = 1 to 3 do
34626: LD_ADDR_VAR 0 8
34630: PUSH
34631: DOUBLE
34632: LD_INT 1
34634: DEC
34635: ST_TO_ADDR
34636: LD_INT 3
34638: PUSH
34639: FOR_TO
34640: IFFALSE 34669
// AddResourceType ( base , i , sources [ i ] ) ;
34642: LD_VAR 0 15
34646: PPUSH
34647: LD_VAR 0 8
34651: PPUSH
34652: LD_VAR 0 5
34656: PUSH
34657: LD_VAR 0 8
34661: ARRAY
34662: PPUSH
34663: CALL_OW 276
34667: GO 34639
34669: POP
34670: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34671: LD_ADDR_VAR 0 18
34675: PUSH
34676: LD_VAR 0 15
34680: PPUSH
34681: LD_VAR 0 2
34685: PPUSH
34686: LD_INT 1
34688: PPUSH
34689: CALL 33932 0 3
34693: ST_TO_ADDR
// InitHc ;
34694: CALL_OW 19
// InitUc ;
34698: CALL_OW 18
// uc_side := side ;
34702: LD_ADDR_OWVAR 20
34706: PUSH
34707: LD_VAR 0 16
34711: ST_TO_ADDR
// uc_nation := nation ;
34712: LD_ADDR_OWVAR 21
34716: PUSH
34717: LD_VAR 0 17
34721: ST_TO_ADDR
// if buildings then
34722: LD_VAR 0 18
34726: IFFALSE 36048
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34728: LD_ADDR_VAR 0 19
34732: PUSH
34733: LD_VAR 0 18
34737: PPUSH
34738: LD_INT 2
34740: PUSH
34741: LD_INT 30
34743: PUSH
34744: LD_INT 29
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 30
34753: PUSH
34754: LD_INT 30
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: PPUSH
34766: CALL_OW 72
34770: ST_TO_ADDR
// if tmp then
34771: LD_VAR 0 19
34775: IFFALSE 34823
// for i in tmp do
34777: LD_ADDR_VAR 0 8
34781: PUSH
34782: LD_VAR 0 19
34786: PUSH
34787: FOR_IN
34788: IFFALSE 34821
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34790: LD_VAR 0 8
34794: PPUSH
34795: CALL_OW 250
34799: PPUSH
34800: LD_VAR 0 8
34804: PPUSH
34805: CALL_OW 251
34809: PPUSH
34810: LD_VAR 0 16
34814: PPUSH
34815: CALL_OW 441
34819: GO 34787
34821: POP
34822: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34823: LD_VAR 0 18
34827: PPUSH
34828: LD_INT 2
34830: PUSH
34831: LD_INT 30
34833: PUSH
34834: LD_INT 32
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 30
34843: PUSH
34844: LD_INT 33
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: LIST
34855: PPUSH
34856: CALL_OW 72
34860: IFFALSE 34948
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34862: LD_ADDR_VAR 0 8
34866: PUSH
34867: LD_VAR 0 18
34871: PPUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 30
34877: PUSH
34878: LD_INT 32
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 30
34887: PUSH
34888: LD_INT 33
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: PPUSH
34900: CALL_OW 72
34904: PUSH
34905: FOR_IN
34906: IFFALSE 34946
// begin if not GetBWeapon ( i ) then
34908: LD_VAR 0 8
34912: PPUSH
34913: CALL_OW 269
34917: NOT
34918: IFFALSE 34944
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34920: LD_VAR 0 8
34924: PPUSH
34925: LD_VAR 0 8
34929: PPUSH
34930: LD_VAR 0 2
34934: PPUSH
34935: CALL 36194 0 2
34939: PPUSH
34940: CALL_OW 431
// end ;
34944: GO 34905
34946: POP
34947: POP
// end ; for i = 1 to personel do
34948: LD_ADDR_VAR 0 8
34952: PUSH
34953: DOUBLE
34954: LD_INT 1
34956: DEC
34957: ST_TO_ADDR
34958: LD_VAR 0 6
34962: PUSH
34963: FOR_TO
34964: IFFALSE 36028
// begin if i > 4 then
34966: LD_VAR 0 8
34970: PUSH
34971: LD_INT 4
34973: GREATER
34974: IFFALSE 34978
// break ;
34976: GO 36028
// case i of 1 :
34978: LD_VAR 0 8
34982: PUSH
34983: LD_INT 1
34985: DOUBLE
34986: EQUAL
34987: IFTRUE 34991
34989: GO 35071
34991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34992: LD_ADDR_VAR 0 12
34996: PUSH
34997: LD_VAR 0 18
35001: PPUSH
35002: LD_INT 22
35004: PUSH
35005: LD_VAR 0 16
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 58
35016: PUSH
35017: EMPTY
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 30
35025: PUSH
35026: LD_INT 32
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 30
35035: PUSH
35036: LD_INT 4
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 30
35045: PUSH
35046: LD_INT 5
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: PPUSH
35064: CALL_OW 72
35068: ST_TO_ADDR
35069: GO 35293
35071: LD_INT 2
35073: DOUBLE
35074: EQUAL
35075: IFTRUE 35079
35077: GO 35141
35079: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35080: LD_ADDR_VAR 0 12
35084: PUSH
35085: LD_VAR 0 18
35089: PPUSH
35090: LD_INT 22
35092: PUSH
35093: LD_VAR 0 16
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 30
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 30
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: LIST
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PPUSH
35134: CALL_OW 72
35138: ST_TO_ADDR
35139: GO 35293
35141: LD_INT 3
35143: DOUBLE
35144: EQUAL
35145: IFTRUE 35149
35147: GO 35211
35149: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35150: LD_ADDR_VAR 0 12
35154: PUSH
35155: LD_VAR 0 18
35159: PPUSH
35160: LD_INT 22
35162: PUSH
35163: LD_VAR 0 16
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 2
35174: PUSH
35175: LD_INT 30
35177: PUSH
35178: LD_INT 2
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 30
35187: PUSH
35188: LD_INT 3
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: LIST
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PPUSH
35204: CALL_OW 72
35208: ST_TO_ADDR
35209: GO 35293
35211: LD_INT 4
35213: DOUBLE
35214: EQUAL
35215: IFTRUE 35219
35217: GO 35292
35219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35220: LD_ADDR_VAR 0 12
35224: PUSH
35225: LD_VAR 0 18
35229: PPUSH
35230: LD_INT 22
35232: PUSH
35233: LD_VAR 0 16
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: LD_INT 30
35247: PUSH
35248: LD_INT 6
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 30
35257: PUSH
35258: LD_INT 7
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 30
35267: PUSH
35268: LD_INT 8
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PPUSH
35285: CALL_OW 72
35289: ST_TO_ADDR
35290: GO 35293
35292: POP
// if i = 1 then
35293: LD_VAR 0 8
35297: PUSH
35298: LD_INT 1
35300: EQUAL
35301: IFFALSE 35412
// begin tmp := [ ] ;
35303: LD_ADDR_VAR 0 19
35307: PUSH
35308: EMPTY
35309: ST_TO_ADDR
// for j in f do
35310: LD_ADDR_VAR 0 9
35314: PUSH
35315: LD_VAR 0 12
35319: PUSH
35320: FOR_IN
35321: IFFALSE 35394
// if GetBType ( j ) = b_bunker then
35323: LD_VAR 0 9
35327: PPUSH
35328: CALL_OW 266
35332: PUSH
35333: LD_INT 32
35335: EQUAL
35336: IFFALSE 35363
// tmp := Insert ( tmp , 1 , j ) else
35338: LD_ADDR_VAR 0 19
35342: PUSH
35343: LD_VAR 0 19
35347: PPUSH
35348: LD_INT 1
35350: PPUSH
35351: LD_VAR 0 9
35355: PPUSH
35356: CALL_OW 2
35360: ST_TO_ADDR
35361: GO 35392
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35363: LD_ADDR_VAR 0 19
35367: PUSH
35368: LD_VAR 0 19
35372: PPUSH
35373: LD_VAR 0 19
35377: PUSH
35378: LD_INT 1
35380: PLUS
35381: PPUSH
35382: LD_VAR 0 9
35386: PPUSH
35387: CALL_OW 2
35391: ST_TO_ADDR
35392: GO 35320
35394: POP
35395: POP
// if tmp then
35396: LD_VAR 0 19
35400: IFFALSE 35412
// f := tmp ;
35402: LD_ADDR_VAR 0 12
35406: PUSH
35407: LD_VAR 0 19
35411: ST_TO_ADDR
// end ; x := personel [ i ] ;
35412: LD_ADDR_VAR 0 13
35416: PUSH
35417: LD_VAR 0 6
35421: PUSH
35422: LD_VAR 0 8
35426: ARRAY
35427: ST_TO_ADDR
// if x = - 1 then
35428: LD_VAR 0 13
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: EQUAL
35437: IFFALSE 35646
// begin for j in f do
35439: LD_ADDR_VAR 0 9
35443: PUSH
35444: LD_VAR 0 12
35448: PUSH
35449: FOR_IN
35450: IFFALSE 35642
// repeat InitHc ;
35452: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35456: LD_VAR 0 9
35460: PPUSH
35461: CALL_OW 266
35465: PUSH
35466: LD_INT 5
35468: EQUAL
35469: IFFALSE 35539
// begin if UnitsInside ( j ) < 3 then
35471: LD_VAR 0 9
35475: PPUSH
35476: CALL_OW 313
35480: PUSH
35481: LD_INT 3
35483: LESS
35484: IFFALSE 35520
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35486: LD_INT 0
35488: PPUSH
35489: LD_INT 5
35491: PUSH
35492: LD_INT 8
35494: PUSH
35495: LD_INT 9
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: PUSH
35503: LD_VAR 0 17
35507: ARRAY
35508: PPUSH
35509: LD_VAR 0 4
35513: PPUSH
35514: CALL_OW 380
35518: GO 35537
// PrepareHuman ( false , i , skill ) ;
35520: LD_INT 0
35522: PPUSH
35523: LD_VAR 0 8
35527: PPUSH
35528: LD_VAR 0 4
35532: PPUSH
35533: CALL_OW 380
// end else
35537: GO 35556
// PrepareHuman ( false , i , skill ) ;
35539: LD_INT 0
35541: PPUSH
35542: LD_VAR 0 8
35546: PPUSH
35547: LD_VAR 0 4
35551: PPUSH
35552: CALL_OW 380
// un := CreateHuman ;
35556: LD_ADDR_VAR 0 14
35560: PUSH
35561: CALL_OW 44
35565: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35566: LD_ADDR_VAR 0 7
35570: PUSH
35571: LD_VAR 0 7
35575: PPUSH
35576: LD_INT 1
35578: PPUSH
35579: LD_VAR 0 14
35583: PPUSH
35584: CALL_OW 2
35588: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35589: LD_VAR 0 14
35593: PPUSH
35594: LD_VAR 0 9
35598: PPUSH
35599: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35603: LD_VAR 0 9
35607: PPUSH
35608: CALL_OW 313
35612: PUSH
35613: LD_INT 6
35615: EQUAL
35616: PUSH
35617: LD_VAR 0 9
35621: PPUSH
35622: CALL_OW 266
35626: PUSH
35627: LD_INT 32
35629: PUSH
35630: LD_INT 31
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: IN
35637: OR
35638: IFFALSE 35452
35640: GO 35449
35642: POP
35643: POP
// end else
35644: GO 36026
// for j = 1 to x do
35646: LD_ADDR_VAR 0 9
35650: PUSH
35651: DOUBLE
35652: LD_INT 1
35654: DEC
35655: ST_TO_ADDR
35656: LD_VAR 0 13
35660: PUSH
35661: FOR_TO
35662: IFFALSE 36024
// begin InitHc ;
35664: CALL_OW 19
// if not f then
35668: LD_VAR 0 12
35672: NOT
35673: IFFALSE 35762
// begin PrepareHuman ( false , i , skill ) ;
35675: LD_INT 0
35677: PPUSH
35678: LD_VAR 0 8
35682: PPUSH
35683: LD_VAR 0 4
35687: PPUSH
35688: CALL_OW 380
// un := CreateHuman ;
35692: LD_ADDR_VAR 0 14
35696: PUSH
35697: CALL_OW 44
35701: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35702: LD_ADDR_VAR 0 7
35706: PUSH
35707: LD_VAR 0 7
35711: PPUSH
35712: LD_INT 1
35714: PPUSH
35715: LD_VAR 0 14
35719: PPUSH
35720: CALL_OW 2
35724: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35725: LD_VAR 0 14
35729: PPUSH
35730: LD_VAR 0 1
35734: PPUSH
35735: CALL_OW 250
35739: PPUSH
35740: LD_VAR 0 1
35744: PPUSH
35745: CALL_OW 251
35749: PPUSH
35750: LD_INT 10
35752: PPUSH
35753: LD_INT 0
35755: PPUSH
35756: CALL_OW 50
// continue ;
35760: GO 35661
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35762: LD_VAR 0 12
35766: PUSH
35767: LD_INT 1
35769: ARRAY
35770: PPUSH
35771: CALL_OW 313
35775: PUSH
35776: LD_VAR 0 12
35780: PUSH
35781: LD_INT 1
35783: ARRAY
35784: PPUSH
35785: CALL_OW 266
35789: PUSH
35790: LD_INT 32
35792: PUSH
35793: LD_INT 31
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: IN
35800: AND
35801: PUSH
35802: LD_VAR 0 12
35806: PUSH
35807: LD_INT 1
35809: ARRAY
35810: PPUSH
35811: CALL_OW 313
35815: PUSH
35816: LD_INT 6
35818: EQUAL
35819: OR
35820: IFFALSE 35840
// f := Delete ( f , 1 ) ;
35822: LD_ADDR_VAR 0 12
35826: PUSH
35827: LD_VAR 0 12
35831: PPUSH
35832: LD_INT 1
35834: PPUSH
35835: CALL_OW 3
35839: ST_TO_ADDR
// if not f then
35840: LD_VAR 0 12
35844: NOT
35845: IFFALSE 35863
// begin x := x + 2 ;
35847: LD_ADDR_VAR 0 13
35851: PUSH
35852: LD_VAR 0 13
35856: PUSH
35857: LD_INT 2
35859: PLUS
35860: ST_TO_ADDR
// continue ;
35861: GO 35661
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35863: LD_VAR 0 12
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: PPUSH
35872: CALL_OW 266
35876: PUSH
35877: LD_INT 5
35879: EQUAL
35880: IFFALSE 35954
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35882: LD_VAR 0 12
35886: PUSH
35887: LD_INT 1
35889: ARRAY
35890: PPUSH
35891: CALL_OW 313
35895: PUSH
35896: LD_INT 3
35898: LESS
35899: IFFALSE 35935
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35901: LD_INT 0
35903: PPUSH
35904: LD_INT 5
35906: PUSH
35907: LD_INT 8
35909: PUSH
35910: LD_INT 9
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: PUSH
35918: LD_VAR 0 17
35922: ARRAY
35923: PPUSH
35924: LD_VAR 0 4
35928: PPUSH
35929: CALL_OW 380
35933: GO 35952
// PrepareHuman ( false , i , skill ) ;
35935: LD_INT 0
35937: PPUSH
35938: LD_VAR 0 8
35942: PPUSH
35943: LD_VAR 0 4
35947: PPUSH
35948: CALL_OW 380
// end else
35952: GO 35971
// PrepareHuman ( false , i , skill ) ;
35954: LD_INT 0
35956: PPUSH
35957: LD_VAR 0 8
35961: PPUSH
35962: LD_VAR 0 4
35966: PPUSH
35967: CALL_OW 380
// un := CreateHuman ;
35971: LD_ADDR_VAR 0 14
35975: PUSH
35976: CALL_OW 44
35980: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35981: LD_ADDR_VAR 0 7
35985: PUSH
35986: LD_VAR 0 7
35990: PPUSH
35991: LD_INT 1
35993: PPUSH
35994: LD_VAR 0 14
35998: PPUSH
35999: CALL_OW 2
36003: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36004: LD_VAR 0 14
36008: PPUSH
36009: LD_VAR 0 12
36013: PUSH
36014: LD_INT 1
36016: ARRAY
36017: PPUSH
36018: CALL_OW 52
// end ;
36022: GO 35661
36024: POP
36025: POP
// end ;
36026: GO 34963
36028: POP
36029: POP
// result := result ^ buildings ;
36030: LD_ADDR_VAR 0 7
36034: PUSH
36035: LD_VAR 0 7
36039: PUSH
36040: LD_VAR 0 18
36044: ADD
36045: ST_TO_ADDR
// end else
36046: GO 36189
// begin for i = 1 to personel do
36048: LD_ADDR_VAR 0 8
36052: PUSH
36053: DOUBLE
36054: LD_INT 1
36056: DEC
36057: ST_TO_ADDR
36058: LD_VAR 0 6
36062: PUSH
36063: FOR_TO
36064: IFFALSE 36187
// begin if i > 4 then
36066: LD_VAR 0 8
36070: PUSH
36071: LD_INT 4
36073: GREATER
36074: IFFALSE 36078
// break ;
36076: GO 36187
// x := personel [ i ] ;
36078: LD_ADDR_VAR 0 13
36082: PUSH
36083: LD_VAR 0 6
36087: PUSH
36088: LD_VAR 0 8
36092: ARRAY
36093: ST_TO_ADDR
// if x = - 1 then
36094: LD_VAR 0 13
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: EQUAL
36103: IFFALSE 36107
// continue ;
36105: GO 36063
// PrepareHuman ( false , i , skill ) ;
36107: LD_INT 0
36109: PPUSH
36110: LD_VAR 0 8
36114: PPUSH
36115: LD_VAR 0 4
36119: PPUSH
36120: CALL_OW 380
// un := CreateHuman ;
36124: LD_ADDR_VAR 0 14
36128: PUSH
36129: CALL_OW 44
36133: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36134: LD_VAR 0 14
36138: PPUSH
36139: LD_VAR 0 1
36143: PPUSH
36144: CALL_OW 250
36148: PPUSH
36149: LD_VAR 0 1
36153: PPUSH
36154: CALL_OW 251
36158: PPUSH
36159: LD_INT 10
36161: PPUSH
36162: LD_INT 0
36164: PPUSH
36165: CALL_OW 50
// result := result ^ un ;
36169: LD_ADDR_VAR 0 7
36173: PUSH
36174: LD_VAR 0 7
36178: PUSH
36179: LD_VAR 0 14
36183: ADD
36184: ST_TO_ADDR
// end ;
36185: GO 36063
36187: POP
36188: POP
// end ; end ;
36189: LD_VAR 0 7
36193: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36194: LD_INT 0
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
36209: PPUSH
36210: PPUSH
36211: PPUSH
// result := false ;
36212: LD_ADDR_VAR 0 3
36216: PUSH
36217: LD_INT 0
36219: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36220: LD_VAR 0 1
36224: NOT
36225: PUSH
36226: LD_VAR 0 1
36230: PPUSH
36231: CALL_OW 266
36235: PUSH
36236: LD_INT 32
36238: PUSH
36239: LD_INT 33
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: IN
36246: NOT
36247: OR
36248: IFFALSE 36252
// exit ;
36250: GO 37361
// nat := GetNation ( tower ) ;
36252: LD_ADDR_VAR 0 12
36256: PUSH
36257: LD_VAR 0 1
36261: PPUSH
36262: CALL_OW 248
36266: ST_TO_ADDR
// side := GetSide ( tower ) ;
36267: LD_ADDR_VAR 0 16
36271: PUSH
36272: LD_VAR 0 1
36276: PPUSH
36277: CALL_OW 255
36281: ST_TO_ADDR
// x := GetX ( tower ) ;
36282: LD_ADDR_VAR 0 10
36286: PUSH
36287: LD_VAR 0 1
36291: PPUSH
36292: CALL_OW 250
36296: ST_TO_ADDR
// y := GetY ( tower ) ;
36297: LD_ADDR_VAR 0 11
36301: PUSH
36302: LD_VAR 0 1
36306: PPUSH
36307: CALL_OW 251
36311: ST_TO_ADDR
// if not x or not y then
36312: LD_VAR 0 10
36316: NOT
36317: PUSH
36318: LD_VAR 0 11
36322: NOT
36323: OR
36324: IFFALSE 36328
// exit ;
36326: GO 37361
// weapon := 0 ;
36328: LD_ADDR_VAR 0 18
36332: PUSH
36333: LD_INT 0
36335: ST_TO_ADDR
// fac_list := [ ] ;
36336: LD_ADDR_VAR 0 17
36340: PUSH
36341: EMPTY
36342: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36343: LD_ADDR_VAR 0 6
36347: PUSH
36348: LD_VAR 0 1
36352: PPUSH
36353: CALL_OW 274
36357: PPUSH
36358: LD_VAR 0 2
36362: PPUSH
36363: LD_INT 0
36365: PPUSH
36366: CALL 33932 0 3
36370: PPUSH
36371: LD_INT 30
36373: PUSH
36374: LD_INT 3
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PPUSH
36381: CALL_OW 72
36385: ST_TO_ADDR
// if not factories then
36386: LD_VAR 0 6
36390: NOT
36391: IFFALSE 36395
// exit ;
36393: GO 37361
// for i in factories do
36395: LD_ADDR_VAR 0 8
36399: PUSH
36400: LD_VAR 0 6
36404: PUSH
36405: FOR_IN
36406: IFFALSE 36431
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36408: LD_ADDR_VAR 0 17
36412: PUSH
36413: LD_VAR 0 17
36417: PUSH
36418: LD_VAR 0 8
36422: PPUSH
36423: CALL_OW 478
36427: UNION
36428: ST_TO_ADDR
36429: GO 36405
36431: POP
36432: POP
// if not fac_list then
36433: LD_VAR 0 17
36437: NOT
36438: IFFALSE 36442
// exit ;
36440: GO 37361
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36442: LD_ADDR_VAR 0 5
36446: PUSH
36447: LD_INT 4
36449: PUSH
36450: LD_INT 5
36452: PUSH
36453: LD_INT 9
36455: PUSH
36456: LD_INT 10
36458: PUSH
36459: LD_INT 6
36461: PUSH
36462: LD_INT 7
36464: PUSH
36465: LD_INT 11
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 27
36479: PUSH
36480: LD_INT 28
36482: PUSH
36483: LD_INT 26
36485: PUSH
36486: LD_INT 30
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 43
36497: PUSH
36498: LD_INT 44
36500: PUSH
36501: LD_INT 46
36503: PUSH
36504: LD_INT 45
36506: PUSH
36507: LD_INT 47
36509: PUSH
36510: LD_INT 49
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: PUSH
36526: LD_VAR 0 12
36530: ARRAY
36531: ST_TO_ADDR
// list := list isect fac_list ;
36532: LD_ADDR_VAR 0 5
36536: PUSH
36537: LD_VAR 0 5
36541: PUSH
36542: LD_VAR 0 17
36546: ISECT
36547: ST_TO_ADDR
// if not list then
36548: LD_VAR 0 5
36552: NOT
36553: IFFALSE 36557
// exit ;
36555: GO 37361
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36557: LD_VAR 0 12
36561: PUSH
36562: LD_INT 3
36564: EQUAL
36565: PUSH
36566: LD_INT 49
36568: PUSH
36569: LD_VAR 0 5
36573: IN
36574: AND
36575: PUSH
36576: LD_INT 31
36578: PPUSH
36579: LD_VAR 0 16
36583: PPUSH
36584: CALL_OW 321
36588: PUSH
36589: LD_INT 2
36591: EQUAL
36592: AND
36593: IFFALSE 36653
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36595: LD_INT 22
36597: PUSH
36598: LD_VAR 0 16
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 35
36609: PUSH
36610: LD_INT 49
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 91
36619: PUSH
36620: LD_VAR 0 1
36624: PUSH
36625: LD_INT 10
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: PPUSH
36638: CALL_OW 69
36642: NOT
36643: IFFALSE 36653
// weapon := ru_time_lapser ;
36645: LD_ADDR_VAR 0 18
36649: PUSH
36650: LD_INT 49
36652: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36653: LD_VAR 0 12
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: IN
36668: PUSH
36669: LD_INT 11
36671: PUSH
36672: LD_VAR 0 5
36676: IN
36677: PUSH
36678: LD_INT 30
36680: PUSH
36681: LD_VAR 0 5
36685: IN
36686: OR
36687: AND
36688: PUSH
36689: LD_INT 6
36691: PPUSH
36692: LD_VAR 0 16
36696: PPUSH
36697: CALL_OW 321
36701: PUSH
36702: LD_INT 2
36704: EQUAL
36705: AND
36706: IFFALSE 36871
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36708: LD_INT 22
36710: PUSH
36711: LD_VAR 0 16
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: LD_INT 35
36725: PUSH
36726: LD_INT 11
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 35
36735: PUSH
36736: LD_INT 30
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 91
36750: PUSH
36751: LD_VAR 0 1
36755: PUSH
36756: LD_INT 18
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: LIST
36768: PPUSH
36769: CALL_OW 69
36773: NOT
36774: PUSH
36775: LD_INT 22
36777: PUSH
36778: LD_VAR 0 16
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 2
36789: PUSH
36790: LD_INT 30
36792: PUSH
36793: LD_INT 32
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 30
36802: PUSH
36803: LD_INT 33
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 91
36817: PUSH
36818: LD_VAR 0 1
36822: PUSH
36823: LD_INT 12
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: PPUSH
36839: CALL_OW 69
36843: PUSH
36844: LD_INT 2
36846: GREATER
36847: AND
36848: IFFALSE 36871
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36850: LD_ADDR_VAR 0 18
36854: PUSH
36855: LD_INT 11
36857: PUSH
36858: LD_INT 30
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_VAR 0 12
36869: ARRAY
36870: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36871: LD_VAR 0 18
36875: NOT
36876: PUSH
36877: LD_INT 40
36879: PPUSH
36880: LD_VAR 0 16
36884: PPUSH
36885: CALL_OW 321
36889: PUSH
36890: LD_INT 2
36892: EQUAL
36893: AND
36894: PUSH
36895: LD_INT 7
36897: PUSH
36898: LD_VAR 0 5
36902: IN
36903: PUSH
36904: LD_INT 28
36906: PUSH
36907: LD_VAR 0 5
36911: IN
36912: OR
36913: PUSH
36914: LD_INT 45
36916: PUSH
36917: LD_VAR 0 5
36921: IN
36922: OR
36923: AND
36924: IFFALSE 37178
// begin hex := GetHexInfo ( x , y ) ;
36926: LD_ADDR_VAR 0 4
36930: PUSH
36931: LD_VAR 0 10
36935: PPUSH
36936: LD_VAR 0 11
36940: PPUSH
36941: CALL_OW 546
36945: ST_TO_ADDR
// if hex [ 1 ] then
36946: LD_VAR 0 4
36950: PUSH
36951: LD_INT 1
36953: ARRAY
36954: IFFALSE 36958
// exit ;
36956: GO 37361
// height := hex [ 2 ] ;
36958: LD_ADDR_VAR 0 15
36962: PUSH
36963: LD_VAR 0 4
36967: PUSH
36968: LD_INT 2
36970: ARRAY
36971: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36972: LD_ADDR_VAR 0 14
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 3
36985: PUSH
36986: LD_INT 5
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: ST_TO_ADDR
// for i in tmp do
36995: LD_ADDR_VAR 0 8
36999: PUSH
37000: LD_VAR 0 14
37004: PUSH
37005: FOR_IN
37006: IFFALSE 37176
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37008: LD_ADDR_VAR 0 9
37012: PUSH
37013: LD_VAR 0 10
37017: PPUSH
37018: LD_VAR 0 8
37022: PPUSH
37023: LD_INT 5
37025: PPUSH
37026: CALL_OW 272
37030: PUSH
37031: LD_VAR 0 11
37035: PPUSH
37036: LD_VAR 0 8
37040: PPUSH
37041: LD_INT 5
37043: PPUSH
37044: CALL_OW 273
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37053: LD_VAR 0 9
37057: PUSH
37058: LD_INT 1
37060: ARRAY
37061: PPUSH
37062: LD_VAR 0 9
37066: PUSH
37067: LD_INT 2
37069: ARRAY
37070: PPUSH
37071: CALL_OW 488
37075: IFFALSE 37174
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37077: LD_ADDR_VAR 0 4
37081: PUSH
37082: LD_VAR 0 9
37086: PUSH
37087: LD_INT 1
37089: ARRAY
37090: PPUSH
37091: LD_VAR 0 9
37095: PUSH
37096: LD_INT 2
37098: ARRAY
37099: PPUSH
37100: CALL_OW 546
37104: ST_TO_ADDR
// if hex [ 1 ] then
37105: LD_VAR 0 4
37109: PUSH
37110: LD_INT 1
37112: ARRAY
37113: IFFALSE 37117
// continue ;
37115: GO 37005
// h := hex [ 2 ] ;
37117: LD_ADDR_VAR 0 13
37121: PUSH
37122: LD_VAR 0 4
37126: PUSH
37127: LD_INT 2
37129: ARRAY
37130: ST_TO_ADDR
// if h + 7 < height then
37131: LD_VAR 0 13
37135: PUSH
37136: LD_INT 7
37138: PLUS
37139: PUSH
37140: LD_VAR 0 15
37144: LESS
37145: IFFALSE 37174
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37147: LD_ADDR_VAR 0 18
37151: PUSH
37152: LD_INT 7
37154: PUSH
37155: LD_INT 28
37157: PUSH
37158: LD_INT 45
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: PUSH
37166: LD_VAR 0 12
37170: ARRAY
37171: ST_TO_ADDR
// break ;
37172: GO 37176
// end ; end ; end ;
37174: GO 37005
37176: POP
37177: POP
// end ; if not weapon then
37178: LD_VAR 0 18
37182: NOT
37183: IFFALSE 37243
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37185: LD_ADDR_VAR 0 5
37189: PUSH
37190: LD_VAR 0 5
37194: PUSH
37195: LD_INT 11
37197: PUSH
37198: LD_INT 30
37200: PUSH
37201: LD_INT 49
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: DIFF
37209: ST_TO_ADDR
// if not list then
37210: LD_VAR 0 5
37214: NOT
37215: IFFALSE 37219
// exit ;
37217: GO 37361
// weapon := list [ rand ( 1 , list ) ] ;
37219: LD_ADDR_VAR 0 18
37223: PUSH
37224: LD_VAR 0 5
37228: PUSH
37229: LD_INT 1
37231: PPUSH
37232: LD_VAR 0 5
37236: PPUSH
37237: CALL_OW 12
37241: ARRAY
37242: ST_TO_ADDR
// end ; if weapon then
37243: LD_VAR 0 18
37247: IFFALSE 37361
// begin tmp := CostOfWeapon ( weapon ) ;
37249: LD_ADDR_VAR 0 14
37253: PUSH
37254: LD_VAR 0 18
37258: PPUSH
37259: CALL_OW 451
37263: ST_TO_ADDR
// j := GetBase ( tower ) ;
37264: LD_ADDR_VAR 0 9
37268: PUSH
37269: LD_VAR 0 1
37273: PPUSH
37274: CALL_OW 274
37278: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37279: LD_VAR 0 9
37283: PPUSH
37284: LD_INT 1
37286: PPUSH
37287: CALL_OW 275
37291: PUSH
37292: LD_VAR 0 14
37296: PUSH
37297: LD_INT 1
37299: ARRAY
37300: GREATEREQUAL
37301: PUSH
37302: LD_VAR 0 9
37306: PPUSH
37307: LD_INT 2
37309: PPUSH
37310: CALL_OW 275
37314: PUSH
37315: LD_VAR 0 14
37319: PUSH
37320: LD_INT 2
37322: ARRAY
37323: GREATEREQUAL
37324: AND
37325: PUSH
37326: LD_VAR 0 9
37330: PPUSH
37331: LD_INT 3
37333: PPUSH
37334: CALL_OW 275
37338: PUSH
37339: LD_VAR 0 14
37343: PUSH
37344: LD_INT 3
37346: ARRAY
37347: GREATEREQUAL
37348: AND
37349: IFFALSE 37361
// result := weapon ;
37351: LD_ADDR_VAR 0 3
37355: PUSH
37356: LD_VAR 0 18
37360: ST_TO_ADDR
// end ; end ;
37361: LD_VAR 0 3
37365: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37366: LD_INT 0
37368: PPUSH
37369: PPUSH
// result := true ;
37370: LD_ADDR_VAR 0 3
37374: PUSH
37375: LD_INT 1
37377: ST_TO_ADDR
// if array1 = array2 then
37378: LD_VAR 0 1
37382: PUSH
37383: LD_VAR 0 2
37387: EQUAL
37388: IFFALSE 37448
// begin for i = 1 to array1 do
37390: LD_ADDR_VAR 0 4
37394: PUSH
37395: DOUBLE
37396: LD_INT 1
37398: DEC
37399: ST_TO_ADDR
37400: LD_VAR 0 1
37404: PUSH
37405: FOR_TO
37406: IFFALSE 37444
// if array1 [ i ] <> array2 [ i ] then
37408: LD_VAR 0 1
37412: PUSH
37413: LD_VAR 0 4
37417: ARRAY
37418: PUSH
37419: LD_VAR 0 2
37423: PUSH
37424: LD_VAR 0 4
37428: ARRAY
37429: NONEQUAL
37430: IFFALSE 37442
// begin result := false ;
37432: LD_ADDR_VAR 0 3
37436: PUSH
37437: LD_INT 0
37439: ST_TO_ADDR
// break ;
37440: GO 37444
// end ;
37442: GO 37405
37444: POP
37445: POP
// end else
37446: GO 37456
// result := false ;
37448: LD_ADDR_VAR 0 3
37452: PUSH
37453: LD_INT 0
37455: ST_TO_ADDR
// end ;
37456: LD_VAR 0 3
37460: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37461: LD_INT 0
37463: PPUSH
37464: PPUSH
// if not array1 or not array2 then
37465: LD_VAR 0 1
37469: NOT
37470: PUSH
37471: LD_VAR 0 2
37475: NOT
37476: OR
37477: IFFALSE 37481
// exit ;
37479: GO 37545
// result := true ;
37481: LD_ADDR_VAR 0 3
37485: PUSH
37486: LD_INT 1
37488: ST_TO_ADDR
// for i = 1 to array1 do
37489: LD_ADDR_VAR 0 4
37493: PUSH
37494: DOUBLE
37495: LD_INT 1
37497: DEC
37498: ST_TO_ADDR
37499: LD_VAR 0 1
37503: PUSH
37504: FOR_TO
37505: IFFALSE 37543
// if array1 [ i ] <> array2 [ i ] then
37507: LD_VAR 0 1
37511: PUSH
37512: LD_VAR 0 4
37516: ARRAY
37517: PUSH
37518: LD_VAR 0 2
37522: PUSH
37523: LD_VAR 0 4
37527: ARRAY
37528: NONEQUAL
37529: IFFALSE 37541
// begin result := false ;
37531: LD_ADDR_VAR 0 3
37535: PUSH
37536: LD_INT 0
37538: ST_TO_ADDR
// break ;
37539: GO 37543
// end ;
37541: GO 37504
37543: POP
37544: POP
// end ;
37545: LD_VAR 0 3
37549: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37550: LD_INT 0
37552: PPUSH
37553: PPUSH
37554: PPUSH
// pom := GetBase ( fac ) ;
37555: LD_ADDR_VAR 0 5
37559: PUSH
37560: LD_VAR 0 1
37564: PPUSH
37565: CALL_OW 274
37569: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37570: LD_ADDR_VAR 0 4
37574: PUSH
37575: LD_VAR 0 2
37579: PUSH
37580: LD_INT 1
37582: ARRAY
37583: PPUSH
37584: LD_VAR 0 2
37588: PUSH
37589: LD_INT 2
37591: ARRAY
37592: PPUSH
37593: LD_VAR 0 2
37597: PUSH
37598: LD_INT 3
37600: ARRAY
37601: PPUSH
37602: LD_VAR 0 2
37606: PUSH
37607: LD_INT 4
37609: ARRAY
37610: PPUSH
37611: CALL_OW 449
37615: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37616: LD_ADDR_VAR 0 3
37620: PUSH
37621: LD_VAR 0 5
37625: PPUSH
37626: LD_INT 1
37628: PPUSH
37629: CALL_OW 275
37633: PUSH
37634: LD_VAR 0 4
37638: PUSH
37639: LD_INT 1
37641: ARRAY
37642: GREATEREQUAL
37643: PUSH
37644: LD_VAR 0 5
37648: PPUSH
37649: LD_INT 2
37651: PPUSH
37652: CALL_OW 275
37656: PUSH
37657: LD_VAR 0 4
37661: PUSH
37662: LD_INT 2
37664: ARRAY
37665: GREATEREQUAL
37666: AND
37667: PUSH
37668: LD_VAR 0 5
37672: PPUSH
37673: LD_INT 3
37675: PPUSH
37676: CALL_OW 275
37680: PUSH
37681: LD_VAR 0 4
37685: PUSH
37686: LD_INT 3
37688: ARRAY
37689: GREATEREQUAL
37690: AND
37691: ST_TO_ADDR
// end ;
37692: LD_VAR 0 3
37696: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37697: LD_INT 0
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
// pom := GetBase ( building ) ;
37703: LD_ADDR_VAR 0 3
37707: PUSH
37708: LD_VAR 0 1
37712: PPUSH
37713: CALL_OW 274
37717: ST_TO_ADDR
// if not pom then
37718: LD_VAR 0 3
37722: NOT
37723: IFFALSE 37727
// exit ;
37725: GO 37897
// btype := GetBType ( building ) ;
37727: LD_ADDR_VAR 0 5
37731: PUSH
37732: LD_VAR 0 1
37736: PPUSH
37737: CALL_OW 266
37741: ST_TO_ADDR
// if btype = b_armoury then
37742: LD_VAR 0 5
37746: PUSH
37747: LD_INT 4
37749: EQUAL
37750: IFFALSE 37760
// btype := b_barracks ;
37752: LD_ADDR_VAR 0 5
37756: PUSH
37757: LD_INT 5
37759: ST_TO_ADDR
// if btype = b_depot then
37760: LD_VAR 0 5
37764: PUSH
37765: LD_INT 0
37767: EQUAL
37768: IFFALSE 37778
// btype := b_warehouse ;
37770: LD_ADDR_VAR 0 5
37774: PUSH
37775: LD_INT 1
37777: ST_TO_ADDR
// if btype = b_workshop then
37778: LD_VAR 0 5
37782: PUSH
37783: LD_INT 2
37785: EQUAL
37786: IFFALSE 37796
// btype := b_factory ;
37788: LD_ADDR_VAR 0 5
37792: PUSH
37793: LD_INT 3
37795: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37796: LD_ADDR_VAR 0 4
37800: PUSH
37801: LD_VAR 0 5
37805: PPUSH
37806: LD_VAR 0 1
37810: PPUSH
37811: CALL_OW 248
37815: PPUSH
37816: CALL_OW 450
37820: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37821: LD_ADDR_VAR 0 2
37825: PUSH
37826: LD_VAR 0 3
37830: PPUSH
37831: LD_INT 1
37833: PPUSH
37834: CALL_OW 275
37838: PUSH
37839: LD_VAR 0 4
37843: PUSH
37844: LD_INT 1
37846: ARRAY
37847: GREATEREQUAL
37848: PUSH
37849: LD_VAR 0 3
37853: PPUSH
37854: LD_INT 2
37856: PPUSH
37857: CALL_OW 275
37861: PUSH
37862: LD_VAR 0 4
37866: PUSH
37867: LD_INT 2
37869: ARRAY
37870: GREATEREQUAL
37871: AND
37872: PUSH
37873: LD_VAR 0 3
37877: PPUSH
37878: LD_INT 3
37880: PPUSH
37881: CALL_OW 275
37885: PUSH
37886: LD_VAR 0 4
37890: PUSH
37891: LD_INT 3
37893: ARRAY
37894: GREATEREQUAL
37895: AND
37896: ST_TO_ADDR
// end ;
37897: LD_VAR 0 2
37901: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37902: LD_INT 0
37904: PPUSH
37905: PPUSH
37906: PPUSH
// pom := GetBase ( building ) ;
37907: LD_ADDR_VAR 0 4
37911: PUSH
37912: LD_VAR 0 1
37916: PPUSH
37917: CALL_OW 274
37921: ST_TO_ADDR
// if not pom then
37922: LD_VAR 0 4
37926: NOT
37927: IFFALSE 37931
// exit ;
37929: GO 38032
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37931: LD_ADDR_VAR 0 5
37935: PUSH
37936: LD_VAR 0 2
37940: PPUSH
37941: LD_VAR 0 1
37945: PPUSH
37946: CALL_OW 248
37950: PPUSH
37951: CALL_OW 450
37955: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37956: LD_ADDR_VAR 0 3
37960: PUSH
37961: LD_VAR 0 4
37965: PPUSH
37966: LD_INT 1
37968: PPUSH
37969: CALL_OW 275
37973: PUSH
37974: LD_VAR 0 5
37978: PUSH
37979: LD_INT 1
37981: ARRAY
37982: GREATEREQUAL
37983: PUSH
37984: LD_VAR 0 4
37988: PPUSH
37989: LD_INT 2
37991: PPUSH
37992: CALL_OW 275
37996: PUSH
37997: LD_VAR 0 5
38001: PUSH
38002: LD_INT 2
38004: ARRAY
38005: GREATEREQUAL
38006: AND
38007: PUSH
38008: LD_VAR 0 4
38012: PPUSH
38013: LD_INT 3
38015: PPUSH
38016: CALL_OW 275
38020: PUSH
38021: LD_VAR 0 5
38025: PUSH
38026: LD_INT 3
38028: ARRAY
38029: GREATEREQUAL
38030: AND
38031: ST_TO_ADDR
// end ;
38032: LD_VAR 0 3
38036: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38037: LD_INT 0
38039: PPUSH
38040: PPUSH
38041: PPUSH
38042: PPUSH
38043: PPUSH
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
38048: PPUSH
38049: PPUSH
// result := false ;
38050: LD_ADDR_VAR 0 8
38054: PUSH
38055: LD_INT 0
38057: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38058: LD_VAR 0 5
38062: NOT
38063: PUSH
38064: LD_VAR 0 1
38068: NOT
38069: OR
38070: PUSH
38071: LD_VAR 0 2
38075: NOT
38076: OR
38077: PUSH
38078: LD_VAR 0 3
38082: NOT
38083: OR
38084: IFFALSE 38088
// exit ;
38086: GO 38902
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38088: LD_ADDR_VAR 0 14
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: LD_VAR 0 2
38102: PPUSH
38103: LD_VAR 0 3
38107: PPUSH
38108: LD_VAR 0 4
38112: PPUSH
38113: LD_VAR 0 5
38117: PUSH
38118: LD_INT 1
38120: ARRAY
38121: PPUSH
38122: CALL_OW 248
38126: PPUSH
38127: LD_INT 0
38129: PPUSH
38130: CALL 40139 0 6
38134: ST_TO_ADDR
// if not hexes then
38135: LD_VAR 0 14
38139: NOT
38140: IFFALSE 38144
// exit ;
38142: GO 38902
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38144: LD_ADDR_VAR 0 17
38148: PUSH
38149: LD_VAR 0 5
38153: PPUSH
38154: LD_INT 22
38156: PUSH
38157: LD_VAR 0 13
38161: PPUSH
38162: CALL_OW 255
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 2
38173: PUSH
38174: LD_INT 30
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 30
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PPUSH
38203: CALL_OW 72
38207: ST_TO_ADDR
// for i = 1 to hexes do
38208: LD_ADDR_VAR 0 9
38212: PUSH
38213: DOUBLE
38214: LD_INT 1
38216: DEC
38217: ST_TO_ADDR
38218: LD_VAR 0 14
38222: PUSH
38223: FOR_TO
38224: IFFALSE 38900
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38226: LD_ADDR_VAR 0 13
38230: PUSH
38231: LD_VAR 0 14
38235: PUSH
38236: LD_VAR 0 9
38240: ARRAY
38241: PUSH
38242: LD_INT 1
38244: ARRAY
38245: PPUSH
38246: LD_VAR 0 14
38250: PUSH
38251: LD_VAR 0 9
38255: ARRAY
38256: PUSH
38257: LD_INT 2
38259: ARRAY
38260: PPUSH
38261: CALL_OW 428
38265: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38266: LD_VAR 0 14
38270: PUSH
38271: LD_VAR 0 9
38275: ARRAY
38276: PUSH
38277: LD_INT 1
38279: ARRAY
38280: PPUSH
38281: LD_VAR 0 14
38285: PUSH
38286: LD_VAR 0 9
38290: ARRAY
38291: PUSH
38292: LD_INT 2
38294: ARRAY
38295: PPUSH
38296: CALL_OW 351
38300: PUSH
38301: LD_VAR 0 14
38305: PUSH
38306: LD_VAR 0 9
38310: ARRAY
38311: PUSH
38312: LD_INT 1
38314: ARRAY
38315: PPUSH
38316: LD_VAR 0 14
38320: PUSH
38321: LD_VAR 0 9
38325: ARRAY
38326: PUSH
38327: LD_INT 2
38329: ARRAY
38330: PPUSH
38331: CALL_OW 488
38335: NOT
38336: OR
38337: PUSH
38338: LD_VAR 0 13
38342: PPUSH
38343: CALL_OW 247
38347: PUSH
38348: LD_INT 3
38350: EQUAL
38351: OR
38352: IFFALSE 38358
// exit ;
38354: POP
38355: POP
38356: GO 38902
// if not tmp then
38358: LD_VAR 0 13
38362: NOT
38363: IFFALSE 38367
// continue ;
38365: GO 38223
// result := true ;
38367: LD_ADDR_VAR 0 8
38371: PUSH
38372: LD_INT 1
38374: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38375: LD_VAR 0 6
38379: PUSH
38380: LD_VAR 0 13
38384: PPUSH
38385: CALL_OW 247
38389: PUSH
38390: LD_INT 2
38392: EQUAL
38393: AND
38394: PUSH
38395: LD_VAR 0 13
38399: PPUSH
38400: CALL_OW 263
38404: PUSH
38405: LD_INT 1
38407: EQUAL
38408: AND
38409: IFFALSE 38573
// begin if IsDrivenBy ( tmp ) then
38411: LD_VAR 0 13
38415: PPUSH
38416: CALL_OW 311
38420: IFFALSE 38424
// continue ;
38422: GO 38223
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38424: LD_VAR 0 6
38428: PPUSH
38429: LD_INT 3
38431: PUSH
38432: LD_INT 60
38434: PUSH
38435: EMPTY
38436: LIST
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: LD_INT 55
38447: PUSH
38448: EMPTY
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PPUSH
38459: CALL_OW 72
38463: IFFALSE 38571
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38465: LD_ADDR_VAR 0 18
38469: PUSH
38470: LD_VAR 0 6
38474: PPUSH
38475: LD_INT 3
38477: PUSH
38478: LD_INT 60
38480: PUSH
38481: EMPTY
38482: LIST
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 3
38490: PUSH
38491: LD_INT 55
38493: PUSH
38494: EMPTY
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PPUSH
38505: CALL_OW 72
38509: PUSH
38510: LD_INT 1
38512: ARRAY
38513: ST_TO_ADDR
// if IsInUnit ( driver ) then
38514: LD_VAR 0 18
38518: PPUSH
38519: CALL_OW 310
38523: IFFALSE 38534
// ComExit ( driver ) ;
38525: LD_VAR 0 18
38529: PPUSH
38530: CALL 63323 0 1
// AddComEnterUnit ( driver , tmp ) ;
38534: LD_VAR 0 18
38538: PPUSH
38539: LD_VAR 0 13
38543: PPUSH
38544: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38548: LD_VAR 0 18
38552: PPUSH
38553: LD_VAR 0 7
38557: PPUSH
38558: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38562: LD_VAR 0 18
38566: PPUSH
38567: CALL_OW 181
// end ; continue ;
38571: GO 38223
// end ; if not cleaners or not tmp in cleaners then
38573: LD_VAR 0 6
38577: NOT
38578: PUSH
38579: LD_VAR 0 13
38583: PUSH
38584: LD_VAR 0 6
38588: IN
38589: NOT
38590: OR
38591: IFFALSE 38898
// begin if dep then
38593: LD_VAR 0 17
38597: IFFALSE 38733
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38599: LD_ADDR_VAR 0 16
38603: PUSH
38604: LD_VAR 0 17
38608: PUSH
38609: LD_INT 1
38611: ARRAY
38612: PPUSH
38613: CALL_OW 250
38617: PPUSH
38618: LD_VAR 0 17
38622: PUSH
38623: LD_INT 1
38625: ARRAY
38626: PPUSH
38627: CALL_OW 254
38631: PPUSH
38632: LD_INT 5
38634: PPUSH
38635: CALL_OW 272
38639: PUSH
38640: LD_VAR 0 17
38644: PUSH
38645: LD_INT 1
38647: ARRAY
38648: PPUSH
38649: CALL_OW 251
38653: PPUSH
38654: LD_VAR 0 17
38658: PUSH
38659: LD_INT 1
38661: ARRAY
38662: PPUSH
38663: CALL_OW 254
38667: PPUSH
38668: LD_INT 5
38670: PPUSH
38671: CALL_OW 273
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38680: LD_VAR 0 16
38684: PUSH
38685: LD_INT 1
38687: ARRAY
38688: PPUSH
38689: LD_VAR 0 16
38693: PUSH
38694: LD_INT 2
38696: ARRAY
38697: PPUSH
38698: CALL_OW 488
38702: IFFALSE 38733
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38704: LD_VAR 0 13
38708: PPUSH
38709: LD_VAR 0 16
38713: PUSH
38714: LD_INT 1
38716: ARRAY
38717: PPUSH
38718: LD_VAR 0 16
38722: PUSH
38723: LD_INT 2
38725: ARRAY
38726: PPUSH
38727: CALL_OW 111
// continue ;
38731: GO 38223
// end ; end ; r := GetDir ( tmp ) ;
38733: LD_ADDR_VAR 0 15
38737: PUSH
38738: LD_VAR 0 13
38742: PPUSH
38743: CALL_OW 254
38747: ST_TO_ADDR
// if r = 5 then
38748: LD_VAR 0 15
38752: PUSH
38753: LD_INT 5
38755: EQUAL
38756: IFFALSE 38766
// r := 0 ;
38758: LD_ADDR_VAR 0 15
38762: PUSH
38763: LD_INT 0
38765: ST_TO_ADDR
// for j = r to 5 do
38766: LD_ADDR_VAR 0 10
38770: PUSH
38771: DOUBLE
38772: LD_VAR 0 15
38776: DEC
38777: ST_TO_ADDR
38778: LD_INT 5
38780: PUSH
38781: FOR_TO
38782: IFFALSE 38896
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38784: LD_ADDR_VAR 0 11
38788: PUSH
38789: LD_VAR 0 13
38793: PPUSH
38794: CALL_OW 250
38798: PPUSH
38799: LD_VAR 0 10
38803: PPUSH
38804: LD_INT 2
38806: PPUSH
38807: CALL_OW 272
38811: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38812: LD_ADDR_VAR 0 12
38816: PUSH
38817: LD_VAR 0 13
38821: PPUSH
38822: CALL_OW 251
38826: PPUSH
38827: LD_VAR 0 10
38831: PPUSH
38832: LD_INT 2
38834: PPUSH
38835: CALL_OW 273
38839: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38840: LD_VAR 0 11
38844: PPUSH
38845: LD_VAR 0 12
38849: PPUSH
38850: CALL_OW 488
38854: PUSH
38855: LD_VAR 0 11
38859: PPUSH
38860: LD_VAR 0 12
38864: PPUSH
38865: CALL_OW 428
38869: NOT
38870: AND
38871: IFFALSE 38894
// begin ComMoveXY ( tmp , _x , _y ) ;
38873: LD_VAR 0 13
38877: PPUSH
38878: LD_VAR 0 11
38882: PPUSH
38883: LD_VAR 0 12
38887: PPUSH
38888: CALL_OW 111
// break ;
38892: GO 38896
// end ; end ;
38894: GO 38781
38896: POP
38897: POP
// end ; end ;
38898: GO 38223
38900: POP
38901: POP
// end ;
38902: LD_VAR 0 8
38906: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38907: LD_INT 0
38909: PPUSH
// result := true ;
38910: LD_ADDR_VAR 0 3
38914: PUSH
38915: LD_INT 1
38917: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38918: LD_VAR 0 2
38922: PUSH
38923: LD_INT 24
38925: DOUBLE
38926: EQUAL
38927: IFTRUE 38937
38929: LD_INT 33
38931: DOUBLE
38932: EQUAL
38933: IFTRUE 38937
38935: GO 38962
38937: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38938: LD_ADDR_VAR 0 3
38942: PUSH
38943: LD_INT 32
38945: PPUSH
38946: LD_VAR 0 1
38950: PPUSH
38951: CALL_OW 321
38955: PUSH
38956: LD_INT 2
38958: EQUAL
38959: ST_TO_ADDR
38960: GO 39282
38962: LD_INT 20
38964: DOUBLE
38965: EQUAL
38966: IFTRUE 38970
38968: GO 38995
38970: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38971: LD_ADDR_VAR 0 3
38975: PUSH
38976: LD_INT 6
38978: PPUSH
38979: LD_VAR 0 1
38983: PPUSH
38984: CALL_OW 321
38988: PUSH
38989: LD_INT 2
38991: EQUAL
38992: ST_TO_ADDR
38993: GO 39282
38995: LD_INT 22
38997: DOUBLE
38998: EQUAL
38999: IFTRUE 39009
39001: LD_INT 36
39003: DOUBLE
39004: EQUAL
39005: IFTRUE 39009
39007: GO 39034
39009: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39010: LD_ADDR_VAR 0 3
39014: PUSH
39015: LD_INT 15
39017: PPUSH
39018: LD_VAR 0 1
39022: PPUSH
39023: CALL_OW 321
39027: PUSH
39028: LD_INT 2
39030: EQUAL
39031: ST_TO_ADDR
39032: GO 39282
39034: LD_INT 30
39036: DOUBLE
39037: EQUAL
39038: IFTRUE 39042
39040: GO 39067
39042: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39043: LD_ADDR_VAR 0 3
39047: PUSH
39048: LD_INT 20
39050: PPUSH
39051: LD_VAR 0 1
39055: PPUSH
39056: CALL_OW 321
39060: PUSH
39061: LD_INT 2
39063: EQUAL
39064: ST_TO_ADDR
39065: GO 39282
39067: LD_INT 28
39069: DOUBLE
39070: EQUAL
39071: IFTRUE 39081
39073: LD_INT 21
39075: DOUBLE
39076: EQUAL
39077: IFTRUE 39081
39079: GO 39106
39081: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39082: LD_ADDR_VAR 0 3
39086: PUSH
39087: LD_INT 21
39089: PPUSH
39090: LD_VAR 0 1
39094: PPUSH
39095: CALL_OW 321
39099: PUSH
39100: LD_INT 2
39102: EQUAL
39103: ST_TO_ADDR
39104: GO 39282
39106: LD_INT 16
39108: DOUBLE
39109: EQUAL
39110: IFTRUE 39114
39112: GO 39141
39114: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39115: LD_ADDR_VAR 0 3
39119: PUSH
39120: LD_EXP 30
39124: PPUSH
39125: LD_VAR 0 1
39129: PPUSH
39130: CALL_OW 321
39134: PUSH
39135: LD_INT 2
39137: EQUAL
39138: ST_TO_ADDR
39139: GO 39282
39141: LD_INT 19
39143: DOUBLE
39144: EQUAL
39145: IFTRUE 39155
39147: LD_INT 23
39149: DOUBLE
39150: EQUAL
39151: IFTRUE 39155
39153: GO 39182
39155: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39156: LD_ADDR_VAR 0 3
39160: PUSH
39161: LD_EXP 29
39165: PPUSH
39166: LD_VAR 0 1
39170: PPUSH
39171: CALL_OW 321
39175: PUSH
39176: LD_INT 2
39178: EQUAL
39179: ST_TO_ADDR
39180: GO 39282
39182: LD_INT 17
39184: DOUBLE
39185: EQUAL
39186: IFTRUE 39190
39188: GO 39215
39190: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39191: LD_ADDR_VAR 0 3
39195: PUSH
39196: LD_INT 39
39198: PPUSH
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 321
39208: PUSH
39209: LD_INT 2
39211: EQUAL
39212: ST_TO_ADDR
39213: GO 39282
39215: LD_INT 18
39217: DOUBLE
39218: EQUAL
39219: IFTRUE 39223
39221: GO 39248
39223: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39224: LD_ADDR_VAR 0 3
39228: PUSH
39229: LD_INT 40
39231: PPUSH
39232: LD_VAR 0 1
39236: PPUSH
39237: CALL_OW 321
39241: PUSH
39242: LD_INT 2
39244: EQUAL
39245: ST_TO_ADDR
39246: GO 39282
39248: LD_INT 27
39250: DOUBLE
39251: EQUAL
39252: IFTRUE 39256
39254: GO 39281
39256: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39257: LD_ADDR_VAR 0 3
39261: PUSH
39262: LD_INT 35
39264: PPUSH
39265: LD_VAR 0 1
39269: PPUSH
39270: CALL_OW 321
39274: PUSH
39275: LD_INT 2
39277: EQUAL
39278: ST_TO_ADDR
39279: GO 39282
39281: POP
// end ;
39282: LD_VAR 0 3
39286: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39287: LD_INT 0
39289: PPUSH
39290: PPUSH
39291: PPUSH
39292: PPUSH
39293: PPUSH
39294: PPUSH
39295: PPUSH
39296: PPUSH
39297: PPUSH
39298: PPUSH
39299: PPUSH
// result := false ;
39300: LD_ADDR_VAR 0 6
39304: PUSH
39305: LD_INT 0
39307: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39308: LD_VAR 0 1
39312: NOT
39313: PUSH
39314: LD_VAR 0 1
39318: PPUSH
39319: CALL_OW 266
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: IN
39334: NOT
39335: OR
39336: PUSH
39337: LD_VAR 0 2
39341: NOT
39342: OR
39343: PUSH
39344: LD_VAR 0 5
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 2
39357: PUSH
39358: LD_INT 3
39360: PUSH
39361: LD_INT 4
39363: PUSH
39364: LD_INT 5
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: IN
39375: NOT
39376: OR
39377: PUSH
39378: LD_VAR 0 3
39382: PPUSH
39383: LD_VAR 0 4
39387: PPUSH
39388: CALL_OW 488
39392: NOT
39393: OR
39394: IFFALSE 39398
// exit ;
39396: GO 40134
// side := GetSide ( depot ) ;
39398: LD_ADDR_VAR 0 9
39402: PUSH
39403: LD_VAR 0 1
39407: PPUSH
39408: CALL_OW 255
39412: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39413: LD_VAR 0 9
39417: PPUSH
39418: LD_VAR 0 2
39422: PPUSH
39423: CALL 38907 0 2
39427: NOT
39428: IFFALSE 39432
// exit ;
39430: GO 40134
// pom := GetBase ( depot ) ;
39432: LD_ADDR_VAR 0 10
39436: PUSH
39437: LD_VAR 0 1
39441: PPUSH
39442: CALL_OW 274
39446: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39447: LD_ADDR_VAR 0 11
39451: PUSH
39452: LD_VAR 0 2
39456: PPUSH
39457: LD_VAR 0 1
39461: PPUSH
39462: CALL_OW 248
39466: PPUSH
39467: CALL_OW 450
39471: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39472: LD_VAR 0 10
39476: PPUSH
39477: LD_INT 1
39479: PPUSH
39480: CALL_OW 275
39484: PUSH
39485: LD_VAR 0 11
39489: PUSH
39490: LD_INT 1
39492: ARRAY
39493: GREATEREQUAL
39494: PUSH
39495: LD_VAR 0 10
39499: PPUSH
39500: LD_INT 2
39502: PPUSH
39503: CALL_OW 275
39507: PUSH
39508: LD_VAR 0 11
39512: PUSH
39513: LD_INT 2
39515: ARRAY
39516: GREATEREQUAL
39517: AND
39518: PUSH
39519: LD_VAR 0 10
39523: PPUSH
39524: LD_INT 3
39526: PPUSH
39527: CALL_OW 275
39531: PUSH
39532: LD_VAR 0 11
39536: PUSH
39537: LD_INT 3
39539: ARRAY
39540: GREATEREQUAL
39541: AND
39542: NOT
39543: IFFALSE 39547
// exit ;
39545: GO 40134
// if GetBType ( depot ) = b_depot then
39547: LD_VAR 0 1
39551: PPUSH
39552: CALL_OW 266
39556: PUSH
39557: LD_INT 0
39559: EQUAL
39560: IFFALSE 39572
// dist := 28 else
39562: LD_ADDR_VAR 0 14
39566: PUSH
39567: LD_INT 28
39569: ST_TO_ADDR
39570: GO 39580
// dist := 36 ;
39572: LD_ADDR_VAR 0 14
39576: PUSH
39577: LD_INT 36
39579: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39580: LD_VAR 0 1
39584: PPUSH
39585: LD_VAR 0 3
39589: PPUSH
39590: LD_VAR 0 4
39594: PPUSH
39595: CALL_OW 297
39599: PUSH
39600: LD_VAR 0 14
39604: GREATER
39605: IFFALSE 39609
// exit ;
39607: GO 40134
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39609: LD_ADDR_VAR 0 12
39613: PUSH
39614: LD_VAR 0 2
39618: PPUSH
39619: LD_VAR 0 3
39623: PPUSH
39624: LD_VAR 0 4
39628: PPUSH
39629: LD_VAR 0 5
39633: PPUSH
39634: LD_VAR 0 1
39638: PPUSH
39639: CALL_OW 248
39643: PPUSH
39644: LD_INT 0
39646: PPUSH
39647: CALL 40139 0 6
39651: ST_TO_ADDR
// if not hexes then
39652: LD_VAR 0 12
39656: NOT
39657: IFFALSE 39661
// exit ;
39659: GO 40134
// hex := GetHexInfo ( x , y ) ;
39661: LD_ADDR_VAR 0 15
39665: PUSH
39666: LD_VAR 0 3
39670: PPUSH
39671: LD_VAR 0 4
39675: PPUSH
39676: CALL_OW 546
39680: ST_TO_ADDR
// if hex [ 1 ] then
39681: LD_VAR 0 15
39685: PUSH
39686: LD_INT 1
39688: ARRAY
39689: IFFALSE 39693
// exit ;
39691: GO 40134
// height := hex [ 2 ] ;
39693: LD_ADDR_VAR 0 13
39697: PUSH
39698: LD_VAR 0 15
39702: PUSH
39703: LD_INT 2
39705: ARRAY
39706: ST_TO_ADDR
// for i = 1 to hexes do
39707: LD_ADDR_VAR 0 7
39711: PUSH
39712: DOUBLE
39713: LD_INT 1
39715: DEC
39716: ST_TO_ADDR
39717: LD_VAR 0 12
39721: PUSH
39722: FOR_TO
39723: IFFALSE 40053
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39725: LD_VAR 0 12
39729: PUSH
39730: LD_VAR 0 7
39734: ARRAY
39735: PUSH
39736: LD_INT 1
39738: ARRAY
39739: PPUSH
39740: LD_VAR 0 12
39744: PUSH
39745: LD_VAR 0 7
39749: ARRAY
39750: PUSH
39751: LD_INT 2
39753: ARRAY
39754: PPUSH
39755: CALL_OW 488
39759: NOT
39760: PUSH
39761: LD_VAR 0 12
39765: PUSH
39766: LD_VAR 0 7
39770: ARRAY
39771: PUSH
39772: LD_INT 1
39774: ARRAY
39775: PPUSH
39776: LD_VAR 0 12
39780: PUSH
39781: LD_VAR 0 7
39785: ARRAY
39786: PUSH
39787: LD_INT 2
39789: ARRAY
39790: PPUSH
39791: CALL_OW 428
39795: PUSH
39796: LD_INT 0
39798: GREATER
39799: OR
39800: PUSH
39801: LD_VAR 0 12
39805: PUSH
39806: LD_VAR 0 7
39810: ARRAY
39811: PUSH
39812: LD_INT 1
39814: ARRAY
39815: PPUSH
39816: LD_VAR 0 12
39820: PUSH
39821: LD_VAR 0 7
39825: ARRAY
39826: PUSH
39827: LD_INT 2
39829: ARRAY
39830: PPUSH
39831: CALL_OW 351
39835: OR
39836: IFFALSE 39842
// exit ;
39838: POP
39839: POP
39840: GO 40134
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39842: LD_ADDR_VAR 0 8
39846: PUSH
39847: LD_VAR 0 12
39851: PUSH
39852: LD_VAR 0 7
39856: ARRAY
39857: PUSH
39858: LD_INT 1
39860: ARRAY
39861: PPUSH
39862: LD_VAR 0 12
39866: PUSH
39867: LD_VAR 0 7
39871: ARRAY
39872: PUSH
39873: LD_INT 2
39875: ARRAY
39876: PPUSH
39877: CALL_OW 546
39881: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39882: LD_VAR 0 8
39886: PUSH
39887: LD_INT 1
39889: ARRAY
39890: PUSH
39891: LD_VAR 0 8
39895: PUSH
39896: LD_INT 2
39898: ARRAY
39899: PUSH
39900: LD_VAR 0 13
39904: PUSH
39905: LD_INT 2
39907: PLUS
39908: GREATER
39909: OR
39910: PUSH
39911: LD_VAR 0 8
39915: PUSH
39916: LD_INT 2
39918: ARRAY
39919: PUSH
39920: LD_VAR 0 13
39924: PUSH
39925: LD_INT 2
39927: MINUS
39928: LESS
39929: OR
39930: PUSH
39931: LD_VAR 0 8
39935: PUSH
39936: LD_INT 3
39938: ARRAY
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 8
39945: PUSH
39946: LD_INT 9
39948: PUSH
39949: LD_INT 10
39951: PUSH
39952: LD_INT 11
39954: PUSH
39955: LD_INT 12
39957: PUSH
39958: LD_INT 13
39960: PUSH
39961: LD_INT 16
39963: PUSH
39964: LD_INT 17
39966: PUSH
39967: LD_INT 18
39969: PUSH
39970: LD_INT 19
39972: PUSH
39973: LD_INT 20
39975: PUSH
39976: LD_INT 21
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: IN
39994: NOT
39995: OR
39996: PUSH
39997: LD_VAR 0 8
40001: PUSH
40002: LD_INT 5
40004: ARRAY
40005: NOT
40006: OR
40007: PUSH
40008: LD_VAR 0 8
40012: PUSH
40013: LD_INT 6
40015: ARRAY
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: LD_INT 7
40025: PUSH
40026: LD_INT 9
40028: PUSH
40029: LD_INT 10
40031: PUSH
40032: LD_INT 11
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: IN
40043: NOT
40044: OR
40045: IFFALSE 40051
// exit ;
40047: POP
40048: POP
40049: GO 40134
// end ;
40051: GO 39722
40053: POP
40054: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40055: LD_VAR 0 9
40059: PPUSH
40060: LD_VAR 0 3
40064: PPUSH
40065: LD_VAR 0 4
40069: PPUSH
40070: LD_INT 20
40072: PPUSH
40073: CALL 32080 0 4
40077: PUSH
40078: LD_INT 4
40080: ARRAY
40081: IFFALSE 40085
// exit ;
40083: GO 40134
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40085: LD_VAR 0 2
40089: PUSH
40090: LD_INT 29
40092: PUSH
40093: LD_INT 30
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: IN
40100: PUSH
40101: LD_VAR 0 3
40105: PPUSH
40106: LD_VAR 0 4
40110: PPUSH
40111: LD_VAR 0 9
40115: PPUSH
40116: CALL_OW 440
40120: NOT
40121: AND
40122: IFFALSE 40126
// exit ;
40124: GO 40134
// result := true ;
40126: LD_ADDR_VAR 0 6
40130: PUSH
40131: LD_INT 1
40133: ST_TO_ADDR
// end ;
40134: LD_VAR 0 6
40138: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40139: LD_INT 0
40141: PPUSH
40142: PPUSH
40143: PPUSH
40144: PPUSH
40145: PPUSH
40146: PPUSH
40147: PPUSH
40148: PPUSH
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
40171: PPUSH
40172: PPUSH
40173: PPUSH
40174: PPUSH
40175: PPUSH
40176: PPUSH
40177: PPUSH
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
40183: PPUSH
40184: PPUSH
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
// result = [ ] ;
40199: LD_ADDR_VAR 0 7
40203: PUSH
40204: EMPTY
40205: ST_TO_ADDR
// temp_list = [ ] ;
40206: LD_ADDR_VAR 0 9
40210: PUSH
40211: EMPTY
40212: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40213: LD_VAR 0 4
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: LD_INT 3
40229: PUSH
40230: LD_INT 4
40232: PUSH
40233: LD_INT 5
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: IN
40244: NOT
40245: PUSH
40246: LD_VAR 0 1
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: IN
40261: PUSH
40262: LD_VAR 0 5
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: LIST
40280: IN
40281: NOT
40282: AND
40283: OR
40284: IFFALSE 40288
// exit ;
40286: GO 58679
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40288: LD_VAR 0 1
40292: PUSH
40293: LD_INT 6
40295: PUSH
40296: LD_INT 7
40298: PUSH
40299: LD_INT 8
40301: PUSH
40302: LD_INT 13
40304: PUSH
40305: LD_INT 12
40307: PUSH
40308: LD_INT 15
40310: PUSH
40311: LD_INT 11
40313: PUSH
40314: LD_INT 14
40316: PUSH
40317: LD_INT 10
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: IN
40331: IFFALSE 40341
// btype = b_lab ;
40333: LD_ADDR_VAR 0 1
40337: PUSH
40338: LD_INT 6
40340: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40341: LD_VAR 0 6
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: IN
40360: NOT
40361: PUSH
40362: LD_VAR 0 1
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: LD_INT 3
40378: PUSH
40379: LD_INT 6
40381: PUSH
40382: LD_INT 36
40384: PUSH
40385: LD_INT 4
40387: PUSH
40388: LD_INT 5
40390: PUSH
40391: LD_INT 31
40393: PUSH
40394: LD_INT 32
40396: PUSH
40397: LD_INT 33
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: IN
40413: NOT
40414: PUSH
40415: LD_VAR 0 6
40419: PUSH
40420: LD_INT 1
40422: EQUAL
40423: AND
40424: OR
40425: PUSH
40426: LD_VAR 0 1
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 3
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: IN
40441: NOT
40442: PUSH
40443: LD_VAR 0 6
40447: PUSH
40448: LD_INT 2
40450: EQUAL
40451: AND
40452: OR
40453: IFFALSE 40463
// mode = 0 ;
40455: LD_ADDR_VAR 0 6
40459: PUSH
40460: LD_INT 0
40462: ST_TO_ADDR
// case mode of 0 :
40463: LD_VAR 0 6
40467: PUSH
40468: LD_INT 0
40470: DOUBLE
40471: EQUAL
40472: IFTRUE 40476
40474: GO 51929
40476: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40477: LD_ADDR_VAR 0 11
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 2
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 3
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 3
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40670: LD_ADDR_VAR 0 12
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: NEG
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 2
40804: NEG
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 3
40827: NEG
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 3
40838: NEG
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40866: LD_ADDR_VAR 0 13
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: LD_INT 2
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 3
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 3
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 3
41037: NEG
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41065: LD_ADDR_VAR 0 14
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: LD_INT 2
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 3
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 3
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41261: LD_ADDR_VAR 0 15
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 3
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 3
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41454: LD_ADDR_VAR 0 16
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: LD_INT 2
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 3
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 3
41611: PUSH
41612: LD_INT 3
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: LD_INT 3
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41647: LD_ADDR_VAR 0 17
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41877: LD_ADDR_VAR 0 18
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42107: LD_ADDR_VAR 0 19
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42337: LD_ADDR_VAR 0 20
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42567: LD_ADDR_VAR 0 21
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42797: LD_ADDR_VAR 0 22
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 2
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43027: LD_ADDR_VAR 0 23
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: LD_INT 3
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 2
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43307: LD_ADDR_VAR 0 24
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 2
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 2
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 2
43494: NEG
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: LD_INT 2
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 3
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 3
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43583: LD_ADDR_VAR 0 25
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: NEG
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 3
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: LD_INT 3
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43857: LD_ADDR_VAR 0 26
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: LD_INT 3
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 3
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44133: LD_ADDR_VAR 0 27
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: NEG
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: NEG
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44413: LD_ADDR_VAR 0 28
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: LD_INT 3
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 3
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 3
44660: NEG
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44695: LD_ADDR_VAR 0 29
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: LD_INT 3
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 3
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 3
44939: NEG
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44974: LD_ADDR_VAR 0 30
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 3
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 3
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: LD_INT 3
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 3
45217: NEG
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45252: LD_ADDR_VAR 0 31
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: LD_INT 3
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 3
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 3
45495: NEG
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45530: LD_ADDR_VAR 0 32
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 3
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 3
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: LD_INT 3
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 3
45773: NEG
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45808: LD_ADDR_VAR 0 33
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 3
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46087: LD_ADDR_VAR 0 34
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 3
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 3
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46367: LD_ADDR_VAR 0 35
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46479: LD_ADDR_VAR 0 36
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46591: LD_ADDR_VAR 0 37
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46703: LD_ADDR_VAR 0 38
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46815: LD_ADDR_VAR 0 39
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46927: LD_ADDR_VAR 0 40
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47039: LD_ADDR_VAR 0 41
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: LD_INT 3
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 3
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 3
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 3
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 3
47313: NEG
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 3
47324: NEG
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 3
47336: NEG
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: NEG
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47389: LD_ADDR_VAR 0 42
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 2
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: LD_INT 3
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: LD_INT 3
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 3
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: LD_INT 3
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: LD_INT 3
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 3
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 3
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: NEG
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 3
47698: NEG
47699: PUSH
47700: LD_INT 3
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47739: LD_ADDR_VAR 0 43
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 3
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 3
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 3
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 3
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 3
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 3
48035: NEG
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 3
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48087: LD_ADDR_VAR 0 44
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: LD_INT 3
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 3
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 3
48330: PUSH
48331: LD_INT 3
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 3
48361: NEG
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 3
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 3
48384: NEG
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 3
48396: NEG
48397: PUSH
48398: LD_INT 3
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48437: LD_ADDR_VAR 0 45
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 3
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: PUSH
48684: LD_INT 3
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: LD_INT 3
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 3
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 3
48746: NEG
48747: PUSH
48748: LD_INT 3
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48787: LD_ADDR_VAR 0 46
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: LD_INT 3
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 3
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 3
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49135: LD_ADDR_VAR 0 47
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49286: LD_ADDR_VAR 0 48
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49433: LD_ADDR_VAR 0 49
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49577: LD_ADDR_VAR 0 50
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49721: LD_ADDR_VAR 0 51
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49868: LD_ADDR_VAR 0 52
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50019: LD_ADDR_VAR 0 53
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 2
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50249: LD_ADDR_VAR 0 54
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50479: LD_ADDR_VAR 0 55
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50709: LD_ADDR_VAR 0 56
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50939: LD_ADDR_VAR 0 57
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51169: LD_ADDR_VAR 0 58
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51399: LD_ADDR_VAR 0 59
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51487: LD_ADDR_VAR 0 60
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51575: LD_ADDR_VAR 0 61
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51663: LD_ADDR_VAR 0 62
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51751: LD_ADDR_VAR 0 63
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51839: LD_ADDR_VAR 0 64
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: ST_TO_ADDR
// end ; 1 :
51927: GO 57824
51929: LD_INT 1
51931: DOUBLE
51932: EQUAL
51933: IFTRUE 51937
51935: GO 54560
51937: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51938: LD_ADDR_VAR 0 11
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 3
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 3
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: LIST
51981: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51982: LD_ADDR_VAR 0 12
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 3
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: LIST
52022: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52023: LD_ADDR_VAR 0 13
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 3
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: LIST
52062: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52063: LD_ADDR_VAR 0 14
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: LD_INT 3
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 3
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52104: LD_ADDR_VAR 0 15
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 3
52133: NEG
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: LIST
52147: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52148: LD_ADDR_VAR 0 16
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: LD_INT 3
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 3
52167: NEG
52168: PUSH
52169: LD_INT 2
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: LD_INT 3
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: LIST
52193: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52194: LD_ADDR_VAR 0 17
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52238: LD_ADDR_VAR 0 18
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 3
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: LIST
52278: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52279: LD_ADDR_VAR 0 19
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: LD_INT 3
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 3
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52319: LD_ADDR_VAR 0 20
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: LD_INT 3
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 3
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52360: LD_ADDR_VAR 0 21
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52404: LD_ADDR_VAR 0 22
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: LD_INT 3
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 3
52423: NEG
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: LD_INT 3
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52450: LD_ADDR_VAR 0 23
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 4
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: LIST
52493: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52494: LD_ADDR_VAR 0 24
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 3
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 4
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52535: LD_ADDR_VAR 0 25
52539: PUSH
52540: LD_INT 3
52542: PUSH
52543: LD_INT 3
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 4
52552: PUSH
52553: LD_INT 3
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: LD_INT 4
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52575: LD_ADDR_VAR 0 26
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 3
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 4
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 3
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: LIST
52615: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52616: LD_ADDR_VAR 0 27
52620: PUSH
52621: LD_INT 3
52623: NEG
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 3
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 4
52645: NEG
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52660: LD_ADDR_VAR 0 28
52664: PUSH
52665: LD_INT 3
52667: NEG
52668: PUSH
52669: LD_INT 3
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 3
52679: NEG
52680: PUSH
52681: LD_INT 4
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 4
52691: NEG
52692: PUSH
52693: LD_INT 3
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52706: LD_ADDR_VAR 0 29
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 4
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 4
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 5
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 5
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 4
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 6
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 6
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 5
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52861: LD_ADDR_VAR 0 30
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 4
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 4
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 4
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 5
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 5
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 5
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 6
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 6
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53004: LD_ADDR_VAR 0 31
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 4
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 4
53051: PUSH
53052: LD_INT 4
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: LD_INT 4
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 5
53071: PUSH
53072: LD_INT 4
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 5
53081: PUSH
53082: LD_INT 5
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 4
53091: PUSH
53092: LD_INT 5
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 6
53101: PUSH
53102: LD_INT 5
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 6
53111: PUSH
53112: LD_INT 6
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 5
53121: PUSH
53122: LD_INT 6
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53143: LD_ADDR_VAR 0 32
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 4
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 4
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 3
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 5
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 5
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 4
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 6
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 6
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 5
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53286: LD_ADDR_VAR 0 33
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 3
53304: NEG
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 3
53327: NEG
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 4
53338: NEG
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 4
53349: NEG
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 4
53361: NEG
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 5
53372: NEG
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 5
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 5
53395: NEG
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 6
53406: NEG
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 6
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53441: LD_ADDR_VAR 0 34
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 3
53472: NEG
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: LD_INT 4
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 4
53496: NEG
53497: PUSH
53498: LD_INT 3
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 4
53508: NEG
53509: PUSH
53510: LD_INT 4
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 4
53520: NEG
53521: PUSH
53522: LD_INT 5
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 5
53532: NEG
53533: PUSH
53534: LD_INT 4
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 5
53544: NEG
53545: PUSH
53546: LD_INT 5
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 5
53556: NEG
53557: PUSH
53558: LD_INT 6
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 6
53568: NEG
53569: PUSH
53570: LD_INT 5
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 6
53580: NEG
53581: PUSH
53582: LD_INT 6
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53604: LD_ADDR_VAR 0 41
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: LIST
53647: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53648: LD_ADDR_VAR 0 42
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53689: LD_ADDR_VAR 0 43
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53729: LD_ADDR_VAR 0 44
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 3
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: LIST
53769: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53770: LD_ADDR_VAR 0 45
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: NEG
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: LIST
53813: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53814: LD_ADDR_VAR 0 46
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: LD_INT 3
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53860: LD_ADDR_VAR 0 47
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: LD_INT 3
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 3
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53893: LD_ADDR_VAR 0 48
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53924: LD_ADDR_VAR 0 49
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53953: LD_ADDR_VAR 0 50
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: LD_INT 3
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: LD_INT 3
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53982: LD_ADDR_VAR 0 51
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54013: LD_ADDR_VAR 0 52
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 3
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54046: LD_ADDR_VAR 0 53
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 3
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: LIST
54089: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54090: LD_ADDR_VAR 0 54
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 3
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 3
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54131: LD_ADDR_VAR 0 55
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 3
54148: PUSH
54149: LD_INT 3
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: LIST
54170: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54171: LD_ADDR_VAR 0 56
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 3
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: LIST
54211: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54212: LD_ADDR_VAR 0 57
54216: PUSH
54217: LD_INT 2
54219: NEG
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 3
54230: NEG
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 3
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54256: LD_ADDR_VAR 0 58
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: LD_INT 3
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 3
54287: NEG
54288: PUSH
54289: LD_INT 3
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54302: LD_ADDR_VAR 0 59
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: LIST
54345: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54346: LD_ADDR_VAR 0 60
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54387: LD_ADDR_VAR 0 61
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54427: LD_ADDR_VAR 0 62
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: LIST
54467: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54468: LD_ADDR_VAR 0 63
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54512: LD_ADDR_VAR 0 64
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: ST_TO_ADDR
// end ; 2 :
54558: GO 57824
54560: LD_INT 2
54562: DOUBLE
54563: EQUAL
54564: IFTRUE 54568
54566: GO 57823
54568: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54569: LD_ADDR_VAR 0 29
54573: PUSH
54574: LD_INT 4
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 4
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 5
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 5
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 4
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 3
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 3
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 3
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 5
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: LD_INT 3
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: PUSH
54680: LD_INT 2
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 4
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 4
54699: PUSH
54700: LD_INT 4
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: LD_INT 4
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 4
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: LD_INT 4
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 4
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 3
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 4
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: LD_INT 5
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: LD_INT 5
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 4
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: LD_INT 3
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: LD_INT 5
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: LD_INT 3
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 3
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 3
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 4
54908: NEG
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 4
54919: NEG
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 4
54931: NEG
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 4
54954: NEG
54955: PUSH
54956: LD_INT 4
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 4
54966: NEG
54967: PUSH
54968: LD_INT 5
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 3
54978: NEG
54979: PUSH
54980: LD_INT 4
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: LD_INT 3
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 4
55002: NEG
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 5
55014: NEG
55015: PUSH
55016: LD_INT 4
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 5
55026: NEG
55027: PUSH
55028: LD_INT 5
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: NEG
55039: PUSH
55040: LD_INT 5
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 5
55050: NEG
55051: PUSH
55052: LD_INT 3
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55107: LD_ADDR_VAR 0 30
55111: PUSH
55112: LD_INT 4
55114: PUSH
55115: LD_INT 4
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 4
55124: PUSH
55125: LD_INT 3
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 5
55134: PUSH
55135: LD_INT 4
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 5
55144: PUSH
55145: LD_INT 5
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 4
55154: PUSH
55155: LD_INT 5
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 3
55164: PUSH
55165: LD_INT 4
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 5
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 3
55194: PUSH
55195: LD_INT 5
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 3
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 3
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 4
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 4
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 4
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 4
55297: NEG
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 4
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 3
55331: NEG
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 4
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 5
55353: NEG
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 5
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 5
55376: NEG
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: NEG
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 3
55399: NEG
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 3
55411: NEG
55412: PUSH
55413: LD_INT 4
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 2
55423: NEG
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 4
55459: NEG
55460: PUSH
55461: LD_INT 3
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 4
55471: NEG
55472: PUSH
55473: LD_INT 4
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: LD_INT 4
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 4
55495: NEG
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 4
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 5
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 4
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 4
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: LD_INT 5
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 5
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55654: LD_ADDR_VAR 0 31
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 4
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 4
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 5
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 5
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 3
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: NEG
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 4
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 4
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 4
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 4
55856: NEG
55857: PUSH
55858: LD_INT 4
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 4
55868: NEG
55869: PUSH
55870: LD_INT 5
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 3
55880: NEG
55881: PUSH
55882: LD_INT 4
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: LD_INT 3
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 4
55904: NEG
55905: PUSH
55906: LD_INT 3
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 5
55916: NEG
55917: PUSH
55918: LD_INT 4
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 5
55928: NEG
55929: PUSH
55930: LD_INT 5
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 3
55940: NEG
55941: PUSH
55942: LD_INT 5
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 5
55952: NEG
55953: PUSH
55954: LD_INT 3
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 3
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 4
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 3
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 3
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 4
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: LD_INT 4
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 4
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 4
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 5
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 5
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 4
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 3
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 5
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56204: LD_ADDR_VAR 0 32
56208: PUSH
56209: LD_INT 4
56211: NEG
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 4
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: NEG
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 3
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 4
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 5
56267: NEG
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 5
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 5
56290: NEG
56291: PUSH
56292: LD_INT 2
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 3
56313: NEG
56314: PUSH
56315: LD_INT 3
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: LD_INT 4
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 3
56361: NEG
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 4
56373: NEG
56374: PUSH
56375: LD_INT 3
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 4
56385: NEG
56386: PUSH
56387: LD_INT 4
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: LD_INT 4
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 4
56409: NEG
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 4
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 5
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 4
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 3
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 4
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: LD_INT 5
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 5
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 3
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 4
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 4
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 4
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 4
56616: PUSH
56617: LD_INT 4
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 4
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 5
56636: PUSH
56637: LD_INT 4
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 5
56646: PUSH
56647: LD_INT 5
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 4
56656: PUSH
56657: LD_INT 5
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 3
56666: PUSH
56667: LD_INT 4
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 3
56676: PUSH
56677: LD_INT 3
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 5
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 3
56696: PUSH
56697: LD_INT 5
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56751: LD_ADDR_VAR 0 33
56755: PUSH
56756: LD_INT 4
56758: NEG
56759: PUSH
56760: LD_INT 4
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 4
56770: NEG
56771: PUSH
56772: LD_INT 5
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: LD_INT 4
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: NEG
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 4
56806: NEG
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 5
56818: NEG
56819: PUSH
56820: LD_INT 4
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 5
56830: NEG
56831: PUSH
56832: LD_INT 5
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: LD_INT 5
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 5
56854: NEG
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 4
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: LD_INT 3
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: LD_INT 3
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 4
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 4
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 4
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 5
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 5
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 4
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 5
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 4
57081: PUSH
57082: LD_INT 3
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 4
57091: PUSH
57092: LD_INT 4
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: LD_INT 4
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 4
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: LD_INT 4
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 4
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 4
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: LD_INT 5
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 5
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: LD_INT 4
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: LD_INT 5
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: LD_INT 3
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57289: LD_ADDR_VAR 0 34
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 4
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 5
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 4
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 3
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 3
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: LD_INT 4
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 5
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: LD_INT 3
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: LD_INT 5
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 3
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 4
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 4
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 4
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 4
57491: PUSH
57492: LD_INT 4
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 4
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 5
57511: PUSH
57512: LD_INT 4
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 5
57521: PUSH
57522: LD_INT 5
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 4
57531: PUSH
57532: LD_INT 5
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 3
57541: PUSH
57542: LD_INT 4
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 3
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 5
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: LD_INT 5
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 3
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 4
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 4
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: LD_INT 4
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 4
57674: NEG
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 4
57685: NEG
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 4
57719: NEG
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 5
57730: NEG
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 5
57741: NEG
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 5
57753: NEG
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: NEG
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: ST_TO_ADDR
// end ; end ;
57821: GO 57824
57823: POP
// case btype of b_depot , b_warehouse :
57824: LD_VAR 0 1
57828: PUSH
57829: LD_INT 0
57831: DOUBLE
57832: EQUAL
57833: IFTRUE 57843
57835: LD_INT 1
57837: DOUBLE
57838: EQUAL
57839: IFTRUE 57843
57841: GO 58044
57843: POP
// case nation of nation_american :
57844: LD_VAR 0 5
57848: PUSH
57849: LD_INT 1
57851: DOUBLE
57852: EQUAL
57853: IFTRUE 57857
57855: GO 57913
57857: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57858: LD_ADDR_VAR 0 9
57862: PUSH
57863: LD_VAR 0 11
57867: PUSH
57868: LD_VAR 0 12
57872: PUSH
57873: LD_VAR 0 13
57877: PUSH
57878: LD_VAR 0 14
57882: PUSH
57883: LD_VAR 0 15
57887: PUSH
57888: LD_VAR 0 16
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: PUSH
57901: LD_VAR 0 4
57905: PUSH
57906: LD_INT 1
57908: PLUS
57909: ARRAY
57910: ST_TO_ADDR
57911: GO 58042
57913: LD_INT 2
57915: DOUBLE
57916: EQUAL
57917: IFTRUE 57921
57919: GO 57977
57921: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57922: LD_ADDR_VAR 0 9
57926: PUSH
57927: LD_VAR 0 17
57931: PUSH
57932: LD_VAR 0 18
57936: PUSH
57937: LD_VAR 0 19
57941: PUSH
57942: LD_VAR 0 20
57946: PUSH
57947: LD_VAR 0 21
57951: PUSH
57952: LD_VAR 0 22
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: PUSH
57965: LD_VAR 0 4
57969: PUSH
57970: LD_INT 1
57972: PLUS
57973: ARRAY
57974: ST_TO_ADDR
57975: GO 58042
57977: LD_INT 3
57979: DOUBLE
57980: EQUAL
57981: IFTRUE 57985
57983: GO 58041
57985: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57986: LD_ADDR_VAR 0 9
57990: PUSH
57991: LD_VAR 0 23
57995: PUSH
57996: LD_VAR 0 24
58000: PUSH
58001: LD_VAR 0 25
58005: PUSH
58006: LD_VAR 0 26
58010: PUSH
58011: LD_VAR 0 27
58015: PUSH
58016: LD_VAR 0 28
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: PUSH
58029: LD_VAR 0 4
58033: PUSH
58034: LD_INT 1
58036: PLUS
58037: ARRAY
58038: ST_TO_ADDR
58039: GO 58042
58041: POP
58042: GO 58597
58044: LD_INT 2
58046: DOUBLE
58047: EQUAL
58048: IFTRUE 58058
58050: LD_INT 3
58052: DOUBLE
58053: EQUAL
58054: IFTRUE 58058
58056: GO 58114
58058: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58059: LD_ADDR_VAR 0 9
58063: PUSH
58064: LD_VAR 0 29
58068: PUSH
58069: LD_VAR 0 30
58073: PUSH
58074: LD_VAR 0 31
58078: PUSH
58079: LD_VAR 0 32
58083: PUSH
58084: LD_VAR 0 33
58088: PUSH
58089: LD_VAR 0 34
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: PUSH
58102: LD_VAR 0 4
58106: PUSH
58107: LD_INT 1
58109: PLUS
58110: ARRAY
58111: ST_TO_ADDR
58112: GO 58597
58114: LD_INT 16
58116: DOUBLE
58117: EQUAL
58118: IFTRUE 58176
58120: LD_INT 17
58122: DOUBLE
58123: EQUAL
58124: IFTRUE 58176
58126: LD_INT 18
58128: DOUBLE
58129: EQUAL
58130: IFTRUE 58176
58132: LD_INT 19
58134: DOUBLE
58135: EQUAL
58136: IFTRUE 58176
58138: LD_INT 22
58140: DOUBLE
58141: EQUAL
58142: IFTRUE 58176
58144: LD_INT 20
58146: DOUBLE
58147: EQUAL
58148: IFTRUE 58176
58150: LD_INT 21
58152: DOUBLE
58153: EQUAL
58154: IFTRUE 58176
58156: LD_INT 23
58158: DOUBLE
58159: EQUAL
58160: IFTRUE 58176
58162: LD_INT 24
58164: DOUBLE
58165: EQUAL
58166: IFTRUE 58176
58168: LD_INT 25
58170: DOUBLE
58171: EQUAL
58172: IFTRUE 58176
58174: GO 58232
58176: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58177: LD_ADDR_VAR 0 9
58181: PUSH
58182: LD_VAR 0 35
58186: PUSH
58187: LD_VAR 0 36
58191: PUSH
58192: LD_VAR 0 37
58196: PUSH
58197: LD_VAR 0 38
58201: PUSH
58202: LD_VAR 0 39
58206: PUSH
58207: LD_VAR 0 40
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: PUSH
58220: LD_VAR 0 4
58224: PUSH
58225: LD_INT 1
58227: PLUS
58228: ARRAY
58229: ST_TO_ADDR
58230: GO 58597
58232: LD_INT 6
58234: DOUBLE
58235: EQUAL
58236: IFTRUE 58288
58238: LD_INT 7
58240: DOUBLE
58241: EQUAL
58242: IFTRUE 58288
58244: LD_INT 8
58246: DOUBLE
58247: EQUAL
58248: IFTRUE 58288
58250: LD_INT 13
58252: DOUBLE
58253: EQUAL
58254: IFTRUE 58288
58256: LD_INT 12
58258: DOUBLE
58259: EQUAL
58260: IFTRUE 58288
58262: LD_INT 15
58264: DOUBLE
58265: EQUAL
58266: IFTRUE 58288
58268: LD_INT 11
58270: DOUBLE
58271: EQUAL
58272: IFTRUE 58288
58274: LD_INT 14
58276: DOUBLE
58277: EQUAL
58278: IFTRUE 58288
58280: LD_INT 10
58282: DOUBLE
58283: EQUAL
58284: IFTRUE 58288
58286: GO 58344
58288: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58289: LD_ADDR_VAR 0 9
58293: PUSH
58294: LD_VAR 0 41
58298: PUSH
58299: LD_VAR 0 42
58303: PUSH
58304: LD_VAR 0 43
58308: PUSH
58309: LD_VAR 0 44
58313: PUSH
58314: LD_VAR 0 45
58318: PUSH
58319: LD_VAR 0 46
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: PUSH
58332: LD_VAR 0 4
58336: PUSH
58337: LD_INT 1
58339: PLUS
58340: ARRAY
58341: ST_TO_ADDR
58342: GO 58597
58344: LD_INT 36
58346: DOUBLE
58347: EQUAL
58348: IFTRUE 58352
58350: GO 58408
58352: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58353: LD_ADDR_VAR 0 9
58357: PUSH
58358: LD_VAR 0 47
58362: PUSH
58363: LD_VAR 0 48
58367: PUSH
58368: LD_VAR 0 49
58372: PUSH
58373: LD_VAR 0 50
58377: PUSH
58378: LD_VAR 0 51
58382: PUSH
58383: LD_VAR 0 52
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: PUSH
58396: LD_VAR 0 4
58400: PUSH
58401: LD_INT 1
58403: PLUS
58404: ARRAY
58405: ST_TO_ADDR
58406: GO 58597
58408: LD_INT 4
58410: DOUBLE
58411: EQUAL
58412: IFTRUE 58434
58414: LD_INT 5
58416: DOUBLE
58417: EQUAL
58418: IFTRUE 58434
58420: LD_INT 34
58422: DOUBLE
58423: EQUAL
58424: IFTRUE 58434
58426: LD_INT 37
58428: DOUBLE
58429: EQUAL
58430: IFTRUE 58434
58432: GO 58490
58434: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58435: LD_ADDR_VAR 0 9
58439: PUSH
58440: LD_VAR 0 53
58444: PUSH
58445: LD_VAR 0 54
58449: PUSH
58450: LD_VAR 0 55
58454: PUSH
58455: LD_VAR 0 56
58459: PUSH
58460: LD_VAR 0 57
58464: PUSH
58465: LD_VAR 0 58
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: PUSH
58478: LD_VAR 0 4
58482: PUSH
58483: LD_INT 1
58485: PLUS
58486: ARRAY
58487: ST_TO_ADDR
58488: GO 58597
58490: LD_INT 31
58492: DOUBLE
58493: EQUAL
58494: IFTRUE 58540
58496: LD_INT 32
58498: DOUBLE
58499: EQUAL
58500: IFTRUE 58540
58502: LD_INT 33
58504: DOUBLE
58505: EQUAL
58506: IFTRUE 58540
58508: LD_INT 27
58510: DOUBLE
58511: EQUAL
58512: IFTRUE 58540
58514: LD_INT 26
58516: DOUBLE
58517: EQUAL
58518: IFTRUE 58540
58520: LD_INT 28
58522: DOUBLE
58523: EQUAL
58524: IFTRUE 58540
58526: LD_INT 29
58528: DOUBLE
58529: EQUAL
58530: IFTRUE 58540
58532: LD_INT 30
58534: DOUBLE
58535: EQUAL
58536: IFTRUE 58540
58538: GO 58596
58540: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58541: LD_ADDR_VAR 0 9
58545: PUSH
58546: LD_VAR 0 59
58550: PUSH
58551: LD_VAR 0 60
58555: PUSH
58556: LD_VAR 0 61
58560: PUSH
58561: LD_VAR 0 62
58565: PUSH
58566: LD_VAR 0 63
58570: PUSH
58571: LD_VAR 0 64
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: PUSH
58584: LD_VAR 0 4
58588: PUSH
58589: LD_INT 1
58591: PLUS
58592: ARRAY
58593: ST_TO_ADDR
58594: GO 58597
58596: POP
// temp_list2 = [ ] ;
58597: LD_ADDR_VAR 0 10
58601: PUSH
58602: EMPTY
58603: ST_TO_ADDR
// for i in temp_list do
58604: LD_ADDR_VAR 0 8
58608: PUSH
58609: LD_VAR 0 9
58613: PUSH
58614: FOR_IN
58615: IFFALSE 58667
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58617: LD_ADDR_VAR 0 10
58621: PUSH
58622: LD_VAR 0 10
58626: PUSH
58627: LD_VAR 0 8
58631: PUSH
58632: LD_INT 1
58634: ARRAY
58635: PUSH
58636: LD_VAR 0 2
58640: PLUS
58641: PUSH
58642: LD_VAR 0 8
58646: PUSH
58647: LD_INT 2
58649: ARRAY
58650: PUSH
58651: LD_VAR 0 3
58655: PLUS
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: ADD
58664: ST_TO_ADDR
58665: GO 58614
58667: POP
58668: POP
// result = temp_list2 ;
58669: LD_ADDR_VAR 0 7
58673: PUSH
58674: LD_VAR 0 10
58678: ST_TO_ADDR
// end ;
58679: LD_VAR 0 7
58683: RET
// export function EnemyInRange ( unit , dist ) ; begin
58684: LD_INT 0
58686: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58687: LD_ADDR_VAR 0 3
58691: PUSH
58692: LD_VAR 0 1
58696: PPUSH
58697: CALL_OW 255
58701: PPUSH
58702: LD_VAR 0 1
58706: PPUSH
58707: CALL_OW 250
58711: PPUSH
58712: LD_VAR 0 1
58716: PPUSH
58717: CALL_OW 251
58721: PPUSH
58722: LD_VAR 0 2
58726: PPUSH
58727: CALL 32080 0 4
58731: PUSH
58732: LD_INT 4
58734: ARRAY
58735: ST_TO_ADDR
// end ;
58736: LD_VAR 0 3
58740: RET
// export function PlayerSeeMe ( unit ) ; begin
58741: LD_INT 0
58743: PPUSH
// result := See ( your_side , unit ) ;
58744: LD_ADDR_VAR 0 2
58748: PUSH
58749: LD_OWVAR 2
58753: PPUSH
58754: LD_VAR 0 1
58758: PPUSH
58759: CALL_OW 292
58763: ST_TO_ADDR
// end ;
58764: LD_VAR 0 2
58768: RET
// export function ReverseDir ( unit ) ; begin
58769: LD_INT 0
58771: PPUSH
// if not unit then
58772: LD_VAR 0 1
58776: NOT
58777: IFFALSE 58781
// exit ;
58779: GO 58804
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58781: LD_ADDR_VAR 0 2
58785: PUSH
58786: LD_VAR 0 1
58790: PPUSH
58791: CALL_OW 254
58795: PUSH
58796: LD_INT 3
58798: PLUS
58799: PUSH
58800: LD_INT 6
58802: MOD
58803: ST_TO_ADDR
// end ;
58804: LD_VAR 0 2
58808: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58809: LD_INT 0
58811: PPUSH
58812: PPUSH
58813: PPUSH
58814: PPUSH
58815: PPUSH
// if not hexes then
58816: LD_VAR 0 2
58820: NOT
58821: IFFALSE 58825
// exit ;
58823: GO 58973
// dist := 9999 ;
58825: LD_ADDR_VAR 0 5
58829: PUSH
58830: LD_INT 9999
58832: ST_TO_ADDR
// for i = 1 to hexes do
58833: LD_ADDR_VAR 0 4
58837: PUSH
58838: DOUBLE
58839: LD_INT 1
58841: DEC
58842: ST_TO_ADDR
58843: LD_VAR 0 2
58847: PUSH
58848: FOR_TO
58849: IFFALSE 58961
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58851: LD_VAR 0 1
58855: PPUSH
58856: LD_VAR 0 2
58860: PUSH
58861: LD_VAR 0 4
58865: ARRAY
58866: PUSH
58867: LD_INT 1
58869: ARRAY
58870: PPUSH
58871: LD_VAR 0 2
58875: PUSH
58876: LD_VAR 0 4
58880: ARRAY
58881: PUSH
58882: LD_INT 2
58884: ARRAY
58885: PPUSH
58886: CALL_OW 297
58890: PUSH
58891: LD_VAR 0 5
58895: LESS
58896: IFFALSE 58959
// begin hex := hexes [ i ] ;
58898: LD_ADDR_VAR 0 7
58902: PUSH
58903: LD_VAR 0 2
58907: PUSH
58908: LD_VAR 0 4
58912: ARRAY
58913: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58914: LD_ADDR_VAR 0 5
58918: PUSH
58919: LD_VAR 0 1
58923: PPUSH
58924: LD_VAR 0 2
58928: PUSH
58929: LD_VAR 0 4
58933: ARRAY
58934: PUSH
58935: LD_INT 1
58937: ARRAY
58938: PPUSH
58939: LD_VAR 0 2
58943: PUSH
58944: LD_VAR 0 4
58948: ARRAY
58949: PUSH
58950: LD_INT 2
58952: ARRAY
58953: PPUSH
58954: CALL_OW 297
58958: ST_TO_ADDR
// end ; end ;
58959: GO 58848
58961: POP
58962: POP
// result := hex ;
58963: LD_ADDR_VAR 0 3
58967: PUSH
58968: LD_VAR 0 7
58972: ST_TO_ADDR
// end ;
58973: LD_VAR 0 3
58977: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58978: LD_INT 0
58980: PPUSH
58981: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58982: LD_VAR 0 1
58986: NOT
58987: PUSH
58988: LD_VAR 0 1
58992: PUSH
58993: LD_INT 21
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 23
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PPUSH
59017: CALL_OW 69
59021: IN
59022: NOT
59023: OR
59024: IFFALSE 59028
// exit ;
59026: GO 59075
// for i = 1 to 3 do
59028: LD_ADDR_VAR 0 3
59032: PUSH
59033: DOUBLE
59034: LD_INT 1
59036: DEC
59037: ST_TO_ADDR
59038: LD_INT 3
59040: PUSH
59041: FOR_TO
59042: IFFALSE 59073
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59044: LD_VAR 0 1
59048: PPUSH
59049: CALL_OW 250
59053: PPUSH
59054: LD_VAR 0 1
59058: PPUSH
59059: CALL_OW 251
59063: PPUSH
59064: LD_INT 1
59066: PPUSH
59067: CALL_OW 453
59071: GO 59041
59073: POP
59074: POP
// end ;
59075: LD_VAR 0 2
59079: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59080: LD_INT 0
59082: PPUSH
59083: PPUSH
59084: PPUSH
59085: PPUSH
59086: PPUSH
59087: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59088: LD_VAR 0 1
59092: NOT
59093: PUSH
59094: LD_VAR 0 2
59098: NOT
59099: OR
59100: PUSH
59101: LD_VAR 0 1
59105: PPUSH
59106: CALL_OW 314
59110: OR
59111: IFFALSE 59115
// exit ;
59113: GO 59556
// x := GetX ( enemy_unit ) ;
59115: LD_ADDR_VAR 0 7
59119: PUSH
59120: LD_VAR 0 2
59124: PPUSH
59125: CALL_OW 250
59129: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59130: LD_ADDR_VAR 0 8
59134: PUSH
59135: LD_VAR 0 2
59139: PPUSH
59140: CALL_OW 251
59144: ST_TO_ADDR
// if not x or not y then
59145: LD_VAR 0 7
59149: NOT
59150: PUSH
59151: LD_VAR 0 8
59155: NOT
59156: OR
59157: IFFALSE 59161
// exit ;
59159: GO 59556
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59161: LD_ADDR_VAR 0 6
59165: PUSH
59166: LD_VAR 0 7
59170: PPUSH
59171: LD_INT 0
59173: PPUSH
59174: LD_INT 4
59176: PPUSH
59177: CALL_OW 272
59181: PUSH
59182: LD_VAR 0 8
59186: PPUSH
59187: LD_INT 0
59189: PPUSH
59190: LD_INT 4
59192: PPUSH
59193: CALL_OW 273
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_VAR 0 7
59206: PPUSH
59207: LD_INT 1
59209: PPUSH
59210: LD_INT 4
59212: PPUSH
59213: CALL_OW 272
59217: PUSH
59218: LD_VAR 0 8
59222: PPUSH
59223: LD_INT 1
59225: PPUSH
59226: LD_INT 4
59228: PPUSH
59229: CALL_OW 273
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_VAR 0 7
59242: PPUSH
59243: LD_INT 2
59245: PPUSH
59246: LD_INT 4
59248: PPUSH
59249: CALL_OW 272
59253: PUSH
59254: LD_VAR 0 8
59258: PPUSH
59259: LD_INT 2
59261: PPUSH
59262: LD_INT 4
59264: PPUSH
59265: CALL_OW 273
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_VAR 0 7
59278: PPUSH
59279: LD_INT 3
59281: PPUSH
59282: LD_INT 4
59284: PPUSH
59285: CALL_OW 272
59289: PUSH
59290: LD_VAR 0 8
59294: PPUSH
59295: LD_INT 3
59297: PPUSH
59298: LD_INT 4
59300: PPUSH
59301: CALL_OW 273
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_VAR 0 7
59314: PPUSH
59315: LD_INT 4
59317: PPUSH
59318: LD_INT 4
59320: PPUSH
59321: CALL_OW 272
59325: PUSH
59326: LD_VAR 0 8
59330: PPUSH
59331: LD_INT 4
59333: PPUSH
59334: LD_INT 4
59336: PPUSH
59337: CALL_OW 273
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_VAR 0 7
59350: PPUSH
59351: LD_INT 5
59353: PPUSH
59354: LD_INT 4
59356: PPUSH
59357: CALL_OW 272
59361: PUSH
59362: LD_VAR 0 8
59366: PPUSH
59367: LD_INT 5
59369: PPUSH
59370: LD_INT 4
59372: PPUSH
59373: CALL_OW 273
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: ST_TO_ADDR
// for i = tmp downto 1 do
59390: LD_ADDR_VAR 0 4
59394: PUSH
59395: DOUBLE
59396: LD_VAR 0 6
59400: INC
59401: ST_TO_ADDR
59402: LD_INT 1
59404: PUSH
59405: FOR_DOWNTO
59406: IFFALSE 59507
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59408: LD_VAR 0 6
59412: PUSH
59413: LD_VAR 0 4
59417: ARRAY
59418: PUSH
59419: LD_INT 1
59421: ARRAY
59422: PPUSH
59423: LD_VAR 0 6
59427: PUSH
59428: LD_VAR 0 4
59432: ARRAY
59433: PUSH
59434: LD_INT 2
59436: ARRAY
59437: PPUSH
59438: CALL_OW 488
59442: NOT
59443: PUSH
59444: LD_VAR 0 6
59448: PUSH
59449: LD_VAR 0 4
59453: ARRAY
59454: PUSH
59455: LD_INT 1
59457: ARRAY
59458: PPUSH
59459: LD_VAR 0 6
59463: PUSH
59464: LD_VAR 0 4
59468: ARRAY
59469: PUSH
59470: LD_INT 2
59472: ARRAY
59473: PPUSH
59474: CALL_OW 428
59478: PUSH
59479: LD_INT 0
59481: NONEQUAL
59482: OR
59483: IFFALSE 59505
// tmp := Delete ( tmp , i ) ;
59485: LD_ADDR_VAR 0 6
59489: PUSH
59490: LD_VAR 0 6
59494: PPUSH
59495: LD_VAR 0 4
59499: PPUSH
59500: CALL_OW 3
59504: ST_TO_ADDR
59505: GO 59405
59507: POP
59508: POP
// j := GetClosestHex ( unit , tmp ) ;
59509: LD_ADDR_VAR 0 5
59513: PUSH
59514: LD_VAR 0 1
59518: PPUSH
59519: LD_VAR 0 6
59523: PPUSH
59524: CALL 58809 0 2
59528: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59529: LD_VAR 0 1
59533: PPUSH
59534: LD_VAR 0 5
59538: PUSH
59539: LD_INT 1
59541: ARRAY
59542: PPUSH
59543: LD_VAR 0 5
59547: PUSH
59548: LD_INT 2
59550: ARRAY
59551: PPUSH
59552: CALL_OW 111
// end ;
59556: LD_VAR 0 3
59560: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59561: LD_INT 0
59563: PPUSH
59564: PPUSH
59565: PPUSH
// uc_side = 0 ;
59566: LD_ADDR_OWVAR 20
59570: PUSH
59571: LD_INT 0
59573: ST_TO_ADDR
// uc_nation = 0 ;
59574: LD_ADDR_OWVAR 21
59578: PUSH
59579: LD_INT 0
59581: ST_TO_ADDR
// InitHc_All ( ) ;
59582: CALL_OW 584
// InitVc ;
59586: CALL_OW 20
// if mastodonts then
59590: LD_VAR 0 6
59594: IFFALSE 59661
// for i = 1 to mastodonts do
59596: LD_ADDR_VAR 0 11
59600: PUSH
59601: DOUBLE
59602: LD_INT 1
59604: DEC
59605: ST_TO_ADDR
59606: LD_VAR 0 6
59610: PUSH
59611: FOR_TO
59612: IFFALSE 59659
// begin vc_chassis := 31 ;
59614: LD_ADDR_OWVAR 37
59618: PUSH
59619: LD_INT 31
59621: ST_TO_ADDR
// vc_control := control_rider ;
59622: LD_ADDR_OWVAR 38
59626: PUSH
59627: LD_INT 4
59629: ST_TO_ADDR
// animal := CreateVehicle ;
59630: LD_ADDR_VAR 0 12
59634: PUSH
59635: CALL_OW 45
59639: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59640: LD_VAR 0 12
59644: PPUSH
59645: LD_VAR 0 8
59649: PPUSH
59650: LD_INT 0
59652: PPUSH
59653: CALL 61849 0 3
// end ;
59657: GO 59611
59659: POP
59660: POP
// if horses then
59661: LD_VAR 0 5
59665: IFFALSE 59732
// for i = 1 to horses do
59667: LD_ADDR_VAR 0 11
59671: PUSH
59672: DOUBLE
59673: LD_INT 1
59675: DEC
59676: ST_TO_ADDR
59677: LD_VAR 0 5
59681: PUSH
59682: FOR_TO
59683: IFFALSE 59730
// begin hc_class := 21 ;
59685: LD_ADDR_OWVAR 28
59689: PUSH
59690: LD_INT 21
59692: ST_TO_ADDR
// hc_gallery :=  ;
59693: LD_ADDR_OWVAR 33
59697: PUSH
59698: LD_STRING 
59700: ST_TO_ADDR
// animal := CreateHuman ;
59701: LD_ADDR_VAR 0 12
59705: PUSH
59706: CALL_OW 44
59710: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59711: LD_VAR 0 12
59715: PPUSH
59716: LD_VAR 0 8
59720: PPUSH
59721: LD_INT 0
59723: PPUSH
59724: CALL 61849 0 3
// end ;
59728: GO 59682
59730: POP
59731: POP
// if birds then
59732: LD_VAR 0 1
59736: IFFALSE 59803
// for i = 1 to birds do
59738: LD_ADDR_VAR 0 11
59742: PUSH
59743: DOUBLE
59744: LD_INT 1
59746: DEC
59747: ST_TO_ADDR
59748: LD_VAR 0 1
59752: PUSH
59753: FOR_TO
59754: IFFALSE 59801
// begin hc_class = 18 ;
59756: LD_ADDR_OWVAR 28
59760: PUSH
59761: LD_INT 18
59763: ST_TO_ADDR
// hc_gallery =  ;
59764: LD_ADDR_OWVAR 33
59768: PUSH
59769: LD_STRING 
59771: ST_TO_ADDR
// animal := CreateHuman ;
59772: LD_ADDR_VAR 0 12
59776: PUSH
59777: CALL_OW 44
59781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59782: LD_VAR 0 12
59786: PPUSH
59787: LD_VAR 0 8
59791: PPUSH
59792: LD_INT 0
59794: PPUSH
59795: CALL 61849 0 3
// end ;
59799: GO 59753
59801: POP
59802: POP
// if tigers then
59803: LD_VAR 0 2
59807: IFFALSE 59891
// for i = 1 to tigers do
59809: LD_ADDR_VAR 0 11
59813: PUSH
59814: DOUBLE
59815: LD_INT 1
59817: DEC
59818: ST_TO_ADDR
59819: LD_VAR 0 2
59823: PUSH
59824: FOR_TO
59825: IFFALSE 59889
// begin hc_class = class_tiger ;
59827: LD_ADDR_OWVAR 28
59831: PUSH
59832: LD_INT 14
59834: ST_TO_ADDR
// hc_gallery =  ;
59835: LD_ADDR_OWVAR 33
59839: PUSH
59840: LD_STRING 
59842: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59843: LD_ADDR_OWVAR 35
59847: PUSH
59848: LD_INT 7
59850: NEG
59851: PPUSH
59852: LD_INT 7
59854: PPUSH
59855: CALL_OW 12
59859: ST_TO_ADDR
// animal := CreateHuman ;
59860: LD_ADDR_VAR 0 12
59864: PUSH
59865: CALL_OW 44
59869: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59870: LD_VAR 0 12
59874: PPUSH
59875: LD_VAR 0 8
59879: PPUSH
59880: LD_INT 0
59882: PPUSH
59883: CALL 61849 0 3
// end ;
59887: GO 59824
59889: POP
59890: POP
// if apemans then
59891: LD_VAR 0 3
59895: IFFALSE 60018
// for i = 1 to apemans do
59897: LD_ADDR_VAR 0 11
59901: PUSH
59902: DOUBLE
59903: LD_INT 1
59905: DEC
59906: ST_TO_ADDR
59907: LD_VAR 0 3
59911: PUSH
59912: FOR_TO
59913: IFFALSE 60016
// begin hc_class = class_apeman ;
59915: LD_ADDR_OWVAR 28
59919: PUSH
59920: LD_INT 12
59922: ST_TO_ADDR
// hc_gallery =  ;
59923: LD_ADDR_OWVAR 33
59927: PUSH
59928: LD_STRING 
59930: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59931: LD_ADDR_OWVAR 35
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PPUSH
59940: LD_INT 2
59942: PPUSH
59943: CALL_OW 12
59947: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59948: LD_ADDR_OWVAR 31
59952: PUSH
59953: LD_INT 1
59955: PPUSH
59956: LD_INT 3
59958: PPUSH
59959: CALL_OW 12
59963: PUSH
59964: LD_INT 1
59966: PPUSH
59967: LD_INT 3
59969: PPUSH
59970: CALL_OW 12
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: ST_TO_ADDR
// animal := CreateHuman ;
59987: LD_ADDR_VAR 0 12
59991: PUSH
59992: CALL_OW 44
59996: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59997: LD_VAR 0 12
60001: PPUSH
60002: LD_VAR 0 8
60006: PPUSH
60007: LD_INT 0
60009: PPUSH
60010: CALL 61849 0 3
// end ;
60014: GO 59912
60016: POP
60017: POP
// if enchidnas then
60018: LD_VAR 0 4
60022: IFFALSE 60089
// for i = 1 to enchidnas do
60024: LD_ADDR_VAR 0 11
60028: PUSH
60029: DOUBLE
60030: LD_INT 1
60032: DEC
60033: ST_TO_ADDR
60034: LD_VAR 0 4
60038: PUSH
60039: FOR_TO
60040: IFFALSE 60087
// begin hc_class = 13 ;
60042: LD_ADDR_OWVAR 28
60046: PUSH
60047: LD_INT 13
60049: ST_TO_ADDR
// hc_gallery =  ;
60050: LD_ADDR_OWVAR 33
60054: PUSH
60055: LD_STRING 
60057: ST_TO_ADDR
// animal := CreateHuman ;
60058: LD_ADDR_VAR 0 12
60062: PUSH
60063: CALL_OW 44
60067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60068: LD_VAR 0 12
60072: PPUSH
60073: LD_VAR 0 8
60077: PPUSH
60078: LD_INT 0
60080: PPUSH
60081: CALL 61849 0 3
// end ;
60085: GO 60039
60087: POP
60088: POP
// if fishes then
60089: LD_VAR 0 7
60093: IFFALSE 60160
// for i = 1 to fishes do
60095: LD_ADDR_VAR 0 11
60099: PUSH
60100: DOUBLE
60101: LD_INT 1
60103: DEC
60104: ST_TO_ADDR
60105: LD_VAR 0 7
60109: PUSH
60110: FOR_TO
60111: IFFALSE 60158
// begin hc_class = 20 ;
60113: LD_ADDR_OWVAR 28
60117: PUSH
60118: LD_INT 20
60120: ST_TO_ADDR
// hc_gallery =  ;
60121: LD_ADDR_OWVAR 33
60125: PUSH
60126: LD_STRING 
60128: ST_TO_ADDR
// animal := CreateHuman ;
60129: LD_ADDR_VAR 0 12
60133: PUSH
60134: CALL_OW 44
60138: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60139: LD_VAR 0 12
60143: PPUSH
60144: LD_VAR 0 9
60148: PPUSH
60149: LD_INT 0
60151: PPUSH
60152: CALL 61849 0 3
// end ;
60156: GO 60110
60158: POP
60159: POP
// end ;
60160: LD_VAR 0 10
60164: RET
// export function WantHeal ( sci , unit ) ; begin
60165: LD_INT 0
60167: PPUSH
// if GetTaskList ( sci ) > 0 then
60168: LD_VAR 0 1
60172: PPUSH
60173: CALL_OW 437
60177: PUSH
60178: LD_INT 0
60180: GREATER
60181: IFFALSE 60251
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60183: LD_VAR 0 1
60187: PPUSH
60188: CALL_OW 437
60192: PUSH
60193: LD_INT 1
60195: ARRAY
60196: PUSH
60197: LD_INT 1
60199: ARRAY
60200: PUSH
60201: LD_STRING l
60203: EQUAL
60204: PUSH
60205: LD_VAR 0 1
60209: PPUSH
60210: CALL_OW 437
60214: PUSH
60215: LD_INT 1
60217: ARRAY
60218: PUSH
60219: LD_INT 4
60221: ARRAY
60222: PUSH
60223: LD_VAR 0 2
60227: EQUAL
60228: AND
60229: IFFALSE 60241
// result := true else
60231: LD_ADDR_VAR 0 3
60235: PUSH
60236: LD_INT 1
60238: ST_TO_ADDR
60239: GO 60249
// result := false ;
60241: LD_ADDR_VAR 0 3
60245: PUSH
60246: LD_INT 0
60248: ST_TO_ADDR
// end else
60249: GO 60259
// result := false ;
60251: LD_ADDR_VAR 0 3
60255: PUSH
60256: LD_INT 0
60258: ST_TO_ADDR
// end ;
60259: LD_VAR 0 3
60263: RET
// export function HealTarget ( sci ) ; begin
60264: LD_INT 0
60266: PPUSH
// if not sci then
60267: LD_VAR 0 1
60271: NOT
60272: IFFALSE 60276
// exit ;
60274: GO 60341
// result := 0 ;
60276: LD_ADDR_VAR 0 2
60280: PUSH
60281: LD_INT 0
60283: ST_TO_ADDR
// if GetTaskList ( sci ) then
60284: LD_VAR 0 1
60288: PPUSH
60289: CALL_OW 437
60293: IFFALSE 60341
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60295: LD_VAR 0 1
60299: PPUSH
60300: CALL_OW 437
60304: PUSH
60305: LD_INT 1
60307: ARRAY
60308: PUSH
60309: LD_INT 1
60311: ARRAY
60312: PUSH
60313: LD_STRING l
60315: EQUAL
60316: IFFALSE 60341
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60318: LD_ADDR_VAR 0 2
60322: PUSH
60323: LD_VAR 0 1
60327: PPUSH
60328: CALL_OW 437
60332: PUSH
60333: LD_INT 1
60335: ARRAY
60336: PUSH
60337: LD_INT 4
60339: ARRAY
60340: ST_TO_ADDR
// end ;
60341: LD_VAR 0 2
60345: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60346: LD_INT 0
60348: PPUSH
60349: PPUSH
60350: PPUSH
60351: PPUSH
// if not base_units then
60352: LD_VAR 0 1
60356: NOT
60357: IFFALSE 60361
// exit ;
60359: GO 60448
// result := false ;
60361: LD_ADDR_VAR 0 2
60365: PUSH
60366: LD_INT 0
60368: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60369: LD_ADDR_VAR 0 5
60373: PUSH
60374: LD_VAR 0 1
60378: PPUSH
60379: LD_INT 21
60381: PUSH
60382: LD_INT 3
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PPUSH
60389: CALL_OW 72
60393: ST_TO_ADDR
// if not tmp then
60394: LD_VAR 0 5
60398: NOT
60399: IFFALSE 60403
// exit ;
60401: GO 60448
// for i in tmp do
60403: LD_ADDR_VAR 0 3
60407: PUSH
60408: LD_VAR 0 5
60412: PUSH
60413: FOR_IN
60414: IFFALSE 60446
// begin result := EnemyInRange ( i , 22 ) ;
60416: LD_ADDR_VAR 0 2
60420: PUSH
60421: LD_VAR 0 3
60425: PPUSH
60426: LD_INT 22
60428: PPUSH
60429: CALL 58684 0 2
60433: ST_TO_ADDR
// if result then
60434: LD_VAR 0 2
60438: IFFALSE 60444
// exit ;
60440: POP
60441: POP
60442: GO 60448
// end ;
60444: GO 60413
60446: POP
60447: POP
// end ;
60448: LD_VAR 0 2
60452: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60453: LD_INT 0
60455: PPUSH
60456: PPUSH
// if not units then
60457: LD_VAR 0 1
60461: NOT
60462: IFFALSE 60466
// exit ;
60464: GO 60536
// result := [ ] ;
60466: LD_ADDR_VAR 0 3
60470: PUSH
60471: EMPTY
60472: ST_TO_ADDR
// for i in units do
60473: LD_ADDR_VAR 0 4
60477: PUSH
60478: LD_VAR 0 1
60482: PUSH
60483: FOR_IN
60484: IFFALSE 60534
// if GetTag ( i ) = tag then
60486: LD_VAR 0 4
60490: PPUSH
60491: CALL_OW 110
60495: PUSH
60496: LD_VAR 0 2
60500: EQUAL
60501: IFFALSE 60532
// result := Replace ( result , result + 1 , i ) ;
60503: LD_ADDR_VAR 0 3
60507: PUSH
60508: LD_VAR 0 3
60512: PPUSH
60513: LD_VAR 0 3
60517: PUSH
60518: LD_INT 1
60520: PLUS
60521: PPUSH
60522: LD_VAR 0 4
60526: PPUSH
60527: CALL_OW 1
60531: ST_TO_ADDR
60532: GO 60483
60534: POP
60535: POP
// end ;
60536: LD_VAR 0 3
60540: RET
// export function IsDriver ( un ) ; begin
60541: LD_INT 0
60543: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60544: LD_ADDR_VAR 0 2
60548: PUSH
60549: LD_VAR 0 1
60553: PUSH
60554: LD_INT 55
60556: PUSH
60557: EMPTY
60558: LIST
60559: PPUSH
60560: CALL_OW 69
60564: IN
60565: ST_TO_ADDR
// end ;
60566: LD_VAR 0 2
60570: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60571: LD_INT 0
60573: PPUSH
60574: PPUSH
// list := [ ] ;
60575: LD_ADDR_VAR 0 5
60579: PUSH
60580: EMPTY
60581: ST_TO_ADDR
// case d of 0 :
60582: LD_VAR 0 3
60586: PUSH
60587: LD_INT 0
60589: DOUBLE
60590: EQUAL
60591: IFTRUE 60595
60593: GO 60728
60595: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60596: LD_ADDR_VAR 0 5
60600: PUSH
60601: LD_VAR 0 1
60605: PUSH
60606: LD_INT 4
60608: MINUS
60609: PUSH
60610: LD_VAR 0 2
60614: PUSH
60615: LD_INT 4
60617: MINUS
60618: PUSH
60619: LD_INT 2
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: PUSH
60627: LD_VAR 0 1
60631: PUSH
60632: LD_INT 3
60634: MINUS
60635: PUSH
60636: LD_VAR 0 2
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: PUSH
60649: LD_VAR 0 1
60653: PUSH
60654: LD_INT 4
60656: PLUS
60657: PUSH
60658: LD_VAR 0 2
60662: PUSH
60663: LD_INT 4
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: LIST
60670: PUSH
60671: LD_VAR 0 1
60675: PUSH
60676: LD_INT 3
60678: PLUS
60679: PUSH
60680: LD_VAR 0 2
60684: PUSH
60685: LD_INT 3
60687: PLUS
60688: PUSH
60689: LD_INT 5
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: PUSH
60697: LD_VAR 0 1
60701: PUSH
60702: LD_VAR 0 2
60706: PUSH
60707: LD_INT 4
60709: PLUS
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: ST_TO_ADDR
// end ; 1 :
60726: GO 61426
60728: LD_INT 1
60730: DOUBLE
60731: EQUAL
60732: IFTRUE 60736
60734: GO 60869
60736: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60737: LD_ADDR_VAR 0 5
60741: PUSH
60742: LD_VAR 0 1
60746: PUSH
60747: LD_VAR 0 2
60751: PUSH
60752: LD_INT 4
60754: MINUS
60755: PUSH
60756: LD_INT 3
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: LIST
60763: PUSH
60764: LD_VAR 0 1
60768: PUSH
60769: LD_INT 3
60771: MINUS
60772: PUSH
60773: LD_VAR 0 2
60777: PUSH
60778: LD_INT 3
60780: MINUS
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: PUSH
60790: LD_VAR 0 1
60794: PUSH
60795: LD_INT 4
60797: MINUS
60798: PUSH
60799: LD_VAR 0 2
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: PUSH
60812: LD_VAR 0 1
60816: PUSH
60817: LD_VAR 0 2
60821: PUSH
60822: LD_INT 3
60824: PLUS
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: LIST
60833: PUSH
60834: LD_VAR 0 1
60838: PUSH
60839: LD_INT 4
60841: PLUS
60842: PUSH
60843: LD_VAR 0 2
60847: PUSH
60848: LD_INT 4
60850: PLUS
60851: PUSH
60852: LD_INT 5
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: LIST
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: ST_TO_ADDR
// end ; 2 :
60867: GO 61426
60869: LD_INT 2
60871: DOUBLE
60872: EQUAL
60873: IFTRUE 60877
60875: GO 61006
60877: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60878: LD_ADDR_VAR 0 5
60882: PUSH
60883: LD_VAR 0 1
60887: PUSH
60888: LD_VAR 0 2
60892: PUSH
60893: LD_INT 3
60895: MINUS
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: LIST
60904: PUSH
60905: LD_VAR 0 1
60909: PUSH
60910: LD_INT 4
60912: PLUS
60913: PUSH
60914: LD_VAR 0 2
60918: PUSH
60919: LD_INT 4
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: LIST
60926: PUSH
60927: LD_VAR 0 1
60931: PUSH
60932: LD_VAR 0 2
60936: PUSH
60937: LD_INT 4
60939: PLUS
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: PUSH
60949: LD_VAR 0 1
60953: PUSH
60954: LD_INT 3
60956: MINUS
60957: PUSH
60958: LD_VAR 0 2
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: PUSH
60971: LD_VAR 0 1
60975: PUSH
60976: LD_INT 4
60978: MINUS
60979: PUSH
60980: LD_VAR 0 2
60984: PUSH
60985: LD_INT 4
60987: MINUS
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: ST_TO_ADDR
// end ; 3 :
61004: GO 61426
61006: LD_INT 3
61008: DOUBLE
61009: EQUAL
61010: IFTRUE 61014
61012: GO 61147
61014: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61015: LD_ADDR_VAR 0 5
61019: PUSH
61020: LD_VAR 0 1
61024: PUSH
61025: LD_INT 3
61027: PLUS
61028: PUSH
61029: LD_VAR 0 2
61033: PUSH
61034: LD_INT 4
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: LIST
61041: PUSH
61042: LD_VAR 0 1
61046: PUSH
61047: LD_INT 4
61049: PLUS
61050: PUSH
61051: LD_VAR 0 2
61055: PUSH
61056: LD_INT 4
61058: PLUS
61059: PUSH
61060: LD_INT 5
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: PUSH
61068: LD_VAR 0 1
61072: PUSH
61073: LD_INT 4
61075: MINUS
61076: PUSH
61077: LD_VAR 0 2
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: LIST
61089: PUSH
61090: LD_VAR 0 1
61094: PUSH
61095: LD_VAR 0 2
61099: PUSH
61100: LD_INT 4
61102: MINUS
61103: PUSH
61104: LD_INT 3
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: PUSH
61112: LD_VAR 0 1
61116: PUSH
61117: LD_INT 3
61119: MINUS
61120: PUSH
61121: LD_VAR 0 2
61125: PUSH
61126: LD_INT 3
61128: MINUS
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: ST_TO_ADDR
// end ; 4 :
61145: GO 61426
61147: LD_INT 4
61149: DOUBLE
61150: EQUAL
61151: IFTRUE 61155
61153: GO 61288
61155: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61156: LD_ADDR_VAR 0 5
61160: PUSH
61161: LD_VAR 0 1
61165: PUSH
61166: LD_VAR 0 2
61170: PUSH
61171: LD_INT 4
61173: PLUS
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: PUSH
61183: LD_VAR 0 1
61187: PUSH
61188: LD_INT 3
61190: PLUS
61191: PUSH
61192: LD_VAR 0 2
61196: PUSH
61197: LD_INT 3
61199: PLUS
61200: PUSH
61201: LD_INT 5
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: LIST
61208: PUSH
61209: LD_VAR 0 1
61213: PUSH
61214: LD_INT 4
61216: PLUS
61217: PUSH
61218: LD_VAR 0 2
61222: PUSH
61223: LD_INT 4
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: LIST
61230: PUSH
61231: LD_VAR 0 1
61235: PUSH
61236: LD_VAR 0 2
61240: PUSH
61241: LD_INT 3
61243: MINUS
61244: PUSH
61245: LD_INT 3
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: LIST
61252: PUSH
61253: LD_VAR 0 1
61257: PUSH
61258: LD_INT 4
61260: MINUS
61261: PUSH
61262: LD_VAR 0 2
61266: PUSH
61267: LD_INT 4
61269: MINUS
61270: PUSH
61271: LD_INT 2
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: ST_TO_ADDR
// end ; 5 :
61286: GO 61426
61288: LD_INT 5
61290: DOUBLE
61291: EQUAL
61292: IFTRUE 61296
61294: GO 61425
61296: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61297: LD_ADDR_VAR 0 5
61301: PUSH
61302: LD_VAR 0 1
61306: PUSH
61307: LD_INT 4
61309: MINUS
61310: PUSH
61311: LD_VAR 0 2
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: PUSH
61324: LD_VAR 0 1
61328: PUSH
61329: LD_VAR 0 2
61333: PUSH
61334: LD_INT 4
61336: MINUS
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: LIST
61345: PUSH
61346: LD_VAR 0 1
61350: PUSH
61351: LD_INT 4
61353: PLUS
61354: PUSH
61355: LD_VAR 0 2
61359: PUSH
61360: LD_INT 4
61362: PLUS
61363: PUSH
61364: LD_INT 5
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: PUSH
61372: LD_VAR 0 1
61376: PUSH
61377: LD_INT 3
61379: PLUS
61380: PUSH
61381: LD_VAR 0 2
61385: PUSH
61386: LD_INT 4
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: PUSH
61394: LD_VAR 0 1
61398: PUSH
61399: LD_VAR 0 2
61403: PUSH
61404: LD_INT 3
61406: PLUS
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: ST_TO_ADDR
// end ; end ;
61423: GO 61426
61425: POP
// result := list ;
61426: LD_ADDR_VAR 0 4
61430: PUSH
61431: LD_VAR 0 5
61435: ST_TO_ADDR
// end ;
61436: LD_VAR 0 4
61440: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61441: LD_INT 0
61443: PPUSH
61444: PPUSH
61445: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61446: LD_VAR 0 1
61450: NOT
61451: PUSH
61452: LD_VAR 0 2
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: LD_INT 4
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: IN
61475: NOT
61476: OR
61477: IFFALSE 61481
// exit ;
61479: GO 61573
// tmp := [ ] ;
61481: LD_ADDR_VAR 0 5
61485: PUSH
61486: EMPTY
61487: ST_TO_ADDR
// for i in units do
61488: LD_ADDR_VAR 0 4
61492: PUSH
61493: LD_VAR 0 1
61497: PUSH
61498: FOR_IN
61499: IFFALSE 61542
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61501: LD_ADDR_VAR 0 5
61505: PUSH
61506: LD_VAR 0 5
61510: PPUSH
61511: LD_VAR 0 5
61515: PUSH
61516: LD_INT 1
61518: PLUS
61519: PPUSH
61520: LD_VAR 0 4
61524: PPUSH
61525: LD_VAR 0 2
61529: PPUSH
61530: CALL_OW 259
61534: PPUSH
61535: CALL_OW 2
61539: ST_TO_ADDR
61540: GO 61498
61542: POP
61543: POP
// if not tmp then
61544: LD_VAR 0 5
61548: NOT
61549: IFFALSE 61553
// exit ;
61551: GO 61573
// result := SortListByListDesc ( units , tmp ) ;
61553: LD_ADDR_VAR 0 3
61557: PUSH
61558: LD_VAR 0 1
61562: PPUSH
61563: LD_VAR 0 5
61567: PPUSH
61568: CALL_OW 77
61572: ST_TO_ADDR
// end ;
61573: LD_VAR 0 3
61577: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61578: LD_INT 0
61580: PPUSH
61581: PPUSH
61582: PPUSH
// result := false ;
61583: LD_ADDR_VAR 0 3
61587: PUSH
61588: LD_INT 0
61590: ST_TO_ADDR
// x := GetX ( building ) ;
61591: LD_ADDR_VAR 0 4
61595: PUSH
61596: LD_VAR 0 2
61600: PPUSH
61601: CALL_OW 250
61605: ST_TO_ADDR
// y := GetY ( building ) ;
61606: LD_ADDR_VAR 0 5
61610: PUSH
61611: LD_VAR 0 2
61615: PPUSH
61616: CALL_OW 251
61620: ST_TO_ADDR
// if not building or not x or not y then
61621: LD_VAR 0 2
61625: NOT
61626: PUSH
61627: LD_VAR 0 4
61631: NOT
61632: OR
61633: PUSH
61634: LD_VAR 0 5
61638: NOT
61639: OR
61640: IFFALSE 61644
// exit ;
61642: GO 61736
// if GetTaskList ( unit ) then
61644: LD_VAR 0 1
61648: PPUSH
61649: CALL_OW 437
61653: IFFALSE 61736
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61655: LD_STRING e
61657: PUSH
61658: LD_VAR 0 1
61662: PPUSH
61663: CALL_OW 437
61667: PUSH
61668: LD_INT 1
61670: ARRAY
61671: PUSH
61672: LD_INT 1
61674: ARRAY
61675: EQUAL
61676: PUSH
61677: LD_VAR 0 4
61681: PUSH
61682: LD_VAR 0 1
61686: PPUSH
61687: CALL_OW 437
61691: PUSH
61692: LD_INT 1
61694: ARRAY
61695: PUSH
61696: LD_INT 2
61698: ARRAY
61699: EQUAL
61700: AND
61701: PUSH
61702: LD_VAR 0 5
61706: PUSH
61707: LD_VAR 0 1
61711: PPUSH
61712: CALL_OW 437
61716: PUSH
61717: LD_INT 1
61719: ARRAY
61720: PUSH
61721: LD_INT 3
61723: ARRAY
61724: EQUAL
61725: AND
61726: IFFALSE 61736
// result := true end ;
61728: LD_ADDR_VAR 0 3
61732: PUSH
61733: LD_INT 1
61735: ST_TO_ADDR
// end ;
61736: LD_VAR 0 3
61740: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61741: LD_INT 0
61743: PPUSH
// result := false ;
61744: LD_ADDR_VAR 0 4
61748: PUSH
61749: LD_INT 0
61751: ST_TO_ADDR
// if GetTaskList ( unit ) then
61752: LD_VAR 0 1
61756: PPUSH
61757: CALL_OW 437
61761: IFFALSE 61844
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61763: LD_STRING M
61765: PUSH
61766: LD_VAR 0 1
61770: PPUSH
61771: CALL_OW 437
61775: PUSH
61776: LD_INT 1
61778: ARRAY
61779: PUSH
61780: LD_INT 1
61782: ARRAY
61783: EQUAL
61784: PUSH
61785: LD_VAR 0 2
61789: PUSH
61790: LD_VAR 0 1
61794: PPUSH
61795: CALL_OW 437
61799: PUSH
61800: LD_INT 1
61802: ARRAY
61803: PUSH
61804: LD_INT 2
61806: ARRAY
61807: EQUAL
61808: AND
61809: PUSH
61810: LD_VAR 0 3
61814: PUSH
61815: LD_VAR 0 1
61819: PPUSH
61820: CALL_OW 437
61824: PUSH
61825: LD_INT 1
61827: ARRAY
61828: PUSH
61829: LD_INT 3
61831: ARRAY
61832: EQUAL
61833: AND
61834: IFFALSE 61844
// result := true ;
61836: LD_ADDR_VAR 0 4
61840: PUSH
61841: LD_INT 1
61843: ST_TO_ADDR
// end ; end ;
61844: LD_VAR 0 4
61848: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61849: LD_INT 0
61851: PPUSH
61852: PPUSH
61853: PPUSH
61854: PPUSH
// if not unit or not area then
61855: LD_VAR 0 1
61859: NOT
61860: PUSH
61861: LD_VAR 0 2
61865: NOT
61866: OR
61867: IFFALSE 61871
// exit ;
61869: GO 62035
// tmp := AreaToList ( area , i ) ;
61871: LD_ADDR_VAR 0 6
61875: PUSH
61876: LD_VAR 0 2
61880: PPUSH
61881: LD_VAR 0 5
61885: PPUSH
61886: CALL_OW 517
61890: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61891: LD_ADDR_VAR 0 5
61895: PUSH
61896: DOUBLE
61897: LD_INT 1
61899: DEC
61900: ST_TO_ADDR
61901: LD_VAR 0 6
61905: PUSH
61906: LD_INT 1
61908: ARRAY
61909: PUSH
61910: FOR_TO
61911: IFFALSE 62033
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61913: LD_ADDR_VAR 0 7
61917: PUSH
61918: LD_VAR 0 6
61922: PUSH
61923: LD_INT 1
61925: ARRAY
61926: PUSH
61927: LD_VAR 0 5
61931: ARRAY
61932: PUSH
61933: LD_VAR 0 6
61937: PUSH
61938: LD_INT 2
61940: ARRAY
61941: PUSH
61942: LD_VAR 0 5
61946: ARRAY
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61952: LD_VAR 0 7
61956: PUSH
61957: LD_INT 1
61959: ARRAY
61960: PPUSH
61961: LD_VAR 0 7
61965: PUSH
61966: LD_INT 2
61968: ARRAY
61969: PPUSH
61970: CALL_OW 428
61974: PUSH
61975: LD_INT 0
61977: EQUAL
61978: IFFALSE 62031
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61980: LD_VAR 0 1
61984: PPUSH
61985: LD_VAR 0 7
61989: PUSH
61990: LD_INT 1
61992: ARRAY
61993: PPUSH
61994: LD_VAR 0 7
61998: PUSH
61999: LD_INT 2
62001: ARRAY
62002: PPUSH
62003: LD_VAR 0 3
62007: PPUSH
62008: CALL_OW 48
// result := IsPlaced ( unit ) ;
62012: LD_ADDR_VAR 0 4
62016: PUSH
62017: LD_VAR 0 1
62021: PPUSH
62022: CALL_OW 305
62026: ST_TO_ADDR
// exit ;
62027: POP
62028: POP
62029: GO 62035
// end ; end ;
62031: GO 61910
62033: POP
62034: POP
// end ;
62035: LD_VAR 0 4
62039: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62040: LD_INT 0
62042: PPUSH
62043: PPUSH
62044: PPUSH
// if not side or side > 8 then
62045: LD_VAR 0 1
62049: NOT
62050: PUSH
62051: LD_VAR 0 1
62055: PUSH
62056: LD_INT 8
62058: GREATER
62059: OR
62060: IFFALSE 62064
// exit ;
62062: GO 62251
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62064: LD_ADDR_VAR 0 4
62068: PUSH
62069: LD_INT 22
62071: PUSH
62072: LD_VAR 0 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 21
62083: PUSH
62084: LD_INT 3
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PPUSH
62095: CALL_OW 69
62099: ST_TO_ADDR
// if not tmp then
62100: LD_VAR 0 4
62104: NOT
62105: IFFALSE 62109
// exit ;
62107: GO 62251
// enable_addtolog := true ;
62109: LD_ADDR_OWVAR 81
62113: PUSH
62114: LD_INT 1
62116: ST_TO_ADDR
// AddToLog ( [ ) ;
62117: LD_STRING [
62119: PPUSH
62120: CALL_OW 561
// for i in tmp do
62124: LD_ADDR_VAR 0 3
62128: PUSH
62129: LD_VAR 0 4
62133: PUSH
62134: FOR_IN
62135: IFFALSE 62242
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62137: LD_STRING [
62139: PUSH
62140: LD_VAR 0 3
62144: PPUSH
62145: CALL_OW 266
62149: STR
62150: PUSH
62151: LD_STRING , 
62153: STR
62154: PUSH
62155: LD_VAR 0 3
62159: PPUSH
62160: CALL_OW 250
62164: STR
62165: PUSH
62166: LD_STRING , 
62168: STR
62169: PUSH
62170: LD_VAR 0 3
62174: PPUSH
62175: CALL_OW 251
62179: STR
62180: PUSH
62181: LD_STRING , 
62183: STR
62184: PUSH
62185: LD_VAR 0 3
62189: PPUSH
62190: CALL_OW 254
62194: STR
62195: PUSH
62196: LD_STRING , 
62198: STR
62199: PUSH
62200: LD_VAR 0 3
62204: PPUSH
62205: LD_INT 1
62207: PPUSH
62208: CALL_OW 268
62212: STR
62213: PUSH
62214: LD_STRING , 
62216: STR
62217: PUSH
62218: LD_VAR 0 3
62222: PPUSH
62223: LD_INT 2
62225: PPUSH
62226: CALL_OW 268
62230: STR
62231: PUSH
62232: LD_STRING ],
62234: STR
62235: PPUSH
62236: CALL_OW 561
// end ;
62240: GO 62134
62242: POP
62243: POP
// AddToLog ( ]; ) ;
62244: LD_STRING ];
62246: PPUSH
62247: CALL_OW 561
// end ;
62251: LD_VAR 0 2
62255: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62256: LD_INT 0
62258: PPUSH
62259: PPUSH
62260: PPUSH
62261: PPUSH
62262: PPUSH
// if not area or not rate or not max then
62263: LD_VAR 0 1
62267: NOT
62268: PUSH
62269: LD_VAR 0 2
62273: NOT
62274: OR
62275: PUSH
62276: LD_VAR 0 4
62280: NOT
62281: OR
62282: IFFALSE 62286
// exit ;
62284: GO 62478
// while 1 do
62286: LD_INT 1
62288: IFFALSE 62478
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62290: LD_ADDR_VAR 0 9
62294: PUSH
62295: LD_VAR 0 1
62299: PPUSH
62300: LD_INT 1
62302: PPUSH
62303: CALL_OW 287
62307: PUSH
62308: LD_INT 10
62310: MUL
62311: ST_TO_ADDR
// r := rate / 10 ;
62312: LD_ADDR_VAR 0 7
62316: PUSH
62317: LD_VAR 0 2
62321: PUSH
62322: LD_INT 10
62324: DIVREAL
62325: ST_TO_ADDR
// time := 1 1$00 ;
62326: LD_ADDR_VAR 0 8
62330: PUSH
62331: LD_INT 2100
62333: ST_TO_ADDR
// if amount < min then
62334: LD_VAR 0 9
62338: PUSH
62339: LD_VAR 0 3
62343: LESS
62344: IFFALSE 62362
// r := r * 2 else
62346: LD_ADDR_VAR 0 7
62350: PUSH
62351: LD_VAR 0 7
62355: PUSH
62356: LD_INT 2
62358: MUL
62359: ST_TO_ADDR
62360: GO 62388
// if amount > max then
62362: LD_VAR 0 9
62366: PUSH
62367: LD_VAR 0 4
62371: GREATER
62372: IFFALSE 62388
// r := r / 2 ;
62374: LD_ADDR_VAR 0 7
62378: PUSH
62379: LD_VAR 0 7
62383: PUSH
62384: LD_INT 2
62386: DIVREAL
62387: ST_TO_ADDR
// time := time / r ;
62388: LD_ADDR_VAR 0 8
62392: PUSH
62393: LD_VAR 0 8
62397: PUSH
62398: LD_VAR 0 7
62402: DIVREAL
62403: ST_TO_ADDR
// if time < 0 then
62404: LD_VAR 0 8
62408: PUSH
62409: LD_INT 0
62411: LESS
62412: IFFALSE 62429
// time := time * - 1 ;
62414: LD_ADDR_VAR 0 8
62418: PUSH
62419: LD_VAR 0 8
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: MUL
62428: ST_TO_ADDR
// wait ( time ) ;
62429: LD_VAR 0 8
62433: PPUSH
62434: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62438: LD_INT 35
62440: PPUSH
62441: LD_INT 875
62443: PPUSH
62444: CALL_OW 12
62448: PPUSH
62449: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62453: LD_INT 1
62455: PPUSH
62456: LD_INT 5
62458: PPUSH
62459: CALL_OW 12
62463: PPUSH
62464: LD_VAR 0 1
62468: PPUSH
62469: LD_INT 1
62471: PPUSH
62472: CALL_OW 55
// end ;
62476: GO 62286
// end ;
62478: LD_VAR 0 5
62482: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62483: LD_INT 0
62485: PPUSH
62486: PPUSH
62487: PPUSH
62488: PPUSH
62489: PPUSH
62490: PPUSH
62491: PPUSH
62492: PPUSH
// if not turrets or not factories then
62493: LD_VAR 0 1
62497: NOT
62498: PUSH
62499: LD_VAR 0 2
62503: NOT
62504: OR
62505: IFFALSE 62509
// exit ;
62507: GO 62816
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62509: LD_ADDR_VAR 0 10
62513: PUSH
62514: LD_INT 5
62516: PUSH
62517: LD_INT 6
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 2
62526: PUSH
62527: LD_INT 4
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 3
62536: PUSH
62537: LD_INT 5
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 24
62551: PUSH
62552: LD_INT 25
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 23
62561: PUSH
62562: LD_INT 27
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 42
62575: PUSH
62576: LD_INT 43
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 44
62585: PUSH
62586: LD_INT 46
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 45
62595: PUSH
62596: LD_INT 47
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: ST_TO_ADDR
// result := [ ] ;
62613: LD_ADDR_VAR 0 3
62617: PUSH
62618: EMPTY
62619: ST_TO_ADDR
// for i in turrets do
62620: LD_ADDR_VAR 0 4
62624: PUSH
62625: LD_VAR 0 1
62629: PUSH
62630: FOR_IN
62631: IFFALSE 62814
// begin nat := GetNation ( i ) ;
62633: LD_ADDR_VAR 0 7
62637: PUSH
62638: LD_VAR 0 4
62642: PPUSH
62643: CALL_OW 248
62647: ST_TO_ADDR
// weapon := 0 ;
62648: LD_ADDR_VAR 0 8
62652: PUSH
62653: LD_INT 0
62655: ST_TO_ADDR
// if not nat then
62656: LD_VAR 0 7
62660: NOT
62661: IFFALSE 62665
// continue ;
62663: GO 62630
// for j in list [ nat ] do
62665: LD_ADDR_VAR 0 5
62669: PUSH
62670: LD_VAR 0 10
62674: PUSH
62675: LD_VAR 0 7
62679: ARRAY
62680: PUSH
62681: FOR_IN
62682: IFFALSE 62723
// if GetBWeapon ( i ) = j [ 1 ] then
62684: LD_VAR 0 4
62688: PPUSH
62689: CALL_OW 269
62693: PUSH
62694: LD_VAR 0 5
62698: PUSH
62699: LD_INT 1
62701: ARRAY
62702: EQUAL
62703: IFFALSE 62721
// begin weapon := j [ 2 ] ;
62705: LD_ADDR_VAR 0 8
62709: PUSH
62710: LD_VAR 0 5
62714: PUSH
62715: LD_INT 2
62717: ARRAY
62718: ST_TO_ADDR
// break ;
62719: GO 62723
// end ;
62721: GO 62681
62723: POP
62724: POP
// if not weapon then
62725: LD_VAR 0 8
62729: NOT
62730: IFFALSE 62734
// continue ;
62732: GO 62630
// for k in factories do
62734: LD_ADDR_VAR 0 6
62738: PUSH
62739: LD_VAR 0 2
62743: PUSH
62744: FOR_IN
62745: IFFALSE 62810
// begin weapons := AvailableWeaponList ( k ) ;
62747: LD_ADDR_VAR 0 9
62751: PUSH
62752: LD_VAR 0 6
62756: PPUSH
62757: CALL_OW 478
62761: ST_TO_ADDR
// if not weapons then
62762: LD_VAR 0 9
62766: NOT
62767: IFFALSE 62771
// continue ;
62769: GO 62744
// if weapon in weapons then
62771: LD_VAR 0 8
62775: PUSH
62776: LD_VAR 0 9
62780: IN
62781: IFFALSE 62808
// begin result := [ i , weapon ] ;
62783: LD_ADDR_VAR 0 3
62787: PUSH
62788: LD_VAR 0 4
62792: PUSH
62793: LD_VAR 0 8
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: ST_TO_ADDR
// exit ;
62802: POP
62803: POP
62804: POP
62805: POP
62806: GO 62816
// end ; end ;
62808: GO 62744
62810: POP
62811: POP
// end ;
62812: GO 62630
62814: POP
62815: POP
// end ;
62816: LD_VAR 0 3
62820: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62821: LD_INT 0
62823: PPUSH
// if not side or side > 8 then
62824: LD_VAR 0 3
62828: NOT
62829: PUSH
62830: LD_VAR 0 3
62834: PUSH
62835: LD_INT 8
62837: GREATER
62838: OR
62839: IFFALSE 62843
// exit ;
62841: GO 62902
// if not range then
62843: LD_VAR 0 4
62847: NOT
62848: IFFALSE 62859
// range := - 12 ;
62850: LD_ADDR_VAR 0 4
62854: PUSH
62855: LD_INT 12
62857: NEG
62858: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62859: LD_VAR 0 1
62863: PPUSH
62864: LD_VAR 0 2
62868: PPUSH
62869: LD_VAR 0 3
62873: PPUSH
62874: LD_VAR 0 4
62878: PPUSH
62879: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62883: LD_VAR 0 1
62887: PPUSH
62888: LD_VAR 0 2
62892: PPUSH
62893: LD_VAR 0 3
62897: PPUSH
62898: CALL_OW 331
// end ;
62902: LD_VAR 0 5
62906: RET
// export function Video ( mode ) ; begin
62907: LD_INT 0
62909: PPUSH
// ingame_video = mode ;
62910: LD_ADDR_OWVAR 52
62914: PUSH
62915: LD_VAR 0 1
62919: ST_TO_ADDR
// interface_hidden = mode ;
62920: LD_ADDR_OWVAR 54
62924: PUSH
62925: LD_VAR 0 1
62929: ST_TO_ADDR
// end ;
62930: LD_VAR 0 2
62934: RET
// export function Join ( array , element ) ; begin
62935: LD_INT 0
62937: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62938: LD_ADDR_VAR 0 3
62942: PUSH
62943: LD_VAR 0 1
62947: PPUSH
62948: LD_VAR 0 1
62952: PUSH
62953: LD_INT 1
62955: PLUS
62956: PPUSH
62957: LD_VAR 0 2
62961: PPUSH
62962: CALL_OW 1
62966: ST_TO_ADDR
// end ;
62967: LD_VAR 0 3
62971: RET
// export function JoinUnion ( array , element ) ; begin
62972: LD_INT 0
62974: PPUSH
// result := array union element ;
62975: LD_ADDR_VAR 0 3
62979: PUSH
62980: LD_VAR 0 1
62984: PUSH
62985: LD_VAR 0 2
62989: UNION
62990: ST_TO_ADDR
// end ;
62991: LD_VAR 0 3
62995: RET
// export function GetBehemoths ( side ) ; begin
62996: LD_INT 0
62998: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62999: LD_ADDR_VAR 0 2
63003: PUSH
63004: LD_INT 22
63006: PUSH
63007: LD_VAR 0 1
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 31
63018: PUSH
63019: LD_INT 25
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PPUSH
63030: CALL_OW 69
63034: ST_TO_ADDR
// end ;
63035: LD_VAR 0 2
63039: RET
// export function Shuffle ( array ) ; var i , index ; begin
63040: LD_INT 0
63042: PPUSH
63043: PPUSH
63044: PPUSH
// result := [ ] ;
63045: LD_ADDR_VAR 0 2
63049: PUSH
63050: EMPTY
63051: ST_TO_ADDR
// if not array then
63052: LD_VAR 0 1
63056: NOT
63057: IFFALSE 63061
// exit ;
63059: GO 63160
// Randomize ;
63061: CALL_OW 10
// for i = array downto 1 do
63065: LD_ADDR_VAR 0 3
63069: PUSH
63070: DOUBLE
63071: LD_VAR 0 1
63075: INC
63076: ST_TO_ADDR
63077: LD_INT 1
63079: PUSH
63080: FOR_DOWNTO
63081: IFFALSE 63158
// begin index := rand ( 1 , array ) ;
63083: LD_ADDR_VAR 0 4
63087: PUSH
63088: LD_INT 1
63090: PPUSH
63091: LD_VAR 0 1
63095: PPUSH
63096: CALL_OW 12
63100: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63101: LD_ADDR_VAR 0 2
63105: PUSH
63106: LD_VAR 0 2
63110: PPUSH
63111: LD_VAR 0 2
63115: PUSH
63116: LD_INT 1
63118: PLUS
63119: PPUSH
63120: LD_VAR 0 1
63124: PUSH
63125: LD_VAR 0 4
63129: ARRAY
63130: PPUSH
63131: CALL_OW 2
63135: ST_TO_ADDR
// array := Delete ( array , index ) ;
63136: LD_ADDR_VAR 0 1
63140: PUSH
63141: LD_VAR 0 1
63145: PPUSH
63146: LD_VAR 0 4
63150: PPUSH
63151: CALL_OW 3
63155: ST_TO_ADDR
// end ;
63156: GO 63080
63158: POP
63159: POP
// end ;
63160: LD_VAR 0 2
63164: RET
// export function GetBaseMaterials ( base ) ; begin
63165: LD_INT 0
63167: PPUSH
// result := [ 0 , 0 , 0 ] ;
63168: LD_ADDR_VAR 0 2
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: ST_TO_ADDR
// if not base then
63187: LD_VAR 0 1
63191: NOT
63192: IFFALSE 63196
// exit ;
63194: GO 63245
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63196: LD_ADDR_VAR 0 2
63200: PUSH
63201: LD_VAR 0 1
63205: PPUSH
63206: LD_INT 1
63208: PPUSH
63209: CALL_OW 275
63213: PUSH
63214: LD_VAR 0 1
63218: PPUSH
63219: LD_INT 2
63221: PPUSH
63222: CALL_OW 275
63226: PUSH
63227: LD_VAR 0 1
63231: PPUSH
63232: LD_INT 3
63234: PPUSH
63235: CALL_OW 275
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: LIST
63244: ST_TO_ADDR
// end ;
63245: LD_VAR 0 2
63249: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63250: LD_INT 0
63252: PPUSH
63253: PPUSH
// result := array ;
63254: LD_ADDR_VAR 0 3
63258: PUSH
63259: LD_VAR 0 1
63263: ST_TO_ADDR
// if size > 0 then
63264: LD_VAR 0 2
63268: PUSH
63269: LD_INT 0
63271: GREATER
63272: IFFALSE 63318
// for i := array downto size do
63274: LD_ADDR_VAR 0 4
63278: PUSH
63279: DOUBLE
63280: LD_VAR 0 1
63284: INC
63285: ST_TO_ADDR
63286: LD_VAR 0 2
63290: PUSH
63291: FOR_DOWNTO
63292: IFFALSE 63316
// result := Delete ( result , result ) ;
63294: LD_ADDR_VAR 0 3
63298: PUSH
63299: LD_VAR 0 3
63303: PPUSH
63304: LD_VAR 0 3
63308: PPUSH
63309: CALL_OW 3
63313: ST_TO_ADDR
63314: GO 63291
63316: POP
63317: POP
// end ;
63318: LD_VAR 0 3
63322: RET
// export function ComExit ( unit ) ; var tmp ; begin
63323: LD_INT 0
63325: PPUSH
63326: PPUSH
// if not IsInUnit ( unit ) then
63327: LD_VAR 0 1
63331: PPUSH
63332: CALL_OW 310
63336: NOT
63337: IFFALSE 63341
// exit ;
63339: GO 63401
// tmp := IsInUnit ( unit ) ;
63341: LD_ADDR_VAR 0 3
63345: PUSH
63346: LD_VAR 0 1
63350: PPUSH
63351: CALL_OW 310
63355: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63356: LD_VAR 0 3
63360: PPUSH
63361: CALL_OW 247
63365: PUSH
63366: LD_INT 2
63368: EQUAL
63369: IFFALSE 63382
// ComExitVehicle ( unit ) else
63371: LD_VAR 0 1
63375: PPUSH
63376: CALL_OW 121
63380: GO 63391
// ComExitBuilding ( unit ) ;
63382: LD_VAR 0 1
63386: PPUSH
63387: CALL_OW 122
// result := tmp ;
63391: LD_ADDR_VAR 0 2
63395: PUSH
63396: LD_VAR 0 3
63400: ST_TO_ADDR
// end ;
63401: LD_VAR 0 2
63405: RET
// export function ComExitAll ( units ) ; var i ; begin
63406: LD_INT 0
63408: PPUSH
63409: PPUSH
// if not units then
63410: LD_VAR 0 1
63414: NOT
63415: IFFALSE 63419
// exit ;
63417: GO 63445
// for i in units do
63419: LD_ADDR_VAR 0 3
63423: PUSH
63424: LD_VAR 0 1
63428: PUSH
63429: FOR_IN
63430: IFFALSE 63443
// ComExit ( i ) ;
63432: LD_VAR 0 3
63436: PPUSH
63437: CALL 63323 0 1
63441: GO 63429
63443: POP
63444: POP
// end ;
63445: LD_VAR 0 2
63449: RET
// export function ResetHc ; begin
63450: LD_INT 0
63452: PPUSH
// InitHc ;
63453: CALL_OW 19
// hc_importance := 0 ;
63457: LD_ADDR_OWVAR 32
63461: PUSH
63462: LD_INT 0
63464: ST_TO_ADDR
// end ;
63465: LD_VAR 0 1
63469: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63470: LD_INT 0
63472: PPUSH
63473: PPUSH
63474: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63475: LD_ADDR_VAR 0 6
63479: PUSH
63480: LD_VAR 0 1
63484: PUSH
63485: LD_VAR 0 3
63489: PLUS
63490: PUSH
63491: LD_INT 2
63493: DIV
63494: ST_TO_ADDR
// if _x < 0 then
63495: LD_VAR 0 6
63499: PUSH
63500: LD_INT 0
63502: LESS
63503: IFFALSE 63520
// _x := _x * - 1 ;
63505: LD_ADDR_VAR 0 6
63509: PUSH
63510: LD_VAR 0 6
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: MUL
63519: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63520: LD_ADDR_VAR 0 7
63524: PUSH
63525: LD_VAR 0 2
63529: PUSH
63530: LD_VAR 0 4
63534: PLUS
63535: PUSH
63536: LD_INT 2
63538: DIV
63539: ST_TO_ADDR
// if _y < 0 then
63540: LD_VAR 0 7
63544: PUSH
63545: LD_INT 0
63547: LESS
63548: IFFALSE 63565
// _y := _y * - 1 ;
63550: LD_ADDR_VAR 0 7
63554: PUSH
63555: LD_VAR 0 7
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: MUL
63564: ST_TO_ADDR
// result := [ _x , _y ] ;
63565: LD_ADDR_VAR 0 5
63569: PUSH
63570: LD_VAR 0 6
63574: PUSH
63575: LD_VAR 0 7
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: ST_TO_ADDR
// end ;
63584: LD_VAR 0 5
63588: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63589: LD_INT 0
63591: PPUSH
63592: PPUSH
63593: PPUSH
63594: PPUSH
// task := GetTaskList ( unit ) ;
63595: LD_ADDR_VAR 0 7
63599: PUSH
63600: LD_VAR 0 1
63604: PPUSH
63605: CALL_OW 437
63609: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63610: LD_VAR 0 7
63614: NOT
63615: PUSH
63616: LD_VAR 0 1
63620: PPUSH
63621: LD_VAR 0 2
63625: PPUSH
63626: CALL_OW 308
63630: NOT
63631: AND
63632: IFFALSE 63636
// exit ;
63634: GO 63754
// if IsInArea ( unit , area ) then
63636: LD_VAR 0 1
63640: PPUSH
63641: LD_VAR 0 2
63645: PPUSH
63646: CALL_OW 308
63650: IFFALSE 63668
// begin ComMoveToArea ( unit , goAway ) ;
63652: LD_VAR 0 1
63656: PPUSH
63657: LD_VAR 0 3
63661: PPUSH
63662: CALL_OW 113
// exit ;
63666: GO 63754
// end ; if task [ 1 ] [ 1 ] <> M then
63668: LD_VAR 0 7
63672: PUSH
63673: LD_INT 1
63675: ARRAY
63676: PUSH
63677: LD_INT 1
63679: ARRAY
63680: PUSH
63681: LD_STRING M
63683: NONEQUAL
63684: IFFALSE 63688
// exit ;
63686: GO 63754
// x := task [ 1 ] [ 2 ] ;
63688: LD_ADDR_VAR 0 5
63692: PUSH
63693: LD_VAR 0 7
63697: PUSH
63698: LD_INT 1
63700: ARRAY
63701: PUSH
63702: LD_INT 2
63704: ARRAY
63705: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63706: LD_ADDR_VAR 0 6
63710: PUSH
63711: LD_VAR 0 7
63715: PUSH
63716: LD_INT 1
63718: ARRAY
63719: PUSH
63720: LD_INT 3
63722: ARRAY
63723: ST_TO_ADDR
// if InArea ( x , y , area ) then
63724: LD_VAR 0 5
63728: PPUSH
63729: LD_VAR 0 6
63733: PPUSH
63734: LD_VAR 0 2
63738: PPUSH
63739: CALL_OW 309
63743: IFFALSE 63754
// ComStop ( unit ) ;
63745: LD_VAR 0 1
63749: PPUSH
63750: CALL_OW 141
// end ;
63754: LD_VAR 0 4
63758: RET
// export function Abs ( value ) ; begin
63759: LD_INT 0
63761: PPUSH
// result := value ;
63762: LD_ADDR_VAR 0 2
63766: PUSH
63767: LD_VAR 0 1
63771: ST_TO_ADDR
// if value < 0 then
63772: LD_VAR 0 1
63776: PUSH
63777: LD_INT 0
63779: LESS
63780: IFFALSE 63797
// result := value * - 1 ;
63782: LD_ADDR_VAR 0 2
63786: PUSH
63787: LD_VAR 0 1
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: MUL
63796: ST_TO_ADDR
// end ;
63797: LD_VAR 0 2
63801: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63802: LD_INT 0
63804: PPUSH
63805: PPUSH
63806: PPUSH
63807: PPUSH
63808: PPUSH
63809: PPUSH
63810: PPUSH
63811: PPUSH
// if not unit or not building then
63812: LD_VAR 0 1
63816: NOT
63817: PUSH
63818: LD_VAR 0 2
63822: NOT
63823: OR
63824: IFFALSE 63828
// exit ;
63826: GO 64054
// x := GetX ( building ) ;
63828: LD_ADDR_VAR 0 4
63832: PUSH
63833: LD_VAR 0 2
63837: PPUSH
63838: CALL_OW 250
63842: ST_TO_ADDR
// y := GetY ( building ) ;
63843: LD_ADDR_VAR 0 6
63847: PUSH
63848: LD_VAR 0 2
63852: PPUSH
63853: CALL_OW 251
63857: ST_TO_ADDR
// d := GetDir ( building ) ;
63858: LD_ADDR_VAR 0 8
63862: PUSH
63863: LD_VAR 0 2
63867: PPUSH
63868: CALL_OW 254
63872: ST_TO_ADDR
// r := 4 ;
63873: LD_ADDR_VAR 0 9
63877: PUSH
63878: LD_INT 4
63880: ST_TO_ADDR
// for i := 1 to 5 do
63881: LD_ADDR_VAR 0 10
63885: PUSH
63886: DOUBLE
63887: LD_INT 1
63889: DEC
63890: ST_TO_ADDR
63891: LD_INT 5
63893: PUSH
63894: FOR_TO
63895: IFFALSE 64052
// begin _x := ShiftX ( x , d , r + i ) ;
63897: LD_ADDR_VAR 0 5
63901: PUSH
63902: LD_VAR 0 4
63906: PPUSH
63907: LD_VAR 0 8
63911: PPUSH
63912: LD_VAR 0 9
63916: PUSH
63917: LD_VAR 0 10
63921: PLUS
63922: PPUSH
63923: CALL_OW 272
63927: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63928: LD_ADDR_VAR 0 7
63932: PUSH
63933: LD_VAR 0 6
63937: PPUSH
63938: LD_VAR 0 8
63942: PPUSH
63943: LD_VAR 0 9
63947: PUSH
63948: LD_VAR 0 10
63952: PLUS
63953: PPUSH
63954: CALL_OW 273
63958: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63959: LD_VAR 0 5
63963: PPUSH
63964: LD_VAR 0 7
63968: PPUSH
63969: CALL_OW 488
63973: PUSH
63974: LD_VAR 0 5
63978: PPUSH
63979: LD_VAR 0 7
63983: PPUSH
63984: CALL_OW 428
63988: PPUSH
63989: CALL_OW 247
63993: PUSH
63994: LD_INT 3
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: IN
64004: NOT
64005: AND
64006: IFFALSE 64050
// begin ComMoveXY ( unit , _x , _y ) ;
64008: LD_VAR 0 1
64012: PPUSH
64013: LD_VAR 0 5
64017: PPUSH
64018: LD_VAR 0 7
64022: PPUSH
64023: CALL_OW 111
// result := [ _x , _y ] ;
64027: LD_ADDR_VAR 0 3
64031: PUSH
64032: LD_VAR 0 5
64036: PUSH
64037: LD_VAR 0 7
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: ST_TO_ADDR
// exit ;
64046: POP
64047: POP
64048: GO 64054
// end ; end ;
64050: GO 63894
64052: POP
64053: POP
// end ;
64054: LD_VAR 0 3
64058: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64059: LD_INT 0
64061: PPUSH
64062: PPUSH
64063: PPUSH
// result := 0 ;
64064: LD_ADDR_VAR 0 3
64068: PUSH
64069: LD_INT 0
64071: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64072: LD_VAR 0 1
64076: PUSH
64077: LD_INT 0
64079: LESS
64080: PUSH
64081: LD_VAR 0 1
64085: PUSH
64086: LD_INT 8
64088: GREATER
64089: OR
64090: PUSH
64091: LD_VAR 0 2
64095: PUSH
64096: LD_INT 0
64098: LESS
64099: OR
64100: PUSH
64101: LD_VAR 0 2
64105: PUSH
64106: LD_INT 8
64108: GREATER
64109: OR
64110: IFFALSE 64114
// exit ;
64112: GO 64189
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64114: LD_ADDR_VAR 0 4
64118: PUSH
64119: LD_INT 22
64121: PUSH
64122: LD_VAR 0 2
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PPUSH
64131: CALL_OW 69
64135: PUSH
64136: FOR_IN
64137: IFFALSE 64187
// begin un := UnitShoot ( i ) ;
64139: LD_ADDR_VAR 0 5
64143: PUSH
64144: LD_VAR 0 4
64148: PPUSH
64149: CALL_OW 504
64153: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64154: LD_VAR 0 5
64158: PPUSH
64159: CALL_OW 255
64163: PUSH
64164: LD_VAR 0 1
64168: EQUAL
64169: IFFALSE 64185
// begin result := un ;
64171: LD_ADDR_VAR 0 3
64175: PUSH
64176: LD_VAR 0 5
64180: ST_TO_ADDR
// exit ;
64181: POP
64182: POP
64183: GO 64189
// end ; end ;
64185: GO 64136
64187: POP
64188: POP
// end ;
64189: LD_VAR 0 3
64193: RET
// export function GetCargoBay ( units ) ; begin
64194: LD_INT 0
64196: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64197: LD_ADDR_VAR 0 2
64201: PUSH
64202: LD_VAR 0 1
64206: PPUSH
64207: LD_INT 2
64209: PUSH
64210: LD_INT 34
64212: PUSH
64213: LD_INT 12
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 34
64222: PUSH
64223: LD_INT 51
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 34
64232: PUSH
64233: LD_INT 32
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 34
64242: PUSH
64243: LD_EXP 19
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: PPUSH
64259: CALL_OW 72
64263: ST_TO_ADDR
// end ;
64264: LD_VAR 0 2
64268: RET
// export function Negate ( value ) ; begin
64269: LD_INT 0
64271: PPUSH
// result := not value ;
64272: LD_ADDR_VAR 0 2
64276: PUSH
64277: LD_VAR 0 1
64281: NOT
64282: ST_TO_ADDR
// end ;
64283: LD_VAR 0 2
64287: RET
// export function Inc ( value ) ; begin
64288: LD_INT 0
64290: PPUSH
// result := value + 1 ;
64291: LD_ADDR_VAR 0 2
64295: PUSH
64296: LD_VAR 0 1
64300: PUSH
64301: LD_INT 1
64303: PLUS
64304: ST_TO_ADDR
// end ;
64305: LD_VAR 0 2
64309: RET
// export function Dec ( value ) ; begin
64310: LD_INT 0
64312: PPUSH
// result := value - 1 ;
64313: LD_ADDR_VAR 0 2
64317: PUSH
64318: LD_VAR 0 1
64322: PUSH
64323: LD_INT 1
64325: MINUS
64326: ST_TO_ADDR
// end ;
64327: LD_VAR 0 2
64331: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64332: LD_INT 0
64334: PPUSH
64335: PPUSH
64336: PPUSH
64337: PPUSH
64338: PPUSH
64339: PPUSH
64340: PPUSH
64341: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64342: LD_VAR 0 1
64346: PPUSH
64347: LD_VAR 0 2
64351: PPUSH
64352: CALL_OW 488
64356: NOT
64357: PUSH
64358: LD_VAR 0 3
64362: PPUSH
64363: LD_VAR 0 4
64367: PPUSH
64368: CALL_OW 488
64372: NOT
64373: OR
64374: IFFALSE 64387
// begin result := - 1 ;
64376: LD_ADDR_VAR 0 5
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: ST_TO_ADDR
// exit ;
64385: GO 64622
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64387: LD_ADDR_VAR 0 12
64391: PUSH
64392: LD_VAR 0 1
64396: PPUSH
64397: LD_VAR 0 2
64401: PPUSH
64402: LD_VAR 0 3
64406: PPUSH
64407: LD_VAR 0 4
64411: PPUSH
64412: CALL 63470 0 4
64416: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64417: LD_ADDR_VAR 0 11
64421: PUSH
64422: LD_VAR 0 1
64426: PPUSH
64427: LD_VAR 0 2
64431: PPUSH
64432: LD_VAR 0 12
64436: PUSH
64437: LD_INT 1
64439: ARRAY
64440: PPUSH
64441: LD_VAR 0 12
64445: PUSH
64446: LD_INT 2
64448: ARRAY
64449: PPUSH
64450: CALL_OW 298
64454: ST_TO_ADDR
// distance := 9999 ;
64455: LD_ADDR_VAR 0 10
64459: PUSH
64460: LD_INT 9999
64462: ST_TO_ADDR
// for i := 0 to 5 do
64463: LD_ADDR_VAR 0 6
64467: PUSH
64468: DOUBLE
64469: LD_INT 0
64471: DEC
64472: ST_TO_ADDR
64473: LD_INT 5
64475: PUSH
64476: FOR_TO
64477: IFFALSE 64620
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64479: LD_ADDR_VAR 0 7
64483: PUSH
64484: LD_VAR 0 1
64488: PPUSH
64489: LD_VAR 0 6
64493: PPUSH
64494: LD_VAR 0 11
64498: PPUSH
64499: CALL_OW 272
64503: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64504: LD_ADDR_VAR 0 8
64508: PUSH
64509: LD_VAR 0 2
64513: PPUSH
64514: LD_VAR 0 6
64518: PPUSH
64519: LD_VAR 0 11
64523: PPUSH
64524: CALL_OW 273
64528: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64529: LD_VAR 0 7
64533: PPUSH
64534: LD_VAR 0 8
64538: PPUSH
64539: CALL_OW 488
64543: NOT
64544: IFFALSE 64548
// continue ;
64546: GO 64476
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64548: LD_ADDR_VAR 0 9
64552: PUSH
64553: LD_VAR 0 12
64557: PUSH
64558: LD_INT 1
64560: ARRAY
64561: PPUSH
64562: LD_VAR 0 12
64566: PUSH
64567: LD_INT 2
64569: ARRAY
64570: PPUSH
64571: LD_VAR 0 7
64575: PPUSH
64576: LD_VAR 0 8
64580: PPUSH
64581: CALL_OW 298
64585: ST_TO_ADDR
// if tmp < distance then
64586: LD_VAR 0 9
64590: PUSH
64591: LD_VAR 0 10
64595: LESS
64596: IFFALSE 64618
// begin result := i ;
64598: LD_ADDR_VAR 0 5
64602: PUSH
64603: LD_VAR 0 6
64607: ST_TO_ADDR
// distance := tmp ;
64608: LD_ADDR_VAR 0 10
64612: PUSH
64613: LD_VAR 0 9
64617: ST_TO_ADDR
// end ; end ;
64618: GO 64476
64620: POP
64621: POP
// end ;
64622: LD_VAR 0 5
64626: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64627: LD_INT 0
64629: PPUSH
64630: PPUSH
// if not driver or not IsInUnit ( driver ) then
64631: LD_VAR 0 1
64635: NOT
64636: PUSH
64637: LD_VAR 0 1
64641: PPUSH
64642: CALL_OW 310
64646: NOT
64647: OR
64648: IFFALSE 64652
// exit ;
64650: GO 64742
// vehicle := IsInUnit ( driver ) ;
64652: LD_ADDR_VAR 0 3
64656: PUSH
64657: LD_VAR 0 1
64661: PPUSH
64662: CALL_OW 310
64666: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64667: LD_VAR 0 1
64671: PPUSH
64672: LD_STRING \
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: PUSH
64702: LD_STRING E
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_VAR 0 3
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PPUSH
64738: CALL_OW 446
// end ;
64742: LD_VAR 0 2
64746: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64747: LD_INT 0
64749: PPUSH
64750: PPUSH
// if not driver or not IsInUnit ( driver ) then
64751: LD_VAR 0 1
64755: NOT
64756: PUSH
64757: LD_VAR 0 1
64761: PPUSH
64762: CALL_OW 310
64766: NOT
64767: OR
64768: IFFALSE 64772
// exit ;
64770: GO 64862
// vehicle := IsInUnit ( driver ) ;
64772: LD_ADDR_VAR 0 3
64776: PUSH
64777: LD_VAR 0 1
64781: PPUSH
64782: CALL_OW 310
64786: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64787: LD_VAR 0 1
64791: PPUSH
64792: LD_STRING \
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: PUSH
64822: LD_STRING E
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_VAR 0 3
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PPUSH
64858: CALL_OW 447
// end ;
64862: LD_VAR 0 2
64866: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64867: LD_INT 0
64869: PPUSH
64870: PPUSH
64871: PPUSH
// tmp := [ ] ;
64872: LD_ADDR_VAR 0 5
64876: PUSH
64877: EMPTY
64878: ST_TO_ADDR
// for i in units do
64879: LD_ADDR_VAR 0 4
64883: PUSH
64884: LD_VAR 0 1
64888: PUSH
64889: FOR_IN
64890: IFFALSE 64928
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64892: LD_ADDR_VAR 0 5
64896: PUSH
64897: LD_VAR 0 5
64901: PPUSH
64902: LD_VAR 0 5
64906: PUSH
64907: LD_INT 1
64909: PLUS
64910: PPUSH
64911: LD_VAR 0 4
64915: PPUSH
64916: CALL_OW 256
64920: PPUSH
64921: CALL_OW 2
64925: ST_TO_ADDR
64926: GO 64889
64928: POP
64929: POP
// if not tmp then
64930: LD_VAR 0 5
64934: NOT
64935: IFFALSE 64939
// exit ;
64937: GO 64987
// if asc then
64939: LD_VAR 0 2
64943: IFFALSE 64967
// result := SortListByListAsc ( units , tmp ) else
64945: LD_ADDR_VAR 0 3
64949: PUSH
64950: LD_VAR 0 1
64954: PPUSH
64955: LD_VAR 0 5
64959: PPUSH
64960: CALL_OW 76
64964: ST_TO_ADDR
64965: GO 64987
// result := SortListByListDesc ( units , tmp ) ;
64967: LD_ADDR_VAR 0 3
64971: PUSH
64972: LD_VAR 0 1
64976: PPUSH
64977: LD_VAR 0 5
64981: PPUSH
64982: CALL_OW 77
64986: ST_TO_ADDR
// end ;
64987: LD_VAR 0 3
64991: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64992: LD_INT 0
64994: PPUSH
64995: PPUSH
// task := GetTaskList ( mech ) ;
64996: LD_ADDR_VAR 0 4
65000: PUSH
65001: LD_VAR 0 1
65005: PPUSH
65006: CALL_OW 437
65010: ST_TO_ADDR
// if not task then
65011: LD_VAR 0 4
65015: NOT
65016: IFFALSE 65020
// exit ;
65018: GO 65062
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65020: LD_ADDR_VAR 0 3
65024: PUSH
65025: LD_VAR 0 4
65029: PUSH
65030: LD_INT 1
65032: ARRAY
65033: PUSH
65034: LD_INT 1
65036: ARRAY
65037: PUSH
65038: LD_STRING r
65040: EQUAL
65041: PUSH
65042: LD_VAR 0 4
65046: PUSH
65047: LD_INT 1
65049: ARRAY
65050: PUSH
65051: LD_INT 4
65053: ARRAY
65054: PUSH
65055: LD_VAR 0 2
65059: EQUAL
65060: AND
65061: ST_TO_ADDR
// end ;
65062: LD_VAR 0 3
65066: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65067: LD_INT 0
65069: PPUSH
// SetDir ( unit , d ) ;
65070: LD_VAR 0 1
65074: PPUSH
65075: LD_VAR 0 4
65079: PPUSH
65080: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65084: LD_VAR 0 1
65088: PPUSH
65089: LD_VAR 0 2
65093: PPUSH
65094: LD_VAR 0 3
65098: PPUSH
65099: LD_VAR 0 5
65103: PPUSH
65104: CALL_OW 48
// end ;
65108: LD_VAR 0 6
65112: RET
// export function ToNaturalNumber ( number ) ; begin
65113: LD_INT 0
65115: PPUSH
// result := number div 1 ;
65116: LD_ADDR_VAR 0 2
65120: PUSH
65121: LD_VAR 0 1
65125: PUSH
65126: LD_INT 1
65128: DIV
65129: ST_TO_ADDR
// if number < 0 then
65130: LD_VAR 0 1
65134: PUSH
65135: LD_INT 0
65137: LESS
65138: IFFALSE 65148
// result := 0 ;
65140: LD_ADDR_VAR 0 2
65144: PUSH
65145: LD_INT 0
65147: ST_TO_ADDR
// end ;
65148: LD_VAR 0 2
65152: RET
// export function SortByClass ( units , class ) ; var un ; begin
65153: LD_INT 0
65155: PPUSH
65156: PPUSH
// if not units or not class then
65157: LD_VAR 0 1
65161: NOT
65162: PUSH
65163: LD_VAR 0 2
65167: NOT
65168: OR
65169: IFFALSE 65173
// exit ;
65171: GO 65268
// result := [ ] ;
65173: LD_ADDR_VAR 0 3
65177: PUSH
65178: EMPTY
65179: ST_TO_ADDR
// for un in units do
65180: LD_ADDR_VAR 0 4
65184: PUSH
65185: LD_VAR 0 1
65189: PUSH
65190: FOR_IN
65191: IFFALSE 65266
// if GetClass ( un ) = class then
65193: LD_VAR 0 4
65197: PPUSH
65198: CALL_OW 257
65202: PUSH
65203: LD_VAR 0 2
65207: EQUAL
65208: IFFALSE 65235
// result := Insert ( result , 1 , un ) else
65210: LD_ADDR_VAR 0 3
65214: PUSH
65215: LD_VAR 0 3
65219: PPUSH
65220: LD_INT 1
65222: PPUSH
65223: LD_VAR 0 4
65227: PPUSH
65228: CALL_OW 2
65232: ST_TO_ADDR
65233: GO 65264
// result := Replace ( result , result + 1 , un ) ;
65235: LD_ADDR_VAR 0 3
65239: PUSH
65240: LD_VAR 0 3
65244: PPUSH
65245: LD_VAR 0 3
65249: PUSH
65250: LD_INT 1
65252: PLUS
65253: PPUSH
65254: LD_VAR 0 4
65258: PPUSH
65259: CALL_OW 1
65263: ST_TO_ADDR
65264: GO 65190
65266: POP
65267: POP
// end ;
65268: LD_VAR 0 3
65272: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65273: LD_INT 0
65275: PPUSH
65276: PPUSH
65277: PPUSH
65278: PPUSH
65279: PPUSH
65280: PPUSH
65281: PPUSH
// result := [ ] ;
65282: LD_ADDR_VAR 0 4
65286: PUSH
65287: EMPTY
65288: ST_TO_ADDR
// if x - r < 0 then
65289: LD_VAR 0 1
65293: PUSH
65294: LD_VAR 0 3
65298: MINUS
65299: PUSH
65300: LD_INT 0
65302: LESS
65303: IFFALSE 65315
// min_x := 0 else
65305: LD_ADDR_VAR 0 8
65309: PUSH
65310: LD_INT 0
65312: ST_TO_ADDR
65313: GO 65331
// min_x := x - r ;
65315: LD_ADDR_VAR 0 8
65319: PUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_VAR 0 3
65329: MINUS
65330: ST_TO_ADDR
// if y - r < 0 then
65331: LD_VAR 0 2
65335: PUSH
65336: LD_VAR 0 3
65340: MINUS
65341: PUSH
65342: LD_INT 0
65344: LESS
65345: IFFALSE 65357
// min_y := 0 else
65347: LD_ADDR_VAR 0 7
65351: PUSH
65352: LD_INT 0
65354: ST_TO_ADDR
65355: GO 65373
// min_y := y - r ;
65357: LD_ADDR_VAR 0 7
65361: PUSH
65362: LD_VAR 0 2
65366: PUSH
65367: LD_VAR 0 3
65371: MINUS
65372: ST_TO_ADDR
// max_x := x + r ;
65373: LD_ADDR_VAR 0 9
65377: PUSH
65378: LD_VAR 0 1
65382: PUSH
65383: LD_VAR 0 3
65387: PLUS
65388: ST_TO_ADDR
// max_y := y + r ;
65389: LD_ADDR_VAR 0 10
65393: PUSH
65394: LD_VAR 0 2
65398: PUSH
65399: LD_VAR 0 3
65403: PLUS
65404: ST_TO_ADDR
// for _x = min_x to max_x do
65405: LD_ADDR_VAR 0 5
65409: PUSH
65410: DOUBLE
65411: LD_VAR 0 8
65415: DEC
65416: ST_TO_ADDR
65417: LD_VAR 0 9
65421: PUSH
65422: FOR_TO
65423: IFFALSE 65524
// for _y = min_y to max_y do
65425: LD_ADDR_VAR 0 6
65429: PUSH
65430: DOUBLE
65431: LD_VAR 0 7
65435: DEC
65436: ST_TO_ADDR
65437: LD_VAR 0 10
65441: PUSH
65442: FOR_TO
65443: IFFALSE 65520
// begin if not ValidHex ( _x , _y ) then
65445: LD_VAR 0 5
65449: PPUSH
65450: LD_VAR 0 6
65454: PPUSH
65455: CALL_OW 488
65459: NOT
65460: IFFALSE 65464
// continue ;
65462: GO 65442
// if GetResourceTypeXY ( _x , _y ) then
65464: LD_VAR 0 5
65468: PPUSH
65469: LD_VAR 0 6
65473: PPUSH
65474: CALL_OW 283
65478: IFFALSE 65518
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65480: LD_ADDR_VAR 0 4
65484: PUSH
65485: LD_VAR 0 4
65489: PPUSH
65490: LD_VAR 0 4
65494: PUSH
65495: LD_INT 1
65497: PLUS
65498: PPUSH
65499: LD_VAR 0 5
65503: PUSH
65504: LD_VAR 0 6
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PPUSH
65513: CALL_OW 1
65517: ST_TO_ADDR
// end ;
65518: GO 65442
65520: POP
65521: POP
65522: GO 65422
65524: POP
65525: POP
// end ;
65526: LD_VAR 0 4
65530: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65531: LD_INT 0
65533: PPUSH
65534: PPUSH
65535: PPUSH
65536: PPUSH
65537: PPUSH
65538: PPUSH
65539: PPUSH
65540: PPUSH
// if not units then
65541: LD_VAR 0 1
65545: NOT
65546: IFFALSE 65550
// exit ;
65548: GO 65975
// result := UnitFilter ( units , [ f_ok ] ) ;
65550: LD_ADDR_VAR 0 3
65554: PUSH
65555: LD_VAR 0 1
65559: PPUSH
65560: LD_INT 50
65562: PUSH
65563: EMPTY
65564: LIST
65565: PPUSH
65566: CALL_OW 72
65570: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65571: LD_ADDR_VAR 0 8
65575: PUSH
65576: LD_VAR 0 1
65580: PUSH
65581: LD_INT 1
65583: ARRAY
65584: PPUSH
65585: CALL_OW 255
65589: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
65590: LD_ADDR_VAR 0 10
65594: PUSH
65595: LD_INT 29
65597: PUSH
65598: LD_EXP 22
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: ST_TO_ADDR
// if not result then
65607: LD_VAR 0 3
65611: NOT
65612: IFFALSE 65616
// exit ;
65614: GO 65975
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65616: LD_ADDR_VAR 0 5
65620: PUSH
65621: LD_INT 81
65623: PUSH
65624: LD_VAR 0 8
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PPUSH
65633: CALL_OW 69
65637: ST_TO_ADDR
// for i in result do
65638: LD_ADDR_VAR 0 4
65642: PUSH
65643: LD_VAR 0 3
65647: PUSH
65648: FOR_IN
65649: IFFALSE 65973
// begin tag := GetTag ( i ) + 1 ;
65651: LD_ADDR_VAR 0 9
65655: PUSH
65656: LD_VAR 0 4
65660: PPUSH
65661: CALL_OW 110
65665: PUSH
65666: LD_INT 1
65668: PLUS
65669: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65670: LD_ADDR_VAR 0 7
65674: PUSH
65675: LD_VAR 0 4
65679: PPUSH
65680: CALL_OW 250
65684: PPUSH
65685: LD_VAR 0 4
65689: PPUSH
65690: CALL_OW 251
65694: PPUSH
65695: LD_INT 6
65697: PPUSH
65698: CALL 65273 0 3
65702: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65703: LD_VAR 0 7
65707: PUSH
65708: LD_VAR 0 4
65712: PPUSH
65713: CALL_OW 264
65717: PUSH
65718: LD_VAR 0 10
65722: IN
65723: NOT
65724: AND
65725: IFFALSE 65764
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65727: LD_VAR 0 4
65731: PPUSH
65732: LD_VAR 0 7
65736: PUSH
65737: LD_INT 1
65739: ARRAY
65740: PUSH
65741: LD_INT 1
65743: ARRAY
65744: PPUSH
65745: LD_VAR 0 7
65749: PUSH
65750: LD_INT 1
65752: ARRAY
65753: PUSH
65754: LD_INT 2
65756: ARRAY
65757: PPUSH
65758: CALL_OW 116
65762: GO 65971
// if path > tag then
65764: LD_VAR 0 2
65768: PUSH
65769: LD_VAR 0 9
65773: GREATER
65774: IFFALSE 65941
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
65776: LD_ADDR_VAR 0 6
65780: PUSH
65781: LD_VAR 0 5
65785: PPUSH
65786: LD_INT 91
65788: PUSH
65789: LD_VAR 0 4
65793: PUSH
65794: LD_INT 12
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: LIST
65801: PPUSH
65802: CALL_OW 72
65806: ST_TO_ADDR
// if nearEnemy then
65807: LD_VAR 0 6
65811: IFFALSE 65839
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65813: LD_VAR 0 4
65817: PPUSH
65818: LD_VAR 0 6
65822: PPUSH
65823: LD_VAR 0 4
65827: PPUSH
65828: CALL_OW 74
65832: PPUSH
65833: CALL_OW 115
65837: GO 65939
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65839: LD_VAR 0 4
65843: PPUSH
65844: LD_VAR 0 2
65848: PUSH
65849: LD_VAR 0 9
65853: ARRAY
65854: PUSH
65855: LD_INT 1
65857: ARRAY
65858: PPUSH
65859: LD_VAR 0 2
65863: PUSH
65864: LD_VAR 0 9
65868: ARRAY
65869: PUSH
65870: LD_INT 2
65872: ARRAY
65873: PPUSH
65874: CALL_OW 297
65878: PUSH
65879: LD_INT 6
65881: GREATER
65882: IFFALSE 65925
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65884: LD_VAR 0 4
65888: PPUSH
65889: LD_VAR 0 2
65893: PUSH
65894: LD_VAR 0 9
65898: ARRAY
65899: PUSH
65900: LD_INT 1
65902: ARRAY
65903: PPUSH
65904: LD_VAR 0 2
65908: PUSH
65909: LD_VAR 0 9
65913: ARRAY
65914: PUSH
65915: LD_INT 2
65917: ARRAY
65918: PPUSH
65919: CALL_OW 114
65923: GO 65939
// SetTag ( i , tag ) ;
65925: LD_VAR 0 4
65929: PPUSH
65930: LD_VAR 0 9
65934: PPUSH
65935: CALL_OW 109
// end else
65939: GO 65971
// if enemy then
65941: LD_VAR 0 5
65945: IFFALSE 65971
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65947: LD_VAR 0 4
65951: PPUSH
65952: LD_VAR 0 5
65956: PPUSH
65957: LD_VAR 0 4
65961: PPUSH
65962: CALL_OW 74
65966: PPUSH
65967: CALL_OW 115
// end ;
65971: GO 65648
65973: POP
65974: POP
// end ;
65975: LD_VAR 0 3
65979: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65980: LD_INT 0
65982: PPUSH
65983: PPUSH
65984: PPUSH
// if not unit or IsInUnit ( unit ) then
65985: LD_VAR 0 1
65989: NOT
65990: PUSH
65991: LD_VAR 0 1
65995: PPUSH
65996: CALL_OW 310
66000: OR
66001: IFFALSE 66005
// exit ;
66003: GO 66096
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66005: LD_ADDR_VAR 0 4
66009: PUSH
66010: LD_VAR 0 1
66014: PPUSH
66015: CALL_OW 250
66019: PPUSH
66020: LD_VAR 0 2
66024: PPUSH
66025: LD_INT 1
66027: PPUSH
66028: CALL_OW 272
66032: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66033: LD_ADDR_VAR 0 5
66037: PUSH
66038: LD_VAR 0 1
66042: PPUSH
66043: CALL_OW 251
66047: PPUSH
66048: LD_VAR 0 2
66052: PPUSH
66053: LD_INT 1
66055: PPUSH
66056: CALL_OW 273
66060: ST_TO_ADDR
// if ValidHex ( x , y ) then
66061: LD_VAR 0 4
66065: PPUSH
66066: LD_VAR 0 5
66070: PPUSH
66071: CALL_OW 488
66075: IFFALSE 66096
// ComTurnXY ( unit , x , y ) ;
66077: LD_VAR 0 1
66081: PPUSH
66082: LD_VAR 0 4
66086: PPUSH
66087: LD_VAR 0 5
66091: PPUSH
66092: CALL_OW 118
// end ;
66096: LD_VAR 0 3
66100: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66101: LD_INT 0
66103: PPUSH
66104: PPUSH
// result := false ;
66105: LD_ADDR_VAR 0 3
66109: PUSH
66110: LD_INT 0
66112: ST_TO_ADDR
// if not units then
66113: LD_VAR 0 2
66117: NOT
66118: IFFALSE 66122
// exit ;
66120: GO 66167
// for i in units do
66122: LD_ADDR_VAR 0 4
66126: PUSH
66127: LD_VAR 0 2
66131: PUSH
66132: FOR_IN
66133: IFFALSE 66165
// if See ( side , i ) then
66135: LD_VAR 0 1
66139: PPUSH
66140: LD_VAR 0 4
66144: PPUSH
66145: CALL_OW 292
66149: IFFALSE 66163
// begin result := true ;
66151: LD_ADDR_VAR 0 3
66155: PUSH
66156: LD_INT 1
66158: ST_TO_ADDR
// exit ;
66159: POP
66160: POP
66161: GO 66167
// end ;
66163: GO 66132
66165: POP
66166: POP
// end ;
66167: LD_VAR 0 3
66171: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66172: LD_INT 0
66174: PPUSH
66175: PPUSH
66176: PPUSH
66177: PPUSH
// if not unit or not points then
66178: LD_VAR 0 1
66182: NOT
66183: PUSH
66184: LD_VAR 0 2
66188: NOT
66189: OR
66190: IFFALSE 66194
// exit ;
66192: GO 66284
// dist := 99999 ;
66194: LD_ADDR_VAR 0 5
66198: PUSH
66199: LD_INT 99999
66201: ST_TO_ADDR
// for i in points do
66202: LD_ADDR_VAR 0 4
66206: PUSH
66207: LD_VAR 0 2
66211: PUSH
66212: FOR_IN
66213: IFFALSE 66282
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66215: LD_ADDR_VAR 0 6
66219: PUSH
66220: LD_VAR 0 1
66224: PPUSH
66225: LD_VAR 0 4
66229: PUSH
66230: LD_INT 1
66232: ARRAY
66233: PPUSH
66234: LD_VAR 0 4
66238: PUSH
66239: LD_INT 2
66241: ARRAY
66242: PPUSH
66243: CALL_OW 297
66247: ST_TO_ADDR
// if tmpDist < dist then
66248: LD_VAR 0 6
66252: PUSH
66253: LD_VAR 0 5
66257: LESS
66258: IFFALSE 66280
// begin result := i ;
66260: LD_ADDR_VAR 0 3
66264: PUSH
66265: LD_VAR 0 4
66269: ST_TO_ADDR
// dist := tmpDist ;
66270: LD_ADDR_VAR 0 5
66274: PUSH
66275: LD_VAR 0 6
66279: ST_TO_ADDR
// end ; end ;
66280: GO 66212
66282: POP
66283: POP
// end ; end_of_file
66284: LD_VAR 0 3
66288: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66289: LD_VAR 0 1
66293: PUSH
66294: LD_INT 200
66296: DOUBLE
66297: GREATEREQUAL
66298: IFFALSE 66306
66300: LD_INT 299
66302: DOUBLE
66303: LESSEQUAL
66304: IFTRUE 66308
66306: GO 66340
66308: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66309: LD_VAR 0 1
66313: PPUSH
66314: LD_VAR 0 2
66318: PPUSH
66319: LD_VAR 0 3
66323: PPUSH
66324: LD_VAR 0 4
66328: PPUSH
66329: LD_VAR 0 5
66333: PPUSH
66334: CALL 21936 0 5
66338: GO 66417
66340: LD_INT 300
66342: DOUBLE
66343: GREATEREQUAL
66344: IFFALSE 66352
66346: LD_INT 399
66348: DOUBLE
66349: LESSEQUAL
66350: IFTRUE 66354
66352: GO 66416
66354: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66355: LD_VAR 0 1
66359: PPUSH
66360: LD_VAR 0 2
66364: PPUSH
66365: LD_VAR 0 3
66369: PPUSH
66370: LD_VAR 0 4
66374: PPUSH
66375: LD_VAR 0 5
66379: PPUSH
66380: LD_VAR 0 6
66384: PPUSH
66385: LD_VAR 0 7
66389: PPUSH
66390: LD_VAR 0 8
66394: PPUSH
66395: LD_VAR 0 9
66399: PPUSH
66400: LD_VAR 0 10
66404: PPUSH
66405: LD_VAR 0 11
66409: PPUSH
66410: CALL 19578 0 11
66414: GO 66417
66416: POP
// end ;
66417: PPOPN 11
66419: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66420: LD_VAR 0 1
66424: PPUSH
66425: LD_VAR 0 2
66429: PPUSH
66430: LD_VAR 0 3
66434: PPUSH
66435: LD_VAR 0 4
66439: PPUSH
66440: LD_VAR 0 5
66444: PPUSH
66445: CALL 21672 0 5
// end ; end_of_file
66449: PPOPN 5
66451: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66452: LD_VAR 0 1
66456: PPUSH
66457: LD_VAR 0 2
66461: PPUSH
66462: LD_VAR 0 3
66466: PPUSH
66467: LD_VAR 0 4
66471: PPUSH
66472: LD_VAR 0 5
66476: PPUSH
66477: LD_VAR 0 6
66481: PPUSH
66482: CALL 7271 0 6
// end ;
66486: PPOPN 6
66488: END
