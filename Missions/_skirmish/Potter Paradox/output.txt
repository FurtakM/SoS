// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 25 0 0
// InitGlobalVariables ;
   8: CALL 7061 0 0
// PrepareLegion ;
  12: CALL 234 0 0
// PrepareAllies ;
  16: CALL 2225 0 0
// Action ;
  20: CALL 4051 0 0
// end ;
  24: END
// function InitGame ; begin
  25: LD_INT 0
  27: PPUSH
// RandomizeAll ;
  28: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  32: LD_ADDR_OWVAR 67
  36: PUSH
  37: LD_INT 0
  39: PPUSH
  40: CALL_OW 426
  44: ST_TO_ADDR
// if not Difficulty then
  45: LD_OWVAR 67
  49: NOT
  50: IFFALSE 60
// Difficulty := 2 ;
  52: LD_ADDR_OWVAR 67
  56: PUSH
  57: LD_INT 2
  59: ST_TO_ADDR
// InitVariables ;
  60: CALL 73 0 0
// SetDiplomacy ;
  64: CALL 186 0 0
// end ; end_of_file
  68: LD_VAR 0 1
  72: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  73: LD_INT 0
  75: PPUSH
// points := 0 ;
  76: LD_ADDR_EXP 10
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// alert := false ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// game_over := false ;
  92: LD_ADDR_EXP 7
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// wave_time := 0 0$00 ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// bonus_active := false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// ignore_wave := false ;
 116: LD_ADDR_EXP 15
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// player_res_art := false ;
 124: LD_ADDR_EXP 8
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// player_artifact_ready := false ;
 132: LD_ADDR_EXP 16
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 140: LD_ADDR_EXP 9
 144: PUSH
 145: LD_INT 52500
 147: PUSH
 148: LD_INT 67200
 150: PUSH
 151: LD_INT 84000
 153: PUSH
 154: EMPTY
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// bonus_num := 0 ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// artifact_progress := 0 ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// export function SetDiplomacy ; begin
 186: LD_INT 0
 188: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 189: LD_INT 92
 191: PPUSH
 192: LD_INT 48
 194: PPUSH
 195: LD_INT 8
 197: PPUSH
 198: LD_INT 32796
 200: NEG
 201: PPUSH
 202: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 206: LD_INT 92
 208: PPUSH
 209: LD_INT 48
 211: PPUSH
 212: LD_INT 8
 214: PPUSH
 215: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 219: LD_INT 5
 221: PPUSH
 222: LD_INT 8
 224: PPUSH
 225: CALL_OW 343
// end ; end_of_file
 229: LD_VAR 0 1
 233: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 234: LD_INT 0
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
 253: PPUSH
// uc_side := 2 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 2
 261: ST_TO_ADDR
// uc_nation := nation_arabian ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 2
 269: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 270: LD_INT 1
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 6
 278: PPUSH
 279: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 283: LD_ADDR_OWVAR 26
 287: PUSH
 288: LD_STRING Nicolas Vervecken
 290: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 291: LD_ADDR_OWVAR 33
 295: PUSH
 296: LD_STRING SecondCharsGal
 298: ST_TO_ADDR
// hc_face_number := 3 ;
 299: LD_ADDR_OWVAR 34
 303: PUSH
 304: LD_INT 3
 306: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 307: LD_ADDR_OWVAR 29
 311: PUSH
 312: LD_INT 11
 314: PUSH
 315: LD_INT 10
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Vervecken := CreateHuman ;
 322: LD_ADDR_EXP 12
 326: PUSH
 327: CALL_OW 44
 331: ST_TO_ADDR
// InitHc ;
 332: CALL_OW 19
// uc_side := 8 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 8
 343: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 1
 354: PPUSH
 355: LD_INT 4000
 357: PUSH
 358: LD_INT 2500
 360: PUSH
 361: LD_INT 1250
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 379: LD_INT 23
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: LD_INT 300
 392: PPUSH
 393: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 274
 404: PPUSH
 405: LD_INT 3
 407: PPUSH
 408: LD_INT 100
 410: PUSH
 411: LD_INT 50
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: PPUSH
 428: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 432: LD_ADDR_VAR 0 14
 436: PUSH
 437: LD_INT 23
 439: PPUSH
 440: CALL_OW 250
 444: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 445: LD_ADDR_VAR 0 15
 449: PUSH
 450: LD_INT 23
 452: PPUSH
 453: CALL_OW 251
 457: ST_TO_ADDR
// team := [ ] ;
 458: LD_ADDR_VAR 0 7
 462: PUSH
 463: EMPTY
 464: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 465: LD_ADDR_VAR 0 8
 469: PUSH
 470: LD_INT 9
 472: PUSH
 473: LD_INT 8
 475: PUSH
 476: LD_INT 7
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 490: LD_ADDR_VAR 0 9
 494: PUSH
 495: LD_INT 11
 497: PUSH
 498: LD_INT 9
 500: PUSH
 501: LD_INT 8
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 515: LD_ADDR_VAR 0 10
 519: PUSH
 520: LD_INT 3
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_OWVAR 67
 538: ARRAY
 539: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 540: LD_ADDR_VAR 0 11
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: LD_INT 3
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_OWVAR 67
 563: ARRAY
 564: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 565: LD_ADDR_VAR 0 12
 569: PUSH
 570: LD_INT 3
 572: PUSH
 573: LD_INT 2
 575: PUSH
 576: LD_INT 2
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: PUSH
 584: LD_OWVAR 67
 588: ARRAY
 589: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 590: LD_ADDR_VAR 0 13
 594: PUSH
 595: LD_INT 6
 597: PUSH
 598: LD_INT 5
 600: PUSH
 601: LD_INT 4
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: LD_OWVAR 67
 613: ARRAY
 614: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 615: LD_ADDR_VAR 0 18
 619: PUSH
 620: LD_INT 13
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: LD_INT 26
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 14
 640: PUSH
 641: LD_INT 3
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: LD_INT 25
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 14
 658: PUSH
 659: LD_INT 3
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 32
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 14
 676: PUSH
 677: LD_INT 3
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: LD_INT 31
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 14
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 24
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 14
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 25
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 13
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 24
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 755: LD_ADDR_VAR 0 2
 759: PUSH
 760: DOUBLE
 761: LD_INT 1
 763: DEC
 764: ST_TO_ADDR
 765: LD_VAR 0 18
 769: PUSH
 770: LD_OWVAR 67
 774: MINUS
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: PUSH
 780: FOR_TO
 781: IFFALSE 910
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 783: LD_ADDR_OWVAR 37
 787: PUSH
 788: LD_VAR 0 18
 792: PUSH
 793: LD_VAR 0 2
 797: ARRAY
 798: PUSH
 799: LD_INT 1
 801: ARRAY
 802: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 803: LD_ADDR_OWVAR 39
 807: PUSH
 808: LD_VAR 0 18
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PUSH
 819: LD_INT 2
 821: ARRAY
 822: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 823: LD_ADDR_OWVAR 38
 827: PUSH
 828: LD_VAR 0 18
 832: PUSH
 833: LD_VAR 0 2
 837: ARRAY
 838: PUSH
 839: LD_INT 3
 841: ARRAY
 842: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 843: LD_ADDR_OWVAR 40
 847: PUSH
 848: LD_VAR 0 18
 852: PUSH
 853: LD_VAR 0 2
 857: ARRAY
 858: PUSH
 859: LD_INT 4
 861: ARRAY
 862: ST_TO_ADDR
// un := CreateVehicle ;
 863: LD_ADDR_VAR 0 6
 867: PUSH
 868: CALL_OW 45
 872: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 873: LD_VAR 0 6
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 5
 883: PPUSH
 884: CALL_OW 12
 888: PPUSH
 889: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 893: LD_VAR 0 6
 897: PPUSH
 898: LD_INT 7
 900: PPUSH
 901: LD_INT 0
 903: PPUSH
 904: CALL_OW 49
// end ;
 908: GO 780
 910: POP
 911: POP
// for i = 1 to ape_num do
 912: LD_ADDR_VAR 0 2
 916: PUSH
 917: DOUBLE
 918: LD_INT 1
 920: DEC
 921: ST_TO_ADDR
 922: LD_VAR 0 13
 926: PUSH
 927: FOR_TO
 928: IFFALSE 995
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 930: LD_INT 0
 932: PPUSH
 933: LD_INT 16
 935: PUSH
 936: LD_INT 15
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 1
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: CALL_OW 12
 953: ARRAY
 954: PPUSH
 955: LD_VAR 0 8
 959: PPUSH
 960: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 964: LD_ADDR_VAR 0 7
 968: PUSH
 969: LD_VAR 0 7
 973: PPUSH
 974: LD_VAR 0 7
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: PPUSH
 983: CALL_OW 44
 987: PPUSH
 988: CALL_OW 2
 992: ST_TO_ADDR
// end ;
 993: GO 927
 995: POP
 996: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 997: LD_INT 1
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_VAR 0 8
1007: PPUSH
1008: CALL_OW 380
// l1 := CreateHuman ;
1012: LD_ADDR_EXP 2
1016: PUSH
1017: CALL_OW 44
1021: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1022: LD_EXP 2
1026: PPUSH
1027: LD_INT 23
1029: PPUSH
1030: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 8
1044: PPUSH
1045: CALL_OW 380
// l2 := CreateHuman ;
1049: LD_ADDR_EXP 3
1053: PUSH
1054: CALL_OW 44
1058: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_INT 23
1066: PPUSH
1067: CALL_OW 52
// for class = 1 to 4 do
1071: LD_ADDR_VAR 0 4
1075: PUSH
1076: DOUBLE
1077: LD_INT 1
1079: DEC
1080: ST_TO_ADDR
1081: LD_INT 4
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1184
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1087: LD_ADDR_VAR 0 2
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_VAR 0 9
1101: PUSH
1102: LD_VAR 0 10
1106: PUSH
1107: LD_VAR 0 11
1111: PUSH
1112: LD_VAR 0 12
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_VAR 0 4
1127: ARRAY
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1180
// begin PrepareHuman ( false , class , skill ) ;
1132: LD_INT 0
1134: PPUSH
1135: LD_VAR 0 4
1139: PPUSH
1140: LD_VAR 0 8
1144: PPUSH
1145: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1149: LD_ADDR_VAR 0 7
1153: PUSH
1154: LD_VAR 0 7
1158: PPUSH
1159: LD_VAR 0 7
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: PPUSH
1168: CALL_OW 44
1172: PPUSH
1173: CALL_OW 2
1177: ST_TO_ADDR
// end ;
1178: GO 1129
1180: POP
1181: POP
1182: GO 1084
1184: POP
1185: POP
// for i in team do
1186: LD_ADDR_VAR 0 2
1190: PUSH
1191: LD_VAR 0 7
1195: PUSH
1196: FOR_IN
1197: IFFALSE 1673
// begin b := 0 ;
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 0
1206: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1207: LD_VAR 0 2
1211: PPUSH
1212: CALL_OW 257
1216: PUSH
1217: LD_INT 1
1219: DOUBLE
1220: EQUAL
1221: IFTRUE 1225
1223: GO 1332
1225: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1226: LD_ADDR_VAR 0 5
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_OWVAR 20
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 30
1248: PUSH
1249: LD_INT 32
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PUSH
1256: LD_INT 30
1258: PUSH
1259: LD_INT 31
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// if not b then
1287: LD_VAR 0 5
1291: NOT
1292: IFFALSE 1330
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 22
1301: PUSH
1302: LD_OWVAR 20
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 30
1313: PUSH
1314: LD_INT 5
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PPUSH
1325: CALL_OW 69
1329: ST_TO_ADDR
// end ; class_engineer :
1330: GO 1571
1332: LD_INT 2
1334: DOUBLE
1335: EQUAL
1336: IFTRUE 1340
1338: GO 1379
1340: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1341: LD_ADDR_VAR 0 5
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_OWVAR 20
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 30
1360: PUSH
1361: LD_INT 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 69
1376: ST_TO_ADDR
1377: GO 1571
1379: LD_INT 3
1381: DOUBLE
1382: EQUAL
1383: IFTRUE 1387
1385: GO 1476
1387: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 5
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_OWVAR 20
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 21
1407: PUSH
1408: LD_INT 2
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: PUSH
1415: LD_INT 58
1417: PUSH
1418: EMPTY
1419: LIST
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: PPUSH
1426: CALL_OW 69
1430: ST_TO_ADDR
// if not b then
1431: LD_VAR 0 5
1435: NOT
1436: IFFALSE 1474
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1438: LD_ADDR_VAR 0 5
1442: PUSH
1443: LD_INT 22
1445: PUSH
1446: LD_OWVAR 20
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 30
1457: PUSH
1458: LD_INT 3
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PPUSH
1469: CALL_OW 69
1473: ST_TO_ADDR
// end ; class_scientistic :
1474: GO 1571
1476: LD_INT 4
1478: DOUBLE
1479: EQUAL
1480: IFTRUE 1484
1482: GO 1523
1484: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1485: LD_ADDR_VAR 0 5
1489: PUSH
1490: LD_INT 22
1492: PUSH
1493: LD_OWVAR 20
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 30
1504: PUSH
1505: LD_INT 8
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 69
1520: ST_TO_ADDR
// end ; class_apeman_soldier :
1521: GO 1571
1523: LD_INT 15
1525: DOUBLE
1526: EQUAL
1527: IFTRUE 1531
1529: GO 1570
1531: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: LD_INT 22
1539: PUSH
1540: LD_OWVAR 20
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 30
1551: PUSH
1552: LD_INT 5
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PPUSH
1563: CALL_OW 69
1567: ST_TO_ADDR
1568: GO 1571
1570: POP
// if b then
1571: LD_VAR 0 5
1575: IFFALSE 1646
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1577: LD_VAR 0 5
1581: PUSH
1582: LD_INT 1
1584: ARRAY
1585: PPUSH
1586: CALL_OW 266
1590: PUSH
1591: LD_INT 31
1593: EQUAL
1594: IFFALSE 1616
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1596: LD_VAR 0 2
1600: PPUSH
1601: LD_VAR 0 5
1605: PUSH
1606: LD_INT 1
1608: ARRAY
1609: PPUSH
1610: CALL 4814 0 2
1614: GO 1644
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1616: LD_VAR 0 2
1620: PPUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_INT 1
1628: PPUSH
1629: LD_VAR 0 5
1633: PPUSH
1634: CALL_OW 12
1638: ARRAY
1639: PPUSH
1640: CALL_OW 52
1644: GO 1671
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1646: LD_VAR 0 2
1650: PPUSH
1651: LD_VAR 0 14
1655: PPUSH
1656: LD_VAR 0 15
1660: PPUSH
1661: LD_INT 15
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL_OW 50
// end ;
1671: GO 1196
1673: POP
1674: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1675: LD_ADDR_VAR 0 16
1679: PUSH
1680: LD_INT 26
1682: PUSH
1683: LD_INT 3
1685: PUSH
1686: LD_INT 2
1688: PUSH
1689: LD_INT 1
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: PUSH
1697: LD_OWVAR 67
1701: ARRAY
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: LD_INT 3
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_OWVAR 67
1728: ARRAY
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 24
1736: PUSH
1737: LD_INT 5
1739: PUSH
1740: LD_INT 5
1742: PUSH
1743: LD_INT 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: LD_OWVAR 67
1755: ARRAY
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 30
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_OWVAR 67
1782: ARRAY
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1794: LD_ADDR_VAR 0 2
1798: PUSH
1799: LD_INT 22
1801: PUSH
1802: LD_OWVAR 20
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 30
1813: PUSH
1814: LD_INT 32
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: CALL_OW 69
1829: PUSH
1830: FOR_IN
1831: IFFALSE 2004
// begin if weapons then
1833: LD_VAR 0 16
1837: IFFALSE 1961
// begin k := rand ( 1 , weapons ) ;
1839: LD_ADDR_VAR 0 3
1843: PUSH
1844: LD_INT 1
1846: PPUSH
1847: LD_VAR 0 16
1851: PPUSH
1852: CALL_OW 12
1856: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1857: LD_ADDR_VAR 0 17
1861: PUSH
1862: LD_VAR 0 16
1866: PUSH
1867: LD_VAR 0 3
1871: ARRAY
1872: PUSH
1873: LD_INT 1
1875: ARRAY
1876: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1877: LD_ADDR_VAR 0 16
1881: PUSH
1882: LD_VAR 0 16
1886: PPUSH
1887: LD_VAR 0 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: LD_VAR 0 16
1899: PUSH
1900: LD_VAR 0 3
1904: ARRAY
1905: PUSH
1906: LD_INT 2
1908: ARRAY
1909: PUSH
1910: LD_INT 1
1912: MINUS
1913: PPUSH
1914: CALL 4906 0 4
1918: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1919: LD_VAR 0 16
1923: PUSH
1924: LD_VAR 0 3
1928: ARRAY
1929: PUSH
1930: LD_INT 2
1932: ARRAY
1933: PUSH
1934: LD_INT 0
1936: EQUAL
1937: IFFALSE 1959
// weapons := Delete ( weapons , k ) ;
1939: LD_ADDR_VAR 0 16
1943: PUSH
1944: LD_VAR 0 16
1948: PPUSH
1949: LD_VAR 0 3
1953: PPUSH
1954: CALL_OW 3
1958: ST_TO_ADDR
// end else
1959: GO 1988
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1961: LD_ADDR_VAR 0 17
1965: PUSH
1966: LD_INT 27
1968: PUSH
1969: LD_INT 23
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 12
1986: ARRAY
1987: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_VAR 0 17
1997: PPUSH
1998: CALL_OW 431
// end ;
2002: GO 1830
2004: POP
2005: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_VAR 0 8
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: CALL_OW 380
// hc_gallery := potter ;
2025: LD_ADDR_OWVAR 33
2029: PUSH
2030: LD_STRING potter
2032: ST_TO_ADDR
// hc_face_number := 1 ;
2033: LD_ADDR_OWVAR 34
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// hc_importance := 100 ;
2041: LD_ADDR_OWVAR 32
2045: PUSH
2046: LD_INT 100
2048: ST_TO_ADDR
// hc_name := Mike Gerste ;
2049: LD_ADDR_OWVAR 26
2053: PUSH
2054: LD_STRING Mike Gerste
2056: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2057: LD_ADDR_OWVAR 29
2061: PUSH
2062: LD_INT 10
2064: PUSH
2065: LD_INT 11
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: ST_TO_ADDR
// legion_commander := CreateHuman ;
2072: LD_ADDR_EXP 1
2076: PUSH
2077: CALL_OW 44
2081: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2082: LD_EXP 1
2086: PPUSH
2087: LD_INT 23
2089: PPUSH
2090: CALL_OW 52
// uc_side := 5 ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_INT 5
2101: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 4
2107: PPUSH
2108: LD_VAR 0 8
2112: PPUSH
2113: CALL_OW 380
// hc_gallery := potter ;
2117: LD_ADDR_OWVAR 33
2121: PUSH
2122: LD_STRING potter
2124: ST_TO_ADDR
// hc_face_number := 2 ;
2125: LD_ADDR_OWVAR 34
2129: PUSH
2130: LD_INT 2
2132: ST_TO_ADDR
// hc_importance := 0 ;
2133: LD_ADDR_OWVAR 32
2137: PUSH
2138: LD_INT 0
2140: ST_TO_ADDR
// hc_name := George Potter ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING George Potter
2148: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 12
2156: PUSH
2157: LD_INT 9
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// potter := CreateHuman ;
2164: LD_ADDR_EXP 4
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2174: LD_EXP 4
2178: PPUSH
2179: LD_INT 4
2181: PPUSH
2182: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2186: LD_EXP 4
2190: PPUSH
2191: LD_INT 103
2193: PPUSH
2194: LD_INT 45
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2204: LD_EXP 4
2208: PPUSH
2209: LD_INT 23
2211: PPUSH
2212: CALL_OW 119
// InitHc ( ) ;
2216: CALL_OW 19
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
// uc_side := 5 ;
2232: LD_ADDR_OWVAR 20
2236: PUSH
2237: LD_INT 5
2239: ST_TO_ADDR
// uc_nation := nation_arabian ;
2240: LD_ADDR_OWVAR 21
2244: PUSH
2245: LD_INT 2
2247: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: LD_INT 22
2255: PUSH
2256: LD_OWVAR 20
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 30
2267: PUSH
2268: LD_INT 5
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: ST_TO_ADDR
// for i = 1 to 3 do
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: DOUBLE
2290: LD_INT 1
2292: DEC
2293: ST_TO_ADDR
2294: LD_INT 3
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2336
// begin PrepareHuman ( false , 2 , 6 ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: LD_INT 6
2308: PPUSH
2309: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2313: CALL_OW 44
2317: PPUSH
2318: LD_INT 27
2320: PPUSH
2321: LD_INT 22
2323: PPUSH
2324: LD_INT 5
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 50
// end ;
2334: GO 2297
2336: POP
2337: POP
// for i = 1 to 3 do
2338: LD_ADDR_VAR 0 2
2342: PUSH
2343: DOUBLE
2344: LD_INT 1
2346: DEC
2347: ST_TO_ADDR
2348: LD_INT 3
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2387
// begin PrepareHuman ( false , 1 , 6 ) ;
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 6
2362: PPUSH
2363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2367: CALL_OW 44
2371: PPUSH
2372: LD_VAR 0 4
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: CALL_OW 52
// end ;
2385: GO 2351
2387: POP
2388: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2389: LD_ADDR_VAR 0 2
2393: PUSH
2394: LD_INT 22
2396: PUSH
2397: LD_OWVAR 20
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 31
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 32
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 69
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2531
// begin PrepareHuman ( false , 1 , 6 ) ;
2446: LD_INT 0
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: LD_INT 6
2454: PPUSH
2455: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2459: CALL_OW 44
2463: PPUSH
2464: LD_VAR 0 2
2468: PPUSH
2469: CALL 4814 0 2
// if GetBType ( i ) = b_bunker then
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 266
2482: PUSH
2483: LD_INT 32
2485: EQUAL
2486: IFFALSE 2529
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2488: LD_VAR 0 2
2492: PPUSH
2493: LD_INT 27
2495: PUSH
2496: LD_INT 25
2498: PUSH
2499: LD_INT 24
2501: PUSH
2502: LD_INT 28
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: LD_VAR 0 2
2515: PUSH
2516: LD_INT 4
2518: MOD
2519: PUSH
2520: LD_INT 1
2522: PLUS
2523: ARRAY
2524: PPUSH
2525: CALL_OW 431
// end ;
2529: GO 2443
2531: POP
2532: POP
// for i = 1 to 3 do
2533: LD_ADDR_VAR 0 2
2537: PUSH
2538: DOUBLE
2539: LD_INT 1
2541: DEC
2542: ST_TO_ADDR
2543: LD_INT 3
2545: PUSH
2546: FOR_TO
2547: IFFALSE 2664
// begin vc_chassis := ar_half_tracked ;
2549: LD_ADDR_OWVAR 37
2553: PUSH
2554: LD_INT 14
2556: ST_TO_ADDR
// vc_engine := engine_solar ;
2557: LD_ADDR_OWVAR 39
2561: PUSH
2562: LD_INT 2
2564: ST_TO_ADDR
// vc_control := control_manual ;
2565: LD_ADDR_OWVAR 38
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2573: LD_ADDR_OWVAR 40
2577: PUSH
2578: LD_INT 25
2580: PUSH
2581: LD_INT 27
2583: PUSH
2584: LD_INT 26
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: ST_TO_ADDR
// un := CreateVehicle ;
2598: LD_ADDR_VAR 0 3
2602: PUSH
2603: CALL_OW 45
2607: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2608: LD_VAR 0 3
2612: PPUSH
2613: LD_INT 5
2615: PPUSH
2616: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 8
2627: PPUSH
2628: LD_INT 0
2630: PPUSH
2631: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: LD_INT 7
2643: PPUSH
2644: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2648: CALL_OW 44
2652: PPUSH
2653: LD_VAR 0 3
2657: PPUSH
2658: CALL_OW 52
// end ;
2662: GO 2546
2664: POP
2665: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 6
2674: PPUSH
2675: CALL_OW 380
// al_commander := CreateHuman ;
2679: LD_ADDR_EXP 5
2683: PUSH
2684: CALL_OW 44
2688: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2689: LD_EXP 5
2693: PPUSH
2694: LD_INT 22
2696: PUSH
2697: LD_OWVAR 20
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PPUSH
2720: CALL_OW 69
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: PPUSH
2729: CALL_OW 52
// InitHc ( ) ;
2733: CALL_OW 19
// end ;
2737: LD_VAR 0 1
2741: RET
// export function ChangeSide ( ) ; var i ; begin
2742: LD_INT 0
2744: PPUSH
2745: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2746: LD_ADDR_VAR 0 2
2750: PUSH
2751: LD_INT 22
2753: PUSH
2754: LD_INT 5
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PPUSH
2761: CALL_OW 69
2765: PUSH
2766: FOR_IN
2767: IFFALSE 2783
// SetSide ( i , 8 ) ;
2769: LD_VAR 0 2
2773: PPUSH
2774: LD_INT 8
2776: PPUSH
2777: CALL_OW 235
2781: GO 2766
2783: POP
2784: POP
// end ;
2785: LD_VAR 0 1
2789: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2790: LD_INT 22
2792: PUSH
2793: LD_INT 5
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 69
2804: IFFALSE 3318
2806: GO 2808
2808: DISABLE
2809: LD_INT 0
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
// begin enable ;
2817: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: LD_INT 22
2825: PUSH
2826: LD_INT 5
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 2
2835: PUSH
2836: LD_INT 21
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 21
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PPUSH
2865: CALL_OW 69
2869: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2870: LD_ADDR_VAR 0 5
2874: PUSH
2875: LD_INT 22
2877: PUSH
2878: LD_INT 5
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 32
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: LD_INT 24
2900: PUSH
2901: LD_INT 1000
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: PPUSH
2917: CALL_OW 69
2921: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2922: LD_ADDR_VAR 0 6
2926: PUSH
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 3
2934: PUSH
2935: LD_INT 54
2937: PUSH
2938: EMPTY
2939: LIST
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_INT 25
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: ST_TO_ADDR
// if not list then
2964: LD_VAR 0 2
2968: NOT
2969: IFFALSE 2973
// exit ;
2971: GO 3318
// for i in list do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: LD_VAR 0 2
2982: PUSH
2983: FOR_IN
2984: IFFALSE 3316
// begin if b then
2986: LD_VAR 0 5
2990: IFFALSE 3069
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2992: LD_ADDR_VAR 0 4
2996: PUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_INT 25
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PUSH
3017: FOR_IN
3018: IFFALSE 3067
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3020: LD_VAR 0 4
3024: PPUSH
3025: CALL_OW 314
3029: NOT
3030: PUSH
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 110
3040: PUSH
3041: LD_INT 7
3043: NONEQUAL
3044: AND
3045: IFFALSE 3065
// ComRepairBuilding ( j , b [ 1 ] ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 130
3065: GO 3017
3067: POP
3068: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 256
3078: PUSH
3079: LD_INT 500
3081: LESS
3082: PUSH
3083: LD_VAR 0 1
3087: PPUSH
3088: CALL_OW 110
3092: PUSH
3093: LD_INT 7
3095: EQUAL
3096: NOT
3097: AND
3098: IFFALSE 3148
// begin ComMoveToArea ( i , guard_hill ) ;
3100: LD_VAR 0 1
3104: PPUSH
3105: LD_INT 11
3107: PPUSH
3108: CALL_OW 113
// SetTag ( i , 7 ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 247
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: IFFALSE 3148
// begin AddComExitVehicle ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3148: LD_VAR 0 1
3152: PPUSH
3153: CALL_OW 256
3157: PUSH
3158: LD_INT 1000
3160: EQUAL
3161: PUSH
3162: LD_VAR 0 1
3166: PPUSH
3167: CALL_OW 110
3171: PUSH
3172: LD_INT 7
3174: EQUAL
3175: AND
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: CALL_OW 310
3186: NOT
3187: AND
3188: PUSH
3189: LD_VAR 0 6
3193: AND
3194: IFFALSE 3222
// begin SetTag ( i , 0 ) ;
3196: LD_VAR 0 1
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3208: LD_VAR 0 6
3212: PPUSH
3213: LD_VAR 0 1
3217: PPUSH
3218: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: CALL_OW 247
3231: PUSH
3232: LD_INT 2
3234: EQUAL
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 110
3245: PUSH
3246: LD_INT 7
3248: NONEQUAL
3249: AND
3250: PUSH
3251: LD_VAR 0 1
3255: PPUSH
3256: CALL_OW 314
3260: NOT
3261: AND
3262: IFFALSE 3314
// if FilterAllUnits ( [ f_side , 7 ] ) then
3264: LD_INT 22
3266: PUSH
3267: LD_INT 7
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 69
3278: IFFALSE 3314
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3280: LD_VAR 0 1
3284: PPUSH
3285: LD_INT 22
3287: PUSH
3288: LD_INT 7
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PPUSH
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 74
3309: PPUSH
3310: CALL_OW 115
// end ;
3314: GO 2983
3316: POP
3317: POP
// end ; end_of_file
3318: PPOPN 6
3320: END
// export function Game ; var i , val , areas , wave ; begin
3321: LD_INT 0
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
3327: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: LD_INT 1
3335: PUSH
3336: LD_INT 2
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 4
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: LD_INT 6
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_INT 5
3366: PUSH
3367: LD_INT 6
3369: PUSH
3370: LD_INT 7
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: PUSH
3378: LD_OWVAR 67
3382: ARRAY
3383: ST_TO_ADDR
// wave := 1 ;
3384: LD_ADDR_VAR 0 5
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// while not game_over do
3392: LD_EXP 7
3396: NOT
3397: IFFALSE 3553
// begin repeat begin Wait ( 0 0$01 ) ;
3399: LD_INT 35
3401: PPUSH
3402: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3406: LD_ADDR_EXP 11
3410: PUSH
3411: LD_EXP 11
3415: PUSH
3416: LD_INT 35
3418: PLUS
3419: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3420: LD_INT 22
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: PUSH
3435: LD_INT 10
3437: LESS
3438: PUSH
3439: LD_EXP 11
3443: PUSH
3444: LD_INT 21000
3446: GREATEREQUAL
3447: OR
3448: IFFALSE 3399
// wave_time := 0 0$00 ;
3450: LD_ADDR_EXP 11
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3458: LD_INT 5250
3460: PPUSH
3461: CALL_OW 67
// if not ignore_wave then
3465: LD_EXP 15
3469: NOT
3470: IFFALSE 3543
// begin for i = 1 to areas do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_VAR 0 4
3486: PUSH
3487: FOR_TO
3488: IFFALSE 3525
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3490: LD_VAR 0 5
3494: PUSH
3495: LD_VAR 0 3
3499: PLUS
3500: PPUSH
3501: LD_VAR 0 4
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PPUSH
3512: CALL 3558 0 2
// Wait ( 0 0$10 ) ;
3516: LD_INT 350
3518: PPUSH
3519: CALL_OW 67
// end ;
3523: GO 3487
3525: POP
3526: POP
// wave := wave + 1 ;
3527: LD_ADDR_VAR 0 5
3531: PUSH
3532: LD_VAR 0 5
3536: PUSH
3537: LD_INT 1
3539: PLUS
3540: ST_TO_ADDR
// end else
3541: GO 3551
// ignore_wave := false ;
3543: LD_ADDR_EXP 15
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// end ;
3551: GO 3392
// end ;
3553: LD_VAR 0 1
3557: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// uc_side := 7 ;
3565: LD_ADDR_OWVAR 20
3569: PUSH
3570: LD_INT 7
3572: ST_TO_ADDR
// uc_nation := 2 ;
3573: LD_ADDR_OWVAR 21
3577: PUSH
3578: LD_INT 2
3580: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3581: LD_ADDR_VAR 0 5
3585: PUSH
3586: LD_INT 10
3588: PUSH
3589: LD_OWVAR 1
3593: PUSH
3594: LD_INT 10500
3596: DIV
3597: PLUS
3598: ST_TO_ADDR
// if v > 25 then
3599: LD_VAR 0 5
3603: PUSH
3604: LD_INT 25
3606: GREATER
3607: IFFALSE 3617
// v := 25 ;
3609: LD_ADDR_VAR 0 5
3613: PUSH
3614: LD_INT 25
3616: ST_TO_ADDR
// InitHc ( ) ;
3617: CALL_OW 19
// hc_gallery :=  ;
3621: LD_ADDR_OWVAR 33
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// hc_importance := 0 ;
3629: LD_ADDR_OWVAR 32
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// hc_name :=  ;
3637: LD_ADDR_OWVAR 26
3641: PUSH
3642: LD_STRING 
3644: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3645: LD_ADDR_OWVAR 29
3649: PUSH
3650: LD_VAR 0 5
3654: PUSH
3655: LD_VAR 0 5
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: ST_TO_ADDR
// if val > 35 then
3664: LD_VAR 0 1
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: IFFALSE 3682
// val := 35 ;
3674: LD_ADDR_VAR 0 1
3678: PUSH
3679: LD_INT 35
3681: ST_TO_ADDR
// for i = 1 to val do
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: DOUBLE
3688: LD_INT 1
3690: DEC
3691: ST_TO_ADDR
3692: LD_VAR 0 1
3696: PUSH
3697: FOR_TO
3698: IFFALSE 3911
// begin if i mod 9 = 0 then
3700: LD_VAR 0 4
3704: PUSH
3705: LD_INT 9
3707: MOD
3708: PUSH
3709: LD_INT 0
3711: EQUAL
3712: IFFALSE 3724
// class := class_apeman_kamikaze else
3714: LD_ADDR_VAR 0 7
3718: PUSH
3719: LD_INT 17
3721: ST_TO_ADDR
3722: GO 3756
// if i mod 4 = 0 then
3724: LD_VAR 0 4
3728: PUSH
3729: LD_INT 4
3731: MOD
3732: PUSH
3733: LD_INT 0
3735: EQUAL
3736: IFFALSE 3748
// class := class_apeman_soldier else
3738: LD_ADDR_VAR 0 7
3742: PUSH
3743: LD_INT 15
3745: ST_TO_ADDR
3746: GO 3756
// class := class_apeman ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 12
3755: ST_TO_ADDR
// if i mod 6 = 0 then
3756: LD_VAR 0 4
3760: PUSH
3761: LD_INT 6
3763: MOD
3764: PUSH
3765: LD_INT 0
3767: EQUAL
3768: IFFALSE 3843
// begin vc_chassis := ar_half_tracked ;
3770: LD_ADDR_OWVAR 37
3774: PUSH
3775: LD_INT 14
3777: ST_TO_ADDR
// vc_control := control_apeman ;
3778: LD_ADDR_OWVAR 38
3782: PUSH
3783: LD_INT 5
3785: ST_TO_ADDR
// vc_engine := engine_siberite ;
3786: LD_ADDR_OWVAR 39
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3794: LD_ADDR_OWVAR 40
3798: PUSH
3799: LD_INT 28
3801: PUSH
3802: LD_INT 27
3804: PUSH
3805: LD_INT 29
3807: PUSH
3808: LD_EXP 22
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 1
3821: PPUSH
3822: LD_INT 4
3824: PPUSH
3825: CALL_OW 12
3829: ARRAY
3830: ST_TO_ADDR
// un := CreateVehicle ;
3831: LD_ADDR_VAR 0 6
3835: PUSH
3836: CALL_OW 45
3840: ST_TO_ADDR
// end else
3841: GO 3868
// begin PrepareHuman ( sex_male , class , 10 ) ;
3843: LD_INT 1
3845: PPUSH
3846: LD_VAR 0 7
3850: PPUSH
3851: LD_INT 10
3853: PPUSH
3854: CALL_OW 380
// un := CreateHuman ;
3858: LD_ADDR_VAR 0 6
3862: PUSH
3863: CALL_OW 44
3867: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3868: LD_VAR 0 6
3872: PPUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3885: LD_VAR 0 6
3889: PPUSH
3890: CALL_OW 250
3894: PPUSH
3895: LD_VAR 0 6
3899: PPUSH
3900: CALL_OW 251
3904: PPUSH
3905: CALL_OW 494
// end ;
3909: GO 3697
3911: POP
3912: POP
// end ;
3913: LD_VAR 0 3
3917: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3918: LD_EXP 6
3922: PUSH
3923: LD_EXP 7
3927: NOT
3928: AND
3929: IFFALSE 4048
3931: GO 3933
3933: DISABLE
3934: LD_INT 0
3936: PPUSH
3937: PPUSH
3938: PPUSH
// begin enable ;
3939: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3940: LD_ADDR_VAR 0 2
3944: PUSH
3945: LD_INT 22
3947: PUSH
3948: LD_INT 7
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 69
3959: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: LD_INT 81
3967: PUSH
3968: LD_INT 7
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 69
3979: ST_TO_ADDR
// if not list then
3980: LD_VAR 0 2
3984: NOT
3985: IFFALSE 3989
// exit ;
3987: GO 4048
// for i in list do
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_VAR 0 2
3998: PUSH
3999: FOR_IN
4000: IFFALSE 4046
// begin if enemy then
4002: LD_VAR 0 3
4006: IFFALSE 4044
// if not HasTask ( i ) then
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 314
4017: NOT
4018: IFFALSE 4044
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4020: LD_VAR 0 1
4024: PPUSH
4025: LD_VAR 0 3
4029: PPUSH
4030: LD_VAR 0 1
4034: PPUSH
4035: CALL_OW 74
4039: PPUSH
4040: CALL_OW 115
// end ;
4044: GO 3999
4046: POP
4047: POP
// end ; end_of_file
4048: PPOPN 3
4050: END
// export function Action ; begin
4051: LD_INT 0
4053: PPUSH
// InGameOn ;
4054: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4058: LD_INT 23
4060: PPUSH
4061: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4065: LD_EXP 1
4069: PPUSH
4070: LD_STRING DL-1
4072: PPUSH
4073: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4077: LD_EXP 2
4081: PPUSH
4082: LD_STRING DA-1
4084: PPUSH
4085: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4089: LD_EXP 3
4093: PPUSH
4094: LD_STRING DA-2
4096: PPUSH
4097: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4101: LD_EXP 1
4105: PPUSH
4106: LD_STRING DL-2
4108: PPUSH
4109: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4113: LD_EXP 3
4117: PPUSH
4118: LD_STRING DA-3
4120: PPUSH
4121: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4125: LD_EXP 1
4129: PPUSH
4130: LD_STRING DL-3
4132: PPUSH
4133: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4137: LD_EXP 2
4141: PPUSH
4142: LD_STRING DA-4
4144: PPUSH
4145: CALL_OW 88
// if not dialogue_skipped then
4149: LD_OWVAR 59
4153: NOT
4154: IFFALSE 4239
// begin Wait ( 0 0$01 ) ;
4156: LD_INT 35
4158: PPUSH
4159: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4163: LD_EXP 2
4167: PUSH
4168: LD_EXP 3
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4181: LD_EXP 2
4185: PPUSH
4186: LD_INT 107
4188: PPUSH
4189: LD_INT 53
4191: PPUSH
4192: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4196: LD_EXP 3
4200: PPUSH
4201: LD_INT 108
4203: PPUSH
4204: LD_INT 53
4206: PPUSH
4207: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4211: LD_EXP 2
4215: PPUSH
4216: LD_EXP 4
4220: PPUSH
4221: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4225: LD_EXP 3
4229: PPUSH
4230: LD_EXP 4
4234: PPUSH
4235: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4239: LD_INT 35
4241: PPUSH
4242: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4246: LD_EXP 2
4250: PPUSH
4251: LD_INT 107
4253: PPUSH
4254: LD_INT 53
4256: PPUSH
4257: CALL_OW 307
4261: PUSH
4262: LD_OWVAR 59
4266: OR
4267: IFFALSE 4239
// if not dialogue_skipped then
4269: LD_OWVAR 59
4273: NOT
4274: IFFALSE 4375
// begin ComTurnUnit ( potter , l1 ) ;
4276: LD_EXP 4
4280: PPUSH
4281: LD_EXP 2
4285: PPUSH
4286: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4290: LD_INT 10
4292: PPUSH
4293: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4297: LD_EXP 4
4301: PPUSH
4302: LD_INT 108
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: LD_INT 0
4313: PPUSH
4314: CALL_OW 483
// Wait ( 0 0$01 ) ;
4318: LD_INT 35
4320: PPUSH
4321: CALL_OW 67
// RemoveUnit ( potter ) ;
4325: LD_EXP 4
4329: PPUSH
4330: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DA-5
4341: PPUSH
4342: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4346: LD_EXP 3
4350: PPUSH
4351: LD_STRING DA-6
4353: PPUSH
4354: CALL_OW 88
// Wait ( 0 0$02 ) ;
4358: LD_INT 70
4360: PPUSH
4361: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4365: LD_INT 25
4367: PPUSH
4368: LD_INT 19
4370: PPUSH
4371: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4375: LD_INT 20
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL 3558 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4385: LD_EXP 5
4389: PPUSH
4390: LD_STRING DLa-1
4392: PPUSH
4393: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4397: LD_EXP 1
4401: PPUSH
4402: LD_STRING DL-5
4404: PPUSH
4405: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4409: LD_INT 23
4411: PPUSH
4412: CALL_OW 87
// InGameOff ;
4416: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4420: LD_STRING C1
4422: PPUSH
4423: CALL_OW 337
// alert := true ;
4427: LD_ADDR_EXP 6
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4435: LD_EXP 5
4439: PPUSH
4440: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4444: LD_EXP 5
4448: PPUSH
4449: LD_INT 11
4451: PPUSH
4452: CALL_OW 173
// Wait ( 0 0$30 ) ;
4456: LD_INT 1050
4458: PPUSH
4459: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4463: LD_INT 10
4465: PPUSH
4466: LD_INT 4
4468: PPUSH
4469: CALL 3558 0 2
// Wait ( 0 0$35 ) ;
4473: LD_INT 1225
4475: PPUSH
4476: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4480: LD_INT 10
4482: PPUSH
4483: LD_INT 5
4485: PPUSH
4486: CALL 3558 0 2
// Wait ( 0 0$03 ) ;
4490: LD_INT 105
4492: PPUSH
4493: CALL_OW 67
// Game ;
4497: CALL 3321 0 0
// end ;
4501: LD_VAR 0 1
4505: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4506: LD_INT 22
4508: PUSH
4509: LD_INT 7
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 69
4520: PUSH
4521: LD_INT 0
4523: EQUAL
4524: PUSH
4525: LD_EXP 10
4529: PUSH
4530: LD_INT 1500
4532: GREATEREQUAL
4533: AND
4534: IFFALSE 4762
4536: GO 4538
4538: DISABLE
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// begin DialogueOn ;
4543: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4547: LD_EXP 12
4551: PPUSH
4552: LD_STRING DVr-1
4554: PPUSH
4555: CALL_OW 94
// DialogueOff ;
4559: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4563: LD_STRING QBonusInfo
4565: PPUSH
4566: CALL_OW 97
4570: PUSH
4571: LD_INT 1
4573: DOUBLE
4574: EQUAL
4575: IFTRUE 4579
4577: GO 4590
4579: POP
// bonus_active := true ; end ;
4580: LD_ADDR_EXP 13
4584: PUSH
4585: LD_INT 1
4587: ST_TO_ADDR
4588: GO 4591
4590: POP
// bonus_num := 4 ;
4591: LD_ADDR_EXP 14
4595: PUSH
4596: LD_INT 4
4598: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ;
4599: LD_OWVAR 2
4603: PPUSH
4604: LD_INT 12
4606: PPUSH
4607: LD_INT 2
4609: PPUSH
4610: LD_INT 23
4612: PPUSH
4613: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4617: LD_ADDR_VAR 0 1
4621: PUSH
4622: LD_INT 500
4624: PUSH
4625: LD_INT 3500
4627: PUSH
4628: LD_INT 5750
4630: PUSH
4631: LD_INT 10000
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4640: LD_INT 10500
4642: PUSH
4643: LD_INT 12600
4645: PUSH
4646: LD_INT 14700
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_OWVAR 67
4658: ARRAY
4659: PPUSH
4660: CALL_OW 67
// for i = 1 to tmp do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_VAR 0 1
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4712
// if points >= tmp [ i ] then
4682: LD_EXP 10
4686: PUSH
4687: LD_VAR 0 1
4691: PUSH
4692: LD_VAR 0 2
4696: ARRAY
4697: GREATEREQUAL
4698: IFFALSE 4710
// bonus_num := i ;
4700: LD_ADDR_EXP 14
4704: PUSH
4705: LD_VAR 0 2
4709: ST_TO_ADDR
4710: GO 4679
4712: POP
4713: POP
// case Query ( QBonusInfo ) of 1 :
4714: LD_STRING QBonusInfo
4716: PPUSH
4717: CALL_OW 97
4721: PUSH
4722: LD_INT 1
4724: DOUBLE
4725: EQUAL
4726: IFTRUE 4730
4728: GO 4751
4730: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4731: LD_OWVAR 2
4735: PPUSH
4736: LD_INT 12
4738: PPUSH
4739: LD_INT 2
4741: PPUSH
4742: LD_INT 23
4744: PPUSH
4745: CALL_OW 468
4749: GO 4752
4751: POP
// until points >= 15000 ;
4752: LD_EXP 10
4756: PUSH
4757: LD_INT 15000
4759: GREATEREQUAL
4760: IFFALSE 4640
// end ;
4762: PPOPN 2
4764: END
// export function Win ; begin
4765: LD_INT 0
4767: PPUSH
// AddMedal ( med , 1 ) ;
4768: LD_STRING med
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 101
// AddMedal ( med , 1 ) ;
4778: LD_STRING med
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 101
// AddMedal ( med , 1 ) ;
4788: LD_STRING med
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 101
// GiveMedals ( MAIN ) ;
4798: LD_STRING MAIN
4800: PPUSH
4801: CALL_OW 102
// YouWin ;
4805: CALL_OW 103
// end ; end_of_file
4809: LD_VAR 0 1
4813: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4814: LD_INT 0
4816: PPUSH
4817: PPUSH
// dir := GetDir ( b ) ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: LD_VAR 0 2
4827: PPUSH
4828: CALL_OW 254
4832: ST_TO_ADDR
// if dir < 3 then
4833: LD_VAR 0 4
4837: PUSH
4838: LD_INT 3
4840: LESS
4841: IFFALSE 4859
// dir := dir + 3 else
4843: LD_ADDR_VAR 0 4
4847: PUSH
4848: LD_VAR 0 4
4852: PUSH
4853: LD_INT 3
4855: PLUS
4856: ST_TO_ADDR
4857: GO 4873
// dir := dir - 3 ;
4859: LD_ADDR_VAR 0 4
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: LD_INT 3
4871: MINUS
4872: ST_TO_ADDR
// SetDir ( un , dir ) ;
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_VAR 0 4
4882: PPUSH
4883: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_VAR 0 2
4896: PPUSH
4897: CALL_OW 52
// end ;
4901: LD_VAR 0 3
4905: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4906: LD_INT 0
4908: PPUSH
4909: PPUSH
4910: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4911: LD_ADDR_VAR 0 7
4915: PUSH
4916: LD_VAR 0 1
4920: PUSH
4921: LD_VAR 0 2
4925: ARRAY
4926: PPUSH
4927: LD_VAR 0 3
4931: PPUSH
4932: LD_VAR 0 4
4936: PPUSH
4937: CALL_OW 1
4941: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4942: LD_ADDR_VAR 0 1
4946: PUSH
4947: LD_VAR 0 1
4951: PPUSH
4952: LD_VAR 0 2
4956: PPUSH
4957: LD_VAR 0 7
4961: PPUSH
4962: CALL_OW 1
4966: ST_TO_ADDR
// result := tab ;
4967: LD_ADDR_VAR 0 5
4971: PUSH
4972: LD_VAR 0 1
4976: ST_TO_ADDR
// end ;
4977: LD_VAR 0 5
4981: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4982: LD_INT 0
4984: PPUSH
4985: PPUSH
4986: PPUSH
// if not GetControl ( veh ) = control_manual then
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL_OW 263
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: NOT
5001: IFFALSE 5013
// result := false else
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: LD_INT 0
5010: ST_TO_ADDR
5011: GO 5158
// if veh in FilterAllUnits ( [ f_empty ] ) then
5013: LD_VAR 0 1
5017: PUSH
5018: LD_INT 58
5020: PUSH
5021: EMPTY
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: IN
5029: IFFALSE 5041
// result := false else
5031: LD_ADDR_VAR 0 2
5035: PUSH
5036: LD_INT 0
5038: ST_TO_ADDR
5039: GO 5158
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5041: LD_ADDR_VAR 0 4
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 55
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 69
5077: ST_TO_ADDR
// if not filter then
5078: LD_VAR 0 4
5082: NOT
5083: IFFALSE 5095
// result := false else
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_INT 0
5092: ST_TO_ADDR
5093: GO 5158
// for i = 1 to filter do
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_VAR 0 4
5109: PUSH
5110: FOR_TO
5111: IFFALSE 5156
// if IsDriver ( filter [ i ] ) = veh then
5113: LD_VAR 0 4
5117: PUSH
5118: LD_VAR 0 3
5122: ARRAY
5123: PPUSH
5124: CALL 62193 0 1
5128: PUSH
5129: LD_VAR 0 1
5133: EQUAL
5134: IFFALSE 5154
// begin result := filter [ i ] ;
5136: LD_ADDR_VAR 0 2
5140: PUSH
5141: LD_VAR 0 4
5145: PUSH
5146: LD_VAR 0 3
5150: ARRAY
5151: ST_TO_ADDR
// break ;
5152: GO 5156
// end ;
5154: GO 5110
5156: POP
5157: POP
// end ; end ; end_of_file
5158: LD_VAR 0 2
5162: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL 22872 0 1
// if un = legion_commander then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_EXP 1
5181: EQUAL
5182: IFFALSE 5191
// YouLost ( commanderDied ) ;
5184: LD_STRING commanderDied
5186: PPUSH
5187: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5191: LD_VAR 0 1
5195: PUSH
5196: LD_EXP 1
5200: PUSH
5201: LD_INT 23
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: IN
5208: IFFALSE 5218
// game_over := true ;
5210: LD_ADDR_EXP 7
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if un = al_commander then
5218: LD_VAR 0 1
5222: PUSH
5223: LD_EXP 5
5227: EQUAL
5228: IFFALSE 5234
// ChangeSide ( ) ;
5230: CALL 2742 0 0
// if GetSide ( un ) = 7 then
5234: LD_VAR 0 1
5238: PPUSH
5239: CALL_OW 255
5243: PUSH
5244: LD_INT 7
5246: EQUAL
5247: IFFALSE 5365
// begin if GetClass ( un ) = class_apeman then
5249: LD_VAR 0 1
5253: PPUSH
5254: CALL_OW 257
5258: PUSH
5259: LD_INT 12
5261: EQUAL
5262: IFFALSE 5278
// points := points + 6 ;
5264: LD_ADDR_EXP 10
5268: PUSH
5269: LD_EXP 10
5273: PUSH
5274: LD_INT 6
5276: PLUS
5277: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 257
5287: PUSH
5288: LD_INT 17
5290: EQUAL
5291: IFFALSE 5307
// points := points + 11 ;
5293: LD_ADDR_EXP 10
5297: PUSH
5298: LD_EXP 10
5302: PUSH
5303: LD_INT 11
5305: PLUS
5306: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 257
5316: PUSH
5317: LD_INT 15
5319: EQUAL
5320: IFFALSE 5336
// points := points + 14 ;
5322: LD_ADDR_EXP 10
5326: PUSH
5327: LD_EXP 10
5331: PUSH
5332: LD_INT 14
5334: PLUS
5335: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 247
5345: PUSH
5346: LD_INT 2
5348: EQUAL
5349: IFFALSE 5365
// points := points + 50 ;
5351: LD_ADDR_EXP 10
5355: PUSH
5356: LD_EXP 10
5360: PUSH
5361: LD_INT 50
5363: PLUS
5364: ST_TO_ADDR
// end ; end ;
5365: PPOPN 1
5367: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5368: LD_EXP 5
5372: PPUSH
5373: CALL_OW 256
5377: PUSH
5378: LD_INT 1000
5380: LESS
5381: IFFALSE 5413
5383: GO 5385
5385: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5386: LD_EXP 5
5390: PPUSH
5391: CALL_OW 504
5395: PPUSH
5396: CALL_OW 255
5400: PUSH
5401: LD_INT 8
5403: EQUAL
5404: IFFALSE 5413
// YouLost ( FriendlyFire ) ;
5406: LD_STRING FriendlyFire
5408: PPUSH
5409: CALL_OW 104
5413: END
// on DialogueSkipped ( value ) do var i ;
5414: LD_INT 0
5416: PPUSH
// begin RemoveUnit ( potter ) ;
5417: LD_EXP 4
5421: PPUSH
5422: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5426: LD_EXP 2
5430: PUSH
5431: LD_EXP 3
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PPUSH
5440: CALL_OW 122
// Wait ( 1 ) ;
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5451: LD_EXP 2
5455: PPUSH
5456: LD_INT 107
5458: PPUSH
5459: LD_INT 53
5461: PPUSH
5462: LD_INT 0
5464: PPUSH
5465: LD_INT 0
5467: PPUSH
5468: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5472: LD_EXP 3
5476: PPUSH
5477: LD_INT 108
5479: PPUSH
5480: LD_INT 53
5482: PPUSH
5483: LD_INT 0
5485: PPUSH
5486: LD_INT 0
5488: PPUSH
5489: CALL_OW 483
// Wait ( 1 ) ;
5493: LD_INT 1
5495: PPUSH
5496: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5500: LD_EXP 2
5504: PUSH
5505: LD_EXP 3
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: LD_INT 108
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 118
// end ;
5524: PPOPN 2
5526: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
5536: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5537: LD_ADDR_VAR 0 10
5541: PUSH
5542: LD_INT 2
5544: PPUSH
5545: CALL_OW 469
5549: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5550: LD_ADDR_VAR 0 12
5554: PUSH
5555: LD_INT 22
5557: PUSH
5558: LD_OWVAR 2
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 30
5572: PUSH
5573: LD_INT 8
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 30
5582: PUSH
5583: LD_INT 11
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PPUSH
5604: LD_VAR 0 10
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 10
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 73
5626: ST_TO_ADDR
// if icon = art_exp_left then
5627: LD_VAR 0 2
5631: PUSH
5632: LD_INT 1
5634: EQUAL
5635: IFFALSE 5690
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5637: LD_VAR 0 12
5641: PPUSH
5642: LD_EXP 9
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5654: LD_VAR 0 12
5658: PPUSH
5659: LD_EXP 17
5663: PPUSH
5664: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5668: LD_OWVAR 2
5672: PPUSH
5673: LD_INT 1
5675: PPUSH
5676: LD_INT 0
5678: PPUSH
5679: LD_VAR 0 12
5683: PPUSH
5684: CALL_OW 468
// end else
5688: GO 6471
// begin DialogueOn ;
5690: CALL_OW 6
// uc_side := 8 ;
5694: LD_ADDR_OWVAR 20
5698: PUSH
5699: LD_INT 8
5701: ST_TO_ADDR
// uc_nation := 2 ;
5702: LD_ADDR_OWVAR 21
5706: PUSH
5707: LD_INT 2
5709: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5710: LD_ADDR_VAR 0 5
5714: PUSH
5715: LD_STRING QBonus
5717: PUSH
5718: LD_EXP 14
5722: STR
5723: ST_TO_ADDR
// off := true ;
5724: LD_ADDR_VAR 0 6
5728: PUSH
5729: LD_INT 1
5731: ST_TO_ADDR
// units := [ ] ;
5732: LD_ADDR_VAR 0 7
5736: PUSH
5737: EMPTY
5738: ST_TO_ADDR
// crates := 0 ;
5739: LD_ADDR_VAR 0 8
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5747: LD_EXP 12
5751: PPUSH
5752: LD_STRING DVr-2
5754: PPUSH
5755: CALL_OW 94
// wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// case Query ( bonus ) of 1 :
5766: LD_VAR 0 5
5770: PPUSH
5771: CALL_OW 97
5775: PUSH
5776: LD_INT 1
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5869
5784: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5785: LD_ADDR_VAR 0 9
5789: PUSH
5790: LD_INT 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 5
5798: PUSH
5799: LD_INT 8
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: PUSH
5808: LD_EXP 14
5812: ARRAY
5813: ST_TO_ADDR
// for i = 1 to tmp do
5814: LD_ADDR_VAR 0 11
5818: PUSH
5819: DOUBLE
5820: LD_INT 1
5822: DEC
5823: ST_TO_ADDR
5824: LD_VAR 0 9
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5865
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5832: LD_INT 0
5834: PPUSH
5835: LD_INT 15
5837: PPUSH
5838: LD_VAR 0 9
5842: PPUSH
5843: CALL_OW 380
// units := units ^ CreateHuman ;
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: LD_VAR 0 7
5856: PUSH
5857: CALL_OW 44
5861: ADD
5862: ST_TO_ADDR
// end ;
5863: GO 5829
5865: POP
5866: POP
// end ; 2 :
5867: GO 6277
5869: LD_INT 2
5871: DOUBLE
5872: EQUAL
5873: IFTRUE 5877
5875: GO 5909
5877: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5878: LD_ADDR_VAR 0 8
5882: PUSH
5883: LD_INT 100
5885: PUSH
5886: LD_INT 150
5888: PUSH
5889: LD_INT 350
5891: PUSH
5892: LD_INT 500
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: LD_EXP 14
5905: ARRAY
5906: ST_TO_ADDR
// end ; 3 :
5907: GO 6277
5909: LD_INT 3
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 6257
5917: POP
// begin if bonus_num = 1 then
5918: LD_EXP 14
5922: PUSH
5923: LD_INT 1
5925: EQUAL
5926: IFFALSE 5936
// ignore_wave := true ;
5928: LD_ADDR_EXP 15
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// if bonus_num = 2 then
5936: LD_EXP 14
5940: PUSH
5941: LD_INT 2
5943: EQUAL
5944: IFFALSE 6064
// begin for i = 1 to 2 do
5946: LD_ADDR_VAR 0 11
5950: PUSH
5951: DOUBLE
5952: LD_INT 1
5954: DEC
5955: ST_TO_ADDR
5956: LD_INT 2
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6062
// begin uc_nation := nation_arabian ;
5962: LD_ADDR_OWVAR 21
5966: PUSH
5967: LD_INT 2
5969: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5970: LD_ADDR_OWVAR 37
5974: PUSH
5975: LD_INT 14
5977: ST_TO_ADDR
// vc_engine := engine_siberite ;
5978: LD_ADDR_OWVAR 39
5982: PUSH
5983: LD_INT 3
5985: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5986: LD_ADDR_OWVAR 38
5990: PUSH
5991: LD_INT 2
5993: PUSH
5994: LD_INT 5
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 2
6006: PPUSH
6007: CALL_OW 12
6011: ARRAY
6012: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6013: LD_ADDR_OWVAR 40
6017: PUSH
6018: LD_INT 28
6020: PUSH
6021: LD_INT 27
6023: PUSH
6024: LD_INT 25
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 3
6037: PPUSH
6038: CALL_OW 12
6042: ARRAY
6043: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: LD_VAR 0 7
6053: PUSH
6054: CALL_OW 45
6058: ADD
6059: ST_TO_ADDR
// end ;
6060: GO 5959
6062: POP
6063: POP
// end ; if bonus_num = 3 then
6064: LD_EXP 14
6068: PUSH
6069: LD_INT 3
6071: EQUAL
6072: IFFALSE 6196
// begin for i = 1 to 4 do
6074: LD_ADDR_VAR 0 11
6078: PUSH
6079: DOUBLE
6080: LD_INT 1
6082: DEC
6083: ST_TO_ADDR
6084: LD_INT 4
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6194
// begin uc_nation := nation_arabian ;
6090: LD_ADDR_OWVAR 21
6094: PUSH
6095: LD_INT 2
6097: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6098: LD_ADDR_OWVAR 37
6102: PUSH
6103: LD_INT 14
6105: ST_TO_ADDR
// vc_engine := engine_siberite ;
6106: LD_ADDR_OWVAR 39
6110: PUSH
6111: LD_INT 3
6113: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6114: LD_ADDR_OWVAR 38
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: LD_INT 5
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 1
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: CALL_OW 12
6139: ARRAY
6140: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6141: LD_ADDR_OWVAR 40
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 27
6151: PUSH
6152: LD_INT 28
6154: PUSH
6155: LD_INT 25
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 4
6169: PPUSH
6170: CALL_OW 12
6174: ARRAY
6175: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6176: LD_ADDR_VAR 0 7
6180: PUSH
6181: LD_VAR 0 7
6185: PUSH
6186: CALL_OW 45
6190: ADD
6191: ST_TO_ADDR
// end ;
6192: GO 6087
6194: POP
6195: POP
// end ; if bonus_num = 4 then
6196: LD_EXP 14
6200: PUSH
6201: LD_INT 4
6203: EQUAL
6204: IFFALSE 6255
// for i = 1 to 3 do
6206: LD_ADDR_VAR 0 11
6210: PUSH
6211: DOUBLE
6212: LD_INT 1
6214: DEC
6215: ST_TO_ADDR
6216: LD_INT 3
6218: PUSH
6219: FOR_TO
6220: IFFALSE 6253
// begin PrepareHuman ( false , 3 , 8 ) ;
6222: LD_INT 0
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: LD_INT 8
6230: PPUSH
6231: CALL_OW 380
// units := units ^ CreateHuman ;
6235: LD_ADDR_VAR 0 7
6239: PUSH
6240: LD_VAR 0 7
6244: PUSH
6245: CALL_OW 44
6249: ADD
6250: ST_TO_ADDR
// end ;
6251: GO 6219
6253: POP
6254: POP
// end ; 4 :
6255: GO 6277
6257: LD_INT 4
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6276
6265: POP
// off := false ; end ;
6266: LD_ADDR_VAR 0 6
6270: PUSH
6271: LD_INT 0
6273: ST_TO_ADDR
6274: GO 6277
6276: POP
// DialogueOff ;
6277: CALL_OW 7
// if not off then
6281: LD_VAR 0 6
6285: NOT
6286: IFFALSE 6292
// exit else
6288: GO 6471
6290: GO 6345
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6292: LD_OWVAR 2
6296: PPUSH
6297: LD_INT 12
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_INT 23
6305: PPUSH
6306: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6310: LD_EXP 12
6314: PPUSH
6315: LD_STRING DVr-3
6317: PUSH
6318: LD_STRING DVr-3a
6320: PUSH
6321: LD_STRING DVr-3b
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 1
6331: PPUSH
6332: LD_INT 3
6334: PPUSH
6335: CALL_OW 12
6339: ARRAY
6340: PPUSH
6341: CALL_OW 94
// end ; if units then
6345: LD_VAR 0 7
6349: IFFALSE 6413
// for i in units do
6351: LD_ADDR_VAR 0 11
6355: PUSH
6356: LD_VAR 0 7
6360: PUSH
6361: FOR_IN
6362: IFFALSE 6411
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6364: LD_VAR 0 11
6368: PPUSH
6369: LD_INT 92
6371: PPUSH
6372: LD_INT 49
6374: PPUSH
6375: LD_INT 20
6377: PPUSH
6378: LD_INT 0
6380: PPUSH
6381: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6385: LD_VAR 0 11
6389: PPUSH
6390: CALL_OW 250
6394: PPUSH
6395: LD_VAR 0 11
6399: PPUSH
6400: CALL_OW 251
6404: PPUSH
6405: CALL_OW 494
// end ;
6409: GO 6361
6411: POP
6412: POP
// if crates then
6413: LD_VAR 0 8
6417: IFFALSE 6471
// for i = 1 to ( crates div 50 ) do
6419: LD_ADDR_VAR 0 11
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_VAR 0 8
6433: PUSH
6434: LD_INT 50
6436: DIV
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6469
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6441: LD_INT 5
6443: PPUSH
6444: LD_INT 92
6446: PPUSH
6447: LD_INT 49
6449: PPUSH
6450: LD_INT 30
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: CALL_OW 56
// wait ( 0 0$02 ) ;
6460: LD_INT 70
6462: PPUSH
6463: CALL_OW 67
// end ;
6467: GO 6438
6469: POP
6470: POP
// end ; end ;
6471: PPOPN 12
6473: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: LD_VAR 0 3
6488: PPUSH
6489: CALL 22970 0 3
// end ;
6493: PPOPN 3
6495: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6496: LD_VAR 0 1
6500: PPUSH
6501: CALL 22978 0 1
// end ;
6505: PPOPN 1
6507: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6508: LD_VAR 0 1
6512: PPUSH
6513: CALL_OW 255
6517: PUSH
6518: LD_OWVAR 2
6522: EQUAL
6523: IFFALSE 6533
// player_res_art := true ;
6525: LD_ADDR_EXP 8
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// end ;
6533: PPOPN 1
6535: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6536: LD_INT 22
6538: PUSH
6539: LD_OWVAR 2
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: LD_INT 30
6553: PUSH
6554: LD_INT 7
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 30
6563: PUSH
6564: LD_INT 8
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 30
6573: PUSH
6574: LD_INT 11
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PPUSH
6591: CALL_OW 69
6595: IFFALSE 6828
6597: GO 6599
6599: DISABLE
6600: LD_INT 0
6602: PPUSH
6603: PPUSH
// begin enable ;
6604: ENABLE
// xy := FindArtifact ( 2 ) ;
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: LD_INT 2
6612: PPUSH
6613: CALL_OW 469
6617: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6618: LD_ADDR_VAR 0 2
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_OWVAR 2
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: LD_INT 30
6640: PUSH
6641: LD_INT 8
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 30
6650: PUSH
6651: LD_INT 7
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 30
6660: PUSH
6661: LD_INT 11
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 69
6682: PPUSH
6683: LD_VAR 0 1
6687: PUSH
6688: LD_INT 1
6690: ARRAY
6691: PPUSH
6692: LD_VAR 0 1
6696: PUSH
6697: LD_INT 2
6699: ARRAY
6700: PPUSH
6701: CALL_OW 73
6705: ST_TO_ADDR
// if player_artifact_ready = false then
6706: LD_EXP 16
6710: PUSH
6711: LD_INT 0
6713: EQUAL
6714: IFFALSE 6828
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6716: LD_VAR 0 2
6720: PPUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_INT 1
6728: ARRAY
6729: PPUSH
6730: LD_VAR 0 1
6734: PUSH
6735: LD_INT 2
6737: ARRAY
6738: PPUSH
6739: CALL_OW 297
6743: PUSH
6744: LD_INT 6
6746: LESS
6747: IFFALSE 6808
// begin if BuildingStatus ( lab ) = bs_idle then
6749: LD_VAR 0 2
6753: PPUSH
6754: CALL_OW 461
6758: PUSH
6759: LD_INT 2
6761: EQUAL
6762: IFFALSE 6786
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6764: LD_OWVAR 2
6768: PPUSH
6769: LD_INT 1
6771: PPUSH
6772: LD_INT 2
6774: PPUSH
6775: LD_VAR 0 2
6779: PPUSH
6780: CALL_OW 468
6784: GO 6806
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6786: LD_OWVAR 2
6790: PPUSH
6791: LD_INT 1
6793: PPUSH
6794: LD_INT 1
6796: PPUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 468
// end else
6806: GO 6828
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6808: LD_OWVAR 2
6812: PPUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: LD_VAR 0 2
6823: PPUSH
6824: CALL_OW 468
// end ;
6828: PPOPN 2
6830: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 255
6840: PUSH
6841: LD_OWVAR 2
6845: EQUAL
6846: IFFALSE 6872
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6848: LD_OWVAR 2
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 0
6858: PPUSH
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 468
// Win ;
6868: CALL 4765 0 0
// end ; end ;
6872: PPOPN 1
6874: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6875: LD_ADDR_EXP 17
6879: PUSH
6880: LD_VAR 0 2
6884: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6885: LD_OWVAR 2
6889: PPUSH
6890: LD_INT 1
6892: PPUSH
6893: LD_INT 2
6895: PPUSH
6896: LD_VAR 0 1
6900: PPUSH
6901: CALL_OW 468
// end ;
6905: PPOPN 2
6907: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6908: LD_VAR 0 1
6912: PPUSH
6913: LD_VAR 0 2
6917: PPUSH
6918: CALL 22994 0 2
// end ; end_of_file
6922: PPOPN 2
6924: END
// every 0 0$01 trigger not game_over do
6925: LD_EXP 7
6929: NOT
6930: IFFALSE 6963
6932: GO 6934
6934: DISABLE
// begin enable ;
6935: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6936: LD_ADDR_OWVAR 47
6940: PUSH
6941: LD_STRING #tick
6943: PUSH
6944: LD_OWVAR 1
6948: PUSH
6949: LD_STRING #points
6951: PUSH
6952: LD_EXP 10
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: ST_TO_ADDR
// end ;
6963: END
// every 0 0$01 trigger game_over do
6964: LD_EXP 7
6968: IFFALSE 7027
6970: GO 6972
6972: DISABLE
// begin Wait ( 0 0$02 ) ;
6973: LD_INT 70
6975: PPUSH
6976: CALL_OW 67
// DialogueOn ;
6980: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6984: LD_ADDR_OWVAR 47
6988: PUSH
6989: LD_STRING #game-points
6991: PUSH
6992: LD_OWVAR 78
6996: PUSH
6997: LD_EXP 10
7001: PUSH
7002: LD_STRING #game-time
7004: PUSH
7005: LD_OWVAR 1
7009: PUSH
7010: LD_STRING #game-difficulty
7012: PUSH
7013: LD_OWVAR 67
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: ST_TO_ADDR
// end ; end_of_file
7027: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7028: LD_OWVAR 1
7032: PUSH
7033: LD_INT 52500
7035: LESS
7036: IFFALSE 7060
7038: GO 7040
7040: DISABLE
// begin enable ;
7041: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7042: LD_INT 1
7044: PPUSH
7045: LD_INT 5
7047: PPUSH
7048: CALL_OW 12
7052: PPUSH
7053: LD_INT 1
7055: PPUSH
7056: CALL_OW 57
// end ; end_of_file
7060: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
7061: LD_INT 0
7063: PPUSH
// ar_miner := 81 ;
7064: LD_ADDR_EXP 25
7068: PUSH
7069: LD_INT 81
7071: ST_TO_ADDR
// ar_crane := 88 ;
7072: LD_ADDR_EXP 24
7076: PUSH
7077: LD_INT 88
7079: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7080: LD_ADDR_EXP 19
7084: PUSH
7085: LD_INT 89
7087: ST_TO_ADDR
// us_hack := 99 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_INT 99
7095: ST_TO_ADDR
// us_artillery := 97 ;
7096: LD_ADDR_EXP 21
7100: PUSH
7101: LD_INT 97
7103: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7104: LD_ADDR_EXP 22
7108: PUSH
7109: LD_INT 91
7111: ST_TO_ADDR
// ar_mortar := 92 ;
7112: LD_ADDR_EXP 23
7116: PUSH
7117: LD_INT 92
7119: ST_TO_ADDR
// ru_flamethrower := 93 ;
7120: LD_ADDR_EXP 26
7124: PUSH
7125: LD_INT 93
7127: ST_TO_ADDR
// ru_radar := 98 ;
7128: LD_ADDR_EXP 18
7132: PUSH
7133: LD_INT 98
7135: ST_TO_ADDR
// tech_Artillery := 80 ;
7136: LD_ADDR_EXP 27
7140: PUSH
7141: LD_INT 80
7143: ST_TO_ADDR
// tech_RadMat := 81 ;
7144: LD_ADDR_EXP 28
7148: PUSH
7149: LD_INT 81
7151: ST_TO_ADDR
// tech_BasicTools := 82 ;
7152: LD_ADDR_EXP 29
7156: PUSH
7157: LD_INT 82
7159: ST_TO_ADDR
// tech_Cargo := 83 ;
7160: LD_ADDR_EXP 30
7164: PUSH
7165: LD_INT 83
7167: ST_TO_ADDR
// tech_Track := 84 ;
7168: LD_ADDR_EXP 31
7172: PUSH
7173: LD_INT 84
7175: ST_TO_ADDR
// tech_Crane := 85 ;
7176: LD_ADDR_EXP 32
7180: PUSH
7181: LD_INT 85
7183: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7184: LD_ADDR_EXP 33
7188: PUSH
7189: LD_INT 86
7191: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7192: LD_ADDR_EXP 34
7196: PUSH
7197: LD_INT 87
7199: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7200: LD_ADDR_EXP 35
7204: PUSH
7205: LD_INT 88
7207: ST_TO_ADDR
// end ;
7208: LD_VAR 0 1
7212: RET
// every 1 do
7213: GO 7215
7215: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7216: CALL 7061 0 0
7220: END
// every 0 0$1 do
7221: GO 7223
7223: DISABLE
// begin enable ;
7224: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7225: LD_STRING updateTimer(
7227: PUSH
7228: LD_OWVAR 1
7232: STR
7233: PUSH
7234: LD_STRING );
7236: STR
7237: PPUSH
7238: CALL_OW 559
// end ;
7242: END
// export function SOS_MapStart ( ) ; begin
7243: LD_INT 0
7245: PPUSH
// if streamModeActive then
7246: LD_EXP 36
7250: IFFALSE 7259
// DefineStreamItems ( true ) ;
7252: LD_INT 1
7254: PPUSH
7255: CALL 8913 0 1
// UpdateFactoryWaypoints ( ) ;
7259: CALL 21774 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7263: CALL 22031 0 0
// end ;
7267: LD_VAR 0 1
7271: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7272: LD_INT 0
7274: PPUSH
// if p2 = 100 then
7275: LD_VAR 0 2
7279: PUSH
7280: LD_INT 100
7282: EQUAL
7283: IFFALSE 8286
// begin if not StreamModeActive then
7285: LD_EXP 36
7289: NOT
7290: IFFALSE 7300
// StreamModeActive := true ;
7292: LD_ADDR_EXP 36
7296: PUSH
7297: LD_INT 1
7299: ST_TO_ADDR
// if p3 = 0 then
7300: LD_VAR 0 3
7304: PUSH
7305: LD_INT 0
7307: EQUAL
7308: IFFALSE 7314
// InitStreamMode ;
7310: CALL 8449 0 0
// if p3 = 1 then
7314: LD_VAR 0 3
7318: PUSH
7319: LD_INT 1
7321: EQUAL
7322: IFFALSE 7332
// sRocket := true ;
7324: LD_ADDR_EXP 41
7328: PUSH
7329: LD_INT 1
7331: ST_TO_ADDR
// if p3 = 2 then
7332: LD_VAR 0 3
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7350
// sSpeed := true ;
7342: LD_ADDR_EXP 40
7346: PUSH
7347: LD_INT 1
7349: ST_TO_ADDR
// if p3 = 3 then
7350: LD_VAR 0 3
7354: PUSH
7355: LD_INT 3
7357: EQUAL
7358: IFFALSE 7368
// sEngine := true ;
7360: LD_ADDR_EXP 42
7364: PUSH
7365: LD_INT 1
7367: ST_TO_ADDR
// if p3 = 4 then
7368: LD_VAR 0 3
7372: PUSH
7373: LD_INT 4
7375: EQUAL
7376: IFFALSE 7386
// sSpec := true ;
7378: LD_ADDR_EXP 39
7382: PUSH
7383: LD_INT 1
7385: ST_TO_ADDR
// if p3 = 5 then
7386: LD_VAR 0 3
7390: PUSH
7391: LD_INT 5
7393: EQUAL
7394: IFFALSE 7404
// sLevel := true ;
7396: LD_ADDR_EXP 43
7400: PUSH
7401: LD_INT 1
7403: ST_TO_ADDR
// if p3 = 6 then
7404: LD_VAR 0 3
7408: PUSH
7409: LD_INT 6
7411: EQUAL
7412: IFFALSE 7422
// sArmoury := true ;
7414: LD_ADDR_EXP 44
7418: PUSH
7419: LD_INT 1
7421: ST_TO_ADDR
// if p3 = 7 then
7422: LD_VAR 0 3
7426: PUSH
7427: LD_INT 7
7429: EQUAL
7430: IFFALSE 7440
// sRadar := true ;
7432: LD_ADDR_EXP 45
7436: PUSH
7437: LD_INT 1
7439: ST_TO_ADDR
// if p3 = 8 then
7440: LD_VAR 0 3
7444: PUSH
7445: LD_INT 8
7447: EQUAL
7448: IFFALSE 7458
// sBunker := true ;
7450: LD_ADDR_EXP 46
7454: PUSH
7455: LD_INT 1
7457: ST_TO_ADDR
// if p3 = 9 then
7458: LD_VAR 0 3
7462: PUSH
7463: LD_INT 9
7465: EQUAL
7466: IFFALSE 7476
// sHack := true ;
7468: LD_ADDR_EXP 47
7472: PUSH
7473: LD_INT 1
7475: ST_TO_ADDR
// if p3 = 10 then
7476: LD_VAR 0 3
7480: PUSH
7481: LD_INT 10
7483: EQUAL
7484: IFFALSE 7494
// sFire := true ;
7486: LD_ADDR_EXP 48
7490: PUSH
7491: LD_INT 1
7493: ST_TO_ADDR
// if p3 = 11 then
7494: LD_VAR 0 3
7498: PUSH
7499: LD_INT 11
7501: EQUAL
7502: IFFALSE 7512
// sRefresh := true ;
7504: LD_ADDR_EXP 49
7508: PUSH
7509: LD_INT 1
7511: ST_TO_ADDR
// if p3 = 12 then
7512: LD_VAR 0 3
7516: PUSH
7517: LD_INT 12
7519: EQUAL
7520: IFFALSE 7530
// sExp := true ;
7522: LD_ADDR_EXP 50
7526: PUSH
7527: LD_INT 1
7529: ST_TO_ADDR
// if p3 = 13 then
7530: LD_VAR 0 3
7534: PUSH
7535: LD_INT 13
7537: EQUAL
7538: IFFALSE 7548
// sDepot := true ;
7540: LD_ADDR_EXP 51
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// if p3 = 14 then
7548: LD_VAR 0 3
7552: PUSH
7553: LD_INT 14
7555: EQUAL
7556: IFFALSE 7566
// sFlag := true ;
7558: LD_ADDR_EXP 52
7562: PUSH
7563: LD_INT 1
7565: ST_TO_ADDR
// if p3 = 15 then
7566: LD_VAR 0 3
7570: PUSH
7571: LD_INT 15
7573: EQUAL
7574: IFFALSE 7584
// sKamikadze := true ;
7576: LD_ADDR_EXP 60
7580: PUSH
7581: LD_INT 1
7583: ST_TO_ADDR
// if p3 = 16 then
7584: LD_VAR 0 3
7588: PUSH
7589: LD_INT 16
7591: EQUAL
7592: IFFALSE 7602
// sTroll := true ;
7594: LD_ADDR_EXP 61
7598: PUSH
7599: LD_INT 1
7601: ST_TO_ADDR
// if p3 = 17 then
7602: LD_VAR 0 3
7606: PUSH
7607: LD_INT 17
7609: EQUAL
7610: IFFALSE 7620
// sSlow := true ;
7612: LD_ADDR_EXP 62
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
// if p3 = 18 then
7620: LD_VAR 0 3
7624: PUSH
7625: LD_INT 18
7627: EQUAL
7628: IFFALSE 7638
// sLack := true ;
7630: LD_ADDR_EXP 63
7634: PUSH
7635: LD_INT 1
7637: ST_TO_ADDR
// if p3 = 19 then
7638: LD_VAR 0 3
7642: PUSH
7643: LD_INT 19
7645: EQUAL
7646: IFFALSE 7656
// sTank := true ;
7648: LD_ADDR_EXP 65
7652: PUSH
7653: LD_INT 1
7655: ST_TO_ADDR
// if p3 = 20 then
7656: LD_VAR 0 3
7660: PUSH
7661: LD_INT 20
7663: EQUAL
7664: IFFALSE 7674
// sRemote := true ;
7666: LD_ADDR_EXP 66
7670: PUSH
7671: LD_INT 1
7673: ST_TO_ADDR
// if p3 = 21 then
7674: LD_VAR 0 3
7678: PUSH
7679: LD_INT 21
7681: EQUAL
7682: IFFALSE 7692
// sPowell := true ;
7684: LD_ADDR_EXP 67
7688: PUSH
7689: LD_INT 1
7691: ST_TO_ADDR
// if p3 = 22 then
7692: LD_VAR 0 3
7696: PUSH
7697: LD_INT 22
7699: EQUAL
7700: IFFALSE 7710
// sTeleport := true ;
7702: LD_ADDR_EXP 70
7706: PUSH
7707: LD_INT 1
7709: ST_TO_ADDR
// if p3 = 23 then
7710: LD_VAR 0 3
7714: PUSH
7715: LD_INT 23
7717: EQUAL
7718: IFFALSE 7728
// sOilTower := true ;
7720: LD_ADDR_EXP 72
7724: PUSH
7725: LD_INT 1
7727: ST_TO_ADDR
// if p3 = 24 then
7728: LD_VAR 0 3
7732: PUSH
7733: LD_INT 24
7735: EQUAL
7736: IFFALSE 7746
// sShovel := true ;
7738: LD_ADDR_EXP 73
7742: PUSH
7743: LD_INT 1
7745: ST_TO_ADDR
// if p3 = 25 then
7746: LD_VAR 0 3
7750: PUSH
7751: LD_INT 25
7753: EQUAL
7754: IFFALSE 7764
// sSheik := true ;
7756: LD_ADDR_EXP 74
7760: PUSH
7761: LD_INT 1
7763: ST_TO_ADDR
// if p3 = 26 then
7764: LD_VAR 0 3
7768: PUSH
7769: LD_INT 26
7771: EQUAL
7772: IFFALSE 7782
// sEarthquake := true ;
7774: LD_ADDR_EXP 76
7778: PUSH
7779: LD_INT 1
7781: ST_TO_ADDR
// if p3 = 27 then
7782: LD_VAR 0 3
7786: PUSH
7787: LD_INT 27
7789: EQUAL
7790: IFFALSE 7800
// sAI := true ;
7792: LD_ADDR_EXP 77
7796: PUSH
7797: LD_INT 1
7799: ST_TO_ADDR
// if p3 = 28 then
7800: LD_VAR 0 3
7804: PUSH
7805: LD_INT 28
7807: EQUAL
7808: IFFALSE 7818
// sCargo := true ;
7810: LD_ADDR_EXP 80
7814: PUSH
7815: LD_INT 1
7817: ST_TO_ADDR
// if p3 = 29 then
7818: LD_VAR 0 3
7822: PUSH
7823: LD_INT 29
7825: EQUAL
7826: IFFALSE 7836
// sDLaser := true ;
7828: LD_ADDR_EXP 81
7832: PUSH
7833: LD_INT 1
7835: ST_TO_ADDR
// if p3 = 30 then
7836: LD_VAR 0 3
7840: PUSH
7841: LD_INT 30
7843: EQUAL
7844: IFFALSE 7854
// sExchange := true ;
7846: LD_ADDR_EXP 82
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// if p3 = 31 then
7854: LD_VAR 0 3
7858: PUSH
7859: LD_INT 31
7861: EQUAL
7862: IFFALSE 7872
// sFac := true ;
7864: LD_ADDR_EXP 83
7868: PUSH
7869: LD_INT 1
7871: ST_TO_ADDR
// if p3 = 32 then
7872: LD_VAR 0 3
7876: PUSH
7877: LD_INT 32
7879: EQUAL
7880: IFFALSE 7890
// sPower := true ;
7882: LD_ADDR_EXP 84
7886: PUSH
7887: LD_INT 1
7889: ST_TO_ADDR
// if p3 = 33 then
7890: LD_VAR 0 3
7894: PUSH
7895: LD_INT 33
7897: EQUAL
7898: IFFALSE 7908
// sRandom := true ;
7900: LD_ADDR_EXP 85
7904: PUSH
7905: LD_INT 1
7907: ST_TO_ADDR
// if p3 = 34 then
7908: LD_VAR 0 3
7912: PUSH
7913: LD_INT 34
7915: EQUAL
7916: IFFALSE 7926
// sShield := true ;
7918: LD_ADDR_EXP 86
7922: PUSH
7923: LD_INT 1
7925: ST_TO_ADDR
// if p3 = 35 then
7926: LD_VAR 0 3
7930: PUSH
7931: LD_INT 35
7933: EQUAL
7934: IFFALSE 7944
// sTime := true ;
7936: LD_ADDR_EXP 87
7940: PUSH
7941: LD_INT 1
7943: ST_TO_ADDR
// if p3 = 36 then
7944: LD_VAR 0 3
7948: PUSH
7949: LD_INT 36
7951: EQUAL
7952: IFFALSE 7962
// sTools := true ;
7954: LD_ADDR_EXP 88
7958: PUSH
7959: LD_INT 1
7961: ST_TO_ADDR
// if p3 = 101 then
7962: LD_VAR 0 3
7966: PUSH
7967: LD_INT 101
7969: EQUAL
7970: IFFALSE 7980
// sSold := true ;
7972: LD_ADDR_EXP 53
7976: PUSH
7977: LD_INT 1
7979: ST_TO_ADDR
// if p3 = 102 then
7980: LD_VAR 0 3
7984: PUSH
7985: LD_INT 102
7987: EQUAL
7988: IFFALSE 7998
// sDiff := true ;
7990: LD_ADDR_EXP 54
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// if p3 = 103 then
7998: LD_VAR 0 3
8002: PUSH
8003: LD_INT 103
8005: EQUAL
8006: IFFALSE 8016
// sFog := true ;
8008: LD_ADDR_EXP 57
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// if p3 = 104 then
8016: LD_VAR 0 3
8020: PUSH
8021: LD_INT 104
8023: EQUAL
8024: IFFALSE 8034
// sReset := true ;
8026: LD_ADDR_EXP 58
8030: PUSH
8031: LD_INT 1
8033: ST_TO_ADDR
// if p3 = 105 then
8034: LD_VAR 0 3
8038: PUSH
8039: LD_INT 105
8041: EQUAL
8042: IFFALSE 8052
// sSun := true ;
8044: LD_ADDR_EXP 59
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// if p3 = 106 then
8052: LD_VAR 0 3
8056: PUSH
8057: LD_INT 106
8059: EQUAL
8060: IFFALSE 8070
// sTiger := true ;
8062: LD_ADDR_EXP 55
8066: PUSH
8067: LD_INT 1
8069: ST_TO_ADDR
// if p3 = 107 then
8070: LD_VAR 0 3
8074: PUSH
8075: LD_INT 107
8077: EQUAL
8078: IFFALSE 8088
// sBomb := true ;
8080: LD_ADDR_EXP 56
8084: PUSH
8085: LD_INT 1
8087: ST_TO_ADDR
// if p3 = 108 then
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 108
8095: EQUAL
8096: IFFALSE 8106
// sWound := true ;
8098: LD_ADDR_EXP 64
8102: PUSH
8103: LD_INT 1
8105: ST_TO_ADDR
// if p3 = 109 then
8106: LD_VAR 0 3
8110: PUSH
8111: LD_INT 109
8113: EQUAL
8114: IFFALSE 8124
// sBetray := true ;
8116: LD_ADDR_EXP 68
8120: PUSH
8121: LD_INT 1
8123: ST_TO_ADDR
// if p3 = 110 then
8124: LD_VAR 0 3
8128: PUSH
8129: LD_INT 110
8131: EQUAL
8132: IFFALSE 8142
// sContamin := true ;
8134: LD_ADDR_EXP 69
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// if p3 = 111 then
8142: LD_VAR 0 3
8146: PUSH
8147: LD_INT 111
8149: EQUAL
8150: IFFALSE 8160
// sOil := true ;
8152: LD_ADDR_EXP 71
8156: PUSH
8157: LD_INT 1
8159: ST_TO_ADDR
// if p3 = 112 then
8160: LD_VAR 0 3
8164: PUSH
8165: LD_INT 112
8167: EQUAL
8168: IFFALSE 8178
// sStu := true ;
8170: LD_ADDR_EXP 75
8174: PUSH
8175: LD_INT 1
8177: ST_TO_ADDR
// if p3 = 113 then
8178: LD_VAR 0 3
8182: PUSH
8183: LD_INT 113
8185: EQUAL
8186: IFFALSE 8196
// sBazooka := true ;
8188: LD_ADDR_EXP 78
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// if p3 = 114 then
8196: LD_VAR 0 3
8200: PUSH
8201: LD_INT 114
8203: EQUAL
8204: IFFALSE 8214
// sMortar := true ;
8206: LD_ADDR_EXP 79
8210: PUSH
8211: LD_INT 1
8213: ST_TO_ADDR
// if p3 = 115 then
8214: LD_VAR 0 3
8218: PUSH
8219: LD_INT 115
8221: EQUAL
8222: IFFALSE 8232
// sRanger := true ;
8224: LD_ADDR_EXP 89
8228: PUSH
8229: LD_INT 1
8231: ST_TO_ADDR
// if p3 = 116 then
8232: LD_VAR 0 3
8236: PUSH
8237: LD_INT 116
8239: EQUAL
8240: IFFALSE 8250
// sComputer := true ;
8242: LD_ADDR_EXP 90
8246: PUSH
8247: LD_INT 1
8249: ST_TO_ADDR
// if p3 = 117 then
8250: LD_VAR 0 3
8254: PUSH
8255: LD_INT 117
8257: EQUAL
8258: IFFALSE 8268
// s30 := true ;
8260: LD_ADDR_EXP 91
8264: PUSH
8265: LD_INT 1
8267: ST_TO_ADDR
// if p3 = 118 then
8268: LD_VAR 0 3
8272: PUSH
8273: LD_INT 118
8275: EQUAL
8276: IFFALSE 8286
// s60 := true ;
8278: LD_ADDR_EXP 92
8282: PUSH
8283: LD_INT 1
8285: ST_TO_ADDR
// end ; if p2 = 101 then
8286: LD_VAR 0 2
8290: PUSH
8291: LD_INT 101
8293: EQUAL
8294: IFFALSE 8422
// begin case p3 of 1 :
8296: LD_VAR 0 3
8300: PUSH
8301: LD_INT 1
8303: DOUBLE
8304: EQUAL
8305: IFTRUE 8309
8307: GO 8316
8309: POP
// hHackUnlimitedResources ; 2 :
8310: CALL 20520 0 0
8314: GO 8422
8316: LD_INT 2
8318: DOUBLE
8319: EQUAL
8320: IFTRUE 8324
8322: GO 8331
8324: POP
// hHackSetLevel10 ; 3 :
8325: CALL 20653 0 0
8329: GO 8422
8331: LD_INT 3
8333: DOUBLE
8334: EQUAL
8335: IFTRUE 8339
8337: GO 8346
8339: POP
// hHackSetLevel10YourUnits ; 4 :
8340: CALL 20738 0 0
8344: GO 8422
8346: LD_INT 4
8348: DOUBLE
8349: EQUAL
8350: IFTRUE 8354
8352: GO 8361
8354: POP
// hHackInvincible ; 5 :
8355: CALL 21186 0 0
8359: GO 8422
8361: LD_INT 5
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8376
8369: POP
// hHackInvisible ; 6 :
8370: CALL 21297 0 0
8374: GO 8422
8376: LD_INT 6
8378: DOUBLE
8379: EQUAL
8380: IFTRUE 8384
8382: GO 8391
8384: POP
// hHackChangeYourSide ; 7 :
8385: CALL 21354 0 0
8389: GO 8422
8391: LD_INT 7
8393: DOUBLE
8394: EQUAL
8395: IFTRUE 8399
8397: GO 8406
8399: POP
// hHackChangeUnitSide ; 8 :
8400: CALL 21396 0 0
8404: GO 8422
8406: LD_INT 8
8408: DOUBLE
8409: EQUAL
8410: IFTRUE 8414
8412: GO 8421
8414: POP
// hHackFog ; end ;
8415: CALL 21497 0 0
8419: GO 8422
8421: POP
// end ; end ;
8422: LD_VAR 0 7
8426: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8427: GO 8429
8429: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8430: LD_STRING initStreamRollete();
8432: PPUSH
8433: CALL_OW 559
// InitStreamMode ;
8437: CALL 8449 0 0
// DefineStreamItems ( false ) ;
8441: LD_INT 0
8443: PPUSH
8444: CALL 8913 0 1
// end ;
8448: END
// function InitStreamMode ; begin
8449: LD_INT 0
8451: PPUSH
// streamModeActive := false ;
8452: LD_ADDR_EXP 36
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// normalCounter := 36 ;
8460: LD_ADDR_EXP 37
8464: PUSH
8465: LD_INT 36
8467: ST_TO_ADDR
// hardcoreCounter := 18 ;
8468: LD_ADDR_EXP 38
8472: PUSH
8473: LD_INT 18
8475: ST_TO_ADDR
// sRocket := false ;
8476: LD_ADDR_EXP 41
8480: PUSH
8481: LD_INT 0
8483: ST_TO_ADDR
// sSpeed := false ;
8484: LD_ADDR_EXP 40
8488: PUSH
8489: LD_INT 0
8491: ST_TO_ADDR
// sEngine := false ;
8492: LD_ADDR_EXP 42
8496: PUSH
8497: LD_INT 0
8499: ST_TO_ADDR
// sSpec := false ;
8500: LD_ADDR_EXP 39
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// sLevel := false ;
8508: LD_ADDR_EXP 43
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
// sArmoury := false ;
8516: LD_ADDR_EXP 44
8520: PUSH
8521: LD_INT 0
8523: ST_TO_ADDR
// sRadar := false ;
8524: LD_ADDR_EXP 45
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// sBunker := false ;
8532: LD_ADDR_EXP 46
8536: PUSH
8537: LD_INT 0
8539: ST_TO_ADDR
// sHack := false ;
8540: LD_ADDR_EXP 47
8544: PUSH
8545: LD_INT 0
8547: ST_TO_ADDR
// sFire := false ;
8548: LD_ADDR_EXP 48
8552: PUSH
8553: LD_INT 0
8555: ST_TO_ADDR
// sRefresh := false ;
8556: LD_ADDR_EXP 49
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// sExp := false ;
8564: LD_ADDR_EXP 50
8568: PUSH
8569: LD_INT 0
8571: ST_TO_ADDR
// sDepot := false ;
8572: LD_ADDR_EXP 51
8576: PUSH
8577: LD_INT 0
8579: ST_TO_ADDR
// sFlag := false ;
8580: LD_ADDR_EXP 52
8584: PUSH
8585: LD_INT 0
8587: ST_TO_ADDR
// sKamikadze := false ;
8588: LD_ADDR_EXP 60
8592: PUSH
8593: LD_INT 0
8595: ST_TO_ADDR
// sTroll := false ;
8596: LD_ADDR_EXP 61
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// sSlow := false ;
8604: LD_ADDR_EXP 62
8608: PUSH
8609: LD_INT 0
8611: ST_TO_ADDR
// sLack := false ;
8612: LD_ADDR_EXP 63
8616: PUSH
8617: LD_INT 0
8619: ST_TO_ADDR
// sTank := false ;
8620: LD_ADDR_EXP 65
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sRemote := false ;
8628: LD_ADDR_EXP 66
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// sPowell := false ;
8636: LD_ADDR_EXP 67
8640: PUSH
8641: LD_INT 0
8643: ST_TO_ADDR
// sTeleport := false ;
8644: LD_ADDR_EXP 70
8648: PUSH
8649: LD_INT 0
8651: ST_TO_ADDR
// sOilTower := false ;
8652: LD_ADDR_EXP 72
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// sShovel := false ;
8660: LD_ADDR_EXP 73
8664: PUSH
8665: LD_INT 0
8667: ST_TO_ADDR
// sSheik := false ;
8668: LD_ADDR_EXP 74
8672: PUSH
8673: LD_INT 0
8675: ST_TO_ADDR
// sEarthquake := false ;
8676: LD_ADDR_EXP 76
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// sAI := false ;
8684: LD_ADDR_EXP 77
8688: PUSH
8689: LD_INT 0
8691: ST_TO_ADDR
// sCargo := false ;
8692: LD_ADDR_EXP 80
8696: PUSH
8697: LD_INT 0
8699: ST_TO_ADDR
// sDLaser := false ;
8700: LD_ADDR_EXP 81
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// sExchange := false ;
8708: LD_ADDR_EXP 82
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// sFac := false ;
8716: LD_ADDR_EXP 83
8720: PUSH
8721: LD_INT 0
8723: ST_TO_ADDR
// sPower := false ;
8724: LD_ADDR_EXP 84
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// sRandom := false ;
8732: LD_ADDR_EXP 85
8736: PUSH
8737: LD_INT 0
8739: ST_TO_ADDR
// sShield := false ;
8740: LD_ADDR_EXP 86
8744: PUSH
8745: LD_INT 0
8747: ST_TO_ADDR
// sTime := false ;
8748: LD_ADDR_EXP 87
8752: PUSH
8753: LD_INT 0
8755: ST_TO_ADDR
// sTools := false ;
8756: LD_ADDR_EXP 88
8760: PUSH
8761: LD_INT 0
8763: ST_TO_ADDR
// sSold := false ;
8764: LD_ADDR_EXP 53
8768: PUSH
8769: LD_INT 0
8771: ST_TO_ADDR
// sDiff := false ;
8772: LD_ADDR_EXP 54
8776: PUSH
8777: LD_INT 0
8779: ST_TO_ADDR
// sFog := false ;
8780: LD_ADDR_EXP 57
8784: PUSH
8785: LD_INT 0
8787: ST_TO_ADDR
// sReset := false ;
8788: LD_ADDR_EXP 58
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// sSun := false ;
8796: LD_ADDR_EXP 59
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// sTiger := false ;
8804: LD_ADDR_EXP 55
8808: PUSH
8809: LD_INT 0
8811: ST_TO_ADDR
// sBomb := false ;
8812: LD_ADDR_EXP 56
8816: PUSH
8817: LD_INT 0
8819: ST_TO_ADDR
// sWound := false ;
8820: LD_ADDR_EXP 64
8824: PUSH
8825: LD_INT 0
8827: ST_TO_ADDR
// sBetray := false ;
8828: LD_ADDR_EXP 68
8832: PUSH
8833: LD_INT 0
8835: ST_TO_ADDR
// sContamin := false ;
8836: LD_ADDR_EXP 69
8840: PUSH
8841: LD_INT 0
8843: ST_TO_ADDR
// sOil := false ;
8844: LD_ADDR_EXP 71
8848: PUSH
8849: LD_INT 0
8851: ST_TO_ADDR
// sStu := false ;
8852: LD_ADDR_EXP 75
8856: PUSH
8857: LD_INT 0
8859: ST_TO_ADDR
// sBazooka := false ;
8860: LD_ADDR_EXP 78
8864: PUSH
8865: LD_INT 0
8867: ST_TO_ADDR
// sMortar := false ;
8868: LD_ADDR_EXP 79
8872: PUSH
8873: LD_INT 0
8875: ST_TO_ADDR
// sRanger := false ;
8876: LD_ADDR_EXP 89
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// sComputer := false ;
8884: LD_ADDR_EXP 90
8888: PUSH
8889: LD_INT 0
8891: ST_TO_ADDR
// s30 := false ;
8892: LD_ADDR_EXP 91
8896: PUSH
8897: LD_INT 0
8899: ST_TO_ADDR
// s60 := false ;
8900: LD_ADDR_EXP 92
8904: PUSH
8905: LD_INT 0
8907: ST_TO_ADDR
// end ;
8908: LD_VAR 0 1
8912: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8913: LD_INT 0
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
8920: PPUSH
8921: PPUSH
// result := [ ] ;
8922: LD_ADDR_VAR 0 2
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// if campaign_id = 1 then
8929: LD_OWVAR 69
8933: PUSH
8934: LD_INT 1
8936: EQUAL
8937: IFFALSE 12103
// begin case mission_number of 1 :
8939: LD_OWVAR 70
8943: PUSH
8944: LD_INT 1
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 9028
8952: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8953: LD_ADDR_VAR 0 2
8957: PUSH
8958: LD_INT 2
8960: PUSH
8961: LD_INT 4
8963: PUSH
8964: LD_INT 11
8966: PUSH
8967: LD_INT 12
8969: PUSH
8970: LD_INT 15
8972: PUSH
8973: LD_INT 16
8975: PUSH
8976: LD_INT 22
8978: PUSH
8979: LD_INT 23
8981: PUSH
8982: LD_INT 26
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 101
8998: PUSH
8999: LD_INT 102
9001: PUSH
9002: LD_INT 106
9004: PUSH
9005: LD_INT 116
9007: PUSH
9008: LD_INT 117
9010: PUSH
9011: LD_INT 118
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: ST_TO_ADDR
9026: GO 12101
9028: LD_INT 2
9030: DOUBLE
9031: EQUAL
9032: IFTRUE 9036
9034: GO 9120
9036: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9037: LD_ADDR_VAR 0 2
9041: PUSH
9042: LD_INT 2
9044: PUSH
9045: LD_INT 4
9047: PUSH
9048: LD_INT 11
9050: PUSH
9051: LD_INT 12
9053: PUSH
9054: LD_INT 15
9056: PUSH
9057: LD_INT 16
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_INT 23
9065: PUSH
9066: LD_INT 26
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 101
9082: PUSH
9083: LD_INT 102
9085: PUSH
9086: LD_INT 105
9088: PUSH
9089: LD_INT 106
9091: PUSH
9092: LD_INT 108
9094: PUSH
9095: LD_INT 116
9097: PUSH
9098: LD_INT 117
9100: PUSH
9101: LD_INT 118
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: ST_TO_ADDR
9118: GO 12101
9120: LD_INT 3
9122: DOUBLE
9123: EQUAL
9124: IFTRUE 9128
9126: GO 9216
9128: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9129: LD_ADDR_VAR 0 2
9133: PUSH
9134: LD_INT 2
9136: PUSH
9137: LD_INT 4
9139: PUSH
9140: LD_INT 5
9142: PUSH
9143: LD_INT 11
9145: PUSH
9146: LD_INT 12
9148: PUSH
9149: LD_INT 15
9151: PUSH
9152: LD_INT 16
9154: PUSH
9155: LD_INT 22
9157: PUSH
9158: LD_INT 26
9160: PUSH
9161: LD_INT 36
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: PUSH
9176: LD_INT 101
9178: PUSH
9179: LD_INT 102
9181: PUSH
9182: LD_INT 105
9184: PUSH
9185: LD_INT 106
9187: PUSH
9188: LD_INT 108
9190: PUSH
9191: LD_INT 116
9193: PUSH
9194: LD_INT 117
9196: PUSH
9197: LD_INT 118
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: ST_TO_ADDR
9214: GO 12101
9216: LD_INT 4
9218: DOUBLE
9219: EQUAL
9220: IFTRUE 9224
9222: GO 9320
9224: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9225: LD_ADDR_VAR 0 2
9229: PUSH
9230: LD_INT 2
9232: PUSH
9233: LD_INT 4
9235: PUSH
9236: LD_INT 5
9238: PUSH
9239: LD_INT 8
9241: PUSH
9242: LD_INT 11
9244: PUSH
9245: LD_INT 12
9247: PUSH
9248: LD_INT 15
9250: PUSH
9251: LD_INT 16
9253: PUSH
9254: LD_INT 22
9256: PUSH
9257: LD_INT 23
9259: PUSH
9260: LD_INT 26
9262: PUSH
9263: LD_INT 36
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 101
9282: PUSH
9283: LD_INT 102
9285: PUSH
9286: LD_INT 105
9288: PUSH
9289: LD_INT 106
9291: PUSH
9292: LD_INT 108
9294: PUSH
9295: LD_INT 116
9297: PUSH
9298: LD_INT 117
9300: PUSH
9301: LD_INT 118
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: ST_TO_ADDR
9318: GO 12101
9320: LD_INT 5
9322: DOUBLE
9323: EQUAL
9324: IFTRUE 9328
9326: GO 9440
9328: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9329: LD_ADDR_VAR 0 2
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: LD_INT 4
9339: PUSH
9340: LD_INT 5
9342: PUSH
9343: LD_INT 6
9345: PUSH
9346: LD_INT 8
9348: PUSH
9349: LD_INT 11
9351: PUSH
9352: LD_INT 12
9354: PUSH
9355: LD_INT 15
9357: PUSH
9358: LD_INT 16
9360: PUSH
9361: LD_INT 22
9363: PUSH
9364: LD_INT 23
9366: PUSH
9367: LD_INT 25
9369: PUSH
9370: LD_INT 26
9372: PUSH
9373: LD_INT 36
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 101
9394: PUSH
9395: LD_INT 102
9397: PUSH
9398: LD_INT 105
9400: PUSH
9401: LD_INT 106
9403: PUSH
9404: LD_INT 108
9406: PUSH
9407: LD_INT 109
9409: PUSH
9410: LD_INT 112
9412: PUSH
9413: LD_INT 116
9415: PUSH
9416: LD_INT 117
9418: PUSH
9419: LD_INT 118
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: ST_TO_ADDR
9438: GO 12101
9440: LD_INT 6
9442: DOUBLE
9443: EQUAL
9444: IFTRUE 9448
9446: GO 9580
9448: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9449: LD_ADDR_VAR 0 2
9453: PUSH
9454: LD_INT 2
9456: PUSH
9457: LD_INT 4
9459: PUSH
9460: LD_INT 5
9462: PUSH
9463: LD_INT 6
9465: PUSH
9466: LD_INT 8
9468: PUSH
9469: LD_INT 11
9471: PUSH
9472: LD_INT 12
9474: PUSH
9475: LD_INT 15
9477: PUSH
9478: LD_INT 16
9480: PUSH
9481: LD_INT 20
9483: PUSH
9484: LD_INT 21
9486: PUSH
9487: LD_INT 22
9489: PUSH
9490: LD_INT 23
9492: PUSH
9493: LD_INT 25
9495: PUSH
9496: LD_INT 26
9498: PUSH
9499: LD_INT 30
9501: PUSH
9502: LD_INT 31
9504: PUSH
9505: LD_INT 32
9507: PUSH
9508: LD_INT 36
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 101
9534: PUSH
9535: LD_INT 102
9537: PUSH
9538: LD_INT 105
9540: PUSH
9541: LD_INT 106
9543: PUSH
9544: LD_INT 108
9546: PUSH
9547: LD_INT 109
9549: PUSH
9550: LD_INT 112
9552: PUSH
9553: LD_INT 116
9555: PUSH
9556: LD_INT 117
9558: PUSH
9559: LD_INT 118
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: ST_TO_ADDR
9578: GO 12101
9580: LD_INT 7
9582: DOUBLE
9583: EQUAL
9584: IFTRUE 9588
9586: GO 9700
9588: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9589: LD_ADDR_VAR 0 2
9593: PUSH
9594: LD_INT 2
9596: PUSH
9597: LD_INT 4
9599: PUSH
9600: LD_INT 5
9602: PUSH
9603: LD_INT 7
9605: PUSH
9606: LD_INT 11
9608: PUSH
9609: LD_INT 12
9611: PUSH
9612: LD_INT 15
9614: PUSH
9615: LD_INT 16
9617: PUSH
9618: LD_INT 20
9620: PUSH
9621: LD_INT 21
9623: PUSH
9624: LD_INT 22
9626: PUSH
9627: LD_INT 23
9629: PUSH
9630: LD_INT 25
9632: PUSH
9633: LD_INT 26
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 101
9654: PUSH
9655: LD_INT 102
9657: PUSH
9658: LD_INT 103
9660: PUSH
9661: LD_INT 105
9663: PUSH
9664: LD_INT 106
9666: PUSH
9667: LD_INT 108
9669: PUSH
9670: LD_INT 112
9672: PUSH
9673: LD_INT 116
9675: PUSH
9676: LD_INT 117
9678: PUSH
9679: LD_INT 118
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: ST_TO_ADDR
9698: GO 12101
9700: LD_INT 8
9702: DOUBLE
9703: EQUAL
9704: IFTRUE 9708
9706: GO 9848
9708: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9709: LD_ADDR_VAR 0 2
9713: PUSH
9714: LD_INT 2
9716: PUSH
9717: LD_INT 4
9719: PUSH
9720: LD_INT 5
9722: PUSH
9723: LD_INT 6
9725: PUSH
9726: LD_INT 7
9728: PUSH
9729: LD_INT 8
9731: PUSH
9732: LD_INT 11
9734: PUSH
9735: LD_INT 12
9737: PUSH
9738: LD_INT 15
9740: PUSH
9741: LD_INT 16
9743: PUSH
9744: LD_INT 20
9746: PUSH
9747: LD_INT 21
9749: PUSH
9750: LD_INT 22
9752: PUSH
9753: LD_INT 23
9755: PUSH
9756: LD_INT 25
9758: PUSH
9759: LD_INT 26
9761: PUSH
9762: LD_INT 30
9764: PUSH
9765: LD_INT 31
9767: PUSH
9768: LD_INT 32
9770: PUSH
9771: LD_INT 36
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 101
9798: PUSH
9799: LD_INT 102
9801: PUSH
9802: LD_INT 103
9804: PUSH
9805: LD_INT 105
9807: PUSH
9808: LD_INT 106
9810: PUSH
9811: LD_INT 108
9813: PUSH
9814: LD_INT 109
9816: PUSH
9817: LD_INT 112
9819: PUSH
9820: LD_INT 116
9822: PUSH
9823: LD_INT 117
9825: PUSH
9826: LD_INT 118
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: ST_TO_ADDR
9846: GO 12101
9848: LD_INT 9
9850: DOUBLE
9851: EQUAL
9852: IFTRUE 9856
9854: GO 10004
9856: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9857: LD_ADDR_VAR 0 2
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: LD_INT 4
9867: PUSH
9868: LD_INT 5
9870: PUSH
9871: LD_INT 6
9873: PUSH
9874: LD_INT 7
9876: PUSH
9877: LD_INT 8
9879: PUSH
9880: LD_INT 11
9882: PUSH
9883: LD_INT 12
9885: PUSH
9886: LD_INT 15
9888: PUSH
9889: LD_INT 16
9891: PUSH
9892: LD_INT 20
9894: PUSH
9895: LD_INT 21
9897: PUSH
9898: LD_INT 22
9900: PUSH
9901: LD_INT 23
9903: PUSH
9904: LD_INT 25
9906: PUSH
9907: LD_INT 26
9909: PUSH
9910: LD_INT 28
9912: PUSH
9913: LD_INT 30
9915: PUSH
9916: LD_INT 31
9918: PUSH
9919: LD_INT 32
9921: PUSH
9922: LD_INT 36
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: PUSH
9948: LD_INT 101
9950: PUSH
9951: LD_INT 102
9953: PUSH
9954: LD_INT 103
9956: PUSH
9957: LD_INT 105
9959: PUSH
9960: LD_INT 106
9962: PUSH
9963: LD_INT 108
9965: PUSH
9966: LD_INT 109
9968: PUSH
9969: LD_INT 112
9971: PUSH
9972: LD_INT 114
9974: PUSH
9975: LD_INT 116
9977: PUSH
9978: LD_INT 117
9980: PUSH
9981: LD_INT 118
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: ST_TO_ADDR
10002: GO 12101
10004: LD_INT 10
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10208
10012: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: LD_INT 2
10020: PUSH
10021: LD_INT 4
10023: PUSH
10024: LD_INT 5
10026: PUSH
10027: LD_INT 6
10029: PUSH
10030: LD_INT 7
10032: PUSH
10033: LD_INT 8
10035: PUSH
10036: LD_INT 9
10038: PUSH
10039: LD_INT 10
10041: PUSH
10042: LD_INT 11
10044: PUSH
10045: LD_INT 12
10047: PUSH
10048: LD_INT 13
10050: PUSH
10051: LD_INT 14
10053: PUSH
10054: LD_INT 15
10056: PUSH
10057: LD_INT 16
10059: PUSH
10060: LD_INT 17
10062: PUSH
10063: LD_INT 18
10065: PUSH
10066: LD_INT 19
10068: PUSH
10069: LD_INT 20
10071: PUSH
10072: LD_INT 21
10074: PUSH
10075: LD_INT 22
10077: PUSH
10078: LD_INT 23
10080: PUSH
10081: LD_INT 24
10083: PUSH
10084: LD_INT 25
10086: PUSH
10087: LD_INT 26
10089: PUSH
10090: LD_INT 28
10092: PUSH
10093: LD_INT 30
10095: PUSH
10096: LD_INT 31
10098: PUSH
10099: LD_INT 32
10101: PUSH
10102: LD_INT 36
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 101
10138: PUSH
10139: LD_INT 102
10141: PUSH
10142: LD_INT 103
10144: PUSH
10145: LD_INT 104
10147: PUSH
10148: LD_INT 105
10150: PUSH
10151: LD_INT 106
10153: PUSH
10154: LD_INT 107
10156: PUSH
10157: LD_INT 108
10159: PUSH
10160: LD_INT 109
10162: PUSH
10163: LD_INT 110
10165: PUSH
10166: LD_INT 111
10168: PUSH
10169: LD_INT 112
10171: PUSH
10172: LD_INT 114
10174: PUSH
10175: LD_INT 116
10177: PUSH
10178: LD_INT 117
10180: PUSH
10181: LD_INT 118
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: ST_TO_ADDR
10206: GO 12101
10208: LD_INT 11
10210: DOUBLE
10211: EQUAL
10212: IFTRUE 10216
10214: GO 10420
10216: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10217: LD_ADDR_VAR 0 2
10221: PUSH
10222: LD_INT 2
10224: PUSH
10225: LD_INT 3
10227: PUSH
10228: LD_INT 4
10230: PUSH
10231: LD_INT 5
10233: PUSH
10234: LD_INT 6
10236: PUSH
10237: LD_INT 7
10239: PUSH
10240: LD_INT 8
10242: PUSH
10243: LD_INT 9
10245: PUSH
10246: LD_INT 10
10248: PUSH
10249: LD_INT 11
10251: PUSH
10252: LD_INT 12
10254: PUSH
10255: LD_INT 13
10257: PUSH
10258: LD_INT 14
10260: PUSH
10261: LD_INT 15
10263: PUSH
10264: LD_INT 16
10266: PUSH
10267: LD_INT 17
10269: PUSH
10270: LD_INT 18
10272: PUSH
10273: LD_INT 19
10275: PUSH
10276: LD_INT 20
10278: PUSH
10279: LD_INT 21
10281: PUSH
10282: LD_INT 22
10284: PUSH
10285: LD_INT 23
10287: PUSH
10288: LD_INT 24
10290: PUSH
10291: LD_INT 25
10293: PUSH
10294: LD_INT 26
10296: PUSH
10297: LD_INT 28
10299: PUSH
10300: LD_INT 30
10302: PUSH
10303: LD_INT 31
10305: PUSH
10306: LD_INT 32
10308: PUSH
10309: LD_INT 34
10311: PUSH
10312: LD_INT 36
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 101
10350: PUSH
10351: LD_INT 102
10353: PUSH
10354: LD_INT 103
10356: PUSH
10357: LD_INT 104
10359: PUSH
10360: LD_INT 105
10362: PUSH
10363: LD_INT 106
10365: PUSH
10366: LD_INT 107
10368: PUSH
10369: LD_INT 108
10371: PUSH
10372: LD_INT 109
10374: PUSH
10375: LD_INT 110
10377: PUSH
10378: LD_INT 111
10380: PUSH
10381: LD_INT 112
10383: PUSH
10384: LD_INT 114
10386: PUSH
10387: LD_INT 116
10389: PUSH
10390: LD_INT 117
10392: PUSH
10393: LD_INT 118
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: ST_TO_ADDR
10418: GO 12101
10420: LD_INT 12
10422: DOUBLE
10423: EQUAL
10424: IFTRUE 10428
10426: GO 10648
10428: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10429: LD_ADDR_VAR 0 2
10433: PUSH
10434: LD_INT 1
10436: PUSH
10437: LD_INT 2
10439: PUSH
10440: LD_INT 3
10442: PUSH
10443: LD_INT 4
10445: PUSH
10446: LD_INT 5
10448: PUSH
10449: LD_INT 6
10451: PUSH
10452: LD_INT 7
10454: PUSH
10455: LD_INT 8
10457: PUSH
10458: LD_INT 9
10460: PUSH
10461: LD_INT 10
10463: PUSH
10464: LD_INT 11
10466: PUSH
10467: LD_INT 12
10469: PUSH
10470: LD_INT 13
10472: PUSH
10473: LD_INT 14
10475: PUSH
10476: LD_INT 15
10478: PUSH
10479: LD_INT 16
10481: PUSH
10482: LD_INT 17
10484: PUSH
10485: LD_INT 18
10487: PUSH
10488: LD_INT 19
10490: PUSH
10491: LD_INT 20
10493: PUSH
10494: LD_INT 21
10496: PUSH
10497: LD_INT 22
10499: PUSH
10500: LD_INT 23
10502: PUSH
10503: LD_INT 24
10505: PUSH
10506: LD_INT 25
10508: PUSH
10509: LD_INT 26
10511: PUSH
10512: LD_INT 27
10514: PUSH
10515: LD_INT 28
10517: PUSH
10518: LD_INT 30
10520: PUSH
10521: LD_INT 31
10523: PUSH
10524: LD_INT 32
10526: PUSH
10527: LD_INT 33
10529: PUSH
10530: LD_INT 34
10532: PUSH
10533: LD_INT 36
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 101
10574: PUSH
10575: LD_INT 102
10577: PUSH
10578: LD_INT 103
10580: PUSH
10581: LD_INT 104
10583: PUSH
10584: LD_INT 105
10586: PUSH
10587: LD_INT 106
10589: PUSH
10590: LD_INT 107
10592: PUSH
10593: LD_INT 108
10595: PUSH
10596: LD_INT 109
10598: PUSH
10599: LD_INT 110
10601: PUSH
10602: LD_INT 111
10604: PUSH
10605: LD_INT 112
10607: PUSH
10608: LD_INT 113
10610: PUSH
10611: LD_INT 114
10613: PUSH
10614: LD_INT 116
10616: PUSH
10617: LD_INT 117
10619: PUSH
10620: LD_INT 118
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: ST_TO_ADDR
10646: GO 12101
10648: LD_INT 13
10650: DOUBLE
10651: EQUAL
10652: IFTRUE 10656
10654: GO 10864
10656: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10657: LD_ADDR_VAR 0 2
10661: PUSH
10662: LD_INT 1
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: LD_INT 3
10670: PUSH
10671: LD_INT 4
10673: PUSH
10674: LD_INT 5
10676: PUSH
10677: LD_INT 8
10679: PUSH
10680: LD_INT 9
10682: PUSH
10683: LD_INT 10
10685: PUSH
10686: LD_INT 11
10688: PUSH
10689: LD_INT 12
10691: PUSH
10692: LD_INT 14
10694: PUSH
10695: LD_INT 15
10697: PUSH
10698: LD_INT 16
10700: PUSH
10701: LD_INT 17
10703: PUSH
10704: LD_INT 18
10706: PUSH
10707: LD_INT 19
10709: PUSH
10710: LD_INT 20
10712: PUSH
10713: LD_INT 21
10715: PUSH
10716: LD_INT 22
10718: PUSH
10719: LD_INT 23
10721: PUSH
10722: LD_INT 24
10724: PUSH
10725: LD_INT 25
10727: PUSH
10728: LD_INT 26
10730: PUSH
10731: LD_INT 27
10733: PUSH
10734: LD_INT 28
10736: PUSH
10737: LD_INT 30
10739: PUSH
10740: LD_INT 31
10742: PUSH
10743: LD_INT 32
10745: PUSH
10746: LD_INT 33
10748: PUSH
10749: LD_INT 34
10751: PUSH
10752: LD_INT 36
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 101
10790: PUSH
10791: LD_INT 102
10793: PUSH
10794: LD_INT 103
10796: PUSH
10797: LD_INT 104
10799: PUSH
10800: LD_INT 105
10802: PUSH
10803: LD_INT 106
10805: PUSH
10806: LD_INT 107
10808: PUSH
10809: LD_INT 108
10811: PUSH
10812: LD_INT 109
10814: PUSH
10815: LD_INT 110
10817: PUSH
10818: LD_INT 111
10820: PUSH
10821: LD_INT 112
10823: PUSH
10824: LD_INT 113
10826: PUSH
10827: LD_INT 114
10829: PUSH
10830: LD_INT 116
10832: PUSH
10833: LD_INT 117
10835: PUSH
10836: LD_INT 118
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: ST_TO_ADDR
10862: GO 12101
10864: LD_INT 14
10866: DOUBLE
10867: EQUAL
10868: IFTRUE 10872
10870: GO 11096
10872: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10873: LD_ADDR_VAR 0 2
10877: PUSH
10878: LD_INT 1
10880: PUSH
10881: LD_INT 2
10883: PUSH
10884: LD_INT 3
10886: PUSH
10887: LD_INT 4
10889: PUSH
10890: LD_INT 5
10892: PUSH
10893: LD_INT 6
10895: PUSH
10896: LD_INT 7
10898: PUSH
10899: LD_INT 8
10901: PUSH
10902: LD_INT 9
10904: PUSH
10905: LD_INT 10
10907: PUSH
10908: LD_INT 11
10910: PUSH
10911: LD_INT 12
10913: PUSH
10914: LD_INT 13
10916: PUSH
10917: LD_INT 14
10919: PUSH
10920: LD_INT 15
10922: PUSH
10923: LD_INT 16
10925: PUSH
10926: LD_INT 17
10928: PUSH
10929: LD_INT 18
10931: PUSH
10932: LD_INT 19
10934: PUSH
10935: LD_INT 20
10937: PUSH
10938: LD_INT 21
10940: PUSH
10941: LD_INT 22
10943: PUSH
10944: LD_INT 23
10946: PUSH
10947: LD_INT 24
10949: PUSH
10950: LD_INT 25
10952: PUSH
10953: LD_INT 26
10955: PUSH
10956: LD_INT 27
10958: PUSH
10959: LD_INT 28
10961: PUSH
10962: LD_INT 29
10964: PUSH
10965: LD_INT 30
10967: PUSH
10968: LD_INT 31
10970: PUSH
10971: LD_INT 32
10973: PUSH
10974: LD_INT 33
10976: PUSH
10977: LD_INT 34
10979: PUSH
10980: LD_INT 36
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: LD_INT 101
11022: PUSH
11023: LD_INT 102
11025: PUSH
11026: LD_INT 103
11028: PUSH
11029: LD_INT 104
11031: PUSH
11032: LD_INT 105
11034: PUSH
11035: LD_INT 106
11037: PUSH
11038: LD_INT 107
11040: PUSH
11041: LD_INT 108
11043: PUSH
11044: LD_INT 109
11046: PUSH
11047: LD_INT 110
11049: PUSH
11050: LD_INT 111
11052: PUSH
11053: LD_INT 112
11055: PUSH
11056: LD_INT 113
11058: PUSH
11059: LD_INT 114
11061: PUSH
11062: LD_INT 116
11064: PUSH
11065: LD_INT 117
11067: PUSH
11068: LD_INT 118
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: ST_TO_ADDR
11094: GO 12101
11096: LD_INT 15
11098: DOUBLE
11099: EQUAL
11100: IFTRUE 11104
11102: GO 11328
11104: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11105: LD_ADDR_VAR 0 2
11109: PUSH
11110: LD_INT 1
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: LD_INT 3
11118: PUSH
11119: LD_INT 4
11121: PUSH
11122: LD_INT 5
11124: PUSH
11125: LD_INT 6
11127: PUSH
11128: LD_INT 7
11130: PUSH
11131: LD_INT 8
11133: PUSH
11134: LD_INT 9
11136: PUSH
11137: LD_INT 10
11139: PUSH
11140: LD_INT 11
11142: PUSH
11143: LD_INT 12
11145: PUSH
11146: LD_INT 13
11148: PUSH
11149: LD_INT 14
11151: PUSH
11152: LD_INT 15
11154: PUSH
11155: LD_INT 16
11157: PUSH
11158: LD_INT 17
11160: PUSH
11161: LD_INT 18
11163: PUSH
11164: LD_INT 19
11166: PUSH
11167: LD_INT 20
11169: PUSH
11170: LD_INT 21
11172: PUSH
11173: LD_INT 22
11175: PUSH
11176: LD_INT 23
11178: PUSH
11179: LD_INT 24
11181: PUSH
11182: LD_INT 25
11184: PUSH
11185: LD_INT 26
11187: PUSH
11188: LD_INT 27
11190: PUSH
11191: LD_INT 28
11193: PUSH
11194: LD_INT 29
11196: PUSH
11197: LD_INT 30
11199: PUSH
11200: LD_INT 31
11202: PUSH
11203: LD_INT 32
11205: PUSH
11206: LD_INT 33
11208: PUSH
11209: LD_INT 34
11211: PUSH
11212: LD_INT 36
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 101
11254: PUSH
11255: LD_INT 102
11257: PUSH
11258: LD_INT 103
11260: PUSH
11261: LD_INT 104
11263: PUSH
11264: LD_INT 105
11266: PUSH
11267: LD_INT 106
11269: PUSH
11270: LD_INT 107
11272: PUSH
11273: LD_INT 108
11275: PUSH
11276: LD_INT 109
11278: PUSH
11279: LD_INT 110
11281: PUSH
11282: LD_INT 111
11284: PUSH
11285: LD_INT 112
11287: PUSH
11288: LD_INT 113
11290: PUSH
11291: LD_INT 114
11293: PUSH
11294: LD_INT 116
11296: PUSH
11297: LD_INT 117
11299: PUSH
11300: LD_INT 118
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: ST_TO_ADDR
11326: GO 12101
11328: LD_INT 16
11330: DOUBLE
11331: EQUAL
11332: IFTRUE 11336
11334: GO 11472
11336: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11337: LD_ADDR_VAR 0 2
11341: PUSH
11342: LD_INT 2
11344: PUSH
11345: LD_INT 4
11347: PUSH
11348: LD_INT 5
11350: PUSH
11351: LD_INT 7
11353: PUSH
11354: LD_INT 11
11356: PUSH
11357: LD_INT 12
11359: PUSH
11360: LD_INT 15
11362: PUSH
11363: LD_INT 16
11365: PUSH
11366: LD_INT 20
11368: PUSH
11369: LD_INT 21
11371: PUSH
11372: LD_INT 22
11374: PUSH
11375: LD_INT 23
11377: PUSH
11378: LD_INT 25
11380: PUSH
11381: LD_INT 26
11383: PUSH
11384: LD_INT 30
11386: PUSH
11387: LD_INT 31
11389: PUSH
11390: LD_INT 32
11392: PUSH
11393: LD_INT 33
11395: PUSH
11396: LD_INT 34
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 101
11422: PUSH
11423: LD_INT 102
11425: PUSH
11426: LD_INT 103
11428: PUSH
11429: LD_INT 106
11431: PUSH
11432: LD_INT 108
11434: PUSH
11435: LD_INT 112
11437: PUSH
11438: LD_INT 113
11440: PUSH
11441: LD_INT 114
11443: PUSH
11444: LD_INT 116
11446: PUSH
11447: LD_INT 117
11449: PUSH
11450: LD_INT 118
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: ST_TO_ADDR
11470: GO 12101
11472: LD_INT 17
11474: DOUBLE
11475: EQUAL
11476: IFTRUE 11480
11478: GO 11704
11480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11481: LD_ADDR_VAR 0 2
11485: PUSH
11486: LD_INT 1
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: LD_INT 3
11494: PUSH
11495: LD_INT 4
11497: PUSH
11498: LD_INT 5
11500: PUSH
11501: LD_INT 6
11503: PUSH
11504: LD_INT 7
11506: PUSH
11507: LD_INT 8
11509: PUSH
11510: LD_INT 9
11512: PUSH
11513: LD_INT 10
11515: PUSH
11516: LD_INT 11
11518: PUSH
11519: LD_INT 12
11521: PUSH
11522: LD_INT 13
11524: PUSH
11525: LD_INT 14
11527: PUSH
11528: LD_INT 15
11530: PUSH
11531: LD_INT 16
11533: PUSH
11534: LD_INT 17
11536: PUSH
11537: LD_INT 18
11539: PUSH
11540: LD_INT 19
11542: PUSH
11543: LD_INT 20
11545: PUSH
11546: LD_INT 21
11548: PUSH
11549: LD_INT 22
11551: PUSH
11552: LD_INT 23
11554: PUSH
11555: LD_INT 24
11557: PUSH
11558: LD_INT 25
11560: PUSH
11561: LD_INT 26
11563: PUSH
11564: LD_INT 27
11566: PUSH
11567: LD_INT 28
11569: PUSH
11570: LD_INT 29
11572: PUSH
11573: LD_INT 30
11575: PUSH
11576: LD_INT 31
11578: PUSH
11579: LD_INT 32
11581: PUSH
11582: LD_INT 33
11584: PUSH
11585: LD_INT 34
11587: PUSH
11588: LD_INT 36
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 101
11630: PUSH
11631: LD_INT 102
11633: PUSH
11634: LD_INT 103
11636: PUSH
11637: LD_INT 104
11639: PUSH
11640: LD_INT 105
11642: PUSH
11643: LD_INT 106
11645: PUSH
11646: LD_INT 107
11648: PUSH
11649: LD_INT 108
11651: PUSH
11652: LD_INT 109
11654: PUSH
11655: LD_INT 110
11657: PUSH
11658: LD_INT 111
11660: PUSH
11661: LD_INT 112
11663: PUSH
11664: LD_INT 113
11666: PUSH
11667: LD_INT 114
11669: PUSH
11670: LD_INT 116
11672: PUSH
11673: LD_INT 117
11675: PUSH
11676: LD_INT 118
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: ST_TO_ADDR
11702: GO 12101
11704: LD_INT 18
11706: DOUBLE
11707: EQUAL
11708: IFTRUE 11712
11710: GO 11860
11712: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11713: LD_ADDR_VAR 0 2
11717: PUSH
11718: LD_INT 2
11720: PUSH
11721: LD_INT 4
11723: PUSH
11724: LD_INT 5
11726: PUSH
11727: LD_INT 7
11729: PUSH
11730: LD_INT 11
11732: PUSH
11733: LD_INT 12
11735: PUSH
11736: LD_INT 15
11738: PUSH
11739: LD_INT 16
11741: PUSH
11742: LD_INT 20
11744: PUSH
11745: LD_INT 21
11747: PUSH
11748: LD_INT 22
11750: PUSH
11751: LD_INT 23
11753: PUSH
11754: LD_INT 25
11756: PUSH
11757: LD_INT 26
11759: PUSH
11760: LD_INT 30
11762: PUSH
11763: LD_INT 31
11765: PUSH
11766: LD_INT 32
11768: PUSH
11769: LD_INT 33
11771: PUSH
11772: LD_INT 34
11774: PUSH
11775: LD_INT 35
11777: PUSH
11778: LD_INT 36
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 101
11806: PUSH
11807: LD_INT 102
11809: PUSH
11810: LD_INT 103
11812: PUSH
11813: LD_INT 106
11815: PUSH
11816: LD_INT 108
11818: PUSH
11819: LD_INT 112
11821: PUSH
11822: LD_INT 113
11824: PUSH
11825: LD_INT 114
11827: PUSH
11828: LD_INT 115
11830: PUSH
11831: LD_INT 116
11833: PUSH
11834: LD_INT 117
11836: PUSH
11837: LD_INT 118
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: ST_TO_ADDR
11858: GO 12101
11860: LD_INT 19
11862: DOUBLE
11863: EQUAL
11864: IFTRUE 11868
11866: GO 12100
11868: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11869: LD_ADDR_VAR 0 2
11873: PUSH
11874: LD_INT 1
11876: PUSH
11877: LD_INT 2
11879: PUSH
11880: LD_INT 3
11882: PUSH
11883: LD_INT 4
11885: PUSH
11886: LD_INT 5
11888: PUSH
11889: LD_INT 6
11891: PUSH
11892: LD_INT 7
11894: PUSH
11895: LD_INT 8
11897: PUSH
11898: LD_INT 9
11900: PUSH
11901: LD_INT 10
11903: PUSH
11904: LD_INT 11
11906: PUSH
11907: LD_INT 12
11909: PUSH
11910: LD_INT 13
11912: PUSH
11913: LD_INT 14
11915: PUSH
11916: LD_INT 15
11918: PUSH
11919: LD_INT 16
11921: PUSH
11922: LD_INT 17
11924: PUSH
11925: LD_INT 18
11927: PUSH
11928: LD_INT 19
11930: PUSH
11931: LD_INT 20
11933: PUSH
11934: LD_INT 21
11936: PUSH
11937: LD_INT 22
11939: PUSH
11940: LD_INT 23
11942: PUSH
11943: LD_INT 24
11945: PUSH
11946: LD_INT 25
11948: PUSH
11949: LD_INT 26
11951: PUSH
11952: LD_INT 27
11954: PUSH
11955: LD_INT 28
11957: PUSH
11958: LD_INT 29
11960: PUSH
11961: LD_INT 30
11963: PUSH
11964: LD_INT 31
11966: PUSH
11967: LD_INT 32
11969: PUSH
11970: LD_INT 33
11972: PUSH
11973: LD_INT 34
11975: PUSH
11976: LD_INT 35
11978: PUSH
11979: LD_INT 36
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 101
12022: PUSH
12023: LD_INT 102
12025: PUSH
12026: LD_INT 103
12028: PUSH
12029: LD_INT 104
12031: PUSH
12032: LD_INT 105
12034: PUSH
12035: LD_INT 106
12037: PUSH
12038: LD_INT 107
12040: PUSH
12041: LD_INT 108
12043: PUSH
12044: LD_INT 109
12046: PUSH
12047: LD_INT 110
12049: PUSH
12050: LD_INT 111
12052: PUSH
12053: LD_INT 112
12055: PUSH
12056: LD_INT 113
12058: PUSH
12059: LD_INT 114
12061: PUSH
12062: LD_INT 115
12064: PUSH
12065: LD_INT 116
12067: PUSH
12068: LD_INT 117
12070: PUSH
12071: LD_INT 118
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: ST_TO_ADDR
12098: GO 12101
12100: POP
// end else
12101: GO 12332
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12103: LD_ADDR_VAR 0 2
12107: PUSH
12108: LD_INT 1
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: LD_INT 4
12119: PUSH
12120: LD_INT 5
12122: PUSH
12123: LD_INT 6
12125: PUSH
12126: LD_INT 7
12128: PUSH
12129: LD_INT 8
12131: PUSH
12132: LD_INT 9
12134: PUSH
12135: LD_INT 10
12137: PUSH
12138: LD_INT 11
12140: PUSH
12141: LD_INT 12
12143: PUSH
12144: LD_INT 13
12146: PUSH
12147: LD_INT 14
12149: PUSH
12150: LD_INT 15
12152: PUSH
12153: LD_INT 16
12155: PUSH
12156: LD_INT 17
12158: PUSH
12159: LD_INT 18
12161: PUSH
12162: LD_INT 19
12164: PUSH
12165: LD_INT 20
12167: PUSH
12168: LD_INT 21
12170: PUSH
12171: LD_INT 22
12173: PUSH
12174: LD_INT 23
12176: PUSH
12177: LD_INT 24
12179: PUSH
12180: LD_INT 25
12182: PUSH
12183: LD_INT 26
12185: PUSH
12186: LD_INT 27
12188: PUSH
12189: LD_INT 28
12191: PUSH
12192: LD_INT 29
12194: PUSH
12195: LD_INT 30
12197: PUSH
12198: LD_INT 31
12200: PUSH
12201: LD_INT 32
12203: PUSH
12204: LD_INT 33
12206: PUSH
12207: LD_INT 34
12209: PUSH
12210: LD_INT 35
12212: PUSH
12213: LD_INT 36
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 101
12256: PUSH
12257: LD_INT 102
12259: PUSH
12260: LD_INT 103
12262: PUSH
12263: LD_INT 104
12265: PUSH
12266: LD_INT 105
12268: PUSH
12269: LD_INT 106
12271: PUSH
12272: LD_INT 107
12274: PUSH
12275: LD_INT 108
12277: PUSH
12278: LD_INT 109
12280: PUSH
12281: LD_INT 110
12283: PUSH
12284: LD_INT 111
12286: PUSH
12287: LD_INT 112
12289: PUSH
12290: LD_INT 113
12292: PUSH
12293: LD_INT 114
12295: PUSH
12296: LD_INT 115
12298: PUSH
12299: LD_INT 116
12301: PUSH
12302: LD_INT 117
12304: PUSH
12305: LD_INT 118
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: ST_TO_ADDR
// if result then
12332: LD_VAR 0 2
12336: IFFALSE 13122
// begin normal :=  ;
12338: LD_ADDR_VAR 0 5
12342: PUSH
12343: LD_STRING 
12345: ST_TO_ADDR
// hardcore :=  ;
12346: LD_ADDR_VAR 0 6
12350: PUSH
12351: LD_STRING 
12353: ST_TO_ADDR
// active :=  ;
12354: LD_ADDR_VAR 0 7
12358: PUSH
12359: LD_STRING 
12361: ST_TO_ADDR
// for i = 1 to normalCounter do
12362: LD_ADDR_VAR 0 8
12366: PUSH
12367: DOUBLE
12368: LD_INT 1
12370: DEC
12371: ST_TO_ADDR
12372: LD_EXP 37
12376: PUSH
12377: FOR_TO
12378: IFFALSE 12479
// begin tmp := 0 ;
12380: LD_ADDR_VAR 0 3
12384: PUSH
12385: LD_STRING 0
12387: ST_TO_ADDR
// if result [ 1 ] then
12388: LD_VAR 0 2
12392: PUSH
12393: LD_INT 1
12395: ARRAY
12396: IFFALSE 12461
// if result [ 1 ] [ 1 ] = i then
12398: LD_VAR 0 2
12402: PUSH
12403: LD_INT 1
12405: ARRAY
12406: PUSH
12407: LD_INT 1
12409: ARRAY
12410: PUSH
12411: LD_VAR 0 8
12415: EQUAL
12416: IFFALSE 12461
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12418: LD_ADDR_VAR 0 2
12422: PUSH
12423: LD_VAR 0 2
12427: PPUSH
12428: LD_INT 1
12430: PPUSH
12431: LD_VAR 0 2
12435: PUSH
12436: LD_INT 1
12438: ARRAY
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 3
12447: PPUSH
12448: CALL_OW 1
12452: ST_TO_ADDR
// tmp := 1 ;
12453: LD_ADDR_VAR 0 3
12457: PUSH
12458: LD_STRING 1
12460: ST_TO_ADDR
// end ; normal := normal & tmp ;
12461: LD_ADDR_VAR 0 5
12465: PUSH
12466: LD_VAR 0 5
12470: PUSH
12471: LD_VAR 0 3
12475: STR
12476: ST_TO_ADDR
// end ;
12477: GO 12377
12479: POP
12480: POP
// for i = 1 to hardcoreCounter do
12481: LD_ADDR_VAR 0 8
12485: PUSH
12486: DOUBLE
12487: LD_INT 1
12489: DEC
12490: ST_TO_ADDR
12491: LD_EXP 38
12495: PUSH
12496: FOR_TO
12497: IFFALSE 12602
// begin tmp := 0 ;
12499: LD_ADDR_VAR 0 3
12503: PUSH
12504: LD_STRING 0
12506: ST_TO_ADDR
// if result [ 2 ] then
12507: LD_VAR 0 2
12511: PUSH
12512: LD_INT 2
12514: ARRAY
12515: IFFALSE 12584
// if result [ 2 ] [ 1 ] = 100 + i then
12517: LD_VAR 0 2
12521: PUSH
12522: LD_INT 2
12524: ARRAY
12525: PUSH
12526: LD_INT 1
12528: ARRAY
12529: PUSH
12530: LD_INT 100
12532: PUSH
12533: LD_VAR 0 8
12537: PLUS
12538: EQUAL
12539: IFFALSE 12584
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12541: LD_ADDR_VAR 0 2
12545: PUSH
12546: LD_VAR 0 2
12550: PPUSH
12551: LD_INT 2
12553: PPUSH
12554: LD_VAR 0 2
12558: PUSH
12559: LD_INT 2
12561: ARRAY
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 3
12570: PPUSH
12571: CALL_OW 1
12575: ST_TO_ADDR
// tmp := 1 ;
12576: LD_ADDR_VAR 0 3
12580: PUSH
12581: LD_STRING 1
12583: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12584: LD_ADDR_VAR 0 6
12588: PUSH
12589: LD_VAR 0 6
12593: PUSH
12594: LD_VAR 0 3
12598: STR
12599: ST_TO_ADDR
// end ;
12600: GO 12496
12602: POP
12603: POP
// if isGameLoad then
12604: LD_VAR 0 1
12608: IFFALSE 13083
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12610: LD_ADDR_VAR 0 4
12614: PUSH
12615: LD_EXP 41
12619: PUSH
12620: LD_EXP 40
12624: PUSH
12625: LD_EXP 42
12629: PUSH
12630: LD_EXP 39
12634: PUSH
12635: LD_EXP 43
12639: PUSH
12640: LD_EXP 44
12644: PUSH
12645: LD_EXP 45
12649: PUSH
12650: LD_EXP 46
12654: PUSH
12655: LD_EXP 47
12659: PUSH
12660: LD_EXP 48
12664: PUSH
12665: LD_EXP 49
12669: PUSH
12670: LD_EXP 50
12674: PUSH
12675: LD_EXP 51
12679: PUSH
12680: LD_EXP 52
12684: PUSH
12685: LD_EXP 60
12689: PUSH
12690: LD_EXP 61
12694: PUSH
12695: LD_EXP 62
12699: PUSH
12700: LD_EXP 63
12704: PUSH
12705: LD_EXP 65
12709: PUSH
12710: LD_EXP 66
12714: PUSH
12715: LD_EXP 67
12719: PUSH
12720: LD_EXP 70
12724: PUSH
12725: LD_EXP 72
12729: PUSH
12730: LD_EXP 73
12734: PUSH
12735: LD_EXP 74
12739: PUSH
12740: LD_EXP 76
12744: PUSH
12745: LD_EXP 77
12749: PUSH
12750: LD_EXP 80
12754: PUSH
12755: LD_EXP 81
12759: PUSH
12760: LD_EXP 82
12764: PUSH
12765: LD_EXP 83
12769: PUSH
12770: LD_EXP 84
12774: PUSH
12775: LD_EXP 85
12779: PUSH
12780: LD_EXP 86
12784: PUSH
12785: LD_EXP 87
12789: PUSH
12790: LD_EXP 88
12794: PUSH
12795: LD_EXP 53
12799: PUSH
12800: LD_EXP 54
12804: PUSH
12805: LD_EXP 57
12809: PUSH
12810: LD_EXP 58
12814: PUSH
12815: LD_EXP 59
12819: PUSH
12820: LD_EXP 55
12824: PUSH
12825: LD_EXP 56
12829: PUSH
12830: LD_EXP 64
12834: PUSH
12835: LD_EXP 68
12839: PUSH
12840: LD_EXP 69
12844: PUSH
12845: LD_EXP 71
12849: PUSH
12850: LD_EXP 75
12854: PUSH
12855: LD_EXP 78
12859: PUSH
12860: LD_EXP 79
12864: PUSH
12865: LD_EXP 89
12869: PUSH
12870: LD_EXP 90
12874: PUSH
12875: LD_EXP 91
12879: PUSH
12880: LD_EXP 92
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: ST_TO_ADDR
// tmp :=  ;
12941: LD_ADDR_VAR 0 3
12945: PUSH
12946: LD_STRING 
12948: ST_TO_ADDR
// for i = 1 to normalCounter do
12949: LD_ADDR_VAR 0 8
12953: PUSH
12954: DOUBLE
12955: LD_INT 1
12957: DEC
12958: ST_TO_ADDR
12959: LD_EXP 37
12963: PUSH
12964: FOR_TO
12965: IFFALSE 13001
// begin if flags [ i ] then
12967: LD_VAR 0 4
12971: PUSH
12972: LD_VAR 0 8
12976: ARRAY
12977: IFFALSE 12999
// tmp := tmp & i & ; ;
12979: LD_ADDR_VAR 0 3
12983: PUSH
12984: LD_VAR 0 3
12988: PUSH
12989: LD_VAR 0 8
12993: STR
12994: PUSH
12995: LD_STRING ;
12997: STR
12998: ST_TO_ADDR
// end ;
12999: GO 12964
13001: POP
13002: POP
// for i = 1 to hardcoreCounter do
13003: LD_ADDR_VAR 0 8
13007: PUSH
13008: DOUBLE
13009: LD_INT 1
13011: DEC
13012: ST_TO_ADDR
13013: LD_EXP 38
13017: PUSH
13018: FOR_TO
13019: IFFALSE 13065
// begin if flags [ normalCounter + i ] then
13021: LD_VAR 0 4
13025: PUSH
13026: LD_EXP 37
13030: PUSH
13031: LD_VAR 0 8
13035: PLUS
13036: ARRAY
13037: IFFALSE 13063
// tmp := tmp & ( 100 + i ) & ; ;
13039: LD_ADDR_VAR 0 3
13043: PUSH
13044: LD_VAR 0 3
13048: PUSH
13049: LD_INT 100
13051: PUSH
13052: LD_VAR 0 8
13056: PLUS
13057: STR
13058: PUSH
13059: LD_STRING ;
13061: STR
13062: ST_TO_ADDR
// end ;
13063: GO 13018
13065: POP
13066: POP
// if tmp then
13067: LD_VAR 0 3
13071: IFFALSE 13083
// active := tmp ;
13073: LD_ADDR_VAR 0 7
13077: PUSH
13078: LD_VAR 0 3
13082: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13083: LD_STRING getStreamItemsFromMission("
13085: PUSH
13086: LD_VAR 0 5
13090: STR
13091: PUSH
13092: LD_STRING ","
13094: STR
13095: PUSH
13096: LD_VAR 0 6
13100: STR
13101: PUSH
13102: LD_STRING ","
13104: STR
13105: PUSH
13106: LD_VAR 0 7
13110: STR
13111: PUSH
13112: LD_STRING ")
13114: STR
13115: PPUSH
13116: CALL_OW 559
// end else
13120: GO 13129
// ToLua ( getStreamItemsFromMission("","","") ) ;
13122: LD_STRING getStreamItemsFromMission("","","")
13124: PPUSH
13125: CALL_OW 559
// end ;
13129: LD_VAR 0 2
13133: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13134: LD_EXP 36
13138: PUSH
13139: LD_EXP 41
13143: AND
13144: IFFALSE 13268
13146: GO 13148
13148: DISABLE
13149: LD_INT 0
13151: PPUSH
13152: PPUSH
// begin enable ;
13153: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13154: LD_ADDR_VAR 0 2
13158: PUSH
13159: LD_INT 22
13161: PUSH
13162: LD_OWVAR 2
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 2
13173: PUSH
13174: LD_INT 34
13176: PUSH
13177: LD_INT 7
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 34
13186: PUSH
13187: LD_INT 45
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 34
13196: PUSH
13197: LD_INT 28
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 34
13206: PUSH
13207: LD_INT 47
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: ST_TO_ADDR
// if not tmp then
13230: LD_VAR 0 2
13234: NOT
13235: IFFALSE 13239
// exit ;
13237: GO 13268
// for i in tmp do
13239: LD_ADDR_VAR 0 1
13243: PUSH
13244: LD_VAR 0 2
13248: PUSH
13249: FOR_IN
13250: IFFALSE 13266
// begin SetLives ( i , 0 ) ;
13252: LD_VAR 0 1
13256: PPUSH
13257: LD_INT 0
13259: PPUSH
13260: CALL_OW 234
// end ;
13264: GO 13249
13266: POP
13267: POP
// end ;
13268: PPOPN 2
13270: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13271: LD_EXP 36
13275: PUSH
13276: LD_EXP 42
13280: AND
13281: IFFALSE 13365
13283: GO 13285
13285: DISABLE
13286: LD_INT 0
13288: PPUSH
13289: PPUSH
// begin enable ;
13290: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13291: LD_ADDR_VAR 0 2
13295: PUSH
13296: LD_INT 22
13298: PUSH
13299: LD_OWVAR 2
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 32
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 69
13326: ST_TO_ADDR
// if not tmp then
13327: LD_VAR 0 2
13331: NOT
13332: IFFALSE 13336
// exit ;
13334: GO 13365
// for i in tmp do
13336: LD_ADDR_VAR 0 1
13340: PUSH
13341: LD_VAR 0 2
13345: PUSH
13346: FOR_IN
13347: IFFALSE 13363
// begin SetLives ( i , 0 ) ;
13349: LD_VAR 0 1
13353: PPUSH
13354: LD_INT 0
13356: PPUSH
13357: CALL_OW 234
// end ;
13361: GO 13346
13363: POP
13364: POP
// end ;
13365: PPOPN 2
13367: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13368: LD_EXP 36
13372: PUSH
13373: LD_EXP 39
13377: AND
13378: IFFALSE 13471
13380: GO 13382
13382: DISABLE
13383: LD_INT 0
13385: PPUSH
// begin enable ;
13386: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13387: LD_ADDR_VAR 0 1
13391: PUSH
13392: LD_INT 22
13394: PUSH
13395: LD_OWVAR 2
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: LD_INT 25
13409: PUSH
13410: LD_INT 5
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 25
13419: PUSH
13420: LD_INT 9
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 25
13429: PUSH
13430: LD_INT 8
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: PUSH
13452: FOR_IN
13453: IFFALSE 13469
// begin SetClass ( i , 1 ) ;
13455: LD_VAR 0 1
13459: PPUSH
13460: LD_INT 1
13462: PPUSH
13463: CALL_OW 336
// end ;
13467: GO 13452
13469: POP
13470: POP
// end ;
13471: PPOPN 1
13473: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13474: LD_EXP 36
13478: PUSH
13479: LD_EXP 40
13483: AND
13484: PUSH
13485: LD_OWVAR 65
13489: PUSH
13490: LD_INT 7
13492: LESS
13493: AND
13494: IFFALSE 13508
13496: GO 13498
13498: DISABLE
// begin enable ;
13499: ENABLE
// game_speed := 7 ;
13500: LD_ADDR_OWVAR 65
13504: PUSH
13505: LD_INT 7
13507: ST_TO_ADDR
// end ;
13508: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13509: LD_EXP 36
13513: PUSH
13514: LD_EXP 43
13518: AND
13519: IFFALSE 13721
13521: GO 13523
13523: DISABLE
13524: LD_INT 0
13526: PPUSH
13527: PPUSH
13528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13529: LD_ADDR_VAR 0 3
13533: PUSH
13534: LD_INT 81
13536: PUSH
13537: LD_OWVAR 2
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 21
13548: PUSH
13549: LD_INT 1
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: ST_TO_ADDR
// if not tmp then
13565: LD_VAR 0 3
13569: NOT
13570: IFFALSE 13574
// exit ;
13572: GO 13721
// if tmp > 5 then
13574: LD_VAR 0 3
13578: PUSH
13579: LD_INT 5
13581: GREATER
13582: IFFALSE 13594
// k := 5 else
13584: LD_ADDR_VAR 0 2
13588: PUSH
13589: LD_INT 5
13591: ST_TO_ADDR
13592: GO 13604
// k := tmp ;
13594: LD_ADDR_VAR 0 2
13598: PUSH
13599: LD_VAR 0 3
13603: ST_TO_ADDR
// for i := 1 to k do
13604: LD_ADDR_VAR 0 1
13608: PUSH
13609: DOUBLE
13610: LD_INT 1
13612: DEC
13613: ST_TO_ADDR
13614: LD_VAR 0 2
13618: PUSH
13619: FOR_TO
13620: IFFALSE 13719
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13622: LD_VAR 0 3
13626: PUSH
13627: LD_VAR 0 1
13631: ARRAY
13632: PPUSH
13633: LD_VAR 0 1
13637: PUSH
13638: LD_INT 4
13640: MOD
13641: PUSH
13642: LD_INT 1
13644: PLUS
13645: PPUSH
13646: CALL_OW 259
13650: PUSH
13651: LD_INT 10
13653: LESS
13654: IFFALSE 13717
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13656: LD_VAR 0 3
13660: PUSH
13661: LD_VAR 0 1
13665: ARRAY
13666: PPUSH
13667: LD_VAR 0 1
13671: PUSH
13672: LD_INT 4
13674: MOD
13675: PUSH
13676: LD_INT 1
13678: PLUS
13679: PPUSH
13680: LD_VAR 0 3
13684: PUSH
13685: LD_VAR 0 1
13689: ARRAY
13690: PPUSH
13691: LD_VAR 0 1
13695: PUSH
13696: LD_INT 4
13698: MOD
13699: PUSH
13700: LD_INT 1
13702: PLUS
13703: PPUSH
13704: CALL_OW 259
13708: PUSH
13709: LD_INT 1
13711: PLUS
13712: PPUSH
13713: CALL_OW 237
13717: GO 13619
13719: POP
13720: POP
// end ;
13721: PPOPN 3
13723: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13724: LD_EXP 36
13728: PUSH
13729: LD_EXP 44
13733: AND
13734: IFFALSE 13754
13736: GO 13738
13738: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13739: LD_INT 4
13741: PPUSH
13742: LD_OWVAR 2
13746: PPUSH
13747: LD_INT 0
13749: PPUSH
13750: CALL_OW 324
13754: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13755: LD_EXP 36
13759: PUSH
13760: LD_EXP 73
13764: AND
13765: IFFALSE 13785
13767: GO 13769
13769: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13770: LD_INT 19
13772: PPUSH
13773: LD_OWVAR 2
13777: PPUSH
13778: LD_INT 0
13780: PPUSH
13781: CALL_OW 324
13785: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13786: LD_EXP 36
13790: PUSH
13791: LD_EXP 45
13795: AND
13796: IFFALSE 13898
13798: GO 13800
13800: DISABLE
13801: LD_INT 0
13803: PPUSH
13804: PPUSH
// begin enable ;
13805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13806: LD_ADDR_VAR 0 2
13810: PUSH
13811: LD_INT 22
13813: PUSH
13814: LD_OWVAR 2
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 34
13828: PUSH
13829: LD_INT 11
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: LD_INT 34
13838: PUSH
13839: LD_INT 30
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PPUSH
13855: CALL_OW 69
13859: ST_TO_ADDR
// if not tmp then
13860: LD_VAR 0 2
13864: NOT
13865: IFFALSE 13869
// exit ;
13867: GO 13898
// for i in tmp do
13869: LD_ADDR_VAR 0 1
13873: PUSH
13874: LD_VAR 0 2
13878: PUSH
13879: FOR_IN
13880: IFFALSE 13896
// begin SetLives ( i , 0 ) ;
13882: LD_VAR 0 1
13886: PPUSH
13887: LD_INT 0
13889: PPUSH
13890: CALL_OW 234
// end ;
13894: GO 13879
13896: POP
13897: POP
// end ;
13898: PPOPN 2
13900: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13901: LD_EXP 36
13905: PUSH
13906: LD_EXP 46
13910: AND
13911: IFFALSE 13931
13913: GO 13915
13915: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13916: LD_INT 32
13918: PPUSH
13919: LD_OWVAR 2
13923: PPUSH
13924: LD_INT 0
13926: PPUSH
13927: CALL_OW 324
13931: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13932: LD_EXP 36
13936: PUSH
13937: LD_EXP 47
13941: AND
13942: IFFALSE 14123
13944: GO 13946
13946: DISABLE
13947: LD_INT 0
13949: PPUSH
13950: PPUSH
13951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13952: LD_ADDR_VAR 0 2
13956: PUSH
13957: LD_INT 22
13959: PUSH
13960: LD_OWVAR 2
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 33
13971: PUSH
13972: LD_INT 3
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PPUSH
13983: CALL_OW 69
13987: ST_TO_ADDR
// if not tmp then
13988: LD_VAR 0 2
13992: NOT
13993: IFFALSE 13997
// exit ;
13995: GO 14123
// side := 0 ;
13997: LD_ADDR_VAR 0 3
14001: PUSH
14002: LD_INT 0
14004: ST_TO_ADDR
// for i := 1 to 8 do
14005: LD_ADDR_VAR 0 1
14009: PUSH
14010: DOUBLE
14011: LD_INT 1
14013: DEC
14014: ST_TO_ADDR
14015: LD_INT 8
14017: PUSH
14018: FOR_TO
14019: IFFALSE 14067
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14021: LD_OWVAR 2
14025: PUSH
14026: LD_VAR 0 1
14030: NONEQUAL
14031: PUSH
14032: LD_OWVAR 2
14036: PPUSH
14037: LD_VAR 0 1
14041: PPUSH
14042: CALL_OW 81
14046: PUSH
14047: LD_INT 2
14049: EQUAL
14050: AND
14051: IFFALSE 14065
// begin side := i ;
14053: LD_ADDR_VAR 0 3
14057: PUSH
14058: LD_VAR 0 1
14062: ST_TO_ADDR
// break ;
14063: GO 14067
// end ;
14065: GO 14018
14067: POP
14068: POP
// if not side then
14069: LD_VAR 0 3
14073: NOT
14074: IFFALSE 14078
// exit ;
14076: GO 14123
// for i := 1 to tmp do
14078: LD_ADDR_VAR 0 1
14082: PUSH
14083: DOUBLE
14084: LD_INT 1
14086: DEC
14087: ST_TO_ADDR
14088: LD_VAR 0 2
14092: PUSH
14093: FOR_TO
14094: IFFALSE 14121
// if Prob ( 60 ) then
14096: LD_INT 60
14098: PPUSH
14099: CALL_OW 13
14103: IFFALSE 14119
// SetSide ( i , side ) ;
14105: LD_VAR 0 1
14109: PPUSH
14110: LD_VAR 0 3
14114: PPUSH
14115: CALL_OW 235
14119: GO 14093
14121: POP
14122: POP
// end ;
14123: PPOPN 3
14125: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14126: LD_EXP 36
14130: PUSH
14131: LD_EXP 49
14135: AND
14136: IFFALSE 14255
14138: GO 14140
14140: DISABLE
14141: LD_INT 0
14143: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14144: LD_ADDR_VAR 0 1
14148: PUSH
14149: LD_INT 22
14151: PUSH
14152: LD_OWVAR 2
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 21
14163: PUSH
14164: LD_INT 1
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: LD_INT 3
14173: PUSH
14174: LD_INT 23
14176: PUSH
14177: LD_INT 0
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: LIST
14192: PPUSH
14193: CALL_OW 69
14197: PUSH
14198: FOR_IN
14199: IFFALSE 14253
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14201: LD_VAR 0 1
14205: PPUSH
14206: CALL_OW 257
14210: PUSH
14211: LD_INT 1
14213: PUSH
14214: LD_INT 2
14216: PUSH
14217: LD_INT 3
14219: PUSH
14220: LD_INT 4
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: IN
14229: IFFALSE 14251
// SetClass ( un , rand ( 1 , 4 ) ) ;
14231: LD_VAR 0 1
14235: PPUSH
14236: LD_INT 1
14238: PPUSH
14239: LD_INT 4
14241: PPUSH
14242: CALL_OW 12
14246: PPUSH
14247: CALL_OW 336
14251: GO 14198
14253: POP
14254: POP
// end ;
14255: PPOPN 1
14257: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14258: LD_EXP 36
14262: PUSH
14263: LD_EXP 48
14267: AND
14268: IFFALSE 14347
14270: GO 14272
14272: DISABLE
14273: LD_INT 0
14275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14276: LD_ADDR_VAR 0 1
14280: PUSH
14281: LD_INT 22
14283: PUSH
14284: LD_OWVAR 2
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 21
14295: PUSH
14296: LD_INT 3
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: ST_TO_ADDR
// if not tmp then
14312: LD_VAR 0 1
14316: NOT
14317: IFFALSE 14321
// exit ;
14319: GO 14347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14321: LD_VAR 0 1
14325: PUSH
14326: LD_INT 1
14328: PPUSH
14329: LD_VAR 0 1
14333: PPUSH
14334: CALL_OW 12
14338: ARRAY
14339: PPUSH
14340: LD_INT 100
14342: PPUSH
14343: CALL_OW 234
// end ;
14347: PPOPN 1
14349: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14350: LD_EXP 36
14354: PUSH
14355: LD_EXP 50
14359: AND
14360: IFFALSE 14458
14362: GO 14364
14364: DISABLE
14365: LD_INT 0
14367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14368: LD_ADDR_VAR 0 1
14372: PUSH
14373: LD_INT 22
14375: PUSH
14376: LD_OWVAR 2
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 21
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PPUSH
14399: CALL_OW 69
14403: ST_TO_ADDR
// if not tmp then
14404: LD_VAR 0 1
14408: NOT
14409: IFFALSE 14413
// exit ;
14411: GO 14458
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14413: LD_VAR 0 1
14417: PUSH
14418: LD_INT 1
14420: PPUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 12
14430: ARRAY
14431: PPUSH
14432: LD_INT 1
14434: PPUSH
14435: LD_INT 4
14437: PPUSH
14438: CALL_OW 12
14442: PPUSH
14443: LD_INT 3000
14445: PPUSH
14446: LD_INT 9000
14448: PPUSH
14449: CALL_OW 12
14453: PPUSH
14454: CALL_OW 492
// end ;
14458: PPOPN 1
14460: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14461: LD_EXP 36
14465: PUSH
14466: LD_EXP 51
14470: AND
14471: IFFALSE 14491
14473: GO 14475
14475: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14476: LD_INT 1
14478: PPUSH
14479: LD_OWVAR 2
14483: PPUSH
14484: LD_INT 0
14486: PPUSH
14487: CALL_OW 324
14491: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14492: LD_EXP 36
14496: PUSH
14497: LD_EXP 52
14501: AND
14502: IFFALSE 14585
14504: GO 14506
14506: DISABLE
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: LD_INT 22
14518: PUSH
14519: LD_OWVAR 2
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 21
14530: PUSH
14531: LD_INT 3
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: CALL_OW 69
14546: ST_TO_ADDR
// if not tmp then
14547: LD_VAR 0 2
14551: NOT
14552: IFFALSE 14556
// exit ;
14554: GO 14585
// for i in tmp do
14556: LD_ADDR_VAR 0 1
14560: PUSH
14561: LD_VAR 0 2
14565: PUSH
14566: FOR_IN
14567: IFFALSE 14583
// SetBLevel ( i , 10 ) ;
14569: LD_VAR 0 1
14573: PPUSH
14574: LD_INT 10
14576: PPUSH
14577: CALL_OW 241
14581: GO 14566
14583: POP
14584: POP
// end ;
14585: PPOPN 2
14587: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14588: LD_EXP 36
14592: PUSH
14593: LD_EXP 53
14597: AND
14598: IFFALSE 14709
14600: GO 14602
14602: DISABLE
14603: LD_INT 0
14605: PPUSH
14606: PPUSH
14607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14608: LD_ADDR_VAR 0 3
14612: PUSH
14613: LD_INT 22
14615: PUSH
14616: LD_OWVAR 2
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 25
14627: PUSH
14628: LD_INT 1
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PPUSH
14639: CALL_OW 69
14643: ST_TO_ADDR
// if not tmp then
14644: LD_VAR 0 3
14648: NOT
14649: IFFALSE 14653
// exit ;
14651: GO 14709
// un := tmp [ rand ( 1 , tmp ) ] ;
14653: LD_ADDR_VAR 0 2
14657: PUSH
14658: LD_VAR 0 3
14662: PUSH
14663: LD_INT 1
14665: PPUSH
14666: LD_VAR 0 3
14670: PPUSH
14671: CALL_OW 12
14675: ARRAY
14676: ST_TO_ADDR
// if Crawls ( un ) then
14677: LD_VAR 0 2
14681: PPUSH
14682: CALL_OW 318
14686: IFFALSE 14697
// ComWalk ( un ) ;
14688: LD_VAR 0 2
14692: PPUSH
14693: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14697: LD_VAR 0 2
14701: PPUSH
14702: LD_INT 5
14704: PPUSH
14705: CALL_OW 336
// end ;
14709: PPOPN 3
14711: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14712: LD_EXP 36
14716: PUSH
14717: LD_EXP 54
14721: AND
14722: PUSH
14723: LD_OWVAR 67
14727: PUSH
14728: LD_INT 4
14730: LESS
14731: AND
14732: IFFALSE 14751
14734: GO 14736
14736: DISABLE
// begin Difficulty := Difficulty + 1 ;
14737: LD_ADDR_OWVAR 67
14741: PUSH
14742: LD_OWVAR 67
14746: PUSH
14747: LD_INT 1
14749: PLUS
14750: ST_TO_ADDR
// end ;
14751: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14752: LD_EXP 36
14756: PUSH
14757: LD_EXP 55
14761: AND
14762: IFFALSE 14865
14764: GO 14766
14766: DISABLE
14767: LD_INT 0
14769: PPUSH
// begin for i := 1 to 5 do
14770: LD_ADDR_VAR 0 1
14774: PUSH
14775: DOUBLE
14776: LD_INT 1
14778: DEC
14779: ST_TO_ADDR
14780: LD_INT 5
14782: PUSH
14783: FOR_TO
14784: IFFALSE 14863
// begin uc_nation := nation_nature ;
14786: LD_ADDR_OWVAR 21
14790: PUSH
14791: LD_INT 0
14793: ST_TO_ADDR
// uc_side := 0 ;
14794: LD_ADDR_OWVAR 20
14798: PUSH
14799: LD_INT 0
14801: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14802: LD_ADDR_OWVAR 29
14806: PUSH
14807: LD_INT 12
14809: PUSH
14810: LD_INT 12
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: ST_TO_ADDR
// hc_agressivity := 20 ;
14817: LD_ADDR_OWVAR 35
14821: PUSH
14822: LD_INT 20
14824: ST_TO_ADDR
// hc_class := class_tiger ;
14825: LD_ADDR_OWVAR 28
14829: PUSH
14830: LD_INT 14
14832: ST_TO_ADDR
// hc_gallery :=  ;
14833: LD_ADDR_OWVAR 33
14837: PUSH
14838: LD_STRING 
14840: ST_TO_ADDR
// hc_name :=  ;
14841: LD_ADDR_OWVAR 26
14845: PUSH
14846: LD_STRING 
14848: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14849: CALL_OW 44
14853: PPUSH
14854: LD_INT 0
14856: PPUSH
14857: CALL_OW 51
// end ;
14861: GO 14783
14863: POP
14864: POP
// end ;
14865: PPOPN 1
14867: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14868: LD_EXP 36
14872: PUSH
14873: LD_EXP 56
14877: AND
14878: IFFALSE 14887
14880: GO 14882
14882: DISABLE
// StreamSibBomb ;
14883: CALL 14888 0 0
14887: END
// export function StreamSibBomb ; var i , x , y ; begin
14888: LD_INT 0
14890: PPUSH
14891: PPUSH
14892: PPUSH
14893: PPUSH
// result := false ;
14894: LD_ADDR_VAR 0 1
14898: PUSH
14899: LD_INT 0
14901: ST_TO_ADDR
// for i := 1 to 16 do
14902: LD_ADDR_VAR 0 2
14906: PUSH
14907: DOUBLE
14908: LD_INT 1
14910: DEC
14911: ST_TO_ADDR
14912: LD_INT 16
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15115
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14918: LD_ADDR_VAR 0 3
14922: PUSH
14923: LD_INT 10
14925: PUSH
14926: LD_INT 20
14928: PUSH
14929: LD_INT 30
14931: PUSH
14932: LD_INT 40
14934: PUSH
14935: LD_INT 50
14937: PUSH
14938: LD_INT 60
14940: PUSH
14941: LD_INT 70
14943: PUSH
14944: LD_INT 80
14946: PUSH
14947: LD_INT 90
14949: PUSH
14950: LD_INT 100
14952: PUSH
14953: LD_INT 110
14955: PUSH
14956: LD_INT 120
14958: PUSH
14959: LD_INT 130
14961: PUSH
14962: LD_INT 140
14964: PUSH
14965: LD_INT 150
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 1
14987: PPUSH
14988: LD_INT 15
14990: PPUSH
14991: CALL_OW 12
14995: ARRAY
14996: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14997: LD_ADDR_VAR 0 4
15001: PUSH
15002: LD_INT 10
15004: PUSH
15005: LD_INT 20
15007: PUSH
15008: LD_INT 30
15010: PUSH
15011: LD_INT 40
15013: PUSH
15014: LD_INT 50
15016: PUSH
15017: LD_INT 60
15019: PUSH
15020: LD_INT 70
15022: PUSH
15023: LD_INT 80
15025: PUSH
15026: LD_INT 90
15028: PUSH
15029: LD_INT 100
15031: PUSH
15032: LD_INT 110
15034: PUSH
15035: LD_INT 120
15037: PUSH
15038: LD_INT 130
15040: PUSH
15041: LD_INT 140
15043: PUSH
15044: LD_INT 150
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 1
15066: PPUSH
15067: LD_INT 15
15069: PPUSH
15070: CALL_OW 12
15074: ARRAY
15075: ST_TO_ADDR
// if ValidHex ( x , y ) then
15076: LD_VAR 0 3
15080: PPUSH
15081: LD_VAR 0 4
15085: PPUSH
15086: CALL_OW 488
15090: IFFALSE 15113
// begin result := [ x , y ] ;
15092: LD_ADDR_VAR 0 1
15096: PUSH
15097: LD_VAR 0 3
15101: PUSH
15102: LD_VAR 0 4
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: ST_TO_ADDR
// break ;
15111: GO 15115
// end ; end ;
15113: GO 14915
15115: POP
15116: POP
// if result then
15117: LD_VAR 0 1
15121: IFFALSE 15181
// begin ToLua ( playSibBomb() ) ;
15123: LD_STRING playSibBomb()
15125: PPUSH
15126: CALL_OW 559
// wait ( 0 0$14 ) ;
15130: LD_INT 490
15132: PPUSH
15133: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15137: LD_VAR 0 1
15141: PUSH
15142: LD_INT 1
15144: ARRAY
15145: PPUSH
15146: LD_VAR 0 1
15150: PUSH
15151: LD_INT 2
15153: ARRAY
15154: PPUSH
15155: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15159: LD_VAR 0 1
15163: PUSH
15164: LD_INT 1
15166: ARRAY
15167: PPUSH
15168: LD_VAR 0 1
15172: PUSH
15173: LD_INT 2
15175: ARRAY
15176: PPUSH
15177: CALL_OW 429
// end ; end ;
15181: LD_VAR 0 1
15185: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15186: LD_EXP 36
15190: PUSH
15191: LD_EXP 58
15195: AND
15196: IFFALSE 15208
15198: GO 15200
15200: DISABLE
// YouLost (  ) ;
15201: LD_STRING 
15203: PPUSH
15204: CALL_OW 104
15208: END
// every 0 0$1 trigger StreamModeActive and sFog do
15209: LD_EXP 36
15213: PUSH
15214: LD_EXP 57
15218: AND
15219: IFFALSE 15233
15221: GO 15223
15223: DISABLE
// FogOff ( your_side ) ;
15224: LD_OWVAR 2
15228: PPUSH
15229: CALL_OW 344
15233: END
// every 0 0$1 trigger StreamModeActive and sSun do
15234: LD_EXP 36
15238: PUSH
15239: LD_EXP 59
15243: AND
15244: IFFALSE 15272
15246: GO 15248
15248: DISABLE
// begin solar_recharge_percent := 0 ;
15249: LD_ADDR_OWVAR 79
15253: PUSH
15254: LD_INT 0
15256: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15257: LD_INT 10500
15259: PPUSH
15260: CALL_OW 67
// solar_recharge_percent := 100 ;
15264: LD_ADDR_OWVAR 79
15268: PUSH
15269: LD_INT 100
15271: ST_TO_ADDR
// end ;
15272: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15273: LD_EXP 36
15277: PUSH
15278: LD_EXP 60
15282: AND
15283: IFFALSE 15522
15285: GO 15287
15287: DISABLE
15288: LD_INT 0
15290: PPUSH
15291: PPUSH
15292: PPUSH
// begin tmp := [ ] ;
15293: LD_ADDR_VAR 0 3
15297: PUSH
15298: EMPTY
15299: ST_TO_ADDR
// for i := 1 to 6 do
15300: LD_ADDR_VAR 0 1
15304: PUSH
15305: DOUBLE
15306: LD_INT 1
15308: DEC
15309: ST_TO_ADDR
15310: LD_INT 6
15312: PUSH
15313: FOR_TO
15314: IFFALSE 15419
// begin uc_nation := nation_nature ;
15316: LD_ADDR_OWVAR 21
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// uc_side := 0 ;
15324: LD_ADDR_OWVAR 20
15328: PUSH
15329: LD_INT 0
15331: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15332: LD_ADDR_OWVAR 29
15336: PUSH
15337: LD_INT 12
15339: PUSH
15340: LD_INT 12
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: ST_TO_ADDR
// hc_agressivity := 20 ;
15347: LD_ADDR_OWVAR 35
15351: PUSH
15352: LD_INT 20
15354: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15355: LD_ADDR_OWVAR 28
15359: PUSH
15360: LD_INT 17
15362: ST_TO_ADDR
// hc_gallery :=  ;
15363: LD_ADDR_OWVAR 33
15367: PUSH
15368: LD_STRING 
15370: ST_TO_ADDR
// hc_name :=  ;
15371: LD_ADDR_OWVAR 26
15375: PUSH
15376: LD_STRING 
15378: ST_TO_ADDR
// un := CreateHuman ;
15379: LD_ADDR_VAR 0 2
15383: PUSH
15384: CALL_OW 44
15388: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15389: LD_VAR 0 2
15393: PPUSH
15394: LD_INT 1
15396: PPUSH
15397: CALL_OW 51
// tmp := tmp ^ un ;
15401: LD_ADDR_VAR 0 3
15405: PUSH
15406: LD_VAR 0 3
15410: PUSH
15411: LD_VAR 0 2
15415: ADD
15416: ST_TO_ADDR
// end ;
15417: GO 15313
15419: POP
15420: POP
// repeat wait ( 0 0$1 ) ;
15421: LD_INT 35
15423: PPUSH
15424: CALL_OW 67
// for un in tmp do
15428: LD_ADDR_VAR 0 2
15432: PUSH
15433: LD_VAR 0 3
15437: PUSH
15438: FOR_IN
15439: IFFALSE 15513
// begin if IsDead ( un ) then
15441: LD_VAR 0 2
15445: PPUSH
15446: CALL_OW 301
15450: IFFALSE 15470
// begin tmp := tmp diff un ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_VAR 0 3
15461: PUSH
15462: LD_VAR 0 2
15466: DIFF
15467: ST_TO_ADDR
// continue ;
15468: GO 15438
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15470: LD_VAR 0 2
15474: PPUSH
15475: LD_INT 3
15477: PUSH
15478: LD_INT 22
15480: PUSH
15481: LD_INT 0
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PPUSH
15492: CALL_OW 69
15496: PPUSH
15497: LD_VAR 0 2
15501: PPUSH
15502: CALL_OW 74
15506: PPUSH
15507: CALL_OW 115
// end ;
15511: GO 15438
15513: POP
15514: POP
// until not tmp ;
15515: LD_VAR 0 3
15519: NOT
15520: IFFALSE 15421
// end ;
15522: PPOPN 3
15524: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15525: LD_EXP 36
15529: PUSH
15530: LD_EXP 61
15534: AND
15535: IFFALSE 15589
15537: GO 15539
15539: DISABLE
// begin ToLua ( displayTroll(); ) ;
15540: LD_STRING displayTroll();
15542: PPUSH
15543: CALL_OW 559
// wait ( 3 3$00 ) ;
15547: LD_INT 6300
15549: PPUSH
15550: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15554: LD_STRING hideTroll();
15556: PPUSH
15557: CALL_OW 559
// wait ( 1 1$00 ) ;
15561: LD_INT 2100
15563: PPUSH
15564: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15568: LD_STRING displayTroll();
15570: PPUSH
15571: CALL_OW 559
// wait ( 1 1$00 ) ;
15575: LD_INT 2100
15577: PPUSH
15578: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15582: LD_STRING hideTroll();
15584: PPUSH
15585: CALL_OW 559
// end ;
15589: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15590: LD_EXP 36
15594: PUSH
15595: LD_EXP 62
15599: AND
15600: IFFALSE 15663
15602: GO 15604
15604: DISABLE
15605: LD_INT 0
15607: PPUSH
// begin p := 0 ;
15608: LD_ADDR_VAR 0 1
15612: PUSH
15613: LD_INT 0
15615: ST_TO_ADDR
// repeat game_speed := 1 ;
15616: LD_ADDR_OWVAR 65
15620: PUSH
15621: LD_INT 1
15623: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15624: LD_INT 35
15626: PPUSH
15627: CALL_OW 67
// p := p + 1 ;
15631: LD_ADDR_VAR 0 1
15635: PUSH
15636: LD_VAR 0 1
15640: PUSH
15641: LD_INT 1
15643: PLUS
15644: ST_TO_ADDR
// until p >= 60 ;
15645: LD_VAR 0 1
15649: PUSH
15650: LD_INT 60
15652: GREATEREQUAL
15653: IFFALSE 15616
// game_speed := 4 ;
15655: LD_ADDR_OWVAR 65
15659: PUSH
15660: LD_INT 4
15662: ST_TO_ADDR
// end ;
15663: PPOPN 1
15665: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15666: LD_EXP 36
15670: PUSH
15671: LD_EXP 63
15675: AND
15676: IFFALSE 15822
15678: GO 15680
15680: DISABLE
15681: LD_INT 0
15683: PPUSH
15684: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15685: LD_ADDR_VAR 0 1
15689: PUSH
15690: LD_INT 22
15692: PUSH
15693: LD_OWVAR 2
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 2
15704: PUSH
15705: LD_INT 30
15707: PUSH
15708: LD_INT 0
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 30
15717: PUSH
15718: LD_INT 1
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL_OW 69
15738: ST_TO_ADDR
// if not depot then
15739: LD_VAR 0 1
15743: NOT
15744: IFFALSE 15748
// exit ;
15746: GO 15822
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15748: LD_ADDR_VAR 0 2
15752: PUSH
15753: LD_VAR 0 1
15757: PUSH
15758: LD_INT 1
15760: PPUSH
15761: LD_VAR 0 1
15765: PPUSH
15766: CALL_OW 12
15770: ARRAY
15771: PPUSH
15772: CALL_OW 274
15776: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15777: LD_VAR 0 2
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: LD_INT 0
15787: PPUSH
15788: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15792: LD_VAR 0 2
15796: PPUSH
15797: LD_INT 2
15799: PPUSH
15800: LD_INT 0
15802: PPUSH
15803: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15807: LD_VAR 0 2
15811: PPUSH
15812: LD_INT 3
15814: PPUSH
15815: LD_INT 0
15817: PPUSH
15818: CALL_OW 277
// end ;
15822: PPOPN 2
15824: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15825: LD_EXP 36
15829: PUSH
15830: LD_EXP 64
15834: AND
15835: IFFALSE 15932
15837: GO 15839
15839: DISABLE
15840: LD_INT 0
15842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_INT 22
15850: PUSH
15851: LD_OWVAR 2
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 21
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 3
15872: PUSH
15873: LD_INT 23
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: PPUSH
15892: CALL_OW 69
15896: ST_TO_ADDR
// if not tmp then
15897: LD_VAR 0 1
15901: NOT
15902: IFFALSE 15906
// exit ;
15904: GO 15932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15906: LD_VAR 0 1
15910: PUSH
15911: LD_INT 1
15913: PPUSH
15914: LD_VAR 0 1
15918: PPUSH
15919: CALL_OW 12
15923: ARRAY
15924: PPUSH
15925: LD_INT 200
15927: PPUSH
15928: CALL_OW 234
// end ;
15932: PPOPN 1
15934: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15935: LD_EXP 36
15939: PUSH
15940: LD_EXP 65
15944: AND
15945: IFFALSE 16024
15947: GO 15949
15949: DISABLE
15950: LD_INT 0
15952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15953: LD_ADDR_VAR 0 1
15957: PUSH
15958: LD_INT 22
15960: PUSH
15961: LD_OWVAR 2
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 2
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 69
15988: ST_TO_ADDR
// if not tmp then
15989: LD_VAR 0 1
15993: NOT
15994: IFFALSE 15998
// exit ;
15996: GO 16024
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15998: LD_VAR 0 1
16002: PUSH
16003: LD_INT 1
16005: PPUSH
16006: LD_VAR 0 1
16010: PPUSH
16011: CALL_OW 12
16015: ARRAY
16016: PPUSH
16017: LD_INT 60
16019: PPUSH
16020: CALL_OW 234
// end ;
16024: PPOPN 1
16026: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16027: LD_EXP 36
16031: PUSH
16032: LD_EXP 66
16036: AND
16037: IFFALSE 16136
16039: GO 16041
16041: DISABLE
16042: LD_INT 0
16044: PPUSH
16045: PPUSH
// begin enable ;
16046: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16047: LD_ADDR_VAR 0 1
16051: PUSH
16052: LD_INT 22
16054: PUSH
16055: LD_OWVAR 2
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 61
16066: PUSH
16067: EMPTY
16068: LIST
16069: PUSH
16070: LD_INT 33
16072: PUSH
16073: LD_INT 2
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: PPUSH
16085: CALL_OW 69
16089: ST_TO_ADDR
// if not tmp then
16090: LD_VAR 0 1
16094: NOT
16095: IFFALSE 16099
// exit ;
16097: GO 16136
// for i in tmp do
16099: LD_ADDR_VAR 0 2
16103: PUSH
16104: LD_VAR 0 1
16108: PUSH
16109: FOR_IN
16110: IFFALSE 16134
// if IsControledBy ( i ) then
16112: LD_VAR 0 2
16116: PPUSH
16117: CALL_OW 312
16121: IFFALSE 16132
// ComUnlink ( i ) ;
16123: LD_VAR 0 2
16127: PPUSH
16128: CALL_OW 136
16132: GO 16109
16134: POP
16135: POP
// end ;
16136: PPOPN 2
16138: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16139: LD_EXP 36
16143: PUSH
16144: LD_EXP 67
16148: AND
16149: IFFALSE 16289
16151: GO 16153
16153: DISABLE
16154: LD_INT 0
16156: PPUSH
16157: PPUSH
// begin ToLua ( displayPowell(); ) ;
16158: LD_STRING displayPowell();
16160: PPUSH
16161: CALL_OW 559
// uc_side := 0 ;
16165: LD_ADDR_OWVAR 20
16169: PUSH
16170: LD_INT 0
16172: ST_TO_ADDR
// uc_nation := 2 ;
16173: LD_ADDR_OWVAR 21
16177: PUSH
16178: LD_INT 2
16180: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16181: LD_ADDR_OWVAR 37
16185: PUSH
16186: LD_INT 14
16188: ST_TO_ADDR
// vc_engine := engine_siberite ;
16189: LD_ADDR_OWVAR 39
16193: PUSH
16194: LD_INT 3
16196: ST_TO_ADDR
// vc_control := control_apeman ;
16197: LD_ADDR_OWVAR 38
16201: PUSH
16202: LD_INT 5
16204: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16205: LD_ADDR_OWVAR 40
16209: PUSH
16210: LD_INT 29
16212: ST_TO_ADDR
// un := CreateVehicle ;
16213: LD_ADDR_VAR 0 2
16217: PUSH
16218: CALL_OW 45
16222: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16223: LD_VAR 0 2
16227: PPUSH
16228: LD_INT 1
16230: PPUSH
16231: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16235: LD_INT 35
16237: PPUSH
16238: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16242: LD_VAR 0 2
16246: PPUSH
16247: LD_INT 22
16249: PUSH
16250: LD_OWVAR 2
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PPUSH
16259: CALL_OW 69
16263: PPUSH
16264: LD_VAR 0 2
16268: PPUSH
16269: CALL_OW 74
16273: PPUSH
16274: CALL_OW 115
// until IsDead ( un ) ;
16278: LD_VAR 0 2
16282: PPUSH
16283: CALL_OW 301
16287: IFFALSE 16235
// end ;
16289: PPOPN 2
16291: END
// every 0 0$1 trigger StreamModeActive and sStu do
16292: LD_EXP 36
16296: PUSH
16297: LD_EXP 75
16301: AND
16302: IFFALSE 16318
16304: GO 16306
16306: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16307: LD_STRING displayStucuk();
16309: PPUSH
16310: CALL_OW 559
// ResetFog ;
16314: CALL_OW 335
// end ;
16318: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16319: LD_EXP 36
16323: PUSH
16324: LD_EXP 68
16328: AND
16329: IFFALSE 16470
16331: GO 16333
16333: DISABLE
16334: LD_INT 0
16336: PPUSH
16337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16338: LD_ADDR_VAR 0 2
16342: PUSH
16343: LD_INT 22
16345: PUSH
16346: LD_OWVAR 2
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 21
16357: PUSH
16358: LD_INT 1
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PPUSH
16369: CALL_OW 69
16373: ST_TO_ADDR
// if not tmp then
16374: LD_VAR 0 2
16378: NOT
16379: IFFALSE 16383
// exit ;
16381: GO 16470
// un := tmp [ rand ( 1 , tmp ) ] ;
16383: LD_ADDR_VAR 0 1
16387: PUSH
16388: LD_VAR 0 2
16392: PUSH
16393: LD_INT 1
16395: PPUSH
16396: LD_VAR 0 2
16400: PPUSH
16401: CALL_OW 12
16405: ARRAY
16406: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16407: LD_VAR 0 1
16411: PPUSH
16412: LD_INT 0
16414: PPUSH
16415: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16419: LD_VAR 0 1
16423: PPUSH
16424: LD_OWVAR 3
16428: PUSH
16429: LD_VAR 0 1
16433: DIFF
16434: PPUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 74
16444: PPUSH
16445: CALL_OW 115
// wait ( 0 0$20 ) ;
16449: LD_INT 700
16451: PPUSH
16452: CALL_OW 67
// SetSide ( un , your_side ) ;
16456: LD_VAR 0 1
16460: PPUSH
16461: LD_OWVAR 2
16465: PPUSH
16466: CALL_OW 235
// end ;
16470: PPOPN 2
16472: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16473: LD_EXP 36
16477: PUSH
16478: LD_EXP 69
16482: AND
16483: IFFALSE 16589
16485: GO 16487
16487: DISABLE
16488: LD_INT 0
16490: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16491: LD_ADDR_VAR 0 1
16495: PUSH
16496: LD_INT 22
16498: PUSH
16499: LD_OWVAR 2
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 2
16510: PUSH
16511: LD_INT 30
16513: PUSH
16514: LD_INT 0
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 30
16523: PUSH
16524: LD_INT 1
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PPUSH
16540: CALL_OW 69
16544: ST_TO_ADDR
// if not depot then
16545: LD_VAR 0 1
16549: NOT
16550: IFFALSE 16554
// exit ;
16552: GO 16589
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16554: LD_VAR 0 1
16558: PUSH
16559: LD_INT 1
16561: ARRAY
16562: PPUSH
16563: CALL_OW 250
16567: PPUSH
16568: LD_VAR 0 1
16572: PUSH
16573: LD_INT 1
16575: ARRAY
16576: PPUSH
16577: CALL_OW 251
16581: PPUSH
16582: LD_INT 70
16584: PPUSH
16585: CALL_OW 495
// end ;
16589: PPOPN 1
16591: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16592: LD_EXP 36
16596: PUSH
16597: LD_EXP 70
16601: AND
16602: IFFALSE 16813
16604: GO 16606
16606: DISABLE
16607: LD_INT 0
16609: PPUSH
16610: PPUSH
16611: PPUSH
16612: PPUSH
16613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16614: LD_ADDR_VAR 0 5
16618: PUSH
16619: LD_INT 22
16621: PUSH
16622: LD_OWVAR 2
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 21
16633: PUSH
16634: LD_INT 1
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PPUSH
16645: CALL_OW 69
16649: ST_TO_ADDR
// if not tmp then
16650: LD_VAR 0 5
16654: NOT
16655: IFFALSE 16659
// exit ;
16657: GO 16813
// for i in tmp do
16659: LD_ADDR_VAR 0 1
16663: PUSH
16664: LD_VAR 0 5
16668: PUSH
16669: FOR_IN
16670: IFFALSE 16811
// begin d := rand ( 0 , 5 ) ;
16672: LD_ADDR_VAR 0 4
16676: PUSH
16677: LD_INT 0
16679: PPUSH
16680: LD_INT 5
16682: PPUSH
16683: CALL_OW 12
16687: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16688: LD_ADDR_VAR 0 2
16692: PUSH
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 250
16702: PPUSH
16703: LD_VAR 0 4
16707: PPUSH
16708: LD_INT 3
16710: PPUSH
16711: LD_INT 12
16713: PPUSH
16714: CALL_OW 12
16718: PPUSH
16719: CALL_OW 272
16723: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16724: LD_ADDR_VAR 0 3
16728: PUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL_OW 251
16738: PPUSH
16739: LD_VAR 0 4
16743: PPUSH
16744: LD_INT 3
16746: PPUSH
16747: LD_INT 12
16749: PPUSH
16750: CALL_OW 12
16754: PPUSH
16755: CALL_OW 273
16759: ST_TO_ADDR
// if ValidHex ( x , y ) then
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: CALL_OW 488
16774: IFFALSE 16809
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16776: LD_VAR 0 1
16780: PPUSH
16781: LD_VAR 0 2
16785: PPUSH
16786: LD_VAR 0 3
16790: PPUSH
16791: LD_INT 3
16793: PPUSH
16794: LD_INT 6
16796: PPUSH
16797: CALL_OW 12
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: CALL_OW 483
// end ;
16809: GO 16669
16811: POP
16812: POP
// end ;
16813: PPOPN 5
16815: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16816: LD_EXP 36
16820: PUSH
16821: LD_EXP 71
16825: AND
16826: IFFALSE 16920
16828: GO 16830
16830: DISABLE
16831: LD_INT 0
16833: PPUSH
16834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16835: LD_ADDR_VAR 0 2
16839: PUSH
16840: LD_INT 22
16842: PUSH
16843: LD_OWVAR 2
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 32
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 21
16864: PUSH
16865: LD_INT 2
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: LIST
16876: PPUSH
16877: CALL_OW 69
16881: ST_TO_ADDR
// if not tmp then
16882: LD_VAR 0 2
16886: NOT
16887: IFFALSE 16891
// exit ;
16889: GO 16920
// for i in tmp do
16891: LD_ADDR_VAR 0 1
16895: PUSH
16896: LD_VAR 0 2
16900: PUSH
16901: FOR_IN
16902: IFFALSE 16918
// SetFuel ( i , 0 ) ;
16904: LD_VAR 0 1
16908: PPUSH
16909: LD_INT 0
16911: PPUSH
16912: CALL_OW 240
16916: GO 16901
16918: POP
16919: POP
// end ;
16920: PPOPN 2
16922: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16923: LD_EXP 36
16927: PUSH
16928: LD_EXP 72
16932: AND
16933: IFFALSE 16999
16935: GO 16937
16937: DISABLE
16938: LD_INT 0
16940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16941: LD_ADDR_VAR 0 1
16945: PUSH
16946: LD_INT 22
16948: PUSH
16949: LD_OWVAR 2
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 30
16960: PUSH
16961: LD_INT 29
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PPUSH
16972: CALL_OW 69
16976: ST_TO_ADDR
// if not tmp then
16977: LD_VAR 0 1
16981: NOT
16982: IFFALSE 16986
// exit ;
16984: GO 16999
// DestroyUnit ( tmp [ 1 ] ) ;
16986: LD_VAR 0 1
16990: PUSH
16991: LD_INT 1
16993: ARRAY
16994: PPUSH
16995: CALL_OW 65
// end ;
16999: PPOPN 1
17001: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17002: LD_EXP 36
17006: PUSH
17007: LD_EXP 74
17011: AND
17012: IFFALSE 17141
17014: GO 17016
17016: DISABLE
17017: LD_INT 0
17019: PPUSH
// begin uc_side := 0 ;
17020: LD_ADDR_OWVAR 20
17024: PUSH
17025: LD_INT 0
17027: ST_TO_ADDR
// uc_nation := nation_arabian ;
17028: LD_ADDR_OWVAR 21
17032: PUSH
17033: LD_INT 2
17035: ST_TO_ADDR
// hc_gallery :=  ;
17036: LD_ADDR_OWVAR 33
17040: PUSH
17041: LD_STRING 
17043: ST_TO_ADDR
// hc_name :=  ;
17044: LD_ADDR_OWVAR 26
17048: PUSH
17049: LD_STRING 
17051: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17052: LD_INT 1
17054: PPUSH
17055: LD_INT 11
17057: PPUSH
17058: LD_INT 10
17060: PPUSH
17061: CALL_OW 380
// un := CreateHuman ;
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: CALL_OW 44
17074: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17075: LD_VAR 0 1
17079: PPUSH
17080: LD_INT 1
17082: PPUSH
17083: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17087: LD_INT 35
17089: PPUSH
17090: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17094: LD_VAR 0 1
17098: PPUSH
17099: LD_INT 22
17101: PUSH
17102: LD_OWVAR 2
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PPUSH
17111: CALL_OW 69
17115: PPUSH
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 74
17125: PPUSH
17126: CALL_OW 115
// until IsDead ( un ) ;
17130: LD_VAR 0 1
17134: PPUSH
17135: CALL_OW 301
17139: IFFALSE 17087
// end ;
17141: PPOPN 1
17143: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17144: LD_EXP 36
17148: PUSH
17149: LD_EXP 76
17153: AND
17154: IFFALSE 17166
17156: GO 17158
17158: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17159: LD_STRING earthquake(getX(game), 0, 32)
17161: PPUSH
17162: CALL_OW 559
17166: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17167: LD_EXP 36
17171: PUSH
17172: LD_EXP 77
17176: AND
17177: IFFALSE 17268
17179: GO 17181
17181: DISABLE
17182: LD_INT 0
17184: PPUSH
// begin enable ;
17185: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17186: LD_ADDR_VAR 0 1
17190: PUSH
17191: LD_INT 22
17193: PUSH
17194: LD_OWVAR 2
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 21
17205: PUSH
17206: LD_INT 2
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 33
17215: PUSH
17216: LD_INT 3
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: ST_TO_ADDR
// if not tmp then
17233: LD_VAR 0 1
17237: NOT
17238: IFFALSE 17242
// exit ;
17240: GO 17268
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17242: LD_VAR 0 1
17246: PUSH
17247: LD_INT 1
17249: PPUSH
17250: LD_VAR 0 1
17254: PPUSH
17255: CALL_OW 12
17259: ARRAY
17260: PPUSH
17261: LD_INT 1
17263: PPUSH
17264: CALL_OW 234
// end ;
17268: PPOPN 1
17270: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17271: LD_EXP 36
17275: PUSH
17276: LD_EXP 78
17280: AND
17281: IFFALSE 17422
17283: GO 17285
17285: DISABLE
17286: LD_INT 0
17288: PPUSH
17289: PPUSH
17290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17291: LD_ADDR_VAR 0 3
17295: PUSH
17296: LD_INT 22
17298: PUSH
17299: LD_OWVAR 2
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 25
17310: PUSH
17311: LD_INT 1
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PPUSH
17322: CALL_OW 69
17326: ST_TO_ADDR
// if not tmp then
17327: LD_VAR 0 3
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17422
// un := tmp [ rand ( 1 , tmp ) ] ;
17336: LD_ADDR_VAR 0 2
17340: PUSH
17341: LD_VAR 0 3
17345: PUSH
17346: LD_INT 1
17348: PPUSH
17349: LD_VAR 0 3
17353: PPUSH
17354: CALL_OW 12
17358: ARRAY
17359: ST_TO_ADDR
// if Crawls ( un ) then
17360: LD_VAR 0 2
17364: PPUSH
17365: CALL_OW 318
17369: IFFALSE 17380
// ComWalk ( un ) ;
17371: LD_VAR 0 2
17375: PPUSH
17376: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17380: LD_VAR 0 2
17384: PPUSH
17385: LD_INT 9
17387: PPUSH
17388: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17392: LD_INT 28
17394: PPUSH
17395: LD_OWVAR 2
17399: PPUSH
17400: LD_INT 2
17402: PPUSH
17403: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17407: LD_INT 29
17409: PPUSH
17410: LD_OWVAR 2
17414: PPUSH
17415: LD_INT 2
17417: PPUSH
17418: CALL_OW 322
// end ;
17422: PPOPN 3
17424: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17425: LD_EXP 36
17429: PUSH
17430: LD_EXP 79
17434: AND
17435: IFFALSE 17546
17437: GO 17439
17439: DISABLE
17440: LD_INT 0
17442: PPUSH
17443: PPUSH
17444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17445: LD_ADDR_VAR 0 3
17449: PUSH
17450: LD_INT 22
17452: PUSH
17453: LD_OWVAR 2
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 25
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PPUSH
17476: CALL_OW 69
17480: ST_TO_ADDR
// if not tmp then
17481: LD_VAR 0 3
17485: NOT
17486: IFFALSE 17490
// exit ;
17488: GO 17546
// un := tmp [ rand ( 1 , tmp ) ] ;
17490: LD_ADDR_VAR 0 2
17494: PUSH
17495: LD_VAR 0 3
17499: PUSH
17500: LD_INT 1
17502: PPUSH
17503: LD_VAR 0 3
17507: PPUSH
17508: CALL_OW 12
17512: ARRAY
17513: ST_TO_ADDR
// if Crawls ( un ) then
17514: LD_VAR 0 2
17518: PPUSH
17519: CALL_OW 318
17523: IFFALSE 17534
// ComWalk ( un ) ;
17525: LD_VAR 0 2
17529: PPUSH
17530: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17534: LD_VAR 0 2
17538: PPUSH
17539: LD_INT 8
17541: PPUSH
17542: CALL_OW 336
// end ;
17546: PPOPN 3
17548: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17549: LD_EXP 36
17553: PUSH
17554: LD_EXP 80
17558: AND
17559: IFFALSE 17703
17561: GO 17563
17563: DISABLE
17564: LD_INT 0
17566: PPUSH
17567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17568: LD_ADDR_VAR 0 2
17572: PUSH
17573: LD_INT 22
17575: PUSH
17576: LD_OWVAR 2
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 21
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: LD_INT 34
17600: PUSH
17601: LD_INT 12
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 34
17610: PUSH
17611: LD_INT 51
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 34
17620: PUSH
17621: LD_INT 32
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: LIST
17638: PPUSH
17639: CALL_OW 69
17643: ST_TO_ADDR
// if not tmp then
17644: LD_VAR 0 2
17648: NOT
17649: IFFALSE 17653
// exit ;
17651: GO 17703
// for i in tmp do
17653: LD_ADDR_VAR 0 1
17657: PUSH
17658: LD_VAR 0 2
17662: PUSH
17663: FOR_IN
17664: IFFALSE 17701
// if GetCargo ( i , mat_artifact ) = 0 then
17666: LD_VAR 0 1
17670: PPUSH
17671: LD_INT 4
17673: PPUSH
17674: CALL_OW 289
17678: PUSH
17679: LD_INT 0
17681: EQUAL
17682: IFFALSE 17699
// SetCargo ( i , mat_siberit , 100 ) ;
17684: LD_VAR 0 1
17688: PPUSH
17689: LD_INT 3
17691: PPUSH
17692: LD_INT 100
17694: PPUSH
17695: CALL_OW 290
17699: GO 17663
17701: POP
17702: POP
// end ;
17703: PPOPN 2
17705: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17706: LD_EXP 36
17710: PUSH
17711: LD_EXP 81
17715: AND
17716: IFFALSE 17899
17718: GO 17720
17720: DISABLE
17721: LD_INT 0
17723: PPUSH
17724: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17725: LD_ADDR_VAR 0 2
17729: PUSH
17730: LD_INT 22
17732: PUSH
17733: LD_OWVAR 2
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PPUSH
17742: CALL_OW 69
17746: ST_TO_ADDR
// if not tmp then
17747: LD_VAR 0 2
17751: NOT
17752: IFFALSE 17756
// exit ;
17754: GO 17899
// for i := 1 to 2 do
17756: LD_ADDR_VAR 0 1
17760: PUSH
17761: DOUBLE
17762: LD_INT 1
17764: DEC
17765: ST_TO_ADDR
17766: LD_INT 2
17768: PUSH
17769: FOR_TO
17770: IFFALSE 17897
// begin uc_side := your_side ;
17772: LD_ADDR_OWVAR 20
17776: PUSH
17777: LD_OWVAR 2
17781: ST_TO_ADDR
// uc_nation := nation_american ;
17782: LD_ADDR_OWVAR 21
17786: PUSH
17787: LD_INT 1
17789: ST_TO_ADDR
// vc_chassis := us_morphling ;
17790: LD_ADDR_OWVAR 37
17794: PUSH
17795: LD_INT 5
17797: ST_TO_ADDR
// vc_engine := engine_siberite ;
17798: LD_ADDR_OWVAR 39
17802: PUSH
17803: LD_INT 3
17805: ST_TO_ADDR
// vc_control := control_computer ;
17806: LD_ADDR_OWVAR 38
17810: PUSH
17811: LD_INT 3
17813: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17814: LD_ADDR_OWVAR 40
17818: PUSH
17819: LD_INT 10
17821: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17822: LD_VAR 0 2
17826: PUSH
17827: LD_INT 1
17829: ARRAY
17830: PPUSH
17831: CALL_OW 310
17835: NOT
17836: IFFALSE 17883
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17838: CALL_OW 45
17842: PPUSH
17843: LD_VAR 0 2
17847: PUSH
17848: LD_INT 1
17850: ARRAY
17851: PPUSH
17852: CALL_OW 250
17856: PPUSH
17857: LD_VAR 0 2
17861: PUSH
17862: LD_INT 1
17864: ARRAY
17865: PPUSH
17866: CALL_OW 251
17870: PPUSH
17871: LD_INT 12
17873: PPUSH
17874: LD_INT 1
17876: PPUSH
17877: CALL_OW 50
17881: GO 17895
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17883: CALL_OW 45
17887: PPUSH
17888: LD_INT 1
17890: PPUSH
17891: CALL_OW 51
// end ;
17895: GO 17769
17897: POP
17898: POP
// end ;
17899: PPOPN 2
17901: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17902: LD_EXP 36
17906: PUSH
17907: LD_EXP 82
17911: AND
17912: IFFALSE 18134
17914: GO 17916
17916: DISABLE
17917: LD_INT 0
17919: PPUSH
17920: PPUSH
17921: PPUSH
17922: PPUSH
17923: PPUSH
17924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17925: LD_ADDR_VAR 0 6
17929: PUSH
17930: LD_INT 22
17932: PUSH
17933: LD_OWVAR 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 21
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 3
17954: PUSH
17955: LD_INT 23
17957: PUSH
17958: LD_INT 0
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 69
17978: ST_TO_ADDR
// if not tmp then
17979: LD_VAR 0 6
17983: NOT
17984: IFFALSE 17988
// exit ;
17986: GO 18134
// s1 := rand ( 1 , 4 ) ;
17988: LD_ADDR_VAR 0 2
17992: PUSH
17993: LD_INT 1
17995: PPUSH
17996: LD_INT 4
17998: PPUSH
17999: CALL_OW 12
18003: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18004: LD_ADDR_VAR 0 4
18008: PUSH
18009: LD_VAR 0 6
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: LD_VAR 0 2
18022: PPUSH
18023: CALL_OW 259
18027: ST_TO_ADDR
// if s1 = 1 then
18028: LD_VAR 0 2
18032: PUSH
18033: LD_INT 1
18035: EQUAL
18036: IFFALSE 18056
// s2 := rand ( 2 , 4 ) else
18038: LD_ADDR_VAR 0 3
18042: PUSH
18043: LD_INT 2
18045: PPUSH
18046: LD_INT 4
18048: PPUSH
18049: CALL_OW 12
18053: ST_TO_ADDR
18054: GO 18064
// s2 := 1 ;
18056: LD_ADDR_VAR 0 3
18060: PUSH
18061: LD_INT 1
18063: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18064: LD_ADDR_VAR 0 5
18068: PUSH
18069: LD_VAR 0 6
18073: PUSH
18074: LD_INT 1
18076: ARRAY
18077: PPUSH
18078: LD_VAR 0 3
18082: PPUSH
18083: CALL_OW 259
18087: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18088: LD_VAR 0 6
18092: PUSH
18093: LD_INT 1
18095: ARRAY
18096: PPUSH
18097: LD_VAR 0 2
18101: PPUSH
18102: LD_VAR 0 5
18106: PPUSH
18107: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18111: LD_VAR 0 6
18115: PUSH
18116: LD_INT 1
18118: ARRAY
18119: PPUSH
18120: LD_VAR 0 3
18124: PPUSH
18125: LD_VAR 0 4
18129: PPUSH
18130: CALL_OW 237
// end ;
18134: PPOPN 6
18136: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18137: LD_EXP 36
18141: PUSH
18142: LD_EXP 83
18146: AND
18147: IFFALSE 18226
18149: GO 18151
18151: DISABLE
18152: LD_INT 0
18154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18155: LD_ADDR_VAR 0 1
18159: PUSH
18160: LD_INT 22
18162: PUSH
18163: LD_OWVAR 2
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 30
18174: PUSH
18175: LD_INT 3
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PPUSH
18186: CALL_OW 69
18190: ST_TO_ADDR
// if not tmp then
18191: LD_VAR 0 1
18195: NOT
18196: IFFALSE 18200
// exit ;
18198: GO 18226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18200: LD_VAR 0 1
18204: PUSH
18205: LD_INT 1
18207: PPUSH
18208: LD_VAR 0 1
18212: PPUSH
18213: CALL_OW 12
18217: ARRAY
18218: PPUSH
18219: LD_INT 1
18221: PPUSH
18222: CALL_OW 234
// end ;
18226: PPOPN 1
18228: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18229: LD_EXP 36
18233: PUSH
18234: LD_EXP 84
18238: AND
18239: IFFALSE 18351
18241: GO 18243
18243: DISABLE
18244: LD_INT 0
18246: PPUSH
18247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18248: LD_ADDR_VAR 0 2
18252: PUSH
18253: LD_INT 22
18255: PUSH
18256: LD_OWVAR 2
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 2
18267: PUSH
18268: LD_INT 30
18270: PUSH
18271: LD_INT 27
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 30
18280: PUSH
18281: LD_INT 26
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 30
18290: PUSH
18291: LD_INT 28
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PPUSH
18308: CALL_OW 69
18312: ST_TO_ADDR
// if not tmp then
18313: LD_VAR 0 2
18317: NOT
18318: IFFALSE 18322
// exit ;
18320: GO 18351
// for i in tmp do
18322: LD_ADDR_VAR 0 1
18326: PUSH
18327: LD_VAR 0 2
18331: PUSH
18332: FOR_IN
18333: IFFALSE 18349
// SetLives ( i , 1 ) ;
18335: LD_VAR 0 1
18339: PPUSH
18340: LD_INT 1
18342: PPUSH
18343: CALL_OW 234
18347: GO 18332
18349: POP
18350: POP
// end ;
18351: PPOPN 2
18353: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18354: LD_EXP 36
18358: PUSH
18359: LD_EXP 85
18363: AND
18364: IFFALSE 18651
18366: GO 18368
18368: DISABLE
18369: LD_INT 0
18371: PPUSH
18372: PPUSH
18373: PPUSH
// begin i := rand ( 1 , 7 ) ;
18374: LD_ADDR_VAR 0 1
18378: PUSH
18379: LD_INT 1
18381: PPUSH
18382: LD_INT 7
18384: PPUSH
18385: CALL_OW 12
18389: ST_TO_ADDR
// case i of 1 :
18390: LD_VAR 0 1
18394: PUSH
18395: LD_INT 1
18397: DOUBLE
18398: EQUAL
18399: IFTRUE 18403
18401: GO 18413
18403: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18404: LD_STRING earthquake(getX(game), 0, 32)
18406: PPUSH
18407: CALL_OW 559
18411: GO 18651
18413: LD_INT 2
18415: DOUBLE
18416: EQUAL
18417: IFTRUE 18421
18419: GO 18435
18421: POP
// begin ToLua ( displayStucuk(); ) ;
18422: LD_STRING displayStucuk();
18424: PPUSH
18425: CALL_OW 559
// ResetFog ;
18429: CALL_OW 335
// end ; 3 :
18433: GO 18651
18435: LD_INT 3
18437: DOUBLE
18438: EQUAL
18439: IFTRUE 18443
18441: GO 18547
18443: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18444: LD_ADDR_VAR 0 2
18448: PUSH
18449: LD_INT 22
18451: PUSH
18452: LD_OWVAR 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 25
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: ST_TO_ADDR
// if not tmp then
18480: LD_VAR 0 2
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18651
// un := tmp [ rand ( 1 , tmp ) ] ;
18489: LD_ADDR_VAR 0 3
18493: PUSH
18494: LD_VAR 0 2
18498: PUSH
18499: LD_INT 1
18501: PPUSH
18502: LD_VAR 0 2
18506: PPUSH
18507: CALL_OW 12
18511: ARRAY
18512: ST_TO_ADDR
// if Crawls ( un ) then
18513: LD_VAR 0 3
18517: PPUSH
18518: CALL_OW 318
18522: IFFALSE 18533
// ComWalk ( un ) ;
18524: LD_VAR 0 3
18528: PPUSH
18529: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18533: LD_VAR 0 3
18537: PPUSH
18538: LD_INT 8
18540: PPUSH
18541: CALL_OW 336
// end ; 4 :
18545: GO 18651
18547: LD_INT 4
18549: DOUBLE
18550: EQUAL
18551: IFTRUE 18555
18553: GO 18629
18555: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18556: LD_ADDR_VAR 0 2
18560: PUSH
18561: LD_INT 22
18563: PUSH
18564: LD_OWVAR 2
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 30
18575: PUSH
18576: LD_INT 29
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PPUSH
18587: CALL_OW 69
18591: ST_TO_ADDR
// if not tmp then
18592: LD_VAR 0 2
18596: NOT
18597: IFFALSE 18601
// exit ;
18599: GO 18651
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18601: LD_VAR 0 2
18605: PUSH
18606: LD_INT 1
18608: ARRAY
18609: PPUSH
18610: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18614: LD_VAR 0 2
18618: PUSH
18619: LD_INT 1
18621: ARRAY
18622: PPUSH
18623: CALL_OW 65
// end ; 5 .. 7 :
18627: GO 18651
18629: LD_INT 5
18631: DOUBLE
18632: GREATEREQUAL
18633: IFFALSE 18641
18635: LD_INT 7
18637: DOUBLE
18638: LESSEQUAL
18639: IFTRUE 18643
18641: GO 18650
18643: POP
// StreamSibBomb ; end ;
18644: CALL 14888 0 0
18648: GO 18651
18650: POP
// end ;
18651: PPOPN 3
18653: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18654: LD_EXP 36
18658: PUSH
18659: LD_EXP 86
18663: AND
18664: IFFALSE 18820
18666: GO 18668
18668: DISABLE
18669: LD_INT 0
18671: PPUSH
18672: PPUSH
18673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18674: LD_ADDR_VAR 0 2
18678: PUSH
18679: LD_INT 81
18681: PUSH
18682: LD_OWVAR 2
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: LD_INT 21
18696: PUSH
18697: LD_INT 1
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 21
18706: PUSH
18707: LD_INT 2
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PPUSH
18723: CALL_OW 69
18727: ST_TO_ADDR
// if not tmp then
18728: LD_VAR 0 2
18732: NOT
18733: IFFALSE 18737
// exit ;
18735: GO 18820
// p := 0 ;
18737: LD_ADDR_VAR 0 3
18741: PUSH
18742: LD_INT 0
18744: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18745: LD_INT 35
18747: PPUSH
18748: CALL_OW 67
// p := p + 1 ;
18752: LD_ADDR_VAR 0 3
18756: PUSH
18757: LD_VAR 0 3
18761: PUSH
18762: LD_INT 1
18764: PLUS
18765: ST_TO_ADDR
// for i in tmp do
18766: LD_ADDR_VAR 0 1
18770: PUSH
18771: LD_VAR 0 2
18775: PUSH
18776: FOR_IN
18777: IFFALSE 18808
// if GetLives ( i ) < 1000 then
18779: LD_VAR 0 1
18783: PPUSH
18784: CALL_OW 256
18788: PUSH
18789: LD_INT 1000
18791: LESS
18792: IFFALSE 18806
// SetLives ( i , 1000 ) ;
18794: LD_VAR 0 1
18798: PPUSH
18799: LD_INT 1000
18801: PPUSH
18802: CALL_OW 234
18806: GO 18776
18808: POP
18809: POP
// until p > 20 ;
18810: LD_VAR 0 3
18814: PUSH
18815: LD_INT 20
18817: GREATER
18818: IFFALSE 18745
// end ;
18820: PPOPN 3
18822: END
// every 0 0$1 trigger StreamModeActive and sTime do
18823: LD_EXP 36
18827: PUSH
18828: LD_EXP 87
18832: AND
18833: IFFALSE 18868
18835: GO 18837
18837: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18838: LD_INT 28
18840: PPUSH
18841: LD_OWVAR 2
18845: PPUSH
18846: LD_INT 2
18848: PPUSH
18849: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18853: LD_INT 30
18855: PPUSH
18856: LD_OWVAR 2
18860: PPUSH
18861: LD_INT 2
18863: PPUSH
18864: CALL_OW 322
// end ;
18868: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18869: LD_EXP 36
18873: PUSH
18874: LD_EXP 88
18878: AND
18879: IFFALSE 19000
18881: GO 18883
18883: DISABLE
18884: LD_INT 0
18886: PPUSH
18887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18888: LD_ADDR_VAR 0 2
18892: PUSH
18893: LD_INT 22
18895: PUSH
18896: LD_OWVAR 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 21
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 3
18917: PUSH
18918: LD_INT 23
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: PPUSH
18937: CALL_OW 69
18941: ST_TO_ADDR
// if not tmp then
18942: LD_VAR 0 2
18946: NOT
18947: IFFALSE 18951
// exit ;
18949: GO 19000
// for i in tmp do
18951: LD_ADDR_VAR 0 1
18955: PUSH
18956: LD_VAR 0 2
18960: PUSH
18961: FOR_IN
18962: IFFALSE 18998
// begin if Crawls ( i ) then
18964: LD_VAR 0 1
18968: PPUSH
18969: CALL_OW 318
18973: IFFALSE 18984
// ComWalk ( i ) ;
18975: LD_VAR 0 1
18979: PPUSH
18980: CALL_OW 138
// SetClass ( i , 2 ) ;
18984: LD_VAR 0 1
18988: PPUSH
18989: LD_INT 2
18991: PPUSH
18992: CALL_OW 336
// end ;
18996: GO 18961
18998: POP
18999: POP
// end ;
19000: PPOPN 2
19002: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19003: LD_EXP 36
19007: PUSH
19008: LD_EXP 89
19012: AND
19013: IFFALSE 19301
19015: GO 19017
19017: DISABLE
19018: LD_INT 0
19020: PPUSH
19021: PPUSH
19022: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19023: LD_OWVAR 2
19027: PPUSH
19028: LD_INT 9
19030: PPUSH
19031: LD_INT 1
19033: PPUSH
19034: LD_INT 1
19036: PPUSH
19037: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19041: LD_INT 9
19043: PPUSH
19044: LD_OWVAR 2
19048: PPUSH
19049: CALL_OW 343
// uc_side := 9 ;
19053: LD_ADDR_OWVAR 20
19057: PUSH
19058: LD_INT 9
19060: ST_TO_ADDR
// uc_nation := 2 ;
19061: LD_ADDR_OWVAR 21
19065: PUSH
19066: LD_INT 2
19068: ST_TO_ADDR
// hc_name := Dark Warrior ;
19069: LD_ADDR_OWVAR 26
19073: PUSH
19074: LD_STRING Dark Warrior
19076: ST_TO_ADDR
// hc_gallery :=  ;
19077: LD_ADDR_OWVAR 33
19081: PUSH
19082: LD_STRING 
19084: ST_TO_ADDR
// hc_noskilllimit := true ;
19085: LD_ADDR_OWVAR 76
19089: PUSH
19090: LD_INT 1
19092: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19093: LD_ADDR_OWVAR 31
19097: PUSH
19098: LD_INT 30
19100: PUSH
19101: LD_INT 30
19103: PUSH
19104: LD_INT 30
19106: PUSH
19107: LD_INT 30
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: ST_TO_ADDR
// un := CreateHuman ;
19116: LD_ADDR_VAR 0 3
19120: PUSH
19121: CALL_OW 44
19125: ST_TO_ADDR
// hc_noskilllimit := false ;
19126: LD_ADDR_OWVAR 76
19130: PUSH
19131: LD_INT 0
19133: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19134: LD_VAR 0 3
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: CALL_OW 51
// ToLua ( playRanger() ) ;
19146: LD_STRING playRanger()
19148: PPUSH
19149: CALL_OW 559
// p := 0 ;
19153: LD_ADDR_VAR 0 2
19157: PUSH
19158: LD_INT 0
19160: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19161: LD_INT 35
19163: PPUSH
19164: CALL_OW 67
// p := p + 1 ;
19168: LD_ADDR_VAR 0 2
19172: PUSH
19173: LD_VAR 0 2
19177: PUSH
19178: LD_INT 1
19180: PLUS
19181: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19182: LD_VAR 0 3
19186: PPUSH
19187: CALL_OW 256
19191: PUSH
19192: LD_INT 1000
19194: LESS
19195: IFFALSE 19209
// SetLives ( un , 1000 ) ;
19197: LD_VAR 0 3
19201: PPUSH
19202: LD_INT 1000
19204: PPUSH
19205: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_INT 81
19216: PUSH
19217: LD_OWVAR 2
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 91
19228: PUSH
19229: LD_VAR 0 3
19233: PUSH
19234: LD_INT 30
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PPUSH
19246: CALL_OW 69
19250: PPUSH
19251: LD_VAR 0 3
19255: PPUSH
19256: CALL_OW 74
19260: PPUSH
19261: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19265: LD_VAR 0 2
19269: PUSH
19270: LD_INT 80
19272: GREATER
19273: PUSH
19274: LD_VAR 0 3
19278: PPUSH
19279: CALL_OW 301
19283: OR
19284: IFFALSE 19161
// if un then
19286: LD_VAR 0 3
19290: IFFALSE 19301
// RemoveUnit ( un ) ;
19292: LD_VAR 0 3
19296: PPUSH
19297: CALL_OW 64
// end ;
19301: PPOPN 3
19303: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19304: LD_EXP 90
19308: IFFALSE 19424
19310: GO 19312
19312: DISABLE
19313: LD_INT 0
19315: PPUSH
19316: PPUSH
19317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19318: LD_ADDR_VAR 0 2
19322: PUSH
19323: LD_INT 81
19325: PUSH
19326: LD_OWVAR 2
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 21
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PPUSH
19349: CALL_OW 69
19353: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19354: LD_STRING playComputer()
19356: PPUSH
19357: CALL_OW 559
// if not tmp then
19361: LD_VAR 0 2
19365: NOT
19366: IFFALSE 19370
// exit ;
19368: GO 19424
// for i in tmp do
19370: LD_ADDR_VAR 0 1
19374: PUSH
19375: LD_VAR 0 2
19379: PUSH
19380: FOR_IN
19381: IFFALSE 19422
// for j := 1 to 4 do
19383: LD_ADDR_VAR 0 3
19387: PUSH
19388: DOUBLE
19389: LD_INT 1
19391: DEC
19392: ST_TO_ADDR
19393: LD_INT 4
19395: PUSH
19396: FOR_TO
19397: IFFALSE 19418
// SetSkill ( i , j , 10 ) ;
19399: LD_VAR 0 1
19403: PPUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: LD_INT 10
19411: PPUSH
19412: CALL_OW 237
19416: GO 19396
19418: POP
19419: POP
19420: GO 19380
19422: POP
19423: POP
// end ;
19424: PPOPN 3
19426: END
// every 0 0$1 trigger s30 do var i , tmp ;
19427: LD_EXP 91
19431: IFFALSE 19500
19433: GO 19435
19435: DISABLE
19436: LD_INT 0
19438: PPUSH
19439: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19440: LD_ADDR_VAR 0 2
19444: PUSH
19445: LD_INT 22
19447: PUSH
19448: LD_OWVAR 2
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PPUSH
19457: CALL_OW 69
19461: ST_TO_ADDR
// if not tmp then
19462: LD_VAR 0 2
19466: NOT
19467: IFFALSE 19471
// exit ;
19469: GO 19500
// for i in tmp do
19471: LD_ADDR_VAR 0 1
19475: PUSH
19476: LD_VAR 0 2
19480: PUSH
19481: FOR_IN
19482: IFFALSE 19498
// SetLives ( i , 300 ) ;
19484: LD_VAR 0 1
19488: PPUSH
19489: LD_INT 300
19491: PPUSH
19492: CALL_OW 234
19496: GO 19481
19498: POP
19499: POP
// end ;
19500: PPOPN 2
19502: END
// every 0 0$1 trigger s60 do var i , tmp ;
19503: LD_EXP 92
19507: IFFALSE 19576
19509: GO 19511
19511: DISABLE
19512: LD_INT 0
19514: PPUSH
19515: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19516: LD_ADDR_VAR 0 2
19520: PUSH
19521: LD_INT 22
19523: PUSH
19524: LD_OWVAR 2
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PPUSH
19533: CALL_OW 69
19537: ST_TO_ADDR
// if not tmp then
19538: LD_VAR 0 2
19542: NOT
19543: IFFALSE 19547
// exit ;
19545: GO 19576
// for i in tmp do
19547: LD_ADDR_VAR 0 1
19551: PUSH
19552: LD_VAR 0 2
19556: PUSH
19557: FOR_IN
19558: IFFALSE 19574
// SetLives ( i , 600 ) ;
19560: LD_VAR 0 1
19564: PPUSH
19565: LD_INT 600
19567: PPUSH
19568: CALL_OW 234
19572: GO 19557
19574: POP
19575: POP
// end ;
19576: PPOPN 2
19578: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19579: LD_INT 0
19581: PPUSH
// case cmd of 301 :
19582: LD_VAR 0 1
19586: PUSH
19587: LD_INT 301
19589: DOUBLE
19590: EQUAL
19591: IFTRUE 19595
19593: GO 19627
19595: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19596: LD_VAR 0 6
19600: PPUSH
19601: LD_VAR 0 7
19605: PPUSH
19606: LD_VAR 0 8
19610: PPUSH
19611: LD_VAR 0 4
19615: PPUSH
19616: LD_VAR 0 5
19620: PPUSH
19621: CALL 20828 0 5
19625: GO 19748
19627: LD_INT 302
19629: DOUBLE
19630: EQUAL
19631: IFTRUE 19635
19633: GO 19672
19635: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19636: LD_VAR 0 6
19640: PPUSH
19641: LD_VAR 0 7
19645: PPUSH
19646: LD_VAR 0 8
19650: PPUSH
19651: LD_VAR 0 9
19655: PPUSH
19656: LD_VAR 0 4
19660: PPUSH
19661: LD_VAR 0 5
19665: PPUSH
19666: CALL 20919 0 6
19670: GO 19748
19672: LD_INT 303
19674: DOUBLE
19675: EQUAL
19676: IFTRUE 19680
19678: GO 19717
19680: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19681: LD_VAR 0 6
19685: PPUSH
19686: LD_VAR 0 7
19690: PPUSH
19691: LD_VAR 0 8
19695: PPUSH
19696: LD_VAR 0 9
19700: PPUSH
19701: LD_VAR 0 4
19705: PPUSH
19706: LD_VAR 0 5
19710: PPUSH
19711: CALL 19753 0 6
19715: GO 19748
19717: LD_INT 304
19719: DOUBLE
19720: EQUAL
19721: IFTRUE 19725
19723: GO 19747
19725: POP
// hHackTeleport ( unit , x , y ) ; end ;
19726: LD_VAR 0 2
19730: PPUSH
19731: LD_VAR 0 4
19735: PPUSH
19736: LD_VAR 0 5
19740: PPUSH
19741: CALL 21512 0 3
19745: GO 19748
19747: POP
// end ;
19748: LD_VAR 0 12
19752: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19753: LD_INT 0
19755: PPUSH
19756: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19757: LD_VAR 0 1
19761: PUSH
19762: LD_INT 1
19764: LESS
19765: PUSH
19766: LD_VAR 0 1
19770: PUSH
19771: LD_INT 3
19773: GREATER
19774: OR
19775: PUSH
19776: LD_VAR 0 5
19780: PPUSH
19781: LD_VAR 0 6
19785: PPUSH
19786: CALL_OW 428
19790: OR
19791: IFFALSE 19795
// exit ;
19793: GO 20515
// uc_side := your_side ;
19795: LD_ADDR_OWVAR 20
19799: PUSH
19800: LD_OWVAR 2
19804: ST_TO_ADDR
// uc_nation := nation ;
19805: LD_ADDR_OWVAR 21
19809: PUSH
19810: LD_VAR 0 1
19814: ST_TO_ADDR
// bc_level = 1 ;
19815: LD_ADDR_OWVAR 43
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// case btype of 1 :
19823: LD_VAR 0 2
19827: PUSH
19828: LD_INT 1
19830: DOUBLE
19831: EQUAL
19832: IFTRUE 19836
19834: GO 19847
19836: POP
// bc_type := b_depot ; 2 :
19837: LD_ADDR_OWVAR 42
19841: PUSH
19842: LD_INT 0
19844: ST_TO_ADDR
19845: GO 20459
19847: LD_INT 2
19849: DOUBLE
19850: EQUAL
19851: IFTRUE 19855
19853: GO 19866
19855: POP
// bc_type := b_warehouse ; 3 :
19856: LD_ADDR_OWVAR 42
19860: PUSH
19861: LD_INT 1
19863: ST_TO_ADDR
19864: GO 20459
19866: LD_INT 3
19868: DOUBLE
19869: EQUAL
19870: IFTRUE 19874
19872: GO 19885
19874: POP
// bc_type := b_lab ; 4 .. 9 :
19875: LD_ADDR_OWVAR 42
19879: PUSH
19880: LD_INT 6
19882: ST_TO_ADDR
19883: GO 20459
19885: LD_INT 4
19887: DOUBLE
19888: GREATEREQUAL
19889: IFFALSE 19897
19891: LD_INT 9
19893: DOUBLE
19894: LESSEQUAL
19895: IFTRUE 19899
19897: GO 19951
19899: POP
// begin bc_type := b_lab_half ;
19900: LD_ADDR_OWVAR 42
19904: PUSH
19905: LD_INT 7
19907: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19908: LD_ADDR_OWVAR 44
19912: PUSH
19913: LD_INT 10
19915: PUSH
19916: LD_INT 11
19918: PUSH
19919: LD_INT 12
19921: PUSH
19922: LD_INT 15
19924: PUSH
19925: LD_INT 14
19927: PUSH
19928: LD_INT 13
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: PUSH
19939: LD_VAR 0 2
19943: PUSH
19944: LD_INT 3
19946: MINUS
19947: ARRAY
19948: ST_TO_ADDR
// end ; 10 .. 13 :
19949: GO 20459
19951: LD_INT 10
19953: DOUBLE
19954: GREATEREQUAL
19955: IFFALSE 19963
19957: LD_INT 13
19959: DOUBLE
19960: LESSEQUAL
19961: IFTRUE 19965
19963: GO 20042
19965: POP
// begin bc_type := b_lab_full ;
19966: LD_ADDR_OWVAR 42
19970: PUSH
19971: LD_INT 8
19973: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19974: LD_ADDR_OWVAR 44
19978: PUSH
19979: LD_INT 10
19981: PUSH
19982: LD_INT 12
19984: PUSH
19985: LD_INT 14
19987: PUSH
19988: LD_INT 13
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: PUSH
19997: LD_VAR 0 2
20001: PUSH
20002: LD_INT 9
20004: MINUS
20005: ARRAY
20006: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20007: LD_ADDR_OWVAR 45
20011: PUSH
20012: LD_INT 11
20014: PUSH
20015: LD_INT 15
20017: PUSH
20018: LD_INT 12
20020: PUSH
20021: LD_INT 15
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: PUSH
20030: LD_VAR 0 2
20034: PUSH
20035: LD_INT 9
20037: MINUS
20038: ARRAY
20039: ST_TO_ADDR
// end ; 14 :
20040: GO 20459
20042: LD_INT 14
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20061
20050: POP
// bc_type := b_workshop ; 15 :
20051: LD_ADDR_OWVAR 42
20055: PUSH
20056: LD_INT 2
20058: ST_TO_ADDR
20059: GO 20459
20061: LD_INT 15
20063: DOUBLE
20064: EQUAL
20065: IFTRUE 20069
20067: GO 20080
20069: POP
// bc_type := b_factory ; 16 :
20070: LD_ADDR_OWVAR 42
20074: PUSH
20075: LD_INT 3
20077: ST_TO_ADDR
20078: GO 20459
20080: LD_INT 16
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20099
20088: POP
// bc_type := b_ext_gun ; 17 :
20089: LD_ADDR_OWVAR 42
20093: PUSH
20094: LD_INT 17
20096: ST_TO_ADDR
20097: GO 20459
20099: LD_INT 17
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20135
20107: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20108: LD_ADDR_OWVAR 42
20112: PUSH
20113: LD_INT 19
20115: PUSH
20116: LD_INT 23
20118: PUSH
20119: LD_INT 19
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: LIST
20126: PUSH
20127: LD_VAR 0 1
20131: ARRAY
20132: ST_TO_ADDR
20133: GO 20459
20135: LD_INT 18
20137: DOUBLE
20138: EQUAL
20139: IFTRUE 20143
20141: GO 20154
20143: POP
// bc_type := b_ext_radar ; 19 :
20144: LD_ADDR_OWVAR 42
20148: PUSH
20149: LD_INT 20
20151: ST_TO_ADDR
20152: GO 20459
20154: LD_INT 19
20156: DOUBLE
20157: EQUAL
20158: IFTRUE 20162
20160: GO 20173
20162: POP
// bc_type := b_ext_radio ; 20 :
20163: LD_ADDR_OWVAR 42
20167: PUSH
20168: LD_INT 22
20170: ST_TO_ADDR
20171: GO 20459
20173: LD_INT 20
20175: DOUBLE
20176: EQUAL
20177: IFTRUE 20181
20179: GO 20192
20181: POP
// bc_type := b_ext_siberium ; 21 :
20182: LD_ADDR_OWVAR 42
20186: PUSH
20187: LD_INT 21
20189: ST_TO_ADDR
20190: GO 20459
20192: LD_INT 21
20194: DOUBLE
20195: EQUAL
20196: IFTRUE 20200
20198: GO 20211
20200: POP
// bc_type := b_ext_computer ; 22 :
20201: LD_ADDR_OWVAR 42
20205: PUSH
20206: LD_INT 24
20208: ST_TO_ADDR
20209: GO 20459
20211: LD_INT 22
20213: DOUBLE
20214: EQUAL
20215: IFTRUE 20219
20217: GO 20230
20219: POP
// bc_type := b_ext_track ; 23 :
20220: LD_ADDR_OWVAR 42
20224: PUSH
20225: LD_INT 16
20227: ST_TO_ADDR
20228: GO 20459
20230: LD_INT 23
20232: DOUBLE
20233: EQUAL
20234: IFTRUE 20238
20236: GO 20249
20238: POP
// bc_type := b_ext_laser ; 24 :
20239: LD_ADDR_OWVAR 42
20243: PUSH
20244: LD_INT 25
20246: ST_TO_ADDR
20247: GO 20459
20249: LD_INT 24
20251: DOUBLE
20252: EQUAL
20253: IFTRUE 20257
20255: GO 20268
20257: POP
// bc_type := b_control_tower ; 25 :
20258: LD_ADDR_OWVAR 42
20262: PUSH
20263: LD_INT 36
20265: ST_TO_ADDR
20266: GO 20459
20268: LD_INT 25
20270: DOUBLE
20271: EQUAL
20272: IFTRUE 20276
20274: GO 20287
20276: POP
// bc_type := b_breastwork ; 26 :
20277: LD_ADDR_OWVAR 42
20281: PUSH
20282: LD_INT 31
20284: ST_TO_ADDR
20285: GO 20459
20287: LD_INT 26
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20306
20295: POP
// bc_type := b_bunker ; 27 :
20296: LD_ADDR_OWVAR 42
20300: PUSH
20301: LD_INT 32
20303: ST_TO_ADDR
20304: GO 20459
20306: LD_INT 27
20308: DOUBLE
20309: EQUAL
20310: IFTRUE 20314
20312: GO 20325
20314: POP
// bc_type := b_turret ; 28 :
20315: LD_ADDR_OWVAR 42
20319: PUSH
20320: LD_INT 33
20322: ST_TO_ADDR
20323: GO 20459
20325: LD_INT 28
20327: DOUBLE
20328: EQUAL
20329: IFTRUE 20333
20331: GO 20344
20333: POP
// bc_type := b_armoury ; 29 :
20334: LD_ADDR_OWVAR 42
20338: PUSH
20339: LD_INT 4
20341: ST_TO_ADDR
20342: GO 20459
20344: LD_INT 29
20346: DOUBLE
20347: EQUAL
20348: IFTRUE 20352
20350: GO 20363
20352: POP
// bc_type := b_barracks ; 30 :
20353: LD_ADDR_OWVAR 42
20357: PUSH
20358: LD_INT 5
20360: ST_TO_ADDR
20361: GO 20459
20363: LD_INT 30
20365: DOUBLE
20366: EQUAL
20367: IFTRUE 20371
20369: GO 20382
20371: POP
// bc_type := b_solar_power ; 31 :
20372: LD_ADDR_OWVAR 42
20376: PUSH
20377: LD_INT 27
20379: ST_TO_ADDR
20380: GO 20459
20382: LD_INT 31
20384: DOUBLE
20385: EQUAL
20386: IFTRUE 20390
20388: GO 20401
20390: POP
// bc_type := b_oil_power ; 32 :
20391: LD_ADDR_OWVAR 42
20395: PUSH
20396: LD_INT 26
20398: ST_TO_ADDR
20399: GO 20459
20401: LD_INT 32
20403: DOUBLE
20404: EQUAL
20405: IFTRUE 20409
20407: GO 20420
20409: POP
// bc_type := b_siberite_power ; 33 :
20410: LD_ADDR_OWVAR 42
20414: PUSH
20415: LD_INT 28
20417: ST_TO_ADDR
20418: GO 20459
20420: LD_INT 33
20422: DOUBLE
20423: EQUAL
20424: IFTRUE 20428
20426: GO 20439
20428: POP
// bc_type := b_oil_mine ; 34 :
20429: LD_ADDR_OWVAR 42
20433: PUSH
20434: LD_INT 29
20436: ST_TO_ADDR
20437: GO 20459
20439: LD_INT 34
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20458
20447: POP
// bc_type := b_siberite_mine ; end ;
20448: LD_ADDR_OWVAR 42
20452: PUSH
20453: LD_INT 30
20455: ST_TO_ADDR
20456: GO 20459
20458: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20459: LD_ADDR_VAR 0 8
20463: PUSH
20464: LD_VAR 0 5
20468: PPUSH
20469: LD_VAR 0 6
20473: PPUSH
20474: LD_VAR 0 3
20478: PPUSH
20479: CALL_OW 47
20483: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20484: LD_OWVAR 42
20488: PUSH
20489: LD_INT 32
20491: PUSH
20492: LD_INT 33
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: IN
20499: IFFALSE 20515
// PlaceWeaponTurret ( b , weapon ) ;
20501: LD_VAR 0 8
20505: PPUSH
20506: LD_VAR 0 4
20510: PPUSH
20511: CALL_OW 431
// end ;
20515: LD_VAR 0 7
20519: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20520: LD_INT 0
20522: PPUSH
20523: PPUSH
20524: PPUSH
20525: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20526: LD_ADDR_VAR 0 4
20530: PUSH
20531: LD_INT 22
20533: PUSH
20534: LD_OWVAR 2
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 2
20545: PUSH
20546: LD_INT 30
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 30
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PPUSH
20575: CALL_OW 69
20579: ST_TO_ADDR
// if not tmp then
20580: LD_VAR 0 4
20584: NOT
20585: IFFALSE 20589
// exit ;
20587: GO 20648
// for i in tmp do
20589: LD_ADDR_VAR 0 2
20593: PUSH
20594: LD_VAR 0 4
20598: PUSH
20599: FOR_IN
20600: IFFALSE 20646
// for j = 1 to 3 do
20602: LD_ADDR_VAR 0 3
20606: PUSH
20607: DOUBLE
20608: LD_INT 1
20610: DEC
20611: ST_TO_ADDR
20612: LD_INT 3
20614: PUSH
20615: FOR_TO
20616: IFFALSE 20642
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20618: LD_VAR 0 2
20622: PPUSH
20623: CALL_OW 274
20627: PPUSH
20628: LD_VAR 0 3
20632: PPUSH
20633: LD_INT 99999
20635: PPUSH
20636: CALL_OW 277
20640: GO 20615
20642: POP
20643: POP
20644: GO 20599
20646: POP
20647: POP
// end ;
20648: LD_VAR 0 1
20652: RET
// export function hHackSetLevel10 ; var i , j ; begin
20653: LD_INT 0
20655: PPUSH
20656: PPUSH
20657: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20658: LD_ADDR_VAR 0 2
20662: PUSH
20663: LD_INT 21
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PPUSH
20673: CALL_OW 69
20677: PUSH
20678: FOR_IN
20679: IFFALSE 20731
// if IsSelected ( i ) then
20681: LD_VAR 0 2
20685: PPUSH
20686: CALL_OW 306
20690: IFFALSE 20729
// begin for j := 1 to 4 do
20692: LD_ADDR_VAR 0 3
20696: PUSH
20697: DOUBLE
20698: LD_INT 1
20700: DEC
20701: ST_TO_ADDR
20702: LD_INT 4
20704: PUSH
20705: FOR_TO
20706: IFFALSE 20727
// SetSkill ( i , j , 10 ) ;
20708: LD_VAR 0 2
20712: PPUSH
20713: LD_VAR 0 3
20717: PPUSH
20718: LD_INT 10
20720: PPUSH
20721: CALL_OW 237
20725: GO 20705
20727: POP
20728: POP
// end ;
20729: GO 20678
20731: POP
20732: POP
// end ;
20733: LD_VAR 0 1
20737: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20738: LD_INT 0
20740: PPUSH
20741: PPUSH
20742: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20743: LD_ADDR_VAR 0 2
20747: PUSH
20748: LD_INT 22
20750: PUSH
20751: LD_OWVAR 2
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 21
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PPUSH
20774: CALL_OW 69
20778: PUSH
20779: FOR_IN
20780: IFFALSE 20821
// begin for j := 1 to 4 do
20782: LD_ADDR_VAR 0 3
20786: PUSH
20787: DOUBLE
20788: LD_INT 1
20790: DEC
20791: ST_TO_ADDR
20792: LD_INT 4
20794: PUSH
20795: FOR_TO
20796: IFFALSE 20817
// SetSkill ( i , j , 10 ) ;
20798: LD_VAR 0 2
20802: PPUSH
20803: LD_VAR 0 3
20807: PPUSH
20808: LD_INT 10
20810: PPUSH
20811: CALL_OW 237
20815: GO 20795
20817: POP
20818: POP
// end ;
20819: GO 20779
20821: POP
20822: POP
// end ;
20823: LD_VAR 0 1
20827: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20828: LD_INT 0
20830: PPUSH
// uc_side := your_side ;
20831: LD_ADDR_OWVAR 20
20835: PUSH
20836: LD_OWVAR 2
20840: ST_TO_ADDR
// uc_nation := nation ;
20841: LD_ADDR_OWVAR 21
20845: PUSH
20846: LD_VAR 0 1
20850: ST_TO_ADDR
// InitHc ;
20851: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20855: LD_INT 0
20857: PPUSH
20858: LD_VAR 0 2
20862: PPUSH
20863: LD_VAR 0 3
20867: PPUSH
20868: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20872: LD_VAR 0 4
20876: PPUSH
20877: LD_VAR 0 5
20881: PPUSH
20882: CALL_OW 428
20886: PUSH
20887: LD_INT 0
20889: EQUAL
20890: IFFALSE 20914
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20892: CALL_OW 44
20896: PPUSH
20897: LD_VAR 0 4
20901: PPUSH
20902: LD_VAR 0 5
20906: PPUSH
20907: LD_INT 1
20909: PPUSH
20910: CALL_OW 48
// end ;
20914: LD_VAR 0 6
20918: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20919: LD_INT 0
20921: PPUSH
20922: PPUSH
// uc_side := your_side ;
20923: LD_ADDR_OWVAR 20
20927: PUSH
20928: LD_OWVAR 2
20932: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20933: LD_VAR 0 1
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 3
20946: PUSH
20947: LD_INT 4
20949: PUSH
20950: LD_INT 5
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: IN
20960: IFFALSE 20972
// uc_nation := nation_american else
20962: LD_ADDR_OWVAR 21
20966: PUSH
20967: LD_INT 1
20969: ST_TO_ADDR
20970: GO 21015
// if chassis in [ 11 , 12 , 13 , 14 ] then
20972: LD_VAR 0 1
20976: PUSH
20977: LD_INT 11
20979: PUSH
20980: LD_INT 12
20982: PUSH
20983: LD_INT 13
20985: PUSH
20986: LD_INT 14
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: IN
20995: IFFALSE 21007
// uc_nation := nation_arabian else
20997: LD_ADDR_OWVAR 21
21001: PUSH
21002: LD_INT 2
21004: ST_TO_ADDR
21005: GO 21015
// uc_nation := nation_russian ;
21007: LD_ADDR_OWVAR 21
21011: PUSH
21012: LD_INT 3
21014: ST_TO_ADDR
// vc_chassis := chassis ;
21015: LD_ADDR_OWVAR 37
21019: PUSH
21020: LD_VAR 0 1
21024: ST_TO_ADDR
// vc_engine := engine ;
21025: LD_ADDR_OWVAR 39
21029: PUSH
21030: LD_VAR 0 2
21034: ST_TO_ADDR
// vc_control := control ;
21035: LD_ADDR_OWVAR 38
21039: PUSH
21040: LD_VAR 0 3
21044: ST_TO_ADDR
// vc_weapon := weapon ;
21045: LD_ADDR_OWVAR 40
21049: PUSH
21050: LD_VAR 0 4
21054: ST_TO_ADDR
// un := CreateVehicle ;
21055: LD_ADDR_VAR 0 8
21059: PUSH
21060: CALL_OW 45
21064: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21065: LD_VAR 0 8
21069: PPUSH
21070: LD_INT 0
21072: PPUSH
21073: LD_INT 5
21075: PPUSH
21076: CALL_OW 12
21080: PPUSH
21081: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21085: LD_VAR 0 8
21089: PPUSH
21090: LD_VAR 0 5
21094: PPUSH
21095: LD_VAR 0 6
21099: PPUSH
21100: LD_INT 1
21102: PPUSH
21103: CALL_OW 48
// end ;
21107: LD_VAR 0 7
21111: RET
// export hInvincible ; every 1 do
21112: GO 21114
21114: DISABLE
// hInvincible := [ ] ;
21115: LD_ADDR_EXP 93
21119: PUSH
21120: EMPTY
21121: ST_TO_ADDR
21122: END
// every 10 do var i ;
21123: GO 21125
21125: DISABLE
21126: LD_INT 0
21128: PPUSH
// begin enable ;
21129: ENABLE
// if not hInvincible then
21130: LD_EXP 93
21134: NOT
21135: IFFALSE 21139
// exit ;
21137: GO 21183
// for i in hInvincible do
21139: LD_ADDR_VAR 0 1
21143: PUSH
21144: LD_EXP 93
21148: PUSH
21149: FOR_IN
21150: IFFALSE 21181
// if GetLives ( i ) < 1000 then
21152: LD_VAR 0 1
21156: PPUSH
21157: CALL_OW 256
21161: PUSH
21162: LD_INT 1000
21164: LESS
21165: IFFALSE 21179
// SetLives ( i , 1000 ) ;
21167: LD_VAR 0 1
21171: PPUSH
21172: LD_INT 1000
21174: PPUSH
21175: CALL_OW 234
21179: GO 21149
21181: POP
21182: POP
// end ;
21183: PPOPN 1
21185: END
// export function hHackInvincible ; var i ; begin
21186: LD_INT 0
21188: PPUSH
21189: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21190: LD_ADDR_VAR 0 2
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: LD_INT 21
21200: PUSH
21201: LD_INT 1
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 21
21210: PUSH
21211: LD_INT 2
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: LIST
21222: PPUSH
21223: CALL_OW 69
21227: PUSH
21228: FOR_IN
21229: IFFALSE 21290
// if IsSelected ( i ) then
21231: LD_VAR 0 2
21235: PPUSH
21236: CALL_OW 306
21240: IFFALSE 21288
// begin if i in hInvincible then
21242: LD_VAR 0 2
21246: PUSH
21247: LD_EXP 93
21251: IN
21252: IFFALSE 21272
// hInvincible := hInvincible diff i else
21254: LD_ADDR_EXP 93
21258: PUSH
21259: LD_EXP 93
21263: PUSH
21264: LD_VAR 0 2
21268: DIFF
21269: ST_TO_ADDR
21270: GO 21288
// hInvincible := hInvincible union i ;
21272: LD_ADDR_EXP 93
21276: PUSH
21277: LD_EXP 93
21281: PUSH
21282: LD_VAR 0 2
21286: UNION
21287: ST_TO_ADDR
// end ;
21288: GO 21228
21290: POP
21291: POP
// end ;
21292: LD_VAR 0 1
21296: RET
// export function hHackInvisible ; var i , j ; begin
21297: LD_INT 0
21299: PPUSH
21300: PPUSH
21301: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21302: LD_ADDR_VAR 0 2
21306: PUSH
21307: LD_INT 21
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PPUSH
21317: CALL_OW 69
21321: PUSH
21322: FOR_IN
21323: IFFALSE 21347
// if IsSelected ( i ) then
21325: LD_VAR 0 2
21329: PPUSH
21330: CALL_OW 306
21334: IFFALSE 21345
// ComForceInvisible ( i ) ;
21336: LD_VAR 0 2
21340: PPUSH
21341: CALL_OW 496
21345: GO 21322
21347: POP
21348: POP
// end ;
21349: LD_VAR 0 1
21353: RET
// export function hHackChangeYourSide ; begin
21354: LD_INT 0
21356: PPUSH
// if your_side = 8 then
21357: LD_OWVAR 2
21361: PUSH
21362: LD_INT 8
21364: EQUAL
21365: IFFALSE 21377
// your_side := 0 else
21367: LD_ADDR_OWVAR 2
21371: PUSH
21372: LD_INT 0
21374: ST_TO_ADDR
21375: GO 21391
// your_side := your_side + 1 ;
21377: LD_ADDR_OWVAR 2
21381: PUSH
21382: LD_OWVAR 2
21386: PUSH
21387: LD_INT 1
21389: PLUS
21390: ST_TO_ADDR
// end ;
21391: LD_VAR 0 1
21395: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21396: LD_INT 0
21398: PPUSH
21399: PPUSH
21400: PPUSH
// for i in all_units do
21401: LD_ADDR_VAR 0 2
21405: PUSH
21406: LD_OWVAR 3
21410: PUSH
21411: FOR_IN
21412: IFFALSE 21490
// if IsSelected ( i ) then
21414: LD_VAR 0 2
21418: PPUSH
21419: CALL_OW 306
21423: IFFALSE 21488
// begin j := GetSide ( i ) ;
21425: LD_ADDR_VAR 0 3
21429: PUSH
21430: LD_VAR 0 2
21434: PPUSH
21435: CALL_OW 255
21439: ST_TO_ADDR
// if j = 8 then
21440: LD_VAR 0 3
21444: PUSH
21445: LD_INT 8
21447: EQUAL
21448: IFFALSE 21460
// j := 0 else
21450: LD_ADDR_VAR 0 3
21454: PUSH
21455: LD_INT 0
21457: ST_TO_ADDR
21458: GO 21474
// j := j + 1 ;
21460: LD_ADDR_VAR 0 3
21464: PUSH
21465: LD_VAR 0 3
21469: PUSH
21470: LD_INT 1
21472: PLUS
21473: ST_TO_ADDR
// SetSide ( i , j ) ;
21474: LD_VAR 0 2
21478: PPUSH
21479: LD_VAR 0 3
21483: PPUSH
21484: CALL_OW 235
// end ;
21488: GO 21411
21490: POP
21491: POP
// end ;
21492: LD_VAR 0 1
21496: RET
// export function hHackFog ; begin
21497: LD_INT 0
21499: PPUSH
// FogOff ( true ) ;
21500: LD_INT 1
21502: PPUSH
21503: CALL_OW 344
// end ;
21507: LD_VAR 0 1
21511: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21512: LD_INT 0
21514: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21515: LD_VAR 0 1
21519: PPUSH
21520: LD_VAR 0 2
21524: PPUSH
21525: LD_VAR 0 3
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: LD_INT 1
21535: PPUSH
21536: CALL_OW 483
// CenterOnXY ( x , y ) ;
21540: LD_VAR 0 2
21544: PPUSH
21545: LD_VAR 0 3
21549: PPUSH
21550: CALL_OW 84
// end ;
21554: LD_VAR 0 4
21558: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21559: LD_INT 0
21561: PPUSH
21562: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21563: LD_VAR 0 1
21567: NOT
21568: PUSH
21569: LD_VAR 0 2
21573: PPUSH
21574: LD_VAR 0 3
21578: PPUSH
21579: CALL_OW 488
21583: NOT
21584: OR
21585: PUSH
21586: LD_VAR 0 1
21590: PPUSH
21591: CALL_OW 266
21595: PUSH
21596: LD_INT 3
21598: NONEQUAL
21599: PUSH
21600: LD_VAR 0 1
21604: PPUSH
21605: CALL_OW 247
21609: PUSH
21610: LD_INT 1
21612: EQUAL
21613: NOT
21614: AND
21615: OR
21616: IFFALSE 21620
// exit ;
21618: GO 21769
// if GetType ( factory ) = unit_human then
21620: LD_VAR 0 1
21624: PPUSH
21625: CALL_OW 247
21629: PUSH
21630: LD_INT 1
21632: EQUAL
21633: IFFALSE 21650
// factory := IsInUnit ( factory ) ;
21635: LD_ADDR_VAR 0 1
21639: PUSH
21640: LD_VAR 0 1
21644: PPUSH
21645: CALL_OW 310
21649: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21650: LD_VAR 0 1
21654: PPUSH
21655: CALL_OW 266
21659: PUSH
21660: LD_INT 3
21662: NONEQUAL
21663: IFFALSE 21667
// exit ;
21665: GO 21769
// if HexInfo ( x , y ) = factory then
21667: LD_VAR 0 2
21671: PPUSH
21672: LD_VAR 0 3
21676: PPUSH
21677: CALL_OW 428
21681: PUSH
21682: LD_VAR 0 1
21686: EQUAL
21687: IFFALSE 21714
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21689: LD_ADDR_EXP 94
21693: PUSH
21694: LD_EXP 94
21698: PPUSH
21699: LD_VAR 0 1
21703: PPUSH
21704: LD_INT 0
21706: PPUSH
21707: CALL_OW 1
21711: ST_TO_ADDR
21712: GO 21765
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21714: LD_ADDR_EXP 94
21718: PUSH
21719: LD_EXP 94
21723: PPUSH
21724: LD_VAR 0 1
21728: PPUSH
21729: LD_VAR 0 1
21733: PPUSH
21734: CALL_OW 255
21738: PUSH
21739: LD_VAR 0 1
21743: PUSH
21744: LD_VAR 0 2
21748: PUSH
21749: LD_VAR 0 3
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: PPUSH
21760: CALL_OW 1
21764: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21765: CALL 21774 0 0
// end ;
21769: LD_VAR 0 4
21773: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21774: LD_INT 0
21776: PPUSH
21777: PPUSH
21778: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21779: LD_STRING resetFactoryWaypoint();
21781: PPUSH
21782: CALL_OW 559
// if factoryWaypoints then
21786: LD_EXP 94
21790: IFFALSE 21916
// begin list := PrepareArray ( factoryWaypoints ) ;
21792: LD_ADDR_VAR 0 3
21796: PUSH
21797: LD_EXP 94
21801: PPUSH
21802: CALL 68348 0 1
21806: ST_TO_ADDR
// for i := 1 to list do
21807: LD_ADDR_VAR 0 2
21811: PUSH
21812: DOUBLE
21813: LD_INT 1
21815: DEC
21816: ST_TO_ADDR
21817: LD_VAR 0 3
21821: PUSH
21822: FOR_TO
21823: IFFALSE 21914
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21825: LD_STRING setFactoryWaypointXY(
21827: PUSH
21828: LD_VAR 0 3
21832: PUSH
21833: LD_VAR 0 2
21837: ARRAY
21838: PUSH
21839: LD_INT 1
21841: ARRAY
21842: STR
21843: PUSH
21844: LD_STRING ,
21846: STR
21847: PUSH
21848: LD_VAR 0 3
21852: PUSH
21853: LD_VAR 0 2
21857: ARRAY
21858: PUSH
21859: LD_INT 2
21861: ARRAY
21862: STR
21863: PUSH
21864: LD_STRING ,
21866: STR
21867: PUSH
21868: LD_VAR 0 3
21872: PUSH
21873: LD_VAR 0 2
21877: ARRAY
21878: PUSH
21879: LD_INT 3
21881: ARRAY
21882: STR
21883: PUSH
21884: LD_STRING ,
21886: STR
21887: PUSH
21888: LD_VAR 0 3
21892: PUSH
21893: LD_VAR 0 2
21897: ARRAY
21898: PUSH
21899: LD_INT 4
21901: ARRAY
21902: STR
21903: PUSH
21904: LD_STRING )
21906: STR
21907: PPUSH
21908: CALL_OW 559
21912: GO 21822
21914: POP
21915: POP
// end ; end ;
21916: LD_VAR 0 1
21920: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21921: LD_INT 0
21923: PPUSH
// if HexInfo ( x , y ) = warehouse then
21924: LD_VAR 0 2
21928: PPUSH
21929: LD_VAR 0 3
21933: PPUSH
21934: CALL_OW 428
21938: PUSH
21939: LD_VAR 0 1
21943: EQUAL
21944: IFFALSE 21971
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21946: LD_ADDR_EXP 95
21950: PUSH
21951: LD_EXP 95
21955: PPUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: LD_INT 0
21963: PPUSH
21964: CALL_OW 1
21968: ST_TO_ADDR
21969: GO 22022
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21971: LD_ADDR_EXP 95
21975: PUSH
21976: LD_EXP 95
21980: PPUSH
21981: LD_VAR 0 1
21985: PPUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: CALL_OW 255
21995: PUSH
21996: LD_VAR 0 1
22000: PUSH
22001: LD_VAR 0 2
22005: PUSH
22006: LD_VAR 0 3
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: PPUSH
22017: CALL_OW 1
22021: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22022: CALL 22031 0 0
// end ;
22026: LD_VAR 0 4
22030: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22031: LD_INT 0
22033: PPUSH
22034: PPUSH
22035: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22036: LD_STRING resetWarehouseGatheringPoints();
22038: PPUSH
22039: CALL_OW 559
// if warehouseGatheringPoints then
22043: LD_EXP 95
22047: IFFALSE 22173
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22049: LD_ADDR_VAR 0 3
22053: PUSH
22054: LD_EXP 95
22058: PPUSH
22059: CALL 68348 0 1
22063: ST_TO_ADDR
// for i := 1 to list do
22064: LD_ADDR_VAR 0 2
22068: PUSH
22069: DOUBLE
22070: LD_INT 1
22072: DEC
22073: ST_TO_ADDR
22074: LD_VAR 0 3
22078: PUSH
22079: FOR_TO
22080: IFFALSE 22171
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22082: LD_STRING setWarehouseGatheringPointXY(
22084: PUSH
22085: LD_VAR 0 3
22089: PUSH
22090: LD_VAR 0 2
22094: ARRAY
22095: PUSH
22096: LD_INT 1
22098: ARRAY
22099: STR
22100: PUSH
22101: LD_STRING ,
22103: STR
22104: PUSH
22105: LD_VAR 0 3
22109: PUSH
22110: LD_VAR 0 2
22114: ARRAY
22115: PUSH
22116: LD_INT 2
22118: ARRAY
22119: STR
22120: PUSH
22121: LD_STRING ,
22123: STR
22124: PUSH
22125: LD_VAR 0 3
22129: PUSH
22130: LD_VAR 0 2
22134: ARRAY
22135: PUSH
22136: LD_INT 3
22138: ARRAY
22139: STR
22140: PUSH
22141: LD_STRING ,
22143: STR
22144: PUSH
22145: LD_VAR 0 3
22149: PUSH
22150: LD_VAR 0 2
22154: ARRAY
22155: PUSH
22156: LD_INT 4
22158: ARRAY
22159: STR
22160: PUSH
22161: LD_STRING )
22163: STR
22164: PPUSH
22165: CALL_OW 559
22169: GO 22079
22171: POP
22172: POP
// end ; end ;
22173: LD_VAR 0 1
22177: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22178: LD_EXP 95
22182: IFFALSE 22869
22184: GO 22186
22186: DISABLE
22187: LD_INT 0
22189: PPUSH
22190: PPUSH
22191: PPUSH
22192: PPUSH
22193: PPUSH
22194: PPUSH
22195: PPUSH
22196: PPUSH
22197: PPUSH
// begin enable ;
22198: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22199: LD_ADDR_VAR 0 3
22203: PUSH
22204: LD_EXP 95
22208: PPUSH
22209: CALL 68348 0 1
22213: ST_TO_ADDR
// if not list then
22214: LD_VAR 0 3
22218: NOT
22219: IFFALSE 22223
// exit ;
22221: GO 22869
// for i := 1 to list do
22223: LD_ADDR_VAR 0 1
22227: PUSH
22228: DOUBLE
22229: LD_INT 1
22231: DEC
22232: ST_TO_ADDR
22233: LD_VAR 0 3
22237: PUSH
22238: FOR_TO
22239: IFFALSE 22867
// begin depot := list [ i ] [ 2 ] ;
22241: LD_ADDR_VAR 0 8
22245: PUSH
22246: LD_VAR 0 3
22250: PUSH
22251: LD_VAR 0 1
22255: ARRAY
22256: PUSH
22257: LD_INT 2
22259: ARRAY
22260: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22261: LD_ADDR_VAR 0 5
22265: PUSH
22266: LD_VAR 0 3
22270: PUSH
22271: LD_VAR 0 1
22275: ARRAY
22276: PUSH
22277: LD_INT 1
22279: ARRAY
22280: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22281: LD_VAR 0 8
22285: PPUSH
22286: CALL_OW 301
22290: PUSH
22291: LD_VAR 0 5
22295: PUSH
22296: LD_VAR 0 8
22300: PPUSH
22301: CALL_OW 255
22305: NONEQUAL
22306: OR
22307: IFFALSE 22336
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22309: LD_ADDR_EXP 95
22313: PUSH
22314: LD_EXP 95
22318: PPUSH
22319: LD_VAR 0 8
22323: PPUSH
22324: LD_INT 0
22326: PPUSH
22327: CALL_OW 1
22331: ST_TO_ADDR
// exit ;
22332: POP
22333: POP
22334: GO 22869
// end ; x := list [ i ] [ 3 ] ;
22336: LD_ADDR_VAR 0 6
22340: PUSH
22341: LD_VAR 0 3
22345: PUSH
22346: LD_VAR 0 1
22350: ARRAY
22351: PUSH
22352: LD_INT 3
22354: ARRAY
22355: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22356: LD_ADDR_VAR 0 7
22360: PUSH
22361: LD_VAR 0 3
22365: PUSH
22366: LD_VAR 0 1
22370: ARRAY
22371: PUSH
22372: LD_INT 4
22374: ARRAY
22375: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22376: LD_ADDR_VAR 0 9
22380: PUSH
22381: LD_VAR 0 6
22385: PPUSH
22386: LD_VAR 0 7
22390: PPUSH
22391: LD_INT 16
22393: PPUSH
22394: CALL 66932 0 3
22398: ST_TO_ADDR
// if not cratesNearbyPoint then
22399: LD_VAR 0 9
22403: NOT
22404: IFFALSE 22410
// exit ;
22406: POP
22407: POP
22408: GO 22869
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22410: LD_ADDR_VAR 0 4
22414: PUSH
22415: LD_INT 22
22417: PUSH
22418: LD_VAR 0 5
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 3
22429: PUSH
22430: LD_INT 60
22432: PUSH
22433: EMPTY
22434: LIST
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 91
22442: PUSH
22443: LD_VAR 0 8
22447: PUSH
22448: LD_INT 6
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 2
22458: PUSH
22459: LD_INT 25
22461: PUSH
22462: LD_INT 2
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 25
22471: PUSH
22472: LD_INT 16
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: LIST
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: PPUSH
22490: CALL_OW 69
22494: PUSH
22495: LD_VAR 0 8
22499: PPUSH
22500: CALL_OW 313
22504: PPUSH
22505: LD_INT 3
22507: PUSH
22508: LD_INT 60
22510: PUSH
22511: EMPTY
22512: LIST
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 2
22520: PUSH
22521: LD_INT 25
22523: PUSH
22524: LD_INT 2
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 25
22533: PUSH
22534: LD_INT 16
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: LIST
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PPUSH
22550: CALL_OW 72
22554: UNION
22555: ST_TO_ADDR
// if tmp then
22556: LD_VAR 0 4
22560: IFFALSE 22640
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22562: LD_ADDR_VAR 0 4
22566: PUSH
22567: LD_VAR 0 4
22571: PPUSH
22572: LD_INT 3
22574: PPUSH
22575: CALL 64899 0 2
22579: ST_TO_ADDR
// for j in tmp do
22580: LD_ADDR_VAR 0 2
22584: PUSH
22585: LD_VAR 0 4
22589: PUSH
22590: FOR_IN
22591: IFFALSE 22634
// begin if IsInUnit ( j ) then
22593: LD_VAR 0 2
22597: PPUSH
22598: CALL_OW 310
22602: IFFALSE 22613
// ComExit ( j ) ;
22604: LD_VAR 0 2
22608: PPUSH
22609: CALL 64982 0 1
// AddComCollect ( j , x , y ) ;
22613: LD_VAR 0 2
22617: PPUSH
22618: LD_VAR 0 6
22622: PPUSH
22623: LD_VAR 0 7
22627: PPUSH
22628: CALL_OW 177
// end ;
22632: GO 22590
22634: POP
22635: POP
// exit ;
22636: POP
22637: POP
22638: GO 22869
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22640: LD_ADDR_VAR 0 4
22644: PUSH
22645: LD_INT 22
22647: PUSH
22648: LD_VAR 0 5
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 91
22659: PUSH
22660: LD_VAR 0 8
22664: PUSH
22665: LD_INT 8
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: LD_INT 34
22678: PUSH
22679: LD_INT 12
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 34
22688: PUSH
22689: LD_INT 51
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 34
22698: PUSH
22699: LD_INT 32
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 34
22708: PUSH
22709: LD_EXP 19
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: PPUSH
22730: CALL_OW 69
22734: ST_TO_ADDR
// if tmp then
22735: LD_VAR 0 4
22739: IFFALSE 22865
// begin for j in tmp do
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: LD_VAR 0 4
22750: PUSH
22751: FOR_IN
22752: IFFALSE 22863
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22754: LD_VAR 0 2
22758: PPUSH
22759: CALL_OW 262
22763: PUSH
22764: LD_INT 3
22766: EQUAL
22767: PUSH
22768: LD_VAR 0 2
22772: PPUSH
22773: CALL_OW 261
22777: PUSH
22778: LD_INT 20
22780: GREATER
22781: OR
22782: PUSH
22783: LD_VAR 0 2
22787: PPUSH
22788: CALL_OW 314
22792: NOT
22793: AND
22794: PUSH
22795: LD_VAR 0 2
22799: PPUSH
22800: CALL_OW 263
22804: PUSH
22805: LD_INT 1
22807: NONEQUAL
22808: PUSH
22809: LD_VAR 0 2
22813: PPUSH
22814: CALL_OW 311
22818: OR
22819: AND
22820: IFFALSE 22861
// begin ComCollect ( j , x , y ) ;
22822: LD_VAR 0 2
22826: PPUSH
22827: LD_VAR 0 6
22831: PPUSH
22832: LD_VAR 0 7
22836: PPUSH
22837: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22841: LD_VAR 0 2
22845: PPUSH
22846: LD_VAR 0 8
22850: PPUSH
22851: CALL_OW 172
// exit ;
22855: POP
22856: POP
22857: POP
22858: POP
22859: GO 22869
// end ;
22861: GO 22751
22863: POP
22864: POP
// end ; end ;
22865: GO 22238
22867: POP
22868: POP
// end ; end_of_file
22869: PPOPN 9
22871: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22872: LD_INT 0
22874: PPUSH
22875: PPUSH
22876: PPUSH
22877: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22878: LD_VAR 0 1
22882: PPUSH
22883: CALL_OW 264
22887: PUSH
22888: LD_EXP 22
22892: EQUAL
22893: IFFALSE 22965
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22895: LD_INT 68
22897: PPUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 255
22907: PPUSH
22908: CALL_OW 321
22912: PUSH
22913: LD_INT 2
22915: EQUAL
22916: IFFALSE 22928
// eff := 70 else
22918: LD_ADDR_VAR 0 4
22922: PUSH
22923: LD_INT 70
22925: ST_TO_ADDR
22926: GO 22936
// eff := 30 ;
22928: LD_ADDR_VAR 0 4
22932: PUSH
22933: LD_INT 30
22935: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22936: LD_VAR 0 1
22940: PPUSH
22941: CALL_OW 250
22945: PPUSH
22946: LD_VAR 0 1
22950: PPUSH
22951: CALL_OW 251
22955: PPUSH
22956: LD_VAR 0 4
22960: PPUSH
22961: CALL_OW 495
// end ; end ;
22965: LD_VAR 0 2
22969: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22970: LD_INT 0
22972: PPUSH
// end ;
22973: LD_VAR 0 4
22977: RET
// export function SOS_Command ( cmd ) ; begin
22978: LD_INT 0
22980: PPUSH
// end ;
22981: LD_VAR 0 2
22985: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22986: LD_INT 0
22988: PPUSH
// end ;
22989: LD_VAR 0 6
22993: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22994: LD_INT 0
22996: PPUSH
22997: PPUSH
// if not vehicle or not factory then
22998: LD_VAR 0 1
23002: NOT
23003: PUSH
23004: LD_VAR 0 2
23008: NOT
23009: OR
23010: IFFALSE 23014
// exit ;
23012: GO 23245
// if factoryWaypoints >= factory then
23014: LD_EXP 94
23018: PUSH
23019: LD_VAR 0 2
23023: GREATEREQUAL
23024: IFFALSE 23245
// if factoryWaypoints [ factory ] then
23026: LD_EXP 94
23030: PUSH
23031: LD_VAR 0 2
23035: ARRAY
23036: IFFALSE 23245
// begin if GetControl ( vehicle ) = control_manual then
23038: LD_VAR 0 1
23042: PPUSH
23043: CALL_OW 263
23047: PUSH
23048: LD_INT 1
23050: EQUAL
23051: IFFALSE 23132
// begin driver := IsDrivenBy ( vehicle ) ;
23053: LD_ADDR_VAR 0 4
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 311
23067: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23068: LD_VAR 0 4
23072: PPUSH
23073: LD_EXP 94
23077: PUSH
23078: LD_VAR 0 2
23082: ARRAY
23083: PUSH
23084: LD_INT 3
23086: ARRAY
23087: PPUSH
23088: LD_EXP 94
23092: PUSH
23093: LD_VAR 0 2
23097: ARRAY
23098: PUSH
23099: LD_INT 4
23101: ARRAY
23102: PPUSH
23103: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23107: LD_VAR 0 4
23111: PPUSH
23112: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23116: LD_VAR 0 4
23120: PPUSH
23121: LD_VAR 0 2
23125: PPUSH
23126: CALL_OW 180
// end else
23130: GO 23245
// if GetControl ( vehicle ) = control_remote then
23132: LD_VAR 0 1
23136: PPUSH
23137: CALL_OW 263
23141: PUSH
23142: LD_INT 2
23144: EQUAL
23145: IFFALSE 23206
// begin wait ( 0 0$2 ) ;
23147: LD_INT 70
23149: PPUSH
23150: CALL_OW 67
// if Connect ( vehicle ) then
23154: LD_VAR 0 1
23158: PPUSH
23159: CALL 35293 0 1
23163: IFFALSE 23204
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23165: LD_VAR 0 1
23169: PPUSH
23170: LD_EXP 94
23174: PUSH
23175: LD_VAR 0 2
23179: ARRAY
23180: PUSH
23181: LD_INT 3
23183: ARRAY
23184: PPUSH
23185: LD_EXP 94
23189: PUSH
23190: LD_VAR 0 2
23194: ARRAY
23195: PUSH
23196: LD_INT 4
23198: ARRAY
23199: PPUSH
23200: CALL_OW 171
// end else
23204: GO 23245
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23206: LD_VAR 0 1
23210: PPUSH
23211: LD_EXP 94
23215: PUSH
23216: LD_VAR 0 2
23220: ARRAY
23221: PUSH
23222: LD_INT 3
23224: ARRAY
23225: PPUSH
23226: LD_EXP 94
23230: PUSH
23231: LD_VAR 0 2
23235: ARRAY
23236: PUSH
23237: LD_INT 4
23239: ARRAY
23240: PPUSH
23241: CALL_OW 171
// end ; end ;
23245: LD_VAR 0 3
23249: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23250: LD_INT 0
23252: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23253: LD_VAR 0 1
23257: PUSH
23258: LD_INT 250
23260: EQUAL
23261: PUSH
23262: LD_VAR 0 2
23266: PPUSH
23267: CALL_OW 264
23271: PUSH
23272: LD_EXP 25
23276: EQUAL
23277: AND
23278: IFFALSE 23299
// MinerPlaceMine ( unit , x , y ) ;
23280: LD_VAR 0 2
23284: PPUSH
23285: LD_VAR 0 4
23289: PPUSH
23290: LD_VAR 0 5
23294: PPUSH
23295: CALL 25698 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23299: LD_VAR 0 1
23303: PUSH
23304: LD_INT 251
23306: EQUAL
23307: PUSH
23308: LD_VAR 0 2
23312: PPUSH
23313: CALL_OW 264
23317: PUSH
23318: LD_EXP 25
23322: EQUAL
23323: AND
23324: IFFALSE 23345
// MinerDetonateMine ( unit , x , y ) ;
23326: LD_VAR 0 2
23330: PPUSH
23331: LD_VAR 0 4
23335: PPUSH
23336: LD_VAR 0 5
23340: PPUSH
23341: CALL 25975 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23345: LD_VAR 0 1
23349: PUSH
23350: LD_INT 252
23352: EQUAL
23353: PUSH
23354: LD_VAR 0 2
23358: PPUSH
23359: CALL_OW 264
23363: PUSH
23364: LD_EXP 25
23368: EQUAL
23369: AND
23370: IFFALSE 23391
// MinerCreateMinefield ( unit , x , y ) ;
23372: LD_VAR 0 2
23376: PPUSH
23377: LD_VAR 0 4
23381: PPUSH
23382: LD_VAR 0 5
23386: PPUSH
23387: CALL 26392 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23391: LD_VAR 0 1
23395: PUSH
23396: LD_INT 253
23398: EQUAL
23399: PUSH
23400: LD_VAR 0 2
23404: PPUSH
23405: CALL_OW 257
23409: PUSH
23410: LD_INT 5
23412: EQUAL
23413: AND
23414: IFFALSE 23435
// ComBinocular ( unit , x , y ) ;
23416: LD_VAR 0 2
23420: PPUSH
23421: LD_VAR 0 4
23425: PPUSH
23426: LD_VAR 0 5
23430: PPUSH
23431: CALL 26763 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23435: LD_VAR 0 1
23439: PUSH
23440: LD_INT 254
23442: EQUAL
23443: PUSH
23444: LD_VAR 0 2
23448: PPUSH
23449: CALL_OW 264
23453: PUSH
23454: LD_EXP 20
23458: EQUAL
23459: AND
23460: PUSH
23461: LD_VAR 0 3
23465: PPUSH
23466: CALL_OW 263
23470: PUSH
23471: LD_INT 3
23473: EQUAL
23474: AND
23475: IFFALSE 23491
// HackDestroyVehicle ( unit , selectedUnit ) ;
23477: LD_VAR 0 2
23481: PPUSH
23482: LD_VAR 0 3
23486: PPUSH
23487: CALL 25058 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23491: LD_VAR 0 1
23495: PUSH
23496: LD_INT 255
23498: EQUAL
23499: PUSH
23500: LD_VAR 0 2
23504: PPUSH
23505: CALL_OW 264
23509: PUSH
23510: LD_INT 14
23512: PUSH
23513: LD_INT 53
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: IN
23520: AND
23521: PUSH
23522: LD_VAR 0 4
23526: PPUSH
23527: LD_VAR 0 5
23531: PPUSH
23532: CALL_OW 488
23536: AND
23537: IFFALSE 23561
// CutTreeXYR ( unit , x , y , 12 ) ;
23539: LD_VAR 0 2
23543: PPUSH
23544: LD_VAR 0 4
23548: PPUSH
23549: LD_VAR 0 5
23553: PPUSH
23554: LD_INT 12
23556: PPUSH
23557: CALL 23624 0 4
// if cmd = 256 then
23561: LD_VAR 0 1
23565: PUSH
23566: LD_INT 256
23568: EQUAL
23569: IFFALSE 23590
// SetFactoryWaypoint ( unit , x , y ) ;
23571: LD_VAR 0 2
23575: PPUSH
23576: LD_VAR 0 4
23580: PPUSH
23581: LD_VAR 0 5
23585: PPUSH
23586: CALL 21559 0 3
// if cmd = 257 then
23590: LD_VAR 0 1
23594: PUSH
23595: LD_INT 257
23597: EQUAL
23598: IFFALSE 23619
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23600: LD_VAR 0 2
23604: PPUSH
23605: LD_VAR 0 4
23609: PPUSH
23610: LD_VAR 0 5
23614: PPUSH
23615: CALL 21921 0 3
// end ;
23619: LD_VAR 0 6
23623: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23624: LD_INT 0
23626: PPUSH
23627: PPUSH
23628: PPUSH
23629: PPUSH
23630: PPUSH
23631: PPUSH
23632: PPUSH
23633: PPUSH
23634: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23635: LD_VAR 0 1
23639: NOT
23640: PUSH
23641: LD_VAR 0 2
23645: PPUSH
23646: LD_VAR 0 3
23650: PPUSH
23651: CALL_OW 488
23655: NOT
23656: OR
23657: PUSH
23658: LD_VAR 0 4
23662: NOT
23663: OR
23664: IFFALSE 23668
// exit ;
23666: GO 24008
// list := [ ] ;
23668: LD_ADDR_VAR 0 13
23672: PUSH
23673: EMPTY
23674: ST_TO_ADDR
// if x - r < 0 then
23675: LD_VAR 0 2
23679: PUSH
23680: LD_VAR 0 4
23684: MINUS
23685: PUSH
23686: LD_INT 0
23688: LESS
23689: IFFALSE 23701
// min_x := 0 else
23691: LD_ADDR_VAR 0 7
23695: PUSH
23696: LD_INT 0
23698: ST_TO_ADDR
23699: GO 23717
// min_x := x - r ;
23701: LD_ADDR_VAR 0 7
23705: PUSH
23706: LD_VAR 0 2
23710: PUSH
23711: LD_VAR 0 4
23715: MINUS
23716: ST_TO_ADDR
// if y - r < 0 then
23717: LD_VAR 0 3
23721: PUSH
23722: LD_VAR 0 4
23726: MINUS
23727: PUSH
23728: LD_INT 0
23730: LESS
23731: IFFALSE 23743
// min_y := 0 else
23733: LD_ADDR_VAR 0 8
23737: PUSH
23738: LD_INT 0
23740: ST_TO_ADDR
23741: GO 23759
// min_y := y - r ;
23743: LD_ADDR_VAR 0 8
23747: PUSH
23748: LD_VAR 0 3
23752: PUSH
23753: LD_VAR 0 4
23757: MINUS
23758: ST_TO_ADDR
// max_x := x + r ;
23759: LD_ADDR_VAR 0 9
23763: PUSH
23764: LD_VAR 0 2
23768: PUSH
23769: LD_VAR 0 4
23773: PLUS
23774: ST_TO_ADDR
// max_y := y + r ;
23775: LD_ADDR_VAR 0 10
23779: PUSH
23780: LD_VAR 0 3
23784: PUSH
23785: LD_VAR 0 4
23789: PLUS
23790: ST_TO_ADDR
// for _x = min_x to max_x do
23791: LD_ADDR_VAR 0 11
23795: PUSH
23796: DOUBLE
23797: LD_VAR 0 7
23801: DEC
23802: ST_TO_ADDR
23803: LD_VAR 0 9
23807: PUSH
23808: FOR_TO
23809: IFFALSE 23926
// for _y = min_y to max_y do
23811: LD_ADDR_VAR 0 12
23815: PUSH
23816: DOUBLE
23817: LD_VAR 0 8
23821: DEC
23822: ST_TO_ADDR
23823: LD_VAR 0 10
23827: PUSH
23828: FOR_TO
23829: IFFALSE 23922
// begin if not ValidHex ( _x , _y ) then
23831: LD_VAR 0 11
23835: PPUSH
23836: LD_VAR 0 12
23840: PPUSH
23841: CALL_OW 488
23845: NOT
23846: IFFALSE 23850
// continue ;
23848: GO 23828
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23850: LD_VAR 0 11
23854: PPUSH
23855: LD_VAR 0 12
23859: PPUSH
23860: CALL_OW 351
23864: PUSH
23865: LD_VAR 0 11
23869: PPUSH
23870: LD_VAR 0 12
23874: PPUSH
23875: CALL_OW 554
23879: AND
23880: IFFALSE 23920
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23882: LD_ADDR_VAR 0 13
23886: PUSH
23887: LD_VAR 0 13
23891: PPUSH
23892: LD_VAR 0 13
23896: PUSH
23897: LD_INT 1
23899: PLUS
23900: PPUSH
23901: LD_VAR 0 11
23905: PUSH
23906: LD_VAR 0 12
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PPUSH
23915: CALL_OW 2
23919: ST_TO_ADDR
// end ;
23920: GO 23828
23922: POP
23923: POP
23924: GO 23808
23926: POP
23927: POP
// if not list then
23928: LD_VAR 0 13
23932: NOT
23933: IFFALSE 23937
// exit ;
23935: GO 24008
// for i in list do
23937: LD_ADDR_VAR 0 6
23941: PUSH
23942: LD_VAR 0 13
23946: PUSH
23947: FOR_IN
23948: IFFALSE 24006
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23950: LD_VAR 0 1
23954: PPUSH
23955: LD_STRING M
23957: PUSH
23958: LD_VAR 0 6
23962: PUSH
23963: LD_INT 1
23965: ARRAY
23966: PUSH
23967: LD_VAR 0 6
23971: PUSH
23972: LD_INT 2
23974: ARRAY
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: LD_INT 0
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: PPUSH
24000: CALL_OW 447
24004: GO 23947
24006: POP
24007: POP
// end ;
24008: LD_VAR 0 5
24012: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24013: LD_EXP 97
24017: NOT
24018: IFFALSE 24068
24020: GO 24022
24022: DISABLE
// begin initHack := true ;
24023: LD_ADDR_EXP 97
24027: PUSH
24028: LD_INT 1
24030: ST_TO_ADDR
// hackTanks := [ ] ;
24031: LD_ADDR_EXP 98
24035: PUSH
24036: EMPTY
24037: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24038: LD_ADDR_EXP 99
24042: PUSH
24043: EMPTY
24044: ST_TO_ADDR
// hackLimit := 3 ;
24045: LD_ADDR_EXP 100
24049: PUSH
24050: LD_INT 3
24052: ST_TO_ADDR
// hackDist := 12 ;
24053: LD_ADDR_EXP 101
24057: PUSH
24058: LD_INT 12
24060: ST_TO_ADDR
// hackCounter := [ ] ;
24061: LD_ADDR_EXP 102
24065: PUSH
24066: EMPTY
24067: ST_TO_ADDR
// end ;
24068: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24069: LD_EXP 97
24073: PUSH
24074: LD_INT 34
24076: PUSH
24077: LD_EXP 20
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PPUSH
24086: CALL_OW 69
24090: AND
24091: IFFALSE 24346
24093: GO 24095
24095: DISABLE
24096: LD_INT 0
24098: PPUSH
24099: PPUSH
// begin enable ;
24100: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24101: LD_ADDR_VAR 0 1
24105: PUSH
24106: LD_INT 34
24108: PUSH
24109: LD_EXP 20
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PPUSH
24118: CALL_OW 69
24122: PUSH
24123: FOR_IN
24124: IFFALSE 24344
// begin if not i in hackTanks then
24126: LD_VAR 0 1
24130: PUSH
24131: LD_EXP 98
24135: IN
24136: NOT
24137: IFFALSE 24220
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24139: LD_ADDR_EXP 98
24143: PUSH
24144: LD_EXP 98
24148: PPUSH
24149: LD_EXP 98
24153: PUSH
24154: LD_INT 1
24156: PLUS
24157: PPUSH
24158: LD_VAR 0 1
24162: PPUSH
24163: CALL_OW 1
24167: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24168: LD_ADDR_EXP 99
24172: PUSH
24173: LD_EXP 99
24177: PPUSH
24178: LD_EXP 99
24182: PUSH
24183: LD_INT 1
24185: PLUS
24186: PPUSH
24187: EMPTY
24188: PPUSH
24189: CALL_OW 1
24193: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24194: LD_ADDR_EXP 102
24198: PUSH
24199: LD_EXP 102
24203: PPUSH
24204: LD_EXP 102
24208: PUSH
24209: LD_INT 1
24211: PLUS
24212: PPUSH
24213: EMPTY
24214: PPUSH
24215: CALL_OW 1
24219: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24220: LD_VAR 0 1
24224: PPUSH
24225: CALL_OW 302
24229: NOT
24230: IFFALSE 24243
// begin HackUnlinkAll ( i ) ;
24232: LD_VAR 0 1
24236: PPUSH
24237: CALL 24349 0 1
// continue ;
24241: GO 24123
// end ; HackCheckCapturedStatus ( i ) ;
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL 24792 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_INT 81
24259: PUSH
24260: LD_VAR 0 1
24264: PPUSH
24265: CALL_OW 255
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 33
24276: PUSH
24277: LD_INT 3
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 91
24286: PUSH
24287: LD_VAR 0 1
24291: PUSH
24292: LD_EXP 101
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 50
24304: PUSH
24305: EMPTY
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: PPUSH
24314: CALL_OW 69
24318: ST_TO_ADDR
// if not tmp then
24319: LD_VAR 0 2
24323: NOT
24324: IFFALSE 24328
// continue ;
24326: GO 24123
// HackLink ( i , tmp ) ;
24328: LD_VAR 0 1
24332: PPUSH
24333: LD_VAR 0 2
24337: PPUSH
24338: CALL 24485 0 2
// end ;
24342: GO 24123
24344: POP
24345: POP
// end ;
24346: PPOPN 2
24348: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24349: LD_INT 0
24351: PPUSH
24352: PPUSH
24353: PPUSH
// if not hack in hackTanks then
24354: LD_VAR 0 1
24358: PUSH
24359: LD_EXP 98
24363: IN
24364: NOT
24365: IFFALSE 24369
// exit ;
24367: GO 24480
// index := GetElementIndex ( hackTanks , hack ) ;
24369: LD_ADDR_VAR 0 4
24373: PUSH
24374: LD_EXP 98
24378: PPUSH
24379: LD_VAR 0 1
24383: PPUSH
24384: CALL 32107 0 2
24388: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24389: LD_EXP 99
24393: PUSH
24394: LD_VAR 0 4
24398: ARRAY
24399: IFFALSE 24480
// begin for i in hackTanksCaptured [ index ] do
24401: LD_ADDR_VAR 0 3
24405: PUSH
24406: LD_EXP 99
24410: PUSH
24411: LD_VAR 0 4
24415: ARRAY
24416: PUSH
24417: FOR_IN
24418: IFFALSE 24444
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24420: LD_VAR 0 3
24424: PUSH
24425: LD_INT 1
24427: ARRAY
24428: PPUSH
24429: LD_VAR 0 3
24433: PUSH
24434: LD_INT 2
24436: ARRAY
24437: PPUSH
24438: CALL_OW 235
24442: GO 24417
24444: POP
24445: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24446: LD_ADDR_EXP 99
24450: PUSH
24451: LD_EXP 99
24455: PPUSH
24456: LD_VAR 0 4
24460: PPUSH
24461: EMPTY
24462: PPUSH
24463: CALL_OW 1
24467: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24468: LD_VAR 0 1
24472: PPUSH
24473: LD_INT 0
24475: PPUSH
24476: CALL_OW 505
// end ; end ;
24480: LD_VAR 0 2
24484: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24485: LD_INT 0
24487: PPUSH
24488: PPUSH
24489: PPUSH
// if not hack in hackTanks or not vehicles then
24490: LD_VAR 0 1
24494: PUSH
24495: LD_EXP 98
24499: IN
24500: NOT
24501: PUSH
24502: LD_VAR 0 2
24506: NOT
24507: OR
24508: IFFALSE 24512
// exit ;
24510: GO 24787
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24512: LD_ADDR_VAR 0 2
24516: PUSH
24517: LD_VAR 0 1
24521: PPUSH
24522: LD_VAR 0 2
24526: PPUSH
24527: LD_INT 1
24529: PPUSH
24530: LD_INT 1
24532: PPUSH
24533: CALL 32757 0 4
24537: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24538: LD_ADDR_VAR 0 5
24542: PUSH
24543: LD_EXP 98
24547: PPUSH
24548: LD_VAR 0 1
24552: PPUSH
24553: CALL 32107 0 2
24557: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24558: LD_EXP 99
24562: PUSH
24563: LD_VAR 0 5
24567: ARRAY
24568: PUSH
24569: LD_EXP 100
24573: LESS
24574: IFFALSE 24763
// begin for i := 1 to vehicles do
24576: LD_ADDR_VAR 0 4
24580: PUSH
24581: DOUBLE
24582: LD_INT 1
24584: DEC
24585: ST_TO_ADDR
24586: LD_VAR 0 2
24590: PUSH
24591: FOR_TO
24592: IFFALSE 24761
// begin if hackTanksCaptured [ index ] = hackLimit then
24594: LD_EXP 99
24598: PUSH
24599: LD_VAR 0 5
24603: ARRAY
24604: PUSH
24605: LD_EXP 100
24609: EQUAL
24610: IFFALSE 24614
// break ;
24612: GO 24761
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24614: LD_ADDR_EXP 102
24618: PUSH
24619: LD_EXP 102
24623: PPUSH
24624: LD_VAR 0 5
24628: PPUSH
24629: LD_EXP 102
24633: PUSH
24634: LD_VAR 0 5
24638: ARRAY
24639: PUSH
24640: LD_INT 1
24642: PLUS
24643: PPUSH
24644: CALL_OW 1
24648: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24649: LD_ADDR_EXP 99
24653: PUSH
24654: LD_EXP 99
24658: PPUSH
24659: LD_VAR 0 5
24663: PUSH
24664: LD_EXP 99
24668: PUSH
24669: LD_VAR 0 5
24673: ARRAY
24674: PUSH
24675: LD_INT 1
24677: PLUS
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PPUSH
24683: LD_VAR 0 2
24687: PUSH
24688: LD_VAR 0 4
24692: ARRAY
24693: PUSH
24694: LD_VAR 0 2
24698: PUSH
24699: LD_VAR 0 4
24703: ARRAY
24704: PPUSH
24705: CALL_OW 255
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PPUSH
24714: CALL 32322 0 3
24718: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24719: LD_VAR 0 2
24723: PUSH
24724: LD_VAR 0 4
24728: ARRAY
24729: PPUSH
24730: LD_VAR 0 1
24734: PPUSH
24735: CALL_OW 255
24739: PPUSH
24740: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24744: LD_VAR 0 2
24748: PUSH
24749: LD_VAR 0 4
24753: ARRAY
24754: PPUSH
24755: CALL_OW 141
// end ;
24759: GO 24591
24761: POP
24762: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24763: LD_VAR 0 1
24767: PPUSH
24768: LD_EXP 99
24772: PUSH
24773: LD_VAR 0 5
24777: ARRAY
24778: PUSH
24779: LD_INT 0
24781: PLUS
24782: PPUSH
24783: CALL_OW 505
// end ;
24787: LD_VAR 0 3
24791: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24792: LD_INT 0
24794: PPUSH
24795: PPUSH
24796: PPUSH
24797: PPUSH
// if not hack in hackTanks then
24798: LD_VAR 0 1
24802: PUSH
24803: LD_EXP 98
24807: IN
24808: NOT
24809: IFFALSE 24813
// exit ;
24811: GO 25053
// index := GetElementIndex ( hackTanks , hack ) ;
24813: LD_ADDR_VAR 0 4
24817: PUSH
24818: LD_EXP 98
24822: PPUSH
24823: LD_VAR 0 1
24827: PPUSH
24828: CALL 32107 0 2
24832: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24833: LD_ADDR_VAR 0 3
24837: PUSH
24838: DOUBLE
24839: LD_EXP 99
24843: PUSH
24844: LD_VAR 0 4
24848: ARRAY
24849: INC
24850: ST_TO_ADDR
24851: LD_INT 1
24853: PUSH
24854: FOR_DOWNTO
24855: IFFALSE 25027
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24857: LD_ADDR_VAR 0 5
24861: PUSH
24862: LD_EXP 99
24866: PUSH
24867: LD_VAR 0 4
24871: ARRAY
24872: PUSH
24873: LD_VAR 0 3
24877: ARRAY
24878: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24879: LD_VAR 0 5
24883: PUSH
24884: LD_INT 1
24886: ARRAY
24887: PPUSH
24888: CALL_OW 302
24892: NOT
24893: PUSH
24894: LD_VAR 0 5
24898: PUSH
24899: LD_INT 1
24901: ARRAY
24902: PPUSH
24903: CALL_OW 255
24907: PUSH
24908: LD_VAR 0 1
24912: PPUSH
24913: CALL_OW 255
24917: NONEQUAL
24918: OR
24919: IFFALSE 25025
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24921: LD_VAR 0 5
24925: PUSH
24926: LD_INT 1
24928: ARRAY
24929: PPUSH
24930: CALL_OW 305
24934: PUSH
24935: LD_VAR 0 5
24939: PUSH
24940: LD_INT 1
24942: ARRAY
24943: PPUSH
24944: CALL_OW 255
24948: PUSH
24949: LD_VAR 0 1
24953: PPUSH
24954: CALL_OW 255
24958: EQUAL
24959: AND
24960: IFFALSE 24984
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24962: LD_VAR 0 5
24966: PUSH
24967: LD_INT 1
24969: ARRAY
24970: PPUSH
24971: LD_VAR 0 5
24975: PUSH
24976: LD_INT 2
24978: ARRAY
24979: PPUSH
24980: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24984: LD_ADDR_EXP 99
24988: PUSH
24989: LD_EXP 99
24993: PPUSH
24994: LD_VAR 0 4
24998: PPUSH
24999: LD_EXP 99
25003: PUSH
25004: LD_VAR 0 4
25008: ARRAY
25009: PPUSH
25010: LD_VAR 0 3
25014: PPUSH
25015: CALL_OW 3
25019: PPUSH
25020: CALL_OW 1
25024: ST_TO_ADDR
// end ; end ;
25025: GO 24854
25027: POP
25028: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25029: LD_VAR 0 1
25033: PPUSH
25034: LD_EXP 99
25038: PUSH
25039: LD_VAR 0 4
25043: ARRAY
25044: PUSH
25045: LD_INT 0
25047: PLUS
25048: PPUSH
25049: CALL_OW 505
// end ;
25053: LD_VAR 0 2
25057: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25058: LD_INT 0
25060: PPUSH
25061: PPUSH
25062: PPUSH
25063: PPUSH
// if not hack in hackTanks then
25064: LD_VAR 0 1
25068: PUSH
25069: LD_EXP 98
25073: IN
25074: NOT
25075: IFFALSE 25079
// exit ;
25077: GO 25164
// index := GetElementIndex ( hackTanks , hack ) ;
25079: LD_ADDR_VAR 0 5
25083: PUSH
25084: LD_EXP 98
25088: PPUSH
25089: LD_VAR 0 1
25093: PPUSH
25094: CALL 32107 0 2
25098: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25099: LD_ADDR_VAR 0 4
25103: PUSH
25104: DOUBLE
25105: LD_INT 1
25107: DEC
25108: ST_TO_ADDR
25109: LD_EXP 99
25113: PUSH
25114: LD_VAR 0 5
25118: ARRAY
25119: PUSH
25120: FOR_TO
25121: IFFALSE 25162
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25123: LD_EXP 99
25127: PUSH
25128: LD_VAR 0 5
25132: ARRAY
25133: PUSH
25134: LD_VAR 0 4
25138: ARRAY
25139: PUSH
25140: LD_INT 1
25142: ARRAY
25143: PUSH
25144: LD_VAR 0 2
25148: EQUAL
25149: IFFALSE 25160
// KillUnit ( vehicle ) ;
25151: LD_VAR 0 2
25155: PPUSH
25156: CALL_OW 66
25160: GO 25120
25162: POP
25163: POP
// end ;
25164: LD_VAR 0 3
25168: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25169: LD_EXP 103
25173: NOT
25174: IFFALSE 25209
25176: GO 25178
25178: DISABLE
// begin initMiner := true ;
25179: LD_ADDR_EXP 103
25183: PUSH
25184: LD_INT 1
25186: ST_TO_ADDR
// minersList := [ ] ;
25187: LD_ADDR_EXP 104
25191: PUSH
25192: EMPTY
25193: ST_TO_ADDR
// minerMinesList := [ ] ;
25194: LD_ADDR_EXP 105
25198: PUSH
25199: EMPTY
25200: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25201: LD_ADDR_EXP 106
25205: PUSH
25206: LD_INT 5
25208: ST_TO_ADDR
// end ;
25209: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25210: LD_EXP 103
25214: PUSH
25215: LD_INT 34
25217: PUSH
25218: LD_EXP 25
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PPUSH
25227: CALL_OW 69
25231: AND
25232: IFFALSE 25695
25234: GO 25236
25236: DISABLE
25237: LD_INT 0
25239: PPUSH
25240: PPUSH
25241: PPUSH
25242: PPUSH
// begin enable ;
25243: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25244: LD_ADDR_VAR 0 1
25248: PUSH
25249: LD_INT 34
25251: PUSH
25252: LD_EXP 25
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PPUSH
25261: CALL_OW 69
25265: PUSH
25266: FOR_IN
25267: IFFALSE 25339
// begin if not i in minersList then
25269: LD_VAR 0 1
25273: PUSH
25274: LD_EXP 104
25278: IN
25279: NOT
25280: IFFALSE 25337
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25282: LD_ADDR_EXP 104
25286: PUSH
25287: LD_EXP 104
25291: PPUSH
25292: LD_EXP 104
25296: PUSH
25297: LD_INT 1
25299: PLUS
25300: PPUSH
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 1
25310: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25311: LD_ADDR_EXP 105
25315: PUSH
25316: LD_EXP 105
25320: PPUSH
25321: LD_EXP 105
25325: PUSH
25326: LD_INT 1
25328: PLUS
25329: PPUSH
25330: EMPTY
25331: PPUSH
25332: CALL_OW 1
25336: ST_TO_ADDR
// end end ;
25337: GO 25266
25339: POP
25340: POP
// for i := minerMinesList downto 1 do
25341: LD_ADDR_VAR 0 1
25345: PUSH
25346: DOUBLE
25347: LD_EXP 105
25351: INC
25352: ST_TO_ADDR
25353: LD_INT 1
25355: PUSH
25356: FOR_DOWNTO
25357: IFFALSE 25693
// begin if IsLive ( minersList [ i ] ) then
25359: LD_EXP 104
25363: PUSH
25364: LD_VAR 0 1
25368: ARRAY
25369: PPUSH
25370: CALL_OW 300
25374: IFFALSE 25402
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25376: LD_EXP 104
25380: PUSH
25381: LD_VAR 0 1
25385: ARRAY
25386: PPUSH
25387: LD_EXP 105
25391: PUSH
25392: LD_VAR 0 1
25396: ARRAY
25397: PPUSH
25398: CALL_OW 505
// if not minerMinesList [ i ] then
25402: LD_EXP 105
25406: PUSH
25407: LD_VAR 0 1
25411: ARRAY
25412: NOT
25413: IFFALSE 25417
// continue ;
25415: GO 25356
// for j := minerMinesList [ i ] downto 1 do
25417: LD_ADDR_VAR 0 2
25421: PUSH
25422: DOUBLE
25423: LD_EXP 105
25427: PUSH
25428: LD_VAR 0 1
25432: ARRAY
25433: INC
25434: ST_TO_ADDR
25435: LD_INT 1
25437: PUSH
25438: FOR_DOWNTO
25439: IFFALSE 25689
// begin side := GetSide ( minersList [ i ] ) ;
25441: LD_ADDR_VAR 0 3
25445: PUSH
25446: LD_EXP 104
25450: PUSH
25451: LD_VAR 0 1
25455: ARRAY
25456: PPUSH
25457: CALL_OW 255
25461: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25462: LD_ADDR_VAR 0 4
25466: PUSH
25467: LD_EXP 105
25471: PUSH
25472: LD_VAR 0 1
25476: ARRAY
25477: PUSH
25478: LD_VAR 0 2
25482: ARRAY
25483: PUSH
25484: LD_INT 1
25486: ARRAY
25487: PPUSH
25488: LD_EXP 105
25492: PUSH
25493: LD_VAR 0 1
25497: ARRAY
25498: PUSH
25499: LD_VAR 0 2
25503: ARRAY
25504: PUSH
25505: LD_INT 2
25507: ARRAY
25508: PPUSH
25509: CALL_OW 428
25513: ST_TO_ADDR
// if not tmp then
25514: LD_VAR 0 4
25518: NOT
25519: IFFALSE 25523
// continue ;
25521: GO 25438
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25523: LD_VAR 0 4
25527: PUSH
25528: LD_INT 81
25530: PUSH
25531: LD_VAR 0 3
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PPUSH
25540: CALL_OW 69
25544: IN
25545: PUSH
25546: LD_EXP 105
25550: PUSH
25551: LD_VAR 0 1
25555: ARRAY
25556: PUSH
25557: LD_VAR 0 2
25561: ARRAY
25562: PUSH
25563: LD_INT 1
25565: ARRAY
25566: PPUSH
25567: LD_EXP 105
25571: PUSH
25572: LD_VAR 0 1
25576: ARRAY
25577: PUSH
25578: LD_VAR 0 2
25582: ARRAY
25583: PUSH
25584: LD_INT 2
25586: ARRAY
25587: PPUSH
25588: CALL_OW 458
25592: AND
25593: IFFALSE 25687
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25595: LD_EXP 105
25599: PUSH
25600: LD_VAR 0 1
25604: ARRAY
25605: PUSH
25606: LD_VAR 0 2
25610: ARRAY
25611: PUSH
25612: LD_INT 1
25614: ARRAY
25615: PPUSH
25616: LD_EXP 105
25620: PUSH
25621: LD_VAR 0 1
25625: ARRAY
25626: PUSH
25627: LD_VAR 0 2
25631: ARRAY
25632: PUSH
25633: LD_INT 2
25635: ARRAY
25636: PPUSH
25637: LD_VAR 0 3
25641: PPUSH
25642: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25646: LD_ADDR_EXP 105
25650: PUSH
25651: LD_EXP 105
25655: PPUSH
25656: LD_VAR 0 1
25660: PPUSH
25661: LD_EXP 105
25665: PUSH
25666: LD_VAR 0 1
25670: ARRAY
25671: PPUSH
25672: LD_VAR 0 2
25676: PPUSH
25677: CALL_OW 3
25681: PPUSH
25682: CALL_OW 1
25686: ST_TO_ADDR
// end ; end ;
25687: GO 25438
25689: POP
25690: POP
// end ;
25691: GO 25356
25693: POP
25694: POP
// end ;
25695: PPOPN 4
25697: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25698: LD_INT 0
25700: PPUSH
25701: PPUSH
// result := false ;
25702: LD_ADDR_VAR 0 4
25706: PUSH
25707: LD_INT 0
25709: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25710: LD_VAR 0 1
25714: PPUSH
25715: CALL_OW 264
25719: PUSH
25720: LD_EXP 25
25724: EQUAL
25725: NOT
25726: IFFALSE 25730
// exit ;
25728: GO 25970
// index := GetElementIndex ( minersList , unit ) ;
25730: LD_ADDR_VAR 0 5
25734: PUSH
25735: LD_EXP 104
25739: PPUSH
25740: LD_VAR 0 1
25744: PPUSH
25745: CALL 32107 0 2
25749: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25750: LD_EXP 105
25754: PUSH
25755: LD_VAR 0 5
25759: ARRAY
25760: PUSH
25761: LD_EXP 106
25765: GREATEREQUAL
25766: IFFALSE 25770
// exit ;
25768: GO 25970
// ComMoveXY ( unit , x , y ) ;
25770: LD_VAR 0 1
25774: PPUSH
25775: LD_VAR 0 2
25779: PPUSH
25780: LD_VAR 0 3
25784: PPUSH
25785: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25789: LD_INT 35
25791: PPUSH
25792: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25796: LD_VAR 0 1
25800: PPUSH
25801: LD_VAR 0 2
25805: PPUSH
25806: LD_VAR 0 3
25810: PPUSH
25811: CALL 63393 0 3
25815: NOT
25816: PUSH
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL_OW 314
25826: AND
25827: IFFALSE 25831
// exit ;
25829: GO 25970
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25831: LD_VAR 0 2
25835: PPUSH
25836: LD_VAR 0 3
25840: PPUSH
25841: CALL_OW 428
25845: PUSH
25846: LD_VAR 0 1
25850: EQUAL
25851: PUSH
25852: LD_VAR 0 1
25856: PPUSH
25857: CALL_OW 314
25861: NOT
25862: AND
25863: IFFALSE 25789
// PlaySoundXY ( x , y , PlantMine ) ;
25865: LD_VAR 0 2
25869: PPUSH
25870: LD_VAR 0 3
25874: PPUSH
25875: LD_STRING PlantMine
25877: PPUSH
25878: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25882: LD_VAR 0 2
25886: PPUSH
25887: LD_VAR 0 3
25891: PPUSH
25892: LD_VAR 0 1
25896: PPUSH
25897: CALL_OW 255
25901: PPUSH
25902: LD_INT 0
25904: PPUSH
25905: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25909: LD_ADDR_EXP 105
25913: PUSH
25914: LD_EXP 105
25918: PPUSH
25919: LD_VAR 0 5
25923: PUSH
25924: LD_EXP 105
25928: PUSH
25929: LD_VAR 0 5
25933: ARRAY
25934: PUSH
25935: LD_INT 1
25937: PLUS
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PPUSH
25943: LD_VAR 0 2
25947: PUSH
25948: LD_VAR 0 3
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PPUSH
25957: CALL 32322 0 3
25961: ST_TO_ADDR
// result := true ;
25962: LD_ADDR_VAR 0 4
25966: PUSH
25967: LD_INT 1
25969: ST_TO_ADDR
// end ;
25970: LD_VAR 0 4
25974: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25975: LD_INT 0
25977: PPUSH
25978: PPUSH
25979: PPUSH
// if not unit in minersList then
25980: LD_VAR 0 1
25984: PUSH
25985: LD_EXP 104
25989: IN
25990: NOT
25991: IFFALSE 25995
// exit ;
25993: GO 26387
// index := GetElementIndex ( minersList , unit ) ;
25995: LD_ADDR_VAR 0 6
25999: PUSH
26000: LD_EXP 104
26004: PPUSH
26005: LD_VAR 0 1
26009: PPUSH
26010: CALL 32107 0 2
26014: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26015: LD_ADDR_VAR 0 5
26019: PUSH
26020: DOUBLE
26021: LD_EXP 105
26025: PUSH
26026: LD_VAR 0 6
26030: ARRAY
26031: INC
26032: ST_TO_ADDR
26033: LD_INT 1
26035: PUSH
26036: FOR_DOWNTO
26037: IFFALSE 26198
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26039: LD_EXP 105
26043: PUSH
26044: LD_VAR 0 6
26048: ARRAY
26049: PUSH
26050: LD_VAR 0 5
26054: ARRAY
26055: PUSH
26056: LD_INT 1
26058: ARRAY
26059: PUSH
26060: LD_VAR 0 2
26064: EQUAL
26065: PUSH
26066: LD_EXP 105
26070: PUSH
26071: LD_VAR 0 6
26075: ARRAY
26076: PUSH
26077: LD_VAR 0 5
26081: ARRAY
26082: PUSH
26083: LD_INT 2
26085: ARRAY
26086: PUSH
26087: LD_VAR 0 3
26091: EQUAL
26092: AND
26093: IFFALSE 26196
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26095: LD_EXP 105
26099: PUSH
26100: LD_VAR 0 6
26104: ARRAY
26105: PUSH
26106: LD_VAR 0 5
26110: ARRAY
26111: PUSH
26112: LD_INT 1
26114: ARRAY
26115: PPUSH
26116: LD_EXP 105
26120: PUSH
26121: LD_VAR 0 6
26125: ARRAY
26126: PUSH
26127: LD_VAR 0 5
26131: ARRAY
26132: PUSH
26133: LD_INT 2
26135: ARRAY
26136: PPUSH
26137: LD_VAR 0 1
26141: PPUSH
26142: CALL_OW 255
26146: PPUSH
26147: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26151: LD_ADDR_EXP 105
26155: PUSH
26156: LD_EXP 105
26160: PPUSH
26161: LD_VAR 0 6
26165: PPUSH
26166: LD_EXP 105
26170: PUSH
26171: LD_VAR 0 6
26175: ARRAY
26176: PPUSH
26177: LD_VAR 0 5
26181: PPUSH
26182: CALL_OW 3
26186: PPUSH
26187: CALL_OW 1
26191: ST_TO_ADDR
// exit ;
26192: POP
26193: POP
26194: GO 26387
// end ; end ;
26196: GO 26036
26198: POP
26199: POP
// for i := minerMinesList [ index ] downto 1 do
26200: LD_ADDR_VAR 0 5
26204: PUSH
26205: DOUBLE
26206: LD_EXP 105
26210: PUSH
26211: LD_VAR 0 6
26215: ARRAY
26216: INC
26217: ST_TO_ADDR
26218: LD_INT 1
26220: PUSH
26221: FOR_DOWNTO
26222: IFFALSE 26385
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26224: LD_EXP 105
26228: PUSH
26229: LD_VAR 0 6
26233: ARRAY
26234: PUSH
26235: LD_VAR 0 5
26239: ARRAY
26240: PUSH
26241: LD_INT 1
26243: ARRAY
26244: PPUSH
26245: LD_EXP 105
26249: PUSH
26250: LD_VAR 0 6
26254: ARRAY
26255: PUSH
26256: LD_VAR 0 5
26260: ARRAY
26261: PUSH
26262: LD_INT 2
26264: ARRAY
26265: PPUSH
26266: LD_VAR 0 2
26270: PPUSH
26271: LD_VAR 0 3
26275: PPUSH
26276: CALL_OW 298
26280: PUSH
26281: LD_INT 6
26283: LESS
26284: IFFALSE 26383
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26286: LD_EXP 105
26290: PUSH
26291: LD_VAR 0 6
26295: ARRAY
26296: PUSH
26297: LD_VAR 0 5
26301: ARRAY
26302: PUSH
26303: LD_INT 1
26305: ARRAY
26306: PPUSH
26307: LD_EXP 105
26311: PUSH
26312: LD_VAR 0 6
26316: ARRAY
26317: PUSH
26318: LD_VAR 0 5
26322: ARRAY
26323: PUSH
26324: LD_INT 2
26326: ARRAY
26327: PPUSH
26328: LD_VAR 0 1
26332: PPUSH
26333: CALL_OW 255
26337: PPUSH
26338: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26342: LD_ADDR_EXP 105
26346: PUSH
26347: LD_EXP 105
26351: PPUSH
26352: LD_VAR 0 6
26356: PPUSH
26357: LD_EXP 105
26361: PUSH
26362: LD_VAR 0 6
26366: ARRAY
26367: PPUSH
26368: LD_VAR 0 5
26372: PPUSH
26373: CALL_OW 3
26377: PPUSH
26378: CALL_OW 1
26382: ST_TO_ADDR
// end ; end ;
26383: GO 26221
26385: POP
26386: POP
// end ;
26387: LD_VAR 0 4
26391: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26392: LD_INT 0
26394: PPUSH
26395: PPUSH
26396: PPUSH
26397: PPUSH
26398: PPUSH
26399: PPUSH
26400: PPUSH
26401: PPUSH
26402: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26403: LD_VAR 0 1
26407: PPUSH
26408: CALL_OW 264
26412: PUSH
26413: LD_EXP 25
26417: EQUAL
26418: NOT
26419: PUSH
26420: LD_VAR 0 1
26424: PUSH
26425: LD_EXP 104
26429: IN
26430: NOT
26431: OR
26432: IFFALSE 26436
// exit ;
26434: GO 26758
// index := GetElementIndex ( minersList , unit ) ;
26436: LD_ADDR_VAR 0 6
26440: PUSH
26441: LD_EXP 104
26445: PPUSH
26446: LD_VAR 0 1
26450: PPUSH
26451: CALL 32107 0 2
26455: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26456: LD_ADDR_VAR 0 8
26460: PUSH
26461: LD_EXP 106
26465: PUSH
26466: LD_EXP 105
26470: PUSH
26471: LD_VAR 0 6
26475: ARRAY
26476: MINUS
26477: ST_TO_ADDR
// if not minesFreeAmount then
26478: LD_VAR 0 8
26482: NOT
26483: IFFALSE 26487
// exit ;
26485: GO 26758
// tmp := [ ] ;
26487: LD_ADDR_VAR 0 7
26491: PUSH
26492: EMPTY
26493: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26494: LD_ADDR_VAR 0 5
26498: PUSH
26499: DOUBLE
26500: LD_INT 1
26502: DEC
26503: ST_TO_ADDR
26504: LD_VAR 0 8
26508: PUSH
26509: FOR_TO
26510: IFFALSE 26705
// begin _d := rand ( 0 , 5 ) ;
26512: LD_ADDR_VAR 0 11
26516: PUSH
26517: LD_INT 0
26519: PPUSH
26520: LD_INT 5
26522: PPUSH
26523: CALL_OW 12
26527: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26528: LD_ADDR_VAR 0 12
26532: PUSH
26533: LD_INT 2
26535: PPUSH
26536: LD_INT 6
26538: PPUSH
26539: CALL_OW 12
26543: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26544: LD_ADDR_VAR 0 9
26548: PUSH
26549: LD_VAR 0 2
26553: PPUSH
26554: LD_VAR 0 11
26558: PPUSH
26559: LD_VAR 0 12
26563: PPUSH
26564: CALL_OW 272
26568: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26569: LD_ADDR_VAR 0 10
26573: PUSH
26574: LD_VAR 0 3
26578: PPUSH
26579: LD_VAR 0 11
26583: PPUSH
26584: LD_VAR 0 12
26588: PPUSH
26589: CALL_OW 273
26593: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26594: LD_VAR 0 9
26598: PPUSH
26599: LD_VAR 0 10
26603: PPUSH
26604: CALL_OW 488
26608: PUSH
26609: LD_VAR 0 9
26613: PUSH
26614: LD_VAR 0 10
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_VAR 0 7
26627: IN
26628: NOT
26629: AND
26630: PUSH
26631: LD_VAR 0 9
26635: PPUSH
26636: LD_VAR 0 10
26640: PPUSH
26641: CALL_OW 458
26645: NOT
26646: AND
26647: IFFALSE 26689
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26649: LD_ADDR_VAR 0 7
26653: PUSH
26654: LD_VAR 0 7
26658: PPUSH
26659: LD_VAR 0 7
26663: PUSH
26664: LD_INT 1
26666: PLUS
26667: PPUSH
26668: LD_VAR 0 9
26672: PUSH
26673: LD_VAR 0 10
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 1
26686: ST_TO_ADDR
26687: GO 26703
// i := i - 1 ;
26689: LD_ADDR_VAR 0 5
26693: PUSH
26694: LD_VAR 0 5
26698: PUSH
26699: LD_INT 1
26701: MINUS
26702: ST_TO_ADDR
// end ;
26703: GO 26509
26705: POP
26706: POP
// for i in tmp do
26707: LD_ADDR_VAR 0 5
26711: PUSH
26712: LD_VAR 0 7
26716: PUSH
26717: FOR_IN
26718: IFFALSE 26756
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26720: LD_VAR 0 1
26724: PPUSH
26725: LD_VAR 0 5
26729: PUSH
26730: LD_INT 1
26732: ARRAY
26733: PPUSH
26734: LD_VAR 0 5
26738: PUSH
26739: LD_INT 2
26741: ARRAY
26742: PPUSH
26743: CALL 25698 0 3
26747: NOT
26748: IFFALSE 26754
// exit ;
26750: POP
26751: POP
26752: GO 26758
26754: GO 26717
26756: POP
26757: POP
// end ;
26758: LD_VAR 0 4
26762: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26763: LD_INT 0
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
26770: PPUSH
26771: PPUSH
// if not GetClass ( unit ) = class_sniper then
26772: LD_VAR 0 1
26776: PPUSH
26777: CALL_OW 257
26781: PUSH
26782: LD_INT 5
26784: EQUAL
26785: NOT
26786: IFFALSE 26790
// exit ;
26788: GO 27178
// dist := 8 ;
26790: LD_ADDR_VAR 0 5
26794: PUSH
26795: LD_INT 8
26797: ST_TO_ADDR
// viewRange := 12 ;
26798: LD_ADDR_VAR 0 7
26802: PUSH
26803: LD_INT 12
26805: ST_TO_ADDR
// side := GetSide ( unit ) ;
26806: LD_ADDR_VAR 0 6
26810: PUSH
26811: LD_VAR 0 1
26815: PPUSH
26816: CALL_OW 255
26820: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26821: LD_INT 61
26823: PPUSH
26824: LD_VAR 0 6
26828: PPUSH
26829: CALL_OW 321
26833: PUSH
26834: LD_INT 2
26836: EQUAL
26837: IFFALSE 26847
// viewRange := 16 ;
26839: LD_ADDR_VAR 0 7
26843: PUSH
26844: LD_INT 16
26846: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26847: LD_VAR 0 1
26851: PPUSH
26852: LD_VAR 0 2
26856: PPUSH
26857: LD_VAR 0 3
26861: PPUSH
26862: CALL_OW 297
26866: PUSH
26867: LD_VAR 0 5
26871: GREATER
26872: IFFALSE 26951
// begin ComMoveXY ( unit , x , y ) ;
26874: LD_VAR 0 1
26878: PPUSH
26879: LD_VAR 0 2
26883: PPUSH
26884: LD_VAR 0 3
26888: PPUSH
26889: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26893: LD_INT 35
26895: PPUSH
26896: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26900: LD_VAR 0 1
26904: PPUSH
26905: LD_VAR 0 2
26909: PPUSH
26910: LD_VAR 0 3
26914: PPUSH
26915: CALL 63393 0 3
26919: NOT
26920: IFFALSE 26924
// exit ;
26922: GO 27178
// until GetDistUnitXY ( unit , x , y ) < dist ;
26924: LD_VAR 0 1
26928: PPUSH
26929: LD_VAR 0 2
26933: PPUSH
26934: LD_VAR 0 3
26938: PPUSH
26939: CALL_OW 297
26943: PUSH
26944: LD_VAR 0 5
26948: LESS
26949: IFFALSE 26893
// end ; ComTurnXY ( unit , x , y ) ;
26951: LD_VAR 0 1
26955: PPUSH
26956: LD_VAR 0 2
26960: PPUSH
26961: LD_VAR 0 3
26965: PPUSH
26966: CALL_OW 118
// wait ( 5 ) ;
26970: LD_INT 5
26972: PPUSH
26973: CALL_OW 67
// _d := GetDir ( unit ) ;
26977: LD_ADDR_VAR 0 10
26981: PUSH
26982: LD_VAR 0 1
26986: PPUSH
26987: CALL_OW 254
26991: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26992: LD_ADDR_VAR 0 8
26996: PUSH
26997: LD_VAR 0 1
27001: PPUSH
27002: CALL_OW 250
27006: PPUSH
27007: LD_VAR 0 10
27011: PPUSH
27012: LD_VAR 0 5
27016: PPUSH
27017: CALL_OW 272
27021: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27022: LD_ADDR_VAR 0 9
27026: PUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 251
27036: PPUSH
27037: LD_VAR 0 10
27041: PPUSH
27042: LD_VAR 0 5
27046: PPUSH
27047: CALL_OW 273
27051: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27052: LD_VAR 0 8
27056: PPUSH
27057: LD_VAR 0 9
27061: PPUSH
27062: CALL_OW 488
27066: NOT
27067: IFFALSE 27071
// exit ;
27069: GO 27178
// ComAnimCustom ( unit , 1 ) ;
27071: LD_VAR 0 1
27075: PPUSH
27076: LD_INT 1
27078: PPUSH
27079: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27083: LD_VAR 0 8
27087: PPUSH
27088: LD_VAR 0 9
27092: PPUSH
27093: LD_VAR 0 6
27097: PPUSH
27098: LD_VAR 0 7
27102: PPUSH
27103: CALL_OW 330
// repeat wait ( 1 ) ;
27107: LD_INT 1
27109: PPUSH
27110: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27114: LD_VAR 0 1
27118: PPUSH
27119: CALL_OW 316
27123: PUSH
27124: LD_VAR 0 1
27128: PPUSH
27129: CALL_OW 314
27133: OR
27134: PUSH
27135: LD_VAR 0 1
27139: PPUSH
27140: CALL_OW 302
27144: NOT
27145: OR
27146: PUSH
27147: LD_VAR 0 1
27151: PPUSH
27152: CALL_OW 301
27156: OR
27157: IFFALSE 27107
// RemoveSeeing ( _x , _y , side ) ;
27159: LD_VAR 0 8
27163: PPUSH
27164: LD_VAR 0 9
27168: PPUSH
27169: LD_VAR 0 6
27173: PPUSH
27174: CALL_OW 331
// end ; end_of_file
27178: LD_VAR 0 4
27182: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27183: LD_INT 0
27185: PPUSH
27186: PPUSH
// if exist_mode then
27187: LD_VAR 0 2
27191: IFFALSE 27216
// unit := CreateCharacter ( prefix & ident ) else
27193: LD_ADDR_VAR 0 5
27197: PUSH
27198: LD_VAR 0 3
27202: PUSH
27203: LD_VAR 0 1
27207: STR
27208: PPUSH
27209: CALL_OW 34
27213: ST_TO_ADDR
27214: GO 27231
// unit := NewCharacter ( ident ) ;
27216: LD_ADDR_VAR 0 5
27220: PUSH
27221: LD_VAR 0 1
27225: PPUSH
27226: CALL_OW 25
27230: ST_TO_ADDR
// result := unit ;
27231: LD_ADDR_VAR 0 4
27235: PUSH
27236: LD_VAR 0 5
27240: ST_TO_ADDR
// end ;
27241: LD_VAR 0 4
27245: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27246: LD_INT 0
27248: PPUSH
27249: PPUSH
// if not side or not nation then
27250: LD_VAR 0 1
27254: NOT
27255: PUSH
27256: LD_VAR 0 2
27260: NOT
27261: OR
27262: IFFALSE 27266
// exit ;
27264: GO 28034
// case nation of nation_american :
27266: LD_VAR 0 2
27270: PUSH
27271: LD_INT 1
27273: DOUBLE
27274: EQUAL
27275: IFTRUE 27279
27277: GO 27493
27279: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27280: LD_ADDR_VAR 0 4
27284: PUSH
27285: LD_INT 35
27287: PUSH
27288: LD_INT 45
27290: PUSH
27291: LD_INT 46
27293: PUSH
27294: LD_INT 47
27296: PUSH
27297: LD_INT 82
27299: PUSH
27300: LD_INT 83
27302: PUSH
27303: LD_INT 84
27305: PUSH
27306: LD_INT 85
27308: PUSH
27309: LD_INT 86
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: LD_INT 6
27320: PUSH
27321: LD_INT 15
27323: PUSH
27324: LD_INT 16
27326: PUSH
27327: LD_INT 7
27329: PUSH
27330: LD_INT 12
27332: PUSH
27333: LD_INT 13
27335: PUSH
27336: LD_INT 10
27338: PUSH
27339: LD_INT 14
27341: PUSH
27342: LD_INT 20
27344: PUSH
27345: LD_INT 21
27347: PUSH
27348: LD_INT 22
27350: PUSH
27351: LD_INT 25
27353: PUSH
27354: LD_INT 32
27356: PUSH
27357: LD_INT 27
27359: PUSH
27360: LD_INT 36
27362: PUSH
27363: LD_INT 69
27365: PUSH
27366: LD_INT 39
27368: PUSH
27369: LD_INT 34
27371: PUSH
27372: LD_INT 40
27374: PUSH
27375: LD_INT 48
27377: PUSH
27378: LD_INT 49
27380: PUSH
27381: LD_INT 50
27383: PUSH
27384: LD_INT 51
27386: PUSH
27387: LD_INT 52
27389: PUSH
27390: LD_INT 53
27392: PUSH
27393: LD_INT 54
27395: PUSH
27396: LD_INT 55
27398: PUSH
27399: LD_INT 56
27401: PUSH
27402: LD_INT 57
27404: PUSH
27405: LD_INT 58
27407: PUSH
27408: LD_INT 59
27410: PUSH
27411: LD_INT 60
27413: PUSH
27414: LD_INT 61
27416: PUSH
27417: LD_INT 62
27419: PUSH
27420: LD_INT 80
27422: PUSH
27423: LD_INT 82
27425: PUSH
27426: LD_INT 83
27428: PUSH
27429: LD_INT 84
27431: PUSH
27432: LD_INT 85
27434: PUSH
27435: LD_INT 86
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: ST_TO_ADDR
27491: GO 27958
27493: LD_INT 2
27495: DOUBLE
27496: EQUAL
27497: IFTRUE 27501
27499: GO 27727
27501: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27502: LD_ADDR_VAR 0 4
27506: PUSH
27507: LD_INT 35
27509: PUSH
27510: LD_INT 45
27512: PUSH
27513: LD_INT 46
27515: PUSH
27516: LD_INT 47
27518: PUSH
27519: LD_INT 82
27521: PUSH
27522: LD_INT 83
27524: PUSH
27525: LD_INT 84
27527: PUSH
27528: LD_INT 85
27530: PUSH
27531: LD_INT 87
27533: PUSH
27534: LD_INT 70
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 11
27542: PUSH
27543: LD_INT 3
27545: PUSH
27546: LD_INT 4
27548: PUSH
27549: LD_INT 5
27551: PUSH
27552: LD_INT 6
27554: PUSH
27555: LD_INT 15
27557: PUSH
27558: LD_INT 18
27560: PUSH
27561: LD_INT 7
27563: PUSH
27564: LD_INT 17
27566: PUSH
27567: LD_INT 8
27569: PUSH
27570: LD_INT 20
27572: PUSH
27573: LD_INT 21
27575: PUSH
27576: LD_INT 22
27578: PUSH
27579: LD_INT 72
27581: PUSH
27582: LD_INT 26
27584: PUSH
27585: LD_INT 69
27587: PUSH
27588: LD_INT 39
27590: PUSH
27591: LD_INT 40
27593: PUSH
27594: LD_INT 41
27596: PUSH
27597: LD_INT 42
27599: PUSH
27600: LD_INT 43
27602: PUSH
27603: LD_INT 48
27605: PUSH
27606: LD_INT 49
27608: PUSH
27609: LD_INT 50
27611: PUSH
27612: LD_INT 51
27614: PUSH
27615: LD_INT 52
27617: PUSH
27618: LD_INT 53
27620: PUSH
27621: LD_INT 54
27623: PUSH
27624: LD_INT 55
27626: PUSH
27627: LD_INT 56
27629: PUSH
27630: LD_INT 60
27632: PUSH
27633: LD_INT 61
27635: PUSH
27636: LD_INT 62
27638: PUSH
27639: LD_INT 66
27641: PUSH
27642: LD_INT 67
27644: PUSH
27645: LD_INT 68
27647: PUSH
27648: LD_INT 81
27650: PUSH
27651: LD_INT 82
27653: PUSH
27654: LD_INT 83
27656: PUSH
27657: LD_INT 84
27659: PUSH
27660: LD_INT 85
27662: PUSH
27663: LD_INT 87
27665: PUSH
27666: LD_INT 88
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: ST_TO_ADDR
27725: GO 27958
27727: LD_INT 3
27729: DOUBLE
27730: EQUAL
27731: IFTRUE 27735
27733: GO 27957
27735: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27736: LD_ADDR_VAR 0 4
27740: PUSH
27741: LD_INT 46
27743: PUSH
27744: LD_INT 47
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: LD_INT 2
27752: PUSH
27753: LD_INT 82
27755: PUSH
27756: LD_INT 83
27758: PUSH
27759: LD_INT 84
27761: PUSH
27762: LD_INT 85
27764: PUSH
27765: LD_INT 86
27767: PUSH
27768: LD_INT 11
27770: PUSH
27771: LD_INT 9
27773: PUSH
27774: LD_INT 20
27776: PUSH
27777: LD_INT 19
27779: PUSH
27780: LD_INT 21
27782: PUSH
27783: LD_INT 24
27785: PUSH
27786: LD_INT 22
27788: PUSH
27789: LD_INT 25
27791: PUSH
27792: LD_INT 28
27794: PUSH
27795: LD_INT 29
27797: PUSH
27798: LD_INT 30
27800: PUSH
27801: LD_INT 31
27803: PUSH
27804: LD_INT 37
27806: PUSH
27807: LD_INT 38
27809: PUSH
27810: LD_INT 32
27812: PUSH
27813: LD_INT 27
27815: PUSH
27816: LD_INT 33
27818: PUSH
27819: LD_INT 69
27821: PUSH
27822: LD_INT 39
27824: PUSH
27825: LD_INT 34
27827: PUSH
27828: LD_INT 40
27830: PUSH
27831: LD_INT 71
27833: PUSH
27834: LD_INT 23
27836: PUSH
27837: LD_INT 44
27839: PUSH
27840: LD_INT 48
27842: PUSH
27843: LD_INT 49
27845: PUSH
27846: LD_INT 50
27848: PUSH
27849: LD_INT 51
27851: PUSH
27852: LD_INT 52
27854: PUSH
27855: LD_INT 53
27857: PUSH
27858: LD_INT 54
27860: PUSH
27861: LD_INT 55
27863: PUSH
27864: LD_INT 56
27866: PUSH
27867: LD_INT 57
27869: PUSH
27870: LD_INT 58
27872: PUSH
27873: LD_INT 59
27875: PUSH
27876: LD_INT 63
27878: PUSH
27879: LD_INT 64
27881: PUSH
27882: LD_INT 65
27884: PUSH
27885: LD_INT 82
27887: PUSH
27888: LD_INT 83
27890: PUSH
27891: LD_INT 84
27893: PUSH
27894: LD_INT 85
27896: PUSH
27897: LD_INT 86
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: ST_TO_ADDR
27955: GO 27958
27957: POP
// if state > - 1 and state < 3 then
27958: LD_VAR 0 3
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: GREATER
27967: PUSH
27968: LD_VAR 0 3
27972: PUSH
27973: LD_INT 3
27975: LESS
27976: AND
27977: IFFALSE 28034
// for i in result do
27979: LD_ADDR_VAR 0 5
27983: PUSH
27984: LD_VAR 0 4
27988: PUSH
27989: FOR_IN
27990: IFFALSE 28032
// if GetTech ( i , side ) <> state then
27992: LD_VAR 0 5
27996: PPUSH
27997: LD_VAR 0 1
28001: PPUSH
28002: CALL_OW 321
28006: PUSH
28007: LD_VAR 0 3
28011: NONEQUAL
28012: IFFALSE 28030
// result := result diff i ;
28014: LD_ADDR_VAR 0 4
28018: PUSH
28019: LD_VAR 0 4
28023: PUSH
28024: LD_VAR 0 5
28028: DIFF
28029: ST_TO_ADDR
28030: GO 27989
28032: POP
28033: POP
// end ;
28034: LD_VAR 0 4
28038: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28039: LD_INT 0
28041: PPUSH
28042: PPUSH
28043: PPUSH
// result := true ;
28044: LD_ADDR_VAR 0 3
28048: PUSH
28049: LD_INT 1
28051: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28052: LD_ADDR_VAR 0 5
28056: PUSH
28057: LD_VAR 0 2
28061: PPUSH
28062: CALL_OW 480
28066: ST_TO_ADDR
// if not tmp then
28067: LD_VAR 0 5
28071: NOT
28072: IFFALSE 28076
// exit ;
28074: GO 28125
// for i in tmp do
28076: LD_ADDR_VAR 0 4
28080: PUSH
28081: LD_VAR 0 5
28085: PUSH
28086: FOR_IN
28087: IFFALSE 28123
// if GetTech ( i , side ) <> state_researched then
28089: LD_VAR 0 4
28093: PPUSH
28094: LD_VAR 0 1
28098: PPUSH
28099: CALL_OW 321
28103: PUSH
28104: LD_INT 2
28106: NONEQUAL
28107: IFFALSE 28121
// begin result := false ;
28109: LD_ADDR_VAR 0 3
28113: PUSH
28114: LD_INT 0
28116: ST_TO_ADDR
// exit ;
28117: POP
28118: POP
28119: GO 28125
// end ;
28121: GO 28086
28123: POP
28124: POP
// end ;
28125: LD_VAR 0 3
28129: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28130: LD_INT 0
28132: PPUSH
28133: PPUSH
28134: PPUSH
28135: PPUSH
28136: PPUSH
28137: PPUSH
28138: PPUSH
28139: PPUSH
28140: PPUSH
28141: PPUSH
28142: PPUSH
28143: PPUSH
28144: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28145: LD_VAR 0 1
28149: NOT
28150: PUSH
28151: LD_VAR 0 1
28155: PPUSH
28156: CALL_OW 257
28160: PUSH
28161: LD_INT 9
28163: NONEQUAL
28164: OR
28165: IFFALSE 28169
// exit ;
28167: GO 28742
// side := GetSide ( unit ) ;
28169: LD_ADDR_VAR 0 9
28173: PUSH
28174: LD_VAR 0 1
28178: PPUSH
28179: CALL_OW 255
28183: ST_TO_ADDR
// tech_space := tech_spacanom ;
28184: LD_ADDR_VAR 0 12
28188: PUSH
28189: LD_INT 29
28191: ST_TO_ADDR
// tech_time := tech_taurad ;
28192: LD_ADDR_VAR 0 13
28196: PUSH
28197: LD_INT 28
28199: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28200: LD_ADDR_VAR 0 11
28204: PUSH
28205: LD_VAR 0 1
28209: PPUSH
28210: CALL_OW 310
28214: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28215: LD_VAR 0 11
28219: PPUSH
28220: CALL_OW 247
28224: PUSH
28225: LD_INT 2
28227: EQUAL
28228: IFFALSE 28232
// exit ;
28230: GO 28742
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28232: LD_ADDR_VAR 0 8
28236: PUSH
28237: LD_INT 81
28239: PUSH
28240: LD_VAR 0 9
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 3
28251: PUSH
28252: LD_INT 21
28254: PUSH
28255: LD_INT 3
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PPUSH
28270: CALL_OW 69
28274: ST_TO_ADDR
// if not tmp then
28275: LD_VAR 0 8
28279: NOT
28280: IFFALSE 28284
// exit ;
28282: GO 28742
// if in_unit then
28284: LD_VAR 0 11
28288: IFFALSE 28312
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28290: LD_ADDR_VAR 0 10
28294: PUSH
28295: LD_VAR 0 8
28299: PPUSH
28300: LD_VAR 0 11
28304: PPUSH
28305: CALL_OW 74
28309: ST_TO_ADDR
28310: GO 28332
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28312: LD_ADDR_VAR 0 10
28316: PUSH
28317: LD_VAR 0 8
28321: PPUSH
28322: LD_VAR 0 1
28326: PPUSH
28327: CALL_OW 74
28331: ST_TO_ADDR
// if not enemy then
28332: LD_VAR 0 10
28336: NOT
28337: IFFALSE 28341
// exit ;
28339: GO 28742
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28341: LD_VAR 0 11
28345: PUSH
28346: LD_VAR 0 11
28350: PPUSH
28351: LD_VAR 0 10
28355: PPUSH
28356: CALL_OW 296
28360: PUSH
28361: LD_INT 13
28363: GREATER
28364: AND
28365: PUSH
28366: LD_VAR 0 1
28370: PPUSH
28371: LD_VAR 0 10
28375: PPUSH
28376: CALL_OW 296
28380: PUSH
28381: LD_INT 12
28383: GREATER
28384: OR
28385: IFFALSE 28389
// exit ;
28387: GO 28742
// missile := [ 1 ] ;
28389: LD_ADDR_VAR 0 14
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: EMPTY
28398: LIST
28399: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28400: LD_VAR 0 9
28404: PPUSH
28405: LD_VAR 0 12
28409: PPUSH
28410: CALL_OW 325
28414: IFFALSE 28443
// missile := Replace ( missile , missile + 1 , 2 ) ;
28416: LD_ADDR_VAR 0 14
28420: PUSH
28421: LD_VAR 0 14
28425: PPUSH
28426: LD_VAR 0 14
28430: PUSH
28431: LD_INT 1
28433: PLUS
28434: PPUSH
28435: LD_INT 2
28437: PPUSH
28438: CALL_OW 1
28442: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28443: LD_VAR 0 9
28447: PPUSH
28448: LD_VAR 0 13
28452: PPUSH
28453: CALL_OW 325
28457: PUSH
28458: LD_VAR 0 10
28462: PPUSH
28463: CALL_OW 255
28467: PPUSH
28468: LD_VAR 0 13
28472: PPUSH
28473: CALL_OW 325
28477: NOT
28478: AND
28479: IFFALSE 28508
// missile := Replace ( missile , missile + 1 , 3 ) ;
28481: LD_ADDR_VAR 0 14
28485: PUSH
28486: LD_VAR 0 14
28490: PPUSH
28491: LD_VAR 0 14
28495: PUSH
28496: LD_INT 1
28498: PLUS
28499: PPUSH
28500: LD_INT 3
28502: PPUSH
28503: CALL_OW 1
28507: ST_TO_ADDR
// if missile < 2 then
28508: LD_VAR 0 14
28512: PUSH
28513: LD_INT 2
28515: LESS
28516: IFFALSE 28520
// exit ;
28518: GO 28742
// x := GetX ( enemy ) ;
28520: LD_ADDR_VAR 0 4
28524: PUSH
28525: LD_VAR 0 10
28529: PPUSH
28530: CALL_OW 250
28534: ST_TO_ADDR
// y := GetY ( enemy ) ;
28535: LD_ADDR_VAR 0 5
28539: PUSH
28540: LD_VAR 0 10
28544: PPUSH
28545: CALL_OW 251
28549: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28550: LD_ADDR_VAR 0 6
28554: PUSH
28555: LD_VAR 0 4
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PPUSH
28564: LD_INT 1
28566: PPUSH
28567: CALL_OW 12
28571: PLUS
28572: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28573: LD_ADDR_VAR 0 7
28577: PUSH
28578: LD_VAR 0 5
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PPUSH
28587: LD_INT 1
28589: PPUSH
28590: CALL_OW 12
28594: PLUS
28595: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28596: LD_VAR 0 6
28600: PPUSH
28601: LD_VAR 0 7
28605: PPUSH
28606: CALL_OW 488
28610: NOT
28611: IFFALSE 28633
// begin _x := x ;
28613: LD_ADDR_VAR 0 6
28617: PUSH
28618: LD_VAR 0 4
28622: ST_TO_ADDR
// _y := y ;
28623: LD_ADDR_VAR 0 7
28627: PUSH
28628: LD_VAR 0 5
28632: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28633: LD_ADDR_VAR 0 3
28637: PUSH
28638: LD_INT 1
28640: PPUSH
28641: LD_VAR 0 14
28645: PPUSH
28646: CALL_OW 12
28650: ST_TO_ADDR
// case i of 1 :
28651: LD_VAR 0 3
28655: PUSH
28656: LD_INT 1
28658: DOUBLE
28659: EQUAL
28660: IFTRUE 28664
28662: GO 28681
28664: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28665: LD_VAR 0 1
28669: PPUSH
28670: LD_VAR 0 10
28674: PPUSH
28675: CALL_OW 115
28679: GO 28742
28681: LD_INT 2
28683: DOUBLE
28684: EQUAL
28685: IFTRUE 28689
28687: GO 28711
28689: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28690: LD_VAR 0 1
28694: PPUSH
28695: LD_VAR 0 6
28699: PPUSH
28700: LD_VAR 0 7
28704: PPUSH
28705: CALL_OW 153
28709: GO 28742
28711: LD_INT 3
28713: DOUBLE
28714: EQUAL
28715: IFTRUE 28719
28717: GO 28741
28719: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28720: LD_VAR 0 1
28724: PPUSH
28725: LD_VAR 0 6
28729: PPUSH
28730: LD_VAR 0 7
28734: PPUSH
28735: CALL_OW 154
28739: GO 28742
28741: POP
// end ;
28742: LD_VAR 0 2
28746: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28747: LD_INT 0
28749: PPUSH
28750: PPUSH
28751: PPUSH
28752: PPUSH
28753: PPUSH
28754: PPUSH
// if not unit or not building then
28755: LD_VAR 0 1
28759: NOT
28760: PUSH
28761: LD_VAR 0 2
28765: NOT
28766: OR
28767: IFFALSE 28771
// exit ;
28769: GO 28929
// x := GetX ( building ) ;
28771: LD_ADDR_VAR 0 5
28775: PUSH
28776: LD_VAR 0 2
28780: PPUSH
28781: CALL_OW 250
28785: ST_TO_ADDR
// y := GetY ( building ) ;
28786: LD_ADDR_VAR 0 6
28790: PUSH
28791: LD_VAR 0 2
28795: PPUSH
28796: CALL_OW 251
28800: ST_TO_ADDR
// for i = 0 to 5 do
28801: LD_ADDR_VAR 0 4
28805: PUSH
28806: DOUBLE
28807: LD_INT 0
28809: DEC
28810: ST_TO_ADDR
28811: LD_INT 5
28813: PUSH
28814: FOR_TO
28815: IFFALSE 28927
// begin _x := ShiftX ( x , i , 3 ) ;
28817: LD_ADDR_VAR 0 7
28821: PUSH
28822: LD_VAR 0 5
28826: PPUSH
28827: LD_VAR 0 4
28831: PPUSH
28832: LD_INT 3
28834: PPUSH
28835: CALL_OW 272
28839: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28840: LD_ADDR_VAR 0 8
28844: PUSH
28845: LD_VAR 0 6
28849: PPUSH
28850: LD_VAR 0 4
28854: PPUSH
28855: LD_INT 3
28857: PPUSH
28858: CALL_OW 273
28862: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28863: LD_VAR 0 7
28867: PPUSH
28868: LD_VAR 0 8
28872: PPUSH
28873: CALL_OW 488
28877: NOT
28878: IFFALSE 28882
// continue ;
28880: GO 28814
// if HexInfo ( _x , _y ) = 0 then
28882: LD_VAR 0 7
28886: PPUSH
28887: LD_VAR 0 8
28891: PPUSH
28892: CALL_OW 428
28896: PUSH
28897: LD_INT 0
28899: EQUAL
28900: IFFALSE 28925
// begin ComMoveXY ( unit , _x , _y ) ;
28902: LD_VAR 0 1
28906: PPUSH
28907: LD_VAR 0 7
28911: PPUSH
28912: LD_VAR 0 8
28916: PPUSH
28917: CALL_OW 111
// exit ;
28921: POP
28922: POP
28923: GO 28929
// end ; end ;
28925: GO 28814
28927: POP
28928: POP
// end ;
28929: LD_VAR 0 3
28933: RET
// export function ScanBase ( side , base_area ) ; begin
28934: LD_INT 0
28936: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28937: LD_ADDR_VAR 0 3
28941: PUSH
28942: LD_VAR 0 2
28946: PPUSH
28947: LD_INT 81
28949: PUSH
28950: LD_VAR 0 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PPUSH
28959: CALL_OW 70
28963: ST_TO_ADDR
// end ;
28964: LD_VAR 0 3
28968: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28969: LD_INT 0
28971: PPUSH
28972: PPUSH
28973: PPUSH
28974: PPUSH
// result := false ;
28975: LD_ADDR_VAR 0 2
28979: PUSH
28980: LD_INT 0
28982: ST_TO_ADDR
// side := GetSide ( unit ) ;
28983: LD_ADDR_VAR 0 3
28987: PUSH
28988: LD_VAR 0 1
28992: PPUSH
28993: CALL_OW 255
28997: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28998: LD_ADDR_VAR 0 4
29002: PUSH
29003: LD_VAR 0 1
29007: PPUSH
29008: CALL_OW 248
29012: ST_TO_ADDR
// case nat of 1 :
29013: LD_VAR 0 4
29017: PUSH
29018: LD_INT 1
29020: DOUBLE
29021: EQUAL
29022: IFTRUE 29026
29024: GO 29037
29026: POP
// tech := tech_lassight ; 2 :
29027: LD_ADDR_VAR 0 5
29031: PUSH
29032: LD_INT 12
29034: ST_TO_ADDR
29035: GO 29076
29037: LD_INT 2
29039: DOUBLE
29040: EQUAL
29041: IFTRUE 29045
29043: GO 29056
29045: POP
// tech := tech_mortar ; 3 :
29046: LD_ADDR_VAR 0 5
29050: PUSH
29051: LD_INT 41
29053: ST_TO_ADDR
29054: GO 29076
29056: LD_INT 3
29058: DOUBLE
29059: EQUAL
29060: IFTRUE 29064
29062: GO 29075
29064: POP
// tech := tech_bazooka ; end ;
29065: LD_ADDR_VAR 0 5
29069: PUSH
29070: LD_INT 44
29072: ST_TO_ADDR
29073: GO 29076
29075: POP
// if Researched ( side , tech ) then
29076: LD_VAR 0 3
29080: PPUSH
29081: LD_VAR 0 5
29085: PPUSH
29086: CALL_OW 325
29090: IFFALSE 29117
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29092: LD_ADDR_VAR 0 2
29096: PUSH
29097: LD_INT 5
29099: PUSH
29100: LD_INT 8
29102: PUSH
29103: LD_INT 9
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: PUSH
29111: LD_VAR 0 4
29115: ARRAY
29116: ST_TO_ADDR
// end ;
29117: LD_VAR 0 2
29121: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29122: LD_INT 0
29124: PPUSH
29125: PPUSH
29126: PPUSH
// if not mines then
29127: LD_VAR 0 2
29131: NOT
29132: IFFALSE 29136
// exit ;
29134: GO 29280
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29136: LD_ADDR_VAR 0 5
29140: PUSH
29141: LD_INT 81
29143: PUSH
29144: LD_VAR 0 1
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 3
29155: PUSH
29156: LD_INT 21
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PPUSH
29174: CALL_OW 69
29178: ST_TO_ADDR
// for i in mines do
29179: LD_ADDR_VAR 0 4
29183: PUSH
29184: LD_VAR 0 2
29188: PUSH
29189: FOR_IN
29190: IFFALSE 29278
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29192: LD_VAR 0 4
29196: PUSH
29197: LD_INT 1
29199: ARRAY
29200: PPUSH
29201: LD_VAR 0 4
29205: PUSH
29206: LD_INT 2
29208: ARRAY
29209: PPUSH
29210: CALL_OW 458
29214: NOT
29215: IFFALSE 29219
// continue ;
29217: GO 29189
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29219: LD_VAR 0 4
29223: PUSH
29224: LD_INT 1
29226: ARRAY
29227: PPUSH
29228: LD_VAR 0 4
29232: PUSH
29233: LD_INT 2
29235: ARRAY
29236: PPUSH
29237: CALL_OW 428
29241: PUSH
29242: LD_VAR 0 5
29246: IN
29247: IFFALSE 29276
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29249: LD_VAR 0 4
29253: PUSH
29254: LD_INT 1
29256: ARRAY
29257: PPUSH
29258: LD_VAR 0 4
29262: PUSH
29263: LD_INT 2
29265: ARRAY
29266: PPUSH
29267: LD_VAR 0 1
29271: PPUSH
29272: CALL_OW 456
// end ;
29276: GO 29189
29278: POP
29279: POP
// end ;
29280: LD_VAR 0 3
29284: RET
// export function Count ( array ) ; var i ; begin
29285: LD_INT 0
29287: PPUSH
29288: PPUSH
// result := 0 ;
29289: LD_ADDR_VAR 0 2
29293: PUSH
29294: LD_INT 0
29296: ST_TO_ADDR
// for i in array do
29297: LD_ADDR_VAR 0 3
29301: PUSH
29302: LD_VAR 0 1
29306: PUSH
29307: FOR_IN
29308: IFFALSE 29332
// if i then
29310: LD_VAR 0 3
29314: IFFALSE 29330
// result := result + 1 ;
29316: LD_ADDR_VAR 0 2
29320: PUSH
29321: LD_VAR 0 2
29325: PUSH
29326: LD_INT 1
29328: PLUS
29329: ST_TO_ADDR
29330: GO 29307
29332: POP
29333: POP
// end ;
29334: LD_VAR 0 2
29338: RET
// export function IsEmpty ( building ) ; begin
29339: LD_INT 0
29341: PPUSH
// if not building then
29342: LD_VAR 0 1
29346: NOT
29347: IFFALSE 29351
// exit ;
29349: GO 29394
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29351: LD_ADDR_VAR 0 2
29355: PUSH
29356: LD_VAR 0 1
29360: PUSH
29361: LD_INT 22
29363: PUSH
29364: LD_VAR 0 1
29368: PPUSH
29369: CALL_OW 255
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 58
29380: PUSH
29381: EMPTY
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PPUSH
29388: CALL_OW 69
29392: IN
29393: ST_TO_ADDR
// end ;
29394: LD_VAR 0 2
29398: RET
// export function IsNotFull ( building ) ; var places ; begin
29399: LD_INT 0
29401: PPUSH
29402: PPUSH
// if not building then
29403: LD_VAR 0 1
29407: NOT
29408: IFFALSE 29412
// exit ;
29410: GO 29583
// result := false ;
29412: LD_ADDR_VAR 0 2
29416: PUSH
29417: LD_INT 0
29419: ST_TO_ADDR
// places := 0 ;
29420: LD_ADDR_VAR 0 3
29424: PUSH
29425: LD_INT 0
29427: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 266
29437: PUSH
29438: LD_INT 0
29440: DOUBLE
29441: EQUAL
29442: IFTRUE 29500
29444: LD_INT 1
29446: DOUBLE
29447: EQUAL
29448: IFTRUE 29500
29450: LD_INT 6
29452: DOUBLE
29453: EQUAL
29454: IFTRUE 29500
29456: LD_INT 7
29458: DOUBLE
29459: EQUAL
29460: IFTRUE 29500
29462: LD_INT 8
29464: DOUBLE
29465: EQUAL
29466: IFTRUE 29500
29468: LD_INT 4
29470: DOUBLE
29471: EQUAL
29472: IFTRUE 29500
29474: LD_INT 5
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29500
29480: LD_INT 2
29482: DOUBLE
29483: EQUAL
29484: IFTRUE 29500
29486: LD_INT 3
29488: DOUBLE
29489: EQUAL
29490: IFTRUE 29500
29492: LD_INT 35
29494: DOUBLE
29495: EQUAL
29496: IFTRUE 29500
29498: GO 29511
29500: POP
// places := 6 ; b_bunker , b_breastwork :
29501: LD_ADDR_VAR 0 3
29505: PUSH
29506: LD_INT 6
29508: ST_TO_ADDR
29509: GO 29556
29511: LD_INT 32
29513: DOUBLE
29514: EQUAL
29515: IFTRUE 29525
29517: LD_INT 31
29519: DOUBLE
29520: EQUAL
29521: IFTRUE 29525
29523: GO 29536
29525: POP
// places := 1 ; b_control_tower :
29526: LD_ADDR_VAR 0 3
29530: PUSH
29531: LD_INT 1
29533: ST_TO_ADDR
29534: GO 29556
29536: LD_INT 36
29538: DOUBLE
29539: EQUAL
29540: IFTRUE 29544
29542: GO 29555
29544: POP
// places := 3 ; end ;
29545: LD_ADDR_VAR 0 3
29549: PUSH
29550: LD_INT 3
29552: ST_TO_ADDR
29553: GO 29556
29555: POP
// if places then
29556: LD_VAR 0 3
29560: IFFALSE 29583
// result := UnitsInside ( building ) < places ;
29562: LD_ADDR_VAR 0 2
29566: PUSH
29567: LD_VAR 0 1
29571: PPUSH
29572: CALL_OW 313
29576: PUSH
29577: LD_VAR 0 3
29581: LESS
29582: ST_TO_ADDR
// end ;
29583: LD_VAR 0 2
29587: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29588: LD_INT 0
29590: PPUSH
29591: PPUSH
29592: PPUSH
29593: PPUSH
// tmp := [ ] ;
29594: LD_ADDR_VAR 0 3
29598: PUSH
29599: EMPTY
29600: ST_TO_ADDR
// list := [ ] ;
29601: LD_ADDR_VAR 0 5
29605: PUSH
29606: EMPTY
29607: ST_TO_ADDR
// for i = 16 to 25 do
29608: LD_ADDR_VAR 0 4
29612: PUSH
29613: DOUBLE
29614: LD_INT 16
29616: DEC
29617: ST_TO_ADDR
29618: LD_INT 25
29620: PUSH
29621: FOR_TO
29622: IFFALSE 29695
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29624: LD_ADDR_VAR 0 3
29628: PUSH
29629: LD_VAR 0 3
29633: PUSH
29634: LD_INT 22
29636: PUSH
29637: LD_VAR 0 1
29641: PPUSH
29642: CALL_OW 255
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 91
29653: PUSH
29654: LD_VAR 0 1
29658: PUSH
29659: LD_INT 6
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 30
29669: PUSH
29670: LD_VAR 0 4
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: PUSH
29684: EMPTY
29685: LIST
29686: PPUSH
29687: CALL_OW 69
29691: ADD
29692: ST_TO_ADDR
29693: GO 29621
29695: POP
29696: POP
// for i = 1 to tmp do
29697: LD_ADDR_VAR 0 4
29701: PUSH
29702: DOUBLE
29703: LD_INT 1
29705: DEC
29706: ST_TO_ADDR
29707: LD_VAR 0 3
29711: PUSH
29712: FOR_TO
29713: IFFALSE 29801
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29715: LD_ADDR_VAR 0 5
29719: PUSH
29720: LD_VAR 0 5
29724: PUSH
29725: LD_VAR 0 3
29729: PUSH
29730: LD_VAR 0 4
29734: ARRAY
29735: PPUSH
29736: CALL_OW 266
29740: PUSH
29741: LD_VAR 0 3
29745: PUSH
29746: LD_VAR 0 4
29750: ARRAY
29751: PPUSH
29752: CALL_OW 250
29756: PUSH
29757: LD_VAR 0 3
29761: PUSH
29762: LD_VAR 0 4
29766: ARRAY
29767: PPUSH
29768: CALL_OW 251
29772: PUSH
29773: LD_VAR 0 3
29777: PUSH
29778: LD_VAR 0 4
29782: ARRAY
29783: PPUSH
29784: CALL_OW 254
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: ADD
29798: ST_TO_ADDR
29799: GO 29712
29801: POP
29802: POP
// result := list ;
29803: LD_ADDR_VAR 0 2
29807: PUSH
29808: LD_VAR 0 5
29812: ST_TO_ADDR
// end ;
29813: LD_VAR 0 2
29817: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29818: LD_INT 0
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
// if not factory then
29827: LD_VAR 0 1
29831: NOT
29832: IFFALSE 29836
// exit ;
29834: GO 30429
// if control = control_apeman then
29836: LD_VAR 0 4
29840: PUSH
29841: LD_INT 5
29843: EQUAL
29844: IFFALSE 29953
// begin tmp := UnitsInside ( factory ) ;
29846: LD_ADDR_VAR 0 8
29850: PUSH
29851: LD_VAR 0 1
29855: PPUSH
29856: CALL_OW 313
29860: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29861: LD_VAR 0 8
29865: PPUSH
29866: LD_INT 25
29868: PUSH
29869: LD_INT 12
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PPUSH
29876: CALL_OW 72
29880: NOT
29881: IFFALSE 29891
// control := control_manual ;
29883: LD_ADDR_VAR 0 4
29887: PUSH
29888: LD_INT 1
29890: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29891: LD_ADDR_VAR 0 8
29895: PUSH
29896: LD_VAR 0 1
29900: PPUSH
29901: CALL 29588 0 1
29905: ST_TO_ADDR
// if tmp then
29906: LD_VAR 0 8
29910: IFFALSE 29953
// begin for i in tmp do
29912: LD_ADDR_VAR 0 7
29916: PUSH
29917: LD_VAR 0 8
29921: PUSH
29922: FOR_IN
29923: IFFALSE 29951
// if i [ 1 ] = b_ext_radio then
29925: LD_VAR 0 7
29929: PUSH
29930: LD_INT 1
29932: ARRAY
29933: PUSH
29934: LD_INT 22
29936: EQUAL
29937: IFFALSE 29949
// begin control := control_remote ;
29939: LD_ADDR_VAR 0 4
29943: PUSH
29944: LD_INT 2
29946: ST_TO_ADDR
// break ;
29947: GO 29951
// end ;
29949: GO 29922
29951: POP
29952: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29953: LD_VAR 0 1
29957: PPUSH
29958: LD_VAR 0 2
29962: PPUSH
29963: LD_VAR 0 3
29967: PPUSH
29968: LD_VAR 0 4
29972: PPUSH
29973: LD_VAR 0 5
29977: PPUSH
29978: CALL_OW 448
29982: IFFALSE 30017
// begin result := [ chassis , engine , control , weapon ] ;
29984: LD_ADDR_VAR 0 6
29988: PUSH
29989: LD_VAR 0 2
29993: PUSH
29994: LD_VAR 0 3
29998: PUSH
29999: LD_VAR 0 4
30003: PUSH
30004: LD_VAR 0 5
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
// exit ;
30015: GO 30429
// end ; _chassis := AvailableChassisList ( factory ) ;
30017: LD_ADDR_VAR 0 9
30021: PUSH
30022: LD_VAR 0 1
30026: PPUSH
30027: CALL_OW 475
30031: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30032: LD_ADDR_VAR 0 11
30036: PUSH
30037: LD_VAR 0 1
30041: PPUSH
30042: CALL_OW 476
30046: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30047: LD_ADDR_VAR 0 12
30051: PUSH
30052: LD_VAR 0 1
30056: PPUSH
30057: CALL_OW 477
30061: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30062: LD_ADDR_VAR 0 10
30066: PUSH
30067: LD_VAR 0 1
30071: PPUSH
30072: CALL_OW 478
30076: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30077: LD_VAR 0 9
30081: NOT
30082: PUSH
30083: LD_VAR 0 11
30087: NOT
30088: OR
30089: PUSH
30090: LD_VAR 0 12
30094: NOT
30095: OR
30096: PUSH
30097: LD_VAR 0 10
30101: NOT
30102: OR
30103: IFFALSE 30138
// begin result := [ chassis , engine , control , weapon ] ;
30105: LD_ADDR_VAR 0 6
30109: PUSH
30110: LD_VAR 0 2
30114: PUSH
30115: LD_VAR 0 3
30119: PUSH
30120: LD_VAR 0 4
30124: PUSH
30125: LD_VAR 0 5
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
// exit ;
30136: GO 30429
// end ; if not chassis in _chassis then
30138: LD_VAR 0 2
30142: PUSH
30143: LD_VAR 0 9
30147: IN
30148: NOT
30149: IFFALSE 30175
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30151: LD_ADDR_VAR 0 2
30155: PUSH
30156: LD_VAR 0 9
30160: PUSH
30161: LD_INT 1
30163: PPUSH
30164: LD_VAR 0 9
30168: PPUSH
30169: CALL_OW 12
30173: ARRAY
30174: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30175: LD_VAR 0 2
30179: PPUSH
30180: LD_VAR 0 3
30184: PPUSH
30185: CALL 30434 0 2
30189: NOT
30190: IFFALSE 30249
// repeat engine := _engine [ 1 ] ;
30192: LD_ADDR_VAR 0 3
30196: PUSH
30197: LD_VAR 0 11
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30206: LD_ADDR_VAR 0 11
30210: PUSH
30211: LD_VAR 0 11
30215: PPUSH
30216: LD_INT 1
30218: PPUSH
30219: CALL_OW 3
30223: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30224: LD_VAR 0 2
30228: PPUSH
30229: LD_VAR 0 3
30233: PPUSH
30234: CALL 30434 0 2
30238: PUSH
30239: LD_VAR 0 11
30243: PUSH
30244: EMPTY
30245: EQUAL
30246: OR
30247: IFFALSE 30192
// if not control in _control then
30249: LD_VAR 0 4
30253: PUSH
30254: LD_VAR 0 12
30258: IN
30259: NOT
30260: IFFALSE 30286
// control := _control [ rand ( 1 , _control ) ] ;
30262: LD_ADDR_VAR 0 4
30266: PUSH
30267: LD_VAR 0 12
30271: PUSH
30272: LD_INT 1
30274: PPUSH
30275: LD_VAR 0 12
30279: PPUSH
30280: CALL_OW 12
30284: ARRAY
30285: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30286: LD_VAR 0 2
30290: PPUSH
30291: LD_VAR 0 5
30295: PPUSH
30296: CALL 30654 0 2
30300: NOT
30301: IFFALSE 30360
// repeat weapon := _weapon [ 1 ] ;
30303: LD_ADDR_VAR 0 5
30307: PUSH
30308: LD_VAR 0 10
30312: PUSH
30313: LD_INT 1
30315: ARRAY
30316: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30317: LD_ADDR_VAR 0 10
30321: PUSH
30322: LD_VAR 0 10
30326: PPUSH
30327: LD_INT 1
30329: PPUSH
30330: CALL_OW 3
30334: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30335: LD_VAR 0 2
30339: PPUSH
30340: LD_VAR 0 5
30344: PPUSH
30345: CALL 30654 0 2
30349: PUSH
30350: LD_VAR 0 10
30354: PUSH
30355: EMPTY
30356: EQUAL
30357: OR
30358: IFFALSE 30303
// result := [ ] ;
30360: LD_ADDR_VAR 0 6
30364: PUSH
30365: EMPTY
30366: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30367: LD_VAR 0 1
30371: PPUSH
30372: LD_VAR 0 2
30376: PPUSH
30377: LD_VAR 0 3
30381: PPUSH
30382: LD_VAR 0 4
30386: PPUSH
30387: LD_VAR 0 5
30391: PPUSH
30392: CALL_OW 448
30396: IFFALSE 30429
// result := [ chassis , engine , control , weapon ] ;
30398: LD_ADDR_VAR 0 6
30402: PUSH
30403: LD_VAR 0 2
30407: PUSH
30408: LD_VAR 0 3
30412: PUSH
30413: LD_VAR 0 4
30417: PUSH
30418: LD_VAR 0 5
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: ST_TO_ADDR
// end ;
30429: LD_VAR 0 6
30433: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30434: LD_INT 0
30436: PPUSH
// if not chassis or not engine then
30437: LD_VAR 0 1
30441: NOT
30442: PUSH
30443: LD_VAR 0 2
30447: NOT
30448: OR
30449: IFFALSE 30453
// exit ;
30451: GO 30649
// case engine of engine_solar :
30453: LD_VAR 0 2
30457: PUSH
30458: LD_INT 2
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30504
30466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30467: LD_ADDR_VAR 0 3
30471: PUSH
30472: LD_INT 11
30474: PUSH
30475: LD_INT 12
30477: PUSH
30478: LD_INT 13
30480: PUSH
30481: LD_INT 14
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: ST_TO_ADDR
30502: GO 30633
30504: LD_INT 1
30506: DOUBLE
30507: EQUAL
30508: IFTRUE 30512
30510: GO 30574
30512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30513: LD_ADDR_VAR 0 3
30517: PUSH
30518: LD_INT 11
30520: PUSH
30521: LD_INT 12
30523: PUSH
30524: LD_INT 13
30526: PUSH
30527: LD_INT 14
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: LD_INT 4
30541: PUSH
30542: LD_INT 5
30544: PUSH
30545: LD_INT 21
30547: PUSH
30548: LD_INT 23
30550: PUSH
30551: LD_INT 22
30553: PUSH
30554: LD_INT 24
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: ST_TO_ADDR
30572: GO 30633
30574: LD_INT 3
30576: DOUBLE
30577: EQUAL
30578: IFTRUE 30582
30580: GO 30632
30582: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30583: LD_ADDR_VAR 0 3
30587: PUSH
30588: LD_INT 13
30590: PUSH
30591: LD_INT 14
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 4
30602: PUSH
30603: LD_INT 5
30605: PUSH
30606: LD_INT 21
30608: PUSH
30609: LD_INT 22
30611: PUSH
30612: LD_INT 23
30614: PUSH
30615: LD_INT 24
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: ST_TO_ADDR
30630: GO 30633
30632: POP
// result := ( chassis in result ) ;
30633: LD_ADDR_VAR 0 3
30637: PUSH
30638: LD_VAR 0 1
30642: PUSH
30643: LD_VAR 0 3
30647: IN
30648: ST_TO_ADDR
// end ;
30649: LD_VAR 0 3
30653: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30654: LD_INT 0
30656: PPUSH
// if not chassis or not weapon then
30657: LD_VAR 0 1
30661: NOT
30662: PUSH
30663: LD_VAR 0 2
30667: NOT
30668: OR
30669: IFFALSE 30673
// exit ;
30671: GO 31735
// case weapon of us_machine_gun :
30673: LD_VAR 0 2
30677: PUSH
30678: LD_INT 2
30680: DOUBLE
30681: EQUAL
30682: IFTRUE 30686
30684: GO 30716
30686: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: LD_INT 4
30703: PUSH
30704: LD_INT 5
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: ST_TO_ADDR
30714: GO 31719
30716: LD_INT 3
30718: DOUBLE
30719: EQUAL
30720: IFTRUE 30724
30722: GO 30754
30724: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30725: LD_ADDR_VAR 0 3
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: LD_INT 4
30741: PUSH
30742: LD_INT 5
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: ST_TO_ADDR
30752: GO 31719
30754: LD_INT 11
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30792
30762: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30763: LD_ADDR_VAR 0 3
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: LD_INT 3
30776: PUSH
30777: LD_INT 4
30779: PUSH
30780: LD_INT 5
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: ST_TO_ADDR
30790: GO 31719
30792: LD_INT 4
30794: DOUBLE
30795: EQUAL
30796: IFTRUE 30800
30798: GO 30826
30800: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30801: LD_ADDR_VAR 0 3
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: LD_INT 4
30814: PUSH
30815: LD_INT 5
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
30824: GO 31719
30826: LD_INT 5
30828: DOUBLE
30829: EQUAL
30830: IFTRUE 30834
30832: GO 30860
30834: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30835: LD_ADDR_VAR 0 3
30839: PUSH
30840: LD_INT 2
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: LD_INT 4
30848: PUSH
30849: LD_INT 5
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: ST_TO_ADDR
30858: GO 31719
30860: LD_INT 9
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 30894
30868: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30869: LD_ADDR_VAR 0 3
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: LD_INT 4
30882: PUSH
30883: LD_INT 5
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: ST_TO_ADDR
30892: GO 31719
30894: LD_INT 7
30896: DOUBLE
30897: EQUAL
30898: IFTRUE 30902
30900: GO 30928
30902: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30903: LD_ADDR_VAR 0 3
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: LD_INT 4
30916: PUSH
30917: LD_INT 5
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: ST_TO_ADDR
30926: GO 31719
30928: LD_INT 12
30930: DOUBLE
30931: EQUAL
30932: IFTRUE 30936
30934: GO 30962
30936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30937: LD_ADDR_VAR 0 3
30941: PUSH
30942: LD_INT 2
30944: PUSH
30945: LD_INT 3
30947: PUSH
30948: LD_INT 4
30950: PUSH
30951: LD_INT 5
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: ST_TO_ADDR
30960: GO 31719
30962: LD_INT 13
30964: DOUBLE
30965: EQUAL
30966: IFTRUE 30970
30968: GO 30996
30970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30971: LD_ADDR_VAR 0 3
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: LD_INT 3
30981: PUSH
30982: LD_INT 4
30984: PUSH
30985: LD_INT 5
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: ST_TO_ADDR
30994: GO 31719
30996: LD_INT 14
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31004
31002: GO 31022
31004: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31005: LD_ADDR_VAR 0 3
31009: PUSH
31010: LD_INT 4
31012: PUSH
31013: LD_INT 5
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: ST_TO_ADDR
31020: GO 31719
31022: LD_INT 6
31024: DOUBLE
31025: EQUAL
31026: IFTRUE 31030
31028: GO 31048
31030: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31031: LD_ADDR_VAR 0 3
31035: PUSH
31036: LD_INT 4
31038: PUSH
31039: LD_INT 5
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: ST_TO_ADDR
31046: GO 31719
31048: LD_INT 10
31050: DOUBLE
31051: EQUAL
31052: IFTRUE 31056
31054: GO 31074
31056: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: LD_INT 4
31064: PUSH
31065: LD_INT 5
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: ST_TO_ADDR
31072: GO 31719
31074: LD_INT 22
31076: DOUBLE
31077: EQUAL
31078: IFTRUE 31082
31080: GO 31108
31082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31083: LD_ADDR_VAR 0 3
31087: PUSH
31088: LD_INT 11
31090: PUSH
31091: LD_INT 12
31093: PUSH
31094: LD_INT 13
31096: PUSH
31097: LD_INT 14
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: ST_TO_ADDR
31106: GO 31719
31108: LD_INT 23
31110: DOUBLE
31111: EQUAL
31112: IFTRUE 31116
31114: GO 31142
31116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31117: LD_ADDR_VAR 0 3
31121: PUSH
31122: LD_INT 11
31124: PUSH
31125: LD_INT 12
31127: PUSH
31128: LD_INT 13
31130: PUSH
31131: LD_INT 14
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: ST_TO_ADDR
31140: GO 31719
31142: LD_INT 24
31144: DOUBLE
31145: EQUAL
31146: IFTRUE 31150
31148: GO 31176
31150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31151: LD_ADDR_VAR 0 3
31155: PUSH
31156: LD_INT 11
31158: PUSH
31159: LD_INT 12
31161: PUSH
31162: LD_INT 13
31164: PUSH
31165: LD_INT 14
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: ST_TO_ADDR
31174: GO 31719
31176: LD_INT 30
31178: DOUBLE
31179: EQUAL
31180: IFTRUE 31184
31182: GO 31210
31184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31185: LD_ADDR_VAR 0 3
31189: PUSH
31190: LD_INT 11
31192: PUSH
31193: LD_INT 12
31195: PUSH
31196: LD_INT 13
31198: PUSH
31199: LD_INT 14
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: ST_TO_ADDR
31208: GO 31719
31210: LD_INT 25
31212: DOUBLE
31213: EQUAL
31214: IFTRUE 31218
31216: GO 31236
31218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31219: LD_ADDR_VAR 0 3
31223: PUSH
31224: LD_INT 13
31226: PUSH
31227: LD_INT 14
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: ST_TO_ADDR
31234: GO 31719
31236: LD_INT 27
31238: DOUBLE
31239: EQUAL
31240: IFTRUE 31244
31242: GO 31262
31244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31245: LD_ADDR_VAR 0 3
31249: PUSH
31250: LD_INT 13
31252: PUSH
31253: LD_INT 14
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: ST_TO_ADDR
31260: GO 31719
31262: LD_EXP 23
31266: DOUBLE
31267: EQUAL
31268: IFTRUE 31272
31270: GO 31298
31272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31273: LD_ADDR_VAR 0 3
31277: PUSH
31278: LD_INT 11
31280: PUSH
31281: LD_INT 12
31283: PUSH
31284: LD_INT 13
31286: PUSH
31287: LD_INT 14
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: ST_TO_ADDR
31296: GO 31719
31298: LD_INT 28
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31324
31306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31307: LD_ADDR_VAR 0 3
31311: PUSH
31312: LD_INT 13
31314: PUSH
31315: LD_INT 14
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: ST_TO_ADDR
31322: GO 31719
31324: LD_INT 29
31326: DOUBLE
31327: EQUAL
31328: IFTRUE 31332
31330: GO 31350
31332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31333: LD_ADDR_VAR 0 3
31337: PUSH
31338: LD_INT 13
31340: PUSH
31341: LD_INT 14
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: ST_TO_ADDR
31348: GO 31719
31350: LD_INT 31
31352: DOUBLE
31353: EQUAL
31354: IFTRUE 31358
31356: GO 31376
31358: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31359: LD_ADDR_VAR 0 3
31363: PUSH
31364: LD_INT 13
31366: PUSH
31367: LD_INT 14
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: ST_TO_ADDR
31374: GO 31719
31376: LD_INT 26
31378: DOUBLE
31379: EQUAL
31380: IFTRUE 31384
31382: GO 31402
31384: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31385: LD_ADDR_VAR 0 3
31389: PUSH
31390: LD_INT 13
31392: PUSH
31393: LD_INT 14
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: ST_TO_ADDR
31400: GO 31719
31402: LD_INT 42
31404: DOUBLE
31405: EQUAL
31406: IFTRUE 31410
31408: GO 31436
31410: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31411: LD_ADDR_VAR 0 3
31415: PUSH
31416: LD_INT 21
31418: PUSH
31419: LD_INT 22
31421: PUSH
31422: LD_INT 23
31424: PUSH
31425: LD_INT 24
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: ST_TO_ADDR
31434: GO 31719
31436: LD_INT 43
31438: DOUBLE
31439: EQUAL
31440: IFTRUE 31444
31442: GO 31470
31444: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31445: LD_ADDR_VAR 0 3
31449: PUSH
31450: LD_INT 21
31452: PUSH
31453: LD_INT 22
31455: PUSH
31456: LD_INT 23
31458: PUSH
31459: LD_INT 24
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: ST_TO_ADDR
31468: GO 31719
31470: LD_INT 44
31472: DOUBLE
31473: EQUAL
31474: IFTRUE 31478
31476: GO 31504
31478: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31479: LD_ADDR_VAR 0 3
31483: PUSH
31484: LD_INT 21
31486: PUSH
31487: LD_INT 22
31489: PUSH
31490: LD_INT 23
31492: PUSH
31493: LD_INT 24
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
31502: GO 31719
31504: LD_INT 45
31506: DOUBLE
31507: EQUAL
31508: IFTRUE 31512
31510: GO 31538
31512: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31513: LD_ADDR_VAR 0 3
31517: PUSH
31518: LD_INT 21
31520: PUSH
31521: LD_INT 22
31523: PUSH
31524: LD_INT 23
31526: PUSH
31527: LD_INT 24
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: ST_TO_ADDR
31536: GO 31719
31538: LD_INT 49
31540: DOUBLE
31541: EQUAL
31542: IFTRUE 31546
31544: GO 31572
31546: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31547: LD_ADDR_VAR 0 3
31551: PUSH
31552: LD_INT 21
31554: PUSH
31555: LD_INT 22
31557: PUSH
31558: LD_INT 23
31560: PUSH
31561: LD_INT 24
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: ST_TO_ADDR
31570: GO 31719
31572: LD_INT 51
31574: DOUBLE
31575: EQUAL
31576: IFTRUE 31580
31578: GO 31606
31580: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31581: LD_ADDR_VAR 0 3
31585: PUSH
31586: LD_INT 21
31588: PUSH
31589: LD_INT 22
31591: PUSH
31592: LD_INT 23
31594: PUSH
31595: LD_INT 24
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: ST_TO_ADDR
31604: GO 31719
31606: LD_INT 52
31608: DOUBLE
31609: EQUAL
31610: IFTRUE 31614
31612: GO 31640
31614: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31615: LD_ADDR_VAR 0 3
31619: PUSH
31620: LD_INT 21
31622: PUSH
31623: LD_INT 22
31625: PUSH
31626: LD_INT 23
31628: PUSH
31629: LD_INT 24
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: ST_TO_ADDR
31638: GO 31719
31640: LD_INT 53
31642: DOUBLE
31643: EQUAL
31644: IFTRUE 31648
31646: GO 31666
31648: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31649: LD_ADDR_VAR 0 3
31653: PUSH
31654: LD_INT 23
31656: PUSH
31657: LD_INT 24
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: ST_TO_ADDR
31664: GO 31719
31666: LD_INT 46
31668: DOUBLE
31669: EQUAL
31670: IFTRUE 31674
31672: GO 31692
31674: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31675: LD_ADDR_VAR 0 3
31679: PUSH
31680: LD_INT 23
31682: PUSH
31683: LD_INT 24
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: ST_TO_ADDR
31690: GO 31719
31692: LD_INT 47
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31700
31698: GO 31718
31700: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31701: LD_ADDR_VAR 0 3
31705: PUSH
31706: LD_INT 23
31708: PUSH
31709: LD_INT 24
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: ST_TO_ADDR
31716: GO 31719
31718: POP
// result := ( chassis in result ) ;
31719: LD_ADDR_VAR 0 3
31723: PUSH
31724: LD_VAR 0 1
31728: PUSH
31729: LD_VAR 0 3
31733: IN
31734: ST_TO_ADDR
// end ;
31735: LD_VAR 0 3
31739: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31740: LD_INT 0
31742: PPUSH
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
31747: PPUSH
31748: PPUSH
// result := array ;
31749: LD_ADDR_VAR 0 5
31753: PUSH
31754: LD_VAR 0 1
31758: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31759: LD_VAR 0 1
31763: NOT
31764: PUSH
31765: LD_VAR 0 2
31769: NOT
31770: OR
31771: PUSH
31772: LD_VAR 0 3
31776: NOT
31777: OR
31778: PUSH
31779: LD_VAR 0 2
31783: PUSH
31784: LD_VAR 0 1
31788: GREATER
31789: OR
31790: PUSH
31791: LD_VAR 0 3
31795: PUSH
31796: LD_VAR 0 1
31800: GREATER
31801: OR
31802: IFFALSE 31806
// exit ;
31804: GO 32102
// if direction then
31806: LD_VAR 0 4
31810: IFFALSE 31874
// begin d := 1 ;
31812: LD_ADDR_VAR 0 9
31816: PUSH
31817: LD_INT 1
31819: ST_TO_ADDR
// if i_from > i_to then
31820: LD_VAR 0 2
31824: PUSH
31825: LD_VAR 0 3
31829: GREATER
31830: IFFALSE 31856
// length := ( array - i_from ) + i_to else
31832: LD_ADDR_VAR 0 11
31836: PUSH
31837: LD_VAR 0 1
31841: PUSH
31842: LD_VAR 0 2
31846: MINUS
31847: PUSH
31848: LD_VAR 0 3
31852: PLUS
31853: ST_TO_ADDR
31854: GO 31872
// length := i_to - i_from ;
31856: LD_ADDR_VAR 0 11
31860: PUSH
31861: LD_VAR 0 3
31865: PUSH
31866: LD_VAR 0 2
31870: MINUS
31871: ST_TO_ADDR
// end else
31872: GO 31935
// begin d := - 1 ;
31874: LD_ADDR_VAR 0 9
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: ST_TO_ADDR
// if i_from > i_to then
31883: LD_VAR 0 2
31887: PUSH
31888: LD_VAR 0 3
31892: GREATER
31893: IFFALSE 31913
// length := i_from - i_to else
31895: LD_ADDR_VAR 0 11
31899: PUSH
31900: LD_VAR 0 2
31904: PUSH
31905: LD_VAR 0 3
31909: MINUS
31910: ST_TO_ADDR
31911: GO 31935
// length := ( array - i_to ) + i_from ;
31913: LD_ADDR_VAR 0 11
31917: PUSH
31918: LD_VAR 0 1
31922: PUSH
31923: LD_VAR 0 3
31927: MINUS
31928: PUSH
31929: LD_VAR 0 2
31933: PLUS
31934: ST_TO_ADDR
// end ; if not length then
31935: LD_VAR 0 11
31939: NOT
31940: IFFALSE 31944
// exit ;
31942: GO 32102
// tmp := array ;
31944: LD_ADDR_VAR 0 10
31948: PUSH
31949: LD_VAR 0 1
31953: ST_TO_ADDR
// for i = 1 to length do
31954: LD_ADDR_VAR 0 6
31958: PUSH
31959: DOUBLE
31960: LD_INT 1
31962: DEC
31963: ST_TO_ADDR
31964: LD_VAR 0 11
31968: PUSH
31969: FOR_TO
31970: IFFALSE 32090
// begin for j = 1 to array do
31972: LD_ADDR_VAR 0 7
31976: PUSH
31977: DOUBLE
31978: LD_INT 1
31980: DEC
31981: ST_TO_ADDR
31982: LD_VAR 0 1
31986: PUSH
31987: FOR_TO
31988: IFFALSE 32076
// begin k := j + d ;
31990: LD_ADDR_VAR 0 8
31994: PUSH
31995: LD_VAR 0 7
31999: PUSH
32000: LD_VAR 0 9
32004: PLUS
32005: ST_TO_ADDR
// if k > array then
32006: LD_VAR 0 8
32010: PUSH
32011: LD_VAR 0 1
32015: GREATER
32016: IFFALSE 32026
// k := 1 ;
32018: LD_ADDR_VAR 0 8
32022: PUSH
32023: LD_INT 1
32025: ST_TO_ADDR
// if not k then
32026: LD_VAR 0 8
32030: NOT
32031: IFFALSE 32043
// k := array ;
32033: LD_ADDR_VAR 0 8
32037: PUSH
32038: LD_VAR 0 1
32042: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32043: LD_ADDR_VAR 0 10
32047: PUSH
32048: LD_VAR 0 10
32052: PPUSH
32053: LD_VAR 0 8
32057: PPUSH
32058: LD_VAR 0 1
32062: PUSH
32063: LD_VAR 0 7
32067: ARRAY
32068: PPUSH
32069: CALL_OW 1
32073: ST_TO_ADDR
// end ;
32074: GO 31987
32076: POP
32077: POP
// array := tmp ;
32078: LD_ADDR_VAR 0 1
32082: PUSH
32083: LD_VAR 0 10
32087: ST_TO_ADDR
// end ;
32088: GO 31969
32090: POP
32091: POP
// result := array ;
32092: LD_ADDR_VAR 0 5
32096: PUSH
32097: LD_VAR 0 1
32101: ST_TO_ADDR
// end ;
32102: LD_VAR 0 5
32106: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32107: LD_INT 0
32109: PPUSH
32110: PPUSH
// result := 0 ;
32111: LD_ADDR_VAR 0 3
32115: PUSH
32116: LD_INT 0
32118: ST_TO_ADDR
// if not array or not value in array then
32119: LD_VAR 0 1
32123: NOT
32124: PUSH
32125: LD_VAR 0 2
32129: PUSH
32130: LD_VAR 0 1
32134: IN
32135: NOT
32136: OR
32137: IFFALSE 32141
// exit ;
32139: GO 32195
// for i = 1 to array do
32141: LD_ADDR_VAR 0 4
32145: PUSH
32146: DOUBLE
32147: LD_INT 1
32149: DEC
32150: ST_TO_ADDR
32151: LD_VAR 0 1
32155: PUSH
32156: FOR_TO
32157: IFFALSE 32193
// if value = array [ i ] then
32159: LD_VAR 0 2
32163: PUSH
32164: LD_VAR 0 1
32168: PUSH
32169: LD_VAR 0 4
32173: ARRAY
32174: EQUAL
32175: IFFALSE 32191
// begin result := i ;
32177: LD_ADDR_VAR 0 3
32181: PUSH
32182: LD_VAR 0 4
32186: ST_TO_ADDR
// exit ;
32187: POP
32188: POP
32189: GO 32195
// end ;
32191: GO 32156
32193: POP
32194: POP
// end ;
32195: LD_VAR 0 3
32199: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32200: LD_INT 0
32202: PPUSH
// vc_chassis := chassis ;
32203: LD_ADDR_OWVAR 37
32207: PUSH
32208: LD_VAR 0 1
32212: ST_TO_ADDR
// vc_engine := engine ;
32213: LD_ADDR_OWVAR 39
32217: PUSH
32218: LD_VAR 0 2
32222: ST_TO_ADDR
// vc_control := control ;
32223: LD_ADDR_OWVAR 38
32227: PUSH
32228: LD_VAR 0 3
32232: ST_TO_ADDR
// vc_weapon := weapon ;
32233: LD_ADDR_OWVAR 40
32237: PUSH
32238: LD_VAR 0 4
32242: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32243: LD_ADDR_OWVAR 41
32247: PUSH
32248: LD_VAR 0 5
32252: ST_TO_ADDR
// end ;
32253: LD_VAR 0 6
32257: RET
// export function WantPlant ( unit ) ; var task ; begin
32258: LD_INT 0
32260: PPUSH
32261: PPUSH
// result := false ;
32262: LD_ADDR_VAR 0 2
32266: PUSH
32267: LD_INT 0
32269: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32270: LD_ADDR_VAR 0 3
32274: PUSH
32275: LD_VAR 0 1
32279: PPUSH
32280: CALL_OW 437
32284: ST_TO_ADDR
// if task then
32285: LD_VAR 0 3
32289: IFFALSE 32317
// if task [ 1 ] [ 1 ] = p then
32291: LD_VAR 0 3
32295: PUSH
32296: LD_INT 1
32298: ARRAY
32299: PUSH
32300: LD_INT 1
32302: ARRAY
32303: PUSH
32304: LD_STRING p
32306: EQUAL
32307: IFFALSE 32317
// result := true ;
32309: LD_ADDR_VAR 0 2
32313: PUSH
32314: LD_INT 1
32316: ST_TO_ADDR
// end ;
32317: LD_VAR 0 2
32321: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32322: LD_INT 0
32324: PPUSH
32325: PPUSH
32326: PPUSH
32327: PPUSH
// if pos < 1 then
32328: LD_VAR 0 2
32332: PUSH
32333: LD_INT 1
32335: LESS
32336: IFFALSE 32340
// exit ;
32338: GO 32643
// if pos = 1 then
32340: LD_VAR 0 2
32344: PUSH
32345: LD_INT 1
32347: EQUAL
32348: IFFALSE 32381
// result := Replace ( arr , pos [ 1 ] , value ) else
32350: LD_ADDR_VAR 0 4
32354: PUSH
32355: LD_VAR 0 1
32359: PPUSH
32360: LD_VAR 0 2
32364: PUSH
32365: LD_INT 1
32367: ARRAY
32368: PPUSH
32369: LD_VAR 0 3
32373: PPUSH
32374: CALL_OW 1
32378: ST_TO_ADDR
32379: GO 32643
// begin tmp := arr ;
32381: LD_ADDR_VAR 0 6
32385: PUSH
32386: LD_VAR 0 1
32390: ST_TO_ADDR
// s_arr := [ tmp ] ;
32391: LD_ADDR_VAR 0 7
32395: PUSH
32396: LD_VAR 0 6
32400: PUSH
32401: EMPTY
32402: LIST
32403: ST_TO_ADDR
// for i = 1 to pos - 1 do
32404: LD_ADDR_VAR 0 5
32408: PUSH
32409: DOUBLE
32410: LD_INT 1
32412: DEC
32413: ST_TO_ADDR
32414: LD_VAR 0 2
32418: PUSH
32419: LD_INT 1
32421: MINUS
32422: PUSH
32423: FOR_TO
32424: IFFALSE 32469
// begin tmp := tmp [ pos [ i ] ] ;
32426: LD_ADDR_VAR 0 6
32430: PUSH
32431: LD_VAR 0 6
32435: PUSH
32436: LD_VAR 0 2
32440: PUSH
32441: LD_VAR 0 5
32445: ARRAY
32446: ARRAY
32447: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32448: LD_ADDR_VAR 0 7
32452: PUSH
32453: LD_VAR 0 7
32457: PUSH
32458: LD_VAR 0 6
32462: PUSH
32463: EMPTY
32464: LIST
32465: ADD
32466: ST_TO_ADDR
// end ;
32467: GO 32423
32469: POP
32470: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32471: LD_ADDR_VAR 0 6
32475: PUSH
32476: LD_VAR 0 6
32480: PPUSH
32481: LD_VAR 0 2
32485: PUSH
32486: LD_VAR 0 2
32490: ARRAY
32491: PPUSH
32492: LD_VAR 0 3
32496: PPUSH
32497: CALL_OW 1
32501: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32502: LD_ADDR_VAR 0 7
32506: PUSH
32507: LD_VAR 0 7
32511: PPUSH
32512: LD_VAR 0 7
32516: PPUSH
32517: LD_VAR 0 6
32521: PPUSH
32522: CALL_OW 1
32526: ST_TO_ADDR
// for i = s_arr downto 2 do
32527: LD_ADDR_VAR 0 5
32531: PUSH
32532: DOUBLE
32533: LD_VAR 0 7
32537: INC
32538: ST_TO_ADDR
32539: LD_INT 2
32541: PUSH
32542: FOR_DOWNTO
32543: IFFALSE 32627
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32545: LD_ADDR_VAR 0 6
32549: PUSH
32550: LD_VAR 0 7
32554: PUSH
32555: LD_VAR 0 5
32559: PUSH
32560: LD_INT 1
32562: MINUS
32563: ARRAY
32564: PPUSH
32565: LD_VAR 0 2
32569: PUSH
32570: LD_VAR 0 5
32574: PUSH
32575: LD_INT 1
32577: MINUS
32578: ARRAY
32579: PPUSH
32580: LD_VAR 0 7
32584: PUSH
32585: LD_VAR 0 5
32589: ARRAY
32590: PPUSH
32591: CALL_OW 1
32595: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32596: LD_ADDR_VAR 0 7
32600: PUSH
32601: LD_VAR 0 7
32605: PPUSH
32606: LD_VAR 0 5
32610: PUSH
32611: LD_INT 1
32613: MINUS
32614: PPUSH
32615: LD_VAR 0 6
32619: PPUSH
32620: CALL_OW 1
32624: ST_TO_ADDR
// end ;
32625: GO 32542
32627: POP
32628: POP
// result := s_arr [ 1 ] ;
32629: LD_ADDR_VAR 0 4
32633: PUSH
32634: LD_VAR 0 7
32638: PUSH
32639: LD_INT 1
32641: ARRAY
32642: ST_TO_ADDR
// end ; end ;
32643: LD_VAR 0 4
32647: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32648: LD_INT 0
32650: PPUSH
32651: PPUSH
// if not list then
32652: LD_VAR 0 1
32656: NOT
32657: IFFALSE 32661
// exit ;
32659: GO 32752
// i := list [ pos1 ] ;
32661: LD_ADDR_VAR 0 5
32665: PUSH
32666: LD_VAR 0 1
32670: PUSH
32671: LD_VAR 0 2
32675: ARRAY
32676: ST_TO_ADDR
// if not i then
32677: LD_VAR 0 5
32681: NOT
32682: IFFALSE 32686
// exit ;
32684: GO 32752
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32686: LD_ADDR_VAR 0 1
32690: PUSH
32691: LD_VAR 0 1
32695: PPUSH
32696: LD_VAR 0 2
32700: PPUSH
32701: LD_VAR 0 1
32705: PUSH
32706: LD_VAR 0 3
32710: ARRAY
32711: PPUSH
32712: CALL_OW 1
32716: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32717: LD_ADDR_VAR 0 1
32721: PUSH
32722: LD_VAR 0 1
32726: PPUSH
32727: LD_VAR 0 3
32731: PPUSH
32732: LD_VAR 0 5
32736: PPUSH
32737: CALL_OW 1
32741: ST_TO_ADDR
// result := list ;
32742: LD_ADDR_VAR 0 4
32746: PUSH
32747: LD_VAR 0 1
32751: ST_TO_ADDR
// end ;
32752: LD_VAR 0 4
32756: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32757: LD_INT 0
32759: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32760: LD_ADDR_VAR 0 5
32764: PUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: CALL_OW 250
32774: PPUSH
32775: LD_VAR 0 1
32779: PPUSH
32780: CALL_OW 251
32784: PPUSH
32785: LD_VAR 0 2
32789: PPUSH
32790: LD_VAR 0 3
32794: PPUSH
32795: LD_VAR 0 4
32799: PPUSH
32800: CALL 32810 0 5
32804: ST_TO_ADDR
// end ;
32805: LD_VAR 0 5
32809: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32810: LD_INT 0
32812: PPUSH
32813: PPUSH
32814: PPUSH
32815: PPUSH
// if not list then
32816: LD_VAR 0 3
32820: NOT
32821: IFFALSE 32825
// exit ;
32823: GO 33213
// result := [ ] ;
32825: LD_ADDR_VAR 0 6
32829: PUSH
32830: EMPTY
32831: ST_TO_ADDR
// for i in list do
32832: LD_ADDR_VAR 0 7
32836: PUSH
32837: LD_VAR 0 3
32841: PUSH
32842: FOR_IN
32843: IFFALSE 33045
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32845: LD_ADDR_VAR 0 9
32849: PUSH
32850: LD_VAR 0 7
32854: PPUSH
32855: LD_VAR 0 1
32859: PPUSH
32860: LD_VAR 0 2
32864: PPUSH
32865: CALL_OW 297
32869: ST_TO_ADDR
// if not result then
32870: LD_VAR 0 6
32874: NOT
32875: IFFALSE 32901
// result := [ [ i , tmp ] ] else
32877: LD_ADDR_VAR 0 6
32881: PUSH
32882: LD_VAR 0 7
32886: PUSH
32887: LD_VAR 0 9
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: EMPTY
32897: LIST
32898: ST_TO_ADDR
32899: GO 33043
// begin if result [ result ] [ 2 ] < tmp then
32901: LD_VAR 0 6
32905: PUSH
32906: LD_VAR 0 6
32910: ARRAY
32911: PUSH
32912: LD_INT 2
32914: ARRAY
32915: PUSH
32916: LD_VAR 0 9
32920: LESS
32921: IFFALSE 32963
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32923: LD_ADDR_VAR 0 6
32927: PUSH
32928: LD_VAR 0 6
32932: PPUSH
32933: LD_VAR 0 6
32937: PUSH
32938: LD_INT 1
32940: PLUS
32941: PPUSH
32942: LD_VAR 0 7
32946: PUSH
32947: LD_VAR 0 9
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PPUSH
32956: CALL_OW 2
32960: ST_TO_ADDR
32961: GO 33043
// for j = 1 to result do
32963: LD_ADDR_VAR 0 8
32967: PUSH
32968: DOUBLE
32969: LD_INT 1
32971: DEC
32972: ST_TO_ADDR
32973: LD_VAR 0 6
32977: PUSH
32978: FOR_TO
32979: IFFALSE 33041
// begin if tmp < result [ j ] [ 2 ] then
32981: LD_VAR 0 9
32985: PUSH
32986: LD_VAR 0 6
32990: PUSH
32991: LD_VAR 0 8
32995: ARRAY
32996: PUSH
32997: LD_INT 2
32999: ARRAY
33000: LESS
33001: IFFALSE 33039
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33003: LD_ADDR_VAR 0 6
33007: PUSH
33008: LD_VAR 0 6
33012: PPUSH
33013: LD_VAR 0 8
33017: PPUSH
33018: LD_VAR 0 7
33022: PUSH
33023: LD_VAR 0 9
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PPUSH
33032: CALL_OW 2
33036: ST_TO_ADDR
// break ;
33037: GO 33041
// end ; end ;
33039: GO 32978
33041: POP
33042: POP
// end ; end ;
33043: GO 32842
33045: POP
33046: POP
// if result and not asc then
33047: LD_VAR 0 6
33051: PUSH
33052: LD_VAR 0 4
33056: NOT
33057: AND
33058: IFFALSE 33133
// begin tmp := result ;
33060: LD_ADDR_VAR 0 9
33064: PUSH
33065: LD_VAR 0 6
33069: ST_TO_ADDR
// for i = tmp downto 1 do
33070: LD_ADDR_VAR 0 7
33074: PUSH
33075: DOUBLE
33076: LD_VAR 0 9
33080: INC
33081: ST_TO_ADDR
33082: LD_INT 1
33084: PUSH
33085: FOR_DOWNTO
33086: IFFALSE 33131
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33088: LD_ADDR_VAR 0 6
33092: PUSH
33093: LD_VAR 0 6
33097: PPUSH
33098: LD_VAR 0 9
33102: PUSH
33103: LD_VAR 0 7
33107: MINUS
33108: PUSH
33109: LD_INT 1
33111: PLUS
33112: PPUSH
33113: LD_VAR 0 9
33117: PUSH
33118: LD_VAR 0 7
33122: ARRAY
33123: PPUSH
33124: CALL_OW 1
33128: ST_TO_ADDR
33129: GO 33085
33131: POP
33132: POP
// end ; tmp := [ ] ;
33133: LD_ADDR_VAR 0 9
33137: PUSH
33138: EMPTY
33139: ST_TO_ADDR
// if mode then
33140: LD_VAR 0 5
33144: IFFALSE 33213
// begin for i = 1 to result do
33146: LD_ADDR_VAR 0 7
33150: PUSH
33151: DOUBLE
33152: LD_INT 1
33154: DEC
33155: ST_TO_ADDR
33156: LD_VAR 0 6
33160: PUSH
33161: FOR_TO
33162: IFFALSE 33201
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33164: LD_ADDR_VAR 0 9
33168: PUSH
33169: LD_VAR 0 9
33173: PPUSH
33174: LD_VAR 0 7
33178: PPUSH
33179: LD_VAR 0 6
33183: PUSH
33184: LD_VAR 0 7
33188: ARRAY
33189: PUSH
33190: LD_INT 1
33192: ARRAY
33193: PPUSH
33194: CALL_OW 1
33198: ST_TO_ADDR
33199: GO 33161
33201: POP
33202: POP
// result := tmp ;
33203: LD_ADDR_VAR 0 6
33207: PUSH
33208: LD_VAR 0 9
33212: ST_TO_ADDR
// end ; end ;
33213: LD_VAR 0 6
33217: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33218: LD_INT 0
33220: PPUSH
33221: PPUSH
33222: PPUSH
33223: PPUSH
33224: PPUSH
33225: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33226: LD_ADDR_VAR 0 5
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: EMPTY
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: ST_TO_ADDR
// if not x or not y then
33248: LD_VAR 0 2
33252: NOT
33253: PUSH
33254: LD_VAR 0 3
33258: NOT
33259: OR
33260: IFFALSE 33264
// exit ;
33262: GO 34916
// if not range then
33264: LD_VAR 0 4
33268: NOT
33269: IFFALSE 33279
// range := 10 ;
33271: LD_ADDR_VAR 0 4
33275: PUSH
33276: LD_INT 10
33278: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33279: LD_ADDR_VAR 0 8
33283: PUSH
33284: LD_INT 81
33286: PUSH
33287: LD_VAR 0 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 92
33298: PUSH
33299: LD_VAR 0 2
33303: PUSH
33304: LD_VAR 0 3
33308: PUSH
33309: LD_VAR 0 4
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 3
33322: PUSH
33323: LD_INT 21
33325: PUSH
33326: LD_INT 3
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: PPUSH
33342: CALL_OW 69
33346: ST_TO_ADDR
// if not tmp then
33347: LD_VAR 0 8
33351: NOT
33352: IFFALSE 33356
// exit ;
33354: GO 34916
// for i in tmp do
33356: LD_ADDR_VAR 0 6
33360: PUSH
33361: LD_VAR 0 8
33365: PUSH
33366: FOR_IN
33367: IFFALSE 34891
// begin points := [ 0 , 0 , 0 ] ;
33369: LD_ADDR_VAR 0 9
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: LIST
33387: ST_TO_ADDR
// bpoints := 1 ;
33388: LD_ADDR_VAR 0 10
33392: PUSH
33393: LD_INT 1
33395: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33396: LD_VAR 0 6
33400: PPUSH
33401: CALL_OW 247
33405: PUSH
33406: LD_INT 1
33408: DOUBLE
33409: EQUAL
33410: IFTRUE 33414
33412: GO 33992
33414: POP
// begin if GetClass ( i ) = 1 then
33415: LD_VAR 0 6
33419: PPUSH
33420: CALL_OW 257
33424: PUSH
33425: LD_INT 1
33427: EQUAL
33428: IFFALSE 33449
// points := [ 10 , 5 , 3 ] ;
33430: LD_ADDR_VAR 0 9
33434: PUSH
33435: LD_INT 10
33437: PUSH
33438: LD_INT 5
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33449: LD_VAR 0 6
33453: PPUSH
33454: CALL_OW 257
33458: PUSH
33459: LD_INT 2
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: LD_INT 4
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: LIST
33472: IN
33473: IFFALSE 33494
// points := [ 3 , 2 , 1 ] ;
33475: LD_ADDR_VAR 0 9
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: LD_INT 1
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33494: LD_VAR 0 6
33498: PPUSH
33499: CALL_OW 257
33503: PUSH
33504: LD_INT 5
33506: EQUAL
33507: IFFALSE 33528
// points := [ 130 , 5 , 2 ] ;
33509: LD_ADDR_VAR 0 9
33513: PUSH
33514: LD_INT 130
33516: PUSH
33517: LD_INT 5
33519: PUSH
33520: LD_INT 2
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33528: LD_VAR 0 6
33532: PPUSH
33533: CALL_OW 257
33537: PUSH
33538: LD_INT 8
33540: EQUAL
33541: IFFALSE 33562
// points := [ 35 , 35 , 30 ] ;
33543: LD_ADDR_VAR 0 9
33547: PUSH
33548: LD_INT 35
33550: PUSH
33551: LD_INT 35
33553: PUSH
33554: LD_INT 30
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33562: LD_VAR 0 6
33566: PPUSH
33567: CALL_OW 257
33571: PUSH
33572: LD_INT 9
33574: EQUAL
33575: IFFALSE 33596
// points := [ 20 , 55 , 40 ] ;
33577: LD_ADDR_VAR 0 9
33581: PUSH
33582: LD_INT 20
33584: PUSH
33585: LD_INT 55
33587: PUSH
33588: LD_INT 40
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33596: LD_VAR 0 6
33600: PPUSH
33601: CALL_OW 257
33605: PUSH
33606: LD_INT 12
33608: PUSH
33609: LD_INT 16
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: IN
33616: IFFALSE 33637
// points := [ 5 , 3 , 2 ] ;
33618: LD_ADDR_VAR 0 9
33622: PUSH
33623: LD_INT 5
33625: PUSH
33626: LD_INT 3
33628: PUSH
33629: LD_INT 2
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33637: LD_VAR 0 6
33641: PPUSH
33642: CALL_OW 257
33646: PUSH
33647: LD_INT 17
33649: EQUAL
33650: IFFALSE 33671
// points := [ 100 , 50 , 75 ] ;
33652: LD_ADDR_VAR 0 9
33656: PUSH
33657: LD_INT 100
33659: PUSH
33660: LD_INT 50
33662: PUSH
33663: LD_INT 75
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33671: LD_VAR 0 6
33675: PPUSH
33676: CALL_OW 257
33680: PUSH
33681: LD_INT 15
33683: EQUAL
33684: IFFALSE 33705
// points := [ 10 , 5 , 3 ] ;
33686: LD_ADDR_VAR 0 9
33690: PUSH
33691: LD_INT 10
33693: PUSH
33694: LD_INT 5
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33705: LD_VAR 0 6
33709: PPUSH
33710: CALL_OW 257
33714: PUSH
33715: LD_INT 14
33717: EQUAL
33718: IFFALSE 33739
// points := [ 10 , 0 , 0 ] ;
33720: LD_ADDR_VAR 0 9
33724: PUSH
33725: LD_INT 10
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33739: LD_VAR 0 6
33743: PPUSH
33744: CALL_OW 257
33748: PUSH
33749: LD_INT 11
33751: EQUAL
33752: IFFALSE 33773
// points := [ 30 , 10 , 5 ] ;
33754: LD_ADDR_VAR 0 9
33758: PUSH
33759: LD_INT 30
33761: PUSH
33762: LD_INT 10
33764: PUSH
33765: LD_INT 5
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: LIST
33772: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33773: LD_VAR 0 1
33777: PPUSH
33778: LD_INT 5
33780: PPUSH
33781: CALL_OW 321
33785: PUSH
33786: LD_INT 2
33788: EQUAL
33789: IFFALSE 33806
// bpoints := bpoints * 1.8 ;
33791: LD_ADDR_VAR 0 10
33795: PUSH
33796: LD_VAR 0 10
33800: PUSH
33801: LD_REAL  1.80000000000000E+0000
33804: MUL
33805: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33806: LD_VAR 0 6
33810: PPUSH
33811: CALL_OW 257
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: LD_INT 4
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: IN
33834: PUSH
33835: LD_VAR 0 1
33839: PPUSH
33840: LD_INT 51
33842: PPUSH
33843: CALL_OW 321
33847: PUSH
33848: LD_INT 2
33850: EQUAL
33851: AND
33852: IFFALSE 33869
// bpoints := bpoints * 1.2 ;
33854: LD_ADDR_VAR 0 10
33858: PUSH
33859: LD_VAR 0 10
33863: PUSH
33864: LD_REAL  1.20000000000000E+0000
33867: MUL
33868: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33869: LD_VAR 0 6
33873: PPUSH
33874: CALL_OW 257
33878: PUSH
33879: LD_INT 5
33881: PUSH
33882: LD_INT 7
33884: PUSH
33885: LD_INT 9
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: LIST
33892: IN
33893: PUSH
33894: LD_VAR 0 1
33898: PPUSH
33899: LD_INT 52
33901: PPUSH
33902: CALL_OW 321
33906: PUSH
33907: LD_INT 2
33909: EQUAL
33910: AND
33911: IFFALSE 33928
// bpoints := bpoints * 1.5 ;
33913: LD_ADDR_VAR 0 10
33917: PUSH
33918: LD_VAR 0 10
33922: PUSH
33923: LD_REAL  1.50000000000000E+0000
33926: MUL
33927: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33928: LD_VAR 0 1
33932: PPUSH
33933: LD_INT 66
33935: PPUSH
33936: CALL_OW 321
33940: PUSH
33941: LD_INT 2
33943: EQUAL
33944: IFFALSE 33961
// bpoints := bpoints * 1.1 ;
33946: LD_ADDR_VAR 0 10
33950: PUSH
33951: LD_VAR 0 10
33955: PUSH
33956: LD_REAL  1.10000000000000E+0000
33959: MUL
33960: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33961: LD_ADDR_VAR 0 10
33965: PUSH
33966: LD_VAR 0 10
33970: PUSH
33971: LD_VAR 0 6
33975: PPUSH
33976: LD_INT 1
33978: PPUSH
33979: CALL_OW 259
33983: PUSH
33984: LD_REAL  1.15000000000000E+0000
33987: MUL
33988: MUL
33989: ST_TO_ADDR
// end ; unit_vehicle :
33990: GO 34820
33992: LD_INT 2
33994: DOUBLE
33995: EQUAL
33996: IFTRUE 34000
33998: GO 34808
34000: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34001: LD_VAR 0 6
34005: PPUSH
34006: CALL_OW 264
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: LD_INT 42
34016: PUSH
34017: LD_INT 24
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: LIST
34024: IN
34025: IFFALSE 34046
// points := [ 25 , 5 , 3 ] ;
34027: LD_ADDR_VAR 0 9
34031: PUSH
34032: LD_INT 25
34034: PUSH
34035: LD_INT 5
34037: PUSH
34038: LD_INT 3
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34046: LD_VAR 0 6
34050: PPUSH
34051: CALL_OW 264
34055: PUSH
34056: LD_INT 4
34058: PUSH
34059: LD_INT 43
34061: PUSH
34062: LD_INT 25
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: IN
34070: IFFALSE 34091
// points := [ 40 , 15 , 5 ] ;
34072: LD_ADDR_VAR 0 9
34076: PUSH
34077: LD_INT 40
34079: PUSH
34080: LD_INT 15
34082: PUSH
34083: LD_INT 5
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34091: LD_VAR 0 6
34095: PPUSH
34096: CALL_OW 264
34100: PUSH
34101: LD_INT 3
34103: PUSH
34104: LD_INT 23
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: IN
34111: IFFALSE 34132
// points := [ 7 , 25 , 8 ] ;
34113: LD_ADDR_VAR 0 9
34117: PUSH
34118: LD_INT 7
34120: PUSH
34121: LD_INT 25
34123: PUSH
34124: LD_INT 8
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34132: LD_VAR 0 6
34136: PPUSH
34137: CALL_OW 264
34141: PUSH
34142: LD_INT 5
34144: PUSH
34145: LD_INT 27
34147: PUSH
34148: LD_INT 44
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: LIST
34155: IN
34156: IFFALSE 34177
// points := [ 14 , 50 , 16 ] ;
34158: LD_ADDR_VAR 0 9
34162: PUSH
34163: LD_INT 14
34165: PUSH
34166: LD_INT 50
34168: PUSH
34169: LD_INT 16
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34177: LD_VAR 0 6
34181: PPUSH
34182: CALL_OW 264
34186: PUSH
34187: LD_INT 6
34189: PUSH
34190: LD_INT 46
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: IN
34197: IFFALSE 34218
// points := [ 32 , 120 , 70 ] ;
34199: LD_ADDR_VAR 0 9
34203: PUSH
34204: LD_INT 32
34206: PUSH
34207: LD_INT 120
34209: PUSH
34210: LD_INT 70
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: LIST
34217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34218: LD_VAR 0 6
34222: PPUSH
34223: CALL_OW 264
34227: PUSH
34228: LD_INT 7
34230: PUSH
34231: LD_INT 28
34233: PUSH
34234: LD_INT 45
34236: PUSH
34237: LD_EXP 23
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: IN
34248: IFFALSE 34269
// points := [ 35 , 20 , 45 ] ;
34250: LD_ADDR_VAR 0 9
34254: PUSH
34255: LD_INT 35
34257: PUSH
34258: LD_INT 20
34260: PUSH
34261: LD_INT 45
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34269: LD_VAR 0 6
34273: PPUSH
34274: CALL_OW 264
34278: PUSH
34279: LD_INT 47
34281: PUSH
34282: EMPTY
34283: LIST
34284: IN
34285: IFFALSE 34306
// points := [ 67 , 45 , 75 ] ;
34287: LD_ADDR_VAR 0 9
34291: PUSH
34292: LD_INT 67
34294: PUSH
34295: LD_INT 45
34297: PUSH
34298: LD_INT 75
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34306: LD_VAR 0 6
34310: PPUSH
34311: CALL_OW 264
34315: PUSH
34316: LD_INT 26
34318: PUSH
34319: EMPTY
34320: LIST
34321: IN
34322: IFFALSE 34343
// points := [ 120 , 30 , 80 ] ;
34324: LD_ADDR_VAR 0 9
34328: PUSH
34329: LD_INT 120
34331: PUSH
34332: LD_INT 30
34334: PUSH
34335: LD_INT 80
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34343: LD_VAR 0 6
34347: PPUSH
34348: CALL_OW 264
34352: PUSH
34353: LD_INT 22
34355: PUSH
34356: EMPTY
34357: LIST
34358: IN
34359: IFFALSE 34380
// points := [ 40 , 1 , 1 ] ;
34361: LD_ADDR_VAR 0 9
34365: PUSH
34366: LD_INT 40
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: LIST
34379: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34380: LD_VAR 0 6
34384: PPUSH
34385: CALL_OW 264
34389: PUSH
34390: LD_INT 29
34392: PUSH
34393: EMPTY
34394: LIST
34395: IN
34396: IFFALSE 34417
// points := [ 70 , 200 , 400 ] ;
34398: LD_ADDR_VAR 0 9
34402: PUSH
34403: LD_INT 70
34405: PUSH
34406: LD_INT 200
34408: PUSH
34409: LD_INT 400
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34417: LD_VAR 0 6
34421: PPUSH
34422: CALL_OW 264
34426: PUSH
34427: LD_INT 14
34429: PUSH
34430: LD_INT 53
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: IN
34437: IFFALSE 34458
// points := [ 40 , 10 , 20 ] ;
34439: LD_ADDR_VAR 0 9
34443: PUSH
34444: LD_INT 40
34446: PUSH
34447: LD_INT 10
34449: PUSH
34450: LD_INT 20
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: LIST
34457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34458: LD_VAR 0 6
34462: PPUSH
34463: CALL_OW 264
34467: PUSH
34468: LD_INT 9
34470: PUSH
34471: EMPTY
34472: LIST
34473: IN
34474: IFFALSE 34495
// points := [ 5 , 70 , 20 ] ;
34476: LD_ADDR_VAR 0 9
34480: PUSH
34481: LD_INT 5
34483: PUSH
34484: LD_INT 70
34486: PUSH
34487: LD_INT 20
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: LIST
34494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34495: LD_VAR 0 6
34499: PPUSH
34500: CALL_OW 264
34504: PUSH
34505: LD_INT 10
34507: PUSH
34508: EMPTY
34509: LIST
34510: IN
34511: IFFALSE 34532
// points := [ 35 , 110 , 70 ] ;
34513: LD_ADDR_VAR 0 9
34517: PUSH
34518: LD_INT 35
34520: PUSH
34521: LD_INT 110
34523: PUSH
34524: LD_INT 70
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34532: LD_VAR 0 6
34536: PPUSH
34537: CALL_OW 265
34541: PUSH
34542: LD_INT 25
34544: EQUAL
34545: IFFALSE 34566
// points := [ 80 , 65 , 100 ] ;
34547: LD_ADDR_VAR 0 9
34551: PUSH
34552: LD_INT 80
34554: PUSH
34555: LD_INT 65
34557: PUSH
34558: LD_INT 100
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34566: LD_VAR 0 6
34570: PPUSH
34571: CALL_OW 263
34575: PUSH
34576: LD_INT 1
34578: EQUAL
34579: IFFALSE 34614
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34581: LD_ADDR_VAR 0 10
34585: PUSH
34586: LD_VAR 0 10
34590: PUSH
34591: LD_VAR 0 6
34595: PPUSH
34596: CALL_OW 311
34600: PPUSH
34601: LD_INT 3
34603: PPUSH
34604: CALL_OW 259
34608: PUSH
34609: LD_INT 4
34611: MUL
34612: MUL
34613: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34614: LD_VAR 0 6
34618: PPUSH
34619: CALL_OW 263
34623: PUSH
34624: LD_INT 2
34626: EQUAL
34627: IFFALSE 34678
// begin j := IsControledBy ( i ) ;
34629: LD_ADDR_VAR 0 7
34633: PUSH
34634: LD_VAR 0 6
34638: PPUSH
34639: CALL_OW 312
34643: ST_TO_ADDR
// if j then
34644: LD_VAR 0 7
34648: IFFALSE 34678
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34650: LD_ADDR_VAR 0 10
34654: PUSH
34655: LD_VAR 0 10
34659: PUSH
34660: LD_VAR 0 7
34664: PPUSH
34665: LD_INT 3
34667: PPUSH
34668: CALL_OW 259
34672: PUSH
34673: LD_INT 3
34675: MUL
34676: MUL
34677: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34678: LD_VAR 0 6
34682: PPUSH
34683: CALL_OW 264
34687: PUSH
34688: LD_INT 5
34690: PUSH
34691: LD_INT 6
34693: PUSH
34694: LD_INT 46
34696: PUSH
34697: LD_INT 44
34699: PUSH
34700: LD_INT 47
34702: PUSH
34703: LD_INT 45
34705: PUSH
34706: LD_INT 28
34708: PUSH
34709: LD_INT 7
34711: PUSH
34712: LD_INT 27
34714: PUSH
34715: LD_INT 29
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: IN
34730: PUSH
34731: LD_VAR 0 1
34735: PPUSH
34736: LD_INT 52
34738: PPUSH
34739: CALL_OW 321
34743: PUSH
34744: LD_INT 2
34746: EQUAL
34747: AND
34748: IFFALSE 34765
// bpoints := bpoints * 1.2 ;
34750: LD_ADDR_VAR 0 10
34754: PUSH
34755: LD_VAR 0 10
34759: PUSH
34760: LD_REAL  1.20000000000000E+0000
34763: MUL
34764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34765: LD_VAR 0 6
34769: PPUSH
34770: CALL_OW 264
34774: PUSH
34775: LD_INT 6
34777: PUSH
34778: LD_INT 46
34780: PUSH
34781: LD_INT 47
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: IN
34789: IFFALSE 34806
// bpoints := bpoints * 1.2 ;
34791: LD_ADDR_VAR 0 10
34795: PUSH
34796: LD_VAR 0 10
34800: PUSH
34801: LD_REAL  1.20000000000000E+0000
34804: MUL
34805: ST_TO_ADDR
// end ; unit_building :
34806: GO 34820
34808: LD_INT 3
34810: DOUBLE
34811: EQUAL
34812: IFTRUE 34816
34814: GO 34819
34816: POP
// ; end ;
34817: GO 34820
34819: POP
// for j = 1 to 3 do
34820: LD_ADDR_VAR 0 7
34824: PUSH
34825: DOUBLE
34826: LD_INT 1
34828: DEC
34829: ST_TO_ADDR
34830: LD_INT 3
34832: PUSH
34833: FOR_TO
34834: IFFALSE 34887
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34836: LD_ADDR_VAR 0 5
34840: PUSH
34841: LD_VAR 0 5
34845: PPUSH
34846: LD_VAR 0 7
34850: PPUSH
34851: LD_VAR 0 5
34855: PUSH
34856: LD_VAR 0 7
34860: ARRAY
34861: PUSH
34862: LD_VAR 0 9
34866: PUSH
34867: LD_VAR 0 7
34871: ARRAY
34872: PUSH
34873: LD_VAR 0 10
34877: MUL
34878: PLUS
34879: PPUSH
34880: CALL_OW 1
34884: ST_TO_ADDR
34885: GO 34833
34887: POP
34888: POP
// end ;
34889: GO 33366
34891: POP
34892: POP
// result := Replace ( result , 4 , tmp ) ;
34893: LD_ADDR_VAR 0 5
34897: PUSH
34898: LD_VAR 0 5
34902: PPUSH
34903: LD_INT 4
34905: PPUSH
34906: LD_VAR 0 8
34910: PPUSH
34911: CALL_OW 1
34915: ST_TO_ADDR
// end ;
34916: LD_VAR 0 5
34920: RET
// export function DangerAtRange ( unit , range ) ; begin
34921: LD_INT 0
34923: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34924: LD_ADDR_VAR 0 3
34928: PUSH
34929: LD_VAR 0 1
34933: PPUSH
34934: CALL_OW 255
34938: PPUSH
34939: LD_VAR 0 1
34943: PPUSH
34944: CALL_OW 250
34948: PPUSH
34949: LD_VAR 0 1
34953: PPUSH
34954: CALL_OW 251
34958: PPUSH
34959: LD_VAR 0 2
34963: PPUSH
34964: CALL 33218 0 4
34968: ST_TO_ADDR
// end ;
34969: LD_VAR 0 3
34973: RET
// export function DangerInArea ( side , area ) ; begin
34974: LD_INT 0
34976: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34977: LD_ADDR_VAR 0 3
34981: PUSH
34982: LD_VAR 0 2
34986: PPUSH
34987: LD_INT 81
34989: PUSH
34990: LD_VAR 0 1
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PPUSH
34999: CALL_OW 70
35003: ST_TO_ADDR
// end ;
35004: LD_VAR 0 3
35008: RET
// export function IsExtension ( b ) ; begin
35009: LD_INT 0
35011: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35012: LD_ADDR_VAR 0 2
35016: PUSH
35017: LD_VAR 0 1
35021: PUSH
35022: LD_INT 23
35024: PUSH
35025: LD_INT 20
35027: PUSH
35028: LD_INT 22
35030: PUSH
35031: LD_INT 17
35033: PUSH
35034: LD_INT 24
35036: PUSH
35037: LD_INT 21
35039: PUSH
35040: LD_INT 19
35042: PUSH
35043: LD_INT 16
35045: PUSH
35046: LD_INT 25
35048: PUSH
35049: LD_INT 18
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: IN
35064: ST_TO_ADDR
// end ;
35065: LD_VAR 0 2
35069: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35070: LD_INT 0
35072: PPUSH
35073: PPUSH
35074: PPUSH
// result := [ ] ;
35075: LD_ADDR_VAR 0 4
35079: PUSH
35080: EMPTY
35081: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35082: LD_ADDR_VAR 0 5
35086: PUSH
35087: LD_VAR 0 2
35091: PPUSH
35092: LD_INT 21
35094: PUSH
35095: LD_INT 3
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PPUSH
35102: CALL_OW 70
35106: ST_TO_ADDR
// if not tmp then
35107: LD_VAR 0 5
35111: NOT
35112: IFFALSE 35116
// exit ;
35114: GO 35180
// if checkLink then
35116: LD_VAR 0 3
35120: IFFALSE 35170
// begin for i in tmp do
35122: LD_ADDR_VAR 0 6
35126: PUSH
35127: LD_VAR 0 5
35131: PUSH
35132: FOR_IN
35133: IFFALSE 35168
// if GetBase ( i ) <> base then
35135: LD_VAR 0 6
35139: PPUSH
35140: CALL_OW 274
35144: PUSH
35145: LD_VAR 0 1
35149: NONEQUAL
35150: IFFALSE 35166
// ComLinkToBase ( base , i ) ;
35152: LD_VAR 0 1
35156: PPUSH
35157: LD_VAR 0 6
35161: PPUSH
35162: CALL_OW 169
35166: GO 35132
35168: POP
35169: POP
// end ; result := tmp ;
35170: LD_ADDR_VAR 0 4
35174: PUSH
35175: LD_VAR 0 5
35179: ST_TO_ADDR
// end ;
35180: LD_VAR 0 4
35184: RET
// export function ComComplete ( units , b ) ; var i ; begin
35185: LD_INT 0
35187: PPUSH
35188: PPUSH
// if not units then
35189: LD_VAR 0 1
35193: NOT
35194: IFFALSE 35198
// exit ;
35196: GO 35288
// for i in units do
35198: LD_ADDR_VAR 0 4
35202: PUSH
35203: LD_VAR 0 1
35207: PUSH
35208: FOR_IN
35209: IFFALSE 35286
// if BuildingStatus ( b ) = bs_build then
35211: LD_VAR 0 2
35215: PPUSH
35216: CALL_OW 461
35220: PUSH
35221: LD_INT 1
35223: EQUAL
35224: IFFALSE 35284
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35226: LD_VAR 0 4
35230: PPUSH
35231: LD_STRING h
35233: PUSH
35234: LD_VAR 0 2
35238: PPUSH
35239: CALL_OW 250
35243: PUSH
35244: LD_VAR 0 2
35248: PPUSH
35249: CALL_OW 251
35253: PUSH
35254: LD_VAR 0 2
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: PUSH
35277: EMPTY
35278: LIST
35279: PPUSH
35280: CALL_OW 446
35284: GO 35208
35286: POP
35287: POP
// end ;
35288: LD_VAR 0 3
35292: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35293: LD_INT 0
35295: PPUSH
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35301: LD_VAR 0 1
35305: NOT
35306: PUSH
35307: LD_VAR 0 1
35311: PPUSH
35312: CALL_OW 263
35316: PUSH
35317: LD_INT 2
35319: NONEQUAL
35320: OR
35321: IFFALSE 35325
// exit ;
35323: GO 35641
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35325: LD_ADDR_VAR 0 6
35329: PUSH
35330: LD_INT 22
35332: PUSH
35333: LD_VAR 0 1
35337: PPUSH
35338: CALL_OW 255
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: LD_INT 30
35352: PUSH
35353: LD_INT 36
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 34
35362: PUSH
35363: LD_INT 31
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PPUSH
35379: CALL_OW 69
35383: ST_TO_ADDR
// if not tmp then
35384: LD_VAR 0 6
35388: NOT
35389: IFFALSE 35393
// exit ;
35391: GO 35641
// result := [ ] ;
35393: LD_ADDR_VAR 0 2
35397: PUSH
35398: EMPTY
35399: ST_TO_ADDR
// for i in tmp do
35400: LD_ADDR_VAR 0 3
35404: PUSH
35405: LD_VAR 0 6
35409: PUSH
35410: FOR_IN
35411: IFFALSE 35482
// begin t := UnitsInside ( i ) ;
35413: LD_ADDR_VAR 0 4
35417: PUSH
35418: LD_VAR 0 3
35422: PPUSH
35423: CALL_OW 313
35427: ST_TO_ADDR
// if t then
35428: LD_VAR 0 4
35432: IFFALSE 35480
// for j in t do
35434: LD_ADDR_VAR 0 7
35438: PUSH
35439: LD_VAR 0 4
35443: PUSH
35444: FOR_IN
35445: IFFALSE 35478
// result := Replace ( result , result + 1 , j ) ;
35447: LD_ADDR_VAR 0 2
35451: PUSH
35452: LD_VAR 0 2
35456: PPUSH
35457: LD_VAR 0 2
35461: PUSH
35462: LD_INT 1
35464: PLUS
35465: PPUSH
35466: LD_VAR 0 7
35470: PPUSH
35471: CALL_OW 1
35475: ST_TO_ADDR
35476: GO 35444
35478: POP
35479: POP
// end ;
35480: GO 35410
35482: POP
35483: POP
// if not result then
35484: LD_VAR 0 2
35488: NOT
35489: IFFALSE 35493
// exit ;
35491: GO 35641
// mech := result [ 1 ] ;
35493: LD_ADDR_VAR 0 5
35497: PUSH
35498: LD_VAR 0 2
35502: PUSH
35503: LD_INT 1
35505: ARRAY
35506: ST_TO_ADDR
// if result > 1 then
35507: LD_VAR 0 2
35511: PUSH
35512: LD_INT 1
35514: GREATER
35515: IFFALSE 35627
// begin for i = 2 to result do
35517: LD_ADDR_VAR 0 3
35521: PUSH
35522: DOUBLE
35523: LD_INT 2
35525: DEC
35526: ST_TO_ADDR
35527: LD_VAR 0 2
35531: PUSH
35532: FOR_TO
35533: IFFALSE 35625
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35535: LD_ADDR_VAR 0 4
35539: PUSH
35540: LD_VAR 0 2
35544: PUSH
35545: LD_VAR 0 3
35549: ARRAY
35550: PPUSH
35551: LD_INT 3
35553: PPUSH
35554: CALL_OW 259
35558: PUSH
35559: LD_VAR 0 2
35563: PUSH
35564: LD_VAR 0 3
35568: ARRAY
35569: PPUSH
35570: CALL_OW 432
35574: MINUS
35575: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35576: LD_VAR 0 4
35580: PUSH
35581: LD_VAR 0 5
35585: PPUSH
35586: LD_INT 3
35588: PPUSH
35589: CALL_OW 259
35593: PUSH
35594: LD_VAR 0 5
35598: PPUSH
35599: CALL_OW 432
35603: MINUS
35604: GREATEREQUAL
35605: IFFALSE 35623
// mech := result [ i ] ;
35607: LD_ADDR_VAR 0 5
35611: PUSH
35612: LD_VAR 0 2
35616: PUSH
35617: LD_VAR 0 3
35621: ARRAY
35622: ST_TO_ADDR
// end ;
35623: GO 35532
35625: POP
35626: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35627: LD_VAR 0 1
35631: PPUSH
35632: LD_VAR 0 5
35636: PPUSH
35637: CALL_OW 135
// end ;
35641: LD_VAR 0 2
35645: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35646: LD_INT 0
35648: PPUSH
35649: PPUSH
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
// result := [ ] ;
35661: LD_ADDR_VAR 0 7
35665: PUSH
35666: EMPTY
35667: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35668: LD_VAR 0 1
35672: PPUSH
35673: CALL_OW 266
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: IN
35688: NOT
35689: IFFALSE 35693
// exit ;
35691: GO 37327
// if name then
35693: LD_VAR 0 3
35697: IFFALSE 35713
// SetBName ( base_dep , name ) ;
35699: LD_VAR 0 1
35703: PPUSH
35704: LD_VAR 0 3
35708: PPUSH
35709: CALL_OW 500
// base := GetBase ( base_dep ) ;
35713: LD_ADDR_VAR 0 15
35717: PUSH
35718: LD_VAR 0 1
35722: PPUSH
35723: CALL_OW 274
35727: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35728: LD_ADDR_VAR 0 16
35732: PUSH
35733: LD_VAR 0 1
35737: PPUSH
35738: CALL_OW 255
35742: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35743: LD_ADDR_VAR 0 17
35747: PUSH
35748: LD_VAR 0 1
35752: PPUSH
35753: CALL_OW 248
35757: ST_TO_ADDR
// if sources then
35758: LD_VAR 0 5
35762: IFFALSE 35809
// for i = 1 to 3 do
35764: LD_ADDR_VAR 0 8
35768: PUSH
35769: DOUBLE
35770: LD_INT 1
35772: DEC
35773: ST_TO_ADDR
35774: LD_INT 3
35776: PUSH
35777: FOR_TO
35778: IFFALSE 35807
// AddResourceType ( base , i , sources [ i ] ) ;
35780: LD_VAR 0 15
35784: PPUSH
35785: LD_VAR 0 8
35789: PPUSH
35790: LD_VAR 0 5
35794: PUSH
35795: LD_VAR 0 8
35799: ARRAY
35800: PPUSH
35801: CALL_OW 276
35805: GO 35777
35807: POP
35808: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35809: LD_ADDR_VAR 0 18
35813: PUSH
35814: LD_VAR 0 15
35818: PPUSH
35819: LD_VAR 0 2
35823: PPUSH
35824: LD_INT 1
35826: PPUSH
35827: CALL 35070 0 3
35831: ST_TO_ADDR
// InitHc ;
35832: CALL_OW 19
// InitUc ;
35836: CALL_OW 18
// uc_side := side ;
35840: LD_ADDR_OWVAR 20
35844: PUSH
35845: LD_VAR 0 16
35849: ST_TO_ADDR
// uc_nation := nation ;
35850: LD_ADDR_OWVAR 21
35854: PUSH
35855: LD_VAR 0 17
35859: ST_TO_ADDR
// if buildings then
35860: LD_VAR 0 18
35864: IFFALSE 37186
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35866: LD_ADDR_VAR 0 19
35870: PUSH
35871: LD_VAR 0 18
35875: PPUSH
35876: LD_INT 2
35878: PUSH
35879: LD_INT 30
35881: PUSH
35882: LD_INT 29
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 30
35891: PUSH
35892: LD_INT 30
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: PPUSH
35904: CALL_OW 72
35908: ST_TO_ADDR
// if tmp then
35909: LD_VAR 0 19
35913: IFFALSE 35961
// for i in tmp do
35915: LD_ADDR_VAR 0 8
35919: PUSH
35920: LD_VAR 0 19
35924: PUSH
35925: FOR_IN
35926: IFFALSE 35959
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35928: LD_VAR 0 8
35932: PPUSH
35933: CALL_OW 250
35937: PPUSH
35938: LD_VAR 0 8
35942: PPUSH
35943: CALL_OW 251
35947: PPUSH
35948: LD_VAR 0 16
35952: PPUSH
35953: CALL_OW 441
35957: GO 35925
35959: POP
35960: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35961: LD_VAR 0 18
35965: PPUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 30
35971: PUSH
35972: LD_INT 32
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 30
35981: PUSH
35982: LD_INT 33
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: PPUSH
35994: CALL_OW 72
35998: IFFALSE 36086
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36000: LD_ADDR_VAR 0 8
36004: PUSH
36005: LD_VAR 0 18
36009: PPUSH
36010: LD_INT 2
36012: PUSH
36013: LD_INT 30
36015: PUSH
36016: LD_INT 32
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 30
36025: PUSH
36026: LD_INT 33
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: LIST
36037: PPUSH
36038: CALL_OW 72
36042: PUSH
36043: FOR_IN
36044: IFFALSE 36084
// begin if not GetBWeapon ( i ) then
36046: LD_VAR 0 8
36050: PPUSH
36051: CALL_OW 269
36055: NOT
36056: IFFALSE 36082
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36058: LD_VAR 0 8
36062: PPUSH
36063: LD_VAR 0 8
36067: PPUSH
36068: LD_VAR 0 2
36072: PPUSH
36073: CALL 37332 0 2
36077: PPUSH
36078: CALL_OW 431
// end ;
36082: GO 36043
36084: POP
36085: POP
// end ; for i = 1 to personel do
36086: LD_ADDR_VAR 0 8
36090: PUSH
36091: DOUBLE
36092: LD_INT 1
36094: DEC
36095: ST_TO_ADDR
36096: LD_VAR 0 6
36100: PUSH
36101: FOR_TO
36102: IFFALSE 37166
// begin if i > 4 then
36104: LD_VAR 0 8
36108: PUSH
36109: LD_INT 4
36111: GREATER
36112: IFFALSE 36116
// break ;
36114: GO 37166
// case i of 1 :
36116: LD_VAR 0 8
36120: PUSH
36121: LD_INT 1
36123: DOUBLE
36124: EQUAL
36125: IFTRUE 36129
36127: GO 36209
36129: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36130: LD_ADDR_VAR 0 12
36134: PUSH
36135: LD_VAR 0 18
36139: PPUSH
36140: LD_INT 22
36142: PUSH
36143: LD_VAR 0 16
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 58
36154: PUSH
36155: EMPTY
36156: LIST
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: LD_INT 30
36163: PUSH
36164: LD_INT 32
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 30
36173: PUSH
36174: LD_INT 4
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 30
36183: PUSH
36184: LD_INT 5
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: LIST
36201: PPUSH
36202: CALL_OW 72
36206: ST_TO_ADDR
36207: GO 36431
36209: LD_INT 2
36211: DOUBLE
36212: EQUAL
36213: IFTRUE 36217
36215: GO 36279
36217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36218: LD_ADDR_VAR 0 12
36222: PUSH
36223: LD_VAR 0 18
36227: PPUSH
36228: LD_INT 22
36230: PUSH
36231: LD_VAR 0 16
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 2
36242: PUSH
36243: LD_INT 30
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 30
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PPUSH
36272: CALL_OW 72
36276: ST_TO_ADDR
36277: GO 36431
36279: LD_INT 3
36281: DOUBLE
36282: EQUAL
36283: IFTRUE 36287
36285: GO 36349
36287: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36288: LD_ADDR_VAR 0 12
36292: PUSH
36293: LD_VAR 0 18
36297: PPUSH
36298: LD_INT 22
36300: PUSH
36301: LD_VAR 0 16
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 2
36312: PUSH
36313: LD_INT 30
36315: PUSH
36316: LD_INT 2
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 30
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: LIST
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PPUSH
36342: CALL_OW 72
36346: ST_TO_ADDR
36347: GO 36431
36349: LD_INT 4
36351: DOUBLE
36352: EQUAL
36353: IFTRUE 36357
36355: GO 36430
36357: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36358: LD_ADDR_VAR 0 12
36362: PUSH
36363: LD_VAR 0 18
36367: PPUSH
36368: LD_INT 22
36370: PUSH
36371: LD_VAR 0 16
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: LD_INT 30
36385: PUSH
36386: LD_INT 6
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 30
36395: PUSH
36396: LD_INT 7
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 30
36405: PUSH
36406: LD_INT 8
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PPUSH
36423: CALL_OW 72
36427: ST_TO_ADDR
36428: GO 36431
36430: POP
// if i = 1 then
36431: LD_VAR 0 8
36435: PUSH
36436: LD_INT 1
36438: EQUAL
36439: IFFALSE 36550
// begin tmp := [ ] ;
36441: LD_ADDR_VAR 0 19
36445: PUSH
36446: EMPTY
36447: ST_TO_ADDR
// for j in f do
36448: LD_ADDR_VAR 0 9
36452: PUSH
36453: LD_VAR 0 12
36457: PUSH
36458: FOR_IN
36459: IFFALSE 36532
// if GetBType ( j ) = b_bunker then
36461: LD_VAR 0 9
36465: PPUSH
36466: CALL_OW 266
36470: PUSH
36471: LD_INT 32
36473: EQUAL
36474: IFFALSE 36501
// tmp := Insert ( tmp , 1 , j ) else
36476: LD_ADDR_VAR 0 19
36480: PUSH
36481: LD_VAR 0 19
36485: PPUSH
36486: LD_INT 1
36488: PPUSH
36489: LD_VAR 0 9
36493: PPUSH
36494: CALL_OW 2
36498: ST_TO_ADDR
36499: GO 36530
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36501: LD_ADDR_VAR 0 19
36505: PUSH
36506: LD_VAR 0 19
36510: PPUSH
36511: LD_VAR 0 19
36515: PUSH
36516: LD_INT 1
36518: PLUS
36519: PPUSH
36520: LD_VAR 0 9
36524: PPUSH
36525: CALL_OW 2
36529: ST_TO_ADDR
36530: GO 36458
36532: POP
36533: POP
// if tmp then
36534: LD_VAR 0 19
36538: IFFALSE 36550
// f := tmp ;
36540: LD_ADDR_VAR 0 12
36544: PUSH
36545: LD_VAR 0 19
36549: ST_TO_ADDR
// end ; x := personel [ i ] ;
36550: LD_ADDR_VAR 0 13
36554: PUSH
36555: LD_VAR 0 6
36559: PUSH
36560: LD_VAR 0 8
36564: ARRAY
36565: ST_TO_ADDR
// if x = - 1 then
36566: LD_VAR 0 13
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: EQUAL
36575: IFFALSE 36784
// begin for j in f do
36577: LD_ADDR_VAR 0 9
36581: PUSH
36582: LD_VAR 0 12
36586: PUSH
36587: FOR_IN
36588: IFFALSE 36780
// repeat InitHc ;
36590: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36594: LD_VAR 0 9
36598: PPUSH
36599: CALL_OW 266
36603: PUSH
36604: LD_INT 5
36606: EQUAL
36607: IFFALSE 36677
// begin if UnitsInside ( j ) < 3 then
36609: LD_VAR 0 9
36613: PPUSH
36614: CALL_OW 313
36618: PUSH
36619: LD_INT 3
36621: LESS
36622: IFFALSE 36658
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36624: LD_INT 0
36626: PPUSH
36627: LD_INT 5
36629: PUSH
36630: LD_INT 8
36632: PUSH
36633: LD_INT 9
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: PUSH
36641: LD_VAR 0 17
36645: ARRAY
36646: PPUSH
36647: LD_VAR 0 4
36651: PPUSH
36652: CALL_OW 380
36656: GO 36675
// PrepareHuman ( false , i , skill ) ;
36658: LD_INT 0
36660: PPUSH
36661: LD_VAR 0 8
36665: PPUSH
36666: LD_VAR 0 4
36670: PPUSH
36671: CALL_OW 380
// end else
36675: GO 36694
// PrepareHuman ( false , i , skill ) ;
36677: LD_INT 0
36679: PPUSH
36680: LD_VAR 0 8
36684: PPUSH
36685: LD_VAR 0 4
36689: PPUSH
36690: CALL_OW 380
// un := CreateHuman ;
36694: LD_ADDR_VAR 0 14
36698: PUSH
36699: CALL_OW 44
36703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36704: LD_ADDR_VAR 0 7
36708: PUSH
36709: LD_VAR 0 7
36713: PPUSH
36714: LD_INT 1
36716: PPUSH
36717: LD_VAR 0 14
36721: PPUSH
36722: CALL_OW 2
36726: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36727: LD_VAR 0 14
36731: PPUSH
36732: LD_VAR 0 9
36736: PPUSH
36737: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36741: LD_VAR 0 9
36745: PPUSH
36746: CALL_OW 313
36750: PUSH
36751: LD_INT 6
36753: EQUAL
36754: PUSH
36755: LD_VAR 0 9
36759: PPUSH
36760: CALL_OW 266
36764: PUSH
36765: LD_INT 32
36767: PUSH
36768: LD_INT 31
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: IN
36775: OR
36776: IFFALSE 36590
36778: GO 36587
36780: POP
36781: POP
// end else
36782: GO 37164
// for j = 1 to x do
36784: LD_ADDR_VAR 0 9
36788: PUSH
36789: DOUBLE
36790: LD_INT 1
36792: DEC
36793: ST_TO_ADDR
36794: LD_VAR 0 13
36798: PUSH
36799: FOR_TO
36800: IFFALSE 37162
// begin InitHc ;
36802: CALL_OW 19
// if not f then
36806: LD_VAR 0 12
36810: NOT
36811: IFFALSE 36900
// begin PrepareHuman ( false , i , skill ) ;
36813: LD_INT 0
36815: PPUSH
36816: LD_VAR 0 8
36820: PPUSH
36821: LD_VAR 0 4
36825: PPUSH
36826: CALL_OW 380
// un := CreateHuman ;
36830: LD_ADDR_VAR 0 14
36834: PUSH
36835: CALL_OW 44
36839: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36840: LD_ADDR_VAR 0 7
36844: PUSH
36845: LD_VAR 0 7
36849: PPUSH
36850: LD_INT 1
36852: PPUSH
36853: LD_VAR 0 14
36857: PPUSH
36858: CALL_OW 2
36862: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36863: LD_VAR 0 14
36867: PPUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 250
36877: PPUSH
36878: LD_VAR 0 1
36882: PPUSH
36883: CALL_OW 251
36887: PPUSH
36888: LD_INT 10
36890: PPUSH
36891: LD_INT 0
36893: PPUSH
36894: CALL_OW 50
// continue ;
36898: GO 36799
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36900: LD_VAR 0 12
36904: PUSH
36905: LD_INT 1
36907: ARRAY
36908: PPUSH
36909: CALL_OW 313
36913: PUSH
36914: LD_VAR 0 12
36918: PUSH
36919: LD_INT 1
36921: ARRAY
36922: PPUSH
36923: CALL_OW 266
36927: PUSH
36928: LD_INT 32
36930: PUSH
36931: LD_INT 31
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: IN
36938: AND
36939: PUSH
36940: LD_VAR 0 12
36944: PUSH
36945: LD_INT 1
36947: ARRAY
36948: PPUSH
36949: CALL_OW 313
36953: PUSH
36954: LD_INT 6
36956: EQUAL
36957: OR
36958: IFFALSE 36978
// f := Delete ( f , 1 ) ;
36960: LD_ADDR_VAR 0 12
36964: PUSH
36965: LD_VAR 0 12
36969: PPUSH
36970: LD_INT 1
36972: PPUSH
36973: CALL_OW 3
36977: ST_TO_ADDR
// if not f then
36978: LD_VAR 0 12
36982: NOT
36983: IFFALSE 37001
// begin x := x + 2 ;
36985: LD_ADDR_VAR 0 13
36989: PUSH
36990: LD_VAR 0 13
36994: PUSH
36995: LD_INT 2
36997: PLUS
36998: ST_TO_ADDR
// continue ;
36999: GO 36799
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37001: LD_VAR 0 12
37005: PUSH
37006: LD_INT 1
37008: ARRAY
37009: PPUSH
37010: CALL_OW 266
37014: PUSH
37015: LD_INT 5
37017: EQUAL
37018: IFFALSE 37092
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37020: LD_VAR 0 12
37024: PUSH
37025: LD_INT 1
37027: ARRAY
37028: PPUSH
37029: CALL_OW 313
37033: PUSH
37034: LD_INT 3
37036: LESS
37037: IFFALSE 37073
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37039: LD_INT 0
37041: PPUSH
37042: LD_INT 5
37044: PUSH
37045: LD_INT 8
37047: PUSH
37048: LD_INT 9
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: PUSH
37056: LD_VAR 0 17
37060: ARRAY
37061: PPUSH
37062: LD_VAR 0 4
37066: PPUSH
37067: CALL_OW 380
37071: GO 37090
// PrepareHuman ( false , i , skill ) ;
37073: LD_INT 0
37075: PPUSH
37076: LD_VAR 0 8
37080: PPUSH
37081: LD_VAR 0 4
37085: PPUSH
37086: CALL_OW 380
// end else
37090: GO 37109
// PrepareHuman ( false , i , skill ) ;
37092: LD_INT 0
37094: PPUSH
37095: LD_VAR 0 8
37099: PPUSH
37100: LD_VAR 0 4
37104: PPUSH
37105: CALL_OW 380
// un := CreateHuman ;
37109: LD_ADDR_VAR 0 14
37113: PUSH
37114: CALL_OW 44
37118: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37119: LD_ADDR_VAR 0 7
37123: PUSH
37124: LD_VAR 0 7
37128: PPUSH
37129: LD_INT 1
37131: PPUSH
37132: LD_VAR 0 14
37136: PPUSH
37137: CALL_OW 2
37141: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37142: LD_VAR 0 14
37146: PPUSH
37147: LD_VAR 0 12
37151: PUSH
37152: LD_INT 1
37154: ARRAY
37155: PPUSH
37156: CALL_OW 52
// end ;
37160: GO 36799
37162: POP
37163: POP
// end ;
37164: GO 36101
37166: POP
37167: POP
// result := result ^ buildings ;
37168: LD_ADDR_VAR 0 7
37172: PUSH
37173: LD_VAR 0 7
37177: PUSH
37178: LD_VAR 0 18
37182: ADD
37183: ST_TO_ADDR
// end else
37184: GO 37327
// begin for i = 1 to personel do
37186: LD_ADDR_VAR 0 8
37190: PUSH
37191: DOUBLE
37192: LD_INT 1
37194: DEC
37195: ST_TO_ADDR
37196: LD_VAR 0 6
37200: PUSH
37201: FOR_TO
37202: IFFALSE 37325
// begin if i > 4 then
37204: LD_VAR 0 8
37208: PUSH
37209: LD_INT 4
37211: GREATER
37212: IFFALSE 37216
// break ;
37214: GO 37325
// x := personel [ i ] ;
37216: LD_ADDR_VAR 0 13
37220: PUSH
37221: LD_VAR 0 6
37225: PUSH
37226: LD_VAR 0 8
37230: ARRAY
37231: ST_TO_ADDR
// if x = - 1 then
37232: LD_VAR 0 13
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: EQUAL
37241: IFFALSE 37245
// continue ;
37243: GO 37201
// PrepareHuman ( false , i , skill ) ;
37245: LD_INT 0
37247: PPUSH
37248: LD_VAR 0 8
37252: PPUSH
37253: LD_VAR 0 4
37257: PPUSH
37258: CALL_OW 380
// un := CreateHuman ;
37262: LD_ADDR_VAR 0 14
37266: PUSH
37267: CALL_OW 44
37271: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37272: LD_VAR 0 14
37276: PPUSH
37277: LD_VAR 0 1
37281: PPUSH
37282: CALL_OW 250
37286: PPUSH
37287: LD_VAR 0 1
37291: PPUSH
37292: CALL_OW 251
37296: PPUSH
37297: LD_INT 10
37299: PPUSH
37300: LD_INT 0
37302: PPUSH
37303: CALL_OW 50
// result := result ^ un ;
37307: LD_ADDR_VAR 0 7
37311: PUSH
37312: LD_VAR 0 7
37316: PUSH
37317: LD_VAR 0 14
37321: ADD
37322: ST_TO_ADDR
// end ;
37323: GO 37201
37325: POP
37326: POP
// end ; end ;
37327: LD_VAR 0 7
37331: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37332: LD_INT 0
37334: PPUSH
37335: PPUSH
37336: PPUSH
37337: PPUSH
37338: PPUSH
37339: PPUSH
37340: PPUSH
37341: PPUSH
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
// result := false ;
37350: LD_ADDR_VAR 0 3
37354: PUSH
37355: LD_INT 0
37357: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37358: LD_VAR 0 1
37362: NOT
37363: PUSH
37364: LD_VAR 0 1
37368: PPUSH
37369: CALL_OW 266
37373: PUSH
37374: LD_INT 32
37376: PUSH
37377: LD_INT 33
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: IN
37384: NOT
37385: OR
37386: IFFALSE 37390
// exit ;
37388: GO 38499
// nat := GetNation ( tower ) ;
37390: LD_ADDR_VAR 0 12
37394: PUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 248
37404: ST_TO_ADDR
// side := GetSide ( tower ) ;
37405: LD_ADDR_VAR 0 16
37409: PUSH
37410: LD_VAR 0 1
37414: PPUSH
37415: CALL_OW 255
37419: ST_TO_ADDR
// x := GetX ( tower ) ;
37420: LD_ADDR_VAR 0 10
37424: PUSH
37425: LD_VAR 0 1
37429: PPUSH
37430: CALL_OW 250
37434: ST_TO_ADDR
// y := GetY ( tower ) ;
37435: LD_ADDR_VAR 0 11
37439: PUSH
37440: LD_VAR 0 1
37444: PPUSH
37445: CALL_OW 251
37449: ST_TO_ADDR
// if not x or not y then
37450: LD_VAR 0 10
37454: NOT
37455: PUSH
37456: LD_VAR 0 11
37460: NOT
37461: OR
37462: IFFALSE 37466
// exit ;
37464: GO 38499
// weapon := 0 ;
37466: LD_ADDR_VAR 0 18
37470: PUSH
37471: LD_INT 0
37473: ST_TO_ADDR
// fac_list := [ ] ;
37474: LD_ADDR_VAR 0 17
37478: PUSH
37479: EMPTY
37480: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37481: LD_ADDR_VAR 0 6
37485: PUSH
37486: LD_VAR 0 1
37490: PPUSH
37491: CALL_OW 274
37495: PPUSH
37496: LD_VAR 0 2
37500: PPUSH
37501: LD_INT 0
37503: PPUSH
37504: CALL 35070 0 3
37508: PPUSH
37509: LD_INT 30
37511: PUSH
37512: LD_INT 3
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PPUSH
37519: CALL_OW 72
37523: ST_TO_ADDR
// if not factories then
37524: LD_VAR 0 6
37528: NOT
37529: IFFALSE 37533
// exit ;
37531: GO 38499
// for i in factories do
37533: LD_ADDR_VAR 0 8
37537: PUSH
37538: LD_VAR 0 6
37542: PUSH
37543: FOR_IN
37544: IFFALSE 37569
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37546: LD_ADDR_VAR 0 17
37550: PUSH
37551: LD_VAR 0 17
37555: PUSH
37556: LD_VAR 0 8
37560: PPUSH
37561: CALL_OW 478
37565: UNION
37566: ST_TO_ADDR
37567: GO 37543
37569: POP
37570: POP
// if not fac_list then
37571: LD_VAR 0 17
37575: NOT
37576: IFFALSE 37580
// exit ;
37578: GO 38499
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37580: LD_ADDR_VAR 0 5
37584: PUSH
37585: LD_INT 4
37587: PUSH
37588: LD_INT 5
37590: PUSH
37591: LD_INT 9
37593: PUSH
37594: LD_INT 10
37596: PUSH
37597: LD_INT 6
37599: PUSH
37600: LD_INT 7
37602: PUSH
37603: LD_INT 11
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 27
37617: PUSH
37618: LD_INT 28
37620: PUSH
37621: LD_INT 26
37623: PUSH
37624: LD_INT 30
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 43
37635: PUSH
37636: LD_INT 44
37638: PUSH
37639: LD_INT 46
37641: PUSH
37642: LD_INT 45
37644: PUSH
37645: LD_INT 47
37647: PUSH
37648: LD_INT 49
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: PUSH
37664: LD_VAR 0 12
37668: ARRAY
37669: ST_TO_ADDR
// list := list isect fac_list ;
37670: LD_ADDR_VAR 0 5
37674: PUSH
37675: LD_VAR 0 5
37679: PUSH
37680: LD_VAR 0 17
37684: ISECT
37685: ST_TO_ADDR
// if not list then
37686: LD_VAR 0 5
37690: NOT
37691: IFFALSE 37695
// exit ;
37693: GO 38499
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37695: LD_VAR 0 12
37699: PUSH
37700: LD_INT 3
37702: EQUAL
37703: PUSH
37704: LD_INT 49
37706: PUSH
37707: LD_VAR 0 5
37711: IN
37712: AND
37713: PUSH
37714: LD_INT 31
37716: PPUSH
37717: LD_VAR 0 16
37721: PPUSH
37722: CALL_OW 321
37726: PUSH
37727: LD_INT 2
37729: EQUAL
37730: AND
37731: IFFALSE 37791
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37733: LD_INT 22
37735: PUSH
37736: LD_VAR 0 16
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 35
37747: PUSH
37748: LD_INT 49
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 91
37757: PUSH
37758: LD_VAR 0 1
37762: PUSH
37763: LD_INT 10
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: PPUSH
37776: CALL_OW 69
37780: NOT
37781: IFFALSE 37791
// weapon := ru_time_lapser ;
37783: LD_ADDR_VAR 0 18
37787: PUSH
37788: LD_INT 49
37790: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37791: LD_VAR 0 12
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: IN
37806: PUSH
37807: LD_INT 11
37809: PUSH
37810: LD_VAR 0 5
37814: IN
37815: PUSH
37816: LD_INT 30
37818: PUSH
37819: LD_VAR 0 5
37823: IN
37824: OR
37825: AND
37826: PUSH
37827: LD_INT 6
37829: PPUSH
37830: LD_VAR 0 16
37834: PPUSH
37835: CALL_OW 321
37839: PUSH
37840: LD_INT 2
37842: EQUAL
37843: AND
37844: IFFALSE 38009
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37846: LD_INT 22
37848: PUSH
37849: LD_VAR 0 16
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 2
37860: PUSH
37861: LD_INT 35
37863: PUSH
37864: LD_INT 11
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 35
37873: PUSH
37874: LD_INT 30
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 91
37888: PUSH
37889: LD_VAR 0 1
37893: PUSH
37894: LD_INT 18
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: LIST
37906: PPUSH
37907: CALL_OW 69
37911: NOT
37912: PUSH
37913: LD_INT 22
37915: PUSH
37916: LD_VAR 0 16
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 2
37927: PUSH
37928: LD_INT 30
37930: PUSH
37931: LD_INT 32
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 30
37940: PUSH
37941: LD_INT 33
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 91
37955: PUSH
37956: LD_VAR 0 1
37960: PUSH
37961: LD_INT 12
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: LIST
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: PUSH
37974: EMPTY
37975: LIST
37976: PPUSH
37977: CALL_OW 69
37981: PUSH
37982: LD_INT 2
37984: GREATER
37985: AND
37986: IFFALSE 38009
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37988: LD_ADDR_VAR 0 18
37992: PUSH
37993: LD_INT 11
37995: PUSH
37996: LD_INT 30
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_VAR 0 12
38007: ARRAY
38008: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38009: LD_VAR 0 18
38013: NOT
38014: PUSH
38015: LD_INT 40
38017: PPUSH
38018: LD_VAR 0 16
38022: PPUSH
38023: CALL_OW 321
38027: PUSH
38028: LD_INT 2
38030: EQUAL
38031: AND
38032: PUSH
38033: LD_INT 7
38035: PUSH
38036: LD_VAR 0 5
38040: IN
38041: PUSH
38042: LD_INT 28
38044: PUSH
38045: LD_VAR 0 5
38049: IN
38050: OR
38051: PUSH
38052: LD_INT 45
38054: PUSH
38055: LD_VAR 0 5
38059: IN
38060: OR
38061: AND
38062: IFFALSE 38316
// begin hex := GetHexInfo ( x , y ) ;
38064: LD_ADDR_VAR 0 4
38068: PUSH
38069: LD_VAR 0 10
38073: PPUSH
38074: LD_VAR 0 11
38078: PPUSH
38079: CALL_OW 546
38083: ST_TO_ADDR
// if hex [ 1 ] then
38084: LD_VAR 0 4
38088: PUSH
38089: LD_INT 1
38091: ARRAY
38092: IFFALSE 38096
// exit ;
38094: GO 38499
// height := hex [ 2 ] ;
38096: LD_ADDR_VAR 0 15
38100: PUSH
38101: LD_VAR 0 4
38105: PUSH
38106: LD_INT 2
38108: ARRAY
38109: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38110: LD_ADDR_VAR 0 14
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: LD_INT 2
38120: PUSH
38121: LD_INT 3
38123: PUSH
38124: LD_INT 5
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: ST_TO_ADDR
// for i in tmp do
38133: LD_ADDR_VAR 0 8
38137: PUSH
38138: LD_VAR 0 14
38142: PUSH
38143: FOR_IN
38144: IFFALSE 38314
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38146: LD_ADDR_VAR 0 9
38150: PUSH
38151: LD_VAR 0 10
38155: PPUSH
38156: LD_VAR 0 8
38160: PPUSH
38161: LD_INT 5
38163: PPUSH
38164: CALL_OW 272
38168: PUSH
38169: LD_VAR 0 11
38173: PPUSH
38174: LD_VAR 0 8
38178: PPUSH
38179: LD_INT 5
38181: PPUSH
38182: CALL_OW 273
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38191: LD_VAR 0 9
38195: PUSH
38196: LD_INT 1
38198: ARRAY
38199: PPUSH
38200: LD_VAR 0 9
38204: PUSH
38205: LD_INT 2
38207: ARRAY
38208: PPUSH
38209: CALL_OW 488
38213: IFFALSE 38312
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38215: LD_ADDR_VAR 0 4
38219: PUSH
38220: LD_VAR 0 9
38224: PUSH
38225: LD_INT 1
38227: ARRAY
38228: PPUSH
38229: LD_VAR 0 9
38233: PUSH
38234: LD_INT 2
38236: ARRAY
38237: PPUSH
38238: CALL_OW 546
38242: ST_TO_ADDR
// if hex [ 1 ] then
38243: LD_VAR 0 4
38247: PUSH
38248: LD_INT 1
38250: ARRAY
38251: IFFALSE 38255
// continue ;
38253: GO 38143
// h := hex [ 2 ] ;
38255: LD_ADDR_VAR 0 13
38259: PUSH
38260: LD_VAR 0 4
38264: PUSH
38265: LD_INT 2
38267: ARRAY
38268: ST_TO_ADDR
// if h + 7 < height then
38269: LD_VAR 0 13
38273: PUSH
38274: LD_INT 7
38276: PLUS
38277: PUSH
38278: LD_VAR 0 15
38282: LESS
38283: IFFALSE 38312
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38285: LD_ADDR_VAR 0 18
38289: PUSH
38290: LD_INT 7
38292: PUSH
38293: LD_INT 28
38295: PUSH
38296: LD_INT 45
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: PUSH
38304: LD_VAR 0 12
38308: ARRAY
38309: ST_TO_ADDR
// break ;
38310: GO 38314
// end ; end ; end ;
38312: GO 38143
38314: POP
38315: POP
// end ; if not weapon then
38316: LD_VAR 0 18
38320: NOT
38321: IFFALSE 38381
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38323: LD_ADDR_VAR 0 5
38327: PUSH
38328: LD_VAR 0 5
38332: PUSH
38333: LD_INT 11
38335: PUSH
38336: LD_INT 30
38338: PUSH
38339: LD_INT 49
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: DIFF
38347: ST_TO_ADDR
// if not list then
38348: LD_VAR 0 5
38352: NOT
38353: IFFALSE 38357
// exit ;
38355: GO 38499
// weapon := list [ rand ( 1 , list ) ] ;
38357: LD_ADDR_VAR 0 18
38361: PUSH
38362: LD_VAR 0 5
38366: PUSH
38367: LD_INT 1
38369: PPUSH
38370: LD_VAR 0 5
38374: PPUSH
38375: CALL_OW 12
38379: ARRAY
38380: ST_TO_ADDR
// end ; if weapon then
38381: LD_VAR 0 18
38385: IFFALSE 38499
// begin tmp := CostOfWeapon ( weapon ) ;
38387: LD_ADDR_VAR 0 14
38391: PUSH
38392: LD_VAR 0 18
38396: PPUSH
38397: CALL_OW 451
38401: ST_TO_ADDR
// j := GetBase ( tower ) ;
38402: LD_ADDR_VAR 0 9
38406: PUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 274
38416: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38417: LD_VAR 0 9
38421: PPUSH
38422: LD_INT 1
38424: PPUSH
38425: CALL_OW 275
38429: PUSH
38430: LD_VAR 0 14
38434: PUSH
38435: LD_INT 1
38437: ARRAY
38438: GREATEREQUAL
38439: PUSH
38440: LD_VAR 0 9
38444: PPUSH
38445: LD_INT 2
38447: PPUSH
38448: CALL_OW 275
38452: PUSH
38453: LD_VAR 0 14
38457: PUSH
38458: LD_INT 2
38460: ARRAY
38461: GREATEREQUAL
38462: AND
38463: PUSH
38464: LD_VAR 0 9
38468: PPUSH
38469: LD_INT 3
38471: PPUSH
38472: CALL_OW 275
38476: PUSH
38477: LD_VAR 0 14
38481: PUSH
38482: LD_INT 3
38484: ARRAY
38485: GREATEREQUAL
38486: AND
38487: IFFALSE 38499
// result := weapon ;
38489: LD_ADDR_VAR 0 3
38493: PUSH
38494: LD_VAR 0 18
38498: ST_TO_ADDR
// end ; end ;
38499: LD_VAR 0 3
38503: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38504: LD_INT 0
38506: PPUSH
38507: PPUSH
// result := true ;
38508: LD_ADDR_VAR 0 3
38512: PUSH
38513: LD_INT 1
38515: ST_TO_ADDR
// if array1 = array2 then
38516: LD_VAR 0 1
38520: PUSH
38521: LD_VAR 0 2
38525: EQUAL
38526: IFFALSE 38586
// begin for i = 1 to array1 do
38528: LD_ADDR_VAR 0 4
38532: PUSH
38533: DOUBLE
38534: LD_INT 1
38536: DEC
38537: ST_TO_ADDR
38538: LD_VAR 0 1
38542: PUSH
38543: FOR_TO
38544: IFFALSE 38582
// if array1 [ i ] <> array2 [ i ] then
38546: LD_VAR 0 1
38550: PUSH
38551: LD_VAR 0 4
38555: ARRAY
38556: PUSH
38557: LD_VAR 0 2
38561: PUSH
38562: LD_VAR 0 4
38566: ARRAY
38567: NONEQUAL
38568: IFFALSE 38580
// begin result := false ;
38570: LD_ADDR_VAR 0 3
38574: PUSH
38575: LD_INT 0
38577: ST_TO_ADDR
// break ;
38578: GO 38582
// end ;
38580: GO 38543
38582: POP
38583: POP
// end else
38584: GO 38594
// result := false ;
38586: LD_ADDR_VAR 0 3
38590: PUSH
38591: LD_INT 0
38593: ST_TO_ADDR
// end ;
38594: LD_VAR 0 3
38598: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38599: LD_INT 0
38601: PPUSH
38602: PPUSH
// if not array1 or not array2 then
38603: LD_VAR 0 1
38607: NOT
38608: PUSH
38609: LD_VAR 0 2
38613: NOT
38614: OR
38615: IFFALSE 38619
// exit ;
38617: GO 38683
// result := true ;
38619: LD_ADDR_VAR 0 3
38623: PUSH
38624: LD_INT 1
38626: ST_TO_ADDR
// for i = 1 to array1 do
38627: LD_ADDR_VAR 0 4
38631: PUSH
38632: DOUBLE
38633: LD_INT 1
38635: DEC
38636: ST_TO_ADDR
38637: LD_VAR 0 1
38641: PUSH
38642: FOR_TO
38643: IFFALSE 38681
// if array1 [ i ] <> array2 [ i ] then
38645: LD_VAR 0 1
38649: PUSH
38650: LD_VAR 0 4
38654: ARRAY
38655: PUSH
38656: LD_VAR 0 2
38660: PUSH
38661: LD_VAR 0 4
38665: ARRAY
38666: NONEQUAL
38667: IFFALSE 38679
// begin result := false ;
38669: LD_ADDR_VAR 0 3
38673: PUSH
38674: LD_INT 0
38676: ST_TO_ADDR
// break ;
38677: GO 38681
// end ;
38679: GO 38642
38681: POP
38682: POP
// end ;
38683: LD_VAR 0 3
38687: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38688: LD_INT 0
38690: PPUSH
38691: PPUSH
38692: PPUSH
// pom := GetBase ( fac ) ;
38693: LD_ADDR_VAR 0 5
38697: PUSH
38698: LD_VAR 0 1
38702: PPUSH
38703: CALL_OW 274
38707: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38708: LD_ADDR_VAR 0 4
38712: PUSH
38713: LD_VAR 0 2
38717: PUSH
38718: LD_INT 1
38720: ARRAY
38721: PPUSH
38722: LD_VAR 0 2
38726: PUSH
38727: LD_INT 2
38729: ARRAY
38730: PPUSH
38731: LD_VAR 0 2
38735: PUSH
38736: LD_INT 3
38738: ARRAY
38739: PPUSH
38740: LD_VAR 0 2
38744: PUSH
38745: LD_INT 4
38747: ARRAY
38748: PPUSH
38749: CALL_OW 449
38753: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38754: LD_ADDR_VAR 0 3
38758: PUSH
38759: LD_VAR 0 5
38763: PPUSH
38764: LD_INT 1
38766: PPUSH
38767: CALL_OW 275
38771: PUSH
38772: LD_VAR 0 4
38776: PUSH
38777: LD_INT 1
38779: ARRAY
38780: GREATEREQUAL
38781: PUSH
38782: LD_VAR 0 5
38786: PPUSH
38787: LD_INT 2
38789: PPUSH
38790: CALL_OW 275
38794: PUSH
38795: LD_VAR 0 4
38799: PUSH
38800: LD_INT 2
38802: ARRAY
38803: GREATEREQUAL
38804: AND
38805: PUSH
38806: LD_VAR 0 5
38810: PPUSH
38811: LD_INT 3
38813: PPUSH
38814: CALL_OW 275
38818: PUSH
38819: LD_VAR 0 4
38823: PUSH
38824: LD_INT 3
38826: ARRAY
38827: GREATEREQUAL
38828: AND
38829: ST_TO_ADDR
// end ;
38830: LD_VAR 0 3
38834: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38835: LD_INT 0
38837: PPUSH
38838: PPUSH
38839: PPUSH
38840: PPUSH
// pom := GetBase ( building ) ;
38841: LD_ADDR_VAR 0 3
38845: PUSH
38846: LD_VAR 0 1
38850: PPUSH
38851: CALL_OW 274
38855: ST_TO_ADDR
// if not pom then
38856: LD_VAR 0 3
38860: NOT
38861: IFFALSE 38865
// exit ;
38863: GO 39035
// btype := GetBType ( building ) ;
38865: LD_ADDR_VAR 0 5
38869: PUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: CALL_OW 266
38879: ST_TO_ADDR
// if btype = b_armoury then
38880: LD_VAR 0 5
38884: PUSH
38885: LD_INT 4
38887: EQUAL
38888: IFFALSE 38898
// btype := b_barracks ;
38890: LD_ADDR_VAR 0 5
38894: PUSH
38895: LD_INT 5
38897: ST_TO_ADDR
// if btype = b_depot then
38898: LD_VAR 0 5
38902: PUSH
38903: LD_INT 0
38905: EQUAL
38906: IFFALSE 38916
// btype := b_warehouse ;
38908: LD_ADDR_VAR 0 5
38912: PUSH
38913: LD_INT 1
38915: ST_TO_ADDR
// if btype = b_workshop then
38916: LD_VAR 0 5
38920: PUSH
38921: LD_INT 2
38923: EQUAL
38924: IFFALSE 38934
// btype := b_factory ;
38926: LD_ADDR_VAR 0 5
38930: PUSH
38931: LD_INT 3
38933: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38934: LD_ADDR_VAR 0 4
38938: PUSH
38939: LD_VAR 0 5
38943: PPUSH
38944: LD_VAR 0 1
38948: PPUSH
38949: CALL_OW 248
38953: PPUSH
38954: CALL_OW 450
38958: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38959: LD_ADDR_VAR 0 2
38963: PUSH
38964: LD_VAR 0 3
38968: PPUSH
38969: LD_INT 1
38971: PPUSH
38972: CALL_OW 275
38976: PUSH
38977: LD_VAR 0 4
38981: PUSH
38982: LD_INT 1
38984: ARRAY
38985: GREATEREQUAL
38986: PUSH
38987: LD_VAR 0 3
38991: PPUSH
38992: LD_INT 2
38994: PPUSH
38995: CALL_OW 275
38999: PUSH
39000: LD_VAR 0 4
39004: PUSH
39005: LD_INT 2
39007: ARRAY
39008: GREATEREQUAL
39009: AND
39010: PUSH
39011: LD_VAR 0 3
39015: PPUSH
39016: LD_INT 3
39018: PPUSH
39019: CALL_OW 275
39023: PUSH
39024: LD_VAR 0 4
39028: PUSH
39029: LD_INT 3
39031: ARRAY
39032: GREATEREQUAL
39033: AND
39034: ST_TO_ADDR
// end ;
39035: LD_VAR 0 2
39039: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39040: LD_INT 0
39042: PPUSH
39043: PPUSH
39044: PPUSH
// pom := GetBase ( building ) ;
39045: LD_ADDR_VAR 0 4
39049: PUSH
39050: LD_VAR 0 1
39054: PPUSH
39055: CALL_OW 274
39059: ST_TO_ADDR
// if not pom then
39060: LD_VAR 0 4
39064: NOT
39065: IFFALSE 39069
// exit ;
39067: GO 39170
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39069: LD_ADDR_VAR 0 5
39073: PUSH
39074: LD_VAR 0 2
39078: PPUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 248
39088: PPUSH
39089: CALL_OW 450
39093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39094: LD_ADDR_VAR 0 3
39098: PUSH
39099: LD_VAR 0 4
39103: PPUSH
39104: LD_INT 1
39106: PPUSH
39107: CALL_OW 275
39111: PUSH
39112: LD_VAR 0 5
39116: PUSH
39117: LD_INT 1
39119: ARRAY
39120: GREATEREQUAL
39121: PUSH
39122: LD_VAR 0 4
39126: PPUSH
39127: LD_INT 2
39129: PPUSH
39130: CALL_OW 275
39134: PUSH
39135: LD_VAR 0 5
39139: PUSH
39140: LD_INT 2
39142: ARRAY
39143: GREATEREQUAL
39144: AND
39145: PUSH
39146: LD_VAR 0 4
39150: PPUSH
39151: LD_INT 3
39153: PPUSH
39154: CALL_OW 275
39158: PUSH
39159: LD_VAR 0 5
39163: PUSH
39164: LD_INT 3
39166: ARRAY
39167: GREATEREQUAL
39168: AND
39169: ST_TO_ADDR
// end ;
39170: LD_VAR 0 3
39174: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39175: LD_INT 0
39177: PPUSH
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
// result := false ;
39188: LD_ADDR_VAR 0 8
39192: PUSH
39193: LD_INT 0
39195: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39196: LD_VAR 0 5
39200: NOT
39201: PUSH
39202: LD_VAR 0 1
39206: NOT
39207: OR
39208: PUSH
39209: LD_VAR 0 2
39213: NOT
39214: OR
39215: PUSH
39216: LD_VAR 0 3
39220: NOT
39221: OR
39222: IFFALSE 39226
// exit ;
39224: GO 40040
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39226: LD_ADDR_VAR 0 14
39230: PUSH
39231: LD_VAR 0 1
39235: PPUSH
39236: LD_VAR 0 2
39240: PPUSH
39241: LD_VAR 0 3
39245: PPUSH
39246: LD_VAR 0 4
39250: PPUSH
39251: LD_VAR 0 5
39255: PUSH
39256: LD_INT 1
39258: ARRAY
39259: PPUSH
39260: CALL_OW 248
39264: PPUSH
39265: LD_INT 0
39267: PPUSH
39268: CALL 41277 0 6
39272: ST_TO_ADDR
// if not hexes then
39273: LD_VAR 0 14
39277: NOT
39278: IFFALSE 39282
// exit ;
39280: GO 40040
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39282: LD_ADDR_VAR 0 17
39286: PUSH
39287: LD_VAR 0 5
39291: PPUSH
39292: LD_INT 22
39294: PUSH
39295: LD_VAR 0 13
39299: PPUSH
39300: CALL_OW 255
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: LD_INT 30
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 30
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: LIST
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PPUSH
39341: CALL_OW 72
39345: ST_TO_ADDR
// for i = 1 to hexes do
39346: LD_ADDR_VAR 0 9
39350: PUSH
39351: DOUBLE
39352: LD_INT 1
39354: DEC
39355: ST_TO_ADDR
39356: LD_VAR 0 14
39360: PUSH
39361: FOR_TO
39362: IFFALSE 40038
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39364: LD_ADDR_VAR 0 13
39368: PUSH
39369: LD_VAR 0 14
39373: PUSH
39374: LD_VAR 0 9
39378: ARRAY
39379: PUSH
39380: LD_INT 1
39382: ARRAY
39383: PPUSH
39384: LD_VAR 0 14
39388: PUSH
39389: LD_VAR 0 9
39393: ARRAY
39394: PUSH
39395: LD_INT 2
39397: ARRAY
39398: PPUSH
39399: CALL_OW 428
39403: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39404: LD_VAR 0 14
39408: PUSH
39409: LD_VAR 0 9
39413: ARRAY
39414: PUSH
39415: LD_INT 1
39417: ARRAY
39418: PPUSH
39419: LD_VAR 0 14
39423: PUSH
39424: LD_VAR 0 9
39428: ARRAY
39429: PUSH
39430: LD_INT 2
39432: ARRAY
39433: PPUSH
39434: CALL_OW 351
39438: PUSH
39439: LD_VAR 0 14
39443: PUSH
39444: LD_VAR 0 9
39448: ARRAY
39449: PUSH
39450: LD_INT 1
39452: ARRAY
39453: PPUSH
39454: LD_VAR 0 14
39458: PUSH
39459: LD_VAR 0 9
39463: ARRAY
39464: PUSH
39465: LD_INT 2
39467: ARRAY
39468: PPUSH
39469: CALL_OW 488
39473: NOT
39474: OR
39475: PUSH
39476: LD_VAR 0 13
39480: PPUSH
39481: CALL_OW 247
39485: PUSH
39486: LD_INT 3
39488: EQUAL
39489: OR
39490: IFFALSE 39496
// exit ;
39492: POP
39493: POP
39494: GO 40040
// if not tmp then
39496: LD_VAR 0 13
39500: NOT
39501: IFFALSE 39505
// continue ;
39503: GO 39361
// result := true ;
39505: LD_ADDR_VAR 0 8
39509: PUSH
39510: LD_INT 1
39512: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39513: LD_VAR 0 6
39517: PUSH
39518: LD_VAR 0 13
39522: PPUSH
39523: CALL_OW 247
39527: PUSH
39528: LD_INT 2
39530: EQUAL
39531: AND
39532: PUSH
39533: LD_VAR 0 13
39537: PPUSH
39538: CALL_OW 263
39542: PUSH
39543: LD_INT 1
39545: EQUAL
39546: AND
39547: IFFALSE 39711
// begin if IsDrivenBy ( tmp ) then
39549: LD_VAR 0 13
39553: PPUSH
39554: CALL_OW 311
39558: IFFALSE 39562
// continue ;
39560: GO 39361
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39562: LD_VAR 0 6
39566: PPUSH
39567: LD_INT 3
39569: PUSH
39570: LD_INT 60
39572: PUSH
39573: EMPTY
39574: LIST
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 3
39582: PUSH
39583: LD_INT 55
39585: PUSH
39586: EMPTY
39587: LIST
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PPUSH
39597: CALL_OW 72
39601: IFFALSE 39709
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39603: LD_ADDR_VAR 0 18
39607: PUSH
39608: LD_VAR 0 6
39612: PPUSH
39613: LD_INT 3
39615: PUSH
39616: LD_INT 60
39618: PUSH
39619: EMPTY
39620: LIST
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 3
39628: PUSH
39629: LD_INT 55
39631: PUSH
39632: EMPTY
39633: LIST
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PPUSH
39643: CALL_OW 72
39647: PUSH
39648: LD_INT 1
39650: ARRAY
39651: ST_TO_ADDR
// if IsInUnit ( driver ) then
39652: LD_VAR 0 18
39656: PPUSH
39657: CALL_OW 310
39661: IFFALSE 39672
// ComExit ( driver ) ;
39663: LD_VAR 0 18
39667: PPUSH
39668: CALL 64982 0 1
// AddComEnterUnit ( driver , tmp ) ;
39672: LD_VAR 0 18
39676: PPUSH
39677: LD_VAR 0 13
39681: PPUSH
39682: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39686: LD_VAR 0 18
39690: PPUSH
39691: LD_VAR 0 7
39695: PPUSH
39696: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39700: LD_VAR 0 18
39704: PPUSH
39705: CALL_OW 181
// end ; continue ;
39709: GO 39361
// end ; if not cleaners or not tmp in cleaners then
39711: LD_VAR 0 6
39715: NOT
39716: PUSH
39717: LD_VAR 0 13
39721: PUSH
39722: LD_VAR 0 6
39726: IN
39727: NOT
39728: OR
39729: IFFALSE 40036
// begin if dep then
39731: LD_VAR 0 17
39735: IFFALSE 39871
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39737: LD_ADDR_VAR 0 16
39741: PUSH
39742: LD_VAR 0 17
39746: PUSH
39747: LD_INT 1
39749: ARRAY
39750: PPUSH
39751: CALL_OW 250
39755: PPUSH
39756: LD_VAR 0 17
39760: PUSH
39761: LD_INT 1
39763: ARRAY
39764: PPUSH
39765: CALL_OW 254
39769: PPUSH
39770: LD_INT 5
39772: PPUSH
39773: CALL_OW 272
39777: PUSH
39778: LD_VAR 0 17
39782: PUSH
39783: LD_INT 1
39785: ARRAY
39786: PPUSH
39787: CALL_OW 251
39791: PPUSH
39792: LD_VAR 0 17
39796: PUSH
39797: LD_INT 1
39799: ARRAY
39800: PPUSH
39801: CALL_OW 254
39805: PPUSH
39806: LD_INT 5
39808: PPUSH
39809: CALL_OW 273
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39818: LD_VAR 0 16
39822: PUSH
39823: LD_INT 1
39825: ARRAY
39826: PPUSH
39827: LD_VAR 0 16
39831: PUSH
39832: LD_INT 2
39834: ARRAY
39835: PPUSH
39836: CALL_OW 488
39840: IFFALSE 39871
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39842: LD_VAR 0 13
39846: PPUSH
39847: LD_VAR 0 16
39851: PUSH
39852: LD_INT 1
39854: ARRAY
39855: PPUSH
39856: LD_VAR 0 16
39860: PUSH
39861: LD_INT 2
39863: ARRAY
39864: PPUSH
39865: CALL_OW 111
// continue ;
39869: GO 39361
// end ; end ; r := GetDir ( tmp ) ;
39871: LD_ADDR_VAR 0 15
39875: PUSH
39876: LD_VAR 0 13
39880: PPUSH
39881: CALL_OW 254
39885: ST_TO_ADDR
// if r = 5 then
39886: LD_VAR 0 15
39890: PUSH
39891: LD_INT 5
39893: EQUAL
39894: IFFALSE 39904
// r := 0 ;
39896: LD_ADDR_VAR 0 15
39900: PUSH
39901: LD_INT 0
39903: ST_TO_ADDR
// for j = r to 5 do
39904: LD_ADDR_VAR 0 10
39908: PUSH
39909: DOUBLE
39910: LD_VAR 0 15
39914: DEC
39915: ST_TO_ADDR
39916: LD_INT 5
39918: PUSH
39919: FOR_TO
39920: IFFALSE 40034
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39922: LD_ADDR_VAR 0 11
39926: PUSH
39927: LD_VAR 0 13
39931: PPUSH
39932: CALL_OW 250
39936: PPUSH
39937: LD_VAR 0 10
39941: PPUSH
39942: LD_INT 2
39944: PPUSH
39945: CALL_OW 272
39949: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39950: LD_ADDR_VAR 0 12
39954: PUSH
39955: LD_VAR 0 13
39959: PPUSH
39960: CALL_OW 251
39964: PPUSH
39965: LD_VAR 0 10
39969: PPUSH
39970: LD_INT 2
39972: PPUSH
39973: CALL_OW 273
39977: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39978: LD_VAR 0 11
39982: PPUSH
39983: LD_VAR 0 12
39987: PPUSH
39988: CALL_OW 488
39992: PUSH
39993: LD_VAR 0 11
39997: PPUSH
39998: LD_VAR 0 12
40002: PPUSH
40003: CALL_OW 428
40007: NOT
40008: AND
40009: IFFALSE 40032
// begin ComMoveXY ( tmp , _x , _y ) ;
40011: LD_VAR 0 13
40015: PPUSH
40016: LD_VAR 0 11
40020: PPUSH
40021: LD_VAR 0 12
40025: PPUSH
40026: CALL_OW 111
// break ;
40030: GO 40034
// end ; end ;
40032: GO 39919
40034: POP
40035: POP
// end ; end ;
40036: GO 39361
40038: POP
40039: POP
// end ;
40040: LD_VAR 0 8
40044: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40045: LD_INT 0
40047: PPUSH
// result := true ;
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_INT 1
40055: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40056: LD_VAR 0 2
40060: PUSH
40061: LD_INT 24
40063: DOUBLE
40064: EQUAL
40065: IFTRUE 40075
40067: LD_INT 33
40069: DOUBLE
40070: EQUAL
40071: IFTRUE 40075
40073: GO 40100
40075: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40076: LD_ADDR_VAR 0 3
40080: PUSH
40081: LD_INT 32
40083: PPUSH
40084: LD_VAR 0 1
40088: PPUSH
40089: CALL_OW 321
40093: PUSH
40094: LD_INT 2
40096: EQUAL
40097: ST_TO_ADDR
40098: GO 40420
40100: LD_INT 20
40102: DOUBLE
40103: EQUAL
40104: IFTRUE 40108
40106: GO 40133
40108: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40109: LD_ADDR_VAR 0 3
40113: PUSH
40114: LD_INT 6
40116: PPUSH
40117: LD_VAR 0 1
40121: PPUSH
40122: CALL_OW 321
40126: PUSH
40127: LD_INT 2
40129: EQUAL
40130: ST_TO_ADDR
40131: GO 40420
40133: LD_INT 22
40135: DOUBLE
40136: EQUAL
40137: IFTRUE 40147
40139: LD_INT 36
40141: DOUBLE
40142: EQUAL
40143: IFTRUE 40147
40145: GO 40172
40147: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40148: LD_ADDR_VAR 0 3
40152: PUSH
40153: LD_INT 15
40155: PPUSH
40156: LD_VAR 0 1
40160: PPUSH
40161: CALL_OW 321
40165: PUSH
40166: LD_INT 2
40168: EQUAL
40169: ST_TO_ADDR
40170: GO 40420
40172: LD_INT 30
40174: DOUBLE
40175: EQUAL
40176: IFTRUE 40180
40178: GO 40205
40180: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40181: LD_ADDR_VAR 0 3
40185: PUSH
40186: LD_INT 20
40188: PPUSH
40189: LD_VAR 0 1
40193: PPUSH
40194: CALL_OW 321
40198: PUSH
40199: LD_INT 2
40201: EQUAL
40202: ST_TO_ADDR
40203: GO 40420
40205: LD_INT 28
40207: DOUBLE
40208: EQUAL
40209: IFTRUE 40219
40211: LD_INT 21
40213: DOUBLE
40214: EQUAL
40215: IFTRUE 40219
40217: GO 40244
40219: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40220: LD_ADDR_VAR 0 3
40224: PUSH
40225: LD_INT 21
40227: PPUSH
40228: LD_VAR 0 1
40232: PPUSH
40233: CALL_OW 321
40237: PUSH
40238: LD_INT 2
40240: EQUAL
40241: ST_TO_ADDR
40242: GO 40420
40244: LD_INT 16
40246: DOUBLE
40247: EQUAL
40248: IFTRUE 40252
40250: GO 40279
40252: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40253: LD_ADDR_VAR 0 3
40257: PUSH
40258: LD_EXP 31
40262: PPUSH
40263: LD_VAR 0 1
40267: PPUSH
40268: CALL_OW 321
40272: PUSH
40273: LD_INT 2
40275: EQUAL
40276: ST_TO_ADDR
40277: GO 40420
40279: LD_INT 19
40281: DOUBLE
40282: EQUAL
40283: IFTRUE 40293
40285: LD_INT 23
40287: DOUBLE
40288: EQUAL
40289: IFTRUE 40293
40291: GO 40320
40293: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40294: LD_ADDR_VAR 0 3
40298: PUSH
40299: LD_EXP 30
40303: PPUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: CALL_OW 321
40313: PUSH
40314: LD_INT 2
40316: EQUAL
40317: ST_TO_ADDR
40318: GO 40420
40320: LD_INT 17
40322: DOUBLE
40323: EQUAL
40324: IFTRUE 40328
40326: GO 40353
40328: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40329: LD_ADDR_VAR 0 3
40333: PUSH
40334: LD_INT 39
40336: PPUSH
40337: LD_VAR 0 1
40341: PPUSH
40342: CALL_OW 321
40346: PUSH
40347: LD_INT 2
40349: EQUAL
40350: ST_TO_ADDR
40351: GO 40420
40353: LD_INT 18
40355: DOUBLE
40356: EQUAL
40357: IFTRUE 40361
40359: GO 40386
40361: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40362: LD_ADDR_VAR 0 3
40366: PUSH
40367: LD_INT 40
40369: PPUSH
40370: LD_VAR 0 1
40374: PPUSH
40375: CALL_OW 321
40379: PUSH
40380: LD_INT 2
40382: EQUAL
40383: ST_TO_ADDR
40384: GO 40420
40386: LD_INT 27
40388: DOUBLE
40389: EQUAL
40390: IFTRUE 40394
40392: GO 40419
40394: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40395: LD_ADDR_VAR 0 3
40399: PUSH
40400: LD_INT 35
40402: PPUSH
40403: LD_VAR 0 1
40407: PPUSH
40408: CALL_OW 321
40412: PUSH
40413: LD_INT 2
40415: EQUAL
40416: ST_TO_ADDR
40417: GO 40420
40419: POP
// end ;
40420: LD_VAR 0 3
40424: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40425: LD_INT 0
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
40437: PPUSH
// result := false ;
40438: LD_ADDR_VAR 0 6
40442: PUSH
40443: LD_INT 0
40445: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40446: LD_VAR 0 1
40450: NOT
40451: PUSH
40452: LD_VAR 0 1
40456: PPUSH
40457: CALL_OW 266
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: IN
40472: NOT
40473: OR
40474: PUSH
40475: LD_VAR 0 2
40479: NOT
40480: OR
40481: PUSH
40482: LD_VAR 0 5
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: LD_INT 3
40498: PUSH
40499: LD_INT 4
40501: PUSH
40502: LD_INT 5
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: IN
40513: NOT
40514: OR
40515: PUSH
40516: LD_VAR 0 3
40520: PPUSH
40521: LD_VAR 0 4
40525: PPUSH
40526: CALL_OW 488
40530: NOT
40531: OR
40532: IFFALSE 40536
// exit ;
40534: GO 41272
// side := GetSide ( depot ) ;
40536: LD_ADDR_VAR 0 9
40540: PUSH
40541: LD_VAR 0 1
40545: PPUSH
40546: CALL_OW 255
40550: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40551: LD_VAR 0 9
40555: PPUSH
40556: LD_VAR 0 2
40560: PPUSH
40561: CALL 40045 0 2
40565: NOT
40566: IFFALSE 40570
// exit ;
40568: GO 41272
// pom := GetBase ( depot ) ;
40570: LD_ADDR_VAR 0 10
40574: PUSH
40575: LD_VAR 0 1
40579: PPUSH
40580: CALL_OW 274
40584: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40585: LD_ADDR_VAR 0 11
40589: PUSH
40590: LD_VAR 0 2
40594: PPUSH
40595: LD_VAR 0 1
40599: PPUSH
40600: CALL_OW 248
40604: PPUSH
40605: CALL_OW 450
40609: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40610: LD_VAR 0 10
40614: PPUSH
40615: LD_INT 1
40617: PPUSH
40618: CALL_OW 275
40622: PUSH
40623: LD_VAR 0 11
40627: PUSH
40628: LD_INT 1
40630: ARRAY
40631: GREATEREQUAL
40632: PUSH
40633: LD_VAR 0 10
40637: PPUSH
40638: LD_INT 2
40640: PPUSH
40641: CALL_OW 275
40645: PUSH
40646: LD_VAR 0 11
40650: PUSH
40651: LD_INT 2
40653: ARRAY
40654: GREATEREQUAL
40655: AND
40656: PUSH
40657: LD_VAR 0 10
40661: PPUSH
40662: LD_INT 3
40664: PPUSH
40665: CALL_OW 275
40669: PUSH
40670: LD_VAR 0 11
40674: PUSH
40675: LD_INT 3
40677: ARRAY
40678: GREATEREQUAL
40679: AND
40680: NOT
40681: IFFALSE 40685
// exit ;
40683: GO 41272
// if GetBType ( depot ) = b_depot then
40685: LD_VAR 0 1
40689: PPUSH
40690: CALL_OW 266
40694: PUSH
40695: LD_INT 0
40697: EQUAL
40698: IFFALSE 40710
// dist := 28 else
40700: LD_ADDR_VAR 0 14
40704: PUSH
40705: LD_INT 28
40707: ST_TO_ADDR
40708: GO 40718
// dist := 36 ;
40710: LD_ADDR_VAR 0 14
40714: PUSH
40715: LD_INT 36
40717: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40718: LD_VAR 0 1
40722: PPUSH
40723: LD_VAR 0 3
40727: PPUSH
40728: LD_VAR 0 4
40732: PPUSH
40733: CALL_OW 297
40737: PUSH
40738: LD_VAR 0 14
40742: GREATER
40743: IFFALSE 40747
// exit ;
40745: GO 41272
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40747: LD_ADDR_VAR 0 12
40751: PUSH
40752: LD_VAR 0 2
40756: PPUSH
40757: LD_VAR 0 3
40761: PPUSH
40762: LD_VAR 0 4
40766: PPUSH
40767: LD_VAR 0 5
40771: PPUSH
40772: LD_VAR 0 1
40776: PPUSH
40777: CALL_OW 248
40781: PPUSH
40782: LD_INT 0
40784: PPUSH
40785: CALL 41277 0 6
40789: ST_TO_ADDR
// if not hexes then
40790: LD_VAR 0 12
40794: NOT
40795: IFFALSE 40799
// exit ;
40797: GO 41272
// hex := GetHexInfo ( x , y ) ;
40799: LD_ADDR_VAR 0 15
40803: PUSH
40804: LD_VAR 0 3
40808: PPUSH
40809: LD_VAR 0 4
40813: PPUSH
40814: CALL_OW 546
40818: ST_TO_ADDR
// if hex [ 1 ] then
40819: LD_VAR 0 15
40823: PUSH
40824: LD_INT 1
40826: ARRAY
40827: IFFALSE 40831
// exit ;
40829: GO 41272
// height := hex [ 2 ] ;
40831: LD_ADDR_VAR 0 13
40835: PUSH
40836: LD_VAR 0 15
40840: PUSH
40841: LD_INT 2
40843: ARRAY
40844: ST_TO_ADDR
// for i = 1 to hexes do
40845: LD_ADDR_VAR 0 7
40849: PUSH
40850: DOUBLE
40851: LD_INT 1
40853: DEC
40854: ST_TO_ADDR
40855: LD_VAR 0 12
40859: PUSH
40860: FOR_TO
40861: IFFALSE 41191
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40863: LD_VAR 0 12
40867: PUSH
40868: LD_VAR 0 7
40872: ARRAY
40873: PUSH
40874: LD_INT 1
40876: ARRAY
40877: PPUSH
40878: LD_VAR 0 12
40882: PUSH
40883: LD_VAR 0 7
40887: ARRAY
40888: PUSH
40889: LD_INT 2
40891: ARRAY
40892: PPUSH
40893: CALL_OW 488
40897: NOT
40898: PUSH
40899: LD_VAR 0 12
40903: PUSH
40904: LD_VAR 0 7
40908: ARRAY
40909: PUSH
40910: LD_INT 1
40912: ARRAY
40913: PPUSH
40914: LD_VAR 0 12
40918: PUSH
40919: LD_VAR 0 7
40923: ARRAY
40924: PUSH
40925: LD_INT 2
40927: ARRAY
40928: PPUSH
40929: CALL_OW 428
40933: PUSH
40934: LD_INT 0
40936: GREATER
40937: OR
40938: PUSH
40939: LD_VAR 0 12
40943: PUSH
40944: LD_VAR 0 7
40948: ARRAY
40949: PUSH
40950: LD_INT 1
40952: ARRAY
40953: PPUSH
40954: LD_VAR 0 12
40958: PUSH
40959: LD_VAR 0 7
40963: ARRAY
40964: PUSH
40965: LD_INT 2
40967: ARRAY
40968: PPUSH
40969: CALL_OW 351
40973: OR
40974: IFFALSE 40980
// exit ;
40976: POP
40977: POP
40978: GO 41272
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40980: LD_ADDR_VAR 0 8
40984: PUSH
40985: LD_VAR 0 12
40989: PUSH
40990: LD_VAR 0 7
40994: ARRAY
40995: PUSH
40996: LD_INT 1
40998: ARRAY
40999: PPUSH
41000: LD_VAR 0 12
41004: PUSH
41005: LD_VAR 0 7
41009: ARRAY
41010: PUSH
41011: LD_INT 2
41013: ARRAY
41014: PPUSH
41015: CALL_OW 546
41019: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41020: LD_VAR 0 8
41024: PUSH
41025: LD_INT 1
41027: ARRAY
41028: PUSH
41029: LD_VAR 0 8
41033: PUSH
41034: LD_INT 2
41036: ARRAY
41037: PUSH
41038: LD_VAR 0 13
41042: PUSH
41043: LD_INT 2
41045: PLUS
41046: GREATER
41047: OR
41048: PUSH
41049: LD_VAR 0 8
41053: PUSH
41054: LD_INT 2
41056: ARRAY
41057: PUSH
41058: LD_VAR 0 13
41062: PUSH
41063: LD_INT 2
41065: MINUS
41066: LESS
41067: OR
41068: PUSH
41069: LD_VAR 0 8
41073: PUSH
41074: LD_INT 3
41076: ARRAY
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 8
41083: PUSH
41084: LD_INT 9
41086: PUSH
41087: LD_INT 10
41089: PUSH
41090: LD_INT 11
41092: PUSH
41093: LD_INT 12
41095: PUSH
41096: LD_INT 13
41098: PUSH
41099: LD_INT 16
41101: PUSH
41102: LD_INT 17
41104: PUSH
41105: LD_INT 18
41107: PUSH
41108: LD_INT 19
41110: PUSH
41111: LD_INT 20
41113: PUSH
41114: LD_INT 21
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: IN
41132: NOT
41133: OR
41134: PUSH
41135: LD_VAR 0 8
41139: PUSH
41140: LD_INT 5
41142: ARRAY
41143: NOT
41144: OR
41145: PUSH
41146: LD_VAR 0 8
41150: PUSH
41151: LD_INT 6
41153: ARRAY
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: LD_INT 7
41163: PUSH
41164: LD_INT 9
41166: PUSH
41167: LD_INT 10
41169: PUSH
41170: LD_INT 11
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: IN
41181: NOT
41182: OR
41183: IFFALSE 41189
// exit ;
41185: POP
41186: POP
41187: GO 41272
// end ;
41189: GO 40860
41191: POP
41192: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41193: LD_VAR 0 9
41197: PPUSH
41198: LD_VAR 0 3
41202: PPUSH
41203: LD_VAR 0 4
41207: PPUSH
41208: LD_INT 20
41210: PPUSH
41211: CALL 33218 0 4
41215: PUSH
41216: LD_INT 4
41218: ARRAY
41219: IFFALSE 41223
// exit ;
41221: GO 41272
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41223: LD_VAR 0 2
41227: PUSH
41228: LD_INT 29
41230: PUSH
41231: LD_INT 30
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: IN
41238: PUSH
41239: LD_VAR 0 3
41243: PPUSH
41244: LD_VAR 0 4
41248: PPUSH
41249: LD_VAR 0 9
41253: PPUSH
41254: CALL_OW 440
41258: NOT
41259: AND
41260: IFFALSE 41264
// exit ;
41262: GO 41272
// result := true ;
41264: LD_ADDR_VAR 0 6
41268: PUSH
41269: LD_INT 1
41271: ST_TO_ADDR
// end ;
41272: LD_VAR 0 6
41276: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41277: LD_INT 0
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
41322: PPUSH
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
// result = [ ] ;
41337: LD_ADDR_VAR 0 7
41341: PUSH
41342: EMPTY
41343: ST_TO_ADDR
// temp_list = [ ] ;
41344: LD_ADDR_VAR 0 9
41348: PUSH
41349: EMPTY
41350: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41351: LD_VAR 0 4
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: LD_INT 3
41367: PUSH
41368: LD_INT 4
41370: PUSH
41371: LD_INT 5
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: IN
41382: NOT
41383: PUSH
41384: LD_VAR 0 1
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: IN
41399: PUSH
41400: LD_VAR 0 5
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 2
41410: PUSH
41411: LD_INT 3
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: LIST
41418: IN
41419: NOT
41420: AND
41421: OR
41422: IFFALSE 41426
// exit ;
41424: GO 59817
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41426: LD_VAR 0 1
41430: PUSH
41431: LD_INT 6
41433: PUSH
41434: LD_INT 7
41436: PUSH
41437: LD_INT 8
41439: PUSH
41440: LD_INT 13
41442: PUSH
41443: LD_INT 12
41445: PUSH
41446: LD_INT 15
41448: PUSH
41449: LD_INT 11
41451: PUSH
41452: LD_INT 14
41454: PUSH
41455: LD_INT 10
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: IN
41469: IFFALSE 41479
// btype = b_lab ;
41471: LD_ADDR_VAR 0 1
41475: PUSH
41476: LD_INT 6
41478: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41479: LD_VAR 0 6
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: IN
41498: NOT
41499: PUSH
41500: LD_VAR 0 1
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: LD_INT 3
41516: PUSH
41517: LD_INT 6
41519: PUSH
41520: LD_INT 36
41522: PUSH
41523: LD_INT 4
41525: PUSH
41526: LD_INT 5
41528: PUSH
41529: LD_INT 31
41531: PUSH
41532: LD_INT 32
41534: PUSH
41535: LD_INT 33
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: IN
41551: NOT
41552: PUSH
41553: LD_VAR 0 6
41557: PUSH
41558: LD_INT 1
41560: EQUAL
41561: AND
41562: OR
41563: PUSH
41564: LD_VAR 0 1
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: LD_INT 3
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: IN
41579: NOT
41580: PUSH
41581: LD_VAR 0 6
41585: PUSH
41586: LD_INT 2
41588: EQUAL
41589: AND
41590: OR
41591: IFFALSE 41601
// mode = 0 ;
41593: LD_ADDR_VAR 0 6
41597: PUSH
41598: LD_INT 0
41600: ST_TO_ADDR
// case mode of 0 :
41601: LD_VAR 0 6
41605: PUSH
41606: LD_INT 0
41608: DOUBLE
41609: EQUAL
41610: IFTRUE 41614
41612: GO 53067
41614: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41615: LD_ADDR_VAR 0 11
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: LD_INT 2
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 3
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 3
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41808: LD_ADDR_VAR 0 12
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 3
41965: NEG
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 3
41976: NEG
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42004: LD_ADDR_VAR 0 13
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: LD_INT 2
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 2
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: LD_INT 3
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 3
42163: NEG
42164: PUSH
42165: LD_INT 2
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 3
42175: NEG
42176: PUSH
42177: LD_INT 3
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42203: LD_ADDR_VAR 0 14
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: LD_INT 2
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 2
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: LD_INT 3
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 3
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42399: LD_ADDR_VAR 0 15
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 3
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 3
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42592: LD_ADDR_VAR 0 16
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 3
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 3
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42785: LD_ADDR_VAR 0 17
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43015: LD_ADDR_VAR 0 18
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: NEG
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43245: LD_ADDR_VAR 0 19
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43475: LD_ADDR_VAR 0 20
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: LD_INT 2
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43705: LD_ADDR_VAR 0 21
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43935: LD_ADDR_VAR 0 22
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 2
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: NEG
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44165: LD_ADDR_VAR 0 23
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: NEG
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 3
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 2
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44445: LD_ADDR_VAR 0 24
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 2
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44721: LD_ADDR_VAR 0 25
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 3
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 3
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: LD_INT 3
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44995: LD_ADDR_VAR 0 26
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 3
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45271: LD_ADDR_VAR 0 27
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 2
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 3
45504: NEG
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 3
45516: NEG
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45551: LD_ADDR_VAR 0 28
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: LD_INT 3
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 3
45786: NEG
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 3
45798: NEG
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45833: LD_ADDR_VAR 0 29
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 2
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 3
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 3
46077: NEG
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46112: LD_ADDR_VAR 0 30
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: LD_INT 3
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 3
46355: NEG
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46390: LD_ADDR_VAR 0 31
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: LD_INT 3
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 3
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46668: LD_ADDR_VAR 0 32
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 3
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 3
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46946: LD_ADDR_VAR 0 33
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: LD_INT 3
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 3
47190: NEG
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47225: LD_ADDR_VAR 0 34
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 3
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47505: LD_ADDR_VAR 0 35
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47617: LD_ADDR_VAR 0 36
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47729: LD_ADDR_VAR 0 37
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47841: LD_ADDR_VAR 0 38
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47953: LD_ADDR_VAR 0 39
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48065: LD_ADDR_VAR 0 40
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48177: LD_ADDR_VAR 0 41
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 3
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 3
48451: NEG
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 3
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 3
48474: NEG
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 3
48486: NEG
48487: PUSH
48488: LD_INT 3
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48527: LD_ADDR_VAR 0 42
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: LD_INT 2
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: LD_INT 3
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: LD_INT 3
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 3
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 3
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 3
48824: NEG
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: LD_INT 3
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48877: LD_ADDR_VAR 0 43
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: LD_INT 3
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: LD_INT 3
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 3
49173: NEG
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49225: LD_ADDR_VAR 0 44
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 2
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: LD_INT 3
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 3
49468: PUSH
49469: LD_INT 3
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: LD_INT 3
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 3
49499: NEG
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 3
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 3
49522: NEG
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49575: LD_ADDR_VAR 0 45
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: LD_INT 3
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 3
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 3
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 3
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: LD_INT 3
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 3
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 3
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 3
49872: NEG
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: NEG
49885: PUSH
49886: LD_INT 3
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49925: LD_ADDR_VAR 0 46
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: LD_INT 3
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 3
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 3
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 3
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: NEG
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 3
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50273: LD_ADDR_VAR 0 47
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50424: LD_ADDR_VAR 0 48
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50571: LD_ADDR_VAR 0 49
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50715: LD_ADDR_VAR 0 50
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50859: LD_ADDR_VAR 0 51
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51006: LD_ADDR_VAR 0 52
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51157: LD_ADDR_VAR 0 53
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51387: LD_ADDR_VAR 0 54
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51617: LD_ADDR_VAR 0 55
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51847: LD_ADDR_VAR 0 56
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52077: LD_ADDR_VAR 0 57
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52307: LD_ADDR_VAR 0 58
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 2
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52537: LD_ADDR_VAR 0 59
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52625: LD_ADDR_VAR 0 60
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52713: LD_ADDR_VAR 0 61
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52801: LD_ADDR_VAR 0 62
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52889: LD_ADDR_VAR 0 63
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52977: LD_ADDR_VAR 0 64
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: ST_TO_ADDR
// end ; 1 :
53065: GO 58962
53067: LD_INT 1
53069: DOUBLE
53070: EQUAL
53071: IFTRUE 53075
53073: GO 55698
53075: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53076: LD_ADDR_VAR 0 11
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: LD_INT 3
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: LIST
53119: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53120: LD_ADDR_VAR 0 12
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53161: LD_ADDR_VAR 0 13
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53201: LD_ADDR_VAR 0 14
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: LD_INT 3
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 2
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53242: LD_ADDR_VAR 0 15
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 3
53260: NEG
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53286: LD_ADDR_VAR 0 16
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 3
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 3
53305: NEG
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: LD_INT 3
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53332: LD_ADDR_VAR 0 17
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: LIST
53375: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53376: LD_ADDR_VAR 0 18
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53417: LD_ADDR_VAR 0 19
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: LIST
53456: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53457: LD_ADDR_VAR 0 20
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53498: LD_ADDR_VAR 0 21
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 3
53516: NEG
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53542: LD_ADDR_VAR 0 22
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 3
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: LD_INT 3
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53588: LD_ADDR_VAR 0 23
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 3
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 4
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 3
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: LIST
53631: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53632: LD_ADDR_VAR 0 24
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 4
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53673: LD_ADDR_VAR 0 25
53677: PUSH
53678: LD_INT 3
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 4
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: PUSH
53701: LD_INT 4
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: LIST
53712: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53713: LD_ADDR_VAR 0 26
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 4
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: LIST
53753: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53754: LD_ADDR_VAR 0 27
53758: PUSH
53759: LD_INT 3
53761: NEG
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 3
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 4
53783: NEG
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: LIST
53797: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53798: LD_ADDR_VAR 0 28
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: LD_INT 3
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 3
53817: NEG
53818: PUSH
53819: LD_INT 4
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 4
53829: NEG
53830: PUSH
53831: LD_INT 3
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: LIST
53843: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53844: LD_ADDR_VAR 0 29
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 3
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 4
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 4
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 3
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 5
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 5
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 4
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 6
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 6
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 5
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53999: LD_ADDR_VAR 0 30
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 3
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 3
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 3
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 4
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 4
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 4
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 5
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 5
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 5
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 6
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 6
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54142: LD_ADDR_VAR 0 31
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 3
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 4
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 4
54189: PUSH
54190: LD_INT 4
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: LD_INT 4
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 5
54209: PUSH
54210: LD_INT 4
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 5
54219: PUSH
54220: LD_INT 5
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 4
54229: PUSH
54230: LD_INT 5
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 6
54239: PUSH
54240: LD_INT 5
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 6
54249: PUSH
54250: LD_INT 6
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 5
54259: PUSH
54260: LD_INT 6
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54281: LD_ADDR_VAR 0 32
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 3
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 4
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: LD_INT 4
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 3
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: LD_INT 5
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: LD_INT 5
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 4
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: LD_INT 6
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 6
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: LD_INT 5
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54424: LD_ADDR_VAR 0 33
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 3
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 3
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 4
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 4
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 4
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 5
54510: NEG
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 5
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 5
54533: NEG
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 6
54544: NEG
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 6
54555: NEG
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54579: LD_ADDR_VAR 0 34
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: NEG
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 3
54610: NEG
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: NEG
54623: PUSH
54624: LD_INT 4
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 4
54634: NEG
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 4
54646: NEG
54647: PUSH
54648: LD_INT 4
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 4
54658: NEG
54659: PUSH
54660: LD_INT 5
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 5
54670: NEG
54671: PUSH
54672: LD_INT 4
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 5
54682: NEG
54683: PUSH
54684: LD_INT 5
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 5
54694: NEG
54695: PUSH
54696: LD_INT 6
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 6
54706: NEG
54707: PUSH
54708: LD_INT 5
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 6
54718: NEG
54719: PUSH
54720: LD_INT 6
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54742: LD_ADDR_VAR 0 41
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 3
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54786: LD_ADDR_VAR 0 42
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: LIST
54826: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54827: LD_ADDR_VAR 0 43
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: PUSH
54855: LD_INT 3
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: LIST
54866: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54867: LD_ADDR_VAR 0 44
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: LD_INT 3
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54908: LD_ADDR_VAR 0 45
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 3
54937: NEG
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54952: LD_ADDR_VAR 0 46
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 3
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 3
54983: NEG
54984: PUSH
54985: LD_INT 2
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54998: LD_ADDR_VAR 0 47
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: LD_INT 3
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55031: LD_ADDR_VAR 0 48
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55062: LD_ADDR_VAR 0 49
55066: PUSH
55067: LD_INT 3
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55091: LD_ADDR_VAR 0 50
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 3
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55120: LD_ADDR_VAR 0 51
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55151: LD_ADDR_VAR 0 52
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55184: LD_ADDR_VAR 0 53
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 3
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 3
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55228: LD_ADDR_VAR 0 54
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55269: LD_ADDR_VAR 0 55
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: LIST
55308: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55309: LD_ADDR_VAR 0 56
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55350: LD_ADDR_VAR 0 57
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 3
55368: NEG
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: NEG
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55394: LD_ADDR_VAR 0 58
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: LD_INT 3
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 3
55413: NEG
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 3
55425: NEG
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: LIST
55439: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55440: LD_ADDR_VAR 0 59
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55484: LD_ADDR_VAR 0 60
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55525: LD_ADDR_VAR 0 61
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: LIST
55564: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55565: LD_ADDR_VAR 0 62
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: LIST
55605: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55606: LD_ADDR_VAR 0 63
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: LIST
55649: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55650: LD_ADDR_VAR 0 64
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: ST_TO_ADDR
// end ; 2 :
55696: GO 58962
55698: LD_INT 2
55700: DOUBLE
55701: EQUAL
55702: IFTRUE 55706
55704: GO 58961
55706: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55707: LD_ADDR_VAR 0 29
55711: PUSH
55712: LD_INT 4
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 4
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 5
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 5
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 4
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 5
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 4
55827: PUSH
55828: LD_INT 3
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 4
55837: PUSH
55838: LD_INT 4
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 3
55847: PUSH
55848: LD_INT 4
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 4
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: LD_INT 4
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 4
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 4
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: LD_INT 5
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 5
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 4
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: LD_INT 5
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: LD_INT 3
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 3
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 4
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 4
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 4
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 4
56092: NEG
56093: PUSH
56094: LD_INT 4
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 4
56104: NEG
56105: PUSH
56106: LD_INT 5
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 3
56116: NEG
56117: PUSH
56118: LD_INT 4
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: LD_INT 3
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 4
56140: NEG
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 5
56152: NEG
56153: PUSH
56154: LD_INT 4
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 5
56164: NEG
56165: PUSH
56166: LD_INT 5
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 3
56176: NEG
56177: PUSH
56178: LD_INT 5
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 5
56188: NEG
56189: PUSH
56190: LD_INT 3
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56245: LD_ADDR_VAR 0 30
56249: PUSH
56250: LD_INT 4
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 4
56262: PUSH
56263: LD_INT 3
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 5
56272: PUSH
56273: LD_INT 4
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 5
56282: PUSH
56283: LD_INT 5
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 4
56292: PUSH
56293: LD_INT 5
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: LD_INT 4
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 5
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 3
56332: PUSH
56333: LD_INT 5
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: LD_INT 4
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 4
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 4
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 4
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 3
56458: NEG
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 4
56480: NEG
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 5
56491: NEG
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 5
56502: NEG
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 5
56514: NEG
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: LD_INT 3
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: LD_INT 4
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 3
56585: NEG
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 4
56597: NEG
56598: PUSH
56599: LD_INT 3
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 4
56609: NEG
56610: PUSH
56611: LD_INT 4
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: NEG
56622: PUSH
56623: LD_INT 4
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 4
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 4
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 5
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 4
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 4
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 5
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: PUSH
56725: LD_INT 3
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: LD_INT 5
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56792: LD_ADDR_VAR 0 31
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 4
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 4
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 5
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 5
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 4
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: LD_INT 5
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 4
56948: NEG
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 4
56959: NEG
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 4
56971: NEG
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 4
56994: NEG
56995: PUSH
56996: LD_INT 4
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 4
57006: NEG
57007: PUSH
57008: LD_INT 5
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: NEG
57019: PUSH
57020: LD_INT 4
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: NEG
57031: PUSH
57032: LD_INT 3
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 4
57042: NEG
57043: PUSH
57044: LD_INT 3
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 5
57054: NEG
57055: PUSH
57056: LD_INT 4
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 5
57066: NEG
57067: PUSH
57068: LD_INT 5
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: LD_INT 5
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 5
57090: NEG
57091: PUSH
57092: LD_INT 3
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 4
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 3
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 4
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: LD_INT 4
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 4
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 4
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 5
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 5
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 4
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 3
57276: PUSH
57277: LD_INT 2
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 5
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57342: LD_ADDR_VAR 0 32
57346: PUSH
57347: LD_INT 4
57349: NEG
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 4
57360: NEG
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 4
57394: NEG
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 5
57405: NEG
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 5
57416: NEG
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 5
57428: NEG
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 3
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: LD_INT 4
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: NEG
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 4
57511: NEG
57512: PUSH
57513: LD_INT 3
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 4
57523: NEG
57524: PUSH
57525: LD_INT 4
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: LD_INT 4
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 4
57547: NEG
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: LD_INT 4
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 5
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 4
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 4
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 5
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: LD_INT 5
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 3
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 4
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 4
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 4
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 4
57754: PUSH
57755: LD_INT 4
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 4
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 5
57774: PUSH
57775: LD_INT 4
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 5
57784: PUSH
57785: LD_INT 5
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 4
57794: PUSH
57795: LD_INT 5
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: LD_INT 4
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 5
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 3
57834: PUSH
57835: LD_INT 5
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57889: LD_ADDR_VAR 0 33
57893: PUSH
57894: LD_INT 4
57896: NEG
57897: PUSH
57898: LD_INT 4
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: NEG
57909: PUSH
57910: LD_INT 5
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 3
57920: NEG
57921: PUSH
57922: LD_INT 4
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: LD_INT 3
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 4
57944: NEG
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 5
57956: NEG
57957: PUSH
57958: LD_INT 4
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 5
57968: NEG
57969: PUSH
57970: LD_INT 5
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 3
57980: NEG
57981: PUSH
57982: LD_INT 5
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 5
57992: NEG
57993: PUSH
57994: LD_INT 3
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: LD_INT 3
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 4
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 3
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 2
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 4
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: LD_INT 4
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 4
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 4
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 5
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 5
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 4
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 3
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 5
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: LD_INT 3
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 4
58219: PUSH
58220: LD_INT 3
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 4
58229: PUSH
58230: LD_INT 4
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 4
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: LD_INT 3
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 4
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: LD_INT 4
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 4
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 3
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 4
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 5
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: LD_INT 4
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 3
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: LD_INT 5
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 3
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58427: LD_ADDR_VAR 0 34
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 4
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 5
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 4
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 3
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: LD_INT 4
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 5
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: LD_INT 5
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 4
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 4
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 4
58629: PUSH
58630: LD_INT 4
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 4
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 5
58649: PUSH
58650: LD_INT 4
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 5
58659: PUSH
58660: LD_INT 5
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 4
58669: PUSH
58670: LD_INT 5
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 3
58679: PUSH
58680: LD_INT 4
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 5
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: LD_INT 5
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 3
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: LD_INT 2
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 3
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: LD_INT 4
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 4
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 4
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 4
58812: NEG
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 4
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 5
58868: NEG
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 5
58879: NEG
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 5
58891: NEG
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
// end ; end ;
58959: GO 58962
58961: POP
// case btype of b_depot , b_warehouse :
58962: LD_VAR 0 1
58966: PUSH
58967: LD_INT 0
58969: DOUBLE
58970: EQUAL
58971: IFTRUE 58981
58973: LD_INT 1
58975: DOUBLE
58976: EQUAL
58977: IFTRUE 58981
58979: GO 59182
58981: POP
// case nation of nation_american :
58982: LD_VAR 0 5
58986: PUSH
58987: LD_INT 1
58989: DOUBLE
58990: EQUAL
58991: IFTRUE 58995
58993: GO 59051
58995: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58996: LD_ADDR_VAR 0 9
59000: PUSH
59001: LD_VAR 0 11
59005: PUSH
59006: LD_VAR 0 12
59010: PUSH
59011: LD_VAR 0 13
59015: PUSH
59016: LD_VAR 0 14
59020: PUSH
59021: LD_VAR 0 15
59025: PUSH
59026: LD_VAR 0 16
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: PUSH
59039: LD_VAR 0 4
59043: PUSH
59044: LD_INT 1
59046: PLUS
59047: ARRAY
59048: ST_TO_ADDR
59049: GO 59180
59051: LD_INT 2
59053: DOUBLE
59054: EQUAL
59055: IFTRUE 59059
59057: GO 59115
59059: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59060: LD_ADDR_VAR 0 9
59064: PUSH
59065: LD_VAR 0 17
59069: PUSH
59070: LD_VAR 0 18
59074: PUSH
59075: LD_VAR 0 19
59079: PUSH
59080: LD_VAR 0 20
59084: PUSH
59085: LD_VAR 0 21
59089: PUSH
59090: LD_VAR 0 22
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: PUSH
59103: LD_VAR 0 4
59107: PUSH
59108: LD_INT 1
59110: PLUS
59111: ARRAY
59112: ST_TO_ADDR
59113: GO 59180
59115: LD_INT 3
59117: DOUBLE
59118: EQUAL
59119: IFTRUE 59123
59121: GO 59179
59123: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59124: LD_ADDR_VAR 0 9
59128: PUSH
59129: LD_VAR 0 23
59133: PUSH
59134: LD_VAR 0 24
59138: PUSH
59139: LD_VAR 0 25
59143: PUSH
59144: LD_VAR 0 26
59148: PUSH
59149: LD_VAR 0 27
59153: PUSH
59154: LD_VAR 0 28
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: PUSH
59167: LD_VAR 0 4
59171: PUSH
59172: LD_INT 1
59174: PLUS
59175: ARRAY
59176: ST_TO_ADDR
59177: GO 59180
59179: POP
59180: GO 59735
59182: LD_INT 2
59184: DOUBLE
59185: EQUAL
59186: IFTRUE 59196
59188: LD_INT 3
59190: DOUBLE
59191: EQUAL
59192: IFTRUE 59196
59194: GO 59252
59196: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59197: LD_ADDR_VAR 0 9
59201: PUSH
59202: LD_VAR 0 29
59206: PUSH
59207: LD_VAR 0 30
59211: PUSH
59212: LD_VAR 0 31
59216: PUSH
59217: LD_VAR 0 32
59221: PUSH
59222: LD_VAR 0 33
59226: PUSH
59227: LD_VAR 0 34
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: PUSH
59240: LD_VAR 0 4
59244: PUSH
59245: LD_INT 1
59247: PLUS
59248: ARRAY
59249: ST_TO_ADDR
59250: GO 59735
59252: LD_INT 16
59254: DOUBLE
59255: EQUAL
59256: IFTRUE 59314
59258: LD_INT 17
59260: DOUBLE
59261: EQUAL
59262: IFTRUE 59314
59264: LD_INT 18
59266: DOUBLE
59267: EQUAL
59268: IFTRUE 59314
59270: LD_INT 19
59272: DOUBLE
59273: EQUAL
59274: IFTRUE 59314
59276: LD_INT 22
59278: DOUBLE
59279: EQUAL
59280: IFTRUE 59314
59282: LD_INT 20
59284: DOUBLE
59285: EQUAL
59286: IFTRUE 59314
59288: LD_INT 21
59290: DOUBLE
59291: EQUAL
59292: IFTRUE 59314
59294: LD_INT 23
59296: DOUBLE
59297: EQUAL
59298: IFTRUE 59314
59300: LD_INT 24
59302: DOUBLE
59303: EQUAL
59304: IFTRUE 59314
59306: LD_INT 25
59308: DOUBLE
59309: EQUAL
59310: IFTRUE 59314
59312: GO 59370
59314: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59315: LD_ADDR_VAR 0 9
59319: PUSH
59320: LD_VAR 0 35
59324: PUSH
59325: LD_VAR 0 36
59329: PUSH
59330: LD_VAR 0 37
59334: PUSH
59335: LD_VAR 0 38
59339: PUSH
59340: LD_VAR 0 39
59344: PUSH
59345: LD_VAR 0 40
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: PUSH
59358: LD_VAR 0 4
59362: PUSH
59363: LD_INT 1
59365: PLUS
59366: ARRAY
59367: ST_TO_ADDR
59368: GO 59735
59370: LD_INT 6
59372: DOUBLE
59373: EQUAL
59374: IFTRUE 59426
59376: LD_INT 7
59378: DOUBLE
59379: EQUAL
59380: IFTRUE 59426
59382: LD_INT 8
59384: DOUBLE
59385: EQUAL
59386: IFTRUE 59426
59388: LD_INT 13
59390: DOUBLE
59391: EQUAL
59392: IFTRUE 59426
59394: LD_INT 12
59396: DOUBLE
59397: EQUAL
59398: IFTRUE 59426
59400: LD_INT 15
59402: DOUBLE
59403: EQUAL
59404: IFTRUE 59426
59406: LD_INT 11
59408: DOUBLE
59409: EQUAL
59410: IFTRUE 59426
59412: LD_INT 14
59414: DOUBLE
59415: EQUAL
59416: IFTRUE 59426
59418: LD_INT 10
59420: DOUBLE
59421: EQUAL
59422: IFTRUE 59426
59424: GO 59482
59426: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59427: LD_ADDR_VAR 0 9
59431: PUSH
59432: LD_VAR 0 41
59436: PUSH
59437: LD_VAR 0 42
59441: PUSH
59442: LD_VAR 0 43
59446: PUSH
59447: LD_VAR 0 44
59451: PUSH
59452: LD_VAR 0 45
59456: PUSH
59457: LD_VAR 0 46
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: PUSH
59470: LD_VAR 0 4
59474: PUSH
59475: LD_INT 1
59477: PLUS
59478: ARRAY
59479: ST_TO_ADDR
59480: GO 59735
59482: LD_INT 36
59484: DOUBLE
59485: EQUAL
59486: IFTRUE 59490
59488: GO 59546
59490: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59491: LD_ADDR_VAR 0 9
59495: PUSH
59496: LD_VAR 0 47
59500: PUSH
59501: LD_VAR 0 48
59505: PUSH
59506: LD_VAR 0 49
59510: PUSH
59511: LD_VAR 0 50
59515: PUSH
59516: LD_VAR 0 51
59520: PUSH
59521: LD_VAR 0 52
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: PUSH
59534: LD_VAR 0 4
59538: PUSH
59539: LD_INT 1
59541: PLUS
59542: ARRAY
59543: ST_TO_ADDR
59544: GO 59735
59546: LD_INT 4
59548: DOUBLE
59549: EQUAL
59550: IFTRUE 59572
59552: LD_INT 5
59554: DOUBLE
59555: EQUAL
59556: IFTRUE 59572
59558: LD_INT 34
59560: DOUBLE
59561: EQUAL
59562: IFTRUE 59572
59564: LD_INT 37
59566: DOUBLE
59567: EQUAL
59568: IFTRUE 59572
59570: GO 59628
59572: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59573: LD_ADDR_VAR 0 9
59577: PUSH
59578: LD_VAR 0 53
59582: PUSH
59583: LD_VAR 0 54
59587: PUSH
59588: LD_VAR 0 55
59592: PUSH
59593: LD_VAR 0 56
59597: PUSH
59598: LD_VAR 0 57
59602: PUSH
59603: LD_VAR 0 58
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: PUSH
59616: LD_VAR 0 4
59620: PUSH
59621: LD_INT 1
59623: PLUS
59624: ARRAY
59625: ST_TO_ADDR
59626: GO 59735
59628: LD_INT 31
59630: DOUBLE
59631: EQUAL
59632: IFTRUE 59678
59634: LD_INT 32
59636: DOUBLE
59637: EQUAL
59638: IFTRUE 59678
59640: LD_INT 33
59642: DOUBLE
59643: EQUAL
59644: IFTRUE 59678
59646: LD_INT 27
59648: DOUBLE
59649: EQUAL
59650: IFTRUE 59678
59652: LD_INT 26
59654: DOUBLE
59655: EQUAL
59656: IFTRUE 59678
59658: LD_INT 28
59660: DOUBLE
59661: EQUAL
59662: IFTRUE 59678
59664: LD_INT 29
59666: DOUBLE
59667: EQUAL
59668: IFTRUE 59678
59670: LD_INT 30
59672: DOUBLE
59673: EQUAL
59674: IFTRUE 59678
59676: GO 59734
59678: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59679: LD_ADDR_VAR 0 9
59683: PUSH
59684: LD_VAR 0 59
59688: PUSH
59689: LD_VAR 0 60
59693: PUSH
59694: LD_VAR 0 61
59698: PUSH
59699: LD_VAR 0 62
59703: PUSH
59704: LD_VAR 0 63
59708: PUSH
59709: LD_VAR 0 64
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: PUSH
59722: LD_VAR 0 4
59726: PUSH
59727: LD_INT 1
59729: PLUS
59730: ARRAY
59731: ST_TO_ADDR
59732: GO 59735
59734: POP
// temp_list2 = [ ] ;
59735: LD_ADDR_VAR 0 10
59739: PUSH
59740: EMPTY
59741: ST_TO_ADDR
// for i in temp_list do
59742: LD_ADDR_VAR 0 8
59746: PUSH
59747: LD_VAR 0 9
59751: PUSH
59752: FOR_IN
59753: IFFALSE 59805
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59755: LD_ADDR_VAR 0 10
59759: PUSH
59760: LD_VAR 0 10
59764: PUSH
59765: LD_VAR 0 8
59769: PUSH
59770: LD_INT 1
59772: ARRAY
59773: PUSH
59774: LD_VAR 0 2
59778: PLUS
59779: PUSH
59780: LD_VAR 0 8
59784: PUSH
59785: LD_INT 2
59787: ARRAY
59788: PUSH
59789: LD_VAR 0 3
59793: PLUS
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: EMPTY
59800: LIST
59801: ADD
59802: ST_TO_ADDR
59803: GO 59752
59805: POP
59806: POP
// result = temp_list2 ;
59807: LD_ADDR_VAR 0 7
59811: PUSH
59812: LD_VAR 0 10
59816: ST_TO_ADDR
// end ;
59817: LD_VAR 0 7
59821: RET
// export function EnemyInRange ( unit , dist ) ; begin
59822: LD_INT 0
59824: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59825: LD_ADDR_VAR 0 3
59829: PUSH
59830: LD_VAR 0 1
59834: PPUSH
59835: CALL_OW 255
59839: PPUSH
59840: LD_VAR 0 1
59844: PPUSH
59845: CALL_OW 250
59849: PPUSH
59850: LD_VAR 0 1
59854: PPUSH
59855: CALL_OW 251
59859: PPUSH
59860: LD_VAR 0 2
59864: PPUSH
59865: CALL 33218 0 4
59869: PUSH
59870: LD_INT 4
59872: ARRAY
59873: ST_TO_ADDR
// end ;
59874: LD_VAR 0 3
59878: RET
// export function PlayerSeeMe ( unit ) ; begin
59879: LD_INT 0
59881: PPUSH
// result := See ( your_side , unit ) ;
59882: LD_ADDR_VAR 0 2
59886: PUSH
59887: LD_OWVAR 2
59891: PPUSH
59892: LD_VAR 0 1
59896: PPUSH
59897: CALL_OW 292
59901: ST_TO_ADDR
// end ;
59902: LD_VAR 0 2
59906: RET
// export function ReverseDir ( unit ) ; begin
59907: LD_INT 0
59909: PPUSH
// if not unit then
59910: LD_VAR 0 1
59914: NOT
59915: IFFALSE 59919
// exit ;
59917: GO 59942
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59919: LD_ADDR_VAR 0 2
59923: PUSH
59924: LD_VAR 0 1
59928: PPUSH
59929: CALL_OW 254
59933: PUSH
59934: LD_INT 3
59936: PLUS
59937: PUSH
59938: LD_INT 6
59940: MOD
59941: ST_TO_ADDR
// end ;
59942: LD_VAR 0 2
59946: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59947: LD_INT 0
59949: PPUSH
59950: PPUSH
59951: PPUSH
59952: PPUSH
59953: PPUSH
// if not hexes then
59954: LD_VAR 0 2
59958: NOT
59959: IFFALSE 59963
// exit ;
59961: GO 60111
// dist := 9999 ;
59963: LD_ADDR_VAR 0 5
59967: PUSH
59968: LD_INT 9999
59970: ST_TO_ADDR
// for i = 1 to hexes do
59971: LD_ADDR_VAR 0 4
59975: PUSH
59976: DOUBLE
59977: LD_INT 1
59979: DEC
59980: ST_TO_ADDR
59981: LD_VAR 0 2
59985: PUSH
59986: FOR_TO
59987: IFFALSE 60099
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59989: LD_VAR 0 1
59993: PPUSH
59994: LD_VAR 0 2
59998: PUSH
59999: LD_VAR 0 4
60003: ARRAY
60004: PUSH
60005: LD_INT 1
60007: ARRAY
60008: PPUSH
60009: LD_VAR 0 2
60013: PUSH
60014: LD_VAR 0 4
60018: ARRAY
60019: PUSH
60020: LD_INT 2
60022: ARRAY
60023: PPUSH
60024: CALL_OW 297
60028: PUSH
60029: LD_VAR 0 5
60033: LESS
60034: IFFALSE 60097
// begin hex := hexes [ i ] ;
60036: LD_ADDR_VAR 0 7
60040: PUSH
60041: LD_VAR 0 2
60045: PUSH
60046: LD_VAR 0 4
60050: ARRAY
60051: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60052: LD_ADDR_VAR 0 5
60056: PUSH
60057: LD_VAR 0 1
60061: PPUSH
60062: LD_VAR 0 2
60066: PUSH
60067: LD_VAR 0 4
60071: ARRAY
60072: PUSH
60073: LD_INT 1
60075: ARRAY
60076: PPUSH
60077: LD_VAR 0 2
60081: PUSH
60082: LD_VAR 0 4
60086: ARRAY
60087: PUSH
60088: LD_INT 2
60090: ARRAY
60091: PPUSH
60092: CALL_OW 297
60096: ST_TO_ADDR
// end ; end ;
60097: GO 59986
60099: POP
60100: POP
// result := hex ;
60101: LD_ADDR_VAR 0 3
60105: PUSH
60106: LD_VAR 0 7
60110: ST_TO_ADDR
// end ;
60111: LD_VAR 0 3
60115: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60116: LD_INT 0
60118: PPUSH
60119: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60120: LD_VAR 0 1
60124: NOT
60125: PUSH
60126: LD_VAR 0 1
60130: PUSH
60131: LD_INT 21
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 23
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PPUSH
60155: CALL_OW 69
60159: IN
60160: NOT
60161: OR
60162: IFFALSE 60166
// exit ;
60164: GO 60213
// for i = 1 to 3 do
60166: LD_ADDR_VAR 0 3
60170: PUSH
60171: DOUBLE
60172: LD_INT 1
60174: DEC
60175: ST_TO_ADDR
60176: LD_INT 3
60178: PUSH
60179: FOR_TO
60180: IFFALSE 60211
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60182: LD_VAR 0 1
60186: PPUSH
60187: CALL_OW 250
60191: PPUSH
60192: LD_VAR 0 1
60196: PPUSH
60197: CALL_OW 251
60201: PPUSH
60202: LD_INT 1
60204: PPUSH
60205: CALL_OW 453
60209: GO 60179
60211: POP
60212: POP
// end ;
60213: LD_VAR 0 2
60217: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60218: LD_INT 0
60220: PPUSH
60221: PPUSH
60222: PPUSH
60223: PPUSH
60224: PPUSH
60225: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60226: LD_VAR 0 1
60230: NOT
60231: PUSH
60232: LD_VAR 0 2
60236: NOT
60237: OR
60238: PUSH
60239: LD_VAR 0 1
60243: PPUSH
60244: CALL_OW 314
60248: OR
60249: IFFALSE 60253
// exit ;
60251: GO 60694
// x := GetX ( enemy_unit ) ;
60253: LD_ADDR_VAR 0 7
60257: PUSH
60258: LD_VAR 0 2
60262: PPUSH
60263: CALL_OW 250
60267: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60268: LD_ADDR_VAR 0 8
60272: PUSH
60273: LD_VAR 0 2
60277: PPUSH
60278: CALL_OW 251
60282: ST_TO_ADDR
// if not x or not y then
60283: LD_VAR 0 7
60287: NOT
60288: PUSH
60289: LD_VAR 0 8
60293: NOT
60294: OR
60295: IFFALSE 60299
// exit ;
60297: GO 60694
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60299: LD_ADDR_VAR 0 6
60303: PUSH
60304: LD_VAR 0 7
60308: PPUSH
60309: LD_INT 0
60311: PPUSH
60312: LD_INT 4
60314: PPUSH
60315: CALL_OW 272
60319: PUSH
60320: LD_VAR 0 8
60324: PPUSH
60325: LD_INT 0
60327: PPUSH
60328: LD_INT 4
60330: PPUSH
60331: CALL_OW 273
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_VAR 0 7
60344: PPUSH
60345: LD_INT 1
60347: PPUSH
60348: LD_INT 4
60350: PPUSH
60351: CALL_OW 272
60355: PUSH
60356: LD_VAR 0 8
60360: PPUSH
60361: LD_INT 1
60363: PPUSH
60364: LD_INT 4
60366: PPUSH
60367: CALL_OW 273
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_VAR 0 7
60380: PPUSH
60381: LD_INT 2
60383: PPUSH
60384: LD_INT 4
60386: PPUSH
60387: CALL_OW 272
60391: PUSH
60392: LD_VAR 0 8
60396: PPUSH
60397: LD_INT 2
60399: PPUSH
60400: LD_INT 4
60402: PPUSH
60403: CALL_OW 273
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_VAR 0 7
60416: PPUSH
60417: LD_INT 3
60419: PPUSH
60420: LD_INT 4
60422: PPUSH
60423: CALL_OW 272
60427: PUSH
60428: LD_VAR 0 8
60432: PPUSH
60433: LD_INT 3
60435: PPUSH
60436: LD_INT 4
60438: PPUSH
60439: CALL_OW 273
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_VAR 0 7
60452: PPUSH
60453: LD_INT 4
60455: PPUSH
60456: LD_INT 4
60458: PPUSH
60459: CALL_OW 272
60463: PUSH
60464: LD_VAR 0 8
60468: PPUSH
60469: LD_INT 4
60471: PPUSH
60472: LD_INT 4
60474: PPUSH
60475: CALL_OW 273
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_VAR 0 7
60488: PPUSH
60489: LD_INT 5
60491: PPUSH
60492: LD_INT 4
60494: PPUSH
60495: CALL_OW 272
60499: PUSH
60500: LD_VAR 0 8
60504: PPUSH
60505: LD_INT 5
60507: PPUSH
60508: LD_INT 4
60510: PPUSH
60511: CALL_OW 273
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: ST_TO_ADDR
// for i = tmp downto 1 do
60528: LD_ADDR_VAR 0 4
60532: PUSH
60533: DOUBLE
60534: LD_VAR 0 6
60538: INC
60539: ST_TO_ADDR
60540: LD_INT 1
60542: PUSH
60543: FOR_DOWNTO
60544: IFFALSE 60645
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60546: LD_VAR 0 6
60550: PUSH
60551: LD_VAR 0 4
60555: ARRAY
60556: PUSH
60557: LD_INT 1
60559: ARRAY
60560: PPUSH
60561: LD_VAR 0 6
60565: PUSH
60566: LD_VAR 0 4
60570: ARRAY
60571: PUSH
60572: LD_INT 2
60574: ARRAY
60575: PPUSH
60576: CALL_OW 488
60580: NOT
60581: PUSH
60582: LD_VAR 0 6
60586: PUSH
60587: LD_VAR 0 4
60591: ARRAY
60592: PUSH
60593: LD_INT 1
60595: ARRAY
60596: PPUSH
60597: LD_VAR 0 6
60601: PUSH
60602: LD_VAR 0 4
60606: ARRAY
60607: PUSH
60608: LD_INT 2
60610: ARRAY
60611: PPUSH
60612: CALL_OW 428
60616: PUSH
60617: LD_INT 0
60619: NONEQUAL
60620: OR
60621: IFFALSE 60643
// tmp := Delete ( tmp , i ) ;
60623: LD_ADDR_VAR 0 6
60627: PUSH
60628: LD_VAR 0 6
60632: PPUSH
60633: LD_VAR 0 4
60637: PPUSH
60638: CALL_OW 3
60642: ST_TO_ADDR
60643: GO 60543
60645: POP
60646: POP
// j := GetClosestHex ( unit , tmp ) ;
60647: LD_ADDR_VAR 0 5
60651: PUSH
60652: LD_VAR 0 1
60656: PPUSH
60657: LD_VAR 0 6
60661: PPUSH
60662: CALL 59947 0 2
60666: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60667: LD_VAR 0 1
60671: PPUSH
60672: LD_VAR 0 5
60676: PUSH
60677: LD_INT 1
60679: ARRAY
60680: PPUSH
60681: LD_VAR 0 5
60685: PUSH
60686: LD_INT 2
60688: ARRAY
60689: PPUSH
60690: CALL_OW 111
// end ;
60694: LD_VAR 0 3
60698: RET
// export function PrepareApemanSoldier ( ) ; begin
60699: LD_INT 0
60701: PPUSH
// uc_nation := 0 ;
60702: LD_ADDR_OWVAR 21
60706: PUSH
60707: LD_INT 0
60709: ST_TO_ADDR
// hc_sex := sex_male ;
60710: LD_ADDR_OWVAR 27
60714: PUSH
60715: LD_INT 1
60717: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60718: LD_ADDR_OWVAR 28
60722: PUSH
60723: LD_INT 15
60725: ST_TO_ADDR
// hc_gallery :=  ;
60726: LD_ADDR_OWVAR 33
60730: PUSH
60731: LD_STRING 
60733: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60734: LD_ADDR_OWVAR 31
60738: PUSH
60739: LD_INT 0
60741: PPUSH
60742: LD_INT 3
60744: PPUSH
60745: CALL_OW 12
60749: PUSH
60750: LD_INT 0
60752: PPUSH
60753: LD_INT 3
60755: PPUSH
60756: CALL_OW 12
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: ST_TO_ADDR
// end ;
60773: LD_VAR 0 1
60777: RET
// export function PrepareApemanEngineer ( ) ; begin
60778: LD_INT 0
60780: PPUSH
// uc_nation := 0 ;
60781: LD_ADDR_OWVAR 21
60785: PUSH
60786: LD_INT 0
60788: ST_TO_ADDR
// hc_sex := sex_male ;
60789: LD_ADDR_OWVAR 27
60793: PUSH
60794: LD_INT 1
60796: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60797: LD_ADDR_OWVAR 28
60801: PUSH
60802: LD_INT 16
60804: ST_TO_ADDR
// hc_gallery :=  ;
60805: LD_ADDR_OWVAR 33
60809: PUSH
60810: LD_STRING 
60812: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60813: LD_ADDR_OWVAR 31
60817: PUSH
60818: LD_INT 0
60820: PPUSH
60821: LD_INT 3
60823: PPUSH
60824: CALL_OW 12
60828: PUSH
60829: LD_INT 0
60831: PPUSH
60832: LD_INT 3
60834: PPUSH
60835: CALL_OW 12
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: ST_TO_ADDR
// end ;
60852: LD_VAR 0 1
60856: RET
// export function PrepareApeman ( agressivity ) ; begin
60857: LD_INT 0
60859: PPUSH
// uc_side := 0 ;
60860: LD_ADDR_OWVAR 20
60864: PUSH
60865: LD_INT 0
60867: ST_TO_ADDR
// uc_nation := 0 ;
60868: LD_ADDR_OWVAR 21
60872: PUSH
60873: LD_INT 0
60875: ST_TO_ADDR
// hc_sex := sex_male ;
60876: LD_ADDR_OWVAR 27
60880: PUSH
60881: LD_INT 1
60883: ST_TO_ADDR
// hc_class := class_apeman ;
60884: LD_ADDR_OWVAR 28
60888: PUSH
60889: LD_INT 12
60891: ST_TO_ADDR
// hc_gallery :=  ;
60892: LD_ADDR_OWVAR 33
60896: PUSH
60897: LD_STRING 
60899: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60900: LD_ADDR_OWVAR 35
60904: PUSH
60905: LD_VAR 0 1
60909: NEG
60910: PPUSH
60911: LD_VAR 0 1
60915: PPUSH
60916: CALL_OW 12
60920: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60921: LD_ADDR_OWVAR 31
60925: PUSH
60926: LD_INT 0
60928: PPUSH
60929: LD_INT 3
60931: PPUSH
60932: CALL_OW 12
60936: PUSH
60937: LD_INT 0
60939: PPUSH
60940: LD_INT 3
60942: PPUSH
60943: CALL_OW 12
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: ST_TO_ADDR
// end ;
60960: LD_VAR 0 2
60964: RET
// export function PrepareTiger ( agressivity ) ; begin
60965: LD_INT 0
60967: PPUSH
// uc_side := 0 ;
60968: LD_ADDR_OWVAR 20
60972: PUSH
60973: LD_INT 0
60975: ST_TO_ADDR
// uc_nation := 0 ;
60976: LD_ADDR_OWVAR 21
60980: PUSH
60981: LD_INT 0
60983: ST_TO_ADDR
// hc_class := class_tiger ;
60984: LD_ADDR_OWVAR 28
60988: PUSH
60989: LD_INT 14
60991: ST_TO_ADDR
// hc_gallery :=  ;
60992: LD_ADDR_OWVAR 33
60996: PUSH
60997: LD_STRING 
60999: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61000: LD_ADDR_OWVAR 35
61004: PUSH
61005: LD_VAR 0 1
61009: NEG
61010: PPUSH
61011: LD_VAR 0 1
61015: PPUSH
61016: CALL_OW 12
61020: ST_TO_ADDR
// end ;
61021: LD_VAR 0 2
61025: RET
// export function PrepareEnchidna ( ) ; begin
61026: LD_INT 0
61028: PPUSH
// uc_side := 0 ;
61029: LD_ADDR_OWVAR 20
61033: PUSH
61034: LD_INT 0
61036: ST_TO_ADDR
// uc_nation := 0 ;
61037: LD_ADDR_OWVAR 21
61041: PUSH
61042: LD_INT 0
61044: ST_TO_ADDR
// hc_class := class_baggie ;
61045: LD_ADDR_OWVAR 28
61049: PUSH
61050: LD_INT 13
61052: ST_TO_ADDR
// hc_gallery :=  ;
61053: LD_ADDR_OWVAR 33
61057: PUSH
61058: LD_STRING 
61060: ST_TO_ADDR
// end ;
61061: LD_VAR 0 1
61065: RET
// export function PrepareFrog ( ) ; begin
61066: LD_INT 0
61068: PPUSH
// uc_side := 0 ;
61069: LD_ADDR_OWVAR 20
61073: PUSH
61074: LD_INT 0
61076: ST_TO_ADDR
// uc_nation := 0 ;
61077: LD_ADDR_OWVAR 21
61081: PUSH
61082: LD_INT 0
61084: ST_TO_ADDR
// hc_class := class_frog ;
61085: LD_ADDR_OWVAR 28
61089: PUSH
61090: LD_INT 19
61092: ST_TO_ADDR
// hc_gallery :=  ;
61093: LD_ADDR_OWVAR 33
61097: PUSH
61098: LD_STRING 
61100: ST_TO_ADDR
// end ;
61101: LD_VAR 0 1
61105: RET
// export function PrepareFish ( ) ; begin
61106: LD_INT 0
61108: PPUSH
// uc_side := 0 ;
61109: LD_ADDR_OWVAR 20
61113: PUSH
61114: LD_INT 0
61116: ST_TO_ADDR
// uc_nation := 0 ;
61117: LD_ADDR_OWVAR 21
61121: PUSH
61122: LD_INT 0
61124: ST_TO_ADDR
// hc_class := class_fish ;
61125: LD_ADDR_OWVAR 28
61129: PUSH
61130: LD_INT 20
61132: ST_TO_ADDR
// hc_gallery :=  ;
61133: LD_ADDR_OWVAR 33
61137: PUSH
61138: LD_STRING 
61140: ST_TO_ADDR
// end ;
61141: LD_VAR 0 1
61145: RET
// export function PrepareBird ( ) ; begin
61146: LD_INT 0
61148: PPUSH
// uc_side := 0 ;
61149: LD_ADDR_OWVAR 20
61153: PUSH
61154: LD_INT 0
61156: ST_TO_ADDR
// uc_nation := 0 ;
61157: LD_ADDR_OWVAR 21
61161: PUSH
61162: LD_INT 0
61164: ST_TO_ADDR
// hc_class := class_phororhacos ;
61165: LD_ADDR_OWVAR 28
61169: PUSH
61170: LD_INT 18
61172: ST_TO_ADDR
// hc_gallery :=  ;
61173: LD_ADDR_OWVAR 33
61177: PUSH
61178: LD_STRING 
61180: ST_TO_ADDR
// end ;
61181: LD_VAR 0 1
61185: RET
// export function PrepareHorse ( ) ; begin
61186: LD_INT 0
61188: PPUSH
// uc_side := 0 ;
61189: LD_ADDR_OWVAR 20
61193: PUSH
61194: LD_INT 0
61196: ST_TO_ADDR
// uc_nation := 0 ;
61197: LD_ADDR_OWVAR 21
61201: PUSH
61202: LD_INT 0
61204: ST_TO_ADDR
// hc_class := class_horse ;
61205: LD_ADDR_OWVAR 28
61209: PUSH
61210: LD_INT 21
61212: ST_TO_ADDR
// hc_gallery :=  ;
61213: LD_ADDR_OWVAR 33
61217: PUSH
61218: LD_STRING 
61220: ST_TO_ADDR
// end ;
61221: LD_VAR 0 1
61225: RET
// export function PrepareMastodont ( ) ; begin
61226: LD_INT 0
61228: PPUSH
// uc_side := 0 ;
61229: LD_ADDR_OWVAR 20
61233: PUSH
61234: LD_INT 0
61236: ST_TO_ADDR
// uc_nation := 0 ;
61237: LD_ADDR_OWVAR 21
61241: PUSH
61242: LD_INT 0
61244: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61245: LD_ADDR_OWVAR 37
61249: PUSH
61250: LD_INT 31
61252: ST_TO_ADDR
// vc_control := control_rider ;
61253: LD_ADDR_OWVAR 38
61257: PUSH
61258: LD_INT 4
61260: ST_TO_ADDR
// end ;
61261: LD_VAR 0 1
61265: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61266: LD_INT 0
61268: PPUSH
61269: PPUSH
61270: PPUSH
// uc_side = 0 ;
61271: LD_ADDR_OWVAR 20
61275: PUSH
61276: LD_INT 0
61278: ST_TO_ADDR
// uc_nation = 0 ;
61279: LD_ADDR_OWVAR 21
61283: PUSH
61284: LD_INT 0
61286: ST_TO_ADDR
// InitHc_All ( ) ;
61287: CALL_OW 584
// InitVc ;
61291: CALL_OW 20
// if mastodonts then
61295: LD_VAR 0 6
61299: IFFALSE 61366
// for i = 1 to mastodonts do
61301: LD_ADDR_VAR 0 11
61305: PUSH
61306: DOUBLE
61307: LD_INT 1
61309: DEC
61310: ST_TO_ADDR
61311: LD_VAR 0 6
61315: PUSH
61316: FOR_TO
61317: IFFALSE 61364
// begin vc_chassis := 31 ;
61319: LD_ADDR_OWVAR 37
61323: PUSH
61324: LD_INT 31
61326: ST_TO_ADDR
// vc_control := control_rider ;
61327: LD_ADDR_OWVAR 38
61331: PUSH
61332: LD_INT 4
61334: ST_TO_ADDR
// animal := CreateVehicle ;
61335: LD_ADDR_VAR 0 12
61339: PUSH
61340: CALL_OW 45
61344: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61345: LD_VAR 0 12
61349: PPUSH
61350: LD_VAR 0 8
61354: PPUSH
61355: LD_INT 0
61357: PPUSH
61358: CALL 63501 0 3
// end ;
61362: GO 61316
61364: POP
61365: POP
// if horses then
61366: LD_VAR 0 5
61370: IFFALSE 61437
// for i = 1 to horses do
61372: LD_ADDR_VAR 0 11
61376: PUSH
61377: DOUBLE
61378: LD_INT 1
61380: DEC
61381: ST_TO_ADDR
61382: LD_VAR 0 5
61386: PUSH
61387: FOR_TO
61388: IFFALSE 61435
// begin hc_class := 21 ;
61390: LD_ADDR_OWVAR 28
61394: PUSH
61395: LD_INT 21
61397: ST_TO_ADDR
// hc_gallery :=  ;
61398: LD_ADDR_OWVAR 33
61402: PUSH
61403: LD_STRING 
61405: ST_TO_ADDR
// animal := CreateHuman ;
61406: LD_ADDR_VAR 0 12
61410: PUSH
61411: CALL_OW 44
61415: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61416: LD_VAR 0 12
61420: PPUSH
61421: LD_VAR 0 8
61425: PPUSH
61426: LD_INT 0
61428: PPUSH
61429: CALL 63501 0 3
// end ;
61433: GO 61387
61435: POP
61436: POP
// if birds then
61437: LD_VAR 0 1
61441: IFFALSE 61508
// for i = 1 to birds do
61443: LD_ADDR_VAR 0 11
61447: PUSH
61448: DOUBLE
61449: LD_INT 1
61451: DEC
61452: ST_TO_ADDR
61453: LD_VAR 0 1
61457: PUSH
61458: FOR_TO
61459: IFFALSE 61506
// begin hc_class = 18 ;
61461: LD_ADDR_OWVAR 28
61465: PUSH
61466: LD_INT 18
61468: ST_TO_ADDR
// hc_gallery =  ;
61469: LD_ADDR_OWVAR 33
61473: PUSH
61474: LD_STRING 
61476: ST_TO_ADDR
// animal := CreateHuman ;
61477: LD_ADDR_VAR 0 12
61481: PUSH
61482: CALL_OW 44
61486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61487: LD_VAR 0 12
61491: PPUSH
61492: LD_VAR 0 8
61496: PPUSH
61497: LD_INT 0
61499: PPUSH
61500: CALL 63501 0 3
// end ;
61504: GO 61458
61506: POP
61507: POP
// if tigers then
61508: LD_VAR 0 2
61512: IFFALSE 61596
// for i = 1 to tigers do
61514: LD_ADDR_VAR 0 11
61518: PUSH
61519: DOUBLE
61520: LD_INT 1
61522: DEC
61523: ST_TO_ADDR
61524: LD_VAR 0 2
61528: PUSH
61529: FOR_TO
61530: IFFALSE 61594
// begin hc_class = class_tiger ;
61532: LD_ADDR_OWVAR 28
61536: PUSH
61537: LD_INT 14
61539: ST_TO_ADDR
// hc_gallery =  ;
61540: LD_ADDR_OWVAR 33
61544: PUSH
61545: LD_STRING 
61547: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61548: LD_ADDR_OWVAR 35
61552: PUSH
61553: LD_INT 7
61555: NEG
61556: PPUSH
61557: LD_INT 7
61559: PPUSH
61560: CALL_OW 12
61564: ST_TO_ADDR
// animal := CreateHuman ;
61565: LD_ADDR_VAR 0 12
61569: PUSH
61570: CALL_OW 44
61574: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61575: LD_VAR 0 12
61579: PPUSH
61580: LD_VAR 0 8
61584: PPUSH
61585: LD_INT 0
61587: PPUSH
61588: CALL 63501 0 3
// end ;
61592: GO 61529
61594: POP
61595: POP
// if apemans then
61596: LD_VAR 0 3
61600: IFFALSE 61723
// for i = 1 to apemans do
61602: LD_ADDR_VAR 0 11
61606: PUSH
61607: DOUBLE
61608: LD_INT 1
61610: DEC
61611: ST_TO_ADDR
61612: LD_VAR 0 3
61616: PUSH
61617: FOR_TO
61618: IFFALSE 61721
// begin hc_class = class_apeman ;
61620: LD_ADDR_OWVAR 28
61624: PUSH
61625: LD_INT 12
61627: ST_TO_ADDR
// hc_gallery =  ;
61628: LD_ADDR_OWVAR 33
61632: PUSH
61633: LD_STRING 
61635: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61636: LD_ADDR_OWVAR 35
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PPUSH
61645: LD_INT 2
61647: PPUSH
61648: CALL_OW 12
61652: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61653: LD_ADDR_OWVAR 31
61657: PUSH
61658: LD_INT 1
61660: PPUSH
61661: LD_INT 3
61663: PPUSH
61664: CALL_OW 12
61668: PUSH
61669: LD_INT 1
61671: PPUSH
61672: LD_INT 3
61674: PPUSH
61675: CALL_OW 12
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: ST_TO_ADDR
// animal := CreateHuman ;
61692: LD_ADDR_VAR 0 12
61696: PUSH
61697: CALL_OW 44
61701: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61702: LD_VAR 0 12
61706: PPUSH
61707: LD_VAR 0 8
61711: PPUSH
61712: LD_INT 0
61714: PPUSH
61715: CALL 63501 0 3
// end ;
61719: GO 61617
61721: POP
61722: POP
// if enchidnas then
61723: LD_VAR 0 4
61727: IFFALSE 61794
// for i = 1 to enchidnas do
61729: LD_ADDR_VAR 0 11
61733: PUSH
61734: DOUBLE
61735: LD_INT 1
61737: DEC
61738: ST_TO_ADDR
61739: LD_VAR 0 4
61743: PUSH
61744: FOR_TO
61745: IFFALSE 61792
// begin hc_class = 13 ;
61747: LD_ADDR_OWVAR 28
61751: PUSH
61752: LD_INT 13
61754: ST_TO_ADDR
// hc_gallery =  ;
61755: LD_ADDR_OWVAR 33
61759: PUSH
61760: LD_STRING 
61762: ST_TO_ADDR
// animal := CreateHuman ;
61763: LD_ADDR_VAR 0 12
61767: PUSH
61768: CALL_OW 44
61772: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61773: LD_VAR 0 12
61777: PPUSH
61778: LD_VAR 0 8
61782: PPUSH
61783: LD_INT 0
61785: PPUSH
61786: CALL 63501 0 3
// end ;
61790: GO 61744
61792: POP
61793: POP
// if fishes then
61794: LD_VAR 0 7
61798: IFFALSE 61865
// for i = 1 to fishes do
61800: LD_ADDR_VAR 0 11
61804: PUSH
61805: DOUBLE
61806: LD_INT 1
61808: DEC
61809: ST_TO_ADDR
61810: LD_VAR 0 7
61814: PUSH
61815: FOR_TO
61816: IFFALSE 61863
// begin hc_class = 20 ;
61818: LD_ADDR_OWVAR 28
61822: PUSH
61823: LD_INT 20
61825: ST_TO_ADDR
// hc_gallery =  ;
61826: LD_ADDR_OWVAR 33
61830: PUSH
61831: LD_STRING 
61833: ST_TO_ADDR
// animal := CreateHuman ;
61834: LD_ADDR_VAR 0 12
61838: PUSH
61839: CALL_OW 44
61843: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61844: LD_VAR 0 12
61848: PPUSH
61849: LD_VAR 0 9
61853: PPUSH
61854: LD_INT 0
61856: PPUSH
61857: CALL 63501 0 3
// end ;
61861: GO 61815
61863: POP
61864: POP
// end ;
61865: LD_VAR 0 10
61869: RET
// export function WantHeal ( sci , unit ) ; begin
61870: LD_INT 0
61872: PPUSH
// if GetTaskList ( sci ) > 0 then
61873: LD_VAR 0 1
61877: PPUSH
61878: CALL_OW 437
61882: PUSH
61883: LD_INT 0
61885: GREATER
61886: IFFALSE 61956
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61888: LD_VAR 0 1
61892: PPUSH
61893: CALL_OW 437
61897: PUSH
61898: LD_INT 1
61900: ARRAY
61901: PUSH
61902: LD_INT 1
61904: ARRAY
61905: PUSH
61906: LD_STRING l
61908: EQUAL
61909: PUSH
61910: LD_VAR 0 1
61914: PPUSH
61915: CALL_OW 437
61919: PUSH
61920: LD_INT 1
61922: ARRAY
61923: PUSH
61924: LD_INT 4
61926: ARRAY
61927: PUSH
61928: LD_VAR 0 2
61932: EQUAL
61933: AND
61934: IFFALSE 61946
// result := true else
61936: LD_ADDR_VAR 0 3
61940: PUSH
61941: LD_INT 1
61943: ST_TO_ADDR
61944: GO 61954
// result := false ;
61946: LD_ADDR_VAR 0 3
61950: PUSH
61951: LD_INT 0
61953: ST_TO_ADDR
// end else
61954: GO 61964
// result := false ;
61956: LD_ADDR_VAR 0 3
61960: PUSH
61961: LD_INT 0
61963: ST_TO_ADDR
// end ;
61964: LD_VAR 0 3
61968: RET
// export function HealTarget ( sci ) ; begin
61969: LD_INT 0
61971: PPUSH
// if not sci then
61972: LD_VAR 0 1
61976: NOT
61977: IFFALSE 61981
// exit ;
61979: GO 62046
// result := 0 ;
61981: LD_ADDR_VAR 0 2
61985: PUSH
61986: LD_INT 0
61988: ST_TO_ADDR
// if GetTaskList ( sci ) then
61989: LD_VAR 0 1
61993: PPUSH
61994: CALL_OW 437
61998: IFFALSE 62046
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62000: LD_VAR 0 1
62004: PPUSH
62005: CALL_OW 437
62009: PUSH
62010: LD_INT 1
62012: ARRAY
62013: PUSH
62014: LD_INT 1
62016: ARRAY
62017: PUSH
62018: LD_STRING l
62020: EQUAL
62021: IFFALSE 62046
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62023: LD_ADDR_VAR 0 2
62027: PUSH
62028: LD_VAR 0 1
62032: PPUSH
62033: CALL_OW 437
62037: PUSH
62038: LD_INT 1
62040: ARRAY
62041: PUSH
62042: LD_INT 4
62044: ARRAY
62045: ST_TO_ADDR
// end ;
62046: LD_VAR 0 2
62050: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62051: LD_INT 0
62053: PPUSH
62054: PPUSH
62055: PPUSH
62056: PPUSH
// if not base_units then
62057: LD_VAR 0 1
62061: NOT
62062: IFFALSE 62066
// exit ;
62064: GO 62153
// result := false ;
62066: LD_ADDR_VAR 0 2
62070: PUSH
62071: LD_INT 0
62073: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62074: LD_ADDR_VAR 0 5
62078: PUSH
62079: LD_VAR 0 1
62083: PPUSH
62084: LD_INT 21
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PPUSH
62094: CALL_OW 72
62098: ST_TO_ADDR
// if not tmp then
62099: LD_VAR 0 5
62103: NOT
62104: IFFALSE 62108
// exit ;
62106: GO 62153
// for i in tmp do
62108: LD_ADDR_VAR 0 3
62112: PUSH
62113: LD_VAR 0 5
62117: PUSH
62118: FOR_IN
62119: IFFALSE 62151
// begin result := EnemyInRange ( i , 22 ) ;
62121: LD_ADDR_VAR 0 2
62125: PUSH
62126: LD_VAR 0 3
62130: PPUSH
62131: LD_INT 22
62133: PPUSH
62134: CALL 59822 0 2
62138: ST_TO_ADDR
// if result then
62139: LD_VAR 0 2
62143: IFFALSE 62149
// exit ;
62145: POP
62146: POP
62147: GO 62153
// end ;
62149: GO 62118
62151: POP
62152: POP
// end ;
62153: LD_VAR 0 2
62157: RET
// export function FilterByTag ( units , tag ) ; begin
62158: LD_INT 0
62160: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62161: LD_ADDR_VAR 0 3
62165: PUSH
62166: LD_VAR 0 1
62170: PPUSH
62171: LD_INT 120
62173: PUSH
62174: LD_VAR 0 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PPUSH
62183: CALL_OW 72
62187: ST_TO_ADDR
// end ;
62188: LD_VAR 0 3
62192: RET
// export function IsDriver ( un ) ; begin
62193: LD_INT 0
62195: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62196: LD_ADDR_VAR 0 2
62200: PUSH
62201: LD_VAR 0 1
62205: PUSH
62206: LD_INT 55
62208: PUSH
62209: EMPTY
62210: LIST
62211: PPUSH
62212: CALL_OW 69
62216: IN
62217: ST_TO_ADDR
// end ;
62218: LD_VAR 0 2
62222: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62223: LD_INT 0
62225: PPUSH
62226: PPUSH
// list := [ ] ;
62227: LD_ADDR_VAR 0 5
62231: PUSH
62232: EMPTY
62233: ST_TO_ADDR
// case d of 0 :
62234: LD_VAR 0 3
62238: PUSH
62239: LD_INT 0
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62247
62245: GO 62380
62247: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62248: LD_ADDR_VAR 0 5
62252: PUSH
62253: LD_VAR 0 1
62257: PUSH
62258: LD_INT 4
62260: MINUS
62261: PUSH
62262: LD_VAR 0 2
62266: PUSH
62267: LD_INT 4
62269: MINUS
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: PUSH
62279: LD_VAR 0 1
62283: PUSH
62284: LD_INT 3
62286: MINUS
62287: PUSH
62288: LD_VAR 0 2
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: LIST
62300: PUSH
62301: LD_VAR 0 1
62305: PUSH
62306: LD_INT 4
62308: PLUS
62309: PUSH
62310: LD_VAR 0 2
62314: PUSH
62315: LD_INT 4
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: LIST
62322: PUSH
62323: LD_VAR 0 1
62327: PUSH
62328: LD_INT 3
62330: PLUS
62331: PUSH
62332: LD_VAR 0 2
62336: PUSH
62337: LD_INT 3
62339: PLUS
62340: PUSH
62341: LD_INT 5
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: PUSH
62349: LD_VAR 0 1
62353: PUSH
62354: LD_VAR 0 2
62358: PUSH
62359: LD_INT 4
62361: PLUS
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: ST_TO_ADDR
// end ; 1 :
62378: GO 63078
62380: LD_INT 1
62382: DOUBLE
62383: EQUAL
62384: IFTRUE 62388
62386: GO 62521
62388: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62389: LD_ADDR_VAR 0 5
62393: PUSH
62394: LD_VAR 0 1
62398: PUSH
62399: LD_VAR 0 2
62403: PUSH
62404: LD_INT 4
62406: MINUS
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: LIST
62415: PUSH
62416: LD_VAR 0 1
62420: PUSH
62421: LD_INT 3
62423: MINUS
62424: PUSH
62425: LD_VAR 0 2
62429: PUSH
62430: LD_INT 3
62432: MINUS
62433: PUSH
62434: LD_INT 2
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: LIST
62441: PUSH
62442: LD_VAR 0 1
62446: PUSH
62447: LD_INT 4
62449: MINUS
62450: PUSH
62451: LD_VAR 0 2
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: LIST
62463: PUSH
62464: LD_VAR 0 1
62468: PUSH
62469: LD_VAR 0 2
62473: PUSH
62474: LD_INT 3
62476: PLUS
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: LIST
62485: PUSH
62486: LD_VAR 0 1
62490: PUSH
62491: LD_INT 4
62493: PLUS
62494: PUSH
62495: LD_VAR 0 2
62499: PUSH
62500: LD_INT 4
62502: PLUS
62503: PUSH
62504: LD_INT 5
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: LIST
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: ST_TO_ADDR
// end ; 2 :
62519: GO 63078
62521: LD_INT 2
62523: DOUBLE
62524: EQUAL
62525: IFTRUE 62529
62527: GO 62658
62529: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62530: LD_ADDR_VAR 0 5
62534: PUSH
62535: LD_VAR 0 1
62539: PUSH
62540: LD_VAR 0 2
62544: PUSH
62545: LD_INT 3
62547: MINUS
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: LIST
62556: PUSH
62557: LD_VAR 0 1
62561: PUSH
62562: LD_INT 4
62564: PLUS
62565: PUSH
62566: LD_VAR 0 2
62570: PUSH
62571: LD_INT 4
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: LIST
62578: PUSH
62579: LD_VAR 0 1
62583: PUSH
62584: LD_VAR 0 2
62588: PUSH
62589: LD_INT 4
62591: PLUS
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: LIST
62600: PUSH
62601: LD_VAR 0 1
62605: PUSH
62606: LD_INT 3
62608: MINUS
62609: PUSH
62610: LD_VAR 0 2
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: PUSH
62623: LD_VAR 0 1
62627: PUSH
62628: LD_INT 4
62630: MINUS
62631: PUSH
62632: LD_VAR 0 2
62636: PUSH
62637: LD_INT 4
62639: MINUS
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: LIST
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: ST_TO_ADDR
// end ; 3 :
62656: GO 63078
62658: LD_INT 3
62660: DOUBLE
62661: EQUAL
62662: IFTRUE 62666
62664: GO 62799
62666: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62667: LD_ADDR_VAR 0 5
62671: PUSH
62672: LD_VAR 0 1
62676: PUSH
62677: LD_INT 3
62679: PLUS
62680: PUSH
62681: LD_VAR 0 2
62685: PUSH
62686: LD_INT 4
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: PUSH
62694: LD_VAR 0 1
62698: PUSH
62699: LD_INT 4
62701: PLUS
62702: PUSH
62703: LD_VAR 0 2
62707: PUSH
62708: LD_INT 4
62710: PLUS
62711: PUSH
62712: LD_INT 5
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: LIST
62719: PUSH
62720: LD_VAR 0 1
62724: PUSH
62725: LD_INT 4
62727: MINUS
62728: PUSH
62729: LD_VAR 0 2
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: LIST
62741: PUSH
62742: LD_VAR 0 1
62746: PUSH
62747: LD_VAR 0 2
62751: PUSH
62752: LD_INT 4
62754: MINUS
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: LIST
62763: PUSH
62764: LD_VAR 0 1
62768: PUSH
62769: LD_INT 3
62771: MINUS
62772: PUSH
62773: LD_VAR 0 2
62777: PUSH
62778: LD_INT 3
62780: MINUS
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: ST_TO_ADDR
// end ; 4 :
62797: GO 63078
62799: LD_INT 4
62801: DOUBLE
62802: EQUAL
62803: IFTRUE 62807
62805: GO 62940
62807: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62808: LD_ADDR_VAR 0 5
62812: PUSH
62813: LD_VAR 0 1
62817: PUSH
62818: LD_VAR 0 2
62822: PUSH
62823: LD_INT 4
62825: PLUS
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: LIST
62834: PUSH
62835: LD_VAR 0 1
62839: PUSH
62840: LD_INT 3
62842: PLUS
62843: PUSH
62844: LD_VAR 0 2
62848: PUSH
62849: LD_INT 3
62851: PLUS
62852: PUSH
62853: LD_INT 5
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: LIST
62860: PUSH
62861: LD_VAR 0 1
62865: PUSH
62866: LD_INT 4
62868: PLUS
62869: PUSH
62870: LD_VAR 0 2
62874: PUSH
62875: LD_INT 4
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: LIST
62882: PUSH
62883: LD_VAR 0 1
62887: PUSH
62888: LD_VAR 0 2
62892: PUSH
62893: LD_INT 3
62895: MINUS
62896: PUSH
62897: LD_INT 3
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: LIST
62904: PUSH
62905: LD_VAR 0 1
62909: PUSH
62910: LD_INT 4
62912: MINUS
62913: PUSH
62914: LD_VAR 0 2
62918: PUSH
62919: LD_INT 4
62921: MINUS
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: LIST
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: ST_TO_ADDR
// end ; 5 :
62938: GO 63078
62940: LD_INT 5
62942: DOUBLE
62943: EQUAL
62944: IFTRUE 62948
62946: GO 63077
62948: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62949: LD_ADDR_VAR 0 5
62953: PUSH
62954: LD_VAR 0 1
62958: PUSH
62959: LD_INT 4
62961: MINUS
62962: PUSH
62963: LD_VAR 0 2
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: LIST
62975: PUSH
62976: LD_VAR 0 1
62980: PUSH
62981: LD_VAR 0 2
62985: PUSH
62986: LD_INT 4
62988: MINUS
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: LIST
62997: PUSH
62998: LD_VAR 0 1
63002: PUSH
63003: LD_INT 4
63005: PLUS
63006: PUSH
63007: LD_VAR 0 2
63011: PUSH
63012: LD_INT 4
63014: PLUS
63015: PUSH
63016: LD_INT 5
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: LIST
63023: PUSH
63024: LD_VAR 0 1
63028: PUSH
63029: LD_INT 3
63031: PLUS
63032: PUSH
63033: LD_VAR 0 2
63037: PUSH
63038: LD_INT 4
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: PUSH
63046: LD_VAR 0 1
63050: PUSH
63051: LD_VAR 0 2
63055: PUSH
63056: LD_INT 3
63058: PLUS
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: ST_TO_ADDR
// end ; end ;
63075: GO 63078
63077: POP
// result := list ;
63078: LD_ADDR_VAR 0 4
63082: PUSH
63083: LD_VAR 0 5
63087: ST_TO_ADDR
// end ;
63088: LD_VAR 0 4
63092: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63093: LD_INT 0
63095: PPUSH
63096: PPUSH
63097: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63098: LD_VAR 0 1
63102: NOT
63103: PUSH
63104: LD_VAR 0 2
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: LD_INT 2
63114: PUSH
63115: LD_INT 3
63117: PUSH
63118: LD_INT 4
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: IN
63127: NOT
63128: OR
63129: IFFALSE 63133
// exit ;
63131: GO 63225
// tmp := [ ] ;
63133: LD_ADDR_VAR 0 5
63137: PUSH
63138: EMPTY
63139: ST_TO_ADDR
// for i in units do
63140: LD_ADDR_VAR 0 4
63144: PUSH
63145: LD_VAR 0 1
63149: PUSH
63150: FOR_IN
63151: IFFALSE 63194
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63153: LD_ADDR_VAR 0 5
63157: PUSH
63158: LD_VAR 0 5
63162: PPUSH
63163: LD_VAR 0 5
63167: PUSH
63168: LD_INT 1
63170: PLUS
63171: PPUSH
63172: LD_VAR 0 4
63176: PPUSH
63177: LD_VAR 0 2
63181: PPUSH
63182: CALL_OW 259
63186: PPUSH
63187: CALL_OW 2
63191: ST_TO_ADDR
63192: GO 63150
63194: POP
63195: POP
// if not tmp then
63196: LD_VAR 0 5
63200: NOT
63201: IFFALSE 63205
// exit ;
63203: GO 63225
// result := SortListByListDesc ( units , tmp ) ;
63205: LD_ADDR_VAR 0 3
63209: PUSH
63210: LD_VAR 0 1
63214: PPUSH
63215: LD_VAR 0 5
63219: PPUSH
63220: CALL_OW 77
63224: ST_TO_ADDR
// end ;
63225: LD_VAR 0 3
63229: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63230: LD_INT 0
63232: PPUSH
63233: PPUSH
63234: PPUSH
// result := false ;
63235: LD_ADDR_VAR 0 3
63239: PUSH
63240: LD_INT 0
63242: ST_TO_ADDR
// x := GetX ( building ) ;
63243: LD_ADDR_VAR 0 4
63247: PUSH
63248: LD_VAR 0 2
63252: PPUSH
63253: CALL_OW 250
63257: ST_TO_ADDR
// y := GetY ( building ) ;
63258: LD_ADDR_VAR 0 5
63262: PUSH
63263: LD_VAR 0 2
63267: PPUSH
63268: CALL_OW 251
63272: ST_TO_ADDR
// if not building or not x or not y then
63273: LD_VAR 0 2
63277: NOT
63278: PUSH
63279: LD_VAR 0 4
63283: NOT
63284: OR
63285: PUSH
63286: LD_VAR 0 5
63290: NOT
63291: OR
63292: IFFALSE 63296
// exit ;
63294: GO 63388
// if GetTaskList ( unit ) then
63296: LD_VAR 0 1
63300: PPUSH
63301: CALL_OW 437
63305: IFFALSE 63388
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63307: LD_STRING e
63309: PUSH
63310: LD_VAR 0 1
63314: PPUSH
63315: CALL_OW 437
63319: PUSH
63320: LD_INT 1
63322: ARRAY
63323: PUSH
63324: LD_INT 1
63326: ARRAY
63327: EQUAL
63328: PUSH
63329: LD_VAR 0 4
63333: PUSH
63334: LD_VAR 0 1
63338: PPUSH
63339: CALL_OW 437
63343: PUSH
63344: LD_INT 1
63346: ARRAY
63347: PUSH
63348: LD_INT 2
63350: ARRAY
63351: EQUAL
63352: AND
63353: PUSH
63354: LD_VAR 0 5
63358: PUSH
63359: LD_VAR 0 1
63363: PPUSH
63364: CALL_OW 437
63368: PUSH
63369: LD_INT 1
63371: ARRAY
63372: PUSH
63373: LD_INT 3
63375: ARRAY
63376: EQUAL
63377: AND
63378: IFFALSE 63388
// result := true end ;
63380: LD_ADDR_VAR 0 3
63384: PUSH
63385: LD_INT 1
63387: ST_TO_ADDR
// end ;
63388: LD_VAR 0 3
63392: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63393: LD_INT 0
63395: PPUSH
// result := false ;
63396: LD_ADDR_VAR 0 4
63400: PUSH
63401: LD_INT 0
63403: ST_TO_ADDR
// if GetTaskList ( unit ) then
63404: LD_VAR 0 1
63408: PPUSH
63409: CALL_OW 437
63413: IFFALSE 63496
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63415: LD_STRING M
63417: PUSH
63418: LD_VAR 0 1
63422: PPUSH
63423: CALL_OW 437
63427: PUSH
63428: LD_INT 1
63430: ARRAY
63431: PUSH
63432: LD_INT 1
63434: ARRAY
63435: EQUAL
63436: PUSH
63437: LD_VAR 0 2
63441: PUSH
63442: LD_VAR 0 1
63446: PPUSH
63447: CALL_OW 437
63451: PUSH
63452: LD_INT 1
63454: ARRAY
63455: PUSH
63456: LD_INT 2
63458: ARRAY
63459: EQUAL
63460: AND
63461: PUSH
63462: LD_VAR 0 3
63466: PUSH
63467: LD_VAR 0 1
63471: PPUSH
63472: CALL_OW 437
63476: PUSH
63477: LD_INT 1
63479: ARRAY
63480: PUSH
63481: LD_INT 3
63483: ARRAY
63484: EQUAL
63485: AND
63486: IFFALSE 63496
// result := true ;
63488: LD_ADDR_VAR 0 4
63492: PUSH
63493: LD_INT 1
63495: ST_TO_ADDR
// end ; end ;
63496: LD_VAR 0 4
63500: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63501: LD_INT 0
63503: PPUSH
63504: PPUSH
63505: PPUSH
63506: PPUSH
// if not unit or not area then
63507: LD_VAR 0 1
63511: NOT
63512: PUSH
63513: LD_VAR 0 2
63517: NOT
63518: OR
63519: IFFALSE 63523
// exit ;
63521: GO 63687
// tmp := AreaToList ( area , i ) ;
63523: LD_ADDR_VAR 0 6
63527: PUSH
63528: LD_VAR 0 2
63532: PPUSH
63533: LD_VAR 0 5
63537: PPUSH
63538: CALL_OW 517
63542: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63543: LD_ADDR_VAR 0 5
63547: PUSH
63548: DOUBLE
63549: LD_INT 1
63551: DEC
63552: ST_TO_ADDR
63553: LD_VAR 0 6
63557: PUSH
63558: LD_INT 1
63560: ARRAY
63561: PUSH
63562: FOR_TO
63563: IFFALSE 63685
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63565: LD_ADDR_VAR 0 7
63569: PUSH
63570: LD_VAR 0 6
63574: PUSH
63575: LD_INT 1
63577: ARRAY
63578: PUSH
63579: LD_VAR 0 5
63583: ARRAY
63584: PUSH
63585: LD_VAR 0 6
63589: PUSH
63590: LD_INT 2
63592: ARRAY
63593: PUSH
63594: LD_VAR 0 5
63598: ARRAY
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63604: LD_VAR 0 7
63608: PUSH
63609: LD_INT 1
63611: ARRAY
63612: PPUSH
63613: LD_VAR 0 7
63617: PUSH
63618: LD_INT 2
63620: ARRAY
63621: PPUSH
63622: CALL_OW 428
63626: PUSH
63627: LD_INT 0
63629: EQUAL
63630: IFFALSE 63683
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63632: LD_VAR 0 1
63636: PPUSH
63637: LD_VAR 0 7
63641: PUSH
63642: LD_INT 1
63644: ARRAY
63645: PPUSH
63646: LD_VAR 0 7
63650: PUSH
63651: LD_INT 2
63653: ARRAY
63654: PPUSH
63655: LD_VAR 0 3
63659: PPUSH
63660: CALL_OW 48
// result := IsPlaced ( unit ) ;
63664: LD_ADDR_VAR 0 4
63668: PUSH
63669: LD_VAR 0 1
63673: PPUSH
63674: CALL_OW 305
63678: ST_TO_ADDR
// exit ;
63679: POP
63680: POP
63681: GO 63687
// end ; end ;
63683: GO 63562
63685: POP
63686: POP
// end ;
63687: LD_VAR 0 4
63691: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63692: LD_INT 0
63694: PPUSH
63695: PPUSH
63696: PPUSH
// if not side or side > 8 then
63697: LD_VAR 0 1
63701: NOT
63702: PUSH
63703: LD_VAR 0 1
63707: PUSH
63708: LD_INT 8
63710: GREATER
63711: OR
63712: IFFALSE 63716
// exit ;
63714: GO 63903
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63716: LD_ADDR_VAR 0 4
63720: PUSH
63721: LD_INT 22
63723: PUSH
63724: LD_VAR 0 1
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 21
63735: PUSH
63736: LD_INT 3
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PPUSH
63747: CALL_OW 69
63751: ST_TO_ADDR
// if not tmp then
63752: LD_VAR 0 4
63756: NOT
63757: IFFALSE 63761
// exit ;
63759: GO 63903
// enable_addtolog := true ;
63761: LD_ADDR_OWVAR 81
63765: PUSH
63766: LD_INT 1
63768: ST_TO_ADDR
// AddToLog ( [ ) ;
63769: LD_STRING [
63771: PPUSH
63772: CALL_OW 561
// for i in tmp do
63776: LD_ADDR_VAR 0 3
63780: PUSH
63781: LD_VAR 0 4
63785: PUSH
63786: FOR_IN
63787: IFFALSE 63894
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63789: LD_STRING [
63791: PUSH
63792: LD_VAR 0 3
63796: PPUSH
63797: CALL_OW 266
63801: STR
63802: PUSH
63803: LD_STRING , 
63805: STR
63806: PUSH
63807: LD_VAR 0 3
63811: PPUSH
63812: CALL_OW 250
63816: STR
63817: PUSH
63818: LD_STRING , 
63820: STR
63821: PUSH
63822: LD_VAR 0 3
63826: PPUSH
63827: CALL_OW 251
63831: STR
63832: PUSH
63833: LD_STRING , 
63835: STR
63836: PUSH
63837: LD_VAR 0 3
63841: PPUSH
63842: CALL_OW 254
63846: STR
63847: PUSH
63848: LD_STRING , 
63850: STR
63851: PUSH
63852: LD_VAR 0 3
63856: PPUSH
63857: LD_INT 1
63859: PPUSH
63860: CALL_OW 268
63864: STR
63865: PUSH
63866: LD_STRING , 
63868: STR
63869: PUSH
63870: LD_VAR 0 3
63874: PPUSH
63875: LD_INT 2
63877: PPUSH
63878: CALL_OW 268
63882: STR
63883: PUSH
63884: LD_STRING ],
63886: STR
63887: PPUSH
63888: CALL_OW 561
// end ;
63892: GO 63786
63894: POP
63895: POP
// AddToLog ( ]; ) ;
63896: LD_STRING ];
63898: PPUSH
63899: CALL_OW 561
// end ;
63903: LD_VAR 0 2
63907: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63908: LD_INT 0
63910: PPUSH
63911: PPUSH
63912: PPUSH
63913: PPUSH
63914: PPUSH
// if not area or not rate or not max then
63915: LD_VAR 0 1
63919: NOT
63920: PUSH
63921: LD_VAR 0 2
63925: NOT
63926: OR
63927: PUSH
63928: LD_VAR 0 4
63932: NOT
63933: OR
63934: IFFALSE 63938
// exit ;
63936: GO 64127
// while 1 do
63938: LD_INT 1
63940: IFFALSE 64127
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63942: LD_ADDR_VAR 0 9
63946: PUSH
63947: LD_VAR 0 1
63951: PPUSH
63952: LD_INT 1
63954: PPUSH
63955: CALL_OW 287
63959: PUSH
63960: LD_INT 10
63962: MUL
63963: ST_TO_ADDR
// r := rate / 10 ;
63964: LD_ADDR_VAR 0 7
63968: PUSH
63969: LD_VAR 0 2
63973: PUSH
63974: LD_INT 10
63976: DIVREAL
63977: ST_TO_ADDR
// time := 1 1$00 ;
63978: LD_ADDR_VAR 0 8
63982: PUSH
63983: LD_INT 2100
63985: ST_TO_ADDR
// if amount < min then
63986: LD_VAR 0 9
63990: PUSH
63991: LD_VAR 0 3
63995: LESS
63996: IFFALSE 64014
// r := r * 2 else
63998: LD_ADDR_VAR 0 7
64002: PUSH
64003: LD_VAR 0 7
64007: PUSH
64008: LD_INT 2
64010: MUL
64011: ST_TO_ADDR
64012: GO 64040
// if amount > max then
64014: LD_VAR 0 9
64018: PUSH
64019: LD_VAR 0 4
64023: GREATER
64024: IFFALSE 64040
// r := r / 2 ;
64026: LD_ADDR_VAR 0 7
64030: PUSH
64031: LD_VAR 0 7
64035: PUSH
64036: LD_INT 2
64038: DIVREAL
64039: ST_TO_ADDR
// time := time / r ;
64040: LD_ADDR_VAR 0 8
64044: PUSH
64045: LD_VAR 0 8
64049: PUSH
64050: LD_VAR 0 7
64054: DIVREAL
64055: ST_TO_ADDR
// if time < 0 then
64056: LD_VAR 0 8
64060: PUSH
64061: LD_INT 0
64063: LESS
64064: IFFALSE 64081
// time := time * - 1 ;
64066: LD_ADDR_VAR 0 8
64070: PUSH
64071: LD_VAR 0 8
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: MUL
64080: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64081: LD_VAR 0 8
64085: PUSH
64086: LD_INT 35
64088: PPUSH
64089: LD_INT 875
64091: PPUSH
64092: CALL_OW 12
64096: PLUS
64097: PPUSH
64098: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64102: LD_INT 1
64104: PPUSH
64105: LD_INT 5
64107: PPUSH
64108: CALL_OW 12
64112: PPUSH
64113: LD_VAR 0 1
64117: PPUSH
64118: LD_INT 1
64120: PPUSH
64121: CALL_OW 55
// end ;
64125: GO 63938
// end ;
64127: LD_VAR 0 5
64131: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64132: LD_INT 0
64134: PPUSH
64135: PPUSH
64136: PPUSH
64137: PPUSH
64138: PPUSH
64139: PPUSH
64140: PPUSH
64141: PPUSH
// if not turrets or not factories then
64142: LD_VAR 0 1
64146: NOT
64147: PUSH
64148: LD_VAR 0 2
64152: NOT
64153: OR
64154: IFFALSE 64158
// exit ;
64156: GO 64465
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64158: LD_ADDR_VAR 0 10
64162: PUSH
64163: LD_INT 5
64165: PUSH
64166: LD_INT 6
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 2
64175: PUSH
64176: LD_INT 4
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 3
64185: PUSH
64186: LD_INT 5
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 24
64200: PUSH
64201: LD_INT 25
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 23
64210: PUSH
64211: LD_INT 27
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 42
64224: PUSH
64225: LD_INT 43
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 44
64234: PUSH
64235: LD_INT 46
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 45
64244: PUSH
64245: LD_INT 47
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: LIST
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: LIST
64261: ST_TO_ADDR
// result := [ ] ;
64262: LD_ADDR_VAR 0 3
64266: PUSH
64267: EMPTY
64268: ST_TO_ADDR
// for i in turrets do
64269: LD_ADDR_VAR 0 4
64273: PUSH
64274: LD_VAR 0 1
64278: PUSH
64279: FOR_IN
64280: IFFALSE 64463
// begin nat := GetNation ( i ) ;
64282: LD_ADDR_VAR 0 7
64286: PUSH
64287: LD_VAR 0 4
64291: PPUSH
64292: CALL_OW 248
64296: ST_TO_ADDR
// weapon := 0 ;
64297: LD_ADDR_VAR 0 8
64301: PUSH
64302: LD_INT 0
64304: ST_TO_ADDR
// if not nat then
64305: LD_VAR 0 7
64309: NOT
64310: IFFALSE 64314
// continue ;
64312: GO 64279
// for j in list [ nat ] do
64314: LD_ADDR_VAR 0 5
64318: PUSH
64319: LD_VAR 0 10
64323: PUSH
64324: LD_VAR 0 7
64328: ARRAY
64329: PUSH
64330: FOR_IN
64331: IFFALSE 64372
// if GetBWeapon ( i ) = j [ 1 ] then
64333: LD_VAR 0 4
64337: PPUSH
64338: CALL_OW 269
64342: PUSH
64343: LD_VAR 0 5
64347: PUSH
64348: LD_INT 1
64350: ARRAY
64351: EQUAL
64352: IFFALSE 64370
// begin weapon := j [ 2 ] ;
64354: LD_ADDR_VAR 0 8
64358: PUSH
64359: LD_VAR 0 5
64363: PUSH
64364: LD_INT 2
64366: ARRAY
64367: ST_TO_ADDR
// break ;
64368: GO 64372
// end ;
64370: GO 64330
64372: POP
64373: POP
// if not weapon then
64374: LD_VAR 0 8
64378: NOT
64379: IFFALSE 64383
// continue ;
64381: GO 64279
// for k in factories do
64383: LD_ADDR_VAR 0 6
64387: PUSH
64388: LD_VAR 0 2
64392: PUSH
64393: FOR_IN
64394: IFFALSE 64459
// begin weapons := AvailableWeaponList ( k ) ;
64396: LD_ADDR_VAR 0 9
64400: PUSH
64401: LD_VAR 0 6
64405: PPUSH
64406: CALL_OW 478
64410: ST_TO_ADDR
// if not weapons then
64411: LD_VAR 0 9
64415: NOT
64416: IFFALSE 64420
// continue ;
64418: GO 64393
// if weapon in weapons then
64420: LD_VAR 0 8
64424: PUSH
64425: LD_VAR 0 9
64429: IN
64430: IFFALSE 64457
// begin result := [ i , weapon ] ;
64432: LD_ADDR_VAR 0 3
64436: PUSH
64437: LD_VAR 0 4
64441: PUSH
64442: LD_VAR 0 8
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: ST_TO_ADDR
// exit ;
64451: POP
64452: POP
64453: POP
64454: POP
64455: GO 64465
// end ; end ;
64457: GO 64393
64459: POP
64460: POP
// end ;
64461: GO 64279
64463: POP
64464: POP
// end ;
64465: LD_VAR 0 3
64469: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64470: LD_INT 0
64472: PPUSH
// if not side or side > 8 then
64473: LD_VAR 0 3
64477: NOT
64478: PUSH
64479: LD_VAR 0 3
64483: PUSH
64484: LD_INT 8
64486: GREATER
64487: OR
64488: IFFALSE 64492
// exit ;
64490: GO 64551
// if not range then
64492: LD_VAR 0 4
64496: NOT
64497: IFFALSE 64508
// range := - 12 ;
64499: LD_ADDR_VAR 0 4
64503: PUSH
64504: LD_INT 12
64506: NEG
64507: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64508: LD_VAR 0 1
64512: PPUSH
64513: LD_VAR 0 2
64517: PPUSH
64518: LD_VAR 0 3
64522: PPUSH
64523: LD_VAR 0 4
64527: PPUSH
64528: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64532: LD_VAR 0 1
64536: PPUSH
64537: LD_VAR 0 2
64541: PPUSH
64542: LD_VAR 0 3
64546: PPUSH
64547: CALL_OW 331
// end ;
64551: LD_VAR 0 5
64555: RET
// export function Video ( mode ) ; begin
64556: LD_INT 0
64558: PPUSH
// ingame_video = mode ;
64559: LD_ADDR_OWVAR 52
64563: PUSH
64564: LD_VAR 0 1
64568: ST_TO_ADDR
// interface_hidden = mode ;
64569: LD_ADDR_OWVAR 54
64573: PUSH
64574: LD_VAR 0 1
64578: ST_TO_ADDR
// end ;
64579: LD_VAR 0 2
64583: RET
// export function Join ( array , element ) ; begin
64584: LD_INT 0
64586: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64587: LD_ADDR_VAR 0 3
64591: PUSH
64592: LD_VAR 0 1
64596: PPUSH
64597: LD_VAR 0 1
64601: PUSH
64602: LD_INT 1
64604: PLUS
64605: PPUSH
64606: LD_VAR 0 2
64610: PPUSH
64611: CALL_OW 1
64615: ST_TO_ADDR
// end ;
64616: LD_VAR 0 3
64620: RET
// export function JoinUnion ( array , element ) ; begin
64621: LD_INT 0
64623: PPUSH
// result := array union element ;
64624: LD_ADDR_VAR 0 3
64628: PUSH
64629: LD_VAR 0 1
64633: PUSH
64634: LD_VAR 0 2
64638: UNION
64639: ST_TO_ADDR
// end ;
64640: LD_VAR 0 3
64644: RET
// export function GetBehemoths ( side ) ; begin
64645: LD_INT 0
64647: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64648: LD_ADDR_VAR 0 2
64652: PUSH
64653: LD_INT 22
64655: PUSH
64656: LD_VAR 0 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 31
64667: PUSH
64668: LD_INT 25
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PPUSH
64679: CALL_OW 69
64683: ST_TO_ADDR
// end ;
64684: LD_VAR 0 2
64688: RET
// export function Shuffle ( array ) ; var i , index ; begin
64689: LD_INT 0
64691: PPUSH
64692: PPUSH
64693: PPUSH
// result := [ ] ;
64694: LD_ADDR_VAR 0 2
64698: PUSH
64699: EMPTY
64700: ST_TO_ADDR
// if not array then
64701: LD_VAR 0 1
64705: NOT
64706: IFFALSE 64710
// exit ;
64708: GO 64809
// Randomize ;
64710: CALL_OW 10
// for i = array downto 1 do
64714: LD_ADDR_VAR 0 3
64718: PUSH
64719: DOUBLE
64720: LD_VAR 0 1
64724: INC
64725: ST_TO_ADDR
64726: LD_INT 1
64728: PUSH
64729: FOR_DOWNTO
64730: IFFALSE 64807
// begin index := rand ( 1 , array ) ;
64732: LD_ADDR_VAR 0 4
64736: PUSH
64737: LD_INT 1
64739: PPUSH
64740: LD_VAR 0 1
64744: PPUSH
64745: CALL_OW 12
64749: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64750: LD_ADDR_VAR 0 2
64754: PUSH
64755: LD_VAR 0 2
64759: PPUSH
64760: LD_VAR 0 2
64764: PUSH
64765: LD_INT 1
64767: PLUS
64768: PPUSH
64769: LD_VAR 0 1
64773: PUSH
64774: LD_VAR 0 4
64778: ARRAY
64779: PPUSH
64780: CALL_OW 2
64784: ST_TO_ADDR
// array := Delete ( array , index ) ;
64785: LD_ADDR_VAR 0 1
64789: PUSH
64790: LD_VAR 0 1
64794: PPUSH
64795: LD_VAR 0 4
64799: PPUSH
64800: CALL_OW 3
64804: ST_TO_ADDR
// end ;
64805: GO 64729
64807: POP
64808: POP
// end ;
64809: LD_VAR 0 2
64813: RET
// export function GetBaseMaterials ( base ) ; begin
64814: LD_INT 0
64816: PPUSH
// result := [ 0 , 0 , 0 ] ;
64817: LD_ADDR_VAR 0 2
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: LIST
64835: ST_TO_ADDR
// if not base then
64836: LD_VAR 0 1
64840: NOT
64841: IFFALSE 64845
// exit ;
64843: GO 64894
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64845: LD_ADDR_VAR 0 2
64849: PUSH
64850: LD_VAR 0 1
64854: PPUSH
64855: LD_INT 1
64857: PPUSH
64858: CALL_OW 275
64862: PUSH
64863: LD_VAR 0 1
64867: PPUSH
64868: LD_INT 2
64870: PPUSH
64871: CALL_OW 275
64875: PUSH
64876: LD_VAR 0 1
64880: PPUSH
64881: LD_INT 3
64883: PPUSH
64884: CALL_OW 275
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: LIST
64893: ST_TO_ADDR
// end ;
64894: LD_VAR 0 2
64898: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64899: LD_INT 0
64901: PPUSH
64902: PPUSH
// result := array ;
64903: LD_ADDR_VAR 0 3
64907: PUSH
64908: LD_VAR 0 1
64912: ST_TO_ADDR
// if size >= result then
64913: LD_VAR 0 2
64917: PUSH
64918: LD_VAR 0 3
64922: GREATEREQUAL
64923: IFFALSE 64927
// exit ;
64925: GO 64977
// if size then
64927: LD_VAR 0 2
64931: IFFALSE 64977
// for i := array downto size do
64933: LD_ADDR_VAR 0 4
64937: PUSH
64938: DOUBLE
64939: LD_VAR 0 1
64943: INC
64944: ST_TO_ADDR
64945: LD_VAR 0 2
64949: PUSH
64950: FOR_DOWNTO
64951: IFFALSE 64975
// result := Delete ( result , result ) ;
64953: LD_ADDR_VAR 0 3
64957: PUSH
64958: LD_VAR 0 3
64962: PPUSH
64963: LD_VAR 0 3
64967: PPUSH
64968: CALL_OW 3
64972: ST_TO_ADDR
64973: GO 64950
64975: POP
64976: POP
// end ;
64977: LD_VAR 0 3
64981: RET
// export function ComExit ( unit ) ; var tmp ; begin
64982: LD_INT 0
64984: PPUSH
64985: PPUSH
// if not IsInUnit ( unit ) then
64986: LD_VAR 0 1
64990: PPUSH
64991: CALL_OW 310
64995: NOT
64996: IFFALSE 65000
// exit ;
64998: GO 65060
// tmp := IsInUnit ( unit ) ;
65000: LD_ADDR_VAR 0 3
65004: PUSH
65005: LD_VAR 0 1
65009: PPUSH
65010: CALL_OW 310
65014: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65015: LD_VAR 0 3
65019: PPUSH
65020: CALL_OW 247
65024: PUSH
65025: LD_INT 2
65027: EQUAL
65028: IFFALSE 65041
// ComExitVehicle ( unit ) else
65030: LD_VAR 0 1
65034: PPUSH
65035: CALL_OW 121
65039: GO 65050
// ComExitBuilding ( unit ) ;
65041: LD_VAR 0 1
65045: PPUSH
65046: CALL_OW 122
// result := tmp ;
65050: LD_ADDR_VAR 0 2
65054: PUSH
65055: LD_VAR 0 3
65059: ST_TO_ADDR
// end ;
65060: LD_VAR 0 2
65064: RET
// export function ComExitAll ( units ) ; var i ; begin
65065: LD_INT 0
65067: PPUSH
65068: PPUSH
// if not units then
65069: LD_VAR 0 1
65073: NOT
65074: IFFALSE 65078
// exit ;
65076: GO 65104
// for i in units do
65078: LD_ADDR_VAR 0 3
65082: PUSH
65083: LD_VAR 0 1
65087: PUSH
65088: FOR_IN
65089: IFFALSE 65102
// ComExit ( i ) ;
65091: LD_VAR 0 3
65095: PPUSH
65096: CALL 64982 0 1
65100: GO 65088
65102: POP
65103: POP
// end ;
65104: LD_VAR 0 2
65108: RET
// export function ResetHc ; begin
65109: LD_INT 0
65111: PPUSH
// InitHc ;
65112: CALL_OW 19
// hc_importance := 0 ;
65116: LD_ADDR_OWVAR 32
65120: PUSH
65121: LD_INT 0
65123: ST_TO_ADDR
// end ;
65124: LD_VAR 0 1
65128: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65129: LD_INT 0
65131: PPUSH
65132: PPUSH
65133: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65134: LD_ADDR_VAR 0 6
65138: PUSH
65139: LD_VAR 0 1
65143: PUSH
65144: LD_VAR 0 3
65148: PLUS
65149: PUSH
65150: LD_INT 2
65152: DIV
65153: ST_TO_ADDR
// if _x < 0 then
65154: LD_VAR 0 6
65158: PUSH
65159: LD_INT 0
65161: LESS
65162: IFFALSE 65179
// _x := _x * - 1 ;
65164: LD_ADDR_VAR 0 6
65168: PUSH
65169: LD_VAR 0 6
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: MUL
65178: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65179: LD_ADDR_VAR 0 7
65183: PUSH
65184: LD_VAR 0 2
65188: PUSH
65189: LD_VAR 0 4
65193: PLUS
65194: PUSH
65195: LD_INT 2
65197: DIV
65198: ST_TO_ADDR
// if _y < 0 then
65199: LD_VAR 0 7
65203: PUSH
65204: LD_INT 0
65206: LESS
65207: IFFALSE 65224
// _y := _y * - 1 ;
65209: LD_ADDR_VAR 0 7
65213: PUSH
65214: LD_VAR 0 7
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: MUL
65223: ST_TO_ADDR
// result := [ _x , _y ] ;
65224: LD_ADDR_VAR 0 5
65228: PUSH
65229: LD_VAR 0 6
65233: PUSH
65234: LD_VAR 0 7
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: ST_TO_ADDR
// end ;
65243: LD_VAR 0 5
65247: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65248: LD_INT 0
65250: PPUSH
65251: PPUSH
65252: PPUSH
65253: PPUSH
// task := GetTaskList ( unit ) ;
65254: LD_ADDR_VAR 0 7
65258: PUSH
65259: LD_VAR 0 1
65263: PPUSH
65264: CALL_OW 437
65268: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65269: LD_VAR 0 7
65273: NOT
65274: PUSH
65275: LD_VAR 0 1
65279: PPUSH
65280: LD_VAR 0 2
65284: PPUSH
65285: CALL_OW 308
65289: NOT
65290: AND
65291: IFFALSE 65295
// exit ;
65293: GO 65413
// if IsInArea ( unit , area ) then
65295: LD_VAR 0 1
65299: PPUSH
65300: LD_VAR 0 2
65304: PPUSH
65305: CALL_OW 308
65309: IFFALSE 65327
// begin ComMoveToArea ( unit , goAway ) ;
65311: LD_VAR 0 1
65315: PPUSH
65316: LD_VAR 0 3
65320: PPUSH
65321: CALL_OW 113
// exit ;
65325: GO 65413
// end ; if task [ 1 ] [ 1 ] <> M then
65327: LD_VAR 0 7
65331: PUSH
65332: LD_INT 1
65334: ARRAY
65335: PUSH
65336: LD_INT 1
65338: ARRAY
65339: PUSH
65340: LD_STRING M
65342: NONEQUAL
65343: IFFALSE 65347
// exit ;
65345: GO 65413
// x := task [ 1 ] [ 2 ] ;
65347: LD_ADDR_VAR 0 5
65351: PUSH
65352: LD_VAR 0 7
65356: PUSH
65357: LD_INT 1
65359: ARRAY
65360: PUSH
65361: LD_INT 2
65363: ARRAY
65364: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65365: LD_ADDR_VAR 0 6
65369: PUSH
65370: LD_VAR 0 7
65374: PUSH
65375: LD_INT 1
65377: ARRAY
65378: PUSH
65379: LD_INT 3
65381: ARRAY
65382: ST_TO_ADDR
// if InArea ( x , y , area ) then
65383: LD_VAR 0 5
65387: PPUSH
65388: LD_VAR 0 6
65392: PPUSH
65393: LD_VAR 0 2
65397: PPUSH
65398: CALL_OW 309
65402: IFFALSE 65413
// ComStop ( unit ) ;
65404: LD_VAR 0 1
65408: PPUSH
65409: CALL_OW 141
// end ;
65413: LD_VAR 0 4
65417: RET
// export function Abs ( value ) ; begin
65418: LD_INT 0
65420: PPUSH
// result := value ;
65421: LD_ADDR_VAR 0 2
65425: PUSH
65426: LD_VAR 0 1
65430: ST_TO_ADDR
// if value < 0 then
65431: LD_VAR 0 1
65435: PUSH
65436: LD_INT 0
65438: LESS
65439: IFFALSE 65456
// result := value * - 1 ;
65441: LD_ADDR_VAR 0 2
65445: PUSH
65446: LD_VAR 0 1
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: MUL
65455: ST_TO_ADDR
// end ;
65456: LD_VAR 0 2
65460: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65461: LD_INT 0
65463: PPUSH
65464: PPUSH
65465: PPUSH
65466: PPUSH
65467: PPUSH
65468: PPUSH
65469: PPUSH
65470: PPUSH
// if not unit or not building then
65471: LD_VAR 0 1
65475: NOT
65476: PUSH
65477: LD_VAR 0 2
65481: NOT
65482: OR
65483: IFFALSE 65487
// exit ;
65485: GO 65713
// x := GetX ( building ) ;
65487: LD_ADDR_VAR 0 4
65491: PUSH
65492: LD_VAR 0 2
65496: PPUSH
65497: CALL_OW 250
65501: ST_TO_ADDR
// y := GetY ( building ) ;
65502: LD_ADDR_VAR 0 6
65506: PUSH
65507: LD_VAR 0 2
65511: PPUSH
65512: CALL_OW 251
65516: ST_TO_ADDR
// d := GetDir ( building ) ;
65517: LD_ADDR_VAR 0 8
65521: PUSH
65522: LD_VAR 0 2
65526: PPUSH
65527: CALL_OW 254
65531: ST_TO_ADDR
// r := 4 ;
65532: LD_ADDR_VAR 0 9
65536: PUSH
65537: LD_INT 4
65539: ST_TO_ADDR
// for i := 1 to 5 do
65540: LD_ADDR_VAR 0 10
65544: PUSH
65545: DOUBLE
65546: LD_INT 1
65548: DEC
65549: ST_TO_ADDR
65550: LD_INT 5
65552: PUSH
65553: FOR_TO
65554: IFFALSE 65711
// begin _x := ShiftX ( x , d , r + i ) ;
65556: LD_ADDR_VAR 0 5
65560: PUSH
65561: LD_VAR 0 4
65565: PPUSH
65566: LD_VAR 0 8
65570: PPUSH
65571: LD_VAR 0 9
65575: PUSH
65576: LD_VAR 0 10
65580: PLUS
65581: PPUSH
65582: CALL_OW 272
65586: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65587: LD_ADDR_VAR 0 7
65591: PUSH
65592: LD_VAR 0 6
65596: PPUSH
65597: LD_VAR 0 8
65601: PPUSH
65602: LD_VAR 0 9
65606: PUSH
65607: LD_VAR 0 10
65611: PLUS
65612: PPUSH
65613: CALL_OW 273
65617: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65618: LD_VAR 0 5
65622: PPUSH
65623: LD_VAR 0 7
65627: PPUSH
65628: CALL_OW 488
65632: PUSH
65633: LD_VAR 0 5
65637: PPUSH
65638: LD_VAR 0 7
65642: PPUSH
65643: CALL_OW 428
65647: PPUSH
65648: CALL_OW 247
65652: PUSH
65653: LD_INT 3
65655: PUSH
65656: LD_INT 2
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: IN
65663: NOT
65664: AND
65665: IFFALSE 65709
// begin ComMoveXY ( unit , _x , _y ) ;
65667: LD_VAR 0 1
65671: PPUSH
65672: LD_VAR 0 5
65676: PPUSH
65677: LD_VAR 0 7
65681: PPUSH
65682: CALL_OW 111
// result := [ _x , _y ] ;
65686: LD_ADDR_VAR 0 3
65690: PUSH
65691: LD_VAR 0 5
65695: PUSH
65696: LD_VAR 0 7
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: ST_TO_ADDR
// exit ;
65705: POP
65706: POP
65707: GO 65713
// end ; end ;
65709: GO 65553
65711: POP
65712: POP
// end ;
65713: LD_VAR 0 3
65717: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65718: LD_INT 0
65720: PPUSH
65721: PPUSH
65722: PPUSH
// result := 0 ;
65723: LD_ADDR_VAR 0 3
65727: PUSH
65728: LD_INT 0
65730: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65731: LD_VAR 0 1
65735: PUSH
65736: LD_INT 0
65738: LESS
65739: PUSH
65740: LD_VAR 0 1
65744: PUSH
65745: LD_INT 8
65747: GREATER
65748: OR
65749: PUSH
65750: LD_VAR 0 2
65754: PUSH
65755: LD_INT 0
65757: LESS
65758: OR
65759: PUSH
65760: LD_VAR 0 2
65764: PUSH
65765: LD_INT 8
65767: GREATER
65768: OR
65769: IFFALSE 65773
// exit ;
65771: GO 65848
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65773: LD_ADDR_VAR 0 4
65777: PUSH
65778: LD_INT 22
65780: PUSH
65781: LD_VAR 0 2
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PPUSH
65790: CALL_OW 69
65794: PUSH
65795: FOR_IN
65796: IFFALSE 65846
// begin un := UnitShoot ( i ) ;
65798: LD_ADDR_VAR 0 5
65802: PUSH
65803: LD_VAR 0 4
65807: PPUSH
65808: CALL_OW 504
65812: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65813: LD_VAR 0 5
65817: PPUSH
65818: CALL_OW 255
65822: PUSH
65823: LD_VAR 0 1
65827: EQUAL
65828: IFFALSE 65844
// begin result := un ;
65830: LD_ADDR_VAR 0 3
65834: PUSH
65835: LD_VAR 0 5
65839: ST_TO_ADDR
// exit ;
65840: POP
65841: POP
65842: GO 65848
// end ; end ;
65844: GO 65795
65846: POP
65847: POP
// end ;
65848: LD_VAR 0 3
65852: RET
// export function GetCargoBay ( units ) ; begin
65853: LD_INT 0
65855: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65856: LD_ADDR_VAR 0 2
65860: PUSH
65861: LD_VAR 0 1
65865: PPUSH
65866: LD_INT 2
65868: PUSH
65869: LD_INT 34
65871: PUSH
65872: LD_INT 12
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 34
65881: PUSH
65882: LD_INT 51
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 34
65891: PUSH
65892: LD_INT 32
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 34
65901: PUSH
65902: LD_EXP 19
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: PPUSH
65918: CALL_OW 72
65922: ST_TO_ADDR
// end ;
65923: LD_VAR 0 2
65927: RET
// export function Negate ( value ) ; begin
65928: LD_INT 0
65930: PPUSH
// result := not value ;
65931: LD_ADDR_VAR 0 2
65935: PUSH
65936: LD_VAR 0 1
65940: NOT
65941: ST_TO_ADDR
// end ;
65942: LD_VAR 0 2
65946: RET
// export function Inc ( value ) ; begin
65947: LD_INT 0
65949: PPUSH
// result := value + 1 ;
65950: LD_ADDR_VAR 0 2
65954: PUSH
65955: LD_VAR 0 1
65959: PUSH
65960: LD_INT 1
65962: PLUS
65963: ST_TO_ADDR
// end ;
65964: LD_VAR 0 2
65968: RET
// export function Dec ( value ) ; begin
65969: LD_INT 0
65971: PPUSH
// result := value - 1 ;
65972: LD_ADDR_VAR 0 2
65976: PUSH
65977: LD_VAR 0 1
65981: PUSH
65982: LD_INT 1
65984: MINUS
65985: ST_TO_ADDR
// end ;
65986: LD_VAR 0 2
65990: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65991: LD_INT 0
65993: PPUSH
65994: PPUSH
65995: PPUSH
65996: PPUSH
65997: PPUSH
65998: PPUSH
65999: PPUSH
66000: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66001: LD_VAR 0 1
66005: PPUSH
66006: LD_VAR 0 2
66010: PPUSH
66011: CALL_OW 488
66015: NOT
66016: PUSH
66017: LD_VAR 0 3
66021: PPUSH
66022: LD_VAR 0 4
66026: PPUSH
66027: CALL_OW 488
66031: NOT
66032: OR
66033: IFFALSE 66046
// begin result := - 1 ;
66035: LD_ADDR_VAR 0 5
66039: PUSH
66040: LD_INT 1
66042: NEG
66043: ST_TO_ADDR
// exit ;
66044: GO 66281
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66046: LD_ADDR_VAR 0 12
66050: PUSH
66051: LD_VAR 0 1
66055: PPUSH
66056: LD_VAR 0 2
66060: PPUSH
66061: LD_VAR 0 3
66065: PPUSH
66066: LD_VAR 0 4
66070: PPUSH
66071: CALL 65129 0 4
66075: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66076: LD_ADDR_VAR 0 11
66080: PUSH
66081: LD_VAR 0 1
66085: PPUSH
66086: LD_VAR 0 2
66090: PPUSH
66091: LD_VAR 0 12
66095: PUSH
66096: LD_INT 1
66098: ARRAY
66099: PPUSH
66100: LD_VAR 0 12
66104: PUSH
66105: LD_INT 2
66107: ARRAY
66108: PPUSH
66109: CALL_OW 298
66113: ST_TO_ADDR
// distance := 9999 ;
66114: LD_ADDR_VAR 0 10
66118: PUSH
66119: LD_INT 9999
66121: ST_TO_ADDR
// for i := 0 to 5 do
66122: LD_ADDR_VAR 0 6
66126: PUSH
66127: DOUBLE
66128: LD_INT 0
66130: DEC
66131: ST_TO_ADDR
66132: LD_INT 5
66134: PUSH
66135: FOR_TO
66136: IFFALSE 66279
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66138: LD_ADDR_VAR 0 7
66142: PUSH
66143: LD_VAR 0 1
66147: PPUSH
66148: LD_VAR 0 6
66152: PPUSH
66153: LD_VAR 0 11
66157: PPUSH
66158: CALL_OW 272
66162: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66163: LD_ADDR_VAR 0 8
66167: PUSH
66168: LD_VAR 0 2
66172: PPUSH
66173: LD_VAR 0 6
66177: PPUSH
66178: LD_VAR 0 11
66182: PPUSH
66183: CALL_OW 273
66187: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66188: LD_VAR 0 7
66192: PPUSH
66193: LD_VAR 0 8
66197: PPUSH
66198: CALL_OW 488
66202: NOT
66203: IFFALSE 66207
// continue ;
66205: GO 66135
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66207: LD_ADDR_VAR 0 9
66211: PUSH
66212: LD_VAR 0 12
66216: PUSH
66217: LD_INT 1
66219: ARRAY
66220: PPUSH
66221: LD_VAR 0 12
66225: PUSH
66226: LD_INT 2
66228: ARRAY
66229: PPUSH
66230: LD_VAR 0 7
66234: PPUSH
66235: LD_VAR 0 8
66239: PPUSH
66240: CALL_OW 298
66244: ST_TO_ADDR
// if tmp < distance then
66245: LD_VAR 0 9
66249: PUSH
66250: LD_VAR 0 10
66254: LESS
66255: IFFALSE 66277
// begin result := i ;
66257: LD_ADDR_VAR 0 5
66261: PUSH
66262: LD_VAR 0 6
66266: ST_TO_ADDR
// distance := tmp ;
66267: LD_ADDR_VAR 0 10
66271: PUSH
66272: LD_VAR 0 9
66276: ST_TO_ADDR
// end ; end ;
66277: GO 66135
66279: POP
66280: POP
// end ;
66281: LD_VAR 0 5
66285: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66286: LD_INT 0
66288: PPUSH
66289: PPUSH
// if not driver or not IsInUnit ( driver ) then
66290: LD_VAR 0 1
66294: NOT
66295: PUSH
66296: LD_VAR 0 1
66300: PPUSH
66301: CALL_OW 310
66305: NOT
66306: OR
66307: IFFALSE 66311
// exit ;
66309: GO 66401
// vehicle := IsInUnit ( driver ) ;
66311: LD_ADDR_VAR 0 3
66315: PUSH
66316: LD_VAR 0 1
66320: PPUSH
66321: CALL_OW 310
66325: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66326: LD_VAR 0 1
66330: PPUSH
66331: LD_STRING \
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: PUSH
66361: LD_STRING E
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: LD_VAR 0 3
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PPUSH
66397: CALL_OW 446
// end ;
66401: LD_VAR 0 2
66405: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66406: LD_INT 0
66408: PPUSH
66409: PPUSH
// if not driver or not IsInUnit ( driver ) then
66410: LD_VAR 0 1
66414: NOT
66415: PUSH
66416: LD_VAR 0 1
66420: PPUSH
66421: CALL_OW 310
66425: NOT
66426: OR
66427: IFFALSE 66431
// exit ;
66429: GO 66521
// vehicle := IsInUnit ( driver ) ;
66431: LD_ADDR_VAR 0 3
66435: PUSH
66436: LD_VAR 0 1
66440: PPUSH
66441: CALL_OW 310
66445: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66446: LD_VAR 0 1
66450: PPUSH
66451: LD_STRING \
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: PUSH
66481: LD_STRING E
66483: PUSH
66484: LD_INT 0
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: LD_VAR 0 3
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: LD_INT 0
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PPUSH
66517: CALL_OW 447
// end ;
66521: LD_VAR 0 2
66525: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66526: LD_INT 0
66528: PPUSH
66529: PPUSH
66530: PPUSH
// tmp := [ ] ;
66531: LD_ADDR_VAR 0 5
66535: PUSH
66536: EMPTY
66537: ST_TO_ADDR
// for i in units do
66538: LD_ADDR_VAR 0 4
66542: PUSH
66543: LD_VAR 0 1
66547: PUSH
66548: FOR_IN
66549: IFFALSE 66587
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66551: LD_ADDR_VAR 0 5
66555: PUSH
66556: LD_VAR 0 5
66560: PPUSH
66561: LD_VAR 0 5
66565: PUSH
66566: LD_INT 1
66568: PLUS
66569: PPUSH
66570: LD_VAR 0 4
66574: PPUSH
66575: CALL_OW 256
66579: PPUSH
66580: CALL_OW 2
66584: ST_TO_ADDR
66585: GO 66548
66587: POP
66588: POP
// if not tmp then
66589: LD_VAR 0 5
66593: NOT
66594: IFFALSE 66598
// exit ;
66596: GO 66646
// if asc then
66598: LD_VAR 0 2
66602: IFFALSE 66626
// result := SortListByListAsc ( units , tmp ) else
66604: LD_ADDR_VAR 0 3
66608: PUSH
66609: LD_VAR 0 1
66613: PPUSH
66614: LD_VAR 0 5
66618: PPUSH
66619: CALL_OW 76
66623: ST_TO_ADDR
66624: GO 66646
// result := SortListByListDesc ( units , tmp ) ;
66626: LD_ADDR_VAR 0 3
66630: PUSH
66631: LD_VAR 0 1
66635: PPUSH
66636: LD_VAR 0 5
66640: PPUSH
66641: CALL_OW 77
66645: ST_TO_ADDR
// end ;
66646: LD_VAR 0 3
66650: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66651: LD_INT 0
66653: PPUSH
66654: PPUSH
// task := GetTaskList ( mech ) ;
66655: LD_ADDR_VAR 0 4
66659: PUSH
66660: LD_VAR 0 1
66664: PPUSH
66665: CALL_OW 437
66669: ST_TO_ADDR
// if not task then
66670: LD_VAR 0 4
66674: NOT
66675: IFFALSE 66679
// exit ;
66677: GO 66721
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66679: LD_ADDR_VAR 0 3
66683: PUSH
66684: LD_VAR 0 4
66688: PUSH
66689: LD_INT 1
66691: ARRAY
66692: PUSH
66693: LD_INT 1
66695: ARRAY
66696: PUSH
66697: LD_STRING r
66699: EQUAL
66700: PUSH
66701: LD_VAR 0 4
66705: PUSH
66706: LD_INT 1
66708: ARRAY
66709: PUSH
66710: LD_INT 4
66712: ARRAY
66713: PUSH
66714: LD_VAR 0 2
66718: EQUAL
66719: AND
66720: ST_TO_ADDR
// end ;
66721: LD_VAR 0 3
66725: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66726: LD_INT 0
66728: PPUSH
// SetDir ( unit , d ) ;
66729: LD_VAR 0 1
66733: PPUSH
66734: LD_VAR 0 4
66738: PPUSH
66739: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66743: LD_VAR 0 1
66747: PPUSH
66748: LD_VAR 0 2
66752: PPUSH
66753: LD_VAR 0 3
66757: PPUSH
66758: LD_VAR 0 5
66762: PPUSH
66763: CALL_OW 48
// end ;
66767: LD_VAR 0 6
66771: RET
// export function ToNaturalNumber ( number ) ; begin
66772: LD_INT 0
66774: PPUSH
// result := number div 1 ;
66775: LD_ADDR_VAR 0 2
66779: PUSH
66780: LD_VAR 0 1
66784: PUSH
66785: LD_INT 1
66787: DIV
66788: ST_TO_ADDR
// if number < 0 then
66789: LD_VAR 0 1
66793: PUSH
66794: LD_INT 0
66796: LESS
66797: IFFALSE 66807
// result := 0 ;
66799: LD_ADDR_VAR 0 2
66803: PUSH
66804: LD_INT 0
66806: ST_TO_ADDR
// end ;
66807: LD_VAR 0 2
66811: RET
// export function SortByClass ( units , class ) ; var un ; begin
66812: LD_INT 0
66814: PPUSH
66815: PPUSH
// if not units or not class then
66816: LD_VAR 0 1
66820: NOT
66821: PUSH
66822: LD_VAR 0 2
66826: NOT
66827: OR
66828: IFFALSE 66832
// exit ;
66830: GO 66927
// result := [ ] ;
66832: LD_ADDR_VAR 0 3
66836: PUSH
66837: EMPTY
66838: ST_TO_ADDR
// for un in units do
66839: LD_ADDR_VAR 0 4
66843: PUSH
66844: LD_VAR 0 1
66848: PUSH
66849: FOR_IN
66850: IFFALSE 66925
// if GetClass ( un ) = class then
66852: LD_VAR 0 4
66856: PPUSH
66857: CALL_OW 257
66861: PUSH
66862: LD_VAR 0 2
66866: EQUAL
66867: IFFALSE 66894
// result := Insert ( result , 1 , un ) else
66869: LD_ADDR_VAR 0 3
66873: PUSH
66874: LD_VAR 0 3
66878: PPUSH
66879: LD_INT 1
66881: PPUSH
66882: LD_VAR 0 4
66886: PPUSH
66887: CALL_OW 2
66891: ST_TO_ADDR
66892: GO 66923
// result := Replace ( result , result + 1 , un ) ;
66894: LD_ADDR_VAR 0 3
66898: PUSH
66899: LD_VAR 0 3
66903: PPUSH
66904: LD_VAR 0 3
66908: PUSH
66909: LD_INT 1
66911: PLUS
66912: PPUSH
66913: LD_VAR 0 4
66917: PPUSH
66918: CALL_OW 1
66922: ST_TO_ADDR
66923: GO 66849
66925: POP
66926: POP
// end ;
66927: LD_VAR 0 3
66931: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66932: LD_INT 0
66934: PPUSH
66935: PPUSH
66936: PPUSH
66937: PPUSH
66938: PPUSH
66939: PPUSH
66940: PPUSH
// result := [ ] ;
66941: LD_ADDR_VAR 0 4
66945: PUSH
66946: EMPTY
66947: ST_TO_ADDR
// if x - r < 0 then
66948: LD_VAR 0 1
66952: PUSH
66953: LD_VAR 0 3
66957: MINUS
66958: PUSH
66959: LD_INT 0
66961: LESS
66962: IFFALSE 66974
// min_x := 0 else
66964: LD_ADDR_VAR 0 8
66968: PUSH
66969: LD_INT 0
66971: ST_TO_ADDR
66972: GO 66990
// min_x := x - r ;
66974: LD_ADDR_VAR 0 8
66978: PUSH
66979: LD_VAR 0 1
66983: PUSH
66984: LD_VAR 0 3
66988: MINUS
66989: ST_TO_ADDR
// if y - r < 0 then
66990: LD_VAR 0 2
66994: PUSH
66995: LD_VAR 0 3
66999: MINUS
67000: PUSH
67001: LD_INT 0
67003: LESS
67004: IFFALSE 67016
// min_y := 0 else
67006: LD_ADDR_VAR 0 7
67010: PUSH
67011: LD_INT 0
67013: ST_TO_ADDR
67014: GO 67032
// min_y := y - r ;
67016: LD_ADDR_VAR 0 7
67020: PUSH
67021: LD_VAR 0 2
67025: PUSH
67026: LD_VAR 0 3
67030: MINUS
67031: ST_TO_ADDR
// max_x := x + r ;
67032: LD_ADDR_VAR 0 9
67036: PUSH
67037: LD_VAR 0 1
67041: PUSH
67042: LD_VAR 0 3
67046: PLUS
67047: ST_TO_ADDR
// max_y := y + r ;
67048: LD_ADDR_VAR 0 10
67052: PUSH
67053: LD_VAR 0 2
67057: PUSH
67058: LD_VAR 0 3
67062: PLUS
67063: ST_TO_ADDR
// for _x = min_x to max_x do
67064: LD_ADDR_VAR 0 5
67068: PUSH
67069: DOUBLE
67070: LD_VAR 0 8
67074: DEC
67075: ST_TO_ADDR
67076: LD_VAR 0 9
67080: PUSH
67081: FOR_TO
67082: IFFALSE 67183
// for _y = min_y to max_y do
67084: LD_ADDR_VAR 0 6
67088: PUSH
67089: DOUBLE
67090: LD_VAR 0 7
67094: DEC
67095: ST_TO_ADDR
67096: LD_VAR 0 10
67100: PUSH
67101: FOR_TO
67102: IFFALSE 67179
// begin if not ValidHex ( _x , _y ) then
67104: LD_VAR 0 5
67108: PPUSH
67109: LD_VAR 0 6
67113: PPUSH
67114: CALL_OW 488
67118: NOT
67119: IFFALSE 67123
// continue ;
67121: GO 67101
// if GetResourceTypeXY ( _x , _y ) then
67123: LD_VAR 0 5
67127: PPUSH
67128: LD_VAR 0 6
67132: PPUSH
67133: CALL_OW 283
67137: IFFALSE 67177
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67139: LD_ADDR_VAR 0 4
67143: PUSH
67144: LD_VAR 0 4
67148: PPUSH
67149: LD_VAR 0 4
67153: PUSH
67154: LD_INT 1
67156: PLUS
67157: PPUSH
67158: LD_VAR 0 5
67162: PUSH
67163: LD_VAR 0 6
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PPUSH
67172: CALL_OW 1
67176: ST_TO_ADDR
// end ;
67177: GO 67101
67179: POP
67180: POP
67181: GO 67081
67183: POP
67184: POP
// end ;
67185: LD_VAR 0 4
67189: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67190: LD_INT 0
67192: PPUSH
67193: PPUSH
67194: PPUSH
67195: PPUSH
67196: PPUSH
67197: PPUSH
67198: PPUSH
67199: PPUSH
// if not units then
67200: LD_VAR 0 1
67204: NOT
67205: IFFALSE 67209
// exit ;
67207: GO 67735
// result := UnitFilter ( units , [ f_ok ] ) ;
67209: LD_ADDR_VAR 0 3
67213: PUSH
67214: LD_VAR 0 1
67218: PPUSH
67219: LD_INT 50
67221: PUSH
67222: EMPTY
67223: LIST
67224: PPUSH
67225: CALL_OW 72
67229: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67230: LD_ADDR_VAR 0 8
67234: PUSH
67235: LD_VAR 0 1
67239: PUSH
67240: LD_INT 1
67242: ARRAY
67243: PPUSH
67244: CALL_OW 255
67248: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67249: LD_ADDR_VAR 0 10
67253: PUSH
67254: LD_INT 29
67256: PUSH
67257: LD_EXP 22
67261: PUSH
67262: LD_INT 49
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: LIST
67269: ST_TO_ADDR
// if not result then
67270: LD_VAR 0 3
67274: NOT
67275: IFFALSE 67279
// exit ;
67277: GO 67735
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67279: LD_ADDR_VAR 0 5
67283: PUSH
67284: LD_INT 81
67286: PUSH
67287: LD_VAR 0 8
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PPUSH
67296: CALL_OW 69
67300: ST_TO_ADDR
// for i in result do
67301: LD_ADDR_VAR 0 4
67305: PUSH
67306: LD_VAR 0 3
67310: PUSH
67311: FOR_IN
67312: IFFALSE 67733
// begin tag := GetTag ( i ) + 1 ;
67314: LD_ADDR_VAR 0 9
67318: PUSH
67319: LD_VAR 0 4
67323: PPUSH
67324: CALL_OW 110
67328: PUSH
67329: LD_INT 1
67331: PLUS
67332: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67333: LD_ADDR_VAR 0 7
67337: PUSH
67338: LD_VAR 0 4
67342: PPUSH
67343: CALL_OW 250
67347: PPUSH
67348: LD_VAR 0 4
67352: PPUSH
67353: CALL_OW 251
67357: PPUSH
67358: LD_INT 6
67360: PPUSH
67361: CALL 66932 0 3
67365: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67366: LD_VAR 0 4
67370: PPUSH
67371: CALL_OW 247
67375: PUSH
67376: LD_INT 2
67378: EQUAL
67379: PUSH
67380: LD_VAR 0 7
67384: AND
67385: PUSH
67386: LD_VAR 0 4
67390: PPUSH
67391: CALL_OW 264
67395: PUSH
67396: LD_VAR 0 10
67400: IN
67401: NOT
67402: AND
67403: IFFALSE 67442
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67405: LD_VAR 0 4
67409: PPUSH
67410: LD_VAR 0 7
67414: PUSH
67415: LD_INT 1
67417: ARRAY
67418: PUSH
67419: LD_INT 1
67421: ARRAY
67422: PPUSH
67423: LD_VAR 0 7
67427: PUSH
67428: LD_INT 1
67430: ARRAY
67431: PUSH
67432: LD_INT 2
67434: ARRAY
67435: PPUSH
67436: CALL_OW 116
67440: GO 67731
// if path > tag then
67442: LD_VAR 0 2
67446: PUSH
67447: LD_VAR 0 9
67451: GREATER
67452: IFFALSE 67660
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67454: LD_ADDR_VAR 0 6
67458: PUSH
67459: LD_VAR 0 5
67463: PPUSH
67464: LD_INT 91
67466: PUSH
67467: LD_VAR 0 4
67471: PUSH
67472: LD_INT 8
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: PPUSH
67480: CALL_OW 72
67484: ST_TO_ADDR
// if nearEnemy then
67485: LD_VAR 0 6
67489: IFFALSE 67558
// begin if GetWeapon ( i ) = ru_time_lapser then
67491: LD_VAR 0 4
67495: PPUSH
67496: CALL_OW 264
67500: PUSH
67501: LD_INT 49
67503: EQUAL
67504: IFFALSE 67532
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67506: LD_VAR 0 4
67510: PPUSH
67511: LD_VAR 0 6
67515: PPUSH
67516: LD_VAR 0 4
67520: PPUSH
67521: CALL_OW 74
67525: PPUSH
67526: CALL_OW 112
67530: GO 67556
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67532: LD_VAR 0 4
67536: PPUSH
67537: LD_VAR 0 6
67541: PPUSH
67542: LD_VAR 0 4
67546: PPUSH
67547: CALL_OW 74
67551: PPUSH
67552: CALL_OW 115
// end else
67556: GO 67658
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67558: LD_VAR 0 4
67562: PPUSH
67563: LD_VAR 0 2
67567: PUSH
67568: LD_VAR 0 9
67572: ARRAY
67573: PUSH
67574: LD_INT 1
67576: ARRAY
67577: PPUSH
67578: LD_VAR 0 2
67582: PUSH
67583: LD_VAR 0 9
67587: ARRAY
67588: PUSH
67589: LD_INT 2
67591: ARRAY
67592: PPUSH
67593: CALL_OW 297
67597: PUSH
67598: LD_INT 6
67600: GREATER
67601: IFFALSE 67644
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67603: LD_VAR 0 4
67607: PPUSH
67608: LD_VAR 0 2
67612: PUSH
67613: LD_VAR 0 9
67617: ARRAY
67618: PUSH
67619: LD_INT 1
67621: ARRAY
67622: PPUSH
67623: LD_VAR 0 2
67627: PUSH
67628: LD_VAR 0 9
67632: ARRAY
67633: PUSH
67634: LD_INT 2
67636: ARRAY
67637: PPUSH
67638: CALL_OW 114
67642: GO 67658
// SetTag ( i , tag ) ;
67644: LD_VAR 0 4
67648: PPUSH
67649: LD_VAR 0 9
67653: PPUSH
67654: CALL_OW 109
// end else
67658: GO 67731
// if enemy then
67660: LD_VAR 0 5
67664: IFFALSE 67731
// begin if GetWeapon ( i ) = ru_time_lapser then
67666: LD_VAR 0 4
67670: PPUSH
67671: CALL_OW 264
67675: PUSH
67676: LD_INT 49
67678: EQUAL
67679: IFFALSE 67707
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67681: LD_VAR 0 4
67685: PPUSH
67686: LD_VAR 0 5
67690: PPUSH
67691: LD_VAR 0 4
67695: PPUSH
67696: CALL_OW 74
67700: PPUSH
67701: CALL_OW 112
67705: GO 67731
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67707: LD_VAR 0 4
67711: PPUSH
67712: LD_VAR 0 5
67716: PPUSH
67717: LD_VAR 0 4
67721: PPUSH
67722: CALL_OW 74
67726: PPUSH
67727: CALL_OW 115
// end ; end ;
67731: GO 67311
67733: POP
67734: POP
// end ;
67735: LD_VAR 0 3
67739: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67740: LD_INT 0
67742: PPUSH
67743: PPUSH
67744: PPUSH
// if not unit or IsInUnit ( unit ) then
67745: LD_VAR 0 1
67749: NOT
67750: PUSH
67751: LD_VAR 0 1
67755: PPUSH
67756: CALL_OW 310
67760: OR
67761: IFFALSE 67765
// exit ;
67763: GO 67856
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67765: LD_ADDR_VAR 0 4
67769: PUSH
67770: LD_VAR 0 1
67774: PPUSH
67775: CALL_OW 250
67779: PPUSH
67780: LD_VAR 0 2
67784: PPUSH
67785: LD_INT 1
67787: PPUSH
67788: CALL_OW 272
67792: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67793: LD_ADDR_VAR 0 5
67797: PUSH
67798: LD_VAR 0 1
67802: PPUSH
67803: CALL_OW 251
67807: PPUSH
67808: LD_VAR 0 2
67812: PPUSH
67813: LD_INT 1
67815: PPUSH
67816: CALL_OW 273
67820: ST_TO_ADDR
// if ValidHex ( x , y ) then
67821: LD_VAR 0 4
67825: PPUSH
67826: LD_VAR 0 5
67830: PPUSH
67831: CALL_OW 488
67835: IFFALSE 67856
// ComTurnXY ( unit , x , y ) ;
67837: LD_VAR 0 1
67841: PPUSH
67842: LD_VAR 0 4
67846: PPUSH
67847: LD_VAR 0 5
67851: PPUSH
67852: CALL_OW 118
// end ;
67856: LD_VAR 0 3
67860: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67861: LD_INT 0
67863: PPUSH
67864: PPUSH
// result := false ;
67865: LD_ADDR_VAR 0 3
67869: PUSH
67870: LD_INT 0
67872: ST_TO_ADDR
// if not units then
67873: LD_VAR 0 2
67877: NOT
67878: IFFALSE 67882
// exit ;
67880: GO 67927
// for i in units do
67882: LD_ADDR_VAR 0 4
67886: PUSH
67887: LD_VAR 0 2
67891: PUSH
67892: FOR_IN
67893: IFFALSE 67925
// if See ( side , i ) then
67895: LD_VAR 0 1
67899: PPUSH
67900: LD_VAR 0 4
67904: PPUSH
67905: CALL_OW 292
67909: IFFALSE 67923
// begin result := true ;
67911: LD_ADDR_VAR 0 3
67915: PUSH
67916: LD_INT 1
67918: ST_TO_ADDR
// exit ;
67919: POP
67920: POP
67921: GO 67927
// end ;
67923: GO 67892
67925: POP
67926: POP
// end ;
67927: LD_VAR 0 3
67931: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67932: LD_INT 0
67934: PPUSH
67935: PPUSH
67936: PPUSH
67937: PPUSH
// if not unit or not points then
67938: LD_VAR 0 1
67942: NOT
67943: PUSH
67944: LD_VAR 0 2
67948: NOT
67949: OR
67950: IFFALSE 67954
// exit ;
67952: GO 68044
// dist := 99999 ;
67954: LD_ADDR_VAR 0 5
67958: PUSH
67959: LD_INT 99999
67961: ST_TO_ADDR
// for i in points do
67962: LD_ADDR_VAR 0 4
67966: PUSH
67967: LD_VAR 0 2
67971: PUSH
67972: FOR_IN
67973: IFFALSE 68042
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67975: LD_ADDR_VAR 0 6
67979: PUSH
67980: LD_VAR 0 1
67984: PPUSH
67985: LD_VAR 0 4
67989: PUSH
67990: LD_INT 1
67992: ARRAY
67993: PPUSH
67994: LD_VAR 0 4
67998: PUSH
67999: LD_INT 2
68001: ARRAY
68002: PPUSH
68003: CALL_OW 297
68007: ST_TO_ADDR
// if tmpDist < dist then
68008: LD_VAR 0 6
68012: PUSH
68013: LD_VAR 0 5
68017: LESS
68018: IFFALSE 68040
// begin result := i ;
68020: LD_ADDR_VAR 0 3
68024: PUSH
68025: LD_VAR 0 4
68029: ST_TO_ADDR
// dist := tmpDist ;
68030: LD_ADDR_VAR 0 5
68034: PUSH
68035: LD_VAR 0 6
68039: ST_TO_ADDR
// end ; end ;
68040: GO 67972
68042: POP
68043: POP
// end ;
68044: LD_VAR 0 3
68048: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68049: LD_INT 0
68051: PPUSH
// uc_side := side ;
68052: LD_ADDR_OWVAR 20
68056: PUSH
68057: LD_VAR 0 1
68061: ST_TO_ADDR
// uc_nation := 3 ;
68062: LD_ADDR_OWVAR 21
68066: PUSH
68067: LD_INT 3
68069: ST_TO_ADDR
// vc_chassis := 25 ;
68070: LD_ADDR_OWVAR 37
68074: PUSH
68075: LD_INT 25
68077: ST_TO_ADDR
// vc_engine := engine_siberite ;
68078: LD_ADDR_OWVAR 39
68082: PUSH
68083: LD_INT 3
68085: ST_TO_ADDR
// vc_control := control_computer ;
68086: LD_ADDR_OWVAR 38
68090: PUSH
68091: LD_INT 3
68093: ST_TO_ADDR
// vc_weapon := 59 ;
68094: LD_ADDR_OWVAR 40
68098: PUSH
68099: LD_INT 59
68101: ST_TO_ADDR
// result := CreateVehicle ;
68102: LD_ADDR_VAR 0 5
68106: PUSH
68107: CALL_OW 45
68111: ST_TO_ADDR
// SetDir ( result , d ) ;
68112: LD_VAR 0 5
68116: PPUSH
68117: LD_VAR 0 4
68121: PPUSH
68122: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68126: LD_VAR 0 5
68130: PPUSH
68131: LD_VAR 0 2
68135: PPUSH
68136: LD_VAR 0 3
68140: PPUSH
68141: LD_INT 0
68143: PPUSH
68144: CALL_OW 48
// end ;
68148: LD_VAR 0 5
68152: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68153: LD_INT 0
68155: PPUSH
68156: PPUSH
68157: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68158: LD_ADDR_VAR 0 2
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_INT 0
68171: PUSH
68172: LD_INT 0
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68181: LD_VAR 0 1
68185: NOT
68186: PUSH
68187: LD_VAR 0 1
68191: PPUSH
68192: CALL_OW 264
68196: PUSH
68197: LD_INT 12
68199: PUSH
68200: LD_INT 51
68202: PUSH
68203: LD_INT 32
68205: PUSH
68206: LD_EXP 19
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: IN
68217: NOT
68218: OR
68219: IFFALSE 68223
// exit ;
68221: GO 68321
// for i := 1 to 3 do
68223: LD_ADDR_VAR 0 3
68227: PUSH
68228: DOUBLE
68229: LD_INT 1
68231: DEC
68232: ST_TO_ADDR
68233: LD_INT 3
68235: PUSH
68236: FOR_TO
68237: IFFALSE 68319
// begin tmp := GetCargo ( cargo , i ) ;
68239: LD_ADDR_VAR 0 4
68243: PUSH
68244: LD_VAR 0 1
68248: PPUSH
68249: LD_VAR 0 3
68253: PPUSH
68254: CALL_OW 289
68258: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68259: LD_ADDR_VAR 0 2
68263: PUSH
68264: LD_VAR 0 2
68268: PPUSH
68269: LD_VAR 0 3
68273: PPUSH
68274: LD_VAR 0 4
68278: PPUSH
68279: CALL_OW 1
68283: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68284: LD_ADDR_VAR 0 2
68288: PUSH
68289: LD_VAR 0 2
68293: PPUSH
68294: LD_INT 4
68296: PPUSH
68297: LD_VAR 0 2
68301: PUSH
68302: LD_INT 4
68304: ARRAY
68305: PUSH
68306: LD_VAR 0 4
68310: PLUS
68311: PPUSH
68312: CALL_OW 1
68316: ST_TO_ADDR
// end ;
68317: GO 68236
68319: POP
68320: POP
// end ;
68321: LD_VAR 0 2
68325: RET
// export function Length ( array ) ; begin
68326: LD_INT 0
68328: PPUSH
// result := array + 0 ;
68329: LD_ADDR_VAR 0 2
68333: PUSH
68334: LD_VAR 0 1
68338: PUSH
68339: LD_INT 0
68341: PLUS
68342: ST_TO_ADDR
// end ;
68343: LD_VAR 0 2
68347: RET
// export function PrepareArray ( array ) ; begin
68348: LD_INT 0
68350: PPUSH
// result := array diff 0 ;
68351: LD_ADDR_VAR 0 2
68355: PUSH
68356: LD_VAR 0 1
68360: PUSH
68361: LD_INT 0
68363: DIFF
68364: ST_TO_ADDR
// if not result [ 1 ] then
68365: LD_VAR 0 2
68369: PUSH
68370: LD_INT 1
68372: ARRAY
68373: NOT
68374: IFFALSE 68394
// result := Delete ( result , 1 ) ;
68376: LD_ADDR_VAR 0 2
68380: PUSH
68381: LD_VAR 0 2
68385: PPUSH
68386: LD_INT 1
68388: PPUSH
68389: CALL_OW 3
68393: ST_TO_ADDR
// end ; end_of_file
68394: LD_VAR 0 2
68398: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68399: LD_VAR 0 1
68403: PUSH
68404: LD_INT 200
68406: DOUBLE
68407: GREATEREQUAL
68408: IFFALSE 68416
68410: LD_INT 299
68412: DOUBLE
68413: LESSEQUAL
68414: IFTRUE 68418
68416: GO 68450
68418: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68419: LD_VAR 0 1
68423: PPUSH
68424: LD_VAR 0 2
68428: PPUSH
68429: LD_VAR 0 3
68433: PPUSH
68434: LD_VAR 0 4
68438: PPUSH
68439: LD_VAR 0 5
68443: PPUSH
68444: CALL 23250 0 5
68448: GO 68527
68450: LD_INT 300
68452: DOUBLE
68453: GREATEREQUAL
68454: IFFALSE 68462
68456: LD_INT 399
68458: DOUBLE
68459: LESSEQUAL
68460: IFTRUE 68464
68462: GO 68526
68464: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68465: LD_VAR 0 1
68469: PPUSH
68470: LD_VAR 0 2
68474: PPUSH
68475: LD_VAR 0 3
68479: PPUSH
68480: LD_VAR 0 4
68484: PPUSH
68485: LD_VAR 0 5
68489: PPUSH
68490: LD_VAR 0 6
68494: PPUSH
68495: LD_VAR 0 7
68499: PPUSH
68500: LD_VAR 0 8
68504: PPUSH
68505: LD_VAR 0 9
68509: PPUSH
68510: LD_VAR 0 10
68514: PPUSH
68515: LD_VAR 0 11
68519: PPUSH
68520: CALL 19579 0 11
68524: GO 68527
68526: POP
// end ;
68527: PPOPN 11
68529: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68530: LD_VAR 0 1
68534: PPUSH
68535: LD_VAR 0 2
68539: PPUSH
68540: LD_VAR 0 3
68544: PPUSH
68545: LD_VAR 0 4
68549: PPUSH
68550: LD_VAR 0 5
68554: PPUSH
68555: CALL 22986 0 5
// end ; end_of_file
68559: PPOPN 5
68561: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68562: LD_VAR 0 1
68566: PPUSH
68567: LD_VAR 0 2
68571: PPUSH
68572: LD_VAR 0 3
68576: PPUSH
68577: LD_VAR 0 4
68581: PPUSH
68582: LD_VAR 0 5
68586: PPUSH
68587: LD_VAR 0 6
68591: PPUSH
68592: CALL 7272 0 6
// end ;
68596: PPOPN 6
68598: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68599: LD_INT 0
68601: PPUSH
// begin if not units then
68602: LD_VAR 0 1
68606: NOT
68607: IFFALSE 68611
// exit ;
68609: GO 68611
// end ;
68611: PPOPN 7
68613: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68614: CALL 7243 0 0
// end ;
68618: PPOPN 1
68620: END
