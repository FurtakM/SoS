// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 230 0 0
// PrepareAllies ;
  12: CALL 2221 0 0
// Action ;
  16: CALL 4045 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 182 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 10
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 11
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 13
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 15
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_res_art := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// player_artifact_ready := false ;
 128: LD_ADDR_EXP 16
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 9
 140: PUSH
 141: LD_INT 52500
 143: PUSH
 144: LD_INT 67200
 146: PUSH
 147: LD_INT 84000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// bonus_num := 0 ;
 161: LD_ADDR_EXP 14
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// artifact_progress := 0 ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// end ;
 177: LD_VAR 0 1
 181: RET
// export function SetDiplomacy ; begin
 182: LD_INT 0
 184: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 185: LD_INT 92
 187: PPUSH
 188: LD_INT 48
 190: PPUSH
 191: LD_INT 8
 193: PPUSH
 194: LD_INT 32796
 196: NEG
 197: PPUSH
 198: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 202: LD_INT 92
 204: PPUSH
 205: LD_INT 48
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 215: LD_INT 5
 217: PPUSH
 218: LD_INT 8
 220: PPUSH
 221: CALL_OW 343
// end ; end_of_file
 225: LD_VAR 0 1
 229: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
// uc_side := 2 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 2
 257: ST_TO_ADDR
// uc_nation := nation_arabian ;
 258: LD_ADDR_OWVAR 21
 262: PUSH
 263: LD_INT 2
 265: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 6
 274: PPUSH
 275: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 279: LD_ADDR_OWVAR 26
 283: PUSH
 284: LD_STRING Nicolas Vervecken
 286: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING SecondCharsGal
 294: ST_TO_ADDR
// hc_face_number := 3 ;
 295: LD_ADDR_OWVAR 34
 299: PUSH
 300: LD_INT 3
 302: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 303: LD_ADDR_OWVAR 29
 307: PUSH
 308: LD_INT 11
 310: PUSH
 311: LD_INT 10
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// Vervecken := CreateHuman ;
 318: LD_ADDR_EXP 12
 322: PUSH
 323: CALL_OW 44
 327: ST_TO_ADDR
// InitHc ;
 328: CALL_OW 19
// uc_side := 8 ;
 332: LD_ADDR_OWVAR 20
 336: PUSH
 337: LD_INT 8
 339: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 340: LD_INT 23
 342: PPUSH
 343: CALL_OW 274
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 4000
 353: PUSH
 354: LD_INT 2500
 356: PUSH
 357: LD_INT 1250
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_OWVAR 67
 369: ARRAY
 370: PPUSH
 371: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 375: LD_INT 23
 377: PPUSH
 378: CALL_OW 274
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: LD_INT 300
 388: PPUSH
 389: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 393: LD_INT 23
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 3
 403: PPUSH
 404: LD_INT 100
 406: PUSH
 407: LD_INT 50
 409: PUSH
 410: LD_INT 30
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: PPUSH
 424: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 428: LD_ADDR_VAR 0 14
 432: PUSH
 433: LD_INT 23
 435: PPUSH
 436: CALL_OW 250
 440: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 441: LD_ADDR_VAR 0 15
 445: PUSH
 446: LD_INT 23
 448: PPUSH
 449: CALL_OW 251
 453: ST_TO_ADDR
// team := [ ] ;
 454: LD_ADDR_VAR 0 7
 458: PUSH
 459: EMPTY
 460: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 461: LD_ADDR_VAR 0 8
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: PUSH
 480: LD_OWVAR 67
 484: ARRAY
 485: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 486: LD_ADDR_VAR 0 9
 490: PUSH
 491: LD_INT 11
 493: PUSH
 494: LD_INT 9
 496: PUSH
 497: LD_INT 8
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 511: LD_ADDR_VAR 0 10
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_OWVAR 67
 534: ARRAY
 535: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 536: LD_ADDR_VAR 0 11
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 561: LD_ADDR_VAR 0 12
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 13
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 4
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 611: LD_ADDR_VAR 0 18
 615: PUSH
 616: LD_INT 13
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: LD_INT 26
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 14
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 25
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 14
 654: PUSH
 655: LD_INT 3
 657: PUSH
 658: LD_INT 5
 660: PUSH
 661: LD_INT 32
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 14
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: LD_INT 31
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_INT 14
 690: PUSH
 691: LD_INT 3
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 24
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 14
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: LD_INT 25
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: PUSH
 724: LD_INT 13
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 24
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_VAR 0 18
 765: PUSH
 766: LD_OWVAR 67
 770: MINUS
 771: PUSH
 772: LD_INT 1
 774: PLUS
 775: PUSH
 776: FOR_TO
 777: IFFALSE 906
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 779: LD_ADDR_OWVAR 37
 783: PUSH
 784: LD_VAR 0 18
 788: PUSH
 789: LD_VAR 0 2
 793: ARRAY
 794: PUSH
 795: LD_INT 1
 797: ARRAY
 798: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 799: LD_ADDR_OWVAR 39
 803: PUSH
 804: LD_VAR 0 18
 808: PUSH
 809: LD_VAR 0 2
 813: ARRAY
 814: PUSH
 815: LD_INT 2
 817: ARRAY
 818: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 819: LD_ADDR_OWVAR 38
 823: PUSH
 824: LD_VAR 0 18
 828: PUSH
 829: LD_VAR 0 2
 833: ARRAY
 834: PUSH
 835: LD_INT 3
 837: ARRAY
 838: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 839: LD_ADDR_OWVAR 40
 843: PUSH
 844: LD_VAR 0 18
 848: PUSH
 849: LD_VAR 0 2
 853: ARRAY
 854: PUSH
 855: LD_INT 4
 857: ARRAY
 858: ST_TO_ADDR
// un := CreateVehicle ;
 859: LD_ADDR_VAR 0 6
 863: PUSH
 864: CALL_OW 45
 868: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 869: LD_VAR 0 6
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: LD_INT 5
 879: PPUSH
 880: CALL_OW 12
 884: PPUSH
 885: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 889: LD_VAR 0 6
 893: PPUSH
 894: LD_INT 7
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 49
// end ;
 904: GO 776
 906: POP
 907: POP
// for i = 1 to ape_num do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_VAR 0 13
 922: PUSH
 923: FOR_TO
 924: IFFALSE 991
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 926: LD_INT 0
 928: PPUSH
 929: LD_INT 16
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: CALL_OW 12
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 960: LD_ADDR_VAR 0 7
 964: PUSH
 965: LD_VAR 0 7
 969: PPUSH
 970: LD_VAR 0 7
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: CALL_OW 44
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: GO 923
 991: POP
 992: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 993: LD_INT 1
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: LD_VAR 0 8
1003: PPUSH
1004: CALL_OW 380
// l1 := CreateHuman ;
1008: LD_ADDR_EXP 2
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_INT 23
1025: PPUSH
1026: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1030: LD_INT 1
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_VAR 0 8
1040: PPUSH
1041: CALL_OW 380
// l2 := CreateHuman ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: CALL_OW 44
1054: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 23
1062: PPUSH
1063: CALL_OW 52
// for class = 1 to 4 do
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 4
1079: PUSH
1080: FOR_TO
1081: IFFALSE 1180
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_VAR 0 9
1097: PUSH
1098: LD_VAR 0 10
1102: PUSH
1103: LD_VAR 0 11
1107: PUSH
1108: LD_VAR 0 12
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1176
// begin PrepareHuman ( false , class , skill ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_VAR 0 4
1135: PPUSH
1136: LD_VAR 0 8
1140: PPUSH
1141: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1145: LD_ADDR_VAR 0 7
1149: PUSH
1150: LD_VAR 0 7
1154: PPUSH
1155: LD_VAR 0 7
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: CALL_OW 44
1168: PPUSH
1169: CALL_OW 2
1173: ST_TO_ADDR
// end ;
1174: GO 1125
1176: POP
1177: POP
1178: GO 1080
1180: POP
1181: POP
// for i in team do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_VAR 0 7
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1669
// begin b := 0 ;
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 0
1202: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1203: LD_VAR 0 2
1207: PPUSH
1208: CALL_OW 257
1212: PUSH
1213: LD_INT 1
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1328
1221: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1222: LD_ADDR_VAR 0 5
1226: PUSH
1227: LD_INT 22
1229: PUSH
1230: LD_OWVAR 20
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 30
1254: PUSH
1255: LD_INT 31
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 58
1269: PUSH
1270: EMPTY
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 69
1282: ST_TO_ADDR
// if not b then
1283: LD_VAR 0 5
1287: NOT
1288: IFFALSE 1326
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1290: LD_ADDR_VAR 0 5
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_OWVAR 20
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 5
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL_OW 69
1325: ST_TO_ADDR
// end ; class_engineer :
1326: GO 1567
1328: LD_INT 2
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1375
1336: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1337: LD_ADDR_VAR 0 5
1341: PUSH
1342: LD_INT 22
1344: PUSH
1345: LD_OWVAR 20
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: LD_INT 30
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 69
1372: ST_TO_ADDR
1373: GO 1567
1375: LD_INT 3
1377: DOUBLE
1378: EQUAL
1379: IFTRUE 1383
1381: GO 1472
1383: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 5
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_OWVAR 20
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 21
1403: PUSH
1404: LD_INT 2
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 58
1413: PUSH
1414: EMPTY
1415: LIST
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 69
1426: ST_TO_ADDR
// if not b then
1427: LD_VAR 0 5
1431: NOT
1432: IFFALSE 1470
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1434: LD_ADDR_VAR 0 5
1438: PUSH
1439: LD_INT 22
1441: PUSH
1442: LD_OWVAR 20
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 30
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PPUSH
1465: CALL_OW 69
1469: ST_TO_ADDR
// end ; class_scientistic :
1470: GO 1567
1472: LD_INT 4
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1519
1480: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1481: LD_ADDR_VAR 0 5
1485: PUSH
1486: LD_INT 22
1488: PUSH
1489: LD_OWVAR 20
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 30
1500: PUSH
1501: LD_INT 8
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: ST_TO_ADDR
// end ; class_apeman_soldier :
1517: GO 1567
1519: LD_INT 15
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1566
1527: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1528: LD_ADDR_VAR 0 5
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_OWVAR 20
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 30
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PPUSH
1559: CALL_OW 69
1563: ST_TO_ADDR
1564: GO 1567
1566: POP
// if b then
1567: LD_VAR 0 5
1571: IFFALSE 1642
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1573: LD_VAR 0 5
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: CALL_OW 266
1586: PUSH
1587: LD_INT 31
1589: EQUAL
1590: IFFALSE 1612
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: PPUSH
1606: CALL 4808 0 2
1610: GO 1640
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_INT 1
1624: PPUSH
1625: LD_VAR 0 5
1629: PPUSH
1630: CALL_OW 12
1634: ARRAY
1635: PPUSH
1636: CALL_OW 52
1640: GO 1667
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 14
1651: PPUSH
1652: LD_VAR 0 15
1656: PPUSH
1657: LD_INT 15
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 50
// end ;
1667: GO 1192
1669: POP
1670: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1671: LD_ADDR_VAR 0 16
1675: PUSH
1676: LD_INT 26
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_OWVAR 67
1697: ARRAY
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 5
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_OWVAR 67
1724: ARRAY
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 24
1732: PUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 5
1738: PUSH
1739: LD_INT 4
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_OWVAR 67
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 30
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: LD_INT 1
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_OWVAR 67
1778: ARRAY
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_INT 22
1797: PUSH
1798: LD_OWVAR 20
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 32
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: PUSH
1826: FOR_IN
1827: IFFALSE 2000
// begin if weapons then
1829: LD_VAR 0 16
1833: IFFALSE 1957
// begin k := rand ( 1 , weapons ) ;
1835: LD_ADDR_VAR 0 3
1839: PUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_VAR 0 16
1847: PPUSH
1848: CALL_OW 12
1852: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1853: LD_ADDR_VAR 0 17
1857: PUSH
1858: LD_VAR 0 16
1862: PUSH
1863: LD_VAR 0 3
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1873: LD_ADDR_VAR 0 16
1877: PUSH
1878: LD_VAR 0 16
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: LD_INT 2
1890: PPUSH
1891: LD_VAR 0 16
1895: PUSH
1896: LD_VAR 0 3
1900: ARRAY
1901: PUSH
1902: LD_INT 2
1904: ARRAY
1905: PUSH
1906: LD_INT 1
1908: MINUS
1909: PPUSH
1910: CALL 4900 0 4
1914: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1915: LD_VAR 0 16
1919: PUSH
1920: LD_VAR 0 3
1924: ARRAY
1925: PUSH
1926: LD_INT 2
1928: ARRAY
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: IFFALSE 1955
// weapons := Delete ( weapons , k ) ;
1935: LD_ADDR_VAR 0 16
1939: PUSH
1940: LD_VAR 0 16
1944: PPUSH
1945: LD_VAR 0 3
1949: PPUSH
1950: CALL_OW 3
1954: ST_TO_ADDR
// end else
1955: GO 1984
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1957: LD_ADDR_VAR 0 17
1961: PUSH
1962: LD_INT 27
1964: PUSH
1965: LD_INT 23
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: CALL_OW 12
1982: ARRAY
1983: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_VAR 0 17
1993: PPUSH
1994: CALL_OW 431
// end ;
1998: GO 1826
2000: POP
2001: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2002: LD_INT 1
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_VAR 0 8
2012: PUSH
2013: LD_INT 1
2015: PLUS
2016: PPUSH
2017: CALL_OW 380
// hc_gallery := potter ;
2021: LD_ADDR_OWVAR 33
2025: PUSH
2026: LD_STRING potter
2028: ST_TO_ADDR
// hc_face_number := 1 ;
2029: LD_ADDR_OWVAR 34
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// hc_importance := 100 ;
2037: LD_ADDR_OWVAR 32
2041: PUSH
2042: LD_INT 100
2044: ST_TO_ADDR
// hc_name := Mike Gerste ;
2045: LD_ADDR_OWVAR 26
2049: PUSH
2050: LD_STRING Mike Gerste
2052: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 10
2060: PUSH
2061: LD_INT 11
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: ST_TO_ADDR
// legion_commander := CreateHuman ;
2068: LD_ADDR_EXP 1
2072: PUSH
2073: CALL_OW 44
2077: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2078: LD_EXP 1
2082: PPUSH
2083: LD_INT 23
2085: PPUSH
2086: CALL_OW 52
// uc_side := 5 ;
2090: LD_ADDR_OWVAR 20
2094: PUSH
2095: LD_INT 5
2097: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 8
2108: PPUSH
2109: CALL_OW 380
// hc_gallery := potter ;
2113: LD_ADDR_OWVAR 33
2117: PUSH
2118: LD_STRING potter
2120: ST_TO_ADDR
// hc_face_number := 2 ;
2121: LD_ADDR_OWVAR 34
2125: PUSH
2126: LD_INT 2
2128: ST_TO_ADDR
// hc_importance := 0 ;
2129: LD_ADDR_OWVAR 32
2133: PUSH
2134: LD_INT 0
2136: ST_TO_ADDR
// hc_name := George Potter ;
2137: LD_ADDR_OWVAR 26
2141: PUSH
2142: LD_STRING George Potter
2144: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2145: LD_ADDR_OWVAR 29
2149: PUSH
2150: LD_INT 12
2152: PUSH
2153: LD_INT 9
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: ST_TO_ADDR
// potter := CreateHuman ;
2160: LD_ADDR_EXP 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2170: LD_EXP 4
2174: PPUSH
2175: LD_INT 4
2177: PPUSH
2178: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2182: LD_EXP 4
2186: PPUSH
2187: LD_INT 103
2189: PPUSH
2190: LD_INT 45
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2200: LD_EXP 4
2204: PPUSH
2205: LD_INT 23
2207: PPUSH
2208: CALL_OW 119
// InitHc ( ) ;
2212: CALL_OW 19
// end ; end_of_file
2216: LD_VAR 0 1
2220: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 5 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 5
2235: ST_TO_ADDR
// uc_nation := nation_arabian ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_OWVAR 20
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 30
2263: PUSH
2264: LD_INT 5
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 69
2279: ST_TO_ADDR
// for i = 1 to 3 do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 3
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2332
// begin PrepareHuman ( false , 2 , 6 ) ;
2296: LD_INT 0
2298: PPUSH
2299: LD_INT 2
2301: PPUSH
2302: LD_INT 6
2304: PPUSH
2305: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2309: CALL_OW 44
2313: PPUSH
2314: LD_INT 27
2316: PPUSH
2317: LD_INT 22
2319: PPUSH
2320: LD_INT 5
2322: PPUSH
2323: LD_INT 0
2325: PPUSH
2326: CALL_OW 50
// end ;
2330: GO 2293
2332: POP
2333: POP
// for i = 1 to 3 do
2334: LD_ADDR_VAR 0 2
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 3
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2383
// begin PrepareHuman ( false , 1 , 6 ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 6
2358: PPUSH
2359: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 4
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PPUSH
2377: CALL_OW 52
// end ;
2381: GO 2347
2383: POP
2384: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: LD_INT 22
2392: PUSH
2393: LD_OWVAR 20
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 2
2404: PUSH
2405: LD_INT 30
2407: PUSH
2408: LD_INT 31
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 30
2417: PUSH
2418: LD_INT 32
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2527
// begin PrepareHuman ( false , 1 , 6 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2455: CALL_OW 44
2459: PPUSH
2460: LD_VAR 0 2
2464: PPUSH
2465: CALL 4808 0 2
// if GetBType ( i ) = b_bunker then
2469: LD_VAR 0 2
2473: PPUSH
2474: CALL_OW 266
2478: PUSH
2479: LD_INT 32
2481: EQUAL
2482: IFFALSE 2525
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 27
2491: PUSH
2492: LD_INT 25
2494: PUSH
2495: LD_INT 24
2497: PUSH
2498: LD_INT 28
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_VAR 0 2
2511: PUSH
2512: LD_INT 4
2514: MOD
2515: PUSH
2516: LD_INT 1
2518: PLUS
2519: ARRAY
2520: PPUSH
2521: CALL_OW 431
// end ;
2525: GO 2439
2527: POP
2528: POP
// for i = 1 to 3 do
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 3
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2660
// begin vc_chassis := ar_half_tracked ;
2545: LD_ADDR_OWVAR 37
2549: PUSH
2550: LD_INT 14
2552: ST_TO_ADDR
// vc_engine := engine_solar ;
2553: LD_ADDR_OWVAR 39
2557: PUSH
2558: LD_INT 2
2560: ST_TO_ADDR
// vc_control := control_manual ;
2561: LD_ADDR_OWVAR 38
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2569: LD_ADDR_OWVAR 40
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 27
2579: PUSH
2580: LD_INT 26
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_VAR 0 2
2592: ARRAY
2593: ST_TO_ADDR
// un := CreateVehicle ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 45
2603: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 3
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2644: CALL_OW 44
2648: PPUSH
2649: LD_VAR 0 3
2653: PPUSH
2654: CALL_OW 52
// end ;
2658: GO 2542
2660: POP
2661: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: LD_INT 6
2670: PPUSH
2671: CALL_OW 380
// al_commander := CreateHuman ;
2675: LD_ADDR_EXP 5
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2685: LD_EXP 5
2689: PPUSH
2690: LD_INT 22
2692: PUSH
2693: LD_OWVAR 20
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PPUSH
2725: CALL_OW 52
// InitHc ( ) ;
2729: CALL_OW 19
// end ;
2733: LD_VAR 0 1
2737: RET
// export function ChangeSide ( ) ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: LD_INT 22
2749: PUSH
2750: LD_INT 5
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 69
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2779
// SetSide ( i , 8 ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_INT 8
2772: PPUSH
2773: CALL_OW 235
2777: GO 2762
2779: POP
2780: POP
// end ;
2781: LD_VAR 0 1
2785: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IFFALSE 3314
2802: GO 2804
2804: DISABLE
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
// begin enable ;
2813: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: LD_INT 22
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 2
2831: PUSH
2832: LD_INT 21
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 21
2844: PUSH
2845: LD_INT 2
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PPUSH
2861: CALL_OW 69
2865: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2866: LD_ADDR_VAR 0 5
2870: PUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 5
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 32
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: LD_INT 24
2896: PUSH
2897: LD_INT 1000
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 69
2917: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 54
2933: PUSH
2934: EMPTY
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 25
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PPUSH
2955: CALL_OW 72
2959: ST_TO_ADDR
// if not list then
2960: LD_VAR 0 2
2964: NOT
2965: IFFALSE 2969
// exit ;
2967: GO 3314
// for i in list do
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 2
2978: PUSH
2979: FOR_IN
2980: IFFALSE 3312
// begin if b then
2982: LD_VAR 0 5
2986: IFFALSE 3065
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_INT 25
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PPUSH
3008: CALL_OW 72
3012: PUSH
3013: FOR_IN
3014: IFFALSE 3063
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 314
3025: NOT
3026: PUSH
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 110
3036: PUSH
3037: LD_INT 7
3039: NONEQUAL
3040: AND
3041: IFFALSE 3061
// ComRepairBuilding ( j , b [ 1 ] ) ;
3043: LD_VAR 0 4
3047: PPUSH
3048: LD_VAR 0 5
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: CALL_OW 130
3061: GO 3013
3063: POP
3064: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 256
3074: PUSH
3075: LD_INT 500
3077: LESS
3078: PUSH
3079: LD_VAR 0 1
3083: PPUSH
3084: CALL_OW 110
3088: PUSH
3089: LD_INT 7
3091: EQUAL
3092: NOT
3093: AND
3094: IFFALSE 3144
// begin ComMoveToArea ( i , guard_hill ) ;
3096: LD_VAR 0 1
3100: PPUSH
3101: LD_INT 11
3103: PPUSH
3104: CALL_OW 113
// SetTag ( i , 7 ) ;
3108: LD_VAR 0 1
3112: PPUSH
3113: LD_INT 7
3115: PPUSH
3116: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3120: LD_VAR 0 1
3124: PPUSH
3125: CALL_OW 247
3129: PUSH
3130: LD_INT 2
3132: EQUAL
3133: IFFALSE 3144
// begin AddComExitVehicle ( i ) ;
3135: LD_VAR 0 1
3139: PPUSH
3140: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3144: LD_VAR 0 1
3148: PPUSH
3149: CALL_OW 256
3153: PUSH
3154: LD_INT 1000
3156: EQUAL
3157: PUSH
3158: LD_VAR 0 1
3162: PPUSH
3163: CALL_OW 110
3167: PUSH
3168: LD_INT 7
3170: EQUAL
3171: AND
3172: PUSH
3173: LD_VAR 0 1
3177: PPUSH
3178: CALL_OW 310
3182: NOT
3183: AND
3184: PUSH
3185: LD_VAR 0 6
3189: AND
3190: IFFALSE 3218
// begin SetTag ( i , 0 ) ;
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3204: LD_VAR 0 6
3208: PPUSH
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3218: LD_VAR 0 1
3222: PPUSH
3223: CALL_OW 247
3227: PUSH
3228: LD_INT 2
3230: EQUAL
3231: PUSH
3232: LD_VAR 0 1
3236: PPUSH
3237: CALL_OW 110
3241: PUSH
3242: LD_INT 7
3244: NONEQUAL
3245: AND
3246: PUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 314
3256: NOT
3257: AND
3258: IFFALSE 3310
// if FilterAllUnits ( [ f_side , 7 ] ) then
3260: LD_INT 22
3262: PUSH
3263: LD_INT 7
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PPUSH
3270: CALL_OW 69
3274: IFFALSE 3310
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 7
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_VAR 0 1
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: CALL_OW 115
// end ;
3310: GO 2979
3312: POP
3313: POP
// end ; end_of_file
3314: PPOPN 6
3316: END
// export function Game ; var i , val , areas , wave ; begin
3317: LD_INT 0
3319: PPUSH
3320: PPUSH
3321: PPUSH
3322: PPUSH
3323: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_INT 1
3331: PUSH
3332: LD_INT 2
3334: PUSH
3335: LD_INT 3
3337: PUSH
3338: LD_INT 4
3340: PUSH
3341: LD_INT 5
3343: PUSH
3344: LD_INT 6
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3355: LD_ADDR_VAR 0 3
3359: PUSH
3360: LD_INT 5
3362: PUSH
3363: LD_INT 6
3365: PUSH
3366: LD_INT 7
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: LD_OWVAR 67
3378: ARRAY
3379: ST_TO_ADDR
// wave := 1 ;
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// while not game_over do
3388: LD_EXP 7
3392: NOT
3393: IFFALSE 3549
// begin repeat begin Wait ( 0 0$01 ) ;
3395: LD_INT 35
3397: PPUSH
3398: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3402: LD_ADDR_EXP 11
3406: PUSH
3407: LD_EXP 11
3411: PUSH
3412: LD_INT 35
3414: PLUS
3415: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3416: LD_INT 22
3418: PUSH
3419: LD_INT 7
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PPUSH
3426: CALL_OW 69
3430: PUSH
3431: LD_INT 10
3433: LESS
3434: PUSH
3435: LD_EXP 11
3439: PUSH
3440: LD_INT 21000
3442: GREATEREQUAL
3443: OR
3444: IFFALSE 3395
// wave_time := 0 0$00 ;
3446: LD_ADDR_EXP 11
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3454: LD_INT 5250
3456: PPUSH
3457: CALL_OW 67
// if not ignore_wave then
3461: LD_EXP 15
3465: NOT
3466: IFFALSE 3539
// begin for i = 1 to areas do
3468: LD_ADDR_VAR 0 2
3472: PUSH
3473: DOUBLE
3474: LD_INT 1
3476: DEC
3477: ST_TO_ADDR
3478: LD_VAR 0 4
3482: PUSH
3483: FOR_TO
3484: IFFALSE 3521
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3486: LD_VAR 0 5
3490: PUSH
3491: LD_VAR 0 3
3495: PLUS
3496: PPUSH
3497: LD_VAR 0 4
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PPUSH
3508: CALL 3554 0 2
// Wait ( 0 0$10 ) ;
3512: LD_INT 350
3514: PPUSH
3515: CALL_OW 67
// end ;
3519: GO 3483
3521: POP
3522: POP
// wave := wave + 1 ;
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: LD_VAR 0 5
3532: PUSH
3533: LD_INT 1
3535: PLUS
3536: ST_TO_ADDR
// end else
3537: GO 3547
// ignore_wave := false ;
3539: LD_ADDR_EXP 15
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// end ;
3547: GO 3388
// end ;
3549: LD_VAR 0 1
3553: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3554: LD_INT 0
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
// uc_side := 7 ;
3561: LD_ADDR_OWVAR 20
3565: PUSH
3566: LD_INT 7
3568: ST_TO_ADDR
// uc_nation := 2 ;
3569: LD_ADDR_OWVAR 21
3573: PUSH
3574: LD_INT 2
3576: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_INT 10
3584: PUSH
3585: LD_OWVAR 1
3589: PUSH
3590: LD_INT 10500
3592: DIV
3593: PLUS
3594: ST_TO_ADDR
// if v > 25 then
3595: LD_VAR 0 5
3599: PUSH
3600: LD_INT 25
3602: GREATER
3603: IFFALSE 3613
// v := 25 ;
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: LD_INT 25
3612: ST_TO_ADDR
// InitHc ( ) ;
3613: CALL_OW 19
// hc_gallery :=  ;
3617: LD_ADDR_OWVAR 33
3621: PUSH
3622: LD_STRING 
3624: ST_TO_ADDR
// hc_importance := 0 ;
3625: LD_ADDR_OWVAR 32
3629: PUSH
3630: LD_INT 0
3632: ST_TO_ADDR
// hc_name :=  ;
3633: LD_ADDR_OWVAR 26
3637: PUSH
3638: LD_STRING 
3640: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3641: LD_ADDR_OWVAR 29
3645: PUSH
3646: LD_VAR 0 5
3650: PUSH
3651: LD_VAR 0 5
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: ST_TO_ADDR
// if val > 35 then
3660: LD_VAR 0 1
3664: PUSH
3665: LD_INT 35
3667: GREATER
3668: IFFALSE 3678
// val := 35 ;
3670: LD_ADDR_VAR 0 1
3674: PUSH
3675: LD_INT 35
3677: ST_TO_ADDR
// for i = 1 to val do
3678: LD_ADDR_VAR 0 4
3682: PUSH
3683: DOUBLE
3684: LD_INT 1
3686: DEC
3687: ST_TO_ADDR
3688: LD_VAR 0 1
3692: PUSH
3693: FOR_TO
3694: IFFALSE 3905
// begin if i mod 9 = 0 then
3696: LD_VAR 0 4
3700: PUSH
3701: LD_INT 9
3703: MOD
3704: PUSH
3705: LD_INT 0
3707: EQUAL
3708: IFFALSE 3720
// class := class_apeman_kamikaze else
3710: LD_ADDR_VAR 0 7
3714: PUSH
3715: LD_INT 17
3717: ST_TO_ADDR
3718: GO 3752
// if i mod 4 = 0 then
3720: LD_VAR 0 4
3724: PUSH
3725: LD_INT 4
3727: MOD
3728: PUSH
3729: LD_INT 0
3731: EQUAL
3732: IFFALSE 3744
// class := class_apeman_soldier else
3734: LD_ADDR_VAR 0 7
3738: PUSH
3739: LD_INT 15
3741: ST_TO_ADDR
3742: GO 3752
// class := class_apeman ;
3744: LD_ADDR_VAR 0 7
3748: PUSH
3749: LD_INT 12
3751: ST_TO_ADDR
// if i mod 6 = 0 then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_INT 6
3759: MOD
3760: PUSH
3761: LD_INT 0
3763: EQUAL
3764: IFFALSE 3837
// begin vc_chassis := ar_half_tracked ;
3766: LD_ADDR_OWVAR 37
3770: PUSH
3771: LD_INT 14
3773: ST_TO_ADDR
// vc_control := control_apeman ;
3774: LD_ADDR_OWVAR 38
3778: PUSH
3779: LD_INT 5
3781: ST_TO_ADDR
// vc_engine := engine_siberite ;
3782: LD_ADDR_OWVAR 39
3786: PUSH
3787: LD_INT 3
3789: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3790: LD_ADDR_OWVAR 40
3794: PUSH
3795: LD_INT 28
3797: PUSH
3798: LD_INT 27
3800: PUSH
3801: LD_INT 29
3803: PUSH
3804: LD_INT 91
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 4
3818: PPUSH
3819: CALL_OW 12
3823: ARRAY
3824: ST_TO_ADDR
// un := CreateVehicle ;
3825: LD_ADDR_VAR 0 6
3829: PUSH
3830: CALL_OW 45
3834: ST_TO_ADDR
// end else
3835: GO 3862
// begin PrepareHuman ( sex_male , class , 10 ) ;
3837: LD_INT 1
3839: PPUSH
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_INT 10
3847: PPUSH
3848: CALL_OW 380
// un := CreateHuman ;
3852: LD_ADDR_VAR 0 6
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3862: LD_VAR 0 6
3866: PPUSH
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3879: LD_VAR 0 6
3883: PPUSH
3884: CALL_OW 250
3888: PPUSH
3889: LD_VAR 0 6
3893: PPUSH
3894: CALL_OW 251
3898: PPUSH
3899: CALL_OW 494
// end ;
3903: GO 3693
3905: POP
3906: POP
// end ;
3907: LD_VAR 0 3
3911: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3912: LD_EXP 6
3916: PUSH
3917: LD_EXP 7
3921: NOT
3922: AND
3923: IFFALSE 4042
3925: GO 3927
3927: DISABLE
3928: LD_INT 0
3930: PPUSH
3931: PPUSH
3932: PPUSH
// begin enable ;
3933: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: LD_INT 22
3941: PUSH
3942: LD_INT 7
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 69
3953: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3954: LD_ADDR_VAR 0 3
3958: PUSH
3959: LD_INT 81
3961: PUSH
3962: LD_INT 7
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PPUSH
3969: CALL_OW 69
3973: ST_TO_ADDR
// if not list then
3974: LD_VAR 0 2
3978: NOT
3979: IFFALSE 3983
// exit ;
3981: GO 4042
// for i in list do
3983: LD_ADDR_VAR 0 1
3987: PUSH
3988: LD_VAR 0 2
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4040
// begin if enemy then
3996: LD_VAR 0 3
4000: IFFALSE 4038
// if not HasTask ( i ) then
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 314
4011: NOT
4012: IFFALSE 4038
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 74
4033: PPUSH
4034: CALL_OW 115
// end ;
4038: GO 3993
4040: POP
4041: POP
// end ; end_of_file
4042: PPOPN 3
4044: END
// export function Action ; begin
4045: LD_INT 0
4047: PPUSH
// InGameOn ;
4048: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4052: LD_INT 23
4054: PPUSH
4055: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4059: LD_EXP 1
4063: PPUSH
4064: LD_STRING DL-1
4066: PPUSH
4067: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4071: LD_EXP 2
4075: PPUSH
4076: LD_STRING DA-1
4078: PPUSH
4079: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4083: LD_EXP 3
4087: PPUSH
4088: LD_STRING DA-2
4090: PPUSH
4091: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4095: LD_EXP 1
4099: PPUSH
4100: LD_STRING DL-2
4102: PPUSH
4103: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4107: LD_EXP 3
4111: PPUSH
4112: LD_STRING DA-3
4114: PPUSH
4115: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4119: LD_EXP 1
4123: PPUSH
4124: LD_STRING DL-3
4126: PPUSH
4127: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4131: LD_EXP 2
4135: PPUSH
4136: LD_STRING DA-4
4138: PPUSH
4139: CALL_OW 88
// if not dialogue_skipped then
4143: LD_OWVAR 59
4147: NOT
4148: IFFALSE 4233
// begin Wait ( 0 0$01 ) ;
4150: LD_INT 35
4152: PPUSH
4153: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4157: LD_EXP 2
4161: PUSH
4162: LD_EXP 3
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PPUSH
4171: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4175: LD_EXP 2
4179: PPUSH
4180: LD_INT 107
4182: PPUSH
4183: LD_INT 53
4185: PPUSH
4186: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4190: LD_EXP 3
4194: PPUSH
4195: LD_INT 108
4197: PPUSH
4198: LD_INT 53
4200: PPUSH
4201: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4205: LD_EXP 2
4209: PPUSH
4210: LD_EXP 4
4214: PPUSH
4215: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4219: LD_EXP 3
4223: PPUSH
4224: LD_EXP 4
4228: PPUSH
4229: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4233: LD_INT 35
4235: PPUSH
4236: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4240: LD_EXP 2
4244: PPUSH
4245: LD_INT 107
4247: PPUSH
4248: LD_INT 53
4250: PPUSH
4251: CALL_OW 307
4255: PUSH
4256: LD_OWVAR 59
4260: OR
4261: IFFALSE 4233
// if not dialogue_skipped then
4263: LD_OWVAR 59
4267: NOT
4268: IFFALSE 4369
// begin ComTurnUnit ( potter , l1 ) ;
4270: LD_EXP 4
4274: PPUSH
4275: LD_EXP 2
4279: PPUSH
4280: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4284: LD_INT 10
4286: PPUSH
4287: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4291: LD_EXP 4
4295: PPUSH
4296: LD_INT 108
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 0
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 483
// Wait ( 0 0$01 ) ;
4312: LD_INT 35
4314: PPUSH
4315: CALL_OW 67
// RemoveUnit ( potter ) ;
4319: LD_EXP 4
4323: PPUSH
4324: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4328: LD_EXP 2
4332: PPUSH
4333: LD_STRING DA-5
4335: PPUSH
4336: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4340: LD_EXP 3
4344: PPUSH
4345: LD_STRING DA-6
4347: PPUSH
4348: CALL_OW 88
// Wait ( 0 0$02 ) ;
4352: LD_INT 70
4354: PPUSH
4355: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4359: LD_INT 25
4361: PPUSH
4362: LD_INT 19
4364: PPUSH
4365: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4369: LD_INT 20
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: CALL 3554 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4379: LD_EXP 5
4383: PPUSH
4384: LD_STRING DLa-1
4386: PPUSH
4387: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4391: LD_EXP 1
4395: PPUSH
4396: LD_STRING DL-5
4398: PPUSH
4399: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4403: LD_INT 23
4405: PPUSH
4406: CALL_OW 87
// InGameOff ;
4410: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4414: LD_STRING C1
4416: PPUSH
4417: CALL_OW 337
// alert := true ;
4421: LD_ADDR_EXP 6
4425: PUSH
4426: LD_INT 1
4428: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4429: LD_EXP 5
4433: PPUSH
4434: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4438: LD_EXP 5
4442: PPUSH
4443: LD_INT 11
4445: PPUSH
4446: CALL_OW 173
// Wait ( 0 0$30 ) ;
4450: LD_INT 1050
4452: PPUSH
4453: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4457: LD_INT 10
4459: PPUSH
4460: LD_INT 4
4462: PPUSH
4463: CALL 3554 0 2
// Wait ( 0 0$35 ) ;
4467: LD_INT 1225
4469: PPUSH
4470: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4474: LD_INT 10
4476: PPUSH
4477: LD_INT 5
4479: PPUSH
4480: CALL 3554 0 2
// Wait ( 0 0$03 ) ;
4484: LD_INT 105
4486: PPUSH
4487: CALL_OW 67
// Game ;
4491: CALL 3317 0 0
// end ;
4495: LD_VAR 0 1
4499: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4500: LD_INT 22
4502: PUSH
4503: LD_INT 7
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 0
4517: EQUAL
4518: PUSH
4519: LD_EXP 10
4523: PUSH
4524: LD_INT 1500
4526: GREATEREQUAL
4527: AND
4528: IFFALSE 4756
4530: GO 4532
4532: DISABLE
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
// begin DialogueOn ;
4537: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4541: LD_EXP 12
4545: PPUSH
4546: LD_STRING DVr-1
4548: PPUSH
4549: CALL_OW 94
// DialogueOff ;
4553: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4557: LD_STRING QBonusInfo
4559: PPUSH
4560: CALL_OW 97
4564: PUSH
4565: LD_INT 1
4567: DOUBLE
4568: EQUAL
4569: IFTRUE 4573
4571: GO 4584
4573: POP
// bonus_active := true ; end ;
4574: LD_ADDR_EXP 13
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
4582: GO 4585
4584: POP
// bonus_num := 4 ;
4585: LD_ADDR_EXP 14
4589: PUSH
4590: LD_INT 4
4592: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ;
4593: LD_OWVAR 2
4597: PPUSH
4598: LD_INT 12
4600: PPUSH
4601: LD_INT 2
4603: PPUSH
4604: LD_INT 23
4606: PPUSH
4607: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4611: LD_ADDR_VAR 0 1
4615: PUSH
4616: LD_INT 500
4618: PUSH
4619: LD_INT 3500
4621: PUSH
4622: LD_INT 5750
4624: PUSH
4625: LD_INT 10000
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4634: LD_INT 10500
4636: PUSH
4637: LD_INT 12600
4639: PUSH
4640: LD_INT 14700
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: PUSH
4648: LD_OWVAR 67
4652: ARRAY
4653: PPUSH
4654: CALL_OW 67
// for i = 1 to tmp do
4658: LD_ADDR_VAR 0 2
4662: PUSH
4663: DOUBLE
4664: LD_INT 1
4666: DEC
4667: ST_TO_ADDR
4668: LD_VAR 0 1
4672: PUSH
4673: FOR_TO
4674: IFFALSE 4706
// if points >= tmp [ i ] then
4676: LD_EXP 10
4680: PUSH
4681: LD_VAR 0 1
4685: PUSH
4686: LD_VAR 0 2
4690: ARRAY
4691: GREATEREQUAL
4692: IFFALSE 4704
// bonus_num := i ;
4694: LD_ADDR_EXP 14
4698: PUSH
4699: LD_VAR 0 2
4703: ST_TO_ADDR
4704: GO 4673
4706: POP
4707: POP
// case Query ( QBonusInfo ) of 1 :
4708: LD_STRING QBonusInfo
4710: PPUSH
4711: CALL_OW 97
4715: PUSH
4716: LD_INT 1
4718: DOUBLE
4719: EQUAL
4720: IFTRUE 4724
4722: GO 4745
4724: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4725: LD_OWVAR 2
4729: PPUSH
4730: LD_INT 12
4732: PPUSH
4733: LD_INT 2
4735: PPUSH
4736: LD_INT 23
4738: PPUSH
4739: CALL_OW 468
4743: GO 4746
4745: POP
// until points >= 15000 ;
4746: LD_EXP 10
4750: PUSH
4751: LD_INT 15000
4753: GREATEREQUAL
4754: IFFALSE 4634
// end ;
4756: PPOPN 2
4758: END
// export function Win ; begin
4759: LD_INT 0
4761: PPUSH
// AddMedal ( med , 1 ) ;
4762: LD_STRING med
4764: PPUSH
4765: LD_INT 1
4767: PPUSH
4768: CALL_OW 101
// AddMedal ( med , 1 ) ;
4772: LD_STRING med
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 101
// AddMedal ( med , 1 ) ;
4782: LD_STRING med
4784: PPUSH
4785: LD_INT 1
4787: PPUSH
4788: CALL_OW 101
// GiveMedals ( MAIN ) ;
4792: LD_STRING MAIN
4794: PPUSH
4795: CALL_OW 102
// YouWin ;
4799: CALL_OW 103
// end ; end_of_file
4803: LD_VAR 0 1
4807: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4808: LD_INT 0
4810: PPUSH
4811: PPUSH
// dir := GetDir ( b ) ;
4812: LD_ADDR_VAR 0 4
4816: PUSH
4817: LD_VAR 0 2
4821: PPUSH
4822: CALL_OW 254
4826: ST_TO_ADDR
// if dir < 3 then
4827: LD_VAR 0 4
4831: PUSH
4832: LD_INT 3
4834: LESS
4835: IFFALSE 4853
// dir := dir + 3 else
4837: LD_ADDR_VAR 0 4
4841: PUSH
4842: LD_VAR 0 4
4846: PUSH
4847: LD_INT 3
4849: PLUS
4850: ST_TO_ADDR
4851: GO 4867
// dir := dir - 3 ;
4853: LD_ADDR_VAR 0 4
4857: PUSH
4858: LD_VAR 0 4
4862: PUSH
4863: LD_INT 3
4865: MINUS
4866: ST_TO_ADDR
// SetDir ( un , dir ) ;
4867: LD_VAR 0 1
4871: PPUSH
4872: LD_VAR 0 4
4876: PPUSH
4877: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_VAR 0 2
4890: PPUSH
4891: CALL_OW 52
// end ;
4895: LD_VAR 0 3
4899: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4900: LD_INT 0
4902: PPUSH
4903: PPUSH
4904: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4905: LD_ADDR_VAR 0 7
4909: PUSH
4910: LD_VAR 0 1
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_VAR 0 4
4930: PPUSH
4931: CALL_OW 1
4935: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4936: LD_ADDR_VAR 0 1
4940: PUSH
4941: LD_VAR 0 1
4945: PPUSH
4946: LD_VAR 0 2
4950: PPUSH
4951: LD_VAR 0 7
4955: PPUSH
4956: CALL_OW 1
4960: ST_TO_ADDR
// result := tab ;
4961: LD_ADDR_VAR 0 5
4965: PUSH
4966: LD_VAR 0 1
4970: ST_TO_ADDR
// end ;
4971: LD_VAR 0 5
4975: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4976: LD_INT 0
4978: PPUSH
4979: PPUSH
4980: PPUSH
// if not GetControl ( veh ) = control_manual then
4981: LD_VAR 0 1
4985: PPUSH
4986: CALL_OW 263
4990: PUSH
4991: LD_INT 1
4993: EQUAL
4994: NOT
4995: IFFALSE 5007
// result := false else
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
5005: GO 5152
// if veh in FilterAllUnits ( [ f_empty ] ) then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 58
5014: PUSH
5015: EMPTY
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: IN
5023: IFFALSE 5035
// result := false else
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
5033: GO 5152
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5035: LD_ADDR_VAR 0 4
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 255
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 55
5059: PUSH
5060: EMPTY
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 69
5071: ST_TO_ADDR
// if not filter then
5072: LD_VAR 0 4
5076: NOT
5077: IFFALSE 5089
// result := false else
5079: LD_ADDR_VAR 0 2
5083: PUSH
5084: LD_INT 0
5086: ST_TO_ADDR
5087: GO 5152
// for i = 1 to filter do
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: DOUBLE
5095: LD_INT 1
5097: DEC
5098: ST_TO_ADDR
5099: LD_VAR 0 4
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5150
// if IsDriver ( filter [ i ] ) = veh then
5107: LD_VAR 0 4
5111: PUSH
5112: LD_VAR 0 3
5116: ARRAY
5117: PPUSH
5118: CALL 62084 0 1
5122: PUSH
5123: LD_VAR 0 1
5127: EQUAL
5128: IFFALSE 5148
// begin result := filter [ i ] ;
5130: LD_ADDR_VAR 0 2
5134: PUSH
5135: LD_VAR 0 4
5139: PUSH
5140: LD_VAR 0 3
5144: ARRAY
5145: ST_TO_ADDR
// break ;
5146: GO 5150
// end ;
5148: GO 5104
5150: POP
5151: POP
// end ; end ; end_of_file
5152: LD_VAR 0 2
5156: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: CALL 22857 0 1
// if un = legion_commander then
5166: LD_VAR 0 1
5170: PUSH
5171: LD_EXP 1
5175: EQUAL
5176: IFFALSE 5185
// YouLost ( commanderDied ) ;
5178: LD_STRING commanderDied
5180: PPUSH
5181: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5185: LD_VAR 0 1
5189: PUSH
5190: LD_EXP 1
5194: PUSH
5195: LD_INT 23
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: IN
5202: IFFALSE 5212
// game_over := true ;
5204: LD_ADDR_EXP 7
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// if un = al_commander then
5212: LD_VAR 0 1
5216: PUSH
5217: LD_EXP 5
5221: EQUAL
5222: IFFALSE 5228
// ChangeSide ( ) ;
5224: CALL 2738 0 0
// if GetSide ( un ) = 7 then
5228: LD_VAR 0 1
5232: PPUSH
5233: CALL_OW 255
5237: PUSH
5238: LD_INT 7
5240: EQUAL
5241: IFFALSE 5359
// begin if GetClass ( un ) = class_apeman then
5243: LD_VAR 0 1
5247: PPUSH
5248: CALL_OW 257
5252: PUSH
5253: LD_INT 12
5255: EQUAL
5256: IFFALSE 5272
// points := points + 6 ;
5258: LD_ADDR_EXP 10
5262: PUSH
5263: LD_EXP 10
5267: PUSH
5268: LD_INT 6
5270: PLUS
5271: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 257
5281: PUSH
5282: LD_INT 17
5284: EQUAL
5285: IFFALSE 5301
// points := points + 11 ;
5287: LD_ADDR_EXP 10
5291: PUSH
5292: LD_EXP 10
5296: PUSH
5297: LD_INT 11
5299: PLUS
5300: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 257
5310: PUSH
5311: LD_INT 15
5313: EQUAL
5314: IFFALSE 5330
// points := points + 14 ;
5316: LD_ADDR_EXP 10
5320: PUSH
5321: LD_EXP 10
5325: PUSH
5326: LD_INT 14
5328: PLUS
5329: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 247
5339: PUSH
5340: LD_INT 2
5342: EQUAL
5343: IFFALSE 5359
// points := points + 50 ;
5345: LD_ADDR_EXP 10
5349: PUSH
5350: LD_EXP 10
5354: PUSH
5355: LD_INT 50
5357: PLUS
5358: ST_TO_ADDR
// end ; end ;
5359: PPOPN 1
5361: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5362: LD_EXP 5
5366: PPUSH
5367: CALL_OW 256
5371: PUSH
5372: LD_INT 1000
5374: LESS
5375: IFFALSE 5407
5377: GO 5379
5379: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5380: LD_EXP 5
5384: PPUSH
5385: CALL_OW 504
5389: PPUSH
5390: CALL_OW 255
5394: PUSH
5395: LD_INT 8
5397: EQUAL
5398: IFFALSE 5407
// YouLost ( FriendlyFire ) ;
5400: LD_STRING FriendlyFire
5402: PPUSH
5403: CALL_OW 104
5407: END
// on DialogueSkipped ( value ) do var i ;
5408: LD_INT 0
5410: PPUSH
// begin RemoveUnit ( potter ) ;
5411: LD_EXP 4
5415: PPUSH
5416: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5420: LD_EXP 2
5424: PUSH
5425: LD_EXP 3
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 122
// Wait ( 1 ) ;
5438: LD_INT 1
5440: PPUSH
5441: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5445: LD_EXP 2
5449: PPUSH
5450: LD_INT 107
5452: PPUSH
5453: LD_INT 53
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: LD_INT 0
5461: PPUSH
5462: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5466: LD_EXP 3
5470: PPUSH
5471: LD_INT 108
5473: PPUSH
5474: LD_INT 53
5476: PPUSH
5477: LD_INT 0
5479: PPUSH
5480: LD_INT 0
5482: PPUSH
5483: CALL_OW 483
// Wait ( 1 ) ;
5487: LD_INT 1
5489: PPUSH
5490: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5494: LD_EXP 2
5498: PUSH
5499: LD_EXP 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: LD_INT 108
5510: PPUSH
5511: LD_INT 1
5513: PPUSH
5514: CALL_OW 118
// end ;
5518: PPOPN 2
5520: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5521: LD_INT 0
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5531: LD_ADDR_VAR 0 10
5535: PUSH
5536: LD_INT 2
5538: PPUSH
5539: CALL_OW 469
5543: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5544: LD_ADDR_VAR 0 12
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_OWVAR 2
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 2
5563: PUSH
5564: LD_INT 30
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 30
5576: PUSH
5577: LD_INT 11
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL_OW 69
5597: PPUSH
5598: LD_VAR 0 10
5602: PUSH
5603: LD_INT 1
5605: ARRAY
5606: PPUSH
5607: LD_VAR 0 10
5611: PUSH
5612: LD_INT 2
5614: ARRAY
5615: PPUSH
5616: CALL_OW 73
5620: ST_TO_ADDR
// if icon = art_exp_left then
5621: LD_VAR 0 2
5625: PUSH
5626: LD_INT 1
5628: EQUAL
5629: IFFALSE 5684
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5631: LD_VAR 0 12
5635: PPUSH
5636: LD_EXP 9
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5648: LD_VAR 0 12
5652: PPUSH
5653: LD_EXP 17
5657: PPUSH
5658: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5662: LD_OWVAR 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: LD_VAR 0 12
5677: PPUSH
5678: CALL_OW 468
// end else
5682: GO 6465
// begin DialogueOn ;
5684: CALL_OW 6
// uc_side := 8 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 8
5695: ST_TO_ADDR
// uc_nation := 2 ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 2
5703: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: LD_STRING QBonus
5711: PUSH
5712: LD_EXP 14
5716: STR
5717: ST_TO_ADDR
// off := true ;
5718: LD_ADDR_VAR 0 6
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// units := [ ] ;
5726: LD_ADDR_VAR 0 7
5730: PUSH
5731: EMPTY
5732: ST_TO_ADDR
// crates := 0 ;
5733: LD_ADDR_VAR 0 8
5737: PUSH
5738: LD_INT 0
5740: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5741: LD_EXP 12
5745: PPUSH
5746: LD_STRING DVr-2
5748: PPUSH
5749: CALL_OW 94
// wait ( 0 0$1 ) ;
5753: LD_INT 35
5755: PPUSH
5756: CALL_OW 67
// case Query ( bonus ) of 1 :
5760: LD_VAR 0 5
5764: PPUSH
5765: CALL_OW 97
5769: PUSH
5770: LD_INT 1
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5863
5778: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5779: LD_ADDR_VAR 0 9
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 5
5792: PUSH
5793: LD_INT 8
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: PUSH
5802: LD_EXP 14
5806: ARRAY
5807: ST_TO_ADDR
// for i = 1 to tmp do
5808: LD_ADDR_VAR 0 11
5812: PUSH
5813: DOUBLE
5814: LD_INT 1
5816: DEC
5817: ST_TO_ADDR
5818: LD_VAR 0 9
5822: PUSH
5823: FOR_TO
5824: IFFALSE 5859
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5826: LD_INT 0
5828: PPUSH
5829: LD_INT 15
5831: PPUSH
5832: LD_VAR 0 9
5836: PPUSH
5837: CALL_OW 380
// units := units ^ CreateHuman ;
5841: LD_ADDR_VAR 0 7
5845: PUSH
5846: LD_VAR 0 7
5850: PUSH
5851: CALL_OW 44
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5823
5859: POP
5860: POP
// end ; 2 :
5861: GO 6271
5863: LD_INT 2
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5903
5871: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5872: LD_ADDR_VAR 0 8
5876: PUSH
5877: LD_INT 100
5879: PUSH
5880: LD_INT 150
5882: PUSH
5883: LD_INT 350
5885: PUSH
5886: LD_INT 500
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PUSH
5895: LD_EXP 14
5899: ARRAY
5900: ST_TO_ADDR
// end ; 3 :
5901: GO 6271
5903: LD_INT 3
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 6251
5911: POP
// begin if bonus_num = 1 then
5912: LD_EXP 14
5916: PUSH
5917: LD_INT 1
5919: EQUAL
5920: IFFALSE 5930
// ignore_wave := true ;
5922: LD_ADDR_EXP 15
5926: PUSH
5927: LD_INT 1
5929: ST_TO_ADDR
// if bonus_num = 2 then
5930: LD_EXP 14
5934: PUSH
5935: LD_INT 2
5937: EQUAL
5938: IFFALSE 6058
// begin for i = 1 to 2 do
5940: LD_ADDR_VAR 0 11
5944: PUSH
5945: DOUBLE
5946: LD_INT 1
5948: DEC
5949: ST_TO_ADDR
5950: LD_INT 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6056
// begin uc_nation := nation_arabian ;
5956: LD_ADDR_OWVAR 21
5960: PUSH
5961: LD_INT 2
5963: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5964: LD_ADDR_OWVAR 37
5968: PUSH
5969: LD_INT 14
5971: ST_TO_ADDR
// vc_engine := engine_siberite ;
5972: LD_ADDR_OWVAR 39
5976: PUSH
5977: LD_INT 3
5979: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5980: LD_ADDR_OWVAR 38
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: LD_INT 5
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 2
6000: PPUSH
6001: CALL_OW 12
6005: ARRAY
6006: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6007: LD_ADDR_OWVAR 40
6011: PUSH
6012: LD_INT 28
6014: PUSH
6015: LD_INT 27
6017: PUSH
6018: LD_INT 25
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 3
6031: PPUSH
6032: CALL_OW 12
6036: ARRAY
6037: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6038: LD_ADDR_VAR 0 7
6042: PUSH
6043: LD_VAR 0 7
6047: PUSH
6048: CALL_OW 45
6052: ADD
6053: ST_TO_ADDR
// end ;
6054: GO 5953
6056: POP
6057: POP
// end ; if bonus_num = 3 then
6058: LD_EXP 14
6062: PUSH
6063: LD_INT 3
6065: EQUAL
6066: IFFALSE 6190
// begin for i = 1 to 4 do
6068: LD_ADDR_VAR 0 11
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 4
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6188
// begin uc_nation := nation_arabian ;
6084: LD_ADDR_OWVAR 21
6088: PUSH
6089: LD_INT 2
6091: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6092: LD_ADDR_OWVAR 37
6096: PUSH
6097: LD_INT 14
6099: ST_TO_ADDR
// vc_engine := engine_siberite ;
6100: LD_ADDR_OWVAR 39
6104: PUSH
6105: LD_INT 3
6107: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6108: LD_ADDR_OWVAR 38
6112: PUSH
6113: LD_INT 2
6115: PUSH
6116: LD_INT 5
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 1
6125: PPUSH
6126: LD_INT 2
6128: PPUSH
6129: CALL_OW 12
6133: ARRAY
6134: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6135: LD_ADDR_OWVAR 40
6139: PUSH
6140: LD_INT 28
6142: PUSH
6143: LD_INT 27
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 25
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_INT 4
6163: PPUSH
6164: CALL_OW 12
6168: ARRAY
6169: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6170: LD_ADDR_VAR 0 7
6174: PUSH
6175: LD_VAR 0 7
6179: PUSH
6180: CALL_OW 45
6184: ADD
6185: ST_TO_ADDR
// end ;
6186: GO 6081
6188: POP
6189: POP
// end ; if bonus_num = 4 then
6190: LD_EXP 14
6194: PUSH
6195: LD_INT 4
6197: EQUAL
6198: IFFALSE 6249
// for i = 1 to 3 do
6200: LD_ADDR_VAR 0 11
6204: PUSH
6205: DOUBLE
6206: LD_INT 1
6208: DEC
6209: ST_TO_ADDR
6210: LD_INT 3
6212: PUSH
6213: FOR_TO
6214: IFFALSE 6247
// begin PrepareHuman ( false , 3 , 8 ) ;
6216: LD_INT 0
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 8
6224: PPUSH
6225: CALL_OW 380
// units := units ^ CreateHuman ;
6229: LD_ADDR_VAR 0 7
6233: PUSH
6234: LD_VAR 0 7
6238: PUSH
6239: CALL_OW 44
6243: ADD
6244: ST_TO_ADDR
// end ;
6245: GO 6213
6247: POP
6248: POP
// end ; 4 :
6249: GO 6271
6251: LD_INT 4
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6270
6259: POP
// off := false ; end ;
6260: LD_ADDR_VAR 0 6
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
6268: GO 6271
6270: POP
// DialogueOff ;
6271: CALL_OW 7
// if not off then
6275: LD_VAR 0 6
6279: NOT
6280: IFFALSE 6286
// exit else
6282: GO 6465
6284: GO 6339
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6286: LD_OWVAR 2
6290: PPUSH
6291: LD_INT 12
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 23
6299: PPUSH
6300: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6304: LD_EXP 12
6308: PPUSH
6309: LD_STRING DVr-3
6311: PUSH
6312: LD_STRING DVr-3a
6314: PUSH
6315: LD_STRING DVr-3b
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 1
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: CALL_OW 12
6333: ARRAY
6334: PPUSH
6335: CALL_OW 94
// end ; if units then
6339: LD_VAR 0 7
6343: IFFALSE 6407
// for i in units do
6345: LD_ADDR_VAR 0 11
6349: PUSH
6350: LD_VAR 0 7
6354: PUSH
6355: FOR_IN
6356: IFFALSE 6405
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6358: LD_VAR 0 11
6362: PPUSH
6363: LD_INT 92
6365: PPUSH
6366: LD_INT 49
6368: PPUSH
6369: LD_INT 20
6371: PPUSH
6372: LD_INT 0
6374: PPUSH
6375: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6379: LD_VAR 0 11
6383: PPUSH
6384: CALL_OW 250
6388: PPUSH
6389: LD_VAR 0 11
6393: PPUSH
6394: CALL_OW 251
6398: PPUSH
6399: CALL_OW 494
// end ;
6403: GO 6355
6405: POP
6406: POP
// if crates then
6407: LD_VAR 0 8
6411: IFFALSE 6465
// for i = 1 to ( crates div 50 ) do
6413: LD_ADDR_VAR 0 11
6417: PUSH
6418: DOUBLE
6419: LD_INT 1
6421: DEC
6422: ST_TO_ADDR
6423: LD_VAR 0 8
6427: PUSH
6428: LD_INT 50
6430: DIV
6431: PUSH
6432: FOR_TO
6433: IFFALSE 6463
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6435: LD_INT 5
6437: PPUSH
6438: LD_INT 92
6440: PPUSH
6441: LD_INT 49
6443: PPUSH
6444: LD_INT 30
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 56
// wait ( 0 0$02 ) ;
6454: LD_INT 70
6456: PPUSH
6457: CALL_OW 67
// end ;
6461: GO 6432
6463: POP
6464: POP
// end ; end ;
6465: PPOPN 12
6467: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6468: LD_VAR 0 1
6472: PPUSH
6473: LD_VAR 0 2
6477: PPUSH
6478: LD_VAR 0 3
6482: PPUSH
6483: CALL 22953 0 3
// end ;
6487: PPOPN 3
6489: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL 22961 0 1
// end ;
6499: PPOPN 1
6501: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 255
6511: PUSH
6512: LD_OWVAR 2
6516: EQUAL
6517: IFFALSE 6527
// player_res_art := true ;
6519: LD_ADDR_EXP 8
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// end ;
6527: PPOPN 1
6529: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6530: LD_INT 22
6532: PUSH
6533: LD_OWVAR 2
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 2
6544: PUSH
6545: LD_INT 30
6547: PUSH
6548: LD_INT 7
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 30
6557: PUSH
6558: LD_INT 8
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 30
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 69
6589: IFFALSE 6822
6591: GO 6593
6593: DISABLE
6594: LD_INT 0
6596: PPUSH
6597: PPUSH
// begin enable ;
6598: ENABLE
// xy := FindArtifact ( 2 ) ;
6599: LD_ADDR_VAR 0 1
6603: PUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 469
6611: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6612: LD_ADDR_VAR 0 2
6616: PUSH
6617: LD_INT 22
6619: PUSH
6620: LD_OWVAR 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 8
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 30
6644: PUSH
6645: LD_INT 7
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 30
6654: PUSH
6655: LD_INT 11
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PPUSH
6672: CALL_OW 69
6676: PPUSH
6677: LD_VAR 0 1
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 1
6690: PUSH
6691: LD_INT 2
6693: ARRAY
6694: PPUSH
6695: CALL_OW 73
6699: ST_TO_ADDR
// if player_artifact_ready = false then
6700: LD_EXP 16
6704: PUSH
6705: LD_INT 0
6707: EQUAL
6708: IFFALSE 6822
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 1
6719: PUSH
6720: LD_INT 1
6722: ARRAY
6723: PPUSH
6724: LD_VAR 0 1
6728: PUSH
6729: LD_INT 2
6731: ARRAY
6732: PPUSH
6733: CALL_OW 297
6737: PUSH
6738: LD_INT 6
6740: LESS
6741: IFFALSE 6802
// begin if BuildingStatus ( lab ) = bs_idle then
6743: LD_VAR 0 2
6747: PPUSH
6748: CALL_OW 461
6752: PUSH
6753: LD_INT 2
6755: EQUAL
6756: IFFALSE 6780
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6758: LD_OWVAR 2
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 2
6768: PPUSH
6769: LD_VAR 0 2
6773: PPUSH
6774: CALL_OW 468
6778: GO 6800
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6780: LD_OWVAR 2
6784: PPUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 468
// end else
6800: GO 6822
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6802: LD_OWVAR 2
6806: PPUSH
6807: LD_INT 1
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 2
6817: PPUSH
6818: CALL_OW 468
// end ;
6822: PPOPN 2
6824: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6825: LD_VAR 0 1
6829: PPUSH
6830: CALL_OW 255
6834: PUSH
6835: LD_OWVAR 2
6839: EQUAL
6840: IFFALSE 6866
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6842: LD_OWVAR 2
6846: PPUSH
6847: LD_INT 1
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 468
// Win ;
6862: CALL 4759 0 0
// end ; end ;
6866: PPOPN 1
6868: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6869: LD_ADDR_EXP 17
6873: PUSH
6874: LD_VAR 0 2
6878: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6879: LD_OWVAR 2
6883: PPUSH
6884: LD_INT 1
6886: PPUSH
6887: LD_INT 2
6889: PPUSH
6890: LD_VAR 0 1
6894: PPUSH
6895: CALL_OW 468
// end ;
6899: PPOPN 2
6901: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6902: LD_VAR 0 1
6906: PPUSH
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL 22977 0 2
// end ; end_of_file
6916: PPOPN 2
6918: END
// every 0 0$01 trigger not game_over do
6919: LD_EXP 7
6923: NOT
6924: IFFALSE 6957
6926: GO 6928
6928: DISABLE
// begin enable ;
6929: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6930: LD_ADDR_OWVAR 47
6934: PUSH
6935: LD_STRING #tick
6937: PUSH
6938: LD_OWVAR 1
6942: PUSH
6943: LD_STRING #points
6945: PUSH
6946: LD_EXP 10
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: ST_TO_ADDR
// end ;
6957: END
// every 0 0$01 trigger game_over do
6958: LD_EXP 7
6962: IFFALSE 7021
6964: GO 6966
6966: DISABLE
// begin Wait ( 0 0$02 ) ;
6967: LD_INT 70
6969: PPUSH
6970: CALL_OW 67
// DialogueOn ;
6974: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6978: LD_ADDR_OWVAR 47
6982: PUSH
6983: LD_STRING #game-points
6985: PUSH
6986: LD_OWVAR 78
6990: PUSH
6991: LD_EXP 10
6995: PUSH
6996: LD_STRING #game-time
6998: PUSH
6999: LD_OWVAR 1
7003: PUSH
7004: LD_STRING #game-difficulty
7006: PUSH
7007: LD_OWVAR 67
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; end_of_file
7021: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7022: LD_OWVAR 1
7026: PUSH
7027: LD_INT 52500
7029: LESS
7030: IFFALSE 7054
7032: GO 7034
7034: DISABLE
// begin enable ;
7035: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 5
7041: PPUSH
7042: CALL_OW 12
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL_OW 57
// end ; end_of_file end_of_file
7054: END
// export globalGameSaveCounter ; every 0 0$1 do
7055: GO 7057
7057: DISABLE
// begin enable ;
7058: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7059: LD_STRING updateTimer(
7061: PUSH
7062: LD_OWVAR 1
7066: STR
7067: PUSH
7068: LD_STRING );
7070: STR
7071: PPUSH
7072: CALL_OW 559
// end ;
7076: END
// every 0 0$1 do
7077: GO 7079
7079: DISABLE
// begin globalGameSaveCounter := 0 ;
7080: LD_ADDR_EXP 18
7084: PUSH
7085: LD_INT 0
7087: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7088: LD_STRING setGameSaveCounter(0)
7090: PPUSH
7091: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7095: LD_STRING initStreamRollete();
7097: PPUSH
7098: CALL_OW 559
// InitStreamMode ;
7102: CALL 8428 0 0
// DefineStreamItems ( false ) ;
7106: LD_INT 0
7108: PPUSH
7109: CALL 8892 0 1
// end ;
7113: END
// export function SOS_MapStart ( ) ; begin
7114: LD_INT 0
7116: PPUSH
// if streamModeActive then
7117: LD_EXP 19
7121: IFFALSE 7130
// DefineStreamItems ( true ) ;
7123: LD_INT 1
7125: PPUSH
7126: CALL 8892 0 1
// UpdateLuaVariables ( ) ;
7130: CALL 7147 0 0
// UpdateFactoryWaypoints ( ) ;
7134: CALL 21761 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7138: CALL 22018 0 0
// end ;
7142: LD_VAR 0 1
7146: RET
// function UpdateLuaVariables ( ) ; begin
7147: LD_INT 0
7149: PPUSH
// if globalGameSaveCounter then
7150: LD_EXP 18
7154: IFFALSE 7188
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7156: LD_ADDR_EXP 18
7160: PUSH
7161: LD_EXP 18
7165: PPUSH
7166: CALL 65828 0 1
7170: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7171: LD_STRING setGameSaveCounter(
7173: PUSH
7174: LD_EXP 18
7178: STR
7179: PUSH
7180: LD_STRING )
7182: STR
7183: PPUSH
7184: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7188: LD_STRING setGameDifficulty(
7190: PUSH
7191: LD_OWVAR 67
7195: STR
7196: PUSH
7197: LD_STRING )
7199: STR
7200: PPUSH
7201: CALL_OW 559
// end ;
7205: LD_VAR 0 1
7209: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7210: LD_INT 0
7212: PPUSH
// if p2 = stream_mode then
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 100
7220: EQUAL
7221: IFFALSE 8224
// begin if not StreamModeActive then
7223: LD_EXP 19
7227: NOT
7228: IFFALSE 7238
// StreamModeActive := true ;
7230: LD_ADDR_EXP 19
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// if p3 = 0 then
7238: LD_VAR 0 3
7242: PUSH
7243: LD_INT 0
7245: EQUAL
7246: IFFALSE 7252
// InitStreamMode ;
7248: CALL 8428 0 0
// if p3 = 1 then
7252: LD_VAR 0 3
7256: PUSH
7257: LD_INT 1
7259: EQUAL
7260: IFFALSE 7270
// sRocket := true ;
7262: LD_ADDR_EXP 24
7266: PUSH
7267: LD_INT 1
7269: ST_TO_ADDR
// if p3 = 2 then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 2
7277: EQUAL
7278: IFFALSE 7288
// sSpeed := true ;
7280: LD_ADDR_EXP 23
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// if p3 = 3 then
7288: LD_VAR 0 3
7292: PUSH
7293: LD_INT 3
7295: EQUAL
7296: IFFALSE 7306
// sEngine := true ;
7298: LD_ADDR_EXP 25
7302: PUSH
7303: LD_INT 1
7305: ST_TO_ADDR
// if p3 = 4 then
7306: LD_VAR 0 3
7310: PUSH
7311: LD_INT 4
7313: EQUAL
7314: IFFALSE 7324
// sSpec := true ;
7316: LD_ADDR_EXP 22
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// if p3 = 5 then
7324: LD_VAR 0 3
7328: PUSH
7329: LD_INT 5
7331: EQUAL
7332: IFFALSE 7342
// sLevel := true ;
7334: LD_ADDR_EXP 26
7338: PUSH
7339: LD_INT 1
7341: ST_TO_ADDR
// if p3 = 6 then
7342: LD_VAR 0 3
7346: PUSH
7347: LD_INT 6
7349: EQUAL
7350: IFFALSE 7360
// sArmoury := true ;
7352: LD_ADDR_EXP 27
7356: PUSH
7357: LD_INT 1
7359: ST_TO_ADDR
// if p3 = 7 then
7360: LD_VAR 0 3
7364: PUSH
7365: LD_INT 7
7367: EQUAL
7368: IFFALSE 7378
// sRadar := true ;
7370: LD_ADDR_EXP 28
7374: PUSH
7375: LD_INT 1
7377: ST_TO_ADDR
// if p3 = 8 then
7378: LD_VAR 0 3
7382: PUSH
7383: LD_INT 8
7385: EQUAL
7386: IFFALSE 7396
// sBunker := true ;
7388: LD_ADDR_EXP 29
7392: PUSH
7393: LD_INT 1
7395: ST_TO_ADDR
// if p3 = 9 then
7396: LD_VAR 0 3
7400: PUSH
7401: LD_INT 9
7403: EQUAL
7404: IFFALSE 7414
// sHack := true ;
7406: LD_ADDR_EXP 30
7410: PUSH
7411: LD_INT 1
7413: ST_TO_ADDR
// if p3 = 10 then
7414: LD_VAR 0 3
7418: PUSH
7419: LD_INT 10
7421: EQUAL
7422: IFFALSE 7432
// sFire := true ;
7424: LD_ADDR_EXP 31
7428: PUSH
7429: LD_INT 1
7431: ST_TO_ADDR
// if p3 = 11 then
7432: LD_VAR 0 3
7436: PUSH
7437: LD_INT 11
7439: EQUAL
7440: IFFALSE 7450
// sRefresh := true ;
7442: LD_ADDR_EXP 32
7446: PUSH
7447: LD_INT 1
7449: ST_TO_ADDR
// if p3 = 12 then
7450: LD_VAR 0 3
7454: PUSH
7455: LD_INT 12
7457: EQUAL
7458: IFFALSE 7468
// sExp := true ;
7460: LD_ADDR_EXP 33
7464: PUSH
7465: LD_INT 1
7467: ST_TO_ADDR
// if p3 = 13 then
7468: LD_VAR 0 3
7472: PUSH
7473: LD_INT 13
7475: EQUAL
7476: IFFALSE 7486
// sDepot := true ;
7478: LD_ADDR_EXP 34
7482: PUSH
7483: LD_INT 1
7485: ST_TO_ADDR
// if p3 = 14 then
7486: LD_VAR 0 3
7490: PUSH
7491: LD_INT 14
7493: EQUAL
7494: IFFALSE 7504
// sFlag := true ;
7496: LD_ADDR_EXP 35
7500: PUSH
7501: LD_INT 1
7503: ST_TO_ADDR
// if p3 = 15 then
7504: LD_VAR 0 3
7508: PUSH
7509: LD_INT 15
7511: EQUAL
7512: IFFALSE 7522
// sKamikadze := true ;
7514: LD_ADDR_EXP 43
7518: PUSH
7519: LD_INT 1
7521: ST_TO_ADDR
// if p3 = 16 then
7522: LD_VAR 0 3
7526: PUSH
7527: LD_INT 16
7529: EQUAL
7530: IFFALSE 7540
// sTroll := true ;
7532: LD_ADDR_EXP 44
7536: PUSH
7537: LD_INT 1
7539: ST_TO_ADDR
// if p3 = 17 then
7540: LD_VAR 0 3
7544: PUSH
7545: LD_INT 17
7547: EQUAL
7548: IFFALSE 7558
// sSlow := true ;
7550: LD_ADDR_EXP 45
7554: PUSH
7555: LD_INT 1
7557: ST_TO_ADDR
// if p3 = 18 then
7558: LD_VAR 0 3
7562: PUSH
7563: LD_INT 18
7565: EQUAL
7566: IFFALSE 7576
// sLack := true ;
7568: LD_ADDR_EXP 46
7572: PUSH
7573: LD_INT 1
7575: ST_TO_ADDR
// if p3 = 19 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 19
7583: EQUAL
7584: IFFALSE 7594
// sTank := true ;
7586: LD_ADDR_EXP 48
7590: PUSH
7591: LD_INT 1
7593: ST_TO_ADDR
// if p3 = 20 then
7594: LD_VAR 0 3
7598: PUSH
7599: LD_INT 20
7601: EQUAL
7602: IFFALSE 7612
// sRemote := true ;
7604: LD_ADDR_EXP 49
7608: PUSH
7609: LD_INT 1
7611: ST_TO_ADDR
// if p3 = 21 then
7612: LD_VAR 0 3
7616: PUSH
7617: LD_INT 21
7619: EQUAL
7620: IFFALSE 7630
// sPowell := true ;
7622: LD_ADDR_EXP 50
7626: PUSH
7627: LD_INT 1
7629: ST_TO_ADDR
// if p3 = 22 then
7630: LD_VAR 0 3
7634: PUSH
7635: LD_INT 22
7637: EQUAL
7638: IFFALSE 7648
// sTeleport := true ;
7640: LD_ADDR_EXP 53
7644: PUSH
7645: LD_INT 1
7647: ST_TO_ADDR
// if p3 = 23 then
7648: LD_VAR 0 3
7652: PUSH
7653: LD_INT 23
7655: EQUAL
7656: IFFALSE 7666
// sOilTower := true ;
7658: LD_ADDR_EXP 55
7662: PUSH
7663: LD_INT 1
7665: ST_TO_ADDR
// if p3 = 24 then
7666: LD_VAR 0 3
7670: PUSH
7671: LD_INT 24
7673: EQUAL
7674: IFFALSE 7684
// sShovel := true ;
7676: LD_ADDR_EXP 56
7680: PUSH
7681: LD_INT 1
7683: ST_TO_ADDR
// if p3 = 25 then
7684: LD_VAR 0 3
7688: PUSH
7689: LD_INT 25
7691: EQUAL
7692: IFFALSE 7702
// sSheik := true ;
7694: LD_ADDR_EXP 57
7698: PUSH
7699: LD_INT 1
7701: ST_TO_ADDR
// if p3 = 26 then
7702: LD_VAR 0 3
7706: PUSH
7707: LD_INT 26
7709: EQUAL
7710: IFFALSE 7720
// sEarthquake := true ;
7712: LD_ADDR_EXP 59
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// if p3 = 27 then
7720: LD_VAR 0 3
7724: PUSH
7725: LD_INT 27
7727: EQUAL
7728: IFFALSE 7738
// sAI := true ;
7730: LD_ADDR_EXP 60
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// if p3 = 28 then
7738: LD_VAR 0 3
7742: PUSH
7743: LD_INT 28
7745: EQUAL
7746: IFFALSE 7756
// sCargo := true ;
7748: LD_ADDR_EXP 63
7752: PUSH
7753: LD_INT 1
7755: ST_TO_ADDR
// if p3 = 29 then
7756: LD_VAR 0 3
7760: PUSH
7761: LD_INT 29
7763: EQUAL
7764: IFFALSE 7774
// sDLaser := true ;
7766: LD_ADDR_EXP 64
7770: PUSH
7771: LD_INT 1
7773: ST_TO_ADDR
// if p3 = 30 then
7774: LD_VAR 0 3
7778: PUSH
7779: LD_INT 30
7781: EQUAL
7782: IFFALSE 7792
// sExchange := true ;
7784: LD_ADDR_EXP 65
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// if p3 = 31 then
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 31
7799: EQUAL
7800: IFFALSE 7810
// sFac := true ;
7802: LD_ADDR_EXP 66
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// if p3 = 32 then
7810: LD_VAR 0 3
7814: PUSH
7815: LD_INT 32
7817: EQUAL
7818: IFFALSE 7828
// sPower := true ;
7820: LD_ADDR_EXP 67
7824: PUSH
7825: LD_INT 1
7827: ST_TO_ADDR
// if p3 = 33 then
7828: LD_VAR 0 3
7832: PUSH
7833: LD_INT 33
7835: EQUAL
7836: IFFALSE 7846
// sRandom := true ;
7838: LD_ADDR_EXP 68
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// if p3 = 34 then
7846: LD_VAR 0 3
7850: PUSH
7851: LD_INT 34
7853: EQUAL
7854: IFFALSE 7864
// sShield := true ;
7856: LD_ADDR_EXP 69
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// if p3 = 35 then
7864: LD_VAR 0 3
7868: PUSH
7869: LD_INT 35
7871: EQUAL
7872: IFFALSE 7882
// sTime := true ;
7874: LD_ADDR_EXP 70
7878: PUSH
7879: LD_INT 1
7881: ST_TO_ADDR
// if p3 = 36 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 36
7889: EQUAL
7890: IFFALSE 7900
// sTools := true ;
7892: LD_ADDR_EXP 71
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// if p3 = 101 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 101
7907: EQUAL
7908: IFFALSE 7918
// sSold := true ;
7910: LD_ADDR_EXP 36
7914: PUSH
7915: LD_INT 1
7917: ST_TO_ADDR
// if p3 = 102 then
7918: LD_VAR 0 3
7922: PUSH
7923: LD_INT 102
7925: EQUAL
7926: IFFALSE 7936
// sDiff := true ;
7928: LD_ADDR_EXP 37
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// if p3 = 103 then
7936: LD_VAR 0 3
7940: PUSH
7941: LD_INT 103
7943: EQUAL
7944: IFFALSE 7954
// sFog := true ;
7946: LD_ADDR_EXP 40
7950: PUSH
7951: LD_INT 1
7953: ST_TO_ADDR
// if p3 = 104 then
7954: LD_VAR 0 3
7958: PUSH
7959: LD_INT 104
7961: EQUAL
7962: IFFALSE 7972
// sReset := true ;
7964: LD_ADDR_EXP 41
7968: PUSH
7969: LD_INT 1
7971: ST_TO_ADDR
// if p3 = 105 then
7972: LD_VAR 0 3
7976: PUSH
7977: LD_INT 105
7979: EQUAL
7980: IFFALSE 7990
// sSun := true ;
7982: LD_ADDR_EXP 42
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// if p3 = 106 then
7990: LD_VAR 0 3
7994: PUSH
7995: LD_INT 106
7997: EQUAL
7998: IFFALSE 8008
// sTiger := true ;
8000: LD_ADDR_EXP 38
8004: PUSH
8005: LD_INT 1
8007: ST_TO_ADDR
// if p3 = 107 then
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 107
8015: EQUAL
8016: IFFALSE 8026
// sBomb := true ;
8018: LD_ADDR_EXP 39
8022: PUSH
8023: LD_INT 1
8025: ST_TO_ADDR
// if p3 = 108 then
8026: LD_VAR 0 3
8030: PUSH
8031: LD_INT 108
8033: EQUAL
8034: IFFALSE 8044
// sWound := true ;
8036: LD_ADDR_EXP 47
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// if p3 = 109 then
8044: LD_VAR 0 3
8048: PUSH
8049: LD_INT 109
8051: EQUAL
8052: IFFALSE 8062
// sBetray := true ;
8054: LD_ADDR_EXP 51
8058: PUSH
8059: LD_INT 1
8061: ST_TO_ADDR
// if p3 = 110 then
8062: LD_VAR 0 3
8066: PUSH
8067: LD_INT 110
8069: EQUAL
8070: IFFALSE 8080
// sContamin := true ;
8072: LD_ADDR_EXP 52
8076: PUSH
8077: LD_INT 1
8079: ST_TO_ADDR
// if p3 = 111 then
8080: LD_VAR 0 3
8084: PUSH
8085: LD_INT 111
8087: EQUAL
8088: IFFALSE 8098
// sOil := true ;
8090: LD_ADDR_EXP 54
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// if p3 = 112 then
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 112
8105: EQUAL
8106: IFFALSE 8116
// sStu := true ;
8108: LD_ADDR_EXP 58
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// if p3 = 113 then
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 113
8123: EQUAL
8124: IFFALSE 8134
// sBazooka := true ;
8126: LD_ADDR_EXP 61
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// if p3 = 114 then
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 114
8141: EQUAL
8142: IFFALSE 8152
// sMortar := true ;
8144: LD_ADDR_EXP 62
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// if p3 = 115 then
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 115
8159: EQUAL
8160: IFFALSE 8170
// sRanger := true ;
8162: LD_ADDR_EXP 72
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if p3 = 116 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 116
8177: EQUAL
8178: IFFALSE 8188
// sComputer := true ;
8180: LD_ADDR_EXP 73
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 117 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 117
8195: EQUAL
8196: IFFALSE 8206
// s30 := true ;
8198: LD_ADDR_EXP 74
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 118 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 118
8213: EQUAL
8214: IFFALSE 8224
// s60 := true ;
8216: LD_ADDR_EXP 75
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// end ; if p2 = hack_mode then
8224: LD_VAR 0 2
8228: PUSH
8229: LD_INT 101
8231: EQUAL
8232: IFFALSE 8360
// begin case p3 of 1 :
8234: LD_VAR 0 3
8238: PUSH
8239: LD_INT 1
8241: DOUBLE
8242: EQUAL
8243: IFTRUE 8247
8245: GO 8254
8247: POP
// hHackUnlimitedResources ; 2 :
8248: CALL 20507 0 0
8252: GO 8360
8254: LD_INT 2
8256: DOUBLE
8257: EQUAL
8258: IFTRUE 8262
8260: GO 8269
8262: POP
// hHackSetLevel10 ; 3 :
8263: CALL 20640 0 0
8267: GO 8360
8269: LD_INT 3
8271: DOUBLE
8272: EQUAL
8273: IFTRUE 8277
8275: GO 8284
8277: POP
// hHackSetLevel10YourUnits ; 4 :
8278: CALL 20725 0 0
8282: GO 8360
8284: LD_INT 4
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8299
8292: POP
// hHackInvincible ; 5 :
8293: CALL 21173 0 0
8297: GO 8360
8299: LD_INT 5
8301: DOUBLE
8302: EQUAL
8303: IFTRUE 8307
8305: GO 8314
8307: POP
// hHackInvisible ; 6 :
8308: CALL 21284 0 0
8312: GO 8360
8314: LD_INT 6
8316: DOUBLE
8317: EQUAL
8318: IFTRUE 8322
8320: GO 8329
8322: POP
// hHackChangeYourSide ; 7 :
8323: CALL 21341 0 0
8327: GO 8360
8329: LD_INT 7
8331: DOUBLE
8332: EQUAL
8333: IFTRUE 8337
8335: GO 8344
8337: POP
// hHackChangeUnitSide ; 8 :
8338: CALL 21383 0 0
8342: GO 8360
8344: LD_INT 8
8346: DOUBLE
8347: EQUAL
8348: IFTRUE 8352
8350: GO 8359
8352: POP
// hHackFog ; end ;
8353: CALL 21484 0 0
8357: GO 8360
8359: POP
// end ; if p2 = game_save_mode then
8360: LD_VAR 0 2
8364: PUSH
8365: LD_INT 102
8367: EQUAL
8368: IFFALSE 8423
// begin if p3 = 1 then
8370: LD_VAR 0 3
8374: PUSH
8375: LD_INT 1
8377: EQUAL
8378: IFFALSE 8390
// globalGameSaveCounter := p4 ;
8380: LD_ADDR_EXP 18
8384: PUSH
8385: LD_VAR 0 4
8389: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8390: LD_VAR 0 3
8394: PUSH
8395: LD_INT 2
8397: EQUAL
8398: PUSH
8399: LD_EXP 18
8403: AND
8404: IFFALSE 8423
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8406: LD_STRING setGameSaveCounter(
8408: PUSH
8409: LD_EXP 18
8413: STR
8414: PUSH
8415: LD_STRING )
8417: STR
8418: PPUSH
8419: CALL_OW 559
// end ; end ;
8423: LD_VAR 0 7
8427: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8428: LD_INT 0
8430: PPUSH
// streamModeActive := false ;
8431: LD_ADDR_EXP 19
8435: PUSH
8436: LD_INT 0
8438: ST_TO_ADDR
// normalCounter := 36 ;
8439: LD_ADDR_EXP 20
8443: PUSH
8444: LD_INT 36
8446: ST_TO_ADDR
// hardcoreCounter := 18 ;
8447: LD_ADDR_EXP 21
8451: PUSH
8452: LD_INT 18
8454: ST_TO_ADDR
// sRocket := false ;
8455: LD_ADDR_EXP 24
8459: PUSH
8460: LD_INT 0
8462: ST_TO_ADDR
// sSpeed := false ;
8463: LD_ADDR_EXP 23
8467: PUSH
8468: LD_INT 0
8470: ST_TO_ADDR
// sEngine := false ;
8471: LD_ADDR_EXP 25
8475: PUSH
8476: LD_INT 0
8478: ST_TO_ADDR
// sSpec := false ;
8479: LD_ADDR_EXP 22
8483: PUSH
8484: LD_INT 0
8486: ST_TO_ADDR
// sLevel := false ;
8487: LD_ADDR_EXP 26
8491: PUSH
8492: LD_INT 0
8494: ST_TO_ADDR
// sArmoury := false ;
8495: LD_ADDR_EXP 27
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// sRadar := false ;
8503: LD_ADDR_EXP 28
8507: PUSH
8508: LD_INT 0
8510: ST_TO_ADDR
// sBunker := false ;
8511: LD_ADDR_EXP 29
8515: PUSH
8516: LD_INT 0
8518: ST_TO_ADDR
// sHack := false ;
8519: LD_ADDR_EXP 30
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// sFire := false ;
8527: LD_ADDR_EXP 31
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// sRefresh := false ;
8535: LD_ADDR_EXP 32
8539: PUSH
8540: LD_INT 0
8542: ST_TO_ADDR
// sExp := false ;
8543: LD_ADDR_EXP 33
8547: PUSH
8548: LD_INT 0
8550: ST_TO_ADDR
// sDepot := false ;
8551: LD_ADDR_EXP 34
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// sFlag := false ;
8559: LD_ADDR_EXP 35
8563: PUSH
8564: LD_INT 0
8566: ST_TO_ADDR
// sKamikadze := false ;
8567: LD_ADDR_EXP 43
8571: PUSH
8572: LD_INT 0
8574: ST_TO_ADDR
// sTroll := false ;
8575: LD_ADDR_EXP 44
8579: PUSH
8580: LD_INT 0
8582: ST_TO_ADDR
// sSlow := false ;
8583: LD_ADDR_EXP 45
8587: PUSH
8588: LD_INT 0
8590: ST_TO_ADDR
// sLack := false ;
8591: LD_ADDR_EXP 46
8595: PUSH
8596: LD_INT 0
8598: ST_TO_ADDR
// sTank := false ;
8599: LD_ADDR_EXP 48
8603: PUSH
8604: LD_INT 0
8606: ST_TO_ADDR
// sRemote := false ;
8607: LD_ADDR_EXP 49
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// sPowell := false ;
8615: LD_ADDR_EXP 50
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// sTeleport := false ;
8623: LD_ADDR_EXP 53
8627: PUSH
8628: LD_INT 0
8630: ST_TO_ADDR
// sOilTower := false ;
8631: LD_ADDR_EXP 55
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// sShovel := false ;
8639: LD_ADDR_EXP 56
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// sSheik := false ;
8647: LD_ADDR_EXP 57
8651: PUSH
8652: LD_INT 0
8654: ST_TO_ADDR
// sEarthquake := false ;
8655: LD_ADDR_EXP 59
8659: PUSH
8660: LD_INT 0
8662: ST_TO_ADDR
// sAI := false ;
8663: LD_ADDR_EXP 60
8667: PUSH
8668: LD_INT 0
8670: ST_TO_ADDR
// sCargo := false ;
8671: LD_ADDR_EXP 63
8675: PUSH
8676: LD_INT 0
8678: ST_TO_ADDR
// sDLaser := false ;
8679: LD_ADDR_EXP 64
8683: PUSH
8684: LD_INT 0
8686: ST_TO_ADDR
// sExchange := false ;
8687: LD_ADDR_EXP 65
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// sFac := false ;
8695: LD_ADDR_EXP 66
8699: PUSH
8700: LD_INT 0
8702: ST_TO_ADDR
// sPower := false ;
8703: LD_ADDR_EXP 67
8707: PUSH
8708: LD_INT 0
8710: ST_TO_ADDR
// sRandom := false ;
8711: LD_ADDR_EXP 68
8715: PUSH
8716: LD_INT 0
8718: ST_TO_ADDR
// sShield := false ;
8719: LD_ADDR_EXP 69
8723: PUSH
8724: LD_INT 0
8726: ST_TO_ADDR
// sTime := false ;
8727: LD_ADDR_EXP 70
8731: PUSH
8732: LD_INT 0
8734: ST_TO_ADDR
// sTools := false ;
8735: LD_ADDR_EXP 71
8739: PUSH
8740: LD_INT 0
8742: ST_TO_ADDR
// sSold := false ;
8743: LD_ADDR_EXP 36
8747: PUSH
8748: LD_INT 0
8750: ST_TO_ADDR
// sDiff := false ;
8751: LD_ADDR_EXP 37
8755: PUSH
8756: LD_INT 0
8758: ST_TO_ADDR
// sFog := false ;
8759: LD_ADDR_EXP 40
8763: PUSH
8764: LD_INT 0
8766: ST_TO_ADDR
// sReset := false ;
8767: LD_ADDR_EXP 41
8771: PUSH
8772: LD_INT 0
8774: ST_TO_ADDR
// sSun := false ;
8775: LD_ADDR_EXP 42
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// sTiger := false ;
8783: LD_ADDR_EXP 38
8787: PUSH
8788: LD_INT 0
8790: ST_TO_ADDR
// sBomb := false ;
8791: LD_ADDR_EXP 39
8795: PUSH
8796: LD_INT 0
8798: ST_TO_ADDR
// sWound := false ;
8799: LD_ADDR_EXP 47
8803: PUSH
8804: LD_INT 0
8806: ST_TO_ADDR
// sBetray := false ;
8807: LD_ADDR_EXP 51
8811: PUSH
8812: LD_INT 0
8814: ST_TO_ADDR
// sContamin := false ;
8815: LD_ADDR_EXP 52
8819: PUSH
8820: LD_INT 0
8822: ST_TO_ADDR
// sOil := false ;
8823: LD_ADDR_EXP 54
8827: PUSH
8828: LD_INT 0
8830: ST_TO_ADDR
// sStu := false ;
8831: LD_ADDR_EXP 58
8835: PUSH
8836: LD_INT 0
8838: ST_TO_ADDR
// sBazooka := false ;
8839: LD_ADDR_EXP 61
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// sMortar := false ;
8847: LD_ADDR_EXP 62
8851: PUSH
8852: LD_INT 0
8854: ST_TO_ADDR
// sRanger := false ;
8855: LD_ADDR_EXP 72
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// sComputer := false ;
8863: LD_ADDR_EXP 73
8867: PUSH
8868: LD_INT 0
8870: ST_TO_ADDR
// s30 := false ;
8871: LD_ADDR_EXP 74
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// s60 := false ;
8879: LD_ADDR_EXP 75
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// end ;
8887: LD_VAR 0 1
8891: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8892: LD_INT 0
8894: PPUSH
8895: PPUSH
8896: PPUSH
8897: PPUSH
8898: PPUSH
8899: PPUSH
8900: PPUSH
// result := [ ] ;
8901: LD_ADDR_VAR 0 2
8905: PUSH
8906: EMPTY
8907: ST_TO_ADDR
// if campaign_id = 1 then
8908: LD_OWVAR 69
8912: PUSH
8913: LD_INT 1
8915: EQUAL
8916: IFFALSE 12082
// begin case mission_number of 1 :
8918: LD_OWVAR 70
8922: PUSH
8923: LD_INT 1
8925: DOUBLE
8926: EQUAL
8927: IFTRUE 8931
8929: GO 9007
8931: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8932: LD_ADDR_VAR 0 2
8936: PUSH
8937: LD_INT 2
8939: PUSH
8940: LD_INT 4
8942: PUSH
8943: LD_INT 11
8945: PUSH
8946: LD_INT 12
8948: PUSH
8949: LD_INT 15
8951: PUSH
8952: LD_INT 16
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_INT 23
8960: PUSH
8961: LD_INT 26
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 101
8977: PUSH
8978: LD_INT 102
8980: PUSH
8981: LD_INT 106
8983: PUSH
8984: LD_INT 116
8986: PUSH
8987: LD_INT 117
8989: PUSH
8990: LD_INT 118
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: ST_TO_ADDR
9005: GO 12080
9007: LD_INT 2
9009: DOUBLE
9010: EQUAL
9011: IFTRUE 9015
9013: GO 9099
9015: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9016: LD_ADDR_VAR 0 2
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: LD_INT 4
9026: PUSH
9027: LD_INT 11
9029: PUSH
9030: LD_INT 12
9032: PUSH
9033: LD_INT 15
9035: PUSH
9036: LD_INT 16
9038: PUSH
9039: LD_INT 22
9041: PUSH
9042: LD_INT 23
9044: PUSH
9045: LD_INT 26
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 101
9061: PUSH
9062: LD_INT 102
9064: PUSH
9065: LD_INT 105
9067: PUSH
9068: LD_INT 106
9070: PUSH
9071: LD_INT 108
9073: PUSH
9074: LD_INT 116
9076: PUSH
9077: LD_INT 117
9079: PUSH
9080: LD_INT 118
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: ST_TO_ADDR
9097: GO 12080
9099: LD_INT 3
9101: DOUBLE
9102: EQUAL
9103: IFTRUE 9107
9105: GO 9195
9107: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9108: LD_ADDR_VAR 0 2
9112: PUSH
9113: LD_INT 2
9115: PUSH
9116: LD_INT 4
9118: PUSH
9119: LD_INT 5
9121: PUSH
9122: LD_INT 11
9124: PUSH
9125: LD_INT 12
9127: PUSH
9128: LD_INT 15
9130: PUSH
9131: LD_INT 16
9133: PUSH
9134: LD_INT 22
9136: PUSH
9137: LD_INT 26
9139: PUSH
9140: LD_INT 36
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 101
9157: PUSH
9158: LD_INT 102
9160: PUSH
9161: LD_INT 105
9163: PUSH
9164: LD_INT 106
9166: PUSH
9167: LD_INT 108
9169: PUSH
9170: LD_INT 116
9172: PUSH
9173: LD_INT 117
9175: PUSH
9176: LD_INT 118
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: ST_TO_ADDR
9193: GO 12080
9195: LD_INT 4
9197: DOUBLE
9198: EQUAL
9199: IFTRUE 9203
9201: GO 9299
9203: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: LD_INT 2
9211: PUSH
9212: LD_INT 4
9214: PUSH
9215: LD_INT 5
9217: PUSH
9218: LD_INT 8
9220: PUSH
9221: LD_INT 11
9223: PUSH
9224: LD_INT 12
9226: PUSH
9227: LD_INT 15
9229: PUSH
9230: LD_INT 16
9232: PUSH
9233: LD_INT 22
9235: PUSH
9236: LD_INT 23
9238: PUSH
9239: LD_INT 26
9241: PUSH
9242: LD_INT 36
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 101
9261: PUSH
9262: LD_INT 102
9264: PUSH
9265: LD_INT 105
9267: PUSH
9268: LD_INT 106
9270: PUSH
9271: LD_INT 108
9273: PUSH
9274: LD_INT 116
9276: PUSH
9277: LD_INT 117
9279: PUSH
9280: LD_INT 118
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: ST_TO_ADDR
9297: GO 12080
9299: LD_INT 5
9301: DOUBLE
9302: EQUAL
9303: IFTRUE 9307
9305: GO 9419
9307: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9308: LD_ADDR_VAR 0 2
9312: PUSH
9313: LD_INT 2
9315: PUSH
9316: LD_INT 4
9318: PUSH
9319: LD_INT 5
9321: PUSH
9322: LD_INT 6
9324: PUSH
9325: LD_INT 8
9327: PUSH
9328: LD_INT 11
9330: PUSH
9331: LD_INT 12
9333: PUSH
9334: LD_INT 15
9336: PUSH
9337: LD_INT 16
9339: PUSH
9340: LD_INT 22
9342: PUSH
9343: LD_INT 23
9345: PUSH
9346: LD_INT 25
9348: PUSH
9349: LD_INT 26
9351: PUSH
9352: LD_INT 36
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 101
9373: PUSH
9374: LD_INT 102
9376: PUSH
9377: LD_INT 105
9379: PUSH
9380: LD_INT 106
9382: PUSH
9383: LD_INT 108
9385: PUSH
9386: LD_INT 109
9388: PUSH
9389: LD_INT 112
9391: PUSH
9392: LD_INT 116
9394: PUSH
9395: LD_INT 117
9397: PUSH
9398: LD_INT 118
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: ST_TO_ADDR
9417: GO 12080
9419: LD_INT 6
9421: DOUBLE
9422: EQUAL
9423: IFTRUE 9427
9425: GO 9559
9427: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9428: LD_ADDR_VAR 0 2
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 4
9438: PUSH
9439: LD_INT 5
9441: PUSH
9442: LD_INT 6
9444: PUSH
9445: LD_INT 8
9447: PUSH
9448: LD_INT 11
9450: PUSH
9451: LD_INT 12
9453: PUSH
9454: LD_INT 15
9456: PUSH
9457: LD_INT 16
9459: PUSH
9460: LD_INT 20
9462: PUSH
9463: LD_INT 21
9465: PUSH
9466: LD_INT 22
9468: PUSH
9469: LD_INT 23
9471: PUSH
9472: LD_INT 25
9474: PUSH
9475: LD_INT 26
9477: PUSH
9478: LD_INT 30
9480: PUSH
9481: LD_INT 31
9483: PUSH
9484: LD_INT 32
9486: PUSH
9487: LD_INT 36
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 101
9513: PUSH
9514: LD_INT 102
9516: PUSH
9517: LD_INT 105
9519: PUSH
9520: LD_INT 106
9522: PUSH
9523: LD_INT 108
9525: PUSH
9526: LD_INT 109
9528: PUSH
9529: LD_INT 112
9531: PUSH
9532: LD_INT 116
9534: PUSH
9535: LD_INT 117
9537: PUSH
9538: LD_INT 118
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: ST_TO_ADDR
9557: GO 12080
9559: LD_INT 7
9561: DOUBLE
9562: EQUAL
9563: IFTRUE 9567
9565: GO 9679
9567: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9568: LD_ADDR_VAR 0 2
9572: PUSH
9573: LD_INT 2
9575: PUSH
9576: LD_INT 4
9578: PUSH
9579: LD_INT 5
9581: PUSH
9582: LD_INT 7
9584: PUSH
9585: LD_INT 11
9587: PUSH
9588: LD_INT 12
9590: PUSH
9591: LD_INT 15
9593: PUSH
9594: LD_INT 16
9596: PUSH
9597: LD_INT 20
9599: PUSH
9600: LD_INT 21
9602: PUSH
9603: LD_INT 22
9605: PUSH
9606: LD_INT 23
9608: PUSH
9609: LD_INT 25
9611: PUSH
9612: LD_INT 26
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 101
9633: PUSH
9634: LD_INT 102
9636: PUSH
9637: LD_INT 103
9639: PUSH
9640: LD_INT 105
9642: PUSH
9643: LD_INT 106
9645: PUSH
9646: LD_INT 108
9648: PUSH
9649: LD_INT 112
9651: PUSH
9652: LD_INT 116
9654: PUSH
9655: LD_INT 117
9657: PUSH
9658: LD_INT 118
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: ST_TO_ADDR
9677: GO 12080
9679: LD_INT 8
9681: DOUBLE
9682: EQUAL
9683: IFTRUE 9687
9685: GO 9827
9687: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9688: LD_ADDR_VAR 0 2
9692: PUSH
9693: LD_INT 2
9695: PUSH
9696: LD_INT 4
9698: PUSH
9699: LD_INT 5
9701: PUSH
9702: LD_INT 6
9704: PUSH
9705: LD_INT 7
9707: PUSH
9708: LD_INT 8
9710: PUSH
9711: LD_INT 11
9713: PUSH
9714: LD_INT 12
9716: PUSH
9717: LD_INT 15
9719: PUSH
9720: LD_INT 16
9722: PUSH
9723: LD_INT 20
9725: PUSH
9726: LD_INT 21
9728: PUSH
9729: LD_INT 22
9731: PUSH
9732: LD_INT 23
9734: PUSH
9735: LD_INT 25
9737: PUSH
9738: LD_INT 26
9740: PUSH
9741: LD_INT 30
9743: PUSH
9744: LD_INT 31
9746: PUSH
9747: LD_INT 32
9749: PUSH
9750: LD_INT 36
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 101
9777: PUSH
9778: LD_INT 102
9780: PUSH
9781: LD_INT 103
9783: PUSH
9784: LD_INT 105
9786: PUSH
9787: LD_INT 106
9789: PUSH
9790: LD_INT 108
9792: PUSH
9793: LD_INT 109
9795: PUSH
9796: LD_INT 112
9798: PUSH
9799: LD_INT 116
9801: PUSH
9802: LD_INT 117
9804: PUSH
9805: LD_INT 118
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: ST_TO_ADDR
9825: GO 12080
9827: LD_INT 9
9829: DOUBLE
9830: EQUAL
9831: IFTRUE 9835
9833: GO 9983
9835: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: LD_INT 4
9846: PUSH
9847: LD_INT 5
9849: PUSH
9850: LD_INT 6
9852: PUSH
9853: LD_INT 7
9855: PUSH
9856: LD_INT 8
9858: PUSH
9859: LD_INT 11
9861: PUSH
9862: LD_INT 12
9864: PUSH
9865: LD_INT 15
9867: PUSH
9868: LD_INT 16
9870: PUSH
9871: LD_INT 20
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_INT 23
9882: PUSH
9883: LD_INT 25
9885: PUSH
9886: LD_INT 26
9888: PUSH
9889: LD_INT 28
9891: PUSH
9892: LD_INT 30
9894: PUSH
9895: LD_INT 31
9897: PUSH
9898: LD_INT 32
9900: PUSH
9901: LD_INT 36
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 101
9929: PUSH
9930: LD_INT 102
9932: PUSH
9933: LD_INT 103
9935: PUSH
9936: LD_INT 105
9938: PUSH
9939: LD_INT 106
9941: PUSH
9942: LD_INT 108
9944: PUSH
9945: LD_INT 109
9947: PUSH
9948: LD_INT 112
9950: PUSH
9951: LD_INT 114
9953: PUSH
9954: LD_INT 116
9956: PUSH
9957: LD_INT 117
9959: PUSH
9960: LD_INT 118
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: ST_TO_ADDR
9981: GO 12080
9983: LD_INT 10
9985: DOUBLE
9986: EQUAL
9987: IFTRUE 9991
9989: GO 10187
9991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9992: LD_ADDR_VAR 0 2
9996: PUSH
9997: LD_INT 2
9999: PUSH
10000: LD_INT 4
10002: PUSH
10003: LD_INT 5
10005: PUSH
10006: LD_INT 6
10008: PUSH
10009: LD_INT 7
10011: PUSH
10012: LD_INT 8
10014: PUSH
10015: LD_INT 9
10017: PUSH
10018: LD_INT 10
10020: PUSH
10021: LD_INT 11
10023: PUSH
10024: LD_INT 12
10026: PUSH
10027: LD_INT 13
10029: PUSH
10030: LD_INT 14
10032: PUSH
10033: LD_INT 15
10035: PUSH
10036: LD_INT 16
10038: PUSH
10039: LD_INT 17
10041: PUSH
10042: LD_INT 18
10044: PUSH
10045: LD_INT 19
10047: PUSH
10048: LD_INT 20
10050: PUSH
10051: LD_INT 21
10053: PUSH
10054: LD_INT 22
10056: PUSH
10057: LD_INT 23
10059: PUSH
10060: LD_INT 24
10062: PUSH
10063: LD_INT 25
10065: PUSH
10066: LD_INT 26
10068: PUSH
10069: LD_INT 28
10071: PUSH
10072: LD_INT 30
10074: PUSH
10075: LD_INT 31
10077: PUSH
10078: LD_INT 32
10080: PUSH
10081: LD_INT 36
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 101
10117: PUSH
10118: LD_INT 102
10120: PUSH
10121: LD_INT 103
10123: PUSH
10124: LD_INT 104
10126: PUSH
10127: LD_INT 105
10129: PUSH
10130: LD_INT 106
10132: PUSH
10133: LD_INT 107
10135: PUSH
10136: LD_INT 108
10138: PUSH
10139: LD_INT 109
10141: PUSH
10142: LD_INT 110
10144: PUSH
10145: LD_INT 111
10147: PUSH
10148: LD_INT 112
10150: PUSH
10151: LD_INT 114
10153: PUSH
10154: LD_INT 116
10156: PUSH
10157: LD_INT 117
10159: PUSH
10160: LD_INT 118
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: ST_TO_ADDR
10185: GO 12080
10187: LD_INT 11
10189: DOUBLE
10190: EQUAL
10191: IFTRUE 10195
10193: GO 10399
10195: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10196: LD_ADDR_VAR 0 2
10200: PUSH
10201: LD_INT 2
10203: PUSH
10204: LD_INT 3
10206: PUSH
10207: LD_INT 4
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: LD_INT 6
10215: PUSH
10216: LD_INT 7
10218: PUSH
10219: LD_INT 8
10221: PUSH
10222: LD_INT 9
10224: PUSH
10225: LD_INT 10
10227: PUSH
10228: LD_INT 11
10230: PUSH
10231: LD_INT 12
10233: PUSH
10234: LD_INT 13
10236: PUSH
10237: LD_INT 14
10239: PUSH
10240: LD_INT 15
10242: PUSH
10243: LD_INT 16
10245: PUSH
10246: LD_INT 17
10248: PUSH
10249: LD_INT 18
10251: PUSH
10252: LD_INT 19
10254: PUSH
10255: LD_INT 20
10257: PUSH
10258: LD_INT 21
10260: PUSH
10261: LD_INT 22
10263: PUSH
10264: LD_INT 23
10266: PUSH
10267: LD_INT 24
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 26
10275: PUSH
10276: LD_INT 28
10278: PUSH
10279: LD_INT 30
10281: PUSH
10282: LD_INT 31
10284: PUSH
10285: LD_INT 32
10287: PUSH
10288: LD_INT 34
10290: PUSH
10291: LD_INT 36
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 101
10329: PUSH
10330: LD_INT 102
10332: PUSH
10333: LD_INT 103
10335: PUSH
10336: LD_INT 104
10338: PUSH
10339: LD_INT 105
10341: PUSH
10342: LD_INT 106
10344: PUSH
10345: LD_INT 107
10347: PUSH
10348: LD_INT 108
10350: PUSH
10351: LD_INT 109
10353: PUSH
10354: LD_INT 110
10356: PUSH
10357: LD_INT 111
10359: PUSH
10360: LD_INT 112
10362: PUSH
10363: LD_INT 114
10365: PUSH
10366: LD_INT 116
10368: PUSH
10369: LD_INT 117
10371: PUSH
10372: LD_INT 118
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: ST_TO_ADDR
10397: GO 12080
10399: LD_INT 12
10401: DOUBLE
10402: EQUAL
10403: IFTRUE 10407
10405: GO 10627
10407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10408: LD_ADDR_VAR 0 2
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: LD_INT 2
10418: PUSH
10419: LD_INT 3
10421: PUSH
10422: LD_INT 4
10424: PUSH
10425: LD_INT 5
10427: PUSH
10428: LD_INT 6
10430: PUSH
10431: LD_INT 7
10433: PUSH
10434: LD_INT 8
10436: PUSH
10437: LD_INT 9
10439: PUSH
10440: LD_INT 10
10442: PUSH
10443: LD_INT 11
10445: PUSH
10446: LD_INT 12
10448: PUSH
10449: LD_INT 13
10451: PUSH
10452: LD_INT 14
10454: PUSH
10455: LD_INT 15
10457: PUSH
10458: LD_INT 16
10460: PUSH
10461: LD_INT 17
10463: PUSH
10464: LD_INT 18
10466: PUSH
10467: LD_INT 19
10469: PUSH
10470: LD_INT 20
10472: PUSH
10473: LD_INT 21
10475: PUSH
10476: LD_INT 22
10478: PUSH
10479: LD_INT 23
10481: PUSH
10482: LD_INT 24
10484: PUSH
10485: LD_INT 25
10487: PUSH
10488: LD_INT 26
10490: PUSH
10491: LD_INT 27
10493: PUSH
10494: LD_INT 28
10496: PUSH
10497: LD_INT 30
10499: PUSH
10500: LD_INT 31
10502: PUSH
10503: LD_INT 32
10505: PUSH
10506: LD_INT 33
10508: PUSH
10509: LD_INT 34
10511: PUSH
10512: LD_INT 36
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: PUSH
10551: LD_INT 101
10553: PUSH
10554: LD_INT 102
10556: PUSH
10557: LD_INT 103
10559: PUSH
10560: LD_INT 104
10562: PUSH
10563: LD_INT 105
10565: PUSH
10566: LD_INT 106
10568: PUSH
10569: LD_INT 107
10571: PUSH
10572: LD_INT 108
10574: PUSH
10575: LD_INT 109
10577: PUSH
10578: LD_INT 110
10580: PUSH
10581: LD_INT 111
10583: PUSH
10584: LD_INT 112
10586: PUSH
10587: LD_INT 113
10589: PUSH
10590: LD_INT 114
10592: PUSH
10593: LD_INT 116
10595: PUSH
10596: LD_INT 117
10598: PUSH
10599: LD_INT 118
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: ST_TO_ADDR
10625: GO 12080
10627: LD_INT 13
10629: DOUBLE
10630: EQUAL
10631: IFTRUE 10635
10633: GO 10843
10635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10636: LD_ADDR_VAR 0 2
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: LD_INT 3
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: LD_INT 5
10655: PUSH
10656: LD_INT 8
10658: PUSH
10659: LD_INT 9
10661: PUSH
10662: LD_INT 10
10664: PUSH
10665: LD_INT 11
10667: PUSH
10668: LD_INT 12
10670: PUSH
10671: LD_INT 14
10673: PUSH
10674: LD_INT 15
10676: PUSH
10677: LD_INT 16
10679: PUSH
10680: LD_INT 17
10682: PUSH
10683: LD_INT 18
10685: PUSH
10686: LD_INT 19
10688: PUSH
10689: LD_INT 20
10691: PUSH
10692: LD_INT 21
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 23
10700: PUSH
10701: LD_INT 24
10703: PUSH
10704: LD_INT 25
10706: PUSH
10707: LD_INT 26
10709: PUSH
10710: LD_INT 27
10712: PUSH
10713: LD_INT 28
10715: PUSH
10716: LD_INT 30
10718: PUSH
10719: LD_INT 31
10721: PUSH
10722: LD_INT 32
10724: PUSH
10725: LD_INT 33
10727: PUSH
10728: LD_INT 34
10730: PUSH
10731: LD_INT 36
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 101
10769: PUSH
10770: LD_INT 102
10772: PUSH
10773: LD_INT 103
10775: PUSH
10776: LD_INT 104
10778: PUSH
10779: LD_INT 105
10781: PUSH
10782: LD_INT 106
10784: PUSH
10785: LD_INT 107
10787: PUSH
10788: LD_INT 108
10790: PUSH
10791: LD_INT 109
10793: PUSH
10794: LD_INT 110
10796: PUSH
10797: LD_INT 111
10799: PUSH
10800: LD_INT 112
10802: PUSH
10803: LD_INT 113
10805: PUSH
10806: LD_INT 114
10808: PUSH
10809: LD_INT 116
10811: PUSH
10812: LD_INT 117
10814: PUSH
10815: LD_INT 118
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: ST_TO_ADDR
10841: GO 12080
10843: LD_INT 14
10845: DOUBLE
10846: EQUAL
10847: IFTRUE 10851
10849: GO 11075
10851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10852: LD_ADDR_VAR 0 2
10856: PUSH
10857: LD_INT 1
10859: PUSH
10860: LD_INT 2
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: LD_INT 4
10868: PUSH
10869: LD_INT 5
10871: PUSH
10872: LD_INT 6
10874: PUSH
10875: LD_INT 7
10877: PUSH
10878: LD_INT 8
10880: PUSH
10881: LD_INT 9
10883: PUSH
10884: LD_INT 10
10886: PUSH
10887: LD_INT 11
10889: PUSH
10890: LD_INT 12
10892: PUSH
10893: LD_INT 13
10895: PUSH
10896: LD_INT 14
10898: PUSH
10899: LD_INT 15
10901: PUSH
10902: LD_INT 16
10904: PUSH
10905: LD_INT 17
10907: PUSH
10908: LD_INT 18
10910: PUSH
10911: LD_INT 19
10913: PUSH
10914: LD_INT 20
10916: PUSH
10917: LD_INT 21
10919: PUSH
10920: LD_INT 22
10922: PUSH
10923: LD_INT 23
10925: PUSH
10926: LD_INT 24
10928: PUSH
10929: LD_INT 25
10931: PUSH
10932: LD_INT 26
10934: PUSH
10935: LD_INT 27
10937: PUSH
10938: LD_INT 28
10940: PUSH
10941: LD_INT 29
10943: PUSH
10944: LD_INT 30
10946: PUSH
10947: LD_INT 31
10949: PUSH
10950: LD_INT 32
10952: PUSH
10953: LD_INT 33
10955: PUSH
10956: LD_INT 34
10958: PUSH
10959: LD_INT 36
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 101
11001: PUSH
11002: LD_INT 102
11004: PUSH
11005: LD_INT 103
11007: PUSH
11008: LD_INT 104
11010: PUSH
11011: LD_INT 105
11013: PUSH
11014: LD_INT 106
11016: PUSH
11017: LD_INT 107
11019: PUSH
11020: LD_INT 108
11022: PUSH
11023: LD_INT 109
11025: PUSH
11026: LD_INT 110
11028: PUSH
11029: LD_INT 111
11031: PUSH
11032: LD_INT 112
11034: PUSH
11035: LD_INT 113
11037: PUSH
11038: LD_INT 114
11040: PUSH
11041: LD_INT 116
11043: PUSH
11044: LD_INT 117
11046: PUSH
11047: LD_INT 118
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: ST_TO_ADDR
11073: GO 12080
11075: LD_INT 15
11077: DOUBLE
11078: EQUAL
11079: IFTRUE 11083
11081: GO 11307
11083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11084: LD_ADDR_VAR 0 2
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: LD_INT 2
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: LD_INT 4
11100: PUSH
11101: LD_INT 5
11103: PUSH
11104: LD_INT 6
11106: PUSH
11107: LD_INT 7
11109: PUSH
11110: LD_INT 8
11112: PUSH
11113: LD_INT 9
11115: PUSH
11116: LD_INT 10
11118: PUSH
11119: LD_INT 11
11121: PUSH
11122: LD_INT 12
11124: PUSH
11125: LD_INT 13
11127: PUSH
11128: LD_INT 14
11130: PUSH
11131: LD_INT 15
11133: PUSH
11134: LD_INT 16
11136: PUSH
11137: LD_INT 17
11139: PUSH
11140: LD_INT 18
11142: PUSH
11143: LD_INT 19
11145: PUSH
11146: LD_INT 20
11148: PUSH
11149: LD_INT 21
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_INT 23
11157: PUSH
11158: LD_INT 24
11160: PUSH
11161: LD_INT 25
11163: PUSH
11164: LD_INT 26
11166: PUSH
11167: LD_INT 27
11169: PUSH
11170: LD_INT 28
11172: PUSH
11173: LD_INT 29
11175: PUSH
11176: LD_INT 30
11178: PUSH
11179: LD_INT 31
11181: PUSH
11182: LD_INT 32
11184: PUSH
11185: LD_INT 33
11187: PUSH
11188: LD_INT 34
11190: PUSH
11191: LD_INT 36
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 101
11233: PUSH
11234: LD_INT 102
11236: PUSH
11237: LD_INT 103
11239: PUSH
11240: LD_INT 104
11242: PUSH
11243: LD_INT 105
11245: PUSH
11246: LD_INT 106
11248: PUSH
11249: LD_INT 107
11251: PUSH
11252: LD_INT 108
11254: PUSH
11255: LD_INT 109
11257: PUSH
11258: LD_INT 110
11260: PUSH
11261: LD_INT 111
11263: PUSH
11264: LD_INT 112
11266: PUSH
11267: LD_INT 113
11269: PUSH
11270: LD_INT 114
11272: PUSH
11273: LD_INT 116
11275: PUSH
11276: LD_INT 117
11278: PUSH
11279: LD_INT 118
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: ST_TO_ADDR
11305: GO 12080
11307: LD_INT 16
11309: DOUBLE
11310: EQUAL
11311: IFTRUE 11315
11313: GO 11451
11315: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11316: LD_ADDR_VAR 0 2
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 4
11326: PUSH
11327: LD_INT 5
11329: PUSH
11330: LD_INT 7
11332: PUSH
11333: LD_INT 11
11335: PUSH
11336: LD_INT 12
11338: PUSH
11339: LD_INT 15
11341: PUSH
11342: LD_INT 16
11344: PUSH
11345: LD_INT 20
11347: PUSH
11348: LD_INT 21
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_INT 23
11356: PUSH
11357: LD_INT 25
11359: PUSH
11360: LD_INT 26
11362: PUSH
11363: LD_INT 30
11365: PUSH
11366: LD_INT 31
11368: PUSH
11369: LD_INT 32
11371: PUSH
11372: LD_INT 33
11374: PUSH
11375: LD_INT 34
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 101
11401: PUSH
11402: LD_INT 102
11404: PUSH
11405: LD_INT 103
11407: PUSH
11408: LD_INT 106
11410: PUSH
11411: LD_INT 108
11413: PUSH
11414: LD_INT 112
11416: PUSH
11417: LD_INT 113
11419: PUSH
11420: LD_INT 114
11422: PUSH
11423: LD_INT 116
11425: PUSH
11426: LD_INT 117
11428: PUSH
11429: LD_INT 118
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: ST_TO_ADDR
11449: GO 12080
11451: LD_INT 17
11453: DOUBLE
11454: EQUAL
11455: IFTRUE 11459
11457: GO 11683
11459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11460: LD_ADDR_VAR 0 2
11464: PUSH
11465: LD_INT 1
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 4
11476: PUSH
11477: LD_INT 5
11479: PUSH
11480: LD_INT 6
11482: PUSH
11483: LD_INT 7
11485: PUSH
11486: LD_INT 8
11488: PUSH
11489: LD_INT 9
11491: PUSH
11492: LD_INT 10
11494: PUSH
11495: LD_INT 11
11497: PUSH
11498: LD_INT 12
11500: PUSH
11501: LD_INT 13
11503: PUSH
11504: LD_INT 14
11506: PUSH
11507: LD_INT 15
11509: PUSH
11510: LD_INT 16
11512: PUSH
11513: LD_INT 17
11515: PUSH
11516: LD_INT 18
11518: PUSH
11519: LD_INT 19
11521: PUSH
11522: LD_INT 20
11524: PUSH
11525: LD_INT 21
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_INT 23
11533: PUSH
11534: LD_INT 24
11536: PUSH
11537: LD_INT 25
11539: PUSH
11540: LD_INT 26
11542: PUSH
11543: LD_INT 27
11545: PUSH
11546: LD_INT 28
11548: PUSH
11549: LD_INT 29
11551: PUSH
11552: LD_INT 30
11554: PUSH
11555: LD_INT 31
11557: PUSH
11558: LD_INT 32
11560: PUSH
11561: LD_INT 33
11563: PUSH
11564: LD_INT 34
11566: PUSH
11567: LD_INT 36
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 101
11609: PUSH
11610: LD_INT 102
11612: PUSH
11613: LD_INT 103
11615: PUSH
11616: LD_INT 104
11618: PUSH
11619: LD_INT 105
11621: PUSH
11622: LD_INT 106
11624: PUSH
11625: LD_INT 107
11627: PUSH
11628: LD_INT 108
11630: PUSH
11631: LD_INT 109
11633: PUSH
11634: LD_INT 110
11636: PUSH
11637: LD_INT 111
11639: PUSH
11640: LD_INT 112
11642: PUSH
11643: LD_INT 113
11645: PUSH
11646: LD_INT 114
11648: PUSH
11649: LD_INT 116
11651: PUSH
11652: LD_INT 117
11654: PUSH
11655: LD_INT 118
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: ST_TO_ADDR
11681: GO 12080
11683: LD_INT 18
11685: DOUBLE
11686: EQUAL
11687: IFTRUE 11691
11689: GO 11839
11691: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11692: LD_ADDR_VAR 0 2
11696: PUSH
11697: LD_INT 2
11699: PUSH
11700: LD_INT 4
11702: PUSH
11703: LD_INT 5
11705: PUSH
11706: LD_INT 7
11708: PUSH
11709: LD_INT 11
11711: PUSH
11712: LD_INT 12
11714: PUSH
11715: LD_INT 15
11717: PUSH
11718: LD_INT 16
11720: PUSH
11721: LD_INT 20
11723: PUSH
11724: LD_INT 21
11726: PUSH
11727: LD_INT 22
11729: PUSH
11730: LD_INT 23
11732: PUSH
11733: LD_INT 25
11735: PUSH
11736: LD_INT 26
11738: PUSH
11739: LD_INT 30
11741: PUSH
11742: LD_INT 31
11744: PUSH
11745: LD_INT 32
11747: PUSH
11748: LD_INT 33
11750: PUSH
11751: LD_INT 34
11753: PUSH
11754: LD_INT 35
11756: PUSH
11757: LD_INT 36
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 101
11785: PUSH
11786: LD_INT 102
11788: PUSH
11789: LD_INT 103
11791: PUSH
11792: LD_INT 106
11794: PUSH
11795: LD_INT 108
11797: PUSH
11798: LD_INT 112
11800: PUSH
11801: LD_INT 113
11803: PUSH
11804: LD_INT 114
11806: PUSH
11807: LD_INT 115
11809: PUSH
11810: LD_INT 116
11812: PUSH
11813: LD_INT 117
11815: PUSH
11816: LD_INT 118
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: ST_TO_ADDR
11837: GO 12080
11839: LD_INT 19
11841: DOUBLE
11842: EQUAL
11843: IFTRUE 11847
11845: GO 12079
11847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11848: LD_ADDR_VAR 0 2
11852: PUSH
11853: LD_INT 1
11855: PUSH
11856: LD_INT 2
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: LD_INT 4
11864: PUSH
11865: LD_INT 5
11867: PUSH
11868: LD_INT 6
11870: PUSH
11871: LD_INT 7
11873: PUSH
11874: LD_INT 8
11876: PUSH
11877: LD_INT 9
11879: PUSH
11880: LD_INT 10
11882: PUSH
11883: LD_INT 11
11885: PUSH
11886: LD_INT 12
11888: PUSH
11889: LD_INT 13
11891: PUSH
11892: LD_INT 14
11894: PUSH
11895: LD_INT 15
11897: PUSH
11898: LD_INT 16
11900: PUSH
11901: LD_INT 17
11903: PUSH
11904: LD_INT 18
11906: PUSH
11907: LD_INT 19
11909: PUSH
11910: LD_INT 20
11912: PUSH
11913: LD_INT 21
11915: PUSH
11916: LD_INT 22
11918: PUSH
11919: LD_INT 23
11921: PUSH
11922: LD_INT 24
11924: PUSH
11925: LD_INT 25
11927: PUSH
11928: LD_INT 26
11930: PUSH
11931: LD_INT 27
11933: PUSH
11934: LD_INT 28
11936: PUSH
11937: LD_INT 29
11939: PUSH
11940: LD_INT 30
11942: PUSH
11943: LD_INT 31
11945: PUSH
11946: LD_INT 32
11948: PUSH
11949: LD_INT 33
11951: PUSH
11952: LD_INT 34
11954: PUSH
11955: LD_INT 35
11957: PUSH
11958: LD_INT 36
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 101
12001: PUSH
12002: LD_INT 102
12004: PUSH
12005: LD_INT 103
12007: PUSH
12008: LD_INT 104
12010: PUSH
12011: LD_INT 105
12013: PUSH
12014: LD_INT 106
12016: PUSH
12017: LD_INT 107
12019: PUSH
12020: LD_INT 108
12022: PUSH
12023: LD_INT 109
12025: PUSH
12026: LD_INT 110
12028: PUSH
12029: LD_INT 111
12031: PUSH
12032: LD_INT 112
12034: PUSH
12035: LD_INT 113
12037: PUSH
12038: LD_INT 114
12040: PUSH
12041: LD_INT 115
12043: PUSH
12044: LD_INT 116
12046: PUSH
12047: LD_INT 117
12049: PUSH
12050: LD_INT 118
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: ST_TO_ADDR
12077: GO 12080
12079: POP
// end else
12080: GO 12311
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12082: LD_ADDR_VAR 0 2
12086: PUSH
12087: LD_INT 1
12089: PUSH
12090: LD_INT 2
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: LD_INT 4
12098: PUSH
12099: LD_INT 5
12101: PUSH
12102: LD_INT 6
12104: PUSH
12105: LD_INT 7
12107: PUSH
12108: LD_INT 8
12110: PUSH
12111: LD_INT 9
12113: PUSH
12114: LD_INT 10
12116: PUSH
12117: LD_INT 11
12119: PUSH
12120: LD_INT 12
12122: PUSH
12123: LD_INT 13
12125: PUSH
12126: LD_INT 14
12128: PUSH
12129: LD_INT 15
12131: PUSH
12132: LD_INT 16
12134: PUSH
12135: LD_INT 17
12137: PUSH
12138: LD_INT 18
12140: PUSH
12141: LD_INT 19
12143: PUSH
12144: LD_INT 20
12146: PUSH
12147: LD_INT 21
12149: PUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 23
12155: PUSH
12156: LD_INT 24
12158: PUSH
12159: LD_INT 25
12161: PUSH
12162: LD_INT 26
12164: PUSH
12165: LD_INT 27
12167: PUSH
12168: LD_INT 28
12170: PUSH
12171: LD_INT 29
12173: PUSH
12174: LD_INT 30
12176: PUSH
12177: LD_INT 31
12179: PUSH
12180: LD_INT 32
12182: PUSH
12183: LD_INT 33
12185: PUSH
12186: LD_INT 34
12188: PUSH
12189: LD_INT 35
12191: PUSH
12192: LD_INT 36
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 101
12235: PUSH
12236: LD_INT 102
12238: PUSH
12239: LD_INT 103
12241: PUSH
12242: LD_INT 104
12244: PUSH
12245: LD_INT 105
12247: PUSH
12248: LD_INT 106
12250: PUSH
12251: LD_INT 107
12253: PUSH
12254: LD_INT 108
12256: PUSH
12257: LD_INT 109
12259: PUSH
12260: LD_INT 110
12262: PUSH
12263: LD_INT 111
12265: PUSH
12266: LD_INT 112
12268: PUSH
12269: LD_INT 113
12271: PUSH
12272: LD_INT 114
12274: PUSH
12275: LD_INT 115
12277: PUSH
12278: LD_INT 116
12280: PUSH
12281: LD_INT 117
12283: PUSH
12284: LD_INT 118
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: ST_TO_ADDR
// if result then
12311: LD_VAR 0 2
12315: IFFALSE 13101
// begin normal :=  ;
12317: LD_ADDR_VAR 0 5
12321: PUSH
12322: LD_STRING 
12324: ST_TO_ADDR
// hardcore :=  ;
12325: LD_ADDR_VAR 0 6
12329: PUSH
12330: LD_STRING 
12332: ST_TO_ADDR
// active :=  ;
12333: LD_ADDR_VAR 0 7
12337: PUSH
12338: LD_STRING 
12340: ST_TO_ADDR
// for i = 1 to normalCounter do
12341: LD_ADDR_VAR 0 8
12345: PUSH
12346: DOUBLE
12347: LD_INT 1
12349: DEC
12350: ST_TO_ADDR
12351: LD_EXP 20
12355: PUSH
12356: FOR_TO
12357: IFFALSE 12458
// begin tmp := 0 ;
12359: LD_ADDR_VAR 0 3
12363: PUSH
12364: LD_STRING 0
12366: ST_TO_ADDR
// if result [ 1 ] then
12367: LD_VAR 0 2
12371: PUSH
12372: LD_INT 1
12374: ARRAY
12375: IFFALSE 12440
// if result [ 1 ] [ 1 ] = i then
12377: LD_VAR 0 2
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PUSH
12386: LD_INT 1
12388: ARRAY
12389: PUSH
12390: LD_VAR 0 8
12394: EQUAL
12395: IFFALSE 12440
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: LD_VAR 0 2
12406: PPUSH
12407: LD_INT 1
12409: PPUSH
12410: LD_VAR 0 2
12414: PUSH
12415: LD_INT 1
12417: ARRAY
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 3
12426: PPUSH
12427: CALL_OW 1
12431: ST_TO_ADDR
// tmp := 1 ;
12432: LD_ADDR_VAR 0 3
12436: PUSH
12437: LD_STRING 1
12439: ST_TO_ADDR
// end ; normal := normal & tmp ;
12440: LD_ADDR_VAR 0 5
12444: PUSH
12445: LD_VAR 0 5
12449: PUSH
12450: LD_VAR 0 3
12454: STR
12455: ST_TO_ADDR
// end ;
12456: GO 12356
12458: POP
12459: POP
// for i = 1 to hardcoreCounter do
12460: LD_ADDR_VAR 0 8
12464: PUSH
12465: DOUBLE
12466: LD_INT 1
12468: DEC
12469: ST_TO_ADDR
12470: LD_EXP 21
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12581
// begin tmp := 0 ;
12478: LD_ADDR_VAR 0 3
12482: PUSH
12483: LD_STRING 0
12485: ST_TO_ADDR
// if result [ 2 ] then
12486: LD_VAR 0 2
12490: PUSH
12491: LD_INT 2
12493: ARRAY
12494: IFFALSE 12563
// if result [ 2 ] [ 1 ] = 100 + i then
12496: LD_VAR 0 2
12500: PUSH
12501: LD_INT 2
12503: ARRAY
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PUSH
12509: LD_INT 100
12511: PUSH
12512: LD_VAR 0 8
12516: PLUS
12517: EQUAL
12518: IFFALSE 12563
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12520: LD_ADDR_VAR 0 2
12524: PUSH
12525: LD_VAR 0 2
12529: PPUSH
12530: LD_INT 2
12532: PPUSH
12533: LD_VAR 0 2
12537: PUSH
12538: LD_INT 2
12540: ARRAY
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 3
12549: PPUSH
12550: CALL_OW 1
12554: ST_TO_ADDR
// tmp := 1 ;
12555: LD_ADDR_VAR 0 3
12559: PUSH
12560: LD_STRING 1
12562: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12563: LD_ADDR_VAR 0 6
12567: PUSH
12568: LD_VAR 0 6
12572: PUSH
12573: LD_VAR 0 3
12577: STR
12578: ST_TO_ADDR
// end ;
12579: GO 12475
12581: POP
12582: POP
// if isGameLoad then
12583: LD_VAR 0 1
12587: IFFALSE 13062
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12589: LD_ADDR_VAR 0 4
12593: PUSH
12594: LD_EXP 24
12598: PUSH
12599: LD_EXP 23
12603: PUSH
12604: LD_EXP 25
12608: PUSH
12609: LD_EXP 22
12613: PUSH
12614: LD_EXP 26
12618: PUSH
12619: LD_EXP 27
12623: PUSH
12624: LD_EXP 28
12628: PUSH
12629: LD_EXP 29
12633: PUSH
12634: LD_EXP 30
12638: PUSH
12639: LD_EXP 31
12643: PUSH
12644: LD_EXP 32
12648: PUSH
12649: LD_EXP 33
12653: PUSH
12654: LD_EXP 34
12658: PUSH
12659: LD_EXP 35
12663: PUSH
12664: LD_EXP 43
12668: PUSH
12669: LD_EXP 44
12673: PUSH
12674: LD_EXP 45
12678: PUSH
12679: LD_EXP 46
12683: PUSH
12684: LD_EXP 48
12688: PUSH
12689: LD_EXP 49
12693: PUSH
12694: LD_EXP 50
12698: PUSH
12699: LD_EXP 53
12703: PUSH
12704: LD_EXP 55
12708: PUSH
12709: LD_EXP 56
12713: PUSH
12714: LD_EXP 57
12718: PUSH
12719: LD_EXP 59
12723: PUSH
12724: LD_EXP 60
12728: PUSH
12729: LD_EXP 63
12733: PUSH
12734: LD_EXP 64
12738: PUSH
12739: LD_EXP 65
12743: PUSH
12744: LD_EXP 66
12748: PUSH
12749: LD_EXP 67
12753: PUSH
12754: LD_EXP 68
12758: PUSH
12759: LD_EXP 69
12763: PUSH
12764: LD_EXP 70
12768: PUSH
12769: LD_EXP 71
12773: PUSH
12774: LD_EXP 36
12778: PUSH
12779: LD_EXP 37
12783: PUSH
12784: LD_EXP 40
12788: PUSH
12789: LD_EXP 41
12793: PUSH
12794: LD_EXP 42
12798: PUSH
12799: LD_EXP 38
12803: PUSH
12804: LD_EXP 39
12808: PUSH
12809: LD_EXP 47
12813: PUSH
12814: LD_EXP 51
12818: PUSH
12819: LD_EXP 52
12823: PUSH
12824: LD_EXP 54
12828: PUSH
12829: LD_EXP 58
12833: PUSH
12834: LD_EXP 61
12838: PUSH
12839: LD_EXP 62
12843: PUSH
12844: LD_EXP 72
12848: PUSH
12849: LD_EXP 73
12853: PUSH
12854: LD_EXP 74
12858: PUSH
12859: LD_EXP 75
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: ST_TO_ADDR
// tmp :=  ;
12920: LD_ADDR_VAR 0 3
12924: PUSH
12925: LD_STRING 
12927: ST_TO_ADDR
// for i = 1 to normalCounter do
12928: LD_ADDR_VAR 0 8
12932: PUSH
12933: DOUBLE
12934: LD_INT 1
12936: DEC
12937: ST_TO_ADDR
12938: LD_EXP 20
12942: PUSH
12943: FOR_TO
12944: IFFALSE 12980
// begin if flags [ i ] then
12946: LD_VAR 0 4
12950: PUSH
12951: LD_VAR 0 8
12955: ARRAY
12956: IFFALSE 12978
// tmp := tmp & i & ; ;
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_VAR 0 3
12967: PUSH
12968: LD_VAR 0 8
12972: STR
12973: PUSH
12974: LD_STRING ;
12976: STR
12977: ST_TO_ADDR
// end ;
12978: GO 12943
12980: POP
12981: POP
// for i = 1 to hardcoreCounter do
12982: LD_ADDR_VAR 0 8
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_EXP 21
12996: PUSH
12997: FOR_TO
12998: IFFALSE 13044
// begin if flags [ normalCounter + i ] then
13000: LD_VAR 0 4
13004: PUSH
13005: LD_EXP 20
13009: PUSH
13010: LD_VAR 0 8
13014: PLUS
13015: ARRAY
13016: IFFALSE 13042
// tmp := tmp & ( 100 + i ) & ; ;
13018: LD_ADDR_VAR 0 3
13022: PUSH
13023: LD_VAR 0 3
13027: PUSH
13028: LD_INT 100
13030: PUSH
13031: LD_VAR 0 8
13035: PLUS
13036: STR
13037: PUSH
13038: LD_STRING ;
13040: STR
13041: ST_TO_ADDR
// end ;
13042: GO 12997
13044: POP
13045: POP
// if tmp then
13046: LD_VAR 0 3
13050: IFFALSE 13062
// active := tmp ;
13052: LD_ADDR_VAR 0 7
13056: PUSH
13057: LD_VAR 0 3
13061: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13062: LD_STRING getStreamItemsFromMission("
13064: PUSH
13065: LD_VAR 0 5
13069: STR
13070: PUSH
13071: LD_STRING ","
13073: STR
13074: PUSH
13075: LD_VAR 0 6
13079: STR
13080: PUSH
13081: LD_STRING ","
13083: STR
13084: PUSH
13085: LD_VAR 0 7
13089: STR
13090: PUSH
13091: LD_STRING ")
13093: STR
13094: PPUSH
13095: CALL_OW 559
// end else
13099: GO 13108
// ToLua ( getStreamItemsFromMission("","","") ) ;
13101: LD_STRING getStreamItemsFromMission("","","")
13103: PPUSH
13104: CALL_OW 559
// end ;
13108: LD_VAR 0 2
13112: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13113: LD_EXP 19
13117: PUSH
13118: LD_EXP 24
13122: AND
13123: IFFALSE 13247
13125: GO 13127
13127: DISABLE
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
// begin enable ;
13132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13133: LD_ADDR_VAR 0 2
13137: PUSH
13138: LD_INT 22
13140: PUSH
13141: LD_OWVAR 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 2
13152: PUSH
13153: LD_INT 34
13155: PUSH
13156: LD_INT 7
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 34
13165: PUSH
13166: LD_INT 45
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 34
13175: PUSH
13176: LD_INT 28
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 34
13185: PUSH
13186: LD_INT 47
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PPUSH
13204: CALL_OW 69
13208: ST_TO_ADDR
// if not tmp then
13209: LD_VAR 0 2
13213: NOT
13214: IFFALSE 13218
// exit ;
13216: GO 13247
// for i in tmp do
13218: LD_ADDR_VAR 0 1
13222: PUSH
13223: LD_VAR 0 2
13227: PUSH
13228: FOR_IN
13229: IFFALSE 13245
// begin SetLives ( i , 0 ) ;
13231: LD_VAR 0 1
13235: PPUSH
13236: LD_INT 0
13238: PPUSH
13239: CALL_OW 234
// end ;
13243: GO 13228
13245: POP
13246: POP
// end ;
13247: PPOPN 2
13249: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13250: LD_EXP 19
13254: PUSH
13255: LD_EXP 25
13259: AND
13260: IFFALSE 13344
13262: GO 13264
13264: DISABLE
13265: LD_INT 0
13267: PPUSH
13268: PPUSH
// begin enable ;
13269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: LD_INT 22
13277: PUSH
13278: LD_OWVAR 2
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 32
13289: PUSH
13290: LD_INT 3
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: ST_TO_ADDR
// if not tmp then
13306: LD_VAR 0 2
13310: NOT
13311: IFFALSE 13315
// exit ;
13313: GO 13344
// for i in tmp do
13315: LD_ADDR_VAR 0 1
13319: PUSH
13320: LD_VAR 0 2
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13342
// begin SetLives ( i , 0 ) ;
13328: LD_VAR 0 1
13332: PPUSH
13333: LD_INT 0
13335: PPUSH
13336: CALL_OW 234
// end ;
13340: GO 13325
13342: POP
13343: POP
// end ;
13344: PPOPN 2
13346: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13347: LD_EXP 19
13351: PUSH
13352: LD_EXP 22
13356: AND
13357: IFFALSE 13450
13359: GO 13361
13361: DISABLE
13362: LD_INT 0
13364: PPUSH
// begin enable ;
13365: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13366: LD_ADDR_VAR 0 1
13370: PUSH
13371: LD_INT 22
13373: PUSH
13374: LD_OWVAR 2
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 25
13388: PUSH
13389: LD_INT 5
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 9
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 8
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PPUSH
13426: CALL_OW 69
13430: PUSH
13431: FOR_IN
13432: IFFALSE 13448
// begin SetClass ( i , 1 ) ;
13434: LD_VAR 0 1
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 336
// end ;
13446: GO 13431
13448: POP
13449: POP
// end ;
13450: PPOPN 1
13452: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13453: LD_EXP 19
13457: PUSH
13458: LD_EXP 23
13462: AND
13463: PUSH
13464: LD_OWVAR 65
13468: PUSH
13469: LD_INT 7
13471: LESS
13472: AND
13473: IFFALSE 13487
13475: GO 13477
13477: DISABLE
// begin enable ;
13478: ENABLE
// game_speed := 7 ;
13479: LD_ADDR_OWVAR 65
13483: PUSH
13484: LD_INT 7
13486: ST_TO_ADDR
// end ;
13487: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13488: LD_EXP 19
13492: PUSH
13493: LD_EXP 26
13497: AND
13498: IFFALSE 13700
13500: GO 13502
13502: DISABLE
13503: LD_INT 0
13505: PPUSH
13506: PPUSH
13507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13508: LD_ADDR_VAR 0 3
13512: PUSH
13513: LD_INT 81
13515: PUSH
13516: LD_OWVAR 2
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 21
13527: PUSH
13528: LD_INT 1
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 69
13543: ST_TO_ADDR
// if not tmp then
13544: LD_VAR 0 3
13548: NOT
13549: IFFALSE 13553
// exit ;
13551: GO 13700
// if tmp > 5 then
13553: LD_VAR 0 3
13557: PUSH
13558: LD_INT 5
13560: GREATER
13561: IFFALSE 13573
// k := 5 else
13563: LD_ADDR_VAR 0 2
13567: PUSH
13568: LD_INT 5
13570: ST_TO_ADDR
13571: GO 13583
// k := tmp ;
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_VAR 0 3
13582: ST_TO_ADDR
// for i := 1 to k do
13583: LD_ADDR_VAR 0 1
13587: PUSH
13588: DOUBLE
13589: LD_INT 1
13591: DEC
13592: ST_TO_ADDR
13593: LD_VAR 0 2
13597: PUSH
13598: FOR_TO
13599: IFFALSE 13698
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13601: LD_VAR 0 3
13605: PUSH
13606: LD_VAR 0 1
13610: ARRAY
13611: PPUSH
13612: LD_VAR 0 1
13616: PUSH
13617: LD_INT 4
13619: MOD
13620: PUSH
13621: LD_INT 1
13623: PLUS
13624: PPUSH
13625: CALL_OW 259
13629: PUSH
13630: LD_INT 10
13632: LESS
13633: IFFALSE 13696
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13635: LD_VAR 0 3
13639: PUSH
13640: LD_VAR 0 1
13644: ARRAY
13645: PPUSH
13646: LD_VAR 0 1
13650: PUSH
13651: LD_INT 4
13653: MOD
13654: PUSH
13655: LD_INT 1
13657: PLUS
13658: PPUSH
13659: LD_VAR 0 3
13663: PUSH
13664: LD_VAR 0 1
13668: ARRAY
13669: PPUSH
13670: LD_VAR 0 1
13674: PUSH
13675: LD_INT 4
13677: MOD
13678: PUSH
13679: LD_INT 1
13681: PLUS
13682: PPUSH
13683: CALL_OW 259
13687: PUSH
13688: LD_INT 1
13690: PLUS
13691: PPUSH
13692: CALL_OW 237
13696: GO 13598
13698: POP
13699: POP
// end ;
13700: PPOPN 3
13702: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13703: LD_EXP 19
13707: PUSH
13708: LD_EXP 27
13712: AND
13713: IFFALSE 13733
13715: GO 13717
13717: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13718: LD_INT 4
13720: PPUSH
13721: LD_OWVAR 2
13725: PPUSH
13726: LD_INT 0
13728: PPUSH
13729: CALL_OW 324
13733: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13734: LD_EXP 19
13738: PUSH
13739: LD_EXP 56
13743: AND
13744: IFFALSE 13764
13746: GO 13748
13748: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13749: LD_INT 19
13751: PPUSH
13752: LD_OWVAR 2
13756: PPUSH
13757: LD_INT 0
13759: PPUSH
13760: CALL_OW 324
13764: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13765: LD_EXP 19
13769: PUSH
13770: LD_EXP 28
13774: AND
13775: IFFALSE 13877
13777: GO 13779
13779: DISABLE
13780: LD_INT 0
13782: PPUSH
13783: PPUSH
// begin enable ;
13784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13785: LD_ADDR_VAR 0 2
13789: PUSH
13790: LD_INT 22
13792: PUSH
13793: LD_OWVAR 2
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 2
13804: PUSH
13805: LD_INT 34
13807: PUSH
13808: LD_INT 11
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 34
13817: PUSH
13818: LD_INT 30
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PPUSH
13834: CALL_OW 69
13838: ST_TO_ADDR
// if not tmp then
13839: LD_VAR 0 2
13843: NOT
13844: IFFALSE 13848
// exit ;
13846: GO 13877
// for i in tmp do
13848: LD_ADDR_VAR 0 1
13852: PUSH
13853: LD_VAR 0 2
13857: PUSH
13858: FOR_IN
13859: IFFALSE 13875
// begin SetLives ( i , 0 ) ;
13861: LD_VAR 0 1
13865: PPUSH
13866: LD_INT 0
13868: PPUSH
13869: CALL_OW 234
// end ;
13873: GO 13858
13875: POP
13876: POP
// end ;
13877: PPOPN 2
13879: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13880: LD_EXP 19
13884: PUSH
13885: LD_EXP 29
13889: AND
13890: IFFALSE 13910
13892: GO 13894
13894: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13895: LD_INT 32
13897: PPUSH
13898: LD_OWVAR 2
13902: PPUSH
13903: LD_INT 0
13905: PPUSH
13906: CALL_OW 324
13910: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13911: LD_EXP 19
13915: PUSH
13916: LD_EXP 30
13920: AND
13921: IFFALSE 14102
13923: GO 13925
13925: DISABLE
13926: LD_INT 0
13928: PPUSH
13929: PPUSH
13930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13931: LD_ADDR_VAR 0 2
13935: PUSH
13936: LD_INT 22
13938: PUSH
13939: LD_OWVAR 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 33
13950: PUSH
13951: LD_INT 3
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 69
13966: ST_TO_ADDR
// if not tmp then
13967: LD_VAR 0 2
13971: NOT
13972: IFFALSE 13976
// exit ;
13974: GO 14102
// side := 0 ;
13976: LD_ADDR_VAR 0 3
13980: PUSH
13981: LD_INT 0
13983: ST_TO_ADDR
// for i := 1 to 8 do
13984: LD_ADDR_VAR 0 1
13988: PUSH
13989: DOUBLE
13990: LD_INT 1
13992: DEC
13993: ST_TO_ADDR
13994: LD_INT 8
13996: PUSH
13997: FOR_TO
13998: IFFALSE 14046
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14000: LD_OWVAR 2
14004: PUSH
14005: LD_VAR 0 1
14009: NONEQUAL
14010: PUSH
14011: LD_OWVAR 2
14015: PPUSH
14016: LD_VAR 0 1
14020: PPUSH
14021: CALL_OW 81
14025: PUSH
14026: LD_INT 2
14028: EQUAL
14029: AND
14030: IFFALSE 14044
// begin side := i ;
14032: LD_ADDR_VAR 0 3
14036: PUSH
14037: LD_VAR 0 1
14041: ST_TO_ADDR
// break ;
14042: GO 14046
// end ;
14044: GO 13997
14046: POP
14047: POP
// if not side then
14048: LD_VAR 0 3
14052: NOT
14053: IFFALSE 14057
// exit ;
14055: GO 14102
// for i := 1 to tmp do
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: DOUBLE
14063: LD_INT 1
14065: DEC
14066: ST_TO_ADDR
14067: LD_VAR 0 2
14071: PUSH
14072: FOR_TO
14073: IFFALSE 14100
// if Prob ( 60 ) then
14075: LD_INT 60
14077: PPUSH
14078: CALL_OW 13
14082: IFFALSE 14098
// SetSide ( i , side ) ;
14084: LD_VAR 0 1
14088: PPUSH
14089: LD_VAR 0 3
14093: PPUSH
14094: CALL_OW 235
14098: GO 14072
14100: POP
14101: POP
// end ;
14102: PPOPN 3
14104: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14105: LD_EXP 19
14109: PUSH
14110: LD_EXP 32
14114: AND
14115: IFFALSE 14234
14117: GO 14119
14119: DISABLE
14120: LD_INT 0
14122: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14123: LD_ADDR_VAR 0 1
14127: PUSH
14128: LD_INT 22
14130: PUSH
14131: LD_OWVAR 2
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 21
14142: PUSH
14143: LD_INT 1
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 23
14155: PUSH
14156: LD_INT 0
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: PPUSH
14172: CALL_OW 69
14176: PUSH
14177: FOR_IN
14178: IFFALSE 14232
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 257
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: LD_INT 2
14195: PUSH
14196: LD_INT 3
14198: PUSH
14199: LD_INT 4
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: IN
14208: IFFALSE 14230
// SetClass ( un , rand ( 1 , 4 ) ) ;
14210: LD_VAR 0 1
14214: PPUSH
14215: LD_INT 1
14217: PPUSH
14218: LD_INT 4
14220: PPUSH
14221: CALL_OW 12
14225: PPUSH
14226: CALL_OW 336
14230: GO 14177
14232: POP
14233: POP
// end ;
14234: PPOPN 1
14236: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14237: LD_EXP 19
14241: PUSH
14242: LD_EXP 31
14246: AND
14247: IFFALSE 14326
14249: GO 14251
14251: DISABLE
14252: LD_INT 0
14254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14255: LD_ADDR_VAR 0 1
14259: PUSH
14260: LD_INT 22
14262: PUSH
14263: LD_OWVAR 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 21
14274: PUSH
14275: LD_INT 3
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PPUSH
14286: CALL_OW 69
14290: ST_TO_ADDR
// if not tmp then
14291: LD_VAR 0 1
14295: NOT
14296: IFFALSE 14300
// exit ;
14298: GO 14326
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14300: LD_VAR 0 1
14304: PUSH
14305: LD_INT 1
14307: PPUSH
14308: LD_VAR 0 1
14312: PPUSH
14313: CALL_OW 12
14317: ARRAY
14318: PPUSH
14319: LD_INT 100
14321: PPUSH
14322: CALL_OW 234
// end ;
14326: PPOPN 1
14328: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14329: LD_EXP 19
14333: PUSH
14334: LD_EXP 33
14338: AND
14339: IFFALSE 14437
14341: GO 14343
14343: DISABLE
14344: LD_INT 0
14346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14347: LD_ADDR_VAR 0 1
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_OWVAR 2
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: ST_TO_ADDR
// if not tmp then
14383: LD_VAR 0 1
14387: NOT
14388: IFFALSE 14392
// exit ;
14390: GO 14437
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14392: LD_VAR 0 1
14396: PUSH
14397: LD_INT 1
14399: PPUSH
14400: LD_VAR 0 1
14404: PPUSH
14405: CALL_OW 12
14409: ARRAY
14410: PPUSH
14411: LD_INT 1
14413: PPUSH
14414: LD_INT 4
14416: PPUSH
14417: CALL_OW 12
14421: PPUSH
14422: LD_INT 3000
14424: PPUSH
14425: LD_INT 9000
14427: PPUSH
14428: CALL_OW 12
14432: PPUSH
14433: CALL_OW 492
// end ;
14437: PPOPN 1
14439: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14440: LD_EXP 19
14444: PUSH
14445: LD_EXP 34
14449: AND
14450: IFFALSE 14470
14452: GO 14454
14454: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14455: LD_INT 1
14457: PPUSH
14458: LD_OWVAR 2
14462: PPUSH
14463: LD_INT 0
14465: PPUSH
14466: CALL_OW 324
14470: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14471: LD_EXP 19
14475: PUSH
14476: LD_EXP 35
14480: AND
14481: IFFALSE 14564
14483: GO 14485
14485: DISABLE
14486: LD_INT 0
14488: PPUSH
14489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_INT 22
14497: PUSH
14498: LD_OWVAR 2
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 21
14509: PUSH
14510: LD_INT 3
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PPUSH
14521: CALL_OW 69
14525: ST_TO_ADDR
// if not tmp then
14526: LD_VAR 0 2
14530: NOT
14531: IFFALSE 14535
// exit ;
14533: GO 14564
// for i in tmp do
14535: LD_ADDR_VAR 0 1
14539: PUSH
14540: LD_VAR 0 2
14544: PUSH
14545: FOR_IN
14546: IFFALSE 14562
// SetBLevel ( i , 10 ) ;
14548: LD_VAR 0 1
14552: PPUSH
14553: LD_INT 10
14555: PPUSH
14556: CALL_OW 241
14560: GO 14545
14562: POP
14563: POP
// end ;
14564: PPOPN 2
14566: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14567: LD_EXP 19
14571: PUSH
14572: LD_EXP 36
14576: AND
14577: IFFALSE 14688
14579: GO 14581
14581: DISABLE
14582: LD_INT 0
14584: PPUSH
14585: PPUSH
14586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14587: LD_ADDR_VAR 0 3
14591: PUSH
14592: LD_INT 22
14594: PUSH
14595: LD_OWVAR 2
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 25
14606: PUSH
14607: LD_INT 1
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PPUSH
14618: CALL_OW 69
14622: ST_TO_ADDR
// if not tmp then
14623: LD_VAR 0 3
14627: NOT
14628: IFFALSE 14632
// exit ;
14630: GO 14688
// un := tmp [ rand ( 1 , tmp ) ] ;
14632: LD_ADDR_VAR 0 2
14636: PUSH
14637: LD_VAR 0 3
14641: PUSH
14642: LD_INT 1
14644: PPUSH
14645: LD_VAR 0 3
14649: PPUSH
14650: CALL_OW 12
14654: ARRAY
14655: ST_TO_ADDR
// if Crawls ( un ) then
14656: LD_VAR 0 2
14660: PPUSH
14661: CALL_OW 318
14665: IFFALSE 14676
// ComWalk ( un ) ;
14667: LD_VAR 0 2
14671: PPUSH
14672: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14676: LD_VAR 0 2
14680: PPUSH
14681: LD_INT 5
14683: PPUSH
14684: CALL_OW 336
// end ;
14688: PPOPN 3
14690: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14691: LD_EXP 19
14695: PUSH
14696: LD_EXP 37
14700: AND
14701: PUSH
14702: LD_OWVAR 67
14706: PUSH
14707: LD_INT 4
14709: LESS
14710: AND
14711: IFFALSE 14730
14713: GO 14715
14715: DISABLE
// begin Difficulty := Difficulty + 1 ;
14716: LD_ADDR_OWVAR 67
14720: PUSH
14721: LD_OWVAR 67
14725: PUSH
14726: LD_INT 1
14728: PLUS
14729: ST_TO_ADDR
// end ;
14730: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14731: LD_EXP 19
14735: PUSH
14736: LD_EXP 38
14740: AND
14741: IFFALSE 14844
14743: GO 14745
14745: DISABLE
14746: LD_INT 0
14748: PPUSH
// begin for i := 1 to 5 do
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: DOUBLE
14755: LD_INT 1
14757: DEC
14758: ST_TO_ADDR
14759: LD_INT 5
14761: PUSH
14762: FOR_TO
14763: IFFALSE 14842
// begin uc_nation := nation_nature ;
14765: LD_ADDR_OWVAR 21
14769: PUSH
14770: LD_INT 0
14772: ST_TO_ADDR
// uc_side := 0 ;
14773: LD_ADDR_OWVAR 20
14777: PUSH
14778: LD_INT 0
14780: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14781: LD_ADDR_OWVAR 29
14785: PUSH
14786: LD_INT 12
14788: PUSH
14789: LD_INT 12
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: ST_TO_ADDR
// hc_agressivity := 20 ;
14796: LD_ADDR_OWVAR 35
14800: PUSH
14801: LD_INT 20
14803: ST_TO_ADDR
// hc_class := class_tiger ;
14804: LD_ADDR_OWVAR 28
14808: PUSH
14809: LD_INT 14
14811: ST_TO_ADDR
// hc_gallery :=  ;
14812: LD_ADDR_OWVAR 33
14816: PUSH
14817: LD_STRING 
14819: ST_TO_ADDR
// hc_name :=  ;
14820: LD_ADDR_OWVAR 26
14824: PUSH
14825: LD_STRING 
14827: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14828: CALL_OW 44
14832: PPUSH
14833: LD_INT 0
14835: PPUSH
14836: CALL_OW 51
// end ;
14840: GO 14762
14842: POP
14843: POP
// end ;
14844: PPOPN 1
14846: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14847: LD_EXP 19
14851: PUSH
14852: LD_EXP 39
14856: AND
14857: IFFALSE 14866
14859: GO 14861
14861: DISABLE
// StreamSibBomb ;
14862: CALL 14867 0 0
14866: END
// export function StreamSibBomb ; var i , x , y ; begin
14867: LD_INT 0
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
// result := false ;
14873: LD_ADDR_VAR 0 1
14877: PUSH
14878: LD_INT 0
14880: ST_TO_ADDR
// for i := 1 to 16 do
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: DOUBLE
14887: LD_INT 1
14889: DEC
14890: ST_TO_ADDR
14891: LD_INT 16
14893: PUSH
14894: FOR_TO
14895: IFFALSE 15094
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14897: LD_ADDR_VAR 0 3
14901: PUSH
14902: LD_INT 10
14904: PUSH
14905: LD_INT 20
14907: PUSH
14908: LD_INT 30
14910: PUSH
14911: LD_INT 40
14913: PUSH
14914: LD_INT 50
14916: PUSH
14917: LD_INT 60
14919: PUSH
14920: LD_INT 70
14922: PUSH
14923: LD_INT 80
14925: PUSH
14926: LD_INT 90
14928: PUSH
14929: LD_INT 100
14931: PUSH
14932: LD_INT 110
14934: PUSH
14935: LD_INT 120
14937: PUSH
14938: LD_INT 130
14940: PUSH
14941: LD_INT 140
14943: PUSH
14944: LD_INT 150
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 1
14966: PPUSH
14967: LD_INT 15
14969: PPUSH
14970: CALL_OW 12
14974: ARRAY
14975: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14976: LD_ADDR_VAR 0 4
14980: PUSH
14981: LD_INT 10
14983: PUSH
14984: LD_INT 20
14986: PUSH
14987: LD_INT 30
14989: PUSH
14990: LD_INT 40
14992: PUSH
14993: LD_INT 50
14995: PUSH
14996: LD_INT 60
14998: PUSH
14999: LD_INT 70
15001: PUSH
15002: LD_INT 80
15004: PUSH
15005: LD_INT 90
15007: PUSH
15008: LD_INT 100
15010: PUSH
15011: LD_INT 110
15013: PUSH
15014: LD_INT 120
15016: PUSH
15017: LD_INT 130
15019: PUSH
15020: LD_INT 140
15022: PUSH
15023: LD_INT 150
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 1
15045: PPUSH
15046: LD_INT 15
15048: PPUSH
15049: CALL_OW 12
15053: ARRAY
15054: ST_TO_ADDR
// if ValidHex ( x , y ) then
15055: LD_VAR 0 3
15059: PPUSH
15060: LD_VAR 0 4
15064: PPUSH
15065: CALL_OW 488
15069: IFFALSE 15092
// begin result := [ x , y ] ;
15071: LD_ADDR_VAR 0 1
15075: PUSH
15076: LD_VAR 0 3
15080: PUSH
15081: LD_VAR 0 4
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: ST_TO_ADDR
// break ;
15090: GO 15094
// end ; end ;
15092: GO 14894
15094: POP
15095: POP
// if result then
15096: LD_VAR 0 1
15100: IFFALSE 15160
// begin ToLua ( playSibBomb() ) ;
15102: LD_STRING playSibBomb()
15104: PPUSH
15105: CALL_OW 559
// wait ( 0 0$14 ) ;
15109: LD_INT 490
15111: PPUSH
15112: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15116: LD_VAR 0 1
15120: PUSH
15121: LD_INT 1
15123: ARRAY
15124: PPUSH
15125: LD_VAR 0 1
15129: PUSH
15130: LD_INT 2
15132: ARRAY
15133: PPUSH
15134: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15138: LD_VAR 0 1
15142: PUSH
15143: LD_INT 1
15145: ARRAY
15146: PPUSH
15147: LD_VAR 0 1
15151: PUSH
15152: LD_INT 2
15154: ARRAY
15155: PPUSH
15156: CALL_OW 429
// end ; end ;
15160: LD_VAR 0 1
15164: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15165: LD_EXP 19
15169: PUSH
15170: LD_EXP 41
15174: AND
15175: IFFALSE 15187
15177: GO 15179
15179: DISABLE
// YouLost (  ) ;
15180: LD_STRING 
15182: PPUSH
15183: CALL_OW 104
15187: END
// every 0 0$1 trigger StreamModeActive and sFog do
15188: LD_EXP 19
15192: PUSH
15193: LD_EXP 40
15197: AND
15198: IFFALSE 15212
15200: GO 15202
15202: DISABLE
// FogOff ( your_side ) ;
15203: LD_OWVAR 2
15207: PPUSH
15208: CALL_OW 344
15212: END
// every 0 0$1 trigger StreamModeActive and sSun do
15213: LD_EXP 19
15217: PUSH
15218: LD_EXP 42
15222: AND
15223: IFFALSE 15251
15225: GO 15227
15227: DISABLE
// begin solar_recharge_percent := 0 ;
15228: LD_ADDR_OWVAR 79
15232: PUSH
15233: LD_INT 0
15235: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15236: LD_INT 10500
15238: PPUSH
15239: CALL_OW 67
// solar_recharge_percent := 100 ;
15243: LD_ADDR_OWVAR 79
15247: PUSH
15248: LD_INT 100
15250: ST_TO_ADDR
// end ;
15251: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15252: LD_EXP 19
15256: PUSH
15257: LD_EXP 43
15261: AND
15262: IFFALSE 15501
15264: GO 15266
15266: DISABLE
15267: LD_INT 0
15269: PPUSH
15270: PPUSH
15271: PPUSH
// begin tmp := [ ] ;
15272: LD_ADDR_VAR 0 3
15276: PUSH
15277: EMPTY
15278: ST_TO_ADDR
// for i := 1 to 6 do
15279: LD_ADDR_VAR 0 1
15283: PUSH
15284: DOUBLE
15285: LD_INT 1
15287: DEC
15288: ST_TO_ADDR
15289: LD_INT 6
15291: PUSH
15292: FOR_TO
15293: IFFALSE 15398
// begin uc_nation := nation_nature ;
15295: LD_ADDR_OWVAR 21
15299: PUSH
15300: LD_INT 0
15302: ST_TO_ADDR
// uc_side := 0 ;
15303: LD_ADDR_OWVAR 20
15307: PUSH
15308: LD_INT 0
15310: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15311: LD_ADDR_OWVAR 29
15315: PUSH
15316: LD_INT 12
15318: PUSH
15319: LD_INT 12
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: ST_TO_ADDR
// hc_agressivity := 20 ;
15326: LD_ADDR_OWVAR 35
15330: PUSH
15331: LD_INT 20
15333: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15334: LD_ADDR_OWVAR 28
15338: PUSH
15339: LD_INT 17
15341: ST_TO_ADDR
// hc_gallery :=  ;
15342: LD_ADDR_OWVAR 33
15346: PUSH
15347: LD_STRING 
15349: ST_TO_ADDR
// hc_name :=  ;
15350: LD_ADDR_OWVAR 26
15354: PUSH
15355: LD_STRING 
15357: ST_TO_ADDR
// un := CreateHuman ;
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: CALL_OW 44
15367: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15368: LD_VAR 0 2
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 51
// tmp := tmp ^ un ;
15380: LD_ADDR_VAR 0 3
15384: PUSH
15385: LD_VAR 0 3
15389: PUSH
15390: LD_VAR 0 2
15394: ADD
15395: ST_TO_ADDR
// end ;
15396: GO 15292
15398: POP
15399: POP
// repeat wait ( 0 0$1 ) ;
15400: LD_INT 35
15402: PPUSH
15403: CALL_OW 67
// for un in tmp do
15407: LD_ADDR_VAR 0 2
15411: PUSH
15412: LD_VAR 0 3
15416: PUSH
15417: FOR_IN
15418: IFFALSE 15492
// begin if IsDead ( un ) then
15420: LD_VAR 0 2
15424: PPUSH
15425: CALL_OW 301
15429: IFFALSE 15449
// begin tmp := tmp diff un ;
15431: LD_ADDR_VAR 0 3
15435: PUSH
15436: LD_VAR 0 3
15440: PUSH
15441: LD_VAR 0 2
15445: DIFF
15446: ST_TO_ADDR
// continue ;
15447: GO 15417
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15449: LD_VAR 0 2
15453: PPUSH
15454: LD_INT 3
15456: PUSH
15457: LD_INT 22
15459: PUSH
15460: LD_INT 0
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: PPUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: CALL_OW 74
15485: PPUSH
15486: CALL_OW 115
// end ;
15490: GO 15417
15492: POP
15493: POP
// until not tmp ;
15494: LD_VAR 0 3
15498: NOT
15499: IFFALSE 15400
// end ;
15501: PPOPN 3
15503: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15504: LD_EXP 19
15508: PUSH
15509: LD_EXP 44
15513: AND
15514: IFFALSE 15568
15516: GO 15518
15518: DISABLE
// begin ToLua ( displayTroll(); ) ;
15519: LD_STRING displayTroll();
15521: PPUSH
15522: CALL_OW 559
// wait ( 3 3$00 ) ;
15526: LD_INT 6300
15528: PPUSH
15529: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15533: LD_STRING hideTroll();
15535: PPUSH
15536: CALL_OW 559
// wait ( 1 1$00 ) ;
15540: LD_INT 2100
15542: PPUSH
15543: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15547: LD_STRING displayTroll();
15549: PPUSH
15550: CALL_OW 559
// wait ( 1 1$00 ) ;
15554: LD_INT 2100
15556: PPUSH
15557: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15561: LD_STRING hideTroll();
15563: PPUSH
15564: CALL_OW 559
// end ;
15568: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15569: LD_EXP 19
15573: PUSH
15574: LD_EXP 45
15578: AND
15579: IFFALSE 15642
15581: GO 15583
15583: DISABLE
15584: LD_INT 0
15586: PPUSH
// begin p := 0 ;
15587: LD_ADDR_VAR 0 1
15591: PUSH
15592: LD_INT 0
15594: ST_TO_ADDR
// repeat game_speed := 1 ;
15595: LD_ADDR_OWVAR 65
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15603: LD_INT 35
15605: PPUSH
15606: CALL_OW 67
// p := p + 1 ;
15610: LD_ADDR_VAR 0 1
15614: PUSH
15615: LD_VAR 0 1
15619: PUSH
15620: LD_INT 1
15622: PLUS
15623: ST_TO_ADDR
// until p >= 60 ;
15624: LD_VAR 0 1
15628: PUSH
15629: LD_INT 60
15631: GREATEREQUAL
15632: IFFALSE 15595
// game_speed := 4 ;
15634: LD_ADDR_OWVAR 65
15638: PUSH
15639: LD_INT 4
15641: ST_TO_ADDR
// end ;
15642: PPOPN 1
15644: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15645: LD_EXP 19
15649: PUSH
15650: LD_EXP 46
15654: AND
15655: IFFALSE 15801
15657: GO 15659
15659: DISABLE
15660: LD_INT 0
15662: PPUSH
15663: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15664: LD_ADDR_VAR 0 1
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_OWVAR 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 2
15683: PUSH
15684: LD_INT 30
15686: PUSH
15687: LD_INT 0
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 30
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PPUSH
15713: CALL_OW 69
15717: ST_TO_ADDR
// if not depot then
15718: LD_VAR 0 1
15722: NOT
15723: IFFALSE 15727
// exit ;
15725: GO 15801
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_VAR 0 1
15736: PUSH
15737: LD_INT 1
15739: PPUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 12
15749: ARRAY
15750: PPUSH
15751: CALL_OW 274
15755: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15756: LD_VAR 0 2
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: LD_INT 0
15766: PPUSH
15767: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15771: LD_VAR 0 2
15775: PPUSH
15776: LD_INT 2
15778: PPUSH
15779: LD_INT 0
15781: PPUSH
15782: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15786: LD_VAR 0 2
15790: PPUSH
15791: LD_INT 3
15793: PPUSH
15794: LD_INT 0
15796: PPUSH
15797: CALL_OW 277
// end ;
15801: PPOPN 2
15803: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15804: LD_EXP 19
15808: PUSH
15809: LD_EXP 47
15813: AND
15814: IFFALSE 15911
15816: GO 15818
15818: DISABLE
15819: LD_INT 0
15821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15822: LD_ADDR_VAR 0 1
15826: PUSH
15827: LD_INT 22
15829: PUSH
15830: LD_OWVAR 2
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 21
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 3
15851: PUSH
15852: LD_INT 23
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: PPUSH
15871: CALL_OW 69
15875: ST_TO_ADDR
// if not tmp then
15876: LD_VAR 0 1
15880: NOT
15881: IFFALSE 15885
// exit ;
15883: GO 15911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15885: LD_VAR 0 1
15889: PUSH
15890: LD_INT 1
15892: PPUSH
15893: LD_VAR 0 1
15897: PPUSH
15898: CALL_OW 12
15902: ARRAY
15903: PPUSH
15904: LD_INT 200
15906: PPUSH
15907: CALL_OW 234
// end ;
15911: PPOPN 1
15913: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15914: LD_EXP 19
15918: PUSH
15919: LD_EXP 48
15923: AND
15924: IFFALSE 16003
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15932: LD_ADDR_VAR 0 1
15936: PUSH
15937: LD_INT 22
15939: PUSH
15940: LD_OWVAR 2
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 21
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PPUSH
15963: CALL_OW 69
15967: ST_TO_ADDR
// if not tmp then
15968: LD_VAR 0 1
15972: NOT
15973: IFFALSE 15977
// exit ;
15975: GO 16003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15977: LD_VAR 0 1
15981: PUSH
15982: LD_INT 1
15984: PPUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 12
15994: ARRAY
15995: PPUSH
15996: LD_INT 60
15998: PPUSH
15999: CALL_OW 234
// end ;
16003: PPOPN 1
16005: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16006: LD_EXP 19
16010: PUSH
16011: LD_EXP 49
16015: AND
16016: IFFALSE 16115
16018: GO 16020
16020: DISABLE
16021: LD_INT 0
16023: PPUSH
16024: PPUSH
// begin enable ;
16025: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16026: LD_ADDR_VAR 0 1
16030: PUSH
16031: LD_INT 22
16033: PUSH
16034: LD_OWVAR 2
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 61
16045: PUSH
16046: EMPTY
16047: LIST
16048: PUSH
16049: LD_INT 33
16051: PUSH
16052: LD_INT 2
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: ST_TO_ADDR
// if not tmp then
16069: LD_VAR 0 1
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16115
// for i in tmp do
16078: LD_ADDR_VAR 0 2
16082: PUSH
16083: LD_VAR 0 1
16087: PUSH
16088: FOR_IN
16089: IFFALSE 16113
// if IsControledBy ( i ) then
16091: LD_VAR 0 2
16095: PPUSH
16096: CALL_OW 312
16100: IFFALSE 16111
// ComUnlink ( i ) ;
16102: LD_VAR 0 2
16106: PPUSH
16107: CALL_OW 136
16111: GO 16088
16113: POP
16114: POP
// end ;
16115: PPOPN 2
16117: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16118: LD_EXP 19
16122: PUSH
16123: LD_EXP 50
16127: AND
16128: IFFALSE 16268
16130: GO 16132
16132: DISABLE
16133: LD_INT 0
16135: PPUSH
16136: PPUSH
// begin ToLua ( displayPowell(); ) ;
16137: LD_STRING displayPowell();
16139: PPUSH
16140: CALL_OW 559
// uc_side := 0 ;
16144: LD_ADDR_OWVAR 20
16148: PUSH
16149: LD_INT 0
16151: ST_TO_ADDR
// uc_nation := 2 ;
16152: LD_ADDR_OWVAR 21
16156: PUSH
16157: LD_INT 2
16159: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16160: LD_ADDR_OWVAR 37
16164: PUSH
16165: LD_INT 14
16167: ST_TO_ADDR
// vc_engine := engine_siberite ;
16168: LD_ADDR_OWVAR 39
16172: PUSH
16173: LD_INT 3
16175: ST_TO_ADDR
// vc_control := control_apeman ;
16176: LD_ADDR_OWVAR 38
16180: PUSH
16181: LD_INT 5
16183: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16184: LD_ADDR_OWVAR 40
16188: PUSH
16189: LD_INT 29
16191: ST_TO_ADDR
// un := CreateVehicle ;
16192: LD_ADDR_VAR 0 2
16196: PUSH
16197: CALL_OW 45
16201: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16202: LD_VAR 0 2
16206: PPUSH
16207: LD_INT 1
16209: PPUSH
16210: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16214: LD_INT 35
16216: PPUSH
16217: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16221: LD_VAR 0 2
16225: PPUSH
16226: LD_INT 22
16228: PUSH
16229: LD_OWVAR 2
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PPUSH
16238: CALL_OW 69
16242: PPUSH
16243: LD_VAR 0 2
16247: PPUSH
16248: CALL_OW 74
16252: PPUSH
16253: CALL_OW 115
// until IsDead ( un ) ;
16257: LD_VAR 0 2
16261: PPUSH
16262: CALL_OW 301
16266: IFFALSE 16214
// end ;
16268: PPOPN 2
16270: END
// every 0 0$1 trigger StreamModeActive and sStu do
16271: LD_EXP 19
16275: PUSH
16276: LD_EXP 58
16280: AND
16281: IFFALSE 16297
16283: GO 16285
16285: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16286: LD_STRING displayStucuk();
16288: PPUSH
16289: CALL_OW 559
// ResetFog ;
16293: CALL_OW 335
// end ;
16297: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16298: LD_EXP 19
16302: PUSH
16303: LD_EXP 51
16307: AND
16308: IFFALSE 16449
16310: GO 16312
16312: DISABLE
16313: LD_INT 0
16315: PPUSH
16316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16317: LD_ADDR_VAR 0 2
16321: PUSH
16322: LD_INT 22
16324: PUSH
16325: LD_OWVAR 2
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 21
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 69
16352: ST_TO_ADDR
// if not tmp then
16353: LD_VAR 0 2
16357: NOT
16358: IFFALSE 16362
// exit ;
16360: GO 16449
// un := tmp [ rand ( 1 , tmp ) ] ;
16362: LD_ADDR_VAR 0 1
16366: PUSH
16367: LD_VAR 0 2
16371: PUSH
16372: LD_INT 1
16374: PPUSH
16375: LD_VAR 0 2
16379: PPUSH
16380: CALL_OW 12
16384: ARRAY
16385: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16386: LD_VAR 0 1
16390: PPUSH
16391: LD_INT 0
16393: PPUSH
16394: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16398: LD_VAR 0 1
16402: PPUSH
16403: LD_OWVAR 3
16407: PUSH
16408: LD_VAR 0 1
16412: DIFF
16413: PPUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 74
16423: PPUSH
16424: CALL_OW 115
// wait ( 0 0$20 ) ;
16428: LD_INT 700
16430: PPUSH
16431: CALL_OW 67
// SetSide ( un , your_side ) ;
16435: LD_VAR 0 1
16439: PPUSH
16440: LD_OWVAR 2
16444: PPUSH
16445: CALL_OW 235
// end ;
16449: PPOPN 2
16451: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16452: LD_EXP 19
16456: PUSH
16457: LD_EXP 52
16461: AND
16462: IFFALSE 16568
16464: GO 16466
16466: DISABLE
16467: LD_INT 0
16469: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16470: LD_ADDR_VAR 0 1
16474: PUSH
16475: LD_INT 22
16477: PUSH
16478: LD_OWVAR 2
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: LD_INT 30
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 30
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PPUSH
16519: CALL_OW 69
16523: ST_TO_ADDR
// if not depot then
16524: LD_VAR 0 1
16528: NOT
16529: IFFALSE 16533
// exit ;
16531: GO 16568
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16533: LD_VAR 0 1
16537: PUSH
16538: LD_INT 1
16540: ARRAY
16541: PPUSH
16542: CALL_OW 250
16546: PPUSH
16547: LD_VAR 0 1
16551: PUSH
16552: LD_INT 1
16554: ARRAY
16555: PPUSH
16556: CALL_OW 251
16560: PPUSH
16561: LD_INT 70
16563: PPUSH
16564: CALL_OW 495
// end ;
16568: PPOPN 1
16570: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16571: LD_EXP 19
16575: PUSH
16576: LD_EXP 53
16580: AND
16581: IFFALSE 16792
16583: GO 16585
16585: DISABLE
16586: LD_INT 0
16588: PPUSH
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16593: LD_ADDR_VAR 0 5
16597: PUSH
16598: LD_INT 22
16600: PUSH
16601: LD_OWVAR 2
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 21
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PPUSH
16624: CALL_OW 69
16628: ST_TO_ADDR
// if not tmp then
16629: LD_VAR 0 5
16633: NOT
16634: IFFALSE 16638
// exit ;
16636: GO 16792
// for i in tmp do
16638: LD_ADDR_VAR 0 1
16642: PUSH
16643: LD_VAR 0 5
16647: PUSH
16648: FOR_IN
16649: IFFALSE 16790
// begin d := rand ( 0 , 5 ) ;
16651: LD_ADDR_VAR 0 4
16655: PUSH
16656: LD_INT 0
16658: PPUSH
16659: LD_INT 5
16661: PPUSH
16662: CALL_OW 12
16666: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16667: LD_ADDR_VAR 0 2
16671: PUSH
16672: LD_VAR 0 1
16676: PPUSH
16677: CALL_OW 250
16681: PPUSH
16682: LD_VAR 0 4
16686: PPUSH
16687: LD_INT 3
16689: PPUSH
16690: LD_INT 12
16692: PPUSH
16693: CALL_OW 12
16697: PPUSH
16698: CALL_OW 272
16702: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16703: LD_ADDR_VAR 0 3
16707: PUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 251
16717: PPUSH
16718: LD_VAR 0 4
16722: PPUSH
16723: LD_INT 3
16725: PPUSH
16726: LD_INT 12
16728: PPUSH
16729: CALL_OW 12
16733: PPUSH
16734: CALL_OW 273
16738: ST_TO_ADDR
// if ValidHex ( x , y ) then
16739: LD_VAR 0 2
16743: PPUSH
16744: LD_VAR 0 3
16748: PPUSH
16749: CALL_OW 488
16753: IFFALSE 16788
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16755: LD_VAR 0 1
16759: PPUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: LD_INT 3
16772: PPUSH
16773: LD_INT 6
16775: PPUSH
16776: CALL_OW 12
16780: PPUSH
16781: LD_INT 1
16783: PPUSH
16784: CALL_OW 483
// end ;
16788: GO 16648
16790: POP
16791: POP
// end ;
16792: PPOPN 5
16794: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16795: LD_EXP 19
16799: PUSH
16800: LD_EXP 54
16804: AND
16805: IFFALSE 16899
16807: GO 16809
16809: DISABLE
16810: LD_INT 0
16812: PPUSH
16813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16814: LD_ADDR_VAR 0 2
16818: PUSH
16819: LD_INT 22
16821: PUSH
16822: LD_OWVAR 2
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 32
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 21
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: PPUSH
16856: CALL_OW 69
16860: ST_TO_ADDR
// if not tmp then
16861: LD_VAR 0 2
16865: NOT
16866: IFFALSE 16870
// exit ;
16868: GO 16899
// for i in tmp do
16870: LD_ADDR_VAR 0 1
16874: PUSH
16875: LD_VAR 0 2
16879: PUSH
16880: FOR_IN
16881: IFFALSE 16897
// SetFuel ( i , 0 ) ;
16883: LD_VAR 0 1
16887: PPUSH
16888: LD_INT 0
16890: PPUSH
16891: CALL_OW 240
16895: GO 16880
16897: POP
16898: POP
// end ;
16899: PPOPN 2
16901: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16902: LD_EXP 19
16906: PUSH
16907: LD_EXP 55
16911: AND
16912: IFFALSE 16978
16914: GO 16916
16916: DISABLE
16917: LD_INT 0
16919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16920: LD_ADDR_VAR 0 1
16924: PUSH
16925: LD_INT 22
16927: PUSH
16928: LD_OWVAR 2
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 30
16939: PUSH
16940: LD_INT 29
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PPUSH
16951: CALL_OW 69
16955: ST_TO_ADDR
// if not tmp then
16956: LD_VAR 0 1
16960: NOT
16961: IFFALSE 16965
// exit ;
16963: GO 16978
// DestroyUnit ( tmp [ 1 ] ) ;
16965: LD_VAR 0 1
16969: PUSH
16970: LD_INT 1
16972: ARRAY
16973: PPUSH
16974: CALL_OW 65
// end ;
16978: PPOPN 1
16980: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16981: LD_EXP 19
16985: PUSH
16986: LD_EXP 57
16990: AND
16991: IFFALSE 17120
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
// begin uc_side := 0 ;
16999: LD_ADDR_OWVAR 20
17003: PUSH
17004: LD_INT 0
17006: ST_TO_ADDR
// uc_nation := nation_arabian ;
17007: LD_ADDR_OWVAR 21
17011: PUSH
17012: LD_INT 2
17014: ST_TO_ADDR
// hc_gallery :=  ;
17015: LD_ADDR_OWVAR 33
17019: PUSH
17020: LD_STRING 
17022: ST_TO_ADDR
// hc_name :=  ;
17023: LD_ADDR_OWVAR 26
17027: PUSH
17028: LD_STRING 
17030: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17031: LD_INT 1
17033: PPUSH
17034: LD_INT 11
17036: PPUSH
17037: LD_INT 10
17039: PPUSH
17040: CALL_OW 380
// un := CreateHuman ;
17044: LD_ADDR_VAR 0 1
17048: PUSH
17049: CALL_OW 44
17053: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17054: LD_VAR 0 1
17058: PPUSH
17059: LD_INT 1
17061: PPUSH
17062: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17066: LD_INT 35
17068: PPUSH
17069: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17073: LD_VAR 0 1
17077: PPUSH
17078: LD_INT 22
17080: PUSH
17081: LD_OWVAR 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PPUSH
17090: CALL_OW 69
17094: PPUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 74
17104: PPUSH
17105: CALL_OW 115
// until IsDead ( un ) ;
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 301
17118: IFFALSE 17066
// end ;
17120: PPOPN 1
17122: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17123: LD_EXP 19
17127: PUSH
17128: LD_EXP 59
17132: AND
17133: IFFALSE 17145
17135: GO 17137
17137: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17138: LD_STRING earthquake(getX(game), 0, 32)
17140: PPUSH
17141: CALL_OW 559
17145: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17146: LD_EXP 19
17150: PUSH
17151: LD_EXP 60
17155: AND
17156: IFFALSE 17247
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
// begin enable ;
17164: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_OWVAR 2
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 21
17184: PUSH
17185: LD_INT 2
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 33
17194: PUSH
17195: LD_INT 3
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: PPUSH
17207: CALL_OW 69
17211: ST_TO_ADDR
// if not tmp then
17212: LD_VAR 0 1
17216: NOT
17217: IFFALSE 17221
// exit ;
17219: GO 17247
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17221: LD_VAR 0 1
17225: PUSH
17226: LD_INT 1
17228: PPUSH
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 12
17238: ARRAY
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 234
// end ;
17247: PPOPN 1
17249: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17250: LD_EXP 19
17254: PUSH
17255: LD_EXP 61
17259: AND
17260: IFFALSE 17401
17262: GO 17264
17264: DISABLE
17265: LD_INT 0
17267: PPUSH
17268: PPUSH
17269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17270: LD_ADDR_VAR 0 3
17274: PUSH
17275: LD_INT 22
17277: PUSH
17278: LD_OWVAR 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 25
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PPUSH
17301: CALL_OW 69
17305: ST_TO_ADDR
// if not tmp then
17306: LD_VAR 0 3
17310: NOT
17311: IFFALSE 17315
// exit ;
17313: GO 17401
// un := tmp [ rand ( 1 , tmp ) ] ;
17315: LD_ADDR_VAR 0 2
17319: PUSH
17320: LD_VAR 0 3
17324: PUSH
17325: LD_INT 1
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: CALL_OW 12
17337: ARRAY
17338: ST_TO_ADDR
// if Crawls ( un ) then
17339: LD_VAR 0 2
17343: PPUSH
17344: CALL_OW 318
17348: IFFALSE 17359
// ComWalk ( un ) ;
17350: LD_VAR 0 2
17354: PPUSH
17355: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17359: LD_VAR 0 2
17363: PPUSH
17364: LD_INT 9
17366: PPUSH
17367: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17371: LD_INT 28
17373: PPUSH
17374: LD_OWVAR 2
17378: PPUSH
17379: LD_INT 2
17381: PPUSH
17382: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17386: LD_INT 29
17388: PPUSH
17389: LD_OWVAR 2
17393: PPUSH
17394: LD_INT 2
17396: PPUSH
17397: CALL_OW 322
// end ;
17401: PPOPN 3
17403: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17404: LD_EXP 19
17408: PUSH
17409: LD_EXP 62
17413: AND
17414: IFFALSE 17525
17416: GO 17418
17418: DISABLE
17419: LD_INT 0
17421: PPUSH
17422: PPUSH
17423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_INT 22
17431: PUSH
17432: LD_OWVAR 2
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 25
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PPUSH
17455: CALL_OW 69
17459: ST_TO_ADDR
// if not tmp then
17460: LD_VAR 0 3
17464: NOT
17465: IFFALSE 17469
// exit ;
17467: GO 17525
// un := tmp [ rand ( 1 , tmp ) ] ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_VAR 0 3
17478: PUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_VAR 0 3
17486: PPUSH
17487: CALL_OW 12
17491: ARRAY
17492: ST_TO_ADDR
// if Crawls ( un ) then
17493: LD_VAR 0 2
17497: PPUSH
17498: CALL_OW 318
17502: IFFALSE 17513
// ComWalk ( un ) ;
17504: LD_VAR 0 2
17508: PPUSH
17509: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17513: LD_VAR 0 2
17517: PPUSH
17518: LD_INT 8
17520: PPUSH
17521: CALL_OW 336
// end ;
17525: PPOPN 3
17527: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17528: LD_EXP 19
17532: PUSH
17533: LD_EXP 63
17537: AND
17538: IFFALSE 17682
17540: GO 17542
17542: DISABLE
17543: LD_INT 0
17545: PPUSH
17546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17547: LD_ADDR_VAR 0 2
17551: PUSH
17552: LD_INT 22
17554: PUSH
17555: LD_OWVAR 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 21
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 2
17576: PUSH
17577: LD_INT 34
17579: PUSH
17580: LD_INT 12
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 34
17589: PUSH
17590: LD_INT 51
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 34
17599: PUSH
17600: LD_INT 32
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: ST_TO_ADDR
// if not tmp then
17623: LD_VAR 0 2
17627: NOT
17628: IFFALSE 17632
// exit ;
17630: GO 17682
// for i in tmp do
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_VAR 0 2
17641: PUSH
17642: FOR_IN
17643: IFFALSE 17680
// if GetCargo ( i , mat_artifact ) = 0 then
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_INT 4
17652: PPUSH
17653: CALL_OW 289
17657: PUSH
17658: LD_INT 0
17660: EQUAL
17661: IFFALSE 17678
// SetCargo ( i , mat_siberit , 100 ) ;
17663: LD_VAR 0 1
17667: PPUSH
17668: LD_INT 3
17670: PPUSH
17671: LD_INT 100
17673: PPUSH
17674: CALL_OW 290
17678: GO 17642
17680: POP
17681: POP
// end ;
17682: PPOPN 2
17684: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17685: LD_EXP 19
17689: PUSH
17690: LD_EXP 64
17694: AND
17695: IFFALSE 17878
17697: GO 17699
17699: DISABLE
17700: LD_INT 0
17702: PPUSH
17703: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17704: LD_ADDR_VAR 0 2
17708: PUSH
17709: LD_INT 22
17711: PUSH
17712: LD_OWVAR 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: ST_TO_ADDR
// if not tmp then
17726: LD_VAR 0 2
17730: NOT
17731: IFFALSE 17735
// exit ;
17733: GO 17878
// for i := 1 to 2 do
17735: LD_ADDR_VAR 0 1
17739: PUSH
17740: DOUBLE
17741: LD_INT 1
17743: DEC
17744: ST_TO_ADDR
17745: LD_INT 2
17747: PUSH
17748: FOR_TO
17749: IFFALSE 17876
// begin uc_side := your_side ;
17751: LD_ADDR_OWVAR 20
17755: PUSH
17756: LD_OWVAR 2
17760: ST_TO_ADDR
// uc_nation := nation_american ;
17761: LD_ADDR_OWVAR 21
17765: PUSH
17766: LD_INT 1
17768: ST_TO_ADDR
// vc_chassis := us_morphling ;
17769: LD_ADDR_OWVAR 37
17773: PUSH
17774: LD_INT 5
17776: ST_TO_ADDR
// vc_engine := engine_siberite ;
17777: LD_ADDR_OWVAR 39
17781: PUSH
17782: LD_INT 3
17784: ST_TO_ADDR
// vc_control := control_computer ;
17785: LD_ADDR_OWVAR 38
17789: PUSH
17790: LD_INT 3
17792: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17793: LD_ADDR_OWVAR 40
17797: PUSH
17798: LD_INT 10
17800: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17801: LD_VAR 0 2
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL_OW 310
17814: NOT
17815: IFFALSE 17862
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17817: CALL_OW 45
17821: PPUSH
17822: LD_VAR 0 2
17826: PUSH
17827: LD_INT 1
17829: ARRAY
17830: PPUSH
17831: CALL_OW 250
17835: PPUSH
17836: LD_VAR 0 2
17840: PUSH
17841: LD_INT 1
17843: ARRAY
17844: PPUSH
17845: CALL_OW 251
17849: PPUSH
17850: LD_INT 12
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 50
17860: GO 17874
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17862: CALL_OW 45
17866: PPUSH
17867: LD_INT 1
17869: PPUSH
17870: CALL_OW 51
// end ;
17874: GO 17748
17876: POP
17877: POP
// end ;
17878: PPOPN 2
17880: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17881: LD_EXP 19
17885: PUSH
17886: LD_EXP 65
17890: AND
17891: IFFALSE 18113
17893: GO 17895
17895: DISABLE
17896: LD_INT 0
17898: PPUSH
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17904: LD_ADDR_VAR 0 6
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_OWVAR 2
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 21
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: LD_INT 23
17936: PUSH
17937: LD_INT 0
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: PPUSH
17953: CALL_OW 69
17957: ST_TO_ADDR
// if not tmp then
17958: LD_VAR 0 6
17962: NOT
17963: IFFALSE 17967
// exit ;
17965: GO 18113
// s1 := rand ( 1 , 4 ) ;
17967: LD_ADDR_VAR 0 2
17971: PUSH
17972: LD_INT 1
17974: PPUSH
17975: LD_INT 4
17977: PPUSH
17978: CALL_OW 12
17982: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17983: LD_ADDR_VAR 0 4
17987: PUSH
17988: LD_VAR 0 6
17992: PUSH
17993: LD_INT 1
17995: ARRAY
17996: PPUSH
17997: LD_VAR 0 2
18001: PPUSH
18002: CALL_OW 259
18006: ST_TO_ADDR
// if s1 = 1 then
18007: LD_VAR 0 2
18011: PUSH
18012: LD_INT 1
18014: EQUAL
18015: IFFALSE 18035
// s2 := rand ( 2 , 4 ) else
18017: LD_ADDR_VAR 0 3
18021: PUSH
18022: LD_INT 2
18024: PPUSH
18025: LD_INT 4
18027: PPUSH
18028: CALL_OW 12
18032: ST_TO_ADDR
18033: GO 18043
// s2 := 1 ;
18035: LD_ADDR_VAR 0 3
18039: PUSH
18040: LD_INT 1
18042: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18043: LD_ADDR_VAR 0 5
18047: PUSH
18048: LD_VAR 0 6
18052: PUSH
18053: LD_INT 1
18055: ARRAY
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: CALL_OW 259
18066: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18067: LD_VAR 0 6
18071: PUSH
18072: LD_INT 1
18074: ARRAY
18075: PPUSH
18076: LD_VAR 0 2
18080: PPUSH
18081: LD_VAR 0 5
18085: PPUSH
18086: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18090: LD_VAR 0 6
18094: PUSH
18095: LD_INT 1
18097: ARRAY
18098: PPUSH
18099: LD_VAR 0 3
18103: PPUSH
18104: LD_VAR 0 4
18108: PPUSH
18109: CALL_OW 237
// end ;
18113: PPOPN 6
18115: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18116: LD_EXP 19
18120: PUSH
18121: LD_EXP 66
18125: AND
18126: IFFALSE 18205
18128: GO 18130
18130: DISABLE
18131: LD_INT 0
18133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18134: LD_ADDR_VAR 0 1
18138: PUSH
18139: LD_INT 22
18141: PUSH
18142: LD_OWVAR 2
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 30
18153: PUSH
18154: LD_INT 3
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 69
18169: ST_TO_ADDR
// if not tmp then
18170: LD_VAR 0 1
18174: NOT
18175: IFFALSE 18179
// exit ;
18177: GO 18205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18179: LD_VAR 0 1
18183: PUSH
18184: LD_INT 1
18186: PPUSH
18187: LD_VAR 0 1
18191: PPUSH
18192: CALL_OW 12
18196: ARRAY
18197: PPUSH
18198: LD_INT 1
18200: PPUSH
18201: CALL_OW 234
// end ;
18205: PPOPN 1
18207: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18208: LD_EXP 19
18212: PUSH
18213: LD_EXP 67
18217: AND
18218: IFFALSE 18330
18220: GO 18222
18222: DISABLE
18223: LD_INT 0
18225: PPUSH
18226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18227: LD_ADDR_VAR 0 2
18231: PUSH
18232: LD_INT 22
18234: PUSH
18235: LD_OWVAR 2
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 2
18246: PUSH
18247: LD_INT 30
18249: PUSH
18250: LD_INT 27
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 30
18259: PUSH
18260: LD_INT 26
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_INT 28
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PPUSH
18287: CALL_OW 69
18291: ST_TO_ADDR
// if not tmp then
18292: LD_VAR 0 2
18296: NOT
18297: IFFALSE 18301
// exit ;
18299: GO 18330
// for i in tmp do
18301: LD_ADDR_VAR 0 1
18305: PUSH
18306: LD_VAR 0 2
18310: PUSH
18311: FOR_IN
18312: IFFALSE 18328
// SetLives ( i , 1 ) ;
18314: LD_VAR 0 1
18318: PPUSH
18319: LD_INT 1
18321: PPUSH
18322: CALL_OW 234
18326: GO 18311
18328: POP
18329: POP
// end ;
18330: PPOPN 2
18332: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18333: LD_EXP 19
18337: PUSH
18338: LD_EXP 68
18342: AND
18343: IFFALSE 18630
18345: GO 18347
18347: DISABLE
18348: LD_INT 0
18350: PPUSH
18351: PPUSH
18352: PPUSH
// begin i := rand ( 1 , 7 ) ;
18353: LD_ADDR_VAR 0 1
18357: PUSH
18358: LD_INT 1
18360: PPUSH
18361: LD_INT 7
18363: PPUSH
18364: CALL_OW 12
18368: ST_TO_ADDR
// case i of 1 :
18369: LD_VAR 0 1
18373: PUSH
18374: LD_INT 1
18376: DOUBLE
18377: EQUAL
18378: IFTRUE 18382
18380: GO 18392
18382: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18383: LD_STRING earthquake(getX(game), 0, 32)
18385: PPUSH
18386: CALL_OW 559
18390: GO 18630
18392: LD_INT 2
18394: DOUBLE
18395: EQUAL
18396: IFTRUE 18400
18398: GO 18414
18400: POP
// begin ToLua ( displayStucuk(); ) ;
18401: LD_STRING displayStucuk();
18403: PPUSH
18404: CALL_OW 559
// ResetFog ;
18408: CALL_OW 335
// end ; 3 :
18412: GO 18630
18414: LD_INT 3
18416: DOUBLE
18417: EQUAL
18418: IFTRUE 18422
18420: GO 18526
18422: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18423: LD_ADDR_VAR 0 2
18427: PUSH
18428: LD_INT 22
18430: PUSH
18431: LD_OWVAR 2
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 25
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PPUSH
18454: CALL_OW 69
18458: ST_TO_ADDR
// if not tmp then
18459: LD_VAR 0 2
18463: NOT
18464: IFFALSE 18468
// exit ;
18466: GO 18630
// un := tmp [ rand ( 1 , tmp ) ] ;
18468: LD_ADDR_VAR 0 3
18472: PUSH
18473: LD_VAR 0 2
18477: PUSH
18478: LD_INT 1
18480: PPUSH
18481: LD_VAR 0 2
18485: PPUSH
18486: CALL_OW 12
18490: ARRAY
18491: ST_TO_ADDR
// if Crawls ( un ) then
18492: LD_VAR 0 3
18496: PPUSH
18497: CALL_OW 318
18501: IFFALSE 18512
// ComWalk ( un ) ;
18503: LD_VAR 0 3
18507: PPUSH
18508: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18512: LD_VAR 0 3
18516: PPUSH
18517: LD_INT 8
18519: PPUSH
18520: CALL_OW 336
// end ; 4 :
18524: GO 18630
18526: LD_INT 4
18528: DOUBLE
18529: EQUAL
18530: IFTRUE 18534
18532: GO 18608
18534: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_INT 22
18542: PUSH
18543: LD_OWVAR 2
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 30
18554: PUSH
18555: LD_INT 29
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PPUSH
18566: CALL_OW 69
18570: ST_TO_ADDR
// if not tmp then
18571: LD_VAR 0 2
18575: NOT
18576: IFFALSE 18580
// exit ;
18578: GO 18630
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18580: LD_VAR 0 2
18584: PUSH
18585: LD_INT 1
18587: ARRAY
18588: PPUSH
18589: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18593: LD_VAR 0 2
18597: PUSH
18598: LD_INT 1
18600: ARRAY
18601: PPUSH
18602: CALL_OW 65
// end ; 5 .. 7 :
18606: GO 18630
18608: LD_INT 5
18610: DOUBLE
18611: GREATEREQUAL
18612: IFFALSE 18620
18614: LD_INT 7
18616: DOUBLE
18617: LESSEQUAL
18618: IFTRUE 18622
18620: GO 18629
18622: POP
// StreamSibBomb ; end ;
18623: CALL 14867 0 0
18627: GO 18630
18629: POP
// end ;
18630: PPOPN 3
18632: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18633: LD_EXP 19
18637: PUSH
18638: LD_EXP 69
18642: AND
18643: IFFALSE 18799
18645: GO 18647
18647: DISABLE
18648: LD_INT 0
18650: PPUSH
18651: PPUSH
18652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18653: LD_ADDR_VAR 0 2
18657: PUSH
18658: LD_INT 81
18660: PUSH
18661: LD_OWVAR 2
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: LD_INT 21
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 21
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: LIST
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PPUSH
18702: CALL_OW 69
18706: ST_TO_ADDR
// if not tmp then
18707: LD_VAR 0 2
18711: NOT
18712: IFFALSE 18716
// exit ;
18714: GO 18799
// p := 0 ;
18716: LD_ADDR_VAR 0 3
18720: PUSH
18721: LD_INT 0
18723: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18724: LD_INT 35
18726: PPUSH
18727: CALL_OW 67
// p := p + 1 ;
18731: LD_ADDR_VAR 0 3
18735: PUSH
18736: LD_VAR 0 3
18740: PUSH
18741: LD_INT 1
18743: PLUS
18744: ST_TO_ADDR
// for i in tmp do
18745: LD_ADDR_VAR 0 1
18749: PUSH
18750: LD_VAR 0 2
18754: PUSH
18755: FOR_IN
18756: IFFALSE 18787
// if GetLives ( i ) < 1000 then
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 256
18767: PUSH
18768: LD_INT 1000
18770: LESS
18771: IFFALSE 18785
// SetLives ( i , 1000 ) ;
18773: LD_VAR 0 1
18777: PPUSH
18778: LD_INT 1000
18780: PPUSH
18781: CALL_OW 234
18785: GO 18755
18787: POP
18788: POP
// until p > 20 ;
18789: LD_VAR 0 3
18793: PUSH
18794: LD_INT 20
18796: GREATER
18797: IFFALSE 18724
// end ;
18799: PPOPN 3
18801: END
// every 0 0$1 trigger StreamModeActive and sTime do
18802: LD_EXP 19
18806: PUSH
18807: LD_EXP 70
18811: AND
18812: IFFALSE 18847
18814: GO 18816
18816: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18817: LD_INT 28
18819: PPUSH
18820: LD_OWVAR 2
18824: PPUSH
18825: LD_INT 2
18827: PPUSH
18828: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18832: LD_INT 30
18834: PPUSH
18835: LD_OWVAR 2
18839: PPUSH
18840: LD_INT 2
18842: PPUSH
18843: CALL_OW 322
// end ;
18847: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18848: LD_EXP 19
18852: PUSH
18853: LD_EXP 71
18857: AND
18858: IFFALSE 18979
18860: GO 18862
18862: DISABLE
18863: LD_INT 0
18865: PPUSH
18866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18867: LD_ADDR_VAR 0 2
18871: PUSH
18872: LD_INT 22
18874: PUSH
18875: LD_OWVAR 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 21
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 3
18896: PUSH
18897: LD_INT 23
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: PPUSH
18916: CALL_OW 69
18920: ST_TO_ADDR
// if not tmp then
18921: LD_VAR 0 2
18925: NOT
18926: IFFALSE 18930
// exit ;
18928: GO 18979
// for i in tmp do
18930: LD_ADDR_VAR 0 1
18934: PUSH
18935: LD_VAR 0 2
18939: PUSH
18940: FOR_IN
18941: IFFALSE 18977
// begin if Crawls ( i ) then
18943: LD_VAR 0 1
18947: PPUSH
18948: CALL_OW 318
18952: IFFALSE 18963
// ComWalk ( i ) ;
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL_OW 138
// SetClass ( i , 2 ) ;
18963: LD_VAR 0 1
18967: PPUSH
18968: LD_INT 2
18970: PPUSH
18971: CALL_OW 336
// end ;
18975: GO 18940
18977: POP
18978: POP
// end ;
18979: PPOPN 2
18981: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18982: LD_EXP 19
18986: PUSH
18987: LD_EXP 72
18991: AND
18992: IFFALSE 19280
18994: GO 18996
18996: DISABLE
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
19001: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19002: LD_OWVAR 2
19006: PPUSH
19007: LD_INT 9
19009: PPUSH
19010: LD_INT 1
19012: PPUSH
19013: LD_INT 1
19015: PPUSH
19016: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19020: LD_INT 9
19022: PPUSH
19023: LD_OWVAR 2
19027: PPUSH
19028: CALL_OW 343
// uc_side := 9 ;
19032: LD_ADDR_OWVAR 20
19036: PUSH
19037: LD_INT 9
19039: ST_TO_ADDR
// uc_nation := 2 ;
19040: LD_ADDR_OWVAR 21
19044: PUSH
19045: LD_INT 2
19047: ST_TO_ADDR
// hc_name := Dark Warrior ;
19048: LD_ADDR_OWVAR 26
19052: PUSH
19053: LD_STRING Dark Warrior
19055: ST_TO_ADDR
// hc_gallery :=  ;
19056: LD_ADDR_OWVAR 33
19060: PUSH
19061: LD_STRING 
19063: ST_TO_ADDR
// hc_noskilllimit := true ;
19064: LD_ADDR_OWVAR 76
19068: PUSH
19069: LD_INT 1
19071: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19072: LD_ADDR_OWVAR 31
19076: PUSH
19077: LD_INT 30
19079: PUSH
19080: LD_INT 30
19082: PUSH
19083: LD_INT 30
19085: PUSH
19086: LD_INT 30
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: ST_TO_ADDR
// un := CreateHuman ;
19095: LD_ADDR_VAR 0 3
19099: PUSH
19100: CALL_OW 44
19104: ST_TO_ADDR
// hc_noskilllimit := false ;
19105: LD_ADDR_OWVAR 76
19109: PUSH
19110: LD_INT 0
19112: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19113: LD_VAR 0 3
19117: PPUSH
19118: LD_INT 1
19120: PPUSH
19121: CALL_OW 51
// ToLua ( playRanger() ) ;
19125: LD_STRING playRanger()
19127: PPUSH
19128: CALL_OW 559
// p := 0 ;
19132: LD_ADDR_VAR 0 2
19136: PUSH
19137: LD_INT 0
19139: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19140: LD_INT 35
19142: PPUSH
19143: CALL_OW 67
// p := p + 1 ;
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_VAR 0 2
19156: PUSH
19157: LD_INT 1
19159: PLUS
19160: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19161: LD_VAR 0 3
19165: PPUSH
19166: CALL_OW 256
19170: PUSH
19171: LD_INT 1000
19173: LESS
19174: IFFALSE 19188
// SetLives ( un , 1000 ) ;
19176: LD_VAR 0 3
19180: PPUSH
19181: LD_INT 1000
19183: PPUSH
19184: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19188: LD_VAR 0 3
19192: PPUSH
19193: LD_INT 81
19195: PUSH
19196: LD_OWVAR 2
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 91
19207: PUSH
19208: LD_VAR 0 3
19212: PUSH
19213: LD_INT 30
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: PPUSH
19230: LD_VAR 0 3
19234: PPUSH
19235: CALL_OW 74
19239: PPUSH
19240: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19244: LD_VAR 0 2
19248: PUSH
19249: LD_INT 80
19251: GREATER
19252: PUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL_OW 301
19262: OR
19263: IFFALSE 19140
// if un then
19265: LD_VAR 0 3
19269: IFFALSE 19280
// RemoveUnit ( un ) ;
19271: LD_VAR 0 3
19275: PPUSH
19276: CALL_OW 64
// end ;
19280: PPOPN 3
19282: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19283: LD_EXP 73
19287: IFFALSE 19403
19289: GO 19291
19291: DISABLE
19292: LD_INT 0
19294: PPUSH
19295: PPUSH
19296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19297: LD_ADDR_VAR 0 2
19301: PUSH
19302: LD_INT 81
19304: PUSH
19305: LD_OWVAR 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 21
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PPUSH
19328: CALL_OW 69
19332: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19333: LD_STRING playComputer()
19335: PPUSH
19336: CALL_OW 559
// if not tmp then
19340: LD_VAR 0 2
19344: NOT
19345: IFFALSE 19349
// exit ;
19347: GO 19403
// for i in tmp do
19349: LD_ADDR_VAR 0 1
19353: PUSH
19354: LD_VAR 0 2
19358: PUSH
19359: FOR_IN
19360: IFFALSE 19401
// for j := 1 to 4 do
19362: LD_ADDR_VAR 0 3
19366: PUSH
19367: DOUBLE
19368: LD_INT 1
19370: DEC
19371: ST_TO_ADDR
19372: LD_INT 4
19374: PUSH
19375: FOR_TO
19376: IFFALSE 19397
// SetSkill ( i , j , 10 ) ;
19378: LD_VAR 0 1
19382: PPUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: LD_INT 10
19390: PPUSH
19391: CALL_OW 237
19395: GO 19375
19397: POP
19398: POP
19399: GO 19359
19401: POP
19402: POP
// end ;
19403: PPOPN 3
19405: END
// every 0 0$1 trigger s30 do var i , tmp ;
19406: LD_EXP 74
19410: IFFALSE 19479
19412: GO 19414
19414: DISABLE
19415: LD_INT 0
19417: PPUSH
19418: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19419: LD_ADDR_VAR 0 2
19423: PUSH
19424: LD_INT 22
19426: PUSH
19427: LD_OWVAR 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PPUSH
19436: CALL_OW 69
19440: ST_TO_ADDR
// if not tmp then
19441: LD_VAR 0 2
19445: NOT
19446: IFFALSE 19450
// exit ;
19448: GO 19479
// for i in tmp do
19450: LD_ADDR_VAR 0 1
19454: PUSH
19455: LD_VAR 0 2
19459: PUSH
19460: FOR_IN
19461: IFFALSE 19477
// SetLives ( i , 300 ) ;
19463: LD_VAR 0 1
19467: PPUSH
19468: LD_INT 300
19470: PPUSH
19471: CALL_OW 234
19475: GO 19460
19477: POP
19478: POP
// end ;
19479: PPOPN 2
19481: END
// every 0 0$1 trigger s60 do var i , tmp ;
19482: LD_EXP 75
19486: IFFALSE 19555
19488: GO 19490
19490: DISABLE
19491: LD_INT 0
19493: PPUSH
19494: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19495: LD_ADDR_VAR 0 2
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_OWVAR 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PPUSH
19512: CALL_OW 69
19516: ST_TO_ADDR
// if not tmp then
19517: LD_VAR 0 2
19521: NOT
19522: IFFALSE 19526
// exit ;
19524: GO 19555
// for i in tmp do
19526: LD_ADDR_VAR 0 1
19530: PUSH
19531: LD_VAR 0 2
19535: PUSH
19536: FOR_IN
19537: IFFALSE 19553
// SetLives ( i , 600 ) ;
19539: LD_VAR 0 1
19543: PPUSH
19544: LD_INT 600
19546: PPUSH
19547: CALL_OW 234
19551: GO 19536
19553: POP
19554: POP
// end ;
19555: PPOPN 2
19557: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19558: LD_INT 0
19560: PPUSH
// case cmd of 301 :
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 301
19568: DOUBLE
19569: EQUAL
19570: IFTRUE 19574
19572: GO 19606
19574: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19575: LD_VAR 0 6
19579: PPUSH
19580: LD_VAR 0 7
19584: PPUSH
19585: LD_VAR 0 8
19589: PPUSH
19590: LD_VAR 0 4
19594: PPUSH
19595: LD_VAR 0 5
19599: PPUSH
19600: CALL 20815 0 5
19604: GO 19727
19606: LD_INT 302
19608: DOUBLE
19609: EQUAL
19610: IFTRUE 19614
19612: GO 19651
19614: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19615: LD_VAR 0 6
19619: PPUSH
19620: LD_VAR 0 7
19624: PPUSH
19625: LD_VAR 0 8
19629: PPUSH
19630: LD_VAR 0 9
19634: PPUSH
19635: LD_VAR 0 4
19639: PPUSH
19640: LD_VAR 0 5
19644: PPUSH
19645: CALL 20906 0 6
19649: GO 19727
19651: LD_INT 303
19653: DOUBLE
19654: EQUAL
19655: IFTRUE 19659
19657: GO 19696
19659: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19660: LD_VAR 0 6
19664: PPUSH
19665: LD_VAR 0 7
19669: PPUSH
19670: LD_VAR 0 8
19674: PPUSH
19675: LD_VAR 0 9
19679: PPUSH
19680: LD_VAR 0 4
19684: PPUSH
19685: LD_VAR 0 5
19689: PPUSH
19690: CALL 19732 0 6
19694: GO 19727
19696: LD_INT 304
19698: DOUBLE
19699: EQUAL
19700: IFTRUE 19704
19702: GO 19726
19704: POP
// hHackTeleport ( unit , x , y ) ; end ;
19705: LD_VAR 0 2
19709: PPUSH
19710: LD_VAR 0 4
19714: PPUSH
19715: LD_VAR 0 5
19719: PPUSH
19720: CALL 21499 0 3
19724: GO 19727
19726: POP
// end ;
19727: LD_VAR 0 12
19731: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19732: LD_INT 0
19734: PPUSH
19735: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19736: LD_VAR 0 1
19740: PUSH
19741: LD_INT 1
19743: LESS
19744: PUSH
19745: LD_VAR 0 1
19749: PUSH
19750: LD_INT 3
19752: GREATER
19753: OR
19754: PUSH
19755: LD_VAR 0 5
19759: PPUSH
19760: LD_VAR 0 6
19764: PPUSH
19765: CALL_OW 428
19769: OR
19770: IFFALSE 19774
// exit ;
19772: GO 20502
// uc_side := your_side ;
19774: LD_ADDR_OWVAR 20
19778: PUSH
19779: LD_OWVAR 2
19783: ST_TO_ADDR
// uc_nation := nation ;
19784: LD_ADDR_OWVAR 21
19788: PUSH
19789: LD_VAR 0 1
19793: ST_TO_ADDR
// bc_level = 1 ;
19794: LD_ADDR_OWVAR 43
19798: PUSH
19799: LD_INT 1
19801: ST_TO_ADDR
// case btype of 1 :
19802: LD_VAR 0 2
19806: PUSH
19807: LD_INT 1
19809: DOUBLE
19810: EQUAL
19811: IFTRUE 19815
19813: GO 19826
19815: POP
// bc_type := b_depot ; 2 :
19816: LD_ADDR_OWVAR 42
19820: PUSH
19821: LD_INT 0
19823: ST_TO_ADDR
19824: GO 20446
19826: LD_INT 2
19828: DOUBLE
19829: EQUAL
19830: IFTRUE 19834
19832: GO 19845
19834: POP
// bc_type := b_warehouse ; 3 :
19835: LD_ADDR_OWVAR 42
19839: PUSH
19840: LD_INT 1
19842: ST_TO_ADDR
19843: GO 20446
19845: LD_INT 3
19847: DOUBLE
19848: EQUAL
19849: IFTRUE 19853
19851: GO 19864
19853: POP
// bc_type := b_lab ; 4 .. 9 :
19854: LD_ADDR_OWVAR 42
19858: PUSH
19859: LD_INT 6
19861: ST_TO_ADDR
19862: GO 20446
19864: LD_INT 4
19866: DOUBLE
19867: GREATEREQUAL
19868: IFFALSE 19876
19870: LD_INT 9
19872: DOUBLE
19873: LESSEQUAL
19874: IFTRUE 19878
19876: GO 19938
19878: POP
// begin bc_type := b_lab_half ;
19879: LD_ADDR_OWVAR 42
19883: PUSH
19884: LD_INT 7
19886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19887: LD_ADDR_OWVAR 44
19891: PUSH
19892: LD_INT 10
19894: PUSH
19895: LD_INT 11
19897: PUSH
19898: LD_INT 12
19900: PUSH
19901: LD_INT 15
19903: PUSH
19904: LD_INT 14
19906: PUSH
19907: LD_INT 13
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: LD_VAR 0 2
19922: PUSH
19923: LD_INT 3
19925: MINUS
19926: ARRAY
19927: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19928: LD_ADDR_OWVAR 45
19932: PUSH
19933: LD_INT 9
19935: ST_TO_ADDR
// end ; 10 .. 13 :
19936: GO 20446
19938: LD_INT 10
19940: DOUBLE
19941: GREATEREQUAL
19942: IFFALSE 19950
19944: LD_INT 13
19946: DOUBLE
19947: LESSEQUAL
19948: IFTRUE 19952
19950: GO 20029
19952: POP
// begin bc_type := b_lab_full ;
19953: LD_ADDR_OWVAR 42
19957: PUSH
19958: LD_INT 8
19960: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19961: LD_ADDR_OWVAR 44
19965: PUSH
19966: LD_INT 10
19968: PUSH
19969: LD_INT 12
19971: PUSH
19972: LD_INT 14
19974: PUSH
19975: LD_INT 13
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: PUSH
19984: LD_VAR 0 2
19988: PUSH
19989: LD_INT 9
19991: MINUS
19992: ARRAY
19993: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19994: LD_ADDR_OWVAR 45
19998: PUSH
19999: LD_INT 11
20001: PUSH
20002: LD_INT 15
20004: PUSH
20005: LD_INT 12
20007: PUSH
20008: LD_INT 15
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: PUSH
20017: LD_VAR 0 2
20021: PUSH
20022: LD_INT 9
20024: MINUS
20025: ARRAY
20026: ST_TO_ADDR
// end ; 14 :
20027: GO 20446
20029: LD_INT 14
20031: DOUBLE
20032: EQUAL
20033: IFTRUE 20037
20035: GO 20048
20037: POP
// bc_type := b_workshop ; 15 :
20038: LD_ADDR_OWVAR 42
20042: PUSH
20043: LD_INT 2
20045: ST_TO_ADDR
20046: GO 20446
20048: LD_INT 15
20050: DOUBLE
20051: EQUAL
20052: IFTRUE 20056
20054: GO 20067
20056: POP
// bc_type := b_factory ; 16 :
20057: LD_ADDR_OWVAR 42
20061: PUSH
20062: LD_INT 3
20064: ST_TO_ADDR
20065: GO 20446
20067: LD_INT 16
20069: DOUBLE
20070: EQUAL
20071: IFTRUE 20075
20073: GO 20086
20075: POP
// bc_type := b_ext_gun ; 17 :
20076: LD_ADDR_OWVAR 42
20080: PUSH
20081: LD_INT 17
20083: ST_TO_ADDR
20084: GO 20446
20086: LD_INT 17
20088: DOUBLE
20089: EQUAL
20090: IFTRUE 20094
20092: GO 20122
20094: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20095: LD_ADDR_OWVAR 42
20099: PUSH
20100: LD_INT 19
20102: PUSH
20103: LD_INT 23
20105: PUSH
20106: LD_INT 19
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: LD_VAR 0 1
20118: ARRAY
20119: ST_TO_ADDR
20120: GO 20446
20122: LD_INT 18
20124: DOUBLE
20125: EQUAL
20126: IFTRUE 20130
20128: GO 20141
20130: POP
// bc_type := b_ext_radar ; 19 :
20131: LD_ADDR_OWVAR 42
20135: PUSH
20136: LD_INT 20
20138: ST_TO_ADDR
20139: GO 20446
20141: LD_INT 19
20143: DOUBLE
20144: EQUAL
20145: IFTRUE 20149
20147: GO 20160
20149: POP
// bc_type := b_ext_radio ; 20 :
20150: LD_ADDR_OWVAR 42
20154: PUSH
20155: LD_INT 22
20157: ST_TO_ADDR
20158: GO 20446
20160: LD_INT 20
20162: DOUBLE
20163: EQUAL
20164: IFTRUE 20168
20166: GO 20179
20168: POP
// bc_type := b_ext_siberium ; 21 :
20169: LD_ADDR_OWVAR 42
20173: PUSH
20174: LD_INT 21
20176: ST_TO_ADDR
20177: GO 20446
20179: LD_INT 21
20181: DOUBLE
20182: EQUAL
20183: IFTRUE 20187
20185: GO 20198
20187: POP
// bc_type := b_ext_computer ; 22 :
20188: LD_ADDR_OWVAR 42
20192: PUSH
20193: LD_INT 24
20195: ST_TO_ADDR
20196: GO 20446
20198: LD_INT 22
20200: DOUBLE
20201: EQUAL
20202: IFTRUE 20206
20204: GO 20217
20206: POP
// bc_type := b_ext_track ; 23 :
20207: LD_ADDR_OWVAR 42
20211: PUSH
20212: LD_INT 16
20214: ST_TO_ADDR
20215: GO 20446
20217: LD_INT 23
20219: DOUBLE
20220: EQUAL
20221: IFTRUE 20225
20223: GO 20236
20225: POP
// bc_type := b_ext_laser ; 24 :
20226: LD_ADDR_OWVAR 42
20230: PUSH
20231: LD_INT 25
20233: ST_TO_ADDR
20234: GO 20446
20236: LD_INT 24
20238: DOUBLE
20239: EQUAL
20240: IFTRUE 20244
20242: GO 20255
20244: POP
// bc_type := b_control_tower ; 25 :
20245: LD_ADDR_OWVAR 42
20249: PUSH
20250: LD_INT 36
20252: ST_TO_ADDR
20253: GO 20446
20255: LD_INT 25
20257: DOUBLE
20258: EQUAL
20259: IFTRUE 20263
20261: GO 20274
20263: POP
// bc_type := b_breastwork ; 26 :
20264: LD_ADDR_OWVAR 42
20268: PUSH
20269: LD_INT 31
20271: ST_TO_ADDR
20272: GO 20446
20274: LD_INT 26
20276: DOUBLE
20277: EQUAL
20278: IFTRUE 20282
20280: GO 20293
20282: POP
// bc_type := b_bunker ; 27 :
20283: LD_ADDR_OWVAR 42
20287: PUSH
20288: LD_INT 32
20290: ST_TO_ADDR
20291: GO 20446
20293: LD_INT 27
20295: DOUBLE
20296: EQUAL
20297: IFTRUE 20301
20299: GO 20312
20301: POP
// bc_type := b_turret ; 28 :
20302: LD_ADDR_OWVAR 42
20306: PUSH
20307: LD_INT 33
20309: ST_TO_ADDR
20310: GO 20446
20312: LD_INT 28
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20331
20320: POP
// bc_type := b_armoury ; 29 :
20321: LD_ADDR_OWVAR 42
20325: PUSH
20326: LD_INT 4
20328: ST_TO_ADDR
20329: GO 20446
20331: LD_INT 29
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20350
20339: POP
// bc_type := b_barracks ; 30 :
20340: LD_ADDR_OWVAR 42
20344: PUSH
20345: LD_INT 5
20347: ST_TO_ADDR
20348: GO 20446
20350: LD_INT 30
20352: DOUBLE
20353: EQUAL
20354: IFTRUE 20358
20356: GO 20369
20358: POP
// bc_type := b_solar_power ; 31 :
20359: LD_ADDR_OWVAR 42
20363: PUSH
20364: LD_INT 27
20366: ST_TO_ADDR
20367: GO 20446
20369: LD_INT 31
20371: DOUBLE
20372: EQUAL
20373: IFTRUE 20377
20375: GO 20388
20377: POP
// bc_type := b_oil_power ; 32 :
20378: LD_ADDR_OWVAR 42
20382: PUSH
20383: LD_INT 26
20385: ST_TO_ADDR
20386: GO 20446
20388: LD_INT 32
20390: DOUBLE
20391: EQUAL
20392: IFTRUE 20396
20394: GO 20407
20396: POP
// bc_type := b_siberite_power ; 33 :
20397: LD_ADDR_OWVAR 42
20401: PUSH
20402: LD_INT 28
20404: ST_TO_ADDR
20405: GO 20446
20407: LD_INT 33
20409: DOUBLE
20410: EQUAL
20411: IFTRUE 20415
20413: GO 20426
20415: POP
// bc_type := b_oil_mine ; 34 :
20416: LD_ADDR_OWVAR 42
20420: PUSH
20421: LD_INT 29
20423: ST_TO_ADDR
20424: GO 20446
20426: LD_INT 34
20428: DOUBLE
20429: EQUAL
20430: IFTRUE 20434
20432: GO 20445
20434: POP
// bc_type := b_siberite_mine ; end ;
20435: LD_ADDR_OWVAR 42
20439: PUSH
20440: LD_INT 30
20442: ST_TO_ADDR
20443: GO 20446
20445: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20446: LD_ADDR_VAR 0 8
20450: PUSH
20451: LD_VAR 0 5
20455: PPUSH
20456: LD_VAR 0 6
20460: PPUSH
20461: LD_VAR 0 3
20465: PPUSH
20466: CALL_OW 47
20470: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20471: LD_OWVAR 42
20475: PUSH
20476: LD_INT 32
20478: PUSH
20479: LD_INT 33
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: IN
20486: IFFALSE 20502
// PlaceWeaponTurret ( b , weapon ) ;
20488: LD_VAR 0 8
20492: PPUSH
20493: LD_VAR 0 4
20497: PPUSH
20498: CALL_OW 431
// end ;
20502: LD_VAR 0 7
20506: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20513: LD_ADDR_VAR 0 4
20517: PUSH
20518: LD_INT 22
20520: PUSH
20521: LD_OWVAR 2
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: LD_INT 30
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 30
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PPUSH
20562: CALL_OW 69
20566: ST_TO_ADDR
// if not tmp then
20567: LD_VAR 0 4
20571: NOT
20572: IFFALSE 20576
// exit ;
20574: GO 20635
// for i in tmp do
20576: LD_ADDR_VAR 0 2
20580: PUSH
20581: LD_VAR 0 4
20585: PUSH
20586: FOR_IN
20587: IFFALSE 20633
// for j = 1 to 3 do
20589: LD_ADDR_VAR 0 3
20593: PUSH
20594: DOUBLE
20595: LD_INT 1
20597: DEC
20598: ST_TO_ADDR
20599: LD_INT 3
20601: PUSH
20602: FOR_TO
20603: IFFALSE 20629
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20605: LD_VAR 0 2
20609: PPUSH
20610: CALL_OW 274
20614: PPUSH
20615: LD_VAR 0 3
20619: PPUSH
20620: LD_INT 99999
20622: PPUSH
20623: CALL_OW 277
20627: GO 20602
20629: POP
20630: POP
20631: GO 20586
20633: POP
20634: POP
// end ;
20635: LD_VAR 0 1
20639: RET
// export function hHackSetLevel10 ; var i , j ; begin
20640: LD_INT 0
20642: PPUSH
20643: PPUSH
20644: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20645: LD_ADDR_VAR 0 2
20649: PUSH
20650: LD_INT 21
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PPUSH
20660: CALL_OW 69
20664: PUSH
20665: FOR_IN
20666: IFFALSE 20718
// if IsSelected ( i ) then
20668: LD_VAR 0 2
20672: PPUSH
20673: CALL_OW 306
20677: IFFALSE 20716
// begin for j := 1 to 4 do
20679: LD_ADDR_VAR 0 3
20683: PUSH
20684: DOUBLE
20685: LD_INT 1
20687: DEC
20688: ST_TO_ADDR
20689: LD_INT 4
20691: PUSH
20692: FOR_TO
20693: IFFALSE 20714
// SetSkill ( i , j , 10 ) ;
20695: LD_VAR 0 2
20699: PPUSH
20700: LD_VAR 0 3
20704: PPUSH
20705: LD_INT 10
20707: PPUSH
20708: CALL_OW 237
20712: GO 20692
20714: POP
20715: POP
// end ;
20716: GO 20665
20718: POP
20719: POP
// end ;
20720: LD_VAR 0 1
20724: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20725: LD_INT 0
20727: PPUSH
20728: PPUSH
20729: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20730: LD_ADDR_VAR 0 2
20734: PUSH
20735: LD_INT 22
20737: PUSH
20738: LD_OWVAR 2
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 21
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PPUSH
20761: CALL_OW 69
20765: PUSH
20766: FOR_IN
20767: IFFALSE 20808
// begin for j := 1 to 4 do
20769: LD_ADDR_VAR 0 3
20773: PUSH
20774: DOUBLE
20775: LD_INT 1
20777: DEC
20778: ST_TO_ADDR
20779: LD_INT 4
20781: PUSH
20782: FOR_TO
20783: IFFALSE 20804
// SetSkill ( i , j , 10 ) ;
20785: LD_VAR 0 2
20789: PPUSH
20790: LD_VAR 0 3
20794: PPUSH
20795: LD_INT 10
20797: PPUSH
20798: CALL_OW 237
20802: GO 20782
20804: POP
20805: POP
// end ;
20806: GO 20766
20808: POP
20809: POP
// end ;
20810: LD_VAR 0 1
20814: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20815: LD_INT 0
20817: PPUSH
// uc_side := your_side ;
20818: LD_ADDR_OWVAR 20
20822: PUSH
20823: LD_OWVAR 2
20827: ST_TO_ADDR
// uc_nation := nation ;
20828: LD_ADDR_OWVAR 21
20832: PUSH
20833: LD_VAR 0 1
20837: ST_TO_ADDR
// InitHc ;
20838: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20842: LD_INT 0
20844: PPUSH
20845: LD_VAR 0 2
20849: PPUSH
20850: LD_VAR 0 3
20854: PPUSH
20855: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20859: LD_VAR 0 4
20863: PPUSH
20864: LD_VAR 0 5
20868: PPUSH
20869: CALL_OW 428
20873: PUSH
20874: LD_INT 0
20876: EQUAL
20877: IFFALSE 20901
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20879: CALL_OW 44
20883: PPUSH
20884: LD_VAR 0 4
20888: PPUSH
20889: LD_VAR 0 5
20893: PPUSH
20894: LD_INT 1
20896: PPUSH
20897: CALL_OW 48
// end ;
20901: LD_VAR 0 6
20905: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20906: LD_INT 0
20908: PPUSH
20909: PPUSH
// uc_side := your_side ;
20910: LD_ADDR_OWVAR 20
20914: PUSH
20915: LD_OWVAR 2
20919: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20920: LD_VAR 0 1
20924: PUSH
20925: LD_INT 1
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: LD_INT 3
20933: PUSH
20934: LD_INT 4
20936: PUSH
20937: LD_INT 5
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: IN
20947: IFFALSE 20959
// uc_nation := nation_american else
20949: LD_ADDR_OWVAR 21
20953: PUSH
20954: LD_INT 1
20956: ST_TO_ADDR
20957: GO 21002
// if chassis in [ 11 , 12 , 13 , 14 ] then
20959: LD_VAR 0 1
20963: PUSH
20964: LD_INT 11
20966: PUSH
20967: LD_INT 12
20969: PUSH
20970: LD_INT 13
20972: PUSH
20973: LD_INT 14
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: IN
20982: IFFALSE 20994
// uc_nation := nation_arabian else
20984: LD_ADDR_OWVAR 21
20988: PUSH
20989: LD_INT 2
20991: ST_TO_ADDR
20992: GO 21002
// uc_nation := nation_russian ;
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 3
21001: ST_TO_ADDR
// vc_chassis := chassis ;
21002: LD_ADDR_OWVAR 37
21006: PUSH
21007: LD_VAR 0 1
21011: ST_TO_ADDR
// vc_engine := engine ;
21012: LD_ADDR_OWVAR 39
21016: PUSH
21017: LD_VAR 0 2
21021: ST_TO_ADDR
// vc_control := control ;
21022: LD_ADDR_OWVAR 38
21026: PUSH
21027: LD_VAR 0 3
21031: ST_TO_ADDR
// vc_weapon := weapon ;
21032: LD_ADDR_OWVAR 40
21036: PUSH
21037: LD_VAR 0 4
21041: ST_TO_ADDR
// un := CreateVehicle ;
21042: LD_ADDR_VAR 0 8
21046: PUSH
21047: CALL_OW 45
21051: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21052: LD_VAR 0 8
21056: PPUSH
21057: LD_INT 0
21059: PPUSH
21060: LD_INT 5
21062: PPUSH
21063: CALL_OW 12
21067: PPUSH
21068: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21072: LD_VAR 0 8
21076: PPUSH
21077: LD_VAR 0 5
21081: PPUSH
21082: LD_VAR 0 6
21086: PPUSH
21087: LD_INT 1
21089: PPUSH
21090: CALL_OW 48
// end ;
21094: LD_VAR 0 7
21098: RET
// export hInvincible ; every 1 do
21099: GO 21101
21101: DISABLE
// hInvincible := [ ] ;
21102: LD_ADDR_EXP 76
21106: PUSH
21107: EMPTY
21108: ST_TO_ADDR
21109: END
// every 10 do var i ;
21110: GO 21112
21112: DISABLE
21113: LD_INT 0
21115: PPUSH
// begin enable ;
21116: ENABLE
// if not hInvincible then
21117: LD_EXP 76
21121: NOT
21122: IFFALSE 21126
// exit ;
21124: GO 21170
// for i in hInvincible do
21126: LD_ADDR_VAR 0 1
21130: PUSH
21131: LD_EXP 76
21135: PUSH
21136: FOR_IN
21137: IFFALSE 21168
// if GetLives ( i ) < 1000 then
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 256
21148: PUSH
21149: LD_INT 1000
21151: LESS
21152: IFFALSE 21166
// SetLives ( i , 1000 ) ;
21154: LD_VAR 0 1
21158: PPUSH
21159: LD_INT 1000
21161: PPUSH
21162: CALL_OW 234
21166: GO 21136
21168: POP
21169: POP
// end ;
21170: PPOPN 1
21172: END
// export function hHackInvincible ; var i ; begin
21173: LD_INT 0
21175: PPUSH
21176: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21177: LD_ADDR_VAR 0 2
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: LD_INT 21
21187: PUSH
21188: LD_INT 1
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 21
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: PPUSH
21210: CALL_OW 69
21214: PUSH
21215: FOR_IN
21216: IFFALSE 21277
// if IsSelected ( i ) then
21218: LD_VAR 0 2
21222: PPUSH
21223: CALL_OW 306
21227: IFFALSE 21275
// begin if i in hInvincible then
21229: LD_VAR 0 2
21233: PUSH
21234: LD_EXP 76
21238: IN
21239: IFFALSE 21259
// hInvincible := hInvincible diff i else
21241: LD_ADDR_EXP 76
21245: PUSH
21246: LD_EXP 76
21250: PUSH
21251: LD_VAR 0 2
21255: DIFF
21256: ST_TO_ADDR
21257: GO 21275
// hInvincible := hInvincible union i ;
21259: LD_ADDR_EXP 76
21263: PUSH
21264: LD_EXP 76
21268: PUSH
21269: LD_VAR 0 2
21273: UNION
21274: ST_TO_ADDR
// end ;
21275: GO 21215
21277: POP
21278: POP
// end ;
21279: LD_VAR 0 1
21283: RET
// export function hHackInvisible ; var i , j ; begin
21284: LD_INT 0
21286: PPUSH
21287: PPUSH
21288: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 21
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PPUSH
21304: CALL_OW 69
21308: PUSH
21309: FOR_IN
21310: IFFALSE 21334
// if IsSelected ( i ) then
21312: LD_VAR 0 2
21316: PPUSH
21317: CALL_OW 306
21321: IFFALSE 21332
// ComForceInvisible ( i ) ;
21323: LD_VAR 0 2
21327: PPUSH
21328: CALL_OW 496
21332: GO 21309
21334: POP
21335: POP
// end ;
21336: LD_VAR 0 1
21340: RET
// export function hHackChangeYourSide ; begin
21341: LD_INT 0
21343: PPUSH
// if your_side = 8 then
21344: LD_OWVAR 2
21348: PUSH
21349: LD_INT 8
21351: EQUAL
21352: IFFALSE 21364
// your_side := 0 else
21354: LD_ADDR_OWVAR 2
21358: PUSH
21359: LD_INT 0
21361: ST_TO_ADDR
21362: GO 21378
// your_side := your_side + 1 ;
21364: LD_ADDR_OWVAR 2
21368: PUSH
21369: LD_OWVAR 2
21373: PUSH
21374: LD_INT 1
21376: PLUS
21377: ST_TO_ADDR
// end ;
21378: LD_VAR 0 1
21382: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21383: LD_INT 0
21385: PPUSH
21386: PPUSH
21387: PPUSH
// for i in all_units do
21388: LD_ADDR_VAR 0 2
21392: PUSH
21393: LD_OWVAR 3
21397: PUSH
21398: FOR_IN
21399: IFFALSE 21477
// if IsSelected ( i ) then
21401: LD_VAR 0 2
21405: PPUSH
21406: CALL_OW 306
21410: IFFALSE 21475
// begin j := GetSide ( i ) ;
21412: LD_ADDR_VAR 0 3
21416: PUSH
21417: LD_VAR 0 2
21421: PPUSH
21422: CALL_OW 255
21426: ST_TO_ADDR
// if j = 8 then
21427: LD_VAR 0 3
21431: PUSH
21432: LD_INT 8
21434: EQUAL
21435: IFFALSE 21447
// j := 0 else
21437: LD_ADDR_VAR 0 3
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
21445: GO 21461
// j := j + 1 ;
21447: LD_ADDR_VAR 0 3
21451: PUSH
21452: LD_VAR 0 3
21456: PUSH
21457: LD_INT 1
21459: PLUS
21460: ST_TO_ADDR
// SetSide ( i , j ) ;
21461: LD_VAR 0 2
21465: PPUSH
21466: LD_VAR 0 3
21470: PPUSH
21471: CALL_OW 235
// end ;
21475: GO 21398
21477: POP
21478: POP
// end ;
21479: LD_VAR 0 1
21483: RET
// export function hHackFog ; begin
21484: LD_INT 0
21486: PPUSH
// FogOff ( true ) ;
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 344
// end ;
21494: LD_VAR 0 1
21498: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21499: LD_INT 0
21501: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21502: LD_VAR 0 1
21506: PPUSH
21507: LD_VAR 0 2
21511: PPUSH
21512: LD_VAR 0 3
21516: PPUSH
21517: LD_INT 1
21519: PPUSH
21520: LD_INT 1
21522: PPUSH
21523: CALL_OW 483
// CenterOnXY ( x , y ) ;
21527: LD_VAR 0 2
21531: PPUSH
21532: LD_VAR 0 3
21536: PPUSH
21537: CALL_OW 84
// end ;
21541: LD_VAR 0 4
21545: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21546: LD_INT 0
21548: PPUSH
21549: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21550: LD_VAR 0 1
21554: NOT
21555: PUSH
21556: LD_VAR 0 2
21560: PPUSH
21561: LD_VAR 0 3
21565: PPUSH
21566: CALL_OW 488
21570: NOT
21571: OR
21572: PUSH
21573: LD_VAR 0 1
21577: PPUSH
21578: CALL_OW 266
21582: PUSH
21583: LD_INT 3
21585: NONEQUAL
21586: PUSH
21587: LD_VAR 0 1
21591: PPUSH
21592: CALL_OW 247
21596: PUSH
21597: LD_INT 1
21599: EQUAL
21600: NOT
21601: AND
21602: OR
21603: IFFALSE 21607
// exit ;
21605: GO 21756
// if GetType ( factory ) = unit_human then
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 247
21616: PUSH
21617: LD_INT 1
21619: EQUAL
21620: IFFALSE 21637
// factory := IsInUnit ( factory ) ;
21622: LD_ADDR_VAR 0 1
21626: PUSH
21627: LD_VAR 0 1
21631: PPUSH
21632: CALL_OW 310
21636: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 266
21646: PUSH
21647: LD_INT 3
21649: NONEQUAL
21650: IFFALSE 21654
// exit ;
21652: GO 21756
// if HexInfo ( x , y ) = factory then
21654: LD_VAR 0 2
21658: PPUSH
21659: LD_VAR 0 3
21663: PPUSH
21664: CALL_OW 428
21668: PUSH
21669: LD_VAR 0 1
21673: EQUAL
21674: IFFALSE 21701
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21676: LD_ADDR_EXP 77
21680: PUSH
21681: LD_EXP 77
21685: PPUSH
21686: LD_VAR 0 1
21690: PPUSH
21691: LD_INT 0
21693: PPUSH
21694: CALL_OW 1
21698: ST_TO_ADDR
21699: GO 21752
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21701: LD_ADDR_EXP 77
21705: PUSH
21706: LD_EXP 77
21710: PPUSH
21711: LD_VAR 0 1
21715: PPUSH
21716: LD_VAR 0 1
21720: PPUSH
21721: CALL_OW 255
21725: PUSH
21726: LD_VAR 0 1
21730: PUSH
21731: LD_VAR 0 2
21735: PUSH
21736: LD_VAR 0 3
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: PPUSH
21747: CALL_OW 1
21751: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21752: CALL 21761 0 0
// end ;
21756: LD_VAR 0 4
21760: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21761: LD_INT 0
21763: PPUSH
21764: PPUSH
21765: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21766: LD_STRING resetFactoryWaypoint();
21768: PPUSH
21769: CALL_OW 559
// if factoryWaypoints then
21773: LD_EXP 77
21777: IFFALSE 21903
// begin list := PrepareArray ( factoryWaypoints ) ;
21779: LD_ADDR_VAR 0 3
21783: PUSH
21784: LD_EXP 77
21788: PPUSH
21789: CALL 68225 0 1
21793: ST_TO_ADDR
// for i := 1 to list do
21794: LD_ADDR_VAR 0 2
21798: PUSH
21799: DOUBLE
21800: LD_INT 1
21802: DEC
21803: ST_TO_ADDR
21804: LD_VAR 0 3
21808: PUSH
21809: FOR_TO
21810: IFFALSE 21901
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21812: LD_STRING setFactoryWaypointXY(
21814: PUSH
21815: LD_VAR 0 3
21819: PUSH
21820: LD_VAR 0 2
21824: ARRAY
21825: PUSH
21826: LD_INT 1
21828: ARRAY
21829: STR
21830: PUSH
21831: LD_STRING ,
21833: STR
21834: PUSH
21835: LD_VAR 0 3
21839: PUSH
21840: LD_VAR 0 2
21844: ARRAY
21845: PUSH
21846: LD_INT 2
21848: ARRAY
21849: STR
21850: PUSH
21851: LD_STRING ,
21853: STR
21854: PUSH
21855: LD_VAR 0 3
21859: PUSH
21860: LD_VAR 0 2
21864: ARRAY
21865: PUSH
21866: LD_INT 3
21868: ARRAY
21869: STR
21870: PUSH
21871: LD_STRING ,
21873: STR
21874: PUSH
21875: LD_VAR 0 3
21879: PUSH
21880: LD_VAR 0 2
21884: ARRAY
21885: PUSH
21886: LD_INT 4
21888: ARRAY
21889: STR
21890: PUSH
21891: LD_STRING )
21893: STR
21894: PPUSH
21895: CALL_OW 559
21899: GO 21809
21901: POP
21902: POP
// end ; end ;
21903: LD_VAR 0 1
21907: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21908: LD_INT 0
21910: PPUSH
// if HexInfo ( x , y ) = warehouse then
21911: LD_VAR 0 2
21915: PPUSH
21916: LD_VAR 0 3
21920: PPUSH
21921: CALL_OW 428
21925: PUSH
21926: LD_VAR 0 1
21930: EQUAL
21931: IFFALSE 21958
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21933: LD_ADDR_EXP 78
21937: PUSH
21938: LD_EXP 78
21942: PPUSH
21943: LD_VAR 0 1
21947: PPUSH
21948: LD_INT 0
21950: PPUSH
21951: CALL_OW 1
21955: ST_TO_ADDR
21956: GO 22009
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21958: LD_ADDR_EXP 78
21962: PUSH
21963: LD_EXP 78
21967: PPUSH
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 255
21982: PUSH
21983: LD_VAR 0 1
21987: PUSH
21988: LD_VAR 0 2
21992: PUSH
21993: LD_VAR 0 3
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PPUSH
22004: CALL_OW 1
22008: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22009: CALL 22018 0 0
// end ;
22013: LD_VAR 0 4
22017: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22018: LD_INT 0
22020: PPUSH
22021: PPUSH
22022: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22023: LD_STRING resetWarehouseGatheringPoints();
22025: PPUSH
22026: CALL_OW 559
// if warehouseGatheringPoints then
22030: LD_EXP 78
22034: IFFALSE 22160
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22036: LD_ADDR_VAR 0 3
22040: PUSH
22041: LD_EXP 78
22045: PPUSH
22046: CALL 68225 0 1
22050: ST_TO_ADDR
// for i := 1 to list do
22051: LD_ADDR_VAR 0 2
22055: PUSH
22056: DOUBLE
22057: LD_INT 1
22059: DEC
22060: ST_TO_ADDR
22061: LD_VAR 0 3
22065: PUSH
22066: FOR_TO
22067: IFFALSE 22158
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22069: LD_STRING setWarehouseGatheringPointXY(
22071: PUSH
22072: LD_VAR 0 3
22076: PUSH
22077: LD_VAR 0 2
22081: ARRAY
22082: PUSH
22083: LD_INT 1
22085: ARRAY
22086: STR
22087: PUSH
22088: LD_STRING ,
22090: STR
22091: PUSH
22092: LD_VAR 0 3
22096: PUSH
22097: LD_VAR 0 2
22101: ARRAY
22102: PUSH
22103: LD_INT 2
22105: ARRAY
22106: STR
22107: PUSH
22108: LD_STRING ,
22110: STR
22111: PUSH
22112: LD_VAR 0 3
22116: PUSH
22117: LD_VAR 0 2
22121: ARRAY
22122: PUSH
22123: LD_INT 3
22125: ARRAY
22126: STR
22127: PUSH
22128: LD_STRING ,
22130: STR
22131: PUSH
22132: LD_VAR 0 3
22136: PUSH
22137: LD_VAR 0 2
22141: ARRAY
22142: PUSH
22143: LD_INT 4
22145: ARRAY
22146: STR
22147: PUSH
22148: LD_STRING )
22150: STR
22151: PPUSH
22152: CALL_OW 559
22156: GO 22066
22158: POP
22159: POP
// end ; end ;
22160: LD_VAR 0 1
22164: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22165: LD_EXP 78
22169: IFFALSE 22854
22171: GO 22173
22173: DISABLE
22174: LD_INT 0
22176: PPUSH
22177: PPUSH
22178: PPUSH
22179: PPUSH
22180: PPUSH
22181: PPUSH
22182: PPUSH
22183: PPUSH
22184: PPUSH
// begin enable ;
22185: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22186: LD_ADDR_VAR 0 3
22190: PUSH
22191: LD_EXP 78
22195: PPUSH
22196: CALL 68225 0 1
22200: ST_TO_ADDR
// if not list then
22201: LD_VAR 0 3
22205: NOT
22206: IFFALSE 22210
// exit ;
22208: GO 22854
// for i := 1 to list do
22210: LD_ADDR_VAR 0 1
22214: PUSH
22215: DOUBLE
22216: LD_INT 1
22218: DEC
22219: ST_TO_ADDR
22220: LD_VAR 0 3
22224: PUSH
22225: FOR_TO
22226: IFFALSE 22852
// begin depot := list [ i ] [ 2 ] ;
22228: LD_ADDR_VAR 0 8
22232: PUSH
22233: LD_VAR 0 3
22237: PUSH
22238: LD_VAR 0 1
22242: ARRAY
22243: PUSH
22244: LD_INT 2
22246: ARRAY
22247: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22248: LD_ADDR_VAR 0 5
22252: PUSH
22253: LD_VAR 0 3
22257: PUSH
22258: LD_VAR 0 1
22262: ARRAY
22263: PUSH
22264: LD_INT 1
22266: ARRAY
22267: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22268: LD_VAR 0 8
22272: PPUSH
22273: CALL_OW 301
22277: PUSH
22278: LD_VAR 0 5
22282: PUSH
22283: LD_VAR 0 8
22287: PPUSH
22288: CALL_OW 255
22292: NONEQUAL
22293: OR
22294: IFFALSE 22323
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22296: LD_ADDR_EXP 78
22300: PUSH
22301: LD_EXP 78
22305: PPUSH
22306: LD_VAR 0 8
22310: PPUSH
22311: LD_INT 0
22313: PPUSH
22314: CALL_OW 1
22318: ST_TO_ADDR
// exit ;
22319: POP
22320: POP
22321: GO 22854
// end ; x := list [ i ] [ 3 ] ;
22323: LD_ADDR_VAR 0 6
22327: PUSH
22328: LD_VAR 0 3
22332: PUSH
22333: LD_VAR 0 1
22337: ARRAY
22338: PUSH
22339: LD_INT 3
22341: ARRAY
22342: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22343: LD_ADDR_VAR 0 7
22347: PUSH
22348: LD_VAR 0 3
22352: PUSH
22353: LD_VAR 0 1
22357: ARRAY
22358: PUSH
22359: LD_INT 4
22361: ARRAY
22362: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22363: LD_ADDR_VAR 0 9
22367: PUSH
22368: LD_VAR 0 6
22372: PPUSH
22373: LD_VAR 0 7
22377: PPUSH
22378: LD_INT 16
22380: PPUSH
22381: CALL 66813 0 3
22385: ST_TO_ADDR
// if not cratesNearbyPoint then
22386: LD_VAR 0 9
22390: NOT
22391: IFFALSE 22397
// exit ;
22393: POP
22394: POP
22395: GO 22854
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22397: LD_ADDR_VAR 0 4
22401: PUSH
22402: LD_INT 22
22404: PUSH
22405: LD_VAR 0 5
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 3
22416: PUSH
22417: LD_INT 60
22419: PUSH
22420: EMPTY
22421: LIST
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 91
22429: PUSH
22430: LD_VAR 0 8
22434: PUSH
22435: LD_INT 6
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 2
22445: PUSH
22446: LD_INT 25
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 25
22458: PUSH
22459: LD_INT 16
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 69
22481: PUSH
22482: LD_VAR 0 8
22486: PPUSH
22487: CALL_OW 313
22491: PPUSH
22492: LD_INT 3
22494: PUSH
22495: LD_INT 60
22497: PUSH
22498: EMPTY
22499: LIST
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: LD_INT 25
22510: PUSH
22511: LD_INT 2
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 25
22520: PUSH
22521: LD_INT 16
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: LIST
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PPUSH
22537: CALL_OW 72
22541: UNION
22542: ST_TO_ADDR
// if tmp then
22543: LD_VAR 0 4
22547: IFFALSE 22627
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22549: LD_ADDR_VAR 0 4
22553: PUSH
22554: LD_VAR 0 4
22558: PPUSH
22559: LD_INT 3
22561: PPUSH
22562: CALL 64782 0 2
22566: ST_TO_ADDR
// for j in tmp do
22567: LD_ADDR_VAR 0 2
22571: PUSH
22572: LD_VAR 0 4
22576: PUSH
22577: FOR_IN
22578: IFFALSE 22621
// begin if IsInUnit ( j ) then
22580: LD_VAR 0 2
22584: PPUSH
22585: CALL_OW 310
22589: IFFALSE 22600
// ComExit ( j ) ;
22591: LD_VAR 0 2
22595: PPUSH
22596: CALL 64865 0 1
// AddComCollect ( j , x , y ) ;
22600: LD_VAR 0 2
22604: PPUSH
22605: LD_VAR 0 6
22609: PPUSH
22610: LD_VAR 0 7
22614: PPUSH
22615: CALL_OW 177
// end ;
22619: GO 22577
22621: POP
22622: POP
// exit ;
22623: POP
22624: POP
22625: GO 22854
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22627: LD_ADDR_VAR 0 4
22631: PUSH
22632: LD_INT 22
22634: PUSH
22635: LD_VAR 0 5
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 91
22646: PUSH
22647: LD_VAR 0 8
22651: PUSH
22652: LD_INT 8
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: LD_INT 34
22665: PUSH
22666: LD_INT 12
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 34
22675: PUSH
22676: LD_INT 51
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 34
22685: PUSH
22686: LD_INT 32
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 34
22695: PUSH
22696: LD_INT 89
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: LIST
22714: PPUSH
22715: CALL_OW 69
22719: ST_TO_ADDR
// if tmp then
22720: LD_VAR 0 4
22724: IFFALSE 22850
// begin for j in tmp do
22726: LD_ADDR_VAR 0 2
22730: PUSH
22731: LD_VAR 0 4
22735: PUSH
22736: FOR_IN
22737: IFFALSE 22848
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22739: LD_VAR 0 2
22743: PPUSH
22744: CALL_OW 262
22748: PUSH
22749: LD_INT 3
22751: EQUAL
22752: PUSH
22753: LD_VAR 0 2
22757: PPUSH
22758: CALL_OW 261
22762: PUSH
22763: LD_INT 20
22765: GREATER
22766: OR
22767: PUSH
22768: LD_VAR 0 2
22772: PPUSH
22773: CALL_OW 314
22777: NOT
22778: AND
22779: PUSH
22780: LD_VAR 0 2
22784: PPUSH
22785: CALL_OW 263
22789: PUSH
22790: LD_INT 1
22792: NONEQUAL
22793: PUSH
22794: LD_VAR 0 2
22798: PPUSH
22799: CALL_OW 311
22803: OR
22804: AND
22805: IFFALSE 22846
// begin ComCollect ( j , x , y ) ;
22807: LD_VAR 0 2
22811: PPUSH
22812: LD_VAR 0 6
22816: PPUSH
22817: LD_VAR 0 7
22821: PPUSH
22822: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22826: LD_VAR 0 2
22830: PPUSH
22831: LD_VAR 0 8
22835: PPUSH
22836: CALL_OW 172
// exit ;
22840: POP
22841: POP
22842: POP
22843: POP
22844: GO 22854
// end ;
22846: GO 22736
22848: POP
22849: POP
// end ; end ;
22850: GO 22225
22852: POP
22853: POP
// end ; end_of_file
22854: PPOPN 9
22856: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22857: LD_INT 0
22859: PPUSH
22860: PPUSH
22861: PPUSH
22862: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22863: LD_VAR 0 1
22867: PPUSH
22868: CALL_OW 264
22872: PUSH
22873: LD_INT 91
22875: EQUAL
22876: IFFALSE 22948
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22878: LD_INT 68
22880: PPUSH
22881: LD_VAR 0 1
22885: PPUSH
22886: CALL_OW 255
22890: PPUSH
22891: CALL_OW 321
22895: PUSH
22896: LD_INT 2
22898: EQUAL
22899: IFFALSE 22911
// eff := 70 else
22901: LD_ADDR_VAR 0 4
22905: PUSH
22906: LD_INT 70
22908: ST_TO_ADDR
22909: GO 22919
// eff := 30 ;
22911: LD_ADDR_VAR 0 4
22915: PUSH
22916: LD_INT 30
22918: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22919: LD_VAR 0 1
22923: PPUSH
22924: CALL_OW 250
22928: PPUSH
22929: LD_VAR 0 1
22933: PPUSH
22934: CALL_OW 251
22938: PPUSH
22939: LD_VAR 0 4
22943: PPUSH
22944: CALL_OW 495
// end ; end ;
22948: LD_VAR 0 2
22952: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22953: LD_INT 0
22955: PPUSH
// end ;
22956: LD_VAR 0 4
22960: RET
// export function SOS_Command ( cmd ) ; begin
22961: LD_INT 0
22963: PPUSH
// end ;
22964: LD_VAR 0 2
22968: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22969: LD_INT 0
22971: PPUSH
// end ;
22972: LD_VAR 0 6
22976: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22977: LD_INT 0
22979: PPUSH
22980: PPUSH
// if not vehicle or not factory then
22981: LD_VAR 0 1
22985: NOT
22986: PUSH
22987: LD_VAR 0 2
22991: NOT
22992: OR
22993: IFFALSE 22997
// exit ;
22995: GO 23228
// if factoryWaypoints >= factory then
22997: LD_EXP 77
23001: PUSH
23002: LD_VAR 0 2
23006: GREATEREQUAL
23007: IFFALSE 23228
// if factoryWaypoints [ factory ] then
23009: LD_EXP 77
23013: PUSH
23014: LD_VAR 0 2
23018: ARRAY
23019: IFFALSE 23228
// begin if GetControl ( vehicle ) = control_manual then
23021: LD_VAR 0 1
23025: PPUSH
23026: CALL_OW 263
23030: PUSH
23031: LD_INT 1
23033: EQUAL
23034: IFFALSE 23115
// begin driver := IsDrivenBy ( vehicle ) ;
23036: LD_ADDR_VAR 0 4
23040: PUSH
23041: LD_VAR 0 1
23045: PPUSH
23046: CALL_OW 311
23050: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23051: LD_VAR 0 4
23055: PPUSH
23056: LD_EXP 77
23060: PUSH
23061: LD_VAR 0 2
23065: ARRAY
23066: PUSH
23067: LD_INT 3
23069: ARRAY
23070: PPUSH
23071: LD_EXP 77
23075: PUSH
23076: LD_VAR 0 2
23080: ARRAY
23081: PUSH
23082: LD_INT 4
23084: ARRAY
23085: PPUSH
23086: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23090: LD_VAR 0 4
23094: PPUSH
23095: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23099: LD_VAR 0 4
23103: PPUSH
23104: LD_VAR 0 2
23108: PPUSH
23109: CALL_OW 180
// end else
23113: GO 23228
// if GetControl ( vehicle ) = control_remote then
23115: LD_VAR 0 1
23119: PPUSH
23120: CALL_OW 263
23124: PUSH
23125: LD_INT 2
23127: EQUAL
23128: IFFALSE 23189
// begin wait ( 0 0$2 ) ;
23130: LD_INT 70
23132: PPUSH
23133: CALL_OW 67
// if Connect ( vehicle ) then
23137: LD_VAR 0 1
23141: PPUSH
23142: CALL 35086 0 1
23146: IFFALSE 23187
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23148: LD_VAR 0 1
23152: PPUSH
23153: LD_EXP 77
23157: PUSH
23158: LD_VAR 0 2
23162: ARRAY
23163: PUSH
23164: LD_INT 3
23166: ARRAY
23167: PPUSH
23168: LD_EXP 77
23172: PUSH
23173: LD_VAR 0 2
23177: ARRAY
23178: PUSH
23179: LD_INT 4
23181: ARRAY
23182: PPUSH
23183: CALL_OW 171
// end else
23187: GO 23228
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23189: LD_VAR 0 1
23193: PPUSH
23194: LD_EXP 77
23198: PUSH
23199: LD_VAR 0 2
23203: ARRAY
23204: PUSH
23205: LD_INT 3
23207: ARRAY
23208: PPUSH
23209: LD_EXP 77
23213: PUSH
23214: LD_VAR 0 2
23218: ARRAY
23219: PUSH
23220: LD_INT 4
23222: ARRAY
23223: PPUSH
23224: CALL_OW 171
// end ; end ;
23228: LD_VAR 0 3
23232: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23233: LD_INT 0
23235: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23236: LD_VAR 0 1
23240: PUSH
23241: LD_INT 250
23243: EQUAL
23244: PUSH
23245: LD_VAR 0 2
23249: PPUSH
23250: CALL_OW 264
23254: PUSH
23255: LD_INT 81
23257: EQUAL
23258: AND
23259: IFFALSE 23280
// MinerPlaceMine ( unit , x , y ) ;
23261: LD_VAR 0 2
23265: PPUSH
23266: LD_VAR 0 4
23270: PPUSH
23271: LD_VAR 0 5
23275: PPUSH
23276: CALL 25665 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23280: LD_VAR 0 1
23284: PUSH
23285: LD_INT 251
23287: EQUAL
23288: PUSH
23289: LD_VAR 0 2
23293: PPUSH
23294: CALL_OW 264
23298: PUSH
23299: LD_INT 81
23301: EQUAL
23302: AND
23303: IFFALSE 23324
// MinerDetonateMine ( unit , x , y ) ;
23305: LD_VAR 0 2
23309: PPUSH
23310: LD_VAR 0 4
23314: PPUSH
23315: LD_VAR 0 5
23319: PPUSH
23320: CALL 25940 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23324: LD_VAR 0 1
23328: PUSH
23329: LD_INT 252
23331: EQUAL
23332: PUSH
23333: LD_VAR 0 2
23337: PPUSH
23338: CALL_OW 264
23342: PUSH
23343: LD_INT 81
23345: EQUAL
23346: AND
23347: IFFALSE 23368
// MinerCreateMinefield ( unit , x , y ) ;
23349: LD_VAR 0 2
23353: PPUSH
23354: LD_VAR 0 4
23358: PPUSH
23359: LD_VAR 0 5
23363: PPUSH
23364: CALL 26357 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23368: LD_VAR 0 1
23372: PUSH
23373: LD_INT 253
23375: EQUAL
23376: PUSH
23377: LD_VAR 0 2
23381: PPUSH
23382: CALL_OW 257
23386: PUSH
23387: LD_INT 5
23389: EQUAL
23390: AND
23391: IFFALSE 23412
// ComBinocular ( unit , x , y ) ;
23393: LD_VAR 0 2
23397: PPUSH
23398: LD_VAR 0 4
23402: PPUSH
23403: LD_VAR 0 5
23407: PPUSH
23408: CALL 26726 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23412: LD_VAR 0 1
23416: PUSH
23417: LD_INT 254
23419: EQUAL
23420: PUSH
23421: LD_VAR 0 2
23425: PPUSH
23426: CALL_OW 264
23430: PUSH
23431: LD_INT 99
23433: EQUAL
23434: AND
23435: PUSH
23436: LD_VAR 0 3
23440: PPUSH
23441: CALL_OW 263
23445: PUSH
23446: LD_INT 3
23448: EQUAL
23449: AND
23450: IFFALSE 23466
// HackDestroyVehicle ( unit , selectedUnit ) ;
23452: LD_VAR 0 2
23456: PPUSH
23457: LD_VAR 0 3
23461: PPUSH
23462: CALL 25029 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23466: LD_VAR 0 1
23470: PUSH
23471: LD_INT 255
23473: EQUAL
23474: PUSH
23475: LD_VAR 0 2
23479: PPUSH
23480: CALL_OW 264
23484: PUSH
23485: LD_INT 14
23487: PUSH
23488: LD_INT 53
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: IN
23495: AND
23496: PUSH
23497: LD_VAR 0 4
23501: PPUSH
23502: LD_VAR 0 5
23506: PPUSH
23507: CALL_OW 488
23511: AND
23512: IFFALSE 23536
// CutTreeXYR ( unit , x , y , 12 ) ;
23514: LD_VAR 0 2
23518: PPUSH
23519: LD_VAR 0 4
23523: PPUSH
23524: LD_VAR 0 5
23528: PPUSH
23529: LD_INT 12
23531: PPUSH
23532: CALL 23599 0 4
// if cmd = 256 then
23536: LD_VAR 0 1
23540: PUSH
23541: LD_INT 256
23543: EQUAL
23544: IFFALSE 23565
// SetFactoryWaypoint ( unit , x , y ) ;
23546: LD_VAR 0 2
23550: PPUSH
23551: LD_VAR 0 4
23555: PPUSH
23556: LD_VAR 0 5
23560: PPUSH
23561: CALL 21546 0 3
// if cmd = 257 then
23565: LD_VAR 0 1
23569: PUSH
23570: LD_INT 257
23572: EQUAL
23573: IFFALSE 23594
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23575: LD_VAR 0 2
23579: PPUSH
23580: LD_VAR 0 4
23584: PPUSH
23585: LD_VAR 0 5
23589: PPUSH
23590: CALL 21908 0 3
// end ;
23594: LD_VAR 0 6
23598: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23599: LD_INT 0
23601: PPUSH
23602: PPUSH
23603: PPUSH
23604: PPUSH
23605: PPUSH
23606: PPUSH
23607: PPUSH
23608: PPUSH
23609: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23610: LD_VAR 0 1
23614: NOT
23615: PUSH
23616: LD_VAR 0 2
23620: PPUSH
23621: LD_VAR 0 3
23625: PPUSH
23626: CALL_OW 488
23630: NOT
23631: OR
23632: PUSH
23633: LD_VAR 0 4
23637: NOT
23638: OR
23639: IFFALSE 23643
// exit ;
23641: GO 23983
// list := [ ] ;
23643: LD_ADDR_VAR 0 13
23647: PUSH
23648: EMPTY
23649: ST_TO_ADDR
// if x - r < 0 then
23650: LD_VAR 0 2
23654: PUSH
23655: LD_VAR 0 4
23659: MINUS
23660: PUSH
23661: LD_INT 0
23663: LESS
23664: IFFALSE 23676
// min_x := 0 else
23666: LD_ADDR_VAR 0 7
23670: PUSH
23671: LD_INT 0
23673: ST_TO_ADDR
23674: GO 23692
// min_x := x - r ;
23676: LD_ADDR_VAR 0 7
23680: PUSH
23681: LD_VAR 0 2
23685: PUSH
23686: LD_VAR 0 4
23690: MINUS
23691: ST_TO_ADDR
// if y - r < 0 then
23692: LD_VAR 0 3
23696: PUSH
23697: LD_VAR 0 4
23701: MINUS
23702: PUSH
23703: LD_INT 0
23705: LESS
23706: IFFALSE 23718
// min_y := 0 else
23708: LD_ADDR_VAR 0 8
23712: PUSH
23713: LD_INT 0
23715: ST_TO_ADDR
23716: GO 23734
// min_y := y - r ;
23718: LD_ADDR_VAR 0 8
23722: PUSH
23723: LD_VAR 0 3
23727: PUSH
23728: LD_VAR 0 4
23732: MINUS
23733: ST_TO_ADDR
// max_x := x + r ;
23734: LD_ADDR_VAR 0 9
23738: PUSH
23739: LD_VAR 0 2
23743: PUSH
23744: LD_VAR 0 4
23748: PLUS
23749: ST_TO_ADDR
// max_y := y + r ;
23750: LD_ADDR_VAR 0 10
23754: PUSH
23755: LD_VAR 0 3
23759: PUSH
23760: LD_VAR 0 4
23764: PLUS
23765: ST_TO_ADDR
// for _x = min_x to max_x do
23766: LD_ADDR_VAR 0 11
23770: PUSH
23771: DOUBLE
23772: LD_VAR 0 7
23776: DEC
23777: ST_TO_ADDR
23778: LD_VAR 0 9
23782: PUSH
23783: FOR_TO
23784: IFFALSE 23901
// for _y = min_y to max_y do
23786: LD_ADDR_VAR 0 12
23790: PUSH
23791: DOUBLE
23792: LD_VAR 0 8
23796: DEC
23797: ST_TO_ADDR
23798: LD_VAR 0 10
23802: PUSH
23803: FOR_TO
23804: IFFALSE 23897
// begin if not ValidHex ( _x , _y ) then
23806: LD_VAR 0 11
23810: PPUSH
23811: LD_VAR 0 12
23815: PPUSH
23816: CALL_OW 488
23820: NOT
23821: IFFALSE 23825
// continue ;
23823: GO 23803
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23825: LD_VAR 0 11
23829: PPUSH
23830: LD_VAR 0 12
23834: PPUSH
23835: CALL_OW 351
23839: PUSH
23840: LD_VAR 0 11
23844: PPUSH
23845: LD_VAR 0 12
23849: PPUSH
23850: CALL_OW 554
23854: AND
23855: IFFALSE 23895
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23857: LD_ADDR_VAR 0 13
23861: PUSH
23862: LD_VAR 0 13
23866: PPUSH
23867: LD_VAR 0 13
23871: PUSH
23872: LD_INT 1
23874: PLUS
23875: PPUSH
23876: LD_VAR 0 11
23880: PUSH
23881: LD_VAR 0 12
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PPUSH
23890: CALL_OW 2
23894: ST_TO_ADDR
// end ;
23895: GO 23803
23897: POP
23898: POP
23899: GO 23783
23901: POP
23902: POP
// if not list then
23903: LD_VAR 0 13
23907: NOT
23908: IFFALSE 23912
// exit ;
23910: GO 23983
// for i in list do
23912: LD_ADDR_VAR 0 6
23916: PUSH
23917: LD_VAR 0 13
23921: PUSH
23922: FOR_IN
23923: IFFALSE 23981
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23925: LD_VAR 0 1
23929: PPUSH
23930: LD_STRING M
23932: PUSH
23933: LD_VAR 0 6
23937: PUSH
23938: LD_INT 1
23940: ARRAY
23941: PUSH
23942: LD_VAR 0 6
23946: PUSH
23947: LD_INT 2
23949: ARRAY
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: PUSH
23972: EMPTY
23973: LIST
23974: PPUSH
23975: CALL_OW 447
23979: GO 23922
23981: POP
23982: POP
// end ;
23983: LD_VAR 0 5
23987: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23988: LD_EXP 80
23992: NOT
23993: IFFALSE 24043
23995: GO 23997
23997: DISABLE
// begin initHack := true ;
23998: LD_ADDR_EXP 80
24002: PUSH
24003: LD_INT 1
24005: ST_TO_ADDR
// hackTanks := [ ] ;
24006: LD_ADDR_EXP 81
24010: PUSH
24011: EMPTY
24012: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24013: LD_ADDR_EXP 82
24017: PUSH
24018: EMPTY
24019: ST_TO_ADDR
// hackLimit := 3 ;
24020: LD_ADDR_EXP 83
24024: PUSH
24025: LD_INT 3
24027: ST_TO_ADDR
// hackDist := 12 ;
24028: LD_ADDR_EXP 84
24032: PUSH
24033: LD_INT 12
24035: ST_TO_ADDR
// hackCounter := [ ] ;
24036: LD_ADDR_EXP 85
24040: PUSH
24041: EMPTY
24042: ST_TO_ADDR
// end ;
24043: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24044: LD_EXP 80
24048: PUSH
24049: LD_INT 34
24051: PUSH
24052: LD_INT 99
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PPUSH
24059: CALL_OW 69
24063: AND
24064: IFFALSE 24317
24066: GO 24068
24068: DISABLE
24069: LD_INT 0
24071: PPUSH
24072: PPUSH
// begin enable ;
24073: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24074: LD_ADDR_VAR 0 1
24078: PUSH
24079: LD_INT 34
24081: PUSH
24082: LD_INT 99
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PPUSH
24089: CALL_OW 69
24093: PUSH
24094: FOR_IN
24095: IFFALSE 24315
// begin if not i in hackTanks then
24097: LD_VAR 0 1
24101: PUSH
24102: LD_EXP 81
24106: IN
24107: NOT
24108: IFFALSE 24191
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24110: LD_ADDR_EXP 81
24114: PUSH
24115: LD_EXP 81
24119: PPUSH
24120: LD_EXP 81
24124: PUSH
24125: LD_INT 1
24127: PLUS
24128: PPUSH
24129: LD_VAR 0 1
24133: PPUSH
24134: CALL_OW 1
24138: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24139: LD_ADDR_EXP 82
24143: PUSH
24144: LD_EXP 82
24148: PPUSH
24149: LD_EXP 82
24153: PUSH
24154: LD_INT 1
24156: PLUS
24157: PPUSH
24158: EMPTY
24159: PPUSH
24160: CALL_OW 1
24164: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24165: LD_ADDR_EXP 85
24169: PUSH
24170: LD_EXP 85
24174: PPUSH
24175: LD_EXP 85
24179: PUSH
24180: LD_INT 1
24182: PLUS
24183: PPUSH
24184: EMPTY
24185: PPUSH
24186: CALL_OW 1
24190: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24191: LD_VAR 0 1
24195: PPUSH
24196: CALL_OW 302
24200: NOT
24201: IFFALSE 24214
// begin HackUnlinkAll ( i ) ;
24203: LD_VAR 0 1
24207: PPUSH
24208: CALL 24320 0 1
// continue ;
24212: GO 24094
// end ; HackCheckCapturedStatus ( i ) ;
24214: LD_VAR 0 1
24218: PPUSH
24219: CALL 24763 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24223: LD_ADDR_VAR 0 2
24227: PUSH
24228: LD_INT 81
24230: PUSH
24231: LD_VAR 0 1
24235: PPUSH
24236: CALL_OW 255
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 33
24247: PUSH
24248: LD_INT 3
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 91
24257: PUSH
24258: LD_VAR 0 1
24262: PUSH
24263: LD_EXP 84
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 50
24275: PUSH
24276: EMPTY
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 69
24289: ST_TO_ADDR
// if not tmp then
24290: LD_VAR 0 2
24294: NOT
24295: IFFALSE 24299
// continue ;
24297: GO 24094
// HackLink ( i , tmp ) ;
24299: LD_VAR 0 1
24303: PPUSH
24304: LD_VAR 0 2
24308: PPUSH
24309: CALL 24456 0 2
// end ;
24313: GO 24094
24315: POP
24316: POP
// end ;
24317: PPOPN 2
24319: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24320: LD_INT 0
24322: PPUSH
24323: PPUSH
24324: PPUSH
// if not hack in hackTanks then
24325: LD_VAR 0 1
24329: PUSH
24330: LD_EXP 81
24334: IN
24335: NOT
24336: IFFALSE 24340
// exit ;
24338: GO 24451
// index := GetElementIndex ( hackTanks , hack ) ;
24340: LD_ADDR_VAR 0 4
24344: PUSH
24345: LD_EXP 81
24349: PPUSH
24350: LD_VAR 0 1
24354: PPUSH
24355: CALL 31893 0 2
24359: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24360: LD_EXP 82
24364: PUSH
24365: LD_VAR 0 4
24369: ARRAY
24370: IFFALSE 24451
// begin for i in hackTanksCaptured [ index ] do
24372: LD_ADDR_VAR 0 3
24376: PUSH
24377: LD_EXP 82
24381: PUSH
24382: LD_VAR 0 4
24386: ARRAY
24387: PUSH
24388: FOR_IN
24389: IFFALSE 24415
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24391: LD_VAR 0 3
24395: PUSH
24396: LD_INT 1
24398: ARRAY
24399: PPUSH
24400: LD_VAR 0 3
24404: PUSH
24405: LD_INT 2
24407: ARRAY
24408: PPUSH
24409: CALL_OW 235
24413: GO 24388
24415: POP
24416: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24417: LD_ADDR_EXP 82
24421: PUSH
24422: LD_EXP 82
24426: PPUSH
24427: LD_VAR 0 4
24431: PPUSH
24432: EMPTY
24433: PPUSH
24434: CALL_OW 1
24438: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24439: LD_VAR 0 1
24443: PPUSH
24444: LD_INT 0
24446: PPUSH
24447: CALL_OW 505
// end ; end ;
24451: LD_VAR 0 2
24455: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24456: LD_INT 0
24458: PPUSH
24459: PPUSH
24460: PPUSH
// if not hack in hackTanks or not vehicles then
24461: LD_VAR 0 1
24465: PUSH
24466: LD_EXP 81
24470: IN
24471: NOT
24472: PUSH
24473: LD_VAR 0 2
24477: NOT
24478: OR
24479: IFFALSE 24483
// exit ;
24481: GO 24758
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24483: LD_ADDR_VAR 0 2
24487: PUSH
24488: LD_VAR 0 1
24492: PPUSH
24493: LD_VAR 0 2
24497: PPUSH
24498: LD_INT 1
24500: PPUSH
24501: LD_INT 1
24503: PPUSH
24504: CALL 32543 0 4
24508: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24509: LD_ADDR_VAR 0 5
24513: PUSH
24514: LD_EXP 81
24518: PPUSH
24519: LD_VAR 0 1
24523: PPUSH
24524: CALL 31893 0 2
24528: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24529: LD_EXP 82
24533: PUSH
24534: LD_VAR 0 5
24538: ARRAY
24539: PUSH
24540: LD_EXP 83
24544: LESS
24545: IFFALSE 24734
// begin for i := 1 to vehicles do
24547: LD_ADDR_VAR 0 4
24551: PUSH
24552: DOUBLE
24553: LD_INT 1
24555: DEC
24556: ST_TO_ADDR
24557: LD_VAR 0 2
24561: PUSH
24562: FOR_TO
24563: IFFALSE 24732
// begin if hackTanksCaptured [ index ] = hackLimit then
24565: LD_EXP 82
24569: PUSH
24570: LD_VAR 0 5
24574: ARRAY
24575: PUSH
24576: LD_EXP 83
24580: EQUAL
24581: IFFALSE 24585
// break ;
24583: GO 24732
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24585: LD_ADDR_EXP 85
24589: PUSH
24590: LD_EXP 85
24594: PPUSH
24595: LD_VAR 0 5
24599: PPUSH
24600: LD_EXP 85
24604: PUSH
24605: LD_VAR 0 5
24609: ARRAY
24610: PUSH
24611: LD_INT 1
24613: PLUS
24614: PPUSH
24615: CALL_OW 1
24619: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24620: LD_ADDR_EXP 82
24624: PUSH
24625: LD_EXP 82
24629: PPUSH
24630: LD_VAR 0 5
24634: PUSH
24635: LD_EXP 82
24639: PUSH
24640: LD_VAR 0 5
24644: ARRAY
24645: PUSH
24646: LD_INT 1
24648: PLUS
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PPUSH
24654: LD_VAR 0 2
24658: PUSH
24659: LD_VAR 0 4
24663: ARRAY
24664: PUSH
24665: LD_VAR 0 2
24669: PUSH
24670: LD_VAR 0 4
24674: ARRAY
24675: PPUSH
24676: CALL_OW 255
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PPUSH
24685: CALL 32108 0 3
24689: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24690: LD_VAR 0 2
24694: PUSH
24695: LD_VAR 0 4
24699: ARRAY
24700: PPUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 255
24710: PPUSH
24711: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24715: LD_VAR 0 2
24719: PUSH
24720: LD_VAR 0 4
24724: ARRAY
24725: PPUSH
24726: CALL_OW 141
// end ;
24730: GO 24562
24732: POP
24733: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24734: LD_VAR 0 1
24738: PPUSH
24739: LD_EXP 82
24743: PUSH
24744: LD_VAR 0 5
24748: ARRAY
24749: PUSH
24750: LD_INT 0
24752: PLUS
24753: PPUSH
24754: CALL_OW 505
// end ;
24758: LD_VAR 0 3
24762: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24763: LD_INT 0
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
// if not hack in hackTanks then
24769: LD_VAR 0 1
24773: PUSH
24774: LD_EXP 81
24778: IN
24779: NOT
24780: IFFALSE 24784
// exit ;
24782: GO 25024
// index := GetElementIndex ( hackTanks , hack ) ;
24784: LD_ADDR_VAR 0 4
24788: PUSH
24789: LD_EXP 81
24793: PPUSH
24794: LD_VAR 0 1
24798: PPUSH
24799: CALL 31893 0 2
24803: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24804: LD_ADDR_VAR 0 3
24808: PUSH
24809: DOUBLE
24810: LD_EXP 82
24814: PUSH
24815: LD_VAR 0 4
24819: ARRAY
24820: INC
24821: ST_TO_ADDR
24822: LD_INT 1
24824: PUSH
24825: FOR_DOWNTO
24826: IFFALSE 24998
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24828: LD_ADDR_VAR 0 5
24832: PUSH
24833: LD_EXP 82
24837: PUSH
24838: LD_VAR 0 4
24842: ARRAY
24843: PUSH
24844: LD_VAR 0 3
24848: ARRAY
24849: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24850: LD_VAR 0 5
24854: PUSH
24855: LD_INT 1
24857: ARRAY
24858: PPUSH
24859: CALL_OW 302
24863: NOT
24864: PUSH
24865: LD_VAR 0 5
24869: PUSH
24870: LD_INT 1
24872: ARRAY
24873: PPUSH
24874: CALL_OW 255
24878: PUSH
24879: LD_VAR 0 1
24883: PPUSH
24884: CALL_OW 255
24888: NONEQUAL
24889: OR
24890: IFFALSE 24996
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24892: LD_VAR 0 5
24896: PUSH
24897: LD_INT 1
24899: ARRAY
24900: PPUSH
24901: CALL_OW 305
24905: PUSH
24906: LD_VAR 0 5
24910: PUSH
24911: LD_INT 1
24913: ARRAY
24914: PPUSH
24915: CALL_OW 255
24919: PUSH
24920: LD_VAR 0 1
24924: PPUSH
24925: CALL_OW 255
24929: EQUAL
24930: AND
24931: IFFALSE 24955
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24933: LD_VAR 0 5
24937: PUSH
24938: LD_INT 1
24940: ARRAY
24941: PPUSH
24942: LD_VAR 0 5
24946: PUSH
24947: LD_INT 2
24949: ARRAY
24950: PPUSH
24951: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24955: LD_ADDR_EXP 82
24959: PUSH
24960: LD_EXP 82
24964: PPUSH
24965: LD_VAR 0 4
24969: PPUSH
24970: LD_EXP 82
24974: PUSH
24975: LD_VAR 0 4
24979: ARRAY
24980: PPUSH
24981: LD_VAR 0 3
24985: PPUSH
24986: CALL_OW 3
24990: PPUSH
24991: CALL_OW 1
24995: ST_TO_ADDR
// end ; end ;
24996: GO 24825
24998: POP
24999: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25000: LD_VAR 0 1
25004: PPUSH
25005: LD_EXP 82
25009: PUSH
25010: LD_VAR 0 4
25014: ARRAY
25015: PUSH
25016: LD_INT 0
25018: PLUS
25019: PPUSH
25020: CALL_OW 505
// end ;
25024: LD_VAR 0 2
25028: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25029: LD_INT 0
25031: PPUSH
25032: PPUSH
25033: PPUSH
25034: PPUSH
// if not hack in hackTanks then
25035: LD_VAR 0 1
25039: PUSH
25040: LD_EXP 81
25044: IN
25045: NOT
25046: IFFALSE 25050
// exit ;
25048: GO 25135
// index := GetElementIndex ( hackTanks , hack ) ;
25050: LD_ADDR_VAR 0 5
25054: PUSH
25055: LD_EXP 81
25059: PPUSH
25060: LD_VAR 0 1
25064: PPUSH
25065: CALL 31893 0 2
25069: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25070: LD_ADDR_VAR 0 4
25074: PUSH
25075: DOUBLE
25076: LD_INT 1
25078: DEC
25079: ST_TO_ADDR
25080: LD_EXP 82
25084: PUSH
25085: LD_VAR 0 5
25089: ARRAY
25090: PUSH
25091: FOR_TO
25092: IFFALSE 25133
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25094: LD_EXP 82
25098: PUSH
25099: LD_VAR 0 5
25103: ARRAY
25104: PUSH
25105: LD_VAR 0 4
25109: ARRAY
25110: PUSH
25111: LD_INT 1
25113: ARRAY
25114: PUSH
25115: LD_VAR 0 2
25119: EQUAL
25120: IFFALSE 25131
// KillUnit ( vehicle ) ;
25122: LD_VAR 0 2
25126: PPUSH
25127: CALL_OW 66
25131: GO 25091
25133: POP
25134: POP
// end ;
25135: LD_VAR 0 3
25139: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25140: LD_EXP 86
25144: NOT
25145: IFFALSE 25180
25147: GO 25149
25149: DISABLE
// begin initMiner := true ;
25150: LD_ADDR_EXP 86
25154: PUSH
25155: LD_INT 1
25157: ST_TO_ADDR
// minersList := [ ] ;
25158: LD_ADDR_EXP 87
25162: PUSH
25163: EMPTY
25164: ST_TO_ADDR
// minerMinesList := [ ] ;
25165: LD_ADDR_EXP 88
25169: PUSH
25170: EMPTY
25171: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25172: LD_ADDR_EXP 89
25176: PUSH
25177: LD_INT 5
25179: ST_TO_ADDR
// end ;
25180: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25181: LD_EXP 86
25185: PUSH
25186: LD_INT 34
25188: PUSH
25189: LD_INT 81
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PPUSH
25196: CALL_OW 69
25200: AND
25201: IFFALSE 25662
25203: GO 25205
25205: DISABLE
25206: LD_INT 0
25208: PPUSH
25209: PPUSH
25210: PPUSH
25211: PPUSH
// begin enable ;
25212: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25213: LD_ADDR_VAR 0 1
25217: PUSH
25218: LD_INT 34
25220: PUSH
25221: LD_INT 81
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PPUSH
25228: CALL_OW 69
25232: PUSH
25233: FOR_IN
25234: IFFALSE 25306
// begin if not i in minersList then
25236: LD_VAR 0 1
25240: PUSH
25241: LD_EXP 87
25245: IN
25246: NOT
25247: IFFALSE 25304
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25249: LD_ADDR_EXP 87
25253: PUSH
25254: LD_EXP 87
25258: PPUSH
25259: LD_EXP 87
25263: PUSH
25264: LD_INT 1
25266: PLUS
25267: PPUSH
25268: LD_VAR 0 1
25272: PPUSH
25273: CALL_OW 1
25277: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25278: LD_ADDR_EXP 88
25282: PUSH
25283: LD_EXP 88
25287: PPUSH
25288: LD_EXP 88
25292: PUSH
25293: LD_INT 1
25295: PLUS
25296: PPUSH
25297: EMPTY
25298: PPUSH
25299: CALL_OW 1
25303: ST_TO_ADDR
// end end ;
25304: GO 25233
25306: POP
25307: POP
// for i := minerMinesList downto 1 do
25308: LD_ADDR_VAR 0 1
25312: PUSH
25313: DOUBLE
25314: LD_EXP 88
25318: INC
25319: ST_TO_ADDR
25320: LD_INT 1
25322: PUSH
25323: FOR_DOWNTO
25324: IFFALSE 25660
// begin if IsLive ( minersList [ i ] ) then
25326: LD_EXP 87
25330: PUSH
25331: LD_VAR 0 1
25335: ARRAY
25336: PPUSH
25337: CALL_OW 300
25341: IFFALSE 25369
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25343: LD_EXP 87
25347: PUSH
25348: LD_VAR 0 1
25352: ARRAY
25353: PPUSH
25354: LD_EXP 88
25358: PUSH
25359: LD_VAR 0 1
25363: ARRAY
25364: PPUSH
25365: CALL_OW 505
// if not minerMinesList [ i ] then
25369: LD_EXP 88
25373: PUSH
25374: LD_VAR 0 1
25378: ARRAY
25379: NOT
25380: IFFALSE 25384
// continue ;
25382: GO 25323
// for j := minerMinesList [ i ] downto 1 do
25384: LD_ADDR_VAR 0 2
25388: PUSH
25389: DOUBLE
25390: LD_EXP 88
25394: PUSH
25395: LD_VAR 0 1
25399: ARRAY
25400: INC
25401: ST_TO_ADDR
25402: LD_INT 1
25404: PUSH
25405: FOR_DOWNTO
25406: IFFALSE 25656
// begin side := GetSide ( minersList [ i ] ) ;
25408: LD_ADDR_VAR 0 3
25412: PUSH
25413: LD_EXP 87
25417: PUSH
25418: LD_VAR 0 1
25422: ARRAY
25423: PPUSH
25424: CALL_OW 255
25428: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25429: LD_ADDR_VAR 0 4
25433: PUSH
25434: LD_EXP 88
25438: PUSH
25439: LD_VAR 0 1
25443: ARRAY
25444: PUSH
25445: LD_VAR 0 2
25449: ARRAY
25450: PUSH
25451: LD_INT 1
25453: ARRAY
25454: PPUSH
25455: LD_EXP 88
25459: PUSH
25460: LD_VAR 0 1
25464: ARRAY
25465: PUSH
25466: LD_VAR 0 2
25470: ARRAY
25471: PUSH
25472: LD_INT 2
25474: ARRAY
25475: PPUSH
25476: CALL_OW 428
25480: ST_TO_ADDR
// if not tmp then
25481: LD_VAR 0 4
25485: NOT
25486: IFFALSE 25490
// continue ;
25488: GO 25405
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25490: LD_VAR 0 4
25494: PUSH
25495: LD_INT 81
25497: PUSH
25498: LD_VAR 0 3
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PPUSH
25507: CALL_OW 69
25511: IN
25512: PUSH
25513: LD_EXP 88
25517: PUSH
25518: LD_VAR 0 1
25522: ARRAY
25523: PUSH
25524: LD_VAR 0 2
25528: ARRAY
25529: PUSH
25530: LD_INT 1
25532: ARRAY
25533: PPUSH
25534: LD_EXP 88
25538: PUSH
25539: LD_VAR 0 1
25543: ARRAY
25544: PUSH
25545: LD_VAR 0 2
25549: ARRAY
25550: PUSH
25551: LD_INT 2
25553: ARRAY
25554: PPUSH
25555: CALL_OW 458
25559: AND
25560: IFFALSE 25654
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25562: LD_EXP 88
25566: PUSH
25567: LD_VAR 0 1
25571: ARRAY
25572: PUSH
25573: LD_VAR 0 2
25577: ARRAY
25578: PUSH
25579: LD_INT 1
25581: ARRAY
25582: PPUSH
25583: LD_EXP 88
25587: PUSH
25588: LD_VAR 0 1
25592: ARRAY
25593: PUSH
25594: LD_VAR 0 2
25598: ARRAY
25599: PUSH
25600: LD_INT 2
25602: ARRAY
25603: PPUSH
25604: LD_VAR 0 3
25608: PPUSH
25609: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25613: LD_ADDR_EXP 88
25617: PUSH
25618: LD_EXP 88
25622: PPUSH
25623: LD_VAR 0 1
25627: PPUSH
25628: LD_EXP 88
25632: PUSH
25633: LD_VAR 0 1
25637: ARRAY
25638: PPUSH
25639: LD_VAR 0 2
25643: PPUSH
25644: CALL_OW 3
25648: PPUSH
25649: CALL_OW 1
25653: ST_TO_ADDR
// end ; end ;
25654: GO 25405
25656: POP
25657: POP
// end ;
25658: GO 25323
25660: POP
25661: POP
// end ;
25662: PPOPN 4
25664: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25665: LD_INT 0
25667: PPUSH
25668: PPUSH
// result := false ;
25669: LD_ADDR_VAR 0 4
25673: PUSH
25674: LD_INT 0
25676: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25677: LD_VAR 0 1
25681: PPUSH
25682: CALL_OW 264
25686: PUSH
25687: LD_INT 81
25689: EQUAL
25690: NOT
25691: IFFALSE 25695
// exit ;
25693: GO 25935
// index := GetElementIndex ( minersList , unit ) ;
25695: LD_ADDR_VAR 0 5
25699: PUSH
25700: LD_EXP 87
25704: PPUSH
25705: LD_VAR 0 1
25709: PPUSH
25710: CALL 31893 0 2
25714: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25715: LD_EXP 88
25719: PUSH
25720: LD_VAR 0 5
25724: ARRAY
25725: PUSH
25726: LD_EXP 89
25730: GREATEREQUAL
25731: IFFALSE 25735
// exit ;
25733: GO 25935
// ComMoveXY ( unit , x , y ) ;
25735: LD_VAR 0 1
25739: PPUSH
25740: LD_VAR 0 2
25744: PPUSH
25745: LD_VAR 0 3
25749: PPUSH
25750: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25754: LD_INT 35
25756: PPUSH
25757: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25761: LD_VAR 0 1
25765: PPUSH
25766: LD_VAR 0 2
25770: PPUSH
25771: LD_VAR 0 3
25775: PPUSH
25776: CALL 63277 0 3
25780: NOT
25781: PUSH
25782: LD_VAR 0 1
25786: PPUSH
25787: CALL_OW 314
25791: AND
25792: IFFALSE 25796
// exit ;
25794: GO 25935
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25796: LD_VAR 0 2
25800: PPUSH
25801: LD_VAR 0 3
25805: PPUSH
25806: CALL_OW 428
25810: PUSH
25811: LD_VAR 0 1
25815: EQUAL
25816: PUSH
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL_OW 314
25826: NOT
25827: AND
25828: IFFALSE 25754
// PlaySoundXY ( x , y , PlantMine ) ;
25830: LD_VAR 0 2
25834: PPUSH
25835: LD_VAR 0 3
25839: PPUSH
25840: LD_STRING PlantMine
25842: PPUSH
25843: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25847: LD_VAR 0 2
25851: PPUSH
25852: LD_VAR 0 3
25856: PPUSH
25857: LD_VAR 0 1
25861: PPUSH
25862: CALL_OW 255
25866: PPUSH
25867: LD_INT 0
25869: PPUSH
25870: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25874: LD_ADDR_EXP 88
25878: PUSH
25879: LD_EXP 88
25883: PPUSH
25884: LD_VAR 0 5
25888: PUSH
25889: LD_EXP 88
25893: PUSH
25894: LD_VAR 0 5
25898: ARRAY
25899: PUSH
25900: LD_INT 1
25902: PLUS
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PPUSH
25908: LD_VAR 0 2
25912: PUSH
25913: LD_VAR 0 3
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL 32108 0 3
25926: ST_TO_ADDR
// result := true ;
25927: LD_ADDR_VAR 0 4
25931: PUSH
25932: LD_INT 1
25934: ST_TO_ADDR
// end ;
25935: LD_VAR 0 4
25939: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25940: LD_INT 0
25942: PPUSH
25943: PPUSH
25944: PPUSH
// if not unit in minersList then
25945: LD_VAR 0 1
25949: PUSH
25950: LD_EXP 87
25954: IN
25955: NOT
25956: IFFALSE 25960
// exit ;
25958: GO 26352
// index := GetElementIndex ( minersList , unit ) ;
25960: LD_ADDR_VAR 0 6
25964: PUSH
25965: LD_EXP 87
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL 31893 0 2
25979: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25980: LD_ADDR_VAR 0 5
25984: PUSH
25985: DOUBLE
25986: LD_EXP 88
25990: PUSH
25991: LD_VAR 0 6
25995: ARRAY
25996: INC
25997: ST_TO_ADDR
25998: LD_INT 1
26000: PUSH
26001: FOR_DOWNTO
26002: IFFALSE 26163
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26004: LD_EXP 88
26008: PUSH
26009: LD_VAR 0 6
26013: ARRAY
26014: PUSH
26015: LD_VAR 0 5
26019: ARRAY
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: PUSH
26025: LD_VAR 0 2
26029: EQUAL
26030: PUSH
26031: LD_EXP 88
26035: PUSH
26036: LD_VAR 0 6
26040: ARRAY
26041: PUSH
26042: LD_VAR 0 5
26046: ARRAY
26047: PUSH
26048: LD_INT 2
26050: ARRAY
26051: PUSH
26052: LD_VAR 0 3
26056: EQUAL
26057: AND
26058: IFFALSE 26161
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26060: LD_EXP 88
26064: PUSH
26065: LD_VAR 0 6
26069: ARRAY
26070: PUSH
26071: LD_VAR 0 5
26075: ARRAY
26076: PUSH
26077: LD_INT 1
26079: ARRAY
26080: PPUSH
26081: LD_EXP 88
26085: PUSH
26086: LD_VAR 0 6
26090: ARRAY
26091: PUSH
26092: LD_VAR 0 5
26096: ARRAY
26097: PUSH
26098: LD_INT 2
26100: ARRAY
26101: PPUSH
26102: LD_VAR 0 1
26106: PPUSH
26107: CALL_OW 255
26111: PPUSH
26112: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26116: LD_ADDR_EXP 88
26120: PUSH
26121: LD_EXP 88
26125: PPUSH
26126: LD_VAR 0 6
26130: PPUSH
26131: LD_EXP 88
26135: PUSH
26136: LD_VAR 0 6
26140: ARRAY
26141: PPUSH
26142: LD_VAR 0 5
26146: PPUSH
26147: CALL_OW 3
26151: PPUSH
26152: CALL_OW 1
26156: ST_TO_ADDR
// exit ;
26157: POP
26158: POP
26159: GO 26352
// end ; end ;
26161: GO 26001
26163: POP
26164: POP
// for i := minerMinesList [ index ] downto 1 do
26165: LD_ADDR_VAR 0 5
26169: PUSH
26170: DOUBLE
26171: LD_EXP 88
26175: PUSH
26176: LD_VAR 0 6
26180: ARRAY
26181: INC
26182: ST_TO_ADDR
26183: LD_INT 1
26185: PUSH
26186: FOR_DOWNTO
26187: IFFALSE 26350
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26189: LD_EXP 88
26193: PUSH
26194: LD_VAR 0 6
26198: ARRAY
26199: PUSH
26200: LD_VAR 0 5
26204: ARRAY
26205: PUSH
26206: LD_INT 1
26208: ARRAY
26209: PPUSH
26210: LD_EXP 88
26214: PUSH
26215: LD_VAR 0 6
26219: ARRAY
26220: PUSH
26221: LD_VAR 0 5
26225: ARRAY
26226: PUSH
26227: LD_INT 2
26229: ARRAY
26230: PPUSH
26231: LD_VAR 0 2
26235: PPUSH
26236: LD_VAR 0 3
26240: PPUSH
26241: CALL_OW 298
26245: PUSH
26246: LD_INT 6
26248: LESS
26249: IFFALSE 26348
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26251: LD_EXP 88
26255: PUSH
26256: LD_VAR 0 6
26260: ARRAY
26261: PUSH
26262: LD_VAR 0 5
26266: ARRAY
26267: PUSH
26268: LD_INT 1
26270: ARRAY
26271: PPUSH
26272: LD_EXP 88
26276: PUSH
26277: LD_VAR 0 6
26281: ARRAY
26282: PUSH
26283: LD_VAR 0 5
26287: ARRAY
26288: PUSH
26289: LD_INT 2
26291: ARRAY
26292: PPUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 255
26302: PPUSH
26303: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26307: LD_ADDR_EXP 88
26311: PUSH
26312: LD_EXP 88
26316: PPUSH
26317: LD_VAR 0 6
26321: PPUSH
26322: LD_EXP 88
26326: PUSH
26327: LD_VAR 0 6
26331: ARRAY
26332: PPUSH
26333: LD_VAR 0 5
26337: PPUSH
26338: CALL_OW 3
26342: PPUSH
26343: CALL_OW 1
26347: ST_TO_ADDR
// end ; end ;
26348: GO 26186
26350: POP
26351: POP
// end ;
26352: LD_VAR 0 4
26356: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26357: LD_INT 0
26359: PPUSH
26360: PPUSH
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
26365: PPUSH
26366: PPUSH
26367: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26368: LD_VAR 0 1
26372: PPUSH
26373: CALL_OW 264
26377: PUSH
26378: LD_INT 81
26380: EQUAL
26381: NOT
26382: PUSH
26383: LD_VAR 0 1
26387: PUSH
26388: LD_EXP 87
26392: IN
26393: NOT
26394: OR
26395: IFFALSE 26399
// exit ;
26397: GO 26721
// index := GetElementIndex ( minersList , unit ) ;
26399: LD_ADDR_VAR 0 6
26403: PUSH
26404: LD_EXP 87
26408: PPUSH
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL 31893 0 2
26418: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26419: LD_ADDR_VAR 0 8
26423: PUSH
26424: LD_EXP 89
26428: PUSH
26429: LD_EXP 88
26433: PUSH
26434: LD_VAR 0 6
26438: ARRAY
26439: MINUS
26440: ST_TO_ADDR
// if not minesFreeAmount then
26441: LD_VAR 0 8
26445: NOT
26446: IFFALSE 26450
// exit ;
26448: GO 26721
// tmp := [ ] ;
26450: LD_ADDR_VAR 0 7
26454: PUSH
26455: EMPTY
26456: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26457: LD_ADDR_VAR 0 5
26461: PUSH
26462: DOUBLE
26463: LD_INT 1
26465: DEC
26466: ST_TO_ADDR
26467: LD_VAR 0 8
26471: PUSH
26472: FOR_TO
26473: IFFALSE 26668
// begin _d := rand ( 0 , 5 ) ;
26475: LD_ADDR_VAR 0 11
26479: PUSH
26480: LD_INT 0
26482: PPUSH
26483: LD_INT 5
26485: PPUSH
26486: CALL_OW 12
26490: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26491: LD_ADDR_VAR 0 12
26495: PUSH
26496: LD_INT 2
26498: PPUSH
26499: LD_INT 6
26501: PPUSH
26502: CALL_OW 12
26506: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26507: LD_ADDR_VAR 0 9
26511: PUSH
26512: LD_VAR 0 2
26516: PPUSH
26517: LD_VAR 0 11
26521: PPUSH
26522: LD_VAR 0 12
26526: PPUSH
26527: CALL_OW 272
26531: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26532: LD_ADDR_VAR 0 10
26536: PUSH
26537: LD_VAR 0 3
26541: PPUSH
26542: LD_VAR 0 11
26546: PPUSH
26547: LD_VAR 0 12
26551: PPUSH
26552: CALL_OW 273
26556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26557: LD_VAR 0 9
26561: PPUSH
26562: LD_VAR 0 10
26566: PPUSH
26567: CALL_OW 488
26571: PUSH
26572: LD_VAR 0 9
26576: PUSH
26577: LD_VAR 0 10
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_VAR 0 7
26590: IN
26591: NOT
26592: AND
26593: PUSH
26594: LD_VAR 0 9
26598: PPUSH
26599: LD_VAR 0 10
26603: PPUSH
26604: CALL_OW 458
26608: NOT
26609: AND
26610: IFFALSE 26652
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26612: LD_ADDR_VAR 0 7
26616: PUSH
26617: LD_VAR 0 7
26621: PPUSH
26622: LD_VAR 0 7
26626: PUSH
26627: LD_INT 1
26629: PLUS
26630: PPUSH
26631: LD_VAR 0 9
26635: PUSH
26636: LD_VAR 0 10
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PPUSH
26645: CALL_OW 1
26649: ST_TO_ADDR
26650: GO 26666
// i := i - 1 ;
26652: LD_ADDR_VAR 0 5
26656: PUSH
26657: LD_VAR 0 5
26661: PUSH
26662: LD_INT 1
26664: MINUS
26665: ST_TO_ADDR
// end ;
26666: GO 26472
26668: POP
26669: POP
// for i in tmp do
26670: LD_ADDR_VAR 0 5
26674: PUSH
26675: LD_VAR 0 7
26679: PUSH
26680: FOR_IN
26681: IFFALSE 26719
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26683: LD_VAR 0 1
26687: PPUSH
26688: LD_VAR 0 5
26692: PUSH
26693: LD_INT 1
26695: ARRAY
26696: PPUSH
26697: LD_VAR 0 5
26701: PUSH
26702: LD_INT 2
26704: ARRAY
26705: PPUSH
26706: CALL 25665 0 3
26710: NOT
26711: IFFALSE 26717
// exit ;
26713: POP
26714: POP
26715: GO 26721
26717: GO 26680
26719: POP
26720: POP
// end ;
26721: LD_VAR 0 4
26725: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26726: LD_INT 0
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
// if not GetClass ( unit ) = class_sniper then
26735: LD_VAR 0 1
26739: PPUSH
26740: CALL_OW 257
26744: PUSH
26745: LD_INT 5
26747: EQUAL
26748: NOT
26749: IFFALSE 26753
// exit ;
26751: GO 27141
// dist := 8 ;
26753: LD_ADDR_VAR 0 5
26757: PUSH
26758: LD_INT 8
26760: ST_TO_ADDR
// viewRange := 12 ;
26761: LD_ADDR_VAR 0 7
26765: PUSH
26766: LD_INT 12
26768: ST_TO_ADDR
// side := GetSide ( unit ) ;
26769: LD_ADDR_VAR 0 6
26773: PUSH
26774: LD_VAR 0 1
26778: PPUSH
26779: CALL_OW 255
26783: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26784: LD_INT 61
26786: PPUSH
26787: LD_VAR 0 6
26791: PPUSH
26792: CALL_OW 321
26796: PUSH
26797: LD_INT 2
26799: EQUAL
26800: IFFALSE 26810
// viewRange := 16 ;
26802: LD_ADDR_VAR 0 7
26806: PUSH
26807: LD_INT 16
26809: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26810: LD_VAR 0 1
26814: PPUSH
26815: LD_VAR 0 2
26819: PPUSH
26820: LD_VAR 0 3
26824: PPUSH
26825: CALL_OW 297
26829: PUSH
26830: LD_VAR 0 5
26834: GREATER
26835: IFFALSE 26914
// begin ComMoveXY ( unit , x , y ) ;
26837: LD_VAR 0 1
26841: PPUSH
26842: LD_VAR 0 2
26846: PPUSH
26847: LD_VAR 0 3
26851: PPUSH
26852: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26856: LD_INT 35
26858: PPUSH
26859: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26863: LD_VAR 0 1
26867: PPUSH
26868: LD_VAR 0 2
26872: PPUSH
26873: LD_VAR 0 3
26877: PPUSH
26878: CALL 63277 0 3
26882: NOT
26883: IFFALSE 26887
// exit ;
26885: GO 27141
// until GetDistUnitXY ( unit , x , y ) < dist ;
26887: LD_VAR 0 1
26891: PPUSH
26892: LD_VAR 0 2
26896: PPUSH
26897: LD_VAR 0 3
26901: PPUSH
26902: CALL_OW 297
26906: PUSH
26907: LD_VAR 0 5
26911: LESS
26912: IFFALSE 26856
// end ; ComTurnXY ( unit , x , y ) ;
26914: LD_VAR 0 1
26918: PPUSH
26919: LD_VAR 0 2
26923: PPUSH
26924: LD_VAR 0 3
26928: PPUSH
26929: CALL_OW 118
// wait ( 5 ) ;
26933: LD_INT 5
26935: PPUSH
26936: CALL_OW 67
// _d := GetDir ( unit ) ;
26940: LD_ADDR_VAR 0 10
26944: PUSH
26945: LD_VAR 0 1
26949: PPUSH
26950: CALL_OW 254
26954: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26955: LD_ADDR_VAR 0 8
26959: PUSH
26960: LD_VAR 0 1
26964: PPUSH
26965: CALL_OW 250
26969: PPUSH
26970: LD_VAR 0 10
26974: PPUSH
26975: LD_VAR 0 5
26979: PPUSH
26980: CALL_OW 272
26984: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26985: LD_ADDR_VAR 0 9
26989: PUSH
26990: LD_VAR 0 1
26994: PPUSH
26995: CALL_OW 251
26999: PPUSH
27000: LD_VAR 0 10
27004: PPUSH
27005: LD_VAR 0 5
27009: PPUSH
27010: CALL_OW 273
27014: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27015: LD_VAR 0 8
27019: PPUSH
27020: LD_VAR 0 9
27024: PPUSH
27025: CALL_OW 488
27029: NOT
27030: IFFALSE 27034
// exit ;
27032: GO 27141
// ComAnimCustom ( unit , 1 ) ;
27034: LD_VAR 0 1
27038: PPUSH
27039: LD_INT 1
27041: PPUSH
27042: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27046: LD_VAR 0 8
27050: PPUSH
27051: LD_VAR 0 9
27055: PPUSH
27056: LD_VAR 0 6
27060: PPUSH
27061: LD_VAR 0 7
27065: PPUSH
27066: CALL_OW 330
// repeat wait ( 1 ) ;
27070: LD_INT 1
27072: PPUSH
27073: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27077: LD_VAR 0 1
27081: PPUSH
27082: CALL_OW 316
27086: PUSH
27087: LD_VAR 0 1
27091: PPUSH
27092: CALL_OW 314
27096: OR
27097: PUSH
27098: LD_VAR 0 1
27102: PPUSH
27103: CALL_OW 302
27107: NOT
27108: OR
27109: PUSH
27110: LD_VAR 0 1
27114: PPUSH
27115: CALL_OW 301
27119: OR
27120: IFFALSE 27070
// RemoveSeeing ( _x , _y , side ) ;
27122: LD_VAR 0 8
27126: PPUSH
27127: LD_VAR 0 9
27131: PPUSH
27132: LD_VAR 0 6
27136: PPUSH
27137: CALL_OW 331
// end ; end_of_file
27141: LD_VAR 0 4
27145: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27146: LD_INT 0
27148: PPUSH
27149: PPUSH
// if exist_mode then
27150: LD_VAR 0 2
27154: IFFALSE 27179
// unit := CreateCharacter ( prefix & ident ) else
27156: LD_ADDR_VAR 0 5
27160: PUSH
27161: LD_VAR 0 3
27165: PUSH
27166: LD_VAR 0 1
27170: STR
27171: PPUSH
27172: CALL_OW 34
27176: ST_TO_ADDR
27177: GO 27194
// unit := NewCharacter ( ident ) ;
27179: LD_ADDR_VAR 0 5
27183: PUSH
27184: LD_VAR 0 1
27188: PPUSH
27189: CALL_OW 25
27193: ST_TO_ADDR
// result := unit ;
27194: LD_ADDR_VAR 0 4
27198: PUSH
27199: LD_VAR 0 5
27203: ST_TO_ADDR
// end ;
27204: LD_VAR 0 4
27208: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27209: LD_INT 0
27211: PPUSH
27212: PPUSH
// if not side or not nation then
27213: LD_VAR 0 1
27217: NOT
27218: PUSH
27219: LD_VAR 0 2
27223: NOT
27224: OR
27225: IFFALSE 27229
// exit ;
27227: GO 27997
// case nation of nation_american :
27229: LD_VAR 0 2
27233: PUSH
27234: LD_INT 1
27236: DOUBLE
27237: EQUAL
27238: IFTRUE 27242
27240: GO 27456
27242: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27243: LD_ADDR_VAR 0 4
27247: PUSH
27248: LD_INT 35
27250: PUSH
27251: LD_INT 45
27253: PUSH
27254: LD_INT 46
27256: PUSH
27257: LD_INT 47
27259: PUSH
27260: LD_INT 82
27262: PUSH
27263: LD_INT 83
27265: PUSH
27266: LD_INT 84
27268: PUSH
27269: LD_INT 85
27271: PUSH
27272: LD_INT 86
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: LD_INT 2
27280: PUSH
27281: LD_INT 6
27283: PUSH
27284: LD_INT 15
27286: PUSH
27287: LD_INT 16
27289: PUSH
27290: LD_INT 7
27292: PUSH
27293: LD_INT 12
27295: PUSH
27296: LD_INT 13
27298: PUSH
27299: LD_INT 10
27301: PUSH
27302: LD_INT 14
27304: PUSH
27305: LD_INT 20
27307: PUSH
27308: LD_INT 21
27310: PUSH
27311: LD_INT 22
27313: PUSH
27314: LD_INT 25
27316: PUSH
27317: LD_INT 32
27319: PUSH
27320: LD_INT 27
27322: PUSH
27323: LD_INT 36
27325: PUSH
27326: LD_INT 69
27328: PUSH
27329: LD_INT 39
27331: PUSH
27332: LD_INT 34
27334: PUSH
27335: LD_INT 40
27337: PUSH
27338: LD_INT 48
27340: PUSH
27341: LD_INT 49
27343: PUSH
27344: LD_INT 50
27346: PUSH
27347: LD_INT 51
27349: PUSH
27350: LD_INT 52
27352: PUSH
27353: LD_INT 53
27355: PUSH
27356: LD_INT 54
27358: PUSH
27359: LD_INT 55
27361: PUSH
27362: LD_INT 56
27364: PUSH
27365: LD_INT 57
27367: PUSH
27368: LD_INT 58
27370: PUSH
27371: LD_INT 59
27373: PUSH
27374: LD_INT 60
27376: PUSH
27377: LD_INT 61
27379: PUSH
27380: LD_INT 62
27382: PUSH
27383: LD_INT 80
27385: PUSH
27386: LD_INT 82
27388: PUSH
27389: LD_INT 83
27391: PUSH
27392: LD_INT 84
27394: PUSH
27395: LD_INT 85
27397: PUSH
27398: LD_INT 86
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: ST_TO_ADDR
27454: GO 27921
27456: LD_INT 2
27458: DOUBLE
27459: EQUAL
27460: IFTRUE 27464
27462: GO 27690
27464: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27465: LD_ADDR_VAR 0 4
27469: PUSH
27470: LD_INT 35
27472: PUSH
27473: LD_INT 45
27475: PUSH
27476: LD_INT 46
27478: PUSH
27479: LD_INT 47
27481: PUSH
27482: LD_INT 82
27484: PUSH
27485: LD_INT 83
27487: PUSH
27488: LD_INT 84
27490: PUSH
27491: LD_INT 85
27493: PUSH
27494: LD_INT 87
27496: PUSH
27497: LD_INT 70
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 11
27505: PUSH
27506: LD_INT 3
27508: PUSH
27509: LD_INT 4
27511: PUSH
27512: LD_INT 5
27514: PUSH
27515: LD_INT 6
27517: PUSH
27518: LD_INT 15
27520: PUSH
27521: LD_INT 18
27523: PUSH
27524: LD_INT 7
27526: PUSH
27527: LD_INT 17
27529: PUSH
27530: LD_INT 8
27532: PUSH
27533: LD_INT 20
27535: PUSH
27536: LD_INT 21
27538: PUSH
27539: LD_INT 22
27541: PUSH
27542: LD_INT 72
27544: PUSH
27545: LD_INT 26
27547: PUSH
27548: LD_INT 69
27550: PUSH
27551: LD_INT 39
27553: PUSH
27554: LD_INT 40
27556: PUSH
27557: LD_INT 41
27559: PUSH
27560: LD_INT 42
27562: PUSH
27563: LD_INT 43
27565: PUSH
27566: LD_INT 48
27568: PUSH
27569: LD_INT 49
27571: PUSH
27572: LD_INT 50
27574: PUSH
27575: LD_INT 51
27577: PUSH
27578: LD_INT 52
27580: PUSH
27581: LD_INT 53
27583: PUSH
27584: LD_INT 54
27586: PUSH
27587: LD_INT 55
27589: PUSH
27590: LD_INT 56
27592: PUSH
27593: LD_INT 60
27595: PUSH
27596: LD_INT 61
27598: PUSH
27599: LD_INT 62
27601: PUSH
27602: LD_INT 66
27604: PUSH
27605: LD_INT 67
27607: PUSH
27608: LD_INT 68
27610: PUSH
27611: LD_INT 81
27613: PUSH
27614: LD_INT 82
27616: PUSH
27617: LD_INT 83
27619: PUSH
27620: LD_INT 84
27622: PUSH
27623: LD_INT 85
27625: PUSH
27626: LD_INT 87
27628: PUSH
27629: LD_INT 88
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: ST_TO_ADDR
27688: GO 27921
27690: LD_INT 3
27692: DOUBLE
27693: EQUAL
27694: IFTRUE 27698
27696: GO 27920
27698: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27699: LD_ADDR_VAR 0 4
27703: PUSH
27704: LD_INT 46
27706: PUSH
27707: LD_INT 47
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: LD_INT 2
27715: PUSH
27716: LD_INT 82
27718: PUSH
27719: LD_INT 83
27721: PUSH
27722: LD_INT 84
27724: PUSH
27725: LD_INT 85
27727: PUSH
27728: LD_INT 86
27730: PUSH
27731: LD_INT 11
27733: PUSH
27734: LD_INT 9
27736: PUSH
27737: LD_INT 20
27739: PUSH
27740: LD_INT 19
27742: PUSH
27743: LD_INT 21
27745: PUSH
27746: LD_INT 24
27748: PUSH
27749: LD_INT 22
27751: PUSH
27752: LD_INT 25
27754: PUSH
27755: LD_INT 28
27757: PUSH
27758: LD_INT 29
27760: PUSH
27761: LD_INT 30
27763: PUSH
27764: LD_INT 31
27766: PUSH
27767: LD_INT 37
27769: PUSH
27770: LD_INT 38
27772: PUSH
27773: LD_INT 32
27775: PUSH
27776: LD_INT 27
27778: PUSH
27779: LD_INT 33
27781: PUSH
27782: LD_INT 69
27784: PUSH
27785: LD_INT 39
27787: PUSH
27788: LD_INT 34
27790: PUSH
27791: LD_INT 40
27793: PUSH
27794: LD_INT 71
27796: PUSH
27797: LD_INT 23
27799: PUSH
27800: LD_INT 44
27802: PUSH
27803: LD_INT 48
27805: PUSH
27806: LD_INT 49
27808: PUSH
27809: LD_INT 50
27811: PUSH
27812: LD_INT 51
27814: PUSH
27815: LD_INT 52
27817: PUSH
27818: LD_INT 53
27820: PUSH
27821: LD_INT 54
27823: PUSH
27824: LD_INT 55
27826: PUSH
27827: LD_INT 56
27829: PUSH
27830: LD_INT 57
27832: PUSH
27833: LD_INT 58
27835: PUSH
27836: LD_INT 59
27838: PUSH
27839: LD_INT 63
27841: PUSH
27842: LD_INT 64
27844: PUSH
27845: LD_INT 65
27847: PUSH
27848: LD_INT 82
27850: PUSH
27851: LD_INT 83
27853: PUSH
27854: LD_INT 84
27856: PUSH
27857: LD_INT 85
27859: PUSH
27860: LD_INT 86
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
27918: GO 27921
27920: POP
// if state > - 1 and state < 3 then
27921: LD_VAR 0 3
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: GREATER
27930: PUSH
27931: LD_VAR 0 3
27935: PUSH
27936: LD_INT 3
27938: LESS
27939: AND
27940: IFFALSE 27997
// for i in result do
27942: LD_ADDR_VAR 0 5
27946: PUSH
27947: LD_VAR 0 4
27951: PUSH
27952: FOR_IN
27953: IFFALSE 27995
// if GetTech ( i , side ) <> state then
27955: LD_VAR 0 5
27959: PPUSH
27960: LD_VAR 0 1
27964: PPUSH
27965: CALL_OW 321
27969: PUSH
27970: LD_VAR 0 3
27974: NONEQUAL
27975: IFFALSE 27993
// result := result diff i ;
27977: LD_ADDR_VAR 0 4
27981: PUSH
27982: LD_VAR 0 4
27986: PUSH
27987: LD_VAR 0 5
27991: DIFF
27992: ST_TO_ADDR
27993: GO 27952
27995: POP
27996: POP
// end ;
27997: LD_VAR 0 4
28001: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28002: LD_INT 0
28004: PPUSH
28005: PPUSH
28006: PPUSH
// result := true ;
28007: LD_ADDR_VAR 0 3
28011: PUSH
28012: LD_INT 1
28014: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28015: LD_ADDR_VAR 0 5
28019: PUSH
28020: LD_VAR 0 2
28024: PPUSH
28025: CALL_OW 480
28029: ST_TO_ADDR
// if not tmp then
28030: LD_VAR 0 5
28034: NOT
28035: IFFALSE 28039
// exit ;
28037: GO 28088
// for i in tmp do
28039: LD_ADDR_VAR 0 4
28043: PUSH
28044: LD_VAR 0 5
28048: PUSH
28049: FOR_IN
28050: IFFALSE 28086
// if GetTech ( i , side ) <> state_researched then
28052: LD_VAR 0 4
28056: PPUSH
28057: LD_VAR 0 1
28061: PPUSH
28062: CALL_OW 321
28066: PUSH
28067: LD_INT 2
28069: NONEQUAL
28070: IFFALSE 28084
// begin result := false ;
28072: LD_ADDR_VAR 0 3
28076: PUSH
28077: LD_INT 0
28079: ST_TO_ADDR
// exit ;
28080: POP
28081: POP
28082: GO 28088
// end ;
28084: GO 28049
28086: POP
28087: POP
// end ;
28088: LD_VAR 0 3
28092: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28093: LD_INT 0
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
28105: PPUSH
28106: PPUSH
28107: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28108: LD_VAR 0 1
28112: NOT
28113: PUSH
28114: LD_VAR 0 1
28118: PPUSH
28119: CALL_OW 257
28123: PUSH
28124: LD_INT 9
28126: NONEQUAL
28127: OR
28128: IFFALSE 28132
// exit ;
28130: GO 28705
// side := GetSide ( unit ) ;
28132: LD_ADDR_VAR 0 9
28136: PUSH
28137: LD_VAR 0 1
28141: PPUSH
28142: CALL_OW 255
28146: ST_TO_ADDR
// tech_space := tech_spacanom ;
28147: LD_ADDR_VAR 0 12
28151: PUSH
28152: LD_INT 29
28154: ST_TO_ADDR
// tech_time := tech_taurad ;
28155: LD_ADDR_VAR 0 13
28159: PUSH
28160: LD_INT 28
28162: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28163: LD_ADDR_VAR 0 11
28167: PUSH
28168: LD_VAR 0 1
28172: PPUSH
28173: CALL_OW 310
28177: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28178: LD_VAR 0 11
28182: PPUSH
28183: CALL_OW 247
28187: PUSH
28188: LD_INT 2
28190: EQUAL
28191: IFFALSE 28195
// exit ;
28193: GO 28705
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28195: LD_ADDR_VAR 0 8
28199: PUSH
28200: LD_INT 81
28202: PUSH
28203: LD_VAR 0 9
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 3
28214: PUSH
28215: LD_INT 21
28217: PUSH
28218: LD_INT 3
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PPUSH
28233: CALL_OW 69
28237: ST_TO_ADDR
// if not tmp then
28238: LD_VAR 0 8
28242: NOT
28243: IFFALSE 28247
// exit ;
28245: GO 28705
// if in_unit then
28247: LD_VAR 0 11
28251: IFFALSE 28275
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28253: LD_ADDR_VAR 0 10
28257: PUSH
28258: LD_VAR 0 8
28262: PPUSH
28263: LD_VAR 0 11
28267: PPUSH
28268: CALL_OW 74
28272: ST_TO_ADDR
28273: GO 28295
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28275: LD_ADDR_VAR 0 10
28279: PUSH
28280: LD_VAR 0 8
28284: PPUSH
28285: LD_VAR 0 1
28289: PPUSH
28290: CALL_OW 74
28294: ST_TO_ADDR
// if not enemy then
28295: LD_VAR 0 10
28299: NOT
28300: IFFALSE 28304
// exit ;
28302: GO 28705
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28304: LD_VAR 0 11
28308: PUSH
28309: LD_VAR 0 11
28313: PPUSH
28314: LD_VAR 0 10
28318: PPUSH
28319: CALL_OW 296
28323: PUSH
28324: LD_INT 13
28326: GREATER
28327: AND
28328: PUSH
28329: LD_VAR 0 1
28333: PPUSH
28334: LD_VAR 0 10
28338: PPUSH
28339: CALL_OW 296
28343: PUSH
28344: LD_INT 12
28346: GREATER
28347: OR
28348: IFFALSE 28352
// exit ;
28350: GO 28705
// missile := [ 1 ] ;
28352: LD_ADDR_VAR 0 14
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: EMPTY
28361: LIST
28362: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28363: LD_VAR 0 9
28367: PPUSH
28368: LD_VAR 0 12
28372: PPUSH
28373: CALL_OW 325
28377: IFFALSE 28406
// missile := Replace ( missile , missile + 1 , 2 ) ;
28379: LD_ADDR_VAR 0 14
28383: PUSH
28384: LD_VAR 0 14
28388: PPUSH
28389: LD_VAR 0 14
28393: PUSH
28394: LD_INT 1
28396: PLUS
28397: PPUSH
28398: LD_INT 2
28400: PPUSH
28401: CALL_OW 1
28405: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28406: LD_VAR 0 9
28410: PPUSH
28411: LD_VAR 0 13
28415: PPUSH
28416: CALL_OW 325
28420: PUSH
28421: LD_VAR 0 10
28425: PPUSH
28426: CALL_OW 255
28430: PPUSH
28431: LD_VAR 0 13
28435: PPUSH
28436: CALL_OW 325
28440: NOT
28441: AND
28442: IFFALSE 28471
// missile := Replace ( missile , missile + 1 , 3 ) ;
28444: LD_ADDR_VAR 0 14
28448: PUSH
28449: LD_VAR 0 14
28453: PPUSH
28454: LD_VAR 0 14
28458: PUSH
28459: LD_INT 1
28461: PLUS
28462: PPUSH
28463: LD_INT 3
28465: PPUSH
28466: CALL_OW 1
28470: ST_TO_ADDR
// if missile < 2 then
28471: LD_VAR 0 14
28475: PUSH
28476: LD_INT 2
28478: LESS
28479: IFFALSE 28483
// exit ;
28481: GO 28705
// x := GetX ( enemy ) ;
28483: LD_ADDR_VAR 0 4
28487: PUSH
28488: LD_VAR 0 10
28492: PPUSH
28493: CALL_OW 250
28497: ST_TO_ADDR
// y := GetY ( enemy ) ;
28498: LD_ADDR_VAR 0 5
28502: PUSH
28503: LD_VAR 0 10
28507: PPUSH
28508: CALL_OW 251
28512: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28513: LD_ADDR_VAR 0 6
28517: PUSH
28518: LD_VAR 0 4
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PPUSH
28527: LD_INT 1
28529: PPUSH
28530: CALL_OW 12
28534: PLUS
28535: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28536: LD_ADDR_VAR 0 7
28540: PUSH
28541: LD_VAR 0 5
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PPUSH
28550: LD_INT 1
28552: PPUSH
28553: CALL_OW 12
28557: PLUS
28558: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28559: LD_VAR 0 6
28563: PPUSH
28564: LD_VAR 0 7
28568: PPUSH
28569: CALL_OW 488
28573: NOT
28574: IFFALSE 28596
// begin _x := x ;
28576: LD_ADDR_VAR 0 6
28580: PUSH
28581: LD_VAR 0 4
28585: ST_TO_ADDR
// _y := y ;
28586: LD_ADDR_VAR 0 7
28590: PUSH
28591: LD_VAR 0 5
28595: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28596: LD_ADDR_VAR 0 3
28600: PUSH
28601: LD_INT 1
28603: PPUSH
28604: LD_VAR 0 14
28608: PPUSH
28609: CALL_OW 12
28613: ST_TO_ADDR
// case i of 1 :
28614: LD_VAR 0 3
28618: PUSH
28619: LD_INT 1
28621: DOUBLE
28622: EQUAL
28623: IFTRUE 28627
28625: GO 28644
28627: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28628: LD_VAR 0 1
28632: PPUSH
28633: LD_VAR 0 10
28637: PPUSH
28638: CALL_OW 115
28642: GO 28705
28644: LD_INT 2
28646: DOUBLE
28647: EQUAL
28648: IFTRUE 28652
28650: GO 28674
28652: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28653: LD_VAR 0 1
28657: PPUSH
28658: LD_VAR 0 6
28662: PPUSH
28663: LD_VAR 0 7
28667: PPUSH
28668: CALL_OW 153
28672: GO 28705
28674: LD_INT 3
28676: DOUBLE
28677: EQUAL
28678: IFTRUE 28682
28680: GO 28704
28682: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28683: LD_VAR 0 1
28687: PPUSH
28688: LD_VAR 0 6
28692: PPUSH
28693: LD_VAR 0 7
28697: PPUSH
28698: CALL_OW 154
28702: GO 28705
28704: POP
// end ;
28705: LD_VAR 0 2
28709: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28710: LD_INT 0
28712: PPUSH
28713: PPUSH
28714: PPUSH
28715: PPUSH
28716: PPUSH
28717: PPUSH
// if not unit or not building then
28718: LD_VAR 0 1
28722: NOT
28723: PUSH
28724: LD_VAR 0 2
28728: NOT
28729: OR
28730: IFFALSE 28734
// exit ;
28732: GO 28892
// x := GetX ( building ) ;
28734: LD_ADDR_VAR 0 5
28738: PUSH
28739: LD_VAR 0 2
28743: PPUSH
28744: CALL_OW 250
28748: ST_TO_ADDR
// y := GetY ( building ) ;
28749: LD_ADDR_VAR 0 6
28753: PUSH
28754: LD_VAR 0 2
28758: PPUSH
28759: CALL_OW 251
28763: ST_TO_ADDR
// for i = 0 to 5 do
28764: LD_ADDR_VAR 0 4
28768: PUSH
28769: DOUBLE
28770: LD_INT 0
28772: DEC
28773: ST_TO_ADDR
28774: LD_INT 5
28776: PUSH
28777: FOR_TO
28778: IFFALSE 28890
// begin _x := ShiftX ( x , i , 3 ) ;
28780: LD_ADDR_VAR 0 7
28784: PUSH
28785: LD_VAR 0 5
28789: PPUSH
28790: LD_VAR 0 4
28794: PPUSH
28795: LD_INT 3
28797: PPUSH
28798: CALL_OW 272
28802: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28803: LD_ADDR_VAR 0 8
28807: PUSH
28808: LD_VAR 0 6
28812: PPUSH
28813: LD_VAR 0 4
28817: PPUSH
28818: LD_INT 3
28820: PPUSH
28821: CALL_OW 273
28825: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28826: LD_VAR 0 7
28830: PPUSH
28831: LD_VAR 0 8
28835: PPUSH
28836: CALL_OW 488
28840: NOT
28841: IFFALSE 28845
// continue ;
28843: GO 28777
// if HexInfo ( _x , _y ) = 0 then
28845: LD_VAR 0 7
28849: PPUSH
28850: LD_VAR 0 8
28854: PPUSH
28855: CALL_OW 428
28859: PUSH
28860: LD_INT 0
28862: EQUAL
28863: IFFALSE 28888
// begin ComMoveXY ( unit , _x , _y ) ;
28865: LD_VAR 0 1
28869: PPUSH
28870: LD_VAR 0 7
28874: PPUSH
28875: LD_VAR 0 8
28879: PPUSH
28880: CALL_OW 111
// exit ;
28884: POP
28885: POP
28886: GO 28892
// end ; end ;
28888: GO 28777
28890: POP
28891: POP
// end ;
28892: LD_VAR 0 3
28896: RET
// export function ScanBase ( side , base_area ) ; begin
28897: LD_INT 0
28899: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28900: LD_ADDR_VAR 0 3
28904: PUSH
28905: LD_VAR 0 2
28909: PPUSH
28910: LD_INT 81
28912: PUSH
28913: LD_VAR 0 1
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PPUSH
28922: CALL_OW 70
28926: ST_TO_ADDR
// end ;
28927: LD_VAR 0 3
28931: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28932: LD_INT 0
28934: PPUSH
28935: PPUSH
28936: PPUSH
28937: PPUSH
// result := false ;
28938: LD_ADDR_VAR 0 2
28942: PUSH
28943: LD_INT 0
28945: ST_TO_ADDR
// side := GetSide ( unit ) ;
28946: LD_ADDR_VAR 0 3
28950: PUSH
28951: LD_VAR 0 1
28955: PPUSH
28956: CALL_OW 255
28960: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28961: LD_ADDR_VAR 0 4
28965: PUSH
28966: LD_VAR 0 1
28970: PPUSH
28971: CALL_OW 248
28975: ST_TO_ADDR
// case nat of 1 :
28976: LD_VAR 0 4
28980: PUSH
28981: LD_INT 1
28983: DOUBLE
28984: EQUAL
28985: IFTRUE 28989
28987: GO 29000
28989: POP
// tech := tech_lassight ; 2 :
28990: LD_ADDR_VAR 0 5
28994: PUSH
28995: LD_INT 12
28997: ST_TO_ADDR
28998: GO 29039
29000: LD_INT 2
29002: DOUBLE
29003: EQUAL
29004: IFTRUE 29008
29006: GO 29019
29008: POP
// tech := tech_mortar ; 3 :
29009: LD_ADDR_VAR 0 5
29013: PUSH
29014: LD_INT 41
29016: ST_TO_ADDR
29017: GO 29039
29019: LD_INT 3
29021: DOUBLE
29022: EQUAL
29023: IFTRUE 29027
29025: GO 29038
29027: POP
// tech := tech_bazooka ; end ;
29028: LD_ADDR_VAR 0 5
29032: PUSH
29033: LD_INT 44
29035: ST_TO_ADDR
29036: GO 29039
29038: POP
// if Researched ( side , tech ) then
29039: LD_VAR 0 3
29043: PPUSH
29044: LD_VAR 0 5
29048: PPUSH
29049: CALL_OW 325
29053: IFFALSE 29080
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29055: LD_ADDR_VAR 0 2
29059: PUSH
29060: LD_INT 5
29062: PUSH
29063: LD_INT 8
29065: PUSH
29066: LD_INT 9
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: LIST
29073: PUSH
29074: LD_VAR 0 4
29078: ARRAY
29079: ST_TO_ADDR
// end ;
29080: LD_VAR 0 2
29084: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29085: LD_INT 0
29087: PPUSH
29088: PPUSH
29089: PPUSH
// if not mines then
29090: LD_VAR 0 2
29094: NOT
29095: IFFALSE 29099
// exit ;
29097: GO 29243
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29099: LD_ADDR_VAR 0 5
29103: PUSH
29104: LD_INT 81
29106: PUSH
29107: LD_VAR 0 1
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 3
29118: PUSH
29119: LD_INT 21
29121: PUSH
29122: LD_INT 3
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PPUSH
29137: CALL_OW 69
29141: ST_TO_ADDR
// for i in mines do
29142: LD_ADDR_VAR 0 4
29146: PUSH
29147: LD_VAR 0 2
29151: PUSH
29152: FOR_IN
29153: IFFALSE 29241
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29155: LD_VAR 0 4
29159: PUSH
29160: LD_INT 1
29162: ARRAY
29163: PPUSH
29164: LD_VAR 0 4
29168: PUSH
29169: LD_INT 2
29171: ARRAY
29172: PPUSH
29173: CALL_OW 458
29177: NOT
29178: IFFALSE 29182
// continue ;
29180: GO 29152
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29182: LD_VAR 0 4
29186: PUSH
29187: LD_INT 1
29189: ARRAY
29190: PPUSH
29191: LD_VAR 0 4
29195: PUSH
29196: LD_INT 2
29198: ARRAY
29199: PPUSH
29200: CALL_OW 428
29204: PUSH
29205: LD_VAR 0 5
29209: IN
29210: IFFALSE 29239
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29212: LD_VAR 0 4
29216: PUSH
29217: LD_INT 1
29219: ARRAY
29220: PPUSH
29221: LD_VAR 0 4
29225: PUSH
29226: LD_INT 2
29228: ARRAY
29229: PPUSH
29230: LD_VAR 0 1
29234: PPUSH
29235: CALL_OW 456
// end ;
29239: GO 29152
29241: POP
29242: POP
// end ;
29243: LD_VAR 0 3
29247: RET
// export function Count ( array ) ; begin
29248: LD_INT 0
29250: PPUSH
// result := array + 0 ;
29251: LD_ADDR_VAR 0 2
29255: PUSH
29256: LD_VAR 0 1
29260: PUSH
29261: LD_INT 0
29263: PLUS
29264: ST_TO_ADDR
// end ;
29265: LD_VAR 0 2
29269: RET
// export function IsEmpty ( building ) ; begin
29270: LD_INT 0
29272: PPUSH
// if not building then
29273: LD_VAR 0 1
29277: NOT
29278: IFFALSE 29282
// exit ;
29280: GO 29325
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29282: LD_ADDR_VAR 0 2
29286: PUSH
29287: LD_VAR 0 1
29291: PUSH
29292: LD_INT 22
29294: PUSH
29295: LD_VAR 0 1
29299: PPUSH
29300: CALL_OW 255
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 58
29311: PUSH
29312: EMPTY
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PPUSH
29319: CALL_OW 69
29323: IN
29324: ST_TO_ADDR
// end ;
29325: LD_VAR 0 2
29329: RET
// export function IsNotFull ( building ) ; var places ; begin
29330: LD_INT 0
29332: PPUSH
29333: PPUSH
// if not building then
29334: LD_VAR 0 1
29338: NOT
29339: IFFALSE 29343
// exit ;
29341: GO 29371
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29343: LD_ADDR_VAR 0 2
29347: PUSH
29348: LD_VAR 0 1
29352: PPUSH
29353: LD_INT 3
29355: PUSH
29356: LD_INT 62
29358: PUSH
29359: EMPTY
29360: LIST
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PPUSH
29366: CALL_OW 72
29370: ST_TO_ADDR
// end ;
29371: LD_VAR 0 2
29375: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29376: LD_INT 0
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
// tmp := [ ] ;
29382: LD_ADDR_VAR 0 3
29386: PUSH
29387: EMPTY
29388: ST_TO_ADDR
// list := [ ] ;
29389: LD_ADDR_VAR 0 5
29393: PUSH
29394: EMPTY
29395: ST_TO_ADDR
// for i = 16 to 25 do
29396: LD_ADDR_VAR 0 4
29400: PUSH
29401: DOUBLE
29402: LD_INT 16
29404: DEC
29405: ST_TO_ADDR
29406: LD_INT 25
29408: PUSH
29409: FOR_TO
29410: IFFALSE 29483
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29412: LD_ADDR_VAR 0 3
29416: PUSH
29417: LD_VAR 0 3
29421: PUSH
29422: LD_INT 22
29424: PUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 255
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 91
29441: PUSH
29442: LD_VAR 0 1
29446: PUSH
29447: LD_INT 6
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 30
29457: PUSH
29458: LD_VAR 0 4
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: PPUSH
29475: CALL_OW 69
29479: ADD
29480: ST_TO_ADDR
29481: GO 29409
29483: POP
29484: POP
// for i = 1 to tmp do
29485: LD_ADDR_VAR 0 4
29489: PUSH
29490: DOUBLE
29491: LD_INT 1
29493: DEC
29494: ST_TO_ADDR
29495: LD_VAR 0 3
29499: PUSH
29500: FOR_TO
29501: IFFALSE 29589
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29503: LD_ADDR_VAR 0 5
29507: PUSH
29508: LD_VAR 0 5
29512: PUSH
29513: LD_VAR 0 3
29517: PUSH
29518: LD_VAR 0 4
29522: ARRAY
29523: PPUSH
29524: CALL_OW 266
29528: PUSH
29529: LD_VAR 0 3
29533: PUSH
29534: LD_VAR 0 4
29538: ARRAY
29539: PPUSH
29540: CALL_OW 250
29544: PUSH
29545: LD_VAR 0 3
29549: PUSH
29550: LD_VAR 0 4
29554: ARRAY
29555: PPUSH
29556: CALL_OW 251
29560: PUSH
29561: LD_VAR 0 3
29565: PUSH
29566: LD_VAR 0 4
29570: ARRAY
29571: PPUSH
29572: CALL_OW 254
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: ADD
29586: ST_TO_ADDR
29587: GO 29500
29589: POP
29590: POP
// result := list ;
29591: LD_ADDR_VAR 0 2
29595: PUSH
29596: LD_VAR 0 5
29600: ST_TO_ADDR
// end ;
29601: LD_VAR 0 2
29605: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29606: LD_INT 0
29608: PPUSH
29609: PPUSH
29610: PPUSH
29611: PPUSH
29612: PPUSH
29613: PPUSH
29614: PPUSH
// if not factory then
29615: LD_VAR 0 1
29619: NOT
29620: IFFALSE 29624
// exit ;
29622: GO 30217
// if control = control_apeman then
29624: LD_VAR 0 4
29628: PUSH
29629: LD_INT 5
29631: EQUAL
29632: IFFALSE 29741
// begin tmp := UnitsInside ( factory ) ;
29634: LD_ADDR_VAR 0 8
29638: PUSH
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL_OW 313
29648: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29649: LD_VAR 0 8
29653: PPUSH
29654: LD_INT 25
29656: PUSH
29657: LD_INT 12
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PPUSH
29664: CALL_OW 72
29668: NOT
29669: IFFALSE 29679
// control := control_manual ;
29671: LD_ADDR_VAR 0 4
29675: PUSH
29676: LD_INT 1
29678: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29679: LD_ADDR_VAR 0 8
29683: PUSH
29684: LD_VAR 0 1
29688: PPUSH
29689: CALL 29376 0 1
29693: ST_TO_ADDR
// if tmp then
29694: LD_VAR 0 8
29698: IFFALSE 29741
// begin for i in tmp do
29700: LD_ADDR_VAR 0 7
29704: PUSH
29705: LD_VAR 0 8
29709: PUSH
29710: FOR_IN
29711: IFFALSE 29739
// if i [ 1 ] = b_ext_radio then
29713: LD_VAR 0 7
29717: PUSH
29718: LD_INT 1
29720: ARRAY
29721: PUSH
29722: LD_INT 22
29724: EQUAL
29725: IFFALSE 29737
// begin control := control_remote ;
29727: LD_ADDR_VAR 0 4
29731: PUSH
29732: LD_INT 2
29734: ST_TO_ADDR
// break ;
29735: GO 29739
// end ;
29737: GO 29710
29739: POP
29740: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29741: LD_VAR 0 1
29745: PPUSH
29746: LD_VAR 0 2
29750: PPUSH
29751: LD_VAR 0 3
29755: PPUSH
29756: LD_VAR 0 4
29760: PPUSH
29761: LD_VAR 0 5
29765: PPUSH
29766: CALL_OW 448
29770: IFFALSE 29805
// begin result := [ chassis , engine , control , weapon ] ;
29772: LD_ADDR_VAR 0 6
29776: PUSH
29777: LD_VAR 0 2
29781: PUSH
29782: LD_VAR 0 3
29786: PUSH
29787: LD_VAR 0 4
29791: PUSH
29792: LD_VAR 0 5
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: ST_TO_ADDR
// exit ;
29803: GO 30217
// end ; _chassis := AvailableChassisList ( factory ) ;
29805: LD_ADDR_VAR 0 9
29809: PUSH
29810: LD_VAR 0 1
29814: PPUSH
29815: CALL_OW 475
29819: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29820: LD_ADDR_VAR 0 11
29824: PUSH
29825: LD_VAR 0 1
29829: PPUSH
29830: CALL_OW 476
29834: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29835: LD_ADDR_VAR 0 12
29839: PUSH
29840: LD_VAR 0 1
29844: PPUSH
29845: CALL_OW 477
29849: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29850: LD_ADDR_VAR 0 10
29854: PUSH
29855: LD_VAR 0 1
29859: PPUSH
29860: CALL_OW 478
29864: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29865: LD_VAR 0 9
29869: NOT
29870: PUSH
29871: LD_VAR 0 11
29875: NOT
29876: OR
29877: PUSH
29878: LD_VAR 0 12
29882: NOT
29883: OR
29884: PUSH
29885: LD_VAR 0 10
29889: NOT
29890: OR
29891: IFFALSE 29926
// begin result := [ chassis , engine , control , weapon ] ;
29893: LD_ADDR_VAR 0 6
29897: PUSH
29898: LD_VAR 0 2
29902: PUSH
29903: LD_VAR 0 3
29907: PUSH
29908: LD_VAR 0 4
29912: PUSH
29913: LD_VAR 0 5
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: ST_TO_ADDR
// exit ;
29924: GO 30217
// end ; if not chassis in _chassis then
29926: LD_VAR 0 2
29930: PUSH
29931: LD_VAR 0 9
29935: IN
29936: NOT
29937: IFFALSE 29963
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29939: LD_ADDR_VAR 0 2
29943: PUSH
29944: LD_VAR 0 9
29948: PUSH
29949: LD_INT 1
29951: PPUSH
29952: LD_VAR 0 9
29956: PPUSH
29957: CALL_OW 12
29961: ARRAY
29962: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29963: LD_VAR 0 2
29967: PPUSH
29968: LD_VAR 0 3
29972: PPUSH
29973: CALL 30222 0 2
29977: NOT
29978: IFFALSE 30037
// repeat engine := _engine [ 1 ] ;
29980: LD_ADDR_VAR 0 3
29984: PUSH
29985: LD_VAR 0 11
29989: PUSH
29990: LD_INT 1
29992: ARRAY
29993: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29994: LD_ADDR_VAR 0 11
29998: PUSH
29999: LD_VAR 0 11
30003: PPUSH
30004: LD_INT 1
30006: PPUSH
30007: CALL_OW 3
30011: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30012: LD_VAR 0 2
30016: PPUSH
30017: LD_VAR 0 3
30021: PPUSH
30022: CALL 30222 0 2
30026: PUSH
30027: LD_VAR 0 11
30031: PUSH
30032: EMPTY
30033: EQUAL
30034: OR
30035: IFFALSE 29980
// if not control in _control then
30037: LD_VAR 0 4
30041: PUSH
30042: LD_VAR 0 12
30046: IN
30047: NOT
30048: IFFALSE 30074
// control := _control [ rand ( 1 , _control ) ] ;
30050: LD_ADDR_VAR 0 4
30054: PUSH
30055: LD_VAR 0 12
30059: PUSH
30060: LD_INT 1
30062: PPUSH
30063: LD_VAR 0 12
30067: PPUSH
30068: CALL_OW 12
30072: ARRAY
30073: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30074: LD_VAR 0 2
30078: PPUSH
30079: LD_VAR 0 5
30083: PPUSH
30084: CALL 30442 0 2
30088: NOT
30089: IFFALSE 30148
// repeat weapon := _weapon [ 1 ] ;
30091: LD_ADDR_VAR 0 5
30095: PUSH
30096: LD_VAR 0 10
30100: PUSH
30101: LD_INT 1
30103: ARRAY
30104: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30105: LD_ADDR_VAR 0 10
30109: PUSH
30110: LD_VAR 0 10
30114: PPUSH
30115: LD_INT 1
30117: PPUSH
30118: CALL_OW 3
30122: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30123: LD_VAR 0 2
30127: PPUSH
30128: LD_VAR 0 5
30132: PPUSH
30133: CALL 30442 0 2
30137: PUSH
30138: LD_VAR 0 10
30142: PUSH
30143: EMPTY
30144: EQUAL
30145: OR
30146: IFFALSE 30091
// result := [ ] ;
30148: LD_ADDR_VAR 0 6
30152: PUSH
30153: EMPTY
30154: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30155: LD_VAR 0 1
30159: PPUSH
30160: LD_VAR 0 2
30164: PPUSH
30165: LD_VAR 0 3
30169: PPUSH
30170: LD_VAR 0 4
30174: PPUSH
30175: LD_VAR 0 5
30179: PPUSH
30180: CALL_OW 448
30184: IFFALSE 30217
// result := [ chassis , engine , control , weapon ] ;
30186: LD_ADDR_VAR 0 6
30190: PUSH
30191: LD_VAR 0 2
30195: PUSH
30196: LD_VAR 0 3
30200: PUSH
30201: LD_VAR 0 4
30205: PUSH
30206: LD_VAR 0 5
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: ST_TO_ADDR
// end ;
30217: LD_VAR 0 6
30221: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30222: LD_INT 0
30224: PPUSH
// if not chassis or not engine then
30225: LD_VAR 0 1
30229: NOT
30230: PUSH
30231: LD_VAR 0 2
30235: NOT
30236: OR
30237: IFFALSE 30241
// exit ;
30239: GO 30437
// case engine of engine_solar :
30241: LD_VAR 0 2
30245: PUSH
30246: LD_INT 2
30248: DOUBLE
30249: EQUAL
30250: IFTRUE 30254
30252: GO 30292
30254: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30255: LD_ADDR_VAR 0 3
30259: PUSH
30260: LD_INT 11
30262: PUSH
30263: LD_INT 12
30265: PUSH
30266: LD_INT 13
30268: PUSH
30269: LD_INT 14
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: LD_INT 3
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: ST_TO_ADDR
30290: GO 30421
30292: LD_INT 1
30294: DOUBLE
30295: EQUAL
30296: IFTRUE 30300
30298: GO 30362
30300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30301: LD_ADDR_VAR 0 3
30305: PUSH
30306: LD_INT 11
30308: PUSH
30309: LD_INT 12
30311: PUSH
30312: LD_INT 13
30314: PUSH
30315: LD_INT 14
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: LD_INT 2
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: LD_INT 4
30329: PUSH
30330: LD_INT 5
30332: PUSH
30333: LD_INT 21
30335: PUSH
30336: LD_INT 23
30338: PUSH
30339: LD_INT 22
30341: PUSH
30342: LD_INT 24
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: ST_TO_ADDR
30360: GO 30421
30362: LD_INT 3
30364: DOUBLE
30365: EQUAL
30366: IFTRUE 30370
30368: GO 30420
30370: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30371: LD_ADDR_VAR 0 3
30375: PUSH
30376: LD_INT 13
30378: PUSH
30379: LD_INT 14
30381: PUSH
30382: LD_INT 2
30384: PUSH
30385: LD_INT 3
30387: PUSH
30388: LD_INT 4
30390: PUSH
30391: LD_INT 5
30393: PUSH
30394: LD_INT 21
30396: PUSH
30397: LD_INT 22
30399: PUSH
30400: LD_INT 23
30402: PUSH
30403: LD_INT 24
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: ST_TO_ADDR
30418: GO 30421
30420: POP
// result := ( chassis in result ) ;
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_VAR 0 1
30430: PUSH
30431: LD_VAR 0 3
30435: IN
30436: ST_TO_ADDR
// end ;
30437: LD_VAR 0 3
30441: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30442: LD_INT 0
30444: PPUSH
// if not chassis or not weapon then
30445: LD_VAR 0 1
30449: NOT
30450: PUSH
30451: LD_VAR 0 2
30455: NOT
30456: OR
30457: IFFALSE 30461
// exit ;
30459: GO 31521
// case weapon of us_machine_gun :
30461: LD_VAR 0 2
30465: PUSH
30466: LD_INT 2
30468: DOUBLE
30469: EQUAL
30470: IFTRUE 30474
30472: GO 30504
30474: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30475: LD_ADDR_VAR 0 3
30479: PUSH
30480: LD_INT 1
30482: PUSH
30483: LD_INT 2
30485: PUSH
30486: LD_INT 3
30488: PUSH
30489: LD_INT 4
30491: PUSH
30492: LD_INT 5
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: ST_TO_ADDR
30502: GO 31505
30504: LD_INT 3
30506: DOUBLE
30507: EQUAL
30508: IFTRUE 30512
30510: GO 30542
30512: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30513: LD_ADDR_VAR 0 3
30517: PUSH
30518: LD_INT 1
30520: PUSH
30521: LD_INT 2
30523: PUSH
30524: LD_INT 3
30526: PUSH
30527: LD_INT 4
30529: PUSH
30530: LD_INT 5
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: ST_TO_ADDR
30540: GO 31505
30542: LD_INT 11
30544: DOUBLE
30545: EQUAL
30546: IFTRUE 30550
30548: GO 30580
30550: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30551: LD_ADDR_VAR 0 3
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: LD_INT 4
30567: PUSH
30568: LD_INT 5
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: ST_TO_ADDR
30578: GO 31505
30580: LD_INT 4
30582: DOUBLE
30583: EQUAL
30584: IFTRUE 30588
30586: GO 30614
30588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30589: LD_ADDR_VAR 0 3
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 4
30602: PUSH
30603: LD_INT 5
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: ST_TO_ADDR
30612: GO 31505
30614: LD_INT 5
30616: DOUBLE
30617: EQUAL
30618: IFTRUE 30622
30620: GO 30648
30622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30623: LD_ADDR_VAR 0 3
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: LD_INT 3
30633: PUSH
30634: LD_INT 4
30636: PUSH
30637: LD_INT 5
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
30646: GO 31505
30648: LD_INT 9
30650: DOUBLE
30651: EQUAL
30652: IFTRUE 30656
30654: GO 30682
30656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30657: LD_ADDR_VAR 0 3
30661: PUSH
30662: LD_INT 2
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: LD_INT 4
30670: PUSH
30671: LD_INT 5
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: ST_TO_ADDR
30680: GO 31505
30682: LD_INT 7
30684: DOUBLE
30685: EQUAL
30686: IFTRUE 30690
30688: GO 30716
30690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30691: LD_ADDR_VAR 0 3
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: LD_INT 3
30701: PUSH
30702: LD_INT 4
30704: PUSH
30705: LD_INT 5
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: ST_TO_ADDR
30714: GO 31505
30716: LD_INT 12
30718: DOUBLE
30719: EQUAL
30720: IFTRUE 30724
30722: GO 30750
30724: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30725: LD_ADDR_VAR 0 3
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: LD_INT 3
30735: PUSH
30736: LD_INT 4
30738: PUSH
30739: LD_INT 5
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: ST_TO_ADDR
30748: GO 31505
30750: LD_INT 13
30752: DOUBLE
30753: EQUAL
30754: IFTRUE 30758
30756: GO 30784
30758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30759: LD_ADDR_VAR 0 3
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: LD_INT 3
30769: PUSH
30770: LD_INT 4
30772: PUSH
30773: LD_INT 5
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: ST_TO_ADDR
30782: GO 31505
30784: LD_INT 14
30786: DOUBLE
30787: EQUAL
30788: IFTRUE 30792
30790: GO 30810
30792: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30793: LD_ADDR_VAR 0 3
30797: PUSH
30798: LD_INT 4
30800: PUSH
30801: LD_INT 5
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: ST_TO_ADDR
30808: GO 31505
30810: LD_INT 6
30812: DOUBLE
30813: EQUAL
30814: IFTRUE 30818
30816: GO 30836
30818: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30819: LD_ADDR_VAR 0 3
30823: PUSH
30824: LD_INT 4
30826: PUSH
30827: LD_INT 5
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: ST_TO_ADDR
30834: GO 31505
30836: LD_INT 10
30838: DOUBLE
30839: EQUAL
30840: IFTRUE 30844
30842: GO 30862
30844: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30845: LD_ADDR_VAR 0 3
30849: PUSH
30850: LD_INT 4
30852: PUSH
30853: LD_INT 5
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: ST_TO_ADDR
30860: GO 31505
30862: LD_INT 22
30864: DOUBLE
30865: EQUAL
30866: IFTRUE 30870
30868: GO 30896
30870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30871: LD_ADDR_VAR 0 3
30875: PUSH
30876: LD_INT 11
30878: PUSH
30879: LD_INT 12
30881: PUSH
30882: LD_INT 13
30884: PUSH
30885: LD_INT 14
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: ST_TO_ADDR
30894: GO 31505
30896: LD_INT 23
30898: DOUBLE
30899: EQUAL
30900: IFTRUE 30904
30902: GO 30930
30904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30905: LD_ADDR_VAR 0 3
30909: PUSH
30910: LD_INT 11
30912: PUSH
30913: LD_INT 12
30915: PUSH
30916: LD_INT 13
30918: PUSH
30919: LD_INT 14
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: ST_TO_ADDR
30928: GO 31505
30930: LD_INT 24
30932: DOUBLE
30933: EQUAL
30934: IFTRUE 30938
30936: GO 30964
30938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30939: LD_ADDR_VAR 0 3
30943: PUSH
30944: LD_INT 11
30946: PUSH
30947: LD_INT 12
30949: PUSH
30950: LD_INT 13
30952: PUSH
30953: LD_INT 14
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: ST_TO_ADDR
30962: GO 31505
30964: LD_INT 30
30966: DOUBLE
30967: EQUAL
30968: IFTRUE 30972
30970: GO 30998
30972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30973: LD_ADDR_VAR 0 3
30977: PUSH
30978: LD_INT 11
30980: PUSH
30981: LD_INT 12
30983: PUSH
30984: LD_INT 13
30986: PUSH
30987: LD_INT 14
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: ST_TO_ADDR
30996: GO 31505
30998: LD_INT 25
31000: DOUBLE
31001: EQUAL
31002: IFTRUE 31006
31004: GO 31024
31006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: LD_INT 13
31014: PUSH
31015: LD_INT 14
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: ST_TO_ADDR
31022: GO 31505
31024: LD_INT 27
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31050
31032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31033: LD_ADDR_VAR 0 3
31037: PUSH
31038: LD_INT 13
31040: PUSH
31041: LD_INT 14
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: ST_TO_ADDR
31048: GO 31505
31050: LD_INT 92
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31084
31058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31059: LD_ADDR_VAR 0 3
31063: PUSH
31064: LD_INT 11
31066: PUSH
31067: LD_INT 12
31069: PUSH
31070: LD_INT 13
31072: PUSH
31073: LD_INT 14
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: ST_TO_ADDR
31082: GO 31505
31084: LD_INT 28
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31110
31092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31093: LD_ADDR_VAR 0 3
31097: PUSH
31098: LD_INT 13
31100: PUSH
31101: LD_INT 14
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: ST_TO_ADDR
31108: GO 31505
31110: LD_INT 29
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31136
31118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_INT 13
31126: PUSH
31127: LD_INT 14
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: ST_TO_ADDR
31134: GO 31505
31136: LD_INT 31
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31162
31144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 13
31152: PUSH
31153: LD_INT 14
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: ST_TO_ADDR
31160: GO 31505
31162: LD_INT 26
31164: DOUBLE
31165: EQUAL
31166: IFTRUE 31170
31168: GO 31188
31170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31171: LD_ADDR_VAR 0 3
31175: PUSH
31176: LD_INT 13
31178: PUSH
31179: LD_INT 14
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: ST_TO_ADDR
31186: GO 31505
31188: LD_INT 42
31190: DOUBLE
31191: EQUAL
31192: IFTRUE 31196
31194: GO 31222
31196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31197: LD_ADDR_VAR 0 3
31201: PUSH
31202: LD_INT 21
31204: PUSH
31205: LD_INT 22
31207: PUSH
31208: LD_INT 23
31210: PUSH
31211: LD_INT 24
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: ST_TO_ADDR
31220: GO 31505
31222: LD_INT 43
31224: DOUBLE
31225: EQUAL
31226: IFTRUE 31230
31228: GO 31256
31230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31231: LD_ADDR_VAR 0 3
31235: PUSH
31236: LD_INT 21
31238: PUSH
31239: LD_INT 22
31241: PUSH
31242: LD_INT 23
31244: PUSH
31245: LD_INT 24
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
31254: GO 31505
31256: LD_INT 44
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31290
31264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31265: LD_ADDR_VAR 0 3
31269: PUSH
31270: LD_INT 21
31272: PUSH
31273: LD_INT 22
31275: PUSH
31276: LD_INT 23
31278: PUSH
31279: LD_INT 24
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: ST_TO_ADDR
31288: GO 31505
31290: LD_INT 45
31292: DOUBLE
31293: EQUAL
31294: IFTRUE 31298
31296: GO 31324
31298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31299: LD_ADDR_VAR 0 3
31303: PUSH
31304: LD_INT 21
31306: PUSH
31307: LD_INT 22
31309: PUSH
31310: LD_INT 23
31312: PUSH
31313: LD_INT 24
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: ST_TO_ADDR
31322: GO 31505
31324: LD_INT 49
31326: DOUBLE
31327: EQUAL
31328: IFTRUE 31332
31330: GO 31358
31332: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31333: LD_ADDR_VAR 0 3
31337: PUSH
31338: LD_INT 21
31340: PUSH
31341: LD_INT 22
31343: PUSH
31344: LD_INT 23
31346: PUSH
31347: LD_INT 24
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: ST_TO_ADDR
31356: GO 31505
31358: LD_INT 51
31360: DOUBLE
31361: EQUAL
31362: IFTRUE 31366
31364: GO 31392
31366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31367: LD_ADDR_VAR 0 3
31371: PUSH
31372: LD_INT 21
31374: PUSH
31375: LD_INT 22
31377: PUSH
31378: LD_INT 23
31380: PUSH
31381: LD_INT 24
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: ST_TO_ADDR
31390: GO 31505
31392: LD_INT 52
31394: DOUBLE
31395: EQUAL
31396: IFTRUE 31400
31398: GO 31426
31400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31401: LD_ADDR_VAR 0 3
31405: PUSH
31406: LD_INT 21
31408: PUSH
31409: LD_INT 22
31411: PUSH
31412: LD_INT 23
31414: PUSH
31415: LD_INT 24
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: ST_TO_ADDR
31424: GO 31505
31426: LD_INT 53
31428: DOUBLE
31429: EQUAL
31430: IFTRUE 31434
31432: GO 31452
31434: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31435: LD_ADDR_VAR 0 3
31439: PUSH
31440: LD_INT 23
31442: PUSH
31443: LD_INT 24
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: ST_TO_ADDR
31450: GO 31505
31452: LD_INT 46
31454: DOUBLE
31455: EQUAL
31456: IFTRUE 31460
31458: GO 31478
31460: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31461: LD_ADDR_VAR 0 3
31465: PUSH
31466: LD_INT 23
31468: PUSH
31469: LD_INT 24
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: ST_TO_ADDR
31476: GO 31505
31478: LD_INT 47
31480: DOUBLE
31481: EQUAL
31482: IFTRUE 31486
31484: GO 31504
31486: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31487: LD_ADDR_VAR 0 3
31491: PUSH
31492: LD_INT 23
31494: PUSH
31495: LD_INT 24
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: ST_TO_ADDR
31502: GO 31505
31504: POP
// result := ( chassis in result ) ;
31505: LD_ADDR_VAR 0 3
31509: PUSH
31510: LD_VAR 0 1
31514: PUSH
31515: LD_VAR 0 3
31519: IN
31520: ST_TO_ADDR
// end ;
31521: LD_VAR 0 3
31525: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31526: LD_INT 0
31528: PPUSH
31529: PPUSH
31530: PPUSH
31531: PPUSH
31532: PPUSH
31533: PPUSH
31534: PPUSH
// result := array ;
31535: LD_ADDR_VAR 0 5
31539: PUSH
31540: LD_VAR 0 1
31544: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31545: LD_VAR 0 1
31549: NOT
31550: PUSH
31551: LD_VAR 0 2
31555: NOT
31556: OR
31557: PUSH
31558: LD_VAR 0 3
31562: NOT
31563: OR
31564: PUSH
31565: LD_VAR 0 2
31569: PUSH
31570: LD_VAR 0 1
31574: GREATER
31575: OR
31576: PUSH
31577: LD_VAR 0 3
31581: PUSH
31582: LD_VAR 0 1
31586: GREATER
31587: OR
31588: IFFALSE 31592
// exit ;
31590: GO 31888
// if direction then
31592: LD_VAR 0 4
31596: IFFALSE 31660
// begin d := 1 ;
31598: LD_ADDR_VAR 0 9
31602: PUSH
31603: LD_INT 1
31605: ST_TO_ADDR
// if i_from > i_to then
31606: LD_VAR 0 2
31610: PUSH
31611: LD_VAR 0 3
31615: GREATER
31616: IFFALSE 31642
// length := ( array - i_from ) + i_to else
31618: LD_ADDR_VAR 0 11
31622: PUSH
31623: LD_VAR 0 1
31627: PUSH
31628: LD_VAR 0 2
31632: MINUS
31633: PUSH
31634: LD_VAR 0 3
31638: PLUS
31639: ST_TO_ADDR
31640: GO 31658
// length := i_to - i_from ;
31642: LD_ADDR_VAR 0 11
31646: PUSH
31647: LD_VAR 0 3
31651: PUSH
31652: LD_VAR 0 2
31656: MINUS
31657: ST_TO_ADDR
// end else
31658: GO 31721
// begin d := - 1 ;
31660: LD_ADDR_VAR 0 9
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: ST_TO_ADDR
// if i_from > i_to then
31669: LD_VAR 0 2
31673: PUSH
31674: LD_VAR 0 3
31678: GREATER
31679: IFFALSE 31699
// length := i_from - i_to else
31681: LD_ADDR_VAR 0 11
31685: PUSH
31686: LD_VAR 0 2
31690: PUSH
31691: LD_VAR 0 3
31695: MINUS
31696: ST_TO_ADDR
31697: GO 31721
// length := ( array - i_to ) + i_from ;
31699: LD_ADDR_VAR 0 11
31703: PUSH
31704: LD_VAR 0 1
31708: PUSH
31709: LD_VAR 0 3
31713: MINUS
31714: PUSH
31715: LD_VAR 0 2
31719: PLUS
31720: ST_TO_ADDR
// end ; if not length then
31721: LD_VAR 0 11
31725: NOT
31726: IFFALSE 31730
// exit ;
31728: GO 31888
// tmp := array ;
31730: LD_ADDR_VAR 0 10
31734: PUSH
31735: LD_VAR 0 1
31739: ST_TO_ADDR
// for i = 1 to length do
31740: LD_ADDR_VAR 0 6
31744: PUSH
31745: DOUBLE
31746: LD_INT 1
31748: DEC
31749: ST_TO_ADDR
31750: LD_VAR 0 11
31754: PUSH
31755: FOR_TO
31756: IFFALSE 31876
// begin for j = 1 to array do
31758: LD_ADDR_VAR 0 7
31762: PUSH
31763: DOUBLE
31764: LD_INT 1
31766: DEC
31767: ST_TO_ADDR
31768: LD_VAR 0 1
31772: PUSH
31773: FOR_TO
31774: IFFALSE 31862
// begin k := j + d ;
31776: LD_ADDR_VAR 0 8
31780: PUSH
31781: LD_VAR 0 7
31785: PUSH
31786: LD_VAR 0 9
31790: PLUS
31791: ST_TO_ADDR
// if k > array then
31792: LD_VAR 0 8
31796: PUSH
31797: LD_VAR 0 1
31801: GREATER
31802: IFFALSE 31812
// k := 1 ;
31804: LD_ADDR_VAR 0 8
31808: PUSH
31809: LD_INT 1
31811: ST_TO_ADDR
// if not k then
31812: LD_VAR 0 8
31816: NOT
31817: IFFALSE 31829
// k := array ;
31819: LD_ADDR_VAR 0 8
31823: PUSH
31824: LD_VAR 0 1
31828: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31829: LD_ADDR_VAR 0 10
31833: PUSH
31834: LD_VAR 0 10
31838: PPUSH
31839: LD_VAR 0 8
31843: PPUSH
31844: LD_VAR 0 1
31848: PUSH
31849: LD_VAR 0 7
31853: ARRAY
31854: PPUSH
31855: CALL_OW 1
31859: ST_TO_ADDR
// end ;
31860: GO 31773
31862: POP
31863: POP
// array := tmp ;
31864: LD_ADDR_VAR 0 1
31868: PUSH
31869: LD_VAR 0 10
31873: ST_TO_ADDR
// end ;
31874: GO 31755
31876: POP
31877: POP
// result := array ;
31878: LD_ADDR_VAR 0 5
31882: PUSH
31883: LD_VAR 0 1
31887: ST_TO_ADDR
// end ;
31888: LD_VAR 0 5
31892: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31893: LD_INT 0
31895: PPUSH
31896: PPUSH
// result := 0 ;
31897: LD_ADDR_VAR 0 3
31901: PUSH
31902: LD_INT 0
31904: ST_TO_ADDR
// if not array or not value in array then
31905: LD_VAR 0 1
31909: NOT
31910: PUSH
31911: LD_VAR 0 2
31915: PUSH
31916: LD_VAR 0 1
31920: IN
31921: NOT
31922: OR
31923: IFFALSE 31927
// exit ;
31925: GO 31981
// for i = 1 to array do
31927: LD_ADDR_VAR 0 4
31931: PUSH
31932: DOUBLE
31933: LD_INT 1
31935: DEC
31936: ST_TO_ADDR
31937: LD_VAR 0 1
31941: PUSH
31942: FOR_TO
31943: IFFALSE 31979
// if value = array [ i ] then
31945: LD_VAR 0 2
31949: PUSH
31950: LD_VAR 0 1
31954: PUSH
31955: LD_VAR 0 4
31959: ARRAY
31960: EQUAL
31961: IFFALSE 31977
// begin result := i ;
31963: LD_ADDR_VAR 0 3
31967: PUSH
31968: LD_VAR 0 4
31972: ST_TO_ADDR
// exit ;
31973: POP
31974: POP
31975: GO 31981
// end ;
31977: GO 31942
31979: POP
31980: POP
// end ;
31981: LD_VAR 0 3
31985: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31986: LD_INT 0
31988: PPUSH
// vc_chassis := chassis ;
31989: LD_ADDR_OWVAR 37
31993: PUSH
31994: LD_VAR 0 1
31998: ST_TO_ADDR
// vc_engine := engine ;
31999: LD_ADDR_OWVAR 39
32003: PUSH
32004: LD_VAR 0 2
32008: ST_TO_ADDR
// vc_control := control ;
32009: LD_ADDR_OWVAR 38
32013: PUSH
32014: LD_VAR 0 3
32018: ST_TO_ADDR
// vc_weapon := weapon ;
32019: LD_ADDR_OWVAR 40
32023: PUSH
32024: LD_VAR 0 4
32028: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32029: LD_ADDR_OWVAR 41
32033: PUSH
32034: LD_VAR 0 5
32038: ST_TO_ADDR
// end ;
32039: LD_VAR 0 6
32043: RET
// export function WantPlant ( unit ) ; var task ; begin
32044: LD_INT 0
32046: PPUSH
32047: PPUSH
// result := false ;
32048: LD_ADDR_VAR 0 2
32052: PUSH
32053: LD_INT 0
32055: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32056: LD_ADDR_VAR 0 3
32060: PUSH
32061: LD_VAR 0 1
32065: PPUSH
32066: CALL_OW 437
32070: ST_TO_ADDR
// if task then
32071: LD_VAR 0 3
32075: IFFALSE 32103
// if task [ 1 ] [ 1 ] = p then
32077: LD_VAR 0 3
32081: PUSH
32082: LD_INT 1
32084: ARRAY
32085: PUSH
32086: LD_INT 1
32088: ARRAY
32089: PUSH
32090: LD_STRING p
32092: EQUAL
32093: IFFALSE 32103
// result := true ;
32095: LD_ADDR_VAR 0 2
32099: PUSH
32100: LD_INT 1
32102: ST_TO_ADDR
// end ;
32103: LD_VAR 0 2
32107: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32108: LD_INT 0
32110: PPUSH
32111: PPUSH
32112: PPUSH
32113: PPUSH
// if pos < 1 then
32114: LD_VAR 0 2
32118: PUSH
32119: LD_INT 1
32121: LESS
32122: IFFALSE 32126
// exit ;
32124: GO 32429
// if pos = 1 then
32126: LD_VAR 0 2
32130: PUSH
32131: LD_INT 1
32133: EQUAL
32134: IFFALSE 32167
// result := Replace ( arr , pos [ 1 ] , value ) else
32136: LD_ADDR_VAR 0 4
32140: PUSH
32141: LD_VAR 0 1
32145: PPUSH
32146: LD_VAR 0 2
32150: PUSH
32151: LD_INT 1
32153: ARRAY
32154: PPUSH
32155: LD_VAR 0 3
32159: PPUSH
32160: CALL_OW 1
32164: ST_TO_ADDR
32165: GO 32429
// begin tmp := arr ;
32167: LD_ADDR_VAR 0 6
32171: PUSH
32172: LD_VAR 0 1
32176: ST_TO_ADDR
// s_arr := [ tmp ] ;
32177: LD_ADDR_VAR 0 7
32181: PUSH
32182: LD_VAR 0 6
32186: PUSH
32187: EMPTY
32188: LIST
32189: ST_TO_ADDR
// for i = 1 to pos - 1 do
32190: LD_ADDR_VAR 0 5
32194: PUSH
32195: DOUBLE
32196: LD_INT 1
32198: DEC
32199: ST_TO_ADDR
32200: LD_VAR 0 2
32204: PUSH
32205: LD_INT 1
32207: MINUS
32208: PUSH
32209: FOR_TO
32210: IFFALSE 32255
// begin tmp := tmp [ pos [ i ] ] ;
32212: LD_ADDR_VAR 0 6
32216: PUSH
32217: LD_VAR 0 6
32221: PUSH
32222: LD_VAR 0 2
32226: PUSH
32227: LD_VAR 0 5
32231: ARRAY
32232: ARRAY
32233: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32234: LD_ADDR_VAR 0 7
32238: PUSH
32239: LD_VAR 0 7
32243: PUSH
32244: LD_VAR 0 6
32248: PUSH
32249: EMPTY
32250: LIST
32251: ADD
32252: ST_TO_ADDR
// end ;
32253: GO 32209
32255: POP
32256: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32257: LD_ADDR_VAR 0 6
32261: PUSH
32262: LD_VAR 0 6
32266: PPUSH
32267: LD_VAR 0 2
32271: PUSH
32272: LD_VAR 0 2
32276: ARRAY
32277: PPUSH
32278: LD_VAR 0 3
32282: PPUSH
32283: CALL_OW 1
32287: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32288: LD_ADDR_VAR 0 7
32292: PUSH
32293: LD_VAR 0 7
32297: PPUSH
32298: LD_VAR 0 7
32302: PPUSH
32303: LD_VAR 0 6
32307: PPUSH
32308: CALL_OW 1
32312: ST_TO_ADDR
// for i = s_arr downto 2 do
32313: LD_ADDR_VAR 0 5
32317: PUSH
32318: DOUBLE
32319: LD_VAR 0 7
32323: INC
32324: ST_TO_ADDR
32325: LD_INT 2
32327: PUSH
32328: FOR_DOWNTO
32329: IFFALSE 32413
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32331: LD_ADDR_VAR 0 6
32335: PUSH
32336: LD_VAR 0 7
32340: PUSH
32341: LD_VAR 0 5
32345: PUSH
32346: LD_INT 1
32348: MINUS
32349: ARRAY
32350: PPUSH
32351: LD_VAR 0 2
32355: PUSH
32356: LD_VAR 0 5
32360: PUSH
32361: LD_INT 1
32363: MINUS
32364: ARRAY
32365: PPUSH
32366: LD_VAR 0 7
32370: PUSH
32371: LD_VAR 0 5
32375: ARRAY
32376: PPUSH
32377: CALL_OW 1
32381: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32382: LD_ADDR_VAR 0 7
32386: PUSH
32387: LD_VAR 0 7
32391: PPUSH
32392: LD_VAR 0 5
32396: PUSH
32397: LD_INT 1
32399: MINUS
32400: PPUSH
32401: LD_VAR 0 6
32405: PPUSH
32406: CALL_OW 1
32410: ST_TO_ADDR
// end ;
32411: GO 32328
32413: POP
32414: POP
// result := s_arr [ 1 ] ;
32415: LD_ADDR_VAR 0 4
32419: PUSH
32420: LD_VAR 0 7
32424: PUSH
32425: LD_INT 1
32427: ARRAY
32428: ST_TO_ADDR
// end ; end ;
32429: LD_VAR 0 4
32433: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32434: LD_INT 0
32436: PPUSH
32437: PPUSH
// if not list then
32438: LD_VAR 0 1
32442: NOT
32443: IFFALSE 32447
// exit ;
32445: GO 32538
// i := list [ pos1 ] ;
32447: LD_ADDR_VAR 0 5
32451: PUSH
32452: LD_VAR 0 1
32456: PUSH
32457: LD_VAR 0 2
32461: ARRAY
32462: ST_TO_ADDR
// if not i then
32463: LD_VAR 0 5
32467: NOT
32468: IFFALSE 32472
// exit ;
32470: GO 32538
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32472: LD_ADDR_VAR 0 1
32476: PUSH
32477: LD_VAR 0 1
32481: PPUSH
32482: LD_VAR 0 2
32486: PPUSH
32487: LD_VAR 0 1
32491: PUSH
32492: LD_VAR 0 3
32496: ARRAY
32497: PPUSH
32498: CALL_OW 1
32502: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32503: LD_ADDR_VAR 0 1
32507: PUSH
32508: LD_VAR 0 1
32512: PPUSH
32513: LD_VAR 0 3
32517: PPUSH
32518: LD_VAR 0 5
32522: PPUSH
32523: CALL_OW 1
32527: ST_TO_ADDR
// result := list ;
32528: LD_ADDR_VAR 0 4
32532: PUSH
32533: LD_VAR 0 1
32537: ST_TO_ADDR
// end ;
32538: LD_VAR 0 4
32542: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32543: LD_INT 0
32545: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32546: LD_ADDR_VAR 0 5
32550: PUSH
32551: LD_VAR 0 1
32555: PPUSH
32556: CALL_OW 250
32560: PPUSH
32561: LD_VAR 0 1
32565: PPUSH
32566: CALL_OW 251
32570: PPUSH
32571: LD_VAR 0 2
32575: PPUSH
32576: LD_VAR 0 3
32580: PPUSH
32581: LD_VAR 0 4
32585: PPUSH
32586: CALL 32596 0 5
32590: ST_TO_ADDR
// end ;
32591: LD_VAR 0 5
32595: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32596: LD_INT 0
32598: PPUSH
32599: PPUSH
32600: PPUSH
32601: PPUSH
// if not list then
32602: LD_VAR 0 3
32606: NOT
32607: IFFALSE 32611
// exit ;
32609: GO 32999
// result := [ ] ;
32611: LD_ADDR_VAR 0 6
32615: PUSH
32616: EMPTY
32617: ST_TO_ADDR
// for i in list do
32618: LD_ADDR_VAR 0 7
32622: PUSH
32623: LD_VAR 0 3
32627: PUSH
32628: FOR_IN
32629: IFFALSE 32831
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32631: LD_ADDR_VAR 0 9
32635: PUSH
32636: LD_VAR 0 7
32640: PPUSH
32641: LD_VAR 0 1
32645: PPUSH
32646: LD_VAR 0 2
32650: PPUSH
32651: CALL_OW 297
32655: ST_TO_ADDR
// if not result then
32656: LD_VAR 0 6
32660: NOT
32661: IFFALSE 32687
// result := [ [ i , tmp ] ] else
32663: LD_ADDR_VAR 0 6
32667: PUSH
32668: LD_VAR 0 7
32672: PUSH
32673: LD_VAR 0 9
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: EMPTY
32683: LIST
32684: ST_TO_ADDR
32685: GO 32829
// begin if result [ result ] [ 2 ] < tmp then
32687: LD_VAR 0 6
32691: PUSH
32692: LD_VAR 0 6
32696: ARRAY
32697: PUSH
32698: LD_INT 2
32700: ARRAY
32701: PUSH
32702: LD_VAR 0 9
32706: LESS
32707: IFFALSE 32749
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32709: LD_ADDR_VAR 0 6
32713: PUSH
32714: LD_VAR 0 6
32718: PPUSH
32719: LD_VAR 0 6
32723: PUSH
32724: LD_INT 1
32726: PLUS
32727: PPUSH
32728: LD_VAR 0 7
32732: PUSH
32733: LD_VAR 0 9
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PPUSH
32742: CALL_OW 2
32746: ST_TO_ADDR
32747: GO 32829
// for j = 1 to result do
32749: LD_ADDR_VAR 0 8
32753: PUSH
32754: DOUBLE
32755: LD_INT 1
32757: DEC
32758: ST_TO_ADDR
32759: LD_VAR 0 6
32763: PUSH
32764: FOR_TO
32765: IFFALSE 32827
// begin if tmp < result [ j ] [ 2 ] then
32767: LD_VAR 0 9
32771: PUSH
32772: LD_VAR 0 6
32776: PUSH
32777: LD_VAR 0 8
32781: ARRAY
32782: PUSH
32783: LD_INT 2
32785: ARRAY
32786: LESS
32787: IFFALSE 32825
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32789: LD_ADDR_VAR 0 6
32793: PUSH
32794: LD_VAR 0 6
32798: PPUSH
32799: LD_VAR 0 8
32803: PPUSH
32804: LD_VAR 0 7
32808: PUSH
32809: LD_VAR 0 9
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PPUSH
32818: CALL_OW 2
32822: ST_TO_ADDR
// break ;
32823: GO 32827
// end ; end ;
32825: GO 32764
32827: POP
32828: POP
// end ; end ;
32829: GO 32628
32831: POP
32832: POP
// if result and not asc then
32833: LD_VAR 0 6
32837: PUSH
32838: LD_VAR 0 4
32842: NOT
32843: AND
32844: IFFALSE 32919
// begin tmp := result ;
32846: LD_ADDR_VAR 0 9
32850: PUSH
32851: LD_VAR 0 6
32855: ST_TO_ADDR
// for i = tmp downto 1 do
32856: LD_ADDR_VAR 0 7
32860: PUSH
32861: DOUBLE
32862: LD_VAR 0 9
32866: INC
32867: ST_TO_ADDR
32868: LD_INT 1
32870: PUSH
32871: FOR_DOWNTO
32872: IFFALSE 32917
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32874: LD_ADDR_VAR 0 6
32878: PUSH
32879: LD_VAR 0 6
32883: PPUSH
32884: LD_VAR 0 9
32888: PUSH
32889: LD_VAR 0 7
32893: MINUS
32894: PUSH
32895: LD_INT 1
32897: PLUS
32898: PPUSH
32899: LD_VAR 0 9
32903: PUSH
32904: LD_VAR 0 7
32908: ARRAY
32909: PPUSH
32910: CALL_OW 1
32914: ST_TO_ADDR
32915: GO 32871
32917: POP
32918: POP
// end ; tmp := [ ] ;
32919: LD_ADDR_VAR 0 9
32923: PUSH
32924: EMPTY
32925: ST_TO_ADDR
// if mode then
32926: LD_VAR 0 5
32930: IFFALSE 32999
// begin for i = 1 to result do
32932: LD_ADDR_VAR 0 7
32936: PUSH
32937: DOUBLE
32938: LD_INT 1
32940: DEC
32941: ST_TO_ADDR
32942: LD_VAR 0 6
32946: PUSH
32947: FOR_TO
32948: IFFALSE 32987
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32950: LD_ADDR_VAR 0 9
32954: PUSH
32955: LD_VAR 0 9
32959: PPUSH
32960: LD_VAR 0 7
32964: PPUSH
32965: LD_VAR 0 6
32969: PUSH
32970: LD_VAR 0 7
32974: ARRAY
32975: PUSH
32976: LD_INT 1
32978: ARRAY
32979: PPUSH
32980: CALL_OW 1
32984: ST_TO_ADDR
32985: GO 32947
32987: POP
32988: POP
// result := tmp ;
32989: LD_ADDR_VAR 0 6
32993: PUSH
32994: LD_VAR 0 9
32998: ST_TO_ADDR
// end ; end ;
32999: LD_VAR 0 6
33003: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33004: LD_INT 0
33006: PPUSH
33007: PPUSH
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33012: LD_ADDR_VAR 0 5
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: EMPTY
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: ST_TO_ADDR
// if not x or not y then
33034: LD_VAR 0 2
33038: NOT
33039: PUSH
33040: LD_VAR 0 3
33044: NOT
33045: OR
33046: IFFALSE 33050
// exit ;
33048: GO 34700
// if not range then
33050: LD_VAR 0 4
33054: NOT
33055: IFFALSE 33065
// range := 10 ;
33057: LD_ADDR_VAR 0 4
33061: PUSH
33062: LD_INT 10
33064: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33065: LD_ADDR_VAR 0 8
33069: PUSH
33070: LD_INT 81
33072: PUSH
33073: LD_VAR 0 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 92
33084: PUSH
33085: LD_VAR 0 2
33089: PUSH
33090: LD_VAR 0 3
33094: PUSH
33095: LD_VAR 0 4
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 3
33108: PUSH
33109: LD_INT 21
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: PPUSH
33128: CALL_OW 69
33132: ST_TO_ADDR
// if not tmp then
33133: LD_VAR 0 8
33137: NOT
33138: IFFALSE 33142
// exit ;
33140: GO 34700
// for i in tmp do
33142: LD_ADDR_VAR 0 6
33146: PUSH
33147: LD_VAR 0 8
33151: PUSH
33152: FOR_IN
33153: IFFALSE 34675
// begin points := [ 0 , 0 , 0 ] ;
33155: LD_ADDR_VAR 0 9
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: ST_TO_ADDR
// bpoints := 1 ;
33174: LD_ADDR_VAR 0 10
33178: PUSH
33179: LD_INT 1
33181: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33182: LD_VAR 0 6
33186: PPUSH
33187: CALL_OW 247
33191: PUSH
33192: LD_INT 1
33194: DOUBLE
33195: EQUAL
33196: IFTRUE 33200
33198: GO 33778
33200: POP
// begin if GetClass ( i ) = 1 then
33201: LD_VAR 0 6
33205: PPUSH
33206: CALL_OW 257
33210: PUSH
33211: LD_INT 1
33213: EQUAL
33214: IFFALSE 33235
// points := [ 10 , 5 , 3 ] ;
33216: LD_ADDR_VAR 0 9
33220: PUSH
33221: LD_INT 10
33223: PUSH
33224: LD_INT 5
33226: PUSH
33227: LD_INT 3
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: LIST
33234: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33235: LD_VAR 0 6
33239: PPUSH
33240: CALL_OW 257
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: LD_INT 4
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: LIST
33258: IN
33259: IFFALSE 33280
// points := [ 3 , 2 , 1 ] ;
33261: LD_ADDR_VAR 0 9
33265: PUSH
33266: LD_INT 3
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33280: LD_VAR 0 6
33284: PPUSH
33285: CALL_OW 257
33289: PUSH
33290: LD_INT 5
33292: EQUAL
33293: IFFALSE 33314
// points := [ 130 , 5 , 2 ] ;
33295: LD_ADDR_VAR 0 9
33299: PUSH
33300: LD_INT 130
33302: PUSH
33303: LD_INT 5
33305: PUSH
33306: LD_INT 2
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: LIST
33313: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33314: LD_VAR 0 6
33318: PPUSH
33319: CALL_OW 257
33323: PUSH
33324: LD_INT 8
33326: EQUAL
33327: IFFALSE 33348
// points := [ 35 , 35 , 30 ] ;
33329: LD_ADDR_VAR 0 9
33333: PUSH
33334: LD_INT 35
33336: PUSH
33337: LD_INT 35
33339: PUSH
33340: LD_INT 30
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33348: LD_VAR 0 6
33352: PPUSH
33353: CALL_OW 257
33357: PUSH
33358: LD_INT 9
33360: EQUAL
33361: IFFALSE 33382
// points := [ 20 , 55 , 40 ] ;
33363: LD_ADDR_VAR 0 9
33367: PUSH
33368: LD_INT 20
33370: PUSH
33371: LD_INT 55
33373: PUSH
33374: LD_INT 40
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33382: LD_VAR 0 6
33386: PPUSH
33387: CALL_OW 257
33391: PUSH
33392: LD_INT 12
33394: PUSH
33395: LD_INT 16
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: IN
33402: IFFALSE 33423
// points := [ 5 , 3 , 2 ] ;
33404: LD_ADDR_VAR 0 9
33408: PUSH
33409: LD_INT 5
33411: PUSH
33412: LD_INT 3
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33423: LD_VAR 0 6
33427: PPUSH
33428: CALL_OW 257
33432: PUSH
33433: LD_INT 17
33435: EQUAL
33436: IFFALSE 33457
// points := [ 100 , 50 , 75 ] ;
33438: LD_ADDR_VAR 0 9
33442: PUSH
33443: LD_INT 100
33445: PUSH
33446: LD_INT 50
33448: PUSH
33449: LD_INT 75
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33457: LD_VAR 0 6
33461: PPUSH
33462: CALL_OW 257
33466: PUSH
33467: LD_INT 15
33469: EQUAL
33470: IFFALSE 33491
// points := [ 10 , 5 , 3 ] ;
33472: LD_ADDR_VAR 0 9
33476: PUSH
33477: LD_INT 10
33479: PUSH
33480: LD_INT 5
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33491: LD_VAR 0 6
33495: PPUSH
33496: CALL_OW 257
33500: PUSH
33501: LD_INT 14
33503: EQUAL
33504: IFFALSE 33525
// points := [ 10 , 0 , 0 ] ;
33506: LD_ADDR_VAR 0 9
33510: PUSH
33511: LD_INT 10
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: LIST
33524: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33525: LD_VAR 0 6
33529: PPUSH
33530: CALL_OW 257
33534: PUSH
33535: LD_INT 11
33537: EQUAL
33538: IFFALSE 33559
// points := [ 30 , 10 , 5 ] ;
33540: LD_ADDR_VAR 0 9
33544: PUSH
33545: LD_INT 30
33547: PUSH
33548: LD_INT 10
33550: PUSH
33551: LD_INT 5
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: LIST
33558: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33559: LD_VAR 0 1
33563: PPUSH
33564: LD_INT 5
33566: PPUSH
33567: CALL_OW 321
33571: PUSH
33572: LD_INT 2
33574: EQUAL
33575: IFFALSE 33592
// bpoints := bpoints * 1.8 ;
33577: LD_ADDR_VAR 0 10
33581: PUSH
33582: LD_VAR 0 10
33586: PUSH
33587: LD_REAL  1.80000000000000E+0000
33590: MUL
33591: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33592: LD_VAR 0 6
33596: PPUSH
33597: CALL_OW 257
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 2
33607: PUSH
33608: LD_INT 3
33610: PUSH
33611: LD_INT 4
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: IN
33620: PUSH
33621: LD_VAR 0 1
33625: PPUSH
33626: LD_INT 51
33628: PPUSH
33629: CALL_OW 321
33633: PUSH
33634: LD_INT 2
33636: EQUAL
33637: AND
33638: IFFALSE 33655
// bpoints := bpoints * 1.2 ;
33640: LD_ADDR_VAR 0 10
33644: PUSH
33645: LD_VAR 0 10
33649: PUSH
33650: LD_REAL  1.20000000000000E+0000
33653: MUL
33654: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33655: LD_VAR 0 6
33659: PPUSH
33660: CALL_OW 257
33664: PUSH
33665: LD_INT 5
33667: PUSH
33668: LD_INT 7
33670: PUSH
33671: LD_INT 9
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: LIST
33678: IN
33679: PUSH
33680: LD_VAR 0 1
33684: PPUSH
33685: LD_INT 52
33687: PPUSH
33688: CALL_OW 321
33692: PUSH
33693: LD_INT 2
33695: EQUAL
33696: AND
33697: IFFALSE 33714
// bpoints := bpoints * 1.5 ;
33699: LD_ADDR_VAR 0 10
33703: PUSH
33704: LD_VAR 0 10
33708: PUSH
33709: LD_REAL  1.50000000000000E+0000
33712: MUL
33713: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33714: LD_VAR 0 1
33718: PPUSH
33719: LD_INT 66
33721: PPUSH
33722: CALL_OW 321
33726: PUSH
33727: LD_INT 2
33729: EQUAL
33730: IFFALSE 33747
// bpoints := bpoints * 1.1 ;
33732: LD_ADDR_VAR 0 10
33736: PUSH
33737: LD_VAR 0 10
33741: PUSH
33742: LD_REAL  1.10000000000000E+0000
33745: MUL
33746: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33747: LD_ADDR_VAR 0 10
33751: PUSH
33752: LD_VAR 0 10
33756: PUSH
33757: LD_VAR 0 6
33761: PPUSH
33762: LD_INT 1
33764: PPUSH
33765: CALL_OW 259
33769: PUSH
33770: LD_REAL  1.15000000000000E+0000
33773: MUL
33774: MUL
33775: ST_TO_ADDR
// end ; unit_vehicle :
33776: GO 34604
33778: LD_INT 2
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33786
33784: GO 34592
33786: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33787: LD_VAR 0 6
33791: PPUSH
33792: CALL_OW 264
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 42
33802: PUSH
33803: LD_INT 24
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: LIST
33810: IN
33811: IFFALSE 33832
// points := [ 25 , 5 , 3 ] ;
33813: LD_ADDR_VAR 0 9
33817: PUSH
33818: LD_INT 25
33820: PUSH
33821: LD_INT 5
33823: PUSH
33824: LD_INT 3
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33832: LD_VAR 0 6
33836: PPUSH
33837: CALL_OW 264
33841: PUSH
33842: LD_INT 4
33844: PUSH
33845: LD_INT 43
33847: PUSH
33848: LD_INT 25
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: IN
33856: IFFALSE 33877
// points := [ 40 , 15 , 5 ] ;
33858: LD_ADDR_VAR 0 9
33862: PUSH
33863: LD_INT 40
33865: PUSH
33866: LD_INT 15
33868: PUSH
33869: LD_INT 5
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: LIST
33876: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33877: LD_VAR 0 6
33881: PPUSH
33882: CALL_OW 264
33886: PUSH
33887: LD_INT 3
33889: PUSH
33890: LD_INT 23
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: IN
33897: IFFALSE 33918
// points := [ 7 , 25 , 8 ] ;
33899: LD_ADDR_VAR 0 9
33903: PUSH
33904: LD_INT 7
33906: PUSH
33907: LD_INT 25
33909: PUSH
33910: LD_INT 8
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: LIST
33917: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33918: LD_VAR 0 6
33922: PPUSH
33923: CALL_OW 264
33927: PUSH
33928: LD_INT 5
33930: PUSH
33931: LD_INT 27
33933: PUSH
33934: LD_INT 44
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: LIST
33941: IN
33942: IFFALSE 33963
// points := [ 14 , 50 , 16 ] ;
33944: LD_ADDR_VAR 0 9
33948: PUSH
33949: LD_INT 14
33951: PUSH
33952: LD_INT 50
33954: PUSH
33955: LD_INT 16
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33963: LD_VAR 0 6
33967: PPUSH
33968: CALL_OW 264
33972: PUSH
33973: LD_INT 6
33975: PUSH
33976: LD_INT 46
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: IN
33983: IFFALSE 34004
// points := [ 32 , 120 , 70 ] ;
33985: LD_ADDR_VAR 0 9
33989: PUSH
33990: LD_INT 32
33992: PUSH
33993: LD_INT 120
33995: PUSH
33996: LD_INT 70
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34004: LD_VAR 0 6
34008: PPUSH
34009: CALL_OW 264
34013: PUSH
34014: LD_INT 7
34016: PUSH
34017: LD_INT 28
34019: PUSH
34020: LD_INT 45
34022: PUSH
34023: LD_INT 92
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: IN
34032: IFFALSE 34053
// points := [ 35 , 20 , 45 ] ;
34034: LD_ADDR_VAR 0 9
34038: PUSH
34039: LD_INT 35
34041: PUSH
34042: LD_INT 20
34044: PUSH
34045: LD_INT 45
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: LIST
34052: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34053: LD_VAR 0 6
34057: PPUSH
34058: CALL_OW 264
34062: PUSH
34063: LD_INT 47
34065: PUSH
34066: EMPTY
34067: LIST
34068: IN
34069: IFFALSE 34090
// points := [ 67 , 45 , 75 ] ;
34071: LD_ADDR_VAR 0 9
34075: PUSH
34076: LD_INT 67
34078: PUSH
34079: LD_INT 45
34081: PUSH
34082: LD_INT 75
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34090: LD_VAR 0 6
34094: PPUSH
34095: CALL_OW 264
34099: PUSH
34100: LD_INT 26
34102: PUSH
34103: EMPTY
34104: LIST
34105: IN
34106: IFFALSE 34127
// points := [ 120 , 30 , 80 ] ;
34108: LD_ADDR_VAR 0 9
34112: PUSH
34113: LD_INT 120
34115: PUSH
34116: LD_INT 30
34118: PUSH
34119: LD_INT 80
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: LIST
34126: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34127: LD_VAR 0 6
34131: PPUSH
34132: CALL_OW 264
34136: PUSH
34137: LD_INT 22
34139: PUSH
34140: EMPTY
34141: LIST
34142: IN
34143: IFFALSE 34164
// points := [ 40 , 1 , 1 ] ;
34145: LD_ADDR_VAR 0 9
34149: PUSH
34150: LD_INT 40
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: LIST
34163: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34164: LD_VAR 0 6
34168: PPUSH
34169: CALL_OW 264
34173: PUSH
34174: LD_INT 29
34176: PUSH
34177: EMPTY
34178: LIST
34179: IN
34180: IFFALSE 34201
// points := [ 70 , 200 , 400 ] ;
34182: LD_ADDR_VAR 0 9
34186: PUSH
34187: LD_INT 70
34189: PUSH
34190: LD_INT 200
34192: PUSH
34193: LD_INT 400
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34201: LD_VAR 0 6
34205: PPUSH
34206: CALL_OW 264
34210: PUSH
34211: LD_INT 14
34213: PUSH
34214: LD_INT 53
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: IN
34221: IFFALSE 34242
// points := [ 40 , 10 , 20 ] ;
34223: LD_ADDR_VAR 0 9
34227: PUSH
34228: LD_INT 40
34230: PUSH
34231: LD_INT 10
34233: PUSH
34234: LD_INT 20
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34242: LD_VAR 0 6
34246: PPUSH
34247: CALL_OW 264
34251: PUSH
34252: LD_INT 9
34254: PUSH
34255: EMPTY
34256: LIST
34257: IN
34258: IFFALSE 34279
// points := [ 5 , 70 , 20 ] ;
34260: LD_ADDR_VAR 0 9
34264: PUSH
34265: LD_INT 5
34267: PUSH
34268: LD_INT 70
34270: PUSH
34271: LD_INT 20
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34279: LD_VAR 0 6
34283: PPUSH
34284: CALL_OW 264
34288: PUSH
34289: LD_INT 10
34291: PUSH
34292: EMPTY
34293: LIST
34294: IN
34295: IFFALSE 34316
// points := [ 35 , 110 , 70 ] ;
34297: LD_ADDR_VAR 0 9
34301: PUSH
34302: LD_INT 35
34304: PUSH
34305: LD_INT 110
34307: PUSH
34308: LD_INT 70
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34316: LD_VAR 0 6
34320: PPUSH
34321: CALL_OW 265
34325: PUSH
34326: LD_INT 25
34328: EQUAL
34329: IFFALSE 34350
// points := [ 80 , 65 , 100 ] ;
34331: LD_ADDR_VAR 0 9
34335: PUSH
34336: LD_INT 80
34338: PUSH
34339: LD_INT 65
34341: PUSH
34342: LD_INT 100
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34350: LD_VAR 0 6
34354: PPUSH
34355: CALL_OW 263
34359: PUSH
34360: LD_INT 1
34362: EQUAL
34363: IFFALSE 34398
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34365: LD_ADDR_VAR 0 10
34369: PUSH
34370: LD_VAR 0 10
34374: PUSH
34375: LD_VAR 0 6
34379: PPUSH
34380: CALL_OW 311
34384: PPUSH
34385: LD_INT 3
34387: PPUSH
34388: CALL_OW 259
34392: PUSH
34393: LD_INT 4
34395: MUL
34396: MUL
34397: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34398: LD_VAR 0 6
34402: PPUSH
34403: CALL_OW 263
34407: PUSH
34408: LD_INT 2
34410: EQUAL
34411: IFFALSE 34462
// begin j := IsControledBy ( i ) ;
34413: LD_ADDR_VAR 0 7
34417: PUSH
34418: LD_VAR 0 6
34422: PPUSH
34423: CALL_OW 312
34427: ST_TO_ADDR
// if j then
34428: LD_VAR 0 7
34432: IFFALSE 34462
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34434: LD_ADDR_VAR 0 10
34438: PUSH
34439: LD_VAR 0 10
34443: PUSH
34444: LD_VAR 0 7
34448: PPUSH
34449: LD_INT 3
34451: PPUSH
34452: CALL_OW 259
34456: PUSH
34457: LD_INT 3
34459: MUL
34460: MUL
34461: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34462: LD_VAR 0 6
34466: PPUSH
34467: CALL_OW 264
34471: PUSH
34472: LD_INT 5
34474: PUSH
34475: LD_INT 6
34477: PUSH
34478: LD_INT 46
34480: PUSH
34481: LD_INT 44
34483: PUSH
34484: LD_INT 47
34486: PUSH
34487: LD_INT 45
34489: PUSH
34490: LD_INT 28
34492: PUSH
34493: LD_INT 7
34495: PUSH
34496: LD_INT 27
34498: PUSH
34499: LD_INT 29
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: IN
34514: PUSH
34515: LD_VAR 0 1
34519: PPUSH
34520: LD_INT 52
34522: PPUSH
34523: CALL_OW 321
34527: PUSH
34528: LD_INT 2
34530: EQUAL
34531: AND
34532: IFFALSE 34549
// bpoints := bpoints * 1.2 ;
34534: LD_ADDR_VAR 0 10
34538: PUSH
34539: LD_VAR 0 10
34543: PUSH
34544: LD_REAL  1.20000000000000E+0000
34547: MUL
34548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34549: LD_VAR 0 6
34553: PPUSH
34554: CALL_OW 264
34558: PUSH
34559: LD_INT 6
34561: PUSH
34562: LD_INT 46
34564: PUSH
34565: LD_INT 47
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: LIST
34572: IN
34573: IFFALSE 34590
// bpoints := bpoints * 1.2 ;
34575: LD_ADDR_VAR 0 10
34579: PUSH
34580: LD_VAR 0 10
34584: PUSH
34585: LD_REAL  1.20000000000000E+0000
34588: MUL
34589: ST_TO_ADDR
// end ; unit_building :
34590: GO 34604
34592: LD_INT 3
34594: DOUBLE
34595: EQUAL
34596: IFTRUE 34600
34598: GO 34603
34600: POP
// ; end ;
34601: GO 34604
34603: POP
// for j = 1 to 3 do
34604: LD_ADDR_VAR 0 7
34608: PUSH
34609: DOUBLE
34610: LD_INT 1
34612: DEC
34613: ST_TO_ADDR
34614: LD_INT 3
34616: PUSH
34617: FOR_TO
34618: IFFALSE 34671
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34620: LD_ADDR_VAR 0 5
34624: PUSH
34625: LD_VAR 0 5
34629: PPUSH
34630: LD_VAR 0 7
34634: PPUSH
34635: LD_VAR 0 5
34639: PUSH
34640: LD_VAR 0 7
34644: ARRAY
34645: PUSH
34646: LD_VAR 0 9
34650: PUSH
34651: LD_VAR 0 7
34655: ARRAY
34656: PUSH
34657: LD_VAR 0 10
34661: MUL
34662: PLUS
34663: PPUSH
34664: CALL_OW 1
34668: ST_TO_ADDR
34669: GO 34617
34671: POP
34672: POP
// end ;
34673: GO 33152
34675: POP
34676: POP
// result := Replace ( result , 4 , tmp ) ;
34677: LD_ADDR_VAR 0 5
34681: PUSH
34682: LD_VAR 0 5
34686: PPUSH
34687: LD_INT 4
34689: PPUSH
34690: LD_VAR 0 8
34694: PPUSH
34695: CALL_OW 1
34699: ST_TO_ADDR
// end ;
34700: LD_VAR 0 5
34704: RET
// export function DangerAtRange ( unit , range ) ; begin
34705: LD_INT 0
34707: PPUSH
// if not unit then
34708: LD_VAR 0 1
34712: NOT
34713: IFFALSE 34717
// exit ;
34715: GO 34762
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34717: LD_ADDR_VAR 0 3
34721: PUSH
34722: LD_VAR 0 1
34726: PPUSH
34727: CALL_OW 255
34731: PPUSH
34732: LD_VAR 0 1
34736: PPUSH
34737: CALL_OW 250
34741: PPUSH
34742: LD_VAR 0 1
34746: PPUSH
34747: CALL_OW 251
34751: PPUSH
34752: LD_VAR 0 2
34756: PPUSH
34757: CALL 33004 0 4
34761: ST_TO_ADDR
// end ;
34762: LD_VAR 0 3
34766: RET
// export function DangerInArea ( side , area ) ; begin
34767: LD_INT 0
34769: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34770: LD_ADDR_VAR 0 3
34774: PUSH
34775: LD_VAR 0 2
34779: PPUSH
34780: LD_INT 81
34782: PUSH
34783: LD_VAR 0 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PPUSH
34792: CALL_OW 70
34796: ST_TO_ADDR
// end ;
34797: LD_VAR 0 3
34801: RET
// export function IsExtension ( b ) ; begin
34802: LD_INT 0
34804: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34805: LD_ADDR_VAR 0 2
34809: PUSH
34810: LD_VAR 0 1
34814: PUSH
34815: LD_INT 23
34817: PUSH
34818: LD_INT 20
34820: PUSH
34821: LD_INT 22
34823: PUSH
34824: LD_INT 17
34826: PUSH
34827: LD_INT 24
34829: PUSH
34830: LD_INT 21
34832: PUSH
34833: LD_INT 19
34835: PUSH
34836: LD_INT 16
34838: PUSH
34839: LD_INT 25
34841: PUSH
34842: LD_INT 18
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: IN
34857: ST_TO_ADDR
// end ;
34858: LD_VAR 0 2
34862: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34863: LD_INT 0
34865: PPUSH
34866: PPUSH
34867: PPUSH
// result := [ ] ;
34868: LD_ADDR_VAR 0 4
34872: PUSH
34873: EMPTY
34874: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34875: LD_ADDR_VAR 0 5
34879: PUSH
34880: LD_VAR 0 2
34884: PPUSH
34885: LD_INT 21
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PPUSH
34895: CALL_OW 70
34899: ST_TO_ADDR
// if not tmp then
34900: LD_VAR 0 5
34904: NOT
34905: IFFALSE 34909
// exit ;
34907: GO 34973
// if checkLink then
34909: LD_VAR 0 3
34913: IFFALSE 34963
// begin for i in tmp do
34915: LD_ADDR_VAR 0 6
34919: PUSH
34920: LD_VAR 0 5
34924: PUSH
34925: FOR_IN
34926: IFFALSE 34961
// if GetBase ( i ) <> base then
34928: LD_VAR 0 6
34932: PPUSH
34933: CALL_OW 274
34937: PUSH
34938: LD_VAR 0 1
34942: NONEQUAL
34943: IFFALSE 34959
// ComLinkToBase ( base , i ) ;
34945: LD_VAR 0 1
34949: PPUSH
34950: LD_VAR 0 6
34954: PPUSH
34955: CALL_OW 169
34959: GO 34925
34961: POP
34962: POP
// end ; result := tmp ;
34963: LD_ADDR_VAR 0 4
34967: PUSH
34968: LD_VAR 0 5
34972: ST_TO_ADDR
// end ;
34973: LD_VAR 0 4
34977: RET
// export function ComComplete ( units , b ) ; var i ; begin
34978: LD_INT 0
34980: PPUSH
34981: PPUSH
// if not units then
34982: LD_VAR 0 1
34986: NOT
34987: IFFALSE 34991
// exit ;
34989: GO 35081
// for i in units do
34991: LD_ADDR_VAR 0 4
34995: PUSH
34996: LD_VAR 0 1
35000: PUSH
35001: FOR_IN
35002: IFFALSE 35079
// if BuildingStatus ( b ) = bs_build then
35004: LD_VAR 0 2
35008: PPUSH
35009: CALL_OW 461
35013: PUSH
35014: LD_INT 1
35016: EQUAL
35017: IFFALSE 35077
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35019: LD_VAR 0 4
35023: PPUSH
35024: LD_STRING h
35026: PUSH
35027: LD_VAR 0 2
35031: PPUSH
35032: CALL_OW 250
35036: PUSH
35037: LD_VAR 0 2
35041: PPUSH
35042: CALL_OW 251
35046: PUSH
35047: LD_VAR 0 2
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: PUSH
35070: EMPTY
35071: LIST
35072: PPUSH
35073: CALL_OW 446
35077: GO 35001
35079: POP
35080: POP
// end ;
35081: LD_VAR 0 3
35085: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35086: LD_INT 0
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35094: LD_VAR 0 1
35098: NOT
35099: PUSH
35100: LD_VAR 0 1
35104: PPUSH
35105: CALL_OW 263
35109: PUSH
35110: LD_INT 2
35112: NONEQUAL
35113: OR
35114: IFFALSE 35118
// exit ;
35116: GO 35434
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35118: LD_ADDR_VAR 0 6
35122: PUSH
35123: LD_INT 22
35125: PUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 255
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 2
35142: PUSH
35143: LD_INT 30
35145: PUSH
35146: LD_INT 36
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 34
35155: PUSH
35156: LD_INT 31
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PPUSH
35172: CALL_OW 69
35176: ST_TO_ADDR
// if not tmp then
35177: LD_VAR 0 6
35181: NOT
35182: IFFALSE 35186
// exit ;
35184: GO 35434
// result := [ ] ;
35186: LD_ADDR_VAR 0 2
35190: PUSH
35191: EMPTY
35192: ST_TO_ADDR
// for i in tmp do
35193: LD_ADDR_VAR 0 3
35197: PUSH
35198: LD_VAR 0 6
35202: PUSH
35203: FOR_IN
35204: IFFALSE 35275
// begin t := UnitsInside ( i ) ;
35206: LD_ADDR_VAR 0 4
35210: PUSH
35211: LD_VAR 0 3
35215: PPUSH
35216: CALL_OW 313
35220: ST_TO_ADDR
// if t then
35221: LD_VAR 0 4
35225: IFFALSE 35273
// for j in t do
35227: LD_ADDR_VAR 0 7
35231: PUSH
35232: LD_VAR 0 4
35236: PUSH
35237: FOR_IN
35238: IFFALSE 35271
// result := Replace ( result , result + 1 , j ) ;
35240: LD_ADDR_VAR 0 2
35244: PUSH
35245: LD_VAR 0 2
35249: PPUSH
35250: LD_VAR 0 2
35254: PUSH
35255: LD_INT 1
35257: PLUS
35258: PPUSH
35259: LD_VAR 0 7
35263: PPUSH
35264: CALL_OW 1
35268: ST_TO_ADDR
35269: GO 35237
35271: POP
35272: POP
// end ;
35273: GO 35203
35275: POP
35276: POP
// if not result then
35277: LD_VAR 0 2
35281: NOT
35282: IFFALSE 35286
// exit ;
35284: GO 35434
// mech := result [ 1 ] ;
35286: LD_ADDR_VAR 0 5
35290: PUSH
35291: LD_VAR 0 2
35295: PUSH
35296: LD_INT 1
35298: ARRAY
35299: ST_TO_ADDR
// if result > 1 then
35300: LD_VAR 0 2
35304: PUSH
35305: LD_INT 1
35307: GREATER
35308: IFFALSE 35420
// begin for i = 2 to result do
35310: LD_ADDR_VAR 0 3
35314: PUSH
35315: DOUBLE
35316: LD_INT 2
35318: DEC
35319: ST_TO_ADDR
35320: LD_VAR 0 2
35324: PUSH
35325: FOR_TO
35326: IFFALSE 35418
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35328: LD_ADDR_VAR 0 4
35332: PUSH
35333: LD_VAR 0 2
35337: PUSH
35338: LD_VAR 0 3
35342: ARRAY
35343: PPUSH
35344: LD_INT 3
35346: PPUSH
35347: CALL_OW 259
35351: PUSH
35352: LD_VAR 0 2
35356: PUSH
35357: LD_VAR 0 3
35361: ARRAY
35362: PPUSH
35363: CALL_OW 432
35367: MINUS
35368: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35369: LD_VAR 0 4
35373: PUSH
35374: LD_VAR 0 5
35378: PPUSH
35379: LD_INT 3
35381: PPUSH
35382: CALL_OW 259
35386: PUSH
35387: LD_VAR 0 5
35391: PPUSH
35392: CALL_OW 432
35396: MINUS
35397: GREATEREQUAL
35398: IFFALSE 35416
// mech := result [ i ] ;
35400: LD_ADDR_VAR 0 5
35404: PUSH
35405: LD_VAR 0 2
35409: PUSH
35410: LD_VAR 0 3
35414: ARRAY
35415: ST_TO_ADDR
// end ;
35416: GO 35325
35418: POP
35419: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35420: LD_VAR 0 1
35424: PPUSH
35425: LD_VAR 0 5
35429: PPUSH
35430: CALL_OW 135
// end ;
35434: LD_VAR 0 2
35438: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35439: LD_INT 0
35441: PPUSH
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
// result := [ ] ;
35454: LD_ADDR_VAR 0 7
35458: PUSH
35459: EMPTY
35460: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35461: LD_VAR 0 1
35465: PPUSH
35466: CALL_OW 266
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: IN
35481: NOT
35482: IFFALSE 35486
// exit ;
35484: GO 37120
// if name then
35486: LD_VAR 0 3
35490: IFFALSE 35506
// SetBName ( base_dep , name ) ;
35492: LD_VAR 0 1
35496: PPUSH
35497: LD_VAR 0 3
35501: PPUSH
35502: CALL_OW 500
// base := GetBase ( base_dep ) ;
35506: LD_ADDR_VAR 0 15
35510: PUSH
35511: LD_VAR 0 1
35515: PPUSH
35516: CALL_OW 274
35520: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35521: LD_ADDR_VAR 0 16
35525: PUSH
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 255
35535: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35536: LD_ADDR_VAR 0 17
35540: PUSH
35541: LD_VAR 0 1
35545: PPUSH
35546: CALL_OW 248
35550: ST_TO_ADDR
// if sources then
35551: LD_VAR 0 5
35555: IFFALSE 35602
// for i = 1 to 3 do
35557: LD_ADDR_VAR 0 8
35561: PUSH
35562: DOUBLE
35563: LD_INT 1
35565: DEC
35566: ST_TO_ADDR
35567: LD_INT 3
35569: PUSH
35570: FOR_TO
35571: IFFALSE 35600
// AddResourceType ( base , i , sources [ i ] ) ;
35573: LD_VAR 0 15
35577: PPUSH
35578: LD_VAR 0 8
35582: PPUSH
35583: LD_VAR 0 5
35587: PUSH
35588: LD_VAR 0 8
35592: ARRAY
35593: PPUSH
35594: CALL_OW 276
35598: GO 35570
35600: POP
35601: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35602: LD_ADDR_VAR 0 18
35606: PUSH
35607: LD_VAR 0 15
35611: PPUSH
35612: LD_VAR 0 2
35616: PPUSH
35617: LD_INT 1
35619: PPUSH
35620: CALL 34863 0 3
35624: ST_TO_ADDR
// InitHc ;
35625: CALL_OW 19
// InitUc ;
35629: CALL_OW 18
// uc_side := side ;
35633: LD_ADDR_OWVAR 20
35637: PUSH
35638: LD_VAR 0 16
35642: ST_TO_ADDR
// uc_nation := nation ;
35643: LD_ADDR_OWVAR 21
35647: PUSH
35648: LD_VAR 0 17
35652: ST_TO_ADDR
// if buildings then
35653: LD_VAR 0 18
35657: IFFALSE 36979
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35659: LD_ADDR_VAR 0 19
35663: PUSH
35664: LD_VAR 0 18
35668: PPUSH
35669: LD_INT 2
35671: PUSH
35672: LD_INT 30
35674: PUSH
35675: LD_INT 29
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 30
35684: PUSH
35685: LD_INT 30
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: LIST
35696: PPUSH
35697: CALL_OW 72
35701: ST_TO_ADDR
// if tmp then
35702: LD_VAR 0 19
35706: IFFALSE 35754
// for i in tmp do
35708: LD_ADDR_VAR 0 8
35712: PUSH
35713: LD_VAR 0 19
35717: PUSH
35718: FOR_IN
35719: IFFALSE 35752
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35721: LD_VAR 0 8
35725: PPUSH
35726: CALL_OW 250
35730: PPUSH
35731: LD_VAR 0 8
35735: PPUSH
35736: CALL_OW 251
35740: PPUSH
35741: LD_VAR 0 16
35745: PPUSH
35746: CALL_OW 441
35750: GO 35718
35752: POP
35753: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35754: LD_VAR 0 18
35758: PPUSH
35759: LD_INT 2
35761: PUSH
35762: LD_INT 30
35764: PUSH
35765: LD_INT 32
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 30
35774: PUSH
35775: LD_INT 33
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: PPUSH
35787: CALL_OW 72
35791: IFFALSE 35879
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35793: LD_ADDR_VAR 0 8
35797: PUSH
35798: LD_VAR 0 18
35802: PPUSH
35803: LD_INT 2
35805: PUSH
35806: LD_INT 30
35808: PUSH
35809: LD_INT 32
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 30
35818: PUSH
35819: LD_INT 33
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: PPUSH
35831: CALL_OW 72
35835: PUSH
35836: FOR_IN
35837: IFFALSE 35877
// begin if not GetBWeapon ( i ) then
35839: LD_VAR 0 8
35843: PPUSH
35844: CALL_OW 269
35848: NOT
35849: IFFALSE 35875
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35851: LD_VAR 0 8
35855: PPUSH
35856: LD_VAR 0 8
35860: PPUSH
35861: LD_VAR 0 2
35865: PPUSH
35866: CALL 37125 0 2
35870: PPUSH
35871: CALL_OW 431
// end ;
35875: GO 35836
35877: POP
35878: POP
// end ; for i = 1 to personel do
35879: LD_ADDR_VAR 0 8
35883: PUSH
35884: DOUBLE
35885: LD_INT 1
35887: DEC
35888: ST_TO_ADDR
35889: LD_VAR 0 6
35893: PUSH
35894: FOR_TO
35895: IFFALSE 36959
// begin if i > 4 then
35897: LD_VAR 0 8
35901: PUSH
35902: LD_INT 4
35904: GREATER
35905: IFFALSE 35909
// break ;
35907: GO 36959
// case i of 1 :
35909: LD_VAR 0 8
35913: PUSH
35914: LD_INT 1
35916: DOUBLE
35917: EQUAL
35918: IFTRUE 35922
35920: GO 36002
35922: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35923: LD_ADDR_VAR 0 12
35927: PUSH
35928: LD_VAR 0 18
35932: PPUSH
35933: LD_INT 22
35935: PUSH
35936: LD_VAR 0 16
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 58
35947: PUSH
35948: EMPTY
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: LD_INT 30
35956: PUSH
35957: LD_INT 32
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 30
35966: PUSH
35967: LD_INT 4
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 30
35976: PUSH
35977: LD_INT 5
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: PPUSH
35995: CALL_OW 72
35999: ST_TO_ADDR
36000: GO 36224
36002: LD_INT 2
36004: DOUBLE
36005: EQUAL
36006: IFTRUE 36010
36008: GO 36072
36010: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36011: LD_ADDR_VAR 0 12
36015: PUSH
36016: LD_VAR 0 18
36020: PPUSH
36021: LD_INT 22
36023: PUSH
36024: LD_VAR 0 16
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 2
36035: PUSH
36036: LD_INT 30
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 30
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PPUSH
36065: CALL_OW 72
36069: ST_TO_ADDR
36070: GO 36224
36072: LD_INT 3
36074: DOUBLE
36075: EQUAL
36076: IFTRUE 36080
36078: GO 36142
36080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36081: LD_ADDR_VAR 0 12
36085: PUSH
36086: LD_VAR 0 18
36090: PPUSH
36091: LD_INT 22
36093: PUSH
36094: LD_VAR 0 16
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: LD_INT 30
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 30
36118: PUSH
36119: LD_INT 3
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: LIST
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PPUSH
36135: CALL_OW 72
36139: ST_TO_ADDR
36140: GO 36224
36142: LD_INT 4
36144: DOUBLE
36145: EQUAL
36146: IFTRUE 36150
36148: GO 36223
36150: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36151: LD_ADDR_VAR 0 12
36155: PUSH
36156: LD_VAR 0 18
36160: PPUSH
36161: LD_INT 22
36163: PUSH
36164: LD_VAR 0 16
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: LD_INT 30
36178: PUSH
36179: LD_INT 6
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 30
36188: PUSH
36189: LD_INT 7
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 30
36198: PUSH
36199: LD_INT 8
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PPUSH
36216: CALL_OW 72
36220: ST_TO_ADDR
36221: GO 36224
36223: POP
// if i = 1 then
36224: LD_VAR 0 8
36228: PUSH
36229: LD_INT 1
36231: EQUAL
36232: IFFALSE 36343
// begin tmp := [ ] ;
36234: LD_ADDR_VAR 0 19
36238: PUSH
36239: EMPTY
36240: ST_TO_ADDR
// for j in f do
36241: LD_ADDR_VAR 0 9
36245: PUSH
36246: LD_VAR 0 12
36250: PUSH
36251: FOR_IN
36252: IFFALSE 36325
// if GetBType ( j ) = b_bunker then
36254: LD_VAR 0 9
36258: PPUSH
36259: CALL_OW 266
36263: PUSH
36264: LD_INT 32
36266: EQUAL
36267: IFFALSE 36294
// tmp := Insert ( tmp , 1 , j ) else
36269: LD_ADDR_VAR 0 19
36273: PUSH
36274: LD_VAR 0 19
36278: PPUSH
36279: LD_INT 1
36281: PPUSH
36282: LD_VAR 0 9
36286: PPUSH
36287: CALL_OW 2
36291: ST_TO_ADDR
36292: GO 36323
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36294: LD_ADDR_VAR 0 19
36298: PUSH
36299: LD_VAR 0 19
36303: PPUSH
36304: LD_VAR 0 19
36308: PUSH
36309: LD_INT 1
36311: PLUS
36312: PPUSH
36313: LD_VAR 0 9
36317: PPUSH
36318: CALL_OW 2
36322: ST_TO_ADDR
36323: GO 36251
36325: POP
36326: POP
// if tmp then
36327: LD_VAR 0 19
36331: IFFALSE 36343
// f := tmp ;
36333: LD_ADDR_VAR 0 12
36337: PUSH
36338: LD_VAR 0 19
36342: ST_TO_ADDR
// end ; x := personel [ i ] ;
36343: LD_ADDR_VAR 0 13
36347: PUSH
36348: LD_VAR 0 6
36352: PUSH
36353: LD_VAR 0 8
36357: ARRAY
36358: ST_TO_ADDR
// if x = - 1 then
36359: LD_VAR 0 13
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: EQUAL
36368: IFFALSE 36577
// begin for j in f do
36370: LD_ADDR_VAR 0 9
36374: PUSH
36375: LD_VAR 0 12
36379: PUSH
36380: FOR_IN
36381: IFFALSE 36573
// repeat InitHc ;
36383: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36387: LD_VAR 0 9
36391: PPUSH
36392: CALL_OW 266
36396: PUSH
36397: LD_INT 5
36399: EQUAL
36400: IFFALSE 36470
// begin if UnitsInside ( j ) < 3 then
36402: LD_VAR 0 9
36406: PPUSH
36407: CALL_OW 313
36411: PUSH
36412: LD_INT 3
36414: LESS
36415: IFFALSE 36451
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36417: LD_INT 0
36419: PPUSH
36420: LD_INT 5
36422: PUSH
36423: LD_INT 8
36425: PUSH
36426: LD_INT 9
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: PUSH
36434: LD_VAR 0 17
36438: ARRAY
36439: PPUSH
36440: LD_VAR 0 4
36444: PPUSH
36445: CALL_OW 380
36449: GO 36468
// PrepareHuman ( false , i , skill ) ;
36451: LD_INT 0
36453: PPUSH
36454: LD_VAR 0 8
36458: PPUSH
36459: LD_VAR 0 4
36463: PPUSH
36464: CALL_OW 380
// end else
36468: GO 36487
// PrepareHuman ( false , i , skill ) ;
36470: LD_INT 0
36472: PPUSH
36473: LD_VAR 0 8
36477: PPUSH
36478: LD_VAR 0 4
36482: PPUSH
36483: CALL_OW 380
// un := CreateHuman ;
36487: LD_ADDR_VAR 0 14
36491: PUSH
36492: CALL_OW 44
36496: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36497: LD_ADDR_VAR 0 7
36501: PUSH
36502: LD_VAR 0 7
36506: PPUSH
36507: LD_INT 1
36509: PPUSH
36510: LD_VAR 0 14
36514: PPUSH
36515: CALL_OW 2
36519: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36520: LD_VAR 0 14
36524: PPUSH
36525: LD_VAR 0 9
36529: PPUSH
36530: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36534: LD_VAR 0 9
36538: PPUSH
36539: CALL_OW 313
36543: PUSH
36544: LD_INT 6
36546: EQUAL
36547: PUSH
36548: LD_VAR 0 9
36552: PPUSH
36553: CALL_OW 266
36557: PUSH
36558: LD_INT 32
36560: PUSH
36561: LD_INT 31
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: IN
36568: OR
36569: IFFALSE 36383
36571: GO 36380
36573: POP
36574: POP
// end else
36575: GO 36957
// for j = 1 to x do
36577: LD_ADDR_VAR 0 9
36581: PUSH
36582: DOUBLE
36583: LD_INT 1
36585: DEC
36586: ST_TO_ADDR
36587: LD_VAR 0 13
36591: PUSH
36592: FOR_TO
36593: IFFALSE 36955
// begin InitHc ;
36595: CALL_OW 19
// if not f then
36599: LD_VAR 0 12
36603: NOT
36604: IFFALSE 36693
// begin PrepareHuman ( false , i , skill ) ;
36606: LD_INT 0
36608: PPUSH
36609: LD_VAR 0 8
36613: PPUSH
36614: LD_VAR 0 4
36618: PPUSH
36619: CALL_OW 380
// un := CreateHuman ;
36623: LD_ADDR_VAR 0 14
36627: PUSH
36628: CALL_OW 44
36632: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36633: LD_ADDR_VAR 0 7
36637: PUSH
36638: LD_VAR 0 7
36642: PPUSH
36643: LD_INT 1
36645: PPUSH
36646: LD_VAR 0 14
36650: PPUSH
36651: CALL_OW 2
36655: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36656: LD_VAR 0 14
36660: PPUSH
36661: LD_VAR 0 1
36665: PPUSH
36666: CALL_OW 250
36670: PPUSH
36671: LD_VAR 0 1
36675: PPUSH
36676: CALL_OW 251
36680: PPUSH
36681: LD_INT 10
36683: PPUSH
36684: LD_INT 0
36686: PPUSH
36687: CALL_OW 50
// continue ;
36691: GO 36592
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36693: LD_VAR 0 12
36697: PUSH
36698: LD_INT 1
36700: ARRAY
36701: PPUSH
36702: CALL_OW 313
36706: PUSH
36707: LD_VAR 0 12
36711: PUSH
36712: LD_INT 1
36714: ARRAY
36715: PPUSH
36716: CALL_OW 266
36720: PUSH
36721: LD_INT 32
36723: PUSH
36724: LD_INT 31
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: IN
36731: AND
36732: PUSH
36733: LD_VAR 0 12
36737: PUSH
36738: LD_INT 1
36740: ARRAY
36741: PPUSH
36742: CALL_OW 313
36746: PUSH
36747: LD_INT 6
36749: EQUAL
36750: OR
36751: IFFALSE 36771
// f := Delete ( f , 1 ) ;
36753: LD_ADDR_VAR 0 12
36757: PUSH
36758: LD_VAR 0 12
36762: PPUSH
36763: LD_INT 1
36765: PPUSH
36766: CALL_OW 3
36770: ST_TO_ADDR
// if not f then
36771: LD_VAR 0 12
36775: NOT
36776: IFFALSE 36794
// begin x := x + 2 ;
36778: LD_ADDR_VAR 0 13
36782: PUSH
36783: LD_VAR 0 13
36787: PUSH
36788: LD_INT 2
36790: PLUS
36791: ST_TO_ADDR
// continue ;
36792: GO 36592
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36794: LD_VAR 0 12
36798: PUSH
36799: LD_INT 1
36801: ARRAY
36802: PPUSH
36803: CALL_OW 266
36807: PUSH
36808: LD_INT 5
36810: EQUAL
36811: IFFALSE 36885
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36813: LD_VAR 0 12
36817: PUSH
36818: LD_INT 1
36820: ARRAY
36821: PPUSH
36822: CALL_OW 313
36826: PUSH
36827: LD_INT 3
36829: LESS
36830: IFFALSE 36866
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36832: LD_INT 0
36834: PPUSH
36835: LD_INT 5
36837: PUSH
36838: LD_INT 8
36840: PUSH
36841: LD_INT 9
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: LIST
36848: PUSH
36849: LD_VAR 0 17
36853: ARRAY
36854: PPUSH
36855: LD_VAR 0 4
36859: PPUSH
36860: CALL_OW 380
36864: GO 36883
// PrepareHuman ( false , i , skill ) ;
36866: LD_INT 0
36868: PPUSH
36869: LD_VAR 0 8
36873: PPUSH
36874: LD_VAR 0 4
36878: PPUSH
36879: CALL_OW 380
// end else
36883: GO 36902
// PrepareHuman ( false , i , skill ) ;
36885: LD_INT 0
36887: PPUSH
36888: LD_VAR 0 8
36892: PPUSH
36893: LD_VAR 0 4
36897: PPUSH
36898: CALL_OW 380
// un := CreateHuman ;
36902: LD_ADDR_VAR 0 14
36906: PUSH
36907: CALL_OW 44
36911: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36912: LD_ADDR_VAR 0 7
36916: PUSH
36917: LD_VAR 0 7
36921: PPUSH
36922: LD_INT 1
36924: PPUSH
36925: LD_VAR 0 14
36929: PPUSH
36930: CALL_OW 2
36934: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36935: LD_VAR 0 14
36939: PPUSH
36940: LD_VAR 0 12
36944: PUSH
36945: LD_INT 1
36947: ARRAY
36948: PPUSH
36949: CALL_OW 52
// end ;
36953: GO 36592
36955: POP
36956: POP
// end ;
36957: GO 35894
36959: POP
36960: POP
// result := result ^ buildings ;
36961: LD_ADDR_VAR 0 7
36965: PUSH
36966: LD_VAR 0 7
36970: PUSH
36971: LD_VAR 0 18
36975: ADD
36976: ST_TO_ADDR
// end else
36977: GO 37120
// begin for i = 1 to personel do
36979: LD_ADDR_VAR 0 8
36983: PUSH
36984: DOUBLE
36985: LD_INT 1
36987: DEC
36988: ST_TO_ADDR
36989: LD_VAR 0 6
36993: PUSH
36994: FOR_TO
36995: IFFALSE 37118
// begin if i > 4 then
36997: LD_VAR 0 8
37001: PUSH
37002: LD_INT 4
37004: GREATER
37005: IFFALSE 37009
// break ;
37007: GO 37118
// x := personel [ i ] ;
37009: LD_ADDR_VAR 0 13
37013: PUSH
37014: LD_VAR 0 6
37018: PUSH
37019: LD_VAR 0 8
37023: ARRAY
37024: ST_TO_ADDR
// if x = - 1 then
37025: LD_VAR 0 13
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: EQUAL
37034: IFFALSE 37038
// continue ;
37036: GO 36994
// PrepareHuman ( false , i , skill ) ;
37038: LD_INT 0
37040: PPUSH
37041: LD_VAR 0 8
37045: PPUSH
37046: LD_VAR 0 4
37050: PPUSH
37051: CALL_OW 380
// un := CreateHuman ;
37055: LD_ADDR_VAR 0 14
37059: PUSH
37060: CALL_OW 44
37064: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37065: LD_VAR 0 14
37069: PPUSH
37070: LD_VAR 0 1
37074: PPUSH
37075: CALL_OW 250
37079: PPUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: CALL_OW 251
37089: PPUSH
37090: LD_INT 10
37092: PPUSH
37093: LD_INT 0
37095: PPUSH
37096: CALL_OW 50
// result := result ^ un ;
37100: LD_ADDR_VAR 0 7
37104: PUSH
37105: LD_VAR 0 7
37109: PUSH
37110: LD_VAR 0 14
37114: ADD
37115: ST_TO_ADDR
// end ;
37116: GO 36994
37118: POP
37119: POP
// end ; end ;
37120: LD_VAR 0 7
37124: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37125: LD_INT 0
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
37131: PPUSH
37132: PPUSH
37133: PPUSH
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
// result := false ;
37143: LD_ADDR_VAR 0 3
37147: PUSH
37148: LD_INT 0
37150: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37151: LD_VAR 0 1
37155: NOT
37156: PUSH
37157: LD_VAR 0 1
37161: PPUSH
37162: CALL_OW 266
37166: PUSH
37167: LD_INT 32
37169: PUSH
37170: LD_INT 33
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: IN
37177: NOT
37178: OR
37179: IFFALSE 37183
// exit ;
37181: GO 38292
// nat := GetNation ( tower ) ;
37183: LD_ADDR_VAR 0 12
37187: PUSH
37188: LD_VAR 0 1
37192: PPUSH
37193: CALL_OW 248
37197: ST_TO_ADDR
// side := GetSide ( tower ) ;
37198: LD_ADDR_VAR 0 16
37202: PUSH
37203: LD_VAR 0 1
37207: PPUSH
37208: CALL_OW 255
37212: ST_TO_ADDR
// x := GetX ( tower ) ;
37213: LD_ADDR_VAR 0 10
37217: PUSH
37218: LD_VAR 0 1
37222: PPUSH
37223: CALL_OW 250
37227: ST_TO_ADDR
// y := GetY ( tower ) ;
37228: LD_ADDR_VAR 0 11
37232: PUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL_OW 251
37242: ST_TO_ADDR
// if not x or not y then
37243: LD_VAR 0 10
37247: NOT
37248: PUSH
37249: LD_VAR 0 11
37253: NOT
37254: OR
37255: IFFALSE 37259
// exit ;
37257: GO 38292
// weapon := 0 ;
37259: LD_ADDR_VAR 0 18
37263: PUSH
37264: LD_INT 0
37266: ST_TO_ADDR
// fac_list := [ ] ;
37267: LD_ADDR_VAR 0 17
37271: PUSH
37272: EMPTY
37273: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37274: LD_ADDR_VAR 0 6
37278: PUSH
37279: LD_VAR 0 1
37283: PPUSH
37284: CALL_OW 274
37288: PPUSH
37289: LD_VAR 0 2
37293: PPUSH
37294: LD_INT 0
37296: PPUSH
37297: CALL 34863 0 3
37301: PPUSH
37302: LD_INT 30
37304: PUSH
37305: LD_INT 3
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PPUSH
37312: CALL_OW 72
37316: ST_TO_ADDR
// if not factories then
37317: LD_VAR 0 6
37321: NOT
37322: IFFALSE 37326
// exit ;
37324: GO 38292
// for i in factories do
37326: LD_ADDR_VAR 0 8
37330: PUSH
37331: LD_VAR 0 6
37335: PUSH
37336: FOR_IN
37337: IFFALSE 37362
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37339: LD_ADDR_VAR 0 17
37343: PUSH
37344: LD_VAR 0 17
37348: PUSH
37349: LD_VAR 0 8
37353: PPUSH
37354: CALL_OW 478
37358: UNION
37359: ST_TO_ADDR
37360: GO 37336
37362: POP
37363: POP
// if not fac_list then
37364: LD_VAR 0 17
37368: NOT
37369: IFFALSE 37373
// exit ;
37371: GO 38292
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37373: LD_ADDR_VAR 0 5
37377: PUSH
37378: LD_INT 4
37380: PUSH
37381: LD_INT 5
37383: PUSH
37384: LD_INT 9
37386: PUSH
37387: LD_INT 10
37389: PUSH
37390: LD_INT 6
37392: PUSH
37393: LD_INT 7
37395: PUSH
37396: LD_INT 11
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 27
37410: PUSH
37411: LD_INT 28
37413: PUSH
37414: LD_INT 26
37416: PUSH
37417: LD_INT 30
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 43
37428: PUSH
37429: LD_INT 44
37431: PUSH
37432: LD_INT 46
37434: PUSH
37435: LD_INT 45
37437: PUSH
37438: LD_INT 47
37440: PUSH
37441: LD_INT 49
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: PUSH
37457: LD_VAR 0 12
37461: ARRAY
37462: ST_TO_ADDR
// list := list isect fac_list ;
37463: LD_ADDR_VAR 0 5
37467: PUSH
37468: LD_VAR 0 5
37472: PUSH
37473: LD_VAR 0 17
37477: ISECT
37478: ST_TO_ADDR
// if not list then
37479: LD_VAR 0 5
37483: NOT
37484: IFFALSE 37488
// exit ;
37486: GO 38292
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37488: LD_VAR 0 12
37492: PUSH
37493: LD_INT 3
37495: EQUAL
37496: PUSH
37497: LD_INT 49
37499: PUSH
37500: LD_VAR 0 5
37504: IN
37505: AND
37506: PUSH
37507: LD_INT 31
37509: PPUSH
37510: LD_VAR 0 16
37514: PPUSH
37515: CALL_OW 321
37519: PUSH
37520: LD_INT 2
37522: EQUAL
37523: AND
37524: IFFALSE 37584
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37526: LD_INT 22
37528: PUSH
37529: LD_VAR 0 16
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 35
37540: PUSH
37541: LD_INT 49
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 91
37550: PUSH
37551: LD_VAR 0 1
37555: PUSH
37556: LD_INT 10
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: LIST
37568: PPUSH
37569: CALL_OW 69
37573: NOT
37574: IFFALSE 37584
// weapon := ru_time_lapser ;
37576: LD_ADDR_VAR 0 18
37580: PUSH
37581: LD_INT 49
37583: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37584: LD_VAR 0 12
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: IN
37599: PUSH
37600: LD_INT 11
37602: PUSH
37603: LD_VAR 0 5
37607: IN
37608: PUSH
37609: LD_INT 30
37611: PUSH
37612: LD_VAR 0 5
37616: IN
37617: OR
37618: AND
37619: PUSH
37620: LD_INT 6
37622: PPUSH
37623: LD_VAR 0 16
37627: PPUSH
37628: CALL_OW 321
37632: PUSH
37633: LD_INT 2
37635: EQUAL
37636: AND
37637: IFFALSE 37802
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37639: LD_INT 22
37641: PUSH
37642: LD_VAR 0 16
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: PUSH
37654: LD_INT 35
37656: PUSH
37657: LD_INT 11
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 35
37666: PUSH
37667: LD_INT 30
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 91
37681: PUSH
37682: LD_VAR 0 1
37686: PUSH
37687: LD_INT 18
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: PPUSH
37700: CALL_OW 69
37704: NOT
37705: PUSH
37706: LD_INT 22
37708: PUSH
37709: LD_VAR 0 16
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: LD_INT 30
37723: PUSH
37724: LD_INT 32
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 30
37733: PUSH
37734: LD_INT 33
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 91
37748: PUSH
37749: LD_VAR 0 1
37753: PUSH
37754: LD_INT 12
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: PUSH
37767: EMPTY
37768: LIST
37769: PPUSH
37770: CALL_OW 69
37774: PUSH
37775: LD_INT 2
37777: GREATER
37778: AND
37779: IFFALSE 37802
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37781: LD_ADDR_VAR 0 18
37785: PUSH
37786: LD_INT 11
37788: PUSH
37789: LD_INT 30
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_VAR 0 12
37800: ARRAY
37801: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37802: LD_VAR 0 18
37806: NOT
37807: PUSH
37808: LD_INT 40
37810: PPUSH
37811: LD_VAR 0 16
37815: PPUSH
37816: CALL_OW 321
37820: PUSH
37821: LD_INT 2
37823: EQUAL
37824: AND
37825: PUSH
37826: LD_INT 7
37828: PUSH
37829: LD_VAR 0 5
37833: IN
37834: PUSH
37835: LD_INT 28
37837: PUSH
37838: LD_VAR 0 5
37842: IN
37843: OR
37844: PUSH
37845: LD_INT 45
37847: PUSH
37848: LD_VAR 0 5
37852: IN
37853: OR
37854: AND
37855: IFFALSE 38109
// begin hex := GetHexInfo ( x , y ) ;
37857: LD_ADDR_VAR 0 4
37861: PUSH
37862: LD_VAR 0 10
37866: PPUSH
37867: LD_VAR 0 11
37871: PPUSH
37872: CALL_OW 546
37876: ST_TO_ADDR
// if hex [ 1 ] then
37877: LD_VAR 0 4
37881: PUSH
37882: LD_INT 1
37884: ARRAY
37885: IFFALSE 37889
// exit ;
37887: GO 38292
// height := hex [ 2 ] ;
37889: LD_ADDR_VAR 0 15
37893: PUSH
37894: LD_VAR 0 4
37898: PUSH
37899: LD_INT 2
37901: ARRAY
37902: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37903: LD_ADDR_VAR 0 14
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: LD_INT 2
37913: PUSH
37914: LD_INT 3
37916: PUSH
37917: LD_INT 5
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// for i in tmp do
37926: LD_ADDR_VAR 0 8
37930: PUSH
37931: LD_VAR 0 14
37935: PUSH
37936: FOR_IN
37937: IFFALSE 38107
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37939: LD_ADDR_VAR 0 9
37943: PUSH
37944: LD_VAR 0 10
37948: PPUSH
37949: LD_VAR 0 8
37953: PPUSH
37954: LD_INT 5
37956: PPUSH
37957: CALL_OW 272
37961: PUSH
37962: LD_VAR 0 11
37966: PPUSH
37967: LD_VAR 0 8
37971: PPUSH
37972: LD_INT 5
37974: PPUSH
37975: CALL_OW 273
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37984: LD_VAR 0 9
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: PPUSH
37993: LD_VAR 0 9
37997: PUSH
37998: LD_INT 2
38000: ARRAY
38001: PPUSH
38002: CALL_OW 488
38006: IFFALSE 38105
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38008: LD_ADDR_VAR 0 4
38012: PUSH
38013: LD_VAR 0 9
38017: PUSH
38018: LD_INT 1
38020: ARRAY
38021: PPUSH
38022: LD_VAR 0 9
38026: PUSH
38027: LD_INT 2
38029: ARRAY
38030: PPUSH
38031: CALL_OW 546
38035: ST_TO_ADDR
// if hex [ 1 ] then
38036: LD_VAR 0 4
38040: PUSH
38041: LD_INT 1
38043: ARRAY
38044: IFFALSE 38048
// continue ;
38046: GO 37936
// h := hex [ 2 ] ;
38048: LD_ADDR_VAR 0 13
38052: PUSH
38053: LD_VAR 0 4
38057: PUSH
38058: LD_INT 2
38060: ARRAY
38061: ST_TO_ADDR
// if h + 7 < height then
38062: LD_VAR 0 13
38066: PUSH
38067: LD_INT 7
38069: PLUS
38070: PUSH
38071: LD_VAR 0 15
38075: LESS
38076: IFFALSE 38105
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38078: LD_ADDR_VAR 0 18
38082: PUSH
38083: LD_INT 7
38085: PUSH
38086: LD_INT 28
38088: PUSH
38089: LD_INT 45
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: LIST
38096: PUSH
38097: LD_VAR 0 12
38101: ARRAY
38102: ST_TO_ADDR
// break ;
38103: GO 38107
// end ; end ; end ;
38105: GO 37936
38107: POP
38108: POP
// end ; if not weapon then
38109: LD_VAR 0 18
38113: NOT
38114: IFFALSE 38174
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38116: LD_ADDR_VAR 0 5
38120: PUSH
38121: LD_VAR 0 5
38125: PUSH
38126: LD_INT 11
38128: PUSH
38129: LD_INT 30
38131: PUSH
38132: LD_INT 49
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: DIFF
38140: ST_TO_ADDR
// if not list then
38141: LD_VAR 0 5
38145: NOT
38146: IFFALSE 38150
// exit ;
38148: GO 38292
// weapon := list [ rand ( 1 , list ) ] ;
38150: LD_ADDR_VAR 0 18
38154: PUSH
38155: LD_VAR 0 5
38159: PUSH
38160: LD_INT 1
38162: PPUSH
38163: LD_VAR 0 5
38167: PPUSH
38168: CALL_OW 12
38172: ARRAY
38173: ST_TO_ADDR
// end ; if weapon then
38174: LD_VAR 0 18
38178: IFFALSE 38292
// begin tmp := CostOfWeapon ( weapon ) ;
38180: LD_ADDR_VAR 0 14
38184: PUSH
38185: LD_VAR 0 18
38189: PPUSH
38190: CALL_OW 451
38194: ST_TO_ADDR
// j := GetBase ( tower ) ;
38195: LD_ADDR_VAR 0 9
38199: PUSH
38200: LD_VAR 0 1
38204: PPUSH
38205: CALL_OW 274
38209: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38210: LD_VAR 0 9
38214: PPUSH
38215: LD_INT 1
38217: PPUSH
38218: CALL_OW 275
38222: PUSH
38223: LD_VAR 0 14
38227: PUSH
38228: LD_INT 1
38230: ARRAY
38231: GREATEREQUAL
38232: PUSH
38233: LD_VAR 0 9
38237: PPUSH
38238: LD_INT 2
38240: PPUSH
38241: CALL_OW 275
38245: PUSH
38246: LD_VAR 0 14
38250: PUSH
38251: LD_INT 2
38253: ARRAY
38254: GREATEREQUAL
38255: AND
38256: PUSH
38257: LD_VAR 0 9
38261: PPUSH
38262: LD_INT 3
38264: PPUSH
38265: CALL_OW 275
38269: PUSH
38270: LD_VAR 0 14
38274: PUSH
38275: LD_INT 3
38277: ARRAY
38278: GREATEREQUAL
38279: AND
38280: IFFALSE 38292
// result := weapon ;
38282: LD_ADDR_VAR 0 3
38286: PUSH
38287: LD_VAR 0 18
38291: ST_TO_ADDR
// end ; end ;
38292: LD_VAR 0 3
38296: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38297: LD_INT 0
38299: PPUSH
38300: PPUSH
// result := true ;
38301: LD_ADDR_VAR 0 3
38305: PUSH
38306: LD_INT 1
38308: ST_TO_ADDR
// if array1 = array2 then
38309: LD_VAR 0 1
38313: PUSH
38314: LD_VAR 0 2
38318: EQUAL
38319: IFFALSE 38379
// begin for i = 1 to array1 do
38321: LD_ADDR_VAR 0 4
38325: PUSH
38326: DOUBLE
38327: LD_INT 1
38329: DEC
38330: ST_TO_ADDR
38331: LD_VAR 0 1
38335: PUSH
38336: FOR_TO
38337: IFFALSE 38375
// if array1 [ i ] <> array2 [ i ] then
38339: LD_VAR 0 1
38343: PUSH
38344: LD_VAR 0 4
38348: ARRAY
38349: PUSH
38350: LD_VAR 0 2
38354: PUSH
38355: LD_VAR 0 4
38359: ARRAY
38360: NONEQUAL
38361: IFFALSE 38373
// begin result := false ;
38363: LD_ADDR_VAR 0 3
38367: PUSH
38368: LD_INT 0
38370: ST_TO_ADDR
// break ;
38371: GO 38375
// end ;
38373: GO 38336
38375: POP
38376: POP
// end else
38377: GO 38387
// result := false ;
38379: LD_ADDR_VAR 0 3
38383: PUSH
38384: LD_INT 0
38386: ST_TO_ADDR
// end ;
38387: LD_VAR 0 3
38391: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38392: LD_INT 0
38394: PPUSH
38395: PPUSH
// if not array1 or not array2 then
38396: LD_VAR 0 1
38400: NOT
38401: PUSH
38402: LD_VAR 0 2
38406: NOT
38407: OR
38408: IFFALSE 38412
// exit ;
38410: GO 38476
// result := true ;
38412: LD_ADDR_VAR 0 3
38416: PUSH
38417: LD_INT 1
38419: ST_TO_ADDR
// for i = 1 to array1 do
38420: LD_ADDR_VAR 0 4
38424: PUSH
38425: DOUBLE
38426: LD_INT 1
38428: DEC
38429: ST_TO_ADDR
38430: LD_VAR 0 1
38434: PUSH
38435: FOR_TO
38436: IFFALSE 38474
// if array1 [ i ] <> array2 [ i ] then
38438: LD_VAR 0 1
38442: PUSH
38443: LD_VAR 0 4
38447: ARRAY
38448: PUSH
38449: LD_VAR 0 2
38453: PUSH
38454: LD_VAR 0 4
38458: ARRAY
38459: NONEQUAL
38460: IFFALSE 38472
// begin result := false ;
38462: LD_ADDR_VAR 0 3
38466: PUSH
38467: LD_INT 0
38469: ST_TO_ADDR
// break ;
38470: GO 38474
// end ;
38472: GO 38435
38474: POP
38475: POP
// end ;
38476: LD_VAR 0 3
38480: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38481: LD_INT 0
38483: PPUSH
38484: PPUSH
38485: PPUSH
// pom := GetBase ( fac ) ;
38486: LD_ADDR_VAR 0 5
38490: PUSH
38491: LD_VAR 0 1
38495: PPUSH
38496: CALL_OW 274
38500: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38501: LD_ADDR_VAR 0 4
38505: PUSH
38506: LD_VAR 0 2
38510: PUSH
38511: LD_INT 1
38513: ARRAY
38514: PPUSH
38515: LD_VAR 0 2
38519: PUSH
38520: LD_INT 2
38522: ARRAY
38523: PPUSH
38524: LD_VAR 0 2
38528: PUSH
38529: LD_INT 3
38531: ARRAY
38532: PPUSH
38533: LD_VAR 0 2
38537: PUSH
38538: LD_INT 4
38540: ARRAY
38541: PPUSH
38542: CALL_OW 449
38546: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38547: LD_ADDR_VAR 0 3
38551: PUSH
38552: LD_VAR 0 5
38556: PPUSH
38557: LD_INT 1
38559: PPUSH
38560: CALL_OW 275
38564: PUSH
38565: LD_VAR 0 4
38569: PUSH
38570: LD_INT 1
38572: ARRAY
38573: GREATEREQUAL
38574: PUSH
38575: LD_VAR 0 5
38579: PPUSH
38580: LD_INT 2
38582: PPUSH
38583: CALL_OW 275
38587: PUSH
38588: LD_VAR 0 4
38592: PUSH
38593: LD_INT 2
38595: ARRAY
38596: GREATEREQUAL
38597: AND
38598: PUSH
38599: LD_VAR 0 5
38603: PPUSH
38604: LD_INT 3
38606: PPUSH
38607: CALL_OW 275
38611: PUSH
38612: LD_VAR 0 4
38616: PUSH
38617: LD_INT 3
38619: ARRAY
38620: GREATEREQUAL
38621: AND
38622: ST_TO_ADDR
// end ;
38623: LD_VAR 0 3
38627: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38628: LD_INT 0
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
// pom := GetBase ( building ) ;
38634: LD_ADDR_VAR 0 3
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 274
38648: ST_TO_ADDR
// if not pom then
38649: LD_VAR 0 3
38653: NOT
38654: IFFALSE 38658
// exit ;
38656: GO 38828
// btype := GetBType ( building ) ;
38658: LD_ADDR_VAR 0 5
38662: PUSH
38663: LD_VAR 0 1
38667: PPUSH
38668: CALL_OW 266
38672: ST_TO_ADDR
// if btype = b_armoury then
38673: LD_VAR 0 5
38677: PUSH
38678: LD_INT 4
38680: EQUAL
38681: IFFALSE 38691
// btype := b_barracks ;
38683: LD_ADDR_VAR 0 5
38687: PUSH
38688: LD_INT 5
38690: ST_TO_ADDR
// if btype = b_depot then
38691: LD_VAR 0 5
38695: PUSH
38696: LD_INT 0
38698: EQUAL
38699: IFFALSE 38709
// btype := b_warehouse ;
38701: LD_ADDR_VAR 0 5
38705: PUSH
38706: LD_INT 1
38708: ST_TO_ADDR
// if btype = b_workshop then
38709: LD_VAR 0 5
38713: PUSH
38714: LD_INT 2
38716: EQUAL
38717: IFFALSE 38727
// btype := b_factory ;
38719: LD_ADDR_VAR 0 5
38723: PUSH
38724: LD_INT 3
38726: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38727: LD_ADDR_VAR 0 4
38731: PUSH
38732: LD_VAR 0 5
38736: PPUSH
38737: LD_VAR 0 1
38741: PPUSH
38742: CALL_OW 248
38746: PPUSH
38747: CALL_OW 450
38751: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38752: LD_ADDR_VAR 0 2
38756: PUSH
38757: LD_VAR 0 3
38761: PPUSH
38762: LD_INT 1
38764: PPUSH
38765: CALL_OW 275
38769: PUSH
38770: LD_VAR 0 4
38774: PUSH
38775: LD_INT 1
38777: ARRAY
38778: GREATEREQUAL
38779: PUSH
38780: LD_VAR 0 3
38784: PPUSH
38785: LD_INT 2
38787: PPUSH
38788: CALL_OW 275
38792: PUSH
38793: LD_VAR 0 4
38797: PUSH
38798: LD_INT 2
38800: ARRAY
38801: GREATEREQUAL
38802: AND
38803: PUSH
38804: LD_VAR 0 3
38808: PPUSH
38809: LD_INT 3
38811: PPUSH
38812: CALL_OW 275
38816: PUSH
38817: LD_VAR 0 4
38821: PUSH
38822: LD_INT 3
38824: ARRAY
38825: GREATEREQUAL
38826: AND
38827: ST_TO_ADDR
// end ;
38828: LD_VAR 0 2
38832: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38833: LD_INT 0
38835: PPUSH
38836: PPUSH
38837: PPUSH
// pom := GetBase ( building ) ;
38838: LD_ADDR_VAR 0 4
38842: PUSH
38843: LD_VAR 0 1
38847: PPUSH
38848: CALL_OW 274
38852: ST_TO_ADDR
// if not pom then
38853: LD_VAR 0 4
38857: NOT
38858: IFFALSE 38862
// exit ;
38860: GO 38963
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38862: LD_ADDR_VAR 0 5
38866: PUSH
38867: LD_VAR 0 2
38871: PPUSH
38872: LD_VAR 0 1
38876: PPUSH
38877: CALL_OW 248
38881: PPUSH
38882: CALL_OW 450
38886: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38887: LD_ADDR_VAR 0 3
38891: PUSH
38892: LD_VAR 0 4
38896: PPUSH
38897: LD_INT 1
38899: PPUSH
38900: CALL_OW 275
38904: PUSH
38905: LD_VAR 0 5
38909: PUSH
38910: LD_INT 1
38912: ARRAY
38913: GREATEREQUAL
38914: PUSH
38915: LD_VAR 0 4
38919: PPUSH
38920: LD_INT 2
38922: PPUSH
38923: CALL_OW 275
38927: PUSH
38928: LD_VAR 0 5
38932: PUSH
38933: LD_INT 2
38935: ARRAY
38936: GREATEREQUAL
38937: AND
38938: PUSH
38939: LD_VAR 0 4
38943: PPUSH
38944: LD_INT 3
38946: PPUSH
38947: CALL_OW 275
38951: PUSH
38952: LD_VAR 0 5
38956: PUSH
38957: LD_INT 3
38959: ARRAY
38960: GREATEREQUAL
38961: AND
38962: ST_TO_ADDR
// end ;
38963: LD_VAR 0 3
38967: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38968: LD_INT 0
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
// result := false ;
38981: LD_ADDR_VAR 0 8
38985: PUSH
38986: LD_INT 0
38988: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38989: LD_VAR 0 5
38993: NOT
38994: PUSH
38995: LD_VAR 0 1
38999: NOT
39000: OR
39001: PUSH
39002: LD_VAR 0 2
39006: NOT
39007: OR
39008: PUSH
39009: LD_VAR 0 3
39013: NOT
39014: OR
39015: IFFALSE 39019
// exit ;
39017: GO 39833
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39019: LD_ADDR_VAR 0 14
39023: PUSH
39024: LD_VAR 0 1
39028: PPUSH
39029: LD_VAR 0 2
39033: PPUSH
39034: LD_VAR 0 3
39038: PPUSH
39039: LD_VAR 0 4
39043: PPUSH
39044: LD_VAR 0 5
39048: PUSH
39049: LD_INT 1
39051: ARRAY
39052: PPUSH
39053: CALL_OW 248
39057: PPUSH
39058: LD_INT 0
39060: PPUSH
39061: CALL 41086 0 6
39065: ST_TO_ADDR
// if not hexes then
39066: LD_VAR 0 14
39070: NOT
39071: IFFALSE 39075
// exit ;
39073: GO 39833
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39075: LD_ADDR_VAR 0 17
39079: PUSH
39080: LD_VAR 0 5
39084: PPUSH
39085: LD_INT 22
39087: PUSH
39088: LD_VAR 0 13
39092: PPUSH
39093: CALL_OW 255
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: LD_INT 30
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 30
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PPUSH
39134: CALL_OW 72
39138: ST_TO_ADDR
// for i = 1 to hexes do
39139: LD_ADDR_VAR 0 9
39143: PUSH
39144: DOUBLE
39145: LD_INT 1
39147: DEC
39148: ST_TO_ADDR
39149: LD_VAR 0 14
39153: PUSH
39154: FOR_TO
39155: IFFALSE 39831
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39157: LD_ADDR_VAR 0 13
39161: PUSH
39162: LD_VAR 0 14
39166: PUSH
39167: LD_VAR 0 9
39171: ARRAY
39172: PUSH
39173: LD_INT 1
39175: ARRAY
39176: PPUSH
39177: LD_VAR 0 14
39181: PUSH
39182: LD_VAR 0 9
39186: ARRAY
39187: PUSH
39188: LD_INT 2
39190: ARRAY
39191: PPUSH
39192: CALL_OW 428
39196: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39197: LD_VAR 0 14
39201: PUSH
39202: LD_VAR 0 9
39206: ARRAY
39207: PUSH
39208: LD_INT 1
39210: ARRAY
39211: PPUSH
39212: LD_VAR 0 14
39216: PUSH
39217: LD_VAR 0 9
39221: ARRAY
39222: PUSH
39223: LD_INT 2
39225: ARRAY
39226: PPUSH
39227: CALL_OW 351
39231: PUSH
39232: LD_VAR 0 14
39236: PUSH
39237: LD_VAR 0 9
39241: ARRAY
39242: PUSH
39243: LD_INT 1
39245: ARRAY
39246: PPUSH
39247: LD_VAR 0 14
39251: PUSH
39252: LD_VAR 0 9
39256: ARRAY
39257: PUSH
39258: LD_INT 2
39260: ARRAY
39261: PPUSH
39262: CALL_OW 488
39266: NOT
39267: OR
39268: PUSH
39269: LD_VAR 0 13
39273: PPUSH
39274: CALL_OW 247
39278: PUSH
39279: LD_INT 3
39281: EQUAL
39282: OR
39283: IFFALSE 39289
// exit ;
39285: POP
39286: POP
39287: GO 39833
// if not tmp then
39289: LD_VAR 0 13
39293: NOT
39294: IFFALSE 39298
// continue ;
39296: GO 39154
// result := true ;
39298: LD_ADDR_VAR 0 8
39302: PUSH
39303: LD_INT 1
39305: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39306: LD_VAR 0 6
39310: PUSH
39311: LD_VAR 0 13
39315: PPUSH
39316: CALL_OW 247
39320: PUSH
39321: LD_INT 2
39323: EQUAL
39324: AND
39325: PUSH
39326: LD_VAR 0 13
39330: PPUSH
39331: CALL_OW 263
39335: PUSH
39336: LD_INT 1
39338: EQUAL
39339: AND
39340: IFFALSE 39504
// begin if IsDrivenBy ( tmp ) then
39342: LD_VAR 0 13
39346: PPUSH
39347: CALL_OW 311
39351: IFFALSE 39355
// continue ;
39353: GO 39154
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39355: LD_VAR 0 6
39359: PPUSH
39360: LD_INT 3
39362: PUSH
39363: LD_INT 60
39365: PUSH
39366: EMPTY
39367: LIST
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 3
39375: PUSH
39376: LD_INT 55
39378: PUSH
39379: EMPTY
39380: LIST
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PPUSH
39390: CALL_OW 72
39394: IFFALSE 39502
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39396: LD_ADDR_VAR 0 18
39400: PUSH
39401: LD_VAR 0 6
39405: PPUSH
39406: LD_INT 3
39408: PUSH
39409: LD_INT 60
39411: PUSH
39412: EMPTY
39413: LIST
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: LD_INT 55
39424: PUSH
39425: EMPTY
39426: LIST
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PPUSH
39436: CALL_OW 72
39440: PUSH
39441: LD_INT 1
39443: ARRAY
39444: ST_TO_ADDR
// if IsInUnit ( driver ) then
39445: LD_VAR 0 18
39449: PPUSH
39450: CALL_OW 310
39454: IFFALSE 39465
// ComExit ( driver ) ;
39456: LD_VAR 0 18
39460: PPUSH
39461: CALL 64865 0 1
// AddComEnterUnit ( driver , tmp ) ;
39465: LD_VAR 0 18
39469: PPUSH
39470: LD_VAR 0 13
39474: PPUSH
39475: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39479: LD_VAR 0 18
39483: PPUSH
39484: LD_VAR 0 7
39488: PPUSH
39489: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39493: LD_VAR 0 18
39497: PPUSH
39498: CALL_OW 181
// end ; continue ;
39502: GO 39154
// end ; if not cleaners or not tmp in cleaners then
39504: LD_VAR 0 6
39508: NOT
39509: PUSH
39510: LD_VAR 0 13
39514: PUSH
39515: LD_VAR 0 6
39519: IN
39520: NOT
39521: OR
39522: IFFALSE 39829
// begin if dep then
39524: LD_VAR 0 17
39528: IFFALSE 39664
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39530: LD_ADDR_VAR 0 16
39534: PUSH
39535: LD_VAR 0 17
39539: PUSH
39540: LD_INT 1
39542: ARRAY
39543: PPUSH
39544: CALL_OW 250
39548: PPUSH
39549: LD_VAR 0 17
39553: PUSH
39554: LD_INT 1
39556: ARRAY
39557: PPUSH
39558: CALL_OW 254
39562: PPUSH
39563: LD_INT 5
39565: PPUSH
39566: CALL_OW 272
39570: PUSH
39571: LD_VAR 0 17
39575: PUSH
39576: LD_INT 1
39578: ARRAY
39579: PPUSH
39580: CALL_OW 251
39584: PPUSH
39585: LD_VAR 0 17
39589: PUSH
39590: LD_INT 1
39592: ARRAY
39593: PPUSH
39594: CALL_OW 254
39598: PPUSH
39599: LD_INT 5
39601: PPUSH
39602: CALL_OW 273
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39611: LD_VAR 0 16
39615: PUSH
39616: LD_INT 1
39618: ARRAY
39619: PPUSH
39620: LD_VAR 0 16
39624: PUSH
39625: LD_INT 2
39627: ARRAY
39628: PPUSH
39629: CALL_OW 488
39633: IFFALSE 39664
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39635: LD_VAR 0 13
39639: PPUSH
39640: LD_VAR 0 16
39644: PUSH
39645: LD_INT 1
39647: ARRAY
39648: PPUSH
39649: LD_VAR 0 16
39653: PUSH
39654: LD_INT 2
39656: ARRAY
39657: PPUSH
39658: CALL_OW 111
// continue ;
39662: GO 39154
// end ; end ; r := GetDir ( tmp ) ;
39664: LD_ADDR_VAR 0 15
39668: PUSH
39669: LD_VAR 0 13
39673: PPUSH
39674: CALL_OW 254
39678: ST_TO_ADDR
// if r = 5 then
39679: LD_VAR 0 15
39683: PUSH
39684: LD_INT 5
39686: EQUAL
39687: IFFALSE 39697
// r := 0 ;
39689: LD_ADDR_VAR 0 15
39693: PUSH
39694: LD_INT 0
39696: ST_TO_ADDR
// for j = r to 5 do
39697: LD_ADDR_VAR 0 10
39701: PUSH
39702: DOUBLE
39703: LD_VAR 0 15
39707: DEC
39708: ST_TO_ADDR
39709: LD_INT 5
39711: PUSH
39712: FOR_TO
39713: IFFALSE 39827
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39715: LD_ADDR_VAR 0 11
39719: PUSH
39720: LD_VAR 0 13
39724: PPUSH
39725: CALL_OW 250
39729: PPUSH
39730: LD_VAR 0 10
39734: PPUSH
39735: LD_INT 2
39737: PPUSH
39738: CALL_OW 272
39742: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39743: LD_ADDR_VAR 0 12
39747: PUSH
39748: LD_VAR 0 13
39752: PPUSH
39753: CALL_OW 251
39757: PPUSH
39758: LD_VAR 0 10
39762: PPUSH
39763: LD_INT 2
39765: PPUSH
39766: CALL_OW 273
39770: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39771: LD_VAR 0 11
39775: PPUSH
39776: LD_VAR 0 12
39780: PPUSH
39781: CALL_OW 488
39785: PUSH
39786: LD_VAR 0 11
39790: PPUSH
39791: LD_VAR 0 12
39795: PPUSH
39796: CALL_OW 428
39800: NOT
39801: AND
39802: IFFALSE 39825
// begin ComMoveXY ( tmp , _x , _y ) ;
39804: LD_VAR 0 13
39808: PPUSH
39809: LD_VAR 0 11
39813: PPUSH
39814: LD_VAR 0 12
39818: PPUSH
39819: CALL_OW 111
// break ;
39823: GO 39827
// end ; end ;
39825: GO 39712
39827: POP
39828: POP
// end ; end ;
39829: GO 39154
39831: POP
39832: POP
// end ;
39833: LD_VAR 0 8
39837: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39838: LD_INT 0
39840: PPUSH
// result := true ;
39841: LD_ADDR_VAR 0 3
39845: PUSH
39846: LD_INT 1
39848: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39849: LD_VAR 0 2
39853: PUSH
39854: LD_INT 24
39856: DOUBLE
39857: EQUAL
39858: IFTRUE 39868
39860: LD_INT 33
39862: DOUBLE
39863: EQUAL
39864: IFTRUE 39868
39866: GO 39893
39868: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39869: LD_ADDR_VAR 0 3
39873: PUSH
39874: LD_INT 32
39876: PPUSH
39877: LD_VAR 0 1
39881: PPUSH
39882: CALL_OW 321
39886: PUSH
39887: LD_INT 2
39889: EQUAL
39890: ST_TO_ADDR
39891: GO 40209
39893: LD_INT 20
39895: DOUBLE
39896: EQUAL
39897: IFTRUE 39901
39899: GO 39926
39901: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39902: LD_ADDR_VAR 0 3
39906: PUSH
39907: LD_INT 6
39909: PPUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL_OW 321
39919: PUSH
39920: LD_INT 2
39922: EQUAL
39923: ST_TO_ADDR
39924: GO 40209
39926: LD_INT 22
39928: DOUBLE
39929: EQUAL
39930: IFTRUE 39940
39932: LD_INT 36
39934: DOUBLE
39935: EQUAL
39936: IFTRUE 39940
39938: GO 39965
39940: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39941: LD_ADDR_VAR 0 3
39945: PUSH
39946: LD_INT 15
39948: PPUSH
39949: LD_VAR 0 1
39953: PPUSH
39954: CALL_OW 321
39958: PUSH
39959: LD_INT 2
39961: EQUAL
39962: ST_TO_ADDR
39963: GO 40209
39965: LD_INT 30
39967: DOUBLE
39968: EQUAL
39969: IFTRUE 39973
39971: GO 39998
39973: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39974: LD_ADDR_VAR 0 3
39978: PUSH
39979: LD_INT 20
39981: PPUSH
39982: LD_VAR 0 1
39986: PPUSH
39987: CALL_OW 321
39991: PUSH
39992: LD_INT 2
39994: EQUAL
39995: ST_TO_ADDR
39996: GO 40209
39998: LD_INT 28
40000: DOUBLE
40001: EQUAL
40002: IFTRUE 40012
40004: LD_INT 21
40006: DOUBLE
40007: EQUAL
40008: IFTRUE 40012
40010: GO 40037
40012: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40013: LD_ADDR_VAR 0 3
40017: PUSH
40018: LD_INT 21
40020: PPUSH
40021: LD_VAR 0 1
40025: PPUSH
40026: CALL_OW 321
40030: PUSH
40031: LD_INT 2
40033: EQUAL
40034: ST_TO_ADDR
40035: GO 40209
40037: LD_INT 16
40039: DOUBLE
40040: EQUAL
40041: IFTRUE 40045
40043: GO 40070
40045: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40046: LD_ADDR_VAR 0 3
40050: PUSH
40051: LD_INT 84
40053: PPUSH
40054: LD_VAR 0 1
40058: PPUSH
40059: CALL_OW 321
40063: PUSH
40064: LD_INT 2
40066: EQUAL
40067: ST_TO_ADDR
40068: GO 40209
40070: LD_INT 19
40072: DOUBLE
40073: EQUAL
40074: IFTRUE 40084
40076: LD_INT 23
40078: DOUBLE
40079: EQUAL
40080: IFTRUE 40084
40082: GO 40109
40084: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40085: LD_ADDR_VAR 0 3
40089: PUSH
40090: LD_INT 83
40092: PPUSH
40093: LD_VAR 0 1
40097: PPUSH
40098: CALL_OW 321
40102: PUSH
40103: LD_INT 2
40105: EQUAL
40106: ST_TO_ADDR
40107: GO 40209
40109: LD_INT 17
40111: DOUBLE
40112: EQUAL
40113: IFTRUE 40117
40115: GO 40142
40117: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40118: LD_ADDR_VAR 0 3
40122: PUSH
40123: LD_INT 39
40125: PPUSH
40126: LD_VAR 0 1
40130: PPUSH
40131: CALL_OW 321
40135: PUSH
40136: LD_INT 2
40138: EQUAL
40139: ST_TO_ADDR
40140: GO 40209
40142: LD_INT 18
40144: DOUBLE
40145: EQUAL
40146: IFTRUE 40150
40148: GO 40175
40150: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40151: LD_ADDR_VAR 0 3
40155: PUSH
40156: LD_INT 40
40158: PPUSH
40159: LD_VAR 0 1
40163: PPUSH
40164: CALL_OW 321
40168: PUSH
40169: LD_INT 2
40171: EQUAL
40172: ST_TO_ADDR
40173: GO 40209
40175: LD_INT 27
40177: DOUBLE
40178: EQUAL
40179: IFTRUE 40183
40181: GO 40208
40183: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40184: LD_ADDR_VAR 0 3
40188: PUSH
40189: LD_INT 35
40191: PPUSH
40192: LD_VAR 0 1
40196: PPUSH
40197: CALL_OW 321
40201: PUSH
40202: LD_INT 2
40204: EQUAL
40205: ST_TO_ADDR
40206: GO 40209
40208: POP
// end ;
40209: LD_VAR 0 3
40213: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40214: LD_INT 0
40216: PPUSH
40217: PPUSH
40218: PPUSH
40219: PPUSH
40220: PPUSH
40221: PPUSH
40222: PPUSH
40223: PPUSH
40224: PPUSH
40225: PPUSH
40226: PPUSH
// result := false ;
40227: LD_ADDR_VAR 0 6
40231: PUSH
40232: LD_INT 0
40234: ST_TO_ADDR
// if btype = b_depot then
40235: LD_VAR 0 2
40239: PUSH
40240: LD_INT 0
40242: EQUAL
40243: IFFALSE 40255
// begin result := true ;
40245: LD_ADDR_VAR 0 6
40249: PUSH
40250: LD_INT 1
40252: ST_TO_ADDR
// exit ;
40253: GO 41081
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40255: LD_VAR 0 1
40259: NOT
40260: PUSH
40261: LD_VAR 0 1
40265: PPUSH
40266: CALL_OW 266
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: IN
40281: NOT
40282: OR
40283: PUSH
40284: LD_VAR 0 2
40288: NOT
40289: OR
40290: PUSH
40291: LD_VAR 0 5
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: LD_INT 2
40304: PUSH
40305: LD_INT 3
40307: PUSH
40308: LD_INT 4
40310: PUSH
40311: LD_INT 5
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: IN
40322: NOT
40323: OR
40324: PUSH
40325: LD_VAR 0 3
40329: PPUSH
40330: LD_VAR 0 4
40334: PPUSH
40335: CALL_OW 488
40339: NOT
40340: OR
40341: IFFALSE 40345
// exit ;
40343: GO 41081
// side := GetSide ( depot ) ;
40345: LD_ADDR_VAR 0 9
40349: PUSH
40350: LD_VAR 0 1
40354: PPUSH
40355: CALL_OW 255
40359: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40360: LD_VAR 0 9
40364: PPUSH
40365: LD_VAR 0 2
40369: PPUSH
40370: CALL 39838 0 2
40374: NOT
40375: IFFALSE 40379
// exit ;
40377: GO 41081
// pom := GetBase ( depot ) ;
40379: LD_ADDR_VAR 0 10
40383: PUSH
40384: LD_VAR 0 1
40388: PPUSH
40389: CALL_OW 274
40393: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40394: LD_ADDR_VAR 0 11
40398: PUSH
40399: LD_VAR 0 2
40403: PPUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 248
40413: PPUSH
40414: CALL_OW 450
40418: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40419: LD_VAR 0 10
40423: PPUSH
40424: LD_INT 1
40426: PPUSH
40427: CALL_OW 275
40431: PUSH
40432: LD_VAR 0 11
40436: PUSH
40437: LD_INT 1
40439: ARRAY
40440: GREATEREQUAL
40441: PUSH
40442: LD_VAR 0 10
40446: PPUSH
40447: LD_INT 2
40449: PPUSH
40450: CALL_OW 275
40454: PUSH
40455: LD_VAR 0 11
40459: PUSH
40460: LD_INT 2
40462: ARRAY
40463: GREATEREQUAL
40464: AND
40465: PUSH
40466: LD_VAR 0 10
40470: PPUSH
40471: LD_INT 3
40473: PPUSH
40474: CALL_OW 275
40478: PUSH
40479: LD_VAR 0 11
40483: PUSH
40484: LD_INT 3
40486: ARRAY
40487: GREATEREQUAL
40488: AND
40489: NOT
40490: IFFALSE 40494
// exit ;
40492: GO 41081
// if GetBType ( depot ) = b_depot then
40494: LD_VAR 0 1
40498: PPUSH
40499: CALL_OW 266
40503: PUSH
40504: LD_INT 0
40506: EQUAL
40507: IFFALSE 40519
// dist := 28 else
40509: LD_ADDR_VAR 0 14
40513: PUSH
40514: LD_INT 28
40516: ST_TO_ADDR
40517: GO 40527
// dist := 36 ;
40519: LD_ADDR_VAR 0 14
40523: PUSH
40524: LD_INT 36
40526: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40527: LD_VAR 0 1
40531: PPUSH
40532: LD_VAR 0 3
40536: PPUSH
40537: LD_VAR 0 4
40541: PPUSH
40542: CALL_OW 297
40546: PUSH
40547: LD_VAR 0 14
40551: GREATER
40552: IFFALSE 40556
// exit ;
40554: GO 41081
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40556: LD_ADDR_VAR 0 12
40560: PUSH
40561: LD_VAR 0 2
40565: PPUSH
40566: LD_VAR 0 3
40570: PPUSH
40571: LD_VAR 0 4
40575: PPUSH
40576: LD_VAR 0 5
40580: PPUSH
40581: LD_VAR 0 1
40585: PPUSH
40586: CALL_OW 248
40590: PPUSH
40591: LD_INT 0
40593: PPUSH
40594: CALL 41086 0 6
40598: ST_TO_ADDR
// if not hexes then
40599: LD_VAR 0 12
40603: NOT
40604: IFFALSE 40608
// exit ;
40606: GO 41081
// hex := GetHexInfo ( x , y ) ;
40608: LD_ADDR_VAR 0 15
40612: PUSH
40613: LD_VAR 0 3
40617: PPUSH
40618: LD_VAR 0 4
40622: PPUSH
40623: CALL_OW 546
40627: ST_TO_ADDR
// if hex [ 1 ] then
40628: LD_VAR 0 15
40632: PUSH
40633: LD_INT 1
40635: ARRAY
40636: IFFALSE 40640
// exit ;
40638: GO 41081
// height := hex [ 2 ] ;
40640: LD_ADDR_VAR 0 13
40644: PUSH
40645: LD_VAR 0 15
40649: PUSH
40650: LD_INT 2
40652: ARRAY
40653: ST_TO_ADDR
// for i = 1 to hexes do
40654: LD_ADDR_VAR 0 7
40658: PUSH
40659: DOUBLE
40660: LD_INT 1
40662: DEC
40663: ST_TO_ADDR
40664: LD_VAR 0 12
40668: PUSH
40669: FOR_TO
40670: IFFALSE 41000
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40672: LD_VAR 0 12
40676: PUSH
40677: LD_VAR 0 7
40681: ARRAY
40682: PUSH
40683: LD_INT 1
40685: ARRAY
40686: PPUSH
40687: LD_VAR 0 12
40691: PUSH
40692: LD_VAR 0 7
40696: ARRAY
40697: PUSH
40698: LD_INT 2
40700: ARRAY
40701: PPUSH
40702: CALL_OW 488
40706: NOT
40707: PUSH
40708: LD_VAR 0 12
40712: PUSH
40713: LD_VAR 0 7
40717: ARRAY
40718: PUSH
40719: LD_INT 1
40721: ARRAY
40722: PPUSH
40723: LD_VAR 0 12
40727: PUSH
40728: LD_VAR 0 7
40732: ARRAY
40733: PUSH
40734: LD_INT 2
40736: ARRAY
40737: PPUSH
40738: CALL_OW 428
40742: PUSH
40743: LD_INT 0
40745: GREATER
40746: OR
40747: PUSH
40748: LD_VAR 0 12
40752: PUSH
40753: LD_VAR 0 7
40757: ARRAY
40758: PUSH
40759: LD_INT 1
40761: ARRAY
40762: PPUSH
40763: LD_VAR 0 12
40767: PUSH
40768: LD_VAR 0 7
40772: ARRAY
40773: PUSH
40774: LD_INT 2
40776: ARRAY
40777: PPUSH
40778: CALL_OW 351
40782: OR
40783: IFFALSE 40789
// exit ;
40785: POP
40786: POP
40787: GO 41081
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40789: LD_ADDR_VAR 0 8
40793: PUSH
40794: LD_VAR 0 12
40798: PUSH
40799: LD_VAR 0 7
40803: ARRAY
40804: PUSH
40805: LD_INT 1
40807: ARRAY
40808: PPUSH
40809: LD_VAR 0 12
40813: PUSH
40814: LD_VAR 0 7
40818: ARRAY
40819: PUSH
40820: LD_INT 2
40822: ARRAY
40823: PPUSH
40824: CALL_OW 546
40828: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40829: LD_VAR 0 8
40833: PUSH
40834: LD_INT 1
40836: ARRAY
40837: PUSH
40838: LD_VAR 0 8
40842: PUSH
40843: LD_INT 2
40845: ARRAY
40846: PUSH
40847: LD_VAR 0 13
40851: PUSH
40852: LD_INT 2
40854: PLUS
40855: GREATER
40856: OR
40857: PUSH
40858: LD_VAR 0 8
40862: PUSH
40863: LD_INT 2
40865: ARRAY
40866: PUSH
40867: LD_VAR 0 13
40871: PUSH
40872: LD_INT 2
40874: MINUS
40875: LESS
40876: OR
40877: PUSH
40878: LD_VAR 0 8
40882: PUSH
40883: LD_INT 3
40885: ARRAY
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: LD_INT 8
40892: PUSH
40893: LD_INT 9
40895: PUSH
40896: LD_INT 10
40898: PUSH
40899: LD_INT 11
40901: PUSH
40902: LD_INT 12
40904: PUSH
40905: LD_INT 13
40907: PUSH
40908: LD_INT 16
40910: PUSH
40911: LD_INT 17
40913: PUSH
40914: LD_INT 18
40916: PUSH
40917: LD_INT 19
40919: PUSH
40920: LD_INT 20
40922: PUSH
40923: LD_INT 21
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: IN
40941: NOT
40942: OR
40943: PUSH
40944: LD_VAR 0 8
40948: PUSH
40949: LD_INT 5
40951: ARRAY
40952: NOT
40953: OR
40954: PUSH
40955: LD_VAR 0 8
40959: PUSH
40960: LD_INT 6
40962: ARRAY
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 7
40972: PUSH
40973: LD_INT 9
40975: PUSH
40976: LD_INT 10
40978: PUSH
40979: LD_INT 11
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: IN
40990: NOT
40991: OR
40992: IFFALSE 40998
// exit ;
40994: POP
40995: POP
40996: GO 41081
// end ;
40998: GO 40669
41000: POP
41001: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41002: LD_VAR 0 9
41006: PPUSH
41007: LD_VAR 0 3
41011: PPUSH
41012: LD_VAR 0 4
41016: PPUSH
41017: LD_INT 20
41019: PPUSH
41020: CALL 33004 0 4
41024: PUSH
41025: LD_INT 4
41027: ARRAY
41028: IFFALSE 41032
// exit ;
41030: GO 41081
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41032: LD_VAR 0 2
41036: PUSH
41037: LD_INT 29
41039: PUSH
41040: LD_INT 30
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: IN
41047: PUSH
41048: LD_VAR 0 3
41052: PPUSH
41053: LD_VAR 0 4
41057: PPUSH
41058: LD_VAR 0 9
41062: PPUSH
41063: CALL_OW 440
41067: NOT
41068: AND
41069: IFFALSE 41073
// exit ;
41071: GO 41081
// result := true ;
41073: LD_ADDR_VAR 0 6
41077: PUSH
41078: LD_INT 1
41080: ST_TO_ADDR
// end ;
41081: LD_VAR 0 6
41085: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41086: LD_INT 0
41088: PPUSH
41089: PPUSH
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
41101: PPUSH
41102: PPUSH
41103: PPUSH
41104: PPUSH
41105: PPUSH
41106: PPUSH
41107: PPUSH
41108: PPUSH
41109: PPUSH
41110: PPUSH
41111: PPUSH
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
41116: PPUSH
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
41127: PPUSH
41128: PPUSH
41129: PPUSH
41130: PPUSH
41131: PPUSH
41132: PPUSH
41133: PPUSH
41134: PPUSH
41135: PPUSH
41136: PPUSH
41137: PPUSH
41138: PPUSH
41139: PPUSH
41140: PPUSH
41141: PPUSH
41142: PPUSH
41143: PPUSH
41144: PPUSH
41145: PPUSH
// result = [ ] ;
41146: LD_ADDR_VAR 0 7
41150: PUSH
41151: EMPTY
41152: ST_TO_ADDR
// temp_list = [ ] ;
41153: LD_ADDR_VAR 0 9
41157: PUSH
41158: EMPTY
41159: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41160: LD_VAR 0 4
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: LD_INT 3
41176: PUSH
41177: LD_INT 4
41179: PUSH
41180: LD_INT 5
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: IN
41191: NOT
41192: PUSH
41193: LD_VAR 0 1
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: IN
41208: PUSH
41209: LD_VAR 0 5
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: LD_INT 3
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: IN
41228: NOT
41229: AND
41230: OR
41231: IFFALSE 41235
// exit ;
41233: GO 59626
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41235: LD_VAR 0 1
41239: PUSH
41240: LD_INT 6
41242: PUSH
41243: LD_INT 7
41245: PUSH
41246: LD_INT 8
41248: PUSH
41249: LD_INT 13
41251: PUSH
41252: LD_INT 12
41254: PUSH
41255: LD_INT 15
41257: PUSH
41258: LD_INT 11
41260: PUSH
41261: LD_INT 14
41263: PUSH
41264: LD_INT 10
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: IN
41278: IFFALSE 41288
// btype = b_lab ;
41280: LD_ADDR_VAR 0 1
41284: PUSH
41285: LD_INT 6
41287: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41288: LD_VAR 0 6
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: IN
41307: NOT
41308: PUSH
41309: LD_VAR 0 1
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 3
41325: PUSH
41326: LD_INT 6
41328: PUSH
41329: LD_INT 36
41331: PUSH
41332: LD_INT 4
41334: PUSH
41335: LD_INT 5
41337: PUSH
41338: LD_INT 31
41340: PUSH
41341: LD_INT 32
41343: PUSH
41344: LD_INT 33
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: IN
41360: NOT
41361: PUSH
41362: LD_VAR 0 6
41366: PUSH
41367: LD_INT 1
41369: EQUAL
41370: AND
41371: OR
41372: PUSH
41373: LD_VAR 0 1
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: LD_INT 3
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: IN
41388: NOT
41389: PUSH
41390: LD_VAR 0 6
41394: PUSH
41395: LD_INT 2
41397: EQUAL
41398: AND
41399: OR
41400: IFFALSE 41410
// mode = 0 ;
41402: LD_ADDR_VAR 0 6
41406: PUSH
41407: LD_INT 0
41409: ST_TO_ADDR
// case mode of 0 :
41410: LD_VAR 0 6
41414: PUSH
41415: LD_INT 0
41417: DOUBLE
41418: EQUAL
41419: IFTRUE 41423
41421: GO 52876
41423: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41424: LD_ADDR_VAR 0 11
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 2
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 3
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 3
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41617: LD_ADDR_VAR 0 12
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 3
41774: NEG
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 3
41785: NEG
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41813: LD_ADDR_VAR 0 13
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 2
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: LD_INT 3
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 3
41984: NEG
41985: PUSH
41986: LD_INT 3
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42012: LD_ADDR_VAR 0 14
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: LD_INT 3
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: LD_INT 3
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42208: LD_ADDR_VAR 0 15
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 3
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42401: LD_ADDR_VAR 0 16
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: LD_INT 2
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 3
42548: PUSH
42549: LD_INT 2
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: LD_INT 3
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: LD_INT 3
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42594: LD_ADDR_VAR 0 17
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 2
42793: NEG
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42824: LD_ADDR_VAR 0 18
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 2
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 2
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: NEG
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43054: LD_ADDR_VAR 0 19
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: NEG
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43284: LD_ADDR_VAR 0 20
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43514: LD_ADDR_VAR 0 21
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43744: LD_ADDR_VAR 0 22
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43974: LD_ADDR_VAR 0 23
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 3
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44254: LD_ADDR_VAR 0 24
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 2
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 3
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 3
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44530: LD_ADDR_VAR 0 25
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 3
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 3
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 3
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 3
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44804: LD_ADDR_VAR 0 26
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 2
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 3
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45080: LD_ADDR_VAR 0 27
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: LD_INT 2
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 3
45313: NEG
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 3
45325: NEG
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45360: LD_ADDR_VAR 0 28
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: NEG
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 3
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: LD_INT 3
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 3
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 3
45607: NEG
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45642: LD_ADDR_VAR 0 29
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 2
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: LD_INT 3
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45921: LD_ADDR_VAR 0 30
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: NEG
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 3
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 3
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: LD_INT 3
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 3
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46199: LD_ADDR_VAR 0 31
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 3
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 3
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 3
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 3
46442: NEG
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46477: LD_ADDR_VAR 0 32
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46755: LD_ADDR_VAR 0 33
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 3
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 3
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: LD_INT 2
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47034: LD_ADDR_VAR 0 34
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 3
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: LD_INT 3
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 3
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47314: LD_ADDR_VAR 0 35
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: NEG
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47426: LD_ADDR_VAR 0 36
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47538: LD_ADDR_VAR 0 37
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47650: LD_ADDR_VAR 0 38
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47762: LD_ADDR_VAR 0 39
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47874: LD_ADDR_VAR 0 40
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47986: LD_ADDR_VAR 0 41
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: LD_INT 3
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 3
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 3
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 3
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 3
48295: NEG
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48336: LD_ADDR_VAR 0 42
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: LD_INT 3
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 3
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 3
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 3
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 3
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: LD_INT 3
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 3
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 3
48645: NEG
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48686: LD_ADDR_VAR 0 43
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 3
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 3
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 3
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 3
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: LD_INT 3
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 3
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 3
48982: NEG
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 3
48993: NEG
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49034: LD_ADDR_VAR 0 44
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: LD_INT 3
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 3
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 3
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 3
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 3
49277: PUSH
49278: LD_INT 3
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 3
49308: NEG
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: NEG
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 3
49331: NEG
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 3
49343: NEG
49344: PUSH
49345: LD_INT 3
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49384: LD_ADDR_VAR 0 45
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: LD_INT 3
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 3
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 3
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 3
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 3
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 3
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: NEG
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49734: LD_ADDR_VAR 0 46
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: LD_INT 3
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 3
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 3
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 3
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 3
50041: NEG
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50082: LD_ADDR_VAR 0 47
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50233: LD_ADDR_VAR 0 48
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50380: LD_ADDR_VAR 0 49
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50524: LD_ADDR_VAR 0 50
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50668: LD_ADDR_VAR 0 51
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50815: LD_ADDR_VAR 0 52
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50966: LD_ADDR_VAR 0 53
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51196: LD_ADDR_VAR 0 54
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51426: LD_ADDR_VAR 0 55
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: NEG
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51656: LD_ADDR_VAR 0 56
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51886: LD_ADDR_VAR 0 57
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52116: LD_ADDR_VAR 0 58
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52346: LD_ADDR_VAR 0 59
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52434: LD_ADDR_VAR 0 60
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52522: LD_ADDR_VAR 0 61
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52610: LD_ADDR_VAR 0 62
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52698: LD_ADDR_VAR 0 63
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52786: LD_ADDR_VAR 0 64
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: ST_TO_ADDR
// end ; 1 :
52874: GO 58771
52876: LD_INT 1
52878: DOUBLE
52879: EQUAL
52880: IFTRUE 52884
52882: GO 55507
52884: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52885: LD_ADDR_VAR 0 11
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 3
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52929: LD_ADDR_VAR 0 12
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 3
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 3
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: LIST
52969: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52970: LD_ADDR_VAR 0 13
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: LD_INT 3
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: LD_INT 3
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: LIST
53009: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53010: LD_ADDR_VAR 0 14
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 3
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 3
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53051: LD_ADDR_VAR 0 15
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 3
53069: NEG
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 3
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53095: LD_ADDR_VAR 0 16
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: LD_INT 3
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 3
53126: NEG
53127: PUSH
53128: LD_INT 3
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: LIST
53140: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53141: LD_ADDR_VAR 0 17
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: LD_INT 3
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53185: LD_ADDR_VAR 0 18
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: LIST
53225: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53226: LD_ADDR_VAR 0 19
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 3
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 3
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53266: LD_ADDR_VAR 0 20
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 3
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53307: LD_ADDR_VAR 0 21
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: NEG
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53351: LD_ADDR_VAR 0 22
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 3
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: NEG
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 3
53382: NEG
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: LIST
53396: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53397: LD_ADDR_VAR 0 23
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: LD_INT 4
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 3
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: LIST
53440: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53441: LD_ADDR_VAR 0 24
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 4
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: LIST
53481: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53482: LD_ADDR_VAR 0 25
53486: PUSH
53487: LD_INT 3
53489: PUSH
53490: LD_INT 3
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 4
53499: PUSH
53500: LD_INT 3
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: LD_INT 4
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: LIST
53521: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53522: LD_ADDR_VAR 0 26
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 3
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 4
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 3
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53563: LD_ADDR_VAR 0 27
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 3
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 4
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: LIST
53606: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53607: LD_ADDR_VAR 0 28
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: LD_INT 3
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 4
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 4
53638: NEG
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: LIST
53652: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53653: LD_ADDR_VAR 0 29
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 3
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 4
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 4
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 3
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 5
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 5
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 4
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 6
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 6
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 5
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53808: LD_ADDR_VAR 0 30
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 3
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 4
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 4
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 5
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 5
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 5
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 6
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 6
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53951: LD_ADDR_VAR 0 31
53955: PUSH
53956: LD_INT 3
53958: PUSH
53959: LD_INT 2
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: LD_INT 3
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 4
53988: PUSH
53989: LD_INT 3
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 4
53998: PUSH
53999: LD_INT 4
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 3
54008: PUSH
54009: LD_INT 4
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 5
54018: PUSH
54019: LD_INT 4
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 5
54028: PUSH
54029: LD_INT 5
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 4
54038: PUSH
54039: LD_INT 5
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 6
54048: PUSH
54049: LD_INT 5
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 6
54058: PUSH
54059: LD_INT 6
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 5
54068: PUSH
54069: LD_INT 6
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54090: LD_ADDR_VAR 0 32
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 4
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 4
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 5
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 5
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 4
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 6
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 6
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 5
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54233: LD_ADDR_VAR 0 33
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 3
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 4
54285: NEG
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 4
54296: NEG
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 4
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 5
54319: NEG
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 5
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 5
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 6
54353: NEG
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 6
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54388: LD_ADDR_VAR 0 34
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: LD_INT 4
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 4
54443: NEG
54444: PUSH
54445: LD_INT 3
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 4
54455: NEG
54456: PUSH
54457: LD_INT 4
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 4
54467: NEG
54468: PUSH
54469: LD_INT 5
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 5
54479: NEG
54480: PUSH
54481: LD_INT 4
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 5
54491: NEG
54492: PUSH
54493: LD_INT 5
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 5
54503: NEG
54504: PUSH
54505: LD_INT 6
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 6
54515: NEG
54516: PUSH
54517: LD_INT 5
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 6
54527: NEG
54528: PUSH
54529: LD_INT 6
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54551: LD_ADDR_VAR 0 41
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 3
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54595: LD_ADDR_VAR 0 42
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 3
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: LIST
54635: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54636: LD_ADDR_VAR 0 43
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 3
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: LD_INT 3
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: LIST
54675: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54676: LD_ADDR_VAR 0 44
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 3
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54717: LD_ADDR_VAR 0 45
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: LIST
54760: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54761: LD_ADDR_VAR 0 46
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: LD_INT 3
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: LIST
54806: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54807: LD_ADDR_VAR 0 47
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54840: LD_ADDR_VAR 0 48
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54871: LD_ADDR_VAR 0 49
54875: PUSH
54876: LD_INT 3
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 3
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54900: LD_ADDR_VAR 0 50
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54929: LD_ADDR_VAR 0 51
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54960: LD_ADDR_VAR 0 52
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 3
54979: NEG
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54993: LD_ADDR_VAR 0 53
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 3
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 3
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55037: LD_ADDR_VAR 0 54
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 3
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: LIST
55077: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55078: LD_ADDR_VAR 0 55
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: LD_INT 3
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: LD_INT 3
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55118: LD_ADDR_VAR 0 56
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 3
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 3
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55159: LD_ADDR_VAR 0 57
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: NEG
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 3
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: LIST
55202: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55203: LD_ADDR_VAR 0 58
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 3
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 3
55222: NEG
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: LD_INT 3
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55249: LD_ADDR_VAR 0 59
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55293: LD_ADDR_VAR 0 60
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: LIST
55333: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55334: LD_ADDR_VAR 0 61
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: LIST
55373: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55374: LD_ADDR_VAR 0 62
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55415: LD_ADDR_VAR 0 63
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55459: LD_ADDR_VAR 0 64
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: ST_TO_ADDR
// end ; 2 :
55505: GO 58771
55507: LD_INT 2
55509: DOUBLE
55510: EQUAL
55511: IFTRUE 55515
55513: GO 58770
55515: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55516: LD_ADDR_VAR 0 29
55520: PUSH
55521: LD_INT 4
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 4
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 5
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 5
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 4
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 3
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 3
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 3
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 5
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 3
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 3
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 4
55636: PUSH
55637: LD_INT 3
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 4
55646: PUSH
55647: LD_INT 4
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: LD_INT 4
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 4
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 4
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 4
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 3
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 4
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 5
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 5
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 4
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: LD_INT 5
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 3
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 4
55855: NEG
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 4
55866: NEG
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 4
55878: NEG
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: LD_INT 2
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 4
55901: NEG
55902: PUSH
55903: LD_INT 4
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 4
55913: NEG
55914: PUSH
55915: LD_INT 5
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 3
55925: NEG
55926: PUSH
55927: LD_INT 4
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 3
55937: NEG
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 4
55949: NEG
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 5
55961: NEG
55962: PUSH
55963: LD_INT 4
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 5
55973: NEG
55974: PUSH
55975: LD_INT 5
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: LD_INT 5
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 5
55997: NEG
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56054: LD_ADDR_VAR 0 30
56058: PUSH
56059: LD_INT 4
56061: PUSH
56062: LD_INT 4
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 4
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 5
56081: PUSH
56082: LD_INT 4
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 5
56091: PUSH
56092: LD_INT 5
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 4
56101: PUSH
56102: LD_INT 5
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 3
56111: PUSH
56112: LD_INT 4
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 3
56121: PUSH
56122: LD_INT 3
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 5
56131: PUSH
56132: LD_INT 3
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: PUSH
56142: LD_INT 5
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 3
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 3
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: LD_INT 4
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 4
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 4
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 4
56244: NEG
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 4
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 5
56300: NEG
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 5
56311: NEG
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 5
56323: NEG
56324: PUSH
56325: LD_INT 2
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: LD_INT 2
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 3
56346: NEG
56347: PUSH
56348: LD_INT 3
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 3
56358: NEG
56359: PUSH
56360: LD_INT 4
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 2
56370: NEG
56371: PUSH
56372: LD_INT 3
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 4
56406: NEG
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 4
56418: NEG
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: LD_INT 4
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 4
56442: NEG
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 4
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 5
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 4
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 3
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 4
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 5
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: LD_INT 3
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: LD_INT 5
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56601: LD_ADDR_VAR 0 31
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 4
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 3
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: LD_INT 4
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: LD_INT 5
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 5
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 4
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: LD_INT 5
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: LD_INT 3
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: NEG
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: NEG
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 4
56757: NEG
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 4
56768: NEG
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 4
56780: NEG
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 4
56803: NEG
56804: PUSH
56805: LD_INT 4
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 4
56815: NEG
56816: PUSH
56817: LD_INT 5
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 3
56827: NEG
56828: PUSH
56829: LD_INT 4
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 3
56839: NEG
56840: PUSH
56841: LD_INT 3
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 4
56851: NEG
56852: PUSH
56853: LD_INT 3
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 5
56863: NEG
56864: PUSH
56865: LD_INT 4
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 5
56875: NEG
56876: PUSH
56877: LD_INT 5
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 5
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 5
56899: NEG
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 3
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: LD_INT 4
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 3
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 4
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: LD_INT 4
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 4
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 4
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 5
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 5
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 4
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 3
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 5
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57151: LD_ADDR_VAR 0 32
57155: PUSH
57156: LD_INT 4
57158: NEG
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 4
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 4
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 5
57214: NEG
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 5
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 5
57237: NEG
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 3
57249: NEG
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: LD_INT 3
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: LD_INT 4
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 3
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 4
57320: NEG
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 4
57332: NEG
57333: PUSH
57334: LD_INT 4
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: LD_INT 4
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 4
57356: NEG
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 4
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: LD_INT 5
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: LD_INT 4
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 3
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 4
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 5
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: LD_INT 5
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 4
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 4
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 4
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 4
57563: PUSH
57564: LD_INT 4
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 4
57573: PUSH
57574: LD_INT 3
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 5
57583: PUSH
57584: LD_INT 4
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 5
57593: PUSH
57594: LD_INT 5
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 4
57603: PUSH
57604: LD_INT 5
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: LD_INT 4
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: LD_INT 3
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 5
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: LD_INT 5
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57698: LD_ADDR_VAR 0 33
57702: PUSH
57703: LD_INT 4
57705: NEG
57706: PUSH
57707: LD_INT 4
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 4
57717: NEG
57718: PUSH
57719: LD_INT 5
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: LD_INT 4
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: LD_INT 3
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 4
57753: NEG
57754: PUSH
57755: LD_INT 3
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 5
57765: NEG
57766: PUSH
57767: LD_INT 4
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 5
57777: NEG
57778: PUSH
57779: LD_INT 5
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: NEG
57790: PUSH
57791: LD_INT 5
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 5
57801: NEG
57802: PUSH
57803: LD_INT 3
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 4
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 3
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: LD_INT 4
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: LD_INT 4
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 4
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 5
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 5
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 4
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 3
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 5
57998: PUSH
57999: LD_INT 2
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 3
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 4
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 4
58038: PUSH
58039: LD_INT 4
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 3
58048: PUSH
58049: LD_INT 4
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: LD_INT 3
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 4
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: LD_INT 4
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: LD_INT 4
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: LD_INT 4
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 5
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 5
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 4
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 3
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 5
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: LD_INT 3
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58236: LD_ADDR_VAR 0 34
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 4
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 5
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 4
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 4
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 5
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: LD_INT 5
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 4
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 4
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 4
58438: PUSH
58439: LD_INT 4
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 4
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 5
58458: PUSH
58459: LD_INT 4
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 5
58468: PUSH
58469: LD_INT 5
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 4
58478: PUSH
58479: LD_INT 5
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 4
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: LD_INT 3
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 5
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: LD_INT 5
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 3
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: LD_INT 3
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: LD_INT 4
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 4
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 4
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 4
58621: NEG
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 4
58632: NEG
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 3
58644: NEG
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 4
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 5
58677: NEG
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 5
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 5
58700: NEG
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 3
58712: NEG
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: ST_TO_ADDR
// end ; end ;
58768: GO 58771
58770: POP
// case btype of b_depot , b_warehouse :
58771: LD_VAR 0 1
58775: PUSH
58776: LD_INT 0
58778: DOUBLE
58779: EQUAL
58780: IFTRUE 58790
58782: LD_INT 1
58784: DOUBLE
58785: EQUAL
58786: IFTRUE 58790
58788: GO 58991
58790: POP
// case nation of nation_american :
58791: LD_VAR 0 5
58795: PUSH
58796: LD_INT 1
58798: DOUBLE
58799: EQUAL
58800: IFTRUE 58804
58802: GO 58860
58804: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58805: LD_ADDR_VAR 0 9
58809: PUSH
58810: LD_VAR 0 11
58814: PUSH
58815: LD_VAR 0 12
58819: PUSH
58820: LD_VAR 0 13
58824: PUSH
58825: LD_VAR 0 14
58829: PUSH
58830: LD_VAR 0 15
58834: PUSH
58835: LD_VAR 0 16
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: PUSH
58848: LD_VAR 0 4
58852: PUSH
58853: LD_INT 1
58855: PLUS
58856: ARRAY
58857: ST_TO_ADDR
58858: GO 58989
58860: LD_INT 2
58862: DOUBLE
58863: EQUAL
58864: IFTRUE 58868
58866: GO 58924
58868: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58869: LD_ADDR_VAR 0 9
58873: PUSH
58874: LD_VAR 0 17
58878: PUSH
58879: LD_VAR 0 18
58883: PUSH
58884: LD_VAR 0 19
58888: PUSH
58889: LD_VAR 0 20
58893: PUSH
58894: LD_VAR 0 21
58898: PUSH
58899: LD_VAR 0 22
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: PUSH
58912: LD_VAR 0 4
58916: PUSH
58917: LD_INT 1
58919: PLUS
58920: ARRAY
58921: ST_TO_ADDR
58922: GO 58989
58924: LD_INT 3
58926: DOUBLE
58927: EQUAL
58928: IFTRUE 58932
58930: GO 58988
58932: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58933: LD_ADDR_VAR 0 9
58937: PUSH
58938: LD_VAR 0 23
58942: PUSH
58943: LD_VAR 0 24
58947: PUSH
58948: LD_VAR 0 25
58952: PUSH
58953: LD_VAR 0 26
58957: PUSH
58958: LD_VAR 0 27
58962: PUSH
58963: LD_VAR 0 28
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: PUSH
58976: LD_VAR 0 4
58980: PUSH
58981: LD_INT 1
58983: PLUS
58984: ARRAY
58985: ST_TO_ADDR
58986: GO 58989
58988: POP
58989: GO 59544
58991: LD_INT 2
58993: DOUBLE
58994: EQUAL
58995: IFTRUE 59005
58997: LD_INT 3
58999: DOUBLE
59000: EQUAL
59001: IFTRUE 59005
59003: GO 59061
59005: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59006: LD_ADDR_VAR 0 9
59010: PUSH
59011: LD_VAR 0 29
59015: PUSH
59016: LD_VAR 0 30
59020: PUSH
59021: LD_VAR 0 31
59025: PUSH
59026: LD_VAR 0 32
59030: PUSH
59031: LD_VAR 0 33
59035: PUSH
59036: LD_VAR 0 34
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: PUSH
59049: LD_VAR 0 4
59053: PUSH
59054: LD_INT 1
59056: PLUS
59057: ARRAY
59058: ST_TO_ADDR
59059: GO 59544
59061: LD_INT 16
59063: DOUBLE
59064: EQUAL
59065: IFTRUE 59123
59067: LD_INT 17
59069: DOUBLE
59070: EQUAL
59071: IFTRUE 59123
59073: LD_INT 18
59075: DOUBLE
59076: EQUAL
59077: IFTRUE 59123
59079: LD_INT 19
59081: DOUBLE
59082: EQUAL
59083: IFTRUE 59123
59085: LD_INT 22
59087: DOUBLE
59088: EQUAL
59089: IFTRUE 59123
59091: LD_INT 20
59093: DOUBLE
59094: EQUAL
59095: IFTRUE 59123
59097: LD_INT 21
59099: DOUBLE
59100: EQUAL
59101: IFTRUE 59123
59103: LD_INT 23
59105: DOUBLE
59106: EQUAL
59107: IFTRUE 59123
59109: LD_INT 24
59111: DOUBLE
59112: EQUAL
59113: IFTRUE 59123
59115: LD_INT 25
59117: DOUBLE
59118: EQUAL
59119: IFTRUE 59123
59121: GO 59179
59123: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59124: LD_ADDR_VAR 0 9
59128: PUSH
59129: LD_VAR 0 35
59133: PUSH
59134: LD_VAR 0 36
59138: PUSH
59139: LD_VAR 0 37
59143: PUSH
59144: LD_VAR 0 38
59148: PUSH
59149: LD_VAR 0 39
59153: PUSH
59154: LD_VAR 0 40
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: PUSH
59167: LD_VAR 0 4
59171: PUSH
59172: LD_INT 1
59174: PLUS
59175: ARRAY
59176: ST_TO_ADDR
59177: GO 59544
59179: LD_INT 6
59181: DOUBLE
59182: EQUAL
59183: IFTRUE 59235
59185: LD_INT 7
59187: DOUBLE
59188: EQUAL
59189: IFTRUE 59235
59191: LD_INT 8
59193: DOUBLE
59194: EQUAL
59195: IFTRUE 59235
59197: LD_INT 13
59199: DOUBLE
59200: EQUAL
59201: IFTRUE 59235
59203: LD_INT 12
59205: DOUBLE
59206: EQUAL
59207: IFTRUE 59235
59209: LD_INT 15
59211: DOUBLE
59212: EQUAL
59213: IFTRUE 59235
59215: LD_INT 11
59217: DOUBLE
59218: EQUAL
59219: IFTRUE 59235
59221: LD_INT 14
59223: DOUBLE
59224: EQUAL
59225: IFTRUE 59235
59227: LD_INT 10
59229: DOUBLE
59230: EQUAL
59231: IFTRUE 59235
59233: GO 59291
59235: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59236: LD_ADDR_VAR 0 9
59240: PUSH
59241: LD_VAR 0 41
59245: PUSH
59246: LD_VAR 0 42
59250: PUSH
59251: LD_VAR 0 43
59255: PUSH
59256: LD_VAR 0 44
59260: PUSH
59261: LD_VAR 0 45
59265: PUSH
59266: LD_VAR 0 46
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: PUSH
59279: LD_VAR 0 4
59283: PUSH
59284: LD_INT 1
59286: PLUS
59287: ARRAY
59288: ST_TO_ADDR
59289: GO 59544
59291: LD_INT 36
59293: DOUBLE
59294: EQUAL
59295: IFTRUE 59299
59297: GO 59355
59299: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59300: LD_ADDR_VAR 0 9
59304: PUSH
59305: LD_VAR 0 47
59309: PUSH
59310: LD_VAR 0 48
59314: PUSH
59315: LD_VAR 0 49
59319: PUSH
59320: LD_VAR 0 50
59324: PUSH
59325: LD_VAR 0 51
59329: PUSH
59330: LD_VAR 0 52
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: PUSH
59343: LD_VAR 0 4
59347: PUSH
59348: LD_INT 1
59350: PLUS
59351: ARRAY
59352: ST_TO_ADDR
59353: GO 59544
59355: LD_INT 4
59357: DOUBLE
59358: EQUAL
59359: IFTRUE 59381
59361: LD_INT 5
59363: DOUBLE
59364: EQUAL
59365: IFTRUE 59381
59367: LD_INT 34
59369: DOUBLE
59370: EQUAL
59371: IFTRUE 59381
59373: LD_INT 37
59375: DOUBLE
59376: EQUAL
59377: IFTRUE 59381
59379: GO 59437
59381: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59382: LD_ADDR_VAR 0 9
59386: PUSH
59387: LD_VAR 0 53
59391: PUSH
59392: LD_VAR 0 54
59396: PUSH
59397: LD_VAR 0 55
59401: PUSH
59402: LD_VAR 0 56
59406: PUSH
59407: LD_VAR 0 57
59411: PUSH
59412: LD_VAR 0 58
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: PUSH
59425: LD_VAR 0 4
59429: PUSH
59430: LD_INT 1
59432: PLUS
59433: ARRAY
59434: ST_TO_ADDR
59435: GO 59544
59437: LD_INT 31
59439: DOUBLE
59440: EQUAL
59441: IFTRUE 59487
59443: LD_INT 32
59445: DOUBLE
59446: EQUAL
59447: IFTRUE 59487
59449: LD_INT 33
59451: DOUBLE
59452: EQUAL
59453: IFTRUE 59487
59455: LD_INT 27
59457: DOUBLE
59458: EQUAL
59459: IFTRUE 59487
59461: LD_INT 26
59463: DOUBLE
59464: EQUAL
59465: IFTRUE 59487
59467: LD_INT 28
59469: DOUBLE
59470: EQUAL
59471: IFTRUE 59487
59473: LD_INT 29
59475: DOUBLE
59476: EQUAL
59477: IFTRUE 59487
59479: LD_INT 30
59481: DOUBLE
59482: EQUAL
59483: IFTRUE 59487
59485: GO 59543
59487: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59488: LD_ADDR_VAR 0 9
59492: PUSH
59493: LD_VAR 0 59
59497: PUSH
59498: LD_VAR 0 60
59502: PUSH
59503: LD_VAR 0 61
59507: PUSH
59508: LD_VAR 0 62
59512: PUSH
59513: LD_VAR 0 63
59517: PUSH
59518: LD_VAR 0 64
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: PUSH
59531: LD_VAR 0 4
59535: PUSH
59536: LD_INT 1
59538: PLUS
59539: ARRAY
59540: ST_TO_ADDR
59541: GO 59544
59543: POP
// temp_list2 = [ ] ;
59544: LD_ADDR_VAR 0 10
59548: PUSH
59549: EMPTY
59550: ST_TO_ADDR
// for i in temp_list do
59551: LD_ADDR_VAR 0 8
59555: PUSH
59556: LD_VAR 0 9
59560: PUSH
59561: FOR_IN
59562: IFFALSE 59614
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59564: LD_ADDR_VAR 0 10
59568: PUSH
59569: LD_VAR 0 10
59573: PUSH
59574: LD_VAR 0 8
59578: PUSH
59579: LD_INT 1
59581: ARRAY
59582: PUSH
59583: LD_VAR 0 2
59587: PLUS
59588: PUSH
59589: LD_VAR 0 8
59593: PUSH
59594: LD_INT 2
59596: ARRAY
59597: PUSH
59598: LD_VAR 0 3
59602: PLUS
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: ADD
59611: ST_TO_ADDR
59612: GO 59561
59614: POP
59615: POP
// result = temp_list2 ;
59616: LD_ADDR_VAR 0 7
59620: PUSH
59621: LD_VAR 0 10
59625: ST_TO_ADDR
// end ;
59626: LD_VAR 0 7
59630: RET
// export function EnemyInRange ( unit , dist ) ; begin
59631: LD_INT 0
59633: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59634: LD_ADDR_VAR 0 3
59638: PUSH
59639: LD_VAR 0 1
59643: PPUSH
59644: CALL_OW 255
59648: PPUSH
59649: LD_VAR 0 1
59653: PPUSH
59654: CALL_OW 250
59658: PPUSH
59659: LD_VAR 0 1
59663: PPUSH
59664: CALL_OW 251
59668: PPUSH
59669: LD_VAR 0 2
59673: PPUSH
59674: CALL 33004 0 4
59678: PUSH
59679: LD_INT 4
59681: ARRAY
59682: ST_TO_ADDR
// end ;
59683: LD_VAR 0 3
59687: RET
// export function PlayerSeeMe ( unit ) ; begin
59688: LD_INT 0
59690: PPUSH
// result := See ( your_side , unit ) ;
59691: LD_ADDR_VAR 0 2
59695: PUSH
59696: LD_OWVAR 2
59700: PPUSH
59701: LD_VAR 0 1
59705: PPUSH
59706: CALL_OW 292
59710: ST_TO_ADDR
// end ;
59711: LD_VAR 0 2
59715: RET
// export function ReverseDir ( unit ) ; begin
59716: LD_INT 0
59718: PPUSH
// if not unit then
59719: LD_VAR 0 1
59723: NOT
59724: IFFALSE 59728
// exit ;
59726: GO 59751
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59728: LD_ADDR_VAR 0 2
59732: PUSH
59733: LD_VAR 0 1
59737: PPUSH
59738: CALL_OW 254
59742: PUSH
59743: LD_INT 3
59745: PLUS
59746: PUSH
59747: LD_INT 6
59749: MOD
59750: ST_TO_ADDR
// end ;
59751: LD_VAR 0 2
59755: RET
// export function ReverseArray ( array ) ; var i ; begin
59756: LD_INT 0
59758: PPUSH
59759: PPUSH
// if not array then
59760: LD_VAR 0 1
59764: NOT
59765: IFFALSE 59769
// exit ;
59767: GO 59824
// result := [ ] ;
59769: LD_ADDR_VAR 0 2
59773: PUSH
59774: EMPTY
59775: ST_TO_ADDR
// for i := array downto 1 do
59776: LD_ADDR_VAR 0 3
59780: PUSH
59781: DOUBLE
59782: LD_VAR 0 1
59786: INC
59787: ST_TO_ADDR
59788: LD_INT 1
59790: PUSH
59791: FOR_DOWNTO
59792: IFFALSE 59822
// result := Join ( result , array [ i ] ) ;
59794: LD_ADDR_VAR 0 2
59798: PUSH
59799: LD_VAR 0 2
59803: PPUSH
59804: LD_VAR 0 1
59808: PUSH
59809: LD_VAR 0 3
59813: ARRAY
59814: PPUSH
59815: CALL 64467 0 2
59819: ST_TO_ADDR
59820: GO 59791
59822: POP
59823: POP
// end ;
59824: LD_VAR 0 2
59828: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59829: LD_INT 0
59831: PPUSH
59832: PPUSH
59833: PPUSH
59834: PPUSH
59835: PPUSH
59836: PPUSH
// if not unit or not hexes then
59837: LD_VAR 0 1
59841: NOT
59842: PUSH
59843: LD_VAR 0 2
59847: NOT
59848: OR
59849: IFFALSE 59853
// exit ;
59851: GO 59976
// dist := 9999 ;
59853: LD_ADDR_VAR 0 5
59857: PUSH
59858: LD_INT 9999
59860: ST_TO_ADDR
// for i = 1 to hexes do
59861: LD_ADDR_VAR 0 4
59865: PUSH
59866: DOUBLE
59867: LD_INT 1
59869: DEC
59870: ST_TO_ADDR
59871: LD_VAR 0 2
59875: PUSH
59876: FOR_TO
59877: IFFALSE 59964
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59879: LD_ADDR_VAR 0 6
59883: PUSH
59884: LD_VAR 0 1
59888: PPUSH
59889: LD_VAR 0 2
59893: PUSH
59894: LD_VAR 0 4
59898: ARRAY
59899: PUSH
59900: LD_INT 1
59902: ARRAY
59903: PPUSH
59904: LD_VAR 0 2
59908: PUSH
59909: LD_VAR 0 4
59913: ARRAY
59914: PUSH
59915: LD_INT 2
59917: ARRAY
59918: PPUSH
59919: CALL_OW 297
59923: ST_TO_ADDR
// if tdist < dist then
59924: LD_VAR 0 6
59928: PUSH
59929: LD_VAR 0 5
59933: LESS
59934: IFFALSE 59962
// begin hex := hexes [ i ] ;
59936: LD_ADDR_VAR 0 8
59940: PUSH
59941: LD_VAR 0 2
59945: PUSH
59946: LD_VAR 0 4
59950: ARRAY
59951: ST_TO_ADDR
// dist := tdist ;
59952: LD_ADDR_VAR 0 5
59956: PUSH
59957: LD_VAR 0 6
59961: ST_TO_ADDR
// end ; end ;
59962: GO 59876
59964: POP
59965: POP
// result := hex ;
59966: LD_ADDR_VAR 0 3
59970: PUSH
59971: LD_VAR 0 8
59975: ST_TO_ADDR
// end ;
59976: LD_VAR 0 3
59980: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59981: LD_INT 0
59983: PPUSH
59984: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59985: LD_VAR 0 1
59989: NOT
59990: PUSH
59991: LD_VAR 0 1
59995: PUSH
59996: LD_INT 21
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 23
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PPUSH
60020: CALL_OW 69
60024: IN
60025: NOT
60026: OR
60027: IFFALSE 60031
// exit ;
60029: GO 60078
// for i = 1 to 3 do
60031: LD_ADDR_VAR 0 3
60035: PUSH
60036: DOUBLE
60037: LD_INT 1
60039: DEC
60040: ST_TO_ADDR
60041: LD_INT 3
60043: PUSH
60044: FOR_TO
60045: IFFALSE 60076
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60047: LD_VAR 0 1
60051: PPUSH
60052: CALL_OW 250
60056: PPUSH
60057: LD_VAR 0 1
60061: PPUSH
60062: CALL_OW 251
60066: PPUSH
60067: LD_INT 1
60069: PPUSH
60070: CALL_OW 453
60074: GO 60044
60076: POP
60077: POP
// end ;
60078: LD_VAR 0 2
60082: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60083: LD_INT 0
60085: PPUSH
60086: PPUSH
60087: PPUSH
60088: PPUSH
60089: PPUSH
60090: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60091: LD_VAR 0 1
60095: NOT
60096: PUSH
60097: LD_VAR 0 2
60101: NOT
60102: OR
60103: PUSH
60104: LD_VAR 0 1
60108: PPUSH
60109: CALL_OW 314
60113: OR
60114: IFFALSE 60118
// exit ;
60116: GO 60585
// if GetLives ( i ) < 250 then
60118: LD_VAR 0 4
60122: PPUSH
60123: CALL_OW 256
60127: PUSH
60128: LD_INT 250
60130: LESS
60131: IFFALSE 60144
// begin ComAutodestruct ( i ) ;
60133: LD_VAR 0 4
60137: PPUSH
60138: CALL 59981 0 1
// exit ;
60142: GO 60585
// end ; x := GetX ( enemy_unit ) ;
60144: LD_ADDR_VAR 0 7
60148: PUSH
60149: LD_VAR 0 2
60153: PPUSH
60154: CALL_OW 250
60158: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60159: LD_ADDR_VAR 0 8
60163: PUSH
60164: LD_VAR 0 2
60168: PPUSH
60169: CALL_OW 251
60173: ST_TO_ADDR
// if not x or not y then
60174: LD_VAR 0 7
60178: NOT
60179: PUSH
60180: LD_VAR 0 8
60184: NOT
60185: OR
60186: IFFALSE 60190
// exit ;
60188: GO 60585
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60190: LD_ADDR_VAR 0 6
60194: PUSH
60195: LD_VAR 0 7
60199: PPUSH
60200: LD_INT 0
60202: PPUSH
60203: LD_INT 4
60205: PPUSH
60206: CALL_OW 272
60210: PUSH
60211: LD_VAR 0 8
60215: PPUSH
60216: LD_INT 0
60218: PPUSH
60219: LD_INT 4
60221: PPUSH
60222: CALL_OW 273
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_VAR 0 7
60235: PPUSH
60236: LD_INT 1
60238: PPUSH
60239: LD_INT 4
60241: PPUSH
60242: CALL_OW 272
60246: PUSH
60247: LD_VAR 0 8
60251: PPUSH
60252: LD_INT 1
60254: PPUSH
60255: LD_INT 4
60257: PPUSH
60258: CALL_OW 273
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_VAR 0 7
60271: PPUSH
60272: LD_INT 2
60274: PPUSH
60275: LD_INT 4
60277: PPUSH
60278: CALL_OW 272
60282: PUSH
60283: LD_VAR 0 8
60287: PPUSH
60288: LD_INT 2
60290: PPUSH
60291: LD_INT 4
60293: PPUSH
60294: CALL_OW 273
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_VAR 0 7
60307: PPUSH
60308: LD_INT 3
60310: PPUSH
60311: LD_INT 4
60313: PPUSH
60314: CALL_OW 272
60318: PUSH
60319: LD_VAR 0 8
60323: PPUSH
60324: LD_INT 3
60326: PPUSH
60327: LD_INT 4
60329: PPUSH
60330: CALL_OW 273
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_VAR 0 7
60343: PPUSH
60344: LD_INT 4
60346: PPUSH
60347: LD_INT 4
60349: PPUSH
60350: CALL_OW 272
60354: PUSH
60355: LD_VAR 0 8
60359: PPUSH
60360: LD_INT 4
60362: PPUSH
60363: LD_INT 4
60365: PPUSH
60366: CALL_OW 273
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_VAR 0 7
60379: PPUSH
60380: LD_INT 5
60382: PPUSH
60383: LD_INT 4
60385: PPUSH
60386: CALL_OW 272
60390: PUSH
60391: LD_VAR 0 8
60395: PPUSH
60396: LD_INT 5
60398: PPUSH
60399: LD_INT 4
60401: PPUSH
60402: CALL_OW 273
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// for i = tmp downto 1 do
60419: LD_ADDR_VAR 0 4
60423: PUSH
60424: DOUBLE
60425: LD_VAR 0 6
60429: INC
60430: ST_TO_ADDR
60431: LD_INT 1
60433: PUSH
60434: FOR_DOWNTO
60435: IFFALSE 60536
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60437: LD_VAR 0 6
60441: PUSH
60442: LD_VAR 0 4
60446: ARRAY
60447: PUSH
60448: LD_INT 1
60450: ARRAY
60451: PPUSH
60452: LD_VAR 0 6
60456: PUSH
60457: LD_VAR 0 4
60461: ARRAY
60462: PUSH
60463: LD_INT 2
60465: ARRAY
60466: PPUSH
60467: CALL_OW 488
60471: NOT
60472: PUSH
60473: LD_VAR 0 6
60477: PUSH
60478: LD_VAR 0 4
60482: ARRAY
60483: PUSH
60484: LD_INT 1
60486: ARRAY
60487: PPUSH
60488: LD_VAR 0 6
60492: PUSH
60493: LD_VAR 0 4
60497: ARRAY
60498: PUSH
60499: LD_INT 2
60501: ARRAY
60502: PPUSH
60503: CALL_OW 428
60507: PUSH
60508: LD_INT 0
60510: NONEQUAL
60511: OR
60512: IFFALSE 60534
// tmp := Delete ( tmp , i ) ;
60514: LD_ADDR_VAR 0 6
60518: PUSH
60519: LD_VAR 0 6
60523: PPUSH
60524: LD_VAR 0 4
60528: PPUSH
60529: CALL_OW 3
60533: ST_TO_ADDR
60534: GO 60434
60536: POP
60537: POP
// j := GetClosestHex ( unit , tmp ) ;
60538: LD_ADDR_VAR 0 5
60542: PUSH
60543: LD_VAR 0 1
60547: PPUSH
60548: LD_VAR 0 6
60552: PPUSH
60553: CALL 59829 0 2
60557: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60558: LD_VAR 0 1
60562: PPUSH
60563: LD_VAR 0 5
60567: PUSH
60568: LD_INT 1
60570: ARRAY
60571: PPUSH
60572: LD_VAR 0 5
60576: PUSH
60577: LD_INT 2
60579: ARRAY
60580: PPUSH
60581: CALL_OW 111
// end ;
60585: LD_VAR 0 3
60589: RET
// export function PrepareApemanSoldier ( ) ; begin
60590: LD_INT 0
60592: PPUSH
// uc_nation := 0 ;
60593: LD_ADDR_OWVAR 21
60597: PUSH
60598: LD_INT 0
60600: ST_TO_ADDR
// hc_sex := sex_male ;
60601: LD_ADDR_OWVAR 27
60605: PUSH
60606: LD_INT 1
60608: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60609: LD_ADDR_OWVAR 28
60613: PUSH
60614: LD_INT 15
60616: ST_TO_ADDR
// hc_gallery :=  ;
60617: LD_ADDR_OWVAR 33
60621: PUSH
60622: LD_STRING 
60624: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60625: LD_ADDR_OWVAR 31
60629: PUSH
60630: LD_INT 0
60632: PPUSH
60633: LD_INT 3
60635: PPUSH
60636: CALL_OW 12
60640: PUSH
60641: LD_INT 0
60643: PPUSH
60644: LD_INT 3
60646: PPUSH
60647: CALL_OW 12
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: ST_TO_ADDR
// end ;
60664: LD_VAR 0 1
60668: RET
// export function PrepareApemanEngineer ( ) ; begin
60669: LD_INT 0
60671: PPUSH
// uc_nation := 0 ;
60672: LD_ADDR_OWVAR 21
60676: PUSH
60677: LD_INT 0
60679: ST_TO_ADDR
// hc_sex := sex_male ;
60680: LD_ADDR_OWVAR 27
60684: PUSH
60685: LD_INT 1
60687: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60688: LD_ADDR_OWVAR 28
60692: PUSH
60693: LD_INT 16
60695: ST_TO_ADDR
// hc_gallery :=  ;
60696: LD_ADDR_OWVAR 33
60700: PUSH
60701: LD_STRING 
60703: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60704: LD_ADDR_OWVAR 31
60708: PUSH
60709: LD_INT 0
60711: PPUSH
60712: LD_INT 3
60714: PPUSH
60715: CALL_OW 12
60719: PUSH
60720: LD_INT 0
60722: PPUSH
60723: LD_INT 3
60725: PPUSH
60726: CALL_OW 12
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: ST_TO_ADDR
// end ;
60743: LD_VAR 0 1
60747: RET
// export function PrepareApeman ( agressivity ) ; begin
60748: LD_INT 0
60750: PPUSH
// uc_side := 0 ;
60751: LD_ADDR_OWVAR 20
60755: PUSH
60756: LD_INT 0
60758: ST_TO_ADDR
// uc_nation := 0 ;
60759: LD_ADDR_OWVAR 21
60763: PUSH
60764: LD_INT 0
60766: ST_TO_ADDR
// hc_sex := sex_male ;
60767: LD_ADDR_OWVAR 27
60771: PUSH
60772: LD_INT 1
60774: ST_TO_ADDR
// hc_class := class_apeman ;
60775: LD_ADDR_OWVAR 28
60779: PUSH
60780: LD_INT 12
60782: ST_TO_ADDR
// hc_gallery :=  ;
60783: LD_ADDR_OWVAR 33
60787: PUSH
60788: LD_STRING 
60790: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60791: LD_ADDR_OWVAR 35
60795: PUSH
60796: LD_VAR 0 1
60800: NEG
60801: PPUSH
60802: LD_VAR 0 1
60806: PPUSH
60807: CALL_OW 12
60811: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60812: LD_ADDR_OWVAR 31
60816: PUSH
60817: LD_INT 0
60819: PPUSH
60820: LD_INT 3
60822: PPUSH
60823: CALL_OW 12
60827: PUSH
60828: LD_INT 0
60830: PPUSH
60831: LD_INT 3
60833: PPUSH
60834: CALL_OW 12
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: ST_TO_ADDR
// end ;
60851: LD_VAR 0 2
60855: RET
// export function PrepareTiger ( agressivity ) ; begin
60856: LD_INT 0
60858: PPUSH
// uc_side := 0 ;
60859: LD_ADDR_OWVAR 20
60863: PUSH
60864: LD_INT 0
60866: ST_TO_ADDR
// uc_nation := 0 ;
60867: LD_ADDR_OWVAR 21
60871: PUSH
60872: LD_INT 0
60874: ST_TO_ADDR
// hc_class := class_tiger ;
60875: LD_ADDR_OWVAR 28
60879: PUSH
60880: LD_INT 14
60882: ST_TO_ADDR
// hc_gallery :=  ;
60883: LD_ADDR_OWVAR 33
60887: PUSH
60888: LD_STRING 
60890: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60891: LD_ADDR_OWVAR 35
60895: PUSH
60896: LD_VAR 0 1
60900: NEG
60901: PPUSH
60902: LD_VAR 0 1
60906: PPUSH
60907: CALL_OW 12
60911: ST_TO_ADDR
// end ;
60912: LD_VAR 0 2
60916: RET
// export function PrepareEnchidna ( ) ; begin
60917: LD_INT 0
60919: PPUSH
// uc_side := 0 ;
60920: LD_ADDR_OWVAR 20
60924: PUSH
60925: LD_INT 0
60927: ST_TO_ADDR
// uc_nation := 0 ;
60928: LD_ADDR_OWVAR 21
60932: PUSH
60933: LD_INT 0
60935: ST_TO_ADDR
// hc_class := class_baggie ;
60936: LD_ADDR_OWVAR 28
60940: PUSH
60941: LD_INT 13
60943: ST_TO_ADDR
// hc_gallery :=  ;
60944: LD_ADDR_OWVAR 33
60948: PUSH
60949: LD_STRING 
60951: ST_TO_ADDR
// end ;
60952: LD_VAR 0 1
60956: RET
// export function PrepareFrog ( ) ; begin
60957: LD_INT 0
60959: PPUSH
// uc_side := 0 ;
60960: LD_ADDR_OWVAR 20
60964: PUSH
60965: LD_INT 0
60967: ST_TO_ADDR
// uc_nation := 0 ;
60968: LD_ADDR_OWVAR 21
60972: PUSH
60973: LD_INT 0
60975: ST_TO_ADDR
// hc_class := class_frog ;
60976: LD_ADDR_OWVAR 28
60980: PUSH
60981: LD_INT 19
60983: ST_TO_ADDR
// hc_gallery :=  ;
60984: LD_ADDR_OWVAR 33
60988: PUSH
60989: LD_STRING 
60991: ST_TO_ADDR
// end ;
60992: LD_VAR 0 1
60996: RET
// export function PrepareFish ( ) ; begin
60997: LD_INT 0
60999: PPUSH
// uc_side := 0 ;
61000: LD_ADDR_OWVAR 20
61004: PUSH
61005: LD_INT 0
61007: ST_TO_ADDR
// uc_nation := 0 ;
61008: LD_ADDR_OWVAR 21
61012: PUSH
61013: LD_INT 0
61015: ST_TO_ADDR
// hc_class := class_fish ;
61016: LD_ADDR_OWVAR 28
61020: PUSH
61021: LD_INT 20
61023: ST_TO_ADDR
// hc_gallery :=  ;
61024: LD_ADDR_OWVAR 33
61028: PUSH
61029: LD_STRING 
61031: ST_TO_ADDR
// end ;
61032: LD_VAR 0 1
61036: RET
// export function PrepareBird ( ) ; begin
61037: LD_INT 0
61039: PPUSH
// uc_side := 0 ;
61040: LD_ADDR_OWVAR 20
61044: PUSH
61045: LD_INT 0
61047: ST_TO_ADDR
// uc_nation := 0 ;
61048: LD_ADDR_OWVAR 21
61052: PUSH
61053: LD_INT 0
61055: ST_TO_ADDR
// hc_class := class_phororhacos ;
61056: LD_ADDR_OWVAR 28
61060: PUSH
61061: LD_INT 18
61063: ST_TO_ADDR
// hc_gallery :=  ;
61064: LD_ADDR_OWVAR 33
61068: PUSH
61069: LD_STRING 
61071: ST_TO_ADDR
// end ;
61072: LD_VAR 0 1
61076: RET
// export function PrepareHorse ( ) ; begin
61077: LD_INT 0
61079: PPUSH
// uc_side := 0 ;
61080: LD_ADDR_OWVAR 20
61084: PUSH
61085: LD_INT 0
61087: ST_TO_ADDR
// uc_nation := 0 ;
61088: LD_ADDR_OWVAR 21
61092: PUSH
61093: LD_INT 0
61095: ST_TO_ADDR
// hc_class := class_horse ;
61096: LD_ADDR_OWVAR 28
61100: PUSH
61101: LD_INT 21
61103: ST_TO_ADDR
// hc_gallery :=  ;
61104: LD_ADDR_OWVAR 33
61108: PUSH
61109: LD_STRING 
61111: ST_TO_ADDR
// end ;
61112: LD_VAR 0 1
61116: RET
// export function PrepareMastodont ( ) ; begin
61117: LD_INT 0
61119: PPUSH
// uc_side := 0 ;
61120: LD_ADDR_OWVAR 20
61124: PUSH
61125: LD_INT 0
61127: ST_TO_ADDR
// uc_nation := 0 ;
61128: LD_ADDR_OWVAR 21
61132: PUSH
61133: LD_INT 0
61135: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61136: LD_ADDR_OWVAR 37
61140: PUSH
61141: LD_INT 31
61143: ST_TO_ADDR
// vc_control := control_rider ;
61144: LD_ADDR_OWVAR 38
61148: PUSH
61149: LD_INT 4
61151: ST_TO_ADDR
// end ;
61152: LD_VAR 0 1
61156: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61157: LD_INT 0
61159: PPUSH
61160: PPUSH
61161: PPUSH
// uc_side = 0 ;
61162: LD_ADDR_OWVAR 20
61166: PUSH
61167: LD_INT 0
61169: ST_TO_ADDR
// uc_nation = 0 ;
61170: LD_ADDR_OWVAR 21
61174: PUSH
61175: LD_INT 0
61177: ST_TO_ADDR
// InitHc_All ( ) ;
61178: CALL_OW 584
// InitVc ;
61182: CALL_OW 20
// if mastodonts then
61186: LD_VAR 0 6
61190: IFFALSE 61257
// for i = 1 to mastodonts do
61192: LD_ADDR_VAR 0 11
61196: PUSH
61197: DOUBLE
61198: LD_INT 1
61200: DEC
61201: ST_TO_ADDR
61202: LD_VAR 0 6
61206: PUSH
61207: FOR_TO
61208: IFFALSE 61255
// begin vc_chassis := 31 ;
61210: LD_ADDR_OWVAR 37
61214: PUSH
61215: LD_INT 31
61217: ST_TO_ADDR
// vc_control := control_rider ;
61218: LD_ADDR_OWVAR 38
61222: PUSH
61223: LD_INT 4
61225: ST_TO_ADDR
// animal := CreateVehicle ;
61226: LD_ADDR_VAR 0 12
61230: PUSH
61231: CALL_OW 45
61235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61236: LD_VAR 0 12
61240: PPUSH
61241: LD_VAR 0 8
61245: PPUSH
61246: LD_INT 0
61248: PPUSH
61249: CALL 63385 0 3
// end ;
61253: GO 61207
61255: POP
61256: POP
// if horses then
61257: LD_VAR 0 5
61261: IFFALSE 61328
// for i = 1 to horses do
61263: LD_ADDR_VAR 0 11
61267: PUSH
61268: DOUBLE
61269: LD_INT 1
61271: DEC
61272: ST_TO_ADDR
61273: LD_VAR 0 5
61277: PUSH
61278: FOR_TO
61279: IFFALSE 61326
// begin hc_class := 21 ;
61281: LD_ADDR_OWVAR 28
61285: PUSH
61286: LD_INT 21
61288: ST_TO_ADDR
// hc_gallery :=  ;
61289: LD_ADDR_OWVAR 33
61293: PUSH
61294: LD_STRING 
61296: ST_TO_ADDR
// animal := CreateHuman ;
61297: LD_ADDR_VAR 0 12
61301: PUSH
61302: CALL_OW 44
61306: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61307: LD_VAR 0 12
61311: PPUSH
61312: LD_VAR 0 8
61316: PPUSH
61317: LD_INT 0
61319: PPUSH
61320: CALL 63385 0 3
// end ;
61324: GO 61278
61326: POP
61327: POP
// if birds then
61328: LD_VAR 0 1
61332: IFFALSE 61399
// for i = 1 to birds do
61334: LD_ADDR_VAR 0 11
61338: PUSH
61339: DOUBLE
61340: LD_INT 1
61342: DEC
61343: ST_TO_ADDR
61344: LD_VAR 0 1
61348: PUSH
61349: FOR_TO
61350: IFFALSE 61397
// begin hc_class := 18 ;
61352: LD_ADDR_OWVAR 28
61356: PUSH
61357: LD_INT 18
61359: ST_TO_ADDR
// hc_gallery =  ;
61360: LD_ADDR_OWVAR 33
61364: PUSH
61365: LD_STRING 
61367: ST_TO_ADDR
// animal := CreateHuman ;
61368: LD_ADDR_VAR 0 12
61372: PUSH
61373: CALL_OW 44
61377: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61378: LD_VAR 0 12
61382: PPUSH
61383: LD_VAR 0 8
61387: PPUSH
61388: LD_INT 0
61390: PPUSH
61391: CALL 63385 0 3
// end ;
61395: GO 61349
61397: POP
61398: POP
// if tigers then
61399: LD_VAR 0 2
61403: IFFALSE 61487
// for i = 1 to tigers do
61405: LD_ADDR_VAR 0 11
61409: PUSH
61410: DOUBLE
61411: LD_INT 1
61413: DEC
61414: ST_TO_ADDR
61415: LD_VAR 0 2
61419: PUSH
61420: FOR_TO
61421: IFFALSE 61485
// begin hc_class = class_tiger ;
61423: LD_ADDR_OWVAR 28
61427: PUSH
61428: LD_INT 14
61430: ST_TO_ADDR
// hc_gallery =  ;
61431: LD_ADDR_OWVAR 33
61435: PUSH
61436: LD_STRING 
61438: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61439: LD_ADDR_OWVAR 35
61443: PUSH
61444: LD_INT 7
61446: NEG
61447: PPUSH
61448: LD_INT 7
61450: PPUSH
61451: CALL_OW 12
61455: ST_TO_ADDR
// animal := CreateHuman ;
61456: LD_ADDR_VAR 0 12
61460: PUSH
61461: CALL_OW 44
61465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61466: LD_VAR 0 12
61470: PPUSH
61471: LD_VAR 0 8
61475: PPUSH
61476: LD_INT 0
61478: PPUSH
61479: CALL 63385 0 3
// end ;
61483: GO 61420
61485: POP
61486: POP
// if apemans then
61487: LD_VAR 0 3
61491: IFFALSE 61614
// for i = 1 to apemans do
61493: LD_ADDR_VAR 0 11
61497: PUSH
61498: DOUBLE
61499: LD_INT 1
61501: DEC
61502: ST_TO_ADDR
61503: LD_VAR 0 3
61507: PUSH
61508: FOR_TO
61509: IFFALSE 61612
// begin hc_class = class_apeman ;
61511: LD_ADDR_OWVAR 28
61515: PUSH
61516: LD_INT 12
61518: ST_TO_ADDR
// hc_gallery =  ;
61519: LD_ADDR_OWVAR 33
61523: PUSH
61524: LD_STRING 
61526: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61527: LD_ADDR_OWVAR 35
61531: PUSH
61532: LD_INT 2
61534: NEG
61535: PPUSH
61536: LD_INT 2
61538: PPUSH
61539: CALL_OW 12
61543: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61544: LD_ADDR_OWVAR 31
61548: PUSH
61549: LD_INT 1
61551: PPUSH
61552: LD_INT 3
61554: PPUSH
61555: CALL_OW 12
61559: PUSH
61560: LD_INT 1
61562: PPUSH
61563: LD_INT 3
61565: PPUSH
61566: CALL_OW 12
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: ST_TO_ADDR
// animal := CreateHuman ;
61583: LD_ADDR_VAR 0 12
61587: PUSH
61588: CALL_OW 44
61592: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61593: LD_VAR 0 12
61597: PPUSH
61598: LD_VAR 0 8
61602: PPUSH
61603: LD_INT 0
61605: PPUSH
61606: CALL 63385 0 3
// end ;
61610: GO 61508
61612: POP
61613: POP
// if enchidnas then
61614: LD_VAR 0 4
61618: IFFALSE 61685
// for i = 1 to enchidnas do
61620: LD_ADDR_VAR 0 11
61624: PUSH
61625: DOUBLE
61626: LD_INT 1
61628: DEC
61629: ST_TO_ADDR
61630: LD_VAR 0 4
61634: PUSH
61635: FOR_TO
61636: IFFALSE 61683
// begin hc_class = 13 ;
61638: LD_ADDR_OWVAR 28
61642: PUSH
61643: LD_INT 13
61645: ST_TO_ADDR
// hc_gallery =  ;
61646: LD_ADDR_OWVAR 33
61650: PUSH
61651: LD_STRING 
61653: ST_TO_ADDR
// animal := CreateHuman ;
61654: LD_ADDR_VAR 0 12
61658: PUSH
61659: CALL_OW 44
61663: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61664: LD_VAR 0 12
61668: PPUSH
61669: LD_VAR 0 8
61673: PPUSH
61674: LD_INT 0
61676: PPUSH
61677: CALL 63385 0 3
// end ;
61681: GO 61635
61683: POP
61684: POP
// if fishes then
61685: LD_VAR 0 7
61689: IFFALSE 61756
// for i = 1 to fishes do
61691: LD_ADDR_VAR 0 11
61695: PUSH
61696: DOUBLE
61697: LD_INT 1
61699: DEC
61700: ST_TO_ADDR
61701: LD_VAR 0 7
61705: PUSH
61706: FOR_TO
61707: IFFALSE 61754
// begin hc_class = 20 ;
61709: LD_ADDR_OWVAR 28
61713: PUSH
61714: LD_INT 20
61716: ST_TO_ADDR
// hc_gallery =  ;
61717: LD_ADDR_OWVAR 33
61721: PUSH
61722: LD_STRING 
61724: ST_TO_ADDR
// animal := CreateHuman ;
61725: LD_ADDR_VAR 0 12
61729: PUSH
61730: CALL_OW 44
61734: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61735: LD_VAR 0 12
61739: PPUSH
61740: LD_VAR 0 9
61744: PPUSH
61745: LD_INT 0
61747: PPUSH
61748: CALL 63385 0 3
// end ;
61752: GO 61706
61754: POP
61755: POP
// end ;
61756: LD_VAR 0 10
61760: RET
// export function WantHeal ( sci , unit ) ; begin
61761: LD_INT 0
61763: PPUSH
// if GetTaskList ( sci ) > 0 then
61764: LD_VAR 0 1
61768: PPUSH
61769: CALL_OW 437
61773: PUSH
61774: LD_INT 0
61776: GREATER
61777: IFFALSE 61847
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61779: LD_VAR 0 1
61783: PPUSH
61784: CALL_OW 437
61788: PUSH
61789: LD_INT 1
61791: ARRAY
61792: PUSH
61793: LD_INT 1
61795: ARRAY
61796: PUSH
61797: LD_STRING l
61799: EQUAL
61800: PUSH
61801: LD_VAR 0 1
61805: PPUSH
61806: CALL_OW 437
61810: PUSH
61811: LD_INT 1
61813: ARRAY
61814: PUSH
61815: LD_INT 4
61817: ARRAY
61818: PUSH
61819: LD_VAR 0 2
61823: EQUAL
61824: AND
61825: IFFALSE 61837
// result := true else
61827: LD_ADDR_VAR 0 3
61831: PUSH
61832: LD_INT 1
61834: ST_TO_ADDR
61835: GO 61845
// result := false ;
61837: LD_ADDR_VAR 0 3
61841: PUSH
61842: LD_INT 0
61844: ST_TO_ADDR
// end else
61845: GO 61855
// result := false ;
61847: LD_ADDR_VAR 0 3
61851: PUSH
61852: LD_INT 0
61854: ST_TO_ADDR
// end ;
61855: LD_VAR 0 3
61859: RET
// export function HealTarget ( sci ) ; begin
61860: LD_INT 0
61862: PPUSH
// if not sci then
61863: LD_VAR 0 1
61867: NOT
61868: IFFALSE 61872
// exit ;
61870: GO 61937
// result := 0 ;
61872: LD_ADDR_VAR 0 2
61876: PUSH
61877: LD_INT 0
61879: ST_TO_ADDR
// if GetTaskList ( sci ) then
61880: LD_VAR 0 1
61884: PPUSH
61885: CALL_OW 437
61889: IFFALSE 61937
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61891: LD_VAR 0 1
61895: PPUSH
61896: CALL_OW 437
61900: PUSH
61901: LD_INT 1
61903: ARRAY
61904: PUSH
61905: LD_INT 1
61907: ARRAY
61908: PUSH
61909: LD_STRING l
61911: EQUAL
61912: IFFALSE 61937
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61914: LD_ADDR_VAR 0 2
61918: PUSH
61919: LD_VAR 0 1
61923: PPUSH
61924: CALL_OW 437
61928: PUSH
61929: LD_INT 1
61931: ARRAY
61932: PUSH
61933: LD_INT 4
61935: ARRAY
61936: ST_TO_ADDR
// end ;
61937: LD_VAR 0 2
61941: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61942: LD_INT 0
61944: PPUSH
61945: PPUSH
61946: PPUSH
61947: PPUSH
// if not base_units then
61948: LD_VAR 0 1
61952: NOT
61953: IFFALSE 61957
// exit ;
61955: GO 62044
// result := false ;
61957: LD_ADDR_VAR 0 2
61961: PUSH
61962: LD_INT 0
61964: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61965: LD_ADDR_VAR 0 5
61969: PUSH
61970: LD_VAR 0 1
61974: PPUSH
61975: LD_INT 21
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PPUSH
61985: CALL_OW 72
61989: ST_TO_ADDR
// if not tmp then
61990: LD_VAR 0 5
61994: NOT
61995: IFFALSE 61999
// exit ;
61997: GO 62044
// for i in tmp do
61999: LD_ADDR_VAR 0 3
62003: PUSH
62004: LD_VAR 0 5
62008: PUSH
62009: FOR_IN
62010: IFFALSE 62042
// begin result := EnemyInRange ( i , 22 ) ;
62012: LD_ADDR_VAR 0 2
62016: PUSH
62017: LD_VAR 0 3
62021: PPUSH
62022: LD_INT 22
62024: PPUSH
62025: CALL 59631 0 2
62029: ST_TO_ADDR
// if result then
62030: LD_VAR 0 2
62034: IFFALSE 62040
// exit ;
62036: POP
62037: POP
62038: GO 62044
// end ;
62040: GO 62009
62042: POP
62043: POP
// end ;
62044: LD_VAR 0 2
62048: RET
// export function FilterByTag ( units , tag ) ; begin
62049: LD_INT 0
62051: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62052: LD_ADDR_VAR 0 3
62056: PUSH
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_INT 120
62064: PUSH
62065: LD_VAR 0 2
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PPUSH
62074: CALL_OW 72
62078: ST_TO_ADDR
// end ;
62079: LD_VAR 0 3
62083: RET
// export function IsDriver ( un ) ; begin
62084: LD_INT 0
62086: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62087: LD_ADDR_VAR 0 2
62091: PUSH
62092: LD_VAR 0 1
62096: PUSH
62097: LD_INT 55
62099: PUSH
62100: EMPTY
62101: LIST
62102: PPUSH
62103: CALL_OW 69
62107: IN
62108: ST_TO_ADDR
// end ;
62109: LD_VAR 0 2
62113: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62114: LD_INT 0
62116: PPUSH
62117: PPUSH
// list := [ ] ;
62118: LD_ADDR_VAR 0 5
62122: PUSH
62123: EMPTY
62124: ST_TO_ADDR
// case d of 0 :
62125: LD_VAR 0 3
62129: PUSH
62130: LD_INT 0
62132: DOUBLE
62133: EQUAL
62134: IFTRUE 62138
62136: GO 62271
62138: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62139: LD_ADDR_VAR 0 5
62143: PUSH
62144: LD_VAR 0 1
62148: PUSH
62149: LD_INT 4
62151: MINUS
62152: PUSH
62153: LD_VAR 0 2
62157: PUSH
62158: LD_INT 4
62160: MINUS
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: LIST
62169: PUSH
62170: LD_VAR 0 1
62174: PUSH
62175: LD_INT 3
62177: MINUS
62178: PUSH
62179: LD_VAR 0 2
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: LIST
62191: PUSH
62192: LD_VAR 0 1
62196: PUSH
62197: LD_INT 4
62199: PLUS
62200: PUSH
62201: LD_VAR 0 2
62205: PUSH
62206: LD_INT 4
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: PUSH
62214: LD_VAR 0 1
62218: PUSH
62219: LD_INT 3
62221: PLUS
62222: PUSH
62223: LD_VAR 0 2
62227: PUSH
62228: LD_INT 3
62230: PLUS
62231: PUSH
62232: LD_INT 5
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: LIST
62239: PUSH
62240: LD_VAR 0 1
62244: PUSH
62245: LD_VAR 0 2
62249: PUSH
62250: LD_INT 4
62252: PLUS
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: LIST
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: ST_TO_ADDR
// end ; 1 :
62269: GO 62969
62271: LD_INT 1
62273: DOUBLE
62274: EQUAL
62275: IFTRUE 62279
62277: GO 62412
62279: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62280: LD_ADDR_VAR 0 5
62284: PUSH
62285: LD_VAR 0 1
62289: PUSH
62290: LD_VAR 0 2
62294: PUSH
62295: LD_INT 4
62297: MINUS
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: PUSH
62307: LD_VAR 0 1
62311: PUSH
62312: LD_INT 3
62314: MINUS
62315: PUSH
62316: LD_VAR 0 2
62320: PUSH
62321: LD_INT 3
62323: MINUS
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: LIST
62332: PUSH
62333: LD_VAR 0 1
62337: PUSH
62338: LD_INT 4
62340: MINUS
62341: PUSH
62342: LD_VAR 0 2
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: PUSH
62355: LD_VAR 0 1
62359: PUSH
62360: LD_VAR 0 2
62364: PUSH
62365: LD_INT 3
62367: PLUS
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: PUSH
62377: LD_VAR 0 1
62381: PUSH
62382: LD_INT 4
62384: PLUS
62385: PUSH
62386: LD_VAR 0 2
62390: PUSH
62391: LD_INT 4
62393: PLUS
62394: PUSH
62395: LD_INT 5
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: LIST
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: ST_TO_ADDR
// end ; 2 :
62410: GO 62969
62412: LD_INT 2
62414: DOUBLE
62415: EQUAL
62416: IFTRUE 62420
62418: GO 62549
62420: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62421: LD_ADDR_VAR 0 5
62425: PUSH
62426: LD_VAR 0 1
62430: PUSH
62431: LD_VAR 0 2
62435: PUSH
62436: LD_INT 3
62438: MINUS
62439: PUSH
62440: LD_INT 3
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: LIST
62447: PUSH
62448: LD_VAR 0 1
62452: PUSH
62453: LD_INT 4
62455: PLUS
62456: PUSH
62457: LD_VAR 0 2
62461: PUSH
62462: LD_INT 4
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: LIST
62469: PUSH
62470: LD_VAR 0 1
62474: PUSH
62475: LD_VAR 0 2
62479: PUSH
62480: LD_INT 4
62482: PLUS
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: PUSH
62492: LD_VAR 0 1
62496: PUSH
62497: LD_INT 3
62499: MINUS
62500: PUSH
62501: LD_VAR 0 2
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: PUSH
62514: LD_VAR 0 1
62518: PUSH
62519: LD_INT 4
62521: MINUS
62522: PUSH
62523: LD_VAR 0 2
62527: PUSH
62528: LD_INT 4
62530: MINUS
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: ST_TO_ADDR
// end ; 3 :
62547: GO 62969
62549: LD_INT 3
62551: DOUBLE
62552: EQUAL
62553: IFTRUE 62557
62555: GO 62690
62557: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62558: LD_ADDR_VAR 0 5
62562: PUSH
62563: LD_VAR 0 1
62567: PUSH
62568: LD_INT 3
62570: PLUS
62571: PUSH
62572: LD_VAR 0 2
62576: PUSH
62577: LD_INT 4
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: PUSH
62585: LD_VAR 0 1
62589: PUSH
62590: LD_INT 4
62592: PLUS
62593: PUSH
62594: LD_VAR 0 2
62598: PUSH
62599: LD_INT 4
62601: PLUS
62602: PUSH
62603: LD_INT 5
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: LIST
62610: PUSH
62611: LD_VAR 0 1
62615: PUSH
62616: LD_INT 4
62618: MINUS
62619: PUSH
62620: LD_VAR 0 2
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: PUSH
62633: LD_VAR 0 1
62637: PUSH
62638: LD_VAR 0 2
62642: PUSH
62643: LD_INT 4
62645: MINUS
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: LIST
62654: PUSH
62655: LD_VAR 0 1
62659: PUSH
62660: LD_INT 3
62662: MINUS
62663: PUSH
62664: LD_VAR 0 2
62668: PUSH
62669: LD_INT 3
62671: MINUS
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: ST_TO_ADDR
// end ; 4 :
62688: GO 62969
62690: LD_INT 4
62692: DOUBLE
62693: EQUAL
62694: IFTRUE 62698
62696: GO 62831
62698: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62699: LD_ADDR_VAR 0 5
62703: PUSH
62704: LD_VAR 0 1
62708: PUSH
62709: LD_VAR 0 2
62713: PUSH
62714: LD_INT 4
62716: PLUS
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: LIST
62725: PUSH
62726: LD_VAR 0 1
62730: PUSH
62731: LD_INT 3
62733: PLUS
62734: PUSH
62735: LD_VAR 0 2
62739: PUSH
62740: LD_INT 3
62742: PLUS
62743: PUSH
62744: LD_INT 5
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: LIST
62751: PUSH
62752: LD_VAR 0 1
62756: PUSH
62757: LD_INT 4
62759: PLUS
62760: PUSH
62761: LD_VAR 0 2
62765: PUSH
62766: LD_INT 4
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: LIST
62773: PUSH
62774: LD_VAR 0 1
62778: PUSH
62779: LD_VAR 0 2
62783: PUSH
62784: LD_INT 3
62786: MINUS
62787: PUSH
62788: LD_INT 3
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: LIST
62795: PUSH
62796: LD_VAR 0 1
62800: PUSH
62801: LD_INT 4
62803: MINUS
62804: PUSH
62805: LD_VAR 0 2
62809: PUSH
62810: LD_INT 4
62812: MINUS
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: ST_TO_ADDR
// end ; 5 :
62829: GO 62969
62831: LD_INT 5
62833: DOUBLE
62834: EQUAL
62835: IFTRUE 62839
62837: GO 62968
62839: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62840: LD_ADDR_VAR 0 5
62844: PUSH
62845: LD_VAR 0 1
62849: PUSH
62850: LD_INT 4
62852: MINUS
62853: PUSH
62854: LD_VAR 0 2
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: LIST
62866: PUSH
62867: LD_VAR 0 1
62871: PUSH
62872: LD_VAR 0 2
62876: PUSH
62877: LD_INT 4
62879: MINUS
62880: PUSH
62881: LD_INT 3
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: PUSH
62889: LD_VAR 0 1
62893: PUSH
62894: LD_INT 4
62896: PLUS
62897: PUSH
62898: LD_VAR 0 2
62902: PUSH
62903: LD_INT 4
62905: PLUS
62906: PUSH
62907: LD_INT 5
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: PUSH
62915: LD_VAR 0 1
62919: PUSH
62920: LD_INT 3
62922: PLUS
62923: PUSH
62924: LD_VAR 0 2
62928: PUSH
62929: LD_INT 4
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: LIST
62936: PUSH
62937: LD_VAR 0 1
62941: PUSH
62942: LD_VAR 0 2
62946: PUSH
62947: LD_INT 3
62949: PLUS
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: ST_TO_ADDR
// end ; end ;
62966: GO 62969
62968: POP
// result := list ;
62969: LD_ADDR_VAR 0 4
62973: PUSH
62974: LD_VAR 0 5
62978: ST_TO_ADDR
// end ;
62979: LD_VAR 0 4
62983: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62984: LD_INT 0
62986: PPUSH
62987: PPUSH
62988: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62989: LD_VAR 0 1
62993: NOT
62994: PUSH
62995: LD_VAR 0 2
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: LD_INT 3
63008: PUSH
63009: LD_INT 4
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: IN
63018: NOT
63019: OR
63020: IFFALSE 63024
// exit ;
63022: GO 63107
// tmp := [ ] ;
63024: LD_ADDR_VAR 0 5
63028: PUSH
63029: EMPTY
63030: ST_TO_ADDR
// for i in units do
63031: LD_ADDR_VAR 0 4
63035: PUSH
63036: LD_VAR 0 1
63040: PUSH
63041: FOR_IN
63042: IFFALSE 63076
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63044: LD_ADDR_VAR 0 5
63048: PUSH
63049: LD_VAR 0 5
63053: PPUSH
63054: LD_VAR 0 4
63058: PPUSH
63059: LD_VAR 0 2
63063: PPUSH
63064: CALL_OW 259
63068: PPUSH
63069: CALL 64467 0 2
63073: ST_TO_ADDR
63074: GO 63041
63076: POP
63077: POP
// if not tmp then
63078: LD_VAR 0 5
63082: NOT
63083: IFFALSE 63087
// exit ;
63085: GO 63107
// result := SortListByListDesc ( units , tmp ) ;
63087: LD_ADDR_VAR 0 3
63091: PUSH
63092: LD_VAR 0 1
63096: PPUSH
63097: LD_VAR 0 5
63101: PPUSH
63102: CALL_OW 77
63106: ST_TO_ADDR
// end ;
63107: LD_VAR 0 3
63111: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63112: LD_INT 0
63114: PPUSH
63115: PPUSH
63116: PPUSH
// result := false ;
63117: LD_ADDR_VAR 0 3
63121: PUSH
63122: LD_INT 0
63124: ST_TO_ADDR
// if not building then
63125: LD_VAR 0 2
63129: NOT
63130: IFFALSE 63134
// exit ;
63132: GO 63272
// x := GetX ( building ) ;
63134: LD_ADDR_VAR 0 4
63138: PUSH
63139: LD_VAR 0 2
63143: PPUSH
63144: CALL_OW 250
63148: ST_TO_ADDR
// y := GetY ( building ) ;
63149: LD_ADDR_VAR 0 5
63153: PUSH
63154: LD_VAR 0 2
63158: PPUSH
63159: CALL_OW 251
63163: ST_TO_ADDR
// if not x or not y then
63164: LD_VAR 0 4
63168: NOT
63169: PUSH
63170: LD_VAR 0 5
63174: NOT
63175: OR
63176: IFFALSE 63180
// exit ;
63178: GO 63272
// if GetTaskList ( unit ) then
63180: LD_VAR 0 1
63184: PPUSH
63185: CALL_OW 437
63189: IFFALSE 63272
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63191: LD_STRING e
63193: PUSH
63194: LD_VAR 0 1
63198: PPUSH
63199: CALL_OW 437
63203: PUSH
63204: LD_INT 1
63206: ARRAY
63207: PUSH
63208: LD_INT 1
63210: ARRAY
63211: EQUAL
63212: PUSH
63213: LD_VAR 0 4
63217: PUSH
63218: LD_VAR 0 1
63222: PPUSH
63223: CALL_OW 437
63227: PUSH
63228: LD_INT 1
63230: ARRAY
63231: PUSH
63232: LD_INT 2
63234: ARRAY
63235: EQUAL
63236: AND
63237: PUSH
63238: LD_VAR 0 5
63242: PUSH
63243: LD_VAR 0 1
63247: PPUSH
63248: CALL_OW 437
63252: PUSH
63253: LD_INT 1
63255: ARRAY
63256: PUSH
63257: LD_INT 3
63259: ARRAY
63260: EQUAL
63261: AND
63262: IFFALSE 63272
// result := true end ;
63264: LD_ADDR_VAR 0 3
63268: PUSH
63269: LD_INT 1
63271: ST_TO_ADDR
// end ;
63272: LD_VAR 0 3
63276: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63277: LD_INT 0
63279: PPUSH
// result := false ;
63280: LD_ADDR_VAR 0 4
63284: PUSH
63285: LD_INT 0
63287: ST_TO_ADDR
// if GetTaskList ( unit ) then
63288: LD_VAR 0 1
63292: PPUSH
63293: CALL_OW 437
63297: IFFALSE 63380
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63299: LD_STRING M
63301: PUSH
63302: LD_VAR 0 1
63306: PPUSH
63307: CALL_OW 437
63311: PUSH
63312: LD_INT 1
63314: ARRAY
63315: PUSH
63316: LD_INT 1
63318: ARRAY
63319: EQUAL
63320: PUSH
63321: LD_VAR 0 2
63325: PUSH
63326: LD_VAR 0 1
63330: PPUSH
63331: CALL_OW 437
63335: PUSH
63336: LD_INT 1
63338: ARRAY
63339: PUSH
63340: LD_INT 2
63342: ARRAY
63343: EQUAL
63344: AND
63345: PUSH
63346: LD_VAR 0 3
63350: PUSH
63351: LD_VAR 0 1
63355: PPUSH
63356: CALL_OW 437
63360: PUSH
63361: LD_INT 1
63363: ARRAY
63364: PUSH
63365: LD_INT 3
63367: ARRAY
63368: EQUAL
63369: AND
63370: IFFALSE 63380
// result := true ;
63372: LD_ADDR_VAR 0 4
63376: PUSH
63377: LD_INT 1
63379: ST_TO_ADDR
// end ; end ;
63380: LD_VAR 0 4
63384: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63385: LD_INT 0
63387: PPUSH
63388: PPUSH
63389: PPUSH
63390: PPUSH
// if not unit or not area then
63391: LD_VAR 0 1
63395: NOT
63396: PUSH
63397: LD_VAR 0 2
63401: NOT
63402: OR
63403: IFFALSE 63407
// exit ;
63405: GO 63570
// tmp := AreaToList ( area , i ) ;
63407: LD_ADDR_VAR 0 6
63411: PUSH
63412: LD_VAR 0 2
63416: PPUSH
63417: LD_VAR 0 5
63421: PPUSH
63422: CALL_OW 517
63426: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63427: LD_ADDR_VAR 0 5
63431: PUSH
63432: DOUBLE
63433: LD_INT 1
63435: DEC
63436: ST_TO_ADDR
63437: LD_VAR 0 6
63441: PUSH
63442: LD_INT 1
63444: ARRAY
63445: PUSH
63446: FOR_TO
63447: IFFALSE 63568
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63449: LD_ADDR_VAR 0 7
63453: PUSH
63454: LD_VAR 0 6
63458: PUSH
63459: LD_INT 1
63461: ARRAY
63462: PUSH
63463: LD_VAR 0 5
63467: ARRAY
63468: PUSH
63469: LD_VAR 0 6
63473: PUSH
63474: LD_INT 2
63476: ARRAY
63477: PUSH
63478: LD_VAR 0 5
63482: ARRAY
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
63488: LD_INT 92
63490: PUSH
63491: LD_VAR 0 7
63495: PUSH
63496: LD_INT 1
63498: ARRAY
63499: PUSH
63500: LD_VAR 0 7
63504: PUSH
63505: LD_INT 2
63507: ARRAY
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: PPUSH
63518: CALL_OW 69
63522: PUSH
63523: LD_INT 0
63525: EQUAL
63526: IFFALSE 63566
// begin PlaceUnitArea ( unit , area , mode ) ;
63528: LD_VAR 0 1
63532: PPUSH
63533: LD_VAR 0 2
63537: PPUSH
63538: LD_VAR 0 3
63542: PPUSH
63543: CALL_OW 49
// result := IsPlaced ( unit ) ;
63547: LD_ADDR_VAR 0 4
63551: PUSH
63552: LD_VAR 0 1
63556: PPUSH
63557: CALL_OW 305
63561: ST_TO_ADDR
// exit ;
63562: POP
63563: POP
63564: GO 63570
// end ; end ;
63566: GO 63446
63568: POP
63569: POP
// end ;
63570: LD_VAR 0 4
63574: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63575: LD_INT 0
63577: PPUSH
63578: PPUSH
63579: PPUSH
// if not side or side > 8 then
63580: LD_VAR 0 1
63584: NOT
63585: PUSH
63586: LD_VAR 0 1
63590: PUSH
63591: LD_INT 8
63593: GREATER
63594: OR
63595: IFFALSE 63599
// exit ;
63597: GO 63786
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63599: LD_ADDR_VAR 0 4
63603: PUSH
63604: LD_INT 22
63606: PUSH
63607: LD_VAR 0 1
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 21
63618: PUSH
63619: LD_INT 3
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PPUSH
63630: CALL_OW 69
63634: ST_TO_ADDR
// if not tmp then
63635: LD_VAR 0 4
63639: NOT
63640: IFFALSE 63644
// exit ;
63642: GO 63786
// enable_addtolog := true ;
63644: LD_ADDR_OWVAR 81
63648: PUSH
63649: LD_INT 1
63651: ST_TO_ADDR
// AddToLog ( [ ) ;
63652: LD_STRING [
63654: PPUSH
63655: CALL_OW 561
// for i in tmp do
63659: LD_ADDR_VAR 0 3
63663: PUSH
63664: LD_VAR 0 4
63668: PUSH
63669: FOR_IN
63670: IFFALSE 63777
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63672: LD_STRING [
63674: PUSH
63675: LD_VAR 0 3
63679: PPUSH
63680: CALL_OW 266
63684: STR
63685: PUSH
63686: LD_STRING , 
63688: STR
63689: PUSH
63690: LD_VAR 0 3
63694: PPUSH
63695: CALL_OW 250
63699: STR
63700: PUSH
63701: LD_STRING , 
63703: STR
63704: PUSH
63705: LD_VAR 0 3
63709: PPUSH
63710: CALL_OW 251
63714: STR
63715: PUSH
63716: LD_STRING , 
63718: STR
63719: PUSH
63720: LD_VAR 0 3
63724: PPUSH
63725: CALL_OW 254
63729: STR
63730: PUSH
63731: LD_STRING , 
63733: STR
63734: PUSH
63735: LD_VAR 0 3
63739: PPUSH
63740: LD_INT 1
63742: PPUSH
63743: CALL_OW 268
63747: STR
63748: PUSH
63749: LD_STRING , 
63751: STR
63752: PUSH
63753: LD_VAR 0 3
63757: PPUSH
63758: LD_INT 2
63760: PPUSH
63761: CALL_OW 268
63765: STR
63766: PUSH
63767: LD_STRING ],
63769: STR
63770: PPUSH
63771: CALL_OW 561
// end ;
63775: GO 63669
63777: POP
63778: POP
// AddToLog ( ]; ) ;
63779: LD_STRING ];
63781: PPUSH
63782: CALL_OW 561
// end ;
63786: LD_VAR 0 2
63790: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63791: LD_INT 0
63793: PPUSH
63794: PPUSH
63795: PPUSH
63796: PPUSH
63797: PPUSH
// if not area or not rate or not max then
63798: LD_VAR 0 1
63802: NOT
63803: PUSH
63804: LD_VAR 0 2
63808: NOT
63809: OR
63810: PUSH
63811: LD_VAR 0 4
63815: NOT
63816: OR
63817: IFFALSE 63821
// exit ;
63819: GO 64010
// while 1 do
63821: LD_INT 1
63823: IFFALSE 64010
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63825: LD_ADDR_VAR 0 9
63829: PUSH
63830: LD_VAR 0 1
63834: PPUSH
63835: LD_INT 1
63837: PPUSH
63838: CALL_OW 287
63842: PUSH
63843: LD_INT 10
63845: MUL
63846: ST_TO_ADDR
// r := rate / 10 ;
63847: LD_ADDR_VAR 0 7
63851: PUSH
63852: LD_VAR 0 2
63856: PUSH
63857: LD_INT 10
63859: DIVREAL
63860: ST_TO_ADDR
// time := 1 1$00 ;
63861: LD_ADDR_VAR 0 8
63865: PUSH
63866: LD_INT 2100
63868: ST_TO_ADDR
// if amount < min then
63869: LD_VAR 0 9
63873: PUSH
63874: LD_VAR 0 3
63878: LESS
63879: IFFALSE 63897
// r := r * 2 else
63881: LD_ADDR_VAR 0 7
63885: PUSH
63886: LD_VAR 0 7
63890: PUSH
63891: LD_INT 2
63893: MUL
63894: ST_TO_ADDR
63895: GO 63923
// if amount > max then
63897: LD_VAR 0 9
63901: PUSH
63902: LD_VAR 0 4
63906: GREATER
63907: IFFALSE 63923
// r := r / 2 ;
63909: LD_ADDR_VAR 0 7
63913: PUSH
63914: LD_VAR 0 7
63918: PUSH
63919: LD_INT 2
63921: DIVREAL
63922: ST_TO_ADDR
// time := time / r ;
63923: LD_ADDR_VAR 0 8
63927: PUSH
63928: LD_VAR 0 8
63932: PUSH
63933: LD_VAR 0 7
63937: DIVREAL
63938: ST_TO_ADDR
// if time < 0 then
63939: LD_VAR 0 8
63943: PUSH
63944: LD_INT 0
63946: LESS
63947: IFFALSE 63964
// time := time * - 1 ;
63949: LD_ADDR_VAR 0 8
63953: PUSH
63954: LD_VAR 0 8
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: MUL
63963: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63964: LD_VAR 0 8
63968: PUSH
63969: LD_INT 35
63971: PPUSH
63972: LD_INT 875
63974: PPUSH
63975: CALL_OW 12
63979: PLUS
63980: PPUSH
63981: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63985: LD_INT 1
63987: PPUSH
63988: LD_INT 5
63990: PPUSH
63991: CALL_OW 12
63995: PPUSH
63996: LD_VAR 0 1
64000: PPUSH
64001: LD_INT 1
64003: PPUSH
64004: CALL_OW 55
// end ;
64008: GO 63821
// end ;
64010: LD_VAR 0 5
64014: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64015: LD_INT 0
64017: PPUSH
64018: PPUSH
64019: PPUSH
64020: PPUSH
64021: PPUSH
64022: PPUSH
64023: PPUSH
64024: PPUSH
// if not turrets or not factories then
64025: LD_VAR 0 1
64029: NOT
64030: PUSH
64031: LD_VAR 0 2
64035: NOT
64036: OR
64037: IFFALSE 64041
// exit ;
64039: GO 64348
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64041: LD_ADDR_VAR 0 10
64045: PUSH
64046: LD_INT 5
64048: PUSH
64049: LD_INT 6
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 2
64058: PUSH
64059: LD_INT 4
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 3
64068: PUSH
64069: LD_INT 5
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 24
64083: PUSH
64084: LD_INT 25
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 23
64093: PUSH
64094: LD_INT 27
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 42
64107: PUSH
64108: LD_INT 43
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 44
64117: PUSH
64118: LD_INT 46
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 45
64127: PUSH
64128: LD_INT 47
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: LIST
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: LIST
64144: ST_TO_ADDR
// result := [ ] ;
64145: LD_ADDR_VAR 0 3
64149: PUSH
64150: EMPTY
64151: ST_TO_ADDR
// for i in turrets do
64152: LD_ADDR_VAR 0 4
64156: PUSH
64157: LD_VAR 0 1
64161: PUSH
64162: FOR_IN
64163: IFFALSE 64346
// begin nat := GetNation ( i ) ;
64165: LD_ADDR_VAR 0 7
64169: PUSH
64170: LD_VAR 0 4
64174: PPUSH
64175: CALL_OW 248
64179: ST_TO_ADDR
// weapon := 0 ;
64180: LD_ADDR_VAR 0 8
64184: PUSH
64185: LD_INT 0
64187: ST_TO_ADDR
// if not nat then
64188: LD_VAR 0 7
64192: NOT
64193: IFFALSE 64197
// continue ;
64195: GO 64162
// for j in list [ nat ] do
64197: LD_ADDR_VAR 0 5
64201: PUSH
64202: LD_VAR 0 10
64206: PUSH
64207: LD_VAR 0 7
64211: ARRAY
64212: PUSH
64213: FOR_IN
64214: IFFALSE 64255
// if GetBWeapon ( i ) = j [ 1 ] then
64216: LD_VAR 0 4
64220: PPUSH
64221: CALL_OW 269
64225: PUSH
64226: LD_VAR 0 5
64230: PUSH
64231: LD_INT 1
64233: ARRAY
64234: EQUAL
64235: IFFALSE 64253
// begin weapon := j [ 2 ] ;
64237: LD_ADDR_VAR 0 8
64241: PUSH
64242: LD_VAR 0 5
64246: PUSH
64247: LD_INT 2
64249: ARRAY
64250: ST_TO_ADDR
// break ;
64251: GO 64255
// end ;
64253: GO 64213
64255: POP
64256: POP
// if not weapon then
64257: LD_VAR 0 8
64261: NOT
64262: IFFALSE 64266
// continue ;
64264: GO 64162
// for k in factories do
64266: LD_ADDR_VAR 0 6
64270: PUSH
64271: LD_VAR 0 2
64275: PUSH
64276: FOR_IN
64277: IFFALSE 64342
// begin weapons := AvailableWeaponList ( k ) ;
64279: LD_ADDR_VAR 0 9
64283: PUSH
64284: LD_VAR 0 6
64288: PPUSH
64289: CALL_OW 478
64293: ST_TO_ADDR
// if not weapons then
64294: LD_VAR 0 9
64298: NOT
64299: IFFALSE 64303
// continue ;
64301: GO 64276
// if weapon in weapons then
64303: LD_VAR 0 8
64307: PUSH
64308: LD_VAR 0 9
64312: IN
64313: IFFALSE 64340
// begin result := [ i , weapon ] ;
64315: LD_ADDR_VAR 0 3
64319: PUSH
64320: LD_VAR 0 4
64324: PUSH
64325: LD_VAR 0 8
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: ST_TO_ADDR
// exit ;
64334: POP
64335: POP
64336: POP
64337: POP
64338: GO 64348
// end ; end ;
64340: GO 64276
64342: POP
64343: POP
// end ;
64344: GO 64162
64346: POP
64347: POP
// end ;
64348: LD_VAR 0 3
64352: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64353: LD_INT 0
64355: PPUSH
// if not side or side > 8 then
64356: LD_VAR 0 3
64360: NOT
64361: PUSH
64362: LD_VAR 0 3
64366: PUSH
64367: LD_INT 8
64369: GREATER
64370: OR
64371: IFFALSE 64375
// exit ;
64373: GO 64434
// if not range then
64375: LD_VAR 0 4
64379: NOT
64380: IFFALSE 64391
// range := - 12 ;
64382: LD_ADDR_VAR 0 4
64386: PUSH
64387: LD_INT 12
64389: NEG
64390: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64391: LD_VAR 0 1
64395: PPUSH
64396: LD_VAR 0 2
64400: PPUSH
64401: LD_VAR 0 3
64405: PPUSH
64406: LD_VAR 0 4
64410: PPUSH
64411: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64415: LD_VAR 0 1
64419: PPUSH
64420: LD_VAR 0 2
64424: PPUSH
64425: LD_VAR 0 3
64429: PPUSH
64430: CALL_OW 331
// end ;
64434: LD_VAR 0 5
64438: RET
// export function Video ( mode ) ; begin
64439: LD_INT 0
64441: PPUSH
// ingame_video = mode ;
64442: LD_ADDR_OWVAR 52
64446: PUSH
64447: LD_VAR 0 1
64451: ST_TO_ADDR
// interface_hidden = mode ;
64452: LD_ADDR_OWVAR 54
64456: PUSH
64457: LD_VAR 0 1
64461: ST_TO_ADDR
// end ;
64462: LD_VAR 0 2
64466: RET
// export function Join ( array , element ) ; begin
64467: LD_INT 0
64469: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64470: LD_ADDR_VAR 0 3
64474: PUSH
64475: LD_VAR 0 1
64479: PPUSH
64480: LD_VAR 0 1
64484: PUSH
64485: LD_INT 1
64487: PLUS
64488: PPUSH
64489: LD_VAR 0 2
64493: PPUSH
64494: CALL_OW 1
64498: ST_TO_ADDR
// end ;
64499: LD_VAR 0 3
64503: RET
// export function JoinUnion ( array , element ) ; begin
64504: LD_INT 0
64506: PPUSH
// result := array union element ;
64507: LD_ADDR_VAR 0 3
64511: PUSH
64512: LD_VAR 0 1
64516: PUSH
64517: LD_VAR 0 2
64521: UNION
64522: ST_TO_ADDR
// end ;
64523: LD_VAR 0 3
64527: RET
// export function GetBehemoths ( side ) ; begin
64528: LD_INT 0
64530: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64531: LD_ADDR_VAR 0 2
64535: PUSH
64536: LD_INT 22
64538: PUSH
64539: LD_VAR 0 1
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 31
64550: PUSH
64551: LD_INT 25
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PPUSH
64562: CALL_OW 69
64566: ST_TO_ADDR
// end ;
64567: LD_VAR 0 2
64571: RET
// export function Shuffle ( array ) ; var i , index ; begin
64572: LD_INT 0
64574: PPUSH
64575: PPUSH
64576: PPUSH
// result := [ ] ;
64577: LD_ADDR_VAR 0 2
64581: PUSH
64582: EMPTY
64583: ST_TO_ADDR
// if not array then
64584: LD_VAR 0 1
64588: NOT
64589: IFFALSE 64593
// exit ;
64591: GO 64692
// Randomize ;
64593: CALL_OW 10
// for i = array downto 1 do
64597: LD_ADDR_VAR 0 3
64601: PUSH
64602: DOUBLE
64603: LD_VAR 0 1
64607: INC
64608: ST_TO_ADDR
64609: LD_INT 1
64611: PUSH
64612: FOR_DOWNTO
64613: IFFALSE 64690
// begin index := rand ( 1 , array ) ;
64615: LD_ADDR_VAR 0 4
64619: PUSH
64620: LD_INT 1
64622: PPUSH
64623: LD_VAR 0 1
64627: PPUSH
64628: CALL_OW 12
64632: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64633: LD_ADDR_VAR 0 2
64637: PUSH
64638: LD_VAR 0 2
64642: PPUSH
64643: LD_VAR 0 2
64647: PUSH
64648: LD_INT 1
64650: PLUS
64651: PPUSH
64652: LD_VAR 0 1
64656: PUSH
64657: LD_VAR 0 4
64661: ARRAY
64662: PPUSH
64663: CALL_OW 2
64667: ST_TO_ADDR
// array := Delete ( array , index ) ;
64668: LD_ADDR_VAR 0 1
64672: PUSH
64673: LD_VAR 0 1
64677: PPUSH
64678: LD_VAR 0 4
64682: PPUSH
64683: CALL_OW 3
64687: ST_TO_ADDR
// end ;
64688: GO 64612
64690: POP
64691: POP
// end ;
64692: LD_VAR 0 2
64696: RET
// export function GetBaseMaterials ( base ) ; begin
64697: LD_INT 0
64699: PPUSH
// result := [ 0 , 0 , 0 ] ;
64700: LD_ADDR_VAR 0 2
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: ST_TO_ADDR
// if not base then
64719: LD_VAR 0 1
64723: NOT
64724: IFFALSE 64728
// exit ;
64726: GO 64777
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64728: LD_ADDR_VAR 0 2
64732: PUSH
64733: LD_VAR 0 1
64737: PPUSH
64738: LD_INT 1
64740: PPUSH
64741: CALL_OW 275
64745: PUSH
64746: LD_VAR 0 1
64750: PPUSH
64751: LD_INT 2
64753: PPUSH
64754: CALL_OW 275
64758: PUSH
64759: LD_VAR 0 1
64763: PPUSH
64764: LD_INT 3
64766: PPUSH
64767: CALL_OW 275
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: LIST
64776: ST_TO_ADDR
// end ;
64777: LD_VAR 0 2
64781: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64782: LD_INT 0
64784: PPUSH
64785: PPUSH
// result := array ;
64786: LD_ADDR_VAR 0 3
64790: PUSH
64791: LD_VAR 0 1
64795: ST_TO_ADDR
// if size >= result then
64796: LD_VAR 0 2
64800: PUSH
64801: LD_VAR 0 3
64805: GREATEREQUAL
64806: IFFALSE 64810
// exit ;
64808: GO 64860
// if size then
64810: LD_VAR 0 2
64814: IFFALSE 64860
// for i := array downto size do
64816: LD_ADDR_VAR 0 4
64820: PUSH
64821: DOUBLE
64822: LD_VAR 0 1
64826: INC
64827: ST_TO_ADDR
64828: LD_VAR 0 2
64832: PUSH
64833: FOR_DOWNTO
64834: IFFALSE 64858
// result := Delete ( result , result ) ;
64836: LD_ADDR_VAR 0 3
64840: PUSH
64841: LD_VAR 0 3
64845: PPUSH
64846: LD_VAR 0 3
64850: PPUSH
64851: CALL_OW 3
64855: ST_TO_ADDR
64856: GO 64833
64858: POP
64859: POP
// end ;
64860: LD_VAR 0 3
64864: RET
// export function ComExit ( unit ) ; var tmp ; begin
64865: LD_INT 0
64867: PPUSH
64868: PPUSH
// if not IsInUnit ( unit ) then
64869: LD_VAR 0 1
64873: PPUSH
64874: CALL_OW 310
64878: NOT
64879: IFFALSE 64883
// exit ;
64881: GO 64943
// tmp := IsInUnit ( unit ) ;
64883: LD_ADDR_VAR 0 3
64887: PUSH
64888: LD_VAR 0 1
64892: PPUSH
64893: CALL_OW 310
64897: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64898: LD_VAR 0 3
64902: PPUSH
64903: CALL_OW 247
64907: PUSH
64908: LD_INT 2
64910: EQUAL
64911: IFFALSE 64924
// ComExitVehicle ( unit ) else
64913: LD_VAR 0 1
64917: PPUSH
64918: CALL_OW 121
64922: GO 64933
// ComExitBuilding ( unit ) ;
64924: LD_VAR 0 1
64928: PPUSH
64929: CALL_OW 122
// result := tmp ;
64933: LD_ADDR_VAR 0 2
64937: PUSH
64938: LD_VAR 0 3
64942: ST_TO_ADDR
// end ;
64943: LD_VAR 0 2
64947: RET
// export function ComExitAll ( units ) ; var i ; begin
64948: LD_INT 0
64950: PPUSH
64951: PPUSH
// if not units then
64952: LD_VAR 0 1
64956: NOT
64957: IFFALSE 64961
// exit ;
64959: GO 64987
// for i in units do
64961: LD_ADDR_VAR 0 3
64965: PUSH
64966: LD_VAR 0 1
64970: PUSH
64971: FOR_IN
64972: IFFALSE 64985
// ComExit ( i ) ;
64974: LD_VAR 0 3
64978: PPUSH
64979: CALL 64865 0 1
64983: GO 64971
64985: POP
64986: POP
// end ;
64987: LD_VAR 0 2
64991: RET
// export function ResetHc ; begin
64992: LD_INT 0
64994: PPUSH
// InitHc ;
64995: CALL_OW 19
// hc_importance := 0 ;
64999: LD_ADDR_OWVAR 32
65003: PUSH
65004: LD_INT 0
65006: ST_TO_ADDR
// end ;
65007: LD_VAR 0 1
65011: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65012: LD_INT 0
65014: PPUSH
65015: PPUSH
65016: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65017: LD_ADDR_VAR 0 6
65021: PUSH
65022: LD_VAR 0 1
65026: PUSH
65027: LD_VAR 0 3
65031: PLUS
65032: PUSH
65033: LD_INT 2
65035: DIV
65036: ST_TO_ADDR
// if _x < 0 then
65037: LD_VAR 0 6
65041: PUSH
65042: LD_INT 0
65044: LESS
65045: IFFALSE 65062
// _x := _x * - 1 ;
65047: LD_ADDR_VAR 0 6
65051: PUSH
65052: LD_VAR 0 6
65056: PUSH
65057: LD_INT 1
65059: NEG
65060: MUL
65061: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65062: LD_ADDR_VAR 0 7
65066: PUSH
65067: LD_VAR 0 2
65071: PUSH
65072: LD_VAR 0 4
65076: PLUS
65077: PUSH
65078: LD_INT 2
65080: DIV
65081: ST_TO_ADDR
// if _y < 0 then
65082: LD_VAR 0 7
65086: PUSH
65087: LD_INT 0
65089: LESS
65090: IFFALSE 65107
// _y := _y * - 1 ;
65092: LD_ADDR_VAR 0 7
65096: PUSH
65097: LD_VAR 0 7
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: MUL
65106: ST_TO_ADDR
// result := [ _x , _y ] ;
65107: LD_ADDR_VAR 0 5
65111: PUSH
65112: LD_VAR 0 6
65116: PUSH
65117: LD_VAR 0 7
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: ST_TO_ADDR
// end ;
65126: LD_VAR 0 5
65130: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65131: LD_INT 0
65133: PPUSH
65134: PPUSH
65135: PPUSH
65136: PPUSH
// task := GetTaskList ( unit ) ;
65137: LD_ADDR_VAR 0 7
65141: PUSH
65142: LD_VAR 0 1
65146: PPUSH
65147: CALL_OW 437
65151: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65152: LD_VAR 0 7
65156: NOT
65157: PUSH
65158: LD_VAR 0 1
65162: PPUSH
65163: LD_VAR 0 2
65167: PPUSH
65168: CALL_OW 308
65172: NOT
65173: AND
65174: IFFALSE 65178
// exit ;
65176: GO 65296
// if IsInArea ( unit , area ) then
65178: LD_VAR 0 1
65182: PPUSH
65183: LD_VAR 0 2
65187: PPUSH
65188: CALL_OW 308
65192: IFFALSE 65210
// begin ComMoveToArea ( unit , goAway ) ;
65194: LD_VAR 0 1
65198: PPUSH
65199: LD_VAR 0 3
65203: PPUSH
65204: CALL_OW 113
// exit ;
65208: GO 65296
// end ; if task [ 1 ] [ 1 ] <> M then
65210: LD_VAR 0 7
65214: PUSH
65215: LD_INT 1
65217: ARRAY
65218: PUSH
65219: LD_INT 1
65221: ARRAY
65222: PUSH
65223: LD_STRING M
65225: NONEQUAL
65226: IFFALSE 65230
// exit ;
65228: GO 65296
// x := task [ 1 ] [ 2 ] ;
65230: LD_ADDR_VAR 0 5
65234: PUSH
65235: LD_VAR 0 7
65239: PUSH
65240: LD_INT 1
65242: ARRAY
65243: PUSH
65244: LD_INT 2
65246: ARRAY
65247: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65248: LD_ADDR_VAR 0 6
65252: PUSH
65253: LD_VAR 0 7
65257: PUSH
65258: LD_INT 1
65260: ARRAY
65261: PUSH
65262: LD_INT 3
65264: ARRAY
65265: ST_TO_ADDR
// if InArea ( x , y , area ) then
65266: LD_VAR 0 5
65270: PPUSH
65271: LD_VAR 0 6
65275: PPUSH
65276: LD_VAR 0 2
65280: PPUSH
65281: CALL_OW 309
65285: IFFALSE 65296
// ComStop ( unit ) ;
65287: LD_VAR 0 1
65291: PPUSH
65292: CALL_OW 141
// end ;
65296: LD_VAR 0 4
65300: RET
// export function Abs ( value ) ; begin
65301: LD_INT 0
65303: PPUSH
// result := value ;
65304: LD_ADDR_VAR 0 2
65308: PUSH
65309: LD_VAR 0 1
65313: ST_TO_ADDR
// if value < 0 then
65314: LD_VAR 0 1
65318: PUSH
65319: LD_INT 0
65321: LESS
65322: IFFALSE 65339
// result := value * - 1 ;
65324: LD_ADDR_VAR 0 2
65328: PUSH
65329: LD_VAR 0 1
65333: PUSH
65334: LD_INT 1
65336: NEG
65337: MUL
65338: ST_TO_ADDR
// end ;
65339: LD_VAR 0 2
65343: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65344: LD_INT 0
65346: PPUSH
65347: PPUSH
65348: PPUSH
65349: PPUSH
65350: PPUSH
65351: PPUSH
65352: PPUSH
65353: PPUSH
// if not unit or not building then
65354: LD_VAR 0 1
65358: NOT
65359: PUSH
65360: LD_VAR 0 2
65364: NOT
65365: OR
65366: IFFALSE 65370
// exit ;
65368: GO 65596
// x := GetX ( building ) ;
65370: LD_ADDR_VAR 0 4
65374: PUSH
65375: LD_VAR 0 2
65379: PPUSH
65380: CALL_OW 250
65384: ST_TO_ADDR
// y := GetY ( building ) ;
65385: LD_ADDR_VAR 0 6
65389: PUSH
65390: LD_VAR 0 2
65394: PPUSH
65395: CALL_OW 251
65399: ST_TO_ADDR
// d := GetDir ( building ) ;
65400: LD_ADDR_VAR 0 8
65404: PUSH
65405: LD_VAR 0 2
65409: PPUSH
65410: CALL_OW 254
65414: ST_TO_ADDR
// r := 4 ;
65415: LD_ADDR_VAR 0 9
65419: PUSH
65420: LD_INT 4
65422: ST_TO_ADDR
// for i := 1 to 5 do
65423: LD_ADDR_VAR 0 10
65427: PUSH
65428: DOUBLE
65429: LD_INT 1
65431: DEC
65432: ST_TO_ADDR
65433: LD_INT 5
65435: PUSH
65436: FOR_TO
65437: IFFALSE 65594
// begin _x := ShiftX ( x , d , r + i ) ;
65439: LD_ADDR_VAR 0 5
65443: PUSH
65444: LD_VAR 0 4
65448: PPUSH
65449: LD_VAR 0 8
65453: PPUSH
65454: LD_VAR 0 9
65458: PUSH
65459: LD_VAR 0 10
65463: PLUS
65464: PPUSH
65465: CALL_OW 272
65469: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65470: LD_ADDR_VAR 0 7
65474: PUSH
65475: LD_VAR 0 6
65479: PPUSH
65480: LD_VAR 0 8
65484: PPUSH
65485: LD_VAR 0 9
65489: PUSH
65490: LD_VAR 0 10
65494: PLUS
65495: PPUSH
65496: CALL_OW 273
65500: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65501: LD_VAR 0 5
65505: PPUSH
65506: LD_VAR 0 7
65510: PPUSH
65511: CALL_OW 488
65515: PUSH
65516: LD_VAR 0 5
65520: PPUSH
65521: LD_VAR 0 7
65525: PPUSH
65526: CALL_OW 428
65530: PPUSH
65531: CALL_OW 247
65535: PUSH
65536: LD_INT 3
65538: PUSH
65539: LD_INT 2
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: IN
65546: NOT
65547: AND
65548: IFFALSE 65592
// begin ComMoveXY ( unit , _x , _y ) ;
65550: LD_VAR 0 1
65554: PPUSH
65555: LD_VAR 0 5
65559: PPUSH
65560: LD_VAR 0 7
65564: PPUSH
65565: CALL_OW 111
// result := [ _x , _y ] ;
65569: LD_ADDR_VAR 0 3
65573: PUSH
65574: LD_VAR 0 5
65578: PUSH
65579: LD_VAR 0 7
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: ST_TO_ADDR
// exit ;
65588: POP
65589: POP
65590: GO 65596
// end ; end ;
65592: GO 65436
65594: POP
65595: POP
// end ;
65596: LD_VAR 0 3
65600: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65601: LD_INT 0
65603: PPUSH
65604: PPUSH
65605: PPUSH
// result := 0 ;
65606: LD_ADDR_VAR 0 3
65610: PUSH
65611: LD_INT 0
65613: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65614: LD_VAR 0 1
65618: PUSH
65619: LD_INT 0
65621: LESS
65622: PUSH
65623: LD_VAR 0 1
65627: PUSH
65628: LD_INT 8
65630: GREATER
65631: OR
65632: PUSH
65633: LD_VAR 0 2
65637: PUSH
65638: LD_INT 0
65640: LESS
65641: OR
65642: PUSH
65643: LD_VAR 0 2
65647: PUSH
65648: LD_INT 8
65650: GREATER
65651: OR
65652: IFFALSE 65656
// exit ;
65654: GO 65731
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65656: LD_ADDR_VAR 0 4
65660: PUSH
65661: LD_INT 22
65663: PUSH
65664: LD_VAR 0 2
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PPUSH
65673: CALL_OW 69
65677: PUSH
65678: FOR_IN
65679: IFFALSE 65729
// begin un := UnitShoot ( i ) ;
65681: LD_ADDR_VAR 0 5
65685: PUSH
65686: LD_VAR 0 4
65690: PPUSH
65691: CALL_OW 504
65695: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65696: LD_VAR 0 5
65700: PPUSH
65701: CALL_OW 255
65705: PUSH
65706: LD_VAR 0 1
65710: EQUAL
65711: IFFALSE 65727
// begin result := un ;
65713: LD_ADDR_VAR 0 3
65717: PUSH
65718: LD_VAR 0 5
65722: ST_TO_ADDR
// exit ;
65723: POP
65724: POP
65725: GO 65731
// end ; end ;
65727: GO 65678
65729: POP
65730: POP
// end ;
65731: LD_VAR 0 3
65735: RET
// export function GetCargoBay ( units ) ; begin
65736: LD_INT 0
65738: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65739: LD_ADDR_VAR 0 2
65743: PUSH
65744: LD_VAR 0 1
65748: PPUSH
65749: LD_INT 2
65751: PUSH
65752: LD_INT 34
65754: PUSH
65755: LD_INT 12
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 34
65764: PUSH
65765: LD_INT 51
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 34
65774: PUSH
65775: LD_INT 32
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 34
65784: PUSH
65785: LD_INT 89
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: PPUSH
65799: CALL_OW 72
65803: ST_TO_ADDR
// end ;
65804: LD_VAR 0 2
65808: RET
// export function Negate ( value ) ; begin
65809: LD_INT 0
65811: PPUSH
// result := not value ;
65812: LD_ADDR_VAR 0 2
65816: PUSH
65817: LD_VAR 0 1
65821: NOT
65822: ST_TO_ADDR
// end ;
65823: LD_VAR 0 2
65827: RET
// export function Inc ( value ) ; begin
65828: LD_INT 0
65830: PPUSH
// result := value + 1 ;
65831: LD_ADDR_VAR 0 2
65835: PUSH
65836: LD_VAR 0 1
65840: PUSH
65841: LD_INT 1
65843: PLUS
65844: ST_TO_ADDR
// end ;
65845: LD_VAR 0 2
65849: RET
// export function Dec ( value ) ; begin
65850: LD_INT 0
65852: PPUSH
// result := value - 1 ;
65853: LD_ADDR_VAR 0 2
65857: PUSH
65858: LD_VAR 0 1
65862: PUSH
65863: LD_INT 1
65865: MINUS
65866: ST_TO_ADDR
// end ;
65867: LD_VAR 0 2
65871: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65872: LD_INT 0
65874: PPUSH
65875: PPUSH
65876: PPUSH
65877: PPUSH
65878: PPUSH
65879: PPUSH
65880: PPUSH
65881: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65882: LD_VAR 0 1
65886: PPUSH
65887: LD_VAR 0 2
65891: PPUSH
65892: CALL_OW 488
65896: NOT
65897: PUSH
65898: LD_VAR 0 3
65902: PPUSH
65903: LD_VAR 0 4
65907: PPUSH
65908: CALL_OW 488
65912: NOT
65913: OR
65914: IFFALSE 65927
// begin result := - 1 ;
65916: LD_ADDR_VAR 0 5
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: ST_TO_ADDR
// exit ;
65925: GO 66162
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65927: LD_ADDR_VAR 0 12
65931: PUSH
65932: LD_VAR 0 1
65936: PPUSH
65937: LD_VAR 0 2
65941: PPUSH
65942: LD_VAR 0 3
65946: PPUSH
65947: LD_VAR 0 4
65951: PPUSH
65952: CALL 65012 0 4
65956: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65957: LD_ADDR_VAR 0 11
65961: PUSH
65962: LD_VAR 0 1
65966: PPUSH
65967: LD_VAR 0 2
65971: PPUSH
65972: LD_VAR 0 12
65976: PUSH
65977: LD_INT 1
65979: ARRAY
65980: PPUSH
65981: LD_VAR 0 12
65985: PUSH
65986: LD_INT 2
65988: ARRAY
65989: PPUSH
65990: CALL_OW 298
65994: ST_TO_ADDR
// distance := 9999 ;
65995: LD_ADDR_VAR 0 10
65999: PUSH
66000: LD_INT 9999
66002: ST_TO_ADDR
// for i := 0 to 5 do
66003: LD_ADDR_VAR 0 6
66007: PUSH
66008: DOUBLE
66009: LD_INT 0
66011: DEC
66012: ST_TO_ADDR
66013: LD_INT 5
66015: PUSH
66016: FOR_TO
66017: IFFALSE 66160
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66019: LD_ADDR_VAR 0 7
66023: PUSH
66024: LD_VAR 0 1
66028: PPUSH
66029: LD_VAR 0 6
66033: PPUSH
66034: LD_VAR 0 11
66038: PPUSH
66039: CALL_OW 272
66043: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66044: LD_ADDR_VAR 0 8
66048: PUSH
66049: LD_VAR 0 2
66053: PPUSH
66054: LD_VAR 0 6
66058: PPUSH
66059: LD_VAR 0 11
66063: PPUSH
66064: CALL_OW 273
66068: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66069: LD_VAR 0 7
66073: PPUSH
66074: LD_VAR 0 8
66078: PPUSH
66079: CALL_OW 488
66083: NOT
66084: IFFALSE 66088
// continue ;
66086: GO 66016
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66088: LD_ADDR_VAR 0 9
66092: PUSH
66093: LD_VAR 0 12
66097: PUSH
66098: LD_INT 1
66100: ARRAY
66101: PPUSH
66102: LD_VAR 0 12
66106: PUSH
66107: LD_INT 2
66109: ARRAY
66110: PPUSH
66111: LD_VAR 0 7
66115: PPUSH
66116: LD_VAR 0 8
66120: PPUSH
66121: CALL_OW 298
66125: ST_TO_ADDR
// if tmp < distance then
66126: LD_VAR 0 9
66130: PUSH
66131: LD_VAR 0 10
66135: LESS
66136: IFFALSE 66158
// begin result := i ;
66138: LD_ADDR_VAR 0 5
66142: PUSH
66143: LD_VAR 0 6
66147: ST_TO_ADDR
// distance := tmp ;
66148: LD_ADDR_VAR 0 10
66152: PUSH
66153: LD_VAR 0 9
66157: ST_TO_ADDR
// end ; end ;
66158: GO 66016
66160: POP
66161: POP
// end ;
66162: LD_VAR 0 5
66166: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66167: LD_INT 0
66169: PPUSH
66170: PPUSH
// if not driver or not IsInUnit ( driver ) then
66171: LD_VAR 0 1
66175: NOT
66176: PUSH
66177: LD_VAR 0 1
66181: PPUSH
66182: CALL_OW 310
66186: NOT
66187: OR
66188: IFFALSE 66192
// exit ;
66190: GO 66282
// vehicle := IsInUnit ( driver ) ;
66192: LD_ADDR_VAR 0 3
66196: PUSH
66197: LD_VAR 0 1
66201: PPUSH
66202: CALL_OW 310
66206: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66207: LD_VAR 0 1
66211: PPUSH
66212: LD_STRING \
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: PUSH
66242: LD_STRING E
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_VAR 0 3
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PPUSH
66278: CALL_OW 446
// end ;
66282: LD_VAR 0 2
66286: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66287: LD_INT 0
66289: PPUSH
66290: PPUSH
// if not driver or not IsInUnit ( driver ) then
66291: LD_VAR 0 1
66295: NOT
66296: PUSH
66297: LD_VAR 0 1
66301: PPUSH
66302: CALL_OW 310
66306: NOT
66307: OR
66308: IFFALSE 66312
// exit ;
66310: GO 66402
// vehicle := IsInUnit ( driver ) ;
66312: LD_ADDR_VAR 0 3
66316: PUSH
66317: LD_VAR 0 1
66321: PPUSH
66322: CALL_OW 310
66326: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66327: LD_VAR 0 1
66331: PPUSH
66332: LD_STRING \
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: LD_INT 0
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: PUSH
66362: LD_STRING E
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_VAR 0 3
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PPUSH
66398: CALL_OW 447
// end ;
66402: LD_VAR 0 2
66406: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66407: LD_INT 0
66409: PPUSH
66410: PPUSH
66411: PPUSH
// tmp := [ ] ;
66412: LD_ADDR_VAR 0 5
66416: PUSH
66417: EMPTY
66418: ST_TO_ADDR
// for i in units do
66419: LD_ADDR_VAR 0 4
66423: PUSH
66424: LD_VAR 0 1
66428: PUSH
66429: FOR_IN
66430: IFFALSE 66468
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66432: LD_ADDR_VAR 0 5
66436: PUSH
66437: LD_VAR 0 5
66441: PPUSH
66442: LD_VAR 0 5
66446: PUSH
66447: LD_INT 1
66449: PLUS
66450: PPUSH
66451: LD_VAR 0 4
66455: PPUSH
66456: CALL_OW 256
66460: PPUSH
66461: CALL_OW 2
66465: ST_TO_ADDR
66466: GO 66429
66468: POP
66469: POP
// if not tmp then
66470: LD_VAR 0 5
66474: NOT
66475: IFFALSE 66479
// exit ;
66477: GO 66527
// if asc then
66479: LD_VAR 0 2
66483: IFFALSE 66507
// result := SortListByListAsc ( units , tmp ) else
66485: LD_ADDR_VAR 0 3
66489: PUSH
66490: LD_VAR 0 1
66494: PPUSH
66495: LD_VAR 0 5
66499: PPUSH
66500: CALL_OW 76
66504: ST_TO_ADDR
66505: GO 66527
// result := SortListByListDesc ( units , tmp ) ;
66507: LD_ADDR_VAR 0 3
66511: PUSH
66512: LD_VAR 0 1
66516: PPUSH
66517: LD_VAR 0 5
66521: PPUSH
66522: CALL_OW 77
66526: ST_TO_ADDR
// end ;
66527: LD_VAR 0 3
66531: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66532: LD_INT 0
66534: PPUSH
66535: PPUSH
// task := GetTaskList ( mech ) ;
66536: LD_ADDR_VAR 0 4
66540: PUSH
66541: LD_VAR 0 1
66545: PPUSH
66546: CALL_OW 437
66550: ST_TO_ADDR
// if not task then
66551: LD_VAR 0 4
66555: NOT
66556: IFFALSE 66560
// exit ;
66558: GO 66602
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66560: LD_ADDR_VAR 0 3
66564: PUSH
66565: LD_VAR 0 4
66569: PUSH
66570: LD_INT 1
66572: ARRAY
66573: PUSH
66574: LD_INT 1
66576: ARRAY
66577: PUSH
66578: LD_STRING r
66580: EQUAL
66581: PUSH
66582: LD_VAR 0 4
66586: PUSH
66587: LD_INT 1
66589: ARRAY
66590: PUSH
66591: LD_INT 4
66593: ARRAY
66594: PUSH
66595: LD_VAR 0 2
66599: EQUAL
66600: AND
66601: ST_TO_ADDR
// end ;
66602: LD_VAR 0 3
66606: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66607: LD_INT 0
66609: PPUSH
// SetDir ( unit , d ) ;
66610: LD_VAR 0 1
66614: PPUSH
66615: LD_VAR 0 4
66619: PPUSH
66620: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66624: LD_VAR 0 1
66628: PPUSH
66629: LD_VAR 0 2
66633: PPUSH
66634: LD_VAR 0 3
66638: PPUSH
66639: LD_VAR 0 5
66643: PPUSH
66644: CALL_OW 48
// end ;
66648: LD_VAR 0 6
66652: RET
// export function ToNaturalNumber ( number ) ; begin
66653: LD_INT 0
66655: PPUSH
// result := number div 1 ;
66656: LD_ADDR_VAR 0 2
66660: PUSH
66661: LD_VAR 0 1
66665: PUSH
66666: LD_INT 1
66668: DIV
66669: ST_TO_ADDR
// if number < 0 then
66670: LD_VAR 0 1
66674: PUSH
66675: LD_INT 0
66677: LESS
66678: IFFALSE 66688
// result := 0 ;
66680: LD_ADDR_VAR 0 2
66684: PUSH
66685: LD_INT 0
66687: ST_TO_ADDR
// end ;
66688: LD_VAR 0 2
66692: RET
// export function SortByClass ( units , class ) ; var un ; begin
66693: LD_INT 0
66695: PPUSH
66696: PPUSH
// if not units or not class then
66697: LD_VAR 0 1
66701: NOT
66702: PUSH
66703: LD_VAR 0 2
66707: NOT
66708: OR
66709: IFFALSE 66713
// exit ;
66711: GO 66808
// result := [ ] ;
66713: LD_ADDR_VAR 0 3
66717: PUSH
66718: EMPTY
66719: ST_TO_ADDR
// for un in units do
66720: LD_ADDR_VAR 0 4
66724: PUSH
66725: LD_VAR 0 1
66729: PUSH
66730: FOR_IN
66731: IFFALSE 66806
// if GetClass ( un ) = class then
66733: LD_VAR 0 4
66737: PPUSH
66738: CALL_OW 257
66742: PUSH
66743: LD_VAR 0 2
66747: EQUAL
66748: IFFALSE 66775
// result := Insert ( result , 1 , un ) else
66750: LD_ADDR_VAR 0 3
66754: PUSH
66755: LD_VAR 0 3
66759: PPUSH
66760: LD_INT 1
66762: PPUSH
66763: LD_VAR 0 4
66767: PPUSH
66768: CALL_OW 2
66772: ST_TO_ADDR
66773: GO 66804
// result := Replace ( result , result + 1 , un ) ;
66775: LD_ADDR_VAR 0 3
66779: PUSH
66780: LD_VAR 0 3
66784: PPUSH
66785: LD_VAR 0 3
66789: PUSH
66790: LD_INT 1
66792: PLUS
66793: PPUSH
66794: LD_VAR 0 4
66798: PPUSH
66799: CALL_OW 1
66803: ST_TO_ADDR
66804: GO 66730
66806: POP
66807: POP
// end ;
66808: LD_VAR 0 3
66812: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66813: LD_INT 0
66815: PPUSH
66816: PPUSH
66817: PPUSH
66818: PPUSH
66819: PPUSH
66820: PPUSH
66821: PPUSH
// result := [ ] ;
66822: LD_ADDR_VAR 0 4
66826: PUSH
66827: EMPTY
66828: ST_TO_ADDR
// if x - r < 0 then
66829: LD_VAR 0 1
66833: PUSH
66834: LD_VAR 0 3
66838: MINUS
66839: PUSH
66840: LD_INT 0
66842: LESS
66843: IFFALSE 66855
// min_x := 0 else
66845: LD_ADDR_VAR 0 8
66849: PUSH
66850: LD_INT 0
66852: ST_TO_ADDR
66853: GO 66871
// min_x := x - r ;
66855: LD_ADDR_VAR 0 8
66859: PUSH
66860: LD_VAR 0 1
66864: PUSH
66865: LD_VAR 0 3
66869: MINUS
66870: ST_TO_ADDR
// if y - r < 0 then
66871: LD_VAR 0 2
66875: PUSH
66876: LD_VAR 0 3
66880: MINUS
66881: PUSH
66882: LD_INT 0
66884: LESS
66885: IFFALSE 66897
// min_y := 0 else
66887: LD_ADDR_VAR 0 7
66891: PUSH
66892: LD_INT 0
66894: ST_TO_ADDR
66895: GO 66913
// min_y := y - r ;
66897: LD_ADDR_VAR 0 7
66901: PUSH
66902: LD_VAR 0 2
66906: PUSH
66907: LD_VAR 0 3
66911: MINUS
66912: ST_TO_ADDR
// max_x := x + r ;
66913: LD_ADDR_VAR 0 9
66917: PUSH
66918: LD_VAR 0 1
66922: PUSH
66923: LD_VAR 0 3
66927: PLUS
66928: ST_TO_ADDR
// max_y := y + r ;
66929: LD_ADDR_VAR 0 10
66933: PUSH
66934: LD_VAR 0 2
66938: PUSH
66939: LD_VAR 0 3
66943: PLUS
66944: ST_TO_ADDR
// for _x = min_x to max_x do
66945: LD_ADDR_VAR 0 5
66949: PUSH
66950: DOUBLE
66951: LD_VAR 0 8
66955: DEC
66956: ST_TO_ADDR
66957: LD_VAR 0 9
66961: PUSH
66962: FOR_TO
66963: IFFALSE 67064
// for _y = min_y to max_y do
66965: LD_ADDR_VAR 0 6
66969: PUSH
66970: DOUBLE
66971: LD_VAR 0 7
66975: DEC
66976: ST_TO_ADDR
66977: LD_VAR 0 10
66981: PUSH
66982: FOR_TO
66983: IFFALSE 67060
// begin if not ValidHex ( _x , _y ) then
66985: LD_VAR 0 5
66989: PPUSH
66990: LD_VAR 0 6
66994: PPUSH
66995: CALL_OW 488
66999: NOT
67000: IFFALSE 67004
// continue ;
67002: GO 66982
// if GetResourceTypeXY ( _x , _y ) then
67004: LD_VAR 0 5
67008: PPUSH
67009: LD_VAR 0 6
67013: PPUSH
67014: CALL_OW 283
67018: IFFALSE 67058
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67020: LD_ADDR_VAR 0 4
67024: PUSH
67025: LD_VAR 0 4
67029: PPUSH
67030: LD_VAR 0 4
67034: PUSH
67035: LD_INT 1
67037: PLUS
67038: PPUSH
67039: LD_VAR 0 5
67043: PUSH
67044: LD_VAR 0 6
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PPUSH
67053: CALL_OW 1
67057: ST_TO_ADDR
// end ;
67058: GO 66982
67060: POP
67061: POP
67062: GO 66962
67064: POP
67065: POP
// end ;
67066: LD_VAR 0 4
67070: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67071: LD_INT 0
67073: PPUSH
67074: PPUSH
67075: PPUSH
67076: PPUSH
67077: PPUSH
67078: PPUSH
67079: PPUSH
67080: PPUSH
// if not units then
67081: LD_VAR 0 1
67085: NOT
67086: IFFALSE 67090
// exit ;
67088: GO 67614
// result := UnitFilter ( units , [ f_ok ] ) ;
67090: LD_ADDR_VAR 0 3
67094: PUSH
67095: LD_VAR 0 1
67099: PPUSH
67100: LD_INT 50
67102: PUSH
67103: EMPTY
67104: LIST
67105: PPUSH
67106: CALL_OW 72
67110: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67111: LD_ADDR_VAR 0 8
67115: PUSH
67116: LD_VAR 0 1
67120: PUSH
67121: LD_INT 1
67123: ARRAY
67124: PPUSH
67125: CALL_OW 255
67129: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67130: LD_ADDR_VAR 0 10
67134: PUSH
67135: LD_INT 29
67137: PUSH
67138: LD_INT 91
67140: PUSH
67141: LD_INT 49
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: ST_TO_ADDR
// if not result then
67149: LD_VAR 0 3
67153: NOT
67154: IFFALSE 67158
// exit ;
67156: GO 67614
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67158: LD_ADDR_VAR 0 5
67162: PUSH
67163: LD_INT 81
67165: PUSH
67166: LD_VAR 0 8
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PPUSH
67175: CALL_OW 69
67179: ST_TO_ADDR
// for i in result do
67180: LD_ADDR_VAR 0 4
67184: PUSH
67185: LD_VAR 0 3
67189: PUSH
67190: FOR_IN
67191: IFFALSE 67612
// begin tag := GetTag ( i ) + 1 ;
67193: LD_ADDR_VAR 0 9
67197: PUSH
67198: LD_VAR 0 4
67202: PPUSH
67203: CALL_OW 110
67207: PUSH
67208: LD_INT 1
67210: PLUS
67211: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67212: LD_ADDR_VAR 0 7
67216: PUSH
67217: LD_VAR 0 4
67221: PPUSH
67222: CALL_OW 250
67226: PPUSH
67227: LD_VAR 0 4
67231: PPUSH
67232: CALL_OW 251
67236: PPUSH
67237: LD_INT 6
67239: PPUSH
67240: CALL 66813 0 3
67244: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67245: LD_VAR 0 4
67249: PPUSH
67250: CALL_OW 247
67254: PUSH
67255: LD_INT 2
67257: EQUAL
67258: PUSH
67259: LD_VAR 0 7
67263: AND
67264: PUSH
67265: LD_VAR 0 4
67269: PPUSH
67270: CALL_OW 264
67274: PUSH
67275: LD_VAR 0 10
67279: IN
67280: NOT
67281: AND
67282: IFFALSE 67321
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67284: LD_VAR 0 4
67288: PPUSH
67289: LD_VAR 0 7
67293: PUSH
67294: LD_INT 1
67296: ARRAY
67297: PUSH
67298: LD_INT 1
67300: ARRAY
67301: PPUSH
67302: LD_VAR 0 7
67306: PUSH
67307: LD_INT 1
67309: ARRAY
67310: PUSH
67311: LD_INT 2
67313: ARRAY
67314: PPUSH
67315: CALL_OW 116
67319: GO 67610
// if path > tag then
67321: LD_VAR 0 2
67325: PUSH
67326: LD_VAR 0 9
67330: GREATER
67331: IFFALSE 67539
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67333: LD_ADDR_VAR 0 6
67337: PUSH
67338: LD_VAR 0 5
67342: PPUSH
67343: LD_INT 91
67345: PUSH
67346: LD_VAR 0 4
67350: PUSH
67351: LD_INT 8
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: LIST
67358: PPUSH
67359: CALL_OW 72
67363: ST_TO_ADDR
// if nearEnemy then
67364: LD_VAR 0 6
67368: IFFALSE 67437
// begin if GetWeapon ( i ) = ru_time_lapser then
67370: LD_VAR 0 4
67374: PPUSH
67375: CALL_OW 264
67379: PUSH
67380: LD_INT 49
67382: EQUAL
67383: IFFALSE 67411
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67385: LD_VAR 0 4
67389: PPUSH
67390: LD_VAR 0 6
67394: PPUSH
67395: LD_VAR 0 4
67399: PPUSH
67400: CALL_OW 74
67404: PPUSH
67405: CALL_OW 112
67409: GO 67435
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67411: LD_VAR 0 4
67415: PPUSH
67416: LD_VAR 0 6
67420: PPUSH
67421: LD_VAR 0 4
67425: PPUSH
67426: CALL_OW 74
67430: PPUSH
67431: CALL 68539 0 2
// end else
67435: GO 67537
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67437: LD_VAR 0 4
67441: PPUSH
67442: LD_VAR 0 2
67446: PUSH
67447: LD_VAR 0 9
67451: ARRAY
67452: PUSH
67453: LD_INT 1
67455: ARRAY
67456: PPUSH
67457: LD_VAR 0 2
67461: PUSH
67462: LD_VAR 0 9
67466: ARRAY
67467: PUSH
67468: LD_INT 2
67470: ARRAY
67471: PPUSH
67472: CALL_OW 297
67476: PUSH
67477: LD_INT 6
67479: GREATER
67480: IFFALSE 67523
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67482: LD_VAR 0 4
67486: PPUSH
67487: LD_VAR 0 2
67491: PUSH
67492: LD_VAR 0 9
67496: ARRAY
67497: PUSH
67498: LD_INT 1
67500: ARRAY
67501: PPUSH
67502: LD_VAR 0 2
67506: PUSH
67507: LD_VAR 0 9
67511: ARRAY
67512: PUSH
67513: LD_INT 2
67515: ARRAY
67516: PPUSH
67517: CALL_OW 114
67521: GO 67537
// SetTag ( i , tag ) ;
67523: LD_VAR 0 4
67527: PPUSH
67528: LD_VAR 0 9
67532: PPUSH
67533: CALL_OW 109
// end else
67537: GO 67610
// if enemy then
67539: LD_VAR 0 5
67543: IFFALSE 67610
// begin if GetWeapon ( i ) = ru_time_lapser then
67545: LD_VAR 0 4
67549: PPUSH
67550: CALL_OW 264
67554: PUSH
67555: LD_INT 49
67557: EQUAL
67558: IFFALSE 67586
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67560: LD_VAR 0 4
67564: PPUSH
67565: LD_VAR 0 5
67569: PPUSH
67570: LD_VAR 0 4
67574: PPUSH
67575: CALL_OW 74
67579: PPUSH
67580: CALL_OW 112
67584: GO 67610
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67586: LD_VAR 0 4
67590: PPUSH
67591: LD_VAR 0 5
67595: PPUSH
67596: LD_VAR 0 4
67600: PPUSH
67601: CALL_OW 74
67605: PPUSH
67606: CALL 68539 0 2
// end ; end ;
67610: GO 67190
67612: POP
67613: POP
// end ;
67614: LD_VAR 0 3
67618: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67619: LD_INT 0
67621: PPUSH
67622: PPUSH
67623: PPUSH
// if not unit or IsInUnit ( unit ) then
67624: LD_VAR 0 1
67628: NOT
67629: PUSH
67630: LD_VAR 0 1
67634: PPUSH
67635: CALL_OW 310
67639: OR
67640: IFFALSE 67644
// exit ;
67642: GO 67735
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67644: LD_ADDR_VAR 0 4
67648: PUSH
67649: LD_VAR 0 1
67653: PPUSH
67654: CALL_OW 250
67658: PPUSH
67659: LD_VAR 0 2
67663: PPUSH
67664: LD_INT 1
67666: PPUSH
67667: CALL_OW 272
67671: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67672: LD_ADDR_VAR 0 5
67676: PUSH
67677: LD_VAR 0 1
67681: PPUSH
67682: CALL_OW 251
67686: PPUSH
67687: LD_VAR 0 2
67691: PPUSH
67692: LD_INT 1
67694: PPUSH
67695: CALL_OW 273
67699: ST_TO_ADDR
// if ValidHex ( x , y ) then
67700: LD_VAR 0 4
67704: PPUSH
67705: LD_VAR 0 5
67709: PPUSH
67710: CALL_OW 488
67714: IFFALSE 67735
// ComTurnXY ( unit , x , y ) ;
67716: LD_VAR 0 1
67720: PPUSH
67721: LD_VAR 0 4
67725: PPUSH
67726: LD_VAR 0 5
67730: PPUSH
67731: CALL_OW 118
// end ;
67735: LD_VAR 0 3
67739: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67740: LD_INT 0
67742: PPUSH
67743: PPUSH
// result := false ;
67744: LD_ADDR_VAR 0 3
67748: PUSH
67749: LD_INT 0
67751: ST_TO_ADDR
// if not units then
67752: LD_VAR 0 2
67756: NOT
67757: IFFALSE 67761
// exit ;
67759: GO 67806
// for i in units do
67761: LD_ADDR_VAR 0 4
67765: PUSH
67766: LD_VAR 0 2
67770: PUSH
67771: FOR_IN
67772: IFFALSE 67804
// if See ( side , i ) then
67774: LD_VAR 0 1
67778: PPUSH
67779: LD_VAR 0 4
67783: PPUSH
67784: CALL_OW 292
67788: IFFALSE 67802
// begin result := true ;
67790: LD_ADDR_VAR 0 3
67794: PUSH
67795: LD_INT 1
67797: ST_TO_ADDR
// exit ;
67798: POP
67799: POP
67800: GO 67806
// end ;
67802: GO 67771
67804: POP
67805: POP
// end ;
67806: LD_VAR 0 3
67810: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67811: LD_INT 0
67813: PPUSH
67814: PPUSH
67815: PPUSH
67816: PPUSH
// if not unit or not points then
67817: LD_VAR 0 1
67821: NOT
67822: PUSH
67823: LD_VAR 0 2
67827: NOT
67828: OR
67829: IFFALSE 67833
// exit ;
67831: GO 67923
// dist := 99999 ;
67833: LD_ADDR_VAR 0 5
67837: PUSH
67838: LD_INT 99999
67840: ST_TO_ADDR
// for i in points do
67841: LD_ADDR_VAR 0 4
67845: PUSH
67846: LD_VAR 0 2
67850: PUSH
67851: FOR_IN
67852: IFFALSE 67921
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67854: LD_ADDR_VAR 0 6
67858: PUSH
67859: LD_VAR 0 1
67863: PPUSH
67864: LD_VAR 0 4
67868: PUSH
67869: LD_INT 1
67871: ARRAY
67872: PPUSH
67873: LD_VAR 0 4
67877: PUSH
67878: LD_INT 2
67880: ARRAY
67881: PPUSH
67882: CALL_OW 297
67886: ST_TO_ADDR
// if tmpDist < dist then
67887: LD_VAR 0 6
67891: PUSH
67892: LD_VAR 0 5
67896: LESS
67897: IFFALSE 67919
// begin result := i ;
67899: LD_ADDR_VAR 0 3
67903: PUSH
67904: LD_VAR 0 4
67908: ST_TO_ADDR
// dist := tmpDist ;
67909: LD_ADDR_VAR 0 5
67913: PUSH
67914: LD_VAR 0 6
67918: ST_TO_ADDR
// end ; end ;
67919: GO 67851
67921: POP
67922: POP
// end ;
67923: LD_VAR 0 3
67927: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67928: LD_INT 0
67930: PPUSH
// uc_side := side ;
67931: LD_ADDR_OWVAR 20
67935: PUSH
67936: LD_VAR 0 1
67940: ST_TO_ADDR
// uc_nation := 3 ;
67941: LD_ADDR_OWVAR 21
67945: PUSH
67946: LD_INT 3
67948: ST_TO_ADDR
// vc_chassis := 25 ;
67949: LD_ADDR_OWVAR 37
67953: PUSH
67954: LD_INT 25
67956: ST_TO_ADDR
// vc_engine := engine_siberite ;
67957: LD_ADDR_OWVAR 39
67961: PUSH
67962: LD_INT 3
67964: ST_TO_ADDR
// vc_control := control_computer ;
67965: LD_ADDR_OWVAR 38
67969: PUSH
67970: LD_INT 3
67972: ST_TO_ADDR
// vc_weapon := 59 ;
67973: LD_ADDR_OWVAR 40
67977: PUSH
67978: LD_INT 59
67980: ST_TO_ADDR
// result := CreateVehicle ;
67981: LD_ADDR_VAR 0 5
67985: PUSH
67986: CALL_OW 45
67990: ST_TO_ADDR
// SetDir ( result , d ) ;
67991: LD_VAR 0 5
67995: PPUSH
67996: LD_VAR 0 4
68000: PPUSH
68001: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68005: LD_VAR 0 5
68009: PPUSH
68010: LD_VAR 0 2
68014: PPUSH
68015: LD_VAR 0 3
68019: PPUSH
68020: LD_INT 0
68022: PPUSH
68023: CALL_OW 48
// end ;
68027: LD_VAR 0 5
68031: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68032: LD_INT 0
68034: PPUSH
68035: PPUSH
68036: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68037: LD_ADDR_VAR 0 2
68041: PUSH
68042: LD_INT 0
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68060: LD_VAR 0 1
68064: NOT
68065: PUSH
68066: LD_VAR 0 1
68070: PPUSH
68071: CALL_OW 264
68075: PUSH
68076: LD_INT 12
68078: PUSH
68079: LD_INT 51
68081: PUSH
68082: LD_INT 32
68084: PUSH
68085: LD_INT 89
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: IN
68094: NOT
68095: OR
68096: IFFALSE 68100
// exit ;
68098: GO 68198
// for i := 1 to 3 do
68100: LD_ADDR_VAR 0 3
68104: PUSH
68105: DOUBLE
68106: LD_INT 1
68108: DEC
68109: ST_TO_ADDR
68110: LD_INT 3
68112: PUSH
68113: FOR_TO
68114: IFFALSE 68196
// begin tmp := GetCargo ( cargo , i ) ;
68116: LD_ADDR_VAR 0 4
68120: PUSH
68121: LD_VAR 0 1
68125: PPUSH
68126: LD_VAR 0 3
68130: PPUSH
68131: CALL_OW 289
68135: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68136: LD_ADDR_VAR 0 2
68140: PUSH
68141: LD_VAR 0 2
68145: PPUSH
68146: LD_VAR 0 3
68150: PPUSH
68151: LD_VAR 0 4
68155: PPUSH
68156: CALL_OW 1
68160: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68161: LD_ADDR_VAR 0 2
68165: PUSH
68166: LD_VAR 0 2
68170: PPUSH
68171: LD_INT 4
68173: PPUSH
68174: LD_VAR 0 2
68178: PUSH
68179: LD_INT 4
68181: ARRAY
68182: PUSH
68183: LD_VAR 0 4
68187: PLUS
68188: PPUSH
68189: CALL_OW 1
68193: ST_TO_ADDR
// end ;
68194: GO 68113
68196: POP
68197: POP
// end ;
68198: LD_VAR 0 2
68202: RET
// export function Length ( array ) ; begin
68203: LD_INT 0
68205: PPUSH
// result := array + 0 ;
68206: LD_ADDR_VAR 0 2
68210: PUSH
68211: LD_VAR 0 1
68215: PUSH
68216: LD_INT 0
68218: PLUS
68219: ST_TO_ADDR
// end ;
68220: LD_VAR 0 2
68224: RET
// export function PrepareArray ( array ) ; begin
68225: LD_INT 0
68227: PPUSH
// result := array diff 0 ;
68228: LD_ADDR_VAR 0 2
68232: PUSH
68233: LD_VAR 0 1
68237: PUSH
68238: LD_INT 0
68240: DIFF
68241: ST_TO_ADDR
// if not result [ 1 ] then
68242: LD_VAR 0 2
68246: PUSH
68247: LD_INT 1
68249: ARRAY
68250: NOT
68251: IFFALSE 68271
// result := Delete ( result , 1 ) ;
68253: LD_ADDR_VAR 0 2
68257: PUSH
68258: LD_VAR 0 2
68262: PPUSH
68263: LD_INT 1
68265: PPUSH
68266: CALL_OW 3
68270: ST_TO_ADDR
// end ;
68271: LD_VAR 0 2
68275: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68276: LD_INT 0
68278: PPUSH
68279: PPUSH
68280: PPUSH
68281: PPUSH
// sibRocketRange := 25 ;
68282: LD_ADDR_VAR 0 6
68286: PUSH
68287: LD_INT 25
68289: ST_TO_ADDR
// result := false ;
68290: LD_ADDR_VAR 0 4
68294: PUSH
68295: LD_INT 0
68297: ST_TO_ADDR
// for i := 0 to 5 do
68298: LD_ADDR_VAR 0 5
68302: PUSH
68303: DOUBLE
68304: LD_INT 0
68306: DEC
68307: ST_TO_ADDR
68308: LD_INT 5
68310: PUSH
68311: FOR_TO
68312: IFFALSE 68379
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68314: LD_VAR 0 1
68318: PPUSH
68319: LD_VAR 0 5
68323: PPUSH
68324: LD_VAR 0 6
68328: PPUSH
68329: CALL_OW 272
68333: PPUSH
68334: LD_VAR 0 2
68338: PPUSH
68339: LD_VAR 0 5
68343: PPUSH
68344: LD_VAR 0 6
68348: PPUSH
68349: CALL_OW 273
68353: PPUSH
68354: LD_VAR 0 3
68358: PPUSH
68359: CALL_OW 309
68363: IFFALSE 68377
// begin result := true ;
68365: LD_ADDR_VAR 0 4
68369: PUSH
68370: LD_INT 1
68372: ST_TO_ADDR
// exit ;
68373: POP
68374: POP
68375: GO 68381
// end ;
68377: GO 68311
68379: POP
68380: POP
// end ;
68381: LD_VAR 0 4
68385: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68386: LD_INT 0
68388: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68389: LD_VAR 0 1
68393: PPUSH
68394: LD_VAR 0 2
68398: PPUSH
68399: LD_INT 0
68401: PPUSH
68402: LD_INT 0
68404: PPUSH
68405: LD_INT 1
68407: PPUSH
68408: LD_INT 0
68410: PPUSH
68411: CALL_OW 587
// end ;
68415: LD_VAR 0 3
68419: RET
// export function CenterOnNow ( unit ) ; begin
68420: LD_INT 0
68422: PPUSH
// result := IsInUnit ( unit ) ;
68423: LD_ADDR_VAR 0 2
68427: PUSH
68428: LD_VAR 0 1
68432: PPUSH
68433: CALL_OW 310
68437: ST_TO_ADDR
// if not result then
68438: LD_VAR 0 2
68442: NOT
68443: IFFALSE 68455
// result := unit ;
68445: LD_ADDR_VAR 0 2
68449: PUSH
68450: LD_VAR 0 1
68454: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68455: LD_VAR 0 1
68459: PPUSH
68460: CALL_OW 87
// end ;
68464: LD_VAR 0 2
68468: RET
// export function ComMoveHex ( unit , hex ) ; begin
68469: LD_INT 0
68471: PPUSH
// if not hex then
68472: LD_VAR 0 2
68476: NOT
68477: IFFALSE 68481
// exit ;
68479: GO 68534
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68481: LD_VAR 0 2
68485: PUSH
68486: LD_INT 1
68488: ARRAY
68489: PPUSH
68490: LD_VAR 0 2
68494: PUSH
68495: LD_INT 2
68497: ARRAY
68498: PPUSH
68499: CALL_OW 428
68503: IFFALSE 68507
// exit ;
68505: GO 68534
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68507: LD_VAR 0 1
68511: PPUSH
68512: LD_VAR 0 2
68516: PUSH
68517: LD_INT 1
68519: ARRAY
68520: PPUSH
68521: LD_VAR 0 2
68525: PUSH
68526: LD_INT 2
68528: ARRAY
68529: PPUSH
68530: CALL_OW 111
// end ;
68534: LD_VAR 0 3
68538: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68539: LD_INT 0
68541: PPUSH
68542: PPUSH
68543: PPUSH
// if not unit or not enemy then
68544: LD_VAR 0 1
68548: NOT
68549: PUSH
68550: LD_VAR 0 2
68554: NOT
68555: OR
68556: IFFALSE 68560
// exit ;
68558: GO 68684
// x := GetX ( enemy ) ;
68560: LD_ADDR_VAR 0 4
68564: PUSH
68565: LD_VAR 0 2
68569: PPUSH
68570: CALL_OW 250
68574: ST_TO_ADDR
// y := GetY ( enemy ) ;
68575: LD_ADDR_VAR 0 5
68579: PUSH
68580: LD_VAR 0 2
68584: PPUSH
68585: CALL_OW 251
68589: ST_TO_ADDR
// if ValidHex ( x , y ) then
68590: LD_VAR 0 4
68594: PPUSH
68595: LD_VAR 0 5
68599: PPUSH
68600: CALL_OW 488
68604: IFFALSE 68684
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
68606: LD_VAR 0 2
68610: PPUSH
68611: CALL_OW 247
68615: PUSH
68616: LD_INT 3
68618: PUSH
68619: LD_INT 2
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: IN
68626: PUSH
68627: LD_VAR 0 1
68631: PPUSH
68632: CALL_OW 255
68636: PPUSH
68637: LD_VAR 0 2
68641: PPUSH
68642: CALL_OW 292
68646: AND
68647: IFFALSE 68665
// ComAttackUnit ( unit , enemy ) else
68649: LD_VAR 0 1
68653: PPUSH
68654: LD_VAR 0 2
68658: PPUSH
68659: CALL_OW 115
68663: GO 68684
// ComAgressiveMove ( unit , x , y ) ;
68665: LD_VAR 0 1
68669: PPUSH
68670: LD_VAR 0 4
68674: PPUSH
68675: LD_VAR 0 5
68679: PPUSH
68680: CALL_OW 114
// end ; end_of_file
68684: LD_VAR 0 3
68688: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68689: LD_VAR 0 1
68693: PUSH
68694: LD_INT 200
68696: DOUBLE
68697: GREATEREQUAL
68698: IFFALSE 68706
68700: LD_INT 299
68702: DOUBLE
68703: LESSEQUAL
68704: IFTRUE 68708
68706: GO 68740
68708: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68709: LD_VAR 0 1
68713: PPUSH
68714: LD_VAR 0 2
68718: PPUSH
68719: LD_VAR 0 3
68723: PPUSH
68724: LD_VAR 0 4
68728: PPUSH
68729: LD_VAR 0 5
68733: PPUSH
68734: CALL 23233 0 5
68738: GO 68817
68740: LD_INT 300
68742: DOUBLE
68743: GREATEREQUAL
68744: IFFALSE 68752
68746: LD_INT 399
68748: DOUBLE
68749: LESSEQUAL
68750: IFTRUE 68754
68752: GO 68816
68754: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68755: LD_VAR 0 1
68759: PPUSH
68760: LD_VAR 0 2
68764: PPUSH
68765: LD_VAR 0 3
68769: PPUSH
68770: LD_VAR 0 4
68774: PPUSH
68775: LD_VAR 0 5
68779: PPUSH
68780: LD_VAR 0 6
68784: PPUSH
68785: LD_VAR 0 7
68789: PPUSH
68790: LD_VAR 0 8
68794: PPUSH
68795: LD_VAR 0 9
68799: PPUSH
68800: LD_VAR 0 10
68804: PPUSH
68805: LD_VAR 0 11
68809: PPUSH
68810: CALL 19558 0 11
68814: GO 68817
68816: POP
// end ;
68817: PPOPN 11
68819: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68820: LD_VAR 0 1
68824: PPUSH
68825: LD_VAR 0 2
68829: PPUSH
68830: LD_VAR 0 3
68834: PPUSH
68835: LD_VAR 0 4
68839: PPUSH
68840: LD_VAR 0 5
68844: PPUSH
68845: CALL 22969 0 5
// end ; end_of_file
68849: PPOPN 5
68851: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68852: LD_VAR 0 1
68856: PPUSH
68857: LD_VAR 0 2
68861: PPUSH
68862: LD_VAR 0 3
68866: PPUSH
68867: LD_VAR 0 4
68871: PPUSH
68872: LD_VAR 0 5
68876: PPUSH
68877: LD_VAR 0 6
68881: PPUSH
68882: CALL 7210 0 6
// end ;
68886: PPOPN 6
68888: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68889: LD_INT 0
68891: PPUSH
// begin if not units then
68892: LD_VAR 0 1
68896: NOT
68897: IFFALSE 68901
// exit ;
68899: GO 68901
// end ;
68901: PPOPN 7
68903: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68904: CALL 7114 0 0
// end ;
68908: PPOPN 1
68910: END
