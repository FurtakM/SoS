// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 181 0 0
// PrepareAllies ;
  12: CALL 2172 0 0
// Action ;
  16: CALL 4314 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 133 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 8
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 9
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 11
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 13
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// bonus_num := 0 ;
 120: LD_ADDR_EXP 12
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ;
 128: LD_VAR 0 1
 132: RET
// export function SetDiplomacy ; begin
 133: LD_INT 0
 135: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 136: LD_INT 92
 138: PPUSH
 139: LD_INT 48
 141: PPUSH
 142: LD_INT 8
 144: PPUSH
 145: LD_INT 32796
 147: NEG
 148: PPUSH
 149: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 153: LD_INT 92
 155: PPUSH
 156: LD_INT 48
 158: PPUSH
 159: LD_INT 8
 161: PPUSH
 162: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 166: LD_INT 5
 168: PPUSH
 169: LD_INT 8
 171: PPUSH
 172: CALL_OW 343
// end ; end_of_file
 176: LD_VAR 0 1
 180: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 181: LD_INT 0
 183: PPUSH
 184: PPUSH
 185: PPUSH
 186: PPUSH
 187: PPUSH
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
 197: PPUSH
 198: PPUSH
 199: PPUSH
 200: PPUSH
// uc_side := 2 ;
 201: LD_ADDR_OWVAR 20
 205: PUSH
 206: LD_INT 2
 208: ST_TO_ADDR
// uc_nation := nation_arabian ;
 209: LD_ADDR_OWVAR 21
 213: PUSH
 214: LD_INT 2
 216: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: LD_INT 6
 225: PPUSH
 226: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 230: LD_ADDR_OWVAR 26
 234: PUSH
 235: LD_STRING Nicolas Vervecken
 237: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 238: LD_ADDR_OWVAR 33
 242: PUSH
 243: LD_STRING SecondCharsGal
 245: ST_TO_ADDR
// hc_face_number := 3 ;
 246: LD_ADDR_OWVAR 34
 250: PUSH
 251: LD_INT 3
 253: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 254: LD_ADDR_OWVAR 29
 258: PUSH
 259: LD_INT 11
 261: PUSH
 262: LD_INT 10
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// Vervecken := CreateHuman ;
 269: LD_ADDR_EXP 10
 273: PUSH
 274: CALL_OW 44
 278: ST_TO_ADDR
// InitHc ;
 279: CALL_OW 19
// uc_side := 8 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 8
 290: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 291: LD_INT 23
 293: PPUSH
 294: CALL_OW 274
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 4000
 304: PUSH
 305: LD_INT 2500
 307: PUSH
 308: LD_INT 1250
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_OWVAR 67
 320: ARRAY
 321: PPUSH
 322: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 326: LD_INT 23
 328: PPUSH
 329: CALL_OW 274
 333: PPUSH
 334: LD_INT 2
 336: PPUSH
 337: LD_INT 300
 339: PPUSH
 340: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 3
 354: PPUSH
 355: LD_INT 100
 357: PUSH
 358: LD_INT 50
 360: PUSH
 361: LD_INT 30
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 379: LD_ADDR_VAR 0 14
 383: PUSH
 384: LD_INT 23
 386: PPUSH
 387: CALL_OW 250
 391: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 392: LD_ADDR_VAR 0 15
 396: PUSH
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 251
 404: ST_TO_ADDR
// team := [ ] ;
 405: LD_ADDR_VAR 0 7
 409: PUSH
 410: EMPTY
 411: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 412: LD_ADDR_VAR 0 8
 416: PUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 8
 422: PUSH
 423: LD_INT 7
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: PUSH
 431: LD_OWVAR 67
 435: ARRAY
 436: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 437: LD_ADDR_VAR 0 9
 441: PUSH
 442: LD_INT 11
 444: PUSH
 445: LD_INT 9
 447: PUSH
 448: LD_INT 8
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_OWVAR 67
 460: ARRAY
 461: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 462: LD_ADDR_VAR 0 10
 466: PUSH
 467: LD_INT 3
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PUSH
 481: LD_OWVAR 67
 485: ARRAY
 486: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 487: LD_ADDR_VAR 0 11
 491: PUSH
 492: LD_INT 5
 494: PUSH
 495: LD_INT 4
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 512: LD_ADDR_VAR 0 12
 516: PUSH
 517: LD_INT 3
 519: PUSH
 520: LD_INT 2
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_OWVAR 67
 535: ARRAY
 536: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 537: LD_ADDR_VAR 0 13
 541: PUSH
 542: LD_INT 6
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: PUSH
 556: LD_OWVAR 67
 560: ARRAY
 561: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 562: LD_ADDR_VAR 0 18
 566: PUSH
 567: LD_INT 13
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 26
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 14
 587: PUSH
 588: LD_INT 3
 590: PUSH
 591: LD_INT 1
 593: PUSH
 594: LD_INT 25
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 14
 605: PUSH
 606: LD_INT 3
 608: PUSH
 609: LD_INT 5
 611: PUSH
 612: LD_INT 32
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 14
 623: PUSH
 624: LD_INT 3
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 31
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 14
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: LD_INT 24
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 14
 659: PUSH
 660: LD_INT 3
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 25
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 13
 677: PUSH
 678: LD_INT 3
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: LD_INT 24
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 18
 716: PUSH
 717: LD_OWVAR 67
 721: MINUS
 722: PUSH
 723: LD_INT 1
 725: PLUS
 726: PUSH
 727: FOR_TO
 728: IFFALSE 857
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 730: LD_ADDR_OWVAR 37
 734: PUSH
 735: LD_VAR 0 18
 739: PUSH
 740: LD_VAR 0 2
 744: ARRAY
 745: PUSH
 746: LD_INT 1
 748: ARRAY
 749: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 750: LD_ADDR_OWVAR 39
 754: PUSH
 755: LD_VAR 0 18
 759: PUSH
 760: LD_VAR 0 2
 764: ARRAY
 765: PUSH
 766: LD_INT 2
 768: ARRAY
 769: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 770: LD_ADDR_OWVAR 38
 774: PUSH
 775: LD_VAR 0 18
 779: PUSH
 780: LD_VAR 0 2
 784: ARRAY
 785: PUSH
 786: LD_INT 3
 788: ARRAY
 789: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 790: LD_ADDR_OWVAR 40
 794: PUSH
 795: LD_VAR 0 18
 799: PUSH
 800: LD_VAR 0 2
 804: ARRAY
 805: PUSH
 806: LD_INT 4
 808: ARRAY
 809: ST_TO_ADDR
// un := CreateVehicle ;
 810: LD_ADDR_VAR 0 6
 814: PUSH
 815: CALL_OW 45
 819: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 820: LD_VAR 0 6
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: LD_INT 5
 830: PPUSH
 831: CALL_OW 12
 835: PPUSH
 836: CALL_OW 233
// PlaceUnitArea ( un , parking , false ) ;
 840: LD_VAR 0 6
 844: PPUSH
 845: LD_INT 7
 847: PPUSH
 848: LD_INT 0
 850: PPUSH
 851: CALL_OW 49
// end ;
 855: GO 727
 857: POP
 858: POP
// for i = 1 to ape_num do
 859: LD_ADDR_VAR 0 2
 863: PUSH
 864: DOUBLE
 865: LD_INT 1
 867: DEC
 868: ST_TO_ADDR
 869: LD_VAR 0 13
 873: PUSH
 874: FOR_TO
 875: IFFALSE 942
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 877: LD_INT 0
 879: PPUSH
 880: LD_INT 16
 882: PUSH
 883: LD_INT 15
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 2
 895: PPUSH
 896: CALL_OW 12
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 8
 906: PPUSH
 907: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 911: LD_ADDR_VAR 0 7
 915: PUSH
 916: LD_VAR 0 7
 920: PPUSH
 921: LD_VAR 0 7
 925: PUSH
 926: LD_INT 1
 928: PLUS
 929: PPUSH
 930: CALL_OW 44
 934: PPUSH
 935: CALL_OW 2
 939: ST_TO_ADDR
// end ;
 940: GO 874
 942: POP
 943: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 1
 949: PPUSH
 950: LD_VAR 0 8
 954: PPUSH
 955: CALL_OW 380
// l1 := CreateHuman ;
 959: LD_ADDR_EXP 2
 963: PUSH
 964: CALL_OW 44
 968: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
 969: LD_EXP 2
 973: PPUSH
 974: LD_INT 23
 976: PPUSH
 977: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
 981: LD_INT 1
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_VAR 0 8
 991: PPUSH
 992: CALL_OW 380
// l2 := CreateHuman ;
 996: LD_ADDR_EXP 3
1000: PUSH
1001: CALL_OW 44
1005: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1006: LD_EXP 3
1010: PPUSH
1011: LD_INT 23
1013: PPUSH
1014: CALL_OW 52
// for class = 1 to 4 do
1018: LD_ADDR_VAR 0 4
1022: PUSH
1023: DOUBLE
1024: LD_INT 1
1026: DEC
1027: ST_TO_ADDR
1028: LD_INT 4
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1131
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_VAR 0 9
1048: PUSH
1049: LD_VAR 0 10
1053: PUSH
1054: LD_VAR 0 11
1058: PUSH
1059: LD_VAR 0 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_VAR 0 4
1074: ARRAY
1075: PUSH
1076: FOR_TO
1077: IFFALSE 1127
// begin PrepareHuman ( false , class , skill ) ;
1079: LD_INT 0
1081: PPUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 8
1091: PPUSH
1092: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1096: LD_ADDR_VAR 0 7
1100: PUSH
1101: LD_VAR 0 7
1105: PPUSH
1106: LD_VAR 0 7
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: PPUSH
1115: CALL_OW 44
1119: PPUSH
1120: CALL_OW 2
1124: ST_TO_ADDR
// end ;
1125: GO 1076
1127: POP
1128: POP
1129: GO 1031
1131: POP
1132: POP
// for i in team do
1133: LD_ADDR_VAR 0 2
1137: PUSH
1138: LD_VAR 0 7
1142: PUSH
1143: FOR_IN
1144: IFFALSE 1620
// begin b := 0 ;
1146: LD_ADDR_VAR 0 5
1150: PUSH
1151: LD_INT 0
1153: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1154: LD_VAR 0 2
1158: PPUSH
1159: CALL_OW 257
1163: PUSH
1164: LD_INT 1
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1279
1172: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_OWVAR 20
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 2
1192: PUSH
1193: LD_INT 30
1195: PUSH
1196: LD_INT 32
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 31
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 58
1220: PUSH
1221: EMPTY
1222: LIST
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: PPUSH
1229: CALL_OW 69
1233: ST_TO_ADDR
// if not b then
1234: LD_VAR 0 5
1238: NOT
1239: IFFALSE 1277
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1241: LD_ADDR_VAR 0 5
1245: PUSH
1246: LD_INT 22
1248: PUSH
1249: LD_OWVAR 20
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 30
1260: PUSH
1261: LD_INT 5
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PPUSH
1272: CALL_OW 69
1276: ST_TO_ADDR
// end ; class_engineer :
1277: GO 1518
1279: LD_INT 2
1281: DOUBLE
1282: EQUAL
1283: IFTRUE 1287
1285: GO 1326
1287: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1288: LD_ADDR_VAR 0 5
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_OWVAR 20
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: ST_TO_ADDR
1324: GO 1518
1326: LD_INT 3
1328: DOUBLE
1329: EQUAL
1330: IFTRUE 1334
1332: GO 1423
1334: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1335: LD_ADDR_VAR 0 5
1339: PUSH
1340: LD_INT 22
1342: PUSH
1343: LD_OWVAR 20
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 21
1354: PUSH
1355: LD_INT 2
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: EMPTY
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: LIST
1372: PPUSH
1373: CALL_OW 69
1377: ST_TO_ADDR
// if not b then
1378: LD_VAR 0 5
1382: NOT
1383: IFFALSE 1421
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1385: LD_ADDR_VAR 0 5
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_OWVAR 20
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: LD_INT 30
1404: PUSH
1405: LD_INT 3
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PPUSH
1416: CALL_OW 69
1420: ST_TO_ADDR
// end ; class_scientistic :
1421: GO 1518
1423: LD_INT 4
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1470
1431: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1432: LD_ADDR_VAR 0 5
1436: PUSH
1437: LD_INT 22
1439: PUSH
1440: LD_OWVAR 20
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 30
1451: PUSH
1452: LD_INT 8
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PPUSH
1463: CALL_OW 69
1467: ST_TO_ADDR
// end ; class_apeman_soldier :
1468: GO 1518
1470: LD_INT 15
1472: DOUBLE
1473: EQUAL
1474: IFTRUE 1478
1476: GO 1517
1478: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_INT 22
1486: PUSH
1487: LD_OWVAR 20
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 30
1498: PUSH
1499: LD_INT 5
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PPUSH
1510: CALL_OW 69
1514: ST_TO_ADDR
1515: GO 1518
1517: POP
// if b then
1518: LD_VAR 0 5
1522: IFFALSE 1593
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: PPUSH
1533: CALL_OW 266
1537: PUSH
1538: LD_INT 31
1540: EQUAL
1541: IFFALSE 1563
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_VAR 0 5
1552: PUSH
1553: LD_INT 1
1555: ARRAY
1556: PPUSH
1557: CALL 5028 0 2
1561: GO 1591
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1563: LD_VAR 0 2
1567: PPUSH
1568: LD_VAR 0 5
1572: PUSH
1573: LD_INT 1
1575: PPUSH
1576: LD_VAR 0 5
1580: PPUSH
1581: CALL_OW 12
1585: ARRAY
1586: PPUSH
1587: CALL_OW 52
1591: GO 1618
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1593: LD_VAR 0 2
1597: PPUSH
1598: LD_VAR 0 14
1602: PPUSH
1603: LD_VAR 0 15
1607: PPUSH
1608: LD_INT 15
1610: PPUSH
1611: LD_INT 0
1613: PPUSH
1614: CALL_OW 50
// end ;
1618: GO 1143
1620: POP
1621: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1622: LD_ADDR_VAR 0 16
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 3
1632: PUSH
1633: LD_INT 2
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: PUSH
1644: LD_OWVAR 67
1648: ARRAY
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 25
1656: PUSH
1657: LD_INT 5
1659: PUSH
1660: LD_INT 4
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_OWVAR 67
1675: ARRAY
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 24
1683: PUSH
1684: LD_INT 5
1686: PUSH
1687: LD_INT 5
1689: PUSH
1690: LD_INT 4
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_OWVAR 67
1702: ARRAY
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 30
1710: PUSH
1711: LD_INT 2
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: LD_INT 1
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_OWVAR 67
1729: ARRAY
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: LD_INT 22
1748: PUSH
1749: LD_OWVAR 20
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 30
1760: PUSH
1761: LD_INT 32
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PPUSH
1772: CALL_OW 69
1776: PUSH
1777: FOR_IN
1778: IFFALSE 1951
// begin if weapons then
1780: LD_VAR 0 16
1784: IFFALSE 1908
// begin k := rand ( 1 , weapons ) ;
1786: LD_ADDR_VAR 0 3
1790: PUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_VAR 0 16
1798: PPUSH
1799: CALL_OW 12
1803: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1804: LD_ADDR_VAR 0 17
1808: PUSH
1809: LD_VAR 0 16
1813: PUSH
1814: LD_VAR 0 3
1818: ARRAY
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1824: LD_ADDR_VAR 0 16
1828: PUSH
1829: LD_VAR 0 16
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_VAR 0 16
1846: PUSH
1847: LD_VAR 0 3
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PUSH
1857: LD_INT 1
1859: MINUS
1860: PPUSH
1861: CALL 5120 0 4
1865: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1866: LD_VAR 0 16
1870: PUSH
1871: LD_VAR 0 3
1875: ARRAY
1876: PUSH
1877: LD_INT 2
1879: ARRAY
1880: PUSH
1881: LD_INT 0
1883: EQUAL
1884: IFFALSE 1906
// weapons := Delete ( weapons , k ) ;
1886: LD_ADDR_VAR 0 16
1890: PUSH
1891: LD_VAR 0 16
1895: PPUSH
1896: LD_VAR 0 3
1900: PPUSH
1901: CALL_OW 3
1905: ST_TO_ADDR
// end else
1906: GO 1935
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1908: LD_ADDR_VAR 0 17
1912: PUSH
1913: LD_INT 27
1915: PUSH
1916: LD_INT 23
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 1
1925: PPUSH
1926: LD_INT 2
1928: PPUSH
1929: CALL_OW 12
1933: ARRAY
1934: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1935: LD_VAR 0 2
1939: PPUSH
1940: LD_VAR 0 17
1944: PPUSH
1945: CALL_OW 431
// end ;
1949: GO 1777
1951: POP
1952: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: LD_VAR 0 8
1963: PUSH
1964: LD_INT 1
1966: PLUS
1967: PPUSH
1968: CALL_OW 380
// hc_gallery := potter ;
1972: LD_ADDR_OWVAR 33
1976: PUSH
1977: LD_STRING potter
1979: ST_TO_ADDR
// hc_face_number := 1 ;
1980: LD_ADDR_OWVAR 34
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// hc_importance := 100 ;
1988: LD_ADDR_OWVAR 32
1992: PUSH
1993: LD_INT 100
1995: ST_TO_ADDR
// hc_name := Mike Gerste ;
1996: LD_ADDR_OWVAR 26
2000: PUSH
2001: LD_STRING Mike Gerste
2003: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2004: LD_ADDR_OWVAR 29
2008: PUSH
2009: LD_INT 10
2011: PUSH
2012: LD_INT 11
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: ST_TO_ADDR
// legion_commander := CreateHuman ;
2019: LD_ADDR_EXP 1
2023: PUSH
2024: CALL_OW 44
2028: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2029: LD_EXP 1
2033: PPUSH
2034: LD_INT 23
2036: PPUSH
2037: CALL_OW 52
// uc_side := 5 ;
2041: LD_ADDR_OWVAR 20
2045: PUSH
2046: LD_INT 5
2048: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2049: LD_INT 1
2051: PPUSH
2052: LD_INT 4
2054: PPUSH
2055: LD_VAR 0 8
2059: PPUSH
2060: CALL_OW 380
// hc_gallery := potter ;
2064: LD_ADDR_OWVAR 33
2068: PUSH
2069: LD_STRING potter
2071: ST_TO_ADDR
// hc_face_number := 2 ;
2072: LD_ADDR_OWVAR 34
2076: PUSH
2077: LD_INT 2
2079: ST_TO_ADDR
// hc_importance := 0 ;
2080: LD_ADDR_OWVAR 32
2084: PUSH
2085: LD_INT 0
2087: ST_TO_ADDR
// hc_name := George Potter ;
2088: LD_ADDR_OWVAR 26
2092: PUSH
2093: LD_STRING George Potter
2095: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2096: LD_ADDR_OWVAR 29
2100: PUSH
2101: LD_INT 12
2103: PUSH
2104: LD_INT 9
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: ST_TO_ADDR
// potter := CreateHuman ;
2111: LD_ADDR_EXP 4
2115: PUSH
2116: CALL_OW 44
2120: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2121: LD_EXP 4
2125: PPUSH
2126: LD_INT 4
2128: PPUSH
2129: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2133: LD_EXP 4
2137: PPUSH
2138: LD_INT 103
2140: PPUSH
2141: LD_INT 45
2143: PPUSH
2144: LD_INT 0
2146: PPUSH
2147: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2151: LD_EXP 4
2155: PPUSH
2156: LD_INT 23
2158: PPUSH
2159: CALL_OW 119
// InitHc ( ) ;
2163: CALL_OW 19
// end ; end_of_file
2167: LD_VAR 0 1
2171: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2172: LD_INT 0
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// uc_side := 5 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 5
2186: ST_TO_ADDR
// uc_nation := nation_arabian ;
2187: LD_ADDR_OWVAR 21
2191: PUSH
2192: LD_INT 2
2194: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2195: LD_ADDR_VAR 0 4
2199: PUSH
2200: LD_INT 22
2202: PUSH
2203: LD_OWVAR 20
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 30
2214: PUSH
2215: LD_INT 5
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PPUSH
2226: CALL_OW 69
2230: ST_TO_ADDR
// for i = 1 to 3 do
2231: LD_ADDR_VAR 0 2
2235: PUSH
2236: DOUBLE
2237: LD_INT 1
2239: DEC
2240: ST_TO_ADDR
2241: LD_INT 3
2243: PUSH
2244: FOR_TO
2245: IFFALSE 2283
// begin PrepareHuman ( false , 2 , 6 ) ;
2247: LD_INT 0
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 6
2255: PPUSH
2256: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2260: CALL_OW 44
2264: PPUSH
2265: LD_INT 27
2267: PPUSH
2268: LD_INT 22
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: CALL_OW 50
// end ;
2281: GO 2244
2283: POP
2284: POP
// for i = 1 to 3 do
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: DOUBLE
2291: LD_INT 1
2293: DEC
2294: ST_TO_ADDR
2295: LD_INT 3
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2334
// begin PrepareHuman ( false , 1 , 6 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 6
2309: PPUSH
2310: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2314: CALL_OW 44
2318: PPUSH
2319: LD_VAR 0 4
2323: PUSH
2324: LD_INT 1
2326: ARRAY
2327: PPUSH
2328: CALL_OW 52
// end ;
2332: GO 2298
2334: POP
2335: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: LD_INT 22
2343: PUSH
2344: LD_OWVAR 20
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 2
2355: PUSH
2356: LD_INT 30
2358: PUSH
2359: LD_INT 31
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: LD_INT 30
2368: PUSH
2369: LD_INT 32
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PPUSH
2385: CALL_OW 69
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2478
// begin PrepareHuman ( false , 1 , 6 ) ;
2393: LD_INT 0
2395: PPUSH
2396: LD_INT 1
2398: PPUSH
2399: LD_INT 6
2401: PPUSH
2402: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2406: CALL_OW 44
2410: PPUSH
2411: LD_VAR 0 2
2415: PPUSH
2416: CALL 5028 0 2
// if GetBType ( i ) = b_bunker then
2420: LD_VAR 0 2
2424: PPUSH
2425: CALL_OW 266
2429: PUSH
2430: LD_INT 32
2432: EQUAL
2433: IFFALSE 2476
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: LD_INT 27
2442: PUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 24
2448: PUSH
2449: LD_INT 28
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: LD_INT 4
2465: MOD
2466: PUSH
2467: LD_INT 1
2469: PLUS
2470: ARRAY
2471: PPUSH
2472: CALL_OW 431
// end ;
2476: GO 2390
2478: POP
2479: POP
// for i = 1 to 3 do
2480: LD_ADDR_VAR 0 2
2484: PUSH
2485: DOUBLE
2486: LD_INT 1
2488: DEC
2489: ST_TO_ADDR
2490: LD_INT 3
2492: PUSH
2493: FOR_TO
2494: IFFALSE 2611
// begin vc_chassis := ar_half_tracked ;
2496: LD_ADDR_OWVAR 37
2500: PUSH
2501: LD_INT 14
2503: ST_TO_ADDR
// vc_engine := engine_solar ;
2504: LD_ADDR_OWVAR 39
2508: PUSH
2509: LD_INT 2
2511: ST_TO_ADDR
// vc_control := control_manual ;
2512: LD_ADDR_OWVAR 38
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2520: LD_ADDR_OWVAR 40
2524: PUSH
2525: LD_INT 25
2527: PUSH
2528: LD_INT 27
2530: PUSH
2531: LD_INT 26
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: ST_TO_ADDR
// un := CreateVehicle ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 45
2554: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 5
2562: PPUSH
2563: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2567: LD_VAR 0 3
2571: PPUSH
2572: LD_INT 8
2574: PPUSH
2575: LD_INT 0
2577: PPUSH
2578: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2582: LD_INT 0
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2595: CALL_OW 44
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// end ;
2609: GO 2493
2611: POP
2612: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2613: LD_INT 1
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 6
2621: PPUSH
2622: CALL_OW 380
// al_commander := CreateHuman ;
2626: LD_ADDR_EXP 5
2630: PUSH
2631: CALL_OW 44
2635: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2636: LD_EXP 5
2640: PPUSH
2641: LD_INT 22
2643: PUSH
2644: LD_OWVAR 20
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 30
2655: PUSH
2656: LD_INT 0
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL_OW 69
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PPUSH
2676: CALL_OW 52
// InitHc ( ) ;
2680: CALL_OW 19
// end ;
2684: LD_VAR 0 1
2688: RET
// export function ChangeSide ( ) ; var i ; begin
2689: LD_INT 0
2691: PPUSH
2692: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 5
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PUSH
2713: FOR_IN
2714: IFFALSE 2730
// SetSide ( i , 8 ) ;
2716: LD_VAR 0 2
2720: PPUSH
2721: LD_INT 8
2723: PPUSH
2724: CALL_OW 235
2728: GO 2713
2730: POP
2731: POP
// end ;
2732: LD_VAR 0 1
2736: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2737: LD_INT 22
2739: PUSH
2740: LD_INT 5
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: IFFALSE 3265
2753: GO 2755
2755: DISABLE
2756: LD_INT 0
2758: PPUSH
2759: PPUSH
2760: PPUSH
2761: PPUSH
2762: PPUSH
2763: PPUSH
// begin enable ;
2764: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: LD_INT 22
2772: PUSH
2773: LD_INT 5
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: LD_INT 2
2782: PUSH
2783: LD_INT 21
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 21
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 69
2816: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_INT 22
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 30
2834: PUSH
2835: LD_INT 32
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 3
2844: PUSH
2845: LD_INT 24
2847: PUSH
2848: LD_INT 1000
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 69
2868: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2869: LD_ADDR_VAR 0 6
2873: PUSH
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 3
2881: PUSH
2882: LD_INT 54
2884: PUSH
2885: EMPTY
2886: LIST
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 25
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: ST_TO_ADDR
// if not list then
2911: LD_VAR 0 2
2915: NOT
2916: IFFALSE 2920
// exit ;
2918: GO 3265
// for i in list do
2920: LD_ADDR_VAR 0 1
2924: PUSH
2925: LD_VAR 0 2
2929: PUSH
2930: FOR_IN
2931: IFFALSE 3263
// begin if b then
2933: LD_VAR 0 5
2937: IFFALSE 3016
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2939: LD_ADDR_VAR 0 4
2943: PUSH
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_INT 25
2951: PUSH
2952: LD_INT 2
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: PUSH
2964: FOR_IN
2965: IFFALSE 3014
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
2967: LD_VAR 0 4
2971: PPUSH
2972: CALL_OW 314
2976: NOT
2977: PUSH
2978: LD_VAR 0 1
2982: PPUSH
2983: CALL_OW 110
2987: PUSH
2988: LD_INT 7
2990: NONEQUAL
2991: AND
2992: IFFALSE 3012
// ComRepairBuilding ( j , b [ 1 ] ) ;
2994: LD_VAR 0 4
2998: PPUSH
2999: LD_VAR 0 5
3003: PUSH
3004: LD_INT 1
3006: ARRAY
3007: PPUSH
3008: CALL_OW 130
3012: GO 2964
3014: POP
3015: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 256
3025: PUSH
3026: LD_INT 500
3028: LESS
3029: PUSH
3030: LD_VAR 0 1
3034: PPUSH
3035: CALL_OW 110
3039: PUSH
3040: LD_INT 7
3042: EQUAL
3043: NOT
3044: AND
3045: IFFALSE 3095
// begin ComMoveToArea ( i , guard_hill ) ;
3047: LD_VAR 0 1
3051: PPUSH
3052: LD_INT 11
3054: PPUSH
3055: CALL_OW 113
// SetTag ( i , 7 ) ;
3059: LD_VAR 0 1
3063: PPUSH
3064: LD_INT 7
3066: PPUSH
3067: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3071: LD_VAR 0 1
3075: PPUSH
3076: CALL_OW 247
3080: PUSH
3081: LD_INT 2
3083: EQUAL
3084: IFFALSE 3095
// begin AddComExitVehicle ( i ) ;
3086: LD_VAR 0 1
3090: PPUSH
3091: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3095: LD_VAR 0 1
3099: PPUSH
3100: CALL_OW 256
3104: PUSH
3105: LD_INT 1000
3107: EQUAL
3108: PUSH
3109: LD_VAR 0 1
3113: PPUSH
3114: CALL_OW 110
3118: PUSH
3119: LD_INT 7
3121: EQUAL
3122: AND
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 310
3133: NOT
3134: AND
3135: PUSH
3136: LD_VAR 0 6
3140: AND
3141: IFFALSE 3169
// begin SetTag ( i , 0 ) ;
3143: LD_VAR 0 1
3147: PPUSH
3148: LD_INT 0
3150: PPUSH
3151: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3155: LD_VAR 0 6
3159: PPUSH
3160: LD_VAR 0 1
3164: PPUSH
3165: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3169: LD_VAR 0 1
3173: PPUSH
3174: CALL_OW 247
3178: PUSH
3179: LD_INT 2
3181: EQUAL
3182: PUSH
3183: LD_VAR 0 1
3187: PPUSH
3188: CALL_OW 110
3192: PUSH
3193: LD_INT 7
3195: NONEQUAL
3196: AND
3197: PUSH
3198: LD_VAR 0 1
3202: PPUSH
3203: CALL_OW 314
3207: NOT
3208: AND
3209: IFFALSE 3261
// if FilterAllUnits ( [ f_side , 7 ] ) then
3211: LD_INT 22
3213: PUSH
3214: LD_INT 7
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 69
3225: IFFALSE 3261
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3227: LD_VAR 0 1
3231: PPUSH
3232: LD_INT 22
3234: PUSH
3235: LD_INT 7
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PPUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 74
3256: PPUSH
3257: CALL_OW 115
// end ;
3261: GO 2930
3263: POP
3264: POP
// end ; end_of_file
3265: PPOPN 6
3267: END
// export function Game ; var i , val , areas , wave ; begin
3268: LD_INT 0
3270: PPUSH
3271: PPUSH
3272: PPUSH
3273: PPUSH
3274: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 2
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 4
3291: PUSH
3292: LD_INT 5
3294: PUSH
3295: LD_INT 6
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: ST_TO_ADDR
// val := [ 10 , 20 , 30 ] [ Difficulty ] ;
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_INT 10
3313: PUSH
3314: LD_INT 20
3316: PUSH
3317: LD_INT 30
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: PUSH
3325: LD_OWVAR 67
3329: ARRAY
3330: ST_TO_ADDR
// wave := 1 ;
3331: LD_ADDR_VAR 0 5
3335: PUSH
3336: LD_INT 1
3338: ST_TO_ADDR
// while ( game_over = false ) do
3339: LD_EXP 7
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3511
// begin repeat begin Wait ( 0 0$01 ) ;
3349: LD_INT 35
3351: PPUSH
3352: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3356: LD_ADDR_EXP 9
3360: PUSH
3361: LD_EXP 9
3365: PUSH
3366: LD_INT 35
3368: PLUS
3369: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3370: LD_INT 22
3372: PUSH
3373: LD_INT 7
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PPUSH
3380: CALL_OW 69
3384: PUSH
3385: LD_INT 10
3387: LESS
3388: PUSH
3389: LD_EXP 9
3393: PUSH
3394: LD_INT 21000
3396: GREATEREQUAL
3397: OR
3398: IFFALSE 3349
// wave_time := 0 0$00 ;
3400: LD_ADDR_EXP 9
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3408: LD_INT 5250
3410: PPUSH
3411: CALL_OW 67
// if not ignore_wave then
3415: LD_EXP 13
3419: NOT
3420: IFFALSE 3501
// begin for i = 1 to wave do
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: DOUBLE
3428: LD_INT 1
3430: DEC
3431: ST_TO_ADDR
3432: LD_VAR 0 5
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3483
// begin SpawnPotter ( val * i , areas [ i mod 6 + 1 ] ) ;
3440: LD_VAR 0 3
3444: PUSH
3445: LD_VAR 0 2
3449: MUL
3450: PPUSH
3451: LD_VAR 0 4
3455: PUSH
3456: LD_VAR 0 2
3460: PUSH
3461: LD_INT 6
3463: MOD
3464: PUSH
3465: LD_INT 1
3467: PLUS
3468: ARRAY
3469: PPUSH
3470: CALL 3516 0 2
// Wait ( 0 0$10 ) ;
3474: LD_INT 350
3476: PPUSH
3477: CALL_OW 67
// end ;
3481: GO 3437
3483: POP
3484: POP
// wave := wave + 1 ;
3485: LD_ADDR_VAR 0 5
3489: PUSH
3490: LD_VAR 0 5
3494: PUSH
3495: LD_INT 1
3497: PLUS
3498: ST_TO_ADDR
// end else
3499: GO 3509
// ignore_wave := false ;
3501: LD_ADDR_EXP 13
3505: PUSH
3506: LD_INT 0
3508: ST_TO_ADDR
// end ;
3509: GO 3339
// end ;
3511: LD_VAR 0 1
3515: RET
// export function SpawnPotter ( val , area ) ; var i , un , class ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// uc_side := 7 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 7
3529: ST_TO_ADDR
// uc_nation := 2 ;
3530: LD_ADDR_OWVAR 21
3534: PUSH
3535: LD_INT 2
3537: ST_TO_ADDR
// InitHc ( ) ;
3538: CALL_OW 19
// hc_gallery :=  ;
3542: LD_ADDR_OWVAR 33
3546: PUSH
3547: LD_STRING 
3549: ST_TO_ADDR
// hc_importance := 0 ;
3550: LD_ADDR_OWVAR 32
3554: PUSH
3555: LD_INT 0
3557: ST_TO_ADDR
// hc_name :=  ;
3558: LD_ADDR_OWVAR 26
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// hc_attr := [ 10 + ( tick div 10 10$00 ) , 10 + ( tick div 10 10$00 ) ] ;
3566: LD_ADDR_OWVAR 29
3570: PUSH
3571: LD_INT 10
3573: PUSH
3574: LD_OWVAR 1
3578: PUSH
3579: LD_INT 21000
3581: DIV
3582: PLUS
3583: PUSH
3584: LD_INT 10
3586: PUSH
3587: LD_OWVAR 1
3591: PUSH
3592: LD_INT 21000
3594: DIV
3595: PLUS
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: ST_TO_ADDR
// for i = 1 to val do
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_VAR 0 1
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3824
// begin if i mod 9 = 0 then
3619: LD_VAR 0 4
3623: PUSH
3624: LD_INT 9
3626: MOD
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3643
// class := class_apeman_kamikaze else
3633: LD_ADDR_VAR 0 6
3637: PUSH
3638: LD_INT 17
3640: ST_TO_ADDR
3641: GO 3675
// if i mod 4 = 0 then
3643: LD_VAR 0 4
3647: PUSH
3648: LD_INT 4
3650: MOD
3651: PUSH
3652: LD_INT 0
3654: EQUAL
3655: IFFALSE 3667
// class := class_apeman_soldier else
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 15
3664: ST_TO_ADDR
3665: GO 3675
// class := class_apeman ;
3667: LD_ADDR_VAR 0 6
3671: PUSH
3672: LD_INT 12
3674: ST_TO_ADDR
// if i mod 33 = 0 then
3675: LD_VAR 0 4
3679: PUSH
3680: LD_INT 33
3682: MOD
3683: PUSH
3684: LD_INT 0
3686: EQUAL
3687: IFFALSE 3756
// begin vc_chassis := ar_half_tracked ;
3689: LD_ADDR_OWVAR 37
3693: PUSH
3694: LD_INT 14
3696: ST_TO_ADDR
// vc_control := control_apeman ;
3697: LD_ADDR_OWVAR 38
3701: PUSH
3702: LD_INT 5
3704: ST_TO_ADDR
// vc_engine := engine_combustion ;
3705: LD_ADDR_OWVAR 39
3709: PUSH
3710: LD_INT 1
3712: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ rand ( 1 , 2 ) ] ;
3713: LD_ADDR_OWVAR 40
3717: PUSH
3718: LD_INT 28
3720: PUSH
3721: LD_INT 27
3723: PUSH
3724: LD_INT 29
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 2
3737: PPUSH
3738: CALL_OW 12
3742: ARRAY
3743: ST_TO_ADDR
// un := CreateVehicle ;
3744: LD_ADDR_VAR 0 5
3748: PUSH
3749: CALL_OW 45
3753: ST_TO_ADDR
// end else
3754: GO 3781
// begin PrepareHuman ( sex_male , class , 10 ) ;
3756: LD_INT 1
3758: PPUSH
3759: LD_VAR 0 6
3763: PPUSH
3764: LD_INT 10
3766: PPUSH
3767: CALL_OW 380
// un := CreateHuman ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3781: LD_VAR 0 5
3785: PPUSH
3786: LD_VAR 0 2
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3798: LD_VAR 0 5
3802: PPUSH
3803: CALL_OW 250
3807: PPUSH
3808: LD_VAR 0 5
3812: PPUSH
3813: CALL_OW 251
3817: PPUSH
3818: CALL_OW 494
// end ;
3822: GO 3616
3824: POP
3825: POP
// end ;
3826: LD_VAR 0 3
3830: RET
// every 0 0$0.3 trigger alert and not game_over do var i , list , enemy ;
3831: LD_EXP 6
3835: PUSH
3836: LD_EXP 7
3840: NOT
3841: AND
3842: IFFALSE 4128
3844: GO 3846
3846: DISABLE
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
// begin enable ;
3852: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 7
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// if not list then
3873: LD_VAR 0 2
3877: NOT
3878: IFFALSE 3882
// exit ;
3880: GO 4128
// for i in list do
3882: LD_ADDR_VAR 0 1
3886: PUSH
3887: LD_VAR 0 2
3891: PUSH
3892: FOR_IN
3893: IFFALSE 4126
// begin enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 15 ] ] ) ;
3895: LD_ADDR_VAR 0 3
3899: PUSH
3900: LD_INT 81
3902: PUSH
3903: LD_INT 7
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 92
3912: PUSH
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 250
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: CALL_OW 251
3932: PUSH
3933: LD_INT 15
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PPUSH
3946: CALL_OW 69
3950: ST_TO_ADDR
// if not enemy then
3951: LD_VAR 0 3
3955: NOT
3956: IFFALSE 4014
// enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 30 ] ] ) ;
3958: LD_ADDR_VAR 0 3
3962: PUSH
3963: LD_INT 81
3965: PUSH
3966: LD_INT 7
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 92
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 250
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 251
3995: PUSH
3996: LD_INT 30
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 69
4013: ST_TO_ADDR
// if not enemy then
4014: LD_VAR 0 3
4018: NOT
4019: IFFALSE 4077
// enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 50 ] ] ) ;
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_INT 81
4028: PUSH
4029: LD_INT 7
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 92
4038: PUSH
4039: LD_VAR 0 1
4043: PPUSH
4044: CALL_OW 250
4048: PUSH
4049: LD_VAR 0 1
4053: PPUSH
4054: CALL_OW 251
4058: PUSH
4059: LD_INT 50
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 69
4076: ST_TO_ADDR
// if not enemy then
4077: LD_VAR 0 3
4081: NOT
4082: IFFALSE 4104
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
4084: LD_ADDR_VAR 0 3
4088: PUSH
4089: LD_INT 81
4091: PUSH
4092: LD_INT 7
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 69
4103: ST_TO_ADDR
// if enemy then
4104: LD_VAR 0 3
4108: IFFALSE 4124
// Attack ( i , enemy ) ;
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL 4131 0 2
// end ;
4124: GO 3892
4126: POP
4127: POP
// end ;
4128: PPOPN 3
4130: END
// function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
4131: LD_INT 0
4133: PPUSH
4134: PPUSH
4135: PPUSH
// if not unit then
4136: LD_VAR 0 1
4140: NOT
4141: IFFALSE 4145
// exit ;
4143: GO 4309
// targets_list := [ ] ;
4145: LD_ADDR_VAR 0 5
4149: PUSH
4150: EMPTY
4151: ST_TO_ADDR
// targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
4152: LD_ADDR_VAR 0 5
4156: PUSH
4157: LD_VAR 0 2
4161: PPUSH
4162: LD_INT 21
4164: PUSH
4165: LD_INT 1
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: LD_INT 54
4177: PUSH
4178: EMPTY
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PPUSH
4189: CALL_OW 72
4193: PUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_INT 21
4201: PUSH
4202: LD_INT 2
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PPUSH
4209: CALL_OW 72
4213: PUSH
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 21
4221: PUSH
4222: LD_INT 3
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 3
4231: PUSH
4232: LD_INT 58
4234: PUSH
4235: EMPTY
4236: LIST
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PPUSH
4246: CALL_OW 72
4250: PUSH
4251: LD_VAR 0 2
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: ST_TO_ADDR
// for target in targets_list do
4262: LD_ADDR_VAR 0 4
4266: PUSH
4267: LD_VAR 0 5
4271: PUSH
4272: FOR_IN
4273: IFFALSE 4307
// begin if target then
4275: LD_VAR 0 4
4279: IFFALSE 4305
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
4281: LD_VAR 0 1
4285: PPUSH
4286: LD_VAR 0 4
4290: PPUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 74
4300: PPUSH
4301: CALL_OW 115
// end ;
4305: GO 4272
4307: POP
4308: POP
// end ; end_of_file
4309: LD_VAR 0 3
4313: RET
// export function Action ; begin
4314: LD_INT 0
4316: PPUSH
// InGameOn ;
4317: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4321: LD_INT 23
4323: PPUSH
4324: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4328: LD_EXP 1
4332: PPUSH
4333: LD_STRING DL-1
4335: PPUSH
4336: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4340: LD_EXP 2
4344: PPUSH
4345: LD_STRING DA-1
4347: PPUSH
4348: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4352: LD_EXP 3
4356: PPUSH
4357: LD_STRING DA-2
4359: PPUSH
4360: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4364: LD_EXP 1
4368: PPUSH
4369: LD_STRING DL-2
4371: PPUSH
4372: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4376: LD_EXP 3
4380: PPUSH
4381: LD_STRING DA-3
4383: PPUSH
4384: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4388: LD_EXP 1
4392: PPUSH
4393: LD_STRING DL-3
4395: PPUSH
4396: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4400: LD_EXP 2
4404: PPUSH
4405: LD_STRING DA-4
4407: PPUSH
4408: CALL_OW 88
// if not dialogue_skipped then
4412: LD_OWVAR 59
4416: NOT
4417: IFFALSE 4502
// begin Wait ( 0 0$01 ) ;
4419: LD_INT 35
4421: PPUSH
4422: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4426: LD_EXP 2
4430: PUSH
4431: LD_EXP 3
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4444: LD_EXP 2
4448: PPUSH
4449: LD_INT 107
4451: PPUSH
4452: LD_INT 53
4454: PPUSH
4455: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4459: LD_EXP 3
4463: PPUSH
4464: LD_INT 108
4466: PPUSH
4467: LD_INT 53
4469: PPUSH
4470: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4474: LD_EXP 2
4478: PPUSH
4479: LD_EXP 4
4483: PPUSH
4484: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4488: LD_EXP 3
4492: PPUSH
4493: LD_EXP 4
4497: PPUSH
4498: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4502: LD_INT 35
4504: PPUSH
4505: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4509: LD_EXP 2
4513: PPUSH
4514: LD_INT 107
4516: PPUSH
4517: LD_INT 53
4519: PPUSH
4520: CALL_OW 307
4524: PUSH
4525: LD_OWVAR 59
4529: OR
4530: IFFALSE 4502
// if not dialogue_skipped then
4532: LD_OWVAR 59
4536: NOT
4537: IFFALSE 4638
// begin ComTurnUnit ( potter , l1 ) ;
4539: LD_EXP 4
4543: PPUSH
4544: LD_EXP 2
4548: PPUSH
4549: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4553: LD_INT 10
4555: PPUSH
4556: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4560: LD_EXP 4
4564: PPUSH
4565: LD_INT 108
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 483
// Wait ( 0 0$01 ) ;
4581: LD_INT 35
4583: PPUSH
4584: CALL_OW 67
// RemoveUnit ( potter ) ;
4588: LD_EXP 4
4592: PPUSH
4593: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4597: LD_EXP 2
4601: PPUSH
4602: LD_STRING DA-5
4604: PPUSH
4605: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4609: LD_EXP 3
4613: PPUSH
4614: LD_STRING DA-6
4616: PPUSH
4617: CALL_OW 88
// Wait ( 0 0$02 ) ;
4621: LD_INT 70
4623: PPUSH
4624: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4628: LD_INT 25
4630: PPUSH
4631: LD_INT 19
4633: PPUSH
4634: CALL_OW 84
// end ; SpawnPotter ( 30 , north_west_1 ) ;
4638: LD_INT 30
4640: PPUSH
4641: LD_INT 1
4643: PPUSH
4644: CALL 3516 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4648: LD_EXP 5
4652: PPUSH
4653: LD_STRING DLa-1
4655: PPUSH
4656: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4660: LD_EXP 1
4664: PPUSH
4665: LD_STRING DL-5
4667: PPUSH
4668: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4672: LD_INT 23
4674: PPUSH
4675: CALL_OW 87
// InGameOff ;
4679: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4683: LD_STRING C1
4685: PPUSH
4686: CALL_OW 337
// alert := true ;
4690: LD_ADDR_EXP 6
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4698: LD_EXP 5
4702: PPUSH
4703: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4707: LD_EXP 5
4711: PPUSH
4712: LD_INT 11
4714: PPUSH
4715: CALL_OW 173
// Wait ( 0 0$30 ) ;
4719: LD_INT 1050
4721: PPUSH
4722: CALL_OW 67
// SpawnPotter ( 20 , north_4 ) ;
4726: LD_INT 20
4728: PPUSH
4729: LD_INT 4
4731: PPUSH
4732: CALL 3516 0 2
// Wait ( 0 0$35 ) ;
4736: LD_INT 1225
4738: PPUSH
4739: CALL_OW 67
// SpawnPotter ( 20 , east_5 ) ;
4743: LD_INT 20
4745: PPUSH
4746: LD_INT 5
4748: PPUSH
4749: CALL 3516 0 2
// Wait ( 0 0$03 ) ;
4753: LD_INT 105
4755: PPUSH
4756: CALL_OW 67
// Game ;
4760: CALL 3268 0 0
// end ;
4764: LD_VAR 0 1
4768: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 500 do var tmp , i ;
4769: LD_INT 22
4771: PUSH
4772: LD_INT 7
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 69
4783: PUSH
4784: LD_INT 0
4786: EQUAL
4787: PUSH
4788: LD_EXP 8
4792: PUSH
4793: LD_INT 500
4795: GREATEREQUAL
4796: AND
4797: IFFALSE 5025
4799: GO 4801
4801: DISABLE
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
// begin DialogueOn ;
4806: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4810: LD_EXP 10
4814: PPUSH
4815: LD_STRING DVr-1
4817: PPUSH
4818: CALL_OW 94
// DialogueOff ;
4822: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4826: LD_STRING QBonusInfo
4828: PPUSH
4829: CALL_OW 97
4833: PUSH
4834: LD_INT 1
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4853
4842: POP
// bonus_active := true ; end ;
4843: LD_ADDR_EXP 11
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
4851: GO 4854
4853: POP
// bonus_num := 4 ;
4854: LD_ADDR_EXP 12
4858: PUSH
4859: LD_INT 4
4861: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_mid , art_instant , main_base ) ;
4862: LD_OWVAR 2
4866: PPUSH
4867: LD_INT 2
4869: PPUSH
4870: LD_INT 2
4872: PPUSH
4873: LD_INT 23
4875: PPUSH
4876: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_INT 500
4887: PUSH
4888: LD_INT 3500
4890: PUSH
4891: LD_INT 5750
4893: PUSH
4894: LD_INT 10000
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4903: LD_INT 10500
4905: PUSH
4906: LD_INT 12600
4908: PUSH
4909: LD_INT 14700
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: PUSH
4917: LD_OWVAR 67
4921: ARRAY
4922: PPUSH
4923: CALL_OW 67
// for i = 1 to tmp do
4927: LD_ADDR_VAR 0 2
4931: PUSH
4932: DOUBLE
4933: LD_INT 1
4935: DEC
4936: ST_TO_ADDR
4937: LD_VAR 0 1
4941: PUSH
4942: FOR_TO
4943: IFFALSE 4975
// if points >= tmp [ i ] then
4945: LD_EXP 8
4949: PUSH
4950: LD_VAR 0 1
4954: PUSH
4955: LD_VAR 0 2
4959: ARRAY
4960: GREATEREQUAL
4961: IFFALSE 4973
// bonus_num := i ;
4963: LD_ADDR_EXP 12
4967: PUSH
4968: LD_VAR 0 2
4972: ST_TO_ADDR
4973: GO 4942
4975: POP
4976: POP
// case Query ( QBonusInfo ) of 1 :
4977: LD_STRING QBonusInfo
4979: PPUSH
4980: CALL_OW 97
4984: PUSH
4985: LD_INT 1
4987: DOUBLE
4988: EQUAL
4989: IFTRUE 4993
4991: GO 5014
4993: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4994: LD_OWVAR 2
4998: PPUSH
4999: LD_INT 12
5001: PPUSH
5002: LD_INT 2
5004: PPUSH
5005: LD_INT 23
5007: PPUSH
5008: CALL_OW 468
5012: GO 5015
5014: POP
// until points >= 15000 ;
5015: LD_EXP 8
5019: PUSH
5020: LD_INT 15000
5022: GREATEREQUAL
5023: IFFALSE 4903
// end ; end_of_file
5025: PPOPN 2
5027: END
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
5028: LD_INT 0
5030: PPUSH
5031: PPUSH
// dir := GetDir ( b ) ;
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 2
5041: PPUSH
5042: CALL_OW 254
5046: ST_TO_ADDR
// if dir < 3 then
5047: LD_VAR 0 4
5051: PUSH
5052: LD_INT 3
5054: LESS
5055: IFFALSE 5073
// dir := dir + 3 else
5057: LD_ADDR_VAR 0 4
5061: PUSH
5062: LD_VAR 0 4
5066: PUSH
5067: LD_INT 3
5069: PLUS
5070: ST_TO_ADDR
5071: GO 5087
// dir := dir - 3 ;
5073: LD_ADDR_VAR 0 4
5077: PUSH
5078: LD_VAR 0 4
5082: PUSH
5083: LD_INT 3
5085: MINUS
5086: ST_TO_ADDR
// SetDir ( un , dir ) ;
5087: LD_VAR 0 1
5091: PPUSH
5092: LD_VAR 0 4
5096: PPUSH
5097: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5101: LD_VAR 0 1
5105: PPUSH
5106: LD_VAR 0 2
5110: PPUSH
5111: CALL_OW 52
// end ;
5115: LD_VAR 0 3
5119: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
5120: LD_INT 0
5122: PPUSH
5123: PPUSH
5124: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
5125: LD_ADDR_VAR 0 7
5129: PUSH
5130: LD_VAR 0 1
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PPUSH
5141: LD_VAR 0 3
5145: PPUSH
5146: LD_VAR 0 4
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
5156: LD_ADDR_VAR 0 1
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: LD_VAR 0 2
5170: PPUSH
5171: LD_VAR 0 7
5175: PPUSH
5176: CALL_OW 1
5180: ST_TO_ADDR
// result := tab ;
5181: LD_ADDR_VAR 0 5
5185: PUSH
5186: LD_VAR 0 1
5190: ST_TO_ADDR
// end ;
5191: LD_VAR 0 5
5195: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5196: LD_INT 0
5198: PPUSH
5199: PPUSH
5200: PPUSH
// if not GetControl ( veh ) = control_manual then
5201: LD_VAR 0 1
5205: PPUSH
5206: CALL_OW 263
5210: PUSH
5211: LD_INT 1
5213: EQUAL
5214: NOT
5215: IFFALSE 5227
// result := false else
5217: LD_ADDR_VAR 0 2
5221: PUSH
5222: LD_INT 0
5224: ST_TO_ADDR
5225: GO 5372
// if veh in FilterAllUnits ( [ f_empty ] ) then
5227: LD_VAR 0 1
5231: PUSH
5232: LD_INT 58
5234: PUSH
5235: EMPTY
5236: LIST
5237: PPUSH
5238: CALL_OW 69
5242: IN
5243: IFFALSE 5255
// result := false else
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
5253: GO 5372
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5255: LD_ADDR_VAR 0 4
5259: PUSH
5260: LD_INT 22
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 255
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 55
5279: PUSH
5280: EMPTY
5281: LIST
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: CALL_OW 69
5291: ST_TO_ADDR
// if not filter then
5292: LD_VAR 0 4
5296: NOT
5297: IFFALSE 5309
// result := false else
5299: LD_ADDR_VAR 0 2
5303: PUSH
5304: LD_INT 0
5306: ST_TO_ADDR
5307: GO 5372
// for i = 1 to filter do
5309: LD_ADDR_VAR 0 3
5313: PUSH
5314: DOUBLE
5315: LD_INT 1
5317: DEC
5318: ST_TO_ADDR
5319: LD_VAR 0 4
5323: PUSH
5324: FOR_TO
5325: IFFALSE 5370
// if IsDriver ( filter [ i ] ) = veh then
5327: LD_VAR 0 4
5331: PUSH
5332: LD_VAR 0 3
5336: ARRAY
5337: PPUSH
5338: CALL 57579 0 1
5342: PUSH
5343: LD_VAR 0 1
5347: EQUAL
5348: IFFALSE 5368
// begin result := filter [ i ] ;
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_VAR 0 4
5359: PUSH
5360: LD_VAR 0 3
5364: ARRAY
5365: ST_TO_ADDR
// break ;
5366: GO 5370
// end ;
5368: GO 5324
5370: POP
5371: POP
// end ; end ; end_of_file
5372: LD_VAR 0 2
5376: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5377: LD_VAR 0 1
5381: PPUSH
5382: CALL 19995 0 1
// if un in [ legion_commander , main_base ] then
5386: LD_VAR 0 1
5390: PUSH
5391: LD_EXP 1
5395: PUSH
5396: LD_INT 23
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: IN
5403: IFFALSE 5413
// game_over := true ;
5405: LD_ADDR_EXP 7
5409: PUSH
5410: LD_INT 1
5412: ST_TO_ADDR
// if un = al_commander then
5413: LD_VAR 0 1
5417: PUSH
5418: LD_EXP 5
5422: EQUAL
5423: IFFALSE 5429
// ChangeSide ( ) ;
5425: CALL 2689 0 0
// if GetSide ( un ) = 7 then
5429: LD_VAR 0 1
5433: PPUSH
5434: CALL_OW 255
5438: PUSH
5439: LD_INT 7
5441: EQUAL
5442: IFFALSE 5560
// begin if GetClass ( un ) = class_apeman then
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 257
5453: PUSH
5454: LD_INT 12
5456: EQUAL
5457: IFFALSE 5473
// points := points + 6 ;
5459: LD_ADDR_EXP 8
5463: PUSH
5464: LD_EXP 8
5468: PUSH
5469: LD_INT 6
5471: PLUS
5472: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL_OW 257
5482: PUSH
5483: LD_INT 17
5485: EQUAL
5486: IFFALSE 5502
// points := points + 11 ;
5488: LD_ADDR_EXP 8
5492: PUSH
5493: LD_EXP 8
5497: PUSH
5498: LD_INT 11
5500: PLUS
5501: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 257
5511: PUSH
5512: LD_INT 15
5514: EQUAL
5515: IFFALSE 5531
// points := points + 14 ;
5517: LD_ADDR_EXP 8
5521: PUSH
5522: LD_EXP 8
5526: PUSH
5527: LD_INT 14
5529: PLUS
5530: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5531: LD_VAR 0 1
5535: PPUSH
5536: CALL_OW 247
5540: PUSH
5541: LD_INT 2
5543: EQUAL
5544: IFFALSE 5560
// points := points + 50 ;
5546: LD_ADDR_EXP 8
5550: PUSH
5551: LD_EXP 8
5555: PUSH
5556: LD_INT 50
5558: PLUS
5559: ST_TO_ADDR
// end ; end ;
5560: PPOPN 1
5562: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5563: LD_EXP 5
5567: PPUSH
5568: CALL_OW 256
5572: PUSH
5573: LD_INT 1000
5575: LESS
5576: IFFALSE 5608
5578: GO 5580
5580: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5581: LD_EXP 5
5585: PPUSH
5586: CALL_OW 504
5590: PPUSH
5591: CALL_OW 255
5595: PUSH
5596: LD_INT 8
5598: EQUAL
5599: IFFALSE 5608
// YouLost (  ) ;
5601: LD_STRING 
5603: PPUSH
5604: CALL_OW 104
5608: END
// on DialogueSkipped ( value ) do var i ;
5609: LD_INT 0
5611: PPUSH
// begin RemoveUnit ( potter ) ;
5612: LD_EXP 4
5616: PPUSH
5617: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5621: LD_EXP 2
5625: PUSH
5626: LD_EXP 3
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 122
// Wait ( 1 ) ;
5639: LD_INT 1
5641: PPUSH
5642: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5646: LD_EXP 2
5650: PPUSH
5651: LD_INT 107
5653: PPUSH
5654: LD_INT 53
5656: PPUSH
5657: LD_INT 0
5659: PPUSH
5660: LD_INT 0
5662: PPUSH
5663: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5667: LD_EXP 3
5671: PPUSH
5672: LD_INT 108
5674: PPUSH
5675: LD_INT 53
5677: PPUSH
5678: LD_INT 0
5680: PPUSH
5681: LD_INT 0
5683: PPUSH
5684: CALL_OW 483
// Wait ( 1 ) ;
5688: LD_INT 1
5690: PPUSH
5691: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5695: LD_EXP 2
5699: PUSH
5700: LD_EXP 3
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PPUSH
5709: LD_INT 108
5711: PPUSH
5712: LD_INT 1
5714: PPUSH
5715: CALL_OW 118
// end ;
5719: PPOPN 2
5721: END
// on ArtifactUsed ( side , button , p3 , p4 ) do var bonus , off , units , crates , tmp , i ;
5722: LD_INT 0
5724: PPUSH
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
// begin DialogueOn ;
5730: CALL_OW 6
// uc_side := 8 ;
5734: LD_ADDR_OWVAR 20
5738: PUSH
5739: LD_INT 8
5741: ST_TO_ADDR
// uc_nation := 2 ;
5742: LD_ADDR_OWVAR 21
5746: PUSH
5747: LD_INT 2
5749: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5750: LD_ADDR_VAR 0 5
5754: PUSH
5755: LD_STRING QBonus
5757: PUSH
5758: LD_EXP 12
5762: STR
5763: ST_TO_ADDR
// off := true ;
5764: LD_ADDR_VAR 0 6
5768: PUSH
5769: LD_INT 1
5771: ST_TO_ADDR
// units := [ ] ;
5772: LD_ADDR_VAR 0 7
5776: PUSH
5777: EMPTY
5778: ST_TO_ADDR
// crates := 0 ;
5779: LD_ADDR_VAR 0 8
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5787: LD_EXP 10
5791: PPUSH
5792: LD_STRING DVr-2
5794: PPUSH
5795: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
5799: LD_INT 10
5801: PPUSH
5802: CALL_OW 67
// case Query ( bonus ) of 1 :
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL_OW 97
5815: PUSH
5816: LD_INT 1
5818: DOUBLE
5819: EQUAL
5820: IFTRUE 5824
5822: GO 5909
5824: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5825: LD_ADDR_VAR 0 9
5829: PUSH
5830: LD_INT 1
5832: PUSH
5833: LD_INT 2
5835: PUSH
5836: LD_INT 5
5838: PUSH
5839: LD_INT 8
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: PUSH
5848: LD_EXP 12
5852: ARRAY
5853: ST_TO_ADDR
// for i = 1 to tmp do
5854: LD_ADDR_VAR 0 10
5858: PUSH
5859: DOUBLE
5860: LD_INT 1
5862: DEC
5863: ST_TO_ADDR
5864: LD_VAR 0 9
5868: PUSH
5869: FOR_TO
5870: IFFALSE 5905
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5872: LD_INT 0
5874: PPUSH
5875: LD_INT 15
5877: PPUSH
5878: LD_VAR 0 9
5882: PPUSH
5883: CALL_OW 380
// units := units ^ CreateHuman ;
5887: LD_ADDR_VAR 0 7
5891: PUSH
5892: LD_VAR 0 7
5896: PUSH
5897: CALL_OW 44
5901: ADD
5902: ST_TO_ADDR
// end ;
5903: GO 5869
5905: POP
5906: POP
// end ; 2 :
5907: GO 6317
5909: LD_INT 2
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 5949
5917: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5918: LD_ADDR_VAR 0 8
5922: PUSH
5923: LD_INT 100
5925: PUSH
5926: LD_INT 150
5928: PUSH
5929: LD_INT 350
5931: PUSH
5932: LD_INT 500
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: PUSH
5941: LD_EXP 12
5945: ARRAY
5946: ST_TO_ADDR
// end ; 3 :
5947: GO 6317
5949: LD_INT 3
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5957
5955: GO 6297
5957: POP
// begin if bonus_num = 1 then
5958: LD_EXP 12
5962: PUSH
5963: LD_INT 1
5965: EQUAL
5966: IFFALSE 5976
// ignore_wave := true ;
5968: LD_ADDR_EXP 13
5972: PUSH
5973: LD_INT 1
5975: ST_TO_ADDR
// if bonus_num = 2 then
5976: LD_EXP 12
5980: PUSH
5981: LD_INT 2
5983: EQUAL
5984: IFFALSE 6104
// begin for i = 1 to 2 do
5986: LD_ADDR_VAR 0 10
5990: PUSH
5991: DOUBLE
5992: LD_INT 1
5994: DEC
5995: ST_TO_ADDR
5996: LD_INT 2
5998: PUSH
5999: FOR_TO
6000: IFFALSE 6102
// begin uc_nation := nation_arabian ;
6002: LD_ADDR_OWVAR 21
6006: PUSH
6007: LD_INT 2
6009: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6010: LD_ADDR_OWVAR 37
6014: PUSH
6015: LD_INT 14
6017: ST_TO_ADDR
// vc_engine := engine_siberite ;
6018: LD_ADDR_OWVAR 39
6022: PUSH
6023: LD_INT 3
6025: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6026: LD_ADDR_OWVAR 38
6030: PUSH
6031: LD_INT 2
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_INT 2
6046: PPUSH
6047: CALL_OW 12
6051: ARRAY
6052: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6053: LD_ADDR_OWVAR 40
6057: PUSH
6058: LD_INT 28
6060: PUSH
6061: LD_INT 27
6063: PUSH
6064: LD_INT 25
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 1
6074: PPUSH
6075: LD_INT 3
6077: PPUSH
6078: CALL_OW 12
6082: ARRAY
6083: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_VAR 0 7
6093: PUSH
6094: CALL_OW 45
6098: ADD
6099: ST_TO_ADDR
// end ;
6100: GO 5999
6102: POP
6103: POP
// end ; if bonus_num = 3 then
6104: LD_EXP 12
6108: PUSH
6109: LD_INT 3
6111: EQUAL
6112: IFFALSE 6236
// begin for i = 1 to 4 do
6114: LD_ADDR_VAR 0 10
6118: PUSH
6119: DOUBLE
6120: LD_INT 1
6122: DEC
6123: ST_TO_ADDR
6124: LD_INT 4
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6234
// begin uc_nation := nation_arabian ;
6130: LD_ADDR_OWVAR 21
6134: PUSH
6135: LD_INT 2
6137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6138: LD_ADDR_OWVAR 37
6142: PUSH
6143: LD_INT 14
6145: ST_TO_ADDR
// vc_engine := engine_siberite ;
6146: LD_ADDR_OWVAR 39
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 38
6158: PUSH
6159: LD_INT 2
6161: PUSH
6162: LD_INT 5
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6181: LD_ADDR_OWVAR 40
6185: PUSH
6186: LD_INT 28
6188: PUSH
6189: LD_INT 27
6191: PUSH
6192: LD_INT 28
6194: PUSH
6195: LD_INT 25
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 1
6206: PPUSH
6207: LD_INT 4
6209: PPUSH
6210: CALL_OW 12
6214: ARRAY
6215: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6216: LD_ADDR_VAR 0 7
6220: PUSH
6221: LD_VAR 0 7
6225: PUSH
6226: CALL_OW 45
6230: ADD
6231: ST_TO_ADDR
// end ;
6232: GO 6127
6234: POP
6235: POP
// end ; if bonus_num = 4 then
6236: LD_EXP 12
6240: PUSH
6241: LD_INT 4
6243: EQUAL
6244: IFFALSE 6295
// for i = 1 to 3 do
6246: LD_ADDR_VAR 0 10
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_INT 3
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6293
// begin PrepareHuman ( false , 3 , 8 ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 3
6267: PPUSH
6268: LD_INT 8
6270: PPUSH
6271: CALL_OW 380
// units := units ^ CreateHuman ;
6275: LD_ADDR_VAR 0 7
6279: PUSH
6280: LD_VAR 0 7
6284: PUSH
6285: CALL_OW 44
6289: ADD
6290: ST_TO_ADDR
// end ;
6291: GO 6259
6293: POP
6294: POP
// end ; 4 :
6295: GO 6317
6297: LD_INT 4
6299: DOUBLE
6300: EQUAL
6301: IFTRUE 6305
6303: GO 6316
6305: POP
// off := false ; end ;
6306: LD_ADDR_VAR 0 6
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
6314: GO 6317
6316: POP
// DialogueOff ;
6317: CALL_OW 7
// if not off then
6321: LD_VAR 0 6
6325: NOT
6326: IFFALSE 6332
// exit else
6328: GO 6511
6330: GO 6385
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6332: LD_OWVAR 2
6336: PPUSH
6337: LD_INT 12
6339: PPUSH
6340: LD_INT 0
6342: PPUSH
6343: LD_INT 23
6345: PPUSH
6346: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6350: LD_EXP 10
6354: PPUSH
6355: LD_STRING DVr-3
6357: PUSH
6358: LD_STRING DVr-3a
6360: PUSH
6361: LD_STRING DVr-3b
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 1
6371: PPUSH
6372: LD_INT 3
6374: PPUSH
6375: CALL_OW 12
6379: ARRAY
6380: PPUSH
6381: CALL_OW 94
// end ; if units then
6385: LD_VAR 0 7
6389: IFFALSE 6453
// for i in units do
6391: LD_ADDR_VAR 0 10
6395: PUSH
6396: LD_VAR 0 7
6400: PUSH
6401: FOR_IN
6402: IFFALSE 6451
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6404: LD_VAR 0 10
6408: PPUSH
6409: LD_INT 92
6411: PPUSH
6412: LD_INT 49
6414: PPUSH
6415: LD_INT 20
6417: PPUSH
6418: LD_INT 0
6420: PPUSH
6421: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6425: LD_VAR 0 10
6429: PPUSH
6430: CALL_OW 250
6434: PPUSH
6435: LD_VAR 0 10
6439: PPUSH
6440: CALL_OW 251
6444: PPUSH
6445: CALL_OW 494
// end ;
6449: GO 6401
6451: POP
6452: POP
// if crates then
6453: LD_VAR 0 8
6457: IFFALSE 6511
// for i = 1 to ( crates div 50 ) do
6459: LD_ADDR_VAR 0 10
6463: PUSH
6464: DOUBLE
6465: LD_INT 1
6467: DEC
6468: ST_TO_ADDR
6469: LD_VAR 0 8
6473: PUSH
6474: LD_INT 50
6476: DIV
6477: PUSH
6478: FOR_TO
6479: IFFALSE 6509
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6481: LD_INT 5
6483: PPUSH
6484: LD_INT 92
6486: PPUSH
6487: LD_INT 49
6489: PPUSH
6490: LD_INT 30
6492: PPUSH
6493: LD_INT 1
6495: PPUSH
6496: CALL_OW 56
// wait ( 0 0$02 ) ;
6500: LD_INT 70
6502: PPUSH
6503: CALL_OW 67
// end ;
6507: GO 6478
6509: POP
6510: POP
// end ;
6511: PPOPN 10
6513: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6514: LD_VAR 0 1
6518: PPUSH
6519: LD_VAR 0 2
6523: PPUSH
6524: LD_VAR 0 3
6528: PPUSH
6529: CALL 20093 0 3
// end ;
6533: PPOPN 3
6535: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL 20101 0 1
// end ; end_of_file
6545: PPOPN 1
6547: END
// every 0 0$01 trigger not game_over do
6548: LD_EXP 7
6552: NOT
6553: IFFALSE 6586
6555: GO 6557
6557: DISABLE
// begin enable ;
6558: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6559: LD_ADDR_OWVAR 47
6563: PUSH
6564: LD_STRING #tick
6566: PUSH
6567: LD_OWVAR 1
6571: PUSH
6572: LD_STRING #points
6574: PUSH
6575: LD_EXP 8
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: ST_TO_ADDR
// end ;
6586: END
// every 0 0$01 trigger game_over do
6587: LD_EXP 7
6591: IFFALSE 6650
6593: GO 6595
6595: DISABLE
// begin Wait ( 0 0$02 ) ;
6596: LD_INT 70
6598: PPUSH
6599: CALL_OW 67
// DialogueOn ;
6603: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6607: LD_ADDR_OWVAR 47
6611: PUSH
6612: LD_STRING #game-points
6614: PUSH
6615: LD_OWVAR 78
6619: PUSH
6620: LD_EXP 8
6624: PUSH
6625: LD_STRING #game-time
6627: PUSH
6628: LD_OWVAR 1
6632: PUSH
6633: LD_STRING #game-difficulty
6635: PUSH
6636: LD_OWVAR 67
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: ST_TO_ADDR
// end ; end_of_file
6650: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
6651: LD_OWVAR 1
6655: PUSH
6656: LD_INT 52500
6658: LESS
6659: IFFALSE 6683
6661: GO 6663
6663: DISABLE
// begin enable ;
6664: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
6665: LD_INT 1
6667: PPUSH
6668: LD_INT 5
6670: PPUSH
6671: CALL_OW 12
6675: PPUSH
6676: LD_INT 1
6678: PPUSH
6679: CALL_OW 57
// end ; end_of_file
6683: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
6684: LD_INT 0
6686: PPUSH
// ar_miner := 81 ;
6687: LD_ADDR_EXP 21
6691: PUSH
6692: LD_INT 81
6694: ST_TO_ADDR
// ar_crane := 88 ;
6695: LD_ADDR_EXP 20
6699: PUSH
6700: LD_INT 88
6702: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
6703: LD_ADDR_EXP 15
6707: PUSH
6708: LD_INT 89
6710: ST_TO_ADDR
// us_hack := 99 ;
6711: LD_ADDR_EXP 16
6715: PUSH
6716: LD_INT 99
6718: ST_TO_ADDR
// us_artillery := 97 ;
6719: LD_ADDR_EXP 17
6723: PUSH
6724: LD_INT 97
6726: ST_TO_ADDR
// ar_bio_bomb := 91 ;
6727: LD_ADDR_EXP 18
6731: PUSH
6732: LD_INT 91
6734: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
6735: LD_ADDR_EXP 19
6739: PUSH
6740: LD_INT 92
6742: ST_TO_ADDR
// ru_radar := 98 ;
6743: LD_ADDR_EXP 14
6747: PUSH
6748: LD_INT 98
6750: ST_TO_ADDR
// tech_Artillery := 80 ;
6751: LD_ADDR_EXP 22
6755: PUSH
6756: LD_INT 80
6758: ST_TO_ADDR
// tech_RadMat := 81 ;
6759: LD_ADDR_EXP 23
6763: PUSH
6764: LD_INT 81
6766: ST_TO_ADDR
// tech_BasicTools := 82 ;
6767: LD_ADDR_EXP 24
6771: PUSH
6772: LD_INT 82
6774: ST_TO_ADDR
// tech_Cargo := 83 ;
6775: LD_ADDR_EXP 25
6779: PUSH
6780: LD_INT 83
6782: ST_TO_ADDR
// tech_Track := 84 ;
6783: LD_ADDR_EXP 26
6787: PUSH
6788: LD_INT 84
6790: ST_TO_ADDR
// tech_Crane := 85 ;
6791: LD_ADDR_EXP 27
6795: PUSH
6796: LD_INT 85
6798: ST_TO_ADDR
// tech_Bulldozer := 86 ;
6799: LD_ADDR_EXP 28
6803: PUSH
6804: LD_INT 86
6806: ST_TO_ADDR
// tech_Hovercraft := 87 ;
6807: LD_ADDR_EXP 29
6811: PUSH
6812: LD_INT 87
6814: ST_TO_ADDR
// end ;
6815: LD_VAR 0 1
6819: RET
// every 1 do
6820: GO 6822
6822: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
6823: CALL 6684 0 0
6827: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6828: LD_VAR 0 2
6832: PUSH
6833: LD_INT 100
6835: EQUAL
6836: IFFALSE 7785
// begin if not StreamModeActive then
6838: LD_EXP 30
6842: NOT
6843: IFFALSE 6853
// StreamModeActive := true ;
6845: LD_ADDR_EXP 30
6849: PUSH
6850: LD_INT 1
6852: ST_TO_ADDR
// if p3 = 0 then
6853: LD_VAR 0 3
6857: PUSH
6858: LD_INT 0
6860: EQUAL
6861: IFFALSE 6867
// InitStreamMode ;
6863: CALL 7943 0 0
// if p3 = 1 then
6867: LD_VAR 0 3
6871: PUSH
6872: LD_INT 1
6874: EQUAL
6875: IFFALSE 6885
// sRocket := true ;
6877: LD_ADDR_EXP 35
6881: PUSH
6882: LD_INT 1
6884: ST_TO_ADDR
// if p3 = 2 then
6885: LD_VAR 0 3
6889: PUSH
6890: LD_INT 2
6892: EQUAL
6893: IFFALSE 6903
// sSpeed := true ;
6895: LD_ADDR_EXP 34
6899: PUSH
6900: LD_INT 1
6902: ST_TO_ADDR
// if p3 = 3 then
6903: LD_VAR 0 3
6907: PUSH
6908: LD_INT 3
6910: EQUAL
6911: IFFALSE 6921
// sEngine := true ;
6913: LD_ADDR_EXP 36
6917: PUSH
6918: LD_INT 1
6920: ST_TO_ADDR
// if p3 = 4 then
6921: LD_VAR 0 3
6925: PUSH
6926: LD_INT 4
6928: EQUAL
6929: IFFALSE 6939
// sSpec := true ;
6931: LD_ADDR_EXP 33
6935: PUSH
6936: LD_INT 1
6938: ST_TO_ADDR
// if p3 = 5 then
6939: LD_VAR 0 3
6943: PUSH
6944: LD_INT 5
6946: EQUAL
6947: IFFALSE 6957
// sLevel := true ;
6949: LD_ADDR_EXP 37
6953: PUSH
6954: LD_INT 1
6956: ST_TO_ADDR
// if p3 = 6 then
6957: LD_VAR 0 3
6961: PUSH
6962: LD_INT 6
6964: EQUAL
6965: IFFALSE 6975
// sArmoury := true ;
6967: LD_ADDR_EXP 38
6971: PUSH
6972: LD_INT 1
6974: ST_TO_ADDR
// if p3 = 7 then
6975: LD_VAR 0 3
6979: PUSH
6980: LD_INT 7
6982: EQUAL
6983: IFFALSE 6993
// sRadar := true ;
6985: LD_ADDR_EXP 39
6989: PUSH
6990: LD_INT 1
6992: ST_TO_ADDR
// if p3 = 8 then
6993: LD_VAR 0 3
6997: PUSH
6998: LD_INT 8
7000: EQUAL
7001: IFFALSE 7011
// sBunker := true ;
7003: LD_ADDR_EXP 40
7007: PUSH
7008: LD_INT 1
7010: ST_TO_ADDR
// if p3 = 9 then
7011: LD_VAR 0 3
7015: PUSH
7016: LD_INT 9
7018: EQUAL
7019: IFFALSE 7029
// sHack := true ;
7021: LD_ADDR_EXP 41
7025: PUSH
7026: LD_INT 1
7028: ST_TO_ADDR
// if p3 = 10 then
7029: LD_VAR 0 3
7033: PUSH
7034: LD_INT 10
7036: EQUAL
7037: IFFALSE 7047
// sFire := true ;
7039: LD_ADDR_EXP 42
7043: PUSH
7044: LD_INT 1
7046: ST_TO_ADDR
// if p3 = 11 then
7047: LD_VAR 0 3
7051: PUSH
7052: LD_INT 11
7054: EQUAL
7055: IFFALSE 7065
// sRefresh := true ;
7057: LD_ADDR_EXP 43
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
// if p3 = 12 then
7065: LD_VAR 0 3
7069: PUSH
7070: LD_INT 12
7072: EQUAL
7073: IFFALSE 7083
// sExp := true ;
7075: LD_ADDR_EXP 44
7079: PUSH
7080: LD_INT 1
7082: ST_TO_ADDR
// if p3 = 13 then
7083: LD_VAR 0 3
7087: PUSH
7088: LD_INT 13
7090: EQUAL
7091: IFFALSE 7101
// sDepot := true ;
7093: LD_ADDR_EXP 45
7097: PUSH
7098: LD_INT 1
7100: ST_TO_ADDR
// if p3 = 14 then
7101: LD_VAR 0 3
7105: PUSH
7106: LD_INT 14
7108: EQUAL
7109: IFFALSE 7119
// sFlag := true ;
7111: LD_ADDR_EXP 46
7115: PUSH
7116: LD_INT 1
7118: ST_TO_ADDR
// if p3 = 15 then
7119: LD_VAR 0 3
7123: PUSH
7124: LD_INT 15
7126: EQUAL
7127: IFFALSE 7137
// sKamikadze := true ;
7129: LD_ADDR_EXP 54
7133: PUSH
7134: LD_INT 1
7136: ST_TO_ADDR
// if p3 = 16 then
7137: LD_VAR 0 3
7141: PUSH
7142: LD_INT 16
7144: EQUAL
7145: IFFALSE 7155
// sTroll := true ;
7147: LD_ADDR_EXP 55
7151: PUSH
7152: LD_INT 1
7154: ST_TO_ADDR
// if p3 = 17 then
7155: LD_VAR 0 3
7159: PUSH
7160: LD_INT 17
7162: EQUAL
7163: IFFALSE 7173
// sSlow := true ;
7165: LD_ADDR_EXP 56
7169: PUSH
7170: LD_INT 1
7172: ST_TO_ADDR
// if p3 = 18 then
7173: LD_VAR 0 3
7177: PUSH
7178: LD_INT 18
7180: EQUAL
7181: IFFALSE 7191
// sLack := true ;
7183: LD_ADDR_EXP 57
7187: PUSH
7188: LD_INT 1
7190: ST_TO_ADDR
// if p3 = 19 then
7191: LD_VAR 0 3
7195: PUSH
7196: LD_INT 19
7198: EQUAL
7199: IFFALSE 7209
// sTank := true ;
7201: LD_ADDR_EXP 59
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// if p3 = 20 then
7209: LD_VAR 0 3
7213: PUSH
7214: LD_INT 20
7216: EQUAL
7217: IFFALSE 7227
// sRemote := true ;
7219: LD_ADDR_EXP 60
7223: PUSH
7224: LD_INT 1
7226: ST_TO_ADDR
// if p3 = 21 then
7227: LD_VAR 0 3
7231: PUSH
7232: LD_INT 21
7234: EQUAL
7235: IFFALSE 7245
// sPowell := true ;
7237: LD_ADDR_EXP 61
7241: PUSH
7242: LD_INT 1
7244: ST_TO_ADDR
// if p3 = 22 then
7245: LD_VAR 0 3
7249: PUSH
7250: LD_INT 22
7252: EQUAL
7253: IFFALSE 7263
// sTeleport := true ;
7255: LD_ADDR_EXP 64
7259: PUSH
7260: LD_INT 1
7262: ST_TO_ADDR
// if p3 = 23 then
7263: LD_VAR 0 3
7267: PUSH
7268: LD_INT 23
7270: EQUAL
7271: IFFALSE 7281
// sOilTower := true ;
7273: LD_ADDR_EXP 66
7277: PUSH
7278: LD_INT 1
7280: ST_TO_ADDR
// if p3 = 24 then
7281: LD_VAR 0 3
7285: PUSH
7286: LD_INT 24
7288: EQUAL
7289: IFFALSE 7299
// sShovel := true ;
7291: LD_ADDR_EXP 67
7295: PUSH
7296: LD_INT 1
7298: ST_TO_ADDR
// if p3 = 25 then
7299: LD_VAR 0 3
7303: PUSH
7304: LD_INT 25
7306: EQUAL
7307: IFFALSE 7317
// sSheik := true ;
7309: LD_ADDR_EXP 68
7313: PUSH
7314: LD_INT 1
7316: ST_TO_ADDR
// if p3 = 26 then
7317: LD_VAR 0 3
7321: PUSH
7322: LD_INT 26
7324: EQUAL
7325: IFFALSE 7335
// sEarthquake := true ;
7327: LD_ADDR_EXP 70
7331: PUSH
7332: LD_INT 1
7334: ST_TO_ADDR
// if p3 = 27 then
7335: LD_VAR 0 3
7339: PUSH
7340: LD_INT 27
7342: EQUAL
7343: IFFALSE 7353
// sAI := true ;
7345: LD_ADDR_EXP 71
7349: PUSH
7350: LD_INT 1
7352: ST_TO_ADDR
// if p3 = 28 then
7353: LD_VAR 0 3
7357: PUSH
7358: LD_INT 28
7360: EQUAL
7361: IFFALSE 7371
// sCargo := true ;
7363: LD_ADDR_EXP 74
7367: PUSH
7368: LD_INT 1
7370: ST_TO_ADDR
// if p3 = 29 then
7371: LD_VAR 0 3
7375: PUSH
7376: LD_INT 29
7378: EQUAL
7379: IFFALSE 7389
// sDLaser := true ;
7381: LD_ADDR_EXP 75
7385: PUSH
7386: LD_INT 1
7388: ST_TO_ADDR
// if p3 = 30 then
7389: LD_VAR 0 3
7393: PUSH
7394: LD_INT 30
7396: EQUAL
7397: IFFALSE 7407
// sExchange := true ;
7399: LD_ADDR_EXP 76
7403: PUSH
7404: LD_INT 1
7406: ST_TO_ADDR
// if p3 = 31 then
7407: LD_VAR 0 3
7411: PUSH
7412: LD_INT 31
7414: EQUAL
7415: IFFALSE 7425
// sFac := true ;
7417: LD_ADDR_EXP 77
7421: PUSH
7422: LD_INT 1
7424: ST_TO_ADDR
// if p3 = 32 then
7425: LD_VAR 0 3
7429: PUSH
7430: LD_INT 32
7432: EQUAL
7433: IFFALSE 7443
// sPower := true ;
7435: LD_ADDR_EXP 78
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// if p3 = 33 then
7443: LD_VAR 0 3
7447: PUSH
7448: LD_INT 33
7450: EQUAL
7451: IFFALSE 7461
// sRandom := true ;
7453: LD_ADDR_EXP 79
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// if p3 = 34 then
7461: LD_VAR 0 3
7465: PUSH
7466: LD_INT 34
7468: EQUAL
7469: IFFALSE 7479
// sShield := true ;
7471: LD_ADDR_EXP 80
7475: PUSH
7476: LD_INT 1
7478: ST_TO_ADDR
// if p3 = 35 then
7479: LD_VAR 0 3
7483: PUSH
7484: LD_INT 35
7486: EQUAL
7487: IFFALSE 7497
// sTime := true ;
7489: LD_ADDR_EXP 81
7493: PUSH
7494: LD_INT 1
7496: ST_TO_ADDR
// if p3 = 36 then
7497: LD_VAR 0 3
7501: PUSH
7502: LD_INT 36
7504: EQUAL
7505: IFFALSE 7515
// sTools := true ;
7507: LD_ADDR_EXP 82
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// if p3 = 101 then
7515: LD_VAR 0 3
7519: PUSH
7520: LD_INT 101
7522: EQUAL
7523: IFFALSE 7533
// sSold := true ;
7525: LD_ADDR_EXP 47
7529: PUSH
7530: LD_INT 1
7532: ST_TO_ADDR
// if p3 = 102 then
7533: LD_VAR 0 3
7537: PUSH
7538: LD_INT 102
7540: EQUAL
7541: IFFALSE 7551
// sDiff := true ;
7543: LD_ADDR_EXP 48
7547: PUSH
7548: LD_INT 1
7550: ST_TO_ADDR
// if p3 = 103 then
7551: LD_VAR 0 3
7555: PUSH
7556: LD_INT 103
7558: EQUAL
7559: IFFALSE 7569
// sFog := true ;
7561: LD_ADDR_EXP 51
7565: PUSH
7566: LD_INT 1
7568: ST_TO_ADDR
// if p3 = 104 then
7569: LD_VAR 0 3
7573: PUSH
7574: LD_INT 104
7576: EQUAL
7577: IFFALSE 7587
// sReset := true ;
7579: LD_ADDR_EXP 52
7583: PUSH
7584: LD_INT 1
7586: ST_TO_ADDR
// if p3 = 105 then
7587: LD_VAR 0 3
7591: PUSH
7592: LD_INT 105
7594: EQUAL
7595: IFFALSE 7605
// sSun := true ;
7597: LD_ADDR_EXP 53
7601: PUSH
7602: LD_INT 1
7604: ST_TO_ADDR
// if p3 = 106 then
7605: LD_VAR 0 3
7609: PUSH
7610: LD_INT 106
7612: EQUAL
7613: IFFALSE 7623
// sTiger := true ;
7615: LD_ADDR_EXP 49
7619: PUSH
7620: LD_INT 1
7622: ST_TO_ADDR
// if p3 = 107 then
7623: LD_VAR 0 3
7627: PUSH
7628: LD_INT 107
7630: EQUAL
7631: IFFALSE 7641
// sBomb := true ;
7633: LD_ADDR_EXP 50
7637: PUSH
7638: LD_INT 1
7640: ST_TO_ADDR
// if p3 = 108 then
7641: LD_VAR 0 3
7645: PUSH
7646: LD_INT 108
7648: EQUAL
7649: IFFALSE 7659
// sWound := true ;
7651: LD_ADDR_EXP 58
7655: PUSH
7656: LD_INT 1
7658: ST_TO_ADDR
// if p3 = 109 then
7659: LD_VAR 0 3
7663: PUSH
7664: LD_INT 109
7666: EQUAL
7667: IFFALSE 7677
// sBetray := true ;
7669: LD_ADDR_EXP 62
7673: PUSH
7674: LD_INT 1
7676: ST_TO_ADDR
// if p3 = 110 then
7677: LD_VAR 0 3
7681: PUSH
7682: LD_INT 110
7684: EQUAL
7685: IFFALSE 7695
// sContamin := true ;
7687: LD_ADDR_EXP 63
7691: PUSH
7692: LD_INT 1
7694: ST_TO_ADDR
// if p3 = 111 then
7695: LD_VAR 0 3
7699: PUSH
7700: LD_INT 111
7702: EQUAL
7703: IFFALSE 7713
// sOil := true ;
7705: LD_ADDR_EXP 65
7709: PUSH
7710: LD_INT 1
7712: ST_TO_ADDR
// if p3 = 112 then
7713: LD_VAR 0 3
7717: PUSH
7718: LD_INT 112
7720: EQUAL
7721: IFFALSE 7731
// sStu := true ;
7723: LD_ADDR_EXP 69
7727: PUSH
7728: LD_INT 1
7730: ST_TO_ADDR
// if p3 = 113 then
7731: LD_VAR 0 3
7735: PUSH
7736: LD_INT 113
7738: EQUAL
7739: IFFALSE 7749
// sBazooka := true ;
7741: LD_ADDR_EXP 72
7745: PUSH
7746: LD_INT 1
7748: ST_TO_ADDR
// if p3 = 114 then
7749: LD_VAR 0 3
7753: PUSH
7754: LD_INT 114
7756: EQUAL
7757: IFFALSE 7767
// sMortar := true ;
7759: LD_ADDR_EXP 73
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// if p3 = 115 then
7767: LD_VAR 0 3
7771: PUSH
7772: LD_INT 115
7774: EQUAL
7775: IFFALSE 7785
// sRanger := true ;
7777: LD_ADDR_EXP 83
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// end ; if p2 = 101 then
7785: LD_VAR 0 2
7789: PUSH
7790: LD_INT 101
7792: EQUAL
7793: IFFALSE 7921
// begin case p3 of 1 :
7795: LD_VAR 0 3
7799: PUSH
7800: LD_INT 1
7802: DOUBLE
7803: EQUAL
7804: IFTRUE 7808
7806: GO 7815
7808: POP
// hHackUnlimitedResources ; 2 :
7809: CALL 18956 0 0
7813: GO 7921
7815: LD_INT 2
7817: DOUBLE
7818: EQUAL
7819: IFTRUE 7823
7821: GO 7830
7823: POP
// hHackSetLevel10 ; 3 :
7824: CALL 19089 0 0
7828: GO 7921
7830: LD_INT 3
7832: DOUBLE
7833: EQUAL
7834: IFTRUE 7838
7836: GO 7845
7838: POP
// hHackSetLevel10YourUnits ; 4 :
7839: CALL 19174 0 0
7843: GO 7921
7845: LD_INT 4
7847: DOUBLE
7848: EQUAL
7849: IFTRUE 7853
7851: GO 7860
7853: POP
// hHackInvincible ; 5 :
7854: CALL 19622 0 0
7858: GO 7921
7860: LD_INT 5
7862: DOUBLE
7863: EQUAL
7864: IFTRUE 7868
7866: GO 7875
7868: POP
// hHackInvisible ; 6 :
7869: CALL 19733 0 0
7873: GO 7921
7875: LD_INT 6
7877: DOUBLE
7878: EQUAL
7879: IFTRUE 7883
7881: GO 7890
7883: POP
// hHackChangeYourSide ; 7 :
7884: CALL 19790 0 0
7888: GO 7921
7890: LD_INT 7
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 7905
7898: POP
// hHackChangeUnitSide ; 8 :
7899: CALL 19832 0 0
7903: GO 7921
7905: LD_INT 8
7907: DOUBLE
7908: EQUAL
7909: IFTRUE 7913
7911: GO 7920
7913: POP
// hHackFog ; end ;
7914: CALL 19933 0 0
7918: GO 7921
7920: POP
// end ; end ;
7921: PPOPN 6
7923: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7924: GO 7926
7926: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7927: LD_STRING initStreamRollete();
7929: PPUSH
7930: CALL_OW 559
// InitStreamMode ;
7934: CALL 7943 0 0
// DefineStreamItems ( ) ;
7938: CALL 8383 0 0
// end ;
7942: END
// function InitStreamMode ; begin
7943: LD_INT 0
7945: PPUSH
// streamModeActive := false ;
7946: LD_ADDR_EXP 30
7950: PUSH
7951: LD_INT 0
7953: ST_TO_ADDR
// normalCounter := 36 ;
7954: LD_ADDR_EXP 31
7958: PUSH
7959: LD_INT 36
7961: ST_TO_ADDR
// hardcoreCounter := 16 ;
7962: LD_ADDR_EXP 32
7966: PUSH
7967: LD_INT 16
7969: ST_TO_ADDR
// sRocket := false ;
7970: LD_ADDR_EXP 35
7974: PUSH
7975: LD_INT 0
7977: ST_TO_ADDR
// sSpeed := false ;
7978: LD_ADDR_EXP 34
7982: PUSH
7983: LD_INT 0
7985: ST_TO_ADDR
// sEngine := false ;
7986: LD_ADDR_EXP 36
7990: PUSH
7991: LD_INT 0
7993: ST_TO_ADDR
// sSpec := false ;
7994: LD_ADDR_EXP 33
7998: PUSH
7999: LD_INT 0
8001: ST_TO_ADDR
// sLevel := false ;
8002: LD_ADDR_EXP 37
8006: PUSH
8007: LD_INT 0
8009: ST_TO_ADDR
// sArmoury := false ;
8010: LD_ADDR_EXP 38
8014: PUSH
8015: LD_INT 0
8017: ST_TO_ADDR
// sRadar := false ;
8018: LD_ADDR_EXP 39
8022: PUSH
8023: LD_INT 0
8025: ST_TO_ADDR
// sBunker := false ;
8026: LD_ADDR_EXP 40
8030: PUSH
8031: LD_INT 0
8033: ST_TO_ADDR
// sHack := false ;
8034: LD_ADDR_EXP 41
8038: PUSH
8039: LD_INT 0
8041: ST_TO_ADDR
// sFire := false ;
8042: LD_ADDR_EXP 42
8046: PUSH
8047: LD_INT 0
8049: ST_TO_ADDR
// sRefresh := false ;
8050: LD_ADDR_EXP 43
8054: PUSH
8055: LD_INT 0
8057: ST_TO_ADDR
// sExp := false ;
8058: LD_ADDR_EXP 44
8062: PUSH
8063: LD_INT 0
8065: ST_TO_ADDR
// sDepot := false ;
8066: LD_ADDR_EXP 45
8070: PUSH
8071: LD_INT 0
8073: ST_TO_ADDR
// sFlag := false ;
8074: LD_ADDR_EXP 46
8078: PUSH
8079: LD_INT 0
8081: ST_TO_ADDR
// sKamikadze := false ;
8082: LD_ADDR_EXP 54
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// sTroll := false ;
8090: LD_ADDR_EXP 55
8094: PUSH
8095: LD_INT 0
8097: ST_TO_ADDR
// sSlow := false ;
8098: LD_ADDR_EXP 56
8102: PUSH
8103: LD_INT 0
8105: ST_TO_ADDR
// sLack := false ;
8106: LD_ADDR_EXP 57
8110: PUSH
8111: LD_INT 0
8113: ST_TO_ADDR
// sTank := false ;
8114: LD_ADDR_EXP 59
8118: PUSH
8119: LD_INT 0
8121: ST_TO_ADDR
// sRemote := false ;
8122: LD_ADDR_EXP 60
8126: PUSH
8127: LD_INT 0
8129: ST_TO_ADDR
// sPowell := false ;
8130: LD_ADDR_EXP 61
8134: PUSH
8135: LD_INT 0
8137: ST_TO_ADDR
// sTeleport := false ;
8138: LD_ADDR_EXP 64
8142: PUSH
8143: LD_INT 0
8145: ST_TO_ADDR
// sOilTower := false ;
8146: LD_ADDR_EXP 66
8150: PUSH
8151: LD_INT 0
8153: ST_TO_ADDR
// sShovel := false ;
8154: LD_ADDR_EXP 67
8158: PUSH
8159: LD_INT 0
8161: ST_TO_ADDR
// sSheik := false ;
8162: LD_ADDR_EXP 68
8166: PUSH
8167: LD_INT 0
8169: ST_TO_ADDR
// sEarthquake := false ;
8170: LD_ADDR_EXP 70
8174: PUSH
8175: LD_INT 0
8177: ST_TO_ADDR
// sAI := false ;
8178: LD_ADDR_EXP 71
8182: PUSH
8183: LD_INT 0
8185: ST_TO_ADDR
// sCargo := false ;
8186: LD_ADDR_EXP 74
8190: PUSH
8191: LD_INT 0
8193: ST_TO_ADDR
// sDLaser := false ;
8194: LD_ADDR_EXP 75
8198: PUSH
8199: LD_INT 0
8201: ST_TO_ADDR
// sExchange := false ;
8202: LD_ADDR_EXP 76
8206: PUSH
8207: LD_INT 0
8209: ST_TO_ADDR
// sFac := false ;
8210: LD_ADDR_EXP 77
8214: PUSH
8215: LD_INT 0
8217: ST_TO_ADDR
// sPower := false ;
8218: LD_ADDR_EXP 78
8222: PUSH
8223: LD_INT 0
8225: ST_TO_ADDR
// sRandom := false ;
8226: LD_ADDR_EXP 79
8230: PUSH
8231: LD_INT 0
8233: ST_TO_ADDR
// sShield := false ;
8234: LD_ADDR_EXP 80
8238: PUSH
8239: LD_INT 0
8241: ST_TO_ADDR
// sTime := false ;
8242: LD_ADDR_EXP 81
8246: PUSH
8247: LD_INT 0
8249: ST_TO_ADDR
// sTools := false ;
8250: LD_ADDR_EXP 82
8254: PUSH
8255: LD_INT 0
8257: ST_TO_ADDR
// sSold := false ;
8258: LD_ADDR_EXP 47
8262: PUSH
8263: LD_INT 0
8265: ST_TO_ADDR
// sDiff := false ;
8266: LD_ADDR_EXP 48
8270: PUSH
8271: LD_INT 0
8273: ST_TO_ADDR
// sFog := false ;
8274: LD_ADDR_EXP 51
8278: PUSH
8279: LD_INT 0
8281: ST_TO_ADDR
// sReset := false ;
8282: LD_ADDR_EXP 52
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// sSun := false ;
8290: LD_ADDR_EXP 53
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// sTiger := false ;
8298: LD_ADDR_EXP 49
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// sBomb := false ;
8306: LD_ADDR_EXP 50
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// sWound := false ;
8314: LD_ADDR_EXP 58
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// sBetray := false ;
8322: LD_ADDR_EXP 62
8326: PUSH
8327: LD_INT 0
8329: ST_TO_ADDR
// sContamin := false ;
8330: LD_ADDR_EXP 63
8334: PUSH
8335: LD_INT 0
8337: ST_TO_ADDR
// sOil := false ;
8338: LD_ADDR_EXP 65
8342: PUSH
8343: LD_INT 0
8345: ST_TO_ADDR
// sStu := false ;
8346: LD_ADDR_EXP 69
8350: PUSH
8351: LD_INT 0
8353: ST_TO_ADDR
// sBazooka := false ;
8354: LD_ADDR_EXP 72
8358: PUSH
8359: LD_INT 0
8361: ST_TO_ADDR
// sMortar := false ;
8362: LD_ADDR_EXP 73
8366: PUSH
8367: LD_INT 0
8369: ST_TO_ADDR
// sRanger := false ;
8370: LD_ADDR_EXP 83
8374: PUSH
8375: LD_INT 0
8377: ST_TO_ADDR
// end ;
8378: LD_VAR 0 1
8382: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8383: LD_INT 0
8385: PPUSH
8386: PPUSH
8387: PPUSH
8388: PPUSH
8389: PPUSH
// result := [ ] ;
8390: LD_ADDR_VAR 0 1
8394: PUSH
8395: EMPTY
8396: ST_TO_ADDR
// if campaign_id = 1 then
8397: LD_OWVAR 69
8401: PUSH
8402: LD_INT 1
8404: EQUAL
8405: IFFALSE 11343
// begin case mission_number of 1 :
8407: LD_OWVAR 70
8411: PUSH
8412: LD_INT 1
8414: DOUBLE
8415: EQUAL
8416: IFTRUE 8420
8418: GO 8484
8420: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8421: LD_ADDR_VAR 0 1
8425: PUSH
8426: LD_INT 2
8428: PUSH
8429: LD_INT 4
8431: PUSH
8432: LD_INT 11
8434: PUSH
8435: LD_INT 12
8437: PUSH
8438: LD_INT 15
8440: PUSH
8441: LD_INT 16
8443: PUSH
8444: LD_INT 22
8446: PUSH
8447: LD_INT 23
8449: PUSH
8450: LD_INT 26
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 101
8466: PUSH
8467: LD_INT 102
8469: PUSH
8470: LD_INT 106
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: ST_TO_ADDR
8482: GO 11341
8484: LD_INT 2
8486: DOUBLE
8487: EQUAL
8488: IFTRUE 8492
8490: GO 8564
8492: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8493: LD_ADDR_VAR 0 1
8497: PUSH
8498: LD_INT 2
8500: PUSH
8501: LD_INT 4
8503: PUSH
8504: LD_INT 11
8506: PUSH
8507: LD_INT 12
8509: PUSH
8510: LD_INT 15
8512: PUSH
8513: LD_INT 16
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_INT 23
8521: PUSH
8522: LD_INT 26
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: PUSH
8536: LD_INT 101
8538: PUSH
8539: LD_INT 102
8541: PUSH
8542: LD_INT 105
8544: PUSH
8545: LD_INT 106
8547: PUSH
8548: LD_INT 108
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: ST_TO_ADDR
8562: GO 11341
8564: LD_INT 3
8566: DOUBLE
8567: EQUAL
8568: IFTRUE 8572
8570: GO 8648
8572: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8573: LD_ADDR_VAR 0 1
8577: PUSH
8578: LD_INT 2
8580: PUSH
8581: LD_INT 4
8583: PUSH
8584: LD_INT 5
8586: PUSH
8587: LD_INT 11
8589: PUSH
8590: LD_INT 12
8592: PUSH
8593: LD_INT 15
8595: PUSH
8596: LD_INT 16
8598: PUSH
8599: LD_INT 22
8601: PUSH
8602: LD_INT 26
8604: PUSH
8605: LD_INT 36
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 101
8622: PUSH
8623: LD_INT 102
8625: PUSH
8626: LD_INT 105
8628: PUSH
8629: LD_INT 106
8631: PUSH
8632: LD_INT 108
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: ST_TO_ADDR
8646: GO 11341
8648: LD_INT 4
8650: DOUBLE
8651: EQUAL
8652: IFTRUE 8656
8654: GO 8740
8656: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8657: LD_ADDR_VAR 0 1
8661: PUSH
8662: LD_INT 2
8664: PUSH
8665: LD_INT 4
8667: PUSH
8668: LD_INT 5
8670: PUSH
8671: LD_INT 8
8673: PUSH
8674: LD_INT 11
8676: PUSH
8677: LD_INT 12
8679: PUSH
8680: LD_INT 15
8682: PUSH
8683: LD_INT 16
8685: PUSH
8686: LD_INT 22
8688: PUSH
8689: LD_INT 23
8691: PUSH
8692: LD_INT 26
8694: PUSH
8695: LD_INT 36
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 101
8714: PUSH
8715: LD_INT 102
8717: PUSH
8718: LD_INT 105
8720: PUSH
8721: LD_INT 106
8723: PUSH
8724: LD_INT 108
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: ST_TO_ADDR
8738: GO 11341
8740: LD_INT 5
8742: DOUBLE
8743: EQUAL
8744: IFTRUE 8748
8746: GO 8848
8748: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8749: LD_ADDR_VAR 0 1
8753: PUSH
8754: LD_INT 2
8756: PUSH
8757: LD_INT 4
8759: PUSH
8760: LD_INT 5
8762: PUSH
8763: LD_INT 6
8765: PUSH
8766: LD_INT 8
8768: PUSH
8769: LD_INT 11
8771: PUSH
8772: LD_INT 12
8774: PUSH
8775: LD_INT 15
8777: PUSH
8778: LD_INT 16
8780: PUSH
8781: LD_INT 22
8783: PUSH
8784: LD_INT 23
8786: PUSH
8787: LD_INT 25
8789: PUSH
8790: LD_INT 26
8792: PUSH
8793: LD_INT 36
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 101
8814: PUSH
8815: LD_INT 102
8817: PUSH
8818: LD_INT 105
8820: PUSH
8821: LD_INT 106
8823: PUSH
8824: LD_INT 108
8826: PUSH
8827: LD_INT 109
8829: PUSH
8830: LD_INT 112
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: ST_TO_ADDR
8846: GO 11341
8848: LD_INT 6
8850: DOUBLE
8851: EQUAL
8852: IFTRUE 8856
8854: GO 8976
8856: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8857: LD_ADDR_VAR 0 1
8861: PUSH
8862: LD_INT 2
8864: PUSH
8865: LD_INT 4
8867: PUSH
8868: LD_INT 5
8870: PUSH
8871: LD_INT 6
8873: PUSH
8874: LD_INT 8
8876: PUSH
8877: LD_INT 11
8879: PUSH
8880: LD_INT 12
8882: PUSH
8883: LD_INT 15
8885: PUSH
8886: LD_INT 16
8888: PUSH
8889: LD_INT 20
8891: PUSH
8892: LD_INT 21
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 23
8900: PUSH
8901: LD_INT 25
8903: PUSH
8904: LD_INT 26
8906: PUSH
8907: LD_INT 30
8909: PUSH
8910: LD_INT 31
8912: PUSH
8913: LD_INT 32
8915: PUSH
8916: LD_INT 36
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 101
8942: PUSH
8943: LD_INT 102
8945: PUSH
8946: LD_INT 105
8948: PUSH
8949: LD_INT 106
8951: PUSH
8952: LD_INT 108
8954: PUSH
8955: LD_INT 109
8957: PUSH
8958: LD_INT 112
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: ST_TO_ADDR
8974: GO 11341
8976: LD_INT 7
8978: DOUBLE
8979: EQUAL
8980: IFTRUE 8984
8982: GO 9084
8984: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8985: LD_ADDR_VAR 0 1
8989: PUSH
8990: LD_INT 2
8992: PUSH
8993: LD_INT 4
8995: PUSH
8996: LD_INT 5
8998: PUSH
8999: LD_INT 7
9001: PUSH
9002: LD_INT 11
9004: PUSH
9005: LD_INT 12
9007: PUSH
9008: LD_INT 15
9010: PUSH
9011: LD_INT 16
9013: PUSH
9014: LD_INT 20
9016: PUSH
9017: LD_INT 21
9019: PUSH
9020: LD_INT 22
9022: PUSH
9023: LD_INT 23
9025: PUSH
9026: LD_INT 25
9028: PUSH
9029: LD_INT 26
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: PUSH
9048: LD_INT 101
9050: PUSH
9051: LD_INT 102
9053: PUSH
9054: LD_INT 103
9056: PUSH
9057: LD_INT 105
9059: PUSH
9060: LD_INT 106
9062: PUSH
9063: LD_INT 108
9065: PUSH
9066: LD_INT 112
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: ST_TO_ADDR
9082: GO 11341
9084: LD_INT 8
9086: DOUBLE
9087: EQUAL
9088: IFTRUE 9092
9090: GO 9220
9092: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9093: LD_ADDR_VAR 0 1
9097: PUSH
9098: LD_INT 2
9100: PUSH
9101: LD_INT 4
9103: PUSH
9104: LD_INT 5
9106: PUSH
9107: LD_INT 6
9109: PUSH
9110: LD_INT 7
9112: PUSH
9113: LD_INT 8
9115: PUSH
9116: LD_INT 11
9118: PUSH
9119: LD_INT 12
9121: PUSH
9122: LD_INT 15
9124: PUSH
9125: LD_INT 16
9127: PUSH
9128: LD_INT 20
9130: PUSH
9131: LD_INT 21
9133: PUSH
9134: LD_INT 22
9136: PUSH
9137: LD_INT 23
9139: PUSH
9140: LD_INT 25
9142: PUSH
9143: LD_INT 26
9145: PUSH
9146: LD_INT 30
9148: PUSH
9149: LD_INT 31
9151: PUSH
9152: LD_INT 32
9154: PUSH
9155: LD_INT 36
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: PUSH
9180: LD_INT 101
9182: PUSH
9183: LD_INT 102
9185: PUSH
9186: LD_INT 103
9188: PUSH
9189: LD_INT 105
9191: PUSH
9192: LD_INT 106
9194: PUSH
9195: LD_INT 108
9197: PUSH
9198: LD_INT 109
9200: PUSH
9201: LD_INT 112
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: ST_TO_ADDR
9218: GO 11341
9220: LD_INT 9
9222: DOUBLE
9223: EQUAL
9224: IFTRUE 9228
9226: GO 9364
9228: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9229: LD_ADDR_VAR 0 1
9233: PUSH
9234: LD_INT 2
9236: PUSH
9237: LD_INT 4
9239: PUSH
9240: LD_INT 5
9242: PUSH
9243: LD_INT 6
9245: PUSH
9246: LD_INT 7
9248: PUSH
9249: LD_INT 8
9251: PUSH
9252: LD_INT 11
9254: PUSH
9255: LD_INT 12
9257: PUSH
9258: LD_INT 15
9260: PUSH
9261: LD_INT 16
9263: PUSH
9264: LD_INT 20
9266: PUSH
9267: LD_INT 21
9269: PUSH
9270: LD_INT 22
9272: PUSH
9273: LD_INT 23
9275: PUSH
9276: LD_INT 25
9278: PUSH
9279: LD_INT 26
9281: PUSH
9282: LD_INT 28
9284: PUSH
9285: LD_INT 30
9287: PUSH
9288: LD_INT 31
9290: PUSH
9291: LD_INT 32
9293: PUSH
9294: LD_INT 36
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 101
9322: PUSH
9323: LD_INT 102
9325: PUSH
9326: LD_INT 103
9328: PUSH
9329: LD_INT 105
9331: PUSH
9332: LD_INT 106
9334: PUSH
9335: LD_INT 108
9337: PUSH
9338: LD_INT 109
9340: PUSH
9341: LD_INT 112
9343: PUSH
9344: LD_INT 114
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: ST_TO_ADDR
9362: GO 11341
9364: LD_INT 10
9366: DOUBLE
9367: EQUAL
9368: IFTRUE 9372
9370: GO 9556
9372: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9373: LD_ADDR_VAR 0 1
9377: PUSH
9378: LD_INT 2
9380: PUSH
9381: LD_INT 4
9383: PUSH
9384: LD_INT 5
9386: PUSH
9387: LD_INT 6
9389: PUSH
9390: LD_INT 7
9392: PUSH
9393: LD_INT 8
9395: PUSH
9396: LD_INT 9
9398: PUSH
9399: LD_INT 10
9401: PUSH
9402: LD_INT 11
9404: PUSH
9405: LD_INT 12
9407: PUSH
9408: LD_INT 13
9410: PUSH
9411: LD_INT 14
9413: PUSH
9414: LD_INT 15
9416: PUSH
9417: LD_INT 16
9419: PUSH
9420: LD_INT 17
9422: PUSH
9423: LD_INT 18
9425: PUSH
9426: LD_INT 19
9428: PUSH
9429: LD_INT 20
9431: PUSH
9432: LD_INT 21
9434: PUSH
9435: LD_INT 22
9437: PUSH
9438: LD_INT 23
9440: PUSH
9441: LD_INT 24
9443: PUSH
9444: LD_INT 25
9446: PUSH
9447: LD_INT 26
9449: PUSH
9450: LD_INT 28
9452: PUSH
9453: LD_INT 30
9455: PUSH
9456: LD_INT 31
9458: PUSH
9459: LD_INT 32
9461: PUSH
9462: LD_INT 36
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: PUSH
9496: LD_INT 101
9498: PUSH
9499: LD_INT 102
9501: PUSH
9502: LD_INT 103
9504: PUSH
9505: LD_INT 104
9507: PUSH
9508: LD_INT 105
9510: PUSH
9511: LD_INT 106
9513: PUSH
9514: LD_INT 107
9516: PUSH
9517: LD_INT 108
9519: PUSH
9520: LD_INT 109
9522: PUSH
9523: LD_INT 110
9525: PUSH
9526: LD_INT 111
9528: PUSH
9529: LD_INT 112
9531: PUSH
9532: LD_INT 114
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: ST_TO_ADDR
9554: GO 11341
9556: LD_INT 11
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9756
9564: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9565: LD_ADDR_VAR 0 1
9569: PUSH
9570: LD_INT 2
9572: PUSH
9573: LD_INT 3
9575: PUSH
9576: LD_INT 4
9578: PUSH
9579: LD_INT 5
9581: PUSH
9582: LD_INT 6
9584: PUSH
9585: LD_INT 7
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: LD_INT 9
9593: PUSH
9594: LD_INT 10
9596: PUSH
9597: LD_INT 11
9599: PUSH
9600: LD_INT 12
9602: PUSH
9603: LD_INT 13
9605: PUSH
9606: LD_INT 14
9608: PUSH
9609: LD_INT 15
9611: PUSH
9612: LD_INT 16
9614: PUSH
9615: LD_INT 17
9617: PUSH
9618: LD_INT 18
9620: PUSH
9621: LD_INT 19
9623: PUSH
9624: LD_INT 20
9626: PUSH
9627: LD_INT 21
9629: PUSH
9630: LD_INT 22
9632: PUSH
9633: LD_INT 23
9635: PUSH
9636: LD_INT 24
9638: PUSH
9639: LD_INT 25
9641: PUSH
9642: LD_INT 26
9644: PUSH
9645: LD_INT 28
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 31
9653: PUSH
9654: LD_INT 32
9656: PUSH
9657: LD_INT 34
9659: PUSH
9660: LD_INT 36
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 101
9698: PUSH
9699: LD_INT 102
9701: PUSH
9702: LD_INT 103
9704: PUSH
9705: LD_INT 104
9707: PUSH
9708: LD_INT 105
9710: PUSH
9711: LD_INT 106
9713: PUSH
9714: LD_INT 107
9716: PUSH
9717: LD_INT 108
9719: PUSH
9720: LD_INT 109
9722: PUSH
9723: LD_INT 110
9725: PUSH
9726: LD_INT 111
9728: PUSH
9729: LD_INT 112
9731: PUSH
9732: LD_INT 114
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: ST_TO_ADDR
9754: GO 11341
9756: LD_INT 12
9758: DOUBLE
9759: EQUAL
9760: IFTRUE 9764
9762: GO 9972
9764: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9765: LD_ADDR_VAR 0 1
9769: PUSH
9770: LD_INT 1
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: LD_INT 3
9778: PUSH
9779: LD_INT 4
9781: PUSH
9782: LD_INT 5
9784: PUSH
9785: LD_INT 6
9787: PUSH
9788: LD_INT 7
9790: PUSH
9791: LD_INT 8
9793: PUSH
9794: LD_INT 9
9796: PUSH
9797: LD_INT 10
9799: PUSH
9800: LD_INT 11
9802: PUSH
9803: LD_INT 12
9805: PUSH
9806: LD_INT 13
9808: PUSH
9809: LD_INT 14
9811: PUSH
9812: LD_INT 15
9814: PUSH
9815: LD_INT 16
9817: PUSH
9818: LD_INT 17
9820: PUSH
9821: LD_INT 18
9823: PUSH
9824: LD_INT 19
9826: PUSH
9827: LD_INT 20
9829: PUSH
9830: LD_INT 21
9832: PUSH
9833: LD_INT 22
9835: PUSH
9836: LD_INT 23
9838: PUSH
9839: LD_INT 24
9841: PUSH
9842: LD_INT 25
9844: PUSH
9845: LD_INT 26
9847: PUSH
9848: LD_INT 27
9850: PUSH
9851: LD_INT 28
9853: PUSH
9854: LD_INT 30
9856: PUSH
9857: LD_INT 31
9859: PUSH
9860: LD_INT 32
9862: PUSH
9863: LD_INT 33
9865: PUSH
9866: LD_INT 34
9868: PUSH
9869: LD_INT 36
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 101
9910: PUSH
9911: LD_INT 102
9913: PUSH
9914: LD_INT 103
9916: PUSH
9917: LD_INT 104
9919: PUSH
9920: LD_INT 105
9922: PUSH
9923: LD_INT 106
9925: PUSH
9926: LD_INT 107
9928: PUSH
9929: LD_INT 108
9931: PUSH
9932: LD_INT 109
9934: PUSH
9935: LD_INT 110
9937: PUSH
9938: LD_INT 111
9940: PUSH
9941: LD_INT 112
9943: PUSH
9944: LD_INT 113
9946: PUSH
9947: LD_INT 114
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: ST_TO_ADDR
9970: GO 11341
9972: LD_INT 13
9974: DOUBLE
9975: EQUAL
9976: IFTRUE 9980
9978: GO 10176
9980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9981: LD_ADDR_VAR 0 1
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: LD_INT 2
9991: PUSH
9992: LD_INT 3
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: LD_INT 5
10000: PUSH
10001: LD_INT 8
10003: PUSH
10004: LD_INT 9
10006: PUSH
10007: LD_INT 10
10009: PUSH
10010: LD_INT 11
10012: PUSH
10013: LD_INT 12
10015: PUSH
10016: LD_INT 14
10018: PUSH
10019: LD_INT 15
10021: PUSH
10022: LD_INT 16
10024: PUSH
10025: LD_INT 17
10027: PUSH
10028: LD_INT 18
10030: PUSH
10031: LD_INT 19
10033: PUSH
10034: LD_INT 20
10036: PUSH
10037: LD_INT 21
10039: PUSH
10040: LD_INT 22
10042: PUSH
10043: LD_INT 23
10045: PUSH
10046: LD_INT 24
10048: PUSH
10049: LD_INT 25
10051: PUSH
10052: LD_INT 26
10054: PUSH
10055: LD_INT 27
10057: PUSH
10058: LD_INT 28
10060: PUSH
10061: LD_INT 30
10063: PUSH
10064: LD_INT 31
10066: PUSH
10067: LD_INT 32
10069: PUSH
10070: LD_INT 33
10072: PUSH
10073: LD_INT 34
10075: PUSH
10076: LD_INT 36
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 101
10114: PUSH
10115: LD_INT 102
10117: PUSH
10118: LD_INT 103
10120: PUSH
10121: LD_INT 104
10123: PUSH
10124: LD_INT 105
10126: PUSH
10127: LD_INT 106
10129: PUSH
10130: LD_INT 107
10132: PUSH
10133: LD_INT 108
10135: PUSH
10136: LD_INT 109
10138: PUSH
10139: LD_INT 110
10141: PUSH
10142: LD_INT 111
10144: PUSH
10145: LD_INT 112
10147: PUSH
10148: LD_INT 113
10150: PUSH
10151: LD_INT 114
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: ST_TO_ADDR
10174: GO 11341
10176: LD_INT 14
10178: DOUBLE
10179: EQUAL
10180: IFTRUE 10184
10182: GO 10396
10184: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10185: LD_ADDR_VAR 0 1
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: LD_INT 2
10195: PUSH
10196: LD_INT 3
10198: PUSH
10199: LD_INT 4
10201: PUSH
10202: LD_INT 5
10204: PUSH
10205: LD_INT 6
10207: PUSH
10208: LD_INT 7
10210: PUSH
10211: LD_INT 8
10213: PUSH
10214: LD_INT 9
10216: PUSH
10217: LD_INT 10
10219: PUSH
10220: LD_INT 11
10222: PUSH
10223: LD_INT 12
10225: PUSH
10226: LD_INT 13
10228: PUSH
10229: LD_INT 14
10231: PUSH
10232: LD_INT 15
10234: PUSH
10235: LD_INT 16
10237: PUSH
10238: LD_INT 17
10240: PUSH
10241: LD_INT 18
10243: PUSH
10244: LD_INT 19
10246: PUSH
10247: LD_INT 20
10249: PUSH
10250: LD_INT 21
10252: PUSH
10253: LD_INT 22
10255: PUSH
10256: LD_INT 23
10258: PUSH
10259: LD_INT 24
10261: PUSH
10262: LD_INT 25
10264: PUSH
10265: LD_INT 26
10267: PUSH
10268: LD_INT 27
10270: PUSH
10271: LD_INT 28
10273: PUSH
10274: LD_INT 29
10276: PUSH
10277: LD_INT 30
10279: PUSH
10280: LD_INT 31
10282: PUSH
10283: LD_INT 32
10285: PUSH
10286: LD_INT 33
10288: PUSH
10289: LD_INT 34
10291: PUSH
10292: LD_INT 36
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: PUSH
10332: LD_INT 101
10334: PUSH
10335: LD_INT 102
10337: PUSH
10338: LD_INT 103
10340: PUSH
10341: LD_INT 104
10343: PUSH
10344: LD_INT 105
10346: PUSH
10347: LD_INT 106
10349: PUSH
10350: LD_INT 107
10352: PUSH
10353: LD_INT 108
10355: PUSH
10356: LD_INT 109
10358: PUSH
10359: LD_INT 110
10361: PUSH
10362: LD_INT 111
10364: PUSH
10365: LD_INT 112
10367: PUSH
10368: LD_INT 113
10370: PUSH
10371: LD_INT 114
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: ST_TO_ADDR
10394: GO 11341
10396: LD_INT 15
10398: DOUBLE
10399: EQUAL
10400: IFTRUE 10404
10402: GO 10616
10404: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10405: LD_ADDR_VAR 0 1
10409: PUSH
10410: LD_INT 1
10412: PUSH
10413: LD_INT 2
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 4
10421: PUSH
10422: LD_INT 5
10424: PUSH
10425: LD_INT 6
10427: PUSH
10428: LD_INT 7
10430: PUSH
10431: LD_INT 8
10433: PUSH
10434: LD_INT 9
10436: PUSH
10437: LD_INT 10
10439: PUSH
10440: LD_INT 11
10442: PUSH
10443: LD_INT 12
10445: PUSH
10446: LD_INT 13
10448: PUSH
10449: LD_INT 14
10451: PUSH
10452: LD_INT 15
10454: PUSH
10455: LD_INT 16
10457: PUSH
10458: LD_INT 17
10460: PUSH
10461: LD_INT 18
10463: PUSH
10464: LD_INT 19
10466: PUSH
10467: LD_INT 20
10469: PUSH
10470: LD_INT 21
10472: PUSH
10473: LD_INT 22
10475: PUSH
10476: LD_INT 23
10478: PUSH
10479: LD_INT 24
10481: PUSH
10482: LD_INT 25
10484: PUSH
10485: LD_INT 26
10487: PUSH
10488: LD_INT 27
10490: PUSH
10491: LD_INT 28
10493: PUSH
10494: LD_INT 29
10496: PUSH
10497: LD_INT 30
10499: PUSH
10500: LD_INT 31
10502: PUSH
10503: LD_INT 32
10505: PUSH
10506: LD_INT 33
10508: PUSH
10509: LD_INT 34
10511: PUSH
10512: LD_INT 36
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: PUSH
10552: LD_INT 101
10554: PUSH
10555: LD_INT 102
10557: PUSH
10558: LD_INT 103
10560: PUSH
10561: LD_INT 104
10563: PUSH
10564: LD_INT 105
10566: PUSH
10567: LD_INT 106
10569: PUSH
10570: LD_INT 107
10572: PUSH
10573: LD_INT 108
10575: PUSH
10576: LD_INT 109
10578: PUSH
10579: LD_INT 110
10581: PUSH
10582: LD_INT 111
10584: PUSH
10585: LD_INT 112
10587: PUSH
10588: LD_INT 113
10590: PUSH
10591: LD_INT 114
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: ST_TO_ADDR
10614: GO 11341
10616: LD_INT 16
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10748
10624: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10625: LD_ADDR_VAR 0 1
10629: PUSH
10630: LD_INT 2
10632: PUSH
10633: LD_INT 4
10635: PUSH
10636: LD_INT 5
10638: PUSH
10639: LD_INT 7
10641: PUSH
10642: LD_INT 11
10644: PUSH
10645: LD_INT 12
10647: PUSH
10648: LD_INT 15
10650: PUSH
10651: LD_INT 16
10653: PUSH
10654: LD_INT 20
10656: PUSH
10657: LD_INT 21
10659: PUSH
10660: LD_INT 22
10662: PUSH
10663: LD_INT 23
10665: PUSH
10666: LD_INT 25
10668: PUSH
10669: LD_INT 26
10671: PUSH
10672: LD_INT 30
10674: PUSH
10675: LD_INT 31
10677: PUSH
10678: LD_INT 32
10680: PUSH
10681: LD_INT 33
10683: PUSH
10684: LD_INT 34
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 101
10710: PUSH
10711: LD_INT 102
10713: PUSH
10714: LD_INT 103
10716: PUSH
10717: LD_INT 106
10719: PUSH
10720: LD_INT 108
10722: PUSH
10723: LD_INT 112
10725: PUSH
10726: LD_INT 113
10728: PUSH
10729: LD_INT 114
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: ST_TO_ADDR
10746: GO 11341
10748: LD_INT 17
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10968
10756: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10757: LD_ADDR_VAR 0 1
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: LD_INT 2
10767: PUSH
10768: LD_INT 3
10770: PUSH
10771: LD_INT 4
10773: PUSH
10774: LD_INT 5
10776: PUSH
10777: LD_INT 6
10779: PUSH
10780: LD_INT 7
10782: PUSH
10783: LD_INT 8
10785: PUSH
10786: LD_INT 9
10788: PUSH
10789: LD_INT 10
10791: PUSH
10792: LD_INT 11
10794: PUSH
10795: LD_INT 12
10797: PUSH
10798: LD_INT 13
10800: PUSH
10801: LD_INT 14
10803: PUSH
10804: LD_INT 15
10806: PUSH
10807: LD_INT 16
10809: PUSH
10810: LD_INT 17
10812: PUSH
10813: LD_INT 18
10815: PUSH
10816: LD_INT 19
10818: PUSH
10819: LD_INT 20
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 22
10827: PUSH
10828: LD_INT 23
10830: PUSH
10831: LD_INT 24
10833: PUSH
10834: LD_INT 25
10836: PUSH
10837: LD_INT 26
10839: PUSH
10840: LD_INT 27
10842: PUSH
10843: LD_INT 28
10845: PUSH
10846: LD_INT 29
10848: PUSH
10849: LD_INT 30
10851: PUSH
10852: LD_INT 31
10854: PUSH
10855: LD_INT 32
10857: PUSH
10858: LD_INT 33
10860: PUSH
10861: LD_INT 34
10863: PUSH
10864: LD_INT 36
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 101
10906: PUSH
10907: LD_INT 102
10909: PUSH
10910: LD_INT 103
10912: PUSH
10913: LD_INT 104
10915: PUSH
10916: LD_INT 105
10918: PUSH
10919: LD_INT 106
10921: PUSH
10922: LD_INT 107
10924: PUSH
10925: LD_INT 108
10927: PUSH
10928: LD_INT 109
10930: PUSH
10931: LD_INT 110
10933: PUSH
10934: LD_INT 111
10936: PUSH
10937: LD_INT 112
10939: PUSH
10940: LD_INT 113
10942: PUSH
10943: LD_INT 114
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: ST_TO_ADDR
10966: GO 11341
10968: LD_INT 18
10970: DOUBLE
10971: EQUAL
10972: IFTRUE 10976
10974: GO 11112
10976: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10977: LD_ADDR_VAR 0 1
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: LD_INT 4
10987: PUSH
10988: LD_INT 5
10990: PUSH
10991: LD_INT 7
10993: PUSH
10994: LD_INT 11
10996: PUSH
10997: LD_INT 12
10999: PUSH
11000: LD_INT 15
11002: PUSH
11003: LD_INT 16
11005: PUSH
11006: LD_INT 20
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 22
11014: PUSH
11015: LD_INT 23
11017: PUSH
11018: LD_INT 25
11020: PUSH
11021: LD_INT 26
11023: PUSH
11024: LD_INT 30
11026: PUSH
11027: LD_INT 31
11029: PUSH
11030: LD_INT 32
11032: PUSH
11033: LD_INT 33
11035: PUSH
11036: LD_INT 34
11038: PUSH
11039: LD_INT 35
11041: PUSH
11042: LD_INT 36
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 101
11070: PUSH
11071: LD_INT 102
11073: PUSH
11074: LD_INT 103
11076: PUSH
11077: LD_INT 106
11079: PUSH
11080: LD_INT 108
11082: PUSH
11083: LD_INT 112
11085: PUSH
11086: LD_INT 113
11088: PUSH
11089: LD_INT 114
11091: PUSH
11092: LD_INT 115
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: ST_TO_ADDR
11110: GO 11341
11112: LD_INT 19
11114: DOUBLE
11115: EQUAL
11116: IFTRUE 11120
11118: GO 11340
11120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11121: LD_ADDR_VAR 0 1
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: LD_INT 2
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: LD_INT 4
11137: PUSH
11138: LD_INT 5
11140: PUSH
11141: LD_INT 6
11143: PUSH
11144: LD_INT 7
11146: PUSH
11147: LD_INT 8
11149: PUSH
11150: LD_INT 9
11152: PUSH
11153: LD_INT 10
11155: PUSH
11156: LD_INT 11
11158: PUSH
11159: LD_INT 12
11161: PUSH
11162: LD_INT 13
11164: PUSH
11165: LD_INT 14
11167: PUSH
11168: LD_INT 15
11170: PUSH
11171: LD_INT 16
11173: PUSH
11174: LD_INT 17
11176: PUSH
11177: LD_INT 18
11179: PUSH
11180: LD_INT 19
11182: PUSH
11183: LD_INT 20
11185: PUSH
11186: LD_INT 21
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_INT 23
11194: PUSH
11195: LD_INT 24
11197: PUSH
11198: LD_INT 25
11200: PUSH
11201: LD_INT 26
11203: PUSH
11204: LD_INT 27
11206: PUSH
11207: LD_INT 28
11209: PUSH
11210: LD_INT 29
11212: PUSH
11213: LD_INT 30
11215: PUSH
11216: LD_INT 31
11218: PUSH
11219: LD_INT 32
11221: PUSH
11222: LD_INT 33
11224: PUSH
11225: LD_INT 34
11227: PUSH
11228: LD_INT 35
11230: PUSH
11231: LD_INT 36
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 101
11274: PUSH
11275: LD_INT 102
11277: PUSH
11278: LD_INT 103
11280: PUSH
11281: LD_INT 104
11283: PUSH
11284: LD_INT 105
11286: PUSH
11287: LD_INT 106
11289: PUSH
11290: LD_INT 107
11292: PUSH
11293: LD_INT 108
11295: PUSH
11296: LD_INT 109
11298: PUSH
11299: LD_INT 110
11301: PUSH
11302: LD_INT 111
11304: PUSH
11305: LD_INT 112
11307: PUSH
11308: LD_INT 113
11310: PUSH
11311: LD_INT 114
11313: PUSH
11314: LD_INT 115
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: ST_TO_ADDR
11338: GO 11341
11340: POP
// end else
11341: GO 11560
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 3
11356: PUSH
11357: LD_INT 4
11359: PUSH
11360: LD_INT 5
11362: PUSH
11363: LD_INT 6
11365: PUSH
11366: LD_INT 7
11368: PUSH
11369: LD_INT 8
11371: PUSH
11372: LD_INT 9
11374: PUSH
11375: LD_INT 10
11377: PUSH
11378: LD_INT 11
11380: PUSH
11381: LD_INT 12
11383: PUSH
11384: LD_INT 13
11386: PUSH
11387: LD_INT 14
11389: PUSH
11390: LD_INT 15
11392: PUSH
11393: LD_INT 16
11395: PUSH
11396: LD_INT 17
11398: PUSH
11399: LD_INT 18
11401: PUSH
11402: LD_INT 19
11404: PUSH
11405: LD_INT 20
11407: PUSH
11408: LD_INT 21
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_INT 23
11416: PUSH
11417: LD_INT 24
11419: PUSH
11420: LD_INT 25
11422: PUSH
11423: LD_INT 26
11425: PUSH
11426: LD_INT 27
11428: PUSH
11429: LD_INT 28
11431: PUSH
11432: LD_INT 29
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 31
11440: PUSH
11441: LD_INT 32
11443: PUSH
11444: LD_INT 33
11446: PUSH
11447: LD_INT 34
11449: PUSH
11450: LD_INT 35
11452: PUSH
11453: LD_INT 36
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 101
11496: PUSH
11497: LD_INT 102
11499: PUSH
11500: LD_INT 103
11502: PUSH
11503: LD_INT 104
11505: PUSH
11506: LD_INT 105
11508: PUSH
11509: LD_INT 106
11511: PUSH
11512: LD_INT 107
11514: PUSH
11515: LD_INT 108
11517: PUSH
11518: LD_INT 109
11520: PUSH
11521: LD_INT 110
11523: PUSH
11524: LD_INT 111
11526: PUSH
11527: LD_INT 112
11529: PUSH
11530: LD_INT 113
11532: PUSH
11533: LD_INT 114
11535: PUSH
11536: LD_INT 115
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: ST_TO_ADDR
// if result then
11560: LD_VAR 0 1
11564: IFFALSE 11853
// begin normal :=  ;
11566: LD_ADDR_VAR 0 3
11570: PUSH
11571: LD_STRING 
11573: ST_TO_ADDR
// hardcore :=  ;
11574: LD_ADDR_VAR 0 4
11578: PUSH
11579: LD_STRING 
11581: ST_TO_ADDR
// for i = 1 to normalCounter do
11582: LD_ADDR_VAR 0 5
11586: PUSH
11587: DOUBLE
11588: LD_INT 1
11590: DEC
11591: ST_TO_ADDR
11592: LD_EXP 31
11596: PUSH
11597: FOR_TO
11598: IFFALSE 11699
// begin tmp := 0 ;
11600: LD_ADDR_VAR 0 2
11604: PUSH
11605: LD_STRING 0
11607: ST_TO_ADDR
// if result [ 1 ] then
11608: LD_VAR 0 1
11612: PUSH
11613: LD_INT 1
11615: ARRAY
11616: IFFALSE 11681
// if result [ 1 ] [ 1 ] = i then
11618: LD_VAR 0 1
11622: PUSH
11623: LD_INT 1
11625: ARRAY
11626: PUSH
11627: LD_INT 1
11629: ARRAY
11630: PUSH
11631: LD_VAR 0 5
11635: EQUAL
11636: IFFALSE 11681
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11638: LD_ADDR_VAR 0 1
11642: PUSH
11643: LD_VAR 0 1
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: LD_VAR 0 1
11655: PUSH
11656: LD_INT 1
11658: ARRAY
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 3
11667: PPUSH
11668: CALL_OW 1
11672: ST_TO_ADDR
// tmp := 1 ;
11673: LD_ADDR_VAR 0 2
11677: PUSH
11678: LD_STRING 1
11680: ST_TO_ADDR
// end ; normal := normal & tmp ;
11681: LD_ADDR_VAR 0 3
11685: PUSH
11686: LD_VAR 0 3
11690: PUSH
11691: LD_VAR 0 2
11695: STR
11696: ST_TO_ADDR
// end ;
11697: GO 11597
11699: POP
11700: POP
// for i = 1 to hardcoreCounter do
11701: LD_ADDR_VAR 0 5
11705: PUSH
11706: DOUBLE
11707: LD_INT 1
11709: DEC
11710: ST_TO_ADDR
11711: LD_EXP 32
11715: PUSH
11716: FOR_TO
11717: IFFALSE 11822
// begin tmp := 0 ;
11719: LD_ADDR_VAR 0 2
11723: PUSH
11724: LD_STRING 0
11726: ST_TO_ADDR
// if result [ 2 ] then
11727: LD_VAR 0 1
11731: PUSH
11732: LD_INT 2
11734: ARRAY
11735: IFFALSE 11804
// if result [ 2 ] [ 1 ] = 100 + i then
11737: LD_VAR 0 1
11741: PUSH
11742: LD_INT 2
11744: ARRAY
11745: PUSH
11746: LD_INT 1
11748: ARRAY
11749: PUSH
11750: LD_INT 100
11752: PUSH
11753: LD_VAR 0 5
11757: PLUS
11758: EQUAL
11759: IFFALSE 11804
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11761: LD_ADDR_VAR 0 1
11765: PUSH
11766: LD_VAR 0 1
11770: PPUSH
11771: LD_INT 2
11773: PPUSH
11774: LD_VAR 0 1
11778: PUSH
11779: LD_INT 2
11781: ARRAY
11782: PPUSH
11783: LD_INT 1
11785: PPUSH
11786: CALL_OW 3
11790: PPUSH
11791: CALL_OW 1
11795: ST_TO_ADDR
// tmp := 1 ;
11796: LD_ADDR_VAR 0 2
11800: PUSH
11801: LD_STRING 1
11803: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11804: LD_ADDR_VAR 0 4
11808: PUSH
11809: LD_VAR 0 4
11813: PUSH
11814: LD_VAR 0 2
11818: STR
11819: ST_TO_ADDR
// end ;
11820: GO 11716
11822: POP
11823: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11824: LD_STRING getStreamItemsFromMission("
11826: PUSH
11827: LD_VAR 0 3
11831: STR
11832: PUSH
11833: LD_STRING ","
11835: STR
11836: PUSH
11837: LD_VAR 0 4
11841: STR
11842: PUSH
11843: LD_STRING ")
11845: STR
11846: PPUSH
11847: CALL_OW 559
// end else
11851: GO 11860
// ToLua ( getStreamItemsFromMission("","") ) ;
11853: LD_STRING getStreamItemsFromMission("","")
11855: PPUSH
11856: CALL_OW 559
// end ;
11860: LD_VAR 0 1
11864: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11865: LD_EXP 30
11869: PUSH
11870: LD_EXP 35
11874: AND
11875: IFFALSE 11999
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
11883: PPUSH
// begin enable ;
11884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11885: LD_ADDR_VAR 0 2
11889: PUSH
11890: LD_INT 22
11892: PUSH
11893: LD_OWVAR 2
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 2
11904: PUSH
11905: LD_INT 34
11907: PUSH
11908: LD_INT 7
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 34
11917: PUSH
11918: LD_INT 45
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 34
11927: PUSH
11928: LD_INT 28
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 34
11937: PUSH
11938: LD_INT 47
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 69
11960: ST_TO_ADDR
// if not tmp then
11961: LD_VAR 0 2
11965: NOT
11966: IFFALSE 11970
// exit ;
11968: GO 11999
// for i in tmp do
11970: LD_ADDR_VAR 0 1
11974: PUSH
11975: LD_VAR 0 2
11979: PUSH
11980: FOR_IN
11981: IFFALSE 11997
// begin SetLives ( i , 0 ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_INT 0
11990: PPUSH
11991: CALL_OW 234
// end ;
11995: GO 11980
11997: POP
11998: POP
// end ;
11999: PPOPN 2
12001: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12002: LD_EXP 30
12006: PUSH
12007: LD_EXP 36
12011: AND
12012: IFFALSE 12096
12014: GO 12016
12016: DISABLE
12017: LD_INT 0
12019: PPUSH
12020: PPUSH
// begin enable ;
12021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12022: LD_ADDR_VAR 0 2
12026: PUSH
12027: LD_INT 22
12029: PUSH
12030: LD_OWVAR 2
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 32
12041: PUSH
12042: LD_INT 3
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: ST_TO_ADDR
// if not tmp then
12058: LD_VAR 0 2
12062: NOT
12063: IFFALSE 12067
// exit ;
12065: GO 12096
// for i in tmp do
12067: LD_ADDR_VAR 0 1
12071: PUSH
12072: LD_VAR 0 2
12076: PUSH
12077: FOR_IN
12078: IFFALSE 12094
// begin SetLives ( i , 0 ) ;
12080: LD_VAR 0 1
12084: PPUSH
12085: LD_INT 0
12087: PPUSH
12088: CALL_OW 234
// end ;
12092: GO 12077
12094: POP
12095: POP
// end ;
12096: PPOPN 2
12098: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12099: LD_EXP 30
12103: PUSH
12104: LD_EXP 33
12108: AND
12109: IFFALSE 12202
12111: GO 12113
12113: DISABLE
12114: LD_INT 0
12116: PPUSH
// begin enable ;
12117: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12118: LD_ADDR_VAR 0 1
12122: PUSH
12123: LD_INT 22
12125: PUSH
12126: LD_OWVAR 2
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 2
12137: PUSH
12138: LD_INT 25
12140: PUSH
12141: LD_INT 5
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 25
12150: PUSH
12151: LD_INT 9
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 25
12160: PUSH
12161: LD_INT 8
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PPUSH
12178: CALL_OW 69
12182: PUSH
12183: FOR_IN
12184: IFFALSE 12200
// begin SetClass ( i , 1 ) ;
12186: LD_VAR 0 1
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: CALL_OW 336
// end ;
12198: GO 12183
12200: POP
12201: POP
// end ;
12202: PPOPN 1
12204: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12205: LD_EXP 30
12209: PUSH
12210: LD_EXP 34
12214: AND
12215: PUSH
12216: LD_OWVAR 65
12220: PUSH
12221: LD_INT 7
12223: LESS
12224: AND
12225: IFFALSE 12239
12227: GO 12229
12229: DISABLE
// begin enable ;
12230: ENABLE
// game_speed := 7 ;
12231: LD_ADDR_OWVAR 65
12235: PUSH
12236: LD_INT 7
12238: ST_TO_ADDR
// end ;
12239: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12240: LD_EXP 30
12244: PUSH
12245: LD_EXP 37
12249: AND
12250: IFFALSE 12452
12252: GO 12254
12254: DISABLE
12255: LD_INT 0
12257: PPUSH
12258: PPUSH
12259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 81
12267: PUSH
12268: LD_OWVAR 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 21
12279: PUSH
12280: LD_INT 1
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 69
12295: ST_TO_ADDR
// if not tmp then
12296: LD_VAR 0 3
12300: NOT
12301: IFFALSE 12305
// exit ;
12303: GO 12452
// if tmp > 5 then
12305: LD_VAR 0 3
12309: PUSH
12310: LD_INT 5
12312: GREATER
12313: IFFALSE 12325
// k := 5 else
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_INT 5
12322: ST_TO_ADDR
12323: GO 12335
// k := tmp ;
12325: LD_ADDR_VAR 0 2
12329: PUSH
12330: LD_VAR 0 3
12334: ST_TO_ADDR
// for i := 1 to k do
12335: LD_ADDR_VAR 0 1
12339: PUSH
12340: DOUBLE
12341: LD_INT 1
12343: DEC
12344: ST_TO_ADDR
12345: LD_VAR 0 2
12349: PUSH
12350: FOR_TO
12351: IFFALSE 12450
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_VAR 0 1
12362: ARRAY
12363: PPUSH
12364: LD_VAR 0 1
12368: PUSH
12369: LD_INT 4
12371: MOD
12372: PUSH
12373: LD_INT 1
12375: PLUS
12376: PPUSH
12377: CALL_OW 259
12381: PUSH
12382: LD_INT 10
12384: LESS
12385: IFFALSE 12448
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12387: LD_VAR 0 3
12391: PUSH
12392: LD_VAR 0 1
12396: ARRAY
12397: PPUSH
12398: LD_VAR 0 1
12402: PUSH
12403: LD_INT 4
12405: MOD
12406: PUSH
12407: LD_INT 1
12409: PLUS
12410: PPUSH
12411: LD_VAR 0 3
12415: PUSH
12416: LD_VAR 0 1
12420: ARRAY
12421: PPUSH
12422: LD_VAR 0 1
12426: PUSH
12427: LD_INT 4
12429: MOD
12430: PUSH
12431: LD_INT 1
12433: PLUS
12434: PPUSH
12435: CALL_OW 259
12439: PUSH
12440: LD_INT 1
12442: PLUS
12443: PPUSH
12444: CALL_OW 237
12448: GO 12350
12450: POP
12451: POP
// end ;
12452: PPOPN 3
12454: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12455: LD_EXP 30
12459: PUSH
12460: LD_EXP 38
12464: AND
12465: IFFALSE 12485
12467: GO 12469
12469: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12470: LD_INT 4
12472: PPUSH
12473: LD_OWVAR 2
12477: PPUSH
12478: LD_INT 0
12480: PPUSH
12481: CALL_OW 324
12485: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12486: LD_EXP 30
12490: PUSH
12491: LD_EXP 67
12495: AND
12496: IFFALSE 12516
12498: GO 12500
12500: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12501: LD_INT 19
12503: PPUSH
12504: LD_OWVAR 2
12508: PPUSH
12509: LD_INT 0
12511: PPUSH
12512: CALL_OW 324
12516: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12517: LD_EXP 30
12521: PUSH
12522: LD_EXP 39
12526: AND
12527: IFFALSE 12629
12529: GO 12531
12531: DISABLE
12532: LD_INT 0
12534: PPUSH
12535: PPUSH
// begin enable ;
12536: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12537: LD_ADDR_VAR 0 2
12541: PUSH
12542: LD_INT 22
12544: PUSH
12545: LD_OWVAR 2
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 2
12556: PUSH
12557: LD_INT 34
12559: PUSH
12560: LD_INT 11
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 34
12569: PUSH
12570: LD_INT 30
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 69
12590: ST_TO_ADDR
// if not tmp then
12591: LD_VAR 0 2
12595: NOT
12596: IFFALSE 12600
// exit ;
12598: GO 12629
// for i in tmp do
12600: LD_ADDR_VAR 0 1
12604: PUSH
12605: LD_VAR 0 2
12609: PUSH
12610: FOR_IN
12611: IFFALSE 12627
// begin SetLives ( i , 0 ) ;
12613: LD_VAR 0 1
12617: PPUSH
12618: LD_INT 0
12620: PPUSH
12621: CALL_OW 234
// end ;
12625: GO 12610
12627: POP
12628: POP
// end ;
12629: PPOPN 2
12631: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12632: LD_EXP 30
12636: PUSH
12637: LD_EXP 40
12641: AND
12642: IFFALSE 12662
12644: GO 12646
12646: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12647: LD_INT 32
12649: PPUSH
12650: LD_OWVAR 2
12654: PPUSH
12655: LD_INT 0
12657: PPUSH
12658: CALL_OW 324
12662: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12663: LD_EXP 30
12667: PUSH
12668: LD_EXP 41
12672: AND
12673: IFFALSE 12854
12675: GO 12677
12677: DISABLE
12678: LD_INT 0
12680: PPUSH
12681: PPUSH
12682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12683: LD_ADDR_VAR 0 2
12687: PUSH
12688: LD_INT 22
12690: PUSH
12691: LD_OWVAR 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 33
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: ST_TO_ADDR
// if not tmp then
12719: LD_VAR 0 2
12723: NOT
12724: IFFALSE 12728
// exit ;
12726: GO 12854
// side := 0 ;
12728: LD_ADDR_VAR 0 3
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// for i := 1 to 8 do
12736: LD_ADDR_VAR 0 1
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_INT 8
12748: PUSH
12749: FOR_TO
12750: IFFALSE 12798
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12752: LD_OWVAR 2
12756: PUSH
12757: LD_VAR 0 1
12761: NONEQUAL
12762: PUSH
12763: LD_OWVAR 2
12767: PPUSH
12768: LD_VAR 0 1
12772: PPUSH
12773: CALL_OW 81
12777: PUSH
12778: LD_INT 2
12780: EQUAL
12781: AND
12782: IFFALSE 12796
// begin side := i ;
12784: LD_ADDR_VAR 0 3
12788: PUSH
12789: LD_VAR 0 1
12793: ST_TO_ADDR
// break ;
12794: GO 12798
// end ;
12796: GO 12749
12798: POP
12799: POP
// if not side then
12800: LD_VAR 0 3
12804: NOT
12805: IFFALSE 12809
// exit ;
12807: GO 12854
// for i := 1 to tmp do
12809: LD_ADDR_VAR 0 1
12813: PUSH
12814: DOUBLE
12815: LD_INT 1
12817: DEC
12818: ST_TO_ADDR
12819: LD_VAR 0 2
12823: PUSH
12824: FOR_TO
12825: IFFALSE 12852
// if Prob ( 60 ) then
12827: LD_INT 60
12829: PPUSH
12830: CALL_OW 13
12834: IFFALSE 12850
// SetSide ( i , side ) ;
12836: LD_VAR 0 1
12840: PPUSH
12841: LD_VAR 0 3
12845: PPUSH
12846: CALL_OW 235
12850: GO 12824
12852: POP
12853: POP
// end ;
12854: PPOPN 3
12856: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12857: LD_EXP 30
12861: PUSH
12862: LD_EXP 43
12866: AND
12867: IFFALSE 12986
12869: GO 12871
12871: DISABLE
12872: LD_INT 0
12874: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_OWVAR 2
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 21
12894: PUSH
12895: LD_INT 1
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 3
12904: PUSH
12905: LD_INT 23
12907: PUSH
12908: LD_INT 0
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: LIST
12923: PPUSH
12924: CALL_OW 69
12928: PUSH
12929: FOR_IN
12930: IFFALSE 12984
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12932: LD_VAR 0 1
12936: PPUSH
12937: CALL_OW 257
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: LD_INT 2
12947: PUSH
12948: LD_INT 3
12950: PUSH
12951: LD_INT 4
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: IN
12960: IFFALSE 12982
// SetClass ( un , rand ( 1 , 4 ) ) ;
12962: LD_VAR 0 1
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: LD_INT 4
12972: PPUSH
12973: CALL_OW 12
12977: PPUSH
12978: CALL_OW 336
12982: GO 12929
12984: POP
12985: POP
// end ;
12986: PPOPN 1
12988: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12989: LD_EXP 30
12993: PUSH
12994: LD_EXP 42
12998: AND
12999: IFFALSE 13078
13001: GO 13003
13003: DISABLE
13004: LD_INT 0
13006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13007: LD_ADDR_VAR 0 1
13011: PUSH
13012: LD_INT 22
13014: PUSH
13015: LD_OWVAR 2
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 21
13026: PUSH
13027: LD_INT 3
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PPUSH
13038: CALL_OW 69
13042: ST_TO_ADDR
// if not tmp then
13043: LD_VAR 0 1
13047: NOT
13048: IFFALSE 13052
// exit ;
13050: GO 13078
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13052: LD_VAR 0 1
13056: PUSH
13057: LD_INT 1
13059: PPUSH
13060: LD_VAR 0 1
13064: PPUSH
13065: CALL_OW 12
13069: ARRAY
13070: PPUSH
13071: LD_INT 100
13073: PPUSH
13074: CALL_OW 234
// end ;
13078: PPOPN 1
13080: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13081: LD_EXP 30
13085: PUSH
13086: LD_EXP 44
13090: AND
13091: IFFALSE 13189
13093: GO 13095
13095: DISABLE
13096: LD_INT 0
13098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13099: LD_ADDR_VAR 0 1
13103: PUSH
13104: LD_INT 22
13106: PUSH
13107: LD_OWVAR 2
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 21
13118: PUSH
13119: LD_INT 1
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: ST_TO_ADDR
// if not tmp then
13135: LD_VAR 0 1
13139: NOT
13140: IFFALSE 13144
// exit ;
13142: GO 13189
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13144: LD_VAR 0 1
13148: PUSH
13149: LD_INT 1
13151: PPUSH
13152: LD_VAR 0 1
13156: PPUSH
13157: CALL_OW 12
13161: ARRAY
13162: PPUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 4
13168: PPUSH
13169: CALL_OW 12
13173: PPUSH
13174: LD_INT 3000
13176: PPUSH
13177: LD_INT 9000
13179: PPUSH
13180: CALL_OW 12
13184: PPUSH
13185: CALL_OW 492
// end ;
13189: PPOPN 1
13191: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13192: LD_EXP 30
13196: PUSH
13197: LD_EXP 45
13201: AND
13202: IFFALSE 13222
13204: GO 13206
13206: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13207: LD_INT 1
13209: PPUSH
13210: LD_OWVAR 2
13214: PPUSH
13215: LD_INT 0
13217: PPUSH
13218: CALL_OW 324
13222: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13223: LD_EXP 30
13227: PUSH
13228: LD_EXP 46
13232: AND
13233: IFFALSE 13316
13235: GO 13237
13237: DISABLE
13238: LD_INT 0
13240: PPUSH
13241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13242: LD_ADDR_VAR 0 2
13246: PUSH
13247: LD_INT 22
13249: PUSH
13250: LD_OWVAR 2
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 21
13261: PUSH
13262: LD_INT 3
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 69
13277: ST_TO_ADDR
// if not tmp then
13278: LD_VAR 0 2
13282: NOT
13283: IFFALSE 13287
// exit ;
13285: GO 13316
// for i in tmp do
13287: LD_ADDR_VAR 0 1
13291: PUSH
13292: LD_VAR 0 2
13296: PUSH
13297: FOR_IN
13298: IFFALSE 13314
// SetBLevel ( i , 10 ) ;
13300: LD_VAR 0 1
13304: PPUSH
13305: LD_INT 10
13307: PPUSH
13308: CALL_OW 241
13312: GO 13297
13314: POP
13315: POP
// end ;
13316: PPOPN 2
13318: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13319: LD_EXP 30
13323: PUSH
13324: LD_EXP 47
13328: AND
13329: IFFALSE 13440
13331: GO 13333
13333: DISABLE
13334: LD_INT 0
13336: PPUSH
13337: PPUSH
13338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13339: LD_ADDR_VAR 0 3
13343: PUSH
13344: LD_INT 22
13346: PUSH
13347: LD_OWVAR 2
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 25
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PPUSH
13370: CALL_OW 69
13374: ST_TO_ADDR
// if not tmp then
13375: LD_VAR 0 3
13379: NOT
13380: IFFALSE 13384
// exit ;
13382: GO 13440
// un := tmp [ rand ( 1 , tmp ) ] ;
13384: LD_ADDR_VAR 0 2
13388: PUSH
13389: LD_VAR 0 3
13393: PUSH
13394: LD_INT 1
13396: PPUSH
13397: LD_VAR 0 3
13401: PPUSH
13402: CALL_OW 12
13406: ARRAY
13407: ST_TO_ADDR
// if Crawls ( un ) then
13408: LD_VAR 0 2
13412: PPUSH
13413: CALL_OW 318
13417: IFFALSE 13428
// ComWalk ( un ) ;
13419: LD_VAR 0 2
13423: PPUSH
13424: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13428: LD_VAR 0 2
13432: PPUSH
13433: LD_INT 5
13435: PPUSH
13436: CALL_OW 336
// end ;
13440: PPOPN 3
13442: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13443: LD_EXP 30
13447: PUSH
13448: LD_EXP 48
13452: AND
13453: PUSH
13454: LD_OWVAR 67
13458: PUSH
13459: LD_INT 3
13461: LESS
13462: AND
13463: IFFALSE 13482
13465: GO 13467
13467: DISABLE
// Difficulty := Difficulty + 1 ;
13468: LD_ADDR_OWVAR 67
13472: PUSH
13473: LD_OWVAR 67
13477: PUSH
13478: LD_INT 1
13480: PLUS
13481: ST_TO_ADDR
13482: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13483: LD_EXP 30
13487: PUSH
13488: LD_EXP 49
13492: AND
13493: IFFALSE 13596
13495: GO 13497
13497: DISABLE
13498: LD_INT 0
13500: PPUSH
// begin for i := 1 to 5 do
13501: LD_ADDR_VAR 0 1
13505: PUSH
13506: DOUBLE
13507: LD_INT 1
13509: DEC
13510: ST_TO_ADDR
13511: LD_INT 5
13513: PUSH
13514: FOR_TO
13515: IFFALSE 13594
// begin uc_nation := nation_nature ;
13517: LD_ADDR_OWVAR 21
13521: PUSH
13522: LD_INT 0
13524: ST_TO_ADDR
// uc_side := 0 ;
13525: LD_ADDR_OWVAR 20
13529: PUSH
13530: LD_INT 0
13532: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13533: LD_ADDR_OWVAR 29
13537: PUSH
13538: LD_INT 12
13540: PUSH
13541: LD_INT 12
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: ST_TO_ADDR
// hc_agressivity := 20 ;
13548: LD_ADDR_OWVAR 35
13552: PUSH
13553: LD_INT 20
13555: ST_TO_ADDR
// hc_class := class_tiger ;
13556: LD_ADDR_OWVAR 28
13560: PUSH
13561: LD_INT 14
13563: ST_TO_ADDR
// hc_gallery :=  ;
13564: LD_ADDR_OWVAR 33
13568: PUSH
13569: LD_STRING 
13571: ST_TO_ADDR
// hc_name :=  ;
13572: LD_ADDR_OWVAR 26
13576: PUSH
13577: LD_STRING 
13579: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13580: CALL_OW 44
13584: PPUSH
13585: LD_INT 0
13587: PPUSH
13588: CALL_OW 51
// end ;
13592: GO 13514
13594: POP
13595: POP
// end ;
13596: PPOPN 1
13598: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13599: LD_EXP 30
13603: PUSH
13604: LD_EXP 50
13608: AND
13609: IFFALSE 13618
13611: GO 13613
13613: DISABLE
// StreamSibBomb ;
13614: CALL 13619 0 0
13618: END
// export function StreamSibBomb ; var i , x , y ; begin
13619: LD_INT 0
13621: PPUSH
13622: PPUSH
13623: PPUSH
13624: PPUSH
// result := false ;
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_INT 0
13632: ST_TO_ADDR
// for i := 1 to 16 do
13633: LD_ADDR_VAR 0 2
13637: PUSH
13638: DOUBLE
13639: LD_INT 1
13641: DEC
13642: ST_TO_ADDR
13643: LD_INT 16
13645: PUSH
13646: FOR_TO
13647: IFFALSE 13846
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13649: LD_ADDR_VAR 0 3
13653: PUSH
13654: LD_INT 10
13656: PUSH
13657: LD_INT 20
13659: PUSH
13660: LD_INT 30
13662: PUSH
13663: LD_INT 40
13665: PUSH
13666: LD_INT 50
13668: PUSH
13669: LD_INT 60
13671: PUSH
13672: LD_INT 70
13674: PUSH
13675: LD_INT 80
13677: PUSH
13678: LD_INT 90
13680: PUSH
13681: LD_INT 100
13683: PUSH
13684: LD_INT 110
13686: PUSH
13687: LD_INT 120
13689: PUSH
13690: LD_INT 130
13692: PUSH
13693: LD_INT 140
13695: PUSH
13696: LD_INT 150
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 1
13718: PPUSH
13719: LD_INT 15
13721: PPUSH
13722: CALL_OW 12
13726: ARRAY
13727: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13728: LD_ADDR_VAR 0 4
13732: PUSH
13733: LD_INT 10
13735: PUSH
13736: LD_INT 20
13738: PUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 40
13744: PUSH
13745: LD_INT 50
13747: PUSH
13748: LD_INT 60
13750: PUSH
13751: LD_INT 70
13753: PUSH
13754: LD_INT 80
13756: PUSH
13757: LD_INT 90
13759: PUSH
13760: LD_INT 100
13762: PUSH
13763: LD_INT 110
13765: PUSH
13766: LD_INT 120
13768: PUSH
13769: LD_INT 130
13771: PUSH
13772: LD_INT 140
13774: PUSH
13775: LD_INT 150
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 1
13797: PPUSH
13798: LD_INT 15
13800: PPUSH
13801: CALL_OW 12
13805: ARRAY
13806: ST_TO_ADDR
// if ValidHex ( x , y ) then
13807: LD_VAR 0 3
13811: PPUSH
13812: LD_VAR 0 4
13816: PPUSH
13817: CALL_OW 488
13821: IFFALSE 13844
// begin result := [ x , y ] ;
13823: LD_ADDR_VAR 0 1
13827: PUSH
13828: LD_VAR 0 3
13832: PUSH
13833: LD_VAR 0 4
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: ST_TO_ADDR
// break ;
13842: GO 13846
// end ; end ;
13844: GO 13646
13846: POP
13847: POP
// if result then
13848: LD_VAR 0 1
13852: IFFALSE 13912
// begin ToLua ( playSibBomb() ) ;
13854: LD_STRING playSibBomb()
13856: PPUSH
13857: CALL_OW 559
// wait ( 0 0$14 ) ;
13861: LD_INT 490
13863: PPUSH
13864: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13868: LD_VAR 0 1
13872: PUSH
13873: LD_INT 1
13875: ARRAY
13876: PPUSH
13877: LD_VAR 0 1
13881: PUSH
13882: LD_INT 2
13884: ARRAY
13885: PPUSH
13886: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13890: LD_VAR 0 1
13894: PUSH
13895: LD_INT 1
13897: ARRAY
13898: PPUSH
13899: LD_VAR 0 1
13903: PUSH
13904: LD_INT 2
13906: ARRAY
13907: PPUSH
13908: CALL_OW 429
// end ; end ;
13912: LD_VAR 0 1
13916: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13917: LD_EXP 30
13921: PUSH
13922: LD_EXP 52
13926: AND
13927: IFFALSE 13939
13929: GO 13931
13931: DISABLE
// YouLost (  ) ;
13932: LD_STRING 
13934: PPUSH
13935: CALL_OW 104
13939: END
// every 0 0$1 trigger StreamModeActive and sFog do
13940: LD_EXP 30
13944: PUSH
13945: LD_EXP 51
13949: AND
13950: IFFALSE 13964
13952: GO 13954
13954: DISABLE
// FogOff ( your_side ) ;
13955: LD_OWVAR 2
13959: PPUSH
13960: CALL_OW 344
13964: END
// every 0 0$1 trigger StreamModeActive and sSun do
13965: LD_EXP 30
13969: PUSH
13970: LD_EXP 53
13974: AND
13975: IFFALSE 14003
13977: GO 13979
13979: DISABLE
// begin solar_recharge_percent := 0 ;
13980: LD_ADDR_OWVAR 79
13984: PUSH
13985: LD_INT 0
13987: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13988: LD_INT 10500
13990: PPUSH
13991: CALL_OW 67
// solar_recharge_percent := 100 ;
13995: LD_ADDR_OWVAR 79
13999: PUSH
14000: LD_INT 100
14002: ST_TO_ADDR
// end ;
14003: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14004: LD_EXP 30
14008: PUSH
14009: LD_EXP 54
14013: AND
14014: IFFALSE 14253
14016: GO 14018
14018: DISABLE
14019: LD_INT 0
14021: PPUSH
14022: PPUSH
14023: PPUSH
// begin tmp := [ ] ;
14024: LD_ADDR_VAR 0 3
14028: PUSH
14029: EMPTY
14030: ST_TO_ADDR
// for i := 1 to 6 do
14031: LD_ADDR_VAR 0 1
14035: PUSH
14036: DOUBLE
14037: LD_INT 1
14039: DEC
14040: ST_TO_ADDR
14041: LD_INT 6
14043: PUSH
14044: FOR_TO
14045: IFFALSE 14150
// begin uc_nation := nation_nature ;
14047: LD_ADDR_OWVAR 21
14051: PUSH
14052: LD_INT 0
14054: ST_TO_ADDR
// uc_side := 0 ;
14055: LD_ADDR_OWVAR 20
14059: PUSH
14060: LD_INT 0
14062: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14063: LD_ADDR_OWVAR 29
14067: PUSH
14068: LD_INT 12
14070: PUSH
14071: LD_INT 12
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: ST_TO_ADDR
// hc_agressivity := 20 ;
14078: LD_ADDR_OWVAR 35
14082: PUSH
14083: LD_INT 20
14085: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14086: LD_ADDR_OWVAR 28
14090: PUSH
14091: LD_INT 17
14093: ST_TO_ADDR
// hc_gallery :=  ;
14094: LD_ADDR_OWVAR 33
14098: PUSH
14099: LD_STRING 
14101: ST_TO_ADDR
// hc_name :=  ;
14102: LD_ADDR_OWVAR 26
14106: PUSH
14107: LD_STRING 
14109: ST_TO_ADDR
// un := CreateHuman ;
14110: LD_ADDR_VAR 0 2
14114: PUSH
14115: CALL_OW 44
14119: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14120: LD_VAR 0 2
14124: PPUSH
14125: LD_INT 1
14127: PPUSH
14128: CALL_OW 51
// tmp := tmp ^ un ;
14132: LD_ADDR_VAR 0 3
14136: PUSH
14137: LD_VAR 0 3
14141: PUSH
14142: LD_VAR 0 2
14146: ADD
14147: ST_TO_ADDR
// end ;
14148: GO 14044
14150: POP
14151: POP
// repeat wait ( 0 0$1 ) ;
14152: LD_INT 35
14154: PPUSH
14155: CALL_OW 67
// for un in tmp do
14159: LD_ADDR_VAR 0 2
14163: PUSH
14164: LD_VAR 0 3
14168: PUSH
14169: FOR_IN
14170: IFFALSE 14244
// begin if IsDead ( un ) then
14172: LD_VAR 0 2
14176: PPUSH
14177: CALL_OW 301
14181: IFFALSE 14201
// begin tmp := tmp diff un ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: LD_VAR 0 3
14192: PUSH
14193: LD_VAR 0 2
14197: DIFF
14198: ST_TO_ADDR
// continue ;
14199: GO 14169
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14201: LD_VAR 0 2
14205: PPUSH
14206: LD_INT 3
14208: PUSH
14209: LD_INT 22
14211: PUSH
14212: LD_INT 0
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: PPUSH
14228: LD_VAR 0 2
14232: PPUSH
14233: CALL_OW 74
14237: PPUSH
14238: CALL_OW 115
// end ;
14242: GO 14169
14244: POP
14245: POP
// until not tmp ;
14246: LD_VAR 0 3
14250: NOT
14251: IFFALSE 14152
// end ;
14253: PPOPN 3
14255: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14256: LD_EXP 30
14260: PUSH
14261: LD_EXP 55
14265: AND
14266: IFFALSE 14320
14268: GO 14270
14270: DISABLE
// begin ToLua ( displayTroll(); ) ;
14271: LD_STRING displayTroll();
14273: PPUSH
14274: CALL_OW 559
// wait ( 3 3$00 ) ;
14278: LD_INT 6300
14280: PPUSH
14281: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14285: LD_STRING hideTroll();
14287: PPUSH
14288: CALL_OW 559
// wait ( 1 1$00 ) ;
14292: LD_INT 2100
14294: PPUSH
14295: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14299: LD_STRING displayTroll();
14301: PPUSH
14302: CALL_OW 559
// wait ( 1 1$00 ) ;
14306: LD_INT 2100
14308: PPUSH
14309: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14313: LD_STRING hideTroll();
14315: PPUSH
14316: CALL_OW 559
// end ;
14320: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14321: LD_EXP 30
14325: PUSH
14326: LD_EXP 56
14330: AND
14331: IFFALSE 14394
14333: GO 14335
14335: DISABLE
14336: LD_INT 0
14338: PPUSH
// begin p := 0 ;
14339: LD_ADDR_VAR 0 1
14343: PUSH
14344: LD_INT 0
14346: ST_TO_ADDR
// repeat game_speed := 1 ;
14347: LD_ADDR_OWVAR 65
14351: PUSH
14352: LD_INT 1
14354: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14355: LD_INT 35
14357: PPUSH
14358: CALL_OW 67
// p := p + 1 ;
14362: LD_ADDR_VAR 0 1
14366: PUSH
14367: LD_VAR 0 1
14371: PUSH
14372: LD_INT 1
14374: PLUS
14375: ST_TO_ADDR
// until p >= 60 ;
14376: LD_VAR 0 1
14380: PUSH
14381: LD_INT 60
14383: GREATEREQUAL
14384: IFFALSE 14347
// game_speed := 4 ;
14386: LD_ADDR_OWVAR 65
14390: PUSH
14391: LD_INT 4
14393: ST_TO_ADDR
// end ;
14394: PPOPN 1
14396: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14397: LD_EXP 30
14401: PUSH
14402: LD_EXP 57
14406: AND
14407: IFFALSE 14553
14409: GO 14411
14411: DISABLE
14412: LD_INT 0
14414: PPUSH
14415: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14416: LD_ADDR_VAR 0 1
14420: PUSH
14421: LD_INT 22
14423: PUSH
14424: LD_OWVAR 2
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 2
14435: PUSH
14436: LD_INT 30
14438: PUSH
14439: LD_INT 0
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 30
14448: PUSH
14449: LD_INT 1
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: LIST
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PPUSH
14465: CALL_OW 69
14469: ST_TO_ADDR
// if not depot then
14470: LD_VAR 0 1
14474: NOT
14475: IFFALSE 14479
// exit ;
14477: GO 14553
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14479: LD_ADDR_VAR 0 2
14483: PUSH
14484: LD_VAR 0 1
14488: PUSH
14489: LD_INT 1
14491: PPUSH
14492: LD_VAR 0 1
14496: PPUSH
14497: CALL_OW 12
14501: ARRAY
14502: PPUSH
14503: CALL_OW 274
14507: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14508: LD_VAR 0 2
14512: PPUSH
14513: LD_INT 1
14515: PPUSH
14516: LD_INT 0
14518: PPUSH
14519: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14523: LD_VAR 0 2
14527: PPUSH
14528: LD_INT 2
14530: PPUSH
14531: LD_INT 0
14533: PPUSH
14534: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14538: LD_VAR 0 2
14542: PPUSH
14543: LD_INT 3
14545: PPUSH
14546: LD_INT 0
14548: PPUSH
14549: CALL_OW 277
// end ;
14553: PPOPN 2
14555: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14556: LD_EXP 30
14560: PUSH
14561: LD_EXP 58
14565: AND
14566: IFFALSE 14663
14568: GO 14570
14570: DISABLE
14571: LD_INT 0
14573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14574: LD_ADDR_VAR 0 1
14578: PUSH
14579: LD_INT 22
14581: PUSH
14582: LD_OWVAR 2
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: LD_INT 21
14593: PUSH
14594: LD_INT 1
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PUSH
14601: LD_INT 3
14603: PUSH
14604: LD_INT 23
14606: PUSH
14607: LD_INT 0
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: PPUSH
14623: CALL_OW 69
14627: ST_TO_ADDR
// if not tmp then
14628: LD_VAR 0 1
14632: NOT
14633: IFFALSE 14637
// exit ;
14635: GO 14663
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14637: LD_VAR 0 1
14641: PUSH
14642: LD_INT 1
14644: PPUSH
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 12
14654: ARRAY
14655: PPUSH
14656: LD_INT 200
14658: PPUSH
14659: CALL_OW 234
// end ;
14663: PPOPN 1
14665: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14666: LD_EXP 30
14670: PUSH
14671: LD_EXP 59
14675: AND
14676: IFFALSE 14755
14678: GO 14680
14680: DISABLE
14681: LD_INT 0
14683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14684: LD_ADDR_VAR 0 1
14688: PUSH
14689: LD_INT 22
14691: PUSH
14692: LD_OWVAR 2
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 21
14703: PUSH
14704: LD_INT 2
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: ST_TO_ADDR
// if not tmp then
14720: LD_VAR 0 1
14724: NOT
14725: IFFALSE 14729
// exit ;
14727: GO 14755
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14729: LD_VAR 0 1
14733: PUSH
14734: LD_INT 1
14736: PPUSH
14737: LD_VAR 0 1
14741: PPUSH
14742: CALL_OW 12
14746: ARRAY
14747: PPUSH
14748: LD_INT 60
14750: PPUSH
14751: CALL_OW 234
// end ;
14755: PPOPN 1
14757: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14758: LD_EXP 30
14762: PUSH
14763: LD_EXP 60
14767: AND
14768: IFFALSE 14867
14770: GO 14772
14772: DISABLE
14773: LD_INT 0
14775: PPUSH
14776: PPUSH
// begin enable ;
14777: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_INT 22
14785: PUSH
14786: LD_OWVAR 2
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 61
14797: PUSH
14798: EMPTY
14799: LIST
14800: PUSH
14801: LD_INT 33
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: PPUSH
14816: CALL_OW 69
14820: ST_TO_ADDR
// if not tmp then
14821: LD_VAR 0 1
14825: NOT
14826: IFFALSE 14830
// exit ;
14828: GO 14867
// for i in tmp do
14830: LD_ADDR_VAR 0 2
14834: PUSH
14835: LD_VAR 0 1
14839: PUSH
14840: FOR_IN
14841: IFFALSE 14865
// if IsControledBy ( i ) then
14843: LD_VAR 0 2
14847: PPUSH
14848: CALL_OW 312
14852: IFFALSE 14863
// ComUnlink ( i ) ;
14854: LD_VAR 0 2
14858: PPUSH
14859: CALL_OW 136
14863: GO 14840
14865: POP
14866: POP
// end ;
14867: PPOPN 2
14869: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14870: LD_EXP 30
14874: PUSH
14875: LD_EXP 61
14879: AND
14880: IFFALSE 15020
14882: GO 14884
14884: DISABLE
14885: LD_INT 0
14887: PPUSH
14888: PPUSH
// begin ToLua ( displayPowell(); ) ;
14889: LD_STRING displayPowell();
14891: PPUSH
14892: CALL_OW 559
// uc_side := 0 ;
14896: LD_ADDR_OWVAR 20
14900: PUSH
14901: LD_INT 0
14903: ST_TO_ADDR
// uc_nation := 2 ;
14904: LD_ADDR_OWVAR 21
14908: PUSH
14909: LD_INT 2
14911: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14912: LD_ADDR_OWVAR 37
14916: PUSH
14917: LD_INT 14
14919: ST_TO_ADDR
// vc_engine := engine_siberite ;
14920: LD_ADDR_OWVAR 39
14924: PUSH
14925: LD_INT 3
14927: ST_TO_ADDR
// vc_control := control_apeman ;
14928: LD_ADDR_OWVAR 38
14932: PUSH
14933: LD_INT 5
14935: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14936: LD_ADDR_OWVAR 40
14940: PUSH
14941: LD_INT 29
14943: ST_TO_ADDR
// un := CreateVehicle ;
14944: LD_ADDR_VAR 0 2
14948: PUSH
14949: CALL_OW 45
14953: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14954: LD_VAR 0 2
14958: PPUSH
14959: LD_INT 1
14961: PPUSH
14962: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14966: LD_INT 35
14968: PPUSH
14969: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14973: LD_VAR 0 2
14977: PPUSH
14978: LD_INT 22
14980: PUSH
14981: LD_OWVAR 2
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PPUSH
14990: CALL_OW 69
14994: PPUSH
14995: LD_VAR 0 2
14999: PPUSH
15000: CALL_OW 74
15004: PPUSH
15005: CALL_OW 115
// until IsDead ( un ) ;
15009: LD_VAR 0 2
15013: PPUSH
15014: CALL_OW 301
15018: IFFALSE 14966
// end ;
15020: PPOPN 2
15022: END
// every 0 0$1 trigger StreamModeActive and sStu do
15023: LD_EXP 30
15027: PUSH
15028: LD_EXP 69
15032: AND
15033: IFFALSE 15049
15035: GO 15037
15037: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15038: LD_STRING displayStucuk();
15040: PPUSH
15041: CALL_OW 559
// ResetFog ;
15045: CALL_OW 335
// end ;
15049: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15050: LD_EXP 30
15054: PUSH
15055: LD_EXP 62
15059: AND
15060: IFFALSE 15201
15062: GO 15064
15064: DISABLE
15065: LD_INT 0
15067: PPUSH
15068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15069: LD_ADDR_VAR 0 2
15073: PUSH
15074: LD_INT 22
15076: PUSH
15077: LD_OWVAR 2
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 21
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PPUSH
15100: CALL_OW 69
15104: ST_TO_ADDR
// if not tmp then
15105: LD_VAR 0 2
15109: NOT
15110: IFFALSE 15114
// exit ;
15112: GO 15201
// un := tmp [ rand ( 1 , tmp ) ] ;
15114: LD_ADDR_VAR 0 1
15118: PUSH
15119: LD_VAR 0 2
15123: PUSH
15124: LD_INT 1
15126: PPUSH
15127: LD_VAR 0 2
15131: PPUSH
15132: CALL_OW 12
15136: ARRAY
15137: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15138: LD_VAR 0 1
15142: PPUSH
15143: LD_INT 0
15145: PPUSH
15146: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_OWVAR 3
15159: PUSH
15160: LD_VAR 0 1
15164: DIFF
15165: PPUSH
15166: LD_VAR 0 1
15170: PPUSH
15171: CALL_OW 74
15175: PPUSH
15176: CALL_OW 115
// wait ( 0 0$20 ) ;
15180: LD_INT 700
15182: PPUSH
15183: CALL_OW 67
// SetSide ( un , your_side ) ;
15187: LD_VAR 0 1
15191: PPUSH
15192: LD_OWVAR 2
15196: PPUSH
15197: CALL_OW 235
// end ;
15201: PPOPN 2
15203: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15204: LD_EXP 30
15208: PUSH
15209: LD_EXP 63
15213: AND
15214: IFFALSE 15320
15216: GO 15218
15218: DISABLE
15219: LD_INT 0
15221: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15222: LD_ADDR_VAR 0 1
15226: PUSH
15227: LD_INT 22
15229: PUSH
15230: LD_OWVAR 2
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 30
15244: PUSH
15245: LD_INT 0
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 30
15254: PUSH
15255: LD_INT 1
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: LIST
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PPUSH
15271: CALL_OW 69
15275: ST_TO_ADDR
// if not depot then
15276: LD_VAR 0 1
15280: NOT
15281: IFFALSE 15285
// exit ;
15283: GO 15320
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15285: LD_VAR 0 1
15289: PUSH
15290: LD_INT 1
15292: ARRAY
15293: PPUSH
15294: CALL_OW 250
15298: PPUSH
15299: LD_VAR 0 1
15303: PUSH
15304: LD_INT 1
15306: ARRAY
15307: PPUSH
15308: CALL_OW 251
15312: PPUSH
15313: LD_INT 70
15315: PPUSH
15316: CALL_OW 495
// end ;
15320: PPOPN 1
15322: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15323: LD_EXP 30
15327: PUSH
15328: LD_EXP 64
15332: AND
15333: IFFALSE 15544
15335: GO 15337
15337: DISABLE
15338: LD_INT 0
15340: PPUSH
15341: PPUSH
15342: PPUSH
15343: PPUSH
15344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15345: LD_ADDR_VAR 0 5
15349: PUSH
15350: LD_INT 22
15352: PUSH
15353: LD_OWVAR 2
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 21
15364: PUSH
15365: LD_INT 1
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PPUSH
15376: CALL_OW 69
15380: ST_TO_ADDR
// if not tmp then
15381: LD_VAR 0 5
15385: NOT
15386: IFFALSE 15390
// exit ;
15388: GO 15544
// for i in tmp do
15390: LD_ADDR_VAR 0 1
15394: PUSH
15395: LD_VAR 0 5
15399: PUSH
15400: FOR_IN
15401: IFFALSE 15542
// begin d := rand ( 0 , 5 ) ;
15403: LD_ADDR_VAR 0 4
15407: PUSH
15408: LD_INT 0
15410: PPUSH
15411: LD_INT 5
15413: PPUSH
15414: CALL_OW 12
15418: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15419: LD_ADDR_VAR 0 2
15423: PUSH
15424: LD_VAR 0 1
15428: PPUSH
15429: CALL_OW 250
15433: PPUSH
15434: LD_VAR 0 4
15438: PPUSH
15439: LD_INT 3
15441: PPUSH
15442: LD_INT 12
15444: PPUSH
15445: CALL_OW 12
15449: PPUSH
15450: CALL_OW 272
15454: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15455: LD_ADDR_VAR 0 3
15459: PUSH
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL_OW 251
15469: PPUSH
15470: LD_VAR 0 4
15474: PPUSH
15475: LD_INT 3
15477: PPUSH
15478: LD_INT 12
15480: PPUSH
15481: CALL_OW 12
15485: PPUSH
15486: CALL_OW 273
15490: ST_TO_ADDR
// if ValidHex ( x , y ) then
15491: LD_VAR 0 2
15495: PPUSH
15496: LD_VAR 0 3
15500: PPUSH
15501: CALL_OW 488
15505: IFFALSE 15540
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15507: LD_VAR 0 1
15511: PPUSH
15512: LD_VAR 0 2
15516: PPUSH
15517: LD_VAR 0 3
15521: PPUSH
15522: LD_INT 3
15524: PPUSH
15525: LD_INT 6
15527: PPUSH
15528: CALL_OW 12
15532: PPUSH
15533: LD_INT 1
15535: PPUSH
15536: CALL_OW 483
// end ;
15540: GO 15400
15542: POP
15543: POP
// end ;
15544: PPOPN 5
15546: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15547: LD_EXP 30
15551: PUSH
15552: LD_EXP 65
15556: AND
15557: IFFALSE 15651
15559: GO 15561
15561: DISABLE
15562: LD_INT 0
15564: PPUSH
15565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15566: LD_ADDR_VAR 0 2
15570: PUSH
15571: LD_INT 22
15573: PUSH
15574: LD_OWVAR 2
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 32
15585: PUSH
15586: LD_INT 1
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 21
15595: PUSH
15596: LD_INT 2
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: LIST
15607: PPUSH
15608: CALL_OW 69
15612: ST_TO_ADDR
// if not tmp then
15613: LD_VAR 0 2
15617: NOT
15618: IFFALSE 15622
// exit ;
15620: GO 15651
// for i in tmp do
15622: LD_ADDR_VAR 0 1
15626: PUSH
15627: LD_VAR 0 2
15631: PUSH
15632: FOR_IN
15633: IFFALSE 15649
// SetFuel ( i , 0 ) ;
15635: LD_VAR 0 1
15639: PPUSH
15640: LD_INT 0
15642: PPUSH
15643: CALL_OW 240
15647: GO 15632
15649: POP
15650: POP
// end ;
15651: PPOPN 2
15653: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15654: LD_EXP 30
15658: PUSH
15659: LD_EXP 66
15663: AND
15664: IFFALSE 15730
15666: GO 15668
15668: DISABLE
15669: LD_INT 0
15671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15672: LD_ADDR_VAR 0 1
15676: PUSH
15677: LD_INT 22
15679: PUSH
15680: LD_OWVAR 2
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 30
15691: PUSH
15692: LD_INT 29
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: ST_TO_ADDR
// if not tmp then
15708: LD_VAR 0 1
15712: NOT
15713: IFFALSE 15717
// exit ;
15715: GO 15730
// DestroyUnit ( tmp [ 1 ] ) ;
15717: LD_VAR 0 1
15721: PUSH
15722: LD_INT 1
15724: ARRAY
15725: PPUSH
15726: CALL_OW 65
// end ;
15730: PPOPN 1
15732: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15733: LD_EXP 30
15737: PUSH
15738: LD_EXP 68
15742: AND
15743: IFFALSE 15872
15745: GO 15747
15747: DISABLE
15748: LD_INT 0
15750: PPUSH
// begin uc_side := 0 ;
15751: LD_ADDR_OWVAR 20
15755: PUSH
15756: LD_INT 0
15758: ST_TO_ADDR
// uc_nation := nation_arabian ;
15759: LD_ADDR_OWVAR 21
15763: PUSH
15764: LD_INT 2
15766: ST_TO_ADDR
// hc_gallery :=  ;
15767: LD_ADDR_OWVAR 33
15771: PUSH
15772: LD_STRING 
15774: ST_TO_ADDR
// hc_name :=  ;
15775: LD_ADDR_OWVAR 26
15779: PUSH
15780: LD_STRING 
15782: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15783: LD_INT 1
15785: PPUSH
15786: LD_INT 11
15788: PPUSH
15789: LD_INT 10
15791: PPUSH
15792: CALL_OW 380
// un := CreateHuman ;
15796: LD_ADDR_VAR 0 1
15800: PUSH
15801: CALL_OW 44
15805: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15806: LD_VAR 0 1
15810: PPUSH
15811: LD_INT 1
15813: PPUSH
15814: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15818: LD_INT 35
15820: PPUSH
15821: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15825: LD_VAR 0 1
15829: PPUSH
15830: LD_INT 22
15832: PUSH
15833: LD_OWVAR 2
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: PPUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 74
15856: PPUSH
15857: CALL_OW 115
// until IsDead ( un ) ;
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 301
15870: IFFALSE 15818
// end ;
15872: PPOPN 1
15874: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15875: LD_EXP 30
15879: PUSH
15880: LD_EXP 70
15884: AND
15885: IFFALSE 15897
15887: GO 15889
15889: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15890: LD_STRING earthquake(getX(game), 0, 32)
15892: PPUSH
15893: CALL_OW 559
15897: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15898: LD_EXP 30
15902: PUSH
15903: LD_EXP 71
15907: AND
15908: IFFALSE 15999
15910: GO 15912
15912: DISABLE
15913: LD_INT 0
15915: PPUSH
// begin enable ;
15916: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15917: LD_ADDR_VAR 0 1
15921: PUSH
15922: LD_INT 22
15924: PUSH
15925: LD_OWVAR 2
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 21
15936: PUSH
15937: LD_INT 2
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 33
15946: PUSH
15947: LD_INT 3
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: LIST
15958: PPUSH
15959: CALL_OW 69
15963: ST_TO_ADDR
// if not tmp then
15964: LD_VAR 0 1
15968: NOT
15969: IFFALSE 15973
// exit ;
15971: GO 15999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15973: LD_VAR 0 1
15977: PUSH
15978: LD_INT 1
15980: PPUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 12
15990: ARRAY
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 234
// end ;
15999: PPOPN 1
16001: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16002: LD_EXP 30
16006: PUSH
16007: LD_EXP 72
16011: AND
16012: IFFALSE 16153
16014: GO 16016
16016: DISABLE
16017: LD_INT 0
16019: PPUSH
16020: PPUSH
16021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16022: LD_ADDR_VAR 0 3
16026: PUSH
16027: LD_INT 22
16029: PUSH
16030: LD_OWVAR 2
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 25
16041: PUSH
16042: LD_INT 1
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL_OW 69
16057: ST_TO_ADDR
// if not tmp then
16058: LD_VAR 0 3
16062: NOT
16063: IFFALSE 16067
// exit ;
16065: GO 16153
// un := tmp [ rand ( 1 , tmp ) ] ;
16067: LD_ADDR_VAR 0 2
16071: PUSH
16072: LD_VAR 0 3
16076: PUSH
16077: LD_INT 1
16079: PPUSH
16080: LD_VAR 0 3
16084: PPUSH
16085: CALL_OW 12
16089: ARRAY
16090: ST_TO_ADDR
// if Crawls ( un ) then
16091: LD_VAR 0 2
16095: PPUSH
16096: CALL_OW 318
16100: IFFALSE 16111
// ComWalk ( un ) ;
16102: LD_VAR 0 2
16106: PPUSH
16107: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16111: LD_VAR 0 2
16115: PPUSH
16116: LD_INT 9
16118: PPUSH
16119: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16123: LD_INT 28
16125: PPUSH
16126: LD_OWVAR 2
16130: PPUSH
16131: LD_INT 2
16133: PPUSH
16134: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16138: LD_INT 29
16140: PPUSH
16141: LD_OWVAR 2
16145: PPUSH
16146: LD_INT 2
16148: PPUSH
16149: CALL_OW 322
// end ;
16153: PPOPN 3
16155: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16156: LD_EXP 30
16160: PUSH
16161: LD_EXP 73
16165: AND
16166: IFFALSE 16277
16168: GO 16170
16170: DISABLE
16171: LD_INT 0
16173: PPUSH
16174: PPUSH
16175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: LD_INT 22
16183: PUSH
16184: LD_OWVAR 2
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 25
16195: PUSH
16196: LD_INT 1
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PPUSH
16207: CALL_OW 69
16211: ST_TO_ADDR
// if not tmp then
16212: LD_VAR 0 3
16216: NOT
16217: IFFALSE 16221
// exit ;
16219: GO 16277
// un := tmp [ rand ( 1 , tmp ) ] ;
16221: LD_ADDR_VAR 0 2
16225: PUSH
16226: LD_VAR 0 3
16230: PUSH
16231: LD_INT 1
16233: PPUSH
16234: LD_VAR 0 3
16238: PPUSH
16239: CALL_OW 12
16243: ARRAY
16244: ST_TO_ADDR
// if Crawls ( un ) then
16245: LD_VAR 0 2
16249: PPUSH
16250: CALL_OW 318
16254: IFFALSE 16265
// ComWalk ( un ) ;
16256: LD_VAR 0 2
16260: PPUSH
16261: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16265: LD_VAR 0 2
16269: PPUSH
16270: LD_INT 8
16272: PPUSH
16273: CALL_OW 336
// end ;
16277: PPOPN 3
16279: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16280: LD_EXP 30
16284: PUSH
16285: LD_EXP 74
16289: AND
16290: IFFALSE 16434
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_INT 22
16306: PUSH
16307: LD_OWVAR 2
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 21
16318: PUSH
16319: LD_INT 2
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: LD_INT 34
16331: PUSH
16332: LD_INT 12
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 34
16341: PUSH
16342: LD_INT 51
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 34
16351: PUSH
16352: LD_INT 32
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: PPUSH
16370: CALL_OW 69
16374: ST_TO_ADDR
// if not tmp then
16375: LD_VAR 0 2
16379: NOT
16380: IFFALSE 16384
// exit ;
16382: GO 16434
// for i in tmp do
16384: LD_ADDR_VAR 0 1
16388: PUSH
16389: LD_VAR 0 2
16393: PUSH
16394: FOR_IN
16395: IFFALSE 16432
// if GetCargo ( i , mat_artifact ) = 0 then
16397: LD_VAR 0 1
16401: PPUSH
16402: LD_INT 4
16404: PPUSH
16405: CALL_OW 289
16409: PUSH
16410: LD_INT 0
16412: EQUAL
16413: IFFALSE 16430
// SetCargo ( i , mat_siberit , 100 ) ;
16415: LD_VAR 0 1
16419: PPUSH
16420: LD_INT 3
16422: PPUSH
16423: LD_INT 100
16425: PPUSH
16426: CALL_OW 290
16430: GO 16394
16432: POP
16433: POP
// end ;
16434: PPOPN 2
16436: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16437: LD_EXP 30
16441: PUSH
16442: LD_EXP 75
16446: AND
16447: IFFALSE 16630
16449: GO 16451
16451: DISABLE
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16456: LD_ADDR_VAR 0 2
16460: PUSH
16461: LD_INT 22
16463: PUSH
16464: LD_OWVAR 2
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PPUSH
16473: CALL_OW 69
16477: ST_TO_ADDR
// if not tmp then
16478: LD_VAR 0 2
16482: NOT
16483: IFFALSE 16487
// exit ;
16485: GO 16630
// for i := 1 to 2 do
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: DOUBLE
16493: LD_INT 1
16495: DEC
16496: ST_TO_ADDR
16497: LD_INT 2
16499: PUSH
16500: FOR_TO
16501: IFFALSE 16628
// begin uc_side := your_side ;
16503: LD_ADDR_OWVAR 20
16507: PUSH
16508: LD_OWVAR 2
16512: ST_TO_ADDR
// uc_nation := nation_american ;
16513: LD_ADDR_OWVAR 21
16517: PUSH
16518: LD_INT 1
16520: ST_TO_ADDR
// vc_chassis := us_morphling ;
16521: LD_ADDR_OWVAR 37
16525: PUSH
16526: LD_INT 5
16528: ST_TO_ADDR
// vc_engine := engine_siberite ;
16529: LD_ADDR_OWVAR 39
16533: PUSH
16534: LD_INT 3
16536: ST_TO_ADDR
// vc_control := control_computer ;
16537: LD_ADDR_OWVAR 38
16541: PUSH
16542: LD_INT 3
16544: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16545: LD_ADDR_OWVAR 40
16549: PUSH
16550: LD_INT 10
16552: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16553: LD_VAR 0 2
16557: PUSH
16558: LD_INT 1
16560: ARRAY
16561: PPUSH
16562: CALL_OW 310
16566: NOT
16567: IFFALSE 16614
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16569: CALL_OW 45
16573: PPUSH
16574: LD_VAR 0 2
16578: PUSH
16579: LD_INT 1
16581: ARRAY
16582: PPUSH
16583: CALL_OW 250
16587: PPUSH
16588: LD_VAR 0 2
16592: PUSH
16593: LD_INT 1
16595: ARRAY
16596: PPUSH
16597: CALL_OW 251
16601: PPUSH
16602: LD_INT 12
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: CALL_OW 50
16612: GO 16626
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16614: CALL_OW 45
16618: PPUSH
16619: LD_INT 1
16621: PPUSH
16622: CALL_OW 51
// end ;
16626: GO 16500
16628: POP
16629: POP
// end ;
16630: PPOPN 2
16632: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16633: LD_EXP 30
16637: PUSH
16638: LD_EXP 76
16642: AND
16643: IFFALSE 16865
16645: GO 16647
16647: DISABLE
16648: LD_INT 0
16650: PPUSH
16651: PPUSH
16652: PPUSH
16653: PPUSH
16654: PPUSH
16655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16656: LD_ADDR_VAR 0 6
16660: PUSH
16661: LD_INT 22
16663: PUSH
16664: LD_OWVAR 2
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 21
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 3
16685: PUSH
16686: LD_INT 23
16688: PUSH
16689: LD_INT 0
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL_OW 69
16709: ST_TO_ADDR
// if not tmp then
16710: LD_VAR 0 6
16714: NOT
16715: IFFALSE 16719
// exit ;
16717: GO 16865
// s1 := rand ( 1 , 4 ) ;
16719: LD_ADDR_VAR 0 2
16723: PUSH
16724: LD_INT 1
16726: PPUSH
16727: LD_INT 4
16729: PPUSH
16730: CALL_OW 12
16734: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16735: LD_ADDR_VAR 0 4
16739: PUSH
16740: LD_VAR 0 6
16744: PUSH
16745: LD_INT 1
16747: ARRAY
16748: PPUSH
16749: LD_VAR 0 2
16753: PPUSH
16754: CALL_OW 259
16758: ST_TO_ADDR
// if s1 = 1 then
16759: LD_VAR 0 2
16763: PUSH
16764: LD_INT 1
16766: EQUAL
16767: IFFALSE 16787
// s2 := rand ( 2 , 4 ) else
16769: LD_ADDR_VAR 0 3
16773: PUSH
16774: LD_INT 2
16776: PPUSH
16777: LD_INT 4
16779: PPUSH
16780: CALL_OW 12
16784: ST_TO_ADDR
16785: GO 16795
// s2 := 1 ;
16787: LD_ADDR_VAR 0 3
16791: PUSH
16792: LD_INT 1
16794: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16795: LD_ADDR_VAR 0 5
16799: PUSH
16800: LD_VAR 0 6
16804: PUSH
16805: LD_INT 1
16807: ARRAY
16808: PPUSH
16809: LD_VAR 0 3
16813: PPUSH
16814: CALL_OW 259
16818: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16819: LD_VAR 0 6
16823: PUSH
16824: LD_INT 1
16826: ARRAY
16827: PPUSH
16828: LD_VAR 0 2
16832: PPUSH
16833: LD_VAR 0 5
16837: PPUSH
16838: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16842: LD_VAR 0 6
16846: PUSH
16847: LD_INT 1
16849: ARRAY
16850: PPUSH
16851: LD_VAR 0 3
16855: PPUSH
16856: LD_VAR 0 4
16860: PPUSH
16861: CALL_OW 237
// end ;
16865: PPOPN 6
16867: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16868: LD_EXP 30
16872: PUSH
16873: LD_EXP 77
16877: AND
16878: IFFALSE 16957
16880: GO 16882
16882: DISABLE
16883: LD_INT 0
16885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16886: LD_ADDR_VAR 0 1
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_OWVAR 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 30
16905: PUSH
16906: LD_INT 3
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: ST_TO_ADDR
// if not tmp then
16922: LD_VAR 0 1
16926: NOT
16927: IFFALSE 16931
// exit ;
16929: GO 16957
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16931: LD_VAR 0 1
16935: PUSH
16936: LD_INT 1
16938: PPUSH
16939: LD_VAR 0 1
16943: PPUSH
16944: CALL_OW 12
16948: ARRAY
16949: PPUSH
16950: LD_INT 1
16952: PPUSH
16953: CALL_OW 234
// end ;
16957: PPOPN 1
16959: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16960: LD_EXP 30
16964: PUSH
16965: LD_EXP 78
16969: AND
16970: IFFALSE 17082
16972: GO 16974
16974: DISABLE
16975: LD_INT 0
16977: PPUSH
16978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16979: LD_ADDR_VAR 0 2
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_OWVAR 2
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 2
16998: PUSH
16999: LD_INT 30
17001: PUSH
17002: LD_INT 27
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 30
17011: PUSH
17012: LD_INT 26
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 30
17021: PUSH
17022: LD_INT 28
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// if not tmp then
17044: LD_VAR 0 2
17048: NOT
17049: IFFALSE 17053
// exit ;
17051: GO 17082
// for i in tmp do
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: LD_VAR 0 2
17062: PUSH
17063: FOR_IN
17064: IFFALSE 17080
// SetLives ( i , 1 ) ;
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_INT 1
17073: PPUSH
17074: CALL_OW 234
17078: GO 17063
17080: POP
17081: POP
// end ;
17082: PPOPN 2
17084: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17085: LD_EXP 30
17089: PUSH
17090: LD_EXP 79
17094: AND
17095: IFFALSE 17369
17097: GO 17099
17099: DISABLE
17100: LD_INT 0
17102: PPUSH
17103: PPUSH
17104: PPUSH
// begin i := rand ( 1 , 7 ) ;
17105: LD_ADDR_VAR 0 1
17109: PUSH
17110: LD_INT 1
17112: PPUSH
17113: LD_INT 7
17115: PPUSH
17116: CALL_OW 12
17120: ST_TO_ADDR
// case i of 1 :
17121: LD_VAR 0 1
17125: PUSH
17126: LD_INT 1
17128: DOUBLE
17129: EQUAL
17130: IFTRUE 17134
17132: GO 17144
17134: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17135: LD_STRING earthquake(getX(game), 0, 32)
17137: PPUSH
17138: CALL_OW 559
17142: GO 17369
17144: LD_INT 2
17146: DOUBLE
17147: EQUAL
17148: IFTRUE 17152
17150: GO 17166
17152: POP
// begin ToLua ( displayStucuk(); ) ;
17153: LD_STRING displayStucuk();
17155: PPUSH
17156: CALL_OW 559
// ResetFog ;
17160: CALL_OW 335
// end ; 3 :
17164: GO 17369
17166: LD_INT 3
17168: DOUBLE
17169: EQUAL
17170: IFTRUE 17174
17172: GO 17278
17174: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17175: LD_ADDR_VAR 0 2
17179: PUSH
17180: LD_INT 22
17182: PUSH
17183: LD_OWVAR 2
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 25
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PPUSH
17206: CALL_OW 69
17210: ST_TO_ADDR
// if not tmp then
17211: LD_VAR 0 2
17215: NOT
17216: IFFALSE 17220
// exit ;
17218: GO 17369
// un := tmp [ rand ( 1 , tmp ) ] ;
17220: LD_ADDR_VAR 0 3
17224: PUSH
17225: LD_VAR 0 2
17229: PUSH
17230: LD_INT 1
17232: PPUSH
17233: LD_VAR 0 2
17237: PPUSH
17238: CALL_OW 12
17242: ARRAY
17243: ST_TO_ADDR
// if Crawls ( un ) then
17244: LD_VAR 0 3
17248: PPUSH
17249: CALL_OW 318
17253: IFFALSE 17264
// ComWalk ( un ) ;
17255: LD_VAR 0 3
17259: PPUSH
17260: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17264: LD_VAR 0 3
17268: PPUSH
17269: LD_INT 8
17271: PPUSH
17272: CALL_OW 336
// end ; 4 :
17276: GO 17369
17278: LD_INT 4
17280: DOUBLE
17281: EQUAL
17282: IFTRUE 17286
17284: GO 17347
17286: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17287: LD_ADDR_VAR 0 2
17291: PUSH
17292: LD_INT 22
17294: PUSH
17295: LD_OWVAR 2
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 30
17306: PUSH
17307: LD_INT 29
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PPUSH
17318: CALL_OW 69
17322: ST_TO_ADDR
// if not tmp then
17323: LD_VAR 0 2
17327: NOT
17328: IFFALSE 17332
// exit ;
17330: GO 17369
// DestroyUnit ( tmp [ 1 ] ) ;
17332: LD_VAR 0 2
17336: PUSH
17337: LD_INT 1
17339: ARRAY
17340: PPUSH
17341: CALL_OW 65
// end ; 5 .. 7 :
17345: GO 17369
17347: LD_INT 5
17349: DOUBLE
17350: GREATEREQUAL
17351: IFFALSE 17359
17353: LD_INT 7
17355: DOUBLE
17356: LESSEQUAL
17357: IFTRUE 17361
17359: GO 17368
17361: POP
// StreamSibBomb ; end ;
17362: CALL 13619 0 0
17366: GO 17369
17368: POP
// end ;
17369: PPOPN 3
17371: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17372: LD_EXP 30
17376: PUSH
17377: LD_EXP 80
17381: AND
17382: IFFALSE 17538
17384: GO 17386
17386: DISABLE
17387: LD_INT 0
17389: PPUSH
17390: PPUSH
17391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17392: LD_ADDR_VAR 0 2
17396: PUSH
17397: LD_INT 81
17399: PUSH
17400: LD_OWVAR 2
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: LD_INT 21
17414: PUSH
17415: LD_INT 1
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 21
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PPUSH
17441: CALL_OW 69
17445: ST_TO_ADDR
// if not tmp then
17446: LD_VAR 0 2
17450: NOT
17451: IFFALSE 17455
// exit ;
17453: GO 17538
// p := 0 ;
17455: LD_ADDR_VAR 0 3
17459: PUSH
17460: LD_INT 0
17462: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17463: LD_INT 35
17465: PPUSH
17466: CALL_OW 67
// p := p + 1 ;
17470: LD_ADDR_VAR 0 3
17474: PUSH
17475: LD_VAR 0 3
17479: PUSH
17480: LD_INT 1
17482: PLUS
17483: ST_TO_ADDR
// for i in tmp do
17484: LD_ADDR_VAR 0 1
17488: PUSH
17489: LD_VAR 0 2
17493: PUSH
17494: FOR_IN
17495: IFFALSE 17526
// if GetLives ( i ) < 1000 then
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 256
17506: PUSH
17507: LD_INT 1000
17509: LESS
17510: IFFALSE 17524
// SetLives ( i , 1000 ) ;
17512: LD_VAR 0 1
17516: PPUSH
17517: LD_INT 1000
17519: PPUSH
17520: CALL_OW 234
17524: GO 17494
17526: POP
17527: POP
// until p > 20 ;
17528: LD_VAR 0 3
17532: PUSH
17533: LD_INT 20
17535: GREATER
17536: IFFALSE 17463
// end ;
17538: PPOPN 3
17540: END
// every 0 0$1 trigger StreamModeActive and sTime do
17541: LD_EXP 30
17545: PUSH
17546: LD_EXP 81
17550: AND
17551: IFFALSE 17586
17553: GO 17555
17555: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17556: LD_INT 28
17558: PPUSH
17559: LD_OWVAR 2
17563: PPUSH
17564: LD_INT 2
17566: PPUSH
17567: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17571: LD_INT 30
17573: PPUSH
17574: LD_OWVAR 2
17578: PPUSH
17579: LD_INT 2
17581: PPUSH
17582: CALL_OW 322
// end ;
17586: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17587: LD_EXP 30
17591: PUSH
17592: LD_EXP 82
17596: AND
17597: IFFALSE 17718
17599: GO 17601
17601: DISABLE
17602: LD_INT 0
17604: PPUSH
17605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17606: LD_ADDR_VAR 0 2
17610: PUSH
17611: LD_INT 22
17613: PUSH
17614: LD_OWVAR 2
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 21
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 3
17635: PUSH
17636: LD_INT 23
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: PPUSH
17655: CALL_OW 69
17659: ST_TO_ADDR
// if not tmp then
17660: LD_VAR 0 2
17664: NOT
17665: IFFALSE 17669
// exit ;
17667: GO 17718
// for i in tmp do
17669: LD_ADDR_VAR 0 1
17673: PUSH
17674: LD_VAR 0 2
17678: PUSH
17679: FOR_IN
17680: IFFALSE 17716
// begin if Crawls ( i ) then
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 318
17691: IFFALSE 17702
// ComWalk ( i ) ;
17693: LD_VAR 0 1
17697: PPUSH
17698: CALL_OW 138
// SetClass ( i , 2 ) ;
17702: LD_VAR 0 1
17706: PPUSH
17707: LD_INT 2
17709: PPUSH
17710: CALL_OW 336
// end ;
17714: GO 17679
17716: POP
17717: POP
// end ;
17718: PPOPN 2
17720: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17721: LD_EXP 30
17725: PUSH
17726: LD_EXP 83
17730: AND
17731: IFFALSE 18012
17733: GO 17735
17735: DISABLE
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
17740: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17741: LD_OWVAR 2
17745: PPUSH
17746: LD_INT 9
17748: PPUSH
17749: LD_INT 1
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17759: LD_INT 9
17761: PPUSH
17762: LD_OWVAR 2
17766: PPUSH
17767: CALL_OW 343
// uc_side := 9 ;
17771: LD_ADDR_OWVAR 20
17775: PUSH
17776: LD_INT 9
17778: ST_TO_ADDR
// uc_nation := 2 ;
17779: LD_ADDR_OWVAR 21
17783: PUSH
17784: LD_INT 2
17786: ST_TO_ADDR
// hc_name := Dark Warrior ;
17787: LD_ADDR_OWVAR 26
17791: PUSH
17792: LD_STRING Dark Warrior
17794: ST_TO_ADDR
// hc_gallery :=  ;
17795: LD_ADDR_OWVAR 33
17799: PUSH
17800: LD_STRING 
17802: ST_TO_ADDR
// hc_noskilllimit := true ;
17803: LD_ADDR_OWVAR 76
17807: PUSH
17808: LD_INT 1
17810: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17811: LD_ADDR_OWVAR 31
17815: PUSH
17816: LD_INT 30
17818: PUSH
17819: LD_INT 30
17821: PUSH
17822: LD_INT 30
17824: PUSH
17825: LD_INT 30
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: ST_TO_ADDR
// un := CreateHuman ;
17834: LD_ADDR_VAR 0 3
17838: PUSH
17839: CALL_OW 44
17843: ST_TO_ADDR
// hc_noskilllimit := false ;
17844: LD_ADDR_OWVAR 76
17848: PUSH
17849: LD_INT 0
17851: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17852: LD_VAR 0 3
17856: PPUSH
17857: LD_INT 1
17859: PPUSH
17860: CALL_OW 51
// p := 0 ;
17864: LD_ADDR_VAR 0 2
17868: PUSH
17869: LD_INT 0
17871: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17872: LD_INT 35
17874: PPUSH
17875: CALL_OW 67
// p := p + 1 ;
17879: LD_ADDR_VAR 0 2
17883: PUSH
17884: LD_VAR 0 2
17888: PUSH
17889: LD_INT 1
17891: PLUS
17892: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17893: LD_VAR 0 3
17897: PPUSH
17898: CALL_OW 256
17902: PUSH
17903: LD_INT 1000
17905: LESS
17906: IFFALSE 17920
// SetLives ( un , 1000 ) ;
17908: LD_VAR 0 3
17912: PPUSH
17913: LD_INT 1000
17915: PPUSH
17916: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17920: LD_VAR 0 3
17924: PPUSH
17925: LD_INT 81
17927: PUSH
17928: LD_OWVAR 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 91
17939: PUSH
17940: LD_VAR 0 3
17944: PUSH
17945: LD_INT 30
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PPUSH
17957: CALL_OW 69
17961: PPUSH
17962: LD_VAR 0 3
17966: PPUSH
17967: CALL_OW 74
17971: PPUSH
17972: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17976: LD_VAR 0 2
17980: PUSH
17981: LD_INT 60
17983: GREATER
17984: PUSH
17985: LD_VAR 0 3
17989: PPUSH
17990: CALL_OW 301
17994: OR
17995: IFFALSE 17872
// if un then
17997: LD_VAR 0 3
18001: IFFALSE 18012
// RemoveUnit ( un ) ;
18003: LD_VAR 0 3
18007: PPUSH
18008: CALL_OW 64
// end ;
18012: PPOPN 3
18014: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18015: LD_INT 0
18017: PPUSH
// case cmd of 301 :
18018: LD_VAR 0 1
18022: PUSH
18023: LD_INT 301
18025: DOUBLE
18026: EQUAL
18027: IFTRUE 18031
18029: GO 18063
18031: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18032: LD_VAR 0 6
18036: PPUSH
18037: LD_VAR 0 7
18041: PPUSH
18042: LD_VAR 0 8
18046: PPUSH
18047: LD_VAR 0 4
18051: PPUSH
18052: LD_VAR 0 5
18056: PPUSH
18057: CALL 19264 0 5
18061: GO 18184
18063: LD_INT 302
18065: DOUBLE
18066: EQUAL
18067: IFTRUE 18071
18069: GO 18108
18071: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18072: LD_VAR 0 6
18076: PPUSH
18077: LD_VAR 0 7
18081: PPUSH
18082: LD_VAR 0 8
18086: PPUSH
18087: LD_VAR 0 9
18091: PPUSH
18092: LD_VAR 0 4
18096: PPUSH
18097: LD_VAR 0 5
18101: PPUSH
18102: CALL 19355 0 6
18106: GO 18184
18108: LD_INT 303
18110: DOUBLE
18111: EQUAL
18112: IFTRUE 18116
18114: GO 18153
18116: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18117: LD_VAR 0 6
18121: PPUSH
18122: LD_VAR 0 7
18126: PPUSH
18127: LD_VAR 0 8
18131: PPUSH
18132: LD_VAR 0 9
18136: PPUSH
18137: LD_VAR 0 4
18141: PPUSH
18142: LD_VAR 0 5
18146: PPUSH
18147: CALL 18189 0 6
18151: GO 18184
18153: LD_INT 304
18155: DOUBLE
18156: EQUAL
18157: IFTRUE 18161
18159: GO 18183
18161: POP
// hHackTeleport ( unit , x , y ) ; end ;
18162: LD_VAR 0 2
18166: PPUSH
18167: LD_VAR 0 4
18171: PPUSH
18172: LD_VAR 0 5
18176: PPUSH
18177: CALL 19948 0 3
18181: GO 18184
18183: POP
// end ;
18184: LD_VAR 0 12
18188: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18189: LD_INT 0
18191: PPUSH
18192: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18193: LD_VAR 0 1
18197: PUSH
18198: LD_INT 1
18200: LESS
18201: PUSH
18202: LD_VAR 0 1
18206: PUSH
18207: LD_INT 3
18209: GREATER
18210: OR
18211: PUSH
18212: LD_VAR 0 5
18216: PPUSH
18217: LD_VAR 0 6
18221: PPUSH
18222: CALL_OW 428
18226: OR
18227: IFFALSE 18231
// exit ;
18229: GO 18951
// uc_side := your_side ;
18231: LD_ADDR_OWVAR 20
18235: PUSH
18236: LD_OWVAR 2
18240: ST_TO_ADDR
// uc_nation := nation ;
18241: LD_ADDR_OWVAR 21
18245: PUSH
18246: LD_VAR 0 1
18250: ST_TO_ADDR
// bc_level = 1 ;
18251: LD_ADDR_OWVAR 43
18255: PUSH
18256: LD_INT 1
18258: ST_TO_ADDR
// case btype of 1 :
18259: LD_VAR 0 2
18263: PUSH
18264: LD_INT 1
18266: DOUBLE
18267: EQUAL
18268: IFTRUE 18272
18270: GO 18283
18272: POP
// bc_type := b_depot ; 2 :
18273: LD_ADDR_OWVAR 42
18277: PUSH
18278: LD_INT 0
18280: ST_TO_ADDR
18281: GO 18895
18283: LD_INT 2
18285: DOUBLE
18286: EQUAL
18287: IFTRUE 18291
18289: GO 18302
18291: POP
// bc_type := b_warehouse ; 3 :
18292: LD_ADDR_OWVAR 42
18296: PUSH
18297: LD_INT 1
18299: ST_TO_ADDR
18300: GO 18895
18302: LD_INT 3
18304: DOUBLE
18305: EQUAL
18306: IFTRUE 18310
18308: GO 18321
18310: POP
// bc_type := b_lab ; 4 .. 9 :
18311: LD_ADDR_OWVAR 42
18315: PUSH
18316: LD_INT 6
18318: ST_TO_ADDR
18319: GO 18895
18321: LD_INT 4
18323: DOUBLE
18324: GREATEREQUAL
18325: IFFALSE 18333
18327: LD_INT 9
18329: DOUBLE
18330: LESSEQUAL
18331: IFTRUE 18335
18333: GO 18387
18335: POP
// begin bc_type := b_lab_half ;
18336: LD_ADDR_OWVAR 42
18340: PUSH
18341: LD_INT 7
18343: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18344: LD_ADDR_OWVAR 44
18348: PUSH
18349: LD_INT 10
18351: PUSH
18352: LD_INT 11
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: LD_INT 15
18360: PUSH
18361: LD_INT 14
18363: PUSH
18364: LD_INT 13
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: PUSH
18375: LD_VAR 0 2
18379: PUSH
18380: LD_INT 3
18382: MINUS
18383: ARRAY
18384: ST_TO_ADDR
// end ; 10 .. 13 :
18385: GO 18895
18387: LD_INT 10
18389: DOUBLE
18390: GREATEREQUAL
18391: IFFALSE 18399
18393: LD_INT 13
18395: DOUBLE
18396: LESSEQUAL
18397: IFTRUE 18401
18399: GO 18478
18401: POP
// begin bc_type := b_lab_full ;
18402: LD_ADDR_OWVAR 42
18406: PUSH
18407: LD_INT 8
18409: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18410: LD_ADDR_OWVAR 44
18414: PUSH
18415: LD_INT 10
18417: PUSH
18418: LD_INT 12
18420: PUSH
18421: LD_INT 14
18423: PUSH
18424: LD_INT 13
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: PUSH
18433: LD_VAR 0 2
18437: PUSH
18438: LD_INT 9
18440: MINUS
18441: ARRAY
18442: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18443: LD_ADDR_OWVAR 45
18447: PUSH
18448: LD_INT 11
18450: PUSH
18451: LD_INT 15
18453: PUSH
18454: LD_INT 12
18456: PUSH
18457: LD_INT 15
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: PUSH
18466: LD_VAR 0 2
18470: PUSH
18471: LD_INT 9
18473: MINUS
18474: ARRAY
18475: ST_TO_ADDR
// end ; 14 :
18476: GO 18895
18478: LD_INT 14
18480: DOUBLE
18481: EQUAL
18482: IFTRUE 18486
18484: GO 18497
18486: POP
// bc_type := b_workshop ; 15 :
18487: LD_ADDR_OWVAR 42
18491: PUSH
18492: LD_INT 2
18494: ST_TO_ADDR
18495: GO 18895
18497: LD_INT 15
18499: DOUBLE
18500: EQUAL
18501: IFTRUE 18505
18503: GO 18516
18505: POP
// bc_type := b_factory ; 16 :
18506: LD_ADDR_OWVAR 42
18510: PUSH
18511: LD_INT 3
18513: ST_TO_ADDR
18514: GO 18895
18516: LD_INT 16
18518: DOUBLE
18519: EQUAL
18520: IFTRUE 18524
18522: GO 18535
18524: POP
// bc_type := b_ext_gun ; 17 :
18525: LD_ADDR_OWVAR 42
18529: PUSH
18530: LD_INT 17
18532: ST_TO_ADDR
18533: GO 18895
18535: LD_INT 17
18537: DOUBLE
18538: EQUAL
18539: IFTRUE 18543
18541: GO 18571
18543: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18544: LD_ADDR_OWVAR 42
18548: PUSH
18549: LD_INT 19
18551: PUSH
18552: LD_INT 23
18554: PUSH
18555: LD_INT 19
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: LIST
18562: PUSH
18563: LD_VAR 0 1
18567: ARRAY
18568: ST_TO_ADDR
18569: GO 18895
18571: LD_INT 18
18573: DOUBLE
18574: EQUAL
18575: IFTRUE 18579
18577: GO 18590
18579: POP
// bc_type := b_ext_radar ; 19 :
18580: LD_ADDR_OWVAR 42
18584: PUSH
18585: LD_INT 20
18587: ST_TO_ADDR
18588: GO 18895
18590: LD_INT 19
18592: DOUBLE
18593: EQUAL
18594: IFTRUE 18598
18596: GO 18609
18598: POP
// bc_type := b_ext_radio ; 20 :
18599: LD_ADDR_OWVAR 42
18603: PUSH
18604: LD_INT 22
18606: ST_TO_ADDR
18607: GO 18895
18609: LD_INT 20
18611: DOUBLE
18612: EQUAL
18613: IFTRUE 18617
18615: GO 18628
18617: POP
// bc_type := b_ext_siberium ; 21 :
18618: LD_ADDR_OWVAR 42
18622: PUSH
18623: LD_INT 21
18625: ST_TO_ADDR
18626: GO 18895
18628: LD_INT 21
18630: DOUBLE
18631: EQUAL
18632: IFTRUE 18636
18634: GO 18647
18636: POP
// bc_type := b_ext_computer ; 22 :
18637: LD_ADDR_OWVAR 42
18641: PUSH
18642: LD_INT 24
18644: ST_TO_ADDR
18645: GO 18895
18647: LD_INT 22
18649: DOUBLE
18650: EQUAL
18651: IFTRUE 18655
18653: GO 18666
18655: POP
// bc_type := b_ext_track ; 23 :
18656: LD_ADDR_OWVAR 42
18660: PUSH
18661: LD_INT 16
18663: ST_TO_ADDR
18664: GO 18895
18666: LD_INT 23
18668: DOUBLE
18669: EQUAL
18670: IFTRUE 18674
18672: GO 18685
18674: POP
// bc_type := b_ext_laser ; 24 :
18675: LD_ADDR_OWVAR 42
18679: PUSH
18680: LD_INT 25
18682: ST_TO_ADDR
18683: GO 18895
18685: LD_INT 24
18687: DOUBLE
18688: EQUAL
18689: IFTRUE 18693
18691: GO 18704
18693: POP
// bc_type := b_control_tower ; 25 :
18694: LD_ADDR_OWVAR 42
18698: PUSH
18699: LD_INT 36
18701: ST_TO_ADDR
18702: GO 18895
18704: LD_INT 25
18706: DOUBLE
18707: EQUAL
18708: IFTRUE 18712
18710: GO 18723
18712: POP
// bc_type := b_breastwork ; 26 :
18713: LD_ADDR_OWVAR 42
18717: PUSH
18718: LD_INT 31
18720: ST_TO_ADDR
18721: GO 18895
18723: LD_INT 26
18725: DOUBLE
18726: EQUAL
18727: IFTRUE 18731
18729: GO 18742
18731: POP
// bc_type := b_bunker ; 27 :
18732: LD_ADDR_OWVAR 42
18736: PUSH
18737: LD_INT 32
18739: ST_TO_ADDR
18740: GO 18895
18742: LD_INT 27
18744: DOUBLE
18745: EQUAL
18746: IFTRUE 18750
18748: GO 18761
18750: POP
// bc_type := b_turret ; 28 :
18751: LD_ADDR_OWVAR 42
18755: PUSH
18756: LD_INT 33
18758: ST_TO_ADDR
18759: GO 18895
18761: LD_INT 28
18763: DOUBLE
18764: EQUAL
18765: IFTRUE 18769
18767: GO 18780
18769: POP
// bc_type := b_armoury ; 29 :
18770: LD_ADDR_OWVAR 42
18774: PUSH
18775: LD_INT 4
18777: ST_TO_ADDR
18778: GO 18895
18780: LD_INT 29
18782: DOUBLE
18783: EQUAL
18784: IFTRUE 18788
18786: GO 18799
18788: POP
// bc_type := b_barracks ; 30 :
18789: LD_ADDR_OWVAR 42
18793: PUSH
18794: LD_INT 5
18796: ST_TO_ADDR
18797: GO 18895
18799: LD_INT 30
18801: DOUBLE
18802: EQUAL
18803: IFTRUE 18807
18805: GO 18818
18807: POP
// bc_type := b_solar_power ; 31 :
18808: LD_ADDR_OWVAR 42
18812: PUSH
18813: LD_INT 27
18815: ST_TO_ADDR
18816: GO 18895
18818: LD_INT 31
18820: DOUBLE
18821: EQUAL
18822: IFTRUE 18826
18824: GO 18837
18826: POP
// bc_type := b_oil_power ; 32 :
18827: LD_ADDR_OWVAR 42
18831: PUSH
18832: LD_INT 26
18834: ST_TO_ADDR
18835: GO 18895
18837: LD_INT 32
18839: DOUBLE
18840: EQUAL
18841: IFTRUE 18845
18843: GO 18856
18845: POP
// bc_type := b_siberite_power ; 33 :
18846: LD_ADDR_OWVAR 42
18850: PUSH
18851: LD_INT 28
18853: ST_TO_ADDR
18854: GO 18895
18856: LD_INT 33
18858: DOUBLE
18859: EQUAL
18860: IFTRUE 18864
18862: GO 18875
18864: POP
// bc_type := b_oil_mine ; 34 :
18865: LD_ADDR_OWVAR 42
18869: PUSH
18870: LD_INT 29
18872: ST_TO_ADDR
18873: GO 18895
18875: LD_INT 34
18877: DOUBLE
18878: EQUAL
18879: IFTRUE 18883
18881: GO 18894
18883: POP
// bc_type := b_siberite_mine ; end ;
18884: LD_ADDR_OWVAR 42
18888: PUSH
18889: LD_INT 30
18891: ST_TO_ADDR
18892: GO 18895
18894: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18895: LD_ADDR_VAR 0 8
18899: PUSH
18900: LD_VAR 0 5
18904: PPUSH
18905: LD_VAR 0 6
18909: PPUSH
18910: LD_VAR 0 3
18914: PPUSH
18915: CALL_OW 47
18919: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18920: LD_OWVAR 42
18924: PUSH
18925: LD_INT 32
18927: PUSH
18928: LD_INT 33
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: IN
18935: IFFALSE 18951
// PlaceWeaponTurret ( b , weapon ) ;
18937: LD_VAR 0 8
18941: PPUSH
18942: LD_VAR 0 4
18946: PPUSH
18947: CALL_OW 431
// end ;
18951: LD_VAR 0 7
18955: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18956: LD_INT 0
18958: PPUSH
18959: PPUSH
18960: PPUSH
18961: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18962: LD_ADDR_VAR 0 4
18966: PUSH
18967: LD_INT 22
18969: PUSH
18970: LD_OWVAR 2
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: LD_INT 30
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 30
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: LIST
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PPUSH
19011: CALL_OW 69
19015: ST_TO_ADDR
// if not tmp then
19016: LD_VAR 0 4
19020: NOT
19021: IFFALSE 19025
// exit ;
19023: GO 19084
// for i in tmp do
19025: LD_ADDR_VAR 0 2
19029: PUSH
19030: LD_VAR 0 4
19034: PUSH
19035: FOR_IN
19036: IFFALSE 19082
// for j = 1 to 3 do
19038: LD_ADDR_VAR 0 3
19042: PUSH
19043: DOUBLE
19044: LD_INT 1
19046: DEC
19047: ST_TO_ADDR
19048: LD_INT 3
19050: PUSH
19051: FOR_TO
19052: IFFALSE 19078
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19054: LD_VAR 0 2
19058: PPUSH
19059: CALL_OW 274
19063: PPUSH
19064: LD_VAR 0 3
19068: PPUSH
19069: LD_INT 99999
19071: PPUSH
19072: CALL_OW 277
19076: GO 19051
19078: POP
19079: POP
19080: GO 19035
19082: POP
19083: POP
// end ;
19084: LD_VAR 0 1
19088: RET
// export function hHackSetLevel10 ; var i , j ; begin
19089: LD_INT 0
19091: PPUSH
19092: PPUSH
19093: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19094: LD_ADDR_VAR 0 2
19098: PUSH
19099: LD_INT 21
19101: PUSH
19102: LD_INT 1
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PPUSH
19109: CALL_OW 69
19113: PUSH
19114: FOR_IN
19115: IFFALSE 19167
// if IsSelected ( i ) then
19117: LD_VAR 0 2
19121: PPUSH
19122: CALL_OW 306
19126: IFFALSE 19165
// begin for j := 1 to 4 do
19128: LD_ADDR_VAR 0 3
19132: PUSH
19133: DOUBLE
19134: LD_INT 1
19136: DEC
19137: ST_TO_ADDR
19138: LD_INT 4
19140: PUSH
19141: FOR_TO
19142: IFFALSE 19163
// SetSkill ( i , j , 10 ) ;
19144: LD_VAR 0 2
19148: PPUSH
19149: LD_VAR 0 3
19153: PPUSH
19154: LD_INT 10
19156: PPUSH
19157: CALL_OW 237
19161: GO 19141
19163: POP
19164: POP
// end ;
19165: GO 19114
19167: POP
19168: POP
// end ;
19169: LD_VAR 0 1
19173: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19174: LD_INT 0
19176: PPUSH
19177: PPUSH
19178: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19179: LD_ADDR_VAR 0 2
19183: PUSH
19184: LD_INT 22
19186: PUSH
19187: LD_OWVAR 2
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 69
19214: PUSH
19215: FOR_IN
19216: IFFALSE 19257
// begin for j := 1 to 4 do
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: DOUBLE
19224: LD_INT 1
19226: DEC
19227: ST_TO_ADDR
19228: LD_INT 4
19230: PUSH
19231: FOR_TO
19232: IFFALSE 19253
// SetSkill ( i , j , 10 ) ;
19234: LD_VAR 0 2
19238: PPUSH
19239: LD_VAR 0 3
19243: PPUSH
19244: LD_INT 10
19246: PPUSH
19247: CALL_OW 237
19251: GO 19231
19253: POP
19254: POP
// end ;
19255: GO 19215
19257: POP
19258: POP
// end ;
19259: LD_VAR 0 1
19263: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19264: LD_INT 0
19266: PPUSH
// uc_side := your_side ;
19267: LD_ADDR_OWVAR 20
19271: PUSH
19272: LD_OWVAR 2
19276: ST_TO_ADDR
// uc_nation := nation ;
19277: LD_ADDR_OWVAR 21
19281: PUSH
19282: LD_VAR 0 1
19286: ST_TO_ADDR
// InitHc ;
19287: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19291: LD_INT 0
19293: PPUSH
19294: LD_VAR 0 2
19298: PPUSH
19299: LD_VAR 0 3
19303: PPUSH
19304: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19308: LD_VAR 0 4
19312: PPUSH
19313: LD_VAR 0 5
19317: PPUSH
19318: CALL_OW 428
19322: PUSH
19323: LD_INT 0
19325: EQUAL
19326: IFFALSE 19350
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19328: CALL_OW 44
19332: PPUSH
19333: LD_VAR 0 4
19337: PPUSH
19338: LD_VAR 0 5
19342: PPUSH
19343: LD_INT 1
19345: PPUSH
19346: CALL_OW 48
// end ;
19350: LD_VAR 0 6
19354: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19355: LD_INT 0
19357: PPUSH
19358: PPUSH
// uc_side := your_side ;
19359: LD_ADDR_OWVAR 20
19363: PUSH
19364: LD_OWVAR 2
19368: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19369: LD_VAR 0 1
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: LD_INT 2
19379: PUSH
19380: LD_INT 3
19382: PUSH
19383: LD_INT 4
19385: PUSH
19386: LD_INT 5
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: IN
19396: IFFALSE 19408
// uc_nation := nation_american else
19398: LD_ADDR_OWVAR 21
19402: PUSH
19403: LD_INT 1
19405: ST_TO_ADDR
19406: GO 19451
// if chassis in [ 11 , 12 , 13 , 14 ] then
19408: LD_VAR 0 1
19412: PUSH
19413: LD_INT 11
19415: PUSH
19416: LD_INT 12
19418: PUSH
19419: LD_INT 13
19421: PUSH
19422: LD_INT 14
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: IN
19431: IFFALSE 19443
// uc_nation := nation_arabian else
19433: LD_ADDR_OWVAR 21
19437: PUSH
19438: LD_INT 2
19440: ST_TO_ADDR
19441: GO 19451
// uc_nation := nation_russian ;
19443: LD_ADDR_OWVAR 21
19447: PUSH
19448: LD_INT 3
19450: ST_TO_ADDR
// vc_chassis := chassis ;
19451: LD_ADDR_OWVAR 37
19455: PUSH
19456: LD_VAR 0 1
19460: ST_TO_ADDR
// vc_engine := engine ;
19461: LD_ADDR_OWVAR 39
19465: PUSH
19466: LD_VAR 0 2
19470: ST_TO_ADDR
// vc_control := control ;
19471: LD_ADDR_OWVAR 38
19475: PUSH
19476: LD_VAR 0 3
19480: ST_TO_ADDR
// vc_weapon := weapon ;
19481: LD_ADDR_OWVAR 40
19485: PUSH
19486: LD_VAR 0 4
19490: ST_TO_ADDR
// un := CreateVehicle ;
19491: LD_ADDR_VAR 0 8
19495: PUSH
19496: CALL_OW 45
19500: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19501: LD_VAR 0 8
19505: PPUSH
19506: LD_INT 0
19508: PPUSH
19509: LD_INT 5
19511: PPUSH
19512: CALL_OW 12
19516: PPUSH
19517: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19521: LD_VAR 0 8
19525: PPUSH
19526: LD_VAR 0 5
19530: PPUSH
19531: LD_VAR 0 6
19535: PPUSH
19536: LD_INT 1
19538: PPUSH
19539: CALL_OW 48
// end ;
19543: LD_VAR 0 7
19547: RET
// export hInvincible ; every 1 do
19548: GO 19550
19550: DISABLE
// hInvincible := [ ] ;
19551: LD_ADDR_EXP 84
19555: PUSH
19556: EMPTY
19557: ST_TO_ADDR
19558: END
// every 10 do var i ;
19559: GO 19561
19561: DISABLE
19562: LD_INT 0
19564: PPUSH
// begin enable ;
19565: ENABLE
// if not hInvincible then
19566: LD_EXP 84
19570: NOT
19571: IFFALSE 19575
// exit ;
19573: GO 19619
// for i in hInvincible do
19575: LD_ADDR_VAR 0 1
19579: PUSH
19580: LD_EXP 84
19584: PUSH
19585: FOR_IN
19586: IFFALSE 19617
// if GetLives ( i ) < 1000 then
19588: LD_VAR 0 1
19592: PPUSH
19593: CALL_OW 256
19597: PUSH
19598: LD_INT 1000
19600: LESS
19601: IFFALSE 19615
// SetLives ( i , 1000 ) ;
19603: LD_VAR 0 1
19607: PPUSH
19608: LD_INT 1000
19610: PPUSH
19611: CALL_OW 234
19615: GO 19585
19617: POP
19618: POP
// end ;
19619: PPOPN 1
19621: END
// export function hHackInvincible ; var i ; begin
19622: LD_INT 0
19624: PPUSH
19625: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19626: LD_ADDR_VAR 0 2
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 21
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 69
19663: PUSH
19664: FOR_IN
19665: IFFALSE 19726
// if IsSelected ( i ) then
19667: LD_VAR 0 2
19671: PPUSH
19672: CALL_OW 306
19676: IFFALSE 19724
// begin if i in hInvincible then
19678: LD_VAR 0 2
19682: PUSH
19683: LD_EXP 84
19687: IN
19688: IFFALSE 19708
// hInvincible := hInvincible diff i else
19690: LD_ADDR_EXP 84
19694: PUSH
19695: LD_EXP 84
19699: PUSH
19700: LD_VAR 0 2
19704: DIFF
19705: ST_TO_ADDR
19706: GO 19724
// hInvincible := hInvincible union i ;
19708: LD_ADDR_EXP 84
19712: PUSH
19713: LD_EXP 84
19717: PUSH
19718: LD_VAR 0 2
19722: UNION
19723: ST_TO_ADDR
// end ;
19724: GO 19664
19726: POP
19727: POP
// end ;
19728: LD_VAR 0 1
19732: RET
// export function hHackInvisible ; var i , j ; begin
19733: LD_INT 0
19735: PPUSH
19736: PPUSH
19737: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19738: LD_ADDR_VAR 0 2
19742: PUSH
19743: LD_INT 21
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PPUSH
19753: CALL_OW 69
19757: PUSH
19758: FOR_IN
19759: IFFALSE 19783
// if IsSelected ( i ) then
19761: LD_VAR 0 2
19765: PPUSH
19766: CALL_OW 306
19770: IFFALSE 19781
// ComForceInvisible ( i ) ;
19772: LD_VAR 0 2
19776: PPUSH
19777: CALL_OW 496
19781: GO 19758
19783: POP
19784: POP
// end ;
19785: LD_VAR 0 1
19789: RET
// export function hHackChangeYourSide ; begin
19790: LD_INT 0
19792: PPUSH
// if your_side = 8 then
19793: LD_OWVAR 2
19797: PUSH
19798: LD_INT 8
19800: EQUAL
19801: IFFALSE 19813
// your_side := 0 else
19803: LD_ADDR_OWVAR 2
19807: PUSH
19808: LD_INT 0
19810: ST_TO_ADDR
19811: GO 19827
// your_side := your_side + 1 ;
19813: LD_ADDR_OWVAR 2
19817: PUSH
19818: LD_OWVAR 2
19822: PUSH
19823: LD_INT 1
19825: PLUS
19826: ST_TO_ADDR
// end ;
19827: LD_VAR 0 1
19831: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19832: LD_INT 0
19834: PPUSH
19835: PPUSH
19836: PPUSH
// for i in all_units do
19837: LD_ADDR_VAR 0 2
19841: PUSH
19842: LD_OWVAR 3
19846: PUSH
19847: FOR_IN
19848: IFFALSE 19926
// if IsSelected ( i ) then
19850: LD_VAR 0 2
19854: PPUSH
19855: CALL_OW 306
19859: IFFALSE 19924
// begin j := GetSide ( i ) ;
19861: LD_ADDR_VAR 0 3
19865: PUSH
19866: LD_VAR 0 2
19870: PPUSH
19871: CALL_OW 255
19875: ST_TO_ADDR
// if j = 8 then
19876: LD_VAR 0 3
19880: PUSH
19881: LD_INT 8
19883: EQUAL
19884: IFFALSE 19896
// j := 0 else
19886: LD_ADDR_VAR 0 3
19890: PUSH
19891: LD_INT 0
19893: ST_TO_ADDR
19894: GO 19910
// j := j + 1 ;
19896: LD_ADDR_VAR 0 3
19900: PUSH
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 1
19908: PLUS
19909: ST_TO_ADDR
// SetSide ( i , j ) ;
19910: LD_VAR 0 2
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL_OW 235
// end ;
19924: GO 19847
19926: POP
19927: POP
// end ;
19928: LD_VAR 0 1
19932: RET
// export function hHackFog ; begin
19933: LD_INT 0
19935: PPUSH
// FogOff ( true ) ;
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 344
// end ;
19943: LD_VAR 0 1
19947: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19948: LD_INT 0
19950: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19951: LD_VAR 0 1
19955: PPUSH
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_VAR 0 3
19965: PPUSH
19966: LD_INT 1
19968: PPUSH
19969: LD_INT 1
19971: PPUSH
19972: CALL_OW 483
// CenterOnXY ( x , y ) ;
19976: LD_VAR 0 2
19980: PPUSH
19981: LD_VAR 0 3
19985: PPUSH
19986: CALL_OW 84
// end ; end_of_file
19990: LD_VAR 0 4
19994: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19995: LD_INT 0
19997: PPUSH
19998: PPUSH
19999: PPUSH
20000: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20001: LD_VAR 0 1
20005: PPUSH
20006: CALL_OW 264
20010: PUSH
20011: LD_EXP 18
20015: EQUAL
20016: IFFALSE 20088
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20018: LD_INT 68
20020: PPUSH
20021: LD_VAR 0 1
20025: PPUSH
20026: CALL_OW 255
20030: PPUSH
20031: CALL_OW 321
20035: PUSH
20036: LD_INT 2
20038: EQUAL
20039: IFFALSE 20051
// eff := 70 else
20041: LD_ADDR_VAR 0 4
20045: PUSH
20046: LD_INT 70
20048: ST_TO_ADDR
20049: GO 20059
// eff := 30 ;
20051: LD_ADDR_VAR 0 4
20055: PUSH
20056: LD_INT 30
20058: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20059: LD_VAR 0 1
20063: PPUSH
20064: CALL_OW 250
20068: PPUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 251
20078: PPUSH
20079: LD_VAR 0 4
20083: PPUSH
20084: CALL_OW 495
// end ; end ;
20088: LD_VAR 0 2
20092: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20093: LD_INT 0
20095: PPUSH
// end ;
20096: LD_VAR 0 4
20100: RET
// export function SOS_Command ( cmd ) ; begin
20101: LD_INT 0
20103: PPUSH
// end ;
20104: LD_VAR 0 2
20108: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20109: LD_INT 0
20111: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20112: LD_VAR 0 1
20116: PUSH
20117: LD_INT 250
20119: EQUAL
20120: PUSH
20121: LD_VAR 0 2
20125: PPUSH
20126: CALL_OW 264
20130: PUSH
20131: LD_EXP 21
20135: EQUAL
20136: AND
20137: IFFALSE 20158
// MinerPlaceMine ( unit , x , y ) ;
20139: LD_VAR 0 2
20143: PPUSH
20144: LD_VAR 0 4
20148: PPUSH
20149: LD_VAR 0 5
20153: PPUSH
20154: CALL 22499 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20158: LD_VAR 0 1
20162: PUSH
20163: LD_INT 251
20165: EQUAL
20166: PUSH
20167: LD_VAR 0 2
20171: PPUSH
20172: CALL_OW 264
20176: PUSH
20177: LD_EXP 21
20181: EQUAL
20182: AND
20183: IFFALSE 20204
// MinerDetonateMine ( unit , x , y ) ;
20185: LD_VAR 0 2
20189: PPUSH
20190: LD_VAR 0 4
20194: PPUSH
20195: LD_VAR 0 5
20199: PPUSH
20200: CALL 22776 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20204: LD_VAR 0 1
20208: PUSH
20209: LD_INT 252
20211: EQUAL
20212: PUSH
20213: LD_VAR 0 2
20217: PPUSH
20218: CALL_OW 264
20222: PUSH
20223: LD_EXP 21
20227: EQUAL
20228: AND
20229: IFFALSE 20250
// MinerCreateMinefield ( unit , x , y ) ;
20231: LD_VAR 0 2
20235: PPUSH
20236: LD_VAR 0 4
20240: PPUSH
20241: LD_VAR 0 5
20245: PPUSH
20246: CALL 23193 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20250: LD_VAR 0 1
20254: PUSH
20255: LD_INT 253
20257: EQUAL
20258: PUSH
20259: LD_VAR 0 2
20263: PPUSH
20264: CALL_OW 257
20268: PUSH
20269: LD_INT 5
20271: EQUAL
20272: AND
20273: IFFALSE 20294
// ComBinocular ( unit , x , y ) ;
20275: LD_VAR 0 2
20279: PPUSH
20280: LD_VAR 0 4
20284: PPUSH
20285: LD_VAR 0 5
20289: PPUSH
20290: CALL 23564 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20294: LD_VAR 0 1
20298: PUSH
20299: LD_INT 254
20301: EQUAL
20302: PUSH
20303: LD_VAR 0 2
20307: PPUSH
20308: CALL_OW 264
20312: PUSH
20313: LD_EXP 16
20317: EQUAL
20318: AND
20319: PUSH
20320: LD_VAR 0 3
20324: PPUSH
20325: CALL_OW 263
20329: PUSH
20330: LD_INT 3
20332: EQUAL
20333: AND
20334: IFFALSE 20350
// HackDestroyVehicle ( unit , selectedUnit ) ;
20336: LD_VAR 0 2
20340: PPUSH
20341: LD_VAR 0 3
20345: PPUSH
20346: CALL 21859 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20350: LD_VAR 0 1
20354: PUSH
20355: LD_INT 255
20357: EQUAL
20358: PUSH
20359: LD_VAR 0 2
20363: PPUSH
20364: CALL_OW 264
20368: PUSH
20369: LD_INT 14
20371: PUSH
20372: LD_INT 53
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: IN
20379: AND
20380: PUSH
20381: LD_VAR 0 4
20385: PPUSH
20386: LD_VAR 0 5
20390: PPUSH
20391: CALL_OW 488
20395: AND
20396: IFFALSE 20420
// CutTreeXYR ( unit , x , y , 12 ) ;
20398: LD_VAR 0 2
20402: PPUSH
20403: LD_VAR 0 4
20407: PPUSH
20408: LD_VAR 0 5
20412: PPUSH
20413: LD_INT 12
20415: PPUSH
20416: CALL 20425 0 4
// end ;
20420: LD_VAR 0 6
20424: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20425: LD_INT 0
20427: PPUSH
20428: PPUSH
20429: PPUSH
20430: PPUSH
20431: PPUSH
20432: PPUSH
20433: PPUSH
20434: PPUSH
20435: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20436: LD_VAR 0 1
20440: NOT
20441: PUSH
20442: LD_VAR 0 2
20446: PPUSH
20447: LD_VAR 0 3
20451: PPUSH
20452: CALL_OW 488
20456: NOT
20457: OR
20458: PUSH
20459: LD_VAR 0 4
20463: NOT
20464: OR
20465: IFFALSE 20469
// exit ;
20467: GO 20809
// list := [ ] ;
20469: LD_ADDR_VAR 0 13
20473: PUSH
20474: EMPTY
20475: ST_TO_ADDR
// if x - r < 0 then
20476: LD_VAR 0 2
20480: PUSH
20481: LD_VAR 0 4
20485: MINUS
20486: PUSH
20487: LD_INT 0
20489: LESS
20490: IFFALSE 20502
// min_x := 0 else
20492: LD_ADDR_VAR 0 7
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
20500: GO 20518
// min_x := x - r ;
20502: LD_ADDR_VAR 0 7
20506: PUSH
20507: LD_VAR 0 2
20511: PUSH
20512: LD_VAR 0 4
20516: MINUS
20517: ST_TO_ADDR
// if y - r < 0 then
20518: LD_VAR 0 3
20522: PUSH
20523: LD_VAR 0 4
20527: MINUS
20528: PUSH
20529: LD_INT 0
20531: LESS
20532: IFFALSE 20544
// min_y := 0 else
20534: LD_ADDR_VAR 0 8
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
20542: GO 20560
// min_y := y - r ;
20544: LD_ADDR_VAR 0 8
20548: PUSH
20549: LD_VAR 0 3
20553: PUSH
20554: LD_VAR 0 4
20558: MINUS
20559: ST_TO_ADDR
// max_x := x + r ;
20560: LD_ADDR_VAR 0 9
20564: PUSH
20565: LD_VAR 0 2
20569: PUSH
20570: LD_VAR 0 4
20574: PLUS
20575: ST_TO_ADDR
// max_y := y + r ;
20576: LD_ADDR_VAR 0 10
20580: PUSH
20581: LD_VAR 0 3
20585: PUSH
20586: LD_VAR 0 4
20590: PLUS
20591: ST_TO_ADDR
// for _x = min_x to max_x do
20592: LD_ADDR_VAR 0 11
20596: PUSH
20597: DOUBLE
20598: LD_VAR 0 7
20602: DEC
20603: ST_TO_ADDR
20604: LD_VAR 0 9
20608: PUSH
20609: FOR_TO
20610: IFFALSE 20727
// for _y = min_y to max_y do
20612: LD_ADDR_VAR 0 12
20616: PUSH
20617: DOUBLE
20618: LD_VAR 0 8
20622: DEC
20623: ST_TO_ADDR
20624: LD_VAR 0 10
20628: PUSH
20629: FOR_TO
20630: IFFALSE 20723
// begin if not ValidHex ( _x , _y ) then
20632: LD_VAR 0 11
20636: PPUSH
20637: LD_VAR 0 12
20641: PPUSH
20642: CALL_OW 488
20646: NOT
20647: IFFALSE 20651
// continue ;
20649: GO 20629
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20651: LD_VAR 0 11
20655: PPUSH
20656: LD_VAR 0 12
20660: PPUSH
20661: CALL_OW 351
20665: PUSH
20666: LD_VAR 0 11
20670: PPUSH
20671: LD_VAR 0 12
20675: PPUSH
20676: CALL_OW 554
20680: AND
20681: IFFALSE 20721
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20683: LD_ADDR_VAR 0 13
20687: PUSH
20688: LD_VAR 0 13
20692: PPUSH
20693: LD_VAR 0 13
20697: PUSH
20698: LD_INT 1
20700: PLUS
20701: PPUSH
20702: LD_VAR 0 11
20706: PUSH
20707: LD_VAR 0 12
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PPUSH
20716: CALL_OW 2
20720: ST_TO_ADDR
// end ;
20721: GO 20629
20723: POP
20724: POP
20725: GO 20609
20727: POP
20728: POP
// if not list then
20729: LD_VAR 0 13
20733: NOT
20734: IFFALSE 20738
// exit ;
20736: GO 20809
// for i in list do
20738: LD_ADDR_VAR 0 6
20742: PUSH
20743: LD_VAR 0 13
20747: PUSH
20748: FOR_IN
20749: IFFALSE 20807
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20751: LD_VAR 0 1
20755: PPUSH
20756: LD_STRING M
20758: PUSH
20759: LD_VAR 0 6
20763: PUSH
20764: LD_INT 1
20766: ARRAY
20767: PUSH
20768: LD_VAR 0 6
20772: PUSH
20773: LD_INT 2
20775: ARRAY
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: LD_INT 0
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: PUSH
20798: EMPTY
20799: LIST
20800: PPUSH
20801: CALL_OW 447
20805: GO 20748
20807: POP
20808: POP
// end ;
20809: LD_VAR 0 5
20813: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20814: LD_EXP 85
20818: NOT
20819: IFFALSE 20869
20821: GO 20823
20823: DISABLE
// begin initHack := true ;
20824: LD_ADDR_EXP 85
20828: PUSH
20829: LD_INT 1
20831: ST_TO_ADDR
// hackTanks := [ ] ;
20832: LD_ADDR_EXP 86
20836: PUSH
20837: EMPTY
20838: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20839: LD_ADDR_EXP 87
20843: PUSH
20844: EMPTY
20845: ST_TO_ADDR
// hackLimit := 3 ;
20846: LD_ADDR_EXP 88
20850: PUSH
20851: LD_INT 3
20853: ST_TO_ADDR
// hackDist := 12 ;
20854: LD_ADDR_EXP 89
20858: PUSH
20859: LD_INT 12
20861: ST_TO_ADDR
// hackCounter := [ ] ;
20862: LD_ADDR_EXP 90
20866: PUSH
20867: EMPTY
20868: ST_TO_ADDR
// end ;
20869: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20870: LD_EXP 85
20874: PUSH
20875: LD_INT 34
20877: PUSH
20878: LD_EXP 16
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PPUSH
20887: CALL_OW 69
20891: AND
20892: IFFALSE 21147
20894: GO 20896
20896: DISABLE
20897: LD_INT 0
20899: PPUSH
20900: PPUSH
// begin enable ;
20901: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20902: LD_ADDR_VAR 0 1
20906: PUSH
20907: LD_INT 34
20909: PUSH
20910: LD_EXP 16
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PPUSH
20919: CALL_OW 69
20923: PUSH
20924: FOR_IN
20925: IFFALSE 21145
// begin if not i in hackTanks then
20927: LD_VAR 0 1
20931: PUSH
20932: LD_EXP 86
20936: IN
20937: NOT
20938: IFFALSE 21021
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20940: LD_ADDR_EXP 86
20944: PUSH
20945: LD_EXP 86
20949: PPUSH
20950: LD_EXP 86
20954: PUSH
20955: LD_INT 1
20957: PLUS
20958: PPUSH
20959: LD_VAR 0 1
20963: PPUSH
20964: CALL_OW 1
20968: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20969: LD_ADDR_EXP 87
20973: PUSH
20974: LD_EXP 87
20978: PPUSH
20979: LD_EXP 87
20983: PUSH
20984: LD_INT 1
20986: PLUS
20987: PPUSH
20988: EMPTY
20989: PPUSH
20990: CALL_OW 1
20994: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20995: LD_ADDR_EXP 90
20999: PUSH
21000: LD_EXP 90
21004: PPUSH
21005: LD_EXP 90
21009: PUSH
21010: LD_INT 1
21012: PLUS
21013: PPUSH
21014: EMPTY
21015: PPUSH
21016: CALL_OW 1
21020: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21021: LD_VAR 0 1
21025: PPUSH
21026: CALL_OW 302
21030: NOT
21031: IFFALSE 21044
// begin HackUnlinkAll ( i ) ;
21033: LD_VAR 0 1
21037: PPUSH
21038: CALL 21150 0 1
// continue ;
21042: GO 20924
// end ; HackCheckCapturedStatus ( i ) ;
21044: LD_VAR 0 1
21048: PPUSH
21049: CALL 21593 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21053: LD_ADDR_VAR 0 2
21057: PUSH
21058: LD_INT 81
21060: PUSH
21061: LD_VAR 0 1
21065: PPUSH
21066: CALL_OW 255
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 33
21077: PUSH
21078: LD_INT 3
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 91
21087: PUSH
21088: LD_VAR 0 1
21092: PUSH
21093: LD_EXP 89
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 50
21105: PUSH
21106: EMPTY
21107: LIST
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: PPUSH
21115: CALL_OW 69
21119: ST_TO_ADDR
// if not tmp then
21120: LD_VAR 0 2
21124: NOT
21125: IFFALSE 21129
// continue ;
21127: GO 20924
// HackLink ( i , tmp ) ;
21129: LD_VAR 0 1
21133: PPUSH
21134: LD_VAR 0 2
21138: PPUSH
21139: CALL 21286 0 2
// end ;
21143: GO 20924
21145: POP
21146: POP
// end ;
21147: PPOPN 2
21149: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21150: LD_INT 0
21152: PPUSH
21153: PPUSH
21154: PPUSH
// if not hack in hackTanks then
21155: LD_VAR 0 1
21159: PUSH
21160: LD_EXP 86
21164: IN
21165: NOT
21166: IFFALSE 21170
// exit ;
21168: GO 21281
// index := GetElementIndex ( hackTanks , hack ) ;
21170: LD_ADDR_VAR 0 4
21174: PUSH
21175: LD_EXP 86
21179: PPUSH
21180: LD_VAR 0 1
21184: PPUSH
21185: CALL 28715 0 2
21189: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21190: LD_EXP 87
21194: PUSH
21195: LD_VAR 0 4
21199: ARRAY
21200: IFFALSE 21281
// begin for i in hackTanksCaptured [ index ] do
21202: LD_ADDR_VAR 0 3
21206: PUSH
21207: LD_EXP 87
21211: PUSH
21212: LD_VAR 0 4
21216: ARRAY
21217: PUSH
21218: FOR_IN
21219: IFFALSE 21245
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21221: LD_VAR 0 3
21225: PUSH
21226: LD_INT 1
21228: ARRAY
21229: PPUSH
21230: LD_VAR 0 3
21234: PUSH
21235: LD_INT 2
21237: ARRAY
21238: PPUSH
21239: CALL_OW 235
21243: GO 21218
21245: POP
21246: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21247: LD_ADDR_EXP 87
21251: PUSH
21252: LD_EXP 87
21256: PPUSH
21257: LD_VAR 0 4
21261: PPUSH
21262: EMPTY
21263: PPUSH
21264: CALL_OW 1
21268: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21269: LD_VAR 0 1
21273: PPUSH
21274: LD_INT 0
21276: PPUSH
21277: CALL_OW 505
// end ; end ;
21281: LD_VAR 0 2
21285: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21286: LD_INT 0
21288: PPUSH
21289: PPUSH
21290: PPUSH
// if not hack in hackTanks or not vehicles then
21291: LD_VAR 0 1
21295: PUSH
21296: LD_EXP 86
21300: IN
21301: NOT
21302: PUSH
21303: LD_VAR 0 2
21307: NOT
21308: OR
21309: IFFALSE 21313
// exit ;
21311: GO 21588
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21313: LD_ADDR_VAR 0 2
21317: PUSH
21318: LD_VAR 0 1
21322: PPUSH
21323: LD_VAR 0 2
21327: PPUSH
21328: LD_INT 1
21330: PPUSH
21331: LD_INT 1
21333: PPUSH
21334: CALL 29365 0 4
21338: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21339: LD_ADDR_VAR 0 5
21343: PUSH
21344: LD_EXP 86
21348: PPUSH
21349: LD_VAR 0 1
21353: PPUSH
21354: CALL 28715 0 2
21358: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21359: LD_EXP 87
21363: PUSH
21364: LD_VAR 0 5
21368: ARRAY
21369: PUSH
21370: LD_EXP 88
21374: LESS
21375: IFFALSE 21564
// begin for i := 1 to vehicles do
21377: LD_ADDR_VAR 0 4
21381: PUSH
21382: DOUBLE
21383: LD_INT 1
21385: DEC
21386: ST_TO_ADDR
21387: LD_VAR 0 2
21391: PUSH
21392: FOR_TO
21393: IFFALSE 21562
// begin if hackTanksCaptured [ index ] = hackLimit then
21395: LD_EXP 87
21399: PUSH
21400: LD_VAR 0 5
21404: ARRAY
21405: PUSH
21406: LD_EXP 88
21410: EQUAL
21411: IFFALSE 21415
// break ;
21413: GO 21562
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21415: LD_ADDR_EXP 90
21419: PUSH
21420: LD_EXP 90
21424: PPUSH
21425: LD_VAR 0 5
21429: PPUSH
21430: LD_EXP 90
21434: PUSH
21435: LD_VAR 0 5
21439: ARRAY
21440: PUSH
21441: LD_INT 1
21443: PLUS
21444: PPUSH
21445: CALL_OW 1
21449: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21450: LD_ADDR_EXP 87
21454: PUSH
21455: LD_EXP 87
21459: PPUSH
21460: LD_VAR 0 5
21464: PUSH
21465: LD_EXP 87
21469: PUSH
21470: LD_VAR 0 5
21474: ARRAY
21475: PUSH
21476: LD_INT 1
21478: PLUS
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PPUSH
21484: LD_VAR 0 2
21488: PUSH
21489: LD_VAR 0 4
21493: ARRAY
21494: PUSH
21495: LD_VAR 0 2
21499: PUSH
21500: LD_VAR 0 4
21504: ARRAY
21505: PPUSH
21506: CALL_OW 255
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PPUSH
21515: CALL 28930 0 3
21519: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21520: LD_VAR 0 2
21524: PUSH
21525: LD_VAR 0 4
21529: ARRAY
21530: PPUSH
21531: LD_VAR 0 1
21535: PPUSH
21536: CALL_OW 255
21540: PPUSH
21541: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21545: LD_VAR 0 2
21549: PUSH
21550: LD_VAR 0 4
21554: ARRAY
21555: PPUSH
21556: CALL_OW 141
// end ;
21560: GO 21392
21562: POP
21563: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21564: LD_VAR 0 1
21568: PPUSH
21569: LD_EXP 87
21573: PUSH
21574: LD_VAR 0 5
21578: ARRAY
21579: PUSH
21580: LD_INT 0
21582: PLUS
21583: PPUSH
21584: CALL_OW 505
// end ;
21588: LD_VAR 0 3
21592: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21593: LD_INT 0
21595: PPUSH
21596: PPUSH
21597: PPUSH
21598: PPUSH
// if not hack in hackTanks then
21599: LD_VAR 0 1
21603: PUSH
21604: LD_EXP 86
21608: IN
21609: NOT
21610: IFFALSE 21614
// exit ;
21612: GO 21854
// index := GetElementIndex ( hackTanks , hack ) ;
21614: LD_ADDR_VAR 0 4
21618: PUSH
21619: LD_EXP 86
21623: PPUSH
21624: LD_VAR 0 1
21628: PPUSH
21629: CALL 28715 0 2
21633: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: DOUBLE
21640: LD_EXP 87
21644: PUSH
21645: LD_VAR 0 4
21649: ARRAY
21650: INC
21651: ST_TO_ADDR
21652: LD_INT 1
21654: PUSH
21655: FOR_DOWNTO
21656: IFFALSE 21828
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21658: LD_ADDR_VAR 0 5
21662: PUSH
21663: LD_EXP 87
21667: PUSH
21668: LD_VAR 0 4
21672: ARRAY
21673: PUSH
21674: LD_VAR 0 3
21678: ARRAY
21679: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21680: LD_VAR 0 5
21684: PUSH
21685: LD_INT 1
21687: ARRAY
21688: PPUSH
21689: CALL_OW 302
21693: NOT
21694: PUSH
21695: LD_VAR 0 5
21699: PUSH
21700: LD_INT 1
21702: ARRAY
21703: PPUSH
21704: CALL_OW 255
21708: PUSH
21709: LD_VAR 0 1
21713: PPUSH
21714: CALL_OW 255
21718: NONEQUAL
21719: OR
21720: IFFALSE 21826
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21722: LD_VAR 0 5
21726: PUSH
21727: LD_INT 1
21729: ARRAY
21730: PPUSH
21731: CALL_OW 305
21735: PUSH
21736: LD_VAR 0 5
21740: PUSH
21741: LD_INT 1
21743: ARRAY
21744: PPUSH
21745: CALL_OW 255
21749: PUSH
21750: LD_VAR 0 1
21754: PPUSH
21755: CALL_OW 255
21759: EQUAL
21760: AND
21761: IFFALSE 21785
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21763: LD_VAR 0 5
21767: PUSH
21768: LD_INT 1
21770: ARRAY
21771: PPUSH
21772: LD_VAR 0 5
21776: PUSH
21777: LD_INT 2
21779: ARRAY
21780: PPUSH
21781: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21785: LD_ADDR_EXP 87
21789: PUSH
21790: LD_EXP 87
21794: PPUSH
21795: LD_VAR 0 4
21799: PPUSH
21800: LD_EXP 87
21804: PUSH
21805: LD_VAR 0 4
21809: ARRAY
21810: PPUSH
21811: LD_VAR 0 3
21815: PPUSH
21816: CALL_OW 3
21820: PPUSH
21821: CALL_OW 1
21825: ST_TO_ADDR
// end ; end ;
21826: GO 21655
21828: POP
21829: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21830: LD_VAR 0 1
21834: PPUSH
21835: LD_EXP 87
21839: PUSH
21840: LD_VAR 0 4
21844: ARRAY
21845: PUSH
21846: LD_INT 0
21848: PLUS
21849: PPUSH
21850: CALL_OW 505
// end ;
21854: LD_VAR 0 2
21858: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21859: LD_INT 0
21861: PPUSH
21862: PPUSH
21863: PPUSH
21864: PPUSH
// if not hack in hackTanks then
21865: LD_VAR 0 1
21869: PUSH
21870: LD_EXP 86
21874: IN
21875: NOT
21876: IFFALSE 21880
// exit ;
21878: GO 21965
// index := GetElementIndex ( hackTanks , hack ) ;
21880: LD_ADDR_VAR 0 5
21884: PUSH
21885: LD_EXP 86
21889: PPUSH
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL 28715 0 2
21899: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21900: LD_ADDR_VAR 0 4
21904: PUSH
21905: DOUBLE
21906: LD_INT 1
21908: DEC
21909: ST_TO_ADDR
21910: LD_EXP 87
21914: PUSH
21915: LD_VAR 0 5
21919: ARRAY
21920: PUSH
21921: FOR_TO
21922: IFFALSE 21963
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21924: LD_EXP 87
21928: PUSH
21929: LD_VAR 0 5
21933: ARRAY
21934: PUSH
21935: LD_VAR 0 4
21939: ARRAY
21940: PUSH
21941: LD_INT 1
21943: ARRAY
21944: PUSH
21945: LD_VAR 0 2
21949: EQUAL
21950: IFFALSE 21961
// KillUnit ( vehicle ) ;
21952: LD_VAR 0 2
21956: PPUSH
21957: CALL_OW 66
21961: GO 21921
21963: POP
21964: POP
// end ;
21965: LD_VAR 0 3
21969: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21970: LD_EXP 91
21974: NOT
21975: IFFALSE 22010
21977: GO 21979
21979: DISABLE
// begin initMiner := true ;
21980: LD_ADDR_EXP 91
21984: PUSH
21985: LD_INT 1
21987: ST_TO_ADDR
// minersList := [ ] ;
21988: LD_ADDR_EXP 92
21992: PUSH
21993: EMPTY
21994: ST_TO_ADDR
// minerMinesList := [ ] ;
21995: LD_ADDR_EXP 93
21999: PUSH
22000: EMPTY
22001: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22002: LD_ADDR_EXP 94
22006: PUSH
22007: LD_INT 5
22009: ST_TO_ADDR
// end ;
22010: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22011: LD_EXP 91
22015: PUSH
22016: LD_INT 34
22018: PUSH
22019: LD_EXP 21
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PPUSH
22028: CALL_OW 69
22032: AND
22033: IFFALSE 22496
22035: GO 22037
22037: DISABLE
22038: LD_INT 0
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
// begin enable ;
22044: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: LD_INT 34
22052: PUSH
22053: LD_EXP 21
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PPUSH
22062: CALL_OW 69
22066: PUSH
22067: FOR_IN
22068: IFFALSE 22140
// begin if not i in minersList then
22070: LD_VAR 0 1
22074: PUSH
22075: LD_EXP 92
22079: IN
22080: NOT
22081: IFFALSE 22138
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22083: LD_ADDR_EXP 92
22087: PUSH
22088: LD_EXP 92
22092: PPUSH
22093: LD_EXP 92
22097: PUSH
22098: LD_INT 1
22100: PLUS
22101: PPUSH
22102: LD_VAR 0 1
22106: PPUSH
22107: CALL_OW 1
22111: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22112: LD_ADDR_EXP 93
22116: PUSH
22117: LD_EXP 93
22121: PPUSH
22122: LD_EXP 93
22126: PUSH
22127: LD_INT 1
22129: PLUS
22130: PPUSH
22131: EMPTY
22132: PPUSH
22133: CALL_OW 1
22137: ST_TO_ADDR
// end end ;
22138: GO 22067
22140: POP
22141: POP
// for i := minerMinesList downto 1 do
22142: LD_ADDR_VAR 0 1
22146: PUSH
22147: DOUBLE
22148: LD_EXP 93
22152: INC
22153: ST_TO_ADDR
22154: LD_INT 1
22156: PUSH
22157: FOR_DOWNTO
22158: IFFALSE 22494
// begin if IsLive ( minersList [ i ] ) then
22160: LD_EXP 92
22164: PUSH
22165: LD_VAR 0 1
22169: ARRAY
22170: PPUSH
22171: CALL_OW 300
22175: IFFALSE 22203
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22177: LD_EXP 92
22181: PUSH
22182: LD_VAR 0 1
22186: ARRAY
22187: PPUSH
22188: LD_EXP 93
22192: PUSH
22193: LD_VAR 0 1
22197: ARRAY
22198: PPUSH
22199: CALL_OW 505
// if not minerMinesList [ i ] then
22203: LD_EXP 93
22207: PUSH
22208: LD_VAR 0 1
22212: ARRAY
22213: NOT
22214: IFFALSE 22218
// continue ;
22216: GO 22157
// for j := minerMinesList [ i ] downto 1 do
22218: LD_ADDR_VAR 0 2
22222: PUSH
22223: DOUBLE
22224: LD_EXP 93
22228: PUSH
22229: LD_VAR 0 1
22233: ARRAY
22234: INC
22235: ST_TO_ADDR
22236: LD_INT 1
22238: PUSH
22239: FOR_DOWNTO
22240: IFFALSE 22490
// begin side := GetSide ( minersList [ i ] ) ;
22242: LD_ADDR_VAR 0 3
22246: PUSH
22247: LD_EXP 92
22251: PUSH
22252: LD_VAR 0 1
22256: ARRAY
22257: PPUSH
22258: CALL_OW 255
22262: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22263: LD_ADDR_VAR 0 4
22267: PUSH
22268: LD_EXP 93
22272: PUSH
22273: LD_VAR 0 1
22277: ARRAY
22278: PUSH
22279: LD_VAR 0 2
22283: ARRAY
22284: PUSH
22285: LD_INT 1
22287: ARRAY
22288: PPUSH
22289: LD_EXP 93
22293: PUSH
22294: LD_VAR 0 1
22298: ARRAY
22299: PUSH
22300: LD_VAR 0 2
22304: ARRAY
22305: PUSH
22306: LD_INT 2
22308: ARRAY
22309: PPUSH
22310: CALL_OW 428
22314: ST_TO_ADDR
// if not tmp then
22315: LD_VAR 0 4
22319: NOT
22320: IFFALSE 22324
// continue ;
22322: GO 22239
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22324: LD_VAR 0 4
22328: PUSH
22329: LD_INT 81
22331: PUSH
22332: LD_VAR 0 3
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PPUSH
22341: CALL_OW 69
22345: IN
22346: PUSH
22347: LD_EXP 93
22351: PUSH
22352: LD_VAR 0 1
22356: ARRAY
22357: PUSH
22358: LD_VAR 0 2
22362: ARRAY
22363: PUSH
22364: LD_INT 1
22366: ARRAY
22367: PPUSH
22368: LD_EXP 93
22372: PUSH
22373: LD_VAR 0 1
22377: ARRAY
22378: PUSH
22379: LD_VAR 0 2
22383: ARRAY
22384: PUSH
22385: LD_INT 2
22387: ARRAY
22388: PPUSH
22389: CALL_OW 458
22393: AND
22394: IFFALSE 22488
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22396: LD_EXP 93
22400: PUSH
22401: LD_VAR 0 1
22405: ARRAY
22406: PUSH
22407: LD_VAR 0 2
22411: ARRAY
22412: PUSH
22413: LD_INT 1
22415: ARRAY
22416: PPUSH
22417: LD_EXP 93
22421: PUSH
22422: LD_VAR 0 1
22426: ARRAY
22427: PUSH
22428: LD_VAR 0 2
22432: ARRAY
22433: PUSH
22434: LD_INT 2
22436: ARRAY
22437: PPUSH
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22447: LD_ADDR_EXP 93
22451: PUSH
22452: LD_EXP 93
22456: PPUSH
22457: LD_VAR 0 1
22461: PPUSH
22462: LD_EXP 93
22466: PUSH
22467: LD_VAR 0 1
22471: ARRAY
22472: PPUSH
22473: LD_VAR 0 2
22477: PPUSH
22478: CALL_OW 3
22482: PPUSH
22483: CALL_OW 1
22487: ST_TO_ADDR
// end ; end ;
22488: GO 22239
22490: POP
22491: POP
// end ;
22492: GO 22157
22494: POP
22495: POP
// end ;
22496: PPOPN 4
22498: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22499: LD_INT 0
22501: PPUSH
22502: PPUSH
// result := false ;
22503: LD_ADDR_VAR 0 4
22507: PUSH
22508: LD_INT 0
22510: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22511: LD_VAR 0 1
22515: PPUSH
22516: CALL_OW 264
22520: PUSH
22521: LD_EXP 21
22525: EQUAL
22526: NOT
22527: IFFALSE 22531
// exit ;
22529: GO 22771
// index := GetElementIndex ( minersList , unit ) ;
22531: LD_ADDR_VAR 0 5
22535: PUSH
22536: LD_EXP 92
22540: PPUSH
22541: LD_VAR 0 1
22545: PPUSH
22546: CALL 28715 0 2
22550: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22551: LD_EXP 93
22555: PUSH
22556: LD_VAR 0 5
22560: ARRAY
22561: PUSH
22562: LD_EXP 94
22566: GREATEREQUAL
22567: IFFALSE 22571
// exit ;
22569: GO 22771
// ComMoveXY ( unit , x , y ) ;
22571: LD_VAR 0 1
22575: PPUSH
22576: LD_VAR 0 2
22580: PPUSH
22581: LD_VAR 0 3
22585: PPUSH
22586: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22590: LD_INT 35
22592: PPUSH
22593: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22597: LD_VAR 0 1
22601: PPUSH
22602: LD_VAR 0 2
22606: PPUSH
22607: LD_VAR 0 3
22611: PPUSH
22612: CALL 58779 0 3
22616: NOT
22617: PUSH
22618: LD_VAR 0 1
22622: PPUSH
22623: CALL_OW 314
22627: AND
22628: IFFALSE 22632
// exit ;
22630: GO 22771
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22632: LD_VAR 0 2
22636: PPUSH
22637: LD_VAR 0 3
22641: PPUSH
22642: CALL_OW 428
22646: PUSH
22647: LD_VAR 0 1
22651: EQUAL
22652: PUSH
22653: LD_VAR 0 1
22657: PPUSH
22658: CALL_OW 314
22662: NOT
22663: AND
22664: IFFALSE 22590
// PlaySoundXY ( x , y , PlantMine ) ;
22666: LD_VAR 0 2
22670: PPUSH
22671: LD_VAR 0 3
22675: PPUSH
22676: LD_STRING PlantMine
22678: PPUSH
22679: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22683: LD_VAR 0 2
22687: PPUSH
22688: LD_VAR 0 3
22692: PPUSH
22693: LD_VAR 0 1
22697: PPUSH
22698: CALL_OW 255
22702: PPUSH
22703: LD_INT 0
22705: PPUSH
22706: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22710: LD_ADDR_EXP 93
22714: PUSH
22715: LD_EXP 93
22719: PPUSH
22720: LD_VAR 0 5
22724: PUSH
22725: LD_EXP 93
22729: PUSH
22730: LD_VAR 0 5
22734: ARRAY
22735: PUSH
22736: LD_INT 1
22738: PLUS
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PPUSH
22744: LD_VAR 0 2
22748: PUSH
22749: LD_VAR 0 3
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PPUSH
22758: CALL 28930 0 3
22762: ST_TO_ADDR
// result := true ;
22763: LD_ADDR_VAR 0 4
22767: PUSH
22768: LD_INT 1
22770: ST_TO_ADDR
// end ;
22771: LD_VAR 0 4
22775: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22776: LD_INT 0
22778: PPUSH
22779: PPUSH
22780: PPUSH
// if not unit in minersList then
22781: LD_VAR 0 1
22785: PUSH
22786: LD_EXP 92
22790: IN
22791: NOT
22792: IFFALSE 22796
// exit ;
22794: GO 23188
// index := GetElementIndex ( minersList , unit ) ;
22796: LD_ADDR_VAR 0 6
22800: PUSH
22801: LD_EXP 92
22805: PPUSH
22806: LD_VAR 0 1
22810: PPUSH
22811: CALL 28715 0 2
22815: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22816: LD_ADDR_VAR 0 5
22820: PUSH
22821: DOUBLE
22822: LD_EXP 93
22826: PUSH
22827: LD_VAR 0 6
22831: ARRAY
22832: INC
22833: ST_TO_ADDR
22834: LD_INT 1
22836: PUSH
22837: FOR_DOWNTO
22838: IFFALSE 22999
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22840: LD_EXP 93
22844: PUSH
22845: LD_VAR 0 6
22849: ARRAY
22850: PUSH
22851: LD_VAR 0 5
22855: ARRAY
22856: PUSH
22857: LD_INT 1
22859: ARRAY
22860: PUSH
22861: LD_VAR 0 2
22865: EQUAL
22866: PUSH
22867: LD_EXP 93
22871: PUSH
22872: LD_VAR 0 6
22876: ARRAY
22877: PUSH
22878: LD_VAR 0 5
22882: ARRAY
22883: PUSH
22884: LD_INT 2
22886: ARRAY
22887: PUSH
22888: LD_VAR 0 3
22892: EQUAL
22893: AND
22894: IFFALSE 22997
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22896: LD_EXP 93
22900: PUSH
22901: LD_VAR 0 6
22905: ARRAY
22906: PUSH
22907: LD_VAR 0 5
22911: ARRAY
22912: PUSH
22913: LD_INT 1
22915: ARRAY
22916: PPUSH
22917: LD_EXP 93
22921: PUSH
22922: LD_VAR 0 6
22926: ARRAY
22927: PUSH
22928: LD_VAR 0 5
22932: ARRAY
22933: PUSH
22934: LD_INT 2
22936: ARRAY
22937: PPUSH
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 255
22947: PPUSH
22948: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22952: LD_ADDR_EXP 93
22956: PUSH
22957: LD_EXP 93
22961: PPUSH
22962: LD_VAR 0 6
22966: PPUSH
22967: LD_EXP 93
22971: PUSH
22972: LD_VAR 0 6
22976: ARRAY
22977: PPUSH
22978: LD_VAR 0 5
22982: PPUSH
22983: CALL_OW 3
22987: PPUSH
22988: CALL_OW 1
22992: ST_TO_ADDR
// exit ;
22993: POP
22994: POP
22995: GO 23188
// end ; end ;
22997: GO 22837
22999: POP
23000: POP
// for i := minerMinesList [ index ] downto 1 do
23001: LD_ADDR_VAR 0 5
23005: PUSH
23006: DOUBLE
23007: LD_EXP 93
23011: PUSH
23012: LD_VAR 0 6
23016: ARRAY
23017: INC
23018: ST_TO_ADDR
23019: LD_INT 1
23021: PUSH
23022: FOR_DOWNTO
23023: IFFALSE 23186
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23025: LD_EXP 93
23029: PUSH
23030: LD_VAR 0 6
23034: ARRAY
23035: PUSH
23036: LD_VAR 0 5
23040: ARRAY
23041: PUSH
23042: LD_INT 1
23044: ARRAY
23045: PPUSH
23046: LD_EXP 93
23050: PUSH
23051: LD_VAR 0 6
23055: ARRAY
23056: PUSH
23057: LD_VAR 0 5
23061: ARRAY
23062: PUSH
23063: LD_INT 2
23065: ARRAY
23066: PPUSH
23067: LD_VAR 0 2
23071: PPUSH
23072: LD_VAR 0 3
23076: PPUSH
23077: CALL_OW 298
23081: PUSH
23082: LD_INT 6
23084: LESS
23085: IFFALSE 23184
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23087: LD_EXP 93
23091: PUSH
23092: LD_VAR 0 6
23096: ARRAY
23097: PUSH
23098: LD_VAR 0 5
23102: ARRAY
23103: PUSH
23104: LD_INT 1
23106: ARRAY
23107: PPUSH
23108: LD_EXP 93
23112: PUSH
23113: LD_VAR 0 6
23117: ARRAY
23118: PUSH
23119: LD_VAR 0 5
23123: ARRAY
23124: PUSH
23125: LD_INT 2
23127: ARRAY
23128: PPUSH
23129: LD_VAR 0 1
23133: PPUSH
23134: CALL_OW 255
23138: PPUSH
23139: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23143: LD_ADDR_EXP 93
23147: PUSH
23148: LD_EXP 93
23152: PPUSH
23153: LD_VAR 0 6
23157: PPUSH
23158: LD_EXP 93
23162: PUSH
23163: LD_VAR 0 6
23167: ARRAY
23168: PPUSH
23169: LD_VAR 0 5
23173: PPUSH
23174: CALL_OW 3
23178: PPUSH
23179: CALL_OW 1
23183: ST_TO_ADDR
// end ; end ;
23184: GO 23022
23186: POP
23187: POP
// end ;
23188: LD_VAR 0 4
23192: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23193: LD_INT 0
23195: PPUSH
23196: PPUSH
23197: PPUSH
23198: PPUSH
23199: PPUSH
23200: PPUSH
23201: PPUSH
23202: PPUSH
23203: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23204: LD_VAR 0 1
23208: PPUSH
23209: CALL_OW 264
23213: PUSH
23214: LD_EXP 21
23218: EQUAL
23219: NOT
23220: PUSH
23221: LD_VAR 0 1
23225: PUSH
23226: LD_EXP 92
23230: IN
23231: NOT
23232: OR
23233: IFFALSE 23237
// exit ;
23235: GO 23559
// index := GetElementIndex ( minersList , unit ) ;
23237: LD_ADDR_VAR 0 6
23241: PUSH
23242: LD_EXP 92
23246: PPUSH
23247: LD_VAR 0 1
23251: PPUSH
23252: CALL 28715 0 2
23256: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23257: LD_ADDR_VAR 0 8
23261: PUSH
23262: LD_EXP 94
23266: PUSH
23267: LD_EXP 93
23271: PUSH
23272: LD_VAR 0 6
23276: ARRAY
23277: MINUS
23278: ST_TO_ADDR
// if not minesFreeAmount then
23279: LD_VAR 0 8
23283: NOT
23284: IFFALSE 23288
// exit ;
23286: GO 23559
// tmp := [ ] ;
23288: LD_ADDR_VAR 0 7
23292: PUSH
23293: EMPTY
23294: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23295: LD_ADDR_VAR 0 5
23299: PUSH
23300: DOUBLE
23301: LD_INT 1
23303: DEC
23304: ST_TO_ADDR
23305: LD_VAR 0 8
23309: PUSH
23310: FOR_TO
23311: IFFALSE 23506
// begin _d := rand ( 0 , 5 ) ;
23313: LD_ADDR_VAR 0 11
23317: PUSH
23318: LD_INT 0
23320: PPUSH
23321: LD_INT 5
23323: PPUSH
23324: CALL_OW 12
23328: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23329: LD_ADDR_VAR 0 12
23333: PUSH
23334: LD_INT 2
23336: PPUSH
23337: LD_INT 6
23339: PPUSH
23340: CALL_OW 12
23344: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23345: LD_ADDR_VAR 0 9
23349: PUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: LD_VAR 0 11
23359: PPUSH
23360: LD_VAR 0 12
23364: PPUSH
23365: CALL_OW 272
23369: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23370: LD_ADDR_VAR 0 10
23374: PUSH
23375: LD_VAR 0 3
23379: PPUSH
23380: LD_VAR 0 11
23384: PPUSH
23385: LD_VAR 0 12
23389: PPUSH
23390: CALL_OW 273
23394: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23395: LD_VAR 0 9
23399: PPUSH
23400: LD_VAR 0 10
23404: PPUSH
23405: CALL_OW 488
23409: PUSH
23410: LD_VAR 0 9
23414: PUSH
23415: LD_VAR 0 10
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_VAR 0 7
23428: IN
23429: NOT
23430: AND
23431: PUSH
23432: LD_VAR 0 9
23436: PPUSH
23437: LD_VAR 0 10
23441: PPUSH
23442: CALL_OW 458
23446: NOT
23447: AND
23448: IFFALSE 23490
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23450: LD_ADDR_VAR 0 7
23454: PUSH
23455: LD_VAR 0 7
23459: PPUSH
23460: LD_VAR 0 7
23464: PUSH
23465: LD_INT 1
23467: PLUS
23468: PPUSH
23469: LD_VAR 0 9
23473: PUSH
23474: LD_VAR 0 10
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PPUSH
23483: CALL_OW 1
23487: ST_TO_ADDR
23488: GO 23504
// i := i - 1 ;
23490: LD_ADDR_VAR 0 5
23494: PUSH
23495: LD_VAR 0 5
23499: PUSH
23500: LD_INT 1
23502: MINUS
23503: ST_TO_ADDR
// end ;
23504: GO 23310
23506: POP
23507: POP
// for i in tmp do
23508: LD_ADDR_VAR 0 5
23512: PUSH
23513: LD_VAR 0 7
23517: PUSH
23518: FOR_IN
23519: IFFALSE 23557
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23521: LD_VAR 0 1
23525: PPUSH
23526: LD_VAR 0 5
23530: PUSH
23531: LD_INT 1
23533: ARRAY
23534: PPUSH
23535: LD_VAR 0 5
23539: PUSH
23540: LD_INT 2
23542: ARRAY
23543: PPUSH
23544: CALL 22499 0 3
23548: NOT
23549: IFFALSE 23555
// exit ;
23551: POP
23552: POP
23553: GO 23559
23555: GO 23518
23557: POP
23558: POP
// end ;
23559: LD_VAR 0 4
23563: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23564: LD_INT 0
23566: PPUSH
23567: PPUSH
23568: PPUSH
23569: PPUSH
23570: PPUSH
23571: PPUSH
23572: PPUSH
// if not GetClass ( unit ) = class_sniper then
23573: LD_VAR 0 1
23577: PPUSH
23578: CALL_OW 257
23582: PUSH
23583: LD_INT 5
23585: EQUAL
23586: NOT
23587: IFFALSE 23591
// exit ;
23589: GO 23979
// dist := 8 ;
23591: LD_ADDR_VAR 0 5
23595: PUSH
23596: LD_INT 8
23598: ST_TO_ADDR
// viewRange := 12 ;
23599: LD_ADDR_VAR 0 7
23603: PUSH
23604: LD_INT 12
23606: ST_TO_ADDR
// side := GetSide ( unit ) ;
23607: LD_ADDR_VAR 0 6
23611: PUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: CALL_OW 255
23621: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23622: LD_INT 61
23624: PPUSH
23625: LD_VAR 0 6
23629: PPUSH
23630: CALL_OW 321
23634: PUSH
23635: LD_INT 2
23637: EQUAL
23638: IFFALSE 23648
// viewRange := 16 ;
23640: LD_ADDR_VAR 0 7
23644: PUSH
23645: LD_INT 16
23647: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23648: LD_VAR 0 1
23652: PPUSH
23653: LD_VAR 0 2
23657: PPUSH
23658: LD_VAR 0 3
23662: PPUSH
23663: CALL_OW 297
23667: PUSH
23668: LD_VAR 0 5
23672: GREATER
23673: IFFALSE 23752
// begin ComMoveXY ( unit , x , y ) ;
23675: LD_VAR 0 1
23679: PPUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: LD_VAR 0 3
23689: PPUSH
23690: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23694: LD_INT 35
23696: PPUSH
23697: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23701: LD_VAR 0 1
23705: PPUSH
23706: LD_VAR 0 2
23710: PPUSH
23711: LD_VAR 0 3
23715: PPUSH
23716: CALL 58779 0 3
23720: NOT
23721: IFFALSE 23725
// exit ;
23723: GO 23979
// until GetDistUnitXY ( unit , x , y ) < dist ;
23725: LD_VAR 0 1
23729: PPUSH
23730: LD_VAR 0 2
23734: PPUSH
23735: LD_VAR 0 3
23739: PPUSH
23740: CALL_OW 297
23744: PUSH
23745: LD_VAR 0 5
23749: LESS
23750: IFFALSE 23694
// end ; ComTurnXY ( unit , x , y ) ;
23752: LD_VAR 0 1
23756: PPUSH
23757: LD_VAR 0 2
23761: PPUSH
23762: LD_VAR 0 3
23766: PPUSH
23767: CALL_OW 118
// wait ( 5 ) ;
23771: LD_INT 5
23773: PPUSH
23774: CALL_OW 67
// _d := GetDir ( unit ) ;
23778: LD_ADDR_VAR 0 10
23782: PUSH
23783: LD_VAR 0 1
23787: PPUSH
23788: CALL_OW 254
23792: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23793: LD_ADDR_VAR 0 8
23797: PUSH
23798: LD_VAR 0 1
23802: PPUSH
23803: CALL_OW 250
23807: PPUSH
23808: LD_VAR 0 10
23812: PPUSH
23813: LD_VAR 0 5
23817: PPUSH
23818: CALL_OW 272
23822: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23823: LD_ADDR_VAR 0 9
23827: PUSH
23828: LD_VAR 0 1
23832: PPUSH
23833: CALL_OW 251
23837: PPUSH
23838: LD_VAR 0 10
23842: PPUSH
23843: LD_VAR 0 5
23847: PPUSH
23848: CALL_OW 273
23852: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23853: LD_VAR 0 8
23857: PPUSH
23858: LD_VAR 0 9
23862: PPUSH
23863: CALL_OW 488
23867: NOT
23868: IFFALSE 23872
// exit ;
23870: GO 23979
// ComAnimCustom ( unit , 1 ) ;
23872: LD_VAR 0 1
23876: PPUSH
23877: LD_INT 1
23879: PPUSH
23880: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23884: LD_VAR 0 8
23888: PPUSH
23889: LD_VAR 0 9
23893: PPUSH
23894: LD_VAR 0 6
23898: PPUSH
23899: LD_VAR 0 7
23903: PPUSH
23904: CALL_OW 330
// repeat wait ( 1 ) ;
23908: LD_INT 1
23910: PPUSH
23911: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23915: LD_VAR 0 1
23919: PPUSH
23920: CALL_OW 316
23924: PUSH
23925: LD_VAR 0 1
23929: PPUSH
23930: CALL_OW 314
23934: OR
23935: PUSH
23936: LD_VAR 0 1
23940: PPUSH
23941: CALL_OW 302
23945: NOT
23946: OR
23947: PUSH
23948: LD_VAR 0 1
23952: PPUSH
23953: CALL_OW 301
23957: OR
23958: IFFALSE 23908
// RemoveSeeing ( _x , _y , side ) ;
23960: LD_VAR 0 8
23964: PPUSH
23965: LD_VAR 0 9
23969: PPUSH
23970: LD_VAR 0 6
23974: PPUSH
23975: CALL_OW 331
// end ; end_of_file
23979: LD_VAR 0 4
23983: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23984: LD_INT 0
23986: PPUSH
23987: PPUSH
// if exist_mode then
23988: LD_VAR 0 2
23992: IFFALSE 24017
// unit := CreateCharacter ( prefix & ident ) else
23994: LD_ADDR_VAR 0 5
23998: PUSH
23999: LD_VAR 0 3
24003: PUSH
24004: LD_VAR 0 1
24008: STR
24009: PPUSH
24010: CALL_OW 34
24014: ST_TO_ADDR
24015: GO 24032
// unit := NewCharacter ( ident ) ;
24017: LD_ADDR_VAR 0 5
24021: PUSH
24022: LD_VAR 0 1
24026: PPUSH
24027: CALL_OW 25
24031: ST_TO_ADDR
// result := unit ;
24032: LD_ADDR_VAR 0 4
24036: PUSH
24037: LD_VAR 0 5
24041: ST_TO_ADDR
// end ;
24042: LD_VAR 0 4
24046: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24047: LD_INT 0
24049: PPUSH
24050: PPUSH
// if not side or not nation then
24051: LD_VAR 0 1
24055: NOT
24056: PUSH
24057: LD_VAR 0 2
24061: NOT
24062: OR
24063: IFFALSE 24067
// exit ;
24065: GO 24831
// case nation of nation_american :
24067: LD_VAR 0 2
24071: PUSH
24072: LD_INT 1
24074: DOUBLE
24075: EQUAL
24076: IFTRUE 24080
24078: GO 24294
24080: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24081: LD_ADDR_VAR 0 4
24085: PUSH
24086: LD_INT 35
24088: PUSH
24089: LD_INT 45
24091: PUSH
24092: LD_INT 46
24094: PUSH
24095: LD_INT 47
24097: PUSH
24098: LD_INT 82
24100: PUSH
24101: LD_INT 83
24103: PUSH
24104: LD_INT 84
24106: PUSH
24107: LD_INT 85
24109: PUSH
24110: LD_INT 86
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: LD_INT 2
24118: PUSH
24119: LD_INT 6
24121: PUSH
24122: LD_INT 15
24124: PUSH
24125: LD_INT 16
24127: PUSH
24128: LD_INT 7
24130: PUSH
24131: LD_INT 12
24133: PUSH
24134: LD_INT 13
24136: PUSH
24137: LD_INT 10
24139: PUSH
24140: LD_INT 14
24142: PUSH
24143: LD_INT 20
24145: PUSH
24146: LD_INT 21
24148: PUSH
24149: LD_INT 22
24151: PUSH
24152: LD_INT 25
24154: PUSH
24155: LD_INT 32
24157: PUSH
24158: LD_INT 27
24160: PUSH
24161: LD_INT 36
24163: PUSH
24164: LD_INT 69
24166: PUSH
24167: LD_INT 39
24169: PUSH
24170: LD_INT 34
24172: PUSH
24173: LD_INT 40
24175: PUSH
24176: LD_INT 48
24178: PUSH
24179: LD_INT 49
24181: PUSH
24182: LD_INT 50
24184: PUSH
24185: LD_INT 51
24187: PUSH
24188: LD_INT 52
24190: PUSH
24191: LD_INT 53
24193: PUSH
24194: LD_INT 54
24196: PUSH
24197: LD_INT 55
24199: PUSH
24200: LD_INT 56
24202: PUSH
24203: LD_INT 57
24205: PUSH
24206: LD_INT 58
24208: PUSH
24209: LD_INT 59
24211: PUSH
24212: LD_INT 60
24214: PUSH
24215: LD_INT 61
24217: PUSH
24218: LD_INT 62
24220: PUSH
24221: LD_INT 80
24223: PUSH
24224: LD_INT 82
24226: PUSH
24227: LD_INT 83
24229: PUSH
24230: LD_INT 84
24232: PUSH
24233: LD_INT 85
24235: PUSH
24236: LD_INT 86
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: ST_TO_ADDR
24292: GO 24755
24294: LD_INT 2
24296: DOUBLE
24297: EQUAL
24298: IFTRUE 24302
24300: GO 24524
24302: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24303: LD_ADDR_VAR 0 4
24307: PUSH
24308: LD_INT 35
24310: PUSH
24311: LD_INT 45
24313: PUSH
24314: LD_INT 46
24316: PUSH
24317: LD_INT 47
24319: PUSH
24320: LD_INT 82
24322: PUSH
24323: LD_INT 83
24325: PUSH
24326: LD_INT 84
24328: PUSH
24329: LD_INT 85
24331: PUSH
24332: LD_INT 87
24334: PUSH
24335: LD_INT 70
24337: PUSH
24338: LD_INT 1
24340: PUSH
24341: LD_INT 11
24343: PUSH
24344: LD_INT 3
24346: PUSH
24347: LD_INT 4
24349: PUSH
24350: LD_INT 5
24352: PUSH
24353: LD_INT 6
24355: PUSH
24356: LD_INT 15
24358: PUSH
24359: LD_INT 18
24361: PUSH
24362: LD_INT 7
24364: PUSH
24365: LD_INT 17
24367: PUSH
24368: LD_INT 8
24370: PUSH
24371: LD_INT 20
24373: PUSH
24374: LD_INT 21
24376: PUSH
24377: LD_INT 22
24379: PUSH
24380: LD_INT 72
24382: PUSH
24383: LD_INT 26
24385: PUSH
24386: LD_INT 69
24388: PUSH
24389: LD_INT 39
24391: PUSH
24392: LD_INT 40
24394: PUSH
24395: LD_INT 41
24397: PUSH
24398: LD_INT 42
24400: PUSH
24401: LD_INT 43
24403: PUSH
24404: LD_INT 48
24406: PUSH
24407: LD_INT 49
24409: PUSH
24410: LD_INT 50
24412: PUSH
24413: LD_INT 51
24415: PUSH
24416: LD_INT 52
24418: PUSH
24419: LD_INT 53
24421: PUSH
24422: LD_INT 54
24424: PUSH
24425: LD_INT 55
24427: PUSH
24428: LD_INT 56
24430: PUSH
24431: LD_INT 60
24433: PUSH
24434: LD_INT 61
24436: PUSH
24437: LD_INT 62
24439: PUSH
24440: LD_INT 66
24442: PUSH
24443: LD_INT 67
24445: PUSH
24446: LD_INT 68
24448: PUSH
24449: LD_INT 81
24451: PUSH
24452: LD_INT 82
24454: PUSH
24455: LD_INT 83
24457: PUSH
24458: LD_INT 84
24460: PUSH
24461: LD_INT 85
24463: PUSH
24464: LD_INT 87
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: ST_TO_ADDR
24522: GO 24755
24524: LD_INT 3
24526: DOUBLE
24527: EQUAL
24528: IFTRUE 24532
24530: GO 24754
24532: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24533: LD_ADDR_VAR 0 4
24537: PUSH
24538: LD_INT 46
24540: PUSH
24541: LD_INT 47
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: LD_INT 82
24552: PUSH
24553: LD_INT 83
24555: PUSH
24556: LD_INT 84
24558: PUSH
24559: LD_INT 85
24561: PUSH
24562: LD_INT 86
24564: PUSH
24565: LD_INT 11
24567: PUSH
24568: LD_INT 9
24570: PUSH
24571: LD_INT 20
24573: PUSH
24574: LD_INT 19
24576: PUSH
24577: LD_INT 21
24579: PUSH
24580: LD_INT 24
24582: PUSH
24583: LD_INT 22
24585: PUSH
24586: LD_INT 25
24588: PUSH
24589: LD_INT 28
24591: PUSH
24592: LD_INT 29
24594: PUSH
24595: LD_INT 30
24597: PUSH
24598: LD_INT 31
24600: PUSH
24601: LD_INT 37
24603: PUSH
24604: LD_INT 38
24606: PUSH
24607: LD_INT 32
24609: PUSH
24610: LD_INT 27
24612: PUSH
24613: LD_INT 33
24615: PUSH
24616: LD_INT 69
24618: PUSH
24619: LD_INT 39
24621: PUSH
24622: LD_INT 34
24624: PUSH
24625: LD_INT 40
24627: PUSH
24628: LD_INT 71
24630: PUSH
24631: LD_INT 23
24633: PUSH
24634: LD_INT 44
24636: PUSH
24637: LD_INT 48
24639: PUSH
24640: LD_INT 49
24642: PUSH
24643: LD_INT 50
24645: PUSH
24646: LD_INT 51
24648: PUSH
24649: LD_INT 52
24651: PUSH
24652: LD_INT 53
24654: PUSH
24655: LD_INT 54
24657: PUSH
24658: LD_INT 55
24660: PUSH
24661: LD_INT 56
24663: PUSH
24664: LD_INT 57
24666: PUSH
24667: LD_INT 58
24669: PUSH
24670: LD_INT 59
24672: PUSH
24673: LD_INT 63
24675: PUSH
24676: LD_INT 64
24678: PUSH
24679: LD_INT 65
24681: PUSH
24682: LD_INT 82
24684: PUSH
24685: LD_INT 83
24687: PUSH
24688: LD_INT 84
24690: PUSH
24691: LD_INT 85
24693: PUSH
24694: LD_INT 86
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: ST_TO_ADDR
24752: GO 24755
24754: POP
// if state > - 1 and state < 3 then
24755: LD_VAR 0 3
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: GREATER
24764: PUSH
24765: LD_VAR 0 3
24769: PUSH
24770: LD_INT 3
24772: LESS
24773: AND
24774: IFFALSE 24831
// for i in result do
24776: LD_ADDR_VAR 0 5
24780: PUSH
24781: LD_VAR 0 4
24785: PUSH
24786: FOR_IN
24787: IFFALSE 24829
// if GetTech ( i , side ) <> state then
24789: LD_VAR 0 5
24793: PPUSH
24794: LD_VAR 0 1
24798: PPUSH
24799: CALL_OW 321
24803: PUSH
24804: LD_VAR 0 3
24808: NONEQUAL
24809: IFFALSE 24827
// result := result diff i ;
24811: LD_ADDR_VAR 0 4
24815: PUSH
24816: LD_VAR 0 4
24820: PUSH
24821: LD_VAR 0 5
24825: DIFF
24826: ST_TO_ADDR
24827: GO 24786
24829: POP
24830: POP
// end ;
24831: LD_VAR 0 4
24835: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24836: LD_INT 0
24838: PPUSH
24839: PPUSH
24840: PPUSH
// result := true ;
24841: LD_ADDR_VAR 0 3
24845: PUSH
24846: LD_INT 1
24848: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24849: LD_ADDR_VAR 0 5
24853: PUSH
24854: LD_VAR 0 2
24858: PPUSH
24859: CALL_OW 480
24863: ST_TO_ADDR
// if not tmp then
24864: LD_VAR 0 5
24868: NOT
24869: IFFALSE 24873
// exit ;
24871: GO 24922
// for i in tmp do
24873: LD_ADDR_VAR 0 4
24877: PUSH
24878: LD_VAR 0 5
24882: PUSH
24883: FOR_IN
24884: IFFALSE 24920
// if GetTech ( i , side ) <> state_researched then
24886: LD_VAR 0 4
24890: PPUSH
24891: LD_VAR 0 1
24895: PPUSH
24896: CALL_OW 321
24900: PUSH
24901: LD_INT 2
24903: NONEQUAL
24904: IFFALSE 24918
// begin result := false ;
24906: LD_ADDR_VAR 0 3
24910: PUSH
24911: LD_INT 0
24913: ST_TO_ADDR
// exit ;
24914: POP
24915: POP
24916: GO 24922
// end ;
24918: GO 24883
24920: POP
24921: POP
// end ;
24922: LD_VAR 0 3
24926: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24927: LD_INT 0
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
24936: PPUSH
24937: PPUSH
24938: PPUSH
24939: PPUSH
24940: PPUSH
24941: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24942: LD_VAR 0 1
24946: NOT
24947: PUSH
24948: LD_VAR 0 1
24952: PPUSH
24953: CALL_OW 257
24957: PUSH
24958: LD_INT 9
24960: NONEQUAL
24961: OR
24962: IFFALSE 24966
// exit ;
24964: GO 25539
// side := GetSide ( unit ) ;
24966: LD_ADDR_VAR 0 9
24970: PUSH
24971: LD_VAR 0 1
24975: PPUSH
24976: CALL_OW 255
24980: ST_TO_ADDR
// tech_space := tech_spacanom ;
24981: LD_ADDR_VAR 0 12
24985: PUSH
24986: LD_INT 29
24988: ST_TO_ADDR
// tech_time := tech_taurad ;
24989: LD_ADDR_VAR 0 13
24993: PUSH
24994: LD_INT 28
24996: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24997: LD_ADDR_VAR 0 11
25001: PUSH
25002: LD_VAR 0 1
25006: PPUSH
25007: CALL_OW 310
25011: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25012: LD_VAR 0 11
25016: PPUSH
25017: CALL_OW 247
25021: PUSH
25022: LD_INT 2
25024: EQUAL
25025: IFFALSE 25029
// exit ;
25027: GO 25539
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25029: LD_ADDR_VAR 0 8
25033: PUSH
25034: LD_INT 81
25036: PUSH
25037: LD_VAR 0 9
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 3
25048: PUSH
25049: LD_INT 21
25051: PUSH
25052: LD_INT 3
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PPUSH
25067: CALL_OW 69
25071: ST_TO_ADDR
// if not tmp then
25072: LD_VAR 0 8
25076: NOT
25077: IFFALSE 25081
// exit ;
25079: GO 25539
// if in_unit then
25081: LD_VAR 0 11
25085: IFFALSE 25109
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25087: LD_ADDR_VAR 0 10
25091: PUSH
25092: LD_VAR 0 8
25096: PPUSH
25097: LD_VAR 0 11
25101: PPUSH
25102: CALL_OW 74
25106: ST_TO_ADDR
25107: GO 25129
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25109: LD_ADDR_VAR 0 10
25113: PUSH
25114: LD_VAR 0 8
25118: PPUSH
25119: LD_VAR 0 1
25123: PPUSH
25124: CALL_OW 74
25128: ST_TO_ADDR
// if not enemy then
25129: LD_VAR 0 10
25133: NOT
25134: IFFALSE 25138
// exit ;
25136: GO 25539
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25138: LD_VAR 0 11
25142: PUSH
25143: LD_VAR 0 11
25147: PPUSH
25148: LD_VAR 0 10
25152: PPUSH
25153: CALL_OW 296
25157: PUSH
25158: LD_INT 13
25160: GREATER
25161: AND
25162: PUSH
25163: LD_VAR 0 1
25167: PPUSH
25168: LD_VAR 0 10
25172: PPUSH
25173: CALL_OW 296
25177: PUSH
25178: LD_INT 12
25180: GREATER
25181: OR
25182: IFFALSE 25186
// exit ;
25184: GO 25539
// missile := [ 1 ] ;
25186: LD_ADDR_VAR 0 14
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25197: LD_VAR 0 9
25201: PPUSH
25202: LD_VAR 0 12
25206: PPUSH
25207: CALL_OW 325
25211: IFFALSE 25240
// missile := Insert ( missile , missile + 1 , 2 ) ;
25213: LD_ADDR_VAR 0 14
25217: PUSH
25218: LD_VAR 0 14
25222: PPUSH
25223: LD_VAR 0 14
25227: PUSH
25228: LD_INT 1
25230: PLUS
25231: PPUSH
25232: LD_INT 2
25234: PPUSH
25235: CALL_OW 2
25239: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25240: LD_VAR 0 9
25244: PPUSH
25245: LD_VAR 0 13
25249: PPUSH
25250: CALL_OW 325
25254: PUSH
25255: LD_VAR 0 10
25259: PPUSH
25260: CALL_OW 255
25264: PPUSH
25265: LD_VAR 0 13
25269: PPUSH
25270: CALL_OW 325
25274: NOT
25275: AND
25276: IFFALSE 25305
// missile := Insert ( missile , missile + 1 , 3 ) ;
25278: LD_ADDR_VAR 0 14
25282: PUSH
25283: LD_VAR 0 14
25287: PPUSH
25288: LD_VAR 0 14
25292: PUSH
25293: LD_INT 1
25295: PLUS
25296: PPUSH
25297: LD_INT 3
25299: PPUSH
25300: CALL_OW 2
25304: ST_TO_ADDR
// if missile < 2 then
25305: LD_VAR 0 14
25309: PUSH
25310: LD_INT 2
25312: LESS
25313: IFFALSE 25317
// exit ;
25315: GO 25539
// x := GetX ( enemy ) ;
25317: LD_ADDR_VAR 0 4
25321: PUSH
25322: LD_VAR 0 10
25326: PPUSH
25327: CALL_OW 250
25331: ST_TO_ADDR
// y := GetY ( enemy ) ;
25332: LD_ADDR_VAR 0 5
25336: PUSH
25337: LD_VAR 0 10
25341: PPUSH
25342: CALL_OW 251
25346: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25347: LD_ADDR_VAR 0 6
25351: PUSH
25352: LD_VAR 0 4
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: CALL_OW 12
25368: PLUS
25369: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25370: LD_ADDR_VAR 0 7
25374: PUSH
25375: LD_VAR 0 5
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PPUSH
25384: LD_INT 1
25386: PPUSH
25387: CALL_OW 12
25391: PLUS
25392: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25393: LD_VAR 0 6
25397: PPUSH
25398: LD_VAR 0 7
25402: PPUSH
25403: CALL_OW 488
25407: NOT
25408: IFFALSE 25430
// begin _x := x ;
25410: LD_ADDR_VAR 0 6
25414: PUSH
25415: LD_VAR 0 4
25419: ST_TO_ADDR
// _y := y ;
25420: LD_ADDR_VAR 0 7
25424: PUSH
25425: LD_VAR 0 5
25429: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25430: LD_ADDR_VAR 0 3
25434: PUSH
25435: LD_INT 1
25437: PPUSH
25438: LD_VAR 0 14
25442: PPUSH
25443: CALL_OW 12
25447: ST_TO_ADDR
// case i of 1 :
25448: LD_VAR 0 3
25452: PUSH
25453: LD_INT 1
25455: DOUBLE
25456: EQUAL
25457: IFTRUE 25461
25459: GO 25478
25461: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25462: LD_VAR 0 1
25466: PPUSH
25467: LD_VAR 0 10
25471: PPUSH
25472: CALL_OW 115
25476: GO 25539
25478: LD_INT 2
25480: DOUBLE
25481: EQUAL
25482: IFTRUE 25486
25484: GO 25508
25486: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25487: LD_VAR 0 1
25491: PPUSH
25492: LD_VAR 0 6
25496: PPUSH
25497: LD_VAR 0 7
25501: PPUSH
25502: CALL_OW 153
25506: GO 25539
25508: LD_INT 3
25510: DOUBLE
25511: EQUAL
25512: IFTRUE 25516
25514: GO 25538
25516: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25517: LD_VAR 0 1
25521: PPUSH
25522: LD_VAR 0 6
25526: PPUSH
25527: LD_VAR 0 7
25531: PPUSH
25532: CALL_OW 154
25536: GO 25539
25538: POP
// end ;
25539: LD_VAR 0 2
25543: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25544: LD_INT 0
25546: PPUSH
25547: PPUSH
25548: PPUSH
25549: PPUSH
25550: PPUSH
25551: PPUSH
// if not unit or not building then
25552: LD_VAR 0 1
25556: NOT
25557: PUSH
25558: LD_VAR 0 2
25562: NOT
25563: OR
25564: IFFALSE 25568
// exit ;
25566: GO 25726
// x := GetX ( building ) ;
25568: LD_ADDR_VAR 0 5
25572: PUSH
25573: LD_VAR 0 2
25577: PPUSH
25578: CALL_OW 250
25582: ST_TO_ADDR
// y := GetY ( building ) ;
25583: LD_ADDR_VAR 0 6
25587: PUSH
25588: LD_VAR 0 2
25592: PPUSH
25593: CALL_OW 251
25597: ST_TO_ADDR
// for i = 0 to 5 do
25598: LD_ADDR_VAR 0 4
25602: PUSH
25603: DOUBLE
25604: LD_INT 0
25606: DEC
25607: ST_TO_ADDR
25608: LD_INT 5
25610: PUSH
25611: FOR_TO
25612: IFFALSE 25724
// begin _x := ShiftX ( x , i , 3 ) ;
25614: LD_ADDR_VAR 0 7
25618: PUSH
25619: LD_VAR 0 5
25623: PPUSH
25624: LD_VAR 0 4
25628: PPUSH
25629: LD_INT 3
25631: PPUSH
25632: CALL_OW 272
25636: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25637: LD_ADDR_VAR 0 8
25641: PUSH
25642: LD_VAR 0 6
25646: PPUSH
25647: LD_VAR 0 4
25651: PPUSH
25652: LD_INT 3
25654: PPUSH
25655: CALL_OW 273
25659: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25660: LD_VAR 0 7
25664: PPUSH
25665: LD_VAR 0 8
25669: PPUSH
25670: CALL_OW 488
25674: NOT
25675: IFFALSE 25679
// continue ;
25677: GO 25611
// if HexInfo ( _x , _y ) = 0 then
25679: LD_VAR 0 7
25683: PPUSH
25684: LD_VAR 0 8
25688: PPUSH
25689: CALL_OW 428
25693: PUSH
25694: LD_INT 0
25696: EQUAL
25697: IFFALSE 25722
// begin ComMoveXY ( unit , _x , _y ) ;
25699: LD_VAR 0 1
25703: PPUSH
25704: LD_VAR 0 7
25708: PPUSH
25709: LD_VAR 0 8
25713: PPUSH
25714: CALL_OW 111
// exit ;
25718: POP
25719: POP
25720: GO 25726
// end ; end ;
25722: GO 25611
25724: POP
25725: POP
// end ;
25726: LD_VAR 0 3
25730: RET
// export function ScanBase ( side , base_area ) ; begin
25731: LD_INT 0
25733: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25734: LD_ADDR_VAR 0 3
25738: PUSH
25739: LD_VAR 0 2
25743: PPUSH
25744: LD_INT 81
25746: PUSH
25747: LD_VAR 0 1
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PPUSH
25756: CALL_OW 70
25760: ST_TO_ADDR
// end ;
25761: LD_VAR 0 3
25765: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25766: LD_INT 0
25768: PPUSH
25769: PPUSH
25770: PPUSH
25771: PPUSH
// result := false ;
25772: LD_ADDR_VAR 0 2
25776: PUSH
25777: LD_INT 0
25779: ST_TO_ADDR
// side := GetSide ( unit ) ;
25780: LD_ADDR_VAR 0 3
25784: PUSH
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 255
25794: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25795: LD_ADDR_VAR 0 4
25799: PUSH
25800: LD_VAR 0 1
25804: PPUSH
25805: CALL_OW 248
25809: ST_TO_ADDR
// case nat of 1 :
25810: LD_VAR 0 4
25814: PUSH
25815: LD_INT 1
25817: DOUBLE
25818: EQUAL
25819: IFTRUE 25823
25821: GO 25834
25823: POP
// tech := tech_lassight ; 2 :
25824: LD_ADDR_VAR 0 5
25828: PUSH
25829: LD_INT 12
25831: ST_TO_ADDR
25832: GO 25873
25834: LD_INT 2
25836: DOUBLE
25837: EQUAL
25838: IFTRUE 25842
25840: GO 25853
25842: POP
// tech := tech_mortar ; 3 :
25843: LD_ADDR_VAR 0 5
25847: PUSH
25848: LD_INT 41
25850: ST_TO_ADDR
25851: GO 25873
25853: LD_INT 3
25855: DOUBLE
25856: EQUAL
25857: IFTRUE 25861
25859: GO 25872
25861: POP
// tech := tech_bazooka ; end ;
25862: LD_ADDR_VAR 0 5
25866: PUSH
25867: LD_INT 44
25869: ST_TO_ADDR
25870: GO 25873
25872: POP
// if Researched ( side , tech ) then
25873: LD_VAR 0 3
25877: PPUSH
25878: LD_VAR 0 5
25882: PPUSH
25883: CALL_OW 325
25887: IFFALSE 25914
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25889: LD_ADDR_VAR 0 2
25893: PUSH
25894: LD_INT 5
25896: PUSH
25897: LD_INT 8
25899: PUSH
25900: LD_INT 9
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: LIST
25907: PUSH
25908: LD_VAR 0 4
25912: ARRAY
25913: ST_TO_ADDR
// end ;
25914: LD_VAR 0 2
25918: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25919: LD_INT 0
25921: PPUSH
25922: PPUSH
25923: PPUSH
// if not mines then
25924: LD_VAR 0 2
25928: NOT
25929: IFFALSE 25933
// exit ;
25931: GO 26077
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25933: LD_ADDR_VAR 0 5
25937: PUSH
25938: LD_INT 81
25940: PUSH
25941: LD_VAR 0 1
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 3
25952: PUSH
25953: LD_INT 21
25955: PUSH
25956: LD_INT 3
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PPUSH
25971: CALL_OW 69
25975: ST_TO_ADDR
// for i in mines do
25976: LD_ADDR_VAR 0 4
25980: PUSH
25981: LD_VAR 0 2
25985: PUSH
25986: FOR_IN
25987: IFFALSE 26075
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25989: LD_VAR 0 4
25993: PUSH
25994: LD_INT 1
25996: ARRAY
25997: PPUSH
25998: LD_VAR 0 4
26002: PUSH
26003: LD_INT 2
26005: ARRAY
26006: PPUSH
26007: CALL_OW 458
26011: NOT
26012: IFFALSE 26016
// continue ;
26014: GO 25986
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26016: LD_VAR 0 4
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: PPUSH
26025: LD_VAR 0 4
26029: PUSH
26030: LD_INT 2
26032: ARRAY
26033: PPUSH
26034: CALL_OW 428
26038: PUSH
26039: LD_VAR 0 5
26043: IN
26044: IFFALSE 26073
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26046: LD_VAR 0 4
26050: PUSH
26051: LD_INT 1
26053: ARRAY
26054: PPUSH
26055: LD_VAR 0 4
26059: PUSH
26060: LD_INT 2
26062: ARRAY
26063: PPUSH
26064: LD_VAR 0 1
26068: PPUSH
26069: CALL_OW 456
// end ;
26073: GO 25986
26075: POP
26076: POP
// end ;
26077: LD_VAR 0 3
26081: RET
// export function Count ( array ) ; var i ; begin
26082: LD_INT 0
26084: PPUSH
26085: PPUSH
// result := 0 ;
26086: LD_ADDR_VAR 0 2
26090: PUSH
26091: LD_INT 0
26093: ST_TO_ADDR
// for i in array do
26094: LD_ADDR_VAR 0 3
26098: PUSH
26099: LD_VAR 0 1
26103: PUSH
26104: FOR_IN
26105: IFFALSE 26129
// if i then
26107: LD_VAR 0 3
26111: IFFALSE 26127
// result := result + 1 ;
26113: LD_ADDR_VAR 0 2
26117: PUSH
26118: LD_VAR 0 2
26122: PUSH
26123: LD_INT 1
26125: PLUS
26126: ST_TO_ADDR
26127: GO 26104
26129: POP
26130: POP
// end ;
26131: LD_VAR 0 2
26135: RET
// export function IsEmpty ( building ) ; begin
26136: LD_INT 0
26138: PPUSH
// if not building then
26139: LD_VAR 0 1
26143: NOT
26144: IFFALSE 26148
// exit ;
26146: GO 26191
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26148: LD_ADDR_VAR 0 2
26152: PUSH
26153: LD_VAR 0 1
26157: PUSH
26158: LD_INT 22
26160: PUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 255
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 58
26177: PUSH
26178: EMPTY
26179: LIST
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PPUSH
26185: CALL_OW 69
26189: IN
26190: ST_TO_ADDR
// end ;
26191: LD_VAR 0 2
26195: RET
// export function IsNotFull ( building ) ; begin
26196: LD_INT 0
26198: PPUSH
// if not building then
26199: LD_VAR 0 1
26203: NOT
26204: IFFALSE 26208
// exit ;
26206: GO 26227
// result := UnitsInside ( building ) < 6 ;
26208: LD_ADDR_VAR 0 2
26212: PUSH
26213: LD_VAR 0 1
26217: PPUSH
26218: CALL_OW 313
26222: PUSH
26223: LD_INT 6
26225: LESS
26226: ST_TO_ADDR
// end ;
26227: LD_VAR 0 2
26231: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26232: LD_INT 0
26234: PPUSH
26235: PPUSH
26236: PPUSH
26237: PPUSH
// tmp := [ ] ;
26238: LD_ADDR_VAR 0 3
26242: PUSH
26243: EMPTY
26244: ST_TO_ADDR
// list := [ ] ;
26245: LD_ADDR_VAR 0 5
26249: PUSH
26250: EMPTY
26251: ST_TO_ADDR
// for i = 16 to 25 do
26252: LD_ADDR_VAR 0 4
26256: PUSH
26257: DOUBLE
26258: LD_INT 16
26260: DEC
26261: ST_TO_ADDR
26262: LD_INT 25
26264: PUSH
26265: FOR_TO
26266: IFFALSE 26339
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26268: LD_ADDR_VAR 0 3
26272: PUSH
26273: LD_VAR 0 3
26277: PUSH
26278: LD_INT 22
26280: PUSH
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL_OW 255
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 91
26297: PUSH
26298: LD_VAR 0 1
26302: PUSH
26303: LD_INT 6
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 30
26313: PUSH
26314: LD_VAR 0 4
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: PPUSH
26331: CALL_OW 69
26335: ADD
26336: ST_TO_ADDR
26337: GO 26265
26339: POP
26340: POP
// for i = 1 to tmp do
26341: LD_ADDR_VAR 0 4
26345: PUSH
26346: DOUBLE
26347: LD_INT 1
26349: DEC
26350: ST_TO_ADDR
26351: LD_VAR 0 3
26355: PUSH
26356: FOR_TO
26357: IFFALSE 26445
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26359: LD_ADDR_VAR 0 5
26363: PUSH
26364: LD_VAR 0 5
26368: PUSH
26369: LD_VAR 0 3
26373: PUSH
26374: LD_VAR 0 4
26378: ARRAY
26379: PPUSH
26380: CALL_OW 266
26384: PUSH
26385: LD_VAR 0 3
26389: PUSH
26390: LD_VAR 0 4
26394: ARRAY
26395: PPUSH
26396: CALL_OW 250
26400: PUSH
26401: LD_VAR 0 3
26405: PUSH
26406: LD_VAR 0 4
26410: ARRAY
26411: PPUSH
26412: CALL_OW 251
26416: PUSH
26417: LD_VAR 0 3
26421: PUSH
26422: LD_VAR 0 4
26426: ARRAY
26427: PPUSH
26428: CALL_OW 254
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: ADD
26442: ST_TO_ADDR
26443: GO 26356
26445: POP
26446: POP
// result := list ;
26447: LD_ADDR_VAR 0 2
26451: PUSH
26452: LD_VAR 0 5
26456: ST_TO_ADDR
// end ;
26457: LD_VAR 0 2
26461: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26462: LD_INT 0
26464: PPUSH
26465: PPUSH
26466: PPUSH
26467: PPUSH
26468: PPUSH
26469: PPUSH
26470: PPUSH
// if not factory then
26471: LD_VAR 0 1
26475: NOT
26476: IFFALSE 26480
// exit ;
26478: GO 27073
// if control = control_apeman then
26480: LD_VAR 0 4
26484: PUSH
26485: LD_INT 5
26487: EQUAL
26488: IFFALSE 26597
// begin tmp := UnitsInside ( factory ) ;
26490: LD_ADDR_VAR 0 8
26494: PUSH
26495: LD_VAR 0 1
26499: PPUSH
26500: CALL_OW 313
26504: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26505: LD_VAR 0 8
26509: PPUSH
26510: LD_INT 25
26512: PUSH
26513: LD_INT 12
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PPUSH
26520: CALL_OW 72
26524: NOT
26525: IFFALSE 26535
// control := control_manual ;
26527: LD_ADDR_VAR 0 4
26531: PUSH
26532: LD_INT 1
26534: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26535: LD_ADDR_VAR 0 8
26539: PUSH
26540: LD_VAR 0 1
26544: PPUSH
26545: CALL 26232 0 1
26549: ST_TO_ADDR
// if tmp then
26550: LD_VAR 0 8
26554: IFFALSE 26597
// begin for i in tmp do
26556: LD_ADDR_VAR 0 7
26560: PUSH
26561: LD_VAR 0 8
26565: PUSH
26566: FOR_IN
26567: IFFALSE 26595
// if i [ 1 ] = b_ext_radio then
26569: LD_VAR 0 7
26573: PUSH
26574: LD_INT 1
26576: ARRAY
26577: PUSH
26578: LD_INT 22
26580: EQUAL
26581: IFFALSE 26593
// begin control := control_remote ;
26583: LD_ADDR_VAR 0 4
26587: PUSH
26588: LD_INT 2
26590: ST_TO_ADDR
// break ;
26591: GO 26595
// end ;
26593: GO 26566
26595: POP
26596: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26597: LD_VAR 0 1
26601: PPUSH
26602: LD_VAR 0 2
26606: PPUSH
26607: LD_VAR 0 3
26611: PPUSH
26612: LD_VAR 0 4
26616: PPUSH
26617: LD_VAR 0 5
26621: PPUSH
26622: CALL_OW 448
26626: IFFALSE 26661
// begin result := [ chassis , engine , control , weapon ] ;
26628: LD_ADDR_VAR 0 6
26632: PUSH
26633: LD_VAR 0 2
26637: PUSH
26638: LD_VAR 0 3
26642: PUSH
26643: LD_VAR 0 4
26647: PUSH
26648: LD_VAR 0 5
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: ST_TO_ADDR
// exit ;
26659: GO 27073
// end ; _chassis := AvailableChassisList ( factory ) ;
26661: LD_ADDR_VAR 0 9
26665: PUSH
26666: LD_VAR 0 1
26670: PPUSH
26671: CALL_OW 475
26675: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26676: LD_ADDR_VAR 0 11
26680: PUSH
26681: LD_VAR 0 1
26685: PPUSH
26686: CALL_OW 476
26690: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26691: LD_ADDR_VAR 0 12
26695: PUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 477
26705: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26706: LD_ADDR_VAR 0 10
26710: PUSH
26711: LD_VAR 0 1
26715: PPUSH
26716: CALL_OW 478
26720: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26721: LD_VAR 0 9
26725: NOT
26726: PUSH
26727: LD_VAR 0 11
26731: NOT
26732: OR
26733: PUSH
26734: LD_VAR 0 12
26738: NOT
26739: OR
26740: PUSH
26741: LD_VAR 0 10
26745: NOT
26746: OR
26747: IFFALSE 26782
// begin result := [ chassis , engine , control , weapon ] ;
26749: LD_ADDR_VAR 0 6
26753: PUSH
26754: LD_VAR 0 2
26758: PUSH
26759: LD_VAR 0 3
26763: PUSH
26764: LD_VAR 0 4
26768: PUSH
26769: LD_VAR 0 5
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: ST_TO_ADDR
// exit ;
26780: GO 27073
// end ; if not chassis in _chassis then
26782: LD_VAR 0 2
26786: PUSH
26787: LD_VAR 0 9
26791: IN
26792: NOT
26793: IFFALSE 26819
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26795: LD_ADDR_VAR 0 2
26799: PUSH
26800: LD_VAR 0 9
26804: PUSH
26805: LD_INT 1
26807: PPUSH
26808: LD_VAR 0 9
26812: PPUSH
26813: CALL_OW 12
26817: ARRAY
26818: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26819: LD_VAR 0 2
26823: PPUSH
26824: LD_VAR 0 3
26828: PPUSH
26829: CALL 27078 0 2
26833: NOT
26834: IFFALSE 26893
// repeat engine := _engine [ 1 ] ;
26836: LD_ADDR_VAR 0 3
26840: PUSH
26841: LD_VAR 0 11
26845: PUSH
26846: LD_INT 1
26848: ARRAY
26849: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26850: LD_ADDR_VAR 0 11
26854: PUSH
26855: LD_VAR 0 11
26859: PPUSH
26860: LD_INT 1
26862: PPUSH
26863: CALL_OW 3
26867: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26868: LD_VAR 0 2
26872: PPUSH
26873: LD_VAR 0 3
26877: PPUSH
26878: CALL 27078 0 2
26882: PUSH
26883: LD_VAR 0 11
26887: PUSH
26888: EMPTY
26889: EQUAL
26890: OR
26891: IFFALSE 26836
// if not control in _control then
26893: LD_VAR 0 4
26897: PUSH
26898: LD_VAR 0 12
26902: IN
26903: NOT
26904: IFFALSE 26930
// control := _control [ rand ( 1 , _control ) ] ;
26906: LD_ADDR_VAR 0 4
26910: PUSH
26911: LD_VAR 0 12
26915: PUSH
26916: LD_INT 1
26918: PPUSH
26919: LD_VAR 0 12
26923: PPUSH
26924: CALL_OW 12
26928: ARRAY
26929: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26930: LD_VAR 0 2
26934: PPUSH
26935: LD_VAR 0 5
26939: PPUSH
26940: CALL 27298 0 2
26944: NOT
26945: IFFALSE 27004
// repeat weapon := _weapon [ 1 ] ;
26947: LD_ADDR_VAR 0 5
26951: PUSH
26952: LD_VAR 0 10
26956: PUSH
26957: LD_INT 1
26959: ARRAY
26960: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26961: LD_ADDR_VAR 0 10
26965: PUSH
26966: LD_VAR 0 10
26970: PPUSH
26971: LD_INT 1
26973: PPUSH
26974: CALL_OW 3
26978: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26979: LD_VAR 0 2
26983: PPUSH
26984: LD_VAR 0 5
26988: PPUSH
26989: CALL 27298 0 2
26993: PUSH
26994: LD_VAR 0 10
26998: PUSH
26999: EMPTY
27000: EQUAL
27001: OR
27002: IFFALSE 26947
// result := [ ] ;
27004: LD_ADDR_VAR 0 6
27008: PUSH
27009: EMPTY
27010: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27011: LD_VAR 0 1
27015: PPUSH
27016: LD_VAR 0 2
27020: PPUSH
27021: LD_VAR 0 3
27025: PPUSH
27026: LD_VAR 0 4
27030: PPUSH
27031: LD_VAR 0 5
27035: PPUSH
27036: CALL_OW 448
27040: IFFALSE 27073
// result := [ chassis , engine , control , weapon ] ;
27042: LD_ADDR_VAR 0 6
27046: PUSH
27047: LD_VAR 0 2
27051: PUSH
27052: LD_VAR 0 3
27056: PUSH
27057: LD_VAR 0 4
27061: PUSH
27062: LD_VAR 0 5
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: ST_TO_ADDR
// end ;
27073: LD_VAR 0 6
27077: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27078: LD_INT 0
27080: PPUSH
// if not chassis or not engine then
27081: LD_VAR 0 1
27085: NOT
27086: PUSH
27087: LD_VAR 0 2
27091: NOT
27092: OR
27093: IFFALSE 27097
// exit ;
27095: GO 27293
// case engine of engine_solar :
27097: LD_VAR 0 2
27101: PUSH
27102: LD_INT 2
27104: DOUBLE
27105: EQUAL
27106: IFTRUE 27110
27108: GO 27148
27110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27111: LD_ADDR_VAR 0 3
27115: PUSH
27116: LD_INT 11
27118: PUSH
27119: LD_INT 12
27121: PUSH
27122: LD_INT 13
27124: PUSH
27125: LD_INT 14
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: LD_INT 3
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: ST_TO_ADDR
27146: GO 27277
27148: LD_INT 1
27150: DOUBLE
27151: EQUAL
27152: IFTRUE 27156
27154: GO 27218
27156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27157: LD_ADDR_VAR 0 3
27161: PUSH
27162: LD_INT 11
27164: PUSH
27165: LD_INT 12
27167: PUSH
27168: LD_INT 13
27170: PUSH
27171: LD_INT 14
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: LD_INT 2
27179: PUSH
27180: LD_INT 3
27182: PUSH
27183: LD_INT 4
27185: PUSH
27186: LD_INT 5
27188: PUSH
27189: LD_INT 21
27191: PUSH
27192: LD_INT 23
27194: PUSH
27195: LD_INT 22
27197: PUSH
27198: LD_INT 24
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: ST_TO_ADDR
27216: GO 27277
27218: LD_INT 3
27220: DOUBLE
27221: EQUAL
27222: IFTRUE 27226
27224: GO 27276
27226: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27227: LD_ADDR_VAR 0 3
27231: PUSH
27232: LD_INT 13
27234: PUSH
27235: LD_INT 14
27237: PUSH
27238: LD_INT 2
27240: PUSH
27241: LD_INT 3
27243: PUSH
27244: LD_INT 4
27246: PUSH
27247: LD_INT 5
27249: PUSH
27250: LD_INT 21
27252: PUSH
27253: LD_INT 22
27255: PUSH
27256: LD_INT 23
27258: PUSH
27259: LD_INT 24
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
27274: GO 27277
27276: POP
// result := ( chassis in result ) ;
27277: LD_ADDR_VAR 0 3
27281: PUSH
27282: LD_VAR 0 1
27286: PUSH
27287: LD_VAR 0 3
27291: IN
27292: ST_TO_ADDR
// end ;
27293: LD_VAR 0 3
27297: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27298: LD_INT 0
27300: PPUSH
// if not chassis or not weapon then
27301: LD_VAR 0 1
27305: NOT
27306: PUSH
27307: LD_VAR 0 2
27311: NOT
27312: OR
27313: IFFALSE 27317
// exit ;
27315: GO 28343
// case weapon of us_machine_gun :
27317: LD_VAR 0 2
27321: PUSH
27322: LD_INT 2
27324: DOUBLE
27325: EQUAL
27326: IFTRUE 27330
27328: GO 27360
27330: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27331: LD_ADDR_VAR 0 3
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: LD_INT 3
27344: PUSH
27345: LD_INT 4
27347: PUSH
27348: LD_INT 5
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: ST_TO_ADDR
27358: GO 28327
27360: LD_INT 3
27362: DOUBLE
27363: EQUAL
27364: IFTRUE 27368
27366: GO 27398
27368: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27369: LD_ADDR_VAR 0 3
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 2
27379: PUSH
27380: LD_INT 3
27382: PUSH
27383: LD_INT 4
27385: PUSH
27386: LD_INT 5
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: ST_TO_ADDR
27396: GO 28327
27398: LD_INT 11
27400: DOUBLE
27401: EQUAL
27402: IFTRUE 27406
27404: GO 27436
27406: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27407: LD_ADDR_VAR 0 3
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 2
27417: PUSH
27418: LD_INT 3
27420: PUSH
27421: LD_INT 4
27423: PUSH
27424: LD_INT 5
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: ST_TO_ADDR
27434: GO 28327
27436: LD_INT 4
27438: DOUBLE
27439: EQUAL
27440: IFTRUE 27444
27442: GO 27470
27444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27445: LD_ADDR_VAR 0 3
27449: PUSH
27450: LD_INT 2
27452: PUSH
27453: LD_INT 3
27455: PUSH
27456: LD_INT 4
27458: PUSH
27459: LD_INT 5
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: ST_TO_ADDR
27468: GO 28327
27470: LD_INT 5
27472: DOUBLE
27473: EQUAL
27474: IFTRUE 27478
27476: GO 27504
27478: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27479: LD_ADDR_VAR 0 3
27483: PUSH
27484: LD_INT 2
27486: PUSH
27487: LD_INT 3
27489: PUSH
27490: LD_INT 4
27492: PUSH
27493: LD_INT 5
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: ST_TO_ADDR
27502: GO 28327
27504: LD_INT 9
27506: DOUBLE
27507: EQUAL
27508: IFTRUE 27512
27510: GO 27538
27512: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27513: LD_ADDR_VAR 0 3
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: LD_INT 3
27523: PUSH
27524: LD_INT 4
27526: PUSH
27527: LD_INT 5
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: ST_TO_ADDR
27536: GO 28327
27538: LD_INT 7
27540: DOUBLE
27541: EQUAL
27542: IFTRUE 27546
27544: GO 27572
27546: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27547: LD_ADDR_VAR 0 3
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 3
27557: PUSH
27558: LD_INT 4
27560: PUSH
27561: LD_INT 5
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: ST_TO_ADDR
27570: GO 28327
27572: LD_INT 12
27574: DOUBLE
27575: EQUAL
27576: IFTRUE 27580
27578: GO 27606
27580: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27581: LD_ADDR_VAR 0 3
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 3
27591: PUSH
27592: LD_INT 4
27594: PUSH
27595: LD_INT 5
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: ST_TO_ADDR
27604: GO 28327
27606: LD_INT 13
27608: DOUBLE
27609: EQUAL
27610: IFTRUE 27614
27612: GO 27640
27614: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27615: LD_ADDR_VAR 0 3
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: LD_INT 3
27625: PUSH
27626: LD_INT 4
27628: PUSH
27629: LD_INT 5
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: ST_TO_ADDR
27638: GO 28327
27640: LD_INT 14
27642: DOUBLE
27643: EQUAL
27644: IFTRUE 27648
27646: GO 27666
27648: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27649: LD_ADDR_VAR 0 3
27653: PUSH
27654: LD_INT 4
27656: PUSH
27657: LD_INT 5
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: ST_TO_ADDR
27664: GO 28327
27666: LD_INT 6
27668: DOUBLE
27669: EQUAL
27670: IFTRUE 27674
27672: GO 27692
27674: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27675: LD_ADDR_VAR 0 3
27679: PUSH
27680: LD_INT 4
27682: PUSH
27683: LD_INT 5
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: ST_TO_ADDR
27690: GO 28327
27692: LD_INT 10
27694: DOUBLE
27695: EQUAL
27696: IFTRUE 27700
27698: GO 27718
27700: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27701: LD_ADDR_VAR 0 3
27705: PUSH
27706: LD_INT 4
27708: PUSH
27709: LD_INT 5
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: ST_TO_ADDR
27716: GO 28327
27718: LD_INT 22
27720: DOUBLE
27721: EQUAL
27722: IFTRUE 27726
27724: GO 27752
27726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27727: LD_ADDR_VAR 0 3
27731: PUSH
27732: LD_INT 11
27734: PUSH
27735: LD_INT 12
27737: PUSH
27738: LD_INT 13
27740: PUSH
27741: LD_INT 14
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: ST_TO_ADDR
27750: GO 28327
27752: LD_INT 23
27754: DOUBLE
27755: EQUAL
27756: IFTRUE 27760
27758: GO 27786
27760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27761: LD_ADDR_VAR 0 3
27765: PUSH
27766: LD_INT 11
27768: PUSH
27769: LD_INT 12
27771: PUSH
27772: LD_INT 13
27774: PUSH
27775: LD_INT 14
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: ST_TO_ADDR
27784: GO 28327
27786: LD_INT 24
27788: DOUBLE
27789: EQUAL
27790: IFTRUE 27794
27792: GO 27820
27794: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27795: LD_ADDR_VAR 0 3
27799: PUSH
27800: LD_INT 11
27802: PUSH
27803: LD_INT 12
27805: PUSH
27806: LD_INT 13
27808: PUSH
27809: LD_INT 14
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: ST_TO_ADDR
27818: GO 28327
27820: LD_INT 30
27822: DOUBLE
27823: EQUAL
27824: IFTRUE 27828
27826: GO 27854
27828: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27829: LD_ADDR_VAR 0 3
27833: PUSH
27834: LD_INT 11
27836: PUSH
27837: LD_INT 12
27839: PUSH
27840: LD_INT 13
27842: PUSH
27843: LD_INT 14
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: ST_TO_ADDR
27852: GO 28327
27854: LD_INT 25
27856: DOUBLE
27857: EQUAL
27858: IFTRUE 27862
27860: GO 27880
27862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27863: LD_ADDR_VAR 0 3
27867: PUSH
27868: LD_INT 13
27870: PUSH
27871: LD_INT 14
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: ST_TO_ADDR
27878: GO 28327
27880: LD_INT 27
27882: DOUBLE
27883: EQUAL
27884: IFTRUE 27888
27886: GO 27906
27888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27889: LD_ADDR_VAR 0 3
27893: PUSH
27894: LD_INT 13
27896: PUSH
27897: LD_INT 14
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: ST_TO_ADDR
27904: GO 28327
27906: LD_INT 28
27908: DOUBLE
27909: EQUAL
27910: IFTRUE 27914
27912: GO 27932
27914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27915: LD_ADDR_VAR 0 3
27919: PUSH
27920: LD_INT 13
27922: PUSH
27923: LD_INT 14
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: ST_TO_ADDR
27930: GO 28327
27932: LD_INT 29
27934: DOUBLE
27935: EQUAL
27936: IFTRUE 27940
27938: GO 27958
27940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27941: LD_ADDR_VAR 0 3
27945: PUSH
27946: LD_INT 13
27948: PUSH
27949: LD_INT 14
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: ST_TO_ADDR
27956: GO 28327
27958: LD_INT 31
27960: DOUBLE
27961: EQUAL
27962: IFTRUE 27966
27964: GO 27984
27966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27967: LD_ADDR_VAR 0 3
27971: PUSH
27972: LD_INT 13
27974: PUSH
27975: LD_INT 14
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: ST_TO_ADDR
27982: GO 28327
27984: LD_INT 26
27986: DOUBLE
27987: EQUAL
27988: IFTRUE 27992
27990: GO 28010
27992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27993: LD_ADDR_VAR 0 3
27997: PUSH
27998: LD_INT 13
28000: PUSH
28001: LD_INT 14
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: ST_TO_ADDR
28008: GO 28327
28010: LD_INT 42
28012: DOUBLE
28013: EQUAL
28014: IFTRUE 28018
28016: GO 28044
28018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_INT 21
28026: PUSH
28027: LD_INT 22
28029: PUSH
28030: LD_INT 23
28032: PUSH
28033: LD_INT 24
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: ST_TO_ADDR
28042: GO 28327
28044: LD_INT 43
28046: DOUBLE
28047: EQUAL
28048: IFTRUE 28052
28050: GO 28078
28052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28053: LD_ADDR_VAR 0 3
28057: PUSH
28058: LD_INT 21
28060: PUSH
28061: LD_INT 22
28063: PUSH
28064: LD_INT 23
28066: PUSH
28067: LD_INT 24
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: ST_TO_ADDR
28076: GO 28327
28078: LD_INT 44
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28086
28084: GO 28112
28086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28087: LD_ADDR_VAR 0 3
28091: PUSH
28092: LD_INT 21
28094: PUSH
28095: LD_INT 22
28097: PUSH
28098: LD_INT 23
28100: PUSH
28101: LD_INT 24
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: ST_TO_ADDR
28110: GO 28327
28112: LD_INT 45
28114: DOUBLE
28115: EQUAL
28116: IFTRUE 28120
28118: GO 28146
28120: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28121: LD_ADDR_VAR 0 3
28125: PUSH
28126: LD_INT 21
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_INT 23
28134: PUSH
28135: LD_INT 24
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: ST_TO_ADDR
28144: GO 28327
28146: LD_INT 49
28148: DOUBLE
28149: EQUAL
28150: IFTRUE 28154
28152: GO 28180
28154: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28155: LD_ADDR_VAR 0 3
28159: PUSH
28160: LD_INT 21
28162: PUSH
28163: LD_INT 22
28165: PUSH
28166: LD_INT 23
28168: PUSH
28169: LD_INT 24
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: ST_TO_ADDR
28178: GO 28327
28180: LD_INT 51
28182: DOUBLE
28183: EQUAL
28184: IFTRUE 28188
28186: GO 28214
28188: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28189: LD_ADDR_VAR 0 3
28193: PUSH
28194: LD_INT 21
28196: PUSH
28197: LD_INT 22
28199: PUSH
28200: LD_INT 23
28202: PUSH
28203: LD_INT 24
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: ST_TO_ADDR
28212: GO 28327
28214: LD_INT 52
28216: DOUBLE
28217: EQUAL
28218: IFTRUE 28222
28220: GO 28248
28222: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28223: LD_ADDR_VAR 0 3
28227: PUSH
28228: LD_INT 21
28230: PUSH
28231: LD_INT 22
28233: PUSH
28234: LD_INT 23
28236: PUSH
28237: LD_INT 24
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: ST_TO_ADDR
28246: GO 28327
28248: LD_INT 53
28250: DOUBLE
28251: EQUAL
28252: IFTRUE 28256
28254: GO 28274
28256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28257: LD_ADDR_VAR 0 3
28261: PUSH
28262: LD_INT 23
28264: PUSH
28265: LD_INT 24
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: ST_TO_ADDR
28272: GO 28327
28274: LD_INT 46
28276: DOUBLE
28277: EQUAL
28278: IFTRUE 28282
28280: GO 28300
28282: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28283: LD_ADDR_VAR 0 3
28287: PUSH
28288: LD_INT 23
28290: PUSH
28291: LD_INT 24
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: ST_TO_ADDR
28298: GO 28327
28300: LD_INT 47
28302: DOUBLE
28303: EQUAL
28304: IFTRUE 28308
28306: GO 28326
28308: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28309: LD_ADDR_VAR 0 3
28313: PUSH
28314: LD_INT 23
28316: PUSH
28317: LD_INT 24
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: ST_TO_ADDR
28324: GO 28327
28326: POP
// result := ( chassis in result ) ;
28327: LD_ADDR_VAR 0 3
28331: PUSH
28332: LD_VAR 0 1
28336: PUSH
28337: LD_VAR 0 3
28341: IN
28342: ST_TO_ADDR
// end ;
28343: LD_VAR 0 3
28347: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28348: LD_INT 0
28350: PPUSH
28351: PPUSH
28352: PPUSH
28353: PPUSH
28354: PPUSH
28355: PPUSH
28356: PPUSH
// result := array ;
28357: LD_ADDR_VAR 0 5
28361: PUSH
28362: LD_VAR 0 1
28366: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28367: LD_VAR 0 1
28371: NOT
28372: PUSH
28373: LD_VAR 0 2
28377: NOT
28378: OR
28379: PUSH
28380: LD_VAR 0 3
28384: NOT
28385: OR
28386: PUSH
28387: LD_VAR 0 2
28391: PUSH
28392: LD_VAR 0 1
28396: GREATER
28397: OR
28398: PUSH
28399: LD_VAR 0 3
28403: PUSH
28404: LD_VAR 0 1
28408: GREATER
28409: OR
28410: IFFALSE 28414
// exit ;
28412: GO 28710
// if direction then
28414: LD_VAR 0 4
28418: IFFALSE 28482
// begin d := 1 ;
28420: LD_ADDR_VAR 0 9
28424: PUSH
28425: LD_INT 1
28427: ST_TO_ADDR
// if i_from > i_to then
28428: LD_VAR 0 2
28432: PUSH
28433: LD_VAR 0 3
28437: GREATER
28438: IFFALSE 28464
// length := ( array - i_from ) + i_to else
28440: LD_ADDR_VAR 0 11
28444: PUSH
28445: LD_VAR 0 1
28449: PUSH
28450: LD_VAR 0 2
28454: MINUS
28455: PUSH
28456: LD_VAR 0 3
28460: PLUS
28461: ST_TO_ADDR
28462: GO 28480
// length := i_to - i_from ;
28464: LD_ADDR_VAR 0 11
28468: PUSH
28469: LD_VAR 0 3
28473: PUSH
28474: LD_VAR 0 2
28478: MINUS
28479: ST_TO_ADDR
// end else
28480: GO 28543
// begin d := - 1 ;
28482: LD_ADDR_VAR 0 9
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: ST_TO_ADDR
// if i_from > i_to then
28491: LD_VAR 0 2
28495: PUSH
28496: LD_VAR 0 3
28500: GREATER
28501: IFFALSE 28521
// length := i_from - i_to else
28503: LD_ADDR_VAR 0 11
28507: PUSH
28508: LD_VAR 0 2
28512: PUSH
28513: LD_VAR 0 3
28517: MINUS
28518: ST_TO_ADDR
28519: GO 28543
// length := ( array - i_to ) + i_from ;
28521: LD_ADDR_VAR 0 11
28525: PUSH
28526: LD_VAR 0 1
28530: PUSH
28531: LD_VAR 0 3
28535: MINUS
28536: PUSH
28537: LD_VAR 0 2
28541: PLUS
28542: ST_TO_ADDR
// end ; if not length then
28543: LD_VAR 0 11
28547: NOT
28548: IFFALSE 28552
// exit ;
28550: GO 28710
// tmp := array ;
28552: LD_ADDR_VAR 0 10
28556: PUSH
28557: LD_VAR 0 1
28561: ST_TO_ADDR
// for i = 1 to length do
28562: LD_ADDR_VAR 0 6
28566: PUSH
28567: DOUBLE
28568: LD_INT 1
28570: DEC
28571: ST_TO_ADDR
28572: LD_VAR 0 11
28576: PUSH
28577: FOR_TO
28578: IFFALSE 28698
// begin for j = 1 to array do
28580: LD_ADDR_VAR 0 7
28584: PUSH
28585: DOUBLE
28586: LD_INT 1
28588: DEC
28589: ST_TO_ADDR
28590: LD_VAR 0 1
28594: PUSH
28595: FOR_TO
28596: IFFALSE 28684
// begin k := j + d ;
28598: LD_ADDR_VAR 0 8
28602: PUSH
28603: LD_VAR 0 7
28607: PUSH
28608: LD_VAR 0 9
28612: PLUS
28613: ST_TO_ADDR
// if k > array then
28614: LD_VAR 0 8
28618: PUSH
28619: LD_VAR 0 1
28623: GREATER
28624: IFFALSE 28634
// k := 1 ;
28626: LD_ADDR_VAR 0 8
28630: PUSH
28631: LD_INT 1
28633: ST_TO_ADDR
// if not k then
28634: LD_VAR 0 8
28638: NOT
28639: IFFALSE 28651
// k := array ;
28641: LD_ADDR_VAR 0 8
28645: PUSH
28646: LD_VAR 0 1
28650: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28651: LD_ADDR_VAR 0 10
28655: PUSH
28656: LD_VAR 0 10
28660: PPUSH
28661: LD_VAR 0 8
28665: PPUSH
28666: LD_VAR 0 1
28670: PUSH
28671: LD_VAR 0 7
28675: ARRAY
28676: PPUSH
28677: CALL_OW 1
28681: ST_TO_ADDR
// end ;
28682: GO 28595
28684: POP
28685: POP
// array := tmp ;
28686: LD_ADDR_VAR 0 1
28690: PUSH
28691: LD_VAR 0 10
28695: ST_TO_ADDR
// end ;
28696: GO 28577
28698: POP
28699: POP
// result := array ;
28700: LD_ADDR_VAR 0 5
28704: PUSH
28705: LD_VAR 0 1
28709: ST_TO_ADDR
// end ;
28710: LD_VAR 0 5
28714: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28715: LD_INT 0
28717: PPUSH
28718: PPUSH
// result := 0 ;
28719: LD_ADDR_VAR 0 3
28723: PUSH
28724: LD_INT 0
28726: ST_TO_ADDR
// if not array or not value in array then
28727: LD_VAR 0 1
28731: NOT
28732: PUSH
28733: LD_VAR 0 2
28737: PUSH
28738: LD_VAR 0 1
28742: IN
28743: NOT
28744: OR
28745: IFFALSE 28749
// exit ;
28747: GO 28803
// for i = 1 to array do
28749: LD_ADDR_VAR 0 4
28753: PUSH
28754: DOUBLE
28755: LD_INT 1
28757: DEC
28758: ST_TO_ADDR
28759: LD_VAR 0 1
28763: PUSH
28764: FOR_TO
28765: IFFALSE 28801
// if value = array [ i ] then
28767: LD_VAR 0 2
28771: PUSH
28772: LD_VAR 0 1
28776: PUSH
28777: LD_VAR 0 4
28781: ARRAY
28782: EQUAL
28783: IFFALSE 28799
// begin result := i ;
28785: LD_ADDR_VAR 0 3
28789: PUSH
28790: LD_VAR 0 4
28794: ST_TO_ADDR
// exit ;
28795: POP
28796: POP
28797: GO 28803
// end ;
28799: GO 28764
28801: POP
28802: POP
// end ;
28803: LD_VAR 0 3
28807: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28808: LD_INT 0
28810: PPUSH
// vc_chassis := chassis ;
28811: LD_ADDR_OWVAR 37
28815: PUSH
28816: LD_VAR 0 1
28820: ST_TO_ADDR
// vc_engine := engine ;
28821: LD_ADDR_OWVAR 39
28825: PUSH
28826: LD_VAR 0 2
28830: ST_TO_ADDR
// vc_control := control ;
28831: LD_ADDR_OWVAR 38
28835: PUSH
28836: LD_VAR 0 3
28840: ST_TO_ADDR
// vc_weapon := weapon ;
28841: LD_ADDR_OWVAR 40
28845: PUSH
28846: LD_VAR 0 4
28850: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28851: LD_ADDR_OWVAR 41
28855: PUSH
28856: LD_VAR 0 5
28860: ST_TO_ADDR
// end ;
28861: LD_VAR 0 6
28865: RET
// export function WantPlant ( unit ) ; var task ; begin
28866: LD_INT 0
28868: PPUSH
28869: PPUSH
// result := false ;
28870: LD_ADDR_VAR 0 2
28874: PUSH
28875: LD_INT 0
28877: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28878: LD_ADDR_VAR 0 3
28882: PUSH
28883: LD_VAR 0 1
28887: PPUSH
28888: CALL_OW 437
28892: ST_TO_ADDR
// if task then
28893: LD_VAR 0 3
28897: IFFALSE 28925
// if task [ 1 ] [ 1 ] = p then
28899: LD_VAR 0 3
28903: PUSH
28904: LD_INT 1
28906: ARRAY
28907: PUSH
28908: LD_INT 1
28910: ARRAY
28911: PUSH
28912: LD_STRING p
28914: EQUAL
28915: IFFALSE 28925
// result := true ;
28917: LD_ADDR_VAR 0 2
28921: PUSH
28922: LD_INT 1
28924: ST_TO_ADDR
// end ;
28925: LD_VAR 0 2
28929: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28930: LD_INT 0
28932: PPUSH
28933: PPUSH
28934: PPUSH
28935: PPUSH
// if pos < 1 then
28936: LD_VAR 0 2
28940: PUSH
28941: LD_INT 1
28943: LESS
28944: IFFALSE 28948
// exit ;
28946: GO 29251
// if pos = 1 then
28948: LD_VAR 0 2
28952: PUSH
28953: LD_INT 1
28955: EQUAL
28956: IFFALSE 28989
// result := Replace ( arr , pos [ 1 ] , value ) else
28958: LD_ADDR_VAR 0 4
28962: PUSH
28963: LD_VAR 0 1
28967: PPUSH
28968: LD_VAR 0 2
28972: PUSH
28973: LD_INT 1
28975: ARRAY
28976: PPUSH
28977: LD_VAR 0 3
28981: PPUSH
28982: CALL_OW 1
28986: ST_TO_ADDR
28987: GO 29251
// begin tmp := arr ;
28989: LD_ADDR_VAR 0 6
28993: PUSH
28994: LD_VAR 0 1
28998: ST_TO_ADDR
// s_arr := [ tmp ] ;
28999: LD_ADDR_VAR 0 7
29003: PUSH
29004: LD_VAR 0 6
29008: PUSH
29009: EMPTY
29010: LIST
29011: ST_TO_ADDR
// for i = 1 to pos - 1 do
29012: LD_ADDR_VAR 0 5
29016: PUSH
29017: DOUBLE
29018: LD_INT 1
29020: DEC
29021: ST_TO_ADDR
29022: LD_VAR 0 2
29026: PUSH
29027: LD_INT 1
29029: MINUS
29030: PUSH
29031: FOR_TO
29032: IFFALSE 29077
// begin tmp := tmp [ pos [ i ] ] ;
29034: LD_ADDR_VAR 0 6
29038: PUSH
29039: LD_VAR 0 6
29043: PUSH
29044: LD_VAR 0 2
29048: PUSH
29049: LD_VAR 0 5
29053: ARRAY
29054: ARRAY
29055: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29056: LD_ADDR_VAR 0 7
29060: PUSH
29061: LD_VAR 0 7
29065: PUSH
29066: LD_VAR 0 6
29070: PUSH
29071: EMPTY
29072: LIST
29073: ADD
29074: ST_TO_ADDR
// end ;
29075: GO 29031
29077: POP
29078: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29079: LD_ADDR_VAR 0 6
29083: PUSH
29084: LD_VAR 0 6
29088: PPUSH
29089: LD_VAR 0 2
29093: PUSH
29094: LD_VAR 0 2
29098: ARRAY
29099: PPUSH
29100: LD_VAR 0 3
29104: PPUSH
29105: CALL_OW 1
29109: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29110: LD_ADDR_VAR 0 7
29114: PUSH
29115: LD_VAR 0 7
29119: PPUSH
29120: LD_VAR 0 7
29124: PPUSH
29125: LD_VAR 0 6
29129: PPUSH
29130: CALL_OW 1
29134: ST_TO_ADDR
// for i = s_arr downto 2 do
29135: LD_ADDR_VAR 0 5
29139: PUSH
29140: DOUBLE
29141: LD_VAR 0 7
29145: INC
29146: ST_TO_ADDR
29147: LD_INT 2
29149: PUSH
29150: FOR_DOWNTO
29151: IFFALSE 29235
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29153: LD_ADDR_VAR 0 6
29157: PUSH
29158: LD_VAR 0 7
29162: PUSH
29163: LD_VAR 0 5
29167: PUSH
29168: LD_INT 1
29170: MINUS
29171: ARRAY
29172: PPUSH
29173: LD_VAR 0 2
29177: PUSH
29178: LD_VAR 0 5
29182: PUSH
29183: LD_INT 1
29185: MINUS
29186: ARRAY
29187: PPUSH
29188: LD_VAR 0 7
29192: PUSH
29193: LD_VAR 0 5
29197: ARRAY
29198: PPUSH
29199: CALL_OW 1
29203: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29204: LD_ADDR_VAR 0 7
29208: PUSH
29209: LD_VAR 0 7
29213: PPUSH
29214: LD_VAR 0 5
29218: PUSH
29219: LD_INT 1
29221: MINUS
29222: PPUSH
29223: LD_VAR 0 6
29227: PPUSH
29228: CALL_OW 1
29232: ST_TO_ADDR
// end ;
29233: GO 29150
29235: POP
29236: POP
// result := s_arr [ 1 ] ;
29237: LD_ADDR_VAR 0 4
29241: PUSH
29242: LD_VAR 0 7
29246: PUSH
29247: LD_INT 1
29249: ARRAY
29250: ST_TO_ADDR
// end ; end ;
29251: LD_VAR 0 4
29255: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29256: LD_INT 0
29258: PPUSH
29259: PPUSH
// if not list then
29260: LD_VAR 0 1
29264: NOT
29265: IFFALSE 29269
// exit ;
29267: GO 29360
// i := list [ pos1 ] ;
29269: LD_ADDR_VAR 0 5
29273: PUSH
29274: LD_VAR 0 1
29278: PUSH
29279: LD_VAR 0 2
29283: ARRAY
29284: ST_TO_ADDR
// if not i then
29285: LD_VAR 0 5
29289: NOT
29290: IFFALSE 29294
// exit ;
29292: GO 29360
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29294: LD_ADDR_VAR 0 1
29298: PUSH
29299: LD_VAR 0 1
29303: PPUSH
29304: LD_VAR 0 2
29308: PPUSH
29309: LD_VAR 0 1
29313: PUSH
29314: LD_VAR 0 3
29318: ARRAY
29319: PPUSH
29320: CALL_OW 1
29324: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29325: LD_ADDR_VAR 0 1
29329: PUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: LD_VAR 0 3
29339: PPUSH
29340: LD_VAR 0 5
29344: PPUSH
29345: CALL_OW 1
29349: ST_TO_ADDR
// result := list ;
29350: LD_ADDR_VAR 0 4
29354: PUSH
29355: LD_VAR 0 1
29359: ST_TO_ADDR
// end ;
29360: LD_VAR 0 4
29364: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29365: LD_INT 0
29367: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29368: LD_ADDR_VAR 0 5
29372: PUSH
29373: LD_VAR 0 1
29377: PPUSH
29378: CALL_OW 250
29382: PPUSH
29383: LD_VAR 0 1
29387: PPUSH
29388: CALL_OW 251
29392: PPUSH
29393: LD_VAR 0 2
29397: PPUSH
29398: LD_VAR 0 3
29402: PPUSH
29403: LD_VAR 0 4
29407: PPUSH
29408: CALL 29418 0 5
29412: ST_TO_ADDR
// end ;
29413: LD_VAR 0 5
29417: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29418: LD_INT 0
29420: PPUSH
29421: PPUSH
29422: PPUSH
29423: PPUSH
// if not list then
29424: LD_VAR 0 3
29428: NOT
29429: IFFALSE 29433
// exit ;
29431: GO 29821
// result := [ ] ;
29433: LD_ADDR_VAR 0 6
29437: PUSH
29438: EMPTY
29439: ST_TO_ADDR
// for i in list do
29440: LD_ADDR_VAR 0 7
29444: PUSH
29445: LD_VAR 0 3
29449: PUSH
29450: FOR_IN
29451: IFFALSE 29653
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29453: LD_ADDR_VAR 0 9
29457: PUSH
29458: LD_VAR 0 7
29462: PPUSH
29463: LD_VAR 0 1
29467: PPUSH
29468: LD_VAR 0 2
29472: PPUSH
29473: CALL_OW 297
29477: ST_TO_ADDR
// if not result then
29478: LD_VAR 0 6
29482: NOT
29483: IFFALSE 29509
// result := [ [ i , tmp ] ] else
29485: LD_ADDR_VAR 0 6
29489: PUSH
29490: LD_VAR 0 7
29494: PUSH
29495: LD_VAR 0 9
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: EMPTY
29505: LIST
29506: ST_TO_ADDR
29507: GO 29651
// begin if result [ result ] [ 2 ] < tmp then
29509: LD_VAR 0 6
29513: PUSH
29514: LD_VAR 0 6
29518: ARRAY
29519: PUSH
29520: LD_INT 2
29522: ARRAY
29523: PUSH
29524: LD_VAR 0 9
29528: LESS
29529: IFFALSE 29571
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29531: LD_ADDR_VAR 0 6
29535: PUSH
29536: LD_VAR 0 6
29540: PPUSH
29541: LD_VAR 0 6
29545: PUSH
29546: LD_INT 1
29548: PLUS
29549: PPUSH
29550: LD_VAR 0 7
29554: PUSH
29555: LD_VAR 0 9
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PPUSH
29564: CALL_OW 2
29568: ST_TO_ADDR
29569: GO 29651
// for j = 1 to result do
29571: LD_ADDR_VAR 0 8
29575: PUSH
29576: DOUBLE
29577: LD_INT 1
29579: DEC
29580: ST_TO_ADDR
29581: LD_VAR 0 6
29585: PUSH
29586: FOR_TO
29587: IFFALSE 29649
// begin if tmp < result [ j ] [ 2 ] then
29589: LD_VAR 0 9
29593: PUSH
29594: LD_VAR 0 6
29598: PUSH
29599: LD_VAR 0 8
29603: ARRAY
29604: PUSH
29605: LD_INT 2
29607: ARRAY
29608: LESS
29609: IFFALSE 29647
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29611: LD_ADDR_VAR 0 6
29615: PUSH
29616: LD_VAR 0 6
29620: PPUSH
29621: LD_VAR 0 8
29625: PPUSH
29626: LD_VAR 0 7
29630: PUSH
29631: LD_VAR 0 9
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PPUSH
29640: CALL_OW 2
29644: ST_TO_ADDR
// break ;
29645: GO 29649
// end ; end ;
29647: GO 29586
29649: POP
29650: POP
// end ; end ;
29651: GO 29450
29653: POP
29654: POP
// if result and not asc then
29655: LD_VAR 0 6
29659: PUSH
29660: LD_VAR 0 4
29664: NOT
29665: AND
29666: IFFALSE 29741
// begin tmp := result ;
29668: LD_ADDR_VAR 0 9
29672: PUSH
29673: LD_VAR 0 6
29677: ST_TO_ADDR
// for i = tmp downto 1 do
29678: LD_ADDR_VAR 0 7
29682: PUSH
29683: DOUBLE
29684: LD_VAR 0 9
29688: INC
29689: ST_TO_ADDR
29690: LD_INT 1
29692: PUSH
29693: FOR_DOWNTO
29694: IFFALSE 29739
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29696: LD_ADDR_VAR 0 6
29700: PUSH
29701: LD_VAR 0 6
29705: PPUSH
29706: LD_VAR 0 9
29710: PUSH
29711: LD_VAR 0 7
29715: MINUS
29716: PUSH
29717: LD_INT 1
29719: PLUS
29720: PPUSH
29721: LD_VAR 0 9
29725: PUSH
29726: LD_VAR 0 7
29730: ARRAY
29731: PPUSH
29732: CALL_OW 1
29736: ST_TO_ADDR
29737: GO 29693
29739: POP
29740: POP
// end ; tmp := [ ] ;
29741: LD_ADDR_VAR 0 9
29745: PUSH
29746: EMPTY
29747: ST_TO_ADDR
// if mode then
29748: LD_VAR 0 5
29752: IFFALSE 29821
// begin for i = 1 to result do
29754: LD_ADDR_VAR 0 7
29758: PUSH
29759: DOUBLE
29760: LD_INT 1
29762: DEC
29763: ST_TO_ADDR
29764: LD_VAR 0 6
29768: PUSH
29769: FOR_TO
29770: IFFALSE 29809
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29772: LD_ADDR_VAR 0 9
29776: PUSH
29777: LD_VAR 0 9
29781: PPUSH
29782: LD_VAR 0 7
29786: PPUSH
29787: LD_VAR 0 6
29791: PUSH
29792: LD_VAR 0 7
29796: ARRAY
29797: PUSH
29798: LD_INT 1
29800: ARRAY
29801: PPUSH
29802: CALL_OW 1
29806: ST_TO_ADDR
29807: GO 29769
29809: POP
29810: POP
// result := tmp ;
29811: LD_ADDR_VAR 0 6
29815: PUSH
29816: LD_VAR 0 9
29820: ST_TO_ADDR
// end ; end ;
29821: LD_VAR 0 6
29825: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29826: LD_INT 0
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29834: LD_ADDR_VAR 0 5
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 0
29847: PUSH
29848: EMPTY
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: ST_TO_ADDR
// if not x or not y then
29856: LD_VAR 0 2
29860: NOT
29861: PUSH
29862: LD_VAR 0 3
29866: NOT
29867: OR
29868: IFFALSE 29872
// exit ;
29870: GO 31518
// if not range then
29872: LD_VAR 0 4
29876: NOT
29877: IFFALSE 29887
// range := 10 ;
29879: LD_ADDR_VAR 0 4
29883: PUSH
29884: LD_INT 10
29886: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29887: LD_ADDR_VAR 0 8
29891: PUSH
29892: LD_INT 81
29894: PUSH
29895: LD_VAR 0 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 92
29906: PUSH
29907: LD_VAR 0 2
29911: PUSH
29912: LD_VAR 0 3
29916: PUSH
29917: LD_VAR 0 4
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 3
29930: PUSH
29931: LD_INT 21
29933: PUSH
29934: LD_INT 3
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: PPUSH
29950: CALL_OW 69
29954: ST_TO_ADDR
// if not tmp then
29955: LD_VAR 0 8
29959: NOT
29960: IFFALSE 29964
// exit ;
29962: GO 31518
// for i in tmp do
29964: LD_ADDR_VAR 0 6
29968: PUSH
29969: LD_VAR 0 8
29973: PUSH
29974: FOR_IN
29975: IFFALSE 31493
// begin points := [ 0 , 0 , 0 ] ;
29977: LD_ADDR_VAR 0 9
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: LIST
29995: ST_TO_ADDR
// bpoints := 1 ;
29996: LD_ADDR_VAR 0 10
30000: PUSH
30001: LD_INT 1
30003: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30004: LD_VAR 0 6
30008: PPUSH
30009: CALL_OW 247
30013: PUSH
30014: LD_INT 1
30016: DOUBLE
30017: EQUAL
30018: IFTRUE 30022
30020: GO 30600
30022: POP
// begin if GetClass ( i ) = 1 then
30023: LD_VAR 0 6
30027: PPUSH
30028: CALL_OW 257
30032: PUSH
30033: LD_INT 1
30035: EQUAL
30036: IFFALSE 30057
// points := [ 10 , 5 , 3 ] ;
30038: LD_ADDR_VAR 0 9
30042: PUSH
30043: LD_INT 10
30045: PUSH
30046: LD_INT 5
30048: PUSH
30049: LD_INT 3
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30057: LD_VAR 0 6
30061: PPUSH
30062: CALL_OW 257
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: LD_INT 4
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: IN
30081: IFFALSE 30102
// points := [ 3 , 2 , 1 ] ;
30083: LD_ADDR_VAR 0 9
30087: PUSH
30088: LD_INT 3
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: LIST
30101: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30102: LD_VAR 0 6
30106: PPUSH
30107: CALL_OW 257
30111: PUSH
30112: LD_INT 5
30114: EQUAL
30115: IFFALSE 30136
// points := [ 130 , 5 , 2 ] ;
30117: LD_ADDR_VAR 0 9
30121: PUSH
30122: LD_INT 130
30124: PUSH
30125: LD_INT 5
30127: PUSH
30128: LD_INT 2
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30136: LD_VAR 0 6
30140: PPUSH
30141: CALL_OW 257
30145: PUSH
30146: LD_INT 8
30148: EQUAL
30149: IFFALSE 30170
// points := [ 35 , 35 , 30 ] ;
30151: LD_ADDR_VAR 0 9
30155: PUSH
30156: LD_INT 35
30158: PUSH
30159: LD_INT 35
30161: PUSH
30162: LD_INT 30
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30170: LD_VAR 0 6
30174: PPUSH
30175: CALL_OW 257
30179: PUSH
30180: LD_INT 9
30182: EQUAL
30183: IFFALSE 30204
// points := [ 20 , 55 , 40 ] ;
30185: LD_ADDR_VAR 0 9
30189: PUSH
30190: LD_INT 20
30192: PUSH
30193: LD_INT 55
30195: PUSH
30196: LD_INT 40
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: LIST
30203: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30204: LD_VAR 0 6
30208: PPUSH
30209: CALL_OW 257
30213: PUSH
30214: LD_INT 12
30216: PUSH
30217: LD_INT 16
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: IN
30224: IFFALSE 30245
// points := [ 5 , 3 , 2 ] ;
30226: LD_ADDR_VAR 0 9
30230: PUSH
30231: LD_INT 5
30233: PUSH
30234: LD_INT 3
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30245: LD_VAR 0 6
30249: PPUSH
30250: CALL_OW 257
30254: PUSH
30255: LD_INT 17
30257: EQUAL
30258: IFFALSE 30279
// points := [ 100 , 50 , 75 ] ;
30260: LD_ADDR_VAR 0 9
30264: PUSH
30265: LD_INT 100
30267: PUSH
30268: LD_INT 50
30270: PUSH
30271: LD_INT 75
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: LIST
30278: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30279: LD_VAR 0 6
30283: PPUSH
30284: CALL_OW 257
30288: PUSH
30289: LD_INT 15
30291: EQUAL
30292: IFFALSE 30313
// points := [ 10 , 5 , 3 ] ;
30294: LD_ADDR_VAR 0 9
30298: PUSH
30299: LD_INT 10
30301: PUSH
30302: LD_INT 5
30304: PUSH
30305: LD_INT 3
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30313: LD_VAR 0 6
30317: PPUSH
30318: CALL_OW 257
30322: PUSH
30323: LD_INT 14
30325: EQUAL
30326: IFFALSE 30347
// points := [ 10 , 0 , 0 ] ;
30328: LD_ADDR_VAR 0 9
30332: PUSH
30333: LD_INT 10
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: LD_INT 0
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30347: LD_VAR 0 6
30351: PPUSH
30352: CALL_OW 257
30356: PUSH
30357: LD_INT 11
30359: EQUAL
30360: IFFALSE 30381
// points := [ 30 , 10 , 5 ] ;
30362: LD_ADDR_VAR 0 9
30366: PUSH
30367: LD_INT 30
30369: PUSH
30370: LD_INT 10
30372: PUSH
30373: LD_INT 5
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30381: LD_VAR 0 1
30385: PPUSH
30386: LD_INT 5
30388: PPUSH
30389: CALL_OW 321
30393: PUSH
30394: LD_INT 2
30396: EQUAL
30397: IFFALSE 30414
// bpoints := bpoints * 1.8 ;
30399: LD_ADDR_VAR 0 10
30403: PUSH
30404: LD_VAR 0 10
30408: PUSH
30409: LD_REAL  1.80000000000000E+0000
30412: MUL
30413: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30414: LD_VAR 0 6
30418: PPUSH
30419: CALL_OW 257
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: LD_INT 4
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: IN
30442: PUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: LD_INT 51
30450: PPUSH
30451: CALL_OW 321
30455: PUSH
30456: LD_INT 2
30458: EQUAL
30459: AND
30460: IFFALSE 30477
// bpoints := bpoints * 1.2 ;
30462: LD_ADDR_VAR 0 10
30466: PUSH
30467: LD_VAR 0 10
30471: PUSH
30472: LD_REAL  1.20000000000000E+0000
30475: MUL
30476: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30477: LD_VAR 0 6
30481: PPUSH
30482: CALL_OW 257
30486: PUSH
30487: LD_INT 5
30489: PUSH
30490: LD_INT 7
30492: PUSH
30493: LD_INT 9
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: IN
30501: PUSH
30502: LD_VAR 0 1
30506: PPUSH
30507: LD_INT 52
30509: PPUSH
30510: CALL_OW 321
30514: PUSH
30515: LD_INT 2
30517: EQUAL
30518: AND
30519: IFFALSE 30536
// bpoints := bpoints * 1.5 ;
30521: LD_ADDR_VAR 0 10
30525: PUSH
30526: LD_VAR 0 10
30530: PUSH
30531: LD_REAL  1.50000000000000E+0000
30534: MUL
30535: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30536: LD_VAR 0 1
30540: PPUSH
30541: LD_INT 66
30543: PPUSH
30544: CALL_OW 321
30548: PUSH
30549: LD_INT 2
30551: EQUAL
30552: IFFALSE 30569
// bpoints := bpoints * 1.1 ;
30554: LD_ADDR_VAR 0 10
30558: PUSH
30559: LD_VAR 0 10
30563: PUSH
30564: LD_REAL  1.10000000000000E+0000
30567: MUL
30568: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30569: LD_ADDR_VAR 0 10
30573: PUSH
30574: LD_VAR 0 10
30578: PUSH
30579: LD_VAR 0 6
30583: PPUSH
30584: LD_INT 1
30586: PPUSH
30587: CALL_OW 259
30591: PUSH
30592: LD_REAL  1.15000000000000E+0000
30595: MUL
30596: MUL
30597: ST_TO_ADDR
// end ; unit_vehicle :
30598: GO 31422
30600: LD_INT 2
30602: DOUBLE
30603: EQUAL
30604: IFTRUE 30608
30606: GO 31410
30608: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30609: LD_VAR 0 6
30613: PPUSH
30614: CALL_OW 264
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: LD_INT 42
30624: PUSH
30625: LD_INT 24
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: IN
30633: IFFALSE 30654
// points := [ 25 , 5 , 3 ] ;
30635: LD_ADDR_VAR 0 9
30639: PUSH
30640: LD_INT 25
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: LD_INT 3
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: LIST
30653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30654: LD_VAR 0 6
30658: PPUSH
30659: CALL_OW 264
30663: PUSH
30664: LD_INT 4
30666: PUSH
30667: LD_INT 43
30669: PUSH
30670: LD_INT 25
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: IN
30678: IFFALSE 30699
// points := [ 40 , 15 , 5 ] ;
30680: LD_ADDR_VAR 0 9
30684: PUSH
30685: LD_INT 40
30687: PUSH
30688: LD_INT 15
30690: PUSH
30691: LD_INT 5
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30699: LD_VAR 0 6
30703: PPUSH
30704: CALL_OW 264
30708: PUSH
30709: LD_INT 3
30711: PUSH
30712: LD_INT 23
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: IN
30719: IFFALSE 30740
// points := [ 7 , 25 , 8 ] ;
30721: LD_ADDR_VAR 0 9
30725: PUSH
30726: LD_INT 7
30728: PUSH
30729: LD_INT 25
30731: PUSH
30732: LD_INT 8
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30740: LD_VAR 0 6
30744: PPUSH
30745: CALL_OW 264
30749: PUSH
30750: LD_INT 5
30752: PUSH
30753: LD_INT 27
30755: PUSH
30756: LD_INT 44
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: IN
30764: IFFALSE 30785
// points := [ 14 , 50 , 16 ] ;
30766: LD_ADDR_VAR 0 9
30770: PUSH
30771: LD_INT 14
30773: PUSH
30774: LD_INT 50
30776: PUSH
30777: LD_INT 16
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30785: LD_VAR 0 6
30789: PPUSH
30790: CALL_OW 264
30794: PUSH
30795: LD_INT 6
30797: PUSH
30798: LD_INT 46
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: IN
30805: IFFALSE 30826
// points := [ 32 , 120 , 70 ] ;
30807: LD_ADDR_VAR 0 9
30811: PUSH
30812: LD_INT 32
30814: PUSH
30815: LD_INT 120
30817: PUSH
30818: LD_INT 70
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30826: LD_VAR 0 6
30830: PPUSH
30831: CALL_OW 264
30835: PUSH
30836: LD_INT 7
30838: PUSH
30839: LD_INT 28
30841: PUSH
30842: LD_INT 45
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: LIST
30849: IN
30850: IFFALSE 30871
// points := [ 35 , 20 , 45 ] ;
30852: LD_ADDR_VAR 0 9
30856: PUSH
30857: LD_INT 35
30859: PUSH
30860: LD_INT 20
30862: PUSH
30863: LD_INT 45
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: LIST
30870: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30871: LD_VAR 0 6
30875: PPUSH
30876: CALL_OW 264
30880: PUSH
30881: LD_INT 47
30883: PUSH
30884: EMPTY
30885: LIST
30886: IN
30887: IFFALSE 30908
// points := [ 67 , 45 , 75 ] ;
30889: LD_ADDR_VAR 0 9
30893: PUSH
30894: LD_INT 67
30896: PUSH
30897: LD_INT 45
30899: PUSH
30900: LD_INT 75
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30908: LD_VAR 0 6
30912: PPUSH
30913: CALL_OW 264
30917: PUSH
30918: LD_INT 26
30920: PUSH
30921: EMPTY
30922: LIST
30923: IN
30924: IFFALSE 30945
// points := [ 120 , 30 , 80 ] ;
30926: LD_ADDR_VAR 0 9
30930: PUSH
30931: LD_INT 120
30933: PUSH
30934: LD_INT 30
30936: PUSH
30937: LD_INT 80
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30945: LD_VAR 0 6
30949: PPUSH
30950: CALL_OW 264
30954: PUSH
30955: LD_INT 22
30957: PUSH
30958: EMPTY
30959: LIST
30960: IN
30961: IFFALSE 30982
// points := [ 40 , 1 , 1 ] ;
30963: LD_ADDR_VAR 0 9
30967: PUSH
30968: LD_INT 40
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30982: LD_VAR 0 6
30986: PPUSH
30987: CALL_OW 264
30991: PUSH
30992: LD_INT 29
30994: PUSH
30995: EMPTY
30996: LIST
30997: IN
30998: IFFALSE 31019
// points := [ 70 , 200 , 400 ] ;
31000: LD_ADDR_VAR 0 9
31004: PUSH
31005: LD_INT 70
31007: PUSH
31008: LD_INT 200
31010: PUSH
31011: LD_INT 400
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: LIST
31018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31019: LD_VAR 0 6
31023: PPUSH
31024: CALL_OW 264
31028: PUSH
31029: LD_INT 14
31031: PUSH
31032: LD_INT 53
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: IN
31039: IFFALSE 31060
// points := [ 40 , 10 , 20 ] ;
31041: LD_ADDR_VAR 0 9
31045: PUSH
31046: LD_INT 40
31048: PUSH
31049: LD_INT 10
31051: PUSH
31052: LD_INT 20
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31060: LD_VAR 0 6
31064: PPUSH
31065: CALL_OW 264
31069: PUSH
31070: LD_INT 9
31072: PUSH
31073: EMPTY
31074: LIST
31075: IN
31076: IFFALSE 31097
// points := [ 5 , 70 , 20 ] ;
31078: LD_ADDR_VAR 0 9
31082: PUSH
31083: LD_INT 5
31085: PUSH
31086: LD_INT 70
31088: PUSH
31089: LD_INT 20
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: LIST
31096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31097: LD_VAR 0 6
31101: PPUSH
31102: CALL_OW 264
31106: PUSH
31107: LD_INT 10
31109: PUSH
31110: EMPTY
31111: LIST
31112: IN
31113: IFFALSE 31134
// points := [ 35 , 110 , 70 ] ;
31115: LD_ADDR_VAR 0 9
31119: PUSH
31120: LD_INT 35
31122: PUSH
31123: LD_INT 110
31125: PUSH
31126: LD_INT 70
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: LIST
31133: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31134: LD_VAR 0 6
31138: PPUSH
31139: CALL_OW 265
31143: PUSH
31144: LD_INT 25
31146: EQUAL
31147: IFFALSE 31168
// points := [ 80 , 65 , 100 ] ;
31149: LD_ADDR_VAR 0 9
31153: PUSH
31154: LD_INT 80
31156: PUSH
31157: LD_INT 65
31159: PUSH
31160: LD_INT 100
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: LIST
31167: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31168: LD_VAR 0 6
31172: PPUSH
31173: CALL_OW 263
31177: PUSH
31178: LD_INT 1
31180: EQUAL
31181: IFFALSE 31216
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31183: LD_ADDR_VAR 0 10
31187: PUSH
31188: LD_VAR 0 10
31192: PUSH
31193: LD_VAR 0 6
31197: PPUSH
31198: CALL_OW 311
31202: PPUSH
31203: LD_INT 3
31205: PPUSH
31206: CALL_OW 259
31210: PUSH
31211: LD_INT 4
31213: MUL
31214: MUL
31215: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31216: LD_VAR 0 6
31220: PPUSH
31221: CALL_OW 263
31225: PUSH
31226: LD_INT 2
31228: EQUAL
31229: IFFALSE 31280
// begin j := IsControledBy ( i ) ;
31231: LD_ADDR_VAR 0 7
31235: PUSH
31236: LD_VAR 0 6
31240: PPUSH
31241: CALL_OW 312
31245: ST_TO_ADDR
// if j then
31246: LD_VAR 0 7
31250: IFFALSE 31280
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31252: LD_ADDR_VAR 0 10
31256: PUSH
31257: LD_VAR 0 10
31261: PUSH
31262: LD_VAR 0 7
31266: PPUSH
31267: LD_INT 3
31269: PPUSH
31270: CALL_OW 259
31274: PUSH
31275: LD_INT 3
31277: MUL
31278: MUL
31279: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31280: LD_VAR 0 6
31284: PPUSH
31285: CALL_OW 264
31289: PUSH
31290: LD_INT 5
31292: PUSH
31293: LD_INT 6
31295: PUSH
31296: LD_INT 46
31298: PUSH
31299: LD_INT 44
31301: PUSH
31302: LD_INT 47
31304: PUSH
31305: LD_INT 45
31307: PUSH
31308: LD_INT 28
31310: PUSH
31311: LD_INT 7
31313: PUSH
31314: LD_INT 27
31316: PUSH
31317: LD_INT 29
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: IN
31332: PUSH
31333: LD_VAR 0 1
31337: PPUSH
31338: LD_INT 52
31340: PPUSH
31341: CALL_OW 321
31345: PUSH
31346: LD_INT 2
31348: EQUAL
31349: AND
31350: IFFALSE 31367
// bpoints := bpoints * 1.2 ;
31352: LD_ADDR_VAR 0 10
31356: PUSH
31357: LD_VAR 0 10
31361: PUSH
31362: LD_REAL  1.20000000000000E+0000
31365: MUL
31366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31367: LD_VAR 0 6
31371: PPUSH
31372: CALL_OW 264
31376: PUSH
31377: LD_INT 6
31379: PUSH
31380: LD_INT 46
31382: PUSH
31383: LD_INT 47
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: IN
31391: IFFALSE 31408
// bpoints := bpoints * 1.2 ;
31393: LD_ADDR_VAR 0 10
31397: PUSH
31398: LD_VAR 0 10
31402: PUSH
31403: LD_REAL  1.20000000000000E+0000
31406: MUL
31407: ST_TO_ADDR
// end ; unit_building :
31408: GO 31422
31410: LD_INT 3
31412: DOUBLE
31413: EQUAL
31414: IFTRUE 31418
31416: GO 31421
31418: POP
// ; end ;
31419: GO 31422
31421: POP
// for j = 1 to 3 do
31422: LD_ADDR_VAR 0 7
31426: PUSH
31427: DOUBLE
31428: LD_INT 1
31430: DEC
31431: ST_TO_ADDR
31432: LD_INT 3
31434: PUSH
31435: FOR_TO
31436: IFFALSE 31489
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31438: LD_ADDR_VAR 0 5
31442: PUSH
31443: LD_VAR 0 5
31447: PPUSH
31448: LD_VAR 0 7
31452: PPUSH
31453: LD_VAR 0 5
31457: PUSH
31458: LD_VAR 0 7
31462: ARRAY
31463: PUSH
31464: LD_VAR 0 9
31468: PUSH
31469: LD_VAR 0 7
31473: ARRAY
31474: PUSH
31475: LD_VAR 0 10
31479: MUL
31480: PLUS
31481: PPUSH
31482: CALL_OW 1
31486: ST_TO_ADDR
31487: GO 31435
31489: POP
31490: POP
// end ;
31491: GO 29974
31493: POP
31494: POP
// result := Replace ( result , 4 , tmp ) ;
31495: LD_ADDR_VAR 0 5
31499: PUSH
31500: LD_VAR 0 5
31504: PPUSH
31505: LD_INT 4
31507: PPUSH
31508: LD_VAR 0 8
31512: PPUSH
31513: CALL_OW 1
31517: ST_TO_ADDR
// end ;
31518: LD_VAR 0 5
31522: RET
// export function DangerAtRange ( unit , range ) ; begin
31523: LD_INT 0
31525: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31526: LD_ADDR_VAR 0 3
31530: PUSH
31531: LD_VAR 0 1
31535: PPUSH
31536: CALL_OW 255
31540: PPUSH
31541: LD_VAR 0 1
31545: PPUSH
31546: CALL_OW 250
31550: PPUSH
31551: LD_VAR 0 1
31555: PPUSH
31556: CALL_OW 251
31560: PPUSH
31561: LD_VAR 0 2
31565: PPUSH
31566: CALL 29826 0 4
31570: ST_TO_ADDR
// end ;
31571: LD_VAR 0 3
31575: RET
// export function DangerInArea ( side , area ) ; begin
31576: LD_INT 0
31578: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31579: LD_ADDR_VAR 0 3
31583: PUSH
31584: LD_VAR 0 2
31588: PPUSH
31589: LD_INT 81
31591: PUSH
31592: LD_VAR 0 1
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PPUSH
31601: CALL_OW 70
31605: ST_TO_ADDR
// end ;
31606: LD_VAR 0 3
31610: RET
// export function IsExtension ( b ) ; begin
31611: LD_INT 0
31613: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31614: LD_ADDR_VAR 0 2
31618: PUSH
31619: LD_VAR 0 1
31623: PUSH
31624: LD_INT 23
31626: PUSH
31627: LD_INT 20
31629: PUSH
31630: LD_INT 22
31632: PUSH
31633: LD_INT 17
31635: PUSH
31636: LD_INT 24
31638: PUSH
31639: LD_INT 21
31641: PUSH
31642: LD_INT 19
31644: PUSH
31645: LD_INT 16
31647: PUSH
31648: LD_INT 25
31650: PUSH
31651: LD_INT 18
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: IN
31666: ST_TO_ADDR
// end ;
31667: LD_VAR 0 2
31671: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
31672: LD_INT 0
31674: PPUSH
31675: PPUSH
31676: PPUSH
// result := [ ] ;
31677: LD_ADDR_VAR 0 3
31681: PUSH
31682: EMPTY
31683: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31684: LD_ADDR_VAR 0 4
31688: PUSH
31689: LD_VAR 0 2
31693: PPUSH
31694: LD_INT 21
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PPUSH
31704: CALL_OW 70
31708: ST_TO_ADDR
// if not tmp then
31709: LD_VAR 0 4
31713: NOT
31714: IFFALSE 31718
// exit ;
31716: GO 31776
// for i in tmp do
31718: LD_ADDR_VAR 0 5
31722: PUSH
31723: LD_VAR 0 4
31727: PUSH
31728: FOR_IN
31729: IFFALSE 31764
// if GetBase ( i ) <> base then
31731: LD_VAR 0 5
31735: PPUSH
31736: CALL_OW 274
31740: PUSH
31741: LD_VAR 0 1
31745: NONEQUAL
31746: IFFALSE 31762
// ComLinkToBase ( base , i ) ;
31748: LD_VAR 0 1
31752: PPUSH
31753: LD_VAR 0 5
31757: PPUSH
31758: CALL_OW 169
31762: GO 31728
31764: POP
31765: POP
// result := tmp ;
31766: LD_ADDR_VAR 0 3
31770: PUSH
31771: LD_VAR 0 4
31775: ST_TO_ADDR
// end ;
31776: LD_VAR 0 3
31780: RET
// export function ComComplete ( unit , b ) ; var i ; begin
31781: LD_INT 0
31783: PPUSH
31784: PPUSH
// if BuildingStatus ( b ) = bs_build then
31785: LD_VAR 0 2
31789: PPUSH
31790: CALL_OW 461
31794: PUSH
31795: LD_INT 1
31797: EQUAL
31798: IFFALSE 31858
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31800: LD_VAR 0 1
31804: PPUSH
31805: LD_STRING h
31807: PUSH
31808: LD_VAR 0 2
31812: PPUSH
31813: CALL_OW 250
31817: PUSH
31818: LD_VAR 0 2
31822: PPUSH
31823: CALL_OW 251
31827: PUSH
31828: LD_VAR 0 2
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: PUSH
31851: EMPTY
31852: LIST
31853: PPUSH
31854: CALL_OW 446
// end ;
31858: LD_VAR 0 3
31862: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31863: LD_INT 0
31865: PPUSH
31866: PPUSH
31867: PPUSH
31868: PPUSH
31869: PPUSH
31870: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31871: LD_VAR 0 1
31875: NOT
31876: PUSH
31877: LD_VAR 0 1
31881: PPUSH
31882: CALL_OW 263
31886: PUSH
31887: LD_INT 2
31889: EQUAL
31890: NOT
31891: OR
31892: IFFALSE 31896
// exit ;
31894: GO 32212
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31896: LD_ADDR_VAR 0 6
31900: PUSH
31901: LD_INT 22
31903: PUSH
31904: LD_VAR 0 1
31908: PPUSH
31909: CALL_OW 255
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 30
31923: PUSH
31924: LD_INT 36
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 34
31933: PUSH
31934: LD_INT 31
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: LIST
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PPUSH
31950: CALL_OW 69
31954: ST_TO_ADDR
// if not tmp then
31955: LD_VAR 0 6
31959: NOT
31960: IFFALSE 31964
// exit ;
31962: GO 32212
// result := [ ] ;
31964: LD_ADDR_VAR 0 2
31968: PUSH
31969: EMPTY
31970: ST_TO_ADDR
// for i in tmp do
31971: LD_ADDR_VAR 0 3
31975: PUSH
31976: LD_VAR 0 6
31980: PUSH
31981: FOR_IN
31982: IFFALSE 32053
// begin t := UnitsInside ( i ) ;
31984: LD_ADDR_VAR 0 4
31988: PUSH
31989: LD_VAR 0 3
31993: PPUSH
31994: CALL_OW 313
31998: ST_TO_ADDR
// if t then
31999: LD_VAR 0 4
32003: IFFALSE 32051
// for j in t do
32005: LD_ADDR_VAR 0 7
32009: PUSH
32010: LD_VAR 0 4
32014: PUSH
32015: FOR_IN
32016: IFFALSE 32049
// result := Insert ( result , result + 1 , j ) ;
32018: LD_ADDR_VAR 0 2
32022: PUSH
32023: LD_VAR 0 2
32027: PPUSH
32028: LD_VAR 0 2
32032: PUSH
32033: LD_INT 1
32035: PLUS
32036: PPUSH
32037: LD_VAR 0 7
32041: PPUSH
32042: CALL_OW 2
32046: ST_TO_ADDR
32047: GO 32015
32049: POP
32050: POP
// end ;
32051: GO 31981
32053: POP
32054: POP
// if not result then
32055: LD_VAR 0 2
32059: NOT
32060: IFFALSE 32064
// exit ;
32062: GO 32212
// mech := result [ 1 ] ;
32064: LD_ADDR_VAR 0 5
32068: PUSH
32069: LD_VAR 0 2
32073: PUSH
32074: LD_INT 1
32076: ARRAY
32077: ST_TO_ADDR
// if result > 1 then
32078: LD_VAR 0 2
32082: PUSH
32083: LD_INT 1
32085: GREATER
32086: IFFALSE 32198
// for i = 2 to result do
32088: LD_ADDR_VAR 0 3
32092: PUSH
32093: DOUBLE
32094: LD_INT 2
32096: DEC
32097: ST_TO_ADDR
32098: LD_VAR 0 2
32102: PUSH
32103: FOR_TO
32104: IFFALSE 32196
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32106: LD_ADDR_VAR 0 4
32110: PUSH
32111: LD_VAR 0 2
32115: PUSH
32116: LD_VAR 0 3
32120: ARRAY
32121: PPUSH
32122: LD_INT 3
32124: PPUSH
32125: CALL_OW 259
32129: PUSH
32130: LD_VAR 0 2
32134: PUSH
32135: LD_VAR 0 3
32139: ARRAY
32140: PPUSH
32141: CALL_OW 432
32145: MINUS
32146: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32147: LD_VAR 0 4
32151: PUSH
32152: LD_VAR 0 5
32156: PPUSH
32157: LD_INT 3
32159: PPUSH
32160: CALL_OW 259
32164: PUSH
32165: LD_VAR 0 5
32169: PPUSH
32170: CALL_OW 432
32174: MINUS
32175: GREATEREQUAL
32176: IFFALSE 32194
// mech := result [ i ] ;
32178: LD_ADDR_VAR 0 5
32182: PUSH
32183: LD_VAR 0 2
32187: PUSH
32188: LD_VAR 0 3
32192: ARRAY
32193: ST_TO_ADDR
// end ;
32194: GO 32103
32196: POP
32197: POP
// ComLinkTo ( vehicle , mech ) ;
32198: LD_VAR 0 1
32202: PPUSH
32203: LD_VAR 0 5
32207: PPUSH
32208: CALL_OW 135
// end ;
32212: LD_VAR 0 2
32216: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32217: LD_INT 0
32219: PPUSH
32220: PPUSH
32221: PPUSH
32222: PPUSH
32223: PPUSH
32224: PPUSH
32225: PPUSH
32226: PPUSH
32227: PPUSH
32228: PPUSH
32229: PPUSH
32230: PPUSH
32231: PPUSH
// result := [ ] ;
32232: LD_ADDR_VAR 0 7
32236: PUSH
32237: EMPTY
32238: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 266
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: IN
32259: NOT
32260: IFFALSE 32264
// exit ;
32262: GO 33895
// if name then
32264: LD_VAR 0 3
32268: IFFALSE 32284
// SetBName ( base_dep , name ) ;
32270: LD_VAR 0 1
32274: PPUSH
32275: LD_VAR 0 3
32279: PPUSH
32280: CALL_OW 500
// base := GetBase ( base_dep ) ;
32284: LD_ADDR_VAR 0 15
32288: PUSH
32289: LD_VAR 0 1
32293: PPUSH
32294: CALL_OW 274
32298: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32299: LD_ADDR_VAR 0 16
32303: PUSH
32304: LD_VAR 0 1
32308: PPUSH
32309: CALL_OW 255
32313: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32314: LD_ADDR_VAR 0 17
32318: PUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: CALL_OW 248
32328: ST_TO_ADDR
// if sources then
32329: LD_VAR 0 5
32333: IFFALSE 32380
// for i = 1 to 3 do
32335: LD_ADDR_VAR 0 8
32339: PUSH
32340: DOUBLE
32341: LD_INT 1
32343: DEC
32344: ST_TO_ADDR
32345: LD_INT 3
32347: PUSH
32348: FOR_TO
32349: IFFALSE 32378
// AddResourceType ( base , i , sources [ i ] ) ;
32351: LD_VAR 0 15
32355: PPUSH
32356: LD_VAR 0 8
32360: PPUSH
32361: LD_VAR 0 5
32365: PUSH
32366: LD_VAR 0 8
32370: ARRAY
32371: PPUSH
32372: CALL_OW 276
32376: GO 32348
32378: POP
32379: POP
// buildings := GetBaseBuildings ( base , area ) ;
32380: LD_ADDR_VAR 0 18
32384: PUSH
32385: LD_VAR 0 15
32389: PPUSH
32390: LD_VAR 0 2
32394: PPUSH
32395: CALL 31672 0 2
32399: ST_TO_ADDR
// InitHc ;
32400: CALL_OW 19
// InitUc ;
32404: CALL_OW 18
// uc_side := side ;
32408: LD_ADDR_OWVAR 20
32412: PUSH
32413: LD_VAR 0 16
32417: ST_TO_ADDR
// uc_nation := nation ;
32418: LD_ADDR_OWVAR 21
32422: PUSH
32423: LD_VAR 0 17
32427: ST_TO_ADDR
// if buildings then
32428: LD_VAR 0 18
32432: IFFALSE 33754
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32434: LD_ADDR_VAR 0 19
32438: PUSH
32439: LD_VAR 0 18
32443: PPUSH
32444: LD_INT 2
32446: PUSH
32447: LD_INT 30
32449: PUSH
32450: LD_INT 29
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 30
32459: PUSH
32460: LD_INT 30
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: LIST
32471: PPUSH
32472: CALL_OW 72
32476: ST_TO_ADDR
// if tmp then
32477: LD_VAR 0 19
32481: IFFALSE 32529
// for i in tmp do
32483: LD_ADDR_VAR 0 8
32487: PUSH
32488: LD_VAR 0 19
32492: PUSH
32493: FOR_IN
32494: IFFALSE 32527
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32496: LD_VAR 0 8
32500: PPUSH
32501: CALL_OW 250
32505: PPUSH
32506: LD_VAR 0 8
32510: PPUSH
32511: CALL_OW 251
32515: PPUSH
32516: LD_VAR 0 16
32520: PPUSH
32521: CALL_OW 441
32525: GO 32493
32527: POP
32528: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32529: LD_VAR 0 18
32533: PPUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 30
32539: PUSH
32540: LD_INT 32
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 30
32549: PUSH
32550: LD_INT 33
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: PPUSH
32562: CALL_OW 72
32566: IFFALSE 32654
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32568: LD_ADDR_VAR 0 8
32572: PUSH
32573: LD_VAR 0 18
32577: PPUSH
32578: LD_INT 2
32580: PUSH
32581: LD_INT 30
32583: PUSH
32584: LD_INT 32
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 30
32593: PUSH
32594: LD_INT 33
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: PPUSH
32606: CALL_OW 72
32610: PUSH
32611: FOR_IN
32612: IFFALSE 32652
// begin if not GetBWeapon ( i ) then
32614: LD_VAR 0 8
32618: PPUSH
32619: CALL_OW 269
32623: NOT
32624: IFFALSE 32650
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32626: LD_VAR 0 8
32630: PPUSH
32631: LD_VAR 0 8
32635: PPUSH
32636: LD_VAR 0 2
32640: PPUSH
32641: CALL 33900 0 2
32645: PPUSH
32646: CALL_OW 431
// end ;
32650: GO 32611
32652: POP
32653: POP
// end ; for i = 1 to personel do
32654: LD_ADDR_VAR 0 8
32658: PUSH
32659: DOUBLE
32660: LD_INT 1
32662: DEC
32663: ST_TO_ADDR
32664: LD_VAR 0 6
32668: PUSH
32669: FOR_TO
32670: IFFALSE 33734
// begin if i > 4 then
32672: LD_VAR 0 8
32676: PUSH
32677: LD_INT 4
32679: GREATER
32680: IFFALSE 32684
// break ;
32682: GO 33734
// case i of 1 :
32684: LD_VAR 0 8
32688: PUSH
32689: LD_INT 1
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32697
32695: GO 32777
32697: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32698: LD_ADDR_VAR 0 12
32702: PUSH
32703: LD_VAR 0 18
32707: PPUSH
32708: LD_INT 22
32710: PUSH
32711: LD_VAR 0 16
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 58
32722: PUSH
32723: EMPTY
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: LD_INT 30
32731: PUSH
32732: LD_INT 32
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 30
32741: PUSH
32742: LD_INT 4
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 30
32751: PUSH
32752: LD_INT 5
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: PPUSH
32770: CALL_OW 72
32774: ST_TO_ADDR
32775: GO 32999
32777: LD_INT 2
32779: DOUBLE
32780: EQUAL
32781: IFTRUE 32785
32783: GO 32847
32785: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32786: LD_ADDR_VAR 0 12
32790: PUSH
32791: LD_VAR 0 18
32795: PPUSH
32796: LD_INT 22
32798: PUSH
32799: LD_VAR 0 16
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: LD_INT 30
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 30
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PPUSH
32840: CALL_OW 72
32844: ST_TO_ADDR
32845: GO 32999
32847: LD_INT 3
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32917
32855: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32856: LD_ADDR_VAR 0 12
32860: PUSH
32861: LD_VAR 0 18
32865: PPUSH
32866: LD_INT 22
32868: PUSH
32869: LD_VAR 0 16
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: LD_INT 30
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 30
32893: PUSH
32894: LD_INT 3
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PPUSH
32910: CALL_OW 72
32914: ST_TO_ADDR
32915: GO 32999
32917: LD_INT 4
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32925
32923: GO 32998
32925: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32926: LD_ADDR_VAR 0 12
32930: PUSH
32931: LD_VAR 0 18
32935: PPUSH
32936: LD_INT 22
32938: PUSH
32939: LD_VAR 0 16
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: PUSH
32951: LD_INT 30
32953: PUSH
32954: LD_INT 6
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 30
32963: PUSH
32964: LD_INT 7
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 30
32973: PUSH
32974: LD_INT 8
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PPUSH
32991: CALL_OW 72
32995: ST_TO_ADDR
32996: GO 32999
32998: POP
// if i = 1 then
32999: LD_VAR 0 8
33003: PUSH
33004: LD_INT 1
33006: EQUAL
33007: IFFALSE 33118
// begin tmp := [ ] ;
33009: LD_ADDR_VAR 0 19
33013: PUSH
33014: EMPTY
33015: ST_TO_ADDR
// for j in f do
33016: LD_ADDR_VAR 0 9
33020: PUSH
33021: LD_VAR 0 12
33025: PUSH
33026: FOR_IN
33027: IFFALSE 33100
// if GetBType ( j ) = b_bunker then
33029: LD_VAR 0 9
33033: PPUSH
33034: CALL_OW 266
33038: PUSH
33039: LD_INT 32
33041: EQUAL
33042: IFFALSE 33069
// tmp := Insert ( tmp , 1 , j ) else
33044: LD_ADDR_VAR 0 19
33048: PUSH
33049: LD_VAR 0 19
33053: PPUSH
33054: LD_INT 1
33056: PPUSH
33057: LD_VAR 0 9
33061: PPUSH
33062: CALL_OW 2
33066: ST_TO_ADDR
33067: GO 33098
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33069: LD_ADDR_VAR 0 19
33073: PUSH
33074: LD_VAR 0 19
33078: PPUSH
33079: LD_VAR 0 19
33083: PUSH
33084: LD_INT 1
33086: PLUS
33087: PPUSH
33088: LD_VAR 0 9
33092: PPUSH
33093: CALL_OW 2
33097: ST_TO_ADDR
33098: GO 33026
33100: POP
33101: POP
// if tmp then
33102: LD_VAR 0 19
33106: IFFALSE 33118
// f := tmp ;
33108: LD_ADDR_VAR 0 12
33112: PUSH
33113: LD_VAR 0 19
33117: ST_TO_ADDR
// end ; x := personel [ i ] ;
33118: LD_ADDR_VAR 0 13
33122: PUSH
33123: LD_VAR 0 6
33127: PUSH
33128: LD_VAR 0 8
33132: ARRAY
33133: ST_TO_ADDR
// if x = - 1 then
33134: LD_VAR 0 13
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: EQUAL
33143: IFFALSE 33352
// begin for j in f do
33145: LD_ADDR_VAR 0 9
33149: PUSH
33150: LD_VAR 0 12
33154: PUSH
33155: FOR_IN
33156: IFFALSE 33348
// repeat InitHc ;
33158: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33162: LD_VAR 0 9
33166: PPUSH
33167: CALL_OW 266
33171: PUSH
33172: LD_INT 5
33174: EQUAL
33175: IFFALSE 33245
// begin if UnitsInside ( j ) < 3 then
33177: LD_VAR 0 9
33181: PPUSH
33182: CALL_OW 313
33186: PUSH
33187: LD_INT 3
33189: LESS
33190: IFFALSE 33226
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33192: LD_INT 0
33194: PPUSH
33195: LD_INT 5
33197: PUSH
33198: LD_INT 8
33200: PUSH
33201: LD_INT 9
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: LIST
33208: PUSH
33209: LD_VAR 0 17
33213: ARRAY
33214: PPUSH
33215: LD_VAR 0 4
33219: PPUSH
33220: CALL_OW 380
33224: GO 33243
// PrepareHuman ( false , i , skill ) ;
33226: LD_INT 0
33228: PPUSH
33229: LD_VAR 0 8
33233: PPUSH
33234: LD_VAR 0 4
33238: PPUSH
33239: CALL_OW 380
// end else
33243: GO 33262
// PrepareHuman ( false , i , skill ) ;
33245: LD_INT 0
33247: PPUSH
33248: LD_VAR 0 8
33252: PPUSH
33253: LD_VAR 0 4
33257: PPUSH
33258: CALL_OW 380
// un := CreateHuman ;
33262: LD_ADDR_VAR 0 14
33266: PUSH
33267: CALL_OW 44
33271: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33272: LD_ADDR_VAR 0 7
33276: PUSH
33277: LD_VAR 0 7
33281: PPUSH
33282: LD_INT 1
33284: PPUSH
33285: LD_VAR 0 14
33289: PPUSH
33290: CALL_OW 2
33294: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33295: LD_VAR 0 14
33299: PPUSH
33300: LD_VAR 0 9
33304: PPUSH
33305: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33309: LD_VAR 0 9
33313: PPUSH
33314: CALL_OW 313
33318: PUSH
33319: LD_INT 6
33321: EQUAL
33322: PUSH
33323: LD_VAR 0 9
33327: PPUSH
33328: CALL_OW 266
33332: PUSH
33333: LD_INT 32
33335: PUSH
33336: LD_INT 31
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: IN
33343: OR
33344: IFFALSE 33158
33346: GO 33155
33348: POP
33349: POP
// end else
33350: GO 33732
// for j = 1 to x do
33352: LD_ADDR_VAR 0 9
33356: PUSH
33357: DOUBLE
33358: LD_INT 1
33360: DEC
33361: ST_TO_ADDR
33362: LD_VAR 0 13
33366: PUSH
33367: FOR_TO
33368: IFFALSE 33730
// begin InitHc ;
33370: CALL_OW 19
// if not f then
33374: LD_VAR 0 12
33378: NOT
33379: IFFALSE 33468
// begin PrepareHuman ( false , i , skill ) ;
33381: LD_INT 0
33383: PPUSH
33384: LD_VAR 0 8
33388: PPUSH
33389: LD_VAR 0 4
33393: PPUSH
33394: CALL_OW 380
// un := CreateHuman ;
33398: LD_ADDR_VAR 0 14
33402: PUSH
33403: CALL_OW 44
33407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33408: LD_ADDR_VAR 0 7
33412: PUSH
33413: LD_VAR 0 7
33417: PPUSH
33418: LD_INT 1
33420: PPUSH
33421: LD_VAR 0 14
33425: PPUSH
33426: CALL_OW 2
33430: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33431: LD_VAR 0 14
33435: PPUSH
33436: LD_VAR 0 1
33440: PPUSH
33441: CALL_OW 250
33445: PPUSH
33446: LD_VAR 0 1
33450: PPUSH
33451: CALL_OW 251
33455: PPUSH
33456: LD_INT 10
33458: PPUSH
33459: LD_INT 0
33461: PPUSH
33462: CALL_OW 50
// continue ;
33466: GO 33367
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33468: LD_VAR 0 12
33472: PUSH
33473: LD_INT 1
33475: ARRAY
33476: PPUSH
33477: CALL_OW 313
33481: PUSH
33482: LD_VAR 0 12
33486: PUSH
33487: LD_INT 1
33489: ARRAY
33490: PPUSH
33491: CALL_OW 266
33495: PUSH
33496: LD_INT 32
33498: PUSH
33499: LD_INT 31
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: IN
33506: AND
33507: PUSH
33508: LD_VAR 0 12
33512: PUSH
33513: LD_INT 1
33515: ARRAY
33516: PPUSH
33517: CALL_OW 313
33521: PUSH
33522: LD_INT 6
33524: EQUAL
33525: OR
33526: IFFALSE 33546
// f := Delete ( f , 1 ) ;
33528: LD_ADDR_VAR 0 12
33532: PUSH
33533: LD_VAR 0 12
33537: PPUSH
33538: LD_INT 1
33540: PPUSH
33541: CALL_OW 3
33545: ST_TO_ADDR
// if not f then
33546: LD_VAR 0 12
33550: NOT
33551: IFFALSE 33569
// begin x := x + 2 ;
33553: LD_ADDR_VAR 0 13
33557: PUSH
33558: LD_VAR 0 13
33562: PUSH
33563: LD_INT 2
33565: PLUS
33566: ST_TO_ADDR
// continue ;
33567: GO 33367
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33569: LD_VAR 0 12
33573: PUSH
33574: LD_INT 1
33576: ARRAY
33577: PPUSH
33578: CALL_OW 266
33582: PUSH
33583: LD_INT 5
33585: EQUAL
33586: IFFALSE 33660
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33588: LD_VAR 0 12
33592: PUSH
33593: LD_INT 1
33595: ARRAY
33596: PPUSH
33597: CALL_OW 313
33601: PUSH
33602: LD_INT 3
33604: LESS
33605: IFFALSE 33641
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33607: LD_INT 0
33609: PPUSH
33610: LD_INT 5
33612: PUSH
33613: LD_INT 8
33615: PUSH
33616: LD_INT 9
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: LIST
33623: PUSH
33624: LD_VAR 0 17
33628: ARRAY
33629: PPUSH
33630: LD_VAR 0 4
33634: PPUSH
33635: CALL_OW 380
33639: GO 33658
// PrepareHuman ( false , i , skill ) ;
33641: LD_INT 0
33643: PPUSH
33644: LD_VAR 0 8
33648: PPUSH
33649: LD_VAR 0 4
33653: PPUSH
33654: CALL_OW 380
// end else
33658: GO 33677
// PrepareHuman ( false , i , skill ) ;
33660: LD_INT 0
33662: PPUSH
33663: LD_VAR 0 8
33667: PPUSH
33668: LD_VAR 0 4
33672: PPUSH
33673: CALL_OW 380
// un := CreateHuman ;
33677: LD_ADDR_VAR 0 14
33681: PUSH
33682: CALL_OW 44
33686: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33687: LD_ADDR_VAR 0 7
33691: PUSH
33692: LD_VAR 0 7
33696: PPUSH
33697: LD_INT 1
33699: PPUSH
33700: LD_VAR 0 14
33704: PPUSH
33705: CALL_OW 2
33709: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33710: LD_VAR 0 14
33714: PPUSH
33715: LD_VAR 0 12
33719: PUSH
33720: LD_INT 1
33722: ARRAY
33723: PPUSH
33724: CALL_OW 52
// end ;
33728: GO 33367
33730: POP
33731: POP
// end ;
33732: GO 32669
33734: POP
33735: POP
// result := result ^ buildings ;
33736: LD_ADDR_VAR 0 7
33740: PUSH
33741: LD_VAR 0 7
33745: PUSH
33746: LD_VAR 0 18
33750: ADD
33751: ST_TO_ADDR
// end else
33752: GO 33895
// begin for i = 1 to personel do
33754: LD_ADDR_VAR 0 8
33758: PUSH
33759: DOUBLE
33760: LD_INT 1
33762: DEC
33763: ST_TO_ADDR
33764: LD_VAR 0 6
33768: PUSH
33769: FOR_TO
33770: IFFALSE 33893
// begin if i > 4 then
33772: LD_VAR 0 8
33776: PUSH
33777: LD_INT 4
33779: GREATER
33780: IFFALSE 33784
// break ;
33782: GO 33893
// x := personel [ i ] ;
33784: LD_ADDR_VAR 0 13
33788: PUSH
33789: LD_VAR 0 6
33793: PUSH
33794: LD_VAR 0 8
33798: ARRAY
33799: ST_TO_ADDR
// if x = - 1 then
33800: LD_VAR 0 13
33804: PUSH
33805: LD_INT 1
33807: NEG
33808: EQUAL
33809: IFFALSE 33813
// continue ;
33811: GO 33769
// PrepareHuman ( false , i , skill ) ;
33813: LD_INT 0
33815: PPUSH
33816: LD_VAR 0 8
33820: PPUSH
33821: LD_VAR 0 4
33825: PPUSH
33826: CALL_OW 380
// un := CreateHuman ;
33830: LD_ADDR_VAR 0 14
33834: PUSH
33835: CALL_OW 44
33839: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33840: LD_VAR 0 14
33844: PPUSH
33845: LD_VAR 0 1
33849: PPUSH
33850: CALL_OW 250
33854: PPUSH
33855: LD_VAR 0 1
33859: PPUSH
33860: CALL_OW 251
33864: PPUSH
33865: LD_INT 10
33867: PPUSH
33868: LD_INT 0
33870: PPUSH
33871: CALL_OW 50
// result := result ^ un ;
33875: LD_ADDR_VAR 0 7
33879: PUSH
33880: LD_VAR 0 7
33884: PUSH
33885: LD_VAR 0 14
33889: ADD
33890: ST_TO_ADDR
// end ;
33891: GO 33769
33893: POP
33894: POP
// end ; end ;
33895: LD_VAR 0 7
33899: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33900: LD_INT 0
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
33909: PPUSH
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
33917: PPUSH
// result := false ;
33918: LD_ADDR_VAR 0 3
33922: PUSH
33923: LD_INT 0
33925: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33926: LD_VAR 0 1
33930: NOT
33931: PUSH
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL_OW 266
33941: PUSH
33942: LD_INT 32
33944: PUSH
33945: LD_INT 33
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: IN
33952: NOT
33953: OR
33954: IFFALSE 33958
// exit ;
33956: GO 35094
// nat := GetNation ( tower ) ;
33958: LD_ADDR_VAR 0 12
33962: PUSH
33963: LD_VAR 0 1
33967: PPUSH
33968: CALL_OW 248
33972: ST_TO_ADDR
// side := GetSide ( tower ) ;
33973: LD_ADDR_VAR 0 16
33977: PUSH
33978: LD_VAR 0 1
33982: PPUSH
33983: CALL_OW 255
33987: ST_TO_ADDR
// x := GetX ( tower ) ;
33988: LD_ADDR_VAR 0 10
33992: PUSH
33993: LD_VAR 0 1
33997: PPUSH
33998: CALL_OW 250
34002: ST_TO_ADDR
// y := GetY ( tower ) ;
34003: LD_ADDR_VAR 0 11
34007: PUSH
34008: LD_VAR 0 1
34012: PPUSH
34013: CALL_OW 251
34017: ST_TO_ADDR
// if not x or not y then
34018: LD_VAR 0 10
34022: NOT
34023: PUSH
34024: LD_VAR 0 11
34028: NOT
34029: OR
34030: IFFALSE 34034
// exit ;
34032: GO 35094
// weapon := 0 ;
34034: LD_ADDR_VAR 0 18
34038: PUSH
34039: LD_INT 0
34041: ST_TO_ADDR
// fac_list := [ ] ;
34042: LD_ADDR_VAR 0 17
34046: PUSH
34047: EMPTY
34048: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
34049: LD_ADDR_VAR 0 6
34053: PUSH
34054: LD_VAR 0 1
34058: PPUSH
34059: CALL_OW 274
34063: PPUSH
34064: LD_VAR 0 2
34068: PPUSH
34069: CALL 31672 0 2
34073: PPUSH
34074: LD_INT 30
34076: PUSH
34077: LD_INT 3
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PPUSH
34084: CALL_OW 72
34088: ST_TO_ADDR
// if not factories then
34089: LD_VAR 0 6
34093: NOT
34094: IFFALSE 34098
// exit ;
34096: GO 35094
// for i in factories do
34098: LD_ADDR_VAR 0 8
34102: PUSH
34103: LD_VAR 0 6
34107: PUSH
34108: FOR_IN
34109: IFFALSE 34134
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34111: LD_ADDR_VAR 0 17
34115: PUSH
34116: LD_VAR 0 17
34120: PUSH
34121: LD_VAR 0 8
34125: PPUSH
34126: CALL_OW 478
34130: UNION
34131: ST_TO_ADDR
34132: GO 34108
34134: POP
34135: POP
// if not fac_list then
34136: LD_VAR 0 17
34140: NOT
34141: IFFALSE 34145
// exit ;
34143: GO 35094
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34145: LD_ADDR_VAR 0 5
34149: PUSH
34150: LD_INT 4
34152: PUSH
34153: LD_INT 5
34155: PUSH
34156: LD_INT 9
34158: PUSH
34159: LD_INT 10
34161: PUSH
34162: LD_INT 6
34164: PUSH
34165: LD_INT 7
34167: PUSH
34168: LD_INT 11
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 27
34182: PUSH
34183: LD_INT 28
34185: PUSH
34186: LD_INT 26
34188: PUSH
34189: LD_INT 30
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 43
34200: PUSH
34201: LD_INT 44
34203: PUSH
34204: LD_INT 46
34206: PUSH
34207: LD_INT 45
34209: PUSH
34210: LD_INT 47
34212: PUSH
34213: LD_INT 49
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: PUSH
34229: LD_VAR 0 12
34233: ARRAY
34234: ST_TO_ADDR
// for i in list do
34235: LD_ADDR_VAR 0 8
34239: PUSH
34240: LD_VAR 0 5
34244: PUSH
34245: FOR_IN
34246: IFFALSE 34279
// if not i in fac_list then
34248: LD_VAR 0 8
34252: PUSH
34253: LD_VAR 0 17
34257: IN
34258: NOT
34259: IFFALSE 34277
// list := list diff i ;
34261: LD_ADDR_VAR 0 5
34265: PUSH
34266: LD_VAR 0 5
34270: PUSH
34271: LD_VAR 0 8
34275: DIFF
34276: ST_TO_ADDR
34277: GO 34245
34279: POP
34280: POP
// if not list then
34281: LD_VAR 0 5
34285: NOT
34286: IFFALSE 34290
// exit ;
34288: GO 35094
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34290: LD_VAR 0 12
34294: PUSH
34295: LD_INT 3
34297: EQUAL
34298: PUSH
34299: LD_INT 49
34301: PUSH
34302: LD_VAR 0 5
34306: IN
34307: AND
34308: PUSH
34309: LD_INT 31
34311: PPUSH
34312: LD_VAR 0 16
34316: PPUSH
34317: CALL_OW 321
34321: PUSH
34322: LD_INT 2
34324: EQUAL
34325: AND
34326: IFFALSE 34386
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34328: LD_INT 22
34330: PUSH
34331: LD_VAR 0 16
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 35
34342: PUSH
34343: LD_INT 49
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 91
34352: PUSH
34353: LD_VAR 0 1
34357: PUSH
34358: LD_INT 10
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: PPUSH
34371: CALL_OW 69
34375: NOT
34376: IFFALSE 34386
// weapon := ru_time_lapser ;
34378: LD_ADDR_VAR 0 18
34382: PUSH
34383: LD_INT 49
34385: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34386: LD_VAR 0 12
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: IN
34401: PUSH
34402: LD_INT 11
34404: PUSH
34405: LD_VAR 0 5
34409: IN
34410: PUSH
34411: LD_INT 30
34413: PUSH
34414: LD_VAR 0 5
34418: IN
34419: OR
34420: AND
34421: PUSH
34422: LD_INT 6
34424: PPUSH
34425: LD_VAR 0 16
34429: PPUSH
34430: CALL_OW 321
34434: PUSH
34435: LD_INT 2
34437: EQUAL
34438: AND
34439: IFFALSE 34604
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34441: LD_INT 22
34443: PUSH
34444: LD_VAR 0 16
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: LD_INT 35
34458: PUSH
34459: LD_INT 11
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 35
34468: PUSH
34469: LD_INT 30
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 91
34483: PUSH
34484: LD_VAR 0 1
34488: PUSH
34489: LD_INT 18
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: PPUSH
34502: CALL_OW 69
34506: NOT
34507: PUSH
34508: LD_INT 22
34510: PUSH
34511: LD_VAR 0 16
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: LD_INT 30
34525: PUSH
34526: LD_INT 32
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 30
34535: PUSH
34536: LD_INT 33
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 91
34550: PUSH
34551: LD_VAR 0 1
34555: PUSH
34556: LD_INT 12
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: LIST
34568: PUSH
34569: EMPTY
34570: LIST
34571: PPUSH
34572: CALL_OW 69
34576: PUSH
34577: LD_INT 2
34579: GREATER
34580: AND
34581: IFFALSE 34604
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34583: LD_ADDR_VAR 0 18
34587: PUSH
34588: LD_INT 11
34590: PUSH
34591: LD_INT 30
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_VAR 0 12
34602: ARRAY
34603: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34604: LD_VAR 0 18
34608: NOT
34609: PUSH
34610: LD_INT 40
34612: PPUSH
34613: LD_VAR 0 16
34617: PPUSH
34618: CALL_OW 321
34622: PUSH
34623: LD_INT 2
34625: EQUAL
34626: AND
34627: PUSH
34628: LD_INT 7
34630: PUSH
34631: LD_VAR 0 5
34635: IN
34636: PUSH
34637: LD_INT 28
34639: PUSH
34640: LD_VAR 0 5
34644: IN
34645: OR
34646: PUSH
34647: LD_INT 45
34649: PUSH
34650: LD_VAR 0 5
34654: IN
34655: OR
34656: AND
34657: IFFALSE 34911
// begin hex := GetHexInfo ( x , y ) ;
34659: LD_ADDR_VAR 0 4
34663: PUSH
34664: LD_VAR 0 10
34668: PPUSH
34669: LD_VAR 0 11
34673: PPUSH
34674: CALL_OW 546
34678: ST_TO_ADDR
// if hex [ 1 ] then
34679: LD_VAR 0 4
34683: PUSH
34684: LD_INT 1
34686: ARRAY
34687: IFFALSE 34691
// exit ;
34689: GO 35094
// height := hex [ 2 ] ;
34691: LD_ADDR_VAR 0 15
34695: PUSH
34696: LD_VAR 0 4
34700: PUSH
34701: LD_INT 2
34703: ARRAY
34704: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34705: LD_ADDR_VAR 0 14
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: LD_INT 3
34718: PUSH
34719: LD_INT 5
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
// for i in tmp do
34728: LD_ADDR_VAR 0 8
34732: PUSH
34733: LD_VAR 0 14
34737: PUSH
34738: FOR_IN
34739: IFFALSE 34909
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34741: LD_ADDR_VAR 0 9
34745: PUSH
34746: LD_VAR 0 10
34750: PPUSH
34751: LD_VAR 0 8
34755: PPUSH
34756: LD_INT 5
34758: PPUSH
34759: CALL_OW 272
34763: PUSH
34764: LD_VAR 0 11
34768: PPUSH
34769: LD_VAR 0 8
34773: PPUSH
34774: LD_INT 5
34776: PPUSH
34777: CALL_OW 273
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34786: LD_VAR 0 9
34790: PUSH
34791: LD_INT 1
34793: ARRAY
34794: PPUSH
34795: LD_VAR 0 9
34799: PUSH
34800: LD_INT 2
34802: ARRAY
34803: PPUSH
34804: CALL_OW 488
34808: IFFALSE 34907
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34810: LD_ADDR_VAR 0 4
34814: PUSH
34815: LD_VAR 0 9
34819: PUSH
34820: LD_INT 1
34822: ARRAY
34823: PPUSH
34824: LD_VAR 0 9
34828: PUSH
34829: LD_INT 2
34831: ARRAY
34832: PPUSH
34833: CALL_OW 546
34837: ST_TO_ADDR
// if hex [ 1 ] then
34838: LD_VAR 0 4
34842: PUSH
34843: LD_INT 1
34845: ARRAY
34846: IFFALSE 34850
// continue ;
34848: GO 34738
// h := hex [ 2 ] ;
34850: LD_ADDR_VAR 0 13
34854: PUSH
34855: LD_VAR 0 4
34859: PUSH
34860: LD_INT 2
34862: ARRAY
34863: ST_TO_ADDR
// if h + 7 < height then
34864: LD_VAR 0 13
34868: PUSH
34869: LD_INT 7
34871: PLUS
34872: PUSH
34873: LD_VAR 0 15
34877: LESS
34878: IFFALSE 34907
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34880: LD_ADDR_VAR 0 18
34884: PUSH
34885: LD_INT 7
34887: PUSH
34888: LD_INT 28
34890: PUSH
34891: LD_INT 45
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: PUSH
34899: LD_VAR 0 12
34903: ARRAY
34904: ST_TO_ADDR
// break ;
34905: GO 34909
// end ; end ; end ;
34907: GO 34738
34909: POP
34910: POP
// end ; if not weapon then
34911: LD_VAR 0 18
34915: NOT
34916: IFFALSE 34976
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34918: LD_ADDR_VAR 0 5
34922: PUSH
34923: LD_VAR 0 5
34927: PUSH
34928: LD_INT 11
34930: PUSH
34931: LD_INT 30
34933: PUSH
34934: LD_INT 49
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: LIST
34941: DIFF
34942: ST_TO_ADDR
// if not list then
34943: LD_VAR 0 5
34947: NOT
34948: IFFALSE 34952
// exit ;
34950: GO 35094
// weapon := list [ rand ( 1 , list ) ] ;
34952: LD_ADDR_VAR 0 18
34956: PUSH
34957: LD_VAR 0 5
34961: PUSH
34962: LD_INT 1
34964: PPUSH
34965: LD_VAR 0 5
34969: PPUSH
34970: CALL_OW 12
34974: ARRAY
34975: ST_TO_ADDR
// end ; if weapon then
34976: LD_VAR 0 18
34980: IFFALSE 35094
// begin tmp := CostOfWeapon ( weapon ) ;
34982: LD_ADDR_VAR 0 14
34986: PUSH
34987: LD_VAR 0 18
34991: PPUSH
34992: CALL_OW 451
34996: ST_TO_ADDR
// j := GetBase ( tower ) ;
34997: LD_ADDR_VAR 0 9
35001: PUSH
35002: LD_VAR 0 1
35006: PPUSH
35007: CALL_OW 274
35011: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35012: LD_VAR 0 9
35016: PPUSH
35017: LD_INT 1
35019: PPUSH
35020: CALL_OW 275
35024: PUSH
35025: LD_VAR 0 14
35029: PUSH
35030: LD_INT 1
35032: ARRAY
35033: GREATEREQUAL
35034: PUSH
35035: LD_VAR 0 9
35039: PPUSH
35040: LD_INT 2
35042: PPUSH
35043: CALL_OW 275
35047: PUSH
35048: LD_VAR 0 14
35052: PUSH
35053: LD_INT 2
35055: ARRAY
35056: GREATEREQUAL
35057: AND
35058: PUSH
35059: LD_VAR 0 9
35063: PPUSH
35064: LD_INT 3
35066: PPUSH
35067: CALL_OW 275
35071: PUSH
35072: LD_VAR 0 14
35076: PUSH
35077: LD_INT 3
35079: ARRAY
35080: GREATEREQUAL
35081: AND
35082: IFFALSE 35094
// result := weapon ;
35084: LD_ADDR_VAR 0 3
35088: PUSH
35089: LD_VAR 0 18
35093: ST_TO_ADDR
// end ; end ;
35094: LD_VAR 0 3
35098: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35099: LD_INT 0
35101: PPUSH
35102: PPUSH
// result := true ;
35103: LD_ADDR_VAR 0 3
35107: PUSH
35108: LD_INT 1
35110: ST_TO_ADDR
// if array1 = array2 then
35111: LD_VAR 0 1
35115: PUSH
35116: LD_VAR 0 2
35120: EQUAL
35121: IFFALSE 35181
// begin for i = 1 to array1 do
35123: LD_ADDR_VAR 0 4
35127: PUSH
35128: DOUBLE
35129: LD_INT 1
35131: DEC
35132: ST_TO_ADDR
35133: LD_VAR 0 1
35137: PUSH
35138: FOR_TO
35139: IFFALSE 35177
// if array1 [ i ] <> array2 [ i ] then
35141: LD_VAR 0 1
35145: PUSH
35146: LD_VAR 0 4
35150: ARRAY
35151: PUSH
35152: LD_VAR 0 2
35156: PUSH
35157: LD_VAR 0 4
35161: ARRAY
35162: NONEQUAL
35163: IFFALSE 35175
// begin result := false ;
35165: LD_ADDR_VAR 0 3
35169: PUSH
35170: LD_INT 0
35172: ST_TO_ADDR
// break ;
35173: GO 35177
// end ;
35175: GO 35138
35177: POP
35178: POP
// end else
35179: GO 35189
// result := false ;
35181: LD_ADDR_VAR 0 3
35185: PUSH
35186: LD_INT 0
35188: ST_TO_ADDR
// end ;
35189: LD_VAR 0 3
35193: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35194: LD_INT 0
35196: PPUSH
35197: PPUSH
35198: PPUSH
// pom := GetBase ( fac ) ;
35199: LD_ADDR_VAR 0 5
35203: PUSH
35204: LD_VAR 0 1
35208: PPUSH
35209: CALL_OW 274
35213: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35214: LD_ADDR_VAR 0 4
35218: PUSH
35219: LD_VAR 0 2
35223: PUSH
35224: LD_INT 1
35226: ARRAY
35227: PPUSH
35228: LD_VAR 0 2
35232: PUSH
35233: LD_INT 2
35235: ARRAY
35236: PPUSH
35237: LD_VAR 0 2
35241: PUSH
35242: LD_INT 3
35244: ARRAY
35245: PPUSH
35246: LD_VAR 0 2
35250: PUSH
35251: LD_INT 4
35253: ARRAY
35254: PPUSH
35255: CALL_OW 449
35259: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35260: LD_ADDR_VAR 0 3
35264: PUSH
35265: LD_VAR 0 5
35269: PPUSH
35270: LD_INT 1
35272: PPUSH
35273: CALL_OW 275
35277: PUSH
35278: LD_VAR 0 4
35282: PUSH
35283: LD_INT 1
35285: ARRAY
35286: GREATEREQUAL
35287: PUSH
35288: LD_VAR 0 5
35292: PPUSH
35293: LD_INT 2
35295: PPUSH
35296: CALL_OW 275
35300: PUSH
35301: LD_VAR 0 4
35305: PUSH
35306: LD_INT 2
35308: ARRAY
35309: GREATEREQUAL
35310: AND
35311: PUSH
35312: LD_VAR 0 5
35316: PPUSH
35317: LD_INT 3
35319: PPUSH
35320: CALL_OW 275
35324: PUSH
35325: LD_VAR 0 4
35329: PUSH
35330: LD_INT 3
35332: ARRAY
35333: GREATEREQUAL
35334: AND
35335: ST_TO_ADDR
// end ;
35336: LD_VAR 0 3
35340: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35341: LD_INT 0
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
// pom := GetBase ( building ) ;
35347: LD_ADDR_VAR 0 3
35351: PUSH
35352: LD_VAR 0 1
35356: PPUSH
35357: CALL_OW 274
35361: ST_TO_ADDR
// if not pom then
35362: LD_VAR 0 3
35366: NOT
35367: IFFALSE 35371
// exit ;
35369: GO 35541
// btype := GetBType ( building ) ;
35371: LD_ADDR_VAR 0 5
35375: PUSH
35376: LD_VAR 0 1
35380: PPUSH
35381: CALL_OW 266
35385: ST_TO_ADDR
// if btype = b_armoury then
35386: LD_VAR 0 5
35390: PUSH
35391: LD_INT 4
35393: EQUAL
35394: IFFALSE 35404
// btype := b_barracks ;
35396: LD_ADDR_VAR 0 5
35400: PUSH
35401: LD_INT 5
35403: ST_TO_ADDR
// if btype = b_depot then
35404: LD_VAR 0 5
35408: PUSH
35409: LD_INT 0
35411: EQUAL
35412: IFFALSE 35422
// btype := b_warehouse ;
35414: LD_ADDR_VAR 0 5
35418: PUSH
35419: LD_INT 1
35421: ST_TO_ADDR
// if btype = b_workshop then
35422: LD_VAR 0 5
35426: PUSH
35427: LD_INT 2
35429: EQUAL
35430: IFFALSE 35440
// btype := b_factory ;
35432: LD_ADDR_VAR 0 5
35436: PUSH
35437: LD_INT 3
35439: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35440: LD_ADDR_VAR 0 4
35444: PUSH
35445: LD_VAR 0 5
35449: PPUSH
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 248
35459: PPUSH
35460: CALL_OW 450
35464: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35465: LD_ADDR_VAR 0 2
35469: PUSH
35470: LD_VAR 0 3
35474: PPUSH
35475: LD_INT 1
35477: PPUSH
35478: CALL_OW 275
35482: PUSH
35483: LD_VAR 0 4
35487: PUSH
35488: LD_INT 1
35490: ARRAY
35491: GREATEREQUAL
35492: PUSH
35493: LD_VAR 0 3
35497: PPUSH
35498: LD_INT 2
35500: PPUSH
35501: CALL_OW 275
35505: PUSH
35506: LD_VAR 0 4
35510: PUSH
35511: LD_INT 2
35513: ARRAY
35514: GREATEREQUAL
35515: AND
35516: PUSH
35517: LD_VAR 0 3
35521: PPUSH
35522: LD_INT 3
35524: PPUSH
35525: CALL_OW 275
35529: PUSH
35530: LD_VAR 0 4
35534: PUSH
35535: LD_INT 3
35537: ARRAY
35538: GREATEREQUAL
35539: AND
35540: ST_TO_ADDR
// end ;
35541: LD_VAR 0 2
35545: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35546: LD_INT 0
35548: PPUSH
35549: PPUSH
35550: PPUSH
// pom := GetBase ( building ) ;
35551: LD_ADDR_VAR 0 4
35555: PUSH
35556: LD_VAR 0 1
35560: PPUSH
35561: CALL_OW 274
35565: ST_TO_ADDR
// if not pom then
35566: LD_VAR 0 4
35570: NOT
35571: IFFALSE 35575
// exit ;
35573: GO 35676
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35575: LD_ADDR_VAR 0 5
35579: PUSH
35580: LD_VAR 0 2
35584: PPUSH
35585: LD_VAR 0 1
35589: PPUSH
35590: CALL_OW 248
35594: PPUSH
35595: CALL_OW 450
35599: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35600: LD_ADDR_VAR 0 3
35604: PUSH
35605: LD_VAR 0 4
35609: PPUSH
35610: LD_INT 1
35612: PPUSH
35613: CALL_OW 275
35617: PUSH
35618: LD_VAR 0 5
35622: PUSH
35623: LD_INT 1
35625: ARRAY
35626: GREATEREQUAL
35627: PUSH
35628: LD_VAR 0 4
35632: PPUSH
35633: LD_INT 2
35635: PPUSH
35636: CALL_OW 275
35640: PUSH
35641: LD_VAR 0 5
35645: PUSH
35646: LD_INT 2
35648: ARRAY
35649: GREATEREQUAL
35650: AND
35651: PUSH
35652: LD_VAR 0 4
35656: PPUSH
35657: LD_INT 3
35659: PPUSH
35660: CALL_OW 275
35664: PUSH
35665: LD_VAR 0 5
35669: PUSH
35670: LD_INT 3
35672: ARRAY
35673: GREATEREQUAL
35674: AND
35675: ST_TO_ADDR
// end ;
35676: LD_VAR 0 3
35680: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
35681: LD_INT 0
35683: PPUSH
35684: PPUSH
35685: PPUSH
35686: PPUSH
35687: PPUSH
35688: PPUSH
35689: PPUSH
35690: PPUSH
35691: PPUSH
35692: PPUSH
// result := false ;
35693: LD_ADDR_VAR 0 6
35697: PUSH
35698: LD_INT 0
35700: ST_TO_ADDR
// if not base or not btype or not x or not y then
35701: LD_VAR 0 1
35705: NOT
35706: PUSH
35707: LD_VAR 0 2
35711: NOT
35712: OR
35713: PUSH
35714: LD_VAR 0 3
35718: NOT
35719: OR
35720: PUSH
35721: LD_VAR 0 4
35725: NOT
35726: OR
35727: IFFALSE 35731
// exit ;
35729: GO 36340
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
35731: LD_ADDR_VAR 0 12
35735: PUSH
35736: LD_VAR 0 2
35740: PPUSH
35741: LD_VAR 0 3
35745: PPUSH
35746: LD_VAR 0 4
35750: PPUSH
35751: LD_VAR 0 5
35755: PPUSH
35756: LD_VAR 0 1
35760: PUSH
35761: LD_INT 1
35763: ARRAY
35764: PPUSH
35765: CALL_OW 248
35769: PPUSH
35770: LD_INT 0
35772: PPUSH
35773: CALL 37177 0 6
35777: ST_TO_ADDR
// if not hexes then
35778: LD_VAR 0 12
35782: NOT
35783: IFFALSE 35787
// exit ;
35785: GO 36340
// for i = 1 to hexes do
35787: LD_ADDR_VAR 0 7
35791: PUSH
35792: DOUBLE
35793: LD_INT 1
35795: DEC
35796: ST_TO_ADDR
35797: LD_VAR 0 12
35801: PUSH
35802: FOR_TO
35803: IFFALSE 36338
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35805: LD_ADDR_VAR 0 11
35809: PUSH
35810: LD_VAR 0 12
35814: PUSH
35815: LD_VAR 0 7
35819: ARRAY
35820: PUSH
35821: LD_INT 1
35823: ARRAY
35824: PPUSH
35825: LD_VAR 0 12
35829: PUSH
35830: LD_VAR 0 7
35834: ARRAY
35835: PUSH
35836: LD_INT 2
35838: ARRAY
35839: PPUSH
35840: CALL_OW 428
35844: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35845: LD_VAR 0 12
35849: PUSH
35850: LD_VAR 0 7
35854: ARRAY
35855: PUSH
35856: LD_INT 1
35858: ARRAY
35859: PPUSH
35860: LD_VAR 0 12
35864: PUSH
35865: LD_VAR 0 7
35869: ARRAY
35870: PUSH
35871: LD_INT 2
35873: ARRAY
35874: PPUSH
35875: CALL_OW 351
35879: PUSH
35880: LD_VAR 0 12
35884: PUSH
35885: LD_VAR 0 7
35889: ARRAY
35890: PUSH
35891: LD_INT 1
35893: ARRAY
35894: PPUSH
35895: LD_VAR 0 12
35899: PUSH
35900: LD_VAR 0 7
35904: ARRAY
35905: PUSH
35906: LD_INT 2
35908: ARRAY
35909: PPUSH
35910: CALL_OW 488
35914: NOT
35915: OR
35916: PUSH
35917: LD_VAR 0 11
35921: PPUSH
35922: CALL_OW 247
35926: PUSH
35927: LD_INT 3
35929: EQUAL
35930: OR
35931: IFFALSE 35937
// exit ;
35933: POP
35934: POP
35935: GO 36340
// if not tmp or not tmp in base then
35937: LD_VAR 0 11
35941: NOT
35942: PUSH
35943: LD_VAR 0 11
35947: PUSH
35948: LD_VAR 0 1
35952: IN
35953: NOT
35954: OR
35955: IFFALSE 35959
// continue ;
35957: GO 35802
// result := true ;
35959: LD_ADDR_VAR 0 6
35963: PUSH
35964: LD_INT 1
35966: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35967: LD_ADDR_VAR 0 15
35971: PUSH
35972: LD_VAR 0 1
35976: PPUSH
35977: LD_INT 22
35979: PUSH
35980: LD_VAR 0 11
35984: PPUSH
35985: CALL_OW 255
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 2
35996: PUSH
35997: LD_INT 30
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 30
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: LIST
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PPUSH
36026: CALL_OW 72
36030: ST_TO_ADDR
// if dep then
36031: LD_VAR 0 15
36035: IFFALSE 36171
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36037: LD_ADDR_VAR 0 14
36041: PUSH
36042: LD_VAR 0 15
36046: PUSH
36047: LD_INT 1
36049: ARRAY
36050: PPUSH
36051: CALL_OW 250
36055: PPUSH
36056: LD_VAR 0 15
36060: PUSH
36061: LD_INT 1
36063: ARRAY
36064: PPUSH
36065: CALL_OW 254
36069: PPUSH
36070: LD_INT 5
36072: PPUSH
36073: CALL_OW 272
36077: PUSH
36078: LD_VAR 0 15
36082: PUSH
36083: LD_INT 1
36085: ARRAY
36086: PPUSH
36087: CALL_OW 251
36091: PPUSH
36092: LD_VAR 0 15
36096: PUSH
36097: LD_INT 1
36099: ARRAY
36100: PPUSH
36101: CALL_OW 254
36105: PPUSH
36106: LD_INT 5
36108: PPUSH
36109: CALL_OW 273
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36118: LD_VAR 0 14
36122: PUSH
36123: LD_INT 1
36125: ARRAY
36126: PPUSH
36127: LD_VAR 0 14
36131: PUSH
36132: LD_INT 2
36134: ARRAY
36135: PPUSH
36136: CALL_OW 488
36140: IFFALSE 36171
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36142: LD_VAR 0 11
36146: PPUSH
36147: LD_VAR 0 14
36151: PUSH
36152: LD_INT 1
36154: ARRAY
36155: PPUSH
36156: LD_VAR 0 14
36160: PUSH
36161: LD_INT 2
36163: ARRAY
36164: PPUSH
36165: CALL_OW 111
// continue ;
36169: GO 35802
// end ; end ; r := GetDir ( tmp ) ;
36171: LD_ADDR_VAR 0 13
36175: PUSH
36176: LD_VAR 0 11
36180: PPUSH
36181: CALL_OW 254
36185: ST_TO_ADDR
// if r = 5 then
36186: LD_VAR 0 13
36190: PUSH
36191: LD_INT 5
36193: EQUAL
36194: IFFALSE 36204
// r := 0 ;
36196: LD_ADDR_VAR 0 13
36200: PUSH
36201: LD_INT 0
36203: ST_TO_ADDR
// for j = r to 5 do
36204: LD_ADDR_VAR 0 8
36208: PUSH
36209: DOUBLE
36210: LD_VAR 0 13
36214: DEC
36215: ST_TO_ADDR
36216: LD_INT 5
36218: PUSH
36219: FOR_TO
36220: IFFALSE 36334
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36222: LD_ADDR_VAR 0 9
36226: PUSH
36227: LD_VAR 0 11
36231: PPUSH
36232: CALL_OW 250
36236: PPUSH
36237: LD_VAR 0 8
36241: PPUSH
36242: LD_INT 2
36244: PPUSH
36245: CALL_OW 272
36249: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36250: LD_ADDR_VAR 0 10
36254: PUSH
36255: LD_VAR 0 11
36259: PPUSH
36260: CALL_OW 251
36264: PPUSH
36265: LD_VAR 0 8
36269: PPUSH
36270: LD_INT 2
36272: PPUSH
36273: CALL_OW 273
36277: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36278: LD_VAR 0 9
36282: PPUSH
36283: LD_VAR 0 10
36287: PPUSH
36288: CALL_OW 488
36292: PUSH
36293: LD_VAR 0 9
36297: PPUSH
36298: LD_VAR 0 10
36302: PPUSH
36303: CALL_OW 428
36307: NOT
36308: AND
36309: IFFALSE 36332
// begin ComMoveXY ( tmp , _x , _y ) ;
36311: LD_VAR 0 11
36315: PPUSH
36316: LD_VAR 0 9
36320: PPUSH
36321: LD_VAR 0 10
36325: PPUSH
36326: CALL_OW 111
// break ;
36330: GO 36334
// end ; end ;
36332: GO 36219
36334: POP
36335: POP
// end ;
36336: GO 35802
36338: POP
36339: POP
// end ;
36340: LD_VAR 0 6
36344: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36345: LD_INT 0
36347: PPUSH
36348: PPUSH
36349: PPUSH
36350: PPUSH
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
36355: PPUSH
36356: PPUSH
// result := false ;
36357: LD_ADDR_VAR 0 6
36361: PUSH
36362: LD_INT 0
36364: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36365: LD_VAR 0 1
36369: NOT
36370: PUSH
36371: LD_VAR 0 1
36375: PPUSH
36376: CALL_OW 266
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: IN
36391: NOT
36392: OR
36393: PUSH
36394: LD_VAR 0 2
36398: NOT
36399: OR
36400: PUSH
36401: LD_VAR 0 5
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 3
36417: PUSH
36418: LD_INT 4
36420: PUSH
36421: LD_INT 5
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: IN
36432: NOT
36433: OR
36434: PUSH
36435: LD_VAR 0 3
36439: PPUSH
36440: LD_VAR 0 4
36444: PPUSH
36445: CALL_OW 488
36449: NOT
36450: OR
36451: IFFALSE 36455
// exit ;
36453: GO 37172
// pom := GetBase ( depot ) ;
36455: LD_ADDR_VAR 0 10
36459: PUSH
36460: LD_VAR 0 1
36464: PPUSH
36465: CALL_OW 274
36469: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36470: LD_ADDR_VAR 0 11
36474: PUSH
36475: LD_VAR 0 2
36479: PPUSH
36480: LD_VAR 0 1
36484: PPUSH
36485: CALL_OW 248
36489: PPUSH
36490: CALL_OW 450
36494: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36495: LD_VAR 0 10
36499: PPUSH
36500: LD_INT 1
36502: PPUSH
36503: CALL_OW 275
36507: PUSH
36508: LD_VAR 0 11
36512: PUSH
36513: LD_INT 1
36515: ARRAY
36516: GREATEREQUAL
36517: PUSH
36518: LD_VAR 0 10
36522: PPUSH
36523: LD_INT 2
36525: PPUSH
36526: CALL_OW 275
36530: PUSH
36531: LD_VAR 0 11
36535: PUSH
36536: LD_INT 2
36538: ARRAY
36539: GREATEREQUAL
36540: AND
36541: PUSH
36542: LD_VAR 0 10
36546: PPUSH
36547: LD_INT 3
36549: PPUSH
36550: CALL_OW 275
36554: PUSH
36555: LD_VAR 0 11
36559: PUSH
36560: LD_INT 3
36562: ARRAY
36563: GREATEREQUAL
36564: AND
36565: NOT
36566: IFFALSE 36570
// exit ;
36568: GO 37172
// if GetBType ( depot ) = b_depot then
36570: LD_VAR 0 1
36574: PPUSH
36575: CALL_OW 266
36579: PUSH
36580: LD_INT 0
36582: EQUAL
36583: IFFALSE 36595
// dist := 28 else
36585: LD_ADDR_VAR 0 14
36589: PUSH
36590: LD_INT 28
36592: ST_TO_ADDR
36593: GO 36603
// dist := 36 ;
36595: LD_ADDR_VAR 0 14
36599: PUSH
36600: LD_INT 36
36602: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36603: LD_VAR 0 1
36607: PPUSH
36608: LD_VAR 0 3
36612: PPUSH
36613: LD_VAR 0 4
36617: PPUSH
36618: CALL_OW 297
36622: PUSH
36623: LD_VAR 0 14
36627: GREATER
36628: IFFALSE 36632
// exit ;
36630: GO 37172
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36632: LD_ADDR_VAR 0 12
36636: PUSH
36637: LD_VAR 0 2
36641: PPUSH
36642: LD_VAR 0 3
36646: PPUSH
36647: LD_VAR 0 4
36651: PPUSH
36652: LD_VAR 0 5
36656: PPUSH
36657: LD_VAR 0 1
36661: PPUSH
36662: CALL_OW 248
36666: PPUSH
36667: LD_INT 0
36669: PPUSH
36670: CALL 37177 0 6
36674: ST_TO_ADDR
// if not hexes then
36675: LD_VAR 0 12
36679: NOT
36680: IFFALSE 36684
// exit ;
36682: GO 37172
// hex := GetHexInfo ( x , y ) ;
36684: LD_ADDR_VAR 0 15
36688: PUSH
36689: LD_VAR 0 3
36693: PPUSH
36694: LD_VAR 0 4
36698: PPUSH
36699: CALL_OW 546
36703: ST_TO_ADDR
// if hex [ 1 ] then
36704: LD_VAR 0 15
36708: PUSH
36709: LD_INT 1
36711: ARRAY
36712: IFFALSE 36716
// exit ;
36714: GO 37172
// height := hex [ 2 ] ;
36716: LD_ADDR_VAR 0 13
36720: PUSH
36721: LD_VAR 0 15
36725: PUSH
36726: LD_INT 2
36728: ARRAY
36729: ST_TO_ADDR
// for i = 1 to hexes do
36730: LD_ADDR_VAR 0 7
36734: PUSH
36735: DOUBLE
36736: LD_INT 1
36738: DEC
36739: ST_TO_ADDR
36740: LD_VAR 0 12
36744: PUSH
36745: FOR_TO
36746: IFFALSE 37076
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36748: LD_VAR 0 12
36752: PUSH
36753: LD_VAR 0 7
36757: ARRAY
36758: PUSH
36759: LD_INT 1
36761: ARRAY
36762: PPUSH
36763: LD_VAR 0 12
36767: PUSH
36768: LD_VAR 0 7
36772: ARRAY
36773: PUSH
36774: LD_INT 2
36776: ARRAY
36777: PPUSH
36778: CALL_OW 488
36782: NOT
36783: PUSH
36784: LD_VAR 0 12
36788: PUSH
36789: LD_VAR 0 7
36793: ARRAY
36794: PUSH
36795: LD_INT 1
36797: ARRAY
36798: PPUSH
36799: LD_VAR 0 12
36803: PUSH
36804: LD_VAR 0 7
36808: ARRAY
36809: PUSH
36810: LD_INT 2
36812: ARRAY
36813: PPUSH
36814: CALL_OW 428
36818: PUSH
36819: LD_INT 0
36821: GREATER
36822: OR
36823: PUSH
36824: LD_VAR 0 12
36828: PUSH
36829: LD_VAR 0 7
36833: ARRAY
36834: PUSH
36835: LD_INT 1
36837: ARRAY
36838: PPUSH
36839: LD_VAR 0 12
36843: PUSH
36844: LD_VAR 0 7
36848: ARRAY
36849: PUSH
36850: LD_INT 2
36852: ARRAY
36853: PPUSH
36854: CALL_OW 351
36858: OR
36859: IFFALSE 36865
// exit ;
36861: POP
36862: POP
36863: GO 37172
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36865: LD_ADDR_VAR 0 8
36869: PUSH
36870: LD_VAR 0 12
36874: PUSH
36875: LD_VAR 0 7
36879: ARRAY
36880: PUSH
36881: LD_INT 1
36883: ARRAY
36884: PPUSH
36885: LD_VAR 0 12
36889: PUSH
36890: LD_VAR 0 7
36894: ARRAY
36895: PUSH
36896: LD_INT 2
36898: ARRAY
36899: PPUSH
36900: CALL_OW 546
36904: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36905: LD_VAR 0 8
36909: PUSH
36910: LD_INT 1
36912: ARRAY
36913: PUSH
36914: LD_VAR 0 8
36918: PUSH
36919: LD_INT 2
36921: ARRAY
36922: PUSH
36923: LD_VAR 0 13
36927: PUSH
36928: LD_INT 2
36930: PLUS
36931: GREATER
36932: OR
36933: PUSH
36934: LD_VAR 0 8
36938: PUSH
36939: LD_INT 2
36941: ARRAY
36942: PUSH
36943: LD_VAR 0 13
36947: PUSH
36948: LD_INT 2
36950: MINUS
36951: LESS
36952: OR
36953: PUSH
36954: LD_VAR 0 8
36958: PUSH
36959: LD_INT 3
36961: ARRAY
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: LD_INT 8
36968: PUSH
36969: LD_INT 9
36971: PUSH
36972: LD_INT 10
36974: PUSH
36975: LD_INT 11
36977: PUSH
36978: LD_INT 12
36980: PUSH
36981: LD_INT 13
36983: PUSH
36984: LD_INT 16
36986: PUSH
36987: LD_INT 17
36989: PUSH
36990: LD_INT 18
36992: PUSH
36993: LD_INT 19
36995: PUSH
36996: LD_INT 20
36998: PUSH
36999: LD_INT 21
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: IN
37017: NOT
37018: OR
37019: PUSH
37020: LD_VAR 0 8
37024: PUSH
37025: LD_INT 5
37027: ARRAY
37028: NOT
37029: OR
37030: PUSH
37031: LD_VAR 0 8
37035: PUSH
37036: LD_INT 6
37038: ARRAY
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: LD_INT 7
37048: PUSH
37049: LD_INT 9
37051: PUSH
37052: LD_INT 10
37054: PUSH
37055: LD_INT 11
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: IN
37066: NOT
37067: OR
37068: IFFALSE 37074
// exit ;
37070: POP
37071: POP
37072: GO 37172
// end ;
37074: GO 36745
37076: POP
37077: POP
// side := GetSide ( depot ) ;
37078: LD_ADDR_VAR 0 9
37082: PUSH
37083: LD_VAR 0 1
37087: PPUSH
37088: CALL_OW 255
37092: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37093: LD_VAR 0 9
37097: PPUSH
37098: LD_VAR 0 3
37102: PPUSH
37103: LD_VAR 0 4
37107: PPUSH
37108: LD_INT 20
37110: PPUSH
37111: CALL 29826 0 4
37115: PUSH
37116: LD_INT 4
37118: ARRAY
37119: IFFALSE 37123
// exit ;
37121: GO 37172
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37123: LD_VAR 0 2
37127: PUSH
37128: LD_INT 29
37130: PUSH
37131: LD_INT 30
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: IN
37138: PUSH
37139: LD_VAR 0 3
37143: PPUSH
37144: LD_VAR 0 4
37148: PPUSH
37149: LD_VAR 0 9
37153: PPUSH
37154: CALL_OW 440
37158: NOT
37159: AND
37160: IFFALSE 37164
// exit ;
37162: GO 37172
// result := true ;
37164: LD_ADDR_VAR 0 6
37168: PUSH
37169: LD_INT 1
37171: ST_TO_ADDR
// end ;
37172: LD_VAR 0 6
37176: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37177: LD_INT 0
37179: PPUSH
37180: PPUSH
37181: PPUSH
37182: PPUSH
37183: PPUSH
37184: PPUSH
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
37191: PPUSH
37192: PPUSH
37193: PPUSH
37194: PPUSH
37195: PPUSH
37196: PPUSH
37197: PPUSH
37198: PPUSH
37199: PPUSH
37200: PPUSH
37201: PPUSH
37202: PPUSH
37203: PPUSH
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
37209: PPUSH
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
37221: PPUSH
37222: PPUSH
37223: PPUSH
37224: PPUSH
37225: PPUSH
37226: PPUSH
37227: PPUSH
37228: PPUSH
37229: PPUSH
37230: PPUSH
37231: PPUSH
37232: PPUSH
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
// result = [ ] ;
37237: LD_ADDR_VAR 0 7
37241: PUSH
37242: EMPTY
37243: ST_TO_ADDR
// temp_list = [ ] ;
37244: LD_ADDR_VAR 0 9
37248: PUSH
37249: EMPTY
37250: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37251: LD_VAR 0 4
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: LD_INT 2
37264: PUSH
37265: LD_INT 3
37267: PUSH
37268: LD_INT 4
37270: PUSH
37271: LD_INT 5
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: IN
37282: NOT
37283: PUSH
37284: LD_VAR 0 1
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: IN
37299: PUSH
37300: LD_VAR 0 5
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: LD_INT 3
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: IN
37319: NOT
37320: AND
37321: OR
37322: IFFALSE 37326
// exit ;
37324: GO 55717
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37326: LD_VAR 0 1
37330: PUSH
37331: LD_INT 6
37333: PUSH
37334: LD_INT 7
37336: PUSH
37337: LD_INT 8
37339: PUSH
37340: LD_INT 13
37342: PUSH
37343: LD_INT 12
37345: PUSH
37346: LD_INT 15
37348: PUSH
37349: LD_INT 11
37351: PUSH
37352: LD_INT 14
37354: PUSH
37355: LD_INT 10
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: IN
37369: IFFALSE 37379
// btype = b_lab ;
37371: LD_ADDR_VAR 0 1
37375: PUSH
37376: LD_INT 6
37378: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37379: LD_VAR 0 6
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: LIST
37397: IN
37398: NOT
37399: PUSH
37400: LD_VAR 0 1
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: LD_INT 3
37416: PUSH
37417: LD_INT 6
37419: PUSH
37420: LD_INT 36
37422: PUSH
37423: LD_INT 4
37425: PUSH
37426: LD_INT 5
37428: PUSH
37429: LD_INT 31
37431: PUSH
37432: LD_INT 32
37434: PUSH
37435: LD_INT 33
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: IN
37451: NOT
37452: PUSH
37453: LD_VAR 0 6
37457: PUSH
37458: LD_INT 1
37460: EQUAL
37461: AND
37462: OR
37463: PUSH
37464: LD_VAR 0 1
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: LD_INT 3
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: IN
37479: NOT
37480: PUSH
37481: LD_VAR 0 6
37485: PUSH
37486: LD_INT 2
37488: EQUAL
37489: AND
37490: OR
37491: IFFALSE 37501
// mode = 0 ;
37493: LD_ADDR_VAR 0 6
37497: PUSH
37498: LD_INT 0
37500: ST_TO_ADDR
// case mode of 0 :
37501: LD_VAR 0 6
37505: PUSH
37506: LD_INT 0
37508: DOUBLE
37509: EQUAL
37510: IFTRUE 37514
37512: GO 48967
37514: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37515: LD_ADDR_VAR 0 11
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: NEG
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: LD_INT 2
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: LD_INT 2
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 3
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: LD_INT 2
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37708: LD_ADDR_VAR 0 12
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 2
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 3
37865: NEG
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 3
37876: NEG
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37904: LD_ADDR_VAR 0 13
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 2
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: LD_INT 2
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: NEG
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: NEG
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: NEG
38052: PUSH
38053: LD_INT 3
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 3
38063: NEG
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 3
38075: NEG
38076: PUSH
38077: LD_INT 3
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38103: LD_ADDR_VAR 0 14
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 1
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: NEG
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: LD_INT 2
38188: NEG
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: LD_INT 3
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 3
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38299: LD_ADDR_VAR 0 15
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 0
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 2
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 2
38422: NEG
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 3
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38492: LD_ADDR_VAR 0 16
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 1
38550: NEG
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 2
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 2
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: NEG
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: NEG
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 3
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 3
38649: PUSH
38650: LD_INT 3
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38685: LD_ADDR_VAR 0 17
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: LD_INT 1
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: LD_INT 2
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: LD_INT 2
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: LD_INT 1
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 2
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: LD_INT 2
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 2
38861: NEG
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 2
38872: NEG
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 2
38884: NEG
38885: PUSH
38886: LD_INT 2
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38915: LD_ADDR_VAR 0 18
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 2
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: NEG
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: LD_INT 1
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 2
39114: NEG
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39145: LD_ADDR_VAR 0 19
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: LD_INT 2
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 2
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: NEG
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39375: LD_ADDR_VAR 0 20
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: NEG
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 2
39574: NEG
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39605: LD_ADDR_VAR 0 21
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 2
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 2
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 2
39781: NEG
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39835: LD_ADDR_VAR 0 22
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: LD_INT 1
39855: NEG
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: NEG
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 2
39931: NEG
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: NEG
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: NEG
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40065: LD_ADDR_VAR 0 23
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: LD_INT 2
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 2
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: LD_INT 3
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 3
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40345: LD_ADDR_VAR 0 24
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 2
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 3
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40621: LD_ADDR_VAR 0 25
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: NEG
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 3
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 3
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 3
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40895: LD_ADDR_VAR 0 26
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: LD_INT 3
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 3
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41171: LD_ADDR_VAR 0 27
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: LD_INT 2
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 2
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 2
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: NEG
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 3
41404: NEG
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41451: LD_ADDR_VAR 0 28
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 2
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: NEG
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: LD_INT 3
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 3
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 3
41686: NEG
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 3
41698: NEG
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41733: LD_ADDR_VAR 0 29
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: NEG
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: LD_INT 3
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 3
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 3
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 3
41977: NEG
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42012: LD_ADDR_VAR 0 30
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 3
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: LD_INT 3
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 3
42255: NEG
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42290: LD_ADDR_VAR 0 31
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 2
42467: NEG
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 2
42479: NEG
42480: PUSH
42481: LD_INT 3
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 3
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 3
42533: NEG
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42568: LD_ADDR_VAR 0 32
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 2
42734: NEG
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: NEG
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: LD_INT 2
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 3
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: LD_INT 3
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 2
42800: NEG
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 3
42811: NEG
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42846: LD_ADDR_VAR 0 33
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: LD_INT 3
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: NEG
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43125: LD_ADDR_VAR 0 34
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: NEG
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 2
43304: NEG
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 3
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 3
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 3
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43405: LD_ADDR_VAR 0 35
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43517: LD_ADDR_VAR 0 36
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43629: LD_ADDR_VAR 0 37
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43741: LD_ADDR_VAR 0 38
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43853: LD_ADDR_VAR 0 39
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43965: LD_ADDR_VAR 0 40
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44077: LD_ADDR_VAR 0 41
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: NEG
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: LD_INT 3
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 3
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 3
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: LD_INT 3
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 3
44351: NEG
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 3
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 3
44374: NEG
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 3
44386: NEG
44387: PUSH
44388: LD_INT 3
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44427: LD_ADDR_VAR 0 42
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: LD_INT 3
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: LD_INT 3
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 3
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 3
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 3
44724: NEG
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: NEG
44737: PUSH
44738: LD_INT 3
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44777: LD_ADDR_VAR 0 43
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 2
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 3
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 3
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 3
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: LD_INT 3
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 3
45073: NEG
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 3
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45125: LD_ADDR_VAR 0 44
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: NEG
45316: PUSH
45317: LD_INT 3
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 3
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 3
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 3
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 3
45399: NEG
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 3
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 3
45422: NEG
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 3
45434: NEG
45435: PUSH
45436: LD_INT 3
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45475: LD_ADDR_VAR 0 45
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: LD_INT 3
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 3
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 3
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 3
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 3
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 3
45772: NEG
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 3
45784: NEG
45785: PUSH
45786: LD_INT 3
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45825: LD_ADDR_VAR 0 46
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 2
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 3
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 3
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 3
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 3
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: NEG
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 3
46121: NEG
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46173: LD_ADDR_VAR 0 47
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46324: LD_ADDR_VAR 0 48
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46471: LD_ADDR_VAR 0 49
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46615: LD_ADDR_VAR 0 50
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46759: LD_ADDR_VAR 0 51
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46906: LD_ADDR_VAR 0 52
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47057: LD_ADDR_VAR 0 53
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47287: LD_ADDR_VAR 0 54
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47517: LD_ADDR_VAR 0 55
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47747: LD_ADDR_VAR 0 56
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47977: LD_ADDR_VAR 0 57
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48207: LD_ADDR_VAR 0 58
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48437: LD_ADDR_VAR 0 59
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48525: LD_ADDR_VAR 0 60
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48613: LD_ADDR_VAR 0 61
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48701: LD_ADDR_VAR 0 62
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48789: LD_ADDR_VAR 0 63
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48877: LD_ADDR_VAR 0 64
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: ST_TO_ADDR
// end ; 1 :
48965: GO 54862
48967: LD_INT 1
48969: DOUBLE
48970: EQUAL
48971: IFTRUE 48975
48973: GO 51598
48975: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48976: LD_ADDR_VAR 0 11
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 3
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 3
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: LIST
49019: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49020: LD_ADDR_VAR 0 12
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: LIST
49060: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49061: LD_ADDR_VAR 0 13
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49101: LD_ADDR_VAR 0 14
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 3
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: LIST
49141: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49142: LD_ADDR_VAR 0 15
49146: PUSH
49147: LD_INT 2
49149: NEG
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 3
49160: NEG
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 3
49171: NEG
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: LIST
49185: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49186: LD_ADDR_VAR 0 16
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: LD_INT 3
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 3
49217: NEG
49218: PUSH
49219: LD_INT 3
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: LIST
49231: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49232: LD_ADDR_VAR 0 17
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 3
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: LD_INT 3
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49276: LD_ADDR_VAR 0 18
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 3
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 3
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: LIST
49316: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49317: LD_ADDR_VAR 0 19
49321: PUSH
49322: LD_INT 3
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 3
49334: PUSH
49335: LD_INT 3
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: LD_INT 3
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49357: LD_ADDR_VAR 0 20
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 3
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 3
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49398: LD_ADDR_VAR 0 21
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 3
49416: NEG
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 3
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: LIST
49441: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49442: LD_ADDR_VAR 0 22
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: LD_INT 3
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 3
49461: NEG
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: LD_INT 3
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: LIST
49487: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49488: LD_ADDR_VAR 0 23
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 3
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 4
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49532: LD_ADDR_VAR 0 24
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 3
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 4
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: LIST
49572: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49573: LD_ADDR_VAR 0 25
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: LD_INT 3
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 4
49590: PUSH
49591: LD_INT 3
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 3
49600: PUSH
49601: LD_INT 4
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: LIST
49612: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49613: LD_ADDR_VAR 0 26
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 3
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 4
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49654: LD_ADDR_VAR 0 27
49658: PUSH
49659: LD_INT 3
49661: NEG
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 4
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: LIST
49697: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49698: LD_ADDR_VAR 0 28
49702: PUSH
49703: LD_INT 3
49705: NEG
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 3
49717: NEG
49718: PUSH
49719: LD_INT 4
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 4
49729: NEG
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: LIST
49743: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49744: LD_ADDR_VAR 0 29
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 4
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 4
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 3
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 5
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 5
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 4
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: LD_INT 6
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 6
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 5
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49899: LD_ADDR_VAR 0 30
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 3
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 3
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 3
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 4
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 4
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 4
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 5
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 5
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 5
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 6
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 6
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50042: LD_ADDR_VAR 0 31
50046: PUSH
50047: LD_INT 3
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 3
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 4
50079: PUSH
50080: LD_INT 3
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 4
50089: PUSH
50090: LD_INT 4
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: PUSH
50100: LD_INT 4
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 5
50109: PUSH
50110: LD_INT 4
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 5
50119: PUSH
50120: LD_INT 5
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 4
50129: PUSH
50130: LD_INT 5
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 6
50139: PUSH
50140: LD_INT 5
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 6
50149: PUSH
50150: LD_INT 6
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 5
50159: PUSH
50160: LD_INT 6
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50181: LD_ADDR_VAR 0 32
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 3
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 4
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 4
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 3
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 5
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 5
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 4
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: LD_INT 6
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 6
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 5
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50324: LD_ADDR_VAR 0 33
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 3
50342: NEG
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 3
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 4
50376: NEG
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 4
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 4
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 5
50410: NEG
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 5
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 5
50433: NEG
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 6
50444: NEG
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 6
50455: NEG
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50479: LD_ADDR_VAR 0 34
50483: PUSH
50484: LD_INT 2
50486: NEG
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 3
50498: NEG
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 3
50510: NEG
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 3
50522: NEG
50523: PUSH
50524: LD_INT 4
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 4
50534: NEG
50535: PUSH
50536: LD_INT 3
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 4
50546: NEG
50547: PUSH
50548: LD_INT 4
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 4
50558: NEG
50559: PUSH
50560: LD_INT 5
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 5
50570: NEG
50571: PUSH
50572: LD_INT 4
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 5
50582: NEG
50583: PUSH
50584: LD_INT 5
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 5
50594: NEG
50595: PUSH
50596: LD_INT 6
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 6
50606: NEG
50607: PUSH
50608: LD_INT 5
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 6
50618: NEG
50619: PUSH
50620: LD_INT 6
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50642: LD_ADDR_VAR 0 41
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 3
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50686: LD_ADDR_VAR 0 42
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50727: LD_ADDR_VAR 0 43
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 3
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50767: LD_ADDR_VAR 0 44
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50808: LD_ADDR_VAR 0 45
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: LIST
50851: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50852: LD_ADDR_VAR 0 46
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: LD_INT 3
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 3
50883: NEG
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50898: LD_ADDR_VAR 0 47
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: LD_INT 3
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50931: LD_ADDR_VAR 0 48
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 2
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50962: LD_ADDR_VAR 0 49
50966: PUSH
50967: LD_INT 3
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 3
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50991: LD_ADDR_VAR 0 50
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 3
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51020: LD_ADDR_VAR 0 51
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: NEG
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51051: LD_ADDR_VAR 0 52
51055: PUSH
51056: LD_INT 3
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51084: LD_ADDR_VAR 0 53
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 3
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 3
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51128: LD_ADDR_VAR 0 54
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51169: LD_ADDR_VAR 0 55
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 3
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: LIST
51208: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51209: LD_ADDR_VAR 0 56
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 3
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 3
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: LIST
51249: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51250: LD_ADDR_VAR 0 57
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 3
51268: NEG
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: LIST
51293: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51294: LD_ADDR_VAR 0 58
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 3
51325: NEG
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: LIST
51339: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51340: LD_ADDR_VAR 0 59
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51384: LD_ADDR_VAR 0 60
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51425: LD_ADDR_VAR 0 61
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: LIST
51464: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51465: LD_ADDR_VAR 0 62
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51506: LD_ADDR_VAR 0 63
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51550: LD_ADDR_VAR 0 64
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: LIST
51595: ST_TO_ADDR
// end ; 2 :
51596: GO 54862
51598: LD_INT 2
51600: DOUBLE
51601: EQUAL
51602: IFTRUE 51606
51604: GO 54861
51606: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51607: LD_ADDR_VAR 0 29
51611: PUSH
51612: LD_INT 4
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 4
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 5
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 5
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 4
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 3
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 5
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 4
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 4
51737: PUSH
51738: LD_INT 4
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: LD_INT 4
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 4
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 4
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 4
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 3
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 4
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 5
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 5
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 4
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 3
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: LD_INT 5
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: LD_INT 3
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 4
51946: NEG
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 4
51957: NEG
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 4
51969: NEG
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 4
51992: NEG
51993: PUSH
51994: LD_INT 4
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 4
52004: NEG
52005: PUSH
52006: LD_INT 5
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 4
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: LD_INT 3
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 4
52040: NEG
52041: PUSH
52042: LD_INT 3
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 5
52052: NEG
52053: PUSH
52054: LD_INT 4
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 5
52064: NEG
52065: PUSH
52066: LD_INT 5
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 3
52076: NEG
52077: PUSH
52078: LD_INT 5
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 5
52088: NEG
52089: PUSH
52090: LD_INT 3
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52145: LD_ADDR_VAR 0 30
52149: PUSH
52150: LD_INT 4
52152: PUSH
52153: LD_INT 4
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 4
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 5
52172: PUSH
52173: LD_INT 4
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 5
52182: PUSH
52183: LD_INT 5
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 4
52192: PUSH
52193: LD_INT 5
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: LD_INT 4
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 5
52222: PUSH
52223: LD_INT 3
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: LD_INT 5
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: LD_INT 4
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 4
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 4
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 4
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 4
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 3
52358: NEG
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 4
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 5
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 5
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 5
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: NEG
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: LD_INT 3
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 3
52449: NEG
52450: PUSH
52451: LD_INT 4
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: LD_INT 3
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 3
52485: NEG
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 4
52497: NEG
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 4
52509: NEG
52510: PUSH
52511: LD_INT 4
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: LD_INT 4
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 4
52533: NEG
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 4
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 5
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 4
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 3
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 4
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 5
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 3
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: LD_INT 5
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52692: LD_ADDR_VAR 0 31
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 4
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 4
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 5
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 5
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: LD_INT 4
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 5
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: LD_INT 3
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: NEG
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: NEG
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 3
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 4
52848: NEG
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 4
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 4
52871: NEG
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 4
52894: NEG
52895: PUSH
52896: LD_INT 4
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 4
52906: NEG
52907: PUSH
52908: LD_INT 5
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: LD_INT 4
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 3
52930: NEG
52931: PUSH
52932: LD_INT 3
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 4
52942: NEG
52943: PUSH
52944: LD_INT 3
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 5
52954: NEG
52955: PUSH
52956: LD_INT 4
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 5
52966: NEG
52967: PUSH
52968: LD_INT 5
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 3
52978: NEG
52979: PUSH
52980: LD_INT 5
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 5
52990: NEG
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 4
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 4
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 4
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 4
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 4
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 5
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 5
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 4
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: LD_INT 2
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 5
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53242: LD_ADDR_VAR 0 32
53246: PUSH
53247: LD_INT 4
53249: NEG
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 4
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: NEG
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 4
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 5
53305: NEG
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 5
53316: NEG
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 5
53328: NEG
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: NEG
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: NEG
53352: PUSH
53353: LD_INT 3
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: NEG
53364: PUSH
53365: LD_INT 4
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: LD_INT 3
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 3
53399: NEG
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 4
53411: NEG
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 4
53423: NEG
53424: PUSH
53425: LD_INT 4
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 4
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 4
53447: NEG
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 4
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 5
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 4
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: LD_INT 3
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 3
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 4
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: LD_INT 5
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 3
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 5
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 3
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 3
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 4
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 4
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 4
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 4
53654: PUSH
53655: LD_INT 4
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 4
53664: PUSH
53665: LD_INT 3
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 5
53674: PUSH
53675: LD_INT 4
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 5
53684: PUSH
53685: LD_INT 5
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 4
53694: PUSH
53695: LD_INT 5
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: LD_INT 4
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 5
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: LD_INT 5
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53789: LD_ADDR_VAR 0 33
53793: PUSH
53794: LD_INT 4
53796: NEG
53797: PUSH
53798: LD_INT 4
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 4
53808: NEG
53809: PUSH
53810: LD_INT 5
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: LD_INT 4
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 4
53844: NEG
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 5
53856: NEG
53857: PUSH
53858: LD_INT 4
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 5
53868: NEG
53869: PUSH
53870: LD_INT 5
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 3
53880: NEG
53881: PUSH
53882: LD_INT 5
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 5
53892: NEG
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 3
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 4
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 3
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 4
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 4
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 4
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 4
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 5
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 5
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 4
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 3
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 5
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: LD_INT 3
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 4
54119: PUSH
54120: LD_INT 3
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: LD_INT 4
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: LD_INT 4
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 4
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: LD_INT 4
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 4
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 3
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 4
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 5
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 5
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: LD_INT 4
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 3
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 5
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 3
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54327: LD_ADDR_VAR 0 34
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 4
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 5
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 4
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 3
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 3
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: LD_INT 4
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: LD_INT 5
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 3
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 5
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 4
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 4
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 4
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 4
54529: PUSH
54530: LD_INT 4
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 4
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 5
54549: PUSH
54550: LD_INT 4
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 5
54559: PUSH
54560: LD_INT 5
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 4
54569: PUSH
54570: LD_INT 5
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: PUSH
54580: LD_INT 4
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 3
54589: PUSH
54590: LD_INT 3
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 5
54599: PUSH
54600: LD_INT 3
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: PUSH
54610: LD_INT 5
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 4
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 4
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: LD_INT 4
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 4
54712: NEG
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 4
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 3
54735: NEG
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 5
54768: NEG
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 5
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 5
54791: NEG
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: ST_TO_ADDR
// end ; end ;
54859: GO 54862
54861: POP
// case btype of b_depot , b_warehouse :
54862: LD_VAR 0 1
54866: PUSH
54867: LD_INT 0
54869: DOUBLE
54870: EQUAL
54871: IFTRUE 54881
54873: LD_INT 1
54875: DOUBLE
54876: EQUAL
54877: IFTRUE 54881
54879: GO 55082
54881: POP
// case nation of nation_american :
54882: LD_VAR 0 5
54886: PUSH
54887: LD_INT 1
54889: DOUBLE
54890: EQUAL
54891: IFTRUE 54895
54893: GO 54951
54895: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54896: LD_ADDR_VAR 0 9
54900: PUSH
54901: LD_VAR 0 11
54905: PUSH
54906: LD_VAR 0 12
54910: PUSH
54911: LD_VAR 0 13
54915: PUSH
54916: LD_VAR 0 14
54920: PUSH
54921: LD_VAR 0 15
54925: PUSH
54926: LD_VAR 0 16
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: PUSH
54939: LD_VAR 0 4
54943: PUSH
54944: LD_INT 1
54946: PLUS
54947: ARRAY
54948: ST_TO_ADDR
54949: GO 55080
54951: LD_INT 2
54953: DOUBLE
54954: EQUAL
54955: IFTRUE 54959
54957: GO 55015
54959: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54960: LD_ADDR_VAR 0 9
54964: PUSH
54965: LD_VAR 0 17
54969: PUSH
54970: LD_VAR 0 18
54974: PUSH
54975: LD_VAR 0 19
54979: PUSH
54980: LD_VAR 0 20
54984: PUSH
54985: LD_VAR 0 21
54989: PUSH
54990: LD_VAR 0 22
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: PUSH
55003: LD_VAR 0 4
55007: PUSH
55008: LD_INT 1
55010: PLUS
55011: ARRAY
55012: ST_TO_ADDR
55013: GO 55080
55015: LD_INT 3
55017: DOUBLE
55018: EQUAL
55019: IFTRUE 55023
55021: GO 55079
55023: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55024: LD_ADDR_VAR 0 9
55028: PUSH
55029: LD_VAR 0 23
55033: PUSH
55034: LD_VAR 0 24
55038: PUSH
55039: LD_VAR 0 25
55043: PUSH
55044: LD_VAR 0 26
55048: PUSH
55049: LD_VAR 0 27
55053: PUSH
55054: LD_VAR 0 28
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: PUSH
55067: LD_VAR 0 4
55071: PUSH
55072: LD_INT 1
55074: PLUS
55075: ARRAY
55076: ST_TO_ADDR
55077: GO 55080
55079: POP
55080: GO 55635
55082: LD_INT 2
55084: DOUBLE
55085: EQUAL
55086: IFTRUE 55096
55088: LD_INT 3
55090: DOUBLE
55091: EQUAL
55092: IFTRUE 55096
55094: GO 55152
55096: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55097: LD_ADDR_VAR 0 9
55101: PUSH
55102: LD_VAR 0 29
55106: PUSH
55107: LD_VAR 0 30
55111: PUSH
55112: LD_VAR 0 31
55116: PUSH
55117: LD_VAR 0 32
55121: PUSH
55122: LD_VAR 0 33
55126: PUSH
55127: LD_VAR 0 34
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: PUSH
55140: LD_VAR 0 4
55144: PUSH
55145: LD_INT 1
55147: PLUS
55148: ARRAY
55149: ST_TO_ADDR
55150: GO 55635
55152: LD_INT 16
55154: DOUBLE
55155: EQUAL
55156: IFTRUE 55214
55158: LD_INT 17
55160: DOUBLE
55161: EQUAL
55162: IFTRUE 55214
55164: LD_INT 18
55166: DOUBLE
55167: EQUAL
55168: IFTRUE 55214
55170: LD_INT 19
55172: DOUBLE
55173: EQUAL
55174: IFTRUE 55214
55176: LD_INT 22
55178: DOUBLE
55179: EQUAL
55180: IFTRUE 55214
55182: LD_INT 20
55184: DOUBLE
55185: EQUAL
55186: IFTRUE 55214
55188: LD_INT 21
55190: DOUBLE
55191: EQUAL
55192: IFTRUE 55214
55194: LD_INT 23
55196: DOUBLE
55197: EQUAL
55198: IFTRUE 55214
55200: LD_INT 24
55202: DOUBLE
55203: EQUAL
55204: IFTRUE 55214
55206: LD_INT 25
55208: DOUBLE
55209: EQUAL
55210: IFTRUE 55214
55212: GO 55270
55214: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55215: LD_ADDR_VAR 0 9
55219: PUSH
55220: LD_VAR 0 35
55224: PUSH
55225: LD_VAR 0 36
55229: PUSH
55230: LD_VAR 0 37
55234: PUSH
55235: LD_VAR 0 38
55239: PUSH
55240: LD_VAR 0 39
55244: PUSH
55245: LD_VAR 0 40
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: PUSH
55258: LD_VAR 0 4
55262: PUSH
55263: LD_INT 1
55265: PLUS
55266: ARRAY
55267: ST_TO_ADDR
55268: GO 55635
55270: LD_INT 6
55272: DOUBLE
55273: EQUAL
55274: IFTRUE 55326
55276: LD_INT 7
55278: DOUBLE
55279: EQUAL
55280: IFTRUE 55326
55282: LD_INT 8
55284: DOUBLE
55285: EQUAL
55286: IFTRUE 55326
55288: LD_INT 13
55290: DOUBLE
55291: EQUAL
55292: IFTRUE 55326
55294: LD_INT 12
55296: DOUBLE
55297: EQUAL
55298: IFTRUE 55326
55300: LD_INT 15
55302: DOUBLE
55303: EQUAL
55304: IFTRUE 55326
55306: LD_INT 11
55308: DOUBLE
55309: EQUAL
55310: IFTRUE 55326
55312: LD_INT 14
55314: DOUBLE
55315: EQUAL
55316: IFTRUE 55326
55318: LD_INT 10
55320: DOUBLE
55321: EQUAL
55322: IFTRUE 55326
55324: GO 55382
55326: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55327: LD_ADDR_VAR 0 9
55331: PUSH
55332: LD_VAR 0 41
55336: PUSH
55337: LD_VAR 0 42
55341: PUSH
55342: LD_VAR 0 43
55346: PUSH
55347: LD_VAR 0 44
55351: PUSH
55352: LD_VAR 0 45
55356: PUSH
55357: LD_VAR 0 46
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: PUSH
55370: LD_VAR 0 4
55374: PUSH
55375: LD_INT 1
55377: PLUS
55378: ARRAY
55379: ST_TO_ADDR
55380: GO 55635
55382: LD_INT 36
55384: DOUBLE
55385: EQUAL
55386: IFTRUE 55390
55388: GO 55446
55390: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55391: LD_ADDR_VAR 0 9
55395: PUSH
55396: LD_VAR 0 47
55400: PUSH
55401: LD_VAR 0 48
55405: PUSH
55406: LD_VAR 0 49
55410: PUSH
55411: LD_VAR 0 50
55415: PUSH
55416: LD_VAR 0 51
55420: PUSH
55421: LD_VAR 0 52
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: PUSH
55434: LD_VAR 0 4
55438: PUSH
55439: LD_INT 1
55441: PLUS
55442: ARRAY
55443: ST_TO_ADDR
55444: GO 55635
55446: LD_INT 4
55448: DOUBLE
55449: EQUAL
55450: IFTRUE 55472
55452: LD_INT 5
55454: DOUBLE
55455: EQUAL
55456: IFTRUE 55472
55458: LD_INT 34
55460: DOUBLE
55461: EQUAL
55462: IFTRUE 55472
55464: LD_INT 37
55466: DOUBLE
55467: EQUAL
55468: IFTRUE 55472
55470: GO 55528
55472: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55473: LD_ADDR_VAR 0 9
55477: PUSH
55478: LD_VAR 0 53
55482: PUSH
55483: LD_VAR 0 54
55487: PUSH
55488: LD_VAR 0 55
55492: PUSH
55493: LD_VAR 0 56
55497: PUSH
55498: LD_VAR 0 57
55502: PUSH
55503: LD_VAR 0 58
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: PUSH
55516: LD_VAR 0 4
55520: PUSH
55521: LD_INT 1
55523: PLUS
55524: ARRAY
55525: ST_TO_ADDR
55526: GO 55635
55528: LD_INT 31
55530: DOUBLE
55531: EQUAL
55532: IFTRUE 55578
55534: LD_INT 32
55536: DOUBLE
55537: EQUAL
55538: IFTRUE 55578
55540: LD_INT 33
55542: DOUBLE
55543: EQUAL
55544: IFTRUE 55578
55546: LD_INT 27
55548: DOUBLE
55549: EQUAL
55550: IFTRUE 55578
55552: LD_INT 26
55554: DOUBLE
55555: EQUAL
55556: IFTRUE 55578
55558: LD_INT 28
55560: DOUBLE
55561: EQUAL
55562: IFTRUE 55578
55564: LD_INT 29
55566: DOUBLE
55567: EQUAL
55568: IFTRUE 55578
55570: LD_INT 30
55572: DOUBLE
55573: EQUAL
55574: IFTRUE 55578
55576: GO 55634
55578: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55579: LD_ADDR_VAR 0 9
55583: PUSH
55584: LD_VAR 0 59
55588: PUSH
55589: LD_VAR 0 60
55593: PUSH
55594: LD_VAR 0 61
55598: PUSH
55599: LD_VAR 0 62
55603: PUSH
55604: LD_VAR 0 63
55608: PUSH
55609: LD_VAR 0 64
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: PUSH
55622: LD_VAR 0 4
55626: PUSH
55627: LD_INT 1
55629: PLUS
55630: ARRAY
55631: ST_TO_ADDR
55632: GO 55635
55634: POP
// temp_list2 = [ ] ;
55635: LD_ADDR_VAR 0 10
55639: PUSH
55640: EMPTY
55641: ST_TO_ADDR
// for i in temp_list do
55642: LD_ADDR_VAR 0 8
55646: PUSH
55647: LD_VAR 0 9
55651: PUSH
55652: FOR_IN
55653: IFFALSE 55705
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55655: LD_ADDR_VAR 0 10
55659: PUSH
55660: LD_VAR 0 10
55664: PUSH
55665: LD_VAR 0 8
55669: PUSH
55670: LD_INT 1
55672: ARRAY
55673: PUSH
55674: LD_VAR 0 2
55678: PLUS
55679: PUSH
55680: LD_VAR 0 8
55684: PUSH
55685: LD_INT 2
55687: ARRAY
55688: PUSH
55689: LD_VAR 0 3
55693: PLUS
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: EMPTY
55700: LIST
55701: ADD
55702: ST_TO_ADDR
55703: GO 55652
55705: POP
55706: POP
// result = temp_list2 ;
55707: LD_ADDR_VAR 0 7
55711: PUSH
55712: LD_VAR 0 10
55716: ST_TO_ADDR
// end ;
55717: LD_VAR 0 7
55721: RET
// export function EnemyInRange ( unit , dist ) ; begin
55722: LD_INT 0
55724: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55725: LD_ADDR_VAR 0 3
55729: PUSH
55730: LD_VAR 0 1
55734: PPUSH
55735: CALL_OW 255
55739: PPUSH
55740: LD_VAR 0 1
55744: PPUSH
55745: CALL_OW 250
55749: PPUSH
55750: LD_VAR 0 1
55754: PPUSH
55755: CALL_OW 251
55759: PPUSH
55760: LD_VAR 0 2
55764: PPUSH
55765: CALL 29826 0 4
55769: PUSH
55770: LD_INT 4
55772: ARRAY
55773: ST_TO_ADDR
// end ;
55774: LD_VAR 0 3
55778: RET
// export function PlayerSeeMe ( unit ) ; begin
55779: LD_INT 0
55781: PPUSH
// result := See ( your_side , unit ) ;
55782: LD_ADDR_VAR 0 2
55786: PUSH
55787: LD_OWVAR 2
55791: PPUSH
55792: LD_VAR 0 1
55796: PPUSH
55797: CALL_OW 292
55801: ST_TO_ADDR
// end ;
55802: LD_VAR 0 2
55806: RET
// export function ReverseDir ( unit ) ; begin
55807: LD_INT 0
55809: PPUSH
// if not unit then
55810: LD_VAR 0 1
55814: NOT
55815: IFFALSE 55819
// exit ;
55817: GO 55842
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55819: LD_ADDR_VAR 0 2
55823: PUSH
55824: LD_VAR 0 1
55828: PPUSH
55829: CALL_OW 254
55833: PUSH
55834: LD_INT 3
55836: PLUS
55837: PUSH
55838: LD_INT 6
55840: MOD
55841: ST_TO_ADDR
// end ;
55842: LD_VAR 0 2
55846: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55847: LD_INT 0
55849: PPUSH
55850: PPUSH
55851: PPUSH
55852: PPUSH
55853: PPUSH
// if not hexes then
55854: LD_VAR 0 2
55858: NOT
55859: IFFALSE 55863
// exit ;
55861: GO 56011
// dist := 9999 ;
55863: LD_ADDR_VAR 0 5
55867: PUSH
55868: LD_INT 9999
55870: ST_TO_ADDR
// for i = 1 to hexes do
55871: LD_ADDR_VAR 0 4
55875: PUSH
55876: DOUBLE
55877: LD_INT 1
55879: DEC
55880: ST_TO_ADDR
55881: LD_VAR 0 2
55885: PUSH
55886: FOR_TO
55887: IFFALSE 55999
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55889: LD_VAR 0 1
55893: PPUSH
55894: LD_VAR 0 2
55898: PUSH
55899: LD_VAR 0 4
55903: ARRAY
55904: PUSH
55905: LD_INT 1
55907: ARRAY
55908: PPUSH
55909: LD_VAR 0 2
55913: PUSH
55914: LD_VAR 0 4
55918: ARRAY
55919: PUSH
55920: LD_INT 2
55922: ARRAY
55923: PPUSH
55924: CALL_OW 297
55928: PUSH
55929: LD_VAR 0 5
55933: LESS
55934: IFFALSE 55997
// begin hex := hexes [ i ] ;
55936: LD_ADDR_VAR 0 7
55940: PUSH
55941: LD_VAR 0 2
55945: PUSH
55946: LD_VAR 0 4
55950: ARRAY
55951: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55952: LD_ADDR_VAR 0 5
55956: PUSH
55957: LD_VAR 0 1
55961: PPUSH
55962: LD_VAR 0 2
55966: PUSH
55967: LD_VAR 0 4
55971: ARRAY
55972: PUSH
55973: LD_INT 1
55975: ARRAY
55976: PPUSH
55977: LD_VAR 0 2
55981: PUSH
55982: LD_VAR 0 4
55986: ARRAY
55987: PUSH
55988: LD_INT 2
55990: ARRAY
55991: PPUSH
55992: CALL_OW 297
55996: ST_TO_ADDR
// end ; end ;
55997: GO 55886
55999: POP
56000: POP
// result := hex ;
56001: LD_ADDR_VAR 0 3
56005: PUSH
56006: LD_VAR 0 7
56010: ST_TO_ADDR
// end ;
56011: LD_VAR 0 3
56015: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56016: LD_INT 0
56018: PPUSH
56019: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56020: LD_VAR 0 1
56024: NOT
56025: PUSH
56026: LD_VAR 0 1
56030: PUSH
56031: LD_INT 21
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 23
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PPUSH
56055: CALL_OW 69
56059: IN
56060: NOT
56061: OR
56062: IFFALSE 56066
// exit ;
56064: GO 56113
// for i = 1 to 3 do
56066: LD_ADDR_VAR 0 3
56070: PUSH
56071: DOUBLE
56072: LD_INT 1
56074: DEC
56075: ST_TO_ADDR
56076: LD_INT 3
56078: PUSH
56079: FOR_TO
56080: IFFALSE 56111
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56082: LD_VAR 0 1
56086: PPUSH
56087: CALL_OW 250
56091: PPUSH
56092: LD_VAR 0 1
56096: PPUSH
56097: CALL_OW 251
56101: PPUSH
56102: LD_INT 1
56104: PPUSH
56105: CALL_OW 453
56109: GO 56079
56111: POP
56112: POP
// end ;
56113: LD_VAR 0 2
56117: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56118: LD_INT 0
56120: PPUSH
56121: PPUSH
56122: PPUSH
56123: PPUSH
56124: PPUSH
56125: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56126: LD_VAR 0 1
56130: NOT
56131: PUSH
56132: LD_VAR 0 2
56136: NOT
56137: OR
56138: PUSH
56139: LD_VAR 0 1
56143: PPUSH
56144: CALL_OW 314
56148: OR
56149: IFFALSE 56153
// exit ;
56151: GO 56594
// x := GetX ( enemy_unit ) ;
56153: LD_ADDR_VAR 0 7
56157: PUSH
56158: LD_VAR 0 2
56162: PPUSH
56163: CALL_OW 250
56167: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56168: LD_ADDR_VAR 0 8
56172: PUSH
56173: LD_VAR 0 2
56177: PPUSH
56178: CALL_OW 251
56182: ST_TO_ADDR
// if not x or not y then
56183: LD_VAR 0 7
56187: NOT
56188: PUSH
56189: LD_VAR 0 8
56193: NOT
56194: OR
56195: IFFALSE 56199
// exit ;
56197: GO 56594
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56199: LD_ADDR_VAR 0 6
56203: PUSH
56204: LD_VAR 0 7
56208: PPUSH
56209: LD_INT 0
56211: PPUSH
56212: LD_INT 4
56214: PPUSH
56215: CALL_OW 272
56219: PUSH
56220: LD_VAR 0 8
56224: PPUSH
56225: LD_INT 0
56227: PPUSH
56228: LD_INT 4
56230: PPUSH
56231: CALL_OW 273
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_VAR 0 7
56244: PPUSH
56245: LD_INT 1
56247: PPUSH
56248: LD_INT 4
56250: PPUSH
56251: CALL_OW 272
56255: PUSH
56256: LD_VAR 0 8
56260: PPUSH
56261: LD_INT 1
56263: PPUSH
56264: LD_INT 4
56266: PPUSH
56267: CALL_OW 273
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_VAR 0 7
56280: PPUSH
56281: LD_INT 2
56283: PPUSH
56284: LD_INT 4
56286: PPUSH
56287: CALL_OW 272
56291: PUSH
56292: LD_VAR 0 8
56296: PPUSH
56297: LD_INT 2
56299: PPUSH
56300: LD_INT 4
56302: PPUSH
56303: CALL_OW 273
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_VAR 0 7
56316: PPUSH
56317: LD_INT 3
56319: PPUSH
56320: LD_INT 4
56322: PPUSH
56323: CALL_OW 272
56327: PUSH
56328: LD_VAR 0 8
56332: PPUSH
56333: LD_INT 3
56335: PPUSH
56336: LD_INT 4
56338: PPUSH
56339: CALL_OW 273
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_VAR 0 7
56352: PPUSH
56353: LD_INT 4
56355: PPUSH
56356: LD_INT 4
56358: PPUSH
56359: CALL_OW 272
56363: PUSH
56364: LD_VAR 0 8
56368: PPUSH
56369: LD_INT 4
56371: PPUSH
56372: LD_INT 4
56374: PPUSH
56375: CALL_OW 273
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_VAR 0 7
56388: PPUSH
56389: LD_INT 5
56391: PPUSH
56392: LD_INT 4
56394: PPUSH
56395: CALL_OW 272
56399: PUSH
56400: LD_VAR 0 8
56404: PPUSH
56405: LD_INT 5
56407: PPUSH
56408: LD_INT 4
56410: PPUSH
56411: CALL_OW 273
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: ST_TO_ADDR
// for i = tmp downto 1 do
56428: LD_ADDR_VAR 0 4
56432: PUSH
56433: DOUBLE
56434: LD_VAR 0 6
56438: INC
56439: ST_TO_ADDR
56440: LD_INT 1
56442: PUSH
56443: FOR_DOWNTO
56444: IFFALSE 56545
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56446: LD_VAR 0 6
56450: PUSH
56451: LD_VAR 0 4
56455: ARRAY
56456: PUSH
56457: LD_INT 1
56459: ARRAY
56460: PPUSH
56461: LD_VAR 0 6
56465: PUSH
56466: LD_VAR 0 4
56470: ARRAY
56471: PUSH
56472: LD_INT 2
56474: ARRAY
56475: PPUSH
56476: CALL_OW 488
56480: NOT
56481: PUSH
56482: LD_VAR 0 6
56486: PUSH
56487: LD_VAR 0 4
56491: ARRAY
56492: PUSH
56493: LD_INT 1
56495: ARRAY
56496: PPUSH
56497: LD_VAR 0 6
56501: PUSH
56502: LD_VAR 0 4
56506: ARRAY
56507: PUSH
56508: LD_INT 2
56510: ARRAY
56511: PPUSH
56512: CALL_OW 428
56516: PUSH
56517: LD_INT 0
56519: NONEQUAL
56520: OR
56521: IFFALSE 56543
// tmp := Delete ( tmp , i ) ;
56523: LD_ADDR_VAR 0 6
56527: PUSH
56528: LD_VAR 0 6
56532: PPUSH
56533: LD_VAR 0 4
56537: PPUSH
56538: CALL_OW 3
56542: ST_TO_ADDR
56543: GO 56443
56545: POP
56546: POP
// j := GetClosestHex ( unit , tmp ) ;
56547: LD_ADDR_VAR 0 5
56551: PUSH
56552: LD_VAR 0 1
56556: PPUSH
56557: LD_VAR 0 6
56561: PPUSH
56562: CALL 55847 0 2
56566: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56567: LD_VAR 0 1
56571: PPUSH
56572: LD_VAR 0 5
56576: PUSH
56577: LD_INT 1
56579: ARRAY
56580: PPUSH
56581: LD_VAR 0 5
56585: PUSH
56586: LD_INT 2
56588: ARRAY
56589: PPUSH
56590: CALL_OW 111
// end ;
56594: LD_VAR 0 3
56598: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56599: LD_INT 0
56601: PPUSH
56602: PPUSH
56603: PPUSH
// uc_side = 0 ;
56604: LD_ADDR_OWVAR 20
56608: PUSH
56609: LD_INT 0
56611: ST_TO_ADDR
// uc_nation = 0 ;
56612: LD_ADDR_OWVAR 21
56616: PUSH
56617: LD_INT 0
56619: ST_TO_ADDR
// InitHc_All ( ) ;
56620: CALL_OW 584
// InitVc ;
56624: CALL_OW 20
// if mastodonts then
56628: LD_VAR 0 6
56632: IFFALSE 56699
// for i = 1 to mastodonts do
56634: LD_ADDR_VAR 0 11
56638: PUSH
56639: DOUBLE
56640: LD_INT 1
56642: DEC
56643: ST_TO_ADDR
56644: LD_VAR 0 6
56648: PUSH
56649: FOR_TO
56650: IFFALSE 56697
// begin vc_chassis := 31 ;
56652: LD_ADDR_OWVAR 37
56656: PUSH
56657: LD_INT 31
56659: ST_TO_ADDR
// vc_control := control_rider ;
56660: LD_ADDR_OWVAR 38
56664: PUSH
56665: LD_INT 4
56667: ST_TO_ADDR
// animal := CreateVehicle ;
56668: LD_ADDR_VAR 0 12
56672: PUSH
56673: CALL_OW 45
56677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56678: LD_VAR 0 12
56682: PPUSH
56683: LD_VAR 0 8
56687: PPUSH
56688: LD_INT 0
56690: PPUSH
56691: CALL 58887 0 3
// end ;
56695: GO 56649
56697: POP
56698: POP
// if horses then
56699: LD_VAR 0 5
56703: IFFALSE 56770
// for i = 1 to horses do
56705: LD_ADDR_VAR 0 11
56709: PUSH
56710: DOUBLE
56711: LD_INT 1
56713: DEC
56714: ST_TO_ADDR
56715: LD_VAR 0 5
56719: PUSH
56720: FOR_TO
56721: IFFALSE 56768
// begin hc_class := 21 ;
56723: LD_ADDR_OWVAR 28
56727: PUSH
56728: LD_INT 21
56730: ST_TO_ADDR
// hc_gallery :=  ;
56731: LD_ADDR_OWVAR 33
56735: PUSH
56736: LD_STRING 
56738: ST_TO_ADDR
// animal := CreateHuman ;
56739: LD_ADDR_VAR 0 12
56743: PUSH
56744: CALL_OW 44
56748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56749: LD_VAR 0 12
56753: PPUSH
56754: LD_VAR 0 8
56758: PPUSH
56759: LD_INT 0
56761: PPUSH
56762: CALL 58887 0 3
// end ;
56766: GO 56720
56768: POP
56769: POP
// if birds then
56770: LD_VAR 0 1
56774: IFFALSE 56841
// for i = 1 to birds do
56776: LD_ADDR_VAR 0 11
56780: PUSH
56781: DOUBLE
56782: LD_INT 1
56784: DEC
56785: ST_TO_ADDR
56786: LD_VAR 0 1
56790: PUSH
56791: FOR_TO
56792: IFFALSE 56839
// begin hc_class = 18 ;
56794: LD_ADDR_OWVAR 28
56798: PUSH
56799: LD_INT 18
56801: ST_TO_ADDR
// hc_gallery =  ;
56802: LD_ADDR_OWVAR 33
56806: PUSH
56807: LD_STRING 
56809: ST_TO_ADDR
// animal := CreateHuman ;
56810: LD_ADDR_VAR 0 12
56814: PUSH
56815: CALL_OW 44
56819: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56820: LD_VAR 0 12
56824: PPUSH
56825: LD_VAR 0 8
56829: PPUSH
56830: LD_INT 0
56832: PPUSH
56833: CALL 58887 0 3
// end ;
56837: GO 56791
56839: POP
56840: POP
// if tigers then
56841: LD_VAR 0 2
56845: IFFALSE 56929
// for i = 1 to tigers do
56847: LD_ADDR_VAR 0 11
56851: PUSH
56852: DOUBLE
56853: LD_INT 1
56855: DEC
56856: ST_TO_ADDR
56857: LD_VAR 0 2
56861: PUSH
56862: FOR_TO
56863: IFFALSE 56927
// begin hc_class = class_tiger ;
56865: LD_ADDR_OWVAR 28
56869: PUSH
56870: LD_INT 14
56872: ST_TO_ADDR
// hc_gallery =  ;
56873: LD_ADDR_OWVAR 33
56877: PUSH
56878: LD_STRING 
56880: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56881: LD_ADDR_OWVAR 35
56885: PUSH
56886: LD_INT 7
56888: NEG
56889: PPUSH
56890: LD_INT 7
56892: PPUSH
56893: CALL_OW 12
56897: ST_TO_ADDR
// animal := CreateHuman ;
56898: LD_ADDR_VAR 0 12
56902: PUSH
56903: CALL_OW 44
56907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56908: LD_VAR 0 12
56912: PPUSH
56913: LD_VAR 0 8
56917: PPUSH
56918: LD_INT 0
56920: PPUSH
56921: CALL 58887 0 3
// end ;
56925: GO 56862
56927: POP
56928: POP
// if apemans then
56929: LD_VAR 0 3
56933: IFFALSE 57056
// for i = 1 to apemans do
56935: LD_ADDR_VAR 0 11
56939: PUSH
56940: DOUBLE
56941: LD_INT 1
56943: DEC
56944: ST_TO_ADDR
56945: LD_VAR 0 3
56949: PUSH
56950: FOR_TO
56951: IFFALSE 57054
// begin hc_class = class_apeman ;
56953: LD_ADDR_OWVAR 28
56957: PUSH
56958: LD_INT 12
56960: ST_TO_ADDR
// hc_gallery =  ;
56961: LD_ADDR_OWVAR 33
56965: PUSH
56966: LD_STRING 
56968: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
56969: LD_ADDR_OWVAR 35
56973: PUSH
56974: LD_INT 5
56976: NEG
56977: PPUSH
56978: LD_INT 5
56980: PPUSH
56981: CALL_OW 12
56985: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56986: LD_ADDR_OWVAR 31
56990: PUSH
56991: LD_INT 1
56993: PPUSH
56994: LD_INT 3
56996: PPUSH
56997: CALL_OW 12
57001: PUSH
57002: LD_INT 1
57004: PPUSH
57005: LD_INT 3
57007: PPUSH
57008: CALL_OW 12
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// animal := CreateHuman ;
57025: LD_ADDR_VAR 0 12
57029: PUSH
57030: CALL_OW 44
57034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57035: LD_VAR 0 12
57039: PPUSH
57040: LD_VAR 0 8
57044: PPUSH
57045: LD_INT 0
57047: PPUSH
57048: CALL 58887 0 3
// end ;
57052: GO 56950
57054: POP
57055: POP
// if enchidnas then
57056: LD_VAR 0 4
57060: IFFALSE 57127
// for i = 1 to enchidnas do
57062: LD_ADDR_VAR 0 11
57066: PUSH
57067: DOUBLE
57068: LD_INT 1
57070: DEC
57071: ST_TO_ADDR
57072: LD_VAR 0 4
57076: PUSH
57077: FOR_TO
57078: IFFALSE 57125
// begin hc_class = 13 ;
57080: LD_ADDR_OWVAR 28
57084: PUSH
57085: LD_INT 13
57087: ST_TO_ADDR
// hc_gallery =  ;
57088: LD_ADDR_OWVAR 33
57092: PUSH
57093: LD_STRING 
57095: ST_TO_ADDR
// animal := CreateHuman ;
57096: LD_ADDR_VAR 0 12
57100: PUSH
57101: CALL_OW 44
57105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57106: LD_VAR 0 12
57110: PPUSH
57111: LD_VAR 0 8
57115: PPUSH
57116: LD_INT 0
57118: PPUSH
57119: CALL 58887 0 3
// end ;
57123: GO 57077
57125: POP
57126: POP
// if fishes then
57127: LD_VAR 0 7
57131: IFFALSE 57198
// for i = 1 to fishes do
57133: LD_ADDR_VAR 0 11
57137: PUSH
57138: DOUBLE
57139: LD_INT 1
57141: DEC
57142: ST_TO_ADDR
57143: LD_VAR 0 7
57147: PUSH
57148: FOR_TO
57149: IFFALSE 57196
// begin hc_class = 20 ;
57151: LD_ADDR_OWVAR 28
57155: PUSH
57156: LD_INT 20
57158: ST_TO_ADDR
// hc_gallery =  ;
57159: LD_ADDR_OWVAR 33
57163: PUSH
57164: LD_STRING 
57166: ST_TO_ADDR
// animal := CreateHuman ;
57167: LD_ADDR_VAR 0 12
57171: PUSH
57172: CALL_OW 44
57176: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57177: LD_VAR 0 12
57181: PPUSH
57182: LD_VAR 0 9
57186: PPUSH
57187: LD_INT 0
57189: PPUSH
57190: CALL 58887 0 3
// end ;
57194: GO 57148
57196: POP
57197: POP
// end ;
57198: LD_VAR 0 10
57202: RET
// export function WantHeal ( sci , unit ) ; begin
57203: LD_INT 0
57205: PPUSH
// if GetTaskList ( sci ) > 0 then
57206: LD_VAR 0 1
57210: PPUSH
57211: CALL_OW 437
57215: PUSH
57216: LD_INT 0
57218: GREATER
57219: IFFALSE 57289
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57221: LD_VAR 0 1
57225: PPUSH
57226: CALL_OW 437
57230: PUSH
57231: LD_INT 1
57233: ARRAY
57234: PUSH
57235: LD_INT 1
57237: ARRAY
57238: PUSH
57239: LD_STRING l
57241: EQUAL
57242: PUSH
57243: LD_VAR 0 1
57247: PPUSH
57248: CALL_OW 437
57252: PUSH
57253: LD_INT 1
57255: ARRAY
57256: PUSH
57257: LD_INT 4
57259: ARRAY
57260: PUSH
57261: LD_VAR 0 2
57265: EQUAL
57266: AND
57267: IFFALSE 57279
// result := true else
57269: LD_ADDR_VAR 0 3
57273: PUSH
57274: LD_INT 1
57276: ST_TO_ADDR
57277: GO 57287
// result := false ;
57279: LD_ADDR_VAR 0 3
57283: PUSH
57284: LD_INT 0
57286: ST_TO_ADDR
// end else
57287: GO 57297
// result := false ;
57289: LD_ADDR_VAR 0 3
57293: PUSH
57294: LD_INT 0
57296: ST_TO_ADDR
// end ;
57297: LD_VAR 0 3
57301: RET
// export function HealTarget ( sci ) ; begin
57302: LD_INT 0
57304: PPUSH
// if not sci then
57305: LD_VAR 0 1
57309: NOT
57310: IFFALSE 57314
// exit ;
57312: GO 57379
// result := 0 ;
57314: LD_ADDR_VAR 0 2
57318: PUSH
57319: LD_INT 0
57321: ST_TO_ADDR
// if GetTaskList ( sci ) then
57322: LD_VAR 0 1
57326: PPUSH
57327: CALL_OW 437
57331: IFFALSE 57379
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57333: LD_VAR 0 1
57337: PPUSH
57338: CALL_OW 437
57342: PUSH
57343: LD_INT 1
57345: ARRAY
57346: PUSH
57347: LD_INT 1
57349: ARRAY
57350: PUSH
57351: LD_STRING l
57353: EQUAL
57354: IFFALSE 57379
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57356: LD_ADDR_VAR 0 2
57360: PUSH
57361: LD_VAR 0 1
57365: PPUSH
57366: CALL_OW 437
57370: PUSH
57371: LD_INT 1
57373: ARRAY
57374: PUSH
57375: LD_INT 4
57377: ARRAY
57378: ST_TO_ADDR
// end ;
57379: LD_VAR 0 2
57383: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57384: LD_INT 0
57386: PPUSH
57387: PPUSH
57388: PPUSH
57389: PPUSH
// if not base_units then
57390: LD_VAR 0 1
57394: NOT
57395: IFFALSE 57399
// exit ;
57397: GO 57486
// result := false ;
57399: LD_ADDR_VAR 0 2
57403: PUSH
57404: LD_INT 0
57406: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57407: LD_ADDR_VAR 0 5
57411: PUSH
57412: LD_VAR 0 1
57416: PPUSH
57417: LD_INT 21
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PPUSH
57427: CALL_OW 72
57431: ST_TO_ADDR
// if not tmp then
57432: LD_VAR 0 5
57436: NOT
57437: IFFALSE 57441
// exit ;
57439: GO 57486
// for i in tmp do
57441: LD_ADDR_VAR 0 3
57445: PUSH
57446: LD_VAR 0 5
57450: PUSH
57451: FOR_IN
57452: IFFALSE 57484
// begin result := EnemyInRange ( i , 22 ) ;
57454: LD_ADDR_VAR 0 2
57458: PUSH
57459: LD_VAR 0 3
57463: PPUSH
57464: LD_INT 22
57466: PPUSH
57467: CALL 55722 0 2
57471: ST_TO_ADDR
// if result then
57472: LD_VAR 0 2
57476: IFFALSE 57482
// exit ;
57478: POP
57479: POP
57480: GO 57486
// end ;
57482: GO 57451
57484: POP
57485: POP
// end ;
57486: LD_VAR 0 2
57490: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57491: LD_INT 0
57493: PPUSH
57494: PPUSH
// if not units then
57495: LD_VAR 0 1
57499: NOT
57500: IFFALSE 57504
// exit ;
57502: GO 57574
// result := [ ] ;
57504: LD_ADDR_VAR 0 3
57508: PUSH
57509: EMPTY
57510: ST_TO_ADDR
// for i in units do
57511: LD_ADDR_VAR 0 4
57515: PUSH
57516: LD_VAR 0 1
57520: PUSH
57521: FOR_IN
57522: IFFALSE 57572
// if GetTag ( i ) = tag then
57524: LD_VAR 0 4
57528: PPUSH
57529: CALL_OW 110
57533: PUSH
57534: LD_VAR 0 2
57538: EQUAL
57539: IFFALSE 57570
// result := Insert ( result , result + 1 , i ) ;
57541: LD_ADDR_VAR 0 3
57545: PUSH
57546: LD_VAR 0 3
57550: PPUSH
57551: LD_VAR 0 3
57555: PUSH
57556: LD_INT 1
57558: PLUS
57559: PPUSH
57560: LD_VAR 0 4
57564: PPUSH
57565: CALL_OW 2
57569: ST_TO_ADDR
57570: GO 57521
57572: POP
57573: POP
// end ;
57574: LD_VAR 0 3
57578: RET
// export function IsDriver ( un ) ; begin
57579: LD_INT 0
57581: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57582: LD_ADDR_VAR 0 2
57586: PUSH
57587: LD_VAR 0 1
57591: PUSH
57592: LD_INT 55
57594: PUSH
57595: EMPTY
57596: LIST
57597: PPUSH
57598: CALL_OW 69
57602: IN
57603: ST_TO_ADDR
// end ;
57604: LD_VAR 0 2
57608: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57609: LD_INT 0
57611: PPUSH
57612: PPUSH
// list := [ ] ;
57613: LD_ADDR_VAR 0 5
57617: PUSH
57618: EMPTY
57619: ST_TO_ADDR
// case d of 0 :
57620: LD_VAR 0 3
57624: PUSH
57625: LD_INT 0
57627: DOUBLE
57628: EQUAL
57629: IFTRUE 57633
57631: GO 57766
57633: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57634: LD_ADDR_VAR 0 5
57638: PUSH
57639: LD_VAR 0 1
57643: PUSH
57644: LD_INT 4
57646: MINUS
57647: PUSH
57648: LD_VAR 0 2
57652: PUSH
57653: LD_INT 4
57655: MINUS
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: PUSH
57665: LD_VAR 0 1
57669: PUSH
57670: LD_INT 3
57672: MINUS
57673: PUSH
57674: LD_VAR 0 2
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: LIST
57686: PUSH
57687: LD_VAR 0 1
57691: PUSH
57692: LD_INT 4
57694: PLUS
57695: PUSH
57696: LD_VAR 0 2
57700: PUSH
57701: LD_INT 4
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: LIST
57708: PUSH
57709: LD_VAR 0 1
57713: PUSH
57714: LD_INT 3
57716: PLUS
57717: PUSH
57718: LD_VAR 0 2
57722: PUSH
57723: LD_INT 3
57725: PLUS
57726: PUSH
57727: LD_INT 5
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: LIST
57734: PUSH
57735: LD_VAR 0 1
57739: PUSH
57740: LD_VAR 0 2
57744: PUSH
57745: LD_INT 4
57747: PLUS
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: LIST
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: ST_TO_ADDR
// end ; 1 :
57764: GO 58464
57766: LD_INT 1
57768: DOUBLE
57769: EQUAL
57770: IFTRUE 57774
57772: GO 57907
57774: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57775: LD_ADDR_VAR 0 5
57779: PUSH
57780: LD_VAR 0 1
57784: PUSH
57785: LD_VAR 0 2
57789: PUSH
57790: LD_INT 4
57792: MINUS
57793: PUSH
57794: LD_INT 3
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: LIST
57801: PUSH
57802: LD_VAR 0 1
57806: PUSH
57807: LD_INT 3
57809: MINUS
57810: PUSH
57811: LD_VAR 0 2
57815: PUSH
57816: LD_INT 3
57818: MINUS
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: PUSH
57828: LD_VAR 0 1
57832: PUSH
57833: LD_INT 4
57835: MINUS
57836: PUSH
57837: LD_VAR 0 2
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: LIST
57849: PUSH
57850: LD_VAR 0 1
57854: PUSH
57855: LD_VAR 0 2
57859: PUSH
57860: LD_INT 3
57862: PLUS
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: PUSH
57872: LD_VAR 0 1
57876: PUSH
57877: LD_INT 4
57879: PLUS
57880: PUSH
57881: LD_VAR 0 2
57885: PUSH
57886: LD_INT 4
57888: PLUS
57889: PUSH
57890: LD_INT 5
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: LIST
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: ST_TO_ADDR
// end ; 2 :
57905: GO 58464
57907: LD_INT 2
57909: DOUBLE
57910: EQUAL
57911: IFTRUE 57915
57913: GO 58044
57915: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57916: LD_ADDR_VAR 0 5
57920: PUSH
57921: LD_VAR 0 1
57925: PUSH
57926: LD_VAR 0 2
57930: PUSH
57931: LD_INT 3
57933: MINUS
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: LIST
57942: PUSH
57943: LD_VAR 0 1
57947: PUSH
57948: LD_INT 4
57950: PLUS
57951: PUSH
57952: LD_VAR 0 2
57956: PUSH
57957: LD_INT 4
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: LIST
57964: PUSH
57965: LD_VAR 0 1
57969: PUSH
57970: LD_VAR 0 2
57974: PUSH
57975: LD_INT 4
57977: PLUS
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: LIST
57986: PUSH
57987: LD_VAR 0 1
57991: PUSH
57992: LD_INT 3
57994: MINUS
57995: PUSH
57996: LD_VAR 0 2
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: LIST
58008: PUSH
58009: LD_VAR 0 1
58013: PUSH
58014: LD_INT 4
58016: MINUS
58017: PUSH
58018: LD_VAR 0 2
58022: PUSH
58023: LD_INT 4
58025: MINUS
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: LIST
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: ST_TO_ADDR
// end ; 3 :
58042: GO 58464
58044: LD_INT 3
58046: DOUBLE
58047: EQUAL
58048: IFTRUE 58052
58050: GO 58185
58052: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58053: LD_ADDR_VAR 0 5
58057: PUSH
58058: LD_VAR 0 1
58062: PUSH
58063: LD_INT 3
58065: PLUS
58066: PUSH
58067: LD_VAR 0 2
58071: PUSH
58072: LD_INT 4
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: LIST
58079: PUSH
58080: LD_VAR 0 1
58084: PUSH
58085: LD_INT 4
58087: PLUS
58088: PUSH
58089: LD_VAR 0 2
58093: PUSH
58094: LD_INT 4
58096: PLUS
58097: PUSH
58098: LD_INT 5
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: LIST
58105: PUSH
58106: LD_VAR 0 1
58110: PUSH
58111: LD_INT 4
58113: MINUS
58114: PUSH
58115: LD_VAR 0 2
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: LIST
58127: PUSH
58128: LD_VAR 0 1
58132: PUSH
58133: LD_VAR 0 2
58137: PUSH
58138: LD_INT 4
58140: MINUS
58141: PUSH
58142: LD_INT 3
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: LIST
58149: PUSH
58150: LD_VAR 0 1
58154: PUSH
58155: LD_INT 3
58157: MINUS
58158: PUSH
58159: LD_VAR 0 2
58163: PUSH
58164: LD_INT 3
58166: MINUS
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: ST_TO_ADDR
// end ; 4 :
58183: GO 58464
58185: LD_INT 4
58187: DOUBLE
58188: EQUAL
58189: IFTRUE 58193
58191: GO 58326
58193: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58194: LD_ADDR_VAR 0 5
58198: PUSH
58199: LD_VAR 0 1
58203: PUSH
58204: LD_VAR 0 2
58208: PUSH
58209: LD_INT 4
58211: PLUS
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: LIST
58220: PUSH
58221: LD_VAR 0 1
58225: PUSH
58226: LD_INT 3
58228: PLUS
58229: PUSH
58230: LD_VAR 0 2
58234: PUSH
58235: LD_INT 3
58237: PLUS
58238: PUSH
58239: LD_INT 5
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: PUSH
58247: LD_VAR 0 1
58251: PUSH
58252: LD_INT 4
58254: PLUS
58255: PUSH
58256: LD_VAR 0 2
58260: PUSH
58261: LD_INT 4
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: PUSH
58269: LD_VAR 0 1
58273: PUSH
58274: LD_VAR 0 2
58278: PUSH
58279: LD_INT 3
58281: MINUS
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: PUSH
58291: LD_VAR 0 1
58295: PUSH
58296: LD_INT 4
58298: MINUS
58299: PUSH
58300: LD_VAR 0 2
58304: PUSH
58305: LD_INT 4
58307: MINUS
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: LIST
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: ST_TO_ADDR
// end ; 5 :
58324: GO 58464
58326: LD_INT 5
58328: DOUBLE
58329: EQUAL
58330: IFTRUE 58334
58332: GO 58463
58334: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58335: LD_ADDR_VAR 0 5
58339: PUSH
58340: LD_VAR 0 1
58344: PUSH
58345: LD_INT 4
58347: MINUS
58348: PUSH
58349: LD_VAR 0 2
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: PUSH
58362: LD_VAR 0 1
58366: PUSH
58367: LD_VAR 0 2
58371: PUSH
58372: LD_INT 4
58374: MINUS
58375: PUSH
58376: LD_INT 3
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: PUSH
58384: LD_VAR 0 1
58388: PUSH
58389: LD_INT 4
58391: PLUS
58392: PUSH
58393: LD_VAR 0 2
58397: PUSH
58398: LD_INT 4
58400: PLUS
58401: PUSH
58402: LD_INT 5
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: PUSH
58410: LD_VAR 0 1
58414: PUSH
58415: LD_INT 3
58417: PLUS
58418: PUSH
58419: LD_VAR 0 2
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: LIST
58431: PUSH
58432: LD_VAR 0 1
58436: PUSH
58437: LD_VAR 0 2
58441: PUSH
58442: LD_INT 3
58444: PLUS
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: ST_TO_ADDR
// end ; end ;
58461: GO 58464
58463: POP
// result := list ;
58464: LD_ADDR_VAR 0 4
58468: PUSH
58469: LD_VAR 0 5
58473: ST_TO_ADDR
// end ;
58474: LD_VAR 0 4
58478: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58479: LD_INT 0
58481: PPUSH
58482: PPUSH
58483: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58484: LD_VAR 0 1
58488: NOT
58489: PUSH
58490: LD_VAR 0 2
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: LD_INT 3
58503: PUSH
58504: LD_INT 4
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: IN
58513: NOT
58514: OR
58515: IFFALSE 58519
// exit ;
58517: GO 58611
// tmp := [ ] ;
58519: LD_ADDR_VAR 0 5
58523: PUSH
58524: EMPTY
58525: ST_TO_ADDR
// for i in units do
58526: LD_ADDR_VAR 0 4
58530: PUSH
58531: LD_VAR 0 1
58535: PUSH
58536: FOR_IN
58537: IFFALSE 58580
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58539: LD_ADDR_VAR 0 5
58543: PUSH
58544: LD_VAR 0 5
58548: PPUSH
58549: LD_VAR 0 5
58553: PUSH
58554: LD_INT 1
58556: PLUS
58557: PPUSH
58558: LD_VAR 0 4
58562: PPUSH
58563: LD_VAR 0 2
58567: PPUSH
58568: CALL_OW 259
58572: PPUSH
58573: CALL_OW 2
58577: ST_TO_ADDR
58578: GO 58536
58580: POP
58581: POP
// if not tmp then
58582: LD_VAR 0 5
58586: NOT
58587: IFFALSE 58591
// exit ;
58589: GO 58611
// result := SortListByListDesc ( units , tmp ) ;
58591: LD_ADDR_VAR 0 3
58595: PUSH
58596: LD_VAR 0 1
58600: PPUSH
58601: LD_VAR 0 5
58605: PPUSH
58606: CALL_OW 77
58610: ST_TO_ADDR
// end ;
58611: LD_VAR 0 3
58615: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58616: LD_INT 0
58618: PPUSH
58619: PPUSH
58620: PPUSH
// result := false ;
58621: LD_ADDR_VAR 0 3
58625: PUSH
58626: LD_INT 0
58628: ST_TO_ADDR
// x := GetX ( building ) ;
58629: LD_ADDR_VAR 0 4
58633: PUSH
58634: LD_VAR 0 2
58638: PPUSH
58639: CALL_OW 250
58643: ST_TO_ADDR
// y := GetY ( building ) ;
58644: LD_ADDR_VAR 0 5
58648: PUSH
58649: LD_VAR 0 2
58653: PPUSH
58654: CALL_OW 251
58658: ST_TO_ADDR
// if not building or not x or not y then
58659: LD_VAR 0 2
58663: NOT
58664: PUSH
58665: LD_VAR 0 4
58669: NOT
58670: OR
58671: PUSH
58672: LD_VAR 0 5
58676: NOT
58677: OR
58678: IFFALSE 58682
// exit ;
58680: GO 58774
// if GetTaskList ( unit ) then
58682: LD_VAR 0 1
58686: PPUSH
58687: CALL_OW 437
58691: IFFALSE 58774
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58693: LD_STRING e
58695: PUSH
58696: LD_VAR 0 1
58700: PPUSH
58701: CALL_OW 437
58705: PUSH
58706: LD_INT 1
58708: ARRAY
58709: PUSH
58710: LD_INT 1
58712: ARRAY
58713: EQUAL
58714: PUSH
58715: LD_VAR 0 4
58719: PUSH
58720: LD_VAR 0 1
58724: PPUSH
58725: CALL_OW 437
58729: PUSH
58730: LD_INT 1
58732: ARRAY
58733: PUSH
58734: LD_INT 2
58736: ARRAY
58737: EQUAL
58738: AND
58739: PUSH
58740: LD_VAR 0 5
58744: PUSH
58745: LD_VAR 0 1
58749: PPUSH
58750: CALL_OW 437
58754: PUSH
58755: LD_INT 1
58757: ARRAY
58758: PUSH
58759: LD_INT 3
58761: ARRAY
58762: EQUAL
58763: AND
58764: IFFALSE 58774
// result := true end ;
58766: LD_ADDR_VAR 0 3
58770: PUSH
58771: LD_INT 1
58773: ST_TO_ADDR
// end ;
58774: LD_VAR 0 3
58778: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58779: LD_INT 0
58781: PPUSH
// result := false ;
58782: LD_ADDR_VAR 0 4
58786: PUSH
58787: LD_INT 0
58789: ST_TO_ADDR
// if GetTaskList ( unit ) then
58790: LD_VAR 0 1
58794: PPUSH
58795: CALL_OW 437
58799: IFFALSE 58882
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58801: LD_STRING M
58803: PUSH
58804: LD_VAR 0 1
58808: PPUSH
58809: CALL_OW 437
58813: PUSH
58814: LD_INT 1
58816: ARRAY
58817: PUSH
58818: LD_INT 1
58820: ARRAY
58821: EQUAL
58822: PUSH
58823: LD_VAR 0 2
58827: PUSH
58828: LD_VAR 0 1
58832: PPUSH
58833: CALL_OW 437
58837: PUSH
58838: LD_INT 1
58840: ARRAY
58841: PUSH
58842: LD_INT 2
58844: ARRAY
58845: EQUAL
58846: AND
58847: PUSH
58848: LD_VAR 0 3
58852: PUSH
58853: LD_VAR 0 1
58857: PPUSH
58858: CALL_OW 437
58862: PUSH
58863: LD_INT 1
58865: ARRAY
58866: PUSH
58867: LD_INT 3
58869: ARRAY
58870: EQUAL
58871: AND
58872: IFFALSE 58882
// result := true ;
58874: LD_ADDR_VAR 0 4
58878: PUSH
58879: LD_INT 1
58881: ST_TO_ADDR
// end ; end ;
58882: LD_VAR 0 4
58886: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58887: LD_INT 0
58889: PPUSH
58890: PPUSH
58891: PPUSH
58892: PPUSH
// if not unit or not area then
58893: LD_VAR 0 1
58897: NOT
58898: PUSH
58899: LD_VAR 0 2
58903: NOT
58904: OR
58905: IFFALSE 58909
// exit ;
58907: GO 59073
// tmp := AreaToList ( area , i ) ;
58909: LD_ADDR_VAR 0 6
58913: PUSH
58914: LD_VAR 0 2
58918: PPUSH
58919: LD_VAR 0 5
58923: PPUSH
58924: CALL_OW 517
58928: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58929: LD_ADDR_VAR 0 5
58933: PUSH
58934: DOUBLE
58935: LD_INT 1
58937: DEC
58938: ST_TO_ADDR
58939: LD_VAR 0 6
58943: PUSH
58944: LD_INT 1
58946: ARRAY
58947: PUSH
58948: FOR_TO
58949: IFFALSE 59071
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58951: LD_ADDR_VAR 0 7
58955: PUSH
58956: LD_VAR 0 6
58960: PUSH
58961: LD_INT 1
58963: ARRAY
58964: PUSH
58965: LD_VAR 0 5
58969: ARRAY
58970: PUSH
58971: LD_VAR 0 6
58975: PUSH
58976: LD_INT 2
58978: ARRAY
58979: PUSH
58980: LD_VAR 0 5
58984: ARRAY
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58990: LD_VAR 0 7
58994: PUSH
58995: LD_INT 1
58997: ARRAY
58998: PPUSH
58999: LD_VAR 0 7
59003: PUSH
59004: LD_INT 2
59006: ARRAY
59007: PPUSH
59008: CALL_OW 428
59012: PUSH
59013: LD_INT 0
59015: EQUAL
59016: IFFALSE 59069
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59018: LD_VAR 0 1
59022: PPUSH
59023: LD_VAR 0 7
59027: PUSH
59028: LD_INT 1
59030: ARRAY
59031: PPUSH
59032: LD_VAR 0 7
59036: PUSH
59037: LD_INT 2
59039: ARRAY
59040: PPUSH
59041: LD_VAR 0 3
59045: PPUSH
59046: CALL_OW 48
// result := IsPlaced ( unit ) ;
59050: LD_ADDR_VAR 0 4
59054: PUSH
59055: LD_VAR 0 1
59059: PPUSH
59060: CALL_OW 305
59064: ST_TO_ADDR
// exit ;
59065: POP
59066: POP
59067: GO 59073
// end ; end ;
59069: GO 58948
59071: POP
59072: POP
// end ;
59073: LD_VAR 0 4
59077: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59078: LD_INT 0
59080: PPUSH
59081: PPUSH
59082: PPUSH
// if not side or side > 8 then
59083: LD_VAR 0 1
59087: NOT
59088: PUSH
59089: LD_VAR 0 1
59093: PUSH
59094: LD_INT 8
59096: GREATER
59097: OR
59098: IFFALSE 59102
// exit ;
59100: GO 59289
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59102: LD_ADDR_VAR 0 4
59106: PUSH
59107: LD_INT 22
59109: PUSH
59110: LD_VAR 0 1
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 21
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PPUSH
59133: CALL_OW 69
59137: ST_TO_ADDR
// if not tmp then
59138: LD_VAR 0 4
59142: NOT
59143: IFFALSE 59147
// exit ;
59145: GO 59289
// enable_addtolog := true ;
59147: LD_ADDR_OWVAR 81
59151: PUSH
59152: LD_INT 1
59154: ST_TO_ADDR
// AddToLog ( [ ) ;
59155: LD_STRING [
59157: PPUSH
59158: CALL_OW 561
// for i in tmp do
59162: LD_ADDR_VAR 0 3
59166: PUSH
59167: LD_VAR 0 4
59171: PUSH
59172: FOR_IN
59173: IFFALSE 59280
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59175: LD_STRING [
59177: PUSH
59178: LD_VAR 0 3
59182: PPUSH
59183: CALL_OW 266
59187: STR
59188: PUSH
59189: LD_STRING , 
59191: STR
59192: PUSH
59193: LD_VAR 0 3
59197: PPUSH
59198: CALL_OW 250
59202: STR
59203: PUSH
59204: LD_STRING , 
59206: STR
59207: PUSH
59208: LD_VAR 0 3
59212: PPUSH
59213: CALL_OW 251
59217: STR
59218: PUSH
59219: LD_STRING , 
59221: STR
59222: PUSH
59223: LD_VAR 0 3
59227: PPUSH
59228: CALL_OW 254
59232: STR
59233: PUSH
59234: LD_STRING , 
59236: STR
59237: PUSH
59238: LD_VAR 0 3
59242: PPUSH
59243: LD_INT 1
59245: PPUSH
59246: CALL_OW 268
59250: STR
59251: PUSH
59252: LD_STRING , 
59254: STR
59255: PUSH
59256: LD_VAR 0 3
59260: PPUSH
59261: LD_INT 2
59263: PPUSH
59264: CALL_OW 268
59268: STR
59269: PUSH
59270: LD_STRING ],
59272: STR
59273: PPUSH
59274: CALL_OW 561
// end ;
59278: GO 59172
59280: POP
59281: POP
// AddToLog ( ]; ) ;
59282: LD_STRING ];
59284: PPUSH
59285: CALL_OW 561
// end ;
59289: LD_VAR 0 2
59293: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59294: LD_INT 0
59296: PPUSH
59297: PPUSH
59298: PPUSH
59299: PPUSH
59300: PPUSH
// if not area or not rate or not max then
59301: LD_VAR 0 1
59305: NOT
59306: PUSH
59307: LD_VAR 0 2
59311: NOT
59312: OR
59313: PUSH
59314: LD_VAR 0 4
59318: NOT
59319: OR
59320: IFFALSE 59324
// exit ;
59322: GO 59516
// while 1 do
59324: LD_INT 1
59326: IFFALSE 59516
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59328: LD_ADDR_VAR 0 9
59332: PUSH
59333: LD_VAR 0 1
59337: PPUSH
59338: LD_INT 1
59340: PPUSH
59341: CALL_OW 287
59345: PUSH
59346: LD_INT 10
59348: MUL
59349: ST_TO_ADDR
// r := rate / 10 ;
59350: LD_ADDR_VAR 0 7
59354: PUSH
59355: LD_VAR 0 2
59359: PUSH
59360: LD_INT 10
59362: DIVREAL
59363: ST_TO_ADDR
// time := 1 1$00 ;
59364: LD_ADDR_VAR 0 8
59368: PUSH
59369: LD_INT 2100
59371: ST_TO_ADDR
// if amount < min then
59372: LD_VAR 0 9
59376: PUSH
59377: LD_VAR 0 3
59381: LESS
59382: IFFALSE 59400
// r := r * 2 else
59384: LD_ADDR_VAR 0 7
59388: PUSH
59389: LD_VAR 0 7
59393: PUSH
59394: LD_INT 2
59396: MUL
59397: ST_TO_ADDR
59398: GO 59426
// if amount > max then
59400: LD_VAR 0 9
59404: PUSH
59405: LD_VAR 0 4
59409: GREATER
59410: IFFALSE 59426
// r := r / 2 ;
59412: LD_ADDR_VAR 0 7
59416: PUSH
59417: LD_VAR 0 7
59421: PUSH
59422: LD_INT 2
59424: DIVREAL
59425: ST_TO_ADDR
// time := time / r ;
59426: LD_ADDR_VAR 0 8
59430: PUSH
59431: LD_VAR 0 8
59435: PUSH
59436: LD_VAR 0 7
59440: DIVREAL
59441: ST_TO_ADDR
// if time < 0 then
59442: LD_VAR 0 8
59446: PUSH
59447: LD_INT 0
59449: LESS
59450: IFFALSE 59467
// time := time * - 1 ;
59452: LD_ADDR_VAR 0 8
59456: PUSH
59457: LD_VAR 0 8
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: MUL
59466: ST_TO_ADDR
// wait ( time ) ;
59467: LD_VAR 0 8
59471: PPUSH
59472: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59476: LD_INT 35
59478: PPUSH
59479: LD_INT 875
59481: PPUSH
59482: CALL_OW 12
59486: PPUSH
59487: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59491: LD_INT 1
59493: PPUSH
59494: LD_INT 5
59496: PPUSH
59497: CALL_OW 12
59501: PPUSH
59502: LD_VAR 0 1
59506: PPUSH
59507: LD_INT 1
59509: PPUSH
59510: CALL_OW 55
// end ;
59514: GO 59324
// end ;
59516: LD_VAR 0 5
59520: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59521: LD_INT 0
59523: PPUSH
59524: PPUSH
59525: PPUSH
59526: PPUSH
59527: PPUSH
59528: PPUSH
59529: PPUSH
59530: PPUSH
// if not turrets or not factories then
59531: LD_VAR 0 1
59535: NOT
59536: PUSH
59537: LD_VAR 0 2
59541: NOT
59542: OR
59543: IFFALSE 59547
// exit ;
59545: GO 59854
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59547: LD_ADDR_VAR 0 10
59551: PUSH
59552: LD_INT 5
59554: PUSH
59555: LD_INT 6
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 4
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: PUSH
59575: LD_INT 5
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 24
59589: PUSH
59590: LD_INT 25
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 23
59599: PUSH
59600: LD_INT 27
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 42
59613: PUSH
59614: LD_INT 43
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 44
59623: PUSH
59624: LD_INT 46
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 45
59633: PUSH
59634: LD_INT 47
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: LIST
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: ST_TO_ADDR
// result := [ ] ;
59651: LD_ADDR_VAR 0 3
59655: PUSH
59656: EMPTY
59657: ST_TO_ADDR
// for i in turrets do
59658: LD_ADDR_VAR 0 4
59662: PUSH
59663: LD_VAR 0 1
59667: PUSH
59668: FOR_IN
59669: IFFALSE 59852
// begin nat := GetNation ( i ) ;
59671: LD_ADDR_VAR 0 7
59675: PUSH
59676: LD_VAR 0 4
59680: PPUSH
59681: CALL_OW 248
59685: ST_TO_ADDR
// weapon := 0 ;
59686: LD_ADDR_VAR 0 8
59690: PUSH
59691: LD_INT 0
59693: ST_TO_ADDR
// if not nat then
59694: LD_VAR 0 7
59698: NOT
59699: IFFALSE 59703
// continue ;
59701: GO 59668
// for j in list [ nat ] do
59703: LD_ADDR_VAR 0 5
59707: PUSH
59708: LD_VAR 0 10
59712: PUSH
59713: LD_VAR 0 7
59717: ARRAY
59718: PUSH
59719: FOR_IN
59720: IFFALSE 59761
// if GetBWeapon ( i ) = j [ 1 ] then
59722: LD_VAR 0 4
59726: PPUSH
59727: CALL_OW 269
59731: PUSH
59732: LD_VAR 0 5
59736: PUSH
59737: LD_INT 1
59739: ARRAY
59740: EQUAL
59741: IFFALSE 59759
// begin weapon := j [ 2 ] ;
59743: LD_ADDR_VAR 0 8
59747: PUSH
59748: LD_VAR 0 5
59752: PUSH
59753: LD_INT 2
59755: ARRAY
59756: ST_TO_ADDR
// break ;
59757: GO 59761
// end ;
59759: GO 59719
59761: POP
59762: POP
// if not weapon then
59763: LD_VAR 0 8
59767: NOT
59768: IFFALSE 59772
// continue ;
59770: GO 59668
// for k in factories do
59772: LD_ADDR_VAR 0 6
59776: PUSH
59777: LD_VAR 0 2
59781: PUSH
59782: FOR_IN
59783: IFFALSE 59848
// begin weapons := AvailableWeaponList ( k ) ;
59785: LD_ADDR_VAR 0 9
59789: PUSH
59790: LD_VAR 0 6
59794: PPUSH
59795: CALL_OW 478
59799: ST_TO_ADDR
// if not weapons then
59800: LD_VAR 0 9
59804: NOT
59805: IFFALSE 59809
// continue ;
59807: GO 59782
// if weapon in weapons then
59809: LD_VAR 0 8
59813: PUSH
59814: LD_VAR 0 9
59818: IN
59819: IFFALSE 59846
// begin result := [ i , weapon ] ;
59821: LD_ADDR_VAR 0 3
59825: PUSH
59826: LD_VAR 0 4
59830: PUSH
59831: LD_VAR 0 8
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: ST_TO_ADDR
// exit ;
59840: POP
59841: POP
59842: POP
59843: POP
59844: GO 59854
// end ; end ;
59846: GO 59782
59848: POP
59849: POP
// end ;
59850: GO 59668
59852: POP
59853: POP
// end ;
59854: LD_VAR 0 3
59858: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59859: LD_INT 0
59861: PPUSH
// if not side or side > 8 then
59862: LD_VAR 0 3
59866: NOT
59867: PUSH
59868: LD_VAR 0 3
59872: PUSH
59873: LD_INT 8
59875: GREATER
59876: OR
59877: IFFALSE 59881
// exit ;
59879: GO 59940
// if not range then
59881: LD_VAR 0 4
59885: NOT
59886: IFFALSE 59897
// range := - 12 ;
59888: LD_ADDR_VAR 0 4
59892: PUSH
59893: LD_INT 12
59895: NEG
59896: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59897: LD_VAR 0 1
59901: PPUSH
59902: LD_VAR 0 2
59906: PPUSH
59907: LD_VAR 0 3
59911: PPUSH
59912: LD_VAR 0 4
59916: PPUSH
59917: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59921: LD_VAR 0 1
59925: PPUSH
59926: LD_VAR 0 2
59930: PPUSH
59931: LD_VAR 0 3
59935: PPUSH
59936: CALL_OW 331
// end ;
59940: LD_VAR 0 5
59944: RET
// export function Video ( mode ) ; begin
59945: LD_INT 0
59947: PPUSH
// ingame_video = mode ;
59948: LD_ADDR_OWVAR 52
59952: PUSH
59953: LD_VAR 0 1
59957: ST_TO_ADDR
// interface_hidden = mode ;
59958: LD_ADDR_OWVAR 54
59962: PUSH
59963: LD_VAR 0 1
59967: ST_TO_ADDR
// end ;
59968: LD_VAR 0 2
59972: RET
// export function Join ( array , element ) ; begin
59973: LD_INT 0
59975: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59976: LD_ADDR_VAR 0 3
59980: PUSH
59981: LD_VAR 0 1
59985: PPUSH
59986: LD_VAR 0 1
59990: PUSH
59991: LD_INT 1
59993: PLUS
59994: PPUSH
59995: LD_VAR 0 2
59999: PPUSH
60000: CALL_OW 1
60004: ST_TO_ADDR
// end ;
60005: LD_VAR 0 3
60009: RET
// export function JoinUnion ( array , element ) ; begin
60010: LD_INT 0
60012: PPUSH
// result := array union element ;
60013: LD_ADDR_VAR 0 3
60017: PUSH
60018: LD_VAR 0 1
60022: PUSH
60023: LD_VAR 0 2
60027: UNION
60028: ST_TO_ADDR
// end ;
60029: LD_VAR 0 3
60033: RET
// export function GetBehemoths ( side ) ; begin
60034: LD_INT 0
60036: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60037: LD_ADDR_VAR 0 2
60041: PUSH
60042: LD_INT 22
60044: PUSH
60045: LD_VAR 0 1
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 31
60056: PUSH
60057: LD_INT 25
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PPUSH
60068: CALL_OW 69
60072: ST_TO_ADDR
// end ;
60073: LD_VAR 0 2
60077: RET
// export function Shuffle ( array ) ; var i , index ; begin
60078: LD_INT 0
60080: PPUSH
60081: PPUSH
60082: PPUSH
// result := [ ] ;
60083: LD_ADDR_VAR 0 2
60087: PUSH
60088: EMPTY
60089: ST_TO_ADDR
// if not array then
60090: LD_VAR 0 1
60094: NOT
60095: IFFALSE 60099
// exit ;
60097: GO 60198
// Randomize ;
60099: CALL_OW 10
// for i = array downto 1 do
60103: LD_ADDR_VAR 0 3
60107: PUSH
60108: DOUBLE
60109: LD_VAR 0 1
60113: INC
60114: ST_TO_ADDR
60115: LD_INT 1
60117: PUSH
60118: FOR_DOWNTO
60119: IFFALSE 60196
// begin index := rand ( 1 , array ) ;
60121: LD_ADDR_VAR 0 4
60125: PUSH
60126: LD_INT 1
60128: PPUSH
60129: LD_VAR 0 1
60133: PPUSH
60134: CALL_OW 12
60138: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60139: LD_ADDR_VAR 0 2
60143: PUSH
60144: LD_VAR 0 2
60148: PPUSH
60149: LD_VAR 0 2
60153: PUSH
60154: LD_INT 1
60156: PLUS
60157: PPUSH
60158: LD_VAR 0 1
60162: PUSH
60163: LD_VAR 0 4
60167: ARRAY
60168: PPUSH
60169: CALL_OW 2
60173: ST_TO_ADDR
// array := Delete ( array , index ) ;
60174: LD_ADDR_VAR 0 1
60178: PUSH
60179: LD_VAR 0 1
60183: PPUSH
60184: LD_VAR 0 4
60188: PPUSH
60189: CALL_OW 3
60193: ST_TO_ADDR
// end ;
60194: GO 60118
60196: POP
60197: POP
// end ;
60198: LD_VAR 0 2
60202: RET
// export function GetBaseMaterials ( base ) ; begin
60203: LD_INT 0
60205: PPUSH
// result := [ 0 , 0 , 0 ] ;
60206: LD_ADDR_VAR 0 2
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: LIST
60224: ST_TO_ADDR
// if not base then
60225: LD_VAR 0 1
60229: NOT
60230: IFFALSE 60234
// exit ;
60232: GO 60283
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60234: LD_ADDR_VAR 0 2
60238: PUSH
60239: LD_VAR 0 1
60243: PPUSH
60244: LD_INT 1
60246: PPUSH
60247: CALL_OW 275
60251: PUSH
60252: LD_VAR 0 1
60256: PPUSH
60257: LD_INT 2
60259: PPUSH
60260: CALL_OW 275
60264: PUSH
60265: LD_VAR 0 1
60269: PPUSH
60270: LD_INT 3
60272: PPUSH
60273: CALL_OW 275
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: LIST
60282: ST_TO_ADDR
// end ;
60283: LD_VAR 0 2
60287: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60288: LD_INT 0
60290: PPUSH
60291: PPUSH
// result := array ;
60292: LD_ADDR_VAR 0 3
60296: PUSH
60297: LD_VAR 0 1
60301: ST_TO_ADDR
// if size > 0 then
60302: LD_VAR 0 2
60306: PUSH
60307: LD_INT 0
60309: GREATER
60310: IFFALSE 60356
// for i := array downto size do
60312: LD_ADDR_VAR 0 4
60316: PUSH
60317: DOUBLE
60318: LD_VAR 0 1
60322: INC
60323: ST_TO_ADDR
60324: LD_VAR 0 2
60328: PUSH
60329: FOR_DOWNTO
60330: IFFALSE 60354
// result := Delete ( result , result ) ;
60332: LD_ADDR_VAR 0 3
60336: PUSH
60337: LD_VAR 0 3
60341: PPUSH
60342: LD_VAR 0 3
60346: PPUSH
60347: CALL_OW 3
60351: ST_TO_ADDR
60352: GO 60329
60354: POP
60355: POP
// end ;
60356: LD_VAR 0 3
60360: RET
// export function ComExit ( unit ) ; var tmp ; begin
60361: LD_INT 0
60363: PPUSH
60364: PPUSH
// if not IsInUnit ( unit ) then
60365: LD_VAR 0 1
60369: PPUSH
60370: CALL_OW 310
60374: NOT
60375: IFFALSE 60379
// exit ;
60377: GO 60439
// tmp := IsInUnit ( unit ) ;
60379: LD_ADDR_VAR 0 3
60383: PUSH
60384: LD_VAR 0 1
60388: PPUSH
60389: CALL_OW 310
60393: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60394: LD_VAR 0 3
60398: PPUSH
60399: CALL_OW 247
60403: PUSH
60404: LD_INT 2
60406: EQUAL
60407: IFFALSE 60420
// ComExitVehicle ( unit ) else
60409: LD_VAR 0 1
60413: PPUSH
60414: CALL_OW 121
60418: GO 60429
// ComExitBuilding ( unit ) ;
60420: LD_VAR 0 1
60424: PPUSH
60425: CALL_OW 122
// result := tmp ;
60429: LD_ADDR_VAR 0 2
60433: PUSH
60434: LD_VAR 0 3
60438: ST_TO_ADDR
// end ;
60439: LD_VAR 0 2
60443: RET
// export function ResetHc ; begin
60444: LD_INT 0
60446: PPUSH
// InitHc ;
60447: CALL_OW 19
// hc_importance := 0 ;
60451: LD_ADDR_OWVAR 32
60455: PUSH
60456: LD_INT 0
60458: ST_TO_ADDR
// end ;
60459: LD_VAR 0 1
60463: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60464: LD_INT 0
60466: PPUSH
60467: PPUSH
60468: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60469: LD_ADDR_VAR 0 6
60473: PUSH
60474: LD_VAR 0 1
60478: PUSH
60479: LD_VAR 0 3
60483: PLUS
60484: PUSH
60485: LD_INT 2
60487: DIV
60488: ST_TO_ADDR
// if _x < 0 then
60489: LD_VAR 0 6
60493: PUSH
60494: LD_INT 0
60496: LESS
60497: IFFALSE 60514
// _x := _x * - 1 ;
60499: LD_ADDR_VAR 0 6
60503: PUSH
60504: LD_VAR 0 6
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: MUL
60513: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60514: LD_ADDR_VAR 0 7
60518: PUSH
60519: LD_VAR 0 2
60523: PUSH
60524: LD_VAR 0 4
60528: PLUS
60529: PUSH
60530: LD_INT 2
60532: DIV
60533: ST_TO_ADDR
// if _y < 0 then
60534: LD_VAR 0 7
60538: PUSH
60539: LD_INT 0
60541: LESS
60542: IFFALSE 60559
// _y := _y * - 1 ;
60544: LD_ADDR_VAR 0 7
60548: PUSH
60549: LD_VAR 0 7
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: MUL
60558: ST_TO_ADDR
// result := [ _x , _y ] ;
60559: LD_ADDR_VAR 0 5
60563: PUSH
60564: LD_VAR 0 6
60568: PUSH
60569: LD_VAR 0 7
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: ST_TO_ADDR
// end ;
60578: LD_VAR 0 5
60582: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60583: LD_INT 0
60585: PPUSH
60586: PPUSH
60587: PPUSH
60588: PPUSH
// task := GetTaskList ( unit ) ;
60589: LD_ADDR_VAR 0 7
60593: PUSH
60594: LD_VAR 0 1
60598: PPUSH
60599: CALL_OW 437
60603: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60604: LD_VAR 0 7
60608: NOT
60609: PUSH
60610: LD_VAR 0 1
60614: PPUSH
60615: LD_VAR 0 2
60619: PPUSH
60620: CALL_OW 308
60624: NOT
60625: AND
60626: IFFALSE 60630
// exit ;
60628: GO 60748
// if IsInArea ( unit , area ) then
60630: LD_VAR 0 1
60634: PPUSH
60635: LD_VAR 0 2
60639: PPUSH
60640: CALL_OW 308
60644: IFFALSE 60662
// begin ComMoveToArea ( unit , goAway ) ;
60646: LD_VAR 0 1
60650: PPUSH
60651: LD_VAR 0 3
60655: PPUSH
60656: CALL_OW 113
// exit ;
60660: GO 60748
// end ; if task [ 1 ] [ 1 ] <> M then
60662: LD_VAR 0 7
60666: PUSH
60667: LD_INT 1
60669: ARRAY
60670: PUSH
60671: LD_INT 1
60673: ARRAY
60674: PUSH
60675: LD_STRING M
60677: NONEQUAL
60678: IFFALSE 60682
// exit ;
60680: GO 60748
// x := task [ 1 ] [ 2 ] ;
60682: LD_ADDR_VAR 0 5
60686: PUSH
60687: LD_VAR 0 7
60691: PUSH
60692: LD_INT 1
60694: ARRAY
60695: PUSH
60696: LD_INT 2
60698: ARRAY
60699: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60700: LD_ADDR_VAR 0 6
60704: PUSH
60705: LD_VAR 0 7
60709: PUSH
60710: LD_INT 1
60712: ARRAY
60713: PUSH
60714: LD_INT 3
60716: ARRAY
60717: ST_TO_ADDR
// if InArea ( x , y , area ) then
60718: LD_VAR 0 5
60722: PPUSH
60723: LD_VAR 0 6
60727: PPUSH
60728: LD_VAR 0 2
60732: PPUSH
60733: CALL_OW 309
60737: IFFALSE 60748
// ComStop ( unit ) ;
60739: LD_VAR 0 1
60743: PPUSH
60744: CALL_OW 141
// end ;
60748: LD_VAR 0 4
60752: RET
// export function Abs ( value ) ; begin
60753: LD_INT 0
60755: PPUSH
// result := value ;
60756: LD_ADDR_VAR 0 2
60760: PUSH
60761: LD_VAR 0 1
60765: ST_TO_ADDR
// if value < 0 then
60766: LD_VAR 0 1
60770: PUSH
60771: LD_INT 0
60773: LESS
60774: IFFALSE 60791
// result := value * - 1 ;
60776: LD_ADDR_VAR 0 2
60780: PUSH
60781: LD_VAR 0 1
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: MUL
60790: ST_TO_ADDR
// end ;
60791: LD_VAR 0 2
60795: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60796: LD_INT 0
60798: PPUSH
60799: PPUSH
60800: PPUSH
60801: PPUSH
60802: PPUSH
60803: PPUSH
60804: PPUSH
60805: PPUSH
// if not unit or not building then
60806: LD_VAR 0 1
60810: NOT
60811: PUSH
60812: LD_VAR 0 2
60816: NOT
60817: OR
60818: IFFALSE 60822
// exit ;
60820: GO 61048
// x := GetX ( building ) ;
60822: LD_ADDR_VAR 0 4
60826: PUSH
60827: LD_VAR 0 2
60831: PPUSH
60832: CALL_OW 250
60836: ST_TO_ADDR
// y := GetY ( building ) ;
60837: LD_ADDR_VAR 0 6
60841: PUSH
60842: LD_VAR 0 2
60846: PPUSH
60847: CALL_OW 251
60851: ST_TO_ADDR
// d := GetDir ( building ) ;
60852: LD_ADDR_VAR 0 8
60856: PUSH
60857: LD_VAR 0 2
60861: PPUSH
60862: CALL_OW 254
60866: ST_TO_ADDR
// r := 4 ;
60867: LD_ADDR_VAR 0 9
60871: PUSH
60872: LD_INT 4
60874: ST_TO_ADDR
// for i := 1 to 5 do
60875: LD_ADDR_VAR 0 10
60879: PUSH
60880: DOUBLE
60881: LD_INT 1
60883: DEC
60884: ST_TO_ADDR
60885: LD_INT 5
60887: PUSH
60888: FOR_TO
60889: IFFALSE 61046
// begin _x := ShiftX ( x , d , r + i ) ;
60891: LD_ADDR_VAR 0 5
60895: PUSH
60896: LD_VAR 0 4
60900: PPUSH
60901: LD_VAR 0 8
60905: PPUSH
60906: LD_VAR 0 9
60910: PUSH
60911: LD_VAR 0 10
60915: PLUS
60916: PPUSH
60917: CALL_OW 272
60921: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60922: LD_ADDR_VAR 0 7
60926: PUSH
60927: LD_VAR 0 6
60931: PPUSH
60932: LD_VAR 0 8
60936: PPUSH
60937: LD_VAR 0 9
60941: PUSH
60942: LD_VAR 0 10
60946: PLUS
60947: PPUSH
60948: CALL_OW 273
60952: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60953: LD_VAR 0 5
60957: PPUSH
60958: LD_VAR 0 7
60962: PPUSH
60963: CALL_OW 488
60967: PUSH
60968: LD_VAR 0 5
60972: PPUSH
60973: LD_VAR 0 7
60977: PPUSH
60978: CALL_OW 428
60982: PPUSH
60983: CALL_OW 247
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: IN
60998: NOT
60999: AND
61000: IFFALSE 61044
// begin ComMoveXY ( unit , _x , _y ) ;
61002: LD_VAR 0 1
61006: PPUSH
61007: LD_VAR 0 5
61011: PPUSH
61012: LD_VAR 0 7
61016: PPUSH
61017: CALL_OW 111
// result := [ _x , _y ] ;
61021: LD_ADDR_VAR 0 3
61025: PUSH
61026: LD_VAR 0 5
61030: PUSH
61031: LD_VAR 0 7
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: ST_TO_ADDR
// exit ;
61040: POP
61041: POP
61042: GO 61048
// end ; end ;
61044: GO 60888
61046: POP
61047: POP
// end ;
61048: LD_VAR 0 3
61052: RET
