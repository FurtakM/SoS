// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 230 0 0
// PrepareAllies ;
  12: CALL 2221 0 0
// Action ;
  16: CALL 4063 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 182 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 10
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 11
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 13
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 15
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_res_art := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// player_artifact_ready := false ;
 128: LD_ADDR_EXP 16
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 9
 140: PUSH
 141: LD_INT 52500
 143: PUSH
 144: LD_INT 67200
 146: PUSH
 147: LD_INT 84000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// bonus_num := 0 ;
 161: LD_ADDR_EXP 14
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// artifact_progress := 0 ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// end ;
 177: LD_VAR 0 1
 181: RET
// export function SetDiplomacy ; begin
 182: LD_INT 0
 184: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 185: LD_INT 92
 187: PPUSH
 188: LD_INT 48
 190: PPUSH
 191: LD_INT 8
 193: PPUSH
 194: LD_INT 32796
 196: NEG
 197: PPUSH
 198: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 202: LD_INT 92
 204: PPUSH
 205: LD_INT 48
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 215: LD_INT 5
 217: PPUSH
 218: LD_INT 8
 220: PPUSH
 221: CALL_OW 343
// end ; end_of_file
 225: LD_VAR 0 1
 229: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
// uc_side := 2 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 2
 257: ST_TO_ADDR
// uc_nation := nation_arabian ;
 258: LD_ADDR_OWVAR 21
 262: PUSH
 263: LD_INT 2
 265: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 6
 274: PPUSH
 275: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 279: LD_ADDR_OWVAR 26
 283: PUSH
 284: LD_STRING Nicolas Vervecken
 286: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING SecondCharsGal
 294: ST_TO_ADDR
// hc_face_number := 3 ;
 295: LD_ADDR_OWVAR 34
 299: PUSH
 300: LD_INT 3
 302: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 303: LD_ADDR_OWVAR 29
 307: PUSH
 308: LD_INT 11
 310: PUSH
 311: LD_INT 10
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// Vervecken := CreateHuman ;
 318: LD_ADDR_EXP 12
 322: PUSH
 323: CALL_OW 44
 327: ST_TO_ADDR
// InitHc ;
 328: CALL_OW 19
// uc_side := 8 ;
 332: LD_ADDR_OWVAR 20
 336: PUSH
 337: LD_INT 8
 339: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 340: LD_INT 23
 342: PPUSH
 343: CALL_OW 274
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 4000
 353: PUSH
 354: LD_INT 2500
 356: PUSH
 357: LD_INT 1250
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_OWVAR 67
 369: ARRAY
 370: PPUSH
 371: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 375: LD_INT 23
 377: PPUSH
 378: CALL_OW 274
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: LD_INT 300
 388: PPUSH
 389: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 393: LD_INT 23
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 3
 403: PPUSH
 404: LD_INT 100
 406: PUSH
 407: LD_INT 50
 409: PUSH
 410: LD_INT 30
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: PPUSH
 424: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 428: LD_ADDR_VAR 0 14
 432: PUSH
 433: LD_INT 23
 435: PPUSH
 436: CALL_OW 250
 440: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 441: LD_ADDR_VAR 0 15
 445: PUSH
 446: LD_INT 23
 448: PPUSH
 449: CALL_OW 251
 453: ST_TO_ADDR
// team := [ ] ;
 454: LD_ADDR_VAR 0 7
 458: PUSH
 459: EMPTY
 460: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 461: LD_ADDR_VAR 0 8
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: PUSH
 480: LD_OWVAR 67
 484: ARRAY
 485: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 486: LD_ADDR_VAR 0 9
 490: PUSH
 491: LD_INT 11
 493: PUSH
 494: LD_INT 9
 496: PUSH
 497: LD_INT 8
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 511: LD_ADDR_VAR 0 10
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_OWVAR 67
 534: ARRAY
 535: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 536: LD_ADDR_VAR 0 11
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 561: LD_ADDR_VAR 0 12
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 13
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 4
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 611: LD_ADDR_VAR 0 18
 615: PUSH
 616: LD_INT 13
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: LD_INT 26
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 14
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 25
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 14
 654: PUSH
 655: LD_INT 3
 657: PUSH
 658: LD_INT 5
 660: PUSH
 661: LD_INT 32
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 14
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: LD_INT 31
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_INT 14
 690: PUSH
 691: LD_INT 3
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 24
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 14
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: LD_INT 25
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: PUSH
 724: LD_INT 13
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 24
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_VAR 0 18
 765: PUSH
 766: LD_OWVAR 67
 770: MINUS
 771: PUSH
 772: LD_INT 1
 774: PLUS
 775: PUSH
 776: FOR_TO
 777: IFFALSE 906
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 779: LD_ADDR_OWVAR 37
 783: PUSH
 784: LD_VAR 0 18
 788: PUSH
 789: LD_VAR 0 2
 793: ARRAY
 794: PUSH
 795: LD_INT 1
 797: ARRAY
 798: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 799: LD_ADDR_OWVAR 39
 803: PUSH
 804: LD_VAR 0 18
 808: PUSH
 809: LD_VAR 0 2
 813: ARRAY
 814: PUSH
 815: LD_INT 2
 817: ARRAY
 818: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 819: LD_ADDR_OWVAR 38
 823: PUSH
 824: LD_VAR 0 18
 828: PUSH
 829: LD_VAR 0 2
 833: ARRAY
 834: PUSH
 835: LD_INT 3
 837: ARRAY
 838: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 839: LD_ADDR_OWVAR 40
 843: PUSH
 844: LD_VAR 0 18
 848: PUSH
 849: LD_VAR 0 2
 853: ARRAY
 854: PUSH
 855: LD_INT 4
 857: ARRAY
 858: ST_TO_ADDR
// un := CreateVehicle ;
 859: LD_ADDR_VAR 0 6
 863: PUSH
 864: CALL_OW 45
 868: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 869: LD_VAR 0 6
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: LD_INT 5
 879: PPUSH
 880: CALL_OW 12
 884: PPUSH
 885: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 889: LD_VAR 0 6
 893: PPUSH
 894: LD_INT 7
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 49
// end ;
 904: GO 776
 906: POP
 907: POP
// for i = 1 to ape_num do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_VAR 0 13
 922: PUSH
 923: FOR_TO
 924: IFFALSE 991
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 926: LD_INT 0
 928: PPUSH
 929: LD_INT 16
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: CALL_OW 12
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 960: LD_ADDR_VAR 0 7
 964: PUSH
 965: LD_VAR 0 7
 969: PPUSH
 970: LD_VAR 0 7
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: CALL_OW 44
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: GO 923
 991: POP
 992: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 993: LD_INT 1
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: LD_VAR 0 8
1003: PPUSH
1004: CALL_OW 380
// l1 := CreateHuman ;
1008: LD_ADDR_EXP 2
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_INT 23
1025: PPUSH
1026: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1030: LD_INT 1
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_VAR 0 8
1040: PPUSH
1041: CALL_OW 380
// l2 := CreateHuman ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: CALL_OW 44
1054: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 23
1062: PPUSH
1063: CALL_OW 52
// for class = 1 to 4 do
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 4
1079: PUSH
1080: FOR_TO
1081: IFFALSE 1180
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_VAR 0 9
1097: PUSH
1098: LD_VAR 0 10
1102: PUSH
1103: LD_VAR 0 11
1107: PUSH
1108: LD_VAR 0 12
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1176
// begin PrepareHuman ( false , class , skill ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_VAR 0 4
1135: PPUSH
1136: LD_VAR 0 8
1140: PPUSH
1141: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1145: LD_ADDR_VAR 0 7
1149: PUSH
1150: LD_VAR 0 7
1154: PPUSH
1155: LD_VAR 0 7
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: CALL_OW 44
1168: PPUSH
1169: CALL_OW 2
1173: ST_TO_ADDR
// end ;
1174: GO 1125
1176: POP
1177: POP
1178: GO 1080
1180: POP
1181: POP
// for i in team do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_VAR 0 7
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1669
// begin b := 0 ;
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 0
1202: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1203: LD_VAR 0 2
1207: PPUSH
1208: CALL_OW 257
1212: PUSH
1213: LD_INT 1
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1328
1221: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1222: LD_ADDR_VAR 0 5
1226: PUSH
1227: LD_INT 22
1229: PUSH
1230: LD_OWVAR 20
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 30
1254: PUSH
1255: LD_INT 31
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 58
1269: PUSH
1270: EMPTY
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 69
1282: ST_TO_ADDR
// if not b then
1283: LD_VAR 0 5
1287: NOT
1288: IFFALSE 1326
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1290: LD_ADDR_VAR 0 5
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_OWVAR 20
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 5
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL_OW 69
1325: ST_TO_ADDR
// end ; class_engineer :
1326: GO 1567
1328: LD_INT 2
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1375
1336: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1337: LD_ADDR_VAR 0 5
1341: PUSH
1342: LD_INT 22
1344: PUSH
1345: LD_OWVAR 20
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: LD_INT 30
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 69
1372: ST_TO_ADDR
1373: GO 1567
1375: LD_INT 3
1377: DOUBLE
1378: EQUAL
1379: IFTRUE 1383
1381: GO 1472
1383: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 5
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_OWVAR 20
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 21
1403: PUSH
1404: LD_INT 2
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 58
1413: PUSH
1414: EMPTY
1415: LIST
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 69
1426: ST_TO_ADDR
// if not b then
1427: LD_VAR 0 5
1431: NOT
1432: IFFALSE 1470
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1434: LD_ADDR_VAR 0 5
1438: PUSH
1439: LD_INT 22
1441: PUSH
1442: LD_OWVAR 20
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 30
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PPUSH
1465: CALL_OW 69
1469: ST_TO_ADDR
// end ; class_scientistic :
1470: GO 1567
1472: LD_INT 4
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1519
1480: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1481: LD_ADDR_VAR 0 5
1485: PUSH
1486: LD_INT 22
1488: PUSH
1489: LD_OWVAR 20
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 30
1500: PUSH
1501: LD_INT 8
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: ST_TO_ADDR
// end ; class_apeman_soldier :
1517: GO 1567
1519: LD_INT 15
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1566
1527: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1528: LD_ADDR_VAR 0 5
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_OWVAR 20
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 30
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PPUSH
1559: CALL_OW 69
1563: ST_TO_ADDR
1564: GO 1567
1566: POP
// if b then
1567: LD_VAR 0 5
1571: IFFALSE 1642
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1573: LD_VAR 0 5
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: CALL_OW 266
1586: PUSH
1587: LD_INT 31
1589: EQUAL
1590: IFFALSE 1612
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: PPUSH
1606: CALL 4830 0 2
1610: GO 1640
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_INT 1
1624: PPUSH
1625: LD_VAR 0 5
1629: PPUSH
1630: CALL_OW 12
1634: ARRAY
1635: PPUSH
1636: CALL_OW 52
1640: GO 1667
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 14
1651: PPUSH
1652: LD_VAR 0 15
1656: PPUSH
1657: LD_INT 15
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 50
// end ;
1667: GO 1192
1669: POP
1670: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1671: LD_ADDR_VAR 0 16
1675: PUSH
1676: LD_INT 26
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_OWVAR 67
1697: ARRAY
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 5
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_OWVAR 67
1724: ARRAY
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 24
1732: PUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 5
1738: PUSH
1739: LD_INT 4
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_OWVAR 67
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 30
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: LD_INT 1
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_OWVAR 67
1778: ARRAY
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_INT 22
1797: PUSH
1798: LD_OWVAR 20
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 32
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: PUSH
1826: FOR_IN
1827: IFFALSE 2000
// begin if weapons then
1829: LD_VAR 0 16
1833: IFFALSE 1957
// begin k := rand ( 1 , weapons ) ;
1835: LD_ADDR_VAR 0 3
1839: PUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_VAR 0 16
1847: PPUSH
1848: CALL_OW 12
1852: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1853: LD_ADDR_VAR 0 17
1857: PUSH
1858: LD_VAR 0 16
1862: PUSH
1863: LD_VAR 0 3
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1873: LD_ADDR_VAR 0 16
1877: PUSH
1878: LD_VAR 0 16
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: LD_INT 2
1890: PPUSH
1891: LD_VAR 0 16
1895: PUSH
1896: LD_VAR 0 3
1900: ARRAY
1901: PUSH
1902: LD_INT 2
1904: ARRAY
1905: PUSH
1906: LD_INT 1
1908: MINUS
1909: PPUSH
1910: CALL 4922 0 4
1914: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1915: LD_VAR 0 16
1919: PUSH
1920: LD_VAR 0 3
1924: ARRAY
1925: PUSH
1926: LD_INT 2
1928: ARRAY
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: IFFALSE 1955
// weapons := Delete ( weapons , k ) ;
1935: LD_ADDR_VAR 0 16
1939: PUSH
1940: LD_VAR 0 16
1944: PPUSH
1945: LD_VAR 0 3
1949: PPUSH
1950: CALL_OW 3
1954: ST_TO_ADDR
// end else
1955: GO 1984
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1957: LD_ADDR_VAR 0 17
1961: PUSH
1962: LD_INT 27
1964: PUSH
1965: LD_INT 23
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: CALL_OW 12
1982: ARRAY
1983: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_VAR 0 17
1993: PPUSH
1994: CALL_OW 431
// end ;
1998: GO 1826
2000: POP
2001: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2002: LD_INT 1
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_VAR 0 8
2012: PUSH
2013: LD_INT 1
2015: PLUS
2016: PPUSH
2017: CALL_OW 380
// hc_gallery := potter ;
2021: LD_ADDR_OWVAR 33
2025: PUSH
2026: LD_STRING potter
2028: ST_TO_ADDR
// hc_face_number := 1 ;
2029: LD_ADDR_OWVAR 34
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// hc_importance := 100 ;
2037: LD_ADDR_OWVAR 32
2041: PUSH
2042: LD_INT 100
2044: ST_TO_ADDR
// hc_name := Mike Gerste ;
2045: LD_ADDR_OWVAR 26
2049: PUSH
2050: LD_STRING Mike Gerste
2052: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 10
2060: PUSH
2061: LD_INT 11
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: ST_TO_ADDR
// legion_commander := CreateHuman ;
2068: LD_ADDR_EXP 1
2072: PUSH
2073: CALL_OW 44
2077: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2078: LD_EXP 1
2082: PPUSH
2083: LD_INT 23
2085: PPUSH
2086: CALL_OW 52
// uc_side := 5 ;
2090: LD_ADDR_OWVAR 20
2094: PUSH
2095: LD_INT 5
2097: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 8
2108: PPUSH
2109: CALL_OW 380
// hc_gallery := potter ;
2113: LD_ADDR_OWVAR 33
2117: PUSH
2118: LD_STRING potter
2120: ST_TO_ADDR
// hc_face_number := 2 ;
2121: LD_ADDR_OWVAR 34
2125: PUSH
2126: LD_INT 2
2128: ST_TO_ADDR
// hc_importance := 0 ;
2129: LD_ADDR_OWVAR 32
2133: PUSH
2134: LD_INT 0
2136: ST_TO_ADDR
// hc_name := George Potter ;
2137: LD_ADDR_OWVAR 26
2141: PUSH
2142: LD_STRING George Potter
2144: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2145: LD_ADDR_OWVAR 29
2149: PUSH
2150: LD_INT 12
2152: PUSH
2153: LD_INT 9
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: ST_TO_ADDR
// potter := CreateHuman ;
2160: LD_ADDR_EXP 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2170: LD_EXP 4
2174: PPUSH
2175: LD_INT 4
2177: PPUSH
2178: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2182: LD_EXP 4
2186: PPUSH
2187: LD_INT 103
2189: PPUSH
2190: LD_INT 45
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2200: LD_EXP 4
2204: PPUSH
2205: LD_INT 23
2207: PPUSH
2208: CALL_OW 119
// InitHc ( ) ;
2212: CALL_OW 19
// end ; end_of_file
2216: LD_VAR 0 1
2220: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 5 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 5
2235: ST_TO_ADDR
// uc_nation := nation_arabian ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_OWVAR 20
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 30
2263: PUSH
2264: LD_INT 5
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 69
2279: ST_TO_ADDR
// for i = 1 to 3 do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 3
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2332
// begin PrepareHuman ( false , 2 , 6 ) ;
2296: LD_INT 0
2298: PPUSH
2299: LD_INT 2
2301: PPUSH
2302: LD_INT 6
2304: PPUSH
2305: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2309: CALL_OW 44
2313: PPUSH
2314: LD_INT 27
2316: PPUSH
2317: LD_INT 22
2319: PPUSH
2320: LD_INT 5
2322: PPUSH
2323: LD_INT 0
2325: PPUSH
2326: CALL_OW 50
// end ;
2330: GO 2293
2332: POP
2333: POP
// for i = 1 to 3 do
2334: LD_ADDR_VAR 0 2
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 3
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2383
// begin PrepareHuman ( false , 1 , 6 ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 6
2358: PPUSH
2359: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 4
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PPUSH
2377: CALL_OW 52
// end ;
2381: GO 2347
2383: POP
2384: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: LD_INT 22
2392: PUSH
2393: LD_OWVAR 20
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 2
2404: PUSH
2405: LD_INT 30
2407: PUSH
2408: LD_INT 31
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 30
2417: PUSH
2418: LD_INT 32
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2527
// begin PrepareHuman ( false , 1 , 6 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2455: CALL_OW 44
2459: PPUSH
2460: LD_VAR 0 2
2464: PPUSH
2465: CALL 4830 0 2
// if GetBType ( i ) = b_bunker then
2469: LD_VAR 0 2
2473: PPUSH
2474: CALL_OW 266
2478: PUSH
2479: LD_INT 32
2481: EQUAL
2482: IFFALSE 2525
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 27
2491: PUSH
2492: LD_INT 25
2494: PUSH
2495: LD_INT 24
2497: PUSH
2498: LD_INT 28
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_VAR 0 2
2511: PUSH
2512: LD_INT 4
2514: MOD
2515: PUSH
2516: LD_INT 1
2518: PLUS
2519: ARRAY
2520: PPUSH
2521: CALL_OW 431
// end ;
2525: GO 2439
2527: POP
2528: POP
// for i = 1 to 3 do
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 3
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2660
// begin vc_chassis := ar_half_tracked ;
2545: LD_ADDR_OWVAR 37
2549: PUSH
2550: LD_INT 14
2552: ST_TO_ADDR
// vc_engine := engine_solar ;
2553: LD_ADDR_OWVAR 39
2557: PUSH
2558: LD_INT 2
2560: ST_TO_ADDR
// vc_control := control_manual ;
2561: LD_ADDR_OWVAR 38
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2569: LD_ADDR_OWVAR 40
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 27
2579: PUSH
2580: LD_INT 26
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_VAR 0 2
2592: ARRAY
2593: ST_TO_ADDR
// un := CreateVehicle ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 45
2603: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 3
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2644: CALL_OW 44
2648: PPUSH
2649: LD_VAR 0 3
2653: PPUSH
2654: CALL_OW 52
// end ;
2658: GO 2542
2660: POP
2661: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: LD_INT 6
2670: PPUSH
2671: CALL_OW 380
// al_commander := CreateHuman ;
2675: LD_ADDR_EXP 5
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2685: LD_EXP 5
2689: PPUSH
2690: LD_INT 22
2692: PUSH
2693: LD_OWVAR 20
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PPUSH
2725: CALL_OW 52
// InitHc ( ) ;
2729: CALL_OW 19
// end ;
2733: LD_VAR 0 1
2737: RET
// export function ChangeSide ( ) ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: LD_INT 22
2749: PUSH
2750: LD_INT 5
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 69
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2779
// SetSide ( i , 8 ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_INT 8
2772: PPUSH
2773: CALL_OW 235
2777: GO 2762
2779: POP
2780: POP
// end ;
2781: LD_VAR 0 1
2785: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IFFALSE 3328
2802: GO 2804
2804: DISABLE
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
// begin enable ;
2813: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: LD_INT 22
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 2
2831: PUSH
2832: LD_INT 21
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 21
2844: PUSH
2845: LD_INT 2
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PPUSH
2861: CALL_OW 69
2865: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2866: LD_ADDR_VAR 0 5
2870: PUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 5
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 32
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: LD_INT 24
2896: PUSH
2897: LD_INT 1000
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 69
2917: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 54
2933: PUSH
2934: EMPTY
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 25
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PPUSH
2955: CALL_OW 72
2959: ST_TO_ADDR
// if not list then
2960: LD_VAR 0 2
2964: NOT
2965: IFFALSE 2969
// exit ;
2967: GO 3328
// for i in list do
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 2
2978: PUSH
2979: FOR_IN
2980: IFFALSE 3326
// begin if b then
2982: LD_VAR 0 5
2986: IFFALSE 3067
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_INT 25
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PPUSH
3008: CALL_OW 72
3012: PUSH
3013: FOR_IN
3014: IFFALSE 3065
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 314
3025: NOT
3026: IFFALSE 3043
3028: PUSH
3029: LD_VAR 0 1
3033: PPUSH
3034: CALL_OW 110
3038: PUSH
3039: LD_INT 7
3041: NONEQUAL
3042: AND
3043: IFFALSE 3063
// ComRepairBuilding ( j , b [ 1 ] ) ;
3045: LD_VAR 0 4
3049: PPUSH
3050: LD_VAR 0 5
3054: PUSH
3055: LD_INT 1
3057: ARRAY
3058: PPUSH
3059: CALL_OW 130
3063: GO 3013
3065: POP
3066: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3067: LD_VAR 0 1
3071: PPUSH
3072: CALL_OW 256
3076: PUSH
3077: LD_INT 500
3079: LESS
3080: IFFALSE 3098
3082: PUSH
3083: LD_VAR 0 1
3087: PPUSH
3088: CALL_OW 110
3092: PUSH
3093: LD_INT 7
3095: EQUAL
3096: NOT
3097: AND
3098: IFFALSE 3148
// begin ComMoveToArea ( i , guard_hill ) ;
3100: LD_VAR 0 1
3104: PPUSH
3105: LD_INT 11
3107: PPUSH
3108: CALL_OW 113
// SetTag ( i , 7 ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 247
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: IFFALSE 3148
// begin AddComExitVehicle ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3148: LD_VAR 0 1
3152: PPUSH
3153: CALL_OW 256
3157: PUSH
3158: LD_INT 1000
3160: EQUAL
3161: IFFALSE 3178
3163: PUSH
3164: LD_VAR 0 1
3168: PPUSH
3169: CALL_OW 110
3173: PUSH
3174: LD_INT 7
3176: EQUAL
3177: AND
3178: IFFALSE 3192
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 310
3190: NOT
3191: AND
3192: IFFALSE 3200
3194: PUSH
3195: LD_VAR 0 6
3199: AND
3200: IFFALSE 3228
// begin SetTag ( i , 0 ) ;
3202: LD_VAR 0 1
3206: PPUSH
3207: LD_INT 0
3209: PPUSH
3210: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3214: LD_VAR 0 6
3218: PPUSH
3219: LD_VAR 0 1
3223: PPUSH
3224: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL_OW 247
3237: PUSH
3238: LD_INT 2
3240: EQUAL
3241: IFFALSE 3258
3243: PUSH
3244: LD_VAR 0 1
3248: PPUSH
3249: CALL_OW 110
3253: PUSH
3254: LD_INT 7
3256: NONEQUAL
3257: AND
3258: IFFALSE 3272
3260: PUSH
3261: LD_VAR 0 1
3265: PPUSH
3266: CALL_OW 314
3270: NOT
3271: AND
3272: IFFALSE 3324
// if FilterAllUnits ( [ f_side , 7 ] ) then
3274: LD_INT 22
3276: PUSH
3277: LD_INT 7
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: PPUSH
3284: CALL_OW 69
3288: IFFALSE 3324
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3290: LD_VAR 0 1
3294: PPUSH
3295: LD_INT 22
3297: PUSH
3298: LD_INT 7
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: PPUSH
3310: LD_VAR 0 1
3314: PPUSH
3315: CALL_OW 74
3319: PPUSH
3320: CALL_OW 115
// end ;
3324: GO 2979
3326: POP
3327: POP
// end ; end_of_file
3328: PPOPN 6
3330: END
// export function Game ; var i , val , areas , wave ; begin
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
3336: PPUSH
3337: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3338: LD_ADDR_VAR 0 4
3342: PUSH
3343: LD_INT 1
3345: PUSH
3346: LD_INT 2
3348: PUSH
3349: LD_INT 3
3351: PUSH
3352: LD_INT 4
3354: PUSH
3355: LD_INT 5
3357: PUSH
3358: LD_INT 6
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3369: LD_ADDR_VAR 0 3
3373: PUSH
3374: LD_INT 5
3376: PUSH
3377: LD_INT 6
3379: PUSH
3380: LD_INT 7
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: LIST
3387: PUSH
3388: LD_OWVAR 67
3392: ARRAY
3393: ST_TO_ADDR
// wave := 1 ;
3394: LD_ADDR_VAR 0 5
3398: PUSH
3399: LD_INT 1
3401: ST_TO_ADDR
// while not game_over do
3402: LD_EXP 7
3406: NOT
3407: IFFALSE 3565
// begin repeat begin Wait ( 0 0$01 ) ;
3409: LD_INT 35
3411: PPUSH
3412: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3416: LD_ADDR_EXP 11
3420: PUSH
3421: LD_EXP 11
3425: PUSH
3426: LD_INT 35
3428: PLUS
3429: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3430: LD_INT 22
3432: PUSH
3433: LD_INT 7
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PPUSH
3440: CALL_OW 69
3444: PUSH
3445: LD_INT 10
3447: LESS
3448: IFTRUE 3460
3450: PUSH
3451: LD_EXP 11
3455: PUSH
3456: LD_INT 21000
3458: GREATEREQUAL
3459: OR
3460: IFFALSE 3409
// wave_time := 0 0$00 ;
3462: LD_ADDR_EXP 11
3466: PUSH
3467: LD_INT 0
3469: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3470: LD_INT 5250
3472: PPUSH
3473: CALL_OW 67
// if not ignore_wave then
3477: LD_EXP 15
3481: NOT
3482: IFFALSE 3555
// begin for i = 1 to areas do
3484: LD_ADDR_VAR 0 2
3488: PUSH
3489: DOUBLE
3490: LD_INT 1
3492: DEC
3493: ST_TO_ADDR
3494: LD_VAR 0 4
3498: PUSH
3499: FOR_TO
3500: IFFALSE 3537
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3502: LD_VAR 0 5
3506: PUSH
3507: LD_VAR 0 3
3511: PLUS
3512: PPUSH
3513: LD_VAR 0 4
3517: PUSH
3518: LD_VAR 0 2
3522: ARRAY
3523: PPUSH
3524: CALL 3570 0 2
// Wait ( 0 0$10 ) ;
3528: LD_INT 350
3530: PPUSH
3531: CALL_OW 67
// end ;
3535: GO 3499
3537: POP
3538: POP
// wave := wave + 1 ;
3539: LD_ADDR_VAR 0 5
3543: PUSH
3544: LD_VAR 0 5
3548: PUSH
3549: LD_INT 1
3551: PLUS
3552: ST_TO_ADDR
// end else
3553: GO 3563
// ignore_wave := false ;
3555: LD_ADDR_EXP 15
3559: PUSH
3560: LD_INT 0
3562: ST_TO_ADDR
// end ;
3563: GO 3402
// end ;
3565: LD_VAR 0 1
3569: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3570: LD_INT 0
3572: PPUSH
3573: PPUSH
3574: PPUSH
3575: PPUSH
3576: PPUSH
// uc_side := 7 ;
3577: LD_ADDR_OWVAR 20
3581: PUSH
3582: LD_INT 7
3584: ST_TO_ADDR
// uc_nation := 2 ;
3585: LD_ADDR_OWVAR 21
3589: PUSH
3590: LD_INT 2
3592: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3593: LD_ADDR_VAR 0 5
3597: PUSH
3598: LD_INT 10
3600: PUSH
3601: LD_OWVAR 1
3605: PUSH
3606: LD_INT 10500
3608: DIV
3609: PLUS
3610: ST_TO_ADDR
// if v > 25 then
3611: LD_VAR 0 5
3615: PUSH
3616: LD_INT 25
3618: GREATER
3619: IFFALSE 3629
// v := 25 ;
3621: LD_ADDR_VAR 0 5
3625: PUSH
3626: LD_INT 25
3628: ST_TO_ADDR
// InitHc ( ) ;
3629: CALL_OW 19
// hc_gallery :=  ;
3633: LD_ADDR_OWVAR 33
3637: PUSH
3638: LD_STRING 
3640: ST_TO_ADDR
// hc_importance := 0 ;
3641: LD_ADDR_OWVAR 32
3645: PUSH
3646: LD_INT 0
3648: ST_TO_ADDR
// hc_name :=  ;
3649: LD_ADDR_OWVAR 26
3653: PUSH
3654: LD_STRING 
3656: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3657: LD_ADDR_OWVAR 29
3661: PUSH
3662: LD_VAR 0 5
3666: PUSH
3667: LD_VAR 0 5
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: ST_TO_ADDR
// if val > 35 then
3676: LD_VAR 0 1
3680: PUSH
3681: LD_INT 35
3683: GREATER
3684: IFFALSE 3694
// val := 35 ;
3686: LD_ADDR_VAR 0 1
3690: PUSH
3691: LD_INT 35
3693: ST_TO_ADDR
// for i = 1 to val do
3694: LD_ADDR_VAR 0 4
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_VAR 0 1
3708: PUSH
3709: FOR_TO
3710: IFFALSE 3921
// begin if i mod 9 = 0 then
3712: LD_VAR 0 4
3716: PUSH
3717: LD_INT 9
3719: MOD
3720: PUSH
3721: LD_INT 0
3723: EQUAL
3724: IFFALSE 3736
// class := class_apeman_kamikaze else
3726: LD_ADDR_VAR 0 7
3730: PUSH
3731: LD_INT 17
3733: ST_TO_ADDR
3734: GO 3768
// if i mod 4 = 0 then
3736: LD_VAR 0 4
3740: PUSH
3741: LD_INT 4
3743: MOD
3744: PUSH
3745: LD_INT 0
3747: EQUAL
3748: IFFALSE 3760
// class := class_apeman_soldier else
3750: LD_ADDR_VAR 0 7
3754: PUSH
3755: LD_INT 15
3757: ST_TO_ADDR
3758: GO 3768
// class := class_apeman ;
3760: LD_ADDR_VAR 0 7
3764: PUSH
3765: LD_INT 12
3767: ST_TO_ADDR
// if i mod 6 = 0 then
3768: LD_VAR 0 4
3772: PUSH
3773: LD_INT 6
3775: MOD
3776: PUSH
3777: LD_INT 0
3779: EQUAL
3780: IFFALSE 3853
// begin vc_chassis := ar_half_tracked ;
3782: LD_ADDR_OWVAR 37
3786: PUSH
3787: LD_INT 14
3789: ST_TO_ADDR
// vc_control := control_apeman ;
3790: LD_ADDR_OWVAR 38
3794: PUSH
3795: LD_INT 5
3797: ST_TO_ADDR
// vc_engine := engine_siberite ;
3798: LD_ADDR_OWVAR 39
3802: PUSH
3803: LD_INT 3
3805: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3806: LD_ADDR_OWVAR 40
3810: PUSH
3811: LD_INT 28
3813: PUSH
3814: LD_INT 27
3816: PUSH
3817: LD_INT 29
3819: PUSH
3820: LD_INT 91
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: PUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 4
3834: PPUSH
3835: CALL_OW 12
3839: ARRAY
3840: ST_TO_ADDR
// un := CreateVehicle ;
3841: LD_ADDR_VAR 0 6
3845: PUSH
3846: CALL_OW 45
3850: ST_TO_ADDR
// end else
3851: GO 3878
// begin PrepareHuman ( sex_male , class , 10 ) ;
3853: LD_INT 1
3855: PPUSH
3856: LD_VAR 0 7
3860: PPUSH
3861: LD_INT 10
3863: PPUSH
3864: CALL_OW 380
// un := CreateHuman ;
3868: LD_ADDR_VAR 0 6
3872: PUSH
3873: CALL_OW 44
3877: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3878: LD_VAR 0 6
3882: PPUSH
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3895: LD_VAR 0 6
3899: PPUSH
3900: CALL_OW 250
3904: PPUSH
3905: LD_VAR 0 6
3909: PPUSH
3910: CALL_OW 251
3914: PPUSH
3915: CALL_OW 494
// end ;
3919: GO 3709
3921: POP
3922: POP
// end ;
3923: LD_VAR 0 3
3927: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3928: LD_EXP 6
3932: IFFALSE 3941
3934: PUSH
3935: LD_EXP 7
3939: NOT
3940: AND
3941: IFFALSE 4060
3943: GO 3945
3945: DISABLE
3946: LD_INT 0
3948: PPUSH
3949: PPUSH
3950: PPUSH
// begin enable ;
3951: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_INT 22
3959: PUSH
3960: LD_INT 7
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PPUSH
3967: CALL_OW 69
3971: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3972: LD_ADDR_VAR 0 3
3976: PUSH
3977: LD_INT 81
3979: PUSH
3980: LD_INT 7
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: PPUSH
3987: CALL_OW 69
3991: ST_TO_ADDR
// if not list then
3992: LD_VAR 0 2
3996: NOT
3997: IFFALSE 4001
// exit ;
3999: GO 4060
// for i in list do
4001: LD_ADDR_VAR 0 1
4005: PUSH
4006: LD_VAR 0 2
4010: PUSH
4011: FOR_IN
4012: IFFALSE 4058
// begin if enemy then
4014: LD_VAR 0 3
4018: IFFALSE 4056
// if not HasTask ( i ) then
4020: LD_VAR 0 1
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4056
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4032: LD_VAR 0 1
4036: PPUSH
4037: LD_VAR 0 3
4041: PPUSH
4042: LD_VAR 0 1
4046: PPUSH
4047: CALL_OW 74
4051: PPUSH
4052: CALL_OW 115
// end ;
4056: GO 4011
4058: POP
4059: POP
// end ; end_of_file
4060: PPOPN 3
4062: END
// export function Action ; begin
4063: LD_INT 0
4065: PPUSH
// InGameOn ;
4066: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4070: LD_INT 23
4072: PPUSH
4073: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4077: LD_EXP 1
4081: PPUSH
4082: LD_STRING DL-1
4084: PPUSH
4085: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4089: LD_EXP 2
4093: PPUSH
4094: LD_STRING DA-1
4096: PPUSH
4097: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4101: LD_EXP 3
4105: PPUSH
4106: LD_STRING DA-2
4108: PPUSH
4109: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4113: LD_EXP 1
4117: PPUSH
4118: LD_STRING DL-2
4120: PPUSH
4121: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4125: LD_EXP 3
4129: PPUSH
4130: LD_STRING DA-3
4132: PPUSH
4133: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4137: LD_EXP 1
4141: PPUSH
4142: LD_STRING DL-3
4144: PPUSH
4145: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4149: LD_EXP 2
4153: PPUSH
4154: LD_STRING DA-4
4156: PPUSH
4157: CALL_OW 88
// if not dialogue_skipped then
4161: LD_OWVAR 59
4165: NOT
4166: IFFALSE 4251
// begin Wait ( 0 0$01 ) ;
4168: LD_INT 35
4170: PPUSH
4171: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4175: LD_EXP 2
4179: PUSH
4180: LD_EXP 3
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PPUSH
4189: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4193: LD_EXP 2
4197: PPUSH
4198: LD_INT 107
4200: PPUSH
4201: LD_INT 53
4203: PPUSH
4204: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4208: LD_EXP 3
4212: PPUSH
4213: LD_INT 108
4215: PPUSH
4216: LD_INT 53
4218: PPUSH
4219: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4223: LD_EXP 2
4227: PPUSH
4228: LD_EXP 4
4232: PPUSH
4233: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4237: LD_EXP 3
4241: PPUSH
4242: LD_EXP 4
4246: PPUSH
4247: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4251: LD_INT 35
4253: PPUSH
4254: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4258: LD_EXP 2
4262: PPUSH
4263: LD_INT 107
4265: PPUSH
4266: LD_INT 53
4268: PPUSH
4269: CALL_OW 307
4273: IFTRUE 4281
4275: PUSH
4276: LD_OWVAR 59
4280: OR
4281: IFFALSE 4251
// if not dialogue_skipped then
4283: LD_OWVAR 59
4287: NOT
4288: IFFALSE 4389
// begin ComTurnUnit ( potter , l1 ) ;
4290: LD_EXP 4
4294: PPUSH
4295: LD_EXP 2
4299: PPUSH
4300: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4304: LD_INT 10
4306: PPUSH
4307: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4311: LD_EXP 4
4315: PPUSH
4316: LD_INT 108
4318: PPUSH
4319: LD_INT 1
4321: PPUSH
4322: LD_INT 0
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 483
// Wait ( 0 0$01 ) ;
4332: LD_INT 35
4334: PPUSH
4335: CALL_OW 67
// RemoveUnit ( potter ) ;
4339: LD_EXP 4
4343: PPUSH
4344: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4348: LD_EXP 2
4352: PPUSH
4353: LD_STRING DA-5
4355: PPUSH
4356: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4360: LD_EXP 3
4364: PPUSH
4365: LD_STRING DA-6
4367: PPUSH
4368: CALL_OW 88
// Wait ( 0 0$02 ) ;
4372: LD_INT 70
4374: PPUSH
4375: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4379: LD_INT 25
4381: PPUSH
4382: LD_INT 19
4384: PPUSH
4385: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4389: LD_INT 20
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL 3570 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4399: LD_EXP 5
4403: PPUSH
4404: LD_STRING DLa-1
4406: PPUSH
4407: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4411: LD_EXP 1
4415: PPUSH
4416: LD_STRING DL-5
4418: PPUSH
4419: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4423: LD_INT 23
4425: PPUSH
4426: CALL_OW 87
// InGameOff ;
4430: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4434: LD_STRING C1
4436: PPUSH
4437: CALL_OW 337
// alert := true ;
4441: LD_ADDR_EXP 6
4445: PUSH
4446: LD_INT 1
4448: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4449: LD_EXP 5
4453: PPUSH
4454: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4458: LD_EXP 5
4462: PPUSH
4463: LD_INT 11
4465: PPUSH
4466: CALL_OW 173
// Wait ( 0 0$30 ) ;
4470: LD_INT 1050
4472: PPUSH
4473: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4477: LD_INT 10
4479: PPUSH
4480: LD_INT 4
4482: PPUSH
4483: CALL 3570 0 2
// Wait ( 0 0$35 ) ;
4487: LD_INT 1225
4489: PPUSH
4490: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4494: LD_INT 10
4496: PPUSH
4497: LD_INT 5
4499: PPUSH
4500: CALL 3570 0 2
// Wait ( 0 0$03 ) ;
4504: LD_INT 105
4506: PPUSH
4507: CALL_OW 67
// Game ;
4511: CALL 3331 0 0
// end ;
4515: LD_VAR 0 1
4519: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4520: LD_INT 22
4522: PUSH
4523: LD_INT 7
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: PPUSH
4530: CALL_OW 69
4534: PUSH
4535: LD_INT 0
4537: EQUAL
4538: IFFALSE 4550
4540: PUSH
4541: LD_EXP 10
4545: PUSH
4546: LD_INT 1500
4548: GREATEREQUAL
4549: AND
4550: IFFALSE 4778
4552: GO 4554
4554: DISABLE
4555: LD_INT 0
4557: PPUSH
4558: PPUSH
// begin DialogueOn ;
4559: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4563: LD_EXP 12
4567: PPUSH
4568: LD_STRING DVr-1
4570: PPUSH
4571: CALL_OW 94
// DialogueOff ;
4575: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4579: LD_STRING QBonusInfo
4581: PPUSH
4582: CALL_OW 97
4586: PUSH
4587: LD_INT 1
4589: DOUBLE
4590: EQUAL
4591: IFTRUE 4595
4593: GO 4606
4595: POP
// bonus_active := true ; end ;
4596: LD_ADDR_EXP 13
4600: PUSH
4601: LD_INT 1
4603: ST_TO_ADDR
4604: GO 4607
4606: POP
// bonus_num := 4 ;
4607: LD_ADDR_EXP 14
4611: PUSH
4612: LD_INT 4
4614: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ;
4615: LD_OWVAR 2
4619: PPUSH
4620: LD_INT 12
4622: PPUSH
4623: LD_INT 2
4625: PPUSH
4626: LD_INT 23
4628: PPUSH
4629: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4633: LD_ADDR_VAR 0 1
4637: PUSH
4638: LD_INT 500
4640: PUSH
4641: LD_INT 3500
4643: PUSH
4644: LD_INT 5750
4646: PUSH
4647: LD_INT 10000
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4656: LD_INT 10500
4658: PUSH
4659: LD_INT 12600
4661: PUSH
4662: LD_INT 14700
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: LIST
4669: PUSH
4670: LD_OWVAR 67
4674: ARRAY
4675: PPUSH
4676: CALL_OW 67
// for i = 1 to tmp do
4680: LD_ADDR_VAR 0 2
4684: PUSH
4685: DOUBLE
4686: LD_INT 1
4688: DEC
4689: ST_TO_ADDR
4690: LD_VAR 0 1
4694: PUSH
4695: FOR_TO
4696: IFFALSE 4728
// if points >= tmp [ i ] then
4698: LD_EXP 10
4702: PUSH
4703: LD_VAR 0 1
4707: PUSH
4708: LD_VAR 0 2
4712: ARRAY
4713: GREATEREQUAL
4714: IFFALSE 4726
// bonus_num := i ;
4716: LD_ADDR_EXP 14
4720: PUSH
4721: LD_VAR 0 2
4725: ST_TO_ADDR
4726: GO 4695
4728: POP
4729: POP
// case Query ( QBonusInfo ) of 1 :
4730: LD_STRING QBonusInfo
4732: PPUSH
4733: CALL_OW 97
4737: PUSH
4738: LD_INT 1
4740: DOUBLE
4741: EQUAL
4742: IFTRUE 4746
4744: GO 4767
4746: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4747: LD_OWVAR 2
4751: PPUSH
4752: LD_INT 12
4754: PPUSH
4755: LD_INT 2
4757: PPUSH
4758: LD_INT 23
4760: PPUSH
4761: CALL_OW 468
4765: GO 4768
4767: POP
// until points >= 15000 ;
4768: LD_EXP 10
4772: PUSH
4773: LD_INT 15000
4775: GREATEREQUAL
4776: IFFALSE 4656
// end ;
4778: PPOPN 2
4780: END
// export function Win ; begin
4781: LD_INT 0
4783: PPUSH
// AddMedal ( med , 1 ) ;
4784: LD_STRING med
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: CALL_OW 101
// AddMedal ( med , 1 ) ;
4794: LD_STRING med
4796: PPUSH
4797: LD_INT 1
4799: PPUSH
4800: CALL_OW 101
// AddMedal ( med , 1 ) ;
4804: LD_STRING med
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 101
// GiveMedals ( MAIN ) ;
4814: LD_STRING MAIN
4816: PPUSH
4817: CALL_OW 102
// YouWin ;
4821: CALL_OW 103
// end ; end_of_file
4825: LD_VAR 0 1
4829: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4830: LD_INT 0
4832: PPUSH
4833: PPUSH
// dir := GetDir ( b ) ;
4834: LD_ADDR_VAR 0 4
4838: PUSH
4839: LD_VAR 0 2
4843: PPUSH
4844: CALL_OW 254
4848: ST_TO_ADDR
// if dir < 3 then
4849: LD_VAR 0 4
4853: PUSH
4854: LD_INT 3
4856: LESS
4857: IFFALSE 4875
// dir := dir + 3 else
4859: LD_ADDR_VAR 0 4
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: LD_INT 3
4871: PLUS
4872: ST_TO_ADDR
4873: GO 4889
// dir := dir - 3 ;
4875: LD_ADDR_VAR 0 4
4879: PUSH
4880: LD_VAR 0 4
4884: PUSH
4885: LD_INT 3
4887: MINUS
4888: ST_TO_ADDR
// SetDir ( un , dir ) ;
4889: LD_VAR 0 1
4893: PPUSH
4894: LD_VAR 0 4
4898: PPUSH
4899: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4903: LD_VAR 0 1
4907: PPUSH
4908: LD_VAR 0 2
4912: PPUSH
4913: CALL_OW 52
// end ;
4917: LD_VAR 0 3
4921: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
4926: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4927: LD_ADDR_VAR 0 7
4931: PUSH
4932: LD_VAR 0 1
4936: PUSH
4937: LD_VAR 0 2
4941: ARRAY
4942: PPUSH
4943: LD_VAR 0 3
4947: PPUSH
4948: LD_VAR 0 4
4952: PPUSH
4953: CALL_OW 1
4957: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4958: LD_ADDR_VAR 0 1
4962: PUSH
4963: LD_VAR 0 1
4967: PPUSH
4968: LD_VAR 0 2
4972: PPUSH
4973: LD_VAR 0 7
4977: PPUSH
4978: CALL_OW 1
4982: ST_TO_ADDR
// result := tab ;
4983: LD_ADDR_VAR 0 5
4987: PUSH
4988: LD_VAR 0 1
4992: ST_TO_ADDR
// end ;
4993: LD_VAR 0 5
4997: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4998: LD_INT 0
5000: PPUSH
5001: PPUSH
5002: PPUSH
// if not GetControl ( veh ) = control_manual then
5003: LD_VAR 0 1
5007: PPUSH
5008: CALL_OW 263
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: NOT
5017: IFFALSE 5029
// result := false else
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 0
5026: ST_TO_ADDR
5027: GO 5174
// if veh in FilterAllUnits ( [ f_empty ] ) then
5029: LD_VAR 0 1
5033: PUSH
5034: LD_INT 58
5036: PUSH
5037: EMPTY
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: IN
5045: IFFALSE 5057
// result := false else
5047: LD_ADDR_VAR 0 2
5051: PUSH
5052: LD_INT 0
5054: ST_TO_ADDR
5055: GO 5174
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5057: LD_ADDR_VAR 0 4
5061: PUSH
5062: LD_INT 22
5064: PUSH
5065: LD_VAR 0 1
5069: PPUSH
5070: CALL_OW 255
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 55
5081: PUSH
5082: EMPTY
5083: LIST
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: ST_TO_ADDR
// if not filter then
5094: LD_VAR 0 4
5098: NOT
5099: IFFALSE 5111
// result := false else
5101: LD_ADDR_VAR 0 2
5105: PUSH
5106: LD_INT 0
5108: ST_TO_ADDR
5109: GO 5174
// for i = 1 to filter do
5111: LD_ADDR_VAR 0 3
5115: PUSH
5116: DOUBLE
5117: LD_INT 1
5119: DEC
5120: ST_TO_ADDR
5121: LD_VAR 0 4
5125: PUSH
5126: FOR_TO
5127: IFFALSE 5172
// if IsDriver ( filter [ i ] ) = veh then
5129: LD_VAR 0 4
5133: PUSH
5134: LD_VAR 0 3
5138: ARRAY
5139: PPUSH
5140: CALL 65417 0 1
5144: PUSH
5145: LD_VAR 0 1
5149: EQUAL
5150: IFFALSE 5170
// begin result := filter [ i ] ;
5152: LD_ADDR_VAR 0 2
5156: PUSH
5157: LD_VAR 0 4
5161: PUSH
5162: LD_VAR 0 3
5166: ARRAY
5167: ST_TO_ADDR
// break ;
5168: GO 5172
// end ;
5170: GO 5126
5172: POP
5173: POP
// end ; end ; end_of_file
5174: LD_VAR 0 2
5178: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5179: LD_VAR 0 1
5183: PPUSH
5184: CALL 23163 0 1
// if un = legion_commander then
5188: LD_VAR 0 1
5192: PUSH
5193: LD_EXP 1
5197: EQUAL
5198: IFFALSE 5207
// YouLost ( commanderDied ) ;
5200: LD_STRING commanderDied
5202: PPUSH
5203: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5207: LD_VAR 0 1
5211: PUSH
5212: LD_EXP 1
5216: PUSH
5217: LD_INT 23
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: IN
5224: IFFALSE 5234
// game_over := true ;
5226: LD_ADDR_EXP 7
5230: PUSH
5231: LD_INT 1
5233: ST_TO_ADDR
// if un = al_commander then
5234: LD_VAR 0 1
5238: PUSH
5239: LD_EXP 5
5243: EQUAL
5244: IFFALSE 5250
// ChangeSide ( ) ;
5246: CALL 2738 0 0
// if GetSide ( un ) = 7 then
5250: LD_VAR 0 1
5254: PPUSH
5255: CALL_OW 255
5259: PUSH
5260: LD_INT 7
5262: EQUAL
5263: IFFALSE 5381
// begin if GetClass ( un ) = class_apeman then
5265: LD_VAR 0 1
5269: PPUSH
5270: CALL_OW 257
5274: PUSH
5275: LD_INT 12
5277: EQUAL
5278: IFFALSE 5294
// points := points + 6 ;
5280: LD_ADDR_EXP 10
5284: PUSH
5285: LD_EXP 10
5289: PUSH
5290: LD_INT 6
5292: PLUS
5293: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5294: LD_VAR 0 1
5298: PPUSH
5299: CALL_OW 257
5303: PUSH
5304: LD_INT 17
5306: EQUAL
5307: IFFALSE 5323
// points := points + 11 ;
5309: LD_ADDR_EXP 10
5313: PUSH
5314: LD_EXP 10
5318: PUSH
5319: LD_INT 11
5321: PLUS
5322: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5323: LD_VAR 0 1
5327: PPUSH
5328: CALL_OW 257
5332: PUSH
5333: LD_INT 15
5335: EQUAL
5336: IFFALSE 5352
// points := points + 14 ;
5338: LD_ADDR_EXP 10
5342: PUSH
5343: LD_EXP 10
5347: PUSH
5348: LD_INT 14
5350: PLUS
5351: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5352: LD_VAR 0 1
5356: PPUSH
5357: CALL_OW 247
5361: PUSH
5362: LD_INT 2
5364: EQUAL
5365: IFFALSE 5381
// points := points + 50 ;
5367: LD_ADDR_EXP 10
5371: PUSH
5372: LD_EXP 10
5376: PUSH
5377: LD_INT 50
5379: PLUS
5380: ST_TO_ADDR
// end ; end ;
5381: PPOPN 1
5383: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5384: LD_EXP 5
5388: PPUSH
5389: CALL_OW 256
5393: PUSH
5394: LD_INT 1000
5396: LESS
5397: IFFALSE 5429
5399: GO 5401
5401: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5402: LD_EXP 5
5406: PPUSH
5407: CALL_OW 504
5411: PPUSH
5412: CALL_OW 255
5416: PUSH
5417: LD_INT 8
5419: EQUAL
5420: IFFALSE 5429
// YouLost ( FriendlyFire ) ;
5422: LD_STRING FriendlyFire
5424: PPUSH
5425: CALL_OW 104
5429: END
// on DialogueSkipped ( value ) do var i ;
5430: LD_INT 0
5432: PPUSH
// begin RemoveUnit ( potter ) ;
5433: LD_EXP 4
5437: PPUSH
5438: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5442: LD_EXP 2
5446: PUSH
5447: LD_EXP 3
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PPUSH
5456: CALL_OW 122
// Wait ( 1 ) ;
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5467: LD_EXP 2
5471: PPUSH
5472: LD_INT 107
5474: PPUSH
5475: LD_INT 53
5477: PPUSH
5478: LD_INT 0
5480: PPUSH
5481: LD_INT 0
5483: PPUSH
5484: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5488: LD_EXP 3
5492: PPUSH
5493: LD_INT 108
5495: PPUSH
5496: LD_INT 53
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: LD_INT 0
5504: PPUSH
5505: CALL_OW 483
// Wait ( 1 ) ;
5509: LD_INT 1
5511: PPUSH
5512: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5516: LD_EXP 2
5520: PUSH
5521: LD_EXP 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PPUSH
5530: LD_INT 108
5532: PPUSH
5533: LD_INT 1
5535: PPUSH
5536: CALL_OW 118
// end ;
5540: PPOPN 2
5542: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
5547: PPUSH
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5553: LD_ADDR_VAR 0 10
5557: PUSH
5558: LD_INT 2
5560: PPUSH
5561: CALL_OW 469
5565: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5566: LD_ADDR_VAR 0 12
5570: PUSH
5571: LD_INT 22
5573: PUSH
5574: LD_OWVAR 2
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: LD_INT 2
5585: PUSH
5586: LD_INT 30
5588: PUSH
5589: LD_INT 8
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PUSH
5596: LD_INT 30
5598: PUSH
5599: LD_INT 11
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PPUSH
5615: CALL_OW 69
5619: PPUSH
5620: LD_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: LD_VAR 0 10
5633: PUSH
5634: LD_INT 2
5636: ARRAY
5637: PPUSH
5638: CALL_OW 73
5642: ST_TO_ADDR
// if icon = art_exp_left then
5643: LD_VAR 0 2
5647: PUSH
5648: LD_INT 1
5650: EQUAL
5651: IFFALSE 5706
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5653: LD_VAR 0 12
5657: PPUSH
5658: LD_EXP 9
5662: PPUSH
5663: LD_INT 1
5665: PPUSH
5666: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5670: LD_VAR 0 12
5674: PPUSH
5675: LD_EXP 17
5679: PPUSH
5680: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5684: LD_OWVAR 2
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: LD_INT 0
5694: PPUSH
5695: LD_VAR 0 12
5699: PPUSH
5700: CALL_OW 468
// end else
5704: GO 6487
// begin DialogueOn ;
5706: CALL_OW 6
// uc_side := 8 ;
5710: LD_ADDR_OWVAR 20
5714: PUSH
5715: LD_INT 8
5717: ST_TO_ADDR
// uc_nation := 2 ;
5718: LD_ADDR_OWVAR 21
5722: PUSH
5723: LD_INT 2
5725: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5726: LD_ADDR_VAR 0 5
5730: PUSH
5731: LD_STRING QBonus
5733: PUSH
5734: LD_EXP 14
5738: STR
5739: ST_TO_ADDR
// off := true ;
5740: LD_ADDR_VAR 0 6
5744: PUSH
5745: LD_INT 1
5747: ST_TO_ADDR
// units := [ ] ;
5748: LD_ADDR_VAR 0 7
5752: PUSH
5753: EMPTY
5754: ST_TO_ADDR
// crates := 0 ;
5755: LD_ADDR_VAR 0 8
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5763: LD_EXP 12
5767: PPUSH
5768: LD_STRING DVr-2
5770: PPUSH
5771: CALL_OW 94
// wait ( 0 0$1 ) ;
5775: LD_INT 35
5777: PPUSH
5778: CALL_OW 67
// case Query ( bonus ) of 1 :
5782: LD_VAR 0 5
5786: PPUSH
5787: CALL_OW 97
5791: PUSH
5792: LD_INT 1
5794: DOUBLE
5795: EQUAL
5796: IFTRUE 5800
5798: GO 5885
5800: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5801: LD_ADDR_VAR 0 9
5805: PUSH
5806: LD_INT 1
5808: PUSH
5809: LD_INT 2
5811: PUSH
5812: LD_INT 5
5814: PUSH
5815: LD_INT 8
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_EXP 14
5828: ARRAY
5829: ST_TO_ADDR
// for i = 1 to tmp do
5830: LD_ADDR_VAR 0 11
5834: PUSH
5835: DOUBLE
5836: LD_INT 1
5838: DEC
5839: ST_TO_ADDR
5840: LD_VAR 0 9
5844: PUSH
5845: FOR_TO
5846: IFFALSE 5881
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5848: LD_INT 0
5850: PPUSH
5851: LD_INT 15
5853: PPUSH
5854: LD_VAR 0 9
5858: PPUSH
5859: CALL_OW 380
// units := units ^ CreateHuman ;
5863: LD_ADDR_VAR 0 7
5867: PUSH
5868: LD_VAR 0 7
5872: PUSH
5873: CALL_OW 44
5877: ADD
5878: ST_TO_ADDR
// end ;
5879: GO 5845
5881: POP
5882: POP
// end ; 2 :
5883: GO 6293
5885: LD_INT 2
5887: DOUBLE
5888: EQUAL
5889: IFTRUE 5893
5891: GO 5925
5893: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5894: LD_ADDR_VAR 0 8
5898: PUSH
5899: LD_INT 100
5901: PUSH
5902: LD_INT 150
5904: PUSH
5905: LD_INT 350
5907: PUSH
5908: LD_INT 500
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_EXP 14
5921: ARRAY
5922: ST_TO_ADDR
// end ; 3 :
5923: GO 6293
5925: LD_INT 3
5927: DOUBLE
5928: EQUAL
5929: IFTRUE 5933
5931: GO 6273
5933: POP
// begin if bonus_num = 1 then
5934: LD_EXP 14
5938: PUSH
5939: LD_INT 1
5941: EQUAL
5942: IFFALSE 5952
// ignore_wave := true ;
5944: LD_ADDR_EXP 15
5948: PUSH
5949: LD_INT 1
5951: ST_TO_ADDR
// if bonus_num = 2 then
5952: LD_EXP 14
5956: PUSH
5957: LD_INT 2
5959: EQUAL
5960: IFFALSE 6080
// begin for i = 1 to 2 do
5962: LD_ADDR_VAR 0 11
5966: PUSH
5967: DOUBLE
5968: LD_INT 1
5970: DEC
5971: ST_TO_ADDR
5972: LD_INT 2
5974: PUSH
5975: FOR_TO
5976: IFFALSE 6078
// begin uc_nation := nation_arabian ;
5978: LD_ADDR_OWVAR 21
5982: PUSH
5983: LD_INT 2
5985: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5986: LD_ADDR_OWVAR 37
5990: PUSH
5991: LD_INT 14
5993: ST_TO_ADDR
// vc_engine := engine_siberite ;
5994: LD_ADDR_OWVAR 39
5998: PUSH
5999: LD_INT 3
6001: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6002: LD_ADDR_OWVAR 38
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: LD_INT 5
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 1
6019: PPUSH
6020: LD_INT 2
6022: PPUSH
6023: CALL_OW 12
6027: ARRAY
6028: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6029: LD_ADDR_OWVAR 40
6033: PUSH
6034: LD_INT 28
6036: PUSH
6037: LD_INT 27
6039: PUSH
6040: LD_INT 25
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 1
6050: PPUSH
6051: LD_INT 3
6053: PPUSH
6054: CALL_OW 12
6058: ARRAY
6059: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6060: LD_ADDR_VAR 0 7
6064: PUSH
6065: LD_VAR 0 7
6069: PUSH
6070: CALL_OW 45
6074: ADD
6075: ST_TO_ADDR
// end ;
6076: GO 5975
6078: POP
6079: POP
// end ; if bonus_num = 3 then
6080: LD_EXP 14
6084: PUSH
6085: LD_INT 3
6087: EQUAL
6088: IFFALSE 6212
// begin for i = 1 to 4 do
6090: LD_ADDR_VAR 0 11
6094: PUSH
6095: DOUBLE
6096: LD_INT 1
6098: DEC
6099: ST_TO_ADDR
6100: LD_INT 4
6102: PUSH
6103: FOR_TO
6104: IFFALSE 6210
// begin uc_nation := nation_arabian ;
6106: LD_ADDR_OWVAR 21
6110: PUSH
6111: LD_INT 2
6113: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6114: LD_ADDR_OWVAR 37
6118: PUSH
6119: LD_INT 14
6121: ST_TO_ADDR
// vc_engine := engine_siberite ;
6122: LD_ADDR_OWVAR 39
6126: PUSH
6127: LD_INT 3
6129: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6130: LD_ADDR_OWVAR 38
6134: PUSH
6135: LD_INT 2
6137: PUSH
6138: LD_INT 5
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 1
6147: PPUSH
6148: LD_INT 2
6150: PPUSH
6151: CALL_OW 12
6155: ARRAY
6156: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6157: LD_ADDR_OWVAR 40
6161: PUSH
6162: LD_INT 28
6164: PUSH
6165: LD_INT 27
6167: PUSH
6168: LD_INT 28
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 1
6182: PPUSH
6183: LD_INT 4
6185: PPUSH
6186: CALL_OW 12
6190: ARRAY
6191: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6192: LD_ADDR_VAR 0 7
6196: PUSH
6197: LD_VAR 0 7
6201: PUSH
6202: CALL_OW 45
6206: ADD
6207: ST_TO_ADDR
// end ;
6208: GO 6103
6210: POP
6211: POP
// end ; if bonus_num = 4 then
6212: LD_EXP 14
6216: PUSH
6217: LD_INT 4
6219: EQUAL
6220: IFFALSE 6271
// for i = 1 to 3 do
6222: LD_ADDR_VAR 0 11
6226: PUSH
6227: DOUBLE
6228: LD_INT 1
6230: DEC
6231: ST_TO_ADDR
6232: LD_INT 3
6234: PUSH
6235: FOR_TO
6236: IFFALSE 6269
// begin PrepareHuman ( false , 3 , 8 ) ;
6238: LD_INT 0
6240: PPUSH
6241: LD_INT 3
6243: PPUSH
6244: LD_INT 8
6246: PPUSH
6247: CALL_OW 380
// units := units ^ CreateHuman ;
6251: LD_ADDR_VAR 0 7
6255: PUSH
6256: LD_VAR 0 7
6260: PUSH
6261: CALL_OW 44
6265: ADD
6266: ST_TO_ADDR
// end ;
6267: GO 6235
6269: POP
6270: POP
// end ; 4 :
6271: GO 6293
6273: LD_INT 4
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6292
6281: POP
// off := false ; end ;
6282: LD_ADDR_VAR 0 6
6286: PUSH
6287: LD_INT 0
6289: ST_TO_ADDR
6290: GO 6293
6292: POP
// DialogueOff ;
6293: CALL_OW 7
// if not off then
6297: LD_VAR 0 6
6301: NOT
6302: IFFALSE 6308
// exit else
6304: GO 6487
6306: GO 6361
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6308: LD_OWVAR 2
6312: PPUSH
6313: LD_INT 12
6315: PPUSH
6316: LD_INT 0
6318: PPUSH
6319: LD_INT 23
6321: PPUSH
6322: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6326: LD_EXP 12
6330: PPUSH
6331: LD_STRING DVr-3
6333: PUSH
6334: LD_STRING DVr-3a
6336: PUSH
6337: LD_STRING DVr-3b
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 1
6347: PPUSH
6348: LD_INT 3
6350: PPUSH
6351: CALL_OW 12
6355: ARRAY
6356: PPUSH
6357: CALL_OW 94
// end ; if units then
6361: LD_VAR 0 7
6365: IFFALSE 6429
// for i in units do
6367: LD_ADDR_VAR 0 11
6371: PUSH
6372: LD_VAR 0 7
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6427
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6380: LD_VAR 0 11
6384: PPUSH
6385: LD_INT 92
6387: PPUSH
6388: LD_INT 49
6390: PPUSH
6391: LD_INT 20
6393: PPUSH
6394: LD_INT 0
6396: PPUSH
6397: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6401: LD_VAR 0 11
6405: PPUSH
6406: CALL_OW 250
6410: PPUSH
6411: LD_VAR 0 11
6415: PPUSH
6416: CALL_OW 251
6420: PPUSH
6421: CALL_OW 494
// end ;
6425: GO 6377
6427: POP
6428: POP
// if crates then
6429: LD_VAR 0 8
6433: IFFALSE 6487
// for i = 1 to ( crates div 50 ) do
6435: LD_ADDR_VAR 0 11
6439: PUSH
6440: DOUBLE
6441: LD_INT 1
6443: DEC
6444: ST_TO_ADDR
6445: LD_VAR 0 8
6449: PUSH
6450: LD_INT 50
6452: DIV
6453: PUSH
6454: FOR_TO
6455: IFFALSE 6485
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6457: LD_INT 5
6459: PPUSH
6460: LD_INT 92
6462: PPUSH
6463: LD_INT 49
6465: PPUSH
6466: LD_INT 30
6468: PPUSH
6469: LD_INT 1
6471: PPUSH
6472: CALL_OW 56
// wait ( 0 0$02 ) ;
6476: LD_INT 70
6478: PPUSH
6479: CALL_OW 67
// end ;
6483: GO 6454
6485: POP
6486: POP
// end ; end ;
6487: PPOPN 12
6489: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: LD_VAR 0 2
6499: PPUSH
6500: LD_VAR 0 3
6504: PPUSH
6505: CALL 23197 0 3
// end ;
6509: PPOPN 3
6511: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL 23205 0 1
// end ;
6521: PPOPN 1
6523: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6524: LD_VAR 0 1
6528: PPUSH
6529: CALL_OW 255
6533: PUSH
6534: LD_OWVAR 2
6538: EQUAL
6539: IFFALSE 6549
// player_res_art := true ;
6541: LD_ADDR_EXP 8
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// end ;
6549: PPOPN 1
6551: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6552: LD_INT 22
6554: PUSH
6555: LD_OWVAR 2
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: LD_INT 2
6566: PUSH
6567: LD_INT 30
6569: PUSH
6570: LD_INT 7
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 30
6579: PUSH
6580: LD_INT 8
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 30
6589: PUSH
6590: LD_INT 11
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: IFFALSE 6844
6613: GO 6615
6615: DISABLE
6616: LD_INT 0
6618: PPUSH
6619: PPUSH
// begin enable ;
6620: ENABLE
// xy := FindArtifact ( 2 ) ;
6621: LD_ADDR_VAR 0 1
6625: PUSH
6626: LD_INT 2
6628: PPUSH
6629: CALL_OW 469
6633: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6634: LD_ADDR_VAR 0 2
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_OWVAR 2
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 2
6653: PUSH
6654: LD_INT 30
6656: PUSH
6657: LD_INT 8
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 30
6666: PUSH
6667: LD_INT 7
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 30
6676: PUSH
6677: LD_INT 11
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PPUSH
6694: CALL_OW 69
6698: PPUSH
6699: LD_VAR 0 1
6703: PUSH
6704: LD_INT 1
6706: ARRAY
6707: PPUSH
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 2
6715: ARRAY
6716: PPUSH
6717: CALL_OW 73
6721: ST_TO_ADDR
// if player_artifact_ready = false then
6722: LD_EXP 16
6726: PUSH
6727: LD_INT 0
6729: EQUAL
6730: IFFALSE 6844
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6732: LD_VAR 0 2
6736: PPUSH
6737: LD_VAR 0 1
6741: PUSH
6742: LD_INT 1
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 1
6750: PUSH
6751: LD_INT 2
6753: ARRAY
6754: PPUSH
6755: CALL_OW 297
6759: PUSH
6760: LD_INT 6
6762: LESS
6763: IFFALSE 6824
// begin if BuildingStatus ( lab ) = bs_idle then
6765: LD_VAR 0 2
6769: PPUSH
6770: CALL_OW 461
6774: PUSH
6775: LD_INT 2
6777: EQUAL
6778: IFFALSE 6802
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6780: LD_OWVAR 2
6784: PPUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_INT 2
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 468
6800: GO 6822
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6802: LD_OWVAR 2
6806: PPUSH
6807: LD_INT 1
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 2
6817: PPUSH
6818: CALL_OW 468
// end else
6822: GO 6844
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6824: LD_OWVAR 2
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: LD_VAR 0 2
6839: PPUSH
6840: CALL_OW 468
// end ;
6844: PPOPN 2
6846: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6847: LD_VAR 0 1
6851: PPUSH
6852: CALL_OW 255
6856: PUSH
6857: LD_OWVAR 2
6861: EQUAL
6862: IFFALSE 6888
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6864: LD_OWVAR 2
6868: PPUSH
6869: LD_INT 1
6871: PPUSH
6872: LD_INT 0
6874: PPUSH
6875: LD_VAR 0 1
6879: PPUSH
6880: CALL_OW 468
// Win ;
6884: CALL 4781 0 0
// end ; end ;
6888: PPOPN 1
6890: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6891: LD_ADDR_EXP 17
6895: PUSH
6896: LD_VAR 0 2
6900: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6901: LD_OWVAR 2
6905: PPUSH
6906: LD_INT 1
6908: PPUSH
6909: LD_INT 2
6911: PPUSH
6912: LD_VAR 0 1
6916: PPUSH
6917: CALL_OW 468
// end ;
6921: PPOPN 2
6923: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6924: LD_VAR 0 1
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: CALL 23221 0 2
// end ; end_of_file
6938: PPOPN 2
6940: END
// every 0 0$01 trigger not game_over do
6941: LD_EXP 7
6945: NOT
6946: IFFALSE 6979
6948: GO 6950
6950: DISABLE
// begin enable ;
6951: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6952: LD_ADDR_OWVAR 47
6956: PUSH
6957: LD_STRING #tick
6959: PUSH
6960: LD_OWVAR 1
6964: PUSH
6965: LD_STRING #points
6967: PUSH
6968: LD_EXP 10
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: ST_TO_ADDR
// end ;
6979: END
// every 0 0$01 trigger game_over do
6980: LD_EXP 7
6984: IFFALSE 7043
6986: GO 6988
6988: DISABLE
// begin Wait ( 0 0$02 ) ;
6989: LD_INT 70
6991: PPUSH
6992: CALL_OW 67
// DialogueOn ;
6996: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
7000: LD_ADDR_OWVAR 47
7004: PUSH
7005: LD_STRING #game-points
7007: PUSH
7008: LD_OWVAR 78
7012: PUSH
7013: LD_EXP 10
7017: PUSH
7018: LD_STRING #game-time
7020: PUSH
7021: LD_OWVAR 1
7025: PUSH
7026: LD_STRING #game-difficulty
7028: PUSH
7029: LD_OWVAR 67
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: ST_TO_ADDR
// end ; end_of_file
7043: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7044: LD_OWVAR 1
7048: PUSH
7049: LD_INT 52500
7051: LESS
7052: IFFALSE 7076
7054: GO 7056
7056: DISABLE
// begin enable ;
7057: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7058: LD_INT 1
7060: PPUSH
7061: LD_INT 5
7063: PPUSH
7064: CALL_OW 12
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: CALL_OW 57
// end ; end_of_file end_of_file
7076: END
// export globalGameSaveCounter ; every 0 0$1 do
7077: GO 7079
7079: DISABLE
// begin enable ;
7080: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7081: LD_STRING updateTimer(
7083: PUSH
7084: LD_OWVAR 1
7088: STR
7089: PUSH
7090: LD_STRING );
7092: STR
7093: PPUSH
7094: CALL_OW 559
// end ;
7098: END
// every 0 0$1 do
7099: GO 7101
7101: DISABLE
// begin globalGameSaveCounter := 0 ;
7102: LD_ADDR_EXP 18
7106: PUSH
7107: LD_INT 0
7109: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7110: LD_STRING setGameSaveCounter(0)
7112: PPUSH
7113: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7117: LD_STRING initStreamRollete();
7119: PPUSH
7120: CALL_OW 559
// InitStreamMode ;
7124: CALL 8476 0 0
// DefineStreamItems ( false ) ;
7128: LD_INT 0
7130: PPUSH
7131: CALL 8940 0 1
// end ;
7135: END
// export function SOS_MapStart ( ) ; begin
7136: LD_INT 0
7138: PPUSH
// if streamModeActive then
7139: LD_EXP 19
7143: IFFALSE 7152
// DefineStreamItems ( true ) ;
7145: LD_INT 1
7147: PPUSH
7148: CALL 8940 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
7152: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
7154: PPUSH
7155: CALL_OW 559
// UpdateLuaVariables ( ) ;
7159: CALL 7176 0 0
// UpdateFactoryWaypoints ( ) ;
7163: CALL 22062 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7167: CALL 22314 0 0
// end ;
7171: LD_VAR 0 1
7175: RET
// function UpdateLuaVariables ( ) ; begin
7176: LD_INT 0
7178: PPUSH
// if globalGameSaveCounter then
7179: LD_EXP 18
7183: IFFALSE 7217
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7185: LD_ADDR_EXP 18
7189: PUSH
7190: LD_EXP 18
7194: PPUSH
7195: CALL 69210 0 1
7199: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7200: LD_STRING setGameSaveCounter(
7202: PUSH
7203: LD_EXP 18
7207: STR
7208: PUSH
7209: LD_STRING )
7211: STR
7212: PPUSH
7213: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7217: LD_STRING setGameDifficulty(
7219: PUSH
7220: LD_OWVAR 67
7224: STR
7225: PUSH
7226: LD_STRING )
7228: STR
7229: PPUSH
7230: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7234: LD_STRING displayDifficulty(
7236: PUSH
7237: LD_OWVAR 67
7241: STR
7242: PUSH
7243: LD_STRING )
7245: STR
7246: PPUSH
7247: CALL_OW 559
// end ;
7251: LD_VAR 0 1
7255: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7256: LD_INT 0
7258: PPUSH
// if p2 = stream_mode then
7259: LD_VAR 0 2
7263: PUSH
7264: LD_INT 100
7266: EQUAL
7267: IFFALSE 8270
// begin if not StreamModeActive then
7269: LD_EXP 19
7273: NOT
7274: IFFALSE 7284
// StreamModeActive := true ;
7276: LD_ADDR_EXP 19
7280: PUSH
7281: LD_INT 1
7283: ST_TO_ADDR
// if p3 = 0 then
7284: LD_VAR 0 3
7288: PUSH
7289: LD_INT 0
7291: EQUAL
7292: IFFALSE 7298
// InitStreamMode ;
7294: CALL 8476 0 0
// if p3 = 1 then
7298: LD_VAR 0 3
7302: PUSH
7303: LD_INT 1
7305: EQUAL
7306: IFFALSE 7316
// sRocket := true ;
7308: LD_ADDR_EXP 24
7312: PUSH
7313: LD_INT 1
7315: ST_TO_ADDR
// if p3 = 2 then
7316: LD_VAR 0 3
7320: PUSH
7321: LD_INT 2
7323: EQUAL
7324: IFFALSE 7334
// sSpeed := true ;
7326: LD_ADDR_EXP 23
7330: PUSH
7331: LD_INT 1
7333: ST_TO_ADDR
// if p3 = 3 then
7334: LD_VAR 0 3
7338: PUSH
7339: LD_INT 3
7341: EQUAL
7342: IFFALSE 7352
// sEngine := true ;
7344: LD_ADDR_EXP 25
7348: PUSH
7349: LD_INT 1
7351: ST_TO_ADDR
// if p3 = 4 then
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 4
7359: EQUAL
7360: IFFALSE 7370
// sSpec := true ;
7362: LD_ADDR_EXP 22
7366: PUSH
7367: LD_INT 1
7369: ST_TO_ADDR
// if p3 = 5 then
7370: LD_VAR 0 3
7374: PUSH
7375: LD_INT 5
7377: EQUAL
7378: IFFALSE 7388
// sLevel := true ;
7380: LD_ADDR_EXP 26
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// if p3 = 6 then
7388: LD_VAR 0 3
7392: PUSH
7393: LD_INT 6
7395: EQUAL
7396: IFFALSE 7406
// sArmoury := true ;
7398: LD_ADDR_EXP 27
7402: PUSH
7403: LD_INT 1
7405: ST_TO_ADDR
// if p3 = 7 then
7406: LD_VAR 0 3
7410: PUSH
7411: LD_INT 7
7413: EQUAL
7414: IFFALSE 7424
// sRadar := true ;
7416: LD_ADDR_EXP 28
7420: PUSH
7421: LD_INT 1
7423: ST_TO_ADDR
// if p3 = 8 then
7424: LD_VAR 0 3
7428: PUSH
7429: LD_INT 8
7431: EQUAL
7432: IFFALSE 7442
// sBunker := true ;
7434: LD_ADDR_EXP 29
7438: PUSH
7439: LD_INT 1
7441: ST_TO_ADDR
// if p3 = 9 then
7442: LD_VAR 0 3
7446: PUSH
7447: LD_INT 9
7449: EQUAL
7450: IFFALSE 7460
// sHack := true ;
7452: LD_ADDR_EXP 30
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// if p3 = 10 then
7460: LD_VAR 0 3
7464: PUSH
7465: LD_INT 10
7467: EQUAL
7468: IFFALSE 7478
// sFire := true ;
7470: LD_ADDR_EXP 31
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// if p3 = 11 then
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 11
7485: EQUAL
7486: IFFALSE 7496
// sRefresh := true ;
7488: LD_ADDR_EXP 32
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// if p3 = 12 then
7496: LD_VAR 0 3
7500: PUSH
7501: LD_INT 12
7503: EQUAL
7504: IFFALSE 7514
// sExp := true ;
7506: LD_ADDR_EXP 33
7510: PUSH
7511: LD_INT 1
7513: ST_TO_ADDR
// if p3 = 13 then
7514: LD_VAR 0 3
7518: PUSH
7519: LD_INT 13
7521: EQUAL
7522: IFFALSE 7532
// sDepot := true ;
7524: LD_ADDR_EXP 34
7528: PUSH
7529: LD_INT 1
7531: ST_TO_ADDR
// if p3 = 14 then
7532: LD_VAR 0 3
7536: PUSH
7537: LD_INT 14
7539: EQUAL
7540: IFFALSE 7550
// sFlag := true ;
7542: LD_ADDR_EXP 35
7546: PUSH
7547: LD_INT 1
7549: ST_TO_ADDR
// if p3 = 15 then
7550: LD_VAR 0 3
7554: PUSH
7555: LD_INT 15
7557: EQUAL
7558: IFFALSE 7568
// sKamikadze := true ;
7560: LD_ADDR_EXP 43
7564: PUSH
7565: LD_INT 1
7567: ST_TO_ADDR
// if p3 = 16 then
7568: LD_VAR 0 3
7572: PUSH
7573: LD_INT 16
7575: EQUAL
7576: IFFALSE 7586
// sTroll := true ;
7578: LD_ADDR_EXP 44
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// if p3 = 17 then
7586: LD_VAR 0 3
7590: PUSH
7591: LD_INT 17
7593: EQUAL
7594: IFFALSE 7604
// sSlow := true ;
7596: LD_ADDR_EXP 45
7600: PUSH
7601: LD_INT 1
7603: ST_TO_ADDR
// if p3 = 18 then
7604: LD_VAR 0 3
7608: PUSH
7609: LD_INT 18
7611: EQUAL
7612: IFFALSE 7622
// sLack := true ;
7614: LD_ADDR_EXP 46
7618: PUSH
7619: LD_INT 1
7621: ST_TO_ADDR
// if p3 = 19 then
7622: LD_VAR 0 3
7626: PUSH
7627: LD_INT 19
7629: EQUAL
7630: IFFALSE 7640
// sTank := true ;
7632: LD_ADDR_EXP 48
7636: PUSH
7637: LD_INT 1
7639: ST_TO_ADDR
// if p3 = 20 then
7640: LD_VAR 0 3
7644: PUSH
7645: LD_INT 20
7647: EQUAL
7648: IFFALSE 7658
// sRemote := true ;
7650: LD_ADDR_EXP 49
7654: PUSH
7655: LD_INT 1
7657: ST_TO_ADDR
// if p3 = 21 then
7658: LD_VAR 0 3
7662: PUSH
7663: LD_INT 21
7665: EQUAL
7666: IFFALSE 7676
// sPowell := true ;
7668: LD_ADDR_EXP 50
7672: PUSH
7673: LD_INT 1
7675: ST_TO_ADDR
// if p3 = 22 then
7676: LD_VAR 0 3
7680: PUSH
7681: LD_INT 22
7683: EQUAL
7684: IFFALSE 7694
// sTeleport := true ;
7686: LD_ADDR_EXP 53
7690: PUSH
7691: LD_INT 1
7693: ST_TO_ADDR
// if p3 = 23 then
7694: LD_VAR 0 3
7698: PUSH
7699: LD_INT 23
7701: EQUAL
7702: IFFALSE 7712
// sOilTower := true ;
7704: LD_ADDR_EXP 55
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// if p3 = 24 then
7712: LD_VAR 0 3
7716: PUSH
7717: LD_INT 24
7719: EQUAL
7720: IFFALSE 7730
// sShovel := true ;
7722: LD_ADDR_EXP 56
7726: PUSH
7727: LD_INT 1
7729: ST_TO_ADDR
// if p3 = 25 then
7730: LD_VAR 0 3
7734: PUSH
7735: LD_INT 25
7737: EQUAL
7738: IFFALSE 7748
// sSheik := true ;
7740: LD_ADDR_EXP 57
7744: PUSH
7745: LD_INT 1
7747: ST_TO_ADDR
// if p3 = 26 then
7748: LD_VAR 0 3
7752: PUSH
7753: LD_INT 26
7755: EQUAL
7756: IFFALSE 7766
// sEarthquake := true ;
7758: LD_ADDR_EXP 59
7762: PUSH
7763: LD_INT 1
7765: ST_TO_ADDR
// if p3 = 27 then
7766: LD_VAR 0 3
7770: PUSH
7771: LD_INT 27
7773: EQUAL
7774: IFFALSE 7784
// sAI := true ;
7776: LD_ADDR_EXP 60
7780: PUSH
7781: LD_INT 1
7783: ST_TO_ADDR
// if p3 = 28 then
7784: LD_VAR 0 3
7788: PUSH
7789: LD_INT 28
7791: EQUAL
7792: IFFALSE 7802
// sCargo := true ;
7794: LD_ADDR_EXP 63
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
// if p3 = 29 then
7802: LD_VAR 0 3
7806: PUSH
7807: LD_INT 29
7809: EQUAL
7810: IFFALSE 7820
// sDLaser := true ;
7812: LD_ADDR_EXP 64
7816: PUSH
7817: LD_INT 1
7819: ST_TO_ADDR
// if p3 = 30 then
7820: LD_VAR 0 3
7824: PUSH
7825: LD_INT 30
7827: EQUAL
7828: IFFALSE 7838
// sExchange := true ;
7830: LD_ADDR_EXP 65
7834: PUSH
7835: LD_INT 1
7837: ST_TO_ADDR
// if p3 = 31 then
7838: LD_VAR 0 3
7842: PUSH
7843: LD_INT 31
7845: EQUAL
7846: IFFALSE 7856
// sFac := true ;
7848: LD_ADDR_EXP 66
7852: PUSH
7853: LD_INT 1
7855: ST_TO_ADDR
// if p3 = 32 then
7856: LD_VAR 0 3
7860: PUSH
7861: LD_INT 32
7863: EQUAL
7864: IFFALSE 7874
// sPower := true ;
7866: LD_ADDR_EXP 67
7870: PUSH
7871: LD_INT 1
7873: ST_TO_ADDR
// if p3 = 33 then
7874: LD_VAR 0 3
7878: PUSH
7879: LD_INT 33
7881: EQUAL
7882: IFFALSE 7892
// sRandom := true ;
7884: LD_ADDR_EXP 68
7888: PUSH
7889: LD_INT 1
7891: ST_TO_ADDR
// if p3 = 34 then
7892: LD_VAR 0 3
7896: PUSH
7897: LD_INT 34
7899: EQUAL
7900: IFFALSE 7910
// sShield := true ;
7902: LD_ADDR_EXP 69
7906: PUSH
7907: LD_INT 1
7909: ST_TO_ADDR
// if p3 = 35 then
7910: LD_VAR 0 3
7914: PUSH
7915: LD_INT 35
7917: EQUAL
7918: IFFALSE 7928
// sTime := true ;
7920: LD_ADDR_EXP 70
7924: PUSH
7925: LD_INT 1
7927: ST_TO_ADDR
// if p3 = 36 then
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 36
7935: EQUAL
7936: IFFALSE 7946
// sTools := true ;
7938: LD_ADDR_EXP 71
7942: PUSH
7943: LD_INT 1
7945: ST_TO_ADDR
// if p3 = 101 then
7946: LD_VAR 0 3
7950: PUSH
7951: LD_INT 101
7953: EQUAL
7954: IFFALSE 7964
// sSold := true ;
7956: LD_ADDR_EXP 36
7960: PUSH
7961: LD_INT 1
7963: ST_TO_ADDR
// if p3 = 102 then
7964: LD_VAR 0 3
7968: PUSH
7969: LD_INT 102
7971: EQUAL
7972: IFFALSE 7982
// sDiff := true ;
7974: LD_ADDR_EXP 37
7978: PUSH
7979: LD_INT 1
7981: ST_TO_ADDR
// if p3 = 103 then
7982: LD_VAR 0 3
7986: PUSH
7987: LD_INT 103
7989: EQUAL
7990: IFFALSE 8000
// sFog := true ;
7992: LD_ADDR_EXP 40
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// if p3 = 104 then
8000: LD_VAR 0 3
8004: PUSH
8005: LD_INT 104
8007: EQUAL
8008: IFFALSE 8018
// sReset := true ;
8010: LD_ADDR_EXP 41
8014: PUSH
8015: LD_INT 1
8017: ST_TO_ADDR
// if p3 = 105 then
8018: LD_VAR 0 3
8022: PUSH
8023: LD_INT 105
8025: EQUAL
8026: IFFALSE 8036
// sSun := true ;
8028: LD_ADDR_EXP 42
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// if p3 = 106 then
8036: LD_VAR 0 3
8040: PUSH
8041: LD_INT 106
8043: EQUAL
8044: IFFALSE 8054
// sTiger := true ;
8046: LD_ADDR_EXP 38
8050: PUSH
8051: LD_INT 1
8053: ST_TO_ADDR
// if p3 = 107 then
8054: LD_VAR 0 3
8058: PUSH
8059: LD_INT 107
8061: EQUAL
8062: IFFALSE 8072
// sBomb := true ;
8064: LD_ADDR_EXP 39
8068: PUSH
8069: LD_INT 1
8071: ST_TO_ADDR
// if p3 = 108 then
8072: LD_VAR 0 3
8076: PUSH
8077: LD_INT 108
8079: EQUAL
8080: IFFALSE 8090
// sWound := true ;
8082: LD_ADDR_EXP 47
8086: PUSH
8087: LD_INT 1
8089: ST_TO_ADDR
// if p3 = 109 then
8090: LD_VAR 0 3
8094: PUSH
8095: LD_INT 109
8097: EQUAL
8098: IFFALSE 8108
// sBetray := true ;
8100: LD_ADDR_EXP 51
8104: PUSH
8105: LD_INT 1
8107: ST_TO_ADDR
// if p3 = 110 then
8108: LD_VAR 0 3
8112: PUSH
8113: LD_INT 110
8115: EQUAL
8116: IFFALSE 8126
// sContamin := true ;
8118: LD_ADDR_EXP 52
8122: PUSH
8123: LD_INT 1
8125: ST_TO_ADDR
// if p3 = 111 then
8126: LD_VAR 0 3
8130: PUSH
8131: LD_INT 111
8133: EQUAL
8134: IFFALSE 8144
// sOil := true ;
8136: LD_ADDR_EXP 54
8140: PUSH
8141: LD_INT 1
8143: ST_TO_ADDR
// if p3 = 112 then
8144: LD_VAR 0 3
8148: PUSH
8149: LD_INT 112
8151: EQUAL
8152: IFFALSE 8162
// sStu := true ;
8154: LD_ADDR_EXP 58
8158: PUSH
8159: LD_INT 1
8161: ST_TO_ADDR
// if p3 = 113 then
8162: LD_VAR 0 3
8166: PUSH
8167: LD_INT 113
8169: EQUAL
8170: IFFALSE 8180
// sBazooka := true ;
8172: LD_ADDR_EXP 61
8176: PUSH
8177: LD_INT 1
8179: ST_TO_ADDR
// if p3 = 114 then
8180: LD_VAR 0 3
8184: PUSH
8185: LD_INT 114
8187: EQUAL
8188: IFFALSE 8198
// sMortar := true ;
8190: LD_ADDR_EXP 62
8194: PUSH
8195: LD_INT 1
8197: ST_TO_ADDR
// if p3 = 115 then
8198: LD_VAR 0 3
8202: PUSH
8203: LD_INT 115
8205: EQUAL
8206: IFFALSE 8216
// sRanger := true ;
8208: LD_ADDR_EXP 72
8212: PUSH
8213: LD_INT 1
8215: ST_TO_ADDR
// if p3 = 116 then
8216: LD_VAR 0 3
8220: PUSH
8221: LD_INT 116
8223: EQUAL
8224: IFFALSE 8234
// sComputer := true ;
8226: LD_ADDR_EXP 73
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// if p3 = 117 then
8234: LD_VAR 0 3
8238: PUSH
8239: LD_INT 117
8241: EQUAL
8242: IFFALSE 8252
// s30 := true ;
8244: LD_ADDR_EXP 74
8248: PUSH
8249: LD_INT 1
8251: ST_TO_ADDR
// if p3 = 118 then
8252: LD_VAR 0 3
8256: PUSH
8257: LD_INT 118
8259: EQUAL
8260: IFFALSE 8270
// s60 := true ;
8262: LD_ADDR_EXP 75
8266: PUSH
8267: LD_INT 1
8269: ST_TO_ADDR
// end ; if p2 = hack_mode then
8270: LD_VAR 0 2
8274: PUSH
8275: LD_INT 101
8277: EQUAL
8278: IFFALSE 8406
// begin case p3 of 1 :
8280: LD_VAR 0 3
8284: PUSH
8285: LD_INT 1
8287: DOUBLE
8288: EQUAL
8289: IFTRUE 8293
8291: GO 8300
8293: POP
// hHackUnlimitedResources ; 2 :
8294: CALL 20669 0 0
8298: GO 8406
8300: LD_INT 2
8302: DOUBLE
8303: EQUAL
8304: IFTRUE 8308
8306: GO 8315
8308: POP
// hHackSetLevel10 ; 3 :
8309: CALL 20802 0 0
8313: GO 8406
8315: LD_INT 3
8317: DOUBLE
8318: EQUAL
8319: IFTRUE 8323
8321: GO 8330
8323: POP
// hHackSetLevel10YourUnits ; 4 :
8324: CALL 20887 0 0
8328: GO 8406
8330: LD_INT 4
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8338
8336: GO 8345
8338: POP
// hHackInvincible ; 5 :
8339: CALL 21335 0 0
8343: GO 8406
8345: LD_INT 5
8347: DOUBLE
8348: EQUAL
8349: IFTRUE 8353
8351: GO 8360
8353: POP
// hHackInvisible ; 6 :
8354: CALL 21446 0 0
8358: GO 8406
8360: LD_INT 6
8362: DOUBLE
8363: EQUAL
8364: IFTRUE 8368
8366: GO 8375
8368: POP
// hHackChangeYourSide ; 7 :
8369: CALL 21503 0 0
8373: GO 8406
8375: LD_INT 7
8377: DOUBLE
8378: EQUAL
8379: IFTRUE 8383
8381: GO 8390
8383: POP
// hHackChangeUnitSide ; 8 :
8384: CALL 21545 0 0
8388: GO 8406
8390: LD_INT 8
8392: DOUBLE
8393: EQUAL
8394: IFTRUE 8398
8396: GO 8405
8398: POP
// hHackFog ; end ;
8399: CALL 21646 0 0
8403: GO 8406
8405: POP
// end ; if p2 = game_save_mode then
8406: LD_VAR 0 2
8410: PUSH
8411: LD_INT 102
8413: EQUAL
8414: IFFALSE 8471
// begin if p3 = 1 then
8416: LD_VAR 0 3
8420: PUSH
8421: LD_INT 1
8423: EQUAL
8424: IFFALSE 8436
// globalGameSaveCounter := p4 ;
8426: LD_ADDR_EXP 18
8430: PUSH
8431: LD_VAR 0 4
8435: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8436: LD_VAR 0 3
8440: PUSH
8441: LD_INT 2
8443: EQUAL
8444: IFFALSE 8452
8446: PUSH
8447: LD_EXP 18
8451: AND
8452: IFFALSE 8471
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8454: LD_STRING setGameSaveCounter(
8456: PUSH
8457: LD_EXP 18
8461: STR
8462: PUSH
8463: LD_STRING )
8465: STR
8466: PPUSH
8467: CALL_OW 559
// end ; end ;
8471: LD_VAR 0 7
8475: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8476: LD_INT 0
8478: PPUSH
// streamModeActive := false ;
8479: LD_ADDR_EXP 19
8483: PUSH
8484: LD_INT 0
8486: ST_TO_ADDR
// normalCounter := 36 ;
8487: LD_ADDR_EXP 20
8491: PUSH
8492: LD_INT 36
8494: ST_TO_ADDR
// hardcoreCounter := 18 ;
8495: LD_ADDR_EXP 21
8499: PUSH
8500: LD_INT 18
8502: ST_TO_ADDR
// sRocket := false ;
8503: LD_ADDR_EXP 24
8507: PUSH
8508: LD_INT 0
8510: ST_TO_ADDR
// sSpeed := false ;
8511: LD_ADDR_EXP 23
8515: PUSH
8516: LD_INT 0
8518: ST_TO_ADDR
// sEngine := false ;
8519: LD_ADDR_EXP 25
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// sSpec := false ;
8527: LD_ADDR_EXP 22
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// sLevel := false ;
8535: LD_ADDR_EXP 26
8539: PUSH
8540: LD_INT 0
8542: ST_TO_ADDR
// sArmoury := false ;
8543: LD_ADDR_EXP 27
8547: PUSH
8548: LD_INT 0
8550: ST_TO_ADDR
// sRadar := false ;
8551: LD_ADDR_EXP 28
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// sBunker := false ;
8559: LD_ADDR_EXP 29
8563: PUSH
8564: LD_INT 0
8566: ST_TO_ADDR
// sHack := false ;
8567: LD_ADDR_EXP 30
8571: PUSH
8572: LD_INT 0
8574: ST_TO_ADDR
// sFire := false ;
8575: LD_ADDR_EXP 31
8579: PUSH
8580: LD_INT 0
8582: ST_TO_ADDR
// sRefresh := false ;
8583: LD_ADDR_EXP 32
8587: PUSH
8588: LD_INT 0
8590: ST_TO_ADDR
// sExp := false ;
8591: LD_ADDR_EXP 33
8595: PUSH
8596: LD_INT 0
8598: ST_TO_ADDR
// sDepot := false ;
8599: LD_ADDR_EXP 34
8603: PUSH
8604: LD_INT 0
8606: ST_TO_ADDR
// sFlag := false ;
8607: LD_ADDR_EXP 35
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// sKamikadze := false ;
8615: LD_ADDR_EXP 43
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// sTroll := false ;
8623: LD_ADDR_EXP 44
8627: PUSH
8628: LD_INT 0
8630: ST_TO_ADDR
// sSlow := false ;
8631: LD_ADDR_EXP 45
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// sLack := false ;
8639: LD_ADDR_EXP 46
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// sTank := false ;
8647: LD_ADDR_EXP 48
8651: PUSH
8652: LD_INT 0
8654: ST_TO_ADDR
// sRemote := false ;
8655: LD_ADDR_EXP 49
8659: PUSH
8660: LD_INT 0
8662: ST_TO_ADDR
// sPowell := false ;
8663: LD_ADDR_EXP 50
8667: PUSH
8668: LD_INT 0
8670: ST_TO_ADDR
// sTeleport := false ;
8671: LD_ADDR_EXP 53
8675: PUSH
8676: LD_INT 0
8678: ST_TO_ADDR
// sOilTower := false ;
8679: LD_ADDR_EXP 55
8683: PUSH
8684: LD_INT 0
8686: ST_TO_ADDR
// sShovel := false ;
8687: LD_ADDR_EXP 56
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// sSheik := false ;
8695: LD_ADDR_EXP 57
8699: PUSH
8700: LD_INT 0
8702: ST_TO_ADDR
// sEarthquake := false ;
8703: LD_ADDR_EXP 59
8707: PUSH
8708: LD_INT 0
8710: ST_TO_ADDR
// sAI := false ;
8711: LD_ADDR_EXP 60
8715: PUSH
8716: LD_INT 0
8718: ST_TO_ADDR
// sCargo := false ;
8719: LD_ADDR_EXP 63
8723: PUSH
8724: LD_INT 0
8726: ST_TO_ADDR
// sDLaser := false ;
8727: LD_ADDR_EXP 64
8731: PUSH
8732: LD_INT 0
8734: ST_TO_ADDR
// sExchange := false ;
8735: LD_ADDR_EXP 65
8739: PUSH
8740: LD_INT 0
8742: ST_TO_ADDR
// sFac := false ;
8743: LD_ADDR_EXP 66
8747: PUSH
8748: LD_INT 0
8750: ST_TO_ADDR
// sPower := false ;
8751: LD_ADDR_EXP 67
8755: PUSH
8756: LD_INT 0
8758: ST_TO_ADDR
// sRandom := false ;
8759: LD_ADDR_EXP 68
8763: PUSH
8764: LD_INT 0
8766: ST_TO_ADDR
// sShield := false ;
8767: LD_ADDR_EXP 69
8771: PUSH
8772: LD_INT 0
8774: ST_TO_ADDR
// sTime := false ;
8775: LD_ADDR_EXP 70
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// sTools := false ;
8783: LD_ADDR_EXP 71
8787: PUSH
8788: LD_INT 0
8790: ST_TO_ADDR
// sSold := false ;
8791: LD_ADDR_EXP 36
8795: PUSH
8796: LD_INT 0
8798: ST_TO_ADDR
// sDiff := false ;
8799: LD_ADDR_EXP 37
8803: PUSH
8804: LD_INT 0
8806: ST_TO_ADDR
// sFog := false ;
8807: LD_ADDR_EXP 40
8811: PUSH
8812: LD_INT 0
8814: ST_TO_ADDR
// sReset := false ;
8815: LD_ADDR_EXP 41
8819: PUSH
8820: LD_INT 0
8822: ST_TO_ADDR
// sSun := false ;
8823: LD_ADDR_EXP 42
8827: PUSH
8828: LD_INT 0
8830: ST_TO_ADDR
// sTiger := false ;
8831: LD_ADDR_EXP 38
8835: PUSH
8836: LD_INT 0
8838: ST_TO_ADDR
// sBomb := false ;
8839: LD_ADDR_EXP 39
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// sWound := false ;
8847: LD_ADDR_EXP 47
8851: PUSH
8852: LD_INT 0
8854: ST_TO_ADDR
// sBetray := false ;
8855: LD_ADDR_EXP 51
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// sContamin := false ;
8863: LD_ADDR_EXP 52
8867: PUSH
8868: LD_INT 0
8870: ST_TO_ADDR
// sOil := false ;
8871: LD_ADDR_EXP 54
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// sStu := false ;
8879: LD_ADDR_EXP 58
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// sBazooka := false ;
8887: LD_ADDR_EXP 61
8891: PUSH
8892: LD_INT 0
8894: ST_TO_ADDR
// sMortar := false ;
8895: LD_ADDR_EXP 62
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// sRanger := false ;
8903: LD_ADDR_EXP 72
8907: PUSH
8908: LD_INT 0
8910: ST_TO_ADDR
// sComputer := false ;
8911: LD_ADDR_EXP 73
8915: PUSH
8916: LD_INT 0
8918: ST_TO_ADDR
// s30 := false ;
8919: LD_ADDR_EXP 74
8923: PUSH
8924: LD_INT 0
8926: ST_TO_ADDR
// s60 := false ;
8927: LD_ADDR_EXP 75
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// end ;
8935: LD_VAR 0 1
8939: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8940: LD_INT 0
8942: PPUSH
8943: PPUSH
8944: PPUSH
8945: PPUSH
8946: PPUSH
8947: PPUSH
8948: PPUSH
// result := [ ] ;
8949: LD_ADDR_VAR 0 2
8953: PUSH
8954: EMPTY
8955: ST_TO_ADDR
// if campaign_id = 1 then
8956: LD_OWVAR 69
8960: PUSH
8961: LD_INT 1
8963: EQUAL
8964: IFFALSE 12130
// begin case mission_number of 1 :
8966: LD_OWVAR 70
8970: PUSH
8971: LD_INT 1
8973: DOUBLE
8974: EQUAL
8975: IFTRUE 8979
8977: GO 9055
8979: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8980: LD_ADDR_VAR 0 2
8984: PUSH
8985: LD_INT 2
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: LD_INT 11
8993: PUSH
8994: LD_INT 12
8996: PUSH
8997: LD_INT 15
8999: PUSH
9000: LD_INT 16
9002: PUSH
9003: LD_INT 22
9005: PUSH
9006: LD_INT 23
9008: PUSH
9009: LD_INT 26
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 101
9025: PUSH
9026: LD_INT 102
9028: PUSH
9029: LD_INT 106
9031: PUSH
9032: LD_INT 116
9034: PUSH
9035: LD_INT 117
9037: PUSH
9038: LD_INT 118
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: ST_TO_ADDR
9053: GO 12128
9055: LD_INT 2
9057: DOUBLE
9058: EQUAL
9059: IFTRUE 9063
9061: GO 9147
9063: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9064: LD_ADDR_VAR 0 2
9068: PUSH
9069: LD_INT 2
9071: PUSH
9072: LD_INT 4
9074: PUSH
9075: LD_INT 11
9077: PUSH
9078: LD_INT 12
9080: PUSH
9081: LD_INT 15
9083: PUSH
9084: LD_INT 16
9086: PUSH
9087: LD_INT 22
9089: PUSH
9090: LD_INT 23
9092: PUSH
9093: LD_INT 26
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 101
9109: PUSH
9110: LD_INT 102
9112: PUSH
9113: LD_INT 105
9115: PUSH
9116: LD_INT 106
9118: PUSH
9119: LD_INT 108
9121: PUSH
9122: LD_INT 116
9124: PUSH
9125: LD_INT 117
9127: PUSH
9128: LD_INT 118
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: ST_TO_ADDR
9145: GO 12128
9147: LD_INT 3
9149: DOUBLE
9150: EQUAL
9151: IFTRUE 9155
9153: GO 9243
9155: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9156: LD_ADDR_VAR 0 2
9160: PUSH
9161: LD_INT 2
9163: PUSH
9164: LD_INT 4
9166: PUSH
9167: LD_INT 5
9169: PUSH
9170: LD_INT 11
9172: PUSH
9173: LD_INT 12
9175: PUSH
9176: LD_INT 15
9178: PUSH
9179: LD_INT 16
9181: PUSH
9182: LD_INT 22
9184: PUSH
9185: LD_INT 26
9187: PUSH
9188: LD_INT 36
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 101
9205: PUSH
9206: LD_INT 102
9208: PUSH
9209: LD_INT 105
9211: PUSH
9212: LD_INT 106
9214: PUSH
9215: LD_INT 108
9217: PUSH
9218: LD_INT 116
9220: PUSH
9221: LD_INT 117
9223: PUSH
9224: LD_INT 118
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: ST_TO_ADDR
9241: GO 12128
9243: LD_INT 4
9245: DOUBLE
9246: EQUAL
9247: IFTRUE 9251
9249: GO 9347
9251: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9252: LD_ADDR_VAR 0 2
9256: PUSH
9257: LD_INT 2
9259: PUSH
9260: LD_INT 4
9262: PUSH
9263: LD_INT 5
9265: PUSH
9266: LD_INT 8
9268: PUSH
9269: LD_INT 11
9271: PUSH
9272: LD_INT 12
9274: PUSH
9275: LD_INT 15
9277: PUSH
9278: LD_INT 16
9280: PUSH
9281: LD_INT 22
9283: PUSH
9284: LD_INT 23
9286: PUSH
9287: LD_INT 26
9289: PUSH
9290: LD_INT 36
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 101
9309: PUSH
9310: LD_INT 102
9312: PUSH
9313: LD_INT 105
9315: PUSH
9316: LD_INT 106
9318: PUSH
9319: LD_INT 108
9321: PUSH
9322: LD_INT 116
9324: PUSH
9325: LD_INT 117
9327: PUSH
9328: LD_INT 118
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: ST_TO_ADDR
9345: GO 12128
9347: LD_INT 5
9349: DOUBLE
9350: EQUAL
9351: IFTRUE 9355
9353: GO 9467
9355: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9356: LD_ADDR_VAR 0 2
9360: PUSH
9361: LD_INT 2
9363: PUSH
9364: LD_INT 4
9366: PUSH
9367: LD_INT 5
9369: PUSH
9370: LD_INT 6
9372: PUSH
9373: LD_INT 8
9375: PUSH
9376: LD_INT 11
9378: PUSH
9379: LD_INT 12
9381: PUSH
9382: LD_INT 15
9384: PUSH
9385: LD_INT 16
9387: PUSH
9388: LD_INT 22
9390: PUSH
9391: LD_INT 23
9393: PUSH
9394: LD_INT 25
9396: PUSH
9397: LD_INT 26
9399: PUSH
9400: LD_INT 36
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: PUSH
9419: LD_INT 101
9421: PUSH
9422: LD_INT 102
9424: PUSH
9425: LD_INT 105
9427: PUSH
9428: LD_INT 106
9430: PUSH
9431: LD_INT 108
9433: PUSH
9434: LD_INT 109
9436: PUSH
9437: LD_INT 112
9439: PUSH
9440: LD_INT 116
9442: PUSH
9443: LD_INT 117
9445: PUSH
9446: LD_INT 118
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: ST_TO_ADDR
9465: GO 12128
9467: LD_INT 6
9469: DOUBLE
9470: EQUAL
9471: IFTRUE 9475
9473: GO 9607
9475: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9476: LD_ADDR_VAR 0 2
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 4
9486: PUSH
9487: LD_INT 5
9489: PUSH
9490: LD_INT 6
9492: PUSH
9493: LD_INT 8
9495: PUSH
9496: LD_INT 11
9498: PUSH
9499: LD_INT 12
9501: PUSH
9502: LD_INT 15
9504: PUSH
9505: LD_INT 16
9507: PUSH
9508: LD_INT 20
9510: PUSH
9511: LD_INT 21
9513: PUSH
9514: LD_INT 22
9516: PUSH
9517: LD_INT 23
9519: PUSH
9520: LD_INT 25
9522: PUSH
9523: LD_INT 26
9525: PUSH
9526: LD_INT 30
9528: PUSH
9529: LD_INT 31
9531: PUSH
9532: LD_INT 32
9534: PUSH
9535: LD_INT 36
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 101
9561: PUSH
9562: LD_INT 102
9564: PUSH
9565: LD_INT 105
9567: PUSH
9568: LD_INT 106
9570: PUSH
9571: LD_INT 108
9573: PUSH
9574: LD_INT 109
9576: PUSH
9577: LD_INT 112
9579: PUSH
9580: LD_INT 116
9582: PUSH
9583: LD_INT 117
9585: PUSH
9586: LD_INT 118
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: ST_TO_ADDR
9605: GO 12128
9607: LD_INT 7
9609: DOUBLE
9610: EQUAL
9611: IFTRUE 9615
9613: GO 9727
9615: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: LD_INT 4
9626: PUSH
9627: LD_INT 5
9629: PUSH
9630: LD_INT 7
9632: PUSH
9633: LD_INT 11
9635: PUSH
9636: LD_INT 12
9638: PUSH
9639: LD_INT 15
9641: PUSH
9642: LD_INT 16
9644: PUSH
9645: LD_INT 20
9647: PUSH
9648: LD_INT 21
9650: PUSH
9651: LD_INT 22
9653: PUSH
9654: LD_INT 23
9656: PUSH
9657: LD_INT 25
9659: PUSH
9660: LD_INT 26
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: PUSH
9679: LD_INT 101
9681: PUSH
9682: LD_INT 102
9684: PUSH
9685: LD_INT 103
9687: PUSH
9688: LD_INT 105
9690: PUSH
9691: LD_INT 106
9693: PUSH
9694: LD_INT 108
9696: PUSH
9697: LD_INT 112
9699: PUSH
9700: LD_INT 116
9702: PUSH
9703: LD_INT 117
9705: PUSH
9706: LD_INT 118
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: ST_TO_ADDR
9725: GO 12128
9727: LD_INT 8
9729: DOUBLE
9730: EQUAL
9731: IFTRUE 9735
9733: GO 9875
9735: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9736: LD_ADDR_VAR 0 2
9740: PUSH
9741: LD_INT 2
9743: PUSH
9744: LD_INT 4
9746: PUSH
9747: LD_INT 5
9749: PUSH
9750: LD_INT 6
9752: PUSH
9753: LD_INT 7
9755: PUSH
9756: LD_INT 8
9758: PUSH
9759: LD_INT 11
9761: PUSH
9762: LD_INT 12
9764: PUSH
9765: LD_INT 15
9767: PUSH
9768: LD_INT 16
9770: PUSH
9771: LD_INT 20
9773: PUSH
9774: LD_INT 21
9776: PUSH
9777: LD_INT 22
9779: PUSH
9780: LD_INT 23
9782: PUSH
9783: LD_INT 25
9785: PUSH
9786: LD_INT 26
9788: PUSH
9789: LD_INT 30
9791: PUSH
9792: LD_INT 31
9794: PUSH
9795: LD_INT 32
9797: PUSH
9798: LD_INT 36
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 101
9825: PUSH
9826: LD_INT 102
9828: PUSH
9829: LD_INT 103
9831: PUSH
9832: LD_INT 105
9834: PUSH
9835: LD_INT 106
9837: PUSH
9838: LD_INT 108
9840: PUSH
9841: LD_INT 109
9843: PUSH
9844: LD_INT 112
9846: PUSH
9847: LD_INT 116
9849: PUSH
9850: LD_INT 117
9852: PUSH
9853: LD_INT 118
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: ST_TO_ADDR
9873: GO 12128
9875: LD_INT 9
9877: DOUBLE
9878: EQUAL
9879: IFTRUE 9883
9881: GO 10031
9883: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9884: LD_ADDR_VAR 0 2
9888: PUSH
9889: LD_INT 2
9891: PUSH
9892: LD_INT 4
9894: PUSH
9895: LD_INT 5
9897: PUSH
9898: LD_INT 6
9900: PUSH
9901: LD_INT 7
9903: PUSH
9904: LD_INT 8
9906: PUSH
9907: LD_INT 11
9909: PUSH
9910: LD_INT 12
9912: PUSH
9913: LD_INT 15
9915: PUSH
9916: LD_INT 16
9918: PUSH
9919: LD_INT 20
9921: PUSH
9922: LD_INT 21
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 23
9930: PUSH
9931: LD_INT 25
9933: PUSH
9934: LD_INT 26
9936: PUSH
9937: LD_INT 28
9939: PUSH
9940: LD_INT 30
9942: PUSH
9943: LD_INT 31
9945: PUSH
9946: LD_INT 32
9948: PUSH
9949: LD_INT 36
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 101
9977: PUSH
9978: LD_INT 102
9980: PUSH
9981: LD_INT 103
9983: PUSH
9984: LD_INT 105
9986: PUSH
9987: LD_INT 106
9989: PUSH
9990: LD_INT 108
9992: PUSH
9993: LD_INT 109
9995: PUSH
9996: LD_INT 112
9998: PUSH
9999: LD_INT 114
10001: PUSH
10002: LD_INT 116
10004: PUSH
10005: LD_INT 117
10007: PUSH
10008: LD_INT 118
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: ST_TO_ADDR
10029: GO 12128
10031: LD_INT 10
10033: DOUBLE
10034: EQUAL
10035: IFTRUE 10039
10037: GO 10235
10039: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10040: LD_ADDR_VAR 0 2
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 4
10050: PUSH
10051: LD_INT 5
10053: PUSH
10054: LD_INT 6
10056: PUSH
10057: LD_INT 7
10059: PUSH
10060: LD_INT 8
10062: PUSH
10063: LD_INT 9
10065: PUSH
10066: LD_INT 10
10068: PUSH
10069: LD_INT 11
10071: PUSH
10072: LD_INT 12
10074: PUSH
10075: LD_INT 13
10077: PUSH
10078: LD_INT 14
10080: PUSH
10081: LD_INT 15
10083: PUSH
10084: LD_INT 16
10086: PUSH
10087: LD_INT 17
10089: PUSH
10090: LD_INT 18
10092: PUSH
10093: LD_INT 19
10095: PUSH
10096: LD_INT 20
10098: PUSH
10099: LD_INT 21
10101: PUSH
10102: LD_INT 22
10104: PUSH
10105: LD_INT 23
10107: PUSH
10108: LD_INT 24
10110: PUSH
10111: LD_INT 25
10113: PUSH
10114: LD_INT 26
10116: PUSH
10117: LD_INT 28
10119: PUSH
10120: LD_INT 30
10122: PUSH
10123: LD_INT 31
10125: PUSH
10126: LD_INT 32
10128: PUSH
10129: LD_INT 36
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 101
10165: PUSH
10166: LD_INT 102
10168: PUSH
10169: LD_INT 103
10171: PUSH
10172: LD_INT 104
10174: PUSH
10175: LD_INT 105
10177: PUSH
10178: LD_INT 106
10180: PUSH
10181: LD_INT 107
10183: PUSH
10184: LD_INT 108
10186: PUSH
10187: LD_INT 109
10189: PUSH
10190: LD_INT 110
10192: PUSH
10193: LD_INT 111
10195: PUSH
10196: LD_INT 112
10198: PUSH
10199: LD_INT 114
10201: PUSH
10202: LD_INT 116
10204: PUSH
10205: LD_INT 117
10207: PUSH
10208: LD_INT 118
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: ST_TO_ADDR
10233: GO 12128
10235: LD_INT 11
10237: DOUBLE
10238: EQUAL
10239: IFTRUE 10243
10241: GO 10447
10243: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10244: LD_ADDR_VAR 0 2
10248: PUSH
10249: LD_INT 2
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: LD_INT 4
10257: PUSH
10258: LD_INT 5
10260: PUSH
10261: LD_INT 6
10263: PUSH
10264: LD_INT 7
10266: PUSH
10267: LD_INT 8
10269: PUSH
10270: LD_INT 9
10272: PUSH
10273: LD_INT 10
10275: PUSH
10276: LD_INT 11
10278: PUSH
10279: LD_INT 12
10281: PUSH
10282: LD_INT 13
10284: PUSH
10285: LD_INT 14
10287: PUSH
10288: LD_INT 15
10290: PUSH
10291: LD_INT 16
10293: PUSH
10294: LD_INT 17
10296: PUSH
10297: LD_INT 18
10299: PUSH
10300: LD_INT 19
10302: PUSH
10303: LD_INT 20
10305: PUSH
10306: LD_INT 21
10308: PUSH
10309: LD_INT 22
10311: PUSH
10312: LD_INT 23
10314: PUSH
10315: LD_INT 24
10317: PUSH
10318: LD_INT 25
10320: PUSH
10321: LD_INT 26
10323: PUSH
10324: LD_INT 28
10326: PUSH
10327: LD_INT 30
10329: PUSH
10330: LD_INT 31
10332: PUSH
10333: LD_INT 32
10335: PUSH
10336: LD_INT 34
10338: PUSH
10339: LD_INT 36
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 101
10377: PUSH
10378: LD_INT 102
10380: PUSH
10381: LD_INT 103
10383: PUSH
10384: LD_INT 104
10386: PUSH
10387: LD_INT 105
10389: PUSH
10390: LD_INT 106
10392: PUSH
10393: LD_INT 107
10395: PUSH
10396: LD_INT 108
10398: PUSH
10399: LD_INT 109
10401: PUSH
10402: LD_INT 110
10404: PUSH
10405: LD_INT 111
10407: PUSH
10408: LD_INT 112
10410: PUSH
10411: LD_INT 114
10413: PUSH
10414: LD_INT 116
10416: PUSH
10417: LD_INT 117
10419: PUSH
10420: LD_INT 118
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: ST_TO_ADDR
10445: GO 12128
10447: LD_INT 12
10449: DOUBLE
10450: EQUAL
10451: IFTRUE 10455
10453: GO 10675
10455: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10456: LD_ADDR_VAR 0 2
10460: PUSH
10461: LD_INT 1
10463: PUSH
10464: LD_INT 2
10466: PUSH
10467: LD_INT 3
10469: PUSH
10470: LD_INT 4
10472: PUSH
10473: LD_INT 5
10475: PUSH
10476: LD_INT 6
10478: PUSH
10479: LD_INT 7
10481: PUSH
10482: LD_INT 8
10484: PUSH
10485: LD_INT 9
10487: PUSH
10488: LD_INT 10
10490: PUSH
10491: LD_INT 11
10493: PUSH
10494: LD_INT 12
10496: PUSH
10497: LD_INT 13
10499: PUSH
10500: LD_INT 14
10502: PUSH
10503: LD_INT 15
10505: PUSH
10506: LD_INT 16
10508: PUSH
10509: LD_INT 17
10511: PUSH
10512: LD_INT 18
10514: PUSH
10515: LD_INT 19
10517: PUSH
10518: LD_INT 20
10520: PUSH
10521: LD_INT 21
10523: PUSH
10524: LD_INT 22
10526: PUSH
10527: LD_INT 23
10529: PUSH
10530: LD_INT 24
10532: PUSH
10533: LD_INT 25
10535: PUSH
10536: LD_INT 26
10538: PUSH
10539: LD_INT 27
10541: PUSH
10542: LD_INT 28
10544: PUSH
10545: LD_INT 30
10547: PUSH
10548: LD_INT 31
10550: PUSH
10551: LD_INT 32
10553: PUSH
10554: LD_INT 33
10556: PUSH
10557: LD_INT 34
10559: PUSH
10560: LD_INT 36
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 101
10601: PUSH
10602: LD_INT 102
10604: PUSH
10605: LD_INT 103
10607: PUSH
10608: LD_INT 104
10610: PUSH
10611: LD_INT 105
10613: PUSH
10614: LD_INT 106
10616: PUSH
10617: LD_INT 107
10619: PUSH
10620: LD_INT 108
10622: PUSH
10623: LD_INT 109
10625: PUSH
10626: LD_INT 110
10628: PUSH
10629: LD_INT 111
10631: PUSH
10632: LD_INT 112
10634: PUSH
10635: LD_INT 113
10637: PUSH
10638: LD_INT 114
10640: PUSH
10641: LD_INT 116
10643: PUSH
10644: LD_INT 117
10646: PUSH
10647: LD_INT 118
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: ST_TO_ADDR
10673: GO 12128
10675: LD_INT 13
10677: DOUBLE
10678: EQUAL
10679: IFTRUE 10683
10681: GO 10891
10683: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_INT 1
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: LD_INT 3
10697: PUSH
10698: LD_INT 4
10700: PUSH
10701: LD_INT 5
10703: PUSH
10704: LD_INT 8
10706: PUSH
10707: LD_INT 9
10709: PUSH
10710: LD_INT 10
10712: PUSH
10713: LD_INT 11
10715: PUSH
10716: LD_INT 12
10718: PUSH
10719: LD_INT 14
10721: PUSH
10722: LD_INT 15
10724: PUSH
10725: LD_INT 16
10727: PUSH
10728: LD_INT 17
10730: PUSH
10731: LD_INT 18
10733: PUSH
10734: LD_INT 19
10736: PUSH
10737: LD_INT 20
10739: PUSH
10740: LD_INT 21
10742: PUSH
10743: LD_INT 22
10745: PUSH
10746: LD_INT 23
10748: PUSH
10749: LD_INT 24
10751: PUSH
10752: LD_INT 25
10754: PUSH
10755: LD_INT 26
10757: PUSH
10758: LD_INT 27
10760: PUSH
10761: LD_INT 28
10763: PUSH
10764: LD_INT 30
10766: PUSH
10767: LD_INT 31
10769: PUSH
10770: LD_INT 32
10772: PUSH
10773: LD_INT 33
10775: PUSH
10776: LD_INT 34
10778: PUSH
10779: LD_INT 36
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PUSH
10815: LD_INT 101
10817: PUSH
10818: LD_INT 102
10820: PUSH
10821: LD_INT 103
10823: PUSH
10824: LD_INT 104
10826: PUSH
10827: LD_INT 105
10829: PUSH
10830: LD_INT 106
10832: PUSH
10833: LD_INT 107
10835: PUSH
10836: LD_INT 108
10838: PUSH
10839: LD_INT 109
10841: PUSH
10842: LD_INT 110
10844: PUSH
10845: LD_INT 111
10847: PUSH
10848: LD_INT 112
10850: PUSH
10851: LD_INT 113
10853: PUSH
10854: LD_INT 114
10856: PUSH
10857: LD_INT 116
10859: PUSH
10860: LD_INT 117
10862: PUSH
10863: LD_INT 118
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: ST_TO_ADDR
10889: GO 12128
10891: LD_INT 14
10893: DOUBLE
10894: EQUAL
10895: IFTRUE 10899
10897: GO 11123
10899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10900: LD_ADDR_VAR 0 2
10904: PUSH
10905: LD_INT 1
10907: PUSH
10908: LD_INT 2
10910: PUSH
10911: LD_INT 3
10913: PUSH
10914: LD_INT 4
10916: PUSH
10917: LD_INT 5
10919: PUSH
10920: LD_INT 6
10922: PUSH
10923: LD_INT 7
10925: PUSH
10926: LD_INT 8
10928: PUSH
10929: LD_INT 9
10931: PUSH
10932: LD_INT 10
10934: PUSH
10935: LD_INT 11
10937: PUSH
10938: LD_INT 12
10940: PUSH
10941: LD_INT 13
10943: PUSH
10944: LD_INT 14
10946: PUSH
10947: LD_INT 15
10949: PUSH
10950: LD_INT 16
10952: PUSH
10953: LD_INT 17
10955: PUSH
10956: LD_INT 18
10958: PUSH
10959: LD_INT 19
10961: PUSH
10962: LD_INT 20
10964: PUSH
10965: LD_INT 21
10967: PUSH
10968: LD_INT 22
10970: PUSH
10971: LD_INT 23
10973: PUSH
10974: LD_INT 24
10976: PUSH
10977: LD_INT 25
10979: PUSH
10980: LD_INT 26
10982: PUSH
10983: LD_INT 27
10985: PUSH
10986: LD_INT 28
10988: PUSH
10989: LD_INT 29
10991: PUSH
10992: LD_INT 30
10994: PUSH
10995: LD_INT 31
10997: PUSH
10998: LD_INT 32
11000: PUSH
11001: LD_INT 33
11003: PUSH
11004: LD_INT 34
11006: PUSH
11007: LD_INT 36
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 101
11049: PUSH
11050: LD_INT 102
11052: PUSH
11053: LD_INT 103
11055: PUSH
11056: LD_INT 104
11058: PUSH
11059: LD_INT 105
11061: PUSH
11062: LD_INT 106
11064: PUSH
11065: LD_INT 107
11067: PUSH
11068: LD_INT 108
11070: PUSH
11071: LD_INT 109
11073: PUSH
11074: LD_INT 110
11076: PUSH
11077: LD_INT 111
11079: PUSH
11080: LD_INT 112
11082: PUSH
11083: LD_INT 113
11085: PUSH
11086: LD_INT 114
11088: PUSH
11089: LD_INT 116
11091: PUSH
11092: LD_INT 117
11094: PUSH
11095: LD_INT 118
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: ST_TO_ADDR
11121: GO 12128
11123: LD_INT 15
11125: DOUBLE
11126: EQUAL
11127: IFTRUE 11131
11129: GO 11355
11131: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11132: LD_ADDR_VAR 0 2
11136: PUSH
11137: LD_INT 1
11139: PUSH
11140: LD_INT 2
11142: PUSH
11143: LD_INT 3
11145: PUSH
11146: LD_INT 4
11148: PUSH
11149: LD_INT 5
11151: PUSH
11152: LD_INT 6
11154: PUSH
11155: LD_INT 7
11157: PUSH
11158: LD_INT 8
11160: PUSH
11161: LD_INT 9
11163: PUSH
11164: LD_INT 10
11166: PUSH
11167: LD_INT 11
11169: PUSH
11170: LD_INT 12
11172: PUSH
11173: LD_INT 13
11175: PUSH
11176: LD_INT 14
11178: PUSH
11179: LD_INT 15
11181: PUSH
11182: LD_INT 16
11184: PUSH
11185: LD_INT 17
11187: PUSH
11188: LD_INT 18
11190: PUSH
11191: LD_INT 19
11193: PUSH
11194: LD_INT 20
11196: PUSH
11197: LD_INT 21
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_INT 23
11205: PUSH
11206: LD_INT 24
11208: PUSH
11209: LD_INT 25
11211: PUSH
11212: LD_INT 26
11214: PUSH
11215: LD_INT 27
11217: PUSH
11218: LD_INT 28
11220: PUSH
11221: LD_INT 29
11223: PUSH
11224: LD_INT 30
11226: PUSH
11227: LD_INT 31
11229: PUSH
11230: LD_INT 32
11232: PUSH
11233: LD_INT 33
11235: PUSH
11236: LD_INT 34
11238: PUSH
11239: LD_INT 36
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 101
11281: PUSH
11282: LD_INT 102
11284: PUSH
11285: LD_INT 103
11287: PUSH
11288: LD_INT 104
11290: PUSH
11291: LD_INT 105
11293: PUSH
11294: LD_INT 106
11296: PUSH
11297: LD_INT 107
11299: PUSH
11300: LD_INT 108
11302: PUSH
11303: LD_INT 109
11305: PUSH
11306: LD_INT 110
11308: PUSH
11309: LD_INT 111
11311: PUSH
11312: LD_INT 112
11314: PUSH
11315: LD_INT 113
11317: PUSH
11318: LD_INT 114
11320: PUSH
11321: LD_INT 116
11323: PUSH
11324: LD_INT 117
11326: PUSH
11327: LD_INT 118
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: ST_TO_ADDR
11353: GO 12128
11355: LD_INT 16
11357: DOUBLE
11358: EQUAL
11359: IFTRUE 11363
11361: GO 11499
11363: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11364: LD_ADDR_VAR 0 2
11368: PUSH
11369: LD_INT 2
11371: PUSH
11372: LD_INT 4
11374: PUSH
11375: LD_INT 5
11377: PUSH
11378: LD_INT 7
11380: PUSH
11381: LD_INT 11
11383: PUSH
11384: LD_INT 12
11386: PUSH
11387: LD_INT 15
11389: PUSH
11390: LD_INT 16
11392: PUSH
11393: LD_INT 20
11395: PUSH
11396: LD_INT 21
11398: PUSH
11399: LD_INT 22
11401: PUSH
11402: LD_INT 23
11404: PUSH
11405: LD_INT 25
11407: PUSH
11408: LD_INT 26
11410: PUSH
11411: LD_INT 30
11413: PUSH
11414: LD_INT 31
11416: PUSH
11417: LD_INT 32
11419: PUSH
11420: LD_INT 33
11422: PUSH
11423: LD_INT 34
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 101
11449: PUSH
11450: LD_INT 102
11452: PUSH
11453: LD_INT 103
11455: PUSH
11456: LD_INT 106
11458: PUSH
11459: LD_INT 108
11461: PUSH
11462: LD_INT 112
11464: PUSH
11465: LD_INT 113
11467: PUSH
11468: LD_INT 114
11470: PUSH
11471: LD_INT 116
11473: PUSH
11474: LD_INT 117
11476: PUSH
11477: LD_INT 118
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: ST_TO_ADDR
11497: GO 12128
11499: LD_INT 17
11501: DOUBLE
11502: EQUAL
11503: IFTRUE 11507
11505: GO 11731
11507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11508: LD_ADDR_VAR 0 2
11512: PUSH
11513: LD_INT 1
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: LD_INT 4
11524: PUSH
11525: LD_INT 5
11527: PUSH
11528: LD_INT 6
11530: PUSH
11531: LD_INT 7
11533: PUSH
11534: LD_INT 8
11536: PUSH
11537: LD_INT 9
11539: PUSH
11540: LD_INT 10
11542: PUSH
11543: LD_INT 11
11545: PUSH
11546: LD_INT 12
11548: PUSH
11549: LD_INT 13
11551: PUSH
11552: LD_INT 14
11554: PUSH
11555: LD_INT 15
11557: PUSH
11558: LD_INT 16
11560: PUSH
11561: LD_INT 17
11563: PUSH
11564: LD_INT 18
11566: PUSH
11567: LD_INT 19
11569: PUSH
11570: LD_INT 20
11572: PUSH
11573: LD_INT 21
11575: PUSH
11576: LD_INT 22
11578: PUSH
11579: LD_INT 23
11581: PUSH
11582: LD_INT 24
11584: PUSH
11585: LD_INT 25
11587: PUSH
11588: LD_INT 26
11590: PUSH
11591: LD_INT 27
11593: PUSH
11594: LD_INT 28
11596: PUSH
11597: LD_INT 29
11599: PUSH
11600: LD_INT 30
11602: PUSH
11603: LD_INT 31
11605: PUSH
11606: LD_INT 32
11608: PUSH
11609: LD_INT 33
11611: PUSH
11612: LD_INT 34
11614: PUSH
11615: LD_INT 36
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 101
11657: PUSH
11658: LD_INT 102
11660: PUSH
11661: LD_INT 103
11663: PUSH
11664: LD_INT 104
11666: PUSH
11667: LD_INT 105
11669: PUSH
11670: LD_INT 106
11672: PUSH
11673: LD_INT 107
11675: PUSH
11676: LD_INT 108
11678: PUSH
11679: LD_INT 109
11681: PUSH
11682: LD_INT 110
11684: PUSH
11685: LD_INT 111
11687: PUSH
11688: LD_INT 112
11690: PUSH
11691: LD_INT 113
11693: PUSH
11694: LD_INT 114
11696: PUSH
11697: LD_INT 116
11699: PUSH
11700: LD_INT 117
11702: PUSH
11703: LD_INT 118
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: ST_TO_ADDR
11729: GO 12128
11731: LD_INT 18
11733: DOUBLE
11734: EQUAL
11735: IFTRUE 11739
11737: GO 11887
11739: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_INT 2
11747: PUSH
11748: LD_INT 4
11750: PUSH
11751: LD_INT 5
11753: PUSH
11754: LD_INT 7
11756: PUSH
11757: LD_INT 11
11759: PUSH
11760: LD_INT 12
11762: PUSH
11763: LD_INT 15
11765: PUSH
11766: LD_INT 16
11768: PUSH
11769: LD_INT 20
11771: PUSH
11772: LD_INT 21
11774: PUSH
11775: LD_INT 22
11777: PUSH
11778: LD_INT 23
11780: PUSH
11781: LD_INT 25
11783: PUSH
11784: LD_INT 26
11786: PUSH
11787: LD_INT 30
11789: PUSH
11790: LD_INT 31
11792: PUSH
11793: LD_INT 32
11795: PUSH
11796: LD_INT 33
11798: PUSH
11799: LD_INT 34
11801: PUSH
11802: LD_INT 35
11804: PUSH
11805: LD_INT 36
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 101
11833: PUSH
11834: LD_INT 102
11836: PUSH
11837: LD_INT 103
11839: PUSH
11840: LD_INT 106
11842: PUSH
11843: LD_INT 108
11845: PUSH
11846: LD_INT 112
11848: PUSH
11849: LD_INT 113
11851: PUSH
11852: LD_INT 114
11854: PUSH
11855: LD_INT 115
11857: PUSH
11858: LD_INT 116
11860: PUSH
11861: LD_INT 117
11863: PUSH
11864: LD_INT 118
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: ST_TO_ADDR
11885: GO 12128
11887: LD_INT 19
11889: DOUBLE
11890: EQUAL
11891: IFTRUE 11895
11893: GO 12127
11895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11896: LD_ADDR_VAR 0 2
11900: PUSH
11901: LD_INT 1
11903: PUSH
11904: LD_INT 2
11906: PUSH
11907: LD_INT 3
11909: PUSH
11910: LD_INT 4
11912: PUSH
11913: LD_INT 5
11915: PUSH
11916: LD_INT 6
11918: PUSH
11919: LD_INT 7
11921: PUSH
11922: LD_INT 8
11924: PUSH
11925: LD_INT 9
11927: PUSH
11928: LD_INT 10
11930: PUSH
11931: LD_INT 11
11933: PUSH
11934: LD_INT 12
11936: PUSH
11937: LD_INT 13
11939: PUSH
11940: LD_INT 14
11942: PUSH
11943: LD_INT 15
11945: PUSH
11946: LD_INT 16
11948: PUSH
11949: LD_INT 17
11951: PUSH
11952: LD_INT 18
11954: PUSH
11955: LD_INT 19
11957: PUSH
11958: LD_INT 20
11960: PUSH
11961: LD_INT 21
11963: PUSH
11964: LD_INT 22
11966: PUSH
11967: LD_INT 23
11969: PUSH
11970: LD_INT 24
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 26
11978: PUSH
11979: LD_INT 27
11981: PUSH
11982: LD_INT 28
11984: PUSH
11985: LD_INT 29
11987: PUSH
11988: LD_INT 30
11990: PUSH
11991: LD_INT 31
11993: PUSH
11994: LD_INT 32
11996: PUSH
11997: LD_INT 33
11999: PUSH
12000: LD_INT 34
12002: PUSH
12003: LD_INT 35
12005: PUSH
12006: LD_INT 36
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 101
12049: PUSH
12050: LD_INT 102
12052: PUSH
12053: LD_INT 103
12055: PUSH
12056: LD_INT 104
12058: PUSH
12059: LD_INT 105
12061: PUSH
12062: LD_INT 106
12064: PUSH
12065: LD_INT 107
12067: PUSH
12068: LD_INT 108
12070: PUSH
12071: LD_INT 109
12073: PUSH
12074: LD_INT 110
12076: PUSH
12077: LD_INT 111
12079: PUSH
12080: LD_INT 112
12082: PUSH
12083: LD_INT 113
12085: PUSH
12086: LD_INT 114
12088: PUSH
12089: LD_INT 115
12091: PUSH
12092: LD_INT 116
12094: PUSH
12095: LD_INT 117
12097: PUSH
12098: LD_INT 118
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: ST_TO_ADDR
12125: GO 12128
12127: POP
// end else
12128: GO 12359
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12130: LD_ADDR_VAR 0 2
12134: PUSH
12135: LD_INT 1
12137: PUSH
12138: LD_INT 2
12140: PUSH
12141: LD_INT 3
12143: PUSH
12144: LD_INT 4
12146: PUSH
12147: LD_INT 5
12149: PUSH
12150: LD_INT 6
12152: PUSH
12153: LD_INT 7
12155: PUSH
12156: LD_INT 8
12158: PUSH
12159: LD_INT 9
12161: PUSH
12162: LD_INT 10
12164: PUSH
12165: LD_INT 11
12167: PUSH
12168: LD_INT 12
12170: PUSH
12171: LD_INT 13
12173: PUSH
12174: LD_INT 14
12176: PUSH
12177: LD_INT 15
12179: PUSH
12180: LD_INT 16
12182: PUSH
12183: LD_INT 17
12185: PUSH
12186: LD_INT 18
12188: PUSH
12189: LD_INT 19
12191: PUSH
12192: LD_INT 20
12194: PUSH
12195: LD_INT 21
12197: PUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 23
12203: PUSH
12204: LD_INT 24
12206: PUSH
12207: LD_INT 25
12209: PUSH
12210: LD_INT 26
12212: PUSH
12213: LD_INT 27
12215: PUSH
12216: LD_INT 28
12218: PUSH
12219: LD_INT 29
12221: PUSH
12222: LD_INT 30
12224: PUSH
12225: LD_INT 31
12227: PUSH
12228: LD_INT 32
12230: PUSH
12231: LD_INT 33
12233: PUSH
12234: LD_INT 34
12236: PUSH
12237: LD_INT 35
12239: PUSH
12240: LD_INT 36
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 101
12283: PUSH
12284: LD_INT 102
12286: PUSH
12287: LD_INT 103
12289: PUSH
12290: LD_INT 104
12292: PUSH
12293: LD_INT 105
12295: PUSH
12296: LD_INT 106
12298: PUSH
12299: LD_INT 107
12301: PUSH
12302: LD_INT 108
12304: PUSH
12305: LD_INT 109
12307: PUSH
12308: LD_INT 110
12310: PUSH
12311: LD_INT 111
12313: PUSH
12314: LD_INT 112
12316: PUSH
12317: LD_INT 113
12319: PUSH
12320: LD_INT 114
12322: PUSH
12323: LD_INT 115
12325: PUSH
12326: LD_INT 116
12328: PUSH
12329: LD_INT 117
12331: PUSH
12332: LD_INT 118
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: ST_TO_ADDR
// if result then
12359: LD_VAR 0 2
12363: IFFALSE 13149
// begin normal :=  ;
12365: LD_ADDR_VAR 0 5
12369: PUSH
12370: LD_STRING 
12372: ST_TO_ADDR
// hardcore :=  ;
12373: LD_ADDR_VAR 0 6
12377: PUSH
12378: LD_STRING 
12380: ST_TO_ADDR
// active :=  ;
12381: LD_ADDR_VAR 0 7
12385: PUSH
12386: LD_STRING 
12388: ST_TO_ADDR
// for i = 1 to normalCounter do
12389: LD_ADDR_VAR 0 8
12393: PUSH
12394: DOUBLE
12395: LD_INT 1
12397: DEC
12398: ST_TO_ADDR
12399: LD_EXP 20
12403: PUSH
12404: FOR_TO
12405: IFFALSE 12506
// begin tmp := 0 ;
12407: LD_ADDR_VAR 0 3
12411: PUSH
12412: LD_STRING 0
12414: ST_TO_ADDR
// if result [ 1 ] then
12415: LD_VAR 0 2
12419: PUSH
12420: LD_INT 1
12422: ARRAY
12423: IFFALSE 12488
// if result [ 1 ] [ 1 ] = i then
12425: LD_VAR 0 2
12429: PUSH
12430: LD_INT 1
12432: ARRAY
12433: PUSH
12434: LD_INT 1
12436: ARRAY
12437: PUSH
12438: LD_VAR 0 8
12442: EQUAL
12443: IFFALSE 12488
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12445: LD_ADDR_VAR 0 2
12449: PUSH
12450: LD_VAR 0 2
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: LD_VAR 0 2
12462: PUSH
12463: LD_INT 1
12465: ARRAY
12466: PPUSH
12467: LD_INT 1
12469: PPUSH
12470: CALL_OW 3
12474: PPUSH
12475: CALL_OW 1
12479: ST_TO_ADDR
// tmp := 1 ;
12480: LD_ADDR_VAR 0 3
12484: PUSH
12485: LD_STRING 1
12487: ST_TO_ADDR
// end ; normal := normal & tmp ;
12488: LD_ADDR_VAR 0 5
12492: PUSH
12493: LD_VAR 0 5
12497: PUSH
12498: LD_VAR 0 3
12502: STR
12503: ST_TO_ADDR
// end ;
12504: GO 12404
12506: POP
12507: POP
// for i = 1 to hardcoreCounter do
12508: LD_ADDR_VAR 0 8
12512: PUSH
12513: DOUBLE
12514: LD_INT 1
12516: DEC
12517: ST_TO_ADDR
12518: LD_EXP 21
12522: PUSH
12523: FOR_TO
12524: IFFALSE 12629
// begin tmp := 0 ;
12526: LD_ADDR_VAR 0 3
12530: PUSH
12531: LD_STRING 0
12533: ST_TO_ADDR
// if result [ 2 ] then
12534: LD_VAR 0 2
12538: PUSH
12539: LD_INT 2
12541: ARRAY
12542: IFFALSE 12611
// if result [ 2 ] [ 1 ] = 100 + i then
12544: LD_VAR 0 2
12548: PUSH
12549: LD_INT 2
12551: ARRAY
12552: PUSH
12553: LD_INT 1
12555: ARRAY
12556: PUSH
12557: LD_INT 100
12559: PUSH
12560: LD_VAR 0 8
12564: PLUS
12565: EQUAL
12566: IFFALSE 12611
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12568: LD_ADDR_VAR 0 2
12572: PUSH
12573: LD_VAR 0 2
12577: PPUSH
12578: LD_INT 2
12580: PPUSH
12581: LD_VAR 0 2
12585: PUSH
12586: LD_INT 2
12588: ARRAY
12589: PPUSH
12590: LD_INT 1
12592: PPUSH
12593: CALL_OW 3
12597: PPUSH
12598: CALL_OW 1
12602: ST_TO_ADDR
// tmp := 1 ;
12603: LD_ADDR_VAR 0 3
12607: PUSH
12608: LD_STRING 1
12610: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12611: LD_ADDR_VAR 0 6
12615: PUSH
12616: LD_VAR 0 6
12620: PUSH
12621: LD_VAR 0 3
12625: STR
12626: ST_TO_ADDR
// end ;
12627: GO 12523
12629: POP
12630: POP
// if isGameLoad then
12631: LD_VAR 0 1
12635: IFFALSE 13110
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12637: LD_ADDR_VAR 0 4
12641: PUSH
12642: LD_EXP 24
12646: PUSH
12647: LD_EXP 23
12651: PUSH
12652: LD_EXP 25
12656: PUSH
12657: LD_EXP 22
12661: PUSH
12662: LD_EXP 26
12666: PUSH
12667: LD_EXP 27
12671: PUSH
12672: LD_EXP 28
12676: PUSH
12677: LD_EXP 29
12681: PUSH
12682: LD_EXP 30
12686: PUSH
12687: LD_EXP 31
12691: PUSH
12692: LD_EXP 32
12696: PUSH
12697: LD_EXP 33
12701: PUSH
12702: LD_EXP 34
12706: PUSH
12707: LD_EXP 35
12711: PUSH
12712: LD_EXP 43
12716: PUSH
12717: LD_EXP 44
12721: PUSH
12722: LD_EXP 45
12726: PUSH
12727: LD_EXP 46
12731: PUSH
12732: LD_EXP 48
12736: PUSH
12737: LD_EXP 49
12741: PUSH
12742: LD_EXP 50
12746: PUSH
12747: LD_EXP 53
12751: PUSH
12752: LD_EXP 55
12756: PUSH
12757: LD_EXP 56
12761: PUSH
12762: LD_EXP 57
12766: PUSH
12767: LD_EXP 59
12771: PUSH
12772: LD_EXP 60
12776: PUSH
12777: LD_EXP 63
12781: PUSH
12782: LD_EXP 64
12786: PUSH
12787: LD_EXP 65
12791: PUSH
12792: LD_EXP 66
12796: PUSH
12797: LD_EXP 67
12801: PUSH
12802: LD_EXP 68
12806: PUSH
12807: LD_EXP 69
12811: PUSH
12812: LD_EXP 70
12816: PUSH
12817: LD_EXP 71
12821: PUSH
12822: LD_EXP 36
12826: PUSH
12827: LD_EXP 37
12831: PUSH
12832: LD_EXP 40
12836: PUSH
12837: LD_EXP 41
12841: PUSH
12842: LD_EXP 42
12846: PUSH
12847: LD_EXP 38
12851: PUSH
12852: LD_EXP 39
12856: PUSH
12857: LD_EXP 47
12861: PUSH
12862: LD_EXP 51
12866: PUSH
12867: LD_EXP 52
12871: PUSH
12872: LD_EXP 54
12876: PUSH
12877: LD_EXP 58
12881: PUSH
12882: LD_EXP 61
12886: PUSH
12887: LD_EXP 62
12891: PUSH
12892: LD_EXP 72
12896: PUSH
12897: LD_EXP 73
12901: PUSH
12902: LD_EXP 74
12906: PUSH
12907: LD_EXP 75
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: ST_TO_ADDR
// tmp :=  ;
12968: LD_ADDR_VAR 0 3
12972: PUSH
12973: LD_STRING 
12975: ST_TO_ADDR
// for i = 1 to normalCounter do
12976: LD_ADDR_VAR 0 8
12980: PUSH
12981: DOUBLE
12982: LD_INT 1
12984: DEC
12985: ST_TO_ADDR
12986: LD_EXP 20
12990: PUSH
12991: FOR_TO
12992: IFFALSE 13028
// begin if flags [ i ] then
12994: LD_VAR 0 4
12998: PUSH
12999: LD_VAR 0 8
13003: ARRAY
13004: IFFALSE 13026
// tmp := tmp & i & ; ;
13006: LD_ADDR_VAR 0 3
13010: PUSH
13011: LD_VAR 0 3
13015: PUSH
13016: LD_VAR 0 8
13020: STR
13021: PUSH
13022: LD_STRING ;
13024: STR
13025: ST_TO_ADDR
// end ;
13026: GO 12991
13028: POP
13029: POP
// for i = 1 to hardcoreCounter do
13030: LD_ADDR_VAR 0 8
13034: PUSH
13035: DOUBLE
13036: LD_INT 1
13038: DEC
13039: ST_TO_ADDR
13040: LD_EXP 21
13044: PUSH
13045: FOR_TO
13046: IFFALSE 13092
// begin if flags [ normalCounter + i ] then
13048: LD_VAR 0 4
13052: PUSH
13053: LD_EXP 20
13057: PUSH
13058: LD_VAR 0 8
13062: PLUS
13063: ARRAY
13064: IFFALSE 13090
// tmp := tmp & ( 100 + i ) & ; ;
13066: LD_ADDR_VAR 0 3
13070: PUSH
13071: LD_VAR 0 3
13075: PUSH
13076: LD_INT 100
13078: PUSH
13079: LD_VAR 0 8
13083: PLUS
13084: STR
13085: PUSH
13086: LD_STRING ;
13088: STR
13089: ST_TO_ADDR
// end ;
13090: GO 13045
13092: POP
13093: POP
// if tmp then
13094: LD_VAR 0 3
13098: IFFALSE 13110
// active := tmp ;
13100: LD_ADDR_VAR 0 7
13104: PUSH
13105: LD_VAR 0 3
13109: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13110: LD_STRING getStreamItemsFromMission("
13112: PUSH
13113: LD_VAR 0 5
13117: STR
13118: PUSH
13119: LD_STRING ","
13121: STR
13122: PUSH
13123: LD_VAR 0 6
13127: STR
13128: PUSH
13129: LD_STRING ","
13131: STR
13132: PUSH
13133: LD_VAR 0 7
13137: STR
13138: PUSH
13139: LD_STRING ")
13141: STR
13142: PPUSH
13143: CALL_OW 559
// end else
13147: GO 13156
// ToLua ( getStreamItemsFromMission("","","") ) ;
13149: LD_STRING getStreamItemsFromMission("","","")
13151: PPUSH
13152: CALL_OW 559
// end ;
13156: LD_VAR 0 2
13160: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13161: LD_EXP 19
13165: IFFALSE 13173
13167: PUSH
13168: LD_EXP 24
13172: AND
13173: IFFALSE 13297
13175: GO 13177
13177: DISABLE
13178: LD_INT 0
13180: PPUSH
13181: PPUSH
// begin enable ;
13182: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13183: LD_ADDR_VAR 0 2
13187: PUSH
13188: LD_INT 22
13190: PUSH
13191: LD_OWVAR 2
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 2
13202: PUSH
13203: LD_INT 34
13205: PUSH
13206: LD_INT 7
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 34
13215: PUSH
13216: LD_INT 45
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 34
13225: PUSH
13226: LD_INT 28
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: LD_INT 34
13235: PUSH
13236: LD_INT 47
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 69
13258: ST_TO_ADDR
// if not tmp then
13259: LD_VAR 0 2
13263: NOT
13264: IFFALSE 13268
// exit ;
13266: GO 13297
// for i in tmp do
13268: LD_ADDR_VAR 0 1
13272: PUSH
13273: LD_VAR 0 2
13277: PUSH
13278: FOR_IN
13279: IFFALSE 13295
// begin SetLives ( i , 0 ) ;
13281: LD_VAR 0 1
13285: PPUSH
13286: LD_INT 0
13288: PPUSH
13289: CALL_OW 234
// end ;
13293: GO 13278
13295: POP
13296: POP
// end ;
13297: PPOPN 2
13299: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13300: LD_EXP 19
13304: IFFALSE 13312
13306: PUSH
13307: LD_EXP 25
13311: AND
13312: IFFALSE 13396
13314: GO 13316
13316: DISABLE
13317: LD_INT 0
13319: PPUSH
13320: PPUSH
// begin enable ;
13321: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13322: LD_ADDR_VAR 0 2
13326: PUSH
13327: LD_INT 22
13329: PUSH
13330: LD_OWVAR 2
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 32
13341: PUSH
13342: LD_INT 3
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PPUSH
13353: CALL_OW 69
13357: ST_TO_ADDR
// if not tmp then
13358: LD_VAR 0 2
13362: NOT
13363: IFFALSE 13367
// exit ;
13365: GO 13396
// for i in tmp do
13367: LD_ADDR_VAR 0 1
13371: PUSH
13372: LD_VAR 0 2
13376: PUSH
13377: FOR_IN
13378: IFFALSE 13394
// begin SetLives ( i , 0 ) ;
13380: LD_VAR 0 1
13384: PPUSH
13385: LD_INT 0
13387: PPUSH
13388: CALL_OW 234
// end ;
13392: GO 13377
13394: POP
13395: POP
// end ;
13396: PPOPN 2
13398: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13399: LD_EXP 19
13403: IFFALSE 13411
13405: PUSH
13406: LD_EXP 22
13410: AND
13411: IFFALSE 13504
13413: GO 13415
13415: DISABLE
13416: LD_INT 0
13418: PPUSH
// begin enable ;
13419: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13420: LD_ADDR_VAR 0 1
13424: PUSH
13425: LD_INT 22
13427: PUSH
13428: LD_OWVAR 2
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 2
13439: PUSH
13440: LD_INT 25
13442: PUSH
13443: LD_INT 5
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 25
13452: PUSH
13453: LD_INT 9
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 25
13462: PUSH
13463: LD_INT 8
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: PUSH
13485: FOR_IN
13486: IFFALSE 13502
// begin SetClass ( i , 1 ) ;
13488: LD_VAR 0 1
13492: PPUSH
13493: LD_INT 1
13495: PPUSH
13496: CALL_OW 336
// end ;
13500: GO 13485
13502: POP
13503: POP
// end ;
13504: PPOPN 1
13506: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13507: LD_EXP 19
13511: IFFALSE 13519
13513: PUSH
13514: LD_EXP 23
13518: AND
13519: IFFALSE 13531
13521: PUSH
13522: LD_OWVAR 65
13526: PUSH
13527: LD_INT 7
13529: LESS
13530: AND
13531: IFFALSE 13545
13533: GO 13535
13535: DISABLE
// begin enable ;
13536: ENABLE
// game_speed := 7 ;
13537: LD_ADDR_OWVAR 65
13541: PUSH
13542: LD_INT 7
13544: ST_TO_ADDR
// end ;
13545: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13546: LD_EXP 19
13550: IFFALSE 13558
13552: PUSH
13553: LD_EXP 26
13557: AND
13558: IFFALSE 13760
13560: GO 13562
13562: DISABLE
13563: LD_INT 0
13565: PPUSH
13566: PPUSH
13567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13568: LD_ADDR_VAR 0 3
13572: PUSH
13573: LD_INT 81
13575: PUSH
13576: LD_OWVAR 2
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 21
13587: PUSH
13588: LD_INT 1
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PPUSH
13599: CALL_OW 69
13603: ST_TO_ADDR
// if not tmp then
13604: LD_VAR 0 3
13608: NOT
13609: IFFALSE 13613
// exit ;
13611: GO 13760
// if tmp > 5 then
13613: LD_VAR 0 3
13617: PUSH
13618: LD_INT 5
13620: GREATER
13621: IFFALSE 13633
// k := 5 else
13623: LD_ADDR_VAR 0 2
13627: PUSH
13628: LD_INT 5
13630: ST_TO_ADDR
13631: GO 13643
// k := tmp ;
13633: LD_ADDR_VAR 0 2
13637: PUSH
13638: LD_VAR 0 3
13642: ST_TO_ADDR
// for i := 1 to k do
13643: LD_ADDR_VAR 0 1
13647: PUSH
13648: DOUBLE
13649: LD_INT 1
13651: DEC
13652: ST_TO_ADDR
13653: LD_VAR 0 2
13657: PUSH
13658: FOR_TO
13659: IFFALSE 13758
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13661: LD_VAR 0 3
13665: PUSH
13666: LD_VAR 0 1
13670: ARRAY
13671: PPUSH
13672: LD_VAR 0 1
13676: PUSH
13677: LD_INT 4
13679: MOD
13680: PUSH
13681: LD_INT 1
13683: PLUS
13684: PPUSH
13685: CALL_OW 259
13689: PUSH
13690: LD_INT 10
13692: LESS
13693: IFFALSE 13756
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13695: LD_VAR 0 3
13699: PUSH
13700: LD_VAR 0 1
13704: ARRAY
13705: PPUSH
13706: LD_VAR 0 1
13710: PUSH
13711: LD_INT 4
13713: MOD
13714: PUSH
13715: LD_INT 1
13717: PLUS
13718: PPUSH
13719: LD_VAR 0 3
13723: PUSH
13724: LD_VAR 0 1
13728: ARRAY
13729: PPUSH
13730: LD_VAR 0 1
13734: PUSH
13735: LD_INT 4
13737: MOD
13738: PUSH
13739: LD_INT 1
13741: PLUS
13742: PPUSH
13743: CALL_OW 259
13747: PUSH
13748: LD_INT 1
13750: PLUS
13751: PPUSH
13752: CALL_OW 237
13756: GO 13658
13758: POP
13759: POP
// end ;
13760: PPOPN 3
13762: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13763: LD_EXP 19
13767: IFFALSE 13775
13769: PUSH
13770: LD_EXP 27
13774: AND
13775: IFFALSE 13795
13777: GO 13779
13779: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13780: LD_INT 4
13782: PPUSH
13783: LD_OWVAR 2
13787: PPUSH
13788: LD_INT 0
13790: PPUSH
13791: CALL_OW 324
13795: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13796: LD_EXP 19
13800: IFFALSE 13808
13802: PUSH
13803: LD_EXP 56
13807: AND
13808: IFFALSE 13828
13810: GO 13812
13812: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13813: LD_INT 19
13815: PPUSH
13816: LD_OWVAR 2
13820: PPUSH
13821: LD_INT 0
13823: PPUSH
13824: CALL_OW 324
13828: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13829: LD_EXP 19
13833: IFFALSE 13841
13835: PUSH
13836: LD_EXP 28
13840: AND
13841: IFFALSE 13943
13843: GO 13845
13845: DISABLE
13846: LD_INT 0
13848: PPUSH
13849: PPUSH
// begin enable ;
13850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13851: LD_ADDR_VAR 0 2
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_OWVAR 2
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 2
13870: PUSH
13871: LD_INT 34
13873: PUSH
13874: LD_INT 11
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 34
13883: PUSH
13884: LD_INT 30
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 69
13904: ST_TO_ADDR
// if not tmp then
13905: LD_VAR 0 2
13909: NOT
13910: IFFALSE 13914
// exit ;
13912: GO 13943
// for i in tmp do
13914: LD_ADDR_VAR 0 1
13918: PUSH
13919: LD_VAR 0 2
13923: PUSH
13924: FOR_IN
13925: IFFALSE 13941
// begin SetLives ( i , 0 ) ;
13927: LD_VAR 0 1
13931: PPUSH
13932: LD_INT 0
13934: PPUSH
13935: CALL_OW 234
// end ;
13939: GO 13924
13941: POP
13942: POP
// end ;
13943: PPOPN 2
13945: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13946: LD_EXP 19
13950: IFFALSE 13958
13952: PUSH
13953: LD_EXP 29
13957: AND
13958: IFFALSE 13978
13960: GO 13962
13962: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13963: LD_INT 32
13965: PPUSH
13966: LD_OWVAR 2
13970: PPUSH
13971: LD_INT 0
13973: PPUSH
13974: CALL_OW 324
13978: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13979: LD_EXP 19
13983: IFFALSE 13991
13985: PUSH
13986: LD_EXP 30
13990: AND
13991: IFFALSE 14174
13993: GO 13995
13995: DISABLE
13996: LD_INT 0
13998: PPUSH
13999: PPUSH
14000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14001: LD_ADDR_VAR 0 2
14005: PUSH
14006: LD_INT 22
14008: PUSH
14009: LD_OWVAR 2
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 33
14020: PUSH
14021: LD_INT 3
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PPUSH
14032: CALL_OW 69
14036: ST_TO_ADDR
// if not tmp then
14037: LD_VAR 0 2
14041: NOT
14042: IFFALSE 14046
// exit ;
14044: GO 14174
// side := 0 ;
14046: LD_ADDR_VAR 0 3
14050: PUSH
14051: LD_INT 0
14053: ST_TO_ADDR
// for i := 1 to 8 do
14054: LD_ADDR_VAR 0 1
14058: PUSH
14059: DOUBLE
14060: LD_INT 1
14062: DEC
14063: ST_TO_ADDR
14064: LD_INT 8
14066: PUSH
14067: FOR_TO
14068: IFFALSE 14118
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14070: LD_OWVAR 2
14074: PUSH
14075: LD_VAR 0 1
14079: NONEQUAL
14080: IFFALSE 14102
14082: PUSH
14083: LD_OWVAR 2
14087: PPUSH
14088: LD_VAR 0 1
14092: PPUSH
14093: CALL_OW 81
14097: PUSH
14098: LD_INT 2
14100: EQUAL
14101: AND
14102: IFFALSE 14116
// begin side := i ;
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_VAR 0 1
14113: ST_TO_ADDR
// break ;
14114: GO 14118
// end ;
14116: GO 14067
14118: POP
14119: POP
// if not side then
14120: LD_VAR 0 3
14124: NOT
14125: IFFALSE 14129
// exit ;
14127: GO 14174
// for i := 1 to tmp do
14129: LD_ADDR_VAR 0 1
14133: PUSH
14134: DOUBLE
14135: LD_INT 1
14137: DEC
14138: ST_TO_ADDR
14139: LD_VAR 0 2
14143: PUSH
14144: FOR_TO
14145: IFFALSE 14172
// if Prob ( 60 ) then
14147: LD_INT 60
14149: PPUSH
14150: CALL_OW 13
14154: IFFALSE 14170
// SetSide ( i , side ) ;
14156: LD_VAR 0 1
14160: PPUSH
14161: LD_VAR 0 3
14165: PPUSH
14166: CALL_OW 235
14170: GO 14144
14172: POP
14173: POP
// end ;
14174: PPOPN 3
14176: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14177: LD_EXP 19
14181: IFFALSE 14189
14183: PUSH
14184: LD_EXP 32
14188: AND
14189: IFFALSE 14308
14191: GO 14193
14193: DISABLE
14194: LD_INT 0
14196: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14197: LD_ADDR_VAR 0 1
14201: PUSH
14202: LD_INT 22
14204: PUSH
14205: LD_OWVAR 2
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 3
14226: PUSH
14227: LD_INT 23
14229: PUSH
14230: LD_INT 0
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: PPUSH
14246: CALL_OW 69
14250: PUSH
14251: FOR_IN
14252: IFFALSE 14306
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14254: LD_VAR 0 1
14258: PPUSH
14259: CALL_OW 257
14263: PUSH
14264: LD_INT 1
14266: PUSH
14267: LD_INT 2
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 4
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: IN
14282: IFFALSE 14304
// SetClass ( un , rand ( 1 , 4 ) ) ;
14284: LD_VAR 0 1
14288: PPUSH
14289: LD_INT 1
14291: PPUSH
14292: LD_INT 4
14294: PPUSH
14295: CALL_OW 12
14299: PPUSH
14300: CALL_OW 336
14304: GO 14251
14306: POP
14307: POP
// end ;
14308: PPOPN 1
14310: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14311: LD_EXP 19
14315: IFFALSE 14323
14317: PUSH
14318: LD_EXP 31
14322: AND
14323: IFFALSE 14402
14325: GO 14327
14327: DISABLE
14328: LD_INT 0
14330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14331: LD_ADDR_VAR 0 1
14335: PUSH
14336: LD_INT 22
14338: PUSH
14339: LD_OWVAR 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 3
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: ST_TO_ADDR
// if not tmp then
14367: LD_VAR 0 1
14371: NOT
14372: IFFALSE 14376
// exit ;
14374: GO 14402
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14376: LD_VAR 0 1
14380: PUSH
14381: LD_INT 1
14383: PPUSH
14384: LD_VAR 0 1
14388: PPUSH
14389: CALL_OW 12
14393: ARRAY
14394: PPUSH
14395: LD_INT 100
14397: PPUSH
14398: CALL_OW 234
// end ;
14402: PPOPN 1
14404: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14405: LD_EXP 19
14409: IFFALSE 14417
14411: PUSH
14412: LD_EXP 33
14416: AND
14417: IFFALSE 14515
14419: GO 14421
14421: DISABLE
14422: LD_INT 0
14424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14425: LD_ADDR_VAR 0 1
14429: PUSH
14430: LD_INT 22
14432: PUSH
14433: LD_OWVAR 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 21
14444: PUSH
14445: LD_INT 1
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PPUSH
14456: CALL_OW 69
14460: ST_TO_ADDR
// if not tmp then
14461: LD_VAR 0 1
14465: NOT
14466: IFFALSE 14470
// exit ;
14468: GO 14515
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14470: LD_VAR 0 1
14474: PUSH
14475: LD_INT 1
14477: PPUSH
14478: LD_VAR 0 1
14482: PPUSH
14483: CALL_OW 12
14487: ARRAY
14488: PPUSH
14489: LD_INT 1
14491: PPUSH
14492: LD_INT 4
14494: PPUSH
14495: CALL_OW 12
14499: PPUSH
14500: LD_INT 3000
14502: PPUSH
14503: LD_INT 9000
14505: PPUSH
14506: CALL_OW 12
14510: PPUSH
14511: CALL_OW 492
// end ;
14515: PPOPN 1
14517: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14518: LD_EXP 19
14522: IFFALSE 14530
14524: PUSH
14525: LD_EXP 34
14529: AND
14530: IFFALSE 14550
14532: GO 14534
14534: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14535: LD_INT 1
14537: PPUSH
14538: LD_OWVAR 2
14542: PPUSH
14543: LD_INT 0
14545: PPUSH
14546: CALL_OW 324
14550: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14551: LD_EXP 19
14555: IFFALSE 14563
14557: PUSH
14558: LD_EXP 35
14562: AND
14563: IFFALSE 14646
14565: GO 14567
14567: DISABLE
14568: LD_INT 0
14570: PPUSH
14571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14572: LD_ADDR_VAR 0 2
14576: PUSH
14577: LD_INT 22
14579: PUSH
14580: LD_OWVAR 2
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 21
14591: PUSH
14592: LD_INT 3
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 69
14607: ST_TO_ADDR
// if not tmp then
14608: LD_VAR 0 2
14612: NOT
14613: IFFALSE 14617
// exit ;
14615: GO 14646
// for i in tmp do
14617: LD_ADDR_VAR 0 1
14621: PUSH
14622: LD_VAR 0 2
14626: PUSH
14627: FOR_IN
14628: IFFALSE 14644
// SetBLevel ( i , 10 ) ;
14630: LD_VAR 0 1
14634: PPUSH
14635: LD_INT 10
14637: PPUSH
14638: CALL_OW 241
14642: GO 14627
14644: POP
14645: POP
// end ;
14646: PPOPN 2
14648: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14649: LD_EXP 19
14653: IFFALSE 14661
14655: PUSH
14656: LD_EXP 36
14660: AND
14661: IFFALSE 14772
14663: GO 14665
14665: DISABLE
14666: LD_INT 0
14668: PPUSH
14669: PPUSH
14670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14671: LD_ADDR_VAR 0 3
14675: PUSH
14676: LD_INT 22
14678: PUSH
14679: LD_OWVAR 2
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 25
14690: PUSH
14691: LD_INT 1
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PPUSH
14702: CALL_OW 69
14706: ST_TO_ADDR
// if not tmp then
14707: LD_VAR 0 3
14711: NOT
14712: IFFALSE 14716
// exit ;
14714: GO 14772
// un := tmp [ rand ( 1 , tmp ) ] ;
14716: LD_ADDR_VAR 0 2
14720: PUSH
14721: LD_VAR 0 3
14725: PUSH
14726: LD_INT 1
14728: PPUSH
14729: LD_VAR 0 3
14733: PPUSH
14734: CALL_OW 12
14738: ARRAY
14739: ST_TO_ADDR
// if Crawls ( un ) then
14740: LD_VAR 0 2
14744: PPUSH
14745: CALL_OW 318
14749: IFFALSE 14760
// ComWalk ( un ) ;
14751: LD_VAR 0 2
14755: PPUSH
14756: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14760: LD_VAR 0 2
14764: PPUSH
14765: LD_INT 5
14767: PPUSH
14768: CALL_OW 336
// end ;
14772: PPOPN 3
14774: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14775: LD_EXP 19
14779: IFFALSE 14787
14781: PUSH
14782: LD_EXP 37
14786: AND
14787: IFFALSE 14799
14789: PUSH
14790: LD_OWVAR 67
14794: PUSH
14795: LD_INT 4
14797: LESS
14798: AND
14799: IFFALSE 14818
14801: GO 14803
14803: DISABLE
// begin Difficulty := Difficulty + 1 ;
14804: LD_ADDR_OWVAR 67
14808: PUSH
14809: LD_OWVAR 67
14813: PUSH
14814: LD_INT 1
14816: PLUS
14817: ST_TO_ADDR
// end ;
14818: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14819: LD_EXP 19
14823: IFFALSE 14831
14825: PUSH
14826: LD_EXP 38
14830: AND
14831: IFFALSE 14934
14833: GO 14835
14835: DISABLE
14836: LD_INT 0
14838: PPUSH
// begin for i := 1 to 5 do
14839: LD_ADDR_VAR 0 1
14843: PUSH
14844: DOUBLE
14845: LD_INT 1
14847: DEC
14848: ST_TO_ADDR
14849: LD_INT 5
14851: PUSH
14852: FOR_TO
14853: IFFALSE 14932
// begin uc_nation := nation_nature ;
14855: LD_ADDR_OWVAR 21
14859: PUSH
14860: LD_INT 0
14862: ST_TO_ADDR
// uc_side := 0 ;
14863: LD_ADDR_OWVAR 20
14867: PUSH
14868: LD_INT 0
14870: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14871: LD_ADDR_OWVAR 29
14875: PUSH
14876: LD_INT 12
14878: PUSH
14879: LD_INT 12
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: ST_TO_ADDR
// hc_agressivity := 20 ;
14886: LD_ADDR_OWVAR 35
14890: PUSH
14891: LD_INT 20
14893: ST_TO_ADDR
// hc_class := class_tiger ;
14894: LD_ADDR_OWVAR 28
14898: PUSH
14899: LD_INT 14
14901: ST_TO_ADDR
// hc_gallery :=  ;
14902: LD_ADDR_OWVAR 33
14906: PUSH
14907: LD_STRING 
14909: ST_TO_ADDR
// hc_name :=  ;
14910: LD_ADDR_OWVAR 26
14914: PUSH
14915: LD_STRING 
14917: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14918: CALL_OW 44
14922: PPUSH
14923: LD_INT 0
14925: PPUSH
14926: CALL_OW 51
// end ;
14930: GO 14852
14932: POP
14933: POP
// end ;
14934: PPOPN 1
14936: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14937: LD_EXP 19
14941: IFFALSE 14949
14943: PUSH
14944: LD_EXP 39
14948: AND
14949: IFFALSE 14958
14951: GO 14953
14953: DISABLE
// StreamSibBomb ;
14954: CALL 14959 0 0
14958: END
// export function StreamSibBomb ; var i , x , y ; begin
14959: LD_INT 0
14961: PPUSH
14962: PPUSH
14963: PPUSH
14964: PPUSH
// result := false ;
14965: LD_ADDR_VAR 0 1
14969: PUSH
14970: LD_INT 0
14972: ST_TO_ADDR
// for i := 1 to 16 do
14973: LD_ADDR_VAR 0 2
14977: PUSH
14978: DOUBLE
14979: LD_INT 1
14981: DEC
14982: ST_TO_ADDR
14983: LD_INT 16
14985: PUSH
14986: FOR_TO
14987: IFFALSE 15186
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14989: LD_ADDR_VAR 0 3
14993: PUSH
14994: LD_INT 10
14996: PUSH
14997: LD_INT 20
14999: PUSH
15000: LD_INT 30
15002: PUSH
15003: LD_INT 40
15005: PUSH
15006: LD_INT 50
15008: PUSH
15009: LD_INT 60
15011: PUSH
15012: LD_INT 70
15014: PUSH
15015: LD_INT 80
15017: PUSH
15018: LD_INT 90
15020: PUSH
15021: LD_INT 100
15023: PUSH
15024: LD_INT 110
15026: PUSH
15027: LD_INT 120
15029: PUSH
15030: LD_INT 130
15032: PUSH
15033: LD_INT 140
15035: PUSH
15036: LD_INT 150
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 1
15058: PPUSH
15059: LD_INT 15
15061: PPUSH
15062: CALL_OW 12
15066: ARRAY
15067: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15068: LD_ADDR_VAR 0 4
15072: PUSH
15073: LD_INT 10
15075: PUSH
15076: LD_INT 20
15078: PUSH
15079: LD_INT 30
15081: PUSH
15082: LD_INT 40
15084: PUSH
15085: LD_INT 50
15087: PUSH
15088: LD_INT 60
15090: PUSH
15091: LD_INT 70
15093: PUSH
15094: LD_INT 80
15096: PUSH
15097: LD_INT 90
15099: PUSH
15100: LD_INT 100
15102: PUSH
15103: LD_INT 110
15105: PUSH
15106: LD_INT 120
15108: PUSH
15109: LD_INT 130
15111: PUSH
15112: LD_INT 140
15114: PUSH
15115: LD_INT 150
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: PUSH
15135: LD_INT 1
15137: PPUSH
15138: LD_INT 15
15140: PPUSH
15141: CALL_OW 12
15145: ARRAY
15146: ST_TO_ADDR
// if ValidHex ( x , y ) then
15147: LD_VAR 0 3
15151: PPUSH
15152: LD_VAR 0 4
15156: PPUSH
15157: CALL_OW 488
15161: IFFALSE 15184
// begin result := [ x , y ] ;
15163: LD_ADDR_VAR 0 1
15167: PUSH
15168: LD_VAR 0 3
15172: PUSH
15173: LD_VAR 0 4
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: ST_TO_ADDR
// break ;
15182: GO 15186
// end ; end ;
15184: GO 14986
15186: POP
15187: POP
// if result then
15188: LD_VAR 0 1
15192: IFFALSE 15252
// begin ToLua ( playSibBomb() ) ;
15194: LD_STRING playSibBomb()
15196: PPUSH
15197: CALL_OW 559
// wait ( 0 0$14 ) ;
15201: LD_INT 490
15203: PPUSH
15204: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15208: LD_VAR 0 1
15212: PUSH
15213: LD_INT 1
15215: ARRAY
15216: PPUSH
15217: LD_VAR 0 1
15221: PUSH
15222: LD_INT 2
15224: ARRAY
15225: PPUSH
15226: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15230: LD_VAR 0 1
15234: PUSH
15235: LD_INT 1
15237: ARRAY
15238: PPUSH
15239: LD_VAR 0 1
15243: PUSH
15244: LD_INT 2
15246: ARRAY
15247: PPUSH
15248: CALL_OW 429
// end ; end ;
15252: LD_VAR 0 1
15256: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15257: LD_EXP 19
15261: IFFALSE 15269
15263: PUSH
15264: LD_EXP 41
15268: AND
15269: IFFALSE 15281
15271: GO 15273
15273: DISABLE
// YouLost (  ) ;
15274: LD_STRING 
15276: PPUSH
15277: CALL_OW 104
15281: END
// every 0 0$1 trigger StreamModeActive and sFog do
15282: LD_EXP 19
15286: IFFALSE 15294
15288: PUSH
15289: LD_EXP 40
15293: AND
15294: IFFALSE 15308
15296: GO 15298
15298: DISABLE
// FogOff ( your_side ) ;
15299: LD_OWVAR 2
15303: PPUSH
15304: CALL_OW 344
15308: END
// every 0 0$1 trigger StreamModeActive and sSun do
15309: LD_EXP 19
15313: IFFALSE 15321
15315: PUSH
15316: LD_EXP 42
15320: AND
15321: IFFALSE 15349
15323: GO 15325
15325: DISABLE
// begin solar_recharge_percent := 0 ;
15326: LD_ADDR_OWVAR 79
15330: PUSH
15331: LD_INT 0
15333: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15334: LD_INT 10500
15336: PPUSH
15337: CALL_OW 67
// solar_recharge_percent := 100 ;
15341: LD_ADDR_OWVAR 79
15345: PUSH
15346: LD_INT 100
15348: ST_TO_ADDR
// end ;
15349: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15350: LD_EXP 19
15354: IFFALSE 15362
15356: PUSH
15357: LD_EXP 43
15361: AND
15362: IFFALSE 15601
15364: GO 15366
15366: DISABLE
15367: LD_INT 0
15369: PPUSH
15370: PPUSH
15371: PPUSH
// begin tmp := [ ] ;
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: EMPTY
15378: ST_TO_ADDR
// for i := 1 to 6 do
15379: LD_ADDR_VAR 0 1
15383: PUSH
15384: DOUBLE
15385: LD_INT 1
15387: DEC
15388: ST_TO_ADDR
15389: LD_INT 6
15391: PUSH
15392: FOR_TO
15393: IFFALSE 15498
// begin uc_nation := nation_nature ;
15395: LD_ADDR_OWVAR 21
15399: PUSH
15400: LD_INT 0
15402: ST_TO_ADDR
// uc_side := 0 ;
15403: LD_ADDR_OWVAR 20
15407: PUSH
15408: LD_INT 0
15410: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15411: LD_ADDR_OWVAR 29
15415: PUSH
15416: LD_INT 12
15418: PUSH
15419: LD_INT 12
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: ST_TO_ADDR
// hc_agressivity := 20 ;
15426: LD_ADDR_OWVAR 35
15430: PUSH
15431: LD_INT 20
15433: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15434: LD_ADDR_OWVAR 28
15438: PUSH
15439: LD_INT 17
15441: ST_TO_ADDR
// hc_gallery :=  ;
15442: LD_ADDR_OWVAR 33
15446: PUSH
15447: LD_STRING 
15449: ST_TO_ADDR
// hc_name :=  ;
15450: LD_ADDR_OWVAR 26
15454: PUSH
15455: LD_STRING 
15457: ST_TO_ADDR
// un := CreateHuman ;
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: CALL_OW 44
15467: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15468: LD_VAR 0 2
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: CALL_OW 51
// tmp := tmp ^ un ;
15480: LD_ADDR_VAR 0 3
15484: PUSH
15485: LD_VAR 0 3
15489: PUSH
15490: LD_VAR 0 2
15494: ADD
15495: ST_TO_ADDR
// end ;
15496: GO 15392
15498: POP
15499: POP
// repeat wait ( 0 0$1 ) ;
15500: LD_INT 35
15502: PPUSH
15503: CALL_OW 67
// for un in tmp do
15507: LD_ADDR_VAR 0 2
15511: PUSH
15512: LD_VAR 0 3
15516: PUSH
15517: FOR_IN
15518: IFFALSE 15592
// begin if IsDead ( un ) then
15520: LD_VAR 0 2
15524: PPUSH
15525: CALL_OW 301
15529: IFFALSE 15549
// begin tmp := tmp diff un ;
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: LD_VAR 0 3
15540: PUSH
15541: LD_VAR 0 2
15545: DIFF
15546: ST_TO_ADDR
// continue ;
15547: GO 15517
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15549: LD_VAR 0 2
15553: PPUSH
15554: LD_INT 3
15556: PUSH
15557: LD_INT 22
15559: PUSH
15560: LD_INT 0
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PPUSH
15571: CALL_OW 69
15575: PPUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: CALL_OW 74
15585: PPUSH
15586: CALL_OW 115
// end ;
15590: GO 15517
15592: POP
15593: POP
// until not tmp ;
15594: LD_VAR 0 3
15598: NOT
15599: IFFALSE 15500
// end ;
15601: PPOPN 3
15603: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15604: LD_EXP 19
15608: IFFALSE 15616
15610: PUSH
15611: LD_EXP 44
15615: AND
15616: IFFALSE 15670
15618: GO 15620
15620: DISABLE
// begin ToLua ( displayTroll(); ) ;
15621: LD_STRING displayTroll();
15623: PPUSH
15624: CALL_OW 559
// wait ( 3 3$00 ) ;
15628: LD_INT 6300
15630: PPUSH
15631: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15635: LD_STRING hideTroll();
15637: PPUSH
15638: CALL_OW 559
// wait ( 1 1$00 ) ;
15642: LD_INT 2100
15644: PPUSH
15645: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15649: LD_STRING displayTroll();
15651: PPUSH
15652: CALL_OW 559
// wait ( 1 1$00 ) ;
15656: LD_INT 2100
15658: PPUSH
15659: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15663: LD_STRING hideTroll();
15665: PPUSH
15666: CALL_OW 559
// end ;
15670: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15671: LD_EXP 19
15675: IFFALSE 15683
15677: PUSH
15678: LD_EXP 45
15682: AND
15683: IFFALSE 15746
15685: GO 15687
15687: DISABLE
15688: LD_INT 0
15690: PPUSH
// begin p := 0 ;
15691: LD_ADDR_VAR 0 1
15695: PUSH
15696: LD_INT 0
15698: ST_TO_ADDR
// repeat game_speed := 1 ;
15699: LD_ADDR_OWVAR 65
15703: PUSH
15704: LD_INT 1
15706: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15707: LD_INT 35
15709: PPUSH
15710: CALL_OW 67
// p := p + 1 ;
15714: LD_ADDR_VAR 0 1
15718: PUSH
15719: LD_VAR 0 1
15723: PUSH
15724: LD_INT 1
15726: PLUS
15727: ST_TO_ADDR
// until p >= 60 ;
15728: LD_VAR 0 1
15732: PUSH
15733: LD_INT 60
15735: GREATEREQUAL
15736: IFFALSE 15699
// game_speed := 4 ;
15738: LD_ADDR_OWVAR 65
15742: PUSH
15743: LD_INT 4
15745: ST_TO_ADDR
// end ;
15746: PPOPN 1
15748: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15749: LD_EXP 19
15753: IFFALSE 15761
15755: PUSH
15756: LD_EXP 46
15760: AND
15761: IFFALSE 15907
15763: GO 15765
15765: DISABLE
15766: LD_INT 0
15768: PPUSH
15769: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15770: LD_ADDR_VAR 0 1
15774: PUSH
15775: LD_INT 22
15777: PUSH
15778: LD_OWVAR 2
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 2
15789: PUSH
15790: LD_INT 30
15792: PUSH
15793: LD_INT 0
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 30
15802: PUSH
15803: LD_INT 1
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PPUSH
15819: CALL_OW 69
15823: ST_TO_ADDR
// if not depot then
15824: LD_VAR 0 1
15828: NOT
15829: IFFALSE 15833
// exit ;
15831: GO 15907
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15833: LD_ADDR_VAR 0 2
15837: PUSH
15838: LD_VAR 0 1
15842: PUSH
15843: LD_INT 1
15845: PPUSH
15846: LD_VAR 0 1
15850: PPUSH
15851: CALL_OW 12
15855: ARRAY
15856: PPUSH
15857: CALL_OW 274
15861: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15862: LD_VAR 0 2
15866: PPUSH
15867: LD_INT 1
15869: PPUSH
15870: LD_INT 0
15872: PPUSH
15873: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15877: LD_VAR 0 2
15881: PPUSH
15882: LD_INT 2
15884: PPUSH
15885: LD_INT 0
15887: PPUSH
15888: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15892: LD_VAR 0 2
15896: PPUSH
15897: LD_INT 3
15899: PPUSH
15900: LD_INT 0
15902: PPUSH
15903: CALL_OW 277
// end ;
15907: PPOPN 2
15909: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15910: LD_EXP 19
15914: IFFALSE 15922
15916: PUSH
15917: LD_EXP 47
15921: AND
15922: IFFALSE 16019
15924: GO 15926
15926: DISABLE
15927: LD_INT 0
15929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15930: LD_ADDR_VAR 0 1
15934: PUSH
15935: LD_INT 22
15937: PUSH
15938: LD_OWVAR 2
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 21
15949: PUSH
15950: LD_INT 1
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 3
15959: PUSH
15960: LD_INT 23
15962: PUSH
15963: LD_INT 0
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 69
15983: ST_TO_ADDR
// if not tmp then
15984: LD_VAR 0 1
15988: NOT
15989: IFFALSE 15993
// exit ;
15991: GO 16019
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15993: LD_VAR 0 1
15997: PUSH
15998: LD_INT 1
16000: PPUSH
16001: LD_VAR 0 1
16005: PPUSH
16006: CALL_OW 12
16010: ARRAY
16011: PPUSH
16012: LD_INT 200
16014: PPUSH
16015: CALL_OW 234
// end ;
16019: PPOPN 1
16021: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16022: LD_EXP 19
16026: IFFALSE 16034
16028: PUSH
16029: LD_EXP 48
16033: AND
16034: IFFALSE 16113
16036: GO 16038
16038: DISABLE
16039: LD_INT 0
16041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16042: LD_ADDR_VAR 0 1
16046: PUSH
16047: LD_INT 22
16049: PUSH
16050: LD_OWVAR 2
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 21
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PPUSH
16073: CALL_OW 69
16077: ST_TO_ADDR
// if not tmp then
16078: LD_VAR 0 1
16082: NOT
16083: IFFALSE 16087
// exit ;
16085: GO 16113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16087: LD_VAR 0 1
16091: PUSH
16092: LD_INT 1
16094: PPUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 12
16104: ARRAY
16105: PPUSH
16106: LD_INT 60
16108: PPUSH
16109: CALL_OW 234
// end ;
16113: PPOPN 1
16115: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16116: LD_EXP 19
16120: IFFALSE 16128
16122: PUSH
16123: LD_EXP 49
16127: AND
16128: IFFALSE 16227
16130: GO 16132
16132: DISABLE
16133: LD_INT 0
16135: PPUSH
16136: PPUSH
// begin enable ;
16137: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16138: LD_ADDR_VAR 0 1
16142: PUSH
16143: LD_INT 22
16145: PUSH
16146: LD_OWVAR 2
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 61
16157: PUSH
16158: EMPTY
16159: LIST
16160: PUSH
16161: LD_INT 33
16163: PUSH
16164: LD_INT 2
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: LIST
16175: PPUSH
16176: CALL_OW 69
16180: ST_TO_ADDR
// if not tmp then
16181: LD_VAR 0 1
16185: NOT
16186: IFFALSE 16190
// exit ;
16188: GO 16227
// for i in tmp do
16190: LD_ADDR_VAR 0 2
16194: PUSH
16195: LD_VAR 0 1
16199: PUSH
16200: FOR_IN
16201: IFFALSE 16225
// if IsControledBy ( i ) then
16203: LD_VAR 0 2
16207: PPUSH
16208: CALL_OW 312
16212: IFFALSE 16223
// ComUnlink ( i ) ;
16214: LD_VAR 0 2
16218: PPUSH
16219: CALL_OW 136
16223: GO 16200
16225: POP
16226: POP
// end ;
16227: PPOPN 2
16229: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16230: LD_EXP 19
16234: IFFALSE 16242
16236: PUSH
16237: LD_EXP 50
16241: AND
16242: IFFALSE 16382
16244: GO 16246
16246: DISABLE
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
// begin ToLua ( displayPowell(); ) ;
16251: LD_STRING displayPowell();
16253: PPUSH
16254: CALL_OW 559
// uc_side := 0 ;
16258: LD_ADDR_OWVAR 20
16262: PUSH
16263: LD_INT 0
16265: ST_TO_ADDR
// uc_nation := 2 ;
16266: LD_ADDR_OWVAR 21
16270: PUSH
16271: LD_INT 2
16273: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16274: LD_ADDR_OWVAR 37
16278: PUSH
16279: LD_INT 14
16281: ST_TO_ADDR
// vc_engine := engine_siberite ;
16282: LD_ADDR_OWVAR 39
16286: PUSH
16287: LD_INT 3
16289: ST_TO_ADDR
// vc_control := control_apeman ;
16290: LD_ADDR_OWVAR 38
16294: PUSH
16295: LD_INT 5
16297: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16298: LD_ADDR_OWVAR 40
16302: PUSH
16303: LD_INT 29
16305: ST_TO_ADDR
// un := CreateVehicle ;
16306: LD_ADDR_VAR 0 2
16310: PUSH
16311: CALL_OW 45
16315: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16316: LD_VAR 0 2
16320: PPUSH
16321: LD_INT 1
16323: PPUSH
16324: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16328: LD_INT 35
16330: PPUSH
16331: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16335: LD_VAR 0 2
16339: PPUSH
16340: LD_INT 22
16342: PUSH
16343: LD_OWVAR 2
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PPUSH
16352: CALL_OW 69
16356: PPUSH
16357: LD_VAR 0 2
16361: PPUSH
16362: CALL_OW 74
16366: PPUSH
16367: CALL_OW 115
// until IsDead ( un ) ;
16371: LD_VAR 0 2
16375: PPUSH
16376: CALL_OW 301
16380: IFFALSE 16328
// end ;
16382: PPOPN 2
16384: END
// every 0 0$1 trigger StreamModeActive and sStu do
16385: LD_EXP 19
16389: IFFALSE 16397
16391: PUSH
16392: LD_EXP 58
16396: AND
16397: IFFALSE 16413
16399: GO 16401
16401: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16402: LD_STRING displayStucuk();
16404: PPUSH
16405: CALL_OW 559
// ResetFog ;
16409: CALL_OW 335
// end ;
16413: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16414: LD_EXP 19
16418: IFFALSE 16426
16420: PUSH
16421: LD_EXP 51
16425: AND
16426: IFFALSE 16567
16428: GO 16430
16430: DISABLE
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16435: LD_ADDR_VAR 0 2
16439: PUSH
16440: LD_INT 22
16442: PUSH
16443: LD_OWVAR 2
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 21
16454: PUSH
16455: LD_INT 1
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL_OW 69
16470: ST_TO_ADDR
// if not tmp then
16471: LD_VAR 0 2
16475: NOT
16476: IFFALSE 16480
// exit ;
16478: GO 16567
// un := tmp [ rand ( 1 , tmp ) ] ;
16480: LD_ADDR_VAR 0 1
16484: PUSH
16485: LD_VAR 0 2
16489: PUSH
16490: LD_INT 1
16492: PPUSH
16493: LD_VAR 0 2
16497: PPUSH
16498: CALL_OW 12
16502: ARRAY
16503: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16504: LD_VAR 0 1
16508: PPUSH
16509: LD_INT 0
16511: PPUSH
16512: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16516: LD_VAR 0 1
16520: PPUSH
16521: LD_OWVAR 3
16525: PUSH
16526: LD_VAR 0 1
16530: DIFF
16531: PPUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 74
16541: PPUSH
16542: CALL_OW 115
// wait ( 0 0$20 ) ;
16546: LD_INT 700
16548: PPUSH
16549: CALL_OW 67
// SetSide ( un , your_side ) ;
16553: LD_VAR 0 1
16557: PPUSH
16558: LD_OWVAR 2
16562: PPUSH
16563: CALL_OW 235
// end ;
16567: PPOPN 2
16569: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16570: LD_EXP 19
16574: IFFALSE 16582
16576: PUSH
16577: LD_EXP 52
16581: AND
16582: IFFALSE 16688
16584: GO 16586
16586: DISABLE
16587: LD_INT 0
16589: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16590: LD_ADDR_VAR 0 1
16594: PUSH
16595: LD_INT 22
16597: PUSH
16598: LD_OWVAR 2
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: LD_INT 30
16612: PUSH
16613: LD_INT 0
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 30
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PPUSH
16639: CALL_OW 69
16643: ST_TO_ADDR
// if not depot then
16644: LD_VAR 0 1
16648: NOT
16649: IFFALSE 16653
// exit ;
16651: GO 16688
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16653: LD_VAR 0 1
16657: PUSH
16658: LD_INT 1
16660: ARRAY
16661: PPUSH
16662: CALL_OW 250
16666: PPUSH
16667: LD_VAR 0 1
16671: PUSH
16672: LD_INT 1
16674: ARRAY
16675: PPUSH
16676: CALL_OW 251
16680: PPUSH
16681: LD_INT 70
16683: PPUSH
16684: CALL_OW 495
// end ;
16688: PPOPN 1
16690: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16691: LD_EXP 19
16695: IFFALSE 16703
16697: PUSH
16698: LD_EXP 53
16702: AND
16703: IFFALSE 16914
16705: GO 16707
16707: DISABLE
16708: LD_INT 0
16710: PPUSH
16711: PPUSH
16712: PPUSH
16713: PPUSH
16714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16715: LD_ADDR_VAR 0 5
16719: PUSH
16720: LD_INT 22
16722: PUSH
16723: LD_OWVAR 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 21
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PPUSH
16746: CALL_OW 69
16750: ST_TO_ADDR
// if not tmp then
16751: LD_VAR 0 5
16755: NOT
16756: IFFALSE 16760
// exit ;
16758: GO 16914
// for i in tmp do
16760: LD_ADDR_VAR 0 1
16764: PUSH
16765: LD_VAR 0 5
16769: PUSH
16770: FOR_IN
16771: IFFALSE 16912
// begin d := rand ( 0 , 5 ) ;
16773: LD_ADDR_VAR 0 4
16777: PUSH
16778: LD_INT 0
16780: PPUSH
16781: LD_INT 5
16783: PPUSH
16784: CALL_OW 12
16788: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16789: LD_ADDR_VAR 0 2
16793: PUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 250
16803: PPUSH
16804: LD_VAR 0 4
16808: PPUSH
16809: LD_INT 3
16811: PPUSH
16812: LD_INT 12
16814: PPUSH
16815: CALL_OW 12
16819: PPUSH
16820: CALL_OW 272
16824: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16825: LD_ADDR_VAR 0 3
16829: PUSH
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL_OW 251
16839: PPUSH
16840: LD_VAR 0 4
16844: PPUSH
16845: LD_INT 3
16847: PPUSH
16848: LD_INT 12
16850: PPUSH
16851: CALL_OW 12
16855: PPUSH
16856: CALL_OW 273
16860: ST_TO_ADDR
// if ValidHex ( x , y ) then
16861: LD_VAR 0 2
16865: PPUSH
16866: LD_VAR 0 3
16870: PPUSH
16871: CALL_OW 488
16875: IFFALSE 16910
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16877: LD_VAR 0 1
16881: PPUSH
16882: LD_VAR 0 2
16886: PPUSH
16887: LD_VAR 0 3
16891: PPUSH
16892: LD_INT 3
16894: PPUSH
16895: LD_INT 6
16897: PPUSH
16898: CALL_OW 12
16902: PPUSH
16903: LD_INT 1
16905: PPUSH
16906: CALL_OW 483
// end ;
16910: GO 16770
16912: POP
16913: POP
// end ;
16914: PPOPN 5
16916: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16917: LD_EXP 19
16921: IFFALSE 16929
16923: PUSH
16924: LD_EXP 54
16928: AND
16929: IFFALSE 17023
16931: GO 16933
16933: DISABLE
16934: LD_INT 0
16936: PPUSH
16937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16938: LD_ADDR_VAR 0 2
16942: PUSH
16943: LD_INT 22
16945: PUSH
16946: LD_OWVAR 2
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 32
16957: PUSH
16958: LD_INT 1
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 21
16967: PUSH
16968: LD_INT 2
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: LIST
16979: PPUSH
16980: CALL_OW 69
16984: ST_TO_ADDR
// if not tmp then
16985: LD_VAR 0 2
16989: NOT
16990: IFFALSE 16994
// exit ;
16992: GO 17023
// for i in tmp do
16994: LD_ADDR_VAR 0 1
16998: PUSH
16999: LD_VAR 0 2
17003: PUSH
17004: FOR_IN
17005: IFFALSE 17021
// SetFuel ( i , 0 ) ;
17007: LD_VAR 0 1
17011: PPUSH
17012: LD_INT 0
17014: PPUSH
17015: CALL_OW 240
17019: GO 17004
17021: POP
17022: POP
// end ;
17023: PPOPN 2
17025: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17026: LD_EXP 19
17030: IFFALSE 17038
17032: PUSH
17033: LD_EXP 55
17037: AND
17038: IFFALSE 17104
17040: GO 17042
17042: DISABLE
17043: LD_INT 0
17045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17046: LD_ADDR_VAR 0 1
17050: PUSH
17051: LD_INT 22
17053: PUSH
17054: LD_OWVAR 2
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 30
17065: PUSH
17066: LD_INT 29
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PPUSH
17077: CALL_OW 69
17081: ST_TO_ADDR
// if not tmp then
17082: LD_VAR 0 1
17086: NOT
17087: IFFALSE 17091
// exit ;
17089: GO 17104
// DestroyUnit ( tmp [ 1 ] ) ;
17091: LD_VAR 0 1
17095: PUSH
17096: LD_INT 1
17098: ARRAY
17099: PPUSH
17100: CALL_OW 65
// end ;
17104: PPOPN 1
17106: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17107: LD_EXP 19
17111: IFFALSE 17119
17113: PUSH
17114: LD_EXP 57
17118: AND
17119: IFFALSE 17248
17121: GO 17123
17123: DISABLE
17124: LD_INT 0
17126: PPUSH
// begin uc_side := 0 ;
17127: LD_ADDR_OWVAR 20
17131: PUSH
17132: LD_INT 0
17134: ST_TO_ADDR
// uc_nation := nation_arabian ;
17135: LD_ADDR_OWVAR 21
17139: PUSH
17140: LD_INT 2
17142: ST_TO_ADDR
// hc_gallery :=  ;
17143: LD_ADDR_OWVAR 33
17147: PUSH
17148: LD_STRING 
17150: ST_TO_ADDR
// hc_name :=  ;
17151: LD_ADDR_OWVAR 26
17155: PUSH
17156: LD_STRING 
17158: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17159: LD_INT 1
17161: PPUSH
17162: LD_INT 11
17164: PPUSH
17165: LD_INT 10
17167: PPUSH
17168: CALL_OW 380
// un := CreateHuman ;
17172: LD_ADDR_VAR 0 1
17176: PUSH
17177: CALL_OW 44
17181: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17182: LD_VAR 0 1
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17194: LD_INT 35
17196: PPUSH
17197: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17201: LD_VAR 0 1
17205: PPUSH
17206: LD_INT 22
17208: PUSH
17209: LD_OWVAR 2
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PPUSH
17218: CALL_OW 69
17222: PPUSH
17223: LD_VAR 0 1
17227: PPUSH
17228: CALL_OW 74
17232: PPUSH
17233: CALL_OW 115
// until IsDead ( un ) ;
17237: LD_VAR 0 1
17241: PPUSH
17242: CALL_OW 301
17246: IFFALSE 17194
// end ;
17248: PPOPN 1
17250: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17251: LD_EXP 19
17255: IFFALSE 17263
17257: PUSH
17258: LD_EXP 59
17262: AND
17263: IFFALSE 17275
17265: GO 17267
17267: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17268: LD_STRING earthquake(getX(game), 0, 32)
17270: PPUSH
17271: CALL_OW 559
17275: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17276: LD_EXP 19
17280: IFFALSE 17288
17282: PUSH
17283: LD_EXP 60
17287: AND
17288: IFFALSE 17379
17290: GO 17292
17292: DISABLE
17293: LD_INT 0
17295: PPUSH
// begin enable ;
17296: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17297: LD_ADDR_VAR 0 1
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: LD_OWVAR 2
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 21
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 33
17326: PUSH
17327: LD_INT 3
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: PPUSH
17339: CALL_OW 69
17343: ST_TO_ADDR
// if not tmp then
17344: LD_VAR 0 1
17348: NOT
17349: IFFALSE 17353
// exit ;
17351: GO 17379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17353: LD_VAR 0 1
17357: PUSH
17358: LD_INT 1
17360: PPUSH
17361: LD_VAR 0 1
17365: PPUSH
17366: CALL_OW 12
17370: ARRAY
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 234
// end ;
17379: PPOPN 1
17381: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17382: LD_EXP 19
17386: IFFALSE 17394
17388: PUSH
17389: LD_EXP 61
17393: AND
17394: IFFALSE 17535
17396: GO 17398
17398: DISABLE
17399: LD_INT 0
17401: PPUSH
17402: PPUSH
17403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17404: LD_ADDR_VAR 0 3
17408: PUSH
17409: LD_INT 22
17411: PUSH
17412: LD_OWVAR 2
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 25
17423: PUSH
17424: LD_INT 1
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PPUSH
17435: CALL_OW 69
17439: ST_TO_ADDR
// if not tmp then
17440: LD_VAR 0 3
17444: NOT
17445: IFFALSE 17449
// exit ;
17447: GO 17535
// un := tmp [ rand ( 1 , tmp ) ] ;
17449: LD_ADDR_VAR 0 2
17453: PUSH
17454: LD_VAR 0 3
17458: PUSH
17459: LD_INT 1
17461: PPUSH
17462: LD_VAR 0 3
17466: PPUSH
17467: CALL_OW 12
17471: ARRAY
17472: ST_TO_ADDR
// if Crawls ( un ) then
17473: LD_VAR 0 2
17477: PPUSH
17478: CALL_OW 318
17482: IFFALSE 17493
// ComWalk ( un ) ;
17484: LD_VAR 0 2
17488: PPUSH
17489: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17493: LD_VAR 0 2
17497: PPUSH
17498: LD_INT 9
17500: PPUSH
17501: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17505: LD_INT 28
17507: PPUSH
17508: LD_OWVAR 2
17512: PPUSH
17513: LD_INT 2
17515: PPUSH
17516: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17520: LD_INT 29
17522: PPUSH
17523: LD_OWVAR 2
17527: PPUSH
17528: LD_INT 2
17530: PPUSH
17531: CALL_OW 322
// end ;
17535: PPOPN 3
17537: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17538: LD_EXP 19
17542: IFFALSE 17550
17544: PUSH
17545: LD_EXP 62
17549: AND
17550: IFFALSE 17661
17552: GO 17554
17554: DISABLE
17555: LD_INT 0
17557: PPUSH
17558: PPUSH
17559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_INT 22
17567: PUSH
17568: LD_OWVAR 2
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 25
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PPUSH
17591: CALL_OW 69
17595: ST_TO_ADDR
// if not tmp then
17596: LD_VAR 0 3
17600: NOT
17601: IFFALSE 17605
// exit ;
17603: GO 17661
// un := tmp [ rand ( 1 , tmp ) ] ;
17605: LD_ADDR_VAR 0 2
17609: PUSH
17610: LD_VAR 0 3
17614: PUSH
17615: LD_INT 1
17617: PPUSH
17618: LD_VAR 0 3
17622: PPUSH
17623: CALL_OW 12
17627: ARRAY
17628: ST_TO_ADDR
// if Crawls ( un ) then
17629: LD_VAR 0 2
17633: PPUSH
17634: CALL_OW 318
17638: IFFALSE 17649
// ComWalk ( un ) ;
17640: LD_VAR 0 2
17644: PPUSH
17645: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17649: LD_VAR 0 2
17653: PPUSH
17654: LD_INT 8
17656: PPUSH
17657: CALL_OW 336
// end ;
17661: PPOPN 3
17663: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17664: LD_EXP 19
17668: IFFALSE 17676
17670: PUSH
17671: LD_EXP 63
17675: AND
17676: IFFALSE 17820
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17685: LD_ADDR_VAR 0 2
17689: PUSH
17690: LD_INT 22
17692: PUSH
17693: LD_OWVAR 2
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 21
17704: PUSH
17705: LD_INT 2
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 2
17714: PUSH
17715: LD_INT 34
17717: PUSH
17718: LD_INT 12
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 34
17727: PUSH
17728: LD_INT 51
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 34
17737: PUSH
17738: LD_INT 32
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: LIST
17755: PPUSH
17756: CALL_OW 69
17760: ST_TO_ADDR
// if not tmp then
17761: LD_VAR 0 2
17765: NOT
17766: IFFALSE 17770
// exit ;
17768: GO 17820
// for i in tmp do
17770: LD_ADDR_VAR 0 1
17774: PUSH
17775: LD_VAR 0 2
17779: PUSH
17780: FOR_IN
17781: IFFALSE 17818
// if GetCargo ( i , mat_artifact ) = 0 then
17783: LD_VAR 0 1
17787: PPUSH
17788: LD_INT 4
17790: PPUSH
17791: CALL_OW 289
17795: PUSH
17796: LD_INT 0
17798: EQUAL
17799: IFFALSE 17816
// SetCargo ( i , mat_siberit , 100 ) ;
17801: LD_VAR 0 1
17805: PPUSH
17806: LD_INT 3
17808: PPUSH
17809: LD_INT 100
17811: PPUSH
17812: CALL_OW 290
17816: GO 17780
17818: POP
17819: POP
// end ;
17820: PPOPN 2
17822: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17823: LD_EXP 19
17827: IFFALSE 17835
17829: PUSH
17830: LD_EXP 64
17834: AND
17835: IFFALSE 18018
17837: GO 17839
17839: DISABLE
17840: LD_INT 0
17842: PPUSH
17843: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17844: LD_ADDR_VAR 0 2
17848: PUSH
17849: LD_INT 22
17851: PUSH
17852: LD_OWVAR 2
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 69
17865: ST_TO_ADDR
// if not tmp then
17866: LD_VAR 0 2
17870: NOT
17871: IFFALSE 17875
// exit ;
17873: GO 18018
// for i := 1 to 2 do
17875: LD_ADDR_VAR 0 1
17879: PUSH
17880: DOUBLE
17881: LD_INT 1
17883: DEC
17884: ST_TO_ADDR
17885: LD_INT 2
17887: PUSH
17888: FOR_TO
17889: IFFALSE 18016
// begin uc_side := your_side ;
17891: LD_ADDR_OWVAR 20
17895: PUSH
17896: LD_OWVAR 2
17900: ST_TO_ADDR
// uc_nation := nation_american ;
17901: LD_ADDR_OWVAR 21
17905: PUSH
17906: LD_INT 1
17908: ST_TO_ADDR
// vc_chassis := us_morphling ;
17909: LD_ADDR_OWVAR 37
17913: PUSH
17914: LD_INT 5
17916: ST_TO_ADDR
// vc_engine := engine_siberite ;
17917: LD_ADDR_OWVAR 39
17921: PUSH
17922: LD_INT 3
17924: ST_TO_ADDR
// vc_control := control_computer ;
17925: LD_ADDR_OWVAR 38
17929: PUSH
17930: LD_INT 3
17932: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17933: LD_ADDR_OWVAR 40
17937: PUSH
17938: LD_INT 10
17940: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17941: LD_VAR 0 2
17945: PUSH
17946: LD_INT 1
17948: ARRAY
17949: PPUSH
17950: CALL_OW 310
17954: NOT
17955: IFFALSE 18002
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17957: CALL_OW 45
17961: PPUSH
17962: LD_VAR 0 2
17966: PUSH
17967: LD_INT 1
17969: ARRAY
17970: PPUSH
17971: CALL_OW 250
17975: PPUSH
17976: LD_VAR 0 2
17980: PUSH
17981: LD_INT 1
17983: ARRAY
17984: PPUSH
17985: CALL_OW 251
17989: PPUSH
17990: LD_INT 12
17992: PPUSH
17993: LD_INT 1
17995: PPUSH
17996: CALL_OW 50
18000: GO 18014
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18002: CALL_OW 45
18006: PPUSH
18007: LD_INT 1
18009: PPUSH
18010: CALL_OW 51
// end ;
18014: GO 17888
18016: POP
18017: POP
// end ;
18018: PPOPN 2
18020: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18021: LD_EXP 19
18025: IFFALSE 18033
18027: PUSH
18028: LD_EXP 65
18032: AND
18033: IFFALSE 18255
18035: GO 18037
18037: DISABLE
18038: LD_INT 0
18040: PPUSH
18041: PPUSH
18042: PPUSH
18043: PPUSH
18044: PPUSH
18045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18046: LD_ADDR_VAR 0 6
18050: PUSH
18051: LD_INT 22
18053: PUSH
18054: LD_OWVAR 2
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 21
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 3
18075: PUSH
18076: LD_INT 23
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: ST_TO_ADDR
// if not tmp then
18100: LD_VAR 0 6
18104: NOT
18105: IFFALSE 18109
// exit ;
18107: GO 18255
// s1 := rand ( 1 , 4 ) ;
18109: LD_ADDR_VAR 0 2
18113: PUSH
18114: LD_INT 1
18116: PPUSH
18117: LD_INT 4
18119: PPUSH
18120: CALL_OW 12
18124: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18125: LD_ADDR_VAR 0 4
18129: PUSH
18130: LD_VAR 0 6
18134: PUSH
18135: LD_INT 1
18137: ARRAY
18138: PPUSH
18139: LD_VAR 0 2
18143: PPUSH
18144: CALL_OW 259
18148: ST_TO_ADDR
// if s1 = 1 then
18149: LD_VAR 0 2
18153: PUSH
18154: LD_INT 1
18156: EQUAL
18157: IFFALSE 18177
// s2 := rand ( 2 , 4 ) else
18159: LD_ADDR_VAR 0 3
18163: PUSH
18164: LD_INT 2
18166: PPUSH
18167: LD_INT 4
18169: PPUSH
18170: CALL_OW 12
18174: ST_TO_ADDR
18175: GO 18185
// s2 := 1 ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_INT 1
18184: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18185: LD_ADDR_VAR 0 5
18189: PUSH
18190: LD_VAR 0 6
18194: PUSH
18195: LD_INT 1
18197: ARRAY
18198: PPUSH
18199: LD_VAR 0 3
18203: PPUSH
18204: CALL_OW 259
18208: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18209: LD_VAR 0 6
18213: PUSH
18214: LD_INT 1
18216: ARRAY
18217: PPUSH
18218: LD_VAR 0 2
18222: PPUSH
18223: LD_VAR 0 5
18227: PPUSH
18228: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18232: LD_VAR 0 6
18236: PUSH
18237: LD_INT 1
18239: ARRAY
18240: PPUSH
18241: LD_VAR 0 3
18245: PPUSH
18246: LD_VAR 0 4
18250: PPUSH
18251: CALL_OW 237
// end ;
18255: PPOPN 6
18257: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18258: LD_EXP 19
18262: IFFALSE 18270
18264: PUSH
18265: LD_EXP 66
18269: AND
18270: IFFALSE 18349
18272: GO 18274
18274: DISABLE
18275: LD_INT 0
18277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18278: LD_ADDR_VAR 0 1
18282: PUSH
18283: LD_INT 22
18285: PUSH
18286: LD_OWVAR 2
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 30
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PPUSH
18309: CALL_OW 69
18313: ST_TO_ADDR
// if not tmp then
18314: LD_VAR 0 1
18318: NOT
18319: IFFALSE 18323
// exit ;
18321: GO 18349
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18323: LD_VAR 0 1
18327: PUSH
18328: LD_INT 1
18330: PPUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 12
18340: ARRAY
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: CALL_OW 234
// end ;
18349: PPOPN 1
18351: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18352: LD_EXP 19
18356: IFFALSE 18364
18358: PUSH
18359: LD_EXP 67
18363: AND
18364: IFFALSE 18476
18366: GO 18368
18368: DISABLE
18369: LD_INT 0
18371: PPUSH
18372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18373: LD_ADDR_VAR 0 2
18377: PUSH
18378: LD_INT 22
18380: PUSH
18381: LD_OWVAR 2
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 2
18392: PUSH
18393: LD_INT 30
18395: PUSH
18396: LD_INT 27
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 30
18405: PUSH
18406: LD_INT 26
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 30
18415: PUSH
18416: LD_INT 28
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PPUSH
18433: CALL_OW 69
18437: ST_TO_ADDR
// if not tmp then
18438: LD_VAR 0 2
18442: NOT
18443: IFFALSE 18447
// exit ;
18445: GO 18476
// for i in tmp do
18447: LD_ADDR_VAR 0 1
18451: PUSH
18452: LD_VAR 0 2
18456: PUSH
18457: FOR_IN
18458: IFFALSE 18474
// SetLives ( i , 1 ) ;
18460: LD_VAR 0 1
18464: PPUSH
18465: LD_INT 1
18467: PPUSH
18468: CALL_OW 234
18472: GO 18457
18474: POP
18475: POP
// end ;
18476: PPOPN 2
18478: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18479: LD_EXP 19
18483: IFFALSE 18491
18485: PUSH
18486: LD_EXP 68
18490: AND
18491: IFFALSE 18778
18493: GO 18495
18495: DISABLE
18496: LD_INT 0
18498: PPUSH
18499: PPUSH
18500: PPUSH
// begin i := rand ( 1 , 7 ) ;
18501: LD_ADDR_VAR 0 1
18505: PUSH
18506: LD_INT 1
18508: PPUSH
18509: LD_INT 7
18511: PPUSH
18512: CALL_OW 12
18516: ST_TO_ADDR
// case i of 1 :
18517: LD_VAR 0 1
18521: PUSH
18522: LD_INT 1
18524: DOUBLE
18525: EQUAL
18526: IFTRUE 18530
18528: GO 18540
18530: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18531: LD_STRING earthquake(getX(game), 0, 32)
18533: PPUSH
18534: CALL_OW 559
18538: GO 18778
18540: LD_INT 2
18542: DOUBLE
18543: EQUAL
18544: IFTRUE 18548
18546: GO 18562
18548: POP
// begin ToLua ( displayStucuk(); ) ;
18549: LD_STRING displayStucuk();
18551: PPUSH
18552: CALL_OW 559
// ResetFog ;
18556: CALL_OW 335
// end ; 3 :
18560: GO 18778
18562: LD_INT 3
18564: DOUBLE
18565: EQUAL
18566: IFTRUE 18570
18568: GO 18674
18570: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18571: LD_ADDR_VAR 0 2
18575: PUSH
18576: LD_INT 22
18578: PUSH
18579: LD_OWVAR 2
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 25
18590: PUSH
18591: LD_INT 1
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PPUSH
18602: CALL_OW 69
18606: ST_TO_ADDR
// if not tmp then
18607: LD_VAR 0 2
18611: NOT
18612: IFFALSE 18616
// exit ;
18614: GO 18778
// un := tmp [ rand ( 1 , tmp ) ] ;
18616: LD_ADDR_VAR 0 3
18620: PUSH
18621: LD_VAR 0 2
18625: PUSH
18626: LD_INT 1
18628: PPUSH
18629: LD_VAR 0 2
18633: PPUSH
18634: CALL_OW 12
18638: ARRAY
18639: ST_TO_ADDR
// if Crawls ( un ) then
18640: LD_VAR 0 3
18644: PPUSH
18645: CALL_OW 318
18649: IFFALSE 18660
// ComWalk ( un ) ;
18651: LD_VAR 0 3
18655: PPUSH
18656: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18660: LD_VAR 0 3
18664: PPUSH
18665: LD_INT 8
18667: PPUSH
18668: CALL_OW 336
// end ; 4 :
18672: GO 18778
18674: LD_INT 4
18676: DOUBLE
18677: EQUAL
18678: IFTRUE 18682
18680: GO 18756
18682: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18683: LD_ADDR_VAR 0 2
18687: PUSH
18688: LD_INT 22
18690: PUSH
18691: LD_OWVAR 2
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 30
18702: PUSH
18703: LD_INT 29
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PPUSH
18714: CALL_OW 69
18718: ST_TO_ADDR
// if not tmp then
18719: LD_VAR 0 2
18723: NOT
18724: IFFALSE 18728
// exit ;
18726: GO 18778
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18728: LD_VAR 0 2
18732: PUSH
18733: LD_INT 1
18735: ARRAY
18736: PPUSH
18737: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18741: LD_VAR 0 2
18745: PUSH
18746: LD_INT 1
18748: ARRAY
18749: PPUSH
18750: CALL_OW 65
// end ; 5 .. 7 :
18754: GO 18778
18756: LD_INT 5
18758: DOUBLE
18759: GREATEREQUAL
18760: IFFALSE 18768
18762: LD_INT 7
18764: DOUBLE
18765: LESSEQUAL
18766: IFTRUE 18770
18768: GO 18777
18770: POP
// StreamSibBomb ; end ;
18771: CALL 14959 0 0
18775: GO 18778
18777: POP
// end ;
18778: PPOPN 3
18780: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18781: LD_EXP 19
18785: IFFALSE 18793
18787: PUSH
18788: LD_EXP 69
18792: AND
18793: IFFALSE 18949
18795: GO 18797
18797: DISABLE
18798: LD_INT 0
18800: PPUSH
18801: PPUSH
18802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18803: LD_ADDR_VAR 0 2
18807: PUSH
18808: LD_INT 81
18810: PUSH
18811: LD_OWVAR 2
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: LD_INT 21
18825: PUSH
18826: LD_INT 1
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 21
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: ST_TO_ADDR
// if not tmp then
18857: LD_VAR 0 2
18861: NOT
18862: IFFALSE 18866
// exit ;
18864: GO 18949
// p := 0 ;
18866: LD_ADDR_VAR 0 3
18870: PUSH
18871: LD_INT 0
18873: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18874: LD_INT 35
18876: PPUSH
18877: CALL_OW 67
// p := p + 1 ;
18881: LD_ADDR_VAR 0 3
18885: PUSH
18886: LD_VAR 0 3
18890: PUSH
18891: LD_INT 1
18893: PLUS
18894: ST_TO_ADDR
// for i in tmp do
18895: LD_ADDR_VAR 0 1
18899: PUSH
18900: LD_VAR 0 2
18904: PUSH
18905: FOR_IN
18906: IFFALSE 18937
// if GetLives ( i ) < 1000 then
18908: LD_VAR 0 1
18912: PPUSH
18913: CALL_OW 256
18917: PUSH
18918: LD_INT 1000
18920: LESS
18921: IFFALSE 18935
// SetLives ( i , 1000 ) ;
18923: LD_VAR 0 1
18927: PPUSH
18928: LD_INT 1000
18930: PPUSH
18931: CALL_OW 234
18935: GO 18905
18937: POP
18938: POP
// until p > 20 ;
18939: LD_VAR 0 3
18943: PUSH
18944: LD_INT 20
18946: GREATER
18947: IFFALSE 18874
// end ;
18949: PPOPN 3
18951: END
// every 0 0$1 trigger StreamModeActive and sTime do
18952: LD_EXP 19
18956: IFFALSE 18964
18958: PUSH
18959: LD_EXP 70
18963: AND
18964: IFFALSE 18999
18966: GO 18968
18968: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18969: LD_INT 28
18971: PPUSH
18972: LD_OWVAR 2
18976: PPUSH
18977: LD_INT 2
18979: PPUSH
18980: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18984: LD_INT 30
18986: PPUSH
18987: LD_OWVAR 2
18991: PPUSH
18992: LD_INT 2
18994: PPUSH
18995: CALL_OW 322
// end ;
18999: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19000: LD_EXP 19
19004: IFFALSE 19012
19006: PUSH
19007: LD_EXP 71
19011: AND
19012: IFFALSE 19133
19014: GO 19016
19016: DISABLE
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19021: LD_ADDR_VAR 0 2
19025: PUSH
19026: LD_INT 22
19028: PUSH
19029: LD_OWVAR 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 21
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 3
19050: PUSH
19051: LD_INT 23
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: LIST
19069: PPUSH
19070: CALL_OW 69
19074: ST_TO_ADDR
// if not tmp then
19075: LD_VAR 0 2
19079: NOT
19080: IFFALSE 19084
// exit ;
19082: GO 19133
// for i in tmp do
19084: LD_ADDR_VAR 0 1
19088: PUSH
19089: LD_VAR 0 2
19093: PUSH
19094: FOR_IN
19095: IFFALSE 19131
// begin if Crawls ( i ) then
19097: LD_VAR 0 1
19101: PPUSH
19102: CALL_OW 318
19106: IFFALSE 19117
// ComWalk ( i ) ;
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 138
// SetClass ( i , 2 ) ;
19117: LD_VAR 0 1
19121: PPUSH
19122: LD_INT 2
19124: PPUSH
19125: CALL_OW 336
// end ;
19129: GO 19094
19131: POP
19132: POP
// end ;
19133: PPOPN 2
19135: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19136: LD_EXP 19
19140: IFFALSE 19148
19142: PUSH
19143: LD_EXP 72
19147: AND
19148: IFFALSE 19438
19150: GO 19152
19152: DISABLE
19153: LD_INT 0
19155: PPUSH
19156: PPUSH
19157: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19158: LD_OWVAR 2
19162: PPUSH
19163: LD_INT 9
19165: PPUSH
19166: LD_INT 1
19168: PPUSH
19169: LD_INT 1
19171: PPUSH
19172: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19176: LD_INT 9
19178: PPUSH
19179: LD_OWVAR 2
19183: PPUSH
19184: CALL_OW 343
// uc_side := 9 ;
19188: LD_ADDR_OWVAR 20
19192: PUSH
19193: LD_INT 9
19195: ST_TO_ADDR
// uc_nation := 2 ;
19196: LD_ADDR_OWVAR 21
19200: PUSH
19201: LD_INT 2
19203: ST_TO_ADDR
// hc_name := Dark Warrior ;
19204: LD_ADDR_OWVAR 26
19208: PUSH
19209: LD_STRING Dark Warrior
19211: ST_TO_ADDR
// hc_gallery :=  ;
19212: LD_ADDR_OWVAR 33
19216: PUSH
19217: LD_STRING 
19219: ST_TO_ADDR
// hc_noskilllimit := true ;
19220: LD_ADDR_OWVAR 76
19224: PUSH
19225: LD_INT 1
19227: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19228: LD_ADDR_OWVAR 31
19232: PUSH
19233: LD_INT 30
19235: PUSH
19236: LD_INT 30
19238: PUSH
19239: LD_INT 30
19241: PUSH
19242: LD_INT 30
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: ST_TO_ADDR
// un := CreateHuman ;
19251: LD_ADDR_VAR 0 3
19255: PUSH
19256: CALL_OW 44
19260: ST_TO_ADDR
// hc_noskilllimit := false ;
19261: LD_ADDR_OWVAR 76
19265: PUSH
19266: LD_INT 0
19268: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19269: LD_VAR 0 3
19273: PPUSH
19274: LD_INT 1
19276: PPUSH
19277: CALL_OW 51
// ToLua ( playRanger() ) ;
19281: LD_STRING playRanger()
19283: PPUSH
19284: CALL_OW 559
// p := 0 ;
19288: LD_ADDR_VAR 0 2
19292: PUSH
19293: LD_INT 0
19295: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19296: LD_INT 35
19298: PPUSH
19299: CALL_OW 67
// p := p + 1 ;
19303: LD_ADDR_VAR 0 2
19307: PUSH
19308: LD_VAR 0 2
19312: PUSH
19313: LD_INT 1
19315: PLUS
19316: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19317: LD_VAR 0 3
19321: PPUSH
19322: CALL_OW 256
19326: PUSH
19327: LD_INT 1000
19329: LESS
19330: IFFALSE 19344
// SetLives ( un , 1000 ) ;
19332: LD_VAR 0 3
19336: PPUSH
19337: LD_INT 1000
19339: PPUSH
19340: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19344: LD_VAR 0 3
19348: PPUSH
19349: LD_INT 81
19351: PUSH
19352: LD_OWVAR 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 91
19363: PUSH
19364: LD_VAR 0 3
19368: PUSH
19369: LD_INT 30
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PPUSH
19381: CALL_OW 69
19385: PPUSH
19386: LD_VAR 0 3
19390: PPUSH
19391: CALL_OW 74
19395: PPUSH
19396: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19400: LD_VAR 0 2
19404: PUSH
19405: LD_INT 80
19407: GREATER
19408: IFTRUE 19421
19410: PUSH
19411: LD_VAR 0 3
19415: PPUSH
19416: CALL_OW 301
19420: OR
19421: IFFALSE 19296
// if un then
19423: LD_VAR 0 3
19427: IFFALSE 19438
// RemoveUnit ( un ) ;
19429: LD_VAR 0 3
19433: PPUSH
19434: CALL_OW 64
// end ;
19438: PPOPN 3
19440: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19441: LD_EXP 73
19445: IFFALSE 19561
19447: GO 19449
19449: DISABLE
19450: LD_INT 0
19452: PPUSH
19453: PPUSH
19454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19455: LD_ADDR_VAR 0 2
19459: PUSH
19460: LD_INT 81
19462: PUSH
19463: LD_OWVAR 2
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 21
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 69
19490: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19491: LD_STRING playComputer()
19493: PPUSH
19494: CALL_OW 559
// if not tmp then
19498: LD_VAR 0 2
19502: NOT
19503: IFFALSE 19507
// exit ;
19505: GO 19561
// for i in tmp do
19507: LD_ADDR_VAR 0 1
19511: PUSH
19512: LD_VAR 0 2
19516: PUSH
19517: FOR_IN
19518: IFFALSE 19559
// for j := 1 to 4 do
19520: LD_ADDR_VAR 0 3
19524: PUSH
19525: DOUBLE
19526: LD_INT 1
19528: DEC
19529: ST_TO_ADDR
19530: LD_INT 4
19532: PUSH
19533: FOR_TO
19534: IFFALSE 19555
// SetSkill ( i , j , 10 ) ;
19536: LD_VAR 0 1
19540: PPUSH
19541: LD_VAR 0 3
19545: PPUSH
19546: LD_INT 10
19548: PPUSH
19549: CALL_OW 237
19553: GO 19533
19555: POP
19556: POP
19557: GO 19517
19559: POP
19560: POP
// end ;
19561: PPOPN 3
19563: END
// every 0 0$1 trigger s30 do var i , tmp ;
19564: LD_EXP 74
19568: IFFALSE 19637
19570: GO 19572
19572: DISABLE
19573: LD_INT 0
19575: PPUSH
19576: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19577: LD_ADDR_VAR 0 2
19581: PUSH
19582: LD_INT 22
19584: PUSH
19585: LD_OWVAR 2
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PPUSH
19594: CALL_OW 69
19598: ST_TO_ADDR
// if not tmp then
19599: LD_VAR 0 2
19603: NOT
19604: IFFALSE 19608
// exit ;
19606: GO 19637
// for i in tmp do
19608: LD_ADDR_VAR 0 1
19612: PUSH
19613: LD_VAR 0 2
19617: PUSH
19618: FOR_IN
19619: IFFALSE 19635
// SetLives ( i , 300 ) ;
19621: LD_VAR 0 1
19625: PPUSH
19626: LD_INT 300
19628: PPUSH
19629: CALL_OW 234
19633: GO 19618
19635: POP
19636: POP
// end ;
19637: PPOPN 2
19639: END
// every 0 0$1 trigger s60 do var i , tmp ;
19640: LD_EXP 75
19644: IFFALSE 19713
19646: GO 19648
19648: DISABLE
19649: LD_INT 0
19651: PPUSH
19652: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_INT 22
19660: PUSH
19661: LD_OWVAR 2
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PPUSH
19670: CALL_OW 69
19674: ST_TO_ADDR
// if not tmp then
19675: LD_VAR 0 2
19679: NOT
19680: IFFALSE 19684
// exit ;
19682: GO 19713
// for i in tmp do
19684: LD_ADDR_VAR 0 1
19688: PUSH
19689: LD_VAR 0 2
19693: PUSH
19694: FOR_IN
19695: IFFALSE 19711
// SetLives ( i , 600 ) ;
19697: LD_VAR 0 1
19701: PPUSH
19702: LD_INT 600
19704: PPUSH
19705: CALL_OW 234
19709: GO 19694
19711: POP
19712: POP
// end ;
19713: PPOPN 2
19715: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19716: LD_INT 0
19718: PPUSH
// case cmd of 301 :
19719: LD_VAR 0 1
19723: PUSH
19724: LD_INT 301
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19764
19732: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19733: LD_VAR 0 6
19737: PPUSH
19738: LD_VAR 0 7
19742: PPUSH
19743: LD_VAR 0 8
19747: PPUSH
19748: LD_VAR 0 4
19752: PPUSH
19753: LD_VAR 0 5
19757: PPUSH
19758: CALL 20977 0 5
19762: GO 19885
19764: LD_INT 302
19766: DOUBLE
19767: EQUAL
19768: IFTRUE 19772
19770: GO 19809
19772: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19773: LD_VAR 0 6
19777: PPUSH
19778: LD_VAR 0 7
19782: PPUSH
19783: LD_VAR 0 8
19787: PPUSH
19788: LD_VAR 0 9
19792: PPUSH
19793: LD_VAR 0 4
19797: PPUSH
19798: LD_VAR 0 5
19802: PPUSH
19803: CALL 21068 0 6
19807: GO 19885
19809: LD_INT 303
19811: DOUBLE
19812: EQUAL
19813: IFTRUE 19817
19815: GO 19854
19817: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19818: LD_VAR 0 6
19822: PPUSH
19823: LD_VAR 0 7
19827: PPUSH
19828: LD_VAR 0 8
19832: PPUSH
19833: LD_VAR 0 9
19837: PPUSH
19838: LD_VAR 0 4
19842: PPUSH
19843: LD_VAR 0 5
19847: PPUSH
19848: CALL 19890 0 6
19852: GO 19885
19854: LD_INT 304
19856: DOUBLE
19857: EQUAL
19858: IFTRUE 19862
19860: GO 19884
19862: POP
// hHackTeleport ( unit , x , y ) ; end ;
19863: LD_VAR 0 2
19867: PPUSH
19868: LD_VAR 0 4
19872: PPUSH
19873: LD_VAR 0 5
19877: PPUSH
19878: CALL 21661 0 3
19882: GO 19885
19884: POP
// end ;
19885: LD_VAR 0 12
19889: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19890: LD_INT 0
19892: PPUSH
19893: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19894: LD_VAR 0 1
19898: PUSH
19899: LD_INT 1
19901: LESS
19902: IFTRUE 19914
19904: PUSH
19905: LD_VAR 0 1
19909: PUSH
19910: LD_INT 3
19912: GREATER
19913: OR
19914: IFTRUE 19932
19916: PUSH
19917: LD_VAR 0 5
19921: PPUSH
19922: LD_VAR 0 6
19926: PPUSH
19927: CALL_OW 428
19931: OR
19932: IFFALSE 19936
// exit ;
19934: GO 20664
// uc_side := your_side ;
19936: LD_ADDR_OWVAR 20
19940: PUSH
19941: LD_OWVAR 2
19945: ST_TO_ADDR
// uc_nation := nation ;
19946: LD_ADDR_OWVAR 21
19950: PUSH
19951: LD_VAR 0 1
19955: ST_TO_ADDR
// bc_level = 1 ;
19956: LD_ADDR_OWVAR 43
19960: PUSH
19961: LD_INT 1
19963: ST_TO_ADDR
// case btype of 1 :
19964: LD_VAR 0 2
19968: PUSH
19969: LD_INT 1
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 19988
19977: POP
// bc_type := b_depot ; 2 :
19978: LD_ADDR_OWVAR 42
19982: PUSH
19983: LD_INT 0
19985: ST_TO_ADDR
19986: GO 20608
19988: LD_INT 2
19990: DOUBLE
19991: EQUAL
19992: IFTRUE 19996
19994: GO 20007
19996: POP
// bc_type := b_warehouse ; 3 :
19997: LD_ADDR_OWVAR 42
20001: PUSH
20002: LD_INT 1
20004: ST_TO_ADDR
20005: GO 20608
20007: LD_INT 3
20009: DOUBLE
20010: EQUAL
20011: IFTRUE 20015
20013: GO 20026
20015: POP
// bc_type := b_lab ; 4 .. 9 :
20016: LD_ADDR_OWVAR 42
20020: PUSH
20021: LD_INT 6
20023: ST_TO_ADDR
20024: GO 20608
20026: LD_INT 4
20028: DOUBLE
20029: GREATEREQUAL
20030: IFFALSE 20038
20032: LD_INT 9
20034: DOUBLE
20035: LESSEQUAL
20036: IFTRUE 20040
20038: GO 20100
20040: POP
// begin bc_type := b_lab_half ;
20041: LD_ADDR_OWVAR 42
20045: PUSH
20046: LD_INT 7
20048: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20049: LD_ADDR_OWVAR 44
20053: PUSH
20054: LD_INT 10
20056: PUSH
20057: LD_INT 11
20059: PUSH
20060: LD_INT 12
20062: PUSH
20063: LD_INT 15
20065: PUSH
20066: LD_INT 14
20068: PUSH
20069: LD_INT 13
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: PUSH
20080: LD_VAR 0 2
20084: PUSH
20085: LD_INT 3
20087: MINUS
20088: ARRAY
20089: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20090: LD_ADDR_OWVAR 45
20094: PUSH
20095: LD_INT 9
20097: ST_TO_ADDR
// end ; 10 .. 13 :
20098: GO 20608
20100: LD_INT 10
20102: DOUBLE
20103: GREATEREQUAL
20104: IFFALSE 20112
20106: LD_INT 13
20108: DOUBLE
20109: LESSEQUAL
20110: IFTRUE 20114
20112: GO 20191
20114: POP
// begin bc_type := b_lab_full ;
20115: LD_ADDR_OWVAR 42
20119: PUSH
20120: LD_INT 8
20122: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20123: LD_ADDR_OWVAR 44
20127: PUSH
20128: LD_INT 10
20130: PUSH
20131: LD_INT 12
20133: PUSH
20134: LD_INT 14
20136: PUSH
20137: LD_INT 13
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: PUSH
20146: LD_VAR 0 2
20150: PUSH
20151: LD_INT 9
20153: MINUS
20154: ARRAY
20155: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20156: LD_ADDR_OWVAR 45
20160: PUSH
20161: LD_INT 11
20163: PUSH
20164: LD_INT 15
20166: PUSH
20167: LD_INT 12
20169: PUSH
20170: LD_INT 15
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: PUSH
20179: LD_VAR 0 2
20183: PUSH
20184: LD_INT 9
20186: MINUS
20187: ARRAY
20188: ST_TO_ADDR
// end ; 14 :
20189: GO 20608
20191: LD_INT 14
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20210
20199: POP
// bc_type := b_workshop ; 15 :
20200: LD_ADDR_OWVAR 42
20204: PUSH
20205: LD_INT 2
20207: ST_TO_ADDR
20208: GO 20608
20210: LD_INT 15
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20229
20218: POP
// bc_type := b_factory ; 16 :
20219: LD_ADDR_OWVAR 42
20223: PUSH
20224: LD_INT 3
20226: ST_TO_ADDR
20227: GO 20608
20229: LD_INT 16
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20248
20237: POP
// bc_type := b_ext_gun ; 17 :
20238: LD_ADDR_OWVAR 42
20242: PUSH
20243: LD_INT 17
20245: ST_TO_ADDR
20246: GO 20608
20248: LD_INT 17
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20284
20256: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20257: LD_ADDR_OWVAR 42
20261: PUSH
20262: LD_INT 19
20264: PUSH
20265: LD_INT 23
20267: PUSH
20268: LD_INT 19
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: PUSH
20276: LD_VAR 0 1
20280: ARRAY
20281: ST_TO_ADDR
20282: GO 20608
20284: LD_INT 18
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20303
20292: POP
// bc_type := b_ext_radar ; 19 :
20293: LD_ADDR_OWVAR 42
20297: PUSH
20298: LD_INT 20
20300: ST_TO_ADDR
20301: GO 20608
20303: LD_INT 19
20305: DOUBLE
20306: EQUAL
20307: IFTRUE 20311
20309: GO 20322
20311: POP
// bc_type := b_ext_radio ; 20 :
20312: LD_ADDR_OWVAR 42
20316: PUSH
20317: LD_INT 22
20319: ST_TO_ADDR
20320: GO 20608
20322: LD_INT 20
20324: DOUBLE
20325: EQUAL
20326: IFTRUE 20330
20328: GO 20341
20330: POP
// bc_type := b_ext_siberium ; 21 :
20331: LD_ADDR_OWVAR 42
20335: PUSH
20336: LD_INT 21
20338: ST_TO_ADDR
20339: GO 20608
20341: LD_INT 21
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20360
20349: POP
// bc_type := b_ext_computer ; 22 :
20350: LD_ADDR_OWVAR 42
20354: PUSH
20355: LD_INT 24
20357: ST_TO_ADDR
20358: GO 20608
20360: LD_INT 22
20362: DOUBLE
20363: EQUAL
20364: IFTRUE 20368
20366: GO 20379
20368: POP
// bc_type := b_ext_track ; 23 :
20369: LD_ADDR_OWVAR 42
20373: PUSH
20374: LD_INT 16
20376: ST_TO_ADDR
20377: GO 20608
20379: LD_INT 23
20381: DOUBLE
20382: EQUAL
20383: IFTRUE 20387
20385: GO 20398
20387: POP
// bc_type := b_ext_laser ; 24 :
20388: LD_ADDR_OWVAR 42
20392: PUSH
20393: LD_INT 25
20395: ST_TO_ADDR
20396: GO 20608
20398: LD_INT 24
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20417
20406: POP
// bc_type := b_control_tower ; 25 :
20407: LD_ADDR_OWVAR 42
20411: PUSH
20412: LD_INT 36
20414: ST_TO_ADDR
20415: GO 20608
20417: LD_INT 25
20419: DOUBLE
20420: EQUAL
20421: IFTRUE 20425
20423: GO 20436
20425: POP
// bc_type := b_breastwork ; 26 :
20426: LD_ADDR_OWVAR 42
20430: PUSH
20431: LD_INT 31
20433: ST_TO_ADDR
20434: GO 20608
20436: LD_INT 26
20438: DOUBLE
20439: EQUAL
20440: IFTRUE 20444
20442: GO 20455
20444: POP
// bc_type := b_bunker ; 27 :
20445: LD_ADDR_OWVAR 42
20449: PUSH
20450: LD_INT 32
20452: ST_TO_ADDR
20453: GO 20608
20455: LD_INT 27
20457: DOUBLE
20458: EQUAL
20459: IFTRUE 20463
20461: GO 20474
20463: POP
// bc_type := b_turret ; 28 :
20464: LD_ADDR_OWVAR 42
20468: PUSH
20469: LD_INT 33
20471: ST_TO_ADDR
20472: GO 20608
20474: LD_INT 28
20476: DOUBLE
20477: EQUAL
20478: IFTRUE 20482
20480: GO 20493
20482: POP
// bc_type := b_armoury ; 29 :
20483: LD_ADDR_OWVAR 42
20487: PUSH
20488: LD_INT 4
20490: ST_TO_ADDR
20491: GO 20608
20493: LD_INT 29
20495: DOUBLE
20496: EQUAL
20497: IFTRUE 20501
20499: GO 20512
20501: POP
// bc_type := b_barracks ; 30 :
20502: LD_ADDR_OWVAR 42
20506: PUSH
20507: LD_INT 5
20509: ST_TO_ADDR
20510: GO 20608
20512: LD_INT 30
20514: DOUBLE
20515: EQUAL
20516: IFTRUE 20520
20518: GO 20531
20520: POP
// bc_type := b_solar_power ; 31 :
20521: LD_ADDR_OWVAR 42
20525: PUSH
20526: LD_INT 27
20528: ST_TO_ADDR
20529: GO 20608
20531: LD_INT 31
20533: DOUBLE
20534: EQUAL
20535: IFTRUE 20539
20537: GO 20550
20539: POP
// bc_type := b_oil_power ; 32 :
20540: LD_ADDR_OWVAR 42
20544: PUSH
20545: LD_INT 26
20547: ST_TO_ADDR
20548: GO 20608
20550: LD_INT 32
20552: DOUBLE
20553: EQUAL
20554: IFTRUE 20558
20556: GO 20569
20558: POP
// bc_type := b_siberite_power ; 33 :
20559: LD_ADDR_OWVAR 42
20563: PUSH
20564: LD_INT 28
20566: ST_TO_ADDR
20567: GO 20608
20569: LD_INT 33
20571: DOUBLE
20572: EQUAL
20573: IFTRUE 20577
20575: GO 20588
20577: POP
// bc_type := b_oil_mine ; 34 :
20578: LD_ADDR_OWVAR 42
20582: PUSH
20583: LD_INT 29
20585: ST_TO_ADDR
20586: GO 20608
20588: LD_INT 34
20590: DOUBLE
20591: EQUAL
20592: IFTRUE 20596
20594: GO 20607
20596: POP
// bc_type := b_siberite_mine ; end ;
20597: LD_ADDR_OWVAR 42
20601: PUSH
20602: LD_INT 30
20604: ST_TO_ADDR
20605: GO 20608
20607: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20608: LD_ADDR_VAR 0 8
20612: PUSH
20613: LD_VAR 0 5
20617: PPUSH
20618: LD_VAR 0 6
20622: PPUSH
20623: LD_VAR 0 3
20627: PPUSH
20628: CALL_OW 47
20632: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20633: LD_OWVAR 42
20637: PUSH
20638: LD_INT 32
20640: PUSH
20641: LD_INT 33
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: IN
20648: IFFALSE 20664
// PlaceWeaponTurret ( b , weapon ) ;
20650: LD_VAR 0 8
20654: PPUSH
20655: LD_VAR 0 4
20659: PPUSH
20660: CALL_OW 431
// end ;
20664: LD_VAR 0 7
20668: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20669: LD_INT 0
20671: PPUSH
20672: PPUSH
20673: PPUSH
20674: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20675: LD_ADDR_VAR 0 4
20679: PUSH
20680: LD_INT 22
20682: PUSH
20683: LD_OWVAR 2
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: LD_INT 30
20697: PUSH
20698: LD_INT 0
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 30
20707: PUSH
20708: LD_INT 1
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PPUSH
20724: CALL_OW 69
20728: ST_TO_ADDR
// if not tmp then
20729: LD_VAR 0 4
20733: NOT
20734: IFFALSE 20738
// exit ;
20736: GO 20797
// for i in tmp do
20738: LD_ADDR_VAR 0 2
20742: PUSH
20743: LD_VAR 0 4
20747: PUSH
20748: FOR_IN
20749: IFFALSE 20795
// for j = 1 to 3 do
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: DOUBLE
20757: LD_INT 1
20759: DEC
20760: ST_TO_ADDR
20761: LD_INT 3
20763: PUSH
20764: FOR_TO
20765: IFFALSE 20791
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20767: LD_VAR 0 2
20771: PPUSH
20772: CALL_OW 274
20776: PPUSH
20777: LD_VAR 0 3
20781: PPUSH
20782: LD_INT 99999
20784: PPUSH
20785: CALL_OW 277
20789: GO 20764
20791: POP
20792: POP
20793: GO 20748
20795: POP
20796: POP
// end ;
20797: LD_VAR 0 1
20801: RET
// export function hHackSetLevel10 ; var i , j ; begin
20802: LD_INT 0
20804: PPUSH
20805: PPUSH
20806: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20807: LD_ADDR_VAR 0 2
20811: PUSH
20812: LD_INT 21
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PPUSH
20822: CALL_OW 69
20826: PUSH
20827: FOR_IN
20828: IFFALSE 20880
// if IsSelected ( i ) then
20830: LD_VAR 0 2
20834: PPUSH
20835: CALL_OW 306
20839: IFFALSE 20878
// begin for j := 1 to 4 do
20841: LD_ADDR_VAR 0 3
20845: PUSH
20846: DOUBLE
20847: LD_INT 1
20849: DEC
20850: ST_TO_ADDR
20851: LD_INT 4
20853: PUSH
20854: FOR_TO
20855: IFFALSE 20876
// SetSkill ( i , j , 10 ) ;
20857: LD_VAR 0 2
20861: PPUSH
20862: LD_VAR 0 3
20866: PPUSH
20867: LD_INT 10
20869: PPUSH
20870: CALL_OW 237
20874: GO 20854
20876: POP
20877: POP
// end ;
20878: GO 20827
20880: POP
20881: POP
// end ;
20882: LD_VAR 0 1
20886: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20887: LD_INT 0
20889: PPUSH
20890: PPUSH
20891: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20892: LD_ADDR_VAR 0 2
20896: PUSH
20897: LD_INT 22
20899: PUSH
20900: LD_OWVAR 2
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 21
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PPUSH
20923: CALL_OW 69
20927: PUSH
20928: FOR_IN
20929: IFFALSE 20970
// begin for j := 1 to 4 do
20931: LD_ADDR_VAR 0 3
20935: PUSH
20936: DOUBLE
20937: LD_INT 1
20939: DEC
20940: ST_TO_ADDR
20941: LD_INT 4
20943: PUSH
20944: FOR_TO
20945: IFFALSE 20966
// SetSkill ( i , j , 10 ) ;
20947: LD_VAR 0 2
20951: PPUSH
20952: LD_VAR 0 3
20956: PPUSH
20957: LD_INT 10
20959: PPUSH
20960: CALL_OW 237
20964: GO 20944
20966: POP
20967: POP
// end ;
20968: GO 20928
20970: POP
20971: POP
// end ;
20972: LD_VAR 0 1
20976: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20977: LD_INT 0
20979: PPUSH
// uc_side := your_side ;
20980: LD_ADDR_OWVAR 20
20984: PUSH
20985: LD_OWVAR 2
20989: ST_TO_ADDR
// uc_nation := nation ;
20990: LD_ADDR_OWVAR 21
20994: PUSH
20995: LD_VAR 0 1
20999: ST_TO_ADDR
// InitHc ;
21000: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21004: LD_INT 0
21006: PPUSH
21007: LD_VAR 0 2
21011: PPUSH
21012: LD_VAR 0 3
21016: PPUSH
21017: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21021: LD_VAR 0 4
21025: PPUSH
21026: LD_VAR 0 5
21030: PPUSH
21031: CALL_OW 428
21035: PUSH
21036: LD_INT 0
21038: EQUAL
21039: IFFALSE 21063
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21041: CALL_OW 44
21045: PPUSH
21046: LD_VAR 0 4
21050: PPUSH
21051: LD_VAR 0 5
21055: PPUSH
21056: LD_INT 1
21058: PPUSH
21059: CALL_OW 48
// end ;
21063: LD_VAR 0 6
21067: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21068: LD_INT 0
21070: PPUSH
21071: PPUSH
// uc_side := your_side ;
21072: LD_ADDR_OWVAR 20
21076: PUSH
21077: LD_OWVAR 2
21081: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21082: LD_VAR 0 1
21086: PUSH
21087: LD_INT 1
21089: PUSH
21090: LD_INT 2
21092: PUSH
21093: LD_INT 3
21095: PUSH
21096: LD_INT 4
21098: PUSH
21099: LD_INT 5
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: IN
21109: IFFALSE 21121
// uc_nation := nation_american else
21111: LD_ADDR_OWVAR 21
21115: PUSH
21116: LD_INT 1
21118: ST_TO_ADDR
21119: GO 21164
// if chassis in [ 11 , 12 , 13 , 14 ] then
21121: LD_VAR 0 1
21125: PUSH
21126: LD_INT 11
21128: PUSH
21129: LD_INT 12
21131: PUSH
21132: LD_INT 13
21134: PUSH
21135: LD_INT 14
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: IN
21144: IFFALSE 21156
// uc_nation := nation_arabian else
21146: LD_ADDR_OWVAR 21
21150: PUSH
21151: LD_INT 2
21153: ST_TO_ADDR
21154: GO 21164
// uc_nation := nation_russian ;
21156: LD_ADDR_OWVAR 21
21160: PUSH
21161: LD_INT 3
21163: ST_TO_ADDR
// vc_chassis := chassis ;
21164: LD_ADDR_OWVAR 37
21168: PUSH
21169: LD_VAR 0 1
21173: ST_TO_ADDR
// vc_engine := engine ;
21174: LD_ADDR_OWVAR 39
21178: PUSH
21179: LD_VAR 0 2
21183: ST_TO_ADDR
// vc_control := control ;
21184: LD_ADDR_OWVAR 38
21188: PUSH
21189: LD_VAR 0 3
21193: ST_TO_ADDR
// vc_weapon := weapon ;
21194: LD_ADDR_OWVAR 40
21198: PUSH
21199: LD_VAR 0 4
21203: ST_TO_ADDR
// un := CreateVehicle ;
21204: LD_ADDR_VAR 0 8
21208: PUSH
21209: CALL_OW 45
21213: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21214: LD_VAR 0 8
21218: PPUSH
21219: LD_INT 0
21221: PPUSH
21222: LD_INT 5
21224: PPUSH
21225: CALL_OW 12
21229: PPUSH
21230: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21234: LD_VAR 0 8
21238: PPUSH
21239: LD_VAR 0 5
21243: PPUSH
21244: LD_VAR 0 6
21248: PPUSH
21249: LD_INT 1
21251: PPUSH
21252: CALL_OW 48
// end ;
21256: LD_VAR 0 7
21260: RET
// export hInvincible ; every 1 do
21261: GO 21263
21263: DISABLE
// hInvincible := [ ] ;
21264: LD_ADDR_EXP 76
21268: PUSH
21269: EMPTY
21270: ST_TO_ADDR
21271: END
// every 10 do var i ;
21272: GO 21274
21274: DISABLE
21275: LD_INT 0
21277: PPUSH
// begin enable ;
21278: ENABLE
// if not hInvincible then
21279: LD_EXP 76
21283: NOT
21284: IFFALSE 21288
// exit ;
21286: GO 21332
// for i in hInvincible do
21288: LD_ADDR_VAR 0 1
21292: PUSH
21293: LD_EXP 76
21297: PUSH
21298: FOR_IN
21299: IFFALSE 21330
// if GetLives ( i ) < 1000 then
21301: LD_VAR 0 1
21305: PPUSH
21306: CALL_OW 256
21310: PUSH
21311: LD_INT 1000
21313: LESS
21314: IFFALSE 21328
// SetLives ( i , 1000 ) ;
21316: LD_VAR 0 1
21320: PPUSH
21321: LD_INT 1000
21323: PPUSH
21324: CALL_OW 234
21328: GO 21298
21330: POP
21331: POP
// end ;
21332: PPOPN 1
21334: END
// export function hHackInvincible ; var i ; begin
21335: LD_INT 0
21337: PPUSH
21338: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21339: LD_ADDR_VAR 0 2
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 21
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 21
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: PPUSH
21372: CALL_OW 69
21376: PUSH
21377: FOR_IN
21378: IFFALSE 21439
// if IsSelected ( i ) then
21380: LD_VAR 0 2
21384: PPUSH
21385: CALL_OW 306
21389: IFFALSE 21437
// begin if i in hInvincible then
21391: LD_VAR 0 2
21395: PUSH
21396: LD_EXP 76
21400: IN
21401: IFFALSE 21421
// hInvincible := hInvincible diff i else
21403: LD_ADDR_EXP 76
21407: PUSH
21408: LD_EXP 76
21412: PUSH
21413: LD_VAR 0 2
21417: DIFF
21418: ST_TO_ADDR
21419: GO 21437
// hInvincible := hInvincible union i ;
21421: LD_ADDR_EXP 76
21425: PUSH
21426: LD_EXP 76
21430: PUSH
21431: LD_VAR 0 2
21435: UNION
21436: ST_TO_ADDR
// end ;
21437: GO 21377
21439: POP
21440: POP
// end ;
21441: LD_VAR 0 1
21445: RET
// export function hHackInvisible ; var i , j ; begin
21446: LD_INT 0
21448: PPUSH
21449: PPUSH
21450: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21451: LD_ADDR_VAR 0 2
21455: PUSH
21456: LD_INT 21
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 69
21470: PUSH
21471: FOR_IN
21472: IFFALSE 21496
// if IsSelected ( i ) then
21474: LD_VAR 0 2
21478: PPUSH
21479: CALL_OW 306
21483: IFFALSE 21494
// ComForceInvisible ( i ) ;
21485: LD_VAR 0 2
21489: PPUSH
21490: CALL_OW 496
21494: GO 21471
21496: POP
21497: POP
// end ;
21498: LD_VAR 0 1
21502: RET
// export function hHackChangeYourSide ; begin
21503: LD_INT 0
21505: PPUSH
// if your_side = 8 then
21506: LD_OWVAR 2
21510: PUSH
21511: LD_INT 8
21513: EQUAL
21514: IFFALSE 21526
// your_side := 0 else
21516: LD_ADDR_OWVAR 2
21520: PUSH
21521: LD_INT 0
21523: ST_TO_ADDR
21524: GO 21540
// your_side := your_side + 1 ;
21526: LD_ADDR_OWVAR 2
21530: PUSH
21531: LD_OWVAR 2
21535: PUSH
21536: LD_INT 1
21538: PLUS
21539: ST_TO_ADDR
// end ;
21540: LD_VAR 0 1
21544: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21545: LD_INT 0
21547: PPUSH
21548: PPUSH
21549: PPUSH
// for i in all_units do
21550: LD_ADDR_VAR 0 2
21554: PUSH
21555: LD_OWVAR 3
21559: PUSH
21560: FOR_IN
21561: IFFALSE 21639
// if IsSelected ( i ) then
21563: LD_VAR 0 2
21567: PPUSH
21568: CALL_OW 306
21572: IFFALSE 21637
// begin j := GetSide ( i ) ;
21574: LD_ADDR_VAR 0 3
21578: PUSH
21579: LD_VAR 0 2
21583: PPUSH
21584: CALL_OW 255
21588: ST_TO_ADDR
// if j = 8 then
21589: LD_VAR 0 3
21593: PUSH
21594: LD_INT 8
21596: EQUAL
21597: IFFALSE 21609
// j := 0 else
21599: LD_ADDR_VAR 0 3
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
21607: GO 21623
// j := j + 1 ;
21609: LD_ADDR_VAR 0 3
21613: PUSH
21614: LD_VAR 0 3
21618: PUSH
21619: LD_INT 1
21621: PLUS
21622: ST_TO_ADDR
// SetSide ( i , j ) ;
21623: LD_VAR 0 2
21627: PPUSH
21628: LD_VAR 0 3
21632: PPUSH
21633: CALL_OW 235
// end ;
21637: GO 21560
21639: POP
21640: POP
// end ;
21641: LD_VAR 0 1
21645: RET
// export function hHackFog ; begin
21646: LD_INT 0
21648: PPUSH
// FogOff ( true ) ;
21649: LD_INT 1
21651: PPUSH
21652: CALL_OW 344
// end ;
21656: LD_VAR 0 1
21660: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21661: LD_INT 0
21663: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21664: LD_VAR 0 1
21668: PPUSH
21669: LD_VAR 0 2
21673: PPUSH
21674: LD_VAR 0 3
21678: PPUSH
21679: LD_INT 1
21681: PPUSH
21682: LD_INT 1
21684: PPUSH
21685: CALL_OW 483
// CenterOnXY ( x , y ) ;
21689: LD_VAR 0 2
21693: PPUSH
21694: LD_VAR 0 3
21698: PPUSH
21699: CALL_OW 84
// end ;
21703: LD_VAR 0 4
21707: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21708: LD_INT 0
21710: PPUSH
21711: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21712: LD_VAR 0 1
21716: NOT
21717: IFTRUE 21736
21719: PUSH
21720: LD_VAR 0 2
21724: PPUSH
21725: LD_VAR 0 3
21729: PPUSH
21730: CALL_OW 488
21734: NOT
21735: OR
21736: IFTRUE 21771
21738: PUSH
21739: LD_VAR 0 1
21743: PPUSH
21744: CALL_OW 266
21748: PUSH
21749: LD_INT 3
21751: NONEQUAL
21752: IFFALSE 21770
21754: PUSH
21755: LD_VAR 0 1
21759: PPUSH
21760: CALL_OW 247
21764: PUSH
21765: LD_INT 1
21767: EQUAL
21768: NOT
21769: AND
21770: OR
21771: IFFALSE 21775
// exit ;
21773: GO 22057
// if GetType ( factory ) = unit_human then
21775: LD_VAR 0 1
21779: PPUSH
21780: CALL_OW 247
21784: PUSH
21785: LD_INT 1
21787: EQUAL
21788: IFFALSE 21805
// factory := IsInUnit ( factory ) ;
21790: LD_ADDR_VAR 0 1
21794: PUSH
21795: LD_VAR 0 1
21799: PPUSH
21800: CALL_OW 310
21804: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21805: LD_VAR 0 1
21809: PPUSH
21810: CALL_OW 266
21814: PUSH
21815: LD_INT 3
21817: NONEQUAL
21818: IFFALSE 21822
// exit ;
21820: GO 22057
// for i := 1 to Count ( factoryWaypoints ) do
21822: LD_ADDR_VAR 0 5
21826: PUSH
21827: DOUBLE
21828: LD_INT 1
21830: DEC
21831: ST_TO_ADDR
21832: LD_EXP 77
21836: PPUSH
21837: CALL 31861 0 1
21841: PUSH
21842: FOR_TO
21843: IFFALSE 22005
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
21845: LD_VAR 0 2
21849: PPUSH
21850: LD_VAR 0 3
21854: PPUSH
21855: CALL_OW 428
21859: PUSH
21860: LD_EXP 77
21864: PUSH
21865: LD_VAR 0 5
21869: ARRAY
21870: PUSH
21871: LD_INT 2
21873: ARRAY
21874: EQUAL
21875: IFFALSE 21907
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
21877: LD_ADDR_EXP 77
21881: PUSH
21882: LD_EXP 77
21886: PPUSH
21887: LD_VAR 0 5
21891: PPUSH
21892: CALL_OW 3
21896: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21897: CALL 22062 0 0
// exit ;
21901: POP
21902: POP
21903: GO 22057
// end else
21905: GO 22003
// if factory = factoryWaypoints [ i ] [ 2 ] then
21907: LD_VAR 0 1
21911: PUSH
21912: LD_EXP 77
21916: PUSH
21917: LD_VAR 0 5
21921: ARRAY
21922: PUSH
21923: LD_INT 2
21925: ARRAY
21926: EQUAL
21927: IFFALSE 22003
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
21929: LD_ADDR_EXP 77
21933: PUSH
21934: LD_EXP 77
21938: PPUSH
21939: LD_VAR 0 5
21943: PPUSH
21944: CALL_OW 3
21948: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
21949: LD_ADDR_EXP 77
21953: PUSH
21954: LD_EXP 77
21958: PPUSH
21959: LD_VAR 0 1
21963: PPUSH
21964: CALL_OW 255
21968: PUSH
21969: LD_VAR 0 1
21973: PUSH
21974: LD_VAR 0 2
21978: PUSH
21979: LD_VAR 0 3
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: PPUSH
21990: CALL 67837 0 2
21994: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21995: CALL 22062 0 0
// exit ;
21999: POP
22000: POP
22001: GO 22057
// end ; end ;
22003: GO 21842
22005: POP
22006: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22007: LD_ADDR_EXP 77
22011: PUSH
22012: LD_EXP 77
22016: PPUSH
22017: LD_VAR 0 1
22021: PPUSH
22022: CALL_OW 255
22026: PUSH
22027: LD_VAR 0 1
22031: PUSH
22032: LD_VAR 0 2
22036: PUSH
22037: LD_VAR 0 3
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: PPUSH
22048: CALL 67837 0 2
22052: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22053: CALL 22062 0 0
// end ;
22057: LD_VAR 0 4
22061: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22062: LD_INT 0
22064: PPUSH
22065: PPUSH
22066: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22067: LD_STRING resetFactoryWaypoint();
22069: PPUSH
22070: CALL_OW 559
// if factoryWaypoints then
22074: LD_EXP 77
22078: IFFALSE 22199
// begin list := factoryWaypoints ;
22080: LD_ADDR_VAR 0 3
22084: PUSH
22085: LD_EXP 77
22089: ST_TO_ADDR
// for i := 1 to list do
22090: LD_ADDR_VAR 0 2
22094: PUSH
22095: DOUBLE
22096: LD_INT 1
22098: DEC
22099: ST_TO_ADDR
22100: LD_VAR 0 3
22104: PUSH
22105: FOR_TO
22106: IFFALSE 22197
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22108: LD_STRING setFactoryWaypointXY(
22110: PUSH
22111: LD_VAR 0 3
22115: PUSH
22116: LD_VAR 0 2
22120: ARRAY
22121: PUSH
22122: LD_INT 1
22124: ARRAY
22125: STR
22126: PUSH
22127: LD_STRING ,
22129: STR
22130: PUSH
22131: LD_VAR 0 3
22135: PUSH
22136: LD_VAR 0 2
22140: ARRAY
22141: PUSH
22142: LD_INT 2
22144: ARRAY
22145: STR
22146: PUSH
22147: LD_STRING ,
22149: STR
22150: PUSH
22151: LD_VAR 0 3
22155: PUSH
22156: LD_VAR 0 2
22160: ARRAY
22161: PUSH
22162: LD_INT 3
22164: ARRAY
22165: STR
22166: PUSH
22167: LD_STRING ,
22169: STR
22170: PUSH
22171: LD_VAR 0 3
22175: PUSH
22176: LD_VAR 0 2
22180: ARRAY
22181: PUSH
22182: LD_INT 4
22184: ARRAY
22185: STR
22186: PUSH
22187: LD_STRING )
22189: STR
22190: PPUSH
22191: CALL_OW 559
22195: GO 22105
22197: POP
22198: POP
// end ; end ;
22199: LD_VAR 0 1
22203: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22204: LD_INT 0
22206: PPUSH
// if HexInfo ( x , y ) = warehouse then
22207: LD_VAR 0 2
22211: PPUSH
22212: LD_VAR 0 3
22216: PPUSH
22217: CALL_OW 428
22221: PUSH
22222: LD_VAR 0 1
22226: EQUAL
22227: IFFALSE 22254
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22229: LD_ADDR_EXP 79
22233: PUSH
22234: LD_EXP 79
22238: PPUSH
22239: LD_VAR 0 1
22243: PPUSH
22244: LD_INT 0
22246: PPUSH
22247: CALL_OW 1
22251: ST_TO_ADDR
22252: GO 22305
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22254: LD_ADDR_EXP 79
22258: PUSH
22259: LD_EXP 79
22263: PPUSH
22264: LD_VAR 0 1
22268: PPUSH
22269: LD_VAR 0 1
22273: PPUSH
22274: CALL_OW 255
22278: PUSH
22279: LD_VAR 0 1
22283: PUSH
22284: LD_VAR 0 2
22288: PUSH
22289: LD_VAR 0 3
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: PPUSH
22300: CALL_OW 1
22304: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22305: CALL 22314 0 0
// end ;
22309: LD_VAR 0 4
22313: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22314: LD_INT 0
22316: PPUSH
22317: PPUSH
22318: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22319: LD_STRING resetWarehouseGatheringPoints();
22321: PPUSH
22322: CALL_OW 559
// if warehouseGatheringPoints then
22326: LD_EXP 79
22330: IFFALSE 22456
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22332: LD_ADDR_VAR 0 3
22336: PUSH
22337: LD_EXP 79
22341: PPUSH
22342: CALL 71771 0 1
22346: ST_TO_ADDR
// for i := 1 to list do
22347: LD_ADDR_VAR 0 2
22351: PUSH
22352: DOUBLE
22353: LD_INT 1
22355: DEC
22356: ST_TO_ADDR
22357: LD_VAR 0 3
22361: PUSH
22362: FOR_TO
22363: IFFALSE 22454
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22365: LD_STRING setWarehouseGatheringPointXY(
22367: PUSH
22368: LD_VAR 0 3
22372: PUSH
22373: LD_VAR 0 2
22377: ARRAY
22378: PUSH
22379: LD_INT 1
22381: ARRAY
22382: STR
22383: PUSH
22384: LD_STRING ,
22386: STR
22387: PUSH
22388: LD_VAR 0 3
22392: PUSH
22393: LD_VAR 0 2
22397: ARRAY
22398: PUSH
22399: LD_INT 2
22401: ARRAY
22402: STR
22403: PUSH
22404: LD_STRING ,
22406: STR
22407: PUSH
22408: LD_VAR 0 3
22412: PUSH
22413: LD_VAR 0 2
22417: ARRAY
22418: PUSH
22419: LD_INT 3
22421: ARRAY
22422: STR
22423: PUSH
22424: LD_STRING ,
22426: STR
22427: PUSH
22428: LD_VAR 0 3
22432: PUSH
22433: LD_VAR 0 2
22437: ARRAY
22438: PUSH
22439: LD_INT 4
22441: ARRAY
22442: STR
22443: PUSH
22444: LD_STRING )
22446: STR
22447: PPUSH
22448: CALL_OW 559
22452: GO 22362
22454: POP
22455: POP
// end ; end ;
22456: LD_VAR 0 1
22460: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22461: LD_EXP 79
22465: IFFALSE 23160
22467: GO 22469
22469: DISABLE
22470: LD_INT 0
22472: PPUSH
22473: PPUSH
22474: PPUSH
22475: PPUSH
22476: PPUSH
22477: PPUSH
22478: PPUSH
22479: PPUSH
22480: PPUSH
// begin enable ;
22481: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22482: LD_ADDR_VAR 0 3
22486: PUSH
22487: LD_EXP 79
22491: PPUSH
22492: CALL 71771 0 1
22496: ST_TO_ADDR
// if not list then
22497: LD_VAR 0 3
22501: NOT
22502: IFFALSE 22506
// exit ;
22504: GO 23160
// for i := 1 to list do
22506: LD_ADDR_VAR 0 1
22510: PUSH
22511: DOUBLE
22512: LD_INT 1
22514: DEC
22515: ST_TO_ADDR
22516: LD_VAR 0 3
22520: PUSH
22521: FOR_TO
22522: IFFALSE 23158
// begin depot := list [ i ] [ 2 ] ;
22524: LD_ADDR_VAR 0 8
22528: PUSH
22529: LD_VAR 0 3
22533: PUSH
22534: LD_VAR 0 1
22538: ARRAY
22539: PUSH
22540: LD_INT 2
22542: ARRAY
22543: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22544: LD_ADDR_VAR 0 5
22548: PUSH
22549: LD_VAR 0 3
22553: PUSH
22554: LD_VAR 0 1
22558: ARRAY
22559: PUSH
22560: LD_INT 1
22562: ARRAY
22563: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22564: LD_VAR 0 8
22568: PPUSH
22569: CALL_OW 301
22573: IFTRUE 22592
22575: PUSH
22576: LD_VAR 0 5
22580: PUSH
22581: LD_VAR 0 8
22585: PPUSH
22586: CALL_OW 255
22590: NONEQUAL
22591: OR
22592: IFFALSE 22621
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22594: LD_ADDR_EXP 79
22598: PUSH
22599: LD_EXP 79
22603: PPUSH
22604: LD_VAR 0 8
22608: PPUSH
22609: LD_INT 0
22611: PPUSH
22612: CALL_OW 1
22616: ST_TO_ADDR
// exit ;
22617: POP
22618: POP
22619: GO 23160
// end ; x := list [ i ] [ 3 ] ;
22621: LD_ADDR_VAR 0 6
22625: PUSH
22626: LD_VAR 0 3
22630: PUSH
22631: LD_VAR 0 1
22635: ARRAY
22636: PUSH
22637: LD_INT 3
22639: ARRAY
22640: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22641: LD_ADDR_VAR 0 7
22645: PUSH
22646: LD_VAR 0 3
22650: PUSH
22651: LD_VAR 0 1
22655: ARRAY
22656: PUSH
22657: LD_INT 4
22659: ARRAY
22660: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22661: LD_ADDR_VAR 0 9
22665: PUSH
22666: LD_VAR 0 6
22670: PPUSH
22671: LD_VAR 0 7
22675: PPUSH
22676: LD_INT 16
22678: PPUSH
22679: CALL 70345 0 3
22683: ST_TO_ADDR
// if not cratesNearbyPoint then
22684: LD_VAR 0 9
22688: NOT
22689: IFFALSE 22695
// exit ;
22691: POP
22692: POP
22693: GO 23160
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22695: LD_ADDR_VAR 0 4
22699: PUSH
22700: LD_INT 22
22702: PUSH
22703: LD_VAR 0 5
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 3
22714: PUSH
22715: LD_INT 60
22717: PUSH
22718: EMPTY
22719: LIST
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 91
22727: PUSH
22728: LD_VAR 0 8
22732: PUSH
22733: LD_INT 6
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: LD_INT 25
22746: PUSH
22747: LD_INT 2
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 25
22756: PUSH
22757: LD_INT 16
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: LIST
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: PPUSH
22775: CALL_OW 69
22779: PUSH
22780: LD_VAR 0 8
22784: PPUSH
22785: CALL_OW 313
22789: PPUSH
22790: LD_INT 3
22792: PUSH
22793: LD_INT 60
22795: PUSH
22796: EMPTY
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: LD_INT 25
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 25
22818: PUSH
22819: LD_INT 16
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: LIST
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PPUSH
22835: CALL_OW 72
22839: UNION
22840: ST_TO_ADDR
// if tmp then
22841: LD_VAR 0 4
22845: IFFALSE 22925
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22847: LD_ADDR_VAR 0 4
22851: PUSH
22852: LD_VAR 0 4
22856: PPUSH
22857: LD_INT 3
22859: PPUSH
22860: CALL 68152 0 2
22864: ST_TO_ADDR
// for j in tmp do
22865: LD_ADDR_VAR 0 2
22869: PUSH
22870: LD_VAR 0 4
22874: PUSH
22875: FOR_IN
22876: IFFALSE 22919
// begin if IsInUnit ( j ) then
22878: LD_VAR 0 2
22882: PPUSH
22883: CALL_OW 310
22887: IFFALSE 22898
// ComExit ( j ) ;
22889: LD_VAR 0 2
22893: PPUSH
22894: CALL 68235 0 1
// AddComCollect ( j , x , y ) ;
22898: LD_VAR 0 2
22902: PPUSH
22903: LD_VAR 0 6
22907: PPUSH
22908: LD_VAR 0 7
22912: PPUSH
22913: CALL_OW 177
// end ;
22917: GO 22875
22919: POP
22920: POP
// exit ;
22921: POP
22922: POP
22923: GO 23160
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22925: LD_ADDR_VAR 0 4
22929: PUSH
22930: LD_INT 22
22932: PUSH
22933: LD_VAR 0 5
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 91
22944: PUSH
22945: LD_VAR 0 8
22949: PUSH
22950: LD_INT 8
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: LD_INT 34
22963: PUSH
22964: LD_INT 12
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 34
22973: PUSH
22974: LD_INT 51
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 34
22983: PUSH
22984: LD_INT 32
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 34
22993: PUSH
22994: LD_INT 89
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: PPUSH
23013: CALL_OW 69
23017: ST_TO_ADDR
// if tmp then
23018: LD_VAR 0 4
23022: IFFALSE 23156
// begin for j in tmp do
23024: LD_ADDR_VAR 0 2
23028: PUSH
23029: LD_VAR 0 4
23033: PUSH
23034: FOR_IN
23035: IFFALSE 23154
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23037: LD_VAR 0 2
23041: PPUSH
23042: CALL_OW 262
23046: PUSH
23047: LD_INT 3
23049: EQUAL
23050: IFTRUE 23067
23052: PUSH
23053: LD_VAR 0 2
23057: PPUSH
23058: CALL_OW 261
23062: PUSH
23063: LD_INT 20
23065: GREATER
23066: OR
23067: IFFALSE 23081
23069: PUSH
23070: LD_VAR 0 2
23074: PPUSH
23075: CALL_OW 314
23079: NOT
23080: AND
23081: IFFALSE 23111
23083: PUSH
23084: LD_VAR 0 2
23088: PPUSH
23089: CALL_OW 263
23093: PUSH
23094: LD_INT 1
23096: NONEQUAL
23097: IFTRUE 23110
23099: PUSH
23100: LD_VAR 0 2
23104: PPUSH
23105: CALL_OW 311
23109: OR
23110: AND
23111: IFFALSE 23152
// begin ComCollect ( j , x , y ) ;
23113: LD_VAR 0 2
23117: PPUSH
23118: LD_VAR 0 6
23122: PPUSH
23123: LD_VAR 0 7
23127: PPUSH
23128: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23132: LD_VAR 0 2
23136: PPUSH
23137: LD_VAR 0 8
23141: PPUSH
23142: CALL_OW 172
// exit ;
23146: POP
23147: POP
23148: POP
23149: POP
23150: GO 23160
// end ;
23152: GO 23034
23154: POP
23155: POP
// end ; end ;
23156: GO 22521
23158: POP
23159: POP
// end ; end_of_file
23160: PPOPN 9
23162: END
// export function SOS_UnitDestroyed ( un ) ; begin
23163: LD_INT 0
23165: PPUSH
// ComRadiation ( un ) ;
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL 24333 0 1
// end ;
23175: LD_VAR 0 2
23179: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23180: LD_INT 0
23182: PPUSH
// ComRadiation ( un ) ;
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL 24333 0 1
// end ;
23192: LD_VAR 0 2
23196: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23197: LD_INT 0
23199: PPUSH
// end ;
23200: LD_VAR 0 4
23204: RET
// export function SOS_Command ( cmd ) ; begin
23205: LD_INT 0
23207: PPUSH
// end ;
23208: LD_VAR 0 2
23212: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23213: LD_INT 0
23215: PPUSH
// end ;
23216: LD_VAR 0 6
23220: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
23221: LD_INT 0
23223: PPUSH
23224: PPUSH
23225: PPUSH
23226: PPUSH
23227: PPUSH
// if not vehicle or not factory then
23228: LD_VAR 0 1
23232: NOT
23233: IFTRUE 23242
23235: PUSH
23236: LD_VAR 0 2
23240: NOT
23241: OR
23242: IFFALSE 23246
// exit ;
23244: GO 23908
// weapon := GetWeapon ( vehicle ) ;
23246: LD_ADDR_VAR 0 7
23250: PUSH
23251: LD_VAR 0 1
23255: PPUSH
23256: CALL_OW 264
23260: ST_TO_ADDR
// if weapon = ar_miner then
23261: LD_VAR 0 7
23265: PUSH
23266: LD_INT 81
23268: EQUAL
23269: IFFALSE 23326
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
23271: LD_ADDR_EXP 88
23275: PUSH
23276: LD_EXP 88
23280: PPUSH
23281: LD_EXP 88
23285: PUSH
23286: LD_INT 1
23288: PLUS
23289: PPUSH
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 1
23299: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23300: LD_ADDR_EXP 89
23304: PUSH
23305: LD_EXP 89
23309: PPUSH
23310: LD_EXP 89
23314: PUSH
23315: LD_INT 1
23317: PLUS
23318: PPUSH
23319: EMPTY
23320: PPUSH
23321: CALL_OW 1
23325: ST_TO_ADDR
// end ; if not factoryWaypoints then
23326: LD_EXP 77
23330: NOT
23331: IFFALSE 23335
// exit ;
23333: GO 23908
// for i := 1 to Count ( factoryWaypoints ) do
23335: LD_ADDR_VAR 0 4
23339: PUSH
23340: DOUBLE
23341: LD_INT 1
23343: DEC
23344: ST_TO_ADDR
23345: LD_EXP 77
23349: PPUSH
23350: CALL 31861 0 1
23354: PUSH
23355: FOR_TO
23356: IFFALSE 23906
// if factoryWaypoints [ i ] [ 2 ] = factory then
23358: LD_EXP 77
23362: PUSH
23363: LD_VAR 0 4
23367: ARRAY
23368: PUSH
23369: LD_INT 2
23371: ARRAY
23372: PUSH
23373: LD_VAR 0 2
23377: EQUAL
23378: IFFALSE 23904
// begin if GetControl ( vehicle ) = control_manual then
23380: LD_VAR 0 1
23384: PPUSH
23385: CALL_OW 263
23389: PUSH
23390: LD_INT 1
23392: EQUAL
23393: IFFALSE 23757
// begin driver := IsDrivenBy ( vehicle ) ;
23395: LD_ADDR_VAR 0 5
23399: PUSH
23400: LD_VAR 0 1
23404: PPUSH
23405: CALL_OW 311
23409: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23410: LD_VAR 0 5
23414: PUSH
23415: LD_EXP 78
23419: IN
23420: IFTRUE 23434
23422: PUSH
23423: LD_VAR 0 1
23427: PUSH
23428: LD_EXP 78
23432: IN
23433: OR
23434: IFFALSE 23440
// exit ;
23436: POP
23437: POP
23438: GO 23908
// if not HasTask ( driver ) then
23440: LD_VAR 0 5
23444: PPUSH
23445: CALL_OW 314
23449: NOT
23450: IFFALSE 23755
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
23452: LD_ADDR_EXP 78
23456: PUSH
23457: LD_EXP 78
23461: PPUSH
23462: LD_VAR 0 5
23466: PPUSH
23467: CALL 67837 0 2
23471: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
23472: LD_ADDR_EXP 78
23476: PUSH
23477: LD_EXP 78
23481: PPUSH
23482: LD_VAR 0 1
23486: PPUSH
23487: CALL 67837 0 2
23491: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23492: LD_ADDR_VAR 0 6
23496: PUSH
23497: LD_EXP 77
23501: PUSH
23502: LD_VAR 0 4
23506: ARRAY
23507: PUSH
23508: LD_INT 3
23510: ARRAY
23511: PPUSH
23512: LD_EXP 77
23516: PUSH
23517: LD_VAR 0 4
23521: ARRAY
23522: PUSH
23523: LD_INT 4
23525: ARRAY
23526: PPUSH
23527: CALL_OW 428
23531: ST_TO_ADDR
// if hex then
23532: LD_VAR 0 6
23536: IFFALSE 23554
// ComMoveUnit ( driver , hex ) else
23538: LD_VAR 0 5
23542: PPUSH
23543: LD_VAR 0 6
23547: PPUSH
23548: CALL_OW 112
23552: GO 23638
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
23554: LD_VAR 0 1
23558: PPUSH
23559: LD_EXP 77
23563: PUSH
23564: LD_VAR 0 4
23568: ARRAY
23569: PUSH
23570: LD_INT 3
23572: ARRAY
23573: PPUSH
23574: LD_EXP 77
23578: PUSH
23579: LD_VAR 0 4
23583: ARRAY
23584: PUSH
23585: LD_INT 4
23587: ARRAY
23588: PPUSH
23589: CALL_OW 297
23593: PUSH
23594: LD_INT 0
23596: GREATER
23597: IFFALSE 23638
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23599: LD_VAR 0 5
23603: PPUSH
23604: LD_EXP 77
23608: PUSH
23609: LD_VAR 0 4
23613: ARRAY
23614: PUSH
23615: LD_INT 3
23617: ARRAY
23618: PPUSH
23619: LD_EXP 77
23623: PUSH
23624: LD_VAR 0 4
23628: ARRAY
23629: PUSH
23630: LD_INT 4
23632: ARRAY
23633: PPUSH
23634: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23638: LD_VAR 0 5
23642: PPUSH
23643: CALL_OW 181
// if Multiplayer then
23647: LD_OWVAR 4
23651: IFFALSE 23700
// begin repeat wait ( 10 ) ;
23653: LD_INT 10
23655: PPUSH
23656: CALL_OW 67
// until not IsInUnit ( driver ) ;
23660: LD_VAR 0 5
23664: PPUSH
23665: CALL_OW 310
23669: NOT
23670: IFFALSE 23653
// if not HasTask ( driver ) then
23672: LD_VAR 0 5
23676: PPUSH
23677: CALL_OW 314
23681: NOT
23682: IFFALSE 23698
// ComEnterUnit ( driver , factory ) ;
23684: LD_VAR 0 5
23688: PPUSH
23689: LD_VAR 0 2
23693: PPUSH
23694: CALL_OW 120
// end else
23698: GO 23714
// AddComEnterUnit ( driver , factory ) ;
23700: LD_VAR 0 5
23704: PPUSH
23705: LD_VAR 0 2
23709: PPUSH
23710: CALL_OW 180
// wait ( 0 0$1 ) ;
23714: LD_INT 35
23716: PPUSH
23717: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
23721: LD_ADDR_EXP 78
23725: PUSH
23726: LD_EXP 78
23730: PUSH
23731: LD_VAR 0 5
23735: DIFF
23736: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
23737: LD_ADDR_EXP 78
23741: PUSH
23742: LD_EXP 78
23746: PUSH
23747: LD_VAR 0 1
23751: DIFF
23752: ST_TO_ADDR
// break ;
23753: GO 23906
// end ; end else
23755: GO 23904
// if GetControl ( vehicle ) = control_remote then
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 263
23766: PUSH
23767: LD_INT 2
23769: EQUAL
23770: IFFALSE 23856
// begin wait ( 0 0$2 ) ;
23772: LD_INT 70
23774: PPUSH
23775: CALL_OW 67
// repeat wait ( 10 ) ;
23779: LD_INT 10
23781: PPUSH
23782: CALL_OW 67
// Connect ( vehicle ) ;
23786: LD_VAR 0 1
23790: PPUSH
23791: CALL 38139 0 1
// until IsControledBy ( vehicle ) ;
23795: LD_VAR 0 1
23799: PPUSH
23800: CALL_OW 312
23804: IFFALSE 23779
// wait ( 10 ) ;
23806: LD_INT 10
23808: PPUSH
23809: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23813: LD_VAR 0 1
23817: PPUSH
23818: LD_EXP 77
23822: PUSH
23823: LD_VAR 0 4
23827: ARRAY
23828: PUSH
23829: LD_INT 3
23831: ARRAY
23832: PPUSH
23833: LD_EXP 77
23837: PUSH
23838: LD_VAR 0 4
23842: ARRAY
23843: PUSH
23844: LD_INT 4
23846: ARRAY
23847: PPUSH
23848: CALL_OW 111
// break ;
23852: GO 23906
// end else
23854: GO 23904
// begin wait ( 0 0$3 ) ;
23856: LD_INT 105
23858: PPUSH
23859: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_EXP 77
23872: PUSH
23873: LD_VAR 0 4
23877: ARRAY
23878: PUSH
23879: LD_INT 3
23881: ARRAY
23882: PPUSH
23883: LD_EXP 77
23887: PUSH
23888: LD_VAR 0 4
23892: ARRAY
23893: PUSH
23894: LD_INT 4
23896: ARRAY
23897: PPUSH
23898: CALL_OW 111
// break ;
23902: GO 23906
// end ; end ;
23904: GO 23355
23906: POP
23907: POP
// end ;
23908: LD_VAR 0 3
23912: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23913: LD_INT 0
23915: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23916: LD_VAR 0 1
23920: PUSH
23921: LD_INT 250
23923: EQUAL
23924: IFFALSE 23941
23926: PUSH
23927: LD_VAR 0 2
23931: PPUSH
23932: CALL_OW 264
23936: PUSH
23937: LD_INT 81
23939: EQUAL
23940: AND
23941: IFFALSE 23962
// MinerPlaceMine ( unit , x , y ) ;
23943: LD_VAR 0 2
23947: PPUSH
23948: LD_VAR 0 4
23952: PPUSH
23953: LD_VAR 0 5
23957: PPUSH
23958: CALL 27308 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23962: LD_VAR 0 1
23966: PUSH
23967: LD_INT 251
23969: EQUAL
23970: IFFALSE 23987
23972: PUSH
23973: LD_VAR 0 2
23977: PPUSH
23978: CALL_OW 264
23982: PUSH
23983: LD_INT 81
23985: EQUAL
23986: AND
23987: IFFALSE 24008
// MinerDetonateMine ( unit , x , y ) ;
23989: LD_VAR 0 2
23993: PPUSH
23994: LD_VAR 0 4
23998: PPUSH
23999: LD_VAR 0 5
24003: PPUSH
24004: CALL 27715 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24008: LD_VAR 0 1
24012: PUSH
24013: LD_INT 252
24015: EQUAL
24016: IFFALSE 24033
24018: PUSH
24019: LD_VAR 0 2
24023: PPUSH
24024: CALL_OW 264
24028: PUSH
24029: LD_INT 81
24031: EQUAL
24032: AND
24033: IFFALSE 24054
// MinerCreateMinefield ( unit , x , y ) ;
24035: LD_VAR 0 2
24039: PPUSH
24040: LD_VAR 0 4
24044: PPUSH
24045: LD_VAR 0 5
24049: PPUSH
24050: CALL 27947 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24054: LD_VAR 0 1
24058: PUSH
24059: LD_INT 253
24061: EQUAL
24062: IFFALSE 24079
24064: PUSH
24065: LD_VAR 0 2
24069: PPUSH
24070: CALL_OW 257
24074: PUSH
24075: LD_INT 5
24077: EQUAL
24078: AND
24079: IFFALSE 24100
// ComBinocular ( unit , x , y ) ;
24081: LD_VAR 0 2
24085: PPUSH
24086: LD_VAR 0 4
24090: PPUSH
24091: LD_VAR 0 5
24095: PPUSH
24096: CALL 28322 0 3
// if selectedUnit then
24100: LD_VAR 0 3
24104: IFFALSE 24164
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24106: LD_VAR 0 1
24110: PUSH
24111: LD_INT 254
24113: EQUAL
24114: IFFALSE 24131
24116: PUSH
24117: LD_VAR 0 2
24121: PPUSH
24122: CALL_OW 264
24126: PUSH
24127: LD_INT 99
24129: EQUAL
24130: AND
24131: IFFALSE 24148
24133: PUSH
24134: LD_VAR 0 3
24138: PPUSH
24139: CALL_OW 263
24143: PUSH
24144: LD_INT 3
24146: EQUAL
24147: AND
24148: IFFALSE 24164
// HackDestroyVehicle ( unit , selectedUnit ) ;
24150: LD_VAR 0 2
24154: PPUSH
24155: LD_VAR 0 3
24159: PPUSH
24160: CALL 26498 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24164: LD_VAR 0 1
24168: PUSH
24169: LD_INT 255
24171: EQUAL
24172: IFFALSE 24196
24174: PUSH
24175: LD_VAR 0 2
24179: PPUSH
24180: CALL_OW 264
24184: PUSH
24185: LD_INT 14
24187: PUSH
24188: LD_INT 53
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: IN
24195: AND
24196: IFFALSE 24214
24198: PUSH
24199: LD_VAR 0 4
24203: PPUSH
24204: LD_VAR 0 5
24208: PPUSH
24209: CALL_OW 488
24213: AND
24214: IFFALSE 24238
// CutTreeXYR ( unit , x , y , 12 ) ;
24216: LD_VAR 0 2
24220: PPUSH
24221: LD_VAR 0 4
24225: PPUSH
24226: LD_VAR 0 5
24230: PPUSH
24231: LD_INT 12
24233: PPUSH
24234: CALL 24429 0 4
// if cmd = 256 then
24238: LD_VAR 0 1
24242: PUSH
24243: LD_INT 256
24245: EQUAL
24246: IFFALSE 24267
// SetFactoryWaypoint ( unit , x , y ) ;
24248: LD_VAR 0 2
24252: PPUSH
24253: LD_VAR 0 4
24257: PPUSH
24258: LD_VAR 0 5
24262: PPUSH
24263: CALL 21708 0 3
// if cmd = 257 then
24267: LD_VAR 0 1
24271: PUSH
24272: LD_INT 257
24274: EQUAL
24275: IFFALSE 24296
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24277: LD_VAR 0 2
24281: PPUSH
24282: LD_VAR 0 4
24286: PPUSH
24287: LD_VAR 0 5
24291: PPUSH
24292: CALL 22204 0 3
// if cmd = 258 then
24296: LD_VAR 0 1
24300: PUSH
24301: LD_INT 258
24303: EQUAL
24304: IFFALSE 24328
// BurnTreeXYR ( unit , x , y , 8 ) ;
24306: LD_VAR 0 2
24310: PPUSH
24311: LD_VAR 0 4
24315: PPUSH
24316: LD_VAR 0 5
24320: PPUSH
24321: LD_INT 8
24323: PPUSH
24324: CALL 24851 0 4
// end ;
24328: LD_VAR 0 6
24332: RET
// export function ComRadiation ( un ) ; var eff ; begin
24333: LD_INT 0
24335: PPUSH
24336: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24337: LD_VAR 0 1
24341: PPUSH
24342: CALL_OW 264
24346: PUSH
24347: LD_INT 91
24349: NONEQUAL
24350: IFFALSE 24354
// exit ;
24352: GO 24424
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24354: LD_INT 68
24356: PPUSH
24357: LD_VAR 0 1
24361: PPUSH
24362: CALL_OW 255
24366: PPUSH
24367: CALL_OW 321
24371: PUSH
24372: LD_INT 2
24374: EQUAL
24375: IFFALSE 24387
// eff := 50 else
24377: LD_ADDR_VAR 0 3
24381: PUSH
24382: LD_INT 50
24384: ST_TO_ADDR
24385: GO 24395
// eff := 25 ;
24387: LD_ADDR_VAR 0 3
24391: PUSH
24392: LD_INT 25
24394: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24395: LD_VAR 0 1
24399: PPUSH
24400: CALL_OW 250
24404: PPUSH
24405: LD_VAR 0 1
24409: PPUSH
24410: CALL_OW 251
24414: PPUSH
24415: LD_VAR 0 3
24419: PPUSH
24420: CALL_OW 495
// end ;
24424: LD_VAR 0 2
24428: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24429: LD_INT 0
24431: PPUSH
24432: PPUSH
24433: PPUSH
24434: PPUSH
24435: PPUSH
24436: PPUSH
24437: PPUSH
24438: PPUSH
24439: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24440: LD_VAR 0 1
24444: PPUSH
24445: CALL_OW 302
24449: NOT
24450: IFTRUE 24469
24452: PUSH
24453: LD_VAR 0 2
24457: PPUSH
24458: LD_VAR 0 3
24462: PPUSH
24463: CALL_OW 488
24467: NOT
24468: OR
24469: IFTRUE 24478
24471: PUSH
24472: LD_VAR 0 4
24476: NOT
24477: OR
24478: IFFALSE 24482
// exit ;
24480: GO 24846
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 437
24491: PPUSH
24492: CALL 31861 0 1
24496: PUSH
24497: LD_INT 10
24499: GREATER
24500: IFFALSE 24504
// exit ;
24502: GO 24846
// list := [ ] ;
24504: LD_ADDR_VAR 0 13
24508: PUSH
24509: EMPTY
24510: ST_TO_ADDR
// if x - r < 0 then
24511: LD_VAR 0 2
24515: PUSH
24516: LD_VAR 0 4
24520: MINUS
24521: PUSH
24522: LD_INT 0
24524: LESS
24525: IFFALSE 24537
// min_x := 0 else
24527: LD_ADDR_VAR 0 7
24531: PUSH
24532: LD_INT 0
24534: ST_TO_ADDR
24535: GO 24553
// min_x := x - r ;
24537: LD_ADDR_VAR 0 7
24541: PUSH
24542: LD_VAR 0 2
24546: PUSH
24547: LD_VAR 0 4
24551: MINUS
24552: ST_TO_ADDR
// if y - r < 0 then
24553: LD_VAR 0 3
24557: PUSH
24558: LD_VAR 0 4
24562: MINUS
24563: PUSH
24564: LD_INT 0
24566: LESS
24567: IFFALSE 24579
// min_y := 0 else
24569: LD_ADDR_VAR 0 8
24573: PUSH
24574: LD_INT 0
24576: ST_TO_ADDR
24577: GO 24595
// min_y := y - r ;
24579: LD_ADDR_VAR 0 8
24583: PUSH
24584: LD_VAR 0 3
24588: PUSH
24589: LD_VAR 0 4
24593: MINUS
24594: ST_TO_ADDR
// max_x := x + r ;
24595: LD_ADDR_VAR 0 9
24599: PUSH
24600: LD_VAR 0 2
24604: PUSH
24605: LD_VAR 0 4
24609: PLUS
24610: ST_TO_ADDR
// max_y := y + r ;
24611: LD_ADDR_VAR 0 10
24615: PUSH
24616: LD_VAR 0 3
24620: PUSH
24621: LD_VAR 0 4
24625: PLUS
24626: ST_TO_ADDR
// for _x = min_x to max_x do
24627: LD_ADDR_VAR 0 11
24631: PUSH
24632: DOUBLE
24633: LD_VAR 0 7
24637: DEC
24638: ST_TO_ADDR
24639: LD_VAR 0 9
24643: PUSH
24644: FOR_TO
24645: IFFALSE 24764
// for _y = min_y to max_y do
24647: LD_ADDR_VAR 0 12
24651: PUSH
24652: DOUBLE
24653: LD_VAR 0 8
24657: DEC
24658: ST_TO_ADDR
24659: LD_VAR 0 10
24663: PUSH
24664: FOR_TO
24665: IFFALSE 24760
// begin if not ValidHex ( _x , _y ) then
24667: LD_VAR 0 11
24671: PPUSH
24672: LD_VAR 0 12
24676: PPUSH
24677: CALL_OW 488
24681: NOT
24682: IFFALSE 24686
// continue ;
24684: GO 24664
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24686: LD_VAR 0 11
24690: PPUSH
24691: LD_VAR 0 12
24695: PPUSH
24696: CALL_OW 351
24700: IFFALSE 24718
24702: PUSH
24703: LD_VAR 0 11
24707: PPUSH
24708: LD_VAR 0 12
24712: PPUSH
24713: CALL_OW 554
24717: AND
24718: IFFALSE 24758
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24720: LD_ADDR_VAR 0 13
24724: PUSH
24725: LD_VAR 0 13
24729: PPUSH
24730: LD_VAR 0 13
24734: PUSH
24735: LD_INT 1
24737: PLUS
24738: PPUSH
24739: LD_VAR 0 11
24743: PUSH
24744: LD_VAR 0 12
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PPUSH
24753: CALL_OW 2
24757: ST_TO_ADDR
// end ;
24758: GO 24664
24760: POP
24761: POP
24762: GO 24644
24764: POP
24765: POP
// if not list then
24766: LD_VAR 0 13
24770: NOT
24771: IFFALSE 24775
// exit ;
24773: GO 24846
// for i in list do
24775: LD_ADDR_VAR 0 6
24779: PUSH
24780: LD_VAR 0 13
24784: PUSH
24785: FOR_IN
24786: IFFALSE 24844
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24788: LD_VAR 0 1
24792: PPUSH
24793: LD_STRING M
24795: PUSH
24796: LD_VAR 0 6
24800: PUSH
24801: LD_INT 1
24803: ARRAY
24804: PUSH
24805: LD_VAR 0 6
24809: PUSH
24810: LD_INT 2
24812: ARRAY
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: PUSH
24835: EMPTY
24836: LIST
24837: PPUSH
24838: CALL_OW 447
24842: GO 24785
24844: POP
24845: POP
// end ;
24846: LD_VAR 0 5
24850: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24851: LD_INT 0
24853: PPUSH
24854: PPUSH
24855: PPUSH
24856: PPUSH
24857: PPUSH
24858: PPUSH
24859: PPUSH
24860: PPUSH
24861: PPUSH
24862: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24863: LD_VAR 0 1
24867: PPUSH
24868: CALL_OW 302
24872: NOT
24873: IFTRUE 24892
24875: PUSH
24876: LD_VAR 0 2
24880: PPUSH
24881: LD_VAR 0 3
24885: PPUSH
24886: CALL_OW 488
24890: NOT
24891: OR
24892: IFTRUE 24901
24894: PUSH
24895: LD_VAR 0 4
24899: NOT
24900: OR
24901: IFFALSE 24905
// exit ;
24903: GO 25444
// if Count ( GetTaskList ( flame ) ) > 10 then
24905: LD_VAR 0 1
24909: PPUSH
24910: CALL_OW 437
24914: PPUSH
24915: CALL 31861 0 1
24919: PUSH
24920: LD_INT 10
24922: GREATER
24923: IFFALSE 24927
// exit ;
24925: GO 25444
// list := [ ] ;
24927: LD_ADDR_VAR 0 13
24931: PUSH
24932: EMPTY
24933: ST_TO_ADDR
// if x - r < 0 then
24934: LD_VAR 0 2
24938: PUSH
24939: LD_VAR 0 4
24943: MINUS
24944: PUSH
24945: LD_INT 0
24947: LESS
24948: IFFALSE 24960
// min_x := 0 else
24950: LD_ADDR_VAR 0 7
24954: PUSH
24955: LD_INT 0
24957: ST_TO_ADDR
24958: GO 24976
// min_x := x - r ;
24960: LD_ADDR_VAR 0 7
24964: PUSH
24965: LD_VAR 0 2
24969: PUSH
24970: LD_VAR 0 4
24974: MINUS
24975: ST_TO_ADDR
// if y - r < 0 then
24976: LD_VAR 0 3
24980: PUSH
24981: LD_VAR 0 4
24985: MINUS
24986: PUSH
24987: LD_INT 0
24989: LESS
24990: IFFALSE 25002
// min_y := 0 else
24992: LD_ADDR_VAR 0 8
24996: PUSH
24997: LD_INT 0
24999: ST_TO_ADDR
25000: GO 25018
// min_y := y - r ;
25002: LD_ADDR_VAR 0 8
25006: PUSH
25007: LD_VAR 0 3
25011: PUSH
25012: LD_VAR 0 4
25016: MINUS
25017: ST_TO_ADDR
// max_x := x + r ;
25018: LD_ADDR_VAR 0 9
25022: PUSH
25023: LD_VAR 0 2
25027: PUSH
25028: LD_VAR 0 4
25032: PLUS
25033: ST_TO_ADDR
// max_y := y + r ;
25034: LD_ADDR_VAR 0 10
25038: PUSH
25039: LD_VAR 0 3
25043: PUSH
25044: LD_VAR 0 4
25048: PLUS
25049: ST_TO_ADDR
// for _x = min_x to max_x do
25050: LD_ADDR_VAR 0 11
25054: PUSH
25055: DOUBLE
25056: LD_VAR 0 7
25060: DEC
25061: ST_TO_ADDR
25062: LD_VAR 0 9
25066: PUSH
25067: FOR_TO
25068: IFFALSE 25187
// for _y = min_y to max_y do
25070: LD_ADDR_VAR 0 12
25074: PUSH
25075: DOUBLE
25076: LD_VAR 0 8
25080: DEC
25081: ST_TO_ADDR
25082: LD_VAR 0 10
25086: PUSH
25087: FOR_TO
25088: IFFALSE 25183
// begin if not ValidHex ( _x , _y ) then
25090: LD_VAR 0 11
25094: PPUSH
25095: LD_VAR 0 12
25099: PPUSH
25100: CALL_OW 488
25104: NOT
25105: IFFALSE 25109
// continue ;
25107: GO 25087
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25109: LD_VAR 0 11
25113: PPUSH
25114: LD_VAR 0 12
25118: PPUSH
25119: CALL_OW 351
25123: IFFALSE 25141
25125: PUSH
25126: LD_VAR 0 11
25130: PPUSH
25131: LD_VAR 0 12
25135: PPUSH
25136: CALL_OW 554
25140: AND
25141: IFFALSE 25181
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25143: LD_ADDR_VAR 0 13
25147: PUSH
25148: LD_VAR 0 13
25152: PPUSH
25153: LD_VAR 0 13
25157: PUSH
25158: LD_INT 1
25160: PLUS
25161: PPUSH
25162: LD_VAR 0 11
25166: PUSH
25167: LD_VAR 0 12
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PPUSH
25176: CALL_OW 2
25180: ST_TO_ADDR
// end ;
25181: GO 25087
25183: POP
25184: POP
25185: GO 25067
25187: POP
25188: POP
// if not list then
25189: LD_VAR 0 13
25193: NOT
25194: IFFALSE 25198
// exit ;
25196: GO 25444
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25198: LD_ADDR_VAR 0 13
25202: PUSH
25203: LD_VAR 0 1
25207: PPUSH
25208: LD_VAR 0 13
25212: PPUSH
25213: LD_INT 1
25215: PPUSH
25216: LD_INT 1
25218: PPUSH
25219: CALL 35267 0 4
25223: ST_TO_ADDR
// ComStop ( flame ) ;
25224: LD_VAR 0 1
25228: PPUSH
25229: CALL_OW 141
// for i in list do
25233: LD_ADDR_VAR 0 6
25237: PUSH
25238: LD_VAR 0 13
25242: PUSH
25243: FOR_IN
25244: IFFALSE 25275
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25246: LD_VAR 0 1
25250: PPUSH
25251: LD_VAR 0 6
25255: PUSH
25256: LD_INT 1
25258: ARRAY
25259: PPUSH
25260: LD_VAR 0 6
25264: PUSH
25265: LD_INT 2
25267: ARRAY
25268: PPUSH
25269: CALL_OW 176
25273: GO 25243
25275: POP
25276: POP
// repeat wait ( 0 0$1 ) ;
25277: LD_INT 35
25279: PPUSH
25280: CALL_OW 67
// task := GetTaskList ( flame ) ;
25284: LD_ADDR_VAR 0 14
25288: PUSH
25289: LD_VAR 0 1
25293: PPUSH
25294: CALL_OW 437
25298: ST_TO_ADDR
// if not task then
25299: LD_VAR 0 14
25303: NOT
25304: IFFALSE 25308
// exit ;
25306: GO 25444
// if task [ 1 ] [ 1 ] <> | then
25308: LD_VAR 0 14
25312: PUSH
25313: LD_INT 1
25315: ARRAY
25316: PUSH
25317: LD_INT 1
25319: ARRAY
25320: PUSH
25321: LD_STRING |
25323: NONEQUAL
25324: IFFALSE 25328
// exit ;
25326: GO 25444
// _x := task [ 1 ] [ 2 ] ;
25328: LD_ADDR_VAR 0 11
25332: PUSH
25333: LD_VAR 0 14
25337: PUSH
25338: LD_INT 1
25340: ARRAY
25341: PUSH
25342: LD_INT 2
25344: ARRAY
25345: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25346: LD_ADDR_VAR 0 12
25350: PUSH
25351: LD_VAR 0 14
25355: PUSH
25356: LD_INT 1
25358: ARRAY
25359: PUSH
25360: LD_INT 3
25362: ARRAY
25363: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25364: LD_VAR 0 11
25368: PPUSH
25369: LD_VAR 0 12
25373: PPUSH
25374: CALL_OW 351
25378: NOT
25379: IFTRUE 25398
25381: PUSH
25382: LD_VAR 0 11
25386: PPUSH
25387: LD_VAR 0 12
25391: PPUSH
25392: CALL_OW 554
25396: NOT
25397: OR
25398: IFFALSE 25432
// begin task := Delete ( task , 1 ) ;
25400: LD_ADDR_VAR 0 14
25404: PUSH
25405: LD_VAR 0 14
25409: PPUSH
25410: LD_INT 1
25412: PPUSH
25413: CALL_OW 3
25417: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25418: LD_VAR 0 1
25422: PPUSH
25423: LD_VAR 0 14
25427: PPUSH
25428: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25432: LD_VAR 0 1
25436: PPUSH
25437: CALL_OW 314
25441: NOT
25442: IFFALSE 25277
// end ;
25444: LD_VAR 0 5
25448: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25449: LD_EXP 81
25453: NOT
25454: IFFALSE 25504
25456: GO 25458
25458: DISABLE
// begin initHack := true ;
25459: LD_ADDR_EXP 81
25463: PUSH
25464: LD_INT 1
25466: ST_TO_ADDR
// hackTanks := [ ] ;
25467: LD_ADDR_EXP 82
25471: PUSH
25472: EMPTY
25473: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25474: LD_ADDR_EXP 83
25478: PUSH
25479: EMPTY
25480: ST_TO_ADDR
// hackLimit := 3 ;
25481: LD_ADDR_EXP 84
25485: PUSH
25486: LD_INT 3
25488: ST_TO_ADDR
// hackDist := 12 ;
25489: LD_ADDR_EXP 85
25493: PUSH
25494: LD_INT 12
25496: ST_TO_ADDR
// hackCounter := [ ] ;
25497: LD_ADDR_EXP 86
25501: PUSH
25502: EMPTY
25503: ST_TO_ADDR
// end ;
25504: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25505: LD_EXP 81
25509: IFFALSE 25527
25511: PUSH
25512: LD_INT 34
25514: PUSH
25515: LD_INT 99
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PPUSH
25522: CALL_OW 69
25526: AND
25527: IFFALSE 25780
25529: GO 25531
25531: DISABLE
25532: LD_INT 0
25534: PPUSH
25535: PPUSH
// begin enable ;
25536: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25537: LD_ADDR_VAR 0 1
25541: PUSH
25542: LD_INT 34
25544: PUSH
25545: LD_INT 99
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PPUSH
25552: CALL_OW 69
25556: PUSH
25557: FOR_IN
25558: IFFALSE 25778
// begin if not i in hackTanks then
25560: LD_VAR 0 1
25564: PUSH
25565: LD_EXP 82
25569: IN
25570: NOT
25571: IFFALSE 25654
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25573: LD_ADDR_EXP 82
25577: PUSH
25578: LD_EXP 82
25582: PPUSH
25583: LD_EXP 82
25587: PUSH
25588: LD_INT 1
25590: PLUS
25591: PPUSH
25592: LD_VAR 0 1
25596: PPUSH
25597: CALL_OW 1
25601: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25602: LD_ADDR_EXP 83
25606: PUSH
25607: LD_EXP 83
25611: PPUSH
25612: LD_EXP 83
25616: PUSH
25617: LD_INT 1
25619: PLUS
25620: PPUSH
25621: EMPTY
25622: PPUSH
25623: CALL_OW 1
25627: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25628: LD_ADDR_EXP 86
25632: PUSH
25633: LD_EXP 86
25637: PPUSH
25638: LD_EXP 86
25642: PUSH
25643: LD_INT 1
25645: PLUS
25646: PPUSH
25647: EMPTY
25648: PPUSH
25649: CALL_OW 1
25653: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 302
25663: NOT
25664: IFFALSE 25677
// begin HackUnlinkAll ( i ) ;
25666: LD_VAR 0 1
25670: PPUSH
25671: CALL 25783 0 1
// continue ;
25675: GO 25557
// end ; HackCheckCapturedStatus ( i ) ;
25677: LD_VAR 0 1
25681: PPUSH
25682: CALL 26228 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25686: LD_ADDR_VAR 0 2
25690: PUSH
25691: LD_INT 81
25693: PUSH
25694: LD_VAR 0 1
25698: PPUSH
25699: CALL_OW 255
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 33
25710: PUSH
25711: LD_INT 3
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 91
25720: PUSH
25721: LD_VAR 0 1
25725: PUSH
25726: LD_EXP 85
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 50
25738: PUSH
25739: EMPTY
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: PPUSH
25748: CALL_OW 69
25752: ST_TO_ADDR
// if not tmp then
25753: LD_VAR 0 2
25757: NOT
25758: IFFALSE 25762
// continue ;
25760: GO 25557
// HackLink ( i , tmp ) ;
25762: LD_VAR 0 1
25766: PPUSH
25767: LD_VAR 0 2
25771: PPUSH
25772: CALL 25919 0 2
// end ;
25776: GO 25557
25778: POP
25779: POP
// end ;
25780: PPOPN 2
25782: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25783: LD_INT 0
25785: PPUSH
25786: PPUSH
25787: PPUSH
// if not hack in hackTanks then
25788: LD_VAR 0 1
25792: PUSH
25793: LD_EXP 82
25797: IN
25798: NOT
25799: IFFALSE 25803
// exit ;
25801: GO 25914
// index := GetElementIndex ( hackTanks , hack ) ;
25803: LD_ADDR_VAR 0 4
25807: PUSH
25808: LD_EXP 82
25812: PPUSH
25813: LD_VAR 0 1
25817: PPUSH
25818: CALL 34562 0 2
25822: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25823: LD_EXP 83
25827: PUSH
25828: LD_VAR 0 4
25832: ARRAY
25833: IFFALSE 25914
// begin for i in hackTanksCaptured [ index ] do
25835: LD_ADDR_VAR 0 3
25839: PUSH
25840: LD_EXP 83
25844: PUSH
25845: LD_VAR 0 4
25849: ARRAY
25850: PUSH
25851: FOR_IN
25852: IFFALSE 25878
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25854: LD_VAR 0 3
25858: PUSH
25859: LD_INT 1
25861: ARRAY
25862: PPUSH
25863: LD_VAR 0 3
25867: PUSH
25868: LD_INT 2
25870: ARRAY
25871: PPUSH
25872: CALL_OW 235
25876: GO 25851
25878: POP
25879: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25880: LD_ADDR_EXP 83
25884: PUSH
25885: LD_EXP 83
25889: PPUSH
25890: LD_VAR 0 4
25894: PPUSH
25895: EMPTY
25896: PPUSH
25897: CALL_OW 1
25901: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25902: LD_VAR 0 1
25906: PPUSH
25907: LD_INT 0
25909: PPUSH
25910: CALL_OW 505
// end ; end ;
25914: LD_VAR 0 2
25918: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25919: LD_INT 0
25921: PPUSH
25922: PPUSH
25923: PPUSH
// if not hack in hackTanks or not vehicles then
25924: LD_VAR 0 1
25928: PUSH
25929: LD_EXP 82
25933: IN
25934: NOT
25935: IFTRUE 25944
25937: PUSH
25938: LD_VAR 0 2
25942: NOT
25943: OR
25944: IFFALSE 25948
// exit ;
25946: GO 26223
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25948: LD_ADDR_VAR 0 2
25952: PUSH
25953: LD_VAR 0 1
25957: PPUSH
25958: LD_VAR 0 2
25962: PPUSH
25963: LD_INT 1
25965: PPUSH
25966: LD_INT 1
25968: PPUSH
25969: CALL 35214 0 4
25973: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25974: LD_ADDR_VAR 0 5
25978: PUSH
25979: LD_EXP 82
25983: PPUSH
25984: LD_VAR 0 1
25988: PPUSH
25989: CALL 34562 0 2
25993: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25994: LD_EXP 83
25998: PUSH
25999: LD_VAR 0 5
26003: ARRAY
26004: PUSH
26005: LD_EXP 84
26009: LESS
26010: IFFALSE 26199
// begin for i := 1 to vehicles do
26012: LD_ADDR_VAR 0 4
26016: PUSH
26017: DOUBLE
26018: LD_INT 1
26020: DEC
26021: ST_TO_ADDR
26022: LD_VAR 0 2
26026: PUSH
26027: FOR_TO
26028: IFFALSE 26197
// begin if hackTanksCaptured [ index ] = hackLimit then
26030: LD_EXP 83
26034: PUSH
26035: LD_VAR 0 5
26039: ARRAY
26040: PUSH
26041: LD_EXP 84
26045: EQUAL
26046: IFFALSE 26050
// break ;
26048: GO 26197
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26050: LD_ADDR_EXP 86
26054: PUSH
26055: LD_EXP 86
26059: PPUSH
26060: LD_VAR 0 5
26064: PPUSH
26065: LD_EXP 86
26069: PUSH
26070: LD_VAR 0 5
26074: ARRAY
26075: PUSH
26076: LD_INT 1
26078: PLUS
26079: PPUSH
26080: CALL_OW 1
26084: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26085: LD_ADDR_EXP 83
26089: PUSH
26090: LD_EXP 83
26094: PPUSH
26095: LD_VAR 0 5
26099: PUSH
26100: LD_EXP 83
26104: PUSH
26105: LD_VAR 0 5
26109: ARRAY
26110: PUSH
26111: LD_INT 1
26113: PLUS
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PPUSH
26119: LD_VAR 0 2
26123: PUSH
26124: LD_VAR 0 4
26128: ARRAY
26129: PUSH
26130: LD_VAR 0 2
26134: PUSH
26135: LD_VAR 0 4
26139: ARRAY
26140: PPUSH
26141: CALL_OW 255
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PPUSH
26150: CALL 34779 0 3
26154: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26155: LD_VAR 0 2
26159: PUSH
26160: LD_VAR 0 4
26164: ARRAY
26165: PPUSH
26166: LD_VAR 0 1
26170: PPUSH
26171: CALL_OW 255
26175: PPUSH
26176: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26180: LD_VAR 0 2
26184: PUSH
26185: LD_VAR 0 4
26189: ARRAY
26190: PPUSH
26191: CALL_OW 141
// end ;
26195: GO 26027
26197: POP
26198: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26199: LD_VAR 0 1
26203: PPUSH
26204: LD_EXP 83
26208: PUSH
26209: LD_VAR 0 5
26213: ARRAY
26214: PUSH
26215: LD_INT 0
26217: PLUS
26218: PPUSH
26219: CALL_OW 505
// end ;
26223: LD_VAR 0 3
26227: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26228: LD_INT 0
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
// if not hack in hackTanks then
26234: LD_VAR 0 1
26238: PUSH
26239: LD_EXP 82
26243: IN
26244: NOT
26245: IFFALSE 26249
// exit ;
26247: GO 26493
// index := GetElementIndex ( hackTanks , hack ) ;
26249: LD_ADDR_VAR 0 4
26253: PUSH
26254: LD_EXP 82
26258: PPUSH
26259: LD_VAR 0 1
26263: PPUSH
26264: CALL 34562 0 2
26268: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26269: LD_ADDR_VAR 0 3
26273: PUSH
26274: DOUBLE
26275: LD_EXP 83
26279: PUSH
26280: LD_VAR 0 4
26284: ARRAY
26285: INC
26286: ST_TO_ADDR
26287: LD_INT 1
26289: PUSH
26290: FOR_DOWNTO
26291: IFFALSE 26467
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26293: LD_ADDR_VAR 0 5
26297: PUSH
26298: LD_EXP 83
26302: PUSH
26303: LD_VAR 0 4
26307: ARRAY
26308: PUSH
26309: LD_VAR 0 3
26313: ARRAY
26314: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26315: LD_VAR 0 5
26319: PUSH
26320: LD_INT 1
26322: ARRAY
26323: PPUSH
26324: CALL_OW 302
26328: NOT
26329: IFTRUE 26357
26331: PUSH
26332: LD_VAR 0 5
26336: PUSH
26337: LD_INT 1
26339: ARRAY
26340: PPUSH
26341: CALL_OW 255
26345: PUSH
26346: LD_VAR 0 1
26350: PPUSH
26351: CALL_OW 255
26355: NONEQUAL
26356: OR
26357: IFFALSE 26465
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26359: LD_VAR 0 5
26363: PUSH
26364: LD_INT 1
26366: ARRAY
26367: PPUSH
26368: CALL_OW 305
26372: IFFALSE 26400
26374: PUSH
26375: LD_VAR 0 5
26379: PUSH
26380: LD_INT 1
26382: ARRAY
26383: PPUSH
26384: CALL_OW 255
26388: PUSH
26389: LD_VAR 0 1
26393: PPUSH
26394: CALL_OW 255
26398: EQUAL
26399: AND
26400: IFFALSE 26424
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26402: LD_VAR 0 5
26406: PUSH
26407: LD_INT 1
26409: ARRAY
26410: PPUSH
26411: LD_VAR 0 5
26415: PUSH
26416: LD_INT 2
26418: ARRAY
26419: PPUSH
26420: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26424: LD_ADDR_EXP 83
26428: PUSH
26429: LD_EXP 83
26433: PPUSH
26434: LD_VAR 0 4
26438: PPUSH
26439: LD_EXP 83
26443: PUSH
26444: LD_VAR 0 4
26448: ARRAY
26449: PPUSH
26450: LD_VAR 0 3
26454: PPUSH
26455: CALL_OW 3
26459: PPUSH
26460: CALL_OW 1
26464: ST_TO_ADDR
// end ; end ;
26465: GO 26290
26467: POP
26468: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26469: LD_VAR 0 1
26473: PPUSH
26474: LD_EXP 83
26478: PUSH
26479: LD_VAR 0 4
26483: ARRAY
26484: PUSH
26485: LD_INT 0
26487: PLUS
26488: PPUSH
26489: CALL_OW 505
// end ;
26493: LD_VAR 0 2
26497: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26498: LD_INT 0
26500: PPUSH
26501: PPUSH
26502: PPUSH
26503: PPUSH
// if not hack in hackTanks then
26504: LD_VAR 0 1
26508: PUSH
26509: LD_EXP 82
26513: IN
26514: NOT
26515: IFFALSE 26519
// exit ;
26517: GO 26604
// index := GetElementIndex ( hackTanks , hack ) ;
26519: LD_ADDR_VAR 0 5
26523: PUSH
26524: LD_EXP 82
26528: PPUSH
26529: LD_VAR 0 1
26533: PPUSH
26534: CALL 34562 0 2
26538: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26539: LD_ADDR_VAR 0 4
26543: PUSH
26544: DOUBLE
26545: LD_INT 1
26547: DEC
26548: ST_TO_ADDR
26549: LD_EXP 83
26553: PUSH
26554: LD_VAR 0 5
26558: ARRAY
26559: PUSH
26560: FOR_TO
26561: IFFALSE 26602
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26563: LD_EXP 83
26567: PUSH
26568: LD_VAR 0 5
26572: ARRAY
26573: PUSH
26574: LD_VAR 0 4
26578: ARRAY
26579: PUSH
26580: LD_INT 1
26582: ARRAY
26583: PUSH
26584: LD_VAR 0 2
26588: EQUAL
26589: IFFALSE 26600
// KillUnit ( vehicle ) ;
26591: LD_VAR 0 2
26595: PPUSH
26596: CALL_OW 66
26600: GO 26560
26602: POP
26603: POP
// end ;
26604: LD_VAR 0 3
26608: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
26609: LD_EXP 87
26613: NOT
26614: IFFALSE 26747
26616: GO 26618
26618: DISABLE
26619: LD_INT 0
26621: PPUSH
// begin initMiner := true ;
26622: LD_ADDR_EXP 87
26626: PUSH
26627: LD_INT 1
26629: ST_TO_ADDR
// minersList := [ ] ;
26630: LD_ADDR_EXP 88
26634: PUSH
26635: EMPTY
26636: ST_TO_ADDR
// minerMinesList := [ ] ;
26637: LD_ADDR_EXP 89
26641: PUSH
26642: EMPTY
26643: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
26644: LD_ADDR_EXP 90
26648: PUSH
26649: LD_INT 10
26651: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26652: LD_ADDR_VAR 0 1
26656: PUSH
26657: LD_INT 34
26659: PUSH
26660: LD_INT 81
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PPUSH
26667: CALL_OW 69
26671: PUSH
26672: FOR_IN
26673: IFFALSE 26745
// begin if not i in minersList then
26675: LD_VAR 0 1
26679: PUSH
26680: LD_EXP 88
26684: IN
26685: NOT
26686: IFFALSE 26743
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26688: LD_ADDR_EXP 88
26692: PUSH
26693: LD_EXP 88
26697: PPUSH
26698: LD_EXP 88
26702: PUSH
26703: LD_INT 1
26705: PLUS
26706: PPUSH
26707: LD_VAR 0 1
26711: PPUSH
26712: CALL_OW 1
26716: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26717: LD_ADDR_EXP 89
26721: PUSH
26722: LD_EXP 89
26726: PPUSH
26727: LD_EXP 89
26731: PUSH
26732: LD_INT 1
26734: PLUS
26735: PPUSH
26736: EMPTY
26737: PPUSH
26738: CALL_OW 1
26742: ST_TO_ADDR
// end end ;
26743: GO 26672
26745: POP
26746: POP
// end ;
26747: PPOPN 1
26749: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
26750: LD_EXP 87
26754: IFFALSE 26785
26756: PUSH
26757: LD_EXP 89
26761: PPUSH
26762: CALL 31861 0 1
26766: IFTRUE 26784
26768: PUSH
26769: LD_INT 34
26771: PUSH
26772: LD_INT 81
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PPUSH
26779: CALL_OW 69
26783: OR
26784: AND
26785: IFFALSE 27305
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
// begin enable ;
26796: ENABLE
// for i := minerMinesList downto 1 do
26797: LD_ADDR_VAR 0 1
26801: PUSH
26802: DOUBLE
26803: LD_EXP 89
26807: INC
26808: ST_TO_ADDR
26809: LD_INT 1
26811: PUSH
26812: FOR_DOWNTO
26813: IFFALSE 27303
// begin side := GetSide ( minersList [ i ] ) ;
26815: LD_ADDR_VAR 0 3
26819: PUSH
26820: LD_EXP 88
26824: PUSH
26825: LD_VAR 0 1
26829: ARRAY
26830: PPUSH
26831: CALL_OW 255
26835: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
26836: LD_EXP 88
26840: PUSH
26841: LD_VAR 0 1
26845: ARRAY
26846: PPUSH
26847: CALL_OW 300
26851: IFFALSE 26872
26853: PUSH
26854: LD_VAR 0 3
26858: PUSH
26859: LD_OWVAR 2
26863: PUSH
26864: LD_INT 9
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: IN
26871: AND
26872: IFFALSE 26905
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
26874: LD_EXP 88
26878: PUSH
26879: LD_VAR 0 1
26883: ARRAY
26884: PPUSH
26885: LD_EXP 89
26889: PUSH
26890: LD_VAR 0 1
26894: ARRAY
26895: PPUSH
26896: CALL 31861 0 1
26900: PPUSH
26901: CALL_OW 505
// if not minerMinesList [ i ] then
26905: LD_EXP 89
26909: PUSH
26910: LD_VAR 0 1
26914: ARRAY
26915: NOT
26916: IFFALSE 26920
// continue ;
26918: GO 26812
// for j := minerMinesList [ i ] downto 1 do
26920: LD_ADDR_VAR 0 2
26924: PUSH
26925: DOUBLE
26926: LD_EXP 89
26930: PUSH
26931: LD_VAR 0 1
26935: ARRAY
26936: INC
26937: ST_TO_ADDR
26938: LD_INT 1
26940: PUSH
26941: FOR_DOWNTO
26942: IFFALSE 27299
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
26944: LD_EXP 88
26948: PUSH
26949: LD_VAR 0 1
26953: ARRAY
26954: PPUSH
26955: CALL_OW 301
26959: IFTRUE 26979
26961: PUSH
26962: LD_EXP 88
26966: PUSH
26967: LD_VAR 0 1
26971: ARRAY
26972: PPUSH
26973: CALL_OW 305
26977: NOT
26978: OR
26979: IFFALSE 27070
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26981: LD_EXP 89
26985: PUSH
26986: LD_VAR 0 1
26990: ARRAY
26991: PUSH
26992: LD_VAR 0 2
26996: ARRAY
26997: PUSH
26998: LD_INT 1
27000: ARRAY
27001: PPUSH
27002: LD_EXP 89
27006: PUSH
27007: LD_VAR 0 1
27011: ARRAY
27012: PUSH
27013: LD_VAR 0 2
27017: ARRAY
27018: PUSH
27019: LD_INT 2
27021: ARRAY
27022: PPUSH
27023: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27027: LD_ADDR_EXP 89
27031: PUSH
27032: LD_EXP 89
27036: PPUSH
27037: LD_VAR 0 1
27041: PPUSH
27042: LD_EXP 89
27046: PUSH
27047: LD_VAR 0 1
27051: ARRAY
27052: PPUSH
27053: LD_VAR 0 2
27057: PPUSH
27058: CALL_OW 3
27062: PPUSH
27063: CALL_OW 1
27067: ST_TO_ADDR
// continue ;
27068: GO 26941
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27070: LD_ADDR_VAR 0 4
27074: PUSH
27075: LD_EXP 89
27079: PUSH
27080: LD_VAR 0 1
27084: ARRAY
27085: PUSH
27086: LD_VAR 0 2
27090: ARRAY
27091: PUSH
27092: LD_INT 1
27094: ARRAY
27095: PPUSH
27096: LD_EXP 89
27100: PUSH
27101: LD_VAR 0 1
27105: ARRAY
27106: PUSH
27107: LD_VAR 0 2
27111: ARRAY
27112: PUSH
27113: LD_INT 2
27115: ARRAY
27116: PPUSH
27117: CALL_OW 428
27121: ST_TO_ADDR
// if not tmp then
27122: LD_VAR 0 4
27126: NOT
27127: IFFALSE 27131
// continue ;
27129: GO 26941
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27131: LD_VAR 0 4
27135: PUSH
27136: LD_INT 81
27138: PUSH
27139: LD_VAR 0 3
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PPUSH
27148: CALL_OW 69
27152: IN
27153: IFFALSE 27203
27155: PUSH
27156: LD_EXP 89
27160: PUSH
27161: LD_VAR 0 1
27165: ARRAY
27166: PUSH
27167: LD_VAR 0 2
27171: ARRAY
27172: PUSH
27173: LD_INT 1
27175: ARRAY
27176: PPUSH
27177: LD_EXP 89
27181: PUSH
27182: LD_VAR 0 1
27186: ARRAY
27187: PUSH
27188: LD_VAR 0 2
27192: ARRAY
27193: PUSH
27194: LD_INT 2
27196: ARRAY
27197: PPUSH
27198: CALL_OW 458
27202: AND
27203: IFFALSE 27297
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27205: LD_EXP 89
27209: PUSH
27210: LD_VAR 0 1
27214: ARRAY
27215: PUSH
27216: LD_VAR 0 2
27220: ARRAY
27221: PUSH
27222: LD_INT 1
27224: ARRAY
27225: PPUSH
27226: LD_EXP 89
27230: PUSH
27231: LD_VAR 0 1
27235: ARRAY
27236: PUSH
27237: LD_VAR 0 2
27241: ARRAY
27242: PUSH
27243: LD_INT 2
27245: ARRAY
27246: PPUSH
27247: LD_VAR 0 3
27251: PPUSH
27252: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27256: LD_ADDR_EXP 89
27260: PUSH
27261: LD_EXP 89
27265: PPUSH
27266: LD_VAR 0 1
27270: PPUSH
27271: LD_EXP 89
27275: PUSH
27276: LD_VAR 0 1
27280: ARRAY
27281: PPUSH
27282: LD_VAR 0 2
27286: PPUSH
27287: CALL_OW 3
27291: PPUSH
27292: CALL_OW 1
27296: ST_TO_ADDR
// end ; end ;
27297: GO 26941
27299: POP
27300: POP
// end ;
27301: GO 26812
27303: POP
27304: POP
// end ;
27305: PPOPN 4
27307: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
27308: LD_INT 0
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
// result := false ;
27314: LD_ADDR_VAR 0 4
27318: PUSH
27319: LD_INT 0
27321: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27322: LD_VAR 0 1
27326: PPUSH
27327: CALL_OW 264
27331: PUSH
27332: LD_INT 81
27334: EQUAL
27335: NOT
27336: IFFALSE 27340
// exit ;
27338: GO 27710
// side := GetSide ( unit ) ;
27340: LD_ADDR_VAR 0 6
27344: PUSH
27345: LD_VAR 0 1
27349: PPUSH
27350: CALL_OW 255
27354: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
27355: LD_ADDR_VAR 0 5
27359: PUSH
27360: LD_EXP 88
27364: PPUSH
27365: LD_VAR 0 1
27369: PPUSH
27370: CALL 34562 0 2
27374: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27375: LD_EXP 89
27379: PUSH
27380: LD_VAR 0 5
27384: ARRAY
27385: PUSH
27386: LD_EXP 90
27390: GREATEREQUAL
27391: IFFALSE 27395
// exit ;
27393: GO 27710
// ComMoveXY ( unit , x , y ) ;
27395: LD_VAR 0 1
27399: PPUSH
27400: LD_VAR 0 2
27404: PPUSH
27405: LD_VAR 0 3
27409: PPUSH
27410: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27414: LD_INT 35
27416: PPUSH
27417: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27421: LD_VAR 0 1
27425: PPUSH
27426: LD_VAR 0 2
27430: PPUSH
27431: LD_VAR 0 3
27435: PPUSH
27436: CALL 66618 0 3
27440: NOT
27441: IFFALSE 27454
27443: PUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: CALL_OW 314
27453: AND
27454: IFFALSE 27458
// exit ;
27456: GO 27710
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27458: LD_VAR 0 2
27462: PPUSH
27463: LD_VAR 0 3
27467: PPUSH
27468: CALL_OW 428
27472: PUSH
27473: LD_VAR 0 1
27477: EQUAL
27478: IFFALSE 27492
27480: PUSH
27481: LD_VAR 0 1
27485: PPUSH
27486: CALL_OW 314
27490: NOT
27491: AND
27492: IFFALSE 27414
// if MineAtPos ( x , y ) then
27494: LD_VAR 0 2
27498: PPUSH
27499: LD_VAR 0 3
27503: PPUSH
27504: CALL_OW 458
27508: IFFALSE 27512
// exit ;
27510: GO 27710
// if your_side = side then
27512: LD_OWVAR 2
27516: PUSH
27517: LD_VAR 0 6
27521: EQUAL
27522: IFFALSE 27541
// PlaySoundXY ( x , y , PlantMine ) ;
27524: LD_VAR 0 2
27528: PPUSH
27529: LD_VAR 0 3
27533: PPUSH
27534: LD_STRING PlantMine
27536: PPUSH
27537: CALL_OW 366
// repeat wait ( 1 ) ;
27541: LD_INT 1
27543: PPUSH
27544: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
27548: LD_VAR 0 2
27552: PPUSH
27553: LD_VAR 0 3
27557: PPUSH
27558: LD_VAR 0 6
27562: PPUSH
27563: LD_INT 0
27565: PPUSH
27566: CALL_OW 454
27570: IFFALSE 27541
// if MineAtPos ( x , y ) then
27572: LD_VAR 0 2
27576: PPUSH
27577: LD_VAR 0 3
27581: PPUSH
27582: CALL_OW 458
27586: IFFALSE 27702
// begin for i in minerMinesList [ index ] do
27588: LD_ADDR_VAR 0 7
27592: PUSH
27593: LD_EXP 89
27597: PUSH
27598: LD_VAR 0 5
27602: ARRAY
27603: PUSH
27604: FOR_IN
27605: IFFALSE 27647
// if i [ 1 ] = x and i [ 2 ] = y then
27607: LD_VAR 0 7
27611: PUSH
27612: LD_INT 1
27614: ARRAY
27615: PUSH
27616: LD_VAR 0 2
27620: EQUAL
27621: IFFALSE 27639
27623: PUSH
27624: LD_VAR 0 7
27628: PUSH
27629: LD_INT 2
27631: ARRAY
27632: PUSH
27633: LD_VAR 0 3
27637: EQUAL
27638: AND
27639: IFFALSE 27645
// exit ;
27641: POP
27642: POP
27643: GO 27710
27645: GO 27604
27647: POP
27648: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27649: LD_ADDR_EXP 89
27653: PUSH
27654: LD_EXP 89
27658: PPUSH
27659: LD_VAR 0 5
27663: PUSH
27664: LD_EXP 89
27668: PUSH
27669: LD_VAR 0 5
27673: ARRAY
27674: PUSH
27675: LD_INT 1
27677: PLUS
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PPUSH
27683: LD_VAR 0 2
27687: PUSH
27688: LD_VAR 0 3
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PPUSH
27697: CALL 34779 0 3
27701: ST_TO_ADDR
// end ; result := true ;
27702: LD_ADDR_VAR 0 4
27706: PUSH
27707: LD_INT 1
27709: ST_TO_ADDR
// end ;
27710: LD_VAR 0 4
27714: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27715: LD_INT 0
27717: PPUSH
27718: PPUSH
27719: PPUSH
// if not unit in minersList then
27720: LD_VAR 0 1
27724: PUSH
27725: LD_EXP 88
27729: IN
27730: NOT
27731: IFFALSE 27735
// exit ;
27733: GO 27942
// index := GetElementIndex ( minersList , unit ) ;
27735: LD_ADDR_VAR 0 6
27739: PUSH
27740: LD_EXP 88
27744: PPUSH
27745: LD_VAR 0 1
27749: PPUSH
27750: CALL 34562 0 2
27754: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27755: LD_ADDR_VAR 0 5
27759: PUSH
27760: DOUBLE
27761: LD_EXP 89
27765: PUSH
27766: LD_VAR 0 6
27770: ARRAY
27771: INC
27772: ST_TO_ADDR
27773: LD_INT 1
27775: PUSH
27776: FOR_DOWNTO
27777: IFFALSE 27940
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27779: LD_EXP 89
27783: PUSH
27784: LD_VAR 0 6
27788: ARRAY
27789: PUSH
27790: LD_VAR 0 5
27794: ARRAY
27795: PUSH
27796: LD_INT 1
27798: ARRAY
27799: PPUSH
27800: LD_EXP 89
27804: PUSH
27805: LD_VAR 0 6
27809: ARRAY
27810: PUSH
27811: LD_VAR 0 5
27815: ARRAY
27816: PUSH
27817: LD_INT 2
27819: ARRAY
27820: PPUSH
27821: LD_VAR 0 2
27825: PPUSH
27826: LD_VAR 0 3
27830: PPUSH
27831: CALL_OW 298
27835: PUSH
27836: LD_INT 6
27838: LESS
27839: IFFALSE 27938
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27841: LD_EXP 89
27845: PUSH
27846: LD_VAR 0 6
27850: ARRAY
27851: PUSH
27852: LD_VAR 0 5
27856: ARRAY
27857: PUSH
27858: LD_INT 1
27860: ARRAY
27861: PPUSH
27862: LD_EXP 89
27866: PUSH
27867: LD_VAR 0 6
27871: ARRAY
27872: PUSH
27873: LD_VAR 0 5
27877: ARRAY
27878: PUSH
27879: LD_INT 2
27881: ARRAY
27882: PPUSH
27883: LD_VAR 0 1
27887: PPUSH
27888: CALL_OW 255
27892: PPUSH
27893: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27897: LD_ADDR_EXP 89
27901: PUSH
27902: LD_EXP 89
27906: PPUSH
27907: LD_VAR 0 6
27911: PPUSH
27912: LD_EXP 89
27916: PUSH
27917: LD_VAR 0 6
27921: ARRAY
27922: PPUSH
27923: LD_VAR 0 5
27927: PPUSH
27928: CALL_OW 3
27932: PPUSH
27933: CALL_OW 1
27937: ST_TO_ADDR
// end ; end ;
27938: GO 27776
27940: POP
27941: POP
// end ;
27942: LD_VAR 0 4
27946: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27947: LD_INT 0
27949: PPUSH
27950: PPUSH
27951: PPUSH
27952: PPUSH
27953: PPUSH
27954: PPUSH
27955: PPUSH
27956: PPUSH
27957: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27958: LD_VAR 0 1
27962: PPUSH
27963: CALL_OW 264
27967: PUSH
27968: LD_INT 81
27970: EQUAL
27971: NOT
27972: IFTRUE 27987
27974: PUSH
27975: LD_VAR 0 1
27979: PUSH
27980: LD_EXP 88
27984: IN
27985: NOT
27986: OR
27987: IFFALSE 27991
// exit ;
27989: GO 28317
// index := GetElementIndex ( minersList , unit ) ;
27991: LD_ADDR_VAR 0 6
27995: PUSH
27996: LD_EXP 88
28000: PPUSH
28001: LD_VAR 0 1
28005: PPUSH
28006: CALL 34562 0 2
28010: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28011: LD_ADDR_VAR 0 8
28015: PUSH
28016: LD_EXP 90
28020: PUSH
28021: LD_EXP 89
28025: PUSH
28026: LD_VAR 0 6
28030: ARRAY
28031: MINUS
28032: ST_TO_ADDR
// if not minesFreeAmount then
28033: LD_VAR 0 8
28037: NOT
28038: IFFALSE 28042
// exit ;
28040: GO 28317
// tmp := [ ] ;
28042: LD_ADDR_VAR 0 7
28046: PUSH
28047: EMPTY
28048: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28049: LD_ADDR_VAR 0 5
28053: PUSH
28054: DOUBLE
28055: LD_INT 1
28057: DEC
28058: ST_TO_ADDR
28059: LD_VAR 0 8
28063: PUSH
28064: FOR_TO
28065: IFFALSE 28264
// begin _d := rand ( 0 , 5 ) ;
28067: LD_ADDR_VAR 0 11
28071: PUSH
28072: LD_INT 0
28074: PPUSH
28075: LD_INT 5
28077: PPUSH
28078: CALL_OW 12
28082: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28083: LD_ADDR_VAR 0 12
28087: PUSH
28088: LD_INT 2
28090: PPUSH
28091: LD_INT 6
28093: PPUSH
28094: CALL_OW 12
28098: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28099: LD_ADDR_VAR 0 9
28103: PUSH
28104: LD_VAR 0 2
28108: PPUSH
28109: LD_VAR 0 11
28113: PPUSH
28114: LD_VAR 0 12
28118: PPUSH
28119: CALL_OW 272
28123: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28124: LD_ADDR_VAR 0 10
28128: PUSH
28129: LD_VAR 0 3
28133: PPUSH
28134: LD_VAR 0 11
28138: PPUSH
28139: LD_VAR 0 12
28143: PPUSH
28144: CALL_OW 273
28148: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28149: LD_VAR 0 9
28153: PPUSH
28154: LD_VAR 0 10
28158: PPUSH
28159: CALL_OW 488
28163: IFFALSE 28187
28165: PUSH
28166: LD_VAR 0 9
28170: PUSH
28171: LD_VAR 0 10
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_VAR 0 7
28184: IN
28185: NOT
28186: AND
28187: IFFALSE 28206
28189: PUSH
28190: LD_VAR 0 9
28194: PPUSH
28195: LD_VAR 0 10
28199: PPUSH
28200: CALL_OW 458
28204: NOT
28205: AND
28206: IFFALSE 28248
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28208: LD_ADDR_VAR 0 7
28212: PUSH
28213: LD_VAR 0 7
28217: PPUSH
28218: LD_VAR 0 7
28222: PUSH
28223: LD_INT 1
28225: PLUS
28226: PPUSH
28227: LD_VAR 0 9
28231: PUSH
28232: LD_VAR 0 10
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PPUSH
28241: CALL_OW 1
28245: ST_TO_ADDR
28246: GO 28262
// i := i - 1 ;
28248: LD_ADDR_VAR 0 5
28252: PUSH
28253: LD_VAR 0 5
28257: PUSH
28258: LD_INT 1
28260: MINUS
28261: ST_TO_ADDR
// end ;
28262: GO 28064
28264: POP
28265: POP
// for i in tmp do
28266: LD_ADDR_VAR 0 5
28270: PUSH
28271: LD_VAR 0 7
28275: PUSH
28276: FOR_IN
28277: IFFALSE 28315
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28279: LD_VAR 0 1
28283: PPUSH
28284: LD_VAR 0 5
28288: PUSH
28289: LD_INT 1
28291: ARRAY
28292: PPUSH
28293: LD_VAR 0 5
28297: PUSH
28298: LD_INT 2
28300: ARRAY
28301: PPUSH
28302: CALL 27308 0 3
28306: NOT
28307: IFFALSE 28313
// exit ;
28309: POP
28310: POP
28311: GO 28317
28313: GO 28276
28315: POP
28316: POP
// end ;
28317: LD_VAR 0 4
28321: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28322: LD_INT 0
28324: PPUSH
28325: PPUSH
28326: PPUSH
28327: PPUSH
28328: PPUSH
28329: PPUSH
28330: PPUSH
28331: PPUSH
28332: PPUSH
// if GetClass ( unit ) <> class_sniper then
28333: LD_VAR 0 1
28337: PPUSH
28338: CALL_OW 257
28342: PUSH
28343: LD_INT 5
28345: NONEQUAL
28346: IFFALSE 28350
// exit ;
28348: GO 28820
// dist := 8 ;
28350: LD_ADDR_VAR 0 5
28354: PUSH
28355: LD_INT 8
28357: ST_TO_ADDR
// viewRange := 12 ;
28358: LD_ADDR_VAR 0 8
28362: PUSH
28363: LD_INT 12
28365: ST_TO_ADDR
// side := GetSide ( unit ) ;
28366: LD_ADDR_VAR 0 6
28370: PUSH
28371: LD_VAR 0 1
28375: PPUSH
28376: CALL_OW 255
28380: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28381: LD_INT 61
28383: PPUSH
28384: LD_VAR 0 6
28388: PPUSH
28389: CALL_OW 321
28393: PUSH
28394: LD_INT 2
28396: EQUAL
28397: IFFALSE 28407
// viewRange := 16 ;
28399: LD_ADDR_VAR 0 8
28403: PUSH
28404: LD_INT 16
28406: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28407: LD_VAR 0 1
28411: PPUSH
28412: LD_VAR 0 2
28416: PPUSH
28417: LD_VAR 0 3
28421: PPUSH
28422: CALL_OW 297
28426: PUSH
28427: LD_VAR 0 5
28431: GREATER
28432: IFFALSE 28511
// begin ComMoveXY ( unit , x , y ) ;
28434: LD_VAR 0 1
28438: PPUSH
28439: LD_VAR 0 2
28443: PPUSH
28444: LD_VAR 0 3
28448: PPUSH
28449: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28453: LD_INT 35
28455: PPUSH
28456: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28460: LD_VAR 0 1
28464: PPUSH
28465: LD_VAR 0 2
28469: PPUSH
28470: LD_VAR 0 3
28474: PPUSH
28475: CALL 66618 0 3
28479: NOT
28480: IFFALSE 28484
// exit ;
28482: GO 28820
// until GetDistUnitXY ( unit , x , y ) < dist ;
28484: LD_VAR 0 1
28488: PPUSH
28489: LD_VAR 0 2
28493: PPUSH
28494: LD_VAR 0 3
28498: PPUSH
28499: CALL_OW 297
28503: PUSH
28504: LD_VAR 0 5
28508: LESS
28509: IFFALSE 28453
// end ; ComTurnXY ( unit , x , y ) ;
28511: LD_VAR 0 1
28515: PPUSH
28516: LD_VAR 0 2
28520: PPUSH
28521: LD_VAR 0 3
28525: PPUSH
28526: CALL_OW 118
// repeat if Multiplayer then
28530: LD_OWVAR 4
28534: IFFALSE 28545
// wait ( 35 ) else
28536: LD_INT 35
28538: PPUSH
28539: CALL_OW 67
28543: GO 28552
// wait ( 5 ) ;
28545: LD_INT 5
28547: PPUSH
28548: CALL_OW 67
// _d := GetDir ( unit ) ;
28552: LD_ADDR_VAR 0 11
28556: PUSH
28557: LD_VAR 0 1
28561: PPUSH
28562: CALL_OW 254
28566: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
28567: LD_ADDR_VAR 0 7
28571: PUSH
28572: LD_VAR 0 1
28576: PPUSH
28577: CALL_OW 250
28581: PPUSH
28582: LD_VAR 0 1
28586: PPUSH
28587: CALL_OW 251
28591: PPUSH
28592: LD_VAR 0 2
28596: PPUSH
28597: LD_VAR 0 3
28601: PPUSH
28602: CALL 69254 0 4
28606: ST_TO_ADDR
// until dir = _d ;
28607: LD_VAR 0 7
28611: PUSH
28612: LD_VAR 0 11
28616: EQUAL
28617: IFFALSE 28530
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
28619: LD_ADDR_VAR 0 9
28623: PUSH
28624: LD_VAR 0 1
28628: PPUSH
28629: CALL_OW 250
28633: PPUSH
28634: LD_VAR 0 7
28638: PPUSH
28639: LD_VAR 0 5
28643: PPUSH
28644: CALL_OW 272
28648: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
28649: LD_ADDR_VAR 0 10
28653: PUSH
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 251
28663: PPUSH
28664: LD_VAR 0 7
28668: PPUSH
28669: LD_VAR 0 5
28673: PPUSH
28674: CALL_OW 273
28678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28679: LD_VAR 0 9
28683: PPUSH
28684: LD_VAR 0 10
28688: PPUSH
28689: CALL_OW 488
28693: NOT
28694: IFFALSE 28698
// exit ;
28696: GO 28820
// ComAnimCustom ( unit , 1 ) ;
28698: LD_VAR 0 1
28702: PPUSH
28703: LD_INT 1
28705: PPUSH
28706: CALL_OW 592
// p := 0 ;
28710: LD_ADDR_VAR 0 12
28714: PUSH
28715: LD_INT 0
28717: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28718: LD_VAR 0 9
28722: PPUSH
28723: LD_VAR 0 10
28727: PPUSH
28728: LD_VAR 0 6
28732: PPUSH
28733: LD_VAR 0 8
28737: PPUSH
28738: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
28742: LD_INT 35
28744: PPUSH
28745: CALL_OW 67
// p := Inc ( p ) ;
28749: LD_ADDR_VAR 0 12
28753: PUSH
28754: LD_VAR 0 12
28758: PPUSH
28759: CALL 69210 0 1
28763: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
28764: LD_VAR 0 12
28768: PUSH
28769: LD_INT 3
28771: EQUAL
28772: IFTRUE 28786
28774: PUSH
28775: LD_VAR 0 1
28779: PPUSH
28780: CALL_OW 302
28784: NOT
28785: OR
28786: IFTRUE 28799
28788: PUSH
28789: LD_VAR 0 1
28793: PPUSH
28794: CALL_OW 301
28798: OR
28799: IFFALSE 28742
// RemoveSeeing ( _x , _y , side ) ;
28801: LD_VAR 0 9
28805: PPUSH
28806: LD_VAR 0 10
28810: PPUSH
28811: LD_VAR 0 6
28815: PPUSH
28816: CALL_OW 331
// end ;
28820: LD_VAR 0 4
28824: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
28825: LD_INT 0
28827: PPUSH
28828: PPUSH
28829: PPUSH
28830: PPUSH
28831: PPUSH
28832: PPUSH
28833: PPUSH
28834: PPUSH
28835: PPUSH
28836: PPUSH
28837: PPUSH
// if not unit then
28838: LD_VAR 0 1
28842: NOT
28843: IFFALSE 28847
// exit ;
28845: GO 29118
// side := GetSide ( unit ) ;
28847: LD_ADDR_VAR 0 3
28851: PUSH
28852: LD_VAR 0 1
28856: PPUSH
28857: CALL_OW 255
28861: ST_TO_ADDR
// x := GetX ( unit ) ;
28862: LD_ADDR_VAR 0 5
28866: PUSH
28867: LD_VAR 0 1
28871: PPUSH
28872: CALL_OW 250
28876: ST_TO_ADDR
// y := GetY ( unit ) ;
28877: LD_ADDR_VAR 0 6
28881: PUSH
28882: LD_VAR 0 1
28886: PPUSH
28887: CALL_OW 251
28891: ST_TO_ADDR
// r := 8 ;
28892: LD_ADDR_VAR 0 4
28896: PUSH
28897: LD_INT 8
28899: ST_TO_ADDR
// if x - r < 0 then
28900: LD_VAR 0 5
28904: PUSH
28905: LD_VAR 0 4
28909: MINUS
28910: PUSH
28911: LD_INT 0
28913: LESS
28914: IFFALSE 28926
// min_x := 0 else
28916: LD_ADDR_VAR 0 7
28920: PUSH
28921: LD_INT 0
28923: ST_TO_ADDR
28924: GO 28942
// min_x := x - r ;
28926: LD_ADDR_VAR 0 7
28930: PUSH
28931: LD_VAR 0 5
28935: PUSH
28936: LD_VAR 0 4
28940: MINUS
28941: ST_TO_ADDR
// if y - r < 0 then
28942: LD_VAR 0 6
28946: PUSH
28947: LD_VAR 0 4
28951: MINUS
28952: PUSH
28953: LD_INT 0
28955: LESS
28956: IFFALSE 28968
// min_y := 0 else
28958: LD_ADDR_VAR 0 8
28962: PUSH
28963: LD_INT 0
28965: ST_TO_ADDR
28966: GO 28984
// min_y := y - r ;
28968: LD_ADDR_VAR 0 8
28972: PUSH
28973: LD_VAR 0 6
28977: PUSH
28978: LD_VAR 0 4
28982: MINUS
28983: ST_TO_ADDR
// max_x := x + r ;
28984: LD_ADDR_VAR 0 9
28988: PUSH
28989: LD_VAR 0 5
28993: PUSH
28994: LD_VAR 0 4
28998: PLUS
28999: ST_TO_ADDR
// max_y := y + r ;
29000: LD_ADDR_VAR 0 10
29004: PUSH
29005: LD_VAR 0 6
29009: PUSH
29010: LD_VAR 0 4
29014: PLUS
29015: ST_TO_ADDR
// for _x = min_x to max_x do
29016: LD_ADDR_VAR 0 11
29020: PUSH
29021: DOUBLE
29022: LD_VAR 0 7
29026: DEC
29027: ST_TO_ADDR
29028: LD_VAR 0 9
29032: PUSH
29033: FOR_TO
29034: IFFALSE 29116
// for _y = min_y to max_y do
29036: LD_ADDR_VAR 0 12
29040: PUSH
29041: DOUBLE
29042: LD_VAR 0 8
29046: DEC
29047: ST_TO_ADDR
29048: LD_VAR 0 10
29052: PUSH
29053: FOR_TO
29054: IFFALSE 29112
// begin if not ValidHex ( _x , _y ) then
29056: LD_VAR 0 11
29060: PPUSH
29061: LD_VAR 0 12
29065: PPUSH
29066: CALL_OW 488
29070: NOT
29071: IFFALSE 29075
// continue ;
29073: GO 29053
// if MineAtPos ( _x , _y ) then
29075: LD_VAR 0 11
29079: PPUSH
29080: LD_VAR 0 12
29084: PPUSH
29085: CALL_OW 458
29089: IFFALSE 29110
// ViewMineAtPos ( _x , _y , side ) ;
29091: LD_VAR 0 11
29095: PPUSH
29096: LD_VAR 0 12
29100: PPUSH
29101: LD_VAR 0 3
29105: PPUSH
29106: CALL_OW 457
// end ;
29110: GO 29053
29112: POP
29113: POP
29114: GO 29033
29116: POP
29117: POP
// end ;
29118: LD_VAR 0 2
29122: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
29123: LD_INT 0
29125: PPUSH
29126: PPUSH
29127: PPUSH
29128: PPUSH
29129: PPUSH
29130: PPUSH
29131: PPUSH
// if not units then
29132: LD_VAR 0 1
29136: NOT
29137: IFFALSE 29141
// exit ;
29139: GO 29605
// scaners := [ ] ;
29141: LD_ADDR_VAR 0 6
29145: PUSH
29146: EMPTY
29147: ST_TO_ADDR
// for i in units do
29148: LD_ADDR_VAR 0 3
29152: PUSH
29153: LD_VAR 0 1
29157: PUSH
29158: FOR_IN
29159: IFFALSE 29316
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
29161: LD_VAR 0 3
29165: PPUSH
29166: CALL_OW 264
29170: PUSH
29171: LD_INT 11
29173: NONEQUAL
29174: IFTRUE 29188
29176: PUSH
29177: LD_VAR 0 3
29181: PPUSH
29182: CALL_OW 302
29186: NOT
29187: OR
29188: IFTRUE 29205
29190: PUSH
29191: LD_VAR 0 3
29195: PPUSH
29196: CALL_OW 110
29200: PUSH
29201: LD_INT 502
29203: EQUAL
29204: OR
29205: IFFALSE 29209
// continue ;
29207: GO 29158
// ComStop ( i ) ;
29209: LD_VAR 0 3
29213: PPUSH
29214: CALL_OW 141
// x := GetX ( i ) ;
29218: LD_ADDR_VAR 0 4
29222: PUSH
29223: LD_VAR 0 3
29227: PPUSH
29228: CALL_OW 250
29232: ST_TO_ADDR
// y := GetY ( i ) ;
29233: LD_ADDR_VAR 0 5
29237: PUSH
29238: LD_VAR 0 3
29242: PPUSH
29243: CALL_OW 251
29247: ST_TO_ADDR
// if GetSide ( i ) = your_side then
29248: LD_VAR 0 3
29252: PPUSH
29253: CALL_OW 255
29257: PUSH
29258: LD_OWVAR 2
29262: EQUAL
29263: IFFALSE 29282
// PlaySoundXY ( x , y , mineDetector ) ;
29265: LD_VAR 0 4
29269: PPUSH
29270: LD_VAR 0 5
29274: PPUSH
29275: LD_STRING mineDetector
29277: PPUSH
29278: CALL_OW 366
// scaners := Join ( scaners , i ) ;
29282: LD_ADDR_VAR 0 6
29286: PUSH
29287: LD_VAR 0 6
29291: PPUSH
29292: LD_VAR 0 3
29296: PPUSH
29297: CALL 67837 0 2
29301: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
29302: LD_VAR 0 3
29306: PPUSH
29307: LD_INT 502
29309: PPUSH
29310: CALL_OW 109
// end ;
29314: GO 29158
29316: POP
29317: POP
// if not scaners then
29318: LD_VAR 0 6
29322: NOT
29323: IFFALSE 29327
// exit ;
29325: GO 29605
// wait ( 3 ) ;
29327: LD_INT 3
29329: PPUSH
29330: CALL_OW 67
// timer := 6 ;
29334: LD_ADDR_VAR 0 7
29338: PUSH
29339: LD_INT 6
29341: ST_TO_ADDR
// repeat for i in scaners do
29342: LD_ADDR_VAR 0 3
29346: PUSH
29347: LD_VAR 0 6
29351: PUSH
29352: FOR_IN
29353: IFFALSE 29503
// begin side := GetSide ( i ) ;
29355: LD_ADDR_VAR 0 8
29359: PUSH
29360: LD_VAR 0 3
29364: PPUSH
29365: CALL_OW 255
29369: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
29370: LD_VAR 0 3
29374: PPUSH
29375: CALL_OW 302
29379: NOT
29380: IFTRUE 29393
29382: PUSH
29383: LD_VAR 0 3
29387: PPUSH
29388: CALL_OW 314
29392: OR
29393: IFTRUE 29424
29395: PUSH
29396: LD_VAR 0 3
29400: PPUSH
29401: CALL_OW 263
29405: PUSH
29406: LD_INT 1
29408: EQUAL
29409: IFFALSE 29423
29411: PUSH
29412: LD_VAR 0 3
29416: PPUSH
29417: CALL_OW 311
29421: NOT
29422: AND
29423: OR
29424: IFFALSE 29468
// begin SetUnitDisplayNumber ( i , 0 ) ;
29426: LD_VAR 0 3
29430: PPUSH
29431: LD_INT 0
29433: PPUSH
29434: CALL_OW 505
// SetTag ( i , 0 ) ;
29438: LD_VAR 0 3
29442: PPUSH
29443: LD_INT 0
29445: PPUSH
29446: CALL_OW 109
// scaners := scaners diff i ;
29450: LD_ADDR_VAR 0 6
29454: PUSH
29455: LD_VAR 0 6
29459: PUSH
29460: LD_VAR 0 3
29464: DIFF
29465: ST_TO_ADDR
// continue ;
29466: GO 29352
// end ; if side in [ your_side , 9 ] then
29468: LD_VAR 0 8
29472: PUSH
29473: LD_OWVAR 2
29477: PUSH
29478: LD_INT 9
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: IN
29485: IFFALSE 29501
// SetUnitDisplayNumber ( i , timer ) ;
29487: LD_VAR 0 3
29491: PPUSH
29492: LD_VAR 0 7
29496: PPUSH
29497: CALL_OW 505
// end ;
29501: GO 29352
29503: POP
29504: POP
// if not scaners then
29505: LD_VAR 0 6
29509: NOT
29510: IFFALSE 29514
// exit ;
29512: GO 29605
// timer := Dec ( timer ) ;
29514: LD_ADDR_VAR 0 7
29518: PUSH
29519: LD_VAR 0 7
29523: PPUSH
29524: CALL 69232 0 1
29528: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29529: LD_INT 35
29531: PPUSH
29532: CALL_OW 67
// until timer = 0 ;
29536: LD_VAR 0 7
29540: PUSH
29541: LD_INT 0
29543: EQUAL
29544: IFFALSE 29342
// if not scaners then
29546: LD_VAR 0 6
29550: NOT
29551: IFFALSE 29555
// exit ;
29553: GO 29605
// for i in scaners do
29555: LD_ADDR_VAR 0 3
29559: PUSH
29560: LD_VAR 0 6
29564: PUSH
29565: FOR_IN
29566: IFFALSE 29603
// begin SetUnitDisplayNumber ( i , 0 ) ;
29568: LD_VAR 0 3
29572: PPUSH
29573: LD_INT 0
29575: PPUSH
29576: CALL_OW 505
// SetTag ( i , 0 ) ;
29580: LD_VAR 0 3
29584: PPUSH
29585: LD_INT 0
29587: PPUSH
29588: CALL_OW 109
// RevealDetectorMine ( i ) ;
29592: LD_VAR 0 3
29596: PPUSH
29597: CALL 28825 0 1
// end ;
29601: GO 29565
29603: POP
29604: POP
// end ;
29605: LD_VAR 0 2
29609: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
29610: LD_INT 0
29612: PPUSH
// if p1 = mine_detector_mode then
29613: LD_VAR 0 2
29617: PUSH
29618: LD_INT 103
29620: EQUAL
29621: IFFALSE 29632
// DetectMine ( units ) ;
29623: LD_VAR 0 1
29627: PPUSH
29628: CALL 29123 0 1
// end ; end_of_file
29632: LD_VAR 0 7
29636: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29637: LD_INT 0
29639: PPUSH
29640: PPUSH
// if exist_mode then
29641: LD_VAR 0 2
29645: IFFALSE 29691
// begin unit := CreateCharacter ( prefix & ident ) ;
29647: LD_ADDR_VAR 0 5
29651: PUSH
29652: LD_VAR 0 3
29656: PUSH
29657: LD_VAR 0 1
29661: STR
29662: PPUSH
29663: CALL_OW 34
29667: ST_TO_ADDR
// if unit then
29668: LD_VAR 0 5
29672: IFFALSE 29689
// DeleteCharacters ( prefix & ident ) ;
29674: LD_VAR 0 3
29678: PUSH
29679: LD_VAR 0 1
29683: STR
29684: PPUSH
29685: CALL_OW 40
// end else
29689: GO 29706
// unit := NewCharacter ( ident ) ;
29691: LD_ADDR_VAR 0 5
29695: PUSH
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 25
29705: ST_TO_ADDR
// result := unit ;
29706: LD_ADDR_VAR 0 4
29710: PUSH
29711: LD_VAR 0 5
29715: ST_TO_ADDR
// end ;
29716: LD_VAR 0 4
29720: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
29721: LD_INT 0
29723: PPUSH
29724: PPUSH
// if exist_mode then
29725: LD_VAR 0 2
29729: IFFALSE 29754
// unit := CreateCharacter ( prefix & ident ) else
29731: LD_ADDR_VAR 0 5
29735: PUSH
29736: LD_VAR 0 3
29740: PUSH
29741: LD_VAR 0 1
29745: STR
29746: PPUSH
29747: CALL_OW 34
29751: ST_TO_ADDR
29752: GO 29769
// unit := NewCharacter ( ident ) ;
29754: LD_ADDR_VAR 0 5
29758: PUSH
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL_OW 25
29768: ST_TO_ADDR
// result := unit ;
29769: LD_ADDR_VAR 0 4
29773: PUSH
29774: LD_VAR 0 5
29778: ST_TO_ADDR
// end ;
29779: LD_VAR 0 4
29783: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29784: LD_INT 0
29786: PPUSH
29787: PPUSH
// if not side or not nation then
29788: LD_VAR 0 1
29792: NOT
29793: IFTRUE 29802
29795: PUSH
29796: LD_VAR 0 2
29800: NOT
29801: OR
29802: IFFALSE 29806
// exit ;
29804: GO 30600
// case nation of nation_american :
29806: LD_VAR 0 2
29810: PUSH
29811: LD_INT 1
29813: DOUBLE
29814: EQUAL
29815: IFTRUE 29819
29817: GO 30041
29819: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
29820: LD_ADDR_VAR 0 4
29824: PUSH
29825: LD_INT 35
29827: PUSH
29828: LD_INT 45
29830: PUSH
29831: LD_INT 46
29833: PUSH
29834: LD_INT 47
29836: PUSH
29837: LD_INT 82
29839: PUSH
29840: LD_INT 83
29842: PUSH
29843: LD_INT 84
29845: PUSH
29846: LD_INT 85
29848: PUSH
29849: LD_INT 86
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: LD_INT 6
29860: PUSH
29861: LD_INT 15
29863: PUSH
29864: LD_INT 16
29866: PUSH
29867: LD_INT 7
29869: PUSH
29870: LD_INT 12
29872: PUSH
29873: LD_INT 13
29875: PUSH
29876: LD_INT 10
29878: PUSH
29879: LD_INT 14
29881: PUSH
29882: LD_INT 20
29884: PUSH
29885: LD_INT 21
29887: PUSH
29888: LD_INT 22
29890: PUSH
29891: LD_INT 25
29893: PUSH
29894: LD_INT 32
29896: PUSH
29897: LD_INT 27
29899: PUSH
29900: LD_INT 36
29902: PUSH
29903: LD_INT 69
29905: PUSH
29906: LD_INT 39
29908: PUSH
29909: LD_INT 34
29911: PUSH
29912: LD_INT 40
29914: PUSH
29915: LD_INT 48
29917: PUSH
29918: LD_INT 49
29920: PUSH
29921: LD_INT 50
29923: PUSH
29924: LD_INT 51
29926: PUSH
29927: LD_INT 52
29929: PUSH
29930: LD_INT 53
29932: PUSH
29933: LD_INT 54
29935: PUSH
29936: LD_INT 55
29938: PUSH
29939: LD_INT 56
29941: PUSH
29942: LD_INT 57
29944: PUSH
29945: LD_INT 58
29947: PUSH
29948: LD_INT 59
29950: PUSH
29951: LD_INT 60
29953: PUSH
29954: LD_INT 61
29956: PUSH
29957: LD_INT 62
29959: PUSH
29960: LD_INT 80
29962: PUSH
29963: LD_INT 82
29965: PUSH
29966: LD_INT 83
29968: PUSH
29969: LD_INT 84
29971: PUSH
29972: LD_INT 85
29974: PUSH
29975: LD_INT 86
29977: PUSH
29978: LD_INT 90
29980: PUSH
29981: LD_INT 93
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: ST_TO_ADDR
30039: GO 30522
30041: LD_INT 2
30043: DOUBLE
30044: EQUAL
30045: IFTRUE 30049
30047: GO 30283
30049: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30050: LD_ADDR_VAR 0 4
30054: PUSH
30055: LD_INT 35
30057: PUSH
30058: LD_INT 45
30060: PUSH
30061: LD_INT 46
30063: PUSH
30064: LD_INT 47
30066: PUSH
30067: LD_INT 82
30069: PUSH
30070: LD_INT 83
30072: PUSH
30073: LD_INT 84
30075: PUSH
30076: LD_INT 85
30078: PUSH
30079: LD_INT 87
30081: PUSH
30082: LD_INT 70
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: LD_INT 11
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: LD_INT 4
30096: PUSH
30097: LD_INT 5
30099: PUSH
30100: LD_INT 6
30102: PUSH
30103: LD_INT 15
30105: PUSH
30106: LD_INT 18
30108: PUSH
30109: LD_INT 7
30111: PUSH
30112: LD_INT 17
30114: PUSH
30115: LD_INT 8
30117: PUSH
30118: LD_INT 20
30120: PUSH
30121: LD_INT 21
30123: PUSH
30124: LD_INT 22
30126: PUSH
30127: LD_INT 72
30129: PUSH
30130: LD_INT 26
30132: PUSH
30133: LD_INT 69
30135: PUSH
30136: LD_INT 39
30138: PUSH
30139: LD_INT 40
30141: PUSH
30142: LD_INT 41
30144: PUSH
30145: LD_INT 42
30147: PUSH
30148: LD_INT 43
30150: PUSH
30151: LD_INT 48
30153: PUSH
30154: LD_INT 49
30156: PUSH
30157: LD_INT 50
30159: PUSH
30160: LD_INT 51
30162: PUSH
30163: LD_INT 52
30165: PUSH
30166: LD_INT 53
30168: PUSH
30169: LD_INT 54
30171: PUSH
30172: LD_INT 55
30174: PUSH
30175: LD_INT 56
30177: PUSH
30178: LD_INT 60
30180: PUSH
30181: LD_INT 61
30183: PUSH
30184: LD_INT 62
30186: PUSH
30187: LD_INT 66
30189: PUSH
30190: LD_INT 67
30192: PUSH
30193: LD_INT 68
30195: PUSH
30196: LD_INT 81
30198: PUSH
30199: LD_INT 82
30201: PUSH
30202: LD_INT 83
30204: PUSH
30205: LD_INT 84
30207: PUSH
30208: LD_INT 85
30210: PUSH
30211: LD_INT 87
30213: PUSH
30214: LD_INT 88
30216: PUSH
30217: LD_INT 92
30219: PUSH
30220: LD_INT 94
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: ST_TO_ADDR
30281: GO 30522
30283: LD_INT 3
30285: DOUBLE
30286: EQUAL
30287: IFTRUE 30291
30289: GO 30521
30291: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30292: LD_ADDR_VAR 0 4
30296: PUSH
30297: LD_INT 46
30299: PUSH
30300: LD_INT 47
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: LD_INT 82
30311: PUSH
30312: LD_INT 83
30314: PUSH
30315: LD_INT 84
30317: PUSH
30318: LD_INT 85
30320: PUSH
30321: LD_INT 86
30323: PUSH
30324: LD_INT 11
30326: PUSH
30327: LD_INT 9
30329: PUSH
30330: LD_INT 20
30332: PUSH
30333: LD_INT 19
30335: PUSH
30336: LD_INT 21
30338: PUSH
30339: LD_INT 24
30341: PUSH
30342: LD_INT 22
30344: PUSH
30345: LD_INT 25
30347: PUSH
30348: LD_INT 28
30350: PUSH
30351: LD_INT 29
30353: PUSH
30354: LD_INT 30
30356: PUSH
30357: LD_INT 31
30359: PUSH
30360: LD_INT 37
30362: PUSH
30363: LD_INT 38
30365: PUSH
30366: LD_INT 32
30368: PUSH
30369: LD_INT 27
30371: PUSH
30372: LD_INT 33
30374: PUSH
30375: LD_INT 69
30377: PUSH
30378: LD_INT 39
30380: PUSH
30381: LD_INT 34
30383: PUSH
30384: LD_INT 40
30386: PUSH
30387: LD_INT 71
30389: PUSH
30390: LD_INT 23
30392: PUSH
30393: LD_INT 44
30395: PUSH
30396: LD_INT 48
30398: PUSH
30399: LD_INT 49
30401: PUSH
30402: LD_INT 50
30404: PUSH
30405: LD_INT 51
30407: PUSH
30408: LD_INT 52
30410: PUSH
30411: LD_INT 53
30413: PUSH
30414: LD_INT 54
30416: PUSH
30417: LD_INT 55
30419: PUSH
30420: LD_INT 56
30422: PUSH
30423: LD_INT 57
30425: PUSH
30426: LD_INT 58
30428: PUSH
30429: LD_INT 59
30431: PUSH
30432: LD_INT 63
30434: PUSH
30435: LD_INT 64
30437: PUSH
30438: LD_INT 65
30440: PUSH
30441: LD_INT 82
30443: PUSH
30444: LD_INT 83
30446: PUSH
30447: LD_INT 84
30449: PUSH
30450: LD_INT 85
30452: PUSH
30453: LD_INT 86
30455: PUSH
30456: LD_INT 89
30458: PUSH
30459: LD_INT 91
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: ST_TO_ADDR
30519: GO 30522
30521: POP
// if state > - 1 and state < 3 then
30522: LD_VAR 0 3
30526: PUSH
30527: LD_INT 1
30529: NEG
30530: GREATER
30531: IFFALSE 30543
30533: PUSH
30534: LD_VAR 0 3
30538: PUSH
30539: LD_INT 3
30541: LESS
30542: AND
30543: IFFALSE 30600
// for i in result do
30545: LD_ADDR_VAR 0 5
30549: PUSH
30550: LD_VAR 0 4
30554: PUSH
30555: FOR_IN
30556: IFFALSE 30598
// if GetTech ( i , side ) <> state then
30558: LD_VAR 0 5
30562: PPUSH
30563: LD_VAR 0 1
30567: PPUSH
30568: CALL_OW 321
30572: PUSH
30573: LD_VAR 0 3
30577: NONEQUAL
30578: IFFALSE 30596
// result := result diff i ;
30580: LD_ADDR_VAR 0 4
30584: PUSH
30585: LD_VAR 0 4
30589: PUSH
30590: LD_VAR 0 5
30594: DIFF
30595: ST_TO_ADDR
30596: GO 30555
30598: POP
30599: POP
// end ;
30600: LD_VAR 0 4
30604: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30605: LD_INT 0
30607: PPUSH
30608: PPUSH
30609: PPUSH
// result := true ;
30610: LD_ADDR_VAR 0 3
30614: PUSH
30615: LD_INT 1
30617: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30618: LD_ADDR_VAR 0 5
30622: PUSH
30623: LD_VAR 0 2
30627: PPUSH
30628: CALL_OW 480
30632: ST_TO_ADDR
// if not tmp then
30633: LD_VAR 0 5
30637: NOT
30638: IFFALSE 30642
// exit ;
30640: GO 30691
// for i in tmp do
30642: LD_ADDR_VAR 0 4
30646: PUSH
30647: LD_VAR 0 5
30651: PUSH
30652: FOR_IN
30653: IFFALSE 30689
// if GetTech ( i , side ) <> state_researched then
30655: LD_VAR 0 4
30659: PPUSH
30660: LD_VAR 0 1
30664: PPUSH
30665: CALL_OW 321
30669: PUSH
30670: LD_INT 2
30672: NONEQUAL
30673: IFFALSE 30687
// begin result := false ;
30675: LD_ADDR_VAR 0 3
30679: PUSH
30680: LD_INT 0
30682: ST_TO_ADDR
// exit ;
30683: POP
30684: POP
30685: GO 30691
// end ;
30687: GO 30652
30689: POP
30690: POP
// end ;
30691: LD_VAR 0 3
30695: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30696: LD_INT 0
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
30706: PPUSH
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30711: LD_VAR 0 1
30715: NOT
30716: IFTRUE 30733
30718: PUSH
30719: LD_VAR 0 1
30723: PPUSH
30724: CALL_OW 257
30728: PUSH
30729: LD_INT 9
30731: NONEQUAL
30732: OR
30733: IFFALSE 30737
// exit ;
30735: GO 31316
// side := GetSide ( unit ) ;
30737: LD_ADDR_VAR 0 9
30741: PUSH
30742: LD_VAR 0 1
30746: PPUSH
30747: CALL_OW 255
30751: ST_TO_ADDR
// tech_space := tech_spacanom ;
30752: LD_ADDR_VAR 0 12
30756: PUSH
30757: LD_INT 29
30759: ST_TO_ADDR
// tech_time := tech_taurad ;
30760: LD_ADDR_VAR 0 13
30764: PUSH
30765: LD_INT 28
30767: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30768: LD_ADDR_VAR 0 11
30772: PUSH
30773: LD_VAR 0 1
30777: PPUSH
30778: CALL_OW 310
30782: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30783: LD_VAR 0 11
30787: PPUSH
30788: CALL_OW 247
30792: PUSH
30793: LD_INT 2
30795: EQUAL
30796: IFFALSE 30800
// exit ;
30798: GO 31316
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30800: LD_ADDR_VAR 0 8
30804: PUSH
30805: LD_INT 81
30807: PUSH
30808: LD_VAR 0 9
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 3
30819: PUSH
30820: LD_INT 21
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PPUSH
30838: CALL_OW 69
30842: ST_TO_ADDR
// if not tmp then
30843: LD_VAR 0 8
30847: NOT
30848: IFFALSE 30852
// exit ;
30850: GO 31316
// if in_unit then
30852: LD_VAR 0 11
30856: IFFALSE 30880
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30858: LD_ADDR_VAR 0 10
30862: PUSH
30863: LD_VAR 0 8
30867: PPUSH
30868: LD_VAR 0 11
30872: PPUSH
30873: CALL_OW 74
30877: ST_TO_ADDR
30878: GO 30900
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30880: LD_ADDR_VAR 0 10
30884: PUSH
30885: LD_VAR 0 8
30889: PPUSH
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 74
30899: ST_TO_ADDR
// if not enemy then
30900: LD_VAR 0 10
30904: NOT
30905: IFFALSE 30909
// exit ;
30907: GO 31316
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30909: LD_VAR 0 11
30913: IFFALSE 30935
30915: PUSH
30916: LD_VAR 0 11
30920: PPUSH
30921: LD_VAR 0 10
30925: PPUSH
30926: CALL_OW 296
30930: PUSH
30931: LD_INT 13
30933: GREATER
30934: AND
30935: IFTRUE 30957
30937: PUSH
30938: LD_VAR 0 1
30942: PPUSH
30943: LD_VAR 0 10
30947: PPUSH
30948: CALL_OW 296
30952: PUSH
30953: LD_INT 12
30955: GREATER
30956: OR
30957: IFFALSE 30961
// exit ;
30959: GO 31316
// missile := [ 1 ] ;
30961: LD_ADDR_VAR 0 14
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: EMPTY
30970: LIST
30971: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30972: LD_VAR 0 9
30976: PPUSH
30977: LD_VAR 0 12
30981: PPUSH
30982: CALL_OW 325
30986: IFFALSE 31015
// missile := Replace ( missile , missile + 1 , 2 ) ;
30988: LD_ADDR_VAR 0 14
30992: PUSH
30993: LD_VAR 0 14
30997: PPUSH
30998: LD_VAR 0 14
31002: PUSH
31003: LD_INT 1
31005: PLUS
31006: PPUSH
31007: LD_INT 2
31009: PPUSH
31010: CALL_OW 1
31014: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31015: LD_VAR 0 9
31019: PPUSH
31020: LD_VAR 0 13
31024: PPUSH
31025: CALL_OW 325
31029: IFFALSE 31053
31031: PUSH
31032: LD_VAR 0 10
31036: PPUSH
31037: CALL_OW 255
31041: PPUSH
31042: LD_VAR 0 13
31046: PPUSH
31047: CALL_OW 325
31051: NOT
31052: AND
31053: IFFALSE 31082
// missile := Replace ( missile , missile + 1 , 3 ) ;
31055: LD_ADDR_VAR 0 14
31059: PUSH
31060: LD_VAR 0 14
31064: PPUSH
31065: LD_VAR 0 14
31069: PUSH
31070: LD_INT 1
31072: PLUS
31073: PPUSH
31074: LD_INT 3
31076: PPUSH
31077: CALL_OW 1
31081: ST_TO_ADDR
// if missile < 2 then
31082: LD_VAR 0 14
31086: PUSH
31087: LD_INT 2
31089: LESS
31090: IFFALSE 31094
// exit ;
31092: GO 31316
// x := GetX ( enemy ) ;
31094: LD_ADDR_VAR 0 4
31098: PUSH
31099: LD_VAR 0 10
31103: PPUSH
31104: CALL_OW 250
31108: ST_TO_ADDR
// y := GetY ( enemy ) ;
31109: LD_ADDR_VAR 0 5
31113: PUSH
31114: LD_VAR 0 10
31118: PPUSH
31119: CALL_OW 251
31123: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31124: LD_ADDR_VAR 0 6
31128: PUSH
31129: LD_VAR 0 4
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PPUSH
31138: LD_INT 1
31140: PPUSH
31141: CALL_OW 12
31145: PLUS
31146: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31147: LD_ADDR_VAR 0 7
31151: PUSH
31152: LD_VAR 0 5
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PPUSH
31161: LD_INT 1
31163: PPUSH
31164: CALL_OW 12
31168: PLUS
31169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31170: LD_VAR 0 6
31174: PPUSH
31175: LD_VAR 0 7
31179: PPUSH
31180: CALL_OW 488
31184: NOT
31185: IFFALSE 31207
// begin _x := x ;
31187: LD_ADDR_VAR 0 6
31191: PUSH
31192: LD_VAR 0 4
31196: ST_TO_ADDR
// _y := y ;
31197: LD_ADDR_VAR 0 7
31201: PUSH
31202: LD_VAR 0 5
31206: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31207: LD_ADDR_VAR 0 3
31211: PUSH
31212: LD_INT 1
31214: PPUSH
31215: LD_VAR 0 14
31219: PPUSH
31220: CALL_OW 12
31224: ST_TO_ADDR
// case i of 1 :
31225: LD_VAR 0 3
31229: PUSH
31230: LD_INT 1
31232: DOUBLE
31233: EQUAL
31234: IFTRUE 31238
31236: GO 31255
31238: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31239: LD_VAR 0 1
31243: PPUSH
31244: LD_VAR 0 10
31248: PPUSH
31249: CALL_OW 115
31253: GO 31316
31255: LD_INT 2
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31263
31261: GO 31285
31263: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31264: LD_VAR 0 1
31268: PPUSH
31269: LD_VAR 0 6
31273: PPUSH
31274: LD_VAR 0 7
31278: PPUSH
31279: CALL_OW 153
31283: GO 31316
31285: LD_INT 3
31287: DOUBLE
31288: EQUAL
31289: IFTRUE 31293
31291: GO 31315
31293: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31294: LD_VAR 0 1
31298: PPUSH
31299: LD_VAR 0 6
31303: PPUSH
31304: LD_VAR 0 7
31308: PPUSH
31309: CALL_OW 154
31313: GO 31316
31315: POP
// end ;
31316: LD_VAR 0 2
31320: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31321: LD_INT 0
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
// if not unit or not building then
31329: LD_VAR 0 1
31333: NOT
31334: IFTRUE 31343
31336: PUSH
31337: LD_VAR 0 2
31341: NOT
31342: OR
31343: IFFALSE 31347
// exit ;
31345: GO 31505
// x := GetX ( building ) ;
31347: LD_ADDR_VAR 0 5
31351: PUSH
31352: LD_VAR 0 2
31356: PPUSH
31357: CALL_OW 250
31361: ST_TO_ADDR
// y := GetY ( building ) ;
31362: LD_ADDR_VAR 0 6
31366: PUSH
31367: LD_VAR 0 2
31371: PPUSH
31372: CALL_OW 251
31376: ST_TO_ADDR
// for i := 0 to 5 do
31377: LD_ADDR_VAR 0 4
31381: PUSH
31382: DOUBLE
31383: LD_INT 0
31385: DEC
31386: ST_TO_ADDR
31387: LD_INT 5
31389: PUSH
31390: FOR_TO
31391: IFFALSE 31503
// begin _x := ShiftX ( x , i , 3 ) ;
31393: LD_ADDR_VAR 0 7
31397: PUSH
31398: LD_VAR 0 5
31402: PPUSH
31403: LD_VAR 0 4
31407: PPUSH
31408: LD_INT 3
31410: PPUSH
31411: CALL_OW 272
31415: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31416: LD_ADDR_VAR 0 8
31420: PUSH
31421: LD_VAR 0 6
31425: PPUSH
31426: LD_VAR 0 4
31430: PPUSH
31431: LD_INT 3
31433: PPUSH
31434: CALL_OW 273
31438: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31439: LD_VAR 0 7
31443: PPUSH
31444: LD_VAR 0 8
31448: PPUSH
31449: CALL_OW 488
31453: NOT
31454: IFFALSE 31458
// continue ;
31456: GO 31390
// if HexInfo ( _x , _y ) = 0 then
31458: LD_VAR 0 7
31462: PPUSH
31463: LD_VAR 0 8
31467: PPUSH
31468: CALL_OW 428
31472: PUSH
31473: LD_INT 0
31475: EQUAL
31476: IFFALSE 31501
// begin ComMoveXY ( unit , _x , _y ) ;
31478: LD_VAR 0 1
31482: PPUSH
31483: LD_VAR 0 7
31487: PPUSH
31488: LD_VAR 0 8
31492: PPUSH
31493: CALL_OW 111
// exit ;
31497: POP
31498: POP
31499: GO 31505
// end ; end ;
31501: GO 31390
31503: POP
31504: POP
// end ;
31505: LD_VAR 0 3
31509: RET
// export function ScanBase ( side , base_area ) ; begin
31510: LD_INT 0
31512: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31513: LD_ADDR_VAR 0 3
31517: PUSH
31518: LD_VAR 0 2
31522: PPUSH
31523: LD_INT 81
31525: PUSH
31526: LD_VAR 0 1
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PPUSH
31535: CALL_OW 70
31539: ST_TO_ADDR
// end ;
31540: LD_VAR 0 3
31544: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31545: LD_INT 0
31547: PPUSH
31548: PPUSH
31549: PPUSH
31550: PPUSH
// result := false ;
31551: LD_ADDR_VAR 0 2
31555: PUSH
31556: LD_INT 0
31558: ST_TO_ADDR
// side := GetSide ( unit ) ;
31559: LD_ADDR_VAR 0 3
31563: PUSH
31564: LD_VAR 0 1
31568: PPUSH
31569: CALL_OW 255
31573: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31574: LD_ADDR_VAR 0 4
31578: PUSH
31579: LD_VAR 0 1
31583: PPUSH
31584: CALL_OW 248
31588: ST_TO_ADDR
// case nat of 1 :
31589: LD_VAR 0 4
31593: PUSH
31594: LD_INT 1
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31602
31600: GO 31613
31602: POP
// tech := tech_lassight ; 2 :
31603: LD_ADDR_VAR 0 5
31607: PUSH
31608: LD_INT 12
31610: ST_TO_ADDR
31611: GO 31652
31613: LD_INT 2
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31632
31621: POP
// tech := tech_mortar ; 3 :
31622: LD_ADDR_VAR 0 5
31626: PUSH
31627: LD_INT 41
31629: ST_TO_ADDR
31630: GO 31652
31632: LD_INT 3
31634: DOUBLE
31635: EQUAL
31636: IFTRUE 31640
31638: GO 31651
31640: POP
// tech := tech_bazooka ; end ;
31641: LD_ADDR_VAR 0 5
31645: PUSH
31646: LD_INT 44
31648: ST_TO_ADDR
31649: GO 31652
31651: POP
// if Researched ( side , tech ) then
31652: LD_VAR 0 3
31656: PPUSH
31657: LD_VAR 0 5
31661: PPUSH
31662: CALL_OW 325
31666: IFFALSE 31693
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31668: LD_ADDR_VAR 0 2
31672: PUSH
31673: LD_INT 5
31675: PUSH
31676: LD_INT 8
31678: PUSH
31679: LD_INT 9
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: LIST
31686: PUSH
31687: LD_VAR 0 4
31691: ARRAY
31692: ST_TO_ADDR
// end ;
31693: LD_VAR 0 2
31697: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
31702: PPUSH
// if not mines then
31703: LD_VAR 0 2
31707: NOT
31708: IFFALSE 31712
// exit ;
31710: GO 31856
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31712: LD_ADDR_VAR 0 5
31716: PUSH
31717: LD_INT 81
31719: PUSH
31720: LD_VAR 0 1
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 3
31731: PUSH
31732: LD_INT 21
31734: PUSH
31735: LD_INT 3
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PPUSH
31750: CALL_OW 69
31754: ST_TO_ADDR
// for i in mines do
31755: LD_ADDR_VAR 0 4
31759: PUSH
31760: LD_VAR 0 2
31764: PUSH
31765: FOR_IN
31766: IFFALSE 31854
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31768: LD_VAR 0 4
31772: PUSH
31773: LD_INT 1
31775: ARRAY
31776: PPUSH
31777: LD_VAR 0 4
31781: PUSH
31782: LD_INT 2
31784: ARRAY
31785: PPUSH
31786: CALL_OW 458
31790: NOT
31791: IFFALSE 31795
// continue ;
31793: GO 31765
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31795: LD_VAR 0 4
31799: PUSH
31800: LD_INT 1
31802: ARRAY
31803: PPUSH
31804: LD_VAR 0 4
31808: PUSH
31809: LD_INT 2
31811: ARRAY
31812: PPUSH
31813: CALL_OW 428
31817: PUSH
31818: LD_VAR 0 5
31822: IN
31823: IFFALSE 31852
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31825: LD_VAR 0 4
31829: PUSH
31830: LD_INT 1
31832: ARRAY
31833: PPUSH
31834: LD_VAR 0 4
31838: PUSH
31839: LD_INT 2
31841: ARRAY
31842: PPUSH
31843: LD_VAR 0 1
31847: PPUSH
31848: CALL_OW 456
// end ;
31852: GO 31765
31854: POP
31855: POP
// end ;
31856: LD_VAR 0 3
31860: RET
// export function Count ( array ) ; begin
31861: LD_INT 0
31863: PPUSH
// result := array + 0 ;
31864: LD_ADDR_VAR 0 2
31868: PUSH
31869: LD_VAR 0 1
31873: PUSH
31874: LD_INT 0
31876: PLUS
31877: ST_TO_ADDR
// end ;
31878: LD_VAR 0 2
31882: RET
// export function IsEmpty ( building ) ; begin
31883: LD_INT 0
31885: PPUSH
// if not building then
31886: LD_VAR 0 1
31890: NOT
31891: IFFALSE 31895
// exit ;
31893: GO 31938
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31895: LD_ADDR_VAR 0 2
31899: PUSH
31900: LD_VAR 0 1
31904: PUSH
31905: LD_INT 22
31907: PUSH
31908: LD_VAR 0 1
31912: PPUSH
31913: CALL_OW 255
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 58
31924: PUSH
31925: EMPTY
31926: LIST
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PPUSH
31932: CALL_OW 69
31936: IN
31937: ST_TO_ADDR
// end ;
31938: LD_VAR 0 2
31942: RET
// export function IsNotFull ( building ) ; var places ; begin
31943: LD_INT 0
31945: PPUSH
31946: PPUSH
// if not building then
31947: LD_VAR 0 1
31951: NOT
31952: IFFALSE 31956
// exit ;
31954: GO 31984
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31956: LD_ADDR_VAR 0 2
31960: PUSH
31961: LD_VAR 0 1
31965: PPUSH
31966: LD_INT 3
31968: PUSH
31969: LD_INT 62
31971: PUSH
31972: EMPTY
31973: LIST
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PPUSH
31979: CALL_OW 72
31983: ST_TO_ADDR
// end ;
31984: LD_VAR 0 2
31988: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31989: LD_INT 0
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
// tmp := [ ] ;
31995: LD_ADDR_VAR 0 3
31999: PUSH
32000: EMPTY
32001: ST_TO_ADDR
// list := [ ] ;
32002: LD_ADDR_VAR 0 5
32006: PUSH
32007: EMPTY
32008: ST_TO_ADDR
// for i = 16 to 25 do
32009: LD_ADDR_VAR 0 4
32013: PUSH
32014: DOUBLE
32015: LD_INT 16
32017: DEC
32018: ST_TO_ADDR
32019: LD_INT 25
32021: PUSH
32022: FOR_TO
32023: IFFALSE 32096
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32025: LD_ADDR_VAR 0 3
32029: PUSH
32030: LD_VAR 0 3
32034: PUSH
32035: LD_INT 22
32037: PUSH
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL_OW 255
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 91
32054: PUSH
32055: LD_VAR 0 1
32059: PUSH
32060: LD_INT 6
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 30
32070: PUSH
32071: LD_VAR 0 4
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: PUSH
32085: EMPTY
32086: LIST
32087: PPUSH
32088: CALL_OW 69
32092: ADD
32093: ST_TO_ADDR
32094: GO 32022
32096: POP
32097: POP
// for i = 1 to tmp do
32098: LD_ADDR_VAR 0 4
32102: PUSH
32103: DOUBLE
32104: LD_INT 1
32106: DEC
32107: ST_TO_ADDR
32108: LD_VAR 0 3
32112: PUSH
32113: FOR_TO
32114: IFFALSE 32202
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32116: LD_ADDR_VAR 0 5
32120: PUSH
32121: LD_VAR 0 5
32125: PUSH
32126: LD_VAR 0 3
32130: PUSH
32131: LD_VAR 0 4
32135: ARRAY
32136: PPUSH
32137: CALL_OW 266
32141: PUSH
32142: LD_VAR 0 3
32146: PUSH
32147: LD_VAR 0 4
32151: ARRAY
32152: PPUSH
32153: CALL_OW 250
32157: PUSH
32158: LD_VAR 0 3
32162: PUSH
32163: LD_VAR 0 4
32167: ARRAY
32168: PPUSH
32169: CALL_OW 251
32173: PUSH
32174: LD_VAR 0 3
32178: PUSH
32179: LD_VAR 0 4
32183: ARRAY
32184: PPUSH
32185: CALL_OW 254
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: PUSH
32196: EMPTY
32197: LIST
32198: ADD
32199: ST_TO_ADDR
32200: GO 32113
32202: POP
32203: POP
// result := list ;
32204: LD_ADDR_VAR 0 2
32208: PUSH
32209: LD_VAR 0 5
32213: ST_TO_ADDR
// end ;
32214: LD_VAR 0 2
32218: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32219: LD_INT 0
32221: PPUSH
32222: PPUSH
32223: PPUSH
32224: PPUSH
32225: PPUSH
32226: PPUSH
32227: PPUSH
// if not factory then
32228: LD_VAR 0 1
32232: NOT
32233: IFFALSE 32237
// exit ;
32235: GO 32840
// if control = control_apeman then
32237: LD_VAR 0 4
32241: PUSH
32242: LD_INT 5
32244: EQUAL
32245: IFFALSE 32354
// begin tmp := UnitsInside ( factory ) ;
32247: LD_ADDR_VAR 0 8
32251: PUSH
32252: LD_VAR 0 1
32256: PPUSH
32257: CALL_OW 313
32261: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32262: LD_VAR 0 8
32266: PPUSH
32267: LD_INT 25
32269: PUSH
32270: LD_INT 12
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PPUSH
32277: CALL_OW 72
32281: NOT
32282: IFFALSE 32292
// control := control_manual ;
32284: LD_ADDR_VAR 0 4
32288: PUSH
32289: LD_INT 1
32291: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32292: LD_ADDR_VAR 0 8
32296: PUSH
32297: LD_VAR 0 1
32301: PPUSH
32302: CALL 31989 0 1
32306: ST_TO_ADDR
// if tmp then
32307: LD_VAR 0 8
32311: IFFALSE 32354
// begin for i in tmp do
32313: LD_ADDR_VAR 0 7
32317: PUSH
32318: LD_VAR 0 8
32322: PUSH
32323: FOR_IN
32324: IFFALSE 32352
// if i [ 1 ] = b_ext_radio then
32326: LD_VAR 0 7
32330: PUSH
32331: LD_INT 1
32333: ARRAY
32334: PUSH
32335: LD_INT 22
32337: EQUAL
32338: IFFALSE 32350
// begin control := control_remote ;
32340: LD_ADDR_VAR 0 4
32344: PUSH
32345: LD_INT 2
32347: ST_TO_ADDR
// break ;
32348: GO 32352
// end ;
32350: GO 32323
32352: POP
32353: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32354: LD_VAR 0 1
32358: PPUSH
32359: LD_VAR 0 2
32363: PPUSH
32364: LD_VAR 0 3
32368: PPUSH
32369: LD_VAR 0 4
32373: PPUSH
32374: LD_VAR 0 5
32378: PPUSH
32379: CALL_OW 448
32383: IFFALSE 32418
// begin result := [ chassis , engine , control , weapon ] ;
32385: LD_ADDR_VAR 0 6
32389: PUSH
32390: LD_VAR 0 2
32394: PUSH
32395: LD_VAR 0 3
32399: PUSH
32400: LD_VAR 0 4
32404: PUSH
32405: LD_VAR 0 5
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: ST_TO_ADDR
// exit ;
32416: GO 32840
// end ; _chassis := AvailableChassisList ( factory ) ;
32418: LD_ADDR_VAR 0 9
32422: PUSH
32423: LD_VAR 0 1
32427: PPUSH
32428: CALL_OW 475
32432: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32433: LD_ADDR_VAR 0 11
32437: PUSH
32438: LD_VAR 0 1
32442: PPUSH
32443: CALL_OW 476
32447: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32448: LD_ADDR_VAR 0 12
32452: PUSH
32453: LD_VAR 0 1
32457: PPUSH
32458: CALL_OW 477
32462: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32463: LD_ADDR_VAR 0 10
32467: PUSH
32468: LD_VAR 0 1
32472: PPUSH
32473: CALL_OW 478
32477: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32478: LD_VAR 0 9
32482: NOT
32483: IFTRUE 32492
32485: PUSH
32486: LD_VAR 0 11
32490: NOT
32491: OR
32492: IFTRUE 32501
32494: PUSH
32495: LD_VAR 0 12
32499: NOT
32500: OR
32501: IFTRUE 32510
32503: PUSH
32504: LD_VAR 0 10
32508: NOT
32509: OR
32510: IFFALSE 32545
// begin result := [ chassis , engine , control , weapon ] ;
32512: LD_ADDR_VAR 0 6
32516: PUSH
32517: LD_VAR 0 2
32521: PUSH
32522: LD_VAR 0 3
32526: PUSH
32527: LD_VAR 0 4
32531: PUSH
32532: LD_VAR 0 5
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: ST_TO_ADDR
// exit ;
32543: GO 32840
// end ; if not chassis in _chassis then
32545: LD_VAR 0 2
32549: PUSH
32550: LD_VAR 0 9
32554: IN
32555: NOT
32556: IFFALSE 32582
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32558: LD_ADDR_VAR 0 2
32562: PUSH
32563: LD_VAR 0 9
32567: PUSH
32568: LD_INT 1
32570: PPUSH
32571: LD_VAR 0 9
32575: PPUSH
32576: CALL_OW 12
32580: ARRAY
32581: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32582: LD_VAR 0 2
32586: PPUSH
32587: LD_VAR 0 3
32591: PPUSH
32592: CALL 32845 0 2
32596: NOT
32597: IFFALSE 32658
// repeat engine := _engine [ 1 ] ;
32599: LD_ADDR_VAR 0 3
32603: PUSH
32604: LD_VAR 0 11
32608: PUSH
32609: LD_INT 1
32611: ARRAY
32612: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32613: LD_ADDR_VAR 0 11
32617: PUSH
32618: LD_VAR 0 11
32622: PPUSH
32623: LD_INT 1
32625: PPUSH
32626: CALL_OW 3
32630: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32631: LD_VAR 0 2
32635: PPUSH
32636: LD_VAR 0 3
32640: PPUSH
32641: CALL 32845 0 2
32645: IFTRUE 32656
32647: PUSH
32648: LD_VAR 0 11
32652: PUSH
32653: EMPTY
32654: EQUAL
32655: OR
32656: IFFALSE 32599
// if not control in _control then
32658: LD_VAR 0 4
32662: PUSH
32663: LD_VAR 0 12
32667: IN
32668: NOT
32669: IFFALSE 32695
// control := _control [ rand ( 1 , _control ) ] ;
32671: LD_ADDR_VAR 0 4
32675: PUSH
32676: LD_VAR 0 12
32680: PUSH
32681: LD_INT 1
32683: PPUSH
32684: LD_VAR 0 12
32688: PPUSH
32689: CALL_OW 12
32693: ARRAY
32694: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32695: LD_VAR 0 2
32699: PPUSH
32700: LD_VAR 0 5
32704: PPUSH
32705: CALL 33067 0 2
32709: NOT
32710: IFFALSE 32771
// repeat weapon := _weapon [ 1 ] ;
32712: LD_ADDR_VAR 0 5
32716: PUSH
32717: LD_VAR 0 10
32721: PUSH
32722: LD_INT 1
32724: ARRAY
32725: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32726: LD_ADDR_VAR 0 10
32730: PUSH
32731: LD_VAR 0 10
32735: PPUSH
32736: LD_INT 1
32738: PPUSH
32739: CALL_OW 3
32743: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32744: LD_VAR 0 2
32748: PPUSH
32749: LD_VAR 0 5
32753: PPUSH
32754: CALL 33067 0 2
32758: IFTRUE 32769
32760: PUSH
32761: LD_VAR 0 10
32765: PUSH
32766: EMPTY
32767: EQUAL
32768: OR
32769: IFFALSE 32712
// result := [ ] ;
32771: LD_ADDR_VAR 0 6
32775: PUSH
32776: EMPTY
32777: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32778: LD_VAR 0 1
32782: PPUSH
32783: LD_VAR 0 2
32787: PPUSH
32788: LD_VAR 0 3
32792: PPUSH
32793: LD_VAR 0 4
32797: PPUSH
32798: LD_VAR 0 5
32802: PPUSH
32803: CALL_OW 448
32807: IFFALSE 32840
// result := [ chassis , engine , control , weapon ] ;
32809: LD_ADDR_VAR 0 6
32813: PUSH
32814: LD_VAR 0 2
32818: PUSH
32819: LD_VAR 0 3
32823: PUSH
32824: LD_VAR 0 4
32828: PUSH
32829: LD_VAR 0 5
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: ST_TO_ADDR
// end ;
32840: LD_VAR 0 6
32844: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32845: LD_INT 0
32847: PPUSH
// if not chassis or not engine then
32848: LD_VAR 0 1
32852: NOT
32853: IFTRUE 32862
32855: PUSH
32856: LD_VAR 0 2
32860: NOT
32861: OR
32862: IFFALSE 32866
// exit ;
32864: GO 33062
// case engine of engine_solar :
32866: LD_VAR 0 2
32870: PUSH
32871: LD_INT 2
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32879
32877: GO 32917
32879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32880: LD_ADDR_VAR 0 3
32884: PUSH
32885: LD_INT 11
32887: PUSH
32888: LD_INT 12
32890: PUSH
32891: LD_INT 13
32893: PUSH
32894: LD_INT 14
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: ST_TO_ADDR
32915: GO 33046
32917: LD_INT 1
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32925
32923: GO 32987
32925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32926: LD_ADDR_VAR 0 3
32930: PUSH
32931: LD_INT 11
32933: PUSH
32934: LD_INT 12
32936: PUSH
32937: LD_INT 13
32939: PUSH
32940: LD_INT 14
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: LD_INT 3
32951: PUSH
32952: LD_INT 4
32954: PUSH
32955: LD_INT 5
32957: PUSH
32958: LD_INT 21
32960: PUSH
32961: LD_INT 23
32963: PUSH
32964: LD_INT 22
32966: PUSH
32967: LD_INT 24
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: ST_TO_ADDR
32985: GO 33046
32987: LD_INT 3
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33045
32995: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32996: LD_ADDR_VAR 0 3
33000: PUSH
33001: LD_INT 13
33003: PUSH
33004: LD_INT 14
33006: PUSH
33007: LD_INT 2
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: LD_INT 4
33015: PUSH
33016: LD_INT 5
33018: PUSH
33019: LD_INT 21
33021: PUSH
33022: LD_INT 22
33024: PUSH
33025: LD_INT 23
33027: PUSH
33028: LD_INT 24
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: ST_TO_ADDR
33043: GO 33046
33045: POP
// result := ( chassis in result ) ;
33046: LD_ADDR_VAR 0 3
33050: PUSH
33051: LD_VAR 0 1
33055: PUSH
33056: LD_VAR 0 3
33060: IN
33061: ST_TO_ADDR
// end ;
33062: LD_VAR 0 3
33066: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33067: LD_INT 0
33069: PPUSH
// if not chassis or not weapon then
33070: LD_VAR 0 1
33074: NOT
33075: IFTRUE 33084
33077: PUSH
33078: LD_VAR 0 2
33082: NOT
33083: OR
33084: IFFALSE 33088
// exit ;
33086: GO 34182
// case weapon of us_machine_gun :
33088: LD_VAR 0 2
33092: PUSH
33093: LD_INT 2
33095: DOUBLE
33096: EQUAL
33097: IFTRUE 33101
33099: GO 33131
33101: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33102: LD_ADDR_VAR 0 3
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: LD_INT 4
33118: PUSH
33119: LD_INT 5
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: ST_TO_ADDR
33129: GO 34166
33131: LD_INT 3
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33139
33137: GO 33169
33139: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33140: LD_ADDR_VAR 0 3
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: LD_INT 2
33150: PUSH
33151: LD_INT 3
33153: PUSH
33154: LD_INT 4
33156: PUSH
33157: LD_INT 5
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: ST_TO_ADDR
33167: GO 34166
33169: LD_INT 11
33171: DOUBLE
33172: EQUAL
33173: IFTRUE 33177
33175: GO 33207
33177: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33178: LD_ADDR_VAR 0 3
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: LD_INT 3
33191: PUSH
33192: LD_INT 4
33194: PUSH
33195: LD_INT 5
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: ST_TO_ADDR
33205: GO 34166
33207: LD_INT 4
33209: DOUBLE
33210: EQUAL
33211: IFTRUE 33215
33213: GO 33241
33215: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33216: LD_ADDR_VAR 0 3
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: LD_INT 3
33226: PUSH
33227: LD_INT 4
33229: PUSH
33230: LD_INT 5
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: ST_TO_ADDR
33239: GO 34166
33241: LD_INT 5
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33275
33249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33250: LD_ADDR_VAR 0 3
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: LD_INT 4
33263: PUSH
33264: LD_INT 5
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: ST_TO_ADDR
33273: GO 34166
33275: LD_INT 9
33277: DOUBLE
33278: EQUAL
33279: IFTRUE 33283
33281: GO 33309
33283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33284: LD_ADDR_VAR 0 3
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: LD_INT 3
33294: PUSH
33295: LD_INT 4
33297: PUSH
33298: LD_INT 5
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: ST_TO_ADDR
33307: GO 34166
33309: LD_INT 7
33311: DOUBLE
33312: EQUAL
33313: IFTRUE 33317
33315: GO 33343
33317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33318: LD_ADDR_VAR 0 3
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: LD_INT 3
33328: PUSH
33329: LD_INT 4
33331: PUSH
33332: LD_INT 5
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: ST_TO_ADDR
33341: GO 34166
33343: LD_INT 12
33345: DOUBLE
33346: EQUAL
33347: IFTRUE 33351
33349: GO 33377
33351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33352: LD_ADDR_VAR 0 3
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 3
33362: PUSH
33363: LD_INT 4
33365: PUSH
33366: LD_INT 5
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: ST_TO_ADDR
33375: GO 34166
33377: LD_INT 13
33379: DOUBLE
33380: EQUAL
33381: IFTRUE 33385
33383: GO 33411
33385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33386: LD_ADDR_VAR 0 3
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: LD_INT 3
33396: PUSH
33397: LD_INT 4
33399: PUSH
33400: LD_INT 5
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: ST_TO_ADDR
33409: GO 34166
33411: LD_INT 14
33413: DOUBLE
33414: EQUAL
33415: IFTRUE 33419
33417: GO 33437
33419: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_INT 4
33427: PUSH
33428: LD_INT 5
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: ST_TO_ADDR
33435: GO 34166
33437: LD_INT 6
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33463
33445: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33446: LD_ADDR_VAR 0 3
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: LD_INT 5
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: ST_TO_ADDR
33461: GO 34166
33463: LD_INT 10
33465: DOUBLE
33466: EQUAL
33467: IFTRUE 33471
33469: GO 33489
33471: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33472: LD_ADDR_VAR 0 3
33476: PUSH
33477: LD_INT 4
33479: PUSH
33480: LD_INT 5
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: ST_TO_ADDR
33487: GO 34166
33489: LD_INT 22
33491: DOUBLE
33492: EQUAL
33493: IFTRUE 33497
33495: GO 33523
33497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33498: LD_ADDR_VAR 0 3
33502: PUSH
33503: LD_INT 11
33505: PUSH
33506: LD_INT 12
33508: PUSH
33509: LD_INT 13
33511: PUSH
33512: LD_INT 14
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: ST_TO_ADDR
33521: GO 34166
33523: LD_INT 23
33525: DOUBLE
33526: EQUAL
33527: IFTRUE 33531
33529: GO 33557
33531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33532: LD_ADDR_VAR 0 3
33536: PUSH
33537: LD_INT 11
33539: PUSH
33540: LD_INT 12
33542: PUSH
33543: LD_INT 13
33545: PUSH
33546: LD_INT 14
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: ST_TO_ADDR
33555: GO 34166
33557: LD_INT 24
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33565
33563: GO 33591
33565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33566: LD_ADDR_VAR 0 3
33570: PUSH
33571: LD_INT 11
33573: PUSH
33574: LD_INT 12
33576: PUSH
33577: LD_INT 13
33579: PUSH
33580: LD_INT 14
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: ST_TO_ADDR
33589: GO 34166
33591: LD_INT 30
33593: DOUBLE
33594: EQUAL
33595: IFTRUE 33599
33597: GO 33625
33599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33600: LD_ADDR_VAR 0 3
33604: PUSH
33605: LD_INT 11
33607: PUSH
33608: LD_INT 12
33610: PUSH
33611: LD_INT 13
33613: PUSH
33614: LD_INT 14
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: ST_TO_ADDR
33623: GO 34166
33625: LD_INT 25
33627: DOUBLE
33628: EQUAL
33629: IFTRUE 33633
33631: GO 33651
33633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33634: LD_ADDR_VAR 0 3
33638: PUSH
33639: LD_INT 13
33641: PUSH
33642: LD_INT 14
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: ST_TO_ADDR
33649: GO 34166
33651: LD_INT 27
33653: DOUBLE
33654: EQUAL
33655: IFTRUE 33659
33657: GO 33677
33659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33660: LD_ADDR_VAR 0 3
33664: PUSH
33665: LD_INT 13
33667: PUSH
33668: LD_INT 14
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: ST_TO_ADDR
33675: GO 34166
33677: LD_INT 92
33679: DOUBLE
33680: EQUAL
33681: IFTRUE 33685
33683: GO 33711
33685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33686: LD_ADDR_VAR 0 3
33690: PUSH
33691: LD_INT 11
33693: PUSH
33694: LD_INT 12
33696: PUSH
33697: LD_INT 13
33699: PUSH
33700: LD_INT 14
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: ST_TO_ADDR
33709: GO 34166
33711: LD_INT 28
33713: DOUBLE
33714: EQUAL
33715: IFTRUE 33719
33717: GO 33737
33719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33720: LD_ADDR_VAR 0 3
33724: PUSH
33725: LD_INT 13
33727: PUSH
33728: LD_INT 14
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: ST_TO_ADDR
33735: GO 34166
33737: LD_INT 29
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33745
33743: GO 33763
33745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: LD_INT 13
33753: PUSH
33754: LD_INT 14
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: ST_TO_ADDR
33761: GO 34166
33763: LD_INT 31
33765: DOUBLE
33766: EQUAL
33767: IFTRUE 33771
33769: GO 33789
33771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33772: LD_ADDR_VAR 0 3
33776: PUSH
33777: LD_INT 13
33779: PUSH
33780: LD_INT 14
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: ST_TO_ADDR
33787: GO 34166
33789: LD_INT 26
33791: DOUBLE
33792: EQUAL
33793: IFTRUE 33797
33795: GO 33815
33797: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33798: LD_ADDR_VAR 0 3
33802: PUSH
33803: LD_INT 13
33805: PUSH
33806: LD_INT 14
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: ST_TO_ADDR
33813: GO 34166
33815: LD_INT 42
33817: DOUBLE
33818: EQUAL
33819: IFTRUE 33823
33821: GO 33849
33823: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33824: LD_ADDR_VAR 0 3
33828: PUSH
33829: LD_INT 21
33831: PUSH
33832: LD_INT 22
33834: PUSH
33835: LD_INT 23
33837: PUSH
33838: LD_INT 24
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: ST_TO_ADDR
33847: GO 34166
33849: LD_INT 43
33851: DOUBLE
33852: EQUAL
33853: IFTRUE 33857
33855: GO 33883
33857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33858: LD_ADDR_VAR 0 3
33862: PUSH
33863: LD_INT 21
33865: PUSH
33866: LD_INT 22
33868: PUSH
33869: LD_INT 23
33871: PUSH
33872: LD_INT 24
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: ST_TO_ADDR
33881: GO 34166
33883: LD_INT 44
33885: DOUBLE
33886: EQUAL
33887: IFTRUE 33891
33889: GO 33917
33891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33892: LD_ADDR_VAR 0 3
33896: PUSH
33897: LD_INT 21
33899: PUSH
33900: LD_INT 22
33902: PUSH
33903: LD_INT 23
33905: PUSH
33906: LD_INT 24
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: ST_TO_ADDR
33915: GO 34166
33917: LD_INT 45
33919: DOUBLE
33920: EQUAL
33921: IFTRUE 33925
33923: GO 33951
33925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33926: LD_ADDR_VAR 0 3
33930: PUSH
33931: LD_INT 21
33933: PUSH
33934: LD_INT 22
33936: PUSH
33937: LD_INT 23
33939: PUSH
33940: LD_INT 24
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: ST_TO_ADDR
33949: GO 34166
33951: LD_INT 49
33953: DOUBLE
33954: EQUAL
33955: IFTRUE 33959
33957: GO 33985
33959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33960: LD_ADDR_VAR 0 3
33964: PUSH
33965: LD_INT 21
33967: PUSH
33968: LD_INT 22
33970: PUSH
33971: LD_INT 23
33973: PUSH
33974: LD_INT 24
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: ST_TO_ADDR
33983: GO 34166
33985: LD_INT 51
33987: DOUBLE
33988: EQUAL
33989: IFTRUE 33993
33991: GO 34019
33993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33994: LD_ADDR_VAR 0 3
33998: PUSH
33999: LD_INT 21
34001: PUSH
34002: LD_INT 22
34004: PUSH
34005: LD_INT 23
34007: PUSH
34008: LD_INT 24
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: ST_TO_ADDR
34017: GO 34166
34019: LD_INT 52
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34027
34025: GO 34053
34027: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34028: LD_ADDR_VAR 0 3
34032: PUSH
34033: LD_INT 21
34035: PUSH
34036: LD_INT 22
34038: PUSH
34039: LD_INT 23
34041: PUSH
34042: LD_INT 24
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: ST_TO_ADDR
34051: GO 34166
34053: LD_INT 53
34055: DOUBLE
34056: EQUAL
34057: IFTRUE 34061
34059: GO 34079
34061: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34062: LD_ADDR_VAR 0 3
34066: PUSH
34067: LD_INT 23
34069: PUSH
34070: LD_INT 24
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: ST_TO_ADDR
34077: GO 34166
34079: LD_INT 46
34081: DOUBLE
34082: EQUAL
34083: IFTRUE 34087
34085: GO 34105
34087: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34088: LD_ADDR_VAR 0 3
34092: PUSH
34093: LD_INT 23
34095: PUSH
34096: LD_INT 24
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: ST_TO_ADDR
34103: GO 34166
34105: LD_INT 47
34107: DOUBLE
34108: EQUAL
34109: IFTRUE 34113
34111: GO 34131
34113: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
34114: LD_ADDR_VAR 0 3
34118: PUSH
34119: LD_INT 23
34121: PUSH
34122: LD_INT 24
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: ST_TO_ADDR
34129: GO 34166
34131: LD_INT 98
34133: DOUBLE
34134: EQUAL
34135: IFTRUE 34139
34137: GO 34165
34139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34140: LD_ADDR_VAR 0 3
34144: PUSH
34145: LD_INT 21
34147: PUSH
34148: LD_INT 22
34150: PUSH
34151: LD_INT 23
34153: PUSH
34154: LD_INT 24
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: ST_TO_ADDR
34163: GO 34166
34165: POP
// result := ( chassis in result ) ;
34166: LD_ADDR_VAR 0 3
34170: PUSH
34171: LD_VAR 0 1
34175: PUSH
34176: LD_VAR 0 3
34180: IN
34181: ST_TO_ADDR
// end ;
34182: LD_VAR 0 3
34186: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34187: LD_INT 0
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
// result := array ;
34196: LD_ADDR_VAR 0 5
34200: PUSH
34201: LD_VAR 0 1
34205: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34206: LD_VAR 0 1
34210: NOT
34211: IFTRUE 34220
34213: PUSH
34214: LD_VAR 0 2
34218: NOT
34219: OR
34220: IFTRUE 34229
34222: PUSH
34223: LD_VAR 0 3
34227: NOT
34228: OR
34229: IFTRUE 34243
34231: PUSH
34232: LD_VAR 0 2
34236: PUSH
34237: LD_VAR 0 1
34241: GREATER
34242: OR
34243: IFTRUE 34257
34245: PUSH
34246: LD_VAR 0 3
34250: PUSH
34251: LD_VAR 0 1
34255: GREATER
34256: OR
34257: IFFALSE 34261
// exit ;
34259: GO 34557
// if direction then
34261: LD_VAR 0 4
34265: IFFALSE 34329
// begin d := 1 ;
34267: LD_ADDR_VAR 0 9
34271: PUSH
34272: LD_INT 1
34274: ST_TO_ADDR
// if i_from > i_to then
34275: LD_VAR 0 2
34279: PUSH
34280: LD_VAR 0 3
34284: GREATER
34285: IFFALSE 34311
// length := ( array - i_from ) + i_to else
34287: LD_ADDR_VAR 0 11
34291: PUSH
34292: LD_VAR 0 1
34296: PUSH
34297: LD_VAR 0 2
34301: MINUS
34302: PUSH
34303: LD_VAR 0 3
34307: PLUS
34308: ST_TO_ADDR
34309: GO 34327
// length := i_to - i_from ;
34311: LD_ADDR_VAR 0 11
34315: PUSH
34316: LD_VAR 0 3
34320: PUSH
34321: LD_VAR 0 2
34325: MINUS
34326: ST_TO_ADDR
// end else
34327: GO 34390
// begin d := - 1 ;
34329: LD_ADDR_VAR 0 9
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: ST_TO_ADDR
// if i_from > i_to then
34338: LD_VAR 0 2
34342: PUSH
34343: LD_VAR 0 3
34347: GREATER
34348: IFFALSE 34368
// length := i_from - i_to else
34350: LD_ADDR_VAR 0 11
34354: PUSH
34355: LD_VAR 0 2
34359: PUSH
34360: LD_VAR 0 3
34364: MINUS
34365: ST_TO_ADDR
34366: GO 34390
// length := ( array - i_to ) + i_from ;
34368: LD_ADDR_VAR 0 11
34372: PUSH
34373: LD_VAR 0 1
34377: PUSH
34378: LD_VAR 0 3
34382: MINUS
34383: PUSH
34384: LD_VAR 0 2
34388: PLUS
34389: ST_TO_ADDR
// end ; if not length then
34390: LD_VAR 0 11
34394: NOT
34395: IFFALSE 34399
// exit ;
34397: GO 34557
// tmp := array ;
34399: LD_ADDR_VAR 0 10
34403: PUSH
34404: LD_VAR 0 1
34408: ST_TO_ADDR
// for i = 1 to length do
34409: LD_ADDR_VAR 0 6
34413: PUSH
34414: DOUBLE
34415: LD_INT 1
34417: DEC
34418: ST_TO_ADDR
34419: LD_VAR 0 11
34423: PUSH
34424: FOR_TO
34425: IFFALSE 34545
// begin for j = 1 to array do
34427: LD_ADDR_VAR 0 7
34431: PUSH
34432: DOUBLE
34433: LD_INT 1
34435: DEC
34436: ST_TO_ADDR
34437: LD_VAR 0 1
34441: PUSH
34442: FOR_TO
34443: IFFALSE 34531
// begin k := j + d ;
34445: LD_ADDR_VAR 0 8
34449: PUSH
34450: LD_VAR 0 7
34454: PUSH
34455: LD_VAR 0 9
34459: PLUS
34460: ST_TO_ADDR
// if k > array then
34461: LD_VAR 0 8
34465: PUSH
34466: LD_VAR 0 1
34470: GREATER
34471: IFFALSE 34481
// k := 1 ;
34473: LD_ADDR_VAR 0 8
34477: PUSH
34478: LD_INT 1
34480: ST_TO_ADDR
// if not k then
34481: LD_VAR 0 8
34485: NOT
34486: IFFALSE 34498
// k := array ;
34488: LD_ADDR_VAR 0 8
34492: PUSH
34493: LD_VAR 0 1
34497: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34498: LD_ADDR_VAR 0 10
34502: PUSH
34503: LD_VAR 0 10
34507: PPUSH
34508: LD_VAR 0 8
34512: PPUSH
34513: LD_VAR 0 1
34517: PUSH
34518: LD_VAR 0 7
34522: ARRAY
34523: PPUSH
34524: CALL_OW 1
34528: ST_TO_ADDR
// end ;
34529: GO 34442
34531: POP
34532: POP
// array := tmp ;
34533: LD_ADDR_VAR 0 1
34537: PUSH
34538: LD_VAR 0 10
34542: ST_TO_ADDR
// end ;
34543: GO 34424
34545: POP
34546: POP
// result := array ;
34547: LD_ADDR_VAR 0 5
34551: PUSH
34552: LD_VAR 0 1
34556: ST_TO_ADDR
// end ;
34557: LD_VAR 0 5
34561: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34562: LD_INT 0
34564: PPUSH
34565: PPUSH
// result := 0 ;
34566: LD_ADDR_VAR 0 3
34570: PUSH
34571: LD_INT 0
34573: ST_TO_ADDR
// if not array or not value in array then
34574: LD_VAR 0 1
34578: NOT
34579: IFTRUE 34594
34581: PUSH
34582: LD_VAR 0 2
34586: PUSH
34587: LD_VAR 0 1
34591: IN
34592: NOT
34593: OR
34594: IFFALSE 34598
// exit ;
34596: GO 34652
// for i = 1 to array do
34598: LD_ADDR_VAR 0 4
34602: PUSH
34603: DOUBLE
34604: LD_INT 1
34606: DEC
34607: ST_TO_ADDR
34608: LD_VAR 0 1
34612: PUSH
34613: FOR_TO
34614: IFFALSE 34650
// if value = array [ i ] then
34616: LD_VAR 0 2
34620: PUSH
34621: LD_VAR 0 1
34625: PUSH
34626: LD_VAR 0 4
34630: ARRAY
34631: EQUAL
34632: IFFALSE 34648
// begin result := i ;
34634: LD_ADDR_VAR 0 3
34638: PUSH
34639: LD_VAR 0 4
34643: ST_TO_ADDR
// exit ;
34644: POP
34645: POP
34646: GO 34652
// end ;
34648: GO 34613
34650: POP
34651: POP
// end ;
34652: LD_VAR 0 3
34656: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34657: LD_INT 0
34659: PPUSH
// vc_chassis := chassis ;
34660: LD_ADDR_OWVAR 37
34664: PUSH
34665: LD_VAR 0 1
34669: ST_TO_ADDR
// vc_engine := engine ;
34670: LD_ADDR_OWVAR 39
34674: PUSH
34675: LD_VAR 0 2
34679: ST_TO_ADDR
// vc_control := control ;
34680: LD_ADDR_OWVAR 38
34684: PUSH
34685: LD_VAR 0 3
34689: ST_TO_ADDR
// vc_weapon := weapon ;
34690: LD_ADDR_OWVAR 40
34694: PUSH
34695: LD_VAR 0 4
34699: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34700: LD_ADDR_OWVAR 41
34704: PUSH
34705: LD_VAR 0 5
34709: ST_TO_ADDR
// end ;
34710: LD_VAR 0 6
34714: RET
// export function WantPlant ( unit ) ; var task ; begin
34715: LD_INT 0
34717: PPUSH
34718: PPUSH
// result := false ;
34719: LD_ADDR_VAR 0 2
34723: PUSH
34724: LD_INT 0
34726: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34727: LD_ADDR_VAR 0 3
34731: PUSH
34732: LD_VAR 0 1
34736: PPUSH
34737: CALL_OW 437
34741: ST_TO_ADDR
// if task then
34742: LD_VAR 0 3
34746: IFFALSE 34774
// if task [ 1 ] [ 1 ] = p then
34748: LD_VAR 0 3
34752: PUSH
34753: LD_INT 1
34755: ARRAY
34756: PUSH
34757: LD_INT 1
34759: ARRAY
34760: PUSH
34761: LD_STRING p
34763: EQUAL
34764: IFFALSE 34774
// result := true ;
34766: LD_ADDR_VAR 0 2
34770: PUSH
34771: LD_INT 1
34773: ST_TO_ADDR
// end ;
34774: LD_VAR 0 2
34778: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34779: LD_INT 0
34781: PPUSH
34782: PPUSH
34783: PPUSH
34784: PPUSH
// if pos < 1 then
34785: LD_VAR 0 2
34789: PUSH
34790: LD_INT 1
34792: LESS
34793: IFFALSE 34797
// exit ;
34795: GO 35100
// if pos = 1 then
34797: LD_VAR 0 2
34801: PUSH
34802: LD_INT 1
34804: EQUAL
34805: IFFALSE 34838
// result := Replace ( arr , pos [ 1 ] , value ) else
34807: LD_ADDR_VAR 0 4
34811: PUSH
34812: LD_VAR 0 1
34816: PPUSH
34817: LD_VAR 0 2
34821: PUSH
34822: LD_INT 1
34824: ARRAY
34825: PPUSH
34826: LD_VAR 0 3
34830: PPUSH
34831: CALL_OW 1
34835: ST_TO_ADDR
34836: GO 35100
// begin tmp := arr ;
34838: LD_ADDR_VAR 0 6
34842: PUSH
34843: LD_VAR 0 1
34847: ST_TO_ADDR
// s_arr := [ tmp ] ;
34848: LD_ADDR_VAR 0 7
34852: PUSH
34853: LD_VAR 0 6
34857: PUSH
34858: EMPTY
34859: LIST
34860: ST_TO_ADDR
// for i = 1 to pos - 1 do
34861: LD_ADDR_VAR 0 5
34865: PUSH
34866: DOUBLE
34867: LD_INT 1
34869: DEC
34870: ST_TO_ADDR
34871: LD_VAR 0 2
34875: PUSH
34876: LD_INT 1
34878: MINUS
34879: PUSH
34880: FOR_TO
34881: IFFALSE 34926
// begin tmp := tmp [ pos [ i ] ] ;
34883: LD_ADDR_VAR 0 6
34887: PUSH
34888: LD_VAR 0 6
34892: PUSH
34893: LD_VAR 0 2
34897: PUSH
34898: LD_VAR 0 5
34902: ARRAY
34903: ARRAY
34904: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34905: LD_ADDR_VAR 0 7
34909: PUSH
34910: LD_VAR 0 7
34914: PUSH
34915: LD_VAR 0 6
34919: PUSH
34920: EMPTY
34921: LIST
34922: ADD
34923: ST_TO_ADDR
// end ;
34924: GO 34880
34926: POP
34927: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34928: LD_ADDR_VAR 0 6
34932: PUSH
34933: LD_VAR 0 6
34937: PPUSH
34938: LD_VAR 0 2
34942: PUSH
34943: LD_VAR 0 2
34947: ARRAY
34948: PPUSH
34949: LD_VAR 0 3
34953: PPUSH
34954: CALL_OW 1
34958: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34959: LD_ADDR_VAR 0 7
34963: PUSH
34964: LD_VAR 0 7
34968: PPUSH
34969: LD_VAR 0 7
34973: PPUSH
34974: LD_VAR 0 6
34978: PPUSH
34979: CALL_OW 1
34983: ST_TO_ADDR
// for i = s_arr downto 2 do
34984: LD_ADDR_VAR 0 5
34988: PUSH
34989: DOUBLE
34990: LD_VAR 0 7
34994: INC
34995: ST_TO_ADDR
34996: LD_INT 2
34998: PUSH
34999: FOR_DOWNTO
35000: IFFALSE 35084
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35002: LD_ADDR_VAR 0 6
35006: PUSH
35007: LD_VAR 0 7
35011: PUSH
35012: LD_VAR 0 5
35016: PUSH
35017: LD_INT 1
35019: MINUS
35020: ARRAY
35021: PPUSH
35022: LD_VAR 0 2
35026: PUSH
35027: LD_VAR 0 5
35031: PUSH
35032: LD_INT 1
35034: MINUS
35035: ARRAY
35036: PPUSH
35037: LD_VAR 0 7
35041: PUSH
35042: LD_VAR 0 5
35046: ARRAY
35047: PPUSH
35048: CALL_OW 1
35052: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35053: LD_ADDR_VAR 0 7
35057: PUSH
35058: LD_VAR 0 7
35062: PPUSH
35063: LD_VAR 0 5
35067: PUSH
35068: LD_INT 1
35070: MINUS
35071: PPUSH
35072: LD_VAR 0 6
35076: PPUSH
35077: CALL_OW 1
35081: ST_TO_ADDR
// end ;
35082: GO 34999
35084: POP
35085: POP
// result := s_arr [ 1 ] ;
35086: LD_ADDR_VAR 0 4
35090: PUSH
35091: LD_VAR 0 7
35095: PUSH
35096: LD_INT 1
35098: ARRAY
35099: ST_TO_ADDR
// end ; end ;
35100: LD_VAR 0 4
35104: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35105: LD_INT 0
35107: PPUSH
35108: PPUSH
// if not list then
35109: LD_VAR 0 1
35113: NOT
35114: IFFALSE 35118
// exit ;
35116: GO 35209
// i := list [ pos1 ] ;
35118: LD_ADDR_VAR 0 5
35122: PUSH
35123: LD_VAR 0 1
35127: PUSH
35128: LD_VAR 0 2
35132: ARRAY
35133: ST_TO_ADDR
// if not i then
35134: LD_VAR 0 5
35138: NOT
35139: IFFALSE 35143
// exit ;
35141: GO 35209
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35143: LD_ADDR_VAR 0 1
35147: PUSH
35148: LD_VAR 0 1
35152: PPUSH
35153: LD_VAR 0 2
35157: PPUSH
35158: LD_VAR 0 1
35162: PUSH
35163: LD_VAR 0 3
35167: ARRAY
35168: PPUSH
35169: CALL_OW 1
35173: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35174: LD_ADDR_VAR 0 1
35178: PUSH
35179: LD_VAR 0 1
35183: PPUSH
35184: LD_VAR 0 3
35188: PPUSH
35189: LD_VAR 0 5
35193: PPUSH
35194: CALL_OW 1
35198: ST_TO_ADDR
// result := list ;
35199: LD_ADDR_VAR 0 4
35203: PUSH
35204: LD_VAR 0 1
35208: ST_TO_ADDR
// end ;
35209: LD_VAR 0 4
35213: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35214: LD_INT 0
35216: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35217: LD_ADDR_VAR 0 5
35221: PUSH
35222: LD_VAR 0 1
35226: PPUSH
35227: CALL_OW 250
35231: PPUSH
35232: LD_VAR 0 1
35236: PPUSH
35237: CALL_OW 251
35241: PPUSH
35242: LD_VAR 0 2
35246: PPUSH
35247: LD_VAR 0 3
35251: PPUSH
35252: LD_VAR 0 4
35256: PPUSH
35257: CALL 35639 0 5
35261: ST_TO_ADDR
// end ;
35262: LD_VAR 0 5
35266: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35267: LD_INT 0
35269: PPUSH
35270: PPUSH
35271: PPUSH
35272: PPUSH
// if not list or not unit then
35273: LD_VAR 0 2
35277: NOT
35278: IFTRUE 35287
35280: PUSH
35281: LD_VAR 0 1
35285: NOT
35286: OR
35287: IFFALSE 35291
// exit ;
35289: GO 35634
// result := [ ] ;
35291: LD_ADDR_VAR 0 5
35295: PUSH
35296: EMPTY
35297: ST_TO_ADDR
// for i in list do
35298: LD_ADDR_VAR 0 6
35302: PUSH
35303: LD_VAR 0 2
35307: PUSH
35308: FOR_IN
35309: IFFALSE 35527
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35311: LD_ADDR_VAR 0 8
35315: PUSH
35316: LD_VAR 0 1
35320: PPUSH
35321: LD_VAR 0 6
35325: PUSH
35326: LD_INT 1
35328: ARRAY
35329: PPUSH
35330: LD_VAR 0 6
35334: PUSH
35335: LD_INT 2
35337: ARRAY
35338: PPUSH
35339: CALL_OW 297
35343: ST_TO_ADDR
// if not Count ( result ) then
35344: LD_VAR 0 5
35348: PPUSH
35349: CALL 31861 0 1
35353: NOT
35354: IFFALSE 35387
// begin result := Join ( result , [ i , tmp ] ) ;
35356: LD_ADDR_VAR 0 5
35360: PUSH
35361: LD_VAR 0 5
35365: PPUSH
35366: LD_VAR 0 6
35370: PUSH
35371: LD_VAR 0 8
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PPUSH
35380: CALL 67837 0 2
35384: ST_TO_ADDR
// continue ;
35385: GO 35308
// end ; if result [ result ] [ 2 ] <= tmp then
35387: LD_VAR 0 5
35391: PUSH
35392: LD_VAR 0 5
35396: ARRAY
35397: PUSH
35398: LD_INT 2
35400: ARRAY
35401: PUSH
35402: LD_VAR 0 8
35406: LESSEQUAL
35407: IFFALSE 35440
// result := Join ( result , [ i , tmp ] ) else
35409: LD_ADDR_VAR 0 5
35413: PUSH
35414: LD_VAR 0 5
35418: PPUSH
35419: LD_VAR 0 6
35423: PUSH
35424: LD_VAR 0 8
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PPUSH
35433: CALL 67837 0 2
35437: ST_TO_ADDR
35438: GO 35525
// begin for j := 1 to Count ( result ) do
35440: LD_ADDR_VAR 0 7
35444: PUSH
35445: DOUBLE
35446: LD_INT 1
35448: DEC
35449: ST_TO_ADDR
35450: LD_VAR 0 5
35454: PPUSH
35455: CALL 31861 0 1
35459: PUSH
35460: FOR_TO
35461: IFFALSE 35523
// begin if tmp < result [ j ] [ 2 ] then
35463: LD_VAR 0 8
35467: PUSH
35468: LD_VAR 0 5
35472: PUSH
35473: LD_VAR 0 7
35477: ARRAY
35478: PUSH
35479: LD_INT 2
35481: ARRAY
35482: LESS
35483: IFFALSE 35521
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35485: LD_ADDR_VAR 0 5
35489: PUSH
35490: LD_VAR 0 5
35494: PPUSH
35495: LD_VAR 0 7
35499: PPUSH
35500: LD_VAR 0 6
35504: PUSH
35505: LD_VAR 0 8
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PPUSH
35514: CALL_OW 2
35518: ST_TO_ADDR
// break ;
35519: GO 35523
// end ; end ;
35521: GO 35460
35523: POP
35524: POP
// end ; end ;
35525: GO 35308
35527: POP
35528: POP
// if result and not asc then
35529: LD_VAR 0 5
35533: IFFALSE 35542
35535: PUSH
35536: LD_VAR 0 3
35540: NOT
35541: AND
35542: IFFALSE 35559
// result := ReverseArray ( result ) ;
35544: LD_ADDR_VAR 0 5
35548: PUSH
35549: LD_VAR 0 5
35553: PPUSH
35554: CALL 62917 0 1
35558: ST_TO_ADDR
// tmp := [ ] ;
35559: LD_ADDR_VAR 0 8
35563: PUSH
35564: EMPTY
35565: ST_TO_ADDR
// if mode then
35566: LD_VAR 0 4
35570: IFFALSE 35634
// begin for i := 1 to result do
35572: LD_ADDR_VAR 0 6
35576: PUSH
35577: DOUBLE
35578: LD_INT 1
35580: DEC
35581: ST_TO_ADDR
35582: LD_VAR 0 5
35586: PUSH
35587: FOR_TO
35588: IFFALSE 35622
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35590: LD_ADDR_VAR 0 8
35594: PUSH
35595: LD_VAR 0 8
35599: PPUSH
35600: LD_VAR 0 5
35604: PUSH
35605: LD_VAR 0 6
35609: ARRAY
35610: PUSH
35611: LD_INT 1
35613: ARRAY
35614: PPUSH
35615: CALL 67837 0 2
35619: ST_TO_ADDR
35620: GO 35587
35622: POP
35623: POP
// result := tmp ;
35624: LD_ADDR_VAR 0 5
35628: PUSH
35629: LD_VAR 0 8
35633: ST_TO_ADDR
// end ; end ;
35634: LD_VAR 0 5
35638: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35639: LD_INT 0
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
// if not list then
35645: LD_VAR 0 3
35649: NOT
35650: IFFALSE 35654
// exit ;
35652: GO 36044
// result := [ ] ;
35654: LD_ADDR_VAR 0 6
35658: PUSH
35659: EMPTY
35660: ST_TO_ADDR
// for i in list do
35661: LD_ADDR_VAR 0 7
35665: PUSH
35666: LD_VAR 0 3
35670: PUSH
35671: FOR_IN
35672: IFFALSE 35874
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35674: LD_ADDR_VAR 0 9
35678: PUSH
35679: LD_VAR 0 7
35683: PPUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: LD_VAR 0 2
35693: PPUSH
35694: CALL_OW 297
35698: ST_TO_ADDR
// if not result then
35699: LD_VAR 0 6
35703: NOT
35704: IFFALSE 35730
// result := [ [ i , tmp ] ] else
35706: LD_ADDR_VAR 0 6
35710: PUSH
35711: LD_VAR 0 7
35715: PUSH
35716: LD_VAR 0 9
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: EMPTY
35726: LIST
35727: ST_TO_ADDR
35728: GO 35872
// begin if result [ result ] [ 2 ] <= tmp then
35730: LD_VAR 0 6
35734: PUSH
35735: LD_VAR 0 6
35739: ARRAY
35740: PUSH
35741: LD_INT 2
35743: ARRAY
35744: PUSH
35745: LD_VAR 0 9
35749: LESSEQUAL
35750: IFFALSE 35792
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35752: LD_ADDR_VAR 0 6
35756: PUSH
35757: LD_VAR 0 6
35761: PPUSH
35762: LD_VAR 0 6
35766: PUSH
35767: LD_INT 1
35769: PLUS
35770: PPUSH
35771: LD_VAR 0 7
35775: PUSH
35776: LD_VAR 0 9
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PPUSH
35785: CALL_OW 2
35789: ST_TO_ADDR
35790: GO 35872
// for j := 1 to result do
35792: LD_ADDR_VAR 0 8
35796: PUSH
35797: DOUBLE
35798: LD_INT 1
35800: DEC
35801: ST_TO_ADDR
35802: LD_VAR 0 6
35806: PUSH
35807: FOR_TO
35808: IFFALSE 35870
// begin if tmp < result [ j ] [ 2 ] then
35810: LD_VAR 0 9
35814: PUSH
35815: LD_VAR 0 6
35819: PUSH
35820: LD_VAR 0 8
35824: ARRAY
35825: PUSH
35826: LD_INT 2
35828: ARRAY
35829: LESS
35830: IFFALSE 35868
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35832: LD_ADDR_VAR 0 6
35836: PUSH
35837: LD_VAR 0 6
35841: PPUSH
35842: LD_VAR 0 8
35846: PPUSH
35847: LD_VAR 0 7
35851: PUSH
35852: LD_VAR 0 9
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PPUSH
35861: CALL_OW 2
35865: ST_TO_ADDR
// break ;
35866: GO 35870
// end ; end ;
35868: GO 35807
35870: POP
35871: POP
// end ; end ;
35872: GO 35671
35874: POP
35875: POP
// if result and not asc then
35876: LD_VAR 0 6
35880: IFFALSE 35889
35882: PUSH
35883: LD_VAR 0 4
35887: NOT
35888: AND
35889: IFFALSE 35964
// begin tmp := result ;
35891: LD_ADDR_VAR 0 9
35895: PUSH
35896: LD_VAR 0 6
35900: ST_TO_ADDR
// for i = tmp downto 1 do
35901: LD_ADDR_VAR 0 7
35905: PUSH
35906: DOUBLE
35907: LD_VAR 0 9
35911: INC
35912: ST_TO_ADDR
35913: LD_INT 1
35915: PUSH
35916: FOR_DOWNTO
35917: IFFALSE 35962
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35919: LD_ADDR_VAR 0 6
35923: PUSH
35924: LD_VAR 0 6
35928: PPUSH
35929: LD_VAR 0 9
35933: PUSH
35934: LD_VAR 0 7
35938: MINUS
35939: PUSH
35940: LD_INT 1
35942: PLUS
35943: PPUSH
35944: LD_VAR 0 9
35948: PUSH
35949: LD_VAR 0 7
35953: ARRAY
35954: PPUSH
35955: CALL_OW 1
35959: ST_TO_ADDR
35960: GO 35916
35962: POP
35963: POP
// end ; tmp := [ ] ;
35964: LD_ADDR_VAR 0 9
35968: PUSH
35969: EMPTY
35970: ST_TO_ADDR
// if mode then
35971: LD_VAR 0 5
35975: IFFALSE 36044
// begin for i = 1 to result do
35977: LD_ADDR_VAR 0 7
35981: PUSH
35982: DOUBLE
35983: LD_INT 1
35985: DEC
35986: ST_TO_ADDR
35987: LD_VAR 0 6
35991: PUSH
35992: FOR_TO
35993: IFFALSE 36032
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35995: LD_ADDR_VAR 0 9
35999: PUSH
36000: LD_VAR 0 9
36004: PPUSH
36005: LD_VAR 0 7
36009: PPUSH
36010: LD_VAR 0 6
36014: PUSH
36015: LD_VAR 0 7
36019: ARRAY
36020: PUSH
36021: LD_INT 1
36023: ARRAY
36024: PPUSH
36025: CALL_OW 1
36029: ST_TO_ADDR
36030: GO 35992
36032: POP
36033: POP
// result := tmp ;
36034: LD_ADDR_VAR 0 6
36038: PUSH
36039: LD_VAR 0 9
36043: ST_TO_ADDR
// end ; end ;
36044: LD_VAR 0 6
36048: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36049: LD_INT 0
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
36055: PPUSH
36056: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36057: LD_ADDR_VAR 0 5
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: ST_TO_ADDR
// if not x or not y then
36079: LD_VAR 0 2
36083: NOT
36084: IFTRUE 36093
36086: PUSH
36087: LD_VAR 0 3
36091: NOT
36092: OR
36093: IFFALSE 36097
// exit ;
36095: GO 37753
// if not range then
36097: LD_VAR 0 4
36101: NOT
36102: IFFALSE 36112
// range := 10 ;
36104: LD_ADDR_VAR 0 4
36108: PUSH
36109: LD_INT 10
36111: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36112: LD_ADDR_VAR 0 8
36116: PUSH
36117: LD_INT 81
36119: PUSH
36120: LD_VAR 0 1
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 92
36131: PUSH
36132: LD_VAR 0 2
36136: PUSH
36137: LD_VAR 0 3
36141: PUSH
36142: LD_VAR 0 4
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 3
36155: PUSH
36156: LD_INT 21
36158: PUSH
36159: LD_INT 3
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: PPUSH
36175: CALL_OW 69
36179: ST_TO_ADDR
// if not tmp then
36180: LD_VAR 0 8
36184: NOT
36185: IFFALSE 36189
// exit ;
36187: GO 37753
// for i in tmp do
36189: LD_ADDR_VAR 0 6
36193: PUSH
36194: LD_VAR 0 8
36198: PUSH
36199: FOR_IN
36200: IFFALSE 37728
// begin points := [ 0 , 0 , 0 ] ;
36202: LD_ADDR_VAR 0 9
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: ST_TO_ADDR
// bpoints := 1 ;
36221: LD_ADDR_VAR 0 10
36225: PUSH
36226: LD_INT 1
36228: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36229: LD_VAR 0 6
36233: PPUSH
36234: CALL_OW 247
36238: PUSH
36239: LD_INT 1
36241: DOUBLE
36242: EQUAL
36243: IFTRUE 36247
36245: GO 36829
36247: POP
// begin if GetClass ( i ) = 1 then
36248: LD_VAR 0 6
36252: PPUSH
36253: CALL_OW 257
36257: PUSH
36258: LD_INT 1
36260: EQUAL
36261: IFFALSE 36282
// points := [ 10 , 5 , 3 ] ;
36263: LD_ADDR_VAR 0 9
36267: PUSH
36268: LD_INT 10
36270: PUSH
36271: LD_INT 5
36273: PUSH
36274: LD_INT 3
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36282: LD_VAR 0 6
36286: PPUSH
36287: CALL_OW 257
36291: PUSH
36292: LD_INT 2
36294: PUSH
36295: LD_INT 3
36297: PUSH
36298: LD_INT 4
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: IN
36306: IFFALSE 36327
// points := [ 3 , 2 , 1 ] ;
36308: LD_ADDR_VAR 0 9
36312: PUSH
36313: LD_INT 3
36315: PUSH
36316: LD_INT 2
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36327: LD_VAR 0 6
36331: PPUSH
36332: CALL_OW 257
36336: PUSH
36337: LD_INT 5
36339: EQUAL
36340: IFFALSE 36361
// points := [ 130 , 5 , 2 ] ;
36342: LD_ADDR_VAR 0 9
36346: PUSH
36347: LD_INT 130
36349: PUSH
36350: LD_INT 5
36352: PUSH
36353: LD_INT 2
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: LIST
36360: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36361: LD_VAR 0 6
36365: PPUSH
36366: CALL_OW 257
36370: PUSH
36371: LD_INT 8
36373: EQUAL
36374: IFFALSE 36395
// points := [ 35 , 35 , 30 ] ;
36376: LD_ADDR_VAR 0 9
36380: PUSH
36381: LD_INT 35
36383: PUSH
36384: LD_INT 35
36386: PUSH
36387: LD_INT 30
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36395: LD_VAR 0 6
36399: PPUSH
36400: CALL_OW 257
36404: PUSH
36405: LD_INT 9
36407: EQUAL
36408: IFFALSE 36429
// points := [ 20 , 55 , 40 ] ;
36410: LD_ADDR_VAR 0 9
36414: PUSH
36415: LD_INT 20
36417: PUSH
36418: LD_INT 55
36420: PUSH
36421: LD_INT 40
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: LIST
36428: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36429: LD_VAR 0 6
36433: PPUSH
36434: CALL_OW 257
36438: PUSH
36439: LD_INT 12
36441: PUSH
36442: LD_INT 16
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: IN
36449: IFFALSE 36470
// points := [ 5 , 3 , 2 ] ;
36451: LD_ADDR_VAR 0 9
36455: PUSH
36456: LD_INT 5
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36470: LD_VAR 0 6
36474: PPUSH
36475: CALL_OW 257
36479: PUSH
36480: LD_INT 17
36482: EQUAL
36483: IFFALSE 36504
// points := [ 100 , 50 , 75 ] ;
36485: LD_ADDR_VAR 0 9
36489: PUSH
36490: LD_INT 100
36492: PUSH
36493: LD_INT 50
36495: PUSH
36496: LD_INT 75
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36504: LD_VAR 0 6
36508: PPUSH
36509: CALL_OW 257
36513: PUSH
36514: LD_INT 15
36516: EQUAL
36517: IFFALSE 36538
// points := [ 10 , 5 , 3 ] ;
36519: LD_ADDR_VAR 0 9
36523: PUSH
36524: LD_INT 10
36526: PUSH
36527: LD_INT 5
36529: PUSH
36530: LD_INT 3
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: LIST
36537: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36538: LD_VAR 0 6
36542: PPUSH
36543: CALL_OW 257
36547: PUSH
36548: LD_INT 14
36550: EQUAL
36551: IFFALSE 36572
// points := [ 10 , 0 , 0 ] ;
36553: LD_ADDR_VAR 0 9
36557: PUSH
36558: LD_INT 10
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: LIST
36571: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36572: LD_VAR 0 6
36576: PPUSH
36577: CALL_OW 257
36581: PUSH
36582: LD_INT 11
36584: EQUAL
36585: IFFALSE 36606
// points := [ 30 , 10 , 5 ] ;
36587: LD_ADDR_VAR 0 9
36591: PUSH
36592: LD_INT 30
36594: PUSH
36595: LD_INT 10
36597: PUSH
36598: LD_INT 5
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: LIST
36605: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36606: LD_VAR 0 1
36610: PPUSH
36611: LD_INT 5
36613: PPUSH
36614: CALL_OW 321
36618: PUSH
36619: LD_INT 2
36621: EQUAL
36622: IFFALSE 36639
// bpoints := bpoints * 1.8 ;
36624: LD_ADDR_VAR 0 10
36628: PUSH
36629: LD_VAR 0 10
36633: PUSH
36634: LD_REAL  1.80000000000000E+0000
36637: MUL
36638: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36639: LD_VAR 0 6
36643: PPUSH
36644: CALL_OW 257
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: LD_INT 3
36657: PUSH
36658: LD_INT 4
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: IN
36667: IFFALSE 36687
36669: PUSH
36670: LD_VAR 0 1
36674: PPUSH
36675: LD_INT 51
36677: PPUSH
36678: CALL_OW 321
36682: PUSH
36683: LD_INT 2
36685: EQUAL
36686: AND
36687: IFFALSE 36704
// bpoints := bpoints * 1.2 ;
36689: LD_ADDR_VAR 0 10
36693: PUSH
36694: LD_VAR 0 10
36698: PUSH
36699: LD_REAL  1.20000000000000E+0000
36702: MUL
36703: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36704: LD_VAR 0 6
36708: PPUSH
36709: CALL_OW 257
36713: PUSH
36714: LD_INT 5
36716: PUSH
36717: LD_INT 7
36719: PUSH
36720: LD_INT 9
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: LIST
36727: IN
36728: IFFALSE 36748
36730: PUSH
36731: LD_VAR 0 1
36735: PPUSH
36736: LD_INT 52
36738: PPUSH
36739: CALL_OW 321
36743: PUSH
36744: LD_INT 2
36746: EQUAL
36747: AND
36748: IFFALSE 36765
// bpoints := bpoints * 1.5 ;
36750: LD_ADDR_VAR 0 10
36754: PUSH
36755: LD_VAR 0 10
36759: PUSH
36760: LD_REAL  1.50000000000000E+0000
36763: MUL
36764: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36765: LD_VAR 0 1
36769: PPUSH
36770: LD_INT 66
36772: PPUSH
36773: CALL_OW 321
36777: PUSH
36778: LD_INT 2
36780: EQUAL
36781: IFFALSE 36798
// bpoints := bpoints * 1.1 ;
36783: LD_ADDR_VAR 0 10
36787: PUSH
36788: LD_VAR 0 10
36792: PUSH
36793: LD_REAL  1.10000000000000E+0000
36796: MUL
36797: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36798: LD_ADDR_VAR 0 10
36802: PUSH
36803: LD_VAR 0 10
36807: PUSH
36808: LD_VAR 0 6
36812: PPUSH
36813: LD_INT 1
36815: PPUSH
36816: CALL_OW 259
36820: PUSH
36821: LD_REAL  1.15000000000000E+0000
36824: MUL
36825: MUL
36826: ST_TO_ADDR
// end ; unit_vehicle :
36827: GO 37657
36829: LD_INT 2
36831: DOUBLE
36832: EQUAL
36833: IFTRUE 36837
36835: GO 37645
36837: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36838: LD_VAR 0 6
36842: PPUSH
36843: CALL_OW 264
36847: PUSH
36848: LD_INT 2
36850: PUSH
36851: LD_INT 42
36853: PUSH
36854: LD_INT 24
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: IN
36862: IFFALSE 36883
// points := [ 25 , 5 , 3 ] ;
36864: LD_ADDR_VAR 0 9
36868: PUSH
36869: LD_INT 25
36871: PUSH
36872: LD_INT 5
36874: PUSH
36875: LD_INT 3
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36883: LD_VAR 0 6
36887: PPUSH
36888: CALL_OW 264
36892: PUSH
36893: LD_INT 4
36895: PUSH
36896: LD_INT 43
36898: PUSH
36899: LD_INT 25
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: IN
36907: IFFALSE 36928
// points := [ 40 , 15 , 5 ] ;
36909: LD_ADDR_VAR 0 9
36913: PUSH
36914: LD_INT 40
36916: PUSH
36917: LD_INT 15
36919: PUSH
36920: LD_INT 5
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36928: LD_VAR 0 6
36932: PPUSH
36933: CALL_OW 264
36937: PUSH
36938: LD_INT 3
36940: PUSH
36941: LD_INT 23
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: IN
36948: IFFALSE 36969
// points := [ 7 , 25 , 8 ] ;
36950: LD_ADDR_VAR 0 9
36954: PUSH
36955: LD_INT 7
36957: PUSH
36958: LD_INT 25
36960: PUSH
36961: LD_INT 8
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36969: LD_VAR 0 6
36973: PPUSH
36974: CALL_OW 264
36978: PUSH
36979: LD_INT 5
36981: PUSH
36982: LD_INT 27
36984: PUSH
36985: LD_INT 44
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: IN
36993: IFFALSE 37014
// points := [ 14 , 50 , 16 ] ;
36995: LD_ADDR_VAR 0 9
36999: PUSH
37000: LD_INT 14
37002: PUSH
37003: LD_INT 50
37005: PUSH
37006: LD_INT 16
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: LIST
37013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37014: LD_VAR 0 6
37018: PPUSH
37019: CALL_OW 264
37023: PUSH
37024: LD_INT 6
37026: PUSH
37027: LD_INT 46
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: IN
37034: IFFALSE 37055
// points := [ 32 , 120 , 70 ] ;
37036: LD_ADDR_VAR 0 9
37040: PUSH
37041: LD_INT 32
37043: PUSH
37044: LD_INT 120
37046: PUSH
37047: LD_INT 70
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37055: LD_VAR 0 6
37059: PPUSH
37060: CALL_OW 264
37064: PUSH
37065: LD_INT 7
37067: PUSH
37068: LD_INT 28
37070: PUSH
37071: LD_INT 45
37073: PUSH
37074: LD_INT 92
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: IN
37083: IFFALSE 37104
// points := [ 35 , 20 , 45 ] ;
37085: LD_ADDR_VAR 0 9
37089: PUSH
37090: LD_INT 35
37092: PUSH
37093: LD_INT 20
37095: PUSH
37096: LD_INT 45
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37104: LD_VAR 0 6
37108: PPUSH
37109: CALL_OW 264
37113: PUSH
37114: LD_INT 47
37116: PUSH
37117: EMPTY
37118: LIST
37119: IN
37120: IFFALSE 37141
// points := [ 67 , 45 , 75 ] ;
37122: LD_ADDR_VAR 0 9
37126: PUSH
37127: LD_INT 67
37129: PUSH
37130: LD_INT 45
37132: PUSH
37133: LD_INT 75
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37141: LD_VAR 0 6
37145: PPUSH
37146: CALL_OW 264
37150: PUSH
37151: LD_INT 26
37153: PUSH
37154: EMPTY
37155: LIST
37156: IN
37157: IFFALSE 37178
// points := [ 120 , 30 , 80 ] ;
37159: LD_ADDR_VAR 0 9
37163: PUSH
37164: LD_INT 120
37166: PUSH
37167: LD_INT 30
37169: PUSH
37170: LD_INT 80
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37178: LD_VAR 0 6
37182: PPUSH
37183: CALL_OW 264
37187: PUSH
37188: LD_INT 22
37190: PUSH
37191: EMPTY
37192: LIST
37193: IN
37194: IFFALSE 37215
// points := [ 40 , 1 , 1 ] ;
37196: LD_ADDR_VAR 0 9
37200: PUSH
37201: LD_INT 40
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37215: LD_VAR 0 6
37219: PPUSH
37220: CALL_OW 264
37224: PUSH
37225: LD_INT 29
37227: PUSH
37228: EMPTY
37229: LIST
37230: IN
37231: IFFALSE 37252
// points := [ 70 , 200 , 400 ] ;
37233: LD_ADDR_VAR 0 9
37237: PUSH
37238: LD_INT 70
37240: PUSH
37241: LD_INT 200
37243: PUSH
37244: LD_INT 400
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: LIST
37251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37252: LD_VAR 0 6
37256: PPUSH
37257: CALL_OW 264
37261: PUSH
37262: LD_INT 14
37264: PUSH
37265: LD_INT 53
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: IN
37272: IFFALSE 37293
// points := [ 40 , 10 , 20 ] ;
37274: LD_ADDR_VAR 0 9
37278: PUSH
37279: LD_INT 40
37281: PUSH
37282: LD_INT 10
37284: PUSH
37285: LD_INT 20
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: LIST
37292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37293: LD_VAR 0 6
37297: PPUSH
37298: CALL_OW 264
37302: PUSH
37303: LD_INT 9
37305: PUSH
37306: EMPTY
37307: LIST
37308: IN
37309: IFFALSE 37330
// points := [ 5 , 70 , 20 ] ;
37311: LD_ADDR_VAR 0 9
37315: PUSH
37316: LD_INT 5
37318: PUSH
37319: LD_INT 70
37321: PUSH
37322: LD_INT 20
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37330: LD_VAR 0 6
37334: PPUSH
37335: CALL_OW 264
37339: PUSH
37340: LD_INT 10
37342: PUSH
37343: EMPTY
37344: LIST
37345: IN
37346: IFFALSE 37367
// points := [ 35 , 110 , 70 ] ;
37348: LD_ADDR_VAR 0 9
37352: PUSH
37353: LD_INT 35
37355: PUSH
37356: LD_INT 110
37358: PUSH
37359: LD_INT 70
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37367: LD_VAR 0 6
37371: PPUSH
37372: CALL_OW 265
37376: PUSH
37377: LD_INT 25
37379: EQUAL
37380: IFFALSE 37401
// points := [ 80 , 65 , 100 ] ;
37382: LD_ADDR_VAR 0 9
37386: PUSH
37387: LD_INT 80
37389: PUSH
37390: LD_INT 65
37392: PUSH
37393: LD_INT 100
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37401: LD_VAR 0 6
37405: PPUSH
37406: CALL_OW 263
37410: PUSH
37411: LD_INT 1
37413: EQUAL
37414: IFFALSE 37449
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37416: LD_ADDR_VAR 0 10
37420: PUSH
37421: LD_VAR 0 10
37425: PUSH
37426: LD_VAR 0 6
37430: PPUSH
37431: CALL_OW 311
37435: PPUSH
37436: LD_INT 3
37438: PPUSH
37439: CALL_OW 259
37443: PUSH
37444: LD_INT 4
37446: MUL
37447: MUL
37448: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37449: LD_VAR 0 6
37453: PPUSH
37454: CALL_OW 263
37458: PUSH
37459: LD_INT 2
37461: EQUAL
37462: IFFALSE 37513
// begin j := IsControledBy ( i ) ;
37464: LD_ADDR_VAR 0 7
37468: PUSH
37469: LD_VAR 0 6
37473: PPUSH
37474: CALL_OW 312
37478: ST_TO_ADDR
// if j then
37479: LD_VAR 0 7
37483: IFFALSE 37513
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37485: LD_ADDR_VAR 0 10
37489: PUSH
37490: LD_VAR 0 10
37494: PUSH
37495: LD_VAR 0 7
37499: PPUSH
37500: LD_INT 3
37502: PPUSH
37503: CALL_OW 259
37507: PUSH
37508: LD_INT 3
37510: MUL
37511: MUL
37512: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37513: LD_VAR 0 6
37517: PPUSH
37518: CALL_OW 264
37522: PUSH
37523: LD_INT 5
37525: PUSH
37526: LD_INT 6
37528: PUSH
37529: LD_INT 46
37531: PUSH
37532: LD_INT 44
37534: PUSH
37535: LD_INT 47
37537: PUSH
37538: LD_INT 45
37540: PUSH
37541: LD_INT 28
37543: PUSH
37544: LD_INT 7
37546: PUSH
37547: LD_INT 27
37549: PUSH
37550: LD_INT 29
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: IN
37565: IFFALSE 37585
37567: PUSH
37568: LD_VAR 0 1
37572: PPUSH
37573: LD_INT 52
37575: PPUSH
37576: CALL_OW 321
37580: PUSH
37581: LD_INT 2
37583: EQUAL
37584: AND
37585: IFFALSE 37602
// bpoints := bpoints * 1.2 ;
37587: LD_ADDR_VAR 0 10
37591: PUSH
37592: LD_VAR 0 10
37596: PUSH
37597: LD_REAL  1.20000000000000E+0000
37600: MUL
37601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37602: LD_VAR 0 6
37606: PPUSH
37607: CALL_OW 264
37611: PUSH
37612: LD_INT 6
37614: PUSH
37615: LD_INT 46
37617: PUSH
37618: LD_INT 47
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: IN
37626: IFFALSE 37643
// bpoints := bpoints * 1.2 ;
37628: LD_ADDR_VAR 0 10
37632: PUSH
37633: LD_VAR 0 10
37637: PUSH
37638: LD_REAL  1.20000000000000E+0000
37641: MUL
37642: ST_TO_ADDR
// end ; unit_building :
37643: GO 37657
37645: LD_INT 3
37647: DOUBLE
37648: EQUAL
37649: IFTRUE 37653
37651: GO 37656
37653: POP
// ; end ;
37654: GO 37657
37656: POP
// for j = 1 to 3 do
37657: LD_ADDR_VAR 0 7
37661: PUSH
37662: DOUBLE
37663: LD_INT 1
37665: DEC
37666: ST_TO_ADDR
37667: LD_INT 3
37669: PUSH
37670: FOR_TO
37671: IFFALSE 37724
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37673: LD_ADDR_VAR 0 5
37677: PUSH
37678: LD_VAR 0 5
37682: PPUSH
37683: LD_VAR 0 7
37687: PPUSH
37688: LD_VAR 0 5
37692: PUSH
37693: LD_VAR 0 7
37697: ARRAY
37698: PUSH
37699: LD_VAR 0 9
37703: PUSH
37704: LD_VAR 0 7
37708: ARRAY
37709: PUSH
37710: LD_VAR 0 10
37714: MUL
37715: PLUS
37716: PPUSH
37717: CALL_OW 1
37721: ST_TO_ADDR
37722: GO 37670
37724: POP
37725: POP
// end ;
37726: GO 36199
37728: POP
37729: POP
// result := Replace ( result , 4 , tmp ) ;
37730: LD_ADDR_VAR 0 5
37734: PUSH
37735: LD_VAR 0 5
37739: PPUSH
37740: LD_INT 4
37742: PPUSH
37743: LD_VAR 0 8
37747: PPUSH
37748: CALL_OW 1
37752: ST_TO_ADDR
// end ;
37753: LD_VAR 0 5
37757: RET
// export function DangerAtRange ( unit , range ) ; begin
37758: LD_INT 0
37760: PPUSH
// if not unit then
37761: LD_VAR 0 1
37765: NOT
37766: IFFALSE 37770
// exit ;
37768: GO 37815
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37770: LD_ADDR_VAR 0 3
37774: PUSH
37775: LD_VAR 0 1
37779: PPUSH
37780: CALL_OW 255
37784: PPUSH
37785: LD_VAR 0 1
37789: PPUSH
37790: CALL_OW 250
37794: PPUSH
37795: LD_VAR 0 1
37799: PPUSH
37800: CALL_OW 251
37804: PPUSH
37805: LD_VAR 0 2
37809: PPUSH
37810: CALL 36049 0 4
37814: ST_TO_ADDR
// end ;
37815: LD_VAR 0 3
37819: RET
// export function DangerInArea ( side , area ) ; begin
37820: LD_INT 0
37822: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37823: LD_ADDR_VAR 0 3
37827: PUSH
37828: LD_VAR 0 2
37832: PPUSH
37833: LD_INT 81
37835: PUSH
37836: LD_VAR 0 1
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PPUSH
37845: CALL_OW 70
37849: ST_TO_ADDR
// end ;
37850: LD_VAR 0 3
37854: RET
// export function IsExtension ( b ) ; begin
37855: LD_INT 0
37857: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37858: LD_ADDR_VAR 0 2
37862: PUSH
37863: LD_VAR 0 1
37867: PUSH
37868: LD_INT 23
37870: PUSH
37871: LD_INT 20
37873: PUSH
37874: LD_INT 22
37876: PUSH
37877: LD_INT 17
37879: PUSH
37880: LD_INT 24
37882: PUSH
37883: LD_INT 21
37885: PUSH
37886: LD_INT 19
37888: PUSH
37889: LD_INT 16
37891: PUSH
37892: LD_INT 25
37894: PUSH
37895: LD_INT 18
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: IN
37910: ST_TO_ADDR
// end ;
37911: LD_VAR 0 2
37915: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37916: LD_INT 0
37918: PPUSH
37919: PPUSH
37920: PPUSH
// result := [ ] ;
37921: LD_ADDR_VAR 0 4
37925: PUSH
37926: EMPTY
37927: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37928: LD_ADDR_VAR 0 5
37932: PUSH
37933: LD_VAR 0 2
37937: PPUSH
37938: LD_INT 21
37940: PUSH
37941: LD_INT 3
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PPUSH
37948: CALL_OW 70
37952: ST_TO_ADDR
// if not tmp then
37953: LD_VAR 0 5
37957: NOT
37958: IFFALSE 37962
// exit ;
37960: GO 38026
// if checkLink then
37962: LD_VAR 0 3
37966: IFFALSE 38016
// begin for i in tmp do
37968: LD_ADDR_VAR 0 6
37972: PUSH
37973: LD_VAR 0 5
37977: PUSH
37978: FOR_IN
37979: IFFALSE 38014
// if GetBase ( i ) <> base then
37981: LD_VAR 0 6
37985: PPUSH
37986: CALL_OW 274
37990: PUSH
37991: LD_VAR 0 1
37995: NONEQUAL
37996: IFFALSE 38012
// ComLinkToBase ( base , i ) ;
37998: LD_VAR 0 1
38002: PPUSH
38003: LD_VAR 0 6
38007: PPUSH
38008: CALL_OW 169
38012: GO 37978
38014: POP
38015: POP
// end ; result := tmp ;
38016: LD_ADDR_VAR 0 4
38020: PUSH
38021: LD_VAR 0 5
38025: ST_TO_ADDR
// end ;
38026: LD_VAR 0 4
38030: RET
// export function ComComplete ( units , b ) ; var i ; begin
38031: LD_INT 0
38033: PPUSH
38034: PPUSH
// if not units then
38035: LD_VAR 0 1
38039: NOT
38040: IFFALSE 38044
// exit ;
38042: GO 38134
// for i in units do
38044: LD_ADDR_VAR 0 4
38048: PUSH
38049: LD_VAR 0 1
38053: PUSH
38054: FOR_IN
38055: IFFALSE 38132
// if BuildingStatus ( b ) = bs_build then
38057: LD_VAR 0 2
38061: PPUSH
38062: CALL_OW 461
38066: PUSH
38067: LD_INT 1
38069: EQUAL
38070: IFFALSE 38130
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38072: LD_VAR 0 4
38076: PPUSH
38077: LD_STRING h
38079: PUSH
38080: LD_VAR 0 2
38084: PPUSH
38085: CALL_OW 250
38089: PUSH
38090: LD_VAR 0 2
38094: PPUSH
38095: CALL_OW 251
38099: PUSH
38100: LD_VAR 0 2
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: PUSH
38123: EMPTY
38124: LIST
38125: PPUSH
38126: CALL_OW 446
38130: GO 38054
38132: POP
38133: POP
// end ;
38134: LD_VAR 0 3
38138: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38139: LD_INT 0
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38147: LD_VAR 0 1
38151: NOT
38152: IFTRUE 38169
38154: PUSH
38155: LD_VAR 0 1
38159: PPUSH
38160: CALL_OW 263
38164: PUSH
38165: LD_INT 2
38167: NONEQUAL
38168: OR
38169: IFFALSE 38173
// exit ;
38171: GO 38489
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38173: LD_ADDR_VAR 0 6
38177: PUSH
38178: LD_INT 22
38180: PUSH
38181: LD_VAR 0 1
38185: PPUSH
38186: CALL_OW 255
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: LD_INT 30
38200: PUSH
38201: LD_INT 36
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 34
38210: PUSH
38211: LD_INT 31
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: LIST
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PPUSH
38227: CALL_OW 69
38231: ST_TO_ADDR
// if not tmp then
38232: LD_VAR 0 6
38236: NOT
38237: IFFALSE 38241
// exit ;
38239: GO 38489
// result := [ ] ;
38241: LD_ADDR_VAR 0 2
38245: PUSH
38246: EMPTY
38247: ST_TO_ADDR
// for i in tmp do
38248: LD_ADDR_VAR 0 3
38252: PUSH
38253: LD_VAR 0 6
38257: PUSH
38258: FOR_IN
38259: IFFALSE 38330
// begin t := UnitsInside ( i ) ;
38261: LD_ADDR_VAR 0 4
38265: PUSH
38266: LD_VAR 0 3
38270: PPUSH
38271: CALL_OW 313
38275: ST_TO_ADDR
// if t then
38276: LD_VAR 0 4
38280: IFFALSE 38328
// for j in t do
38282: LD_ADDR_VAR 0 7
38286: PUSH
38287: LD_VAR 0 4
38291: PUSH
38292: FOR_IN
38293: IFFALSE 38326
// result := Replace ( result , result + 1 , j ) ;
38295: LD_ADDR_VAR 0 2
38299: PUSH
38300: LD_VAR 0 2
38304: PPUSH
38305: LD_VAR 0 2
38309: PUSH
38310: LD_INT 1
38312: PLUS
38313: PPUSH
38314: LD_VAR 0 7
38318: PPUSH
38319: CALL_OW 1
38323: ST_TO_ADDR
38324: GO 38292
38326: POP
38327: POP
// end ;
38328: GO 38258
38330: POP
38331: POP
// if not result then
38332: LD_VAR 0 2
38336: NOT
38337: IFFALSE 38341
// exit ;
38339: GO 38489
// mech := result [ 1 ] ;
38341: LD_ADDR_VAR 0 5
38345: PUSH
38346: LD_VAR 0 2
38350: PUSH
38351: LD_INT 1
38353: ARRAY
38354: ST_TO_ADDR
// if result > 1 then
38355: LD_VAR 0 2
38359: PUSH
38360: LD_INT 1
38362: GREATER
38363: IFFALSE 38475
// begin for i = 2 to result do
38365: LD_ADDR_VAR 0 3
38369: PUSH
38370: DOUBLE
38371: LD_INT 2
38373: DEC
38374: ST_TO_ADDR
38375: LD_VAR 0 2
38379: PUSH
38380: FOR_TO
38381: IFFALSE 38473
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38383: LD_ADDR_VAR 0 4
38387: PUSH
38388: LD_VAR 0 2
38392: PUSH
38393: LD_VAR 0 3
38397: ARRAY
38398: PPUSH
38399: LD_INT 3
38401: PPUSH
38402: CALL_OW 259
38406: PUSH
38407: LD_VAR 0 2
38411: PUSH
38412: LD_VAR 0 3
38416: ARRAY
38417: PPUSH
38418: CALL_OW 432
38422: MINUS
38423: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38424: LD_VAR 0 4
38428: PUSH
38429: LD_VAR 0 5
38433: PPUSH
38434: LD_INT 3
38436: PPUSH
38437: CALL_OW 259
38441: PUSH
38442: LD_VAR 0 5
38446: PPUSH
38447: CALL_OW 432
38451: MINUS
38452: GREATEREQUAL
38453: IFFALSE 38471
// mech := result [ i ] ;
38455: LD_ADDR_VAR 0 5
38459: PUSH
38460: LD_VAR 0 2
38464: PUSH
38465: LD_VAR 0 3
38469: ARRAY
38470: ST_TO_ADDR
// end ;
38471: GO 38380
38473: POP
38474: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38475: LD_VAR 0 1
38479: PPUSH
38480: LD_VAR 0 5
38484: PPUSH
38485: CALL_OW 135
// end ;
38489: LD_VAR 0 2
38493: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38494: LD_INT 0
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
// result := [ ] ;
38509: LD_ADDR_VAR 0 7
38513: PUSH
38514: EMPTY
38515: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38516: LD_VAR 0 1
38520: PPUSH
38521: CALL_OW 266
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: IN
38536: NOT
38537: IFFALSE 38541
// exit ;
38539: GO 40181
// if name then
38541: LD_VAR 0 3
38545: IFFALSE 38561
// SetBName ( base_dep , name ) ;
38547: LD_VAR 0 1
38551: PPUSH
38552: LD_VAR 0 3
38556: PPUSH
38557: CALL_OW 500
// base := GetBase ( base_dep ) ;
38561: LD_ADDR_VAR 0 15
38565: PUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL_OW 274
38575: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38576: LD_ADDR_VAR 0 16
38580: PUSH
38581: LD_VAR 0 1
38585: PPUSH
38586: CALL_OW 255
38590: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38591: LD_ADDR_VAR 0 17
38595: PUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 248
38605: ST_TO_ADDR
// if sources then
38606: LD_VAR 0 5
38610: IFFALSE 38657
// for i = 1 to 3 do
38612: LD_ADDR_VAR 0 8
38616: PUSH
38617: DOUBLE
38618: LD_INT 1
38620: DEC
38621: ST_TO_ADDR
38622: LD_INT 3
38624: PUSH
38625: FOR_TO
38626: IFFALSE 38655
// AddResourceType ( base , i , sources [ i ] ) ;
38628: LD_VAR 0 15
38632: PPUSH
38633: LD_VAR 0 8
38637: PPUSH
38638: LD_VAR 0 5
38642: PUSH
38643: LD_VAR 0 8
38647: ARRAY
38648: PPUSH
38649: CALL_OW 276
38653: GO 38625
38655: POP
38656: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38657: LD_ADDR_VAR 0 18
38661: PUSH
38662: LD_VAR 0 15
38666: PPUSH
38667: LD_VAR 0 2
38671: PPUSH
38672: LD_INT 1
38674: PPUSH
38675: CALL 37916 0 3
38679: ST_TO_ADDR
// InitHc ;
38680: CALL_OW 19
// InitUc ;
38684: CALL_OW 18
// uc_side := side ;
38688: LD_ADDR_OWVAR 20
38692: PUSH
38693: LD_VAR 0 16
38697: ST_TO_ADDR
// uc_nation := nation ;
38698: LD_ADDR_OWVAR 21
38702: PUSH
38703: LD_VAR 0 17
38707: ST_TO_ADDR
// if buildings then
38708: LD_VAR 0 18
38712: IFFALSE 40040
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38714: LD_ADDR_VAR 0 19
38718: PUSH
38719: LD_VAR 0 18
38723: PPUSH
38724: LD_INT 2
38726: PUSH
38727: LD_INT 30
38729: PUSH
38730: LD_INT 29
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 30
38739: PUSH
38740: LD_INT 30
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: LIST
38751: PPUSH
38752: CALL_OW 72
38756: ST_TO_ADDR
// if tmp then
38757: LD_VAR 0 19
38761: IFFALSE 38809
// for i in tmp do
38763: LD_ADDR_VAR 0 8
38767: PUSH
38768: LD_VAR 0 19
38772: PUSH
38773: FOR_IN
38774: IFFALSE 38807
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38776: LD_VAR 0 8
38780: PPUSH
38781: CALL_OW 250
38785: PPUSH
38786: LD_VAR 0 8
38790: PPUSH
38791: CALL_OW 251
38795: PPUSH
38796: LD_VAR 0 16
38800: PPUSH
38801: CALL_OW 441
38805: GO 38773
38807: POP
38808: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38809: LD_VAR 0 18
38813: PPUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 30
38819: PUSH
38820: LD_INT 32
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 30
38829: PUSH
38830: LD_INT 33
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: PPUSH
38842: CALL_OW 72
38846: IFFALSE 38934
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38848: LD_ADDR_VAR 0 8
38852: PUSH
38853: LD_VAR 0 18
38857: PPUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 30
38863: PUSH
38864: LD_INT 32
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 30
38873: PUSH
38874: LD_INT 33
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: PPUSH
38886: CALL_OW 72
38890: PUSH
38891: FOR_IN
38892: IFFALSE 38932
// begin if not GetBWeapon ( i ) then
38894: LD_VAR 0 8
38898: PPUSH
38899: CALL_OW 269
38903: NOT
38904: IFFALSE 38930
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38906: LD_VAR 0 8
38910: PPUSH
38911: LD_VAR 0 8
38915: PPUSH
38916: LD_VAR 0 2
38920: PPUSH
38921: CALL 40186 0 2
38925: PPUSH
38926: CALL_OW 431
// end ;
38930: GO 38891
38932: POP
38933: POP
// end ; for i = 1 to personel do
38934: LD_ADDR_VAR 0 8
38938: PUSH
38939: DOUBLE
38940: LD_INT 1
38942: DEC
38943: ST_TO_ADDR
38944: LD_VAR 0 6
38948: PUSH
38949: FOR_TO
38950: IFFALSE 40020
// begin if i > 4 then
38952: LD_VAR 0 8
38956: PUSH
38957: LD_INT 4
38959: GREATER
38960: IFFALSE 38964
// break ;
38962: GO 40020
// case i of 1 :
38964: LD_VAR 0 8
38968: PUSH
38969: LD_INT 1
38971: DOUBLE
38972: EQUAL
38973: IFTRUE 38977
38975: GO 39057
38977: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38978: LD_ADDR_VAR 0 12
38982: PUSH
38983: LD_VAR 0 18
38987: PPUSH
38988: LD_INT 22
38990: PUSH
38991: LD_VAR 0 16
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 58
39002: PUSH
39003: EMPTY
39004: LIST
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: LD_INT 30
39011: PUSH
39012: LD_INT 32
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 30
39021: PUSH
39022: LD_INT 4
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 30
39031: PUSH
39032: LD_INT 5
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: PPUSH
39050: CALL_OW 72
39054: ST_TO_ADDR
39055: GO 39279
39057: LD_INT 2
39059: DOUBLE
39060: EQUAL
39061: IFTRUE 39065
39063: GO 39127
39065: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39066: LD_ADDR_VAR 0 12
39070: PUSH
39071: LD_VAR 0 18
39075: PPUSH
39076: LD_INT 22
39078: PUSH
39079: LD_VAR 0 16
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: LD_INT 30
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 30
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PPUSH
39120: CALL_OW 72
39124: ST_TO_ADDR
39125: GO 39279
39127: LD_INT 3
39129: DOUBLE
39130: EQUAL
39131: IFTRUE 39135
39133: GO 39197
39135: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39136: LD_ADDR_VAR 0 12
39140: PUSH
39141: LD_VAR 0 18
39145: PPUSH
39146: LD_INT 22
39148: PUSH
39149: LD_VAR 0 16
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: LD_INT 30
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 30
39173: PUSH
39174: LD_INT 3
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PPUSH
39190: CALL_OW 72
39194: ST_TO_ADDR
39195: GO 39279
39197: LD_INT 4
39199: DOUBLE
39200: EQUAL
39201: IFTRUE 39205
39203: GO 39278
39205: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39206: LD_ADDR_VAR 0 12
39210: PUSH
39211: LD_VAR 0 18
39215: PPUSH
39216: LD_INT 22
39218: PUSH
39219: LD_VAR 0 16
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: LD_INT 30
39233: PUSH
39234: LD_INT 6
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 30
39243: PUSH
39244: LD_INT 7
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 30
39253: PUSH
39254: LD_INT 8
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PPUSH
39271: CALL_OW 72
39275: ST_TO_ADDR
39276: GO 39279
39278: POP
// if i = 1 then
39279: LD_VAR 0 8
39283: PUSH
39284: LD_INT 1
39286: EQUAL
39287: IFFALSE 39398
// begin tmp := [ ] ;
39289: LD_ADDR_VAR 0 19
39293: PUSH
39294: EMPTY
39295: ST_TO_ADDR
// for j in f do
39296: LD_ADDR_VAR 0 9
39300: PUSH
39301: LD_VAR 0 12
39305: PUSH
39306: FOR_IN
39307: IFFALSE 39380
// if GetBType ( j ) = b_bunker then
39309: LD_VAR 0 9
39313: PPUSH
39314: CALL_OW 266
39318: PUSH
39319: LD_INT 32
39321: EQUAL
39322: IFFALSE 39349
// tmp := Insert ( tmp , 1 , j ) else
39324: LD_ADDR_VAR 0 19
39328: PUSH
39329: LD_VAR 0 19
39333: PPUSH
39334: LD_INT 1
39336: PPUSH
39337: LD_VAR 0 9
39341: PPUSH
39342: CALL_OW 2
39346: ST_TO_ADDR
39347: GO 39378
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39349: LD_ADDR_VAR 0 19
39353: PUSH
39354: LD_VAR 0 19
39358: PPUSH
39359: LD_VAR 0 19
39363: PUSH
39364: LD_INT 1
39366: PLUS
39367: PPUSH
39368: LD_VAR 0 9
39372: PPUSH
39373: CALL_OW 2
39377: ST_TO_ADDR
39378: GO 39306
39380: POP
39381: POP
// if tmp then
39382: LD_VAR 0 19
39386: IFFALSE 39398
// f := tmp ;
39388: LD_ADDR_VAR 0 12
39392: PUSH
39393: LD_VAR 0 19
39397: ST_TO_ADDR
// end ; x := personel [ i ] ;
39398: LD_ADDR_VAR 0 13
39402: PUSH
39403: LD_VAR 0 6
39407: PUSH
39408: LD_VAR 0 8
39412: ARRAY
39413: ST_TO_ADDR
// if x = - 1 then
39414: LD_VAR 0 13
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: EQUAL
39423: IFFALSE 39634
// begin for j in f do
39425: LD_ADDR_VAR 0 9
39429: PUSH
39430: LD_VAR 0 12
39434: PUSH
39435: FOR_IN
39436: IFFALSE 39630
// repeat InitHc ;
39438: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39442: LD_VAR 0 9
39446: PPUSH
39447: CALL_OW 266
39451: PUSH
39452: LD_INT 5
39454: EQUAL
39455: IFFALSE 39525
// begin if UnitsInside ( j ) < 3 then
39457: LD_VAR 0 9
39461: PPUSH
39462: CALL_OW 313
39466: PUSH
39467: LD_INT 3
39469: LESS
39470: IFFALSE 39506
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39472: LD_INT 0
39474: PPUSH
39475: LD_INT 5
39477: PUSH
39478: LD_INT 8
39480: PUSH
39481: LD_INT 9
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: LIST
39488: PUSH
39489: LD_VAR 0 17
39493: ARRAY
39494: PPUSH
39495: LD_VAR 0 4
39499: PPUSH
39500: CALL_OW 380
39504: GO 39523
// PrepareHuman ( false , i , skill ) ;
39506: LD_INT 0
39508: PPUSH
39509: LD_VAR 0 8
39513: PPUSH
39514: LD_VAR 0 4
39518: PPUSH
39519: CALL_OW 380
// end else
39523: GO 39542
// PrepareHuman ( false , i , skill ) ;
39525: LD_INT 0
39527: PPUSH
39528: LD_VAR 0 8
39532: PPUSH
39533: LD_VAR 0 4
39537: PPUSH
39538: CALL_OW 380
// un := CreateHuman ;
39542: LD_ADDR_VAR 0 14
39546: PUSH
39547: CALL_OW 44
39551: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39552: LD_ADDR_VAR 0 7
39556: PUSH
39557: LD_VAR 0 7
39561: PPUSH
39562: LD_INT 1
39564: PPUSH
39565: LD_VAR 0 14
39569: PPUSH
39570: CALL_OW 2
39574: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39575: LD_VAR 0 14
39579: PPUSH
39580: LD_VAR 0 9
39584: PPUSH
39585: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39589: LD_VAR 0 9
39593: PPUSH
39594: CALL_OW 313
39598: PUSH
39599: LD_INT 6
39601: EQUAL
39602: IFTRUE 39626
39604: PUSH
39605: LD_VAR 0 9
39609: PPUSH
39610: CALL_OW 266
39614: PUSH
39615: LD_INT 32
39617: PUSH
39618: LD_INT 31
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: IN
39625: OR
39626: IFFALSE 39438
39628: GO 39435
39630: POP
39631: POP
// end else
39632: GO 40018
// for j = 1 to x do
39634: LD_ADDR_VAR 0 9
39638: PUSH
39639: DOUBLE
39640: LD_INT 1
39642: DEC
39643: ST_TO_ADDR
39644: LD_VAR 0 13
39648: PUSH
39649: FOR_TO
39650: IFFALSE 40016
// begin InitHc ;
39652: CALL_OW 19
// if not f then
39656: LD_VAR 0 12
39660: NOT
39661: IFFALSE 39750
// begin PrepareHuman ( false , i , skill ) ;
39663: LD_INT 0
39665: PPUSH
39666: LD_VAR 0 8
39670: PPUSH
39671: LD_VAR 0 4
39675: PPUSH
39676: CALL_OW 380
// un := CreateHuman ;
39680: LD_ADDR_VAR 0 14
39684: PUSH
39685: CALL_OW 44
39689: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39690: LD_ADDR_VAR 0 7
39694: PUSH
39695: LD_VAR 0 7
39699: PPUSH
39700: LD_INT 1
39702: PPUSH
39703: LD_VAR 0 14
39707: PPUSH
39708: CALL_OW 2
39712: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39713: LD_VAR 0 14
39717: PPUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 250
39727: PPUSH
39728: LD_VAR 0 1
39732: PPUSH
39733: CALL_OW 251
39737: PPUSH
39738: LD_INT 10
39740: PPUSH
39741: LD_INT 0
39743: PPUSH
39744: CALL_OW 50
// continue ;
39748: GO 39649
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39750: LD_VAR 0 12
39754: PUSH
39755: LD_INT 1
39757: ARRAY
39758: PPUSH
39759: CALL_OW 313
39763: IFFALSE 39791
39765: PUSH
39766: LD_VAR 0 12
39770: PUSH
39771: LD_INT 1
39773: ARRAY
39774: PPUSH
39775: CALL_OW 266
39779: PUSH
39780: LD_INT 32
39782: PUSH
39783: LD_INT 31
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: IN
39790: AND
39791: IFTRUE 39812
39793: PUSH
39794: LD_VAR 0 12
39798: PUSH
39799: LD_INT 1
39801: ARRAY
39802: PPUSH
39803: CALL_OW 313
39807: PUSH
39808: LD_INT 6
39810: EQUAL
39811: OR
39812: IFFALSE 39832
// f := Delete ( f , 1 ) ;
39814: LD_ADDR_VAR 0 12
39818: PUSH
39819: LD_VAR 0 12
39823: PPUSH
39824: LD_INT 1
39826: PPUSH
39827: CALL_OW 3
39831: ST_TO_ADDR
// if not f then
39832: LD_VAR 0 12
39836: NOT
39837: IFFALSE 39855
// begin x := x + 2 ;
39839: LD_ADDR_VAR 0 13
39843: PUSH
39844: LD_VAR 0 13
39848: PUSH
39849: LD_INT 2
39851: PLUS
39852: ST_TO_ADDR
// continue ;
39853: GO 39649
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39855: LD_VAR 0 12
39859: PUSH
39860: LD_INT 1
39862: ARRAY
39863: PPUSH
39864: CALL_OW 266
39868: PUSH
39869: LD_INT 5
39871: EQUAL
39872: IFFALSE 39946
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39874: LD_VAR 0 12
39878: PUSH
39879: LD_INT 1
39881: ARRAY
39882: PPUSH
39883: CALL_OW 313
39887: PUSH
39888: LD_INT 3
39890: LESS
39891: IFFALSE 39927
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39893: LD_INT 0
39895: PPUSH
39896: LD_INT 5
39898: PUSH
39899: LD_INT 8
39901: PUSH
39902: LD_INT 9
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: PUSH
39910: LD_VAR 0 17
39914: ARRAY
39915: PPUSH
39916: LD_VAR 0 4
39920: PPUSH
39921: CALL_OW 380
39925: GO 39944
// PrepareHuman ( false , i , skill ) ;
39927: LD_INT 0
39929: PPUSH
39930: LD_VAR 0 8
39934: PPUSH
39935: LD_VAR 0 4
39939: PPUSH
39940: CALL_OW 380
// end else
39944: GO 39963
// PrepareHuman ( false , i , skill ) ;
39946: LD_INT 0
39948: PPUSH
39949: LD_VAR 0 8
39953: PPUSH
39954: LD_VAR 0 4
39958: PPUSH
39959: CALL_OW 380
// un := CreateHuman ;
39963: LD_ADDR_VAR 0 14
39967: PUSH
39968: CALL_OW 44
39972: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39973: LD_ADDR_VAR 0 7
39977: PUSH
39978: LD_VAR 0 7
39982: PPUSH
39983: LD_INT 1
39985: PPUSH
39986: LD_VAR 0 14
39990: PPUSH
39991: CALL_OW 2
39995: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39996: LD_VAR 0 14
40000: PPUSH
40001: LD_VAR 0 12
40005: PUSH
40006: LD_INT 1
40008: ARRAY
40009: PPUSH
40010: CALL_OW 52
// end ;
40014: GO 39649
40016: POP
40017: POP
// end ;
40018: GO 38949
40020: POP
40021: POP
// result := result ^ buildings ;
40022: LD_ADDR_VAR 0 7
40026: PUSH
40027: LD_VAR 0 7
40031: PUSH
40032: LD_VAR 0 18
40036: ADD
40037: ST_TO_ADDR
// end else
40038: GO 40181
// begin for i = 1 to personel do
40040: LD_ADDR_VAR 0 8
40044: PUSH
40045: DOUBLE
40046: LD_INT 1
40048: DEC
40049: ST_TO_ADDR
40050: LD_VAR 0 6
40054: PUSH
40055: FOR_TO
40056: IFFALSE 40179
// begin if i > 4 then
40058: LD_VAR 0 8
40062: PUSH
40063: LD_INT 4
40065: GREATER
40066: IFFALSE 40070
// break ;
40068: GO 40179
// x := personel [ i ] ;
40070: LD_ADDR_VAR 0 13
40074: PUSH
40075: LD_VAR 0 6
40079: PUSH
40080: LD_VAR 0 8
40084: ARRAY
40085: ST_TO_ADDR
// if x = - 1 then
40086: LD_VAR 0 13
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: EQUAL
40095: IFFALSE 40099
// continue ;
40097: GO 40055
// PrepareHuman ( false , i , skill ) ;
40099: LD_INT 0
40101: PPUSH
40102: LD_VAR 0 8
40106: PPUSH
40107: LD_VAR 0 4
40111: PPUSH
40112: CALL_OW 380
// un := CreateHuman ;
40116: LD_ADDR_VAR 0 14
40120: PUSH
40121: CALL_OW 44
40125: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40126: LD_VAR 0 14
40130: PPUSH
40131: LD_VAR 0 1
40135: PPUSH
40136: CALL_OW 250
40140: PPUSH
40141: LD_VAR 0 1
40145: PPUSH
40146: CALL_OW 251
40150: PPUSH
40151: LD_INT 10
40153: PPUSH
40154: LD_INT 0
40156: PPUSH
40157: CALL_OW 50
// result := result ^ un ;
40161: LD_ADDR_VAR 0 7
40165: PUSH
40166: LD_VAR 0 7
40170: PUSH
40171: LD_VAR 0 14
40175: ADD
40176: ST_TO_ADDR
// end ;
40177: GO 40055
40179: POP
40180: POP
// end ; end ;
40181: LD_VAR 0 7
40185: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40186: LD_INT 0
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
40199: PPUSH
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
// result := false ;
40204: LD_ADDR_VAR 0 3
40208: PUSH
40209: LD_INT 0
40211: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40212: LD_VAR 0 1
40216: NOT
40217: IFTRUE 40242
40219: PUSH
40220: LD_VAR 0 1
40224: PPUSH
40225: CALL_OW 266
40229: PUSH
40230: LD_INT 32
40232: PUSH
40233: LD_INT 33
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: IN
40240: NOT
40241: OR
40242: IFFALSE 40246
// exit ;
40244: GO 41381
// nat := GetNation ( tower ) ;
40246: LD_ADDR_VAR 0 12
40250: PUSH
40251: LD_VAR 0 1
40255: PPUSH
40256: CALL_OW 248
40260: ST_TO_ADDR
// side := GetSide ( tower ) ;
40261: LD_ADDR_VAR 0 16
40265: PUSH
40266: LD_VAR 0 1
40270: PPUSH
40271: CALL_OW 255
40275: ST_TO_ADDR
// x := GetX ( tower ) ;
40276: LD_ADDR_VAR 0 10
40280: PUSH
40281: LD_VAR 0 1
40285: PPUSH
40286: CALL_OW 250
40290: ST_TO_ADDR
// y := GetY ( tower ) ;
40291: LD_ADDR_VAR 0 11
40295: PUSH
40296: LD_VAR 0 1
40300: PPUSH
40301: CALL_OW 251
40305: ST_TO_ADDR
// if not x or not y then
40306: LD_VAR 0 10
40310: NOT
40311: IFTRUE 40320
40313: PUSH
40314: LD_VAR 0 11
40318: NOT
40319: OR
40320: IFFALSE 40324
// exit ;
40322: GO 41381
// weapon := 0 ;
40324: LD_ADDR_VAR 0 18
40328: PUSH
40329: LD_INT 0
40331: ST_TO_ADDR
// fac_list := [ ] ;
40332: LD_ADDR_VAR 0 17
40336: PUSH
40337: EMPTY
40338: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40339: LD_ADDR_VAR 0 6
40343: PUSH
40344: LD_VAR 0 1
40348: PPUSH
40349: CALL_OW 274
40353: PPUSH
40354: LD_VAR 0 2
40358: PPUSH
40359: LD_INT 0
40361: PPUSH
40362: CALL 37916 0 3
40366: PPUSH
40367: LD_INT 30
40369: PUSH
40370: LD_INT 3
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PPUSH
40377: CALL_OW 72
40381: ST_TO_ADDR
// if not factories then
40382: LD_VAR 0 6
40386: NOT
40387: IFFALSE 40391
// exit ;
40389: GO 41381
// for i in factories do
40391: LD_ADDR_VAR 0 8
40395: PUSH
40396: LD_VAR 0 6
40400: PUSH
40401: FOR_IN
40402: IFFALSE 40427
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40404: LD_ADDR_VAR 0 17
40408: PUSH
40409: LD_VAR 0 17
40413: PUSH
40414: LD_VAR 0 8
40418: PPUSH
40419: CALL_OW 478
40423: UNION
40424: ST_TO_ADDR
40425: GO 40401
40427: POP
40428: POP
// if not fac_list then
40429: LD_VAR 0 17
40433: NOT
40434: IFFALSE 40438
// exit ;
40436: GO 41381
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40438: LD_ADDR_VAR 0 5
40442: PUSH
40443: LD_INT 4
40445: PUSH
40446: LD_INT 5
40448: PUSH
40449: LD_INT 9
40451: PUSH
40452: LD_INT 10
40454: PUSH
40455: LD_INT 6
40457: PUSH
40458: LD_INT 7
40460: PUSH
40461: LD_INT 11
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 27
40475: PUSH
40476: LD_INT 28
40478: PUSH
40479: LD_INT 26
40481: PUSH
40482: LD_INT 30
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 43
40493: PUSH
40494: LD_INT 44
40496: PUSH
40497: LD_INT 46
40499: PUSH
40500: LD_INT 45
40502: PUSH
40503: LD_INT 47
40505: PUSH
40506: LD_INT 49
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: PUSH
40522: LD_VAR 0 12
40526: ARRAY
40527: ST_TO_ADDR
// list := list isect fac_list ;
40528: LD_ADDR_VAR 0 5
40532: PUSH
40533: LD_VAR 0 5
40537: PUSH
40538: LD_VAR 0 17
40542: ISECT
40543: ST_TO_ADDR
// if not list then
40544: LD_VAR 0 5
40548: NOT
40549: IFFALSE 40553
// exit ;
40551: GO 41381
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40553: LD_VAR 0 12
40557: PUSH
40558: LD_INT 3
40560: EQUAL
40561: IFFALSE 40573
40563: PUSH
40564: LD_INT 49
40566: PUSH
40567: LD_VAR 0 5
40571: IN
40572: AND
40573: IFFALSE 40593
40575: PUSH
40576: LD_INT 31
40578: PPUSH
40579: LD_VAR 0 16
40583: PPUSH
40584: CALL_OW 321
40588: PUSH
40589: LD_INT 2
40591: EQUAL
40592: AND
40593: IFFALSE 40653
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40595: LD_INT 22
40597: PUSH
40598: LD_VAR 0 16
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 35
40609: PUSH
40610: LD_INT 49
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 91
40619: PUSH
40620: LD_VAR 0 1
40624: PUSH
40625: LD_INT 10
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: PPUSH
40638: CALL_OW 69
40642: NOT
40643: IFFALSE 40653
// weapon := ru_time_lapser ;
40645: LD_ADDR_VAR 0 18
40649: PUSH
40650: LD_INT 49
40652: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40653: LD_VAR 0 12
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: IN
40668: IFFALSE 40692
40670: PUSH
40671: LD_INT 11
40673: PUSH
40674: LD_VAR 0 5
40678: IN
40679: IFTRUE 40691
40681: PUSH
40682: LD_INT 30
40684: PUSH
40685: LD_VAR 0 5
40689: IN
40690: OR
40691: AND
40692: IFFALSE 40712
40694: PUSH
40695: LD_INT 6
40697: PPUSH
40698: LD_VAR 0 16
40702: PPUSH
40703: CALL_OW 321
40707: PUSH
40708: LD_INT 2
40710: EQUAL
40711: AND
40712: IFFALSE 40879
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40714: LD_INT 22
40716: PUSH
40717: LD_VAR 0 16
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 35
40731: PUSH
40732: LD_INT 11
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 35
40741: PUSH
40742: LD_INT 30
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 91
40756: PUSH
40757: LD_VAR 0 1
40761: PUSH
40762: LD_INT 18
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: LIST
40774: PPUSH
40775: CALL_OW 69
40779: NOT
40780: IFFALSE 40856
40782: PUSH
40783: LD_INT 22
40785: PUSH
40786: LD_VAR 0 16
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 30
40800: PUSH
40801: LD_INT 32
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 30
40810: PUSH
40811: LD_INT 33
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 91
40825: PUSH
40826: LD_VAR 0 1
40830: PUSH
40831: LD_INT 12
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: LIST
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: LIST
40843: PUSH
40844: EMPTY
40845: LIST
40846: PPUSH
40847: CALL_OW 69
40851: PUSH
40852: LD_INT 2
40854: GREATER
40855: AND
40856: IFFALSE 40879
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40858: LD_ADDR_VAR 0 18
40862: PUSH
40863: LD_INT 11
40865: PUSH
40866: LD_INT 30
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_VAR 0 12
40877: ARRAY
40878: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40879: LD_VAR 0 18
40883: NOT
40884: IFFALSE 40904
40886: PUSH
40887: LD_INT 40
40889: PPUSH
40890: LD_VAR 0 16
40894: PPUSH
40895: CALL_OW 321
40899: PUSH
40900: LD_INT 2
40902: EQUAL
40903: AND
40904: IFFALSE 40940
40906: PUSH
40907: LD_INT 7
40909: PUSH
40910: LD_VAR 0 5
40914: IN
40915: IFTRUE 40927
40917: PUSH
40918: LD_INT 28
40920: PUSH
40921: LD_VAR 0 5
40925: IN
40926: OR
40927: IFTRUE 40939
40929: PUSH
40930: LD_INT 45
40932: PUSH
40933: LD_VAR 0 5
40937: IN
40938: OR
40939: AND
40940: IFFALSE 41194
// begin hex := GetHexInfo ( x , y ) ;
40942: LD_ADDR_VAR 0 4
40946: PUSH
40947: LD_VAR 0 10
40951: PPUSH
40952: LD_VAR 0 11
40956: PPUSH
40957: CALL_OW 546
40961: ST_TO_ADDR
// if hex [ 1 ] then
40962: LD_VAR 0 4
40966: PUSH
40967: LD_INT 1
40969: ARRAY
40970: IFFALSE 40974
// exit ;
40972: GO 41381
// height := hex [ 2 ] ;
40974: LD_ADDR_VAR 0 15
40978: PUSH
40979: LD_VAR 0 4
40983: PUSH
40984: LD_INT 2
40986: ARRAY
40987: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40988: LD_ADDR_VAR 0 14
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: LD_INT 3
41001: PUSH
41002: LD_INT 5
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: ST_TO_ADDR
// for i in tmp do
41011: LD_ADDR_VAR 0 8
41015: PUSH
41016: LD_VAR 0 14
41020: PUSH
41021: FOR_IN
41022: IFFALSE 41192
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41024: LD_ADDR_VAR 0 9
41028: PUSH
41029: LD_VAR 0 10
41033: PPUSH
41034: LD_VAR 0 8
41038: PPUSH
41039: LD_INT 5
41041: PPUSH
41042: CALL_OW 272
41046: PUSH
41047: LD_VAR 0 11
41051: PPUSH
41052: LD_VAR 0 8
41056: PPUSH
41057: LD_INT 5
41059: PPUSH
41060: CALL_OW 273
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41069: LD_VAR 0 9
41073: PUSH
41074: LD_INT 1
41076: ARRAY
41077: PPUSH
41078: LD_VAR 0 9
41082: PUSH
41083: LD_INT 2
41085: ARRAY
41086: PPUSH
41087: CALL_OW 488
41091: IFFALSE 41190
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41093: LD_ADDR_VAR 0 4
41097: PUSH
41098: LD_VAR 0 9
41102: PUSH
41103: LD_INT 1
41105: ARRAY
41106: PPUSH
41107: LD_VAR 0 9
41111: PUSH
41112: LD_INT 2
41114: ARRAY
41115: PPUSH
41116: CALL_OW 546
41120: ST_TO_ADDR
// if hex [ 1 ] then
41121: LD_VAR 0 4
41125: PUSH
41126: LD_INT 1
41128: ARRAY
41129: IFFALSE 41133
// continue ;
41131: GO 41021
// h := hex [ 2 ] ;
41133: LD_ADDR_VAR 0 13
41137: PUSH
41138: LD_VAR 0 4
41142: PUSH
41143: LD_INT 2
41145: ARRAY
41146: ST_TO_ADDR
// if h + 7 < height then
41147: LD_VAR 0 13
41151: PUSH
41152: LD_INT 7
41154: PLUS
41155: PUSH
41156: LD_VAR 0 15
41160: LESS
41161: IFFALSE 41190
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41163: LD_ADDR_VAR 0 18
41167: PUSH
41168: LD_INT 7
41170: PUSH
41171: LD_INT 28
41173: PUSH
41174: LD_INT 45
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: PUSH
41182: LD_VAR 0 12
41186: ARRAY
41187: ST_TO_ADDR
// break ;
41188: GO 41192
// end ; end ; end ;
41190: GO 41021
41192: POP
41193: POP
// end ; if not weapon then
41194: LD_VAR 0 18
41198: NOT
41199: IFFALSE 41259
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41201: LD_ADDR_VAR 0 5
41205: PUSH
41206: LD_VAR 0 5
41210: PUSH
41211: LD_INT 11
41213: PUSH
41214: LD_INT 30
41216: PUSH
41217: LD_INT 49
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: LIST
41224: DIFF
41225: ST_TO_ADDR
// if not list then
41226: LD_VAR 0 5
41230: NOT
41231: IFFALSE 41235
// exit ;
41233: GO 41381
// weapon := list [ rand ( 1 , list ) ] ;
41235: LD_ADDR_VAR 0 18
41239: PUSH
41240: LD_VAR 0 5
41244: PUSH
41245: LD_INT 1
41247: PPUSH
41248: LD_VAR 0 5
41252: PPUSH
41253: CALL_OW 12
41257: ARRAY
41258: ST_TO_ADDR
// end ; if weapon then
41259: LD_VAR 0 18
41263: IFFALSE 41381
// begin tmp := CostOfWeapon ( weapon ) ;
41265: LD_ADDR_VAR 0 14
41269: PUSH
41270: LD_VAR 0 18
41274: PPUSH
41275: CALL_OW 451
41279: ST_TO_ADDR
// j := GetBase ( tower ) ;
41280: LD_ADDR_VAR 0 9
41284: PUSH
41285: LD_VAR 0 1
41289: PPUSH
41290: CALL_OW 274
41294: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41295: LD_VAR 0 9
41299: PPUSH
41300: LD_INT 1
41302: PPUSH
41303: CALL_OW 275
41307: PUSH
41308: LD_VAR 0 14
41312: PUSH
41313: LD_INT 1
41315: ARRAY
41316: GREATEREQUAL
41317: IFFALSE 41343
41319: PUSH
41320: LD_VAR 0 9
41324: PPUSH
41325: LD_INT 2
41327: PPUSH
41328: CALL_OW 275
41332: PUSH
41333: LD_VAR 0 14
41337: PUSH
41338: LD_INT 2
41340: ARRAY
41341: GREATEREQUAL
41342: AND
41343: IFFALSE 41369
41345: PUSH
41346: LD_VAR 0 9
41350: PPUSH
41351: LD_INT 3
41353: PPUSH
41354: CALL_OW 275
41358: PUSH
41359: LD_VAR 0 14
41363: PUSH
41364: LD_INT 3
41366: ARRAY
41367: GREATEREQUAL
41368: AND
41369: IFFALSE 41381
// result := weapon ;
41371: LD_ADDR_VAR 0 3
41375: PUSH
41376: LD_VAR 0 18
41380: ST_TO_ADDR
// end ; end ;
41381: LD_VAR 0 3
41385: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41386: LD_INT 0
41388: PPUSH
41389: PPUSH
// result := true ;
41390: LD_ADDR_VAR 0 3
41394: PUSH
41395: LD_INT 1
41397: ST_TO_ADDR
// if array1 = array2 then
41398: LD_VAR 0 1
41402: PUSH
41403: LD_VAR 0 2
41407: EQUAL
41408: IFFALSE 41468
// begin for i = 1 to array1 do
41410: LD_ADDR_VAR 0 4
41414: PUSH
41415: DOUBLE
41416: LD_INT 1
41418: DEC
41419: ST_TO_ADDR
41420: LD_VAR 0 1
41424: PUSH
41425: FOR_TO
41426: IFFALSE 41464
// if array1 [ i ] <> array2 [ i ] then
41428: LD_VAR 0 1
41432: PUSH
41433: LD_VAR 0 4
41437: ARRAY
41438: PUSH
41439: LD_VAR 0 2
41443: PUSH
41444: LD_VAR 0 4
41448: ARRAY
41449: NONEQUAL
41450: IFFALSE 41462
// begin result := false ;
41452: LD_ADDR_VAR 0 3
41456: PUSH
41457: LD_INT 0
41459: ST_TO_ADDR
// break ;
41460: GO 41464
// end ;
41462: GO 41425
41464: POP
41465: POP
// end else
41466: GO 41476
// result := false ;
41468: LD_ADDR_VAR 0 3
41472: PUSH
41473: LD_INT 0
41475: ST_TO_ADDR
// end ;
41476: LD_VAR 0 3
41480: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41481: LD_INT 0
41483: PPUSH
41484: PPUSH
// if not array1 or not array2 then
41485: LD_VAR 0 1
41489: NOT
41490: IFTRUE 41499
41492: PUSH
41493: LD_VAR 0 2
41497: NOT
41498: OR
41499: IFFALSE 41503
// exit ;
41501: GO 41567
// result := true ;
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_INT 1
41510: ST_TO_ADDR
// for i = 1 to array1 do
41511: LD_ADDR_VAR 0 4
41515: PUSH
41516: DOUBLE
41517: LD_INT 1
41519: DEC
41520: ST_TO_ADDR
41521: LD_VAR 0 1
41525: PUSH
41526: FOR_TO
41527: IFFALSE 41565
// if array1 [ i ] <> array2 [ i ] then
41529: LD_VAR 0 1
41533: PUSH
41534: LD_VAR 0 4
41538: ARRAY
41539: PUSH
41540: LD_VAR 0 2
41544: PUSH
41545: LD_VAR 0 4
41549: ARRAY
41550: NONEQUAL
41551: IFFALSE 41563
// begin result := false ;
41553: LD_ADDR_VAR 0 3
41557: PUSH
41558: LD_INT 0
41560: ST_TO_ADDR
// break ;
41561: GO 41565
// end ;
41563: GO 41526
41565: POP
41566: POP
// end ;
41567: LD_VAR 0 3
41571: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41572: LD_INT 0
41574: PPUSH
41575: PPUSH
41576: PPUSH
// pom := GetBase ( fac ) ;
41577: LD_ADDR_VAR 0 5
41581: PUSH
41582: LD_VAR 0 1
41586: PPUSH
41587: CALL_OW 274
41591: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41592: LD_ADDR_VAR 0 4
41596: PUSH
41597: LD_VAR 0 2
41601: PUSH
41602: LD_INT 1
41604: ARRAY
41605: PPUSH
41606: LD_VAR 0 2
41610: PUSH
41611: LD_INT 2
41613: ARRAY
41614: PPUSH
41615: LD_VAR 0 2
41619: PUSH
41620: LD_INT 3
41622: ARRAY
41623: PPUSH
41624: LD_VAR 0 2
41628: PUSH
41629: LD_INT 4
41631: ARRAY
41632: PPUSH
41633: CALL_OW 449
41637: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41638: LD_ADDR_VAR 0 3
41642: PUSH
41643: LD_VAR 0 5
41647: PPUSH
41648: LD_INT 1
41650: PPUSH
41651: CALL_OW 275
41655: PUSH
41656: LD_VAR 0 4
41660: PUSH
41661: LD_INT 1
41663: ARRAY
41664: GREATEREQUAL
41665: IFFALSE 41691
41667: PUSH
41668: LD_VAR 0 5
41672: PPUSH
41673: LD_INT 2
41675: PPUSH
41676: CALL_OW 275
41680: PUSH
41681: LD_VAR 0 4
41685: PUSH
41686: LD_INT 2
41688: ARRAY
41689: GREATEREQUAL
41690: AND
41691: IFFALSE 41717
41693: PUSH
41694: LD_VAR 0 5
41698: PPUSH
41699: LD_INT 3
41701: PPUSH
41702: CALL_OW 275
41706: PUSH
41707: LD_VAR 0 4
41711: PUSH
41712: LD_INT 3
41714: ARRAY
41715: GREATEREQUAL
41716: AND
41717: ST_TO_ADDR
// end ;
41718: LD_VAR 0 3
41722: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41723: LD_INT 0
41725: PPUSH
41726: PPUSH
41727: PPUSH
41728: PPUSH
// pom := GetBase ( building ) ;
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: LD_VAR 0 1
41738: PPUSH
41739: CALL_OW 274
41743: ST_TO_ADDR
// if not pom then
41744: LD_VAR 0 3
41748: NOT
41749: IFFALSE 41753
// exit ;
41751: GO 41927
// btype := GetBType ( building ) ;
41753: LD_ADDR_VAR 0 5
41757: PUSH
41758: LD_VAR 0 1
41762: PPUSH
41763: CALL_OW 266
41767: ST_TO_ADDR
// if btype = b_armoury then
41768: LD_VAR 0 5
41772: PUSH
41773: LD_INT 4
41775: EQUAL
41776: IFFALSE 41786
// btype := b_barracks ;
41778: LD_ADDR_VAR 0 5
41782: PUSH
41783: LD_INT 5
41785: ST_TO_ADDR
// if btype = b_depot then
41786: LD_VAR 0 5
41790: PUSH
41791: LD_INT 0
41793: EQUAL
41794: IFFALSE 41804
// btype := b_warehouse ;
41796: LD_ADDR_VAR 0 5
41800: PUSH
41801: LD_INT 1
41803: ST_TO_ADDR
// if btype = b_workshop then
41804: LD_VAR 0 5
41808: PUSH
41809: LD_INT 2
41811: EQUAL
41812: IFFALSE 41822
// btype := b_factory ;
41814: LD_ADDR_VAR 0 5
41818: PUSH
41819: LD_INT 3
41821: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41822: LD_ADDR_VAR 0 4
41826: PUSH
41827: LD_VAR 0 5
41831: PPUSH
41832: LD_VAR 0 1
41836: PPUSH
41837: CALL_OW 248
41841: PPUSH
41842: CALL_OW 450
41846: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41847: LD_ADDR_VAR 0 2
41851: PUSH
41852: LD_VAR 0 3
41856: PPUSH
41857: LD_INT 1
41859: PPUSH
41860: CALL_OW 275
41864: PUSH
41865: LD_VAR 0 4
41869: PUSH
41870: LD_INT 1
41872: ARRAY
41873: GREATEREQUAL
41874: IFFALSE 41900
41876: PUSH
41877: LD_VAR 0 3
41881: PPUSH
41882: LD_INT 2
41884: PPUSH
41885: CALL_OW 275
41889: PUSH
41890: LD_VAR 0 4
41894: PUSH
41895: LD_INT 2
41897: ARRAY
41898: GREATEREQUAL
41899: AND
41900: IFFALSE 41926
41902: PUSH
41903: LD_VAR 0 3
41907: PPUSH
41908: LD_INT 3
41910: PPUSH
41911: CALL_OW 275
41915: PUSH
41916: LD_VAR 0 4
41920: PUSH
41921: LD_INT 3
41923: ARRAY
41924: GREATEREQUAL
41925: AND
41926: ST_TO_ADDR
// end ;
41927: LD_VAR 0 2
41931: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41932: LD_INT 0
41934: PPUSH
41935: PPUSH
41936: PPUSH
// pom := GetBase ( building ) ;
41937: LD_ADDR_VAR 0 4
41941: PUSH
41942: LD_VAR 0 1
41946: PPUSH
41947: CALL_OW 274
41951: ST_TO_ADDR
// if not pom then
41952: LD_VAR 0 4
41956: NOT
41957: IFFALSE 41961
// exit ;
41959: GO 42066
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41961: LD_ADDR_VAR 0 5
41965: PUSH
41966: LD_VAR 0 2
41970: PPUSH
41971: LD_VAR 0 1
41975: PPUSH
41976: CALL_OW 248
41980: PPUSH
41981: CALL_OW 450
41985: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: LD_VAR 0 4
41995: PPUSH
41996: LD_INT 1
41998: PPUSH
41999: CALL_OW 275
42003: PUSH
42004: LD_VAR 0 5
42008: PUSH
42009: LD_INT 1
42011: ARRAY
42012: GREATEREQUAL
42013: IFFALSE 42039
42015: PUSH
42016: LD_VAR 0 4
42020: PPUSH
42021: LD_INT 2
42023: PPUSH
42024: CALL_OW 275
42028: PUSH
42029: LD_VAR 0 5
42033: PUSH
42034: LD_INT 2
42036: ARRAY
42037: GREATEREQUAL
42038: AND
42039: IFFALSE 42065
42041: PUSH
42042: LD_VAR 0 4
42046: PPUSH
42047: LD_INT 3
42049: PPUSH
42050: CALL_OW 275
42054: PUSH
42055: LD_VAR 0 5
42059: PUSH
42060: LD_INT 3
42062: ARRAY
42063: GREATEREQUAL
42064: AND
42065: ST_TO_ADDR
// end ;
42066: LD_VAR 0 3
42070: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42071: LD_INT 0
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
// result := false ;
42084: LD_ADDR_VAR 0 8
42088: PUSH
42089: LD_INT 0
42091: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42092: LD_VAR 0 5
42096: NOT
42097: IFTRUE 42106
42099: PUSH
42100: LD_VAR 0 1
42104: NOT
42105: OR
42106: IFTRUE 42115
42108: PUSH
42109: LD_VAR 0 2
42113: NOT
42114: OR
42115: IFTRUE 42124
42117: PUSH
42118: LD_VAR 0 3
42122: NOT
42123: OR
42124: IFFALSE 42128
// exit ;
42126: GO 42954
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42128: LD_ADDR_VAR 0 14
42132: PUSH
42133: LD_VAR 0 1
42137: PPUSH
42138: LD_VAR 0 2
42142: PPUSH
42143: LD_VAR 0 3
42147: PPUSH
42148: LD_VAR 0 4
42152: PPUSH
42153: LD_VAR 0 5
42157: PUSH
42158: LD_INT 1
42160: ARRAY
42161: PPUSH
42162: CALL_OW 248
42166: PPUSH
42167: LD_INT 0
42169: PPUSH
42170: CALL 44235 0 6
42174: ST_TO_ADDR
// if not hexes then
42175: LD_VAR 0 14
42179: NOT
42180: IFFALSE 42184
// exit ;
42182: GO 42954
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42184: LD_ADDR_VAR 0 17
42188: PUSH
42189: LD_VAR 0 5
42193: PPUSH
42194: LD_INT 22
42196: PUSH
42197: LD_VAR 0 13
42201: PPUSH
42202: CALL_OW 255
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: LD_INT 30
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 30
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PPUSH
42243: CALL_OW 72
42247: ST_TO_ADDR
// for i = 1 to hexes do
42248: LD_ADDR_VAR 0 9
42252: PUSH
42253: DOUBLE
42254: LD_INT 1
42256: DEC
42257: ST_TO_ADDR
42258: LD_VAR 0 14
42262: PUSH
42263: FOR_TO
42264: IFFALSE 42952
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42266: LD_ADDR_VAR 0 13
42270: PUSH
42271: LD_VAR 0 14
42275: PUSH
42276: LD_VAR 0 9
42280: ARRAY
42281: PUSH
42282: LD_INT 1
42284: ARRAY
42285: PPUSH
42286: LD_VAR 0 14
42290: PUSH
42291: LD_VAR 0 9
42295: ARRAY
42296: PUSH
42297: LD_INT 2
42299: ARRAY
42300: PPUSH
42301: CALL_OW 428
42305: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42306: LD_VAR 0 14
42310: PUSH
42311: LD_VAR 0 9
42315: ARRAY
42316: PUSH
42317: LD_INT 1
42319: ARRAY
42320: PPUSH
42321: LD_VAR 0 14
42325: PUSH
42326: LD_VAR 0 9
42330: ARRAY
42331: PUSH
42332: LD_INT 2
42334: ARRAY
42335: PPUSH
42336: CALL_OW 351
42340: IFTRUE 42379
42342: PUSH
42343: LD_VAR 0 14
42347: PUSH
42348: LD_VAR 0 9
42352: ARRAY
42353: PUSH
42354: LD_INT 1
42356: ARRAY
42357: PPUSH
42358: LD_VAR 0 14
42362: PUSH
42363: LD_VAR 0 9
42367: ARRAY
42368: PUSH
42369: LD_INT 2
42371: ARRAY
42372: PPUSH
42373: CALL_OW 488
42377: NOT
42378: OR
42379: IFTRUE 42396
42381: PUSH
42382: LD_VAR 0 13
42386: PPUSH
42387: CALL_OW 247
42391: PUSH
42392: LD_INT 3
42394: EQUAL
42395: OR
42396: IFFALSE 42402
// exit ;
42398: POP
42399: POP
42400: GO 42954
// if not tmp then
42402: LD_VAR 0 13
42406: NOT
42407: IFFALSE 42411
// continue ;
42409: GO 42263
// result := true ;
42411: LD_ADDR_VAR 0 8
42415: PUSH
42416: LD_INT 1
42418: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42419: LD_VAR 0 6
42423: IFFALSE 42440
42425: PUSH
42426: LD_VAR 0 13
42430: PPUSH
42431: CALL_OW 247
42435: PUSH
42436: LD_INT 2
42438: EQUAL
42439: AND
42440: IFFALSE 42457
42442: PUSH
42443: LD_VAR 0 13
42447: PPUSH
42448: CALL_OW 263
42452: PUSH
42453: LD_INT 1
42455: EQUAL
42456: AND
42457: IFFALSE 42621
// begin if IsDrivenBy ( tmp ) then
42459: LD_VAR 0 13
42463: PPUSH
42464: CALL_OW 311
42468: IFFALSE 42472
// continue ;
42470: GO 42263
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42472: LD_VAR 0 6
42476: PPUSH
42477: LD_INT 3
42479: PUSH
42480: LD_INT 60
42482: PUSH
42483: EMPTY
42484: LIST
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: LD_INT 55
42495: PUSH
42496: EMPTY
42497: LIST
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PPUSH
42507: CALL_OW 72
42511: IFFALSE 42619
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42513: LD_ADDR_VAR 0 18
42517: PUSH
42518: LD_VAR 0 6
42522: PPUSH
42523: LD_INT 3
42525: PUSH
42526: LD_INT 60
42528: PUSH
42529: EMPTY
42530: LIST
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 3
42538: PUSH
42539: LD_INT 55
42541: PUSH
42542: EMPTY
42543: LIST
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PPUSH
42553: CALL_OW 72
42557: PUSH
42558: LD_INT 1
42560: ARRAY
42561: ST_TO_ADDR
// if IsInUnit ( driver ) then
42562: LD_VAR 0 18
42566: PPUSH
42567: CALL_OW 310
42571: IFFALSE 42582
// ComExit ( driver ) ;
42573: LD_VAR 0 18
42577: PPUSH
42578: CALL 68235 0 1
// AddComEnterUnit ( driver , tmp ) ;
42582: LD_VAR 0 18
42586: PPUSH
42587: LD_VAR 0 13
42591: PPUSH
42592: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42596: LD_VAR 0 18
42600: PPUSH
42601: LD_VAR 0 7
42605: PPUSH
42606: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42610: LD_VAR 0 18
42614: PPUSH
42615: CALL_OW 181
// end ; continue ;
42619: GO 42263
// end ; if not cleaners or not tmp in cleaners then
42621: LD_VAR 0 6
42625: NOT
42626: IFTRUE 42641
42628: PUSH
42629: LD_VAR 0 13
42633: PUSH
42634: LD_VAR 0 6
42638: IN
42639: NOT
42640: OR
42641: IFFALSE 42950
// begin if dep then
42643: LD_VAR 0 17
42647: IFFALSE 42783
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42649: LD_ADDR_VAR 0 16
42653: PUSH
42654: LD_VAR 0 17
42658: PUSH
42659: LD_INT 1
42661: ARRAY
42662: PPUSH
42663: CALL_OW 250
42667: PPUSH
42668: LD_VAR 0 17
42672: PUSH
42673: LD_INT 1
42675: ARRAY
42676: PPUSH
42677: CALL_OW 254
42681: PPUSH
42682: LD_INT 5
42684: PPUSH
42685: CALL_OW 272
42689: PUSH
42690: LD_VAR 0 17
42694: PUSH
42695: LD_INT 1
42697: ARRAY
42698: PPUSH
42699: CALL_OW 251
42703: PPUSH
42704: LD_VAR 0 17
42708: PUSH
42709: LD_INT 1
42711: ARRAY
42712: PPUSH
42713: CALL_OW 254
42717: PPUSH
42718: LD_INT 5
42720: PPUSH
42721: CALL_OW 273
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42730: LD_VAR 0 16
42734: PUSH
42735: LD_INT 1
42737: ARRAY
42738: PPUSH
42739: LD_VAR 0 16
42743: PUSH
42744: LD_INT 2
42746: ARRAY
42747: PPUSH
42748: CALL_OW 488
42752: IFFALSE 42783
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42754: LD_VAR 0 13
42758: PPUSH
42759: LD_VAR 0 16
42763: PUSH
42764: LD_INT 1
42766: ARRAY
42767: PPUSH
42768: LD_VAR 0 16
42772: PUSH
42773: LD_INT 2
42775: ARRAY
42776: PPUSH
42777: CALL_OW 111
// continue ;
42781: GO 42263
// end ; end ; r := GetDir ( tmp ) ;
42783: LD_ADDR_VAR 0 15
42787: PUSH
42788: LD_VAR 0 13
42792: PPUSH
42793: CALL_OW 254
42797: ST_TO_ADDR
// if r = 5 then
42798: LD_VAR 0 15
42802: PUSH
42803: LD_INT 5
42805: EQUAL
42806: IFFALSE 42816
// r := 0 ;
42808: LD_ADDR_VAR 0 15
42812: PUSH
42813: LD_INT 0
42815: ST_TO_ADDR
// for j = r to 5 do
42816: LD_ADDR_VAR 0 10
42820: PUSH
42821: DOUBLE
42822: LD_VAR 0 15
42826: DEC
42827: ST_TO_ADDR
42828: LD_INT 5
42830: PUSH
42831: FOR_TO
42832: IFFALSE 42948
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42834: LD_ADDR_VAR 0 11
42838: PUSH
42839: LD_VAR 0 13
42843: PPUSH
42844: CALL_OW 250
42848: PPUSH
42849: LD_VAR 0 10
42853: PPUSH
42854: LD_INT 2
42856: PPUSH
42857: CALL_OW 272
42861: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42862: LD_ADDR_VAR 0 12
42866: PUSH
42867: LD_VAR 0 13
42871: PPUSH
42872: CALL_OW 251
42876: PPUSH
42877: LD_VAR 0 10
42881: PPUSH
42882: LD_INT 2
42884: PPUSH
42885: CALL_OW 273
42889: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42890: LD_VAR 0 11
42894: PPUSH
42895: LD_VAR 0 12
42899: PPUSH
42900: CALL_OW 488
42904: IFFALSE 42923
42906: PUSH
42907: LD_VAR 0 11
42911: PPUSH
42912: LD_VAR 0 12
42916: PPUSH
42917: CALL_OW 428
42921: NOT
42922: AND
42923: IFFALSE 42946
// begin ComMoveXY ( tmp , _x , _y ) ;
42925: LD_VAR 0 13
42929: PPUSH
42930: LD_VAR 0 11
42934: PPUSH
42935: LD_VAR 0 12
42939: PPUSH
42940: CALL_OW 111
// break ;
42944: GO 42948
// end ; end ;
42946: GO 42831
42948: POP
42949: POP
// end ; end ;
42950: GO 42263
42952: POP
42953: POP
// end ;
42954: LD_VAR 0 8
42958: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42959: LD_INT 0
42961: PPUSH
// result := true ;
42962: LD_ADDR_VAR 0 3
42966: PUSH
42967: LD_INT 1
42969: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42970: LD_VAR 0 2
42974: PUSH
42975: LD_INT 24
42977: DOUBLE
42978: EQUAL
42979: IFTRUE 42989
42981: LD_INT 33
42983: DOUBLE
42984: EQUAL
42985: IFTRUE 42989
42987: GO 43014
42989: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42990: LD_ADDR_VAR 0 3
42994: PUSH
42995: LD_INT 32
42997: PPUSH
42998: LD_VAR 0 1
43002: PPUSH
43003: CALL_OW 321
43007: PUSH
43008: LD_INT 2
43010: EQUAL
43011: ST_TO_ADDR
43012: GO 43330
43014: LD_INT 20
43016: DOUBLE
43017: EQUAL
43018: IFTRUE 43022
43020: GO 43047
43022: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43023: LD_ADDR_VAR 0 3
43027: PUSH
43028: LD_INT 6
43030: PPUSH
43031: LD_VAR 0 1
43035: PPUSH
43036: CALL_OW 321
43040: PUSH
43041: LD_INT 2
43043: EQUAL
43044: ST_TO_ADDR
43045: GO 43330
43047: LD_INT 22
43049: DOUBLE
43050: EQUAL
43051: IFTRUE 43061
43053: LD_INT 36
43055: DOUBLE
43056: EQUAL
43057: IFTRUE 43061
43059: GO 43086
43061: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43062: LD_ADDR_VAR 0 3
43066: PUSH
43067: LD_INT 15
43069: PPUSH
43070: LD_VAR 0 1
43074: PPUSH
43075: CALL_OW 321
43079: PUSH
43080: LD_INT 2
43082: EQUAL
43083: ST_TO_ADDR
43084: GO 43330
43086: LD_INT 30
43088: DOUBLE
43089: EQUAL
43090: IFTRUE 43094
43092: GO 43119
43094: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43095: LD_ADDR_VAR 0 3
43099: PUSH
43100: LD_INT 20
43102: PPUSH
43103: LD_VAR 0 1
43107: PPUSH
43108: CALL_OW 321
43112: PUSH
43113: LD_INT 2
43115: EQUAL
43116: ST_TO_ADDR
43117: GO 43330
43119: LD_INT 28
43121: DOUBLE
43122: EQUAL
43123: IFTRUE 43133
43125: LD_INT 21
43127: DOUBLE
43128: EQUAL
43129: IFTRUE 43133
43131: GO 43158
43133: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43134: LD_ADDR_VAR 0 3
43138: PUSH
43139: LD_INT 21
43141: PPUSH
43142: LD_VAR 0 1
43146: PPUSH
43147: CALL_OW 321
43151: PUSH
43152: LD_INT 2
43154: EQUAL
43155: ST_TO_ADDR
43156: GO 43330
43158: LD_INT 16
43160: DOUBLE
43161: EQUAL
43162: IFTRUE 43166
43164: GO 43191
43166: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43167: LD_ADDR_VAR 0 3
43171: PUSH
43172: LD_INT 84
43174: PPUSH
43175: LD_VAR 0 1
43179: PPUSH
43180: CALL_OW 321
43184: PUSH
43185: LD_INT 2
43187: EQUAL
43188: ST_TO_ADDR
43189: GO 43330
43191: LD_INT 19
43193: DOUBLE
43194: EQUAL
43195: IFTRUE 43205
43197: LD_INT 23
43199: DOUBLE
43200: EQUAL
43201: IFTRUE 43205
43203: GO 43230
43205: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43206: LD_ADDR_VAR 0 3
43210: PUSH
43211: LD_INT 83
43213: PPUSH
43214: LD_VAR 0 1
43218: PPUSH
43219: CALL_OW 321
43223: PUSH
43224: LD_INT 2
43226: EQUAL
43227: ST_TO_ADDR
43228: GO 43330
43230: LD_INT 17
43232: DOUBLE
43233: EQUAL
43234: IFTRUE 43238
43236: GO 43263
43238: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43239: LD_ADDR_VAR 0 3
43243: PUSH
43244: LD_INT 39
43246: PPUSH
43247: LD_VAR 0 1
43251: PPUSH
43252: CALL_OW 321
43256: PUSH
43257: LD_INT 2
43259: EQUAL
43260: ST_TO_ADDR
43261: GO 43330
43263: LD_INT 18
43265: DOUBLE
43266: EQUAL
43267: IFTRUE 43271
43269: GO 43296
43271: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43272: LD_ADDR_VAR 0 3
43276: PUSH
43277: LD_INT 40
43279: PPUSH
43280: LD_VAR 0 1
43284: PPUSH
43285: CALL_OW 321
43289: PUSH
43290: LD_INT 2
43292: EQUAL
43293: ST_TO_ADDR
43294: GO 43330
43296: LD_INT 27
43298: DOUBLE
43299: EQUAL
43300: IFTRUE 43304
43302: GO 43329
43304: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43305: LD_ADDR_VAR 0 3
43309: PUSH
43310: LD_INT 35
43312: PPUSH
43313: LD_VAR 0 1
43317: PPUSH
43318: CALL_OW 321
43322: PUSH
43323: LD_INT 2
43325: EQUAL
43326: ST_TO_ADDR
43327: GO 43330
43329: POP
// end ;
43330: LD_VAR 0 3
43334: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43335: LD_INT 0
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
43345: PPUSH
43346: PPUSH
43347: PPUSH
// result := false ;
43348: LD_ADDR_VAR 0 6
43352: PUSH
43353: LD_INT 0
43355: ST_TO_ADDR
// if btype = b_depot then
43356: LD_VAR 0 2
43360: PUSH
43361: LD_INT 0
43363: EQUAL
43364: IFFALSE 43376
// begin result := true ;
43366: LD_ADDR_VAR 0 6
43370: PUSH
43371: LD_INT 1
43373: ST_TO_ADDR
// exit ;
43374: GO 44230
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43376: LD_VAR 0 1
43380: NOT
43381: IFTRUE 43406
43383: PUSH
43384: LD_VAR 0 1
43388: PPUSH
43389: CALL_OW 266
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: IN
43404: NOT
43405: OR
43406: IFTRUE 43415
43408: PUSH
43409: LD_VAR 0 2
43413: NOT
43414: OR
43415: IFTRUE 43451
43417: PUSH
43418: LD_VAR 0 5
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 2
43431: PUSH
43432: LD_INT 3
43434: PUSH
43435: LD_INT 4
43437: PUSH
43438: LD_INT 5
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: IN
43449: NOT
43450: OR
43451: IFTRUE 43470
43453: PUSH
43454: LD_VAR 0 3
43458: PPUSH
43459: LD_VAR 0 4
43463: PPUSH
43464: CALL_OW 488
43468: NOT
43469: OR
43470: IFFALSE 43474
// exit ;
43472: GO 44230
// side := GetSide ( depot ) ;
43474: LD_ADDR_VAR 0 9
43478: PUSH
43479: LD_VAR 0 1
43483: PPUSH
43484: CALL_OW 255
43488: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43489: LD_VAR 0 9
43493: PPUSH
43494: LD_VAR 0 2
43498: PPUSH
43499: CALL 42959 0 2
43503: NOT
43504: IFFALSE 43508
// exit ;
43506: GO 44230
// pom := GetBase ( depot ) ;
43508: LD_ADDR_VAR 0 10
43512: PUSH
43513: LD_VAR 0 1
43517: PPUSH
43518: CALL_OW 274
43522: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43523: LD_ADDR_VAR 0 11
43527: PUSH
43528: LD_VAR 0 2
43532: PPUSH
43533: LD_VAR 0 1
43537: PPUSH
43538: CALL_OW 248
43542: PPUSH
43543: CALL_OW 450
43547: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43548: LD_VAR 0 10
43552: PPUSH
43553: LD_INT 1
43555: PPUSH
43556: CALL_OW 275
43560: PUSH
43561: LD_VAR 0 11
43565: PUSH
43566: LD_INT 1
43568: ARRAY
43569: GREATEREQUAL
43570: IFFALSE 43596
43572: PUSH
43573: LD_VAR 0 10
43577: PPUSH
43578: LD_INT 2
43580: PPUSH
43581: CALL_OW 275
43585: PUSH
43586: LD_VAR 0 11
43590: PUSH
43591: LD_INT 2
43593: ARRAY
43594: GREATEREQUAL
43595: AND
43596: IFFALSE 43622
43598: PUSH
43599: LD_VAR 0 10
43603: PPUSH
43604: LD_INT 3
43606: PPUSH
43607: CALL_OW 275
43611: PUSH
43612: LD_VAR 0 11
43616: PUSH
43617: LD_INT 3
43619: ARRAY
43620: GREATEREQUAL
43621: AND
43622: NOT
43623: IFFALSE 43627
// exit ;
43625: GO 44230
// if GetBType ( depot ) = b_depot then
43627: LD_VAR 0 1
43631: PPUSH
43632: CALL_OW 266
43636: PUSH
43637: LD_INT 0
43639: EQUAL
43640: IFFALSE 43652
// dist := 28 else
43642: LD_ADDR_VAR 0 14
43646: PUSH
43647: LD_INT 28
43649: ST_TO_ADDR
43650: GO 43660
// dist := 36 ;
43652: LD_ADDR_VAR 0 14
43656: PUSH
43657: LD_INT 36
43659: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43660: LD_VAR 0 1
43664: PPUSH
43665: LD_VAR 0 3
43669: PPUSH
43670: LD_VAR 0 4
43674: PPUSH
43675: CALL_OW 297
43679: PUSH
43680: LD_VAR 0 14
43684: GREATER
43685: IFFALSE 43689
// exit ;
43687: GO 44230
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43689: LD_ADDR_VAR 0 12
43693: PUSH
43694: LD_VAR 0 2
43698: PPUSH
43699: LD_VAR 0 3
43703: PPUSH
43704: LD_VAR 0 4
43708: PPUSH
43709: LD_VAR 0 5
43713: PPUSH
43714: LD_VAR 0 1
43718: PPUSH
43719: CALL_OW 248
43723: PPUSH
43724: LD_INT 0
43726: PPUSH
43727: CALL 44235 0 6
43731: ST_TO_ADDR
// if not hexes then
43732: LD_VAR 0 12
43736: NOT
43737: IFFALSE 43741
// exit ;
43739: GO 44230
// hex := GetHexInfo ( x , y ) ;
43741: LD_ADDR_VAR 0 15
43745: PUSH
43746: LD_VAR 0 3
43750: PPUSH
43751: LD_VAR 0 4
43755: PPUSH
43756: CALL_OW 546
43760: ST_TO_ADDR
// if hex [ 1 ] then
43761: LD_VAR 0 15
43765: PUSH
43766: LD_INT 1
43768: ARRAY
43769: IFFALSE 43773
// exit ;
43771: GO 44230
// height := hex [ 2 ] ;
43773: LD_ADDR_VAR 0 13
43777: PUSH
43778: LD_VAR 0 15
43782: PUSH
43783: LD_INT 2
43785: ARRAY
43786: ST_TO_ADDR
// for i = 1 to hexes do
43787: LD_ADDR_VAR 0 7
43791: PUSH
43792: DOUBLE
43793: LD_INT 1
43795: DEC
43796: ST_TO_ADDR
43797: LD_VAR 0 12
43801: PUSH
43802: FOR_TO
43803: IFFALSE 44147
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43805: LD_VAR 0 12
43809: PUSH
43810: LD_VAR 0 7
43814: ARRAY
43815: PUSH
43816: LD_INT 1
43818: ARRAY
43819: PPUSH
43820: LD_VAR 0 12
43824: PUSH
43825: LD_VAR 0 7
43829: ARRAY
43830: PUSH
43831: LD_INT 2
43833: ARRAY
43834: PPUSH
43835: CALL_OW 488
43839: NOT
43840: IFTRUE 43882
43842: PUSH
43843: LD_VAR 0 12
43847: PUSH
43848: LD_VAR 0 7
43852: ARRAY
43853: PUSH
43854: LD_INT 1
43856: ARRAY
43857: PPUSH
43858: LD_VAR 0 12
43862: PUSH
43863: LD_VAR 0 7
43867: ARRAY
43868: PUSH
43869: LD_INT 2
43871: ARRAY
43872: PPUSH
43873: CALL_OW 428
43877: PUSH
43878: LD_INT 0
43880: GREATER
43881: OR
43882: IFTRUE 43920
43884: PUSH
43885: LD_VAR 0 12
43889: PUSH
43890: LD_VAR 0 7
43894: ARRAY
43895: PUSH
43896: LD_INT 1
43898: ARRAY
43899: PPUSH
43900: LD_VAR 0 12
43904: PUSH
43905: LD_VAR 0 7
43909: ARRAY
43910: PUSH
43911: LD_INT 2
43913: ARRAY
43914: PPUSH
43915: CALL_OW 351
43919: OR
43920: IFFALSE 43926
// exit ;
43922: POP
43923: POP
43924: GO 44230
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43926: LD_ADDR_VAR 0 8
43930: PUSH
43931: LD_VAR 0 12
43935: PUSH
43936: LD_VAR 0 7
43940: ARRAY
43941: PUSH
43942: LD_INT 1
43944: ARRAY
43945: PPUSH
43946: LD_VAR 0 12
43950: PUSH
43951: LD_VAR 0 7
43955: ARRAY
43956: PUSH
43957: LD_INT 2
43959: ARRAY
43960: PPUSH
43961: CALL_OW 546
43965: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43966: LD_VAR 0 8
43970: PUSH
43971: LD_INT 1
43973: ARRAY
43974: IFTRUE 43996
43976: PUSH
43977: LD_VAR 0 8
43981: PUSH
43982: LD_INT 2
43984: ARRAY
43985: PUSH
43986: LD_VAR 0 13
43990: PUSH
43991: LD_INT 2
43993: PLUS
43994: GREATER
43995: OR
43996: IFTRUE 44018
43998: PUSH
43999: LD_VAR 0 8
44003: PUSH
44004: LD_INT 2
44006: ARRAY
44007: PUSH
44008: LD_VAR 0 13
44012: PUSH
44013: LD_INT 2
44015: MINUS
44016: LESS
44017: OR
44018: IFTRUE 44086
44020: PUSH
44021: LD_VAR 0 8
44025: PUSH
44026: LD_INT 3
44028: ARRAY
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 8
44035: PUSH
44036: LD_INT 9
44038: PUSH
44039: LD_INT 10
44041: PUSH
44042: LD_INT 11
44044: PUSH
44045: LD_INT 12
44047: PUSH
44048: LD_INT 13
44050: PUSH
44051: LD_INT 16
44053: PUSH
44054: LD_INT 17
44056: PUSH
44057: LD_INT 18
44059: PUSH
44060: LD_INT 19
44062: PUSH
44063: LD_INT 20
44065: PUSH
44066: LD_INT 21
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: IN
44084: NOT
44085: OR
44086: IFTRUE 44099
44088: PUSH
44089: LD_VAR 0 8
44093: PUSH
44094: LD_INT 5
44096: ARRAY
44097: NOT
44098: OR
44099: IFTRUE 44139
44101: PUSH
44102: LD_VAR 0 8
44106: PUSH
44107: LD_INT 6
44109: ARRAY
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: LD_INT 7
44119: PUSH
44120: LD_INT 9
44122: PUSH
44123: LD_INT 10
44125: PUSH
44126: LD_INT 11
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: IN
44137: NOT
44138: OR
44139: IFFALSE 44145
// exit ;
44141: POP
44142: POP
44143: GO 44230
// end ;
44145: GO 43802
44147: POP
44148: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44149: LD_VAR 0 9
44153: PPUSH
44154: LD_VAR 0 3
44158: PPUSH
44159: LD_VAR 0 4
44163: PPUSH
44164: LD_INT 20
44166: PPUSH
44167: CALL 36049 0 4
44171: PUSH
44172: LD_INT 4
44174: ARRAY
44175: IFFALSE 44179
// exit ;
44177: GO 44230
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44179: LD_VAR 0 2
44183: PUSH
44184: LD_INT 29
44186: PUSH
44187: LD_INT 30
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: IN
44194: IFFALSE 44218
44196: PUSH
44197: LD_VAR 0 3
44201: PPUSH
44202: LD_VAR 0 4
44206: PPUSH
44207: LD_VAR 0 9
44211: PPUSH
44212: CALL_OW 440
44216: NOT
44217: AND
44218: IFFALSE 44222
// exit ;
44220: GO 44230
// result := true ;
44222: LD_ADDR_VAR 0 6
44226: PUSH
44227: LD_INT 1
44229: ST_TO_ADDR
// end ;
44230: LD_VAR 0 6
44234: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44235: LD_INT 0
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
44292: PPUSH
44293: PPUSH
44294: PPUSH
// result = [ ] ;
44295: LD_ADDR_VAR 0 7
44299: PUSH
44300: EMPTY
44301: ST_TO_ADDR
// temp_list = [ ] ;
44302: LD_ADDR_VAR 0 9
44306: PUSH
44307: EMPTY
44308: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44309: LD_VAR 0 4
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: LD_INT 4
44328: PUSH
44329: LD_INT 5
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: IN
44340: NOT
44341: IFTRUE 44384
44343: PUSH
44344: LD_VAR 0 1
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: IN
44359: IFFALSE 44383
44361: PUSH
44362: LD_VAR 0 5
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 3
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: IN
44381: NOT
44382: AND
44383: OR
44384: IFFALSE 44388
// exit ;
44386: GO 62787
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44388: LD_VAR 0 1
44392: PUSH
44393: LD_INT 6
44395: PUSH
44396: LD_INT 7
44398: PUSH
44399: LD_INT 8
44401: PUSH
44402: LD_INT 13
44404: PUSH
44405: LD_INT 12
44407: PUSH
44408: LD_INT 15
44410: PUSH
44411: LD_INT 11
44413: PUSH
44414: LD_INT 14
44416: PUSH
44417: LD_INT 10
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: IN
44431: IFFALSE 44441
// btype = b_lab ;
44433: LD_ADDR_VAR 0 1
44437: PUSH
44438: LD_INT 6
44440: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44441: LD_VAR 0 6
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: LIST
44459: IN
44460: NOT
44461: IFTRUE 44529
44463: PUSH
44464: LD_VAR 0 1
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: LD_INT 6
44483: PUSH
44484: LD_INT 36
44486: PUSH
44487: LD_INT 4
44489: PUSH
44490: LD_INT 5
44492: PUSH
44493: LD_INT 31
44495: PUSH
44496: LD_INT 32
44498: PUSH
44499: LD_INT 33
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: IN
44515: NOT
44516: IFFALSE 44528
44518: PUSH
44519: LD_VAR 0 6
44523: PUSH
44524: LD_INT 1
44526: EQUAL
44527: AND
44528: OR
44529: IFTRUE 44561
44531: PUSH
44532: LD_VAR 0 1
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 3
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: IN
44547: NOT
44548: IFFALSE 44560
44550: PUSH
44551: LD_VAR 0 6
44555: PUSH
44556: LD_INT 2
44558: EQUAL
44559: AND
44560: OR
44561: IFFALSE 44571
// mode = 0 ;
44563: LD_ADDR_VAR 0 6
44567: PUSH
44568: LD_INT 0
44570: ST_TO_ADDR
// case mode of 0 :
44571: LD_VAR 0 6
44575: PUSH
44576: LD_INT 0
44578: DOUBLE
44579: EQUAL
44580: IFTRUE 44584
44582: GO 56037
44584: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44585: LD_ADDR_VAR 0 11
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44778: LD_ADDR_VAR 0 12
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 3
44935: NEG
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 3
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44974: LD_ADDR_VAR 0 13
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: LD_INT 3
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 3
45133: NEG
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 3
45145: NEG
45146: PUSH
45147: LD_INT 3
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45173: LD_ADDR_VAR 0 14
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 3
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45369: LD_ADDR_VAR 0 15
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 3
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45562: LD_ADDR_VAR 0 16
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: LD_INT 3
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 3
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45755: LD_ADDR_VAR 0 17
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45985: LD_ADDR_VAR 0 18
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46215: LD_ADDR_VAR 0 19
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46445: LD_ADDR_VAR 0 20
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46675: LD_ADDR_VAR 0 21
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46905: LD_ADDR_VAR 0 22
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47135: LD_ADDR_VAR 0 23
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 3
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47415: LD_ADDR_VAR 0 24
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 2
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 3
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47691: LD_ADDR_VAR 0 25
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 3
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 3
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 3
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 3
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47965: LD_ADDR_VAR 0 26
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: LD_INT 3
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 3
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48241: LD_ADDR_VAR 0 27
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 3
48474: NEG
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 3
48486: NEG
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48521: LD_ADDR_VAR 0 28
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 3
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 3
48756: NEG
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 3
48768: NEG
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48803: LD_ADDR_VAR 0 29
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: LD_INT 3
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 3
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: LD_INT 3
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 3
49047: NEG
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49082: LD_ADDR_VAR 0 30
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 3
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 3
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: LD_INT 3
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49360: LD_ADDR_VAR 0 31
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: LD_INT 3
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 3
49603: NEG
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49638: LD_ADDR_VAR 0 32
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: LD_INT 3
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: LD_INT 3
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49916: LD_ADDR_VAR 0 33
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 3
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 3
50160: NEG
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50195: LD_ADDR_VAR 0 34
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 3
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: LD_INT 3
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50475: LD_ADDR_VAR 0 35
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50587: LD_ADDR_VAR 0 36
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50699: LD_ADDR_VAR 0 37
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50811: LD_ADDR_VAR 0 38
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50923: LD_ADDR_VAR 0 39
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51035: LD_ADDR_VAR 0 40
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51147: LD_ADDR_VAR 0 41
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 3
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: LD_INT 3
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 3
51432: NEG
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: LD_INT 2
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: LD_INT 3
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51497: LD_ADDR_VAR 0 42
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 3
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 3
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 3
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51847: LD_ADDR_VAR 0 43
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 3
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 3
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 3
52154: NEG
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52195: LD_ADDR_VAR 0 44
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: NEG
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: LD_INT 3
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52545: LD_ADDR_VAR 0 45
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 2
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 3
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 3
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 3
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: LD_INT 3
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 3
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 3
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 3
52854: NEG
52855: PUSH
52856: LD_INT 3
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52895: LD_ADDR_VAR 0 46
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 3
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 3
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 3
53191: NEG
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: NEG
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53243: LD_ADDR_VAR 0 47
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53394: LD_ADDR_VAR 0 48
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53541: LD_ADDR_VAR 0 49
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53685: LD_ADDR_VAR 0 50
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 2
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53829: LD_ADDR_VAR 0 51
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53976: LD_ADDR_VAR 0 52
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54127: LD_ADDR_VAR 0 53
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54357: LD_ADDR_VAR 0 54
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54587: LD_ADDR_VAR 0 55
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54817: LD_ADDR_VAR 0 56
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55047: LD_ADDR_VAR 0 57
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55277: LD_ADDR_VAR 0 58
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55507: LD_ADDR_VAR 0 59
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55595: LD_ADDR_VAR 0 60
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55683: LD_ADDR_VAR 0 61
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55771: LD_ADDR_VAR 0 62
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55859: LD_ADDR_VAR 0 63
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55947: LD_ADDR_VAR 0 64
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: ST_TO_ADDR
// end ; 1 :
56035: GO 61932
56037: LD_INT 1
56039: DOUBLE
56040: EQUAL
56041: IFTRUE 56045
56043: GO 58668
56045: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56046: LD_ADDR_VAR 0 11
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56090: LD_ADDR_VAR 0 12
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 3
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 3
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56131: LD_ADDR_VAR 0 13
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 3
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: LIST
56170: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56171: LD_ADDR_VAR 0 14
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 3
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56212: LD_ADDR_VAR 0 15
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 3
56241: NEG
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56256: LD_ADDR_VAR 0 16
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 3
56275: NEG
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56302: LD_ADDR_VAR 0 17
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: LD_INT 3
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: LIST
56345: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56346: LD_ADDR_VAR 0 18
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 3
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56387: LD_ADDR_VAR 0 19
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56427: LD_ADDR_VAR 0 20
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 3
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56468: LD_ADDR_VAR 0 21
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56512: LD_ADDR_VAR 0 22
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: NEG
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56558: LD_ADDR_VAR 0 23
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 3
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 4
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56602: LD_ADDR_VAR 0 24
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 4
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56643: LD_ADDR_VAR 0 25
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 4
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: PUSH
56671: LD_INT 4
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56683: LD_ADDR_VAR 0 26
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 4
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: LIST
56723: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56724: LD_ADDR_VAR 0 27
56728: PUSH
56729: LD_INT 3
56731: NEG
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 4
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56768: LD_ADDR_VAR 0 28
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: LD_INT 3
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: LD_INT 4
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 4
56799: NEG
56800: PUSH
56801: LD_INT 3
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56814: LD_ADDR_VAR 0 29
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 3
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 3
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 4
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 4
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 3
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 5
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 5
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: LD_INT 4
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 6
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 6
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 5
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56969: LD_ADDR_VAR 0 30
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 4
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 4
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 4
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 5
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 5
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 5
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 6
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 6
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57112: LD_ADDR_VAR 0 31
57116: PUSH
57117: LD_INT 3
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: LD_INT 3
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: LD_INT 3
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 4
57149: PUSH
57150: LD_INT 3
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 4
57159: PUSH
57160: LD_INT 4
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: LD_INT 4
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 5
57179: PUSH
57180: LD_INT 4
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 5
57189: PUSH
57190: LD_INT 5
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 4
57199: PUSH
57200: LD_INT 5
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 6
57209: PUSH
57210: LD_INT 5
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 6
57219: PUSH
57220: LD_INT 6
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 5
57229: PUSH
57230: LD_INT 6
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57251: LD_ADDR_VAR 0 32
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 3
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 3
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 4
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 4
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 5
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 5
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 4
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 6
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 6
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 5
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57394: LD_ADDR_VAR 0 33
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 4
57446: NEG
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 4
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 4
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 5
57480: NEG
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 5
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 5
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 6
57514: NEG
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 6
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57549: LD_ADDR_VAR 0 34
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: LD_INT 3
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 3
57568: NEG
57569: PUSH
57570: LD_INT 2
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: LD_INT 3
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 3
57592: NEG
57593: PUSH
57594: LD_INT 4
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 4
57604: NEG
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: LD_INT 4
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 4
57628: NEG
57629: PUSH
57630: LD_INT 5
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 5
57640: NEG
57641: PUSH
57642: LD_INT 4
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 5
57652: NEG
57653: PUSH
57654: LD_INT 5
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 5
57664: NEG
57665: PUSH
57666: LD_INT 6
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 6
57676: NEG
57677: PUSH
57678: LD_INT 5
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 6
57688: NEG
57689: PUSH
57690: LD_INT 6
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57712: LD_ADDR_VAR 0 41
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57756: LD_ADDR_VAR 0 42
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: LIST
57796: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57797: LD_ADDR_VAR 0 43
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: LIST
57836: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57837: LD_ADDR_VAR 0 44
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57878: LD_ADDR_VAR 0 45
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57922: LD_ADDR_VAR 0 46
57926: PUSH
57927: LD_INT 2
57929: NEG
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: LD_INT 3
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57968: LD_ADDR_VAR 0 47
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: LD_INT 3
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58001: LD_ADDR_VAR 0 48
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58032: LD_ADDR_VAR 0 49
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58061: LD_ADDR_VAR 0 50
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 3
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: LD_INT 3
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58090: LD_ADDR_VAR 0 51
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58121: LD_ADDR_VAR 0 52
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58154: LD_ADDR_VAR 0 53
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 3
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58198: LD_ADDR_VAR 0 54
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58239: LD_ADDR_VAR 0 55
58243: PUSH
58244: LD_INT 3
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 3
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: LD_INT 3
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58279: LD_ADDR_VAR 0 56
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: LD_INT 3
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58320: LD_ADDR_VAR 0 57
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 3
58349: NEG
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58364: LD_ADDR_VAR 0 58
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 3
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58410: LD_ADDR_VAR 0 59
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58454: LD_ADDR_VAR 0 60
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: LIST
58494: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58495: LD_ADDR_VAR 0 61
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: LIST
58534: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58535: LD_ADDR_VAR 0 62
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 2
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58576: LD_ADDR_VAR 0 63
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58620: LD_ADDR_VAR 0 64
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: ST_TO_ADDR
// end ; 2 :
58666: GO 61932
58668: LD_INT 2
58670: DOUBLE
58671: EQUAL
58672: IFTRUE 58676
58674: GO 61931
58676: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58677: LD_ADDR_VAR 0 29
58681: PUSH
58682: LD_INT 4
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 4
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 5
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 5
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 4
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 3
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 3
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 5
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 4
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 4
58807: PUSH
58808: LD_INT 4
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: LD_INT 4
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 4
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: LD_INT 4
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 4
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: LD_INT 4
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 5
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 5
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 4
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 5
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: NEG
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 3
59005: NEG
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 4
59016: NEG
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 4
59027: NEG
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 4
59039: NEG
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 4
59062: NEG
59063: PUSH
59064: LD_INT 4
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 4
59074: NEG
59075: PUSH
59076: LD_INT 5
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: LD_INT 4
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 3
59098: NEG
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 4
59110: NEG
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 5
59122: NEG
59123: PUSH
59124: LD_INT 4
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 5
59134: NEG
59135: PUSH
59136: LD_INT 5
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: LD_INT 5
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 5
59158: NEG
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59215: LD_ADDR_VAR 0 30
59219: PUSH
59220: LD_INT 4
59222: PUSH
59223: LD_INT 4
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 4
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 5
59242: PUSH
59243: LD_INT 4
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 5
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 4
59262: PUSH
59263: LD_INT 5
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: LD_INT 4
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 5
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 3
59302: PUSH
59303: LD_INT 5
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 4
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 4
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: LD_INT 4
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: LD_INT 2
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 4
59405: NEG
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 4
59450: NEG
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 5
59461: NEG
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 5
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: NEG
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: LD_INT 3
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: LD_INT 4
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: LD_INT 2
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 4
59567: NEG
59568: PUSH
59569: LD_INT 3
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 4
59579: NEG
59580: PUSH
59581: LD_INT 4
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: LD_INT 4
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 4
59603: NEG
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 4
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 5
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: LD_INT 4
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 4
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 5
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 5
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59762: LD_ADDR_VAR 0 31
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: LD_INT 4
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 4
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 5
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 5
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: LD_INT 4
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 5
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: NEG
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 2
59896: NEG
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 4
59918: NEG
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 4
59929: NEG
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 4
59964: NEG
59965: PUSH
59966: LD_INT 4
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 4
59976: NEG
59977: PUSH
59978: LD_INT 5
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 3
59988: NEG
59989: PUSH
59990: LD_INT 4
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 3
60000: NEG
60001: PUSH
60002: LD_INT 3
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 4
60012: NEG
60013: PUSH
60014: LD_INT 3
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 5
60024: NEG
60025: PUSH
60026: LD_INT 4
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 5
60036: NEG
60037: PUSH
60038: LD_INT 5
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: NEG
60049: PUSH
60050: LD_INT 5
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 5
60060: NEG
60061: PUSH
60062: LD_INT 3
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 3
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 4
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: LD_INT 3
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 2
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 3
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 4
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: LD_INT 4
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 4
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 4
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 5
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 5
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 4
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 5
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60312: LD_ADDR_VAR 0 32
60316: PUSH
60317: LD_INT 4
60319: NEG
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 4
60330: NEG
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 3
60353: NEG
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 4
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 5
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 5
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: LD_INT 3
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: LD_INT 4
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 2
60445: NEG
60446: PUSH
60447: LD_INT 3
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: NEG
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 4
60481: NEG
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 4
60493: NEG
60494: PUSH
60495: LD_INT 4
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: LD_INT 4
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 4
60517: NEG
60518: PUSH
60519: LD_INT 2
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 4
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: LD_INT 5
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: LD_INT 4
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 3
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 3
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 4
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: LD_INT 5
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: LD_INT 3
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: LD_INT 5
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 3
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 4
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 4
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 3
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: LD_INT 2
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 4
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 4
60724: PUSH
60725: LD_INT 4
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 4
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 5
60744: PUSH
60745: LD_INT 4
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 5
60754: PUSH
60755: LD_INT 5
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 4
60764: PUSH
60765: LD_INT 5
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 3
60774: PUSH
60775: LD_INT 4
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 3
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 5
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 3
60804: PUSH
60805: LD_INT 5
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60859: LD_ADDR_VAR 0 33
60863: PUSH
60864: LD_INT 4
60866: NEG
60867: PUSH
60868: LD_INT 4
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: LD_INT 5
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: LD_INT 4
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 4
60914: NEG
60915: PUSH
60916: LD_INT 3
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 5
60926: NEG
60927: PUSH
60928: LD_INT 4
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 5
60938: NEG
60939: PUSH
60940: LD_INT 5
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 3
60950: NEG
60951: PUSH
60952: LD_INT 5
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 5
60962: NEG
60963: PUSH
60964: LD_INT 3
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 4
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 3
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 2
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 4
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: LD_INT 2
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: LD_INT 4
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 4
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 4
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 5
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 5
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 4
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 3
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 5
61159: PUSH
61160: LD_INT 2
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 3
61169: PUSH
61170: LD_INT 3
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 3
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 4
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 4
61199: PUSH
61200: LD_INT 4
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: PUSH
61210: LD_INT 4
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 2
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 4
61239: PUSH
61240: LD_INT 2
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 2
61249: PUSH
61250: LD_INT 4
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: LD_INT 5
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: LD_INT 5
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: LD_INT 4
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: LD_INT 3
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 2
61331: PUSH
61332: LD_INT 5
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: LD_INT 3
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61397: LD_ADDR_VAR 0 34
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 4
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 5
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: LD_INT 4
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: LD_INT 4
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 5
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 2
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: LD_INT 5
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 3
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 4
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 4
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 3
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 4
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 4
61599: PUSH
61600: LD_INT 4
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 4
61609: PUSH
61610: LD_INT 3
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 5
61619: PUSH
61620: LD_INT 4
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 5
61629: PUSH
61630: LD_INT 5
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 4
61639: PUSH
61640: LD_INT 5
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 3
61649: PUSH
61650: LD_INT 4
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 3
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 5
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 3
61679: PUSH
61680: LD_INT 5
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 2
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: LD_INT 3
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: LD_INT 4
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 4
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: LD_INT 4
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 2
61771: NEG
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 4
61782: NEG
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 4
61793: NEG
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 4
61827: NEG
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 5
61838: NEG
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 5
61849: NEG
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 5
61861: NEG
61862: PUSH
61863: LD_INT 2
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: ST_TO_ADDR
// end ; end ;
61929: GO 61932
61931: POP
// case btype of b_depot , b_warehouse :
61932: LD_VAR 0 1
61936: PUSH
61937: LD_INT 0
61939: DOUBLE
61940: EQUAL
61941: IFTRUE 61951
61943: LD_INT 1
61945: DOUBLE
61946: EQUAL
61947: IFTRUE 61951
61949: GO 62152
61951: POP
// case nation of nation_american :
61952: LD_VAR 0 5
61956: PUSH
61957: LD_INT 1
61959: DOUBLE
61960: EQUAL
61961: IFTRUE 61965
61963: GO 62021
61965: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61966: LD_ADDR_VAR 0 9
61970: PUSH
61971: LD_VAR 0 11
61975: PUSH
61976: LD_VAR 0 12
61980: PUSH
61981: LD_VAR 0 13
61985: PUSH
61986: LD_VAR 0 14
61990: PUSH
61991: LD_VAR 0 15
61995: PUSH
61996: LD_VAR 0 16
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: PUSH
62009: LD_VAR 0 4
62013: PUSH
62014: LD_INT 1
62016: PLUS
62017: ARRAY
62018: ST_TO_ADDR
62019: GO 62150
62021: LD_INT 2
62023: DOUBLE
62024: EQUAL
62025: IFTRUE 62029
62027: GO 62085
62029: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62030: LD_ADDR_VAR 0 9
62034: PUSH
62035: LD_VAR 0 17
62039: PUSH
62040: LD_VAR 0 18
62044: PUSH
62045: LD_VAR 0 19
62049: PUSH
62050: LD_VAR 0 20
62054: PUSH
62055: LD_VAR 0 21
62059: PUSH
62060: LD_VAR 0 22
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: PUSH
62073: LD_VAR 0 4
62077: PUSH
62078: LD_INT 1
62080: PLUS
62081: ARRAY
62082: ST_TO_ADDR
62083: GO 62150
62085: LD_INT 3
62087: DOUBLE
62088: EQUAL
62089: IFTRUE 62093
62091: GO 62149
62093: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62094: LD_ADDR_VAR 0 9
62098: PUSH
62099: LD_VAR 0 23
62103: PUSH
62104: LD_VAR 0 24
62108: PUSH
62109: LD_VAR 0 25
62113: PUSH
62114: LD_VAR 0 26
62118: PUSH
62119: LD_VAR 0 27
62123: PUSH
62124: LD_VAR 0 28
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: PUSH
62137: LD_VAR 0 4
62141: PUSH
62142: LD_INT 1
62144: PLUS
62145: ARRAY
62146: ST_TO_ADDR
62147: GO 62150
62149: POP
62150: GO 62705
62152: LD_INT 2
62154: DOUBLE
62155: EQUAL
62156: IFTRUE 62166
62158: LD_INT 3
62160: DOUBLE
62161: EQUAL
62162: IFTRUE 62166
62164: GO 62222
62166: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62167: LD_ADDR_VAR 0 9
62171: PUSH
62172: LD_VAR 0 29
62176: PUSH
62177: LD_VAR 0 30
62181: PUSH
62182: LD_VAR 0 31
62186: PUSH
62187: LD_VAR 0 32
62191: PUSH
62192: LD_VAR 0 33
62196: PUSH
62197: LD_VAR 0 34
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: PUSH
62210: LD_VAR 0 4
62214: PUSH
62215: LD_INT 1
62217: PLUS
62218: ARRAY
62219: ST_TO_ADDR
62220: GO 62705
62222: LD_INT 16
62224: DOUBLE
62225: EQUAL
62226: IFTRUE 62284
62228: LD_INT 17
62230: DOUBLE
62231: EQUAL
62232: IFTRUE 62284
62234: LD_INT 18
62236: DOUBLE
62237: EQUAL
62238: IFTRUE 62284
62240: LD_INT 19
62242: DOUBLE
62243: EQUAL
62244: IFTRUE 62284
62246: LD_INT 22
62248: DOUBLE
62249: EQUAL
62250: IFTRUE 62284
62252: LD_INT 20
62254: DOUBLE
62255: EQUAL
62256: IFTRUE 62284
62258: LD_INT 21
62260: DOUBLE
62261: EQUAL
62262: IFTRUE 62284
62264: LD_INT 23
62266: DOUBLE
62267: EQUAL
62268: IFTRUE 62284
62270: LD_INT 24
62272: DOUBLE
62273: EQUAL
62274: IFTRUE 62284
62276: LD_INT 25
62278: DOUBLE
62279: EQUAL
62280: IFTRUE 62284
62282: GO 62340
62284: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62285: LD_ADDR_VAR 0 9
62289: PUSH
62290: LD_VAR 0 35
62294: PUSH
62295: LD_VAR 0 36
62299: PUSH
62300: LD_VAR 0 37
62304: PUSH
62305: LD_VAR 0 38
62309: PUSH
62310: LD_VAR 0 39
62314: PUSH
62315: LD_VAR 0 40
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: PUSH
62328: LD_VAR 0 4
62332: PUSH
62333: LD_INT 1
62335: PLUS
62336: ARRAY
62337: ST_TO_ADDR
62338: GO 62705
62340: LD_INT 6
62342: DOUBLE
62343: EQUAL
62344: IFTRUE 62396
62346: LD_INT 7
62348: DOUBLE
62349: EQUAL
62350: IFTRUE 62396
62352: LD_INT 8
62354: DOUBLE
62355: EQUAL
62356: IFTRUE 62396
62358: LD_INT 13
62360: DOUBLE
62361: EQUAL
62362: IFTRUE 62396
62364: LD_INT 12
62366: DOUBLE
62367: EQUAL
62368: IFTRUE 62396
62370: LD_INT 15
62372: DOUBLE
62373: EQUAL
62374: IFTRUE 62396
62376: LD_INT 11
62378: DOUBLE
62379: EQUAL
62380: IFTRUE 62396
62382: LD_INT 14
62384: DOUBLE
62385: EQUAL
62386: IFTRUE 62396
62388: LD_INT 10
62390: DOUBLE
62391: EQUAL
62392: IFTRUE 62396
62394: GO 62452
62396: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62397: LD_ADDR_VAR 0 9
62401: PUSH
62402: LD_VAR 0 41
62406: PUSH
62407: LD_VAR 0 42
62411: PUSH
62412: LD_VAR 0 43
62416: PUSH
62417: LD_VAR 0 44
62421: PUSH
62422: LD_VAR 0 45
62426: PUSH
62427: LD_VAR 0 46
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: PUSH
62440: LD_VAR 0 4
62444: PUSH
62445: LD_INT 1
62447: PLUS
62448: ARRAY
62449: ST_TO_ADDR
62450: GO 62705
62452: LD_INT 36
62454: DOUBLE
62455: EQUAL
62456: IFTRUE 62460
62458: GO 62516
62460: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62461: LD_ADDR_VAR 0 9
62465: PUSH
62466: LD_VAR 0 47
62470: PUSH
62471: LD_VAR 0 48
62475: PUSH
62476: LD_VAR 0 49
62480: PUSH
62481: LD_VAR 0 50
62485: PUSH
62486: LD_VAR 0 51
62490: PUSH
62491: LD_VAR 0 52
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: PUSH
62504: LD_VAR 0 4
62508: PUSH
62509: LD_INT 1
62511: PLUS
62512: ARRAY
62513: ST_TO_ADDR
62514: GO 62705
62516: LD_INT 4
62518: DOUBLE
62519: EQUAL
62520: IFTRUE 62542
62522: LD_INT 5
62524: DOUBLE
62525: EQUAL
62526: IFTRUE 62542
62528: LD_INT 34
62530: DOUBLE
62531: EQUAL
62532: IFTRUE 62542
62534: LD_INT 37
62536: DOUBLE
62537: EQUAL
62538: IFTRUE 62542
62540: GO 62598
62542: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62543: LD_ADDR_VAR 0 9
62547: PUSH
62548: LD_VAR 0 53
62552: PUSH
62553: LD_VAR 0 54
62557: PUSH
62558: LD_VAR 0 55
62562: PUSH
62563: LD_VAR 0 56
62567: PUSH
62568: LD_VAR 0 57
62572: PUSH
62573: LD_VAR 0 58
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: PUSH
62586: LD_VAR 0 4
62590: PUSH
62591: LD_INT 1
62593: PLUS
62594: ARRAY
62595: ST_TO_ADDR
62596: GO 62705
62598: LD_INT 31
62600: DOUBLE
62601: EQUAL
62602: IFTRUE 62648
62604: LD_INT 32
62606: DOUBLE
62607: EQUAL
62608: IFTRUE 62648
62610: LD_INT 33
62612: DOUBLE
62613: EQUAL
62614: IFTRUE 62648
62616: LD_INT 27
62618: DOUBLE
62619: EQUAL
62620: IFTRUE 62648
62622: LD_INT 26
62624: DOUBLE
62625: EQUAL
62626: IFTRUE 62648
62628: LD_INT 28
62630: DOUBLE
62631: EQUAL
62632: IFTRUE 62648
62634: LD_INT 29
62636: DOUBLE
62637: EQUAL
62638: IFTRUE 62648
62640: LD_INT 30
62642: DOUBLE
62643: EQUAL
62644: IFTRUE 62648
62646: GO 62704
62648: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62649: LD_ADDR_VAR 0 9
62653: PUSH
62654: LD_VAR 0 59
62658: PUSH
62659: LD_VAR 0 60
62663: PUSH
62664: LD_VAR 0 61
62668: PUSH
62669: LD_VAR 0 62
62673: PUSH
62674: LD_VAR 0 63
62678: PUSH
62679: LD_VAR 0 64
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: PUSH
62692: LD_VAR 0 4
62696: PUSH
62697: LD_INT 1
62699: PLUS
62700: ARRAY
62701: ST_TO_ADDR
62702: GO 62705
62704: POP
// temp_list2 = [ ] ;
62705: LD_ADDR_VAR 0 10
62709: PUSH
62710: EMPTY
62711: ST_TO_ADDR
// for i in temp_list do
62712: LD_ADDR_VAR 0 8
62716: PUSH
62717: LD_VAR 0 9
62721: PUSH
62722: FOR_IN
62723: IFFALSE 62775
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62725: LD_ADDR_VAR 0 10
62729: PUSH
62730: LD_VAR 0 10
62734: PUSH
62735: LD_VAR 0 8
62739: PUSH
62740: LD_INT 1
62742: ARRAY
62743: PUSH
62744: LD_VAR 0 2
62748: PLUS
62749: PUSH
62750: LD_VAR 0 8
62754: PUSH
62755: LD_INT 2
62757: ARRAY
62758: PUSH
62759: LD_VAR 0 3
62763: PLUS
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: EMPTY
62770: LIST
62771: ADD
62772: ST_TO_ADDR
62773: GO 62722
62775: POP
62776: POP
// result = temp_list2 ;
62777: LD_ADDR_VAR 0 7
62781: PUSH
62782: LD_VAR 0 10
62786: ST_TO_ADDR
// end ;
62787: LD_VAR 0 7
62791: RET
// export function EnemyInRange ( unit , dist ) ; begin
62792: LD_INT 0
62794: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62795: LD_ADDR_VAR 0 3
62799: PUSH
62800: LD_VAR 0 1
62804: PPUSH
62805: CALL_OW 255
62809: PPUSH
62810: LD_VAR 0 1
62814: PPUSH
62815: CALL_OW 250
62819: PPUSH
62820: LD_VAR 0 1
62824: PPUSH
62825: CALL_OW 251
62829: PPUSH
62830: LD_VAR 0 2
62834: PPUSH
62835: CALL 36049 0 4
62839: PUSH
62840: LD_INT 4
62842: ARRAY
62843: ST_TO_ADDR
// end ;
62844: LD_VAR 0 3
62848: RET
// export function PlayerSeeMe ( unit ) ; begin
62849: LD_INT 0
62851: PPUSH
// result := See ( your_side , unit ) ;
62852: LD_ADDR_VAR 0 2
62856: PUSH
62857: LD_OWVAR 2
62861: PPUSH
62862: LD_VAR 0 1
62866: PPUSH
62867: CALL_OW 292
62871: ST_TO_ADDR
// end ;
62872: LD_VAR 0 2
62876: RET
// export function ReverseDir ( unit ) ; begin
62877: LD_INT 0
62879: PPUSH
// if not unit then
62880: LD_VAR 0 1
62884: NOT
62885: IFFALSE 62889
// exit ;
62887: GO 62912
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62889: LD_ADDR_VAR 0 2
62893: PUSH
62894: LD_VAR 0 1
62898: PPUSH
62899: CALL_OW 254
62903: PUSH
62904: LD_INT 3
62906: PLUS
62907: PUSH
62908: LD_INT 6
62910: MOD
62911: ST_TO_ADDR
// end ;
62912: LD_VAR 0 2
62916: RET
// export function ReverseArray ( array ) ; var i ; begin
62917: LD_INT 0
62919: PPUSH
62920: PPUSH
// if not array then
62921: LD_VAR 0 1
62925: NOT
62926: IFFALSE 62930
// exit ;
62928: GO 62985
// result := [ ] ;
62930: LD_ADDR_VAR 0 2
62934: PUSH
62935: EMPTY
62936: ST_TO_ADDR
// for i := array downto 1 do
62937: LD_ADDR_VAR 0 3
62941: PUSH
62942: DOUBLE
62943: LD_VAR 0 1
62947: INC
62948: ST_TO_ADDR
62949: LD_INT 1
62951: PUSH
62952: FOR_DOWNTO
62953: IFFALSE 62983
// result := Join ( result , array [ i ] ) ;
62955: LD_ADDR_VAR 0 2
62959: PUSH
62960: LD_VAR 0 2
62964: PPUSH
62965: LD_VAR 0 1
62969: PUSH
62970: LD_VAR 0 3
62974: ARRAY
62975: PPUSH
62976: CALL 67837 0 2
62980: ST_TO_ADDR
62981: GO 62952
62983: POP
62984: POP
// end ;
62985: LD_VAR 0 2
62989: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62990: LD_INT 0
62992: PPUSH
62993: PPUSH
62994: PPUSH
62995: PPUSH
62996: PPUSH
62997: PPUSH
// if not unit or not hexes then
62998: LD_VAR 0 1
63002: NOT
63003: IFTRUE 63012
63005: PUSH
63006: LD_VAR 0 2
63010: NOT
63011: OR
63012: IFFALSE 63016
// exit ;
63014: GO 63139
// dist := 9999 ;
63016: LD_ADDR_VAR 0 5
63020: PUSH
63021: LD_INT 9999
63023: ST_TO_ADDR
// for i = 1 to hexes do
63024: LD_ADDR_VAR 0 4
63028: PUSH
63029: DOUBLE
63030: LD_INT 1
63032: DEC
63033: ST_TO_ADDR
63034: LD_VAR 0 2
63038: PUSH
63039: FOR_TO
63040: IFFALSE 63127
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63042: LD_ADDR_VAR 0 6
63046: PUSH
63047: LD_VAR 0 1
63051: PPUSH
63052: LD_VAR 0 2
63056: PUSH
63057: LD_VAR 0 4
63061: ARRAY
63062: PUSH
63063: LD_INT 1
63065: ARRAY
63066: PPUSH
63067: LD_VAR 0 2
63071: PUSH
63072: LD_VAR 0 4
63076: ARRAY
63077: PUSH
63078: LD_INT 2
63080: ARRAY
63081: PPUSH
63082: CALL_OW 297
63086: ST_TO_ADDR
// if tdist < dist then
63087: LD_VAR 0 6
63091: PUSH
63092: LD_VAR 0 5
63096: LESS
63097: IFFALSE 63125
// begin hex := hexes [ i ] ;
63099: LD_ADDR_VAR 0 8
63103: PUSH
63104: LD_VAR 0 2
63108: PUSH
63109: LD_VAR 0 4
63113: ARRAY
63114: ST_TO_ADDR
// dist := tdist ;
63115: LD_ADDR_VAR 0 5
63119: PUSH
63120: LD_VAR 0 6
63124: ST_TO_ADDR
// end ; end ;
63125: GO 63039
63127: POP
63128: POP
// result := hex ;
63129: LD_ADDR_VAR 0 3
63133: PUSH
63134: LD_VAR 0 8
63138: ST_TO_ADDR
// end ;
63139: LD_VAR 0 3
63143: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63144: LD_INT 0
63146: PPUSH
63147: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63148: LD_VAR 0 1
63152: NOT
63153: IFTRUE 63192
63155: PUSH
63156: LD_VAR 0 1
63160: PUSH
63161: LD_INT 21
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 23
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PPUSH
63185: CALL_OW 69
63189: IN
63190: NOT
63191: OR
63192: IFFALSE 63196
// exit ;
63194: GO 63243
// for i = 1 to 3 do
63196: LD_ADDR_VAR 0 3
63200: PUSH
63201: DOUBLE
63202: LD_INT 1
63204: DEC
63205: ST_TO_ADDR
63206: LD_INT 3
63208: PUSH
63209: FOR_TO
63210: IFFALSE 63241
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63212: LD_VAR 0 1
63216: PPUSH
63217: CALL_OW 250
63221: PPUSH
63222: LD_VAR 0 1
63226: PPUSH
63227: CALL_OW 251
63231: PPUSH
63232: LD_INT 1
63234: PPUSH
63235: CALL_OW 453
63239: GO 63209
63241: POP
63242: POP
// end ;
63243: LD_VAR 0 2
63247: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63248: LD_INT 0
63250: PPUSH
63251: PPUSH
63252: PPUSH
63253: PPUSH
63254: PPUSH
63255: PPUSH
// if not unit or not enemy_unit then
63256: LD_VAR 0 1
63260: NOT
63261: IFTRUE 63270
63263: PUSH
63264: LD_VAR 0 2
63268: NOT
63269: OR
63270: IFFALSE 63274
// exit ;
63272: GO 63755
// if GetLives ( i ) < 250 then
63274: LD_VAR 0 4
63278: PPUSH
63279: CALL_OW 256
63283: PUSH
63284: LD_INT 250
63286: LESS
63287: IFFALSE 63300
// begin ComAutodestruct ( i ) ;
63289: LD_VAR 0 4
63293: PPUSH
63294: CALL 63144 0 1
// exit ;
63298: GO 63755
// end ; x := GetX ( enemy_unit ) ;
63300: LD_ADDR_VAR 0 7
63304: PUSH
63305: LD_VAR 0 2
63309: PPUSH
63310: CALL_OW 250
63314: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63315: LD_ADDR_VAR 0 8
63319: PUSH
63320: LD_VAR 0 2
63324: PPUSH
63325: CALL_OW 251
63329: ST_TO_ADDR
// if not x or not y then
63330: LD_VAR 0 7
63334: NOT
63335: IFTRUE 63344
63337: PUSH
63338: LD_VAR 0 8
63342: NOT
63343: OR
63344: IFFALSE 63348
// exit ;
63346: GO 63755
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63348: LD_ADDR_VAR 0 6
63352: PUSH
63353: LD_VAR 0 7
63357: PPUSH
63358: LD_INT 0
63360: PPUSH
63361: LD_INT 4
63363: PPUSH
63364: CALL_OW 272
63368: PUSH
63369: LD_VAR 0 8
63373: PPUSH
63374: LD_INT 0
63376: PPUSH
63377: LD_INT 4
63379: PPUSH
63380: CALL_OW 273
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_VAR 0 7
63393: PPUSH
63394: LD_INT 1
63396: PPUSH
63397: LD_INT 4
63399: PPUSH
63400: CALL_OW 272
63404: PUSH
63405: LD_VAR 0 8
63409: PPUSH
63410: LD_INT 1
63412: PPUSH
63413: LD_INT 4
63415: PPUSH
63416: CALL_OW 273
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_VAR 0 7
63429: PPUSH
63430: LD_INT 2
63432: PPUSH
63433: LD_INT 4
63435: PPUSH
63436: CALL_OW 272
63440: PUSH
63441: LD_VAR 0 8
63445: PPUSH
63446: LD_INT 2
63448: PPUSH
63449: LD_INT 4
63451: PPUSH
63452: CALL_OW 273
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_VAR 0 7
63465: PPUSH
63466: LD_INT 3
63468: PPUSH
63469: LD_INT 4
63471: PPUSH
63472: CALL_OW 272
63476: PUSH
63477: LD_VAR 0 8
63481: PPUSH
63482: LD_INT 3
63484: PPUSH
63485: LD_INT 4
63487: PPUSH
63488: CALL_OW 273
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_VAR 0 7
63501: PPUSH
63502: LD_INT 4
63504: PPUSH
63505: LD_INT 4
63507: PPUSH
63508: CALL_OW 272
63512: PUSH
63513: LD_VAR 0 8
63517: PPUSH
63518: LD_INT 4
63520: PPUSH
63521: LD_INT 4
63523: PPUSH
63524: CALL_OW 273
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_VAR 0 7
63537: PPUSH
63538: LD_INT 5
63540: PPUSH
63541: LD_INT 4
63543: PPUSH
63544: CALL_OW 272
63548: PUSH
63549: LD_VAR 0 8
63553: PPUSH
63554: LD_INT 5
63556: PPUSH
63557: LD_INT 4
63559: PPUSH
63560: CALL_OW 273
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: ST_TO_ADDR
// for i = tmp downto 1 do
63577: LD_ADDR_VAR 0 4
63581: PUSH
63582: DOUBLE
63583: LD_VAR 0 6
63587: INC
63588: ST_TO_ADDR
63589: LD_INT 1
63591: PUSH
63592: FOR_DOWNTO
63593: IFFALSE 63696
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63595: LD_VAR 0 6
63599: PUSH
63600: LD_VAR 0 4
63604: ARRAY
63605: PUSH
63606: LD_INT 1
63608: ARRAY
63609: PPUSH
63610: LD_VAR 0 6
63614: PUSH
63615: LD_VAR 0 4
63619: ARRAY
63620: PUSH
63621: LD_INT 2
63623: ARRAY
63624: PPUSH
63625: CALL_OW 488
63629: NOT
63630: IFTRUE 63672
63632: PUSH
63633: LD_VAR 0 6
63637: PUSH
63638: LD_VAR 0 4
63642: ARRAY
63643: PUSH
63644: LD_INT 1
63646: ARRAY
63647: PPUSH
63648: LD_VAR 0 6
63652: PUSH
63653: LD_VAR 0 4
63657: ARRAY
63658: PUSH
63659: LD_INT 2
63661: ARRAY
63662: PPUSH
63663: CALL_OW 428
63667: PUSH
63668: LD_INT 0
63670: NONEQUAL
63671: OR
63672: IFFALSE 63694
// tmp := Delete ( tmp , i ) ;
63674: LD_ADDR_VAR 0 6
63678: PUSH
63679: LD_VAR 0 6
63683: PPUSH
63684: LD_VAR 0 4
63688: PPUSH
63689: CALL_OW 3
63693: ST_TO_ADDR
63694: GO 63592
63696: POP
63697: POP
// j := GetClosestHex ( unit , tmp ) ;
63698: LD_ADDR_VAR 0 5
63702: PUSH
63703: LD_VAR 0 1
63707: PPUSH
63708: LD_VAR 0 6
63712: PPUSH
63713: CALL 62990 0 2
63717: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63718: LD_VAR 0 1
63722: PPUSH
63723: LD_VAR 0 5
63727: PUSH
63728: LD_INT 1
63730: ARRAY
63731: PPUSH
63732: LD_VAR 0 5
63736: PUSH
63737: LD_INT 2
63739: ARRAY
63740: PPUSH
63741: CALL_OW 111
// result := j ;
63745: LD_ADDR_VAR 0 3
63749: PUSH
63750: LD_VAR 0 5
63754: ST_TO_ADDR
// end ;
63755: LD_VAR 0 3
63759: RET
// export function PrepareApemanSoldier ( ) ; begin
63760: LD_INT 0
63762: PPUSH
// uc_nation := 0 ;
63763: LD_ADDR_OWVAR 21
63767: PUSH
63768: LD_INT 0
63770: ST_TO_ADDR
// hc_sex := sex_male ;
63771: LD_ADDR_OWVAR 27
63775: PUSH
63776: LD_INT 1
63778: ST_TO_ADDR
// hc_name :=  ;
63779: LD_ADDR_OWVAR 26
63783: PUSH
63784: LD_STRING 
63786: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63787: LD_ADDR_OWVAR 28
63791: PUSH
63792: LD_INT 15
63794: ST_TO_ADDR
// hc_gallery :=  ;
63795: LD_ADDR_OWVAR 33
63799: PUSH
63800: LD_STRING 
63802: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63803: LD_ADDR_OWVAR 31
63807: PUSH
63808: LD_INT 0
63810: PPUSH
63811: LD_INT 3
63813: PPUSH
63814: CALL_OW 12
63818: PUSH
63819: LD_INT 0
63821: PPUSH
63822: LD_INT 3
63824: PPUSH
63825: CALL_OW 12
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
63842: LD_ADDR_OWVAR 29
63846: PUSH
63847: LD_INT 10
63849: PUSH
63850: LD_INT 12
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: ST_TO_ADDR
// end ;
63857: LD_VAR 0 1
63861: RET
// export function PrepareApemanEngineer ( ) ; begin
63862: LD_INT 0
63864: PPUSH
// uc_nation := 0 ;
63865: LD_ADDR_OWVAR 21
63869: PUSH
63870: LD_INT 0
63872: ST_TO_ADDR
// hc_sex := sex_male ;
63873: LD_ADDR_OWVAR 27
63877: PUSH
63878: LD_INT 1
63880: ST_TO_ADDR
// hc_name :=  ;
63881: LD_ADDR_OWVAR 26
63885: PUSH
63886: LD_STRING 
63888: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63889: LD_ADDR_OWVAR 28
63893: PUSH
63894: LD_INT 16
63896: ST_TO_ADDR
// hc_gallery :=  ;
63897: LD_ADDR_OWVAR 33
63901: PUSH
63902: LD_STRING 
63904: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63905: LD_ADDR_OWVAR 31
63909: PUSH
63910: LD_INT 0
63912: PPUSH
63913: LD_INT 3
63915: PPUSH
63916: CALL_OW 12
63920: PUSH
63921: LD_INT 0
63923: PPUSH
63924: LD_INT 3
63926: PPUSH
63927: CALL_OW 12
63931: PUSH
63932: LD_INT 0
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
63944: LD_ADDR_OWVAR 29
63948: PUSH
63949: LD_INT 10
63951: PUSH
63952: LD_INT 12
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: ST_TO_ADDR
// end ;
63959: LD_VAR 0 1
63963: RET
// export function PrepareApeman ( agressivity ) ; begin
63964: LD_INT 0
63966: PPUSH
// uc_side := 0 ;
63967: LD_ADDR_OWVAR 20
63971: PUSH
63972: LD_INT 0
63974: ST_TO_ADDR
// uc_nation := 0 ;
63975: LD_ADDR_OWVAR 21
63979: PUSH
63980: LD_INT 0
63982: ST_TO_ADDR
// hc_sex := sex_male ;
63983: LD_ADDR_OWVAR 27
63987: PUSH
63988: LD_INT 1
63990: ST_TO_ADDR
// hc_class := class_apeman ;
63991: LD_ADDR_OWVAR 28
63995: PUSH
63996: LD_INT 12
63998: ST_TO_ADDR
// hc_gallery :=  ;
63999: LD_ADDR_OWVAR 33
64003: PUSH
64004: LD_STRING 
64006: ST_TO_ADDR
// hc_name :=  ;
64007: LD_ADDR_OWVAR 26
64011: PUSH
64012: LD_STRING 
64014: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64015: LD_ADDR_OWVAR 29
64019: PUSH
64020: LD_INT 10
64022: PUSH
64023: LD_INT 12
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: ST_TO_ADDR
// if agressivity = 0 then
64030: LD_VAR 0 1
64034: PUSH
64035: LD_INT 0
64037: EQUAL
64038: IFFALSE 64050
// hc_agressivity := 0 else
64040: LD_ADDR_OWVAR 35
64044: PUSH
64045: LD_INT 0
64047: ST_TO_ADDR
64048: GO 64071
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64050: LD_ADDR_OWVAR 35
64054: PUSH
64055: LD_VAR 0 1
64059: NEG
64060: PPUSH
64061: LD_VAR 0 1
64065: PPUSH
64066: CALL_OW 12
64070: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64071: LD_ADDR_OWVAR 31
64075: PUSH
64076: LD_INT 0
64078: PPUSH
64079: LD_INT 3
64081: PPUSH
64082: CALL_OW 12
64086: PUSH
64087: LD_INT 0
64089: PPUSH
64090: LD_INT 3
64092: PPUSH
64093: CALL_OW 12
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: ST_TO_ADDR
// end ;
64110: LD_VAR 0 2
64114: RET
// export function PrepareTiger ( agressivity ) ; begin
64115: LD_INT 0
64117: PPUSH
// uc_side := 0 ;
64118: LD_ADDR_OWVAR 20
64122: PUSH
64123: LD_INT 0
64125: ST_TO_ADDR
// uc_nation := 0 ;
64126: LD_ADDR_OWVAR 21
64130: PUSH
64131: LD_INT 0
64133: ST_TO_ADDR
// InitHc ;
64134: CALL_OW 19
// hc_class := class_tiger ;
64138: LD_ADDR_OWVAR 28
64142: PUSH
64143: LD_INT 14
64145: ST_TO_ADDR
// hc_gallery :=  ;
64146: LD_ADDR_OWVAR 33
64150: PUSH
64151: LD_STRING 
64153: ST_TO_ADDR
// hc_name :=  ;
64154: LD_ADDR_OWVAR 26
64158: PUSH
64159: LD_STRING 
64161: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64162: LD_ADDR_OWVAR 35
64166: PUSH
64167: LD_VAR 0 1
64171: NEG
64172: PPUSH
64173: LD_VAR 0 1
64177: PPUSH
64178: CALL_OW 12
64182: ST_TO_ADDR
// end ;
64183: LD_VAR 0 2
64187: RET
// export function PrepareEnchidna ( ) ; begin
64188: LD_INT 0
64190: PPUSH
// uc_side := 0 ;
64191: LD_ADDR_OWVAR 20
64195: PUSH
64196: LD_INT 0
64198: ST_TO_ADDR
// uc_nation := 0 ;
64199: LD_ADDR_OWVAR 21
64203: PUSH
64204: LD_INT 0
64206: ST_TO_ADDR
// InitHc ;
64207: CALL_OW 19
// hc_class := class_baggie ;
64211: LD_ADDR_OWVAR 28
64215: PUSH
64216: LD_INT 13
64218: ST_TO_ADDR
// hc_gallery :=  ;
64219: LD_ADDR_OWVAR 33
64223: PUSH
64224: LD_STRING 
64226: ST_TO_ADDR
// hc_name :=  ;
64227: LD_ADDR_OWVAR 26
64231: PUSH
64232: LD_STRING 
64234: ST_TO_ADDR
// end ;
64235: LD_VAR 0 1
64239: RET
// export function PrepareFrog ( ) ; begin
64240: LD_INT 0
64242: PPUSH
// uc_side := 0 ;
64243: LD_ADDR_OWVAR 20
64247: PUSH
64248: LD_INT 0
64250: ST_TO_ADDR
// uc_nation := 0 ;
64251: LD_ADDR_OWVAR 21
64255: PUSH
64256: LD_INT 0
64258: ST_TO_ADDR
// InitHc ;
64259: CALL_OW 19
// hc_class := class_frog ;
64263: LD_ADDR_OWVAR 28
64267: PUSH
64268: LD_INT 19
64270: ST_TO_ADDR
// hc_gallery :=  ;
64271: LD_ADDR_OWVAR 33
64275: PUSH
64276: LD_STRING 
64278: ST_TO_ADDR
// hc_name :=  ;
64279: LD_ADDR_OWVAR 26
64283: PUSH
64284: LD_STRING 
64286: ST_TO_ADDR
// end ;
64287: LD_VAR 0 1
64291: RET
// export function PrepareFish ( ) ; begin
64292: LD_INT 0
64294: PPUSH
// uc_side := 0 ;
64295: LD_ADDR_OWVAR 20
64299: PUSH
64300: LD_INT 0
64302: ST_TO_ADDR
// uc_nation := 0 ;
64303: LD_ADDR_OWVAR 21
64307: PUSH
64308: LD_INT 0
64310: ST_TO_ADDR
// InitHc ;
64311: CALL_OW 19
// hc_class := class_fish ;
64315: LD_ADDR_OWVAR 28
64319: PUSH
64320: LD_INT 20
64322: ST_TO_ADDR
// hc_gallery :=  ;
64323: LD_ADDR_OWVAR 33
64327: PUSH
64328: LD_STRING 
64330: ST_TO_ADDR
// hc_name :=  ;
64331: LD_ADDR_OWVAR 26
64335: PUSH
64336: LD_STRING 
64338: ST_TO_ADDR
// end ;
64339: LD_VAR 0 1
64343: RET
// export function PrepareBird ( ) ; begin
64344: LD_INT 0
64346: PPUSH
// uc_side := 0 ;
64347: LD_ADDR_OWVAR 20
64351: PUSH
64352: LD_INT 0
64354: ST_TO_ADDR
// uc_nation := 0 ;
64355: LD_ADDR_OWVAR 21
64359: PUSH
64360: LD_INT 0
64362: ST_TO_ADDR
// InitHc ;
64363: CALL_OW 19
// hc_class := class_phororhacos ;
64367: LD_ADDR_OWVAR 28
64371: PUSH
64372: LD_INT 18
64374: ST_TO_ADDR
// hc_gallery :=  ;
64375: LD_ADDR_OWVAR 33
64379: PUSH
64380: LD_STRING 
64382: ST_TO_ADDR
// hc_name :=  ;
64383: LD_ADDR_OWVAR 26
64387: PUSH
64388: LD_STRING 
64390: ST_TO_ADDR
// end ;
64391: LD_VAR 0 1
64395: RET
// export function PrepareHorse ( ) ; begin
64396: LD_INT 0
64398: PPUSH
// uc_side := 0 ;
64399: LD_ADDR_OWVAR 20
64403: PUSH
64404: LD_INT 0
64406: ST_TO_ADDR
// uc_nation := 0 ;
64407: LD_ADDR_OWVAR 21
64411: PUSH
64412: LD_INT 0
64414: ST_TO_ADDR
// InitHc ;
64415: CALL_OW 19
// hc_class := class_horse ;
64419: LD_ADDR_OWVAR 28
64423: PUSH
64424: LD_INT 21
64426: ST_TO_ADDR
// hc_gallery :=  ;
64427: LD_ADDR_OWVAR 33
64431: PUSH
64432: LD_STRING 
64434: ST_TO_ADDR
// hc_name :=  ;
64435: LD_ADDR_OWVAR 26
64439: PUSH
64440: LD_STRING 
64442: ST_TO_ADDR
// end ;
64443: LD_VAR 0 1
64447: RET
// export function PrepareMastodont ( ) ; begin
64448: LD_INT 0
64450: PPUSH
// uc_side := 0 ;
64451: LD_ADDR_OWVAR 20
64455: PUSH
64456: LD_INT 0
64458: ST_TO_ADDR
// uc_nation := 0 ;
64459: LD_ADDR_OWVAR 21
64463: PUSH
64464: LD_INT 0
64466: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64467: LD_ADDR_OWVAR 37
64471: PUSH
64472: LD_INT 31
64474: ST_TO_ADDR
// vc_control := control_rider ;
64475: LD_ADDR_OWVAR 38
64479: PUSH
64480: LD_INT 4
64482: ST_TO_ADDR
// end ;
64483: LD_VAR 0 1
64487: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64488: LD_INT 0
64490: PPUSH
64491: PPUSH
64492: PPUSH
// uc_side = 0 ;
64493: LD_ADDR_OWVAR 20
64497: PUSH
64498: LD_INT 0
64500: ST_TO_ADDR
// uc_nation = 0 ;
64501: LD_ADDR_OWVAR 21
64505: PUSH
64506: LD_INT 0
64508: ST_TO_ADDR
// InitHc_All ( ) ;
64509: CALL_OW 584
// InitVc ;
64513: CALL_OW 20
// if mastodonts then
64517: LD_VAR 0 6
64521: IFFALSE 64588
// for i = 1 to mastodonts do
64523: LD_ADDR_VAR 0 11
64527: PUSH
64528: DOUBLE
64529: LD_INT 1
64531: DEC
64532: ST_TO_ADDR
64533: LD_VAR 0 6
64537: PUSH
64538: FOR_TO
64539: IFFALSE 64586
// begin vc_chassis := 31 ;
64541: LD_ADDR_OWVAR 37
64545: PUSH
64546: LD_INT 31
64548: ST_TO_ADDR
// vc_control := control_rider ;
64549: LD_ADDR_OWVAR 38
64553: PUSH
64554: LD_INT 4
64556: ST_TO_ADDR
// animal := CreateVehicle ;
64557: LD_ADDR_VAR 0 12
64561: PUSH
64562: CALL_OW 45
64566: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64567: LD_VAR 0 12
64571: PPUSH
64572: LD_VAR 0 8
64576: PPUSH
64577: LD_INT 0
64579: PPUSH
64580: CALL 66730 0 3
// end ;
64584: GO 64538
64586: POP
64587: POP
// if horses then
64588: LD_VAR 0 5
64592: IFFALSE 64659
// for i = 1 to horses do
64594: LD_ADDR_VAR 0 11
64598: PUSH
64599: DOUBLE
64600: LD_INT 1
64602: DEC
64603: ST_TO_ADDR
64604: LD_VAR 0 5
64608: PUSH
64609: FOR_TO
64610: IFFALSE 64657
// begin hc_class := 21 ;
64612: LD_ADDR_OWVAR 28
64616: PUSH
64617: LD_INT 21
64619: ST_TO_ADDR
// hc_gallery :=  ;
64620: LD_ADDR_OWVAR 33
64624: PUSH
64625: LD_STRING 
64627: ST_TO_ADDR
// animal := CreateHuman ;
64628: LD_ADDR_VAR 0 12
64632: PUSH
64633: CALL_OW 44
64637: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64638: LD_VAR 0 12
64642: PPUSH
64643: LD_VAR 0 8
64647: PPUSH
64648: LD_INT 0
64650: PPUSH
64651: CALL 66730 0 3
// end ;
64655: GO 64609
64657: POP
64658: POP
// if birds then
64659: LD_VAR 0 1
64663: IFFALSE 64730
// for i = 1 to birds do
64665: LD_ADDR_VAR 0 11
64669: PUSH
64670: DOUBLE
64671: LD_INT 1
64673: DEC
64674: ST_TO_ADDR
64675: LD_VAR 0 1
64679: PUSH
64680: FOR_TO
64681: IFFALSE 64728
// begin hc_class := 18 ;
64683: LD_ADDR_OWVAR 28
64687: PUSH
64688: LD_INT 18
64690: ST_TO_ADDR
// hc_gallery =  ;
64691: LD_ADDR_OWVAR 33
64695: PUSH
64696: LD_STRING 
64698: ST_TO_ADDR
// animal := CreateHuman ;
64699: LD_ADDR_VAR 0 12
64703: PUSH
64704: CALL_OW 44
64708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64709: LD_VAR 0 12
64713: PPUSH
64714: LD_VAR 0 8
64718: PPUSH
64719: LD_INT 0
64721: PPUSH
64722: CALL 66730 0 3
// end ;
64726: GO 64680
64728: POP
64729: POP
// if tigers then
64730: LD_VAR 0 2
64734: IFFALSE 64818
// for i = 1 to tigers do
64736: LD_ADDR_VAR 0 11
64740: PUSH
64741: DOUBLE
64742: LD_INT 1
64744: DEC
64745: ST_TO_ADDR
64746: LD_VAR 0 2
64750: PUSH
64751: FOR_TO
64752: IFFALSE 64816
// begin hc_class = class_tiger ;
64754: LD_ADDR_OWVAR 28
64758: PUSH
64759: LD_INT 14
64761: ST_TO_ADDR
// hc_gallery =  ;
64762: LD_ADDR_OWVAR 33
64766: PUSH
64767: LD_STRING 
64769: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64770: LD_ADDR_OWVAR 35
64774: PUSH
64775: LD_INT 7
64777: NEG
64778: PPUSH
64779: LD_INT 7
64781: PPUSH
64782: CALL_OW 12
64786: ST_TO_ADDR
// animal := CreateHuman ;
64787: LD_ADDR_VAR 0 12
64791: PUSH
64792: CALL_OW 44
64796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64797: LD_VAR 0 12
64801: PPUSH
64802: LD_VAR 0 8
64806: PPUSH
64807: LD_INT 0
64809: PPUSH
64810: CALL 66730 0 3
// end ;
64814: GO 64751
64816: POP
64817: POP
// if apemans then
64818: LD_VAR 0 3
64822: IFFALSE 64945
// for i = 1 to apemans do
64824: LD_ADDR_VAR 0 11
64828: PUSH
64829: DOUBLE
64830: LD_INT 1
64832: DEC
64833: ST_TO_ADDR
64834: LD_VAR 0 3
64838: PUSH
64839: FOR_TO
64840: IFFALSE 64943
// begin hc_class = class_apeman ;
64842: LD_ADDR_OWVAR 28
64846: PUSH
64847: LD_INT 12
64849: ST_TO_ADDR
// hc_gallery =  ;
64850: LD_ADDR_OWVAR 33
64854: PUSH
64855: LD_STRING 
64857: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64858: LD_ADDR_OWVAR 35
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PPUSH
64867: LD_INT 2
64869: PPUSH
64870: CALL_OW 12
64874: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64875: LD_ADDR_OWVAR 31
64879: PUSH
64880: LD_INT 1
64882: PPUSH
64883: LD_INT 3
64885: PPUSH
64886: CALL_OW 12
64890: PUSH
64891: LD_INT 1
64893: PPUSH
64894: LD_INT 3
64896: PPUSH
64897: CALL_OW 12
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: LD_INT 0
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: ST_TO_ADDR
// animal := CreateHuman ;
64914: LD_ADDR_VAR 0 12
64918: PUSH
64919: CALL_OW 44
64923: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64924: LD_VAR 0 12
64928: PPUSH
64929: LD_VAR 0 8
64933: PPUSH
64934: LD_INT 0
64936: PPUSH
64937: CALL 66730 0 3
// end ;
64941: GO 64839
64943: POP
64944: POP
// if enchidnas then
64945: LD_VAR 0 4
64949: IFFALSE 65016
// for i = 1 to enchidnas do
64951: LD_ADDR_VAR 0 11
64955: PUSH
64956: DOUBLE
64957: LD_INT 1
64959: DEC
64960: ST_TO_ADDR
64961: LD_VAR 0 4
64965: PUSH
64966: FOR_TO
64967: IFFALSE 65014
// begin hc_class = 13 ;
64969: LD_ADDR_OWVAR 28
64973: PUSH
64974: LD_INT 13
64976: ST_TO_ADDR
// hc_gallery =  ;
64977: LD_ADDR_OWVAR 33
64981: PUSH
64982: LD_STRING 
64984: ST_TO_ADDR
// animal := CreateHuman ;
64985: LD_ADDR_VAR 0 12
64989: PUSH
64990: CALL_OW 44
64994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64995: LD_VAR 0 12
64999: PPUSH
65000: LD_VAR 0 8
65004: PPUSH
65005: LD_INT 0
65007: PPUSH
65008: CALL 66730 0 3
// end ;
65012: GO 64966
65014: POP
65015: POP
// if fishes then
65016: LD_VAR 0 7
65020: IFFALSE 65087
// for i = 1 to fishes do
65022: LD_ADDR_VAR 0 11
65026: PUSH
65027: DOUBLE
65028: LD_INT 1
65030: DEC
65031: ST_TO_ADDR
65032: LD_VAR 0 7
65036: PUSH
65037: FOR_TO
65038: IFFALSE 65085
// begin hc_class = 20 ;
65040: LD_ADDR_OWVAR 28
65044: PUSH
65045: LD_INT 20
65047: ST_TO_ADDR
// hc_gallery =  ;
65048: LD_ADDR_OWVAR 33
65052: PUSH
65053: LD_STRING 
65055: ST_TO_ADDR
// animal := CreateHuman ;
65056: LD_ADDR_VAR 0 12
65060: PUSH
65061: CALL_OW 44
65065: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65066: LD_VAR 0 12
65070: PPUSH
65071: LD_VAR 0 9
65075: PPUSH
65076: LD_INT 0
65078: PPUSH
65079: CALL 66730 0 3
// end ;
65083: GO 65037
65085: POP
65086: POP
// end ;
65087: LD_VAR 0 10
65091: RET
// export function WantHeal ( sci , unit ) ; begin
65092: LD_INT 0
65094: PPUSH
// if GetTaskList ( sci ) > 0 then
65095: LD_VAR 0 1
65099: PPUSH
65100: CALL_OW 437
65104: PUSH
65105: LD_INT 0
65107: GREATER
65108: IFFALSE 65180
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65110: LD_VAR 0 1
65114: PPUSH
65115: CALL_OW 437
65119: PUSH
65120: LD_INT 1
65122: ARRAY
65123: PUSH
65124: LD_INT 1
65126: ARRAY
65127: PUSH
65128: LD_STRING l
65130: EQUAL
65131: IFFALSE 65158
65133: PUSH
65134: LD_VAR 0 1
65138: PPUSH
65139: CALL_OW 437
65143: PUSH
65144: LD_INT 1
65146: ARRAY
65147: PUSH
65148: LD_INT 4
65150: ARRAY
65151: PUSH
65152: LD_VAR 0 2
65156: EQUAL
65157: AND
65158: IFFALSE 65170
// result := true else
65160: LD_ADDR_VAR 0 3
65164: PUSH
65165: LD_INT 1
65167: ST_TO_ADDR
65168: GO 65178
// result := false ;
65170: LD_ADDR_VAR 0 3
65174: PUSH
65175: LD_INT 0
65177: ST_TO_ADDR
// end else
65178: GO 65188
// result := false ;
65180: LD_ADDR_VAR 0 3
65184: PUSH
65185: LD_INT 0
65187: ST_TO_ADDR
// end ;
65188: LD_VAR 0 3
65192: RET
// export function HealTarget ( sci ) ; begin
65193: LD_INT 0
65195: PPUSH
// if not sci then
65196: LD_VAR 0 1
65200: NOT
65201: IFFALSE 65205
// exit ;
65203: GO 65270
// result := 0 ;
65205: LD_ADDR_VAR 0 2
65209: PUSH
65210: LD_INT 0
65212: ST_TO_ADDR
// if GetTaskList ( sci ) then
65213: LD_VAR 0 1
65217: PPUSH
65218: CALL_OW 437
65222: IFFALSE 65270
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65224: LD_VAR 0 1
65228: PPUSH
65229: CALL_OW 437
65233: PUSH
65234: LD_INT 1
65236: ARRAY
65237: PUSH
65238: LD_INT 1
65240: ARRAY
65241: PUSH
65242: LD_STRING l
65244: EQUAL
65245: IFFALSE 65270
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65247: LD_ADDR_VAR 0 2
65251: PUSH
65252: LD_VAR 0 1
65256: PPUSH
65257: CALL_OW 437
65261: PUSH
65262: LD_INT 1
65264: ARRAY
65265: PUSH
65266: LD_INT 4
65268: ARRAY
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 2
65274: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65275: LD_INT 0
65277: PPUSH
65278: PPUSH
65279: PPUSH
65280: PPUSH
// if not base_units then
65281: LD_VAR 0 1
65285: NOT
65286: IFFALSE 65290
// exit ;
65288: GO 65377
// result := false ;
65290: LD_ADDR_VAR 0 2
65294: PUSH
65295: LD_INT 0
65297: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65298: LD_ADDR_VAR 0 5
65302: PUSH
65303: LD_VAR 0 1
65307: PPUSH
65308: LD_INT 21
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PPUSH
65318: CALL_OW 72
65322: ST_TO_ADDR
// if not tmp then
65323: LD_VAR 0 5
65327: NOT
65328: IFFALSE 65332
// exit ;
65330: GO 65377
// for i in tmp do
65332: LD_ADDR_VAR 0 3
65336: PUSH
65337: LD_VAR 0 5
65341: PUSH
65342: FOR_IN
65343: IFFALSE 65375
// begin result := EnemyInRange ( i , 22 ) ;
65345: LD_ADDR_VAR 0 2
65349: PUSH
65350: LD_VAR 0 3
65354: PPUSH
65355: LD_INT 22
65357: PPUSH
65358: CALL 62792 0 2
65362: ST_TO_ADDR
// if result then
65363: LD_VAR 0 2
65367: IFFALSE 65373
// exit ;
65369: POP
65370: POP
65371: GO 65377
// end ;
65373: GO 65342
65375: POP
65376: POP
// end ;
65377: LD_VAR 0 2
65381: RET
// export function FilterByTag ( units , tag ) ; begin
65382: LD_INT 0
65384: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65385: LD_ADDR_VAR 0 3
65389: PUSH
65390: LD_VAR 0 1
65394: PPUSH
65395: LD_INT 120
65397: PUSH
65398: LD_VAR 0 2
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PPUSH
65407: CALL_OW 72
65411: ST_TO_ADDR
// end ;
65412: LD_VAR 0 3
65416: RET
// export function IsDriver ( un ) ; begin
65417: LD_INT 0
65419: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65420: LD_ADDR_VAR 0 2
65424: PUSH
65425: LD_VAR 0 1
65429: PUSH
65430: LD_INT 55
65432: PUSH
65433: EMPTY
65434: LIST
65435: PPUSH
65436: CALL_OW 69
65440: IN
65441: ST_TO_ADDR
// end ;
65442: LD_VAR 0 2
65446: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65447: LD_INT 0
65449: PPUSH
65450: PPUSH
// list := [ ] ;
65451: LD_ADDR_VAR 0 5
65455: PUSH
65456: EMPTY
65457: ST_TO_ADDR
// case d of 0 :
65458: LD_VAR 0 3
65462: PUSH
65463: LD_INT 0
65465: DOUBLE
65466: EQUAL
65467: IFTRUE 65471
65469: GO 65604
65471: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65472: LD_ADDR_VAR 0 5
65476: PUSH
65477: LD_VAR 0 1
65481: PUSH
65482: LD_INT 4
65484: MINUS
65485: PUSH
65486: LD_VAR 0 2
65490: PUSH
65491: LD_INT 4
65493: MINUS
65494: PUSH
65495: LD_INT 2
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: LIST
65502: PUSH
65503: LD_VAR 0 1
65507: PUSH
65508: LD_INT 3
65510: MINUS
65511: PUSH
65512: LD_VAR 0 2
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: LIST
65524: PUSH
65525: LD_VAR 0 1
65529: PUSH
65530: LD_INT 4
65532: PLUS
65533: PUSH
65534: LD_VAR 0 2
65538: PUSH
65539: LD_INT 4
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: LIST
65546: PUSH
65547: LD_VAR 0 1
65551: PUSH
65552: LD_INT 3
65554: PLUS
65555: PUSH
65556: LD_VAR 0 2
65560: PUSH
65561: LD_INT 3
65563: PLUS
65564: PUSH
65565: LD_INT 5
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: LIST
65572: PUSH
65573: LD_VAR 0 1
65577: PUSH
65578: LD_VAR 0 2
65582: PUSH
65583: LD_INT 4
65585: PLUS
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: LIST
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: ST_TO_ADDR
// end ; 1 :
65602: GO 66302
65604: LD_INT 1
65606: DOUBLE
65607: EQUAL
65608: IFTRUE 65612
65610: GO 65745
65612: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65613: LD_ADDR_VAR 0 5
65617: PUSH
65618: LD_VAR 0 1
65622: PUSH
65623: LD_VAR 0 2
65627: PUSH
65628: LD_INT 4
65630: MINUS
65631: PUSH
65632: LD_INT 3
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: LIST
65639: PUSH
65640: LD_VAR 0 1
65644: PUSH
65645: LD_INT 3
65647: MINUS
65648: PUSH
65649: LD_VAR 0 2
65653: PUSH
65654: LD_INT 3
65656: MINUS
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: LIST
65665: PUSH
65666: LD_VAR 0 1
65670: PUSH
65671: LD_INT 4
65673: MINUS
65674: PUSH
65675: LD_VAR 0 2
65679: PUSH
65680: LD_INT 1
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: LIST
65687: PUSH
65688: LD_VAR 0 1
65692: PUSH
65693: LD_VAR 0 2
65697: PUSH
65698: LD_INT 3
65700: PLUS
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: LIST
65709: PUSH
65710: LD_VAR 0 1
65714: PUSH
65715: LD_INT 4
65717: PLUS
65718: PUSH
65719: LD_VAR 0 2
65723: PUSH
65724: LD_INT 4
65726: PLUS
65727: PUSH
65728: LD_INT 5
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: LIST
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: ST_TO_ADDR
// end ; 2 :
65743: GO 66302
65745: LD_INT 2
65747: DOUBLE
65748: EQUAL
65749: IFTRUE 65753
65751: GO 65882
65753: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65754: LD_ADDR_VAR 0 5
65758: PUSH
65759: LD_VAR 0 1
65763: PUSH
65764: LD_VAR 0 2
65768: PUSH
65769: LD_INT 3
65771: MINUS
65772: PUSH
65773: LD_INT 3
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: PUSH
65781: LD_VAR 0 1
65785: PUSH
65786: LD_INT 4
65788: PLUS
65789: PUSH
65790: LD_VAR 0 2
65794: PUSH
65795: LD_INT 4
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: LIST
65802: PUSH
65803: LD_VAR 0 1
65807: PUSH
65808: LD_VAR 0 2
65812: PUSH
65813: LD_INT 4
65815: PLUS
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: PUSH
65825: LD_VAR 0 1
65829: PUSH
65830: LD_INT 3
65832: MINUS
65833: PUSH
65834: LD_VAR 0 2
65838: PUSH
65839: LD_INT 1
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: LIST
65846: PUSH
65847: LD_VAR 0 1
65851: PUSH
65852: LD_INT 4
65854: MINUS
65855: PUSH
65856: LD_VAR 0 2
65860: PUSH
65861: LD_INT 4
65863: MINUS
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: LIST
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: ST_TO_ADDR
// end ; 3 :
65880: GO 66302
65882: LD_INT 3
65884: DOUBLE
65885: EQUAL
65886: IFTRUE 65890
65888: GO 66023
65890: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65891: LD_ADDR_VAR 0 5
65895: PUSH
65896: LD_VAR 0 1
65900: PUSH
65901: LD_INT 3
65903: PLUS
65904: PUSH
65905: LD_VAR 0 2
65909: PUSH
65910: LD_INT 4
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: LIST
65917: PUSH
65918: LD_VAR 0 1
65922: PUSH
65923: LD_INT 4
65925: PLUS
65926: PUSH
65927: LD_VAR 0 2
65931: PUSH
65932: LD_INT 4
65934: PLUS
65935: PUSH
65936: LD_INT 5
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: LIST
65943: PUSH
65944: LD_VAR 0 1
65948: PUSH
65949: LD_INT 4
65951: MINUS
65952: PUSH
65953: LD_VAR 0 2
65957: PUSH
65958: LD_INT 1
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: LIST
65965: PUSH
65966: LD_VAR 0 1
65970: PUSH
65971: LD_VAR 0 2
65975: PUSH
65976: LD_INT 4
65978: MINUS
65979: PUSH
65980: LD_INT 3
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: LIST
65987: PUSH
65988: LD_VAR 0 1
65992: PUSH
65993: LD_INT 3
65995: MINUS
65996: PUSH
65997: LD_VAR 0 2
66001: PUSH
66002: LD_INT 3
66004: MINUS
66005: PUSH
66006: LD_INT 2
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: LIST
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: ST_TO_ADDR
// end ; 4 :
66021: GO 66302
66023: LD_INT 4
66025: DOUBLE
66026: EQUAL
66027: IFTRUE 66031
66029: GO 66164
66031: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66032: LD_ADDR_VAR 0 5
66036: PUSH
66037: LD_VAR 0 1
66041: PUSH
66042: LD_VAR 0 2
66046: PUSH
66047: LD_INT 4
66049: PLUS
66050: PUSH
66051: LD_INT 0
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: LIST
66058: PUSH
66059: LD_VAR 0 1
66063: PUSH
66064: LD_INT 3
66066: PLUS
66067: PUSH
66068: LD_VAR 0 2
66072: PUSH
66073: LD_INT 3
66075: PLUS
66076: PUSH
66077: LD_INT 5
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: PUSH
66085: LD_VAR 0 1
66089: PUSH
66090: LD_INT 4
66092: PLUS
66093: PUSH
66094: LD_VAR 0 2
66098: PUSH
66099: LD_INT 4
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: LIST
66106: PUSH
66107: LD_VAR 0 1
66111: PUSH
66112: LD_VAR 0 2
66116: PUSH
66117: LD_INT 3
66119: MINUS
66120: PUSH
66121: LD_INT 3
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: PUSH
66129: LD_VAR 0 1
66133: PUSH
66134: LD_INT 4
66136: MINUS
66137: PUSH
66138: LD_VAR 0 2
66142: PUSH
66143: LD_INT 4
66145: MINUS
66146: PUSH
66147: LD_INT 2
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: ST_TO_ADDR
// end ; 5 :
66162: GO 66302
66164: LD_INT 5
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66172
66170: GO 66301
66172: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66173: LD_ADDR_VAR 0 5
66177: PUSH
66178: LD_VAR 0 1
66182: PUSH
66183: LD_INT 4
66185: MINUS
66186: PUSH
66187: LD_VAR 0 2
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: LIST
66199: PUSH
66200: LD_VAR 0 1
66204: PUSH
66205: LD_VAR 0 2
66209: PUSH
66210: LD_INT 4
66212: MINUS
66213: PUSH
66214: LD_INT 3
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: LIST
66221: PUSH
66222: LD_VAR 0 1
66226: PUSH
66227: LD_INT 4
66229: PLUS
66230: PUSH
66231: LD_VAR 0 2
66235: PUSH
66236: LD_INT 4
66238: PLUS
66239: PUSH
66240: LD_INT 5
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: PUSH
66248: LD_VAR 0 1
66252: PUSH
66253: LD_INT 3
66255: PLUS
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: LD_INT 4
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: PUSH
66270: LD_VAR 0 1
66274: PUSH
66275: LD_VAR 0 2
66279: PUSH
66280: LD_INT 3
66282: PLUS
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: LIST
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: ST_TO_ADDR
// end ; end ;
66299: GO 66302
66301: POP
// result := list ;
66302: LD_ADDR_VAR 0 4
66306: PUSH
66307: LD_VAR 0 5
66311: ST_TO_ADDR
// end ;
66312: LD_VAR 0 4
66316: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66317: LD_INT 0
66319: PPUSH
66320: PPUSH
66321: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66322: LD_VAR 0 1
66326: NOT
66327: IFTRUE 66355
66329: PUSH
66330: LD_VAR 0 2
66334: PUSH
66335: LD_INT 1
66337: PUSH
66338: LD_INT 2
66340: PUSH
66341: LD_INT 3
66343: PUSH
66344: LD_INT 4
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: IN
66353: NOT
66354: OR
66355: IFFALSE 66359
// exit ;
66357: GO 66442
// tmp := [ ] ;
66359: LD_ADDR_VAR 0 5
66363: PUSH
66364: EMPTY
66365: ST_TO_ADDR
// for i in units do
66366: LD_ADDR_VAR 0 4
66370: PUSH
66371: LD_VAR 0 1
66375: PUSH
66376: FOR_IN
66377: IFFALSE 66411
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66379: LD_ADDR_VAR 0 5
66383: PUSH
66384: LD_VAR 0 5
66388: PPUSH
66389: LD_VAR 0 4
66393: PPUSH
66394: LD_VAR 0 2
66398: PPUSH
66399: CALL_OW 259
66403: PPUSH
66404: CALL 67837 0 2
66408: ST_TO_ADDR
66409: GO 66376
66411: POP
66412: POP
// if not tmp then
66413: LD_VAR 0 5
66417: NOT
66418: IFFALSE 66422
// exit ;
66420: GO 66442
// result := SortListByListDesc ( units , tmp ) ;
66422: LD_ADDR_VAR 0 3
66426: PUSH
66427: LD_VAR 0 1
66431: PPUSH
66432: LD_VAR 0 5
66436: PPUSH
66437: CALL_OW 77
66441: ST_TO_ADDR
// end ;
66442: LD_VAR 0 3
66446: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66447: LD_INT 0
66449: PPUSH
66450: PPUSH
66451: PPUSH
// result := false ;
66452: LD_ADDR_VAR 0 3
66456: PUSH
66457: LD_INT 0
66459: ST_TO_ADDR
// if not building then
66460: LD_VAR 0 2
66464: NOT
66465: IFFALSE 66469
// exit ;
66467: GO 66613
// x := GetX ( building ) ;
66469: LD_ADDR_VAR 0 4
66473: PUSH
66474: LD_VAR 0 2
66478: PPUSH
66479: CALL_OW 250
66483: ST_TO_ADDR
// y := GetY ( building ) ;
66484: LD_ADDR_VAR 0 5
66488: PUSH
66489: LD_VAR 0 2
66493: PPUSH
66494: CALL_OW 251
66498: ST_TO_ADDR
// if not x or not y then
66499: LD_VAR 0 4
66503: NOT
66504: IFTRUE 66513
66506: PUSH
66507: LD_VAR 0 5
66511: NOT
66512: OR
66513: IFFALSE 66517
// exit ;
66515: GO 66613
// if GetTaskList ( unit ) then
66517: LD_VAR 0 1
66521: PPUSH
66522: CALL_OW 437
66526: IFFALSE 66613
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66528: LD_STRING e
66530: PUSH
66531: LD_VAR 0 1
66535: PPUSH
66536: CALL_OW 437
66540: PUSH
66541: LD_INT 1
66543: ARRAY
66544: PUSH
66545: LD_INT 1
66547: ARRAY
66548: EQUAL
66549: IFFALSE 66576
66551: PUSH
66552: LD_VAR 0 4
66556: PUSH
66557: LD_VAR 0 1
66561: PPUSH
66562: CALL_OW 437
66566: PUSH
66567: LD_INT 1
66569: ARRAY
66570: PUSH
66571: LD_INT 2
66573: ARRAY
66574: EQUAL
66575: AND
66576: IFFALSE 66603
66578: PUSH
66579: LD_VAR 0 5
66583: PUSH
66584: LD_VAR 0 1
66588: PPUSH
66589: CALL_OW 437
66593: PUSH
66594: LD_INT 1
66596: ARRAY
66597: PUSH
66598: LD_INT 3
66600: ARRAY
66601: EQUAL
66602: AND
66603: IFFALSE 66613
// result := true end ;
66605: LD_ADDR_VAR 0 3
66609: PUSH
66610: LD_INT 1
66612: ST_TO_ADDR
// end ;
66613: LD_VAR 0 3
66617: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66618: LD_INT 0
66620: PPUSH
// result := false ;
66621: LD_ADDR_VAR 0 4
66625: PUSH
66626: LD_INT 0
66628: ST_TO_ADDR
// if GetTaskList ( unit ) then
66629: LD_VAR 0 1
66633: PPUSH
66634: CALL_OW 437
66638: IFFALSE 66725
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66640: LD_STRING M
66642: PUSH
66643: LD_VAR 0 1
66647: PPUSH
66648: CALL_OW 437
66652: PUSH
66653: LD_INT 1
66655: ARRAY
66656: PUSH
66657: LD_INT 1
66659: ARRAY
66660: EQUAL
66661: IFFALSE 66688
66663: PUSH
66664: LD_VAR 0 2
66668: PUSH
66669: LD_VAR 0 1
66673: PPUSH
66674: CALL_OW 437
66678: PUSH
66679: LD_INT 1
66681: ARRAY
66682: PUSH
66683: LD_INT 2
66685: ARRAY
66686: EQUAL
66687: AND
66688: IFFALSE 66715
66690: PUSH
66691: LD_VAR 0 3
66695: PUSH
66696: LD_VAR 0 1
66700: PPUSH
66701: CALL_OW 437
66705: PUSH
66706: LD_INT 1
66708: ARRAY
66709: PUSH
66710: LD_INT 3
66712: ARRAY
66713: EQUAL
66714: AND
66715: IFFALSE 66725
// result := true ;
66717: LD_ADDR_VAR 0 4
66721: PUSH
66722: LD_INT 1
66724: ST_TO_ADDR
// end ; end ;
66725: LD_VAR 0 4
66729: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66730: LD_INT 0
66732: PPUSH
66733: PPUSH
66734: PPUSH
66735: PPUSH
// if not unit or not area then
66736: LD_VAR 0 1
66740: NOT
66741: IFTRUE 66750
66743: PUSH
66744: LD_VAR 0 2
66748: NOT
66749: OR
66750: IFFALSE 66754
// exit ;
66752: GO 66930
// tmp := AreaToList ( area , i ) ;
66754: LD_ADDR_VAR 0 6
66758: PUSH
66759: LD_VAR 0 2
66763: PPUSH
66764: LD_VAR 0 5
66768: PPUSH
66769: CALL_OW 517
66773: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66774: LD_ADDR_VAR 0 5
66778: PUSH
66779: DOUBLE
66780: LD_INT 1
66782: DEC
66783: ST_TO_ADDR
66784: LD_VAR 0 6
66788: PUSH
66789: LD_INT 1
66791: ARRAY
66792: PUSH
66793: FOR_TO
66794: IFFALSE 66928
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66796: LD_ADDR_VAR 0 7
66800: PUSH
66801: LD_VAR 0 6
66805: PUSH
66806: LD_INT 1
66808: ARRAY
66809: PUSH
66810: LD_VAR 0 5
66814: ARRAY
66815: PUSH
66816: LD_VAR 0 6
66820: PUSH
66821: LD_INT 2
66823: ARRAY
66824: PUSH
66825: LD_VAR 0 5
66829: ARRAY
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66835: LD_INT 92
66837: PUSH
66838: LD_VAR 0 7
66842: PUSH
66843: LD_INT 1
66845: ARRAY
66846: PUSH
66847: LD_VAR 0 7
66851: PUSH
66852: LD_INT 2
66854: ARRAY
66855: PUSH
66856: LD_INT 2
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: PPUSH
66865: CALL_OW 69
66869: PUSH
66870: LD_INT 0
66872: EQUAL
66873: IFFALSE 66926
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66875: LD_VAR 0 1
66879: PPUSH
66880: LD_VAR 0 7
66884: PUSH
66885: LD_INT 1
66887: ARRAY
66888: PPUSH
66889: LD_VAR 0 7
66893: PUSH
66894: LD_INT 2
66896: ARRAY
66897: PPUSH
66898: LD_VAR 0 3
66902: PPUSH
66903: CALL_OW 48
// result := IsPlaced ( unit ) ;
66907: LD_ADDR_VAR 0 4
66911: PUSH
66912: LD_VAR 0 1
66916: PPUSH
66917: CALL_OW 305
66921: ST_TO_ADDR
// exit ;
66922: POP
66923: POP
66924: GO 66930
// end ; end ;
66926: GO 66793
66928: POP
66929: POP
// end ;
66930: LD_VAR 0 4
66934: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66935: LD_INT 0
66937: PPUSH
66938: PPUSH
66939: PPUSH
// if not side or side > 8 then
66940: LD_VAR 0 1
66944: NOT
66945: IFTRUE 66957
66947: PUSH
66948: LD_VAR 0 1
66952: PUSH
66953: LD_INT 8
66955: GREATER
66956: OR
66957: IFFALSE 66961
// exit ;
66959: GO 67148
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66961: LD_ADDR_VAR 0 4
66965: PUSH
66966: LD_INT 22
66968: PUSH
66969: LD_VAR 0 1
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 21
66980: PUSH
66981: LD_INT 3
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PPUSH
66992: CALL_OW 69
66996: ST_TO_ADDR
// if not tmp then
66997: LD_VAR 0 4
67001: NOT
67002: IFFALSE 67006
// exit ;
67004: GO 67148
// enable_addtolog := true ;
67006: LD_ADDR_OWVAR 81
67010: PUSH
67011: LD_INT 1
67013: ST_TO_ADDR
// AddToLog ( [ ) ;
67014: LD_STRING [
67016: PPUSH
67017: CALL_OW 561
// for i in tmp do
67021: LD_ADDR_VAR 0 3
67025: PUSH
67026: LD_VAR 0 4
67030: PUSH
67031: FOR_IN
67032: IFFALSE 67139
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67034: LD_STRING [
67036: PUSH
67037: LD_VAR 0 3
67041: PPUSH
67042: CALL_OW 266
67046: STR
67047: PUSH
67048: LD_STRING , 
67050: STR
67051: PUSH
67052: LD_VAR 0 3
67056: PPUSH
67057: CALL_OW 250
67061: STR
67062: PUSH
67063: LD_STRING , 
67065: STR
67066: PUSH
67067: LD_VAR 0 3
67071: PPUSH
67072: CALL_OW 251
67076: STR
67077: PUSH
67078: LD_STRING , 
67080: STR
67081: PUSH
67082: LD_VAR 0 3
67086: PPUSH
67087: CALL_OW 254
67091: STR
67092: PUSH
67093: LD_STRING , 
67095: STR
67096: PUSH
67097: LD_VAR 0 3
67101: PPUSH
67102: LD_INT 1
67104: PPUSH
67105: CALL_OW 268
67109: STR
67110: PUSH
67111: LD_STRING , 
67113: STR
67114: PUSH
67115: LD_VAR 0 3
67119: PPUSH
67120: LD_INT 2
67122: PPUSH
67123: CALL_OW 268
67127: STR
67128: PUSH
67129: LD_STRING ],
67131: STR
67132: PPUSH
67133: CALL_OW 561
// end ;
67137: GO 67031
67139: POP
67140: POP
// AddToLog ( ]; ) ;
67141: LD_STRING ];
67143: PPUSH
67144: CALL_OW 561
// end ;
67148: LD_VAR 0 2
67152: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67153: LD_INT 0
67155: PPUSH
67156: PPUSH
67157: PPUSH
67158: PPUSH
67159: PPUSH
// if not area or not rate or not max then
67160: LD_VAR 0 1
67164: NOT
67165: IFTRUE 67174
67167: PUSH
67168: LD_VAR 0 2
67172: NOT
67173: OR
67174: IFTRUE 67183
67176: PUSH
67177: LD_VAR 0 4
67181: NOT
67182: OR
67183: IFFALSE 67187
// exit ;
67185: GO 67376
// while 1 do
67187: LD_INT 1
67189: IFFALSE 67376
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67191: LD_ADDR_VAR 0 9
67195: PUSH
67196: LD_VAR 0 1
67200: PPUSH
67201: LD_INT 1
67203: PPUSH
67204: CALL_OW 287
67208: PUSH
67209: LD_INT 10
67211: MUL
67212: ST_TO_ADDR
// r := rate / 10 ;
67213: LD_ADDR_VAR 0 7
67217: PUSH
67218: LD_VAR 0 2
67222: PUSH
67223: LD_INT 10
67225: DIVREAL
67226: ST_TO_ADDR
// time := 1 1$00 ;
67227: LD_ADDR_VAR 0 8
67231: PUSH
67232: LD_INT 2100
67234: ST_TO_ADDR
// if amount < min then
67235: LD_VAR 0 9
67239: PUSH
67240: LD_VAR 0 3
67244: LESS
67245: IFFALSE 67263
// r := r * 2 else
67247: LD_ADDR_VAR 0 7
67251: PUSH
67252: LD_VAR 0 7
67256: PUSH
67257: LD_INT 2
67259: MUL
67260: ST_TO_ADDR
67261: GO 67289
// if amount > max then
67263: LD_VAR 0 9
67267: PUSH
67268: LD_VAR 0 4
67272: GREATER
67273: IFFALSE 67289
// r := r / 2 ;
67275: LD_ADDR_VAR 0 7
67279: PUSH
67280: LD_VAR 0 7
67284: PUSH
67285: LD_INT 2
67287: DIVREAL
67288: ST_TO_ADDR
// time := time / r ;
67289: LD_ADDR_VAR 0 8
67293: PUSH
67294: LD_VAR 0 8
67298: PUSH
67299: LD_VAR 0 7
67303: DIVREAL
67304: ST_TO_ADDR
// if time < 0 then
67305: LD_VAR 0 8
67309: PUSH
67310: LD_INT 0
67312: LESS
67313: IFFALSE 67330
// time := time * - 1 ;
67315: LD_ADDR_VAR 0 8
67319: PUSH
67320: LD_VAR 0 8
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: MUL
67329: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67330: LD_VAR 0 8
67334: PUSH
67335: LD_INT 35
67337: PPUSH
67338: LD_INT 875
67340: PPUSH
67341: CALL_OW 12
67345: PLUS
67346: PPUSH
67347: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67351: LD_INT 1
67353: PPUSH
67354: LD_INT 5
67356: PPUSH
67357: CALL_OW 12
67361: PPUSH
67362: LD_VAR 0 1
67366: PPUSH
67367: LD_INT 1
67369: PPUSH
67370: CALL_OW 55
// end ;
67374: GO 67187
// end ;
67376: LD_VAR 0 5
67380: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67381: LD_INT 0
67383: PPUSH
67384: PPUSH
67385: PPUSH
67386: PPUSH
67387: PPUSH
67388: PPUSH
67389: PPUSH
67390: PPUSH
// if not turrets or not factories then
67391: LD_VAR 0 1
67395: NOT
67396: IFTRUE 67405
67398: PUSH
67399: LD_VAR 0 2
67403: NOT
67404: OR
67405: IFFALSE 67409
// exit ;
67407: GO 67716
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67409: LD_ADDR_VAR 0 10
67413: PUSH
67414: LD_INT 5
67416: PUSH
67417: LD_INT 6
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 2
67426: PUSH
67427: LD_INT 4
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: LD_INT 5
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 24
67451: PUSH
67452: LD_INT 25
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 23
67461: PUSH
67462: LD_INT 27
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 42
67475: PUSH
67476: LD_INT 43
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 44
67485: PUSH
67486: LD_INT 46
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 45
67495: PUSH
67496: LD_INT 47
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: LIST
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: ST_TO_ADDR
// result := [ ] ;
67513: LD_ADDR_VAR 0 3
67517: PUSH
67518: EMPTY
67519: ST_TO_ADDR
// for i in turrets do
67520: LD_ADDR_VAR 0 4
67524: PUSH
67525: LD_VAR 0 1
67529: PUSH
67530: FOR_IN
67531: IFFALSE 67714
// begin nat := GetNation ( i ) ;
67533: LD_ADDR_VAR 0 7
67537: PUSH
67538: LD_VAR 0 4
67542: PPUSH
67543: CALL_OW 248
67547: ST_TO_ADDR
// weapon := 0 ;
67548: LD_ADDR_VAR 0 8
67552: PUSH
67553: LD_INT 0
67555: ST_TO_ADDR
// if not nat then
67556: LD_VAR 0 7
67560: NOT
67561: IFFALSE 67565
// continue ;
67563: GO 67530
// for j in list [ nat ] do
67565: LD_ADDR_VAR 0 5
67569: PUSH
67570: LD_VAR 0 10
67574: PUSH
67575: LD_VAR 0 7
67579: ARRAY
67580: PUSH
67581: FOR_IN
67582: IFFALSE 67623
// if GetBWeapon ( i ) = j [ 1 ] then
67584: LD_VAR 0 4
67588: PPUSH
67589: CALL_OW 269
67593: PUSH
67594: LD_VAR 0 5
67598: PUSH
67599: LD_INT 1
67601: ARRAY
67602: EQUAL
67603: IFFALSE 67621
// begin weapon := j [ 2 ] ;
67605: LD_ADDR_VAR 0 8
67609: PUSH
67610: LD_VAR 0 5
67614: PUSH
67615: LD_INT 2
67617: ARRAY
67618: ST_TO_ADDR
// break ;
67619: GO 67623
// end ;
67621: GO 67581
67623: POP
67624: POP
// if not weapon then
67625: LD_VAR 0 8
67629: NOT
67630: IFFALSE 67634
// continue ;
67632: GO 67530
// for k in factories do
67634: LD_ADDR_VAR 0 6
67638: PUSH
67639: LD_VAR 0 2
67643: PUSH
67644: FOR_IN
67645: IFFALSE 67710
// begin weapons := AvailableWeaponList ( k ) ;
67647: LD_ADDR_VAR 0 9
67651: PUSH
67652: LD_VAR 0 6
67656: PPUSH
67657: CALL_OW 478
67661: ST_TO_ADDR
// if not weapons then
67662: LD_VAR 0 9
67666: NOT
67667: IFFALSE 67671
// continue ;
67669: GO 67644
// if weapon in weapons then
67671: LD_VAR 0 8
67675: PUSH
67676: LD_VAR 0 9
67680: IN
67681: IFFALSE 67708
// begin result := [ i , weapon ] ;
67683: LD_ADDR_VAR 0 3
67687: PUSH
67688: LD_VAR 0 4
67692: PUSH
67693: LD_VAR 0 8
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: ST_TO_ADDR
// exit ;
67702: POP
67703: POP
67704: POP
67705: POP
67706: GO 67716
// end ; end ;
67708: GO 67644
67710: POP
67711: POP
// end ;
67712: GO 67530
67714: POP
67715: POP
// end ;
67716: LD_VAR 0 3
67720: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67721: LD_INT 0
67723: PPUSH
// if not side or side > 8 then
67724: LD_VAR 0 3
67728: NOT
67729: IFTRUE 67741
67731: PUSH
67732: LD_VAR 0 3
67736: PUSH
67737: LD_INT 8
67739: GREATER
67740: OR
67741: IFFALSE 67745
// exit ;
67743: GO 67804
// if not range then
67745: LD_VAR 0 4
67749: NOT
67750: IFFALSE 67761
// range := - 12 ;
67752: LD_ADDR_VAR 0 4
67756: PUSH
67757: LD_INT 12
67759: NEG
67760: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67761: LD_VAR 0 1
67765: PPUSH
67766: LD_VAR 0 2
67770: PPUSH
67771: LD_VAR 0 3
67775: PPUSH
67776: LD_VAR 0 4
67780: PPUSH
67781: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67785: LD_VAR 0 1
67789: PPUSH
67790: LD_VAR 0 2
67794: PPUSH
67795: LD_VAR 0 3
67799: PPUSH
67800: CALL_OW 331
// end ;
67804: LD_VAR 0 5
67808: RET
// export function Video ( mode ) ; begin
67809: LD_INT 0
67811: PPUSH
// ingame_video = mode ;
67812: LD_ADDR_OWVAR 52
67816: PUSH
67817: LD_VAR 0 1
67821: ST_TO_ADDR
// interface_hidden = mode ;
67822: LD_ADDR_OWVAR 54
67826: PUSH
67827: LD_VAR 0 1
67831: ST_TO_ADDR
// end ;
67832: LD_VAR 0 2
67836: RET
// export function Join ( array , element ) ; begin
67837: LD_INT 0
67839: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67840: LD_ADDR_VAR 0 3
67844: PUSH
67845: LD_VAR 0 1
67849: PPUSH
67850: LD_VAR 0 1
67854: PUSH
67855: LD_INT 1
67857: PLUS
67858: PPUSH
67859: LD_VAR 0 2
67863: PPUSH
67864: CALL_OW 1
67868: ST_TO_ADDR
// end ;
67869: LD_VAR 0 3
67873: RET
// export function JoinUnion ( array , element ) ; begin
67874: LD_INT 0
67876: PPUSH
// result := array union element ;
67877: LD_ADDR_VAR 0 3
67881: PUSH
67882: LD_VAR 0 1
67886: PUSH
67887: LD_VAR 0 2
67891: UNION
67892: ST_TO_ADDR
// end ;
67893: LD_VAR 0 3
67897: RET
// export function GetBehemoths ( side ) ; begin
67898: LD_INT 0
67900: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67901: LD_ADDR_VAR 0 2
67905: PUSH
67906: LD_INT 22
67908: PUSH
67909: LD_VAR 0 1
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 31
67920: PUSH
67921: LD_INT 25
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PPUSH
67932: CALL_OW 69
67936: ST_TO_ADDR
// end ;
67937: LD_VAR 0 2
67941: RET
// export function Shuffle ( array ) ; var i , index ; begin
67942: LD_INT 0
67944: PPUSH
67945: PPUSH
67946: PPUSH
// result := [ ] ;
67947: LD_ADDR_VAR 0 2
67951: PUSH
67952: EMPTY
67953: ST_TO_ADDR
// if not array then
67954: LD_VAR 0 1
67958: NOT
67959: IFFALSE 67963
// exit ;
67961: GO 68062
// Randomize ;
67963: CALL_OW 10
// for i = array downto 1 do
67967: LD_ADDR_VAR 0 3
67971: PUSH
67972: DOUBLE
67973: LD_VAR 0 1
67977: INC
67978: ST_TO_ADDR
67979: LD_INT 1
67981: PUSH
67982: FOR_DOWNTO
67983: IFFALSE 68060
// begin index := rand ( 1 , array ) ;
67985: LD_ADDR_VAR 0 4
67989: PUSH
67990: LD_INT 1
67992: PPUSH
67993: LD_VAR 0 1
67997: PPUSH
67998: CALL_OW 12
68002: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68003: LD_ADDR_VAR 0 2
68007: PUSH
68008: LD_VAR 0 2
68012: PPUSH
68013: LD_VAR 0 2
68017: PUSH
68018: LD_INT 1
68020: PLUS
68021: PPUSH
68022: LD_VAR 0 1
68026: PUSH
68027: LD_VAR 0 4
68031: ARRAY
68032: PPUSH
68033: CALL_OW 2
68037: ST_TO_ADDR
// array := Delete ( array , index ) ;
68038: LD_ADDR_VAR 0 1
68042: PUSH
68043: LD_VAR 0 1
68047: PPUSH
68048: LD_VAR 0 4
68052: PPUSH
68053: CALL_OW 3
68057: ST_TO_ADDR
// end ;
68058: GO 67982
68060: POP
68061: POP
// end ;
68062: LD_VAR 0 2
68066: RET
// export function GetBaseMaterials ( base ) ; begin
68067: LD_INT 0
68069: PPUSH
// result := [ 0 , 0 , 0 ] ;
68070: LD_ADDR_VAR 0 2
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: LIST
68088: ST_TO_ADDR
// if not base then
68089: LD_VAR 0 1
68093: NOT
68094: IFFALSE 68098
// exit ;
68096: GO 68147
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68098: LD_ADDR_VAR 0 2
68102: PUSH
68103: LD_VAR 0 1
68107: PPUSH
68108: LD_INT 1
68110: PPUSH
68111: CALL_OW 275
68115: PUSH
68116: LD_VAR 0 1
68120: PPUSH
68121: LD_INT 2
68123: PPUSH
68124: CALL_OW 275
68128: PUSH
68129: LD_VAR 0 1
68133: PPUSH
68134: LD_INT 3
68136: PPUSH
68137: CALL_OW 275
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: LIST
68146: ST_TO_ADDR
// end ;
68147: LD_VAR 0 2
68151: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68152: LD_INT 0
68154: PPUSH
68155: PPUSH
// result := array ;
68156: LD_ADDR_VAR 0 3
68160: PUSH
68161: LD_VAR 0 1
68165: ST_TO_ADDR
// if size >= result then
68166: LD_VAR 0 2
68170: PUSH
68171: LD_VAR 0 3
68175: GREATEREQUAL
68176: IFFALSE 68180
// exit ;
68178: GO 68230
// if size then
68180: LD_VAR 0 2
68184: IFFALSE 68230
// for i := array downto size do
68186: LD_ADDR_VAR 0 4
68190: PUSH
68191: DOUBLE
68192: LD_VAR 0 1
68196: INC
68197: ST_TO_ADDR
68198: LD_VAR 0 2
68202: PUSH
68203: FOR_DOWNTO
68204: IFFALSE 68228
// result := Delete ( result , result ) ;
68206: LD_ADDR_VAR 0 3
68210: PUSH
68211: LD_VAR 0 3
68215: PPUSH
68216: LD_VAR 0 3
68220: PPUSH
68221: CALL_OW 3
68225: ST_TO_ADDR
68226: GO 68203
68228: POP
68229: POP
// end ;
68230: LD_VAR 0 3
68234: RET
// export function ComExit ( unit ) ; var tmp ; begin
68235: LD_INT 0
68237: PPUSH
68238: PPUSH
// if not IsInUnit ( unit ) then
68239: LD_VAR 0 1
68243: PPUSH
68244: CALL_OW 310
68248: NOT
68249: IFFALSE 68253
// exit ;
68251: GO 68313
// tmp := IsInUnit ( unit ) ;
68253: LD_ADDR_VAR 0 3
68257: PUSH
68258: LD_VAR 0 1
68262: PPUSH
68263: CALL_OW 310
68267: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68268: LD_VAR 0 3
68272: PPUSH
68273: CALL_OW 247
68277: PUSH
68278: LD_INT 2
68280: EQUAL
68281: IFFALSE 68294
// ComExitVehicle ( unit ) else
68283: LD_VAR 0 1
68287: PPUSH
68288: CALL_OW 121
68292: GO 68303
// ComExitBuilding ( unit ) ;
68294: LD_VAR 0 1
68298: PPUSH
68299: CALL_OW 122
// result := tmp ;
68303: LD_ADDR_VAR 0 2
68307: PUSH
68308: LD_VAR 0 3
68312: ST_TO_ADDR
// end ;
68313: LD_VAR 0 2
68317: RET
// export function ComExitAll ( units ) ; var i ; begin
68318: LD_INT 0
68320: PPUSH
68321: PPUSH
// if not units then
68322: LD_VAR 0 1
68326: NOT
68327: IFFALSE 68331
// exit ;
68329: GO 68357
// for i in units do
68331: LD_ADDR_VAR 0 3
68335: PUSH
68336: LD_VAR 0 1
68340: PUSH
68341: FOR_IN
68342: IFFALSE 68355
// ComExit ( i ) ;
68344: LD_VAR 0 3
68348: PPUSH
68349: CALL 68235 0 1
68353: GO 68341
68355: POP
68356: POP
// end ;
68357: LD_VAR 0 2
68361: RET
// export function ResetHc ; begin
68362: LD_INT 0
68364: PPUSH
// InitHc ;
68365: CALL_OW 19
// hc_importance := 0 ;
68369: LD_ADDR_OWVAR 32
68373: PUSH
68374: LD_INT 0
68376: ST_TO_ADDR
// end ;
68377: LD_VAR 0 1
68381: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68382: LD_INT 0
68384: PPUSH
68385: PPUSH
68386: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68387: LD_ADDR_VAR 0 6
68391: PUSH
68392: LD_VAR 0 1
68396: PUSH
68397: LD_VAR 0 3
68401: PLUS
68402: PUSH
68403: LD_INT 2
68405: DIV
68406: ST_TO_ADDR
// if _x < 0 then
68407: LD_VAR 0 6
68411: PUSH
68412: LD_INT 0
68414: LESS
68415: IFFALSE 68432
// _x := _x * - 1 ;
68417: LD_ADDR_VAR 0 6
68421: PUSH
68422: LD_VAR 0 6
68426: PUSH
68427: LD_INT 1
68429: NEG
68430: MUL
68431: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68432: LD_ADDR_VAR 0 7
68436: PUSH
68437: LD_VAR 0 2
68441: PUSH
68442: LD_VAR 0 4
68446: PLUS
68447: PUSH
68448: LD_INT 2
68450: DIV
68451: ST_TO_ADDR
// if _y < 0 then
68452: LD_VAR 0 7
68456: PUSH
68457: LD_INT 0
68459: LESS
68460: IFFALSE 68477
// _y := _y * - 1 ;
68462: LD_ADDR_VAR 0 7
68466: PUSH
68467: LD_VAR 0 7
68471: PUSH
68472: LD_INT 1
68474: NEG
68475: MUL
68476: ST_TO_ADDR
// result := [ _x , _y ] ;
68477: LD_ADDR_VAR 0 5
68481: PUSH
68482: LD_VAR 0 6
68486: PUSH
68487: LD_VAR 0 7
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: ST_TO_ADDR
// end ;
68496: LD_VAR 0 5
68500: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68501: LD_INT 0
68503: PPUSH
68504: PPUSH
68505: PPUSH
68506: PPUSH
// task := GetTaskList ( unit ) ;
68507: LD_ADDR_VAR 0 7
68511: PUSH
68512: LD_VAR 0 1
68516: PPUSH
68517: CALL_OW 437
68521: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68522: LD_VAR 0 7
68526: NOT
68527: IFFALSE 68546
68529: PUSH
68530: LD_VAR 0 1
68534: PPUSH
68535: LD_VAR 0 2
68539: PPUSH
68540: CALL_OW 308
68544: NOT
68545: AND
68546: IFFALSE 68550
// exit ;
68548: GO 68668
// if IsInArea ( unit , area ) then
68550: LD_VAR 0 1
68554: PPUSH
68555: LD_VAR 0 2
68559: PPUSH
68560: CALL_OW 308
68564: IFFALSE 68582
// begin ComMoveToArea ( unit , goAway ) ;
68566: LD_VAR 0 1
68570: PPUSH
68571: LD_VAR 0 3
68575: PPUSH
68576: CALL_OW 113
// exit ;
68580: GO 68668
// end ; if task [ 1 ] [ 1 ] <> M then
68582: LD_VAR 0 7
68586: PUSH
68587: LD_INT 1
68589: ARRAY
68590: PUSH
68591: LD_INT 1
68593: ARRAY
68594: PUSH
68595: LD_STRING M
68597: NONEQUAL
68598: IFFALSE 68602
// exit ;
68600: GO 68668
// x := task [ 1 ] [ 2 ] ;
68602: LD_ADDR_VAR 0 5
68606: PUSH
68607: LD_VAR 0 7
68611: PUSH
68612: LD_INT 1
68614: ARRAY
68615: PUSH
68616: LD_INT 2
68618: ARRAY
68619: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68620: LD_ADDR_VAR 0 6
68624: PUSH
68625: LD_VAR 0 7
68629: PUSH
68630: LD_INT 1
68632: ARRAY
68633: PUSH
68634: LD_INT 3
68636: ARRAY
68637: ST_TO_ADDR
// if InArea ( x , y , area ) then
68638: LD_VAR 0 5
68642: PPUSH
68643: LD_VAR 0 6
68647: PPUSH
68648: LD_VAR 0 2
68652: PPUSH
68653: CALL_OW 309
68657: IFFALSE 68668
// ComStop ( unit ) ;
68659: LD_VAR 0 1
68663: PPUSH
68664: CALL_OW 141
// end ;
68668: LD_VAR 0 4
68672: RET
// export function Abs ( value ) ; begin
68673: LD_INT 0
68675: PPUSH
// result := value ;
68676: LD_ADDR_VAR 0 2
68680: PUSH
68681: LD_VAR 0 1
68685: ST_TO_ADDR
// if value < 0 then
68686: LD_VAR 0 1
68690: PUSH
68691: LD_INT 0
68693: LESS
68694: IFFALSE 68711
// result := value * - 1 ;
68696: LD_ADDR_VAR 0 2
68700: PUSH
68701: LD_VAR 0 1
68705: PUSH
68706: LD_INT 1
68708: NEG
68709: MUL
68710: ST_TO_ADDR
// end ;
68711: LD_VAR 0 2
68715: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68716: LD_INT 0
68718: PPUSH
68719: PPUSH
68720: PPUSH
68721: PPUSH
68722: PPUSH
68723: PPUSH
68724: PPUSH
68725: PPUSH
// if not unit or not building then
68726: LD_VAR 0 1
68730: NOT
68731: IFTRUE 68740
68733: PUSH
68734: LD_VAR 0 2
68738: NOT
68739: OR
68740: IFFALSE 68744
// exit ;
68742: GO 68972
// x := GetX ( building ) ;
68744: LD_ADDR_VAR 0 4
68748: PUSH
68749: LD_VAR 0 2
68753: PPUSH
68754: CALL_OW 250
68758: ST_TO_ADDR
// y := GetY ( building ) ;
68759: LD_ADDR_VAR 0 6
68763: PUSH
68764: LD_VAR 0 2
68768: PPUSH
68769: CALL_OW 251
68773: ST_TO_ADDR
// d := GetDir ( building ) ;
68774: LD_ADDR_VAR 0 8
68778: PUSH
68779: LD_VAR 0 2
68783: PPUSH
68784: CALL_OW 254
68788: ST_TO_ADDR
// r := 4 ;
68789: LD_ADDR_VAR 0 9
68793: PUSH
68794: LD_INT 4
68796: ST_TO_ADDR
// for i := 1 to 5 do
68797: LD_ADDR_VAR 0 10
68801: PUSH
68802: DOUBLE
68803: LD_INT 1
68805: DEC
68806: ST_TO_ADDR
68807: LD_INT 5
68809: PUSH
68810: FOR_TO
68811: IFFALSE 68970
// begin _x := ShiftX ( x , d , r + i ) ;
68813: LD_ADDR_VAR 0 5
68817: PUSH
68818: LD_VAR 0 4
68822: PPUSH
68823: LD_VAR 0 8
68827: PPUSH
68828: LD_VAR 0 9
68832: PUSH
68833: LD_VAR 0 10
68837: PLUS
68838: PPUSH
68839: CALL_OW 272
68843: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68844: LD_ADDR_VAR 0 7
68848: PUSH
68849: LD_VAR 0 6
68853: PPUSH
68854: LD_VAR 0 8
68858: PPUSH
68859: LD_VAR 0 9
68863: PUSH
68864: LD_VAR 0 10
68868: PLUS
68869: PPUSH
68870: CALL_OW 273
68874: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68875: LD_VAR 0 5
68879: PPUSH
68880: LD_VAR 0 7
68884: PPUSH
68885: CALL_OW 488
68889: IFFALSE 68924
68891: PUSH
68892: LD_VAR 0 5
68896: PPUSH
68897: LD_VAR 0 7
68901: PPUSH
68902: CALL_OW 428
68906: PPUSH
68907: CALL_OW 247
68911: PUSH
68912: LD_INT 3
68914: PUSH
68915: LD_INT 2
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: IN
68922: NOT
68923: AND
68924: IFFALSE 68968
// begin ComMoveXY ( unit , _x , _y ) ;
68926: LD_VAR 0 1
68930: PPUSH
68931: LD_VAR 0 5
68935: PPUSH
68936: LD_VAR 0 7
68940: PPUSH
68941: CALL_OW 111
// result := [ _x , _y ] ;
68945: LD_ADDR_VAR 0 3
68949: PUSH
68950: LD_VAR 0 5
68954: PUSH
68955: LD_VAR 0 7
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: ST_TO_ADDR
// exit ;
68964: POP
68965: POP
68966: GO 68972
// end ; end ;
68968: GO 68810
68970: POP
68971: POP
// end ;
68972: LD_VAR 0 3
68976: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68977: LD_INT 0
68979: PPUSH
68980: PPUSH
68981: PPUSH
// result := 0 ;
68982: LD_ADDR_VAR 0 3
68986: PUSH
68987: LD_INT 0
68989: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68990: LD_VAR 0 1
68994: PUSH
68995: LD_INT 0
68997: LESS
68998: IFTRUE 69010
69000: PUSH
69001: LD_VAR 0 1
69005: PUSH
69006: LD_INT 8
69008: GREATER
69009: OR
69010: IFTRUE 69022
69012: PUSH
69013: LD_VAR 0 2
69017: PUSH
69018: LD_INT 0
69020: LESS
69021: OR
69022: IFTRUE 69034
69024: PUSH
69025: LD_VAR 0 2
69029: PUSH
69030: LD_INT 8
69032: GREATER
69033: OR
69034: IFFALSE 69038
// exit ;
69036: GO 69113
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69038: LD_ADDR_VAR 0 4
69042: PUSH
69043: LD_INT 22
69045: PUSH
69046: LD_VAR 0 2
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PPUSH
69055: CALL_OW 69
69059: PUSH
69060: FOR_IN
69061: IFFALSE 69111
// begin un := UnitShoot ( i ) ;
69063: LD_ADDR_VAR 0 5
69067: PUSH
69068: LD_VAR 0 4
69072: PPUSH
69073: CALL_OW 504
69077: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69078: LD_VAR 0 5
69082: PPUSH
69083: CALL_OW 255
69087: PUSH
69088: LD_VAR 0 1
69092: EQUAL
69093: IFFALSE 69109
// begin result := un ;
69095: LD_ADDR_VAR 0 3
69099: PUSH
69100: LD_VAR 0 5
69104: ST_TO_ADDR
// exit ;
69105: POP
69106: POP
69107: GO 69113
// end ; end ;
69109: GO 69060
69111: POP
69112: POP
// end ;
69113: LD_VAR 0 3
69117: RET
// export function GetCargoBay ( units ) ; begin
69118: LD_INT 0
69120: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69121: LD_ADDR_VAR 0 2
69125: PUSH
69126: LD_VAR 0 1
69130: PPUSH
69131: LD_INT 2
69133: PUSH
69134: LD_INT 34
69136: PUSH
69137: LD_INT 12
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 34
69146: PUSH
69147: LD_INT 51
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 34
69156: PUSH
69157: LD_INT 32
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 34
69166: PUSH
69167: LD_INT 89
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: PPUSH
69181: CALL_OW 72
69185: ST_TO_ADDR
// end ;
69186: LD_VAR 0 2
69190: RET
// export function Negate ( value ) ; begin
69191: LD_INT 0
69193: PPUSH
// result := not value ;
69194: LD_ADDR_VAR 0 2
69198: PUSH
69199: LD_VAR 0 1
69203: NOT
69204: ST_TO_ADDR
// end ;
69205: LD_VAR 0 2
69209: RET
// export function Inc ( value ) ; begin
69210: LD_INT 0
69212: PPUSH
// result := value + 1 ;
69213: LD_ADDR_VAR 0 2
69217: PUSH
69218: LD_VAR 0 1
69222: PUSH
69223: LD_INT 1
69225: PLUS
69226: ST_TO_ADDR
// end ;
69227: LD_VAR 0 2
69231: RET
// export function Dec ( value ) ; begin
69232: LD_INT 0
69234: PPUSH
// result := value - 1 ;
69235: LD_ADDR_VAR 0 2
69239: PUSH
69240: LD_VAR 0 1
69244: PUSH
69245: LD_INT 1
69247: MINUS
69248: ST_TO_ADDR
// end ;
69249: LD_VAR 0 2
69253: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69254: LD_INT 0
69256: PPUSH
69257: PPUSH
69258: PPUSH
69259: PPUSH
69260: PPUSH
69261: PPUSH
69262: PPUSH
69263: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69264: LD_VAR 0 1
69268: PPUSH
69269: LD_VAR 0 2
69273: PPUSH
69274: CALL_OW 488
69278: NOT
69279: IFTRUE 69298
69281: PUSH
69282: LD_VAR 0 3
69286: PPUSH
69287: LD_VAR 0 4
69291: PPUSH
69292: CALL_OW 488
69296: NOT
69297: OR
69298: IFFALSE 69311
// begin result := - 1 ;
69300: LD_ADDR_VAR 0 5
69304: PUSH
69305: LD_INT 1
69307: NEG
69308: ST_TO_ADDR
// exit ;
69309: GO 69546
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69311: LD_ADDR_VAR 0 12
69315: PUSH
69316: LD_VAR 0 1
69320: PPUSH
69321: LD_VAR 0 2
69325: PPUSH
69326: LD_VAR 0 3
69330: PPUSH
69331: LD_VAR 0 4
69335: PPUSH
69336: CALL 68382 0 4
69340: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69341: LD_ADDR_VAR 0 11
69345: PUSH
69346: LD_VAR 0 1
69350: PPUSH
69351: LD_VAR 0 2
69355: PPUSH
69356: LD_VAR 0 12
69360: PUSH
69361: LD_INT 1
69363: ARRAY
69364: PPUSH
69365: LD_VAR 0 12
69369: PUSH
69370: LD_INT 2
69372: ARRAY
69373: PPUSH
69374: CALL_OW 298
69378: ST_TO_ADDR
// distance := 9999 ;
69379: LD_ADDR_VAR 0 10
69383: PUSH
69384: LD_INT 9999
69386: ST_TO_ADDR
// for i := 0 to 5 do
69387: LD_ADDR_VAR 0 6
69391: PUSH
69392: DOUBLE
69393: LD_INT 0
69395: DEC
69396: ST_TO_ADDR
69397: LD_INT 5
69399: PUSH
69400: FOR_TO
69401: IFFALSE 69544
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69403: LD_ADDR_VAR 0 7
69407: PUSH
69408: LD_VAR 0 1
69412: PPUSH
69413: LD_VAR 0 6
69417: PPUSH
69418: LD_VAR 0 11
69422: PPUSH
69423: CALL_OW 272
69427: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69428: LD_ADDR_VAR 0 8
69432: PUSH
69433: LD_VAR 0 2
69437: PPUSH
69438: LD_VAR 0 6
69442: PPUSH
69443: LD_VAR 0 11
69447: PPUSH
69448: CALL_OW 273
69452: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69453: LD_VAR 0 7
69457: PPUSH
69458: LD_VAR 0 8
69462: PPUSH
69463: CALL_OW 488
69467: NOT
69468: IFFALSE 69472
// continue ;
69470: GO 69400
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69472: LD_ADDR_VAR 0 9
69476: PUSH
69477: LD_VAR 0 12
69481: PUSH
69482: LD_INT 1
69484: ARRAY
69485: PPUSH
69486: LD_VAR 0 12
69490: PUSH
69491: LD_INT 2
69493: ARRAY
69494: PPUSH
69495: LD_VAR 0 7
69499: PPUSH
69500: LD_VAR 0 8
69504: PPUSH
69505: CALL_OW 298
69509: ST_TO_ADDR
// if tmp < distance then
69510: LD_VAR 0 9
69514: PUSH
69515: LD_VAR 0 10
69519: LESS
69520: IFFALSE 69542
// begin result := i ;
69522: LD_ADDR_VAR 0 5
69526: PUSH
69527: LD_VAR 0 6
69531: ST_TO_ADDR
// distance := tmp ;
69532: LD_ADDR_VAR 0 10
69536: PUSH
69537: LD_VAR 0 9
69541: ST_TO_ADDR
// end ; end ;
69542: GO 69400
69544: POP
69545: POP
// end ;
69546: LD_VAR 0 5
69550: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69551: LD_INT 0
69553: PPUSH
69554: PPUSH
// if not driver or not IsInUnit ( driver ) then
69555: LD_VAR 0 1
69559: NOT
69560: IFTRUE 69574
69562: PUSH
69563: LD_VAR 0 1
69567: PPUSH
69568: CALL_OW 310
69572: NOT
69573: OR
69574: IFFALSE 69578
// exit ;
69576: GO 69668
// vehicle := IsInUnit ( driver ) ;
69578: LD_ADDR_VAR 0 3
69582: PUSH
69583: LD_VAR 0 1
69587: PPUSH
69588: CALL_OW 310
69592: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69593: LD_VAR 0 1
69597: PPUSH
69598: LD_STRING \
69600: PUSH
69601: LD_INT 0
69603: PUSH
69604: LD_INT 0
69606: PUSH
69607: LD_INT 0
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: LD_INT 0
69615: PUSH
69616: LD_INT 0
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: PUSH
69628: LD_STRING E
69630: PUSH
69631: LD_INT 0
69633: PUSH
69634: LD_INT 0
69636: PUSH
69637: LD_VAR 0 3
69641: PUSH
69642: LD_INT 0
69644: PUSH
69645: LD_INT 0
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PPUSH
69664: CALL_OW 446
// end ;
69668: LD_VAR 0 2
69672: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69673: LD_INT 0
69675: PPUSH
69676: PPUSH
// if not driver or not IsInUnit ( driver ) then
69677: LD_VAR 0 1
69681: NOT
69682: IFTRUE 69696
69684: PUSH
69685: LD_VAR 0 1
69689: PPUSH
69690: CALL_OW 310
69694: NOT
69695: OR
69696: IFFALSE 69700
// exit ;
69698: GO 69790
// vehicle := IsInUnit ( driver ) ;
69700: LD_ADDR_VAR 0 3
69704: PUSH
69705: LD_VAR 0 1
69709: PPUSH
69710: CALL_OW 310
69714: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69715: LD_VAR 0 1
69719: PPUSH
69720: LD_STRING \
69722: PUSH
69723: LD_INT 0
69725: PUSH
69726: LD_INT 0
69728: PUSH
69729: LD_INT 0
69731: PUSH
69732: LD_INT 0
69734: PUSH
69735: LD_INT 0
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: PUSH
69750: LD_STRING E
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: LD_VAR 0 3
69763: PUSH
69764: LD_INT 0
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PPUSH
69786: CALL_OW 447
// end ;
69790: LD_VAR 0 2
69794: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69795: LD_INT 0
69797: PPUSH
69798: PPUSH
69799: PPUSH
// tmp := [ ] ;
69800: LD_ADDR_VAR 0 5
69804: PUSH
69805: EMPTY
69806: ST_TO_ADDR
// for i in units do
69807: LD_ADDR_VAR 0 4
69811: PUSH
69812: LD_VAR 0 1
69816: PUSH
69817: FOR_IN
69818: IFFALSE 69856
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69820: LD_ADDR_VAR 0 5
69824: PUSH
69825: LD_VAR 0 5
69829: PPUSH
69830: LD_VAR 0 5
69834: PUSH
69835: LD_INT 1
69837: PLUS
69838: PPUSH
69839: LD_VAR 0 4
69843: PPUSH
69844: CALL_OW 256
69848: PPUSH
69849: CALL_OW 2
69853: ST_TO_ADDR
69854: GO 69817
69856: POP
69857: POP
// if not tmp then
69858: LD_VAR 0 5
69862: NOT
69863: IFFALSE 69867
// exit ;
69865: GO 69915
// if asc then
69867: LD_VAR 0 2
69871: IFFALSE 69895
// result := SortListByListAsc ( units , tmp ) else
69873: LD_ADDR_VAR 0 3
69877: PUSH
69878: LD_VAR 0 1
69882: PPUSH
69883: LD_VAR 0 5
69887: PPUSH
69888: CALL_OW 76
69892: ST_TO_ADDR
69893: GO 69915
// result := SortListByListDesc ( units , tmp ) ;
69895: LD_ADDR_VAR 0 3
69899: PUSH
69900: LD_VAR 0 1
69904: PPUSH
69905: LD_VAR 0 5
69909: PPUSH
69910: CALL_OW 77
69914: ST_TO_ADDR
// end ;
69915: LD_VAR 0 3
69919: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69920: LD_INT 0
69922: PPUSH
69923: PPUSH
// task := GetTaskList ( mech ) ;
69924: LD_ADDR_VAR 0 4
69928: PUSH
69929: LD_VAR 0 1
69933: PPUSH
69934: CALL_OW 437
69938: ST_TO_ADDR
// if not task then
69939: LD_VAR 0 4
69943: NOT
69944: IFFALSE 69948
// exit ;
69946: GO 69992
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69948: LD_ADDR_VAR 0 3
69952: PUSH
69953: LD_VAR 0 4
69957: PUSH
69958: LD_INT 1
69960: ARRAY
69961: PUSH
69962: LD_INT 1
69964: ARRAY
69965: PUSH
69966: LD_STRING r
69968: EQUAL
69969: IFFALSE 69991
69971: PUSH
69972: LD_VAR 0 4
69976: PUSH
69977: LD_INT 1
69979: ARRAY
69980: PUSH
69981: LD_INT 4
69983: ARRAY
69984: PUSH
69985: LD_VAR 0 2
69989: EQUAL
69990: AND
69991: ST_TO_ADDR
// end ;
69992: LD_VAR 0 3
69996: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69997: LD_INT 0
69999: PPUSH
// SetDir ( unit , d ) ;
70000: LD_VAR 0 1
70004: PPUSH
70005: LD_VAR 0 4
70009: PPUSH
70010: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70014: LD_ADDR_VAR 0 6
70018: PUSH
70019: LD_VAR 0 1
70023: PPUSH
70024: LD_VAR 0 2
70028: PPUSH
70029: LD_VAR 0 3
70033: PPUSH
70034: LD_VAR 0 5
70038: PPUSH
70039: CALL_OW 48
70043: ST_TO_ADDR
// end ;
70044: LD_VAR 0 6
70048: RET
// export function ToNaturalNumber ( number ) ; begin
70049: LD_INT 0
70051: PPUSH
// result := number div 1 ;
70052: LD_ADDR_VAR 0 2
70056: PUSH
70057: LD_VAR 0 1
70061: PUSH
70062: LD_INT 1
70064: DIV
70065: ST_TO_ADDR
// if number < 0 then
70066: LD_VAR 0 1
70070: PUSH
70071: LD_INT 0
70073: LESS
70074: IFFALSE 70084
// result := 0 ;
70076: LD_ADDR_VAR 0 2
70080: PUSH
70081: LD_INT 0
70083: ST_TO_ADDR
// end ;
70084: LD_VAR 0 2
70088: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70089: LD_INT 0
70091: PPUSH
70092: PPUSH
70093: PPUSH
// if not buildings then
70094: LD_VAR 0 1
70098: NOT
70099: IFFALSE 70103
// exit ;
70101: GO 70218
// tmp := [ ] ;
70103: LD_ADDR_VAR 0 5
70107: PUSH
70108: EMPTY
70109: ST_TO_ADDR
// for b in buildings do
70110: LD_ADDR_VAR 0 4
70114: PUSH
70115: LD_VAR 0 1
70119: PUSH
70120: FOR_IN
70121: IFFALSE 70159
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70123: LD_ADDR_VAR 0 5
70127: PUSH
70128: LD_VAR 0 5
70132: PPUSH
70133: LD_VAR 0 5
70137: PUSH
70138: LD_INT 1
70140: PLUS
70141: PPUSH
70142: LD_VAR 0 4
70146: PPUSH
70147: CALL_OW 266
70151: PPUSH
70152: CALL_OW 1
70156: ST_TO_ADDR
70157: GO 70120
70159: POP
70160: POP
// if not tmp then
70161: LD_VAR 0 5
70165: NOT
70166: IFFALSE 70170
// exit ;
70168: GO 70218
// if asc then
70170: LD_VAR 0 2
70174: IFFALSE 70198
// result := SortListByListAsc ( buildings , tmp ) else
70176: LD_ADDR_VAR 0 3
70180: PUSH
70181: LD_VAR 0 1
70185: PPUSH
70186: LD_VAR 0 5
70190: PPUSH
70191: CALL_OW 76
70195: ST_TO_ADDR
70196: GO 70218
// result := SortListByListDesc ( buildings , tmp ) ;
70198: LD_ADDR_VAR 0 3
70202: PUSH
70203: LD_VAR 0 1
70207: PPUSH
70208: LD_VAR 0 5
70212: PPUSH
70213: CALL_OW 77
70217: ST_TO_ADDR
// end ;
70218: LD_VAR 0 3
70222: RET
// export function SortByClass ( units , class ) ; var un ; begin
70223: LD_INT 0
70225: PPUSH
70226: PPUSH
// if not units or not class then
70227: LD_VAR 0 1
70231: NOT
70232: IFTRUE 70241
70234: PUSH
70235: LD_VAR 0 2
70239: NOT
70240: OR
70241: IFFALSE 70245
// exit ;
70243: GO 70340
// result := [ ] ;
70245: LD_ADDR_VAR 0 3
70249: PUSH
70250: EMPTY
70251: ST_TO_ADDR
// for un in units do
70252: LD_ADDR_VAR 0 4
70256: PUSH
70257: LD_VAR 0 1
70261: PUSH
70262: FOR_IN
70263: IFFALSE 70338
// if GetClass ( un ) = class then
70265: LD_VAR 0 4
70269: PPUSH
70270: CALL_OW 257
70274: PUSH
70275: LD_VAR 0 2
70279: EQUAL
70280: IFFALSE 70307
// result := Insert ( result , 1 , un ) else
70282: LD_ADDR_VAR 0 3
70286: PUSH
70287: LD_VAR 0 3
70291: PPUSH
70292: LD_INT 1
70294: PPUSH
70295: LD_VAR 0 4
70299: PPUSH
70300: CALL_OW 2
70304: ST_TO_ADDR
70305: GO 70336
// result := Replace ( result , result + 1 , un ) ;
70307: LD_ADDR_VAR 0 3
70311: PUSH
70312: LD_VAR 0 3
70316: PPUSH
70317: LD_VAR 0 3
70321: PUSH
70322: LD_INT 1
70324: PLUS
70325: PPUSH
70326: LD_VAR 0 4
70330: PPUSH
70331: CALL_OW 1
70335: ST_TO_ADDR
70336: GO 70262
70338: POP
70339: POP
// end ;
70340: LD_VAR 0 3
70344: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70345: LD_INT 0
70347: PPUSH
70348: PPUSH
70349: PPUSH
70350: PPUSH
70351: PPUSH
70352: PPUSH
70353: PPUSH
// result := [ ] ;
70354: LD_ADDR_VAR 0 4
70358: PUSH
70359: EMPTY
70360: ST_TO_ADDR
// if x - r < 0 then
70361: LD_VAR 0 1
70365: PUSH
70366: LD_VAR 0 3
70370: MINUS
70371: PUSH
70372: LD_INT 0
70374: LESS
70375: IFFALSE 70387
// min_x := 0 else
70377: LD_ADDR_VAR 0 8
70381: PUSH
70382: LD_INT 0
70384: ST_TO_ADDR
70385: GO 70403
// min_x := x - r ;
70387: LD_ADDR_VAR 0 8
70391: PUSH
70392: LD_VAR 0 1
70396: PUSH
70397: LD_VAR 0 3
70401: MINUS
70402: ST_TO_ADDR
// if y - r < 0 then
70403: LD_VAR 0 2
70407: PUSH
70408: LD_VAR 0 3
70412: MINUS
70413: PUSH
70414: LD_INT 0
70416: LESS
70417: IFFALSE 70429
// min_y := 0 else
70419: LD_ADDR_VAR 0 7
70423: PUSH
70424: LD_INT 0
70426: ST_TO_ADDR
70427: GO 70445
// min_y := y - r ;
70429: LD_ADDR_VAR 0 7
70433: PUSH
70434: LD_VAR 0 2
70438: PUSH
70439: LD_VAR 0 3
70443: MINUS
70444: ST_TO_ADDR
// max_x := x + r ;
70445: LD_ADDR_VAR 0 9
70449: PUSH
70450: LD_VAR 0 1
70454: PUSH
70455: LD_VAR 0 3
70459: PLUS
70460: ST_TO_ADDR
// max_y := y + r ;
70461: LD_ADDR_VAR 0 10
70465: PUSH
70466: LD_VAR 0 2
70470: PUSH
70471: LD_VAR 0 3
70475: PLUS
70476: ST_TO_ADDR
// for _x = min_x to max_x do
70477: LD_ADDR_VAR 0 5
70481: PUSH
70482: DOUBLE
70483: LD_VAR 0 8
70487: DEC
70488: ST_TO_ADDR
70489: LD_VAR 0 9
70493: PUSH
70494: FOR_TO
70495: IFFALSE 70596
// for _y = min_y to max_y do
70497: LD_ADDR_VAR 0 6
70501: PUSH
70502: DOUBLE
70503: LD_VAR 0 7
70507: DEC
70508: ST_TO_ADDR
70509: LD_VAR 0 10
70513: PUSH
70514: FOR_TO
70515: IFFALSE 70592
// begin if not ValidHex ( _x , _y ) then
70517: LD_VAR 0 5
70521: PPUSH
70522: LD_VAR 0 6
70526: PPUSH
70527: CALL_OW 488
70531: NOT
70532: IFFALSE 70536
// continue ;
70534: GO 70514
// if GetResourceTypeXY ( _x , _y ) then
70536: LD_VAR 0 5
70540: PPUSH
70541: LD_VAR 0 6
70545: PPUSH
70546: CALL_OW 283
70550: IFFALSE 70590
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70552: LD_ADDR_VAR 0 4
70556: PUSH
70557: LD_VAR 0 4
70561: PPUSH
70562: LD_VAR 0 4
70566: PUSH
70567: LD_INT 1
70569: PLUS
70570: PPUSH
70571: LD_VAR 0 5
70575: PUSH
70576: LD_VAR 0 6
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PPUSH
70585: CALL_OW 1
70589: ST_TO_ADDR
// end ;
70590: GO 70514
70592: POP
70593: POP
70594: GO 70494
70596: POP
70597: POP
// end ;
70598: LD_VAR 0 4
70602: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70603: LD_INT 0
70605: PPUSH
70606: PPUSH
70607: PPUSH
70608: PPUSH
70609: PPUSH
70610: PPUSH
70611: PPUSH
70612: PPUSH
// if not units then
70613: LD_VAR 0 1
70617: NOT
70618: IFFALSE 70622
// exit ;
70620: GO 71154
// result := UnitFilter ( units , [ f_ok ] ) ;
70622: LD_ADDR_VAR 0 3
70626: PUSH
70627: LD_VAR 0 1
70631: PPUSH
70632: LD_INT 50
70634: PUSH
70635: EMPTY
70636: LIST
70637: PPUSH
70638: CALL_OW 72
70642: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70643: LD_ADDR_VAR 0 8
70647: PUSH
70648: LD_VAR 0 1
70652: PUSH
70653: LD_INT 1
70655: ARRAY
70656: PPUSH
70657: CALL_OW 255
70661: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70662: LD_ADDR_VAR 0 10
70666: PUSH
70667: LD_INT 29
70669: PUSH
70670: LD_INT 91
70672: PUSH
70673: LD_INT 49
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: LIST
70680: ST_TO_ADDR
// if not result then
70681: LD_VAR 0 3
70685: NOT
70686: IFFALSE 70690
// exit ;
70688: GO 71154
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70690: LD_ADDR_VAR 0 5
70694: PUSH
70695: LD_INT 81
70697: PUSH
70698: LD_VAR 0 8
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PPUSH
70707: CALL_OW 69
70711: ST_TO_ADDR
// for i in result do
70712: LD_ADDR_VAR 0 4
70716: PUSH
70717: LD_VAR 0 3
70721: PUSH
70722: FOR_IN
70723: IFFALSE 71152
// begin tag := GetTag ( i ) + 1 ;
70725: LD_ADDR_VAR 0 9
70729: PUSH
70730: LD_VAR 0 4
70734: PPUSH
70735: CALL_OW 110
70739: PUSH
70740: LD_INT 1
70742: PLUS
70743: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
70744: LD_ADDR_VAR 0 7
70748: PUSH
70749: LD_VAR 0 4
70753: PPUSH
70754: CALL_OW 250
70758: PPUSH
70759: LD_VAR 0 4
70763: PPUSH
70764: CALL_OW 251
70768: PPUSH
70769: LD_INT 4
70771: PPUSH
70772: CALL 70345 0 3
70776: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
70777: LD_VAR 0 4
70781: PPUSH
70782: CALL_OW 247
70786: PUSH
70787: LD_INT 2
70789: EQUAL
70790: IFFALSE 70802
70792: PUSH
70793: LD_VAR 0 7
70797: PUSH
70798: LD_INT 2
70800: GREATER
70801: AND
70802: IFFALSE 70822
70804: PUSH
70805: LD_VAR 0 4
70809: PPUSH
70810: CALL_OW 264
70814: PUSH
70815: LD_VAR 0 10
70819: IN
70820: NOT
70821: AND
70822: IFFALSE 70861
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70824: LD_VAR 0 4
70828: PPUSH
70829: LD_VAR 0 7
70833: PUSH
70834: LD_INT 1
70836: ARRAY
70837: PUSH
70838: LD_INT 1
70840: ARRAY
70841: PPUSH
70842: LD_VAR 0 7
70846: PUSH
70847: LD_INT 1
70849: ARRAY
70850: PUSH
70851: LD_INT 2
70853: ARRAY
70854: PPUSH
70855: CALL_OW 116
70859: GO 71150
// if path > tag then
70861: LD_VAR 0 2
70865: PUSH
70866: LD_VAR 0 9
70870: GREATER
70871: IFFALSE 71079
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70873: LD_ADDR_VAR 0 6
70877: PUSH
70878: LD_VAR 0 5
70882: PPUSH
70883: LD_INT 91
70885: PUSH
70886: LD_VAR 0 4
70890: PUSH
70891: LD_INT 8
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: LIST
70898: PPUSH
70899: CALL_OW 72
70903: ST_TO_ADDR
// if nearEnemy then
70904: LD_VAR 0 6
70908: IFFALSE 70977
// begin if GetWeapon ( i ) = ru_time_lapser then
70910: LD_VAR 0 4
70914: PPUSH
70915: CALL_OW 264
70919: PUSH
70920: LD_INT 49
70922: EQUAL
70923: IFFALSE 70951
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70925: LD_VAR 0 4
70929: PPUSH
70930: LD_VAR 0 6
70934: PPUSH
70935: LD_VAR 0 4
70939: PPUSH
70940: CALL_OW 74
70944: PPUSH
70945: CALL_OW 112
70949: GO 70975
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70951: LD_VAR 0 4
70955: PPUSH
70956: LD_VAR 0 6
70960: PPUSH
70961: LD_VAR 0 4
70965: PPUSH
70966: CALL_OW 74
70970: PPUSH
70971: CALL 72235 0 2
// end else
70975: GO 71077
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70977: LD_VAR 0 4
70981: PPUSH
70982: LD_VAR 0 2
70986: PUSH
70987: LD_VAR 0 9
70991: ARRAY
70992: PUSH
70993: LD_INT 1
70995: ARRAY
70996: PPUSH
70997: LD_VAR 0 2
71001: PUSH
71002: LD_VAR 0 9
71006: ARRAY
71007: PUSH
71008: LD_INT 2
71010: ARRAY
71011: PPUSH
71012: CALL_OW 297
71016: PUSH
71017: LD_INT 6
71019: GREATER
71020: IFFALSE 71063
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71022: LD_VAR 0 4
71026: PPUSH
71027: LD_VAR 0 2
71031: PUSH
71032: LD_VAR 0 9
71036: ARRAY
71037: PUSH
71038: LD_INT 1
71040: ARRAY
71041: PPUSH
71042: LD_VAR 0 2
71046: PUSH
71047: LD_VAR 0 9
71051: ARRAY
71052: PUSH
71053: LD_INT 2
71055: ARRAY
71056: PPUSH
71057: CALL_OW 114
71061: GO 71077
// SetTag ( i , tag ) ;
71063: LD_VAR 0 4
71067: PPUSH
71068: LD_VAR 0 9
71072: PPUSH
71073: CALL_OW 109
// end else
71077: GO 71150
// if enemy then
71079: LD_VAR 0 5
71083: IFFALSE 71150
// begin if GetWeapon ( i ) = ru_time_lapser then
71085: LD_VAR 0 4
71089: PPUSH
71090: CALL_OW 264
71094: PUSH
71095: LD_INT 49
71097: EQUAL
71098: IFFALSE 71126
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71100: LD_VAR 0 4
71104: PPUSH
71105: LD_VAR 0 5
71109: PPUSH
71110: LD_VAR 0 4
71114: PPUSH
71115: CALL_OW 74
71119: PPUSH
71120: CALL_OW 112
71124: GO 71150
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71126: LD_VAR 0 4
71130: PPUSH
71131: LD_VAR 0 5
71135: PPUSH
71136: LD_VAR 0 4
71140: PPUSH
71141: CALL_OW 74
71145: PPUSH
71146: CALL 72235 0 2
// end ; end ;
71150: GO 70722
71152: POP
71153: POP
// end ;
71154: LD_VAR 0 3
71158: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71159: LD_INT 0
71161: PPUSH
71162: PPUSH
71163: PPUSH
// if not unit or IsInUnit ( unit ) then
71164: LD_VAR 0 1
71168: NOT
71169: IFTRUE 71182
71171: PUSH
71172: LD_VAR 0 1
71176: PPUSH
71177: CALL_OW 310
71181: OR
71182: IFFALSE 71186
// exit ;
71184: GO 71277
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71186: LD_ADDR_VAR 0 4
71190: PUSH
71191: LD_VAR 0 1
71195: PPUSH
71196: CALL_OW 250
71200: PPUSH
71201: LD_VAR 0 2
71205: PPUSH
71206: LD_INT 1
71208: PPUSH
71209: CALL_OW 272
71213: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71214: LD_ADDR_VAR 0 5
71218: PUSH
71219: LD_VAR 0 1
71223: PPUSH
71224: CALL_OW 251
71228: PPUSH
71229: LD_VAR 0 2
71233: PPUSH
71234: LD_INT 1
71236: PPUSH
71237: CALL_OW 273
71241: ST_TO_ADDR
// if ValidHex ( x , y ) then
71242: LD_VAR 0 4
71246: PPUSH
71247: LD_VAR 0 5
71251: PPUSH
71252: CALL_OW 488
71256: IFFALSE 71277
// ComTurnXY ( unit , x , y ) ;
71258: LD_VAR 0 1
71262: PPUSH
71263: LD_VAR 0 4
71267: PPUSH
71268: LD_VAR 0 5
71272: PPUSH
71273: CALL_OW 118
// end ;
71277: LD_VAR 0 3
71281: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71282: LD_INT 0
71284: PPUSH
71285: PPUSH
// result := false ;
71286: LD_ADDR_VAR 0 3
71290: PUSH
71291: LD_INT 0
71293: ST_TO_ADDR
// if not units then
71294: LD_VAR 0 2
71298: NOT
71299: IFFALSE 71303
// exit ;
71301: GO 71348
// for i in units do
71303: LD_ADDR_VAR 0 4
71307: PUSH
71308: LD_VAR 0 2
71312: PUSH
71313: FOR_IN
71314: IFFALSE 71346
// if See ( side , i ) then
71316: LD_VAR 0 1
71320: PPUSH
71321: LD_VAR 0 4
71325: PPUSH
71326: CALL_OW 292
71330: IFFALSE 71344
// begin result := true ;
71332: LD_ADDR_VAR 0 3
71336: PUSH
71337: LD_INT 1
71339: ST_TO_ADDR
// exit ;
71340: POP
71341: POP
71342: GO 71348
// end ;
71344: GO 71313
71346: POP
71347: POP
// end ;
71348: LD_VAR 0 3
71352: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71353: LD_INT 0
71355: PPUSH
71356: PPUSH
71357: PPUSH
71358: PPUSH
// if not unit or not points then
71359: LD_VAR 0 1
71363: NOT
71364: IFTRUE 71373
71366: PUSH
71367: LD_VAR 0 2
71371: NOT
71372: OR
71373: IFFALSE 71377
// exit ;
71375: GO 71467
// dist := 99999 ;
71377: LD_ADDR_VAR 0 5
71381: PUSH
71382: LD_INT 99999
71384: ST_TO_ADDR
// for i in points do
71385: LD_ADDR_VAR 0 4
71389: PUSH
71390: LD_VAR 0 2
71394: PUSH
71395: FOR_IN
71396: IFFALSE 71465
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71398: LD_ADDR_VAR 0 6
71402: PUSH
71403: LD_VAR 0 1
71407: PPUSH
71408: LD_VAR 0 4
71412: PUSH
71413: LD_INT 1
71415: ARRAY
71416: PPUSH
71417: LD_VAR 0 4
71421: PUSH
71422: LD_INT 2
71424: ARRAY
71425: PPUSH
71426: CALL_OW 297
71430: ST_TO_ADDR
// if tmpDist < dist then
71431: LD_VAR 0 6
71435: PUSH
71436: LD_VAR 0 5
71440: LESS
71441: IFFALSE 71463
// begin result := i ;
71443: LD_ADDR_VAR 0 3
71447: PUSH
71448: LD_VAR 0 4
71452: ST_TO_ADDR
// dist := tmpDist ;
71453: LD_ADDR_VAR 0 5
71457: PUSH
71458: LD_VAR 0 6
71462: ST_TO_ADDR
// end ; end ;
71463: GO 71395
71465: POP
71466: POP
// end ;
71467: LD_VAR 0 3
71471: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71472: LD_INT 0
71474: PPUSH
// uc_side := side ;
71475: LD_ADDR_OWVAR 20
71479: PUSH
71480: LD_VAR 0 1
71484: ST_TO_ADDR
// uc_nation := 3 ;
71485: LD_ADDR_OWVAR 21
71489: PUSH
71490: LD_INT 3
71492: ST_TO_ADDR
// vc_chassis := 25 ;
71493: LD_ADDR_OWVAR 37
71497: PUSH
71498: LD_INT 25
71500: ST_TO_ADDR
// vc_engine := engine_siberite ;
71501: LD_ADDR_OWVAR 39
71505: PUSH
71506: LD_INT 3
71508: ST_TO_ADDR
// vc_control := control_computer ;
71509: LD_ADDR_OWVAR 38
71513: PUSH
71514: LD_INT 3
71516: ST_TO_ADDR
// vc_weapon := 59 ;
71517: LD_ADDR_OWVAR 40
71521: PUSH
71522: LD_INT 59
71524: ST_TO_ADDR
// result := CreateVehicle ;
71525: LD_ADDR_VAR 0 5
71529: PUSH
71530: CALL_OW 45
71534: ST_TO_ADDR
// SetDir ( result , d ) ;
71535: LD_VAR 0 5
71539: PPUSH
71540: LD_VAR 0 4
71544: PPUSH
71545: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71549: LD_VAR 0 5
71553: PPUSH
71554: LD_VAR 0 2
71558: PPUSH
71559: LD_VAR 0 3
71563: PPUSH
71564: LD_INT 0
71566: PPUSH
71567: CALL_OW 48
// end ;
71571: LD_VAR 0 5
71575: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71576: LD_INT 0
71578: PPUSH
71579: PPUSH
71580: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71581: LD_ADDR_VAR 0 2
71585: PUSH
71586: LD_INT 0
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: LD_INT 0
71594: PUSH
71595: LD_INT 0
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71604: LD_VAR 0 1
71608: NOT
71609: IFTRUE 71642
71611: PUSH
71612: LD_VAR 0 1
71616: PPUSH
71617: CALL_OW 264
71621: PUSH
71622: LD_INT 12
71624: PUSH
71625: LD_INT 51
71627: PUSH
71628: LD_INT 32
71630: PUSH
71631: LD_INT 89
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: IN
71640: NOT
71641: OR
71642: IFFALSE 71646
// exit ;
71644: GO 71744
// for i := 1 to 3 do
71646: LD_ADDR_VAR 0 3
71650: PUSH
71651: DOUBLE
71652: LD_INT 1
71654: DEC
71655: ST_TO_ADDR
71656: LD_INT 3
71658: PUSH
71659: FOR_TO
71660: IFFALSE 71742
// begin tmp := GetCargo ( cargo , i ) ;
71662: LD_ADDR_VAR 0 4
71666: PUSH
71667: LD_VAR 0 1
71671: PPUSH
71672: LD_VAR 0 3
71676: PPUSH
71677: CALL_OW 289
71681: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71682: LD_ADDR_VAR 0 2
71686: PUSH
71687: LD_VAR 0 2
71691: PPUSH
71692: LD_VAR 0 3
71696: PPUSH
71697: LD_VAR 0 4
71701: PPUSH
71702: CALL_OW 1
71706: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71707: LD_ADDR_VAR 0 2
71711: PUSH
71712: LD_VAR 0 2
71716: PPUSH
71717: LD_INT 4
71719: PPUSH
71720: LD_VAR 0 2
71724: PUSH
71725: LD_INT 4
71727: ARRAY
71728: PUSH
71729: LD_VAR 0 4
71733: PLUS
71734: PPUSH
71735: CALL_OW 1
71739: ST_TO_ADDR
// end ;
71740: GO 71659
71742: POP
71743: POP
// end ;
71744: LD_VAR 0 2
71748: RET
// export function Length ( array ) ; begin
71749: LD_INT 0
71751: PPUSH
// result := array + 0 ;
71752: LD_ADDR_VAR 0 2
71756: PUSH
71757: LD_VAR 0 1
71761: PUSH
71762: LD_INT 0
71764: PLUS
71765: ST_TO_ADDR
// end ;
71766: LD_VAR 0 2
71770: RET
// export function PrepareArray ( array ) ; begin
71771: LD_INT 0
71773: PPUSH
// result := array diff 0 ;
71774: LD_ADDR_VAR 0 2
71778: PUSH
71779: LD_VAR 0 1
71783: PUSH
71784: LD_INT 0
71786: DIFF
71787: ST_TO_ADDR
// if not result [ 1 ] then
71788: LD_VAR 0 2
71792: PUSH
71793: LD_INT 1
71795: ARRAY
71796: NOT
71797: IFFALSE 71817
// result := Delete ( result , 1 ) ;
71799: LD_ADDR_VAR 0 2
71803: PUSH
71804: LD_VAR 0 2
71808: PPUSH
71809: LD_INT 1
71811: PPUSH
71812: CALL_OW 3
71816: ST_TO_ADDR
// end ;
71817: LD_VAR 0 2
71821: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71822: LD_INT 0
71824: PPUSH
71825: PPUSH
71826: PPUSH
71827: PPUSH
// sibRocketRange := 25 ;
71828: LD_ADDR_VAR 0 6
71832: PUSH
71833: LD_INT 25
71835: ST_TO_ADDR
// result := false ;
71836: LD_ADDR_VAR 0 4
71840: PUSH
71841: LD_INT 0
71843: ST_TO_ADDR
// for i := 0 to 5 do
71844: LD_ADDR_VAR 0 5
71848: PUSH
71849: DOUBLE
71850: LD_INT 0
71852: DEC
71853: ST_TO_ADDR
71854: LD_INT 5
71856: PUSH
71857: FOR_TO
71858: IFFALSE 71925
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71860: LD_VAR 0 1
71864: PPUSH
71865: LD_VAR 0 5
71869: PPUSH
71870: LD_VAR 0 6
71874: PPUSH
71875: CALL_OW 272
71879: PPUSH
71880: LD_VAR 0 2
71884: PPUSH
71885: LD_VAR 0 5
71889: PPUSH
71890: LD_VAR 0 6
71894: PPUSH
71895: CALL_OW 273
71899: PPUSH
71900: LD_VAR 0 3
71904: PPUSH
71905: CALL_OW 309
71909: IFFALSE 71923
// begin result := true ;
71911: LD_ADDR_VAR 0 4
71915: PUSH
71916: LD_INT 1
71918: ST_TO_ADDR
// exit ;
71919: POP
71920: POP
71921: GO 71927
// end ;
71923: GO 71857
71925: POP
71926: POP
// end ;
71927: LD_VAR 0 4
71931: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71932: LD_INT 0
71934: PPUSH
71935: PPUSH
71936: PPUSH
// if btype = b_depot then
71937: LD_VAR 0 2
71941: PUSH
71942: LD_INT 0
71944: EQUAL
71945: IFFALSE 71957
// begin result := true ;
71947: LD_ADDR_VAR 0 3
71951: PUSH
71952: LD_INT 1
71954: ST_TO_ADDR
// exit ;
71955: GO 72077
// end ; pom := GetBase ( depot ) ;
71957: LD_ADDR_VAR 0 4
71961: PUSH
71962: LD_VAR 0 1
71966: PPUSH
71967: CALL_OW 274
71971: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71972: LD_ADDR_VAR 0 5
71976: PUSH
71977: LD_VAR 0 2
71981: PPUSH
71982: LD_VAR 0 1
71986: PPUSH
71987: CALL_OW 248
71991: PPUSH
71992: CALL_OW 450
71996: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71997: LD_ADDR_VAR 0 3
72001: PUSH
72002: LD_VAR 0 4
72006: PPUSH
72007: LD_INT 1
72009: PPUSH
72010: CALL_OW 275
72014: PUSH
72015: LD_VAR 0 5
72019: PUSH
72020: LD_INT 1
72022: ARRAY
72023: GREATEREQUAL
72024: IFFALSE 72050
72026: PUSH
72027: LD_VAR 0 4
72031: PPUSH
72032: LD_INT 2
72034: PPUSH
72035: CALL_OW 275
72039: PUSH
72040: LD_VAR 0 5
72044: PUSH
72045: LD_INT 2
72047: ARRAY
72048: GREATEREQUAL
72049: AND
72050: IFFALSE 72076
72052: PUSH
72053: LD_VAR 0 4
72057: PPUSH
72058: LD_INT 3
72060: PPUSH
72061: CALL_OW 275
72065: PUSH
72066: LD_VAR 0 5
72070: PUSH
72071: LD_INT 3
72073: ARRAY
72074: GREATEREQUAL
72075: AND
72076: ST_TO_ADDR
// end ;
72077: LD_VAR 0 3
72081: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72082: LD_INT 0
72084: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72085: LD_VAR 0 1
72089: PPUSH
72090: LD_VAR 0 2
72094: PPUSH
72095: LD_INT 0
72097: PPUSH
72098: LD_INT 0
72100: PPUSH
72101: LD_INT 1
72103: PPUSH
72104: LD_INT 0
72106: PPUSH
72107: CALL_OW 587
// end ;
72111: LD_VAR 0 3
72115: RET
// export function CenterOnNow ( unit ) ; begin
72116: LD_INT 0
72118: PPUSH
// result := IsInUnit ( unit ) ;
72119: LD_ADDR_VAR 0 2
72123: PUSH
72124: LD_VAR 0 1
72128: PPUSH
72129: CALL_OW 310
72133: ST_TO_ADDR
// if not result then
72134: LD_VAR 0 2
72138: NOT
72139: IFFALSE 72151
// result := unit ;
72141: LD_ADDR_VAR 0 2
72145: PUSH
72146: LD_VAR 0 1
72150: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72151: LD_VAR 0 1
72155: PPUSH
72156: CALL_OW 87
// end ;
72160: LD_VAR 0 2
72164: RET
// export function ComMoveHex ( unit , hex ) ; begin
72165: LD_INT 0
72167: PPUSH
// if not hex then
72168: LD_VAR 0 2
72172: NOT
72173: IFFALSE 72177
// exit ;
72175: GO 72230
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72177: LD_VAR 0 2
72181: PUSH
72182: LD_INT 1
72184: ARRAY
72185: PPUSH
72186: LD_VAR 0 2
72190: PUSH
72191: LD_INT 2
72193: ARRAY
72194: PPUSH
72195: CALL_OW 428
72199: IFFALSE 72203
// exit ;
72201: GO 72230
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72203: LD_VAR 0 1
72207: PPUSH
72208: LD_VAR 0 2
72212: PUSH
72213: LD_INT 1
72215: ARRAY
72216: PPUSH
72217: LD_VAR 0 2
72221: PUSH
72222: LD_INT 2
72224: ARRAY
72225: PPUSH
72226: CALL_OW 111
// end ;
72230: LD_VAR 0 3
72234: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72235: LD_INT 0
72237: PPUSH
72238: PPUSH
72239: PPUSH
// if not unit or not enemy then
72240: LD_VAR 0 1
72244: NOT
72245: IFTRUE 72254
72247: PUSH
72248: LD_VAR 0 2
72252: NOT
72253: OR
72254: IFFALSE 72258
// exit ;
72256: GO 72384
// x := GetX ( enemy ) ;
72258: LD_ADDR_VAR 0 4
72262: PUSH
72263: LD_VAR 0 2
72267: PPUSH
72268: CALL_OW 250
72272: ST_TO_ADDR
// y := GetY ( enemy ) ;
72273: LD_ADDR_VAR 0 5
72277: PUSH
72278: LD_VAR 0 2
72282: PPUSH
72283: CALL_OW 251
72287: ST_TO_ADDR
// if ValidHex ( x , y ) then
72288: LD_VAR 0 4
72292: PPUSH
72293: LD_VAR 0 5
72297: PPUSH
72298: CALL_OW 488
72302: IFFALSE 72384
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72304: LD_VAR 0 2
72308: PPUSH
72309: CALL_OW 247
72313: PUSH
72314: LD_INT 3
72316: PUSH
72317: LD_INT 2
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: IN
72324: IFTRUE 72347
72326: PUSH
72327: LD_VAR 0 1
72331: PPUSH
72332: CALL_OW 255
72336: PPUSH
72337: LD_VAR 0 2
72341: PPUSH
72342: CALL_OW 292
72346: OR
72347: IFFALSE 72365
// ComAttackUnit ( unit , enemy ) else
72349: LD_VAR 0 1
72353: PPUSH
72354: LD_VAR 0 2
72358: PPUSH
72359: CALL_OW 115
72363: GO 72384
// ComAgressiveMove ( unit , x , y ) ;
72365: LD_VAR 0 1
72369: PPUSH
72370: LD_VAR 0 4
72374: PPUSH
72375: LD_VAR 0 5
72379: PPUSH
72380: CALL_OW 114
// end ;
72384: LD_VAR 0 3
72388: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72389: LD_INT 0
72391: PPUSH
72392: PPUSH
72393: PPUSH
// list := AreaToList ( area , 0 ) ;
72394: LD_ADDR_VAR 0 5
72398: PUSH
72399: LD_VAR 0 1
72403: PPUSH
72404: LD_INT 0
72406: PPUSH
72407: CALL_OW 517
72411: ST_TO_ADDR
// if not list then
72412: LD_VAR 0 5
72416: NOT
72417: IFFALSE 72421
// exit ;
72419: GO 72551
// if all then
72421: LD_VAR 0 2
72425: IFFALSE 72513
// begin for i := 1 to list [ 1 ] do
72427: LD_ADDR_VAR 0 4
72431: PUSH
72432: DOUBLE
72433: LD_INT 1
72435: DEC
72436: ST_TO_ADDR
72437: LD_VAR 0 5
72441: PUSH
72442: LD_INT 1
72444: ARRAY
72445: PUSH
72446: FOR_TO
72447: IFFALSE 72509
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72449: LD_ADDR_VAR 0 3
72453: PUSH
72454: LD_VAR 0 3
72458: PPUSH
72459: LD_VAR 0 3
72463: PUSH
72464: LD_INT 1
72466: PLUS
72467: PPUSH
72468: LD_VAR 0 5
72472: PUSH
72473: LD_INT 1
72475: ARRAY
72476: PUSH
72477: LD_VAR 0 4
72481: ARRAY
72482: PUSH
72483: LD_VAR 0 5
72487: PUSH
72488: LD_INT 2
72490: ARRAY
72491: PUSH
72492: LD_VAR 0 4
72496: ARRAY
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PPUSH
72502: CALL_OW 1
72506: ST_TO_ADDR
72507: GO 72446
72509: POP
72510: POP
// exit ;
72511: GO 72551
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72513: LD_ADDR_VAR 0 3
72517: PUSH
72518: LD_VAR 0 5
72522: PUSH
72523: LD_INT 1
72525: ARRAY
72526: PUSH
72527: LD_INT 1
72529: ARRAY
72530: PUSH
72531: LD_VAR 0 5
72535: PUSH
72536: LD_INT 2
72538: ARRAY
72539: PUSH
72540: LD_INT 1
72542: ARRAY
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: EMPTY
72549: LIST
72550: ST_TO_ADDR
// end ;
72551: LD_VAR 0 3
72555: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72556: LD_INT 0
72558: PPUSH
72559: PPUSH
// list := AreaToList ( area , 0 ) ;
72560: LD_ADDR_VAR 0 4
72564: PUSH
72565: LD_VAR 0 1
72569: PPUSH
72570: LD_INT 0
72572: PPUSH
72573: CALL_OW 517
72577: ST_TO_ADDR
// if not list then
72578: LD_VAR 0 4
72582: NOT
72583: IFFALSE 72587
// exit ;
72585: GO 72628
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72587: LD_ADDR_VAR 0 3
72591: PUSH
72592: LD_VAR 0 4
72596: PUSH
72597: LD_INT 1
72599: ARRAY
72600: PUSH
72601: LD_INT 1
72603: ARRAY
72604: PUSH
72605: LD_VAR 0 4
72609: PUSH
72610: LD_INT 2
72612: ARRAY
72613: PUSH
72614: LD_INT 1
72616: ARRAY
72617: PUSH
72618: LD_VAR 0 2
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: LIST
72627: ST_TO_ADDR
// end ;
72628: LD_VAR 0 3
72632: RET
// export function First ( array ) ; begin
72633: LD_INT 0
72635: PPUSH
// if not array then
72636: LD_VAR 0 1
72640: NOT
72641: IFFALSE 72645
// exit ;
72643: GO 72659
// result := array [ 1 ] ;
72645: LD_ADDR_VAR 0 2
72649: PUSH
72650: LD_VAR 0 1
72654: PUSH
72655: LD_INT 1
72657: ARRAY
72658: ST_TO_ADDR
// end ;
72659: LD_VAR 0 2
72663: RET
// export function Last ( array ) ; begin
72664: LD_INT 0
72666: PPUSH
// if not array then
72667: LD_VAR 0 1
72671: NOT
72672: IFFALSE 72676
// exit ;
72674: GO 72692
// result := array [ array ] ;
72676: LD_ADDR_VAR 0 2
72680: PUSH
72681: LD_VAR 0 1
72685: PUSH
72686: LD_VAR 0 1
72690: ARRAY
72691: ST_TO_ADDR
// end ;
72692: LD_VAR 0 2
72696: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
72697: LD_INT 0
72699: PPUSH
72700: PPUSH
// result := [ ] ;
72701: LD_ADDR_VAR 0 5
72705: PUSH
72706: EMPTY
72707: ST_TO_ADDR
// if not array then
72708: LD_VAR 0 1
72712: NOT
72713: IFFALSE 72717
// exit ;
72715: GO 72829
// for i := 1 to array do
72717: LD_ADDR_VAR 0 6
72721: PUSH
72722: DOUBLE
72723: LD_INT 1
72725: DEC
72726: ST_TO_ADDR
72727: LD_VAR 0 1
72731: PUSH
72732: FOR_TO
72733: IFFALSE 72827
// if array [ i ] [ index ] = value then
72735: LD_VAR 0 1
72739: PUSH
72740: LD_VAR 0 6
72744: ARRAY
72745: PUSH
72746: LD_VAR 0 2
72750: ARRAY
72751: PUSH
72752: LD_VAR 0 3
72756: EQUAL
72757: IFFALSE 72825
// begin if indexColumn then
72759: LD_VAR 0 4
72763: IFFALSE 72799
// result := Join ( result , array [ i ] [ indexColumn ] ) else
72765: LD_ADDR_VAR 0 5
72769: PUSH
72770: LD_VAR 0 5
72774: PPUSH
72775: LD_VAR 0 1
72779: PUSH
72780: LD_VAR 0 6
72784: ARRAY
72785: PUSH
72786: LD_VAR 0 4
72790: ARRAY
72791: PPUSH
72792: CALL 67837 0 2
72796: ST_TO_ADDR
72797: GO 72825
// result := Join ( result , array [ i ] ) ;
72799: LD_ADDR_VAR 0 5
72803: PUSH
72804: LD_VAR 0 5
72808: PPUSH
72809: LD_VAR 0 1
72813: PUSH
72814: LD_VAR 0 6
72818: ARRAY
72819: PPUSH
72820: CALL 67837 0 2
72824: ST_TO_ADDR
// end ;
72825: GO 72732
72827: POP
72828: POP
// end ;
72829: LD_VAR 0 5
72833: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72834: LD_INT 0
72836: PPUSH
// if not vehicles or not parkingPoint then
72837: LD_VAR 0 1
72841: NOT
72842: IFTRUE 72851
72844: PUSH
72845: LD_VAR 0 2
72849: NOT
72850: OR
72851: IFFALSE 72855
// exit ;
72853: GO 72953
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72855: LD_ADDR_VAR 0 1
72859: PUSH
72860: LD_VAR 0 1
72864: PPUSH
72865: LD_INT 50
72867: PUSH
72868: EMPTY
72869: LIST
72870: PUSH
72871: LD_INT 3
72873: PUSH
72874: LD_INT 92
72876: PUSH
72877: LD_VAR 0 2
72881: PUSH
72882: LD_INT 1
72884: ARRAY
72885: PUSH
72886: LD_VAR 0 2
72890: PUSH
72891: LD_INT 2
72893: ARRAY
72894: PUSH
72895: LD_INT 8
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PPUSH
72912: CALL_OW 72
72916: ST_TO_ADDR
// if not vehicles then
72917: LD_VAR 0 1
72921: NOT
72922: IFFALSE 72926
// exit ;
72924: GO 72953
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72926: LD_VAR 0 1
72930: PPUSH
72931: LD_VAR 0 2
72935: PUSH
72936: LD_INT 1
72938: ARRAY
72939: PPUSH
72940: LD_VAR 0 2
72944: PUSH
72945: LD_INT 2
72947: ARRAY
72948: PPUSH
72949: CALL_OW 111
// end ;
72953: LD_VAR 0 3
72957: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72958: LD_INT 0
72960: PPUSH
72961: PPUSH
72962: PPUSH
// if not side or not area then
72963: LD_VAR 0 1
72967: NOT
72968: IFTRUE 72977
72970: PUSH
72971: LD_VAR 0 2
72975: NOT
72976: OR
72977: IFFALSE 72981
// exit ;
72979: GO 73100
// tmp := AreaToList ( area , 0 ) ;
72981: LD_ADDR_VAR 0 5
72985: PUSH
72986: LD_VAR 0 2
72990: PPUSH
72991: LD_INT 0
72993: PPUSH
72994: CALL_OW 517
72998: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72999: LD_ADDR_VAR 0 4
73003: PUSH
73004: DOUBLE
73005: LD_INT 1
73007: DEC
73008: ST_TO_ADDR
73009: LD_VAR 0 5
73013: PUSH
73014: LD_INT 1
73016: ARRAY
73017: PUSH
73018: FOR_TO
73019: IFFALSE 73098
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73021: LD_VAR 0 5
73025: PUSH
73026: LD_INT 1
73028: ARRAY
73029: PUSH
73030: LD_VAR 0 4
73034: ARRAY
73035: PPUSH
73036: LD_VAR 0 5
73040: PUSH
73041: LD_INT 2
73043: ARRAY
73044: PUSH
73045: LD_VAR 0 4
73049: ARRAY
73050: PPUSH
73051: CALL_OW 351
73055: IFFALSE 73096
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73057: LD_VAR 0 5
73061: PUSH
73062: LD_INT 1
73064: ARRAY
73065: PUSH
73066: LD_VAR 0 4
73070: ARRAY
73071: PPUSH
73072: LD_VAR 0 5
73076: PUSH
73077: LD_INT 2
73079: ARRAY
73080: PUSH
73081: LD_VAR 0 4
73085: ARRAY
73086: PPUSH
73087: LD_VAR 0 1
73091: PPUSH
73092: CALL_OW 244
// end ;
73096: GO 73018
73098: POP
73099: POP
// end ;
73100: LD_VAR 0 3
73104: RET
// export function UniqueArray ( array ) ; var i ; begin
73105: LD_INT 0
73107: PPUSH
73108: PPUSH
// result := [ ] ;
73109: LD_ADDR_VAR 0 2
73113: PUSH
73114: EMPTY
73115: ST_TO_ADDR
// if not array then
73116: LD_VAR 0 1
73120: NOT
73121: IFFALSE 73125
// exit ;
73123: GO 73186
// for i := 1 to array do
73125: LD_ADDR_VAR 0 3
73129: PUSH
73130: DOUBLE
73131: LD_INT 1
73133: DEC
73134: ST_TO_ADDR
73135: LD_VAR 0 1
73139: PUSH
73140: FOR_TO
73141: IFFALSE 73184
// if not array [ i ] in result then
73143: LD_VAR 0 1
73147: PUSH
73148: LD_VAR 0 3
73152: ARRAY
73153: PUSH
73154: LD_VAR 0 2
73158: IN
73159: NOT
73160: IFFALSE 73182
// result := Join ( result , i ) ;
73162: LD_ADDR_VAR 0 2
73166: PUSH
73167: LD_VAR 0 2
73171: PPUSH
73172: LD_VAR 0 3
73176: PPUSH
73177: CALL 67837 0 2
73181: ST_TO_ADDR
73182: GO 73140
73184: POP
73185: POP
// end ; end_of_file
73186: LD_VAR 0 2
73190: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73191: LD_VAR 0 1
73195: PUSH
73196: LD_INT 200
73198: DOUBLE
73199: GREATEREQUAL
73200: IFFALSE 73208
73202: LD_INT 299
73204: DOUBLE
73205: LESSEQUAL
73206: IFTRUE 73210
73208: GO 73242
73210: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73211: LD_VAR 0 1
73215: PPUSH
73216: LD_VAR 0 2
73220: PPUSH
73221: LD_VAR 0 3
73225: PPUSH
73226: LD_VAR 0 4
73230: PPUSH
73231: LD_VAR 0 5
73235: PPUSH
73236: CALL 23913 0 5
73240: GO 73319
73242: LD_INT 300
73244: DOUBLE
73245: GREATEREQUAL
73246: IFFALSE 73254
73248: LD_INT 399
73250: DOUBLE
73251: LESSEQUAL
73252: IFTRUE 73256
73254: GO 73318
73256: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73257: LD_VAR 0 1
73261: PPUSH
73262: LD_VAR 0 2
73266: PPUSH
73267: LD_VAR 0 3
73271: PPUSH
73272: LD_VAR 0 4
73276: PPUSH
73277: LD_VAR 0 5
73281: PPUSH
73282: LD_VAR 0 6
73286: PPUSH
73287: LD_VAR 0 7
73291: PPUSH
73292: LD_VAR 0 8
73296: PPUSH
73297: LD_VAR 0 9
73301: PPUSH
73302: LD_VAR 0 10
73306: PPUSH
73307: LD_VAR 0 11
73311: PPUSH
73312: CALL 19716 0 11
73316: GO 73319
73318: POP
// end ;
73319: PPOPN 11
73321: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73322: LD_VAR 0 1
73326: PPUSH
73327: LD_VAR 0 2
73331: PPUSH
73332: LD_VAR 0 3
73336: PPUSH
73337: LD_VAR 0 4
73341: PPUSH
73342: LD_VAR 0 5
73346: PPUSH
73347: CALL 23213 0 5
// end ; end_of_file
73351: PPOPN 5
73353: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73354: LD_VAR 0 1
73358: PPUSH
73359: LD_VAR 0 2
73363: PPUSH
73364: LD_VAR 0 3
73368: PPUSH
73369: LD_VAR 0 4
73373: PPUSH
73374: LD_VAR 0 5
73378: PPUSH
73379: LD_VAR 0 6
73383: PPUSH
73384: CALL 7256 0 6
// end ;
73388: PPOPN 6
73390: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73391: LD_INT 0
73393: PPUSH
// begin if not units then
73394: LD_VAR 0 1
73398: NOT
73399: IFFALSE 73403
// exit ;
73401: GO 73437
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
73403: LD_VAR 0 1
73407: PPUSH
73408: LD_VAR 0 2
73412: PPUSH
73413: LD_VAR 0 3
73417: PPUSH
73418: LD_VAR 0 4
73422: PPUSH
73423: LD_VAR 0 5
73427: PPUSH
73428: LD_VAR 0 6
73432: PPUSH
73433: CALL 29610 0 6
// end ;
73437: PPOPN 7
73439: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73440: CALL 7136 0 0
// end ;
73444: PPOPN 1
73446: END
