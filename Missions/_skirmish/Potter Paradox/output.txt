// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 25 0 0
// InitGlobalVariables ;
   8: CALL 7061 0 0
// PrepareLegion ;
  12: CALL 234 0 0
// PrepareAllies ;
  16: CALL 2225 0 0
// Action ;
  20: CALL 4051 0 0
// end ;
  24: END
// function InitGame ; begin
  25: LD_INT 0
  27: PPUSH
// RandomizeAll ;
  28: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  32: LD_ADDR_OWVAR 67
  36: PUSH
  37: LD_INT 0
  39: PPUSH
  40: CALL_OW 426
  44: ST_TO_ADDR
// if not Difficulty then
  45: LD_OWVAR 67
  49: NOT
  50: IFFALSE 60
// Difficulty := 2 ;
  52: LD_ADDR_OWVAR 67
  56: PUSH
  57: LD_INT 2
  59: ST_TO_ADDR
// InitVariables ;
  60: CALL 73 0 0
// SetDiplomacy ;
  64: CALL 186 0 0
// end ; end_of_file
  68: LD_VAR 0 1
  72: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  73: LD_INT 0
  75: PPUSH
// points := 0 ;
  76: LD_ADDR_EXP 10
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// alert := false ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// game_over := false ;
  92: LD_ADDR_EXP 7
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// wave_time := 0 0$00 ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// bonus_active := false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// ignore_wave := false ;
 116: LD_ADDR_EXP 15
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// player_res_art := false ;
 124: LD_ADDR_EXP 8
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// player_artifact_ready := false ;
 132: LD_ADDR_EXP 16
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 140: LD_ADDR_EXP 9
 144: PUSH
 145: LD_INT 52500
 147: PUSH
 148: LD_INT 67200
 150: PUSH
 151: LD_INT 84000
 153: PUSH
 154: EMPTY
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// bonus_num := 0 ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// artifact_progress := 0 ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// export function SetDiplomacy ; begin
 186: LD_INT 0
 188: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 189: LD_INT 92
 191: PPUSH
 192: LD_INT 48
 194: PPUSH
 195: LD_INT 8
 197: PPUSH
 198: LD_INT 32796
 200: NEG
 201: PPUSH
 202: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 206: LD_INT 92
 208: PPUSH
 209: LD_INT 48
 211: PPUSH
 212: LD_INT 8
 214: PPUSH
 215: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 219: LD_INT 5
 221: PPUSH
 222: LD_INT 8
 224: PPUSH
 225: CALL_OW 343
// end ; end_of_file
 229: LD_VAR 0 1
 233: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 234: LD_INT 0
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
 253: PPUSH
// uc_side := 2 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 2
 261: ST_TO_ADDR
// uc_nation := nation_arabian ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 2
 269: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 270: LD_INT 1
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 6
 278: PPUSH
 279: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 283: LD_ADDR_OWVAR 26
 287: PUSH
 288: LD_STRING Nicolas Vervecken
 290: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 291: LD_ADDR_OWVAR 33
 295: PUSH
 296: LD_STRING SecondCharsGal
 298: ST_TO_ADDR
// hc_face_number := 3 ;
 299: LD_ADDR_OWVAR 34
 303: PUSH
 304: LD_INT 3
 306: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 307: LD_ADDR_OWVAR 29
 311: PUSH
 312: LD_INT 11
 314: PUSH
 315: LD_INT 10
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Vervecken := CreateHuman ;
 322: LD_ADDR_EXP 12
 326: PUSH
 327: CALL_OW 44
 331: ST_TO_ADDR
// InitHc ;
 332: CALL_OW 19
// uc_side := 8 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 8
 343: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 1
 354: PPUSH
 355: LD_INT 4000
 357: PUSH
 358: LD_INT 2500
 360: PUSH
 361: LD_INT 1250
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 379: LD_INT 23
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: LD_INT 300
 392: PPUSH
 393: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 274
 404: PPUSH
 405: LD_INT 3
 407: PPUSH
 408: LD_INT 100
 410: PUSH
 411: LD_INT 50
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: PPUSH
 428: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 432: LD_ADDR_VAR 0 14
 436: PUSH
 437: LD_INT 23
 439: PPUSH
 440: CALL_OW 250
 444: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 445: LD_ADDR_VAR 0 15
 449: PUSH
 450: LD_INT 23
 452: PPUSH
 453: CALL_OW 251
 457: ST_TO_ADDR
// team := [ ] ;
 458: LD_ADDR_VAR 0 7
 462: PUSH
 463: EMPTY
 464: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 465: LD_ADDR_VAR 0 8
 469: PUSH
 470: LD_INT 9
 472: PUSH
 473: LD_INT 8
 475: PUSH
 476: LD_INT 7
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 490: LD_ADDR_VAR 0 9
 494: PUSH
 495: LD_INT 11
 497: PUSH
 498: LD_INT 9
 500: PUSH
 501: LD_INT 8
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 515: LD_ADDR_VAR 0 10
 519: PUSH
 520: LD_INT 3
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_OWVAR 67
 538: ARRAY
 539: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 540: LD_ADDR_VAR 0 11
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: LD_INT 3
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_OWVAR 67
 563: ARRAY
 564: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 565: LD_ADDR_VAR 0 12
 569: PUSH
 570: LD_INT 3
 572: PUSH
 573: LD_INT 2
 575: PUSH
 576: LD_INT 2
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: PUSH
 584: LD_OWVAR 67
 588: ARRAY
 589: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 590: LD_ADDR_VAR 0 13
 594: PUSH
 595: LD_INT 6
 597: PUSH
 598: LD_INT 5
 600: PUSH
 601: LD_INT 4
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: LD_OWVAR 67
 613: ARRAY
 614: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 615: LD_ADDR_VAR 0 18
 619: PUSH
 620: LD_INT 13
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: LD_INT 26
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 14
 640: PUSH
 641: LD_INT 3
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: LD_INT 25
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 14
 658: PUSH
 659: LD_INT 3
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 32
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 14
 676: PUSH
 677: LD_INT 3
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: LD_INT 31
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 14
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 24
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 14
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 25
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 13
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 24
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 755: LD_ADDR_VAR 0 2
 759: PUSH
 760: DOUBLE
 761: LD_INT 1
 763: DEC
 764: ST_TO_ADDR
 765: LD_VAR 0 18
 769: PUSH
 770: LD_OWVAR 67
 774: MINUS
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: PUSH
 780: FOR_TO
 781: IFFALSE 910
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 783: LD_ADDR_OWVAR 37
 787: PUSH
 788: LD_VAR 0 18
 792: PUSH
 793: LD_VAR 0 2
 797: ARRAY
 798: PUSH
 799: LD_INT 1
 801: ARRAY
 802: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 803: LD_ADDR_OWVAR 39
 807: PUSH
 808: LD_VAR 0 18
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PUSH
 819: LD_INT 2
 821: ARRAY
 822: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 823: LD_ADDR_OWVAR 38
 827: PUSH
 828: LD_VAR 0 18
 832: PUSH
 833: LD_VAR 0 2
 837: ARRAY
 838: PUSH
 839: LD_INT 3
 841: ARRAY
 842: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 843: LD_ADDR_OWVAR 40
 847: PUSH
 848: LD_VAR 0 18
 852: PUSH
 853: LD_VAR 0 2
 857: ARRAY
 858: PUSH
 859: LD_INT 4
 861: ARRAY
 862: ST_TO_ADDR
// un := CreateVehicle ;
 863: LD_ADDR_VAR 0 6
 867: PUSH
 868: CALL_OW 45
 872: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 873: LD_VAR 0 6
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 5
 883: PPUSH
 884: CALL_OW 12
 888: PPUSH
 889: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 893: LD_VAR 0 6
 897: PPUSH
 898: LD_INT 7
 900: PPUSH
 901: LD_INT 0
 903: PPUSH
 904: CALL_OW 49
// end ;
 908: GO 780
 910: POP
 911: POP
// for i = 1 to ape_num do
 912: LD_ADDR_VAR 0 2
 916: PUSH
 917: DOUBLE
 918: LD_INT 1
 920: DEC
 921: ST_TO_ADDR
 922: LD_VAR 0 13
 926: PUSH
 927: FOR_TO
 928: IFFALSE 995
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 930: LD_INT 0
 932: PPUSH
 933: LD_INT 16
 935: PUSH
 936: LD_INT 15
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 1
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: CALL_OW 12
 953: ARRAY
 954: PPUSH
 955: LD_VAR 0 8
 959: PPUSH
 960: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 964: LD_ADDR_VAR 0 7
 968: PUSH
 969: LD_VAR 0 7
 973: PPUSH
 974: LD_VAR 0 7
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: PPUSH
 983: CALL_OW 44
 987: PPUSH
 988: CALL_OW 2
 992: ST_TO_ADDR
// end ;
 993: GO 927
 995: POP
 996: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 997: LD_INT 1
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_VAR 0 8
1007: PPUSH
1008: CALL_OW 380
// l1 := CreateHuman ;
1012: LD_ADDR_EXP 2
1016: PUSH
1017: CALL_OW 44
1021: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1022: LD_EXP 2
1026: PPUSH
1027: LD_INT 23
1029: PPUSH
1030: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 8
1044: PPUSH
1045: CALL_OW 380
// l2 := CreateHuman ;
1049: LD_ADDR_EXP 3
1053: PUSH
1054: CALL_OW 44
1058: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_INT 23
1066: PPUSH
1067: CALL_OW 52
// for class = 1 to 4 do
1071: LD_ADDR_VAR 0 4
1075: PUSH
1076: DOUBLE
1077: LD_INT 1
1079: DEC
1080: ST_TO_ADDR
1081: LD_INT 4
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1184
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1087: LD_ADDR_VAR 0 2
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_VAR 0 9
1101: PUSH
1102: LD_VAR 0 10
1106: PUSH
1107: LD_VAR 0 11
1111: PUSH
1112: LD_VAR 0 12
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_VAR 0 4
1127: ARRAY
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1180
// begin PrepareHuman ( false , class , skill ) ;
1132: LD_INT 0
1134: PPUSH
1135: LD_VAR 0 4
1139: PPUSH
1140: LD_VAR 0 8
1144: PPUSH
1145: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1149: LD_ADDR_VAR 0 7
1153: PUSH
1154: LD_VAR 0 7
1158: PPUSH
1159: LD_VAR 0 7
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: PPUSH
1168: CALL_OW 44
1172: PPUSH
1173: CALL_OW 2
1177: ST_TO_ADDR
// end ;
1178: GO 1129
1180: POP
1181: POP
1182: GO 1084
1184: POP
1185: POP
// for i in team do
1186: LD_ADDR_VAR 0 2
1190: PUSH
1191: LD_VAR 0 7
1195: PUSH
1196: FOR_IN
1197: IFFALSE 1673
// begin b := 0 ;
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 0
1206: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1207: LD_VAR 0 2
1211: PPUSH
1212: CALL_OW 257
1216: PUSH
1217: LD_INT 1
1219: DOUBLE
1220: EQUAL
1221: IFTRUE 1225
1223: GO 1332
1225: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1226: LD_ADDR_VAR 0 5
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_OWVAR 20
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 30
1248: PUSH
1249: LD_INT 32
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PUSH
1256: LD_INT 30
1258: PUSH
1259: LD_INT 31
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// if not b then
1287: LD_VAR 0 5
1291: NOT
1292: IFFALSE 1330
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 22
1301: PUSH
1302: LD_OWVAR 20
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 30
1313: PUSH
1314: LD_INT 5
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PPUSH
1325: CALL_OW 69
1329: ST_TO_ADDR
// end ; class_engineer :
1330: GO 1571
1332: LD_INT 2
1334: DOUBLE
1335: EQUAL
1336: IFTRUE 1340
1338: GO 1379
1340: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1341: LD_ADDR_VAR 0 5
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_OWVAR 20
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 30
1360: PUSH
1361: LD_INT 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 69
1376: ST_TO_ADDR
1377: GO 1571
1379: LD_INT 3
1381: DOUBLE
1382: EQUAL
1383: IFTRUE 1387
1385: GO 1476
1387: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 5
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_OWVAR 20
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 21
1407: PUSH
1408: LD_INT 2
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: PUSH
1415: LD_INT 58
1417: PUSH
1418: EMPTY
1419: LIST
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: PPUSH
1426: CALL_OW 69
1430: ST_TO_ADDR
// if not b then
1431: LD_VAR 0 5
1435: NOT
1436: IFFALSE 1474
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1438: LD_ADDR_VAR 0 5
1442: PUSH
1443: LD_INT 22
1445: PUSH
1446: LD_OWVAR 20
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 30
1457: PUSH
1458: LD_INT 3
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PPUSH
1469: CALL_OW 69
1473: ST_TO_ADDR
// end ; class_scientistic :
1474: GO 1571
1476: LD_INT 4
1478: DOUBLE
1479: EQUAL
1480: IFTRUE 1484
1482: GO 1523
1484: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1485: LD_ADDR_VAR 0 5
1489: PUSH
1490: LD_INT 22
1492: PUSH
1493: LD_OWVAR 20
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 30
1504: PUSH
1505: LD_INT 8
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 69
1520: ST_TO_ADDR
// end ; class_apeman_soldier :
1521: GO 1571
1523: LD_INT 15
1525: DOUBLE
1526: EQUAL
1527: IFTRUE 1531
1529: GO 1570
1531: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: LD_INT 22
1539: PUSH
1540: LD_OWVAR 20
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 30
1551: PUSH
1552: LD_INT 5
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PPUSH
1563: CALL_OW 69
1567: ST_TO_ADDR
1568: GO 1571
1570: POP
// if b then
1571: LD_VAR 0 5
1575: IFFALSE 1646
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1577: LD_VAR 0 5
1581: PUSH
1582: LD_INT 1
1584: ARRAY
1585: PPUSH
1586: CALL_OW 266
1590: PUSH
1591: LD_INT 31
1593: EQUAL
1594: IFFALSE 1616
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1596: LD_VAR 0 2
1600: PPUSH
1601: LD_VAR 0 5
1605: PUSH
1606: LD_INT 1
1608: ARRAY
1609: PPUSH
1610: CALL 4814 0 2
1614: GO 1644
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1616: LD_VAR 0 2
1620: PPUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_INT 1
1628: PPUSH
1629: LD_VAR 0 5
1633: PPUSH
1634: CALL_OW 12
1638: ARRAY
1639: PPUSH
1640: CALL_OW 52
1644: GO 1671
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1646: LD_VAR 0 2
1650: PPUSH
1651: LD_VAR 0 14
1655: PPUSH
1656: LD_VAR 0 15
1660: PPUSH
1661: LD_INT 15
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL_OW 50
// end ;
1671: GO 1196
1673: POP
1674: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1675: LD_ADDR_VAR 0 16
1679: PUSH
1680: LD_INT 26
1682: PUSH
1683: LD_INT 3
1685: PUSH
1686: LD_INT 2
1688: PUSH
1689: LD_INT 1
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: PUSH
1697: LD_OWVAR 67
1701: ARRAY
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: LD_INT 3
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_OWVAR 67
1728: ARRAY
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 24
1736: PUSH
1737: LD_INT 5
1739: PUSH
1740: LD_INT 5
1742: PUSH
1743: LD_INT 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: LD_OWVAR 67
1755: ARRAY
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 30
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_OWVAR 67
1782: ARRAY
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1794: LD_ADDR_VAR 0 2
1798: PUSH
1799: LD_INT 22
1801: PUSH
1802: LD_OWVAR 20
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 30
1813: PUSH
1814: LD_INT 32
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: CALL_OW 69
1829: PUSH
1830: FOR_IN
1831: IFFALSE 2004
// begin if weapons then
1833: LD_VAR 0 16
1837: IFFALSE 1961
// begin k := rand ( 1 , weapons ) ;
1839: LD_ADDR_VAR 0 3
1843: PUSH
1844: LD_INT 1
1846: PPUSH
1847: LD_VAR 0 16
1851: PPUSH
1852: CALL_OW 12
1856: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1857: LD_ADDR_VAR 0 17
1861: PUSH
1862: LD_VAR 0 16
1866: PUSH
1867: LD_VAR 0 3
1871: ARRAY
1872: PUSH
1873: LD_INT 1
1875: ARRAY
1876: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1877: LD_ADDR_VAR 0 16
1881: PUSH
1882: LD_VAR 0 16
1886: PPUSH
1887: LD_VAR 0 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: LD_VAR 0 16
1899: PUSH
1900: LD_VAR 0 3
1904: ARRAY
1905: PUSH
1906: LD_INT 2
1908: ARRAY
1909: PUSH
1910: LD_INT 1
1912: MINUS
1913: PPUSH
1914: CALL 4906 0 4
1918: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1919: LD_VAR 0 16
1923: PUSH
1924: LD_VAR 0 3
1928: ARRAY
1929: PUSH
1930: LD_INT 2
1932: ARRAY
1933: PUSH
1934: LD_INT 0
1936: EQUAL
1937: IFFALSE 1959
// weapons := Delete ( weapons , k ) ;
1939: LD_ADDR_VAR 0 16
1943: PUSH
1944: LD_VAR 0 16
1948: PPUSH
1949: LD_VAR 0 3
1953: PPUSH
1954: CALL_OW 3
1958: ST_TO_ADDR
// end else
1959: GO 1988
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1961: LD_ADDR_VAR 0 17
1965: PUSH
1966: LD_INT 27
1968: PUSH
1969: LD_INT 23
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 12
1986: ARRAY
1987: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_VAR 0 17
1997: PPUSH
1998: CALL_OW 431
// end ;
2002: GO 1830
2004: POP
2005: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_VAR 0 8
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: CALL_OW 380
// hc_gallery := potter ;
2025: LD_ADDR_OWVAR 33
2029: PUSH
2030: LD_STRING potter
2032: ST_TO_ADDR
// hc_face_number := 1 ;
2033: LD_ADDR_OWVAR 34
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// hc_importance := 100 ;
2041: LD_ADDR_OWVAR 32
2045: PUSH
2046: LD_INT 100
2048: ST_TO_ADDR
// hc_name := Mike Gerste ;
2049: LD_ADDR_OWVAR 26
2053: PUSH
2054: LD_STRING Mike Gerste
2056: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2057: LD_ADDR_OWVAR 29
2061: PUSH
2062: LD_INT 10
2064: PUSH
2065: LD_INT 11
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: ST_TO_ADDR
// legion_commander := CreateHuman ;
2072: LD_ADDR_EXP 1
2076: PUSH
2077: CALL_OW 44
2081: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2082: LD_EXP 1
2086: PPUSH
2087: LD_INT 23
2089: PPUSH
2090: CALL_OW 52
// uc_side := 5 ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_INT 5
2101: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 4
2107: PPUSH
2108: LD_VAR 0 8
2112: PPUSH
2113: CALL_OW 380
// hc_gallery := potter ;
2117: LD_ADDR_OWVAR 33
2121: PUSH
2122: LD_STRING potter
2124: ST_TO_ADDR
// hc_face_number := 2 ;
2125: LD_ADDR_OWVAR 34
2129: PUSH
2130: LD_INT 2
2132: ST_TO_ADDR
// hc_importance := 0 ;
2133: LD_ADDR_OWVAR 32
2137: PUSH
2138: LD_INT 0
2140: ST_TO_ADDR
// hc_name := George Potter ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING George Potter
2148: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 12
2156: PUSH
2157: LD_INT 9
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// potter := CreateHuman ;
2164: LD_ADDR_EXP 4
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2174: LD_EXP 4
2178: PPUSH
2179: LD_INT 4
2181: PPUSH
2182: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2186: LD_EXP 4
2190: PPUSH
2191: LD_INT 103
2193: PPUSH
2194: LD_INT 45
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2204: LD_EXP 4
2208: PPUSH
2209: LD_INT 23
2211: PPUSH
2212: CALL_OW 119
// InitHc ( ) ;
2216: CALL_OW 19
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
// uc_side := 5 ;
2232: LD_ADDR_OWVAR 20
2236: PUSH
2237: LD_INT 5
2239: ST_TO_ADDR
// uc_nation := nation_arabian ;
2240: LD_ADDR_OWVAR 21
2244: PUSH
2245: LD_INT 2
2247: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: LD_INT 22
2255: PUSH
2256: LD_OWVAR 20
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 30
2267: PUSH
2268: LD_INT 5
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: ST_TO_ADDR
// for i = 1 to 3 do
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: DOUBLE
2290: LD_INT 1
2292: DEC
2293: ST_TO_ADDR
2294: LD_INT 3
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2336
// begin PrepareHuman ( false , 2 , 6 ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: LD_INT 6
2308: PPUSH
2309: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2313: CALL_OW 44
2317: PPUSH
2318: LD_INT 27
2320: PPUSH
2321: LD_INT 22
2323: PPUSH
2324: LD_INT 5
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 50
// end ;
2334: GO 2297
2336: POP
2337: POP
// for i = 1 to 3 do
2338: LD_ADDR_VAR 0 2
2342: PUSH
2343: DOUBLE
2344: LD_INT 1
2346: DEC
2347: ST_TO_ADDR
2348: LD_INT 3
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2387
// begin PrepareHuman ( false , 1 , 6 ) ;
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 6
2362: PPUSH
2363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2367: CALL_OW 44
2371: PPUSH
2372: LD_VAR 0 4
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: CALL_OW 52
// end ;
2385: GO 2351
2387: POP
2388: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2389: LD_ADDR_VAR 0 2
2393: PUSH
2394: LD_INT 22
2396: PUSH
2397: LD_OWVAR 20
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 31
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 32
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 69
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2531
// begin PrepareHuman ( false , 1 , 6 ) ;
2446: LD_INT 0
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: LD_INT 6
2454: PPUSH
2455: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2459: CALL_OW 44
2463: PPUSH
2464: LD_VAR 0 2
2468: PPUSH
2469: CALL 4814 0 2
// if GetBType ( i ) = b_bunker then
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 266
2482: PUSH
2483: LD_INT 32
2485: EQUAL
2486: IFFALSE 2529
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2488: LD_VAR 0 2
2492: PPUSH
2493: LD_INT 27
2495: PUSH
2496: LD_INT 25
2498: PUSH
2499: LD_INT 24
2501: PUSH
2502: LD_INT 28
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: LD_VAR 0 2
2515: PUSH
2516: LD_INT 4
2518: MOD
2519: PUSH
2520: LD_INT 1
2522: PLUS
2523: ARRAY
2524: PPUSH
2525: CALL_OW 431
// end ;
2529: GO 2443
2531: POP
2532: POP
// for i = 1 to 3 do
2533: LD_ADDR_VAR 0 2
2537: PUSH
2538: DOUBLE
2539: LD_INT 1
2541: DEC
2542: ST_TO_ADDR
2543: LD_INT 3
2545: PUSH
2546: FOR_TO
2547: IFFALSE 2664
// begin vc_chassis := ar_half_tracked ;
2549: LD_ADDR_OWVAR 37
2553: PUSH
2554: LD_INT 14
2556: ST_TO_ADDR
// vc_engine := engine_solar ;
2557: LD_ADDR_OWVAR 39
2561: PUSH
2562: LD_INT 2
2564: ST_TO_ADDR
// vc_control := control_manual ;
2565: LD_ADDR_OWVAR 38
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2573: LD_ADDR_OWVAR 40
2577: PUSH
2578: LD_INT 25
2580: PUSH
2581: LD_INT 27
2583: PUSH
2584: LD_INT 26
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: ST_TO_ADDR
// un := CreateVehicle ;
2598: LD_ADDR_VAR 0 3
2602: PUSH
2603: CALL_OW 45
2607: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2608: LD_VAR 0 3
2612: PPUSH
2613: LD_INT 5
2615: PPUSH
2616: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 8
2627: PPUSH
2628: LD_INT 0
2630: PPUSH
2631: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: LD_INT 7
2643: PPUSH
2644: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2648: CALL_OW 44
2652: PPUSH
2653: LD_VAR 0 3
2657: PPUSH
2658: CALL_OW 52
// end ;
2662: GO 2546
2664: POP
2665: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 6
2674: PPUSH
2675: CALL_OW 380
// al_commander := CreateHuman ;
2679: LD_ADDR_EXP 5
2683: PUSH
2684: CALL_OW 44
2688: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2689: LD_EXP 5
2693: PPUSH
2694: LD_INT 22
2696: PUSH
2697: LD_OWVAR 20
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PPUSH
2720: CALL_OW 69
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: PPUSH
2729: CALL_OW 52
// InitHc ( ) ;
2733: CALL_OW 19
// end ;
2737: LD_VAR 0 1
2741: RET
// export function ChangeSide ( ) ; var i ; begin
2742: LD_INT 0
2744: PPUSH
2745: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2746: LD_ADDR_VAR 0 2
2750: PUSH
2751: LD_INT 22
2753: PUSH
2754: LD_INT 5
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PPUSH
2761: CALL_OW 69
2765: PUSH
2766: FOR_IN
2767: IFFALSE 2783
// SetSide ( i , 8 ) ;
2769: LD_VAR 0 2
2773: PPUSH
2774: LD_INT 8
2776: PPUSH
2777: CALL_OW 235
2781: GO 2766
2783: POP
2784: POP
// end ;
2785: LD_VAR 0 1
2789: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2790: LD_INT 22
2792: PUSH
2793: LD_INT 5
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 69
2804: IFFALSE 3318
2806: GO 2808
2808: DISABLE
2809: LD_INT 0
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
// begin enable ;
2817: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: LD_INT 22
2825: PUSH
2826: LD_INT 5
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 2
2835: PUSH
2836: LD_INT 21
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 21
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PPUSH
2865: CALL_OW 69
2869: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2870: LD_ADDR_VAR 0 5
2874: PUSH
2875: LD_INT 22
2877: PUSH
2878: LD_INT 5
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 32
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: LD_INT 24
2900: PUSH
2901: LD_INT 1000
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: PPUSH
2917: CALL_OW 69
2921: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2922: LD_ADDR_VAR 0 6
2926: PUSH
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 3
2934: PUSH
2935: LD_INT 54
2937: PUSH
2938: EMPTY
2939: LIST
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_INT 25
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: ST_TO_ADDR
// if not list then
2964: LD_VAR 0 2
2968: NOT
2969: IFFALSE 2973
// exit ;
2971: GO 3318
// for i in list do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: LD_VAR 0 2
2982: PUSH
2983: FOR_IN
2984: IFFALSE 3316
// begin if b then
2986: LD_VAR 0 5
2990: IFFALSE 3069
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2992: LD_ADDR_VAR 0 4
2996: PUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_INT 25
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PUSH
3017: FOR_IN
3018: IFFALSE 3067
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3020: LD_VAR 0 4
3024: PPUSH
3025: CALL_OW 314
3029: NOT
3030: PUSH
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 110
3040: PUSH
3041: LD_INT 7
3043: NONEQUAL
3044: AND
3045: IFFALSE 3065
// ComRepairBuilding ( j , b [ 1 ] ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 130
3065: GO 3017
3067: POP
3068: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 256
3078: PUSH
3079: LD_INT 500
3081: LESS
3082: PUSH
3083: LD_VAR 0 1
3087: PPUSH
3088: CALL_OW 110
3092: PUSH
3093: LD_INT 7
3095: EQUAL
3096: NOT
3097: AND
3098: IFFALSE 3148
// begin ComMoveToArea ( i , guard_hill ) ;
3100: LD_VAR 0 1
3104: PPUSH
3105: LD_INT 11
3107: PPUSH
3108: CALL_OW 113
// SetTag ( i , 7 ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 247
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: IFFALSE 3148
// begin AddComExitVehicle ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3148: LD_VAR 0 1
3152: PPUSH
3153: CALL_OW 256
3157: PUSH
3158: LD_INT 1000
3160: EQUAL
3161: PUSH
3162: LD_VAR 0 1
3166: PPUSH
3167: CALL_OW 110
3171: PUSH
3172: LD_INT 7
3174: EQUAL
3175: AND
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: CALL_OW 310
3186: NOT
3187: AND
3188: PUSH
3189: LD_VAR 0 6
3193: AND
3194: IFFALSE 3222
// begin SetTag ( i , 0 ) ;
3196: LD_VAR 0 1
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3208: LD_VAR 0 6
3212: PPUSH
3213: LD_VAR 0 1
3217: PPUSH
3218: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: CALL_OW 247
3231: PUSH
3232: LD_INT 2
3234: EQUAL
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 110
3245: PUSH
3246: LD_INT 7
3248: NONEQUAL
3249: AND
3250: PUSH
3251: LD_VAR 0 1
3255: PPUSH
3256: CALL_OW 314
3260: NOT
3261: AND
3262: IFFALSE 3314
// if FilterAllUnits ( [ f_side , 7 ] ) then
3264: LD_INT 22
3266: PUSH
3267: LD_INT 7
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 69
3278: IFFALSE 3314
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3280: LD_VAR 0 1
3284: PPUSH
3285: LD_INT 22
3287: PUSH
3288: LD_INT 7
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PPUSH
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 74
3309: PPUSH
3310: CALL_OW 115
// end ;
3314: GO 2983
3316: POP
3317: POP
// end ; end_of_file
3318: PPOPN 6
3320: END
// export function Game ; var i , val , areas , wave ; begin
3321: LD_INT 0
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
3327: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: LD_INT 1
3335: PUSH
3336: LD_INT 2
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 4
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: LD_INT 6
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_INT 5
3366: PUSH
3367: LD_INT 6
3369: PUSH
3370: LD_INT 7
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: PUSH
3378: LD_OWVAR 67
3382: ARRAY
3383: ST_TO_ADDR
// wave := 1 ;
3384: LD_ADDR_VAR 0 5
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// while not game_over do
3392: LD_EXP 7
3396: NOT
3397: IFFALSE 3553
// begin repeat begin Wait ( 0 0$01 ) ;
3399: LD_INT 35
3401: PPUSH
3402: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3406: LD_ADDR_EXP 11
3410: PUSH
3411: LD_EXP 11
3415: PUSH
3416: LD_INT 35
3418: PLUS
3419: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3420: LD_INT 22
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: PUSH
3435: LD_INT 10
3437: LESS
3438: PUSH
3439: LD_EXP 11
3443: PUSH
3444: LD_INT 21000
3446: GREATEREQUAL
3447: OR
3448: IFFALSE 3399
// wave_time := 0 0$00 ;
3450: LD_ADDR_EXP 11
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3458: LD_INT 5250
3460: PPUSH
3461: CALL_OW 67
// if not ignore_wave then
3465: LD_EXP 15
3469: NOT
3470: IFFALSE 3543
// begin for i = 1 to areas do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_VAR 0 4
3486: PUSH
3487: FOR_TO
3488: IFFALSE 3525
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3490: LD_VAR 0 5
3494: PUSH
3495: LD_VAR 0 3
3499: PLUS
3500: PPUSH
3501: LD_VAR 0 4
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PPUSH
3512: CALL 3558 0 2
// Wait ( 0 0$10 ) ;
3516: LD_INT 350
3518: PPUSH
3519: CALL_OW 67
// end ;
3523: GO 3487
3525: POP
3526: POP
// wave := wave + 1 ;
3527: LD_ADDR_VAR 0 5
3531: PUSH
3532: LD_VAR 0 5
3536: PUSH
3537: LD_INT 1
3539: PLUS
3540: ST_TO_ADDR
// end else
3541: GO 3551
// ignore_wave := false ;
3543: LD_ADDR_EXP 15
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// end ;
3551: GO 3392
// end ;
3553: LD_VAR 0 1
3557: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// uc_side := 7 ;
3565: LD_ADDR_OWVAR 20
3569: PUSH
3570: LD_INT 7
3572: ST_TO_ADDR
// uc_nation := 2 ;
3573: LD_ADDR_OWVAR 21
3577: PUSH
3578: LD_INT 2
3580: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3581: LD_ADDR_VAR 0 5
3585: PUSH
3586: LD_INT 10
3588: PUSH
3589: LD_OWVAR 1
3593: PUSH
3594: LD_INT 10500
3596: DIV
3597: PLUS
3598: ST_TO_ADDR
// if v > 25 then
3599: LD_VAR 0 5
3603: PUSH
3604: LD_INT 25
3606: GREATER
3607: IFFALSE 3617
// v := 25 ;
3609: LD_ADDR_VAR 0 5
3613: PUSH
3614: LD_INT 25
3616: ST_TO_ADDR
// InitHc ( ) ;
3617: CALL_OW 19
// hc_gallery :=  ;
3621: LD_ADDR_OWVAR 33
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// hc_importance := 0 ;
3629: LD_ADDR_OWVAR 32
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// hc_name :=  ;
3637: LD_ADDR_OWVAR 26
3641: PUSH
3642: LD_STRING 
3644: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3645: LD_ADDR_OWVAR 29
3649: PUSH
3650: LD_VAR 0 5
3654: PUSH
3655: LD_VAR 0 5
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: ST_TO_ADDR
// if val > 35 then
3664: LD_VAR 0 1
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: IFFALSE 3682
// val := 35 ;
3674: LD_ADDR_VAR 0 1
3678: PUSH
3679: LD_INT 35
3681: ST_TO_ADDR
// for i = 1 to val do
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: DOUBLE
3688: LD_INT 1
3690: DEC
3691: ST_TO_ADDR
3692: LD_VAR 0 1
3696: PUSH
3697: FOR_TO
3698: IFFALSE 3911
// begin if i mod 9 = 0 then
3700: LD_VAR 0 4
3704: PUSH
3705: LD_INT 9
3707: MOD
3708: PUSH
3709: LD_INT 0
3711: EQUAL
3712: IFFALSE 3724
// class := class_apeman_kamikaze else
3714: LD_ADDR_VAR 0 7
3718: PUSH
3719: LD_INT 17
3721: ST_TO_ADDR
3722: GO 3756
// if i mod 4 = 0 then
3724: LD_VAR 0 4
3728: PUSH
3729: LD_INT 4
3731: MOD
3732: PUSH
3733: LD_INT 0
3735: EQUAL
3736: IFFALSE 3748
// class := class_apeman_soldier else
3738: LD_ADDR_VAR 0 7
3742: PUSH
3743: LD_INT 15
3745: ST_TO_ADDR
3746: GO 3756
// class := class_apeman ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 12
3755: ST_TO_ADDR
// if i mod 6 = 0 then
3756: LD_VAR 0 4
3760: PUSH
3761: LD_INT 6
3763: MOD
3764: PUSH
3765: LD_INT 0
3767: EQUAL
3768: IFFALSE 3843
// begin vc_chassis := ar_half_tracked ;
3770: LD_ADDR_OWVAR 37
3774: PUSH
3775: LD_INT 14
3777: ST_TO_ADDR
// vc_control := control_apeman ;
3778: LD_ADDR_OWVAR 38
3782: PUSH
3783: LD_INT 5
3785: ST_TO_ADDR
// vc_engine := engine_siberite ;
3786: LD_ADDR_OWVAR 39
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3794: LD_ADDR_OWVAR 40
3798: PUSH
3799: LD_INT 28
3801: PUSH
3802: LD_INT 27
3804: PUSH
3805: LD_INT 29
3807: PUSH
3808: LD_EXP 22
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 1
3821: PPUSH
3822: LD_INT 4
3824: PPUSH
3825: CALL_OW 12
3829: ARRAY
3830: ST_TO_ADDR
// un := CreateVehicle ;
3831: LD_ADDR_VAR 0 6
3835: PUSH
3836: CALL_OW 45
3840: ST_TO_ADDR
// end else
3841: GO 3868
// begin PrepareHuman ( sex_male , class , 10 ) ;
3843: LD_INT 1
3845: PPUSH
3846: LD_VAR 0 7
3850: PPUSH
3851: LD_INT 10
3853: PPUSH
3854: CALL_OW 380
// un := CreateHuman ;
3858: LD_ADDR_VAR 0 6
3862: PUSH
3863: CALL_OW 44
3867: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3868: LD_VAR 0 6
3872: PPUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3885: LD_VAR 0 6
3889: PPUSH
3890: CALL_OW 250
3894: PPUSH
3895: LD_VAR 0 6
3899: PPUSH
3900: CALL_OW 251
3904: PPUSH
3905: CALL_OW 494
// end ;
3909: GO 3697
3911: POP
3912: POP
// end ;
3913: LD_VAR 0 3
3917: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3918: LD_EXP 6
3922: PUSH
3923: LD_EXP 7
3927: NOT
3928: AND
3929: IFFALSE 4048
3931: GO 3933
3933: DISABLE
3934: LD_INT 0
3936: PPUSH
3937: PPUSH
3938: PPUSH
// begin enable ;
3939: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3940: LD_ADDR_VAR 0 2
3944: PUSH
3945: LD_INT 22
3947: PUSH
3948: LD_INT 7
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 69
3959: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: LD_INT 81
3967: PUSH
3968: LD_INT 7
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 69
3979: ST_TO_ADDR
// if not list then
3980: LD_VAR 0 2
3984: NOT
3985: IFFALSE 3989
// exit ;
3987: GO 4048
// for i in list do
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_VAR 0 2
3998: PUSH
3999: FOR_IN
4000: IFFALSE 4046
// begin if enemy then
4002: LD_VAR 0 3
4006: IFFALSE 4044
// if not HasTask ( i ) then
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 314
4017: NOT
4018: IFFALSE 4044
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4020: LD_VAR 0 1
4024: PPUSH
4025: LD_VAR 0 3
4029: PPUSH
4030: LD_VAR 0 1
4034: PPUSH
4035: CALL_OW 74
4039: PPUSH
4040: CALL_OW 115
// end ;
4044: GO 3999
4046: POP
4047: POP
// end ; end_of_file
4048: PPOPN 3
4050: END
// export function Action ; begin
4051: LD_INT 0
4053: PPUSH
// InGameOn ;
4054: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4058: LD_INT 23
4060: PPUSH
4061: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4065: LD_EXP 1
4069: PPUSH
4070: LD_STRING DL-1
4072: PPUSH
4073: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4077: LD_EXP 2
4081: PPUSH
4082: LD_STRING DA-1
4084: PPUSH
4085: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4089: LD_EXP 3
4093: PPUSH
4094: LD_STRING DA-2
4096: PPUSH
4097: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4101: LD_EXP 1
4105: PPUSH
4106: LD_STRING DL-2
4108: PPUSH
4109: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4113: LD_EXP 3
4117: PPUSH
4118: LD_STRING DA-3
4120: PPUSH
4121: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4125: LD_EXP 1
4129: PPUSH
4130: LD_STRING DL-3
4132: PPUSH
4133: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4137: LD_EXP 2
4141: PPUSH
4142: LD_STRING DA-4
4144: PPUSH
4145: CALL_OW 88
// if not dialogue_skipped then
4149: LD_OWVAR 59
4153: NOT
4154: IFFALSE 4239
// begin Wait ( 0 0$01 ) ;
4156: LD_INT 35
4158: PPUSH
4159: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4163: LD_EXP 2
4167: PUSH
4168: LD_EXP 3
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4181: LD_EXP 2
4185: PPUSH
4186: LD_INT 107
4188: PPUSH
4189: LD_INT 53
4191: PPUSH
4192: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4196: LD_EXP 3
4200: PPUSH
4201: LD_INT 108
4203: PPUSH
4204: LD_INT 53
4206: PPUSH
4207: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4211: LD_EXP 2
4215: PPUSH
4216: LD_EXP 4
4220: PPUSH
4221: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4225: LD_EXP 3
4229: PPUSH
4230: LD_EXP 4
4234: PPUSH
4235: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4239: LD_INT 35
4241: PPUSH
4242: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4246: LD_EXP 2
4250: PPUSH
4251: LD_INT 107
4253: PPUSH
4254: LD_INT 53
4256: PPUSH
4257: CALL_OW 307
4261: PUSH
4262: LD_OWVAR 59
4266: OR
4267: IFFALSE 4239
// if not dialogue_skipped then
4269: LD_OWVAR 59
4273: NOT
4274: IFFALSE 4375
// begin ComTurnUnit ( potter , l1 ) ;
4276: LD_EXP 4
4280: PPUSH
4281: LD_EXP 2
4285: PPUSH
4286: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4290: LD_INT 10
4292: PPUSH
4293: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4297: LD_EXP 4
4301: PPUSH
4302: LD_INT 108
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: LD_INT 0
4313: PPUSH
4314: CALL_OW 483
// Wait ( 0 0$01 ) ;
4318: LD_INT 35
4320: PPUSH
4321: CALL_OW 67
// RemoveUnit ( potter ) ;
4325: LD_EXP 4
4329: PPUSH
4330: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DA-5
4341: PPUSH
4342: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4346: LD_EXP 3
4350: PPUSH
4351: LD_STRING DA-6
4353: PPUSH
4354: CALL_OW 88
// Wait ( 0 0$02 ) ;
4358: LD_INT 70
4360: PPUSH
4361: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4365: LD_INT 25
4367: PPUSH
4368: LD_INT 19
4370: PPUSH
4371: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4375: LD_INT 20
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL 3558 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4385: LD_EXP 5
4389: PPUSH
4390: LD_STRING DLa-1
4392: PPUSH
4393: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4397: LD_EXP 1
4401: PPUSH
4402: LD_STRING DL-5
4404: PPUSH
4405: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4409: LD_INT 23
4411: PPUSH
4412: CALL_OW 87
// InGameOff ;
4416: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4420: LD_STRING C1
4422: PPUSH
4423: CALL_OW 337
// alert := true ;
4427: LD_ADDR_EXP 6
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4435: LD_EXP 5
4439: PPUSH
4440: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4444: LD_EXP 5
4448: PPUSH
4449: LD_INT 11
4451: PPUSH
4452: CALL_OW 173
// Wait ( 0 0$30 ) ;
4456: LD_INT 1050
4458: PPUSH
4459: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4463: LD_INT 10
4465: PPUSH
4466: LD_INT 4
4468: PPUSH
4469: CALL 3558 0 2
// Wait ( 0 0$35 ) ;
4473: LD_INT 1225
4475: PPUSH
4476: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4480: LD_INT 10
4482: PPUSH
4483: LD_INT 5
4485: PPUSH
4486: CALL 3558 0 2
// Wait ( 0 0$03 ) ;
4490: LD_INT 105
4492: PPUSH
4493: CALL_OW 67
// Game ;
4497: CALL 3321 0 0
// end ;
4501: LD_VAR 0 1
4505: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4506: LD_INT 22
4508: PUSH
4509: LD_INT 7
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 69
4520: PUSH
4521: LD_INT 0
4523: EQUAL
4524: PUSH
4525: LD_EXP 10
4529: PUSH
4530: LD_INT 1500
4532: GREATEREQUAL
4533: AND
4534: IFFALSE 4762
4536: GO 4538
4538: DISABLE
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// begin DialogueOn ;
4543: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4547: LD_EXP 12
4551: PPUSH
4552: LD_STRING DVr-1
4554: PPUSH
4555: CALL_OW 94
// DialogueOff ;
4559: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4563: LD_STRING QBonusInfo
4565: PPUSH
4566: CALL_OW 97
4570: PUSH
4571: LD_INT 1
4573: DOUBLE
4574: EQUAL
4575: IFTRUE 4579
4577: GO 4590
4579: POP
// bonus_active := true ; end ;
4580: LD_ADDR_EXP 13
4584: PUSH
4585: LD_INT 1
4587: ST_TO_ADDR
4588: GO 4591
4590: POP
// bonus_num := 4 ;
4591: LD_ADDR_EXP 14
4595: PUSH
4596: LD_INT 4
4598: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ;
4599: LD_OWVAR 2
4603: PPUSH
4604: LD_INT 12
4606: PPUSH
4607: LD_INT 2
4609: PPUSH
4610: LD_INT 23
4612: PPUSH
4613: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4617: LD_ADDR_VAR 0 1
4621: PUSH
4622: LD_INT 500
4624: PUSH
4625: LD_INT 3500
4627: PUSH
4628: LD_INT 5750
4630: PUSH
4631: LD_INT 10000
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4640: LD_INT 10500
4642: PUSH
4643: LD_INT 12600
4645: PUSH
4646: LD_INT 14700
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_OWVAR 67
4658: ARRAY
4659: PPUSH
4660: CALL_OW 67
// for i = 1 to tmp do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_VAR 0 1
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4712
// if points >= tmp [ i ] then
4682: LD_EXP 10
4686: PUSH
4687: LD_VAR 0 1
4691: PUSH
4692: LD_VAR 0 2
4696: ARRAY
4697: GREATEREQUAL
4698: IFFALSE 4710
// bonus_num := i ;
4700: LD_ADDR_EXP 14
4704: PUSH
4705: LD_VAR 0 2
4709: ST_TO_ADDR
4710: GO 4679
4712: POP
4713: POP
// case Query ( QBonusInfo ) of 1 :
4714: LD_STRING QBonusInfo
4716: PPUSH
4717: CALL_OW 97
4721: PUSH
4722: LD_INT 1
4724: DOUBLE
4725: EQUAL
4726: IFTRUE 4730
4728: GO 4751
4730: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4731: LD_OWVAR 2
4735: PPUSH
4736: LD_INT 12
4738: PPUSH
4739: LD_INT 2
4741: PPUSH
4742: LD_INT 23
4744: PPUSH
4745: CALL_OW 468
4749: GO 4752
4751: POP
// until points >= 15000 ;
4752: LD_EXP 10
4756: PUSH
4757: LD_INT 15000
4759: GREATEREQUAL
4760: IFFALSE 4640
// end ;
4762: PPOPN 2
4764: END
// export function Win ; begin
4765: LD_INT 0
4767: PPUSH
// AddMedal ( med , 1 ) ;
4768: LD_STRING med
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 101
// AddMedal ( med , 1 ) ;
4778: LD_STRING med
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 101
// AddMedal ( med , 1 ) ;
4788: LD_STRING med
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 101
// GiveMedals ( MAIN ) ;
4798: LD_STRING MAIN
4800: PPUSH
4801: CALL_OW 102
// YouWin ;
4805: CALL_OW 103
// end ; end_of_file
4809: LD_VAR 0 1
4813: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4814: LD_INT 0
4816: PPUSH
4817: PPUSH
// dir := GetDir ( b ) ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: LD_VAR 0 2
4827: PPUSH
4828: CALL_OW 254
4832: ST_TO_ADDR
// if dir < 3 then
4833: LD_VAR 0 4
4837: PUSH
4838: LD_INT 3
4840: LESS
4841: IFFALSE 4859
// dir := dir + 3 else
4843: LD_ADDR_VAR 0 4
4847: PUSH
4848: LD_VAR 0 4
4852: PUSH
4853: LD_INT 3
4855: PLUS
4856: ST_TO_ADDR
4857: GO 4873
// dir := dir - 3 ;
4859: LD_ADDR_VAR 0 4
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: LD_INT 3
4871: MINUS
4872: ST_TO_ADDR
// SetDir ( un , dir ) ;
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_VAR 0 4
4882: PPUSH
4883: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_VAR 0 2
4896: PPUSH
4897: CALL_OW 52
// end ;
4901: LD_VAR 0 3
4905: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4906: LD_INT 0
4908: PPUSH
4909: PPUSH
4910: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4911: LD_ADDR_VAR 0 7
4915: PUSH
4916: LD_VAR 0 1
4920: PUSH
4921: LD_VAR 0 2
4925: ARRAY
4926: PPUSH
4927: LD_VAR 0 3
4931: PPUSH
4932: LD_VAR 0 4
4936: PPUSH
4937: CALL_OW 1
4941: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4942: LD_ADDR_VAR 0 1
4946: PUSH
4947: LD_VAR 0 1
4951: PPUSH
4952: LD_VAR 0 2
4956: PPUSH
4957: LD_VAR 0 7
4961: PPUSH
4962: CALL_OW 1
4966: ST_TO_ADDR
// result := tab ;
4967: LD_ADDR_VAR 0 5
4971: PUSH
4972: LD_VAR 0 1
4976: ST_TO_ADDR
// end ;
4977: LD_VAR 0 5
4981: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4982: LD_INT 0
4984: PPUSH
4985: PPUSH
4986: PPUSH
// if not GetControl ( veh ) = control_manual then
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL_OW 263
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: NOT
5001: IFFALSE 5013
// result := false else
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: LD_INT 0
5010: ST_TO_ADDR
5011: GO 5158
// if veh in FilterAllUnits ( [ f_empty ] ) then
5013: LD_VAR 0 1
5017: PUSH
5018: LD_INT 58
5020: PUSH
5021: EMPTY
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: IN
5029: IFFALSE 5041
// result := false else
5031: LD_ADDR_VAR 0 2
5035: PUSH
5036: LD_INT 0
5038: ST_TO_ADDR
5039: GO 5158
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5041: LD_ADDR_VAR 0 4
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 55
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 69
5077: ST_TO_ADDR
// if not filter then
5078: LD_VAR 0 4
5082: NOT
5083: IFFALSE 5095
// result := false else
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_INT 0
5092: ST_TO_ADDR
5093: GO 5158
// for i = 1 to filter do
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_VAR 0 4
5109: PUSH
5110: FOR_TO
5111: IFFALSE 5156
// if IsDriver ( filter [ i ] ) = veh then
5113: LD_VAR 0 4
5117: PUSH
5118: LD_VAR 0 3
5122: ARRAY
5123: PPUSH
5124: CALL 60501 0 1
5128: PUSH
5129: LD_VAR 0 1
5133: EQUAL
5134: IFFALSE 5154
// begin result := filter [ i ] ;
5136: LD_ADDR_VAR 0 2
5140: PUSH
5141: LD_VAR 0 4
5145: PUSH
5146: LD_VAR 0 3
5150: ARRAY
5151: ST_TO_ADDR
// break ;
5152: GO 5156
// end ;
5154: GO 5110
5156: POP
5157: POP
// end ; end ; end_of_file
5158: LD_VAR 0 2
5162: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL 21571 0 1
// if un = legion_commander then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_EXP 1
5181: EQUAL
5182: IFFALSE 5191
// YouLost ( commanderDied ) ;
5184: LD_STRING commanderDied
5186: PPUSH
5187: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5191: LD_VAR 0 1
5195: PUSH
5196: LD_EXP 1
5200: PUSH
5201: LD_INT 23
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: IN
5208: IFFALSE 5218
// game_over := true ;
5210: LD_ADDR_EXP 7
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if un = al_commander then
5218: LD_VAR 0 1
5222: PUSH
5223: LD_EXP 5
5227: EQUAL
5228: IFFALSE 5234
// ChangeSide ( ) ;
5230: CALL 2742 0 0
// if GetSide ( un ) = 7 then
5234: LD_VAR 0 1
5238: PPUSH
5239: CALL_OW 255
5243: PUSH
5244: LD_INT 7
5246: EQUAL
5247: IFFALSE 5365
// begin if GetClass ( un ) = class_apeman then
5249: LD_VAR 0 1
5253: PPUSH
5254: CALL_OW 257
5258: PUSH
5259: LD_INT 12
5261: EQUAL
5262: IFFALSE 5278
// points := points + 6 ;
5264: LD_ADDR_EXP 10
5268: PUSH
5269: LD_EXP 10
5273: PUSH
5274: LD_INT 6
5276: PLUS
5277: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 257
5287: PUSH
5288: LD_INT 17
5290: EQUAL
5291: IFFALSE 5307
// points := points + 11 ;
5293: LD_ADDR_EXP 10
5297: PUSH
5298: LD_EXP 10
5302: PUSH
5303: LD_INT 11
5305: PLUS
5306: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 257
5316: PUSH
5317: LD_INT 15
5319: EQUAL
5320: IFFALSE 5336
// points := points + 14 ;
5322: LD_ADDR_EXP 10
5326: PUSH
5327: LD_EXP 10
5331: PUSH
5332: LD_INT 14
5334: PLUS
5335: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 247
5345: PUSH
5346: LD_INT 2
5348: EQUAL
5349: IFFALSE 5365
// points := points + 50 ;
5351: LD_ADDR_EXP 10
5355: PUSH
5356: LD_EXP 10
5360: PUSH
5361: LD_INT 50
5363: PLUS
5364: ST_TO_ADDR
// end ; end ;
5365: PPOPN 1
5367: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5368: LD_EXP 5
5372: PPUSH
5373: CALL_OW 256
5377: PUSH
5378: LD_INT 1000
5380: LESS
5381: IFFALSE 5413
5383: GO 5385
5385: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5386: LD_EXP 5
5390: PPUSH
5391: CALL_OW 504
5395: PPUSH
5396: CALL_OW 255
5400: PUSH
5401: LD_INT 8
5403: EQUAL
5404: IFFALSE 5413
// YouLost ( FriendlyFire ) ;
5406: LD_STRING FriendlyFire
5408: PPUSH
5409: CALL_OW 104
5413: END
// on DialogueSkipped ( value ) do var i ;
5414: LD_INT 0
5416: PPUSH
// begin RemoveUnit ( potter ) ;
5417: LD_EXP 4
5421: PPUSH
5422: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5426: LD_EXP 2
5430: PUSH
5431: LD_EXP 3
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PPUSH
5440: CALL_OW 122
// Wait ( 1 ) ;
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5451: LD_EXP 2
5455: PPUSH
5456: LD_INT 107
5458: PPUSH
5459: LD_INT 53
5461: PPUSH
5462: LD_INT 0
5464: PPUSH
5465: LD_INT 0
5467: PPUSH
5468: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5472: LD_EXP 3
5476: PPUSH
5477: LD_INT 108
5479: PPUSH
5480: LD_INT 53
5482: PPUSH
5483: LD_INT 0
5485: PPUSH
5486: LD_INT 0
5488: PPUSH
5489: CALL_OW 483
// Wait ( 1 ) ;
5493: LD_INT 1
5495: PPUSH
5496: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5500: LD_EXP 2
5504: PUSH
5505: LD_EXP 3
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: LD_INT 108
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 118
// end ;
5524: PPOPN 2
5526: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
5536: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5537: LD_ADDR_VAR 0 10
5541: PUSH
5542: LD_INT 2
5544: PPUSH
5545: CALL_OW 469
5549: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5550: LD_ADDR_VAR 0 12
5554: PUSH
5555: LD_INT 22
5557: PUSH
5558: LD_OWVAR 2
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 30
5572: PUSH
5573: LD_INT 8
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 30
5582: PUSH
5583: LD_INT 11
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PPUSH
5604: LD_VAR 0 10
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 10
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 73
5626: ST_TO_ADDR
// if icon = art_exp_left then
5627: LD_VAR 0 2
5631: PUSH
5632: LD_INT 1
5634: EQUAL
5635: IFFALSE 5690
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5637: LD_VAR 0 12
5641: PPUSH
5642: LD_EXP 9
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5654: LD_VAR 0 12
5658: PPUSH
5659: LD_EXP 17
5663: PPUSH
5664: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5668: LD_OWVAR 2
5672: PPUSH
5673: LD_INT 1
5675: PPUSH
5676: LD_INT 0
5678: PPUSH
5679: LD_VAR 0 12
5683: PPUSH
5684: CALL_OW 468
// end else
5688: GO 6471
// begin DialogueOn ;
5690: CALL_OW 6
// uc_side := 8 ;
5694: LD_ADDR_OWVAR 20
5698: PUSH
5699: LD_INT 8
5701: ST_TO_ADDR
// uc_nation := 2 ;
5702: LD_ADDR_OWVAR 21
5706: PUSH
5707: LD_INT 2
5709: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5710: LD_ADDR_VAR 0 5
5714: PUSH
5715: LD_STRING QBonus
5717: PUSH
5718: LD_EXP 14
5722: STR
5723: ST_TO_ADDR
// off := true ;
5724: LD_ADDR_VAR 0 6
5728: PUSH
5729: LD_INT 1
5731: ST_TO_ADDR
// units := [ ] ;
5732: LD_ADDR_VAR 0 7
5736: PUSH
5737: EMPTY
5738: ST_TO_ADDR
// crates := 0 ;
5739: LD_ADDR_VAR 0 8
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5747: LD_EXP 12
5751: PPUSH
5752: LD_STRING DVr-2
5754: PPUSH
5755: CALL_OW 94
// wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// case Query ( bonus ) of 1 :
5766: LD_VAR 0 5
5770: PPUSH
5771: CALL_OW 97
5775: PUSH
5776: LD_INT 1
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5869
5784: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5785: LD_ADDR_VAR 0 9
5789: PUSH
5790: LD_INT 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 5
5798: PUSH
5799: LD_INT 8
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: PUSH
5808: LD_EXP 14
5812: ARRAY
5813: ST_TO_ADDR
// for i = 1 to tmp do
5814: LD_ADDR_VAR 0 11
5818: PUSH
5819: DOUBLE
5820: LD_INT 1
5822: DEC
5823: ST_TO_ADDR
5824: LD_VAR 0 9
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5865
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5832: LD_INT 0
5834: PPUSH
5835: LD_INT 15
5837: PPUSH
5838: LD_VAR 0 9
5842: PPUSH
5843: CALL_OW 380
// units := units ^ CreateHuman ;
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: LD_VAR 0 7
5856: PUSH
5857: CALL_OW 44
5861: ADD
5862: ST_TO_ADDR
// end ;
5863: GO 5829
5865: POP
5866: POP
// end ; 2 :
5867: GO 6277
5869: LD_INT 2
5871: DOUBLE
5872: EQUAL
5873: IFTRUE 5877
5875: GO 5909
5877: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5878: LD_ADDR_VAR 0 8
5882: PUSH
5883: LD_INT 100
5885: PUSH
5886: LD_INT 150
5888: PUSH
5889: LD_INT 350
5891: PUSH
5892: LD_INT 500
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: LD_EXP 14
5905: ARRAY
5906: ST_TO_ADDR
// end ; 3 :
5907: GO 6277
5909: LD_INT 3
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 6257
5917: POP
// begin if bonus_num = 1 then
5918: LD_EXP 14
5922: PUSH
5923: LD_INT 1
5925: EQUAL
5926: IFFALSE 5936
// ignore_wave := true ;
5928: LD_ADDR_EXP 15
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// if bonus_num = 2 then
5936: LD_EXP 14
5940: PUSH
5941: LD_INT 2
5943: EQUAL
5944: IFFALSE 6064
// begin for i = 1 to 2 do
5946: LD_ADDR_VAR 0 11
5950: PUSH
5951: DOUBLE
5952: LD_INT 1
5954: DEC
5955: ST_TO_ADDR
5956: LD_INT 2
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6062
// begin uc_nation := nation_arabian ;
5962: LD_ADDR_OWVAR 21
5966: PUSH
5967: LD_INT 2
5969: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5970: LD_ADDR_OWVAR 37
5974: PUSH
5975: LD_INT 14
5977: ST_TO_ADDR
// vc_engine := engine_siberite ;
5978: LD_ADDR_OWVAR 39
5982: PUSH
5983: LD_INT 3
5985: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5986: LD_ADDR_OWVAR 38
5990: PUSH
5991: LD_INT 2
5993: PUSH
5994: LD_INT 5
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 2
6006: PPUSH
6007: CALL_OW 12
6011: ARRAY
6012: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6013: LD_ADDR_OWVAR 40
6017: PUSH
6018: LD_INT 28
6020: PUSH
6021: LD_INT 27
6023: PUSH
6024: LD_INT 25
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 3
6037: PPUSH
6038: CALL_OW 12
6042: ARRAY
6043: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: LD_VAR 0 7
6053: PUSH
6054: CALL_OW 45
6058: ADD
6059: ST_TO_ADDR
// end ;
6060: GO 5959
6062: POP
6063: POP
// end ; if bonus_num = 3 then
6064: LD_EXP 14
6068: PUSH
6069: LD_INT 3
6071: EQUAL
6072: IFFALSE 6196
// begin for i = 1 to 4 do
6074: LD_ADDR_VAR 0 11
6078: PUSH
6079: DOUBLE
6080: LD_INT 1
6082: DEC
6083: ST_TO_ADDR
6084: LD_INT 4
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6194
// begin uc_nation := nation_arabian ;
6090: LD_ADDR_OWVAR 21
6094: PUSH
6095: LD_INT 2
6097: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6098: LD_ADDR_OWVAR 37
6102: PUSH
6103: LD_INT 14
6105: ST_TO_ADDR
// vc_engine := engine_siberite ;
6106: LD_ADDR_OWVAR 39
6110: PUSH
6111: LD_INT 3
6113: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6114: LD_ADDR_OWVAR 38
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: LD_INT 5
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 1
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: CALL_OW 12
6139: ARRAY
6140: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6141: LD_ADDR_OWVAR 40
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 27
6151: PUSH
6152: LD_INT 28
6154: PUSH
6155: LD_INT 25
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 4
6169: PPUSH
6170: CALL_OW 12
6174: ARRAY
6175: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6176: LD_ADDR_VAR 0 7
6180: PUSH
6181: LD_VAR 0 7
6185: PUSH
6186: CALL_OW 45
6190: ADD
6191: ST_TO_ADDR
// end ;
6192: GO 6087
6194: POP
6195: POP
// end ; if bonus_num = 4 then
6196: LD_EXP 14
6200: PUSH
6201: LD_INT 4
6203: EQUAL
6204: IFFALSE 6255
// for i = 1 to 3 do
6206: LD_ADDR_VAR 0 11
6210: PUSH
6211: DOUBLE
6212: LD_INT 1
6214: DEC
6215: ST_TO_ADDR
6216: LD_INT 3
6218: PUSH
6219: FOR_TO
6220: IFFALSE 6253
// begin PrepareHuman ( false , 3 , 8 ) ;
6222: LD_INT 0
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: LD_INT 8
6230: PPUSH
6231: CALL_OW 380
// units := units ^ CreateHuman ;
6235: LD_ADDR_VAR 0 7
6239: PUSH
6240: LD_VAR 0 7
6244: PUSH
6245: CALL_OW 44
6249: ADD
6250: ST_TO_ADDR
// end ;
6251: GO 6219
6253: POP
6254: POP
// end ; 4 :
6255: GO 6277
6257: LD_INT 4
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6276
6265: POP
// off := false ; end ;
6266: LD_ADDR_VAR 0 6
6270: PUSH
6271: LD_INT 0
6273: ST_TO_ADDR
6274: GO 6277
6276: POP
// DialogueOff ;
6277: CALL_OW 7
// if not off then
6281: LD_VAR 0 6
6285: NOT
6286: IFFALSE 6292
// exit else
6288: GO 6471
6290: GO 6345
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6292: LD_OWVAR 2
6296: PPUSH
6297: LD_INT 12
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_INT 23
6305: PPUSH
6306: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6310: LD_EXP 12
6314: PPUSH
6315: LD_STRING DVr-3
6317: PUSH
6318: LD_STRING DVr-3a
6320: PUSH
6321: LD_STRING DVr-3b
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 1
6331: PPUSH
6332: LD_INT 3
6334: PPUSH
6335: CALL_OW 12
6339: ARRAY
6340: PPUSH
6341: CALL_OW 94
// end ; if units then
6345: LD_VAR 0 7
6349: IFFALSE 6413
// for i in units do
6351: LD_ADDR_VAR 0 11
6355: PUSH
6356: LD_VAR 0 7
6360: PUSH
6361: FOR_IN
6362: IFFALSE 6411
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6364: LD_VAR 0 11
6368: PPUSH
6369: LD_INT 92
6371: PPUSH
6372: LD_INT 49
6374: PPUSH
6375: LD_INT 20
6377: PPUSH
6378: LD_INT 0
6380: PPUSH
6381: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6385: LD_VAR 0 11
6389: PPUSH
6390: CALL_OW 250
6394: PPUSH
6395: LD_VAR 0 11
6399: PPUSH
6400: CALL_OW 251
6404: PPUSH
6405: CALL_OW 494
// end ;
6409: GO 6361
6411: POP
6412: POP
// if crates then
6413: LD_VAR 0 8
6417: IFFALSE 6471
// for i = 1 to ( crates div 50 ) do
6419: LD_ADDR_VAR 0 11
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_VAR 0 8
6433: PUSH
6434: LD_INT 50
6436: DIV
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6469
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6441: LD_INT 5
6443: PPUSH
6444: LD_INT 92
6446: PPUSH
6447: LD_INT 49
6449: PPUSH
6450: LD_INT 30
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: CALL_OW 56
// wait ( 0 0$02 ) ;
6460: LD_INT 70
6462: PPUSH
6463: CALL_OW 67
// end ;
6467: GO 6438
6469: POP
6470: POP
// end ; end ;
6471: PPOPN 12
6473: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: LD_VAR 0 3
6488: PPUSH
6489: CALL 21669 0 3
// end ;
6493: PPOPN 3
6495: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6496: LD_VAR 0 1
6500: PPUSH
6501: CALL 21677 0 1
// end ;
6505: PPOPN 1
6507: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6508: LD_VAR 0 1
6512: PPUSH
6513: CALL_OW 255
6517: PUSH
6518: LD_OWVAR 2
6522: EQUAL
6523: IFFALSE 6533
// player_res_art := true ;
6525: LD_ADDR_EXP 8
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// end ;
6533: PPOPN 1
6535: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6536: LD_INT 22
6538: PUSH
6539: LD_OWVAR 2
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: LD_INT 30
6553: PUSH
6554: LD_INT 7
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 30
6563: PUSH
6564: LD_INT 8
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 30
6573: PUSH
6574: LD_INT 11
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PPUSH
6591: CALL_OW 69
6595: IFFALSE 6828
6597: GO 6599
6599: DISABLE
6600: LD_INT 0
6602: PPUSH
6603: PPUSH
// begin enable ;
6604: ENABLE
// xy := FindArtifact ( 2 ) ;
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: LD_INT 2
6612: PPUSH
6613: CALL_OW 469
6617: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6618: LD_ADDR_VAR 0 2
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_OWVAR 2
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: LD_INT 30
6640: PUSH
6641: LD_INT 8
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 30
6650: PUSH
6651: LD_INT 7
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 30
6660: PUSH
6661: LD_INT 11
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 69
6682: PPUSH
6683: LD_VAR 0 1
6687: PUSH
6688: LD_INT 1
6690: ARRAY
6691: PPUSH
6692: LD_VAR 0 1
6696: PUSH
6697: LD_INT 2
6699: ARRAY
6700: PPUSH
6701: CALL_OW 73
6705: ST_TO_ADDR
// if player_artifact_ready = false then
6706: LD_EXP 16
6710: PUSH
6711: LD_INT 0
6713: EQUAL
6714: IFFALSE 6828
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6716: LD_VAR 0 2
6720: PPUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_INT 1
6728: ARRAY
6729: PPUSH
6730: LD_VAR 0 1
6734: PUSH
6735: LD_INT 2
6737: ARRAY
6738: PPUSH
6739: CALL_OW 297
6743: PUSH
6744: LD_INT 6
6746: LESS
6747: IFFALSE 6808
// begin if BuildingStatus ( lab ) = bs_idle then
6749: LD_VAR 0 2
6753: PPUSH
6754: CALL_OW 461
6758: PUSH
6759: LD_INT 2
6761: EQUAL
6762: IFFALSE 6786
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6764: LD_OWVAR 2
6768: PPUSH
6769: LD_INT 1
6771: PPUSH
6772: LD_INT 2
6774: PPUSH
6775: LD_VAR 0 2
6779: PPUSH
6780: CALL_OW 468
6784: GO 6806
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6786: LD_OWVAR 2
6790: PPUSH
6791: LD_INT 1
6793: PPUSH
6794: LD_INT 1
6796: PPUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 468
// end else
6806: GO 6828
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6808: LD_OWVAR 2
6812: PPUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: LD_VAR 0 2
6823: PPUSH
6824: CALL_OW 468
// end ;
6828: PPOPN 2
6830: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 255
6840: PUSH
6841: LD_OWVAR 2
6845: EQUAL
6846: IFFALSE 6872
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6848: LD_OWVAR 2
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 0
6858: PPUSH
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 468
// Win ;
6868: CALL 4765 0 0
// end ; end ;
6872: PPOPN 1
6874: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6875: LD_ADDR_EXP 17
6879: PUSH
6880: LD_VAR 0 2
6884: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6885: LD_OWVAR 2
6889: PPUSH
6890: LD_INT 1
6892: PPUSH
6893: LD_INT 2
6895: PPUSH
6896: LD_VAR 0 1
6900: PPUSH
6901: CALL_OW 468
// end ;
6905: PPOPN 2
6907: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6908: LD_VAR 0 1
6912: PPUSH
6913: LD_VAR 0 2
6917: PPUSH
6918: CALL 21693 0 2
// end ; end_of_file
6922: PPOPN 2
6924: END
// every 0 0$01 trigger not game_over do
6925: LD_EXP 7
6929: NOT
6930: IFFALSE 6963
6932: GO 6934
6934: DISABLE
// begin enable ;
6935: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6936: LD_ADDR_OWVAR 47
6940: PUSH
6941: LD_STRING #tick
6943: PUSH
6944: LD_OWVAR 1
6948: PUSH
6949: LD_STRING #points
6951: PUSH
6952: LD_EXP 10
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: ST_TO_ADDR
// end ;
6963: END
// every 0 0$01 trigger game_over do
6964: LD_EXP 7
6968: IFFALSE 7027
6970: GO 6972
6972: DISABLE
// begin Wait ( 0 0$02 ) ;
6973: LD_INT 70
6975: PPUSH
6976: CALL_OW 67
// DialogueOn ;
6980: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6984: LD_ADDR_OWVAR 47
6988: PUSH
6989: LD_STRING #game-points
6991: PUSH
6992: LD_OWVAR 78
6996: PUSH
6997: LD_EXP 10
7001: PUSH
7002: LD_STRING #game-time
7004: PUSH
7005: LD_OWVAR 1
7009: PUSH
7010: LD_STRING #game-difficulty
7012: PUSH
7013: LD_OWVAR 67
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: ST_TO_ADDR
// end ; end_of_file
7027: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7028: LD_OWVAR 1
7032: PUSH
7033: LD_INT 52500
7035: LESS
7036: IFFALSE 7060
7038: GO 7040
7040: DISABLE
// begin enable ;
7041: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7042: LD_INT 1
7044: PPUSH
7045: LD_INT 5
7047: PPUSH
7048: CALL_OW 12
7052: PPUSH
7053: LD_INT 1
7055: PPUSH
7056: CALL_OW 57
// end ; end_of_file
7060: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7061: LD_INT 0
7063: PPUSH
// ar_miner := 81 ;
7064: LD_ADDR_EXP 25
7068: PUSH
7069: LD_INT 81
7071: ST_TO_ADDR
// ar_crane := 88 ;
7072: LD_ADDR_EXP 24
7076: PUSH
7077: LD_INT 88
7079: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7080: LD_ADDR_EXP 19
7084: PUSH
7085: LD_INT 89
7087: ST_TO_ADDR
// us_hack := 99 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_INT 99
7095: ST_TO_ADDR
// us_artillery := 97 ;
7096: LD_ADDR_EXP 21
7100: PUSH
7101: LD_INT 97
7103: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7104: LD_ADDR_EXP 22
7108: PUSH
7109: LD_INT 91
7111: ST_TO_ADDR
// ar_mortar := 92 ;
7112: LD_ADDR_EXP 23
7116: PUSH
7117: LD_INT 92
7119: ST_TO_ADDR
// ru_flamethrower := 93 ;
7120: LD_ADDR_EXP 26
7124: PUSH
7125: LD_INT 93
7127: ST_TO_ADDR
// ru_radar := 98 ;
7128: LD_ADDR_EXP 18
7132: PUSH
7133: LD_INT 98
7135: ST_TO_ADDR
// tech_Artillery := 80 ;
7136: LD_ADDR_EXP 27
7140: PUSH
7141: LD_INT 80
7143: ST_TO_ADDR
// tech_RadMat := 81 ;
7144: LD_ADDR_EXP 28
7148: PUSH
7149: LD_INT 81
7151: ST_TO_ADDR
// tech_BasicTools := 82 ;
7152: LD_ADDR_EXP 29
7156: PUSH
7157: LD_INT 82
7159: ST_TO_ADDR
// tech_Cargo := 83 ;
7160: LD_ADDR_EXP 30
7164: PUSH
7165: LD_INT 83
7167: ST_TO_ADDR
// tech_Track := 84 ;
7168: LD_ADDR_EXP 31
7172: PUSH
7173: LD_INT 84
7175: ST_TO_ADDR
// tech_Crane := 85 ;
7176: LD_ADDR_EXP 32
7180: PUSH
7181: LD_INT 85
7183: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7184: LD_ADDR_EXP 33
7188: PUSH
7189: LD_INT 86
7191: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7192: LD_ADDR_EXP 34
7196: PUSH
7197: LD_INT 87
7199: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7200: LD_ADDR_EXP 35
7204: PUSH
7205: LD_INT 88
7207: ST_TO_ADDR
// class_mastodont := 31 ;
7208: LD_ADDR_EXP 36
7212: PUSH
7213: LD_INT 31
7215: ST_TO_ADDR
// class_horse := 21 ;
7216: LD_ADDR_EXP 37
7220: PUSH
7221: LD_INT 21
7223: ST_TO_ADDR
// end ;
7224: LD_VAR 0 1
7228: RET
// every 1 do
7229: GO 7231
7231: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7232: CALL 7061 0 0
7236: END
// every 0 0$1 do
7237: GO 7239
7239: DISABLE
// begin enable ;
7240: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7241: LD_STRING updateTimer(
7243: PUSH
7244: LD_OWVAR 1
7248: STR
7249: PUSH
7250: LD_STRING );
7252: STR
7253: PPUSH
7254: CALL_OW 559
// end ;
7258: END
// export function SOS_MapStart ( ) ; begin
7259: LD_INT 0
7261: PPUSH
// if streamModeActive then
7262: LD_EXP 38
7266: IFFALSE 7275
// DefineStreamItems ( true ) ;
7268: LD_INT 1
7270: PPUSH
7271: CALL 8925 0 1
// UpdateFactoryWaypoints ( ) ;
7275: CALL 22509 0 0
// end ;
7279: LD_VAR 0 1
7283: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7284: LD_INT 0
7286: PPUSH
// if p2 = 100 then
7287: LD_VAR 0 2
7291: PUSH
7292: LD_INT 100
7294: EQUAL
7295: IFFALSE 8298
// begin if not StreamModeActive then
7297: LD_EXP 38
7301: NOT
7302: IFFALSE 7312
// StreamModeActive := true ;
7304: LD_ADDR_EXP 38
7308: PUSH
7309: LD_INT 1
7311: ST_TO_ADDR
// if p3 = 0 then
7312: LD_VAR 0 3
7316: PUSH
7317: LD_INT 0
7319: EQUAL
7320: IFFALSE 7326
// InitStreamMode ;
7322: CALL 8461 0 0
// if p3 = 1 then
7326: LD_VAR 0 3
7330: PUSH
7331: LD_INT 1
7333: EQUAL
7334: IFFALSE 7344
// sRocket := true ;
7336: LD_ADDR_EXP 43
7340: PUSH
7341: LD_INT 1
7343: ST_TO_ADDR
// if p3 = 2 then
7344: LD_VAR 0 3
7348: PUSH
7349: LD_INT 2
7351: EQUAL
7352: IFFALSE 7362
// sSpeed := true ;
7354: LD_ADDR_EXP 42
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// if p3 = 3 then
7362: LD_VAR 0 3
7366: PUSH
7367: LD_INT 3
7369: EQUAL
7370: IFFALSE 7380
// sEngine := true ;
7372: LD_ADDR_EXP 44
7376: PUSH
7377: LD_INT 1
7379: ST_TO_ADDR
// if p3 = 4 then
7380: LD_VAR 0 3
7384: PUSH
7385: LD_INT 4
7387: EQUAL
7388: IFFALSE 7398
// sSpec := true ;
7390: LD_ADDR_EXP 41
7394: PUSH
7395: LD_INT 1
7397: ST_TO_ADDR
// if p3 = 5 then
7398: LD_VAR 0 3
7402: PUSH
7403: LD_INT 5
7405: EQUAL
7406: IFFALSE 7416
// sLevel := true ;
7408: LD_ADDR_EXP 45
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// if p3 = 6 then
7416: LD_VAR 0 3
7420: PUSH
7421: LD_INT 6
7423: EQUAL
7424: IFFALSE 7434
// sArmoury := true ;
7426: LD_ADDR_EXP 46
7430: PUSH
7431: LD_INT 1
7433: ST_TO_ADDR
// if p3 = 7 then
7434: LD_VAR 0 3
7438: PUSH
7439: LD_INT 7
7441: EQUAL
7442: IFFALSE 7452
// sRadar := true ;
7444: LD_ADDR_EXP 47
7448: PUSH
7449: LD_INT 1
7451: ST_TO_ADDR
// if p3 = 8 then
7452: LD_VAR 0 3
7456: PUSH
7457: LD_INT 8
7459: EQUAL
7460: IFFALSE 7470
// sBunker := true ;
7462: LD_ADDR_EXP 48
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// if p3 = 9 then
7470: LD_VAR 0 3
7474: PUSH
7475: LD_INT 9
7477: EQUAL
7478: IFFALSE 7488
// sHack := true ;
7480: LD_ADDR_EXP 49
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// if p3 = 10 then
7488: LD_VAR 0 3
7492: PUSH
7493: LD_INT 10
7495: EQUAL
7496: IFFALSE 7506
// sFire := true ;
7498: LD_ADDR_EXP 50
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// if p3 = 11 then
7506: LD_VAR 0 3
7510: PUSH
7511: LD_INT 11
7513: EQUAL
7514: IFFALSE 7524
// sRefresh := true ;
7516: LD_ADDR_EXP 51
7520: PUSH
7521: LD_INT 1
7523: ST_TO_ADDR
// if p3 = 12 then
7524: LD_VAR 0 3
7528: PUSH
7529: LD_INT 12
7531: EQUAL
7532: IFFALSE 7542
// sExp := true ;
7534: LD_ADDR_EXP 52
7538: PUSH
7539: LD_INT 1
7541: ST_TO_ADDR
// if p3 = 13 then
7542: LD_VAR 0 3
7546: PUSH
7547: LD_INT 13
7549: EQUAL
7550: IFFALSE 7560
// sDepot := true ;
7552: LD_ADDR_EXP 53
7556: PUSH
7557: LD_INT 1
7559: ST_TO_ADDR
// if p3 = 14 then
7560: LD_VAR 0 3
7564: PUSH
7565: LD_INT 14
7567: EQUAL
7568: IFFALSE 7578
// sFlag := true ;
7570: LD_ADDR_EXP 54
7574: PUSH
7575: LD_INT 1
7577: ST_TO_ADDR
// if p3 = 15 then
7578: LD_VAR 0 3
7582: PUSH
7583: LD_INT 15
7585: EQUAL
7586: IFFALSE 7596
// sKamikadze := true ;
7588: LD_ADDR_EXP 62
7592: PUSH
7593: LD_INT 1
7595: ST_TO_ADDR
// if p3 = 16 then
7596: LD_VAR 0 3
7600: PUSH
7601: LD_INT 16
7603: EQUAL
7604: IFFALSE 7614
// sTroll := true ;
7606: LD_ADDR_EXP 63
7610: PUSH
7611: LD_INT 1
7613: ST_TO_ADDR
// if p3 = 17 then
7614: LD_VAR 0 3
7618: PUSH
7619: LD_INT 17
7621: EQUAL
7622: IFFALSE 7632
// sSlow := true ;
7624: LD_ADDR_EXP 64
7628: PUSH
7629: LD_INT 1
7631: ST_TO_ADDR
// if p3 = 18 then
7632: LD_VAR 0 3
7636: PUSH
7637: LD_INT 18
7639: EQUAL
7640: IFFALSE 7650
// sLack := true ;
7642: LD_ADDR_EXP 65
7646: PUSH
7647: LD_INT 1
7649: ST_TO_ADDR
// if p3 = 19 then
7650: LD_VAR 0 3
7654: PUSH
7655: LD_INT 19
7657: EQUAL
7658: IFFALSE 7668
// sTank := true ;
7660: LD_ADDR_EXP 67
7664: PUSH
7665: LD_INT 1
7667: ST_TO_ADDR
// if p3 = 20 then
7668: LD_VAR 0 3
7672: PUSH
7673: LD_INT 20
7675: EQUAL
7676: IFFALSE 7686
// sRemote := true ;
7678: LD_ADDR_EXP 68
7682: PUSH
7683: LD_INT 1
7685: ST_TO_ADDR
// if p3 = 21 then
7686: LD_VAR 0 3
7690: PUSH
7691: LD_INT 21
7693: EQUAL
7694: IFFALSE 7704
// sPowell := true ;
7696: LD_ADDR_EXP 69
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// if p3 = 22 then
7704: LD_VAR 0 3
7708: PUSH
7709: LD_INT 22
7711: EQUAL
7712: IFFALSE 7722
// sTeleport := true ;
7714: LD_ADDR_EXP 72
7718: PUSH
7719: LD_INT 1
7721: ST_TO_ADDR
// if p3 = 23 then
7722: LD_VAR 0 3
7726: PUSH
7727: LD_INT 23
7729: EQUAL
7730: IFFALSE 7740
// sOilTower := true ;
7732: LD_ADDR_EXP 74
7736: PUSH
7737: LD_INT 1
7739: ST_TO_ADDR
// if p3 = 24 then
7740: LD_VAR 0 3
7744: PUSH
7745: LD_INT 24
7747: EQUAL
7748: IFFALSE 7758
// sShovel := true ;
7750: LD_ADDR_EXP 75
7754: PUSH
7755: LD_INT 1
7757: ST_TO_ADDR
// if p3 = 25 then
7758: LD_VAR 0 3
7762: PUSH
7763: LD_INT 25
7765: EQUAL
7766: IFFALSE 7776
// sSheik := true ;
7768: LD_ADDR_EXP 76
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// if p3 = 26 then
7776: LD_VAR 0 3
7780: PUSH
7781: LD_INT 26
7783: EQUAL
7784: IFFALSE 7794
// sEarthquake := true ;
7786: LD_ADDR_EXP 78
7790: PUSH
7791: LD_INT 1
7793: ST_TO_ADDR
// if p3 = 27 then
7794: LD_VAR 0 3
7798: PUSH
7799: LD_INT 27
7801: EQUAL
7802: IFFALSE 7812
// sAI := true ;
7804: LD_ADDR_EXP 79
7808: PUSH
7809: LD_INT 1
7811: ST_TO_ADDR
// if p3 = 28 then
7812: LD_VAR 0 3
7816: PUSH
7817: LD_INT 28
7819: EQUAL
7820: IFFALSE 7830
// sCargo := true ;
7822: LD_ADDR_EXP 82
7826: PUSH
7827: LD_INT 1
7829: ST_TO_ADDR
// if p3 = 29 then
7830: LD_VAR 0 3
7834: PUSH
7835: LD_INT 29
7837: EQUAL
7838: IFFALSE 7848
// sDLaser := true ;
7840: LD_ADDR_EXP 83
7844: PUSH
7845: LD_INT 1
7847: ST_TO_ADDR
// if p3 = 30 then
7848: LD_VAR 0 3
7852: PUSH
7853: LD_INT 30
7855: EQUAL
7856: IFFALSE 7866
// sExchange := true ;
7858: LD_ADDR_EXP 84
7862: PUSH
7863: LD_INT 1
7865: ST_TO_ADDR
// if p3 = 31 then
7866: LD_VAR 0 3
7870: PUSH
7871: LD_INT 31
7873: EQUAL
7874: IFFALSE 7884
// sFac := true ;
7876: LD_ADDR_EXP 85
7880: PUSH
7881: LD_INT 1
7883: ST_TO_ADDR
// if p3 = 32 then
7884: LD_VAR 0 3
7888: PUSH
7889: LD_INT 32
7891: EQUAL
7892: IFFALSE 7902
// sPower := true ;
7894: LD_ADDR_EXP 86
7898: PUSH
7899: LD_INT 1
7901: ST_TO_ADDR
// if p3 = 33 then
7902: LD_VAR 0 3
7906: PUSH
7907: LD_INT 33
7909: EQUAL
7910: IFFALSE 7920
// sRandom := true ;
7912: LD_ADDR_EXP 87
7916: PUSH
7917: LD_INT 1
7919: ST_TO_ADDR
// if p3 = 34 then
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 34
7927: EQUAL
7928: IFFALSE 7938
// sShield := true ;
7930: LD_ADDR_EXP 88
7934: PUSH
7935: LD_INT 1
7937: ST_TO_ADDR
// if p3 = 35 then
7938: LD_VAR 0 3
7942: PUSH
7943: LD_INT 35
7945: EQUAL
7946: IFFALSE 7956
// sTime := true ;
7948: LD_ADDR_EXP 89
7952: PUSH
7953: LD_INT 1
7955: ST_TO_ADDR
// if p3 = 36 then
7956: LD_VAR 0 3
7960: PUSH
7961: LD_INT 36
7963: EQUAL
7964: IFFALSE 7974
// sTools := true ;
7966: LD_ADDR_EXP 90
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// if p3 = 101 then
7974: LD_VAR 0 3
7978: PUSH
7979: LD_INT 101
7981: EQUAL
7982: IFFALSE 7992
// sSold := true ;
7984: LD_ADDR_EXP 55
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// if p3 = 102 then
7992: LD_VAR 0 3
7996: PUSH
7997: LD_INT 102
7999: EQUAL
8000: IFFALSE 8010
// sDiff := true ;
8002: LD_ADDR_EXP 56
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// if p3 = 103 then
8010: LD_VAR 0 3
8014: PUSH
8015: LD_INT 103
8017: EQUAL
8018: IFFALSE 8028
// sFog := true ;
8020: LD_ADDR_EXP 59
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// if p3 = 104 then
8028: LD_VAR 0 3
8032: PUSH
8033: LD_INT 104
8035: EQUAL
8036: IFFALSE 8046
// sReset := true ;
8038: LD_ADDR_EXP 60
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// if p3 = 105 then
8046: LD_VAR 0 3
8050: PUSH
8051: LD_INT 105
8053: EQUAL
8054: IFFALSE 8064
// sSun := true ;
8056: LD_ADDR_EXP 61
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// if p3 = 106 then
8064: LD_VAR 0 3
8068: PUSH
8069: LD_INT 106
8071: EQUAL
8072: IFFALSE 8082
// sTiger := true ;
8074: LD_ADDR_EXP 57
8078: PUSH
8079: LD_INT 1
8081: ST_TO_ADDR
// if p3 = 107 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 107
8089: EQUAL
8090: IFFALSE 8100
// sBomb := true ;
8092: LD_ADDR_EXP 58
8096: PUSH
8097: LD_INT 1
8099: ST_TO_ADDR
// if p3 = 108 then
8100: LD_VAR 0 3
8104: PUSH
8105: LD_INT 108
8107: EQUAL
8108: IFFALSE 8118
// sWound := true ;
8110: LD_ADDR_EXP 66
8114: PUSH
8115: LD_INT 1
8117: ST_TO_ADDR
// if p3 = 109 then
8118: LD_VAR 0 3
8122: PUSH
8123: LD_INT 109
8125: EQUAL
8126: IFFALSE 8136
// sBetray := true ;
8128: LD_ADDR_EXP 70
8132: PUSH
8133: LD_INT 1
8135: ST_TO_ADDR
// if p3 = 110 then
8136: LD_VAR 0 3
8140: PUSH
8141: LD_INT 110
8143: EQUAL
8144: IFFALSE 8154
// sContamin := true ;
8146: LD_ADDR_EXP 71
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// if p3 = 111 then
8154: LD_VAR 0 3
8158: PUSH
8159: LD_INT 111
8161: EQUAL
8162: IFFALSE 8172
// sOil := true ;
8164: LD_ADDR_EXP 73
8168: PUSH
8169: LD_INT 1
8171: ST_TO_ADDR
// if p3 = 112 then
8172: LD_VAR 0 3
8176: PUSH
8177: LD_INT 112
8179: EQUAL
8180: IFFALSE 8190
// sStu := true ;
8182: LD_ADDR_EXP 77
8186: PUSH
8187: LD_INT 1
8189: ST_TO_ADDR
// if p3 = 113 then
8190: LD_VAR 0 3
8194: PUSH
8195: LD_INT 113
8197: EQUAL
8198: IFFALSE 8208
// sBazooka := true ;
8200: LD_ADDR_EXP 80
8204: PUSH
8205: LD_INT 1
8207: ST_TO_ADDR
// if p3 = 114 then
8208: LD_VAR 0 3
8212: PUSH
8213: LD_INT 114
8215: EQUAL
8216: IFFALSE 8226
// sMortar := true ;
8218: LD_ADDR_EXP 81
8222: PUSH
8223: LD_INT 1
8225: ST_TO_ADDR
// if p3 = 115 then
8226: LD_VAR 0 3
8230: PUSH
8231: LD_INT 115
8233: EQUAL
8234: IFFALSE 8244
// sRanger := true ;
8236: LD_ADDR_EXP 91
8240: PUSH
8241: LD_INT 1
8243: ST_TO_ADDR
// if p3 = 116 then
8244: LD_VAR 0 3
8248: PUSH
8249: LD_INT 116
8251: EQUAL
8252: IFFALSE 8262
// sComputer := true ;
8254: LD_ADDR_EXP 92
8258: PUSH
8259: LD_INT 1
8261: ST_TO_ADDR
// if p3 = 117 then
8262: LD_VAR 0 3
8266: PUSH
8267: LD_INT 117
8269: EQUAL
8270: IFFALSE 8280
// s30 := true ;
8272: LD_ADDR_EXP 93
8276: PUSH
8277: LD_INT 1
8279: ST_TO_ADDR
// if p3 = 118 then
8280: LD_VAR 0 3
8284: PUSH
8285: LD_INT 118
8287: EQUAL
8288: IFFALSE 8298
// s60 := true ;
8290: LD_ADDR_EXP 94
8294: PUSH
8295: LD_INT 1
8297: ST_TO_ADDR
// end ; if p2 = 101 then
8298: LD_VAR 0 2
8302: PUSH
8303: LD_INT 101
8305: EQUAL
8306: IFFALSE 8434
// begin case p3 of 1 :
8308: LD_VAR 0 3
8312: PUSH
8313: LD_INT 1
8315: DOUBLE
8316: EQUAL
8317: IFTRUE 8321
8319: GO 8328
8321: POP
// hHackUnlimitedResources ; 2 :
8322: CALL 20532 0 0
8326: GO 8434
8328: LD_INT 2
8330: DOUBLE
8331: EQUAL
8332: IFTRUE 8336
8334: GO 8343
8336: POP
// hHackSetLevel10 ; 3 :
8337: CALL 20665 0 0
8341: GO 8434
8343: LD_INT 3
8345: DOUBLE
8346: EQUAL
8347: IFTRUE 8351
8349: GO 8358
8351: POP
// hHackSetLevel10YourUnits ; 4 :
8352: CALL 20750 0 0
8356: GO 8434
8358: LD_INT 4
8360: DOUBLE
8361: EQUAL
8362: IFTRUE 8366
8364: GO 8373
8366: POP
// hHackInvincible ; 5 :
8367: CALL 21198 0 0
8371: GO 8434
8373: LD_INT 5
8375: DOUBLE
8376: EQUAL
8377: IFTRUE 8381
8379: GO 8388
8381: POP
// hHackInvisible ; 6 :
8382: CALL 21309 0 0
8386: GO 8434
8388: LD_INT 6
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8403
8396: POP
// hHackChangeYourSide ; 7 :
8397: CALL 21366 0 0
8401: GO 8434
8403: LD_INT 7
8405: DOUBLE
8406: EQUAL
8407: IFTRUE 8411
8409: GO 8418
8411: POP
// hHackChangeUnitSide ; 8 :
8412: CALL 21408 0 0
8416: GO 8434
8418: LD_INT 8
8420: DOUBLE
8421: EQUAL
8422: IFTRUE 8426
8424: GO 8433
8426: POP
// hHackFog ; end ;
8427: CALL 21509 0 0
8431: GO 8434
8433: POP
// end ; end ;
8434: LD_VAR 0 7
8438: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8439: GO 8441
8441: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8442: LD_STRING initStreamRollete();
8444: PPUSH
8445: CALL_OW 559
// InitStreamMode ;
8449: CALL 8461 0 0
// DefineStreamItems ( false ) ;
8453: LD_INT 0
8455: PPUSH
8456: CALL 8925 0 1
// end ;
8460: END
// function InitStreamMode ; begin
8461: LD_INT 0
8463: PPUSH
// streamModeActive := false ;
8464: LD_ADDR_EXP 38
8468: PUSH
8469: LD_INT 0
8471: ST_TO_ADDR
// normalCounter := 36 ;
8472: LD_ADDR_EXP 39
8476: PUSH
8477: LD_INT 36
8479: ST_TO_ADDR
// hardcoreCounter := 18 ;
8480: LD_ADDR_EXP 40
8484: PUSH
8485: LD_INT 18
8487: ST_TO_ADDR
// sRocket := false ;
8488: LD_ADDR_EXP 43
8492: PUSH
8493: LD_INT 0
8495: ST_TO_ADDR
// sSpeed := false ;
8496: LD_ADDR_EXP 42
8500: PUSH
8501: LD_INT 0
8503: ST_TO_ADDR
// sEngine := false ;
8504: LD_ADDR_EXP 44
8508: PUSH
8509: LD_INT 0
8511: ST_TO_ADDR
// sSpec := false ;
8512: LD_ADDR_EXP 41
8516: PUSH
8517: LD_INT 0
8519: ST_TO_ADDR
// sLevel := false ;
8520: LD_ADDR_EXP 45
8524: PUSH
8525: LD_INT 0
8527: ST_TO_ADDR
// sArmoury := false ;
8528: LD_ADDR_EXP 46
8532: PUSH
8533: LD_INT 0
8535: ST_TO_ADDR
// sRadar := false ;
8536: LD_ADDR_EXP 47
8540: PUSH
8541: LD_INT 0
8543: ST_TO_ADDR
// sBunker := false ;
8544: LD_ADDR_EXP 48
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// sHack := false ;
8552: LD_ADDR_EXP 49
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// sFire := false ;
8560: LD_ADDR_EXP 50
8564: PUSH
8565: LD_INT 0
8567: ST_TO_ADDR
// sRefresh := false ;
8568: LD_ADDR_EXP 51
8572: PUSH
8573: LD_INT 0
8575: ST_TO_ADDR
// sExp := false ;
8576: LD_ADDR_EXP 52
8580: PUSH
8581: LD_INT 0
8583: ST_TO_ADDR
// sDepot := false ;
8584: LD_ADDR_EXP 53
8588: PUSH
8589: LD_INT 0
8591: ST_TO_ADDR
// sFlag := false ;
8592: LD_ADDR_EXP 54
8596: PUSH
8597: LD_INT 0
8599: ST_TO_ADDR
// sKamikadze := false ;
8600: LD_ADDR_EXP 62
8604: PUSH
8605: LD_INT 0
8607: ST_TO_ADDR
// sTroll := false ;
8608: LD_ADDR_EXP 63
8612: PUSH
8613: LD_INT 0
8615: ST_TO_ADDR
// sSlow := false ;
8616: LD_ADDR_EXP 64
8620: PUSH
8621: LD_INT 0
8623: ST_TO_ADDR
// sLack := false ;
8624: LD_ADDR_EXP 65
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// sTank := false ;
8632: LD_ADDR_EXP 67
8636: PUSH
8637: LD_INT 0
8639: ST_TO_ADDR
// sRemote := false ;
8640: LD_ADDR_EXP 68
8644: PUSH
8645: LD_INT 0
8647: ST_TO_ADDR
// sPowell := false ;
8648: LD_ADDR_EXP 69
8652: PUSH
8653: LD_INT 0
8655: ST_TO_ADDR
// sTeleport := false ;
8656: LD_ADDR_EXP 72
8660: PUSH
8661: LD_INT 0
8663: ST_TO_ADDR
// sOilTower := false ;
8664: LD_ADDR_EXP 74
8668: PUSH
8669: LD_INT 0
8671: ST_TO_ADDR
// sShovel := false ;
8672: LD_ADDR_EXP 75
8676: PUSH
8677: LD_INT 0
8679: ST_TO_ADDR
// sSheik := false ;
8680: LD_ADDR_EXP 76
8684: PUSH
8685: LD_INT 0
8687: ST_TO_ADDR
// sEarthquake := false ;
8688: LD_ADDR_EXP 78
8692: PUSH
8693: LD_INT 0
8695: ST_TO_ADDR
// sAI := false ;
8696: LD_ADDR_EXP 79
8700: PUSH
8701: LD_INT 0
8703: ST_TO_ADDR
// sCargo := false ;
8704: LD_ADDR_EXP 82
8708: PUSH
8709: LD_INT 0
8711: ST_TO_ADDR
// sDLaser := false ;
8712: LD_ADDR_EXP 83
8716: PUSH
8717: LD_INT 0
8719: ST_TO_ADDR
// sExchange := false ;
8720: LD_ADDR_EXP 84
8724: PUSH
8725: LD_INT 0
8727: ST_TO_ADDR
// sFac := false ;
8728: LD_ADDR_EXP 85
8732: PUSH
8733: LD_INT 0
8735: ST_TO_ADDR
// sPower := false ;
8736: LD_ADDR_EXP 86
8740: PUSH
8741: LD_INT 0
8743: ST_TO_ADDR
// sRandom := false ;
8744: LD_ADDR_EXP 87
8748: PUSH
8749: LD_INT 0
8751: ST_TO_ADDR
// sShield := false ;
8752: LD_ADDR_EXP 88
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// sTime := false ;
8760: LD_ADDR_EXP 89
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// sTools := false ;
8768: LD_ADDR_EXP 90
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// sSold := false ;
8776: LD_ADDR_EXP 55
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// sDiff := false ;
8784: LD_ADDR_EXP 56
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// sFog := false ;
8792: LD_ADDR_EXP 59
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// sReset := false ;
8800: LD_ADDR_EXP 60
8804: PUSH
8805: LD_INT 0
8807: ST_TO_ADDR
// sSun := false ;
8808: LD_ADDR_EXP 61
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// sTiger := false ;
8816: LD_ADDR_EXP 57
8820: PUSH
8821: LD_INT 0
8823: ST_TO_ADDR
// sBomb := false ;
8824: LD_ADDR_EXP 58
8828: PUSH
8829: LD_INT 0
8831: ST_TO_ADDR
// sWound := false ;
8832: LD_ADDR_EXP 66
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// sBetray := false ;
8840: LD_ADDR_EXP 70
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// sContamin := false ;
8848: LD_ADDR_EXP 71
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// sOil := false ;
8856: LD_ADDR_EXP 73
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// sStu := false ;
8864: LD_ADDR_EXP 77
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// sBazooka := false ;
8872: LD_ADDR_EXP 80
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// sMortar := false ;
8880: LD_ADDR_EXP 81
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// sRanger := false ;
8888: LD_ADDR_EXP 91
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// sComputer := false ;
8896: LD_ADDR_EXP 92
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// s30 := false ;
8904: LD_ADDR_EXP 93
8908: PUSH
8909: LD_INT 0
8911: ST_TO_ADDR
// s60 := false ;
8912: LD_ADDR_EXP 94
8916: PUSH
8917: LD_INT 0
8919: ST_TO_ADDR
// end ;
8920: LD_VAR 0 1
8924: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8925: LD_INT 0
8927: PPUSH
8928: PPUSH
8929: PPUSH
8930: PPUSH
8931: PPUSH
8932: PPUSH
8933: PPUSH
// result := [ ] ;
8934: LD_ADDR_VAR 0 2
8938: PUSH
8939: EMPTY
8940: ST_TO_ADDR
// if campaign_id = 1 then
8941: LD_OWVAR 69
8945: PUSH
8946: LD_INT 1
8948: EQUAL
8949: IFFALSE 12115
// begin case mission_number of 1 :
8951: LD_OWVAR 70
8955: PUSH
8956: LD_INT 1
8958: DOUBLE
8959: EQUAL
8960: IFTRUE 8964
8962: GO 9040
8964: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_INT 2
8972: PUSH
8973: LD_INT 4
8975: PUSH
8976: LD_INT 11
8978: PUSH
8979: LD_INT 12
8981: PUSH
8982: LD_INT 15
8984: PUSH
8985: LD_INT 16
8987: PUSH
8988: LD_INT 22
8990: PUSH
8991: LD_INT 23
8993: PUSH
8994: LD_INT 26
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: PUSH
9008: LD_INT 101
9010: PUSH
9011: LD_INT 102
9013: PUSH
9014: LD_INT 106
9016: PUSH
9017: LD_INT 116
9019: PUSH
9020: LD_INT 117
9022: PUSH
9023: LD_INT 118
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: ST_TO_ADDR
9038: GO 12113
9040: LD_INT 2
9042: DOUBLE
9043: EQUAL
9044: IFTRUE 9048
9046: GO 9132
9048: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9049: LD_ADDR_VAR 0 2
9053: PUSH
9054: LD_INT 2
9056: PUSH
9057: LD_INT 4
9059: PUSH
9060: LD_INT 11
9062: PUSH
9063: LD_INT 12
9065: PUSH
9066: LD_INT 15
9068: PUSH
9069: LD_INT 16
9071: PUSH
9072: LD_INT 22
9074: PUSH
9075: LD_INT 23
9077: PUSH
9078: LD_INT 26
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: PUSH
9092: LD_INT 101
9094: PUSH
9095: LD_INT 102
9097: PUSH
9098: LD_INT 105
9100: PUSH
9101: LD_INT 106
9103: PUSH
9104: LD_INT 108
9106: PUSH
9107: LD_INT 116
9109: PUSH
9110: LD_INT 117
9112: PUSH
9113: LD_INT 118
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: ST_TO_ADDR
9130: GO 12113
9132: LD_INT 3
9134: DOUBLE
9135: EQUAL
9136: IFTRUE 9140
9138: GO 9228
9140: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9141: LD_ADDR_VAR 0 2
9145: PUSH
9146: LD_INT 2
9148: PUSH
9149: LD_INT 4
9151: PUSH
9152: LD_INT 5
9154: PUSH
9155: LD_INT 11
9157: PUSH
9158: LD_INT 12
9160: PUSH
9161: LD_INT 15
9163: PUSH
9164: LD_INT 16
9166: PUSH
9167: LD_INT 22
9169: PUSH
9170: LD_INT 26
9172: PUSH
9173: LD_INT 36
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 101
9190: PUSH
9191: LD_INT 102
9193: PUSH
9194: LD_INT 105
9196: PUSH
9197: LD_INT 106
9199: PUSH
9200: LD_INT 108
9202: PUSH
9203: LD_INT 116
9205: PUSH
9206: LD_INT 117
9208: PUSH
9209: LD_INT 118
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: ST_TO_ADDR
9226: GO 12113
9228: LD_INT 4
9230: DOUBLE
9231: EQUAL
9232: IFTRUE 9236
9234: GO 9332
9236: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9237: LD_ADDR_VAR 0 2
9241: PUSH
9242: LD_INT 2
9244: PUSH
9245: LD_INT 4
9247: PUSH
9248: LD_INT 5
9250: PUSH
9251: LD_INT 8
9253: PUSH
9254: LD_INT 11
9256: PUSH
9257: LD_INT 12
9259: PUSH
9260: LD_INT 15
9262: PUSH
9263: LD_INT 16
9265: PUSH
9266: LD_INT 22
9268: PUSH
9269: LD_INT 23
9271: PUSH
9272: LD_INT 26
9274: PUSH
9275: LD_INT 36
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 101
9294: PUSH
9295: LD_INT 102
9297: PUSH
9298: LD_INT 105
9300: PUSH
9301: LD_INT 106
9303: PUSH
9304: LD_INT 108
9306: PUSH
9307: LD_INT 116
9309: PUSH
9310: LD_INT 117
9312: PUSH
9313: LD_INT 118
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: ST_TO_ADDR
9330: GO 12113
9332: LD_INT 5
9334: DOUBLE
9335: EQUAL
9336: IFTRUE 9340
9338: GO 9452
9340: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: LD_INT 4
9351: PUSH
9352: LD_INT 5
9354: PUSH
9355: LD_INT 6
9357: PUSH
9358: LD_INT 8
9360: PUSH
9361: LD_INT 11
9363: PUSH
9364: LD_INT 12
9366: PUSH
9367: LD_INT 15
9369: PUSH
9370: LD_INT 16
9372: PUSH
9373: LD_INT 22
9375: PUSH
9376: LD_INT 23
9378: PUSH
9379: LD_INT 25
9381: PUSH
9382: LD_INT 26
9384: PUSH
9385: LD_INT 36
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 101
9406: PUSH
9407: LD_INT 102
9409: PUSH
9410: LD_INT 105
9412: PUSH
9413: LD_INT 106
9415: PUSH
9416: LD_INT 108
9418: PUSH
9419: LD_INT 109
9421: PUSH
9422: LD_INT 112
9424: PUSH
9425: LD_INT 116
9427: PUSH
9428: LD_INT 117
9430: PUSH
9431: LD_INT 118
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: ST_TO_ADDR
9450: GO 12113
9452: LD_INT 6
9454: DOUBLE
9455: EQUAL
9456: IFTRUE 9460
9458: GO 9592
9460: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9461: LD_ADDR_VAR 0 2
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: LD_INT 4
9471: PUSH
9472: LD_INT 5
9474: PUSH
9475: LD_INT 6
9477: PUSH
9478: LD_INT 8
9480: PUSH
9481: LD_INT 11
9483: PUSH
9484: LD_INT 12
9486: PUSH
9487: LD_INT 15
9489: PUSH
9490: LD_INT 16
9492: PUSH
9493: LD_INT 20
9495: PUSH
9496: LD_INT 21
9498: PUSH
9499: LD_INT 22
9501: PUSH
9502: LD_INT 23
9504: PUSH
9505: LD_INT 25
9507: PUSH
9508: LD_INT 26
9510: PUSH
9511: LD_INT 30
9513: PUSH
9514: LD_INT 31
9516: PUSH
9517: LD_INT 32
9519: PUSH
9520: LD_INT 36
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: PUSH
9544: LD_INT 101
9546: PUSH
9547: LD_INT 102
9549: PUSH
9550: LD_INT 105
9552: PUSH
9553: LD_INT 106
9555: PUSH
9556: LD_INT 108
9558: PUSH
9559: LD_INT 109
9561: PUSH
9562: LD_INT 112
9564: PUSH
9565: LD_INT 116
9567: PUSH
9568: LD_INT 117
9570: PUSH
9571: LD_INT 118
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: ST_TO_ADDR
9590: GO 12113
9592: LD_INT 7
9594: DOUBLE
9595: EQUAL
9596: IFTRUE 9600
9598: GO 9712
9600: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9601: LD_ADDR_VAR 0 2
9605: PUSH
9606: LD_INT 2
9608: PUSH
9609: LD_INT 4
9611: PUSH
9612: LD_INT 5
9614: PUSH
9615: LD_INT 7
9617: PUSH
9618: LD_INT 11
9620: PUSH
9621: LD_INT 12
9623: PUSH
9624: LD_INT 15
9626: PUSH
9627: LD_INT 16
9629: PUSH
9630: LD_INT 20
9632: PUSH
9633: LD_INT 21
9635: PUSH
9636: LD_INT 22
9638: PUSH
9639: LD_INT 23
9641: PUSH
9642: LD_INT 25
9644: PUSH
9645: LD_INT 26
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: PUSH
9664: LD_INT 101
9666: PUSH
9667: LD_INT 102
9669: PUSH
9670: LD_INT 103
9672: PUSH
9673: LD_INT 105
9675: PUSH
9676: LD_INT 106
9678: PUSH
9679: LD_INT 108
9681: PUSH
9682: LD_INT 112
9684: PUSH
9685: LD_INT 116
9687: PUSH
9688: LD_INT 117
9690: PUSH
9691: LD_INT 118
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: ST_TO_ADDR
9710: GO 12113
9712: LD_INT 8
9714: DOUBLE
9715: EQUAL
9716: IFTRUE 9720
9718: GO 9860
9720: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9721: LD_ADDR_VAR 0 2
9725: PUSH
9726: LD_INT 2
9728: PUSH
9729: LD_INT 4
9731: PUSH
9732: LD_INT 5
9734: PUSH
9735: LD_INT 6
9737: PUSH
9738: LD_INT 7
9740: PUSH
9741: LD_INT 8
9743: PUSH
9744: LD_INT 11
9746: PUSH
9747: LD_INT 12
9749: PUSH
9750: LD_INT 15
9752: PUSH
9753: LD_INT 16
9755: PUSH
9756: LD_INT 20
9758: PUSH
9759: LD_INT 21
9761: PUSH
9762: LD_INT 22
9764: PUSH
9765: LD_INT 23
9767: PUSH
9768: LD_INT 25
9770: PUSH
9771: LD_INT 26
9773: PUSH
9774: LD_INT 30
9776: PUSH
9777: LD_INT 31
9779: PUSH
9780: LD_INT 32
9782: PUSH
9783: LD_INT 36
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 101
9810: PUSH
9811: LD_INT 102
9813: PUSH
9814: LD_INT 103
9816: PUSH
9817: LD_INT 105
9819: PUSH
9820: LD_INT 106
9822: PUSH
9823: LD_INT 108
9825: PUSH
9826: LD_INT 109
9828: PUSH
9829: LD_INT 112
9831: PUSH
9832: LD_INT 116
9834: PUSH
9835: LD_INT 117
9837: PUSH
9838: LD_INT 118
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: ST_TO_ADDR
9858: GO 12113
9860: LD_INT 9
9862: DOUBLE
9863: EQUAL
9864: IFTRUE 9868
9866: GO 10016
9868: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9869: LD_ADDR_VAR 0 2
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: LD_INT 4
9879: PUSH
9880: LD_INT 5
9882: PUSH
9883: LD_INT 6
9885: PUSH
9886: LD_INT 7
9888: PUSH
9889: LD_INT 8
9891: PUSH
9892: LD_INT 11
9894: PUSH
9895: LD_INT 12
9897: PUSH
9898: LD_INT 15
9900: PUSH
9901: LD_INT 16
9903: PUSH
9904: LD_INT 20
9906: PUSH
9907: LD_INT 21
9909: PUSH
9910: LD_INT 22
9912: PUSH
9913: LD_INT 23
9915: PUSH
9916: LD_INT 25
9918: PUSH
9919: LD_INT 26
9921: PUSH
9922: LD_INT 28
9924: PUSH
9925: LD_INT 30
9927: PUSH
9928: LD_INT 31
9930: PUSH
9931: LD_INT 32
9933: PUSH
9934: LD_INT 36
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 101
9962: PUSH
9963: LD_INT 102
9965: PUSH
9966: LD_INT 103
9968: PUSH
9969: LD_INT 105
9971: PUSH
9972: LD_INT 106
9974: PUSH
9975: LD_INT 108
9977: PUSH
9978: LD_INT 109
9980: PUSH
9981: LD_INT 112
9983: PUSH
9984: LD_INT 114
9986: PUSH
9987: LD_INT 116
9989: PUSH
9990: LD_INT 117
9992: PUSH
9993: LD_INT 118
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: ST_TO_ADDR
10014: GO 12113
10016: LD_INT 10
10018: DOUBLE
10019: EQUAL
10020: IFTRUE 10024
10022: GO 10220
10024: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10025: LD_ADDR_VAR 0 2
10029: PUSH
10030: LD_INT 2
10032: PUSH
10033: LD_INT 4
10035: PUSH
10036: LD_INT 5
10038: PUSH
10039: LD_INT 6
10041: PUSH
10042: LD_INT 7
10044: PUSH
10045: LD_INT 8
10047: PUSH
10048: LD_INT 9
10050: PUSH
10051: LD_INT 10
10053: PUSH
10054: LD_INT 11
10056: PUSH
10057: LD_INT 12
10059: PUSH
10060: LD_INT 13
10062: PUSH
10063: LD_INT 14
10065: PUSH
10066: LD_INT 15
10068: PUSH
10069: LD_INT 16
10071: PUSH
10072: LD_INT 17
10074: PUSH
10075: LD_INT 18
10077: PUSH
10078: LD_INT 19
10080: PUSH
10081: LD_INT 20
10083: PUSH
10084: LD_INT 21
10086: PUSH
10087: LD_INT 22
10089: PUSH
10090: LD_INT 23
10092: PUSH
10093: LD_INT 24
10095: PUSH
10096: LD_INT 25
10098: PUSH
10099: LD_INT 26
10101: PUSH
10102: LD_INT 28
10104: PUSH
10105: LD_INT 30
10107: PUSH
10108: LD_INT 31
10110: PUSH
10111: LD_INT 32
10113: PUSH
10114: LD_INT 36
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 101
10150: PUSH
10151: LD_INT 102
10153: PUSH
10154: LD_INT 103
10156: PUSH
10157: LD_INT 104
10159: PUSH
10160: LD_INT 105
10162: PUSH
10163: LD_INT 106
10165: PUSH
10166: LD_INT 107
10168: PUSH
10169: LD_INT 108
10171: PUSH
10172: LD_INT 109
10174: PUSH
10175: LD_INT 110
10177: PUSH
10178: LD_INT 111
10180: PUSH
10181: LD_INT 112
10183: PUSH
10184: LD_INT 114
10186: PUSH
10187: LD_INT 116
10189: PUSH
10190: LD_INT 117
10192: PUSH
10193: LD_INT 118
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: ST_TO_ADDR
10218: GO 12113
10220: LD_INT 11
10222: DOUBLE
10223: EQUAL
10224: IFTRUE 10228
10226: GO 10432
10228: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10229: LD_ADDR_VAR 0 2
10233: PUSH
10234: LD_INT 2
10236: PUSH
10237: LD_INT 3
10239: PUSH
10240: LD_INT 4
10242: PUSH
10243: LD_INT 5
10245: PUSH
10246: LD_INT 6
10248: PUSH
10249: LD_INT 7
10251: PUSH
10252: LD_INT 8
10254: PUSH
10255: LD_INT 9
10257: PUSH
10258: LD_INT 10
10260: PUSH
10261: LD_INT 11
10263: PUSH
10264: LD_INT 12
10266: PUSH
10267: LD_INT 13
10269: PUSH
10270: LD_INT 14
10272: PUSH
10273: LD_INT 15
10275: PUSH
10276: LD_INT 16
10278: PUSH
10279: LD_INT 17
10281: PUSH
10282: LD_INT 18
10284: PUSH
10285: LD_INT 19
10287: PUSH
10288: LD_INT 20
10290: PUSH
10291: LD_INT 21
10293: PUSH
10294: LD_INT 22
10296: PUSH
10297: LD_INT 23
10299: PUSH
10300: LD_INT 24
10302: PUSH
10303: LD_INT 25
10305: PUSH
10306: LD_INT 26
10308: PUSH
10309: LD_INT 28
10311: PUSH
10312: LD_INT 30
10314: PUSH
10315: LD_INT 31
10317: PUSH
10318: LD_INT 32
10320: PUSH
10321: LD_INT 34
10323: PUSH
10324: LD_INT 36
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 101
10362: PUSH
10363: LD_INT 102
10365: PUSH
10366: LD_INT 103
10368: PUSH
10369: LD_INT 104
10371: PUSH
10372: LD_INT 105
10374: PUSH
10375: LD_INT 106
10377: PUSH
10378: LD_INT 107
10380: PUSH
10381: LD_INT 108
10383: PUSH
10384: LD_INT 109
10386: PUSH
10387: LD_INT 110
10389: PUSH
10390: LD_INT 111
10392: PUSH
10393: LD_INT 112
10395: PUSH
10396: LD_INT 114
10398: PUSH
10399: LD_INT 116
10401: PUSH
10402: LD_INT 117
10404: PUSH
10405: LD_INT 118
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: ST_TO_ADDR
10430: GO 12113
10432: LD_INT 12
10434: DOUBLE
10435: EQUAL
10436: IFTRUE 10440
10438: GO 10660
10440: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10441: LD_ADDR_VAR 0 2
10445: PUSH
10446: LD_INT 1
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 3
10454: PUSH
10455: LD_INT 4
10457: PUSH
10458: LD_INT 5
10460: PUSH
10461: LD_INT 6
10463: PUSH
10464: LD_INT 7
10466: PUSH
10467: LD_INT 8
10469: PUSH
10470: LD_INT 9
10472: PUSH
10473: LD_INT 10
10475: PUSH
10476: LD_INT 11
10478: PUSH
10479: LD_INT 12
10481: PUSH
10482: LD_INT 13
10484: PUSH
10485: LD_INT 14
10487: PUSH
10488: LD_INT 15
10490: PUSH
10491: LD_INT 16
10493: PUSH
10494: LD_INT 17
10496: PUSH
10497: LD_INT 18
10499: PUSH
10500: LD_INT 19
10502: PUSH
10503: LD_INT 20
10505: PUSH
10506: LD_INT 21
10508: PUSH
10509: LD_INT 22
10511: PUSH
10512: LD_INT 23
10514: PUSH
10515: LD_INT 24
10517: PUSH
10518: LD_INT 25
10520: PUSH
10521: LD_INT 26
10523: PUSH
10524: LD_INT 27
10526: PUSH
10527: LD_INT 28
10529: PUSH
10530: LD_INT 30
10532: PUSH
10533: LD_INT 31
10535: PUSH
10536: LD_INT 32
10538: PUSH
10539: LD_INT 33
10541: PUSH
10542: LD_INT 34
10544: PUSH
10545: LD_INT 36
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: PUSH
10584: LD_INT 101
10586: PUSH
10587: LD_INT 102
10589: PUSH
10590: LD_INT 103
10592: PUSH
10593: LD_INT 104
10595: PUSH
10596: LD_INT 105
10598: PUSH
10599: LD_INT 106
10601: PUSH
10602: LD_INT 107
10604: PUSH
10605: LD_INT 108
10607: PUSH
10608: LD_INT 109
10610: PUSH
10611: LD_INT 110
10613: PUSH
10614: LD_INT 111
10616: PUSH
10617: LD_INT 112
10619: PUSH
10620: LD_INT 113
10622: PUSH
10623: LD_INT 114
10625: PUSH
10626: LD_INT 116
10628: PUSH
10629: LD_INT 117
10631: PUSH
10632: LD_INT 118
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: ST_TO_ADDR
10658: GO 12113
10660: LD_INT 13
10662: DOUBLE
10663: EQUAL
10664: IFTRUE 10668
10666: GO 10876
10668: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10669: LD_ADDR_VAR 0 2
10673: PUSH
10674: LD_INT 1
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: LD_INT 3
10682: PUSH
10683: LD_INT 4
10685: PUSH
10686: LD_INT 5
10688: PUSH
10689: LD_INT 8
10691: PUSH
10692: LD_INT 9
10694: PUSH
10695: LD_INT 10
10697: PUSH
10698: LD_INT 11
10700: PUSH
10701: LD_INT 12
10703: PUSH
10704: LD_INT 14
10706: PUSH
10707: LD_INT 15
10709: PUSH
10710: LD_INT 16
10712: PUSH
10713: LD_INT 17
10715: PUSH
10716: LD_INT 18
10718: PUSH
10719: LD_INT 19
10721: PUSH
10722: LD_INT 20
10724: PUSH
10725: LD_INT 21
10727: PUSH
10728: LD_INT 22
10730: PUSH
10731: LD_INT 23
10733: PUSH
10734: LD_INT 24
10736: PUSH
10737: LD_INT 25
10739: PUSH
10740: LD_INT 26
10742: PUSH
10743: LD_INT 27
10745: PUSH
10746: LD_INT 28
10748: PUSH
10749: LD_INT 30
10751: PUSH
10752: LD_INT 31
10754: PUSH
10755: LD_INT 32
10757: PUSH
10758: LD_INT 33
10760: PUSH
10761: LD_INT 34
10763: PUSH
10764: LD_INT 36
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 101
10802: PUSH
10803: LD_INT 102
10805: PUSH
10806: LD_INT 103
10808: PUSH
10809: LD_INT 104
10811: PUSH
10812: LD_INT 105
10814: PUSH
10815: LD_INT 106
10817: PUSH
10818: LD_INT 107
10820: PUSH
10821: LD_INT 108
10823: PUSH
10824: LD_INT 109
10826: PUSH
10827: LD_INT 110
10829: PUSH
10830: LD_INT 111
10832: PUSH
10833: LD_INT 112
10835: PUSH
10836: LD_INT 113
10838: PUSH
10839: LD_INT 114
10841: PUSH
10842: LD_INT 116
10844: PUSH
10845: LD_INT 117
10847: PUSH
10848: LD_INT 118
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: ST_TO_ADDR
10874: GO 12113
10876: LD_INT 14
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 11108
10884: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10885: LD_ADDR_VAR 0 2
10889: PUSH
10890: LD_INT 1
10892: PUSH
10893: LD_INT 2
10895: PUSH
10896: LD_INT 3
10898: PUSH
10899: LD_INT 4
10901: PUSH
10902: LD_INT 5
10904: PUSH
10905: LD_INT 6
10907: PUSH
10908: LD_INT 7
10910: PUSH
10911: LD_INT 8
10913: PUSH
10914: LD_INT 9
10916: PUSH
10917: LD_INT 10
10919: PUSH
10920: LD_INT 11
10922: PUSH
10923: LD_INT 12
10925: PUSH
10926: LD_INT 13
10928: PUSH
10929: LD_INT 14
10931: PUSH
10932: LD_INT 15
10934: PUSH
10935: LD_INT 16
10937: PUSH
10938: LD_INT 17
10940: PUSH
10941: LD_INT 18
10943: PUSH
10944: LD_INT 19
10946: PUSH
10947: LD_INT 20
10949: PUSH
10950: LD_INT 21
10952: PUSH
10953: LD_INT 22
10955: PUSH
10956: LD_INT 23
10958: PUSH
10959: LD_INT 24
10961: PUSH
10962: LD_INT 25
10964: PUSH
10965: LD_INT 26
10967: PUSH
10968: LD_INT 27
10970: PUSH
10971: LD_INT 28
10973: PUSH
10974: LD_INT 29
10976: PUSH
10977: LD_INT 30
10979: PUSH
10980: LD_INT 31
10982: PUSH
10983: LD_INT 32
10985: PUSH
10986: LD_INT 33
10988: PUSH
10989: LD_INT 34
10991: PUSH
10992: LD_INT 36
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 101
11034: PUSH
11035: LD_INT 102
11037: PUSH
11038: LD_INT 103
11040: PUSH
11041: LD_INT 104
11043: PUSH
11044: LD_INT 105
11046: PUSH
11047: LD_INT 106
11049: PUSH
11050: LD_INT 107
11052: PUSH
11053: LD_INT 108
11055: PUSH
11056: LD_INT 109
11058: PUSH
11059: LD_INT 110
11061: PUSH
11062: LD_INT 111
11064: PUSH
11065: LD_INT 112
11067: PUSH
11068: LD_INT 113
11070: PUSH
11071: LD_INT 114
11073: PUSH
11074: LD_INT 116
11076: PUSH
11077: LD_INT 117
11079: PUSH
11080: LD_INT 118
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: ST_TO_ADDR
11106: GO 12113
11108: LD_INT 15
11110: DOUBLE
11111: EQUAL
11112: IFTRUE 11116
11114: GO 11340
11116: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11117: LD_ADDR_VAR 0 2
11121: PUSH
11122: LD_INT 1
11124: PUSH
11125: LD_INT 2
11127: PUSH
11128: LD_INT 3
11130: PUSH
11131: LD_INT 4
11133: PUSH
11134: LD_INT 5
11136: PUSH
11137: LD_INT 6
11139: PUSH
11140: LD_INT 7
11142: PUSH
11143: LD_INT 8
11145: PUSH
11146: LD_INT 9
11148: PUSH
11149: LD_INT 10
11151: PUSH
11152: LD_INT 11
11154: PUSH
11155: LD_INT 12
11157: PUSH
11158: LD_INT 13
11160: PUSH
11161: LD_INT 14
11163: PUSH
11164: LD_INT 15
11166: PUSH
11167: LD_INT 16
11169: PUSH
11170: LD_INT 17
11172: PUSH
11173: LD_INT 18
11175: PUSH
11176: LD_INT 19
11178: PUSH
11179: LD_INT 20
11181: PUSH
11182: LD_INT 21
11184: PUSH
11185: LD_INT 22
11187: PUSH
11188: LD_INT 23
11190: PUSH
11191: LD_INT 24
11193: PUSH
11194: LD_INT 25
11196: PUSH
11197: LD_INT 26
11199: PUSH
11200: LD_INT 27
11202: PUSH
11203: LD_INT 28
11205: PUSH
11206: LD_INT 29
11208: PUSH
11209: LD_INT 30
11211: PUSH
11212: LD_INT 31
11214: PUSH
11215: LD_INT 32
11217: PUSH
11218: LD_INT 33
11220: PUSH
11221: LD_INT 34
11223: PUSH
11224: LD_INT 36
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 101
11266: PUSH
11267: LD_INT 102
11269: PUSH
11270: LD_INT 103
11272: PUSH
11273: LD_INT 104
11275: PUSH
11276: LD_INT 105
11278: PUSH
11279: LD_INT 106
11281: PUSH
11282: LD_INT 107
11284: PUSH
11285: LD_INT 108
11287: PUSH
11288: LD_INT 109
11290: PUSH
11291: LD_INT 110
11293: PUSH
11294: LD_INT 111
11296: PUSH
11297: LD_INT 112
11299: PUSH
11300: LD_INT 113
11302: PUSH
11303: LD_INT 114
11305: PUSH
11306: LD_INT 116
11308: PUSH
11309: LD_INT 117
11311: PUSH
11312: LD_INT 118
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: ST_TO_ADDR
11338: GO 12113
11340: LD_INT 16
11342: DOUBLE
11343: EQUAL
11344: IFTRUE 11348
11346: GO 11484
11348: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11349: LD_ADDR_VAR 0 2
11353: PUSH
11354: LD_INT 2
11356: PUSH
11357: LD_INT 4
11359: PUSH
11360: LD_INT 5
11362: PUSH
11363: LD_INT 7
11365: PUSH
11366: LD_INT 11
11368: PUSH
11369: LD_INT 12
11371: PUSH
11372: LD_INT 15
11374: PUSH
11375: LD_INT 16
11377: PUSH
11378: LD_INT 20
11380: PUSH
11381: LD_INT 21
11383: PUSH
11384: LD_INT 22
11386: PUSH
11387: LD_INT 23
11389: PUSH
11390: LD_INT 25
11392: PUSH
11393: LD_INT 26
11395: PUSH
11396: LD_INT 30
11398: PUSH
11399: LD_INT 31
11401: PUSH
11402: LD_INT 32
11404: PUSH
11405: LD_INT 33
11407: PUSH
11408: LD_INT 34
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 101
11434: PUSH
11435: LD_INT 102
11437: PUSH
11438: LD_INT 103
11440: PUSH
11441: LD_INT 106
11443: PUSH
11444: LD_INT 108
11446: PUSH
11447: LD_INT 112
11449: PUSH
11450: LD_INT 113
11452: PUSH
11453: LD_INT 114
11455: PUSH
11456: LD_INT 116
11458: PUSH
11459: LD_INT 117
11461: PUSH
11462: LD_INT 118
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: ST_TO_ADDR
11482: GO 12113
11484: LD_INT 17
11486: DOUBLE
11487: EQUAL
11488: IFTRUE 11492
11490: GO 11716
11492: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11493: LD_ADDR_VAR 0 2
11497: PUSH
11498: LD_INT 1
11500: PUSH
11501: LD_INT 2
11503: PUSH
11504: LD_INT 3
11506: PUSH
11507: LD_INT 4
11509: PUSH
11510: LD_INT 5
11512: PUSH
11513: LD_INT 6
11515: PUSH
11516: LD_INT 7
11518: PUSH
11519: LD_INT 8
11521: PUSH
11522: LD_INT 9
11524: PUSH
11525: LD_INT 10
11527: PUSH
11528: LD_INT 11
11530: PUSH
11531: LD_INT 12
11533: PUSH
11534: LD_INT 13
11536: PUSH
11537: LD_INT 14
11539: PUSH
11540: LD_INT 15
11542: PUSH
11543: LD_INT 16
11545: PUSH
11546: LD_INT 17
11548: PUSH
11549: LD_INT 18
11551: PUSH
11552: LD_INT 19
11554: PUSH
11555: LD_INT 20
11557: PUSH
11558: LD_INT 21
11560: PUSH
11561: LD_INT 22
11563: PUSH
11564: LD_INT 23
11566: PUSH
11567: LD_INT 24
11569: PUSH
11570: LD_INT 25
11572: PUSH
11573: LD_INT 26
11575: PUSH
11576: LD_INT 27
11578: PUSH
11579: LD_INT 28
11581: PUSH
11582: LD_INT 29
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 31
11590: PUSH
11591: LD_INT 32
11593: PUSH
11594: LD_INT 33
11596: PUSH
11597: LD_INT 34
11599: PUSH
11600: LD_INT 36
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 101
11642: PUSH
11643: LD_INT 102
11645: PUSH
11646: LD_INT 103
11648: PUSH
11649: LD_INT 104
11651: PUSH
11652: LD_INT 105
11654: PUSH
11655: LD_INT 106
11657: PUSH
11658: LD_INT 107
11660: PUSH
11661: LD_INT 108
11663: PUSH
11664: LD_INT 109
11666: PUSH
11667: LD_INT 110
11669: PUSH
11670: LD_INT 111
11672: PUSH
11673: LD_INT 112
11675: PUSH
11676: LD_INT 113
11678: PUSH
11679: LD_INT 114
11681: PUSH
11682: LD_INT 116
11684: PUSH
11685: LD_INT 117
11687: PUSH
11688: LD_INT 118
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: ST_TO_ADDR
11714: GO 12113
11716: LD_INT 18
11718: DOUBLE
11719: EQUAL
11720: IFTRUE 11724
11722: GO 11872
11724: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11725: LD_ADDR_VAR 0 2
11729: PUSH
11730: LD_INT 2
11732: PUSH
11733: LD_INT 4
11735: PUSH
11736: LD_INT 5
11738: PUSH
11739: LD_INT 7
11741: PUSH
11742: LD_INT 11
11744: PUSH
11745: LD_INT 12
11747: PUSH
11748: LD_INT 15
11750: PUSH
11751: LD_INT 16
11753: PUSH
11754: LD_INT 20
11756: PUSH
11757: LD_INT 21
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_INT 23
11765: PUSH
11766: LD_INT 25
11768: PUSH
11769: LD_INT 26
11771: PUSH
11772: LD_INT 30
11774: PUSH
11775: LD_INT 31
11777: PUSH
11778: LD_INT 32
11780: PUSH
11781: LD_INT 33
11783: PUSH
11784: LD_INT 34
11786: PUSH
11787: LD_INT 35
11789: PUSH
11790: LD_INT 36
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: PUSH
11816: LD_INT 101
11818: PUSH
11819: LD_INT 102
11821: PUSH
11822: LD_INT 103
11824: PUSH
11825: LD_INT 106
11827: PUSH
11828: LD_INT 108
11830: PUSH
11831: LD_INT 112
11833: PUSH
11834: LD_INT 113
11836: PUSH
11837: LD_INT 114
11839: PUSH
11840: LD_INT 115
11842: PUSH
11843: LD_INT 116
11845: PUSH
11846: LD_INT 117
11848: PUSH
11849: LD_INT 118
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: ST_TO_ADDR
11870: GO 12113
11872: LD_INT 19
11874: DOUBLE
11875: EQUAL
11876: IFTRUE 11880
11878: GO 12112
11880: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11881: LD_ADDR_VAR 0 2
11885: PUSH
11886: LD_INT 1
11888: PUSH
11889: LD_INT 2
11891: PUSH
11892: LD_INT 3
11894: PUSH
11895: LD_INT 4
11897: PUSH
11898: LD_INT 5
11900: PUSH
11901: LD_INT 6
11903: PUSH
11904: LD_INT 7
11906: PUSH
11907: LD_INT 8
11909: PUSH
11910: LD_INT 9
11912: PUSH
11913: LD_INT 10
11915: PUSH
11916: LD_INT 11
11918: PUSH
11919: LD_INT 12
11921: PUSH
11922: LD_INT 13
11924: PUSH
11925: LD_INT 14
11927: PUSH
11928: LD_INT 15
11930: PUSH
11931: LD_INT 16
11933: PUSH
11934: LD_INT 17
11936: PUSH
11937: LD_INT 18
11939: PUSH
11940: LD_INT 19
11942: PUSH
11943: LD_INT 20
11945: PUSH
11946: LD_INT 21
11948: PUSH
11949: LD_INT 22
11951: PUSH
11952: LD_INT 23
11954: PUSH
11955: LD_INT 24
11957: PUSH
11958: LD_INT 25
11960: PUSH
11961: LD_INT 26
11963: PUSH
11964: LD_INT 27
11966: PUSH
11967: LD_INT 28
11969: PUSH
11970: LD_INT 29
11972: PUSH
11973: LD_INT 30
11975: PUSH
11976: LD_INT 31
11978: PUSH
11979: LD_INT 32
11981: PUSH
11982: LD_INT 33
11984: PUSH
11985: LD_INT 34
11987: PUSH
11988: LD_INT 35
11990: PUSH
11991: LD_INT 36
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 101
12034: PUSH
12035: LD_INT 102
12037: PUSH
12038: LD_INT 103
12040: PUSH
12041: LD_INT 104
12043: PUSH
12044: LD_INT 105
12046: PUSH
12047: LD_INT 106
12049: PUSH
12050: LD_INT 107
12052: PUSH
12053: LD_INT 108
12055: PUSH
12056: LD_INT 109
12058: PUSH
12059: LD_INT 110
12061: PUSH
12062: LD_INT 111
12064: PUSH
12065: LD_INT 112
12067: PUSH
12068: LD_INT 113
12070: PUSH
12071: LD_INT 114
12073: PUSH
12074: LD_INT 115
12076: PUSH
12077: LD_INT 116
12079: PUSH
12080: LD_INT 117
12082: PUSH
12083: LD_INT 118
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: ST_TO_ADDR
12110: GO 12113
12112: POP
// end else
12113: GO 12344
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12115: LD_ADDR_VAR 0 2
12119: PUSH
12120: LD_INT 1
12122: PUSH
12123: LD_INT 2
12125: PUSH
12126: LD_INT 3
12128: PUSH
12129: LD_INT 4
12131: PUSH
12132: LD_INT 5
12134: PUSH
12135: LD_INT 6
12137: PUSH
12138: LD_INT 7
12140: PUSH
12141: LD_INT 8
12143: PUSH
12144: LD_INT 9
12146: PUSH
12147: LD_INT 10
12149: PUSH
12150: LD_INT 11
12152: PUSH
12153: LD_INT 12
12155: PUSH
12156: LD_INT 13
12158: PUSH
12159: LD_INT 14
12161: PUSH
12162: LD_INT 15
12164: PUSH
12165: LD_INT 16
12167: PUSH
12168: LD_INT 17
12170: PUSH
12171: LD_INT 18
12173: PUSH
12174: LD_INT 19
12176: PUSH
12177: LD_INT 20
12179: PUSH
12180: LD_INT 21
12182: PUSH
12183: LD_INT 22
12185: PUSH
12186: LD_INT 23
12188: PUSH
12189: LD_INT 24
12191: PUSH
12192: LD_INT 25
12194: PUSH
12195: LD_INT 26
12197: PUSH
12198: LD_INT 27
12200: PUSH
12201: LD_INT 28
12203: PUSH
12204: LD_INT 29
12206: PUSH
12207: LD_INT 30
12209: PUSH
12210: LD_INT 31
12212: PUSH
12213: LD_INT 32
12215: PUSH
12216: LD_INT 33
12218: PUSH
12219: LD_INT 34
12221: PUSH
12222: LD_INT 35
12224: PUSH
12225: LD_INT 36
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: PUSH
12266: LD_INT 101
12268: PUSH
12269: LD_INT 102
12271: PUSH
12272: LD_INT 103
12274: PUSH
12275: LD_INT 104
12277: PUSH
12278: LD_INT 105
12280: PUSH
12281: LD_INT 106
12283: PUSH
12284: LD_INT 107
12286: PUSH
12287: LD_INT 108
12289: PUSH
12290: LD_INT 109
12292: PUSH
12293: LD_INT 110
12295: PUSH
12296: LD_INT 111
12298: PUSH
12299: LD_INT 112
12301: PUSH
12302: LD_INT 113
12304: PUSH
12305: LD_INT 114
12307: PUSH
12308: LD_INT 115
12310: PUSH
12311: LD_INT 116
12313: PUSH
12314: LD_INT 117
12316: PUSH
12317: LD_INT 118
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: ST_TO_ADDR
// if result then
12344: LD_VAR 0 2
12348: IFFALSE 13134
// begin normal :=  ;
12350: LD_ADDR_VAR 0 5
12354: PUSH
12355: LD_STRING 
12357: ST_TO_ADDR
// hardcore :=  ;
12358: LD_ADDR_VAR 0 6
12362: PUSH
12363: LD_STRING 
12365: ST_TO_ADDR
// active :=  ;
12366: LD_ADDR_VAR 0 7
12370: PUSH
12371: LD_STRING 
12373: ST_TO_ADDR
// for i = 1 to normalCounter do
12374: LD_ADDR_VAR 0 8
12378: PUSH
12379: DOUBLE
12380: LD_INT 1
12382: DEC
12383: ST_TO_ADDR
12384: LD_EXP 39
12388: PUSH
12389: FOR_TO
12390: IFFALSE 12491
// begin tmp := 0 ;
12392: LD_ADDR_VAR 0 3
12396: PUSH
12397: LD_STRING 0
12399: ST_TO_ADDR
// if result [ 1 ] then
12400: LD_VAR 0 2
12404: PUSH
12405: LD_INT 1
12407: ARRAY
12408: IFFALSE 12473
// if result [ 1 ] [ 1 ] = i then
12410: LD_VAR 0 2
12414: PUSH
12415: LD_INT 1
12417: ARRAY
12418: PUSH
12419: LD_INT 1
12421: ARRAY
12422: PUSH
12423: LD_VAR 0 8
12427: EQUAL
12428: IFFALSE 12473
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_VAR 0 2
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: LD_VAR 0 2
12447: PUSH
12448: LD_INT 1
12450: ARRAY
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: CALL_OW 3
12459: PPUSH
12460: CALL_OW 1
12464: ST_TO_ADDR
// tmp := 1 ;
12465: LD_ADDR_VAR 0 3
12469: PUSH
12470: LD_STRING 1
12472: ST_TO_ADDR
// end ; normal := normal & tmp ;
12473: LD_ADDR_VAR 0 5
12477: PUSH
12478: LD_VAR 0 5
12482: PUSH
12483: LD_VAR 0 3
12487: STR
12488: ST_TO_ADDR
// end ;
12489: GO 12389
12491: POP
12492: POP
// for i = 1 to hardcoreCounter do
12493: LD_ADDR_VAR 0 8
12497: PUSH
12498: DOUBLE
12499: LD_INT 1
12501: DEC
12502: ST_TO_ADDR
12503: LD_EXP 40
12507: PUSH
12508: FOR_TO
12509: IFFALSE 12614
// begin tmp := 0 ;
12511: LD_ADDR_VAR 0 3
12515: PUSH
12516: LD_STRING 0
12518: ST_TO_ADDR
// if result [ 2 ] then
12519: LD_VAR 0 2
12523: PUSH
12524: LD_INT 2
12526: ARRAY
12527: IFFALSE 12596
// if result [ 2 ] [ 1 ] = 100 + i then
12529: LD_VAR 0 2
12533: PUSH
12534: LD_INT 2
12536: ARRAY
12537: PUSH
12538: LD_INT 1
12540: ARRAY
12541: PUSH
12542: LD_INT 100
12544: PUSH
12545: LD_VAR 0 8
12549: PLUS
12550: EQUAL
12551: IFFALSE 12596
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12553: LD_ADDR_VAR 0 2
12557: PUSH
12558: LD_VAR 0 2
12562: PPUSH
12563: LD_INT 2
12565: PPUSH
12566: LD_VAR 0 2
12570: PUSH
12571: LD_INT 2
12573: ARRAY
12574: PPUSH
12575: LD_INT 1
12577: PPUSH
12578: CALL_OW 3
12582: PPUSH
12583: CALL_OW 1
12587: ST_TO_ADDR
// tmp := 1 ;
12588: LD_ADDR_VAR 0 3
12592: PUSH
12593: LD_STRING 1
12595: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12596: LD_ADDR_VAR 0 6
12600: PUSH
12601: LD_VAR 0 6
12605: PUSH
12606: LD_VAR 0 3
12610: STR
12611: ST_TO_ADDR
// end ;
12612: GO 12508
12614: POP
12615: POP
// if isGameLoad then
12616: LD_VAR 0 1
12620: IFFALSE 13095
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12622: LD_ADDR_VAR 0 4
12626: PUSH
12627: LD_EXP 43
12631: PUSH
12632: LD_EXP 42
12636: PUSH
12637: LD_EXP 44
12641: PUSH
12642: LD_EXP 41
12646: PUSH
12647: LD_EXP 45
12651: PUSH
12652: LD_EXP 46
12656: PUSH
12657: LD_EXP 47
12661: PUSH
12662: LD_EXP 48
12666: PUSH
12667: LD_EXP 49
12671: PUSH
12672: LD_EXP 50
12676: PUSH
12677: LD_EXP 51
12681: PUSH
12682: LD_EXP 52
12686: PUSH
12687: LD_EXP 53
12691: PUSH
12692: LD_EXP 54
12696: PUSH
12697: LD_EXP 62
12701: PUSH
12702: LD_EXP 63
12706: PUSH
12707: LD_EXP 64
12711: PUSH
12712: LD_EXP 65
12716: PUSH
12717: LD_EXP 67
12721: PUSH
12722: LD_EXP 68
12726: PUSH
12727: LD_EXP 69
12731: PUSH
12732: LD_EXP 72
12736: PUSH
12737: LD_EXP 74
12741: PUSH
12742: LD_EXP 75
12746: PUSH
12747: LD_EXP 76
12751: PUSH
12752: LD_EXP 78
12756: PUSH
12757: LD_EXP 79
12761: PUSH
12762: LD_EXP 82
12766: PUSH
12767: LD_EXP 83
12771: PUSH
12772: LD_EXP 84
12776: PUSH
12777: LD_EXP 85
12781: PUSH
12782: LD_EXP 86
12786: PUSH
12787: LD_EXP 87
12791: PUSH
12792: LD_EXP 88
12796: PUSH
12797: LD_EXP 89
12801: PUSH
12802: LD_EXP 90
12806: PUSH
12807: LD_EXP 55
12811: PUSH
12812: LD_EXP 56
12816: PUSH
12817: LD_EXP 59
12821: PUSH
12822: LD_EXP 60
12826: PUSH
12827: LD_EXP 61
12831: PUSH
12832: LD_EXP 57
12836: PUSH
12837: LD_EXP 58
12841: PUSH
12842: LD_EXP 66
12846: PUSH
12847: LD_EXP 70
12851: PUSH
12852: LD_EXP 71
12856: PUSH
12857: LD_EXP 73
12861: PUSH
12862: LD_EXP 77
12866: PUSH
12867: LD_EXP 80
12871: PUSH
12872: LD_EXP 81
12876: PUSH
12877: LD_EXP 91
12881: PUSH
12882: LD_EXP 92
12886: PUSH
12887: LD_EXP 93
12891: PUSH
12892: LD_EXP 94
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: ST_TO_ADDR
// tmp :=  ;
12953: LD_ADDR_VAR 0 3
12957: PUSH
12958: LD_STRING 
12960: ST_TO_ADDR
// for i = 1 to normalCounter do
12961: LD_ADDR_VAR 0 8
12965: PUSH
12966: DOUBLE
12967: LD_INT 1
12969: DEC
12970: ST_TO_ADDR
12971: LD_EXP 39
12975: PUSH
12976: FOR_TO
12977: IFFALSE 13013
// begin if flags [ i ] then
12979: LD_VAR 0 4
12983: PUSH
12984: LD_VAR 0 8
12988: ARRAY
12989: IFFALSE 13011
// tmp := tmp & i & ; ;
12991: LD_ADDR_VAR 0 3
12995: PUSH
12996: LD_VAR 0 3
13000: PUSH
13001: LD_VAR 0 8
13005: STR
13006: PUSH
13007: LD_STRING ;
13009: STR
13010: ST_TO_ADDR
// end ;
13011: GO 12976
13013: POP
13014: POP
// for i = 1 to hardcoreCounter do
13015: LD_ADDR_VAR 0 8
13019: PUSH
13020: DOUBLE
13021: LD_INT 1
13023: DEC
13024: ST_TO_ADDR
13025: LD_EXP 40
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13077
// begin if flags [ normalCounter + i ] then
13033: LD_VAR 0 4
13037: PUSH
13038: LD_EXP 39
13042: PUSH
13043: LD_VAR 0 8
13047: PLUS
13048: ARRAY
13049: IFFALSE 13075
// tmp := tmp & ( 100 + i ) & ; ;
13051: LD_ADDR_VAR 0 3
13055: PUSH
13056: LD_VAR 0 3
13060: PUSH
13061: LD_INT 100
13063: PUSH
13064: LD_VAR 0 8
13068: PLUS
13069: STR
13070: PUSH
13071: LD_STRING ;
13073: STR
13074: ST_TO_ADDR
// end ;
13075: GO 13030
13077: POP
13078: POP
// if tmp then
13079: LD_VAR 0 3
13083: IFFALSE 13095
// active := tmp ;
13085: LD_ADDR_VAR 0 7
13089: PUSH
13090: LD_VAR 0 3
13094: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13095: LD_STRING getStreamItemsFromMission("
13097: PUSH
13098: LD_VAR 0 5
13102: STR
13103: PUSH
13104: LD_STRING ","
13106: STR
13107: PUSH
13108: LD_VAR 0 6
13112: STR
13113: PUSH
13114: LD_STRING ","
13116: STR
13117: PUSH
13118: LD_VAR 0 7
13122: STR
13123: PUSH
13124: LD_STRING ")
13126: STR
13127: PPUSH
13128: CALL_OW 559
// end else
13132: GO 13141
// ToLua ( getStreamItemsFromMission("","","") ) ;
13134: LD_STRING getStreamItemsFromMission("","","")
13136: PPUSH
13137: CALL_OW 559
// end ;
13141: LD_VAR 0 2
13145: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13146: LD_EXP 38
13150: PUSH
13151: LD_EXP 43
13155: AND
13156: IFFALSE 13280
13158: GO 13160
13160: DISABLE
13161: LD_INT 0
13163: PPUSH
13164: PPUSH
// begin enable ;
13165: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13166: LD_ADDR_VAR 0 2
13170: PUSH
13171: LD_INT 22
13173: PUSH
13174: LD_OWVAR 2
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 2
13185: PUSH
13186: LD_INT 34
13188: PUSH
13189: LD_INT 7
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 34
13198: PUSH
13199: LD_INT 45
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 34
13208: PUSH
13209: LD_INT 28
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 34
13218: PUSH
13219: LD_INT 47
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PPUSH
13237: CALL_OW 69
13241: ST_TO_ADDR
// if not tmp then
13242: LD_VAR 0 2
13246: NOT
13247: IFFALSE 13251
// exit ;
13249: GO 13280
// for i in tmp do
13251: LD_ADDR_VAR 0 1
13255: PUSH
13256: LD_VAR 0 2
13260: PUSH
13261: FOR_IN
13262: IFFALSE 13278
// begin SetLives ( i , 0 ) ;
13264: LD_VAR 0 1
13268: PPUSH
13269: LD_INT 0
13271: PPUSH
13272: CALL_OW 234
// end ;
13276: GO 13261
13278: POP
13279: POP
// end ;
13280: PPOPN 2
13282: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13283: LD_EXP 38
13287: PUSH
13288: LD_EXP 44
13292: AND
13293: IFFALSE 13377
13295: GO 13297
13297: DISABLE
13298: LD_INT 0
13300: PPUSH
13301: PPUSH
// begin enable ;
13302: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13303: LD_ADDR_VAR 0 2
13307: PUSH
13308: LD_INT 22
13310: PUSH
13311: LD_OWVAR 2
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 32
13322: PUSH
13323: LD_INT 3
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PPUSH
13334: CALL_OW 69
13338: ST_TO_ADDR
// if not tmp then
13339: LD_VAR 0 2
13343: NOT
13344: IFFALSE 13348
// exit ;
13346: GO 13377
// for i in tmp do
13348: LD_ADDR_VAR 0 1
13352: PUSH
13353: LD_VAR 0 2
13357: PUSH
13358: FOR_IN
13359: IFFALSE 13375
// begin SetLives ( i , 0 ) ;
13361: LD_VAR 0 1
13365: PPUSH
13366: LD_INT 0
13368: PPUSH
13369: CALL_OW 234
// end ;
13373: GO 13358
13375: POP
13376: POP
// end ;
13377: PPOPN 2
13379: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13380: LD_EXP 38
13384: PUSH
13385: LD_EXP 41
13389: AND
13390: IFFALSE 13483
13392: GO 13394
13394: DISABLE
13395: LD_INT 0
13397: PPUSH
// begin enable ;
13398: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13399: LD_ADDR_VAR 0 1
13403: PUSH
13404: LD_INT 22
13406: PUSH
13407: LD_OWVAR 2
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 2
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 5
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 25
13431: PUSH
13432: LD_INT 9
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 25
13441: PUSH
13442: LD_INT 8
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: PUSH
13464: FOR_IN
13465: IFFALSE 13481
// begin SetClass ( i , 1 ) ;
13467: LD_VAR 0 1
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: CALL_OW 336
// end ;
13479: GO 13464
13481: POP
13482: POP
// end ;
13483: PPOPN 1
13485: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13486: LD_EXP 38
13490: PUSH
13491: LD_EXP 42
13495: AND
13496: PUSH
13497: LD_OWVAR 65
13501: PUSH
13502: LD_INT 7
13504: LESS
13505: AND
13506: IFFALSE 13520
13508: GO 13510
13510: DISABLE
// begin enable ;
13511: ENABLE
// game_speed := 7 ;
13512: LD_ADDR_OWVAR 65
13516: PUSH
13517: LD_INT 7
13519: ST_TO_ADDR
// end ;
13520: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13521: LD_EXP 38
13525: PUSH
13526: LD_EXP 45
13530: AND
13531: IFFALSE 13733
13533: GO 13535
13535: DISABLE
13536: LD_INT 0
13538: PPUSH
13539: PPUSH
13540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13541: LD_ADDR_VAR 0 3
13545: PUSH
13546: LD_INT 81
13548: PUSH
13549: LD_OWVAR 2
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PPUSH
13572: CALL_OW 69
13576: ST_TO_ADDR
// if not tmp then
13577: LD_VAR 0 3
13581: NOT
13582: IFFALSE 13586
// exit ;
13584: GO 13733
// if tmp > 5 then
13586: LD_VAR 0 3
13590: PUSH
13591: LD_INT 5
13593: GREATER
13594: IFFALSE 13606
// k := 5 else
13596: LD_ADDR_VAR 0 2
13600: PUSH
13601: LD_INT 5
13603: ST_TO_ADDR
13604: GO 13616
// k := tmp ;
13606: LD_ADDR_VAR 0 2
13610: PUSH
13611: LD_VAR 0 3
13615: ST_TO_ADDR
// for i := 1 to k do
13616: LD_ADDR_VAR 0 1
13620: PUSH
13621: DOUBLE
13622: LD_INT 1
13624: DEC
13625: ST_TO_ADDR
13626: LD_VAR 0 2
13630: PUSH
13631: FOR_TO
13632: IFFALSE 13731
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13634: LD_VAR 0 3
13638: PUSH
13639: LD_VAR 0 1
13643: ARRAY
13644: PPUSH
13645: LD_VAR 0 1
13649: PUSH
13650: LD_INT 4
13652: MOD
13653: PUSH
13654: LD_INT 1
13656: PLUS
13657: PPUSH
13658: CALL_OW 259
13662: PUSH
13663: LD_INT 10
13665: LESS
13666: IFFALSE 13729
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13668: LD_VAR 0 3
13672: PUSH
13673: LD_VAR 0 1
13677: ARRAY
13678: PPUSH
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 4
13686: MOD
13687: PUSH
13688: LD_INT 1
13690: PLUS
13691: PPUSH
13692: LD_VAR 0 3
13696: PUSH
13697: LD_VAR 0 1
13701: ARRAY
13702: PPUSH
13703: LD_VAR 0 1
13707: PUSH
13708: LD_INT 4
13710: MOD
13711: PUSH
13712: LD_INT 1
13714: PLUS
13715: PPUSH
13716: CALL_OW 259
13720: PUSH
13721: LD_INT 1
13723: PLUS
13724: PPUSH
13725: CALL_OW 237
13729: GO 13631
13731: POP
13732: POP
// end ;
13733: PPOPN 3
13735: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13736: LD_EXP 38
13740: PUSH
13741: LD_EXP 46
13745: AND
13746: IFFALSE 13766
13748: GO 13750
13750: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13751: LD_INT 4
13753: PPUSH
13754: LD_OWVAR 2
13758: PPUSH
13759: LD_INT 0
13761: PPUSH
13762: CALL_OW 324
13766: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13767: LD_EXP 38
13771: PUSH
13772: LD_EXP 75
13776: AND
13777: IFFALSE 13797
13779: GO 13781
13781: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13782: LD_INT 19
13784: PPUSH
13785: LD_OWVAR 2
13789: PPUSH
13790: LD_INT 0
13792: PPUSH
13793: CALL_OW 324
13797: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13798: LD_EXP 38
13802: PUSH
13803: LD_EXP 47
13807: AND
13808: IFFALSE 13910
13810: GO 13812
13812: DISABLE
13813: LD_INT 0
13815: PPUSH
13816: PPUSH
// begin enable ;
13817: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13818: LD_ADDR_VAR 0 2
13822: PUSH
13823: LD_INT 22
13825: PUSH
13826: LD_OWVAR 2
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: LD_INT 34
13840: PUSH
13841: LD_INT 11
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 34
13850: PUSH
13851: LD_INT 30
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PPUSH
13867: CALL_OW 69
13871: ST_TO_ADDR
// if not tmp then
13872: LD_VAR 0 2
13876: NOT
13877: IFFALSE 13881
// exit ;
13879: GO 13910
// for i in tmp do
13881: LD_ADDR_VAR 0 1
13885: PUSH
13886: LD_VAR 0 2
13890: PUSH
13891: FOR_IN
13892: IFFALSE 13908
// begin SetLives ( i , 0 ) ;
13894: LD_VAR 0 1
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 234
// end ;
13906: GO 13891
13908: POP
13909: POP
// end ;
13910: PPOPN 2
13912: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13913: LD_EXP 38
13917: PUSH
13918: LD_EXP 48
13922: AND
13923: IFFALSE 13943
13925: GO 13927
13927: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13928: LD_INT 32
13930: PPUSH
13931: LD_OWVAR 2
13935: PPUSH
13936: LD_INT 0
13938: PPUSH
13939: CALL_OW 324
13943: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13944: LD_EXP 38
13948: PUSH
13949: LD_EXP 49
13953: AND
13954: IFFALSE 14135
13956: GO 13958
13958: DISABLE
13959: LD_INT 0
13961: PPUSH
13962: PPUSH
13963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13964: LD_ADDR_VAR 0 2
13968: PUSH
13969: LD_INT 22
13971: PUSH
13972: LD_OWVAR 2
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 33
13983: PUSH
13984: LD_INT 3
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PPUSH
13995: CALL_OW 69
13999: ST_TO_ADDR
// if not tmp then
14000: LD_VAR 0 2
14004: NOT
14005: IFFALSE 14009
// exit ;
14007: GO 14135
// side := 0 ;
14009: LD_ADDR_VAR 0 3
14013: PUSH
14014: LD_INT 0
14016: ST_TO_ADDR
// for i := 1 to 8 do
14017: LD_ADDR_VAR 0 1
14021: PUSH
14022: DOUBLE
14023: LD_INT 1
14025: DEC
14026: ST_TO_ADDR
14027: LD_INT 8
14029: PUSH
14030: FOR_TO
14031: IFFALSE 14079
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14033: LD_OWVAR 2
14037: PUSH
14038: LD_VAR 0 1
14042: NONEQUAL
14043: PUSH
14044: LD_OWVAR 2
14048: PPUSH
14049: LD_VAR 0 1
14053: PPUSH
14054: CALL_OW 81
14058: PUSH
14059: LD_INT 2
14061: EQUAL
14062: AND
14063: IFFALSE 14077
// begin side := i ;
14065: LD_ADDR_VAR 0 3
14069: PUSH
14070: LD_VAR 0 1
14074: ST_TO_ADDR
// break ;
14075: GO 14079
// end ;
14077: GO 14030
14079: POP
14080: POP
// if not side then
14081: LD_VAR 0 3
14085: NOT
14086: IFFALSE 14090
// exit ;
14088: GO 14135
// for i := 1 to tmp do
14090: LD_ADDR_VAR 0 1
14094: PUSH
14095: DOUBLE
14096: LD_INT 1
14098: DEC
14099: ST_TO_ADDR
14100: LD_VAR 0 2
14104: PUSH
14105: FOR_TO
14106: IFFALSE 14133
// if Prob ( 60 ) then
14108: LD_INT 60
14110: PPUSH
14111: CALL_OW 13
14115: IFFALSE 14131
// SetSide ( i , side ) ;
14117: LD_VAR 0 1
14121: PPUSH
14122: LD_VAR 0 3
14126: PPUSH
14127: CALL_OW 235
14131: GO 14105
14133: POP
14134: POP
// end ;
14135: PPOPN 3
14137: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14138: LD_EXP 38
14142: PUSH
14143: LD_EXP 51
14147: AND
14148: IFFALSE 14267
14150: GO 14152
14152: DISABLE
14153: LD_INT 0
14155: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14156: LD_ADDR_VAR 0 1
14160: PUSH
14161: LD_INT 22
14163: PUSH
14164: LD_OWVAR 2
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 21
14175: PUSH
14176: LD_INT 1
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 3
14185: PUSH
14186: LD_INT 23
14188: PUSH
14189: LD_INT 0
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: PPUSH
14205: CALL_OW 69
14209: PUSH
14210: FOR_IN
14211: IFFALSE 14265
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 257
14222: PUSH
14223: LD_INT 1
14225: PUSH
14226: LD_INT 2
14228: PUSH
14229: LD_INT 3
14231: PUSH
14232: LD_INT 4
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: IN
14241: IFFALSE 14263
// SetClass ( un , rand ( 1 , 4 ) ) ;
14243: LD_VAR 0 1
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: LD_INT 4
14253: PPUSH
14254: CALL_OW 12
14258: PPUSH
14259: CALL_OW 336
14263: GO 14210
14265: POP
14266: POP
// end ;
14267: PPOPN 1
14269: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14270: LD_EXP 38
14274: PUSH
14275: LD_EXP 50
14279: AND
14280: IFFALSE 14359
14282: GO 14284
14284: DISABLE
14285: LD_INT 0
14287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14288: LD_ADDR_VAR 0 1
14292: PUSH
14293: LD_INT 22
14295: PUSH
14296: LD_OWVAR 2
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 21
14307: PUSH
14308: LD_INT 3
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PPUSH
14319: CALL_OW 69
14323: ST_TO_ADDR
// if not tmp then
14324: LD_VAR 0 1
14328: NOT
14329: IFFALSE 14333
// exit ;
14331: GO 14359
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14333: LD_VAR 0 1
14337: PUSH
14338: LD_INT 1
14340: PPUSH
14341: LD_VAR 0 1
14345: PPUSH
14346: CALL_OW 12
14350: ARRAY
14351: PPUSH
14352: LD_INT 100
14354: PPUSH
14355: CALL_OW 234
// end ;
14359: PPOPN 1
14361: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14362: LD_EXP 38
14366: PUSH
14367: LD_EXP 52
14371: AND
14372: IFFALSE 14470
14374: GO 14376
14376: DISABLE
14377: LD_INT 0
14379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14380: LD_ADDR_VAR 0 1
14384: PUSH
14385: LD_INT 22
14387: PUSH
14388: LD_OWVAR 2
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: LD_INT 21
14399: PUSH
14400: LD_INT 1
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PPUSH
14411: CALL_OW 69
14415: ST_TO_ADDR
// if not tmp then
14416: LD_VAR 0 1
14420: NOT
14421: IFFALSE 14425
// exit ;
14423: GO 14470
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14425: LD_VAR 0 1
14429: PUSH
14430: LD_INT 1
14432: PPUSH
14433: LD_VAR 0 1
14437: PPUSH
14438: CALL_OW 12
14442: ARRAY
14443: PPUSH
14444: LD_INT 1
14446: PPUSH
14447: LD_INT 4
14449: PPUSH
14450: CALL_OW 12
14454: PPUSH
14455: LD_INT 3000
14457: PPUSH
14458: LD_INT 9000
14460: PPUSH
14461: CALL_OW 12
14465: PPUSH
14466: CALL_OW 492
// end ;
14470: PPOPN 1
14472: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14473: LD_EXP 38
14477: PUSH
14478: LD_EXP 53
14482: AND
14483: IFFALSE 14503
14485: GO 14487
14487: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14488: LD_INT 1
14490: PPUSH
14491: LD_OWVAR 2
14495: PPUSH
14496: LD_INT 0
14498: PPUSH
14499: CALL_OW 324
14503: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14504: LD_EXP 38
14508: PUSH
14509: LD_EXP 54
14513: AND
14514: IFFALSE 14597
14516: GO 14518
14518: DISABLE
14519: LD_INT 0
14521: PPUSH
14522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14523: LD_ADDR_VAR 0 2
14527: PUSH
14528: LD_INT 22
14530: PUSH
14531: LD_OWVAR 2
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 21
14542: PUSH
14543: LD_INT 3
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PPUSH
14554: CALL_OW 69
14558: ST_TO_ADDR
// if not tmp then
14559: LD_VAR 0 2
14563: NOT
14564: IFFALSE 14568
// exit ;
14566: GO 14597
// for i in tmp do
14568: LD_ADDR_VAR 0 1
14572: PUSH
14573: LD_VAR 0 2
14577: PUSH
14578: FOR_IN
14579: IFFALSE 14595
// SetBLevel ( i , 10 ) ;
14581: LD_VAR 0 1
14585: PPUSH
14586: LD_INT 10
14588: PPUSH
14589: CALL_OW 241
14593: GO 14578
14595: POP
14596: POP
// end ;
14597: PPOPN 2
14599: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14600: LD_EXP 38
14604: PUSH
14605: LD_EXP 55
14609: AND
14610: IFFALSE 14721
14612: GO 14614
14614: DISABLE
14615: LD_INT 0
14617: PPUSH
14618: PPUSH
14619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14620: LD_ADDR_VAR 0 3
14624: PUSH
14625: LD_INT 22
14627: PUSH
14628: LD_OWVAR 2
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 25
14639: PUSH
14640: LD_INT 1
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PPUSH
14651: CALL_OW 69
14655: ST_TO_ADDR
// if not tmp then
14656: LD_VAR 0 3
14660: NOT
14661: IFFALSE 14665
// exit ;
14663: GO 14721
// un := tmp [ rand ( 1 , tmp ) ] ;
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: LD_VAR 0 3
14674: PUSH
14675: LD_INT 1
14677: PPUSH
14678: LD_VAR 0 3
14682: PPUSH
14683: CALL_OW 12
14687: ARRAY
14688: ST_TO_ADDR
// if Crawls ( un ) then
14689: LD_VAR 0 2
14693: PPUSH
14694: CALL_OW 318
14698: IFFALSE 14709
// ComWalk ( un ) ;
14700: LD_VAR 0 2
14704: PPUSH
14705: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14709: LD_VAR 0 2
14713: PPUSH
14714: LD_INT 5
14716: PPUSH
14717: CALL_OW 336
// end ;
14721: PPOPN 3
14723: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14724: LD_EXP 38
14728: PUSH
14729: LD_EXP 56
14733: AND
14734: PUSH
14735: LD_OWVAR 67
14739: PUSH
14740: LD_INT 4
14742: LESS
14743: AND
14744: IFFALSE 14763
14746: GO 14748
14748: DISABLE
// begin Difficulty := Difficulty + 1 ;
14749: LD_ADDR_OWVAR 67
14753: PUSH
14754: LD_OWVAR 67
14758: PUSH
14759: LD_INT 1
14761: PLUS
14762: ST_TO_ADDR
// end ;
14763: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14764: LD_EXP 38
14768: PUSH
14769: LD_EXP 57
14773: AND
14774: IFFALSE 14877
14776: GO 14778
14778: DISABLE
14779: LD_INT 0
14781: PPUSH
// begin for i := 1 to 5 do
14782: LD_ADDR_VAR 0 1
14786: PUSH
14787: DOUBLE
14788: LD_INT 1
14790: DEC
14791: ST_TO_ADDR
14792: LD_INT 5
14794: PUSH
14795: FOR_TO
14796: IFFALSE 14875
// begin uc_nation := nation_nature ;
14798: LD_ADDR_OWVAR 21
14802: PUSH
14803: LD_INT 0
14805: ST_TO_ADDR
// uc_side := 0 ;
14806: LD_ADDR_OWVAR 20
14810: PUSH
14811: LD_INT 0
14813: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14814: LD_ADDR_OWVAR 29
14818: PUSH
14819: LD_INT 12
14821: PUSH
14822: LD_INT 12
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: ST_TO_ADDR
// hc_agressivity := 20 ;
14829: LD_ADDR_OWVAR 35
14833: PUSH
14834: LD_INT 20
14836: ST_TO_ADDR
// hc_class := class_tiger ;
14837: LD_ADDR_OWVAR 28
14841: PUSH
14842: LD_INT 14
14844: ST_TO_ADDR
// hc_gallery :=  ;
14845: LD_ADDR_OWVAR 33
14849: PUSH
14850: LD_STRING 
14852: ST_TO_ADDR
// hc_name :=  ;
14853: LD_ADDR_OWVAR 26
14857: PUSH
14858: LD_STRING 
14860: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14861: CALL_OW 44
14865: PPUSH
14866: LD_INT 0
14868: PPUSH
14869: CALL_OW 51
// end ;
14873: GO 14795
14875: POP
14876: POP
// end ;
14877: PPOPN 1
14879: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14880: LD_EXP 38
14884: PUSH
14885: LD_EXP 58
14889: AND
14890: IFFALSE 14899
14892: GO 14894
14894: DISABLE
// StreamSibBomb ;
14895: CALL 14900 0 0
14899: END
// export function StreamSibBomb ; var i , x , y ; begin
14900: LD_INT 0
14902: PPUSH
14903: PPUSH
14904: PPUSH
14905: PPUSH
// result := false ;
14906: LD_ADDR_VAR 0 1
14910: PUSH
14911: LD_INT 0
14913: ST_TO_ADDR
// for i := 1 to 16 do
14914: LD_ADDR_VAR 0 2
14918: PUSH
14919: DOUBLE
14920: LD_INT 1
14922: DEC
14923: ST_TO_ADDR
14924: LD_INT 16
14926: PUSH
14927: FOR_TO
14928: IFFALSE 15127
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14930: LD_ADDR_VAR 0 3
14934: PUSH
14935: LD_INT 10
14937: PUSH
14938: LD_INT 20
14940: PUSH
14941: LD_INT 30
14943: PUSH
14944: LD_INT 40
14946: PUSH
14947: LD_INT 50
14949: PUSH
14950: LD_INT 60
14952: PUSH
14953: LD_INT 70
14955: PUSH
14956: LD_INT 80
14958: PUSH
14959: LD_INT 90
14961: PUSH
14962: LD_INT 100
14964: PUSH
14965: LD_INT 110
14967: PUSH
14968: LD_INT 120
14970: PUSH
14971: LD_INT 130
14973: PUSH
14974: LD_INT 140
14976: PUSH
14977: LD_INT 150
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 1
14999: PPUSH
15000: LD_INT 15
15002: PPUSH
15003: CALL_OW 12
15007: ARRAY
15008: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15009: LD_ADDR_VAR 0 4
15013: PUSH
15014: LD_INT 10
15016: PUSH
15017: LD_INT 20
15019: PUSH
15020: LD_INT 30
15022: PUSH
15023: LD_INT 40
15025: PUSH
15026: LD_INT 50
15028: PUSH
15029: LD_INT 60
15031: PUSH
15032: LD_INT 70
15034: PUSH
15035: LD_INT 80
15037: PUSH
15038: LD_INT 90
15040: PUSH
15041: LD_INT 100
15043: PUSH
15044: LD_INT 110
15046: PUSH
15047: LD_INT 120
15049: PUSH
15050: LD_INT 130
15052: PUSH
15053: LD_INT 140
15055: PUSH
15056: LD_INT 150
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 1
15078: PPUSH
15079: LD_INT 15
15081: PPUSH
15082: CALL_OW 12
15086: ARRAY
15087: ST_TO_ADDR
// if ValidHex ( x , y ) then
15088: LD_VAR 0 3
15092: PPUSH
15093: LD_VAR 0 4
15097: PPUSH
15098: CALL_OW 488
15102: IFFALSE 15125
// begin result := [ x , y ] ;
15104: LD_ADDR_VAR 0 1
15108: PUSH
15109: LD_VAR 0 3
15113: PUSH
15114: LD_VAR 0 4
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: ST_TO_ADDR
// break ;
15123: GO 15127
// end ; end ;
15125: GO 14927
15127: POP
15128: POP
// if result then
15129: LD_VAR 0 1
15133: IFFALSE 15193
// begin ToLua ( playSibBomb() ) ;
15135: LD_STRING playSibBomb()
15137: PPUSH
15138: CALL_OW 559
// wait ( 0 0$14 ) ;
15142: LD_INT 490
15144: PPUSH
15145: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15149: LD_VAR 0 1
15153: PUSH
15154: LD_INT 1
15156: ARRAY
15157: PPUSH
15158: LD_VAR 0 1
15162: PUSH
15163: LD_INT 2
15165: ARRAY
15166: PPUSH
15167: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15171: LD_VAR 0 1
15175: PUSH
15176: LD_INT 1
15178: ARRAY
15179: PPUSH
15180: LD_VAR 0 1
15184: PUSH
15185: LD_INT 2
15187: ARRAY
15188: PPUSH
15189: CALL_OW 429
// end ; end ;
15193: LD_VAR 0 1
15197: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15198: LD_EXP 38
15202: PUSH
15203: LD_EXP 60
15207: AND
15208: IFFALSE 15220
15210: GO 15212
15212: DISABLE
// YouLost (  ) ;
15213: LD_STRING 
15215: PPUSH
15216: CALL_OW 104
15220: END
// every 0 0$1 trigger StreamModeActive and sFog do
15221: LD_EXP 38
15225: PUSH
15226: LD_EXP 59
15230: AND
15231: IFFALSE 15245
15233: GO 15235
15235: DISABLE
// FogOff ( your_side ) ;
15236: LD_OWVAR 2
15240: PPUSH
15241: CALL_OW 344
15245: END
// every 0 0$1 trigger StreamModeActive and sSun do
15246: LD_EXP 38
15250: PUSH
15251: LD_EXP 61
15255: AND
15256: IFFALSE 15284
15258: GO 15260
15260: DISABLE
// begin solar_recharge_percent := 0 ;
15261: LD_ADDR_OWVAR 79
15265: PUSH
15266: LD_INT 0
15268: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15269: LD_INT 10500
15271: PPUSH
15272: CALL_OW 67
// solar_recharge_percent := 100 ;
15276: LD_ADDR_OWVAR 79
15280: PUSH
15281: LD_INT 100
15283: ST_TO_ADDR
// end ;
15284: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15285: LD_EXP 38
15289: PUSH
15290: LD_EXP 62
15294: AND
15295: IFFALSE 15534
15297: GO 15299
15299: DISABLE
15300: LD_INT 0
15302: PPUSH
15303: PPUSH
15304: PPUSH
// begin tmp := [ ] ;
15305: LD_ADDR_VAR 0 3
15309: PUSH
15310: EMPTY
15311: ST_TO_ADDR
// for i := 1 to 6 do
15312: LD_ADDR_VAR 0 1
15316: PUSH
15317: DOUBLE
15318: LD_INT 1
15320: DEC
15321: ST_TO_ADDR
15322: LD_INT 6
15324: PUSH
15325: FOR_TO
15326: IFFALSE 15431
// begin uc_nation := nation_nature ;
15328: LD_ADDR_OWVAR 21
15332: PUSH
15333: LD_INT 0
15335: ST_TO_ADDR
// uc_side := 0 ;
15336: LD_ADDR_OWVAR 20
15340: PUSH
15341: LD_INT 0
15343: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15344: LD_ADDR_OWVAR 29
15348: PUSH
15349: LD_INT 12
15351: PUSH
15352: LD_INT 12
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: ST_TO_ADDR
// hc_agressivity := 20 ;
15359: LD_ADDR_OWVAR 35
15363: PUSH
15364: LD_INT 20
15366: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15367: LD_ADDR_OWVAR 28
15371: PUSH
15372: LD_INT 17
15374: ST_TO_ADDR
// hc_gallery :=  ;
15375: LD_ADDR_OWVAR 33
15379: PUSH
15380: LD_STRING 
15382: ST_TO_ADDR
// hc_name :=  ;
15383: LD_ADDR_OWVAR 26
15387: PUSH
15388: LD_STRING 
15390: ST_TO_ADDR
// un := CreateHuman ;
15391: LD_ADDR_VAR 0 2
15395: PUSH
15396: CALL_OW 44
15400: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15401: LD_VAR 0 2
15405: PPUSH
15406: LD_INT 1
15408: PPUSH
15409: CALL_OW 51
// tmp := tmp ^ un ;
15413: LD_ADDR_VAR 0 3
15417: PUSH
15418: LD_VAR 0 3
15422: PUSH
15423: LD_VAR 0 2
15427: ADD
15428: ST_TO_ADDR
// end ;
15429: GO 15325
15431: POP
15432: POP
// repeat wait ( 0 0$1 ) ;
15433: LD_INT 35
15435: PPUSH
15436: CALL_OW 67
// for un in tmp do
15440: LD_ADDR_VAR 0 2
15444: PUSH
15445: LD_VAR 0 3
15449: PUSH
15450: FOR_IN
15451: IFFALSE 15525
// begin if IsDead ( un ) then
15453: LD_VAR 0 2
15457: PPUSH
15458: CALL_OW 301
15462: IFFALSE 15482
// begin tmp := tmp diff un ;
15464: LD_ADDR_VAR 0 3
15468: PUSH
15469: LD_VAR 0 3
15473: PUSH
15474: LD_VAR 0 2
15478: DIFF
15479: ST_TO_ADDR
// continue ;
15480: GO 15450
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15482: LD_VAR 0 2
15486: PPUSH
15487: LD_INT 3
15489: PUSH
15490: LD_INT 22
15492: PUSH
15493: LD_INT 0
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 69
15508: PPUSH
15509: LD_VAR 0 2
15513: PPUSH
15514: CALL_OW 74
15518: PPUSH
15519: CALL_OW 115
// end ;
15523: GO 15450
15525: POP
15526: POP
// until not tmp ;
15527: LD_VAR 0 3
15531: NOT
15532: IFFALSE 15433
// end ;
15534: PPOPN 3
15536: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15537: LD_EXP 38
15541: PUSH
15542: LD_EXP 63
15546: AND
15547: IFFALSE 15601
15549: GO 15551
15551: DISABLE
// begin ToLua ( displayTroll(); ) ;
15552: LD_STRING displayTroll();
15554: PPUSH
15555: CALL_OW 559
// wait ( 3 3$00 ) ;
15559: LD_INT 6300
15561: PPUSH
15562: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15566: LD_STRING hideTroll();
15568: PPUSH
15569: CALL_OW 559
// wait ( 1 1$00 ) ;
15573: LD_INT 2100
15575: PPUSH
15576: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15580: LD_STRING displayTroll();
15582: PPUSH
15583: CALL_OW 559
// wait ( 1 1$00 ) ;
15587: LD_INT 2100
15589: PPUSH
15590: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15594: LD_STRING hideTroll();
15596: PPUSH
15597: CALL_OW 559
// end ;
15601: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15602: LD_EXP 38
15606: PUSH
15607: LD_EXP 64
15611: AND
15612: IFFALSE 15675
15614: GO 15616
15616: DISABLE
15617: LD_INT 0
15619: PPUSH
// begin p := 0 ;
15620: LD_ADDR_VAR 0 1
15624: PUSH
15625: LD_INT 0
15627: ST_TO_ADDR
// repeat game_speed := 1 ;
15628: LD_ADDR_OWVAR 65
15632: PUSH
15633: LD_INT 1
15635: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15636: LD_INT 35
15638: PPUSH
15639: CALL_OW 67
// p := p + 1 ;
15643: LD_ADDR_VAR 0 1
15647: PUSH
15648: LD_VAR 0 1
15652: PUSH
15653: LD_INT 1
15655: PLUS
15656: ST_TO_ADDR
// until p >= 60 ;
15657: LD_VAR 0 1
15661: PUSH
15662: LD_INT 60
15664: GREATEREQUAL
15665: IFFALSE 15628
// game_speed := 4 ;
15667: LD_ADDR_OWVAR 65
15671: PUSH
15672: LD_INT 4
15674: ST_TO_ADDR
// end ;
15675: PPOPN 1
15677: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15678: LD_EXP 38
15682: PUSH
15683: LD_EXP 65
15687: AND
15688: IFFALSE 15834
15690: GO 15692
15692: DISABLE
15693: LD_INT 0
15695: PPUSH
15696: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15697: LD_ADDR_VAR 0 1
15701: PUSH
15702: LD_INT 22
15704: PUSH
15705: LD_OWVAR 2
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 2
15716: PUSH
15717: LD_INT 30
15719: PUSH
15720: LD_INT 0
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 30
15729: PUSH
15730: LD_INT 1
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: LIST
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PPUSH
15746: CALL_OW 69
15750: ST_TO_ADDR
// if not depot then
15751: LD_VAR 0 1
15755: NOT
15756: IFFALSE 15760
// exit ;
15758: GO 15834
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15760: LD_ADDR_VAR 0 2
15764: PUSH
15765: LD_VAR 0 1
15769: PUSH
15770: LD_INT 1
15772: PPUSH
15773: LD_VAR 0 1
15777: PPUSH
15778: CALL_OW 12
15782: ARRAY
15783: PPUSH
15784: CALL_OW 274
15788: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15789: LD_VAR 0 2
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: LD_INT 0
15799: PPUSH
15800: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15804: LD_VAR 0 2
15808: PPUSH
15809: LD_INT 2
15811: PPUSH
15812: LD_INT 0
15814: PPUSH
15815: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15819: LD_VAR 0 2
15823: PPUSH
15824: LD_INT 3
15826: PPUSH
15827: LD_INT 0
15829: PPUSH
15830: CALL_OW 277
// end ;
15834: PPOPN 2
15836: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15837: LD_EXP 38
15841: PUSH
15842: LD_EXP 66
15846: AND
15847: IFFALSE 15944
15849: GO 15851
15851: DISABLE
15852: LD_INT 0
15854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15855: LD_ADDR_VAR 0 1
15859: PUSH
15860: LD_INT 22
15862: PUSH
15863: LD_OWVAR 2
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 21
15874: PUSH
15875: LD_INT 1
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 3
15884: PUSH
15885: LD_INT 23
15887: PUSH
15888: LD_INT 0
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: PPUSH
15904: CALL_OW 69
15908: ST_TO_ADDR
// if not tmp then
15909: LD_VAR 0 1
15913: NOT
15914: IFFALSE 15918
// exit ;
15916: GO 15944
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15918: LD_VAR 0 1
15922: PUSH
15923: LD_INT 1
15925: PPUSH
15926: LD_VAR 0 1
15930: PPUSH
15931: CALL_OW 12
15935: ARRAY
15936: PPUSH
15937: LD_INT 200
15939: PPUSH
15940: CALL_OW 234
// end ;
15944: PPOPN 1
15946: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15947: LD_EXP 38
15951: PUSH
15952: LD_EXP 67
15956: AND
15957: IFFALSE 16036
15959: GO 15961
15961: DISABLE
15962: LD_INT 0
15964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15965: LD_ADDR_VAR 0 1
15969: PUSH
15970: LD_INT 22
15972: PUSH
15973: LD_OWVAR 2
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 21
15984: PUSH
15985: LD_INT 2
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 69
16000: ST_TO_ADDR
// if not tmp then
16001: LD_VAR 0 1
16005: NOT
16006: IFFALSE 16010
// exit ;
16008: GO 16036
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16010: LD_VAR 0 1
16014: PUSH
16015: LD_INT 1
16017: PPUSH
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 12
16027: ARRAY
16028: PPUSH
16029: LD_INT 60
16031: PPUSH
16032: CALL_OW 234
// end ;
16036: PPOPN 1
16038: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16039: LD_EXP 38
16043: PUSH
16044: LD_EXP 68
16048: AND
16049: IFFALSE 16148
16051: GO 16053
16053: DISABLE
16054: LD_INT 0
16056: PPUSH
16057: PPUSH
// begin enable ;
16058: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16059: LD_ADDR_VAR 0 1
16063: PUSH
16064: LD_INT 22
16066: PUSH
16067: LD_OWVAR 2
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 61
16078: PUSH
16079: EMPTY
16080: LIST
16081: PUSH
16082: LD_INT 33
16084: PUSH
16085: LD_INT 2
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: ST_TO_ADDR
// if not tmp then
16102: LD_VAR 0 1
16106: NOT
16107: IFFALSE 16111
// exit ;
16109: GO 16148
// for i in tmp do
16111: LD_ADDR_VAR 0 2
16115: PUSH
16116: LD_VAR 0 1
16120: PUSH
16121: FOR_IN
16122: IFFALSE 16146
// if IsControledBy ( i ) then
16124: LD_VAR 0 2
16128: PPUSH
16129: CALL_OW 312
16133: IFFALSE 16144
// ComUnlink ( i ) ;
16135: LD_VAR 0 2
16139: PPUSH
16140: CALL_OW 136
16144: GO 16121
16146: POP
16147: POP
// end ;
16148: PPOPN 2
16150: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16151: LD_EXP 38
16155: PUSH
16156: LD_EXP 69
16160: AND
16161: IFFALSE 16301
16163: GO 16165
16165: DISABLE
16166: LD_INT 0
16168: PPUSH
16169: PPUSH
// begin ToLua ( displayPowell(); ) ;
16170: LD_STRING displayPowell();
16172: PPUSH
16173: CALL_OW 559
// uc_side := 0 ;
16177: LD_ADDR_OWVAR 20
16181: PUSH
16182: LD_INT 0
16184: ST_TO_ADDR
// uc_nation := 2 ;
16185: LD_ADDR_OWVAR 21
16189: PUSH
16190: LD_INT 2
16192: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16193: LD_ADDR_OWVAR 37
16197: PUSH
16198: LD_INT 14
16200: ST_TO_ADDR
// vc_engine := engine_siberite ;
16201: LD_ADDR_OWVAR 39
16205: PUSH
16206: LD_INT 3
16208: ST_TO_ADDR
// vc_control := control_apeman ;
16209: LD_ADDR_OWVAR 38
16213: PUSH
16214: LD_INT 5
16216: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16217: LD_ADDR_OWVAR 40
16221: PUSH
16222: LD_INT 29
16224: ST_TO_ADDR
// un := CreateVehicle ;
16225: LD_ADDR_VAR 0 2
16229: PUSH
16230: CALL_OW 45
16234: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16235: LD_VAR 0 2
16239: PPUSH
16240: LD_INT 1
16242: PPUSH
16243: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16247: LD_INT 35
16249: PPUSH
16250: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16254: LD_VAR 0 2
16258: PPUSH
16259: LD_INT 22
16261: PUSH
16262: LD_OWVAR 2
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PPUSH
16271: CALL_OW 69
16275: PPUSH
16276: LD_VAR 0 2
16280: PPUSH
16281: CALL_OW 74
16285: PPUSH
16286: CALL_OW 115
// until IsDead ( un ) ;
16290: LD_VAR 0 2
16294: PPUSH
16295: CALL_OW 301
16299: IFFALSE 16247
// end ;
16301: PPOPN 2
16303: END
// every 0 0$1 trigger StreamModeActive and sStu do
16304: LD_EXP 38
16308: PUSH
16309: LD_EXP 77
16313: AND
16314: IFFALSE 16330
16316: GO 16318
16318: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16319: LD_STRING displayStucuk();
16321: PPUSH
16322: CALL_OW 559
// ResetFog ;
16326: CALL_OW 335
// end ;
16330: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16331: LD_EXP 38
16335: PUSH
16336: LD_EXP 70
16340: AND
16341: IFFALSE 16482
16343: GO 16345
16345: DISABLE
16346: LD_INT 0
16348: PPUSH
16349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16350: LD_ADDR_VAR 0 2
16354: PUSH
16355: LD_INT 22
16357: PUSH
16358: LD_OWVAR 2
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 21
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PPUSH
16381: CALL_OW 69
16385: ST_TO_ADDR
// if not tmp then
16386: LD_VAR 0 2
16390: NOT
16391: IFFALSE 16395
// exit ;
16393: GO 16482
// un := tmp [ rand ( 1 , tmp ) ] ;
16395: LD_ADDR_VAR 0 1
16399: PUSH
16400: LD_VAR 0 2
16404: PUSH
16405: LD_INT 1
16407: PPUSH
16408: LD_VAR 0 2
16412: PPUSH
16413: CALL_OW 12
16417: ARRAY
16418: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16419: LD_VAR 0 1
16423: PPUSH
16424: LD_INT 0
16426: PPUSH
16427: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16431: LD_VAR 0 1
16435: PPUSH
16436: LD_OWVAR 3
16440: PUSH
16441: LD_VAR 0 1
16445: DIFF
16446: PPUSH
16447: LD_VAR 0 1
16451: PPUSH
16452: CALL_OW 74
16456: PPUSH
16457: CALL_OW 115
// wait ( 0 0$20 ) ;
16461: LD_INT 700
16463: PPUSH
16464: CALL_OW 67
// SetSide ( un , your_side ) ;
16468: LD_VAR 0 1
16472: PPUSH
16473: LD_OWVAR 2
16477: PPUSH
16478: CALL_OW 235
// end ;
16482: PPOPN 2
16484: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16485: LD_EXP 38
16489: PUSH
16490: LD_EXP 71
16494: AND
16495: IFFALSE 16601
16497: GO 16499
16499: DISABLE
16500: LD_INT 0
16502: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16503: LD_ADDR_VAR 0 1
16507: PUSH
16508: LD_INT 22
16510: PUSH
16511: LD_OWVAR 2
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: LD_INT 30
16525: PUSH
16526: LD_INT 0
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 30
16535: PUSH
16536: LD_INT 1
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PPUSH
16552: CALL_OW 69
16556: ST_TO_ADDR
// if not depot then
16557: LD_VAR 0 1
16561: NOT
16562: IFFALSE 16566
// exit ;
16564: GO 16601
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16566: LD_VAR 0 1
16570: PUSH
16571: LD_INT 1
16573: ARRAY
16574: PPUSH
16575: CALL_OW 250
16579: PPUSH
16580: LD_VAR 0 1
16584: PUSH
16585: LD_INT 1
16587: ARRAY
16588: PPUSH
16589: CALL_OW 251
16593: PPUSH
16594: LD_INT 70
16596: PPUSH
16597: CALL_OW 495
// end ;
16601: PPOPN 1
16603: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16604: LD_EXP 38
16608: PUSH
16609: LD_EXP 72
16613: AND
16614: IFFALSE 16825
16616: GO 16618
16618: DISABLE
16619: LD_INT 0
16621: PPUSH
16622: PPUSH
16623: PPUSH
16624: PPUSH
16625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16626: LD_ADDR_VAR 0 5
16630: PUSH
16631: LD_INT 22
16633: PUSH
16634: LD_OWVAR 2
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 21
16645: PUSH
16646: LD_INT 1
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PPUSH
16657: CALL_OW 69
16661: ST_TO_ADDR
// if not tmp then
16662: LD_VAR 0 5
16666: NOT
16667: IFFALSE 16671
// exit ;
16669: GO 16825
// for i in tmp do
16671: LD_ADDR_VAR 0 1
16675: PUSH
16676: LD_VAR 0 5
16680: PUSH
16681: FOR_IN
16682: IFFALSE 16823
// begin d := rand ( 0 , 5 ) ;
16684: LD_ADDR_VAR 0 4
16688: PUSH
16689: LD_INT 0
16691: PPUSH
16692: LD_INT 5
16694: PPUSH
16695: CALL_OW 12
16699: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16700: LD_ADDR_VAR 0 2
16704: PUSH
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 250
16714: PPUSH
16715: LD_VAR 0 4
16719: PPUSH
16720: LD_INT 3
16722: PPUSH
16723: LD_INT 12
16725: PPUSH
16726: CALL_OW 12
16730: PPUSH
16731: CALL_OW 272
16735: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16736: LD_ADDR_VAR 0 3
16740: PUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 251
16750: PPUSH
16751: LD_VAR 0 4
16755: PPUSH
16756: LD_INT 3
16758: PPUSH
16759: LD_INT 12
16761: PPUSH
16762: CALL_OW 12
16766: PPUSH
16767: CALL_OW 273
16771: ST_TO_ADDR
// if ValidHex ( x , y ) then
16772: LD_VAR 0 2
16776: PPUSH
16777: LD_VAR 0 3
16781: PPUSH
16782: CALL_OW 488
16786: IFFALSE 16821
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16788: LD_VAR 0 1
16792: PPUSH
16793: LD_VAR 0 2
16797: PPUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_INT 3
16805: PPUSH
16806: LD_INT 6
16808: PPUSH
16809: CALL_OW 12
16813: PPUSH
16814: LD_INT 1
16816: PPUSH
16817: CALL_OW 483
// end ;
16821: GO 16681
16823: POP
16824: POP
// end ;
16825: PPOPN 5
16827: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16828: LD_EXP 38
16832: PUSH
16833: LD_EXP 73
16837: AND
16838: IFFALSE 16932
16840: GO 16842
16842: DISABLE
16843: LD_INT 0
16845: PPUSH
16846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16847: LD_ADDR_VAR 0 2
16851: PUSH
16852: LD_INT 22
16854: PUSH
16855: LD_OWVAR 2
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 32
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 21
16876: PUSH
16877: LD_INT 2
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: LIST
16888: PPUSH
16889: CALL_OW 69
16893: ST_TO_ADDR
// if not tmp then
16894: LD_VAR 0 2
16898: NOT
16899: IFFALSE 16903
// exit ;
16901: GO 16932
// for i in tmp do
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_VAR 0 2
16912: PUSH
16913: FOR_IN
16914: IFFALSE 16930
// SetFuel ( i , 0 ) ;
16916: LD_VAR 0 1
16920: PPUSH
16921: LD_INT 0
16923: PPUSH
16924: CALL_OW 240
16928: GO 16913
16930: POP
16931: POP
// end ;
16932: PPOPN 2
16934: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16935: LD_EXP 38
16939: PUSH
16940: LD_EXP 74
16944: AND
16945: IFFALSE 17011
16947: GO 16949
16949: DISABLE
16950: LD_INT 0
16952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16953: LD_ADDR_VAR 0 1
16957: PUSH
16958: LD_INT 22
16960: PUSH
16961: LD_OWVAR 2
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 30
16972: PUSH
16973: LD_INT 29
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PPUSH
16984: CALL_OW 69
16988: ST_TO_ADDR
// if not tmp then
16989: LD_VAR 0 1
16993: NOT
16994: IFFALSE 16998
// exit ;
16996: GO 17011
// DestroyUnit ( tmp [ 1 ] ) ;
16998: LD_VAR 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: CALL_OW 65
// end ;
17011: PPOPN 1
17013: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17014: LD_EXP 38
17018: PUSH
17019: LD_EXP 76
17023: AND
17024: IFFALSE 17153
17026: GO 17028
17028: DISABLE
17029: LD_INT 0
17031: PPUSH
// begin uc_side := 0 ;
17032: LD_ADDR_OWVAR 20
17036: PUSH
17037: LD_INT 0
17039: ST_TO_ADDR
// uc_nation := nation_arabian ;
17040: LD_ADDR_OWVAR 21
17044: PUSH
17045: LD_INT 2
17047: ST_TO_ADDR
// hc_gallery :=  ;
17048: LD_ADDR_OWVAR 33
17052: PUSH
17053: LD_STRING 
17055: ST_TO_ADDR
// hc_name :=  ;
17056: LD_ADDR_OWVAR 26
17060: PUSH
17061: LD_STRING 
17063: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17064: LD_INT 1
17066: PPUSH
17067: LD_INT 11
17069: PPUSH
17070: LD_INT 10
17072: PPUSH
17073: CALL_OW 380
// un := CreateHuman ;
17077: LD_ADDR_VAR 0 1
17081: PUSH
17082: CALL_OW 44
17086: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17087: LD_VAR 0 1
17091: PPUSH
17092: LD_INT 1
17094: PPUSH
17095: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17099: LD_INT 35
17101: PPUSH
17102: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17106: LD_VAR 0 1
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 69
17127: PPUSH
17128: LD_VAR 0 1
17132: PPUSH
17133: CALL_OW 74
17137: PPUSH
17138: CALL_OW 115
// until IsDead ( un ) ;
17142: LD_VAR 0 1
17146: PPUSH
17147: CALL_OW 301
17151: IFFALSE 17099
// end ;
17153: PPOPN 1
17155: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17156: LD_EXP 38
17160: PUSH
17161: LD_EXP 78
17165: AND
17166: IFFALSE 17178
17168: GO 17170
17170: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17171: LD_STRING earthquake(getX(game), 0, 32)
17173: PPUSH
17174: CALL_OW 559
17178: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17179: LD_EXP 38
17183: PUSH
17184: LD_EXP 79
17188: AND
17189: IFFALSE 17280
17191: GO 17193
17193: DISABLE
17194: LD_INT 0
17196: PPUSH
// begin enable ;
17197: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17198: LD_ADDR_VAR 0 1
17202: PUSH
17203: LD_INT 22
17205: PUSH
17206: LD_OWVAR 2
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 21
17217: PUSH
17218: LD_INT 2
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 33
17227: PUSH
17228: LD_INT 3
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: ST_TO_ADDR
// if not tmp then
17245: LD_VAR 0 1
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17280
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17254: LD_VAR 0 1
17258: PUSH
17259: LD_INT 1
17261: PPUSH
17262: LD_VAR 0 1
17266: PPUSH
17267: CALL_OW 12
17271: ARRAY
17272: PPUSH
17273: LD_INT 1
17275: PPUSH
17276: CALL_OW 234
// end ;
17280: PPOPN 1
17282: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17283: LD_EXP 38
17287: PUSH
17288: LD_EXP 80
17292: AND
17293: IFFALSE 17434
17295: GO 17297
17297: DISABLE
17298: LD_INT 0
17300: PPUSH
17301: PPUSH
17302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17303: LD_ADDR_VAR 0 3
17307: PUSH
17308: LD_INT 22
17310: PUSH
17311: LD_OWVAR 2
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 25
17322: PUSH
17323: LD_INT 1
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PPUSH
17334: CALL_OW 69
17338: ST_TO_ADDR
// if not tmp then
17339: LD_VAR 0 3
17343: NOT
17344: IFFALSE 17348
// exit ;
17346: GO 17434
// un := tmp [ rand ( 1 , tmp ) ] ;
17348: LD_ADDR_VAR 0 2
17352: PUSH
17353: LD_VAR 0 3
17357: PUSH
17358: LD_INT 1
17360: PPUSH
17361: LD_VAR 0 3
17365: PPUSH
17366: CALL_OW 12
17370: ARRAY
17371: ST_TO_ADDR
// if Crawls ( un ) then
17372: LD_VAR 0 2
17376: PPUSH
17377: CALL_OW 318
17381: IFFALSE 17392
// ComWalk ( un ) ;
17383: LD_VAR 0 2
17387: PPUSH
17388: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17392: LD_VAR 0 2
17396: PPUSH
17397: LD_INT 9
17399: PPUSH
17400: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17404: LD_INT 28
17406: PPUSH
17407: LD_OWVAR 2
17411: PPUSH
17412: LD_INT 2
17414: PPUSH
17415: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17419: LD_INT 29
17421: PPUSH
17422: LD_OWVAR 2
17426: PPUSH
17427: LD_INT 2
17429: PPUSH
17430: CALL_OW 322
// end ;
17434: PPOPN 3
17436: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17437: LD_EXP 38
17441: PUSH
17442: LD_EXP 81
17446: AND
17447: IFFALSE 17558
17449: GO 17451
17451: DISABLE
17452: LD_INT 0
17454: PPUSH
17455: PPUSH
17456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17457: LD_ADDR_VAR 0 3
17461: PUSH
17462: LD_INT 22
17464: PUSH
17465: LD_OWVAR 2
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 25
17476: PUSH
17477: LD_INT 1
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PPUSH
17488: CALL_OW 69
17492: ST_TO_ADDR
// if not tmp then
17493: LD_VAR 0 3
17497: NOT
17498: IFFALSE 17502
// exit ;
17500: GO 17558
// un := tmp [ rand ( 1 , tmp ) ] ;
17502: LD_ADDR_VAR 0 2
17506: PUSH
17507: LD_VAR 0 3
17511: PUSH
17512: LD_INT 1
17514: PPUSH
17515: LD_VAR 0 3
17519: PPUSH
17520: CALL_OW 12
17524: ARRAY
17525: ST_TO_ADDR
// if Crawls ( un ) then
17526: LD_VAR 0 2
17530: PPUSH
17531: CALL_OW 318
17535: IFFALSE 17546
// ComWalk ( un ) ;
17537: LD_VAR 0 2
17541: PPUSH
17542: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17546: LD_VAR 0 2
17550: PPUSH
17551: LD_INT 8
17553: PPUSH
17554: CALL_OW 336
// end ;
17558: PPOPN 3
17560: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17561: LD_EXP 38
17565: PUSH
17566: LD_EXP 82
17570: AND
17571: IFFALSE 17715
17573: GO 17575
17575: DISABLE
17576: LD_INT 0
17578: PPUSH
17579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17580: LD_ADDR_VAR 0 2
17584: PUSH
17585: LD_INT 22
17587: PUSH
17588: LD_OWVAR 2
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 21
17599: PUSH
17600: LD_INT 2
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 2
17609: PUSH
17610: LD_INT 34
17612: PUSH
17613: LD_INT 12
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 34
17622: PUSH
17623: LD_INT 51
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 34
17632: PUSH
17633: LD_INT 32
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PPUSH
17651: CALL_OW 69
17655: ST_TO_ADDR
// if not tmp then
17656: LD_VAR 0 2
17660: NOT
17661: IFFALSE 17665
// exit ;
17663: GO 17715
// for i in tmp do
17665: LD_ADDR_VAR 0 1
17669: PUSH
17670: LD_VAR 0 2
17674: PUSH
17675: FOR_IN
17676: IFFALSE 17713
// if GetCargo ( i , mat_artifact ) = 0 then
17678: LD_VAR 0 1
17682: PPUSH
17683: LD_INT 4
17685: PPUSH
17686: CALL_OW 289
17690: PUSH
17691: LD_INT 0
17693: EQUAL
17694: IFFALSE 17711
// SetCargo ( i , mat_siberit , 100 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 3
17703: PPUSH
17704: LD_INT 100
17706: PPUSH
17707: CALL_OW 290
17711: GO 17675
17713: POP
17714: POP
// end ;
17715: PPOPN 2
17717: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17718: LD_EXP 38
17722: PUSH
17723: LD_EXP 83
17727: AND
17728: IFFALSE 17911
17730: GO 17732
17732: DISABLE
17733: LD_INT 0
17735: PPUSH
17736: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17737: LD_ADDR_VAR 0 2
17741: PUSH
17742: LD_INT 22
17744: PUSH
17745: LD_OWVAR 2
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PPUSH
17754: CALL_OW 69
17758: ST_TO_ADDR
// if not tmp then
17759: LD_VAR 0 2
17763: NOT
17764: IFFALSE 17768
// exit ;
17766: GO 17911
// for i := 1 to 2 do
17768: LD_ADDR_VAR 0 1
17772: PUSH
17773: DOUBLE
17774: LD_INT 1
17776: DEC
17777: ST_TO_ADDR
17778: LD_INT 2
17780: PUSH
17781: FOR_TO
17782: IFFALSE 17909
// begin uc_side := your_side ;
17784: LD_ADDR_OWVAR 20
17788: PUSH
17789: LD_OWVAR 2
17793: ST_TO_ADDR
// uc_nation := nation_american ;
17794: LD_ADDR_OWVAR 21
17798: PUSH
17799: LD_INT 1
17801: ST_TO_ADDR
// vc_chassis := us_morphling ;
17802: LD_ADDR_OWVAR 37
17806: PUSH
17807: LD_INT 5
17809: ST_TO_ADDR
// vc_engine := engine_siberite ;
17810: LD_ADDR_OWVAR 39
17814: PUSH
17815: LD_INT 3
17817: ST_TO_ADDR
// vc_control := control_computer ;
17818: LD_ADDR_OWVAR 38
17822: PUSH
17823: LD_INT 3
17825: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17826: LD_ADDR_OWVAR 40
17830: PUSH
17831: LD_INT 10
17833: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17834: LD_VAR 0 2
17838: PUSH
17839: LD_INT 1
17841: ARRAY
17842: PPUSH
17843: CALL_OW 310
17847: NOT
17848: IFFALSE 17895
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17850: CALL_OW 45
17854: PPUSH
17855: LD_VAR 0 2
17859: PUSH
17860: LD_INT 1
17862: ARRAY
17863: PPUSH
17864: CALL_OW 250
17868: PPUSH
17869: LD_VAR 0 2
17873: PUSH
17874: LD_INT 1
17876: ARRAY
17877: PPUSH
17878: CALL_OW 251
17882: PPUSH
17883: LD_INT 12
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 50
17893: GO 17907
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17895: CALL_OW 45
17899: PPUSH
17900: LD_INT 1
17902: PPUSH
17903: CALL_OW 51
// end ;
17907: GO 17781
17909: POP
17910: POP
// end ;
17911: PPOPN 2
17913: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17914: LD_EXP 38
17918: PUSH
17919: LD_EXP 84
17923: AND
17924: IFFALSE 18146
17926: GO 17928
17928: DISABLE
17929: LD_INT 0
17931: PPUSH
17932: PPUSH
17933: PPUSH
17934: PPUSH
17935: PPUSH
17936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17937: LD_ADDR_VAR 0 6
17941: PUSH
17942: LD_INT 22
17944: PUSH
17945: LD_OWVAR 2
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 21
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 3
17966: PUSH
17967: LD_INT 23
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: LIST
17985: PPUSH
17986: CALL_OW 69
17990: ST_TO_ADDR
// if not tmp then
17991: LD_VAR 0 6
17995: NOT
17996: IFFALSE 18000
// exit ;
17998: GO 18146
// s1 := rand ( 1 , 4 ) ;
18000: LD_ADDR_VAR 0 2
18004: PUSH
18005: LD_INT 1
18007: PPUSH
18008: LD_INT 4
18010: PPUSH
18011: CALL_OW 12
18015: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18016: LD_ADDR_VAR 0 4
18020: PUSH
18021: LD_VAR 0 6
18025: PUSH
18026: LD_INT 1
18028: ARRAY
18029: PPUSH
18030: LD_VAR 0 2
18034: PPUSH
18035: CALL_OW 259
18039: ST_TO_ADDR
// if s1 = 1 then
18040: LD_VAR 0 2
18044: PUSH
18045: LD_INT 1
18047: EQUAL
18048: IFFALSE 18068
// s2 := rand ( 2 , 4 ) else
18050: LD_ADDR_VAR 0 3
18054: PUSH
18055: LD_INT 2
18057: PPUSH
18058: LD_INT 4
18060: PPUSH
18061: CALL_OW 12
18065: ST_TO_ADDR
18066: GO 18076
// s2 := 1 ;
18068: LD_ADDR_VAR 0 3
18072: PUSH
18073: LD_INT 1
18075: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18076: LD_ADDR_VAR 0 5
18080: PUSH
18081: LD_VAR 0 6
18085: PUSH
18086: LD_INT 1
18088: ARRAY
18089: PPUSH
18090: LD_VAR 0 3
18094: PPUSH
18095: CALL_OW 259
18099: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18100: LD_VAR 0 6
18104: PUSH
18105: LD_INT 1
18107: ARRAY
18108: PPUSH
18109: LD_VAR 0 2
18113: PPUSH
18114: LD_VAR 0 5
18118: PPUSH
18119: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18123: LD_VAR 0 6
18127: PUSH
18128: LD_INT 1
18130: ARRAY
18131: PPUSH
18132: LD_VAR 0 3
18136: PPUSH
18137: LD_VAR 0 4
18141: PPUSH
18142: CALL_OW 237
// end ;
18146: PPOPN 6
18148: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18149: LD_EXP 38
18153: PUSH
18154: LD_EXP 85
18158: AND
18159: IFFALSE 18238
18161: GO 18163
18163: DISABLE
18164: LD_INT 0
18166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18167: LD_ADDR_VAR 0 1
18171: PUSH
18172: LD_INT 22
18174: PUSH
18175: LD_OWVAR 2
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 30
18186: PUSH
18187: LD_INT 3
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 69
18202: ST_TO_ADDR
// if not tmp then
18203: LD_VAR 0 1
18207: NOT
18208: IFFALSE 18212
// exit ;
18210: GO 18238
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18212: LD_VAR 0 1
18216: PUSH
18217: LD_INT 1
18219: PPUSH
18220: LD_VAR 0 1
18224: PPUSH
18225: CALL_OW 12
18229: ARRAY
18230: PPUSH
18231: LD_INT 1
18233: PPUSH
18234: CALL_OW 234
// end ;
18238: PPOPN 1
18240: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18241: LD_EXP 38
18245: PUSH
18246: LD_EXP 86
18250: AND
18251: IFFALSE 18363
18253: GO 18255
18255: DISABLE
18256: LD_INT 0
18258: PPUSH
18259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18260: LD_ADDR_VAR 0 2
18264: PUSH
18265: LD_INT 22
18267: PUSH
18268: LD_OWVAR 2
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 2
18279: PUSH
18280: LD_INT 30
18282: PUSH
18283: LD_INT 27
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 30
18292: PUSH
18293: LD_INT 26
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 30
18302: PUSH
18303: LD_INT 28
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PPUSH
18320: CALL_OW 69
18324: ST_TO_ADDR
// if not tmp then
18325: LD_VAR 0 2
18329: NOT
18330: IFFALSE 18334
// exit ;
18332: GO 18363
// for i in tmp do
18334: LD_ADDR_VAR 0 1
18338: PUSH
18339: LD_VAR 0 2
18343: PUSH
18344: FOR_IN
18345: IFFALSE 18361
// SetLives ( i , 1 ) ;
18347: LD_VAR 0 1
18351: PPUSH
18352: LD_INT 1
18354: PPUSH
18355: CALL_OW 234
18359: GO 18344
18361: POP
18362: POP
// end ;
18363: PPOPN 2
18365: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18366: LD_EXP 38
18370: PUSH
18371: LD_EXP 87
18375: AND
18376: IFFALSE 18663
18378: GO 18380
18380: DISABLE
18381: LD_INT 0
18383: PPUSH
18384: PPUSH
18385: PPUSH
// begin i := rand ( 1 , 7 ) ;
18386: LD_ADDR_VAR 0 1
18390: PUSH
18391: LD_INT 1
18393: PPUSH
18394: LD_INT 7
18396: PPUSH
18397: CALL_OW 12
18401: ST_TO_ADDR
// case i of 1 :
18402: LD_VAR 0 1
18406: PUSH
18407: LD_INT 1
18409: DOUBLE
18410: EQUAL
18411: IFTRUE 18415
18413: GO 18425
18415: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18416: LD_STRING earthquake(getX(game), 0, 32)
18418: PPUSH
18419: CALL_OW 559
18423: GO 18663
18425: LD_INT 2
18427: DOUBLE
18428: EQUAL
18429: IFTRUE 18433
18431: GO 18447
18433: POP
// begin ToLua ( displayStucuk(); ) ;
18434: LD_STRING displayStucuk();
18436: PPUSH
18437: CALL_OW 559
// ResetFog ;
18441: CALL_OW 335
// end ; 3 :
18445: GO 18663
18447: LD_INT 3
18449: DOUBLE
18450: EQUAL
18451: IFTRUE 18455
18453: GO 18559
18455: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18456: LD_ADDR_VAR 0 2
18460: PUSH
18461: LD_INT 22
18463: PUSH
18464: LD_OWVAR 2
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 25
18475: PUSH
18476: LD_INT 1
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PPUSH
18487: CALL_OW 69
18491: ST_TO_ADDR
// if not tmp then
18492: LD_VAR 0 2
18496: NOT
18497: IFFALSE 18501
// exit ;
18499: GO 18663
// un := tmp [ rand ( 1 , tmp ) ] ;
18501: LD_ADDR_VAR 0 3
18505: PUSH
18506: LD_VAR 0 2
18510: PUSH
18511: LD_INT 1
18513: PPUSH
18514: LD_VAR 0 2
18518: PPUSH
18519: CALL_OW 12
18523: ARRAY
18524: ST_TO_ADDR
// if Crawls ( un ) then
18525: LD_VAR 0 3
18529: PPUSH
18530: CALL_OW 318
18534: IFFALSE 18545
// ComWalk ( un ) ;
18536: LD_VAR 0 3
18540: PPUSH
18541: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18545: LD_VAR 0 3
18549: PPUSH
18550: LD_INT 8
18552: PPUSH
18553: CALL_OW 336
// end ; 4 :
18557: GO 18663
18559: LD_INT 4
18561: DOUBLE
18562: EQUAL
18563: IFTRUE 18567
18565: GO 18641
18567: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18568: LD_ADDR_VAR 0 2
18572: PUSH
18573: LD_INT 22
18575: PUSH
18576: LD_OWVAR 2
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 30
18587: PUSH
18588: LD_INT 29
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PPUSH
18599: CALL_OW 69
18603: ST_TO_ADDR
// if not tmp then
18604: LD_VAR 0 2
18608: NOT
18609: IFFALSE 18613
// exit ;
18611: GO 18663
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18613: LD_VAR 0 2
18617: PUSH
18618: LD_INT 1
18620: ARRAY
18621: PPUSH
18622: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18626: LD_VAR 0 2
18630: PUSH
18631: LD_INT 1
18633: ARRAY
18634: PPUSH
18635: CALL_OW 65
// end ; 5 .. 7 :
18639: GO 18663
18641: LD_INT 5
18643: DOUBLE
18644: GREATEREQUAL
18645: IFFALSE 18653
18647: LD_INT 7
18649: DOUBLE
18650: LESSEQUAL
18651: IFTRUE 18655
18653: GO 18662
18655: POP
// StreamSibBomb ; end ;
18656: CALL 14900 0 0
18660: GO 18663
18662: POP
// end ;
18663: PPOPN 3
18665: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18666: LD_EXP 38
18670: PUSH
18671: LD_EXP 88
18675: AND
18676: IFFALSE 18832
18678: GO 18680
18680: DISABLE
18681: LD_INT 0
18683: PPUSH
18684: PPUSH
18685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18686: LD_ADDR_VAR 0 2
18690: PUSH
18691: LD_INT 81
18693: PUSH
18694: LD_OWVAR 2
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: LD_INT 21
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 21
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PPUSH
18735: CALL_OW 69
18739: ST_TO_ADDR
// if not tmp then
18740: LD_VAR 0 2
18744: NOT
18745: IFFALSE 18749
// exit ;
18747: GO 18832
// p := 0 ;
18749: LD_ADDR_VAR 0 3
18753: PUSH
18754: LD_INT 0
18756: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18757: LD_INT 35
18759: PPUSH
18760: CALL_OW 67
// p := p + 1 ;
18764: LD_ADDR_VAR 0 3
18768: PUSH
18769: LD_VAR 0 3
18773: PUSH
18774: LD_INT 1
18776: PLUS
18777: ST_TO_ADDR
// for i in tmp do
18778: LD_ADDR_VAR 0 1
18782: PUSH
18783: LD_VAR 0 2
18787: PUSH
18788: FOR_IN
18789: IFFALSE 18820
// if GetLives ( i ) < 1000 then
18791: LD_VAR 0 1
18795: PPUSH
18796: CALL_OW 256
18800: PUSH
18801: LD_INT 1000
18803: LESS
18804: IFFALSE 18818
// SetLives ( i , 1000 ) ;
18806: LD_VAR 0 1
18810: PPUSH
18811: LD_INT 1000
18813: PPUSH
18814: CALL_OW 234
18818: GO 18788
18820: POP
18821: POP
// until p > 20 ;
18822: LD_VAR 0 3
18826: PUSH
18827: LD_INT 20
18829: GREATER
18830: IFFALSE 18757
// end ;
18832: PPOPN 3
18834: END
// every 0 0$1 trigger StreamModeActive and sTime do
18835: LD_EXP 38
18839: PUSH
18840: LD_EXP 89
18844: AND
18845: IFFALSE 18880
18847: GO 18849
18849: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18850: LD_INT 28
18852: PPUSH
18853: LD_OWVAR 2
18857: PPUSH
18858: LD_INT 2
18860: PPUSH
18861: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18865: LD_INT 30
18867: PPUSH
18868: LD_OWVAR 2
18872: PPUSH
18873: LD_INT 2
18875: PPUSH
18876: CALL_OW 322
// end ;
18880: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18881: LD_EXP 38
18885: PUSH
18886: LD_EXP 90
18890: AND
18891: IFFALSE 19012
18893: GO 18895
18895: DISABLE
18896: LD_INT 0
18898: PPUSH
18899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18900: LD_ADDR_VAR 0 2
18904: PUSH
18905: LD_INT 22
18907: PUSH
18908: LD_OWVAR 2
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 21
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 3
18929: PUSH
18930: LD_INT 23
18932: PUSH
18933: LD_INT 0
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: PPUSH
18949: CALL_OW 69
18953: ST_TO_ADDR
// if not tmp then
18954: LD_VAR 0 2
18958: NOT
18959: IFFALSE 18963
// exit ;
18961: GO 19012
// for i in tmp do
18963: LD_ADDR_VAR 0 1
18967: PUSH
18968: LD_VAR 0 2
18972: PUSH
18973: FOR_IN
18974: IFFALSE 19010
// begin if Crawls ( i ) then
18976: LD_VAR 0 1
18980: PPUSH
18981: CALL_OW 318
18985: IFFALSE 18996
// ComWalk ( i ) ;
18987: LD_VAR 0 1
18991: PPUSH
18992: CALL_OW 138
// SetClass ( i , 2 ) ;
18996: LD_VAR 0 1
19000: PPUSH
19001: LD_INT 2
19003: PPUSH
19004: CALL_OW 336
// end ;
19008: GO 18973
19010: POP
19011: POP
// end ;
19012: PPOPN 2
19014: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19015: LD_EXP 38
19019: PUSH
19020: LD_EXP 91
19024: AND
19025: IFFALSE 19313
19027: GO 19029
19029: DISABLE
19030: LD_INT 0
19032: PPUSH
19033: PPUSH
19034: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19035: LD_OWVAR 2
19039: PPUSH
19040: LD_INT 9
19042: PPUSH
19043: LD_INT 1
19045: PPUSH
19046: LD_INT 1
19048: PPUSH
19049: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19053: LD_INT 9
19055: PPUSH
19056: LD_OWVAR 2
19060: PPUSH
19061: CALL_OW 343
// uc_side := 9 ;
19065: LD_ADDR_OWVAR 20
19069: PUSH
19070: LD_INT 9
19072: ST_TO_ADDR
// uc_nation := 2 ;
19073: LD_ADDR_OWVAR 21
19077: PUSH
19078: LD_INT 2
19080: ST_TO_ADDR
// hc_name := Dark Warrior ;
19081: LD_ADDR_OWVAR 26
19085: PUSH
19086: LD_STRING Dark Warrior
19088: ST_TO_ADDR
// hc_gallery :=  ;
19089: LD_ADDR_OWVAR 33
19093: PUSH
19094: LD_STRING 
19096: ST_TO_ADDR
// hc_noskilllimit := true ;
19097: LD_ADDR_OWVAR 76
19101: PUSH
19102: LD_INT 1
19104: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19105: LD_ADDR_OWVAR 31
19109: PUSH
19110: LD_INT 30
19112: PUSH
19113: LD_INT 30
19115: PUSH
19116: LD_INT 30
19118: PUSH
19119: LD_INT 30
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: ST_TO_ADDR
// un := CreateHuman ;
19128: LD_ADDR_VAR 0 3
19132: PUSH
19133: CALL_OW 44
19137: ST_TO_ADDR
// hc_noskilllimit := false ;
19138: LD_ADDR_OWVAR 76
19142: PUSH
19143: LD_INT 0
19145: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19146: LD_VAR 0 3
19150: PPUSH
19151: LD_INT 1
19153: PPUSH
19154: CALL_OW 51
// ToLua ( playRanger() ) ;
19158: LD_STRING playRanger()
19160: PPUSH
19161: CALL_OW 559
// p := 0 ;
19165: LD_ADDR_VAR 0 2
19169: PUSH
19170: LD_INT 0
19172: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19173: LD_INT 35
19175: PPUSH
19176: CALL_OW 67
// p := p + 1 ;
19180: LD_ADDR_VAR 0 2
19184: PUSH
19185: LD_VAR 0 2
19189: PUSH
19190: LD_INT 1
19192: PLUS
19193: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19194: LD_VAR 0 3
19198: PPUSH
19199: CALL_OW 256
19203: PUSH
19204: LD_INT 1000
19206: LESS
19207: IFFALSE 19221
// SetLives ( un , 1000 ) ;
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_INT 1000
19216: PPUSH
19217: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19221: LD_VAR 0 3
19225: PPUSH
19226: LD_INT 81
19228: PUSH
19229: LD_OWVAR 2
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 91
19240: PUSH
19241: LD_VAR 0 3
19245: PUSH
19246: LD_INT 30
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PPUSH
19258: CALL_OW 69
19262: PPUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 74
19272: PPUSH
19273: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19277: LD_VAR 0 2
19281: PUSH
19282: LD_INT 80
19284: GREATER
19285: PUSH
19286: LD_VAR 0 3
19290: PPUSH
19291: CALL_OW 301
19295: OR
19296: IFFALSE 19173
// if un then
19298: LD_VAR 0 3
19302: IFFALSE 19313
// RemoveUnit ( un ) ;
19304: LD_VAR 0 3
19308: PPUSH
19309: CALL_OW 64
// end ;
19313: PPOPN 3
19315: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19316: LD_EXP 92
19320: IFFALSE 19436
19322: GO 19324
19324: DISABLE
19325: LD_INT 0
19327: PPUSH
19328: PPUSH
19329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19330: LD_ADDR_VAR 0 2
19334: PUSH
19335: LD_INT 81
19337: PUSH
19338: LD_OWVAR 2
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 21
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PPUSH
19361: CALL_OW 69
19365: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19366: LD_STRING playComputer()
19368: PPUSH
19369: CALL_OW 559
// if not tmp then
19373: LD_VAR 0 2
19377: NOT
19378: IFFALSE 19382
// exit ;
19380: GO 19436
// for i in tmp do
19382: LD_ADDR_VAR 0 1
19386: PUSH
19387: LD_VAR 0 2
19391: PUSH
19392: FOR_IN
19393: IFFALSE 19434
// for j := 1 to 4 do
19395: LD_ADDR_VAR 0 3
19399: PUSH
19400: DOUBLE
19401: LD_INT 1
19403: DEC
19404: ST_TO_ADDR
19405: LD_INT 4
19407: PUSH
19408: FOR_TO
19409: IFFALSE 19430
// SetSkill ( i , j , 10 ) ;
19411: LD_VAR 0 1
19415: PPUSH
19416: LD_VAR 0 3
19420: PPUSH
19421: LD_INT 10
19423: PPUSH
19424: CALL_OW 237
19428: GO 19408
19430: POP
19431: POP
19432: GO 19392
19434: POP
19435: POP
// end ;
19436: PPOPN 3
19438: END
// every 0 0$1 trigger s30 do var i , tmp ;
19439: LD_EXP 93
19443: IFFALSE 19512
19445: GO 19447
19447: DISABLE
19448: LD_INT 0
19450: PPUSH
19451: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19452: LD_ADDR_VAR 0 2
19456: PUSH
19457: LD_INT 22
19459: PUSH
19460: LD_OWVAR 2
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PPUSH
19469: CALL_OW 69
19473: ST_TO_ADDR
// if not tmp then
19474: LD_VAR 0 2
19478: NOT
19479: IFFALSE 19483
// exit ;
19481: GO 19512
// for i in tmp do
19483: LD_ADDR_VAR 0 1
19487: PUSH
19488: LD_VAR 0 2
19492: PUSH
19493: FOR_IN
19494: IFFALSE 19510
// SetLives ( i , 300 ) ;
19496: LD_VAR 0 1
19500: PPUSH
19501: LD_INT 300
19503: PPUSH
19504: CALL_OW 234
19508: GO 19493
19510: POP
19511: POP
// end ;
19512: PPOPN 2
19514: END
// every 0 0$1 trigger s60 do var i , tmp ;
19515: LD_EXP 94
19519: IFFALSE 19588
19521: GO 19523
19523: DISABLE
19524: LD_INT 0
19526: PPUSH
19527: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19528: LD_ADDR_VAR 0 2
19532: PUSH
19533: LD_INT 22
19535: PUSH
19536: LD_OWVAR 2
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PPUSH
19545: CALL_OW 69
19549: ST_TO_ADDR
// if not tmp then
19550: LD_VAR 0 2
19554: NOT
19555: IFFALSE 19559
// exit ;
19557: GO 19588
// for i in tmp do
19559: LD_ADDR_VAR 0 1
19563: PUSH
19564: LD_VAR 0 2
19568: PUSH
19569: FOR_IN
19570: IFFALSE 19586
// SetLives ( i , 600 ) ;
19572: LD_VAR 0 1
19576: PPUSH
19577: LD_INT 600
19579: PPUSH
19580: CALL_OW 234
19584: GO 19569
19586: POP
19587: POP
// end ;
19588: PPOPN 2
19590: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19591: LD_INT 0
19593: PPUSH
// case cmd of 301 :
19594: LD_VAR 0 1
19598: PUSH
19599: LD_INT 301
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19639
19607: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19608: LD_VAR 0 6
19612: PPUSH
19613: LD_VAR 0 7
19617: PPUSH
19618: LD_VAR 0 8
19622: PPUSH
19623: LD_VAR 0 4
19627: PPUSH
19628: LD_VAR 0 5
19632: PPUSH
19633: CALL 20840 0 5
19637: GO 19760
19639: LD_INT 302
19641: DOUBLE
19642: EQUAL
19643: IFTRUE 19647
19645: GO 19684
19647: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19648: LD_VAR 0 6
19652: PPUSH
19653: LD_VAR 0 7
19657: PPUSH
19658: LD_VAR 0 8
19662: PPUSH
19663: LD_VAR 0 9
19667: PPUSH
19668: LD_VAR 0 4
19672: PPUSH
19673: LD_VAR 0 5
19677: PPUSH
19678: CALL 20931 0 6
19682: GO 19760
19684: LD_INT 303
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19729
19692: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19693: LD_VAR 0 6
19697: PPUSH
19698: LD_VAR 0 7
19702: PPUSH
19703: LD_VAR 0 8
19707: PPUSH
19708: LD_VAR 0 9
19712: PPUSH
19713: LD_VAR 0 4
19717: PPUSH
19718: LD_VAR 0 5
19722: PPUSH
19723: CALL 19765 0 6
19727: GO 19760
19729: LD_INT 304
19731: DOUBLE
19732: EQUAL
19733: IFTRUE 19737
19735: GO 19759
19737: POP
// hHackTeleport ( unit , x , y ) ; end ;
19738: LD_VAR 0 2
19742: PPUSH
19743: LD_VAR 0 4
19747: PPUSH
19748: LD_VAR 0 5
19752: PPUSH
19753: CALL 21524 0 3
19757: GO 19760
19759: POP
// end ;
19760: LD_VAR 0 12
19764: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19765: LD_INT 0
19767: PPUSH
19768: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19769: LD_VAR 0 1
19773: PUSH
19774: LD_INT 1
19776: LESS
19777: PUSH
19778: LD_VAR 0 1
19782: PUSH
19783: LD_INT 3
19785: GREATER
19786: OR
19787: PUSH
19788: LD_VAR 0 5
19792: PPUSH
19793: LD_VAR 0 6
19797: PPUSH
19798: CALL_OW 428
19802: OR
19803: IFFALSE 19807
// exit ;
19805: GO 20527
// uc_side := your_side ;
19807: LD_ADDR_OWVAR 20
19811: PUSH
19812: LD_OWVAR 2
19816: ST_TO_ADDR
// uc_nation := nation ;
19817: LD_ADDR_OWVAR 21
19821: PUSH
19822: LD_VAR 0 1
19826: ST_TO_ADDR
// bc_level = 1 ;
19827: LD_ADDR_OWVAR 43
19831: PUSH
19832: LD_INT 1
19834: ST_TO_ADDR
// case btype of 1 :
19835: LD_VAR 0 2
19839: PUSH
19840: LD_INT 1
19842: DOUBLE
19843: EQUAL
19844: IFTRUE 19848
19846: GO 19859
19848: POP
// bc_type := b_depot ; 2 :
19849: LD_ADDR_OWVAR 42
19853: PUSH
19854: LD_INT 0
19856: ST_TO_ADDR
19857: GO 20471
19859: LD_INT 2
19861: DOUBLE
19862: EQUAL
19863: IFTRUE 19867
19865: GO 19878
19867: POP
// bc_type := b_warehouse ; 3 :
19868: LD_ADDR_OWVAR 42
19872: PUSH
19873: LD_INT 1
19875: ST_TO_ADDR
19876: GO 20471
19878: LD_INT 3
19880: DOUBLE
19881: EQUAL
19882: IFTRUE 19886
19884: GO 19897
19886: POP
// bc_type := b_lab ; 4 .. 9 :
19887: LD_ADDR_OWVAR 42
19891: PUSH
19892: LD_INT 6
19894: ST_TO_ADDR
19895: GO 20471
19897: LD_INT 4
19899: DOUBLE
19900: GREATEREQUAL
19901: IFFALSE 19909
19903: LD_INT 9
19905: DOUBLE
19906: LESSEQUAL
19907: IFTRUE 19911
19909: GO 19963
19911: POP
// begin bc_type := b_lab_half ;
19912: LD_ADDR_OWVAR 42
19916: PUSH
19917: LD_INT 7
19919: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19920: LD_ADDR_OWVAR 44
19924: PUSH
19925: LD_INT 10
19927: PUSH
19928: LD_INT 11
19930: PUSH
19931: LD_INT 12
19933: PUSH
19934: LD_INT 15
19936: PUSH
19937: LD_INT 14
19939: PUSH
19940: LD_INT 13
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: PUSH
19951: LD_VAR 0 2
19955: PUSH
19956: LD_INT 3
19958: MINUS
19959: ARRAY
19960: ST_TO_ADDR
// end ; 10 .. 13 :
19961: GO 20471
19963: LD_INT 10
19965: DOUBLE
19966: GREATEREQUAL
19967: IFFALSE 19975
19969: LD_INT 13
19971: DOUBLE
19972: LESSEQUAL
19973: IFTRUE 19977
19975: GO 20054
19977: POP
// begin bc_type := b_lab_full ;
19978: LD_ADDR_OWVAR 42
19982: PUSH
19983: LD_INT 8
19985: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19986: LD_ADDR_OWVAR 44
19990: PUSH
19991: LD_INT 10
19993: PUSH
19994: LD_INT 12
19996: PUSH
19997: LD_INT 14
19999: PUSH
20000: LD_INT 13
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: PUSH
20009: LD_VAR 0 2
20013: PUSH
20014: LD_INT 9
20016: MINUS
20017: ARRAY
20018: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20019: LD_ADDR_OWVAR 45
20023: PUSH
20024: LD_INT 11
20026: PUSH
20027: LD_INT 15
20029: PUSH
20030: LD_INT 12
20032: PUSH
20033: LD_INT 15
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: LD_VAR 0 2
20046: PUSH
20047: LD_INT 9
20049: MINUS
20050: ARRAY
20051: ST_TO_ADDR
// end ; 14 :
20052: GO 20471
20054: LD_INT 14
20056: DOUBLE
20057: EQUAL
20058: IFTRUE 20062
20060: GO 20073
20062: POP
// bc_type := b_workshop ; 15 :
20063: LD_ADDR_OWVAR 42
20067: PUSH
20068: LD_INT 2
20070: ST_TO_ADDR
20071: GO 20471
20073: LD_INT 15
20075: DOUBLE
20076: EQUAL
20077: IFTRUE 20081
20079: GO 20092
20081: POP
// bc_type := b_factory ; 16 :
20082: LD_ADDR_OWVAR 42
20086: PUSH
20087: LD_INT 3
20089: ST_TO_ADDR
20090: GO 20471
20092: LD_INT 16
20094: DOUBLE
20095: EQUAL
20096: IFTRUE 20100
20098: GO 20111
20100: POP
// bc_type := b_ext_gun ; 17 :
20101: LD_ADDR_OWVAR 42
20105: PUSH
20106: LD_INT 17
20108: ST_TO_ADDR
20109: GO 20471
20111: LD_INT 17
20113: DOUBLE
20114: EQUAL
20115: IFTRUE 20119
20117: GO 20147
20119: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20120: LD_ADDR_OWVAR 42
20124: PUSH
20125: LD_INT 19
20127: PUSH
20128: LD_INT 23
20130: PUSH
20131: LD_INT 19
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: LIST
20138: PUSH
20139: LD_VAR 0 1
20143: ARRAY
20144: ST_TO_ADDR
20145: GO 20471
20147: LD_INT 18
20149: DOUBLE
20150: EQUAL
20151: IFTRUE 20155
20153: GO 20166
20155: POP
// bc_type := b_ext_radar ; 19 :
20156: LD_ADDR_OWVAR 42
20160: PUSH
20161: LD_INT 20
20163: ST_TO_ADDR
20164: GO 20471
20166: LD_INT 19
20168: DOUBLE
20169: EQUAL
20170: IFTRUE 20174
20172: GO 20185
20174: POP
// bc_type := b_ext_radio ; 20 :
20175: LD_ADDR_OWVAR 42
20179: PUSH
20180: LD_INT 22
20182: ST_TO_ADDR
20183: GO 20471
20185: LD_INT 20
20187: DOUBLE
20188: EQUAL
20189: IFTRUE 20193
20191: GO 20204
20193: POP
// bc_type := b_ext_siberium ; 21 :
20194: LD_ADDR_OWVAR 42
20198: PUSH
20199: LD_INT 21
20201: ST_TO_ADDR
20202: GO 20471
20204: LD_INT 21
20206: DOUBLE
20207: EQUAL
20208: IFTRUE 20212
20210: GO 20223
20212: POP
// bc_type := b_ext_computer ; 22 :
20213: LD_ADDR_OWVAR 42
20217: PUSH
20218: LD_INT 24
20220: ST_TO_ADDR
20221: GO 20471
20223: LD_INT 22
20225: DOUBLE
20226: EQUAL
20227: IFTRUE 20231
20229: GO 20242
20231: POP
// bc_type := b_ext_track ; 23 :
20232: LD_ADDR_OWVAR 42
20236: PUSH
20237: LD_INT 16
20239: ST_TO_ADDR
20240: GO 20471
20242: LD_INT 23
20244: DOUBLE
20245: EQUAL
20246: IFTRUE 20250
20248: GO 20261
20250: POP
// bc_type := b_ext_laser ; 24 :
20251: LD_ADDR_OWVAR 42
20255: PUSH
20256: LD_INT 25
20258: ST_TO_ADDR
20259: GO 20471
20261: LD_INT 24
20263: DOUBLE
20264: EQUAL
20265: IFTRUE 20269
20267: GO 20280
20269: POP
// bc_type := b_control_tower ; 25 :
20270: LD_ADDR_OWVAR 42
20274: PUSH
20275: LD_INT 36
20277: ST_TO_ADDR
20278: GO 20471
20280: LD_INT 25
20282: DOUBLE
20283: EQUAL
20284: IFTRUE 20288
20286: GO 20299
20288: POP
// bc_type := b_breastwork ; 26 :
20289: LD_ADDR_OWVAR 42
20293: PUSH
20294: LD_INT 31
20296: ST_TO_ADDR
20297: GO 20471
20299: LD_INT 26
20301: DOUBLE
20302: EQUAL
20303: IFTRUE 20307
20305: GO 20318
20307: POP
// bc_type := b_bunker ; 27 :
20308: LD_ADDR_OWVAR 42
20312: PUSH
20313: LD_INT 32
20315: ST_TO_ADDR
20316: GO 20471
20318: LD_INT 27
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20337
20326: POP
// bc_type := b_turret ; 28 :
20327: LD_ADDR_OWVAR 42
20331: PUSH
20332: LD_INT 33
20334: ST_TO_ADDR
20335: GO 20471
20337: LD_INT 28
20339: DOUBLE
20340: EQUAL
20341: IFTRUE 20345
20343: GO 20356
20345: POP
// bc_type := b_armoury ; 29 :
20346: LD_ADDR_OWVAR 42
20350: PUSH
20351: LD_INT 4
20353: ST_TO_ADDR
20354: GO 20471
20356: LD_INT 29
20358: DOUBLE
20359: EQUAL
20360: IFTRUE 20364
20362: GO 20375
20364: POP
// bc_type := b_barracks ; 30 :
20365: LD_ADDR_OWVAR 42
20369: PUSH
20370: LD_INT 5
20372: ST_TO_ADDR
20373: GO 20471
20375: LD_INT 30
20377: DOUBLE
20378: EQUAL
20379: IFTRUE 20383
20381: GO 20394
20383: POP
// bc_type := b_solar_power ; 31 :
20384: LD_ADDR_OWVAR 42
20388: PUSH
20389: LD_INT 27
20391: ST_TO_ADDR
20392: GO 20471
20394: LD_INT 31
20396: DOUBLE
20397: EQUAL
20398: IFTRUE 20402
20400: GO 20413
20402: POP
// bc_type := b_oil_power ; 32 :
20403: LD_ADDR_OWVAR 42
20407: PUSH
20408: LD_INT 26
20410: ST_TO_ADDR
20411: GO 20471
20413: LD_INT 32
20415: DOUBLE
20416: EQUAL
20417: IFTRUE 20421
20419: GO 20432
20421: POP
// bc_type := b_siberite_power ; 33 :
20422: LD_ADDR_OWVAR 42
20426: PUSH
20427: LD_INT 28
20429: ST_TO_ADDR
20430: GO 20471
20432: LD_INT 33
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20451
20440: POP
// bc_type := b_oil_mine ; 34 :
20441: LD_ADDR_OWVAR 42
20445: PUSH
20446: LD_INT 29
20448: ST_TO_ADDR
20449: GO 20471
20451: LD_INT 34
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20470
20459: POP
// bc_type := b_siberite_mine ; end ;
20460: LD_ADDR_OWVAR 42
20464: PUSH
20465: LD_INT 30
20467: ST_TO_ADDR
20468: GO 20471
20470: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20471: LD_ADDR_VAR 0 8
20475: PUSH
20476: LD_VAR 0 5
20480: PPUSH
20481: LD_VAR 0 6
20485: PPUSH
20486: LD_VAR 0 3
20490: PPUSH
20491: CALL_OW 47
20495: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20496: LD_OWVAR 42
20500: PUSH
20501: LD_INT 32
20503: PUSH
20504: LD_INT 33
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: IN
20511: IFFALSE 20527
// PlaceWeaponTurret ( b , weapon ) ;
20513: LD_VAR 0 8
20517: PPUSH
20518: LD_VAR 0 4
20522: PPUSH
20523: CALL_OW 431
// end ;
20527: LD_VAR 0 7
20531: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20538: LD_ADDR_VAR 0 4
20542: PUSH
20543: LD_INT 22
20545: PUSH
20546: LD_OWVAR 2
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 2
20557: PUSH
20558: LD_INT 30
20560: PUSH
20561: LD_INT 0
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 30
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PPUSH
20587: CALL_OW 69
20591: ST_TO_ADDR
// if not tmp then
20592: LD_VAR 0 4
20596: NOT
20597: IFFALSE 20601
// exit ;
20599: GO 20660
// for i in tmp do
20601: LD_ADDR_VAR 0 2
20605: PUSH
20606: LD_VAR 0 4
20610: PUSH
20611: FOR_IN
20612: IFFALSE 20658
// for j = 1 to 3 do
20614: LD_ADDR_VAR 0 3
20618: PUSH
20619: DOUBLE
20620: LD_INT 1
20622: DEC
20623: ST_TO_ADDR
20624: LD_INT 3
20626: PUSH
20627: FOR_TO
20628: IFFALSE 20654
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20630: LD_VAR 0 2
20634: PPUSH
20635: CALL_OW 274
20639: PPUSH
20640: LD_VAR 0 3
20644: PPUSH
20645: LD_INT 99999
20647: PPUSH
20648: CALL_OW 277
20652: GO 20627
20654: POP
20655: POP
20656: GO 20611
20658: POP
20659: POP
// end ;
20660: LD_VAR 0 1
20664: RET
// export function hHackSetLevel10 ; var i , j ; begin
20665: LD_INT 0
20667: PPUSH
20668: PPUSH
20669: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20670: LD_ADDR_VAR 0 2
20674: PUSH
20675: LD_INT 21
20677: PUSH
20678: LD_INT 1
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PPUSH
20685: CALL_OW 69
20689: PUSH
20690: FOR_IN
20691: IFFALSE 20743
// if IsSelected ( i ) then
20693: LD_VAR 0 2
20697: PPUSH
20698: CALL_OW 306
20702: IFFALSE 20741
// begin for j := 1 to 4 do
20704: LD_ADDR_VAR 0 3
20708: PUSH
20709: DOUBLE
20710: LD_INT 1
20712: DEC
20713: ST_TO_ADDR
20714: LD_INT 4
20716: PUSH
20717: FOR_TO
20718: IFFALSE 20739
// SetSkill ( i , j , 10 ) ;
20720: LD_VAR 0 2
20724: PPUSH
20725: LD_VAR 0 3
20729: PPUSH
20730: LD_INT 10
20732: PPUSH
20733: CALL_OW 237
20737: GO 20717
20739: POP
20740: POP
// end ;
20741: GO 20690
20743: POP
20744: POP
// end ;
20745: LD_VAR 0 1
20749: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20750: LD_INT 0
20752: PPUSH
20753: PPUSH
20754: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20755: LD_ADDR_VAR 0 2
20759: PUSH
20760: LD_INT 22
20762: PUSH
20763: LD_OWVAR 2
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 21
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 69
20790: PUSH
20791: FOR_IN
20792: IFFALSE 20833
// begin for j := 1 to 4 do
20794: LD_ADDR_VAR 0 3
20798: PUSH
20799: DOUBLE
20800: LD_INT 1
20802: DEC
20803: ST_TO_ADDR
20804: LD_INT 4
20806: PUSH
20807: FOR_TO
20808: IFFALSE 20829
// SetSkill ( i , j , 10 ) ;
20810: LD_VAR 0 2
20814: PPUSH
20815: LD_VAR 0 3
20819: PPUSH
20820: LD_INT 10
20822: PPUSH
20823: CALL_OW 237
20827: GO 20807
20829: POP
20830: POP
// end ;
20831: GO 20791
20833: POP
20834: POP
// end ;
20835: LD_VAR 0 1
20839: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20840: LD_INT 0
20842: PPUSH
// uc_side := your_side ;
20843: LD_ADDR_OWVAR 20
20847: PUSH
20848: LD_OWVAR 2
20852: ST_TO_ADDR
// uc_nation := nation ;
20853: LD_ADDR_OWVAR 21
20857: PUSH
20858: LD_VAR 0 1
20862: ST_TO_ADDR
// InitHc ;
20863: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20867: LD_INT 0
20869: PPUSH
20870: LD_VAR 0 2
20874: PPUSH
20875: LD_VAR 0 3
20879: PPUSH
20880: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20884: LD_VAR 0 4
20888: PPUSH
20889: LD_VAR 0 5
20893: PPUSH
20894: CALL_OW 428
20898: PUSH
20899: LD_INT 0
20901: EQUAL
20902: IFFALSE 20926
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20904: CALL_OW 44
20908: PPUSH
20909: LD_VAR 0 4
20913: PPUSH
20914: LD_VAR 0 5
20918: PPUSH
20919: LD_INT 1
20921: PPUSH
20922: CALL_OW 48
// end ;
20926: LD_VAR 0 6
20930: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20931: LD_INT 0
20933: PPUSH
20934: PPUSH
// uc_side := your_side ;
20935: LD_ADDR_OWVAR 20
20939: PUSH
20940: LD_OWVAR 2
20944: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20945: LD_VAR 0 1
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: LD_INT 3
20958: PUSH
20959: LD_INT 4
20961: PUSH
20962: LD_INT 5
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: IN
20972: IFFALSE 20984
// uc_nation := nation_american else
20974: LD_ADDR_OWVAR 21
20978: PUSH
20979: LD_INT 1
20981: ST_TO_ADDR
20982: GO 21027
// if chassis in [ 11 , 12 , 13 , 14 ] then
20984: LD_VAR 0 1
20988: PUSH
20989: LD_INT 11
20991: PUSH
20992: LD_INT 12
20994: PUSH
20995: LD_INT 13
20997: PUSH
20998: LD_INT 14
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: IN
21007: IFFALSE 21019
// uc_nation := nation_arabian else
21009: LD_ADDR_OWVAR 21
21013: PUSH
21014: LD_INT 2
21016: ST_TO_ADDR
21017: GO 21027
// uc_nation := nation_russian ;
21019: LD_ADDR_OWVAR 21
21023: PUSH
21024: LD_INT 3
21026: ST_TO_ADDR
// vc_chassis := chassis ;
21027: LD_ADDR_OWVAR 37
21031: PUSH
21032: LD_VAR 0 1
21036: ST_TO_ADDR
// vc_engine := engine ;
21037: LD_ADDR_OWVAR 39
21041: PUSH
21042: LD_VAR 0 2
21046: ST_TO_ADDR
// vc_control := control ;
21047: LD_ADDR_OWVAR 38
21051: PUSH
21052: LD_VAR 0 3
21056: ST_TO_ADDR
// vc_weapon := weapon ;
21057: LD_ADDR_OWVAR 40
21061: PUSH
21062: LD_VAR 0 4
21066: ST_TO_ADDR
// un := CreateVehicle ;
21067: LD_ADDR_VAR 0 8
21071: PUSH
21072: CALL_OW 45
21076: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21077: LD_VAR 0 8
21081: PPUSH
21082: LD_INT 0
21084: PPUSH
21085: LD_INT 5
21087: PPUSH
21088: CALL_OW 12
21092: PPUSH
21093: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21097: LD_VAR 0 8
21101: PPUSH
21102: LD_VAR 0 5
21106: PPUSH
21107: LD_VAR 0 6
21111: PPUSH
21112: LD_INT 1
21114: PPUSH
21115: CALL_OW 48
// end ;
21119: LD_VAR 0 7
21123: RET
// export hInvincible ; every 1 do
21124: GO 21126
21126: DISABLE
// hInvincible := [ ] ;
21127: LD_ADDR_EXP 95
21131: PUSH
21132: EMPTY
21133: ST_TO_ADDR
21134: END
// every 10 do var i ;
21135: GO 21137
21137: DISABLE
21138: LD_INT 0
21140: PPUSH
// begin enable ;
21141: ENABLE
// if not hInvincible then
21142: LD_EXP 95
21146: NOT
21147: IFFALSE 21151
// exit ;
21149: GO 21195
// for i in hInvincible do
21151: LD_ADDR_VAR 0 1
21155: PUSH
21156: LD_EXP 95
21160: PUSH
21161: FOR_IN
21162: IFFALSE 21193
// if GetLives ( i ) < 1000 then
21164: LD_VAR 0 1
21168: PPUSH
21169: CALL_OW 256
21173: PUSH
21174: LD_INT 1000
21176: LESS
21177: IFFALSE 21191
// SetLives ( i , 1000 ) ;
21179: LD_VAR 0 1
21183: PPUSH
21184: LD_INT 1000
21186: PPUSH
21187: CALL_OW 234
21191: GO 21161
21193: POP
21194: POP
// end ;
21195: PPOPN 1
21197: END
// export function hHackInvincible ; var i ; begin
21198: LD_INT 0
21200: PPUSH
21201: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21202: LD_ADDR_VAR 0 2
21206: PUSH
21207: LD_INT 2
21209: PUSH
21210: LD_INT 21
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 21
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: LIST
21234: PPUSH
21235: CALL_OW 69
21239: PUSH
21240: FOR_IN
21241: IFFALSE 21302
// if IsSelected ( i ) then
21243: LD_VAR 0 2
21247: PPUSH
21248: CALL_OW 306
21252: IFFALSE 21300
// begin if i in hInvincible then
21254: LD_VAR 0 2
21258: PUSH
21259: LD_EXP 95
21263: IN
21264: IFFALSE 21284
// hInvincible := hInvincible diff i else
21266: LD_ADDR_EXP 95
21270: PUSH
21271: LD_EXP 95
21275: PUSH
21276: LD_VAR 0 2
21280: DIFF
21281: ST_TO_ADDR
21282: GO 21300
// hInvincible := hInvincible union i ;
21284: LD_ADDR_EXP 95
21288: PUSH
21289: LD_EXP 95
21293: PUSH
21294: LD_VAR 0 2
21298: UNION
21299: ST_TO_ADDR
// end ;
21300: GO 21240
21302: POP
21303: POP
// end ;
21304: LD_VAR 0 1
21308: RET
// export function hHackInvisible ; var i , j ; begin
21309: LD_INT 0
21311: PPUSH
21312: PPUSH
21313: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21314: LD_ADDR_VAR 0 2
21318: PUSH
21319: LD_INT 21
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PPUSH
21329: CALL_OW 69
21333: PUSH
21334: FOR_IN
21335: IFFALSE 21359
// if IsSelected ( i ) then
21337: LD_VAR 0 2
21341: PPUSH
21342: CALL_OW 306
21346: IFFALSE 21357
// ComForceInvisible ( i ) ;
21348: LD_VAR 0 2
21352: PPUSH
21353: CALL_OW 496
21357: GO 21334
21359: POP
21360: POP
// end ;
21361: LD_VAR 0 1
21365: RET
// export function hHackChangeYourSide ; begin
21366: LD_INT 0
21368: PPUSH
// if your_side = 8 then
21369: LD_OWVAR 2
21373: PUSH
21374: LD_INT 8
21376: EQUAL
21377: IFFALSE 21389
// your_side := 0 else
21379: LD_ADDR_OWVAR 2
21383: PUSH
21384: LD_INT 0
21386: ST_TO_ADDR
21387: GO 21403
// your_side := your_side + 1 ;
21389: LD_ADDR_OWVAR 2
21393: PUSH
21394: LD_OWVAR 2
21398: PUSH
21399: LD_INT 1
21401: PLUS
21402: ST_TO_ADDR
// end ;
21403: LD_VAR 0 1
21407: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21408: LD_INT 0
21410: PPUSH
21411: PPUSH
21412: PPUSH
// for i in all_units do
21413: LD_ADDR_VAR 0 2
21417: PUSH
21418: LD_OWVAR 3
21422: PUSH
21423: FOR_IN
21424: IFFALSE 21502
// if IsSelected ( i ) then
21426: LD_VAR 0 2
21430: PPUSH
21431: CALL_OW 306
21435: IFFALSE 21500
// begin j := GetSide ( i ) ;
21437: LD_ADDR_VAR 0 3
21441: PUSH
21442: LD_VAR 0 2
21446: PPUSH
21447: CALL_OW 255
21451: ST_TO_ADDR
// if j = 8 then
21452: LD_VAR 0 3
21456: PUSH
21457: LD_INT 8
21459: EQUAL
21460: IFFALSE 21472
// j := 0 else
21462: LD_ADDR_VAR 0 3
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
21470: GO 21486
// j := j + 1 ;
21472: LD_ADDR_VAR 0 3
21476: PUSH
21477: LD_VAR 0 3
21481: PUSH
21482: LD_INT 1
21484: PLUS
21485: ST_TO_ADDR
// SetSide ( i , j ) ;
21486: LD_VAR 0 2
21490: PPUSH
21491: LD_VAR 0 3
21495: PPUSH
21496: CALL_OW 235
// end ;
21500: GO 21423
21502: POP
21503: POP
// end ;
21504: LD_VAR 0 1
21508: RET
// export function hHackFog ; begin
21509: LD_INT 0
21511: PPUSH
// FogOff ( true ) ;
21512: LD_INT 1
21514: PPUSH
21515: CALL_OW 344
// end ;
21519: LD_VAR 0 1
21523: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21524: LD_INT 0
21526: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21527: LD_VAR 0 1
21531: PPUSH
21532: LD_VAR 0 2
21536: PPUSH
21537: LD_VAR 0 3
21541: PPUSH
21542: LD_INT 1
21544: PPUSH
21545: LD_INT 1
21547: PPUSH
21548: CALL_OW 483
// CenterOnXY ( x , y ) ;
21552: LD_VAR 0 2
21556: PPUSH
21557: LD_VAR 0 3
21561: PPUSH
21562: CALL_OW 84
// end ; end_of_file
21566: LD_VAR 0 4
21570: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21571: LD_INT 0
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 264
21586: PUSH
21587: LD_EXP 22
21591: EQUAL
21592: IFFALSE 21664
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21594: LD_INT 68
21596: PPUSH
21597: LD_VAR 0 1
21601: PPUSH
21602: CALL_OW 255
21606: PPUSH
21607: CALL_OW 321
21611: PUSH
21612: LD_INT 2
21614: EQUAL
21615: IFFALSE 21627
// eff := 70 else
21617: LD_ADDR_VAR 0 4
21621: PUSH
21622: LD_INT 70
21624: ST_TO_ADDR
21625: GO 21635
// eff := 30 ;
21627: LD_ADDR_VAR 0 4
21631: PUSH
21632: LD_INT 30
21634: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21635: LD_VAR 0 1
21639: PPUSH
21640: CALL_OW 250
21644: PPUSH
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 251
21654: PPUSH
21655: LD_VAR 0 4
21659: PPUSH
21660: CALL_OW 495
// end ; end ;
21664: LD_VAR 0 2
21668: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21669: LD_INT 0
21671: PPUSH
// end ;
21672: LD_VAR 0 4
21676: RET
// export function SOS_Command ( cmd ) ; begin
21677: LD_INT 0
21679: PPUSH
// end ;
21680: LD_VAR 0 2
21684: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21685: LD_INT 0
21687: PPUSH
// end ;
21688: LD_VAR 0 6
21692: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21693: LD_INT 0
21695: PPUSH
21696: PPUSH
// if not vehicle or not factory then
21697: LD_VAR 0 1
21701: NOT
21702: PUSH
21703: LD_VAR 0 2
21707: NOT
21708: OR
21709: IFFALSE 21713
// exit ;
21711: GO 21944
// if factoryWaypoints >= factory then
21713: LD_EXP 96
21717: PUSH
21718: LD_VAR 0 2
21722: GREATEREQUAL
21723: IFFALSE 21944
// if factoryWaypoints [ factory ] then
21725: LD_EXP 96
21729: PUSH
21730: LD_VAR 0 2
21734: ARRAY
21735: IFFALSE 21944
// begin if GetControl ( vehicle ) = control_manual then
21737: LD_VAR 0 1
21741: PPUSH
21742: CALL_OW 263
21746: PUSH
21747: LD_INT 1
21749: EQUAL
21750: IFFALSE 21831
// begin driver := IsDrivenBy ( vehicle ) ;
21752: LD_ADDR_VAR 0 4
21756: PUSH
21757: LD_VAR 0 1
21761: PPUSH
21762: CALL_OW 311
21766: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21767: LD_VAR 0 4
21771: PPUSH
21772: LD_EXP 96
21776: PUSH
21777: LD_VAR 0 2
21781: ARRAY
21782: PUSH
21783: LD_INT 3
21785: ARRAY
21786: PPUSH
21787: LD_EXP 96
21791: PUSH
21792: LD_VAR 0 2
21796: ARRAY
21797: PUSH
21798: LD_INT 4
21800: ARRAY
21801: PPUSH
21802: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21806: LD_VAR 0 4
21810: PPUSH
21811: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21815: LD_VAR 0 4
21819: PPUSH
21820: LD_VAR 0 2
21824: PPUSH
21825: CALL_OW 180
// end else
21829: GO 21944
// if GetControl ( vehicle ) = control_remote then
21831: LD_VAR 0 1
21835: PPUSH
21836: CALL_OW 263
21840: PUSH
21841: LD_INT 2
21843: EQUAL
21844: IFFALSE 21905
// begin wait ( 0 0$2 ) ;
21846: LD_INT 70
21848: PPUSH
21849: CALL_OW 67
// if Connect ( vehicle ) then
21853: LD_VAR 0 1
21857: PPUSH
21858: CALL 34168 0 1
21862: IFFALSE 21903
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21864: LD_VAR 0 1
21868: PPUSH
21869: LD_EXP 96
21873: PUSH
21874: LD_VAR 0 2
21878: ARRAY
21879: PUSH
21880: LD_INT 3
21882: ARRAY
21883: PPUSH
21884: LD_EXP 96
21888: PUSH
21889: LD_VAR 0 2
21893: ARRAY
21894: PUSH
21895: LD_INT 4
21897: ARRAY
21898: PPUSH
21899: CALL_OW 171
// end else
21903: GO 21944
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21905: LD_VAR 0 1
21909: PPUSH
21910: LD_EXP 96
21914: PUSH
21915: LD_VAR 0 2
21919: ARRAY
21920: PUSH
21921: LD_INT 3
21923: ARRAY
21924: PPUSH
21925: LD_EXP 96
21929: PUSH
21930: LD_VAR 0 2
21934: ARRAY
21935: PUSH
21936: LD_INT 4
21938: ARRAY
21939: PPUSH
21940: CALL_OW 171
// end ; end ;
21944: LD_VAR 0 3
21948: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21949: LD_INT 0
21951: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21952: LD_VAR 0 1
21956: PUSH
21957: LD_INT 250
21959: EQUAL
21960: PUSH
21961: LD_VAR 0 2
21965: PPUSH
21966: CALL_OW 264
21970: PUSH
21971: LD_EXP 25
21975: EQUAL
21976: AND
21977: IFFALSE 21998
// MinerPlaceMine ( unit , x , y ) ;
21979: LD_VAR 0 2
21983: PPUSH
21984: LD_VAR 0 4
21988: PPUSH
21989: LD_VAR 0 5
21993: PPUSH
21994: CALL 24726 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21998: LD_VAR 0 1
22002: PUSH
22003: LD_INT 251
22005: EQUAL
22006: PUSH
22007: LD_VAR 0 2
22011: PPUSH
22012: CALL_OW 264
22016: PUSH
22017: LD_EXP 25
22021: EQUAL
22022: AND
22023: IFFALSE 22044
// MinerDetonateMine ( unit , x , y ) ;
22025: LD_VAR 0 2
22029: PPUSH
22030: LD_VAR 0 4
22034: PPUSH
22035: LD_VAR 0 5
22039: PPUSH
22040: CALL 25003 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22044: LD_VAR 0 1
22048: PUSH
22049: LD_INT 252
22051: EQUAL
22052: PUSH
22053: LD_VAR 0 2
22057: PPUSH
22058: CALL_OW 264
22062: PUSH
22063: LD_EXP 25
22067: EQUAL
22068: AND
22069: IFFALSE 22090
// MinerCreateMinefield ( unit , x , y ) ;
22071: LD_VAR 0 2
22075: PPUSH
22076: LD_VAR 0 4
22080: PPUSH
22081: LD_VAR 0 5
22085: PPUSH
22086: CALL 25420 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22090: LD_VAR 0 1
22094: PUSH
22095: LD_INT 253
22097: EQUAL
22098: PUSH
22099: LD_VAR 0 2
22103: PPUSH
22104: CALL_OW 257
22108: PUSH
22109: LD_INT 5
22111: EQUAL
22112: AND
22113: IFFALSE 22134
// ComBinocular ( unit , x , y ) ;
22115: LD_VAR 0 2
22119: PPUSH
22120: LD_VAR 0 4
22124: PPUSH
22125: LD_VAR 0 5
22129: PPUSH
22130: CALL 25791 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22134: LD_VAR 0 1
22138: PUSH
22139: LD_INT 254
22141: EQUAL
22142: PUSH
22143: LD_VAR 0 2
22147: PPUSH
22148: CALL_OW 264
22152: PUSH
22153: LD_EXP 20
22157: EQUAL
22158: AND
22159: PUSH
22160: LD_VAR 0 3
22164: PPUSH
22165: CALL_OW 263
22169: PUSH
22170: LD_INT 3
22172: EQUAL
22173: AND
22174: IFFALSE 22190
// HackDestroyVehicle ( unit , selectedUnit ) ;
22176: LD_VAR 0 2
22180: PPUSH
22181: LD_VAR 0 3
22185: PPUSH
22186: CALL 24086 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22190: LD_VAR 0 1
22194: PUSH
22195: LD_INT 255
22197: EQUAL
22198: PUSH
22199: LD_VAR 0 2
22203: PPUSH
22204: CALL_OW 264
22208: PUSH
22209: LD_INT 14
22211: PUSH
22212: LD_INT 53
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: IN
22219: AND
22220: PUSH
22221: LD_VAR 0 4
22225: PPUSH
22226: LD_VAR 0 5
22230: PPUSH
22231: CALL_OW 488
22235: AND
22236: IFFALSE 22260
// CutTreeXYR ( unit , x , y , 12 ) ;
22238: LD_VAR 0 2
22242: PPUSH
22243: LD_VAR 0 4
22247: PPUSH
22248: LD_VAR 0 5
22252: PPUSH
22253: LD_INT 12
22255: PPUSH
22256: CALL 22652 0 4
// if cmd = 256 then
22260: LD_VAR 0 1
22264: PUSH
22265: LD_INT 256
22267: EQUAL
22268: IFFALSE 22289
// SetFactoryWaypoint ( unit , x , y ) ;
22270: LD_VAR 0 2
22274: PPUSH
22275: LD_VAR 0 4
22279: PPUSH
22280: LD_VAR 0 5
22284: PPUSH
22285: CALL 22294 0 3
// end ;
22289: LD_VAR 0 6
22293: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22294: LD_INT 0
22296: PPUSH
22297: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22298: LD_VAR 0 1
22302: NOT
22303: PUSH
22304: LD_VAR 0 2
22308: PPUSH
22309: LD_VAR 0 3
22313: PPUSH
22314: CALL_OW 488
22318: NOT
22319: OR
22320: PUSH
22321: LD_VAR 0 1
22325: PPUSH
22326: CALL_OW 266
22330: PUSH
22331: LD_INT 3
22333: NONEQUAL
22334: PUSH
22335: LD_VAR 0 1
22339: PPUSH
22340: CALL_OW 247
22344: PUSH
22345: LD_INT 1
22347: EQUAL
22348: NOT
22349: AND
22350: OR
22351: IFFALSE 22355
// exit ;
22353: GO 22504
// if GetType ( factory ) = unit_human then
22355: LD_VAR 0 1
22359: PPUSH
22360: CALL_OW 247
22364: PUSH
22365: LD_INT 1
22367: EQUAL
22368: IFFALSE 22385
// factory := IsInUnit ( factory ) ;
22370: LD_ADDR_VAR 0 1
22374: PUSH
22375: LD_VAR 0 1
22379: PPUSH
22380: CALL_OW 310
22384: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22385: LD_VAR 0 1
22389: PPUSH
22390: CALL_OW 266
22394: PUSH
22395: LD_INT 3
22397: NONEQUAL
22398: IFFALSE 22402
// exit ;
22400: GO 22504
// if HexInfo ( x , y ) = factory then
22402: LD_VAR 0 2
22406: PPUSH
22407: LD_VAR 0 3
22411: PPUSH
22412: CALL_OW 428
22416: PUSH
22417: LD_VAR 0 1
22421: EQUAL
22422: IFFALSE 22449
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22424: LD_ADDR_EXP 96
22428: PUSH
22429: LD_EXP 96
22433: PPUSH
22434: LD_VAR 0 1
22438: PPUSH
22439: LD_INT 0
22441: PPUSH
22442: CALL_OW 1
22446: ST_TO_ADDR
22447: GO 22500
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22449: LD_ADDR_EXP 96
22453: PUSH
22454: LD_EXP 96
22458: PPUSH
22459: LD_VAR 0 1
22463: PPUSH
22464: LD_VAR 0 1
22468: PPUSH
22469: CALL_OW 255
22473: PUSH
22474: LD_VAR 0 1
22478: PUSH
22479: LD_VAR 0 2
22483: PUSH
22484: LD_VAR 0 3
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: PPUSH
22495: CALL_OW 1
22499: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22500: CALL 22509 0 0
// end ;
22504: LD_VAR 0 4
22508: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
22509: LD_INT 0
22511: PPUSH
22512: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22513: LD_STRING resetFactoryWaypoint();
22515: PPUSH
22516: CALL_OW 559
// if factoryWaypoints then
22520: LD_EXP 96
22524: IFFALSE 22647
// begin for i := 1 to factoryWaypoints do
22526: LD_ADDR_VAR 0 2
22530: PUSH
22531: DOUBLE
22532: LD_INT 1
22534: DEC
22535: ST_TO_ADDR
22536: LD_EXP 96
22540: PUSH
22541: FOR_TO
22542: IFFALSE 22645
// if factoryWaypoints [ i ] then
22544: LD_EXP 96
22548: PUSH
22549: LD_VAR 0 2
22553: ARRAY
22554: IFFALSE 22643
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
22556: LD_STRING setFactoryWaypointXY(
22558: PUSH
22559: LD_EXP 96
22563: PUSH
22564: LD_VAR 0 2
22568: ARRAY
22569: PUSH
22570: LD_INT 1
22572: ARRAY
22573: STR
22574: PUSH
22575: LD_STRING ,
22577: STR
22578: PUSH
22579: LD_EXP 96
22583: PUSH
22584: LD_VAR 0 2
22588: ARRAY
22589: PUSH
22590: LD_INT 2
22592: ARRAY
22593: STR
22594: PUSH
22595: LD_STRING ,
22597: STR
22598: PUSH
22599: LD_EXP 96
22603: PUSH
22604: LD_VAR 0 2
22608: ARRAY
22609: PUSH
22610: LD_INT 3
22612: ARRAY
22613: STR
22614: PUSH
22615: LD_STRING ,
22617: STR
22618: PUSH
22619: LD_EXP 96
22623: PUSH
22624: LD_VAR 0 2
22628: ARRAY
22629: PUSH
22630: LD_INT 4
22632: ARRAY
22633: STR
22634: PUSH
22635: LD_STRING )
22637: STR
22638: PPUSH
22639: CALL_OW 559
22643: GO 22541
22645: POP
22646: POP
// end ; end ;
22647: LD_VAR 0 1
22651: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22652: LD_INT 0
22654: PPUSH
22655: PPUSH
22656: PPUSH
22657: PPUSH
22658: PPUSH
22659: PPUSH
22660: PPUSH
22661: PPUSH
22662: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22663: LD_VAR 0 1
22667: NOT
22668: PUSH
22669: LD_VAR 0 2
22673: PPUSH
22674: LD_VAR 0 3
22678: PPUSH
22679: CALL_OW 488
22683: NOT
22684: OR
22685: PUSH
22686: LD_VAR 0 4
22690: NOT
22691: OR
22692: IFFALSE 22696
// exit ;
22694: GO 23036
// list := [ ] ;
22696: LD_ADDR_VAR 0 13
22700: PUSH
22701: EMPTY
22702: ST_TO_ADDR
// if x - r < 0 then
22703: LD_VAR 0 2
22707: PUSH
22708: LD_VAR 0 4
22712: MINUS
22713: PUSH
22714: LD_INT 0
22716: LESS
22717: IFFALSE 22729
// min_x := 0 else
22719: LD_ADDR_VAR 0 7
22723: PUSH
22724: LD_INT 0
22726: ST_TO_ADDR
22727: GO 22745
// min_x := x - r ;
22729: LD_ADDR_VAR 0 7
22733: PUSH
22734: LD_VAR 0 2
22738: PUSH
22739: LD_VAR 0 4
22743: MINUS
22744: ST_TO_ADDR
// if y - r < 0 then
22745: LD_VAR 0 3
22749: PUSH
22750: LD_VAR 0 4
22754: MINUS
22755: PUSH
22756: LD_INT 0
22758: LESS
22759: IFFALSE 22771
// min_y := 0 else
22761: LD_ADDR_VAR 0 8
22765: PUSH
22766: LD_INT 0
22768: ST_TO_ADDR
22769: GO 22787
// min_y := y - r ;
22771: LD_ADDR_VAR 0 8
22775: PUSH
22776: LD_VAR 0 3
22780: PUSH
22781: LD_VAR 0 4
22785: MINUS
22786: ST_TO_ADDR
// max_x := x + r ;
22787: LD_ADDR_VAR 0 9
22791: PUSH
22792: LD_VAR 0 2
22796: PUSH
22797: LD_VAR 0 4
22801: PLUS
22802: ST_TO_ADDR
// max_y := y + r ;
22803: LD_ADDR_VAR 0 10
22807: PUSH
22808: LD_VAR 0 3
22812: PUSH
22813: LD_VAR 0 4
22817: PLUS
22818: ST_TO_ADDR
// for _x = min_x to max_x do
22819: LD_ADDR_VAR 0 11
22823: PUSH
22824: DOUBLE
22825: LD_VAR 0 7
22829: DEC
22830: ST_TO_ADDR
22831: LD_VAR 0 9
22835: PUSH
22836: FOR_TO
22837: IFFALSE 22954
// for _y = min_y to max_y do
22839: LD_ADDR_VAR 0 12
22843: PUSH
22844: DOUBLE
22845: LD_VAR 0 8
22849: DEC
22850: ST_TO_ADDR
22851: LD_VAR 0 10
22855: PUSH
22856: FOR_TO
22857: IFFALSE 22950
// begin if not ValidHex ( _x , _y ) then
22859: LD_VAR 0 11
22863: PPUSH
22864: LD_VAR 0 12
22868: PPUSH
22869: CALL_OW 488
22873: NOT
22874: IFFALSE 22878
// continue ;
22876: GO 22856
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22878: LD_VAR 0 11
22882: PPUSH
22883: LD_VAR 0 12
22887: PPUSH
22888: CALL_OW 351
22892: PUSH
22893: LD_VAR 0 11
22897: PPUSH
22898: LD_VAR 0 12
22902: PPUSH
22903: CALL_OW 554
22907: AND
22908: IFFALSE 22948
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22910: LD_ADDR_VAR 0 13
22914: PUSH
22915: LD_VAR 0 13
22919: PPUSH
22920: LD_VAR 0 13
22924: PUSH
22925: LD_INT 1
22927: PLUS
22928: PPUSH
22929: LD_VAR 0 11
22933: PUSH
22934: LD_VAR 0 12
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PPUSH
22943: CALL_OW 2
22947: ST_TO_ADDR
// end ;
22948: GO 22856
22950: POP
22951: POP
22952: GO 22836
22954: POP
22955: POP
// if not list then
22956: LD_VAR 0 13
22960: NOT
22961: IFFALSE 22965
// exit ;
22963: GO 23036
// for i in list do
22965: LD_ADDR_VAR 0 6
22969: PUSH
22970: LD_VAR 0 13
22974: PUSH
22975: FOR_IN
22976: IFFALSE 23034
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22978: LD_VAR 0 1
22982: PPUSH
22983: LD_STRING M
22985: PUSH
22986: LD_VAR 0 6
22990: PUSH
22991: LD_INT 1
22993: ARRAY
22994: PUSH
22995: LD_VAR 0 6
22999: PUSH
23000: LD_INT 2
23002: ARRAY
23003: PUSH
23004: LD_INT 0
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: LD_INT 0
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: PUSH
23025: EMPTY
23026: LIST
23027: PPUSH
23028: CALL_OW 447
23032: GO 22975
23034: POP
23035: POP
// end ;
23036: LD_VAR 0 5
23040: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23041: LD_EXP 97
23045: NOT
23046: IFFALSE 23096
23048: GO 23050
23050: DISABLE
// begin initHack := true ;
23051: LD_ADDR_EXP 97
23055: PUSH
23056: LD_INT 1
23058: ST_TO_ADDR
// hackTanks := [ ] ;
23059: LD_ADDR_EXP 98
23063: PUSH
23064: EMPTY
23065: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23066: LD_ADDR_EXP 99
23070: PUSH
23071: EMPTY
23072: ST_TO_ADDR
// hackLimit := 3 ;
23073: LD_ADDR_EXP 100
23077: PUSH
23078: LD_INT 3
23080: ST_TO_ADDR
// hackDist := 12 ;
23081: LD_ADDR_EXP 101
23085: PUSH
23086: LD_INT 12
23088: ST_TO_ADDR
// hackCounter := [ ] ;
23089: LD_ADDR_EXP 102
23093: PUSH
23094: EMPTY
23095: ST_TO_ADDR
// end ;
23096: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23097: LD_EXP 97
23101: PUSH
23102: LD_INT 34
23104: PUSH
23105: LD_EXP 20
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PPUSH
23114: CALL_OW 69
23118: AND
23119: IFFALSE 23374
23121: GO 23123
23123: DISABLE
23124: LD_INT 0
23126: PPUSH
23127: PPUSH
// begin enable ;
23128: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23129: LD_ADDR_VAR 0 1
23133: PUSH
23134: LD_INT 34
23136: PUSH
23137: LD_EXP 20
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PPUSH
23146: CALL_OW 69
23150: PUSH
23151: FOR_IN
23152: IFFALSE 23372
// begin if not i in hackTanks then
23154: LD_VAR 0 1
23158: PUSH
23159: LD_EXP 98
23163: IN
23164: NOT
23165: IFFALSE 23248
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23167: LD_ADDR_EXP 98
23171: PUSH
23172: LD_EXP 98
23176: PPUSH
23177: LD_EXP 98
23181: PUSH
23182: LD_INT 1
23184: PLUS
23185: PPUSH
23186: LD_VAR 0 1
23190: PPUSH
23191: CALL_OW 1
23195: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23196: LD_ADDR_EXP 99
23200: PUSH
23201: LD_EXP 99
23205: PPUSH
23206: LD_EXP 99
23210: PUSH
23211: LD_INT 1
23213: PLUS
23214: PPUSH
23215: EMPTY
23216: PPUSH
23217: CALL_OW 1
23221: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23222: LD_ADDR_EXP 102
23226: PUSH
23227: LD_EXP 102
23231: PPUSH
23232: LD_EXP 102
23236: PUSH
23237: LD_INT 1
23239: PLUS
23240: PPUSH
23241: EMPTY
23242: PPUSH
23243: CALL_OW 1
23247: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23248: LD_VAR 0 1
23252: PPUSH
23253: CALL_OW 302
23257: NOT
23258: IFFALSE 23271
// begin HackUnlinkAll ( i ) ;
23260: LD_VAR 0 1
23264: PPUSH
23265: CALL 23377 0 1
// continue ;
23269: GO 23151
// end ; HackCheckCapturedStatus ( i ) ;
23271: LD_VAR 0 1
23275: PPUSH
23276: CALL 23820 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23280: LD_ADDR_VAR 0 2
23284: PUSH
23285: LD_INT 81
23287: PUSH
23288: LD_VAR 0 1
23292: PPUSH
23293: CALL_OW 255
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 33
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 91
23314: PUSH
23315: LD_VAR 0 1
23319: PUSH
23320: LD_EXP 101
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 50
23332: PUSH
23333: EMPTY
23334: LIST
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: PPUSH
23342: CALL_OW 69
23346: ST_TO_ADDR
// if not tmp then
23347: LD_VAR 0 2
23351: NOT
23352: IFFALSE 23356
// continue ;
23354: GO 23151
// HackLink ( i , tmp ) ;
23356: LD_VAR 0 1
23360: PPUSH
23361: LD_VAR 0 2
23365: PPUSH
23366: CALL 23513 0 2
// end ;
23370: GO 23151
23372: POP
23373: POP
// end ;
23374: PPOPN 2
23376: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23377: LD_INT 0
23379: PPUSH
23380: PPUSH
23381: PPUSH
// if not hack in hackTanks then
23382: LD_VAR 0 1
23386: PUSH
23387: LD_EXP 98
23391: IN
23392: NOT
23393: IFFALSE 23397
// exit ;
23395: GO 23508
// index := GetElementIndex ( hackTanks , hack ) ;
23397: LD_ADDR_VAR 0 4
23401: PUSH
23402: LD_EXP 98
23406: PPUSH
23407: LD_VAR 0 1
23411: PPUSH
23412: CALL 30982 0 2
23416: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23417: LD_EXP 99
23421: PUSH
23422: LD_VAR 0 4
23426: ARRAY
23427: IFFALSE 23508
// begin for i in hackTanksCaptured [ index ] do
23429: LD_ADDR_VAR 0 3
23433: PUSH
23434: LD_EXP 99
23438: PUSH
23439: LD_VAR 0 4
23443: ARRAY
23444: PUSH
23445: FOR_IN
23446: IFFALSE 23472
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23448: LD_VAR 0 3
23452: PUSH
23453: LD_INT 1
23455: ARRAY
23456: PPUSH
23457: LD_VAR 0 3
23461: PUSH
23462: LD_INT 2
23464: ARRAY
23465: PPUSH
23466: CALL_OW 235
23470: GO 23445
23472: POP
23473: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23474: LD_ADDR_EXP 99
23478: PUSH
23479: LD_EXP 99
23483: PPUSH
23484: LD_VAR 0 4
23488: PPUSH
23489: EMPTY
23490: PPUSH
23491: CALL_OW 1
23495: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23496: LD_VAR 0 1
23500: PPUSH
23501: LD_INT 0
23503: PPUSH
23504: CALL_OW 505
// end ; end ;
23508: LD_VAR 0 2
23512: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23513: LD_INT 0
23515: PPUSH
23516: PPUSH
23517: PPUSH
// if not hack in hackTanks or not vehicles then
23518: LD_VAR 0 1
23522: PUSH
23523: LD_EXP 98
23527: IN
23528: NOT
23529: PUSH
23530: LD_VAR 0 2
23534: NOT
23535: OR
23536: IFFALSE 23540
// exit ;
23538: GO 23815
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23540: LD_ADDR_VAR 0 2
23544: PUSH
23545: LD_VAR 0 1
23549: PPUSH
23550: LD_VAR 0 2
23554: PPUSH
23555: LD_INT 1
23557: PPUSH
23558: LD_INT 1
23560: PPUSH
23561: CALL 31632 0 4
23565: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23566: LD_ADDR_VAR 0 5
23570: PUSH
23571: LD_EXP 98
23575: PPUSH
23576: LD_VAR 0 1
23580: PPUSH
23581: CALL 30982 0 2
23585: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23586: LD_EXP 99
23590: PUSH
23591: LD_VAR 0 5
23595: ARRAY
23596: PUSH
23597: LD_EXP 100
23601: LESS
23602: IFFALSE 23791
// begin for i := 1 to vehicles do
23604: LD_ADDR_VAR 0 4
23608: PUSH
23609: DOUBLE
23610: LD_INT 1
23612: DEC
23613: ST_TO_ADDR
23614: LD_VAR 0 2
23618: PUSH
23619: FOR_TO
23620: IFFALSE 23789
// begin if hackTanksCaptured [ index ] = hackLimit then
23622: LD_EXP 99
23626: PUSH
23627: LD_VAR 0 5
23631: ARRAY
23632: PUSH
23633: LD_EXP 100
23637: EQUAL
23638: IFFALSE 23642
// break ;
23640: GO 23789
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23642: LD_ADDR_EXP 102
23646: PUSH
23647: LD_EXP 102
23651: PPUSH
23652: LD_VAR 0 5
23656: PPUSH
23657: LD_EXP 102
23661: PUSH
23662: LD_VAR 0 5
23666: ARRAY
23667: PUSH
23668: LD_INT 1
23670: PLUS
23671: PPUSH
23672: CALL_OW 1
23676: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23677: LD_ADDR_EXP 99
23681: PUSH
23682: LD_EXP 99
23686: PPUSH
23687: LD_VAR 0 5
23691: PUSH
23692: LD_EXP 99
23696: PUSH
23697: LD_VAR 0 5
23701: ARRAY
23702: PUSH
23703: LD_INT 1
23705: PLUS
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PPUSH
23711: LD_VAR 0 2
23715: PUSH
23716: LD_VAR 0 4
23720: ARRAY
23721: PUSH
23722: LD_VAR 0 2
23726: PUSH
23727: LD_VAR 0 4
23731: ARRAY
23732: PPUSH
23733: CALL_OW 255
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PPUSH
23742: CALL 31197 0 3
23746: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23747: LD_VAR 0 2
23751: PUSH
23752: LD_VAR 0 4
23756: ARRAY
23757: PPUSH
23758: LD_VAR 0 1
23762: PPUSH
23763: CALL_OW 255
23767: PPUSH
23768: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23772: LD_VAR 0 2
23776: PUSH
23777: LD_VAR 0 4
23781: ARRAY
23782: PPUSH
23783: CALL_OW 141
// end ;
23787: GO 23619
23789: POP
23790: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23791: LD_VAR 0 1
23795: PPUSH
23796: LD_EXP 99
23800: PUSH
23801: LD_VAR 0 5
23805: ARRAY
23806: PUSH
23807: LD_INT 0
23809: PLUS
23810: PPUSH
23811: CALL_OW 505
// end ;
23815: LD_VAR 0 3
23819: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23820: LD_INT 0
23822: PPUSH
23823: PPUSH
23824: PPUSH
23825: PPUSH
// if not hack in hackTanks then
23826: LD_VAR 0 1
23830: PUSH
23831: LD_EXP 98
23835: IN
23836: NOT
23837: IFFALSE 23841
// exit ;
23839: GO 24081
// index := GetElementIndex ( hackTanks , hack ) ;
23841: LD_ADDR_VAR 0 4
23845: PUSH
23846: LD_EXP 98
23850: PPUSH
23851: LD_VAR 0 1
23855: PPUSH
23856: CALL 30982 0 2
23860: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23861: LD_ADDR_VAR 0 3
23865: PUSH
23866: DOUBLE
23867: LD_EXP 99
23871: PUSH
23872: LD_VAR 0 4
23876: ARRAY
23877: INC
23878: ST_TO_ADDR
23879: LD_INT 1
23881: PUSH
23882: FOR_DOWNTO
23883: IFFALSE 24055
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23885: LD_ADDR_VAR 0 5
23889: PUSH
23890: LD_EXP 99
23894: PUSH
23895: LD_VAR 0 4
23899: ARRAY
23900: PUSH
23901: LD_VAR 0 3
23905: ARRAY
23906: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23907: LD_VAR 0 5
23911: PUSH
23912: LD_INT 1
23914: ARRAY
23915: PPUSH
23916: CALL_OW 302
23920: NOT
23921: PUSH
23922: LD_VAR 0 5
23926: PUSH
23927: LD_INT 1
23929: ARRAY
23930: PPUSH
23931: CALL_OW 255
23935: PUSH
23936: LD_VAR 0 1
23940: PPUSH
23941: CALL_OW 255
23945: NONEQUAL
23946: OR
23947: IFFALSE 24053
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23949: LD_VAR 0 5
23953: PUSH
23954: LD_INT 1
23956: ARRAY
23957: PPUSH
23958: CALL_OW 305
23962: PUSH
23963: LD_VAR 0 5
23967: PUSH
23968: LD_INT 1
23970: ARRAY
23971: PPUSH
23972: CALL_OW 255
23976: PUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 255
23986: EQUAL
23987: AND
23988: IFFALSE 24012
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23990: LD_VAR 0 5
23994: PUSH
23995: LD_INT 1
23997: ARRAY
23998: PPUSH
23999: LD_VAR 0 5
24003: PUSH
24004: LD_INT 2
24006: ARRAY
24007: PPUSH
24008: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24012: LD_ADDR_EXP 99
24016: PUSH
24017: LD_EXP 99
24021: PPUSH
24022: LD_VAR 0 4
24026: PPUSH
24027: LD_EXP 99
24031: PUSH
24032: LD_VAR 0 4
24036: ARRAY
24037: PPUSH
24038: LD_VAR 0 3
24042: PPUSH
24043: CALL_OW 3
24047: PPUSH
24048: CALL_OW 1
24052: ST_TO_ADDR
// end ; end ;
24053: GO 23882
24055: POP
24056: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24057: LD_VAR 0 1
24061: PPUSH
24062: LD_EXP 99
24066: PUSH
24067: LD_VAR 0 4
24071: ARRAY
24072: PUSH
24073: LD_INT 0
24075: PLUS
24076: PPUSH
24077: CALL_OW 505
// end ;
24081: LD_VAR 0 2
24085: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24086: LD_INT 0
24088: PPUSH
24089: PPUSH
24090: PPUSH
24091: PPUSH
// if not hack in hackTanks then
24092: LD_VAR 0 1
24096: PUSH
24097: LD_EXP 98
24101: IN
24102: NOT
24103: IFFALSE 24107
// exit ;
24105: GO 24192
// index := GetElementIndex ( hackTanks , hack ) ;
24107: LD_ADDR_VAR 0 5
24111: PUSH
24112: LD_EXP 98
24116: PPUSH
24117: LD_VAR 0 1
24121: PPUSH
24122: CALL 30982 0 2
24126: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24127: LD_ADDR_VAR 0 4
24131: PUSH
24132: DOUBLE
24133: LD_INT 1
24135: DEC
24136: ST_TO_ADDR
24137: LD_EXP 99
24141: PUSH
24142: LD_VAR 0 5
24146: ARRAY
24147: PUSH
24148: FOR_TO
24149: IFFALSE 24190
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24151: LD_EXP 99
24155: PUSH
24156: LD_VAR 0 5
24160: ARRAY
24161: PUSH
24162: LD_VAR 0 4
24166: ARRAY
24167: PUSH
24168: LD_INT 1
24170: ARRAY
24171: PUSH
24172: LD_VAR 0 2
24176: EQUAL
24177: IFFALSE 24188
// KillUnit ( vehicle ) ;
24179: LD_VAR 0 2
24183: PPUSH
24184: CALL_OW 66
24188: GO 24148
24190: POP
24191: POP
// end ;
24192: LD_VAR 0 3
24196: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24197: LD_EXP 103
24201: NOT
24202: IFFALSE 24237
24204: GO 24206
24206: DISABLE
// begin initMiner := true ;
24207: LD_ADDR_EXP 103
24211: PUSH
24212: LD_INT 1
24214: ST_TO_ADDR
// minersList := [ ] ;
24215: LD_ADDR_EXP 104
24219: PUSH
24220: EMPTY
24221: ST_TO_ADDR
// minerMinesList := [ ] ;
24222: LD_ADDR_EXP 105
24226: PUSH
24227: EMPTY
24228: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24229: LD_ADDR_EXP 106
24233: PUSH
24234: LD_INT 5
24236: ST_TO_ADDR
// end ;
24237: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24238: LD_EXP 103
24242: PUSH
24243: LD_INT 34
24245: PUSH
24246: LD_EXP 25
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PPUSH
24255: CALL_OW 69
24259: AND
24260: IFFALSE 24723
24262: GO 24264
24264: DISABLE
24265: LD_INT 0
24267: PPUSH
24268: PPUSH
24269: PPUSH
24270: PPUSH
// begin enable ;
24271: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24272: LD_ADDR_VAR 0 1
24276: PUSH
24277: LD_INT 34
24279: PUSH
24280: LD_EXP 25
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PPUSH
24289: CALL_OW 69
24293: PUSH
24294: FOR_IN
24295: IFFALSE 24367
// begin if not i in minersList then
24297: LD_VAR 0 1
24301: PUSH
24302: LD_EXP 104
24306: IN
24307: NOT
24308: IFFALSE 24365
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24310: LD_ADDR_EXP 104
24314: PUSH
24315: LD_EXP 104
24319: PPUSH
24320: LD_EXP 104
24324: PUSH
24325: LD_INT 1
24327: PLUS
24328: PPUSH
24329: LD_VAR 0 1
24333: PPUSH
24334: CALL_OW 1
24338: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24339: LD_ADDR_EXP 105
24343: PUSH
24344: LD_EXP 105
24348: PPUSH
24349: LD_EXP 105
24353: PUSH
24354: LD_INT 1
24356: PLUS
24357: PPUSH
24358: EMPTY
24359: PPUSH
24360: CALL_OW 1
24364: ST_TO_ADDR
// end end ;
24365: GO 24294
24367: POP
24368: POP
// for i := minerMinesList downto 1 do
24369: LD_ADDR_VAR 0 1
24373: PUSH
24374: DOUBLE
24375: LD_EXP 105
24379: INC
24380: ST_TO_ADDR
24381: LD_INT 1
24383: PUSH
24384: FOR_DOWNTO
24385: IFFALSE 24721
// begin if IsLive ( minersList [ i ] ) then
24387: LD_EXP 104
24391: PUSH
24392: LD_VAR 0 1
24396: ARRAY
24397: PPUSH
24398: CALL_OW 300
24402: IFFALSE 24430
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24404: LD_EXP 104
24408: PUSH
24409: LD_VAR 0 1
24413: ARRAY
24414: PPUSH
24415: LD_EXP 105
24419: PUSH
24420: LD_VAR 0 1
24424: ARRAY
24425: PPUSH
24426: CALL_OW 505
// if not minerMinesList [ i ] then
24430: LD_EXP 105
24434: PUSH
24435: LD_VAR 0 1
24439: ARRAY
24440: NOT
24441: IFFALSE 24445
// continue ;
24443: GO 24384
// for j := minerMinesList [ i ] downto 1 do
24445: LD_ADDR_VAR 0 2
24449: PUSH
24450: DOUBLE
24451: LD_EXP 105
24455: PUSH
24456: LD_VAR 0 1
24460: ARRAY
24461: INC
24462: ST_TO_ADDR
24463: LD_INT 1
24465: PUSH
24466: FOR_DOWNTO
24467: IFFALSE 24717
// begin side := GetSide ( minersList [ i ] ) ;
24469: LD_ADDR_VAR 0 3
24473: PUSH
24474: LD_EXP 104
24478: PUSH
24479: LD_VAR 0 1
24483: ARRAY
24484: PPUSH
24485: CALL_OW 255
24489: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24490: LD_ADDR_VAR 0 4
24494: PUSH
24495: LD_EXP 105
24499: PUSH
24500: LD_VAR 0 1
24504: ARRAY
24505: PUSH
24506: LD_VAR 0 2
24510: ARRAY
24511: PUSH
24512: LD_INT 1
24514: ARRAY
24515: PPUSH
24516: LD_EXP 105
24520: PUSH
24521: LD_VAR 0 1
24525: ARRAY
24526: PUSH
24527: LD_VAR 0 2
24531: ARRAY
24532: PUSH
24533: LD_INT 2
24535: ARRAY
24536: PPUSH
24537: CALL_OW 428
24541: ST_TO_ADDR
// if not tmp then
24542: LD_VAR 0 4
24546: NOT
24547: IFFALSE 24551
// continue ;
24549: GO 24466
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24551: LD_VAR 0 4
24555: PUSH
24556: LD_INT 81
24558: PUSH
24559: LD_VAR 0 3
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PPUSH
24568: CALL_OW 69
24572: IN
24573: PUSH
24574: LD_EXP 105
24578: PUSH
24579: LD_VAR 0 1
24583: ARRAY
24584: PUSH
24585: LD_VAR 0 2
24589: ARRAY
24590: PUSH
24591: LD_INT 1
24593: ARRAY
24594: PPUSH
24595: LD_EXP 105
24599: PUSH
24600: LD_VAR 0 1
24604: ARRAY
24605: PUSH
24606: LD_VAR 0 2
24610: ARRAY
24611: PUSH
24612: LD_INT 2
24614: ARRAY
24615: PPUSH
24616: CALL_OW 458
24620: AND
24621: IFFALSE 24715
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24623: LD_EXP 105
24627: PUSH
24628: LD_VAR 0 1
24632: ARRAY
24633: PUSH
24634: LD_VAR 0 2
24638: ARRAY
24639: PUSH
24640: LD_INT 1
24642: ARRAY
24643: PPUSH
24644: LD_EXP 105
24648: PUSH
24649: LD_VAR 0 1
24653: ARRAY
24654: PUSH
24655: LD_VAR 0 2
24659: ARRAY
24660: PUSH
24661: LD_INT 2
24663: ARRAY
24664: PPUSH
24665: LD_VAR 0 3
24669: PPUSH
24670: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24674: LD_ADDR_EXP 105
24678: PUSH
24679: LD_EXP 105
24683: PPUSH
24684: LD_VAR 0 1
24688: PPUSH
24689: LD_EXP 105
24693: PUSH
24694: LD_VAR 0 1
24698: ARRAY
24699: PPUSH
24700: LD_VAR 0 2
24704: PPUSH
24705: CALL_OW 3
24709: PPUSH
24710: CALL_OW 1
24714: ST_TO_ADDR
// end ; end ;
24715: GO 24466
24717: POP
24718: POP
// end ;
24719: GO 24384
24721: POP
24722: POP
// end ;
24723: PPOPN 4
24725: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24726: LD_INT 0
24728: PPUSH
24729: PPUSH
// result := false ;
24730: LD_ADDR_VAR 0 4
24734: PUSH
24735: LD_INT 0
24737: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24738: LD_VAR 0 1
24742: PPUSH
24743: CALL_OW 264
24747: PUSH
24748: LD_EXP 25
24752: EQUAL
24753: NOT
24754: IFFALSE 24758
// exit ;
24756: GO 24998
// index := GetElementIndex ( minersList , unit ) ;
24758: LD_ADDR_VAR 0 5
24762: PUSH
24763: LD_EXP 104
24767: PPUSH
24768: LD_VAR 0 1
24772: PPUSH
24773: CALL 30982 0 2
24777: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24778: LD_EXP 105
24782: PUSH
24783: LD_VAR 0 5
24787: ARRAY
24788: PUSH
24789: LD_EXP 106
24793: GREATEREQUAL
24794: IFFALSE 24798
// exit ;
24796: GO 24998
// ComMoveXY ( unit , x , y ) ;
24798: LD_VAR 0 1
24802: PPUSH
24803: LD_VAR 0 2
24807: PPUSH
24808: LD_VAR 0 3
24812: PPUSH
24813: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24817: LD_INT 35
24819: PPUSH
24820: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24824: LD_VAR 0 1
24828: PPUSH
24829: LD_VAR 0 2
24833: PPUSH
24834: LD_VAR 0 3
24838: PPUSH
24839: CALL 61701 0 3
24843: NOT
24844: PUSH
24845: LD_VAR 0 1
24849: PPUSH
24850: CALL_OW 314
24854: AND
24855: IFFALSE 24859
// exit ;
24857: GO 24998
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24859: LD_VAR 0 2
24863: PPUSH
24864: LD_VAR 0 3
24868: PPUSH
24869: CALL_OW 428
24873: PUSH
24874: LD_VAR 0 1
24878: EQUAL
24879: PUSH
24880: LD_VAR 0 1
24884: PPUSH
24885: CALL_OW 314
24889: NOT
24890: AND
24891: IFFALSE 24817
// PlaySoundXY ( x , y , PlantMine ) ;
24893: LD_VAR 0 2
24897: PPUSH
24898: LD_VAR 0 3
24902: PPUSH
24903: LD_STRING PlantMine
24905: PPUSH
24906: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24910: LD_VAR 0 2
24914: PPUSH
24915: LD_VAR 0 3
24919: PPUSH
24920: LD_VAR 0 1
24924: PPUSH
24925: CALL_OW 255
24929: PPUSH
24930: LD_INT 0
24932: PPUSH
24933: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24937: LD_ADDR_EXP 105
24941: PUSH
24942: LD_EXP 105
24946: PPUSH
24947: LD_VAR 0 5
24951: PUSH
24952: LD_EXP 105
24956: PUSH
24957: LD_VAR 0 5
24961: ARRAY
24962: PUSH
24963: LD_INT 1
24965: PLUS
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PPUSH
24971: LD_VAR 0 2
24975: PUSH
24976: LD_VAR 0 3
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PPUSH
24985: CALL 31197 0 3
24989: ST_TO_ADDR
// result := true ;
24990: LD_ADDR_VAR 0 4
24994: PUSH
24995: LD_INT 1
24997: ST_TO_ADDR
// end ;
24998: LD_VAR 0 4
25002: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25003: LD_INT 0
25005: PPUSH
25006: PPUSH
25007: PPUSH
// if not unit in minersList then
25008: LD_VAR 0 1
25012: PUSH
25013: LD_EXP 104
25017: IN
25018: NOT
25019: IFFALSE 25023
// exit ;
25021: GO 25415
// index := GetElementIndex ( minersList , unit ) ;
25023: LD_ADDR_VAR 0 6
25027: PUSH
25028: LD_EXP 104
25032: PPUSH
25033: LD_VAR 0 1
25037: PPUSH
25038: CALL 30982 0 2
25042: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25043: LD_ADDR_VAR 0 5
25047: PUSH
25048: DOUBLE
25049: LD_EXP 105
25053: PUSH
25054: LD_VAR 0 6
25058: ARRAY
25059: INC
25060: ST_TO_ADDR
25061: LD_INT 1
25063: PUSH
25064: FOR_DOWNTO
25065: IFFALSE 25226
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25067: LD_EXP 105
25071: PUSH
25072: LD_VAR 0 6
25076: ARRAY
25077: PUSH
25078: LD_VAR 0 5
25082: ARRAY
25083: PUSH
25084: LD_INT 1
25086: ARRAY
25087: PUSH
25088: LD_VAR 0 2
25092: EQUAL
25093: PUSH
25094: LD_EXP 105
25098: PUSH
25099: LD_VAR 0 6
25103: ARRAY
25104: PUSH
25105: LD_VAR 0 5
25109: ARRAY
25110: PUSH
25111: LD_INT 2
25113: ARRAY
25114: PUSH
25115: LD_VAR 0 3
25119: EQUAL
25120: AND
25121: IFFALSE 25224
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25123: LD_EXP 105
25127: PUSH
25128: LD_VAR 0 6
25132: ARRAY
25133: PUSH
25134: LD_VAR 0 5
25138: ARRAY
25139: PUSH
25140: LD_INT 1
25142: ARRAY
25143: PPUSH
25144: LD_EXP 105
25148: PUSH
25149: LD_VAR 0 6
25153: ARRAY
25154: PUSH
25155: LD_VAR 0 5
25159: ARRAY
25160: PUSH
25161: LD_INT 2
25163: ARRAY
25164: PPUSH
25165: LD_VAR 0 1
25169: PPUSH
25170: CALL_OW 255
25174: PPUSH
25175: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25179: LD_ADDR_EXP 105
25183: PUSH
25184: LD_EXP 105
25188: PPUSH
25189: LD_VAR 0 6
25193: PPUSH
25194: LD_EXP 105
25198: PUSH
25199: LD_VAR 0 6
25203: ARRAY
25204: PPUSH
25205: LD_VAR 0 5
25209: PPUSH
25210: CALL_OW 3
25214: PPUSH
25215: CALL_OW 1
25219: ST_TO_ADDR
// exit ;
25220: POP
25221: POP
25222: GO 25415
// end ; end ;
25224: GO 25064
25226: POP
25227: POP
// for i := minerMinesList [ index ] downto 1 do
25228: LD_ADDR_VAR 0 5
25232: PUSH
25233: DOUBLE
25234: LD_EXP 105
25238: PUSH
25239: LD_VAR 0 6
25243: ARRAY
25244: INC
25245: ST_TO_ADDR
25246: LD_INT 1
25248: PUSH
25249: FOR_DOWNTO
25250: IFFALSE 25413
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25252: LD_EXP 105
25256: PUSH
25257: LD_VAR 0 6
25261: ARRAY
25262: PUSH
25263: LD_VAR 0 5
25267: ARRAY
25268: PUSH
25269: LD_INT 1
25271: ARRAY
25272: PPUSH
25273: LD_EXP 105
25277: PUSH
25278: LD_VAR 0 6
25282: ARRAY
25283: PUSH
25284: LD_VAR 0 5
25288: ARRAY
25289: PUSH
25290: LD_INT 2
25292: ARRAY
25293: PPUSH
25294: LD_VAR 0 2
25298: PPUSH
25299: LD_VAR 0 3
25303: PPUSH
25304: CALL_OW 298
25308: PUSH
25309: LD_INT 6
25311: LESS
25312: IFFALSE 25411
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25314: LD_EXP 105
25318: PUSH
25319: LD_VAR 0 6
25323: ARRAY
25324: PUSH
25325: LD_VAR 0 5
25329: ARRAY
25330: PUSH
25331: LD_INT 1
25333: ARRAY
25334: PPUSH
25335: LD_EXP 105
25339: PUSH
25340: LD_VAR 0 6
25344: ARRAY
25345: PUSH
25346: LD_VAR 0 5
25350: ARRAY
25351: PUSH
25352: LD_INT 2
25354: ARRAY
25355: PPUSH
25356: LD_VAR 0 1
25360: PPUSH
25361: CALL_OW 255
25365: PPUSH
25366: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25370: LD_ADDR_EXP 105
25374: PUSH
25375: LD_EXP 105
25379: PPUSH
25380: LD_VAR 0 6
25384: PPUSH
25385: LD_EXP 105
25389: PUSH
25390: LD_VAR 0 6
25394: ARRAY
25395: PPUSH
25396: LD_VAR 0 5
25400: PPUSH
25401: CALL_OW 3
25405: PPUSH
25406: CALL_OW 1
25410: ST_TO_ADDR
// end ; end ;
25411: GO 25249
25413: POP
25414: POP
// end ;
25415: LD_VAR 0 4
25419: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25420: LD_INT 0
25422: PPUSH
25423: PPUSH
25424: PPUSH
25425: PPUSH
25426: PPUSH
25427: PPUSH
25428: PPUSH
25429: PPUSH
25430: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25431: LD_VAR 0 1
25435: PPUSH
25436: CALL_OW 264
25440: PUSH
25441: LD_EXP 25
25445: EQUAL
25446: NOT
25447: PUSH
25448: LD_VAR 0 1
25452: PUSH
25453: LD_EXP 104
25457: IN
25458: NOT
25459: OR
25460: IFFALSE 25464
// exit ;
25462: GO 25786
// index := GetElementIndex ( minersList , unit ) ;
25464: LD_ADDR_VAR 0 6
25468: PUSH
25469: LD_EXP 104
25473: PPUSH
25474: LD_VAR 0 1
25478: PPUSH
25479: CALL 30982 0 2
25483: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25484: LD_ADDR_VAR 0 8
25488: PUSH
25489: LD_EXP 106
25493: PUSH
25494: LD_EXP 105
25498: PUSH
25499: LD_VAR 0 6
25503: ARRAY
25504: MINUS
25505: ST_TO_ADDR
// if not minesFreeAmount then
25506: LD_VAR 0 8
25510: NOT
25511: IFFALSE 25515
// exit ;
25513: GO 25786
// tmp := [ ] ;
25515: LD_ADDR_VAR 0 7
25519: PUSH
25520: EMPTY
25521: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25522: LD_ADDR_VAR 0 5
25526: PUSH
25527: DOUBLE
25528: LD_INT 1
25530: DEC
25531: ST_TO_ADDR
25532: LD_VAR 0 8
25536: PUSH
25537: FOR_TO
25538: IFFALSE 25733
// begin _d := rand ( 0 , 5 ) ;
25540: LD_ADDR_VAR 0 11
25544: PUSH
25545: LD_INT 0
25547: PPUSH
25548: LD_INT 5
25550: PPUSH
25551: CALL_OW 12
25555: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25556: LD_ADDR_VAR 0 12
25560: PUSH
25561: LD_INT 2
25563: PPUSH
25564: LD_INT 6
25566: PPUSH
25567: CALL_OW 12
25571: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25572: LD_ADDR_VAR 0 9
25576: PUSH
25577: LD_VAR 0 2
25581: PPUSH
25582: LD_VAR 0 11
25586: PPUSH
25587: LD_VAR 0 12
25591: PPUSH
25592: CALL_OW 272
25596: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25597: LD_ADDR_VAR 0 10
25601: PUSH
25602: LD_VAR 0 3
25606: PPUSH
25607: LD_VAR 0 11
25611: PPUSH
25612: LD_VAR 0 12
25616: PPUSH
25617: CALL_OW 273
25621: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25622: LD_VAR 0 9
25626: PPUSH
25627: LD_VAR 0 10
25631: PPUSH
25632: CALL_OW 488
25636: PUSH
25637: LD_VAR 0 9
25641: PUSH
25642: LD_VAR 0 10
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_VAR 0 7
25655: IN
25656: NOT
25657: AND
25658: PUSH
25659: LD_VAR 0 9
25663: PPUSH
25664: LD_VAR 0 10
25668: PPUSH
25669: CALL_OW 458
25673: NOT
25674: AND
25675: IFFALSE 25717
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25677: LD_ADDR_VAR 0 7
25681: PUSH
25682: LD_VAR 0 7
25686: PPUSH
25687: LD_VAR 0 7
25691: PUSH
25692: LD_INT 1
25694: PLUS
25695: PPUSH
25696: LD_VAR 0 9
25700: PUSH
25701: LD_VAR 0 10
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PPUSH
25710: CALL_OW 1
25714: ST_TO_ADDR
25715: GO 25731
// i := i - 1 ;
25717: LD_ADDR_VAR 0 5
25721: PUSH
25722: LD_VAR 0 5
25726: PUSH
25727: LD_INT 1
25729: MINUS
25730: ST_TO_ADDR
// end ;
25731: GO 25537
25733: POP
25734: POP
// for i in tmp do
25735: LD_ADDR_VAR 0 5
25739: PUSH
25740: LD_VAR 0 7
25744: PUSH
25745: FOR_IN
25746: IFFALSE 25784
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25748: LD_VAR 0 1
25752: PPUSH
25753: LD_VAR 0 5
25757: PUSH
25758: LD_INT 1
25760: ARRAY
25761: PPUSH
25762: LD_VAR 0 5
25766: PUSH
25767: LD_INT 2
25769: ARRAY
25770: PPUSH
25771: CALL 24726 0 3
25775: NOT
25776: IFFALSE 25782
// exit ;
25778: POP
25779: POP
25780: GO 25786
25782: GO 25745
25784: POP
25785: POP
// end ;
25786: LD_VAR 0 4
25790: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25791: LD_INT 0
25793: PPUSH
25794: PPUSH
25795: PPUSH
25796: PPUSH
25797: PPUSH
25798: PPUSH
25799: PPUSH
// if not GetClass ( unit ) = class_sniper then
25800: LD_VAR 0 1
25804: PPUSH
25805: CALL_OW 257
25809: PUSH
25810: LD_INT 5
25812: EQUAL
25813: NOT
25814: IFFALSE 25818
// exit ;
25816: GO 26206
// dist := 8 ;
25818: LD_ADDR_VAR 0 5
25822: PUSH
25823: LD_INT 8
25825: ST_TO_ADDR
// viewRange := 12 ;
25826: LD_ADDR_VAR 0 7
25830: PUSH
25831: LD_INT 12
25833: ST_TO_ADDR
// side := GetSide ( unit ) ;
25834: LD_ADDR_VAR 0 6
25838: PUSH
25839: LD_VAR 0 1
25843: PPUSH
25844: CALL_OW 255
25848: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25849: LD_INT 61
25851: PPUSH
25852: LD_VAR 0 6
25856: PPUSH
25857: CALL_OW 321
25861: PUSH
25862: LD_INT 2
25864: EQUAL
25865: IFFALSE 25875
// viewRange := 16 ;
25867: LD_ADDR_VAR 0 7
25871: PUSH
25872: LD_INT 16
25874: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25875: LD_VAR 0 1
25879: PPUSH
25880: LD_VAR 0 2
25884: PPUSH
25885: LD_VAR 0 3
25889: PPUSH
25890: CALL_OW 297
25894: PUSH
25895: LD_VAR 0 5
25899: GREATER
25900: IFFALSE 25979
// begin ComMoveXY ( unit , x , y ) ;
25902: LD_VAR 0 1
25906: PPUSH
25907: LD_VAR 0 2
25911: PPUSH
25912: LD_VAR 0 3
25916: PPUSH
25917: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25921: LD_INT 35
25923: PPUSH
25924: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25928: LD_VAR 0 1
25932: PPUSH
25933: LD_VAR 0 2
25937: PPUSH
25938: LD_VAR 0 3
25942: PPUSH
25943: CALL 61701 0 3
25947: NOT
25948: IFFALSE 25952
// exit ;
25950: GO 26206
// until GetDistUnitXY ( unit , x , y ) < dist ;
25952: LD_VAR 0 1
25956: PPUSH
25957: LD_VAR 0 2
25961: PPUSH
25962: LD_VAR 0 3
25966: PPUSH
25967: CALL_OW 297
25971: PUSH
25972: LD_VAR 0 5
25976: LESS
25977: IFFALSE 25921
// end ; ComTurnXY ( unit , x , y ) ;
25979: LD_VAR 0 1
25983: PPUSH
25984: LD_VAR 0 2
25988: PPUSH
25989: LD_VAR 0 3
25993: PPUSH
25994: CALL_OW 118
// wait ( 5 ) ;
25998: LD_INT 5
26000: PPUSH
26001: CALL_OW 67
// _d := GetDir ( unit ) ;
26005: LD_ADDR_VAR 0 10
26009: PUSH
26010: LD_VAR 0 1
26014: PPUSH
26015: CALL_OW 254
26019: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26020: LD_ADDR_VAR 0 8
26024: PUSH
26025: LD_VAR 0 1
26029: PPUSH
26030: CALL_OW 250
26034: PPUSH
26035: LD_VAR 0 10
26039: PPUSH
26040: LD_VAR 0 5
26044: PPUSH
26045: CALL_OW 272
26049: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26050: LD_ADDR_VAR 0 9
26054: PUSH
26055: LD_VAR 0 1
26059: PPUSH
26060: CALL_OW 251
26064: PPUSH
26065: LD_VAR 0 10
26069: PPUSH
26070: LD_VAR 0 5
26074: PPUSH
26075: CALL_OW 273
26079: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26080: LD_VAR 0 8
26084: PPUSH
26085: LD_VAR 0 9
26089: PPUSH
26090: CALL_OW 488
26094: NOT
26095: IFFALSE 26099
// exit ;
26097: GO 26206
// ComAnimCustom ( unit , 1 ) ;
26099: LD_VAR 0 1
26103: PPUSH
26104: LD_INT 1
26106: PPUSH
26107: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26111: LD_VAR 0 8
26115: PPUSH
26116: LD_VAR 0 9
26120: PPUSH
26121: LD_VAR 0 6
26125: PPUSH
26126: LD_VAR 0 7
26130: PPUSH
26131: CALL_OW 330
// repeat wait ( 1 ) ;
26135: LD_INT 1
26137: PPUSH
26138: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26142: LD_VAR 0 1
26146: PPUSH
26147: CALL_OW 316
26151: PUSH
26152: LD_VAR 0 1
26156: PPUSH
26157: CALL_OW 314
26161: OR
26162: PUSH
26163: LD_VAR 0 1
26167: PPUSH
26168: CALL_OW 302
26172: NOT
26173: OR
26174: PUSH
26175: LD_VAR 0 1
26179: PPUSH
26180: CALL_OW 301
26184: OR
26185: IFFALSE 26135
// RemoveSeeing ( _x , _y , side ) ;
26187: LD_VAR 0 8
26191: PPUSH
26192: LD_VAR 0 9
26196: PPUSH
26197: LD_VAR 0 6
26201: PPUSH
26202: CALL_OW 331
// end ; end_of_file
26206: LD_VAR 0 4
26210: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26211: LD_INT 0
26213: PPUSH
26214: PPUSH
// if exist_mode then
26215: LD_VAR 0 2
26219: IFFALSE 26244
// unit := CreateCharacter ( prefix & ident ) else
26221: LD_ADDR_VAR 0 5
26225: PUSH
26226: LD_VAR 0 3
26230: PUSH
26231: LD_VAR 0 1
26235: STR
26236: PPUSH
26237: CALL_OW 34
26241: ST_TO_ADDR
26242: GO 26259
// unit := NewCharacter ( ident ) ;
26244: LD_ADDR_VAR 0 5
26248: PUSH
26249: LD_VAR 0 1
26253: PPUSH
26254: CALL_OW 25
26258: ST_TO_ADDR
// result := unit ;
26259: LD_ADDR_VAR 0 4
26263: PUSH
26264: LD_VAR 0 5
26268: ST_TO_ADDR
// end ;
26269: LD_VAR 0 4
26273: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26274: LD_INT 0
26276: PPUSH
26277: PPUSH
// if not side or not nation then
26278: LD_VAR 0 1
26282: NOT
26283: PUSH
26284: LD_VAR 0 2
26288: NOT
26289: OR
26290: IFFALSE 26294
// exit ;
26292: GO 27062
// case nation of nation_american :
26294: LD_VAR 0 2
26298: PUSH
26299: LD_INT 1
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26521
26307: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26308: LD_ADDR_VAR 0 4
26312: PUSH
26313: LD_INT 35
26315: PUSH
26316: LD_INT 45
26318: PUSH
26319: LD_INT 46
26321: PUSH
26322: LD_INT 47
26324: PUSH
26325: LD_INT 82
26327: PUSH
26328: LD_INT 83
26330: PUSH
26331: LD_INT 84
26333: PUSH
26334: LD_INT 85
26336: PUSH
26337: LD_INT 86
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 2
26345: PUSH
26346: LD_INT 6
26348: PUSH
26349: LD_INT 15
26351: PUSH
26352: LD_INT 16
26354: PUSH
26355: LD_INT 7
26357: PUSH
26358: LD_INT 12
26360: PUSH
26361: LD_INT 13
26363: PUSH
26364: LD_INT 10
26366: PUSH
26367: LD_INT 14
26369: PUSH
26370: LD_INT 20
26372: PUSH
26373: LD_INT 21
26375: PUSH
26376: LD_INT 22
26378: PUSH
26379: LD_INT 25
26381: PUSH
26382: LD_INT 32
26384: PUSH
26385: LD_INT 27
26387: PUSH
26388: LD_INT 36
26390: PUSH
26391: LD_INT 69
26393: PUSH
26394: LD_INT 39
26396: PUSH
26397: LD_INT 34
26399: PUSH
26400: LD_INT 40
26402: PUSH
26403: LD_INT 48
26405: PUSH
26406: LD_INT 49
26408: PUSH
26409: LD_INT 50
26411: PUSH
26412: LD_INT 51
26414: PUSH
26415: LD_INT 52
26417: PUSH
26418: LD_INT 53
26420: PUSH
26421: LD_INT 54
26423: PUSH
26424: LD_INT 55
26426: PUSH
26427: LD_INT 56
26429: PUSH
26430: LD_INT 57
26432: PUSH
26433: LD_INT 58
26435: PUSH
26436: LD_INT 59
26438: PUSH
26439: LD_INT 60
26441: PUSH
26442: LD_INT 61
26444: PUSH
26445: LD_INT 62
26447: PUSH
26448: LD_INT 80
26450: PUSH
26451: LD_INT 82
26453: PUSH
26454: LD_INT 83
26456: PUSH
26457: LD_INT 84
26459: PUSH
26460: LD_INT 85
26462: PUSH
26463: LD_INT 86
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: ST_TO_ADDR
26519: GO 26986
26521: LD_INT 2
26523: DOUBLE
26524: EQUAL
26525: IFTRUE 26529
26527: GO 26755
26529: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26530: LD_ADDR_VAR 0 4
26534: PUSH
26535: LD_INT 35
26537: PUSH
26538: LD_INT 45
26540: PUSH
26541: LD_INT 46
26543: PUSH
26544: LD_INT 47
26546: PUSH
26547: LD_INT 82
26549: PUSH
26550: LD_INT 83
26552: PUSH
26553: LD_INT 84
26555: PUSH
26556: LD_INT 85
26558: PUSH
26559: LD_INT 87
26561: PUSH
26562: LD_INT 70
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: LD_INT 11
26570: PUSH
26571: LD_INT 3
26573: PUSH
26574: LD_INT 4
26576: PUSH
26577: LD_INT 5
26579: PUSH
26580: LD_INT 6
26582: PUSH
26583: LD_INT 15
26585: PUSH
26586: LD_INT 18
26588: PUSH
26589: LD_INT 7
26591: PUSH
26592: LD_INT 17
26594: PUSH
26595: LD_INT 8
26597: PUSH
26598: LD_INT 20
26600: PUSH
26601: LD_INT 21
26603: PUSH
26604: LD_INT 22
26606: PUSH
26607: LD_INT 72
26609: PUSH
26610: LD_INT 26
26612: PUSH
26613: LD_INT 69
26615: PUSH
26616: LD_INT 39
26618: PUSH
26619: LD_INT 40
26621: PUSH
26622: LD_INT 41
26624: PUSH
26625: LD_INT 42
26627: PUSH
26628: LD_INT 43
26630: PUSH
26631: LD_INT 48
26633: PUSH
26634: LD_INT 49
26636: PUSH
26637: LD_INT 50
26639: PUSH
26640: LD_INT 51
26642: PUSH
26643: LD_INT 52
26645: PUSH
26646: LD_INT 53
26648: PUSH
26649: LD_INT 54
26651: PUSH
26652: LD_INT 55
26654: PUSH
26655: LD_INT 56
26657: PUSH
26658: LD_INT 60
26660: PUSH
26661: LD_INT 61
26663: PUSH
26664: LD_INT 62
26666: PUSH
26667: LD_INT 66
26669: PUSH
26670: LD_INT 67
26672: PUSH
26673: LD_INT 68
26675: PUSH
26676: LD_INT 81
26678: PUSH
26679: LD_INT 82
26681: PUSH
26682: LD_INT 83
26684: PUSH
26685: LD_INT 84
26687: PUSH
26688: LD_INT 85
26690: PUSH
26691: LD_INT 87
26693: PUSH
26694: LD_INT 88
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: ST_TO_ADDR
26753: GO 26986
26755: LD_INT 3
26757: DOUBLE
26758: EQUAL
26759: IFTRUE 26763
26761: GO 26985
26763: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26764: LD_ADDR_VAR 0 4
26768: PUSH
26769: LD_INT 46
26771: PUSH
26772: LD_INT 47
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: LD_INT 82
26783: PUSH
26784: LD_INT 83
26786: PUSH
26787: LD_INT 84
26789: PUSH
26790: LD_INT 85
26792: PUSH
26793: LD_INT 86
26795: PUSH
26796: LD_INT 11
26798: PUSH
26799: LD_INT 9
26801: PUSH
26802: LD_INT 20
26804: PUSH
26805: LD_INT 19
26807: PUSH
26808: LD_INT 21
26810: PUSH
26811: LD_INT 24
26813: PUSH
26814: LD_INT 22
26816: PUSH
26817: LD_INT 25
26819: PUSH
26820: LD_INT 28
26822: PUSH
26823: LD_INT 29
26825: PUSH
26826: LD_INT 30
26828: PUSH
26829: LD_INT 31
26831: PUSH
26832: LD_INT 37
26834: PUSH
26835: LD_INT 38
26837: PUSH
26838: LD_INT 32
26840: PUSH
26841: LD_INT 27
26843: PUSH
26844: LD_INT 33
26846: PUSH
26847: LD_INT 69
26849: PUSH
26850: LD_INT 39
26852: PUSH
26853: LD_INT 34
26855: PUSH
26856: LD_INT 40
26858: PUSH
26859: LD_INT 71
26861: PUSH
26862: LD_INT 23
26864: PUSH
26865: LD_INT 44
26867: PUSH
26868: LD_INT 48
26870: PUSH
26871: LD_INT 49
26873: PUSH
26874: LD_INT 50
26876: PUSH
26877: LD_INT 51
26879: PUSH
26880: LD_INT 52
26882: PUSH
26883: LD_INT 53
26885: PUSH
26886: LD_INT 54
26888: PUSH
26889: LD_INT 55
26891: PUSH
26892: LD_INT 56
26894: PUSH
26895: LD_INT 57
26897: PUSH
26898: LD_INT 58
26900: PUSH
26901: LD_INT 59
26903: PUSH
26904: LD_INT 63
26906: PUSH
26907: LD_INT 64
26909: PUSH
26910: LD_INT 65
26912: PUSH
26913: LD_INT 82
26915: PUSH
26916: LD_INT 83
26918: PUSH
26919: LD_INT 84
26921: PUSH
26922: LD_INT 85
26924: PUSH
26925: LD_INT 86
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: ST_TO_ADDR
26983: GO 26986
26985: POP
// if state > - 1 and state < 3 then
26986: LD_VAR 0 3
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: GREATER
26995: PUSH
26996: LD_VAR 0 3
27000: PUSH
27001: LD_INT 3
27003: LESS
27004: AND
27005: IFFALSE 27062
// for i in result do
27007: LD_ADDR_VAR 0 5
27011: PUSH
27012: LD_VAR 0 4
27016: PUSH
27017: FOR_IN
27018: IFFALSE 27060
// if GetTech ( i , side ) <> state then
27020: LD_VAR 0 5
27024: PPUSH
27025: LD_VAR 0 1
27029: PPUSH
27030: CALL_OW 321
27034: PUSH
27035: LD_VAR 0 3
27039: NONEQUAL
27040: IFFALSE 27058
// result := result diff i ;
27042: LD_ADDR_VAR 0 4
27046: PUSH
27047: LD_VAR 0 4
27051: PUSH
27052: LD_VAR 0 5
27056: DIFF
27057: ST_TO_ADDR
27058: GO 27017
27060: POP
27061: POP
// end ;
27062: LD_VAR 0 4
27066: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27067: LD_INT 0
27069: PPUSH
27070: PPUSH
27071: PPUSH
// result := true ;
27072: LD_ADDR_VAR 0 3
27076: PUSH
27077: LD_INT 1
27079: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27080: LD_ADDR_VAR 0 5
27084: PUSH
27085: LD_VAR 0 2
27089: PPUSH
27090: CALL_OW 480
27094: ST_TO_ADDR
// if not tmp then
27095: LD_VAR 0 5
27099: NOT
27100: IFFALSE 27104
// exit ;
27102: GO 27153
// for i in tmp do
27104: LD_ADDR_VAR 0 4
27108: PUSH
27109: LD_VAR 0 5
27113: PUSH
27114: FOR_IN
27115: IFFALSE 27151
// if GetTech ( i , side ) <> state_researched then
27117: LD_VAR 0 4
27121: PPUSH
27122: LD_VAR 0 1
27126: PPUSH
27127: CALL_OW 321
27131: PUSH
27132: LD_INT 2
27134: NONEQUAL
27135: IFFALSE 27149
// begin result := false ;
27137: LD_ADDR_VAR 0 3
27141: PUSH
27142: LD_INT 0
27144: ST_TO_ADDR
// exit ;
27145: POP
27146: POP
27147: GO 27153
// end ;
27149: GO 27114
27151: POP
27152: POP
// end ;
27153: LD_VAR 0 3
27157: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27158: LD_INT 0
27160: PPUSH
27161: PPUSH
27162: PPUSH
27163: PPUSH
27164: PPUSH
27165: PPUSH
27166: PPUSH
27167: PPUSH
27168: PPUSH
27169: PPUSH
27170: PPUSH
27171: PPUSH
27172: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27173: LD_VAR 0 1
27177: NOT
27178: PUSH
27179: LD_VAR 0 1
27183: PPUSH
27184: CALL_OW 257
27188: PUSH
27189: LD_INT 9
27191: NONEQUAL
27192: OR
27193: IFFALSE 27197
// exit ;
27195: GO 27770
// side := GetSide ( unit ) ;
27197: LD_ADDR_VAR 0 9
27201: PUSH
27202: LD_VAR 0 1
27206: PPUSH
27207: CALL_OW 255
27211: ST_TO_ADDR
// tech_space := tech_spacanom ;
27212: LD_ADDR_VAR 0 12
27216: PUSH
27217: LD_INT 29
27219: ST_TO_ADDR
// tech_time := tech_taurad ;
27220: LD_ADDR_VAR 0 13
27224: PUSH
27225: LD_INT 28
27227: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27228: LD_ADDR_VAR 0 11
27232: PUSH
27233: LD_VAR 0 1
27237: PPUSH
27238: CALL_OW 310
27242: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27243: LD_VAR 0 11
27247: PPUSH
27248: CALL_OW 247
27252: PUSH
27253: LD_INT 2
27255: EQUAL
27256: IFFALSE 27260
// exit ;
27258: GO 27770
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27260: LD_ADDR_VAR 0 8
27264: PUSH
27265: LD_INT 81
27267: PUSH
27268: LD_VAR 0 9
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 3
27279: PUSH
27280: LD_INT 21
27282: PUSH
27283: LD_INT 3
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PPUSH
27298: CALL_OW 69
27302: ST_TO_ADDR
// if not tmp then
27303: LD_VAR 0 8
27307: NOT
27308: IFFALSE 27312
// exit ;
27310: GO 27770
// if in_unit then
27312: LD_VAR 0 11
27316: IFFALSE 27340
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27318: LD_ADDR_VAR 0 10
27322: PUSH
27323: LD_VAR 0 8
27327: PPUSH
27328: LD_VAR 0 11
27332: PPUSH
27333: CALL_OW 74
27337: ST_TO_ADDR
27338: GO 27360
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27340: LD_ADDR_VAR 0 10
27344: PUSH
27345: LD_VAR 0 8
27349: PPUSH
27350: LD_VAR 0 1
27354: PPUSH
27355: CALL_OW 74
27359: ST_TO_ADDR
// if not enemy then
27360: LD_VAR 0 10
27364: NOT
27365: IFFALSE 27369
// exit ;
27367: GO 27770
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27369: LD_VAR 0 11
27373: PUSH
27374: LD_VAR 0 11
27378: PPUSH
27379: LD_VAR 0 10
27383: PPUSH
27384: CALL_OW 296
27388: PUSH
27389: LD_INT 13
27391: GREATER
27392: AND
27393: PUSH
27394: LD_VAR 0 1
27398: PPUSH
27399: LD_VAR 0 10
27403: PPUSH
27404: CALL_OW 296
27408: PUSH
27409: LD_INT 12
27411: GREATER
27412: OR
27413: IFFALSE 27417
// exit ;
27415: GO 27770
// missile := [ 1 ] ;
27417: LD_ADDR_VAR 0 14
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27428: LD_VAR 0 9
27432: PPUSH
27433: LD_VAR 0 12
27437: PPUSH
27438: CALL_OW 325
27442: IFFALSE 27471
// missile := Replace ( missile , missile + 1 , 2 ) ;
27444: LD_ADDR_VAR 0 14
27448: PUSH
27449: LD_VAR 0 14
27453: PPUSH
27454: LD_VAR 0 14
27458: PUSH
27459: LD_INT 1
27461: PLUS
27462: PPUSH
27463: LD_INT 2
27465: PPUSH
27466: CALL_OW 1
27470: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27471: LD_VAR 0 9
27475: PPUSH
27476: LD_VAR 0 13
27480: PPUSH
27481: CALL_OW 325
27485: PUSH
27486: LD_VAR 0 10
27490: PPUSH
27491: CALL_OW 255
27495: PPUSH
27496: LD_VAR 0 13
27500: PPUSH
27501: CALL_OW 325
27505: NOT
27506: AND
27507: IFFALSE 27536
// missile := Replace ( missile , missile + 1 , 3 ) ;
27509: LD_ADDR_VAR 0 14
27513: PUSH
27514: LD_VAR 0 14
27518: PPUSH
27519: LD_VAR 0 14
27523: PUSH
27524: LD_INT 1
27526: PLUS
27527: PPUSH
27528: LD_INT 3
27530: PPUSH
27531: CALL_OW 1
27535: ST_TO_ADDR
// if missile < 2 then
27536: LD_VAR 0 14
27540: PUSH
27541: LD_INT 2
27543: LESS
27544: IFFALSE 27548
// exit ;
27546: GO 27770
// x := GetX ( enemy ) ;
27548: LD_ADDR_VAR 0 4
27552: PUSH
27553: LD_VAR 0 10
27557: PPUSH
27558: CALL_OW 250
27562: ST_TO_ADDR
// y := GetY ( enemy ) ;
27563: LD_ADDR_VAR 0 5
27567: PUSH
27568: LD_VAR 0 10
27572: PPUSH
27573: CALL_OW 251
27577: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27578: LD_ADDR_VAR 0 6
27582: PUSH
27583: LD_VAR 0 4
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PPUSH
27592: LD_INT 1
27594: PPUSH
27595: CALL_OW 12
27599: PLUS
27600: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27601: LD_ADDR_VAR 0 7
27605: PUSH
27606: LD_VAR 0 5
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PPUSH
27615: LD_INT 1
27617: PPUSH
27618: CALL_OW 12
27622: PLUS
27623: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27624: LD_VAR 0 6
27628: PPUSH
27629: LD_VAR 0 7
27633: PPUSH
27634: CALL_OW 488
27638: NOT
27639: IFFALSE 27661
// begin _x := x ;
27641: LD_ADDR_VAR 0 6
27645: PUSH
27646: LD_VAR 0 4
27650: ST_TO_ADDR
// _y := y ;
27651: LD_ADDR_VAR 0 7
27655: PUSH
27656: LD_VAR 0 5
27660: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27661: LD_ADDR_VAR 0 3
27665: PUSH
27666: LD_INT 1
27668: PPUSH
27669: LD_VAR 0 14
27673: PPUSH
27674: CALL_OW 12
27678: ST_TO_ADDR
// case i of 1 :
27679: LD_VAR 0 3
27683: PUSH
27684: LD_INT 1
27686: DOUBLE
27687: EQUAL
27688: IFTRUE 27692
27690: GO 27709
27692: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27693: LD_VAR 0 1
27697: PPUSH
27698: LD_VAR 0 10
27702: PPUSH
27703: CALL_OW 115
27707: GO 27770
27709: LD_INT 2
27711: DOUBLE
27712: EQUAL
27713: IFTRUE 27717
27715: GO 27739
27717: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27718: LD_VAR 0 1
27722: PPUSH
27723: LD_VAR 0 6
27727: PPUSH
27728: LD_VAR 0 7
27732: PPUSH
27733: CALL_OW 153
27737: GO 27770
27739: LD_INT 3
27741: DOUBLE
27742: EQUAL
27743: IFTRUE 27747
27745: GO 27769
27747: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27748: LD_VAR 0 1
27752: PPUSH
27753: LD_VAR 0 6
27757: PPUSH
27758: LD_VAR 0 7
27762: PPUSH
27763: CALL_OW 154
27767: GO 27770
27769: POP
// end ;
27770: LD_VAR 0 2
27774: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27775: LD_INT 0
27777: PPUSH
27778: PPUSH
27779: PPUSH
27780: PPUSH
27781: PPUSH
27782: PPUSH
// if not unit or not building then
27783: LD_VAR 0 1
27787: NOT
27788: PUSH
27789: LD_VAR 0 2
27793: NOT
27794: OR
27795: IFFALSE 27799
// exit ;
27797: GO 27957
// x := GetX ( building ) ;
27799: LD_ADDR_VAR 0 5
27803: PUSH
27804: LD_VAR 0 2
27808: PPUSH
27809: CALL_OW 250
27813: ST_TO_ADDR
// y := GetY ( building ) ;
27814: LD_ADDR_VAR 0 6
27818: PUSH
27819: LD_VAR 0 2
27823: PPUSH
27824: CALL_OW 251
27828: ST_TO_ADDR
// for i = 0 to 5 do
27829: LD_ADDR_VAR 0 4
27833: PUSH
27834: DOUBLE
27835: LD_INT 0
27837: DEC
27838: ST_TO_ADDR
27839: LD_INT 5
27841: PUSH
27842: FOR_TO
27843: IFFALSE 27955
// begin _x := ShiftX ( x , i , 3 ) ;
27845: LD_ADDR_VAR 0 7
27849: PUSH
27850: LD_VAR 0 5
27854: PPUSH
27855: LD_VAR 0 4
27859: PPUSH
27860: LD_INT 3
27862: PPUSH
27863: CALL_OW 272
27867: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27868: LD_ADDR_VAR 0 8
27872: PUSH
27873: LD_VAR 0 6
27877: PPUSH
27878: LD_VAR 0 4
27882: PPUSH
27883: LD_INT 3
27885: PPUSH
27886: CALL_OW 273
27890: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27891: LD_VAR 0 7
27895: PPUSH
27896: LD_VAR 0 8
27900: PPUSH
27901: CALL_OW 488
27905: NOT
27906: IFFALSE 27910
// continue ;
27908: GO 27842
// if HexInfo ( _x , _y ) = 0 then
27910: LD_VAR 0 7
27914: PPUSH
27915: LD_VAR 0 8
27919: PPUSH
27920: CALL_OW 428
27924: PUSH
27925: LD_INT 0
27927: EQUAL
27928: IFFALSE 27953
// begin ComMoveXY ( unit , _x , _y ) ;
27930: LD_VAR 0 1
27934: PPUSH
27935: LD_VAR 0 7
27939: PPUSH
27940: LD_VAR 0 8
27944: PPUSH
27945: CALL_OW 111
// exit ;
27949: POP
27950: POP
27951: GO 27957
// end ; end ;
27953: GO 27842
27955: POP
27956: POP
// end ;
27957: LD_VAR 0 3
27961: RET
// export function ScanBase ( side , base_area ) ; begin
27962: LD_INT 0
27964: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27965: LD_ADDR_VAR 0 3
27969: PUSH
27970: LD_VAR 0 2
27974: PPUSH
27975: LD_INT 81
27977: PUSH
27978: LD_VAR 0 1
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PPUSH
27987: CALL_OW 70
27991: ST_TO_ADDR
// end ;
27992: LD_VAR 0 3
27996: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27997: LD_INT 0
27999: PPUSH
28000: PPUSH
28001: PPUSH
28002: PPUSH
// result := false ;
28003: LD_ADDR_VAR 0 2
28007: PUSH
28008: LD_INT 0
28010: ST_TO_ADDR
// side := GetSide ( unit ) ;
28011: LD_ADDR_VAR 0 3
28015: PUSH
28016: LD_VAR 0 1
28020: PPUSH
28021: CALL_OW 255
28025: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28026: LD_ADDR_VAR 0 4
28030: PUSH
28031: LD_VAR 0 1
28035: PPUSH
28036: CALL_OW 248
28040: ST_TO_ADDR
// case nat of 1 :
28041: LD_VAR 0 4
28045: PUSH
28046: LD_INT 1
28048: DOUBLE
28049: EQUAL
28050: IFTRUE 28054
28052: GO 28065
28054: POP
// tech := tech_lassight ; 2 :
28055: LD_ADDR_VAR 0 5
28059: PUSH
28060: LD_INT 12
28062: ST_TO_ADDR
28063: GO 28104
28065: LD_INT 2
28067: DOUBLE
28068: EQUAL
28069: IFTRUE 28073
28071: GO 28084
28073: POP
// tech := tech_mortar ; 3 :
28074: LD_ADDR_VAR 0 5
28078: PUSH
28079: LD_INT 41
28081: ST_TO_ADDR
28082: GO 28104
28084: LD_INT 3
28086: DOUBLE
28087: EQUAL
28088: IFTRUE 28092
28090: GO 28103
28092: POP
// tech := tech_bazooka ; end ;
28093: LD_ADDR_VAR 0 5
28097: PUSH
28098: LD_INT 44
28100: ST_TO_ADDR
28101: GO 28104
28103: POP
// if Researched ( side , tech ) then
28104: LD_VAR 0 3
28108: PPUSH
28109: LD_VAR 0 5
28113: PPUSH
28114: CALL_OW 325
28118: IFFALSE 28145
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28120: LD_ADDR_VAR 0 2
28124: PUSH
28125: LD_INT 5
28127: PUSH
28128: LD_INT 8
28130: PUSH
28131: LD_INT 9
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: PUSH
28139: LD_VAR 0 4
28143: ARRAY
28144: ST_TO_ADDR
// end ;
28145: LD_VAR 0 2
28149: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28150: LD_INT 0
28152: PPUSH
28153: PPUSH
28154: PPUSH
// if not mines then
28155: LD_VAR 0 2
28159: NOT
28160: IFFALSE 28164
// exit ;
28162: GO 28308
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28164: LD_ADDR_VAR 0 5
28168: PUSH
28169: LD_INT 81
28171: PUSH
28172: LD_VAR 0 1
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 3
28183: PUSH
28184: LD_INT 21
28186: PUSH
28187: LD_INT 3
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PPUSH
28202: CALL_OW 69
28206: ST_TO_ADDR
// for i in mines do
28207: LD_ADDR_VAR 0 4
28211: PUSH
28212: LD_VAR 0 2
28216: PUSH
28217: FOR_IN
28218: IFFALSE 28306
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28220: LD_VAR 0 4
28224: PUSH
28225: LD_INT 1
28227: ARRAY
28228: PPUSH
28229: LD_VAR 0 4
28233: PUSH
28234: LD_INT 2
28236: ARRAY
28237: PPUSH
28238: CALL_OW 458
28242: NOT
28243: IFFALSE 28247
// continue ;
28245: GO 28217
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28247: LD_VAR 0 4
28251: PUSH
28252: LD_INT 1
28254: ARRAY
28255: PPUSH
28256: LD_VAR 0 4
28260: PUSH
28261: LD_INT 2
28263: ARRAY
28264: PPUSH
28265: CALL_OW 428
28269: PUSH
28270: LD_VAR 0 5
28274: IN
28275: IFFALSE 28304
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28277: LD_VAR 0 4
28281: PUSH
28282: LD_INT 1
28284: ARRAY
28285: PPUSH
28286: LD_VAR 0 4
28290: PUSH
28291: LD_INT 2
28293: ARRAY
28294: PPUSH
28295: LD_VAR 0 1
28299: PPUSH
28300: CALL_OW 456
// end ;
28304: GO 28217
28306: POP
28307: POP
// end ;
28308: LD_VAR 0 3
28312: RET
// export function Count ( array ) ; var i ; begin
28313: LD_INT 0
28315: PPUSH
28316: PPUSH
// result := 0 ;
28317: LD_ADDR_VAR 0 2
28321: PUSH
28322: LD_INT 0
28324: ST_TO_ADDR
// for i in array do
28325: LD_ADDR_VAR 0 3
28329: PUSH
28330: LD_VAR 0 1
28334: PUSH
28335: FOR_IN
28336: IFFALSE 28360
// if i then
28338: LD_VAR 0 3
28342: IFFALSE 28358
// result := result + 1 ;
28344: LD_ADDR_VAR 0 2
28348: PUSH
28349: LD_VAR 0 2
28353: PUSH
28354: LD_INT 1
28356: PLUS
28357: ST_TO_ADDR
28358: GO 28335
28360: POP
28361: POP
// end ;
28362: LD_VAR 0 2
28366: RET
// export function IsEmpty ( building ) ; begin
28367: LD_INT 0
28369: PPUSH
// if not building then
28370: LD_VAR 0 1
28374: NOT
28375: IFFALSE 28379
// exit ;
28377: GO 28422
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28379: LD_ADDR_VAR 0 2
28383: PUSH
28384: LD_VAR 0 1
28388: PUSH
28389: LD_INT 22
28391: PUSH
28392: LD_VAR 0 1
28396: PPUSH
28397: CALL_OW 255
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 58
28408: PUSH
28409: EMPTY
28410: LIST
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PPUSH
28416: CALL_OW 69
28420: IN
28421: ST_TO_ADDR
// end ;
28422: LD_VAR 0 2
28426: RET
// export function IsNotFull ( building ) ; begin
28427: LD_INT 0
28429: PPUSH
// if not building then
28430: LD_VAR 0 1
28434: NOT
28435: IFFALSE 28439
// exit ;
28437: GO 28458
// result := UnitsInside ( building ) < 6 ;
28439: LD_ADDR_VAR 0 2
28443: PUSH
28444: LD_VAR 0 1
28448: PPUSH
28449: CALL_OW 313
28453: PUSH
28454: LD_INT 6
28456: LESS
28457: ST_TO_ADDR
// end ;
28458: LD_VAR 0 2
28462: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28463: LD_INT 0
28465: PPUSH
28466: PPUSH
28467: PPUSH
28468: PPUSH
// tmp := [ ] ;
28469: LD_ADDR_VAR 0 3
28473: PUSH
28474: EMPTY
28475: ST_TO_ADDR
// list := [ ] ;
28476: LD_ADDR_VAR 0 5
28480: PUSH
28481: EMPTY
28482: ST_TO_ADDR
// for i = 16 to 25 do
28483: LD_ADDR_VAR 0 4
28487: PUSH
28488: DOUBLE
28489: LD_INT 16
28491: DEC
28492: ST_TO_ADDR
28493: LD_INT 25
28495: PUSH
28496: FOR_TO
28497: IFFALSE 28570
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28499: LD_ADDR_VAR 0 3
28503: PUSH
28504: LD_VAR 0 3
28508: PUSH
28509: LD_INT 22
28511: PUSH
28512: LD_VAR 0 1
28516: PPUSH
28517: CALL_OW 255
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 91
28528: PUSH
28529: LD_VAR 0 1
28533: PUSH
28534: LD_INT 6
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 30
28544: PUSH
28545: LD_VAR 0 4
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: PUSH
28559: EMPTY
28560: LIST
28561: PPUSH
28562: CALL_OW 69
28566: ADD
28567: ST_TO_ADDR
28568: GO 28496
28570: POP
28571: POP
// for i = 1 to tmp do
28572: LD_ADDR_VAR 0 4
28576: PUSH
28577: DOUBLE
28578: LD_INT 1
28580: DEC
28581: ST_TO_ADDR
28582: LD_VAR 0 3
28586: PUSH
28587: FOR_TO
28588: IFFALSE 28676
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28590: LD_ADDR_VAR 0 5
28594: PUSH
28595: LD_VAR 0 5
28599: PUSH
28600: LD_VAR 0 3
28604: PUSH
28605: LD_VAR 0 4
28609: ARRAY
28610: PPUSH
28611: CALL_OW 266
28615: PUSH
28616: LD_VAR 0 3
28620: PUSH
28621: LD_VAR 0 4
28625: ARRAY
28626: PPUSH
28627: CALL_OW 250
28631: PUSH
28632: LD_VAR 0 3
28636: PUSH
28637: LD_VAR 0 4
28641: ARRAY
28642: PPUSH
28643: CALL_OW 251
28647: PUSH
28648: LD_VAR 0 3
28652: PUSH
28653: LD_VAR 0 4
28657: ARRAY
28658: PPUSH
28659: CALL_OW 254
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: PUSH
28670: EMPTY
28671: LIST
28672: ADD
28673: ST_TO_ADDR
28674: GO 28587
28676: POP
28677: POP
// result := list ;
28678: LD_ADDR_VAR 0 2
28682: PUSH
28683: LD_VAR 0 5
28687: ST_TO_ADDR
// end ;
28688: LD_VAR 0 2
28692: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28693: LD_INT 0
28695: PPUSH
28696: PPUSH
28697: PPUSH
28698: PPUSH
28699: PPUSH
28700: PPUSH
28701: PPUSH
// if not factory then
28702: LD_VAR 0 1
28706: NOT
28707: IFFALSE 28711
// exit ;
28709: GO 29304
// if control = control_apeman then
28711: LD_VAR 0 4
28715: PUSH
28716: LD_INT 5
28718: EQUAL
28719: IFFALSE 28828
// begin tmp := UnitsInside ( factory ) ;
28721: LD_ADDR_VAR 0 8
28725: PUSH
28726: LD_VAR 0 1
28730: PPUSH
28731: CALL_OW 313
28735: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28736: LD_VAR 0 8
28740: PPUSH
28741: LD_INT 25
28743: PUSH
28744: LD_INT 12
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PPUSH
28751: CALL_OW 72
28755: NOT
28756: IFFALSE 28766
// control := control_manual ;
28758: LD_ADDR_VAR 0 4
28762: PUSH
28763: LD_INT 1
28765: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28766: LD_ADDR_VAR 0 8
28770: PUSH
28771: LD_VAR 0 1
28775: PPUSH
28776: CALL 28463 0 1
28780: ST_TO_ADDR
// if tmp then
28781: LD_VAR 0 8
28785: IFFALSE 28828
// begin for i in tmp do
28787: LD_ADDR_VAR 0 7
28791: PUSH
28792: LD_VAR 0 8
28796: PUSH
28797: FOR_IN
28798: IFFALSE 28826
// if i [ 1 ] = b_ext_radio then
28800: LD_VAR 0 7
28804: PUSH
28805: LD_INT 1
28807: ARRAY
28808: PUSH
28809: LD_INT 22
28811: EQUAL
28812: IFFALSE 28824
// begin control := control_remote ;
28814: LD_ADDR_VAR 0 4
28818: PUSH
28819: LD_INT 2
28821: ST_TO_ADDR
// break ;
28822: GO 28826
// end ;
28824: GO 28797
28826: POP
28827: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28828: LD_VAR 0 1
28832: PPUSH
28833: LD_VAR 0 2
28837: PPUSH
28838: LD_VAR 0 3
28842: PPUSH
28843: LD_VAR 0 4
28847: PPUSH
28848: LD_VAR 0 5
28852: PPUSH
28853: CALL_OW 448
28857: IFFALSE 28892
// begin result := [ chassis , engine , control , weapon ] ;
28859: LD_ADDR_VAR 0 6
28863: PUSH
28864: LD_VAR 0 2
28868: PUSH
28869: LD_VAR 0 3
28873: PUSH
28874: LD_VAR 0 4
28878: PUSH
28879: LD_VAR 0 5
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// exit ;
28890: GO 29304
// end ; _chassis := AvailableChassisList ( factory ) ;
28892: LD_ADDR_VAR 0 9
28896: PUSH
28897: LD_VAR 0 1
28901: PPUSH
28902: CALL_OW 475
28906: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28907: LD_ADDR_VAR 0 11
28911: PUSH
28912: LD_VAR 0 1
28916: PPUSH
28917: CALL_OW 476
28921: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28922: LD_ADDR_VAR 0 12
28926: PUSH
28927: LD_VAR 0 1
28931: PPUSH
28932: CALL_OW 477
28936: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28937: LD_ADDR_VAR 0 10
28941: PUSH
28942: LD_VAR 0 1
28946: PPUSH
28947: CALL_OW 478
28951: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28952: LD_VAR 0 9
28956: NOT
28957: PUSH
28958: LD_VAR 0 11
28962: NOT
28963: OR
28964: PUSH
28965: LD_VAR 0 12
28969: NOT
28970: OR
28971: PUSH
28972: LD_VAR 0 10
28976: NOT
28977: OR
28978: IFFALSE 29013
// begin result := [ chassis , engine , control , weapon ] ;
28980: LD_ADDR_VAR 0 6
28984: PUSH
28985: LD_VAR 0 2
28989: PUSH
28990: LD_VAR 0 3
28994: PUSH
28995: LD_VAR 0 4
28999: PUSH
29000: LD_VAR 0 5
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: ST_TO_ADDR
// exit ;
29011: GO 29304
// end ; if not chassis in _chassis then
29013: LD_VAR 0 2
29017: PUSH
29018: LD_VAR 0 9
29022: IN
29023: NOT
29024: IFFALSE 29050
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29026: LD_ADDR_VAR 0 2
29030: PUSH
29031: LD_VAR 0 9
29035: PUSH
29036: LD_INT 1
29038: PPUSH
29039: LD_VAR 0 9
29043: PPUSH
29044: CALL_OW 12
29048: ARRAY
29049: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29050: LD_VAR 0 2
29054: PPUSH
29055: LD_VAR 0 3
29059: PPUSH
29060: CALL 29309 0 2
29064: NOT
29065: IFFALSE 29124
// repeat engine := _engine [ 1 ] ;
29067: LD_ADDR_VAR 0 3
29071: PUSH
29072: LD_VAR 0 11
29076: PUSH
29077: LD_INT 1
29079: ARRAY
29080: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29081: LD_ADDR_VAR 0 11
29085: PUSH
29086: LD_VAR 0 11
29090: PPUSH
29091: LD_INT 1
29093: PPUSH
29094: CALL_OW 3
29098: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29099: LD_VAR 0 2
29103: PPUSH
29104: LD_VAR 0 3
29108: PPUSH
29109: CALL 29309 0 2
29113: PUSH
29114: LD_VAR 0 11
29118: PUSH
29119: EMPTY
29120: EQUAL
29121: OR
29122: IFFALSE 29067
// if not control in _control then
29124: LD_VAR 0 4
29128: PUSH
29129: LD_VAR 0 12
29133: IN
29134: NOT
29135: IFFALSE 29161
// control := _control [ rand ( 1 , _control ) ] ;
29137: LD_ADDR_VAR 0 4
29141: PUSH
29142: LD_VAR 0 12
29146: PUSH
29147: LD_INT 1
29149: PPUSH
29150: LD_VAR 0 12
29154: PPUSH
29155: CALL_OW 12
29159: ARRAY
29160: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29161: LD_VAR 0 2
29165: PPUSH
29166: LD_VAR 0 5
29170: PPUSH
29171: CALL 29529 0 2
29175: NOT
29176: IFFALSE 29235
// repeat weapon := _weapon [ 1 ] ;
29178: LD_ADDR_VAR 0 5
29182: PUSH
29183: LD_VAR 0 10
29187: PUSH
29188: LD_INT 1
29190: ARRAY
29191: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29192: LD_ADDR_VAR 0 10
29196: PUSH
29197: LD_VAR 0 10
29201: PPUSH
29202: LD_INT 1
29204: PPUSH
29205: CALL_OW 3
29209: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29210: LD_VAR 0 2
29214: PPUSH
29215: LD_VAR 0 5
29219: PPUSH
29220: CALL 29529 0 2
29224: PUSH
29225: LD_VAR 0 10
29229: PUSH
29230: EMPTY
29231: EQUAL
29232: OR
29233: IFFALSE 29178
// result := [ ] ;
29235: LD_ADDR_VAR 0 6
29239: PUSH
29240: EMPTY
29241: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29242: LD_VAR 0 1
29246: PPUSH
29247: LD_VAR 0 2
29251: PPUSH
29252: LD_VAR 0 3
29256: PPUSH
29257: LD_VAR 0 4
29261: PPUSH
29262: LD_VAR 0 5
29266: PPUSH
29267: CALL_OW 448
29271: IFFALSE 29304
// result := [ chassis , engine , control , weapon ] ;
29273: LD_ADDR_VAR 0 6
29277: PUSH
29278: LD_VAR 0 2
29282: PUSH
29283: LD_VAR 0 3
29287: PUSH
29288: LD_VAR 0 4
29292: PUSH
29293: LD_VAR 0 5
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
// end ;
29304: LD_VAR 0 6
29308: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29309: LD_INT 0
29311: PPUSH
// if not chassis or not engine then
29312: LD_VAR 0 1
29316: NOT
29317: PUSH
29318: LD_VAR 0 2
29322: NOT
29323: OR
29324: IFFALSE 29328
// exit ;
29326: GO 29524
// case engine of engine_solar :
29328: LD_VAR 0 2
29332: PUSH
29333: LD_INT 2
29335: DOUBLE
29336: EQUAL
29337: IFTRUE 29341
29339: GO 29379
29341: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29342: LD_ADDR_VAR 0 3
29346: PUSH
29347: LD_INT 11
29349: PUSH
29350: LD_INT 12
29352: PUSH
29353: LD_INT 13
29355: PUSH
29356: LD_INT 14
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
29377: GO 29508
29379: LD_INT 1
29381: DOUBLE
29382: EQUAL
29383: IFTRUE 29387
29385: GO 29449
29387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29388: LD_ADDR_VAR 0 3
29392: PUSH
29393: LD_INT 11
29395: PUSH
29396: LD_INT 12
29398: PUSH
29399: LD_INT 13
29401: PUSH
29402: LD_INT 14
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: LD_INT 2
29410: PUSH
29411: LD_INT 3
29413: PUSH
29414: LD_INT 4
29416: PUSH
29417: LD_INT 5
29419: PUSH
29420: LD_INT 21
29422: PUSH
29423: LD_INT 23
29425: PUSH
29426: LD_INT 22
29428: PUSH
29429: LD_INT 24
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: ST_TO_ADDR
29447: GO 29508
29449: LD_INT 3
29451: DOUBLE
29452: EQUAL
29453: IFTRUE 29457
29455: GO 29507
29457: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29458: LD_ADDR_VAR 0 3
29462: PUSH
29463: LD_INT 13
29465: PUSH
29466: LD_INT 14
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 3
29474: PUSH
29475: LD_INT 4
29477: PUSH
29478: LD_INT 5
29480: PUSH
29481: LD_INT 21
29483: PUSH
29484: LD_INT 22
29486: PUSH
29487: LD_INT 23
29489: PUSH
29490: LD_INT 24
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
29505: GO 29508
29507: POP
// result := ( chassis in result ) ;
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_VAR 0 1
29517: PUSH
29518: LD_VAR 0 3
29522: IN
29523: ST_TO_ADDR
// end ;
29524: LD_VAR 0 3
29528: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29529: LD_INT 0
29531: PPUSH
// if not chassis or not weapon then
29532: LD_VAR 0 1
29536: NOT
29537: PUSH
29538: LD_VAR 0 2
29542: NOT
29543: OR
29544: IFFALSE 29548
// exit ;
29546: GO 30610
// case weapon of us_machine_gun :
29548: LD_VAR 0 2
29552: PUSH
29553: LD_INT 2
29555: DOUBLE
29556: EQUAL
29557: IFTRUE 29561
29559: GO 29591
29561: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: LD_INT 4
29578: PUSH
29579: LD_INT 5
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: ST_TO_ADDR
29589: GO 30594
29591: LD_INT 3
29593: DOUBLE
29594: EQUAL
29595: IFTRUE 29599
29597: GO 29629
29599: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29600: LD_ADDR_VAR 0 3
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: LD_INT 2
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: LD_INT 4
29616: PUSH
29617: LD_INT 5
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: ST_TO_ADDR
29627: GO 30594
29629: LD_INT 11
29631: DOUBLE
29632: EQUAL
29633: IFTRUE 29637
29635: GO 29667
29637: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29638: LD_ADDR_VAR 0 3
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 2
29648: PUSH
29649: LD_INT 3
29651: PUSH
29652: LD_INT 4
29654: PUSH
29655: LD_INT 5
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: ST_TO_ADDR
29665: GO 30594
29667: LD_INT 4
29669: DOUBLE
29670: EQUAL
29671: IFTRUE 29675
29673: GO 29701
29675: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29676: LD_ADDR_VAR 0 3
29680: PUSH
29681: LD_INT 2
29683: PUSH
29684: LD_INT 3
29686: PUSH
29687: LD_INT 4
29689: PUSH
29690: LD_INT 5
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: ST_TO_ADDR
29699: GO 30594
29701: LD_INT 5
29703: DOUBLE
29704: EQUAL
29705: IFTRUE 29709
29707: GO 29735
29709: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29710: LD_ADDR_VAR 0 3
29714: PUSH
29715: LD_INT 2
29717: PUSH
29718: LD_INT 3
29720: PUSH
29721: LD_INT 4
29723: PUSH
29724: LD_INT 5
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: ST_TO_ADDR
29733: GO 30594
29735: LD_INT 9
29737: DOUBLE
29738: EQUAL
29739: IFTRUE 29743
29741: GO 29769
29743: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29744: LD_ADDR_VAR 0 3
29748: PUSH
29749: LD_INT 2
29751: PUSH
29752: LD_INT 3
29754: PUSH
29755: LD_INT 4
29757: PUSH
29758: LD_INT 5
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: ST_TO_ADDR
29767: GO 30594
29769: LD_INT 7
29771: DOUBLE
29772: EQUAL
29773: IFTRUE 29777
29775: GO 29803
29777: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29778: LD_ADDR_VAR 0 3
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: LD_INT 3
29788: PUSH
29789: LD_INT 4
29791: PUSH
29792: LD_INT 5
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: ST_TO_ADDR
29801: GO 30594
29803: LD_INT 12
29805: DOUBLE
29806: EQUAL
29807: IFTRUE 29811
29809: GO 29837
29811: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29812: LD_ADDR_VAR 0 3
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 3
29822: PUSH
29823: LD_INT 4
29825: PUSH
29826: LD_INT 5
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: ST_TO_ADDR
29835: GO 30594
29837: LD_INT 13
29839: DOUBLE
29840: EQUAL
29841: IFTRUE 29845
29843: GO 29871
29845: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29846: LD_ADDR_VAR 0 3
29850: PUSH
29851: LD_INT 2
29853: PUSH
29854: LD_INT 3
29856: PUSH
29857: LD_INT 4
29859: PUSH
29860: LD_INT 5
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: ST_TO_ADDR
29869: GO 30594
29871: LD_INT 14
29873: DOUBLE
29874: EQUAL
29875: IFTRUE 29879
29877: GO 29897
29879: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29880: LD_ADDR_VAR 0 3
29884: PUSH
29885: LD_INT 4
29887: PUSH
29888: LD_INT 5
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: ST_TO_ADDR
29895: GO 30594
29897: LD_INT 6
29899: DOUBLE
29900: EQUAL
29901: IFTRUE 29905
29903: GO 29923
29905: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29906: LD_ADDR_VAR 0 3
29910: PUSH
29911: LD_INT 4
29913: PUSH
29914: LD_INT 5
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: ST_TO_ADDR
29921: GO 30594
29923: LD_INT 10
29925: DOUBLE
29926: EQUAL
29927: IFTRUE 29931
29929: GO 29949
29931: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29932: LD_ADDR_VAR 0 3
29936: PUSH
29937: LD_INT 4
29939: PUSH
29940: LD_INT 5
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: ST_TO_ADDR
29947: GO 30594
29949: LD_INT 22
29951: DOUBLE
29952: EQUAL
29953: IFTRUE 29957
29955: GO 29983
29957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29958: LD_ADDR_VAR 0 3
29962: PUSH
29963: LD_INT 11
29965: PUSH
29966: LD_INT 12
29968: PUSH
29969: LD_INT 13
29971: PUSH
29972: LD_INT 14
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: ST_TO_ADDR
29981: GO 30594
29983: LD_INT 23
29985: DOUBLE
29986: EQUAL
29987: IFTRUE 29991
29989: GO 30017
29991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29992: LD_ADDR_VAR 0 3
29996: PUSH
29997: LD_INT 11
29999: PUSH
30000: LD_INT 12
30002: PUSH
30003: LD_INT 13
30005: PUSH
30006: LD_INT 14
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
30015: GO 30594
30017: LD_INT 24
30019: DOUBLE
30020: EQUAL
30021: IFTRUE 30025
30023: GO 30051
30025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30026: LD_ADDR_VAR 0 3
30030: PUSH
30031: LD_INT 11
30033: PUSH
30034: LD_INT 12
30036: PUSH
30037: LD_INT 13
30039: PUSH
30040: LD_INT 14
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: ST_TO_ADDR
30049: GO 30594
30051: LD_INT 30
30053: DOUBLE
30054: EQUAL
30055: IFTRUE 30059
30057: GO 30085
30059: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30060: LD_ADDR_VAR 0 3
30064: PUSH
30065: LD_INT 11
30067: PUSH
30068: LD_INT 12
30070: PUSH
30071: LD_INT 13
30073: PUSH
30074: LD_INT 14
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: ST_TO_ADDR
30083: GO 30594
30085: LD_INT 25
30087: DOUBLE
30088: EQUAL
30089: IFTRUE 30093
30091: GO 30111
30093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30094: LD_ADDR_VAR 0 3
30098: PUSH
30099: LD_INT 13
30101: PUSH
30102: LD_INT 14
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: ST_TO_ADDR
30109: GO 30594
30111: LD_INT 27
30113: DOUBLE
30114: EQUAL
30115: IFTRUE 30119
30117: GO 30137
30119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30120: LD_ADDR_VAR 0 3
30124: PUSH
30125: LD_INT 13
30127: PUSH
30128: LD_INT 14
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: ST_TO_ADDR
30135: GO 30594
30137: LD_EXP 23
30141: DOUBLE
30142: EQUAL
30143: IFTRUE 30147
30145: GO 30173
30147: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30148: LD_ADDR_VAR 0 3
30152: PUSH
30153: LD_INT 11
30155: PUSH
30156: LD_INT 12
30158: PUSH
30159: LD_INT 13
30161: PUSH
30162: LD_INT 14
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: ST_TO_ADDR
30171: GO 30594
30173: LD_INT 28
30175: DOUBLE
30176: EQUAL
30177: IFTRUE 30181
30179: GO 30199
30181: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30182: LD_ADDR_VAR 0 3
30186: PUSH
30187: LD_INT 13
30189: PUSH
30190: LD_INT 14
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: ST_TO_ADDR
30197: GO 30594
30199: LD_INT 29
30201: DOUBLE
30202: EQUAL
30203: IFTRUE 30207
30205: GO 30225
30207: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30208: LD_ADDR_VAR 0 3
30212: PUSH
30213: LD_INT 13
30215: PUSH
30216: LD_INT 14
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: ST_TO_ADDR
30223: GO 30594
30225: LD_INT 31
30227: DOUBLE
30228: EQUAL
30229: IFTRUE 30233
30231: GO 30251
30233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30234: LD_ADDR_VAR 0 3
30238: PUSH
30239: LD_INT 13
30241: PUSH
30242: LD_INT 14
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: ST_TO_ADDR
30249: GO 30594
30251: LD_INT 26
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30277
30259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30260: LD_ADDR_VAR 0 3
30264: PUSH
30265: LD_INT 13
30267: PUSH
30268: LD_INT 14
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: ST_TO_ADDR
30275: GO 30594
30277: LD_INT 42
30279: DOUBLE
30280: EQUAL
30281: IFTRUE 30285
30283: GO 30311
30285: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30286: LD_ADDR_VAR 0 3
30290: PUSH
30291: LD_INT 21
30293: PUSH
30294: LD_INT 22
30296: PUSH
30297: LD_INT 23
30299: PUSH
30300: LD_INT 24
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: ST_TO_ADDR
30309: GO 30594
30311: LD_INT 43
30313: DOUBLE
30314: EQUAL
30315: IFTRUE 30319
30317: GO 30345
30319: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30320: LD_ADDR_VAR 0 3
30324: PUSH
30325: LD_INT 21
30327: PUSH
30328: LD_INT 22
30330: PUSH
30331: LD_INT 23
30333: PUSH
30334: LD_INT 24
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: ST_TO_ADDR
30343: GO 30594
30345: LD_INT 44
30347: DOUBLE
30348: EQUAL
30349: IFTRUE 30353
30351: GO 30379
30353: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30354: LD_ADDR_VAR 0 3
30358: PUSH
30359: LD_INT 21
30361: PUSH
30362: LD_INT 22
30364: PUSH
30365: LD_INT 23
30367: PUSH
30368: LD_INT 24
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: ST_TO_ADDR
30377: GO 30594
30379: LD_INT 45
30381: DOUBLE
30382: EQUAL
30383: IFTRUE 30387
30385: GO 30413
30387: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30388: LD_ADDR_VAR 0 3
30392: PUSH
30393: LD_INT 21
30395: PUSH
30396: LD_INT 22
30398: PUSH
30399: LD_INT 23
30401: PUSH
30402: LD_INT 24
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: ST_TO_ADDR
30411: GO 30594
30413: LD_INT 49
30415: DOUBLE
30416: EQUAL
30417: IFTRUE 30421
30419: GO 30447
30421: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30422: LD_ADDR_VAR 0 3
30426: PUSH
30427: LD_INT 21
30429: PUSH
30430: LD_INT 22
30432: PUSH
30433: LD_INT 23
30435: PUSH
30436: LD_INT 24
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: ST_TO_ADDR
30445: GO 30594
30447: LD_INT 51
30449: DOUBLE
30450: EQUAL
30451: IFTRUE 30455
30453: GO 30481
30455: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30456: LD_ADDR_VAR 0 3
30460: PUSH
30461: LD_INT 21
30463: PUSH
30464: LD_INT 22
30466: PUSH
30467: LD_INT 23
30469: PUSH
30470: LD_INT 24
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: ST_TO_ADDR
30479: GO 30594
30481: LD_INT 52
30483: DOUBLE
30484: EQUAL
30485: IFTRUE 30489
30487: GO 30515
30489: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30490: LD_ADDR_VAR 0 3
30494: PUSH
30495: LD_INT 21
30497: PUSH
30498: LD_INT 22
30500: PUSH
30501: LD_INT 23
30503: PUSH
30504: LD_INT 24
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: ST_TO_ADDR
30513: GO 30594
30515: LD_INT 53
30517: DOUBLE
30518: EQUAL
30519: IFTRUE 30523
30521: GO 30541
30523: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30524: LD_ADDR_VAR 0 3
30528: PUSH
30529: LD_INT 23
30531: PUSH
30532: LD_INT 24
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: ST_TO_ADDR
30539: GO 30594
30541: LD_INT 46
30543: DOUBLE
30544: EQUAL
30545: IFTRUE 30549
30547: GO 30567
30549: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30550: LD_ADDR_VAR 0 3
30554: PUSH
30555: LD_INT 23
30557: PUSH
30558: LD_INT 24
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: ST_TO_ADDR
30565: GO 30594
30567: LD_INT 47
30569: DOUBLE
30570: EQUAL
30571: IFTRUE 30575
30573: GO 30593
30575: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30576: LD_ADDR_VAR 0 3
30580: PUSH
30581: LD_INT 23
30583: PUSH
30584: LD_INT 24
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: ST_TO_ADDR
30591: GO 30594
30593: POP
// result := ( chassis in result ) ;
30594: LD_ADDR_VAR 0 3
30598: PUSH
30599: LD_VAR 0 1
30603: PUSH
30604: LD_VAR 0 3
30608: IN
30609: ST_TO_ADDR
// end ;
30610: LD_VAR 0 3
30614: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30615: LD_INT 0
30617: PPUSH
30618: PPUSH
30619: PPUSH
30620: PPUSH
30621: PPUSH
30622: PPUSH
30623: PPUSH
// result := array ;
30624: LD_ADDR_VAR 0 5
30628: PUSH
30629: LD_VAR 0 1
30633: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30634: LD_VAR 0 1
30638: NOT
30639: PUSH
30640: LD_VAR 0 2
30644: NOT
30645: OR
30646: PUSH
30647: LD_VAR 0 3
30651: NOT
30652: OR
30653: PUSH
30654: LD_VAR 0 2
30658: PUSH
30659: LD_VAR 0 1
30663: GREATER
30664: OR
30665: PUSH
30666: LD_VAR 0 3
30670: PUSH
30671: LD_VAR 0 1
30675: GREATER
30676: OR
30677: IFFALSE 30681
// exit ;
30679: GO 30977
// if direction then
30681: LD_VAR 0 4
30685: IFFALSE 30749
// begin d := 1 ;
30687: LD_ADDR_VAR 0 9
30691: PUSH
30692: LD_INT 1
30694: ST_TO_ADDR
// if i_from > i_to then
30695: LD_VAR 0 2
30699: PUSH
30700: LD_VAR 0 3
30704: GREATER
30705: IFFALSE 30731
// length := ( array - i_from ) + i_to else
30707: LD_ADDR_VAR 0 11
30711: PUSH
30712: LD_VAR 0 1
30716: PUSH
30717: LD_VAR 0 2
30721: MINUS
30722: PUSH
30723: LD_VAR 0 3
30727: PLUS
30728: ST_TO_ADDR
30729: GO 30747
// length := i_to - i_from ;
30731: LD_ADDR_VAR 0 11
30735: PUSH
30736: LD_VAR 0 3
30740: PUSH
30741: LD_VAR 0 2
30745: MINUS
30746: ST_TO_ADDR
// end else
30747: GO 30810
// begin d := - 1 ;
30749: LD_ADDR_VAR 0 9
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: ST_TO_ADDR
// if i_from > i_to then
30758: LD_VAR 0 2
30762: PUSH
30763: LD_VAR 0 3
30767: GREATER
30768: IFFALSE 30788
// length := i_from - i_to else
30770: LD_ADDR_VAR 0 11
30774: PUSH
30775: LD_VAR 0 2
30779: PUSH
30780: LD_VAR 0 3
30784: MINUS
30785: ST_TO_ADDR
30786: GO 30810
// length := ( array - i_to ) + i_from ;
30788: LD_ADDR_VAR 0 11
30792: PUSH
30793: LD_VAR 0 1
30797: PUSH
30798: LD_VAR 0 3
30802: MINUS
30803: PUSH
30804: LD_VAR 0 2
30808: PLUS
30809: ST_TO_ADDR
// end ; if not length then
30810: LD_VAR 0 11
30814: NOT
30815: IFFALSE 30819
// exit ;
30817: GO 30977
// tmp := array ;
30819: LD_ADDR_VAR 0 10
30823: PUSH
30824: LD_VAR 0 1
30828: ST_TO_ADDR
// for i = 1 to length do
30829: LD_ADDR_VAR 0 6
30833: PUSH
30834: DOUBLE
30835: LD_INT 1
30837: DEC
30838: ST_TO_ADDR
30839: LD_VAR 0 11
30843: PUSH
30844: FOR_TO
30845: IFFALSE 30965
// begin for j = 1 to array do
30847: LD_ADDR_VAR 0 7
30851: PUSH
30852: DOUBLE
30853: LD_INT 1
30855: DEC
30856: ST_TO_ADDR
30857: LD_VAR 0 1
30861: PUSH
30862: FOR_TO
30863: IFFALSE 30951
// begin k := j + d ;
30865: LD_ADDR_VAR 0 8
30869: PUSH
30870: LD_VAR 0 7
30874: PUSH
30875: LD_VAR 0 9
30879: PLUS
30880: ST_TO_ADDR
// if k > array then
30881: LD_VAR 0 8
30885: PUSH
30886: LD_VAR 0 1
30890: GREATER
30891: IFFALSE 30901
// k := 1 ;
30893: LD_ADDR_VAR 0 8
30897: PUSH
30898: LD_INT 1
30900: ST_TO_ADDR
// if not k then
30901: LD_VAR 0 8
30905: NOT
30906: IFFALSE 30918
// k := array ;
30908: LD_ADDR_VAR 0 8
30912: PUSH
30913: LD_VAR 0 1
30917: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30918: LD_ADDR_VAR 0 10
30922: PUSH
30923: LD_VAR 0 10
30927: PPUSH
30928: LD_VAR 0 8
30932: PPUSH
30933: LD_VAR 0 1
30937: PUSH
30938: LD_VAR 0 7
30942: ARRAY
30943: PPUSH
30944: CALL_OW 1
30948: ST_TO_ADDR
// end ;
30949: GO 30862
30951: POP
30952: POP
// array := tmp ;
30953: LD_ADDR_VAR 0 1
30957: PUSH
30958: LD_VAR 0 10
30962: ST_TO_ADDR
// end ;
30963: GO 30844
30965: POP
30966: POP
// result := array ;
30967: LD_ADDR_VAR 0 5
30971: PUSH
30972: LD_VAR 0 1
30976: ST_TO_ADDR
// end ;
30977: LD_VAR 0 5
30981: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30982: LD_INT 0
30984: PPUSH
30985: PPUSH
// result := 0 ;
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: LD_INT 0
30993: ST_TO_ADDR
// if not array or not value in array then
30994: LD_VAR 0 1
30998: NOT
30999: PUSH
31000: LD_VAR 0 2
31004: PUSH
31005: LD_VAR 0 1
31009: IN
31010: NOT
31011: OR
31012: IFFALSE 31016
// exit ;
31014: GO 31070
// for i = 1 to array do
31016: LD_ADDR_VAR 0 4
31020: PUSH
31021: DOUBLE
31022: LD_INT 1
31024: DEC
31025: ST_TO_ADDR
31026: LD_VAR 0 1
31030: PUSH
31031: FOR_TO
31032: IFFALSE 31068
// if value = array [ i ] then
31034: LD_VAR 0 2
31038: PUSH
31039: LD_VAR 0 1
31043: PUSH
31044: LD_VAR 0 4
31048: ARRAY
31049: EQUAL
31050: IFFALSE 31066
// begin result := i ;
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: LD_VAR 0 4
31061: ST_TO_ADDR
// exit ;
31062: POP
31063: POP
31064: GO 31070
// end ;
31066: GO 31031
31068: POP
31069: POP
// end ;
31070: LD_VAR 0 3
31074: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31075: LD_INT 0
31077: PPUSH
// vc_chassis := chassis ;
31078: LD_ADDR_OWVAR 37
31082: PUSH
31083: LD_VAR 0 1
31087: ST_TO_ADDR
// vc_engine := engine ;
31088: LD_ADDR_OWVAR 39
31092: PUSH
31093: LD_VAR 0 2
31097: ST_TO_ADDR
// vc_control := control ;
31098: LD_ADDR_OWVAR 38
31102: PUSH
31103: LD_VAR 0 3
31107: ST_TO_ADDR
// vc_weapon := weapon ;
31108: LD_ADDR_OWVAR 40
31112: PUSH
31113: LD_VAR 0 4
31117: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31118: LD_ADDR_OWVAR 41
31122: PUSH
31123: LD_VAR 0 5
31127: ST_TO_ADDR
// end ;
31128: LD_VAR 0 6
31132: RET
// export function WantPlant ( unit ) ; var task ; begin
31133: LD_INT 0
31135: PPUSH
31136: PPUSH
// result := false ;
31137: LD_ADDR_VAR 0 2
31141: PUSH
31142: LD_INT 0
31144: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_VAR 0 1
31154: PPUSH
31155: CALL_OW 437
31159: ST_TO_ADDR
// if task then
31160: LD_VAR 0 3
31164: IFFALSE 31192
// if task [ 1 ] [ 1 ] = p then
31166: LD_VAR 0 3
31170: PUSH
31171: LD_INT 1
31173: ARRAY
31174: PUSH
31175: LD_INT 1
31177: ARRAY
31178: PUSH
31179: LD_STRING p
31181: EQUAL
31182: IFFALSE 31192
// result := true ;
31184: LD_ADDR_VAR 0 2
31188: PUSH
31189: LD_INT 1
31191: ST_TO_ADDR
// end ;
31192: LD_VAR 0 2
31196: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31197: LD_INT 0
31199: PPUSH
31200: PPUSH
31201: PPUSH
31202: PPUSH
// if pos < 1 then
31203: LD_VAR 0 2
31207: PUSH
31208: LD_INT 1
31210: LESS
31211: IFFALSE 31215
// exit ;
31213: GO 31518
// if pos = 1 then
31215: LD_VAR 0 2
31219: PUSH
31220: LD_INT 1
31222: EQUAL
31223: IFFALSE 31256
// result := Replace ( arr , pos [ 1 ] , value ) else
31225: LD_ADDR_VAR 0 4
31229: PUSH
31230: LD_VAR 0 1
31234: PPUSH
31235: LD_VAR 0 2
31239: PUSH
31240: LD_INT 1
31242: ARRAY
31243: PPUSH
31244: LD_VAR 0 3
31248: PPUSH
31249: CALL_OW 1
31253: ST_TO_ADDR
31254: GO 31518
// begin tmp := arr ;
31256: LD_ADDR_VAR 0 6
31260: PUSH
31261: LD_VAR 0 1
31265: ST_TO_ADDR
// s_arr := [ tmp ] ;
31266: LD_ADDR_VAR 0 7
31270: PUSH
31271: LD_VAR 0 6
31275: PUSH
31276: EMPTY
31277: LIST
31278: ST_TO_ADDR
// for i = 1 to pos - 1 do
31279: LD_ADDR_VAR 0 5
31283: PUSH
31284: DOUBLE
31285: LD_INT 1
31287: DEC
31288: ST_TO_ADDR
31289: LD_VAR 0 2
31293: PUSH
31294: LD_INT 1
31296: MINUS
31297: PUSH
31298: FOR_TO
31299: IFFALSE 31344
// begin tmp := tmp [ pos [ i ] ] ;
31301: LD_ADDR_VAR 0 6
31305: PUSH
31306: LD_VAR 0 6
31310: PUSH
31311: LD_VAR 0 2
31315: PUSH
31316: LD_VAR 0 5
31320: ARRAY
31321: ARRAY
31322: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31323: LD_ADDR_VAR 0 7
31327: PUSH
31328: LD_VAR 0 7
31332: PUSH
31333: LD_VAR 0 6
31337: PUSH
31338: EMPTY
31339: LIST
31340: ADD
31341: ST_TO_ADDR
// end ;
31342: GO 31298
31344: POP
31345: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31346: LD_ADDR_VAR 0 6
31350: PUSH
31351: LD_VAR 0 6
31355: PPUSH
31356: LD_VAR 0 2
31360: PUSH
31361: LD_VAR 0 2
31365: ARRAY
31366: PPUSH
31367: LD_VAR 0 3
31371: PPUSH
31372: CALL_OW 1
31376: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31377: LD_ADDR_VAR 0 7
31381: PUSH
31382: LD_VAR 0 7
31386: PPUSH
31387: LD_VAR 0 7
31391: PPUSH
31392: LD_VAR 0 6
31396: PPUSH
31397: CALL_OW 1
31401: ST_TO_ADDR
// for i = s_arr downto 2 do
31402: LD_ADDR_VAR 0 5
31406: PUSH
31407: DOUBLE
31408: LD_VAR 0 7
31412: INC
31413: ST_TO_ADDR
31414: LD_INT 2
31416: PUSH
31417: FOR_DOWNTO
31418: IFFALSE 31502
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31420: LD_ADDR_VAR 0 6
31424: PUSH
31425: LD_VAR 0 7
31429: PUSH
31430: LD_VAR 0 5
31434: PUSH
31435: LD_INT 1
31437: MINUS
31438: ARRAY
31439: PPUSH
31440: LD_VAR 0 2
31444: PUSH
31445: LD_VAR 0 5
31449: PUSH
31450: LD_INT 1
31452: MINUS
31453: ARRAY
31454: PPUSH
31455: LD_VAR 0 7
31459: PUSH
31460: LD_VAR 0 5
31464: ARRAY
31465: PPUSH
31466: CALL_OW 1
31470: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31471: LD_ADDR_VAR 0 7
31475: PUSH
31476: LD_VAR 0 7
31480: PPUSH
31481: LD_VAR 0 5
31485: PUSH
31486: LD_INT 1
31488: MINUS
31489: PPUSH
31490: LD_VAR 0 6
31494: PPUSH
31495: CALL_OW 1
31499: ST_TO_ADDR
// end ;
31500: GO 31417
31502: POP
31503: POP
// result := s_arr [ 1 ] ;
31504: LD_ADDR_VAR 0 4
31508: PUSH
31509: LD_VAR 0 7
31513: PUSH
31514: LD_INT 1
31516: ARRAY
31517: ST_TO_ADDR
// end ; end ;
31518: LD_VAR 0 4
31522: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31523: LD_INT 0
31525: PPUSH
31526: PPUSH
// if not list then
31527: LD_VAR 0 1
31531: NOT
31532: IFFALSE 31536
// exit ;
31534: GO 31627
// i := list [ pos1 ] ;
31536: LD_ADDR_VAR 0 5
31540: PUSH
31541: LD_VAR 0 1
31545: PUSH
31546: LD_VAR 0 2
31550: ARRAY
31551: ST_TO_ADDR
// if not i then
31552: LD_VAR 0 5
31556: NOT
31557: IFFALSE 31561
// exit ;
31559: GO 31627
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31561: LD_ADDR_VAR 0 1
31565: PUSH
31566: LD_VAR 0 1
31570: PPUSH
31571: LD_VAR 0 2
31575: PPUSH
31576: LD_VAR 0 1
31580: PUSH
31581: LD_VAR 0 3
31585: ARRAY
31586: PPUSH
31587: CALL_OW 1
31591: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31592: LD_ADDR_VAR 0 1
31596: PUSH
31597: LD_VAR 0 1
31601: PPUSH
31602: LD_VAR 0 3
31606: PPUSH
31607: LD_VAR 0 5
31611: PPUSH
31612: CALL_OW 1
31616: ST_TO_ADDR
// result := list ;
31617: LD_ADDR_VAR 0 4
31621: PUSH
31622: LD_VAR 0 1
31626: ST_TO_ADDR
// end ;
31627: LD_VAR 0 4
31631: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31632: LD_INT 0
31634: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31635: LD_ADDR_VAR 0 5
31639: PUSH
31640: LD_VAR 0 1
31644: PPUSH
31645: CALL_OW 250
31649: PPUSH
31650: LD_VAR 0 1
31654: PPUSH
31655: CALL_OW 251
31659: PPUSH
31660: LD_VAR 0 2
31664: PPUSH
31665: LD_VAR 0 3
31669: PPUSH
31670: LD_VAR 0 4
31674: PPUSH
31675: CALL 31685 0 5
31679: ST_TO_ADDR
// end ;
31680: LD_VAR 0 5
31684: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31685: LD_INT 0
31687: PPUSH
31688: PPUSH
31689: PPUSH
31690: PPUSH
// if not list then
31691: LD_VAR 0 3
31695: NOT
31696: IFFALSE 31700
// exit ;
31698: GO 32088
// result := [ ] ;
31700: LD_ADDR_VAR 0 6
31704: PUSH
31705: EMPTY
31706: ST_TO_ADDR
// for i in list do
31707: LD_ADDR_VAR 0 7
31711: PUSH
31712: LD_VAR 0 3
31716: PUSH
31717: FOR_IN
31718: IFFALSE 31920
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31720: LD_ADDR_VAR 0 9
31724: PUSH
31725: LD_VAR 0 7
31729: PPUSH
31730: LD_VAR 0 1
31734: PPUSH
31735: LD_VAR 0 2
31739: PPUSH
31740: CALL_OW 297
31744: ST_TO_ADDR
// if not result then
31745: LD_VAR 0 6
31749: NOT
31750: IFFALSE 31776
// result := [ [ i , tmp ] ] else
31752: LD_ADDR_VAR 0 6
31756: PUSH
31757: LD_VAR 0 7
31761: PUSH
31762: LD_VAR 0 9
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: EMPTY
31772: LIST
31773: ST_TO_ADDR
31774: GO 31918
// begin if result [ result ] [ 2 ] < tmp then
31776: LD_VAR 0 6
31780: PUSH
31781: LD_VAR 0 6
31785: ARRAY
31786: PUSH
31787: LD_INT 2
31789: ARRAY
31790: PUSH
31791: LD_VAR 0 9
31795: LESS
31796: IFFALSE 31838
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31798: LD_ADDR_VAR 0 6
31802: PUSH
31803: LD_VAR 0 6
31807: PPUSH
31808: LD_VAR 0 6
31812: PUSH
31813: LD_INT 1
31815: PLUS
31816: PPUSH
31817: LD_VAR 0 7
31821: PUSH
31822: LD_VAR 0 9
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PPUSH
31831: CALL_OW 2
31835: ST_TO_ADDR
31836: GO 31918
// for j = 1 to result do
31838: LD_ADDR_VAR 0 8
31842: PUSH
31843: DOUBLE
31844: LD_INT 1
31846: DEC
31847: ST_TO_ADDR
31848: LD_VAR 0 6
31852: PUSH
31853: FOR_TO
31854: IFFALSE 31916
// begin if tmp < result [ j ] [ 2 ] then
31856: LD_VAR 0 9
31860: PUSH
31861: LD_VAR 0 6
31865: PUSH
31866: LD_VAR 0 8
31870: ARRAY
31871: PUSH
31872: LD_INT 2
31874: ARRAY
31875: LESS
31876: IFFALSE 31914
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31878: LD_ADDR_VAR 0 6
31882: PUSH
31883: LD_VAR 0 6
31887: PPUSH
31888: LD_VAR 0 8
31892: PPUSH
31893: LD_VAR 0 7
31897: PUSH
31898: LD_VAR 0 9
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PPUSH
31907: CALL_OW 2
31911: ST_TO_ADDR
// break ;
31912: GO 31916
// end ; end ;
31914: GO 31853
31916: POP
31917: POP
// end ; end ;
31918: GO 31717
31920: POP
31921: POP
// if result and not asc then
31922: LD_VAR 0 6
31926: PUSH
31927: LD_VAR 0 4
31931: NOT
31932: AND
31933: IFFALSE 32008
// begin tmp := result ;
31935: LD_ADDR_VAR 0 9
31939: PUSH
31940: LD_VAR 0 6
31944: ST_TO_ADDR
// for i = tmp downto 1 do
31945: LD_ADDR_VAR 0 7
31949: PUSH
31950: DOUBLE
31951: LD_VAR 0 9
31955: INC
31956: ST_TO_ADDR
31957: LD_INT 1
31959: PUSH
31960: FOR_DOWNTO
31961: IFFALSE 32006
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31963: LD_ADDR_VAR 0 6
31967: PUSH
31968: LD_VAR 0 6
31972: PPUSH
31973: LD_VAR 0 9
31977: PUSH
31978: LD_VAR 0 7
31982: MINUS
31983: PUSH
31984: LD_INT 1
31986: PLUS
31987: PPUSH
31988: LD_VAR 0 9
31992: PUSH
31993: LD_VAR 0 7
31997: ARRAY
31998: PPUSH
31999: CALL_OW 1
32003: ST_TO_ADDR
32004: GO 31960
32006: POP
32007: POP
// end ; tmp := [ ] ;
32008: LD_ADDR_VAR 0 9
32012: PUSH
32013: EMPTY
32014: ST_TO_ADDR
// if mode then
32015: LD_VAR 0 5
32019: IFFALSE 32088
// begin for i = 1 to result do
32021: LD_ADDR_VAR 0 7
32025: PUSH
32026: DOUBLE
32027: LD_INT 1
32029: DEC
32030: ST_TO_ADDR
32031: LD_VAR 0 6
32035: PUSH
32036: FOR_TO
32037: IFFALSE 32076
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32039: LD_ADDR_VAR 0 9
32043: PUSH
32044: LD_VAR 0 9
32048: PPUSH
32049: LD_VAR 0 7
32053: PPUSH
32054: LD_VAR 0 6
32058: PUSH
32059: LD_VAR 0 7
32063: ARRAY
32064: PUSH
32065: LD_INT 1
32067: ARRAY
32068: PPUSH
32069: CALL_OW 1
32073: ST_TO_ADDR
32074: GO 32036
32076: POP
32077: POP
// result := tmp ;
32078: LD_ADDR_VAR 0 6
32082: PUSH
32083: LD_VAR 0 9
32087: ST_TO_ADDR
// end ; end ;
32088: LD_VAR 0 6
32092: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32093: LD_INT 0
32095: PPUSH
32096: PPUSH
32097: PPUSH
32098: PPUSH
32099: PPUSH
32100: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32101: LD_ADDR_VAR 0 5
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: ST_TO_ADDR
// if not x or not y then
32123: LD_VAR 0 2
32127: NOT
32128: PUSH
32129: LD_VAR 0 3
32133: NOT
32134: OR
32135: IFFALSE 32139
// exit ;
32137: GO 33791
// if not range then
32139: LD_VAR 0 4
32143: NOT
32144: IFFALSE 32154
// range := 10 ;
32146: LD_ADDR_VAR 0 4
32150: PUSH
32151: LD_INT 10
32153: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32154: LD_ADDR_VAR 0 8
32158: PUSH
32159: LD_INT 81
32161: PUSH
32162: LD_VAR 0 1
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 92
32173: PUSH
32174: LD_VAR 0 2
32178: PUSH
32179: LD_VAR 0 3
32183: PUSH
32184: LD_VAR 0 4
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 3
32197: PUSH
32198: LD_INT 21
32200: PUSH
32201: LD_INT 3
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: PPUSH
32217: CALL_OW 69
32221: ST_TO_ADDR
// if not tmp then
32222: LD_VAR 0 8
32226: NOT
32227: IFFALSE 32231
// exit ;
32229: GO 33791
// for i in tmp do
32231: LD_ADDR_VAR 0 6
32235: PUSH
32236: LD_VAR 0 8
32240: PUSH
32241: FOR_IN
32242: IFFALSE 33766
// begin points := [ 0 , 0 , 0 ] ;
32244: LD_ADDR_VAR 0 9
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: ST_TO_ADDR
// bpoints := 1 ;
32263: LD_ADDR_VAR 0 10
32267: PUSH
32268: LD_INT 1
32270: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32271: LD_VAR 0 6
32275: PPUSH
32276: CALL_OW 247
32280: PUSH
32281: LD_INT 1
32283: DOUBLE
32284: EQUAL
32285: IFTRUE 32289
32287: GO 32867
32289: POP
// begin if GetClass ( i ) = 1 then
32290: LD_VAR 0 6
32294: PPUSH
32295: CALL_OW 257
32299: PUSH
32300: LD_INT 1
32302: EQUAL
32303: IFFALSE 32324
// points := [ 10 , 5 , 3 ] ;
32305: LD_ADDR_VAR 0 9
32309: PUSH
32310: LD_INT 10
32312: PUSH
32313: LD_INT 5
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32324: LD_VAR 0 6
32328: PPUSH
32329: CALL_OW 257
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: LD_INT 4
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: LIST
32347: IN
32348: IFFALSE 32369
// points := [ 3 , 2 , 1 ] ;
32350: LD_ADDR_VAR 0 9
32354: PUSH
32355: LD_INT 3
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: LIST
32368: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32369: LD_VAR 0 6
32373: PPUSH
32374: CALL_OW 257
32378: PUSH
32379: LD_INT 5
32381: EQUAL
32382: IFFALSE 32403
// points := [ 130 , 5 , 2 ] ;
32384: LD_ADDR_VAR 0 9
32388: PUSH
32389: LD_INT 130
32391: PUSH
32392: LD_INT 5
32394: PUSH
32395: LD_INT 2
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32403: LD_VAR 0 6
32407: PPUSH
32408: CALL_OW 257
32412: PUSH
32413: LD_INT 8
32415: EQUAL
32416: IFFALSE 32437
// points := [ 35 , 35 , 30 ] ;
32418: LD_ADDR_VAR 0 9
32422: PUSH
32423: LD_INT 35
32425: PUSH
32426: LD_INT 35
32428: PUSH
32429: LD_INT 30
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32437: LD_VAR 0 6
32441: PPUSH
32442: CALL_OW 257
32446: PUSH
32447: LD_INT 9
32449: EQUAL
32450: IFFALSE 32471
// points := [ 20 , 55 , 40 ] ;
32452: LD_ADDR_VAR 0 9
32456: PUSH
32457: LD_INT 20
32459: PUSH
32460: LD_INT 55
32462: PUSH
32463: LD_INT 40
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32471: LD_VAR 0 6
32475: PPUSH
32476: CALL_OW 257
32480: PUSH
32481: LD_INT 12
32483: PUSH
32484: LD_INT 16
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: IN
32491: IFFALSE 32512
// points := [ 5 , 3 , 2 ] ;
32493: LD_ADDR_VAR 0 9
32497: PUSH
32498: LD_INT 5
32500: PUSH
32501: LD_INT 3
32503: PUSH
32504: LD_INT 2
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32512: LD_VAR 0 6
32516: PPUSH
32517: CALL_OW 257
32521: PUSH
32522: LD_INT 17
32524: EQUAL
32525: IFFALSE 32546
// points := [ 100 , 50 , 75 ] ;
32527: LD_ADDR_VAR 0 9
32531: PUSH
32532: LD_INT 100
32534: PUSH
32535: LD_INT 50
32537: PUSH
32538: LD_INT 75
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32546: LD_VAR 0 6
32550: PPUSH
32551: CALL_OW 257
32555: PUSH
32556: LD_INT 15
32558: EQUAL
32559: IFFALSE 32580
// points := [ 10 , 5 , 3 ] ;
32561: LD_ADDR_VAR 0 9
32565: PUSH
32566: LD_INT 10
32568: PUSH
32569: LD_INT 5
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: LIST
32579: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32580: LD_VAR 0 6
32584: PPUSH
32585: CALL_OW 257
32589: PUSH
32590: LD_INT 14
32592: EQUAL
32593: IFFALSE 32614
// points := [ 10 , 0 , 0 ] ;
32595: LD_ADDR_VAR 0 9
32599: PUSH
32600: LD_INT 10
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: LIST
32613: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32614: LD_VAR 0 6
32618: PPUSH
32619: CALL_OW 257
32623: PUSH
32624: LD_INT 11
32626: EQUAL
32627: IFFALSE 32648
// points := [ 30 , 10 , 5 ] ;
32629: LD_ADDR_VAR 0 9
32633: PUSH
32634: LD_INT 30
32636: PUSH
32637: LD_INT 10
32639: PUSH
32640: LD_INT 5
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: LIST
32647: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32648: LD_VAR 0 1
32652: PPUSH
32653: LD_INT 5
32655: PPUSH
32656: CALL_OW 321
32660: PUSH
32661: LD_INT 2
32663: EQUAL
32664: IFFALSE 32681
// bpoints := bpoints * 1.8 ;
32666: LD_ADDR_VAR 0 10
32670: PUSH
32671: LD_VAR 0 10
32675: PUSH
32676: LD_REAL  1.80000000000000E+0000
32679: MUL
32680: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32681: LD_VAR 0 6
32685: PPUSH
32686: CALL_OW 257
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 2
32696: PUSH
32697: LD_INT 3
32699: PUSH
32700: LD_INT 4
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: IN
32709: PUSH
32710: LD_VAR 0 1
32714: PPUSH
32715: LD_INT 51
32717: PPUSH
32718: CALL_OW 321
32722: PUSH
32723: LD_INT 2
32725: EQUAL
32726: AND
32727: IFFALSE 32744
// bpoints := bpoints * 1.2 ;
32729: LD_ADDR_VAR 0 10
32733: PUSH
32734: LD_VAR 0 10
32738: PUSH
32739: LD_REAL  1.20000000000000E+0000
32742: MUL
32743: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32744: LD_VAR 0 6
32748: PPUSH
32749: CALL_OW 257
32753: PUSH
32754: LD_INT 5
32756: PUSH
32757: LD_INT 7
32759: PUSH
32760: LD_INT 9
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: IN
32768: PUSH
32769: LD_VAR 0 1
32773: PPUSH
32774: LD_INT 52
32776: PPUSH
32777: CALL_OW 321
32781: PUSH
32782: LD_INT 2
32784: EQUAL
32785: AND
32786: IFFALSE 32803
// bpoints := bpoints * 1.5 ;
32788: LD_ADDR_VAR 0 10
32792: PUSH
32793: LD_VAR 0 10
32797: PUSH
32798: LD_REAL  1.50000000000000E+0000
32801: MUL
32802: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32803: LD_VAR 0 1
32807: PPUSH
32808: LD_INT 66
32810: PPUSH
32811: CALL_OW 321
32815: PUSH
32816: LD_INT 2
32818: EQUAL
32819: IFFALSE 32836
// bpoints := bpoints * 1.1 ;
32821: LD_ADDR_VAR 0 10
32825: PUSH
32826: LD_VAR 0 10
32830: PUSH
32831: LD_REAL  1.10000000000000E+0000
32834: MUL
32835: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32836: LD_ADDR_VAR 0 10
32840: PUSH
32841: LD_VAR 0 10
32845: PUSH
32846: LD_VAR 0 6
32850: PPUSH
32851: LD_INT 1
32853: PPUSH
32854: CALL_OW 259
32858: PUSH
32859: LD_REAL  1.15000000000000E+0000
32862: MUL
32863: MUL
32864: ST_TO_ADDR
// end ; unit_vehicle :
32865: GO 33695
32867: LD_INT 2
32869: DOUBLE
32870: EQUAL
32871: IFTRUE 32875
32873: GO 33683
32875: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32876: LD_VAR 0 6
32880: PPUSH
32881: CALL_OW 264
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: LD_INT 42
32891: PUSH
32892: LD_INT 24
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: IN
32900: IFFALSE 32921
// points := [ 25 , 5 , 3 ] ;
32902: LD_ADDR_VAR 0 9
32906: PUSH
32907: LD_INT 25
32909: PUSH
32910: LD_INT 5
32912: PUSH
32913: LD_INT 3
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32921: LD_VAR 0 6
32925: PPUSH
32926: CALL_OW 264
32930: PUSH
32931: LD_INT 4
32933: PUSH
32934: LD_INT 43
32936: PUSH
32937: LD_INT 25
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: LIST
32944: IN
32945: IFFALSE 32966
// points := [ 40 , 15 , 5 ] ;
32947: LD_ADDR_VAR 0 9
32951: PUSH
32952: LD_INT 40
32954: PUSH
32955: LD_INT 15
32957: PUSH
32958: LD_INT 5
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32966: LD_VAR 0 6
32970: PPUSH
32971: CALL_OW 264
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: LD_INT 23
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: IN
32986: IFFALSE 33007
// points := [ 7 , 25 , 8 ] ;
32988: LD_ADDR_VAR 0 9
32992: PUSH
32993: LD_INT 7
32995: PUSH
32996: LD_INT 25
32998: PUSH
32999: LD_INT 8
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33007: LD_VAR 0 6
33011: PPUSH
33012: CALL_OW 264
33016: PUSH
33017: LD_INT 5
33019: PUSH
33020: LD_INT 27
33022: PUSH
33023: LD_INT 44
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: IN
33031: IFFALSE 33052
// points := [ 14 , 50 , 16 ] ;
33033: LD_ADDR_VAR 0 9
33037: PUSH
33038: LD_INT 14
33040: PUSH
33041: LD_INT 50
33043: PUSH
33044: LD_INT 16
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33052: LD_VAR 0 6
33056: PPUSH
33057: CALL_OW 264
33061: PUSH
33062: LD_INT 6
33064: PUSH
33065: LD_INT 46
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: IN
33072: IFFALSE 33093
// points := [ 32 , 120 , 70 ] ;
33074: LD_ADDR_VAR 0 9
33078: PUSH
33079: LD_INT 32
33081: PUSH
33082: LD_INT 120
33084: PUSH
33085: LD_INT 70
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33093: LD_VAR 0 6
33097: PPUSH
33098: CALL_OW 264
33102: PUSH
33103: LD_INT 7
33105: PUSH
33106: LD_INT 28
33108: PUSH
33109: LD_INT 45
33111: PUSH
33112: LD_EXP 23
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: IN
33123: IFFALSE 33144
// points := [ 35 , 20 , 45 ] ;
33125: LD_ADDR_VAR 0 9
33129: PUSH
33130: LD_INT 35
33132: PUSH
33133: LD_INT 20
33135: PUSH
33136: LD_INT 45
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33144: LD_VAR 0 6
33148: PPUSH
33149: CALL_OW 264
33153: PUSH
33154: LD_INT 47
33156: PUSH
33157: EMPTY
33158: LIST
33159: IN
33160: IFFALSE 33181
// points := [ 67 , 45 , 75 ] ;
33162: LD_ADDR_VAR 0 9
33166: PUSH
33167: LD_INT 67
33169: PUSH
33170: LD_INT 45
33172: PUSH
33173: LD_INT 75
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33181: LD_VAR 0 6
33185: PPUSH
33186: CALL_OW 264
33190: PUSH
33191: LD_INT 26
33193: PUSH
33194: EMPTY
33195: LIST
33196: IN
33197: IFFALSE 33218
// points := [ 120 , 30 , 80 ] ;
33199: LD_ADDR_VAR 0 9
33203: PUSH
33204: LD_INT 120
33206: PUSH
33207: LD_INT 30
33209: PUSH
33210: LD_INT 80
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33218: LD_VAR 0 6
33222: PPUSH
33223: CALL_OW 264
33227: PUSH
33228: LD_INT 22
33230: PUSH
33231: EMPTY
33232: LIST
33233: IN
33234: IFFALSE 33255
// points := [ 40 , 1 , 1 ] ;
33236: LD_ADDR_VAR 0 9
33240: PUSH
33241: LD_INT 40
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33255: LD_VAR 0 6
33259: PPUSH
33260: CALL_OW 264
33264: PUSH
33265: LD_INT 29
33267: PUSH
33268: EMPTY
33269: LIST
33270: IN
33271: IFFALSE 33292
// points := [ 70 , 200 , 400 ] ;
33273: LD_ADDR_VAR 0 9
33277: PUSH
33278: LD_INT 70
33280: PUSH
33281: LD_INT 200
33283: PUSH
33284: LD_INT 400
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33292: LD_VAR 0 6
33296: PPUSH
33297: CALL_OW 264
33301: PUSH
33302: LD_INT 14
33304: PUSH
33305: LD_INT 53
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: IN
33312: IFFALSE 33333
// points := [ 40 , 10 , 20 ] ;
33314: LD_ADDR_VAR 0 9
33318: PUSH
33319: LD_INT 40
33321: PUSH
33322: LD_INT 10
33324: PUSH
33325: LD_INT 20
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33333: LD_VAR 0 6
33337: PPUSH
33338: CALL_OW 264
33342: PUSH
33343: LD_INT 9
33345: PUSH
33346: EMPTY
33347: LIST
33348: IN
33349: IFFALSE 33370
// points := [ 5 , 70 , 20 ] ;
33351: LD_ADDR_VAR 0 9
33355: PUSH
33356: LD_INT 5
33358: PUSH
33359: LD_INT 70
33361: PUSH
33362: LD_INT 20
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33370: LD_VAR 0 6
33374: PPUSH
33375: CALL_OW 264
33379: PUSH
33380: LD_INT 10
33382: PUSH
33383: EMPTY
33384: LIST
33385: IN
33386: IFFALSE 33407
// points := [ 35 , 110 , 70 ] ;
33388: LD_ADDR_VAR 0 9
33392: PUSH
33393: LD_INT 35
33395: PUSH
33396: LD_INT 110
33398: PUSH
33399: LD_INT 70
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33407: LD_VAR 0 6
33411: PPUSH
33412: CALL_OW 265
33416: PUSH
33417: LD_INT 25
33419: EQUAL
33420: IFFALSE 33441
// points := [ 80 , 65 , 100 ] ;
33422: LD_ADDR_VAR 0 9
33426: PUSH
33427: LD_INT 80
33429: PUSH
33430: LD_INT 65
33432: PUSH
33433: LD_INT 100
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: LIST
33440: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33441: LD_VAR 0 6
33445: PPUSH
33446: CALL_OW 263
33450: PUSH
33451: LD_INT 1
33453: EQUAL
33454: IFFALSE 33489
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33456: LD_ADDR_VAR 0 10
33460: PUSH
33461: LD_VAR 0 10
33465: PUSH
33466: LD_VAR 0 6
33470: PPUSH
33471: CALL_OW 311
33475: PPUSH
33476: LD_INT 3
33478: PPUSH
33479: CALL_OW 259
33483: PUSH
33484: LD_INT 4
33486: MUL
33487: MUL
33488: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33489: LD_VAR 0 6
33493: PPUSH
33494: CALL_OW 263
33498: PUSH
33499: LD_INT 2
33501: EQUAL
33502: IFFALSE 33553
// begin j := IsControledBy ( i ) ;
33504: LD_ADDR_VAR 0 7
33508: PUSH
33509: LD_VAR 0 6
33513: PPUSH
33514: CALL_OW 312
33518: ST_TO_ADDR
// if j then
33519: LD_VAR 0 7
33523: IFFALSE 33553
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33525: LD_ADDR_VAR 0 10
33529: PUSH
33530: LD_VAR 0 10
33534: PUSH
33535: LD_VAR 0 7
33539: PPUSH
33540: LD_INT 3
33542: PPUSH
33543: CALL_OW 259
33547: PUSH
33548: LD_INT 3
33550: MUL
33551: MUL
33552: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33553: LD_VAR 0 6
33557: PPUSH
33558: CALL_OW 264
33562: PUSH
33563: LD_INT 5
33565: PUSH
33566: LD_INT 6
33568: PUSH
33569: LD_INT 46
33571: PUSH
33572: LD_INT 44
33574: PUSH
33575: LD_INT 47
33577: PUSH
33578: LD_INT 45
33580: PUSH
33581: LD_INT 28
33583: PUSH
33584: LD_INT 7
33586: PUSH
33587: LD_INT 27
33589: PUSH
33590: LD_INT 29
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: IN
33605: PUSH
33606: LD_VAR 0 1
33610: PPUSH
33611: LD_INT 52
33613: PPUSH
33614: CALL_OW 321
33618: PUSH
33619: LD_INT 2
33621: EQUAL
33622: AND
33623: IFFALSE 33640
// bpoints := bpoints * 1.2 ;
33625: LD_ADDR_VAR 0 10
33629: PUSH
33630: LD_VAR 0 10
33634: PUSH
33635: LD_REAL  1.20000000000000E+0000
33638: MUL
33639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33640: LD_VAR 0 6
33644: PPUSH
33645: CALL_OW 264
33649: PUSH
33650: LD_INT 6
33652: PUSH
33653: LD_INT 46
33655: PUSH
33656: LD_INT 47
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: IN
33664: IFFALSE 33681
// bpoints := bpoints * 1.2 ;
33666: LD_ADDR_VAR 0 10
33670: PUSH
33671: LD_VAR 0 10
33675: PUSH
33676: LD_REAL  1.20000000000000E+0000
33679: MUL
33680: ST_TO_ADDR
// end ; unit_building :
33681: GO 33695
33683: LD_INT 3
33685: DOUBLE
33686: EQUAL
33687: IFTRUE 33691
33689: GO 33694
33691: POP
// ; end ;
33692: GO 33695
33694: POP
// for j = 1 to 3 do
33695: LD_ADDR_VAR 0 7
33699: PUSH
33700: DOUBLE
33701: LD_INT 1
33703: DEC
33704: ST_TO_ADDR
33705: LD_INT 3
33707: PUSH
33708: FOR_TO
33709: IFFALSE 33762
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33711: LD_ADDR_VAR 0 5
33715: PUSH
33716: LD_VAR 0 5
33720: PPUSH
33721: LD_VAR 0 7
33725: PPUSH
33726: LD_VAR 0 5
33730: PUSH
33731: LD_VAR 0 7
33735: ARRAY
33736: PUSH
33737: LD_VAR 0 9
33741: PUSH
33742: LD_VAR 0 7
33746: ARRAY
33747: PUSH
33748: LD_VAR 0 10
33752: MUL
33753: PLUS
33754: PPUSH
33755: CALL_OW 1
33759: ST_TO_ADDR
33760: GO 33708
33762: POP
33763: POP
// end ;
33764: GO 32241
33766: POP
33767: POP
// result := Replace ( result , 4 , tmp ) ;
33768: LD_ADDR_VAR 0 5
33772: PUSH
33773: LD_VAR 0 5
33777: PPUSH
33778: LD_INT 4
33780: PPUSH
33781: LD_VAR 0 8
33785: PPUSH
33786: CALL_OW 1
33790: ST_TO_ADDR
// end ;
33791: LD_VAR 0 5
33795: RET
// export function DangerAtRange ( unit , range ) ; begin
33796: LD_INT 0
33798: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33799: LD_ADDR_VAR 0 3
33803: PUSH
33804: LD_VAR 0 1
33808: PPUSH
33809: CALL_OW 255
33813: PPUSH
33814: LD_VAR 0 1
33818: PPUSH
33819: CALL_OW 250
33823: PPUSH
33824: LD_VAR 0 1
33828: PPUSH
33829: CALL_OW 251
33833: PPUSH
33834: LD_VAR 0 2
33838: PPUSH
33839: CALL 32093 0 4
33843: ST_TO_ADDR
// end ;
33844: LD_VAR 0 3
33848: RET
// export function DangerInArea ( side , area ) ; begin
33849: LD_INT 0
33851: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33852: LD_ADDR_VAR 0 3
33856: PUSH
33857: LD_VAR 0 2
33861: PPUSH
33862: LD_INT 81
33864: PUSH
33865: LD_VAR 0 1
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PPUSH
33874: CALL_OW 70
33878: ST_TO_ADDR
// end ;
33879: LD_VAR 0 3
33883: RET
// export function IsExtension ( b ) ; begin
33884: LD_INT 0
33886: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33887: LD_ADDR_VAR 0 2
33891: PUSH
33892: LD_VAR 0 1
33896: PUSH
33897: LD_INT 23
33899: PUSH
33900: LD_INT 20
33902: PUSH
33903: LD_INT 22
33905: PUSH
33906: LD_INT 17
33908: PUSH
33909: LD_INT 24
33911: PUSH
33912: LD_INT 21
33914: PUSH
33915: LD_INT 19
33917: PUSH
33918: LD_INT 16
33920: PUSH
33921: LD_INT 25
33923: PUSH
33924: LD_INT 18
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: IN
33939: ST_TO_ADDR
// end ;
33940: LD_VAR 0 2
33944: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33945: LD_INT 0
33947: PPUSH
33948: PPUSH
33949: PPUSH
// result := [ ] ;
33950: LD_ADDR_VAR 0 4
33954: PUSH
33955: EMPTY
33956: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33957: LD_ADDR_VAR 0 5
33961: PUSH
33962: LD_VAR 0 2
33966: PPUSH
33967: LD_INT 21
33969: PUSH
33970: LD_INT 3
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PPUSH
33977: CALL_OW 70
33981: ST_TO_ADDR
// if not tmp then
33982: LD_VAR 0 5
33986: NOT
33987: IFFALSE 33991
// exit ;
33989: GO 34055
// if checkLink then
33991: LD_VAR 0 3
33995: IFFALSE 34045
// begin for i in tmp do
33997: LD_ADDR_VAR 0 6
34001: PUSH
34002: LD_VAR 0 5
34006: PUSH
34007: FOR_IN
34008: IFFALSE 34043
// if GetBase ( i ) <> base then
34010: LD_VAR 0 6
34014: PPUSH
34015: CALL_OW 274
34019: PUSH
34020: LD_VAR 0 1
34024: NONEQUAL
34025: IFFALSE 34041
// ComLinkToBase ( base , i ) ;
34027: LD_VAR 0 1
34031: PPUSH
34032: LD_VAR 0 6
34036: PPUSH
34037: CALL_OW 169
34041: GO 34007
34043: POP
34044: POP
// end ; result := tmp ;
34045: LD_ADDR_VAR 0 4
34049: PUSH
34050: LD_VAR 0 5
34054: ST_TO_ADDR
// end ;
34055: LD_VAR 0 4
34059: RET
// export function ComComplete ( units , b ) ; var i ; begin
34060: LD_INT 0
34062: PPUSH
34063: PPUSH
// if not units then
34064: LD_VAR 0 1
34068: NOT
34069: IFFALSE 34073
// exit ;
34071: GO 34163
// for i in units do
34073: LD_ADDR_VAR 0 4
34077: PUSH
34078: LD_VAR 0 1
34082: PUSH
34083: FOR_IN
34084: IFFALSE 34161
// if BuildingStatus ( b ) = bs_build then
34086: LD_VAR 0 2
34090: PPUSH
34091: CALL_OW 461
34095: PUSH
34096: LD_INT 1
34098: EQUAL
34099: IFFALSE 34159
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34101: LD_VAR 0 4
34105: PPUSH
34106: LD_STRING h
34108: PUSH
34109: LD_VAR 0 2
34113: PPUSH
34114: CALL_OW 250
34118: PUSH
34119: LD_VAR 0 2
34123: PPUSH
34124: CALL_OW 251
34128: PUSH
34129: LD_VAR 0 2
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: PUSH
34152: EMPTY
34153: LIST
34154: PPUSH
34155: CALL_OW 446
34159: GO 34083
34161: POP
34162: POP
// end ;
34163: LD_VAR 0 3
34167: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34168: LD_INT 0
34170: PPUSH
34171: PPUSH
34172: PPUSH
34173: PPUSH
34174: PPUSH
34175: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34176: LD_VAR 0 1
34180: NOT
34181: PUSH
34182: LD_VAR 0 1
34186: PPUSH
34187: CALL_OW 263
34191: PUSH
34192: LD_INT 2
34194: NONEQUAL
34195: OR
34196: IFFALSE 34200
// exit ;
34198: GO 34516
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34200: LD_ADDR_VAR 0 6
34204: PUSH
34205: LD_INT 22
34207: PUSH
34208: LD_VAR 0 1
34212: PPUSH
34213: CALL_OW 255
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 30
34227: PUSH
34228: LD_INT 36
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 34
34237: PUSH
34238: LD_INT 31
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PPUSH
34254: CALL_OW 69
34258: ST_TO_ADDR
// if not tmp then
34259: LD_VAR 0 6
34263: NOT
34264: IFFALSE 34268
// exit ;
34266: GO 34516
// result := [ ] ;
34268: LD_ADDR_VAR 0 2
34272: PUSH
34273: EMPTY
34274: ST_TO_ADDR
// for i in tmp do
34275: LD_ADDR_VAR 0 3
34279: PUSH
34280: LD_VAR 0 6
34284: PUSH
34285: FOR_IN
34286: IFFALSE 34357
// begin t := UnitsInside ( i ) ;
34288: LD_ADDR_VAR 0 4
34292: PUSH
34293: LD_VAR 0 3
34297: PPUSH
34298: CALL_OW 313
34302: ST_TO_ADDR
// if t then
34303: LD_VAR 0 4
34307: IFFALSE 34355
// for j in t do
34309: LD_ADDR_VAR 0 7
34313: PUSH
34314: LD_VAR 0 4
34318: PUSH
34319: FOR_IN
34320: IFFALSE 34353
// result := Replace ( result , result + 1 , j ) ;
34322: LD_ADDR_VAR 0 2
34326: PUSH
34327: LD_VAR 0 2
34331: PPUSH
34332: LD_VAR 0 2
34336: PUSH
34337: LD_INT 1
34339: PLUS
34340: PPUSH
34341: LD_VAR 0 7
34345: PPUSH
34346: CALL_OW 1
34350: ST_TO_ADDR
34351: GO 34319
34353: POP
34354: POP
// end ;
34355: GO 34285
34357: POP
34358: POP
// if not result then
34359: LD_VAR 0 2
34363: NOT
34364: IFFALSE 34368
// exit ;
34366: GO 34516
// mech := result [ 1 ] ;
34368: LD_ADDR_VAR 0 5
34372: PUSH
34373: LD_VAR 0 2
34377: PUSH
34378: LD_INT 1
34380: ARRAY
34381: ST_TO_ADDR
// if result > 1 then
34382: LD_VAR 0 2
34386: PUSH
34387: LD_INT 1
34389: GREATER
34390: IFFALSE 34502
// begin for i = 2 to result do
34392: LD_ADDR_VAR 0 3
34396: PUSH
34397: DOUBLE
34398: LD_INT 2
34400: DEC
34401: ST_TO_ADDR
34402: LD_VAR 0 2
34406: PUSH
34407: FOR_TO
34408: IFFALSE 34500
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34410: LD_ADDR_VAR 0 4
34414: PUSH
34415: LD_VAR 0 2
34419: PUSH
34420: LD_VAR 0 3
34424: ARRAY
34425: PPUSH
34426: LD_INT 3
34428: PPUSH
34429: CALL_OW 259
34433: PUSH
34434: LD_VAR 0 2
34438: PUSH
34439: LD_VAR 0 3
34443: ARRAY
34444: PPUSH
34445: CALL_OW 432
34449: MINUS
34450: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34451: LD_VAR 0 4
34455: PUSH
34456: LD_VAR 0 5
34460: PPUSH
34461: LD_INT 3
34463: PPUSH
34464: CALL_OW 259
34468: PUSH
34469: LD_VAR 0 5
34473: PPUSH
34474: CALL_OW 432
34478: MINUS
34479: GREATEREQUAL
34480: IFFALSE 34498
// mech := result [ i ] ;
34482: LD_ADDR_VAR 0 5
34486: PUSH
34487: LD_VAR 0 2
34491: PUSH
34492: LD_VAR 0 3
34496: ARRAY
34497: ST_TO_ADDR
// end ;
34498: GO 34407
34500: POP
34501: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34502: LD_VAR 0 1
34506: PPUSH
34507: LD_VAR 0 5
34511: PPUSH
34512: CALL_OW 135
// end ;
34516: LD_VAR 0 2
34520: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34521: LD_INT 0
34523: PPUSH
34524: PPUSH
34525: PPUSH
34526: PPUSH
34527: PPUSH
34528: PPUSH
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
34534: PPUSH
34535: PPUSH
// result := [ ] ;
34536: LD_ADDR_VAR 0 7
34540: PUSH
34541: EMPTY
34542: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34543: LD_VAR 0 1
34547: PPUSH
34548: CALL_OW 266
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: IN
34563: NOT
34564: IFFALSE 34568
// exit ;
34566: GO 36202
// if name then
34568: LD_VAR 0 3
34572: IFFALSE 34588
// SetBName ( base_dep , name ) ;
34574: LD_VAR 0 1
34578: PPUSH
34579: LD_VAR 0 3
34583: PPUSH
34584: CALL_OW 500
// base := GetBase ( base_dep ) ;
34588: LD_ADDR_VAR 0 15
34592: PUSH
34593: LD_VAR 0 1
34597: PPUSH
34598: CALL_OW 274
34602: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34603: LD_ADDR_VAR 0 16
34607: PUSH
34608: LD_VAR 0 1
34612: PPUSH
34613: CALL_OW 255
34617: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34618: LD_ADDR_VAR 0 17
34622: PUSH
34623: LD_VAR 0 1
34627: PPUSH
34628: CALL_OW 248
34632: ST_TO_ADDR
// if sources then
34633: LD_VAR 0 5
34637: IFFALSE 34684
// for i = 1 to 3 do
34639: LD_ADDR_VAR 0 8
34643: PUSH
34644: DOUBLE
34645: LD_INT 1
34647: DEC
34648: ST_TO_ADDR
34649: LD_INT 3
34651: PUSH
34652: FOR_TO
34653: IFFALSE 34682
// AddResourceType ( base , i , sources [ i ] ) ;
34655: LD_VAR 0 15
34659: PPUSH
34660: LD_VAR 0 8
34664: PPUSH
34665: LD_VAR 0 5
34669: PUSH
34670: LD_VAR 0 8
34674: ARRAY
34675: PPUSH
34676: CALL_OW 276
34680: GO 34652
34682: POP
34683: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34684: LD_ADDR_VAR 0 18
34688: PUSH
34689: LD_VAR 0 15
34693: PPUSH
34694: LD_VAR 0 2
34698: PPUSH
34699: LD_INT 1
34701: PPUSH
34702: CALL 33945 0 3
34706: ST_TO_ADDR
// InitHc ;
34707: CALL_OW 19
// InitUc ;
34711: CALL_OW 18
// uc_side := side ;
34715: LD_ADDR_OWVAR 20
34719: PUSH
34720: LD_VAR 0 16
34724: ST_TO_ADDR
// uc_nation := nation ;
34725: LD_ADDR_OWVAR 21
34729: PUSH
34730: LD_VAR 0 17
34734: ST_TO_ADDR
// if buildings then
34735: LD_VAR 0 18
34739: IFFALSE 36061
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34741: LD_ADDR_VAR 0 19
34745: PUSH
34746: LD_VAR 0 18
34750: PPUSH
34751: LD_INT 2
34753: PUSH
34754: LD_INT 30
34756: PUSH
34757: LD_INT 29
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 30
34766: PUSH
34767: LD_INT 30
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: PPUSH
34779: CALL_OW 72
34783: ST_TO_ADDR
// if tmp then
34784: LD_VAR 0 19
34788: IFFALSE 34836
// for i in tmp do
34790: LD_ADDR_VAR 0 8
34794: PUSH
34795: LD_VAR 0 19
34799: PUSH
34800: FOR_IN
34801: IFFALSE 34834
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34803: LD_VAR 0 8
34807: PPUSH
34808: CALL_OW 250
34812: PPUSH
34813: LD_VAR 0 8
34817: PPUSH
34818: CALL_OW 251
34822: PPUSH
34823: LD_VAR 0 16
34827: PPUSH
34828: CALL_OW 441
34832: GO 34800
34834: POP
34835: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34836: LD_VAR 0 18
34840: PPUSH
34841: LD_INT 2
34843: PUSH
34844: LD_INT 30
34846: PUSH
34847: LD_INT 32
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 30
34856: PUSH
34857: LD_INT 33
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: LIST
34868: PPUSH
34869: CALL_OW 72
34873: IFFALSE 34961
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34875: LD_ADDR_VAR 0 8
34879: PUSH
34880: LD_VAR 0 18
34884: PPUSH
34885: LD_INT 2
34887: PUSH
34888: LD_INT 30
34890: PUSH
34891: LD_INT 32
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 30
34900: PUSH
34901: LD_INT 33
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: PPUSH
34913: CALL_OW 72
34917: PUSH
34918: FOR_IN
34919: IFFALSE 34959
// begin if not GetBWeapon ( i ) then
34921: LD_VAR 0 8
34925: PPUSH
34926: CALL_OW 269
34930: NOT
34931: IFFALSE 34957
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34933: LD_VAR 0 8
34937: PPUSH
34938: LD_VAR 0 8
34942: PPUSH
34943: LD_VAR 0 2
34947: PPUSH
34948: CALL 36207 0 2
34952: PPUSH
34953: CALL_OW 431
// end ;
34957: GO 34918
34959: POP
34960: POP
// end ; for i = 1 to personel do
34961: LD_ADDR_VAR 0 8
34965: PUSH
34966: DOUBLE
34967: LD_INT 1
34969: DEC
34970: ST_TO_ADDR
34971: LD_VAR 0 6
34975: PUSH
34976: FOR_TO
34977: IFFALSE 36041
// begin if i > 4 then
34979: LD_VAR 0 8
34983: PUSH
34984: LD_INT 4
34986: GREATER
34987: IFFALSE 34991
// break ;
34989: GO 36041
// case i of 1 :
34991: LD_VAR 0 8
34995: PUSH
34996: LD_INT 1
34998: DOUBLE
34999: EQUAL
35000: IFTRUE 35004
35002: GO 35084
35004: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35005: LD_ADDR_VAR 0 12
35009: PUSH
35010: LD_VAR 0 18
35014: PPUSH
35015: LD_INT 22
35017: PUSH
35018: LD_VAR 0 16
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 58
35029: PUSH
35030: EMPTY
35031: LIST
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 30
35038: PUSH
35039: LD_INT 32
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 30
35048: PUSH
35049: LD_INT 4
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 30
35058: PUSH
35059: LD_INT 5
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: PPUSH
35077: CALL_OW 72
35081: ST_TO_ADDR
35082: GO 35306
35084: LD_INT 2
35086: DOUBLE
35087: EQUAL
35088: IFTRUE 35092
35090: GO 35154
35092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35093: LD_ADDR_VAR 0 12
35097: PUSH
35098: LD_VAR 0 18
35102: PPUSH
35103: LD_INT 22
35105: PUSH
35106: LD_VAR 0 16
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: LD_INT 30
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 30
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: LIST
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PPUSH
35147: CALL_OW 72
35151: ST_TO_ADDR
35152: GO 35306
35154: LD_INT 3
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35162
35160: GO 35224
35162: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35163: LD_ADDR_VAR 0 12
35167: PUSH
35168: LD_VAR 0 18
35172: PPUSH
35173: LD_INT 22
35175: PUSH
35176: LD_VAR 0 16
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 2
35187: PUSH
35188: LD_INT 30
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 30
35200: PUSH
35201: LD_INT 3
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PPUSH
35217: CALL_OW 72
35221: ST_TO_ADDR
35222: GO 35306
35224: LD_INT 4
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35232
35230: GO 35305
35232: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35233: LD_ADDR_VAR 0 12
35237: PUSH
35238: LD_VAR 0 18
35242: PPUSH
35243: LD_INT 22
35245: PUSH
35246: LD_VAR 0 16
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: LD_INT 30
35260: PUSH
35261: LD_INT 6
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 30
35270: PUSH
35271: LD_INT 7
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 30
35280: PUSH
35281: LD_INT 8
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PPUSH
35298: CALL_OW 72
35302: ST_TO_ADDR
35303: GO 35306
35305: POP
// if i = 1 then
35306: LD_VAR 0 8
35310: PUSH
35311: LD_INT 1
35313: EQUAL
35314: IFFALSE 35425
// begin tmp := [ ] ;
35316: LD_ADDR_VAR 0 19
35320: PUSH
35321: EMPTY
35322: ST_TO_ADDR
// for j in f do
35323: LD_ADDR_VAR 0 9
35327: PUSH
35328: LD_VAR 0 12
35332: PUSH
35333: FOR_IN
35334: IFFALSE 35407
// if GetBType ( j ) = b_bunker then
35336: LD_VAR 0 9
35340: PPUSH
35341: CALL_OW 266
35345: PUSH
35346: LD_INT 32
35348: EQUAL
35349: IFFALSE 35376
// tmp := Insert ( tmp , 1 , j ) else
35351: LD_ADDR_VAR 0 19
35355: PUSH
35356: LD_VAR 0 19
35360: PPUSH
35361: LD_INT 1
35363: PPUSH
35364: LD_VAR 0 9
35368: PPUSH
35369: CALL_OW 2
35373: ST_TO_ADDR
35374: GO 35405
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35376: LD_ADDR_VAR 0 19
35380: PUSH
35381: LD_VAR 0 19
35385: PPUSH
35386: LD_VAR 0 19
35390: PUSH
35391: LD_INT 1
35393: PLUS
35394: PPUSH
35395: LD_VAR 0 9
35399: PPUSH
35400: CALL_OW 2
35404: ST_TO_ADDR
35405: GO 35333
35407: POP
35408: POP
// if tmp then
35409: LD_VAR 0 19
35413: IFFALSE 35425
// f := tmp ;
35415: LD_ADDR_VAR 0 12
35419: PUSH
35420: LD_VAR 0 19
35424: ST_TO_ADDR
// end ; x := personel [ i ] ;
35425: LD_ADDR_VAR 0 13
35429: PUSH
35430: LD_VAR 0 6
35434: PUSH
35435: LD_VAR 0 8
35439: ARRAY
35440: ST_TO_ADDR
// if x = - 1 then
35441: LD_VAR 0 13
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: EQUAL
35450: IFFALSE 35659
// begin for j in f do
35452: LD_ADDR_VAR 0 9
35456: PUSH
35457: LD_VAR 0 12
35461: PUSH
35462: FOR_IN
35463: IFFALSE 35655
// repeat InitHc ;
35465: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35469: LD_VAR 0 9
35473: PPUSH
35474: CALL_OW 266
35478: PUSH
35479: LD_INT 5
35481: EQUAL
35482: IFFALSE 35552
// begin if UnitsInside ( j ) < 3 then
35484: LD_VAR 0 9
35488: PPUSH
35489: CALL_OW 313
35493: PUSH
35494: LD_INT 3
35496: LESS
35497: IFFALSE 35533
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35499: LD_INT 0
35501: PPUSH
35502: LD_INT 5
35504: PUSH
35505: LD_INT 8
35507: PUSH
35508: LD_INT 9
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: PUSH
35516: LD_VAR 0 17
35520: ARRAY
35521: PPUSH
35522: LD_VAR 0 4
35526: PPUSH
35527: CALL_OW 380
35531: GO 35550
// PrepareHuman ( false , i , skill ) ;
35533: LD_INT 0
35535: PPUSH
35536: LD_VAR 0 8
35540: PPUSH
35541: LD_VAR 0 4
35545: PPUSH
35546: CALL_OW 380
// end else
35550: GO 35569
// PrepareHuman ( false , i , skill ) ;
35552: LD_INT 0
35554: PPUSH
35555: LD_VAR 0 8
35559: PPUSH
35560: LD_VAR 0 4
35564: PPUSH
35565: CALL_OW 380
// un := CreateHuman ;
35569: LD_ADDR_VAR 0 14
35573: PUSH
35574: CALL_OW 44
35578: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35579: LD_ADDR_VAR 0 7
35583: PUSH
35584: LD_VAR 0 7
35588: PPUSH
35589: LD_INT 1
35591: PPUSH
35592: LD_VAR 0 14
35596: PPUSH
35597: CALL_OW 2
35601: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35602: LD_VAR 0 14
35606: PPUSH
35607: LD_VAR 0 9
35611: PPUSH
35612: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35616: LD_VAR 0 9
35620: PPUSH
35621: CALL_OW 313
35625: PUSH
35626: LD_INT 6
35628: EQUAL
35629: PUSH
35630: LD_VAR 0 9
35634: PPUSH
35635: CALL_OW 266
35639: PUSH
35640: LD_INT 32
35642: PUSH
35643: LD_INT 31
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: IN
35650: OR
35651: IFFALSE 35465
35653: GO 35462
35655: POP
35656: POP
// end else
35657: GO 36039
// for j = 1 to x do
35659: LD_ADDR_VAR 0 9
35663: PUSH
35664: DOUBLE
35665: LD_INT 1
35667: DEC
35668: ST_TO_ADDR
35669: LD_VAR 0 13
35673: PUSH
35674: FOR_TO
35675: IFFALSE 36037
// begin InitHc ;
35677: CALL_OW 19
// if not f then
35681: LD_VAR 0 12
35685: NOT
35686: IFFALSE 35775
// begin PrepareHuman ( false , i , skill ) ;
35688: LD_INT 0
35690: PPUSH
35691: LD_VAR 0 8
35695: PPUSH
35696: LD_VAR 0 4
35700: PPUSH
35701: CALL_OW 380
// un := CreateHuman ;
35705: LD_ADDR_VAR 0 14
35709: PUSH
35710: CALL_OW 44
35714: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35715: LD_ADDR_VAR 0 7
35719: PUSH
35720: LD_VAR 0 7
35724: PPUSH
35725: LD_INT 1
35727: PPUSH
35728: LD_VAR 0 14
35732: PPUSH
35733: CALL_OW 2
35737: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35738: LD_VAR 0 14
35742: PPUSH
35743: LD_VAR 0 1
35747: PPUSH
35748: CALL_OW 250
35752: PPUSH
35753: LD_VAR 0 1
35757: PPUSH
35758: CALL_OW 251
35762: PPUSH
35763: LD_INT 10
35765: PPUSH
35766: LD_INT 0
35768: PPUSH
35769: CALL_OW 50
// continue ;
35773: GO 35674
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35775: LD_VAR 0 12
35779: PUSH
35780: LD_INT 1
35782: ARRAY
35783: PPUSH
35784: CALL_OW 313
35788: PUSH
35789: LD_VAR 0 12
35793: PUSH
35794: LD_INT 1
35796: ARRAY
35797: PPUSH
35798: CALL_OW 266
35802: PUSH
35803: LD_INT 32
35805: PUSH
35806: LD_INT 31
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: IN
35813: AND
35814: PUSH
35815: LD_VAR 0 12
35819: PUSH
35820: LD_INT 1
35822: ARRAY
35823: PPUSH
35824: CALL_OW 313
35828: PUSH
35829: LD_INT 6
35831: EQUAL
35832: OR
35833: IFFALSE 35853
// f := Delete ( f , 1 ) ;
35835: LD_ADDR_VAR 0 12
35839: PUSH
35840: LD_VAR 0 12
35844: PPUSH
35845: LD_INT 1
35847: PPUSH
35848: CALL_OW 3
35852: ST_TO_ADDR
// if not f then
35853: LD_VAR 0 12
35857: NOT
35858: IFFALSE 35876
// begin x := x + 2 ;
35860: LD_ADDR_VAR 0 13
35864: PUSH
35865: LD_VAR 0 13
35869: PUSH
35870: LD_INT 2
35872: PLUS
35873: ST_TO_ADDR
// continue ;
35874: GO 35674
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35876: LD_VAR 0 12
35880: PUSH
35881: LD_INT 1
35883: ARRAY
35884: PPUSH
35885: CALL_OW 266
35889: PUSH
35890: LD_INT 5
35892: EQUAL
35893: IFFALSE 35967
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35895: LD_VAR 0 12
35899: PUSH
35900: LD_INT 1
35902: ARRAY
35903: PPUSH
35904: CALL_OW 313
35908: PUSH
35909: LD_INT 3
35911: LESS
35912: IFFALSE 35948
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35914: LD_INT 0
35916: PPUSH
35917: LD_INT 5
35919: PUSH
35920: LD_INT 8
35922: PUSH
35923: LD_INT 9
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: PUSH
35931: LD_VAR 0 17
35935: ARRAY
35936: PPUSH
35937: LD_VAR 0 4
35941: PPUSH
35942: CALL_OW 380
35946: GO 35965
// PrepareHuman ( false , i , skill ) ;
35948: LD_INT 0
35950: PPUSH
35951: LD_VAR 0 8
35955: PPUSH
35956: LD_VAR 0 4
35960: PPUSH
35961: CALL_OW 380
// end else
35965: GO 35984
// PrepareHuman ( false , i , skill ) ;
35967: LD_INT 0
35969: PPUSH
35970: LD_VAR 0 8
35974: PPUSH
35975: LD_VAR 0 4
35979: PPUSH
35980: CALL_OW 380
// un := CreateHuman ;
35984: LD_ADDR_VAR 0 14
35988: PUSH
35989: CALL_OW 44
35993: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35994: LD_ADDR_VAR 0 7
35998: PUSH
35999: LD_VAR 0 7
36003: PPUSH
36004: LD_INT 1
36006: PPUSH
36007: LD_VAR 0 14
36011: PPUSH
36012: CALL_OW 2
36016: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36017: LD_VAR 0 14
36021: PPUSH
36022: LD_VAR 0 12
36026: PUSH
36027: LD_INT 1
36029: ARRAY
36030: PPUSH
36031: CALL_OW 52
// end ;
36035: GO 35674
36037: POP
36038: POP
// end ;
36039: GO 34976
36041: POP
36042: POP
// result := result ^ buildings ;
36043: LD_ADDR_VAR 0 7
36047: PUSH
36048: LD_VAR 0 7
36052: PUSH
36053: LD_VAR 0 18
36057: ADD
36058: ST_TO_ADDR
// end else
36059: GO 36202
// begin for i = 1 to personel do
36061: LD_ADDR_VAR 0 8
36065: PUSH
36066: DOUBLE
36067: LD_INT 1
36069: DEC
36070: ST_TO_ADDR
36071: LD_VAR 0 6
36075: PUSH
36076: FOR_TO
36077: IFFALSE 36200
// begin if i > 4 then
36079: LD_VAR 0 8
36083: PUSH
36084: LD_INT 4
36086: GREATER
36087: IFFALSE 36091
// break ;
36089: GO 36200
// x := personel [ i ] ;
36091: LD_ADDR_VAR 0 13
36095: PUSH
36096: LD_VAR 0 6
36100: PUSH
36101: LD_VAR 0 8
36105: ARRAY
36106: ST_TO_ADDR
// if x = - 1 then
36107: LD_VAR 0 13
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: EQUAL
36116: IFFALSE 36120
// continue ;
36118: GO 36076
// PrepareHuman ( false , i , skill ) ;
36120: LD_INT 0
36122: PPUSH
36123: LD_VAR 0 8
36127: PPUSH
36128: LD_VAR 0 4
36132: PPUSH
36133: CALL_OW 380
// un := CreateHuman ;
36137: LD_ADDR_VAR 0 14
36141: PUSH
36142: CALL_OW 44
36146: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36147: LD_VAR 0 14
36151: PPUSH
36152: LD_VAR 0 1
36156: PPUSH
36157: CALL_OW 250
36161: PPUSH
36162: LD_VAR 0 1
36166: PPUSH
36167: CALL_OW 251
36171: PPUSH
36172: LD_INT 10
36174: PPUSH
36175: LD_INT 0
36177: PPUSH
36178: CALL_OW 50
// result := result ^ un ;
36182: LD_ADDR_VAR 0 7
36186: PUSH
36187: LD_VAR 0 7
36191: PUSH
36192: LD_VAR 0 14
36196: ADD
36197: ST_TO_ADDR
// end ;
36198: GO 36076
36200: POP
36201: POP
// end ; end ;
36202: LD_VAR 0 7
36206: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36207: LD_INT 0
36209: PPUSH
36210: PPUSH
36211: PPUSH
36212: PPUSH
36213: PPUSH
36214: PPUSH
36215: PPUSH
36216: PPUSH
36217: PPUSH
36218: PPUSH
36219: PPUSH
36220: PPUSH
36221: PPUSH
36222: PPUSH
36223: PPUSH
36224: PPUSH
// result := false ;
36225: LD_ADDR_VAR 0 3
36229: PUSH
36230: LD_INT 0
36232: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36233: LD_VAR 0 1
36237: NOT
36238: PUSH
36239: LD_VAR 0 1
36243: PPUSH
36244: CALL_OW 266
36248: PUSH
36249: LD_INT 32
36251: PUSH
36252: LD_INT 33
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: IN
36259: NOT
36260: OR
36261: IFFALSE 36265
// exit ;
36263: GO 37374
// nat := GetNation ( tower ) ;
36265: LD_ADDR_VAR 0 12
36269: PUSH
36270: LD_VAR 0 1
36274: PPUSH
36275: CALL_OW 248
36279: ST_TO_ADDR
// side := GetSide ( tower ) ;
36280: LD_ADDR_VAR 0 16
36284: PUSH
36285: LD_VAR 0 1
36289: PPUSH
36290: CALL_OW 255
36294: ST_TO_ADDR
// x := GetX ( tower ) ;
36295: LD_ADDR_VAR 0 10
36299: PUSH
36300: LD_VAR 0 1
36304: PPUSH
36305: CALL_OW 250
36309: ST_TO_ADDR
// y := GetY ( tower ) ;
36310: LD_ADDR_VAR 0 11
36314: PUSH
36315: LD_VAR 0 1
36319: PPUSH
36320: CALL_OW 251
36324: ST_TO_ADDR
// if not x or not y then
36325: LD_VAR 0 10
36329: NOT
36330: PUSH
36331: LD_VAR 0 11
36335: NOT
36336: OR
36337: IFFALSE 36341
// exit ;
36339: GO 37374
// weapon := 0 ;
36341: LD_ADDR_VAR 0 18
36345: PUSH
36346: LD_INT 0
36348: ST_TO_ADDR
// fac_list := [ ] ;
36349: LD_ADDR_VAR 0 17
36353: PUSH
36354: EMPTY
36355: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36356: LD_ADDR_VAR 0 6
36360: PUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 274
36370: PPUSH
36371: LD_VAR 0 2
36375: PPUSH
36376: LD_INT 0
36378: PPUSH
36379: CALL 33945 0 3
36383: PPUSH
36384: LD_INT 30
36386: PUSH
36387: LD_INT 3
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PPUSH
36394: CALL_OW 72
36398: ST_TO_ADDR
// if not factories then
36399: LD_VAR 0 6
36403: NOT
36404: IFFALSE 36408
// exit ;
36406: GO 37374
// for i in factories do
36408: LD_ADDR_VAR 0 8
36412: PUSH
36413: LD_VAR 0 6
36417: PUSH
36418: FOR_IN
36419: IFFALSE 36444
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36421: LD_ADDR_VAR 0 17
36425: PUSH
36426: LD_VAR 0 17
36430: PUSH
36431: LD_VAR 0 8
36435: PPUSH
36436: CALL_OW 478
36440: UNION
36441: ST_TO_ADDR
36442: GO 36418
36444: POP
36445: POP
// if not fac_list then
36446: LD_VAR 0 17
36450: NOT
36451: IFFALSE 36455
// exit ;
36453: GO 37374
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36455: LD_ADDR_VAR 0 5
36459: PUSH
36460: LD_INT 4
36462: PUSH
36463: LD_INT 5
36465: PUSH
36466: LD_INT 9
36468: PUSH
36469: LD_INT 10
36471: PUSH
36472: LD_INT 6
36474: PUSH
36475: LD_INT 7
36477: PUSH
36478: LD_INT 11
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 27
36492: PUSH
36493: LD_INT 28
36495: PUSH
36496: LD_INT 26
36498: PUSH
36499: LD_INT 30
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 43
36510: PUSH
36511: LD_INT 44
36513: PUSH
36514: LD_INT 46
36516: PUSH
36517: LD_INT 45
36519: PUSH
36520: LD_INT 47
36522: PUSH
36523: LD_INT 49
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: PUSH
36539: LD_VAR 0 12
36543: ARRAY
36544: ST_TO_ADDR
// list := list isect fac_list ;
36545: LD_ADDR_VAR 0 5
36549: PUSH
36550: LD_VAR 0 5
36554: PUSH
36555: LD_VAR 0 17
36559: ISECT
36560: ST_TO_ADDR
// if not list then
36561: LD_VAR 0 5
36565: NOT
36566: IFFALSE 36570
// exit ;
36568: GO 37374
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36570: LD_VAR 0 12
36574: PUSH
36575: LD_INT 3
36577: EQUAL
36578: PUSH
36579: LD_INT 49
36581: PUSH
36582: LD_VAR 0 5
36586: IN
36587: AND
36588: PUSH
36589: LD_INT 31
36591: PPUSH
36592: LD_VAR 0 16
36596: PPUSH
36597: CALL_OW 321
36601: PUSH
36602: LD_INT 2
36604: EQUAL
36605: AND
36606: IFFALSE 36666
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36608: LD_INT 22
36610: PUSH
36611: LD_VAR 0 16
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 35
36622: PUSH
36623: LD_INT 49
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 91
36632: PUSH
36633: LD_VAR 0 1
36637: PUSH
36638: LD_INT 10
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: LIST
36650: PPUSH
36651: CALL_OW 69
36655: NOT
36656: IFFALSE 36666
// weapon := ru_time_lapser ;
36658: LD_ADDR_VAR 0 18
36662: PUSH
36663: LD_INT 49
36665: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36666: LD_VAR 0 12
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: IN
36681: PUSH
36682: LD_INT 11
36684: PUSH
36685: LD_VAR 0 5
36689: IN
36690: PUSH
36691: LD_INT 30
36693: PUSH
36694: LD_VAR 0 5
36698: IN
36699: OR
36700: AND
36701: PUSH
36702: LD_INT 6
36704: PPUSH
36705: LD_VAR 0 16
36709: PPUSH
36710: CALL_OW 321
36714: PUSH
36715: LD_INT 2
36717: EQUAL
36718: AND
36719: IFFALSE 36884
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36721: LD_INT 22
36723: PUSH
36724: LD_VAR 0 16
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 2
36735: PUSH
36736: LD_INT 35
36738: PUSH
36739: LD_INT 11
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 35
36748: PUSH
36749: LD_INT 30
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 91
36763: PUSH
36764: LD_VAR 0 1
36768: PUSH
36769: LD_INT 18
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: PPUSH
36782: CALL_OW 69
36786: NOT
36787: PUSH
36788: LD_INT 22
36790: PUSH
36791: LD_VAR 0 16
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: LD_INT 30
36805: PUSH
36806: LD_INT 32
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 30
36815: PUSH
36816: LD_INT 33
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 91
36830: PUSH
36831: LD_VAR 0 1
36835: PUSH
36836: LD_INT 12
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: LIST
36848: PUSH
36849: EMPTY
36850: LIST
36851: PPUSH
36852: CALL_OW 69
36856: PUSH
36857: LD_INT 2
36859: GREATER
36860: AND
36861: IFFALSE 36884
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36863: LD_ADDR_VAR 0 18
36867: PUSH
36868: LD_INT 11
36870: PUSH
36871: LD_INT 30
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_VAR 0 12
36882: ARRAY
36883: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36884: LD_VAR 0 18
36888: NOT
36889: PUSH
36890: LD_INT 40
36892: PPUSH
36893: LD_VAR 0 16
36897: PPUSH
36898: CALL_OW 321
36902: PUSH
36903: LD_INT 2
36905: EQUAL
36906: AND
36907: PUSH
36908: LD_INT 7
36910: PUSH
36911: LD_VAR 0 5
36915: IN
36916: PUSH
36917: LD_INT 28
36919: PUSH
36920: LD_VAR 0 5
36924: IN
36925: OR
36926: PUSH
36927: LD_INT 45
36929: PUSH
36930: LD_VAR 0 5
36934: IN
36935: OR
36936: AND
36937: IFFALSE 37191
// begin hex := GetHexInfo ( x , y ) ;
36939: LD_ADDR_VAR 0 4
36943: PUSH
36944: LD_VAR 0 10
36948: PPUSH
36949: LD_VAR 0 11
36953: PPUSH
36954: CALL_OW 546
36958: ST_TO_ADDR
// if hex [ 1 ] then
36959: LD_VAR 0 4
36963: PUSH
36964: LD_INT 1
36966: ARRAY
36967: IFFALSE 36971
// exit ;
36969: GO 37374
// height := hex [ 2 ] ;
36971: LD_ADDR_VAR 0 15
36975: PUSH
36976: LD_VAR 0 4
36980: PUSH
36981: LD_INT 2
36983: ARRAY
36984: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36985: LD_ADDR_VAR 0 14
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: LD_INT 3
36998: PUSH
36999: LD_INT 5
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: ST_TO_ADDR
// for i in tmp do
37008: LD_ADDR_VAR 0 8
37012: PUSH
37013: LD_VAR 0 14
37017: PUSH
37018: FOR_IN
37019: IFFALSE 37189
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37021: LD_ADDR_VAR 0 9
37025: PUSH
37026: LD_VAR 0 10
37030: PPUSH
37031: LD_VAR 0 8
37035: PPUSH
37036: LD_INT 5
37038: PPUSH
37039: CALL_OW 272
37043: PUSH
37044: LD_VAR 0 11
37048: PPUSH
37049: LD_VAR 0 8
37053: PPUSH
37054: LD_INT 5
37056: PPUSH
37057: CALL_OW 273
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37066: LD_VAR 0 9
37070: PUSH
37071: LD_INT 1
37073: ARRAY
37074: PPUSH
37075: LD_VAR 0 9
37079: PUSH
37080: LD_INT 2
37082: ARRAY
37083: PPUSH
37084: CALL_OW 488
37088: IFFALSE 37187
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37090: LD_ADDR_VAR 0 4
37094: PUSH
37095: LD_VAR 0 9
37099: PUSH
37100: LD_INT 1
37102: ARRAY
37103: PPUSH
37104: LD_VAR 0 9
37108: PUSH
37109: LD_INT 2
37111: ARRAY
37112: PPUSH
37113: CALL_OW 546
37117: ST_TO_ADDR
// if hex [ 1 ] then
37118: LD_VAR 0 4
37122: PUSH
37123: LD_INT 1
37125: ARRAY
37126: IFFALSE 37130
// continue ;
37128: GO 37018
// h := hex [ 2 ] ;
37130: LD_ADDR_VAR 0 13
37134: PUSH
37135: LD_VAR 0 4
37139: PUSH
37140: LD_INT 2
37142: ARRAY
37143: ST_TO_ADDR
// if h + 7 < height then
37144: LD_VAR 0 13
37148: PUSH
37149: LD_INT 7
37151: PLUS
37152: PUSH
37153: LD_VAR 0 15
37157: LESS
37158: IFFALSE 37187
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37160: LD_ADDR_VAR 0 18
37164: PUSH
37165: LD_INT 7
37167: PUSH
37168: LD_INT 28
37170: PUSH
37171: LD_INT 45
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: PUSH
37179: LD_VAR 0 12
37183: ARRAY
37184: ST_TO_ADDR
// break ;
37185: GO 37189
// end ; end ; end ;
37187: GO 37018
37189: POP
37190: POP
// end ; if not weapon then
37191: LD_VAR 0 18
37195: NOT
37196: IFFALSE 37256
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37198: LD_ADDR_VAR 0 5
37202: PUSH
37203: LD_VAR 0 5
37207: PUSH
37208: LD_INT 11
37210: PUSH
37211: LD_INT 30
37213: PUSH
37214: LD_INT 49
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: DIFF
37222: ST_TO_ADDR
// if not list then
37223: LD_VAR 0 5
37227: NOT
37228: IFFALSE 37232
// exit ;
37230: GO 37374
// weapon := list [ rand ( 1 , list ) ] ;
37232: LD_ADDR_VAR 0 18
37236: PUSH
37237: LD_VAR 0 5
37241: PUSH
37242: LD_INT 1
37244: PPUSH
37245: LD_VAR 0 5
37249: PPUSH
37250: CALL_OW 12
37254: ARRAY
37255: ST_TO_ADDR
// end ; if weapon then
37256: LD_VAR 0 18
37260: IFFALSE 37374
// begin tmp := CostOfWeapon ( weapon ) ;
37262: LD_ADDR_VAR 0 14
37266: PUSH
37267: LD_VAR 0 18
37271: PPUSH
37272: CALL_OW 451
37276: ST_TO_ADDR
// j := GetBase ( tower ) ;
37277: LD_ADDR_VAR 0 9
37281: PUSH
37282: LD_VAR 0 1
37286: PPUSH
37287: CALL_OW 274
37291: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37292: LD_VAR 0 9
37296: PPUSH
37297: LD_INT 1
37299: PPUSH
37300: CALL_OW 275
37304: PUSH
37305: LD_VAR 0 14
37309: PUSH
37310: LD_INT 1
37312: ARRAY
37313: GREATEREQUAL
37314: PUSH
37315: LD_VAR 0 9
37319: PPUSH
37320: LD_INT 2
37322: PPUSH
37323: CALL_OW 275
37327: PUSH
37328: LD_VAR 0 14
37332: PUSH
37333: LD_INT 2
37335: ARRAY
37336: GREATEREQUAL
37337: AND
37338: PUSH
37339: LD_VAR 0 9
37343: PPUSH
37344: LD_INT 3
37346: PPUSH
37347: CALL_OW 275
37351: PUSH
37352: LD_VAR 0 14
37356: PUSH
37357: LD_INT 3
37359: ARRAY
37360: GREATEREQUAL
37361: AND
37362: IFFALSE 37374
// result := weapon ;
37364: LD_ADDR_VAR 0 3
37368: PUSH
37369: LD_VAR 0 18
37373: ST_TO_ADDR
// end ; end ;
37374: LD_VAR 0 3
37378: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37379: LD_INT 0
37381: PPUSH
37382: PPUSH
// result := true ;
37383: LD_ADDR_VAR 0 3
37387: PUSH
37388: LD_INT 1
37390: ST_TO_ADDR
// if array1 = array2 then
37391: LD_VAR 0 1
37395: PUSH
37396: LD_VAR 0 2
37400: EQUAL
37401: IFFALSE 37461
// begin for i = 1 to array1 do
37403: LD_ADDR_VAR 0 4
37407: PUSH
37408: DOUBLE
37409: LD_INT 1
37411: DEC
37412: ST_TO_ADDR
37413: LD_VAR 0 1
37417: PUSH
37418: FOR_TO
37419: IFFALSE 37457
// if array1 [ i ] <> array2 [ i ] then
37421: LD_VAR 0 1
37425: PUSH
37426: LD_VAR 0 4
37430: ARRAY
37431: PUSH
37432: LD_VAR 0 2
37436: PUSH
37437: LD_VAR 0 4
37441: ARRAY
37442: NONEQUAL
37443: IFFALSE 37455
// begin result := false ;
37445: LD_ADDR_VAR 0 3
37449: PUSH
37450: LD_INT 0
37452: ST_TO_ADDR
// break ;
37453: GO 37457
// end ;
37455: GO 37418
37457: POP
37458: POP
// end else
37459: GO 37469
// result := false ;
37461: LD_ADDR_VAR 0 3
37465: PUSH
37466: LD_INT 0
37468: ST_TO_ADDR
// end ;
37469: LD_VAR 0 3
37473: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37474: LD_INT 0
37476: PPUSH
37477: PPUSH
// if not array1 or not array2 then
37478: LD_VAR 0 1
37482: NOT
37483: PUSH
37484: LD_VAR 0 2
37488: NOT
37489: OR
37490: IFFALSE 37494
// exit ;
37492: GO 37558
// result := true ;
37494: LD_ADDR_VAR 0 3
37498: PUSH
37499: LD_INT 1
37501: ST_TO_ADDR
// for i = 1 to array1 do
37502: LD_ADDR_VAR 0 4
37506: PUSH
37507: DOUBLE
37508: LD_INT 1
37510: DEC
37511: ST_TO_ADDR
37512: LD_VAR 0 1
37516: PUSH
37517: FOR_TO
37518: IFFALSE 37556
// if array1 [ i ] <> array2 [ i ] then
37520: LD_VAR 0 1
37524: PUSH
37525: LD_VAR 0 4
37529: ARRAY
37530: PUSH
37531: LD_VAR 0 2
37535: PUSH
37536: LD_VAR 0 4
37540: ARRAY
37541: NONEQUAL
37542: IFFALSE 37554
// begin result := false ;
37544: LD_ADDR_VAR 0 3
37548: PUSH
37549: LD_INT 0
37551: ST_TO_ADDR
// break ;
37552: GO 37556
// end ;
37554: GO 37517
37556: POP
37557: POP
// end ;
37558: LD_VAR 0 3
37562: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37563: LD_INT 0
37565: PPUSH
37566: PPUSH
37567: PPUSH
// pom := GetBase ( fac ) ;
37568: LD_ADDR_VAR 0 5
37572: PUSH
37573: LD_VAR 0 1
37577: PPUSH
37578: CALL_OW 274
37582: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37583: LD_ADDR_VAR 0 4
37587: PUSH
37588: LD_VAR 0 2
37592: PUSH
37593: LD_INT 1
37595: ARRAY
37596: PPUSH
37597: LD_VAR 0 2
37601: PUSH
37602: LD_INT 2
37604: ARRAY
37605: PPUSH
37606: LD_VAR 0 2
37610: PUSH
37611: LD_INT 3
37613: ARRAY
37614: PPUSH
37615: LD_VAR 0 2
37619: PUSH
37620: LD_INT 4
37622: ARRAY
37623: PPUSH
37624: CALL_OW 449
37628: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37629: LD_ADDR_VAR 0 3
37633: PUSH
37634: LD_VAR 0 5
37638: PPUSH
37639: LD_INT 1
37641: PPUSH
37642: CALL_OW 275
37646: PUSH
37647: LD_VAR 0 4
37651: PUSH
37652: LD_INT 1
37654: ARRAY
37655: GREATEREQUAL
37656: PUSH
37657: LD_VAR 0 5
37661: PPUSH
37662: LD_INT 2
37664: PPUSH
37665: CALL_OW 275
37669: PUSH
37670: LD_VAR 0 4
37674: PUSH
37675: LD_INT 2
37677: ARRAY
37678: GREATEREQUAL
37679: AND
37680: PUSH
37681: LD_VAR 0 5
37685: PPUSH
37686: LD_INT 3
37688: PPUSH
37689: CALL_OW 275
37693: PUSH
37694: LD_VAR 0 4
37698: PUSH
37699: LD_INT 3
37701: ARRAY
37702: GREATEREQUAL
37703: AND
37704: ST_TO_ADDR
// end ;
37705: LD_VAR 0 3
37709: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37710: LD_INT 0
37712: PPUSH
37713: PPUSH
37714: PPUSH
37715: PPUSH
// pom := GetBase ( building ) ;
37716: LD_ADDR_VAR 0 3
37720: PUSH
37721: LD_VAR 0 1
37725: PPUSH
37726: CALL_OW 274
37730: ST_TO_ADDR
// if not pom then
37731: LD_VAR 0 3
37735: NOT
37736: IFFALSE 37740
// exit ;
37738: GO 37910
// btype := GetBType ( building ) ;
37740: LD_ADDR_VAR 0 5
37744: PUSH
37745: LD_VAR 0 1
37749: PPUSH
37750: CALL_OW 266
37754: ST_TO_ADDR
// if btype = b_armoury then
37755: LD_VAR 0 5
37759: PUSH
37760: LD_INT 4
37762: EQUAL
37763: IFFALSE 37773
// btype := b_barracks ;
37765: LD_ADDR_VAR 0 5
37769: PUSH
37770: LD_INT 5
37772: ST_TO_ADDR
// if btype = b_depot then
37773: LD_VAR 0 5
37777: PUSH
37778: LD_INT 0
37780: EQUAL
37781: IFFALSE 37791
// btype := b_warehouse ;
37783: LD_ADDR_VAR 0 5
37787: PUSH
37788: LD_INT 1
37790: ST_TO_ADDR
// if btype = b_workshop then
37791: LD_VAR 0 5
37795: PUSH
37796: LD_INT 2
37798: EQUAL
37799: IFFALSE 37809
// btype := b_factory ;
37801: LD_ADDR_VAR 0 5
37805: PUSH
37806: LD_INT 3
37808: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37809: LD_ADDR_VAR 0 4
37813: PUSH
37814: LD_VAR 0 5
37818: PPUSH
37819: LD_VAR 0 1
37823: PPUSH
37824: CALL_OW 248
37828: PPUSH
37829: CALL_OW 450
37833: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37834: LD_ADDR_VAR 0 2
37838: PUSH
37839: LD_VAR 0 3
37843: PPUSH
37844: LD_INT 1
37846: PPUSH
37847: CALL_OW 275
37851: PUSH
37852: LD_VAR 0 4
37856: PUSH
37857: LD_INT 1
37859: ARRAY
37860: GREATEREQUAL
37861: PUSH
37862: LD_VAR 0 3
37866: PPUSH
37867: LD_INT 2
37869: PPUSH
37870: CALL_OW 275
37874: PUSH
37875: LD_VAR 0 4
37879: PUSH
37880: LD_INT 2
37882: ARRAY
37883: GREATEREQUAL
37884: AND
37885: PUSH
37886: LD_VAR 0 3
37890: PPUSH
37891: LD_INT 3
37893: PPUSH
37894: CALL_OW 275
37898: PUSH
37899: LD_VAR 0 4
37903: PUSH
37904: LD_INT 3
37906: ARRAY
37907: GREATEREQUAL
37908: AND
37909: ST_TO_ADDR
// end ;
37910: LD_VAR 0 2
37914: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37915: LD_INT 0
37917: PPUSH
37918: PPUSH
37919: PPUSH
// pom := GetBase ( building ) ;
37920: LD_ADDR_VAR 0 4
37924: PUSH
37925: LD_VAR 0 1
37929: PPUSH
37930: CALL_OW 274
37934: ST_TO_ADDR
// if not pom then
37935: LD_VAR 0 4
37939: NOT
37940: IFFALSE 37944
// exit ;
37942: GO 38045
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37944: LD_ADDR_VAR 0 5
37948: PUSH
37949: LD_VAR 0 2
37953: PPUSH
37954: LD_VAR 0 1
37958: PPUSH
37959: CALL_OW 248
37963: PPUSH
37964: CALL_OW 450
37968: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37969: LD_ADDR_VAR 0 3
37973: PUSH
37974: LD_VAR 0 4
37978: PPUSH
37979: LD_INT 1
37981: PPUSH
37982: CALL_OW 275
37986: PUSH
37987: LD_VAR 0 5
37991: PUSH
37992: LD_INT 1
37994: ARRAY
37995: GREATEREQUAL
37996: PUSH
37997: LD_VAR 0 4
38001: PPUSH
38002: LD_INT 2
38004: PPUSH
38005: CALL_OW 275
38009: PUSH
38010: LD_VAR 0 5
38014: PUSH
38015: LD_INT 2
38017: ARRAY
38018: GREATEREQUAL
38019: AND
38020: PUSH
38021: LD_VAR 0 4
38025: PPUSH
38026: LD_INT 3
38028: PPUSH
38029: CALL_OW 275
38033: PUSH
38034: LD_VAR 0 5
38038: PUSH
38039: LD_INT 3
38041: ARRAY
38042: GREATEREQUAL
38043: AND
38044: ST_TO_ADDR
// end ;
38045: LD_VAR 0 3
38049: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38050: LD_INT 0
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
// result := false ;
38063: LD_ADDR_VAR 0 8
38067: PUSH
38068: LD_INT 0
38070: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38071: LD_VAR 0 5
38075: NOT
38076: PUSH
38077: LD_VAR 0 1
38081: NOT
38082: OR
38083: PUSH
38084: LD_VAR 0 2
38088: NOT
38089: OR
38090: PUSH
38091: LD_VAR 0 3
38095: NOT
38096: OR
38097: IFFALSE 38101
// exit ;
38099: GO 38915
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38101: LD_ADDR_VAR 0 14
38105: PUSH
38106: LD_VAR 0 1
38110: PPUSH
38111: LD_VAR 0 2
38115: PPUSH
38116: LD_VAR 0 3
38120: PPUSH
38121: LD_VAR 0 4
38125: PPUSH
38126: LD_VAR 0 5
38130: PUSH
38131: LD_INT 1
38133: ARRAY
38134: PPUSH
38135: CALL_OW 248
38139: PPUSH
38140: LD_INT 0
38142: PPUSH
38143: CALL 40152 0 6
38147: ST_TO_ADDR
// if not hexes then
38148: LD_VAR 0 14
38152: NOT
38153: IFFALSE 38157
// exit ;
38155: GO 38915
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38157: LD_ADDR_VAR 0 17
38161: PUSH
38162: LD_VAR 0 5
38166: PPUSH
38167: LD_INT 22
38169: PUSH
38170: LD_VAR 0 13
38174: PPUSH
38175: CALL_OW 255
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: LD_INT 30
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 30
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PPUSH
38216: CALL_OW 72
38220: ST_TO_ADDR
// for i = 1 to hexes do
38221: LD_ADDR_VAR 0 9
38225: PUSH
38226: DOUBLE
38227: LD_INT 1
38229: DEC
38230: ST_TO_ADDR
38231: LD_VAR 0 14
38235: PUSH
38236: FOR_TO
38237: IFFALSE 38913
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38239: LD_ADDR_VAR 0 13
38243: PUSH
38244: LD_VAR 0 14
38248: PUSH
38249: LD_VAR 0 9
38253: ARRAY
38254: PUSH
38255: LD_INT 1
38257: ARRAY
38258: PPUSH
38259: LD_VAR 0 14
38263: PUSH
38264: LD_VAR 0 9
38268: ARRAY
38269: PUSH
38270: LD_INT 2
38272: ARRAY
38273: PPUSH
38274: CALL_OW 428
38278: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38279: LD_VAR 0 14
38283: PUSH
38284: LD_VAR 0 9
38288: ARRAY
38289: PUSH
38290: LD_INT 1
38292: ARRAY
38293: PPUSH
38294: LD_VAR 0 14
38298: PUSH
38299: LD_VAR 0 9
38303: ARRAY
38304: PUSH
38305: LD_INT 2
38307: ARRAY
38308: PPUSH
38309: CALL_OW 351
38313: PUSH
38314: LD_VAR 0 14
38318: PUSH
38319: LD_VAR 0 9
38323: ARRAY
38324: PUSH
38325: LD_INT 1
38327: ARRAY
38328: PPUSH
38329: LD_VAR 0 14
38333: PUSH
38334: LD_VAR 0 9
38338: ARRAY
38339: PUSH
38340: LD_INT 2
38342: ARRAY
38343: PPUSH
38344: CALL_OW 488
38348: NOT
38349: OR
38350: PUSH
38351: LD_VAR 0 13
38355: PPUSH
38356: CALL_OW 247
38360: PUSH
38361: LD_INT 3
38363: EQUAL
38364: OR
38365: IFFALSE 38371
// exit ;
38367: POP
38368: POP
38369: GO 38915
// if not tmp then
38371: LD_VAR 0 13
38375: NOT
38376: IFFALSE 38380
// continue ;
38378: GO 38236
// result := true ;
38380: LD_ADDR_VAR 0 8
38384: PUSH
38385: LD_INT 1
38387: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38388: LD_VAR 0 6
38392: PUSH
38393: LD_VAR 0 13
38397: PPUSH
38398: CALL_OW 247
38402: PUSH
38403: LD_INT 2
38405: EQUAL
38406: AND
38407: PUSH
38408: LD_VAR 0 13
38412: PPUSH
38413: CALL_OW 263
38417: PUSH
38418: LD_INT 1
38420: EQUAL
38421: AND
38422: IFFALSE 38586
// begin if IsDrivenBy ( tmp ) then
38424: LD_VAR 0 13
38428: PPUSH
38429: CALL_OW 311
38433: IFFALSE 38437
// continue ;
38435: GO 38236
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38437: LD_VAR 0 6
38441: PPUSH
38442: LD_INT 3
38444: PUSH
38445: LD_INT 60
38447: PUSH
38448: EMPTY
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 3
38457: PUSH
38458: LD_INT 55
38460: PUSH
38461: EMPTY
38462: LIST
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PPUSH
38472: CALL_OW 72
38476: IFFALSE 38584
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38478: LD_ADDR_VAR 0 18
38482: PUSH
38483: LD_VAR 0 6
38487: PPUSH
38488: LD_INT 3
38490: PUSH
38491: LD_INT 60
38493: PUSH
38494: EMPTY
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 3
38503: PUSH
38504: LD_INT 55
38506: PUSH
38507: EMPTY
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PPUSH
38518: CALL_OW 72
38522: PUSH
38523: LD_INT 1
38525: ARRAY
38526: ST_TO_ADDR
// if IsInUnit ( driver ) then
38527: LD_VAR 0 18
38531: PPUSH
38532: CALL_OW 310
38536: IFFALSE 38547
// ComExit ( driver ) ;
38538: LD_VAR 0 18
38542: PPUSH
38543: CALL 63280 0 1
// AddComEnterUnit ( driver , tmp ) ;
38547: LD_VAR 0 18
38551: PPUSH
38552: LD_VAR 0 13
38556: PPUSH
38557: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38561: LD_VAR 0 18
38565: PPUSH
38566: LD_VAR 0 7
38570: PPUSH
38571: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38575: LD_VAR 0 18
38579: PPUSH
38580: CALL_OW 181
// end ; continue ;
38584: GO 38236
// end ; if not cleaners or not tmp in cleaners then
38586: LD_VAR 0 6
38590: NOT
38591: PUSH
38592: LD_VAR 0 13
38596: PUSH
38597: LD_VAR 0 6
38601: IN
38602: NOT
38603: OR
38604: IFFALSE 38911
// begin if dep then
38606: LD_VAR 0 17
38610: IFFALSE 38746
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38612: LD_ADDR_VAR 0 16
38616: PUSH
38617: LD_VAR 0 17
38621: PUSH
38622: LD_INT 1
38624: ARRAY
38625: PPUSH
38626: CALL_OW 250
38630: PPUSH
38631: LD_VAR 0 17
38635: PUSH
38636: LD_INT 1
38638: ARRAY
38639: PPUSH
38640: CALL_OW 254
38644: PPUSH
38645: LD_INT 5
38647: PPUSH
38648: CALL_OW 272
38652: PUSH
38653: LD_VAR 0 17
38657: PUSH
38658: LD_INT 1
38660: ARRAY
38661: PPUSH
38662: CALL_OW 251
38666: PPUSH
38667: LD_VAR 0 17
38671: PUSH
38672: LD_INT 1
38674: ARRAY
38675: PPUSH
38676: CALL_OW 254
38680: PPUSH
38681: LD_INT 5
38683: PPUSH
38684: CALL_OW 273
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38693: LD_VAR 0 16
38697: PUSH
38698: LD_INT 1
38700: ARRAY
38701: PPUSH
38702: LD_VAR 0 16
38706: PUSH
38707: LD_INT 2
38709: ARRAY
38710: PPUSH
38711: CALL_OW 488
38715: IFFALSE 38746
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38717: LD_VAR 0 13
38721: PPUSH
38722: LD_VAR 0 16
38726: PUSH
38727: LD_INT 1
38729: ARRAY
38730: PPUSH
38731: LD_VAR 0 16
38735: PUSH
38736: LD_INT 2
38738: ARRAY
38739: PPUSH
38740: CALL_OW 111
// continue ;
38744: GO 38236
// end ; end ; r := GetDir ( tmp ) ;
38746: LD_ADDR_VAR 0 15
38750: PUSH
38751: LD_VAR 0 13
38755: PPUSH
38756: CALL_OW 254
38760: ST_TO_ADDR
// if r = 5 then
38761: LD_VAR 0 15
38765: PUSH
38766: LD_INT 5
38768: EQUAL
38769: IFFALSE 38779
// r := 0 ;
38771: LD_ADDR_VAR 0 15
38775: PUSH
38776: LD_INT 0
38778: ST_TO_ADDR
// for j = r to 5 do
38779: LD_ADDR_VAR 0 10
38783: PUSH
38784: DOUBLE
38785: LD_VAR 0 15
38789: DEC
38790: ST_TO_ADDR
38791: LD_INT 5
38793: PUSH
38794: FOR_TO
38795: IFFALSE 38909
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38797: LD_ADDR_VAR 0 11
38801: PUSH
38802: LD_VAR 0 13
38806: PPUSH
38807: CALL_OW 250
38811: PPUSH
38812: LD_VAR 0 10
38816: PPUSH
38817: LD_INT 2
38819: PPUSH
38820: CALL_OW 272
38824: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38825: LD_ADDR_VAR 0 12
38829: PUSH
38830: LD_VAR 0 13
38834: PPUSH
38835: CALL_OW 251
38839: PPUSH
38840: LD_VAR 0 10
38844: PPUSH
38845: LD_INT 2
38847: PPUSH
38848: CALL_OW 273
38852: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38853: LD_VAR 0 11
38857: PPUSH
38858: LD_VAR 0 12
38862: PPUSH
38863: CALL_OW 488
38867: PUSH
38868: LD_VAR 0 11
38872: PPUSH
38873: LD_VAR 0 12
38877: PPUSH
38878: CALL_OW 428
38882: NOT
38883: AND
38884: IFFALSE 38907
// begin ComMoveXY ( tmp , _x , _y ) ;
38886: LD_VAR 0 13
38890: PPUSH
38891: LD_VAR 0 11
38895: PPUSH
38896: LD_VAR 0 12
38900: PPUSH
38901: CALL_OW 111
// break ;
38905: GO 38909
// end ; end ;
38907: GO 38794
38909: POP
38910: POP
// end ; end ;
38911: GO 38236
38913: POP
38914: POP
// end ;
38915: LD_VAR 0 8
38919: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38920: LD_INT 0
38922: PPUSH
// result := true ;
38923: LD_ADDR_VAR 0 3
38927: PUSH
38928: LD_INT 1
38930: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38931: LD_VAR 0 2
38935: PUSH
38936: LD_INT 24
38938: DOUBLE
38939: EQUAL
38940: IFTRUE 38950
38942: LD_INT 33
38944: DOUBLE
38945: EQUAL
38946: IFTRUE 38950
38948: GO 38975
38950: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38951: LD_ADDR_VAR 0 3
38955: PUSH
38956: LD_INT 32
38958: PPUSH
38959: LD_VAR 0 1
38963: PPUSH
38964: CALL_OW 321
38968: PUSH
38969: LD_INT 2
38971: EQUAL
38972: ST_TO_ADDR
38973: GO 39295
38975: LD_INT 20
38977: DOUBLE
38978: EQUAL
38979: IFTRUE 38983
38981: GO 39008
38983: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38984: LD_ADDR_VAR 0 3
38988: PUSH
38989: LD_INT 6
38991: PPUSH
38992: LD_VAR 0 1
38996: PPUSH
38997: CALL_OW 321
39001: PUSH
39002: LD_INT 2
39004: EQUAL
39005: ST_TO_ADDR
39006: GO 39295
39008: LD_INT 22
39010: DOUBLE
39011: EQUAL
39012: IFTRUE 39022
39014: LD_INT 36
39016: DOUBLE
39017: EQUAL
39018: IFTRUE 39022
39020: GO 39047
39022: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39023: LD_ADDR_VAR 0 3
39027: PUSH
39028: LD_INT 15
39030: PPUSH
39031: LD_VAR 0 1
39035: PPUSH
39036: CALL_OW 321
39040: PUSH
39041: LD_INT 2
39043: EQUAL
39044: ST_TO_ADDR
39045: GO 39295
39047: LD_INT 30
39049: DOUBLE
39050: EQUAL
39051: IFTRUE 39055
39053: GO 39080
39055: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39056: LD_ADDR_VAR 0 3
39060: PUSH
39061: LD_INT 20
39063: PPUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 321
39073: PUSH
39074: LD_INT 2
39076: EQUAL
39077: ST_TO_ADDR
39078: GO 39295
39080: LD_INT 28
39082: DOUBLE
39083: EQUAL
39084: IFTRUE 39094
39086: LD_INT 21
39088: DOUBLE
39089: EQUAL
39090: IFTRUE 39094
39092: GO 39119
39094: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39095: LD_ADDR_VAR 0 3
39099: PUSH
39100: LD_INT 21
39102: PPUSH
39103: LD_VAR 0 1
39107: PPUSH
39108: CALL_OW 321
39112: PUSH
39113: LD_INT 2
39115: EQUAL
39116: ST_TO_ADDR
39117: GO 39295
39119: LD_INT 16
39121: DOUBLE
39122: EQUAL
39123: IFTRUE 39127
39125: GO 39154
39127: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39128: LD_ADDR_VAR 0 3
39132: PUSH
39133: LD_EXP 31
39137: PPUSH
39138: LD_VAR 0 1
39142: PPUSH
39143: CALL_OW 321
39147: PUSH
39148: LD_INT 2
39150: EQUAL
39151: ST_TO_ADDR
39152: GO 39295
39154: LD_INT 19
39156: DOUBLE
39157: EQUAL
39158: IFTRUE 39168
39160: LD_INT 23
39162: DOUBLE
39163: EQUAL
39164: IFTRUE 39168
39166: GO 39195
39168: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39169: LD_ADDR_VAR 0 3
39173: PUSH
39174: LD_EXP 30
39178: PPUSH
39179: LD_VAR 0 1
39183: PPUSH
39184: CALL_OW 321
39188: PUSH
39189: LD_INT 2
39191: EQUAL
39192: ST_TO_ADDR
39193: GO 39295
39195: LD_INT 17
39197: DOUBLE
39198: EQUAL
39199: IFTRUE 39203
39201: GO 39228
39203: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39204: LD_ADDR_VAR 0 3
39208: PUSH
39209: LD_INT 39
39211: PPUSH
39212: LD_VAR 0 1
39216: PPUSH
39217: CALL_OW 321
39221: PUSH
39222: LD_INT 2
39224: EQUAL
39225: ST_TO_ADDR
39226: GO 39295
39228: LD_INT 18
39230: DOUBLE
39231: EQUAL
39232: IFTRUE 39236
39234: GO 39261
39236: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39237: LD_ADDR_VAR 0 3
39241: PUSH
39242: LD_INT 40
39244: PPUSH
39245: LD_VAR 0 1
39249: PPUSH
39250: CALL_OW 321
39254: PUSH
39255: LD_INT 2
39257: EQUAL
39258: ST_TO_ADDR
39259: GO 39295
39261: LD_INT 27
39263: DOUBLE
39264: EQUAL
39265: IFTRUE 39269
39267: GO 39294
39269: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39270: LD_ADDR_VAR 0 3
39274: PUSH
39275: LD_INT 35
39277: PPUSH
39278: LD_VAR 0 1
39282: PPUSH
39283: CALL_OW 321
39287: PUSH
39288: LD_INT 2
39290: EQUAL
39291: ST_TO_ADDR
39292: GO 39295
39294: POP
// end ;
39295: LD_VAR 0 3
39299: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39300: LD_INT 0
39302: PPUSH
39303: PPUSH
39304: PPUSH
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
39312: PPUSH
// result := false ;
39313: LD_ADDR_VAR 0 6
39317: PUSH
39318: LD_INT 0
39320: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39321: LD_VAR 0 1
39325: NOT
39326: PUSH
39327: LD_VAR 0 1
39331: PPUSH
39332: CALL_OW 266
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: IN
39347: NOT
39348: OR
39349: PUSH
39350: LD_VAR 0 2
39354: NOT
39355: OR
39356: PUSH
39357: LD_VAR 0 5
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 3
39373: PUSH
39374: LD_INT 4
39376: PUSH
39377: LD_INT 5
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: IN
39388: NOT
39389: OR
39390: PUSH
39391: LD_VAR 0 3
39395: PPUSH
39396: LD_VAR 0 4
39400: PPUSH
39401: CALL_OW 488
39405: NOT
39406: OR
39407: IFFALSE 39411
// exit ;
39409: GO 40147
// side := GetSide ( depot ) ;
39411: LD_ADDR_VAR 0 9
39415: PUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: CALL_OW 255
39425: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39426: LD_VAR 0 9
39430: PPUSH
39431: LD_VAR 0 2
39435: PPUSH
39436: CALL 38920 0 2
39440: NOT
39441: IFFALSE 39445
// exit ;
39443: GO 40147
// pom := GetBase ( depot ) ;
39445: LD_ADDR_VAR 0 10
39449: PUSH
39450: LD_VAR 0 1
39454: PPUSH
39455: CALL_OW 274
39459: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39460: LD_ADDR_VAR 0 11
39464: PUSH
39465: LD_VAR 0 2
39469: PPUSH
39470: LD_VAR 0 1
39474: PPUSH
39475: CALL_OW 248
39479: PPUSH
39480: CALL_OW 450
39484: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39485: LD_VAR 0 10
39489: PPUSH
39490: LD_INT 1
39492: PPUSH
39493: CALL_OW 275
39497: PUSH
39498: LD_VAR 0 11
39502: PUSH
39503: LD_INT 1
39505: ARRAY
39506: GREATEREQUAL
39507: PUSH
39508: LD_VAR 0 10
39512: PPUSH
39513: LD_INT 2
39515: PPUSH
39516: CALL_OW 275
39520: PUSH
39521: LD_VAR 0 11
39525: PUSH
39526: LD_INT 2
39528: ARRAY
39529: GREATEREQUAL
39530: AND
39531: PUSH
39532: LD_VAR 0 10
39536: PPUSH
39537: LD_INT 3
39539: PPUSH
39540: CALL_OW 275
39544: PUSH
39545: LD_VAR 0 11
39549: PUSH
39550: LD_INT 3
39552: ARRAY
39553: GREATEREQUAL
39554: AND
39555: NOT
39556: IFFALSE 39560
// exit ;
39558: GO 40147
// if GetBType ( depot ) = b_depot then
39560: LD_VAR 0 1
39564: PPUSH
39565: CALL_OW 266
39569: PUSH
39570: LD_INT 0
39572: EQUAL
39573: IFFALSE 39585
// dist := 28 else
39575: LD_ADDR_VAR 0 14
39579: PUSH
39580: LD_INT 28
39582: ST_TO_ADDR
39583: GO 39593
// dist := 36 ;
39585: LD_ADDR_VAR 0 14
39589: PUSH
39590: LD_INT 36
39592: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39593: LD_VAR 0 1
39597: PPUSH
39598: LD_VAR 0 3
39602: PPUSH
39603: LD_VAR 0 4
39607: PPUSH
39608: CALL_OW 297
39612: PUSH
39613: LD_VAR 0 14
39617: GREATER
39618: IFFALSE 39622
// exit ;
39620: GO 40147
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39622: LD_ADDR_VAR 0 12
39626: PUSH
39627: LD_VAR 0 2
39631: PPUSH
39632: LD_VAR 0 3
39636: PPUSH
39637: LD_VAR 0 4
39641: PPUSH
39642: LD_VAR 0 5
39646: PPUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: CALL_OW 248
39656: PPUSH
39657: LD_INT 0
39659: PPUSH
39660: CALL 40152 0 6
39664: ST_TO_ADDR
// if not hexes then
39665: LD_VAR 0 12
39669: NOT
39670: IFFALSE 39674
// exit ;
39672: GO 40147
// hex := GetHexInfo ( x , y ) ;
39674: LD_ADDR_VAR 0 15
39678: PUSH
39679: LD_VAR 0 3
39683: PPUSH
39684: LD_VAR 0 4
39688: PPUSH
39689: CALL_OW 546
39693: ST_TO_ADDR
// if hex [ 1 ] then
39694: LD_VAR 0 15
39698: PUSH
39699: LD_INT 1
39701: ARRAY
39702: IFFALSE 39706
// exit ;
39704: GO 40147
// height := hex [ 2 ] ;
39706: LD_ADDR_VAR 0 13
39710: PUSH
39711: LD_VAR 0 15
39715: PUSH
39716: LD_INT 2
39718: ARRAY
39719: ST_TO_ADDR
// for i = 1 to hexes do
39720: LD_ADDR_VAR 0 7
39724: PUSH
39725: DOUBLE
39726: LD_INT 1
39728: DEC
39729: ST_TO_ADDR
39730: LD_VAR 0 12
39734: PUSH
39735: FOR_TO
39736: IFFALSE 40066
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39738: LD_VAR 0 12
39742: PUSH
39743: LD_VAR 0 7
39747: ARRAY
39748: PUSH
39749: LD_INT 1
39751: ARRAY
39752: PPUSH
39753: LD_VAR 0 12
39757: PUSH
39758: LD_VAR 0 7
39762: ARRAY
39763: PUSH
39764: LD_INT 2
39766: ARRAY
39767: PPUSH
39768: CALL_OW 488
39772: NOT
39773: PUSH
39774: LD_VAR 0 12
39778: PUSH
39779: LD_VAR 0 7
39783: ARRAY
39784: PUSH
39785: LD_INT 1
39787: ARRAY
39788: PPUSH
39789: LD_VAR 0 12
39793: PUSH
39794: LD_VAR 0 7
39798: ARRAY
39799: PUSH
39800: LD_INT 2
39802: ARRAY
39803: PPUSH
39804: CALL_OW 428
39808: PUSH
39809: LD_INT 0
39811: GREATER
39812: OR
39813: PUSH
39814: LD_VAR 0 12
39818: PUSH
39819: LD_VAR 0 7
39823: ARRAY
39824: PUSH
39825: LD_INT 1
39827: ARRAY
39828: PPUSH
39829: LD_VAR 0 12
39833: PUSH
39834: LD_VAR 0 7
39838: ARRAY
39839: PUSH
39840: LD_INT 2
39842: ARRAY
39843: PPUSH
39844: CALL_OW 351
39848: OR
39849: IFFALSE 39855
// exit ;
39851: POP
39852: POP
39853: GO 40147
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39855: LD_ADDR_VAR 0 8
39859: PUSH
39860: LD_VAR 0 12
39864: PUSH
39865: LD_VAR 0 7
39869: ARRAY
39870: PUSH
39871: LD_INT 1
39873: ARRAY
39874: PPUSH
39875: LD_VAR 0 12
39879: PUSH
39880: LD_VAR 0 7
39884: ARRAY
39885: PUSH
39886: LD_INT 2
39888: ARRAY
39889: PPUSH
39890: CALL_OW 546
39894: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39895: LD_VAR 0 8
39899: PUSH
39900: LD_INT 1
39902: ARRAY
39903: PUSH
39904: LD_VAR 0 8
39908: PUSH
39909: LD_INT 2
39911: ARRAY
39912: PUSH
39913: LD_VAR 0 13
39917: PUSH
39918: LD_INT 2
39920: PLUS
39921: GREATER
39922: OR
39923: PUSH
39924: LD_VAR 0 8
39928: PUSH
39929: LD_INT 2
39931: ARRAY
39932: PUSH
39933: LD_VAR 0 13
39937: PUSH
39938: LD_INT 2
39940: MINUS
39941: LESS
39942: OR
39943: PUSH
39944: LD_VAR 0 8
39948: PUSH
39949: LD_INT 3
39951: ARRAY
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: LD_INT 8
39958: PUSH
39959: LD_INT 9
39961: PUSH
39962: LD_INT 10
39964: PUSH
39965: LD_INT 11
39967: PUSH
39968: LD_INT 12
39970: PUSH
39971: LD_INT 13
39973: PUSH
39974: LD_INT 16
39976: PUSH
39977: LD_INT 17
39979: PUSH
39980: LD_INT 18
39982: PUSH
39983: LD_INT 19
39985: PUSH
39986: LD_INT 20
39988: PUSH
39989: LD_INT 21
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: IN
40007: NOT
40008: OR
40009: PUSH
40010: LD_VAR 0 8
40014: PUSH
40015: LD_INT 5
40017: ARRAY
40018: NOT
40019: OR
40020: PUSH
40021: LD_VAR 0 8
40025: PUSH
40026: LD_INT 6
40028: ARRAY
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 7
40038: PUSH
40039: LD_INT 9
40041: PUSH
40042: LD_INT 10
40044: PUSH
40045: LD_INT 11
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: IN
40056: NOT
40057: OR
40058: IFFALSE 40064
// exit ;
40060: POP
40061: POP
40062: GO 40147
// end ;
40064: GO 39735
40066: POP
40067: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40068: LD_VAR 0 9
40072: PPUSH
40073: LD_VAR 0 3
40077: PPUSH
40078: LD_VAR 0 4
40082: PPUSH
40083: LD_INT 20
40085: PPUSH
40086: CALL 32093 0 4
40090: PUSH
40091: LD_INT 4
40093: ARRAY
40094: IFFALSE 40098
// exit ;
40096: GO 40147
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40098: LD_VAR 0 2
40102: PUSH
40103: LD_INT 29
40105: PUSH
40106: LD_INT 30
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: IN
40113: PUSH
40114: LD_VAR 0 3
40118: PPUSH
40119: LD_VAR 0 4
40123: PPUSH
40124: LD_VAR 0 9
40128: PPUSH
40129: CALL_OW 440
40133: NOT
40134: AND
40135: IFFALSE 40139
// exit ;
40137: GO 40147
// result := true ;
40139: LD_ADDR_VAR 0 6
40143: PUSH
40144: LD_INT 1
40146: ST_TO_ADDR
// end ;
40147: LD_VAR 0 6
40151: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40152: LD_INT 0
40154: PPUSH
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
40171: PPUSH
40172: PPUSH
40173: PPUSH
40174: PPUSH
40175: PPUSH
40176: PPUSH
40177: PPUSH
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
40183: PPUSH
40184: PPUSH
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
40199: PPUSH
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
40204: PPUSH
40205: PPUSH
40206: PPUSH
40207: PPUSH
40208: PPUSH
40209: PPUSH
40210: PPUSH
40211: PPUSH
// result = [ ] ;
40212: LD_ADDR_VAR 0 7
40216: PUSH
40217: EMPTY
40218: ST_TO_ADDR
// temp_list = [ ] ;
40219: LD_ADDR_VAR 0 9
40223: PUSH
40224: EMPTY
40225: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40226: LD_VAR 0 4
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 3
40242: PUSH
40243: LD_INT 4
40245: PUSH
40246: LD_INT 5
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: IN
40257: NOT
40258: PUSH
40259: LD_VAR 0 1
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: IN
40274: PUSH
40275: LD_VAR 0 5
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 3
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: IN
40294: NOT
40295: AND
40296: OR
40297: IFFALSE 40301
// exit ;
40299: GO 58692
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40301: LD_VAR 0 1
40305: PUSH
40306: LD_INT 6
40308: PUSH
40309: LD_INT 7
40311: PUSH
40312: LD_INT 8
40314: PUSH
40315: LD_INT 13
40317: PUSH
40318: LD_INT 12
40320: PUSH
40321: LD_INT 15
40323: PUSH
40324: LD_INT 11
40326: PUSH
40327: LD_INT 14
40329: PUSH
40330: LD_INT 10
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: IN
40344: IFFALSE 40354
// btype = b_lab ;
40346: LD_ADDR_VAR 0 1
40350: PUSH
40351: LD_INT 6
40353: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40354: LD_VAR 0 6
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: IN
40373: NOT
40374: PUSH
40375: LD_VAR 0 1
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: LD_INT 3
40391: PUSH
40392: LD_INT 6
40394: PUSH
40395: LD_INT 36
40397: PUSH
40398: LD_INT 4
40400: PUSH
40401: LD_INT 5
40403: PUSH
40404: LD_INT 31
40406: PUSH
40407: LD_INT 32
40409: PUSH
40410: LD_INT 33
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: IN
40426: NOT
40427: PUSH
40428: LD_VAR 0 6
40432: PUSH
40433: LD_INT 1
40435: EQUAL
40436: AND
40437: OR
40438: PUSH
40439: LD_VAR 0 1
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: LD_INT 3
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: IN
40454: NOT
40455: PUSH
40456: LD_VAR 0 6
40460: PUSH
40461: LD_INT 2
40463: EQUAL
40464: AND
40465: OR
40466: IFFALSE 40476
// mode = 0 ;
40468: LD_ADDR_VAR 0 6
40472: PUSH
40473: LD_INT 0
40475: ST_TO_ADDR
// case mode of 0 :
40476: LD_VAR 0 6
40480: PUSH
40481: LD_INT 0
40483: DOUBLE
40484: EQUAL
40485: IFTRUE 40489
40487: GO 51942
40489: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40490: LD_ADDR_VAR 0 11
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 3
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 3
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40683: LD_ADDR_VAR 0 12
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 3
40840: NEG
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 3
40851: NEG
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40879: LD_ADDR_VAR 0 13
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 2
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: LD_INT 3
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 3
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 3
41050: NEG
41051: PUSH
41052: LD_INT 3
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41078: LD_ADDR_VAR 0 14
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 3
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 3
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41274: LD_ADDR_VAR 0 15
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41467: LD_ADDR_VAR 0 16
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 3
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 3
41624: PUSH
41625: LD_INT 3
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: LD_INT 3
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41660: LD_ADDR_VAR 0 17
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 2
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 2
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 2
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41890: LD_ADDR_VAR 0 18
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: LD_INT 2
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 2
42066: NEG
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: NEG
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42120: LD_ADDR_VAR 0 19
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42350: LD_ADDR_VAR 0 20
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42580: LD_ADDR_VAR 0 21
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: LD_INT 2
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 2
42756: NEG
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42810: LD_ADDR_VAR 0 22
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: LD_INT 2
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: LD_INT 2
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: LD_INT 2
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 2
43009: NEG
43010: PUSH
43011: LD_INT 2
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43040: LD_ADDR_VAR 0 23
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: NEG
43240: PUSH
43241: LD_INT 2
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: LD_INT 3
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: LD_INT 3
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43320: LD_ADDR_VAR 0 24
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: LD_INT 2
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 2
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 3
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 3
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43596: LD_ADDR_VAR 0 25
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 2
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: LD_INT 2
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 3
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43870: LD_ADDR_VAR 0 26
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: NEG
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 3
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 3
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44146: LD_ADDR_VAR 0 27
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: NEG
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 3
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 3
44391: NEG
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44426: LD_ADDR_VAR 0 28
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 3
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 3
44661: NEG
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: NEG
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44708: LD_ADDR_VAR 0 29
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: LD_INT 3
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 3
44952: NEG
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44987: LD_ADDR_VAR 0 30
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: LD_INT 3
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 3
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 3
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 3
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45265: LD_ADDR_VAR 0 31
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: LD_INT 3
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 3
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 3
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 3
45508: NEG
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45543: LD_ADDR_VAR 0 32
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 3
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 3
45786: NEG
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45821: LD_ADDR_VAR 0 33
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 3
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 3
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46100: LD_ADDR_VAR 0 34
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 3
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 2
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 3
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46380: LD_ADDR_VAR 0 35
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46492: LD_ADDR_VAR 0 36
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46604: LD_ADDR_VAR 0 37
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46716: LD_ADDR_VAR 0 38
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46828: LD_ADDR_VAR 0 39
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46940: LD_ADDR_VAR 0 40
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47052: LD_ADDR_VAR 0 41
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: NEG
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: NEG
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 3
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 3
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: LD_INT 3
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 3
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: NEG
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 3
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 3
47349: NEG
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 3
47361: NEG
47362: PUSH
47363: LD_INT 3
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47402: LD_ADDR_VAR 0 42
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: LD_INT 3
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 3
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 3
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: PUSH
47649: LD_INT 3
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: NEG
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 3
47711: NEG
47712: PUSH
47713: LD_INT 3
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47752: LD_ADDR_VAR 0 43
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 3
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 3
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 3
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 3
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 3
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 3
48048: NEG
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 3
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48100: LD_ADDR_VAR 0 44
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 3
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 3
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 3
48374: NEG
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: NEG
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: LD_INT 3
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48450: LD_ADDR_VAR 0 45
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 3
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 3
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 3
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: LD_INT 3
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 3
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 3
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 3
48747: NEG
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: LD_INT 3
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48800: LD_ADDR_VAR 0 46
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 3
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 3
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 3
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 3
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 3
49096: NEG
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 3
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49148: LD_ADDR_VAR 0 47
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49299: LD_ADDR_VAR 0 48
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49446: LD_ADDR_VAR 0 49
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49590: LD_ADDR_VAR 0 50
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49734: LD_ADDR_VAR 0 51
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49881: LD_ADDR_VAR 0 52
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50032: LD_ADDR_VAR 0 53
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50262: LD_ADDR_VAR 0 54
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 2
50438: NEG
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 2
50449: NEG
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50492: LD_ADDR_VAR 0 55
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 2
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50722: LD_ADDR_VAR 0 56
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50952: LD_ADDR_VAR 0 57
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: NEG
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51182: LD_ADDR_VAR 0 58
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51412: LD_ADDR_VAR 0 59
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51500: LD_ADDR_VAR 0 60
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51588: LD_ADDR_VAR 0 61
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51676: LD_ADDR_VAR 0 62
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51764: LD_ADDR_VAR 0 63
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51852: LD_ADDR_VAR 0 64
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: ST_TO_ADDR
// end ; 1 :
51940: GO 57837
51942: LD_INT 1
51944: DOUBLE
51945: EQUAL
51946: IFTRUE 51950
51948: GO 54573
51950: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51951: LD_ADDR_VAR 0 11
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 3
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 3
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51995: LD_ADDR_VAR 0 12
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 3
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52036: LD_ADDR_VAR 0 13
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: LD_INT 3
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52076: LD_ADDR_VAR 0 14
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 3
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: LIST
52116: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52117: LD_ADDR_VAR 0 15
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 3
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52161: LD_ADDR_VAR 0 16
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: LD_INT 3
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: LD_INT 3
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: LIST
52206: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52207: LD_ADDR_VAR 0 17
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: LD_INT 3
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: LIST
52250: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52251: LD_ADDR_VAR 0 18
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 3
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 3
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52292: LD_ADDR_VAR 0 19
52296: PUSH
52297: LD_INT 3
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 3
52309: PUSH
52310: LD_INT 3
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 3
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52332: LD_ADDR_VAR 0 20
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 3
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52373: LD_ADDR_VAR 0 21
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 3
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: LIST
52416: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52417: LD_ADDR_VAR 0 22
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 3
52436: NEG
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 3
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52463: LD_ADDR_VAR 0 23
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 3
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: LD_INT 4
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52507: LD_ADDR_VAR 0 24
52511: PUSH
52512: LD_INT 3
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 4
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52548: LD_ADDR_VAR 0 25
52552: PUSH
52553: LD_INT 3
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 4
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 3
52575: PUSH
52576: LD_INT 4
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: LIST
52587: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52588: LD_ADDR_VAR 0 26
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 4
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 3
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52629: LD_ADDR_VAR 0 27
52633: PUSH
52634: LD_INT 3
52636: NEG
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 4
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: LIST
52672: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52673: LD_ADDR_VAR 0 28
52677: PUSH
52678: LD_INT 3
52680: NEG
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 3
52692: NEG
52693: PUSH
52694: LD_INT 4
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 4
52704: NEG
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: LIST
52718: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52719: LD_ADDR_VAR 0 29
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: LD_INT 3
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 4
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 4
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 5
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 5
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 4
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 6
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 6
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 5
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52874: LD_ADDR_VAR 0 30
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 4
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 4
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 4
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 5
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 5
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 5
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 6
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 6
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53017: LD_ADDR_VAR 0 31
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 4
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 4
53064: PUSH
53065: LD_INT 4
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: LD_INT 4
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 5
53084: PUSH
53085: LD_INT 4
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 5
53094: PUSH
53095: LD_INT 5
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 4
53104: PUSH
53105: LD_INT 5
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 6
53114: PUSH
53115: LD_INT 5
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 6
53124: PUSH
53125: LD_INT 6
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 5
53134: PUSH
53135: LD_INT 6
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53156: LD_ADDR_VAR 0 32
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 4
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: LD_INT 4
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 5
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 5
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: LD_INT 4
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 6
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 6
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 5
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53299: LD_ADDR_VAR 0 33
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 3
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: NEG
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 4
53351: NEG
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 4
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 4
53374: NEG
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 5
53385: NEG
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 5
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 5
53408: NEG
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 6
53419: NEG
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 6
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53454: LD_ADDR_VAR 0 34
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: LD_INT 3
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: NEG
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: LD_INT 3
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: LD_INT 4
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 4
53509: NEG
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 4
53521: NEG
53522: PUSH
53523: LD_INT 4
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 4
53533: NEG
53534: PUSH
53535: LD_INT 5
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 5
53545: NEG
53546: PUSH
53547: LD_INT 4
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 5
53557: NEG
53558: PUSH
53559: LD_INT 5
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 5
53569: NEG
53570: PUSH
53571: LD_INT 6
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 6
53581: NEG
53582: PUSH
53583: LD_INT 5
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 6
53593: NEG
53594: PUSH
53595: LD_INT 6
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53617: LD_ADDR_VAR 0 41
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 3
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53661: LD_ADDR_VAR 0 42
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: LIST
53701: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53702: LD_ADDR_VAR 0 43
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: LD_INT 3
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53742: LD_ADDR_VAR 0 44
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 3
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53783: LD_ADDR_VAR 0 45
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53827: LD_ADDR_VAR 0 46
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 3
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53873: LD_ADDR_VAR 0 47
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53906: LD_ADDR_VAR 0 48
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53937: LD_ADDR_VAR 0 49
53941: PUSH
53942: LD_INT 3
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53966: LD_ADDR_VAR 0 50
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 3
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53995: LD_ADDR_VAR 0 51
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54026: LD_ADDR_VAR 0 52
54030: PUSH
54031: LD_INT 3
54033: NEG
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 3
54045: NEG
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54059: LD_ADDR_VAR 0 53
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: LIST
54102: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54103: LD_ADDR_VAR 0 54
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 3
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 3
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: LIST
54143: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54144: LD_ADDR_VAR 0 55
54148: PUSH
54149: LD_INT 3
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: LD_INT 3
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: LD_INT 3
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: LIST
54183: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54184: LD_ADDR_VAR 0 56
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 3
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: LIST
54224: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54225: LD_ADDR_VAR 0 57
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: NEG
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 3
54254: NEG
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: LIST
54268: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54269: LD_ADDR_VAR 0 58
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 3
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 3
54288: NEG
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 3
54300: NEG
54301: PUSH
54302: LD_INT 3
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: LIST
54314: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54315: LD_ADDR_VAR 0 59
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54359: LD_ADDR_VAR 0 60
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54400: LD_ADDR_VAR 0 61
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54440: LD_ADDR_VAR 0 62
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: LIST
54480: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54481: LD_ADDR_VAR 0 63
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: LIST
54524: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54525: LD_ADDR_VAR 0 64
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: ST_TO_ADDR
// end ; 2 :
54571: GO 57837
54573: LD_INT 2
54575: DOUBLE
54576: EQUAL
54577: IFTRUE 54581
54579: GO 57836
54581: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54582: LD_ADDR_VAR 0 29
54586: PUSH
54587: LD_INT 4
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 4
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 5
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 5
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 4
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 3
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 5
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 3
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 4
54702: PUSH
54703: LD_INT 3
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 4
54712: PUSH
54713: LD_INT 4
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 4
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 3
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 4
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: LD_INT 4
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 4
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 3
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 4
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 5
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 5
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 4
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: LD_INT 5
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 3
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 3
54910: NEG
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 4
54921: NEG
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 4
54932: NEG
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 4
54944: NEG
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 4
54967: NEG
54968: PUSH
54969: LD_INT 4
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 4
54979: NEG
54980: PUSH
54981: LD_INT 5
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 3
54991: NEG
54992: PUSH
54993: LD_INT 4
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: LD_INT 3
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 4
55015: NEG
55016: PUSH
55017: LD_INT 3
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 5
55027: NEG
55028: PUSH
55029: LD_INT 4
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 5
55039: NEG
55040: PUSH
55041: LD_INT 5
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: LD_INT 5
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 5
55063: NEG
55064: PUSH
55065: LD_INT 3
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55120: LD_ADDR_VAR 0 30
55124: PUSH
55125: LD_INT 4
55127: PUSH
55128: LD_INT 4
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 4
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 5
55147: PUSH
55148: LD_INT 4
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 5
55157: PUSH
55158: LD_INT 5
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 4
55167: PUSH
55168: LD_INT 5
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: LD_INT 4
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: LD_INT 3
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 5
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 3
55207: PUSH
55208: LD_INT 5
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 3
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 4
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 4
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: LD_INT 4
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 4
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 4
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 4
55355: NEG
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 5
55366: NEG
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 5
55377: NEG
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 5
55389: NEG
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 3
55412: NEG
55413: PUSH
55414: LD_INT 3
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 3
55424: NEG
55425: PUSH
55426: LD_INT 4
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 3
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 3
55460: NEG
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 4
55472: NEG
55473: PUSH
55474: LD_INT 3
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 4
55484: NEG
55485: PUSH
55486: LD_INT 4
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: LD_INT 4
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 4
55508: NEG
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 4
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 5
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 4
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 4
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 5
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 3
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: LD_INT 5
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55667: LD_ADDR_VAR 0 31
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 4
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: LD_INT 5
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 5
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: LD_INT 4
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: LD_INT 5
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 3
55767: NEG
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: NEG
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 4
55823: NEG
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 4
55834: NEG
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 4
55846: NEG
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 4
55869: NEG
55870: PUSH
55871: LD_INT 4
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 4
55881: NEG
55882: PUSH
55883: LD_INT 5
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: LD_INT 4
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: LD_INT 3
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 4
55917: NEG
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 5
55929: NEG
55930: PUSH
55931: LD_INT 4
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 5
55941: NEG
55942: PUSH
55943: LD_INT 5
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: LD_INT 5
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 5
55965: NEG
55966: PUSH
55967: LD_INT 3
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 4
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 3
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 4
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: LD_INT 4
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 4
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 4
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 5
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 5
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 4
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 3
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 5
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56217: LD_ADDR_VAR 0 32
56221: PUSH
56222: LD_INT 4
56224: NEG
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 4
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 3
56247: NEG
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 3
56258: NEG
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 4
56269: NEG
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 5
56280: NEG
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 5
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 5
56303: NEG
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: NEG
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 3
56326: NEG
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 3
56338: NEG
56339: PUSH
56340: LD_INT 4
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 3
56374: NEG
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 4
56386: NEG
56387: PUSH
56388: LD_INT 3
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 4
56398: NEG
56399: PUSH
56400: LD_INT 4
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: LD_INT 4
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 4
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: LD_INT 5
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 4
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: LD_INT 4
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 5
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 3
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: LD_INT 5
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 3
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 4
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 4
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 4
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 4
56629: PUSH
56630: LD_INT 4
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 4
56639: PUSH
56640: LD_INT 3
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 5
56649: PUSH
56650: LD_INT 4
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 5
56659: PUSH
56660: LD_INT 5
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 4
56669: PUSH
56670: LD_INT 5
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 3
56679: PUSH
56680: LD_INT 4
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 5
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: LD_INT 5
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56764: LD_ADDR_VAR 0 33
56768: PUSH
56769: LD_INT 4
56771: NEG
56772: PUSH
56773: LD_INT 4
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 4
56783: NEG
56784: PUSH
56785: LD_INT 5
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: NEG
56796: PUSH
56797: LD_INT 4
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: NEG
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 4
56819: NEG
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 5
56831: NEG
56832: PUSH
56833: LD_INT 4
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 5
56843: NEG
56844: PUSH
56845: LD_INT 5
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 3
56855: NEG
56856: PUSH
56857: LD_INT 5
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 5
56867: NEG
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 3
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 4
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: LD_INT 3
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 3
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 4
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: LD_INT 4
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 4
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 4
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 5
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 5
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 4
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 5
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 3
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 3
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 4
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 4
57104: PUSH
57105: LD_INT 4
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: LD_INT 4
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: LD_INT 3
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 4
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 4
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 4
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: LD_INT 4
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 5
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 5
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 4
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57302: LD_ADDR_VAR 0 34
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 4
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 5
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: LD_INT 4
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 3
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 4
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 5
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 5
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 4
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 4
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 4
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 4
57504: PUSH
57505: LD_INT 4
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 4
57514: PUSH
57515: LD_INT 3
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 5
57524: PUSH
57525: LD_INT 4
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 5
57534: PUSH
57535: LD_INT 5
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 4
57544: PUSH
57545: LD_INT 5
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: LD_INT 4
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 5
57574: PUSH
57575: LD_INT 3
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 3
57584: PUSH
57585: LD_INT 5
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 3
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: LD_INT 3
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 4
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: LD_INT 4
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: LD_INT 3
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: LD_INT 4
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 4
57687: NEG
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 4
57698: NEG
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 3
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 4
57732: NEG
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 5
57743: NEG
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 5
57754: NEG
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 5
57766: NEG
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 3
57778: NEG
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: ST_TO_ADDR
// end ; end ;
57834: GO 57837
57836: POP
// case btype of b_depot , b_warehouse :
57837: LD_VAR 0 1
57841: PUSH
57842: LD_INT 0
57844: DOUBLE
57845: EQUAL
57846: IFTRUE 57856
57848: LD_INT 1
57850: DOUBLE
57851: EQUAL
57852: IFTRUE 57856
57854: GO 58057
57856: POP
// case nation of nation_american :
57857: LD_VAR 0 5
57861: PUSH
57862: LD_INT 1
57864: DOUBLE
57865: EQUAL
57866: IFTRUE 57870
57868: GO 57926
57870: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57871: LD_ADDR_VAR 0 9
57875: PUSH
57876: LD_VAR 0 11
57880: PUSH
57881: LD_VAR 0 12
57885: PUSH
57886: LD_VAR 0 13
57890: PUSH
57891: LD_VAR 0 14
57895: PUSH
57896: LD_VAR 0 15
57900: PUSH
57901: LD_VAR 0 16
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: PUSH
57914: LD_VAR 0 4
57918: PUSH
57919: LD_INT 1
57921: PLUS
57922: ARRAY
57923: ST_TO_ADDR
57924: GO 58055
57926: LD_INT 2
57928: DOUBLE
57929: EQUAL
57930: IFTRUE 57934
57932: GO 57990
57934: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57935: LD_ADDR_VAR 0 9
57939: PUSH
57940: LD_VAR 0 17
57944: PUSH
57945: LD_VAR 0 18
57949: PUSH
57950: LD_VAR 0 19
57954: PUSH
57955: LD_VAR 0 20
57959: PUSH
57960: LD_VAR 0 21
57964: PUSH
57965: LD_VAR 0 22
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: PUSH
57978: LD_VAR 0 4
57982: PUSH
57983: LD_INT 1
57985: PLUS
57986: ARRAY
57987: ST_TO_ADDR
57988: GO 58055
57990: LD_INT 3
57992: DOUBLE
57993: EQUAL
57994: IFTRUE 57998
57996: GO 58054
57998: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57999: LD_ADDR_VAR 0 9
58003: PUSH
58004: LD_VAR 0 23
58008: PUSH
58009: LD_VAR 0 24
58013: PUSH
58014: LD_VAR 0 25
58018: PUSH
58019: LD_VAR 0 26
58023: PUSH
58024: LD_VAR 0 27
58028: PUSH
58029: LD_VAR 0 28
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: PUSH
58042: LD_VAR 0 4
58046: PUSH
58047: LD_INT 1
58049: PLUS
58050: ARRAY
58051: ST_TO_ADDR
58052: GO 58055
58054: POP
58055: GO 58610
58057: LD_INT 2
58059: DOUBLE
58060: EQUAL
58061: IFTRUE 58071
58063: LD_INT 3
58065: DOUBLE
58066: EQUAL
58067: IFTRUE 58071
58069: GO 58127
58071: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58072: LD_ADDR_VAR 0 9
58076: PUSH
58077: LD_VAR 0 29
58081: PUSH
58082: LD_VAR 0 30
58086: PUSH
58087: LD_VAR 0 31
58091: PUSH
58092: LD_VAR 0 32
58096: PUSH
58097: LD_VAR 0 33
58101: PUSH
58102: LD_VAR 0 34
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: PUSH
58115: LD_VAR 0 4
58119: PUSH
58120: LD_INT 1
58122: PLUS
58123: ARRAY
58124: ST_TO_ADDR
58125: GO 58610
58127: LD_INT 16
58129: DOUBLE
58130: EQUAL
58131: IFTRUE 58189
58133: LD_INT 17
58135: DOUBLE
58136: EQUAL
58137: IFTRUE 58189
58139: LD_INT 18
58141: DOUBLE
58142: EQUAL
58143: IFTRUE 58189
58145: LD_INT 19
58147: DOUBLE
58148: EQUAL
58149: IFTRUE 58189
58151: LD_INT 22
58153: DOUBLE
58154: EQUAL
58155: IFTRUE 58189
58157: LD_INT 20
58159: DOUBLE
58160: EQUAL
58161: IFTRUE 58189
58163: LD_INT 21
58165: DOUBLE
58166: EQUAL
58167: IFTRUE 58189
58169: LD_INT 23
58171: DOUBLE
58172: EQUAL
58173: IFTRUE 58189
58175: LD_INT 24
58177: DOUBLE
58178: EQUAL
58179: IFTRUE 58189
58181: LD_INT 25
58183: DOUBLE
58184: EQUAL
58185: IFTRUE 58189
58187: GO 58245
58189: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58190: LD_ADDR_VAR 0 9
58194: PUSH
58195: LD_VAR 0 35
58199: PUSH
58200: LD_VAR 0 36
58204: PUSH
58205: LD_VAR 0 37
58209: PUSH
58210: LD_VAR 0 38
58214: PUSH
58215: LD_VAR 0 39
58219: PUSH
58220: LD_VAR 0 40
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: PUSH
58233: LD_VAR 0 4
58237: PUSH
58238: LD_INT 1
58240: PLUS
58241: ARRAY
58242: ST_TO_ADDR
58243: GO 58610
58245: LD_INT 6
58247: DOUBLE
58248: EQUAL
58249: IFTRUE 58301
58251: LD_INT 7
58253: DOUBLE
58254: EQUAL
58255: IFTRUE 58301
58257: LD_INT 8
58259: DOUBLE
58260: EQUAL
58261: IFTRUE 58301
58263: LD_INT 13
58265: DOUBLE
58266: EQUAL
58267: IFTRUE 58301
58269: LD_INT 12
58271: DOUBLE
58272: EQUAL
58273: IFTRUE 58301
58275: LD_INT 15
58277: DOUBLE
58278: EQUAL
58279: IFTRUE 58301
58281: LD_INT 11
58283: DOUBLE
58284: EQUAL
58285: IFTRUE 58301
58287: LD_INT 14
58289: DOUBLE
58290: EQUAL
58291: IFTRUE 58301
58293: LD_INT 10
58295: DOUBLE
58296: EQUAL
58297: IFTRUE 58301
58299: GO 58357
58301: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58302: LD_ADDR_VAR 0 9
58306: PUSH
58307: LD_VAR 0 41
58311: PUSH
58312: LD_VAR 0 42
58316: PUSH
58317: LD_VAR 0 43
58321: PUSH
58322: LD_VAR 0 44
58326: PUSH
58327: LD_VAR 0 45
58331: PUSH
58332: LD_VAR 0 46
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: PUSH
58345: LD_VAR 0 4
58349: PUSH
58350: LD_INT 1
58352: PLUS
58353: ARRAY
58354: ST_TO_ADDR
58355: GO 58610
58357: LD_INT 36
58359: DOUBLE
58360: EQUAL
58361: IFTRUE 58365
58363: GO 58421
58365: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58366: LD_ADDR_VAR 0 9
58370: PUSH
58371: LD_VAR 0 47
58375: PUSH
58376: LD_VAR 0 48
58380: PUSH
58381: LD_VAR 0 49
58385: PUSH
58386: LD_VAR 0 50
58390: PUSH
58391: LD_VAR 0 51
58395: PUSH
58396: LD_VAR 0 52
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: PUSH
58409: LD_VAR 0 4
58413: PUSH
58414: LD_INT 1
58416: PLUS
58417: ARRAY
58418: ST_TO_ADDR
58419: GO 58610
58421: LD_INT 4
58423: DOUBLE
58424: EQUAL
58425: IFTRUE 58447
58427: LD_INT 5
58429: DOUBLE
58430: EQUAL
58431: IFTRUE 58447
58433: LD_INT 34
58435: DOUBLE
58436: EQUAL
58437: IFTRUE 58447
58439: LD_INT 37
58441: DOUBLE
58442: EQUAL
58443: IFTRUE 58447
58445: GO 58503
58447: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58448: LD_ADDR_VAR 0 9
58452: PUSH
58453: LD_VAR 0 53
58457: PUSH
58458: LD_VAR 0 54
58462: PUSH
58463: LD_VAR 0 55
58467: PUSH
58468: LD_VAR 0 56
58472: PUSH
58473: LD_VAR 0 57
58477: PUSH
58478: LD_VAR 0 58
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: PUSH
58491: LD_VAR 0 4
58495: PUSH
58496: LD_INT 1
58498: PLUS
58499: ARRAY
58500: ST_TO_ADDR
58501: GO 58610
58503: LD_INT 31
58505: DOUBLE
58506: EQUAL
58507: IFTRUE 58553
58509: LD_INT 32
58511: DOUBLE
58512: EQUAL
58513: IFTRUE 58553
58515: LD_INT 33
58517: DOUBLE
58518: EQUAL
58519: IFTRUE 58553
58521: LD_INT 27
58523: DOUBLE
58524: EQUAL
58525: IFTRUE 58553
58527: LD_INT 26
58529: DOUBLE
58530: EQUAL
58531: IFTRUE 58553
58533: LD_INT 28
58535: DOUBLE
58536: EQUAL
58537: IFTRUE 58553
58539: LD_INT 29
58541: DOUBLE
58542: EQUAL
58543: IFTRUE 58553
58545: LD_INT 30
58547: DOUBLE
58548: EQUAL
58549: IFTRUE 58553
58551: GO 58609
58553: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58554: LD_ADDR_VAR 0 9
58558: PUSH
58559: LD_VAR 0 59
58563: PUSH
58564: LD_VAR 0 60
58568: PUSH
58569: LD_VAR 0 61
58573: PUSH
58574: LD_VAR 0 62
58578: PUSH
58579: LD_VAR 0 63
58583: PUSH
58584: LD_VAR 0 64
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: PUSH
58597: LD_VAR 0 4
58601: PUSH
58602: LD_INT 1
58604: PLUS
58605: ARRAY
58606: ST_TO_ADDR
58607: GO 58610
58609: POP
// temp_list2 = [ ] ;
58610: LD_ADDR_VAR 0 10
58614: PUSH
58615: EMPTY
58616: ST_TO_ADDR
// for i in temp_list do
58617: LD_ADDR_VAR 0 8
58621: PUSH
58622: LD_VAR 0 9
58626: PUSH
58627: FOR_IN
58628: IFFALSE 58680
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58630: LD_ADDR_VAR 0 10
58634: PUSH
58635: LD_VAR 0 10
58639: PUSH
58640: LD_VAR 0 8
58644: PUSH
58645: LD_INT 1
58647: ARRAY
58648: PUSH
58649: LD_VAR 0 2
58653: PLUS
58654: PUSH
58655: LD_VAR 0 8
58659: PUSH
58660: LD_INT 2
58662: ARRAY
58663: PUSH
58664: LD_VAR 0 3
58668: PLUS
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: EMPTY
58675: LIST
58676: ADD
58677: ST_TO_ADDR
58678: GO 58627
58680: POP
58681: POP
// result = temp_list2 ;
58682: LD_ADDR_VAR 0 7
58686: PUSH
58687: LD_VAR 0 10
58691: ST_TO_ADDR
// end ;
58692: LD_VAR 0 7
58696: RET
// export function EnemyInRange ( unit , dist ) ; begin
58697: LD_INT 0
58699: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58700: LD_ADDR_VAR 0 3
58704: PUSH
58705: LD_VAR 0 1
58709: PPUSH
58710: CALL_OW 255
58714: PPUSH
58715: LD_VAR 0 1
58719: PPUSH
58720: CALL_OW 250
58724: PPUSH
58725: LD_VAR 0 1
58729: PPUSH
58730: CALL_OW 251
58734: PPUSH
58735: LD_VAR 0 2
58739: PPUSH
58740: CALL 32093 0 4
58744: PUSH
58745: LD_INT 4
58747: ARRAY
58748: ST_TO_ADDR
// end ;
58749: LD_VAR 0 3
58753: RET
// export function PlayerSeeMe ( unit ) ; begin
58754: LD_INT 0
58756: PPUSH
// result := See ( your_side , unit ) ;
58757: LD_ADDR_VAR 0 2
58761: PUSH
58762: LD_OWVAR 2
58766: PPUSH
58767: LD_VAR 0 1
58771: PPUSH
58772: CALL_OW 292
58776: ST_TO_ADDR
// end ;
58777: LD_VAR 0 2
58781: RET
// export function ReverseDir ( unit ) ; begin
58782: LD_INT 0
58784: PPUSH
// if not unit then
58785: LD_VAR 0 1
58789: NOT
58790: IFFALSE 58794
// exit ;
58792: GO 58817
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58794: LD_ADDR_VAR 0 2
58798: PUSH
58799: LD_VAR 0 1
58803: PPUSH
58804: CALL_OW 254
58808: PUSH
58809: LD_INT 3
58811: PLUS
58812: PUSH
58813: LD_INT 6
58815: MOD
58816: ST_TO_ADDR
// end ;
58817: LD_VAR 0 2
58821: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58822: LD_INT 0
58824: PPUSH
58825: PPUSH
58826: PPUSH
58827: PPUSH
58828: PPUSH
// if not hexes then
58829: LD_VAR 0 2
58833: NOT
58834: IFFALSE 58838
// exit ;
58836: GO 58986
// dist := 9999 ;
58838: LD_ADDR_VAR 0 5
58842: PUSH
58843: LD_INT 9999
58845: ST_TO_ADDR
// for i = 1 to hexes do
58846: LD_ADDR_VAR 0 4
58850: PUSH
58851: DOUBLE
58852: LD_INT 1
58854: DEC
58855: ST_TO_ADDR
58856: LD_VAR 0 2
58860: PUSH
58861: FOR_TO
58862: IFFALSE 58974
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58864: LD_VAR 0 1
58868: PPUSH
58869: LD_VAR 0 2
58873: PUSH
58874: LD_VAR 0 4
58878: ARRAY
58879: PUSH
58880: LD_INT 1
58882: ARRAY
58883: PPUSH
58884: LD_VAR 0 2
58888: PUSH
58889: LD_VAR 0 4
58893: ARRAY
58894: PUSH
58895: LD_INT 2
58897: ARRAY
58898: PPUSH
58899: CALL_OW 297
58903: PUSH
58904: LD_VAR 0 5
58908: LESS
58909: IFFALSE 58972
// begin hex := hexes [ i ] ;
58911: LD_ADDR_VAR 0 7
58915: PUSH
58916: LD_VAR 0 2
58920: PUSH
58921: LD_VAR 0 4
58925: ARRAY
58926: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58927: LD_ADDR_VAR 0 5
58931: PUSH
58932: LD_VAR 0 1
58936: PPUSH
58937: LD_VAR 0 2
58941: PUSH
58942: LD_VAR 0 4
58946: ARRAY
58947: PUSH
58948: LD_INT 1
58950: ARRAY
58951: PPUSH
58952: LD_VAR 0 2
58956: PUSH
58957: LD_VAR 0 4
58961: ARRAY
58962: PUSH
58963: LD_INT 2
58965: ARRAY
58966: PPUSH
58967: CALL_OW 297
58971: ST_TO_ADDR
// end ; end ;
58972: GO 58861
58974: POP
58975: POP
// result := hex ;
58976: LD_ADDR_VAR 0 3
58980: PUSH
58981: LD_VAR 0 7
58985: ST_TO_ADDR
// end ;
58986: LD_VAR 0 3
58990: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58991: LD_INT 0
58993: PPUSH
58994: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58995: LD_VAR 0 1
58999: NOT
59000: PUSH
59001: LD_VAR 0 1
59005: PUSH
59006: LD_INT 21
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 23
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PPUSH
59030: CALL_OW 69
59034: IN
59035: NOT
59036: OR
59037: IFFALSE 59041
// exit ;
59039: GO 59088
// for i = 1 to 3 do
59041: LD_ADDR_VAR 0 3
59045: PUSH
59046: DOUBLE
59047: LD_INT 1
59049: DEC
59050: ST_TO_ADDR
59051: LD_INT 3
59053: PUSH
59054: FOR_TO
59055: IFFALSE 59086
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59057: LD_VAR 0 1
59061: PPUSH
59062: CALL_OW 250
59066: PPUSH
59067: LD_VAR 0 1
59071: PPUSH
59072: CALL_OW 251
59076: PPUSH
59077: LD_INT 1
59079: PPUSH
59080: CALL_OW 453
59084: GO 59054
59086: POP
59087: POP
// end ;
59088: LD_VAR 0 2
59092: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59093: LD_INT 0
59095: PPUSH
59096: PPUSH
59097: PPUSH
59098: PPUSH
59099: PPUSH
59100: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59101: LD_VAR 0 1
59105: NOT
59106: PUSH
59107: LD_VAR 0 2
59111: NOT
59112: OR
59113: PUSH
59114: LD_VAR 0 1
59118: PPUSH
59119: CALL_OW 314
59123: OR
59124: IFFALSE 59128
// exit ;
59126: GO 59569
// x := GetX ( enemy_unit ) ;
59128: LD_ADDR_VAR 0 7
59132: PUSH
59133: LD_VAR 0 2
59137: PPUSH
59138: CALL_OW 250
59142: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59143: LD_ADDR_VAR 0 8
59147: PUSH
59148: LD_VAR 0 2
59152: PPUSH
59153: CALL_OW 251
59157: ST_TO_ADDR
// if not x or not y then
59158: LD_VAR 0 7
59162: NOT
59163: PUSH
59164: LD_VAR 0 8
59168: NOT
59169: OR
59170: IFFALSE 59174
// exit ;
59172: GO 59569
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59174: LD_ADDR_VAR 0 6
59178: PUSH
59179: LD_VAR 0 7
59183: PPUSH
59184: LD_INT 0
59186: PPUSH
59187: LD_INT 4
59189: PPUSH
59190: CALL_OW 272
59194: PUSH
59195: LD_VAR 0 8
59199: PPUSH
59200: LD_INT 0
59202: PPUSH
59203: LD_INT 4
59205: PPUSH
59206: CALL_OW 273
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_VAR 0 7
59219: PPUSH
59220: LD_INT 1
59222: PPUSH
59223: LD_INT 4
59225: PPUSH
59226: CALL_OW 272
59230: PUSH
59231: LD_VAR 0 8
59235: PPUSH
59236: LD_INT 1
59238: PPUSH
59239: LD_INT 4
59241: PPUSH
59242: CALL_OW 273
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_VAR 0 7
59255: PPUSH
59256: LD_INT 2
59258: PPUSH
59259: LD_INT 4
59261: PPUSH
59262: CALL_OW 272
59266: PUSH
59267: LD_VAR 0 8
59271: PPUSH
59272: LD_INT 2
59274: PPUSH
59275: LD_INT 4
59277: PPUSH
59278: CALL_OW 273
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_VAR 0 7
59291: PPUSH
59292: LD_INT 3
59294: PPUSH
59295: LD_INT 4
59297: PPUSH
59298: CALL_OW 272
59302: PUSH
59303: LD_VAR 0 8
59307: PPUSH
59308: LD_INT 3
59310: PPUSH
59311: LD_INT 4
59313: PPUSH
59314: CALL_OW 273
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_VAR 0 7
59327: PPUSH
59328: LD_INT 4
59330: PPUSH
59331: LD_INT 4
59333: PPUSH
59334: CALL_OW 272
59338: PUSH
59339: LD_VAR 0 8
59343: PPUSH
59344: LD_INT 4
59346: PPUSH
59347: LD_INT 4
59349: PPUSH
59350: CALL_OW 273
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_VAR 0 7
59363: PPUSH
59364: LD_INT 5
59366: PPUSH
59367: LD_INT 4
59369: PPUSH
59370: CALL_OW 272
59374: PUSH
59375: LD_VAR 0 8
59379: PPUSH
59380: LD_INT 5
59382: PPUSH
59383: LD_INT 4
59385: PPUSH
59386: CALL_OW 273
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: ST_TO_ADDR
// for i = tmp downto 1 do
59403: LD_ADDR_VAR 0 4
59407: PUSH
59408: DOUBLE
59409: LD_VAR 0 6
59413: INC
59414: ST_TO_ADDR
59415: LD_INT 1
59417: PUSH
59418: FOR_DOWNTO
59419: IFFALSE 59520
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59421: LD_VAR 0 6
59425: PUSH
59426: LD_VAR 0 4
59430: ARRAY
59431: PUSH
59432: LD_INT 1
59434: ARRAY
59435: PPUSH
59436: LD_VAR 0 6
59440: PUSH
59441: LD_VAR 0 4
59445: ARRAY
59446: PUSH
59447: LD_INT 2
59449: ARRAY
59450: PPUSH
59451: CALL_OW 488
59455: NOT
59456: PUSH
59457: LD_VAR 0 6
59461: PUSH
59462: LD_VAR 0 4
59466: ARRAY
59467: PUSH
59468: LD_INT 1
59470: ARRAY
59471: PPUSH
59472: LD_VAR 0 6
59476: PUSH
59477: LD_VAR 0 4
59481: ARRAY
59482: PUSH
59483: LD_INT 2
59485: ARRAY
59486: PPUSH
59487: CALL_OW 428
59491: PUSH
59492: LD_INT 0
59494: NONEQUAL
59495: OR
59496: IFFALSE 59518
// tmp := Delete ( tmp , i ) ;
59498: LD_ADDR_VAR 0 6
59502: PUSH
59503: LD_VAR 0 6
59507: PPUSH
59508: LD_VAR 0 4
59512: PPUSH
59513: CALL_OW 3
59517: ST_TO_ADDR
59518: GO 59418
59520: POP
59521: POP
// j := GetClosestHex ( unit , tmp ) ;
59522: LD_ADDR_VAR 0 5
59526: PUSH
59527: LD_VAR 0 1
59531: PPUSH
59532: LD_VAR 0 6
59536: PPUSH
59537: CALL 58822 0 2
59541: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59542: LD_VAR 0 1
59546: PPUSH
59547: LD_VAR 0 5
59551: PUSH
59552: LD_INT 1
59554: ARRAY
59555: PPUSH
59556: LD_VAR 0 5
59560: PUSH
59561: LD_INT 2
59563: ARRAY
59564: PPUSH
59565: CALL_OW 111
// end ;
59569: LD_VAR 0 3
59573: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59574: LD_INT 0
59576: PPUSH
59577: PPUSH
59578: PPUSH
// uc_side = 0 ;
59579: LD_ADDR_OWVAR 20
59583: PUSH
59584: LD_INT 0
59586: ST_TO_ADDR
// uc_nation = 0 ;
59587: LD_ADDR_OWVAR 21
59591: PUSH
59592: LD_INT 0
59594: ST_TO_ADDR
// InitHc_All ( ) ;
59595: CALL_OW 584
// InitVc ;
59599: CALL_OW 20
// if mastodonts then
59603: LD_VAR 0 6
59607: IFFALSE 59674
// for i = 1 to mastodonts do
59609: LD_ADDR_VAR 0 11
59613: PUSH
59614: DOUBLE
59615: LD_INT 1
59617: DEC
59618: ST_TO_ADDR
59619: LD_VAR 0 6
59623: PUSH
59624: FOR_TO
59625: IFFALSE 59672
// begin vc_chassis := 31 ;
59627: LD_ADDR_OWVAR 37
59631: PUSH
59632: LD_INT 31
59634: ST_TO_ADDR
// vc_control := control_rider ;
59635: LD_ADDR_OWVAR 38
59639: PUSH
59640: LD_INT 4
59642: ST_TO_ADDR
// animal := CreateVehicle ;
59643: LD_ADDR_VAR 0 12
59647: PUSH
59648: CALL_OW 45
59652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59653: LD_VAR 0 12
59657: PPUSH
59658: LD_VAR 0 8
59662: PPUSH
59663: LD_INT 0
59665: PPUSH
59666: CALL 61809 0 3
// end ;
59670: GO 59624
59672: POP
59673: POP
// if horses then
59674: LD_VAR 0 5
59678: IFFALSE 59745
// for i = 1 to horses do
59680: LD_ADDR_VAR 0 11
59684: PUSH
59685: DOUBLE
59686: LD_INT 1
59688: DEC
59689: ST_TO_ADDR
59690: LD_VAR 0 5
59694: PUSH
59695: FOR_TO
59696: IFFALSE 59743
// begin hc_class := 21 ;
59698: LD_ADDR_OWVAR 28
59702: PUSH
59703: LD_INT 21
59705: ST_TO_ADDR
// hc_gallery :=  ;
59706: LD_ADDR_OWVAR 33
59710: PUSH
59711: LD_STRING 
59713: ST_TO_ADDR
// animal := CreateHuman ;
59714: LD_ADDR_VAR 0 12
59718: PUSH
59719: CALL_OW 44
59723: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59724: LD_VAR 0 12
59728: PPUSH
59729: LD_VAR 0 8
59733: PPUSH
59734: LD_INT 0
59736: PPUSH
59737: CALL 61809 0 3
// end ;
59741: GO 59695
59743: POP
59744: POP
// if birds then
59745: LD_VAR 0 1
59749: IFFALSE 59816
// for i = 1 to birds do
59751: LD_ADDR_VAR 0 11
59755: PUSH
59756: DOUBLE
59757: LD_INT 1
59759: DEC
59760: ST_TO_ADDR
59761: LD_VAR 0 1
59765: PUSH
59766: FOR_TO
59767: IFFALSE 59814
// begin hc_class = 18 ;
59769: LD_ADDR_OWVAR 28
59773: PUSH
59774: LD_INT 18
59776: ST_TO_ADDR
// hc_gallery =  ;
59777: LD_ADDR_OWVAR 33
59781: PUSH
59782: LD_STRING 
59784: ST_TO_ADDR
// animal := CreateHuman ;
59785: LD_ADDR_VAR 0 12
59789: PUSH
59790: CALL_OW 44
59794: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59795: LD_VAR 0 12
59799: PPUSH
59800: LD_VAR 0 8
59804: PPUSH
59805: LD_INT 0
59807: PPUSH
59808: CALL 61809 0 3
// end ;
59812: GO 59766
59814: POP
59815: POP
// if tigers then
59816: LD_VAR 0 2
59820: IFFALSE 59904
// for i = 1 to tigers do
59822: LD_ADDR_VAR 0 11
59826: PUSH
59827: DOUBLE
59828: LD_INT 1
59830: DEC
59831: ST_TO_ADDR
59832: LD_VAR 0 2
59836: PUSH
59837: FOR_TO
59838: IFFALSE 59902
// begin hc_class = class_tiger ;
59840: LD_ADDR_OWVAR 28
59844: PUSH
59845: LD_INT 14
59847: ST_TO_ADDR
// hc_gallery =  ;
59848: LD_ADDR_OWVAR 33
59852: PUSH
59853: LD_STRING 
59855: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59856: LD_ADDR_OWVAR 35
59860: PUSH
59861: LD_INT 7
59863: NEG
59864: PPUSH
59865: LD_INT 7
59867: PPUSH
59868: CALL_OW 12
59872: ST_TO_ADDR
// animal := CreateHuman ;
59873: LD_ADDR_VAR 0 12
59877: PUSH
59878: CALL_OW 44
59882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59883: LD_VAR 0 12
59887: PPUSH
59888: LD_VAR 0 8
59892: PPUSH
59893: LD_INT 0
59895: PPUSH
59896: CALL 61809 0 3
// end ;
59900: GO 59837
59902: POP
59903: POP
// if apemans then
59904: LD_VAR 0 3
59908: IFFALSE 60031
// for i = 1 to apemans do
59910: LD_ADDR_VAR 0 11
59914: PUSH
59915: DOUBLE
59916: LD_INT 1
59918: DEC
59919: ST_TO_ADDR
59920: LD_VAR 0 3
59924: PUSH
59925: FOR_TO
59926: IFFALSE 60029
// begin hc_class = class_apeman ;
59928: LD_ADDR_OWVAR 28
59932: PUSH
59933: LD_INT 12
59935: ST_TO_ADDR
// hc_gallery =  ;
59936: LD_ADDR_OWVAR 33
59940: PUSH
59941: LD_STRING 
59943: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59944: LD_ADDR_OWVAR 35
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PPUSH
59953: LD_INT 2
59955: PPUSH
59956: CALL_OW 12
59960: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59961: LD_ADDR_OWVAR 31
59965: PUSH
59966: LD_INT 1
59968: PPUSH
59969: LD_INT 3
59971: PPUSH
59972: CALL_OW 12
59976: PUSH
59977: LD_INT 1
59979: PPUSH
59980: LD_INT 3
59982: PPUSH
59983: CALL_OW 12
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: ST_TO_ADDR
// animal := CreateHuman ;
60000: LD_ADDR_VAR 0 12
60004: PUSH
60005: CALL_OW 44
60009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60010: LD_VAR 0 12
60014: PPUSH
60015: LD_VAR 0 8
60019: PPUSH
60020: LD_INT 0
60022: PPUSH
60023: CALL 61809 0 3
// end ;
60027: GO 59925
60029: POP
60030: POP
// if enchidnas then
60031: LD_VAR 0 4
60035: IFFALSE 60102
// for i = 1 to enchidnas do
60037: LD_ADDR_VAR 0 11
60041: PUSH
60042: DOUBLE
60043: LD_INT 1
60045: DEC
60046: ST_TO_ADDR
60047: LD_VAR 0 4
60051: PUSH
60052: FOR_TO
60053: IFFALSE 60100
// begin hc_class = 13 ;
60055: LD_ADDR_OWVAR 28
60059: PUSH
60060: LD_INT 13
60062: ST_TO_ADDR
// hc_gallery =  ;
60063: LD_ADDR_OWVAR 33
60067: PUSH
60068: LD_STRING 
60070: ST_TO_ADDR
// animal := CreateHuman ;
60071: LD_ADDR_VAR 0 12
60075: PUSH
60076: CALL_OW 44
60080: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60081: LD_VAR 0 12
60085: PPUSH
60086: LD_VAR 0 8
60090: PPUSH
60091: LD_INT 0
60093: PPUSH
60094: CALL 61809 0 3
// end ;
60098: GO 60052
60100: POP
60101: POP
// if fishes then
60102: LD_VAR 0 7
60106: IFFALSE 60173
// for i = 1 to fishes do
60108: LD_ADDR_VAR 0 11
60112: PUSH
60113: DOUBLE
60114: LD_INT 1
60116: DEC
60117: ST_TO_ADDR
60118: LD_VAR 0 7
60122: PUSH
60123: FOR_TO
60124: IFFALSE 60171
// begin hc_class = 20 ;
60126: LD_ADDR_OWVAR 28
60130: PUSH
60131: LD_INT 20
60133: ST_TO_ADDR
// hc_gallery =  ;
60134: LD_ADDR_OWVAR 33
60138: PUSH
60139: LD_STRING 
60141: ST_TO_ADDR
// animal := CreateHuman ;
60142: LD_ADDR_VAR 0 12
60146: PUSH
60147: CALL_OW 44
60151: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60152: LD_VAR 0 12
60156: PPUSH
60157: LD_VAR 0 9
60161: PPUSH
60162: LD_INT 0
60164: PPUSH
60165: CALL 61809 0 3
// end ;
60169: GO 60123
60171: POP
60172: POP
// end ;
60173: LD_VAR 0 10
60177: RET
// export function WantHeal ( sci , unit ) ; begin
60178: LD_INT 0
60180: PPUSH
// if GetTaskList ( sci ) > 0 then
60181: LD_VAR 0 1
60185: PPUSH
60186: CALL_OW 437
60190: PUSH
60191: LD_INT 0
60193: GREATER
60194: IFFALSE 60264
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60196: LD_VAR 0 1
60200: PPUSH
60201: CALL_OW 437
60205: PUSH
60206: LD_INT 1
60208: ARRAY
60209: PUSH
60210: LD_INT 1
60212: ARRAY
60213: PUSH
60214: LD_STRING l
60216: EQUAL
60217: PUSH
60218: LD_VAR 0 1
60222: PPUSH
60223: CALL_OW 437
60227: PUSH
60228: LD_INT 1
60230: ARRAY
60231: PUSH
60232: LD_INT 4
60234: ARRAY
60235: PUSH
60236: LD_VAR 0 2
60240: EQUAL
60241: AND
60242: IFFALSE 60254
// result := true else
60244: LD_ADDR_VAR 0 3
60248: PUSH
60249: LD_INT 1
60251: ST_TO_ADDR
60252: GO 60262
// result := false ;
60254: LD_ADDR_VAR 0 3
60258: PUSH
60259: LD_INT 0
60261: ST_TO_ADDR
// end else
60262: GO 60272
// result := false ;
60264: LD_ADDR_VAR 0 3
60268: PUSH
60269: LD_INT 0
60271: ST_TO_ADDR
// end ;
60272: LD_VAR 0 3
60276: RET
// export function HealTarget ( sci ) ; begin
60277: LD_INT 0
60279: PPUSH
// if not sci then
60280: LD_VAR 0 1
60284: NOT
60285: IFFALSE 60289
// exit ;
60287: GO 60354
// result := 0 ;
60289: LD_ADDR_VAR 0 2
60293: PUSH
60294: LD_INT 0
60296: ST_TO_ADDR
// if GetTaskList ( sci ) then
60297: LD_VAR 0 1
60301: PPUSH
60302: CALL_OW 437
60306: IFFALSE 60354
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60308: LD_VAR 0 1
60312: PPUSH
60313: CALL_OW 437
60317: PUSH
60318: LD_INT 1
60320: ARRAY
60321: PUSH
60322: LD_INT 1
60324: ARRAY
60325: PUSH
60326: LD_STRING l
60328: EQUAL
60329: IFFALSE 60354
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60331: LD_ADDR_VAR 0 2
60335: PUSH
60336: LD_VAR 0 1
60340: PPUSH
60341: CALL_OW 437
60345: PUSH
60346: LD_INT 1
60348: ARRAY
60349: PUSH
60350: LD_INT 4
60352: ARRAY
60353: ST_TO_ADDR
// end ;
60354: LD_VAR 0 2
60358: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60359: LD_INT 0
60361: PPUSH
60362: PPUSH
60363: PPUSH
60364: PPUSH
// if not base_units then
60365: LD_VAR 0 1
60369: NOT
60370: IFFALSE 60374
// exit ;
60372: GO 60461
// result := false ;
60374: LD_ADDR_VAR 0 2
60378: PUSH
60379: LD_INT 0
60381: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60382: LD_ADDR_VAR 0 5
60386: PUSH
60387: LD_VAR 0 1
60391: PPUSH
60392: LD_INT 21
60394: PUSH
60395: LD_INT 3
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PPUSH
60402: CALL_OW 72
60406: ST_TO_ADDR
// if not tmp then
60407: LD_VAR 0 5
60411: NOT
60412: IFFALSE 60416
// exit ;
60414: GO 60461
// for i in tmp do
60416: LD_ADDR_VAR 0 3
60420: PUSH
60421: LD_VAR 0 5
60425: PUSH
60426: FOR_IN
60427: IFFALSE 60459
// begin result := EnemyInRange ( i , 22 ) ;
60429: LD_ADDR_VAR 0 2
60433: PUSH
60434: LD_VAR 0 3
60438: PPUSH
60439: LD_INT 22
60441: PPUSH
60442: CALL 58697 0 2
60446: ST_TO_ADDR
// if result then
60447: LD_VAR 0 2
60451: IFFALSE 60457
// exit ;
60453: POP
60454: POP
60455: GO 60461
// end ;
60457: GO 60426
60459: POP
60460: POP
// end ;
60461: LD_VAR 0 2
60465: RET
// export function FilterByTag ( units , tag ) ; begin
60466: LD_INT 0
60468: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60469: LD_ADDR_VAR 0 3
60473: PUSH
60474: LD_VAR 0 1
60478: PPUSH
60479: LD_INT 120
60481: PUSH
60482: LD_VAR 0 2
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PPUSH
60491: CALL_OW 72
60495: ST_TO_ADDR
// end ;
60496: LD_VAR 0 3
60500: RET
// export function IsDriver ( un ) ; begin
60501: LD_INT 0
60503: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60504: LD_ADDR_VAR 0 2
60508: PUSH
60509: LD_VAR 0 1
60513: PUSH
60514: LD_INT 55
60516: PUSH
60517: EMPTY
60518: LIST
60519: PPUSH
60520: CALL_OW 69
60524: IN
60525: ST_TO_ADDR
// end ;
60526: LD_VAR 0 2
60530: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60531: LD_INT 0
60533: PPUSH
60534: PPUSH
// list := [ ] ;
60535: LD_ADDR_VAR 0 5
60539: PUSH
60540: EMPTY
60541: ST_TO_ADDR
// case d of 0 :
60542: LD_VAR 0 3
60546: PUSH
60547: LD_INT 0
60549: DOUBLE
60550: EQUAL
60551: IFTRUE 60555
60553: GO 60688
60555: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60556: LD_ADDR_VAR 0 5
60560: PUSH
60561: LD_VAR 0 1
60565: PUSH
60566: LD_INT 4
60568: MINUS
60569: PUSH
60570: LD_VAR 0 2
60574: PUSH
60575: LD_INT 4
60577: MINUS
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: LIST
60586: PUSH
60587: LD_VAR 0 1
60591: PUSH
60592: LD_INT 3
60594: MINUS
60595: PUSH
60596: LD_VAR 0 2
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: PUSH
60609: LD_VAR 0 1
60613: PUSH
60614: LD_INT 4
60616: PLUS
60617: PUSH
60618: LD_VAR 0 2
60622: PUSH
60623: LD_INT 4
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: LIST
60630: PUSH
60631: LD_VAR 0 1
60635: PUSH
60636: LD_INT 3
60638: PLUS
60639: PUSH
60640: LD_VAR 0 2
60644: PUSH
60645: LD_INT 3
60647: PLUS
60648: PUSH
60649: LD_INT 5
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: LIST
60656: PUSH
60657: LD_VAR 0 1
60661: PUSH
60662: LD_VAR 0 2
60666: PUSH
60667: LD_INT 4
60669: PLUS
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: ST_TO_ADDR
// end ; 1 :
60686: GO 61386
60688: LD_INT 1
60690: DOUBLE
60691: EQUAL
60692: IFTRUE 60696
60694: GO 60829
60696: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60697: LD_ADDR_VAR 0 5
60701: PUSH
60702: LD_VAR 0 1
60706: PUSH
60707: LD_VAR 0 2
60711: PUSH
60712: LD_INT 4
60714: MINUS
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: PUSH
60724: LD_VAR 0 1
60728: PUSH
60729: LD_INT 3
60731: MINUS
60732: PUSH
60733: LD_VAR 0 2
60737: PUSH
60738: LD_INT 3
60740: MINUS
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: LIST
60749: PUSH
60750: LD_VAR 0 1
60754: PUSH
60755: LD_INT 4
60757: MINUS
60758: PUSH
60759: LD_VAR 0 2
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: PUSH
60772: LD_VAR 0 1
60776: PUSH
60777: LD_VAR 0 2
60781: PUSH
60782: LD_INT 3
60784: PLUS
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: LIST
60793: PUSH
60794: LD_VAR 0 1
60798: PUSH
60799: LD_INT 4
60801: PLUS
60802: PUSH
60803: LD_VAR 0 2
60807: PUSH
60808: LD_INT 4
60810: PLUS
60811: PUSH
60812: LD_INT 5
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: ST_TO_ADDR
// end ; 2 :
60827: GO 61386
60829: LD_INT 2
60831: DOUBLE
60832: EQUAL
60833: IFTRUE 60837
60835: GO 60966
60837: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60838: LD_ADDR_VAR 0 5
60842: PUSH
60843: LD_VAR 0 1
60847: PUSH
60848: LD_VAR 0 2
60852: PUSH
60853: LD_INT 3
60855: MINUS
60856: PUSH
60857: LD_INT 3
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: PUSH
60865: LD_VAR 0 1
60869: PUSH
60870: LD_INT 4
60872: PLUS
60873: PUSH
60874: LD_VAR 0 2
60878: PUSH
60879: LD_INT 4
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: LIST
60886: PUSH
60887: LD_VAR 0 1
60891: PUSH
60892: LD_VAR 0 2
60896: PUSH
60897: LD_INT 4
60899: PLUS
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: LIST
60908: PUSH
60909: LD_VAR 0 1
60913: PUSH
60914: LD_INT 3
60916: MINUS
60917: PUSH
60918: LD_VAR 0 2
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: LIST
60930: PUSH
60931: LD_VAR 0 1
60935: PUSH
60936: LD_INT 4
60938: MINUS
60939: PUSH
60940: LD_VAR 0 2
60944: PUSH
60945: LD_INT 4
60947: MINUS
60948: PUSH
60949: LD_INT 2
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: LIST
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: ST_TO_ADDR
// end ; 3 :
60964: GO 61386
60966: LD_INT 3
60968: DOUBLE
60969: EQUAL
60970: IFTRUE 60974
60972: GO 61107
60974: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60975: LD_ADDR_VAR 0 5
60979: PUSH
60980: LD_VAR 0 1
60984: PUSH
60985: LD_INT 3
60987: PLUS
60988: PUSH
60989: LD_VAR 0 2
60993: PUSH
60994: LD_INT 4
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: PUSH
61002: LD_VAR 0 1
61006: PUSH
61007: LD_INT 4
61009: PLUS
61010: PUSH
61011: LD_VAR 0 2
61015: PUSH
61016: LD_INT 4
61018: PLUS
61019: PUSH
61020: LD_INT 5
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: LIST
61027: PUSH
61028: LD_VAR 0 1
61032: PUSH
61033: LD_INT 4
61035: MINUS
61036: PUSH
61037: LD_VAR 0 2
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: PUSH
61050: LD_VAR 0 1
61054: PUSH
61055: LD_VAR 0 2
61059: PUSH
61060: LD_INT 4
61062: MINUS
61063: PUSH
61064: LD_INT 3
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: PUSH
61072: LD_VAR 0 1
61076: PUSH
61077: LD_INT 3
61079: MINUS
61080: PUSH
61081: LD_VAR 0 2
61085: PUSH
61086: LD_INT 3
61088: MINUS
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: LIST
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: ST_TO_ADDR
// end ; 4 :
61105: GO 61386
61107: LD_INT 4
61109: DOUBLE
61110: EQUAL
61111: IFTRUE 61115
61113: GO 61248
61115: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61116: LD_ADDR_VAR 0 5
61120: PUSH
61121: LD_VAR 0 1
61125: PUSH
61126: LD_VAR 0 2
61130: PUSH
61131: LD_INT 4
61133: PLUS
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: LIST
61142: PUSH
61143: LD_VAR 0 1
61147: PUSH
61148: LD_INT 3
61150: PLUS
61151: PUSH
61152: LD_VAR 0 2
61156: PUSH
61157: LD_INT 3
61159: PLUS
61160: PUSH
61161: LD_INT 5
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: LIST
61168: PUSH
61169: LD_VAR 0 1
61173: PUSH
61174: LD_INT 4
61176: PLUS
61177: PUSH
61178: LD_VAR 0 2
61182: PUSH
61183: LD_INT 4
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: LIST
61190: PUSH
61191: LD_VAR 0 1
61195: PUSH
61196: LD_VAR 0 2
61200: PUSH
61201: LD_INT 3
61203: MINUS
61204: PUSH
61205: LD_INT 3
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: LIST
61212: PUSH
61213: LD_VAR 0 1
61217: PUSH
61218: LD_INT 4
61220: MINUS
61221: PUSH
61222: LD_VAR 0 2
61226: PUSH
61227: LD_INT 4
61229: MINUS
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: LIST
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: ST_TO_ADDR
// end ; 5 :
61246: GO 61386
61248: LD_INT 5
61250: DOUBLE
61251: EQUAL
61252: IFTRUE 61256
61254: GO 61385
61256: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61257: LD_ADDR_VAR 0 5
61261: PUSH
61262: LD_VAR 0 1
61266: PUSH
61267: LD_INT 4
61269: MINUS
61270: PUSH
61271: LD_VAR 0 2
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: LIST
61283: PUSH
61284: LD_VAR 0 1
61288: PUSH
61289: LD_VAR 0 2
61293: PUSH
61294: LD_INT 4
61296: MINUS
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: LIST
61305: PUSH
61306: LD_VAR 0 1
61310: PUSH
61311: LD_INT 4
61313: PLUS
61314: PUSH
61315: LD_VAR 0 2
61319: PUSH
61320: LD_INT 4
61322: PLUS
61323: PUSH
61324: LD_INT 5
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: LIST
61331: PUSH
61332: LD_VAR 0 1
61336: PUSH
61337: LD_INT 3
61339: PLUS
61340: PUSH
61341: LD_VAR 0 2
61345: PUSH
61346: LD_INT 4
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: LIST
61353: PUSH
61354: LD_VAR 0 1
61358: PUSH
61359: LD_VAR 0 2
61363: PUSH
61364: LD_INT 3
61366: PLUS
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: LIST
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: ST_TO_ADDR
// end ; end ;
61383: GO 61386
61385: POP
// result := list ;
61386: LD_ADDR_VAR 0 4
61390: PUSH
61391: LD_VAR 0 5
61395: ST_TO_ADDR
// end ;
61396: LD_VAR 0 4
61400: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61401: LD_INT 0
61403: PPUSH
61404: PPUSH
61405: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61406: LD_VAR 0 1
61410: NOT
61411: PUSH
61412: LD_VAR 0 2
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: LD_INT 4
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: IN
61435: NOT
61436: OR
61437: IFFALSE 61441
// exit ;
61439: GO 61533
// tmp := [ ] ;
61441: LD_ADDR_VAR 0 5
61445: PUSH
61446: EMPTY
61447: ST_TO_ADDR
// for i in units do
61448: LD_ADDR_VAR 0 4
61452: PUSH
61453: LD_VAR 0 1
61457: PUSH
61458: FOR_IN
61459: IFFALSE 61502
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61461: LD_ADDR_VAR 0 5
61465: PUSH
61466: LD_VAR 0 5
61470: PPUSH
61471: LD_VAR 0 5
61475: PUSH
61476: LD_INT 1
61478: PLUS
61479: PPUSH
61480: LD_VAR 0 4
61484: PPUSH
61485: LD_VAR 0 2
61489: PPUSH
61490: CALL_OW 259
61494: PPUSH
61495: CALL_OW 2
61499: ST_TO_ADDR
61500: GO 61458
61502: POP
61503: POP
// if not tmp then
61504: LD_VAR 0 5
61508: NOT
61509: IFFALSE 61513
// exit ;
61511: GO 61533
// result := SortListByListDesc ( units , tmp ) ;
61513: LD_ADDR_VAR 0 3
61517: PUSH
61518: LD_VAR 0 1
61522: PPUSH
61523: LD_VAR 0 5
61527: PPUSH
61528: CALL_OW 77
61532: ST_TO_ADDR
// end ;
61533: LD_VAR 0 3
61537: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61538: LD_INT 0
61540: PPUSH
61541: PPUSH
61542: PPUSH
// result := false ;
61543: LD_ADDR_VAR 0 3
61547: PUSH
61548: LD_INT 0
61550: ST_TO_ADDR
// x := GetX ( building ) ;
61551: LD_ADDR_VAR 0 4
61555: PUSH
61556: LD_VAR 0 2
61560: PPUSH
61561: CALL_OW 250
61565: ST_TO_ADDR
// y := GetY ( building ) ;
61566: LD_ADDR_VAR 0 5
61570: PUSH
61571: LD_VAR 0 2
61575: PPUSH
61576: CALL_OW 251
61580: ST_TO_ADDR
// if not building or not x or not y then
61581: LD_VAR 0 2
61585: NOT
61586: PUSH
61587: LD_VAR 0 4
61591: NOT
61592: OR
61593: PUSH
61594: LD_VAR 0 5
61598: NOT
61599: OR
61600: IFFALSE 61604
// exit ;
61602: GO 61696
// if GetTaskList ( unit ) then
61604: LD_VAR 0 1
61608: PPUSH
61609: CALL_OW 437
61613: IFFALSE 61696
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61615: LD_STRING e
61617: PUSH
61618: LD_VAR 0 1
61622: PPUSH
61623: CALL_OW 437
61627: PUSH
61628: LD_INT 1
61630: ARRAY
61631: PUSH
61632: LD_INT 1
61634: ARRAY
61635: EQUAL
61636: PUSH
61637: LD_VAR 0 4
61641: PUSH
61642: LD_VAR 0 1
61646: PPUSH
61647: CALL_OW 437
61651: PUSH
61652: LD_INT 1
61654: ARRAY
61655: PUSH
61656: LD_INT 2
61658: ARRAY
61659: EQUAL
61660: AND
61661: PUSH
61662: LD_VAR 0 5
61666: PUSH
61667: LD_VAR 0 1
61671: PPUSH
61672: CALL_OW 437
61676: PUSH
61677: LD_INT 1
61679: ARRAY
61680: PUSH
61681: LD_INT 3
61683: ARRAY
61684: EQUAL
61685: AND
61686: IFFALSE 61696
// result := true end ;
61688: LD_ADDR_VAR 0 3
61692: PUSH
61693: LD_INT 1
61695: ST_TO_ADDR
// end ;
61696: LD_VAR 0 3
61700: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61701: LD_INT 0
61703: PPUSH
// result := false ;
61704: LD_ADDR_VAR 0 4
61708: PUSH
61709: LD_INT 0
61711: ST_TO_ADDR
// if GetTaskList ( unit ) then
61712: LD_VAR 0 1
61716: PPUSH
61717: CALL_OW 437
61721: IFFALSE 61804
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61723: LD_STRING M
61725: PUSH
61726: LD_VAR 0 1
61730: PPUSH
61731: CALL_OW 437
61735: PUSH
61736: LD_INT 1
61738: ARRAY
61739: PUSH
61740: LD_INT 1
61742: ARRAY
61743: EQUAL
61744: PUSH
61745: LD_VAR 0 2
61749: PUSH
61750: LD_VAR 0 1
61754: PPUSH
61755: CALL_OW 437
61759: PUSH
61760: LD_INT 1
61762: ARRAY
61763: PUSH
61764: LD_INT 2
61766: ARRAY
61767: EQUAL
61768: AND
61769: PUSH
61770: LD_VAR 0 3
61774: PUSH
61775: LD_VAR 0 1
61779: PPUSH
61780: CALL_OW 437
61784: PUSH
61785: LD_INT 1
61787: ARRAY
61788: PUSH
61789: LD_INT 3
61791: ARRAY
61792: EQUAL
61793: AND
61794: IFFALSE 61804
// result := true ;
61796: LD_ADDR_VAR 0 4
61800: PUSH
61801: LD_INT 1
61803: ST_TO_ADDR
// end ; end ;
61804: LD_VAR 0 4
61808: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61809: LD_INT 0
61811: PPUSH
61812: PPUSH
61813: PPUSH
61814: PPUSH
// if not unit or not area then
61815: LD_VAR 0 1
61819: NOT
61820: PUSH
61821: LD_VAR 0 2
61825: NOT
61826: OR
61827: IFFALSE 61831
// exit ;
61829: GO 61995
// tmp := AreaToList ( area , i ) ;
61831: LD_ADDR_VAR 0 6
61835: PUSH
61836: LD_VAR 0 2
61840: PPUSH
61841: LD_VAR 0 5
61845: PPUSH
61846: CALL_OW 517
61850: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61851: LD_ADDR_VAR 0 5
61855: PUSH
61856: DOUBLE
61857: LD_INT 1
61859: DEC
61860: ST_TO_ADDR
61861: LD_VAR 0 6
61865: PUSH
61866: LD_INT 1
61868: ARRAY
61869: PUSH
61870: FOR_TO
61871: IFFALSE 61993
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61873: LD_ADDR_VAR 0 7
61877: PUSH
61878: LD_VAR 0 6
61882: PUSH
61883: LD_INT 1
61885: ARRAY
61886: PUSH
61887: LD_VAR 0 5
61891: ARRAY
61892: PUSH
61893: LD_VAR 0 6
61897: PUSH
61898: LD_INT 2
61900: ARRAY
61901: PUSH
61902: LD_VAR 0 5
61906: ARRAY
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61912: LD_VAR 0 7
61916: PUSH
61917: LD_INT 1
61919: ARRAY
61920: PPUSH
61921: LD_VAR 0 7
61925: PUSH
61926: LD_INT 2
61928: ARRAY
61929: PPUSH
61930: CALL_OW 428
61934: PUSH
61935: LD_INT 0
61937: EQUAL
61938: IFFALSE 61991
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61940: LD_VAR 0 1
61944: PPUSH
61945: LD_VAR 0 7
61949: PUSH
61950: LD_INT 1
61952: ARRAY
61953: PPUSH
61954: LD_VAR 0 7
61958: PUSH
61959: LD_INT 2
61961: ARRAY
61962: PPUSH
61963: LD_VAR 0 3
61967: PPUSH
61968: CALL_OW 48
// result := IsPlaced ( unit ) ;
61972: LD_ADDR_VAR 0 4
61976: PUSH
61977: LD_VAR 0 1
61981: PPUSH
61982: CALL_OW 305
61986: ST_TO_ADDR
// exit ;
61987: POP
61988: POP
61989: GO 61995
// end ; end ;
61991: GO 61870
61993: POP
61994: POP
// end ;
61995: LD_VAR 0 4
61999: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62000: LD_INT 0
62002: PPUSH
62003: PPUSH
62004: PPUSH
// if not side or side > 8 then
62005: LD_VAR 0 1
62009: NOT
62010: PUSH
62011: LD_VAR 0 1
62015: PUSH
62016: LD_INT 8
62018: GREATER
62019: OR
62020: IFFALSE 62024
// exit ;
62022: GO 62211
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62024: LD_ADDR_VAR 0 4
62028: PUSH
62029: LD_INT 22
62031: PUSH
62032: LD_VAR 0 1
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 21
62043: PUSH
62044: LD_INT 3
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PPUSH
62055: CALL_OW 69
62059: ST_TO_ADDR
// if not tmp then
62060: LD_VAR 0 4
62064: NOT
62065: IFFALSE 62069
// exit ;
62067: GO 62211
// enable_addtolog := true ;
62069: LD_ADDR_OWVAR 81
62073: PUSH
62074: LD_INT 1
62076: ST_TO_ADDR
// AddToLog ( [ ) ;
62077: LD_STRING [
62079: PPUSH
62080: CALL_OW 561
// for i in tmp do
62084: LD_ADDR_VAR 0 3
62088: PUSH
62089: LD_VAR 0 4
62093: PUSH
62094: FOR_IN
62095: IFFALSE 62202
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62097: LD_STRING [
62099: PUSH
62100: LD_VAR 0 3
62104: PPUSH
62105: CALL_OW 266
62109: STR
62110: PUSH
62111: LD_STRING , 
62113: STR
62114: PUSH
62115: LD_VAR 0 3
62119: PPUSH
62120: CALL_OW 250
62124: STR
62125: PUSH
62126: LD_STRING , 
62128: STR
62129: PUSH
62130: LD_VAR 0 3
62134: PPUSH
62135: CALL_OW 251
62139: STR
62140: PUSH
62141: LD_STRING , 
62143: STR
62144: PUSH
62145: LD_VAR 0 3
62149: PPUSH
62150: CALL_OW 254
62154: STR
62155: PUSH
62156: LD_STRING , 
62158: STR
62159: PUSH
62160: LD_VAR 0 3
62164: PPUSH
62165: LD_INT 1
62167: PPUSH
62168: CALL_OW 268
62172: STR
62173: PUSH
62174: LD_STRING , 
62176: STR
62177: PUSH
62178: LD_VAR 0 3
62182: PPUSH
62183: LD_INT 2
62185: PPUSH
62186: CALL_OW 268
62190: STR
62191: PUSH
62192: LD_STRING ],
62194: STR
62195: PPUSH
62196: CALL_OW 561
// end ;
62200: GO 62094
62202: POP
62203: POP
// AddToLog ( ]; ) ;
62204: LD_STRING ];
62206: PPUSH
62207: CALL_OW 561
// end ;
62211: LD_VAR 0 2
62215: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62216: LD_INT 0
62218: PPUSH
62219: PPUSH
62220: PPUSH
62221: PPUSH
62222: PPUSH
// if not area or not rate or not max then
62223: LD_VAR 0 1
62227: NOT
62228: PUSH
62229: LD_VAR 0 2
62233: NOT
62234: OR
62235: PUSH
62236: LD_VAR 0 4
62240: NOT
62241: OR
62242: IFFALSE 62246
// exit ;
62244: GO 62435
// while 1 do
62246: LD_INT 1
62248: IFFALSE 62435
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62250: LD_ADDR_VAR 0 9
62254: PUSH
62255: LD_VAR 0 1
62259: PPUSH
62260: LD_INT 1
62262: PPUSH
62263: CALL_OW 287
62267: PUSH
62268: LD_INT 10
62270: MUL
62271: ST_TO_ADDR
// r := rate / 10 ;
62272: LD_ADDR_VAR 0 7
62276: PUSH
62277: LD_VAR 0 2
62281: PUSH
62282: LD_INT 10
62284: DIVREAL
62285: ST_TO_ADDR
// time := 1 1$00 ;
62286: LD_ADDR_VAR 0 8
62290: PUSH
62291: LD_INT 2100
62293: ST_TO_ADDR
// if amount < min then
62294: LD_VAR 0 9
62298: PUSH
62299: LD_VAR 0 3
62303: LESS
62304: IFFALSE 62322
// r := r * 2 else
62306: LD_ADDR_VAR 0 7
62310: PUSH
62311: LD_VAR 0 7
62315: PUSH
62316: LD_INT 2
62318: MUL
62319: ST_TO_ADDR
62320: GO 62348
// if amount > max then
62322: LD_VAR 0 9
62326: PUSH
62327: LD_VAR 0 4
62331: GREATER
62332: IFFALSE 62348
// r := r / 2 ;
62334: LD_ADDR_VAR 0 7
62338: PUSH
62339: LD_VAR 0 7
62343: PUSH
62344: LD_INT 2
62346: DIVREAL
62347: ST_TO_ADDR
// time := time / r ;
62348: LD_ADDR_VAR 0 8
62352: PUSH
62353: LD_VAR 0 8
62357: PUSH
62358: LD_VAR 0 7
62362: DIVREAL
62363: ST_TO_ADDR
// if time < 0 then
62364: LD_VAR 0 8
62368: PUSH
62369: LD_INT 0
62371: LESS
62372: IFFALSE 62389
// time := time * - 1 ;
62374: LD_ADDR_VAR 0 8
62378: PUSH
62379: LD_VAR 0 8
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: MUL
62388: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62389: LD_VAR 0 8
62393: PUSH
62394: LD_INT 35
62396: PPUSH
62397: LD_INT 875
62399: PPUSH
62400: CALL_OW 12
62404: PLUS
62405: PPUSH
62406: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62410: LD_INT 1
62412: PPUSH
62413: LD_INT 5
62415: PPUSH
62416: CALL_OW 12
62420: PPUSH
62421: LD_VAR 0 1
62425: PPUSH
62426: LD_INT 1
62428: PPUSH
62429: CALL_OW 55
// end ;
62433: GO 62246
// end ;
62435: LD_VAR 0 5
62439: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62440: LD_INT 0
62442: PPUSH
62443: PPUSH
62444: PPUSH
62445: PPUSH
62446: PPUSH
62447: PPUSH
62448: PPUSH
62449: PPUSH
// if not turrets or not factories then
62450: LD_VAR 0 1
62454: NOT
62455: PUSH
62456: LD_VAR 0 2
62460: NOT
62461: OR
62462: IFFALSE 62466
// exit ;
62464: GO 62773
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62466: LD_ADDR_VAR 0 10
62470: PUSH
62471: LD_INT 5
62473: PUSH
62474: LD_INT 6
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: LD_INT 4
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: LD_INT 5
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 24
62508: PUSH
62509: LD_INT 25
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 23
62518: PUSH
62519: LD_INT 27
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 42
62532: PUSH
62533: LD_INT 43
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 44
62542: PUSH
62543: LD_INT 46
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 45
62552: PUSH
62553: LD_INT 47
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: LIST
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: ST_TO_ADDR
// result := [ ] ;
62570: LD_ADDR_VAR 0 3
62574: PUSH
62575: EMPTY
62576: ST_TO_ADDR
// for i in turrets do
62577: LD_ADDR_VAR 0 4
62581: PUSH
62582: LD_VAR 0 1
62586: PUSH
62587: FOR_IN
62588: IFFALSE 62771
// begin nat := GetNation ( i ) ;
62590: LD_ADDR_VAR 0 7
62594: PUSH
62595: LD_VAR 0 4
62599: PPUSH
62600: CALL_OW 248
62604: ST_TO_ADDR
// weapon := 0 ;
62605: LD_ADDR_VAR 0 8
62609: PUSH
62610: LD_INT 0
62612: ST_TO_ADDR
// if not nat then
62613: LD_VAR 0 7
62617: NOT
62618: IFFALSE 62622
// continue ;
62620: GO 62587
// for j in list [ nat ] do
62622: LD_ADDR_VAR 0 5
62626: PUSH
62627: LD_VAR 0 10
62631: PUSH
62632: LD_VAR 0 7
62636: ARRAY
62637: PUSH
62638: FOR_IN
62639: IFFALSE 62680
// if GetBWeapon ( i ) = j [ 1 ] then
62641: LD_VAR 0 4
62645: PPUSH
62646: CALL_OW 269
62650: PUSH
62651: LD_VAR 0 5
62655: PUSH
62656: LD_INT 1
62658: ARRAY
62659: EQUAL
62660: IFFALSE 62678
// begin weapon := j [ 2 ] ;
62662: LD_ADDR_VAR 0 8
62666: PUSH
62667: LD_VAR 0 5
62671: PUSH
62672: LD_INT 2
62674: ARRAY
62675: ST_TO_ADDR
// break ;
62676: GO 62680
// end ;
62678: GO 62638
62680: POP
62681: POP
// if not weapon then
62682: LD_VAR 0 8
62686: NOT
62687: IFFALSE 62691
// continue ;
62689: GO 62587
// for k in factories do
62691: LD_ADDR_VAR 0 6
62695: PUSH
62696: LD_VAR 0 2
62700: PUSH
62701: FOR_IN
62702: IFFALSE 62767
// begin weapons := AvailableWeaponList ( k ) ;
62704: LD_ADDR_VAR 0 9
62708: PUSH
62709: LD_VAR 0 6
62713: PPUSH
62714: CALL_OW 478
62718: ST_TO_ADDR
// if not weapons then
62719: LD_VAR 0 9
62723: NOT
62724: IFFALSE 62728
// continue ;
62726: GO 62701
// if weapon in weapons then
62728: LD_VAR 0 8
62732: PUSH
62733: LD_VAR 0 9
62737: IN
62738: IFFALSE 62765
// begin result := [ i , weapon ] ;
62740: LD_ADDR_VAR 0 3
62744: PUSH
62745: LD_VAR 0 4
62749: PUSH
62750: LD_VAR 0 8
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: ST_TO_ADDR
// exit ;
62759: POP
62760: POP
62761: POP
62762: POP
62763: GO 62773
// end ; end ;
62765: GO 62701
62767: POP
62768: POP
// end ;
62769: GO 62587
62771: POP
62772: POP
// end ;
62773: LD_VAR 0 3
62777: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62778: LD_INT 0
62780: PPUSH
// if not side or side > 8 then
62781: LD_VAR 0 3
62785: NOT
62786: PUSH
62787: LD_VAR 0 3
62791: PUSH
62792: LD_INT 8
62794: GREATER
62795: OR
62796: IFFALSE 62800
// exit ;
62798: GO 62859
// if not range then
62800: LD_VAR 0 4
62804: NOT
62805: IFFALSE 62816
// range := - 12 ;
62807: LD_ADDR_VAR 0 4
62811: PUSH
62812: LD_INT 12
62814: NEG
62815: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62816: LD_VAR 0 1
62820: PPUSH
62821: LD_VAR 0 2
62825: PPUSH
62826: LD_VAR 0 3
62830: PPUSH
62831: LD_VAR 0 4
62835: PPUSH
62836: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62840: LD_VAR 0 1
62844: PPUSH
62845: LD_VAR 0 2
62849: PPUSH
62850: LD_VAR 0 3
62854: PPUSH
62855: CALL_OW 331
// end ;
62859: LD_VAR 0 5
62863: RET
// export function Video ( mode ) ; begin
62864: LD_INT 0
62866: PPUSH
// ingame_video = mode ;
62867: LD_ADDR_OWVAR 52
62871: PUSH
62872: LD_VAR 0 1
62876: ST_TO_ADDR
// interface_hidden = mode ;
62877: LD_ADDR_OWVAR 54
62881: PUSH
62882: LD_VAR 0 1
62886: ST_TO_ADDR
// end ;
62887: LD_VAR 0 2
62891: RET
// export function Join ( array , element ) ; begin
62892: LD_INT 0
62894: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62895: LD_ADDR_VAR 0 3
62899: PUSH
62900: LD_VAR 0 1
62904: PPUSH
62905: LD_VAR 0 1
62909: PUSH
62910: LD_INT 1
62912: PLUS
62913: PPUSH
62914: LD_VAR 0 2
62918: PPUSH
62919: CALL_OW 1
62923: ST_TO_ADDR
// end ;
62924: LD_VAR 0 3
62928: RET
// export function JoinUnion ( array , element ) ; begin
62929: LD_INT 0
62931: PPUSH
// result := array union element ;
62932: LD_ADDR_VAR 0 3
62936: PUSH
62937: LD_VAR 0 1
62941: PUSH
62942: LD_VAR 0 2
62946: UNION
62947: ST_TO_ADDR
// end ;
62948: LD_VAR 0 3
62952: RET
// export function GetBehemoths ( side ) ; begin
62953: LD_INT 0
62955: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62956: LD_ADDR_VAR 0 2
62960: PUSH
62961: LD_INT 22
62963: PUSH
62964: LD_VAR 0 1
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 31
62975: PUSH
62976: LD_INT 25
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PPUSH
62987: CALL_OW 69
62991: ST_TO_ADDR
// end ;
62992: LD_VAR 0 2
62996: RET
// export function Shuffle ( array ) ; var i , index ; begin
62997: LD_INT 0
62999: PPUSH
63000: PPUSH
63001: PPUSH
// result := [ ] ;
63002: LD_ADDR_VAR 0 2
63006: PUSH
63007: EMPTY
63008: ST_TO_ADDR
// if not array then
63009: LD_VAR 0 1
63013: NOT
63014: IFFALSE 63018
// exit ;
63016: GO 63117
// Randomize ;
63018: CALL_OW 10
// for i = array downto 1 do
63022: LD_ADDR_VAR 0 3
63026: PUSH
63027: DOUBLE
63028: LD_VAR 0 1
63032: INC
63033: ST_TO_ADDR
63034: LD_INT 1
63036: PUSH
63037: FOR_DOWNTO
63038: IFFALSE 63115
// begin index := rand ( 1 , array ) ;
63040: LD_ADDR_VAR 0 4
63044: PUSH
63045: LD_INT 1
63047: PPUSH
63048: LD_VAR 0 1
63052: PPUSH
63053: CALL_OW 12
63057: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63058: LD_ADDR_VAR 0 2
63062: PUSH
63063: LD_VAR 0 2
63067: PPUSH
63068: LD_VAR 0 2
63072: PUSH
63073: LD_INT 1
63075: PLUS
63076: PPUSH
63077: LD_VAR 0 1
63081: PUSH
63082: LD_VAR 0 4
63086: ARRAY
63087: PPUSH
63088: CALL_OW 2
63092: ST_TO_ADDR
// array := Delete ( array , index ) ;
63093: LD_ADDR_VAR 0 1
63097: PUSH
63098: LD_VAR 0 1
63102: PPUSH
63103: LD_VAR 0 4
63107: PPUSH
63108: CALL_OW 3
63112: ST_TO_ADDR
// end ;
63113: GO 63037
63115: POP
63116: POP
// end ;
63117: LD_VAR 0 2
63121: RET
// export function GetBaseMaterials ( base ) ; begin
63122: LD_INT 0
63124: PPUSH
// result := [ 0 , 0 , 0 ] ;
63125: LD_ADDR_VAR 0 2
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// if not base then
63144: LD_VAR 0 1
63148: NOT
63149: IFFALSE 63153
// exit ;
63151: GO 63202
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63153: LD_ADDR_VAR 0 2
63157: PUSH
63158: LD_VAR 0 1
63162: PPUSH
63163: LD_INT 1
63165: PPUSH
63166: CALL_OW 275
63170: PUSH
63171: LD_VAR 0 1
63175: PPUSH
63176: LD_INT 2
63178: PPUSH
63179: CALL_OW 275
63183: PUSH
63184: LD_VAR 0 1
63188: PPUSH
63189: LD_INT 3
63191: PPUSH
63192: CALL_OW 275
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: LIST
63201: ST_TO_ADDR
// end ;
63202: LD_VAR 0 2
63206: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63207: LD_INT 0
63209: PPUSH
63210: PPUSH
// result := array ;
63211: LD_ADDR_VAR 0 3
63215: PUSH
63216: LD_VAR 0 1
63220: ST_TO_ADDR
// if size > 0 then
63221: LD_VAR 0 2
63225: PUSH
63226: LD_INT 0
63228: GREATER
63229: IFFALSE 63275
// for i := array downto size do
63231: LD_ADDR_VAR 0 4
63235: PUSH
63236: DOUBLE
63237: LD_VAR 0 1
63241: INC
63242: ST_TO_ADDR
63243: LD_VAR 0 2
63247: PUSH
63248: FOR_DOWNTO
63249: IFFALSE 63273
// result := Delete ( result , result ) ;
63251: LD_ADDR_VAR 0 3
63255: PUSH
63256: LD_VAR 0 3
63260: PPUSH
63261: LD_VAR 0 3
63265: PPUSH
63266: CALL_OW 3
63270: ST_TO_ADDR
63271: GO 63248
63273: POP
63274: POP
// end ;
63275: LD_VAR 0 3
63279: RET
// export function ComExit ( unit ) ; var tmp ; begin
63280: LD_INT 0
63282: PPUSH
63283: PPUSH
// if not IsInUnit ( unit ) then
63284: LD_VAR 0 1
63288: PPUSH
63289: CALL_OW 310
63293: NOT
63294: IFFALSE 63298
// exit ;
63296: GO 63358
// tmp := IsInUnit ( unit ) ;
63298: LD_ADDR_VAR 0 3
63302: PUSH
63303: LD_VAR 0 1
63307: PPUSH
63308: CALL_OW 310
63312: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63313: LD_VAR 0 3
63317: PPUSH
63318: CALL_OW 247
63322: PUSH
63323: LD_INT 2
63325: EQUAL
63326: IFFALSE 63339
// ComExitVehicle ( unit ) else
63328: LD_VAR 0 1
63332: PPUSH
63333: CALL_OW 121
63337: GO 63348
// ComExitBuilding ( unit ) ;
63339: LD_VAR 0 1
63343: PPUSH
63344: CALL_OW 122
// result := tmp ;
63348: LD_ADDR_VAR 0 2
63352: PUSH
63353: LD_VAR 0 3
63357: ST_TO_ADDR
// end ;
63358: LD_VAR 0 2
63362: RET
// export function ComExitAll ( units ) ; var i ; begin
63363: LD_INT 0
63365: PPUSH
63366: PPUSH
// if not units then
63367: LD_VAR 0 1
63371: NOT
63372: IFFALSE 63376
// exit ;
63374: GO 63402
// for i in units do
63376: LD_ADDR_VAR 0 3
63380: PUSH
63381: LD_VAR 0 1
63385: PUSH
63386: FOR_IN
63387: IFFALSE 63400
// ComExit ( i ) ;
63389: LD_VAR 0 3
63393: PPUSH
63394: CALL 63280 0 1
63398: GO 63386
63400: POP
63401: POP
// end ;
63402: LD_VAR 0 2
63406: RET
// export function ResetHc ; begin
63407: LD_INT 0
63409: PPUSH
// InitHc ;
63410: CALL_OW 19
// hc_importance := 0 ;
63414: LD_ADDR_OWVAR 32
63418: PUSH
63419: LD_INT 0
63421: ST_TO_ADDR
// end ;
63422: LD_VAR 0 1
63426: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63427: LD_INT 0
63429: PPUSH
63430: PPUSH
63431: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63432: LD_ADDR_VAR 0 6
63436: PUSH
63437: LD_VAR 0 1
63441: PUSH
63442: LD_VAR 0 3
63446: PLUS
63447: PUSH
63448: LD_INT 2
63450: DIV
63451: ST_TO_ADDR
// if _x < 0 then
63452: LD_VAR 0 6
63456: PUSH
63457: LD_INT 0
63459: LESS
63460: IFFALSE 63477
// _x := _x * - 1 ;
63462: LD_ADDR_VAR 0 6
63466: PUSH
63467: LD_VAR 0 6
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: MUL
63476: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63477: LD_ADDR_VAR 0 7
63481: PUSH
63482: LD_VAR 0 2
63486: PUSH
63487: LD_VAR 0 4
63491: PLUS
63492: PUSH
63493: LD_INT 2
63495: DIV
63496: ST_TO_ADDR
// if _y < 0 then
63497: LD_VAR 0 7
63501: PUSH
63502: LD_INT 0
63504: LESS
63505: IFFALSE 63522
// _y := _y * - 1 ;
63507: LD_ADDR_VAR 0 7
63511: PUSH
63512: LD_VAR 0 7
63516: PUSH
63517: LD_INT 1
63519: NEG
63520: MUL
63521: ST_TO_ADDR
// result := [ _x , _y ] ;
63522: LD_ADDR_VAR 0 5
63526: PUSH
63527: LD_VAR 0 6
63531: PUSH
63532: LD_VAR 0 7
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: ST_TO_ADDR
// end ;
63541: LD_VAR 0 5
63545: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63546: LD_INT 0
63548: PPUSH
63549: PPUSH
63550: PPUSH
63551: PPUSH
// task := GetTaskList ( unit ) ;
63552: LD_ADDR_VAR 0 7
63556: PUSH
63557: LD_VAR 0 1
63561: PPUSH
63562: CALL_OW 437
63566: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63567: LD_VAR 0 7
63571: NOT
63572: PUSH
63573: LD_VAR 0 1
63577: PPUSH
63578: LD_VAR 0 2
63582: PPUSH
63583: CALL_OW 308
63587: NOT
63588: AND
63589: IFFALSE 63593
// exit ;
63591: GO 63711
// if IsInArea ( unit , area ) then
63593: LD_VAR 0 1
63597: PPUSH
63598: LD_VAR 0 2
63602: PPUSH
63603: CALL_OW 308
63607: IFFALSE 63625
// begin ComMoveToArea ( unit , goAway ) ;
63609: LD_VAR 0 1
63613: PPUSH
63614: LD_VAR 0 3
63618: PPUSH
63619: CALL_OW 113
// exit ;
63623: GO 63711
// end ; if task [ 1 ] [ 1 ] <> M then
63625: LD_VAR 0 7
63629: PUSH
63630: LD_INT 1
63632: ARRAY
63633: PUSH
63634: LD_INT 1
63636: ARRAY
63637: PUSH
63638: LD_STRING M
63640: NONEQUAL
63641: IFFALSE 63645
// exit ;
63643: GO 63711
// x := task [ 1 ] [ 2 ] ;
63645: LD_ADDR_VAR 0 5
63649: PUSH
63650: LD_VAR 0 7
63654: PUSH
63655: LD_INT 1
63657: ARRAY
63658: PUSH
63659: LD_INT 2
63661: ARRAY
63662: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63663: LD_ADDR_VAR 0 6
63667: PUSH
63668: LD_VAR 0 7
63672: PUSH
63673: LD_INT 1
63675: ARRAY
63676: PUSH
63677: LD_INT 3
63679: ARRAY
63680: ST_TO_ADDR
// if InArea ( x , y , area ) then
63681: LD_VAR 0 5
63685: PPUSH
63686: LD_VAR 0 6
63690: PPUSH
63691: LD_VAR 0 2
63695: PPUSH
63696: CALL_OW 309
63700: IFFALSE 63711
// ComStop ( unit ) ;
63702: LD_VAR 0 1
63706: PPUSH
63707: CALL_OW 141
// end ;
63711: LD_VAR 0 4
63715: RET
// export function Abs ( value ) ; begin
63716: LD_INT 0
63718: PPUSH
// result := value ;
63719: LD_ADDR_VAR 0 2
63723: PUSH
63724: LD_VAR 0 1
63728: ST_TO_ADDR
// if value < 0 then
63729: LD_VAR 0 1
63733: PUSH
63734: LD_INT 0
63736: LESS
63737: IFFALSE 63754
// result := value * - 1 ;
63739: LD_ADDR_VAR 0 2
63743: PUSH
63744: LD_VAR 0 1
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: MUL
63753: ST_TO_ADDR
// end ;
63754: LD_VAR 0 2
63758: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63759: LD_INT 0
63761: PPUSH
63762: PPUSH
63763: PPUSH
63764: PPUSH
63765: PPUSH
63766: PPUSH
63767: PPUSH
63768: PPUSH
// if not unit or not building then
63769: LD_VAR 0 1
63773: NOT
63774: PUSH
63775: LD_VAR 0 2
63779: NOT
63780: OR
63781: IFFALSE 63785
// exit ;
63783: GO 64011
// x := GetX ( building ) ;
63785: LD_ADDR_VAR 0 4
63789: PUSH
63790: LD_VAR 0 2
63794: PPUSH
63795: CALL_OW 250
63799: ST_TO_ADDR
// y := GetY ( building ) ;
63800: LD_ADDR_VAR 0 6
63804: PUSH
63805: LD_VAR 0 2
63809: PPUSH
63810: CALL_OW 251
63814: ST_TO_ADDR
// d := GetDir ( building ) ;
63815: LD_ADDR_VAR 0 8
63819: PUSH
63820: LD_VAR 0 2
63824: PPUSH
63825: CALL_OW 254
63829: ST_TO_ADDR
// r := 4 ;
63830: LD_ADDR_VAR 0 9
63834: PUSH
63835: LD_INT 4
63837: ST_TO_ADDR
// for i := 1 to 5 do
63838: LD_ADDR_VAR 0 10
63842: PUSH
63843: DOUBLE
63844: LD_INT 1
63846: DEC
63847: ST_TO_ADDR
63848: LD_INT 5
63850: PUSH
63851: FOR_TO
63852: IFFALSE 64009
// begin _x := ShiftX ( x , d , r + i ) ;
63854: LD_ADDR_VAR 0 5
63858: PUSH
63859: LD_VAR 0 4
63863: PPUSH
63864: LD_VAR 0 8
63868: PPUSH
63869: LD_VAR 0 9
63873: PUSH
63874: LD_VAR 0 10
63878: PLUS
63879: PPUSH
63880: CALL_OW 272
63884: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63885: LD_ADDR_VAR 0 7
63889: PUSH
63890: LD_VAR 0 6
63894: PPUSH
63895: LD_VAR 0 8
63899: PPUSH
63900: LD_VAR 0 9
63904: PUSH
63905: LD_VAR 0 10
63909: PLUS
63910: PPUSH
63911: CALL_OW 273
63915: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63916: LD_VAR 0 5
63920: PPUSH
63921: LD_VAR 0 7
63925: PPUSH
63926: CALL_OW 488
63930: PUSH
63931: LD_VAR 0 5
63935: PPUSH
63936: LD_VAR 0 7
63940: PPUSH
63941: CALL_OW 428
63945: PPUSH
63946: CALL_OW 247
63950: PUSH
63951: LD_INT 3
63953: PUSH
63954: LD_INT 2
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: IN
63961: NOT
63962: AND
63963: IFFALSE 64007
// begin ComMoveXY ( unit , _x , _y ) ;
63965: LD_VAR 0 1
63969: PPUSH
63970: LD_VAR 0 5
63974: PPUSH
63975: LD_VAR 0 7
63979: PPUSH
63980: CALL_OW 111
// result := [ _x , _y ] ;
63984: LD_ADDR_VAR 0 3
63988: PUSH
63989: LD_VAR 0 5
63993: PUSH
63994: LD_VAR 0 7
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: ST_TO_ADDR
// exit ;
64003: POP
64004: POP
64005: GO 64011
// end ; end ;
64007: GO 63851
64009: POP
64010: POP
// end ;
64011: LD_VAR 0 3
64015: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64016: LD_INT 0
64018: PPUSH
64019: PPUSH
64020: PPUSH
// result := 0 ;
64021: LD_ADDR_VAR 0 3
64025: PUSH
64026: LD_INT 0
64028: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64029: LD_VAR 0 1
64033: PUSH
64034: LD_INT 0
64036: LESS
64037: PUSH
64038: LD_VAR 0 1
64042: PUSH
64043: LD_INT 8
64045: GREATER
64046: OR
64047: PUSH
64048: LD_VAR 0 2
64052: PUSH
64053: LD_INT 0
64055: LESS
64056: OR
64057: PUSH
64058: LD_VAR 0 2
64062: PUSH
64063: LD_INT 8
64065: GREATER
64066: OR
64067: IFFALSE 64071
// exit ;
64069: GO 64146
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64071: LD_ADDR_VAR 0 4
64075: PUSH
64076: LD_INT 22
64078: PUSH
64079: LD_VAR 0 2
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PPUSH
64088: CALL_OW 69
64092: PUSH
64093: FOR_IN
64094: IFFALSE 64144
// begin un := UnitShoot ( i ) ;
64096: LD_ADDR_VAR 0 5
64100: PUSH
64101: LD_VAR 0 4
64105: PPUSH
64106: CALL_OW 504
64110: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64111: LD_VAR 0 5
64115: PPUSH
64116: CALL_OW 255
64120: PUSH
64121: LD_VAR 0 1
64125: EQUAL
64126: IFFALSE 64142
// begin result := un ;
64128: LD_ADDR_VAR 0 3
64132: PUSH
64133: LD_VAR 0 5
64137: ST_TO_ADDR
// exit ;
64138: POP
64139: POP
64140: GO 64146
// end ; end ;
64142: GO 64093
64144: POP
64145: POP
// end ;
64146: LD_VAR 0 3
64150: RET
// export function GetCargoBay ( units ) ; begin
64151: LD_INT 0
64153: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64154: LD_ADDR_VAR 0 2
64158: PUSH
64159: LD_VAR 0 1
64163: PPUSH
64164: LD_INT 2
64166: PUSH
64167: LD_INT 34
64169: PUSH
64170: LD_INT 12
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 34
64179: PUSH
64180: LD_INT 51
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 34
64189: PUSH
64190: LD_INT 32
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 34
64199: PUSH
64200: LD_EXP 19
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: PPUSH
64216: CALL_OW 72
64220: ST_TO_ADDR
// end ;
64221: LD_VAR 0 2
64225: RET
// export function Negate ( value ) ; begin
64226: LD_INT 0
64228: PPUSH
// result := not value ;
64229: LD_ADDR_VAR 0 2
64233: PUSH
64234: LD_VAR 0 1
64238: NOT
64239: ST_TO_ADDR
// end ;
64240: LD_VAR 0 2
64244: RET
// export function Inc ( value ) ; begin
64245: LD_INT 0
64247: PPUSH
// result := value + 1 ;
64248: LD_ADDR_VAR 0 2
64252: PUSH
64253: LD_VAR 0 1
64257: PUSH
64258: LD_INT 1
64260: PLUS
64261: ST_TO_ADDR
// end ;
64262: LD_VAR 0 2
64266: RET
// export function Dec ( value ) ; begin
64267: LD_INT 0
64269: PPUSH
// result := value - 1 ;
64270: LD_ADDR_VAR 0 2
64274: PUSH
64275: LD_VAR 0 1
64279: PUSH
64280: LD_INT 1
64282: MINUS
64283: ST_TO_ADDR
// end ;
64284: LD_VAR 0 2
64288: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64289: LD_INT 0
64291: PPUSH
64292: PPUSH
64293: PPUSH
64294: PPUSH
64295: PPUSH
64296: PPUSH
64297: PPUSH
64298: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64299: LD_VAR 0 1
64303: PPUSH
64304: LD_VAR 0 2
64308: PPUSH
64309: CALL_OW 488
64313: NOT
64314: PUSH
64315: LD_VAR 0 3
64319: PPUSH
64320: LD_VAR 0 4
64324: PPUSH
64325: CALL_OW 488
64329: NOT
64330: OR
64331: IFFALSE 64344
// begin result := - 1 ;
64333: LD_ADDR_VAR 0 5
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: ST_TO_ADDR
// exit ;
64342: GO 64579
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64344: LD_ADDR_VAR 0 12
64348: PUSH
64349: LD_VAR 0 1
64353: PPUSH
64354: LD_VAR 0 2
64358: PPUSH
64359: LD_VAR 0 3
64363: PPUSH
64364: LD_VAR 0 4
64368: PPUSH
64369: CALL 63427 0 4
64373: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64374: LD_ADDR_VAR 0 11
64378: PUSH
64379: LD_VAR 0 1
64383: PPUSH
64384: LD_VAR 0 2
64388: PPUSH
64389: LD_VAR 0 12
64393: PUSH
64394: LD_INT 1
64396: ARRAY
64397: PPUSH
64398: LD_VAR 0 12
64402: PUSH
64403: LD_INT 2
64405: ARRAY
64406: PPUSH
64407: CALL_OW 298
64411: ST_TO_ADDR
// distance := 9999 ;
64412: LD_ADDR_VAR 0 10
64416: PUSH
64417: LD_INT 9999
64419: ST_TO_ADDR
// for i := 0 to 5 do
64420: LD_ADDR_VAR 0 6
64424: PUSH
64425: DOUBLE
64426: LD_INT 0
64428: DEC
64429: ST_TO_ADDR
64430: LD_INT 5
64432: PUSH
64433: FOR_TO
64434: IFFALSE 64577
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64436: LD_ADDR_VAR 0 7
64440: PUSH
64441: LD_VAR 0 1
64445: PPUSH
64446: LD_VAR 0 6
64450: PPUSH
64451: LD_VAR 0 11
64455: PPUSH
64456: CALL_OW 272
64460: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64461: LD_ADDR_VAR 0 8
64465: PUSH
64466: LD_VAR 0 2
64470: PPUSH
64471: LD_VAR 0 6
64475: PPUSH
64476: LD_VAR 0 11
64480: PPUSH
64481: CALL_OW 273
64485: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64486: LD_VAR 0 7
64490: PPUSH
64491: LD_VAR 0 8
64495: PPUSH
64496: CALL_OW 488
64500: NOT
64501: IFFALSE 64505
// continue ;
64503: GO 64433
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64505: LD_ADDR_VAR 0 9
64509: PUSH
64510: LD_VAR 0 12
64514: PUSH
64515: LD_INT 1
64517: ARRAY
64518: PPUSH
64519: LD_VAR 0 12
64523: PUSH
64524: LD_INT 2
64526: ARRAY
64527: PPUSH
64528: LD_VAR 0 7
64532: PPUSH
64533: LD_VAR 0 8
64537: PPUSH
64538: CALL_OW 298
64542: ST_TO_ADDR
// if tmp < distance then
64543: LD_VAR 0 9
64547: PUSH
64548: LD_VAR 0 10
64552: LESS
64553: IFFALSE 64575
// begin result := i ;
64555: LD_ADDR_VAR 0 5
64559: PUSH
64560: LD_VAR 0 6
64564: ST_TO_ADDR
// distance := tmp ;
64565: LD_ADDR_VAR 0 10
64569: PUSH
64570: LD_VAR 0 9
64574: ST_TO_ADDR
// end ; end ;
64575: GO 64433
64577: POP
64578: POP
// end ;
64579: LD_VAR 0 5
64583: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64584: LD_INT 0
64586: PPUSH
64587: PPUSH
// if not driver or not IsInUnit ( driver ) then
64588: LD_VAR 0 1
64592: NOT
64593: PUSH
64594: LD_VAR 0 1
64598: PPUSH
64599: CALL_OW 310
64603: NOT
64604: OR
64605: IFFALSE 64609
// exit ;
64607: GO 64699
// vehicle := IsInUnit ( driver ) ;
64609: LD_ADDR_VAR 0 3
64613: PUSH
64614: LD_VAR 0 1
64618: PPUSH
64619: CALL_OW 310
64623: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64624: LD_VAR 0 1
64628: PPUSH
64629: LD_STRING \
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: LD_INT 0
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: PUSH
64659: LD_STRING E
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: LD_VAR 0 3
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PPUSH
64695: CALL_OW 446
// end ;
64699: LD_VAR 0 2
64703: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64704: LD_INT 0
64706: PPUSH
64707: PPUSH
// if not driver or not IsInUnit ( driver ) then
64708: LD_VAR 0 1
64712: NOT
64713: PUSH
64714: LD_VAR 0 1
64718: PPUSH
64719: CALL_OW 310
64723: NOT
64724: OR
64725: IFFALSE 64729
// exit ;
64727: GO 64819
// vehicle := IsInUnit ( driver ) ;
64729: LD_ADDR_VAR 0 3
64733: PUSH
64734: LD_VAR 0 1
64738: PPUSH
64739: CALL_OW 310
64743: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64744: LD_VAR 0 1
64748: PPUSH
64749: LD_STRING \
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: PUSH
64779: LD_STRING E
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: LD_VAR 0 3
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PPUSH
64815: CALL_OW 447
// end ;
64819: LD_VAR 0 2
64823: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64824: LD_INT 0
64826: PPUSH
64827: PPUSH
64828: PPUSH
// tmp := [ ] ;
64829: LD_ADDR_VAR 0 5
64833: PUSH
64834: EMPTY
64835: ST_TO_ADDR
// for i in units do
64836: LD_ADDR_VAR 0 4
64840: PUSH
64841: LD_VAR 0 1
64845: PUSH
64846: FOR_IN
64847: IFFALSE 64885
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64849: LD_ADDR_VAR 0 5
64853: PUSH
64854: LD_VAR 0 5
64858: PPUSH
64859: LD_VAR 0 5
64863: PUSH
64864: LD_INT 1
64866: PLUS
64867: PPUSH
64868: LD_VAR 0 4
64872: PPUSH
64873: CALL_OW 256
64877: PPUSH
64878: CALL_OW 2
64882: ST_TO_ADDR
64883: GO 64846
64885: POP
64886: POP
// if not tmp then
64887: LD_VAR 0 5
64891: NOT
64892: IFFALSE 64896
// exit ;
64894: GO 64944
// if asc then
64896: LD_VAR 0 2
64900: IFFALSE 64924
// result := SortListByListAsc ( units , tmp ) else
64902: LD_ADDR_VAR 0 3
64906: PUSH
64907: LD_VAR 0 1
64911: PPUSH
64912: LD_VAR 0 5
64916: PPUSH
64917: CALL_OW 76
64921: ST_TO_ADDR
64922: GO 64944
// result := SortListByListDesc ( units , tmp ) ;
64924: LD_ADDR_VAR 0 3
64928: PUSH
64929: LD_VAR 0 1
64933: PPUSH
64934: LD_VAR 0 5
64938: PPUSH
64939: CALL_OW 77
64943: ST_TO_ADDR
// end ;
64944: LD_VAR 0 3
64948: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64949: LD_INT 0
64951: PPUSH
64952: PPUSH
// task := GetTaskList ( mech ) ;
64953: LD_ADDR_VAR 0 4
64957: PUSH
64958: LD_VAR 0 1
64962: PPUSH
64963: CALL_OW 437
64967: ST_TO_ADDR
// if not task then
64968: LD_VAR 0 4
64972: NOT
64973: IFFALSE 64977
// exit ;
64975: GO 65019
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64977: LD_ADDR_VAR 0 3
64981: PUSH
64982: LD_VAR 0 4
64986: PUSH
64987: LD_INT 1
64989: ARRAY
64990: PUSH
64991: LD_INT 1
64993: ARRAY
64994: PUSH
64995: LD_STRING r
64997: EQUAL
64998: PUSH
64999: LD_VAR 0 4
65003: PUSH
65004: LD_INT 1
65006: ARRAY
65007: PUSH
65008: LD_INT 4
65010: ARRAY
65011: PUSH
65012: LD_VAR 0 2
65016: EQUAL
65017: AND
65018: ST_TO_ADDR
// end ;
65019: LD_VAR 0 3
65023: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65024: LD_INT 0
65026: PPUSH
// SetDir ( unit , d ) ;
65027: LD_VAR 0 1
65031: PPUSH
65032: LD_VAR 0 4
65036: PPUSH
65037: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65041: LD_VAR 0 1
65045: PPUSH
65046: LD_VAR 0 2
65050: PPUSH
65051: LD_VAR 0 3
65055: PPUSH
65056: LD_VAR 0 5
65060: PPUSH
65061: CALL_OW 48
// end ;
65065: LD_VAR 0 6
65069: RET
// export function ToNaturalNumber ( number ) ; begin
65070: LD_INT 0
65072: PPUSH
// result := number div 1 ;
65073: LD_ADDR_VAR 0 2
65077: PUSH
65078: LD_VAR 0 1
65082: PUSH
65083: LD_INT 1
65085: DIV
65086: ST_TO_ADDR
// if number < 0 then
65087: LD_VAR 0 1
65091: PUSH
65092: LD_INT 0
65094: LESS
65095: IFFALSE 65105
// result := 0 ;
65097: LD_ADDR_VAR 0 2
65101: PUSH
65102: LD_INT 0
65104: ST_TO_ADDR
// end ;
65105: LD_VAR 0 2
65109: RET
// export function SortByClass ( units , class ) ; var un ; begin
65110: LD_INT 0
65112: PPUSH
65113: PPUSH
// if not units or not class then
65114: LD_VAR 0 1
65118: NOT
65119: PUSH
65120: LD_VAR 0 2
65124: NOT
65125: OR
65126: IFFALSE 65130
// exit ;
65128: GO 65225
// result := [ ] ;
65130: LD_ADDR_VAR 0 3
65134: PUSH
65135: EMPTY
65136: ST_TO_ADDR
// for un in units do
65137: LD_ADDR_VAR 0 4
65141: PUSH
65142: LD_VAR 0 1
65146: PUSH
65147: FOR_IN
65148: IFFALSE 65223
// if GetClass ( un ) = class then
65150: LD_VAR 0 4
65154: PPUSH
65155: CALL_OW 257
65159: PUSH
65160: LD_VAR 0 2
65164: EQUAL
65165: IFFALSE 65192
// result := Insert ( result , 1 , un ) else
65167: LD_ADDR_VAR 0 3
65171: PUSH
65172: LD_VAR 0 3
65176: PPUSH
65177: LD_INT 1
65179: PPUSH
65180: LD_VAR 0 4
65184: PPUSH
65185: CALL_OW 2
65189: ST_TO_ADDR
65190: GO 65221
// result := Replace ( result , result + 1 , un ) ;
65192: LD_ADDR_VAR 0 3
65196: PUSH
65197: LD_VAR 0 3
65201: PPUSH
65202: LD_VAR 0 3
65206: PUSH
65207: LD_INT 1
65209: PLUS
65210: PPUSH
65211: LD_VAR 0 4
65215: PPUSH
65216: CALL_OW 1
65220: ST_TO_ADDR
65221: GO 65147
65223: POP
65224: POP
// end ;
65225: LD_VAR 0 3
65229: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65230: LD_INT 0
65232: PPUSH
65233: PPUSH
65234: PPUSH
65235: PPUSH
65236: PPUSH
65237: PPUSH
65238: PPUSH
// result := [ ] ;
65239: LD_ADDR_VAR 0 4
65243: PUSH
65244: EMPTY
65245: ST_TO_ADDR
// if x - r < 0 then
65246: LD_VAR 0 1
65250: PUSH
65251: LD_VAR 0 3
65255: MINUS
65256: PUSH
65257: LD_INT 0
65259: LESS
65260: IFFALSE 65272
// min_x := 0 else
65262: LD_ADDR_VAR 0 8
65266: PUSH
65267: LD_INT 0
65269: ST_TO_ADDR
65270: GO 65288
// min_x := x - r ;
65272: LD_ADDR_VAR 0 8
65276: PUSH
65277: LD_VAR 0 1
65281: PUSH
65282: LD_VAR 0 3
65286: MINUS
65287: ST_TO_ADDR
// if y - r < 0 then
65288: LD_VAR 0 2
65292: PUSH
65293: LD_VAR 0 3
65297: MINUS
65298: PUSH
65299: LD_INT 0
65301: LESS
65302: IFFALSE 65314
// min_y := 0 else
65304: LD_ADDR_VAR 0 7
65308: PUSH
65309: LD_INT 0
65311: ST_TO_ADDR
65312: GO 65330
// min_y := y - r ;
65314: LD_ADDR_VAR 0 7
65318: PUSH
65319: LD_VAR 0 2
65323: PUSH
65324: LD_VAR 0 3
65328: MINUS
65329: ST_TO_ADDR
// max_x := x + r ;
65330: LD_ADDR_VAR 0 9
65334: PUSH
65335: LD_VAR 0 1
65339: PUSH
65340: LD_VAR 0 3
65344: PLUS
65345: ST_TO_ADDR
// max_y := y + r ;
65346: LD_ADDR_VAR 0 10
65350: PUSH
65351: LD_VAR 0 2
65355: PUSH
65356: LD_VAR 0 3
65360: PLUS
65361: ST_TO_ADDR
// for _x = min_x to max_x do
65362: LD_ADDR_VAR 0 5
65366: PUSH
65367: DOUBLE
65368: LD_VAR 0 8
65372: DEC
65373: ST_TO_ADDR
65374: LD_VAR 0 9
65378: PUSH
65379: FOR_TO
65380: IFFALSE 65481
// for _y = min_y to max_y do
65382: LD_ADDR_VAR 0 6
65386: PUSH
65387: DOUBLE
65388: LD_VAR 0 7
65392: DEC
65393: ST_TO_ADDR
65394: LD_VAR 0 10
65398: PUSH
65399: FOR_TO
65400: IFFALSE 65477
// begin if not ValidHex ( _x , _y ) then
65402: LD_VAR 0 5
65406: PPUSH
65407: LD_VAR 0 6
65411: PPUSH
65412: CALL_OW 488
65416: NOT
65417: IFFALSE 65421
// continue ;
65419: GO 65399
// if GetResourceTypeXY ( _x , _y ) then
65421: LD_VAR 0 5
65425: PPUSH
65426: LD_VAR 0 6
65430: PPUSH
65431: CALL_OW 283
65435: IFFALSE 65475
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65437: LD_ADDR_VAR 0 4
65441: PUSH
65442: LD_VAR 0 4
65446: PPUSH
65447: LD_VAR 0 4
65451: PUSH
65452: LD_INT 1
65454: PLUS
65455: PPUSH
65456: LD_VAR 0 5
65460: PUSH
65461: LD_VAR 0 6
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PPUSH
65470: CALL_OW 1
65474: ST_TO_ADDR
// end ;
65475: GO 65399
65477: POP
65478: POP
65479: GO 65379
65481: POP
65482: POP
// end ;
65483: LD_VAR 0 4
65487: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65488: LD_INT 0
65490: PPUSH
65491: PPUSH
65492: PPUSH
65493: PPUSH
65494: PPUSH
65495: PPUSH
65496: PPUSH
65497: PPUSH
// if not units then
65498: LD_VAR 0 1
65502: NOT
65503: IFFALSE 65507
// exit ;
65505: GO 65932
// result := UnitFilter ( units , [ f_ok ] ) ;
65507: LD_ADDR_VAR 0 3
65511: PUSH
65512: LD_VAR 0 1
65516: PPUSH
65517: LD_INT 50
65519: PUSH
65520: EMPTY
65521: LIST
65522: PPUSH
65523: CALL_OW 72
65527: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65528: LD_ADDR_VAR 0 8
65532: PUSH
65533: LD_VAR 0 1
65537: PUSH
65538: LD_INT 1
65540: ARRAY
65541: PPUSH
65542: CALL_OW 255
65546: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
65547: LD_ADDR_VAR 0 10
65551: PUSH
65552: LD_INT 29
65554: PUSH
65555: LD_EXP 22
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: ST_TO_ADDR
// if not result then
65564: LD_VAR 0 3
65568: NOT
65569: IFFALSE 65573
// exit ;
65571: GO 65932
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65573: LD_ADDR_VAR 0 5
65577: PUSH
65578: LD_INT 81
65580: PUSH
65581: LD_VAR 0 8
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PPUSH
65590: CALL_OW 69
65594: ST_TO_ADDR
// for i in result do
65595: LD_ADDR_VAR 0 4
65599: PUSH
65600: LD_VAR 0 3
65604: PUSH
65605: FOR_IN
65606: IFFALSE 65930
// begin tag := GetTag ( i ) + 1 ;
65608: LD_ADDR_VAR 0 9
65612: PUSH
65613: LD_VAR 0 4
65617: PPUSH
65618: CALL_OW 110
65622: PUSH
65623: LD_INT 1
65625: PLUS
65626: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65627: LD_ADDR_VAR 0 7
65631: PUSH
65632: LD_VAR 0 4
65636: PPUSH
65637: CALL_OW 250
65641: PPUSH
65642: LD_VAR 0 4
65646: PPUSH
65647: CALL_OW 251
65651: PPUSH
65652: LD_INT 6
65654: PPUSH
65655: CALL 65230 0 3
65659: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65660: LD_VAR 0 7
65664: PUSH
65665: LD_VAR 0 4
65669: PPUSH
65670: CALL_OW 264
65674: PUSH
65675: LD_VAR 0 10
65679: IN
65680: NOT
65681: AND
65682: IFFALSE 65721
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65684: LD_VAR 0 4
65688: PPUSH
65689: LD_VAR 0 7
65693: PUSH
65694: LD_INT 1
65696: ARRAY
65697: PUSH
65698: LD_INT 1
65700: ARRAY
65701: PPUSH
65702: LD_VAR 0 7
65706: PUSH
65707: LD_INT 1
65709: ARRAY
65710: PUSH
65711: LD_INT 2
65713: ARRAY
65714: PPUSH
65715: CALL_OW 116
65719: GO 65928
// if path > tag then
65721: LD_VAR 0 2
65725: PUSH
65726: LD_VAR 0 9
65730: GREATER
65731: IFFALSE 65898
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
65733: LD_ADDR_VAR 0 6
65737: PUSH
65738: LD_VAR 0 5
65742: PPUSH
65743: LD_INT 91
65745: PUSH
65746: LD_VAR 0 4
65750: PUSH
65751: LD_INT 12
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: PPUSH
65759: CALL_OW 72
65763: ST_TO_ADDR
// if nearEnemy then
65764: LD_VAR 0 6
65768: IFFALSE 65796
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65770: LD_VAR 0 4
65774: PPUSH
65775: LD_VAR 0 6
65779: PPUSH
65780: LD_VAR 0 4
65784: PPUSH
65785: CALL_OW 74
65789: PPUSH
65790: CALL_OW 115
65794: GO 65896
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65796: LD_VAR 0 4
65800: PPUSH
65801: LD_VAR 0 2
65805: PUSH
65806: LD_VAR 0 9
65810: ARRAY
65811: PUSH
65812: LD_INT 1
65814: ARRAY
65815: PPUSH
65816: LD_VAR 0 2
65820: PUSH
65821: LD_VAR 0 9
65825: ARRAY
65826: PUSH
65827: LD_INT 2
65829: ARRAY
65830: PPUSH
65831: CALL_OW 297
65835: PUSH
65836: LD_INT 6
65838: GREATER
65839: IFFALSE 65882
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65841: LD_VAR 0 4
65845: PPUSH
65846: LD_VAR 0 2
65850: PUSH
65851: LD_VAR 0 9
65855: ARRAY
65856: PUSH
65857: LD_INT 1
65859: ARRAY
65860: PPUSH
65861: LD_VAR 0 2
65865: PUSH
65866: LD_VAR 0 9
65870: ARRAY
65871: PUSH
65872: LD_INT 2
65874: ARRAY
65875: PPUSH
65876: CALL_OW 114
65880: GO 65896
// SetTag ( i , tag ) ;
65882: LD_VAR 0 4
65886: PPUSH
65887: LD_VAR 0 9
65891: PPUSH
65892: CALL_OW 109
// end else
65896: GO 65928
// if enemy then
65898: LD_VAR 0 5
65902: IFFALSE 65928
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65904: LD_VAR 0 4
65908: PPUSH
65909: LD_VAR 0 5
65913: PPUSH
65914: LD_VAR 0 4
65918: PPUSH
65919: CALL_OW 74
65923: PPUSH
65924: CALL_OW 115
// end ;
65928: GO 65605
65930: POP
65931: POP
// end ;
65932: LD_VAR 0 3
65936: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65937: LD_INT 0
65939: PPUSH
65940: PPUSH
65941: PPUSH
// if not unit or IsInUnit ( unit ) then
65942: LD_VAR 0 1
65946: NOT
65947: PUSH
65948: LD_VAR 0 1
65952: PPUSH
65953: CALL_OW 310
65957: OR
65958: IFFALSE 65962
// exit ;
65960: GO 66053
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65962: LD_ADDR_VAR 0 4
65966: PUSH
65967: LD_VAR 0 1
65971: PPUSH
65972: CALL_OW 250
65976: PPUSH
65977: LD_VAR 0 2
65981: PPUSH
65982: LD_INT 1
65984: PPUSH
65985: CALL_OW 272
65989: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65990: LD_ADDR_VAR 0 5
65994: PUSH
65995: LD_VAR 0 1
65999: PPUSH
66000: CALL_OW 251
66004: PPUSH
66005: LD_VAR 0 2
66009: PPUSH
66010: LD_INT 1
66012: PPUSH
66013: CALL_OW 273
66017: ST_TO_ADDR
// if ValidHex ( x , y ) then
66018: LD_VAR 0 4
66022: PPUSH
66023: LD_VAR 0 5
66027: PPUSH
66028: CALL_OW 488
66032: IFFALSE 66053
// ComTurnXY ( unit , x , y ) ;
66034: LD_VAR 0 1
66038: PPUSH
66039: LD_VAR 0 4
66043: PPUSH
66044: LD_VAR 0 5
66048: PPUSH
66049: CALL_OW 118
// end ;
66053: LD_VAR 0 3
66057: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66058: LD_INT 0
66060: PPUSH
66061: PPUSH
// result := false ;
66062: LD_ADDR_VAR 0 3
66066: PUSH
66067: LD_INT 0
66069: ST_TO_ADDR
// if not units then
66070: LD_VAR 0 2
66074: NOT
66075: IFFALSE 66079
// exit ;
66077: GO 66124
// for i in units do
66079: LD_ADDR_VAR 0 4
66083: PUSH
66084: LD_VAR 0 2
66088: PUSH
66089: FOR_IN
66090: IFFALSE 66122
// if See ( side , i ) then
66092: LD_VAR 0 1
66096: PPUSH
66097: LD_VAR 0 4
66101: PPUSH
66102: CALL_OW 292
66106: IFFALSE 66120
// begin result := true ;
66108: LD_ADDR_VAR 0 3
66112: PUSH
66113: LD_INT 1
66115: ST_TO_ADDR
// exit ;
66116: POP
66117: POP
66118: GO 66124
// end ;
66120: GO 66089
66122: POP
66123: POP
// end ;
66124: LD_VAR 0 3
66128: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66129: LD_INT 0
66131: PPUSH
66132: PPUSH
66133: PPUSH
66134: PPUSH
// if not unit or not points then
66135: LD_VAR 0 1
66139: NOT
66140: PUSH
66141: LD_VAR 0 2
66145: NOT
66146: OR
66147: IFFALSE 66151
// exit ;
66149: GO 66241
// dist := 99999 ;
66151: LD_ADDR_VAR 0 5
66155: PUSH
66156: LD_INT 99999
66158: ST_TO_ADDR
// for i in points do
66159: LD_ADDR_VAR 0 4
66163: PUSH
66164: LD_VAR 0 2
66168: PUSH
66169: FOR_IN
66170: IFFALSE 66239
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66172: LD_ADDR_VAR 0 6
66176: PUSH
66177: LD_VAR 0 1
66181: PPUSH
66182: LD_VAR 0 4
66186: PUSH
66187: LD_INT 1
66189: ARRAY
66190: PPUSH
66191: LD_VAR 0 4
66195: PUSH
66196: LD_INT 2
66198: ARRAY
66199: PPUSH
66200: CALL_OW 297
66204: ST_TO_ADDR
// if tmpDist < dist then
66205: LD_VAR 0 6
66209: PUSH
66210: LD_VAR 0 5
66214: LESS
66215: IFFALSE 66237
// begin result := i ;
66217: LD_ADDR_VAR 0 3
66221: PUSH
66222: LD_VAR 0 4
66226: ST_TO_ADDR
// dist := tmpDist ;
66227: LD_ADDR_VAR 0 5
66231: PUSH
66232: LD_VAR 0 6
66236: ST_TO_ADDR
// end ; end ;
66237: GO 66169
66239: POP
66240: POP
// end ;
66241: LD_VAR 0 3
66245: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66246: LD_INT 0
66248: PPUSH
// uc_side := side ;
66249: LD_ADDR_OWVAR 20
66253: PUSH
66254: LD_VAR 0 1
66258: ST_TO_ADDR
// uc_nation := 3 ;
66259: LD_ADDR_OWVAR 21
66263: PUSH
66264: LD_INT 3
66266: ST_TO_ADDR
// vc_chassis := 25 ;
66267: LD_ADDR_OWVAR 37
66271: PUSH
66272: LD_INT 25
66274: ST_TO_ADDR
// vc_engine := engine_siberite ;
66275: LD_ADDR_OWVAR 39
66279: PUSH
66280: LD_INT 3
66282: ST_TO_ADDR
// vc_control := control_computer ;
66283: LD_ADDR_OWVAR 38
66287: PUSH
66288: LD_INT 3
66290: ST_TO_ADDR
// vc_weapon := 59 ;
66291: LD_ADDR_OWVAR 40
66295: PUSH
66296: LD_INT 59
66298: ST_TO_ADDR
// result := CreateVehicle ;
66299: LD_ADDR_VAR 0 5
66303: PUSH
66304: CALL_OW 45
66308: ST_TO_ADDR
// SetDir ( result , d ) ;
66309: LD_VAR 0 5
66313: PPUSH
66314: LD_VAR 0 4
66318: PPUSH
66319: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66323: LD_VAR 0 5
66327: PPUSH
66328: LD_VAR 0 2
66332: PPUSH
66333: LD_VAR 0 3
66337: PPUSH
66338: LD_INT 0
66340: PPUSH
66341: CALL_OW 48
// end ; end_of_file
66345: LD_VAR 0 5
66349: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66350: LD_VAR 0 1
66354: PUSH
66355: LD_INT 200
66357: DOUBLE
66358: GREATEREQUAL
66359: IFFALSE 66367
66361: LD_INT 299
66363: DOUBLE
66364: LESSEQUAL
66365: IFTRUE 66369
66367: GO 66401
66369: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66370: LD_VAR 0 1
66374: PPUSH
66375: LD_VAR 0 2
66379: PPUSH
66380: LD_VAR 0 3
66384: PPUSH
66385: LD_VAR 0 4
66389: PPUSH
66390: LD_VAR 0 5
66394: PPUSH
66395: CALL 21949 0 5
66399: GO 66478
66401: LD_INT 300
66403: DOUBLE
66404: GREATEREQUAL
66405: IFFALSE 66413
66407: LD_INT 399
66409: DOUBLE
66410: LESSEQUAL
66411: IFTRUE 66415
66413: GO 66477
66415: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66416: LD_VAR 0 1
66420: PPUSH
66421: LD_VAR 0 2
66425: PPUSH
66426: LD_VAR 0 3
66430: PPUSH
66431: LD_VAR 0 4
66435: PPUSH
66436: LD_VAR 0 5
66440: PPUSH
66441: LD_VAR 0 6
66445: PPUSH
66446: LD_VAR 0 7
66450: PPUSH
66451: LD_VAR 0 8
66455: PPUSH
66456: LD_VAR 0 9
66460: PPUSH
66461: LD_VAR 0 10
66465: PPUSH
66466: LD_VAR 0 11
66470: PPUSH
66471: CALL 19591 0 11
66475: GO 66478
66477: POP
// end ;
66478: PPOPN 11
66480: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66481: LD_VAR 0 1
66485: PPUSH
66486: LD_VAR 0 2
66490: PPUSH
66491: LD_VAR 0 3
66495: PPUSH
66496: LD_VAR 0 4
66500: PPUSH
66501: LD_VAR 0 5
66505: PPUSH
66506: CALL 21685 0 5
// end ; end_of_file
66510: PPOPN 5
66512: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66513: LD_VAR 0 1
66517: PPUSH
66518: LD_VAR 0 2
66522: PPUSH
66523: LD_VAR 0 3
66527: PPUSH
66528: LD_VAR 0 4
66532: PPUSH
66533: LD_VAR 0 5
66537: PPUSH
66538: LD_VAR 0 6
66542: PPUSH
66543: CALL 7284 0 6
// end ;
66547: PPOPN 6
66549: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66550: CALL 7259 0 0
// end ;
66554: PPOPN 1
66556: END
