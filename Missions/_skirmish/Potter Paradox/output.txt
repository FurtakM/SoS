// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 25 0 0
// InitGlobalVariables ;
   8: CALL 7061 0 0
// PrepareLegion ;
  12: CALL 234 0 0
// PrepareAllies ;
  16: CALL 2225 0 0
// Action ;
  20: CALL 4051 0 0
// end ;
  24: END
// function InitGame ; begin
  25: LD_INT 0
  27: PPUSH
// RandomizeAll ;
  28: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  32: LD_ADDR_OWVAR 67
  36: PUSH
  37: LD_INT 0
  39: PPUSH
  40: CALL_OW 426
  44: ST_TO_ADDR
// if not Difficulty then
  45: LD_OWVAR 67
  49: NOT
  50: IFFALSE 60
// Difficulty := 2 ;
  52: LD_ADDR_OWVAR 67
  56: PUSH
  57: LD_INT 2
  59: ST_TO_ADDR
// InitVariables ;
  60: CALL 73 0 0
// SetDiplomacy ;
  64: CALL 186 0 0
// end ; end_of_file
  68: LD_VAR 0 1
  72: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  73: LD_INT 0
  75: PPUSH
// points := 0 ;
  76: LD_ADDR_EXP 10
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// alert := false ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// game_over := false ;
  92: LD_ADDR_EXP 7
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// wave_time := 0 0$00 ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// bonus_active := false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// ignore_wave := false ;
 116: LD_ADDR_EXP 15
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// player_res_art := false ;
 124: LD_ADDR_EXP 8
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// player_artifact_ready := false ;
 132: LD_ADDR_EXP 16
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 140: LD_ADDR_EXP 9
 144: PUSH
 145: LD_INT 52500
 147: PUSH
 148: LD_INT 67200
 150: PUSH
 151: LD_INT 84000
 153: PUSH
 154: EMPTY
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// bonus_num := 0 ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// artifact_progress := 0 ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// export function SetDiplomacy ; begin
 186: LD_INT 0
 188: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 189: LD_INT 92
 191: PPUSH
 192: LD_INT 48
 194: PPUSH
 195: LD_INT 8
 197: PPUSH
 198: LD_INT 32796
 200: NEG
 201: PPUSH
 202: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 206: LD_INT 92
 208: PPUSH
 209: LD_INT 48
 211: PPUSH
 212: LD_INT 8
 214: PPUSH
 215: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 219: LD_INT 5
 221: PPUSH
 222: LD_INT 8
 224: PPUSH
 225: CALL_OW 343
// end ; end_of_file
 229: LD_VAR 0 1
 233: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 234: LD_INT 0
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
 253: PPUSH
// uc_side := 2 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 2
 261: ST_TO_ADDR
// uc_nation := nation_arabian ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 2
 269: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 270: LD_INT 1
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 6
 278: PPUSH
 279: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 283: LD_ADDR_OWVAR 26
 287: PUSH
 288: LD_STRING Nicolas Vervecken
 290: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 291: LD_ADDR_OWVAR 33
 295: PUSH
 296: LD_STRING SecondCharsGal
 298: ST_TO_ADDR
// hc_face_number := 3 ;
 299: LD_ADDR_OWVAR 34
 303: PUSH
 304: LD_INT 3
 306: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 307: LD_ADDR_OWVAR 29
 311: PUSH
 312: LD_INT 11
 314: PUSH
 315: LD_INT 10
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Vervecken := CreateHuman ;
 322: LD_ADDR_EXP 12
 326: PUSH
 327: CALL_OW 44
 331: ST_TO_ADDR
// InitHc ;
 332: CALL_OW 19
// uc_side := 8 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 8
 343: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 1
 354: PPUSH
 355: LD_INT 4000
 357: PUSH
 358: LD_INT 2500
 360: PUSH
 361: LD_INT 1250
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 379: LD_INT 23
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: LD_INT 300
 392: PPUSH
 393: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 274
 404: PPUSH
 405: LD_INT 3
 407: PPUSH
 408: LD_INT 100
 410: PUSH
 411: LD_INT 50
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: PPUSH
 428: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 432: LD_ADDR_VAR 0 14
 436: PUSH
 437: LD_INT 23
 439: PPUSH
 440: CALL_OW 250
 444: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 445: LD_ADDR_VAR 0 15
 449: PUSH
 450: LD_INT 23
 452: PPUSH
 453: CALL_OW 251
 457: ST_TO_ADDR
// team := [ ] ;
 458: LD_ADDR_VAR 0 7
 462: PUSH
 463: EMPTY
 464: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 465: LD_ADDR_VAR 0 8
 469: PUSH
 470: LD_INT 9
 472: PUSH
 473: LD_INT 8
 475: PUSH
 476: LD_INT 7
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 490: LD_ADDR_VAR 0 9
 494: PUSH
 495: LD_INT 11
 497: PUSH
 498: LD_INT 9
 500: PUSH
 501: LD_INT 8
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 515: LD_ADDR_VAR 0 10
 519: PUSH
 520: LD_INT 3
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_OWVAR 67
 538: ARRAY
 539: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 540: LD_ADDR_VAR 0 11
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: LD_INT 3
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_OWVAR 67
 563: ARRAY
 564: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 565: LD_ADDR_VAR 0 12
 569: PUSH
 570: LD_INT 3
 572: PUSH
 573: LD_INT 2
 575: PUSH
 576: LD_INT 2
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: PUSH
 584: LD_OWVAR 67
 588: ARRAY
 589: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 590: LD_ADDR_VAR 0 13
 594: PUSH
 595: LD_INT 6
 597: PUSH
 598: LD_INT 5
 600: PUSH
 601: LD_INT 4
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: LD_OWVAR 67
 613: ARRAY
 614: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 615: LD_ADDR_VAR 0 18
 619: PUSH
 620: LD_INT 13
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: LD_INT 26
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 14
 640: PUSH
 641: LD_INT 3
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: LD_INT 25
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 14
 658: PUSH
 659: LD_INT 3
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 32
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 14
 676: PUSH
 677: LD_INT 3
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: LD_INT 31
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 14
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 24
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 14
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 25
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 13
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 24
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 755: LD_ADDR_VAR 0 2
 759: PUSH
 760: DOUBLE
 761: LD_INT 1
 763: DEC
 764: ST_TO_ADDR
 765: LD_VAR 0 18
 769: PUSH
 770: LD_OWVAR 67
 774: MINUS
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: PUSH
 780: FOR_TO
 781: IFFALSE 910
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 783: LD_ADDR_OWVAR 37
 787: PUSH
 788: LD_VAR 0 18
 792: PUSH
 793: LD_VAR 0 2
 797: ARRAY
 798: PUSH
 799: LD_INT 1
 801: ARRAY
 802: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 803: LD_ADDR_OWVAR 39
 807: PUSH
 808: LD_VAR 0 18
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PUSH
 819: LD_INT 2
 821: ARRAY
 822: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 823: LD_ADDR_OWVAR 38
 827: PUSH
 828: LD_VAR 0 18
 832: PUSH
 833: LD_VAR 0 2
 837: ARRAY
 838: PUSH
 839: LD_INT 3
 841: ARRAY
 842: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 843: LD_ADDR_OWVAR 40
 847: PUSH
 848: LD_VAR 0 18
 852: PUSH
 853: LD_VAR 0 2
 857: ARRAY
 858: PUSH
 859: LD_INT 4
 861: ARRAY
 862: ST_TO_ADDR
// un := CreateVehicle ;
 863: LD_ADDR_VAR 0 6
 867: PUSH
 868: CALL_OW 45
 872: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 873: LD_VAR 0 6
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 5
 883: PPUSH
 884: CALL_OW 12
 888: PPUSH
 889: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 893: LD_VAR 0 6
 897: PPUSH
 898: LD_INT 7
 900: PPUSH
 901: LD_INT 0
 903: PPUSH
 904: CALL_OW 49
// end ;
 908: GO 780
 910: POP
 911: POP
// for i = 1 to ape_num do
 912: LD_ADDR_VAR 0 2
 916: PUSH
 917: DOUBLE
 918: LD_INT 1
 920: DEC
 921: ST_TO_ADDR
 922: LD_VAR 0 13
 926: PUSH
 927: FOR_TO
 928: IFFALSE 995
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 930: LD_INT 0
 932: PPUSH
 933: LD_INT 16
 935: PUSH
 936: LD_INT 15
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 1
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: CALL_OW 12
 953: ARRAY
 954: PPUSH
 955: LD_VAR 0 8
 959: PPUSH
 960: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 964: LD_ADDR_VAR 0 7
 968: PUSH
 969: LD_VAR 0 7
 973: PPUSH
 974: LD_VAR 0 7
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: PPUSH
 983: CALL_OW 44
 987: PPUSH
 988: CALL_OW 2
 992: ST_TO_ADDR
// end ;
 993: GO 927
 995: POP
 996: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 997: LD_INT 1
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_VAR 0 8
1007: PPUSH
1008: CALL_OW 380
// l1 := CreateHuman ;
1012: LD_ADDR_EXP 2
1016: PUSH
1017: CALL_OW 44
1021: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1022: LD_EXP 2
1026: PPUSH
1027: LD_INT 23
1029: PPUSH
1030: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 8
1044: PPUSH
1045: CALL_OW 380
// l2 := CreateHuman ;
1049: LD_ADDR_EXP 3
1053: PUSH
1054: CALL_OW 44
1058: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_INT 23
1066: PPUSH
1067: CALL_OW 52
// for class = 1 to 4 do
1071: LD_ADDR_VAR 0 4
1075: PUSH
1076: DOUBLE
1077: LD_INT 1
1079: DEC
1080: ST_TO_ADDR
1081: LD_INT 4
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1184
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1087: LD_ADDR_VAR 0 2
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_VAR 0 9
1101: PUSH
1102: LD_VAR 0 10
1106: PUSH
1107: LD_VAR 0 11
1111: PUSH
1112: LD_VAR 0 12
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_VAR 0 4
1127: ARRAY
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1180
// begin PrepareHuman ( false , class , skill ) ;
1132: LD_INT 0
1134: PPUSH
1135: LD_VAR 0 4
1139: PPUSH
1140: LD_VAR 0 8
1144: PPUSH
1145: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1149: LD_ADDR_VAR 0 7
1153: PUSH
1154: LD_VAR 0 7
1158: PPUSH
1159: LD_VAR 0 7
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: PPUSH
1168: CALL_OW 44
1172: PPUSH
1173: CALL_OW 2
1177: ST_TO_ADDR
// end ;
1178: GO 1129
1180: POP
1181: POP
1182: GO 1084
1184: POP
1185: POP
// for i in team do
1186: LD_ADDR_VAR 0 2
1190: PUSH
1191: LD_VAR 0 7
1195: PUSH
1196: FOR_IN
1197: IFFALSE 1673
// begin b := 0 ;
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 0
1206: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1207: LD_VAR 0 2
1211: PPUSH
1212: CALL_OW 257
1216: PUSH
1217: LD_INT 1
1219: DOUBLE
1220: EQUAL
1221: IFTRUE 1225
1223: GO 1332
1225: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1226: LD_ADDR_VAR 0 5
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_OWVAR 20
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 30
1248: PUSH
1249: LD_INT 32
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PUSH
1256: LD_INT 30
1258: PUSH
1259: LD_INT 31
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// if not b then
1287: LD_VAR 0 5
1291: NOT
1292: IFFALSE 1330
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 22
1301: PUSH
1302: LD_OWVAR 20
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 30
1313: PUSH
1314: LD_INT 5
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PPUSH
1325: CALL_OW 69
1329: ST_TO_ADDR
// end ; class_engineer :
1330: GO 1571
1332: LD_INT 2
1334: DOUBLE
1335: EQUAL
1336: IFTRUE 1340
1338: GO 1379
1340: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1341: LD_ADDR_VAR 0 5
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_OWVAR 20
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 30
1360: PUSH
1361: LD_INT 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 69
1376: ST_TO_ADDR
1377: GO 1571
1379: LD_INT 3
1381: DOUBLE
1382: EQUAL
1383: IFTRUE 1387
1385: GO 1476
1387: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 5
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_OWVAR 20
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 21
1407: PUSH
1408: LD_INT 2
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: PUSH
1415: LD_INT 58
1417: PUSH
1418: EMPTY
1419: LIST
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: PPUSH
1426: CALL_OW 69
1430: ST_TO_ADDR
// if not b then
1431: LD_VAR 0 5
1435: NOT
1436: IFFALSE 1474
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1438: LD_ADDR_VAR 0 5
1442: PUSH
1443: LD_INT 22
1445: PUSH
1446: LD_OWVAR 20
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 30
1457: PUSH
1458: LD_INT 3
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PPUSH
1469: CALL_OW 69
1473: ST_TO_ADDR
// end ; class_scientistic :
1474: GO 1571
1476: LD_INT 4
1478: DOUBLE
1479: EQUAL
1480: IFTRUE 1484
1482: GO 1523
1484: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1485: LD_ADDR_VAR 0 5
1489: PUSH
1490: LD_INT 22
1492: PUSH
1493: LD_OWVAR 20
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 30
1504: PUSH
1505: LD_INT 8
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 69
1520: ST_TO_ADDR
// end ; class_apeman_soldier :
1521: GO 1571
1523: LD_INT 15
1525: DOUBLE
1526: EQUAL
1527: IFTRUE 1531
1529: GO 1570
1531: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: LD_INT 22
1539: PUSH
1540: LD_OWVAR 20
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 30
1551: PUSH
1552: LD_INT 5
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PPUSH
1563: CALL_OW 69
1567: ST_TO_ADDR
1568: GO 1571
1570: POP
// if b then
1571: LD_VAR 0 5
1575: IFFALSE 1646
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1577: LD_VAR 0 5
1581: PUSH
1582: LD_INT 1
1584: ARRAY
1585: PPUSH
1586: CALL_OW 266
1590: PUSH
1591: LD_INT 31
1593: EQUAL
1594: IFFALSE 1616
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1596: LD_VAR 0 2
1600: PPUSH
1601: LD_VAR 0 5
1605: PUSH
1606: LD_INT 1
1608: ARRAY
1609: PPUSH
1610: CALL 4814 0 2
1614: GO 1644
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1616: LD_VAR 0 2
1620: PPUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_INT 1
1628: PPUSH
1629: LD_VAR 0 5
1633: PPUSH
1634: CALL_OW 12
1638: ARRAY
1639: PPUSH
1640: CALL_OW 52
1644: GO 1671
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1646: LD_VAR 0 2
1650: PPUSH
1651: LD_VAR 0 14
1655: PPUSH
1656: LD_VAR 0 15
1660: PPUSH
1661: LD_INT 15
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL_OW 50
// end ;
1671: GO 1196
1673: POP
1674: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1675: LD_ADDR_VAR 0 16
1679: PUSH
1680: LD_INT 26
1682: PUSH
1683: LD_INT 3
1685: PUSH
1686: LD_INT 2
1688: PUSH
1689: LD_INT 1
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: PUSH
1697: LD_OWVAR 67
1701: ARRAY
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: LD_INT 3
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_OWVAR 67
1728: ARRAY
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 24
1736: PUSH
1737: LD_INT 5
1739: PUSH
1740: LD_INT 5
1742: PUSH
1743: LD_INT 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: LD_OWVAR 67
1755: ARRAY
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 30
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_OWVAR 67
1782: ARRAY
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1794: LD_ADDR_VAR 0 2
1798: PUSH
1799: LD_INT 22
1801: PUSH
1802: LD_OWVAR 20
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 30
1813: PUSH
1814: LD_INT 32
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: CALL_OW 69
1829: PUSH
1830: FOR_IN
1831: IFFALSE 2004
// begin if weapons then
1833: LD_VAR 0 16
1837: IFFALSE 1961
// begin k := rand ( 1 , weapons ) ;
1839: LD_ADDR_VAR 0 3
1843: PUSH
1844: LD_INT 1
1846: PPUSH
1847: LD_VAR 0 16
1851: PPUSH
1852: CALL_OW 12
1856: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1857: LD_ADDR_VAR 0 17
1861: PUSH
1862: LD_VAR 0 16
1866: PUSH
1867: LD_VAR 0 3
1871: ARRAY
1872: PUSH
1873: LD_INT 1
1875: ARRAY
1876: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1877: LD_ADDR_VAR 0 16
1881: PUSH
1882: LD_VAR 0 16
1886: PPUSH
1887: LD_VAR 0 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: LD_VAR 0 16
1899: PUSH
1900: LD_VAR 0 3
1904: ARRAY
1905: PUSH
1906: LD_INT 2
1908: ARRAY
1909: PUSH
1910: LD_INT 1
1912: MINUS
1913: PPUSH
1914: CALL 4906 0 4
1918: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1919: LD_VAR 0 16
1923: PUSH
1924: LD_VAR 0 3
1928: ARRAY
1929: PUSH
1930: LD_INT 2
1932: ARRAY
1933: PUSH
1934: LD_INT 0
1936: EQUAL
1937: IFFALSE 1959
// weapons := Delete ( weapons , k ) ;
1939: LD_ADDR_VAR 0 16
1943: PUSH
1944: LD_VAR 0 16
1948: PPUSH
1949: LD_VAR 0 3
1953: PPUSH
1954: CALL_OW 3
1958: ST_TO_ADDR
// end else
1959: GO 1988
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1961: LD_ADDR_VAR 0 17
1965: PUSH
1966: LD_INT 27
1968: PUSH
1969: LD_INT 23
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 12
1986: ARRAY
1987: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_VAR 0 17
1997: PPUSH
1998: CALL_OW 431
// end ;
2002: GO 1830
2004: POP
2005: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_VAR 0 8
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: CALL_OW 380
// hc_gallery := potter ;
2025: LD_ADDR_OWVAR 33
2029: PUSH
2030: LD_STRING potter
2032: ST_TO_ADDR
// hc_face_number := 1 ;
2033: LD_ADDR_OWVAR 34
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// hc_importance := 100 ;
2041: LD_ADDR_OWVAR 32
2045: PUSH
2046: LD_INT 100
2048: ST_TO_ADDR
// hc_name := Mike Gerste ;
2049: LD_ADDR_OWVAR 26
2053: PUSH
2054: LD_STRING Mike Gerste
2056: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2057: LD_ADDR_OWVAR 29
2061: PUSH
2062: LD_INT 10
2064: PUSH
2065: LD_INT 11
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: ST_TO_ADDR
// legion_commander := CreateHuman ;
2072: LD_ADDR_EXP 1
2076: PUSH
2077: CALL_OW 44
2081: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2082: LD_EXP 1
2086: PPUSH
2087: LD_INT 23
2089: PPUSH
2090: CALL_OW 52
// uc_side := 5 ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_INT 5
2101: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 4
2107: PPUSH
2108: LD_VAR 0 8
2112: PPUSH
2113: CALL_OW 380
// hc_gallery := potter ;
2117: LD_ADDR_OWVAR 33
2121: PUSH
2122: LD_STRING potter
2124: ST_TO_ADDR
// hc_face_number := 2 ;
2125: LD_ADDR_OWVAR 34
2129: PUSH
2130: LD_INT 2
2132: ST_TO_ADDR
// hc_importance := 0 ;
2133: LD_ADDR_OWVAR 32
2137: PUSH
2138: LD_INT 0
2140: ST_TO_ADDR
// hc_name := George Potter ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING George Potter
2148: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 12
2156: PUSH
2157: LD_INT 9
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// potter := CreateHuman ;
2164: LD_ADDR_EXP 4
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2174: LD_EXP 4
2178: PPUSH
2179: LD_INT 4
2181: PPUSH
2182: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2186: LD_EXP 4
2190: PPUSH
2191: LD_INT 103
2193: PPUSH
2194: LD_INT 45
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2204: LD_EXP 4
2208: PPUSH
2209: LD_INT 23
2211: PPUSH
2212: CALL_OW 119
// InitHc ( ) ;
2216: CALL_OW 19
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
// uc_side := 5 ;
2232: LD_ADDR_OWVAR 20
2236: PUSH
2237: LD_INT 5
2239: ST_TO_ADDR
// uc_nation := nation_arabian ;
2240: LD_ADDR_OWVAR 21
2244: PUSH
2245: LD_INT 2
2247: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: LD_INT 22
2255: PUSH
2256: LD_OWVAR 20
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 30
2267: PUSH
2268: LD_INT 5
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: ST_TO_ADDR
// for i = 1 to 3 do
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: DOUBLE
2290: LD_INT 1
2292: DEC
2293: ST_TO_ADDR
2294: LD_INT 3
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2336
// begin PrepareHuman ( false , 2 , 6 ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: LD_INT 6
2308: PPUSH
2309: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2313: CALL_OW 44
2317: PPUSH
2318: LD_INT 27
2320: PPUSH
2321: LD_INT 22
2323: PPUSH
2324: LD_INT 5
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 50
// end ;
2334: GO 2297
2336: POP
2337: POP
// for i = 1 to 3 do
2338: LD_ADDR_VAR 0 2
2342: PUSH
2343: DOUBLE
2344: LD_INT 1
2346: DEC
2347: ST_TO_ADDR
2348: LD_INT 3
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2387
// begin PrepareHuman ( false , 1 , 6 ) ;
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 6
2362: PPUSH
2363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2367: CALL_OW 44
2371: PPUSH
2372: LD_VAR 0 4
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: CALL_OW 52
// end ;
2385: GO 2351
2387: POP
2388: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2389: LD_ADDR_VAR 0 2
2393: PUSH
2394: LD_INT 22
2396: PUSH
2397: LD_OWVAR 20
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 31
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 32
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 69
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2531
// begin PrepareHuman ( false , 1 , 6 ) ;
2446: LD_INT 0
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: LD_INT 6
2454: PPUSH
2455: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2459: CALL_OW 44
2463: PPUSH
2464: LD_VAR 0 2
2468: PPUSH
2469: CALL 4814 0 2
// if GetBType ( i ) = b_bunker then
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 266
2482: PUSH
2483: LD_INT 32
2485: EQUAL
2486: IFFALSE 2529
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2488: LD_VAR 0 2
2492: PPUSH
2493: LD_INT 27
2495: PUSH
2496: LD_INT 25
2498: PUSH
2499: LD_INT 24
2501: PUSH
2502: LD_INT 28
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: LD_VAR 0 2
2515: PUSH
2516: LD_INT 4
2518: MOD
2519: PUSH
2520: LD_INT 1
2522: PLUS
2523: ARRAY
2524: PPUSH
2525: CALL_OW 431
// end ;
2529: GO 2443
2531: POP
2532: POP
// for i = 1 to 3 do
2533: LD_ADDR_VAR 0 2
2537: PUSH
2538: DOUBLE
2539: LD_INT 1
2541: DEC
2542: ST_TO_ADDR
2543: LD_INT 3
2545: PUSH
2546: FOR_TO
2547: IFFALSE 2664
// begin vc_chassis := ar_half_tracked ;
2549: LD_ADDR_OWVAR 37
2553: PUSH
2554: LD_INT 14
2556: ST_TO_ADDR
// vc_engine := engine_solar ;
2557: LD_ADDR_OWVAR 39
2561: PUSH
2562: LD_INT 2
2564: ST_TO_ADDR
// vc_control := control_manual ;
2565: LD_ADDR_OWVAR 38
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2573: LD_ADDR_OWVAR 40
2577: PUSH
2578: LD_INT 25
2580: PUSH
2581: LD_INT 27
2583: PUSH
2584: LD_INT 26
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: ST_TO_ADDR
// un := CreateVehicle ;
2598: LD_ADDR_VAR 0 3
2602: PUSH
2603: CALL_OW 45
2607: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2608: LD_VAR 0 3
2612: PPUSH
2613: LD_INT 5
2615: PPUSH
2616: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 8
2627: PPUSH
2628: LD_INT 0
2630: PPUSH
2631: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: LD_INT 7
2643: PPUSH
2644: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2648: CALL_OW 44
2652: PPUSH
2653: LD_VAR 0 3
2657: PPUSH
2658: CALL_OW 52
// end ;
2662: GO 2546
2664: POP
2665: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 6
2674: PPUSH
2675: CALL_OW 380
// al_commander := CreateHuman ;
2679: LD_ADDR_EXP 5
2683: PUSH
2684: CALL_OW 44
2688: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2689: LD_EXP 5
2693: PPUSH
2694: LD_INT 22
2696: PUSH
2697: LD_OWVAR 20
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PPUSH
2720: CALL_OW 69
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: PPUSH
2729: CALL_OW 52
// InitHc ( ) ;
2733: CALL_OW 19
// end ;
2737: LD_VAR 0 1
2741: RET
// export function ChangeSide ( ) ; var i ; begin
2742: LD_INT 0
2744: PPUSH
2745: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2746: LD_ADDR_VAR 0 2
2750: PUSH
2751: LD_INT 22
2753: PUSH
2754: LD_INT 5
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PPUSH
2761: CALL_OW 69
2765: PUSH
2766: FOR_IN
2767: IFFALSE 2783
// SetSide ( i , 8 ) ;
2769: LD_VAR 0 2
2773: PPUSH
2774: LD_INT 8
2776: PPUSH
2777: CALL_OW 235
2781: GO 2766
2783: POP
2784: POP
// end ;
2785: LD_VAR 0 1
2789: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2790: LD_INT 22
2792: PUSH
2793: LD_INT 5
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 69
2804: IFFALSE 3318
2806: GO 2808
2808: DISABLE
2809: LD_INT 0
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
// begin enable ;
2817: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: LD_INT 22
2825: PUSH
2826: LD_INT 5
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 2
2835: PUSH
2836: LD_INT 21
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 21
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PPUSH
2865: CALL_OW 69
2869: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2870: LD_ADDR_VAR 0 5
2874: PUSH
2875: LD_INT 22
2877: PUSH
2878: LD_INT 5
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 32
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: LD_INT 24
2900: PUSH
2901: LD_INT 1000
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: PPUSH
2917: CALL_OW 69
2921: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2922: LD_ADDR_VAR 0 6
2926: PUSH
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 3
2934: PUSH
2935: LD_INT 54
2937: PUSH
2938: EMPTY
2939: LIST
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_INT 25
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: ST_TO_ADDR
// if not list then
2964: LD_VAR 0 2
2968: NOT
2969: IFFALSE 2973
// exit ;
2971: GO 3318
// for i in list do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: LD_VAR 0 2
2982: PUSH
2983: FOR_IN
2984: IFFALSE 3316
// begin if b then
2986: LD_VAR 0 5
2990: IFFALSE 3069
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2992: LD_ADDR_VAR 0 4
2996: PUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_INT 25
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PUSH
3017: FOR_IN
3018: IFFALSE 3067
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3020: LD_VAR 0 4
3024: PPUSH
3025: CALL_OW 314
3029: NOT
3030: PUSH
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 110
3040: PUSH
3041: LD_INT 7
3043: NONEQUAL
3044: AND
3045: IFFALSE 3065
// ComRepairBuilding ( j , b [ 1 ] ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 130
3065: GO 3017
3067: POP
3068: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 256
3078: PUSH
3079: LD_INT 500
3081: LESS
3082: PUSH
3083: LD_VAR 0 1
3087: PPUSH
3088: CALL_OW 110
3092: PUSH
3093: LD_INT 7
3095: EQUAL
3096: NOT
3097: AND
3098: IFFALSE 3148
// begin ComMoveToArea ( i , guard_hill ) ;
3100: LD_VAR 0 1
3104: PPUSH
3105: LD_INT 11
3107: PPUSH
3108: CALL_OW 113
// SetTag ( i , 7 ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 247
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: IFFALSE 3148
// begin AddComExitVehicle ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3148: LD_VAR 0 1
3152: PPUSH
3153: CALL_OW 256
3157: PUSH
3158: LD_INT 1000
3160: EQUAL
3161: PUSH
3162: LD_VAR 0 1
3166: PPUSH
3167: CALL_OW 110
3171: PUSH
3172: LD_INT 7
3174: EQUAL
3175: AND
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: CALL_OW 310
3186: NOT
3187: AND
3188: PUSH
3189: LD_VAR 0 6
3193: AND
3194: IFFALSE 3222
// begin SetTag ( i , 0 ) ;
3196: LD_VAR 0 1
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3208: LD_VAR 0 6
3212: PPUSH
3213: LD_VAR 0 1
3217: PPUSH
3218: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: CALL_OW 247
3231: PUSH
3232: LD_INT 2
3234: EQUAL
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 110
3245: PUSH
3246: LD_INT 7
3248: NONEQUAL
3249: AND
3250: PUSH
3251: LD_VAR 0 1
3255: PPUSH
3256: CALL_OW 314
3260: NOT
3261: AND
3262: IFFALSE 3314
// if FilterAllUnits ( [ f_side , 7 ] ) then
3264: LD_INT 22
3266: PUSH
3267: LD_INT 7
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 69
3278: IFFALSE 3314
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3280: LD_VAR 0 1
3284: PPUSH
3285: LD_INT 22
3287: PUSH
3288: LD_INT 7
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PPUSH
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 74
3309: PPUSH
3310: CALL_OW 115
// end ;
3314: GO 2983
3316: POP
3317: POP
// end ; end_of_file
3318: PPOPN 6
3320: END
// export function Game ; var i , val , areas , wave ; begin
3321: LD_INT 0
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
3327: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: LD_INT 1
3335: PUSH
3336: LD_INT 2
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 4
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: LD_INT 6
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_INT 5
3366: PUSH
3367: LD_INT 6
3369: PUSH
3370: LD_INT 7
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: PUSH
3378: LD_OWVAR 67
3382: ARRAY
3383: ST_TO_ADDR
// wave := 1 ;
3384: LD_ADDR_VAR 0 5
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// while not game_over do
3392: LD_EXP 7
3396: NOT
3397: IFFALSE 3553
// begin repeat begin Wait ( 0 0$01 ) ;
3399: LD_INT 35
3401: PPUSH
3402: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3406: LD_ADDR_EXP 11
3410: PUSH
3411: LD_EXP 11
3415: PUSH
3416: LD_INT 35
3418: PLUS
3419: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3420: LD_INT 22
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: PUSH
3435: LD_INT 10
3437: LESS
3438: PUSH
3439: LD_EXP 11
3443: PUSH
3444: LD_INT 21000
3446: GREATEREQUAL
3447: OR
3448: IFFALSE 3399
// wave_time := 0 0$00 ;
3450: LD_ADDR_EXP 11
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3458: LD_INT 5250
3460: PPUSH
3461: CALL_OW 67
// if not ignore_wave then
3465: LD_EXP 15
3469: NOT
3470: IFFALSE 3543
// begin for i = 1 to areas do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_VAR 0 4
3486: PUSH
3487: FOR_TO
3488: IFFALSE 3525
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3490: LD_VAR 0 5
3494: PUSH
3495: LD_VAR 0 3
3499: PLUS
3500: PPUSH
3501: LD_VAR 0 4
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PPUSH
3512: CALL 3558 0 2
// Wait ( 0 0$10 ) ;
3516: LD_INT 350
3518: PPUSH
3519: CALL_OW 67
// end ;
3523: GO 3487
3525: POP
3526: POP
// wave := wave + 1 ;
3527: LD_ADDR_VAR 0 5
3531: PUSH
3532: LD_VAR 0 5
3536: PUSH
3537: LD_INT 1
3539: PLUS
3540: ST_TO_ADDR
// end else
3541: GO 3551
// ignore_wave := false ;
3543: LD_ADDR_EXP 15
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// end ;
3551: GO 3392
// end ;
3553: LD_VAR 0 1
3557: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// uc_side := 7 ;
3565: LD_ADDR_OWVAR 20
3569: PUSH
3570: LD_INT 7
3572: ST_TO_ADDR
// uc_nation := 2 ;
3573: LD_ADDR_OWVAR 21
3577: PUSH
3578: LD_INT 2
3580: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3581: LD_ADDR_VAR 0 5
3585: PUSH
3586: LD_INT 10
3588: PUSH
3589: LD_OWVAR 1
3593: PUSH
3594: LD_INT 10500
3596: DIV
3597: PLUS
3598: ST_TO_ADDR
// if v > 25 then
3599: LD_VAR 0 5
3603: PUSH
3604: LD_INT 25
3606: GREATER
3607: IFFALSE 3617
// v := 25 ;
3609: LD_ADDR_VAR 0 5
3613: PUSH
3614: LD_INT 25
3616: ST_TO_ADDR
// InitHc ( ) ;
3617: CALL_OW 19
// hc_gallery :=  ;
3621: LD_ADDR_OWVAR 33
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// hc_importance := 0 ;
3629: LD_ADDR_OWVAR 32
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// hc_name :=  ;
3637: LD_ADDR_OWVAR 26
3641: PUSH
3642: LD_STRING 
3644: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3645: LD_ADDR_OWVAR 29
3649: PUSH
3650: LD_VAR 0 5
3654: PUSH
3655: LD_VAR 0 5
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: ST_TO_ADDR
// if val > 35 then
3664: LD_VAR 0 1
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: IFFALSE 3682
// val := 35 ;
3674: LD_ADDR_VAR 0 1
3678: PUSH
3679: LD_INT 35
3681: ST_TO_ADDR
// for i = 1 to val do
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: DOUBLE
3688: LD_INT 1
3690: DEC
3691: ST_TO_ADDR
3692: LD_VAR 0 1
3696: PUSH
3697: FOR_TO
3698: IFFALSE 3911
// begin if i mod 9 = 0 then
3700: LD_VAR 0 4
3704: PUSH
3705: LD_INT 9
3707: MOD
3708: PUSH
3709: LD_INT 0
3711: EQUAL
3712: IFFALSE 3724
// class := class_apeman_kamikaze else
3714: LD_ADDR_VAR 0 7
3718: PUSH
3719: LD_INT 17
3721: ST_TO_ADDR
3722: GO 3756
// if i mod 4 = 0 then
3724: LD_VAR 0 4
3728: PUSH
3729: LD_INT 4
3731: MOD
3732: PUSH
3733: LD_INT 0
3735: EQUAL
3736: IFFALSE 3748
// class := class_apeman_soldier else
3738: LD_ADDR_VAR 0 7
3742: PUSH
3743: LD_INT 15
3745: ST_TO_ADDR
3746: GO 3756
// class := class_apeman ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 12
3755: ST_TO_ADDR
// if i mod 6 = 0 then
3756: LD_VAR 0 4
3760: PUSH
3761: LD_INT 6
3763: MOD
3764: PUSH
3765: LD_INT 0
3767: EQUAL
3768: IFFALSE 3843
// begin vc_chassis := ar_half_tracked ;
3770: LD_ADDR_OWVAR 37
3774: PUSH
3775: LD_INT 14
3777: ST_TO_ADDR
// vc_control := control_apeman ;
3778: LD_ADDR_OWVAR 38
3782: PUSH
3783: LD_INT 5
3785: ST_TO_ADDR
// vc_engine := engine_siberite ;
3786: LD_ADDR_OWVAR 39
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3794: LD_ADDR_OWVAR 40
3798: PUSH
3799: LD_INT 28
3801: PUSH
3802: LD_INT 27
3804: PUSH
3805: LD_INT 29
3807: PUSH
3808: LD_EXP 22
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 1
3821: PPUSH
3822: LD_INT 4
3824: PPUSH
3825: CALL_OW 12
3829: ARRAY
3830: ST_TO_ADDR
// un := CreateVehicle ;
3831: LD_ADDR_VAR 0 6
3835: PUSH
3836: CALL_OW 45
3840: ST_TO_ADDR
// end else
3841: GO 3868
// begin PrepareHuman ( sex_male , class , 10 ) ;
3843: LD_INT 1
3845: PPUSH
3846: LD_VAR 0 7
3850: PPUSH
3851: LD_INT 10
3853: PPUSH
3854: CALL_OW 380
// un := CreateHuman ;
3858: LD_ADDR_VAR 0 6
3862: PUSH
3863: CALL_OW 44
3867: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3868: LD_VAR 0 6
3872: PPUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3885: LD_VAR 0 6
3889: PPUSH
3890: CALL_OW 250
3894: PPUSH
3895: LD_VAR 0 6
3899: PPUSH
3900: CALL_OW 251
3904: PPUSH
3905: CALL_OW 494
// end ;
3909: GO 3697
3911: POP
3912: POP
// end ;
3913: LD_VAR 0 3
3917: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3918: LD_EXP 6
3922: PUSH
3923: LD_EXP 7
3927: NOT
3928: AND
3929: IFFALSE 4048
3931: GO 3933
3933: DISABLE
3934: LD_INT 0
3936: PPUSH
3937: PPUSH
3938: PPUSH
// begin enable ;
3939: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3940: LD_ADDR_VAR 0 2
3944: PUSH
3945: LD_INT 22
3947: PUSH
3948: LD_INT 7
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 69
3959: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: LD_INT 81
3967: PUSH
3968: LD_INT 7
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 69
3979: ST_TO_ADDR
// if not list then
3980: LD_VAR 0 2
3984: NOT
3985: IFFALSE 3989
// exit ;
3987: GO 4048
// for i in list do
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_VAR 0 2
3998: PUSH
3999: FOR_IN
4000: IFFALSE 4046
// begin if enemy then
4002: LD_VAR 0 3
4006: IFFALSE 4044
// if not HasTask ( i ) then
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 314
4017: NOT
4018: IFFALSE 4044
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4020: LD_VAR 0 1
4024: PPUSH
4025: LD_VAR 0 3
4029: PPUSH
4030: LD_VAR 0 1
4034: PPUSH
4035: CALL_OW 74
4039: PPUSH
4040: CALL_OW 115
// end ;
4044: GO 3999
4046: POP
4047: POP
// end ; end_of_file
4048: PPOPN 3
4050: END
// export function Action ; begin
4051: LD_INT 0
4053: PPUSH
// InGameOn ;
4054: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4058: LD_INT 23
4060: PPUSH
4061: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4065: LD_EXP 1
4069: PPUSH
4070: LD_STRING DL-1
4072: PPUSH
4073: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4077: LD_EXP 2
4081: PPUSH
4082: LD_STRING DA-1
4084: PPUSH
4085: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4089: LD_EXP 3
4093: PPUSH
4094: LD_STRING DA-2
4096: PPUSH
4097: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4101: LD_EXP 1
4105: PPUSH
4106: LD_STRING DL-2
4108: PPUSH
4109: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4113: LD_EXP 3
4117: PPUSH
4118: LD_STRING DA-3
4120: PPUSH
4121: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4125: LD_EXP 1
4129: PPUSH
4130: LD_STRING DL-3
4132: PPUSH
4133: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4137: LD_EXP 2
4141: PPUSH
4142: LD_STRING DA-4
4144: PPUSH
4145: CALL_OW 88
// if not dialogue_skipped then
4149: LD_OWVAR 59
4153: NOT
4154: IFFALSE 4239
// begin Wait ( 0 0$01 ) ;
4156: LD_INT 35
4158: PPUSH
4159: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4163: LD_EXP 2
4167: PUSH
4168: LD_EXP 3
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4181: LD_EXP 2
4185: PPUSH
4186: LD_INT 107
4188: PPUSH
4189: LD_INT 53
4191: PPUSH
4192: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4196: LD_EXP 3
4200: PPUSH
4201: LD_INT 108
4203: PPUSH
4204: LD_INT 53
4206: PPUSH
4207: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4211: LD_EXP 2
4215: PPUSH
4216: LD_EXP 4
4220: PPUSH
4221: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4225: LD_EXP 3
4229: PPUSH
4230: LD_EXP 4
4234: PPUSH
4235: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4239: LD_INT 35
4241: PPUSH
4242: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4246: LD_EXP 2
4250: PPUSH
4251: LD_INT 107
4253: PPUSH
4254: LD_INT 53
4256: PPUSH
4257: CALL_OW 307
4261: PUSH
4262: LD_OWVAR 59
4266: OR
4267: IFFALSE 4239
// if not dialogue_skipped then
4269: LD_OWVAR 59
4273: NOT
4274: IFFALSE 4375
// begin ComTurnUnit ( potter , l1 ) ;
4276: LD_EXP 4
4280: PPUSH
4281: LD_EXP 2
4285: PPUSH
4286: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4290: LD_INT 10
4292: PPUSH
4293: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4297: LD_EXP 4
4301: PPUSH
4302: LD_INT 108
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: LD_INT 0
4313: PPUSH
4314: CALL_OW 483
// Wait ( 0 0$01 ) ;
4318: LD_INT 35
4320: PPUSH
4321: CALL_OW 67
// RemoveUnit ( potter ) ;
4325: LD_EXP 4
4329: PPUSH
4330: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DA-5
4341: PPUSH
4342: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4346: LD_EXP 3
4350: PPUSH
4351: LD_STRING DA-6
4353: PPUSH
4354: CALL_OW 88
// Wait ( 0 0$02 ) ;
4358: LD_INT 70
4360: PPUSH
4361: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4365: LD_INT 25
4367: PPUSH
4368: LD_INT 19
4370: PPUSH
4371: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4375: LD_INT 20
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL 3558 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4385: LD_EXP 5
4389: PPUSH
4390: LD_STRING DLa-1
4392: PPUSH
4393: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4397: LD_EXP 1
4401: PPUSH
4402: LD_STRING DL-5
4404: PPUSH
4405: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4409: LD_INT 23
4411: PPUSH
4412: CALL_OW 87
// InGameOff ;
4416: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4420: LD_STRING C1
4422: PPUSH
4423: CALL_OW 337
// alert := true ;
4427: LD_ADDR_EXP 6
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4435: LD_EXP 5
4439: PPUSH
4440: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4444: LD_EXP 5
4448: PPUSH
4449: LD_INT 11
4451: PPUSH
4452: CALL_OW 173
// Wait ( 0 0$30 ) ;
4456: LD_INT 1050
4458: PPUSH
4459: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4463: LD_INT 10
4465: PPUSH
4466: LD_INT 4
4468: PPUSH
4469: CALL 3558 0 2
// Wait ( 0 0$35 ) ;
4473: LD_INT 1225
4475: PPUSH
4476: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4480: LD_INT 10
4482: PPUSH
4483: LD_INT 5
4485: PPUSH
4486: CALL 3558 0 2
// Wait ( 0 0$03 ) ;
4490: LD_INT 105
4492: PPUSH
4493: CALL_OW 67
// Game ;
4497: CALL 3321 0 0
// end ;
4501: LD_VAR 0 1
4505: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4506: LD_INT 22
4508: PUSH
4509: LD_INT 7
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 69
4520: PUSH
4521: LD_INT 0
4523: EQUAL
4524: PUSH
4525: LD_EXP 10
4529: PUSH
4530: LD_INT 1500
4532: GREATEREQUAL
4533: AND
4534: IFFALSE 4762
4536: GO 4538
4538: DISABLE
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// begin DialogueOn ;
4543: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4547: LD_EXP 12
4551: PPUSH
4552: LD_STRING DVr-1
4554: PPUSH
4555: CALL_OW 94
// DialogueOff ;
4559: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4563: LD_STRING QBonusInfo
4565: PPUSH
4566: CALL_OW 97
4570: PUSH
4571: LD_INT 1
4573: DOUBLE
4574: EQUAL
4575: IFTRUE 4579
4577: GO 4590
4579: POP
// bonus_active := true ; end ;
4580: LD_ADDR_EXP 13
4584: PUSH
4585: LD_INT 1
4587: ST_TO_ADDR
4588: GO 4591
4590: POP
// bonus_num := 4 ;
4591: LD_ADDR_EXP 14
4595: PUSH
4596: LD_INT 4
4598: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_mid , art_instant , main_base ) ;
4599: LD_OWVAR 2
4603: PPUSH
4604: LD_INT 2
4606: PPUSH
4607: LD_INT 2
4609: PPUSH
4610: LD_INT 23
4612: PPUSH
4613: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4617: LD_ADDR_VAR 0 1
4621: PUSH
4622: LD_INT 500
4624: PUSH
4625: LD_INT 3500
4627: PUSH
4628: LD_INT 5750
4630: PUSH
4631: LD_INT 10000
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4640: LD_INT 10500
4642: PUSH
4643: LD_INT 12600
4645: PUSH
4646: LD_INT 14700
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_OWVAR 67
4658: ARRAY
4659: PPUSH
4660: CALL_OW 67
// for i = 1 to tmp do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_VAR 0 1
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4712
// if points >= tmp [ i ] then
4682: LD_EXP 10
4686: PUSH
4687: LD_VAR 0 1
4691: PUSH
4692: LD_VAR 0 2
4696: ARRAY
4697: GREATEREQUAL
4698: IFFALSE 4710
// bonus_num := i ;
4700: LD_ADDR_EXP 14
4704: PUSH
4705: LD_VAR 0 2
4709: ST_TO_ADDR
4710: GO 4679
4712: POP
4713: POP
// case Query ( QBonusInfo ) of 1 :
4714: LD_STRING QBonusInfo
4716: PPUSH
4717: CALL_OW 97
4721: PUSH
4722: LD_INT 1
4724: DOUBLE
4725: EQUAL
4726: IFTRUE 4730
4728: GO 4751
4730: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4731: LD_OWVAR 2
4735: PPUSH
4736: LD_INT 12
4738: PPUSH
4739: LD_INT 2
4741: PPUSH
4742: LD_INT 23
4744: PPUSH
4745: CALL_OW 468
4749: GO 4752
4751: POP
// until points >= 15000 ;
4752: LD_EXP 10
4756: PUSH
4757: LD_INT 15000
4759: GREATEREQUAL
4760: IFFALSE 4640
// end ;
4762: PPOPN 2
4764: END
// export function Win ; begin
4765: LD_INT 0
4767: PPUSH
// AddMedal ( med , 1 ) ;
4768: LD_STRING med
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 101
// AddMedal ( med , 1 ) ;
4778: LD_STRING med
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 101
// AddMedal ( med , 1 ) ;
4788: LD_STRING med
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 101
// GiveMedals ( MAIN ) ;
4798: LD_STRING MAIN
4800: PPUSH
4801: CALL_OW 102
// YouWin ;
4805: CALL_OW 103
// end ; end_of_file
4809: LD_VAR 0 1
4813: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4814: LD_INT 0
4816: PPUSH
4817: PPUSH
// dir := GetDir ( b ) ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: LD_VAR 0 2
4827: PPUSH
4828: CALL_OW 254
4832: ST_TO_ADDR
// if dir < 3 then
4833: LD_VAR 0 4
4837: PUSH
4838: LD_INT 3
4840: LESS
4841: IFFALSE 4859
// dir := dir + 3 else
4843: LD_ADDR_VAR 0 4
4847: PUSH
4848: LD_VAR 0 4
4852: PUSH
4853: LD_INT 3
4855: PLUS
4856: ST_TO_ADDR
4857: GO 4873
// dir := dir - 3 ;
4859: LD_ADDR_VAR 0 4
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: LD_INT 3
4871: MINUS
4872: ST_TO_ADDR
// SetDir ( un , dir ) ;
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_VAR 0 4
4882: PPUSH
4883: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_VAR 0 2
4896: PPUSH
4897: CALL_OW 52
// end ;
4901: LD_VAR 0 3
4905: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4906: LD_INT 0
4908: PPUSH
4909: PPUSH
4910: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4911: LD_ADDR_VAR 0 7
4915: PUSH
4916: LD_VAR 0 1
4920: PUSH
4921: LD_VAR 0 2
4925: ARRAY
4926: PPUSH
4927: LD_VAR 0 3
4931: PPUSH
4932: LD_VAR 0 4
4936: PPUSH
4937: CALL_OW 1
4941: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4942: LD_ADDR_VAR 0 1
4946: PUSH
4947: LD_VAR 0 1
4951: PPUSH
4952: LD_VAR 0 2
4956: PPUSH
4957: LD_VAR 0 7
4961: PPUSH
4962: CALL_OW 1
4966: ST_TO_ADDR
// result := tab ;
4967: LD_ADDR_VAR 0 5
4971: PUSH
4972: LD_VAR 0 1
4976: ST_TO_ADDR
// end ;
4977: LD_VAR 0 5
4981: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4982: LD_INT 0
4984: PPUSH
4985: PPUSH
4986: PPUSH
// if not GetControl ( veh ) = control_manual then
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL_OW 263
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: NOT
5001: IFFALSE 5013
// result := false else
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: LD_INT 0
5010: ST_TO_ADDR
5011: GO 5158
// if veh in FilterAllUnits ( [ f_empty ] ) then
5013: LD_VAR 0 1
5017: PUSH
5018: LD_INT 58
5020: PUSH
5021: EMPTY
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: IN
5029: IFFALSE 5041
// result := false else
5031: LD_ADDR_VAR 0 2
5035: PUSH
5036: LD_INT 0
5038: ST_TO_ADDR
5039: GO 5158
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5041: LD_ADDR_VAR 0 4
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 55
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 69
5077: ST_TO_ADDR
// if not filter then
5078: LD_VAR 0 4
5082: NOT
5083: IFFALSE 5095
// result := false else
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_INT 0
5092: ST_TO_ADDR
5093: GO 5158
// for i = 1 to filter do
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_VAR 0 4
5109: PUSH
5110: FOR_TO
5111: IFFALSE 5156
// if IsDriver ( filter [ i ] ) = veh then
5113: LD_VAR 0 4
5117: PUSH
5118: LD_VAR 0 3
5122: ARRAY
5123: PPUSH
5124: CALL 59897 0 1
5128: PUSH
5129: LD_VAR 0 1
5133: EQUAL
5134: IFFALSE 5154
// begin result := filter [ i ] ;
5136: LD_ADDR_VAR 0 2
5140: PUSH
5141: LD_VAR 0 4
5145: PUSH
5146: LD_VAR 0 3
5150: ARRAY
5151: ST_TO_ADDR
// break ;
5152: GO 5156
// end ;
5154: GO 5110
5156: POP
5157: POP
// end ; end ; end_of_file
5158: LD_VAR 0 2
5162: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL 21036 0 1
// if un = legion_commander then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_EXP 1
5181: EQUAL
5182: IFFALSE 5191
// YouLost ( commanderDied ) ;
5184: LD_STRING commanderDied
5186: PPUSH
5187: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5191: LD_VAR 0 1
5195: PUSH
5196: LD_EXP 1
5200: PUSH
5201: LD_INT 23
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: IN
5208: IFFALSE 5218
// game_over := true ;
5210: LD_ADDR_EXP 7
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if un = al_commander then
5218: LD_VAR 0 1
5222: PUSH
5223: LD_EXP 5
5227: EQUAL
5228: IFFALSE 5234
// ChangeSide ( ) ;
5230: CALL 2742 0 0
// if GetSide ( un ) = 7 then
5234: LD_VAR 0 1
5238: PPUSH
5239: CALL_OW 255
5243: PUSH
5244: LD_INT 7
5246: EQUAL
5247: IFFALSE 5365
// begin if GetClass ( un ) = class_apeman then
5249: LD_VAR 0 1
5253: PPUSH
5254: CALL_OW 257
5258: PUSH
5259: LD_INT 12
5261: EQUAL
5262: IFFALSE 5278
// points := points + 6 ;
5264: LD_ADDR_EXP 10
5268: PUSH
5269: LD_EXP 10
5273: PUSH
5274: LD_INT 6
5276: PLUS
5277: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 257
5287: PUSH
5288: LD_INT 17
5290: EQUAL
5291: IFFALSE 5307
// points := points + 11 ;
5293: LD_ADDR_EXP 10
5297: PUSH
5298: LD_EXP 10
5302: PUSH
5303: LD_INT 11
5305: PLUS
5306: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 257
5316: PUSH
5317: LD_INT 15
5319: EQUAL
5320: IFFALSE 5336
// points := points + 14 ;
5322: LD_ADDR_EXP 10
5326: PUSH
5327: LD_EXP 10
5331: PUSH
5332: LD_INT 14
5334: PLUS
5335: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 247
5345: PUSH
5346: LD_INT 2
5348: EQUAL
5349: IFFALSE 5365
// points := points + 50 ;
5351: LD_ADDR_EXP 10
5355: PUSH
5356: LD_EXP 10
5360: PUSH
5361: LD_INT 50
5363: PLUS
5364: ST_TO_ADDR
// end ; end ;
5365: PPOPN 1
5367: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5368: LD_EXP 5
5372: PPUSH
5373: CALL_OW 256
5377: PUSH
5378: LD_INT 1000
5380: LESS
5381: IFFALSE 5413
5383: GO 5385
5385: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5386: LD_EXP 5
5390: PPUSH
5391: CALL_OW 504
5395: PPUSH
5396: CALL_OW 255
5400: PUSH
5401: LD_INT 8
5403: EQUAL
5404: IFFALSE 5413
// YouLost ( FriendlyFire ) ;
5406: LD_STRING FriendlyFire
5408: PPUSH
5409: CALL_OW 104
5413: END
// on DialogueSkipped ( value ) do var i ;
5414: LD_INT 0
5416: PPUSH
// begin RemoveUnit ( potter ) ;
5417: LD_EXP 4
5421: PPUSH
5422: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5426: LD_EXP 2
5430: PUSH
5431: LD_EXP 3
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PPUSH
5440: CALL_OW 122
// Wait ( 1 ) ;
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5451: LD_EXP 2
5455: PPUSH
5456: LD_INT 107
5458: PPUSH
5459: LD_INT 53
5461: PPUSH
5462: LD_INT 0
5464: PPUSH
5465: LD_INT 0
5467: PPUSH
5468: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5472: LD_EXP 3
5476: PPUSH
5477: LD_INT 108
5479: PPUSH
5480: LD_INT 53
5482: PPUSH
5483: LD_INT 0
5485: PPUSH
5486: LD_INT 0
5488: PPUSH
5489: CALL_OW 483
// Wait ( 1 ) ;
5493: LD_INT 1
5495: PPUSH
5496: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5500: LD_EXP 2
5504: PUSH
5505: LD_EXP 3
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: LD_INT 108
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 118
// end ;
5524: PPOPN 2
5526: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
5536: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5537: LD_ADDR_VAR 0 10
5541: PUSH
5542: LD_INT 2
5544: PPUSH
5545: CALL_OW 469
5549: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5550: LD_ADDR_VAR 0 12
5554: PUSH
5555: LD_INT 22
5557: PUSH
5558: LD_OWVAR 2
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 30
5572: PUSH
5573: LD_INT 8
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 30
5582: PUSH
5583: LD_INT 11
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PPUSH
5604: LD_VAR 0 10
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 10
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 73
5626: ST_TO_ADDR
// if icon = art_exp_left then
5627: LD_VAR 0 2
5631: PUSH
5632: LD_INT 1
5634: EQUAL
5635: IFFALSE 5690
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5637: LD_VAR 0 12
5641: PPUSH
5642: LD_EXP 9
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5654: LD_VAR 0 12
5658: PPUSH
5659: LD_EXP 17
5663: PPUSH
5664: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5668: LD_OWVAR 2
5672: PPUSH
5673: LD_INT 1
5675: PPUSH
5676: LD_INT 0
5678: PPUSH
5679: LD_VAR 0 12
5683: PPUSH
5684: CALL_OW 468
// end else
5688: GO 6471
// begin DialogueOn ;
5690: CALL_OW 6
// uc_side := 8 ;
5694: LD_ADDR_OWVAR 20
5698: PUSH
5699: LD_INT 8
5701: ST_TO_ADDR
// uc_nation := 2 ;
5702: LD_ADDR_OWVAR 21
5706: PUSH
5707: LD_INT 2
5709: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5710: LD_ADDR_VAR 0 5
5714: PUSH
5715: LD_STRING QBonus
5717: PUSH
5718: LD_EXP 14
5722: STR
5723: ST_TO_ADDR
// off := true ;
5724: LD_ADDR_VAR 0 6
5728: PUSH
5729: LD_INT 1
5731: ST_TO_ADDR
// units := [ ] ;
5732: LD_ADDR_VAR 0 7
5736: PUSH
5737: EMPTY
5738: ST_TO_ADDR
// crates := 0 ;
5739: LD_ADDR_VAR 0 8
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5747: LD_EXP 12
5751: PPUSH
5752: LD_STRING DVr-2
5754: PPUSH
5755: CALL_OW 94
// wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// case Query ( bonus ) of 1 :
5766: LD_VAR 0 5
5770: PPUSH
5771: CALL_OW 97
5775: PUSH
5776: LD_INT 1
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5869
5784: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5785: LD_ADDR_VAR 0 9
5789: PUSH
5790: LD_INT 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 5
5798: PUSH
5799: LD_INT 8
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: PUSH
5808: LD_EXP 14
5812: ARRAY
5813: ST_TO_ADDR
// for i = 1 to tmp do
5814: LD_ADDR_VAR 0 11
5818: PUSH
5819: DOUBLE
5820: LD_INT 1
5822: DEC
5823: ST_TO_ADDR
5824: LD_VAR 0 9
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5865
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5832: LD_INT 0
5834: PPUSH
5835: LD_INT 15
5837: PPUSH
5838: LD_VAR 0 9
5842: PPUSH
5843: CALL_OW 380
// units := units ^ CreateHuman ;
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: LD_VAR 0 7
5856: PUSH
5857: CALL_OW 44
5861: ADD
5862: ST_TO_ADDR
// end ;
5863: GO 5829
5865: POP
5866: POP
// end ; 2 :
5867: GO 6277
5869: LD_INT 2
5871: DOUBLE
5872: EQUAL
5873: IFTRUE 5877
5875: GO 5909
5877: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5878: LD_ADDR_VAR 0 8
5882: PUSH
5883: LD_INT 100
5885: PUSH
5886: LD_INT 150
5888: PUSH
5889: LD_INT 350
5891: PUSH
5892: LD_INT 500
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: LD_EXP 14
5905: ARRAY
5906: ST_TO_ADDR
// end ; 3 :
5907: GO 6277
5909: LD_INT 3
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 6257
5917: POP
// begin if bonus_num = 1 then
5918: LD_EXP 14
5922: PUSH
5923: LD_INT 1
5925: EQUAL
5926: IFFALSE 5936
// ignore_wave := true ;
5928: LD_ADDR_EXP 15
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// if bonus_num = 2 then
5936: LD_EXP 14
5940: PUSH
5941: LD_INT 2
5943: EQUAL
5944: IFFALSE 6064
// begin for i = 1 to 2 do
5946: LD_ADDR_VAR 0 11
5950: PUSH
5951: DOUBLE
5952: LD_INT 1
5954: DEC
5955: ST_TO_ADDR
5956: LD_INT 2
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6062
// begin uc_nation := nation_arabian ;
5962: LD_ADDR_OWVAR 21
5966: PUSH
5967: LD_INT 2
5969: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5970: LD_ADDR_OWVAR 37
5974: PUSH
5975: LD_INT 14
5977: ST_TO_ADDR
// vc_engine := engine_siberite ;
5978: LD_ADDR_OWVAR 39
5982: PUSH
5983: LD_INT 3
5985: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5986: LD_ADDR_OWVAR 38
5990: PUSH
5991: LD_INT 2
5993: PUSH
5994: LD_INT 5
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 2
6006: PPUSH
6007: CALL_OW 12
6011: ARRAY
6012: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6013: LD_ADDR_OWVAR 40
6017: PUSH
6018: LD_INT 28
6020: PUSH
6021: LD_INT 27
6023: PUSH
6024: LD_INT 25
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 3
6037: PPUSH
6038: CALL_OW 12
6042: ARRAY
6043: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: LD_VAR 0 7
6053: PUSH
6054: CALL_OW 45
6058: ADD
6059: ST_TO_ADDR
// end ;
6060: GO 5959
6062: POP
6063: POP
// end ; if bonus_num = 3 then
6064: LD_EXP 14
6068: PUSH
6069: LD_INT 3
6071: EQUAL
6072: IFFALSE 6196
// begin for i = 1 to 4 do
6074: LD_ADDR_VAR 0 11
6078: PUSH
6079: DOUBLE
6080: LD_INT 1
6082: DEC
6083: ST_TO_ADDR
6084: LD_INT 4
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6194
// begin uc_nation := nation_arabian ;
6090: LD_ADDR_OWVAR 21
6094: PUSH
6095: LD_INT 2
6097: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6098: LD_ADDR_OWVAR 37
6102: PUSH
6103: LD_INT 14
6105: ST_TO_ADDR
// vc_engine := engine_siberite ;
6106: LD_ADDR_OWVAR 39
6110: PUSH
6111: LD_INT 3
6113: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6114: LD_ADDR_OWVAR 38
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: LD_INT 5
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 1
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: CALL_OW 12
6139: ARRAY
6140: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6141: LD_ADDR_OWVAR 40
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 27
6151: PUSH
6152: LD_INT 28
6154: PUSH
6155: LD_INT 25
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 4
6169: PPUSH
6170: CALL_OW 12
6174: ARRAY
6175: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6176: LD_ADDR_VAR 0 7
6180: PUSH
6181: LD_VAR 0 7
6185: PUSH
6186: CALL_OW 45
6190: ADD
6191: ST_TO_ADDR
// end ;
6192: GO 6087
6194: POP
6195: POP
// end ; if bonus_num = 4 then
6196: LD_EXP 14
6200: PUSH
6201: LD_INT 4
6203: EQUAL
6204: IFFALSE 6255
// for i = 1 to 3 do
6206: LD_ADDR_VAR 0 11
6210: PUSH
6211: DOUBLE
6212: LD_INT 1
6214: DEC
6215: ST_TO_ADDR
6216: LD_INT 3
6218: PUSH
6219: FOR_TO
6220: IFFALSE 6253
// begin PrepareHuman ( false , 3 , 8 ) ;
6222: LD_INT 0
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: LD_INT 8
6230: PPUSH
6231: CALL_OW 380
// units := units ^ CreateHuman ;
6235: LD_ADDR_VAR 0 7
6239: PUSH
6240: LD_VAR 0 7
6244: PUSH
6245: CALL_OW 44
6249: ADD
6250: ST_TO_ADDR
// end ;
6251: GO 6219
6253: POP
6254: POP
// end ; 4 :
6255: GO 6277
6257: LD_INT 4
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6276
6265: POP
// off := false ; end ;
6266: LD_ADDR_VAR 0 6
6270: PUSH
6271: LD_INT 0
6273: ST_TO_ADDR
6274: GO 6277
6276: POP
// DialogueOff ;
6277: CALL_OW 7
// if not off then
6281: LD_VAR 0 6
6285: NOT
6286: IFFALSE 6292
// exit else
6288: GO 6471
6290: GO 6345
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6292: LD_OWVAR 2
6296: PPUSH
6297: LD_INT 12
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_INT 23
6305: PPUSH
6306: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6310: LD_EXP 12
6314: PPUSH
6315: LD_STRING DVr-3
6317: PUSH
6318: LD_STRING DVr-3a
6320: PUSH
6321: LD_STRING DVr-3b
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 1
6331: PPUSH
6332: LD_INT 3
6334: PPUSH
6335: CALL_OW 12
6339: ARRAY
6340: PPUSH
6341: CALL_OW 94
// end ; if units then
6345: LD_VAR 0 7
6349: IFFALSE 6413
// for i in units do
6351: LD_ADDR_VAR 0 11
6355: PUSH
6356: LD_VAR 0 7
6360: PUSH
6361: FOR_IN
6362: IFFALSE 6411
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6364: LD_VAR 0 11
6368: PPUSH
6369: LD_INT 92
6371: PPUSH
6372: LD_INT 49
6374: PPUSH
6375: LD_INT 20
6377: PPUSH
6378: LD_INT 0
6380: PPUSH
6381: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6385: LD_VAR 0 11
6389: PPUSH
6390: CALL_OW 250
6394: PPUSH
6395: LD_VAR 0 11
6399: PPUSH
6400: CALL_OW 251
6404: PPUSH
6405: CALL_OW 494
// end ;
6409: GO 6361
6411: POP
6412: POP
// if crates then
6413: LD_VAR 0 8
6417: IFFALSE 6471
// for i = 1 to ( crates div 50 ) do
6419: LD_ADDR_VAR 0 11
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_VAR 0 8
6433: PUSH
6434: LD_INT 50
6436: DIV
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6469
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6441: LD_INT 5
6443: PPUSH
6444: LD_INT 92
6446: PPUSH
6447: LD_INT 49
6449: PPUSH
6450: LD_INT 30
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: CALL_OW 56
// wait ( 0 0$02 ) ;
6460: LD_INT 70
6462: PPUSH
6463: CALL_OW 67
// end ;
6467: GO 6438
6469: POP
6470: POP
// end ; end ;
6471: PPOPN 12
6473: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: LD_VAR 0 3
6488: PPUSH
6489: CALL 21134 0 3
// end ;
6493: PPOPN 3
6495: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6496: LD_VAR 0 1
6500: PPUSH
6501: CALL 21142 0 1
// end ;
6505: PPOPN 1
6507: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6508: LD_VAR 0 1
6512: PPUSH
6513: CALL_OW 255
6517: PUSH
6518: LD_OWVAR 2
6522: EQUAL
6523: IFFALSE 6533
// player_res_art := true ;
6525: LD_ADDR_EXP 8
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// end ;
6533: PPOPN 1
6535: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6536: LD_INT 22
6538: PUSH
6539: LD_OWVAR 2
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: LD_INT 30
6553: PUSH
6554: LD_INT 7
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 30
6563: PUSH
6564: LD_INT 8
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 30
6573: PUSH
6574: LD_INT 11
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PPUSH
6591: CALL_OW 69
6595: IFFALSE 6828
6597: GO 6599
6599: DISABLE
6600: LD_INT 0
6602: PPUSH
6603: PPUSH
// begin enable ;
6604: ENABLE
// xy := FindArtifact ( 2 ) ;
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: LD_INT 2
6612: PPUSH
6613: CALL_OW 469
6617: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6618: LD_ADDR_VAR 0 2
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_OWVAR 2
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: LD_INT 30
6640: PUSH
6641: LD_INT 8
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 30
6650: PUSH
6651: LD_INT 7
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 30
6660: PUSH
6661: LD_INT 11
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 69
6682: PPUSH
6683: LD_VAR 0 1
6687: PUSH
6688: LD_INT 1
6690: ARRAY
6691: PPUSH
6692: LD_VAR 0 1
6696: PUSH
6697: LD_INT 2
6699: ARRAY
6700: PPUSH
6701: CALL_OW 73
6705: ST_TO_ADDR
// if player_artifact_ready = false then
6706: LD_EXP 16
6710: PUSH
6711: LD_INT 0
6713: EQUAL
6714: IFFALSE 6828
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6716: LD_VAR 0 2
6720: PPUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_INT 1
6728: ARRAY
6729: PPUSH
6730: LD_VAR 0 1
6734: PUSH
6735: LD_INT 2
6737: ARRAY
6738: PPUSH
6739: CALL_OW 297
6743: PUSH
6744: LD_INT 6
6746: LESS
6747: IFFALSE 6808
// begin if BuildingStatus ( lab ) = bs_idle then
6749: LD_VAR 0 2
6753: PPUSH
6754: CALL_OW 461
6758: PUSH
6759: LD_INT 2
6761: EQUAL
6762: IFFALSE 6786
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6764: LD_OWVAR 2
6768: PPUSH
6769: LD_INT 1
6771: PPUSH
6772: LD_INT 2
6774: PPUSH
6775: LD_VAR 0 2
6779: PPUSH
6780: CALL_OW 468
6784: GO 6806
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6786: LD_OWVAR 2
6790: PPUSH
6791: LD_INT 1
6793: PPUSH
6794: LD_INT 1
6796: PPUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 468
// end else
6806: GO 6828
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6808: LD_OWVAR 2
6812: PPUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: LD_VAR 0 2
6823: PPUSH
6824: CALL_OW 468
// end ;
6828: PPOPN 2
6830: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 255
6840: PUSH
6841: LD_OWVAR 2
6845: EQUAL
6846: IFFALSE 6872
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6848: LD_OWVAR 2
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 0
6858: PPUSH
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 468
// Win ;
6868: CALL 4765 0 0
// end ; end ;
6872: PPOPN 1
6874: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6875: LD_ADDR_EXP 17
6879: PUSH
6880: LD_VAR 0 2
6884: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6885: LD_OWVAR 2
6889: PPUSH
6890: LD_INT 1
6892: PPUSH
6893: LD_INT 2
6895: PPUSH
6896: LD_VAR 0 1
6900: PPUSH
6901: CALL_OW 468
// end ;
6905: PPOPN 2
6907: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6908: LD_VAR 0 1
6912: PPUSH
6913: LD_VAR 0 2
6917: PPUSH
6918: CALL 21158 0 2
// end ; end_of_file
6922: PPOPN 2
6924: END
// every 0 0$01 trigger not game_over do
6925: LD_EXP 7
6929: NOT
6930: IFFALSE 6963
6932: GO 6934
6934: DISABLE
// begin enable ;
6935: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6936: LD_ADDR_OWVAR 47
6940: PUSH
6941: LD_STRING #tick
6943: PUSH
6944: LD_OWVAR 1
6948: PUSH
6949: LD_STRING #points
6951: PUSH
6952: LD_EXP 10
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: ST_TO_ADDR
// end ;
6963: END
// every 0 0$01 trigger game_over do
6964: LD_EXP 7
6968: IFFALSE 7027
6970: GO 6972
6972: DISABLE
// begin Wait ( 0 0$02 ) ;
6973: LD_INT 70
6975: PPUSH
6976: CALL_OW 67
// DialogueOn ;
6980: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6984: LD_ADDR_OWVAR 47
6988: PUSH
6989: LD_STRING #game-points
6991: PUSH
6992: LD_OWVAR 78
6996: PUSH
6997: LD_EXP 10
7001: PUSH
7002: LD_STRING #game-time
7004: PUSH
7005: LD_OWVAR 1
7009: PUSH
7010: LD_STRING #game-difficulty
7012: PUSH
7013: LD_OWVAR 67
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: ST_TO_ADDR
// end ; end_of_file
7027: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7028: LD_OWVAR 1
7032: PUSH
7033: LD_INT 52500
7035: LESS
7036: IFFALSE 7060
7038: GO 7040
7040: DISABLE
// begin enable ;
7041: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7042: LD_INT 1
7044: PPUSH
7045: LD_INT 5
7047: PPUSH
7048: CALL_OW 12
7052: PPUSH
7053: LD_INT 1
7055: PPUSH
7056: CALL_OW 57
// end ; end_of_file
7060: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7061: LD_INT 0
7063: PPUSH
// ar_miner := 81 ;
7064: LD_ADDR_EXP 25
7068: PUSH
7069: LD_INT 81
7071: ST_TO_ADDR
// ar_crane := 88 ;
7072: LD_ADDR_EXP 24
7076: PUSH
7077: LD_INT 88
7079: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7080: LD_ADDR_EXP 19
7084: PUSH
7085: LD_INT 89
7087: ST_TO_ADDR
// us_hack := 99 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_INT 99
7095: ST_TO_ADDR
// us_artillery := 97 ;
7096: LD_ADDR_EXP 21
7100: PUSH
7101: LD_INT 97
7103: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7104: LD_ADDR_EXP 22
7108: PUSH
7109: LD_INT 91
7111: ST_TO_ADDR
// ar_mortar := 92 ;
7112: LD_ADDR_EXP 23
7116: PUSH
7117: LD_INT 92
7119: ST_TO_ADDR
// ru_radar := 98 ;
7120: LD_ADDR_EXP 18
7124: PUSH
7125: LD_INT 98
7127: ST_TO_ADDR
// tech_Artillery := 80 ;
7128: LD_ADDR_EXP 26
7132: PUSH
7133: LD_INT 80
7135: ST_TO_ADDR
// tech_RadMat := 81 ;
7136: LD_ADDR_EXP 27
7140: PUSH
7141: LD_INT 81
7143: ST_TO_ADDR
// tech_BasicTools := 82 ;
7144: LD_ADDR_EXP 28
7148: PUSH
7149: LD_INT 82
7151: ST_TO_ADDR
// tech_Cargo := 83 ;
7152: LD_ADDR_EXP 29
7156: PUSH
7157: LD_INT 83
7159: ST_TO_ADDR
// tech_Track := 84 ;
7160: LD_ADDR_EXP 30
7164: PUSH
7165: LD_INT 84
7167: ST_TO_ADDR
// tech_Crane := 85 ;
7168: LD_ADDR_EXP 31
7172: PUSH
7173: LD_INT 85
7175: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7176: LD_ADDR_EXP 32
7180: PUSH
7181: LD_INT 86
7183: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7184: LD_ADDR_EXP 33
7188: PUSH
7189: LD_INT 87
7191: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7192: LD_ADDR_EXP 34
7196: PUSH
7197: LD_INT 88
7199: ST_TO_ADDR
// class_mastodont := 31 ;
7200: LD_ADDR_EXP 35
7204: PUSH
7205: LD_INT 31
7207: ST_TO_ADDR
// class_horse := 21 ;
7208: LD_ADDR_EXP 36
7212: PUSH
7213: LD_INT 21
7215: ST_TO_ADDR
// end ;
7216: LD_VAR 0 1
7220: RET
// every 1 do
7221: GO 7223
7223: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7224: CALL 7061 0 0
7228: END
// every 0 0$1 do
7229: GO 7231
7231: DISABLE
// begin enable ;
7232: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7233: LD_STRING updateTimer(
7235: PUSH
7236: LD_OWVAR 1
7240: STR
7241: PUSH
7242: LD_STRING );
7244: STR
7245: PPUSH
7246: CALL_OW 559
// end ;
7250: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7251: LD_INT 0
7253: PPUSH
// if p2 = 100 then
7254: LD_VAR 0 2
7258: PUSH
7259: LD_INT 100
7261: EQUAL
7262: IFFALSE 8265
// begin if not StreamModeActive then
7264: LD_EXP 37
7268: NOT
7269: IFFALSE 7279
// StreamModeActive := true ;
7271: LD_ADDR_EXP 37
7275: PUSH
7276: LD_INT 1
7278: ST_TO_ADDR
// if p3 = 0 then
7279: LD_VAR 0 3
7283: PUSH
7284: LD_INT 0
7286: EQUAL
7287: IFFALSE 7293
// InitStreamMode ;
7289: CALL 8425 0 0
// if p3 = 1 then
7293: LD_VAR 0 3
7297: PUSH
7298: LD_INT 1
7300: EQUAL
7301: IFFALSE 7311
// sRocket := true ;
7303: LD_ADDR_EXP 42
7307: PUSH
7308: LD_INT 1
7310: ST_TO_ADDR
// if p3 = 2 then
7311: LD_VAR 0 3
7315: PUSH
7316: LD_INT 2
7318: EQUAL
7319: IFFALSE 7329
// sSpeed := true ;
7321: LD_ADDR_EXP 41
7325: PUSH
7326: LD_INT 1
7328: ST_TO_ADDR
// if p3 = 3 then
7329: LD_VAR 0 3
7333: PUSH
7334: LD_INT 3
7336: EQUAL
7337: IFFALSE 7347
// sEngine := true ;
7339: LD_ADDR_EXP 43
7343: PUSH
7344: LD_INT 1
7346: ST_TO_ADDR
// if p3 = 4 then
7347: LD_VAR 0 3
7351: PUSH
7352: LD_INT 4
7354: EQUAL
7355: IFFALSE 7365
// sSpec := true ;
7357: LD_ADDR_EXP 40
7361: PUSH
7362: LD_INT 1
7364: ST_TO_ADDR
// if p3 = 5 then
7365: LD_VAR 0 3
7369: PUSH
7370: LD_INT 5
7372: EQUAL
7373: IFFALSE 7383
// sLevel := true ;
7375: LD_ADDR_EXP 44
7379: PUSH
7380: LD_INT 1
7382: ST_TO_ADDR
// if p3 = 6 then
7383: LD_VAR 0 3
7387: PUSH
7388: LD_INT 6
7390: EQUAL
7391: IFFALSE 7401
// sArmoury := true ;
7393: LD_ADDR_EXP 45
7397: PUSH
7398: LD_INT 1
7400: ST_TO_ADDR
// if p3 = 7 then
7401: LD_VAR 0 3
7405: PUSH
7406: LD_INT 7
7408: EQUAL
7409: IFFALSE 7419
// sRadar := true ;
7411: LD_ADDR_EXP 46
7415: PUSH
7416: LD_INT 1
7418: ST_TO_ADDR
// if p3 = 8 then
7419: LD_VAR 0 3
7423: PUSH
7424: LD_INT 8
7426: EQUAL
7427: IFFALSE 7437
// sBunker := true ;
7429: LD_ADDR_EXP 47
7433: PUSH
7434: LD_INT 1
7436: ST_TO_ADDR
// if p3 = 9 then
7437: LD_VAR 0 3
7441: PUSH
7442: LD_INT 9
7444: EQUAL
7445: IFFALSE 7455
// sHack := true ;
7447: LD_ADDR_EXP 48
7451: PUSH
7452: LD_INT 1
7454: ST_TO_ADDR
// if p3 = 10 then
7455: LD_VAR 0 3
7459: PUSH
7460: LD_INT 10
7462: EQUAL
7463: IFFALSE 7473
// sFire := true ;
7465: LD_ADDR_EXP 49
7469: PUSH
7470: LD_INT 1
7472: ST_TO_ADDR
// if p3 = 11 then
7473: LD_VAR 0 3
7477: PUSH
7478: LD_INT 11
7480: EQUAL
7481: IFFALSE 7491
// sRefresh := true ;
7483: LD_ADDR_EXP 50
7487: PUSH
7488: LD_INT 1
7490: ST_TO_ADDR
// if p3 = 12 then
7491: LD_VAR 0 3
7495: PUSH
7496: LD_INT 12
7498: EQUAL
7499: IFFALSE 7509
// sExp := true ;
7501: LD_ADDR_EXP 51
7505: PUSH
7506: LD_INT 1
7508: ST_TO_ADDR
// if p3 = 13 then
7509: LD_VAR 0 3
7513: PUSH
7514: LD_INT 13
7516: EQUAL
7517: IFFALSE 7527
// sDepot := true ;
7519: LD_ADDR_EXP 52
7523: PUSH
7524: LD_INT 1
7526: ST_TO_ADDR
// if p3 = 14 then
7527: LD_VAR 0 3
7531: PUSH
7532: LD_INT 14
7534: EQUAL
7535: IFFALSE 7545
// sFlag := true ;
7537: LD_ADDR_EXP 53
7541: PUSH
7542: LD_INT 1
7544: ST_TO_ADDR
// if p3 = 15 then
7545: LD_VAR 0 3
7549: PUSH
7550: LD_INT 15
7552: EQUAL
7553: IFFALSE 7563
// sKamikadze := true ;
7555: LD_ADDR_EXP 61
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
// if p3 = 16 then
7563: LD_VAR 0 3
7567: PUSH
7568: LD_INT 16
7570: EQUAL
7571: IFFALSE 7581
// sTroll := true ;
7573: LD_ADDR_EXP 62
7577: PUSH
7578: LD_INT 1
7580: ST_TO_ADDR
// if p3 = 17 then
7581: LD_VAR 0 3
7585: PUSH
7586: LD_INT 17
7588: EQUAL
7589: IFFALSE 7599
// sSlow := true ;
7591: LD_ADDR_EXP 63
7595: PUSH
7596: LD_INT 1
7598: ST_TO_ADDR
// if p3 = 18 then
7599: LD_VAR 0 3
7603: PUSH
7604: LD_INT 18
7606: EQUAL
7607: IFFALSE 7617
// sLack := true ;
7609: LD_ADDR_EXP 64
7613: PUSH
7614: LD_INT 1
7616: ST_TO_ADDR
// if p3 = 19 then
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 19
7624: EQUAL
7625: IFFALSE 7635
// sTank := true ;
7627: LD_ADDR_EXP 66
7631: PUSH
7632: LD_INT 1
7634: ST_TO_ADDR
// if p3 = 20 then
7635: LD_VAR 0 3
7639: PUSH
7640: LD_INT 20
7642: EQUAL
7643: IFFALSE 7653
// sRemote := true ;
7645: LD_ADDR_EXP 67
7649: PUSH
7650: LD_INT 1
7652: ST_TO_ADDR
// if p3 = 21 then
7653: LD_VAR 0 3
7657: PUSH
7658: LD_INT 21
7660: EQUAL
7661: IFFALSE 7671
// sPowell := true ;
7663: LD_ADDR_EXP 68
7667: PUSH
7668: LD_INT 1
7670: ST_TO_ADDR
// if p3 = 22 then
7671: LD_VAR 0 3
7675: PUSH
7676: LD_INT 22
7678: EQUAL
7679: IFFALSE 7689
// sTeleport := true ;
7681: LD_ADDR_EXP 71
7685: PUSH
7686: LD_INT 1
7688: ST_TO_ADDR
// if p3 = 23 then
7689: LD_VAR 0 3
7693: PUSH
7694: LD_INT 23
7696: EQUAL
7697: IFFALSE 7707
// sOilTower := true ;
7699: LD_ADDR_EXP 73
7703: PUSH
7704: LD_INT 1
7706: ST_TO_ADDR
// if p3 = 24 then
7707: LD_VAR 0 3
7711: PUSH
7712: LD_INT 24
7714: EQUAL
7715: IFFALSE 7725
// sShovel := true ;
7717: LD_ADDR_EXP 74
7721: PUSH
7722: LD_INT 1
7724: ST_TO_ADDR
// if p3 = 25 then
7725: LD_VAR 0 3
7729: PUSH
7730: LD_INT 25
7732: EQUAL
7733: IFFALSE 7743
// sSheik := true ;
7735: LD_ADDR_EXP 75
7739: PUSH
7740: LD_INT 1
7742: ST_TO_ADDR
// if p3 = 26 then
7743: LD_VAR 0 3
7747: PUSH
7748: LD_INT 26
7750: EQUAL
7751: IFFALSE 7761
// sEarthquake := true ;
7753: LD_ADDR_EXP 77
7757: PUSH
7758: LD_INT 1
7760: ST_TO_ADDR
// if p3 = 27 then
7761: LD_VAR 0 3
7765: PUSH
7766: LD_INT 27
7768: EQUAL
7769: IFFALSE 7779
// sAI := true ;
7771: LD_ADDR_EXP 78
7775: PUSH
7776: LD_INT 1
7778: ST_TO_ADDR
// if p3 = 28 then
7779: LD_VAR 0 3
7783: PUSH
7784: LD_INT 28
7786: EQUAL
7787: IFFALSE 7797
// sCargo := true ;
7789: LD_ADDR_EXP 81
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// if p3 = 29 then
7797: LD_VAR 0 3
7801: PUSH
7802: LD_INT 29
7804: EQUAL
7805: IFFALSE 7815
// sDLaser := true ;
7807: LD_ADDR_EXP 82
7811: PUSH
7812: LD_INT 1
7814: ST_TO_ADDR
// if p3 = 30 then
7815: LD_VAR 0 3
7819: PUSH
7820: LD_INT 30
7822: EQUAL
7823: IFFALSE 7833
// sExchange := true ;
7825: LD_ADDR_EXP 83
7829: PUSH
7830: LD_INT 1
7832: ST_TO_ADDR
// if p3 = 31 then
7833: LD_VAR 0 3
7837: PUSH
7838: LD_INT 31
7840: EQUAL
7841: IFFALSE 7851
// sFac := true ;
7843: LD_ADDR_EXP 84
7847: PUSH
7848: LD_INT 1
7850: ST_TO_ADDR
// if p3 = 32 then
7851: LD_VAR 0 3
7855: PUSH
7856: LD_INT 32
7858: EQUAL
7859: IFFALSE 7869
// sPower := true ;
7861: LD_ADDR_EXP 85
7865: PUSH
7866: LD_INT 1
7868: ST_TO_ADDR
// if p3 = 33 then
7869: LD_VAR 0 3
7873: PUSH
7874: LD_INT 33
7876: EQUAL
7877: IFFALSE 7887
// sRandom := true ;
7879: LD_ADDR_EXP 86
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// if p3 = 34 then
7887: LD_VAR 0 3
7891: PUSH
7892: LD_INT 34
7894: EQUAL
7895: IFFALSE 7905
// sShield := true ;
7897: LD_ADDR_EXP 87
7901: PUSH
7902: LD_INT 1
7904: ST_TO_ADDR
// if p3 = 35 then
7905: LD_VAR 0 3
7909: PUSH
7910: LD_INT 35
7912: EQUAL
7913: IFFALSE 7923
// sTime := true ;
7915: LD_ADDR_EXP 88
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// if p3 = 36 then
7923: LD_VAR 0 3
7927: PUSH
7928: LD_INT 36
7930: EQUAL
7931: IFFALSE 7941
// sTools := true ;
7933: LD_ADDR_EXP 89
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// if p3 = 101 then
7941: LD_VAR 0 3
7945: PUSH
7946: LD_INT 101
7948: EQUAL
7949: IFFALSE 7959
// sSold := true ;
7951: LD_ADDR_EXP 54
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// if p3 = 102 then
7959: LD_VAR 0 3
7963: PUSH
7964: LD_INT 102
7966: EQUAL
7967: IFFALSE 7977
// sDiff := true ;
7969: LD_ADDR_EXP 55
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// if p3 = 103 then
7977: LD_VAR 0 3
7981: PUSH
7982: LD_INT 103
7984: EQUAL
7985: IFFALSE 7995
// sFog := true ;
7987: LD_ADDR_EXP 58
7991: PUSH
7992: LD_INT 1
7994: ST_TO_ADDR
// if p3 = 104 then
7995: LD_VAR 0 3
7999: PUSH
8000: LD_INT 104
8002: EQUAL
8003: IFFALSE 8013
// sReset := true ;
8005: LD_ADDR_EXP 59
8009: PUSH
8010: LD_INT 1
8012: ST_TO_ADDR
// if p3 = 105 then
8013: LD_VAR 0 3
8017: PUSH
8018: LD_INT 105
8020: EQUAL
8021: IFFALSE 8031
// sSun := true ;
8023: LD_ADDR_EXP 60
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// if p3 = 106 then
8031: LD_VAR 0 3
8035: PUSH
8036: LD_INT 106
8038: EQUAL
8039: IFFALSE 8049
// sTiger := true ;
8041: LD_ADDR_EXP 56
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// if p3 = 107 then
8049: LD_VAR 0 3
8053: PUSH
8054: LD_INT 107
8056: EQUAL
8057: IFFALSE 8067
// sBomb := true ;
8059: LD_ADDR_EXP 57
8063: PUSH
8064: LD_INT 1
8066: ST_TO_ADDR
// if p3 = 108 then
8067: LD_VAR 0 3
8071: PUSH
8072: LD_INT 108
8074: EQUAL
8075: IFFALSE 8085
// sWound := true ;
8077: LD_ADDR_EXP 65
8081: PUSH
8082: LD_INT 1
8084: ST_TO_ADDR
// if p3 = 109 then
8085: LD_VAR 0 3
8089: PUSH
8090: LD_INT 109
8092: EQUAL
8093: IFFALSE 8103
// sBetray := true ;
8095: LD_ADDR_EXP 69
8099: PUSH
8100: LD_INT 1
8102: ST_TO_ADDR
// if p3 = 110 then
8103: LD_VAR 0 3
8107: PUSH
8108: LD_INT 110
8110: EQUAL
8111: IFFALSE 8121
// sContamin := true ;
8113: LD_ADDR_EXP 70
8117: PUSH
8118: LD_INT 1
8120: ST_TO_ADDR
// if p3 = 111 then
8121: LD_VAR 0 3
8125: PUSH
8126: LD_INT 111
8128: EQUAL
8129: IFFALSE 8139
// sOil := true ;
8131: LD_ADDR_EXP 72
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// if p3 = 112 then
8139: LD_VAR 0 3
8143: PUSH
8144: LD_INT 112
8146: EQUAL
8147: IFFALSE 8157
// sStu := true ;
8149: LD_ADDR_EXP 76
8153: PUSH
8154: LD_INT 1
8156: ST_TO_ADDR
// if p3 = 113 then
8157: LD_VAR 0 3
8161: PUSH
8162: LD_INT 113
8164: EQUAL
8165: IFFALSE 8175
// sBazooka := true ;
8167: LD_ADDR_EXP 79
8171: PUSH
8172: LD_INT 1
8174: ST_TO_ADDR
// if p3 = 114 then
8175: LD_VAR 0 3
8179: PUSH
8180: LD_INT 114
8182: EQUAL
8183: IFFALSE 8193
// sMortar := true ;
8185: LD_ADDR_EXP 80
8189: PUSH
8190: LD_INT 1
8192: ST_TO_ADDR
// if p3 = 115 then
8193: LD_VAR 0 3
8197: PUSH
8198: LD_INT 115
8200: EQUAL
8201: IFFALSE 8211
// sRanger := true ;
8203: LD_ADDR_EXP 90
8207: PUSH
8208: LD_INT 1
8210: ST_TO_ADDR
// if p3 = 116 then
8211: LD_VAR 0 3
8215: PUSH
8216: LD_INT 116
8218: EQUAL
8219: IFFALSE 8229
// sComputer := true ;
8221: LD_ADDR_EXP 91
8225: PUSH
8226: LD_INT 1
8228: ST_TO_ADDR
// if p3 = 117 then
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 117
8236: EQUAL
8237: IFFALSE 8247
// s30 := true ;
8239: LD_ADDR_EXP 92
8243: PUSH
8244: LD_INT 1
8246: ST_TO_ADDR
// if p3 = 118 then
8247: LD_VAR 0 3
8251: PUSH
8252: LD_INT 118
8254: EQUAL
8255: IFFALSE 8265
// s60 := true ;
8257: LD_ADDR_EXP 93
8261: PUSH
8262: LD_INT 1
8264: ST_TO_ADDR
// end ; if p2 = 101 then
8265: LD_VAR 0 2
8269: PUSH
8270: LD_INT 101
8272: EQUAL
8273: IFFALSE 8401
// begin case p3 of 1 :
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 1
8282: DOUBLE
8283: EQUAL
8284: IFTRUE 8288
8286: GO 8295
8288: POP
// hHackUnlimitedResources ; 2 :
8289: CALL 19997 0 0
8293: GO 8401
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8310
8303: POP
// hHackSetLevel10 ; 3 :
8304: CALL 20130 0 0
8308: GO 8401
8310: LD_INT 3
8312: DOUBLE
8313: EQUAL
8314: IFTRUE 8318
8316: GO 8325
8318: POP
// hHackSetLevel10YourUnits ; 4 :
8319: CALL 20215 0 0
8323: GO 8401
8325: LD_INT 4
8327: DOUBLE
8328: EQUAL
8329: IFTRUE 8333
8331: GO 8340
8333: POP
// hHackInvincible ; 5 :
8334: CALL 20663 0 0
8338: GO 8401
8340: LD_INT 5
8342: DOUBLE
8343: EQUAL
8344: IFTRUE 8348
8346: GO 8355
8348: POP
// hHackInvisible ; 6 :
8349: CALL 20774 0 0
8353: GO 8401
8355: LD_INT 6
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8370
8363: POP
// hHackChangeYourSide ; 7 :
8364: CALL 20831 0 0
8368: GO 8401
8370: LD_INT 7
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8385
8378: POP
// hHackChangeUnitSide ; 8 :
8379: CALL 20873 0 0
8383: GO 8401
8385: LD_INT 8
8387: DOUBLE
8388: EQUAL
8389: IFTRUE 8393
8391: GO 8400
8393: POP
// hHackFog ; end ;
8394: CALL 20974 0 0
8398: GO 8401
8400: POP
// end ; end ;
8401: LD_VAR 0 7
8405: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8406: GO 8408
8408: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8409: LD_STRING initStreamRollete();
8411: PPUSH
8412: CALL_OW 559
// InitStreamMode ;
8416: CALL 8425 0 0
// DefineStreamItems ( ) ;
8420: CALL 8889 0 0
// end ;
8424: END
// function InitStreamMode ; begin
8425: LD_INT 0
8427: PPUSH
// streamModeActive := false ;
8428: LD_ADDR_EXP 37
8432: PUSH
8433: LD_INT 0
8435: ST_TO_ADDR
// normalCounter := 36 ;
8436: LD_ADDR_EXP 38
8440: PUSH
8441: LD_INT 36
8443: ST_TO_ADDR
// hardcoreCounter := 16 ;
8444: LD_ADDR_EXP 39
8448: PUSH
8449: LD_INT 16
8451: ST_TO_ADDR
// sRocket := false ;
8452: LD_ADDR_EXP 42
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// sSpeed := false ;
8460: LD_ADDR_EXP 41
8464: PUSH
8465: LD_INT 0
8467: ST_TO_ADDR
// sEngine := false ;
8468: LD_ADDR_EXP 43
8472: PUSH
8473: LD_INT 0
8475: ST_TO_ADDR
// sSpec := false ;
8476: LD_ADDR_EXP 40
8480: PUSH
8481: LD_INT 0
8483: ST_TO_ADDR
// sLevel := false ;
8484: LD_ADDR_EXP 44
8488: PUSH
8489: LD_INT 0
8491: ST_TO_ADDR
// sArmoury := false ;
8492: LD_ADDR_EXP 45
8496: PUSH
8497: LD_INT 0
8499: ST_TO_ADDR
// sRadar := false ;
8500: LD_ADDR_EXP 46
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// sBunker := false ;
8508: LD_ADDR_EXP 47
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
// sHack := false ;
8516: LD_ADDR_EXP 48
8520: PUSH
8521: LD_INT 0
8523: ST_TO_ADDR
// sFire := false ;
8524: LD_ADDR_EXP 49
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// sRefresh := false ;
8532: LD_ADDR_EXP 50
8536: PUSH
8537: LD_INT 0
8539: ST_TO_ADDR
// sExp := false ;
8540: LD_ADDR_EXP 51
8544: PUSH
8545: LD_INT 0
8547: ST_TO_ADDR
// sDepot := false ;
8548: LD_ADDR_EXP 52
8552: PUSH
8553: LD_INT 0
8555: ST_TO_ADDR
// sFlag := false ;
8556: LD_ADDR_EXP 53
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// sKamikadze := false ;
8564: LD_ADDR_EXP 61
8568: PUSH
8569: LD_INT 0
8571: ST_TO_ADDR
// sTroll := false ;
8572: LD_ADDR_EXP 62
8576: PUSH
8577: LD_INT 0
8579: ST_TO_ADDR
// sSlow := false ;
8580: LD_ADDR_EXP 63
8584: PUSH
8585: LD_INT 0
8587: ST_TO_ADDR
// sLack := false ;
8588: LD_ADDR_EXP 64
8592: PUSH
8593: LD_INT 0
8595: ST_TO_ADDR
// sTank := false ;
8596: LD_ADDR_EXP 66
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// sRemote := false ;
8604: LD_ADDR_EXP 67
8608: PUSH
8609: LD_INT 0
8611: ST_TO_ADDR
// sPowell := false ;
8612: LD_ADDR_EXP 68
8616: PUSH
8617: LD_INT 0
8619: ST_TO_ADDR
// sTeleport := false ;
8620: LD_ADDR_EXP 71
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sOilTower := false ;
8628: LD_ADDR_EXP 73
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// sShovel := false ;
8636: LD_ADDR_EXP 74
8640: PUSH
8641: LD_INT 0
8643: ST_TO_ADDR
// sSheik := false ;
8644: LD_ADDR_EXP 75
8648: PUSH
8649: LD_INT 0
8651: ST_TO_ADDR
// sEarthquake := false ;
8652: LD_ADDR_EXP 77
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// sAI := false ;
8660: LD_ADDR_EXP 78
8664: PUSH
8665: LD_INT 0
8667: ST_TO_ADDR
// sCargo := false ;
8668: LD_ADDR_EXP 81
8672: PUSH
8673: LD_INT 0
8675: ST_TO_ADDR
// sDLaser := false ;
8676: LD_ADDR_EXP 82
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// sExchange := false ;
8684: LD_ADDR_EXP 83
8688: PUSH
8689: LD_INT 0
8691: ST_TO_ADDR
// sFac := false ;
8692: LD_ADDR_EXP 84
8696: PUSH
8697: LD_INT 0
8699: ST_TO_ADDR
// sPower := false ;
8700: LD_ADDR_EXP 85
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// sRandom := false ;
8708: LD_ADDR_EXP 86
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// sShield := false ;
8716: LD_ADDR_EXP 87
8720: PUSH
8721: LD_INT 0
8723: ST_TO_ADDR
// sTime := false ;
8724: LD_ADDR_EXP 88
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// sTools := false ;
8732: LD_ADDR_EXP 89
8736: PUSH
8737: LD_INT 0
8739: ST_TO_ADDR
// sSold := false ;
8740: LD_ADDR_EXP 54
8744: PUSH
8745: LD_INT 0
8747: ST_TO_ADDR
// sDiff := false ;
8748: LD_ADDR_EXP 55
8752: PUSH
8753: LD_INT 0
8755: ST_TO_ADDR
// sFog := false ;
8756: LD_ADDR_EXP 58
8760: PUSH
8761: LD_INT 0
8763: ST_TO_ADDR
// sReset := false ;
8764: LD_ADDR_EXP 59
8768: PUSH
8769: LD_INT 0
8771: ST_TO_ADDR
// sSun := false ;
8772: LD_ADDR_EXP 60
8776: PUSH
8777: LD_INT 0
8779: ST_TO_ADDR
// sTiger := false ;
8780: LD_ADDR_EXP 56
8784: PUSH
8785: LD_INT 0
8787: ST_TO_ADDR
// sBomb := false ;
8788: LD_ADDR_EXP 57
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// sWound := false ;
8796: LD_ADDR_EXP 65
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// sBetray := false ;
8804: LD_ADDR_EXP 69
8808: PUSH
8809: LD_INT 0
8811: ST_TO_ADDR
// sContamin := false ;
8812: LD_ADDR_EXP 70
8816: PUSH
8817: LD_INT 0
8819: ST_TO_ADDR
// sOil := false ;
8820: LD_ADDR_EXP 72
8824: PUSH
8825: LD_INT 0
8827: ST_TO_ADDR
// sStu := false ;
8828: LD_ADDR_EXP 76
8832: PUSH
8833: LD_INT 0
8835: ST_TO_ADDR
// sBazooka := false ;
8836: LD_ADDR_EXP 79
8840: PUSH
8841: LD_INT 0
8843: ST_TO_ADDR
// sMortar := false ;
8844: LD_ADDR_EXP 80
8848: PUSH
8849: LD_INT 0
8851: ST_TO_ADDR
// sRanger := false ;
8852: LD_ADDR_EXP 90
8856: PUSH
8857: LD_INT 0
8859: ST_TO_ADDR
// sComputer := false ;
8860: LD_ADDR_EXP 91
8864: PUSH
8865: LD_INT 0
8867: ST_TO_ADDR
// s30 := false ;
8868: LD_ADDR_EXP 92
8872: PUSH
8873: LD_INT 0
8875: ST_TO_ADDR
// s60 := false ;
8876: LD_ADDR_EXP 93
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// end ;
8884: LD_VAR 0 1
8888: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8889: LD_INT 0
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
// result := [ ] ;
8896: LD_ADDR_VAR 0 1
8900: PUSH
8901: EMPTY
8902: ST_TO_ADDR
// if campaign_id = 1 then
8903: LD_OWVAR 69
8907: PUSH
8908: LD_INT 1
8910: EQUAL
8911: IFFALSE 12077
// begin case mission_number of 1 :
8913: LD_OWVAR 70
8917: PUSH
8918: LD_INT 1
8920: DOUBLE
8921: EQUAL
8922: IFTRUE 8926
8924: GO 9002
8926: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8927: LD_ADDR_VAR 0 1
8931: PUSH
8932: LD_INT 2
8934: PUSH
8935: LD_INT 4
8937: PUSH
8938: LD_INT 11
8940: PUSH
8941: LD_INT 12
8943: PUSH
8944: LD_INT 15
8946: PUSH
8947: LD_INT 16
8949: PUSH
8950: LD_INT 22
8952: PUSH
8953: LD_INT 23
8955: PUSH
8956: LD_INT 26
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 101
8972: PUSH
8973: LD_INT 102
8975: PUSH
8976: LD_INT 106
8978: PUSH
8979: LD_INT 116
8981: PUSH
8982: LD_INT 117
8984: PUSH
8985: LD_INT 118
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: ST_TO_ADDR
9000: GO 12075
9002: LD_INT 2
9004: DOUBLE
9005: EQUAL
9006: IFTRUE 9010
9008: GO 9094
9010: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9011: LD_ADDR_VAR 0 1
9015: PUSH
9016: LD_INT 2
9018: PUSH
9019: LD_INT 4
9021: PUSH
9022: LD_INT 11
9024: PUSH
9025: LD_INT 12
9027: PUSH
9028: LD_INT 15
9030: PUSH
9031: LD_INT 16
9033: PUSH
9034: LD_INT 22
9036: PUSH
9037: LD_INT 23
9039: PUSH
9040: LD_INT 26
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: PUSH
9054: LD_INT 101
9056: PUSH
9057: LD_INT 102
9059: PUSH
9060: LD_INT 105
9062: PUSH
9063: LD_INT 106
9065: PUSH
9066: LD_INT 108
9068: PUSH
9069: LD_INT 116
9071: PUSH
9072: LD_INT 117
9074: PUSH
9075: LD_INT 118
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: ST_TO_ADDR
9092: GO 12075
9094: LD_INT 3
9096: DOUBLE
9097: EQUAL
9098: IFTRUE 9102
9100: GO 9190
9102: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9103: LD_ADDR_VAR 0 1
9107: PUSH
9108: LD_INT 2
9110: PUSH
9111: LD_INT 4
9113: PUSH
9114: LD_INT 5
9116: PUSH
9117: LD_INT 11
9119: PUSH
9120: LD_INT 12
9122: PUSH
9123: LD_INT 15
9125: PUSH
9126: LD_INT 16
9128: PUSH
9129: LD_INT 22
9131: PUSH
9132: LD_INT 26
9134: PUSH
9135: LD_INT 36
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 101
9152: PUSH
9153: LD_INT 102
9155: PUSH
9156: LD_INT 105
9158: PUSH
9159: LD_INT 106
9161: PUSH
9162: LD_INT 108
9164: PUSH
9165: LD_INT 116
9167: PUSH
9168: LD_INT 117
9170: PUSH
9171: LD_INT 118
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: ST_TO_ADDR
9188: GO 12075
9190: LD_INT 4
9192: DOUBLE
9193: EQUAL
9194: IFTRUE 9198
9196: GO 9294
9198: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9199: LD_ADDR_VAR 0 1
9203: PUSH
9204: LD_INT 2
9206: PUSH
9207: LD_INT 4
9209: PUSH
9210: LD_INT 5
9212: PUSH
9213: LD_INT 8
9215: PUSH
9216: LD_INT 11
9218: PUSH
9219: LD_INT 12
9221: PUSH
9222: LD_INT 15
9224: PUSH
9225: LD_INT 16
9227: PUSH
9228: LD_INT 22
9230: PUSH
9231: LD_INT 23
9233: PUSH
9234: LD_INT 26
9236: PUSH
9237: LD_INT 36
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 101
9256: PUSH
9257: LD_INT 102
9259: PUSH
9260: LD_INT 105
9262: PUSH
9263: LD_INT 106
9265: PUSH
9266: LD_INT 108
9268: PUSH
9269: LD_INT 116
9271: PUSH
9272: LD_INT 117
9274: PUSH
9275: LD_INT 118
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: ST_TO_ADDR
9292: GO 12075
9294: LD_INT 5
9296: DOUBLE
9297: EQUAL
9298: IFTRUE 9302
9300: GO 9414
9302: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9303: LD_ADDR_VAR 0 1
9307: PUSH
9308: LD_INT 2
9310: PUSH
9311: LD_INT 4
9313: PUSH
9314: LD_INT 5
9316: PUSH
9317: LD_INT 6
9319: PUSH
9320: LD_INT 8
9322: PUSH
9323: LD_INT 11
9325: PUSH
9326: LD_INT 12
9328: PUSH
9329: LD_INT 15
9331: PUSH
9332: LD_INT 16
9334: PUSH
9335: LD_INT 22
9337: PUSH
9338: LD_INT 23
9340: PUSH
9341: LD_INT 25
9343: PUSH
9344: LD_INT 26
9346: PUSH
9347: LD_INT 36
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 101
9368: PUSH
9369: LD_INT 102
9371: PUSH
9372: LD_INT 105
9374: PUSH
9375: LD_INT 106
9377: PUSH
9378: LD_INT 108
9380: PUSH
9381: LD_INT 109
9383: PUSH
9384: LD_INT 112
9386: PUSH
9387: LD_INT 116
9389: PUSH
9390: LD_INT 117
9392: PUSH
9393: LD_INT 118
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: ST_TO_ADDR
9412: GO 12075
9414: LD_INT 6
9416: DOUBLE
9417: EQUAL
9418: IFTRUE 9422
9420: GO 9554
9422: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: LD_INT 4
9433: PUSH
9434: LD_INT 5
9436: PUSH
9437: LD_INT 6
9439: PUSH
9440: LD_INT 8
9442: PUSH
9443: LD_INT 11
9445: PUSH
9446: LD_INT 12
9448: PUSH
9449: LD_INT 15
9451: PUSH
9452: LD_INT 16
9454: PUSH
9455: LD_INT 20
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 22
9463: PUSH
9464: LD_INT 23
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 26
9472: PUSH
9473: LD_INT 30
9475: PUSH
9476: LD_INT 31
9478: PUSH
9479: LD_INT 32
9481: PUSH
9482: LD_INT 36
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 101
9508: PUSH
9509: LD_INT 102
9511: PUSH
9512: LD_INT 105
9514: PUSH
9515: LD_INT 106
9517: PUSH
9518: LD_INT 108
9520: PUSH
9521: LD_INT 109
9523: PUSH
9524: LD_INT 112
9526: PUSH
9527: LD_INT 116
9529: PUSH
9530: LD_INT 117
9532: PUSH
9533: LD_INT 118
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: ST_TO_ADDR
9552: GO 12075
9554: LD_INT 7
9556: DOUBLE
9557: EQUAL
9558: IFTRUE 9562
9560: GO 9674
9562: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9563: LD_ADDR_VAR 0 1
9567: PUSH
9568: LD_INT 2
9570: PUSH
9571: LD_INT 4
9573: PUSH
9574: LD_INT 5
9576: PUSH
9577: LD_INT 7
9579: PUSH
9580: LD_INT 11
9582: PUSH
9583: LD_INT 12
9585: PUSH
9586: LD_INT 15
9588: PUSH
9589: LD_INT 16
9591: PUSH
9592: LD_INT 20
9594: PUSH
9595: LD_INT 21
9597: PUSH
9598: LD_INT 22
9600: PUSH
9601: LD_INT 23
9603: PUSH
9604: LD_INT 25
9606: PUSH
9607: LD_INT 26
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 101
9628: PUSH
9629: LD_INT 102
9631: PUSH
9632: LD_INT 103
9634: PUSH
9635: LD_INT 105
9637: PUSH
9638: LD_INT 106
9640: PUSH
9641: LD_INT 108
9643: PUSH
9644: LD_INT 112
9646: PUSH
9647: LD_INT 116
9649: PUSH
9650: LD_INT 117
9652: PUSH
9653: LD_INT 118
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: ST_TO_ADDR
9672: GO 12075
9674: LD_INT 8
9676: DOUBLE
9677: EQUAL
9678: IFTRUE 9682
9680: GO 9822
9682: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9683: LD_ADDR_VAR 0 1
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: LD_INT 4
9693: PUSH
9694: LD_INT 5
9696: PUSH
9697: LD_INT 6
9699: PUSH
9700: LD_INT 7
9702: PUSH
9703: LD_INT 8
9705: PUSH
9706: LD_INT 11
9708: PUSH
9709: LD_INT 12
9711: PUSH
9712: LD_INT 15
9714: PUSH
9715: LD_INT 16
9717: PUSH
9718: LD_INT 20
9720: PUSH
9721: LD_INT 21
9723: PUSH
9724: LD_INT 22
9726: PUSH
9727: LD_INT 23
9729: PUSH
9730: LD_INT 25
9732: PUSH
9733: LD_INT 26
9735: PUSH
9736: LD_INT 30
9738: PUSH
9739: LD_INT 31
9741: PUSH
9742: LD_INT 32
9744: PUSH
9745: LD_INT 36
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 101
9772: PUSH
9773: LD_INT 102
9775: PUSH
9776: LD_INT 103
9778: PUSH
9779: LD_INT 105
9781: PUSH
9782: LD_INT 106
9784: PUSH
9785: LD_INT 108
9787: PUSH
9788: LD_INT 109
9790: PUSH
9791: LD_INT 112
9793: PUSH
9794: LD_INT 116
9796: PUSH
9797: LD_INT 117
9799: PUSH
9800: LD_INT 118
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: ST_TO_ADDR
9820: GO 12075
9822: LD_INT 9
9824: DOUBLE
9825: EQUAL
9826: IFTRUE 9830
9828: GO 9978
9830: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9831: LD_ADDR_VAR 0 1
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: LD_INT 4
9841: PUSH
9842: LD_INT 5
9844: PUSH
9845: LD_INT 6
9847: PUSH
9848: LD_INT 7
9850: PUSH
9851: LD_INT 8
9853: PUSH
9854: LD_INT 11
9856: PUSH
9857: LD_INT 12
9859: PUSH
9860: LD_INT 15
9862: PUSH
9863: LD_INT 16
9865: PUSH
9866: LD_INT 20
9868: PUSH
9869: LD_INT 21
9871: PUSH
9872: LD_INT 22
9874: PUSH
9875: LD_INT 23
9877: PUSH
9878: LD_INT 25
9880: PUSH
9881: LD_INT 26
9883: PUSH
9884: LD_INT 28
9886: PUSH
9887: LD_INT 30
9889: PUSH
9890: LD_INT 31
9892: PUSH
9893: LD_INT 32
9895: PUSH
9896: LD_INT 36
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 101
9924: PUSH
9925: LD_INT 102
9927: PUSH
9928: LD_INT 103
9930: PUSH
9931: LD_INT 105
9933: PUSH
9934: LD_INT 106
9936: PUSH
9937: LD_INT 108
9939: PUSH
9940: LD_INT 109
9942: PUSH
9943: LD_INT 112
9945: PUSH
9946: LD_INT 114
9948: PUSH
9949: LD_INT 116
9951: PUSH
9952: LD_INT 117
9954: PUSH
9955: LD_INT 118
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: ST_TO_ADDR
9976: GO 12075
9978: LD_INT 10
9980: DOUBLE
9981: EQUAL
9982: IFTRUE 9986
9984: GO 10182
9986: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9987: LD_ADDR_VAR 0 1
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: LD_INT 5
10000: PUSH
10001: LD_INT 6
10003: PUSH
10004: LD_INT 7
10006: PUSH
10007: LD_INT 8
10009: PUSH
10010: LD_INT 9
10012: PUSH
10013: LD_INT 10
10015: PUSH
10016: LD_INT 11
10018: PUSH
10019: LD_INT 12
10021: PUSH
10022: LD_INT 13
10024: PUSH
10025: LD_INT 14
10027: PUSH
10028: LD_INT 15
10030: PUSH
10031: LD_INT 16
10033: PUSH
10034: LD_INT 17
10036: PUSH
10037: LD_INT 18
10039: PUSH
10040: LD_INT 19
10042: PUSH
10043: LD_INT 20
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 22
10051: PUSH
10052: LD_INT 23
10054: PUSH
10055: LD_INT 24
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 26
10063: PUSH
10064: LD_INT 28
10066: PUSH
10067: LD_INT 30
10069: PUSH
10070: LD_INT 31
10072: PUSH
10073: LD_INT 32
10075: PUSH
10076: LD_INT 36
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 101
10112: PUSH
10113: LD_INT 102
10115: PUSH
10116: LD_INT 103
10118: PUSH
10119: LD_INT 104
10121: PUSH
10122: LD_INT 105
10124: PUSH
10125: LD_INT 106
10127: PUSH
10128: LD_INT 107
10130: PUSH
10131: LD_INT 108
10133: PUSH
10134: LD_INT 109
10136: PUSH
10137: LD_INT 110
10139: PUSH
10140: LD_INT 111
10142: PUSH
10143: LD_INT 112
10145: PUSH
10146: LD_INT 114
10148: PUSH
10149: LD_INT 116
10151: PUSH
10152: LD_INT 117
10154: PUSH
10155: LD_INT 118
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: ST_TO_ADDR
10180: GO 12075
10182: LD_INT 11
10184: DOUBLE
10185: EQUAL
10186: IFTRUE 10190
10188: GO 10394
10190: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10191: LD_ADDR_VAR 0 1
10195: PUSH
10196: LD_INT 2
10198: PUSH
10199: LD_INT 3
10201: PUSH
10202: LD_INT 4
10204: PUSH
10205: LD_INT 5
10207: PUSH
10208: LD_INT 6
10210: PUSH
10211: LD_INT 7
10213: PUSH
10214: LD_INT 8
10216: PUSH
10217: LD_INT 9
10219: PUSH
10220: LD_INT 10
10222: PUSH
10223: LD_INT 11
10225: PUSH
10226: LD_INT 12
10228: PUSH
10229: LD_INT 13
10231: PUSH
10232: LD_INT 14
10234: PUSH
10235: LD_INT 15
10237: PUSH
10238: LD_INT 16
10240: PUSH
10241: LD_INT 17
10243: PUSH
10244: LD_INT 18
10246: PUSH
10247: LD_INT 19
10249: PUSH
10250: LD_INT 20
10252: PUSH
10253: LD_INT 21
10255: PUSH
10256: LD_INT 22
10258: PUSH
10259: LD_INT 23
10261: PUSH
10262: LD_INT 24
10264: PUSH
10265: LD_INT 25
10267: PUSH
10268: LD_INT 26
10270: PUSH
10271: LD_INT 28
10273: PUSH
10274: LD_INT 30
10276: PUSH
10277: LD_INT 31
10279: PUSH
10280: LD_INT 32
10282: PUSH
10283: LD_INT 34
10285: PUSH
10286: LD_INT 36
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: PUSH
10322: LD_INT 101
10324: PUSH
10325: LD_INT 102
10327: PUSH
10328: LD_INT 103
10330: PUSH
10331: LD_INT 104
10333: PUSH
10334: LD_INT 105
10336: PUSH
10337: LD_INT 106
10339: PUSH
10340: LD_INT 107
10342: PUSH
10343: LD_INT 108
10345: PUSH
10346: LD_INT 109
10348: PUSH
10349: LD_INT 110
10351: PUSH
10352: LD_INT 111
10354: PUSH
10355: LD_INT 112
10357: PUSH
10358: LD_INT 114
10360: PUSH
10361: LD_INT 116
10363: PUSH
10364: LD_INT 117
10366: PUSH
10367: LD_INT 118
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: ST_TO_ADDR
10392: GO 12075
10394: LD_INT 12
10396: DOUBLE
10397: EQUAL
10398: IFTRUE 10402
10400: GO 10622
10402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10403: LD_ADDR_VAR 0 1
10407: PUSH
10408: LD_INT 1
10410: PUSH
10411: LD_INT 2
10413: PUSH
10414: LD_INT 3
10416: PUSH
10417: LD_INT 4
10419: PUSH
10420: LD_INT 5
10422: PUSH
10423: LD_INT 6
10425: PUSH
10426: LD_INT 7
10428: PUSH
10429: LD_INT 8
10431: PUSH
10432: LD_INT 9
10434: PUSH
10435: LD_INT 10
10437: PUSH
10438: LD_INT 11
10440: PUSH
10441: LD_INT 12
10443: PUSH
10444: LD_INT 13
10446: PUSH
10447: LD_INT 14
10449: PUSH
10450: LD_INT 15
10452: PUSH
10453: LD_INT 16
10455: PUSH
10456: LD_INT 17
10458: PUSH
10459: LD_INT 18
10461: PUSH
10462: LD_INT 19
10464: PUSH
10465: LD_INT 20
10467: PUSH
10468: LD_INT 21
10470: PUSH
10471: LD_INT 22
10473: PUSH
10474: LD_INT 23
10476: PUSH
10477: LD_INT 24
10479: PUSH
10480: LD_INT 25
10482: PUSH
10483: LD_INT 26
10485: PUSH
10486: LD_INT 27
10488: PUSH
10489: LD_INT 28
10491: PUSH
10492: LD_INT 30
10494: PUSH
10495: LD_INT 31
10497: PUSH
10498: LD_INT 32
10500: PUSH
10501: LD_INT 33
10503: PUSH
10504: LD_INT 34
10506: PUSH
10507: LD_INT 36
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 101
10548: PUSH
10549: LD_INT 102
10551: PUSH
10552: LD_INT 103
10554: PUSH
10555: LD_INT 104
10557: PUSH
10558: LD_INT 105
10560: PUSH
10561: LD_INT 106
10563: PUSH
10564: LD_INT 107
10566: PUSH
10567: LD_INT 108
10569: PUSH
10570: LD_INT 109
10572: PUSH
10573: LD_INT 110
10575: PUSH
10576: LD_INT 111
10578: PUSH
10579: LD_INT 112
10581: PUSH
10582: LD_INT 113
10584: PUSH
10585: LD_INT 114
10587: PUSH
10588: LD_INT 116
10590: PUSH
10591: LD_INT 117
10593: PUSH
10594: LD_INT 118
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: ST_TO_ADDR
10620: GO 12075
10622: LD_INT 13
10624: DOUBLE
10625: EQUAL
10626: IFTRUE 10630
10628: GO 10838
10630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10631: LD_ADDR_VAR 0 1
10635: PUSH
10636: LD_INT 1
10638: PUSH
10639: LD_INT 2
10641: PUSH
10642: LD_INT 3
10644: PUSH
10645: LD_INT 4
10647: PUSH
10648: LD_INT 5
10650: PUSH
10651: LD_INT 8
10653: PUSH
10654: LD_INT 9
10656: PUSH
10657: LD_INT 10
10659: PUSH
10660: LD_INT 11
10662: PUSH
10663: LD_INT 12
10665: PUSH
10666: LD_INT 14
10668: PUSH
10669: LD_INT 15
10671: PUSH
10672: LD_INT 16
10674: PUSH
10675: LD_INT 17
10677: PUSH
10678: LD_INT 18
10680: PUSH
10681: LD_INT 19
10683: PUSH
10684: LD_INT 20
10686: PUSH
10687: LD_INT 21
10689: PUSH
10690: LD_INT 22
10692: PUSH
10693: LD_INT 23
10695: PUSH
10696: LD_INT 24
10698: PUSH
10699: LD_INT 25
10701: PUSH
10702: LD_INT 26
10704: PUSH
10705: LD_INT 27
10707: PUSH
10708: LD_INT 28
10710: PUSH
10711: LD_INT 30
10713: PUSH
10714: LD_INT 31
10716: PUSH
10717: LD_INT 32
10719: PUSH
10720: LD_INT 33
10722: PUSH
10723: LD_INT 34
10725: PUSH
10726: LD_INT 36
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: PUSH
10762: LD_INT 101
10764: PUSH
10765: LD_INT 102
10767: PUSH
10768: LD_INT 103
10770: PUSH
10771: LD_INT 104
10773: PUSH
10774: LD_INT 105
10776: PUSH
10777: LD_INT 106
10779: PUSH
10780: LD_INT 107
10782: PUSH
10783: LD_INT 108
10785: PUSH
10786: LD_INT 109
10788: PUSH
10789: LD_INT 110
10791: PUSH
10792: LD_INT 111
10794: PUSH
10795: LD_INT 112
10797: PUSH
10798: LD_INT 113
10800: PUSH
10801: LD_INT 114
10803: PUSH
10804: LD_INT 116
10806: PUSH
10807: LD_INT 117
10809: PUSH
10810: LD_INT 118
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: ST_TO_ADDR
10836: GO 12075
10838: LD_INT 14
10840: DOUBLE
10841: EQUAL
10842: IFTRUE 10846
10844: GO 11070
10846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10847: LD_ADDR_VAR 0 1
10851: PUSH
10852: LD_INT 1
10854: PUSH
10855: LD_INT 2
10857: PUSH
10858: LD_INT 3
10860: PUSH
10861: LD_INT 4
10863: PUSH
10864: LD_INT 5
10866: PUSH
10867: LD_INT 6
10869: PUSH
10870: LD_INT 7
10872: PUSH
10873: LD_INT 8
10875: PUSH
10876: LD_INT 9
10878: PUSH
10879: LD_INT 10
10881: PUSH
10882: LD_INT 11
10884: PUSH
10885: LD_INT 12
10887: PUSH
10888: LD_INT 13
10890: PUSH
10891: LD_INT 14
10893: PUSH
10894: LD_INT 15
10896: PUSH
10897: LD_INT 16
10899: PUSH
10900: LD_INT 17
10902: PUSH
10903: LD_INT 18
10905: PUSH
10906: LD_INT 19
10908: PUSH
10909: LD_INT 20
10911: PUSH
10912: LD_INT 21
10914: PUSH
10915: LD_INT 22
10917: PUSH
10918: LD_INT 23
10920: PUSH
10921: LD_INT 24
10923: PUSH
10924: LD_INT 25
10926: PUSH
10927: LD_INT 26
10929: PUSH
10930: LD_INT 27
10932: PUSH
10933: LD_INT 28
10935: PUSH
10936: LD_INT 29
10938: PUSH
10939: LD_INT 30
10941: PUSH
10942: LD_INT 31
10944: PUSH
10945: LD_INT 32
10947: PUSH
10948: LD_INT 33
10950: PUSH
10951: LD_INT 34
10953: PUSH
10954: LD_INT 36
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 101
10996: PUSH
10997: LD_INT 102
10999: PUSH
11000: LD_INT 103
11002: PUSH
11003: LD_INT 104
11005: PUSH
11006: LD_INT 105
11008: PUSH
11009: LD_INT 106
11011: PUSH
11012: LD_INT 107
11014: PUSH
11015: LD_INT 108
11017: PUSH
11018: LD_INT 109
11020: PUSH
11021: LD_INT 110
11023: PUSH
11024: LD_INT 111
11026: PUSH
11027: LD_INT 112
11029: PUSH
11030: LD_INT 113
11032: PUSH
11033: LD_INT 114
11035: PUSH
11036: LD_INT 116
11038: PUSH
11039: LD_INT 117
11041: PUSH
11042: LD_INT 118
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: ST_TO_ADDR
11068: GO 12075
11070: LD_INT 15
11072: DOUBLE
11073: EQUAL
11074: IFTRUE 11078
11076: GO 11302
11078: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11079: LD_ADDR_VAR 0 1
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: LD_INT 2
11089: PUSH
11090: LD_INT 3
11092: PUSH
11093: LD_INT 4
11095: PUSH
11096: LD_INT 5
11098: PUSH
11099: LD_INT 6
11101: PUSH
11102: LD_INT 7
11104: PUSH
11105: LD_INT 8
11107: PUSH
11108: LD_INT 9
11110: PUSH
11111: LD_INT 10
11113: PUSH
11114: LD_INT 11
11116: PUSH
11117: LD_INT 12
11119: PUSH
11120: LD_INT 13
11122: PUSH
11123: LD_INT 14
11125: PUSH
11126: LD_INT 15
11128: PUSH
11129: LD_INT 16
11131: PUSH
11132: LD_INT 17
11134: PUSH
11135: LD_INT 18
11137: PUSH
11138: LD_INT 19
11140: PUSH
11141: LD_INT 20
11143: PUSH
11144: LD_INT 21
11146: PUSH
11147: LD_INT 22
11149: PUSH
11150: LD_INT 23
11152: PUSH
11153: LD_INT 24
11155: PUSH
11156: LD_INT 25
11158: PUSH
11159: LD_INT 26
11161: PUSH
11162: LD_INT 27
11164: PUSH
11165: LD_INT 28
11167: PUSH
11168: LD_INT 29
11170: PUSH
11171: LD_INT 30
11173: PUSH
11174: LD_INT 31
11176: PUSH
11177: LD_INT 32
11179: PUSH
11180: LD_INT 33
11182: PUSH
11183: LD_INT 34
11185: PUSH
11186: LD_INT 36
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 101
11228: PUSH
11229: LD_INT 102
11231: PUSH
11232: LD_INT 103
11234: PUSH
11235: LD_INT 104
11237: PUSH
11238: LD_INT 105
11240: PUSH
11241: LD_INT 106
11243: PUSH
11244: LD_INT 107
11246: PUSH
11247: LD_INT 108
11249: PUSH
11250: LD_INT 109
11252: PUSH
11253: LD_INT 110
11255: PUSH
11256: LD_INT 111
11258: PUSH
11259: LD_INT 112
11261: PUSH
11262: LD_INT 113
11264: PUSH
11265: LD_INT 114
11267: PUSH
11268: LD_INT 116
11270: PUSH
11271: LD_INT 117
11273: PUSH
11274: LD_INT 118
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: ST_TO_ADDR
11300: GO 12075
11302: LD_INT 16
11304: DOUBLE
11305: EQUAL
11306: IFTRUE 11310
11308: GO 11446
11310: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11311: LD_ADDR_VAR 0 1
11315: PUSH
11316: LD_INT 2
11318: PUSH
11319: LD_INT 4
11321: PUSH
11322: LD_INT 5
11324: PUSH
11325: LD_INT 7
11327: PUSH
11328: LD_INT 11
11330: PUSH
11331: LD_INT 12
11333: PUSH
11334: LD_INT 15
11336: PUSH
11337: LD_INT 16
11339: PUSH
11340: LD_INT 20
11342: PUSH
11343: LD_INT 21
11345: PUSH
11346: LD_INT 22
11348: PUSH
11349: LD_INT 23
11351: PUSH
11352: LD_INT 25
11354: PUSH
11355: LD_INT 26
11357: PUSH
11358: LD_INT 30
11360: PUSH
11361: LD_INT 31
11363: PUSH
11364: LD_INT 32
11366: PUSH
11367: LD_INT 33
11369: PUSH
11370: LD_INT 34
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 101
11396: PUSH
11397: LD_INT 102
11399: PUSH
11400: LD_INT 103
11402: PUSH
11403: LD_INT 106
11405: PUSH
11406: LD_INT 108
11408: PUSH
11409: LD_INT 112
11411: PUSH
11412: LD_INT 113
11414: PUSH
11415: LD_INT 114
11417: PUSH
11418: LD_INT 116
11420: PUSH
11421: LD_INT 117
11423: PUSH
11424: LD_INT 118
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: ST_TO_ADDR
11444: GO 12075
11446: LD_INT 17
11448: DOUBLE
11449: EQUAL
11450: IFTRUE 11454
11452: GO 11678
11454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11455: LD_ADDR_VAR 0 1
11459: PUSH
11460: LD_INT 1
11462: PUSH
11463: LD_INT 2
11465: PUSH
11466: LD_INT 3
11468: PUSH
11469: LD_INT 4
11471: PUSH
11472: LD_INT 5
11474: PUSH
11475: LD_INT 6
11477: PUSH
11478: LD_INT 7
11480: PUSH
11481: LD_INT 8
11483: PUSH
11484: LD_INT 9
11486: PUSH
11487: LD_INT 10
11489: PUSH
11490: LD_INT 11
11492: PUSH
11493: LD_INT 12
11495: PUSH
11496: LD_INT 13
11498: PUSH
11499: LD_INT 14
11501: PUSH
11502: LD_INT 15
11504: PUSH
11505: LD_INT 16
11507: PUSH
11508: LD_INT 17
11510: PUSH
11511: LD_INT 18
11513: PUSH
11514: LD_INT 19
11516: PUSH
11517: LD_INT 20
11519: PUSH
11520: LD_INT 21
11522: PUSH
11523: LD_INT 22
11525: PUSH
11526: LD_INT 23
11528: PUSH
11529: LD_INT 24
11531: PUSH
11532: LD_INT 25
11534: PUSH
11535: LD_INT 26
11537: PUSH
11538: LD_INT 27
11540: PUSH
11541: LD_INT 28
11543: PUSH
11544: LD_INT 29
11546: PUSH
11547: LD_INT 30
11549: PUSH
11550: LD_INT 31
11552: PUSH
11553: LD_INT 32
11555: PUSH
11556: LD_INT 33
11558: PUSH
11559: LD_INT 34
11561: PUSH
11562: LD_INT 36
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 101
11604: PUSH
11605: LD_INT 102
11607: PUSH
11608: LD_INT 103
11610: PUSH
11611: LD_INT 104
11613: PUSH
11614: LD_INT 105
11616: PUSH
11617: LD_INT 106
11619: PUSH
11620: LD_INT 107
11622: PUSH
11623: LD_INT 108
11625: PUSH
11626: LD_INT 109
11628: PUSH
11629: LD_INT 110
11631: PUSH
11632: LD_INT 111
11634: PUSH
11635: LD_INT 112
11637: PUSH
11638: LD_INT 113
11640: PUSH
11641: LD_INT 114
11643: PUSH
11644: LD_INT 116
11646: PUSH
11647: LD_INT 117
11649: PUSH
11650: LD_INT 118
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: ST_TO_ADDR
11676: GO 12075
11678: LD_INT 18
11680: DOUBLE
11681: EQUAL
11682: IFTRUE 11686
11684: GO 11834
11686: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11687: LD_ADDR_VAR 0 1
11691: PUSH
11692: LD_INT 2
11694: PUSH
11695: LD_INT 4
11697: PUSH
11698: LD_INT 5
11700: PUSH
11701: LD_INT 7
11703: PUSH
11704: LD_INT 11
11706: PUSH
11707: LD_INT 12
11709: PUSH
11710: LD_INT 15
11712: PUSH
11713: LD_INT 16
11715: PUSH
11716: LD_INT 20
11718: PUSH
11719: LD_INT 21
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_INT 23
11727: PUSH
11728: LD_INT 25
11730: PUSH
11731: LD_INT 26
11733: PUSH
11734: LD_INT 30
11736: PUSH
11737: LD_INT 31
11739: PUSH
11740: LD_INT 32
11742: PUSH
11743: LD_INT 33
11745: PUSH
11746: LD_INT 34
11748: PUSH
11749: LD_INT 35
11751: PUSH
11752: LD_INT 36
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 101
11780: PUSH
11781: LD_INT 102
11783: PUSH
11784: LD_INT 103
11786: PUSH
11787: LD_INT 106
11789: PUSH
11790: LD_INT 108
11792: PUSH
11793: LD_INT 112
11795: PUSH
11796: LD_INT 113
11798: PUSH
11799: LD_INT 114
11801: PUSH
11802: LD_INT 115
11804: PUSH
11805: LD_INT 116
11807: PUSH
11808: LD_INT 117
11810: PUSH
11811: LD_INT 118
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: ST_TO_ADDR
11832: GO 12075
11834: LD_INT 19
11836: DOUBLE
11837: EQUAL
11838: IFTRUE 11842
11840: GO 12074
11842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11843: LD_ADDR_VAR 0 1
11847: PUSH
11848: LD_INT 1
11850: PUSH
11851: LD_INT 2
11853: PUSH
11854: LD_INT 3
11856: PUSH
11857: LD_INT 4
11859: PUSH
11860: LD_INT 5
11862: PUSH
11863: LD_INT 6
11865: PUSH
11866: LD_INT 7
11868: PUSH
11869: LD_INT 8
11871: PUSH
11872: LD_INT 9
11874: PUSH
11875: LD_INT 10
11877: PUSH
11878: LD_INT 11
11880: PUSH
11881: LD_INT 12
11883: PUSH
11884: LD_INT 13
11886: PUSH
11887: LD_INT 14
11889: PUSH
11890: LD_INT 15
11892: PUSH
11893: LD_INT 16
11895: PUSH
11896: LD_INT 17
11898: PUSH
11899: LD_INT 18
11901: PUSH
11902: LD_INT 19
11904: PUSH
11905: LD_INT 20
11907: PUSH
11908: LD_INT 21
11910: PUSH
11911: LD_INT 22
11913: PUSH
11914: LD_INT 23
11916: PUSH
11917: LD_INT 24
11919: PUSH
11920: LD_INT 25
11922: PUSH
11923: LD_INT 26
11925: PUSH
11926: LD_INT 27
11928: PUSH
11929: LD_INT 28
11931: PUSH
11932: LD_INT 29
11934: PUSH
11935: LD_INT 30
11937: PUSH
11938: LD_INT 31
11940: PUSH
11941: LD_INT 32
11943: PUSH
11944: LD_INT 33
11946: PUSH
11947: LD_INT 34
11949: PUSH
11950: LD_INT 35
11952: PUSH
11953: LD_INT 36
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 101
11996: PUSH
11997: LD_INT 102
11999: PUSH
12000: LD_INT 103
12002: PUSH
12003: LD_INT 104
12005: PUSH
12006: LD_INT 105
12008: PUSH
12009: LD_INT 106
12011: PUSH
12012: LD_INT 107
12014: PUSH
12015: LD_INT 108
12017: PUSH
12018: LD_INT 109
12020: PUSH
12021: LD_INT 110
12023: PUSH
12024: LD_INT 111
12026: PUSH
12027: LD_INT 112
12029: PUSH
12030: LD_INT 113
12032: PUSH
12033: LD_INT 114
12035: PUSH
12036: LD_INT 115
12038: PUSH
12039: LD_INT 116
12041: PUSH
12042: LD_INT 117
12044: PUSH
12045: LD_INT 118
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: ST_TO_ADDR
12072: GO 12075
12074: POP
// end else
12075: GO 12306
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12077: LD_ADDR_VAR 0 1
12081: PUSH
12082: LD_INT 1
12084: PUSH
12085: LD_INT 2
12087: PUSH
12088: LD_INT 3
12090: PUSH
12091: LD_INT 4
12093: PUSH
12094: LD_INT 5
12096: PUSH
12097: LD_INT 6
12099: PUSH
12100: LD_INT 7
12102: PUSH
12103: LD_INT 8
12105: PUSH
12106: LD_INT 9
12108: PUSH
12109: LD_INT 10
12111: PUSH
12112: LD_INT 11
12114: PUSH
12115: LD_INT 12
12117: PUSH
12118: LD_INT 13
12120: PUSH
12121: LD_INT 14
12123: PUSH
12124: LD_INT 15
12126: PUSH
12127: LD_INT 16
12129: PUSH
12130: LD_INT 17
12132: PUSH
12133: LD_INT 18
12135: PUSH
12136: LD_INT 19
12138: PUSH
12139: LD_INT 20
12141: PUSH
12142: LD_INT 21
12144: PUSH
12145: LD_INT 22
12147: PUSH
12148: LD_INT 23
12150: PUSH
12151: LD_INT 24
12153: PUSH
12154: LD_INT 25
12156: PUSH
12157: LD_INT 26
12159: PUSH
12160: LD_INT 27
12162: PUSH
12163: LD_INT 28
12165: PUSH
12166: LD_INT 29
12168: PUSH
12169: LD_INT 30
12171: PUSH
12172: LD_INT 31
12174: PUSH
12175: LD_INT 32
12177: PUSH
12178: LD_INT 33
12180: PUSH
12181: LD_INT 34
12183: PUSH
12184: LD_INT 35
12186: PUSH
12187: LD_INT 36
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 101
12230: PUSH
12231: LD_INT 102
12233: PUSH
12234: LD_INT 103
12236: PUSH
12237: LD_INT 104
12239: PUSH
12240: LD_INT 105
12242: PUSH
12243: LD_INT 106
12245: PUSH
12246: LD_INT 107
12248: PUSH
12249: LD_INT 108
12251: PUSH
12252: LD_INT 109
12254: PUSH
12255: LD_INT 110
12257: PUSH
12258: LD_INT 111
12260: PUSH
12261: LD_INT 112
12263: PUSH
12264: LD_INT 113
12266: PUSH
12267: LD_INT 114
12269: PUSH
12270: LD_INT 115
12272: PUSH
12273: LD_INT 116
12275: PUSH
12276: LD_INT 117
12278: PUSH
12279: LD_INT 118
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: ST_TO_ADDR
// if result then
12306: LD_VAR 0 1
12310: IFFALSE 12599
// begin normal :=  ;
12312: LD_ADDR_VAR 0 3
12316: PUSH
12317: LD_STRING 
12319: ST_TO_ADDR
// hardcore :=  ;
12320: LD_ADDR_VAR 0 4
12324: PUSH
12325: LD_STRING 
12327: ST_TO_ADDR
// for i = 1 to normalCounter do
12328: LD_ADDR_VAR 0 5
12332: PUSH
12333: DOUBLE
12334: LD_INT 1
12336: DEC
12337: ST_TO_ADDR
12338: LD_EXP 38
12342: PUSH
12343: FOR_TO
12344: IFFALSE 12445
// begin tmp := 0 ;
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: LD_STRING 0
12353: ST_TO_ADDR
// if result [ 1 ] then
12354: LD_VAR 0 1
12358: PUSH
12359: LD_INT 1
12361: ARRAY
12362: IFFALSE 12427
// if result [ 1 ] [ 1 ] = i then
12364: LD_VAR 0 1
12368: PUSH
12369: LD_INT 1
12371: ARRAY
12372: PUSH
12373: LD_INT 1
12375: ARRAY
12376: PUSH
12377: LD_VAR 0 5
12381: EQUAL
12382: IFFALSE 12427
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12384: LD_ADDR_VAR 0 1
12388: PUSH
12389: LD_VAR 0 1
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: LD_VAR 0 1
12401: PUSH
12402: LD_INT 1
12404: ARRAY
12405: PPUSH
12406: LD_INT 1
12408: PPUSH
12409: CALL_OW 3
12413: PPUSH
12414: CALL_OW 1
12418: ST_TO_ADDR
// tmp := 1 ;
12419: LD_ADDR_VAR 0 2
12423: PUSH
12424: LD_STRING 1
12426: ST_TO_ADDR
// end ; normal := normal & tmp ;
12427: LD_ADDR_VAR 0 3
12431: PUSH
12432: LD_VAR 0 3
12436: PUSH
12437: LD_VAR 0 2
12441: STR
12442: ST_TO_ADDR
// end ;
12443: GO 12343
12445: POP
12446: POP
// for i = 1 to hardcoreCounter do
12447: LD_ADDR_VAR 0 5
12451: PUSH
12452: DOUBLE
12453: LD_INT 1
12455: DEC
12456: ST_TO_ADDR
12457: LD_EXP 39
12461: PUSH
12462: FOR_TO
12463: IFFALSE 12568
// begin tmp := 0 ;
12465: LD_ADDR_VAR 0 2
12469: PUSH
12470: LD_STRING 0
12472: ST_TO_ADDR
// if result [ 2 ] then
12473: LD_VAR 0 1
12477: PUSH
12478: LD_INT 2
12480: ARRAY
12481: IFFALSE 12550
// if result [ 2 ] [ 1 ] = 100 + i then
12483: LD_VAR 0 1
12487: PUSH
12488: LD_INT 2
12490: ARRAY
12491: PUSH
12492: LD_INT 1
12494: ARRAY
12495: PUSH
12496: LD_INT 100
12498: PUSH
12499: LD_VAR 0 5
12503: PLUS
12504: EQUAL
12505: IFFALSE 12550
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12507: LD_ADDR_VAR 0 1
12511: PUSH
12512: LD_VAR 0 1
12516: PPUSH
12517: LD_INT 2
12519: PPUSH
12520: LD_VAR 0 1
12524: PUSH
12525: LD_INT 2
12527: ARRAY
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 3
12536: PPUSH
12537: CALL_OW 1
12541: ST_TO_ADDR
// tmp := 1 ;
12542: LD_ADDR_VAR 0 2
12546: PUSH
12547: LD_STRING 1
12549: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12550: LD_ADDR_VAR 0 4
12554: PUSH
12555: LD_VAR 0 4
12559: PUSH
12560: LD_VAR 0 2
12564: STR
12565: ST_TO_ADDR
// end ;
12566: GO 12462
12568: POP
12569: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12570: LD_STRING getStreamItemsFromMission("
12572: PUSH
12573: LD_VAR 0 3
12577: STR
12578: PUSH
12579: LD_STRING ","
12581: STR
12582: PUSH
12583: LD_VAR 0 4
12587: STR
12588: PUSH
12589: LD_STRING ")
12591: STR
12592: PPUSH
12593: CALL_OW 559
// end else
12597: GO 12606
// ToLua ( getStreamItemsFromMission("","") ) ;
12599: LD_STRING getStreamItemsFromMission("","")
12601: PPUSH
12602: CALL_OW 559
// end ;
12606: LD_VAR 0 1
12610: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12611: LD_EXP 37
12615: PUSH
12616: LD_EXP 42
12620: AND
12621: IFFALSE 12745
12623: GO 12625
12625: DISABLE
12626: LD_INT 0
12628: PPUSH
12629: PPUSH
// begin enable ;
12630: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12631: LD_ADDR_VAR 0 2
12635: PUSH
12636: LD_INT 22
12638: PUSH
12639: LD_OWVAR 2
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: LD_INT 2
12650: PUSH
12651: LD_INT 34
12653: PUSH
12654: LD_INT 7
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 34
12663: PUSH
12664: LD_INT 45
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 34
12673: PUSH
12674: LD_INT 28
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 34
12683: PUSH
12684: LD_INT 47
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PPUSH
12702: CALL_OW 69
12706: ST_TO_ADDR
// if not tmp then
12707: LD_VAR 0 2
12711: NOT
12712: IFFALSE 12716
// exit ;
12714: GO 12745
// for i in tmp do
12716: LD_ADDR_VAR 0 1
12720: PUSH
12721: LD_VAR 0 2
12725: PUSH
12726: FOR_IN
12727: IFFALSE 12743
// begin SetLives ( i , 0 ) ;
12729: LD_VAR 0 1
12733: PPUSH
12734: LD_INT 0
12736: PPUSH
12737: CALL_OW 234
// end ;
12741: GO 12726
12743: POP
12744: POP
// end ;
12745: PPOPN 2
12747: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12748: LD_EXP 37
12752: PUSH
12753: LD_EXP 43
12757: AND
12758: IFFALSE 12842
12760: GO 12762
12762: DISABLE
12763: LD_INT 0
12765: PPUSH
12766: PPUSH
// begin enable ;
12767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12768: LD_ADDR_VAR 0 2
12772: PUSH
12773: LD_INT 22
12775: PUSH
12776: LD_OWVAR 2
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 32
12787: PUSH
12788: LD_INT 3
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: ST_TO_ADDR
// if not tmp then
12804: LD_VAR 0 2
12808: NOT
12809: IFFALSE 12813
// exit ;
12811: GO 12842
// for i in tmp do
12813: LD_ADDR_VAR 0 1
12817: PUSH
12818: LD_VAR 0 2
12822: PUSH
12823: FOR_IN
12824: IFFALSE 12840
// begin SetLives ( i , 0 ) ;
12826: LD_VAR 0 1
12830: PPUSH
12831: LD_INT 0
12833: PPUSH
12834: CALL_OW 234
// end ;
12838: GO 12823
12840: POP
12841: POP
// end ;
12842: PPOPN 2
12844: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12845: LD_EXP 37
12849: PUSH
12850: LD_EXP 40
12854: AND
12855: IFFALSE 12948
12857: GO 12859
12859: DISABLE
12860: LD_INT 0
12862: PPUSH
// begin enable ;
12863: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12864: LD_ADDR_VAR 0 1
12868: PUSH
12869: LD_INT 22
12871: PUSH
12872: LD_OWVAR 2
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 2
12883: PUSH
12884: LD_INT 25
12886: PUSH
12887: LD_INT 5
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 25
12896: PUSH
12897: LD_INT 9
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 25
12906: PUSH
12907: LD_INT 8
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PPUSH
12924: CALL_OW 69
12928: PUSH
12929: FOR_IN
12930: IFFALSE 12946
// begin SetClass ( i , 1 ) ;
12932: LD_VAR 0 1
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 336
// end ;
12944: GO 12929
12946: POP
12947: POP
// end ;
12948: PPOPN 1
12950: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12951: LD_EXP 37
12955: PUSH
12956: LD_EXP 41
12960: AND
12961: PUSH
12962: LD_OWVAR 65
12966: PUSH
12967: LD_INT 7
12969: LESS
12970: AND
12971: IFFALSE 12985
12973: GO 12975
12975: DISABLE
// begin enable ;
12976: ENABLE
// game_speed := 7 ;
12977: LD_ADDR_OWVAR 65
12981: PUSH
12982: LD_INT 7
12984: ST_TO_ADDR
// end ;
12985: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12986: LD_EXP 37
12990: PUSH
12991: LD_EXP 44
12995: AND
12996: IFFALSE 13198
12998: GO 13000
13000: DISABLE
13001: LD_INT 0
13003: PPUSH
13004: PPUSH
13005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13006: LD_ADDR_VAR 0 3
13010: PUSH
13011: LD_INT 81
13013: PUSH
13014: LD_OWVAR 2
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 21
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 69
13041: ST_TO_ADDR
// if not tmp then
13042: LD_VAR 0 3
13046: NOT
13047: IFFALSE 13051
// exit ;
13049: GO 13198
// if tmp > 5 then
13051: LD_VAR 0 3
13055: PUSH
13056: LD_INT 5
13058: GREATER
13059: IFFALSE 13071
// k := 5 else
13061: LD_ADDR_VAR 0 2
13065: PUSH
13066: LD_INT 5
13068: ST_TO_ADDR
13069: GO 13081
// k := tmp ;
13071: LD_ADDR_VAR 0 2
13075: PUSH
13076: LD_VAR 0 3
13080: ST_TO_ADDR
// for i := 1 to k do
13081: LD_ADDR_VAR 0 1
13085: PUSH
13086: DOUBLE
13087: LD_INT 1
13089: DEC
13090: ST_TO_ADDR
13091: LD_VAR 0 2
13095: PUSH
13096: FOR_TO
13097: IFFALSE 13196
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13099: LD_VAR 0 3
13103: PUSH
13104: LD_VAR 0 1
13108: ARRAY
13109: PPUSH
13110: LD_VAR 0 1
13114: PUSH
13115: LD_INT 4
13117: MOD
13118: PUSH
13119: LD_INT 1
13121: PLUS
13122: PPUSH
13123: CALL_OW 259
13127: PUSH
13128: LD_INT 10
13130: LESS
13131: IFFALSE 13194
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13133: LD_VAR 0 3
13137: PUSH
13138: LD_VAR 0 1
13142: ARRAY
13143: PPUSH
13144: LD_VAR 0 1
13148: PUSH
13149: LD_INT 4
13151: MOD
13152: PUSH
13153: LD_INT 1
13155: PLUS
13156: PPUSH
13157: LD_VAR 0 3
13161: PUSH
13162: LD_VAR 0 1
13166: ARRAY
13167: PPUSH
13168: LD_VAR 0 1
13172: PUSH
13173: LD_INT 4
13175: MOD
13176: PUSH
13177: LD_INT 1
13179: PLUS
13180: PPUSH
13181: CALL_OW 259
13185: PUSH
13186: LD_INT 1
13188: PLUS
13189: PPUSH
13190: CALL_OW 237
13194: GO 13096
13196: POP
13197: POP
// end ;
13198: PPOPN 3
13200: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13201: LD_EXP 37
13205: PUSH
13206: LD_EXP 45
13210: AND
13211: IFFALSE 13231
13213: GO 13215
13215: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13216: LD_INT 4
13218: PPUSH
13219: LD_OWVAR 2
13223: PPUSH
13224: LD_INT 0
13226: PPUSH
13227: CALL_OW 324
13231: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13232: LD_EXP 37
13236: PUSH
13237: LD_EXP 74
13241: AND
13242: IFFALSE 13262
13244: GO 13246
13246: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13247: LD_INT 19
13249: PPUSH
13250: LD_OWVAR 2
13254: PPUSH
13255: LD_INT 0
13257: PPUSH
13258: CALL_OW 324
13262: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13263: LD_EXP 37
13267: PUSH
13268: LD_EXP 46
13272: AND
13273: IFFALSE 13375
13275: GO 13277
13277: DISABLE
13278: LD_INT 0
13280: PPUSH
13281: PPUSH
// begin enable ;
13282: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13283: LD_ADDR_VAR 0 2
13287: PUSH
13288: LD_INT 22
13290: PUSH
13291: LD_OWVAR 2
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 34
13305: PUSH
13306: LD_INT 11
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 34
13315: PUSH
13316: LD_INT 30
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 69
13336: ST_TO_ADDR
// if not tmp then
13337: LD_VAR 0 2
13341: NOT
13342: IFFALSE 13346
// exit ;
13344: GO 13375
// for i in tmp do
13346: LD_ADDR_VAR 0 1
13350: PUSH
13351: LD_VAR 0 2
13355: PUSH
13356: FOR_IN
13357: IFFALSE 13373
// begin SetLives ( i , 0 ) ;
13359: LD_VAR 0 1
13363: PPUSH
13364: LD_INT 0
13366: PPUSH
13367: CALL_OW 234
// end ;
13371: GO 13356
13373: POP
13374: POP
// end ;
13375: PPOPN 2
13377: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13378: LD_EXP 37
13382: PUSH
13383: LD_EXP 47
13387: AND
13388: IFFALSE 13408
13390: GO 13392
13392: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13393: LD_INT 32
13395: PPUSH
13396: LD_OWVAR 2
13400: PPUSH
13401: LD_INT 0
13403: PPUSH
13404: CALL_OW 324
13408: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13409: LD_EXP 37
13413: PUSH
13414: LD_EXP 48
13418: AND
13419: IFFALSE 13600
13421: GO 13423
13423: DISABLE
13424: LD_INT 0
13426: PPUSH
13427: PPUSH
13428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13429: LD_ADDR_VAR 0 2
13433: PUSH
13434: LD_INT 22
13436: PUSH
13437: LD_OWVAR 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 33
13448: PUSH
13449: LD_INT 3
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 69
13464: ST_TO_ADDR
// if not tmp then
13465: LD_VAR 0 2
13469: NOT
13470: IFFALSE 13474
// exit ;
13472: GO 13600
// side := 0 ;
13474: LD_ADDR_VAR 0 3
13478: PUSH
13479: LD_INT 0
13481: ST_TO_ADDR
// for i := 1 to 8 do
13482: LD_ADDR_VAR 0 1
13486: PUSH
13487: DOUBLE
13488: LD_INT 1
13490: DEC
13491: ST_TO_ADDR
13492: LD_INT 8
13494: PUSH
13495: FOR_TO
13496: IFFALSE 13544
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13498: LD_OWVAR 2
13502: PUSH
13503: LD_VAR 0 1
13507: NONEQUAL
13508: PUSH
13509: LD_OWVAR 2
13513: PPUSH
13514: LD_VAR 0 1
13518: PPUSH
13519: CALL_OW 81
13523: PUSH
13524: LD_INT 2
13526: EQUAL
13527: AND
13528: IFFALSE 13542
// begin side := i ;
13530: LD_ADDR_VAR 0 3
13534: PUSH
13535: LD_VAR 0 1
13539: ST_TO_ADDR
// break ;
13540: GO 13544
// end ;
13542: GO 13495
13544: POP
13545: POP
// if not side then
13546: LD_VAR 0 3
13550: NOT
13551: IFFALSE 13555
// exit ;
13553: GO 13600
// for i := 1 to tmp do
13555: LD_ADDR_VAR 0 1
13559: PUSH
13560: DOUBLE
13561: LD_INT 1
13563: DEC
13564: ST_TO_ADDR
13565: LD_VAR 0 2
13569: PUSH
13570: FOR_TO
13571: IFFALSE 13598
// if Prob ( 60 ) then
13573: LD_INT 60
13575: PPUSH
13576: CALL_OW 13
13580: IFFALSE 13596
// SetSide ( i , side ) ;
13582: LD_VAR 0 1
13586: PPUSH
13587: LD_VAR 0 3
13591: PPUSH
13592: CALL_OW 235
13596: GO 13570
13598: POP
13599: POP
// end ;
13600: PPOPN 3
13602: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13603: LD_EXP 37
13607: PUSH
13608: LD_EXP 50
13612: AND
13613: IFFALSE 13732
13615: GO 13617
13617: DISABLE
13618: LD_INT 0
13620: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_INT 22
13628: PUSH
13629: LD_OWVAR 2
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: LD_INT 21
13640: PUSH
13641: LD_INT 1
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 23
13653: PUSH
13654: LD_INT 0
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: LIST
13669: PPUSH
13670: CALL_OW 69
13674: PUSH
13675: FOR_IN
13676: IFFALSE 13730
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13678: LD_VAR 0 1
13682: PPUSH
13683: CALL_OW 257
13687: PUSH
13688: LD_INT 1
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: LD_INT 3
13696: PUSH
13697: LD_INT 4
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: IN
13706: IFFALSE 13728
// SetClass ( un , rand ( 1 , 4 ) ) ;
13708: LD_VAR 0 1
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: LD_INT 4
13718: PPUSH
13719: CALL_OW 12
13723: PPUSH
13724: CALL_OW 336
13728: GO 13675
13730: POP
13731: POP
// end ;
13732: PPOPN 1
13734: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13735: LD_EXP 37
13739: PUSH
13740: LD_EXP 49
13744: AND
13745: IFFALSE 13824
13747: GO 13749
13749: DISABLE
13750: LD_INT 0
13752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13753: LD_ADDR_VAR 0 1
13757: PUSH
13758: LD_INT 22
13760: PUSH
13761: LD_OWVAR 2
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 3
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PPUSH
13784: CALL_OW 69
13788: ST_TO_ADDR
// if not tmp then
13789: LD_VAR 0 1
13793: NOT
13794: IFFALSE 13798
// exit ;
13796: GO 13824
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13798: LD_VAR 0 1
13802: PUSH
13803: LD_INT 1
13805: PPUSH
13806: LD_VAR 0 1
13810: PPUSH
13811: CALL_OW 12
13815: ARRAY
13816: PPUSH
13817: LD_INT 100
13819: PPUSH
13820: CALL_OW 234
// end ;
13824: PPOPN 1
13826: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13827: LD_EXP 37
13831: PUSH
13832: LD_EXP 51
13836: AND
13837: IFFALSE 13935
13839: GO 13841
13841: DISABLE
13842: LD_INT 0
13844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13845: LD_ADDR_VAR 0 1
13849: PUSH
13850: LD_INT 22
13852: PUSH
13853: LD_OWVAR 2
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 21
13864: PUSH
13865: LD_INT 1
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PPUSH
13876: CALL_OW 69
13880: ST_TO_ADDR
// if not tmp then
13881: LD_VAR 0 1
13885: NOT
13886: IFFALSE 13890
// exit ;
13888: GO 13935
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13890: LD_VAR 0 1
13894: PUSH
13895: LD_INT 1
13897: PPUSH
13898: LD_VAR 0 1
13902: PPUSH
13903: CALL_OW 12
13907: ARRAY
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 4
13914: PPUSH
13915: CALL_OW 12
13919: PPUSH
13920: LD_INT 3000
13922: PPUSH
13923: LD_INT 9000
13925: PPUSH
13926: CALL_OW 12
13930: PPUSH
13931: CALL_OW 492
// end ;
13935: PPOPN 1
13937: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13938: LD_EXP 37
13942: PUSH
13943: LD_EXP 52
13947: AND
13948: IFFALSE 13968
13950: GO 13952
13952: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13953: LD_INT 1
13955: PPUSH
13956: LD_OWVAR 2
13960: PPUSH
13961: LD_INT 0
13963: PPUSH
13964: CALL_OW 324
13968: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13969: LD_EXP 37
13973: PUSH
13974: LD_EXP 53
13978: AND
13979: IFFALSE 14062
13981: GO 13983
13983: DISABLE
13984: LD_INT 0
13986: PPUSH
13987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13988: LD_ADDR_VAR 0 2
13992: PUSH
13993: LD_INT 22
13995: PUSH
13996: LD_OWVAR 2
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 21
14007: PUSH
14008: LD_INT 3
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PPUSH
14019: CALL_OW 69
14023: ST_TO_ADDR
// if not tmp then
14024: LD_VAR 0 2
14028: NOT
14029: IFFALSE 14033
// exit ;
14031: GO 14062
// for i in tmp do
14033: LD_ADDR_VAR 0 1
14037: PUSH
14038: LD_VAR 0 2
14042: PUSH
14043: FOR_IN
14044: IFFALSE 14060
// SetBLevel ( i , 10 ) ;
14046: LD_VAR 0 1
14050: PPUSH
14051: LD_INT 10
14053: PPUSH
14054: CALL_OW 241
14058: GO 14043
14060: POP
14061: POP
// end ;
14062: PPOPN 2
14064: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14065: LD_EXP 37
14069: PUSH
14070: LD_EXP 54
14074: AND
14075: IFFALSE 14186
14077: GO 14079
14079: DISABLE
14080: LD_INT 0
14082: PPUSH
14083: PPUSH
14084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14085: LD_ADDR_VAR 0 3
14089: PUSH
14090: LD_INT 22
14092: PUSH
14093: LD_OWVAR 2
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 25
14104: PUSH
14105: LD_INT 1
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: CALL_OW 69
14120: ST_TO_ADDR
// if not tmp then
14121: LD_VAR 0 3
14125: NOT
14126: IFFALSE 14130
// exit ;
14128: GO 14186
// un := tmp [ rand ( 1 , tmp ) ] ;
14130: LD_ADDR_VAR 0 2
14134: PUSH
14135: LD_VAR 0 3
14139: PUSH
14140: LD_INT 1
14142: PPUSH
14143: LD_VAR 0 3
14147: PPUSH
14148: CALL_OW 12
14152: ARRAY
14153: ST_TO_ADDR
// if Crawls ( un ) then
14154: LD_VAR 0 2
14158: PPUSH
14159: CALL_OW 318
14163: IFFALSE 14174
// ComWalk ( un ) ;
14165: LD_VAR 0 2
14169: PPUSH
14170: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14174: LD_VAR 0 2
14178: PPUSH
14179: LD_INT 5
14181: PPUSH
14182: CALL_OW 336
// end ;
14186: PPOPN 3
14188: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14189: LD_EXP 37
14193: PUSH
14194: LD_EXP 55
14198: AND
14199: PUSH
14200: LD_OWVAR 67
14204: PUSH
14205: LD_INT 4
14207: LESS
14208: AND
14209: IFFALSE 14228
14211: GO 14213
14213: DISABLE
// begin Difficulty := Difficulty + 1 ;
14214: LD_ADDR_OWVAR 67
14218: PUSH
14219: LD_OWVAR 67
14223: PUSH
14224: LD_INT 1
14226: PLUS
14227: ST_TO_ADDR
// end ;
14228: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14229: LD_EXP 37
14233: PUSH
14234: LD_EXP 56
14238: AND
14239: IFFALSE 14342
14241: GO 14243
14243: DISABLE
14244: LD_INT 0
14246: PPUSH
// begin for i := 1 to 5 do
14247: LD_ADDR_VAR 0 1
14251: PUSH
14252: DOUBLE
14253: LD_INT 1
14255: DEC
14256: ST_TO_ADDR
14257: LD_INT 5
14259: PUSH
14260: FOR_TO
14261: IFFALSE 14340
// begin uc_nation := nation_nature ;
14263: LD_ADDR_OWVAR 21
14267: PUSH
14268: LD_INT 0
14270: ST_TO_ADDR
// uc_side := 0 ;
14271: LD_ADDR_OWVAR 20
14275: PUSH
14276: LD_INT 0
14278: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14279: LD_ADDR_OWVAR 29
14283: PUSH
14284: LD_INT 12
14286: PUSH
14287: LD_INT 12
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: ST_TO_ADDR
// hc_agressivity := 20 ;
14294: LD_ADDR_OWVAR 35
14298: PUSH
14299: LD_INT 20
14301: ST_TO_ADDR
// hc_class := class_tiger ;
14302: LD_ADDR_OWVAR 28
14306: PUSH
14307: LD_INT 14
14309: ST_TO_ADDR
// hc_gallery :=  ;
14310: LD_ADDR_OWVAR 33
14314: PUSH
14315: LD_STRING 
14317: ST_TO_ADDR
// hc_name :=  ;
14318: LD_ADDR_OWVAR 26
14322: PUSH
14323: LD_STRING 
14325: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14326: CALL_OW 44
14330: PPUSH
14331: LD_INT 0
14333: PPUSH
14334: CALL_OW 51
// end ;
14338: GO 14260
14340: POP
14341: POP
// end ;
14342: PPOPN 1
14344: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14345: LD_EXP 37
14349: PUSH
14350: LD_EXP 57
14354: AND
14355: IFFALSE 14364
14357: GO 14359
14359: DISABLE
// StreamSibBomb ;
14360: CALL 14365 0 0
14364: END
// export function StreamSibBomb ; var i , x , y ; begin
14365: LD_INT 0
14367: PPUSH
14368: PPUSH
14369: PPUSH
14370: PPUSH
// result := false ;
14371: LD_ADDR_VAR 0 1
14375: PUSH
14376: LD_INT 0
14378: ST_TO_ADDR
// for i := 1 to 16 do
14379: LD_ADDR_VAR 0 2
14383: PUSH
14384: DOUBLE
14385: LD_INT 1
14387: DEC
14388: ST_TO_ADDR
14389: LD_INT 16
14391: PUSH
14392: FOR_TO
14393: IFFALSE 14592
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14395: LD_ADDR_VAR 0 3
14399: PUSH
14400: LD_INT 10
14402: PUSH
14403: LD_INT 20
14405: PUSH
14406: LD_INT 30
14408: PUSH
14409: LD_INT 40
14411: PUSH
14412: LD_INT 50
14414: PUSH
14415: LD_INT 60
14417: PUSH
14418: LD_INT 70
14420: PUSH
14421: LD_INT 80
14423: PUSH
14424: LD_INT 90
14426: PUSH
14427: LD_INT 100
14429: PUSH
14430: LD_INT 110
14432: PUSH
14433: LD_INT 120
14435: PUSH
14436: LD_INT 130
14438: PUSH
14439: LD_INT 140
14441: PUSH
14442: LD_INT 150
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 1
14464: PPUSH
14465: LD_INT 15
14467: PPUSH
14468: CALL_OW 12
14472: ARRAY
14473: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14474: LD_ADDR_VAR 0 4
14478: PUSH
14479: LD_INT 10
14481: PUSH
14482: LD_INT 20
14484: PUSH
14485: LD_INT 30
14487: PUSH
14488: LD_INT 40
14490: PUSH
14491: LD_INT 50
14493: PUSH
14494: LD_INT 60
14496: PUSH
14497: LD_INT 70
14499: PUSH
14500: LD_INT 80
14502: PUSH
14503: LD_INT 90
14505: PUSH
14506: LD_INT 100
14508: PUSH
14509: LD_INT 110
14511: PUSH
14512: LD_INT 120
14514: PUSH
14515: LD_INT 130
14517: PUSH
14518: LD_INT 140
14520: PUSH
14521: LD_INT 150
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 1
14543: PPUSH
14544: LD_INT 15
14546: PPUSH
14547: CALL_OW 12
14551: ARRAY
14552: ST_TO_ADDR
// if ValidHex ( x , y ) then
14553: LD_VAR 0 3
14557: PPUSH
14558: LD_VAR 0 4
14562: PPUSH
14563: CALL_OW 488
14567: IFFALSE 14590
// begin result := [ x , y ] ;
14569: LD_ADDR_VAR 0 1
14573: PUSH
14574: LD_VAR 0 3
14578: PUSH
14579: LD_VAR 0 4
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: ST_TO_ADDR
// break ;
14588: GO 14592
// end ; end ;
14590: GO 14392
14592: POP
14593: POP
// if result then
14594: LD_VAR 0 1
14598: IFFALSE 14658
// begin ToLua ( playSibBomb() ) ;
14600: LD_STRING playSibBomb()
14602: PPUSH
14603: CALL_OW 559
// wait ( 0 0$14 ) ;
14607: LD_INT 490
14609: PPUSH
14610: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14614: LD_VAR 0 1
14618: PUSH
14619: LD_INT 1
14621: ARRAY
14622: PPUSH
14623: LD_VAR 0 1
14627: PUSH
14628: LD_INT 2
14630: ARRAY
14631: PPUSH
14632: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14636: LD_VAR 0 1
14640: PUSH
14641: LD_INT 1
14643: ARRAY
14644: PPUSH
14645: LD_VAR 0 1
14649: PUSH
14650: LD_INT 2
14652: ARRAY
14653: PPUSH
14654: CALL_OW 429
// end ; end ;
14658: LD_VAR 0 1
14662: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14663: LD_EXP 37
14667: PUSH
14668: LD_EXP 59
14672: AND
14673: IFFALSE 14685
14675: GO 14677
14677: DISABLE
// YouLost (  ) ;
14678: LD_STRING 
14680: PPUSH
14681: CALL_OW 104
14685: END
// every 0 0$1 trigger StreamModeActive and sFog do
14686: LD_EXP 37
14690: PUSH
14691: LD_EXP 58
14695: AND
14696: IFFALSE 14710
14698: GO 14700
14700: DISABLE
// FogOff ( your_side ) ;
14701: LD_OWVAR 2
14705: PPUSH
14706: CALL_OW 344
14710: END
// every 0 0$1 trigger StreamModeActive and sSun do
14711: LD_EXP 37
14715: PUSH
14716: LD_EXP 60
14720: AND
14721: IFFALSE 14749
14723: GO 14725
14725: DISABLE
// begin solar_recharge_percent := 0 ;
14726: LD_ADDR_OWVAR 79
14730: PUSH
14731: LD_INT 0
14733: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14734: LD_INT 10500
14736: PPUSH
14737: CALL_OW 67
// solar_recharge_percent := 100 ;
14741: LD_ADDR_OWVAR 79
14745: PUSH
14746: LD_INT 100
14748: ST_TO_ADDR
// end ;
14749: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14750: LD_EXP 37
14754: PUSH
14755: LD_EXP 61
14759: AND
14760: IFFALSE 14999
14762: GO 14764
14764: DISABLE
14765: LD_INT 0
14767: PPUSH
14768: PPUSH
14769: PPUSH
// begin tmp := [ ] ;
14770: LD_ADDR_VAR 0 3
14774: PUSH
14775: EMPTY
14776: ST_TO_ADDR
// for i := 1 to 6 do
14777: LD_ADDR_VAR 0 1
14781: PUSH
14782: DOUBLE
14783: LD_INT 1
14785: DEC
14786: ST_TO_ADDR
14787: LD_INT 6
14789: PUSH
14790: FOR_TO
14791: IFFALSE 14896
// begin uc_nation := nation_nature ;
14793: LD_ADDR_OWVAR 21
14797: PUSH
14798: LD_INT 0
14800: ST_TO_ADDR
// uc_side := 0 ;
14801: LD_ADDR_OWVAR 20
14805: PUSH
14806: LD_INT 0
14808: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14809: LD_ADDR_OWVAR 29
14813: PUSH
14814: LD_INT 12
14816: PUSH
14817: LD_INT 12
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: ST_TO_ADDR
// hc_agressivity := 20 ;
14824: LD_ADDR_OWVAR 35
14828: PUSH
14829: LD_INT 20
14831: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14832: LD_ADDR_OWVAR 28
14836: PUSH
14837: LD_INT 17
14839: ST_TO_ADDR
// hc_gallery :=  ;
14840: LD_ADDR_OWVAR 33
14844: PUSH
14845: LD_STRING 
14847: ST_TO_ADDR
// hc_name :=  ;
14848: LD_ADDR_OWVAR 26
14852: PUSH
14853: LD_STRING 
14855: ST_TO_ADDR
// un := CreateHuman ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: CALL_OW 44
14865: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14866: LD_VAR 0 2
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 51
// tmp := tmp ^ un ;
14878: LD_ADDR_VAR 0 3
14882: PUSH
14883: LD_VAR 0 3
14887: PUSH
14888: LD_VAR 0 2
14892: ADD
14893: ST_TO_ADDR
// end ;
14894: GO 14790
14896: POP
14897: POP
// repeat wait ( 0 0$1 ) ;
14898: LD_INT 35
14900: PPUSH
14901: CALL_OW 67
// for un in tmp do
14905: LD_ADDR_VAR 0 2
14909: PUSH
14910: LD_VAR 0 3
14914: PUSH
14915: FOR_IN
14916: IFFALSE 14990
// begin if IsDead ( un ) then
14918: LD_VAR 0 2
14922: PPUSH
14923: CALL_OW 301
14927: IFFALSE 14947
// begin tmp := tmp diff un ;
14929: LD_ADDR_VAR 0 3
14933: PUSH
14934: LD_VAR 0 3
14938: PUSH
14939: LD_VAR 0 2
14943: DIFF
14944: ST_TO_ADDR
// continue ;
14945: GO 14915
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14947: LD_VAR 0 2
14951: PPUSH
14952: LD_INT 3
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_INT 0
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PPUSH
14969: CALL_OW 69
14973: PPUSH
14974: LD_VAR 0 2
14978: PPUSH
14979: CALL_OW 74
14983: PPUSH
14984: CALL_OW 115
// end ;
14988: GO 14915
14990: POP
14991: POP
// until not tmp ;
14992: LD_VAR 0 3
14996: NOT
14997: IFFALSE 14898
// end ;
14999: PPOPN 3
15001: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15002: LD_EXP 37
15006: PUSH
15007: LD_EXP 62
15011: AND
15012: IFFALSE 15066
15014: GO 15016
15016: DISABLE
// begin ToLua ( displayTroll(); ) ;
15017: LD_STRING displayTroll();
15019: PPUSH
15020: CALL_OW 559
// wait ( 3 3$00 ) ;
15024: LD_INT 6300
15026: PPUSH
15027: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15031: LD_STRING hideTroll();
15033: PPUSH
15034: CALL_OW 559
// wait ( 1 1$00 ) ;
15038: LD_INT 2100
15040: PPUSH
15041: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15045: LD_STRING displayTroll();
15047: PPUSH
15048: CALL_OW 559
// wait ( 1 1$00 ) ;
15052: LD_INT 2100
15054: PPUSH
15055: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15059: LD_STRING hideTroll();
15061: PPUSH
15062: CALL_OW 559
// end ;
15066: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15067: LD_EXP 37
15071: PUSH
15072: LD_EXP 63
15076: AND
15077: IFFALSE 15140
15079: GO 15081
15081: DISABLE
15082: LD_INT 0
15084: PPUSH
// begin p := 0 ;
15085: LD_ADDR_VAR 0 1
15089: PUSH
15090: LD_INT 0
15092: ST_TO_ADDR
// repeat game_speed := 1 ;
15093: LD_ADDR_OWVAR 65
15097: PUSH
15098: LD_INT 1
15100: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15101: LD_INT 35
15103: PPUSH
15104: CALL_OW 67
// p := p + 1 ;
15108: LD_ADDR_VAR 0 1
15112: PUSH
15113: LD_VAR 0 1
15117: PUSH
15118: LD_INT 1
15120: PLUS
15121: ST_TO_ADDR
// until p >= 60 ;
15122: LD_VAR 0 1
15126: PUSH
15127: LD_INT 60
15129: GREATEREQUAL
15130: IFFALSE 15093
// game_speed := 4 ;
15132: LD_ADDR_OWVAR 65
15136: PUSH
15137: LD_INT 4
15139: ST_TO_ADDR
// end ;
15140: PPOPN 1
15142: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15143: LD_EXP 37
15147: PUSH
15148: LD_EXP 64
15152: AND
15153: IFFALSE 15299
15155: GO 15157
15157: DISABLE
15158: LD_INT 0
15160: PPUSH
15161: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15162: LD_ADDR_VAR 0 1
15166: PUSH
15167: LD_INT 22
15169: PUSH
15170: LD_OWVAR 2
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 2
15181: PUSH
15182: LD_INT 30
15184: PUSH
15185: LD_INT 0
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 30
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PPUSH
15211: CALL_OW 69
15215: ST_TO_ADDR
// if not depot then
15216: LD_VAR 0 1
15220: NOT
15221: IFFALSE 15225
// exit ;
15223: GO 15299
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15225: LD_ADDR_VAR 0 2
15229: PUSH
15230: LD_VAR 0 1
15234: PUSH
15235: LD_INT 1
15237: PPUSH
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 12
15247: ARRAY
15248: PPUSH
15249: CALL_OW 274
15253: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15254: LD_VAR 0 2
15258: PPUSH
15259: LD_INT 1
15261: PPUSH
15262: LD_INT 0
15264: PPUSH
15265: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15269: LD_VAR 0 2
15273: PPUSH
15274: LD_INT 2
15276: PPUSH
15277: LD_INT 0
15279: PPUSH
15280: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15284: LD_VAR 0 2
15288: PPUSH
15289: LD_INT 3
15291: PPUSH
15292: LD_INT 0
15294: PPUSH
15295: CALL_OW 277
// end ;
15299: PPOPN 2
15301: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15302: LD_EXP 37
15306: PUSH
15307: LD_EXP 65
15311: AND
15312: IFFALSE 15409
15314: GO 15316
15316: DISABLE
15317: LD_INT 0
15319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15320: LD_ADDR_VAR 0 1
15324: PUSH
15325: LD_INT 22
15327: PUSH
15328: LD_OWVAR 2
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 21
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 3
15349: PUSH
15350: LD_INT 23
15352: PUSH
15353: LD_INT 0
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: PPUSH
15369: CALL_OW 69
15373: ST_TO_ADDR
// if not tmp then
15374: LD_VAR 0 1
15378: NOT
15379: IFFALSE 15383
// exit ;
15381: GO 15409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15383: LD_VAR 0 1
15387: PUSH
15388: LD_INT 1
15390: PPUSH
15391: LD_VAR 0 1
15395: PPUSH
15396: CALL_OW 12
15400: ARRAY
15401: PPUSH
15402: LD_INT 200
15404: PPUSH
15405: CALL_OW 234
// end ;
15409: PPOPN 1
15411: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15412: LD_EXP 37
15416: PUSH
15417: LD_EXP 66
15421: AND
15422: IFFALSE 15501
15424: GO 15426
15426: DISABLE
15427: LD_INT 0
15429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15430: LD_ADDR_VAR 0 1
15434: PUSH
15435: LD_INT 22
15437: PUSH
15438: LD_OWVAR 2
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 21
15449: PUSH
15450: LD_INT 2
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PPUSH
15461: CALL_OW 69
15465: ST_TO_ADDR
// if not tmp then
15466: LD_VAR 0 1
15470: NOT
15471: IFFALSE 15475
// exit ;
15473: GO 15501
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15475: LD_VAR 0 1
15479: PUSH
15480: LD_INT 1
15482: PPUSH
15483: LD_VAR 0 1
15487: PPUSH
15488: CALL_OW 12
15492: ARRAY
15493: PPUSH
15494: LD_INT 60
15496: PPUSH
15497: CALL_OW 234
// end ;
15501: PPOPN 1
15503: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15504: LD_EXP 37
15508: PUSH
15509: LD_EXP 67
15513: AND
15514: IFFALSE 15613
15516: GO 15518
15518: DISABLE
15519: LD_INT 0
15521: PPUSH
15522: PPUSH
// begin enable ;
15523: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15524: LD_ADDR_VAR 0 1
15528: PUSH
15529: LD_INT 22
15531: PUSH
15532: LD_OWVAR 2
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 61
15543: PUSH
15544: EMPTY
15545: LIST
15546: PUSH
15547: LD_INT 33
15549: PUSH
15550: LD_INT 2
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 69
15566: ST_TO_ADDR
// if not tmp then
15567: LD_VAR 0 1
15571: NOT
15572: IFFALSE 15576
// exit ;
15574: GO 15613
// for i in tmp do
15576: LD_ADDR_VAR 0 2
15580: PUSH
15581: LD_VAR 0 1
15585: PUSH
15586: FOR_IN
15587: IFFALSE 15611
// if IsControledBy ( i ) then
15589: LD_VAR 0 2
15593: PPUSH
15594: CALL_OW 312
15598: IFFALSE 15609
// ComUnlink ( i ) ;
15600: LD_VAR 0 2
15604: PPUSH
15605: CALL_OW 136
15609: GO 15586
15611: POP
15612: POP
// end ;
15613: PPOPN 2
15615: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15616: LD_EXP 37
15620: PUSH
15621: LD_EXP 68
15625: AND
15626: IFFALSE 15766
15628: GO 15630
15630: DISABLE
15631: LD_INT 0
15633: PPUSH
15634: PPUSH
// begin ToLua ( displayPowell(); ) ;
15635: LD_STRING displayPowell();
15637: PPUSH
15638: CALL_OW 559
// uc_side := 0 ;
15642: LD_ADDR_OWVAR 20
15646: PUSH
15647: LD_INT 0
15649: ST_TO_ADDR
// uc_nation := 2 ;
15650: LD_ADDR_OWVAR 21
15654: PUSH
15655: LD_INT 2
15657: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15658: LD_ADDR_OWVAR 37
15662: PUSH
15663: LD_INT 14
15665: ST_TO_ADDR
// vc_engine := engine_siberite ;
15666: LD_ADDR_OWVAR 39
15670: PUSH
15671: LD_INT 3
15673: ST_TO_ADDR
// vc_control := control_apeman ;
15674: LD_ADDR_OWVAR 38
15678: PUSH
15679: LD_INT 5
15681: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15682: LD_ADDR_OWVAR 40
15686: PUSH
15687: LD_INT 29
15689: ST_TO_ADDR
// un := CreateVehicle ;
15690: LD_ADDR_VAR 0 2
15694: PUSH
15695: CALL_OW 45
15699: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15700: LD_VAR 0 2
15704: PPUSH
15705: LD_INT 1
15707: PPUSH
15708: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15712: LD_INT 35
15714: PPUSH
15715: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15719: LD_VAR 0 2
15723: PPUSH
15724: LD_INT 22
15726: PUSH
15727: LD_OWVAR 2
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL_OW 69
15740: PPUSH
15741: LD_VAR 0 2
15745: PPUSH
15746: CALL_OW 74
15750: PPUSH
15751: CALL_OW 115
// until IsDead ( un ) ;
15755: LD_VAR 0 2
15759: PPUSH
15760: CALL_OW 301
15764: IFFALSE 15712
// end ;
15766: PPOPN 2
15768: END
// every 0 0$1 trigger StreamModeActive and sStu do
15769: LD_EXP 37
15773: PUSH
15774: LD_EXP 76
15778: AND
15779: IFFALSE 15795
15781: GO 15783
15783: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15784: LD_STRING displayStucuk();
15786: PPUSH
15787: CALL_OW 559
// ResetFog ;
15791: CALL_OW 335
// end ;
15795: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15796: LD_EXP 37
15800: PUSH
15801: LD_EXP 69
15805: AND
15806: IFFALSE 15947
15808: GO 15810
15810: DISABLE
15811: LD_INT 0
15813: PPUSH
15814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15815: LD_ADDR_VAR 0 2
15819: PUSH
15820: LD_INT 22
15822: PUSH
15823: LD_OWVAR 2
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 21
15834: PUSH
15835: LD_INT 1
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PPUSH
15846: CALL_OW 69
15850: ST_TO_ADDR
// if not tmp then
15851: LD_VAR 0 2
15855: NOT
15856: IFFALSE 15860
// exit ;
15858: GO 15947
// un := tmp [ rand ( 1 , tmp ) ] ;
15860: LD_ADDR_VAR 0 1
15864: PUSH
15865: LD_VAR 0 2
15869: PUSH
15870: LD_INT 1
15872: PPUSH
15873: LD_VAR 0 2
15877: PPUSH
15878: CALL_OW 12
15882: ARRAY
15883: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15884: LD_VAR 0 1
15888: PPUSH
15889: LD_INT 0
15891: PPUSH
15892: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_OWVAR 3
15905: PUSH
15906: LD_VAR 0 1
15910: DIFF
15911: PPUSH
15912: LD_VAR 0 1
15916: PPUSH
15917: CALL_OW 74
15921: PPUSH
15922: CALL_OW 115
// wait ( 0 0$20 ) ;
15926: LD_INT 700
15928: PPUSH
15929: CALL_OW 67
// SetSide ( un , your_side ) ;
15933: LD_VAR 0 1
15937: PPUSH
15938: LD_OWVAR 2
15942: PPUSH
15943: CALL_OW 235
// end ;
15947: PPOPN 2
15949: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15950: LD_EXP 37
15954: PUSH
15955: LD_EXP 70
15959: AND
15960: IFFALSE 16066
15962: GO 15964
15964: DISABLE
15965: LD_INT 0
15967: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15968: LD_ADDR_VAR 0 1
15972: PUSH
15973: LD_INT 22
15975: PUSH
15976: LD_OWVAR 2
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 2
15987: PUSH
15988: LD_INT 30
15990: PUSH
15991: LD_INT 0
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 30
16000: PUSH
16001: LD_INT 1
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PPUSH
16017: CALL_OW 69
16021: ST_TO_ADDR
// if not depot then
16022: LD_VAR 0 1
16026: NOT
16027: IFFALSE 16031
// exit ;
16029: GO 16066
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16031: LD_VAR 0 1
16035: PUSH
16036: LD_INT 1
16038: ARRAY
16039: PPUSH
16040: CALL_OW 250
16044: PPUSH
16045: LD_VAR 0 1
16049: PUSH
16050: LD_INT 1
16052: ARRAY
16053: PPUSH
16054: CALL_OW 251
16058: PPUSH
16059: LD_INT 70
16061: PPUSH
16062: CALL_OW 495
// end ;
16066: PPOPN 1
16068: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16069: LD_EXP 37
16073: PUSH
16074: LD_EXP 71
16078: AND
16079: IFFALSE 16290
16081: GO 16083
16083: DISABLE
16084: LD_INT 0
16086: PPUSH
16087: PPUSH
16088: PPUSH
16089: PPUSH
16090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16091: LD_ADDR_VAR 0 5
16095: PUSH
16096: LD_INT 22
16098: PUSH
16099: LD_OWVAR 2
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 21
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PPUSH
16122: CALL_OW 69
16126: ST_TO_ADDR
// if not tmp then
16127: LD_VAR 0 5
16131: NOT
16132: IFFALSE 16136
// exit ;
16134: GO 16290
// for i in tmp do
16136: LD_ADDR_VAR 0 1
16140: PUSH
16141: LD_VAR 0 5
16145: PUSH
16146: FOR_IN
16147: IFFALSE 16288
// begin d := rand ( 0 , 5 ) ;
16149: LD_ADDR_VAR 0 4
16153: PUSH
16154: LD_INT 0
16156: PPUSH
16157: LD_INT 5
16159: PPUSH
16160: CALL_OW 12
16164: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16165: LD_ADDR_VAR 0 2
16169: PUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 250
16179: PPUSH
16180: LD_VAR 0 4
16184: PPUSH
16185: LD_INT 3
16187: PPUSH
16188: LD_INT 12
16190: PPUSH
16191: CALL_OW 12
16195: PPUSH
16196: CALL_OW 272
16200: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16201: LD_ADDR_VAR 0 3
16205: PUSH
16206: LD_VAR 0 1
16210: PPUSH
16211: CALL_OW 251
16215: PPUSH
16216: LD_VAR 0 4
16220: PPUSH
16221: LD_INT 3
16223: PPUSH
16224: LD_INT 12
16226: PPUSH
16227: CALL_OW 12
16231: PPUSH
16232: CALL_OW 273
16236: ST_TO_ADDR
// if ValidHex ( x , y ) then
16237: LD_VAR 0 2
16241: PPUSH
16242: LD_VAR 0 3
16246: PPUSH
16247: CALL_OW 488
16251: IFFALSE 16286
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16253: LD_VAR 0 1
16257: PPUSH
16258: LD_VAR 0 2
16262: PPUSH
16263: LD_VAR 0 3
16267: PPUSH
16268: LD_INT 3
16270: PPUSH
16271: LD_INT 6
16273: PPUSH
16274: CALL_OW 12
16278: PPUSH
16279: LD_INT 1
16281: PPUSH
16282: CALL_OW 483
// end ;
16286: GO 16146
16288: POP
16289: POP
// end ;
16290: PPOPN 5
16292: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16293: LD_EXP 37
16297: PUSH
16298: LD_EXP 72
16302: AND
16303: IFFALSE 16397
16305: GO 16307
16307: DISABLE
16308: LD_INT 0
16310: PPUSH
16311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16312: LD_ADDR_VAR 0 2
16316: PUSH
16317: LD_INT 22
16319: PUSH
16320: LD_OWVAR 2
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 32
16331: PUSH
16332: LD_INT 1
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 2
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: LIST
16353: PPUSH
16354: CALL_OW 69
16358: ST_TO_ADDR
// if not tmp then
16359: LD_VAR 0 2
16363: NOT
16364: IFFALSE 16368
// exit ;
16366: GO 16397
// for i in tmp do
16368: LD_ADDR_VAR 0 1
16372: PUSH
16373: LD_VAR 0 2
16377: PUSH
16378: FOR_IN
16379: IFFALSE 16395
// SetFuel ( i , 0 ) ;
16381: LD_VAR 0 1
16385: PPUSH
16386: LD_INT 0
16388: PPUSH
16389: CALL_OW 240
16393: GO 16378
16395: POP
16396: POP
// end ;
16397: PPOPN 2
16399: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16400: LD_EXP 37
16404: PUSH
16405: LD_EXP 73
16409: AND
16410: IFFALSE 16476
16412: GO 16414
16414: DISABLE
16415: LD_INT 0
16417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16418: LD_ADDR_VAR 0 1
16422: PUSH
16423: LD_INT 22
16425: PUSH
16426: LD_OWVAR 2
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 30
16437: PUSH
16438: LD_INT 29
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PPUSH
16449: CALL_OW 69
16453: ST_TO_ADDR
// if not tmp then
16454: LD_VAR 0 1
16458: NOT
16459: IFFALSE 16463
// exit ;
16461: GO 16476
// DestroyUnit ( tmp [ 1 ] ) ;
16463: LD_VAR 0 1
16467: PUSH
16468: LD_INT 1
16470: ARRAY
16471: PPUSH
16472: CALL_OW 65
// end ;
16476: PPOPN 1
16478: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16479: LD_EXP 37
16483: PUSH
16484: LD_EXP 75
16488: AND
16489: IFFALSE 16618
16491: GO 16493
16493: DISABLE
16494: LD_INT 0
16496: PPUSH
// begin uc_side := 0 ;
16497: LD_ADDR_OWVAR 20
16501: PUSH
16502: LD_INT 0
16504: ST_TO_ADDR
// uc_nation := nation_arabian ;
16505: LD_ADDR_OWVAR 21
16509: PUSH
16510: LD_INT 2
16512: ST_TO_ADDR
// hc_gallery :=  ;
16513: LD_ADDR_OWVAR 33
16517: PUSH
16518: LD_STRING 
16520: ST_TO_ADDR
// hc_name :=  ;
16521: LD_ADDR_OWVAR 26
16525: PUSH
16526: LD_STRING 
16528: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16529: LD_INT 1
16531: PPUSH
16532: LD_INT 11
16534: PPUSH
16535: LD_INT 10
16537: PPUSH
16538: CALL_OW 380
// un := CreateHuman ;
16542: LD_ADDR_VAR 0 1
16546: PUSH
16547: CALL_OW 44
16551: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16552: LD_VAR 0 1
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16564: LD_INT 35
16566: PPUSH
16567: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16571: LD_VAR 0 1
16575: PPUSH
16576: LD_INT 22
16578: PUSH
16579: LD_OWVAR 2
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PPUSH
16588: CALL_OW 69
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 74
16602: PPUSH
16603: CALL_OW 115
// until IsDead ( un ) ;
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 301
16616: IFFALSE 16564
// end ;
16618: PPOPN 1
16620: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16621: LD_EXP 37
16625: PUSH
16626: LD_EXP 77
16630: AND
16631: IFFALSE 16643
16633: GO 16635
16635: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16636: LD_STRING earthquake(getX(game), 0, 32)
16638: PPUSH
16639: CALL_OW 559
16643: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16644: LD_EXP 37
16648: PUSH
16649: LD_EXP 78
16653: AND
16654: IFFALSE 16745
16656: GO 16658
16658: DISABLE
16659: LD_INT 0
16661: PPUSH
// begin enable ;
16662: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16663: LD_ADDR_VAR 0 1
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_OWVAR 2
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 21
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 33
16692: PUSH
16693: LD_INT 3
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL_OW 69
16709: ST_TO_ADDR
// if not tmp then
16710: LD_VAR 0 1
16714: NOT
16715: IFFALSE 16719
// exit ;
16717: GO 16745
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16719: LD_VAR 0 1
16723: PUSH
16724: LD_INT 1
16726: PPUSH
16727: LD_VAR 0 1
16731: PPUSH
16732: CALL_OW 12
16736: ARRAY
16737: PPUSH
16738: LD_INT 1
16740: PPUSH
16741: CALL_OW 234
// end ;
16745: PPOPN 1
16747: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16748: LD_EXP 37
16752: PUSH
16753: LD_EXP 79
16757: AND
16758: IFFALSE 16899
16760: GO 16762
16762: DISABLE
16763: LD_INT 0
16765: PPUSH
16766: PPUSH
16767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16768: LD_ADDR_VAR 0 3
16772: PUSH
16773: LD_INT 22
16775: PUSH
16776: LD_OWVAR 2
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 25
16787: PUSH
16788: LD_INT 1
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL_OW 69
16803: ST_TO_ADDR
// if not tmp then
16804: LD_VAR 0 3
16808: NOT
16809: IFFALSE 16813
// exit ;
16811: GO 16899
// un := tmp [ rand ( 1 , tmp ) ] ;
16813: LD_ADDR_VAR 0 2
16817: PUSH
16818: LD_VAR 0 3
16822: PUSH
16823: LD_INT 1
16825: PPUSH
16826: LD_VAR 0 3
16830: PPUSH
16831: CALL_OW 12
16835: ARRAY
16836: ST_TO_ADDR
// if Crawls ( un ) then
16837: LD_VAR 0 2
16841: PPUSH
16842: CALL_OW 318
16846: IFFALSE 16857
// ComWalk ( un ) ;
16848: LD_VAR 0 2
16852: PPUSH
16853: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16857: LD_VAR 0 2
16861: PPUSH
16862: LD_INT 9
16864: PPUSH
16865: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16869: LD_INT 28
16871: PPUSH
16872: LD_OWVAR 2
16876: PPUSH
16877: LD_INT 2
16879: PPUSH
16880: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16884: LD_INT 29
16886: PPUSH
16887: LD_OWVAR 2
16891: PPUSH
16892: LD_INT 2
16894: PPUSH
16895: CALL_OW 322
// end ;
16899: PPOPN 3
16901: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16902: LD_EXP 37
16906: PUSH
16907: LD_EXP 80
16911: AND
16912: IFFALSE 17023
16914: GO 16916
16916: DISABLE
16917: LD_INT 0
16919: PPUSH
16920: PPUSH
16921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16922: LD_ADDR_VAR 0 3
16926: PUSH
16927: LD_INT 22
16929: PUSH
16930: LD_OWVAR 2
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 25
16941: PUSH
16942: LD_INT 1
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PPUSH
16953: CALL_OW 69
16957: ST_TO_ADDR
// if not tmp then
16958: LD_VAR 0 3
16962: NOT
16963: IFFALSE 16967
// exit ;
16965: GO 17023
// un := tmp [ rand ( 1 , tmp ) ] ;
16967: LD_ADDR_VAR 0 2
16971: PUSH
16972: LD_VAR 0 3
16976: PUSH
16977: LD_INT 1
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: CALL_OW 12
16989: ARRAY
16990: ST_TO_ADDR
// if Crawls ( un ) then
16991: LD_VAR 0 2
16995: PPUSH
16996: CALL_OW 318
17000: IFFALSE 17011
// ComWalk ( un ) ;
17002: LD_VAR 0 2
17006: PPUSH
17007: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17011: LD_VAR 0 2
17015: PPUSH
17016: LD_INT 8
17018: PPUSH
17019: CALL_OW 336
// end ;
17023: PPOPN 3
17025: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17026: LD_EXP 37
17030: PUSH
17031: LD_EXP 81
17035: AND
17036: IFFALSE 17180
17038: GO 17040
17040: DISABLE
17041: LD_INT 0
17043: PPUSH
17044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17045: LD_ADDR_VAR 0 2
17049: PUSH
17050: LD_INT 22
17052: PUSH
17053: LD_OWVAR 2
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 2
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: LD_INT 34
17077: PUSH
17078: LD_INT 12
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 34
17087: PUSH
17088: LD_INT 51
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 34
17097: PUSH
17098: LD_INT 32
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: ST_TO_ADDR
// if not tmp then
17121: LD_VAR 0 2
17125: NOT
17126: IFFALSE 17130
// exit ;
17128: GO 17180
// for i in tmp do
17130: LD_ADDR_VAR 0 1
17134: PUSH
17135: LD_VAR 0 2
17139: PUSH
17140: FOR_IN
17141: IFFALSE 17178
// if GetCargo ( i , mat_artifact ) = 0 then
17143: LD_VAR 0 1
17147: PPUSH
17148: LD_INT 4
17150: PPUSH
17151: CALL_OW 289
17155: PUSH
17156: LD_INT 0
17158: EQUAL
17159: IFFALSE 17176
// SetCargo ( i , mat_siberit , 100 ) ;
17161: LD_VAR 0 1
17165: PPUSH
17166: LD_INT 3
17168: PPUSH
17169: LD_INT 100
17171: PPUSH
17172: CALL_OW 290
17176: GO 17140
17178: POP
17179: POP
// end ;
17180: PPOPN 2
17182: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17183: LD_EXP 37
17187: PUSH
17188: LD_EXP 82
17192: AND
17193: IFFALSE 17376
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17202: LD_ADDR_VAR 0 2
17206: PUSH
17207: LD_INT 22
17209: PUSH
17210: LD_OWVAR 2
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PPUSH
17219: CALL_OW 69
17223: ST_TO_ADDR
// if not tmp then
17224: LD_VAR 0 2
17228: NOT
17229: IFFALSE 17233
// exit ;
17231: GO 17376
// for i := 1 to 2 do
17233: LD_ADDR_VAR 0 1
17237: PUSH
17238: DOUBLE
17239: LD_INT 1
17241: DEC
17242: ST_TO_ADDR
17243: LD_INT 2
17245: PUSH
17246: FOR_TO
17247: IFFALSE 17374
// begin uc_side := your_side ;
17249: LD_ADDR_OWVAR 20
17253: PUSH
17254: LD_OWVAR 2
17258: ST_TO_ADDR
// uc_nation := nation_american ;
17259: LD_ADDR_OWVAR 21
17263: PUSH
17264: LD_INT 1
17266: ST_TO_ADDR
// vc_chassis := us_morphling ;
17267: LD_ADDR_OWVAR 37
17271: PUSH
17272: LD_INT 5
17274: ST_TO_ADDR
// vc_engine := engine_siberite ;
17275: LD_ADDR_OWVAR 39
17279: PUSH
17280: LD_INT 3
17282: ST_TO_ADDR
// vc_control := control_computer ;
17283: LD_ADDR_OWVAR 38
17287: PUSH
17288: LD_INT 3
17290: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17291: LD_ADDR_OWVAR 40
17295: PUSH
17296: LD_INT 10
17298: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17299: LD_VAR 0 2
17303: PUSH
17304: LD_INT 1
17306: ARRAY
17307: PPUSH
17308: CALL_OW 310
17312: NOT
17313: IFFALSE 17360
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17315: CALL_OW 45
17319: PPUSH
17320: LD_VAR 0 2
17324: PUSH
17325: LD_INT 1
17327: ARRAY
17328: PPUSH
17329: CALL_OW 250
17333: PPUSH
17334: LD_VAR 0 2
17338: PUSH
17339: LD_INT 1
17341: ARRAY
17342: PPUSH
17343: CALL_OW 251
17347: PPUSH
17348: LD_INT 12
17350: PPUSH
17351: LD_INT 1
17353: PPUSH
17354: CALL_OW 50
17358: GO 17372
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17360: CALL_OW 45
17364: PPUSH
17365: LD_INT 1
17367: PPUSH
17368: CALL_OW 51
// end ;
17372: GO 17246
17374: POP
17375: POP
// end ;
17376: PPOPN 2
17378: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17379: LD_EXP 37
17383: PUSH
17384: LD_EXP 83
17388: AND
17389: IFFALSE 17611
17391: GO 17393
17393: DISABLE
17394: LD_INT 0
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
17400: PPUSH
17401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17402: LD_ADDR_VAR 0 6
17406: PUSH
17407: LD_INT 22
17409: PUSH
17410: LD_OWVAR 2
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 21
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: LD_INT 23
17434: PUSH
17435: LD_INT 0
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: LIST
17450: PPUSH
17451: CALL_OW 69
17455: ST_TO_ADDR
// if not tmp then
17456: LD_VAR 0 6
17460: NOT
17461: IFFALSE 17465
// exit ;
17463: GO 17611
// s1 := rand ( 1 , 4 ) ;
17465: LD_ADDR_VAR 0 2
17469: PUSH
17470: LD_INT 1
17472: PPUSH
17473: LD_INT 4
17475: PPUSH
17476: CALL_OW 12
17480: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17481: LD_ADDR_VAR 0 4
17485: PUSH
17486: LD_VAR 0 6
17490: PUSH
17491: LD_INT 1
17493: ARRAY
17494: PPUSH
17495: LD_VAR 0 2
17499: PPUSH
17500: CALL_OW 259
17504: ST_TO_ADDR
// if s1 = 1 then
17505: LD_VAR 0 2
17509: PUSH
17510: LD_INT 1
17512: EQUAL
17513: IFFALSE 17533
// s2 := rand ( 2 , 4 ) else
17515: LD_ADDR_VAR 0 3
17519: PUSH
17520: LD_INT 2
17522: PPUSH
17523: LD_INT 4
17525: PPUSH
17526: CALL_OW 12
17530: ST_TO_ADDR
17531: GO 17541
// s2 := 1 ;
17533: LD_ADDR_VAR 0 3
17537: PUSH
17538: LD_INT 1
17540: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17541: LD_ADDR_VAR 0 5
17545: PUSH
17546: LD_VAR 0 6
17550: PUSH
17551: LD_INT 1
17553: ARRAY
17554: PPUSH
17555: LD_VAR 0 3
17559: PPUSH
17560: CALL_OW 259
17564: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17565: LD_VAR 0 6
17569: PUSH
17570: LD_INT 1
17572: ARRAY
17573: PPUSH
17574: LD_VAR 0 2
17578: PPUSH
17579: LD_VAR 0 5
17583: PPUSH
17584: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17588: LD_VAR 0 6
17592: PUSH
17593: LD_INT 1
17595: ARRAY
17596: PPUSH
17597: LD_VAR 0 3
17601: PPUSH
17602: LD_VAR 0 4
17606: PPUSH
17607: CALL_OW 237
// end ;
17611: PPOPN 6
17613: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17614: LD_EXP 37
17618: PUSH
17619: LD_EXP 84
17623: AND
17624: IFFALSE 17703
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 22
17639: PUSH
17640: LD_OWVAR 2
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 30
17651: PUSH
17652: LD_INT 3
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PPUSH
17663: CALL_OW 69
17667: ST_TO_ADDR
// if not tmp then
17668: LD_VAR 0 1
17672: NOT
17673: IFFALSE 17677
// exit ;
17675: GO 17703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17677: LD_VAR 0 1
17681: PUSH
17682: LD_INT 1
17684: PPUSH
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 12
17694: ARRAY
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: CALL_OW 234
// end ;
17703: PPOPN 1
17705: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17706: LD_EXP 37
17710: PUSH
17711: LD_EXP 85
17715: AND
17716: IFFALSE 17828
17718: GO 17720
17720: DISABLE
17721: LD_INT 0
17723: PPUSH
17724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17725: LD_ADDR_VAR 0 2
17729: PUSH
17730: LD_INT 22
17732: PUSH
17733: LD_OWVAR 2
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: LD_INT 30
17747: PUSH
17748: LD_INT 27
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 30
17757: PUSH
17758: LD_INT 26
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 30
17767: PUSH
17768: LD_INT 28
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PPUSH
17785: CALL_OW 69
17789: ST_TO_ADDR
// if not tmp then
17790: LD_VAR 0 2
17794: NOT
17795: IFFALSE 17799
// exit ;
17797: GO 17828
// for i in tmp do
17799: LD_ADDR_VAR 0 1
17803: PUSH
17804: LD_VAR 0 2
17808: PUSH
17809: FOR_IN
17810: IFFALSE 17826
// SetLives ( i , 1 ) ;
17812: LD_VAR 0 1
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: CALL_OW 234
17824: GO 17809
17826: POP
17827: POP
// end ;
17828: PPOPN 2
17830: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17831: LD_EXP 37
17835: PUSH
17836: LD_EXP 86
17840: AND
17841: IFFALSE 18128
17843: GO 17845
17845: DISABLE
17846: LD_INT 0
17848: PPUSH
17849: PPUSH
17850: PPUSH
// begin i := rand ( 1 , 7 ) ;
17851: LD_ADDR_VAR 0 1
17855: PUSH
17856: LD_INT 1
17858: PPUSH
17859: LD_INT 7
17861: PPUSH
17862: CALL_OW 12
17866: ST_TO_ADDR
// case i of 1 :
17867: LD_VAR 0 1
17871: PUSH
17872: LD_INT 1
17874: DOUBLE
17875: EQUAL
17876: IFTRUE 17880
17878: GO 17890
17880: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17881: LD_STRING earthquake(getX(game), 0, 32)
17883: PPUSH
17884: CALL_OW 559
17888: GO 18128
17890: LD_INT 2
17892: DOUBLE
17893: EQUAL
17894: IFTRUE 17898
17896: GO 17912
17898: POP
// begin ToLua ( displayStucuk(); ) ;
17899: LD_STRING displayStucuk();
17901: PPUSH
17902: CALL_OW 559
// ResetFog ;
17906: CALL_OW 335
// end ; 3 :
17910: GO 18128
17912: LD_INT 3
17914: DOUBLE
17915: EQUAL
17916: IFTRUE 17920
17918: GO 18024
17920: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17921: LD_ADDR_VAR 0 2
17925: PUSH
17926: LD_INT 22
17928: PUSH
17929: LD_OWVAR 2
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 25
17940: PUSH
17941: LD_INT 1
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PPUSH
17952: CALL_OW 69
17956: ST_TO_ADDR
// if not tmp then
17957: LD_VAR 0 2
17961: NOT
17962: IFFALSE 17966
// exit ;
17964: GO 18128
// un := tmp [ rand ( 1 , tmp ) ] ;
17966: LD_ADDR_VAR 0 3
17970: PUSH
17971: LD_VAR 0 2
17975: PUSH
17976: LD_INT 1
17978: PPUSH
17979: LD_VAR 0 2
17983: PPUSH
17984: CALL_OW 12
17988: ARRAY
17989: ST_TO_ADDR
// if Crawls ( un ) then
17990: LD_VAR 0 3
17994: PPUSH
17995: CALL_OW 318
17999: IFFALSE 18010
// ComWalk ( un ) ;
18001: LD_VAR 0 3
18005: PPUSH
18006: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18010: LD_VAR 0 3
18014: PPUSH
18015: LD_INT 8
18017: PPUSH
18018: CALL_OW 336
// end ; 4 :
18022: GO 18128
18024: LD_INT 4
18026: DOUBLE
18027: EQUAL
18028: IFTRUE 18032
18030: GO 18106
18032: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18033: LD_ADDR_VAR 0 2
18037: PUSH
18038: LD_INT 22
18040: PUSH
18041: LD_OWVAR 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 30
18052: PUSH
18053: LD_INT 29
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PPUSH
18064: CALL_OW 69
18068: ST_TO_ADDR
// if not tmp then
18069: LD_VAR 0 2
18073: NOT
18074: IFFALSE 18078
// exit ;
18076: GO 18128
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18078: LD_VAR 0 2
18082: PUSH
18083: LD_INT 1
18085: ARRAY
18086: PPUSH
18087: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18091: LD_VAR 0 2
18095: PUSH
18096: LD_INT 1
18098: ARRAY
18099: PPUSH
18100: CALL_OW 65
// end ; 5 .. 7 :
18104: GO 18128
18106: LD_INT 5
18108: DOUBLE
18109: GREATEREQUAL
18110: IFFALSE 18118
18112: LD_INT 7
18114: DOUBLE
18115: LESSEQUAL
18116: IFTRUE 18120
18118: GO 18127
18120: POP
// StreamSibBomb ; end ;
18121: CALL 14365 0 0
18125: GO 18128
18127: POP
// end ;
18128: PPOPN 3
18130: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18131: LD_EXP 37
18135: PUSH
18136: LD_EXP 87
18140: AND
18141: IFFALSE 18297
18143: GO 18145
18145: DISABLE
18146: LD_INT 0
18148: PPUSH
18149: PPUSH
18150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18151: LD_ADDR_VAR 0 2
18155: PUSH
18156: LD_INT 81
18158: PUSH
18159: LD_OWVAR 2
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: LD_INT 21
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 21
18183: PUSH
18184: LD_INT 2
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PPUSH
18200: CALL_OW 69
18204: ST_TO_ADDR
// if not tmp then
18205: LD_VAR 0 2
18209: NOT
18210: IFFALSE 18214
// exit ;
18212: GO 18297
// p := 0 ;
18214: LD_ADDR_VAR 0 3
18218: PUSH
18219: LD_INT 0
18221: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18222: LD_INT 35
18224: PPUSH
18225: CALL_OW 67
// p := p + 1 ;
18229: LD_ADDR_VAR 0 3
18233: PUSH
18234: LD_VAR 0 3
18238: PUSH
18239: LD_INT 1
18241: PLUS
18242: ST_TO_ADDR
// for i in tmp do
18243: LD_ADDR_VAR 0 1
18247: PUSH
18248: LD_VAR 0 2
18252: PUSH
18253: FOR_IN
18254: IFFALSE 18285
// if GetLives ( i ) < 1000 then
18256: LD_VAR 0 1
18260: PPUSH
18261: CALL_OW 256
18265: PUSH
18266: LD_INT 1000
18268: LESS
18269: IFFALSE 18283
// SetLives ( i , 1000 ) ;
18271: LD_VAR 0 1
18275: PPUSH
18276: LD_INT 1000
18278: PPUSH
18279: CALL_OW 234
18283: GO 18253
18285: POP
18286: POP
// until p > 20 ;
18287: LD_VAR 0 3
18291: PUSH
18292: LD_INT 20
18294: GREATER
18295: IFFALSE 18222
// end ;
18297: PPOPN 3
18299: END
// every 0 0$1 trigger StreamModeActive and sTime do
18300: LD_EXP 37
18304: PUSH
18305: LD_EXP 88
18309: AND
18310: IFFALSE 18345
18312: GO 18314
18314: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18315: LD_INT 28
18317: PPUSH
18318: LD_OWVAR 2
18322: PPUSH
18323: LD_INT 2
18325: PPUSH
18326: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18330: LD_INT 30
18332: PPUSH
18333: LD_OWVAR 2
18337: PPUSH
18338: LD_INT 2
18340: PPUSH
18341: CALL_OW 322
// end ;
18345: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18346: LD_EXP 37
18350: PUSH
18351: LD_EXP 89
18355: AND
18356: IFFALSE 18477
18358: GO 18360
18360: DISABLE
18361: LD_INT 0
18363: PPUSH
18364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18365: LD_ADDR_VAR 0 2
18369: PUSH
18370: LD_INT 22
18372: PUSH
18373: LD_OWVAR 2
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 21
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 3
18394: PUSH
18395: LD_INT 23
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: LIST
18413: PPUSH
18414: CALL_OW 69
18418: ST_TO_ADDR
// if not tmp then
18419: LD_VAR 0 2
18423: NOT
18424: IFFALSE 18428
// exit ;
18426: GO 18477
// for i in tmp do
18428: LD_ADDR_VAR 0 1
18432: PUSH
18433: LD_VAR 0 2
18437: PUSH
18438: FOR_IN
18439: IFFALSE 18475
// begin if Crawls ( i ) then
18441: LD_VAR 0 1
18445: PPUSH
18446: CALL_OW 318
18450: IFFALSE 18461
// ComWalk ( i ) ;
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 138
// SetClass ( i , 2 ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 2
18468: PPUSH
18469: CALL_OW 336
// end ;
18473: GO 18438
18475: POP
18476: POP
// end ;
18477: PPOPN 2
18479: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18480: LD_EXP 37
18484: PUSH
18485: LD_EXP 90
18489: AND
18490: IFFALSE 18778
18492: GO 18494
18494: DISABLE
18495: LD_INT 0
18497: PPUSH
18498: PPUSH
18499: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18500: LD_OWVAR 2
18504: PPUSH
18505: LD_INT 9
18507: PPUSH
18508: LD_INT 1
18510: PPUSH
18511: LD_INT 1
18513: PPUSH
18514: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18518: LD_INT 9
18520: PPUSH
18521: LD_OWVAR 2
18525: PPUSH
18526: CALL_OW 343
// uc_side := 9 ;
18530: LD_ADDR_OWVAR 20
18534: PUSH
18535: LD_INT 9
18537: ST_TO_ADDR
// uc_nation := 2 ;
18538: LD_ADDR_OWVAR 21
18542: PUSH
18543: LD_INT 2
18545: ST_TO_ADDR
// hc_name := Dark Warrior ;
18546: LD_ADDR_OWVAR 26
18550: PUSH
18551: LD_STRING Dark Warrior
18553: ST_TO_ADDR
// hc_gallery :=  ;
18554: LD_ADDR_OWVAR 33
18558: PUSH
18559: LD_STRING 
18561: ST_TO_ADDR
// hc_noskilllimit := true ;
18562: LD_ADDR_OWVAR 76
18566: PUSH
18567: LD_INT 1
18569: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18570: LD_ADDR_OWVAR 31
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: LD_INT 30
18580: PUSH
18581: LD_INT 30
18583: PUSH
18584: LD_INT 30
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: ST_TO_ADDR
// un := CreateHuman ;
18593: LD_ADDR_VAR 0 3
18597: PUSH
18598: CALL_OW 44
18602: ST_TO_ADDR
// hc_noskilllimit := false ;
18603: LD_ADDR_OWVAR 76
18607: PUSH
18608: LD_INT 0
18610: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18611: LD_VAR 0 3
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: CALL_OW 51
// ToLua ( playRanger() ) ;
18623: LD_STRING playRanger()
18625: PPUSH
18626: CALL_OW 559
// p := 0 ;
18630: LD_ADDR_VAR 0 2
18634: PUSH
18635: LD_INT 0
18637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18638: LD_INT 35
18640: PPUSH
18641: CALL_OW 67
// p := p + 1 ;
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_VAR 0 2
18654: PUSH
18655: LD_INT 1
18657: PLUS
18658: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18659: LD_VAR 0 3
18663: PPUSH
18664: CALL_OW 256
18668: PUSH
18669: LD_INT 1000
18671: LESS
18672: IFFALSE 18686
// SetLives ( un , 1000 ) ;
18674: LD_VAR 0 3
18678: PPUSH
18679: LD_INT 1000
18681: PPUSH
18682: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18686: LD_VAR 0 3
18690: PPUSH
18691: LD_INT 81
18693: PUSH
18694: LD_OWVAR 2
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 91
18705: PUSH
18706: LD_VAR 0 3
18710: PUSH
18711: LD_INT 30
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PPUSH
18723: CALL_OW 69
18727: PPUSH
18728: LD_VAR 0 3
18732: PPUSH
18733: CALL_OW 74
18737: PPUSH
18738: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18742: LD_VAR 0 2
18746: PUSH
18747: LD_INT 80
18749: GREATER
18750: PUSH
18751: LD_VAR 0 3
18755: PPUSH
18756: CALL_OW 301
18760: OR
18761: IFFALSE 18638
// if un then
18763: LD_VAR 0 3
18767: IFFALSE 18778
// RemoveUnit ( un ) ;
18769: LD_VAR 0 3
18773: PPUSH
18774: CALL_OW 64
// end ;
18778: PPOPN 3
18780: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18781: LD_EXP 91
18785: IFFALSE 18901
18787: GO 18789
18789: DISABLE
18790: LD_INT 0
18792: PPUSH
18793: PPUSH
18794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18795: LD_ADDR_VAR 0 2
18799: PUSH
18800: LD_INT 81
18802: PUSH
18803: LD_OWVAR 2
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 21
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PPUSH
18826: CALL_OW 69
18830: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18831: LD_STRING playComputer()
18833: PPUSH
18834: CALL_OW 559
// if not tmp then
18838: LD_VAR 0 2
18842: NOT
18843: IFFALSE 18847
// exit ;
18845: GO 18901
// for i in tmp do
18847: LD_ADDR_VAR 0 1
18851: PUSH
18852: LD_VAR 0 2
18856: PUSH
18857: FOR_IN
18858: IFFALSE 18899
// for j := 1 to 4 do
18860: LD_ADDR_VAR 0 3
18864: PUSH
18865: DOUBLE
18866: LD_INT 1
18868: DEC
18869: ST_TO_ADDR
18870: LD_INT 4
18872: PUSH
18873: FOR_TO
18874: IFFALSE 18895
// SetSkill ( i , j , 10 ) ;
18876: LD_VAR 0 1
18880: PPUSH
18881: LD_VAR 0 3
18885: PPUSH
18886: LD_INT 10
18888: PPUSH
18889: CALL_OW 237
18893: GO 18873
18895: POP
18896: POP
18897: GO 18857
18899: POP
18900: POP
// end ;
18901: PPOPN 3
18903: END
// every 0 0$1 trigger s30 do var i , tmp ;
18904: LD_EXP 92
18908: IFFALSE 18977
18910: GO 18912
18912: DISABLE
18913: LD_INT 0
18915: PPUSH
18916: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18917: LD_ADDR_VAR 0 2
18921: PUSH
18922: LD_INT 22
18924: PUSH
18925: LD_OWVAR 2
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PPUSH
18934: CALL_OW 69
18938: ST_TO_ADDR
// if not tmp then
18939: LD_VAR 0 2
18943: NOT
18944: IFFALSE 18948
// exit ;
18946: GO 18977
// for i in tmp do
18948: LD_ADDR_VAR 0 1
18952: PUSH
18953: LD_VAR 0 2
18957: PUSH
18958: FOR_IN
18959: IFFALSE 18975
// SetLives ( i , 300 ) ;
18961: LD_VAR 0 1
18965: PPUSH
18966: LD_INT 300
18968: PPUSH
18969: CALL_OW 234
18973: GO 18958
18975: POP
18976: POP
// end ;
18977: PPOPN 2
18979: END
// every 0 0$1 trigger s60 do var i , tmp ;
18980: LD_EXP 93
18984: IFFALSE 19053
18986: GO 18988
18988: DISABLE
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18993: LD_ADDR_VAR 0 2
18997: PUSH
18998: LD_INT 22
19000: PUSH
19001: LD_OWVAR 2
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PPUSH
19010: CALL_OW 69
19014: ST_TO_ADDR
// if not tmp then
19015: LD_VAR 0 2
19019: NOT
19020: IFFALSE 19024
// exit ;
19022: GO 19053
// for i in tmp do
19024: LD_ADDR_VAR 0 1
19028: PUSH
19029: LD_VAR 0 2
19033: PUSH
19034: FOR_IN
19035: IFFALSE 19051
// SetLives ( i , 600 ) ;
19037: LD_VAR 0 1
19041: PPUSH
19042: LD_INT 600
19044: PPUSH
19045: CALL_OW 234
19049: GO 19034
19051: POP
19052: POP
// end ;
19053: PPOPN 2
19055: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19056: LD_INT 0
19058: PPUSH
// case cmd of 301 :
19059: LD_VAR 0 1
19063: PUSH
19064: LD_INT 301
19066: DOUBLE
19067: EQUAL
19068: IFTRUE 19072
19070: GO 19104
19072: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19073: LD_VAR 0 6
19077: PPUSH
19078: LD_VAR 0 7
19082: PPUSH
19083: LD_VAR 0 8
19087: PPUSH
19088: LD_VAR 0 4
19092: PPUSH
19093: LD_VAR 0 5
19097: PPUSH
19098: CALL 20305 0 5
19102: GO 19225
19104: LD_INT 302
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19149
19112: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19113: LD_VAR 0 6
19117: PPUSH
19118: LD_VAR 0 7
19122: PPUSH
19123: LD_VAR 0 8
19127: PPUSH
19128: LD_VAR 0 9
19132: PPUSH
19133: LD_VAR 0 4
19137: PPUSH
19138: LD_VAR 0 5
19142: PPUSH
19143: CALL 20396 0 6
19147: GO 19225
19149: LD_INT 303
19151: DOUBLE
19152: EQUAL
19153: IFTRUE 19157
19155: GO 19194
19157: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19158: LD_VAR 0 6
19162: PPUSH
19163: LD_VAR 0 7
19167: PPUSH
19168: LD_VAR 0 8
19172: PPUSH
19173: LD_VAR 0 9
19177: PPUSH
19178: LD_VAR 0 4
19182: PPUSH
19183: LD_VAR 0 5
19187: PPUSH
19188: CALL 19230 0 6
19192: GO 19225
19194: LD_INT 304
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19224
19202: POP
// hHackTeleport ( unit , x , y ) ; end ;
19203: LD_VAR 0 2
19207: PPUSH
19208: LD_VAR 0 4
19212: PPUSH
19213: LD_VAR 0 5
19217: PPUSH
19218: CALL 20989 0 3
19222: GO 19225
19224: POP
// end ;
19225: LD_VAR 0 12
19229: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19230: LD_INT 0
19232: PPUSH
19233: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19234: LD_VAR 0 1
19238: PUSH
19239: LD_INT 1
19241: LESS
19242: PUSH
19243: LD_VAR 0 1
19247: PUSH
19248: LD_INT 3
19250: GREATER
19251: OR
19252: PUSH
19253: LD_VAR 0 5
19257: PPUSH
19258: LD_VAR 0 6
19262: PPUSH
19263: CALL_OW 428
19267: OR
19268: IFFALSE 19272
// exit ;
19270: GO 19992
// uc_side := your_side ;
19272: LD_ADDR_OWVAR 20
19276: PUSH
19277: LD_OWVAR 2
19281: ST_TO_ADDR
// uc_nation := nation ;
19282: LD_ADDR_OWVAR 21
19286: PUSH
19287: LD_VAR 0 1
19291: ST_TO_ADDR
// bc_level = 1 ;
19292: LD_ADDR_OWVAR 43
19296: PUSH
19297: LD_INT 1
19299: ST_TO_ADDR
// case btype of 1 :
19300: LD_VAR 0 2
19304: PUSH
19305: LD_INT 1
19307: DOUBLE
19308: EQUAL
19309: IFTRUE 19313
19311: GO 19324
19313: POP
// bc_type := b_depot ; 2 :
19314: LD_ADDR_OWVAR 42
19318: PUSH
19319: LD_INT 0
19321: ST_TO_ADDR
19322: GO 19936
19324: LD_INT 2
19326: DOUBLE
19327: EQUAL
19328: IFTRUE 19332
19330: GO 19343
19332: POP
// bc_type := b_warehouse ; 3 :
19333: LD_ADDR_OWVAR 42
19337: PUSH
19338: LD_INT 1
19340: ST_TO_ADDR
19341: GO 19936
19343: LD_INT 3
19345: DOUBLE
19346: EQUAL
19347: IFTRUE 19351
19349: GO 19362
19351: POP
// bc_type := b_lab ; 4 .. 9 :
19352: LD_ADDR_OWVAR 42
19356: PUSH
19357: LD_INT 6
19359: ST_TO_ADDR
19360: GO 19936
19362: LD_INT 4
19364: DOUBLE
19365: GREATEREQUAL
19366: IFFALSE 19374
19368: LD_INT 9
19370: DOUBLE
19371: LESSEQUAL
19372: IFTRUE 19376
19374: GO 19428
19376: POP
// begin bc_type := b_lab_half ;
19377: LD_ADDR_OWVAR 42
19381: PUSH
19382: LD_INT 7
19384: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19385: LD_ADDR_OWVAR 44
19389: PUSH
19390: LD_INT 10
19392: PUSH
19393: LD_INT 11
19395: PUSH
19396: LD_INT 12
19398: PUSH
19399: LD_INT 15
19401: PUSH
19402: LD_INT 14
19404: PUSH
19405: LD_INT 13
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: PUSH
19416: LD_VAR 0 2
19420: PUSH
19421: LD_INT 3
19423: MINUS
19424: ARRAY
19425: ST_TO_ADDR
// end ; 10 .. 13 :
19426: GO 19936
19428: LD_INT 10
19430: DOUBLE
19431: GREATEREQUAL
19432: IFFALSE 19440
19434: LD_INT 13
19436: DOUBLE
19437: LESSEQUAL
19438: IFTRUE 19442
19440: GO 19519
19442: POP
// begin bc_type := b_lab_full ;
19443: LD_ADDR_OWVAR 42
19447: PUSH
19448: LD_INT 8
19450: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19451: LD_ADDR_OWVAR 44
19455: PUSH
19456: LD_INT 10
19458: PUSH
19459: LD_INT 12
19461: PUSH
19462: LD_INT 14
19464: PUSH
19465: LD_INT 13
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: PUSH
19474: LD_VAR 0 2
19478: PUSH
19479: LD_INT 9
19481: MINUS
19482: ARRAY
19483: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19484: LD_ADDR_OWVAR 45
19488: PUSH
19489: LD_INT 11
19491: PUSH
19492: LD_INT 15
19494: PUSH
19495: LD_INT 12
19497: PUSH
19498: LD_INT 15
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: PUSH
19507: LD_VAR 0 2
19511: PUSH
19512: LD_INT 9
19514: MINUS
19515: ARRAY
19516: ST_TO_ADDR
// end ; 14 :
19517: GO 19936
19519: LD_INT 14
19521: DOUBLE
19522: EQUAL
19523: IFTRUE 19527
19525: GO 19538
19527: POP
// bc_type := b_workshop ; 15 :
19528: LD_ADDR_OWVAR 42
19532: PUSH
19533: LD_INT 2
19535: ST_TO_ADDR
19536: GO 19936
19538: LD_INT 15
19540: DOUBLE
19541: EQUAL
19542: IFTRUE 19546
19544: GO 19557
19546: POP
// bc_type := b_factory ; 16 :
19547: LD_ADDR_OWVAR 42
19551: PUSH
19552: LD_INT 3
19554: ST_TO_ADDR
19555: GO 19936
19557: LD_INT 16
19559: DOUBLE
19560: EQUAL
19561: IFTRUE 19565
19563: GO 19576
19565: POP
// bc_type := b_ext_gun ; 17 :
19566: LD_ADDR_OWVAR 42
19570: PUSH
19571: LD_INT 17
19573: ST_TO_ADDR
19574: GO 19936
19576: LD_INT 17
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19612
19584: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19585: LD_ADDR_OWVAR 42
19589: PUSH
19590: LD_INT 19
19592: PUSH
19593: LD_INT 23
19595: PUSH
19596: LD_INT 19
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: LIST
19603: PUSH
19604: LD_VAR 0 1
19608: ARRAY
19609: ST_TO_ADDR
19610: GO 19936
19612: LD_INT 18
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19631
19620: POP
// bc_type := b_ext_radar ; 19 :
19621: LD_ADDR_OWVAR 42
19625: PUSH
19626: LD_INT 20
19628: ST_TO_ADDR
19629: GO 19936
19631: LD_INT 19
19633: DOUBLE
19634: EQUAL
19635: IFTRUE 19639
19637: GO 19650
19639: POP
// bc_type := b_ext_radio ; 20 :
19640: LD_ADDR_OWVAR 42
19644: PUSH
19645: LD_INT 22
19647: ST_TO_ADDR
19648: GO 19936
19650: LD_INT 20
19652: DOUBLE
19653: EQUAL
19654: IFTRUE 19658
19656: GO 19669
19658: POP
// bc_type := b_ext_siberium ; 21 :
19659: LD_ADDR_OWVAR 42
19663: PUSH
19664: LD_INT 21
19666: ST_TO_ADDR
19667: GO 19936
19669: LD_INT 21
19671: DOUBLE
19672: EQUAL
19673: IFTRUE 19677
19675: GO 19688
19677: POP
// bc_type := b_ext_computer ; 22 :
19678: LD_ADDR_OWVAR 42
19682: PUSH
19683: LD_INT 24
19685: ST_TO_ADDR
19686: GO 19936
19688: LD_INT 22
19690: DOUBLE
19691: EQUAL
19692: IFTRUE 19696
19694: GO 19707
19696: POP
// bc_type := b_ext_track ; 23 :
19697: LD_ADDR_OWVAR 42
19701: PUSH
19702: LD_INT 16
19704: ST_TO_ADDR
19705: GO 19936
19707: LD_INT 23
19709: DOUBLE
19710: EQUAL
19711: IFTRUE 19715
19713: GO 19726
19715: POP
// bc_type := b_ext_laser ; 24 :
19716: LD_ADDR_OWVAR 42
19720: PUSH
19721: LD_INT 25
19723: ST_TO_ADDR
19724: GO 19936
19726: LD_INT 24
19728: DOUBLE
19729: EQUAL
19730: IFTRUE 19734
19732: GO 19745
19734: POP
// bc_type := b_control_tower ; 25 :
19735: LD_ADDR_OWVAR 42
19739: PUSH
19740: LD_INT 36
19742: ST_TO_ADDR
19743: GO 19936
19745: LD_INT 25
19747: DOUBLE
19748: EQUAL
19749: IFTRUE 19753
19751: GO 19764
19753: POP
// bc_type := b_breastwork ; 26 :
19754: LD_ADDR_OWVAR 42
19758: PUSH
19759: LD_INT 31
19761: ST_TO_ADDR
19762: GO 19936
19764: LD_INT 26
19766: DOUBLE
19767: EQUAL
19768: IFTRUE 19772
19770: GO 19783
19772: POP
// bc_type := b_bunker ; 27 :
19773: LD_ADDR_OWVAR 42
19777: PUSH
19778: LD_INT 32
19780: ST_TO_ADDR
19781: GO 19936
19783: LD_INT 27
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19802
19791: POP
// bc_type := b_turret ; 28 :
19792: LD_ADDR_OWVAR 42
19796: PUSH
19797: LD_INT 33
19799: ST_TO_ADDR
19800: GO 19936
19802: LD_INT 28
19804: DOUBLE
19805: EQUAL
19806: IFTRUE 19810
19808: GO 19821
19810: POP
// bc_type := b_armoury ; 29 :
19811: LD_ADDR_OWVAR 42
19815: PUSH
19816: LD_INT 4
19818: ST_TO_ADDR
19819: GO 19936
19821: LD_INT 29
19823: DOUBLE
19824: EQUAL
19825: IFTRUE 19829
19827: GO 19840
19829: POP
// bc_type := b_barracks ; 30 :
19830: LD_ADDR_OWVAR 42
19834: PUSH
19835: LD_INT 5
19837: ST_TO_ADDR
19838: GO 19936
19840: LD_INT 30
19842: DOUBLE
19843: EQUAL
19844: IFTRUE 19848
19846: GO 19859
19848: POP
// bc_type := b_solar_power ; 31 :
19849: LD_ADDR_OWVAR 42
19853: PUSH
19854: LD_INT 27
19856: ST_TO_ADDR
19857: GO 19936
19859: LD_INT 31
19861: DOUBLE
19862: EQUAL
19863: IFTRUE 19867
19865: GO 19878
19867: POP
// bc_type := b_oil_power ; 32 :
19868: LD_ADDR_OWVAR 42
19872: PUSH
19873: LD_INT 26
19875: ST_TO_ADDR
19876: GO 19936
19878: LD_INT 32
19880: DOUBLE
19881: EQUAL
19882: IFTRUE 19886
19884: GO 19897
19886: POP
// bc_type := b_siberite_power ; 33 :
19887: LD_ADDR_OWVAR 42
19891: PUSH
19892: LD_INT 28
19894: ST_TO_ADDR
19895: GO 19936
19897: LD_INT 33
19899: DOUBLE
19900: EQUAL
19901: IFTRUE 19905
19903: GO 19916
19905: POP
// bc_type := b_oil_mine ; 34 :
19906: LD_ADDR_OWVAR 42
19910: PUSH
19911: LD_INT 29
19913: ST_TO_ADDR
19914: GO 19936
19916: LD_INT 34
19918: DOUBLE
19919: EQUAL
19920: IFTRUE 19924
19922: GO 19935
19924: POP
// bc_type := b_siberite_mine ; end ;
19925: LD_ADDR_OWVAR 42
19929: PUSH
19930: LD_INT 30
19932: ST_TO_ADDR
19933: GO 19936
19935: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19936: LD_ADDR_VAR 0 8
19940: PUSH
19941: LD_VAR 0 5
19945: PPUSH
19946: LD_VAR 0 6
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: CALL_OW 47
19960: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19961: LD_OWVAR 42
19965: PUSH
19966: LD_INT 32
19968: PUSH
19969: LD_INT 33
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: IN
19976: IFFALSE 19992
// PlaceWeaponTurret ( b , weapon ) ;
19978: LD_VAR 0 8
19982: PPUSH
19983: LD_VAR 0 4
19987: PPUSH
19988: CALL_OW 431
// end ;
19992: LD_VAR 0 7
19996: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19997: LD_INT 0
19999: PPUSH
20000: PPUSH
20001: PPUSH
20002: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20003: LD_ADDR_VAR 0 4
20007: PUSH
20008: LD_INT 22
20010: PUSH
20011: LD_OWVAR 2
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 2
20022: PUSH
20023: LD_INT 30
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 30
20035: PUSH
20036: LD_INT 1
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PPUSH
20052: CALL_OW 69
20056: ST_TO_ADDR
// if not tmp then
20057: LD_VAR 0 4
20061: NOT
20062: IFFALSE 20066
// exit ;
20064: GO 20125
// for i in tmp do
20066: LD_ADDR_VAR 0 2
20070: PUSH
20071: LD_VAR 0 4
20075: PUSH
20076: FOR_IN
20077: IFFALSE 20123
// for j = 1 to 3 do
20079: LD_ADDR_VAR 0 3
20083: PUSH
20084: DOUBLE
20085: LD_INT 1
20087: DEC
20088: ST_TO_ADDR
20089: LD_INT 3
20091: PUSH
20092: FOR_TO
20093: IFFALSE 20119
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20095: LD_VAR 0 2
20099: PPUSH
20100: CALL_OW 274
20104: PPUSH
20105: LD_VAR 0 3
20109: PPUSH
20110: LD_INT 99999
20112: PPUSH
20113: CALL_OW 277
20117: GO 20092
20119: POP
20120: POP
20121: GO 20076
20123: POP
20124: POP
// end ;
20125: LD_VAR 0 1
20129: RET
// export function hHackSetLevel10 ; var i , j ; begin
20130: LD_INT 0
20132: PPUSH
20133: PPUSH
20134: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20135: LD_ADDR_VAR 0 2
20139: PUSH
20140: LD_INT 21
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PPUSH
20150: CALL_OW 69
20154: PUSH
20155: FOR_IN
20156: IFFALSE 20208
// if IsSelected ( i ) then
20158: LD_VAR 0 2
20162: PPUSH
20163: CALL_OW 306
20167: IFFALSE 20206
// begin for j := 1 to 4 do
20169: LD_ADDR_VAR 0 3
20173: PUSH
20174: DOUBLE
20175: LD_INT 1
20177: DEC
20178: ST_TO_ADDR
20179: LD_INT 4
20181: PUSH
20182: FOR_TO
20183: IFFALSE 20204
// SetSkill ( i , j , 10 ) ;
20185: LD_VAR 0 2
20189: PPUSH
20190: LD_VAR 0 3
20194: PPUSH
20195: LD_INT 10
20197: PPUSH
20198: CALL_OW 237
20202: GO 20182
20204: POP
20205: POP
// end ;
20206: GO 20155
20208: POP
20209: POP
// end ;
20210: LD_VAR 0 1
20214: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20215: LD_INT 0
20217: PPUSH
20218: PPUSH
20219: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20220: LD_ADDR_VAR 0 2
20224: PUSH
20225: LD_INT 22
20227: PUSH
20228: LD_OWVAR 2
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 21
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PPUSH
20251: CALL_OW 69
20255: PUSH
20256: FOR_IN
20257: IFFALSE 20298
// begin for j := 1 to 4 do
20259: LD_ADDR_VAR 0 3
20263: PUSH
20264: DOUBLE
20265: LD_INT 1
20267: DEC
20268: ST_TO_ADDR
20269: LD_INT 4
20271: PUSH
20272: FOR_TO
20273: IFFALSE 20294
// SetSkill ( i , j , 10 ) ;
20275: LD_VAR 0 2
20279: PPUSH
20280: LD_VAR 0 3
20284: PPUSH
20285: LD_INT 10
20287: PPUSH
20288: CALL_OW 237
20292: GO 20272
20294: POP
20295: POP
// end ;
20296: GO 20256
20298: POP
20299: POP
// end ;
20300: LD_VAR 0 1
20304: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20305: LD_INT 0
20307: PPUSH
// uc_side := your_side ;
20308: LD_ADDR_OWVAR 20
20312: PUSH
20313: LD_OWVAR 2
20317: ST_TO_ADDR
// uc_nation := nation ;
20318: LD_ADDR_OWVAR 21
20322: PUSH
20323: LD_VAR 0 1
20327: ST_TO_ADDR
// InitHc ;
20328: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20332: LD_INT 0
20334: PPUSH
20335: LD_VAR 0 2
20339: PPUSH
20340: LD_VAR 0 3
20344: PPUSH
20345: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20349: LD_VAR 0 4
20353: PPUSH
20354: LD_VAR 0 5
20358: PPUSH
20359: CALL_OW 428
20363: PUSH
20364: LD_INT 0
20366: EQUAL
20367: IFFALSE 20391
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20369: CALL_OW 44
20373: PPUSH
20374: LD_VAR 0 4
20378: PPUSH
20379: LD_VAR 0 5
20383: PPUSH
20384: LD_INT 1
20386: PPUSH
20387: CALL_OW 48
// end ;
20391: LD_VAR 0 6
20395: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20396: LD_INT 0
20398: PPUSH
20399: PPUSH
// uc_side := your_side ;
20400: LD_ADDR_OWVAR 20
20404: PUSH
20405: LD_OWVAR 2
20409: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20410: LD_VAR 0 1
20414: PUSH
20415: LD_INT 1
20417: PUSH
20418: LD_INT 2
20420: PUSH
20421: LD_INT 3
20423: PUSH
20424: LD_INT 4
20426: PUSH
20427: LD_INT 5
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: IN
20437: IFFALSE 20449
// uc_nation := nation_american else
20439: LD_ADDR_OWVAR 21
20443: PUSH
20444: LD_INT 1
20446: ST_TO_ADDR
20447: GO 20492
// if chassis in [ 11 , 12 , 13 , 14 ] then
20449: LD_VAR 0 1
20453: PUSH
20454: LD_INT 11
20456: PUSH
20457: LD_INT 12
20459: PUSH
20460: LD_INT 13
20462: PUSH
20463: LD_INT 14
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: IN
20472: IFFALSE 20484
// uc_nation := nation_arabian else
20474: LD_ADDR_OWVAR 21
20478: PUSH
20479: LD_INT 2
20481: ST_TO_ADDR
20482: GO 20492
// uc_nation := nation_russian ;
20484: LD_ADDR_OWVAR 21
20488: PUSH
20489: LD_INT 3
20491: ST_TO_ADDR
// vc_chassis := chassis ;
20492: LD_ADDR_OWVAR 37
20496: PUSH
20497: LD_VAR 0 1
20501: ST_TO_ADDR
// vc_engine := engine ;
20502: LD_ADDR_OWVAR 39
20506: PUSH
20507: LD_VAR 0 2
20511: ST_TO_ADDR
// vc_control := control ;
20512: LD_ADDR_OWVAR 38
20516: PUSH
20517: LD_VAR 0 3
20521: ST_TO_ADDR
// vc_weapon := weapon ;
20522: LD_ADDR_OWVAR 40
20526: PUSH
20527: LD_VAR 0 4
20531: ST_TO_ADDR
// un := CreateVehicle ;
20532: LD_ADDR_VAR 0 8
20536: PUSH
20537: CALL_OW 45
20541: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20542: LD_VAR 0 8
20546: PPUSH
20547: LD_INT 0
20549: PPUSH
20550: LD_INT 5
20552: PPUSH
20553: CALL_OW 12
20557: PPUSH
20558: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20562: LD_VAR 0 8
20566: PPUSH
20567: LD_VAR 0 5
20571: PPUSH
20572: LD_VAR 0 6
20576: PPUSH
20577: LD_INT 1
20579: PPUSH
20580: CALL_OW 48
// end ;
20584: LD_VAR 0 7
20588: RET
// export hInvincible ; every 1 do
20589: GO 20591
20591: DISABLE
// hInvincible := [ ] ;
20592: LD_ADDR_EXP 94
20596: PUSH
20597: EMPTY
20598: ST_TO_ADDR
20599: END
// every 10 do var i ;
20600: GO 20602
20602: DISABLE
20603: LD_INT 0
20605: PPUSH
// begin enable ;
20606: ENABLE
// if not hInvincible then
20607: LD_EXP 94
20611: NOT
20612: IFFALSE 20616
// exit ;
20614: GO 20660
// for i in hInvincible do
20616: LD_ADDR_VAR 0 1
20620: PUSH
20621: LD_EXP 94
20625: PUSH
20626: FOR_IN
20627: IFFALSE 20658
// if GetLives ( i ) < 1000 then
20629: LD_VAR 0 1
20633: PPUSH
20634: CALL_OW 256
20638: PUSH
20639: LD_INT 1000
20641: LESS
20642: IFFALSE 20656
// SetLives ( i , 1000 ) ;
20644: LD_VAR 0 1
20648: PPUSH
20649: LD_INT 1000
20651: PPUSH
20652: CALL_OW 234
20656: GO 20626
20658: POP
20659: POP
// end ;
20660: PPOPN 1
20662: END
// export function hHackInvincible ; var i ; begin
20663: LD_INT 0
20665: PPUSH
20666: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20667: LD_ADDR_VAR 0 2
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: LD_INT 21
20677: PUSH
20678: LD_INT 1
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 21
20687: PUSH
20688: LD_INT 2
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: LIST
20699: PPUSH
20700: CALL_OW 69
20704: PUSH
20705: FOR_IN
20706: IFFALSE 20767
// if IsSelected ( i ) then
20708: LD_VAR 0 2
20712: PPUSH
20713: CALL_OW 306
20717: IFFALSE 20765
// begin if i in hInvincible then
20719: LD_VAR 0 2
20723: PUSH
20724: LD_EXP 94
20728: IN
20729: IFFALSE 20749
// hInvincible := hInvincible diff i else
20731: LD_ADDR_EXP 94
20735: PUSH
20736: LD_EXP 94
20740: PUSH
20741: LD_VAR 0 2
20745: DIFF
20746: ST_TO_ADDR
20747: GO 20765
// hInvincible := hInvincible union i ;
20749: LD_ADDR_EXP 94
20753: PUSH
20754: LD_EXP 94
20758: PUSH
20759: LD_VAR 0 2
20763: UNION
20764: ST_TO_ADDR
// end ;
20765: GO 20705
20767: POP
20768: POP
// end ;
20769: LD_VAR 0 1
20773: RET
// export function hHackInvisible ; var i , j ; begin
20774: LD_INT 0
20776: PPUSH
20777: PPUSH
20778: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20779: LD_ADDR_VAR 0 2
20783: PUSH
20784: LD_INT 21
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PPUSH
20794: CALL_OW 69
20798: PUSH
20799: FOR_IN
20800: IFFALSE 20824
// if IsSelected ( i ) then
20802: LD_VAR 0 2
20806: PPUSH
20807: CALL_OW 306
20811: IFFALSE 20822
// ComForceInvisible ( i ) ;
20813: LD_VAR 0 2
20817: PPUSH
20818: CALL_OW 496
20822: GO 20799
20824: POP
20825: POP
// end ;
20826: LD_VAR 0 1
20830: RET
// export function hHackChangeYourSide ; begin
20831: LD_INT 0
20833: PPUSH
// if your_side = 8 then
20834: LD_OWVAR 2
20838: PUSH
20839: LD_INT 8
20841: EQUAL
20842: IFFALSE 20854
// your_side := 0 else
20844: LD_ADDR_OWVAR 2
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
20852: GO 20868
// your_side := your_side + 1 ;
20854: LD_ADDR_OWVAR 2
20858: PUSH
20859: LD_OWVAR 2
20863: PUSH
20864: LD_INT 1
20866: PLUS
20867: ST_TO_ADDR
// end ;
20868: LD_VAR 0 1
20872: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20873: LD_INT 0
20875: PPUSH
20876: PPUSH
20877: PPUSH
// for i in all_units do
20878: LD_ADDR_VAR 0 2
20882: PUSH
20883: LD_OWVAR 3
20887: PUSH
20888: FOR_IN
20889: IFFALSE 20967
// if IsSelected ( i ) then
20891: LD_VAR 0 2
20895: PPUSH
20896: CALL_OW 306
20900: IFFALSE 20965
// begin j := GetSide ( i ) ;
20902: LD_ADDR_VAR 0 3
20906: PUSH
20907: LD_VAR 0 2
20911: PPUSH
20912: CALL_OW 255
20916: ST_TO_ADDR
// if j = 8 then
20917: LD_VAR 0 3
20921: PUSH
20922: LD_INT 8
20924: EQUAL
20925: IFFALSE 20937
// j := 0 else
20927: LD_ADDR_VAR 0 3
20931: PUSH
20932: LD_INT 0
20934: ST_TO_ADDR
20935: GO 20951
// j := j + 1 ;
20937: LD_ADDR_VAR 0 3
20941: PUSH
20942: LD_VAR 0 3
20946: PUSH
20947: LD_INT 1
20949: PLUS
20950: ST_TO_ADDR
// SetSide ( i , j ) ;
20951: LD_VAR 0 2
20955: PPUSH
20956: LD_VAR 0 3
20960: PPUSH
20961: CALL_OW 235
// end ;
20965: GO 20888
20967: POP
20968: POP
// end ;
20969: LD_VAR 0 1
20973: RET
// export function hHackFog ; begin
20974: LD_INT 0
20976: PPUSH
// FogOff ( true ) ;
20977: LD_INT 1
20979: PPUSH
20980: CALL_OW 344
// end ;
20984: LD_VAR 0 1
20988: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20989: LD_INT 0
20991: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20992: LD_VAR 0 1
20996: PPUSH
20997: LD_VAR 0 2
21001: PPUSH
21002: LD_VAR 0 3
21006: PPUSH
21007: LD_INT 1
21009: PPUSH
21010: LD_INT 1
21012: PPUSH
21013: CALL_OW 483
// CenterOnXY ( x , y ) ;
21017: LD_VAR 0 2
21021: PPUSH
21022: LD_VAR 0 3
21026: PPUSH
21027: CALL_OW 84
// end ; end_of_file
21031: LD_VAR 0 4
21035: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21036: LD_INT 0
21038: PPUSH
21039: PPUSH
21040: PPUSH
21041: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21042: LD_VAR 0 1
21046: PPUSH
21047: CALL_OW 264
21051: PUSH
21052: LD_EXP 22
21056: EQUAL
21057: IFFALSE 21129
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21059: LD_INT 68
21061: PPUSH
21062: LD_VAR 0 1
21066: PPUSH
21067: CALL_OW 255
21071: PPUSH
21072: CALL_OW 321
21076: PUSH
21077: LD_INT 2
21079: EQUAL
21080: IFFALSE 21092
// eff := 70 else
21082: LD_ADDR_VAR 0 4
21086: PUSH
21087: LD_INT 70
21089: ST_TO_ADDR
21090: GO 21100
// eff := 30 ;
21092: LD_ADDR_VAR 0 4
21096: PUSH
21097: LD_INT 30
21099: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21100: LD_VAR 0 1
21104: PPUSH
21105: CALL_OW 250
21109: PPUSH
21110: LD_VAR 0 1
21114: PPUSH
21115: CALL_OW 251
21119: PPUSH
21120: LD_VAR 0 4
21124: PPUSH
21125: CALL_OW 495
// end ; end ;
21129: LD_VAR 0 2
21133: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21134: LD_INT 0
21136: PPUSH
// end ;
21137: LD_VAR 0 4
21141: RET
// export function SOS_Command ( cmd ) ; begin
21142: LD_INT 0
21144: PPUSH
// end ;
21145: LD_VAR 0 2
21149: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21150: LD_INT 0
21152: PPUSH
// end ;
21153: LD_VAR 0 6
21157: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21158: LD_INT 0
21160: PPUSH
21161: PPUSH
// if not vehicle or not factory then
21162: LD_VAR 0 1
21166: NOT
21167: PUSH
21168: LD_VAR 0 2
21172: NOT
21173: OR
21174: IFFALSE 21178
// exit ;
21176: GO 21409
// if factoryWaypoints >= factory then
21178: LD_EXP 95
21182: PUSH
21183: LD_VAR 0 2
21187: GREATEREQUAL
21188: IFFALSE 21409
// if factoryWaypoints [ factory ] then
21190: LD_EXP 95
21194: PUSH
21195: LD_VAR 0 2
21199: ARRAY
21200: IFFALSE 21409
// begin if GetControl ( vehicle ) = control_manual then
21202: LD_VAR 0 1
21206: PPUSH
21207: CALL_OW 263
21211: PUSH
21212: LD_INT 1
21214: EQUAL
21215: IFFALSE 21296
// begin driver := IsDrivenBy ( vehicle ) ;
21217: LD_ADDR_VAR 0 4
21221: PUSH
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 311
21231: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
21232: LD_VAR 0 4
21236: PPUSH
21237: LD_EXP 95
21241: PUSH
21242: LD_VAR 0 2
21246: ARRAY
21247: PUSH
21248: LD_INT 1
21250: ARRAY
21251: PPUSH
21252: LD_EXP 95
21256: PUSH
21257: LD_VAR 0 2
21261: ARRAY
21262: PUSH
21263: LD_INT 2
21265: ARRAY
21266: PPUSH
21267: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21271: LD_VAR 0 4
21275: PPUSH
21276: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21280: LD_VAR 0 4
21284: PPUSH
21285: LD_VAR 0 2
21289: PPUSH
21290: CALL_OW 180
// end else
21294: GO 21409
// if GetControl ( vehicle ) = control_remote then
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 263
21305: PUSH
21306: LD_INT 2
21308: EQUAL
21309: IFFALSE 21370
// begin wait ( 0 0$2 ) ;
21311: LD_INT 70
21313: PPUSH
21314: CALL_OW 67
// if Connect ( vehicle ) then
21318: LD_VAR 0 1
21322: PPUSH
21323: CALL 33511 0 1
21327: IFFALSE 21368
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
21329: LD_VAR 0 1
21333: PPUSH
21334: LD_EXP 95
21338: PUSH
21339: LD_VAR 0 2
21343: ARRAY
21344: PUSH
21345: LD_INT 1
21347: ARRAY
21348: PPUSH
21349: LD_EXP 95
21353: PUSH
21354: LD_VAR 0 2
21358: ARRAY
21359: PUSH
21360: LD_INT 2
21362: ARRAY
21363: PPUSH
21364: CALL_OW 171
// end else
21368: GO 21409
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
21370: LD_VAR 0 1
21374: PPUSH
21375: LD_EXP 95
21379: PUSH
21380: LD_VAR 0 2
21384: ARRAY
21385: PUSH
21386: LD_INT 1
21388: ARRAY
21389: PPUSH
21390: LD_EXP 95
21394: PUSH
21395: LD_VAR 0 2
21399: ARRAY
21400: PUSH
21401: LD_INT 2
21403: ARRAY
21404: PPUSH
21405: CALL_OW 171
// end ; end ;
21409: LD_VAR 0 3
21413: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21414: LD_INT 0
21416: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21417: LD_VAR 0 1
21421: PUSH
21422: LD_INT 250
21424: EQUAL
21425: PUSH
21426: LD_VAR 0 2
21430: PPUSH
21431: CALL_OW 264
21435: PUSH
21436: LD_EXP 25
21440: EQUAL
21441: AND
21442: IFFALSE 21463
// MinerPlaceMine ( unit , x , y ) ;
21444: LD_VAR 0 2
21448: PPUSH
21449: LD_VAR 0 4
21453: PPUSH
21454: LD_VAR 0 5
21458: PPUSH
21459: CALL 24069 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21463: LD_VAR 0 1
21467: PUSH
21468: LD_INT 251
21470: EQUAL
21471: PUSH
21472: LD_VAR 0 2
21476: PPUSH
21477: CALL_OW 264
21481: PUSH
21482: LD_EXP 25
21486: EQUAL
21487: AND
21488: IFFALSE 21509
// MinerDetonateMine ( unit , x , y ) ;
21490: LD_VAR 0 2
21494: PPUSH
21495: LD_VAR 0 4
21499: PPUSH
21500: LD_VAR 0 5
21504: PPUSH
21505: CALL 24346 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21509: LD_VAR 0 1
21513: PUSH
21514: LD_INT 252
21516: EQUAL
21517: PUSH
21518: LD_VAR 0 2
21522: PPUSH
21523: CALL_OW 264
21527: PUSH
21528: LD_EXP 25
21532: EQUAL
21533: AND
21534: IFFALSE 21555
// MinerCreateMinefield ( unit , x , y ) ;
21536: LD_VAR 0 2
21540: PPUSH
21541: LD_VAR 0 4
21545: PPUSH
21546: LD_VAR 0 5
21550: PPUSH
21551: CALL 24763 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21555: LD_VAR 0 1
21559: PUSH
21560: LD_INT 253
21562: EQUAL
21563: PUSH
21564: LD_VAR 0 2
21568: PPUSH
21569: CALL_OW 257
21573: PUSH
21574: LD_INT 5
21576: EQUAL
21577: AND
21578: IFFALSE 21599
// ComBinocular ( unit , x , y ) ;
21580: LD_VAR 0 2
21584: PPUSH
21585: LD_VAR 0 4
21589: PPUSH
21590: LD_VAR 0 5
21594: PPUSH
21595: CALL 25134 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21599: LD_VAR 0 1
21603: PUSH
21604: LD_INT 254
21606: EQUAL
21607: PUSH
21608: LD_VAR 0 2
21612: PPUSH
21613: CALL_OW 264
21617: PUSH
21618: LD_EXP 20
21622: EQUAL
21623: AND
21624: PUSH
21625: LD_VAR 0 3
21629: PPUSH
21630: CALL_OW 263
21634: PUSH
21635: LD_INT 3
21637: EQUAL
21638: AND
21639: IFFALSE 21655
// HackDestroyVehicle ( unit , selectedUnit ) ;
21641: LD_VAR 0 2
21645: PPUSH
21646: LD_VAR 0 3
21650: PPUSH
21651: CALL 23429 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21655: LD_VAR 0 1
21659: PUSH
21660: LD_INT 255
21662: EQUAL
21663: PUSH
21664: LD_VAR 0 2
21668: PPUSH
21669: CALL_OW 264
21673: PUSH
21674: LD_INT 14
21676: PUSH
21677: LD_INT 53
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: IN
21684: AND
21685: PUSH
21686: LD_VAR 0 4
21690: PPUSH
21691: LD_VAR 0 5
21695: PPUSH
21696: CALL_OW 488
21700: AND
21701: IFFALSE 21725
// CutTreeXYR ( unit , x , y , 12 ) ;
21703: LD_VAR 0 2
21707: PPUSH
21708: LD_VAR 0 4
21712: PPUSH
21713: LD_VAR 0 5
21717: PPUSH
21718: LD_INT 12
21720: PPUSH
21721: CALL 21995 0 4
// if cmd = 256 then
21725: LD_VAR 0 1
21729: PUSH
21730: LD_INT 256
21732: EQUAL
21733: IFFALSE 21754
// SetFactoryWaypoint ( unit , x , y ) ;
21735: LD_VAR 0 2
21739: PPUSH
21740: LD_VAR 0 4
21744: PPUSH
21745: LD_VAR 0 5
21749: PPUSH
21750: CALL 21759 0 3
// end ;
21754: LD_VAR 0 6
21758: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21759: LD_INT 0
21761: PPUSH
21762: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21763: LD_VAR 0 1
21767: NOT
21768: PUSH
21769: LD_VAR 0 2
21773: PPUSH
21774: LD_VAR 0 3
21778: PPUSH
21779: CALL_OW 488
21783: NOT
21784: OR
21785: PUSH
21786: LD_VAR 0 1
21790: PPUSH
21791: CALL_OW 266
21795: PUSH
21796: LD_INT 3
21798: NONEQUAL
21799: PUSH
21800: LD_VAR 0 1
21804: PPUSH
21805: CALL_OW 247
21809: PUSH
21810: LD_INT 1
21812: EQUAL
21813: NOT
21814: AND
21815: OR
21816: IFFALSE 21820
// exit ;
21818: GO 21990
// if GetType ( factory ) = unit_human then
21820: LD_VAR 0 1
21824: PPUSH
21825: CALL_OW 247
21829: PUSH
21830: LD_INT 1
21832: EQUAL
21833: IFFALSE 21850
// factory := IsInUnit ( factory ) ;
21835: LD_ADDR_VAR 0 1
21839: PUSH
21840: LD_VAR 0 1
21844: PPUSH
21845: CALL_OW 310
21849: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21850: LD_VAR 0 1
21854: PPUSH
21855: CALL_OW 266
21859: PUSH
21860: LD_INT 3
21862: NONEQUAL
21863: IFFALSE 21867
// exit ;
21865: GO 21990
// if HexInfo ( x , y ) = factory then
21867: LD_VAR 0 2
21871: PPUSH
21872: LD_VAR 0 3
21876: PPUSH
21877: CALL_OW 428
21881: PUSH
21882: LD_VAR 0 1
21886: EQUAL
21887: IFFALSE 21914
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21889: LD_ADDR_EXP 95
21893: PUSH
21894: LD_EXP 95
21898: PPUSH
21899: LD_VAR 0 1
21903: PPUSH
21904: LD_INT 0
21906: PPUSH
21907: CALL_OW 1
21911: ST_TO_ADDR
21912: GO 21990
// begin factoryWaypoints := Replace ( factoryWaypoints , factory , [ x , y ] ) ;
21914: LD_ADDR_EXP 95
21918: PUSH
21919: LD_EXP 95
21923: PPUSH
21924: LD_VAR 0 1
21928: PPUSH
21929: LD_VAR 0 2
21933: PUSH
21934: LD_VAR 0 3
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PPUSH
21943: CALL_OW 1
21947: ST_TO_ADDR
// ToLua ( setFactoryWaypointXY( & GetSide ( factory ) & , & x & , & y & ) ) ;
21948: LD_STRING setFactoryWaypointXY(
21950: PUSH
21951: LD_VAR 0 1
21955: PPUSH
21956: CALL_OW 255
21960: STR
21961: PUSH
21962: LD_STRING ,
21964: STR
21965: PUSH
21966: LD_VAR 0 2
21970: STR
21971: PUSH
21972: LD_STRING ,
21974: STR
21975: PUSH
21976: LD_VAR 0 3
21980: STR
21981: PUSH
21982: LD_STRING )
21984: STR
21985: PPUSH
21986: CALL_OW 559
// end ; end ;
21990: LD_VAR 0 4
21994: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21995: LD_INT 0
21997: PPUSH
21998: PPUSH
21999: PPUSH
22000: PPUSH
22001: PPUSH
22002: PPUSH
22003: PPUSH
22004: PPUSH
22005: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22006: LD_VAR 0 1
22010: NOT
22011: PUSH
22012: LD_VAR 0 2
22016: PPUSH
22017: LD_VAR 0 3
22021: PPUSH
22022: CALL_OW 488
22026: NOT
22027: OR
22028: PUSH
22029: LD_VAR 0 4
22033: NOT
22034: OR
22035: IFFALSE 22039
// exit ;
22037: GO 22379
// list := [ ] ;
22039: LD_ADDR_VAR 0 13
22043: PUSH
22044: EMPTY
22045: ST_TO_ADDR
// if x - r < 0 then
22046: LD_VAR 0 2
22050: PUSH
22051: LD_VAR 0 4
22055: MINUS
22056: PUSH
22057: LD_INT 0
22059: LESS
22060: IFFALSE 22072
// min_x := 0 else
22062: LD_ADDR_VAR 0 7
22066: PUSH
22067: LD_INT 0
22069: ST_TO_ADDR
22070: GO 22088
// min_x := x - r ;
22072: LD_ADDR_VAR 0 7
22076: PUSH
22077: LD_VAR 0 2
22081: PUSH
22082: LD_VAR 0 4
22086: MINUS
22087: ST_TO_ADDR
// if y - r < 0 then
22088: LD_VAR 0 3
22092: PUSH
22093: LD_VAR 0 4
22097: MINUS
22098: PUSH
22099: LD_INT 0
22101: LESS
22102: IFFALSE 22114
// min_y := 0 else
22104: LD_ADDR_VAR 0 8
22108: PUSH
22109: LD_INT 0
22111: ST_TO_ADDR
22112: GO 22130
// min_y := y - r ;
22114: LD_ADDR_VAR 0 8
22118: PUSH
22119: LD_VAR 0 3
22123: PUSH
22124: LD_VAR 0 4
22128: MINUS
22129: ST_TO_ADDR
// max_x := x + r ;
22130: LD_ADDR_VAR 0 9
22134: PUSH
22135: LD_VAR 0 2
22139: PUSH
22140: LD_VAR 0 4
22144: PLUS
22145: ST_TO_ADDR
// max_y := y + r ;
22146: LD_ADDR_VAR 0 10
22150: PUSH
22151: LD_VAR 0 3
22155: PUSH
22156: LD_VAR 0 4
22160: PLUS
22161: ST_TO_ADDR
// for _x = min_x to max_x do
22162: LD_ADDR_VAR 0 11
22166: PUSH
22167: DOUBLE
22168: LD_VAR 0 7
22172: DEC
22173: ST_TO_ADDR
22174: LD_VAR 0 9
22178: PUSH
22179: FOR_TO
22180: IFFALSE 22297
// for _y = min_y to max_y do
22182: LD_ADDR_VAR 0 12
22186: PUSH
22187: DOUBLE
22188: LD_VAR 0 8
22192: DEC
22193: ST_TO_ADDR
22194: LD_VAR 0 10
22198: PUSH
22199: FOR_TO
22200: IFFALSE 22293
// begin if not ValidHex ( _x , _y ) then
22202: LD_VAR 0 11
22206: PPUSH
22207: LD_VAR 0 12
22211: PPUSH
22212: CALL_OW 488
22216: NOT
22217: IFFALSE 22221
// continue ;
22219: GO 22199
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22221: LD_VAR 0 11
22225: PPUSH
22226: LD_VAR 0 12
22230: PPUSH
22231: CALL_OW 351
22235: PUSH
22236: LD_VAR 0 11
22240: PPUSH
22241: LD_VAR 0 12
22245: PPUSH
22246: CALL_OW 554
22250: AND
22251: IFFALSE 22291
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22253: LD_ADDR_VAR 0 13
22257: PUSH
22258: LD_VAR 0 13
22262: PPUSH
22263: LD_VAR 0 13
22267: PUSH
22268: LD_INT 1
22270: PLUS
22271: PPUSH
22272: LD_VAR 0 11
22276: PUSH
22277: LD_VAR 0 12
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PPUSH
22286: CALL_OW 2
22290: ST_TO_ADDR
// end ;
22291: GO 22199
22293: POP
22294: POP
22295: GO 22179
22297: POP
22298: POP
// if not list then
22299: LD_VAR 0 13
22303: NOT
22304: IFFALSE 22308
// exit ;
22306: GO 22379
// for i in list do
22308: LD_ADDR_VAR 0 6
22312: PUSH
22313: LD_VAR 0 13
22317: PUSH
22318: FOR_IN
22319: IFFALSE 22377
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22321: LD_VAR 0 1
22325: PPUSH
22326: LD_STRING M
22328: PUSH
22329: LD_VAR 0 6
22333: PUSH
22334: LD_INT 1
22336: ARRAY
22337: PUSH
22338: LD_VAR 0 6
22342: PUSH
22343: LD_INT 2
22345: ARRAY
22346: PUSH
22347: LD_INT 0
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: PUSH
22368: EMPTY
22369: LIST
22370: PPUSH
22371: CALL_OW 447
22375: GO 22318
22377: POP
22378: POP
// end ;
22379: LD_VAR 0 5
22383: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22384: LD_EXP 96
22388: NOT
22389: IFFALSE 22439
22391: GO 22393
22393: DISABLE
// begin initHack := true ;
22394: LD_ADDR_EXP 96
22398: PUSH
22399: LD_INT 1
22401: ST_TO_ADDR
// hackTanks := [ ] ;
22402: LD_ADDR_EXP 97
22406: PUSH
22407: EMPTY
22408: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22409: LD_ADDR_EXP 98
22413: PUSH
22414: EMPTY
22415: ST_TO_ADDR
// hackLimit := 3 ;
22416: LD_ADDR_EXP 99
22420: PUSH
22421: LD_INT 3
22423: ST_TO_ADDR
// hackDist := 12 ;
22424: LD_ADDR_EXP 100
22428: PUSH
22429: LD_INT 12
22431: ST_TO_ADDR
// hackCounter := [ ] ;
22432: LD_ADDR_EXP 101
22436: PUSH
22437: EMPTY
22438: ST_TO_ADDR
// end ;
22439: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22440: LD_EXP 96
22444: PUSH
22445: LD_INT 34
22447: PUSH
22448: LD_EXP 20
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PPUSH
22457: CALL_OW 69
22461: AND
22462: IFFALSE 22717
22464: GO 22466
22466: DISABLE
22467: LD_INT 0
22469: PPUSH
22470: PPUSH
// begin enable ;
22471: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22472: LD_ADDR_VAR 0 1
22476: PUSH
22477: LD_INT 34
22479: PUSH
22480: LD_EXP 20
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PPUSH
22489: CALL_OW 69
22493: PUSH
22494: FOR_IN
22495: IFFALSE 22715
// begin if not i in hackTanks then
22497: LD_VAR 0 1
22501: PUSH
22502: LD_EXP 97
22506: IN
22507: NOT
22508: IFFALSE 22591
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22510: LD_ADDR_EXP 97
22514: PUSH
22515: LD_EXP 97
22519: PPUSH
22520: LD_EXP 97
22524: PUSH
22525: LD_INT 1
22527: PLUS
22528: PPUSH
22529: LD_VAR 0 1
22533: PPUSH
22534: CALL_OW 1
22538: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22539: LD_ADDR_EXP 98
22543: PUSH
22544: LD_EXP 98
22548: PPUSH
22549: LD_EXP 98
22553: PUSH
22554: LD_INT 1
22556: PLUS
22557: PPUSH
22558: EMPTY
22559: PPUSH
22560: CALL_OW 1
22564: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22565: LD_ADDR_EXP 101
22569: PUSH
22570: LD_EXP 101
22574: PPUSH
22575: LD_EXP 101
22579: PUSH
22580: LD_INT 1
22582: PLUS
22583: PPUSH
22584: EMPTY
22585: PPUSH
22586: CALL_OW 1
22590: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22591: LD_VAR 0 1
22595: PPUSH
22596: CALL_OW 302
22600: NOT
22601: IFFALSE 22614
// begin HackUnlinkAll ( i ) ;
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL 22720 0 1
// continue ;
22612: GO 22494
// end ; HackCheckCapturedStatus ( i ) ;
22614: LD_VAR 0 1
22618: PPUSH
22619: CALL 23163 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22623: LD_ADDR_VAR 0 2
22627: PUSH
22628: LD_INT 81
22630: PUSH
22631: LD_VAR 0 1
22635: PPUSH
22636: CALL_OW 255
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 33
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 91
22657: PUSH
22658: LD_VAR 0 1
22662: PUSH
22663: LD_EXP 100
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 50
22675: PUSH
22676: EMPTY
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: PPUSH
22685: CALL_OW 69
22689: ST_TO_ADDR
// if not tmp then
22690: LD_VAR 0 2
22694: NOT
22695: IFFALSE 22699
// continue ;
22697: GO 22494
// HackLink ( i , tmp ) ;
22699: LD_VAR 0 1
22703: PPUSH
22704: LD_VAR 0 2
22708: PPUSH
22709: CALL 22856 0 2
// end ;
22713: GO 22494
22715: POP
22716: POP
// end ;
22717: PPOPN 2
22719: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22720: LD_INT 0
22722: PPUSH
22723: PPUSH
22724: PPUSH
// if not hack in hackTanks then
22725: LD_VAR 0 1
22729: PUSH
22730: LD_EXP 97
22734: IN
22735: NOT
22736: IFFALSE 22740
// exit ;
22738: GO 22851
// index := GetElementIndex ( hackTanks , hack ) ;
22740: LD_ADDR_VAR 0 4
22744: PUSH
22745: LD_EXP 97
22749: PPUSH
22750: LD_VAR 0 1
22754: PPUSH
22755: CALL 30325 0 2
22759: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22760: LD_EXP 98
22764: PUSH
22765: LD_VAR 0 4
22769: ARRAY
22770: IFFALSE 22851
// begin for i in hackTanksCaptured [ index ] do
22772: LD_ADDR_VAR 0 3
22776: PUSH
22777: LD_EXP 98
22781: PUSH
22782: LD_VAR 0 4
22786: ARRAY
22787: PUSH
22788: FOR_IN
22789: IFFALSE 22815
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22791: LD_VAR 0 3
22795: PUSH
22796: LD_INT 1
22798: ARRAY
22799: PPUSH
22800: LD_VAR 0 3
22804: PUSH
22805: LD_INT 2
22807: ARRAY
22808: PPUSH
22809: CALL_OW 235
22813: GO 22788
22815: POP
22816: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22817: LD_ADDR_EXP 98
22821: PUSH
22822: LD_EXP 98
22826: PPUSH
22827: LD_VAR 0 4
22831: PPUSH
22832: EMPTY
22833: PPUSH
22834: CALL_OW 1
22838: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22839: LD_VAR 0 1
22843: PPUSH
22844: LD_INT 0
22846: PPUSH
22847: CALL_OW 505
// end ; end ;
22851: LD_VAR 0 2
22855: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22856: LD_INT 0
22858: PPUSH
22859: PPUSH
22860: PPUSH
// if not hack in hackTanks or not vehicles then
22861: LD_VAR 0 1
22865: PUSH
22866: LD_EXP 97
22870: IN
22871: NOT
22872: PUSH
22873: LD_VAR 0 2
22877: NOT
22878: OR
22879: IFFALSE 22883
// exit ;
22881: GO 23158
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22883: LD_ADDR_VAR 0 2
22887: PUSH
22888: LD_VAR 0 1
22892: PPUSH
22893: LD_VAR 0 2
22897: PPUSH
22898: LD_INT 1
22900: PPUSH
22901: LD_INT 1
22903: PPUSH
22904: CALL 30975 0 4
22908: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22909: LD_ADDR_VAR 0 5
22913: PUSH
22914: LD_EXP 97
22918: PPUSH
22919: LD_VAR 0 1
22923: PPUSH
22924: CALL 30325 0 2
22928: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22929: LD_EXP 98
22933: PUSH
22934: LD_VAR 0 5
22938: ARRAY
22939: PUSH
22940: LD_EXP 99
22944: LESS
22945: IFFALSE 23134
// begin for i := 1 to vehicles do
22947: LD_ADDR_VAR 0 4
22951: PUSH
22952: DOUBLE
22953: LD_INT 1
22955: DEC
22956: ST_TO_ADDR
22957: LD_VAR 0 2
22961: PUSH
22962: FOR_TO
22963: IFFALSE 23132
// begin if hackTanksCaptured [ index ] = hackLimit then
22965: LD_EXP 98
22969: PUSH
22970: LD_VAR 0 5
22974: ARRAY
22975: PUSH
22976: LD_EXP 99
22980: EQUAL
22981: IFFALSE 22985
// break ;
22983: GO 23132
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22985: LD_ADDR_EXP 101
22989: PUSH
22990: LD_EXP 101
22994: PPUSH
22995: LD_VAR 0 5
22999: PPUSH
23000: LD_EXP 101
23004: PUSH
23005: LD_VAR 0 5
23009: ARRAY
23010: PUSH
23011: LD_INT 1
23013: PLUS
23014: PPUSH
23015: CALL_OW 1
23019: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23020: LD_ADDR_EXP 98
23024: PUSH
23025: LD_EXP 98
23029: PPUSH
23030: LD_VAR 0 5
23034: PUSH
23035: LD_EXP 98
23039: PUSH
23040: LD_VAR 0 5
23044: ARRAY
23045: PUSH
23046: LD_INT 1
23048: PLUS
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PPUSH
23054: LD_VAR 0 2
23058: PUSH
23059: LD_VAR 0 4
23063: ARRAY
23064: PUSH
23065: LD_VAR 0 2
23069: PUSH
23070: LD_VAR 0 4
23074: ARRAY
23075: PPUSH
23076: CALL_OW 255
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PPUSH
23085: CALL 30540 0 3
23089: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23090: LD_VAR 0 2
23094: PUSH
23095: LD_VAR 0 4
23099: ARRAY
23100: PPUSH
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL_OW 255
23110: PPUSH
23111: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23115: LD_VAR 0 2
23119: PUSH
23120: LD_VAR 0 4
23124: ARRAY
23125: PPUSH
23126: CALL_OW 141
// end ;
23130: GO 22962
23132: POP
23133: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23134: LD_VAR 0 1
23138: PPUSH
23139: LD_EXP 98
23143: PUSH
23144: LD_VAR 0 5
23148: ARRAY
23149: PUSH
23150: LD_INT 0
23152: PLUS
23153: PPUSH
23154: CALL_OW 505
// end ;
23158: LD_VAR 0 3
23162: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23163: LD_INT 0
23165: PPUSH
23166: PPUSH
23167: PPUSH
23168: PPUSH
// if not hack in hackTanks then
23169: LD_VAR 0 1
23173: PUSH
23174: LD_EXP 97
23178: IN
23179: NOT
23180: IFFALSE 23184
// exit ;
23182: GO 23424
// index := GetElementIndex ( hackTanks , hack ) ;
23184: LD_ADDR_VAR 0 4
23188: PUSH
23189: LD_EXP 97
23193: PPUSH
23194: LD_VAR 0 1
23198: PPUSH
23199: CALL 30325 0 2
23203: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23204: LD_ADDR_VAR 0 3
23208: PUSH
23209: DOUBLE
23210: LD_EXP 98
23214: PUSH
23215: LD_VAR 0 4
23219: ARRAY
23220: INC
23221: ST_TO_ADDR
23222: LD_INT 1
23224: PUSH
23225: FOR_DOWNTO
23226: IFFALSE 23398
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23228: LD_ADDR_VAR 0 5
23232: PUSH
23233: LD_EXP 98
23237: PUSH
23238: LD_VAR 0 4
23242: ARRAY
23243: PUSH
23244: LD_VAR 0 3
23248: ARRAY
23249: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23250: LD_VAR 0 5
23254: PUSH
23255: LD_INT 1
23257: ARRAY
23258: PPUSH
23259: CALL_OW 302
23263: NOT
23264: PUSH
23265: LD_VAR 0 5
23269: PUSH
23270: LD_INT 1
23272: ARRAY
23273: PPUSH
23274: CALL_OW 255
23278: PUSH
23279: LD_VAR 0 1
23283: PPUSH
23284: CALL_OW 255
23288: NONEQUAL
23289: OR
23290: IFFALSE 23396
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23292: LD_VAR 0 5
23296: PUSH
23297: LD_INT 1
23299: ARRAY
23300: PPUSH
23301: CALL_OW 305
23305: PUSH
23306: LD_VAR 0 5
23310: PUSH
23311: LD_INT 1
23313: ARRAY
23314: PPUSH
23315: CALL_OW 255
23319: PUSH
23320: LD_VAR 0 1
23324: PPUSH
23325: CALL_OW 255
23329: EQUAL
23330: AND
23331: IFFALSE 23355
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23333: LD_VAR 0 5
23337: PUSH
23338: LD_INT 1
23340: ARRAY
23341: PPUSH
23342: LD_VAR 0 5
23346: PUSH
23347: LD_INT 2
23349: ARRAY
23350: PPUSH
23351: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23355: LD_ADDR_EXP 98
23359: PUSH
23360: LD_EXP 98
23364: PPUSH
23365: LD_VAR 0 4
23369: PPUSH
23370: LD_EXP 98
23374: PUSH
23375: LD_VAR 0 4
23379: ARRAY
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: CALL_OW 3
23390: PPUSH
23391: CALL_OW 1
23395: ST_TO_ADDR
// end ; end ;
23396: GO 23225
23398: POP
23399: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23400: LD_VAR 0 1
23404: PPUSH
23405: LD_EXP 98
23409: PUSH
23410: LD_VAR 0 4
23414: ARRAY
23415: PUSH
23416: LD_INT 0
23418: PLUS
23419: PPUSH
23420: CALL_OW 505
// end ;
23424: LD_VAR 0 2
23428: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23429: LD_INT 0
23431: PPUSH
23432: PPUSH
23433: PPUSH
23434: PPUSH
// if not hack in hackTanks then
23435: LD_VAR 0 1
23439: PUSH
23440: LD_EXP 97
23444: IN
23445: NOT
23446: IFFALSE 23450
// exit ;
23448: GO 23535
// index := GetElementIndex ( hackTanks , hack ) ;
23450: LD_ADDR_VAR 0 5
23454: PUSH
23455: LD_EXP 97
23459: PPUSH
23460: LD_VAR 0 1
23464: PPUSH
23465: CALL 30325 0 2
23469: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23470: LD_ADDR_VAR 0 4
23474: PUSH
23475: DOUBLE
23476: LD_INT 1
23478: DEC
23479: ST_TO_ADDR
23480: LD_EXP 98
23484: PUSH
23485: LD_VAR 0 5
23489: ARRAY
23490: PUSH
23491: FOR_TO
23492: IFFALSE 23533
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23494: LD_EXP 98
23498: PUSH
23499: LD_VAR 0 5
23503: ARRAY
23504: PUSH
23505: LD_VAR 0 4
23509: ARRAY
23510: PUSH
23511: LD_INT 1
23513: ARRAY
23514: PUSH
23515: LD_VAR 0 2
23519: EQUAL
23520: IFFALSE 23531
// KillUnit ( vehicle ) ;
23522: LD_VAR 0 2
23526: PPUSH
23527: CALL_OW 66
23531: GO 23491
23533: POP
23534: POP
// end ;
23535: LD_VAR 0 3
23539: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23540: LD_EXP 102
23544: NOT
23545: IFFALSE 23580
23547: GO 23549
23549: DISABLE
// begin initMiner := true ;
23550: LD_ADDR_EXP 102
23554: PUSH
23555: LD_INT 1
23557: ST_TO_ADDR
// minersList := [ ] ;
23558: LD_ADDR_EXP 103
23562: PUSH
23563: EMPTY
23564: ST_TO_ADDR
// minerMinesList := [ ] ;
23565: LD_ADDR_EXP 104
23569: PUSH
23570: EMPTY
23571: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23572: LD_ADDR_EXP 105
23576: PUSH
23577: LD_INT 5
23579: ST_TO_ADDR
// end ;
23580: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23581: LD_EXP 102
23585: PUSH
23586: LD_INT 34
23588: PUSH
23589: LD_EXP 25
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PPUSH
23598: CALL_OW 69
23602: AND
23603: IFFALSE 24066
23605: GO 23607
23607: DISABLE
23608: LD_INT 0
23610: PPUSH
23611: PPUSH
23612: PPUSH
23613: PPUSH
// begin enable ;
23614: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23615: LD_ADDR_VAR 0 1
23619: PUSH
23620: LD_INT 34
23622: PUSH
23623: LD_EXP 25
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PPUSH
23632: CALL_OW 69
23636: PUSH
23637: FOR_IN
23638: IFFALSE 23710
// begin if not i in minersList then
23640: LD_VAR 0 1
23644: PUSH
23645: LD_EXP 103
23649: IN
23650: NOT
23651: IFFALSE 23708
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23653: LD_ADDR_EXP 103
23657: PUSH
23658: LD_EXP 103
23662: PPUSH
23663: LD_EXP 103
23667: PUSH
23668: LD_INT 1
23670: PLUS
23671: PPUSH
23672: LD_VAR 0 1
23676: PPUSH
23677: CALL_OW 1
23681: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23682: LD_ADDR_EXP 104
23686: PUSH
23687: LD_EXP 104
23691: PPUSH
23692: LD_EXP 104
23696: PUSH
23697: LD_INT 1
23699: PLUS
23700: PPUSH
23701: EMPTY
23702: PPUSH
23703: CALL_OW 1
23707: ST_TO_ADDR
// end end ;
23708: GO 23637
23710: POP
23711: POP
// for i := minerMinesList downto 1 do
23712: LD_ADDR_VAR 0 1
23716: PUSH
23717: DOUBLE
23718: LD_EXP 104
23722: INC
23723: ST_TO_ADDR
23724: LD_INT 1
23726: PUSH
23727: FOR_DOWNTO
23728: IFFALSE 24064
// begin if IsLive ( minersList [ i ] ) then
23730: LD_EXP 103
23734: PUSH
23735: LD_VAR 0 1
23739: ARRAY
23740: PPUSH
23741: CALL_OW 300
23745: IFFALSE 23773
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23747: LD_EXP 103
23751: PUSH
23752: LD_VAR 0 1
23756: ARRAY
23757: PPUSH
23758: LD_EXP 104
23762: PUSH
23763: LD_VAR 0 1
23767: ARRAY
23768: PPUSH
23769: CALL_OW 505
// if not minerMinesList [ i ] then
23773: LD_EXP 104
23777: PUSH
23778: LD_VAR 0 1
23782: ARRAY
23783: NOT
23784: IFFALSE 23788
// continue ;
23786: GO 23727
// for j := minerMinesList [ i ] downto 1 do
23788: LD_ADDR_VAR 0 2
23792: PUSH
23793: DOUBLE
23794: LD_EXP 104
23798: PUSH
23799: LD_VAR 0 1
23803: ARRAY
23804: INC
23805: ST_TO_ADDR
23806: LD_INT 1
23808: PUSH
23809: FOR_DOWNTO
23810: IFFALSE 24060
// begin side := GetSide ( minersList [ i ] ) ;
23812: LD_ADDR_VAR 0 3
23816: PUSH
23817: LD_EXP 103
23821: PUSH
23822: LD_VAR 0 1
23826: ARRAY
23827: PPUSH
23828: CALL_OW 255
23832: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23833: LD_ADDR_VAR 0 4
23837: PUSH
23838: LD_EXP 104
23842: PUSH
23843: LD_VAR 0 1
23847: ARRAY
23848: PUSH
23849: LD_VAR 0 2
23853: ARRAY
23854: PUSH
23855: LD_INT 1
23857: ARRAY
23858: PPUSH
23859: LD_EXP 104
23863: PUSH
23864: LD_VAR 0 1
23868: ARRAY
23869: PUSH
23870: LD_VAR 0 2
23874: ARRAY
23875: PUSH
23876: LD_INT 2
23878: ARRAY
23879: PPUSH
23880: CALL_OW 428
23884: ST_TO_ADDR
// if not tmp then
23885: LD_VAR 0 4
23889: NOT
23890: IFFALSE 23894
// continue ;
23892: GO 23809
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23894: LD_VAR 0 4
23898: PUSH
23899: LD_INT 81
23901: PUSH
23902: LD_VAR 0 3
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PPUSH
23911: CALL_OW 69
23915: IN
23916: PUSH
23917: LD_EXP 104
23921: PUSH
23922: LD_VAR 0 1
23926: ARRAY
23927: PUSH
23928: LD_VAR 0 2
23932: ARRAY
23933: PUSH
23934: LD_INT 1
23936: ARRAY
23937: PPUSH
23938: LD_EXP 104
23942: PUSH
23943: LD_VAR 0 1
23947: ARRAY
23948: PUSH
23949: LD_VAR 0 2
23953: ARRAY
23954: PUSH
23955: LD_INT 2
23957: ARRAY
23958: PPUSH
23959: CALL_OW 458
23963: AND
23964: IFFALSE 24058
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23966: LD_EXP 104
23970: PUSH
23971: LD_VAR 0 1
23975: ARRAY
23976: PUSH
23977: LD_VAR 0 2
23981: ARRAY
23982: PUSH
23983: LD_INT 1
23985: ARRAY
23986: PPUSH
23987: LD_EXP 104
23991: PUSH
23992: LD_VAR 0 1
23996: ARRAY
23997: PUSH
23998: LD_VAR 0 2
24002: ARRAY
24003: PUSH
24004: LD_INT 2
24006: ARRAY
24007: PPUSH
24008: LD_VAR 0 3
24012: PPUSH
24013: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24017: LD_ADDR_EXP 104
24021: PUSH
24022: LD_EXP 104
24026: PPUSH
24027: LD_VAR 0 1
24031: PPUSH
24032: LD_EXP 104
24036: PUSH
24037: LD_VAR 0 1
24041: ARRAY
24042: PPUSH
24043: LD_VAR 0 2
24047: PPUSH
24048: CALL_OW 3
24052: PPUSH
24053: CALL_OW 1
24057: ST_TO_ADDR
// end ; end ;
24058: GO 23809
24060: POP
24061: POP
// end ;
24062: GO 23727
24064: POP
24065: POP
// end ;
24066: PPOPN 4
24068: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24069: LD_INT 0
24071: PPUSH
24072: PPUSH
// result := false ;
24073: LD_ADDR_VAR 0 4
24077: PUSH
24078: LD_INT 0
24080: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24081: LD_VAR 0 1
24085: PPUSH
24086: CALL_OW 264
24090: PUSH
24091: LD_EXP 25
24095: EQUAL
24096: NOT
24097: IFFALSE 24101
// exit ;
24099: GO 24341
// index := GetElementIndex ( minersList , unit ) ;
24101: LD_ADDR_VAR 0 5
24105: PUSH
24106: LD_EXP 103
24110: PPUSH
24111: LD_VAR 0 1
24115: PPUSH
24116: CALL 30325 0 2
24120: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24121: LD_EXP 104
24125: PUSH
24126: LD_VAR 0 5
24130: ARRAY
24131: PUSH
24132: LD_EXP 105
24136: GREATEREQUAL
24137: IFFALSE 24141
// exit ;
24139: GO 24341
// ComMoveXY ( unit , x , y ) ;
24141: LD_VAR 0 1
24145: PPUSH
24146: LD_VAR 0 2
24150: PPUSH
24151: LD_VAR 0 3
24155: PPUSH
24156: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24160: LD_INT 35
24162: PPUSH
24163: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24167: LD_VAR 0 1
24171: PPUSH
24172: LD_VAR 0 2
24176: PPUSH
24177: LD_VAR 0 3
24181: PPUSH
24182: CALL 61097 0 3
24186: NOT
24187: PUSH
24188: LD_VAR 0 1
24192: PPUSH
24193: CALL_OW 314
24197: AND
24198: IFFALSE 24202
// exit ;
24200: GO 24341
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24202: LD_VAR 0 2
24206: PPUSH
24207: LD_VAR 0 3
24211: PPUSH
24212: CALL_OW 428
24216: PUSH
24217: LD_VAR 0 1
24221: EQUAL
24222: PUSH
24223: LD_VAR 0 1
24227: PPUSH
24228: CALL_OW 314
24232: NOT
24233: AND
24234: IFFALSE 24160
// PlaySoundXY ( x , y , PlantMine ) ;
24236: LD_VAR 0 2
24240: PPUSH
24241: LD_VAR 0 3
24245: PPUSH
24246: LD_STRING PlantMine
24248: PPUSH
24249: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24253: LD_VAR 0 2
24257: PPUSH
24258: LD_VAR 0 3
24262: PPUSH
24263: LD_VAR 0 1
24267: PPUSH
24268: CALL_OW 255
24272: PPUSH
24273: LD_INT 0
24275: PPUSH
24276: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24280: LD_ADDR_EXP 104
24284: PUSH
24285: LD_EXP 104
24289: PPUSH
24290: LD_VAR 0 5
24294: PUSH
24295: LD_EXP 104
24299: PUSH
24300: LD_VAR 0 5
24304: ARRAY
24305: PUSH
24306: LD_INT 1
24308: PLUS
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PPUSH
24314: LD_VAR 0 2
24318: PUSH
24319: LD_VAR 0 3
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PPUSH
24328: CALL 30540 0 3
24332: ST_TO_ADDR
// result := true ;
24333: LD_ADDR_VAR 0 4
24337: PUSH
24338: LD_INT 1
24340: ST_TO_ADDR
// end ;
24341: LD_VAR 0 4
24345: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24346: LD_INT 0
24348: PPUSH
24349: PPUSH
24350: PPUSH
// if not unit in minersList then
24351: LD_VAR 0 1
24355: PUSH
24356: LD_EXP 103
24360: IN
24361: NOT
24362: IFFALSE 24366
// exit ;
24364: GO 24758
// index := GetElementIndex ( minersList , unit ) ;
24366: LD_ADDR_VAR 0 6
24370: PUSH
24371: LD_EXP 103
24375: PPUSH
24376: LD_VAR 0 1
24380: PPUSH
24381: CALL 30325 0 2
24385: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24386: LD_ADDR_VAR 0 5
24390: PUSH
24391: DOUBLE
24392: LD_EXP 104
24396: PUSH
24397: LD_VAR 0 6
24401: ARRAY
24402: INC
24403: ST_TO_ADDR
24404: LD_INT 1
24406: PUSH
24407: FOR_DOWNTO
24408: IFFALSE 24569
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24410: LD_EXP 104
24414: PUSH
24415: LD_VAR 0 6
24419: ARRAY
24420: PUSH
24421: LD_VAR 0 5
24425: ARRAY
24426: PUSH
24427: LD_INT 1
24429: ARRAY
24430: PUSH
24431: LD_VAR 0 2
24435: EQUAL
24436: PUSH
24437: LD_EXP 104
24441: PUSH
24442: LD_VAR 0 6
24446: ARRAY
24447: PUSH
24448: LD_VAR 0 5
24452: ARRAY
24453: PUSH
24454: LD_INT 2
24456: ARRAY
24457: PUSH
24458: LD_VAR 0 3
24462: EQUAL
24463: AND
24464: IFFALSE 24567
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24466: LD_EXP 104
24470: PUSH
24471: LD_VAR 0 6
24475: ARRAY
24476: PUSH
24477: LD_VAR 0 5
24481: ARRAY
24482: PUSH
24483: LD_INT 1
24485: ARRAY
24486: PPUSH
24487: LD_EXP 104
24491: PUSH
24492: LD_VAR 0 6
24496: ARRAY
24497: PUSH
24498: LD_VAR 0 5
24502: ARRAY
24503: PUSH
24504: LD_INT 2
24506: ARRAY
24507: PPUSH
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 255
24517: PPUSH
24518: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24522: LD_ADDR_EXP 104
24526: PUSH
24527: LD_EXP 104
24531: PPUSH
24532: LD_VAR 0 6
24536: PPUSH
24537: LD_EXP 104
24541: PUSH
24542: LD_VAR 0 6
24546: ARRAY
24547: PPUSH
24548: LD_VAR 0 5
24552: PPUSH
24553: CALL_OW 3
24557: PPUSH
24558: CALL_OW 1
24562: ST_TO_ADDR
// exit ;
24563: POP
24564: POP
24565: GO 24758
// end ; end ;
24567: GO 24407
24569: POP
24570: POP
// for i := minerMinesList [ index ] downto 1 do
24571: LD_ADDR_VAR 0 5
24575: PUSH
24576: DOUBLE
24577: LD_EXP 104
24581: PUSH
24582: LD_VAR 0 6
24586: ARRAY
24587: INC
24588: ST_TO_ADDR
24589: LD_INT 1
24591: PUSH
24592: FOR_DOWNTO
24593: IFFALSE 24756
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24595: LD_EXP 104
24599: PUSH
24600: LD_VAR 0 6
24604: ARRAY
24605: PUSH
24606: LD_VAR 0 5
24610: ARRAY
24611: PUSH
24612: LD_INT 1
24614: ARRAY
24615: PPUSH
24616: LD_EXP 104
24620: PUSH
24621: LD_VAR 0 6
24625: ARRAY
24626: PUSH
24627: LD_VAR 0 5
24631: ARRAY
24632: PUSH
24633: LD_INT 2
24635: ARRAY
24636: PPUSH
24637: LD_VAR 0 2
24641: PPUSH
24642: LD_VAR 0 3
24646: PPUSH
24647: CALL_OW 298
24651: PUSH
24652: LD_INT 6
24654: LESS
24655: IFFALSE 24754
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24657: LD_EXP 104
24661: PUSH
24662: LD_VAR 0 6
24666: ARRAY
24667: PUSH
24668: LD_VAR 0 5
24672: ARRAY
24673: PUSH
24674: LD_INT 1
24676: ARRAY
24677: PPUSH
24678: LD_EXP 104
24682: PUSH
24683: LD_VAR 0 6
24687: ARRAY
24688: PUSH
24689: LD_VAR 0 5
24693: ARRAY
24694: PUSH
24695: LD_INT 2
24697: ARRAY
24698: PPUSH
24699: LD_VAR 0 1
24703: PPUSH
24704: CALL_OW 255
24708: PPUSH
24709: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24713: LD_ADDR_EXP 104
24717: PUSH
24718: LD_EXP 104
24722: PPUSH
24723: LD_VAR 0 6
24727: PPUSH
24728: LD_EXP 104
24732: PUSH
24733: LD_VAR 0 6
24737: ARRAY
24738: PPUSH
24739: LD_VAR 0 5
24743: PPUSH
24744: CALL_OW 3
24748: PPUSH
24749: CALL_OW 1
24753: ST_TO_ADDR
// end ; end ;
24754: GO 24592
24756: POP
24757: POP
// end ;
24758: LD_VAR 0 4
24762: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24763: LD_INT 0
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
24770: PPUSH
24771: PPUSH
24772: PPUSH
24773: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24774: LD_VAR 0 1
24778: PPUSH
24779: CALL_OW 264
24783: PUSH
24784: LD_EXP 25
24788: EQUAL
24789: NOT
24790: PUSH
24791: LD_VAR 0 1
24795: PUSH
24796: LD_EXP 103
24800: IN
24801: NOT
24802: OR
24803: IFFALSE 24807
// exit ;
24805: GO 25129
// index := GetElementIndex ( minersList , unit ) ;
24807: LD_ADDR_VAR 0 6
24811: PUSH
24812: LD_EXP 103
24816: PPUSH
24817: LD_VAR 0 1
24821: PPUSH
24822: CALL 30325 0 2
24826: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24827: LD_ADDR_VAR 0 8
24831: PUSH
24832: LD_EXP 105
24836: PUSH
24837: LD_EXP 104
24841: PUSH
24842: LD_VAR 0 6
24846: ARRAY
24847: MINUS
24848: ST_TO_ADDR
// if not minesFreeAmount then
24849: LD_VAR 0 8
24853: NOT
24854: IFFALSE 24858
// exit ;
24856: GO 25129
// tmp := [ ] ;
24858: LD_ADDR_VAR 0 7
24862: PUSH
24863: EMPTY
24864: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24865: LD_ADDR_VAR 0 5
24869: PUSH
24870: DOUBLE
24871: LD_INT 1
24873: DEC
24874: ST_TO_ADDR
24875: LD_VAR 0 8
24879: PUSH
24880: FOR_TO
24881: IFFALSE 25076
// begin _d := rand ( 0 , 5 ) ;
24883: LD_ADDR_VAR 0 11
24887: PUSH
24888: LD_INT 0
24890: PPUSH
24891: LD_INT 5
24893: PPUSH
24894: CALL_OW 12
24898: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24899: LD_ADDR_VAR 0 12
24903: PUSH
24904: LD_INT 2
24906: PPUSH
24907: LD_INT 6
24909: PPUSH
24910: CALL_OW 12
24914: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24915: LD_ADDR_VAR 0 9
24919: PUSH
24920: LD_VAR 0 2
24924: PPUSH
24925: LD_VAR 0 11
24929: PPUSH
24930: LD_VAR 0 12
24934: PPUSH
24935: CALL_OW 272
24939: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24940: LD_ADDR_VAR 0 10
24944: PUSH
24945: LD_VAR 0 3
24949: PPUSH
24950: LD_VAR 0 11
24954: PPUSH
24955: LD_VAR 0 12
24959: PPUSH
24960: CALL_OW 273
24964: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24965: LD_VAR 0 9
24969: PPUSH
24970: LD_VAR 0 10
24974: PPUSH
24975: CALL_OW 488
24979: PUSH
24980: LD_VAR 0 9
24984: PUSH
24985: LD_VAR 0 10
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_VAR 0 7
24998: IN
24999: NOT
25000: AND
25001: PUSH
25002: LD_VAR 0 9
25006: PPUSH
25007: LD_VAR 0 10
25011: PPUSH
25012: CALL_OW 458
25016: NOT
25017: AND
25018: IFFALSE 25060
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25020: LD_ADDR_VAR 0 7
25024: PUSH
25025: LD_VAR 0 7
25029: PPUSH
25030: LD_VAR 0 7
25034: PUSH
25035: LD_INT 1
25037: PLUS
25038: PPUSH
25039: LD_VAR 0 9
25043: PUSH
25044: LD_VAR 0 10
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PPUSH
25053: CALL_OW 1
25057: ST_TO_ADDR
25058: GO 25074
// i := i - 1 ;
25060: LD_ADDR_VAR 0 5
25064: PUSH
25065: LD_VAR 0 5
25069: PUSH
25070: LD_INT 1
25072: MINUS
25073: ST_TO_ADDR
// end ;
25074: GO 24880
25076: POP
25077: POP
// for i in tmp do
25078: LD_ADDR_VAR 0 5
25082: PUSH
25083: LD_VAR 0 7
25087: PUSH
25088: FOR_IN
25089: IFFALSE 25127
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25091: LD_VAR 0 1
25095: PPUSH
25096: LD_VAR 0 5
25100: PUSH
25101: LD_INT 1
25103: ARRAY
25104: PPUSH
25105: LD_VAR 0 5
25109: PUSH
25110: LD_INT 2
25112: ARRAY
25113: PPUSH
25114: CALL 24069 0 3
25118: NOT
25119: IFFALSE 25125
// exit ;
25121: POP
25122: POP
25123: GO 25129
25125: GO 25088
25127: POP
25128: POP
// end ;
25129: LD_VAR 0 4
25133: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25134: LD_INT 0
25136: PPUSH
25137: PPUSH
25138: PPUSH
25139: PPUSH
25140: PPUSH
25141: PPUSH
25142: PPUSH
// if not GetClass ( unit ) = class_sniper then
25143: LD_VAR 0 1
25147: PPUSH
25148: CALL_OW 257
25152: PUSH
25153: LD_INT 5
25155: EQUAL
25156: NOT
25157: IFFALSE 25161
// exit ;
25159: GO 25549
// dist := 8 ;
25161: LD_ADDR_VAR 0 5
25165: PUSH
25166: LD_INT 8
25168: ST_TO_ADDR
// viewRange := 12 ;
25169: LD_ADDR_VAR 0 7
25173: PUSH
25174: LD_INT 12
25176: ST_TO_ADDR
// side := GetSide ( unit ) ;
25177: LD_ADDR_VAR 0 6
25181: PUSH
25182: LD_VAR 0 1
25186: PPUSH
25187: CALL_OW 255
25191: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25192: LD_INT 61
25194: PPUSH
25195: LD_VAR 0 6
25199: PPUSH
25200: CALL_OW 321
25204: PUSH
25205: LD_INT 2
25207: EQUAL
25208: IFFALSE 25218
// viewRange := 16 ;
25210: LD_ADDR_VAR 0 7
25214: PUSH
25215: LD_INT 16
25217: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25218: LD_VAR 0 1
25222: PPUSH
25223: LD_VAR 0 2
25227: PPUSH
25228: LD_VAR 0 3
25232: PPUSH
25233: CALL_OW 297
25237: PUSH
25238: LD_VAR 0 5
25242: GREATER
25243: IFFALSE 25322
// begin ComMoveXY ( unit , x , y ) ;
25245: LD_VAR 0 1
25249: PPUSH
25250: LD_VAR 0 2
25254: PPUSH
25255: LD_VAR 0 3
25259: PPUSH
25260: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25264: LD_INT 35
25266: PPUSH
25267: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25271: LD_VAR 0 1
25275: PPUSH
25276: LD_VAR 0 2
25280: PPUSH
25281: LD_VAR 0 3
25285: PPUSH
25286: CALL 61097 0 3
25290: NOT
25291: IFFALSE 25295
// exit ;
25293: GO 25549
// until GetDistUnitXY ( unit , x , y ) < dist ;
25295: LD_VAR 0 1
25299: PPUSH
25300: LD_VAR 0 2
25304: PPUSH
25305: LD_VAR 0 3
25309: PPUSH
25310: CALL_OW 297
25314: PUSH
25315: LD_VAR 0 5
25319: LESS
25320: IFFALSE 25264
// end ; ComTurnXY ( unit , x , y ) ;
25322: LD_VAR 0 1
25326: PPUSH
25327: LD_VAR 0 2
25331: PPUSH
25332: LD_VAR 0 3
25336: PPUSH
25337: CALL_OW 118
// wait ( 5 ) ;
25341: LD_INT 5
25343: PPUSH
25344: CALL_OW 67
// _d := GetDir ( unit ) ;
25348: LD_ADDR_VAR 0 10
25352: PUSH
25353: LD_VAR 0 1
25357: PPUSH
25358: CALL_OW 254
25362: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25363: LD_ADDR_VAR 0 8
25367: PUSH
25368: LD_VAR 0 1
25372: PPUSH
25373: CALL_OW 250
25377: PPUSH
25378: LD_VAR 0 10
25382: PPUSH
25383: LD_VAR 0 5
25387: PPUSH
25388: CALL_OW 272
25392: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25393: LD_ADDR_VAR 0 9
25397: PUSH
25398: LD_VAR 0 1
25402: PPUSH
25403: CALL_OW 251
25407: PPUSH
25408: LD_VAR 0 10
25412: PPUSH
25413: LD_VAR 0 5
25417: PPUSH
25418: CALL_OW 273
25422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25423: LD_VAR 0 8
25427: PPUSH
25428: LD_VAR 0 9
25432: PPUSH
25433: CALL_OW 488
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25549
// ComAnimCustom ( unit , 1 ) ;
25442: LD_VAR 0 1
25446: PPUSH
25447: LD_INT 1
25449: PPUSH
25450: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25454: LD_VAR 0 8
25458: PPUSH
25459: LD_VAR 0 9
25463: PPUSH
25464: LD_VAR 0 6
25468: PPUSH
25469: LD_VAR 0 7
25473: PPUSH
25474: CALL_OW 330
// repeat wait ( 1 ) ;
25478: LD_INT 1
25480: PPUSH
25481: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25485: LD_VAR 0 1
25489: PPUSH
25490: CALL_OW 316
25494: PUSH
25495: LD_VAR 0 1
25499: PPUSH
25500: CALL_OW 314
25504: OR
25505: PUSH
25506: LD_VAR 0 1
25510: PPUSH
25511: CALL_OW 302
25515: NOT
25516: OR
25517: PUSH
25518: LD_VAR 0 1
25522: PPUSH
25523: CALL_OW 301
25527: OR
25528: IFFALSE 25478
// RemoveSeeing ( _x , _y , side ) ;
25530: LD_VAR 0 8
25534: PPUSH
25535: LD_VAR 0 9
25539: PPUSH
25540: LD_VAR 0 6
25544: PPUSH
25545: CALL_OW 331
// end ; end_of_file
25549: LD_VAR 0 4
25553: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25554: LD_INT 0
25556: PPUSH
25557: PPUSH
// if exist_mode then
25558: LD_VAR 0 2
25562: IFFALSE 25587
// unit := CreateCharacter ( prefix & ident ) else
25564: LD_ADDR_VAR 0 5
25568: PUSH
25569: LD_VAR 0 3
25573: PUSH
25574: LD_VAR 0 1
25578: STR
25579: PPUSH
25580: CALL_OW 34
25584: ST_TO_ADDR
25585: GO 25602
// unit := NewCharacter ( ident ) ;
25587: LD_ADDR_VAR 0 5
25591: PUSH
25592: LD_VAR 0 1
25596: PPUSH
25597: CALL_OW 25
25601: ST_TO_ADDR
// result := unit ;
25602: LD_ADDR_VAR 0 4
25606: PUSH
25607: LD_VAR 0 5
25611: ST_TO_ADDR
// end ;
25612: LD_VAR 0 4
25616: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25617: LD_INT 0
25619: PPUSH
25620: PPUSH
// if not side or not nation then
25621: LD_VAR 0 1
25625: NOT
25626: PUSH
25627: LD_VAR 0 2
25631: NOT
25632: OR
25633: IFFALSE 25637
// exit ;
25635: GO 26405
// case nation of nation_american :
25637: LD_VAR 0 2
25641: PUSH
25642: LD_INT 1
25644: DOUBLE
25645: EQUAL
25646: IFTRUE 25650
25648: GO 25864
25650: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25651: LD_ADDR_VAR 0 4
25655: PUSH
25656: LD_INT 35
25658: PUSH
25659: LD_INT 45
25661: PUSH
25662: LD_INT 46
25664: PUSH
25665: LD_INT 47
25667: PUSH
25668: LD_INT 82
25670: PUSH
25671: LD_INT 83
25673: PUSH
25674: LD_INT 84
25676: PUSH
25677: LD_INT 85
25679: PUSH
25680: LD_INT 86
25682: PUSH
25683: LD_INT 1
25685: PUSH
25686: LD_INT 2
25688: PUSH
25689: LD_INT 6
25691: PUSH
25692: LD_INT 15
25694: PUSH
25695: LD_INT 16
25697: PUSH
25698: LD_INT 7
25700: PUSH
25701: LD_INT 12
25703: PUSH
25704: LD_INT 13
25706: PUSH
25707: LD_INT 10
25709: PUSH
25710: LD_INT 14
25712: PUSH
25713: LD_INT 20
25715: PUSH
25716: LD_INT 21
25718: PUSH
25719: LD_INT 22
25721: PUSH
25722: LD_INT 25
25724: PUSH
25725: LD_INT 32
25727: PUSH
25728: LD_INT 27
25730: PUSH
25731: LD_INT 36
25733: PUSH
25734: LD_INT 69
25736: PUSH
25737: LD_INT 39
25739: PUSH
25740: LD_INT 34
25742: PUSH
25743: LD_INT 40
25745: PUSH
25746: LD_INT 48
25748: PUSH
25749: LD_INT 49
25751: PUSH
25752: LD_INT 50
25754: PUSH
25755: LD_INT 51
25757: PUSH
25758: LD_INT 52
25760: PUSH
25761: LD_INT 53
25763: PUSH
25764: LD_INT 54
25766: PUSH
25767: LD_INT 55
25769: PUSH
25770: LD_INT 56
25772: PUSH
25773: LD_INT 57
25775: PUSH
25776: LD_INT 58
25778: PUSH
25779: LD_INT 59
25781: PUSH
25782: LD_INT 60
25784: PUSH
25785: LD_INT 61
25787: PUSH
25788: LD_INT 62
25790: PUSH
25791: LD_INT 80
25793: PUSH
25794: LD_INT 82
25796: PUSH
25797: LD_INT 83
25799: PUSH
25800: LD_INT 84
25802: PUSH
25803: LD_INT 85
25805: PUSH
25806: LD_INT 86
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: ST_TO_ADDR
25862: GO 26329
25864: LD_INT 2
25866: DOUBLE
25867: EQUAL
25868: IFTRUE 25872
25870: GO 26098
25872: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25873: LD_ADDR_VAR 0 4
25877: PUSH
25878: LD_INT 35
25880: PUSH
25881: LD_INT 45
25883: PUSH
25884: LD_INT 46
25886: PUSH
25887: LD_INT 47
25889: PUSH
25890: LD_INT 82
25892: PUSH
25893: LD_INT 83
25895: PUSH
25896: LD_INT 84
25898: PUSH
25899: LD_INT 85
25901: PUSH
25902: LD_INT 87
25904: PUSH
25905: LD_INT 70
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: LD_INT 11
25913: PUSH
25914: LD_INT 3
25916: PUSH
25917: LD_INT 4
25919: PUSH
25920: LD_INT 5
25922: PUSH
25923: LD_INT 6
25925: PUSH
25926: LD_INT 15
25928: PUSH
25929: LD_INT 18
25931: PUSH
25932: LD_INT 7
25934: PUSH
25935: LD_INT 17
25937: PUSH
25938: LD_INT 8
25940: PUSH
25941: LD_INT 20
25943: PUSH
25944: LD_INT 21
25946: PUSH
25947: LD_INT 22
25949: PUSH
25950: LD_INT 72
25952: PUSH
25953: LD_INT 26
25955: PUSH
25956: LD_INT 69
25958: PUSH
25959: LD_INT 39
25961: PUSH
25962: LD_INT 40
25964: PUSH
25965: LD_INT 41
25967: PUSH
25968: LD_INT 42
25970: PUSH
25971: LD_INT 43
25973: PUSH
25974: LD_INT 48
25976: PUSH
25977: LD_INT 49
25979: PUSH
25980: LD_INT 50
25982: PUSH
25983: LD_INT 51
25985: PUSH
25986: LD_INT 52
25988: PUSH
25989: LD_INT 53
25991: PUSH
25992: LD_INT 54
25994: PUSH
25995: LD_INT 55
25997: PUSH
25998: LD_INT 56
26000: PUSH
26001: LD_INT 60
26003: PUSH
26004: LD_INT 61
26006: PUSH
26007: LD_INT 62
26009: PUSH
26010: LD_INT 66
26012: PUSH
26013: LD_INT 67
26015: PUSH
26016: LD_INT 68
26018: PUSH
26019: LD_INT 81
26021: PUSH
26022: LD_INT 82
26024: PUSH
26025: LD_INT 83
26027: PUSH
26028: LD_INT 84
26030: PUSH
26031: LD_INT 85
26033: PUSH
26034: LD_INT 87
26036: PUSH
26037: LD_INT 88
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: ST_TO_ADDR
26096: GO 26329
26098: LD_INT 3
26100: DOUBLE
26101: EQUAL
26102: IFTRUE 26106
26104: GO 26328
26106: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26107: LD_ADDR_VAR 0 4
26111: PUSH
26112: LD_INT 46
26114: PUSH
26115: LD_INT 47
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: LD_INT 2
26123: PUSH
26124: LD_INT 82
26126: PUSH
26127: LD_INT 83
26129: PUSH
26130: LD_INT 84
26132: PUSH
26133: LD_INT 85
26135: PUSH
26136: LD_INT 86
26138: PUSH
26139: LD_INT 11
26141: PUSH
26142: LD_INT 9
26144: PUSH
26145: LD_INT 20
26147: PUSH
26148: LD_INT 19
26150: PUSH
26151: LD_INT 21
26153: PUSH
26154: LD_INT 24
26156: PUSH
26157: LD_INT 22
26159: PUSH
26160: LD_INT 25
26162: PUSH
26163: LD_INT 28
26165: PUSH
26166: LD_INT 29
26168: PUSH
26169: LD_INT 30
26171: PUSH
26172: LD_INT 31
26174: PUSH
26175: LD_INT 37
26177: PUSH
26178: LD_INT 38
26180: PUSH
26181: LD_INT 32
26183: PUSH
26184: LD_INT 27
26186: PUSH
26187: LD_INT 33
26189: PUSH
26190: LD_INT 69
26192: PUSH
26193: LD_INT 39
26195: PUSH
26196: LD_INT 34
26198: PUSH
26199: LD_INT 40
26201: PUSH
26202: LD_INT 71
26204: PUSH
26205: LD_INT 23
26207: PUSH
26208: LD_INT 44
26210: PUSH
26211: LD_INT 48
26213: PUSH
26214: LD_INT 49
26216: PUSH
26217: LD_INT 50
26219: PUSH
26220: LD_INT 51
26222: PUSH
26223: LD_INT 52
26225: PUSH
26226: LD_INT 53
26228: PUSH
26229: LD_INT 54
26231: PUSH
26232: LD_INT 55
26234: PUSH
26235: LD_INT 56
26237: PUSH
26238: LD_INT 57
26240: PUSH
26241: LD_INT 58
26243: PUSH
26244: LD_INT 59
26246: PUSH
26247: LD_INT 63
26249: PUSH
26250: LD_INT 64
26252: PUSH
26253: LD_INT 65
26255: PUSH
26256: LD_INT 82
26258: PUSH
26259: LD_INT 83
26261: PUSH
26262: LD_INT 84
26264: PUSH
26265: LD_INT 85
26267: PUSH
26268: LD_INT 86
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: ST_TO_ADDR
26326: GO 26329
26328: POP
// if state > - 1 and state < 3 then
26329: LD_VAR 0 3
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: GREATER
26338: PUSH
26339: LD_VAR 0 3
26343: PUSH
26344: LD_INT 3
26346: LESS
26347: AND
26348: IFFALSE 26405
// for i in result do
26350: LD_ADDR_VAR 0 5
26354: PUSH
26355: LD_VAR 0 4
26359: PUSH
26360: FOR_IN
26361: IFFALSE 26403
// if GetTech ( i , side ) <> state then
26363: LD_VAR 0 5
26367: PPUSH
26368: LD_VAR 0 1
26372: PPUSH
26373: CALL_OW 321
26377: PUSH
26378: LD_VAR 0 3
26382: NONEQUAL
26383: IFFALSE 26401
// result := result diff i ;
26385: LD_ADDR_VAR 0 4
26389: PUSH
26390: LD_VAR 0 4
26394: PUSH
26395: LD_VAR 0 5
26399: DIFF
26400: ST_TO_ADDR
26401: GO 26360
26403: POP
26404: POP
// end ;
26405: LD_VAR 0 4
26409: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26410: LD_INT 0
26412: PPUSH
26413: PPUSH
26414: PPUSH
// result := true ;
26415: LD_ADDR_VAR 0 3
26419: PUSH
26420: LD_INT 1
26422: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26423: LD_ADDR_VAR 0 5
26427: PUSH
26428: LD_VAR 0 2
26432: PPUSH
26433: CALL_OW 480
26437: ST_TO_ADDR
// if not tmp then
26438: LD_VAR 0 5
26442: NOT
26443: IFFALSE 26447
// exit ;
26445: GO 26496
// for i in tmp do
26447: LD_ADDR_VAR 0 4
26451: PUSH
26452: LD_VAR 0 5
26456: PUSH
26457: FOR_IN
26458: IFFALSE 26494
// if GetTech ( i , side ) <> state_researched then
26460: LD_VAR 0 4
26464: PPUSH
26465: LD_VAR 0 1
26469: PPUSH
26470: CALL_OW 321
26474: PUSH
26475: LD_INT 2
26477: NONEQUAL
26478: IFFALSE 26492
// begin result := false ;
26480: LD_ADDR_VAR 0 3
26484: PUSH
26485: LD_INT 0
26487: ST_TO_ADDR
// exit ;
26488: POP
26489: POP
26490: GO 26496
// end ;
26492: GO 26457
26494: POP
26495: POP
// end ;
26496: LD_VAR 0 3
26500: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26501: LD_INT 0
26503: PPUSH
26504: PPUSH
26505: PPUSH
26506: PPUSH
26507: PPUSH
26508: PPUSH
26509: PPUSH
26510: PPUSH
26511: PPUSH
26512: PPUSH
26513: PPUSH
26514: PPUSH
26515: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26516: LD_VAR 0 1
26520: NOT
26521: PUSH
26522: LD_VAR 0 1
26526: PPUSH
26527: CALL_OW 257
26531: PUSH
26532: LD_INT 9
26534: NONEQUAL
26535: OR
26536: IFFALSE 26540
// exit ;
26538: GO 27113
// side := GetSide ( unit ) ;
26540: LD_ADDR_VAR 0 9
26544: PUSH
26545: LD_VAR 0 1
26549: PPUSH
26550: CALL_OW 255
26554: ST_TO_ADDR
// tech_space := tech_spacanom ;
26555: LD_ADDR_VAR 0 12
26559: PUSH
26560: LD_INT 29
26562: ST_TO_ADDR
// tech_time := tech_taurad ;
26563: LD_ADDR_VAR 0 13
26567: PUSH
26568: LD_INT 28
26570: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26571: LD_ADDR_VAR 0 11
26575: PUSH
26576: LD_VAR 0 1
26580: PPUSH
26581: CALL_OW 310
26585: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26586: LD_VAR 0 11
26590: PPUSH
26591: CALL_OW 247
26595: PUSH
26596: LD_INT 2
26598: EQUAL
26599: IFFALSE 26603
// exit ;
26601: GO 27113
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26603: LD_ADDR_VAR 0 8
26607: PUSH
26608: LD_INT 81
26610: PUSH
26611: LD_VAR 0 9
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 3
26622: PUSH
26623: LD_INT 21
26625: PUSH
26626: LD_INT 3
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PPUSH
26641: CALL_OW 69
26645: ST_TO_ADDR
// if not tmp then
26646: LD_VAR 0 8
26650: NOT
26651: IFFALSE 26655
// exit ;
26653: GO 27113
// if in_unit then
26655: LD_VAR 0 11
26659: IFFALSE 26683
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26661: LD_ADDR_VAR 0 10
26665: PUSH
26666: LD_VAR 0 8
26670: PPUSH
26671: LD_VAR 0 11
26675: PPUSH
26676: CALL_OW 74
26680: ST_TO_ADDR
26681: GO 26703
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26683: LD_ADDR_VAR 0 10
26687: PUSH
26688: LD_VAR 0 8
26692: PPUSH
26693: LD_VAR 0 1
26697: PPUSH
26698: CALL_OW 74
26702: ST_TO_ADDR
// if not enemy then
26703: LD_VAR 0 10
26707: NOT
26708: IFFALSE 26712
// exit ;
26710: GO 27113
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26712: LD_VAR 0 11
26716: PUSH
26717: LD_VAR 0 11
26721: PPUSH
26722: LD_VAR 0 10
26726: PPUSH
26727: CALL_OW 296
26731: PUSH
26732: LD_INT 13
26734: GREATER
26735: AND
26736: PUSH
26737: LD_VAR 0 1
26741: PPUSH
26742: LD_VAR 0 10
26746: PPUSH
26747: CALL_OW 296
26751: PUSH
26752: LD_INT 12
26754: GREATER
26755: OR
26756: IFFALSE 26760
// exit ;
26758: GO 27113
// missile := [ 1 ] ;
26760: LD_ADDR_VAR 0 14
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: EMPTY
26769: LIST
26770: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26771: LD_VAR 0 9
26775: PPUSH
26776: LD_VAR 0 12
26780: PPUSH
26781: CALL_OW 325
26785: IFFALSE 26814
// missile := Insert ( missile , missile + 1 , 2 ) ;
26787: LD_ADDR_VAR 0 14
26791: PUSH
26792: LD_VAR 0 14
26796: PPUSH
26797: LD_VAR 0 14
26801: PUSH
26802: LD_INT 1
26804: PLUS
26805: PPUSH
26806: LD_INT 2
26808: PPUSH
26809: CALL_OW 2
26813: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26814: LD_VAR 0 9
26818: PPUSH
26819: LD_VAR 0 13
26823: PPUSH
26824: CALL_OW 325
26828: PUSH
26829: LD_VAR 0 10
26833: PPUSH
26834: CALL_OW 255
26838: PPUSH
26839: LD_VAR 0 13
26843: PPUSH
26844: CALL_OW 325
26848: NOT
26849: AND
26850: IFFALSE 26879
// missile := Insert ( missile , missile + 1 , 3 ) ;
26852: LD_ADDR_VAR 0 14
26856: PUSH
26857: LD_VAR 0 14
26861: PPUSH
26862: LD_VAR 0 14
26866: PUSH
26867: LD_INT 1
26869: PLUS
26870: PPUSH
26871: LD_INT 3
26873: PPUSH
26874: CALL_OW 2
26878: ST_TO_ADDR
// if missile < 2 then
26879: LD_VAR 0 14
26883: PUSH
26884: LD_INT 2
26886: LESS
26887: IFFALSE 26891
// exit ;
26889: GO 27113
// x := GetX ( enemy ) ;
26891: LD_ADDR_VAR 0 4
26895: PUSH
26896: LD_VAR 0 10
26900: PPUSH
26901: CALL_OW 250
26905: ST_TO_ADDR
// y := GetY ( enemy ) ;
26906: LD_ADDR_VAR 0 5
26910: PUSH
26911: LD_VAR 0 10
26915: PPUSH
26916: CALL_OW 251
26920: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26921: LD_ADDR_VAR 0 6
26925: PUSH
26926: LD_VAR 0 4
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PPUSH
26935: LD_INT 1
26937: PPUSH
26938: CALL_OW 12
26942: PLUS
26943: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26944: LD_ADDR_VAR 0 7
26948: PUSH
26949: LD_VAR 0 5
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PPUSH
26958: LD_INT 1
26960: PPUSH
26961: CALL_OW 12
26965: PLUS
26966: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26967: LD_VAR 0 6
26971: PPUSH
26972: LD_VAR 0 7
26976: PPUSH
26977: CALL_OW 488
26981: NOT
26982: IFFALSE 27004
// begin _x := x ;
26984: LD_ADDR_VAR 0 6
26988: PUSH
26989: LD_VAR 0 4
26993: ST_TO_ADDR
// _y := y ;
26994: LD_ADDR_VAR 0 7
26998: PUSH
26999: LD_VAR 0 5
27003: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: LD_INT 1
27011: PPUSH
27012: LD_VAR 0 14
27016: PPUSH
27017: CALL_OW 12
27021: ST_TO_ADDR
// case i of 1 :
27022: LD_VAR 0 3
27026: PUSH
27027: LD_INT 1
27029: DOUBLE
27030: EQUAL
27031: IFTRUE 27035
27033: GO 27052
27035: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27036: LD_VAR 0 1
27040: PPUSH
27041: LD_VAR 0 10
27045: PPUSH
27046: CALL_OW 115
27050: GO 27113
27052: LD_INT 2
27054: DOUBLE
27055: EQUAL
27056: IFTRUE 27060
27058: GO 27082
27060: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27061: LD_VAR 0 1
27065: PPUSH
27066: LD_VAR 0 6
27070: PPUSH
27071: LD_VAR 0 7
27075: PPUSH
27076: CALL_OW 153
27080: GO 27113
27082: LD_INT 3
27084: DOUBLE
27085: EQUAL
27086: IFTRUE 27090
27088: GO 27112
27090: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27091: LD_VAR 0 1
27095: PPUSH
27096: LD_VAR 0 6
27100: PPUSH
27101: LD_VAR 0 7
27105: PPUSH
27106: CALL_OW 154
27110: GO 27113
27112: POP
// end ;
27113: LD_VAR 0 2
27117: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27118: LD_INT 0
27120: PPUSH
27121: PPUSH
27122: PPUSH
27123: PPUSH
27124: PPUSH
27125: PPUSH
// if not unit or not building then
27126: LD_VAR 0 1
27130: NOT
27131: PUSH
27132: LD_VAR 0 2
27136: NOT
27137: OR
27138: IFFALSE 27142
// exit ;
27140: GO 27300
// x := GetX ( building ) ;
27142: LD_ADDR_VAR 0 5
27146: PUSH
27147: LD_VAR 0 2
27151: PPUSH
27152: CALL_OW 250
27156: ST_TO_ADDR
// y := GetY ( building ) ;
27157: LD_ADDR_VAR 0 6
27161: PUSH
27162: LD_VAR 0 2
27166: PPUSH
27167: CALL_OW 251
27171: ST_TO_ADDR
// for i = 0 to 5 do
27172: LD_ADDR_VAR 0 4
27176: PUSH
27177: DOUBLE
27178: LD_INT 0
27180: DEC
27181: ST_TO_ADDR
27182: LD_INT 5
27184: PUSH
27185: FOR_TO
27186: IFFALSE 27298
// begin _x := ShiftX ( x , i , 3 ) ;
27188: LD_ADDR_VAR 0 7
27192: PUSH
27193: LD_VAR 0 5
27197: PPUSH
27198: LD_VAR 0 4
27202: PPUSH
27203: LD_INT 3
27205: PPUSH
27206: CALL_OW 272
27210: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27211: LD_ADDR_VAR 0 8
27215: PUSH
27216: LD_VAR 0 6
27220: PPUSH
27221: LD_VAR 0 4
27225: PPUSH
27226: LD_INT 3
27228: PPUSH
27229: CALL_OW 273
27233: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27234: LD_VAR 0 7
27238: PPUSH
27239: LD_VAR 0 8
27243: PPUSH
27244: CALL_OW 488
27248: NOT
27249: IFFALSE 27253
// continue ;
27251: GO 27185
// if HexInfo ( _x , _y ) = 0 then
27253: LD_VAR 0 7
27257: PPUSH
27258: LD_VAR 0 8
27262: PPUSH
27263: CALL_OW 428
27267: PUSH
27268: LD_INT 0
27270: EQUAL
27271: IFFALSE 27296
// begin ComMoveXY ( unit , _x , _y ) ;
27273: LD_VAR 0 1
27277: PPUSH
27278: LD_VAR 0 7
27282: PPUSH
27283: LD_VAR 0 8
27287: PPUSH
27288: CALL_OW 111
// exit ;
27292: POP
27293: POP
27294: GO 27300
// end ; end ;
27296: GO 27185
27298: POP
27299: POP
// end ;
27300: LD_VAR 0 3
27304: RET
// export function ScanBase ( side , base_area ) ; begin
27305: LD_INT 0
27307: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27308: LD_ADDR_VAR 0 3
27312: PUSH
27313: LD_VAR 0 2
27317: PPUSH
27318: LD_INT 81
27320: PUSH
27321: LD_VAR 0 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PPUSH
27330: CALL_OW 70
27334: ST_TO_ADDR
// end ;
27335: LD_VAR 0 3
27339: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27340: LD_INT 0
27342: PPUSH
27343: PPUSH
27344: PPUSH
27345: PPUSH
// result := false ;
27346: LD_ADDR_VAR 0 2
27350: PUSH
27351: LD_INT 0
27353: ST_TO_ADDR
// side := GetSide ( unit ) ;
27354: LD_ADDR_VAR 0 3
27358: PUSH
27359: LD_VAR 0 1
27363: PPUSH
27364: CALL_OW 255
27368: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27369: LD_ADDR_VAR 0 4
27373: PUSH
27374: LD_VAR 0 1
27378: PPUSH
27379: CALL_OW 248
27383: ST_TO_ADDR
// case nat of 1 :
27384: LD_VAR 0 4
27388: PUSH
27389: LD_INT 1
27391: DOUBLE
27392: EQUAL
27393: IFTRUE 27397
27395: GO 27408
27397: POP
// tech := tech_lassight ; 2 :
27398: LD_ADDR_VAR 0 5
27402: PUSH
27403: LD_INT 12
27405: ST_TO_ADDR
27406: GO 27447
27408: LD_INT 2
27410: DOUBLE
27411: EQUAL
27412: IFTRUE 27416
27414: GO 27427
27416: POP
// tech := tech_mortar ; 3 :
27417: LD_ADDR_VAR 0 5
27421: PUSH
27422: LD_INT 41
27424: ST_TO_ADDR
27425: GO 27447
27427: LD_INT 3
27429: DOUBLE
27430: EQUAL
27431: IFTRUE 27435
27433: GO 27446
27435: POP
// tech := tech_bazooka ; end ;
27436: LD_ADDR_VAR 0 5
27440: PUSH
27441: LD_INT 44
27443: ST_TO_ADDR
27444: GO 27447
27446: POP
// if Researched ( side , tech ) then
27447: LD_VAR 0 3
27451: PPUSH
27452: LD_VAR 0 5
27456: PPUSH
27457: CALL_OW 325
27461: IFFALSE 27488
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27463: LD_ADDR_VAR 0 2
27467: PUSH
27468: LD_INT 5
27470: PUSH
27471: LD_INT 8
27473: PUSH
27474: LD_INT 9
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: PUSH
27482: LD_VAR 0 4
27486: ARRAY
27487: ST_TO_ADDR
// end ;
27488: LD_VAR 0 2
27492: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27493: LD_INT 0
27495: PPUSH
27496: PPUSH
27497: PPUSH
// if not mines then
27498: LD_VAR 0 2
27502: NOT
27503: IFFALSE 27507
// exit ;
27505: GO 27651
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27507: LD_ADDR_VAR 0 5
27511: PUSH
27512: LD_INT 81
27514: PUSH
27515: LD_VAR 0 1
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 3
27526: PUSH
27527: LD_INT 21
27529: PUSH
27530: LD_INT 3
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PPUSH
27545: CALL_OW 69
27549: ST_TO_ADDR
// for i in mines do
27550: LD_ADDR_VAR 0 4
27554: PUSH
27555: LD_VAR 0 2
27559: PUSH
27560: FOR_IN
27561: IFFALSE 27649
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27563: LD_VAR 0 4
27567: PUSH
27568: LD_INT 1
27570: ARRAY
27571: PPUSH
27572: LD_VAR 0 4
27576: PUSH
27577: LD_INT 2
27579: ARRAY
27580: PPUSH
27581: CALL_OW 458
27585: NOT
27586: IFFALSE 27590
// continue ;
27588: GO 27560
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27590: LD_VAR 0 4
27594: PUSH
27595: LD_INT 1
27597: ARRAY
27598: PPUSH
27599: LD_VAR 0 4
27603: PUSH
27604: LD_INT 2
27606: ARRAY
27607: PPUSH
27608: CALL_OW 428
27612: PUSH
27613: LD_VAR 0 5
27617: IN
27618: IFFALSE 27647
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27620: LD_VAR 0 4
27624: PUSH
27625: LD_INT 1
27627: ARRAY
27628: PPUSH
27629: LD_VAR 0 4
27633: PUSH
27634: LD_INT 2
27636: ARRAY
27637: PPUSH
27638: LD_VAR 0 1
27642: PPUSH
27643: CALL_OW 456
// end ;
27647: GO 27560
27649: POP
27650: POP
// end ;
27651: LD_VAR 0 3
27655: RET
// export function Count ( array ) ; var i ; begin
27656: LD_INT 0
27658: PPUSH
27659: PPUSH
// result := 0 ;
27660: LD_ADDR_VAR 0 2
27664: PUSH
27665: LD_INT 0
27667: ST_TO_ADDR
// for i in array do
27668: LD_ADDR_VAR 0 3
27672: PUSH
27673: LD_VAR 0 1
27677: PUSH
27678: FOR_IN
27679: IFFALSE 27703
// if i then
27681: LD_VAR 0 3
27685: IFFALSE 27701
// result := result + 1 ;
27687: LD_ADDR_VAR 0 2
27691: PUSH
27692: LD_VAR 0 2
27696: PUSH
27697: LD_INT 1
27699: PLUS
27700: ST_TO_ADDR
27701: GO 27678
27703: POP
27704: POP
// end ;
27705: LD_VAR 0 2
27709: RET
// export function IsEmpty ( building ) ; begin
27710: LD_INT 0
27712: PPUSH
// if not building then
27713: LD_VAR 0 1
27717: NOT
27718: IFFALSE 27722
// exit ;
27720: GO 27765
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27722: LD_ADDR_VAR 0 2
27726: PUSH
27727: LD_VAR 0 1
27731: PUSH
27732: LD_INT 22
27734: PUSH
27735: LD_VAR 0 1
27739: PPUSH
27740: CALL_OW 255
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 58
27751: PUSH
27752: EMPTY
27753: LIST
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PPUSH
27759: CALL_OW 69
27763: IN
27764: ST_TO_ADDR
// end ;
27765: LD_VAR 0 2
27769: RET
// export function IsNotFull ( building ) ; begin
27770: LD_INT 0
27772: PPUSH
// if not building then
27773: LD_VAR 0 1
27777: NOT
27778: IFFALSE 27782
// exit ;
27780: GO 27801
// result := UnitsInside ( building ) < 6 ;
27782: LD_ADDR_VAR 0 2
27786: PUSH
27787: LD_VAR 0 1
27791: PPUSH
27792: CALL_OW 313
27796: PUSH
27797: LD_INT 6
27799: LESS
27800: ST_TO_ADDR
// end ;
27801: LD_VAR 0 2
27805: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27806: LD_INT 0
27808: PPUSH
27809: PPUSH
27810: PPUSH
27811: PPUSH
// tmp := [ ] ;
27812: LD_ADDR_VAR 0 3
27816: PUSH
27817: EMPTY
27818: ST_TO_ADDR
// list := [ ] ;
27819: LD_ADDR_VAR 0 5
27823: PUSH
27824: EMPTY
27825: ST_TO_ADDR
// for i = 16 to 25 do
27826: LD_ADDR_VAR 0 4
27830: PUSH
27831: DOUBLE
27832: LD_INT 16
27834: DEC
27835: ST_TO_ADDR
27836: LD_INT 25
27838: PUSH
27839: FOR_TO
27840: IFFALSE 27913
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27842: LD_ADDR_VAR 0 3
27846: PUSH
27847: LD_VAR 0 3
27851: PUSH
27852: LD_INT 22
27854: PUSH
27855: LD_VAR 0 1
27859: PPUSH
27860: CALL_OW 255
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 91
27871: PUSH
27872: LD_VAR 0 1
27876: PUSH
27877: LD_INT 6
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 30
27887: PUSH
27888: LD_VAR 0 4
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: PUSH
27902: EMPTY
27903: LIST
27904: PPUSH
27905: CALL_OW 69
27909: ADD
27910: ST_TO_ADDR
27911: GO 27839
27913: POP
27914: POP
// for i = 1 to tmp do
27915: LD_ADDR_VAR 0 4
27919: PUSH
27920: DOUBLE
27921: LD_INT 1
27923: DEC
27924: ST_TO_ADDR
27925: LD_VAR 0 3
27929: PUSH
27930: FOR_TO
27931: IFFALSE 28019
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27933: LD_ADDR_VAR 0 5
27937: PUSH
27938: LD_VAR 0 5
27942: PUSH
27943: LD_VAR 0 3
27947: PUSH
27948: LD_VAR 0 4
27952: ARRAY
27953: PPUSH
27954: CALL_OW 266
27958: PUSH
27959: LD_VAR 0 3
27963: PUSH
27964: LD_VAR 0 4
27968: ARRAY
27969: PPUSH
27970: CALL_OW 250
27974: PUSH
27975: LD_VAR 0 3
27979: PUSH
27980: LD_VAR 0 4
27984: ARRAY
27985: PPUSH
27986: CALL_OW 251
27990: PUSH
27991: LD_VAR 0 3
27995: PUSH
27996: LD_VAR 0 4
28000: ARRAY
28001: PPUSH
28002: CALL_OW 254
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: ADD
28016: ST_TO_ADDR
28017: GO 27930
28019: POP
28020: POP
// result := list ;
28021: LD_ADDR_VAR 0 2
28025: PUSH
28026: LD_VAR 0 5
28030: ST_TO_ADDR
// end ;
28031: LD_VAR 0 2
28035: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28036: LD_INT 0
28038: PPUSH
28039: PPUSH
28040: PPUSH
28041: PPUSH
28042: PPUSH
28043: PPUSH
28044: PPUSH
// if not factory then
28045: LD_VAR 0 1
28049: NOT
28050: IFFALSE 28054
// exit ;
28052: GO 28647
// if control = control_apeman then
28054: LD_VAR 0 4
28058: PUSH
28059: LD_INT 5
28061: EQUAL
28062: IFFALSE 28171
// begin tmp := UnitsInside ( factory ) ;
28064: LD_ADDR_VAR 0 8
28068: PUSH
28069: LD_VAR 0 1
28073: PPUSH
28074: CALL_OW 313
28078: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28079: LD_VAR 0 8
28083: PPUSH
28084: LD_INT 25
28086: PUSH
28087: LD_INT 12
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PPUSH
28094: CALL_OW 72
28098: NOT
28099: IFFALSE 28109
// control := control_manual ;
28101: LD_ADDR_VAR 0 4
28105: PUSH
28106: LD_INT 1
28108: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28109: LD_ADDR_VAR 0 8
28113: PUSH
28114: LD_VAR 0 1
28118: PPUSH
28119: CALL 27806 0 1
28123: ST_TO_ADDR
// if tmp then
28124: LD_VAR 0 8
28128: IFFALSE 28171
// begin for i in tmp do
28130: LD_ADDR_VAR 0 7
28134: PUSH
28135: LD_VAR 0 8
28139: PUSH
28140: FOR_IN
28141: IFFALSE 28169
// if i [ 1 ] = b_ext_radio then
28143: LD_VAR 0 7
28147: PUSH
28148: LD_INT 1
28150: ARRAY
28151: PUSH
28152: LD_INT 22
28154: EQUAL
28155: IFFALSE 28167
// begin control := control_remote ;
28157: LD_ADDR_VAR 0 4
28161: PUSH
28162: LD_INT 2
28164: ST_TO_ADDR
// break ;
28165: GO 28169
// end ;
28167: GO 28140
28169: POP
28170: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28171: LD_VAR 0 1
28175: PPUSH
28176: LD_VAR 0 2
28180: PPUSH
28181: LD_VAR 0 3
28185: PPUSH
28186: LD_VAR 0 4
28190: PPUSH
28191: LD_VAR 0 5
28195: PPUSH
28196: CALL_OW 448
28200: IFFALSE 28235
// begin result := [ chassis , engine , control , weapon ] ;
28202: LD_ADDR_VAR 0 6
28206: PUSH
28207: LD_VAR 0 2
28211: PUSH
28212: LD_VAR 0 3
28216: PUSH
28217: LD_VAR 0 4
28221: PUSH
28222: LD_VAR 0 5
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: ST_TO_ADDR
// exit ;
28233: GO 28647
// end ; _chassis := AvailableChassisList ( factory ) ;
28235: LD_ADDR_VAR 0 9
28239: PUSH
28240: LD_VAR 0 1
28244: PPUSH
28245: CALL_OW 475
28249: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28250: LD_ADDR_VAR 0 11
28254: PUSH
28255: LD_VAR 0 1
28259: PPUSH
28260: CALL_OW 476
28264: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28265: LD_ADDR_VAR 0 12
28269: PUSH
28270: LD_VAR 0 1
28274: PPUSH
28275: CALL_OW 477
28279: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28280: LD_ADDR_VAR 0 10
28284: PUSH
28285: LD_VAR 0 1
28289: PPUSH
28290: CALL_OW 478
28294: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28295: LD_VAR 0 9
28299: NOT
28300: PUSH
28301: LD_VAR 0 11
28305: NOT
28306: OR
28307: PUSH
28308: LD_VAR 0 12
28312: NOT
28313: OR
28314: PUSH
28315: LD_VAR 0 10
28319: NOT
28320: OR
28321: IFFALSE 28356
// begin result := [ chassis , engine , control , weapon ] ;
28323: LD_ADDR_VAR 0 6
28327: PUSH
28328: LD_VAR 0 2
28332: PUSH
28333: LD_VAR 0 3
28337: PUSH
28338: LD_VAR 0 4
28342: PUSH
28343: LD_VAR 0 5
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: ST_TO_ADDR
// exit ;
28354: GO 28647
// end ; if not chassis in _chassis then
28356: LD_VAR 0 2
28360: PUSH
28361: LD_VAR 0 9
28365: IN
28366: NOT
28367: IFFALSE 28393
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28369: LD_ADDR_VAR 0 2
28373: PUSH
28374: LD_VAR 0 9
28378: PUSH
28379: LD_INT 1
28381: PPUSH
28382: LD_VAR 0 9
28386: PPUSH
28387: CALL_OW 12
28391: ARRAY
28392: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28393: LD_VAR 0 2
28397: PPUSH
28398: LD_VAR 0 3
28402: PPUSH
28403: CALL 28652 0 2
28407: NOT
28408: IFFALSE 28467
// repeat engine := _engine [ 1 ] ;
28410: LD_ADDR_VAR 0 3
28414: PUSH
28415: LD_VAR 0 11
28419: PUSH
28420: LD_INT 1
28422: ARRAY
28423: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28424: LD_ADDR_VAR 0 11
28428: PUSH
28429: LD_VAR 0 11
28433: PPUSH
28434: LD_INT 1
28436: PPUSH
28437: CALL_OW 3
28441: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28442: LD_VAR 0 2
28446: PPUSH
28447: LD_VAR 0 3
28451: PPUSH
28452: CALL 28652 0 2
28456: PUSH
28457: LD_VAR 0 11
28461: PUSH
28462: EMPTY
28463: EQUAL
28464: OR
28465: IFFALSE 28410
// if not control in _control then
28467: LD_VAR 0 4
28471: PUSH
28472: LD_VAR 0 12
28476: IN
28477: NOT
28478: IFFALSE 28504
// control := _control [ rand ( 1 , _control ) ] ;
28480: LD_ADDR_VAR 0 4
28484: PUSH
28485: LD_VAR 0 12
28489: PUSH
28490: LD_INT 1
28492: PPUSH
28493: LD_VAR 0 12
28497: PPUSH
28498: CALL_OW 12
28502: ARRAY
28503: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_VAR 0 5
28513: PPUSH
28514: CALL 28872 0 2
28518: NOT
28519: IFFALSE 28578
// repeat weapon := _weapon [ 1 ] ;
28521: LD_ADDR_VAR 0 5
28525: PUSH
28526: LD_VAR 0 10
28530: PUSH
28531: LD_INT 1
28533: ARRAY
28534: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28535: LD_ADDR_VAR 0 10
28539: PUSH
28540: LD_VAR 0 10
28544: PPUSH
28545: LD_INT 1
28547: PPUSH
28548: CALL_OW 3
28552: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28553: LD_VAR 0 2
28557: PPUSH
28558: LD_VAR 0 5
28562: PPUSH
28563: CALL 28872 0 2
28567: PUSH
28568: LD_VAR 0 10
28572: PUSH
28573: EMPTY
28574: EQUAL
28575: OR
28576: IFFALSE 28521
// result := [ ] ;
28578: LD_ADDR_VAR 0 6
28582: PUSH
28583: EMPTY
28584: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28585: LD_VAR 0 1
28589: PPUSH
28590: LD_VAR 0 2
28594: PPUSH
28595: LD_VAR 0 3
28599: PPUSH
28600: LD_VAR 0 4
28604: PPUSH
28605: LD_VAR 0 5
28609: PPUSH
28610: CALL_OW 448
28614: IFFALSE 28647
// result := [ chassis , engine , control , weapon ] ;
28616: LD_ADDR_VAR 0 6
28620: PUSH
28621: LD_VAR 0 2
28625: PUSH
28626: LD_VAR 0 3
28630: PUSH
28631: LD_VAR 0 4
28635: PUSH
28636: LD_VAR 0 5
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: ST_TO_ADDR
// end ;
28647: LD_VAR 0 6
28651: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28652: LD_INT 0
28654: PPUSH
// if not chassis or not engine then
28655: LD_VAR 0 1
28659: NOT
28660: PUSH
28661: LD_VAR 0 2
28665: NOT
28666: OR
28667: IFFALSE 28671
// exit ;
28669: GO 28867
// case engine of engine_solar :
28671: LD_VAR 0 2
28675: PUSH
28676: LD_INT 2
28678: DOUBLE
28679: EQUAL
28680: IFTRUE 28684
28682: GO 28722
28684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28685: LD_ADDR_VAR 0 3
28689: PUSH
28690: LD_INT 11
28692: PUSH
28693: LD_INT 12
28695: PUSH
28696: LD_INT 13
28698: PUSH
28699: LD_INT 14
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: LD_INT 3
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: ST_TO_ADDR
28720: GO 28851
28722: LD_INT 1
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28792
28730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28731: LD_ADDR_VAR 0 3
28735: PUSH
28736: LD_INT 11
28738: PUSH
28739: LD_INT 12
28741: PUSH
28742: LD_INT 13
28744: PUSH
28745: LD_INT 14
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: LD_INT 2
28753: PUSH
28754: LD_INT 3
28756: PUSH
28757: LD_INT 4
28759: PUSH
28760: LD_INT 5
28762: PUSH
28763: LD_INT 21
28765: PUSH
28766: LD_INT 23
28768: PUSH
28769: LD_INT 22
28771: PUSH
28772: LD_INT 24
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: ST_TO_ADDR
28790: GO 28851
28792: LD_INT 3
28794: DOUBLE
28795: EQUAL
28796: IFTRUE 28800
28798: GO 28850
28800: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28801: LD_ADDR_VAR 0 3
28805: PUSH
28806: LD_INT 13
28808: PUSH
28809: LD_INT 14
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: LD_INT 3
28817: PUSH
28818: LD_INT 4
28820: PUSH
28821: LD_INT 5
28823: PUSH
28824: LD_INT 21
28826: PUSH
28827: LD_INT 22
28829: PUSH
28830: LD_INT 23
28832: PUSH
28833: LD_INT 24
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: ST_TO_ADDR
28848: GO 28851
28850: POP
// result := ( chassis in result ) ;
28851: LD_ADDR_VAR 0 3
28855: PUSH
28856: LD_VAR 0 1
28860: PUSH
28861: LD_VAR 0 3
28865: IN
28866: ST_TO_ADDR
// end ;
28867: LD_VAR 0 3
28871: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28872: LD_INT 0
28874: PPUSH
// if not chassis or not weapon then
28875: LD_VAR 0 1
28879: NOT
28880: PUSH
28881: LD_VAR 0 2
28885: NOT
28886: OR
28887: IFFALSE 28891
// exit ;
28889: GO 29953
// case weapon of us_machine_gun :
28891: LD_VAR 0 2
28895: PUSH
28896: LD_INT 2
28898: DOUBLE
28899: EQUAL
28900: IFTRUE 28904
28902: GO 28934
28904: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28905: LD_ADDR_VAR 0 3
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: LD_INT 2
28915: PUSH
28916: LD_INT 3
28918: PUSH
28919: LD_INT 4
28921: PUSH
28922: LD_INT 5
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: ST_TO_ADDR
28932: GO 29937
28934: LD_INT 3
28936: DOUBLE
28937: EQUAL
28938: IFTRUE 28942
28940: GO 28972
28942: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28943: LD_ADDR_VAR 0 3
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: LD_INT 3
28956: PUSH
28957: LD_INT 4
28959: PUSH
28960: LD_INT 5
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: ST_TO_ADDR
28970: GO 29937
28972: LD_INT 11
28974: DOUBLE
28975: EQUAL
28976: IFTRUE 28980
28978: GO 29010
28980: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28981: LD_ADDR_VAR 0 3
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: LD_INT 4
28997: PUSH
28998: LD_INT 5
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: ST_TO_ADDR
29008: GO 29937
29010: LD_INT 4
29012: DOUBLE
29013: EQUAL
29014: IFTRUE 29018
29016: GO 29044
29018: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29019: LD_ADDR_VAR 0 3
29023: PUSH
29024: LD_INT 2
29026: PUSH
29027: LD_INT 3
29029: PUSH
29030: LD_INT 4
29032: PUSH
29033: LD_INT 5
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: ST_TO_ADDR
29042: GO 29937
29044: LD_INT 5
29046: DOUBLE
29047: EQUAL
29048: IFTRUE 29052
29050: GO 29078
29052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29053: LD_ADDR_VAR 0 3
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: LD_INT 3
29063: PUSH
29064: LD_INT 4
29066: PUSH
29067: LD_INT 5
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: ST_TO_ADDR
29076: GO 29937
29078: LD_INT 9
29080: DOUBLE
29081: EQUAL
29082: IFTRUE 29086
29084: GO 29112
29086: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29087: LD_ADDR_VAR 0 3
29091: PUSH
29092: LD_INT 2
29094: PUSH
29095: LD_INT 3
29097: PUSH
29098: LD_INT 4
29100: PUSH
29101: LD_INT 5
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: ST_TO_ADDR
29110: GO 29937
29112: LD_INT 7
29114: DOUBLE
29115: EQUAL
29116: IFTRUE 29120
29118: GO 29146
29120: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29121: LD_ADDR_VAR 0 3
29125: PUSH
29126: LD_INT 2
29128: PUSH
29129: LD_INT 3
29131: PUSH
29132: LD_INT 4
29134: PUSH
29135: LD_INT 5
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: ST_TO_ADDR
29144: GO 29937
29146: LD_INT 12
29148: DOUBLE
29149: EQUAL
29150: IFTRUE 29154
29152: GO 29180
29154: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29155: LD_ADDR_VAR 0 3
29159: PUSH
29160: LD_INT 2
29162: PUSH
29163: LD_INT 3
29165: PUSH
29166: LD_INT 4
29168: PUSH
29169: LD_INT 5
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: ST_TO_ADDR
29178: GO 29937
29180: LD_INT 13
29182: DOUBLE
29183: EQUAL
29184: IFTRUE 29188
29186: GO 29214
29188: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29189: LD_ADDR_VAR 0 3
29193: PUSH
29194: LD_INT 2
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: LD_INT 4
29202: PUSH
29203: LD_INT 5
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: ST_TO_ADDR
29212: GO 29937
29214: LD_INT 14
29216: DOUBLE
29217: EQUAL
29218: IFTRUE 29222
29220: GO 29240
29222: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29223: LD_ADDR_VAR 0 3
29227: PUSH
29228: LD_INT 4
29230: PUSH
29231: LD_INT 5
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: ST_TO_ADDR
29238: GO 29937
29240: LD_INT 6
29242: DOUBLE
29243: EQUAL
29244: IFTRUE 29248
29246: GO 29266
29248: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29249: LD_ADDR_VAR 0 3
29253: PUSH
29254: LD_INT 4
29256: PUSH
29257: LD_INT 5
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: ST_TO_ADDR
29264: GO 29937
29266: LD_INT 10
29268: DOUBLE
29269: EQUAL
29270: IFTRUE 29274
29272: GO 29292
29274: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29275: LD_ADDR_VAR 0 3
29279: PUSH
29280: LD_INT 4
29282: PUSH
29283: LD_INT 5
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: ST_TO_ADDR
29290: GO 29937
29292: LD_INT 22
29294: DOUBLE
29295: EQUAL
29296: IFTRUE 29300
29298: GO 29326
29300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29301: LD_ADDR_VAR 0 3
29305: PUSH
29306: LD_INT 11
29308: PUSH
29309: LD_INT 12
29311: PUSH
29312: LD_INT 13
29314: PUSH
29315: LD_INT 14
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: ST_TO_ADDR
29324: GO 29937
29326: LD_INT 23
29328: DOUBLE
29329: EQUAL
29330: IFTRUE 29334
29332: GO 29360
29334: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29335: LD_ADDR_VAR 0 3
29339: PUSH
29340: LD_INT 11
29342: PUSH
29343: LD_INT 12
29345: PUSH
29346: LD_INT 13
29348: PUSH
29349: LD_INT 14
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: ST_TO_ADDR
29358: GO 29937
29360: LD_INT 24
29362: DOUBLE
29363: EQUAL
29364: IFTRUE 29368
29366: GO 29394
29368: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29369: LD_ADDR_VAR 0 3
29373: PUSH
29374: LD_INT 11
29376: PUSH
29377: LD_INT 12
29379: PUSH
29380: LD_INT 13
29382: PUSH
29383: LD_INT 14
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: ST_TO_ADDR
29392: GO 29937
29394: LD_INT 30
29396: DOUBLE
29397: EQUAL
29398: IFTRUE 29402
29400: GO 29428
29402: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29403: LD_ADDR_VAR 0 3
29407: PUSH
29408: LD_INT 11
29410: PUSH
29411: LD_INT 12
29413: PUSH
29414: LD_INT 13
29416: PUSH
29417: LD_INT 14
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
29426: GO 29937
29428: LD_INT 25
29430: DOUBLE
29431: EQUAL
29432: IFTRUE 29436
29434: GO 29454
29436: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29437: LD_ADDR_VAR 0 3
29441: PUSH
29442: LD_INT 13
29444: PUSH
29445: LD_INT 14
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: ST_TO_ADDR
29452: GO 29937
29454: LD_INT 27
29456: DOUBLE
29457: EQUAL
29458: IFTRUE 29462
29460: GO 29480
29462: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29463: LD_ADDR_VAR 0 3
29467: PUSH
29468: LD_INT 13
29470: PUSH
29471: LD_INT 14
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: ST_TO_ADDR
29478: GO 29937
29480: LD_EXP 23
29484: DOUBLE
29485: EQUAL
29486: IFTRUE 29490
29488: GO 29516
29490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29491: LD_ADDR_VAR 0 3
29495: PUSH
29496: LD_INT 11
29498: PUSH
29499: LD_INT 12
29501: PUSH
29502: LD_INT 13
29504: PUSH
29505: LD_INT 14
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
29514: GO 29937
29516: LD_INT 28
29518: DOUBLE
29519: EQUAL
29520: IFTRUE 29524
29522: GO 29542
29524: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29525: LD_ADDR_VAR 0 3
29529: PUSH
29530: LD_INT 13
29532: PUSH
29533: LD_INT 14
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: ST_TO_ADDR
29540: GO 29937
29542: LD_INT 29
29544: DOUBLE
29545: EQUAL
29546: IFTRUE 29550
29548: GO 29568
29550: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29551: LD_ADDR_VAR 0 3
29555: PUSH
29556: LD_INT 13
29558: PUSH
29559: LD_INT 14
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: ST_TO_ADDR
29566: GO 29937
29568: LD_INT 31
29570: DOUBLE
29571: EQUAL
29572: IFTRUE 29576
29574: GO 29594
29576: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29577: LD_ADDR_VAR 0 3
29581: PUSH
29582: LD_INT 13
29584: PUSH
29585: LD_INT 14
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: ST_TO_ADDR
29592: GO 29937
29594: LD_INT 26
29596: DOUBLE
29597: EQUAL
29598: IFTRUE 29602
29600: GO 29620
29602: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 13
29610: PUSH
29611: LD_INT 14
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: ST_TO_ADDR
29618: GO 29937
29620: LD_INT 42
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29628
29626: GO 29654
29628: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29629: LD_ADDR_VAR 0 3
29633: PUSH
29634: LD_INT 21
29636: PUSH
29637: LD_INT 22
29639: PUSH
29640: LD_INT 23
29642: PUSH
29643: LD_INT 24
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: ST_TO_ADDR
29652: GO 29937
29654: LD_INT 43
29656: DOUBLE
29657: EQUAL
29658: IFTRUE 29662
29660: GO 29688
29662: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29663: LD_ADDR_VAR 0 3
29667: PUSH
29668: LD_INT 21
29670: PUSH
29671: LD_INT 22
29673: PUSH
29674: LD_INT 23
29676: PUSH
29677: LD_INT 24
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: ST_TO_ADDR
29686: GO 29937
29688: LD_INT 44
29690: DOUBLE
29691: EQUAL
29692: IFTRUE 29696
29694: GO 29722
29696: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29697: LD_ADDR_VAR 0 3
29701: PUSH
29702: LD_INT 21
29704: PUSH
29705: LD_INT 22
29707: PUSH
29708: LD_INT 23
29710: PUSH
29711: LD_INT 24
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: ST_TO_ADDR
29720: GO 29937
29722: LD_INT 45
29724: DOUBLE
29725: EQUAL
29726: IFTRUE 29730
29728: GO 29756
29730: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29731: LD_ADDR_VAR 0 3
29735: PUSH
29736: LD_INT 21
29738: PUSH
29739: LD_INT 22
29741: PUSH
29742: LD_INT 23
29744: PUSH
29745: LD_INT 24
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: ST_TO_ADDR
29754: GO 29937
29756: LD_INT 49
29758: DOUBLE
29759: EQUAL
29760: IFTRUE 29764
29762: GO 29790
29764: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29765: LD_ADDR_VAR 0 3
29769: PUSH
29770: LD_INT 21
29772: PUSH
29773: LD_INT 22
29775: PUSH
29776: LD_INT 23
29778: PUSH
29779: LD_INT 24
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: ST_TO_ADDR
29788: GO 29937
29790: LD_INT 51
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29824
29798: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29799: LD_ADDR_VAR 0 3
29803: PUSH
29804: LD_INT 21
29806: PUSH
29807: LD_INT 22
29809: PUSH
29810: LD_INT 23
29812: PUSH
29813: LD_INT 24
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: ST_TO_ADDR
29822: GO 29937
29824: LD_INT 52
29826: DOUBLE
29827: EQUAL
29828: IFTRUE 29832
29830: GO 29858
29832: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29833: LD_ADDR_VAR 0 3
29837: PUSH
29838: LD_INT 21
29840: PUSH
29841: LD_INT 22
29843: PUSH
29844: LD_INT 23
29846: PUSH
29847: LD_INT 24
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: ST_TO_ADDR
29856: GO 29937
29858: LD_INT 53
29860: DOUBLE
29861: EQUAL
29862: IFTRUE 29866
29864: GO 29884
29866: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29867: LD_ADDR_VAR 0 3
29871: PUSH
29872: LD_INT 23
29874: PUSH
29875: LD_INT 24
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: ST_TO_ADDR
29882: GO 29937
29884: LD_INT 46
29886: DOUBLE
29887: EQUAL
29888: IFTRUE 29892
29890: GO 29910
29892: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29893: LD_ADDR_VAR 0 3
29897: PUSH
29898: LD_INT 23
29900: PUSH
29901: LD_INT 24
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: ST_TO_ADDR
29908: GO 29937
29910: LD_INT 47
29912: DOUBLE
29913: EQUAL
29914: IFTRUE 29918
29916: GO 29936
29918: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29919: LD_ADDR_VAR 0 3
29923: PUSH
29924: LD_INT 23
29926: PUSH
29927: LD_INT 24
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: ST_TO_ADDR
29934: GO 29937
29936: POP
// result := ( chassis in result ) ;
29937: LD_ADDR_VAR 0 3
29941: PUSH
29942: LD_VAR 0 1
29946: PUSH
29947: LD_VAR 0 3
29951: IN
29952: ST_TO_ADDR
// end ;
29953: LD_VAR 0 3
29957: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29958: LD_INT 0
29960: PPUSH
29961: PPUSH
29962: PPUSH
29963: PPUSH
29964: PPUSH
29965: PPUSH
29966: PPUSH
// result := array ;
29967: LD_ADDR_VAR 0 5
29971: PUSH
29972: LD_VAR 0 1
29976: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29977: LD_VAR 0 1
29981: NOT
29982: PUSH
29983: LD_VAR 0 2
29987: NOT
29988: OR
29989: PUSH
29990: LD_VAR 0 3
29994: NOT
29995: OR
29996: PUSH
29997: LD_VAR 0 2
30001: PUSH
30002: LD_VAR 0 1
30006: GREATER
30007: OR
30008: PUSH
30009: LD_VAR 0 3
30013: PUSH
30014: LD_VAR 0 1
30018: GREATER
30019: OR
30020: IFFALSE 30024
// exit ;
30022: GO 30320
// if direction then
30024: LD_VAR 0 4
30028: IFFALSE 30092
// begin d := 1 ;
30030: LD_ADDR_VAR 0 9
30034: PUSH
30035: LD_INT 1
30037: ST_TO_ADDR
// if i_from > i_to then
30038: LD_VAR 0 2
30042: PUSH
30043: LD_VAR 0 3
30047: GREATER
30048: IFFALSE 30074
// length := ( array - i_from ) + i_to else
30050: LD_ADDR_VAR 0 11
30054: PUSH
30055: LD_VAR 0 1
30059: PUSH
30060: LD_VAR 0 2
30064: MINUS
30065: PUSH
30066: LD_VAR 0 3
30070: PLUS
30071: ST_TO_ADDR
30072: GO 30090
// length := i_to - i_from ;
30074: LD_ADDR_VAR 0 11
30078: PUSH
30079: LD_VAR 0 3
30083: PUSH
30084: LD_VAR 0 2
30088: MINUS
30089: ST_TO_ADDR
// end else
30090: GO 30153
// begin d := - 1 ;
30092: LD_ADDR_VAR 0 9
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: ST_TO_ADDR
// if i_from > i_to then
30101: LD_VAR 0 2
30105: PUSH
30106: LD_VAR 0 3
30110: GREATER
30111: IFFALSE 30131
// length := i_from - i_to else
30113: LD_ADDR_VAR 0 11
30117: PUSH
30118: LD_VAR 0 2
30122: PUSH
30123: LD_VAR 0 3
30127: MINUS
30128: ST_TO_ADDR
30129: GO 30153
// length := ( array - i_to ) + i_from ;
30131: LD_ADDR_VAR 0 11
30135: PUSH
30136: LD_VAR 0 1
30140: PUSH
30141: LD_VAR 0 3
30145: MINUS
30146: PUSH
30147: LD_VAR 0 2
30151: PLUS
30152: ST_TO_ADDR
// end ; if not length then
30153: LD_VAR 0 11
30157: NOT
30158: IFFALSE 30162
// exit ;
30160: GO 30320
// tmp := array ;
30162: LD_ADDR_VAR 0 10
30166: PUSH
30167: LD_VAR 0 1
30171: ST_TO_ADDR
// for i = 1 to length do
30172: LD_ADDR_VAR 0 6
30176: PUSH
30177: DOUBLE
30178: LD_INT 1
30180: DEC
30181: ST_TO_ADDR
30182: LD_VAR 0 11
30186: PUSH
30187: FOR_TO
30188: IFFALSE 30308
// begin for j = 1 to array do
30190: LD_ADDR_VAR 0 7
30194: PUSH
30195: DOUBLE
30196: LD_INT 1
30198: DEC
30199: ST_TO_ADDR
30200: LD_VAR 0 1
30204: PUSH
30205: FOR_TO
30206: IFFALSE 30294
// begin k := j + d ;
30208: LD_ADDR_VAR 0 8
30212: PUSH
30213: LD_VAR 0 7
30217: PUSH
30218: LD_VAR 0 9
30222: PLUS
30223: ST_TO_ADDR
// if k > array then
30224: LD_VAR 0 8
30228: PUSH
30229: LD_VAR 0 1
30233: GREATER
30234: IFFALSE 30244
// k := 1 ;
30236: LD_ADDR_VAR 0 8
30240: PUSH
30241: LD_INT 1
30243: ST_TO_ADDR
// if not k then
30244: LD_VAR 0 8
30248: NOT
30249: IFFALSE 30261
// k := array ;
30251: LD_ADDR_VAR 0 8
30255: PUSH
30256: LD_VAR 0 1
30260: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30261: LD_ADDR_VAR 0 10
30265: PUSH
30266: LD_VAR 0 10
30270: PPUSH
30271: LD_VAR 0 8
30275: PPUSH
30276: LD_VAR 0 1
30280: PUSH
30281: LD_VAR 0 7
30285: ARRAY
30286: PPUSH
30287: CALL_OW 1
30291: ST_TO_ADDR
// end ;
30292: GO 30205
30294: POP
30295: POP
// array := tmp ;
30296: LD_ADDR_VAR 0 1
30300: PUSH
30301: LD_VAR 0 10
30305: ST_TO_ADDR
// end ;
30306: GO 30187
30308: POP
30309: POP
// result := array ;
30310: LD_ADDR_VAR 0 5
30314: PUSH
30315: LD_VAR 0 1
30319: ST_TO_ADDR
// end ;
30320: LD_VAR 0 5
30324: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30325: LD_INT 0
30327: PPUSH
30328: PPUSH
// result := 0 ;
30329: LD_ADDR_VAR 0 3
30333: PUSH
30334: LD_INT 0
30336: ST_TO_ADDR
// if not array or not value in array then
30337: LD_VAR 0 1
30341: NOT
30342: PUSH
30343: LD_VAR 0 2
30347: PUSH
30348: LD_VAR 0 1
30352: IN
30353: NOT
30354: OR
30355: IFFALSE 30359
// exit ;
30357: GO 30413
// for i = 1 to array do
30359: LD_ADDR_VAR 0 4
30363: PUSH
30364: DOUBLE
30365: LD_INT 1
30367: DEC
30368: ST_TO_ADDR
30369: LD_VAR 0 1
30373: PUSH
30374: FOR_TO
30375: IFFALSE 30411
// if value = array [ i ] then
30377: LD_VAR 0 2
30381: PUSH
30382: LD_VAR 0 1
30386: PUSH
30387: LD_VAR 0 4
30391: ARRAY
30392: EQUAL
30393: IFFALSE 30409
// begin result := i ;
30395: LD_ADDR_VAR 0 3
30399: PUSH
30400: LD_VAR 0 4
30404: ST_TO_ADDR
// exit ;
30405: POP
30406: POP
30407: GO 30413
// end ;
30409: GO 30374
30411: POP
30412: POP
// end ;
30413: LD_VAR 0 3
30417: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30418: LD_INT 0
30420: PPUSH
// vc_chassis := chassis ;
30421: LD_ADDR_OWVAR 37
30425: PUSH
30426: LD_VAR 0 1
30430: ST_TO_ADDR
// vc_engine := engine ;
30431: LD_ADDR_OWVAR 39
30435: PUSH
30436: LD_VAR 0 2
30440: ST_TO_ADDR
// vc_control := control ;
30441: LD_ADDR_OWVAR 38
30445: PUSH
30446: LD_VAR 0 3
30450: ST_TO_ADDR
// vc_weapon := weapon ;
30451: LD_ADDR_OWVAR 40
30455: PUSH
30456: LD_VAR 0 4
30460: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30461: LD_ADDR_OWVAR 41
30465: PUSH
30466: LD_VAR 0 5
30470: ST_TO_ADDR
// end ;
30471: LD_VAR 0 6
30475: RET
// export function WantPlant ( unit ) ; var task ; begin
30476: LD_INT 0
30478: PPUSH
30479: PPUSH
// result := false ;
30480: LD_ADDR_VAR 0 2
30484: PUSH
30485: LD_INT 0
30487: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30488: LD_ADDR_VAR 0 3
30492: PUSH
30493: LD_VAR 0 1
30497: PPUSH
30498: CALL_OW 437
30502: ST_TO_ADDR
// if task then
30503: LD_VAR 0 3
30507: IFFALSE 30535
// if task [ 1 ] [ 1 ] = p then
30509: LD_VAR 0 3
30513: PUSH
30514: LD_INT 1
30516: ARRAY
30517: PUSH
30518: LD_INT 1
30520: ARRAY
30521: PUSH
30522: LD_STRING p
30524: EQUAL
30525: IFFALSE 30535
// result := true ;
30527: LD_ADDR_VAR 0 2
30531: PUSH
30532: LD_INT 1
30534: ST_TO_ADDR
// end ;
30535: LD_VAR 0 2
30539: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30540: LD_INT 0
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
// if pos < 1 then
30546: LD_VAR 0 2
30550: PUSH
30551: LD_INT 1
30553: LESS
30554: IFFALSE 30558
// exit ;
30556: GO 30861
// if pos = 1 then
30558: LD_VAR 0 2
30562: PUSH
30563: LD_INT 1
30565: EQUAL
30566: IFFALSE 30599
// result := Replace ( arr , pos [ 1 ] , value ) else
30568: LD_ADDR_VAR 0 4
30572: PUSH
30573: LD_VAR 0 1
30577: PPUSH
30578: LD_VAR 0 2
30582: PUSH
30583: LD_INT 1
30585: ARRAY
30586: PPUSH
30587: LD_VAR 0 3
30591: PPUSH
30592: CALL_OW 1
30596: ST_TO_ADDR
30597: GO 30861
// begin tmp := arr ;
30599: LD_ADDR_VAR 0 6
30603: PUSH
30604: LD_VAR 0 1
30608: ST_TO_ADDR
// s_arr := [ tmp ] ;
30609: LD_ADDR_VAR 0 7
30613: PUSH
30614: LD_VAR 0 6
30618: PUSH
30619: EMPTY
30620: LIST
30621: ST_TO_ADDR
// for i = 1 to pos - 1 do
30622: LD_ADDR_VAR 0 5
30626: PUSH
30627: DOUBLE
30628: LD_INT 1
30630: DEC
30631: ST_TO_ADDR
30632: LD_VAR 0 2
30636: PUSH
30637: LD_INT 1
30639: MINUS
30640: PUSH
30641: FOR_TO
30642: IFFALSE 30687
// begin tmp := tmp [ pos [ i ] ] ;
30644: LD_ADDR_VAR 0 6
30648: PUSH
30649: LD_VAR 0 6
30653: PUSH
30654: LD_VAR 0 2
30658: PUSH
30659: LD_VAR 0 5
30663: ARRAY
30664: ARRAY
30665: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30666: LD_ADDR_VAR 0 7
30670: PUSH
30671: LD_VAR 0 7
30675: PUSH
30676: LD_VAR 0 6
30680: PUSH
30681: EMPTY
30682: LIST
30683: ADD
30684: ST_TO_ADDR
// end ;
30685: GO 30641
30687: POP
30688: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30689: LD_ADDR_VAR 0 6
30693: PUSH
30694: LD_VAR 0 6
30698: PPUSH
30699: LD_VAR 0 2
30703: PUSH
30704: LD_VAR 0 2
30708: ARRAY
30709: PPUSH
30710: LD_VAR 0 3
30714: PPUSH
30715: CALL_OW 1
30719: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30720: LD_ADDR_VAR 0 7
30724: PUSH
30725: LD_VAR 0 7
30729: PPUSH
30730: LD_VAR 0 7
30734: PPUSH
30735: LD_VAR 0 6
30739: PPUSH
30740: CALL_OW 1
30744: ST_TO_ADDR
// for i = s_arr downto 2 do
30745: LD_ADDR_VAR 0 5
30749: PUSH
30750: DOUBLE
30751: LD_VAR 0 7
30755: INC
30756: ST_TO_ADDR
30757: LD_INT 2
30759: PUSH
30760: FOR_DOWNTO
30761: IFFALSE 30845
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30763: LD_ADDR_VAR 0 6
30767: PUSH
30768: LD_VAR 0 7
30772: PUSH
30773: LD_VAR 0 5
30777: PUSH
30778: LD_INT 1
30780: MINUS
30781: ARRAY
30782: PPUSH
30783: LD_VAR 0 2
30787: PUSH
30788: LD_VAR 0 5
30792: PUSH
30793: LD_INT 1
30795: MINUS
30796: ARRAY
30797: PPUSH
30798: LD_VAR 0 7
30802: PUSH
30803: LD_VAR 0 5
30807: ARRAY
30808: PPUSH
30809: CALL_OW 1
30813: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30814: LD_ADDR_VAR 0 7
30818: PUSH
30819: LD_VAR 0 7
30823: PPUSH
30824: LD_VAR 0 5
30828: PUSH
30829: LD_INT 1
30831: MINUS
30832: PPUSH
30833: LD_VAR 0 6
30837: PPUSH
30838: CALL_OW 1
30842: ST_TO_ADDR
// end ;
30843: GO 30760
30845: POP
30846: POP
// result := s_arr [ 1 ] ;
30847: LD_ADDR_VAR 0 4
30851: PUSH
30852: LD_VAR 0 7
30856: PUSH
30857: LD_INT 1
30859: ARRAY
30860: ST_TO_ADDR
// end ; end ;
30861: LD_VAR 0 4
30865: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30866: LD_INT 0
30868: PPUSH
30869: PPUSH
// if not list then
30870: LD_VAR 0 1
30874: NOT
30875: IFFALSE 30879
// exit ;
30877: GO 30970
// i := list [ pos1 ] ;
30879: LD_ADDR_VAR 0 5
30883: PUSH
30884: LD_VAR 0 1
30888: PUSH
30889: LD_VAR 0 2
30893: ARRAY
30894: ST_TO_ADDR
// if not i then
30895: LD_VAR 0 5
30899: NOT
30900: IFFALSE 30904
// exit ;
30902: GO 30970
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30904: LD_ADDR_VAR 0 1
30908: PUSH
30909: LD_VAR 0 1
30913: PPUSH
30914: LD_VAR 0 2
30918: PPUSH
30919: LD_VAR 0 1
30923: PUSH
30924: LD_VAR 0 3
30928: ARRAY
30929: PPUSH
30930: CALL_OW 1
30934: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30935: LD_ADDR_VAR 0 1
30939: PUSH
30940: LD_VAR 0 1
30944: PPUSH
30945: LD_VAR 0 3
30949: PPUSH
30950: LD_VAR 0 5
30954: PPUSH
30955: CALL_OW 1
30959: ST_TO_ADDR
// result := list ;
30960: LD_ADDR_VAR 0 4
30964: PUSH
30965: LD_VAR 0 1
30969: ST_TO_ADDR
// end ;
30970: LD_VAR 0 4
30974: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30975: LD_INT 0
30977: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30978: LD_ADDR_VAR 0 5
30982: PUSH
30983: LD_VAR 0 1
30987: PPUSH
30988: CALL_OW 250
30992: PPUSH
30993: LD_VAR 0 1
30997: PPUSH
30998: CALL_OW 251
31002: PPUSH
31003: LD_VAR 0 2
31007: PPUSH
31008: LD_VAR 0 3
31012: PPUSH
31013: LD_VAR 0 4
31017: PPUSH
31018: CALL 31028 0 5
31022: ST_TO_ADDR
// end ;
31023: LD_VAR 0 5
31027: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31028: LD_INT 0
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
// if not list then
31034: LD_VAR 0 3
31038: NOT
31039: IFFALSE 31043
// exit ;
31041: GO 31431
// result := [ ] ;
31043: LD_ADDR_VAR 0 6
31047: PUSH
31048: EMPTY
31049: ST_TO_ADDR
// for i in list do
31050: LD_ADDR_VAR 0 7
31054: PUSH
31055: LD_VAR 0 3
31059: PUSH
31060: FOR_IN
31061: IFFALSE 31263
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31063: LD_ADDR_VAR 0 9
31067: PUSH
31068: LD_VAR 0 7
31072: PPUSH
31073: LD_VAR 0 1
31077: PPUSH
31078: LD_VAR 0 2
31082: PPUSH
31083: CALL_OW 297
31087: ST_TO_ADDR
// if not result then
31088: LD_VAR 0 6
31092: NOT
31093: IFFALSE 31119
// result := [ [ i , tmp ] ] else
31095: LD_ADDR_VAR 0 6
31099: PUSH
31100: LD_VAR 0 7
31104: PUSH
31105: LD_VAR 0 9
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: EMPTY
31115: LIST
31116: ST_TO_ADDR
31117: GO 31261
// begin if result [ result ] [ 2 ] < tmp then
31119: LD_VAR 0 6
31123: PUSH
31124: LD_VAR 0 6
31128: ARRAY
31129: PUSH
31130: LD_INT 2
31132: ARRAY
31133: PUSH
31134: LD_VAR 0 9
31138: LESS
31139: IFFALSE 31181
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31141: LD_ADDR_VAR 0 6
31145: PUSH
31146: LD_VAR 0 6
31150: PPUSH
31151: LD_VAR 0 6
31155: PUSH
31156: LD_INT 1
31158: PLUS
31159: PPUSH
31160: LD_VAR 0 7
31164: PUSH
31165: LD_VAR 0 9
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PPUSH
31174: CALL_OW 2
31178: ST_TO_ADDR
31179: GO 31261
// for j = 1 to result do
31181: LD_ADDR_VAR 0 8
31185: PUSH
31186: DOUBLE
31187: LD_INT 1
31189: DEC
31190: ST_TO_ADDR
31191: LD_VAR 0 6
31195: PUSH
31196: FOR_TO
31197: IFFALSE 31259
// begin if tmp < result [ j ] [ 2 ] then
31199: LD_VAR 0 9
31203: PUSH
31204: LD_VAR 0 6
31208: PUSH
31209: LD_VAR 0 8
31213: ARRAY
31214: PUSH
31215: LD_INT 2
31217: ARRAY
31218: LESS
31219: IFFALSE 31257
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31221: LD_ADDR_VAR 0 6
31225: PUSH
31226: LD_VAR 0 6
31230: PPUSH
31231: LD_VAR 0 8
31235: PPUSH
31236: LD_VAR 0 7
31240: PUSH
31241: LD_VAR 0 9
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PPUSH
31250: CALL_OW 2
31254: ST_TO_ADDR
// break ;
31255: GO 31259
// end ; end ;
31257: GO 31196
31259: POP
31260: POP
// end ; end ;
31261: GO 31060
31263: POP
31264: POP
// if result and not asc then
31265: LD_VAR 0 6
31269: PUSH
31270: LD_VAR 0 4
31274: NOT
31275: AND
31276: IFFALSE 31351
// begin tmp := result ;
31278: LD_ADDR_VAR 0 9
31282: PUSH
31283: LD_VAR 0 6
31287: ST_TO_ADDR
// for i = tmp downto 1 do
31288: LD_ADDR_VAR 0 7
31292: PUSH
31293: DOUBLE
31294: LD_VAR 0 9
31298: INC
31299: ST_TO_ADDR
31300: LD_INT 1
31302: PUSH
31303: FOR_DOWNTO
31304: IFFALSE 31349
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31306: LD_ADDR_VAR 0 6
31310: PUSH
31311: LD_VAR 0 6
31315: PPUSH
31316: LD_VAR 0 9
31320: PUSH
31321: LD_VAR 0 7
31325: MINUS
31326: PUSH
31327: LD_INT 1
31329: PLUS
31330: PPUSH
31331: LD_VAR 0 9
31335: PUSH
31336: LD_VAR 0 7
31340: ARRAY
31341: PPUSH
31342: CALL_OW 1
31346: ST_TO_ADDR
31347: GO 31303
31349: POP
31350: POP
// end ; tmp := [ ] ;
31351: LD_ADDR_VAR 0 9
31355: PUSH
31356: EMPTY
31357: ST_TO_ADDR
// if mode then
31358: LD_VAR 0 5
31362: IFFALSE 31431
// begin for i = 1 to result do
31364: LD_ADDR_VAR 0 7
31368: PUSH
31369: DOUBLE
31370: LD_INT 1
31372: DEC
31373: ST_TO_ADDR
31374: LD_VAR 0 6
31378: PUSH
31379: FOR_TO
31380: IFFALSE 31419
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31382: LD_ADDR_VAR 0 9
31386: PUSH
31387: LD_VAR 0 9
31391: PPUSH
31392: LD_VAR 0 7
31396: PPUSH
31397: LD_VAR 0 6
31401: PUSH
31402: LD_VAR 0 7
31406: ARRAY
31407: PUSH
31408: LD_INT 1
31410: ARRAY
31411: PPUSH
31412: CALL_OW 1
31416: ST_TO_ADDR
31417: GO 31379
31419: POP
31420: POP
// result := tmp ;
31421: LD_ADDR_VAR 0 6
31425: PUSH
31426: LD_VAR 0 9
31430: ST_TO_ADDR
// end ; end ;
31431: LD_VAR 0 6
31435: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31436: LD_INT 0
31438: PPUSH
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
31443: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31444: LD_ADDR_VAR 0 5
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: EMPTY
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: ST_TO_ADDR
// if not x or not y then
31466: LD_VAR 0 2
31470: NOT
31471: PUSH
31472: LD_VAR 0 3
31476: NOT
31477: OR
31478: IFFALSE 31482
// exit ;
31480: GO 33134
// if not range then
31482: LD_VAR 0 4
31486: NOT
31487: IFFALSE 31497
// range := 10 ;
31489: LD_ADDR_VAR 0 4
31493: PUSH
31494: LD_INT 10
31496: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31497: LD_ADDR_VAR 0 8
31501: PUSH
31502: LD_INT 81
31504: PUSH
31505: LD_VAR 0 1
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 92
31516: PUSH
31517: LD_VAR 0 2
31521: PUSH
31522: LD_VAR 0 3
31526: PUSH
31527: LD_VAR 0 4
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: PUSH
31541: LD_INT 21
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: PPUSH
31560: CALL_OW 69
31564: ST_TO_ADDR
// if not tmp then
31565: LD_VAR 0 8
31569: NOT
31570: IFFALSE 31574
// exit ;
31572: GO 33134
// for i in tmp do
31574: LD_ADDR_VAR 0 6
31578: PUSH
31579: LD_VAR 0 8
31583: PUSH
31584: FOR_IN
31585: IFFALSE 33109
// begin points := [ 0 , 0 , 0 ] ;
31587: LD_ADDR_VAR 0 9
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: ST_TO_ADDR
// bpoints := 1 ;
31606: LD_ADDR_VAR 0 10
31610: PUSH
31611: LD_INT 1
31613: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31614: LD_VAR 0 6
31618: PPUSH
31619: CALL_OW 247
31623: PUSH
31624: LD_INT 1
31626: DOUBLE
31627: EQUAL
31628: IFTRUE 31632
31630: GO 32210
31632: POP
// begin if GetClass ( i ) = 1 then
31633: LD_VAR 0 6
31637: PPUSH
31638: CALL_OW 257
31642: PUSH
31643: LD_INT 1
31645: EQUAL
31646: IFFALSE 31667
// points := [ 10 , 5 , 3 ] ;
31648: LD_ADDR_VAR 0 9
31652: PUSH
31653: LD_INT 10
31655: PUSH
31656: LD_INT 5
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31667: LD_VAR 0 6
31671: PPUSH
31672: CALL_OW 257
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: LD_INT 3
31682: PUSH
31683: LD_INT 4
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: LIST
31690: IN
31691: IFFALSE 31712
// points := [ 3 , 2 , 1 ] ;
31693: LD_ADDR_VAR 0 9
31697: PUSH
31698: LD_INT 3
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31712: LD_VAR 0 6
31716: PPUSH
31717: CALL_OW 257
31721: PUSH
31722: LD_INT 5
31724: EQUAL
31725: IFFALSE 31746
// points := [ 130 , 5 , 2 ] ;
31727: LD_ADDR_VAR 0 9
31731: PUSH
31732: LD_INT 130
31734: PUSH
31735: LD_INT 5
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31746: LD_VAR 0 6
31750: PPUSH
31751: CALL_OW 257
31755: PUSH
31756: LD_INT 8
31758: EQUAL
31759: IFFALSE 31780
// points := [ 35 , 35 , 30 ] ;
31761: LD_ADDR_VAR 0 9
31765: PUSH
31766: LD_INT 35
31768: PUSH
31769: LD_INT 35
31771: PUSH
31772: LD_INT 30
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31780: LD_VAR 0 6
31784: PPUSH
31785: CALL_OW 257
31789: PUSH
31790: LD_INT 9
31792: EQUAL
31793: IFFALSE 31814
// points := [ 20 , 55 , 40 ] ;
31795: LD_ADDR_VAR 0 9
31799: PUSH
31800: LD_INT 20
31802: PUSH
31803: LD_INT 55
31805: PUSH
31806: LD_INT 40
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31814: LD_VAR 0 6
31818: PPUSH
31819: CALL_OW 257
31823: PUSH
31824: LD_INT 12
31826: PUSH
31827: LD_INT 16
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: IN
31834: IFFALSE 31855
// points := [ 5 , 3 , 2 ] ;
31836: LD_ADDR_VAR 0 9
31840: PUSH
31841: LD_INT 5
31843: PUSH
31844: LD_INT 3
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31855: LD_VAR 0 6
31859: PPUSH
31860: CALL_OW 257
31864: PUSH
31865: LD_INT 17
31867: EQUAL
31868: IFFALSE 31889
// points := [ 100 , 50 , 75 ] ;
31870: LD_ADDR_VAR 0 9
31874: PUSH
31875: LD_INT 100
31877: PUSH
31878: LD_INT 50
31880: PUSH
31881: LD_INT 75
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31889: LD_VAR 0 6
31893: PPUSH
31894: CALL_OW 257
31898: PUSH
31899: LD_INT 15
31901: EQUAL
31902: IFFALSE 31923
// points := [ 10 , 5 , 3 ] ;
31904: LD_ADDR_VAR 0 9
31908: PUSH
31909: LD_INT 10
31911: PUSH
31912: LD_INT 5
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31923: LD_VAR 0 6
31927: PPUSH
31928: CALL_OW 257
31932: PUSH
31933: LD_INT 14
31935: EQUAL
31936: IFFALSE 31957
// points := [ 10 , 0 , 0 ] ;
31938: LD_ADDR_VAR 0 9
31942: PUSH
31943: LD_INT 10
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31957: LD_VAR 0 6
31961: PPUSH
31962: CALL_OW 257
31966: PUSH
31967: LD_INT 11
31969: EQUAL
31970: IFFALSE 31991
// points := [ 30 , 10 , 5 ] ;
31972: LD_ADDR_VAR 0 9
31976: PUSH
31977: LD_INT 30
31979: PUSH
31980: LD_INT 10
31982: PUSH
31983: LD_INT 5
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31991: LD_VAR 0 1
31995: PPUSH
31996: LD_INT 5
31998: PPUSH
31999: CALL_OW 321
32003: PUSH
32004: LD_INT 2
32006: EQUAL
32007: IFFALSE 32024
// bpoints := bpoints * 1.8 ;
32009: LD_ADDR_VAR 0 10
32013: PUSH
32014: LD_VAR 0 10
32018: PUSH
32019: LD_REAL  1.80000000000000E+0000
32022: MUL
32023: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32024: LD_VAR 0 6
32028: PPUSH
32029: CALL_OW 257
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: LD_INT 3
32042: PUSH
32043: LD_INT 4
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: IN
32052: PUSH
32053: LD_VAR 0 1
32057: PPUSH
32058: LD_INT 51
32060: PPUSH
32061: CALL_OW 321
32065: PUSH
32066: LD_INT 2
32068: EQUAL
32069: AND
32070: IFFALSE 32087
// bpoints := bpoints * 1.2 ;
32072: LD_ADDR_VAR 0 10
32076: PUSH
32077: LD_VAR 0 10
32081: PUSH
32082: LD_REAL  1.20000000000000E+0000
32085: MUL
32086: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32087: LD_VAR 0 6
32091: PPUSH
32092: CALL_OW 257
32096: PUSH
32097: LD_INT 5
32099: PUSH
32100: LD_INT 7
32102: PUSH
32103: LD_INT 9
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: LIST
32110: IN
32111: PUSH
32112: LD_VAR 0 1
32116: PPUSH
32117: LD_INT 52
32119: PPUSH
32120: CALL_OW 321
32124: PUSH
32125: LD_INT 2
32127: EQUAL
32128: AND
32129: IFFALSE 32146
// bpoints := bpoints * 1.5 ;
32131: LD_ADDR_VAR 0 10
32135: PUSH
32136: LD_VAR 0 10
32140: PUSH
32141: LD_REAL  1.50000000000000E+0000
32144: MUL
32145: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32146: LD_VAR 0 1
32150: PPUSH
32151: LD_INT 66
32153: PPUSH
32154: CALL_OW 321
32158: PUSH
32159: LD_INT 2
32161: EQUAL
32162: IFFALSE 32179
// bpoints := bpoints * 1.1 ;
32164: LD_ADDR_VAR 0 10
32168: PUSH
32169: LD_VAR 0 10
32173: PUSH
32174: LD_REAL  1.10000000000000E+0000
32177: MUL
32178: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32179: LD_ADDR_VAR 0 10
32183: PUSH
32184: LD_VAR 0 10
32188: PUSH
32189: LD_VAR 0 6
32193: PPUSH
32194: LD_INT 1
32196: PPUSH
32197: CALL_OW 259
32201: PUSH
32202: LD_REAL  1.15000000000000E+0000
32205: MUL
32206: MUL
32207: ST_TO_ADDR
// end ; unit_vehicle :
32208: GO 33038
32210: LD_INT 2
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32218
32216: GO 33026
32218: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32219: LD_VAR 0 6
32223: PPUSH
32224: CALL_OW 264
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 42
32234: PUSH
32235: LD_INT 24
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: LIST
32242: IN
32243: IFFALSE 32264
// points := [ 25 , 5 , 3 ] ;
32245: LD_ADDR_VAR 0 9
32249: PUSH
32250: LD_INT 25
32252: PUSH
32253: LD_INT 5
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: LIST
32263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32264: LD_VAR 0 6
32268: PPUSH
32269: CALL_OW 264
32273: PUSH
32274: LD_INT 4
32276: PUSH
32277: LD_INT 43
32279: PUSH
32280: LD_INT 25
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: IN
32288: IFFALSE 32309
// points := [ 40 , 15 , 5 ] ;
32290: LD_ADDR_VAR 0 9
32294: PUSH
32295: LD_INT 40
32297: PUSH
32298: LD_INT 15
32300: PUSH
32301: LD_INT 5
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: LIST
32308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32309: LD_VAR 0 6
32313: PPUSH
32314: CALL_OW 264
32318: PUSH
32319: LD_INT 3
32321: PUSH
32322: LD_INT 23
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: IN
32329: IFFALSE 32350
// points := [ 7 , 25 , 8 ] ;
32331: LD_ADDR_VAR 0 9
32335: PUSH
32336: LD_INT 7
32338: PUSH
32339: LD_INT 25
32341: PUSH
32342: LD_INT 8
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: LIST
32349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32350: LD_VAR 0 6
32354: PPUSH
32355: CALL_OW 264
32359: PUSH
32360: LD_INT 5
32362: PUSH
32363: LD_INT 27
32365: PUSH
32366: LD_INT 44
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: IN
32374: IFFALSE 32395
// points := [ 14 , 50 , 16 ] ;
32376: LD_ADDR_VAR 0 9
32380: PUSH
32381: LD_INT 14
32383: PUSH
32384: LD_INT 50
32386: PUSH
32387: LD_INT 16
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: LIST
32394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32395: LD_VAR 0 6
32399: PPUSH
32400: CALL_OW 264
32404: PUSH
32405: LD_INT 6
32407: PUSH
32408: LD_INT 46
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: IN
32415: IFFALSE 32436
// points := [ 32 , 120 , 70 ] ;
32417: LD_ADDR_VAR 0 9
32421: PUSH
32422: LD_INT 32
32424: PUSH
32425: LD_INT 120
32427: PUSH
32428: LD_INT 70
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32436: LD_VAR 0 6
32440: PPUSH
32441: CALL_OW 264
32445: PUSH
32446: LD_INT 7
32448: PUSH
32449: LD_INT 28
32451: PUSH
32452: LD_INT 45
32454: PUSH
32455: LD_EXP 23
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: IN
32466: IFFALSE 32487
// points := [ 35 , 20 , 45 ] ;
32468: LD_ADDR_VAR 0 9
32472: PUSH
32473: LD_INT 35
32475: PUSH
32476: LD_INT 20
32478: PUSH
32479: LD_INT 45
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: LIST
32486: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32487: LD_VAR 0 6
32491: PPUSH
32492: CALL_OW 264
32496: PUSH
32497: LD_INT 47
32499: PUSH
32500: EMPTY
32501: LIST
32502: IN
32503: IFFALSE 32524
// points := [ 67 , 45 , 75 ] ;
32505: LD_ADDR_VAR 0 9
32509: PUSH
32510: LD_INT 67
32512: PUSH
32513: LD_INT 45
32515: PUSH
32516: LD_INT 75
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: LIST
32523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32524: LD_VAR 0 6
32528: PPUSH
32529: CALL_OW 264
32533: PUSH
32534: LD_INT 26
32536: PUSH
32537: EMPTY
32538: LIST
32539: IN
32540: IFFALSE 32561
// points := [ 120 , 30 , 80 ] ;
32542: LD_ADDR_VAR 0 9
32546: PUSH
32547: LD_INT 120
32549: PUSH
32550: LD_INT 30
32552: PUSH
32553: LD_INT 80
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: LIST
32560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32561: LD_VAR 0 6
32565: PPUSH
32566: CALL_OW 264
32570: PUSH
32571: LD_INT 22
32573: PUSH
32574: EMPTY
32575: LIST
32576: IN
32577: IFFALSE 32598
// points := [ 40 , 1 , 1 ] ;
32579: LD_ADDR_VAR 0 9
32583: PUSH
32584: LD_INT 40
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: LIST
32597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32598: LD_VAR 0 6
32602: PPUSH
32603: CALL_OW 264
32607: PUSH
32608: LD_INT 29
32610: PUSH
32611: EMPTY
32612: LIST
32613: IN
32614: IFFALSE 32635
// points := [ 70 , 200 , 400 ] ;
32616: LD_ADDR_VAR 0 9
32620: PUSH
32621: LD_INT 70
32623: PUSH
32624: LD_INT 200
32626: PUSH
32627: LD_INT 400
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: LIST
32634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32635: LD_VAR 0 6
32639: PPUSH
32640: CALL_OW 264
32644: PUSH
32645: LD_INT 14
32647: PUSH
32648: LD_INT 53
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: IN
32655: IFFALSE 32676
// points := [ 40 , 10 , 20 ] ;
32657: LD_ADDR_VAR 0 9
32661: PUSH
32662: LD_INT 40
32664: PUSH
32665: LD_INT 10
32667: PUSH
32668: LD_INT 20
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32676: LD_VAR 0 6
32680: PPUSH
32681: CALL_OW 264
32685: PUSH
32686: LD_INT 9
32688: PUSH
32689: EMPTY
32690: LIST
32691: IN
32692: IFFALSE 32713
// points := [ 5 , 70 , 20 ] ;
32694: LD_ADDR_VAR 0 9
32698: PUSH
32699: LD_INT 5
32701: PUSH
32702: LD_INT 70
32704: PUSH
32705: LD_INT 20
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32713: LD_VAR 0 6
32717: PPUSH
32718: CALL_OW 264
32722: PUSH
32723: LD_INT 10
32725: PUSH
32726: EMPTY
32727: LIST
32728: IN
32729: IFFALSE 32750
// points := [ 35 , 110 , 70 ] ;
32731: LD_ADDR_VAR 0 9
32735: PUSH
32736: LD_INT 35
32738: PUSH
32739: LD_INT 110
32741: PUSH
32742: LD_INT 70
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32750: LD_VAR 0 6
32754: PPUSH
32755: CALL_OW 265
32759: PUSH
32760: LD_INT 25
32762: EQUAL
32763: IFFALSE 32784
// points := [ 80 , 65 , 100 ] ;
32765: LD_ADDR_VAR 0 9
32769: PUSH
32770: LD_INT 80
32772: PUSH
32773: LD_INT 65
32775: PUSH
32776: LD_INT 100
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32784: LD_VAR 0 6
32788: PPUSH
32789: CALL_OW 263
32793: PUSH
32794: LD_INT 1
32796: EQUAL
32797: IFFALSE 32832
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32799: LD_ADDR_VAR 0 10
32803: PUSH
32804: LD_VAR 0 10
32808: PUSH
32809: LD_VAR 0 6
32813: PPUSH
32814: CALL_OW 311
32818: PPUSH
32819: LD_INT 3
32821: PPUSH
32822: CALL_OW 259
32826: PUSH
32827: LD_INT 4
32829: MUL
32830: MUL
32831: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32832: LD_VAR 0 6
32836: PPUSH
32837: CALL_OW 263
32841: PUSH
32842: LD_INT 2
32844: EQUAL
32845: IFFALSE 32896
// begin j := IsControledBy ( i ) ;
32847: LD_ADDR_VAR 0 7
32851: PUSH
32852: LD_VAR 0 6
32856: PPUSH
32857: CALL_OW 312
32861: ST_TO_ADDR
// if j then
32862: LD_VAR 0 7
32866: IFFALSE 32896
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32868: LD_ADDR_VAR 0 10
32872: PUSH
32873: LD_VAR 0 10
32877: PUSH
32878: LD_VAR 0 7
32882: PPUSH
32883: LD_INT 3
32885: PPUSH
32886: CALL_OW 259
32890: PUSH
32891: LD_INT 3
32893: MUL
32894: MUL
32895: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32896: LD_VAR 0 6
32900: PPUSH
32901: CALL_OW 264
32905: PUSH
32906: LD_INT 5
32908: PUSH
32909: LD_INT 6
32911: PUSH
32912: LD_INT 46
32914: PUSH
32915: LD_INT 44
32917: PUSH
32918: LD_INT 47
32920: PUSH
32921: LD_INT 45
32923: PUSH
32924: LD_INT 28
32926: PUSH
32927: LD_INT 7
32929: PUSH
32930: LD_INT 27
32932: PUSH
32933: LD_INT 29
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: IN
32948: PUSH
32949: LD_VAR 0 1
32953: PPUSH
32954: LD_INT 52
32956: PPUSH
32957: CALL_OW 321
32961: PUSH
32962: LD_INT 2
32964: EQUAL
32965: AND
32966: IFFALSE 32983
// bpoints := bpoints * 1.2 ;
32968: LD_ADDR_VAR 0 10
32972: PUSH
32973: LD_VAR 0 10
32977: PUSH
32978: LD_REAL  1.20000000000000E+0000
32981: MUL
32982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32983: LD_VAR 0 6
32987: PPUSH
32988: CALL_OW 264
32992: PUSH
32993: LD_INT 6
32995: PUSH
32996: LD_INT 46
32998: PUSH
32999: LD_INT 47
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: IN
33007: IFFALSE 33024
// bpoints := bpoints * 1.2 ;
33009: LD_ADDR_VAR 0 10
33013: PUSH
33014: LD_VAR 0 10
33018: PUSH
33019: LD_REAL  1.20000000000000E+0000
33022: MUL
33023: ST_TO_ADDR
// end ; unit_building :
33024: GO 33038
33026: LD_INT 3
33028: DOUBLE
33029: EQUAL
33030: IFTRUE 33034
33032: GO 33037
33034: POP
// ; end ;
33035: GO 33038
33037: POP
// for j = 1 to 3 do
33038: LD_ADDR_VAR 0 7
33042: PUSH
33043: DOUBLE
33044: LD_INT 1
33046: DEC
33047: ST_TO_ADDR
33048: LD_INT 3
33050: PUSH
33051: FOR_TO
33052: IFFALSE 33105
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33054: LD_ADDR_VAR 0 5
33058: PUSH
33059: LD_VAR 0 5
33063: PPUSH
33064: LD_VAR 0 7
33068: PPUSH
33069: LD_VAR 0 5
33073: PUSH
33074: LD_VAR 0 7
33078: ARRAY
33079: PUSH
33080: LD_VAR 0 9
33084: PUSH
33085: LD_VAR 0 7
33089: ARRAY
33090: PUSH
33091: LD_VAR 0 10
33095: MUL
33096: PLUS
33097: PPUSH
33098: CALL_OW 1
33102: ST_TO_ADDR
33103: GO 33051
33105: POP
33106: POP
// end ;
33107: GO 31584
33109: POP
33110: POP
// result := Replace ( result , 4 , tmp ) ;
33111: LD_ADDR_VAR 0 5
33115: PUSH
33116: LD_VAR 0 5
33120: PPUSH
33121: LD_INT 4
33123: PPUSH
33124: LD_VAR 0 8
33128: PPUSH
33129: CALL_OW 1
33133: ST_TO_ADDR
// end ;
33134: LD_VAR 0 5
33138: RET
// export function DangerAtRange ( unit , range ) ; begin
33139: LD_INT 0
33141: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33142: LD_ADDR_VAR 0 3
33146: PUSH
33147: LD_VAR 0 1
33151: PPUSH
33152: CALL_OW 255
33156: PPUSH
33157: LD_VAR 0 1
33161: PPUSH
33162: CALL_OW 250
33166: PPUSH
33167: LD_VAR 0 1
33171: PPUSH
33172: CALL_OW 251
33176: PPUSH
33177: LD_VAR 0 2
33181: PPUSH
33182: CALL 31436 0 4
33186: ST_TO_ADDR
// end ;
33187: LD_VAR 0 3
33191: RET
// export function DangerInArea ( side , area ) ; begin
33192: LD_INT 0
33194: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33195: LD_ADDR_VAR 0 3
33199: PUSH
33200: LD_VAR 0 2
33204: PPUSH
33205: LD_INT 81
33207: PUSH
33208: LD_VAR 0 1
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PPUSH
33217: CALL_OW 70
33221: ST_TO_ADDR
// end ;
33222: LD_VAR 0 3
33226: RET
// export function IsExtension ( b ) ; begin
33227: LD_INT 0
33229: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33230: LD_ADDR_VAR 0 2
33234: PUSH
33235: LD_VAR 0 1
33239: PUSH
33240: LD_INT 23
33242: PUSH
33243: LD_INT 20
33245: PUSH
33246: LD_INT 22
33248: PUSH
33249: LD_INT 17
33251: PUSH
33252: LD_INT 24
33254: PUSH
33255: LD_INT 21
33257: PUSH
33258: LD_INT 19
33260: PUSH
33261: LD_INT 16
33263: PUSH
33264: LD_INT 25
33266: PUSH
33267: LD_INT 18
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: IN
33282: ST_TO_ADDR
// end ;
33283: LD_VAR 0 2
33287: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33288: LD_INT 0
33290: PPUSH
33291: PPUSH
33292: PPUSH
// result := [ ] ;
33293: LD_ADDR_VAR 0 4
33297: PUSH
33298: EMPTY
33299: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33300: LD_ADDR_VAR 0 5
33304: PUSH
33305: LD_VAR 0 2
33309: PPUSH
33310: LD_INT 21
33312: PUSH
33313: LD_INT 3
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PPUSH
33320: CALL_OW 70
33324: ST_TO_ADDR
// if not tmp then
33325: LD_VAR 0 5
33329: NOT
33330: IFFALSE 33334
// exit ;
33332: GO 33398
// if checkLink then
33334: LD_VAR 0 3
33338: IFFALSE 33388
// begin for i in tmp do
33340: LD_ADDR_VAR 0 6
33344: PUSH
33345: LD_VAR 0 5
33349: PUSH
33350: FOR_IN
33351: IFFALSE 33386
// if GetBase ( i ) <> base then
33353: LD_VAR 0 6
33357: PPUSH
33358: CALL_OW 274
33362: PUSH
33363: LD_VAR 0 1
33367: NONEQUAL
33368: IFFALSE 33384
// ComLinkToBase ( base , i ) ;
33370: LD_VAR 0 1
33374: PPUSH
33375: LD_VAR 0 6
33379: PPUSH
33380: CALL_OW 169
33384: GO 33350
33386: POP
33387: POP
// end ; result := tmp ;
33388: LD_ADDR_VAR 0 4
33392: PUSH
33393: LD_VAR 0 5
33397: ST_TO_ADDR
// end ;
33398: LD_VAR 0 4
33402: RET
// export function ComComplete ( units , b ) ; var i ; begin
33403: LD_INT 0
33405: PPUSH
33406: PPUSH
// if not units then
33407: LD_VAR 0 1
33411: NOT
33412: IFFALSE 33416
// exit ;
33414: GO 33506
// for i in units do
33416: LD_ADDR_VAR 0 4
33420: PUSH
33421: LD_VAR 0 1
33425: PUSH
33426: FOR_IN
33427: IFFALSE 33504
// if BuildingStatus ( b ) = bs_build then
33429: LD_VAR 0 2
33433: PPUSH
33434: CALL_OW 461
33438: PUSH
33439: LD_INT 1
33441: EQUAL
33442: IFFALSE 33502
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33444: LD_VAR 0 4
33448: PPUSH
33449: LD_STRING h
33451: PUSH
33452: LD_VAR 0 2
33456: PPUSH
33457: CALL_OW 250
33461: PUSH
33462: LD_VAR 0 2
33466: PPUSH
33467: CALL_OW 251
33471: PUSH
33472: LD_VAR 0 2
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: PUSH
33495: EMPTY
33496: LIST
33497: PPUSH
33498: CALL_OW 446
33502: GO 33426
33504: POP
33505: POP
// end ;
33506: LD_VAR 0 3
33510: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33511: LD_INT 0
33513: PPUSH
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33519: LD_VAR 0 1
33523: NOT
33524: PUSH
33525: LD_VAR 0 1
33529: PPUSH
33530: CALL_OW 263
33534: PUSH
33535: LD_INT 2
33537: NONEQUAL
33538: OR
33539: IFFALSE 33543
// exit ;
33541: GO 33859
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33543: LD_ADDR_VAR 0 6
33547: PUSH
33548: LD_INT 22
33550: PUSH
33551: LD_VAR 0 1
33555: PPUSH
33556: CALL_OW 255
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 2
33567: PUSH
33568: LD_INT 30
33570: PUSH
33571: LD_INT 36
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 34
33580: PUSH
33581: LD_INT 31
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PPUSH
33597: CALL_OW 69
33601: ST_TO_ADDR
// if not tmp then
33602: LD_VAR 0 6
33606: NOT
33607: IFFALSE 33611
// exit ;
33609: GO 33859
// result := [ ] ;
33611: LD_ADDR_VAR 0 2
33615: PUSH
33616: EMPTY
33617: ST_TO_ADDR
// for i in tmp do
33618: LD_ADDR_VAR 0 3
33622: PUSH
33623: LD_VAR 0 6
33627: PUSH
33628: FOR_IN
33629: IFFALSE 33700
// begin t := UnitsInside ( i ) ;
33631: LD_ADDR_VAR 0 4
33635: PUSH
33636: LD_VAR 0 3
33640: PPUSH
33641: CALL_OW 313
33645: ST_TO_ADDR
// if t then
33646: LD_VAR 0 4
33650: IFFALSE 33698
// for j in t do
33652: LD_ADDR_VAR 0 7
33656: PUSH
33657: LD_VAR 0 4
33661: PUSH
33662: FOR_IN
33663: IFFALSE 33696
// result := Replace ( result , result + 1 , j ) ;
33665: LD_ADDR_VAR 0 2
33669: PUSH
33670: LD_VAR 0 2
33674: PPUSH
33675: LD_VAR 0 2
33679: PUSH
33680: LD_INT 1
33682: PLUS
33683: PPUSH
33684: LD_VAR 0 7
33688: PPUSH
33689: CALL_OW 1
33693: ST_TO_ADDR
33694: GO 33662
33696: POP
33697: POP
// end ;
33698: GO 33628
33700: POP
33701: POP
// if not result then
33702: LD_VAR 0 2
33706: NOT
33707: IFFALSE 33711
// exit ;
33709: GO 33859
// mech := result [ 1 ] ;
33711: LD_ADDR_VAR 0 5
33715: PUSH
33716: LD_VAR 0 2
33720: PUSH
33721: LD_INT 1
33723: ARRAY
33724: ST_TO_ADDR
// if result > 1 then
33725: LD_VAR 0 2
33729: PUSH
33730: LD_INT 1
33732: GREATER
33733: IFFALSE 33845
// begin for i = 2 to result do
33735: LD_ADDR_VAR 0 3
33739: PUSH
33740: DOUBLE
33741: LD_INT 2
33743: DEC
33744: ST_TO_ADDR
33745: LD_VAR 0 2
33749: PUSH
33750: FOR_TO
33751: IFFALSE 33843
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33753: LD_ADDR_VAR 0 4
33757: PUSH
33758: LD_VAR 0 2
33762: PUSH
33763: LD_VAR 0 3
33767: ARRAY
33768: PPUSH
33769: LD_INT 3
33771: PPUSH
33772: CALL_OW 259
33776: PUSH
33777: LD_VAR 0 2
33781: PUSH
33782: LD_VAR 0 3
33786: ARRAY
33787: PPUSH
33788: CALL_OW 432
33792: MINUS
33793: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33794: LD_VAR 0 4
33798: PUSH
33799: LD_VAR 0 5
33803: PPUSH
33804: LD_INT 3
33806: PPUSH
33807: CALL_OW 259
33811: PUSH
33812: LD_VAR 0 5
33816: PPUSH
33817: CALL_OW 432
33821: MINUS
33822: GREATEREQUAL
33823: IFFALSE 33841
// mech := result [ i ] ;
33825: LD_ADDR_VAR 0 5
33829: PUSH
33830: LD_VAR 0 2
33834: PUSH
33835: LD_VAR 0 3
33839: ARRAY
33840: ST_TO_ADDR
// end ;
33841: GO 33750
33843: POP
33844: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33845: LD_VAR 0 1
33849: PPUSH
33850: LD_VAR 0 5
33854: PPUSH
33855: CALL_OW 135
// end ;
33859: LD_VAR 0 2
33863: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33864: LD_INT 0
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
33878: PPUSH
// result := [ ] ;
33879: LD_ADDR_VAR 0 7
33883: PUSH
33884: EMPTY
33885: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33886: LD_VAR 0 1
33890: PPUSH
33891: CALL_OW 266
33895: PUSH
33896: LD_INT 0
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: IN
33906: NOT
33907: IFFALSE 33911
// exit ;
33909: GO 35545
// if name then
33911: LD_VAR 0 3
33915: IFFALSE 33931
// SetBName ( base_dep , name ) ;
33917: LD_VAR 0 1
33921: PPUSH
33922: LD_VAR 0 3
33926: PPUSH
33927: CALL_OW 500
// base := GetBase ( base_dep ) ;
33931: LD_ADDR_VAR 0 15
33935: PUSH
33936: LD_VAR 0 1
33940: PPUSH
33941: CALL_OW 274
33945: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33946: LD_ADDR_VAR 0 16
33950: PUSH
33951: LD_VAR 0 1
33955: PPUSH
33956: CALL_OW 255
33960: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33961: LD_ADDR_VAR 0 17
33965: PUSH
33966: LD_VAR 0 1
33970: PPUSH
33971: CALL_OW 248
33975: ST_TO_ADDR
// if sources then
33976: LD_VAR 0 5
33980: IFFALSE 34027
// for i = 1 to 3 do
33982: LD_ADDR_VAR 0 8
33986: PUSH
33987: DOUBLE
33988: LD_INT 1
33990: DEC
33991: ST_TO_ADDR
33992: LD_INT 3
33994: PUSH
33995: FOR_TO
33996: IFFALSE 34025
// AddResourceType ( base , i , sources [ i ] ) ;
33998: LD_VAR 0 15
34002: PPUSH
34003: LD_VAR 0 8
34007: PPUSH
34008: LD_VAR 0 5
34012: PUSH
34013: LD_VAR 0 8
34017: ARRAY
34018: PPUSH
34019: CALL_OW 276
34023: GO 33995
34025: POP
34026: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34027: LD_ADDR_VAR 0 18
34031: PUSH
34032: LD_VAR 0 15
34036: PPUSH
34037: LD_VAR 0 2
34041: PPUSH
34042: LD_INT 1
34044: PPUSH
34045: CALL 33288 0 3
34049: ST_TO_ADDR
// InitHc ;
34050: CALL_OW 19
// InitUc ;
34054: CALL_OW 18
// uc_side := side ;
34058: LD_ADDR_OWVAR 20
34062: PUSH
34063: LD_VAR 0 16
34067: ST_TO_ADDR
// uc_nation := nation ;
34068: LD_ADDR_OWVAR 21
34072: PUSH
34073: LD_VAR 0 17
34077: ST_TO_ADDR
// if buildings then
34078: LD_VAR 0 18
34082: IFFALSE 35404
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34084: LD_ADDR_VAR 0 19
34088: PUSH
34089: LD_VAR 0 18
34093: PPUSH
34094: LD_INT 2
34096: PUSH
34097: LD_INT 30
34099: PUSH
34100: LD_INT 29
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 30
34109: PUSH
34110: LD_INT 30
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: PPUSH
34122: CALL_OW 72
34126: ST_TO_ADDR
// if tmp then
34127: LD_VAR 0 19
34131: IFFALSE 34179
// for i in tmp do
34133: LD_ADDR_VAR 0 8
34137: PUSH
34138: LD_VAR 0 19
34142: PUSH
34143: FOR_IN
34144: IFFALSE 34177
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34146: LD_VAR 0 8
34150: PPUSH
34151: CALL_OW 250
34155: PPUSH
34156: LD_VAR 0 8
34160: PPUSH
34161: CALL_OW 251
34165: PPUSH
34166: LD_VAR 0 16
34170: PPUSH
34171: CALL_OW 441
34175: GO 34143
34177: POP
34178: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34179: LD_VAR 0 18
34183: PPUSH
34184: LD_INT 2
34186: PUSH
34187: LD_INT 30
34189: PUSH
34190: LD_INT 32
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 30
34199: PUSH
34200: LD_INT 33
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: PPUSH
34212: CALL_OW 72
34216: IFFALSE 34304
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34218: LD_ADDR_VAR 0 8
34222: PUSH
34223: LD_VAR 0 18
34227: PPUSH
34228: LD_INT 2
34230: PUSH
34231: LD_INT 30
34233: PUSH
34234: LD_INT 32
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 30
34243: PUSH
34244: LD_INT 33
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: LIST
34255: PPUSH
34256: CALL_OW 72
34260: PUSH
34261: FOR_IN
34262: IFFALSE 34302
// begin if not GetBWeapon ( i ) then
34264: LD_VAR 0 8
34268: PPUSH
34269: CALL_OW 269
34273: NOT
34274: IFFALSE 34300
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34276: LD_VAR 0 8
34280: PPUSH
34281: LD_VAR 0 8
34285: PPUSH
34286: LD_VAR 0 2
34290: PPUSH
34291: CALL 35550 0 2
34295: PPUSH
34296: CALL_OW 431
// end ;
34300: GO 34261
34302: POP
34303: POP
// end ; for i = 1 to personel do
34304: LD_ADDR_VAR 0 8
34308: PUSH
34309: DOUBLE
34310: LD_INT 1
34312: DEC
34313: ST_TO_ADDR
34314: LD_VAR 0 6
34318: PUSH
34319: FOR_TO
34320: IFFALSE 35384
// begin if i > 4 then
34322: LD_VAR 0 8
34326: PUSH
34327: LD_INT 4
34329: GREATER
34330: IFFALSE 34334
// break ;
34332: GO 35384
// case i of 1 :
34334: LD_VAR 0 8
34338: PUSH
34339: LD_INT 1
34341: DOUBLE
34342: EQUAL
34343: IFTRUE 34347
34345: GO 34427
34347: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34348: LD_ADDR_VAR 0 12
34352: PUSH
34353: LD_VAR 0 18
34357: PPUSH
34358: LD_INT 22
34360: PUSH
34361: LD_VAR 0 16
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 58
34372: PUSH
34373: EMPTY
34374: LIST
34375: PUSH
34376: LD_INT 2
34378: PUSH
34379: LD_INT 30
34381: PUSH
34382: LD_INT 32
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 30
34391: PUSH
34392: LD_INT 4
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 30
34401: PUSH
34402: LD_INT 5
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: PPUSH
34420: CALL_OW 72
34424: ST_TO_ADDR
34425: GO 34649
34427: LD_INT 2
34429: DOUBLE
34430: EQUAL
34431: IFTRUE 34435
34433: GO 34497
34435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34436: LD_ADDR_VAR 0 12
34440: PUSH
34441: LD_VAR 0 18
34445: PPUSH
34446: LD_INT 22
34448: PUSH
34449: LD_VAR 0 16
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 30
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 30
34473: PUSH
34474: LD_INT 1
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: LIST
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PPUSH
34490: CALL_OW 72
34494: ST_TO_ADDR
34495: GO 34649
34497: LD_INT 3
34499: DOUBLE
34500: EQUAL
34501: IFTRUE 34505
34503: GO 34567
34505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34506: LD_ADDR_VAR 0 12
34510: PUSH
34511: LD_VAR 0 18
34515: PPUSH
34516: LD_INT 22
34518: PUSH
34519: LD_VAR 0 16
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 2
34530: PUSH
34531: LD_INT 30
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 30
34543: PUSH
34544: LD_INT 3
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PPUSH
34560: CALL_OW 72
34564: ST_TO_ADDR
34565: GO 34649
34567: LD_INT 4
34569: DOUBLE
34570: EQUAL
34571: IFTRUE 34575
34573: GO 34648
34575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34576: LD_ADDR_VAR 0 12
34580: PUSH
34581: LD_VAR 0 18
34585: PPUSH
34586: LD_INT 22
34588: PUSH
34589: LD_VAR 0 16
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 30
34603: PUSH
34604: LD_INT 6
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 30
34613: PUSH
34614: LD_INT 7
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 30
34623: PUSH
34624: LD_INT 8
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PPUSH
34641: CALL_OW 72
34645: ST_TO_ADDR
34646: GO 34649
34648: POP
// if i = 1 then
34649: LD_VAR 0 8
34653: PUSH
34654: LD_INT 1
34656: EQUAL
34657: IFFALSE 34768
// begin tmp := [ ] ;
34659: LD_ADDR_VAR 0 19
34663: PUSH
34664: EMPTY
34665: ST_TO_ADDR
// for j in f do
34666: LD_ADDR_VAR 0 9
34670: PUSH
34671: LD_VAR 0 12
34675: PUSH
34676: FOR_IN
34677: IFFALSE 34750
// if GetBType ( j ) = b_bunker then
34679: LD_VAR 0 9
34683: PPUSH
34684: CALL_OW 266
34688: PUSH
34689: LD_INT 32
34691: EQUAL
34692: IFFALSE 34719
// tmp := Insert ( tmp , 1 , j ) else
34694: LD_ADDR_VAR 0 19
34698: PUSH
34699: LD_VAR 0 19
34703: PPUSH
34704: LD_INT 1
34706: PPUSH
34707: LD_VAR 0 9
34711: PPUSH
34712: CALL_OW 2
34716: ST_TO_ADDR
34717: GO 34748
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34719: LD_ADDR_VAR 0 19
34723: PUSH
34724: LD_VAR 0 19
34728: PPUSH
34729: LD_VAR 0 19
34733: PUSH
34734: LD_INT 1
34736: PLUS
34737: PPUSH
34738: LD_VAR 0 9
34742: PPUSH
34743: CALL_OW 2
34747: ST_TO_ADDR
34748: GO 34676
34750: POP
34751: POP
// if tmp then
34752: LD_VAR 0 19
34756: IFFALSE 34768
// f := tmp ;
34758: LD_ADDR_VAR 0 12
34762: PUSH
34763: LD_VAR 0 19
34767: ST_TO_ADDR
// end ; x := personel [ i ] ;
34768: LD_ADDR_VAR 0 13
34772: PUSH
34773: LD_VAR 0 6
34777: PUSH
34778: LD_VAR 0 8
34782: ARRAY
34783: ST_TO_ADDR
// if x = - 1 then
34784: LD_VAR 0 13
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: EQUAL
34793: IFFALSE 35002
// begin for j in f do
34795: LD_ADDR_VAR 0 9
34799: PUSH
34800: LD_VAR 0 12
34804: PUSH
34805: FOR_IN
34806: IFFALSE 34998
// repeat InitHc ;
34808: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34812: LD_VAR 0 9
34816: PPUSH
34817: CALL_OW 266
34821: PUSH
34822: LD_INT 5
34824: EQUAL
34825: IFFALSE 34895
// begin if UnitsInside ( j ) < 3 then
34827: LD_VAR 0 9
34831: PPUSH
34832: CALL_OW 313
34836: PUSH
34837: LD_INT 3
34839: LESS
34840: IFFALSE 34876
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34842: LD_INT 0
34844: PPUSH
34845: LD_INT 5
34847: PUSH
34848: LD_INT 8
34850: PUSH
34851: LD_INT 9
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: PUSH
34859: LD_VAR 0 17
34863: ARRAY
34864: PPUSH
34865: LD_VAR 0 4
34869: PPUSH
34870: CALL_OW 380
34874: GO 34893
// PrepareHuman ( false , i , skill ) ;
34876: LD_INT 0
34878: PPUSH
34879: LD_VAR 0 8
34883: PPUSH
34884: LD_VAR 0 4
34888: PPUSH
34889: CALL_OW 380
// end else
34893: GO 34912
// PrepareHuman ( false , i , skill ) ;
34895: LD_INT 0
34897: PPUSH
34898: LD_VAR 0 8
34902: PPUSH
34903: LD_VAR 0 4
34907: PPUSH
34908: CALL_OW 380
// un := CreateHuman ;
34912: LD_ADDR_VAR 0 14
34916: PUSH
34917: CALL_OW 44
34921: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34922: LD_ADDR_VAR 0 7
34926: PUSH
34927: LD_VAR 0 7
34931: PPUSH
34932: LD_INT 1
34934: PPUSH
34935: LD_VAR 0 14
34939: PPUSH
34940: CALL_OW 2
34944: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34945: LD_VAR 0 14
34949: PPUSH
34950: LD_VAR 0 9
34954: PPUSH
34955: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34959: LD_VAR 0 9
34963: PPUSH
34964: CALL_OW 313
34968: PUSH
34969: LD_INT 6
34971: EQUAL
34972: PUSH
34973: LD_VAR 0 9
34977: PPUSH
34978: CALL_OW 266
34982: PUSH
34983: LD_INT 32
34985: PUSH
34986: LD_INT 31
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: IN
34993: OR
34994: IFFALSE 34808
34996: GO 34805
34998: POP
34999: POP
// end else
35000: GO 35382
// for j = 1 to x do
35002: LD_ADDR_VAR 0 9
35006: PUSH
35007: DOUBLE
35008: LD_INT 1
35010: DEC
35011: ST_TO_ADDR
35012: LD_VAR 0 13
35016: PUSH
35017: FOR_TO
35018: IFFALSE 35380
// begin InitHc ;
35020: CALL_OW 19
// if not f then
35024: LD_VAR 0 12
35028: NOT
35029: IFFALSE 35118
// begin PrepareHuman ( false , i , skill ) ;
35031: LD_INT 0
35033: PPUSH
35034: LD_VAR 0 8
35038: PPUSH
35039: LD_VAR 0 4
35043: PPUSH
35044: CALL_OW 380
// un := CreateHuman ;
35048: LD_ADDR_VAR 0 14
35052: PUSH
35053: CALL_OW 44
35057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35058: LD_ADDR_VAR 0 7
35062: PUSH
35063: LD_VAR 0 7
35067: PPUSH
35068: LD_INT 1
35070: PPUSH
35071: LD_VAR 0 14
35075: PPUSH
35076: CALL_OW 2
35080: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35081: LD_VAR 0 14
35085: PPUSH
35086: LD_VAR 0 1
35090: PPUSH
35091: CALL_OW 250
35095: PPUSH
35096: LD_VAR 0 1
35100: PPUSH
35101: CALL_OW 251
35105: PPUSH
35106: LD_INT 10
35108: PPUSH
35109: LD_INT 0
35111: PPUSH
35112: CALL_OW 50
// continue ;
35116: GO 35017
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35118: LD_VAR 0 12
35122: PUSH
35123: LD_INT 1
35125: ARRAY
35126: PPUSH
35127: CALL_OW 313
35131: PUSH
35132: LD_VAR 0 12
35136: PUSH
35137: LD_INT 1
35139: ARRAY
35140: PPUSH
35141: CALL_OW 266
35145: PUSH
35146: LD_INT 32
35148: PUSH
35149: LD_INT 31
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: IN
35156: AND
35157: PUSH
35158: LD_VAR 0 12
35162: PUSH
35163: LD_INT 1
35165: ARRAY
35166: PPUSH
35167: CALL_OW 313
35171: PUSH
35172: LD_INT 6
35174: EQUAL
35175: OR
35176: IFFALSE 35196
// f := Delete ( f , 1 ) ;
35178: LD_ADDR_VAR 0 12
35182: PUSH
35183: LD_VAR 0 12
35187: PPUSH
35188: LD_INT 1
35190: PPUSH
35191: CALL_OW 3
35195: ST_TO_ADDR
// if not f then
35196: LD_VAR 0 12
35200: NOT
35201: IFFALSE 35219
// begin x := x + 2 ;
35203: LD_ADDR_VAR 0 13
35207: PUSH
35208: LD_VAR 0 13
35212: PUSH
35213: LD_INT 2
35215: PLUS
35216: ST_TO_ADDR
// continue ;
35217: GO 35017
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35219: LD_VAR 0 12
35223: PUSH
35224: LD_INT 1
35226: ARRAY
35227: PPUSH
35228: CALL_OW 266
35232: PUSH
35233: LD_INT 5
35235: EQUAL
35236: IFFALSE 35310
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35238: LD_VAR 0 12
35242: PUSH
35243: LD_INT 1
35245: ARRAY
35246: PPUSH
35247: CALL_OW 313
35251: PUSH
35252: LD_INT 3
35254: LESS
35255: IFFALSE 35291
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35257: LD_INT 0
35259: PPUSH
35260: LD_INT 5
35262: PUSH
35263: LD_INT 8
35265: PUSH
35266: LD_INT 9
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: LIST
35273: PUSH
35274: LD_VAR 0 17
35278: ARRAY
35279: PPUSH
35280: LD_VAR 0 4
35284: PPUSH
35285: CALL_OW 380
35289: GO 35308
// PrepareHuman ( false , i , skill ) ;
35291: LD_INT 0
35293: PPUSH
35294: LD_VAR 0 8
35298: PPUSH
35299: LD_VAR 0 4
35303: PPUSH
35304: CALL_OW 380
// end else
35308: GO 35327
// PrepareHuman ( false , i , skill ) ;
35310: LD_INT 0
35312: PPUSH
35313: LD_VAR 0 8
35317: PPUSH
35318: LD_VAR 0 4
35322: PPUSH
35323: CALL_OW 380
// un := CreateHuman ;
35327: LD_ADDR_VAR 0 14
35331: PUSH
35332: CALL_OW 44
35336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35337: LD_ADDR_VAR 0 7
35341: PUSH
35342: LD_VAR 0 7
35346: PPUSH
35347: LD_INT 1
35349: PPUSH
35350: LD_VAR 0 14
35354: PPUSH
35355: CALL_OW 2
35359: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35360: LD_VAR 0 14
35364: PPUSH
35365: LD_VAR 0 12
35369: PUSH
35370: LD_INT 1
35372: ARRAY
35373: PPUSH
35374: CALL_OW 52
// end ;
35378: GO 35017
35380: POP
35381: POP
// end ;
35382: GO 34319
35384: POP
35385: POP
// result := result ^ buildings ;
35386: LD_ADDR_VAR 0 7
35390: PUSH
35391: LD_VAR 0 7
35395: PUSH
35396: LD_VAR 0 18
35400: ADD
35401: ST_TO_ADDR
// end else
35402: GO 35545
// begin for i = 1 to personel do
35404: LD_ADDR_VAR 0 8
35408: PUSH
35409: DOUBLE
35410: LD_INT 1
35412: DEC
35413: ST_TO_ADDR
35414: LD_VAR 0 6
35418: PUSH
35419: FOR_TO
35420: IFFALSE 35543
// begin if i > 4 then
35422: LD_VAR 0 8
35426: PUSH
35427: LD_INT 4
35429: GREATER
35430: IFFALSE 35434
// break ;
35432: GO 35543
// x := personel [ i ] ;
35434: LD_ADDR_VAR 0 13
35438: PUSH
35439: LD_VAR 0 6
35443: PUSH
35444: LD_VAR 0 8
35448: ARRAY
35449: ST_TO_ADDR
// if x = - 1 then
35450: LD_VAR 0 13
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: EQUAL
35459: IFFALSE 35463
// continue ;
35461: GO 35419
// PrepareHuman ( false , i , skill ) ;
35463: LD_INT 0
35465: PPUSH
35466: LD_VAR 0 8
35470: PPUSH
35471: LD_VAR 0 4
35475: PPUSH
35476: CALL_OW 380
// un := CreateHuman ;
35480: LD_ADDR_VAR 0 14
35484: PUSH
35485: CALL_OW 44
35489: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35490: LD_VAR 0 14
35494: PPUSH
35495: LD_VAR 0 1
35499: PPUSH
35500: CALL_OW 250
35504: PPUSH
35505: LD_VAR 0 1
35509: PPUSH
35510: CALL_OW 251
35514: PPUSH
35515: LD_INT 10
35517: PPUSH
35518: LD_INT 0
35520: PPUSH
35521: CALL_OW 50
// result := result ^ un ;
35525: LD_ADDR_VAR 0 7
35529: PUSH
35530: LD_VAR 0 7
35534: PUSH
35535: LD_VAR 0 14
35539: ADD
35540: ST_TO_ADDR
// end ;
35541: GO 35419
35543: POP
35544: POP
// end ; end ;
35545: LD_VAR 0 7
35549: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35550: LD_INT 0
35552: PPUSH
35553: PPUSH
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
35558: PPUSH
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
35567: PPUSH
// result := false ;
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: LD_INT 0
35575: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35576: LD_VAR 0 1
35580: NOT
35581: PUSH
35582: LD_VAR 0 1
35586: PPUSH
35587: CALL_OW 266
35591: PUSH
35592: LD_INT 32
35594: PUSH
35595: LD_INT 33
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: IN
35602: NOT
35603: OR
35604: IFFALSE 35608
// exit ;
35606: GO 36717
// nat := GetNation ( tower ) ;
35608: LD_ADDR_VAR 0 12
35612: PUSH
35613: LD_VAR 0 1
35617: PPUSH
35618: CALL_OW 248
35622: ST_TO_ADDR
// side := GetSide ( tower ) ;
35623: LD_ADDR_VAR 0 16
35627: PUSH
35628: LD_VAR 0 1
35632: PPUSH
35633: CALL_OW 255
35637: ST_TO_ADDR
// x := GetX ( tower ) ;
35638: LD_ADDR_VAR 0 10
35642: PUSH
35643: LD_VAR 0 1
35647: PPUSH
35648: CALL_OW 250
35652: ST_TO_ADDR
// y := GetY ( tower ) ;
35653: LD_ADDR_VAR 0 11
35657: PUSH
35658: LD_VAR 0 1
35662: PPUSH
35663: CALL_OW 251
35667: ST_TO_ADDR
// if not x or not y then
35668: LD_VAR 0 10
35672: NOT
35673: PUSH
35674: LD_VAR 0 11
35678: NOT
35679: OR
35680: IFFALSE 35684
// exit ;
35682: GO 36717
// weapon := 0 ;
35684: LD_ADDR_VAR 0 18
35688: PUSH
35689: LD_INT 0
35691: ST_TO_ADDR
// fac_list := [ ] ;
35692: LD_ADDR_VAR 0 17
35696: PUSH
35697: EMPTY
35698: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35699: LD_ADDR_VAR 0 6
35703: PUSH
35704: LD_VAR 0 1
35708: PPUSH
35709: CALL_OW 274
35713: PPUSH
35714: LD_VAR 0 2
35718: PPUSH
35719: LD_INT 0
35721: PPUSH
35722: CALL 33288 0 3
35726: PPUSH
35727: LD_INT 30
35729: PUSH
35730: LD_INT 3
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PPUSH
35737: CALL_OW 72
35741: ST_TO_ADDR
// if not factories then
35742: LD_VAR 0 6
35746: NOT
35747: IFFALSE 35751
// exit ;
35749: GO 36717
// for i in factories do
35751: LD_ADDR_VAR 0 8
35755: PUSH
35756: LD_VAR 0 6
35760: PUSH
35761: FOR_IN
35762: IFFALSE 35787
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35764: LD_ADDR_VAR 0 17
35768: PUSH
35769: LD_VAR 0 17
35773: PUSH
35774: LD_VAR 0 8
35778: PPUSH
35779: CALL_OW 478
35783: UNION
35784: ST_TO_ADDR
35785: GO 35761
35787: POP
35788: POP
// if not fac_list then
35789: LD_VAR 0 17
35793: NOT
35794: IFFALSE 35798
// exit ;
35796: GO 36717
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35798: LD_ADDR_VAR 0 5
35802: PUSH
35803: LD_INT 4
35805: PUSH
35806: LD_INT 5
35808: PUSH
35809: LD_INT 9
35811: PUSH
35812: LD_INT 10
35814: PUSH
35815: LD_INT 6
35817: PUSH
35818: LD_INT 7
35820: PUSH
35821: LD_INT 11
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 27
35835: PUSH
35836: LD_INT 28
35838: PUSH
35839: LD_INT 26
35841: PUSH
35842: LD_INT 30
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 43
35853: PUSH
35854: LD_INT 44
35856: PUSH
35857: LD_INT 46
35859: PUSH
35860: LD_INT 45
35862: PUSH
35863: LD_INT 47
35865: PUSH
35866: LD_INT 49
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: PUSH
35882: LD_VAR 0 12
35886: ARRAY
35887: ST_TO_ADDR
// list := list isect fac_list ;
35888: LD_ADDR_VAR 0 5
35892: PUSH
35893: LD_VAR 0 5
35897: PUSH
35898: LD_VAR 0 17
35902: ISECT
35903: ST_TO_ADDR
// if not list then
35904: LD_VAR 0 5
35908: NOT
35909: IFFALSE 35913
// exit ;
35911: GO 36717
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35913: LD_VAR 0 12
35917: PUSH
35918: LD_INT 3
35920: EQUAL
35921: PUSH
35922: LD_INT 49
35924: PUSH
35925: LD_VAR 0 5
35929: IN
35930: AND
35931: PUSH
35932: LD_INT 31
35934: PPUSH
35935: LD_VAR 0 16
35939: PPUSH
35940: CALL_OW 321
35944: PUSH
35945: LD_INT 2
35947: EQUAL
35948: AND
35949: IFFALSE 36009
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35951: LD_INT 22
35953: PUSH
35954: LD_VAR 0 16
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 35
35965: PUSH
35966: LD_INT 49
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 91
35975: PUSH
35976: LD_VAR 0 1
35980: PUSH
35981: LD_INT 10
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: PPUSH
35994: CALL_OW 69
35998: NOT
35999: IFFALSE 36009
// weapon := ru_time_lapser ;
36001: LD_ADDR_VAR 0 18
36005: PUSH
36006: LD_INT 49
36008: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36009: LD_VAR 0 12
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: IN
36024: PUSH
36025: LD_INT 11
36027: PUSH
36028: LD_VAR 0 5
36032: IN
36033: PUSH
36034: LD_INT 30
36036: PUSH
36037: LD_VAR 0 5
36041: IN
36042: OR
36043: AND
36044: PUSH
36045: LD_INT 6
36047: PPUSH
36048: LD_VAR 0 16
36052: PPUSH
36053: CALL_OW 321
36057: PUSH
36058: LD_INT 2
36060: EQUAL
36061: AND
36062: IFFALSE 36227
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36064: LD_INT 22
36066: PUSH
36067: LD_VAR 0 16
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: LD_INT 35
36081: PUSH
36082: LD_INT 11
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 35
36091: PUSH
36092: LD_INT 30
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 91
36106: PUSH
36107: LD_VAR 0 1
36111: PUSH
36112: LD_INT 18
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: LIST
36124: PPUSH
36125: CALL_OW 69
36129: NOT
36130: PUSH
36131: LD_INT 22
36133: PUSH
36134: LD_VAR 0 16
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 2
36145: PUSH
36146: LD_INT 30
36148: PUSH
36149: LD_INT 32
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 30
36158: PUSH
36159: LD_INT 33
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 91
36173: PUSH
36174: LD_VAR 0 1
36178: PUSH
36179: LD_INT 12
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: PUSH
36192: EMPTY
36193: LIST
36194: PPUSH
36195: CALL_OW 69
36199: PUSH
36200: LD_INT 2
36202: GREATER
36203: AND
36204: IFFALSE 36227
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36206: LD_ADDR_VAR 0 18
36210: PUSH
36211: LD_INT 11
36213: PUSH
36214: LD_INT 30
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_VAR 0 12
36225: ARRAY
36226: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36227: LD_VAR 0 18
36231: NOT
36232: PUSH
36233: LD_INT 40
36235: PPUSH
36236: LD_VAR 0 16
36240: PPUSH
36241: CALL_OW 321
36245: PUSH
36246: LD_INT 2
36248: EQUAL
36249: AND
36250: PUSH
36251: LD_INT 7
36253: PUSH
36254: LD_VAR 0 5
36258: IN
36259: PUSH
36260: LD_INT 28
36262: PUSH
36263: LD_VAR 0 5
36267: IN
36268: OR
36269: PUSH
36270: LD_INT 45
36272: PUSH
36273: LD_VAR 0 5
36277: IN
36278: OR
36279: AND
36280: IFFALSE 36534
// begin hex := GetHexInfo ( x , y ) ;
36282: LD_ADDR_VAR 0 4
36286: PUSH
36287: LD_VAR 0 10
36291: PPUSH
36292: LD_VAR 0 11
36296: PPUSH
36297: CALL_OW 546
36301: ST_TO_ADDR
// if hex [ 1 ] then
36302: LD_VAR 0 4
36306: PUSH
36307: LD_INT 1
36309: ARRAY
36310: IFFALSE 36314
// exit ;
36312: GO 36717
// height := hex [ 2 ] ;
36314: LD_ADDR_VAR 0 15
36318: PUSH
36319: LD_VAR 0 4
36323: PUSH
36324: LD_INT 2
36326: ARRAY
36327: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36328: LD_ADDR_VAR 0 14
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: LD_INT 5
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: ST_TO_ADDR
// for i in tmp do
36351: LD_ADDR_VAR 0 8
36355: PUSH
36356: LD_VAR 0 14
36360: PUSH
36361: FOR_IN
36362: IFFALSE 36532
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36364: LD_ADDR_VAR 0 9
36368: PUSH
36369: LD_VAR 0 10
36373: PPUSH
36374: LD_VAR 0 8
36378: PPUSH
36379: LD_INT 5
36381: PPUSH
36382: CALL_OW 272
36386: PUSH
36387: LD_VAR 0 11
36391: PPUSH
36392: LD_VAR 0 8
36396: PPUSH
36397: LD_INT 5
36399: PPUSH
36400: CALL_OW 273
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36409: LD_VAR 0 9
36413: PUSH
36414: LD_INT 1
36416: ARRAY
36417: PPUSH
36418: LD_VAR 0 9
36422: PUSH
36423: LD_INT 2
36425: ARRAY
36426: PPUSH
36427: CALL_OW 488
36431: IFFALSE 36530
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36433: LD_ADDR_VAR 0 4
36437: PUSH
36438: LD_VAR 0 9
36442: PUSH
36443: LD_INT 1
36445: ARRAY
36446: PPUSH
36447: LD_VAR 0 9
36451: PUSH
36452: LD_INT 2
36454: ARRAY
36455: PPUSH
36456: CALL_OW 546
36460: ST_TO_ADDR
// if hex [ 1 ] then
36461: LD_VAR 0 4
36465: PUSH
36466: LD_INT 1
36468: ARRAY
36469: IFFALSE 36473
// continue ;
36471: GO 36361
// h := hex [ 2 ] ;
36473: LD_ADDR_VAR 0 13
36477: PUSH
36478: LD_VAR 0 4
36482: PUSH
36483: LD_INT 2
36485: ARRAY
36486: ST_TO_ADDR
// if h + 7 < height then
36487: LD_VAR 0 13
36491: PUSH
36492: LD_INT 7
36494: PLUS
36495: PUSH
36496: LD_VAR 0 15
36500: LESS
36501: IFFALSE 36530
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36503: LD_ADDR_VAR 0 18
36507: PUSH
36508: LD_INT 7
36510: PUSH
36511: LD_INT 28
36513: PUSH
36514: LD_INT 45
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: PUSH
36522: LD_VAR 0 12
36526: ARRAY
36527: ST_TO_ADDR
// break ;
36528: GO 36532
// end ; end ; end ;
36530: GO 36361
36532: POP
36533: POP
// end ; if not weapon then
36534: LD_VAR 0 18
36538: NOT
36539: IFFALSE 36599
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36541: LD_ADDR_VAR 0 5
36545: PUSH
36546: LD_VAR 0 5
36550: PUSH
36551: LD_INT 11
36553: PUSH
36554: LD_INT 30
36556: PUSH
36557: LD_INT 49
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: DIFF
36565: ST_TO_ADDR
// if not list then
36566: LD_VAR 0 5
36570: NOT
36571: IFFALSE 36575
// exit ;
36573: GO 36717
// weapon := list [ rand ( 1 , list ) ] ;
36575: LD_ADDR_VAR 0 18
36579: PUSH
36580: LD_VAR 0 5
36584: PUSH
36585: LD_INT 1
36587: PPUSH
36588: LD_VAR 0 5
36592: PPUSH
36593: CALL_OW 12
36597: ARRAY
36598: ST_TO_ADDR
// end ; if weapon then
36599: LD_VAR 0 18
36603: IFFALSE 36717
// begin tmp := CostOfWeapon ( weapon ) ;
36605: LD_ADDR_VAR 0 14
36609: PUSH
36610: LD_VAR 0 18
36614: PPUSH
36615: CALL_OW 451
36619: ST_TO_ADDR
// j := GetBase ( tower ) ;
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_VAR 0 1
36629: PPUSH
36630: CALL_OW 274
36634: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36635: LD_VAR 0 9
36639: PPUSH
36640: LD_INT 1
36642: PPUSH
36643: CALL_OW 275
36647: PUSH
36648: LD_VAR 0 14
36652: PUSH
36653: LD_INT 1
36655: ARRAY
36656: GREATEREQUAL
36657: PUSH
36658: LD_VAR 0 9
36662: PPUSH
36663: LD_INT 2
36665: PPUSH
36666: CALL_OW 275
36670: PUSH
36671: LD_VAR 0 14
36675: PUSH
36676: LD_INT 2
36678: ARRAY
36679: GREATEREQUAL
36680: AND
36681: PUSH
36682: LD_VAR 0 9
36686: PPUSH
36687: LD_INT 3
36689: PPUSH
36690: CALL_OW 275
36694: PUSH
36695: LD_VAR 0 14
36699: PUSH
36700: LD_INT 3
36702: ARRAY
36703: GREATEREQUAL
36704: AND
36705: IFFALSE 36717
// result := weapon ;
36707: LD_ADDR_VAR 0 3
36711: PUSH
36712: LD_VAR 0 18
36716: ST_TO_ADDR
// end ; end ;
36717: LD_VAR 0 3
36721: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36722: LD_INT 0
36724: PPUSH
36725: PPUSH
// result := true ;
36726: LD_ADDR_VAR 0 3
36730: PUSH
36731: LD_INT 1
36733: ST_TO_ADDR
// if array1 = array2 then
36734: LD_VAR 0 1
36738: PUSH
36739: LD_VAR 0 2
36743: EQUAL
36744: IFFALSE 36804
// begin for i = 1 to array1 do
36746: LD_ADDR_VAR 0 4
36750: PUSH
36751: DOUBLE
36752: LD_INT 1
36754: DEC
36755: ST_TO_ADDR
36756: LD_VAR 0 1
36760: PUSH
36761: FOR_TO
36762: IFFALSE 36800
// if array1 [ i ] <> array2 [ i ] then
36764: LD_VAR 0 1
36768: PUSH
36769: LD_VAR 0 4
36773: ARRAY
36774: PUSH
36775: LD_VAR 0 2
36779: PUSH
36780: LD_VAR 0 4
36784: ARRAY
36785: NONEQUAL
36786: IFFALSE 36798
// begin result := false ;
36788: LD_ADDR_VAR 0 3
36792: PUSH
36793: LD_INT 0
36795: ST_TO_ADDR
// break ;
36796: GO 36800
// end ;
36798: GO 36761
36800: POP
36801: POP
// end else
36802: GO 36812
// result := false ;
36804: LD_ADDR_VAR 0 3
36808: PUSH
36809: LD_INT 0
36811: ST_TO_ADDR
// end ;
36812: LD_VAR 0 3
36816: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36817: LD_INT 0
36819: PPUSH
36820: PPUSH
// if not array1 or not array2 then
36821: LD_VAR 0 1
36825: NOT
36826: PUSH
36827: LD_VAR 0 2
36831: NOT
36832: OR
36833: IFFALSE 36837
// exit ;
36835: GO 36901
// result := true ;
36837: LD_ADDR_VAR 0 3
36841: PUSH
36842: LD_INT 1
36844: ST_TO_ADDR
// for i = 1 to array1 do
36845: LD_ADDR_VAR 0 4
36849: PUSH
36850: DOUBLE
36851: LD_INT 1
36853: DEC
36854: ST_TO_ADDR
36855: LD_VAR 0 1
36859: PUSH
36860: FOR_TO
36861: IFFALSE 36899
// if array1 [ i ] <> array2 [ i ] then
36863: LD_VAR 0 1
36867: PUSH
36868: LD_VAR 0 4
36872: ARRAY
36873: PUSH
36874: LD_VAR 0 2
36878: PUSH
36879: LD_VAR 0 4
36883: ARRAY
36884: NONEQUAL
36885: IFFALSE 36897
// begin result := false ;
36887: LD_ADDR_VAR 0 3
36891: PUSH
36892: LD_INT 0
36894: ST_TO_ADDR
// break ;
36895: GO 36899
// end ;
36897: GO 36860
36899: POP
36900: POP
// end ;
36901: LD_VAR 0 3
36905: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36906: LD_INT 0
36908: PPUSH
36909: PPUSH
36910: PPUSH
// pom := GetBase ( fac ) ;
36911: LD_ADDR_VAR 0 5
36915: PUSH
36916: LD_VAR 0 1
36920: PPUSH
36921: CALL_OW 274
36925: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36926: LD_ADDR_VAR 0 4
36930: PUSH
36931: LD_VAR 0 2
36935: PUSH
36936: LD_INT 1
36938: ARRAY
36939: PPUSH
36940: LD_VAR 0 2
36944: PUSH
36945: LD_INT 2
36947: ARRAY
36948: PPUSH
36949: LD_VAR 0 2
36953: PUSH
36954: LD_INT 3
36956: ARRAY
36957: PPUSH
36958: LD_VAR 0 2
36962: PUSH
36963: LD_INT 4
36965: ARRAY
36966: PPUSH
36967: CALL_OW 449
36971: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36972: LD_ADDR_VAR 0 3
36976: PUSH
36977: LD_VAR 0 5
36981: PPUSH
36982: LD_INT 1
36984: PPUSH
36985: CALL_OW 275
36989: PUSH
36990: LD_VAR 0 4
36994: PUSH
36995: LD_INT 1
36997: ARRAY
36998: GREATEREQUAL
36999: PUSH
37000: LD_VAR 0 5
37004: PPUSH
37005: LD_INT 2
37007: PPUSH
37008: CALL_OW 275
37012: PUSH
37013: LD_VAR 0 4
37017: PUSH
37018: LD_INT 2
37020: ARRAY
37021: GREATEREQUAL
37022: AND
37023: PUSH
37024: LD_VAR 0 5
37028: PPUSH
37029: LD_INT 3
37031: PPUSH
37032: CALL_OW 275
37036: PUSH
37037: LD_VAR 0 4
37041: PUSH
37042: LD_INT 3
37044: ARRAY
37045: GREATEREQUAL
37046: AND
37047: ST_TO_ADDR
// end ;
37048: LD_VAR 0 3
37052: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37053: LD_INT 0
37055: PPUSH
37056: PPUSH
37057: PPUSH
37058: PPUSH
// pom := GetBase ( building ) ;
37059: LD_ADDR_VAR 0 3
37063: PUSH
37064: LD_VAR 0 1
37068: PPUSH
37069: CALL_OW 274
37073: ST_TO_ADDR
// if not pom then
37074: LD_VAR 0 3
37078: NOT
37079: IFFALSE 37083
// exit ;
37081: GO 37253
// btype := GetBType ( building ) ;
37083: LD_ADDR_VAR 0 5
37087: PUSH
37088: LD_VAR 0 1
37092: PPUSH
37093: CALL_OW 266
37097: ST_TO_ADDR
// if btype = b_armoury then
37098: LD_VAR 0 5
37102: PUSH
37103: LD_INT 4
37105: EQUAL
37106: IFFALSE 37116
// btype := b_barracks ;
37108: LD_ADDR_VAR 0 5
37112: PUSH
37113: LD_INT 5
37115: ST_TO_ADDR
// if btype = b_depot then
37116: LD_VAR 0 5
37120: PUSH
37121: LD_INT 0
37123: EQUAL
37124: IFFALSE 37134
// btype := b_warehouse ;
37126: LD_ADDR_VAR 0 5
37130: PUSH
37131: LD_INT 1
37133: ST_TO_ADDR
// if btype = b_workshop then
37134: LD_VAR 0 5
37138: PUSH
37139: LD_INT 2
37141: EQUAL
37142: IFFALSE 37152
// btype := b_factory ;
37144: LD_ADDR_VAR 0 5
37148: PUSH
37149: LD_INT 3
37151: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37152: LD_ADDR_VAR 0 4
37156: PUSH
37157: LD_VAR 0 5
37161: PPUSH
37162: LD_VAR 0 1
37166: PPUSH
37167: CALL_OW 248
37171: PPUSH
37172: CALL_OW 450
37176: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37177: LD_ADDR_VAR 0 2
37181: PUSH
37182: LD_VAR 0 3
37186: PPUSH
37187: LD_INT 1
37189: PPUSH
37190: CALL_OW 275
37194: PUSH
37195: LD_VAR 0 4
37199: PUSH
37200: LD_INT 1
37202: ARRAY
37203: GREATEREQUAL
37204: PUSH
37205: LD_VAR 0 3
37209: PPUSH
37210: LD_INT 2
37212: PPUSH
37213: CALL_OW 275
37217: PUSH
37218: LD_VAR 0 4
37222: PUSH
37223: LD_INT 2
37225: ARRAY
37226: GREATEREQUAL
37227: AND
37228: PUSH
37229: LD_VAR 0 3
37233: PPUSH
37234: LD_INT 3
37236: PPUSH
37237: CALL_OW 275
37241: PUSH
37242: LD_VAR 0 4
37246: PUSH
37247: LD_INT 3
37249: ARRAY
37250: GREATEREQUAL
37251: AND
37252: ST_TO_ADDR
// end ;
37253: LD_VAR 0 2
37257: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37258: LD_INT 0
37260: PPUSH
37261: PPUSH
37262: PPUSH
// pom := GetBase ( building ) ;
37263: LD_ADDR_VAR 0 4
37267: PUSH
37268: LD_VAR 0 1
37272: PPUSH
37273: CALL_OW 274
37277: ST_TO_ADDR
// if not pom then
37278: LD_VAR 0 4
37282: NOT
37283: IFFALSE 37287
// exit ;
37285: GO 37388
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37287: LD_ADDR_VAR 0 5
37291: PUSH
37292: LD_VAR 0 2
37296: PPUSH
37297: LD_VAR 0 1
37301: PPUSH
37302: CALL_OW 248
37306: PPUSH
37307: CALL_OW 450
37311: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37312: LD_ADDR_VAR 0 3
37316: PUSH
37317: LD_VAR 0 4
37321: PPUSH
37322: LD_INT 1
37324: PPUSH
37325: CALL_OW 275
37329: PUSH
37330: LD_VAR 0 5
37334: PUSH
37335: LD_INT 1
37337: ARRAY
37338: GREATEREQUAL
37339: PUSH
37340: LD_VAR 0 4
37344: PPUSH
37345: LD_INT 2
37347: PPUSH
37348: CALL_OW 275
37352: PUSH
37353: LD_VAR 0 5
37357: PUSH
37358: LD_INT 2
37360: ARRAY
37361: GREATEREQUAL
37362: AND
37363: PUSH
37364: LD_VAR 0 4
37368: PPUSH
37369: LD_INT 3
37371: PPUSH
37372: CALL_OW 275
37376: PUSH
37377: LD_VAR 0 5
37381: PUSH
37382: LD_INT 3
37384: ARRAY
37385: GREATEREQUAL
37386: AND
37387: ST_TO_ADDR
// end ;
37388: LD_VAR 0 3
37392: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37393: LD_INT 0
37395: PPUSH
37396: PPUSH
37397: PPUSH
37398: PPUSH
37399: PPUSH
37400: PPUSH
37401: PPUSH
37402: PPUSH
37403: PPUSH
37404: PPUSH
37405: PPUSH
// result := false ;
37406: LD_ADDR_VAR 0 8
37410: PUSH
37411: LD_INT 0
37413: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37414: LD_VAR 0 5
37418: NOT
37419: PUSH
37420: LD_VAR 0 1
37424: NOT
37425: OR
37426: PUSH
37427: LD_VAR 0 2
37431: NOT
37432: OR
37433: PUSH
37434: LD_VAR 0 3
37438: NOT
37439: OR
37440: IFFALSE 37444
// exit ;
37442: GO 38258
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37444: LD_ADDR_VAR 0 14
37448: PUSH
37449: LD_VAR 0 1
37453: PPUSH
37454: LD_VAR 0 2
37458: PPUSH
37459: LD_VAR 0 3
37463: PPUSH
37464: LD_VAR 0 4
37468: PPUSH
37469: LD_VAR 0 5
37473: PUSH
37474: LD_INT 1
37476: ARRAY
37477: PPUSH
37478: CALL_OW 248
37482: PPUSH
37483: LD_INT 0
37485: PPUSH
37486: CALL 39495 0 6
37490: ST_TO_ADDR
// if not hexes then
37491: LD_VAR 0 14
37495: NOT
37496: IFFALSE 37500
// exit ;
37498: GO 38258
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37500: LD_ADDR_VAR 0 17
37504: PUSH
37505: LD_VAR 0 5
37509: PPUSH
37510: LD_INT 22
37512: PUSH
37513: LD_VAR 0 13
37517: PPUSH
37518: CALL_OW 255
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: LD_INT 30
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 30
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PPUSH
37559: CALL_OW 72
37563: ST_TO_ADDR
// for i = 1 to hexes do
37564: LD_ADDR_VAR 0 9
37568: PUSH
37569: DOUBLE
37570: LD_INT 1
37572: DEC
37573: ST_TO_ADDR
37574: LD_VAR 0 14
37578: PUSH
37579: FOR_TO
37580: IFFALSE 38256
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37582: LD_ADDR_VAR 0 13
37586: PUSH
37587: LD_VAR 0 14
37591: PUSH
37592: LD_VAR 0 9
37596: ARRAY
37597: PUSH
37598: LD_INT 1
37600: ARRAY
37601: PPUSH
37602: LD_VAR 0 14
37606: PUSH
37607: LD_VAR 0 9
37611: ARRAY
37612: PUSH
37613: LD_INT 2
37615: ARRAY
37616: PPUSH
37617: CALL_OW 428
37621: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37622: LD_VAR 0 14
37626: PUSH
37627: LD_VAR 0 9
37631: ARRAY
37632: PUSH
37633: LD_INT 1
37635: ARRAY
37636: PPUSH
37637: LD_VAR 0 14
37641: PUSH
37642: LD_VAR 0 9
37646: ARRAY
37647: PUSH
37648: LD_INT 2
37650: ARRAY
37651: PPUSH
37652: CALL_OW 351
37656: PUSH
37657: LD_VAR 0 14
37661: PUSH
37662: LD_VAR 0 9
37666: ARRAY
37667: PUSH
37668: LD_INT 1
37670: ARRAY
37671: PPUSH
37672: LD_VAR 0 14
37676: PUSH
37677: LD_VAR 0 9
37681: ARRAY
37682: PUSH
37683: LD_INT 2
37685: ARRAY
37686: PPUSH
37687: CALL_OW 488
37691: NOT
37692: OR
37693: PUSH
37694: LD_VAR 0 13
37698: PPUSH
37699: CALL_OW 247
37703: PUSH
37704: LD_INT 3
37706: EQUAL
37707: OR
37708: IFFALSE 37714
// exit ;
37710: POP
37711: POP
37712: GO 38258
// if not tmp then
37714: LD_VAR 0 13
37718: NOT
37719: IFFALSE 37723
// continue ;
37721: GO 37579
// result := true ;
37723: LD_ADDR_VAR 0 8
37727: PUSH
37728: LD_INT 1
37730: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37731: LD_VAR 0 6
37735: PUSH
37736: LD_VAR 0 13
37740: PPUSH
37741: CALL_OW 247
37745: PUSH
37746: LD_INT 2
37748: EQUAL
37749: AND
37750: PUSH
37751: LD_VAR 0 13
37755: PPUSH
37756: CALL_OW 263
37760: PUSH
37761: LD_INT 1
37763: EQUAL
37764: AND
37765: IFFALSE 37929
// begin if IsDrivenBy ( tmp ) then
37767: LD_VAR 0 13
37771: PPUSH
37772: CALL_OW 311
37776: IFFALSE 37780
// continue ;
37778: GO 37579
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37780: LD_VAR 0 6
37784: PPUSH
37785: LD_INT 3
37787: PUSH
37788: LD_INT 60
37790: PUSH
37791: EMPTY
37792: LIST
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 3
37800: PUSH
37801: LD_INT 55
37803: PUSH
37804: EMPTY
37805: LIST
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PPUSH
37815: CALL_OW 72
37819: IFFALSE 37927
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37821: LD_ADDR_VAR 0 18
37825: PUSH
37826: LD_VAR 0 6
37830: PPUSH
37831: LD_INT 3
37833: PUSH
37834: LD_INT 60
37836: PUSH
37837: EMPTY
37838: LIST
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 3
37846: PUSH
37847: LD_INT 55
37849: PUSH
37850: EMPTY
37851: LIST
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PPUSH
37861: CALL_OW 72
37865: PUSH
37866: LD_INT 1
37868: ARRAY
37869: ST_TO_ADDR
// if IsInUnit ( driver ) then
37870: LD_VAR 0 18
37874: PPUSH
37875: CALL_OW 310
37879: IFFALSE 37890
// ComExit ( driver ) ;
37881: LD_VAR 0 18
37885: PPUSH
37886: CALL 62679 0 1
// AddComEnterUnit ( driver , tmp ) ;
37890: LD_VAR 0 18
37894: PPUSH
37895: LD_VAR 0 13
37899: PPUSH
37900: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37904: LD_VAR 0 18
37908: PPUSH
37909: LD_VAR 0 7
37913: PPUSH
37914: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37918: LD_VAR 0 18
37922: PPUSH
37923: CALL_OW 181
// end ; continue ;
37927: GO 37579
// end ; if not cleaners or not tmp in cleaners then
37929: LD_VAR 0 6
37933: NOT
37934: PUSH
37935: LD_VAR 0 13
37939: PUSH
37940: LD_VAR 0 6
37944: IN
37945: NOT
37946: OR
37947: IFFALSE 38254
// begin if dep then
37949: LD_VAR 0 17
37953: IFFALSE 38089
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37955: LD_ADDR_VAR 0 16
37959: PUSH
37960: LD_VAR 0 17
37964: PUSH
37965: LD_INT 1
37967: ARRAY
37968: PPUSH
37969: CALL_OW 250
37973: PPUSH
37974: LD_VAR 0 17
37978: PUSH
37979: LD_INT 1
37981: ARRAY
37982: PPUSH
37983: CALL_OW 254
37987: PPUSH
37988: LD_INT 5
37990: PPUSH
37991: CALL_OW 272
37995: PUSH
37996: LD_VAR 0 17
38000: PUSH
38001: LD_INT 1
38003: ARRAY
38004: PPUSH
38005: CALL_OW 251
38009: PPUSH
38010: LD_VAR 0 17
38014: PUSH
38015: LD_INT 1
38017: ARRAY
38018: PPUSH
38019: CALL_OW 254
38023: PPUSH
38024: LD_INT 5
38026: PPUSH
38027: CALL_OW 273
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38036: LD_VAR 0 16
38040: PUSH
38041: LD_INT 1
38043: ARRAY
38044: PPUSH
38045: LD_VAR 0 16
38049: PUSH
38050: LD_INT 2
38052: ARRAY
38053: PPUSH
38054: CALL_OW 488
38058: IFFALSE 38089
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38060: LD_VAR 0 13
38064: PPUSH
38065: LD_VAR 0 16
38069: PUSH
38070: LD_INT 1
38072: ARRAY
38073: PPUSH
38074: LD_VAR 0 16
38078: PUSH
38079: LD_INT 2
38081: ARRAY
38082: PPUSH
38083: CALL_OW 111
// continue ;
38087: GO 37579
// end ; end ; r := GetDir ( tmp ) ;
38089: LD_ADDR_VAR 0 15
38093: PUSH
38094: LD_VAR 0 13
38098: PPUSH
38099: CALL_OW 254
38103: ST_TO_ADDR
// if r = 5 then
38104: LD_VAR 0 15
38108: PUSH
38109: LD_INT 5
38111: EQUAL
38112: IFFALSE 38122
// r := 0 ;
38114: LD_ADDR_VAR 0 15
38118: PUSH
38119: LD_INT 0
38121: ST_TO_ADDR
// for j = r to 5 do
38122: LD_ADDR_VAR 0 10
38126: PUSH
38127: DOUBLE
38128: LD_VAR 0 15
38132: DEC
38133: ST_TO_ADDR
38134: LD_INT 5
38136: PUSH
38137: FOR_TO
38138: IFFALSE 38252
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38140: LD_ADDR_VAR 0 11
38144: PUSH
38145: LD_VAR 0 13
38149: PPUSH
38150: CALL_OW 250
38154: PPUSH
38155: LD_VAR 0 10
38159: PPUSH
38160: LD_INT 2
38162: PPUSH
38163: CALL_OW 272
38167: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38168: LD_ADDR_VAR 0 12
38172: PUSH
38173: LD_VAR 0 13
38177: PPUSH
38178: CALL_OW 251
38182: PPUSH
38183: LD_VAR 0 10
38187: PPUSH
38188: LD_INT 2
38190: PPUSH
38191: CALL_OW 273
38195: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38196: LD_VAR 0 11
38200: PPUSH
38201: LD_VAR 0 12
38205: PPUSH
38206: CALL_OW 488
38210: PUSH
38211: LD_VAR 0 11
38215: PPUSH
38216: LD_VAR 0 12
38220: PPUSH
38221: CALL_OW 428
38225: NOT
38226: AND
38227: IFFALSE 38250
// begin ComMoveXY ( tmp , _x , _y ) ;
38229: LD_VAR 0 13
38233: PPUSH
38234: LD_VAR 0 11
38238: PPUSH
38239: LD_VAR 0 12
38243: PPUSH
38244: CALL_OW 111
// break ;
38248: GO 38252
// end ; end ;
38250: GO 38137
38252: POP
38253: POP
// end ; end ;
38254: GO 37579
38256: POP
38257: POP
// end ;
38258: LD_VAR 0 8
38262: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38263: LD_INT 0
38265: PPUSH
// result := true ;
38266: LD_ADDR_VAR 0 3
38270: PUSH
38271: LD_INT 1
38273: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38274: LD_VAR 0 2
38278: PUSH
38279: LD_INT 24
38281: DOUBLE
38282: EQUAL
38283: IFTRUE 38293
38285: LD_INT 33
38287: DOUBLE
38288: EQUAL
38289: IFTRUE 38293
38291: GO 38318
38293: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38294: LD_ADDR_VAR 0 3
38298: PUSH
38299: LD_INT 32
38301: PPUSH
38302: LD_VAR 0 1
38306: PPUSH
38307: CALL_OW 321
38311: PUSH
38312: LD_INT 2
38314: EQUAL
38315: ST_TO_ADDR
38316: GO 38638
38318: LD_INT 20
38320: DOUBLE
38321: EQUAL
38322: IFTRUE 38326
38324: GO 38351
38326: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38327: LD_ADDR_VAR 0 3
38331: PUSH
38332: LD_INT 6
38334: PPUSH
38335: LD_VAR 0 1
38339: PPUSH
38340: CALL_OW 321
38344: PUSH
38345: LD_INT 2
38347: EQUAL
38348: ST_TO_ADDR
38349: GO 38638
38351: LD_INT 22
38353: DOUBLE
38354: EQUAL
38355: IFTRUE 38365
38357: LD_INT 36
38359: DOUBLE
38360: EQUAL
38361: IFTRUE 38365
38363: GO 38390
38365: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38366: LD_ADDR_VAR 0 3
38370: PUSH
38371: LD_INT 15
38373: PPUSH
38374: LD_VAR 0 1
38378: PPUSH
38379: CALL_OW 321
38383: PUSH
38384: LD_INT 2
38386: EQUAL
38387: ST_TO_ADDR
38388: GO 38638
38390: LD_INT 30
38392: DOUBLE
38393: EQUAL
38394: IFTRUE 38398
38396: GO 38423
38398: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38399: LD_ADDR_VAR 0 3
38403: PUSH
38404: LD_INT 20
38406: PPUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 321
38416: PUSH
38417: LD_INT 2
38419: EQUAL
38420: ST_TO_ADDR
38421: GO 38638
38423: LD_INT 28
38425: DOUBLE
38426: EQUAL
38427: IFTRUE 38437
38429: LD_INT 21
38431: DOUBLE
38432: EQUAL
38433: IFTRUE 38437
38435: GO 38462
38437: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38438: LD_ADDR_VAR 0 3
38442: PUSH
38443: LD_INT 21
38445: PPUSH
38446: LD_VAR 0 1
38450: PPUSH
38451: CALL_OW 321
38455: PUSH
38456: LD_INT 2
38458: EQUAL
38459: ST_TO_ADDR
38460: GO 38638
38462: LD_INT 16
38464: DOUBLE
38465: EQUAL
38466: IFTRUE 38470
38468: GO 38497
38470: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38471: LD_ADDR_VAR 0 3
38475: PUSH
38476: LD_EXP 30
38480: PPUSH
38481: LD_VAR 0 1
38485: PPUSH
38486: CALL_OW 321
38490: PUSH
38491: LD_INT 2
38493: EQUAL
38494: ST_TO_ADDR
38495: GO 38638
38497: LD_INT 19
38499: DOUBLE
38500: EQUAL
38501: IFTRUE 38511
38503: LD_INT 23
38505: DOUBLE
38506: EQUAL
38507: IFTRUE 38511
38509: GO 38538
38511: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38512: LD_ADDR_VAR 0 3
38516: PUSH
38517: LD_EXP 29
38521: PPUSH
38522: LD_VAR 0 1
38526: PPUSH
38527: CALL_OW 321
38531: PUSH
38532: LD_INT 2
38534: EQUAL
38535: ST_TO_ADDR
38536: GO 38638
38538: LD_INT 17
38540: DOUBLE
38541: EQUAL
38542: IFTRUE 38546
38544: GO 38571
38546: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38547: LD_ADDR_VAR 0 3
38551: PUSH
38552: LD_INT 39
38554: PPUSH
38555: LD_VAR 0 1
38559: PPUSH
38560: CALL_OW 321
38564: PUSH
38565: LD_INT 2
38567: EQUAL
38568: ST_TO_ADDR
38569: GO 38638
38571: LD_INT 18
38573: DOUBLE
38574: EQUAL
38575: IFTRUE 38579
38577: GO 38604
38579: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38580: LD_ADDR_VAR 0 3
38584: PUSH
38585: LD_INT 40
38587: PPUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: CALL_OW 321
38597: PUSH
38598: LD_INT 2
38600: EQUAL
38601: ST_TO_ADDR
38602: GO 38638
38604: LD_INT 27
38606: DOUBLE
38607: EQUAL
38608: IFTRUE 38612
38610: GO 38637
38612: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38613: LD_ADDR_VAR 0 3
38617: PUSH
38618: LD_INT 35
38620: PPUSH
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 321
38630: PUSH
38631: LD_INT 2
38633: EQUAL
38634: ST_TO_ADDR
38635: GO 38638
38637: POP
// end ;
38638: LD_VAR 0 3
38642: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38643: LD_INT 0
38645: PPUSH
38646: PPUSH
38647: PPUSH
38648: PPUSH
38649: PPUSH
38650: PPUSH
38651: PPUSH
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
// result := false ;
38656: LD_ADDR_VAR 0 6
38660: PUSH
38661: LD_INT 0
38663: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38664: LD_VAR 0 1
38668: NOT
38669: PUSH
38670: LD_VAR 0 1
38674: PPUSH
38675: CALL_OW 266
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: IN
38690: NOT
38691: OR
38692: PUSH
38693: LD_VAR 0 2
38697: NOT
38698: OR
38699: PUSH
38700: LD_VAR 0 5
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: LD_INT 4
38719: PUSH
38720: LD_INT 5
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: IN
38731: NOT
38732: OR
38733: PUSH
38734: LD_VAR 0 3
38738: PPUSH
38739: LD_VAR 0 4
38743: PPUSH
38744: CALL_OW 488
38748: NOT
38749: OR
38750: IFFALSE 38754
// exit ;
38752: GO 39490
// side := GetSide ( depot ) ;
38754: LD_ADDR_VAR 0 9
38758: PUSH
38759: LD_VAR 0 1
38763: PPUSH
38764: CALL_OW 255
38768: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38769: LD_VAR 0 9
38773: PPUSH
38774: LD_VAR 0 2
38778: PPUSH
38779: CALL 38263 0 2
38783: NOT
38784: IFFALSE 38788
// exit ;
38786: GO 39490
// pom := GetBase ( depot ) ;
38788: LD_ADDR_VAR 0 10
38792: PUSH
38793: LD_VAR 0 1
38797: PPUSH
38798: CALL_OW 274
38802: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38803: LD_ADDR_VAR 0 11
38807: PUSH
38808: LD_VAR 0 2
38812: PPUSH
38813: LD_VAR 0 1
38817: PPUSH
38818: CALL_OW 248
38822: PPUSH
38823: CALL_OW 450
38827: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38828: LD_VAR 0 10
38832: PPUSH
38833: LD_INT 1
38835: PPUSH
38836: CALL_OW 275
38840: PUSH
38841: LD_VAR 0 11
38845: PUSH
38846: LD_INT 1
38848: ARRAY
38849: GREATEREQUAL
38850: PUSH
38851: LD_VAR 0 10
38855: PPUSH
38856: LD_INT 2
38858: PPUSH
38859: CALL_OW 275
38863: PUSH
38864: LD_VAR 0 11
38868: PUSH
38869: LD_INT 2
38871: ARRAY
38872: GREATEREQUAL
38873: AND
38874: PUSH
38875: LD_VAR 0 10
38879: PPUSH
38880: LD_INT 3
38882: PPUSH
38883: CALL_OW 275
38887: PUSH
38888: LD_VAR 0 11
38892: PUSH
38893: LD_INT 3
38895: ARRAY
38896: GREATEREQUAL
38897: AND
38898: NOT
38899: IFFALSE 38903
// exit ;
38901: GO 39490
// if GetBType ( depot ) = b_depot then
38903: LD_VAR 0 1
38907: PPUSH
38908: CALL_OW 266
38912: PUSH
38913: LD_INT 0
38915: EQUAL
38916: IFFALSE 38928
// dist := 28 else
38918: LD_ADDR_VAR 0 14
38922: PUSH
38923: LD_INT 28
38925: ST_TO_ADDR
38926: GO 38936
// dist := 36 ;
38928: LD_ADDR_VAR 0 14
38932: PUSH
38933: LD_INT 36
38935: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38936: LD_VAR 0 1
38940: PPUSH
38941: LD_VAR 0 3
38945: PPUSH
38946: LD_VAR 0 4
38950: PPUSH
38951: CALL_OW 297
38955: PUSH
38956: LD_VAR 0 14
38960: GREATER
38961: IFFALSE 38965
// exit ;
38963: GO 39490
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38965: LD_ADDR_VAR 0 12
38969: PUSH
38970: LD_VAR 0 2
38974: PPUSH
38975: LD_VAR 0 3
38979: PPUSH
38980: LD_VAR 0 4
38984: PPUSH
38985: LD_VAR 0 5
38989: PPUSH
38990: LD_VAR 0 1
38994: PPUSH
38995: CALL_OW 248
38999: PPUSH
39000: LD_INT 0
39002: PPUSH
39003: CALL 39495 0 6
39007: ST_TO_ADDR
// if not hexes then
39008: LD_VAR 0 12
39012: NOT
39013: IFFALSE 39017
// exit ;
39015: GO 39490
// hex := GetHexInfo ( x , y ) ;
39017: LD_ADDR_VAR 0 15
39021: PUSH
39022: LD_VAR 0 3
39026: PPUSH
39027: LD_VAR 0 4
39031: PPUSH
39032: CALL_OW 546
39036: ST_TO_ADDR
// if hex [ 1 ] then
39037: LD_VAR 0 15
39041: PUSH
39042: LD_INT 1
39044: ARRAY
39045: IFFALSE 39049
// exit ;
39047: GO 39490
// height := hex [ 2 ] ;
39049: LD_ADDR_VAR 0 13
39053: PUSH
39054: LD_VAR 0 15
39058: PUSH
39059: LD_INT 2
39061: ARRAY
39062: ST_TO_ADDR
// for i = 1 to hexes do
39063: LD_ADDR_VAR 0 7
39067: PUSH
39068: DOUBLE
39069: LD_INT 1
39071: DEC
39072: ST_TO_ADDR
39073: LD_VAR 0 12
39077: PUSH
39078: FOR_TO
39079: IFFALSE 39409
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39081: LD_VAR 0 12
39085: PUSH
39086: LD_VAR 0 7
39090: ARRAY
39091: PUSH
39092: LD_INT 1
39094: ARRAY
39095: PPUSH
39096: LD_VAR 0 12
39100: PUSH
39101: LD_VAR 0 7
39105: ARRAY
39106: PUSH
39107: LD_INT 2
39109: ARRAY
39110: PPUSH
39111: CALL_OW 488
39115: NOT
39116: PUSH
39117: LD_VAR 0 12
39121: PUSH
39122: LD_VAR 0 7
39126: ARRAY
39127: PUSH
39128: LD_INT 1
39130: ARRAY
39131: PPUSH
39132: LD_VAR 0 12
39136: PUSH
39137: LD_VAR 0 7
39141: ARRAY
39142: PUSH
39143: LD_INT 2
39145: ARRAY
39146: PPUSH
39147: CALL_OW 428
39151: PUSH
39152: LD_INT 0
39154: GREATER
39155: OR
39156: PUSH
39157: LD_VAR 0 12
39161: PUSH
39162: LD_VAR 0 7
39166: ARRAY
39167: PUSH
39168: LD_INT 1
39170: ARRAY
39171: PPUSH
39172: LD_VAR 0 12
39176: PUSH
39177: LD_VAR 0 7
39181: ARRAY
39182: PUSH
39183: LD_INT 2
39185: ARRAY
39186: PPUSH
39187: CALL_OW 351
39191: OR
39192: IFFALSE 39198
// exit ;
39194: POP
39195: POP
39196: GO 39490
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39198: LD_ADDR_VAR 0 8
39202: PUSH
39203: LD_VAR 0 12
39207: PUSH
39208: LD_VAR 0 7
39212: ARRAY
39213: PUSH
39214: LD_INT 1
39216: ARRAY
39217: PPUSH
39218: LD_VAR 0 12
39222: PUSH
39223: LD_VAR 0 7
39227: ARRAY
39228: PUSH
39229: LD_INT 2
39231: ARRAY
39232: PPUSH
39233: CALL_OW 546
39237: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39238: LD_VAR 0 8
39242: PUSH
39243: LD_INT 1
39245: ARRAY
39246: PUSH
39247: LD_VAR 0 8
39251: PUSH
39252: LD_INT 2
39254: ARRAY
39255: PUSH
39256: LD_VAR 0 13
39260: PUSH
39261: LD_INT 2
39263: PLUS
39264: GREATER
39265: OR
39266: PUSH
39267: LD_VAR 0 8
39271: PUSH
39272: LD_INT 2
39274: ARRAY
39275: PUSH
39276: LD_VAR 0 13
39280: PUSH
39281: LD_INT 2
39283: MINUS
39284: LESS
39285: OR
39286: PUSH
39287: LD_VAR 0 8
39291: PUSH
39292: LD_INT 3
39294: ARRAY
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 8
39301: PUSH
39302: LD_INT 9
39304: PUSH
39305: LD_INT 10
39307: PUSH
39308: LD_INT 11
39310: PUSH
39311: LD_INT 12
39313: PUSH
39314: LD_INT 13
39316: PUSH
39317: LD_INT 16
39319: PUSH
39320: LD_INT 17
39322: PUSH
39323: LD_INT 18
39325: PUSH
39326: LD_INT 19
39328: PUSH
39329: LD_INT 20
39331: PUSH
39332: LD_INT 21
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: IN
39350: NOT
39351: OR
39352: PUSH
39353: LD_VAR 0 8
39357: PUSH
39358: LD_INT 5
39360: ARRAY
39361: NOT
39362: OR
39363: PUSH
39364: LD_VAR 0 8
39368: PUSH
39369: LD_INT 6
39371: ARRAY
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 7
39381: PUSH
39382: LD_INT 9
39384: PUSH
39385: LD_INT 10
39387: PUSH
39388: LD_INT 11
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: IN
39399: NOT
39400: OR
39401: IFFALSE 39407
// exit ;
39403: POP
39404: POP
39405: GO 39490
// end ;
39407: GO 39078
39409: POP
39410: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39411: LD_VAR 0 9
39415: PPUSH
39416: LD_VAR 0 3
39420: PPUSH
39421: LD_VAR 0 4
39425: PPUSH
39426: LD_INT 20
39428: PPUSH
39429: CALL 31436 0 4
39433: PUSH
39434: LD_INT 4
39436: ARRAY
39437: IFFALSE 39441
// exit ;
39439: GO 39490
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39441: LD_VAR 0 2
39445: PUSH
39446: LD_INT 29
39448: PUSH
39449: LD_INT 30
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: IN
39456: PUSH
39457: LD_VAR 0 3
39461: PPUSH
39462: LD_VAR 0 4
39466: PPUSH
39467: LD_VAR 0 9
39471: PPUSH
39472: CALL_OW 440
39476: NOT
39477: AND
39478: IFFALSE 39482
// exit ;
39480: GO 39490
// result := true ;
39482: LD_ADDR_VAR 0 6
39486: PUSH
39487: LD_INT 1
39489: ST_TO_ADDR
// end ;
39490: LD_VAR 0 6
39494: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39495: LD_INT 0
39497: PPUSH
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
39508: PPUSH
39509: PPUSH
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
39517: PPUSH
39518: PPUSH
39519: PPUSH
39520: PPUSH
39521: PPUSH
39522: PPUSH
39523: PPUSH
39524: PPUSH
39525: PPUSH
39526: PPUSH
39527: PPUSH
39528: PPUSH
39529: PPUSH
39530: PPUSH
39531: PPUSH
39532: PPUSH
39533: PPUSH
39534: PPUSH
39535: PPUSH
39536: PPUSH
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
39541: PPUSH
39542: PPUSH
39543: PPUSH
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
39551: PPUSH
39552: PPUSH
39553: PPUSH
39554: PPUSH
// result = [ ] ;
39555: LD_ADDR_VAR 0 7
39559: PUSH
39560: EMPTY
39561: ST_TO_ADDR
// temp_list = [ ] ;
39562: LD_ADDR_VAR 0 9
39566: PUSH
39567: EMPTY
39568: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39569: LD_VAR 0 4
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: LD_INT 3
39585: PUSH
39586: LD_INT 4
39588: PUSH
39589: LD_INT 5
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: IN
39600: NOT
39601: PUSH
39602: LD_VAR 0 1
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: IN
39617: PUSH
39618: LD_VAR 0 5
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 3
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: IN
39637: NOT
39638: AND
39639: OR
39640: IFFALSE 39644
// exit ;
39642: GO 58035
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39644: LD_VAR 0 1
39648: PUSH
39649: LD_INT 6
39651: PUSH
39652: LD_INT 7
39654: PUSH
39655: LD_INT 8
39657: PUSH
39658: LD_INT 13
39660: PUSH
39661: LD_INT 12
39663: PUSH
39664: LD_INT 15
39666: PUSH
39667: LD_INT 11
39669: PUSH
39670: LD_INT 14
39672: PUSH
39673: LD_INT 10
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: IN
39687: IFFALSE 39697
// btype = b_lab ;
39689: LD_ADDR_VAR 0 1
39693: PUSH
39694: LD_INT 6
39696: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39697: LD_VAR 0 6
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: IN
39716: NOT
39717: PUSH
39718: LD_VAR 0 1
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: LD_INT 3
39734: PUSH
39735: LD_INT 6
39737: PUSH
39738: LD_INT 36
39740: PUSH
39741: LD_INT 4
39743: PUSH
39744: LD_INT 5
39746: PUSH
39747: LD_INT 31
39749: PUSH
39750: LD_INT 32
39752: PUSH
39753: LD_INT 33
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: IN
39769: NOT
39770: PUSH
39771: LD_VAR 0 6
39775: PUSH
39776: LD_INT 1
39778: EQUAL
39779: AND
39780: OR
39781: PUSH
39782: LD_VAR 0 1
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: LD_INT 3
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: IN
39797: NOT
39798: PUSH
39799: LD_VAR 0 6
39803: PUSH
39804: LD_INT 2
39806: EQUAL
39807: AND
39808: OR
39809: IFFALSE 39819
// mode = 0 ;
39811: LD_ADDR_VAR 0 6
39815: PUSH
39816: LD_INT 0
39818: ST_TO_ADDR
// case mode of 0 :
39819: LD_VAR 0 6
39823: PUSH
39824: LD_INT 0
39826: DOUBLE
39827: EQUAL
39828: IFTRUE 39832
39830: GO 51285
39832: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39833: LD_ADDR_VAR 0 11
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 2
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 3
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 3
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40026: LD_ADDR_VAR 0 12
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 2
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: NEG
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: NEG
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 3
40183: NEG
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 3
40194: NEG
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40222: LD_ADDR_VAR 0 13
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 3
40381: NEG
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 3
40393: NEG
40394: PUSH
40395: LD_INT 3
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40421: LD_ADDR_VAR 0 14
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: LD_INT 3
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 3
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 2
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40617: LD_ADDR_VAR 0 15
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 3
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 3
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40810: LD_ADDR_VAR 0 16
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 3
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 3
40967: PUSH
40968: LD_INT 3
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: LD_INT 3
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41003: LD_ADDR_VAR 0 17
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: LD_INT 2
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 2
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: LD_INT 2
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: LD_INT 2
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 2
41202: NEG
41203: PUSH
41204: LD_INT 2
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41233: LD_ADDR_VAR 0 18
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 2
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 2
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41463: LD_ADDR_VAR 0 19
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41693: LD_ADDR_VAR 0 20
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 2
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 2
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 2
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 2
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 2
41869: NEG
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: NEG
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 2
41892: NEG
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41923: LD_ADDR_VAR 0 21
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 2
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 2
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42153: LD_ADDR_VAR 0 22
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: LD_INT 2
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 2
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: LD_INT 2
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42383: LD_ADDR_VAR 0 23
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 2
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: LD_INT 3
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: LD_INT 3
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: LD_INT 2
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42663: LD_ADDR_VAR 0 24
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 2
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 2
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 3
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 3
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42939: LD_ADDR_VAR 0 25
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: LD_INT 2
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 2
43126: NEG
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: LD_INT 2
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 3
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: LD_INT 3
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43213: LD_ADDR_VAR 0 26
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: NEG
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 3
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: LD_INT 2
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43489: LD_ADDR_VAR 0 27
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: NEG
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 3
43734: NEG
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43769: LD_ADDR_VAR 0 28
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 2
43968: NEG
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: LD_INT 3
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 3
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 3
44004: NEG
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 3
44016: NEG
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44051: LD_ADDR_VAR 0 29
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 3
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 3
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 3
44295: NEG
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44330: LD_ADDR_VAR 0 30
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 2
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 3
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 3
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 3
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 3
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44608: LD_ADDR_VAR 0 31
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: LD_INT 3
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 3
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 3
44851: NEG
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44886: LD_ADDR_VAR 0 32
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 3
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 3
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 3
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45164: LD_ADDR_VAR 0 33
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: LD_INT 3
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 3
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 3
45408: NEG
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45443: LD_ADDR_VAR 0 34
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 3
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 2
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 3
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: NEG
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 3
45688: NEG
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45723: LD_ADDR_VAR 0 35
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45835: LD_ADDR_VAR 0 36
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45947: LD_ADDR_VAR 0 37
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46059: LD_ADDR_VAR 0 38
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46171: LD_ADDR_VAR 0 39
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46283: LD_ADDR_VAR 0 40
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46395: LD_ADDR_VAR 0 41
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: LD_INT 3
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 3
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 3
46638: PUSH
46639: LD_INT 3
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: LD_INT 3
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 3
46680: NEG
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 3
46692: NEG
46693: PUSH
46694: LD_INT 2
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 3
46704: NEG
46705: PUSH
46706: LD_INT 3
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46745: LD_ADDR_VAR 0 42
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: LD_INT 3
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 3
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 3
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: LD_INT 3
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47095: LD_ADDR_VAR 0 43
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 3
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 3
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 3
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 3
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 3
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 3
47391: NEG
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 3
47402: NEG
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47443: LD_ADDR_VAR 0 44
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: LD_INT 3
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 3
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: LD_INT 3
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 3
47717: NEG
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 3
47728: NEG
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: NEG
47753: PUSH
47754: LD_INT 3
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47793: LD_ADDR_VAR 0 45
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 3
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 3
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 3
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 3
48090: NEG
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 3
48102: NEG
48103: PUSH
48104: LD_INT 3
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48143: LD_ADDR_VAR 0 46
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: NEG
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 3
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 3
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 3
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 3
48439: NEG
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 3
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48491: LD_ADDR_VAR 0 47
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48642: LD_ADDR_VAR 0 48
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48789: LD_ADDR_VAR 0 49
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48933: LD_ADDR_VAR 0 50
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49077: LD_ADDR_VAR 0 51
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49224: LD_ADDR_VAR 0 52
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49375: LD_ADDR_VAR 0 53
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49605: LD_ADDR_VAR 0 54
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49835: LD_ADDR_VAR 0 55
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 2
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50065: LD_ADDR_VAR 0 56
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50295: LD_ADDR_VAR 0 57
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: LD_INT 2
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50525: LD_ADDR_VAR 0 58
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50755: LD_ADDR_VAR 0 59
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50843: LD_ADDR_VAR 0 60
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50931: LD_ADDR_VAR 0 61
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51019: LD_ADDR_VAR 0 62
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51107: LD_ADDR_VAR 0 63
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51195: LD_ADDR_VAR 0 64
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: ST_TO_ADDR
// end ; 1 :
51283: GO 57180
51285: LD_INT 1
51287: DOUBLE
51288: EQUAL
51289: IFTRUE 51293
51291: GO 53916
51293: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51294: LD_ADDR_VAR 0 11
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 3
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51338: LD_ADDR_VAR 0 12
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 3
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51379: LD_ADDR_VAR 0 13
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: LD_INT 3
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: LD_INT 3
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51419: LD_ADDR_VAR 0 14
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 3
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: LIST
51459: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51460: LD_ADDR_VAR 0 15
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51504: LD_ADDR_VAR 0 16
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 3
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: NEG
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 3
51535: NEG
51536: PUSH
51537: LD_INT 3
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51550: LD_ADDR_VAR 0 17
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 3
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 3
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: LIST
51593: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51594: LD_ADDR_VAR 0 18
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 3
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: LIST
51634: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51635: LD_ADDR_VAR 0 19
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: LD_INT 3
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51675: LD_ADDR_VAR 0 20
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: LIST
51715: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51716: LD_ADDR_VAR 0 21
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 3
51734: NEG
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51760: LD_ADDR_VAR 0 22
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: LD_INT 3
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: LIST
51805: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51806: LD_ADDR_VAR 0 23
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 4
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 3
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51850: LD_ADDR_VAR 0 24
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 3
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 4
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51891: LD_ADDR_VAR 0 25
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 4
51908: PUSH
51909: LD_INT 3
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: LD_INT 4
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51931: LD_ADDR_VAR 0 26
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 4
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 3
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51972: LD_ADDR_VAR 0 27
51976: PUSH
51977: LD_INT 3
51979: NEG
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 3
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 4
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52016: LD_ADDR_VAR 0 28
52020: PUSH
52021: LD_INT 3
52023: NEG
52024: PUSH
52025: LD_INT 3
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: LD_INT 4
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 4
52047: NEG
52048: PUSH
52049: LD_INT 3
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52062: LD_ADDR_VAR 0 29
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 3
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 3
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 4
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 4
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 3
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 5
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 5
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 4
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 6
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 6
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 5
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52217: LD_ADDR_VAR 0 30
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 4
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 4
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 4
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 5
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 5
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 5
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 6
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 6
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52360: LD_ADDR_VAR 0 31
52364: PUSH
52365: LD_INT 3
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: LD_INT 3
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 4
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 4
52407: PUSH
52408: LD_INT 4
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: LD_INT 4
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 5
52427: PUSH
52428: LD_INT 4
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 5
52437: PUSH
52438: LD_INT 5
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 4
52447: PUSH
52448: LD_INT 5
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 6
52457: PUSH
52458: LD_INT 5
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 6
52467: PUSH
52468: LD_INT 6
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 5
52477: PUSH
52478: LD_INT 6
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52499: LD_ADDR_VAR 0 32
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 3
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 4
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 4
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 5
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 5
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 4
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 6
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 6
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 5
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52642: LD_ADDR_VAR 0 33
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 3
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 3
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 3
52683: NEG
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 4
52694: NEG
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 4
52705: NEG
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 4
52717: NEG
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 5
52728: NEG
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 5
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 5
52751: NEG
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 6
52762: NEG
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 6
52773: NEG
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52797: LD_ADDR_VAR 0 34
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 3
52816: NEG
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 3
52828: NEG
52829: PUSH
52830: LD_INT 3
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: NEG
52841: PUSH
52842: LD_INT 4
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 4
52852: NEG
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 4
52864: NEG
52865: PUSH
52866: LD_INT 4
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 4
52876: NEG
52877: PUSH
52878: LD_INT 5
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 5
52888: NEG
52889: PUSH
52890: LD_INT 4
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 5
52900: NEG
52901: PUSH
52902: LD_INT 5
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 5
52912: NEG
52913: PUSH
52914: LD_INT 6
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 6
52924: NEG
52925: PUSH
52926: LD_INT 5
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 6
52936: NEG
52937: PUSH
52938: LD_INT 6
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52960: LD_ADDR_VAR 0 41
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 2
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: LIST
53003: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53004: LD_ADDR_VAR 0 42
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 3
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: LIST
53044: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53045: LD_ADDR_VAR 0 43
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 3
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53085: LD_ADDR_VAR 0 44
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: LIST
53125: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53126: LD_ADDR_VAR 0 45
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: NEG
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: LIST
53169: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53170: LD_ADDR_VAR 0 46
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 3
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: NEG
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53216: LD_ADDR_VAR 0 47
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53249: LD_ADDR_VAR 0 48
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53280: LD_ADDR_VAR 0 49
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 3
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53309: LD_ADDR_VAR 0 50
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53338: LD_ADDR_VAR 0 51
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53369: LD_ADDR_VAR 0 52
53373: PUSH
53374: LD_INT 3
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 3
53388: NEG
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53402: LD_ADDR_VAR 0 53
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: LD_INT 3
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 3
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: LIST
53445: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53446: LD_ADDR_VAR 0 54
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 3
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53487: LD_ADDR_VAR 0 55
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 3
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 3
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53527: LD_ADDR_VAR 0 56
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 3
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: LIST
53567: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53568: LD_ADDR_VAR 0 57
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: LIST
53611: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53612: LD_ADDR_VAR 0 58
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 3
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: LD_INT 3
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53658: LD_ADDR_VAR 0 59
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: LIST
53701: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53702: LD_ADDR_VAR 0 60
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53743: LD_ADDR_VAR 0 61
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53783: LD_ADDR_VAR 0 62
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53824: LD_ADDR_VAR 0 63
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53868: LD_ADDR_VAR 0 64
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: ST_TO_ADDR
// end ; 2 :
53914: GO 57180
53916: LD_INT 2
53918: DOUBLE
53919: EQUAL
53920: IFTRUE 53924
53922: GO 57179
53924: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53925: LD_ADDR_VAR 0 29
53929: PUSH
53930: LD_INT 4
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 4
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 5
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 5
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 4
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 3
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 3
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 5
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 3
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 4
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 4
54055: PUSH
54056: LD_INT 4
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: LD_INT 4
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: LD_INT 3
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 4
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 4
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 4
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 3
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 4
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 5
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 5
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 4
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 5
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 3
54208: NEG
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 3
54219: NEG
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 4
54264: NEG
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 4
54275: NEG
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 4
54287: NEG
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 4
54310: NEG
54311: PUSH
54312: LD_INT 4
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 4
54322: NEG
54323: PUSH
54324: LD_INT 5
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 3
54334: NEG
54335: PUSH
54336: LD_INT 4
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 3
54346: NEG
54347: PUSH
54348: LD_INT 3
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 4
54358: NEG
54359: PUSH
54360: LD_INT 3
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 5
54370: NEG
54371: PUSH
54372: LD_INT 4
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 5
54382: NEG
54383: PUSH
54384: LD_INT 5
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: NEG
54395: PUSH
54396: LD_INT 5
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 5
54406: NEG
54407: PUSH
54408: LD_INT 3
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54463: LD_ADDR_VAR 0 30
54467: PUSH
54468: LD_INT 4
54470: PUSH
54471: LD_INT 4
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 4
54480: PUSH
54481: LD_INT 3
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 5
54490: PUSH
54491: LD_INT 4
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 5
54500: PUSH
54501: LD_INT 5
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 4
54510: PUSH
54511: LD_INT 5
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: LD_INT 4
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 5
54540: PUSH
54541: LD_INT 3
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: PUSH
54551: LD_INT 5
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 3
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 4
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 4
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: LD_INT 3
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: LD_INT 4
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 4
54653: NEG
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 4
54664: NEG
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 3
54676: NEG
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 3
54687: NEG
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 4
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 5
54709: NEG
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 5
54720: NEG
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 5
54732: NEG
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: LD_INT 3
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 3
54767: NEG
54768: PUSH
54769: LD_INT 4
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 4
54815: NEG
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 4
54827: NEG
54828: PUSH
54829: LD_INT 4
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 4
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 4
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 4
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 5
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 4
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 3
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 3
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 4
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 5
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: LD_INT 5
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55010: LD_ADDR_VAR 0 31
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: LD_INT 4
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 4
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 5
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 5
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 4
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: LD_INT 3
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: LD_INT 5
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 3
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 3
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 4
55166: NEG
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 4
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 4
55189: NEG
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 4
55212: NEG
55213: PUSH
55214: LD_INT 4
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 4
55224: NEG
55225: PUSH
55226: LD_INT 5
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: LD_INT 4
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 3
55248: NEG
55249: PUSH
55250: LD_INT 3
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 4
55260: NEG
55261: PUSH
55262: LD_INT 3
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 5
55272: NEG
55273: PUSH
55274: LD_INT 4
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 5
55284: NEG
55285: PUSH
55286: LD_INT 5
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: NEG
55297: PUSH
55298: LD_INT 5
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 5
55308: NEG
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 3
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 4
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 3
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 3
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: LD_INT 4
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: LD_INT 4
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 4
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 4
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 5
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 5
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 4
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 3
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 5
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55560: LD_ADDR_VAR 0 32
55564: PUSH
55565: LD_INT 4
55567: NEG
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 4
55578: NEG
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 3
55590: NEG
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 4
55612: NEG
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 5
55623: NEG
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 5
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 5
55646: NEG
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 3
55658: NEG
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 3
55669: NEG
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: NEG
55682: PUSH
55683: LD_INT 4
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: LD_INT 3
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 4
55729: NEG
55730: PUSH
55731: LD_INT 3
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 4
55741: NEG
55742: PUSH
55743: LD_INT 4
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: LD_INT 4
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 4
55765: NEG
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 4
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 5
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 4
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: LD_INT 3
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 3
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: LD_INT 4
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 5
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: LD_INT 3
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: LD_INT 5
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 3
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 3
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 4
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 4
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 3
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 4
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 4
55972: PUSH
55973: LD_INT 4
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 4
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 5
55992: PUSH
55993: LD_INT 4
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 5
56002: PUSH
56003: LD_INT 5
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 4
56012: PUSH
56013: LD_INT 5
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: PUSH
56023: LD_INT 4
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: LD_INT 3
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 5
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: LD_INT 5
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56107: LD_ADDR_VAR 0 33
56111: PUSH
56112: LD_INT 4
56114: NEG
56115: PUSH
56116: LD_INT 4
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 4
56126: NEG
56127: PUSH
56128: LD_INT 5
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: LD_INT 4
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: LD_INT 3
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 4
56162: NEG
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 5
56174: NEG
56175: PUSH
56176: LD_INT 4
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 5
56186: NEG
56187: PUSH
56188: LD_INT 5
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 3
56198: NEG
56199: PUSH
56200: LD_INT 5
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 5
56210: NEG
56211: PUSH
56212: LD_INT 3
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 3
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 4
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 3
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 3
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 4
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: LD_INT 4
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 4
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 4
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 5
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 5
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 4
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 5
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 4
56437: PUSH
56438: LD_INT 3
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 4
56447: PUSH
56448: LD_INT 4
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: LD_INT 4
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 4
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: LD_INT 4
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 4
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 4
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 5
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 5
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 4
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: LD_INT 5
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56645: LD_ADDR_VAR 0 34
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 4
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 5
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 4
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 3
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: LD_INT 4
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 5
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: LD_INT 5
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 4
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 4
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 2
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 4
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 4
56847: PUSH
56848: LD_INT 4
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 4
56857: PUSH
56858: LD_INT 3
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 5
56867: PUSH
56868: LD_INT 4
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 5
56877: PUSH
56878: LD_INT 5
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 4
56887: PUSH
56888: LD_INT 5
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: LD_INT 4
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 3
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 5
56917: PUSH
56918: LD_INT 3
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: LD_INT 5
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 3
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 3
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 4
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 4
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 2
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 4
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: NEG
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 4
57030: NEG
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 4
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 3
57053: NEG
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 4
57075: NEG
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 5
57086: NEG
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 5
57097: NEG
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 5
57109: NEG
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: ST_TO_ADDR
// end ; end ;
57177: GO 57180
57179: POP
// case btype of b_depot , b_warehouse :
57180: LD_VAR 0 1
57184: PUSH
57185: LD_INT 0
57187: DOUBLE
57188: EQUAL
57189: IFTRUE 57199
57191: LD_INT 1
57193: DOUBLE
57194: EQUAL
57195: IFTRUE 57199
57197: GO 57400
57199: POP
// case nation of nation_american :
57200: LD_VAR 0 5
57204: PUSH
57205: LD_INT 1
57207: DOUBLE
57208: EQUAL
57209: IFTRUE 57213
57211: GO 57269
57213: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57214: LD_ADDR_VAR 0 9
57218: PUSH
57219: LD_VAR 0 11
57223: PUSH
57224: LD_VAR 0 12
57228: PUSH
57229: LD_VAR 0 13
57233: PUSH
57234: LD_VAR 0 14
57238: PUSH
57239: LD_VAR 0 15
57243: PUSH
57244: LD_VAR 0 16
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: PUSH
57257: LD_VAR 0 4
57261: PUSH
57262: LD_INT 1
57264: PLUS
57265: ARRAY
57266: ST_TO_ADDR
57267: GO 57398
57269: LD_INT 2
57271: DOUBLE
57272: EQUAL
57273: IFTRUE 57277
57275: GO 57333
57277: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57278: LD_ADDR_VAR 0 9
57282: PUSH
57283: LD_VAR 0 17
57287: PUSH
57288: LD_VAR 0 18
57292: PUSH
57293: LD_VAR 0 19
57297: PUSH
57298: LD_VAR 0 20
57302: PUSH
57303: LD_VAR 0 21
57307: PUSH
57308: LD_VAR 0 22
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: PUSH
57321: LD_VAR 0 4
57325: PUSH
57326: LD_INT 1
57328: PLUS
57329: ARRAY
57330: ST_TO_ADDR
57331: GO 57398
57333: LD_INT 3
57335: DOUBLE
57336: EQUAL
57337: IFTRUE 57341
57339: GO 57397
57341: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57342: LD_ADDR_VAR 0 9
57346: PUSH
57347: LD_VAR 0 23
57351: PUSH
57352: LD_VAR 0 24
57356: PUSH
57357: LD_VAR 0 25
57361: PUSH
57362: LD_VAR 0 26
57366: PUSH
57367: LD_VAR 0 27
57371: PUSH
57372: LD_VAR 0 28
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: PUSH
57385: LD_VAR 0 4
57389: PUSH
57390: LD_INT 1
57392: PLUS
57393: ARRAY
57394: ST_TO_ADDR
57395: GO 57398
57397: POP
57398: GO 57953
57400: LD_INT 2
57402: DOUBLE
57403: EQUAL
57404: IFTRUE 57414
57406: LD_INT 3
57408: DOUBLE
57409: EQUAL
57410: IFTRUE 57414
57412: GO 57470
57414: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57415: LD_ADDR_VAR 0 9
57419: PUSH
57420: LD_VAR 0 29
57424: PUSH
57425: LD_VAR 0 30
57429: PUSH
57430: LD_VAR 0 31
57434: PUSH
57435: LD_VAR 0 32
57439: PUSH
57440: LD_VAR 0 33
57444: PUSH
57445: LD_VAR 0 34
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: PUSH
57458: LD_VAR 0 4
57462: PUSH
57463: LD_INT 1
57465: PLUS
57466: ARRAY
57467: ST_TO_ADDR
57468: GO 57953
57470: LD_INT 16
57472: DOUBLE
57473: EQUAL
57474: IFTRUE 57532
57476: LD_INT 17
57478: DOUBLE
57479: EQUAL
57480: IFTRUE 57532
57482: LD_INT 18
57484: DOUBLE
57485: EQUAL
57486: IFTRUE 57532
57488: LD_INT 19
57490: DOUBLE
57491: EQUAL
57492: IFTRUE 57532
57494: LD_INT 22
57496: DOUBLE
57497: EQUAL
57498: IFTRUE 57532
57500: LD_INT 20
57502: DOUBLE
57503: EQUAL
57504: IFTRUE 57532
57506: LD_INT 21
57508: DOUBLE
57509: EQUAL
57510: IFTRUE 57532
57512: LD_INT 23
57514: DOUBLE
57515: EQUAL
57516: IFTRUE 57532
57518: LD_INT 24
57520: DOUBLE
57521: EQUAL
57522: IFTRUE 57532
57524: LD_INT 25
57526: DOUBLE
57527: EQUAL
57528: IFTRUE 57532
57530: GO 57588
57532: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57533: LD_ADDR_VAR 0 9
57537: PUSH
57538: LD_VAR 0 35
57542: PUSH
57543: LD_VAR 0 36
57547: PUSH
57548: LD_VAR 0 37
57552: PUSH
57553: LD_VAR 0 38
57557: PUSH
57558: LD_VAR 0 39
57562: PUSH
57563: LD_VAR 0 40
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: PUSH
57576: LD_VAR 0 4
57580: PUSH
57581: LD_INT 1
57583: PLUS
57584: ARRAY
57585: ST_TO_ADDR
57586: GO 57953
57588: LD_INT 6
57590: DOUBLE
57591: EQUAL
57592: IFTRUE 57644
57594: LD_INT 7
57596: DOUBLE
57597: EQUAL
57598: IFTRUE 57644
57600: LD_INT 8
57602: DOUBLE
57603: EQUAL
57604: IFTRUE 57644
57606: LD_INT 13
57608: DOUBLE
57609: EQUAL
57610: IFTRUE 57644
57612: LD_INT 12
57614: DOUBLE
57615: EQUAL
57616: IFTRUE 57644
57618: LD_INT 15
57620: DOUBLE
57621: EQUAL
57622: IFTRUE 57644
57624: LD_INT 11
57626: DOUBLE
57627: EQUAL
57628: IFTRUE 57644
57630: LD_INT 14
57632: DOUBLE
57633: EQUAL
57634: IFTRUE 57644
57636: LD_INT 10
57638: DOUBLE
57639: EQUAL
57640: IFTRUE 57644
57642: GO 57700
57644: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57645: LD_ADDR_VAR 0 9
57649: PUSH
57650: LD_VAR 0 41
57654: PUSH
57655: LD_VAR 0 42
57659: PUSH
57660: LD_VAR 0 43
57664: PUSH
57665: LD_VAR 0 44
57669: PUSH
57670: LD_VAR 0 45
57674: PUSH
57675: LD_VAR 0 46
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: PUSH
57688: LD_VAR 0 4
57692: PUSH
57693: LD_INT 1
57695: PLUS
57696: ARRAY
57697: ST_TO_ADDR
57698: GO 57953
57700: LD_INT 36
57702: DOUBLE
57703: EQUAL
57704: IFTRUE 57708
57706: GO 57764
57708: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57709: LD_ADDR_VAR 0 9
57713: PUSH
57714: LD_VAR 0 47
57718: PUSH
57719: LD_VAR 0 48
57723: PUSH
57724: LD_VAR 0 49
57728: PUSH
57729: LD_VAR 0 50
57733: PUSH
57734: LD_VAR 0 51
57738: PUSH
57739: LD_VAR 0 52
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: PUSH
57752: LD_VAR 0 4
57756: PUSH
57757: LD_INT 1
57759: PLUS
57760: ARRAY
57761: ST_TO_ADDR
57762: GO 57953
57764: LD_INT 4
57766: DOUBLE
57767: EQUAL
57768: IFTRUE 57790
57770: LD_INT 5
57772: DOUBLE
57773: EQUAL
57774: IFTRUE 57790
57776: LD_INT 34
57778: DOUBLE
57779: EQUAL
57780: IFTRUE 57790
57782: LD_INT 37
57784: DOUBLE
57785: EQUAL
57786: IFTRUE 57790
57788: GO 57846
57790: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57791: LD_ADDR_VAR 0 9
57795: PUSH
57796: LD_VAR 0 53
57800: PUSH
57801: LD_VAR 0 54
57805: PUSH
57806: LD_VAR 0 55
57810: PUSH
57811: LD_VAR 0 56
57815: PUSH
57816: LD_VAR 0 57
57820: PUSH
57821: LD_VAR 0 58
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: PUSH
57834: LD_VAR 0 4
57838: PUSH
57839: LD_INT 1
57841: PLUS
57842: ARRAY
57843: ST_TO_ADDR
57844: GO 57953
57846: LD_INT 31
57848: DOUBLE
57849: EQUAL
57850: IFTRUE 57896
57852: LD_INT 32
57854: DOUBLE
57855: EQUAL
57856: IFTRUE 57896
57858: LD_INT 33
57860: DOUBLE
57861: EQUAL
57862: IFTRUE 57896
57864: LD_INT 27
57866: DOUBLE
57867: EQUAL
57868: IFTRUE 57896
57870: LD_INT 26
57872: DOUBLE
57873: EQUAL
57874: IFTRUE 57896
57876: LD_INT 28
57878: DOUBLE
57879: EQUAL
57880: IFTRUE 57896
57882: LD_INT 29
57884: DOUBLE
57885: EQUAL
57886: IFTRUE 57896
57888: LD_INT 30
57890: DOUBLE
57891: EQUAL
57892: IFTRUE 57896
57894: GO 57952
57896: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57897: LD_ADDR_VAR 0 9
57901: PUSH
57902: LD_VAR 0 59
57906: PUSH
57907: LD_VAR 0 60
57911: PUSH
57912: LD_VAR 0 61
57916: PUSH
57917: LD_VAR 0 62
57921: PUSH
57922: LD_VAR 0 63
57926: PUSH
57927: LD_VAR 0 64
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: PUSH
57940: LD_VAR 0 4
57944: PUSH
57945: LD_INT 1
57947: PLUS
57948: ARRAY
57949: ST_TO_ADDR
57950: GO 57953
57952: POP
// temp_list2 = [ ] ;
57953: LD_ADDR_VAR 0 10
57957: PUSH
57958: EMPTY
57959: ST_TO_ADDR
// for i in temp_list do
57960: LD_ADDR_VAR 0 8
57964: PUSH
57965: LD_VAR 0 9
57969: PUSH
57970: FOR_IN
57971: IFFALSE 58023
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57973: LD_ADDR_VAR 0 10
57977: PUSH
57978: LD_VAR 0 10
57982: PUSH
57983: LD_VAR 0 8
57987: PUSH
57988: LD_INT 1
57990: ARRAY
57991: PUSH
57992: LD_VAR 0 2
57996: PLUS
57997: PUSH
57998: LD_VAR 0 8
58002: PUSH
58003: LD_INT 2
58005: ARRAY
58006: PUSH
58007: LD_VAR 0 3
58011: PLUS
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: ADD
58020: ST_TO_ADDR
58021: GO 57970
58023: POP
58024: POP
// result = temp_list2 ;
58025: LD_ADDR_VAR 0 7
58029: PUSH
58030: LD_VAR 0 10
58034: ST_TO_ADDR
// end ;
58035: LD_VAR 0 7
58039: RET
// export function EnemyInRange ( unit , dist ) ; begin
58040: LD_INT 0
58042: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58043: LD_ADDR_VAR 0 3
58047: PUSH
58048: LD_VAR 0 1
58052: PPUSH
58053: CALL_OW 255
58057: PPUSH
58058: LD_VAR 0 1
58062: PPUSH
58063: CALL_OW 250
58067: PPUSH
58068: LD_VAR 0 1
58072: PPUSH
58073: CALL_OW 251
58077: PPUSH
58078: LD_VAR 0 2
58082: PPUSH
58083: CALL 31436 0 4
58087: PUSH
58088: LD_INT 4
58090: ARRAY
58091: ST_TO_ADDR
// end ;
58092: LD_VAR 0 3
58096: RET
// export function PlayerSeeMe ( unit ) ; begin
58097: LD_INT 0
58099: PPUSH
// result := See ( your_side , unit ) ;
58100: LD_ADDR_VAR 0 2
58104: PUSH
58105: LD_OWVAR 2
58109: PPUSH
58110: LD_VAR 0 1
58114: PPUSH
58115: CALL_OW 292
58119: ST_TO_ADDR
// end ;
58120: LD_VAR 0 2
58124: RET
// export function ReverseDir ( unit ) ; begin
58125: LD_INT 0
58127: PPUSH
// if not unit then
58128: LD_VAR 0 1
58132: NOT
58133: IFFALSE 58137
// exit ;
58135: GO 58160
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58137: LD_ADDR_VAR 0 2
58141: PUSH
58142: LD_VAR 0 1
58146: PPUSH
58147: CALL_OW 254
58151: PUSH
58152: LD_INT 3
58154: PLUS
58155: PUSH
58156: LD_INT 6
58158: MOD
58159: ST_TO_ADDR
// end ;
58160: LD_VAR 0 2
58164: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58165: LD_INT 0
58167: PPUSH
58168: PPUSH
58169: PPUSH
58170: PPUSH
58171: PPUSH
// if not hexes then
58172: LD_VAR 0 2
58176: NOT
58177: IFFALSE 58181
// exit ;
58179: GO 58329
// dist := 9999 ;
58181: LD_ADDR_VAR 0 5
58185: PUSH
58186: LD_INT 9999
58188: ST_TO_ADDR
// for i = 1 to hexes do
58189: LD_ADDR_VAR 0 4
58193: PUSH
58194: DOUBLE
58195: LD_INT 1
58197: DEC
58198: ST_TO_ADDR
58199: LD_VAR 0 2
58203: PUSH
58204: FOR_TO
58205: IFFALSE 58317
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58207: LD_VAR 0 1
58211: PPUSH
58212: LD_VAR 0 2
58216: PUSH
58217: LD_VAR 0 4
58221: ARRAY
58222: PUSH
58223: LD_INT 1
58225: ARRAY
58226: PPUSH
58227: LD_VAR 0 2
58231: PUSH
58232: LD_VAR 0 4
58236: ARRAY
58237: PUSH
58238: LD_INT 2
58240: ARRAY
58241: PPUSH
58242: CALL_OW 297
58246: PUSH
58247: LD_VAR 0 5
58251: LESS
58252: IFFALSE 58315
// begin hex := hexes [ i ] ;
58254: LD_ADDR_VAR 0 7
58258: PUSH
58259: LD_VAR 0 2
58263: PUSH
58264: LD_VAR 0 4
58268: ARRAY
58269: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58270: LD_ADDR_VAR 0 5
58274: PUSH
58275: LD_VAR 0 1
58279: PPUSH
58280: LD_VAR 0 2
58284: PUSH
58285: LD_VAR 0 4
58289: ARRAY
58290: PUSH
58291: LD_INT 1
58293: ARRAY
58294: PPUSH
58295: LD_VAR 0 2
58299: PUSH
58300: LD_VAR 0 4
58304: ARRAY
58305: PUSH
58306: LD_INT 2
58308: ARRAY
58309: PPUSH
58310: CALL_OW 297
58314: ST_TO_ADDR
// end ; end ;
58315: GO 58204
58317: POP
58318: POP
// result := hex ;
58319: LD_ADDR_VAR 0 3
58323: PUSH
58324: LD_VAR 0 7
58328: ST_TO_ADDR
// end ;
58329: LD_VAR 0 3
58333: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58334: LD_INT 0
58336: PPUSH
58337: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58338: LD_VAR 0 1
58342: NOT
58343: PUSH
58344: LD_VAR 0 1
58348: PUSH
58349: LD_INT 21
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 23
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PPUSH
58373: CALL_OW 69
58377: IN
58378: NOT
58379: OR
58380: IFFALSE 58384
// exit ;
58382: GO 58431
// for i = 1 to 3 do
58384: LD_ADDR_VAR 0 3
58388: PUSH
58389: DOUBLE
58390: LD_INT 1
58392: DEC
58393: ST_TO_ADDR
58394: LD_INT 3
58396: PUSH
58397: FOR_TO
58398: IFFALSE 58429
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58400: LD_VAR 0 1
58404: PPUSH
58405: CALL_OW 250
58409: PPUSH
58410: LD_VAR 0 1
58414: PPUSH
58415: CALL_OW 251
58419: PPUSH
58420: LD_INT 1
58422: PPUSH
58423: CALL_OW 453
58427: GO 58397
58429: POP
58430: POP
// end ;
58431: LD_VAR 0 2
58435: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58436: LD_INT 0
58438: PPUSH
58439: PPUSH
58440: PPUSH
58441: PPUSH
58442: PPUSH
58443: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58444: LD_VAR 0 1
58448: NOT
58449: PUSH
58450: LD_VAR 0 2
58454: NOT
58455: OR
58456: PUSH
58457: LD_VAR 0 1
58461: PPUSH
58462: CALL_OW 314
58466: OR
58467: IFFALSE 58471
// exit ;
58469: GO 58912
// x := GetX ( enemy_unit ) ;
58471: LD_ADDR_VAR 0 7
58475: PUSH
58476: LD_VAR 0 2
58480: PPUSH
58481: CALL_OW 250
58485: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58486: LD_ADDR_VAR 0 8
58490: PUSH
58491: LD_VAR 0 2
58495: PPUSH
58496: CALL_OW 251
58500: ST_TO_ADDR
// if not x or not y then
58501: LD_VAR 0 7
58505: NOT
58506: PUSH
58507: LD_VAR 0 8
58511: NOT
58512: OR
58513: IFFALSE 58517
// exit ;
58515: GO 58912
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58517: LD_ADDR_VAR 0 6
58521: PUSH
58522: LD_VAR 0 7
58526: PPUSH
58527: LD_INT 0
58529: PPUSH
58530: LD_INT 4
58532: PPUSH
58533: CALL_OW 272
58537: PUSH
58538: LD_VAR 0 8
58542: PPUSH
58543: LD_INT 0
58545: PPUSH
58546: LD_INT 4
58548: PPUSH
58549: CALL_OW 273
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_VAR 0 7
58562: PPUSH
58563: LD_INT 1
58565: PPUSH
58566: LD_INT 4
58568: PPUSH
58569: CALL_OW 272
58573: PUSH
58574: LD_VAR 0 8
58578: PPUSH
58579: LD_INT 1
58581: PPUSH
58582: LD_INT 4
58584: PPUSH
58585: CALL_OW 273
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_VAR 0 7
58598: PPUSH
58599: LD_INT 2
58601: PPUSH
58602: LD_INT 4
58604: PPUSH
58605: CALL_OW 272
58609: PUSH
58610: LD_VAR 0 8
58614: PPUSH
58615: LD_INT 2
58617: PPUSH
58618: LD_INT 4
58620: PPUSH
58621: CALL_OW 273
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_VAR 0 7
58634: PPUSH
58635: LD_INT 3
58637: PPUSH
58638: LD_INT 4
58640: PPUSH
58641: CALL_OW 272
58645: PUSH
58646: LD_VAR 0 8
58650: PPUSH
58651: LD_INT 3
58653: PPUSH
58654: LD_INT 4
58656: PPUSH
58657: CALL_OW 273
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_VAR 0 7
58670: PPUSH
58671: LD_INT 4
58673: PPUSH
58674: LD_INT 4
58676: PPUSH
58677: CALL_OW 272
58681: PUSH
58682: LD_VAR 0 8
58686: PPUSH
58687: LD_INT 4
58689: PPUSH
58690: LD_INT 4
58692: PPUSH
58693: CALL_OW 273
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_VAR 0 7
58706: PPUSH
58707: LD_INT 5
58709: PPUSH
58710: LD_INT 4
58712: PPUSH
58713: CALL_OW 272
58717: PUSH
58718: LD_VAR 0 8
58722: PPUSH
58723: LD_INT 5
58725: PPUSH
58726: LD_INT 4
58728: PPUSH
58729: CALL_OW 273
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: ST_TO_ADDR
// for i = tmp downto 1 do
58746: LD_ADDR_VAR 0 4
58750: PUSH
58751: DOUBLE
58752: LD_VAR 0 6
58756: INC
58757: ST_TO_ADDR
58758: LD_INT 1
58760: PUSH
58761: FOR_DOWNTO
58762: IFFALSE 58863
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58764: LD_VAR 0 6
58768: PUSH
58769: LD_VAR 0 4
58773: ARRAY
58774: PUSH
58775: LD_INT 1
58777: ARRAY
58778: PPUSH
58779: LD_VAR 0 6
58783: PUSH
58784: LD_VAR 0 4
58788: ARRAY
58789: PUSH
58790: LD_INT 2
58792: ARRAY
58793: PPUSH
58794: CALL_OW 488
58798: NOT
58799: PUSH
58800: LD_VAR 0 6
58804: PUSH
58805: LD_VAR 0 4
58809: ARRAY
58810: PUSH
58811: LD_INT 1
58813: ARRAY
58814: PPUSH
58815: LD_VAR 0 6
58819: PUSH
58820: LD_VAR 0 4
58824: ARRAY
58825: PUSH
58826: LD_INT 2
58828: ARRAY
58829: PPUSH
58830: CALL_OW 428
58834: PUSH
58835: LD_INT 0
58837: NONEQUAL
58838: OR
58839: IFFALSE 58861
// tmp := Delete ( tmp , i ) ;
58841: LD_ADDR_VAR 0 6
58845: PUSH
58846: LD_VAR 0 6
58850: PPUSH
58851: LD_VAR 0 4
58855: PPUSH
58856: CALL_OW 3
58860: ST_TO_ADDR
58861: GO 58761
58863: POP
58864: POP
// j := GetClosestHex ( unit , tmp ) ;
58865: LD_ADDR_VAR 0 5
58869: PUSH
58870: LD_VAR 0 1
58874: PPUSH
58875: LD_VAR 0 6
58879: PPUSH
58880: CALL 58165 0 2
58884: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58885: LD_VAR 0 1
58889: PPUSH
58890: LD_VAR 0 5
58894: PUSH
58895: LD_INT 1
58897: ARRAY
58898: PPUSH
58899: LD_VAR 0 5
58903: PUSH
58904: LD_INT 2
58906: ARRAY
58907: PPUSH
58908: CALL_OW 111
// end ;
58912: LD_VAR 0 3
58916: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58917: LD_INT 0
58919: PPUSH
58920: PPUSH
58921: PPUSH
// uc_side = 0 ;
58922: LD_ADDR_OWVAR 20
58926: PUSH
58927: LD_INT 0
58929: ST_TO_ADDR
// uc_nation = 0 ;
58930: LD_ADDR_OWVAR 21
58934: PUSH
58935: LD_INT 0
58937: ST_TO_ADDR
// InitHc_All ( ) ;
58938: CALL_OW 584
// InitVc ;
58942: CALL_OW 20
// if mastodonts then
58946: LD_VAR 0 6
58950: IFFALSE 59017
// for i = 1 to mastodonts do
58952: LD_ADDR_VAR 0 11
58956: PUSH
58957: DOUBLE
58958: LD_INT 1
58960: DEC
58961: ST_TO_ADDR
58962: LD_VAR 0 6
58966: PUSH
58967: FOR_TO
58968: IFFALSE 59015
// begin vc_chassis := 31 ;
58970: LD_ADDR_OWVAR 37
58974: PUSH
58975: LD_INT 31
58977: ST_TO_ADDR
// vc_control := control_rider ;
58978: LD_ADDR_OWVAR 38
58982: PUSH
58983: LD_INT 4
58985: ST_TO_ADDR
// animal := CreateVehicle ;
58986: LD_ADDR_VAR 0 12
58990: PUSH
58991: CALL_OW 45
58995: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58996: LD_VAR 0 12
59000: PPUSH
59001: LD_VAR 0 8
59005: PPUSH
59006: LD_INT 0
59008: PPUSH
59009: CALL 61205 0 3
// end ;
59013: GO 58967
59015: POP
59016: POP
// if horses then
59017: LD_VAR 0 5
59021: IFFALSE 59088
// for i = 1 to horses do
59023: LD_ADDR_VAR 0 11
59027: PUSH
59028: DOUBLE
59029: LD_INT 1
59031: DEC
59032: ST_TO_ADDR
59033: LD_VAR 0 5
59037: PUSH
59038: FOR_TO
59039: IFFALSE 59086
// begin hc_class := 21 ;
59041: LD_ADDR_OWVAR 28
59045: PUSH
59046: LD_INT 21
59048: ST_TO_ADDR
// hc_gallery :=  ;
59049: LD_ADDR_OWVAR 33
59053: PUSH
59054: LD_STRING 
59056: ST_TO_ADDR
// animal := CreateHuman ;
59057: LD_ADDR_VAR 0 12
59061: PUSH
59062: CALL_OW 44
59066: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59067: LD_VAR 0 12
59071: PPUSH
59072: LD_VAR 0 8
59076: PPUSH
59077: LD_INT 0
59079: PPUSH
59080: CALL 61205 0 3
// end ;
59084: GO 59038
59086: POP
59087: POP
// if birds then
59088: LD_VAR 0 1
59092: IFFALSE 59159
// for i = 1 to birds do
59094: LD_ADDR_VAR 0 11
59098: PUSH
59099: DOUBLE
59100: LD_INT 1
59102: DEC
59103: ST_TO_ADDR
59104: LD_VAR 0 1
59108: PUSH
59109: FOR_TO
59110: IFFALSE 59157
// begin hc_class = 18 ;
59112: LD_ADDR_OWVAR 28
59116: PUSH
59117: LD_INT 18
59119: ST_TO_ADDR
// hc_gallery =  ;
59120: LD_ADDR_OWVAR 33
59124: PUSH
59125: LD_STRING 
59127: ST_TO_ADDR
// animal := CreateHuman ;
59128: LD_ADDR_VAR 0 12
59132: PUSH
59133: CALL_OW 44
59137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59138: LD_VAR 0 12
59142: PPUSH
59143: LD_VAR 0 8
59147: PPUSH
59148: LD_INT 0
59150: PPUSH
59151: CALL 61205 0 3
// end ;
59155: GO 59109
59157: POP
59158: POP
// if tigers then
59159: LD_VAR 0 2
59163: IFFALSE 59247
// for i = 1 to tigers do
59165: LD_ADDR_VAR 0 11
59169: PUSH
59170: DOUBLE
59171: LD_INT 1
59173: DEC
59174: ST_TO_ADDR
59175: LD_VAR 0 2
59179: PUSH
59180: FOR_TO
59181: IFFALSE 59245
// begin hc_class = class_tiger ;
59183: LD_ADDR_OWVAR 28
59187: PUSH
59188: LD_INT 14
59190: ST_TO_ADDR
// hc_gallery =  ;
59191: LD_ADDR_OWVAR 33
59195: PUSH
59196: LD_STRING 
59198: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59199: LD_ADDR_OWVAR 35
59203: PUSH
59204: LD_INT 7
59206: NEG
59207: PPUSH
59208: LD_INT 7
59210: PPUSH
59211: CALL_OW 12
59215: ST_TO_ADDR
// animal := CreateHuman ;
59216: LD_ADDR_VAR 0 12
59220: PUSH
59221: CALL_OW 44
59225: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59226: LD_VAR 0 12
59230: PPUSH
59231: LD_VAR 0 8
59235: PPUSH
59236: LD_INT 0
59238: PPUSH
59239: CALL 61205 0 3
// end ;
59243: GO 59180
59245: POP
59246: POP
// if apemans then
59247: LD_VAR 0 3
59251: IFFALSE 59374
// for i = 1 to apemans do
59253: LD_ADDR_VAR 0 11
59257: PUSH
59258: DOUBLE
59259: LD_INT 1
59261: DEC
59262: ST_TO_ADDR
59263: LD_VAR 0 3
59267: PUSH
59268: FOR_TO
59269: IFFALSE 59372
// begin hc_class = class_apeman ;
59271: LD_ADDR_OWVAR 28
59275: PUSH
59276: LD_INT 12
59278: ST_TO_ADDR
// hc_gallery =  ;
59279: LD_ADDR_OWVAR 33
59283: PUSH
59284: LD_STRING 
59286: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59287: LD_ADDR_OWVAR 35
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PPUSH
59296: LD_INT 2
59298: PPUSH
59299: CALL_OW 12
59303: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59304: LD_ADDR_OWVAR 31
59308: PUSH
59309: LD_INT 1
59311: PPUSH
59312: LD_INT 3
59314: PPUSH
59315: CALL_OW 12
59319: PUSH
59320: LD_INT 1
59322: PPUSH
59323: LD_INT 3
59325: PPUSH
59326: CALL_OW 12
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: ST_TO_ADDR
// animal := CreateHuman ;
59343: LD_ADDR_VAR 0 12
59347: PUSH
59348: CALL_OW 44
59352: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59353: LD_VAR 0 12
59357: PPUSH
59358: LD_VAR 0 8
59362: PPUSH
59363: LD_INT 0
59365: PPUSH
59366: CALL 61205 0 3
// end ;
59370: GO 59268
59372: POP
59373: POP
// if enchidnas then
59374: LD_VAR 0 4
59378: IFFALSE 59445
// for i = 1 to enchidnas do
59380: LD_ADDR_VAR 0 11
59384: PUSH
59385: DOUBLE
59386: LD_INT 1
59388: DEC
59389: ST_TO_ADDR
59390: LD_VAR 0 4
59394: PUSH
59395: FOR_TO
59396: IFFALSE 59443
// begin hc_class = 13 ;
59398: LD_ADDR_OWVAR 28
59402: PUSH
59403: LD_INT 13
59405: ST_TO_ADDR
// hc_gallery =  ;
59406: LD_ADDR_OWVAR 33
59410: PUSH
59411: LD_STRING 
59413: ST_TO_ADDR
// animal := CreateHuman ;
59414: LD_ADDR_VAR 0 12
59418: PUSH
59419: CALL_OW 44
59423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59424: LD_VAR 0 12
59428: PPUSH
59429: LD_VAR 0 8
59433: PPUSH
59434: LD_INT 0
59436: PPUSH
59437: CALL 61205 0 3
// end ;
59441: GO 59395
59443: POP
59444: POP
// if fishes then
59445: LD_VAR 0 7
59449: IFFALSE 59516
// for i = 1 to fishes do
59451: LD_ADDR_VAR 0 11
59455: PUSH
59456: DOUBLE
59457: LD_INT 1
59459: DEC
59460: ST_TO_ADDR
59461: LD_VAR 0 7
59465: PUSH
59466: FOR_TO
59467: IFFALSE 59514
// begin hc_class = 20 ;
59469: LD_ADDR_OWVAR 28
59473: PUSH
59474: LD_INT 20
59476: ST_TO_ADDR
// hc_gallery =  ;
59477: LD_ADDR_OWVAR 33
59481: PUSH
59482: LD_STRING 
59484: ST_TO_ADDR
// animal := CreateHuman ;
59485: LD_ADDR_VAR 0 12
59489: PUSH
59490: CALL_OW 44
59494: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59495: LD_VAR 0 12
59499: PPUSH
59500: LD_VAR 0 9
59504: PPUSH
59505: LD_INT 0
59507: PPUSH
59508: CALL 61205 0 3
// end ;
59512: GO 59466
59514: POP
59515: POP
// end ;
59516: LD_VAR 0 10
59520: RET
// export function WantHeal ( sci , unit ) ; begin
59521: LD_INT 0
59523: PPUSH
// if GetTaskList ( sci ) > 0 then
59524: LD_VAR 0 1
59528: PPUSH
59529: CALL_OW 437
59533: PUSH
59534: LD_INT 0
59536: GREATER
59537: IFFALSE 59607
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59539: LD_VAR 0 1
59543: PPUSH
59544: CALL_OW 437
59548: PUSH
59549: LD_INT 1
59551: ARRAY
59552: PUSH
59553: LD_INT 1
59555: ARRAY
59556: PUSH
59557: LD_STRING l
59559: EQUAL
59560: PUSH
59561: LD_VAR 0 1
59565: PPUSH
59566: CALL_OW 437
59570: PUSH
59571: LD_INT 1
59573: ARRAY
59574: PUSH
59575: LD_INT 4
59577: ARRAY
59578: PUSH
59579: LD_VAR 0 2
59583: EQUAL
59584: AND
59585: IFFALSE 59597
// result := true else
59587: LD_ADDR_VAR 0 3
59591: PUSH
59592: LD_INT 1
59594: ST_TO_ADDR
59595: GO 59605
// result := false ;
59597: LD_ADDR_VAR 0 3
59601: PUSH
59602: LD_INT 0
59604: ST_TO_ADDR
// end else
59605: GO 59615
// result := false ;
59607: LD_ADDR_VAR 0 3
59611: PUSH
59612: LD_INT 0
59614: ST_TO_ADDR
// end ;
59615: LD_VAR 0 3
59619: RET
// export function HealTarget ( sci ) ; begin
59620: LD_INT 0
59622: PPUSH
// if not sci then
59623: LD_VAR 0 1
59627: NOT
59628: IFFALSE 59632
// exit ;
59630: GO 59697
// result := 0 ;
59632: LD_ADDR_VAR 0 2
59636: PUSH
59637: LD_INT 0
59639: ST_TO_ADDR
// if GetTaskList ( sci ) then
59640: LD_VAR 0 1
59644: PPUSH
59645: CALL_OW 437
59649: IFFALSE 59697
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59651: LD_VAR 0 1
59655: PPUSH
59656: CALL_OW 437
59660: PUSH
59661: LD_INT 1
59663: ARRAY
59664: PUSH
59665: LD_INT 1
59667: ARRAY
59668: PUSH
59669: LD_STRING l
59671: EQUAL
59672: IFFALSE 59697
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59674: LD_ADDR_VAR 0 2
59678: PUSH
59679: LD_VAR 0 1
59683: PPUSH
59684: CALL_OW 437
59688: PUSH
59689: LD_INT 1
59691: ARRAY
59692: PUSH
59693: LD_INT 4
59695: ARRAY
59696: ST_TO_ADDR
// end ;
59697: LD_VAR 0 2
59701: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59702: LD_INT 0
59704: PPUSH
59705: PPUSH
59706: PPUSH
59707: PPUSH
// if not base_units then
59708: LD_VAR 0 1
59712: NOT
59713: IFFALSE 59717
// exit ;
59715: GO 59804
// result := false ;
59717: LD_ADDR_VAR 0 2
59721: PUSH
59722: LD_INT 0
59724: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59725: LD_ADDR_VAR 0 5
59729: PUSH
59730: LD_VAR 0 1
59734: PPUSH
59735: LD_INT 21
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PPUSH
59745: CALL_OW 72
59749: ST_TO_ADDR
// if not tmp then
59750: LD_VAR 0 5
59754: NOT
59755: IFFALSE 59759
// exit ;
59757: GO 59804
// for i in tmp do
59759: LD_ADDR_VAR 0 3
59763: PUSH
59764: LD_VAR 0 5
59768: PUSH
59769: FOR_IN
59770: IFFALSE 59802
// begin result := EnemyInRange ( i , 22 ) ;
59772: LD_ADDR_VAR 0 2
59776: PUSH
59777: LD_VAR 0 3
59781: PPUSH
59782: LD_INT 22
59784: PPUSH
59785: CALL 58040 0 2
59789: ST_TO_ADDR
// if result then
59790: LD_VAR 0 2
59794: IFFALSE 59800
// exit ;
59796: POP
59797: POP
59798: GO 59804
// end ;
59800: GO 59769
59802: POP
59803: POP
// end ;
59804: LD_VAR 0 2
59808: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59809: LD_INT 0
59811: PPUSH
59812: PPUSH
// if not units then
59813: LD_VAR 0 1
59817: NOT
59818: IFFALSE 59822
// exit ;
59820: GO 59892
// result := [ ] ;
59822: LD_ADDR_VAR 0 3
59826: PUSH
59827: EMPTY
59828: ST_TO_ADDR
// for i in units do
59829: LD_ADDR_VAR 0 4
59833: PUSH
59834: LD_VAR 0 1
59838: PUSH
59839: FOR_IN
59840: IFFALSE 59890
// if GetTag ( i ) = tag then
59842: LD_VAR 0 4
59846: PPUSH
59847: CALL_OW 110
59851: PUSH
59852: LD_VAR 0 2
59856: EQUAL
59857: IFFALSE 59888
// result := Replace ( result , result + 1 , i ) ;
59859: LD_ADDR_VAR 0 3
59863: PUSH
59864: LD_VAR 0 3
59868: PPUSH
59869: LD_VAR 0 3
59873: PUSH
59874: LD_INT 1
59876: PLUS
59877: PPUSH
59878: LD_VAR 0 4
59882: PPUSH
59883: CALL_OW 1
59887: ST_TO_ADDR
59888: GO 59839
59890: POP
59891: POP
// end ;
59892: LD_VAR 0 3
59896: RET
// export function IsDriver ( un ) ; begin
59897: LD_INT 0
59899: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59900: LD_ADDR_VAR 0 2
59904: PUSH
59905: LD_VAR 0 1
59909: PUSH
59910: LD_INT 55
59912: PUSH
59913: EMPTY
59914: LIST
59915: PPUSH
59916: CALL_OW 69
59920: IN
59921: ST_TO_ADDR
// end ;
59922: LD_VAR 0 2
59926: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59927: LD_INT 0
59929: PPUSH
59930: PPUSH
// list := [ ] ;
59931: LD_ADDR_VAR 0 5
59935: PUSH
59936: EMPTY
59937: ST_TO_ADDR
// case d of 0 :
59938: LD_VAR 0 3
59942: PUSH
59943: LD_INT 0
59945: DOUBLE
59946: EQUAL
59947: IFTRUE 59951
59949: GO 60084
59951: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59952: LD_ADDR_VAR 0 5
59956: PUSH
59957: LD_VAR 0 1
59961: PUSH
59962: LD_INT 4
59964: MINUS
59965: PUSH
59966: LD_VAR 0 2
59970: PUSH
59971: LD_INT 4
59973: MINUS
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: LIST
59982: PUSH
59983: LD_VAR 0 1
59987: PUSH
59988: LD_INT 3
59990: MINUS
59991: PUSH
59992: LD_VAR 0 2
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: LIST
60004: PUSH
60005: LD_VAR 0 1
60009: PUSH
60010: LD_INT 4
60012: PLUS
60013: PUSH
60014: LD_VAR 0 2
60018: PUSH
60019: LD_INT 4
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: LIST
60026: PUSH
60027: LD_VAR 0 1
60031: PUSH
60032: LD_INT 3
60034: PLUS
60035: PUSH
60036: LD_VAR 0 2
60040: PUSH
60041: LD_INT 3
60043: PLUS
60044: PUSH
60045: LD_INT 5
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: LIST
60052: PUSH
60053: LD_VAR 0 1
60057: PUSH
60058: LD_VAR 0 2
60062: PUSH
60063: LD_INT 4
60065: PLUS
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: LIST
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: ST_TO_ADDR
// end ; 1 :
60082: GO 60782
60084: LD_INT 1
60086: DOUBLE
60087: EQUAL
60088: IFTRUE 60092
60090: GO 60225
60092: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60093: LD_ADDR_VAR 0 5
60097: PUSH
60098: LD_VAR 0 1
60102: PUSH
60103: LD_VAR 0 2
60107: PUSH
60108: LD_INT 4
60110: MINUS
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: LIST
60119: PUSH
60120: LD_VAR 0 1
60124: PUSH
60125: LD_INT 3
60127: MINUS
60128: PUSH
60129: LD_VAR 0 2
60133: PUSH
60134: LD_INT 3
60136: MINUS
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: PUSH
60146: LD_VAR 0 1
60150: PUSH
60151: LD_INT 4
60153: MINUS
60154: PUSH
60155: LD_VAR 0 2
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: LIST
60167: PUSH
60168: LD_VAR 0 1
60172: PUSH
60173: LD_VAR 0 2
60177: PUSH
60178: LD_INT 3
60180: PLUS
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: LIST
60189: PUSH
60190: LD_VAR 0 1
60194: PUSH
60195: LD_INT 4
60197: PLUS
60198: PUSH
60199: LD_VAR 0 2
60203: PUSH
60204: LD_INT 4
60206: PLUS
60207: PUSH
60208: LD_INT 5
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: ST_TO_ADDR
// end ; 2 :
60223: GO 60782
60225: LD_INT 2
60227: DOUBLE
60228: EQUAL
60229: IFTRUE 60233
60231: GO 60362
60233: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60234: LD_ADDR_VAR 0 5
60238: PUSH
60239: LD_VAR 0 1
60243: PUSH
60244: LD_VAR 0 2
60248: PUSH
60249: LD_INT 3
60251: MINUS
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: LIST
60260: PUSH
60261: LD_VAR 0 1
60265: PUSH
60266: LD_INT 4
60268: PLUS
60269: PUSH
60270: LD_VAR 0 2
60274: PUSH
60275: LD_INT 4
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: LIST
60282: PUSH
60283: LD_VAR 0 1
60287: PUSH
60288: LD_VAR 0 2
60292: PUSH
60293: LD_INT 4
60295: PLUS
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: LIST
60304: PUSH
60305: LD_VAR 0 1
60309: PUSH
60310: LD_INT 3
60312: MINUS
60313: PUSH
60314: LD_VAR 0 2
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: LIST
60326: PUSH
60327: LD_VAR 0 1
60331: PUSH
60332: LD_INT 4
60334: MINUS
60335: PUSH
60336: LD_VAR 0 2
60340: PUSH
60341: LD_INT 4
60343: MINUS
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: ST_TO_ADDR
// end ; 3 :
60360: GO 60782
60362: LD_INT 3
60364: DOUBLE
60365: EQUAL
60366: IFTRUE 60370
60368: GO 60503
60370: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60371: LD_ADDR_VAR 0 5
60375: PUSH
60376: LD_VAR 0 1
60380: PUSH
60381: LD_INT 3
60383: PLUS
60384: PUSH
60385: LD_VAR 0 2
60389: PUSH
60390: LD_INT 4
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: LIST
60397: PUSH
60398: LD_VAR 0 1
60402: PUSH
60403: LD_INT 4
60405: PLUS
60406: PUSH
60407: LD_VAR 0 2
60411: PUSH
60412: LD_INT 4
60414: PLUS
60415: PUSH
60416: LD_INT 5
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: LIST
60423: PUSH
60424: LD_VAR 0 1
60428: PUSH
60429: LD_INT 4
60431: MINUS
60432: PUSH
60433: LD_VAR 0 2
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: LIST
60445: PUSH
60446: LD_VAR 0 1
60450: PUSH
60451: LD_VAR 0 2
60455: PUSH
60456: LD_INT 4
60458: MINUS
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: PUSH
60468: LD_VAR 0 1
60472: PUSH
60473: LD_INT 3
60475: MINUS
60476: PUSH
60477: LD_VAR 0 2
60481: PUSH
60482: LD_INT 3
60484: MINUS
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: LIST
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: ST_TO_ADDR
// end ; 4 :
60501: GO 60782
60503: LD_INT 4
60505: DOUBLE
60506: EQUAL
60507: IFTRUE 60511
60509: GO 60644
60511: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60512: LD_ADDR_VAR 0 5
60516: PUSH
60517: LD_VAR 0 1
60521: PUSH
60522: LD_VAR 0 2
60526: PUSH
60527: LD_INT 4
60529: PLUS
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: PUSH
60539: LD_VAR 0 1
60543: PUSH
60544: LD_INT 3
60546: PLUS
60547: PUSH
60548: LD_VAR 0 2
60552: PUSH
60553: LD_INT 3
60555: PLUS
60556: PUSH
60557: LD_INT 5
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: LIST
60564: PUSH
60565: LD_VAR 0 1
60569: PUSH
60570: LD_INT 4
60572: PLUS
60573: PUSH
60574: LD_VAR 0 2
60578: PUSH
60579: LD_INT 4
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: LIST
60586: PUSH
60587: LD_VAR 0 1
60591: PUSH
60592: LD_VAR 0 2
60596: PUSH
60597: LD_INT 3
60599: MINUS
60600: PUSH
60601: LD_INT 3
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: PUSH
60609: LD_VAR 0 1
60613: PUSH
60614: LD_INT 4
60616: MINUS
60617: PUSH
60618: LD_VAR 0 2
60622: PUSH
60623: LD_INT 4
60625: MINUS
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: ST_TO_ADDR
// end ; 5 :
60642: GO 60782
60644: LD_INT 5
60646: DOUBLE
60647: EQUAL
60648: IFTRUE 60652
60650: GO 60781
60652: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60653: LD_ADDR_VAR 0 5
60657: PUSH
60658: LD_VAR 0 1
60662: PUSH
60663: LD_INT 4
60665: MINUS
60666: PUSH
60667: LD_VAR 0 2
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: PUSH
60680: LD_VAR 0 1
60684: PUSH
60685: LD_VAR 0 2
60689: PUSH
60690: LD_INT 4
60692: MINUS
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: LIST
60701: PUSH
60702: LD_VAR 0 1
60706: PUSH
60707: LD_INT 4
60709: PLUS
60710: PUSH
60711: LD_VAR 0 2
60715: PUSH
60716: LD_INT 4
60718: PLUS
60719: PUSH
60720: LD_INT 5
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: PUSH
60728: LD_VAR 0 1
60732: PUSH
60733: LD_INT 3
60735: PLUS
60736: PUSH
60737: LD_VAR 0 2
60741: PUSH
60742: LD_INT 4
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: LIST
60749: PUSH
60750: LD_VAR 0 1
60754: PUSH
60755: LD_VAR 0 2
60759: PUSH
60760: LD_INT 3
60762: PLUS
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: ST_TO_ADDR
// end ; end ;
60779: GO 60782
60781: POP
// result := list ;
60782: LD_ADDR_VAR 0 4
60786: PUSH
60787: LD_VAR 0 5
60791: ST_TO_ADDR
// end ;
60792: LD_VAR 0 4
60796: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60797: LD_INT 0
60799: PPUSH
60800: PPUSH
60801: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60802: LD_VAR 0 1
60806: NOT
60807: PUSH
60808: LD_VAR 0 2
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: LD_INT 4
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: IN
60831: NOT
60832: OR
60833: IFFALSE 60837
// exit ;
60835: GO 60929
// tmp := [ ] ;
60837: LD_ADDR_VAR 0 5
60841: PUSH
60842: EMPTY
60843: ST_TO_ADDR
// for i in units do
60844: LD_ADDR_VAR 0 4
60848: PUSH
60849: LD_VAR 0 1
60853: PUSH
60854: FOR_IN
60855: IFFALSE 60898
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60857: LD_ADDR_VAR 0 5
60861: PUSH
60862: LD_VAR 0 5
60866: PPUSH
60867: LD_VAR 0 5
60871: PUSH
60872: LD_INT 1
60874: PLUS
60875: PPUSH
60876: LD_VAR 0 4
60880: PPUSH
60881: LD_VAR 0 2
60885: PPUSH
60886: CALL_OW 259
60890: PPUSH
60891: CALL_OW 2
60895: ST_TO_ADDR
60896: GO 60854
60898: POP
60899: POP
// if not tmp then
60900: LD_VAR 0 5
60904: NOT
60905: IFFALSE 60909
// exit ;
60907: GO 60929
// result := SortListByListDesc ( units , tmp ) ;
60909: LD_ADDR_VAR 0 3
60913: PUSH
60914: LD_VAR 0 1
60918: PPUSH
60919: LD_VAR 0 5
60923: PPUSH
60924: CALL_OW 77
60928: ST_TO_ADDR
// end ;
60929: LD_VAR 0 3
60933: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60934: LD_INT 0
60936: PPUSH
60937: PPUSH
60938: PPUSH
// result := false ;
60939: LD_ADDR_VAR 0 3
60943: PUSH
60944: LD_INT 0
60946: ST_TO_ADDR
// x := GetX ( building ) ;
60947: LD_ADDR_VAR 0 4
60951: PUSH
60952: LD_VAR 0 2
60956: PPUSH
60957: CALL_OW 250
60961: ST_TO_ADDR
// y := GetY ( building ) ;
60962: LD_ADDR_VAR 0 5
60966: PUSH
60967: LD_VAR 0 2
60971: PPUSH
60972: CALL_OW 251
60976: ST_TO_ADDR
// if not building or not x or not y then
60977: LD_VAR 0 2
60981: NOT
60982: PUSH
60983: LD_VAR 0 4
60987: NOT
60988: OR
60989: PUSH
60990: LD_VAR 0 5
60994: NOT
60995: OR
60996: IFFALSE 61000
// exit ;
60998: GO 61092
// if GetTaskList ( unit ) then
61000: LD_VAR 0 1
61004: PPUSH
61005: CALL_OW 437
61009: IFFALSE 61092
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61011: LD_STRING e
61013: PUSH
61014: LD_VAR 0 1
61018: PPUSH
61019: CALL_OW 437
61023: PUSH
61024: LD_INT 1
61026: ARRAY
61027: PUSH
61028: LD_INT 1
61030: ARRAY
61031: EQUAL
61032: PUSH
61033: LD_VAR 0 4
61037: PUSH
61038: LD_VAR 0 1
61042: PPUSH
61043: CALL_OW 437
61047: PUSH
61048: LD_INT 1
61050: ARRAY
61051: PUSH
61052: LD_INT 2
61054: ARRAY
61055: EQUAL
61056: AND
61057: PUSH
61058: LD_VAR 0 5
61062: PUSH
61063: LD_VAR 0 1
61067: PPUSH
61068: CALL_OW 437
61072: PUSH
61073: LD_INT 1
61075: ARRAY
61076: PUSH
61077: LD_INT 3
61079: ARRAY
61080: EQUAL
61081: AND
61082: IFFALSE 61092
// result := true end ;
61084: LD_ADDR_VAR 0 3
61088: PUSH
61089: LD_INT 1
61091: ST_TO_ADDR
// end ;
61092: LD_VAR 0 3
61096: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61097: LD_INT 0
61099: PPUSH
// result := false ;
61100: LD_ADDR_VAR 0 4
61104: PUSH
61105: LD_INT 0
61107: ST_TO_ADDR
// if GetTaskList ( unit ) then
61108: LD_VAR 0 1
61112: PPUSH
61113: CALL_OW 437
61117: IFFALSE 61200
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61119: LD_STRING M
61121: PUSH
61122: LD_VAR 0 1
61126: PPUSH
61127: CALL_OW 437
61131: PUSH
61132: LD_INT 1
61134: ARRAY
61135: PUSH
61136: LD_INT 1
61138: ARRAY
61139: EQUAL
61140: PUSH
61141: LD_VAR 0 2
61145: PUSH
61146: LD_VAR 0 1
61150: PPUSH
61151: CALL_OW 437
61155: PUSH
61156: LD_INT 1
61158: ARRAY
61159: PUSH
61160: LD_INT 2
61162: ARRAY
61163: EQUAL
61164: AND
61165: PUSH
61166: LD_VAR 0 3
61170: PUSH
61171: LD_VAR 0 1
61175: PPUSH
61176: CALL_OW 437
61180: PUSH
61181: LD_INT 1
61183: ARRAY
61184: PUSH
61185: LD_INT 3
61187: ARRAY
61188: EQUAL
61189: AND
61190: IFFALSE 61200
// result := true ;
61192: LD_ADDR_VAR 0 4
61196: PUSH
61197: LD_INT 1
61199: ST_TO_ADDR
// end ; end ;
61200: LD_VAR 0 4
61204: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61205: LD_INT 0
61207: PPUSH
61208: PPUSH
61209: PPUSH
61210: PPUSH
// if not unit or not area then
61211: LD_VAR 0 1
61215: NOT
61216: PUSH
61217: LD_VAR 0 2
61221: NOT
61222: OR
61223: IFFALSE 61227
// exit ;
61225: GO 61391
// tmp := AreaToList ( area , i ) ;
61227: LD_ADDR_VAR 0 6
61231: PUSH
61232: LD_VAR 0 2
61236: PPUSH
61237: LD_VAR 0 5
61241: PPUSH
61242: CALL_OW 517
61246: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61247: LD_ADDR_VAR 0 5
61251: PUSH
61252: DOUBLE
61253: LD_INT 1
61255: DEC
61256: ST_TO_ADDR
61257: LD_VAR 0 6
61261: PUSH
61262: LD_INT 1
61264: ARRAY
61265: PUSH
61266: FOR_TO
61267: IFFALSE 61389
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61269: LD_ADDR_VAR 0 7
61273: PUSH
61274: LD_VAR 0 6
61278: PUSH
61279: LD_INT 1
61281: ARRAY
61282: PUSH
61283: LD_VAR 0 5
61287: ARRAY
61288: PUSH
61289: LD_VAR 0 6
61293: PUSH
61294: LD_INT 2
61296: ARRAY
61297: PUSH
61298: LD_VAR 0 5
61302: ARRAY
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61308: LD_VAR 0 7
61312: PUSH
61313: LD_INT 1
61315: ARRAY
61316: PPUSH
61317: LD_VAR 0 7
61321: PUSH
61322: LD_INT 2
61324: ARRAY
61325: PPUSH
61326: CALL_OW 428
61330: PUSH
61331: LD_INT 0
61333: EQUAL
61334: IFFALSE 61387
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61336: LD_VAR 0 1
61340: PPUSH
61341: LD_VAR 0 7
61345: PUSH
61346: LD_INT 1
61348: ARRAY
61349: PPUSH
61350: LD_VAR 0 7
61354: PUSH
61355: LD_INT 2
61357: ARRAY
61358: PPUSH
61359: LD_VAR 0 3
61363: PPUSH
61364: CALL_OW 48
// result := IsPlaced ( unit ) ;
61368: LD_ADDR_VAR 0 4
61372: PUSH
61373: LD_VAR 0 1
61377: PPUSH
61378: CALL_OW 305
61382: ST_TO_ADDR
// exit ;
61383: POP
61384: POP
61385: GO 61391
// end ; end ;
61387: GO 61266
61389: POP
61390: POP
// end ;
61391: LD_VAR 0 4
61395: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61396: LD_INT 0
61398: PPUSH
61399: PPUSH
61400: PPUSH
// if not side or side > 8 then
61401: LD_VAR 0 1
61405: NOT
61406: PUSH
61407: LD_VAR 0 1
61411: PUSH
61412: LD_INT 8
61414: GREATER
61415: OR
61416: IFFALSE 61420
// exit ;
61418: GO 61607
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61420: LD_ADDR_VAR 0 4
61424: PUSH
61425: LD_INT 22
61427: PUSH
61428: LD_VAR 0 1
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 21
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PPUSH
61451: CALL_OW 69
61455: ST_TO_ADDR
// if not tmp then
61456: LD_VAR 0 4
61460: NOT
61461: IFFALSE 61465
// exit ;
61463: GO 61607
// enable_addtolog := true ;
61465: LD_ADDR_OWVAR 81
61469: PUSH
61470: LD_INT 1
61472: ST_TO_ADDR
// AddToLog ( [ ) ;
61473: LD_STRING [
61475: PPUSH
61476: CALL_OW 561
// for i in tmp do
61480: LD_ADDR_VAR 0 3
61484: PUSH
61485: LD_VAR 0 4
61489: PUSH
61490: FOR_IN
61491: IFFALSE 61598
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61493: LD_STRING [
61495: PUSH
61496: LD_VAR 0 3
61500: PPUSH
61501: CALL_OW 266
61505: STR
61506: PUSH
61507: LD_STRING , 
61509: STR
61510: PUSH
61511: LD_VAR 0 3
61515: PPUSH
61516: CALL_OW 250
61520: STR
61521: PUSH
61522: LD_STRING , 
61524: STR
61525: PUSH
61526: LD_VAR 0 3
61530: PPUSH
61531: CALL_OW 251
61535: STR
61536: PUSH
61537: LD_STRING , 
61539: STR
61540: PUSH
61541: LD_VAR 0 3
61545: PPUSH
61546: CALL_OW 254
61550: STR
61551: PUSH
61552: LD_STRING , 
61554: STR
61555: PUSH
61556: LD_VAR 0 3
61560: PPUSH
61561: LD_INT 1
61563: PPUSH
61564: CALL_OW 268
61568: STR
61569: PUSH
61570: LD_STRING , 
61572: STR
61573: PUSH
61574: LD_VAR 0 3
61578: PPUSH
61579: LD_INT 2
61581: PPUSH
61582: CALL_OW 268
61586: STR
61587: PUSH
61588: LD_STRING ],
61590: STR
61591: PPUSH
61592: CALL_OW 561
// end ;
61596: GO 61490
61598: POP
61599: POP
// AddToLog ( ]; ) ;
61600: LD_STRING ];
61602: PPUSH
61603: CALL_OW 561
// end ;
61607: LD_VAR 0 2
61611: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61612: LD_INT 0
61614: PPUSH
61615: PPUSH
61616: PPUSH
61617: PPUSH
61618: PPUSH
// if not area or not rate or not max then
61619: LD_VAR 0 1
61623: NOT
61624: PUSH
61625: LD_VAR 0 2
61629: NOT
61630: OR
61631: PUSH
61632: LD_VAR 0 4
61636: NOT
61637: OR
61638: IFFALSE 61642
// exit ;
61640: GO 61834
// while 1 do
61642: LD_INT 1
61644: IFFALSE 61834
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61646: LD_ADDR_VAR 0 9
61650: PUSH
61651: LD_VAR 0 1
61655: PPUSH
61656: LD_INT 1
61658: PPUSH
61659: CALL_OW 287
61663: PUSH
61664: LD_INT 10
61666: MUL
61667: ST_TO_ADDR
// r := rate / 10 ;
61668: LD_ADDR_VAR 0 7
61672: PUSH
61673: LD_VAR 0 2
61677: PUSH
61678: LD_INT 10
61680: DIVREAL
61681: ST_TO_ADDR
// time := 1 1$00 ;
61682: LD_ADDR_VAR 0 8
61686: PUSH
61687: LD_INT 2100
61689: ST_TO_ADDR
// if amount < min then
61690: LD_VAR 0 9
61694: PUSH
61695: LD_VAR 0 3
61699: LESS
61700: IFFALSE 61718
// r := r * 2 else
61702: LD_ADDR_VAR 0 7
61706: PUSH
61707: LD_VAR 0 7
61711: PUSH
61712: LD_INT 2
61714: MUL
61715: ST_TO_ADDR
61716: GO 61744
// if amount > max then
61718: LD_VAR 0 9
61722: PUSH
61723: LD_VAR 0 4
61727: GREATER
61728: IFFALSE 61744
// r := r / 2 ;
61730: LD_ADDR_VAR 0 7
61734: PUSH
61735: LD_VAR 0 7
61739: PUSH
61740: LD_INT 2
61742: DIVREAL
61743: ST_TO_ADDR
// time := time / r ;
61744: LD_ADDR_VAR 0 8
61748: PUSH
61749: LD_VAR 0 8
61753: PUSH
61754: LD_VAR 0 7
61758: DIVREAL
61759: ST_TO_ADDR
// if time < 0 then
61760: LD_VAR 0 8
61764: PUSH
61765: LD_INT 0
61767: LESS
61768: IFFALSE 61785
// time := time * - 1 ;
61770: LD_ADDR_VAR 0 8
61774: PUSH
61775: LD_VAR 0 8
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: MUL
61784: ST_TO_ADDR
// wait ( time ) ;
61785: LD_VAR 0 8
61789: PPUSH
61790: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61794: LD_INT 35
61796: PPUSH
61797: LD_INT 875
61799: PPUSH
61800: CALL_OW 12
61804: PPUSH
61805: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61809: LD_INT 1
61811: PPUSH
61812: LD_INT 5
61814: PPUSH
61815: CALL_OW 12
61819: PPUSH
61820: LD_VAR 0 1
61824: PPUSH
61825: LD_INT 1
61827: PPUSH
61828: CALL_OW 55
// end ;
61832: GO 61642
// end ;
61834: LD_VAR 0 5
61838: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61839: LD_INT 0
61841: PPUSH
61842: PPUSH
61843: PPUSH
61844: PPUSH
61845: PPUSH
61846: PPUSH
61847: PPUSH
61848: PPUSH
// if not turrets or not factories then
61849: LD_VAR 0 1
61853: NOT
61854: PUSH
61855: LD_VAR 0 2
61859: NOT
61860: OR
61861: IFFALSE 61865
// exit ;
61863: GO 62172
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61865: LD_ADDR_VAR 0 10
61869: PUSH
61870: LD_INT 5
61872: PUSH
61873: LD_INT 6
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: PUSH
61883: LD_INT 4
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 3
61892: PUSH
61893: LD_INT 5
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 24
61907: PUSH
61908: LD_INT 25
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 23
61917: PUSH
61918: LD_INT 27
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 42
61931: PUSH
61932: LD_INT 43
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 44
61941: PUSH
61942: LD_INT 46
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 45
61951: PUSH
61952: LD_INT 47
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: LIST
61968: ST_TO_ADDR
// result := [ ] ;
61969: LD_ADDR_VAR 0 3
61973: PUSH
61974: EMPTY
61975: ST_TO_ADDR
// for i in turrets do
61976: LD_ADDR_VAR 0 4
61980: PUSH
61981: LD_VAR 0 1
61985: PUSH
61986: FOR_IN
61987: IFFALSE 62170
// begin nat := GetNation ( i ) ;
61989: LD_ADDR_VAR 0 7
61993: PUSH
61994: LD_VAR 0 4
61998: PPUSH
61999: CALL_OW 248
62003: ST_TO_ADDR
// weapon := 0 ;
62004: LD_ADDR_VAR 0 8
62008: PUSH
62009: LD_INT 0
62011: ST_TO_ADDR
// if not nat then
62012: LD_VAR 0 7
62016: NOT
62017: IFFALSE 62021
// continue ;
62019: GO 61986
// for j in list [ nat ] do
62021: LD_ADDR_VAR 0 5
62025: PUSH
62026: LD_VAR 0 10
62030: PUSH
62031: LD_VAR 0 7
62035: ARRAY
62036: PUSH
62037: FOR_IN
62038: IFFALSE 62079
// if GetBWeapon ( i ) = j [ 1 ] then
62040: LD_VAR 0 4
62044: PPUSH
62045: CALL_OW 269
62049: PUSH
62050: LD_VAR 0 5
62054: PUSH
62055: LD_INT 1
62057: ARRAY
62058: EQUAL
62059: IFFALSE 62077
// begin weapon := j [ 2 ] ;
62061: LD_ADDR_VAR 0 8
62065: PUSH
62066: LD_VAR 0 5
62070: PUSH
62071: LD_INT 2
62073: ARRAY
62074: ST_TO_ADDR
// break ;
62075: GO 62079
// end ;
62077: GO 62037
62079: POP
62080: POP
// if not weapon then
62081: LD_VAR 0 8
62085: NOT
62086: IFFALSE 62090
// continue ;
62088: GO 61986
// for k in factories do
62090: LD_ADDR_VAR 0 6
62094: PUSH
62095: LD_VAR 0 2
62099: PUSH
62100: FOR_IN
62101: IFFALSE 62166
// begin weapons := AvailableWeaponList ( k ) ;
62103: LD_ADDR_VAR 0 9
62107: PUSH
62108: LD_VAR 0 6
62112: PPUSH
62113: CALL_OW 478
62117: ST_TO_ADDR
// if not weapons then
62118: LD_VAR 0 9
62122: NOT
62123: IFFALSE 62127
// continue ;
62125: GO 62100
// if weapon in weapons then
62127: LD_VAR 0 8
62131: PUSH
62132: LD_VAR 0 9
62136: IN
62137: IFFALSE 62164
// begin result := [ i , weapon ] ;
62139: LD_ADDR_VAR 0 3
62143: PUSH
62144: LD_VAR 0 4
62148: PUSH
62149: LD_VAR 0 8
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: ST_TO_ADDR
// exit ;
62158: POP
62159: POP
62160: POP
62161: POP
62162: GO 62172
// end ; end ;
62164: GO 62100
62166: POP
62167: POP
// end ;
62168: GO 61986
62170: POP
62171: POP
// end ;
62172: LD_VAR 0 3
62176: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62177: LD_INT 0
62179: PPUSH
// if not side or side > 8 then
62180: LD_VAR 0 3
62184: NOT
62185: PUSH
62186: LD_VAR 0 3
62190: PUSH
62191: LD_INT 8
62193: GREATER
62194: OR
62195: IFFALSE 62199
// exit ;
62197: GO 62258
// if not range then
62199: LD_VAR 0 4
62203: NOT
62204: IFFALSE 62215
// range := - 12 ;
62206: LD_ADDR_VAR 0 4
62210: PUSH
62211: LD_INT 12
62213: NEG
62214: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62215: LD_VAR 0 1
62219: PPUSH
62220: LD_VAR 0 2
62224: PPUSH
62225: LD_VAR 0 3
62229: PPUSH
62230: LD_VAR 0 4
62234: PPUSH
62235: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62239: LD_VAR 0 1
62243: PPUSH
62244: LD_VAR 0 2
62248: PPUSH
62249: LD_VAR 0 3
62253: PPUSH
62254: CALL_OW 331
// end ;
62258: LD_VAR 0 5
62262: RET
// export function Video ( mode ) ; begin
62263: LD_INT 0
62265: PPUSH
// ingame_video = mode ;
62266: LD_ADDR_OWVAR 52
62270: PUSH
62271: LD_VAR 0 1
62275: ST_TO_ADDR
// interface_hidden = mode ;
62276: LD_ADDR_OWVAR 54
62280: PUSH
62281: LD_VAR 0 1
62285: ST_TO_ADDR
// end ;
62286: LD_VAR 0 2
62290: RET
// export function Join ( array , element ) ; begin
62291: LD_INT 0
62293: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62294: LD_ADDR_VAR 0 3
62298: PUSH
62299: LD_VAR 0 1
62303: PPUSH
62304: LD_VAR 0 1
62308: PUSH
62309: LD_INT 1
62311: PLUS
62312: PPUSH
62313: LD_VAR 0 2
62317: PPUSH
62318: CALL_OW 1
62322: ST_TO_ADDR
// end ;
62323: LD_VAR 0 3
62327: RET
// export function JoinUnion ( array , element ) ; begin
62328: LD_INT 0
62330: PPUSH
// result := array union element ;
62331: LD_ADDR_VAR 0 3
62335: PUSH
62336: LD_VAR 0 1
62340: PUSH
62341: LD_VAR 0 2
62345: UNION
62346: ST_TO_ADDR
// end ;
62347: LD_VAR 0 3
62351: RET
// export function GetBehemoths ( side ) ; begin
62352: LD_INT 0
62354: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62355: LD_ADDR_VAR 0 2
62359: PUSH
62360: LD_INT 22
62362: PUSH
62363: LD_VAR 0 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 31
62374: PUSH
62375: LD_INT 25
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PPUSH
62386: CALL_OW 69
62390: ST_TO_ADDR
// end ;
62391: LD_VAR 0 2
62395: RET
// export function Shuffle ( array ) ; var i , index ; begin
62396: LD_INT 0
62398: PPUSH
62399: PPUSH
62400: PPUSH
// result := [ ] ;
62401: LD_ADDR_VAR 0 2
62405: PUSH
62406: EMPTY
62407: ST_TO_ADDR
// if not array then
62408: LD_VAR 0 1
62412: NOT
62413: IFFALSE 62417
// exit ;
62415: GO 62516
// Randomize ;
62417: CALL_OW 10
// for i = array downto 1 do
62421: LD_ADDR_VAR 0 3
62425: PUSH
62426: DOUBLE
62427: LD_VAR 0 1
62431: INC
62432: ST_TO_ADDR
62433: LD_INT 1
62435: PUSH
62436: FOR_DOWNTO
62437: IFFALSE 62514
// begin index := rand ( 1 , array ) ;
62439: LD_ADDR_VAR 0 4
62443: PUSH
62444: LD_INT 1
62446: PPUSH
62447: LD_VAR 0 1
62451: PPUSH
62452: CALL_OW 12
62456: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62457: LD_ADDR_VAR 0 2
62461: PUSH
62462: LD_VAR 0 2
62466: PPUSH
62467: LD_VAR 0 2
62471: PUSH
62472: LD_INT 1
62474: PLUS
62475: PPUSH
62476: LD_VAR 0 1
62480: PUSH
62481: LD_VAR 0 4
62485: ARRAY
62486: PPUSH
62487: CALL_OW 2
62491: ST_TO_ADDR
// array := Delete ( array , index ) ;
62492: LD_ADDR_VAR 0 1
62496: PUSH
62497: LD_VAR 0 1
62501: PPUSH
62502: LD_VAR 0 4
62506: PPUSH
62507: CALL_OW 3
62511: ST_TO_ADDR
// end ;
62512: GO 62436
62514: POP
62515: POP
// end ;
62516: LD_VAR 0 2
62520: RET
// export function GetBaseMaterials ( base ) ; begin
62521: LD_INT 0
62523: PPUSH
// result := [ 0 , 0 , 0 ] ;
62524: LD_ADDR_VAR 0 2
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: LIST
62542: ST_TO_ADDR
// if not base then
62543: LD_VAR 0 1
62547: NOT
62548: IFFALSE 62552
// exit ;
62550: GO 62601
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62552: LD_ADDR_VAR 0 2
62556: PUSH
62557: LD_VAR 0 1
62561: PPUSH
62562: LD_INT 1
62564: PPUSH
62565: CALL_OW 275
62569: PUSH
62570: LD_VAR 0 1
62574: PPUSH
62575: LD_INT 2
62577: PPUSH
62578: CALL_OW 275
62582: PUSH
62583: LD_VAR 0 1
62587: PPUSH
62588: LD_INT 3
62590: PPUSH
62591: CALL_OW 275
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: LIST
62600: ST_TO_ADDR
// end ;
62601: LD_VAR 0 2
62605: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62606: LD_INT 0
62608: PPUSH
62609: PPUSH
// result := array ;
62610: LD_ADDR_VAR 0 3
62614: PUSH
62615: LD_VAR 0 1
62619: ST_TO_ADDR
// if size > 0 then
62620: LD_VAR 0 2
62624: PUSH
62625: LD_INT 0
62627: GREATER
62628: IFFALSE 62674
// for i := array downto size do
62630: LD_ADDR_VAR 0 4
62634: PUSH
62635: DOUBLE
62636: LD_VAR 0 1
62640: INC
62641: ST_TO_ADDR
62642: LD_VAR 0 2
62646: PUSH
62647: FOR_DOWNTO
62648: IFFALSE 62672
// result := Delete ( result , result ) ;
62650: LD_ADDR_VAR 0 3
62654: PUSH
62655: LD_VAR 0 3
62659: PPUSH
62660: LD_VAR 0 3
62664: PPUSH
62665: CALL_OW 3
62669: ST_TO_ADDR
62670: GO 62647
62672: POP
62673: POP
// end ;
62674: LD_VAR 0 3
62678: RET
// export function ComExit ( unit ) ; var tmp ; begin
62679: LD_INT 0
62681: PPUSH
62682: PPUSH
// if not IsInUnit ( unit ) then
62683: LD_VAR 0 1
62687: PPUSH
62688: CALL_OW 310
62692: NOT
62693: IFFALSE 62697
// exit ;
62695: GO 62757
// tmp := IsInUnit ( unit ) ;
62697: LD_ADDR_VAR 0 3
62701: PUSH
62702: LD_VAR 0 1
62706: PPUSH
62707: CALL_OW 310
62711: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62712: LD_VAR 0 3
62716: PPUSH
62717: CALL_OW 247
62721: PUSH
62722: LD_INT 2
62724: EQUAL
62725: IFFALSE 62738
// ComExitVehicle ( unit ) else
62727: LD_VAR 0 1
62731: PPUSH
62732: CALL_OW 121
62736: GO 62747
// ComExitBuilding ( unit ) ;
62738: LD_VAR 0 1
62742: PPUSH
62743: CALL_OW 122
// result := tmp ;
62747: LD_ADDR_VAR 0 2
62751: PUSH
62752: LD_VAR 0 3
62756: ST_TO_ADDR
// end ;
62757: LD_VAR 0 2
62761: RET
// export function ComExitAll ( units ) ; var i ; begin
62762: LD_INT 0
62764: PPUSH
62765: PPUSH
// if not units then
62766: LD_VAR 0 1
62770: NOT
62771: IFFALSE 62775
// exit ;
62773: GO 62801
// for i in units do
62775: LD_ADDR_VAR 0 3
62779: PUSH
62780: LD_VAR 0 1
62784: PUSH
62785: FOR_IN
62786: IFFALSE 62799
// ComExit ( i ) ;
62788: LD_VAR 0 3
62792: PPUSH
62793: CALL 62679 0 1
62797: GO 62785
62799: POP
62800: POP
// end ;
62801: LD_VAR 0 2
62805: RET
// export function ResetHc ; begin
62806: LD_INT 0
62808: PPUSH
// InitHc ;
62809: CALL_OW 19
// hc_importance := 0 ;
62813: LD_ADDR_OWVAR 32
62817: PUSH
62818: LD_INT 0
62820: ST_TO_ADDR
// end ;
62821: LD_VAR 0 1
62825: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62826: LD_INT 0
62828: PPUSH
62829: PPUSH
62830: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62831: LD_ADDR_VAR 0 6
62835: PUSH
62836: LD_VAR 0 1
62840: PUSH
62841: LD_VAR 0 3
62845: PLUS
62846: PUSH
62847: LD_INT 2
62849: DIV
62850: ST_TO_ADDR
// if _x < 0 then
62851: LD_VAR 0 6
62855: PUSH
62856: LD_INT 0
62858: LESS
62859: IFFALSE 62876
// _x := _x * - 1 ;
62861: LD_ADDR_VAR 0 6
62865: PUSH
62866: LD_VAR 0 6
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: MUL
62875: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62876: LD_ADDR_VAR 0 7
62880: PUSH
62881: LD_VAR 0 2
62885: PUSH
62886: LD_VAR 0 4
62890: PLUS
62891: PUSH
62892: LD_INT 2
62894: DIV
62895: ST_TO_ADDR
// if _y < 0 then
62896: LD_VAR 0 7
62900: PUSH
62901: LD_INT 0
62903: LESS
62904: IFFALSE 62921
// _y := _y * - 1 ;
62906: LD_ADDR_VAR 0 7
62910: PUSH
62911: LD_VAR 0 7
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: MUL
62920: ST_TO_ADDR
// result := [ _x , _y ] ;
62921: LD_ADDR_VAR 0 5
62925: PUSH
62926: LD_VAR 0 6
62930: PUSH
62931: LD_VAR 0 7
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: ST_TO_ADDR
// end ;
62940: LD_VAR 0 5
62944: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62945: LD_INT 0
62947: PPUSH
62948: PPUSH
62949: PPUSH
62950: PPUSH
// task := GetTaskList ( unit ) ;
62951: LD_ADDR_VAR 0 7
62955: PUSH
62956: LD_VAR 0 1
62960: PPUSH
62961: CALL_OW 437
62965: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62966: LD_VAR 0 7
62970: NOT
62971: PUSH
62972: LD_VAR 0 1
62976: PPUSH
62977: LD_VAR 0 2
62981: PPUSH
62982: CALL_OW 308
62986: NOT
62987: AND
62988: IFFALSE 62992
// exit ;
62990: GO 63110
// if IsInArea ( unit , area ) then
62992: LD_VAR 0 1
62996: PPUSH
62997: LD_VAR 0 2
63001: PPUSH
63002: CALL_OW 308
63006: IFFALSE 63024
// begin ComMoveToArea ( unit , goAway ) ;
63008: LD_VAR 0 1
63012: PPUSH
63013: LD_VAR 0 3
63017: PPUSH
63018: CALL_OW 113
// exit ;
63022: GO 63110
// end ; if task [ 1 ] [ 1 ] <> M then
63024: LD_VAR 0 7
63028: PUSH
63029: LD_INT 1
63031: ARRAY
63032: PUSH
63033: LD_INT 1
63035: ARRAY
63036: PUSH
63037: LD_STRING M
63039: NONEQUAL
63040: IFFALSE 63044
// exit ;
63042: GO 63110
// x := task [ 1 ] [ 2 ] ;
63044: LD_ADDR_VAR 0 5
63048: PUSH
63049: LD_VAR 0 7
63053: PUSH
63054: LD_INT 1
63056: ARRAY
63057: PUSH
63058: LD_INT 2
63060: ARRAY
63061: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63062: LD_ADDR_VAR 0 6
63066: PUSH
63067: LD_VAR 0 7
63071: PUSH
63072: LD_INT 1
63074: ARRAY
63075: PUSH
63076: LD_INT 3
63078: ARRAY
63079: ST_TO_ADDR
// if InArea ( x , y , area ) then
63080: LD_VAR 0 5
63084: PPUSH
63085: LD_VAR 0 6
63089: PPUSH
63090: LD_VAR 0 2
63094: PPUSH
63095: CALL_OW 309
63099: IFFALSE 63110
// ComStop ( unit ) ;
63101: LD_VAR 0 1
63105: PPUSH
63106: CALL_OW 141
// end ;
63110: LD_VAR 0 4
63114: RET
// export function Abs ( value ) ; begin
63115: LD_INT 0
63117: PPUSH
// result := value ;
63118: LD_ADDR_VAR 0 2
63122: PUSH
63123: LD_VAR 0 1
63127: ST_TO_ADDR
// if value < 0 then
63128: LD_VAR 0 1
63132: PUSH
63133: LD_INT 0
63135: LESS
63136: IFFALSE 63153
// result := value * - 1 ;
63138: LD_ADDR_VAR 0 2
63142: PUSH
63143: LD_VAR 0 1
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: MUL
63152: ST_TO_ADDR
// end ;
63153: LD_VAR 0 2
63157: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63158: LD_INT 0
63160: PPUSH
63161: PPUSH
63162: PPUSH
63163: PPUSH
63164: PPUSH
63165: PPUSH
63166: PPUSH
63167: PPUSH
// if not unit or not building then
63168: LD_VAR 0 1
63172: NOT
63173: PUSH
63174: LD_VAR 0 2
63178: NOT
63179: OR
63180: IFFALSE 63184
// exit ;
63182: GO 63410
// x := GetX ( building ) ;
63184: LD_ADDR_VAR 0 4
63188: PUSH
63189: LD_VAR 0 2
63193: PPUSH
63194: CALL_OW 250
63198: ST_TO_ADDR
// y := GetY ( building ) ;
63199: LD_ADDR_VAR 0 6
63203: PUSH
63204: LD_VAR 0 2
63208: PPUSH
63209: CALL_OW 251
63213: ST_TO_ADDR
// d := GetDir ( building ) ;
63214: LD_ADDR_VAR 0 8
63218: PUSH
63219: LD_VAR 0 2
63223: PPUSH
63224: CALL_OW 254
63228: ST_TO_ADDR
// r := 4 ;
63229: LD_ADDR_VAR 0 9
63233: PUSH
63234: LD_INT 4
63236: ST_TO_ADDR
// for i := 1 to 5 do
63237: LD_ADDR_VAR 0 10
63241: PUSH
63242: DOUBLE
63243: LD_INT 1
63245: DEC
63246: ST_TO_ADDR
63247: LD_INT 5
63249: PUSH
63250: FOR_TO
63251: IFFALSE 63408
// begin _x := ShiftX ( x , d , r + i ) ;
63253: LD_ADDR_VAR 0 5
63257: PUSH
63258: LD_VAR 0 4
63262: PPUSH
63263: LD_VAR 0 8
63267: PPUSH
63268: LD_VAR 0 9
63272: PUSH
63273: LD_VAR 0 10
63277: PLUS
63278: PPUSH
63279: CALL_OW 272
63283: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63284: LD_ADDR_VAR 0 7
63288: PUSH
63289: LD_VAR 0 6
63293: PPUSH
63294: LD_VAR 0 8
63298: PPUSH
63299: LD_VAR 0 9
63303: PUSH
63304: LD_VAR 0 10
63308: PLUS
63309: PPUSH
63310: CALL_OW 273
63314: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63315: LD_VAR 0 5
63319: PPUSH
63320: LD_VAR 0 7
63324: PPUSH
63325: CALL_OW 488
63329: PUSH
63330: LD_VAR 0 5
63334: PPUSH
63335: LD_VAR 0 7
63339: PPUSH
63340: CALL_OW 428
63344: PPUSH
63345: CALL_OW 247
63349: PUSH
63350: LD_INT 3
63352: PUSH
63353: LD_INT 2
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: IN
63360: NOT
63361: AND
63362: IFFALSE 63406
// begin ComMoveXY ( unit , _x , _y ) ;
63364: LD_VAR 0 1
63368: PPUSH
63369: LD_VAR 0 5
63373: PPUSH
63374: LD_VAR 0 7
63378: PPUSH
63379: CALL_OW 111
// result := [ _x , _y ] ;
63383: LD_ADDR_VAR 0 3
63387: PUSH
63388: LD_VAR 0 5
63392: PUSH
63393: LD_VAR 0 7
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: ST_TO_ADDR
// exit ;
63402: POP
63403: POP
63404: GO 63410
// end ; end ;
63406: GO 63250
63408: POP
63409: POP
// end ;
63410: LD_VAR 0 3
63414: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63415: LD_INT 0
63417: PPUSH
63418: PPUSH
63419: PPUSH
// result := 0 ;
63420: LD_ADDR_VAR 0 3
63424: PUSH
63425: LD_INT 0
63427: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63428: LD_VAR 0 1
63432: PUSH
63433: LD_INT 0
63435: LESS
63436: PUSH
63437: LD_VAR 0 1
63441: PUSH
63442: LD_INT 8
63444: GREATER
63445: OR
63446: PUSH
63447: LD_VAR 0 2
63451: PUSH
63452: LD_INT 0
63454: LESS
63455: OR
63456: PUSH
63457: LD_VAR 0 2
63461: PUSH
63462: LD_INT 8
63464: GREATER
63465: OR
63466: IFFALSE 63470
// exit ;
63468: GO 63545
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63470: LD_ADDR_VAR 0 4
63474: PUSH
63475: LD_INT 22
63477: PUSH
63478: LD_VAR 0 2
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PPUSH
63487: CALL_OW 69
63491: PUSH
63492: FOR_IN
63493: IFFALSE 63543
// begin un := UnitShoot ( i ) ;
63495: LD_ADDR_VAR 0 5
63499: PUSH
63500: LD_VAR 0 4
63504: PPUSH
63505: CALL_OW 504
63509: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63510: LD_VAR 0 5
63514: PPUSH
63515: CALL_OW 255
63519: PUSH
63520: LD_VAR 0 1
63524: EQUAL
63525: IFFALSE 63541
// begin result := un ;
63527: LD_ADDR_VAR 0 3
63531: PUSH
63532: LD_VAR 0 5
63536: ST_TO_ADDR
// exit ;
63537: POP
63538: POP
63539: GO 63545
// end ; end ;
63541: GO 63492
63543: POP
63544: POP
// end ;
63545: LD_VAR 0 3
63549: RET
// export function GetCargoBay ( units ) ; begin
63550: LD_INT 0
63552: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63553: LD_ADDR_VAR 0 2
63557: PUSH
63558: LD_VAR 0 1
63562: PPUSH
63563: LD_INT 2
63565: PUSH
63566: LD_INT 34
63568: PUSH
63569: LD_INT 12
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 34
63578: PUSH
63579: LD_INT 51
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 34
63588: PUSH
63589: LD_INT 32
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 34
63598: PUSH
63599: LD_EXP 19
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: PPUSH
63615: CALL_OW 72
63619: ST_TO_ADDR
// end ;
63620: LD_VAR 0 2
63624: RET
// export function Negate ( value ) ; begin
63625: LD_INT 0
63627: PPUSH
// result := not value ;
63628: LD_ADDR_VAR 0 2
63632: PUSH
63633: LD_VAR 0 1
63637: NOT
63638: ST_TO_ADDR
// end ;
63639: LD_VAR 0 2
63643: RET
// export function Inc ( value ) ; begin
63644: LD_INT 0
63646: PPUSH
// result := value + 1 ;
63647: LD_ADDR_VAR 0 2
63651: PUSH
63652: LD_VAR 0 1
63656: PUSH
63657: LD_INT 1
63659: PLUS
63660: ST_TO_ADDR
// end ;
63661: LD_VAR 0 2
63665: RET
// export function Dec ( value ) ; begin
63666: LD_INT 0
63668: PPUSH
// result := value - 1 ;
63669: LD_ADDR_VAR 0 2
63673: PUSH
63674: LD_VAR 0 1
63678: PUSH
63679: LD_INT 1
63681: MINUS
63682: ST_TO_ADDR
// end ;
63683: LD_VAR 0 2
63687: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63688: LD_INT 0
63690: PPUSH
63691: PPUSH
63692: PPUSH
63693: PPUSH
63694: PPUSH
63695: PPUSH
63696: PPUSH
63697: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63698: LD_VAR 0 1
63702: PPUSH
63703: LD_VAR 0 2
63707: PPUSH
63708: CALL_OW 488
63712: NOT
63713: PUSH
63714: LD_VAR 0 3
63718: PPUSH
63719: LD_VAR 0 4
63723: PPUSH
63724: CALL_OW 488
63728: NOT
63729: OR
63730: IFFALSE 63743
// begin result := - 1 ;
63732: LD_ADDR_VAR 0 5
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: ST_TO_ADDR
// exit ;
63741: GO 63978
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63743: LD_ADDR_VAR 0 12
63747: PUSH
63748: LD_VAR 0 1
63752: PPUSH
63753: LD_VAR 0 2
63757: PPUSH
63758: LD_VAR 0 3
63762: PPUSH
63763: LD_VAR 0 4
63767: PPUSH
63768: CALL 62826 0 4
63772: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63773: LD_ADDR_VAR 0 11
63777: PUSH
63778: LD_VAR 0 1
63782: PPUSH
63783: LD_VAR 0 2
63787: PPUSH
63788: LD_VAR 0 12
63792: PUSH
63793: LD_INT 1
63795: ARRAY
63796: PPUSH
63797: LD_VAR 0 12
63801: PUSH
63802: LD_INT 2
63804: ARRAY
63805: PPUSH
63806: CALL_OW 298
63810: ST_TO_ADDR
// distance := 9999 ;
63811: LD_ADDR_VAR 0 10
63815: PUSH
63816: LD_INT 9999
63818: ST_TO_ADDR
// for i := 0 to 5 do
63819: LD_ADDR_VAR 0 6
63823: PUSH
63824: DOUBLE
63825: LD_INT 0
63827: DEC
63828: ST_TO_ADDR
63829: LD_INT 5
63831: PUSH
63832: FOR_TO
63833: IFFALSE 63976
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63835: LD_ADDR_VAR 0 7
63839: PUSH
63840: LD_VAR 0 1
63844: PPUSH
63845: LD_VAR 0 6
63849: PPUSH
63850: LD_VAR 0 11
63854: PPUSH
63855: CALL_OW 272
63859: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63860: LD_ADDR_VAR 0 8
63864: PUSH
63865: LD_VAR 0 2
63869: PPUSH
63870: LD_VAR 0 6
63874: PPUSH
63875: LD_VAR 0 11
63879: PPUSH
63880: CALL_OW 273
63884: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63885: LD_VAR 0 7
63889: PPUSH
63890: LD_VAR 0 8
63894: PPUSH
63895: CALL_OW 488
63899: NOT
63900: IFFALSE 63904
// continue ;
63902: GO 63832
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63904: LD_ADDR_VAR 0 9
63908: PUSH
63909: LD_VAR 0 12
63913: PUSH
63914: LD_INT 1
63916: ARRAY
63917: PPUSH
63918: LD_VAR 0 12
63922: PUSH
63923: LD_INT 2
63925: ARRAY
63926: PPUSH
63927: LD_VAR 0 7
63931: PPUSH
63932: LD_VAR 0 8
63936: PPUSH
63937: CALL_OW 298
63941: ST_TO_ADDR
// if tmp < distance then
63942: LD_VAR 0 9
63946: PUSH
63947: LD_VAR 0 10
63951: LESS
63952: IFFALSE 63974
// begin result := i ;
63954: LD_ADDR_VAR 0 5
63958: PUSH
63959: LD_VAR 0 6
63963: ST_TO_ADDR
// distance := tmp ;
63964: LD_ADDR_VAR 0 10
63968: PUSH
63969: LD_VAR 0 9
63973: ST_TO_ADDR
// end ; end ;
63974: GO 63832
63976: POP
63977: POP
// end ;
63978: LD_VAR 0 5
63982: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63983: LD_INT 0
63985: PPUSH
63986: PPUSH
// if not driver or not IsInUnit ( driver ) then
63987: LD_VAR 0 1
63991: NOT
63992: PUSH
63993: LD_VAR 0 1
63997: PPUSH
63998: CALL_OW 310
64002: NOT
64003: OR
64004: IFFALSE 64008
// exit ;
64006: GO 64098
// vehicle := IsInUnit ( driver ) ;
64008: LD_ADDR_VAR 0 3
64012: PUSH
64013: LD_VAR 0 1
64017: PPUSH
64018: CALL_OW 310
64022: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64023: LD_VAR 0 1
64027: PPUSH
64028: LD_STRING \
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: PUSH
64058: LD_STRING E
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_VAR 0 3
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PPUSH
64094: CALL_OW 446
// end ;
64098: LD_VAR 0 2
64102: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64103: LD_INT 0
64105: PPUSH
64106: PPUSH
// if not driver or not IsInUnit ( driver ) then
64107: LD_VAR 0 1
64111: NOT
64112: PUSH
64113: LD_VAR 0 1
64117: PPUSH
64118: CALL_OW 310
64122: NOT
64123: OR
64124: IFFALSE 64128
// exit ;
64126: GO 64218
// vehicle := IsInUnit ( driver ) ;
64128: LD_ADDR_VAR 0 3
64132: PUSH
64133: LD_VAR 0 1
64137: PPUSH
64138: CALL_OW 310
64142: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64143: LD_VAR 0 1
64147: PPUSH
64148: LD_STRING \
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: PUSH
64178: LD_STRING E
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_VAR 0 3
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PPUSH
64214: CALL_OW 447
// end ;
64218: LD_VAR 0 2
64222: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64223: LD_INT 0
64225: PPUSH
64226: PPUSH
64227: PPUSH
// tmp := [ ] ;
64228: LD_ADDR_VAR 0 5
64232: PUSH
64233: EMPTY
64234: ST_TO_ADDR
// for i in units do
64235: LD_ADDR_VAR 0 4
64239: PUSH
64240: LD_VAR 0 1
64244: PUSH
64245: FOR_IN
64246: IFFALSE 64284
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64248: LD_ADDR_VAR 0 5
64252: PUSH
64253: LD_VAR 0 5
64257: PPUSH
64258: LD_VAR 0 5
64262: PUSH
64263: LD_INT 1
64265: PLUS
64266: PPUSH
64267: LD_VAR 0 4
64271: PPUSH
64272: CALL_OW 256
64276: PPUSH
64277: CALL_OW 2
64281: ST_TO_ADDR
64282: GO 64245
64284: POP
64285: POP
// if not tmp then
64286: LD_VAR 0 5
64290: NOT
64291: IFFALSE 64295
// exit ;
64293: GO 64343
// if asc then
64295: LD_VAR 0 2
64299: IFFALSE 64323
// result := SortListByListAsc ( units , tmp ) else
64301: LD_ADDR_VAR 0 3
64305: PUSH
64306: LD_VAR 0 1
64310: PPUSH
64311: LD_VAR 0 5
64315: PPUSH
64316: CALL_OW 76
64320: ST_TO_ADDR
64321: GO 64343
// result := SortListByListDesc ( units , tmp ) ;
64323: LD_ADDR_VAR 0 3
64327: PUSH
64328: LD_VAR 0 1
64332: PPUSH
64333: LD_VAR 0 5
64337: PPUSH
64338: CALL_OW 77
64342: ST_TO_ADDR
// end ;
64343: LD_VAR 0 3
64347: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64348: LD_INT 0
64350: PPUSH
64351: PPUSH
// task := GetTaskList ( mech ) ;
64352: LD_ADDR_VAR 0 4
64356: PUSH
64357: LD_VAR 0 1
64361: PPUSH
64362: CALL_OW 437
64366: ST_TO_ADDR
// if not task then
64367: LD_VAR 0 4
64371: NOT
64372: IFFALSE 64376
// exit ;
64374: GO 64418
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64376: LD_ADDR_VAR 0 3
64380: PUSH
64381: LD_VAR 0 4
64385: PUSH
64386: LD_INT 1
64388: ARRAY
64389: PUSH
64390: LD_INT 1
64392: ARRAY
64393: PUSH
64394: LD_STRING r
64396: EQUAL
64397: PUSH
64398: LD_VAR 0 4
64402: PUSH
64403: LD_INT 1
64405: ARRAY
64406: PUSH
64407: LD_INT 4
64409: ARRAY
64410: PUSH
64411: LD_VAR 0 2
64415: EQUAL
64416: AND
64417: ST_TO_ADDR
// end ;
64418: LD_VAR 0 3
64422: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64423: LD_INT 0
64425: PPUSH
// SetDir ( unit , d ) ;
64426: LD_VAR 0 1
64430: PPUSH
64431: LD_VAR 0 4
64435: PPUSH
64436: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64440: LD_VAR 0 1
64444: PPUSH
64445: LD_VAR 0 2
64449: PPUSH
64450: LD_VAR 0 3
64454: PPUSH
64455: LD_VAR 0 5
64459: PPUSH
64460: CALL_OW 48
// end ;
64464: LD_VAR 0 6
64468: RET
// export function ToNaturalNumber ( number ) ; begin
64469: LD_INT 0
64471: PPUSH
// result := number div 1 ;
64472: LD_ADDR_VAR 0 2
64476: PUSH
64477: LD_VAR 0 1
64481: PUSH
64482: LD_INT 1
64484: DIV
64485: ST_TO_ADDR
// if number < 0 then
64486: LD_VAR 0 1
64490: PUSH
64491: LD_INT 0
64493: LESS
64494: IFFALSE 64504
// result := 0 ;
64496: LD_ADDR_VAR 0 2
64500: PUSH
64501: LD_INT 0
64503: ST_TO_ADDR
// end ;
64504: LD_VAR 0 2
64508: RET
// export function SortByClass ( units , class ) ; var un ; begin
64509: LD_INT 0
64511: PPUSH
64512: PPUSH
// if not units or not class then
64513: LD_VAR 0 1
64517: NOT
64518: PUSH
64519: LD_VAR 0 2
64523: NOT
64524: OR
64525: IFFALSE 64529
// exit ;
64527: GO 64624
// result := [ ] ;
64529: LD_ADDR_VAR 0 3
64533: PUSH
64534: EMPTY
64535: ST_TO_ADDR
// for un in units do
64536: LD_ADDR_VAR 0 4
64540: PUSH
64541: LD_VAR 0 1
64545: PUSH
64546: FOR_IN
64547: IFFALSE 64622
// if GetClass ( un ) = class then
64549: LD_VAR 0 4
64553: PPUSH
64554: CALL_OW 257
64558: PUSH
64559: LD_VAR 0 2
64563: EQUAL
64564: IFFALSE 64591
// result := Insert ( result , 1 , un ) else
64566: LD_ADDR_VAR 0 3
64570: PUSH
64571: LD_VAR 0 3
64575: PPUSH
64576: LD_INT 1
64578: PPUSH
64579: LD_VAR 0 4
64583: PPUSH
64584: CALL_OW 2
64588: ST_TO_ADDR
64589: GO 64620
// result := Replace ( result , result + 1 , un ) ;
64591: LD_ADDR_VAR 0 3
64595: PUSH
64596: LD_VAR 0 3
64600: PPUSH
64601: LD_VAR 0 3
64605: PUSH
64606: LD_INT 1
64608: PLUS
64609: PPUSH
64610: LD_VAR 0 4
64614: PPUSH
64615: CALL_OW 1
64619: ST_TO_ADDR
64620: GO 64546
64622: POP
64623: POP
// end ;
64624: LD_VAR 0 3
64628: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64629: LD_INT 0
64631: PPUSH
64632: PPUSH
64633: PPUSH
64634: PPUSH
64635: PPUSH
64636: PPUSH
64637: PPUSH
// result := [ ] ;
64638: LD_ADDR_VAR 0 4
64642: PUSH
64643: EMPTY
64644: ST_TO_ADDR
// if x - r < 0 then
64645: LD_VAR 0 1
64649: PUSH
64650: LD_VAR 0 3
64654: MINUS
64655: PUSH
64656: LD_INT 0
64658: LESS
64659: IFFALSE 64671
// min_x := 0 else
64661: LD_ADDR_VAR 0 8
64665: PUSH
64666: LD_INT 0
64668: ST_TO_ADDR
64669: GO 64687
// min_x := x - r ;
64671: LD_ADDR_VAR 0 8
64675: PUSH
64676: LD_VAR 0 1
64680: PUSH
64681: LD_VAR 0 3
64685: MINUS
64686: ST_TO_ADDR
// if y - r < 0 then
64687: LD_VAR 0 2
64691: PUSH
64692: LD_VAR 0 3
64696: MINUS
64697: PUSH
64698: LD_INT 0
64700: LESS
64701: IFFALSE 64713
// min_y := 0 else
64703: LD_ADDR_VAR 0 7
64707: PUSH
64708: LD_INT 0
64710: ST_TO_ADDR
64711: GO 64729
// min_y := y - r ;
64713: LD_ADDR_VAR 0 7
64717: PUSH
64718: LD_VAR 0 2
64722: PUSH
64723: LD_VAR 0 3
64727: MINUS
64728: ST_TO_ADDR
// max_x := x + r ;
64729: LD_ADDR_VAR 0 9
64733: PUSH
64734: LD_VAR 0 1
64738: PUSH
64739: LD_VAR 0 3
64743: PLUS
64744: ST_TO_ADDR
// max_y := y + r ;
64745: LD_ADDR_VAR 0 10
64749: PUSH
64750: LD_VAR 0 2
64754: PUSH
64755: LD_VAR 0 3
64759: PLUS
64760: ST_TO_ADDR
// for _x = min_x to max_x do
64761: LD_ADDR_VAR 0 5
64765: PUSH
64766: DOUBLE
64767: LD_VAR 0 8
64771: DEC
64772: ST_TO_ADDR
64773: LD_VAR 0 9
64777: PUSH
64778: FOR_TO
64779: IFFALSE 64880
// for _y = min_y to max_y do
64781: LD_ADDR_VAR 0 6
64785: PUSH
64786: DOUBLE
64787: LD_VAR 0 7
64791: DEC
64792: ST_TO_ADDR
64793: LD_VAR 0 10
64797: PUSH
64798: FOR_TO
64799: IFFALSE 64876
// begin if not ValidHex ( _x , _y ) then
64801: LD_VAR 0 5
64805: PPUSH
64806: LD_VAR 0 6
64810: PPUSH
64811: CALL_OW 488
64815: NOT
64816: IFFALSE 64820
// continue ;
64818: GO 64798
// if GetResourceTypeXY ( _x , _y ) then
64820: LD_VAR 0 5
64824: PPUSH
64825: LD_VAR 0 6
64829: PPUSH
64830: CALL_OW 283
64834: IFFALSE 64874
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64836: LD_ADDR_VAR 0 4
64840: PUSH
64841: LD_VAR 0 4
64845: PPUSH
64846: LD_VAR 0 4
64850: PUSH
64851: LD_INT 1
64853: PLUS
64854: PPUSH
64855: LD_VAR 0 5
64859: PUSH
64860: LD_VAR 0 6
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PPUSH
64869: CALL_OW 1
64873: ST_TO_ADDR
// end ;
64874: GO 64798
64876: POP
64877: POP
64878: GO 64778
64880: POP
64881: POP
// end ;
64882: LD_VAR 0 4
64886: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64887: LD_INT 0
64889: PPUSH
64890: PPUSH
64891: PPUSH
64892: PPUSH
64893: PPUSH
64894: PPUSH
64895: PPUSH
64896: PPUSH
// if not units then
64897: LD_VAR 0 1
64901: NOT
64902: IFFALSE 64906
// exit ;
64904: GO 65331
// result := UnitFilter ( units , [ f_ok ] ) ;
64906: LD_ADDR_VAR 0 3
64910: PUSH
64911: LD_VAR 0 1
64915: PPUSH
64916: LD_INT 50
64918: PUSH
64919: EMPTY
64920: LIST
64921: PPUSH
64922: CALL_OW 72
64926: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64927: LD_ADDR_VAR 0 8
64931: PUSH
64932: LD_VAR 0 1
64936: PUSH
64937: LD_INT 1
64939: ARRAY
64940: PPUSH
64941: CALL_OW 255
64945: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
64946: LD_ADDR_VAR 0 10
64950: PUSH
64951: LD_INT 29
64953: PUSH
64954: LD_EXP 22
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: ST_TO_ADDR
// if not result then
64963: LD_VAR 0 3
64967: NOT
64968: IFFALSE 64972
// exit ;
64970: GO 65331
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64972: LD_ADDR_VAR 0 5
64976: PUSH
64977: LD_INT 81
64979: PUSH
64980: LD_VAR 0 8
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PPUSH
64989: CALL_OW 69
64993: ST_TO_ADDR
// for i in result do
64994: LD_ADDR_VAR 0 4
64998: PUSH
64999: LD_VAR 0 3
65003: PUSH
65004: FOR_IN
65005: IFFALSE 65329
// begin tag := GetTag ( i ) + 1 ;
65007: LD_ADDR_VAR 0 9
65011: PUSH
65012: LD_VAR 0 4
65016: PPUSH
65017: CALL_OW 110
65021: PUSH
65022: LD_INT 1
65024: PLUS
65025: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65026: LD_ADDR_VAR 0 7
65030: PUSH
65031: LD_VAR 0 4
65035: PPUSH
65036: CALL_OW 250
65040: PPUSH
65041: LD_VAR 0 4
65045: PPUSH
65046: CALL_OW 251
65050: PPUSH
65051: LD_INT 6
65053: PPUSH
65054: CALL 64629 0 3
65058: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65059: LD_VAR 0 7
65063: PUSH
65064: LD_VAR 0 4
65068: PPUSH
65069: CALL_OW 264
65073: PUSH
65074: LD_VAR 0 10
65078: IN
65079: NOT
65080: AND
65081: IFFALSE 65120
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65083: LD_VAR 0 4
65087: PPUSH
65088: LD_VAR 0 7
65092: PUSH
65093: LD_INT 1
65095: ARRAY
65096: PUSH
65097: LD_INT 1
65099: ARRAY
65100: PPUSH
65101: LD_VAR 0 7
65105: PUSH
65106: LD_INT 1
65108: ARRAY
65109: PUSH
65110: LD_INT 2
65112: ARRAY
65113: PPUSH
65114: CALL_OW 116
65118: GO 65327
// if path > tag then
65120: LD_VAR 0 2
65124: PUSH
65125: LD_VAR 0 9
65129: GREATER
65130: IFFALSE 65297
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
65132: LD_ADDR_VAR 0 6
65136: PUSH
65137: LD_VAR 0 5
65141: PPUSH
65142: LD_INT 91
65144: PUSH
65145: LD_VAR 0 4
65149: PUSH
65150: LD_INT 12
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: LIST
65157: PPUSH
65158: CALL_OW 72
65162: ST_TO_ADDR
// if nearEnemy then
65163: LD_VAR 0 6
65167: IFFALSE 65195
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65169: LD_VAR 0 4
65173: PPUSH
65174: LD_VAR 0 6
65178: PPUSH
65179: LD_VAR 0 4
65183: PPUSH
65184: CALL_OW 74
65188: PPUSH
65189: CALL_OW 115
65193: GO 65295
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65195: LD_VAR 0 4
65199: PPUSH
65200: LD_VAR 0 2
65204: PUSH
65205: LD_VAR 0 9
65209: ARRAY
65210: PUSH
65211: LD_INT 1
65213: ARRAY
65214: PPUSH
65215: LD_VAR 0 2
65219: PUSH
65220: LD_VAR 0 9
65224: ARRAY
65225: PUSH
65226: LD_INT 2
65228: ARRAY
65229: PPUSH
65230: CALL_OW 297
65234: PUSH
65235: LD_INT 6
65237: GREATER
65238: IFFALSE 65281
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65240: LD_VAR 0 4
65244: PPUSH
65245: LD_VAR 0 2
65249: PUSH
65250: LD_VAR 0 9
65254: ARRAY
65255: PUSH
65256: LD_INT 1
65258: ARRAY
65259: PPUSH
65260: LD_VAR 0 2
65264: PUSH
65265: LD_VAR 0 9
65269: ARRAY
65270: PUSH
65271: LD_INT 2
65273: ARRAY
65274: PPUSH
65275: CALL_OW 114
65279: GO 65295
// SetTag ( i , tag ) ;
65281: LD_VAR 0 4
65285: PPUSH
65286: LD_VAR 0 9
65290: PPUSH
65291: CALL_OW 109
// end else
65295: GO 65327
// if enemy then
65297: LD_VAR 0 5
65301: IFFALSE 65327
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65303: LD_VAR 0 4
65307: PPUSH
65308: LD_VAR 0 5
65312: PPUSH
65313: LD_VAR 0 4
65317: PPUSH
65318: CALL_OW 74
65322: PPUSH
65323: CALL_OW 115
// end ;
65327: GO 65004
65329: POP
65330: POP
// end ;
65331: LD_VAR 0 3
65335: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65336: LD_INT 0
65338: PPUSH
65339: PPUSH
65340: PPUSH
// if not unit or IsInUnit ( unit ) then
65341: LD_VAR 0 1
65345: NOT
65346: PUSH
65347: LD_VAR 0 1
65351: PPUSH
65352: CALL_OW 310
65356: OR
65357: IFFALSE 65361
// exit ;
65359: GO 65452
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65361: LD_ADDR_VAR 0 4
65365: PUSH
65366: LD_VAR 0 1
65370: PPUSH
65371: CALL_OW 250
65375: PPUSH
65376: LD_VAR 0 2
65380: PPUSH
65381: LD_INT 1
65383: PPUSH
65384: CALL_OW 272
65388: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65389: LD_ADDR_VAR 0 5
65393: PUSH
65394: LD_VAR 0 1
65398: PPUSH
65399: CALL_OW 251
65403: PPUSH
65404: LD_VAR 0 2
65408: PPUSH
65409: LD_INT 1
65411: PPUSH
65412: CALL_OW 273
65416: ST_TO_ADDR
// if ValidHex ( x , y ) then
65417: LD_VAR 0 4
65421: PPUSH
65422: LD_VAR 0 5
65426: PPUSH
65427: CALL_OW 488
65431: IFFALSE 65452
// ComTurnXY ( unit , x , y ) ;
65433: LD_VAR 0 1
65437: PPUSH
65438: LD_VAR 0 4
65442: PPUSH
65443: LD_VAR 0 5
65447: PPUSH
65448: CALL_OW 118
// end ;
65452: LD_VAR 0 3
65456: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65457: LD_INT 0
65459: PPUSH
65460: PPUSH
// result := false ;
65461: LD_ADDR_VAR 0 3
65465: PUSH
65466: LD_INT 0
65468: ST_TO_ADDR
// if not units then
65469: LD_VAR 0 2
65473: NOT
65474: IFFALSE 65478
// exit ;
65476: GO 65523
// for i in units do
65478: LD_ADDR_VAR 0 4
65482: PUSH
65483: LD_VAR 0 2
65487: PUSH
65488: FOR_IN
65489: IFFALSE 65521
// if See ( side , i ) then
65491: LD_VAR 0 1
65495: PPUSH
65496: LD_VAR 0 4
65500: PPUSH
65501: CALL_OW 292
65505: IFFALSE 65519
// begin result := true ;
65507: LD_ADDR_VAR 0 3
65511: PUSH
65512: LD_INT 1
65514: ST_TO_ADDR
// exit ;
65515: POP
65516: POP
65517: GO 65523
// end ;
65519: GO 65488
65521: POP
65522: POP
// end ;
65523: LD_VAR 0 3
65527: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65528: LD_INT 0
65530: PPUSH
65531: PPUSH
65532: PPUSH
65533: PPUSH
// if not unit or not points then
65534: LD_VAR 0 1
65538: NOT
65539: PUSH
65540: LD_VAR 0 2
65544: NOT
65545: OR
65546: IFFALSE 65550
// exit ;
65548: GO 65640
// dist := 99999 ;
65550: LD_ADDR_VAR 0 5
65554: PUSH
65555: LD_INT 99999
65557: ST_TO_ADDR
// for i in points do
65558: LD_ADDR_VAR 0 4
65562: PUSH
65563: LD_VAR 0 2
65567: PUSH
65568: FOR_IN
65569: IFFALSE 65638
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65571: LD_ADDR_VAR 0 6
65575: PUSH
65576: LD_VAR 0 1
65580: PPUSH
65581: LD_VAR 0 4
65585: PUSH
65586: LD_INT 1
65588: ARRAY
65589: PPUSH
65590: LD_VAR 0 4
65594: PUSH
65595: LD_INT 2
65597: ARRAY
65598: PPUSH
65599: CALL_OW 297
65603: ST_TO_ADDR
// if tmpDist < dist then
65604: LD_VAR 0 6
65608: PUSH
65609: LD_VAR 0 5
65613: LESS
65614: IFFALSE 65636
// begin result := i ;
65616: LD_ADDR_VAR 0 3
65620: PUSH
65621: LD_VAR 0 4
65625: ST_TO_ADDR
// dist := tmpDist ;
65626: LD_ADDR_VAR 0 5
65630: PUSH
65631: LD_VAR 0 6
65635: ST_TO_ADDR
// end ; end ;
65636: GO 65568
65638: POP
65639: POP
// end ; end_of_file
65640: LD_VAR 0 3
65644: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65645: LD_VAR 0 1
65649: PUSH
65650: LD_INT 200
65652: DOUBLE
65653: GREATEREQUAL
65654: IFFALSE 65662
65656: LD_INT 299
65658: DOUBLE
65659: LESSEQUAL
65660: IFTRUE 65664
65662: GO 65696
65664: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65665: LD_VAR 0 1
65669: PPUSH
65670: LD_VAR 0 2
65674: PPUSH
65675: LD_VAR 0 3
65679: PPUSH
65680: LD_VAR 0 4
65684: PPUSH
65685: LD_VAR 0 5
65689: PPUSH
65690: CALL 21414 0 5
65694: GO 65773
65696: LD_INT 300
65698: DOUBLE
65699: GREATEREQUAL
65700: IFFALSE 65708
65702: LD_INT 399
65704: DOUBLE
65705: LESSEQUAL
65706: IFTRUE 65710
65708: GO 65772
65710: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65711: LD_VAR 0 1
65715: PPUSH
65716: LD_VAR 0 2
65720: PPUSH
65721: LD_VAR 0 3
65725: PPUSH
65726: LD_VAR 0 4
65730: PPUSH
65731: LD_VAR 0 5
65735: PPUSH
65736: LD_VAR 0 6
65740: PPUSH
65741: LD_VAR 0 7
65745: PPUSH
65746: LD_VAR 0 8
65750: PPUSH
65751: LD_VAR 0 9
65755: PPUSH
65756: LD_VAR 0 10
65760: PPUSH
65761: LD_VAR 0 11
65765: PPUSH
65766: CALL 19056 0 11
65770: GO 65773
65772: POP
// end ;
65773: PPOPN 11
65775: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65776: LD_VAR 0 1
65780: PPUSH
65781: LD_VAR 0 2
65785: PPUSH
65786: LD_VAR 0 3
65790: PPUSH
65791: LD_VAR 0 4
65795: PPUSH
65796: LD_VAR 0 5
65800: PPUSH
65801: CALL 21150 0 5
// end ; end_of_file
65805: PPOPN 5
65807: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65808: LD_VAR 0 1
65812: PPUSH
65813: LD_VAR 0 2
65817: PPUSH
65818: LD_VAR 0 3
65822: PPUSH
65823: LD_VAR 0 4
65827: PPUSH
65828: LD_VAR 0 5
65832: PPUSH
65833: LD_VAR 0 6
65837: PPUSH
65838: CALL 7251 0 6
// end ;
65842: PPOPN 6
65844: END
