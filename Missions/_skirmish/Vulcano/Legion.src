Export Function RemoveLegion;
var i;
begin
for i in FilterAllUnits([f_side, 8]) do
    RemoveUnit(i);
End;



Export legion_force, legion_skill, legion_mines, legion_blist, legion_vlist, legion_enemy;
Export Function PrepareLegion;
var un, i, tmp, veh, p, l_depot, l_factory, l_lab, l_towers;
begin
l_depot := FilterAllUnits([[f_side, 8], [f_btype, b_warehouse]])[1];
l_factory := FilterAllUnits([[f_side, 8], [f_btype, b_factory]])[1];
l_lab := FilterAllUnits([[f_side, 8], [f_or, [f_btype, b_lab], [f_btype, b_lab_full]]])[1];
l_towers := FilterAllUnits([[f_side, 8], [f_btype, b_bunker]]);

uc_side := 8;
uc_nation := nation_arabian;

legion_skill := [5, 6, 7][Difficulty];

legion_blist := [];
legion_vlist := [];
legion_force := [];
legion_enemy := -1;


SetResourceType(GetBase(l_depot), mat_cans, 10000);
SetResourceType(GetBase(l_depot), 3, 1000);

for i = 1 to l_towers do
    begin
    PrepareHuman(false, 1, legion_skill);
    un := CreateHuman;
    PlaceHumanInUnit(un, l_towers[i]);
    end;

for i = 1 to 4 do
    for p = 1 to 2 do
        begin
        PrepareHuman(false, class_mortar, legion_skill);
        un := CreateHuman;
        PlaceHumanInUnit(un, FilterAllUnits([[f_side, 8], [f_btype, b_barracks]])[p]);
        end;

for i = 1 to 4 do
    begin
    PrepareHuman(false, 4, legion_skill);
    un := CreateHuman;
    PlaceHumanInUnit(un, l_lab);
    end;

for i = 1 to 6 do
    begin
    PrepareHuman(false, 3, legion_skill);
    un := CreateHuman;
    PlaceHumanInUnit(un, l_factory);
    end;

for i = 1 to 5 do
    begin
    PrepareHuman(false, 2, legion_skill);
    un := CreateHuman;
    PlaceHumanInUnit(un, l_depot);
    end;


tmp := RandPointsFromArea(199, 134, 216, 141, 6);
p := 1;

for i = 1 to 3 do
    begin
    vc_chassis := ar_half_tracked;
    vc_engine := engine_siberite;
    vc_control := control_manual;
    vc_weapon := ar_control_tower;

    veh := CreateVehicle;

    if HexInfo(tmp[p], tmp[p+1]) = 0 then
       PlaceUnitXY(veh, tmp[p], tmp[p+1], false)
        else
         begin
         repeat
          p := p + 2;
         until  HexInfo(tmp[p], tmp[p+1]) = 0;

         PlaceUnitXY(veh, tmp[p], tmp[p+1], false);
         end;

    PrepareHuman(false, 3, legion_skill+1);
    un := CreateHuman;
    PlaceHumanInUnit(un, veh);
    end;



// prepare camera's
   PlaceSeeing(198, 94, 8, 10);
   PlaceSeeing(167, 130, 8, 10);


// mine's
   legion_mines := [];

   legion_mines := RandPointsFromArea(176, 122, 188, 126, 6);
   legion_mines := legion_mines ^ RandPointsFromArea(197, 91, 205, 96, 4);
   legion_mines := legion_mines ^ RandPointsFromArea(184, 151, 178, 130, 9);
   if Difficulty > 1 then
      legion_mines := legion_mines ^ RandPointsFromArea(166, 126, 181, 136, 5);
   // display_strings := legion_mines;

   p := 1;

   for i = 1 to 24 do
       begin
       PlaceMine(legion_mines[p], legion_mines[p+1], 8, 0);
       p := p + 2;
       end;

// cargo
   legion_vlist := [ar_medium_trike, 3, control_remote, ar_cargo_bay];

End;


Every 0$01 trigger FilterAllUnits([f_side, 8]) > 0 do
var un, i, tmp, veh, b, p, cr, l_depot, l_factory, l_lab, l_towers, l_sib, l_sci, l_mech, l_sold, l_eng, l_cargo;
begin
enable;

l_depot := FilterAllUnits([[f_side, 8], [f_btype, b_warehouse]])[1];
l_factory := FilterAllUnits([[f_side, 8], [f_btype, b_factory]])[1];
l_lab := FilterAllUnits([[f_side, 8], [f_or, [f_btype, b_lab], [f_btype, b_lab_full]]])[1];
l_towers := FilterAllUnits([[f_side, 8], [f_btype, b_bunker]]);

l_eng  := FilterAllUnits([[f_side, 8], [f_class, 2]]);
l_sold := FilterAllUnits([[f_side, 8], [f_class, 1]]);
l_mech := FilterAllUnits([[f_side, 8], [f_class, 3]]);
l_sci  := FilterAllUnits([[f_side, 8], [f_class, 4]]);

// repair
   if l_eng then
      begin
      b := FilterAllUnits([[f_side, 8], [f_type, unit_building]]);

      if UnitFilter(b, [f_not, [f_lives, 1000]]) > 0 then
         begin
         tmp := UnitFilter(b, [f_not, [f_lives, 1000]]);

         for i = 1 to l_eng do
             if IsInUnit(l_eng[i]) then
                ComExitBuilding(l_eng[i])
                 else
                  if not HasTask(l_eng[i]) then
                     ComRepairBuilding(l_eng[i], tmp[1]);
         end
          else
           begin

           if legion_blist > 0 then
              begin
              for i = 1 to l_eng do
                  if IsInUnit(l_eng[i]) then
                     ComExitBuilding(l_eng[i])
                      else
                       if not HasTask(l_eng[i]) then
                          ComBuild(l_eng[i], legion_blist[1], legion_blist[2], legion_blist[3], legion_blist[4]);
              end
               else
                for i = 1 to l_eng do
                    if not IsInUnit(l_eng[i]) and not HasTask(l_eng[i]) then
                       ComEnterUnit(l_eng[i], l_depot);
           end;

      end;

// legion_factory
   if l_factory then
      begin

      if FilterAllUnits([[f_side, 8], [f_control, control_remote], [f_not, [f_linked]]]) > 0 and FilterAllUnits([[f_side, 8], [f_weapon, ar_control_tower]]) > 0 then
         ComLinkTo(FilterAllUnits([[f_side, 8], [f_control, control_remote], [f_not, [f_linked]]])[1], FilterAllUnits([[f_side, 8], [f_weapon, ar_control_tower]])[Rand(1,FilterAllUnits([[f_side, 8], [f_weapon, ar_control_tower]]))]);

      if legion_vlist > 0 and BuildingStatus(l_factory) = bs_idle then
         begin
         ComConstruct(l_factory, legion_vlist[1], legion_vlist[2], legion_vlist[3], legion_vlist[4]);

         for i = 1 to 4 do
             legion_vlist := Delete(legion_vlist, 1);
         end;
                                 
      if UnitFilter(l_towers, [f_bweapon, 0]) > 0 and BuildingStatus(l_factory) = bs_idle then
         ComPlaceWeapon(UnitFilter(l_towers, [f_bweapon, 0])[1], [ar_rocket_launcher, ar_gun][Rand(1,2)]);

      end;


if legion_enemy > 0 then
   begin
   if tick mod 11$00 = 0 then
      begin
      legion_vlist := legion_vlist ^ [ar_medium_trike, engine_combustion, control_remote];
      legion_vlist := legion_vlist ^ [ar_rocket_launcher, ar_gun, ar_selfpropelled_bomb][Rand(1,3)];
      legion_vlist := legion_vlist ^ [ar_medium_trike, engine_combustion, control_remote];
      legion_vlist := legion_vlist ^ [ar_rocket_launcher, ar_gun, ar_selfpropelled_bomb][Rand(1,3)];
      legion_vlist := legion_vlist ^ [ar_medium_trike, engine_combustion, control_remote];
      legion_vlist := legion_vlist ^ [ar_rocket_launcher, ar_gun, ar_selfpropelled_bomb][Rand(1,3)];
      legion_vlist := legion_vlist ^ [ar_medium_trike, engine_combustion, control_remote];
      legion_vlist := legion_vlist ^ [ar_rocket_launcher, ar_gun, ar_selfpropelled_bomb][Rand(1,3)];
      end;

   if legion_force >= 7 then
      begin
      for i = 1 to legion_force do
          begin
          if not HasTask(legion_force[i]) and GetTag(legion_force[i]) <> 11 then
             begin
             case legion_enemy of
             1: ComMoveXY(legion_force[i], 142, 144);
             2: ComMoveXY(legion_force[i], 101, 34);
             7: ComMoveXY(legion_force[i], 173, 127);
             end;

             SetTag(legion_force[i], 11);
             end;
          end;
      end;

   if legion_force then
      begin
      tmp := legion_force;

      for i = 1 to tmp do
          if not HasTask(tmp[i]) and GetTag(legion_force[i]) = 11 then
             ComAttackUnit(tmp[i], NearestUnitToUnit(FilterAllUnits([f_side, legion_enemy]), tmp[i]));
      end;
   end;


// remote mine
   p := 1;

   for i = 1 to 24 do
       begin
       if HexInfo(legion_mines[p], legion_mines[p+1]) > 0 then
          if GetSide(HexInfo(legion_mines[p], legion_mines[p+1])) = legion_enemy then
             LaunchMineAtPos(legion_mines[p], legion_mines[p+1], 8);

       p := p + 2;
       end;


// cargo
   if FilterAllUnits([[f_side, 8], [f_weapon, ar_cargo_bay]]) then
      begin
      if l_cargo = false then
         l_cargo := FilterAllUnits([[f_side, 8], [f_weapon, ar_cargo_bay]]);

      if l_cargo then
         begin
         cr := GetListOfCratesInArea(legion_crates);

         if cr > 0 then
            if not HasTask(l_cargo) then
               ComCollect(l_cargo, cr[1], cr[2]);
         end;

      end;

// stole artefact
   if tick = [25$00,22$00,20$00][Difficulty] and FindArtifact(1)[1] = 112 and FindArtifact(1)[2] = 67 then
      begin
      un := l_eng[1];

      if IsInUnit(un) then
         ComExitBuilding(un);

      AddComCollect(un, FindArtifact(1)[1], FindArtifact(1)[2]);
      AddComMoveXY(un, 207, 123);
      AddComUnload(un);
      end;

End;

Every 9$00 trigger difficulty > 1 do
var i, sci, sib, p;
begin
Wait(Rand(0$01, 6$01));

sci := FilterAllUnits([[f_side, 8], [f_class, 4]]);
p := 1;
sib := [116, 139, 69, 13];

for i = 1 to 2 do
    begin
    if IsInUnit(sci[i]) then
       ComExitBuilding(sci[i]);

    Wait(0$03);
    ComContaminate(sci[i], sib[p], sib[p+1]);
    p := p + 2;
    end;

end;


Every 3$30 trigger GetListOfCratesInArea(legion_crates) < 20 do
begin
enable;
CreateCratesArea(Rand(1,5), legion_crates, true);
End;