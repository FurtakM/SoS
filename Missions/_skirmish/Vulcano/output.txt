// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1142 0 0
// PrepareRussian ;
  23: CALL 3838 0 0
// PrepareLegion ;
  27: CALL 8157 0 0
// Action ;
  31: CALL 11688 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 17088 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// hc_gallery := skirmish ;
 443: LD_ADDR_OWVAR 33
 447: PUSH
 448: LD_STRING skirmish
 450: ST_TO_ADDR
// hc_face_number := 10 ;
 451: LD_ADDR_OWVAR 34
 455: PUSH
 456: LD_INT 10
 458: ST_TO_ADDR
// hc_name := Michael Anderson ;
 459: LD_ADDR_OWVAR 26
 463: PUSH
 464: LD_STRING Michael Anderson
 466: ST_TO_ADDR
// us_commander := CreateHuman ;
 467: LD_ADDR_EXP 24
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// player_commander := us_commander ;
 477: LD_ADDR_EXP 11
 481: PUSH
 482: LD_EXP 24
 486: ST_TO_ADDR
// hc_importance := 0 ;
 487: LD_ADDR_OWVAR 32
 491: PUSH
 492: LD_INT 0
 494: ST_TO_ADDR
// hc_gallery :=  ;
 495: LD_ADDR_OWVAR 33
 499: PUSH
 500: LD_STRING 
 502: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 503: LD_ADDR_VAR 0 5
 507: PUSH
 508: LD_STRING text
 510: PPUSH
 511: LD_INT 7
 513: PUSH
 514: LD_INT 6
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PPUSH
 531: LD_INT 7
 533: PUSH
 534: LD_INT 6
 536: PUSH
 537: LD_INT 5
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_OWVAR 67
 549: ARRAY
 550: PPUSH
 551: LD_INT -5
 553: PUSH
 554: LD_EXP 24
 558: PUSH
 559: LD_INT -3
 561: PUSH
 562: LD_INT -2
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: LD_EXP 25
 575: ADD
 576: PPUSH
 577: LD_INT 1
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 1
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 2
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 4
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 5
 612: PUSH
 613: LD_INT 5
 615: PUSH
 616: LD_INT 1
 618: NEG
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: LD_OWVAR 67
 629: ARRAY
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PPUSH
 638: CALL_OW 42
 642: ST_TO_ADDR
// team := team ^ us_commander ;
 643: LD_ADDR_VAR 0 5
 647: PUSH
 648: LD_VAR 0 5
 652: PUSH
 653: LD_EXP 24
 657: ADD
 658: ST_TO_ADDR
// for i = 1 to team do
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: DOUBLE
 665: LD_INT 1
 667: DEC
 668: ST_TO_ADDR
 669: LD_VAR 0 5
 673: PUSH
 674: FOR_TO
 675: IFFALSE 875
// begin if GetClass ( team [ i ] ) = class_mechanic then
 677: LD_VAR 0 5
 681: PUSH
 682: LD_VAR 0 2
 686: ARRAY
 687: PPUSH
 688: CALL_OW 257
 692: PUSH
 693: LD_INT 3
 695: EQUAL
 696: IFFALSE 837
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 698: LD_ADDR_OWVAR 37
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: LD_INT 4
 708: PUSH
 709: LD_INT 5
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: PUSH
 717: LD_VAR 0 2
 721: PUSH
 722: LD_INT 3
 724: MOD
 725: PUSH
 726: LD_INT 1
 728: PLUS
 729: ARRAY
 730: ST_TO_ADDR
// vc_engine := engine_siberite ;
 731: LD_ADDR_OWVAR 39
 735: PUSH
 736: LD_INT 3
 738: ST_TO_ADDR
// vc_control := control_manual ;
 739: LD_ADDR_OWVAR 38
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 747: LD_ADDR_OWVAR 40
 751: PUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 5
 757: PUSH
 758: LD_INT 9
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 1
 768: PPUSH
 769: LD_INT 3
 771: PPUSH
 772: CALL_OW 12
 776: ARRAY
 777: ST_TO_ADDR
// un := CreateVehicle ;
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: CALL_OW 45
 787: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 788: LD_VAR 0 4
 792: PPUSH
 793: LD_INT 2
 795: PPUSH
 796: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 800: LD_VAR 0 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 815: LD_VAR 0 5
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: LD_VAR 0 4
 830: PPUSH
 831: CALL_OW 52
// end else
 835: GO 873
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 837: LD_VAR 0 5
 841: PUSH
 842: LD_VAR 0 2
 846: ARRAY
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: LD_INT 0
 853: PPUSH
 854: CALL_OW 49
// ComHold ( team [ i ] ) ;
 858: LD_VAR 0 5
 862: PUSH
 863: LD_VAR 0 2
 867: ARRAY
 868: PPUSH
 869: CALL_OW 140
// end ; end ;
 873: GO 674
 875: POP
 876: POP
// end ;
 877: LD_VAR 0 1
 881: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 882: LD_OWVAR 1
 886: PUSH
 887: LD_INT 73500
 889: LESS
 890: IFFALSE 917
 892: GO 894
 894: DISABLE
// begin enable ;
 895: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 896: LD_INT 1
 898: PPUSH
 899: LD_INT 5
 901: PPUSH
 902: CALL_OW 12
 906: PPUSH
 907: LD_INT 23
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL_OW 55
// end ;
 917: END
// every 1 1$10 do var time , p , l ;
 918: GO 920
 920: DISABLE
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
 925: PPUSH
// begin time := 0 0$44 ;
 926: LD_ADDR_VAR 0 1
 930: PUSH
 931: LD_INT 1540
 933: ST_TO_ADDR
// l := 0 ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 942: LD_VAR 0 1
 946: PPUSH
 947: CALL_OW 67
// l := l + 1 ;
 951: LD_ADDR_VAR 0 3
 955: PUSH
 956: LD_VAR 0 3
 960: PUSH
 961: LD_INT 1
 963: PLUS
 964: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 965: LD_INT 12
 967: PPUSH
 968: CALL_OW 435
 972: PUSH
 973: LD_INT 20
 975: LESS
 976: IFFALSE 1035
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: CALL_OW 12
 988: PPUSH
 989: LD_INT 12
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 999: LD_INT 1365
1001: PPUSH
1002: LD_INT 1680
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 5
1019: PPUSH
1020: CALL_OW 12
1024: PPUSH
1025: LD_INT 12
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 12
1050: ST_TO_ADDR
// if p then
1051: LD_VAR 0 2
1055: IFFALSE 1090
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1057: LD_INT 315
1059: PPUSH
1060: LD_INT 700
1062: PPUSH
1063: CALL_OW 12
1067: PPUSH
1068: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1072: LD_INT 1
1074: PPUSH
1075: LD_INT 4
1077: PPUSH
1078: CALL_OW 12
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 13
1100: PUSH
1101: LD_INT 11
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: MOD
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: IFFALSE 1135
// time := time + 2 2$00 ;
1121: LD_ADDR_VAR 0 1
1125: PUSH
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 4200
1133: PLUS
1134: ST_TO_ADDR
// end until false ;
1135: LD_INT 0
1137: IFFALSE 942
// end ; end_of_file
1139: PPOPN 3
1141: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
1149: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1150: LD_ADDR_VAR 0 3
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 21
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 69
1183: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1184: LD_ADDR_VAR 0 4
1188: PUSH
1189: LD_INT 470
1191: PUSH
1192: LD_INT 370
1194: PUSH
1195: LD_INT 290
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_OWVAR 67
1207: ARRAY
1208: ST_TO_ADDR
// case Difficulty of 2 :
1209: LD_OWVAR 67
1213: PUSH
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1253
1222: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 30
1230: PUSH
1231: LD_INT 32
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PPUSH
1238: CALL_OW 72
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: CALL_OW 65
// end ; 3 :
1251: GO 1329
1253: LD_INT 3
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1328
1261: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_INT 30
1269: PUSH
1270: LD_INT 32
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 72
1281: PUSH
1282: LD_INT 1
1284: ARRAY
1285: PPUSH
1286: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1290: LD_VAR 0 3
1294: PPUSH
1295: LD_INT 30
1297: PUSH
1298: LD_INT 27
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: CALL_OW 12
1320: ARRAY
1321: PPUSH
1322: CALL_OW 65
// end ; end ;
1326: GO 1329
1328: POP
// for i = 1 to filter do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: DOUBLE
1335: LD_INT 1
1337: DEC
1338: ST_TO_ADDR
1339: LD_VAR 0 3
1343: PUSH
1344: FOR_TO
1345: IFFALSE 1382
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1347: LD_VAR 0 3
1351: PUSH
1352: LD_VAR 0 2
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 4
1362: PUSH
1363: LD_INT 29
1365: NEG
1366: PPUSH
1367: LD_INT 29
1369: PPUSH
1370: CALL_OW 12
1374: PLUS
1375: PPUSH
1376: CALL_OW 234
1380: GO 1344
1382: POP
1383: POP
// SetBName ( us_depot , vulcano ) ;
1384: LD_INT 50
1386: PPUSH
1387: LD_STRING vulcano
1389: PPUSH
1390: CALL_OW 500
// hc_importance := 0 ;
1394: LD_ADDR_OWVAR 32
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// uc_side := 3 ;
1402: LD_ADDR_OWVAR 20
1406: PUSH
1407: LD_INT 3
1409: ST_TO_ADDR
// uc_nation := nation_russian ;
1410: LD_ADDR_OWVAR 21
1414: PUSH
1415: LD_INT 3
1417: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1418: LD_ADDR_OWVAR 37
1422: PUSH
1423: LD_INT 22
1425: ST_TO_ADDR
// vc_engine := engine_combustion ;
1426: LD_ADDR_OWVAR 39
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// vc_control := control_manual ;
1434: LD_ADDR_OWVAR 38
1438: PUSH
1439: LD_INT 1
1441: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1442: LD_ADDR_OWVAR 40
1446: PUSH
1447: LD_INT 51
1449: ST_TO_ADDR
// un := CreateVehicle ;
1450: LD_ADDR_VAR 0 5
1454: PUSH
1455: CALL_OW 45
1459: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1460: LD_VAR 0 5
1464: PPUSH
1465: LD_INT 97
1467: PPUSH
1468: LD_INT 138
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 100
1488: PPUSH
1489: CALL_OW 290
// SetFuel ( un , 45 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 45
1500: PPUSH
1501: CALL_OW 240
// un := CreateVehicle ;
1505: LD_ADDR_VAR 0 5
1509: PUSH
1510: CALL_OW 45
1514: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1515: LD_VAR 0 5
1519: PPUSH
1520: LD_INT 109
1522: PPUSH
1523: LD_INT 154
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1533: LD_VAR 0 5
1537: PPUSH
1538: LD_INT 1
1540: PPUSH
1541: LD_INT 100
1543: PPUSH
1544: CALL_OW 290
// SetDir ( un , 1 ) ;
1548: LD_VAR 0 5
1552: PPUSH
1553: LD_INT 1
1555: PPUSH
1556: CALL_OW 233
// SetFuel ( un , 50 ) ;
1560: LD_VAR 0 5
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: CALL_OW 240
// russians_in_base := [ ] ;
1572: LD_ADDR_EXP 28
1576: PUSH
1577: EMPTY
1578: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1579: LD_ADDR_VAR 0 2
1583: PUSH
1584: DOUBLE
1585: LD_INT 1
1587: DEC
1588: ST_TO_ADDR
1589: LD_INT 6
1591: PUSH
1592: LD_INT 6
1594: PUSH
1595: LD_INT 7
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_OWVAR 67
1607: ARRAY
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1691
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PUSH
1621: LD_INT 5
1623: PUSH
1624: LD_INT 6
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 380
// un := CreateHuman ;
1642: LD_ADDR_VAR 0 5
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1652: LD_ADDR_EXP 28
1656: PUSH
1657: LD_EXP 28
1661: PUSH
1662: LD_VAR 0 5
1666: ADD
1667: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1668: LD_VAR 0 5
1672: PPUSH
1673: LD_INT 94
1675: PPUSH
1676: LD_INT 145
1678: PPUSH
1679: LD_INT 10
1681: PPUSH
1682: LD_INT 0
1684: PPUSH
1685: CALL_OW 50
// end ;
1689: GO 1609
1691: POP
1692: POP
// end ;
1693: LD_VAR 0 1
1697: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1698: LD_EXP 28
1702: PPUSH
1703: LD_INT 101
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 72
1717: IFFALSE 1783
1719: GO 1721
1721: DISABLE
1722: LD_INT 0
1724: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1725: LD_ADDR_VAR 0 1
1729: PUSH
1730: LD_EXP 28
1734: PPUSH
1735: LD_INT 101
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PPUSH
1745: CALL_OW 72
1749: PUSH
1750: LD_INT 1
1752: ARRAY
1753: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1754: LD_EXP 28
1758: PPUSH
1759: LD_VAR 0 1
1763: PPUSH
1764: CALL_OW 250
1768: PPUSH
1769: LD_VAR 0 1
1773: PPUSH
1774: CALL_OW 251
1778: PPUSH
1779: CALL_OW 114
// end ;
1783: PPOPN 1
1785: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1786: LD_INT 50
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL 2162 0 2
1796: PUSH
1797: LD_INT 40
1799: LESS
1800: IFFALSE 1997
1802: GO 1804
1804: DISABLE
1805: LD_INT 0
1807: PPUSH
1808: PPUSH
// begin uc_side := 4 ;
1809: LD_ADDR_OWVAR 20
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// uc_nation := nation_american ;
1817: LD_ADDR_OWVAR 21
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// hc_importance := 0 ;
1825: LD_ADDR_OWVAR 32
1829: PUSH
1830: LD_INT 0
1832: ST_TO_ADDR
// for i = 1 to 7 do
1833: LD_ADDR_VAR 0 1
1837: PUSH
1838: DOUBLE
1839: LD_INT 1
1841: DEC
1842: ST_TO_ADDR
1843: LD_INT 7
1845: PUSH
1846: FOR_TO
1847: IFFALSE 1911
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1849: LD_INT 0
1851: PPUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: CALL_OW 12
1862: PPUSH
1863: LD_EXP 26
1867: PPUSH
1868: CALL_OW 380
// un := CreateHuman ;
1872: LD_ADDR_VAR 0 2
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1882: LD_VAR 0 2
1886: PPUSH
1887: LD_INT 7
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 49
// SetLives ( un , 10 ) ;
1897: LD_VAR 0 2
1901: PPUSH
1902: LD_INT 10
1904: PPUSH
1905: CALL_OW 234
// end ;
1909: GO 1846
1911: POP
1912: POP
// for i = 1 to 5 do
1913: LD_ADDR_VAR 0 1
1917: PUSH
1918: DOUBLE
1919: LD_INT 1
1921: DEC
1922: ST_TO_ADDR
1923: LD_INT 5
1925: PUSH
1926: FOR_TO
1927: IFFALSE 1995
// begin PrepareHuman ( false , 4 , us_skill ) ;
1929: LD_INT 0
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: LD_EXP 26
1939: PPUSH
1940: CALL_OW 380
// SetDir ( un , 1 ) ;
1944: LD_VAR 0 2
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 233
// un := CreateHuman ;
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: CALL_OW 44
1965: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1966: LD_VAR 0 2
1970: PPUSH
1971: LD_INT 22
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// SetLives ( un , 10 ) ;
1981: LD_VAR 0 2
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 234
// end ;
1993: GO 1926
1995: POP
1996: POP
// end ; end_of_file
1997: PPOPN 2
1999: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
2000: LD_INT 0
2002: PPUSH
2003: PPUSH
2004: PPUSH
// for i = 1 to n do
2005: LD_ADDR_VAR 0 4
2009: PUSH
2010: DOUBLE
2011: LD_INT 1
2013: DEC
2014: ST_TO_ADDR
2015: LD_VAR 0 1
2019: PUSH
2020: FOR_TO
2021: IFFALSE 2155
// begin uc_side := 0 ;
2023: LD_ADDR_OWVAR 20
2027: PUSH
2028: LD_INT 0
2030: ST_TO_ADDR
// uc_nation := 0 ;
2031: LD_ADDR_OWVAR 21
2035: PUSH
2036: LD_INT 0
2038: ST_TO_ADDR
// hc_class := class_apeman ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 12
2046: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2047: LD_ADDR_OWVAR 31
2051: PUSH
2052: LD_INT 0
2054: PUSH
2055: LD_INT 0
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: ST_TO_ADDR
// hc_name :=  ;
2070: LD_ADDR_OWVAR 26
2074: PUSH
2075: LD_STRING 
2077: ST_TO_ADDR
// hc_gallery :=  ;
2078: LD_ADDR_OWVAR 33
2082: PUSH
2083: LD_STRING 
2085: ST_TO_ADDR
// hc_importance := 0 ;
2086: LD_ADDR_OWVAR 32
2090: PUSH
2091: LD_INT 0
2093: ST_TO_ADDR
// un := CreateHuman ;
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: CALL_OW 44
2103: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2104: LD_VAR 0 3
2108: PPUSH
2109: LD_INT 19
2111: PUSH
2112: LD_INT 20
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 1
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: CALL_OW 12
2129: ARRAY
2130: PPUSH
2131: LD_INT 0
2133: PPUSH
2134: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2138: LD_INT 1155
2140: PPUSH
2141: LD_INT 5355
2143: PPUSH
2144: CALL_OW 12
2148: PPUSH
2149: CALL_OW 67
// end ;
2153: GO 2020
2155: POP
2156: POP
// end ;
2157: LD_VAR 0 2
2161: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2162: LD_INT 0
2164: PPUSH
2165: PPUSH
2166: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2167: LD_ADDR_VAR 0 4
2171: PUSH
2172: LD_INT 22
2174: PUSH
2175: LD_VAR 0 2
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PPUSH
2184: CALL_OW 69
2188: PPUSH
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 74
2198: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2199: LD_ADDR_VAR 0 5
2203: PUSH
2204: LD_VAR 0 1
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 296
2218: ST_TO_ADDR
// if dist >= 9999 then
2219: LD_VAR 0 5
2223: PUSH
2224: LD_INT 9999
2226: GREATEREQUAL
2227: IFFALSE 2240
// result := - 1 else
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: LD_INT 1
2236: NEG
2237: ST_TO_ADDR
2238: GO 2250
// result := dist ;
2240: LD_ADDR_VAR 0 3
2244: PUSH
2245: LD_VAR 0 5
2249: ST_TO_ADDR
// end ;
2250: LD_VAR 0 3
2254: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// tmp := 9999 ;
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_INT 9999
2268: ST_TO_ADDR
// for i = 1 to plist do
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_VAR 0 1
2283: PUSH
2284: FOR_TO
2285: IFFALSE 2359
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2287: LD_VAR 0 1
2291: PUSH
2292: LD_VAR 0 4
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL 2162 0 2
2307: PUSH
2308: LD_VAR 0 5
2312: LESS
2313: IFFALSE 2357
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2315: LD_ADDR_VAR 0 5
2319: PUSH
2320: LD_VAR 0 1
2324: PUSH
2325: LD_VAR 0 4
2329: ARRAY
2330: PPUSH
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL 2162 0 2
2340: ST_TO_ADDR
// unit := plist [ i ] ;
2341: LD_ADDR_VAR 0 6
2345: PUSH
2346: LD_VAR 0 1
2350: PUSH
2351: LD_VAR 0 4
2355: ARRAY
2356: ST_TO_ADDR
// end ;
2357: GO 2284
2359: POP
2360: POP
// result := unit ;
2361: LD_ADDR_VAR 0 3
2365: PUSH
2366: LD_VAR 0 6
2370: ST_TO_ADDR
// end ;
2371: LD_VAR 0 3
2375: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
2382: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2383: LD_ADDR_VAR 0 2
2387: PUSH
2388: LD_INT 1000
2390: PUSH
2391: LD_INT 2500
2393: PUSH
2394: LD_INT 5000
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: LD_OWVAR 67
2406: ARRAY
2407: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 22
2424: PUSH
2425: LD_OWVAR 2
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 21
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PPUSH
2448: CALL_OW 69
2452: MUL
2453: PUSH
2454: LD_INT 30
2456: MUL
2457: PLUS
2458: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_VAR 0 2
2468: PUSH
2469: LD_EXP 17
2473: PUSH
2474: LD_INT 10
2476: MUL
2477: PLUS
2478: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 1
2491: NEG
2492: PUSH
2493: LD_EXP 17
2497: MUL
2498: PUSH
2499: LD_INT 20
2501: MUL
2502: PLUS
2503: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_VAR 0 2
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: PUSH
2518: LD_OWVAR 1
2522: PUSH
2523: LD_INT 35
2525: DIVREAL
2526: PUSH
2527: LD_INT 60
2529: DIVREAL
2530: MUL
2531: PUSH
2532: LD_INT 25
2534: MUL
2535: PLUS
2536: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2537: LD_ADDR_VAR 0 2
2541: PUSH
2542: LD_VAR 0 2
2546: PUSH
2547: LD_EXP 19
2551: PUSH
2552: LD_INT 15
2554: MUL
2555: PLUS
2556: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: LD_VAR 0 2
2566: PUSH
2567: LD_INT 1
2569: NEG
2570: PUSH
2571: LD_EXP 20
2575: MUL
2576: PUSH
2577: LD_INT 1000
2579: MUL
2580: PLUS
2581: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_VAR 0 2
2591: PUSH
2592: LD_EXP 18
2596: PUSH
2597: LD_INT 5
2599: MUL
2600: PLUS
2601: ST_TO_ADDR
// result := points ;
2602: LD_ADDR_VAR 0 1
2606: PUSH
2607: LD_VAR 0 2
2611: ST_TO_ADDR
// end ; end_of_file
2612: LD_VAR 0 1
2616: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2617: LD_VAR 0 1
2621: PPUSH
2622: CALL 35908 0 1
// if un = ru_cargo then
2626: LD_VAR 0 1
2630: PUSH
2631: LD_EXP 31
2635: EQUAL
2636: IFFALSE 2646
// ru_cargo := 0 ;
2638: LD_ADDR_EXP 31
2642: PUSH
2643: LD_INT 0
2645: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2646: LD_VAR 0 1
2650: PPUSH
2651: CALL_OW 255
2655: PUSH
2656: LD_OWVAR 2
2660: EQUAL
2661: IFFALSE 2677
// dead_counter := dead_counter + 1 ;
2663: LD_ADDR_EXP 16
2667: PUSH
2668: LD_EXP 16
2672: PUSH
2673: LD_INT 1
2675: PLUS
2676: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL_OW 255
2686: PUSH
2687: LD_INT 81
2689: PUSH
2690: LD_OWVAR 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 69
2703: IN
2704: IFFALSE 2720
// kill_counter := kill_counter + 1 ;
2706: LD_ADDR_EXP 17
2710: PUSH
2711: LD_EXP 17
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ST_TO_ADDR
// if un = player_commander then
2720: LD_VAR 0 1
2724: PUSH
2725: LD_EXP 11
2729: EQUAL
2730: IFFALSE 2739
// YouLost ( vulcano-lost ) ;
2732: LD_STRING vulcano-lost
2734: PPUSH
2735: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2739: LD_VAR 0 1
2743: PUSH
2744: LD_INT 22
2746: PUSH
2747: LD_INT 3
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PUSH
2754: LD_INT 21
2756: PUSH
2757: LD_INT 3
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PPUSH
2768: CALL_OW 69
2772: IN
2773: IFFALSE 2891
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: PUSH
2785: LD_INT 33
2787: EQUAL
2788: IFTRUE 2805
2790: PUSH
2791: LD_VAR 0 1
2795: PPUSH
2796: CALL_OW 266
2800: PUSH
2801: LD_INT 28
2803: EQUAL
2804: OR
2805: IFFALSE 2891
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2807: LD_ADDR_EXP 32
2811: PUSH
2812: LD_EXP 32
2816: PUSH
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL_OW 266
2826: ADD
2827: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2828: LD_ADDR_EXP 32
2832: PUSH
2833: LD_EXP 32
2837: PUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL_OW 250
2847: ADD
2848: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2849: LD_ADDR_EXP 32
2853: PUSH
2854: LD_EXP 32
2858: PUSH
2859: LD_VAR 0 1
2863: PPUSH
2864: CALL_OW 251
2868: ADD
2869: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2870: LD_ADDR_EXP 32
2874: PUSH
2875: LD_EXP 32
2879: PUSH
2880: LD_VAR 0 1
2884: PPUSH
2885: CALL_OW 254
2889: ADD
2890: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2891: LD_VAR 0 1
2895: PUSH
2896: LD_INT 22
2898: PUSH
2899: LD_INT 8
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_INT 21
2908: PUSH
2909: LD_INT 3
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: CALL_OW 69
2924: IN
2925: IFFALSE 3069
// begin if GetBType ( un ) = b_barracks then
2927: LD_VAR 0 1
2931: PPUSH
2932: CALL_OW 266
2936: PUSH
2937: LD_INT 5
2939: EQUAL
2940: IFFALSE 2958
// legion_blist := legion_blist ^ b_armoury else
2942: LD_ADDR_EXP 40
2946: PUSH
2947: LD_EXP 40
2951: PUSH
2952: LD_INT 4
2954: ADD
2955: ST_TO_ADDR
2956: GO 3006
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2958: LD_VAR 0 1
2962: PPUSH
2963: CALL_OW 266
2967: PUSH
2968: LD_INT 1
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 8
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: IN
2982: NOT
2983: IFFALSE 3006
// legion_blist := legion_blist ^ GetBType ( un ) ;
2985: LD_ADDR_EXP 40
2989: PUSH
2990: LD_EXP 40
2994: PUSH
2995: LD_VAR 0 1
2999: PPUSH
3000: CALL_OW 266
3004: ADD
3005: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
3006: LD_ADDR_EXP 40
3010: PUSH
3011: LD_EXP 40
3015: PUSH
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 250
3025: ADD
3026: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
3027: LD_ADDR_EXP 40
3031: PUSH
3032: LD_EXP 40
3036: PUSH
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 251
3046: ADD
3047: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3048: LD_ADDR_EXP 40
3052: PUSH
3053: LD_EXP 40
3057: PUSH
3058: LD_VAR 0 1
3062: PPUSH
3063: CALL_OW 254
3067: ADD
3068: ST_TO_ADDR
// end ; if un in legion_force then
3069: LD_VAR 0 1
3073: PUSH
3074: LD_EXP 37
3078: IN
3079: IFFALSE 3097
// legion_force := legion_force diff un ;
3081: LD_ADDR_EXP 37
3085: PUSH
3086: LD_EXP 37
3090: PUSH
3091: LD_VAR 0 1
3095: DIFF
3096: ST_TO_ADDR
// if un in ru_force then
3097: LD_VAR 0 1
3101: PUSH
3102: LD_EXP 29
3106: IN
3107: IFFALSE 3125
// ru_force := ru_force diff un ;
3109: LD_ADDR_EXP 29
3113: PUSH
3114: LD_EXP 29
3118: PUSH
3119: LD_VAR 0 1
3123: DIFF
3124: ST_TO_ADDR
// if un in al_force then
3125: LD_VAR 0 1
3129: PUSH
3130: LD_EXP 44
3134: IN
3135: IFFALSE 3153
// al_force := al_force diff un ;
3137: LD_ADDR_EXP 44
3141: PUSH
3142: LD_EXP 44
3146: PUSH
3147: LD_VAR 0 1
3151: DIFF
3152: ST_TO_ADDR
// end ;
3153: PPOPN 1
3155: END
// on BuildingComplete ( b ) do var i ;
3156: LD_INT 0
3158: PPUSH
// begin if GetSide ( b ) = 8 then
3159: LD_VAR 0 1
3163: PPUSH
3164: CALL_OW 255
3168: PUSH
3169: LD_INT 8
3171: EQUAL
3172: IFFALSE 3212
// for i = 1 to 4 do
3174: LD_ADDR_VAR 0 2
3178: PUSH
3179: DOUBLE
3180: LD_INT 1
3182: DEC
3183: ST_TO_ADDR
3184: LD_INT 4
3186: PUSH
3187: FOR_TO
3188: IFFALSE 3210
// legion_blist := Delete ( legion_blist , 1 ) ;
3190: LD_ADDR_EXP 40
3194: PUSH
3195: LD_EXP 40
3199: PPUSH
3200: LD_INT 1
3202: PPUSH
3203: CALL_OW 3
3207: ST_TO_ADDR
3208: GO 3187
3210: POP
3211: POP
// if GetSide ( b ) = 3 then
3212: LD_VAR 0 1
3216: PPUSH
3217: CALL_OW 255
3221: PUSH
3222: LD_INT 3
3224: EQUAL
3225: IFFALSE 3265
// for i = 1 to 4 do
3227: LD_ADDR_VAR 0 2
3231: PUSH
3232: DOUBLE
3233: LD_INT 1
3235: DEC
3236: ST_TO_ADDR
3237: LD_INT 4
3239: PUSH
3240: FOR_TO
3241: IFFALSE 3263
// ru_blist := Delete ( ru_blist , 1 ) ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_EXP 32
3252: PPUSH
3253: LD_INT 1
3255: PPUSH
3256: CALL_OW 3
3260: ST_TO_ADDR
3261: GO 3240
3263: POP
3264: POP
// end ;
3265: PPOPN 2
3267: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3268: LD_VAR 0 1
3272: PPUSH
3273: LD_VAR 0 2
3277: PPUSH
3278: CALL 35966 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3282: LD_VAR 0 1
3286: PPUSH
3287: CALL_OW 264
3291: PUSH
3292: LD_INT 51
3294: PUSH
3295: LD_INT 48
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: IN
3302: NOT
3303: IFFALSE 3351
// begin if GetSide ( veh ) = 3 then
3305: LD_VAR 0 1
3309: PPUSH
3310: CALL_OW 255
3314: PUSH
3315: LD_INT 3
3317: EQUAL
3318: IFFALSE 3351
// begin ComMoveXY ( veh , 149 , 8 ) ;
3320: LD_VAR 0 1
3324: PPUSH
3325: LD_INT 149
3327: PPUSH
3328: LD_INT 8
3330: PPUSH
3331: CALL_OW 111
// ru_force := ru_force ^ veh ;
3335: LD_ADDR_EXP 29
3339: PUSH
3340: LD_EXP 29
3344: PUSH
3345: LD_VAR 0 1
3349: ADD
3350: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 264
3360: PUSH
3361: LD_INT 32
3363: PUSH
3364: LD_INT 31
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: IN
3371: NOT
3372: IFFALSE 3405
// begin if GetSide ( veh ) = 8 then
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 255
3383: PUSH
3384: LD_INT 8
3386: EQUAL
3387: IFFALSE 3405
// legion_force := legion_force ^ veh ;
3389: LD_ADDR_EXP 37
3393: PUSH
3394: LD_EXP 37
3398: PUSH
3399: LD_VAR 0 1
3403: ADD
3404: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3405: LD_VAR 0 1
3409: PPUSH
3410: CALL_OW 255
3414: PUSH
3415: LD_INT 3
3417: EQUAL
3418: IFFALSE 3427
3420: PUSH
3421: LD_EXP 31
3425: NOT
3426: AND
3427: IFFALSE 3444
3429: PUSH
3430: LD_VAR 0 1
3434: PPUSH
3435: CALL_OW 264
3439: PUSH
3440: LD_INT 51
3442: EQUAL
3443: AND
3444: IFFALSE 3456
// ru_cargo := veh ;
3446: LD_ADDR_EXP 31
3450: PUSH
3451: LD_VAR 0 1
3455: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3456: LD_VAR 0 1
3460: PPUSH
3461: CALL_OW 255
3465: PUSH
3466: LD_INT 7
3468: EQUAL
3469: IFFALSE 3481
3471: PUSH
3472: LD_OWVAR 2
3476: PUSH
3477: LD_INT 7
3479: NONEQUAL
3480: AND
3481: IFFALSE 3499
// al_force := al_force ^ veh ;
3483: LD_ADDR_EXP 44
3487: PUSH
3488: LD_EXP 44
3492: PUSH
3493: LD_VAR 0 1
3497: ADD
3498: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3499: LD_VAR 0 1
3503: PPUSH
3504: CALL_OW 255
3508: PUSH
3509: LD_OWVAR 2
3513: EQUAL
3514: IFFALSE 3530
// veh_counter := veh_counter + 1 ;
3516: LD_ADDR_EXP 18
3520: PUSH
3521: LD_EXP 18
3525: PUSH
3526: LD_INT 1
3528: PLUS
3529: ST_TO_ADDR
// end ;
3530: PPOPN 2
3532: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3533: LD_VAR 0 1
3537: PPUSH
3538: CALL_OW 255
3542: PUSH
3543: LD_OWVAR 2
3547: NONEQUAL
3548: IFFALSE 3564
// sib_contamin_counter := sib_contamin_counter + 1 ;
3550: LD_ADDR_EXP 20
3554: PUSH
3555: LD_EXP 20
3559: PUSH
3560: LD_INT 1
3562: PLUS
3563: ST_TO_ADDR
// end ;
3564: PPOPN 3
3566: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3567: LD_VAR 0 2
3571: PPUSH
3572: CALL_OW 255
3576: PUSH
3577: LD_OWVAR 2
3581: EQUAL
3582: IFFALSE 3598
// tech_counter := tech_counter + 1 ;
3584: LD_ADDR_EXP 19
3588: PUSH
3589: LD_EXP 19
3593: PUSH
3594: LD_INT 1
3596: PLUS
3597: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 53
3605: EQUAL
3606: IFFALSE 3618
3608: PUSH
3609: LD_OWVAR 2
3613: PUSH
3614: LD_INT 1
3616: EQUAL
3617: AND
3618: IFFALSE 3633
// SetTech ( 80 , 1 , state_researched ) ;
3620: LD_INT 80
3622: PPUSH
3623: LD_INT 1
3625: PPUSH
3626: LD_INT 2
3628: PPUSH
3629: CALL_OW 322
// end ;
3633: PPOPN 2
3635: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3636: LD_VAR 0 1
3640: PPUSH
3641: CALL_OW 255
3645: PUSH
3646: LD_INT 8
3648: EQUAL
3649: IFFALSE 3666
3651: PUSH
3652: LD_VAR 0 1
3656: PPUSH
3657: CALL_OW 263
3661: PUSH
3662: LD_INT 2
3664: EQUAL
3665: AND
3666: IFFALSE 3677
// ComAutodestruct ( un ) ;
3668: LD_VAR 0 1
3672: PPUSH
3673: CALL 75584 0 1
// end ;
3677: PPOPN 1
3679: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3680: LD_VAR 0 1
3684: PUSH
3685: LD_EXP 21
3689: DOUBLE
3690: EQUAL
3691: IFTRUE 3695
3693: GO 3702
3695: POP
// LegionAttack ( ) ; event_alliance_attack :
3696: CALL 11467 0 0
3700: GO 3737
3702: LD_EXP 23
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3712
3710: GO 3719
3712: POP
// AllianceAttack ( ) ; event_russian_attack :
3713: CALL 19000 0 0
3717: GO 3737
3719: LD_EXP 22
3723: DOUBLE
3724: EQUAL
3725: IFTRUE 3729
3727: GO 3736
3729: POP
// RussianAttack ( ) ; end ;
3730: CALL 7679 0 0
3734: GO 3737
3736: POP
// end ;
3737: PPOPN 1
3739: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3740: LD_INT 25
3742: PUSH
3743: LD_INT 12
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 69
3754: PUSH
3755: LD_INT 9
3757: LESS
3758: IFFALSE 3770
3760: PUSH
3761: LD_OWVAR 1
3765: PUSH
3766: LD_INT 105000
3768: LESS
3769: AND
3770: IFFALSE 3803
3772: GO 3774
3774: DISABLE
// begin enable ;
3775: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3776: LD_INT 8
3778: PUSH
3779: LD_INT 25
3781: PUSH
3782: LD_INT 12
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PPUSH
3789: CALL_OW 69
3793: PUSH
3794: LD_INT 0
3796: PLUS
3797: MINUS
3798: PPUSH
3799: CALL 2000 0 1
// end ;
3803: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_VAR 0 3
3818: PPUSH
3819: CALL 35942 0 3
// end ;
3823: PPOPN 3
3825: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3826: LD_VAR 0 1
3830: PPUSH
3831: CALL 35950 0 1
// end ; end_of_file
3835: PPOPN 1
3837: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3838: LD_INT 0
3840: PPUSH
3841: PPUSH
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
3850: PPUSH
// uc_side := 3 ;
3851: LD_ADDR_OWVAR 20
3855: PUSH
3856: LD_INT 3
3858: ST_TO_ADDR
// uc_nation := nation_russian ;
3859: LD_ADDR_OWVAR 21
3863: PUSH
3864: LD_INT 3
3866: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3867: LD_ADDR_VAR 0 4
3871: PUSH
3872: LD_INT 22
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 30
3884: PUSH
3885: LD_INT 1
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PPUSH
3896: CALL_OW 69
3900: PUSH
3901: LD_INT 1
3903: ARRAY
3904: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3905: LD_ADDR_VAR 0 5
3909: PUSH
3910: LD_INT 22
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 30
3922: PUSH
3923: LD_INT 3
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 69
3938: PUSH
3939: LD_INT 1
3941: ARRAY
3942: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3943: LD_ADDR_VAR 0 6
3947: PUSH
3948: LD_INT 22
3950: PUSH
3951: LD_INT 3
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 30
3960: PUSH
3961: LD_INT 34
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PPUSH
3972: CALL_OW 69
3976: PUSH
3977: LD_INT 1
3979: ARRAY
3980: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3981: LD_ADDR_VAR 0 8
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 3
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 30
3998: PUSH
3999: LD_INT 33
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4015: LD_ADDR_VAR 0 7
4019: PUSH
4020: LD_INT 22
4022: PUSH
4023: LD_INT 3
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 30
4032: PUSH
4033: LD_INT 5
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PPUSH
4044: CALL_OW 69
4048: PUSH
4049: LD_INT 1
4051: ARRAY
4052: ST_TO_ADDR
// ru_blist := [ ] ;
4053: LD_ADDR_EXP 32
4057: PUSH
4058: EMPTY
4059: ST_TO_ADDR
// ru_vlist := [ ] ;
4060: LD_ADDR_EXP 33
4064: PUSH
4065: EMPTY
4066: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4067: LD_ADDR_EXP 36
4071: PUSH
4072: LD_INT 183
4074: PUSH
4075: LD_INT 62
4077: PUSH
4078: LD_INT 147
4080: PUSH
4081: LD_INT 44
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4090: LD_INT 30
4092: PUSH
4093: LD_INT 34
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PPUSH
4100: CALL_OW 69
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_EXP 36
4113: PUSH
4114: LD_INT 1
4116: ARRAY
4117: PPUSH
4118: LD_EXP 36
4122: PUSH
4123: LD_INT 2
4125: ARRAY
4126: PPUSH
4127: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4131: LD_ADDR_EXP 34
4135: PUSH
4136: LD_INT 4
4138: PUSH
4139: LD_INT 5
4141: PUSH
4142: LD_INT 6
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: LD_OWVAR 67
4154: ARRAY
4155: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4156: LD_VAR 0 4
4160: PPUSH
4161: CALL_OW 274
4165: PPUSH
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 3000
4171: PPUSH
4172: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4176: LD_VAR 0 4
4180: PPUSH
4181: CALL_OW 274
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: LD_INT 300
4191: PPUSH
4192: CALL_OW 277
// hc_gallery :=  ;
4196: LD_ADDR_OWVAR 33
4200: PUSH
4201: LD_STRING 
4203: ST_TO_ADDR
// hc_name :=  ;
4204: LD_ADDR_OWVAR 26
4208: PUSH
4209: LD_STRING 
4211: ST_TO_ADDR
// hc_importance := 0 ;
4212: LD_ADDR_OWVAR 32
4216: PUSH
4217: LD_INT 0
4219: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4220: LD_ADDR_EXP 30
4224: PUSH
4225: LD_INT 5
4227: PUSH
4228: LD_INT 6
4230: PUSH
4231: LD_INT 7
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_OWVAR 67
4243: ARRAY
4244: ST_TO_ADDR
// for i = 1 to 6 do
4245: LD_ADDR_VAR 0 2
4249: PUSH
4250: DOUBLE
4251: LD_INT 1
4253: DEC
4254: ST_TO_ADDR
4255: LD_INT 6
4257: PUSH
4258: FOR_TO
4259: IFFALSE 4417
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4261: LD_INT 0
4263: PPUSH
4264: LD_INT 9
4266: PPUSH
4267: LD_EXP 30
4271: PPUSH
4272: CALL_OW 380
// un := CreateHuman ;
4276: LD_ADDR_VAR 0 3
4280: PUSH
4281: CALL_OW 44
4285: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_VAR 0 7
4295: PPUSH
4296: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4300: LD_INT 0
4302: PPUSH
4303: LD_INT 4
4305: PPUSH
4306: LD_EXP 30
4310: PPUSH
4311: CALL_OW 380
// un := CreateHuman ;
4315: LD_ADDR_VAR 0 3
4319: PUSH
4320: CALL_OW 44
4324: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: LD_INT 24
4332: PPUSH
4333: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4337: LD_INT 0
4339: PPUSH
4340: LD_INT 3
4342: PPUSH
4343: LD_EXP 30
4347: PPUSH
4348: CALL_OW 380
// un := CreateHuman ;
4352: LD_ADDR_VAR 0 3
4356: PUSH
4357: CALL_OW 44
4361: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4362: LD_VAR 0 3
4366: PPUSH
4367: LD_VAR 0 5
4371: PPUSH
4372: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4376: LD_INT 0
4378: PPUSH
4379: LD_INT 2
4381: PPUSH
4382: LD_EXP 30
4386: PPUSH
4387: CALL_OW 380
// un := CreateHuman ;
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: CALL_OW 44
4400: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4401: LD_VAR 0 3
4405: PPUSH
4406: LD_VAR 0 4
4410: PPUSH
4411: CALL_OW 52
// end ;
4415: GO 4258
4417: POP
4418: POP
// if Difficulty > 1 then
4419: LD_OWVAR 67
4423: PUSH
4424: LD_INT 1
4426: GREATER
4427: IFFALSE 4460
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4429: LD_ADDR_VAR 0 3
4433: PUSH
4434: LD_INT 3
4436: PPUSH
4437: LD_INT 160
4439: PPUSH
4440: LD_INT 36
4442: PPUSH
4443: LD_INT 3
4445: PPUSH
4446: CALL 83902 0 4
4450: ST_TO_ADDR
// ComHold ( un ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: CALL_OW 140
// end ; russian_prepared := true ;
4460: LD_ADDR_EXP 2
4464: PUSH
4465: LD_INT 1
4467: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4468: LD_VAR 0 5
4472: PPUSH
4473: LD_INT 21
4475: PPUSH
4476: LD_INT 3
4478: PPUSH
4479: LD_INT 3
4481: PPUSH
4482: LD_INT 51
4484: PPUSH
4485: CALL_OW 125
// end ;
4489: LD_VAR 0 1
4493: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4494: LD_INT 22
4496: PUSH
4497: LD_INT 3
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 69
4508: PUSH
4509: LD_INT 0
4511: GREATER
4512: IFFALSE 4520
4514: PUSH
4515: LD_EXP 2
4519: AND
4520: IFFALSE 6698
4522: GO 4524
4524: DISABLE
4525: LD_INT 0
4527: PPUSH
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
4532: PPUSH
4533: PPUSH
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
// begin enable ;
4543: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4544: LD_ADDR_VAR 0 1
4548: PUSH
4549: LD_INT 22
4551: PUSH
4552: LD_INT 3
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PUSH
4559: LD_INT 30
4561: PUSH
4562: LD_INT 1
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PPUSH
4573: CALL_OW 69
4577: PUSH
4578: LD_INT 1
4580: ARRAY
4581: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: LD_INT 22
4589: PUSH
4590: LD_INT 3
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 3
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PPUSH
4611: CALL_OW 69
4615: PUSH
4616: LD_INT 1
4618: ARRAY
4619: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_INT 22
4627: PUSH
4628: LD_INT 3
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: PUSH
4635: LD_INT 30
4637: PUSH
4638: LD_INT 34
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PPUSH
4649: CALL_OW 69
4653: PUSH
4654: LD_INT 1
4656: ARRAY
4657: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4658: LD_ADDR_VAR 0 4
4662: PUSH
4663: LD_INT 22
4665: PUSH
4666: LD_INT 3
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: PUSH
4673: LD_INT 30
4675: PUSH
4676: LD_INT 33
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 69
4691: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4692: LD_ADDR_VAR 0 8
4696: PUSH
4697: LD_INT 22
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 30
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PPUSH
4721: CALL_OW 69
4725: PUSH
4726: LD_INT 1
4728: ARRAY
4729: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4730: LD_ADDR_VAR 0 5
4734: PUSH
4735: LD_INT 22
4737: PUSH
4738: LD_INT 3
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 21
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PPUSH
4759: CALL_OW 69
4763: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4764: LD_ADDR_VAR 0 6
4768: PUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 3
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 21
4781: PUSH
4782: LD_INT 2
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL_OW 69
4797: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4798: LD_ADDR_VAR 0 7
4802: PUSH
4803: LD_INT 22
4805: PUSH
4806: LD_INT 3
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 69
4831: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4832: LD_ADDR_VAR 0 9
4836: PUSH
4837: LD_VAR 0 7
4841: PPUSH
4842: LD_INT 25
4844: PUSH
4845: LD_INT 2
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 72
4856: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4857: LD_ADDR_VAR 0 10
4861: PUSH
4862: LD_VAR 0 7
4866: PPUSH
4867: LD_INT 25
4869: PUSH
4870: LD_INT 3
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 72
4881: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4882: LD_ADDR_VAR 0 11
4886: PUSH
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 72
4906: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4907: LD_INT 22
4909: PUSH
4910: LD_INT 3
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 34
4919: PUSH
4920: LD_INT 51
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PPUSH
4931: CALL_OW 69
4935: PUSH
4936: LD_INT 0
4938: GREATER
4939: IFFALSE 4951
4941: PUSH
4942: LD_EXP 31
4946: PUSH
4947: LD_INT 0
4949: EQUAL
4950: AND
4951: IFFALSE 4991
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4953: LD_ADDR_EXP 31
4957: PUSH
4958: LD_INT 22
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: LD_INT 34
4970: PUSH
4971: LD_INT 51
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PPUSH
4982: CALL_OW 69
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: ST_TO_ADDR
// if ru_cargo then
4991: LD_EXP 31
4995: IFFALSE 5347
// begin if IsInArea ( ru_cargo , ru_base ) then
4997: LD_EXP 31
5001: PPUSH
5002: LD_INT 9
5004: PPUSH
5005: CALL_OW 308
5009: IFFALSE 5088
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
5011: LD_EXP 31
5015: PPUSH
5016: LD_INT 1
5018: PPUSH
5019: CALL_OW 289
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: IFFALSE 5045
// ComEnterUnit ( ru_cargo , ru_teleport ) else
5029: LD_EXP 31
5033: PPUSH
5034: LD_VAR 0 3
5038: PPUSH
5039: CALL_OW 120
5043: GO 5086
// if not HasTask ( ru_cargo ) then
5045: LD_EXP 31
5049: PPUSH
5050: CALL_OW 314
5054: NOT
5055: IFFALSE 5086
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
5057: LD_EXP 31
5061: PPUSH
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 250
5071: PPUSH
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 251
5081: PPUSH
5082: CALL_OW 111
// end else
5086: GO 5347
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5088: LD_EXP 31
5092: PPUSH
5093: CALL_OW 314
5097: NOT
5098: IFFALSE 5118
5100: PUSH
5101: LD_EXP 31
5105: PPUSH
5106: LD_INT 1
5108: PPUSH
5109: CALL_OW 289
5113: PUSH
5114: LD_INT 100
5116: LESS
5117: AND
5118: IFFALSE 5135
5120: PUSH
5121: LD_EXP 31
5125: PPUSH
5126: LD_INT 10
5128: PPUSH
5129: CALL_OW 308
5133: NOT
5134: AND
5135: IFFALSE 5212
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5137: LD_ADDR_VAR 0 15
5141: PUSH
5142: LD_INT 11
5144: PPUSH
5145: CALL_OW 435
5149: ST_TO_ADDR
// if cr then
5150: LD_VAR 0 15
5154: IFFALSE 5185
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5156: LD_EXP 31
5160: PPUSH
5161: LD_VAR 0 15
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 15
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 117
5183: GO 5212
// if not IsInArea ( ru_cargo , ru_crates ) then
5185: LD_EXP 31
5189: PPUSH
5190: LD_INT 11
5192: PPUSH
5193: CALL_OW 308
5197: NOT
5198: IFFALSE 5212
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5200: LD_EXP 31
5204: PPUSH
5205: LD_INT 11
5207: PPUSH
5208: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5212: LD_EXP 31
5216: PPUSH
5217: CALL_OW 314
5221: NOT
5222: IFFALSE 5239
5224: PUSH
5225: LD_EXP 31
5229: PPUSH
5230: LD_INT 10
5232: PPUSH
5233: CALL_OW 308
5237: NOT
5238: AND
5239: IFFALSE 5277
5241: PUSH
5242: LD_EXP 31
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: CALL_OW 289
5254: PUSH
5255: LD_INT 100
5257: EQUAL
5258: IFTRUE 5276
5260: PUSH
5261: LD_OWVAR 2
5265: PPUSH
5266: LD_EXP 31
5270: PPUSH
5271: CALL_OW 292
5275: OR
5276: AND
5277: IFFALSE 5291
// ComMoveToArea ( ru_cargo , cargoa ) ;
5279: LD_EXP 31
5283: PPUSH
5284: LD_INT 10
5286: PPUSH
5287: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5291: LD_EXP 31
5295: PPUSH
5296: LD_INT 10
5298: PPUSH
5299: CALL_OW 308
5303: IFFALSE 5311
5305: PUSH
5306: LD_VAR 0 8
5310: AND
5311: IFFALSE 5347
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5313: LD_VAR 0 7
5317: PPUSH
5318: LD_INT 25
5320: PUSH
5321: LD_INT 9
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PPUSH
5328: CALL_OW 72
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: PPUSH
5337: LD_INT 139
5339: PPUSH
5340: LD_INT 24
5342: PPUSH
5343: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5347: LD_EXP 31
5351: PUSH
5352: LD_INT 0
5354: EQUAL
5355: IFFALSE 5363
5357: PUSH
5358: LD_VAR 0 2
5362: AND
5363: IFFALSE 5380
5365: PUSH
5366: LD_VAR 0 2
5370: PPUSH
5371: CALL_OW 461
5375: PUSH
5376: LD_INT 2
5378: EQUAL
5379: AND
5380: IFFALSE 5403
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5382: LD_VAR 0 2
5386: PPUSH
5387: LD_INT 21
5389: PPUSH
5390: LD_INT 3
5392: PPUSH
5393: LD_INT 3
5395: PPUSH
5396: LD_INT 51
5398: PPUSH
5399: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5403: LD_VAR 0 2
5407: IFFALSE 5419
5409: PUSH
5410: LD_EXP 33
5414: PUSH
5415: LD_INT 0
5417: GREATER
5418: AND
5419: IFFALSE 5519
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5421: LD_VAR 0 2
5425: PPUSH
5426: CALL_OW 461
5430: PUSH
5431: LD_INT 2
5433: EQUAL
5434: IFFALSE 5519
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_EXP 33
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: LD_EXP 33
5454: PUSH
5455: LD_INT 2
5457: ARRAY
5458: PPUSH
5459: LD_EXP 33
5463: PUSH
5464: LD_INT 3
5466: ARRAY
5467: PPUSH
5468: LD_EXP 33
5472: PUSH
5473: LD_INT 4
5475: ARRAY
5476: PPUSH
5477: CALL_OW 125
// for i = 1 to 4 do
5481: LD_ADDR_VAR 0 12
5485: PUSH
5486: DOUBLE
5487: LD_INT 1
5489: DEC
5490: ST_TO_ADDR
5491: LD_INT 4
5493: PUSH
5494: FOR_TO
5495: IFFALSE 5517
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5497: LD_ADDR_EXP 33
5501: PUSH
5502: LD_EXP 33
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: CALL_OW 3
5514: ST_TO_ADDR
5515: GO 5494
5517: POP
5518: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5519: LD_INT 24
5521: PPUSH
5522: CALL_OW 461
5526: PUSH
5527: LD_INT 2
5529: EQUAL
5530: IFFALSE 5538
5532: PUSH
5533: LD_EXP 4
5537: AND
5538: IFFALSE 5566
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5540: LD_INT 25
5542: PPUSH
5543: LD_INT 3
5545: PPUSH
5546: CALL_OW 321
5550: PUSH
5551: LD_INT 1
5553: EQUAL
5554: IFFALSE 5566
// ComResearch ( ru_lab , tech_sibfiss ) ;
5556: LD_INT 24
5558: PPUSH
5559: LD_INT 25
5561: PPUSH
5562: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5566: LD_INT 25
5568: PPUSH
5569: LD_INT 3
5571: PPUSH
5572: CALL_OW 321
5576: PUSH
5577: LD_INT 2
5579: EQUAL
5580: IFFALSE 5596
5582: PUSH
5583: LD_OWVAR 1
5587: PUSH
5588: LD_INT 10500
5590: MOD
5591: PUSH
5592: LD_INT 0
5594: EQUAL
5595: AND
5596: IFFALSE 5634
// if BuildingStatus ( ru_factory ) = bs_idle then
5598: LD_VAR 0 2
5602: PPUSH
5603: CALL_OW 461
5607: PUSH
5608: LD_INT 2
5610: EQUAL
5611: IFFALSE 5634
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5613: LD_VAR 0 2
5617: PPUSH
5618: LD_INT 23
5620: PPUSH
5621: LD_INT 3
5623: PPUSH
5624: LD_INT 3
5626: PPUSH
5627: LD_INT 48
5629: PPUSH
5630: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5634: LD_INT 22
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 34
5646: PUSH
5647: LD_INT 48
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 69
5662: PUSH
5663: LD_INT 0
5665: GREATER
5666: IFFALSE 6040
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5668: LD_ADDR_VAR 0 16
5672: PUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 3
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 34
5685: PUSH
5686: LD_INT 48
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 69
5701: PUSH
5702: LD_INT 1
5704: ARRAY
5705: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5706: LD_VAR 0 16
5710: PPUSH
5711: LD_INT 9
5713: PPUSH
5714: CALL_OW 308
5718: IFFALSE 5736
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5720: LD_VAR 0 16
5724: PPUSH
5725: LD_VAR 0 3
5729: PPUSH
5730: CALL_OW 120
5734: GO 6040
// if not HasTask ( sib_bomb ) then
5736: LD_VAR 0 16
5740: PPUSH
5741: CALL_OW 314
5745: NOT
5746: IFFALSE 6040
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5748: LD_INT 22
5750: PUSH
5751: LD_OWVAR 2
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 30
5762: PUSH
5763: LD_INT 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PPUSH
5774: CALL_OW 69
5778: PUSH
5779: LD_INT 1
5781: ARRAY
5782: PPUSH
5783: CALL_OW 256
5787: PUSH
5788: LD_INT 250
5790: GREATER
5791: IFFALSE 5884
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5793: LD_VAR 0 16
5797: PPUSH
5798: LD_INT 22
5800: PUSH
5801: LD_OWVAR 2
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 30
5812: PUSH
5813: LD_INT 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 250
5837: PPUSH
5838: LD_INT 22
5840: PUSH
5841: LD_OWVAR 2
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 30
5852: PUSH
5853: LD_INT 1
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PPUSH
5864: CALL_OW 69
5868: PUSH
5869: LD_INT 1
5871: ARRAY
5872: PPUSH
5873: CALL_OW 251
5877: PPUSH
5878: CALL_OW 116
5882: GO 6040
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5884: LD_INT 22
5886: PUSH
5887: LD_OWVAR 2
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PUSH
5896: LD_INT 21
5898: PUSH
5899: LD_INT 3
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PPUSH
5910: CALL_OW 69
5914: PUSH
5915: LD_INT 0
5917: GREATER
5918: IFFALSE 6011
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5920: LD_VAR 0 16
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_OWVAR 2
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 21
5939: PUSH
5940: LD_INT 3
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 250
5964: PPUSH
5965: LD_INT 22
5967: PUSH
5968: LD_OWVAR 2
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 21
5979: PUSH
5980: LD_INT 3
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PPUSH
5991: CALL_OW 69
5995: PUSH
5996: LD_INT 1
5998: ARRAY
5999: PPUSH
6000: CALL_OW 251
6004: PPUSH
6005: CALL_OW 116
6009: GO 6040
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
6011: LD_VAR 0 16
6015: PPUSH
6016: LD_EXP 11
6020: PPUSH
6021: CALL_OW 250
6025: PPUSH
6026: LD_EXP 11
6030: PPUSH
6031: CALL_OW 251
6035: PPUSH
6036: CALL_OW 116
// end ; if ru_can_attack then
6040: LD_EXP 3
6044: IFFALSE 6192
// if ru_time > 0 0$00 then
6046: LD_EXP 35
6050: PUSH
6051: LD_INT 0
6053: GREATER
6054: IFFALSE 6072
// ru_time := ru_time - 0 0$03 else
6056: LD_ADDR_EXP 35
6060: PUSH
6061: LD_EXP 35
6065: PUSH
6066: LD_INT 105
6068: MINUS
6069: ST_TO_ADDR
6070: GO 6192
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
6072: LD_ADDR_EXP 35
6076: PUSH
6077: LD_INT 20265
6079: PPUSH
6080: LD_INT 30765
6082: PPUSH
6083: CALL_OW 12
6087: ST_TO_ADDR
// for i = 1 to ru_amount do
6088: LD_ADDR_VAR 0 12
6092: PUSH
6093: DOUBLE
6094: LD_INT 1
6096: DEC
6097: ST_TO_ADDR
6098: LD_EXP 34
6102: PUSH
6103: FOR_TO
6104: IFFALSE 6190
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6106: LD_ADDR_EXP 33
6110: PUSH
6111: LD_EXP 33
6115: PUSH
6116: LD_INT 23
6118: ADD
6119: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6120: LD_ADDR_EXP 33
6124: PUSH
6125: LD_EXP 33
6129: PUSH
6130: LD_INT 3
6132: ADD
6133: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6134: LD_ADDR_EXP 33
6138: PUSH
6139: LD_EXP 33
6143: PUSH
6144: LD_INT 3
6146: ADD
6147: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6148: LD_ADDR_EXP 33
6152: PUSH
6153: LD_EXP 33
6157: PUSH
6158: LD_INT 46
6160: PUSH
6161: LD_INT 45
6163: PUSH
6164: LD_INT 47
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 1
6174: PPUSH
6175: LD_INT 2
6177: PPUSH
6178: LD_INT 3
6180: PPUSH
6181: CALL_OW 14
6185: ARRAY
6186: ADD
6187: ST_TO_ADDR
// end ;
6188: GO 6103
6190: POP
6191: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6192: LD_VAR 0 4
6196: PPUSH
6197: LD_INT 35
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PPUSH
6207: CALL_OW 72
6211: PUSH
6212: LD_INT 0
6214: GREATER
6215: IFFALSE 6263
// if BuildingStatus ( ru_factory ) = bs_idle then
6217: LD_VAR 0 2
6221: PPUSH
6222: CALL_OW 461
6226: PUSH
6227: LD_INT 2
6229: EQUAL
6230: IFFALSE 6263
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6232: LD_VAR 0 4
6236: PPUSH
6237: LD_INT 35
6239: PUSH
6240: LD_INT 0
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PPUSH
6247: CALL_OW 72
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: PPUSH
6256: LD_INT 47
6258: PPUSH
6259: CALL_OW 148
// if ru_force >= ru_amount then
6263: LD_EXP 29
6267: PUSH
6268: LD_EXP 34
6272: GREATEREQUAL
6273: IFFALSE 6284
// RaiseSailEvent ( event_russian_attack ) ;
6275: LD_EXP 22
6279: PPUSH
6280: CALL_OW 427
// if ru_engs > 0 then
6284: LD_VAR 0 9
6288: PUSH
6289: LD_INT 0
6291: GREATER
6292: IFFALSE 6698
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6294: LD_VAR 0 5
6298: PPUSH
6299: LD_INT 3
6301: PUSH
6302: LD_INT 24
6304: PUSH
6305: LD_INT 1000
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PPUSH
6316: CALL_OW 72
6320: PUSH
6321: LD_INT 0
6323: GREATER
6324: IFFALSE 6481
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6326: LD_ADDR_VAR 0 14
6330: PUSH
6331: LD_VAR 0 5
6335: PPUSH
6336: LD_INT 3
6338: PUSH
6339: LD_INT 24
6341: PUSH
6342: LD_INT 1000
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PPUSH
6353: CALL_OW 72
6357: ST_TO_ADDR
// for i = 1 to ru_engs do
6358: LD_ADDR_VAR 0 12
6362: PUSH
6363: DOUBLE
6364: LD_INT 1
6366: DEC
6367: ST_TO_ADDR
6368: LD_VAR 0 9
6372: PUSH
6373: FOR_TO
6374: IFFALSE 6477
// begin if IsInUnit ( ru_engs [ i ] ) then
6376: LD_VAR 0 9
6380: PUSH
6381: LD_VAR 0 12
6385: ARRAY
6386: PPUSH
6387: CALL_OW 310
6391: IFFALSE 6410
// ComExitBuilding ( ru_engs [ i ] ) else
6393: LD_VAR 0 9
6397: PUSH
6398: LD_VAR 0 12
6402: ARRAY
6403: PPUSH
6404: CALL_OW 122
6408: GO 6475
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6410: LD_VAR 0 9
6414: PUSH
6415: LD_VAR 0 12
6419: ARRAY
6420: PPUSH
6421: CALL_OW 314
6425: NOT
6426: IFFALSE 6449
6428: PUSH
6429: LD_VAR 0 9
6433: PUSH
6434: LD_VAR 0 12
6438: ARRAY
6439: PPUSH
6440: CALL_OW 256
6444: PUSH
6445: LD_INT 600
6447: GREATER
6448: AND
6449: IFFALSE 6475
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6451: LD_VAR 0 9
6455: PUSH
6456: LD_VAR 0 12
6460: ARRAY
6461: PPUSH
6462: LD_VAR 0 14
6466: PUSH
6467: LD_INT 1
6469: ARRAY
6470: PPUSH
6471: CALL_OW 130
// end ;
6475: GO 6373
6477: POP
6478: POP
// end else
6479: GO 6698
// begin if ru_blist = 0 then
6481: LD_EXP 32
6485: PUSH
6486: LD_INT 0
6488: EQUAL
6489: IFFALSE 6573
// begin for i = 1 to ru_engs do
6491: LD_ADDR_VAR 0 12
6495: PUSH
6496: DOUBLE
6497: LD_INT 1
6499: DEC
6500: ST_TO_ADDR
6501: LD_VAR 0 9
6505: PUSH
6506: FOR_TO
6507: IFFALSE 6569
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6509: LD_VAR 0 9
6513: PUSH
6514: LD_VAR 0 12
6518: ARRAY
6519: PPUSH
6520: CALL_OW 314
6524: NOT
6525: IFFALSE 6545
6527: PUSH
6528: LD_VAR 0 9
6532: PUSH
6533: LD_VAR 0 12
6537: ARRAY
6538: PPUSH
6539: CALL_OW 310
6543: NOT
6544: AND
6545: IFFALSE 6567
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6547: LD_VAR 0 9
6551: PUSH
6552: LD_VAR 0 12
6556: ARRAY
6557: PPUSH
6558: LD_VAR 0 1
6562: PPUSH
6563: CALL_OW 120
6567: GO 6506
6569: POP
6570: POP
// end else
6571: GO 6698
// begin for i = 1 to ru_engs do
6573: LD_ADDR_VAR 0 12
6577: PUSH
6578: DOUBLE
6579: LD_INT 1
6581: DEC
6582: ST_TO_ADDR
6583: LD_VAR 0 9
6587: PUSH
6588: FOR_TO
6589: IFFALSE 6696
// begin if IsInUnit ( ru_engs [ i ] ) then
6591: LD_VAR 0 9
6595: PUSH
6596: LD_VAR 0 12
6600: ARRAY
6601: PPUSH
6602: CALL_OW 310
6606: IFFALSE 6625
// ComExitBuilding ( ru_engs [ i ] ) else
6608: LD_VAR 0 9
6612: PUSH
6613: LD_VAR 0 12
6617: ARRAY
6618: PPUSH
6619: CALL_OW 122
6623: GO 6694
// if not HasTask ( ru_engs [ i ] ) then
6625: LD_VAR 0 9
6629: PUSH
6630: LD_VAR 0 12
6634: ARRAY
6635: PPUSH
6636: CALL_OW 314
6640: NOT
6641: IFFALSE 6694
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6643: LD_VAR 0 9
6647: PUSH
6648: LD_VAR 0 12
6652: ARRAY
6653: PPUSH
6654: LD_EXP 32
6658: PUSH
6659: LD_INT 1
6661: ARRAY
6662: PPUSH
6663: LD_EXP 32
6667: PUSH
6668: LD_INT 2
6670: ARRAY
6671: PPUSH
6672: LD_EXP 32
6676: PUSH
6677: LD_INT 3
6679: ARRAY
6680: PPUSH
6681: LD_EXP 32
6685: PUSH
6686: LD_INT 4
6688: ARRAY
6689: PPUSH
6690: CALL_OW 145
// end ;
6694: GO 6588
6696: POP
6697: POP
// end ; end ; end ; end ;
6698: PPOPN 16
6700: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6701: LD_EXP 2
6705: IFFALSE 6720
6707: PUSH
6708: LD_INT 11
6710: PPUSH
6711: CALL_OW 435
6715: PUSH
6716: LD_INT 10
6718: LESS
6719: AND
6720: IFFALSE 6783
6722: GO 6724
6724: DISABLE
// begin enable ;
6725: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6726: LD_INT 1
6728: PPUSH
6729: LD_INT 5
6731: PPUSH
6732: CALL_OW 12
6736: PPUSH
6737: LD_INT 11
6739: PPUSH
6740: LD_INT 1
6742: PPUSH
6743: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6747: LD_INT 1505
6749: PPUSH
6750: LD_INT 2100
6752: PPUSH
6753: CALL_OW 12
6757: PPUSH
6758: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6762: LD_INT 1
6764: PPUSH
6765: LD_INT 5
6767: PPUSH
6768: CALL_OW 12
6772: PPUSH
6773: LD_INT 11
6775: PPUSH
6776: LD_INT 1
6778: PPUSH
6779: CALL_OW 55
// end ;
6783: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6784: LD_EXP 4
6788: NOT
6789: IFFALSE 6904
6791: GO 6793
6793: DISABLE
6794: LD_INT 0
6796: PPUSH
6797: PPUSH
// begin enable ;
6798: ENABLE
// i := Rand ( 0 , 100 ) ;
6799: LD_ADDR_VAR 0 1
6803: PUSH
6804: LD_INT 0
6806: PPUSH
6807: LD_INT 100
6809: PPUSH
6810: CALL_OW 12
6814: ST_TO_ADDR
// case your_side of 1 :
6815: LD_OWVAR 2
6819: PUSH
6820: LD_INT 1
6822: DOUBLE
6823: EQUAL
6824: IFTRUE 6828
6826: GO 6839
6828: POP
// tmp := 10 ; 2 :
6829: LD_ADDR_VAR 0 2
6833: PUSH
6834: LD_INT 10
6836: ST_TO_ADDR
6837: GO 6878
6839: LD_INT 2
6841: DOUBLE
6842: EQUAL
6843: IFTRUE 6847
6845: GO 6858
6847: POP
// tmp := 0 ; 7 :
6848: LD_ADDR_VAR 0 2
6852: PUSH
6853: LD_INT 0
6855: ST_TO_ADDR
6856: GO 6878
6858: LD_INT 7
6860: DOUBLE
6861: EQUAL
6862: IFTRUE 6866
6864: GO 6877
6866: POP
// tmp := 15 ; end ;
6867: LD_ADDR_VAR 0 2
6871: PUSH
6872: LD_INT 15
6874: ST_TO_ADDR
6875: GO 6878
6877: POP
// if i < chance_to_bomb + tmp then
6878: LD_VAR 0 1
6882: PUSH
6883: LD_EXP 5
6887: PUSH
6888: LD_VAR 0 2
6892: PLUS
6893: LESS
6894: IFFALSE 6904
// ru_sib_bomb := true ;
6896: LD_ADDR_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ST_TO_ADDR
// end ;
6904: PPOPN 2
6906: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6907: LD_INT 22
6909: PUSH
6910: LD_OWVAR 2
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 34
6921: PUSH
6922: LD_INT 8
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 69
6937: IFFALSE 6950
6939: GO 6941
6941: DISABLE
// begin ru_sib_bomb := true ;
6942: LD_ADDR_EXP 4
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// end ;
6950: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6951: LD_INT 22
6953: PUSH
6954: LD_INT 3
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 30
6963: PUSH
6964: LD_INT 34
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: IFFALSE 7078
6981: GO 6983
6983: DISABLE
6984: LD_INT 0
6986: PPUSH
// begin enable ;
6987: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6988: LD_ADDR_VAR 0 1
6992: PUSH
6993: LD_INT 1
6995: PUSH
6996: LD_INT 3
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 1
7005: PPUSH
7006: LD_INT 2
7008: PPUSH
7009: CALL_OW 12
7013: ARRAY
7014: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
7015: LD_INT 22
7017: PUSH
7018: LD_INT 3
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 30
7027: PUSH
7028: LD_INT 34
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PUSH
7044: LD_INT 1
7046: ARRAY
7047: PPUSH
7048: LD_EXP 36
7052: PUSH
7053: LD_VAR 0 1
7057: ARRAY
7058: PPUSH
7059: LD_EXP 36
7063: PUSH
7064: LD_VAR 0 1
7068: PUSH
7069: LD_INT 1
7071: PLUS
7072: ARRAY
7073: PPUSH
7074: CALL_OW 243
// end ;
7078: PPOPN 1
7080: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
7081: LD_OWVAR 1
7085: PUSH
7086: LD_INT 58800
7088: PUSH
7089: LD_INT 52500
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_OWVAR 67
7100: PUSH
7101: LD_INT 1
7103: MINUS
7104: ARRAY
7105: GREATEREQUAL
7106: IFFALSE 7118
7108: PUSH
7109: LD_OWVAR 67
7113: PUSH
7114: LD_INT 1
7116: GREATER
7117: AND
7118: IFFALSE 7136
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_INT 3
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PPUSH
7131: CALL_OW 69
7135: AND
7136: IFFALSE 7558
7138: GO 7140
7140: DISABLE
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
7147: PPUSH
// begin enable ;
7148: ENABLE
// if tick > 60 60$00 then
7149: LD_OWVAR 1
7153: PUSH
7154: LD_INT 126000
7156: GREATER
7157: IFFALSE 7160
// disable ;
7159: DISABLE
// tmp := [ ] ;
7160: LD_ADDR_VAR 0 3
7164: PUSH
7165: EMPTY
7166: ST_TO_ADDR
// for i := 1 to 8 do
7167: LD_ADDR_VAR 0 1
7171: PUSH
7172: DOUBLE
7173: LD_INT 1
7175: DEC
7176: ST_TO_ADDR
7177: LD_INT 8
7179: PUSH
7180: FOR_TO
7181: IFFALSE 7340
// begin uc_side := 6 ;
7183: LD_ADDR_OWVAR 20
7187: PUSH
7188: LD_INT 6
7190: ST_TO_ADDR
// uc_nation := 3 ;
7191: LD_ADDR_OWVAR 21
7195: PUSH
7196: LD_INT 3
7198: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7199: LD_ADDR_OWVAR 37
7203: PUSH
7204: LD_INT 21
7206: PUSH
7207: LD_INT 23
7209: PUSH
7210: LD_INT 24
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: LD_VAR 0 1
7222: PUSH
7223: LD_INT 3
7225: MOD
7226: PUSH
7227: LD_INT 1
7229: PLUS
7230: ARRAY
7231: ST_TO_ADDR
// vc_engine := engine_siberite ;
7232: LD_ADDR_OWVAR 39
7236: PUSH
7237: LD_INT 3
7239: ST_TO_ADDR
// vc_control := control_computer ;
7240: LD_ADDR_OWVAR 38
7244: PUSH
7245: LD_INT 3
7247: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7248: LD_ADDR_OWVAR 40
7252: PUSH
7253: LD_INT 45
7255: PUSH
7256: LD_INT 93
7258: PUSH
7259: LD_INT 47
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: PUSH
7267: LD_VAR 0 1
7271: PUSH
7272: LD_INT 3
7274: MOD
7275: PUSH
7276: LD_INT 1
7278: PLUS
7279: ARRAY
7280: ST_TO_ADDR
// un := CreateVehicle ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: CALL_OW 45
7290: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7291: LD_VAR 0 2
7295: PPUSH
7296: LD_INT 2
7298: PPUSH
7299: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7303: LD_VAR 0 2
7307: PPUSH
7308: LD_INT 1
7310: PPUSH
7311: LD_INT 0
7313: PPUSH
7314: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7318: LD_ADDR_VAR 0 3
7322: PUSH
7323: LD_VAR 0 3
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: CALL 80267 0 2
7337: ST_TO_ADDR
// end ;
7338: GO 7180
7340: POP
7341: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7342: LD_INT 22
7344: PUSH
7345: LD_OWVAR 2
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 92
7356: PUSH
7357: LD_INT 58
7359: PUSH
7360: LD_INT 15
7362: PUSH
7363: LD_INT 18
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PPUSH
7376: CALL_OW 69
7380: PUSH
7381: LD_INT 1
7383: GREATER
7384: IFFALSE 7396
// p := 2 else
7386: LD_ADDR_VAR 0 4
7390: PUSH
7391: LD_INT 2
7393: ST_TO_ADDR
7394: GO 7404
// p := 1 ;
7396: LD_ADDR_VAR 0 4
7400: PUSH
7401: LD_INT 1
7403: ST_TO_ADDR
// case p of 1 :
7404: LD_VAR 0 4
7408: PUSH
7409: LD_INT 1
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7482
7417: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7418: LD_ADDR_VAR 0 5
7422: PUSH
7423: LD_INT 29
7425: PUSH
7426: LD_INT 29
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 49
7435: PUSH
7436: LD_INT 70
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_INT 49
7445: PUSH
7446: LD_INT 70
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 61
7455: PUSH
7456: LD_INT 110
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 74
7465: PUSH
7466: LD_INT 129
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: ST_TO_ADDR
7480: GO 7534
7482: LD_INT 2
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7533
7490: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7491: LD_ADDR_VAR 0 5
7495: PUSH
7496: LD_INT 24
7498: PUSH
7499: LD_INT 23
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 49
7508: PUSH
7509: LD_INT 39
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 52
7518: PUSH
7519: LD_INT 27
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: ST_TO_ADDR
7531: GO 7534
7533: POP
// repeat wait ( 0 0$1 ) ;
7534: LD_INT 35
7536: PPUSH
7537: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7541: LD_VAR 0 3
7545: PPUSH
7546: LD_VAR 0 5
7550: PPUSH
7551: CALL 83033 0 2
7555: NOT
7556: IFFALSE 7534
// end ;
7558: PPOPN 5
7560: END
// every 20 20$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7561: LD_INT 22
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 30
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: IFFALSE 7676
7591: GO 7593
7593: DISABLE
7594: LD_INT 0
7596: PPUSH
// begin enable ;
7597: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7598: LD_ADDR_VAR 0 1
7602: PUSH
7603: LD_INT 22
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 30
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PPUSH
7627: CALL_OW 69
7631: PUSH
7632: LD_INT 1
7634: ARRAY
7635: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL_OW 274
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: LD_INT 6000
7651: PPUSH
7652: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7656: LD_VAR 0 1
7660: PPUSH
7661: CALL_OW 274
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: LD_INT 600
7671: PPUSH
7672: CALL_OW 276
// end ;
7676: PPOPN 1
7678: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7679: LD_INT 0
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
// units := ru_force ;
7687: LD_ADDR_VAR 0 3
7691: PUSH
7692: LD_EXP 29
7696: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7697: LD_ADDR_VAR 0 6
7701: PUSH
7702: LD_INT 22
7704: PUSH
7705: LD_INT 3
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 30
7714: PUSH
7715: LD_INT 34
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PPUSH
7726: CALL_OW 69
7730: ST_TO_ADDR
// ru_force := [ ] ;
7731: LD_ADDR_EXP 29
7735: PUSH
7736: EMPTY
7737: ST_TO_ADDR
// if not teleport then
7738: LD_VAR 0 6
7742: NOT
7743: IFFALSE 7785
// begin for i in units do
7745: LD_ADDR_VAR 0 5
7749: PUSH
7750: LD_VAR 0 3
7754: PUSH
7755: FOR_IN
7756: IFFALSE 7781
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7758: LD_VAR 0 5
7762: PPUSH
7763: LD_INT 150
7765: PPUSH
7766: LD_INT 65
7768: PPUSH
7769: LD_INT 12
7771: PPUSH
7772: LD_INT 1
7774: PPUSH
7775: CALL_OW 483
7779: GO 7755
7781: POP
7782: POP
// end else
7783: GO 7880
// begin repeat for i = 1 to units do
7785: LD_ADDR_VAR 0 5
7789: PUSH
7790: DOUBLE
7791: LD_INT 1
7793: DEC
7794: ST_TO_ADDR
7795: LD_VAR 0 3
7799: PUSH
7800: FOR_TO
7801: IFFALSE 7849
// if IsInArea ( units [ i ] , ru_base ) then
7803: LD_VAR 0 3
7807: PUSH
7808: LD_VAR 0 5
7812: ARRAY
7813: PPUSH
7814: LD_INT 9
7816: PPUSH
7817: CALL_OW 308
7821: IFFALSE 7847
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7823: LD_VAR 0 3
7827: PUSH
7828: LD_VAR 0 5
7832: ARRAY
7833: PPUSH
7834: LD_VAR 0 6
7838: PUSH
7839: LD_INT 1
7841: ARRAY
7842: PPUSH
7843: CALL_OW 120
7847: GO 7800
7849: POP
7850: POP
// wait ( 0 0$10 ) ;
7851: LD_INT 350
7853: PPUSH
7854: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7858: LD_VAR 0 3
7862: PPUSH
7863: LD_INT 95
7865: PUSH
7866: LD_INT 9
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: NOT
7878: IFFALSE 7785
// end ; p := rand ( 1 , 2 ) ;
7880: LD_ADDR_VAR 0 4
7884: PUSH
7885: LD_INT 1
7887: PPUSH
7888: LD_INT 2
7890: PPUSH
7891: CALL_OW 12
7895: ST_TO_ADDR
// case p of 1 :
7896: LD_VAR 0 4
7900: PUSH
7901: LD_INT 1
7903: DOUBLE
7904: EQUAL
7905: IFTRUE 7909
7907: GO 7963
7909: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7910: LD_ADDR_VAR 0 2
7914: PUSH
7915: LD_INT 159
7917: PUSH
7918: LD_INT 71
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 152
7927: PUSH
7928: LD_INT 99
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 107
7937: PUSH
7938: LD_INT 119
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 104
7947: PUSH
7948: LD_INT 127
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: ST_TO_ADDR
7961: GO 8026
7963: LD_INT 2
7965: DOUBLE
7966: EQUAL
7967: IFTRUE 7971
7969: GO 8025
7971: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7972: LD_ADDR_VAR 0 2
7976: PUSH
7977: LD_INT 116
7979: PUSH
7980: LD_INT 36
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 91
7989: PUSH
7990: LD_INT 52
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 53
7999: PUSH
8000: LD_INT 67
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 58
8009: PUSH
8010: LD_INT 107
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: ST_TO_ADDR
8023: GO 8026
8025: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
8026: LD_INT 22
8028: PUSH
8029: LD_INT 7
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PPUSH
8036: CALL_OW 69
8040: IFFALSE 8052
8042: PUSH
8043: LD_VAR 0 4
8047: PUSH
8048: LD_INT 1
8050: GREATER
8051: AND
8052: IFFALSE 8083
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
8054: LD_ADDR_VAR 0 2
8058: PUSH
8059: LD_INT 116
8061: PUSH
8062: LD_INT 36
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 91
8071: PUSH
8072: LD_INT 52
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8083: LD_INT 35
8085: PPUSH
8086: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
8090: LD_VAR 0 3
8094: PPUSH
8095: LD_VAR 0 2
8099: PPUSH
8100: CALL 83033 0 2
8104: NOT
8105: IFFALSE 8083
// end ; end_of_file
8107: LD_VAR 0 1
8111: RET
// export function RemoveLegion ; var i ; begin
8112: LD_INT 0
8114: PPUSH
8115: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8116: LD_ADDR_VAR 0 2
8120: PUSH
8121: LD_INT 22
8123: PUSH
8124: LD_INT 8
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PPUSH
8131: CALL_OW 69
8135: PUSH
8136: FOR_IN
8137: IFFALSE 8150
// RemoveUnit ( i ) ;
8139: LD_VAR 0 2
8143: PPUSH
8144: CALL_OW 64
8148: GO 8136
8150: POP
8151: POP
// end ;
8152: LD_VAR 0 1
8156: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8157: LD_INT 0
8159: PPUSH
8160: PPUSH
8161: PPUSH
8162: PPUSH
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
8167: PPUSH
8168: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8169: LD_ADDR_VAR 0 6
8173: PUSH
8174: LD_INT 22
8176: PUSH
8177: LD_INT 8
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 30
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PPUSH
8198: CALL_OW 69
8202: PUSH
8203: LD_INT 1
8205: ARRAY
8206: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8207: LD_ADDR_VAR 0 8
8211: PUSH
8212: LD_INT 22
8214: PUSH
8215: LD_INT 8
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 30
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PPUSH
8236: CALL_OW 69
8240: PUSH
8241: LD_INT 1
8243: ARRAY
8244: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8245: LD_ADDR_VAR 0 9
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_INT 8
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 2
8262: PUSH
8263: LD_INT 30
8265: PUSH
8266: LD_INT 6
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 30
8275: PUSH
8276: LD_INT 8
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PPUSH
8292: CALL_OW 69
8296: PUSH
8297: LD_INT 1
8299: ARRAY
8300: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8301: LD_ADDR_VAR 0 10
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_INT 8
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 30
8318: PUSH
8319: LD_INT 32
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PPUSH
8330: CALL_OW 69
8334: ST_TO_ADDR
// uc_side := 8 ;
8335: LD_ADDR_OWVAR 20
8339: PUSH
8340: LD_INT 8
8342: ST_TO_ADDR
// uc_nation := nation_arabian ;
8343: LD_ADDR_OWVAR 21
8347: PUSH
8348: LD_INT 2
8350: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8351: LD_ADDR_EXP 38
8355: PUSH
8356: LD_INT 5
8358: PUSH
8359: LD_INT 6
8361: PUSH
8362: LD_INT 7
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: PUSH
8370: LD_OWVAR 67
8374: ARRAY
8375: ST_TO_ADDR
// legion_blist := [ ] ;
8376: LD_ADDR_EXP 40
8380: PUSH
8381: EMPTY
8382: ST_TO_ADDR
// legion_vlist := [ ] ;
8383: LD_ADDR_EXP 41
8387: PUSH
8388: EMPTY
8389: ST_TO_ADDR
// legion_force := [ ] ;
8390: LD_ADDR_EXP 37
8394: PUSH
8395: EMPTY
8396: ST_TO_ADDR
// legion_enemy := - 1 ;
8397: LD_ADDR_EXP 42
8401: PUSH
8402: LD_INT 1
8404: NEG
8405: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8406: LD_VAR 0 6
8410: PPUSH
8411: CALL_OW 274
8415: PPUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 10000
8421: PPUSH
8422: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8426: LD_VAR 0 6
8430: PPUSH
8431: CALL_OW 274
8435: PPUSH
8436: LD_INT 3
8438: PPUSH
8439: LD_INT 1000
8441: PPUSH
8442: CALL_OW 277
// for i = 1 to l_towers do
8446: LD_ADDR_VAR 0 3
8450: PUSH
8451: DOUBLE
8452: LD_INT 1
8454: DEC
8455: ST_TO_ADDR
8456: LD_VAR 0 10
8460: PUSH
8461: FOR_TO
8462: IFFALSE 8511
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8464: LD_INT 0
8466: PPUSH
8467: LD_INT 1
8469: PPUSH
8470: LD_EXP 38
8474: PPUSH
8475: CALL_OW 380
// un := CreateHuman ;
8479: LD_ADDR_VAR 0 2
8483: PUSH
8484: CALL_OW 44
8488: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8489: LD_VAR 0 2
8493: PPUSH
8494: LD_VAR 0 10
8498: PUSH
8499: LD_VAR 0 3
8503: ARRAY
8504: PPUSH
8505: CALL_OW 52
// end ;
8509: GO 8461
8511: POP
8512: POP
// for i = 1 to 4 do
8513: LD_ADDR_VAR 0 3
8517: PUSH
8518: DOUBLE
8519: LD_INT 1
8521: DEC
8522: ST_TO_ADDR
8523: LD_INT 4
8525: PUSH
8526: FOR_TO
8527: IFFALSE 8620
// for p = 1 to 2 do
8529: LD_ADDR_VAR 0 7
8533: PUSH
8534: DOUBLE
8535: LD_INT 1
8537: DEC
8538: ST_TO_ADDR
8539: LD_INT 2
8541: PUSH
8542: FOR_TO
8543: IFFALSE 8616
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8545: LD_INT 0
8547: PPUSH
8548: LD_INT 8
8550: PPUSH
8551: LD_EXP 38
8555: PPUSH
8556: CALL_OW 380
// un := CreateHuman ;
8560: LD_ADDR_VAR 0 2
8564: PUSH
8565: CALL_OW 44
8569: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_INT 22
8577: PUSH
8578: LD_INT 8
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 30
8587: PUSH
8588: LD_INT 5
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PPUSH
8599: CALL_OW 69
8603: PUSH
8604: LD_VAR 0 7
8608: ARRAY
8609: PPUSH
8610: CALL_OW 52
// end ;
8614: GO 8542
8616: POP
8617: POP
8618: GO 8526
8620: POP
8621: POP
// for i = 1 to 4 do
8622: LD_ADDR_VAR 0 3
8626: PUSH
8627: DOUBLE
8628: LD_INT 1
8630: DEC
8631: ST_TO_ADDR
8632: LD_INT 4
8634: PUSH
8635: FOR_TO
8636: IFFALSE 8679
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8638: LD_INT 0
8640: PPUSH
8641: LD_INT 4
8643: PPUSH
8644: LD_EXP 38
8648: PPUSH
8649: CALL_OW 380
// un := CreateHuman ;
8653: LD_ADDR_VAR 0 2
8657: PUSH
8658: CALL_OW 44
8662: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8663: LD_VAR 0 2
8667: PPUSH
8668: LD_VAR 0 9
8672: PPUSH
8673: CALL_OW 52
// end ;
8677: GO 8635
8679: POP
8680: POP
// for i = 1 to 4 do
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: DOUBLE
8687: LD_INT 1
8689: DEC
8690: ST_TO_ADDR
8691: LD_INT 4
8693: PUSH
8694: FOR_TO
8695: IFFALSE 8738
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8697: LD_INT 0
8699: PPUSH
8700: LD_INT 3
8702: PPUSH
8703: LD_EXP 38
8707: PPUSH
8708: CALL_OW 380
// un := CreateHuman ;
8712: LD_ADDR_VAR 0 2
8716: PUSH
8717: CALL_OW 44
8721: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8722: LD_VAR 0 2
8726: PPUSH
8727: LD_VAR 0 8
8731: PPUSH
8732: CALL_OW 52
// end ;
8736: GO 8694
8738: POP
8739: POP
// for i = 1 to 3 do
8740: LD_ADDR_VAR 0 3
8744: PUSH
8745: DOUBLE
8746: LD_INT 1
8748: DEC
8749: ST_TO_ADDR
8750: LD_INT 3
8752: PUSH
8753: FOR_TO
8754: IFFALSE 8797
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8756: LD_INT 0
8758: PPUSH
8759: LD_INT 2
8761: PPUSH
8762: LD_EXP 38
8766: PPUSH
8767: CALL_OW 380
// un := CreateHuman ;
8771: LD_ADDR_VAR 0 2
8775: PUSH
8776: CALL_OW 44
8780: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8781: LD_VAR 0 2
8785: PPUSH
8786: LD_VAR 0 6
8790: PPUSH
8791: CALL_OW 52
// end ;
8795: GO 8753
8797: POP
8798: POP
// for i = 1 to 3 do
8799: LD_ADDR_VAR 0 3
8803: PUSH
8804: DOUBLE
8805: LD_INT 1
8807: DEC
8808: ST_TO_ADDR
8809: LD_INT 3
8811: PUSH
8812: FOR_TO
8813: IFFALSE 8923
// begin vc_chassis := ar_half_tracked ;
8815: LD_ADDR_OWVAR 37
8819: PUSH
8820: LD_INT 14
8822: ST_TO_ADDR
// vc_engine := engine_siberite ;
8823: LD_ADDR_OWVAR 39
8827: PUSH
8828: LD_INT 3
8830: ST_TO_ADDR
// vc_control := control_manual ;
8831: LD_ADDR_OWVAR 38
8835: PUSH
8836: LD_INT 1
8838: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8839: LD_ADDR_OWVAR 40
8843: PUSH
8844: LD_INT 31
8846: ST_TO_ADDR
// veh := CreateVehicle ;
8847: LD_ADDR_VAR 0 5
8851: PUSH
8852: CALL_OW 45
8856: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8857: LD_VAR 0 5
8861: PPUSH
8862: LD_INT 212
8864: PPUSH
8865: LD_INT 135
8867: PPUSH
8868: LD_INT 5
8870: PPUSH
8871: LD_INT 0
8873: PPUSH
8874: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8878: LD_INT 0
8880: PPUSH
8881: LD_INT 3
8883: PPUSH
8884: LD_EXP 38
8888: PUSH
8889: LD_INT 1
8891: PLUS
8892: PPUSH
8893: CALL_OW 380
// un := CreateHuman ;
8897: LD_ADDR_VAR 0 2
8901: PUSH
8902: CALL_OW 44
8906: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_VAR 0 5
8916: PPUSH
8917: CALL_OW 52
// end ;
8921: GO 8812
8923: POP
8924: POP
// PrepareSoldier ( false , 8 ) ;
8925: LD_INT 0
8927: PPUSH
8928: LD_INT 8
8930: PPUSH
8931: CALL_OW 381
// hc_class := class_sniper ;
8935: LD_ADDR_OWVAR 28
8939: PUSH
8940: LD_INT 5
8942: ST_TO_ADDR
// un := CreateHuman ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: CALL_OW 44
8952: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8953: LD_VAR 0 2
8957: PPUSH
8958: LD_INT 4
8960: PPUSH
8961: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 136
8972: PPUSH
8973: LD_INT 92
8975: PPUSH
8976: CALL_OW 428
8980: PPUSH
8981: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8985: LD_INT 198
8987: PPUSH
8988: LD_INT 94
8990: PPUSH
8991: LD_INT 8
8993: PPUSH
8994: LD_INT 10
8996: PPUSH
8997: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
9001: LD_INT 167
9003: PPUSH
9004: LD_INT 130
9006: PPUSH
9007: LD_INT 8
9009: PPUSH
9010: LD_INT 10
9012: PPUSH
9013: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
9017: LD_ADDR_VAR 0 4
9021: PUSH
9022: LD_INT 24
9024: PPUSH
9025: LD_INT 0
9027: PPUSH
9028: CALL_OW 517
9032: ST_TO_ADDR
// legion_mines := [ ] ;
9033: LD_ADDR_EXP 39
9037: PUSH
9038: EMPTY
9039: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
9040: LD_ADDR_VAR 0 3
9044: PUSH
9045: DOUBLE
9046: LD_INT 1
9048: DEC
9049: ST_TO_ADDR
9050: LD_VAR 0 4
9054: PUSH
9055: LD_INT 1
9057: ARRAY
9058: PUSH
9059: FOR_TO
9060: IFFALSE 9162
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
9062: LD_VAR 0 4
9066: PUSH
9067: LD_INT 1
9069: ARRAY
9070: PUSH
9071: LD_VAR 0 3
9075: ARRAY
9076: PPUSH
9077: LD_VAR 0 4
9081: PUSH
9082: LD_INT 2
9084: ARRAY
9085: PUSH
9086: LD_VAR 0 3
9090: ARRAY
9091: PPUSH
9092: LD_INT 8
9094: PPUSH
9095: LD_INT 0
9097: PPUSH
9098: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9102: LD_ADDR_EXP 39
9106: PUSH
9107: LD_EXP 39
9111: PPUSH
9112: LD_EXP 39
9116: PUSH
9117: LD_INT 1
9119: PLUS
9120: PPUSH
9121: LD_VAR 0 4
9125: PUSH
9126: LD_INT 1
9128: ARRAY
9129: PUSH
9130: LD_VAR 0 3
9134: ARRAY
9135: PUSH
9136: LD_VAR 0 4
9140: PUSH
9141: LD_INT 2
9143: ARRAY
9144: PUSH
9145: LD_VAR 0 3
9149: ARRAY
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PPUSH
9155: CALL_OW 1
9159: ST_TO_ADDR
// end ;
9160: GO 9059
9162: POP
9163: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9164: LD_ADDR_EXP 41
9168: PUSH
9169: LD_INT 13
9171: PUSH
9172: LD_INT 3
9174: PUSH
9175: LD_INT 2
9177: PUSH
9178: LD_INT 32
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: ST_TO_ADDR
// end ;
9187: LD_VAR 0 1
9191: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9192: LD_EXP 39
9196: IFFALSE 9219
9198: PUSH
9199: LD_INT 24
9201: PPUSH
9202: LD_INT 22
9204: PUSH
9205: LD_OWVAR 2
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PPUSH
9214: CALL_OW 70
9218: AND
9219: IFFALSE 9386
9221: GO 9223
9223: DISABLE
9224: LD_INT 0
9226: PPUSH
9227: PPUSH
// begin enable ;
9228: ENABLE
// for i := legion_mines downto 1 do
9229: LD_ADDR_VAR 0 1
9233: PUSH
9234: DOUBLE
9235: LD_EXP 39
9239: INC
9240: ST_TO_ADDR
9241: LD_INT 1
9243: PUSH
9244: FOR_DOWNTO
9245: IFFALSE 9384
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9247: LD_ADDR_VAR 0 2
9251: PUSH
9252: LD_EXP 39
9256: PUSH
9257: LD_VAR 0 1
9261: ARRAY
9262: PUSH
9263: LD_INT 1
9265: ARRAY
9266: PPUSH
9267: LD_EXP 39
9271: PUSH
9272: LD_VAR 0 1
9276: ARRAY
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PPUSH
9282: CALL_OW 428
9286: ST_TO_ADDR
// if un then
9287: LD_VAR 0 2
9291: IFFALSE 9382
// if GetSide ( un ) = legion_enemy then
9293: LD_VAR 0 2
9297: PPUSH
9298: CALL_OW 255
9302: PUSH
9303: LD_EXP 42
9307: EQUAL
9308: IFFALSE 9382
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9310: LD_EXP 39
9314: PUSH
9315: LD_VAR 0 1
9319: ARRAY
9320: PUSH
9321: LD_INT 1
9323: ARRAY
9324: PPUSH
9325: LD_EXP 39
9329: PUSH
9330: LD_VAR 0 1
9334: ARRAY
9335: PUSH
9336: LD_INT 2
9338: ARRAY
9339: PPUSH
9340: LD_INT 8
9342: PPUSH
9343: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9347: LD_ADDR_EXP 39
9351: PUSH
9352: LD_EXP 39
9356: PPUSH
9357: LD_VAR 0 1
9361: PPUSH
9362: CALL_OW 3
9366: ST_TO_ADDR
// if not mine_vulc then
9367: LD_EXP 13
9371: NOT
9372: IFFALSE 9382
// mine_vulc := true ;
9374: LD_ADDR_EXP 13
9378: PUSH
9379: LD_INT 1
9381: ST_TO_ADDR
// end ; end ;
9382: GO 9244
9384: POP
9385: POP
// end ;
9386: PPOPN 2
9388: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9389: LD_OWVAR 1
9393: PUSH
9394: LD_INT 52500
9396: PUSH
9397: LD_INT 46200
9399: PUSH
9400: LD_INT 42000
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: LD_OWVAR 67
9412: ARRAY
9413: GREATEREQUAL
9414: IFFALSE 9594
9416: GO 9418
9418: DISABLE
9419: LD_INT 0
9421: PPUSH
9422: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_INT 1
9430: PPUSH
9431: CALL_OW 469
9435: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9436: LD_VAR 0 1
9440: PUSH
9441: LD_INT 1
9443: ARRAY
9444: PUSH
9445: LD_INT 112
9447: EQUAL
9448: IFFALSE 9464
9450: PUSH
9451: LD_VAR 0 1
9455: PUSH
9456: LD_INT 2
9458: ARRAY
9459: PUSH
9460: LD_INT 67
9462: EQUAL
9463: AND
9464: IFFALSE 9594
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9466: LD_ADDR_VAR 0 2
9470: PUSH
9471: LD_INT 22
9473: PUSH
9474: LD_INT 8
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 25
9483: PUSH
9484: LD_INT 2
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: ST_TO_ADDR
// if not un then
9500: LD_VAR 0 2
9504: NOT
9505: IFFALSE 9509
// exit ;
9507: GO 9594
// un := un [ 1 ] ;
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: LD_VAR 0 2
9518: PUSH
9519: LD_INT 1
9521: ARRAY
9522: ST_TO_ADDR
// if IsInUnit ( un ) then
9523: LD_VAR 0 2
9527: PPUSH
9528: CALL_OW 310
9532: IFFALSE 9543
// ComExitBuilding ( un ) ;
9534: LD_VAR 0 2
9538: PPUSH
9539: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9543: LD_VAR 0 2
9547: PPUSH
9548: LD_VAR 0 1
9552: PUSH
9553: LD_INT 1
9555: ARRAY
9556: PPUSH
9557: LD_VAR 0 1
9561: PUSH
9562: LD_INT 2
9564: ARRAY
9565: PPUSH
9566: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9570: LD_VAR 0 2
9574: PPUSH
9575: LD_INT 207
9577: PPUSH
9578: LD_INT 123
9580: PPUSH
9581: CALL_OW 171
// AddComUnload ( un ) ;
9585: LD_VAR 0 2
9589: PPUSH
9590: CALL_OW 219
// end ; end ;
9594: PPOPN 2
9596: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9597: LD_INT 22
9599: PUSH
9600: LD_INT 8
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 69
9611: PUSH
9612: LD_INT 0
9614: GREATER
9615: IFFALSE 11209
9617: GO 9619
9619: DISABLE
9620: LD_INT 0
9622: PPUSH
9623: PPUSH
9624: PPUSH
9625: PPUSH
9626: PPUSH
9627: PPUSH
9628: PPUSH
9629: PPUSH
9630: PPUSH
9631: PPUSH
9632: PPUSH
9633: PPUSH
9634: PPUSH
9635: PPUSH
9636: PPUSH
9637: PPUSH
9638: PPUSH
// begin enable ;
9639: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9640: LD_ADDR_VAR 0 8
9644: PUSH
9645: LD_INT 22
9647: PUSH
9648: LD_INT 8
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 30
9657: PUSH
9658: LD_INT 1
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PPUSH
9669: CALL_OW 69
9673: PUSH
9674: LD_INT 1
9676: ARRAY
9677: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9678: LD_ADDR_VAR 0 9
9682: PUSH
9683: LD_INT 22
9685: PUSH
9686: LD_INT 8
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 30
9695: PUSH
9696: LD_INT 3
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: PUSH
9712: LD_INT 1
9714: ARRAY
9715: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9716: LD_ADDR_VAR 0 10
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 8
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 2
9733: PUSH
9734: LD_INT 30
9736: PUSH
9737: LD_INT 6
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 30
9746: PUSH
9747: LD_INT 8
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PPUSH
9763: CALL_OW 69
9767: PUSH
9768: LD_INT 1
9770: ARRAY
9771: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9772: LD_ADDR_VAR 0 11
9776: PUSH
9777: LD_INT 22
9779: PUSH
9780: LD_INT 8
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 30
9789: PUSH
9790: LD_INT 32
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9806: LD_ADDR_VAR 0 16
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 8
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 25
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9840: LD_ADDR_VAR 0 15
9844: PUSH
9845: LD_INT 22
9847: PUSH
9848: LD_INT 8
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 25
9857: PUSH
9858: LD_INT 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PPUSH
9869: CALL_OW 69
9873: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9874: LD_ADDR_VAR 0 14
9878: PUSH
9879: LD_INT 22
9881: PUSH
9882: LD_INT 8
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 25
9891: PUSH
9892: LD_INT 3
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 69
9907: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9908: LD_ADDR_VAR 0 13
9912: PUSH
9913: LD_INT 22
9915: PUSH
9916: LD_INT 8
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 25
9925: PUSH
9926: LD_INT 4
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// if l_eng then
9942: LD_VAR 0 16
9946: IFFALSE 10366
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9948: LD_ADDR_VAR 0 5
9952: PUSH
9953: LD_INT 25
9955: PPUSH
9956: LD_INT 22
9958: PUSH
9959: LD_INT 8
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 21
9968: PUSH
9969: LD_INT 3
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 70
9984: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9985: LD_VAR 0 5
9989: PPUSH
9990: LD_INT 3
9992: PUSH
9993: LD_INT 24
9995: PUSH
9996: LD_INT 1000
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 72
10011: PUSH
10012: LD_INT 0
10014: GREATER
10015: IFFALSE 10149
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
10017: LD_ADDR_VAR 0 3
10021: PUSH
10022: LD_VAR 0 5
10026: PPUSH
10027: LD_INT 3
10029: PUSH
10030: LD_INT 24
10032: PUSH
10033: LD_INT 1000
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PPUSH
10044: CALL_OW 72
10048: ST_TO_ADDR
// for i = 1 to l_eng do
10049: LD_ADDR_VAR 0 2
10053: PUSH
10054: DOUBLE
10055: LD_INT 1
10057: DEC
10058: ST_TO_ADDR
10059: LD_VAR 0 16
10063: PUSH
10064: FOR_TO
10065: IFFALSE 10145
// if IsInUnit ( l_eng [ i ] ) then
10067: LD_VAR 0 16
10071: PUSH
10072: LD_VAR 0 2
10076: ARRAY
10077: PPUSH
10078: CALL_OW 310
10082: IFFALSE 10101
// ComExitBuilding ( l_eng [ i ] ) else
10084: LD_VAR 0 16
10088: PUSH
10089: LD_VAR 0 2
10093: ARRAY
10094: PPUSH
10095: CALL_OW 122
10099: GO 10143
// if not HasTask ( l_eng [ i ] ) then
10101: LD_VAR 0 16
10105: PUSH
10106: LD_VAR 0 2
10110: ARRAY
10111: PPUSH
10112: CALL_OW 314
10116: NOT
10117: IFFALSE 10143
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10119: LD_VAR 0 16
10123: PUSH
10124: LD_VAR 0 2
10128: ARRAY
10129: PPUSH
10130: LD_VAR 0 3
10134: PUSH
10135: LD_INT 1
10137: ARRAY
10138: PPUSH
10139: CALL_OW 130
10143: GO 10064
10145: POP
10146: POP
// end else
10147: GO 10366
// begin if legion_blist > 0 then
10149: LD_EXP 40
10153: PUSH
10154: LD_INT 0
10156: GREATER
10157: IFFALSE 10286
// begin for i = 1 to l_eng do
10159: LD_ADDR_VAR 0 2
10163: PUSH
10164: DOUBLE
10165: LD_INT 1
10167: DEC
10168: ST_TO_ADDR
10169: LD_VAR 0 16
10173: PUSH
10174: FOR_TO
10175: IFFALSE 10282
// if IsInUnit ( l_eng [ i ] ) then
10177: LD_VAR 0 16
10181: PUSH
10182: LD_VAR 0 2
10186: ARRAY
10187: PPUSH
10188: CALL_OW 310
10192: IFFALSE 10211
// ComExitBuilding ( l_eng [ i ] ) else
10194: LD_VAR 0 16
10198: PUSH
10199: LD_VAR 0 2
10203: ARRAY
10204: PPUSH
10205: CALL_OW 122
10209: GO 10280
// if not HasTask ( l_eng [ i ] ) then
10211: LD_VAR 0 16
10215: PUSH
10216: LD_VAR 0 2
10220: ARRAY
10221: PPUSH
10222: CALL_OW 314
10226: NOT
10227: IFFALSE 10280
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10229: LD_VAR 0 16
10233: PUSH
10234: LD_VAR 0 2
10238: ARRAY
10239: PPUSH
10240: LD_EXP 40
10244: PUSH
10245: LD_INT 1
10247: ARRAY
10248: PPUSH
10249: LD_EXP 40
10253: PUSH
10254: LD_INT 2
10256: ARRAY
10257: PPUSH
10258: LD_EXP 40
10262: PUSH
10263: LD_INT 3
10265: ARRAY
10266: PPUSH
10267: LD_EXP 40
10271: PUSH
10272: LD_INT 4
10274: ARRAY
10275: PPUSH
10276: CALL_OW 145
10280: GO 10174
10282: POP
10283: POP
// end else
10284: GO 10366
// for i = 1 to l_eng do
10286: LD_ADDR_VAR 0 2
10290: PUSH
10291: DOUBLE
10292: LD_INT 1
10294: DEC
10295: ST_TO_ADDR
10296: LD_VAR 0 16
10300: PUSH
10301: FOR_TO
10302: IFFALSE 10364
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10304: LD_VAR 0 16
10308: PUSH
10309: LD_VAR 0 2
10313: ARRAY
10314: PPUSH
10315: CALL_OW 310
10319: NOT
10320: IFFALSE 10340
10322: PUSH
10323: LD_VAR 0 16
10327: PUSH
10328: LD_VAR 0 2
10332: ARRAY
10333: PPUSH
10334: CALL_OW 314
10338: NOT
10339: AND
10340: IFFALSE 10362
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10342: LD_VAR 0 16
10346: PUSH
10347: LD_VAR 0 2
10351: ARRAY
10352: PPUSH
10353: LD_VAR 0 8
10357: PPUSH
10358: CALL_OW 120
10362: GO 10301
10364: POP
10365: POP
// end ; end ; if l_factory then
10366: LD_VAR 0 9
10370: IFFALSE 10776
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10372: LD_INT 22
10374: PUSH
10375: LD_INT 8
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 33
10384: PUSH
10385: LD_INT 2
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: LD_INT 3
10394: PUSH
10395: LD_INT 61
10397: PUSH
10398: EMPTY
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: LIST
10409: PPUSH
10410: CALL_OW 69
10414: PUSH
10415: LD_INT 0
10417: GREATER
10418: IFFALSE 10454
10420: PUSH
10421: LD_INT 22
10423: PUSH
10424: LD_INT 8
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 34
10433: PUSH
10434: LD_INT 31
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: PUSH
10450: LD_INT 0
10452: GREATER
10453: AND
10454: IFFALSE 10574
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10456: LD_INT 22
10458: PUSH
10459: LD_INT 8
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 33
10468: PUSH
10469: LD_INT 2
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 3
10478: PUSH
10479: LD_INT 61
10481: PUSH
10482: EMPTY
10483: LIST
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: PPUSH
10494: CALL_OW 69
10498: PUSH
10499: LD_INT 1
10501: ARRAY
10502: PPUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 8
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 34
10515: PUSH
10516: LD_INT 31
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: PUSH
10532: LD_INT 1
10534: PPUSH
10535: LD_INT 22
10537: PUSH
10538: LD_INT 8
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 34
10547: PUSH
10548: LD_INT 31
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PPUSH
10559: CALL_OW 69
10563: PPUSH
10564: CALL_OW 12
10568: ARRAY
10569: PPUSH
10570: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10574: LD_EXP 41
10578: PUSH
10579: LD_INT 0
10581: GREATER
10582: IFFALSE 10599
10584: PUSH
10585: LD_VAR 0 9
10589: PPUSH
10590: CALL_OW 461
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: AND
10599: IFFALSE 10684
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10601: LD_VAR 0 9
10605: PPUSH
10606: LD_EXP 41
10610: PUSH
10611: LD_INT 1
10613: ARRAY
10614: PPUSH
10615: LD_EXP 41
10619: PUSH
10620: LD_INT 2
10622: ARRAY
10623: PPUSH
10624: LD_EXP 41
10628: PUSH
10629: LD_INT 3
10631: ARRAY
10632: PPUSH
10633: LD_EXP 41
10637: PUSH
10638: LD_INT 4
10640: ARRAY
10641: PPUSH
10642: CALL_OW 125
// for i = 1 to 4 do
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: DOUBLE
10652: LD_INT 1
10654: DEC
10655: ST_TO_ADDR
10656: LD_INT 4
10658: PUSH
10659: FOR_TO
10660: IFFALSE 10682
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10662: LD_ADDR_EXP 41
10666: PUSH
10667: LD_EXP 41
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 3
10679: ST_TO_ADDR
10680: GO 10659
10682: POP
10683: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10684: LD_VAR 0 11
10688: PPUSH
10689: LD_INT 35
10691: PUSH
10692: LD_INT 0
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PPUSH
10699: CALL_OW 72
10703: PUSH
10704: LD_INT 0
10706: GREATER
10707: IFFALSE 10724
10709: PUSH
10710: LD_VAR 0 9
10714: PPUSH
10715: CALL_OW 461
10719: PUSH
10720: LD_INT 2
10722: EQUAL
10723: AND
10724: IFFALSE 10776
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10726: LD_VAR 0 11
10730: PPUSH
10731: LD_INT 35
10733: PUSH
10734: LD_INT 0
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 72
10745: PUSH
10746: LD_INT 1
10748: ARRAY
10749: PPUSH
10750: LD_INT 28
10752: PUSH
10753: LD_INT 27
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 1
10762: PPUSH
10763: LD_INT 2
10765: PPUSH
10766: CALL_OW 12
10770: ARRAY
10771: PPUSH
10772: CALL_OW 148
// end ; if legion_enemy > 0 then
10776: LD_EXP 42
10780: PUSH
10781: LD_INT 0
10783: GREATER
10784: IFFALSE 11067
// begin if tick mod 11 11$00 = 0 then
10786: LD_OWVAR 1
10790: PUSH
10791: LD_INT 23100
10793: MOD
10794: PUSH
10795: LD_INT 0
10797: EQUAL
10798: IFFALSE 11048
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10800: LD_ADDR_EXP 41
10804: PUSH
10805: LD_EXP 41
10809: PUSH
10810: LD_INT 13
10812: PUSH
10813: LD_INT 1
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: ADD
10824: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10825: LD_ADDR_EXP 41
10829: PUSH
10830: LD_EXP 41
10834: PUSH
10835: LD_INT 28
10837: PUSH
10838: LD_INT 27
10840: PUSH
10841: LD_INT 29
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 1
10851: PPUSH
10852: LD_INT 3
10854: PPUSH
10855: CALL_OW 12
10859: ARRAY
10860: ADD
10861: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10862: LD_ADDR_EXP 41
10866: PUSH
10867: LD_EXP 41
10871: PUSH
10872: LD_INT 13
10874: PUSH
10875: LD_INT 1
10877: PUSH
10878: LD_INT 2
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: LIST
10885: ADD
10886: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10887: LD_ADDR_EXP 41
10891: PUSH
10892: LD_EXP 41
10896: PUSH
10897: LD_INT 28
10899: PUSH
10900: LD_INT 27
10902: PUSH
10903: LD_INT 29
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: LIST
10910: PUSH
10911: LD_INT 1
10913: PPUSH
10914: LD_INT 3
10916: PPUSH
10917: CALL_OW 12
10921: ARRAY
10922: ADD
10923: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10924: LD_ADDR_EXP 41
10928: PUSH
10929: LD_EXP 41
10933: PUSH
10934: LD_INT 13
10936: PUSH
10937: LD_INT 1
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: ADD
10948: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10949: LD_ADDR_EXP 41
10953: PUSH
10954: LD_EXP 41
10958: PUSH
10959: LD_INT 28
10961: PUSH
10962: LD_INT 92
10964: PUSH
10965: LD_INT 29
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 1
10975: PPUSH
10976: LD_INT 3
10978: PPUSH
10979: CALL_OW 12
10983: ARRAY
10984: ADD
10985: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10986: LD_ADDR_EXP 41
10990: PUSH
10991: LD_EXP 41
10995: PUSH
10996: LD_INT 13
10998: PUSH
10999: LD_INT 1
11001: PUSH
11002: LD_INT 2
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: ADD
11010: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
11011: LD_ADDR_EXP 41
11015: PUSH
11016: LD_EXP 41
11020: PUSH
11021: LD_INT 28
11023: PUSH
11024: LD_INT 27
11026: PUSH
11027: LD_INT 29
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 1
11037: PPUSH
11038: LD_INT 3
11040: PPUSH
11041: CALL_OW 12
11045: ARRAY
11046: ADD
11047: ST_TO_ADDR
// end ; if legion_force >= 8 then
11048: LD_EXP 37
11052: PUSH
11053: LD_INT 8
11055: GREATEREQUAL
11056: IFFALSE 11067
// RaiseSailEvent ( event_legion_attack ) ;
11058: LD_EXP 21
11062: PPUSH
11063: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
11067: LD_INT 22
11069: PUSH
11070: LD_INT 8
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 34
11079: PUSH
11080: LD_INT 32
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: IFFALSE 11209
// begin if l_cargo = false then
11097: LD_VAR 0 17
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11141
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11107: LD_ADDR_VAR 0 17
11111: PUSH
11112: LD_INT 22
11114: PUSH
11115: LD_INT 8
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 34
11124: PUSH
11125: LD_INT 32
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 69
11140: ST_TO_ADDR
// if l_cargo then
11141: LD_VAR 0 17
11145: IFFALSE 11209
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11147: LD_ADDR_VAR 0 7
11151: PUSH
11152: LD_INT 14
11154: PPUSH
11155: CALL_OW 435
11159: ST_TO_ADDR
// if cr > 0 then
11160: LD_VAR 0 7
11164: PUSH
11165: LD_INT 0
11167: GREATER
11168: IFFALSE 11209
// if not HasTask ( l_cargo ) then
11170: LD_VAR 0 17
11174: PPUSH
11175: CALL_OW 314
11179: NOT
11180: IFFALSE 11209
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11182: LD_VAR 0 17
11186: PPUSH
11187: LD_VAR 0 7
11191: PUSH
11192: LD_INT 1
11194: ARRAY
11195: PPUSH
11196: LD_VAR 0 7
11200: PUSH
11201: LD_INT 2
11203: ARRAY
11204: PPUSH
11205: CALL_OW 117
// end ; end ; end ;
11209: PPOPN 17
11211: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11212: LD_OWVAR 67
11216: PUSH
11217: LD_INT 1
11219: GREATER
11220: IFFALSE 11425
11222: GO 11224
11224: DISABLE
11225: LD_INT 0
11227: PPUSH
11228: PPUSH
11229: PPUSH
11230: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11231: LD_INT 35
11233: PPUSH
11234: LD_INT 12635
11236: PPUSH
11237: CALL_OW 12
11241: PPUSH
11242: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11246: LD_ADDR_VAR 0 2
11250: PUSH
11251: LD_INT 22
11253: PUSH
11254: LD_INT 8
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 25
11263: PUSH
11264: LD_INT 4
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PPUSH
11275: CALL_OW 69
11279: ST_TO_ADDR
// p := 1 ;
11280: LD_ADDR_VAR 0 4
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11288: LD_ADDR_VAR 0 3
11292: PUSH
11293: LD_INT 116
11295: PUSH
11296: LD_INT 139
11298: PUSH
11299: LD_INT 69
11301: PUSH
11302: LD_INT 13
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: ST_TO_ADDR
// for i = 1 to 2 do
11311: LD_ADDR_VAR 0 1
11315: PUSH
11316: DOUBLE
11317: LD_INT 1
11319: DEC
11320: ST_TO_ADDR
11321: LD_INT 2
11323: PUSH
11324: FOR_TO
11325: IFFALSE 11423
// begin if IsInUnit ( sci [ i ] ) then
11327: LD_VAR 0 2
11331: PUSH
11332: LD_VAR 0 1
11336: ARRAY
11337: PPUSH
11338: CALL_OW 310
11342: IFFALSE 11359
// ComExitBuilding ( sci [ i ] ) ;
11344: LD_VAR 0 2
11348: PUSH
11349: LD_VAR 0 1
11353: ARRAY
11354: PPUSH
11355: CALL_OW 122
// Wait ( 0 0$03 ) ;
11359: LD_INT 105
11361: PPUSH
11362: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11366: LD_VAR 0 2
11370: PUSH
11371: LD_VAR 0 1
11375: ARRAY
11376: PPUSH
11377: LD_VAR 0 3
11381: PUSH
11382: LD_VAR 0 4
11386: ARRAY
11387: PPUSH
11388: LD_VAR 0 3
11392: PUSH
11393: LD_VAR 0 4
11397: PUSH
11398: LD_INT 1
11400: PLUS
11401: ARRAY
11402: PPUSH
11403: CALL_OW 158
// p := p + 2 ;
11407: LD_ADDR_VAR 0 4
11411: PUSH
11412: LD_VAR 0 4
11416: PUSH
11417: LD_INT 2
11419: PLUS
11420: ST_TO_ADDR
// end ;
11421: GO 11324
11423: POP
11424: POP
// end ;
11425: PPOPN 4
11427: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11428: LD_INT 14
11430: PPUSH
11431: CALL_OW 435
11435: PUSH
11436: LD_INT 20
11438: LESS
11439: IFFALSE 11466
11441: GO 11443
11443: DISABLE
// begin enable ;
11444: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11445: LD_INT 1
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: CALL_OW 12
11455: PPUSH
11456: LD_INT 14
11458: PPUSH
11459: LD_INT 1
11461: PPUSH
11462: CALL_OW 55
// end ;
11466: END
// export function LegionAttack ( ) ; var path , units ; begin
11467: LD_INT 0
11469: PPUSH
11470: PPUSH
11471: PPUSH
// units := legion_force ;
11472: LD_ADDR_VAR 0 3
11476: PUSH
11477: LD_EXP 37
11481: ST_TO_ADDR
// legion_force := [ ] ;
11482: LD_ADDR_EXP 37
11486: PUSH
11487: EMPTY
11488: ST_TO_ADDR
// case legion_enemy of 1 :
11489: LD_EXP 42
11493: PUSH
11494: LD_INT 1
11496: DOUBLE
11497: EQUAL
11498: IFTRUE 11502
11500: GO 11545
11502: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: LD_INT 174
11510: PUSH
11511: LD_INT 135
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 153
11520: PUSH
11521: LD_INT 146
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 118
11530: PUSH
11531: LD_INT 122
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: ST_TO_ADDR
11543: GO 11659
11545: LD_INT 2
11547: DOUBLE
11548: EQUAL
11549: IFTRUE 11553
11551: GO 11596
11553: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11554: LD_ADDR_VAR 0 2
11558: PUSH
11559: LD_INT 164
11561: PUSH
11562: LD_INT 73
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 130
11571: PUSH
11572: LD_INT 48
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 96
11581: PUSH
11582: LD_INT 48
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: LIST
11593: ST_TO_ADDR
11594: GO 11659
11596: LD_INT 7
11598: DOUBLE
11599: EQUAL
11600: IFTRUE 11604
11602: GO 11658
11604: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] , [ 107 , 126 ] ] ; end ;
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: LD_INT 174
11612: PUSH
11613: LD_INT 135
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 153
11622: PUSH
11623: LD_INT 146
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 118
11632: PUSH
11633: LD_INT 122
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 107
11642: PUSH
11643: LD_INT 126
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: ST_TO_ADDR
11656: GO 11659
11658: POP
// repeat wait ( 0 0$1 ) ;
11659: LD_INT 35
11661: PPUSH
11662: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11666: LD_VAR 0 3
11670: PPUSH
11671: LD_VAR 0 2
11675: PPUSH
11676: CALL 83033 0 2
11680: NOT
11681: IFFALSE 11659
// end ; end_of_file
11683: LD_VAR 0 1
11687: RET
// export function Action ; var un , gamemode , speaker ; begin
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
11692: PPUSH
11693: PPUSH
// if debug then
11694: LD_EXP 15
11698: IFFALSE 11725
// begin Difficulty := 2 ;
11700: LD_ADDR_OWVAR 67
11704: PUSH
11705: LD_INT 2
11707: ST_TO_ADDR
// gamemode := 3 ;
11708: LD_ADDR_VAR 0 3
11712: PUSH
11713: LD_INT 3
11715: ST_TO_ADDR
// FogOff ( 7 ) ;
11716: LD_INT 7
11718: PPUSH
11719: CALL_OW 344
// end else
11723: GO 11751
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11725: LD_ADDR_OWVAR 67
11729: PUSH
11730: LD_INT 0
11732: PPUSH
11733: CALL_OW 426
11737: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 1
11745: PPUSH
11746: CALL_OW 426
11750: ST_TO_ADDR
// end ; if gamemode = 1 then
11751: LD_VAR 0 3
11755: PUSH
11756: LD_INT 1
11758: EQUAL
11759: IFFALSE 11783
// begin your_side := 1 ;
11761: LD_ADDR_OWVAR 2
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// legion_enemy := 1 ;
11769: LD_ADDR_EXP 42
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// PrepareAmerican ;
11777: CALL 261 0 0
// end else
11781: GO 11835
// if gamemode = 2 then
11783: LD_VAR 0 3
11787: PUSH
11788: LD_INT 2
11790: EQUAL
11791: IFFALSE 11815
// begin your_side := 2 ;
11793: LD_ADDR_OWVAR 2
11797: PUSH
11798: LD_INT 2
11800: ST_TO_ADDR
// legion_enemy := 2 ;
11801: LD_ADDR_EXP 42
11805: PUSH
11806: LD_INT 2
11808: ST_TO_ADDR
// PrepareArabian ;
11809: CALL 19134 0 0
// end else
11813: GO 11835
// begin your_side := 7 ;
11815: LD_ADDR_OWVAR 2
11819: PUSH
11820: LD_INT 7
11822: ST_TO_ADDR
// legion_enemy := 7 ;
11823: LD_ADDR_EXP 42
11827: PUSH
11828: LD_INT 7
11830: ST_TO_ADDR
// PrepareAlliance ;
11831: CALL 16274 0 0
// end ; if your_side = 1 then
11835: LD_OWVAR 2
11839: PUSH
11840: LD_INT 1
11842: EQUAL
11843: IFFALSE 12431
// begin Query ( QVul4 ) ;
11845: LD_STRING QVul4
11847: PPUSH
11848: CALL_OW 97
// InGameOn ;
11852: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11856: LD_INT 8
11858: PPUSH
11859: LD_INT 5
11861: PPUSH
11862: LD_INT 1
11864: PPUSH
11865: LD_INT 12
11867: PPUSH
11868: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11872: LD_INT 8
11874: PPUSH
11875: LD_INT 5
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11885: LD_INT 98
11887: PPUSH
11888: LD_INT 148
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: LD_INT 2
11896: PPUSH
11897: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11901: LD_INT 98
11903: PPUSH
11904: LD_INT 148
11906: PPUSH
11907: LD_INT 1
11909: PPUSH
11910: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11914: LD_INT 8
11916: PPUSH
11917: LD_INT 5
11919: PPUSH
11920: CALL_OW 86
// uc_side := 4 ;
11924: LD_ADDR_OWVAR 20
11928: PUSH
11929: LD_INT 4
11931: ST_TO_ADDR
// uc_nation := 1 ;
11932: LD_ADDR_OWVAR 21
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// hc_importance := 0 ;
11940: LD_ADDR_OWVAR 32
11944: PUSH
11945: LD_INT 0
11947: ST_TO_ADDR
// hc_name :=  ;
11948: LD_ADDR_OWVAR 26
11952: PUSH
11953: LD_STRING 
11955: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11956: LD_INT 1
11958: PPUSH
11959: LD_INT 3
11961: PPUSH
11962: LD_EXP 26
11966: PPUSH
11967: CALL_OW 380
// un := CreateHuman ;
11971: LD_ADDR_VAR 0 2
11975: PUSH
11976: CALL_OW 44
11980: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11981: LD_VAR 0 2
11985: PPUSH
11986: LD_INT 19
11988: PPUSH
11989: LD_INT 23
11991: PPUSH
11992: LD_INT 0
11994: PPUSH
11995: CALL_OW 48
// hc_name := Stuart Carey ;
11999: LD_ADDR_OWVAR 26
12003: PUSH
12004: LD_STRING Stuart Carey
12006: ST_TO_ADDR
// hc_class := 1 ;
12007: LD_ADDR_OWVAR 28
12011: PUSH
12012: LD_INT 1
12014: ST_TO_ADDR
// hc_gallery := vulcano ;
12015: LD_ADDR_OWVAR 33
12019: PUSH
12020: LD_STRING vulcano
12022: ST_TO_ADDR
// hc_face_number := 1 ;
12023: LD_ADDR_OWVAR 34
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// us_guy := CreateHuman ;
12031: LD_ADDR_EXP 27
12035: PUSH
12036: CALL_OW 44
12040: ST_TO_ADDR
// InitHc ;
12041: CALL_OW 19
// if rand ( 0 , 1 ) then
12045: LD_INT 0
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: CALL_OW 12
12055: IFFALSE 12072
// PrepareHuman ( sex_male , 3 , 6 ) else
12057: LD_INT 1
12059: PPUSH
12060: LD_INT 3
12062: PPUSH
12063: LD_INT 6
12065: PPUSH
12066: CALL_OW 380
12070: GO 12085
// PrepareHuman ( sex_female , 4 , 8 ) ;
12072: LD_INT 2
12074: PPUSH
12075: LD_INT 4
12077: PPUSH
12078: LD_INT 8
12080: PPUSH
12081: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
12085: LD_VAR 0 2
12089: PPUSH
12090: LD_INT 12
12092: PPUSH
12093: LD_INT 10
12095: PPUSH
12096: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
12100: LD_EXP 24
12104: PPUSH
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
12114: LD_INT 105
12116: PPUSH
12117: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
12121: LD_INT 4
12123: PPUSH
12124: LD_EXP 24
12128: PPUSH
12129: CALL_OW 292
12133: IFTRUE 12152
12135: PUSH
12136: LD_VAR 0 2
12140: PPUSH
12141: LD_INT 12
12143: PPUSH
12144: LD_INT 10
12146: PPUSH
12147: CALL_OW 307
12151: OR
12152: IFFALSE 12114
// ComTurnUnit ( un , us_commander ) ;
12154: LD_VAR 0 2
12158: PPUSH
12159: LD_EXP 24
12163: PPUSH
12164: CALL_OW 119
// if GetSex ( un ) = sex_male then
12168: LD_VAR 0 2
12172: PPUSH
12173: CALL_OW 258
12177: PUSH
12178: LD_INT 1
12180: EQUAL
12181: IFFALSE 12264
// begin Say ( un , VD-un1 ) ;
12183: LD_VAR 0 2
12187: PPUSH
12188: LD_STRING VD-un1
12190: PPUSH
12191: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12195: LD_EXP 24
12199: PPUSH
12200: LD_STRING VDc-1
12202: PPUSH
12203: CALL_OW 88
// Say ( un , VD-un2 ) ;
12207: LD_VAR 0 2
12211: PPUSH
12212: LD_STRING VD-un2
12214: PPUSH
12215: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12219: LD_EXP 24
12223: PPUSH
12224: LD_STRING VDc-2
12226: PPUSH
12227: CALL_OW 88
// Say ( un , VD-un3 ) ;
12231: LD_VAR 0 2
12235: PPUSH
12236: LD_STRING VD-un3
12238: PPUSH
12239: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12243: LD_INT 7
12245: PPUSH
12246: CALL_OW 67
// Say ( un , VD-un4 ) ;
12250: LD_VAR 0 2
12254: PPUSH
12255: LD_STRING VD-un4
12257: PPUSH
12258: CALL_OW 88
// end else
12262: GO 12343
// begin Say ( un , VD-unf1 ) ;
12264: LD_VAR 0 2
12268: PPUSH
12269: LD_STRING VD-unf1
12271: PPUSH
12272: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12276: LD_EXP 24
12280: PPUSH
12281: LD_STRING VDc-1
12283: PPUSH
12284: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12288: LD_VAR 0 2
12292: PPUSH
12293: LD_STRING VD-unf2
12295: PPUSH
12296: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12300: LD_EXP 24
12304: PPUSH
12305: LD_STRING VDc-2
12307: PPUSH
12308: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12312: LD_VAR 0 2
12316: PPUSH
12317: LD_STRING VD-unf3
12319: PPUSH
12320: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12324: LD_INT 7
12326: PPUSH
12327: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12331: LD_VAR 0 2
12335: PPUSH
12336: LD_STRING VD-unf4
12338: PPUSH
12339: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12343: LD_VAR 0 2
12347: PPUSH
12348: LD_INT 2
12350: PPUSH
12351: LD_INT 2
12353: PPUSH
12354: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12358: LD_EXP 24
12362: PPUSH
12363: LD_STRING VDc-3
12365: PPUSH
12366: CALL_OW 88
// InGameOff ;
12370: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12374: LD_STRING CVulc1
12376: PPUSH
12377: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12381: LD_INT 35
12383: PPUSH
12384: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12388: LD_VAR 0 2
12392: PPUSH
12393: CALL_OW 250
12397: PUSH
12398: LD_INT 2
12400: EQUAL
12401: IFFALSE 12418
12403: PUSH
12404: LD_VAR 0 2
12408: PPUSH
12409: CALL_OW 251
12413: PUSH
12414: LD_INT 2
12416: EQUAL
12417: AND
12418: IFFALSE 12381
// RemoveUnit ( un ) ;
12420: LD_VAR 0 2
12424: PPUSH
12425: CALL_OW 64
// end else
12429: GO 12808
// if your_side = 2 then
12431: LD_OWVAR 2
12435: PUSH
12436: LD_INT 2
12438: EQUAL
12439: IFFALSE 12655
// begin CenterNowOnUnits ( player_commander ) ;
12441: LD_EXP 11
12445: PPUSH
12446: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12450: LD_ADDR_VAR 0 4
12454: PUSH
12455: LD_INT 22
12457: PUSH
12458: LD_INT 2
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 1
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PPUSH
12479: CALL_OW 69
12483: PUSH
12484: LD_EXP 57
12488: DIFF
12489: ST_TO_ADDR
// if speaker then
12490: LD_VAR 0 4
12494: IFFALSE 12646
// begin InGameOn ;
12496: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12500: LD_EXP 57
12504: PPUSH
12505: LD_STRING VSd-1
12507: PPUSH
12508: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12512: LD_VAR 0 4
12516: PUSH
12517: LD_INT 1
12519: ARRAY
12520: PPUSH
12521: CALL_OW 258
12525: PUSH
12526: LD_INT 1
12528: EQUAL
12529: IFFALSE 12549
// Say ( speaker [ 1 ] , VAd-1 ) else
12531: LD_VAR 0 4
12535: PUSH
12536: LD_INT 1
12538: ARRAY
12539: PPUSH
12540: LD_STRING VAd-1
12542: PPUSH
12543: CALL_OW 88
12547: GO 12565
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12549: LD_VAR 0 4
12553: PUSH
12554: LD_INT 1
12556: ARRAY
12557: PPUSH
12558: LD_STRING VAfd-1
12560: PPUSH
12561: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12565: LD_EXP 57
12569: PPUSH
12570: LD_STRING VSd-2
12572: PPUSH
12573: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12577: LD_VAR 0 4
12581: PUSH
12582: LD_INT 1
12584: ARRAY
12585: PPUSH
12586: CALL_OW 258
12590: PUSH
12591: LD_INT 1
12593: EQUAL
12594: IFFALSE 12614
// Say ( speaker [ 1 ] , VAd-2 ) else
12596: LD_VAR 0 4
12600: PUSH
12601: LD_INT 1
12603: ARRAY
12604: PPUSH
12605: LD_STRING VAd-2
12607: PPUSH
12608: CALL_OW 88
12612: GO 12630
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12614: LD_VAR 0 4
12618: PUSH
12619: LD_INT 1
12621: ARRAY
12622: PPUSH
12623: LD_STRING VAfd-2
12625: PPUSH
12626: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12630: LD_EXP 57
12634: PPUSH
12635: LD_STRING VSd-3
12637: PPUSH
12638: CALL_OW 88
// InGameOff ;
12642: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12646: LD_STRING CVulc5
12648: PPUSH
12649: CALL_OW 337
// end else
12653: GO 12808
// if your_side = 7 then
12655: LD_OWVAR 2
12659: PUSH
12660: LD_INT 7
12662: EQUAL
12663: IFFALSE 12808
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12665: LD_ADDR_VAR 0 4
12669: PUSH
12670: LD_INT 22
12672: PUSH
12673: LD_INT 7
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 21
12682: PUSH
12683: LD_INT 1
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PPUSH
12694: CALL_OW 69
12698: PUSH
12699: LD_EXP 43
12703: DIFF
12704: ST_TO_ADDR
// if speaker then
12705: LD_VAR 0 4
12709: IFFALSE 12801
// begin CenterNowOnUnits ( al_commander ) ;
12711: LD_EXP 43
12715: PPUSH
12716: CALL_OW 87
// InGameOn ;
12720: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12724: LD_EXP 43
12728: PPUSH
12729: LD_STRING VPd-1
12731: PPUSH
12732: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12736: LD_VAR 0 4
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PPUSH
12745: CALL_OW 258
12749: IFFALSE 12769
// Say ( speaker [ 1 ] , VPpd-1 ) else
12751: LD_VAR 0 4
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: PPUSH
12760: LD_STRING VPpd-1
12762: PPUSH
12763: CALL_OW 88
12767: GO 12785
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12769: LD_VAR 0 4
12773: PUSH
12774: LD_INT 1
12776: ARRAY
12777: PPUSH
12778: LD_STRING VPpdf-1
12780: PPUSH
12781: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12785: LD_EXP 43
12789: PPUSH
12790: LD_STRING VPd-2
12792: PPUSH
12793: CALL_OW 88
// InGameOff ;
12797: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12801: LD_STRING CVulc7
12803: PPUSH
12804: CALL_OW 337
// end ; SaveForQuickRestart ;
12808: CALL_OW 22
// end ;
12812: LD_VAR 0 1
12816: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12817: LD_INT 22
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 30
12829: PUSH
12830: LD_INT 3
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PPUSH
12841: CALL_OW 69
12845: IFFALSE 12889
12847: GO 12849
12849: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12850: LD_STRING CVulc6
12852: PPUSH
12853: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12857: LD_INT 52500
12859: PUSH
12860: LD_INT 47250
12862: PUSH
12863: LD_INT 42000
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: PUSH
12871: LD_OWVAR 67
12875: ARRAY
12876: PPUSH
12877: CALL_OW 67
// ru_can_attack := true ;
12881: LD_ADDR_EXP 3
12885: PUSH
12886: LD_INT 1
12888: ST_TO_ADDR
// end ;
12889: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12890: LD_INT 50
12892: PPUSH
12893: CALL_OW 255
12897: PUSH
12898: LD_INT 1
12900: EQUAL
12901: IFTRUE 12951
12903: PUSH
12904: LD_INT 22
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 2
12916: PUSH
12917: LD_INT 30
12919: PUSH
12920: LD_INT 3
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 30
12929: PUSH
12930: LD_INT 1
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PPUSH
12946: CALL_OW 69
12950: OR
12951: IFFALSE 13185
12953: GO 12955
12955: DISABLE
12956: LD_INT 0
12958: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12959: LD_STRING CVulc2
12961: PPUSH
12962: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12966: LD_ADDR_VAR 0 1
12970: PUSH
12971: LD_INT 22
12973: PUSH
12974: LD_INT 1
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 25
12983: PUSH
12984: LD_INT 2
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PPUSH
12995: CALL_OW 69
12999: PUSH
13000: LD_EXP 24
13004: DIFF
13005: ST_TO_ADDR
// DialogueOn ;
13006: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
13010: LD_INT 10
13012: PPUSH
13013: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
13017: LD_VAR 0 1
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PPUSH
13026: CALL_OW 258
13030: PUSH
13031: LD_INT 1
13033: EQUAL
13034: IFFALSE 13054
// Say ( speaker [ 1 ] , VDb-1 ) else
13036: LD_VAR 0 1
13040: PUSH
13041: LD_INT 1
13043: ARRAY
13044: PPUSH
13045: LD_STRING VDb-1
13047: PPUSH
13048: CALL_OW 88
13052: GO 13070
// Say ( speaker [ 1 ] , VDbf-1 ) ;
13054: LD_VAR 0 1
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: LD_STRING VDbf-1
13065: PPUSH
13066: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
13070: LD_INT 10
13072: PPUSH
13073: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
13077: LD_VAR 0 1
13081: PUSH
13082: LD_INT 1
13084: ARRAY
13085: PPUSH
13086: CALL_OW 258
13090: PUSH
13091: LD_INT 1
13093: EQUAL
13094: IFFALSE 13114
// Say ( speaker [ 1 ] , VDb-2 ) else
13096: LD_VAR 0 1
13100: PUSH
13101: LD_INT 1
13103: ARRAY
13104: PPUSH
13105: LD_STRING VDb-2
13107: PPUSH
13108: CALL_OW 88
13112: GO 13130
// Say ( speaker [ 1 ] , VDbf-2 ) ;
13114: LD_VAR 0 1
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: PPUSH
13123: LD_STRING VDbf-2
13125: PPUSH
13126: CALL_OW 88
// DWait ( 0 0$01 ) ;
13130: LD_INT 35
13132: PPUSH
13133: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13137: LD_EXP 24
13141: PPUSH
13142: LD_STRING VDb-com1
13144: PPUSH
13145: CALL_OW 88
// DialogueOff ;
13149: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13153: LD_INT 44100
13155: PUSH
13156: LD_INT 36750
13158: PUSH
13159: LD_INT 31500
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: PUSH
13167: LD_OWVAR 67
13171: ARRAY
13172: PPUSH
13173: CALL_OW 67
// ru_can_attack := true ;
13177: LD_ADDR_EXP 3
13181: PUSH
13182: LD_INT 1
13184: ST_TO_ADDR
// end ;
13185: PPOPN 1
13187: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13188: LD_INT 22
13190: PUSH
13191: LD_INT 7
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 30
13200: PUSH
13201: LD_INT 3
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PPUSH
13212: CALL_OW 69
13216: IFFALSE 13253
13218: GO 13220
13220: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13221: LD_INT 42000
13223: PUSH
13224: LD_INT 34650
13226: PUSH
13227: LD_INT 29400
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: PUSH
13235: LD_OWVAR 67
13239: ARRAY
13240: PPUSH
13241: CALL_OW 67
// ru_can_attack := true ;
13245: LD_ADDR_EXP 3
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// end ;
13253: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13254: LD_INT 58
13256: PPUSH
13257: CALL_OW 255
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: IFFALSE 13459
13267: GO 13269
13269: DISABLE
13270: LD_INT 0
13272: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13273: LD_ADDR_VAR 0 1
13277: PUSH
13278: LD_INT 22
13280: PUSH
13281: LD_INT 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 25
13290: PUSH
13291: LD_INT 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 69
13306: ST_TO_ADDR
// DialogueOn ;
13307: CALL_OW 6
// if speaker then
13311: LD_VAR 0 1
13315: IFFALSE 13370
// if GetSex ( speaker [ 1 ] ) = sex_male then
13317: LD_VAR 0 1
13321: PUSH
13322: LD_INT 1
13324: ARRAY
13325: PPUSH
13326: CALL_OW 258
13330: PUSH
13331: LD_INT 1
13333: EQUAL
13334: IFFALSE 13354
// Say ( speaker [ 1 ] , VDe-1 ) else
13336: LD_VAR 0 1
13340: PUSH
13341: LD_INT 1
13343: ARRAY
13344: PPUSH
13345: LD_STRING VDe-1
13347: PPUSH
13348: CALL_OW 88
13352: GO 13370
// Say ( speaker [ 1 ] , VDef-1 ) ;
13354: LD_VAR 0 1
13358: PUSH
13359: LD_INT 1
13361: ARRAY
13362: PPUSH
13363: LD_STRING VDef-1
13365: PPUSH
13366: CALL_OW 88
// Query ( SibNote ) ;
13370: LD_STRING SibNote
13372: PPUSH
13373: CALL_OW 97
// if speaker then
13377: LD_VAR 0 1
13381: IFFALSE 13436
// if GetSex ( speaker [ 1 ] ) = sex_male then
13383: LD_VAR 0 1
13387: PUSH
13388: LD_INT 1
13390: ARRAY
13391: PPUSH
13392: CALL_OW 258
13396: PUSH
13397: LD_INT 1
13399: EQUAL
13400: IFFALSE 13420
// Say ( speaker [ 1 ] , VDe-2 ) else
13402: LD_VAR 0 1
13406: PUSH
13407: LD_INT 1
13409: ARRAY
13410: PPUSH
13411: LD_STRING VDe-2
13413: PPUSH
13414: CALL_OW 88
13418: GO 13436
// Say ( speaker [ 1 ] , VDef-2 ) ;
13420: LD_VAR 0 1
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: LD_STRING VDef-2
13431: PPUSH
13432: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13436: LD_EXP 24
13440: PPUSH
13441: LD_STRING VDc-4
13443: PPUSH
13444: CALL_OW 88
// DialogueOff ;
13448: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13452: LD_STRING CVulc3
13454: PPUSH
13455: CALL_OW 337
// end ;
13459: PPOPN 1
13461: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13462: LD_OWVAR 2
13466: PUSH
13467: LD_INT 1
13469: EQUAL
13470: IFFALSE 13506
13472: PUSH
13473: LD_INT 22
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 30
13485: PUSH
13486: LD_INT 3
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 69
13501: PUSH
13502: LD_INT 0
13504: GREATER
13505: AND
13506: IFFALSE 13952
13508: GO 13510
13510: DISABLE
13511: LD_INT 0
13513: PPUSH
13514: PPUSH
13515: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13516: LD_INT 245
13518: PPUSH
13519: LD_INT 1295
13521: PPUSH
13522: CALL_OW 12
13526: PPUSH
13527: CALL_OW 67
// DialogueOn ;
13531: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13535: LD_EXP 27
13539: PPUSH
13540: LD_STRING VDG-1
13542: PPUSH
13543: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13547: LD_EXP 24
13551: PPUSH
13552: LD_STRING VDc-5
13554: PPUSH
13555: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13559: LD_EXP 27
13563: PPUSH
13564: LD_STRING VDG-2
13566: PPUSH
13567: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13571: LD_EXP 24
13575: PPUSH
13576: LD_STRING VDc-6
13578: PPUSH
13579: CALL_OW 88
// Say ( us_commander , VDc-6a ) ;
13583: LD_EXP 24
13587: PPUSH
13588: LD_STRING VDc-6a
13590: PPUSH
13591: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13595: LD_EXP 27
13599: PPUSH
13600: LD_STRING VDG-3
13602: PPUSH
13603: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13607: LD_EXP 24
13611: PPUSH
13612: LD_STRING VDc-7
13614: PPUSH
13615: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13619: LD_EXP 27
13623: PPUSH
13624: LD_STRING VDG-4
13626: PPUSH
13627: CALL_OW 94
// DialogueOff ;
13631: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13635: LD_STRING CVulc4
13637: PPUSH
13638: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13642: LD_INT 18900
13644: PUSH
13645: LD_INT 21000
13647: PUSH
13648: LD_INT 23100
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: LD_OWVAR 67
13660: ARRAY
13661: PPUSH
13662: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13666: LD_ADDR_VAR 0 1
13670: PUSH
13671: DOUBLE
13672: LD_INT 1
13674: DEC
13675: ST_TO_ADDR
13676: LD_INT 4
13678: PUSH
13679: LD_INT 5
13681: PUSH
13682: LD_INT 6
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: LIST
13689: PUSH
13690: LD_OWVAR 67
13694: ARRAY
13695: PUSH
13696: FOR_TO
13697: IFFALSE 13941
// begin uc_side := 1 ;
13699: LD_ADDR_OWVAR 20
13703: PUSH
13704: LD_INT 1
13706: ST_TO_ADDR
// uc_nation := 1 ;
13707: LD_ADDR_OWVAR 21
13711: PUSH
13712: LD_INT 1
13714: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13715: LD_INT 0
13717: PPUSH
13718: LD_INT 1
13720: PPUSH
13721: LD_INT 4
13723: PPUSH
13724: CALL_OW 12
13728: PPUSH
13729: LD_EXP 26
13733: PPUSH
13734: CALL_OW 380
// un := CreateHuman ;
13738: LD_ADDR_VAR 0 2
13742: PUSH
13743: CALL_OW 44
13747: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13748: LD_VAR 0 2
13752: PPUSH
13753: LD_INT 2
13755: PPUSH
13756: CALL_OW 233
// if GetClass ( un ) = 3 then
13760: LD_VAR 0 2
13764: PPUSH
13765: CALL_OW 257
13769: PUSH
13770: LD_INT 3
13772: EQUAL
13773: IFFALSE 13924
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13775: LD_ADDR_OWVAR 37
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: LD_INT 3
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_VAR 0 1
13794: PUSH
13795: LD_INT 2
13797: MOD
13798: ARRAY
13799: ST_TO_ADDR
// vc_engine := engine_combustion ;
13800: LD_ADDR_OWVAR 39
13804: PUSH
13805: LD_INT 1
13807: ST_TO_ADDR
// vc_control := control_manual ;
13808: LD_ADDR_OWVAR 38
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13816: LD_ADDR_OWVAR 40
13820: PUSH
13821: LD_INT 9
13823: PUSH
13824: LD_INT 9
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: LD_INT 11
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 1
13841: PPUSH
13842: LD_INT 4
13844: PPUSH
13845: CALL_OW 12
13849: ARRAY
13850: ST_TO_ADDR
// veh := CreateVehicle ;
13851: LD_ADDR_VAR 0 3
13855: PUSH
13856: CALL_OW 45
13860: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13861: LD_VAR 0 3
13865: PPUSH
13866: LD_INT 2
13868: PPUSH
13869: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13873: LD_VAR 0 3
13877: PPUSH
13878: LD_INT 77
13880: PPUSH
13881: LD_INT 88
13883: PPUSH
13884: CALL_OW 12
13888: PPUSH
13889: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13893: LD_VAR 0 3
13897: PPUSH
13898: LD_INT 1
13900: PPUSH
13901: LD_INT 0
13903: PPUSH
13904: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13908: LD_VAR 0 2
13912: PPUSH
13913: LD_VAR 0 3
13917: PPUSH
13918: CALL_OW 52
// end else
13922: GO 13939
// PlaceUnitArea ( un , start_north , false ) ;
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_INT 1
13931: PPUSH
13932: LD_INT 0
13934: PPUSH
13935: CALL_OW 49
// end ;
13939: GO 13696
13941: POP
13942: POP
// CenterNowOnUnits ( un ) ;
13943: LD_VAR 0 2
13947: PPUSH
13948: CALL_OW 87
// end ;
13952: PPOPN 3
13954: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13955: LD_INT 21
13957: PPUSH
13958: LD_INT 22
13960: PUSH
13961: LD_OWVAR 2
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PPUSH
13970: CALL_OW 70
13974: IFFALSE 14295
13976: GO 13978
13978: DISABLE
13979: LD_INT 0
13981: PPUSH
13982: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13983: LD_ADDR_VAR 0 2
13987: PUSH
13988: LD_INT 22
13990: PUSH
13991: LD_OWVAR 2
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 2
14002: PUSH
14003: LD_INT 25
14005: PUSH
14006: LD_INT 1
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 25
14015: PUSH
14016: LD_INT 2
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 25
14025: PUSH
14026: LD_INT 3
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 25
14035: PUSH
14036: LD_INT 4
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PPUSH
14054: CALL_OW 69
14058: PUSH
14059: LD_EXP 11
14063: DIFF
14064: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
14065: LD_ADDR_VAR 0 1
14069: PUSH
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 112
14077: PPUSH
14078: LD_INT 67
14080: PPUSH
14081: CALL_OW 73
14085: ST_TO_ADDR
// if GetSide ( un ) = 7 then
14086: LD_VAR 0 1
14090: PPUSH
14091: CALL_OW 255
14095: PUSH
14096: LD_INT 7
14098: EQUAL
14099: IFFALSE 14142
// if GetSex ( un ) = sex_male then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 258
14110: PUSH
14111: LD_INT 1
14113: EQUAL
14114: IFFALSE 14130
// Say ( un , VD-find-al ) else
14116: LD_VAR 0 1
14120: PPUSH
14121: LD_STRING VD-find-al
14123: PPUSH
14124: CALL_OW 88
14128: GO 14142
// Say ( un , VD-find-al-f ) ;
14130: LD_VAR 0 1
14134: PPUSH
14135: LD_STRING VD-find-al-f
14137: PPUSH
14138: CALL_OW 88
// if GetSide ( un ) = 2 then
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 255
14151: PUSH
14152: LD_INT 2
14154: EQUAL
14155: IFFALSE 14198
// if GetSex ( un ) = sex_male then
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 258
14166: PUSH
14167: LD_INT 1
14169: EQUAL
14170: IFFALSE 14186
// Say ( un , VD-find-ar ) else
14172: LD_VAR 0 1
14176: PPUSH
14177: LD_STRING VD-find-ar
14179: PPUSH
14180: CALL_OW 88
14184: GO 14198
// Say ( un , VD-find-ar-f ) ;
14186: LD_VAR 0 1
14190: PPUSH
14191: LD_STRING VD-find-ar-f
14193: PPUSH
14194: CALL_OW 88
// if GetSide ( un ) = 1 then
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 255
14207: PUSH
14208: LD_INT 1
14210: EQUAL
14211: IFFALSE 14278
// begin if GetSex ( un ) = sex_male then
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 258
14222: PUSH
14223: LD_INT 1
14225: EQUAL
14226: IFFALSE 14254
// begin Say ( un , VD-find-us ) ;
14228: LD_VAR 0 1
14232: PPUSH
14233: LD_STRING VD-find-us
14235: PPUSH
14236: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14240: LD_VAR 0 1
14244: PPUSH
14245: LD_STRING VD-find-us2
14247: PPUSH
14248: CALL_OW 88
// end else
14252: GO 14278
// begin Say ( un , VD-find-us-f ) ;
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_STRING VD-find-us-f
14261: PPUSH
14262: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14266: LD_VAR 0 1
14270: PPUSH
14271: LD_STRING VD-find-us2-f
14273: PPUSH
14274: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14278: LD_INT 10
14280: PPUSH
14281: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14285: LD_INT 112
14287: PPUSH
14288: LD_INT 67
14290: PPUSH
14291: CALL_OW 86
// end ;
14295: PPOPN 2
14297: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14298: LD_EXP 8
14302: IFFALSE 14804
14304: GO 14306
14306: DISABLE
14307: LD_INT 0
14309: PPUSH
// begin if your_side = 1 then
14310: LD_OWVAR 2
14314: PUSH
14315: LD_INT 1
14317: EQUAL
14318: IFFALSE 14499
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14320: LD_ADDR_VAR 0 1
14324: PUSH
14325: LD_INT 22
14327: PUSH
14328: LD_INT 1
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 25
14337: PUSH
14338: LD_INT 4
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: PUSH
14354: LD_EXP 24
14358: DIFF
14359: ST_TO_ADDR
// if not speaker then
14360: LD_VAR 0 1
14364: NOT
14365: IFFALSE 14369
// exit ;
14367: GO 14804
// if GetSex ( speaker [ 1 ] ) = sex_male then
14369: LD_VAR 0 1
14373: PUSH
14374: LD_INT 1
14376: ARRAY
14377: PPUSH
14378: CALL_OW 258
14382: PUSH
14383: LD_INT 1
14385: EQUAL
14386: IFFALSE 14406
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14388: LD_VAR 0 1
14392: PUSH
14393: LD_INT 1
14395: ARRAY
14396: PPUSH
14397: LD_STRING VD-us-sci-art-1
14399: PPUSH
14400: CALL_OW 88
14404: GO 14422
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14406: LD_VAR 0 1
14410: PUSH
14411: LD_INT 1
14413: ARRAY
14414: PPUSH
14415: LD_STRING VD-us-fsci-art-1
14417: PPUSH
14418: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14422: LD_EXP 24
14426: PPUSH
14427: LD_STRING VDc-art1
14429: PPUSH
14430: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14434: LD_VAR 0 1
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: CALL_OW 258
14447: PUSH
14448: LD_INT 1
14450: EQUAL
14451: IFFALSE 14471
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14453: LD_VAR 0 1
14457: PUSH
14458: LD_INT 1
14460: ARRAY
14461: PPUSH
14462: LD_STRING VD-us-sci-art-2
14464: PPUSH
14465: CALL_OW 88
14469: GO 14487
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14471: LD_VAR 0 1
14475: PUSH
14476: LD_INT 1
14478: ARRAY
14479: PPUSH
14480: LD_STRING VD-us-fsci-art-2
14482: PPUSH
14483: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14487: LD_EXP 24
14491: PPUSH
14492: LD_STRING VDc-art2
14494: PPUSH
14495: CALL_OW 88
// end ; if your_side = 2 then
14499: LD_OWVAR 2
14503: PUSH
14504: LD_INT 2
14506: EQUAL
14507: IFFALSE 14611
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14509: LD_ADDR_VAR 0 1
14513: PUSH
14514: LD_INT 22
14516: PUSH
14517: LD_INT 2
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 25
14526: PUSH
14527: LD_INT 4
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PPUSH
14538: CALL_OW 69
14542: PUSH
14543: LD_EXP 57
14547: DIFF
14548: ST_TO_ADDR
// if not speaker then
14549: LD_VAR 0 1
14553: NOT
14554: IFFALSE 14558
// exit ;
14556: GO 14804
// if GetSex ( speaker [ 1 ] ) = sex_male then
14558: LD_VAR 0 1
14562: PUSH
14563: LD_INT 1
14565: ARRAY
14566: PPUSH
14567: CALL_OW 258
14571: PUSH
14572: LD_INT 1
14574: EQUAL
14575: IFFALSE 14595
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14577: LD_VAR 0 1
14581: PUSH
14582: LD_INT 1
14584: ARRAY
14585: PPUSH
14586: LD_STRING VD-ar-sci-art-1
14588: PPUSH
14589: CALL_OW 88
14593: GO 14611
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14595: LD_VAR 0 1
14599: PUSH
14600: LD_INT 1
14602: ARRAY
14603: PPUSH
14604: LD_STRING VD-ar-fsci-art-1
14606: PPUSH
14607: CALL_OW 88
// end ; if your_side = 7 then
14611: LD_OWVAR 2
14615: PUSH
14616: LD_INT 7
14618: EQUAL
14619: IFFALSE 14804
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14621: LD_ADDR_VAR 0 1
14625: PUSH
14626: LD_INT 22
14628: PUSH
14629: LD_INT 7
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 25
14638: PUSH
14639: LD_INT 4
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PPUSH
14650: CALL_OW 69
14654: PUSH
14655: LD_EXP 43
14659: DIFF
14660: ST_TO_ADDR
// if speaker then
14661: LD_VAR 0 1
14665: IFFALSE 14797
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14667: LD_VAR 0 1
14671: PUSH
14672: LD_INT 1
14674: ARRAY
14675: PPUSH
14676: CALL_OW 258
14680: PUSH
14681: LD_INT 1
14683: EQUAL
14684: IFFALSE 14704
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14686: LD_VAR 0 1
14690: PUSH
14691: LD_INT 1
14693: ARRAY
14694: PPUSH
14695: LD_STRING VD-al-sci-art-1
14697: PPUSH
14698: CALL_OW 88
14702: GO 14720
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14704: LD_VAR 0 1
14708: PUSH
14709: LD_INT 1
14711: ARRAY
14712: PPUSH
14713: LD_STRING VD-al-fsci-art-1
14715: PPUSH
14716: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14720: LD_EXP 43
14724: PPUSH
14725: LD_STRING VPd-art-1
14727: PPUSH
14728: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PPUSH
14741: CALL_OW 258
14745: PUSH
14746: LD_INT 1
14748: EQUAL
14749: IFFALSE 14769
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14751: LD_VAR 0 1
14755: PUSH
14756: LD_INT 1
14758: ARRAY
14759: PPUSH
14760: LD_STRING VD-al-sci-art-2
14762: PPUSH
14763: CALL_OW 88
14767: GO 14785
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: PPUSH
14778: LD_STRING VD-al-fsci-art-2
14780: PPUSH
14781: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14785: LD_EXP 43
14789: PPUSH
14790: LD_STRING VPd-art-2
14792: PPUSH
14793: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14797: LD_STRING CVulc7out
14799: PPUSH
14800: CALL_OW 337
// end ; end ;
14804: PPOPN 1
14806: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14807: LD_INT 22
14809: PUSH
14810: LD_OWVAR 2
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 101
14821: PUSH
14822: LD_INT 8
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 69
14837: IFFALSE 14980
14839: GO 14841
14841: DISABLE
14842: LD_INT 0
14844: PPUSH
// begin if your_side = 1 then
14845: LD_OWVAR 2
14849: PUSH
14850: LD_INT 1
14852: EQUAL
14853: IFFALSE 14936
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14855: LD_ADDR_VAR 0 1
14859: PUSH
14860: LD_INT 22
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: PUSH
14875: LD_EXP 24
14879: DIFF
14880: ST_TO_ADDR
// if speaker then
14881: LD_VAR 0 1
14885: IFFALSE 14936
// if GetSex ( speaker [ 1 ] ) then
14887: LD_VAR 0 1
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PPUSH
14896: CALL_OW 258
14900: IFFALSE 14920
// Say ( speaker [ 1 ] , VD-legion-us ) else
14902: LD_VAR 0 1
14906: PUSH
14907: LD_INT 1
14909: ARRAY
14910: PPUSH
14911: LD_STRING VD-legion-us
14913: PPUSH
14914: CALL_OW 88
14918: GO 14936
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14920: LD_VAR 0 1
14924: PUSH
14925: LD_INT 1
14927: ARRAY
14928: PPUSH
14929: LD_STRING VD-legion-us-f
14931: PPUSH
14932: CALL_OW 88
// end ; if your_side = 2 then
14936: LD_OWVAR 2
14940: PUSH
14941: LD_INT 2
14943: EQUAL
14944: IFFALSE 14958
// Say ( ar_commander , VD-legion-ar ) ;
14946: LD_EXP 57
14950: PPUSH
14951: LD_STRING VD-legion-ar
14953: PPUSH
14954: CALL_OW 88
// if your_side = 7 then
14958: LD_OWVAR 2
14962: PUSH
14963: LD_INT 7
14965: EQUAL
14966: IFFALSE 14980
// Say ( al_commander , VD-legion-al ) ;
14968: LD_EXP 43
14972: PPUSH
14973: LD_STRING VD-legion-al
14975: PPUSH
14976: CALL_OW 88
// end ;
14980: PPOPN 1
14982: END
// every 0 0$01 trigger mine_vulc do
14983: LD_EXP 13
14987: IFFALSE 15004
14989: GO 14991
14991: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14992: LD_EXP 11
14996: PPUSH
14997: LD_STRING VD-vulc-mines
14999: PPUSH
15000: CALL_OW 88
// end ;
15004: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and your_side <> 2 do
15005: LD_INT 22
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 21
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PPUSH
15029: CALL_OW 69
15033: PUSH
15034: LD_INT 0
15036: EQUAL
15037: IFFALSE 15049
15039: PUSH
15040: LD_OWVAR 2
15044: PUSH
15045: LD_INT 2
15047: NONEQUAL
15048: AND
15049: IFFALSE 15058
15051: GO 15053
15053: DISABLE
// Win ;
15054: CALL 15131 0 0
15058: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] , [ f_type , unit_human ] ] ) = 0 and your_side = 2 do
15059: LD_INT 2
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_INT 8
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: LD_INT 22
15074: PUSH
15075: LD_INT 3
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PPUSH
15101: CALL_OW 69
15105: PUSH
15106: LD_INT 0
15108: EQUAL
15109: IFFALSE 15121
15111: PUSH
15112: LD_OWVAR 2
15116: PUSH
15117: LD_INT 2
15119: EQUAL
15120: AND
15121: IFFALSE 15130
15123: GO 15125
15125: DISABLE
// Win ;
15126: CALL 15131 0 0
15130: END
// function Win ; var points ; begin
15131: LD_INT 0
15133: PPUSH
15134: PPUSH
// Query ( VulcWin ) ;
15135: LD_STRING VulcWin
15137: PPUSH
15138: CALL_OW 97
// if medal_enabled then
15142: LD_EXP 14
15146: IFFALSE 15160
// AddMedal ( vulc_1 , 1 ) else
15148: LD_STRING vulc_1
15150: PPUSH
15151: LD_INT 1
15153: PPUSH
15154: CALL_OW 101
15158: GO 15171
// AddMedal ( vulc_1 , - 1 ) ;
15160: LD_STRING vulc_1
15162: PPUSH
15163: LD_INT 1
15165: NEG
15166: PPUSH
15167: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15171: LD_INT 22
15173: PUSH
15174: LD_INT 8
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PPUSH
15181: CALL_OW 69
15185: PUSH
15186: LD_INT 0
15188: EQUAL
15189: IFFALSE 15203
// AddMedal ( vulc_2 , 1 ) else
15191: LD_STRING vulc_2
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 101
15201: GO 15214
// AddMedal ( vulc_2 , - 1 ) ;
15203: LD_STRING vulc_2
15205: PPUSH
15206: LD_INT 1
15208: NEG
15209: PPUSH
15210: CALL_OW 101
// points := CalculateCommanderPoints ;
15214: LD_ADDR_VAR 0 2
15218: PUSH
15219: CALL 2376 0 0
15223: ST_TO_ADDR
// if points >= 2000 then
15224: LD_VAR 0 2
15228: PUSH
15229: LD_INT 2000
15231: GREATEREQUAL
15232: IFFALSE 15246
// AddMedal ( vulc_3 , 2 ) else
15234: LD_STRING vulc_3
15236: PPUSH
15237: LD_INT 2
15239: PPUSH
15240: CALL_OW 101
15244: GO 15279
// if points >= 0 then
15246: LD_VAR 0 2
15250: PUSH
15251: LD_INT 0
15253: GREATEREQUAL
15254: IFFALSE 15268
// AddMedal ( vulc_3 , 1 ) else
15256: LD_STRING vulc_3
15258: PPUSH
15259: LD_INT 1
15261: PPUSH
15262: CALL_OW 101
15266: GO 15279
// AddMedal ( vulc_3 , - 1 ) ;
15268: LD_STRING vulc_3
15270: PPUSH
15271: LD_INT 1
15273: NEG
15274: PPUSH
15275: CALL_OW 101
// GiveMedals ( MAIN ) ;
15279: LD_STRING MAIN
15281: PPUSH
15282: CALL_OW 102
// YouWin ;
15286: CALL_OW 103
// end ; end_of_file
15290: LD_VAR 0 1
15294: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15295: LD_INT 13
15297: PPUSH
15298: LD_INT 21
15300: PUSH
15301: LD_INT 1
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PPUSH
15308: CALL_OW 70
15312: IFFALSE 15372
15314: GO 15316
15316: DISABLE
15317: LD_INT 0
15319: PPUSH
15320: PPUSH
// begin enable ;
15321: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15322: LD_ADDR_VAR 0 1
15326: PUSH
15327: LD_INT 13
15329: PPUSH
15330: LD_INT 21
15332: PUSH
15333: LD_INT 1
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 70
15344: PUSH
15345: FOR_IN
15346: IFFALSE 15370
// if GetLives ( i ) then
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 256
15357: IFFALSE 15368
// KillUnit ( i ) ;
15359: LD_VAR 0 1
15363: PPUSH
15364: CALL_OW 66
15368: GO 15345
15370: POP
15371: POP
// end ;
15372: PPOPN 2
15374: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15375: LD_VAR 0 1
15379: PPUSH
15380: CALL_OW 255
15384: PUSH
15385: LD_OWVAR 2
15389: EQUAL
15390: IFFALSE 15400
// player_res_art := true ;
15392: LD_ADDR_EXP 6
15396: PUSH
15397: LD_INT 1
15399: ST_TO_ADDR
// end ;
15400: PPOPN 1
15402: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15403: LD_INT 22
15405: PUSH
15406: LD_OWVAR 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 7
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 30
15430: PUSH
15431: LD_INT 8
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 30
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PPUSH
15458: CALL_OW 69
15462: IFFALSE 15470
15464: PUSH
15465: LD_EXP 6
15469: AND
15470: IFFALSE 15798
15472: GO 15474
15474: DISABLE
15475: LD_INT 0
15477: PPUSH
15478: PPUSH
// begin enable ;
15479: ENABLE
// xy := FindArtifact ( 1 ) ;
15480: LD_ADDR_VAR 0 1
15484: PUSH
15485: LD_INT 1
15487: PPUSH
15488: CALL_OW 469
15492: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_lab , b_lab_siberium ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15493: LD_ADDR_VAR 0 2
15497: PUSH
15498: LD_INT 22
15500: PUSH
15501: LD_OWVAR 2
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 63
15512: PUSH
15513: LD_INT 11
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PPUSH
15524: CALL_OW 69
15528: PPUSH
15529: LD_VAR 0 1
15533: PUSH
15534: LD_INT 1
15536: ARRAY
15537: PPUSH
15538: LD_VAR 0 1
15542: PUSH
15543: LD_INT 2
15545: ARRAY
15546: PPUSH
15547: CALL_OW 73
15551: ST_TO_ADDR
// if player_artifact_ready = false then
15552: LD_EXP 8
15556: PUSH
15557: LD_INT 0
15559: EQUAL
15560: IFFALSE 15674
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15562: LD_VAR 0 2
15566: PPUSH
15567: LD_VAR 0 1
15571: PUSH
15572: LD_INT 1
15574: ARRAY
15575: PPUSH
15576: LD_VAR 0 1
15580: PUSH
15581: LD_INT 2
15583: ARRAY
15584: PPUSH
15585: CALL_OW 297
15589: PUSH
15590: LD_INT 6
15592: LESS
15593: IFFALSE 15654
// begin if BuildingStatus ( lab ) = bs_idle then
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 461
15604: PUSH
15605: LD_INT 2
15607: EQUAL
15608: IFFALSE 15632
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15610: LD_OWVAR 2
15614: PPUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_INT 2
15620: PPUSH
15621: LD_VAR 0 2
15625: PPUSH
15626: CALL_OW 468
15630: GO 15652
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15632: LD_OWVAR 2
15636: PPUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_INT 1
15642: PPUSH
15643: LD_VAR 0 2
15647: PPUSH
15648: CALL_OW 468
// end else
15652: GO 15674
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15654: LD_OWVAR 2
15658: PPUSH
15659: LD_INT 1
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: LD_VAR 0 2
15669: PPUSH
15670: CALL_OW 468
// if player_artifact_ready then
15674: LD_EXP 8
15678: IFFALSE 15798
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15680: LD_VAR 0 2
15684: PPUSH
15685: LD_VAR 0 1
15689: PUSH
15690: LD_INT 1
15692: ARRAY
15693: PPUSH
15694: LD_VAR 0 1
15698: PUSH
15699: LD_INT 2
15701: ARRAY
15702: PPUSH
15703: CALL_OW 297
15707: PUSH
15708: LD_INT 6
15710: LESS
15711: IFFALSE 15776
// begin if BuildingStatus ( lab ) = bs_idle then
15713: LD_VAR 0 2
15717: PPUSH
15718: CALL_OW 461
15722: PUSH
15723: LD_INT 2
15725: EQUAL
15726: IFFALSE 15752
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15728: LD_OWVAR 2
15732: PPUSH
15733: LD_EXP 9
15737: PPUSH
15738: LD_INT 4
15740: PPUSH
15741: LD_VAR 0 2
15745: PPUSH
15746: CALL_OW 468
15750: GO 15774
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15752: LD_OWVAR 2
15756: PPUSH
15757: LD_EXP 9
15761: PPUSH
15762: LD_INT 1
15764: PPUSH
15765: LD_VAR 0 2
15769: PPUSH
15770: CALL_OW 468
// end else
15774: GO 15798
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15776: LD_OWVAR 2
15780: PPUSH
15781: LD_EXP 9
15785: PPUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 2
15793: PPUSH
15794: CALL_OW 468
// end ;
15798: PPOPN 2
15800: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15801: LD_INT 0
15803: PPUSH
15804: PPUSH
15805: PPUSH
15806: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15807: LD_ADDR_VAR 0 5
15811: PUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 469
15819: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_lab , b_lab_siberium ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15820: LD_ADDR_VAR 0 7
15824: PUSH
15825: LD_INT 22
15827: PUSH
15828: LD_OWVAR 2
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 63
15839: PUSH
15840: LD_INT 11
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: PPUSH
15856: LD_VAR 0 5
15860: PUSH
15861: LD_INT 1
15863: ARRAY
15864: PPUSH
15865: LD_VAR 0 5
15869: PUSH
15870: LD_INT 2
15872: ARRAY
15873: PPUSH
15874: CALL_OW 73
15878: ST_TO_ADDR
// if icon = art_exp_left then
15879: LD_VAR 0 2
15883: PUSH
15884: LD_INT 1
15886: EQUAL
15887: IFFALSE 15940
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15889: LD_VAR 0 7
15893: PPUSH
15894: LD_EXP 10
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15906: LD_VAR 0 7
15910: PPUSH
15911: LD_EXP 7
15915: PPUSH
15916: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15920: LD_OWVAR 2
15924: PPUSH
15925: LD_INT 1
15927: PPUSH
15928: LD_INT 0
15930: PPUSH
15931: LD_VAR 0 7
15935: PPUSH
15936: CALL_OW 468
// end ; if icon = art_icon then
15940: LD_VAR 0 2
15944: PUSH
15945: LD_EXP 9
15949: EQUAL
15950: IFFALSE 16183
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 21
15959: PUSH
15960: LD_INT 3
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PPUSH
15967: CALL_OW 69
15971: IN
15972: IFFALSE 16183
// begin side := GetSide ( cr1 ) ;
15974: LD_ADDR_VAR 0 8
15978: PUSH
15979: LD_VAR 0 3
15983: PPUSH
15984: CALL_OW 255
15988: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15989: LD_INT 22
15991: PUSH
15992: LD_VAR 0 8
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 28
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PPUSH
16015: CALL_OW 69
16019: PUSH
16020: LD_INT 0
16022: GREATER
16023: IFFALSE 16183
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
16025: LD_ADDR_VAR 0 6
16029: PUSH
16030: LD_INT 22
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 2
16044: PUSH
16045: LD_INT 30
16047: PUSH
16048: LD_INT 26
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 30
16057: PUSH
16058: LD_INT 27
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 30
16067: PUSH
16068: LD_INT 28
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PPUSH
16085: CALL_OW 69
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16104
// KillUnit ( i ) ;
16093: LD_VAR 0 6
16097: PPUSH
16098: CALL_OW 66
16102: GO 16090
16104: POP
16105: POP
// medal_enabled := true ;
16106: LD_ADDR_EXP 14
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// player_res_art := false ;
16114: LD_ADDR_EXP 6
16118: PUSH
16119: LD_INT 0
16121: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16122: LD_OWVAR 2
16126: PPUSH
16127: LD_EXP 9
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: LD_VAR 0 7
16139: PPUSH
16140: CALL_OW 468
// wait ( time_to_reuse ) ;
16144: LD_EXP 12
16148: PPUSH
16149: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16153: LD_OWVAR 2
16157: PPUSH
16158: LD_EXP 9
16162: PPUSH
16163: LD_INT 4
16165: PPUSH
16166: LD_VAR 0 7
16170: PPUSH
16171: CALL_OW 468
// player_res_art := true ;
16175: LD_ADDR_EXP 6
16179: PUSH
16180: LD_INT 1
16182: ST_TO_ADDR
// end ; end ; end ; end ;
16183: PPOPN 8
16185: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16186: LD_VAR 0 1
16190: PPUSH
16191: CALL_OW 255
16195: PUSH
16196: LD_OWVAR 2
16200: EQUAL
16201: IFFALSE 16238
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16203: LD_OWVAR 2
16207: PPUSH
16208: LD_INT 1
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 468
// player_artifact_ready := true ;
16223: LD_ADDR_EXP 8
16227: PUSH
16228: LD_INT 1
16230: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16231: LD_STRING ArtVulcano
16233: PPUSH
16234: CALL_OW 339
// end ; end ;
16238: PPOPN 1
16240: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16241: LD_ADDR_EXP 7
16245: PUSH
16246: LD_VAR 0 2
16250: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16251: LD_OWVAR 2
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: LD_INT 2
16261: PPUSH
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 468
// end ; end_of_file end_of_file
16271: PPOPN 2
16273: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16274: LD_INT 0
16276: PPUSH
16277: PPUSH
16278: PPUSH
16279: PPUSH
16280: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16281: LD_ADDR_EXP 45
16285: PUSH
16286: LD_INT 7
16288: PUSH
16289: LD_INT 6
16291: PUSH
16292: LD_INT 5
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: LIST
16299: PUSH
16300: LD_OWVAR 67
16304: ARRAY
16305: ST_TO_ADDR
// al_force := [ ] ;
16306: LD_ADDR_EXP 44
16310: PUSH
16311: EMPTY
16312: ST_TO_ADDR
// RemoveAlliance ;
16313: CALL 17006 0 0
// ResetFog ;
16317: CALL_OW 335
// your_side := 7 ;
16321: LD_ADDR_OWVAR 2
16325: PUSH
16326: LD_INT 7
16328: ST_TO_ADDR
// uc_side := 7 ;
16329: LD_ADDR_OWVAR 20
16333: PUSH
16334: LD_INT 7
16336: ST_TO_ADDR
// hc_gallery :=  ;
16337: LD_ADDR_OWVAR 33
16341: PUSH
16342: LD_STRING 
16344: ST_TO_ADDR
// hc_name :=  ;
16345: LD_ADDR_OWVAR 26
16349: PUSH
16350: LD_STRING 
16352: ST_TO_ADDR
// hc_importance := 0 ;
16353: LD_ADDR_OWVAR 32
16357: PUSH
16358: LD_INT 0
16360: ST_TO_ADDR
// for i = 1 to 17 do
16361: LD_ADDR_VAR 0 2
16365: PUSH
16366: DOUBLE
16367: LD_INT 1
16369: DEC
16370: ST_TO_ADDR
16371: LD_INT 17
16373: PUSH
16374: FOR_TO
16375: IFFALSE 16455
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16377: LD_ADDR_OWVAR 21
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: LD_INT 3
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 1
16394: PPUSH
16395: LD_INT 2
16397: PPUSH
16398: CALL_OW 12
16402: ARRAY
16403: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16404: LD_INT 0
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: LD_INT 4
16412: PPUSH
16413: CALL_OW 12
16417: PPUSH
16418: LD_EXP 45
16422: PPUSH
16423: CALL_OW 380
// un := CreateHuman ;
16427: LD_ADDR_VAR 0 4
16431: PUSH
16432: CALL_OW 44
16436: ST_TO_ADDR
// al_force := al_force ^ un ;
16437: LD_ADDR_EXP 44
16441: PUSH
16442: LD_EXP 44
16446: PUSH
16447: LD_VAR 0 4
16451: ADD
16452: ST_TO_ADDR
// end ;
16453: GO 16374
16455: POP
16456: POP
// hc_importance := 100 ;
16457: LD_ADDR_OWVAR 32
16461: PUSH
16462: LD_INT 100
16464: ST_TO_ADDR
// uc_nation := 3 ;
16465: LD_ADDR_OWVAR 21
16469: PUSH
16470: LD_INT 3
16472: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16473: LD_INT 1
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: LD_EXP 45
16483: PPUSH
16484: CALL_OW 380
// hc_gallery := skirmish ;
16488: LD_ADDR_OWVAR 33
16492: PUSH
16493: LD_STRING skirmish
16495: ST_TO_ADDR
// hc_face_number := 8 ;
16496: LD_ADDR_OWVAR 34
16500: PUSH
16501: LD_INT 8
16503: ST_TO_ADDR
// hc_name := Trofim Petya ;
16504: LD_ADDR_OWVAR 26
16508: PUSH
16509: LD_STRING Trofim Petya
16511: ST_TO_ADDR
// al_commander := CreateHuman ;
16512: LD_ADDR_EXP 43
16516: PUSH
16517: CALL_OW 44
16521: ST_TO_ADDR
// player_commander := al_commander ;
16522: LD_ADDR_EXP 11
16526: PUSH
16527: LD_EXP 43
16531: ST_TO_ADDR
// hc_importance := 0 ;
16532: LD_ADDR_OWVAR 32
16536: PUSH
16537: LD_INT 0
16539: ST_TO_ADDR
// hc_gallery :=  ;
16540: LD_ADDR_OWVAR 33
16544: PUSH
16545: LD_STRING 
16547: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16548: LD_ADDR_VAR 0 5
16552: PUSH
16553: LD_STRING text
16555: PPUSH
16556: LD_INT 9
16558: PUSH
16559: LD_INT 9
16561: PUSH
16562: LD_INT 8
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: PUSH
16570: LD_OWVAR 67
16574: ARRAY
16575: PPUSH
16576: LD_INT 9
16578: PUSH
16579: LD_INT 9
16581: PUSH
16582: LD_INT 8
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: LIST
16589: PUSH
16590: LD_OWVAR 67
16594: ARRAY
16595: PPUSH
16596: LD_INT -5
16598: PUSH
16599: LD_EXP 43
16603: PUSH
16604: LD_INT -3
16606: PUSH
16607: LD_INT -2
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: PUSH
16616: LD_EXP 44
16620: ADD
16621: PPUSH
16622: LD_INT 1
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 2
16630: PUSH
16631: LD_INT 1
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 4
16640: PUSH
16641: LD_INT 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 9
16650: PUSH
16651: LD_INT 5
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: PPUSH
16662: CALL_OW 42
16666: ST_TO_ADDR
// team := team ^ al_commander ;
16667: LD_ADDR_VAR 0 5
16671: PUSH
16672: LD_VAR 0 5
16676: PUSH
16677: LD_EXP 43
16681: ADD
16682: ST_TO_ADDR
// for i = 1 to team do
16683: LD_ADDR_VAR 0 2
16687: PUSH
16688: DOUBLE
16689: LD_INT 1
16691: DEC
16692: ST_TO_ADDR
16693: LD_VAR 0 5
16697: PUSH
16698: FOR_TO
16699: IFFALSE 16999
// begin if GetClass ( team [ i ] ) = class_mechanic then
16701: LD_VAR 0 5
16705: PUSH
16706: LD_VAR 0 2
16710: ARRAY
16711: PPUSH
16712: CALL_OW 257
16716: PUSH
16717: LD_INT 3
16719: EQUAL
16720: IFFALSE 16976
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16722: LD_ADDR_OWVAR 21
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: PPUSH
16740: LD_INT 2
16742: PPUSH
16743: CALL_OW 12
16747: ARRAY
16748: ST_TO_ADDR
// if uc_nation = 1 then
16749: LD_OWVAR 21
16753: PUSH
16754: LD_INT 1
16756: EQUAL
16757: IFFALSE 16841
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16759: LD_ADDR_OWVAR 37
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: LD_INT 4
16769: PUSH
16770: LD_INT 5
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: LIST
16777: PUSH
16778: LD_VAR 0 2
16782: PUSH
16783: LD_INT 3
16785: MOD
16786: PUSH
16787: LD_INT 1
16789: PLUS
16790: ARRAY
16791: ST_TO_ADDR
// vc_engine := engine_siberite ;
16792: LD_ADDR_OWVAR 39
16796: PUSH
16797: LD_INT 3
16799: ST_TO_ADDR
// vc_control := control_manual ;
16800: LD_ADDR_OWVAR 38
16804: PUSH
16805: LD_INT 1
16807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16808: LD_ADDR_OWVAR 40
16812: PUSH
16813: LD_INT 4
16815: PUSH
16816: LD_INT 5
16818: PUSH
16819: LD_INT 9
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 3
16832: PPUSH
16833: CALL_OW 12
16837: ARRAY
16838: ST_TO_ADDR
// end else
16839: GO 16917
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16841: LD_ADDR_OWVAR 37
16845: PUSH
16846: LD_INT 21
16848: PUSH
16849: LD_INT 23
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_VAR 0 2
16860: PUSH
16861: LD_INT 2
16863: MOD
16864: PUSH
16865: LD_INT 1
16867: PLUS
16868: ARRAY
16869: ST_TO_ADDR
// vc_engine := engine_siberite ;
16870: LD_ADDR_OWVAR 39
16874: PUSH
16875: LD_INT 3
16877: ST_TO_ADDR
// vc_control := control_manual ;
16878: LD_ADDR_OWVAR 38
16882: PUSH
16883: LD_INT 1
16885: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16886: LD_ADDR_OWVAR 40
16890: PUSH
16891: LD_INT 44
16893: PUSH
16894: LD_INT 45
16896: PUSH
16897: LD_INT 43
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 1
16907: PPUSH
16908: LD_INT 3
16910: PPUSH
16911: CALL_OW 12
16915: ARRAY
16916: ST_TO_ADDR
// end ; un := CreateVehicle ;
16917: LD_ADDR_VAR 0 4
16921: PUSH
16922: CALL_OW 45
16926: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16927: LD_VAR 0 4
16931: PPUSH
16932: LD_INT 5
16934: PPUSH
16935: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16939: LD_VAR 0 4
16943: PPUSH
16944: LD_INT 15
16946: PPUSH
16947: LD_INT 0
16949: PPUSH
16950: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16954: LD_VAR 0 5
16958: PUSH
16959: LD_VAR 0 2
16963: ARRAY
16964: PPUSH
16965: LD_VAR 0 4
16969: PPUSH
16970: CALL_OW 52
// end else
16974: GO 16997
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16976: LD_VAR 0 5
16980: PUSH
16981: LD_VAR 0 2
16985: ARRAY
16986: PPUSH
16987: LD_INT 15
16989: PPUSH
16990: LD_INT 0
16992: PPUSH
16993: CALL_OW 49
// end ;
16997: GO 16698
16999: POP
17000: POP
// end ;
17001: LD_VAR 0 1
17005: RET
// export function RemoveAlliance ; var i ; begin
17006: LD_INT 0
17008: PPUSH
17009: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
17010: LD_INT 22
17012: PUSH
17013: LD_INT 7
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 30
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PPUSH
17034: CALL_OW 69
17038: PUSH
17039: LD_INT 1
17041: ARRAY
17042: PPUSH
17043: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 7
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PPUSH
17062: CALL_OW 69
17066: PUSH
17067: FOR_IN
17068: IFFALSE 17081
// RemoveUnit ( i ) ;
17070: LD_VAR 0 2
17074: PPUSH
17075: CALL_OW 64
17079: GO 17067
17081: POP
17082: POP
// end ;
17083: LD_VAR 0 1
17087: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
17088: LD_INT 0
17090: PPUSH
17091: PPUSH
17092: PPUSH
17093: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
17094: LD_INT 31
17096: PPUSH
17097: LD_INT 7
17099: PPUSH
17100: LD_INT 2
17102: PPUSH
17103: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
17107: LD_INT 32
17109: PPUSH
17110: LD_INT 7
17112: PPUSH
17113: LD_INT 2
17115: PPUSH
17116: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
17120: LD_INT 59
17122: PPUSH
17123: LD_INT 7
17125: PPUSH
17126: LD_INT 2
17128: PPUSH
17129: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
17133: LD_ADDR_EXP 45
17137: PUSH
17138: LD_INT 5
17140: PUSH
17141: LD_INT 6
17143: PUSH
17144: LD_INT 7
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: PUSH
17152: LD_OWVAR 67
17156: ARRAY
17157: ST_TO_ADDR
// al_force := [ ] ;
17158: LD_ADDR_EXP 44
17162: PUSH
17163: EMPTY
17164: ST_TO_ADDR
// al_vehs := [ ] ;
17165: LD_ADDR_EXP 50
17169: PUSH
17170: EMPTY
17171: ST_TO_ADDR
// uc_side := 7 ;
17172: LD_ADDR_OWVAR 20
17176: PUSH
17177: LD_INT 7
17179: ST_TO_ADDR
// uc_nation := 1 ;
17180: LD_ADDR_OWVAR 21
17184: PUSH
17185: LD_INT 1
17187: ST_TO_ADDR
// bc_type := b_oil_mine ;
17188: LD_ADDR_OWVAR 42
17192: PUSH
17193: LD_INT 29
17195: ST_TO_ADDR
// b := CreateBuilding ;
17196: LD_ADDR_VAR 0 4
17200: PUSH
17201: CALL_OW 46
17205: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17206: LD_VAR 0 4
17210: PPUSH
17211: LD_INT 61
17213: PPUSH
17214: LD_INT 7
17216: PPUSH
17217: LD_INT 0
17219: PPUSH
17220: LD_INT 0
17222: PPUSH
17223: CALL_OW 50
// bc_type := b_siberite_mine ;
17227: LD_ADDR_OWVAR 42
17231: PUSH
17232: LD_INT 30
17234: ST_TO_ADDR
// b := CreateBuilding ;
17235: LD_ADDR_VAR 0 4
17239: PUSH
17240: CALL_OW 46
17244: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17245: LD_VAR 0 4
17249: PPUSH
17250: LD_INT 69
17252: PPUSH
17253: LD_INT 13
17255: PPUSH
17256: LD_INT 0
17258: PPUSH
17259: LD_INT 0
17261: PPUSH
17262: CALL_OW 50
// hc_gallery :=  ;
17266: LD_ADDR_OWVAR 33
17270: PUSH
17271: LD_STRING 
17273: ST_TO_ADDR
// hc_name :=  ;
17274: LD_ADDR_OWVAR 26
17278: PUSH
17279: LD_STRING 
17281: ST_TO_ADDR
// hc_importance := 0 ;
17282: LD_ADDR_OWVAR 32
17286: PUSH
17287: LD_INT 0
17289: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17290: LD_ADDR_VAR 0 2
17294: PUSH
17295: LD_INT 22
17297: PUSH
17298: LD_INT 7
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 30
17307: PUSH
17308: LD_INT 32
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 69
17323: PUSH
17324: FOR_IN
17325: IFFALSE 17395
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17327: LD_ADDR_OWVAR 21
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 3
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 1
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 12
17352: ARRAY
17353: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17354: LD_INT 0
17356: PPUSH
17357: LD_INT 1
17359: PPUSH
17360: LD_EXP 45
17364: PPUSH
17365: CALL_OW 380
// un := CreateHuman ;
17369: LD_ADDR_VAR 0 3
17373: PUSH
17374: CALL_OW 44
17378: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17379: LD_VAR 0 3
17383: PPUSH
17384: LD_VAR 0 2
17388: PPUSH
17389: CALL_OW 52
// end ;
17393: GO 17324
17395: POP
17396: POP
// for i = 1 to 3 do
17397: LD_ADDR_VAR 0 2
17401: PUSH
17402: DOUBLE
17403: LD_INT 1
17405: DEC
17406: ST_TO_ADDR
17407: LD_INT 3
17409: PUSH
17410: FOR_TO
17411: IFFALSE 17479
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17413: LD_ADDR_OWVAR 21
17417: PUSH
17418: LD_INT 1
17420: PUSH
17421: LD_INT 3
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 1
17430: PPUSH
17431: LD_INT 2
17433: PPUSH
17434: CALL_OW 12
17438: ARRAY
17439: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17440: LD_INT 0
17442: PPUSH
17443: LD_INT 4
17445: PPUSH
17446: LD_EXP 45
17450: PPUSH
17451: CALL_OW 380
// un := CreateHuman ;
17455: LD_ADDR_VAR 0 3
17459: PUSH
17460: CALL_OW 44
17464: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17465: LD_VAR 0 3
17469: PPUSH
17470: LD_INT 164
17472: PPUSH
17473: CALL_OW 52
// end ;
17477: GO 17410
17479: POP
17480: POP
// for i = 1 to 4 do
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: DOUBLE
17487: LD_INT 1
17489: DEC
17490: ST_TO_ADDR
17491: LD_INT 4
17493: PUSH
17494: FOR_TO
17495: IFFALSE 17586
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17497: LD_ADDR_OWVAR 21
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: LD_INT 3
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 1
17514: PPUSH
17515: LD_INT 2
17517: PPUSH
17518: CALL_OW 12
17522: ARRAY
17523: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17524: LD_INT 0
17526: PPUSH
17527: LD_INT 5
17529: PUSH
17530: LD_INT 9
17532: PUSH
17533: LD_INT 9
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 1
17543: PPUSH
17544: LD_INT 3
17546: PPUSH
17547: CALL_OW 12
17551: ARRAY
17552: PPUSH
17553: LD_EXP 45
17557: PPUSH
17558: CALL_OW 380
// un := CreateHuman ;
17562: LD_ADDR_VAR 0 3
17566: PUSH
17567: CALL_OW 44
17571: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17572: LD_VAR 0 3
17576: PPUSH
17577: LD_INT 173
17579: PPUSH
17580: CALL_OW 52
// end ;
17584: GO 17494
17586: POP
17587: POP
// for i = 1 to 4 do
17588: LD_ADDR_VAR 0 2
17592: PUSH
17593: DOUBLE
17594: LD_INT 1
17596: DEC
17597: ST_TO_ADDR
17598: LD_INT 4
17600: PUSH
17601: FOR_TO
17602: IFFALSE 17700
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17604: LD_ADDR_OWVAR 21
17608: PUSH
17609: LD_INT 1
17611: PUSH
17612: LD_INT 3
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_INT 2
17624: PPUSH
17625: CALL_OW 12
17629: ARRAY
17630: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17631: LD_INT 0
17633: PPUSH
17634: LD_INT 3
17636: PPUSH
17637: LD_EXP 45
17641: PPUSH
17642: CALL_OW 380
// un := CreateHuman ;
17646: LD_ADDR_VAR 0 3
17650: PUSH
17651: CALL_OW 44
17655: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17656: LD_VAR 0 3
17660: PPUSH
17661: LD_INT 22
17663: PUSH
17664: LD_INT 7
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 30
17673: PUSH
17674: LD_INT 3
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PPUSH
17685: CALL_OW 69
17689: PUSH
17690: LD_INT 1
17692: ARRAY
17693: PPUSH
17694: CALL_OW 52
// end ;
17698: GO 17601
17700: POP
17701: POP
// for i = 1 to 4 do
17702: LD_ADDR_VAR 0 2
17706: PUSH
17707: DOUBLE
17708: LD_INT 1
17710: DEC
17711: ST_TO_ADDR
17712: LD_INT 4
17714: PUSH
17715: FOR_TO
17716: IFFALSE 17784
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17718: LD_ADDR_OWVAR 21
17722: PUSH
17723: LD_INT 1
17725: PUSH
17726: LD_INT 3
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: PPUSH
17736: LD_INT 2
17738: PPUSH
17739: CALL_OW 12
17743: ARRAY
17744: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17745: LD_INT 0
17747: PPUSH
17748: LD_INT 2
17750: PPUSH
17751: LD_EXP 45
17755: PPUSH
17756: CALL_OW 380
// un := CreateHuman ;
17760: LD_ADDR_VAR 0 3
17764: PUSH
17765: CALL_OW 44
17769: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17770: LD_VAR 0 3
17774: PPUSH
17775: LD_INT 162
17777: PPUSH
17778: CALL_OW 52
// end ;
17782: GO 17715
17784: POP
17785: POP
// uc_nation := 3 ;
17786: LD_ADDR_OWVAR 21
17790: PUSH
17791: LD_INT 3
17793: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17794: LD_ADDR_OWVAR 37
17798: PUSH
17799: LD_INT 21
17801: ST_TO_ADDR
// vc_engine := engine_siberite ;
17802: LD_ADDR_OWVAR 39
17806: PUSH
17807: LD_INT 3
17809: ST_TO_ADDR
// vc_control := control_computer ;
17810: LD_ADDR_OWVAR 38
17814: PUSH
17815: LD_INT 3
17817: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17818: LD_ADDR_OWVAR 40
17822: PUSH
17823: LD_INT 51
17825: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17826: CALL_OW 45
17830: PPUSH
17831: LD_INT 49
17833: PPUSH
17834: LD_INT 13
17836: PPUSH
17837: LD_INT 0
17839: PPUSH
17840: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17844: LD_ADDR_EXP 52
17848: PUSH
17849: LD_INT 22
17851: PUSH
17852: LD_INT 7
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 30
17861: PUSH
17862: LD_INT 33
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PPUSH
17873: CALL_OW 69
17877: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: DOUBLE
17884: LD_INT 1
17886: DEC
17887: ST_TO_ADDR
17888: LD_INT 22
17890: PUSH
17891: LD_INT 7
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 30
17900: PUSH
17901: LD_INT 33
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 35
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: PUSH
17923: EMPTY
17924: LIST
17925: PPUSH
17926: CALL_OW 69
17930: PUSH
17931: FOR_TO
17932: IFFALSE 17992
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17934: LD_INT 22
17936: PUSH
17937: LD_INT 7
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 30
17946: PUSH
17947: LD_INT 33
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 35
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: PUSH
17969: EMPTY
17970: LIST
17971: PPUSH
17972: CALL_OW 69
17976: PUSH
17977: LD_VAR 0 2
17981: ARRAY
17982: PPUSH
17983: LD_INT 49
17985: PPUSH
17986: CALL_OW 208
17990: GO 17931
17992: POP
17993: POP
// end ;
17994: LD_VAR 0 1
17998: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17999: LD_OWVAR 2
18003: PUSH
18004: LD_INT 1
18006: EQUAL
18007: IFFALSE 18997
18009: GO 18011
18011: DISABLE
18012: LD_INT 0
18014: PPUSH
18015: PPUSH
18016: PPUSH
18017: PPUSH
// begin enable ;
18018: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
18019: LD_ADDR_EXP 56
18023: PUSH
18024: LD_INT 22
18026: PUSH
18027: LD_INT 7
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 21
18036: PUSH
18037: LD_INT 3
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PPUSH
18048: CALL_OW 69
18052: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
18053: LD_ADDR_EXP 54
18057: PUSH
18058: LD_INT 164
18060: PUSH
18061: LD_INT 197
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
18068: LD_ADDR_EXP 53
18072: PUSH
18073: LD_INT 22
18075: PUSH
18076: LD_INT 7
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 30
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: PUSH
18102: LD_INT 1
18104: ARRAY
18105: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
18106: LD_ADDR_EXP 55
18110: PUSH
18111: LD_INT 22
18113: PUSH
18114: LD_INT 7
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 30
18123: PUSH
18124: LD_INT 3
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PPUSH
18135: CALL_OW 69
18139: PUSH
18140: LD_INT 1
18142: ARRAY
18143: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18144: LD_INT 22
18146: PUSH
18147: LD_INT 7
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 34
18156: PUSH
18157: LD_INT 51
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: IFFALSE 18212
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18174: LD_ADDR_EXP 51
18178: PUSH
18179: LD_INT 22
18181: PUSH
18182: LD_INT 7
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 34
18191: PUSH
18192: LD_INT 51
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PPUSH
18203: CALL_OW 69
18207: PUSH
18208: LD_INT 1
18210: ARRAY
18211: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18212: LD_ADDR_EXP 47
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_INT 7
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 25
18229: PUSH
18230: LD_INT 9
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18246: LD_ADDR_EXP 46
18250: PUSH
18251: LD_INT 22
18253: PUSH
18254: LD_INT 7
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 25
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PPUSH
18275: CALL_OW 69
18279: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18280: LD_ADDR_EXP 48
18284: PUSH
18285: LD_INT 22
18287: PUSH
18288: LD_INT 7
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 25
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PPUSH
18309: CALL_OW 69
18313: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18314: LD_ADDR_EXP 49
18318: PUSH
18319: LD_INT 22
18321: PUSH
18322: LD_INT 7
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 25
18331: PUSH
18332: LD_INT 4
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PPUSH
18343: CALL_OW 69
18347: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18348: LD_EXP 51
18352: PPUSH
18353: CALL_OW 314
18357: NOT
18358: IFFALSE 18378
18360: PUSH
18361: LD_EXP 51
18365: PPUSH
18366: LD_INT 1
18368: PPUSH
18369: CALL_OW 289
18373: PUSH
18374: LD_INT 100
18376: LESS
18377: AND
18378: IFFALSE 18426
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18380: LD_ADDR_VAR 0 4
18384: PUSH
18385: LD_INT 12
18387: PPUSH
18388: CALL_OW 435
18392: ST_TO_ADDR
// if cr then
18393: LD_VAR 0 4
18397: IFFALSE 18426
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18399: LD_EXP 51
18403: PPUSH
18404: LD_VAR 0 4
18408: PUSH
18409: LD_INT 1
18411: ARRAY
18412: PPUSH
18413: LD_VAR 0 4
18417: PUSH
18418: LD_INT 2
18420: ARRAY
18421: PPUSH
18422: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18426: LD_EXP 56
18430: PPUSH
18431: LD_INT 3
18433: PUSH
18434: LD_INT 24
18436: PUSH
18437: LD_INT 1000
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PPUSH
18448: CALL_OW 72
18452: IFFALSE 18582
// begin if al_eng then
18454: LD_EXP 46
18458: IFFALSE 18580
// for i = 1 to al_eng do
18460: LD_ADDR_VAR 0 1
18464: PUSH
18465: DOUBLE
18466: LD_INT 1
18468: DEC
18469: ST_TO_ADDR
18470: LD_EXP 46
18474: PUSH
18475: FOR_TO
18476: IFFALSE 18578
// if IsInUnit ( al_eng [ i ] ) then
18478: LD_EXP 46
18482: PUSH
18483: LD_VAR 0 1
18487: ARRAY
18488: PPUSH
18489: CALL_OW 310
18493: IFFALSE 18512
// ComExitBuilding ( al_eng [ i ] ) else
18495: LD_EXP 46
18499: PUSH
18500: LD_VAR 0 1
18504: ARRAY
18505: PPUSH
18506: CALL_OW 122
18510: GO 18576
// if not HasTask ( al_eng [ i ] ) then
18512: LD_EXP 46
18516: PUSH
18517: LD_VAR 0 1
18521: ARRAY
18522: PPUSH
18523: CALL_OW 314
18527: NOT
18528: IFFALSE 18576
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18530: LD_EXP 46
18534: PUSH
18535: LD_VAR 0 1
18539: ARRAY
18540: PPUSH
18541: LD_EXP 56
18545: PPUSH
18546: LD_INT 3
18548: PUSH
18549: LD_INT 24
18551: PUSH
18552: LD_INT 1000
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PPUSH
18563: CALL_OW 72
18567: PUSH
18568: LD_INT 1
18570: ARRAY
18571: PPUSH
18572: CALL_OW 130
18576: GO 18475
18578: POP
18579: POP
// end else
18580: GO 18664
// if al_eng then
18582: LD_EXP 46
18586: IFFALSE 18664
// if not IsInUnit ( al_eng [ 1 ] ) then
18588: LD_EXP 46
18592: PUSH
18593: LD_INT 1
18595: ARRAY
18596: PPUSH
18597: CALL_OW 310
18601: NOT
18602: IFFALSE 18664
// for i = 1 to al_eng do
18604: LD_ADDR_VAR 0 1
18608: PUSH
18609: DOUBLE
18610: LD_INT 1
18612: DEC
18613: ST_TO_ADDR
18614: LD_EXP 46
18618: PUSH
18619: FOR_TO
18620: IFFALSE 18662
// if not IsInUnit ( al_eng [ i ] ) then
18622: LD_EXP 46
18626: PUSH
18627: LD_VAR 0 1
18631: ARRAY
18632: PPUSH
18633: CALL_OW 310
18637: NOT
18638: IFFALSE 18660
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18640: LD_EXP 46
18644: PUSH
18645: LD_VAR 0 1
18649: ARRAY
18650: PPUSH
18651: LD_EXP 53
18655: PPUSH
18656: CALL_OW 120
18660: GO 18619
18662: POP
18663: POP
// if al_vehs then
18664: LD_EXP 50
18668: IFFALSE 18768
// if BuildingStatus ( al_fac ) = bs_idle then
18670: LD_EXP 55
18674: PPUSH
18675: CALL_OW 461
18679: PUSH
18680: LD_INT 2
18682: EQUAL
18683: IFFALSE 18768
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18685: LD_EXP 55
18689: PPUSH
18690: LD_EXP 50
18694: PUSH
18695: LD_INT 1
18697: ARRAY
18698: PPUSH
18699: LD_EXP 50
18703: PUSH
18704: LD_INT 2
18706: ARRAY
18707: PPUSH
18708: LD_EXP 50
18712: PUSH
18713: LD_INT 3
18715: ARRAY
18716: PPUSH
18717: LD_EXP 50
18721: PUSH
18722: LD_INT 4
18724: ARRAY
18725: PPUSH
18726: CALL_OW 125
// for i = 1 to 4 do
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: DOUBLE
18736: LD_INT 1
18738: DEC
18739: ST_TO_ADDR
18740: LD_INT 4
18742: PUSH
18743: FOR_TO
18744: IFFALSE 18766
// al_vehs := Delete ( al_vehs , 1 ) ;
18746: LD_ADDR_EXP 50
18750: PUSH
18751: LD_EXP 50
18755: PPUSH
18756: LD_INT 1
18758: PPUSH
18759: CALL_OW 3
18763: ST_TO_ADDR
18764: GO 18743
18766: POP
18767: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18768: LD_EXP 44
18772: PUSH
18773: LD_INT 0
18775: EQUAL
18776: IFFALSE 18792
18778: PUSH
18779: LD_OWVAR 1
18783: PUSH
18784: LD_INT 23100
18786: MOD
18787: PUSH
18788: LD_INT 0
18790: EQUAL
18791: AND
18792: IFFALSE 18906
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18794: LD_ADDR_VAR 0 1
18798: PUSH
18799: DOUBLE
18800: LD_INT 1
18802: DEC
18803: ST_TO_ADDR
18804: LD_INT 6
18806: PUSH
18807: LD_INT 7
18809: PUSH
18810: LD_INT 8
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: LD_OWVAR 67
18822: ARRAY
18823: PUSH
18824: FOR_TO
18825: IFFALSE 18904
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18827: LD_ADDR_EXP 50
18831: PUSH
18832: LD_EXP 50
18836: PUSH
18837: LD_INT 23
18839: ADD
18840: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18841: LD_ADDR_EXP 50
18845: PUSH
18846: LD_EXP 50
18850: PUSH
18851: LD_INT 1
18853: ADD
18854: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18855: LD_ADDR_EXP 50
18859: PUSH
18860: LD_EXP 50
18864: PUSH
18865: LD_INT 3
18867: ADD
18868: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18869: LD_ADDR_EXP 50
18873: PUSH
18874: LD_EXP 50
18878: PUSH
18879: LD_INT 46
18881: PUSH
18882: LD_INT 47
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 1
18891: PPUSH
18892: LD_INT 2
18894: PPUSH
18895: CALL_OW 12
18899: ARRAY
18900: ADD
18901: ST_TO_ADDR
// end ;
18902: GO 18824
18904: POP
18905: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18906: LD_INT 22
18908: PUSH
18909: LD_INT 7
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 34
18918: PUSH
18919: LD_INT 51
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: PUSH
18935: LD_INT 0
18937: EQUAL
18938: IFFALSE 18961
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18940: LD_EXP 55
18944: PPUSH
18945: LD_INT 21
18947: PPUSH
18948: LD_INT 1
18950: PPUSH
18951: LD_INT 3
18953: PPUSH
18954: LD_INT 51
18956: PPUSH
18957: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18961: LD_EXP 44
18965: PUSH
18966: LD_INT 6
18968: PUSH
18969: LD_INT 7
18971: PUSH
18972: LD_INT 8
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: PUSH
18980: LD_OWVAR 67
18984: ARRAY
18985: GREATEREQUAL
18986: IFFALSE 18997
// RaiseSailEvent ( event_alliance_attack ) ;
18988: LD_EXP 23
18992: PPUSH
18993: CALL_OW 427
// end ;
18997: PPOPN 4
18999: END
// export function AllianceAttack ( ) ; var path , units ; begin
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
// units := al_force ;
19005: LD_ADDR_VAR 0 3
19009: PUSH
19010: LD_EXP 44
19014: ST_TO_ADDR
// al_force := [ ] ;
19015: LD_ADDR_EXP 44
19019: PUSH
19020: EMPTY
19021: ST_TO_ADDR
// if rand ( 0 , 1 ) then
19022: LD_INT 0
19024: PPUSH
19025: LD_INT 1
19027: PPUSH
19028: CALL_OW 12
19032: IFFALSE 19076
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
19034: LD_ADDR_VAR 0 2
19038: PUSH
19039: LD_INT 49
19041: PUSH
19042: LD_INT 53
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 52
19051: PUSH
19052: LD_INT 90
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 63
19061: PUSH
19062: LD_INT 114
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: LIST
19073: ST_TO_ADDR
19074: GO 19105
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
19076: LD_ADDR_VAR 0 2
19080: PUSH
19081: LD_INT 89
19083: PUSH
19084: LD_INT 52
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 143
19093: PUSH
19094: LD_INT 50
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19105: LD_INT 35
19107: PPUSH
19108: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
19112: LD_VAR 0 3
19116: PPUSH
19117: LD_VAR 0 2
19121: PPUSH
19122: CALL 83033 0 2
19126: NOT
19127: IFFALSE 19105
// end ; end_of_file
19129: LD_VAR 0 1
19133: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
19134: LD_INT 0
19136: PPUSH
19137: PPUSH
19138: PPUSH
19139: PPUSH
19140: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19141: LD_ADDR_EXP 59
19145: PUSH
19146: LD_INT 9
19148: PUSH
19149: LD_INT 8
19151: PUSH
19152: LD_INT 7
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: PUSH
19160: LD_OWVAR 67
19164: ARRAY
19165: ST_TO_ADDR
// ar_force := [ ] ;
19166: LD_ADDR_EXP 58
19170: PUSH
19171: EMPTY
19172: ST_TO_ADDR
// RemoveAlliance ;
19173: CALL 17006 0 0
// RemoveEnvironmentArea ( evn ) ;
19177: LD_INT 17
19179: PPUSH
19180: CALL_OW 355
// your_side := 2 ;
19184: LD_ADDR_OWVAR 2
19188: PUSH
19189: LD_INT 2
19191: ST_TO_ADDR
// uc_side := 2 ;
19192: LD_ADDR_OWVAR 20
19196: PUSH
19197: LD_INT 2
19199: ST_TO_ADDR
// uc_nation := nation_arabian ;
19200: LD_ADDR_OWVAR 21
19204: PUSH
19205: LD_INT 2
19207: ST_TO_ADDR
// hc_gallery :=  ;
19208: LD_ADDR_OWVAR 33
19212: PUSH
19213: LD_STRING 
19215: ST_TO_ADDR
// hc_name :=  ;
19216: LD_ADDR_OWVAR 26
19220: PUSH
19221: LD_STRING 
19223: ST_TO_ADDR
// hc_importance := 0 ;
19224: LD_ADDR_OWVAR 32
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// for i = 1 to 20 do
19232: LD_ADDR_VAR 0 2
19236: PUSH
19237: DOUBLE
19238: LD_INT 1
19240: DEC
19241: ST_TO_ADDR
19242: LD_INT 20
19244: PUSH
19245: FOR_TO
19246: IFFALSE 19311
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19248: LD_INT 0
19250: PPUSH
19251: LD_INT 1
19253: PPUSH
19254: LD_INT 4
19256: PPUSH
19257: CALL_OW 12
19261: PPUSH
19262: LD_EXP 59
19266: PPUSH
19267: CALL_OW 380
// un := CreateHuman ;
19271: LD_ADDR_VAR 0 4
19275: PUSH
19276: CALL_OW 44
19280: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19281: LD_VAR 0 4
19285: PPUSH
19286: LD_INT 2
19288: PPUSH
19289: CALL_OW 233
// ar_force := ar_force ^ un ;
19293: LD_ADDR_EXP 58
19297: PUSH
19298: LD_EXP 58
19302: PUSH
19303: LD_VAR 0 4
19307: ADD
19308: ST_TO_ADDR
// end ;
19309: GO 19245
19311: POP
19312: POP
// hc_importance := 100 ;
19313: LD_ADDR_OWVAR 32
19317: PUSH
19318: LD_INT 100
19320: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19321: LD_INT 1
19323: PPUSH
19324: LD_INT 11
19326: PPUSH
19327: LD_EXP 59
19331: PPUSH
19332: CALL_OW 380
// hc_gallery := skirmish ;
19336: LD_ADDR_OWVAR 33
19340: PUSH
19341: LD_STRING skirmish
19343: ST_TO_ADDR
// hc_face_number := 9 ;
19344: LD_ADDR_OWVAR 34
19348: PUSH
19349: LD_INT 9
19351: ST_TO_ADDR
// hc_name := Muhammad Mustaffi ;
19352: LD_ADDR_OWVAR 26
19356: PUSH
19357: LD_STRING Muhammad Mustaffi
19359: ST_TO_ADDR
// ar_commander := CreateHuman ;
19360: LD_ADDR_EXP 57
19364: PUSH
19365: CALL_OW 44
19369: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19370: LD_EXP 57
19374: PPUSH
19375: LD_INT 2
19377: PPUSH
19378: CALL_OW 233
// player_commander := ar_commander ;
19382: LD_ADDR_EXP 11
19386: PUSH
19387: LD_EXP 57
19391: ST_TO_ADDR
// hc_importance := 0 ;
19392: LD_ADDR_OWVAR 32
19396: PUSH
19397: LD_INT 0
19399: ST_TO_ADDR
// hc_gallery :=  ;
19400: LD_ADDR_OWVAR 33
19404: PUSH
19405: LD_STRING 
19407: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19408: LD_ADDR_VAR 0 5
19412: PUSH
19413: LD_STRING text
19415: PPUSH
19416: LD_INT 14
19418: PUSH
19419: LD_INT 13
19421: PUSH
19422: LD_INT 12
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: PUSH
19430: LD_OWVAR 67
19434: ARRAY
19435: PPUSH
19436: LD_INT 14
19438: PUSH
19439: LD_INT 13
19441: PUSH
19442: LD_INT 12
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: LD_OWVAR 67
19454: ARRAY
19455: PPUSH
19456: LD_INT -6
19458: PUSH
19459: LD_EXP 57
19463: PUSH
19464: LD_INT -2
19466: PUSH
19467: LD_INT -3
19469: PUSH
19470: LD_INT -5
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: PUSH
19480: LD_EXP 58
19484: ADD
19485: PPUSH
19486: LD_INT 1
19488: PUSH
19489: LD_INT 3
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 4
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 8
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 42
19526: ST_TO_ADDR
// team := team ^ ar_commander ;
19527: LD_ADDR_VAR 0 5
19531: PUSH
19532: LD_VAR 0 5
19536: PUSH
19537: LD_EXP 57
19541: ADD
19542: ST_TO_ADDR
// for i = 1 to 4 do
19543: LD_ADDR_VAR 0 2
19547: PUSH
19548: DOUBLE
19549: LD_INT 1
19551: DEC
19552: ST_TO_ADDR
19553: LD_INT 4
19555: PUSH
19556: FOR_TO
19557: IFFALSE 19657
// begin vc_chassis := ar_medium_trike ;
19559: LD_ADDR_OWVAR 37
19563: PUSH
19564: LD_INT 13
19566: ST_TO_ADDR
// vc_engine := engine_siberite ;
19567: LD_ADDR_OWVAR 39
19571: PUSH
19572: LD_INT 3
19574: ST_TO_ADDR
// vc_control := control_manual ;
19575: LD_ADDR_OWVAR 38
19579: PUSH
19580: LD_INT 1
19582: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19583: LD_ADDR_OWVAR 40
19587: PUSH
19588: LD_INT 27
19590: PUSH
19591: LD_INT 32
19593: PUSH
19594: LD_INT 88
19596: PUSH
19597: LD_INT 27
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: PUSH
19606: LD_VAR 0 2
19610: ARRAY
19611: ST_TO_ADDR
// un := CreateVehicle ;
19612: LD_ADDR_VAR 0 4
19616: PUSH
19617: CALL_OW 45
19621: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19622: LD_VAR 0 4
19626: PPUSH
19627: LD_INT 2
19629: PPUSH
19630: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19634: LD_VAR 0 4
19638: PPUSH
19639: LD_INT 54
19641: PPUSH
19642: LD_INT 15
19644: PPUSH
19645: LD_INT 6
19647: PPUSH
19648: LD_INT 0
19650: PPUSH
19651: CALL_OW 50
// end ;
19655: GO 19556
19657: POP
19658: POP
// for i = 1 to team do
19659: LD_ADDR_VAR 0 2
19663: PUSH
19664: DOUBLE
19665: LD_INT 1
19667: DEC
19668: ST_TO_ADDR
19669: LD_VAR 0 5
19673: PUSH
19674: FOR_TO
19675: IFFALSE 19772
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19677: LD_INT 22
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 58
19689: PUSH
19690: EMPTY
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 69
19701: IFFALSE 19749
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19703: LD_VAR 0 5
19707: PUSH
19708: LD_VAR 0 2
19712: ARRAY
19713: PPUSH
19714: LD_INT 22
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 58
19726: PUSH
19727: EMPTY
19728: LIST
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PPUSH
19734: CALL_OW 69
19738: PUSH
19739: LD_INT 1
19741: ARRAY
19742: PPUSH
19743: CALL_OW 52
19747: GO 19770
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19749: LD_VAR 0 5
19753: PUSH
19754: LD_VAR 0 2
19758: ARRAY
19759: PPUSH
19760: LD_INT 16
19762: PPUSH
19763: LD_INT 0
19765: PPUSH
19766: CALL_OW 49
// end ;
19770: GO 19674
19772: POP
19773: POP
// uc_side := 0 ;
19774: LD_ADDR_OWVAR 20
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// uc_nation := 0 ;
19782: LD_ADDR_OWVAR 21
19786: PUSH
19787: LD_INT 0
19789: ST_TO_ADDR
// vc_chassis := 31 ;
19790: LD_ADDR_OWVAR 37
19794: PUSH
19795: LD_INT 31
19797: ST_TO_ADDR
// vc_control := control_rider ;
19798: LD_ADDR_OWVAR 38
19802: PUSH
19803: LD_INT 4
19805: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19806: CALL_OW 45
19810: PPUSH
19811: LD_INT 96
19813: PPUSH
19814: LD_INT 20
19816: PPUSH
19817: LD_INT 0
19819: PPUSH
19820: CALL_OW 48
// end ; end_of_file end_of_file
19824: LD_VAR 0 1
19828: RET
// export globalGameSaveCounter ; every 0 0$1 do
19829: GO 19831
19831: DISABLE
// begin enable ;
19832: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19833: LD_STRING updateTimer(
19835: PUSH
19836: LD_OWVAR 1
19840: STR
19841: PUSH
19842: LD_STRING );
19844: STR
19845: PPUSH
19846: CALL_OW 559
// end ;
19850: END
// every 0 0$1 do
19851: GO 19853
19853: DISABLE
// begin globalGameSaveCounter := 0 ;
19854: LD_ADDR_EXP 60
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19862: LD_STRING setGameSaveCounter(0)
19864: PPUSH
19865: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19869: LD_STRING initStreamRollete();
19871: PPUSH
19872: CALL_OW 559
// InitStreamMode ;
19876: CALL 21221 0 0
// DefineStreamItems ( false ) ;
19880: LD_INT 0
19882: PPUSH
19883: CALL 21685 0 1
// end ;
19887: END
// export function SOS_MapStart ( ) ; begin
19888: LD_INT 0
19890: PPUSH
// if streamModeActive then
19891: LD_EXP 61
19895: IFFALSE 19904
// DefineStreamItems ( true ) ;
19897: LD_INT 1
19899: PPUSH
19900: CALL 21685 0 1
// UpdateLuaVariables ( ) ;
19904: CALL 19921 0 0
// UpdateFactoryWaypoints ( ) ;
19908: CALL 34807 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19912: CALL 35059 0 0
// end ;
19916: LD_VAR 0 1
19920: RET
// function UpdateLuaVariables ( ) ; begin
19921: LD_INT 0
19923: PPUSH
// if globalGameSaveCounter then
19924: LD_EXP 60
19928: IFFALSE 19962
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19930: LD_ADDR_EXP 60
19934: PUSH
19935: LD_EXP 60
19939: PPUSH
19940: CALL 81640 0 1
19944: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19945: LD_STRING setGameSaveCounter(
19947: PUSH
19948: LD_EXP 60
19952: STR
19953: PUSH
19954: LD_STRING )
19956: STR
19957: PPUSH
19958: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19962: LD_STRING setGameDifficulty(
19964: PUSH
19965: LD_OWVAR 67
19969: STR
19970: PUSH
19971: LD_STRING )
19973: STR
19974: PPUSH
19975: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19979: LD_STRING displayDifficulty(
19981: PUSH
19982: LD_OWVAR 67
19986: STR
19987: PUSH
19988: LD_STRING )
19990: STR
19991: PPUSH
19992: CALL_OW 559
// end ;
19996: LD_VAR 0 1
20000: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20001: LD_INT 0
20003: PPUSH
// if p2 = stream_mode then
20004: LD_VAR 0 2
20008: PUSH
20009: LD_INT 100
20011: EQUAL
20012: IFFALSE 21015
// begin if not StreamModeActive then
20014: LD_EXP 61
20018: NOT
20019: IFFALSE 20029
// StreamModeActive := true ;
20021: LD_ADDR_EXP 61
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 0 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 0
20036: EQUAL
20037: IFFALSE 20043
// InitStreamMode ;
20039: CALL 21221 0 0
// if p3 = 1 then
20043: LD_VAR 0 3
20047: PUSH
20048: LD_INT 1
20050: EQUAL
20051: IFFALSE 20061
// sRocket := true ;
20053: LD_ADDR_EXP 66
20057: PUSH
20058: LD_INT 1
20060: ST_TO_ADDR
// if p3 = 2 then
20061: LD_VAR 0 3
20065: PUSH
20066: LD_INT 2
20068: EQUAL
20069: IFFALSE 20079
// sSpeed := true ;
20071: LD_ADDR_EXP 65
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// if p3 = 3 then
20079: LD_VAR 0 3
20083: PUSH
20084: LD_INT 3
20086: EQUAL
20087: IFFALSE 20097
// sEngine := true ;
20089: LD_ADDR_EXP 67
20093: PUSH
20094: LD_INT 1
20096: ST_TO_ADDR
// if p3 = 4 then
20097: LD_VAR 0 3
20101: PUSH
20102: LD_INT 4
20104: EQUAL
20105: IFFALSE 20115
// sSpec := true ;
20107: LD_ADDR_EXP 64
20111: PUSH
20112: LD_INT 1
20114: ST_TO_ADDR
// if p3 = 5 then
20115: LD_VAR 0 3
20119: PUSH
20120: LD_INT 5
20122: EQUAL
20123: IFFALSE 20133
// sLevel := true ;
20125: LD_ADDR_EXP 68
20129: PUSH
20130: LD_INT 1
20132: ST_TO_ADDR
// if p3 = 6 then
20133: LD_VAR 0 3
20137: PUSH
20138: LD_INT 6
20140: EQUAL
20141: IFFALSE 20151
// sArmoury := true ;
20143: LD_ADDR_EXP 69
20147: PUSH
20148: LD_INT 1
20150: ST_TO_ADDR
// if p3 = 7 then
20151: LD_VAR 0 3
20155: PUSH
20156: LD_INT 7
20158: EQUAL
20159: IFFALSE 20169
// sRadar := true ;
20161: LD_ADDR_EXP 70
20165: PUSH
20166: LD_INT 1
20168: ST_TO_ADDR
// if p3 = 8 then
20169: LD_VAR 0 3
20173: PUSH
20174: LD_INT 8
20176: EQUAL
20177: IFFALSE 20187
// sBunker := true ;
20179: LD_ADDR_EXP 71
20183: PUSH
20184: LD_INT 1
20186: ST_TO_ADDR
// if p3 = 9 then
20187: LD_VAR 0 3
20191: PUSH
20192: LD_INT 9
20194: EQUAL
20195: IFFALSE 20205
// sHack := true ;
20197: LD_ADDR_EXP 72
20201: PUSH
20202: LD_INT 1
20204: ST_TO_ADDR
// if p3 = 10 then
20205: LD_VAR 0 3
20209: PUSH
20210: LD_INT 10
20212: EQUAL
20213: IFFALSE 20223
// sFire := true ;
20215: LD_ADDR_EXP 73
20219: PUSH
20220: LD_INT 1
20222: ST_TO_ADDR
// if p3 = 11 then
20223: LD_VAR 0 3
20227: PUSH
20228: LD_INT 11
20230: EQUAL
20231: IFFALSE 20241
// sRefresh := true ;
20233: LD_ADDR_EXP 74
20237: PUSH
20238: LD_INT 1
20240: ST_TO_ADDR
// if p3 = 12 then
20241: LD_VAR 0 3
20245: PUSH
20246: LD_INT 12
20248: EQUAL
20249: IFFALSE 20259
// sExp := true ;
20251: LD_ADDR_EXP 75
20255: PUSH
20256: LD_INT 1
20258: ST_TO_ADDR
// if p3 = 13 then
20259: LD_VAR 0 3
20263: PUSH
20264: LD_INT 13
20266: EQUAL
20267: IFFALSE 20277
// sDepot := true ;
20269: LD_ADDR_EXP 76
20273: PUSH
20274: LD_INT 1
20276: ST_TO_ADDR
// if p3 = 14 then
20277: LD_VAR 0 3
20281: PUSH
20282: LD_INT 14
20284: EQUAL
20285: IFFALSE 20295
// sFlag := true ;
20287: LD_ADDR_EXP 77
20291: PUSH
20292: LD_INT 1
20294: ST_TO_ADDR
// if p3 = 15 then
20295: LD_VAR 0 3
20299: PUSH
20300: LD_INT 15
20302: EQUAL
20303: IFFALSE 20313
// sKamikadze := true ;
20305: LD_ADDR_EXP 85
20309: PUSH
20310: LD_INT 1
20312: ST_TO_ADDR
// if p3 = 16 then
20313: LD_VAR 0 3
20317: PUSH
20318: LD_INT 16
20320: EQUAL
20321: IFFALSE 20331
// sTroll := true ;
20323: LD_ADDR_EXP 86
20327: PUSH
20328: LD_INT 1
20330: ST_TO_ADDR
// if p3 = 17 then
20331: LD_VAR 0 3
20335: PUSH
20336: LD_INT 17
20338: EQUAL
20339: IFFALSE 20349
// sSlow := true ;
20341: LD_ADDR_EXP 87
20345: PUSH
20346: LD_INT 1
20348: ST_TO_ADDR
// if p3 = 18 then
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 18
20356: EQUAL
20357: IFFALSE 20367
// sLack := true ;
20359: LD_ADDR_EXP 88
20363: PUSH
20364: LD_INT 1
20366: ST_TO_ADDR
// if p3 = 19 then
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 19
20374: EQUAL
20375: IFFALSE 20385
// sTank := true ;
20377: LD_ADDR_EXP 90
20381: PUSH
20382: LD_INT 1
20384: ST_TO_ADDR
// if p3 = 20 then
20385: LD_VAR 0 3
20389: PUSH
20390: LD_INT 20
20392: EQUAL
20393: IFFALSE 20403
// sRemote := true ;
20395: LD_ADDR_EXP 91
20399: PUSH
20400: LD_INT 1
20402: ST_TO_ADDR
// if p3 = 21 then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 21
20410: EQUAL
20411: IFFALSE 20421
// sPowell := true ;
20413: LD_ADDR_EXP 92
20417: PUSH
20418: LD_INT 1
20420: ST_TO_ADDR
// if p3 = 22 then
20421: LD_VAR 0 3
20425: PUSH
20426: LD_INT 22
20428: EQUAL
20429: IFFALSE 20439
// sTeleport := true ;
20431: LD_ADDR_EXP 95
20435: PUSH
20436: LD_INT 1
20438: ST_TO_ADDR
// if p3 = 23 then
20439: LD_VAR 0 3
20443: PUSH
20444: LD_INT 23
20446: EQUAL
20447: IFFALSE 20457
// sOilTower := true ;
20449: LD_ADDR_EXP 97
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// if p3 = 24 then
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 24
20464: EQUAL
20465: IFFALSE 20475
// sShovel := true ;
20467: LD_ADDR_EXP 98
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// if p3 = 25 then
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 25
20482: EQUAL
20483: IFFALSE 20493
// sSheik := true ;
20485: LD_ADDR_EXP 99
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if p3 = 26 then
20493: LD_VAR 0 3
20497: PUSH
20498: LD_INT 26
20500: EQUAL
20501: IFFALSE 20511
// sEarthquake := true ;
20503: LD_ADDR_EXP 101
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if p3 = 27 then
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 27
20518: EQUAL
20519: IFFALSE 20529
// sAI := true ;
20521: LD_ADDR_EXP 102
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 28 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 28
20536: EQUAL
20537: IFFALSE 20547
// sCargo := true ;
20539: LD_ADDR_EXP 105
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// if p3 = 29 then
20547: LD_VAR 0 3
20551: PUSH
20552: LD_INT 29
20554: EQUAL
20555: IFFALSE 20565
// sDLaser := true ;
20557: LD_ADDR_EXP 106
20561: PUSH
20562: LD_INT 1
20564: ST_TO_ADDR
// if p3 = 30 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 30
20572: EQUAL
20573: IFFALSE 20583
// sExchange := true ;
20575: LD_ADDR_EXP 107
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 31 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 31
20590: EQUAL
20591: IFFALSE 20601
// sFac := true ;
20593: LD_ADDR_EXP 108
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// if p3 = 32 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 32
20608: EQUAL
20609: IFFALSE 20619
// sPower := true ;
20611: LD_ADDR_EXP 109
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// if p3 = 33 then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 33
20626: EQUAL
20627: IFFALSE 20637
// sRandom := true ;
20629: LD_ADDR_EXP 110
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// if p3 = 34 then
20637: LD_VAR 0 3
20641: PUSH
20642: LD_INT 34
20644: EQUAL
20645: IFFALSE 20655
// sShield := true ;
20647: LD_ADDR_EXP 111
20651: PUSH
20652: LD_INT 1
20654: ST_TO_ADDR
// if p3 = 35 then
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 35
20662: EQUAL
20663: IFFALSE 20673
// sTime := true ;
20665: LD_ADDR_EXP 112
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// if p3 = 36 then
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 36
20680: EQUAL
20681: IFFALSE 20691
// sTools := true ;
20683: LD_ADDR_EXP 113
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
// if p3 = 101 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 101
20698: EQUAL
20699: IFFALSE 20709
// sSold := true ;
20701: LD_ADDR_EXP 78
20705: PUSH
20706: LD_INT 1
20708: ST_TO_ADDR
// if p3 = 102 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_INT 102
20716: EQUAL
20717: IFFALSE 20727
// sDiff := true ;
20719: LD_ADDR_EXP 79
20723: PUSH
20724: LD_INT 1
20726: ST_TO_ADDR
// if p3 = 103 then
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 103
20734: EQUAL
20735: IFFALSE 20745
// sFog := true ;
20737: LD_ADDR_EXP 82
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// if p3 = 104 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 104
20752: EQUAL
20753: IFFALSE 20763
// sReset := true ;
20755: LD_ADDR_EXP 83
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// if p3 = 105 then
20763: LD_VAR 0 3
20767: PUSH
20768: LD_INT 105
20770: EQUAL
20771: IFFALSE 20781
// sSun := true ;
20773: LD_ADDR_EXP 84
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 106 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 106
20788: EQUAL
20789: IFFALSE 20799
// sTiger := true ;
20791: LD_ADDR_EXP 80
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// if p3 = 107 then
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 107
20806: EQUAL
20807: IFFALSE 20817
// sBomb := true ;
20809: LD_ADDR_EXP 81
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if p3 = 108 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 108
20824: EQUAL
20825: IFFALSE 20835
// sWound := true ;
20827: LD_ADDR_EXP 89
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// if p3 = 109 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 109
20842: EQUAL
20843: IFFALSE 20853
// sBetray := true ;
20845: LD_ADDR_EXP 93
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// if p3 = 110 then
20853: LD_VAR 0 3
20857: PUSH
20858: LD_INT 110
20860: EQUAL
20861: IFFALSE 20871
// sContamin := true ;
20863: LD_ADDR_EXP 94
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// if p3 = 111 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 111
20878: EQUAL
20879: IFFALSE 20889
// sOil := true ;
20881: LD_ADDR_EXP 96
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// if p3 = 112 then
20889: LD_VAR 0 3
20893: PUSH
20894: LD_INT 112
20896: EQUAL
20897: IFFALSE 20907
// sStu := true ;
20899: LD_ADDR_EXP 100
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// if p3 = 113 then
20907: LD_VAR 0 3
20911: PUSH
20912: LD_INT 113
20914: EQUAL
20915: IFFALSE 20925
// sBazooka := true ;
20917: LD_ADDR_EXP 103
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// if p3 = 114 then
20925: LD_VAR 0 3
20929: PUSH
20930: LD_INT 114
20932: EQUAL
20933: IFFALSE 20943
// sMortar := true ;
20935: LD_ADDR_EXP 104
20939: PUSH
20940: LD_INT 1
20942: ST_TO_ADDR
// if p3 = 115 then
20943: LD_VAR 0 3
20947: PUSH
20948: LD_INT 115
20950: EQUAL
20951: IFFALSE 20961
// sRanger := true ;
20953: LD_ADDR_EXP 114
20957: PUSH
20958: LD_INT 1
20960: ST_TO_ADDR
// if p3 = 116 then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 116
20968: EQUAL
20969: IFFALSE 20979
// sComputer := true ;
20971: LD_ADDR_EXP 115
20975: PUSH
20976: LD_INT 1
20978: ST_TO_ADDR
// if p3 = 117 then
20979: LD_VAR 0 3
20983: PUSH
20984: LD_INT 117
20986: EQUAL
20987: IFFALSE 20997
// s30 := true ;
20989: LD_ADDR_EXP 116
20993: PUSH
20994: LD_INT 1
20996: ST_TO_ADDR
// if p3 = 118 then
20997: LD_VAR 0 3
21001: PUSH
21002: LD_INT 118
21004: EQUAL
21005: IFFALSE 21015
// s60 := true ;
21007: LD_ADDR_EXP 117
21011: PUSH
21012: LD_INT 1
21014: ST_TO_ADDR
// end ; if p2 = hack_mode then
21015: LD_VAR 0 2
21019: PUSH
21020: LD_INT 101
21022: EQUAL
21023: IFFALSE 21151
// begin case p3 of 1 :
21025: LD_VAR 0 3
21029: PUSH
21030: LD_INT 1
21032: DOUBLE
21033: EQUAL
21034: IFTRUE 21038
21036: GO 21045
21038: POP
// hHackUnlimitedResources ; 2 :
21039: CALL 33414 0 0
21043: GO 21151
21045: LD_INT 2
21047: DOUBLE
21048: EQUAL
21049: IFTRUE 21053
21051: GO 21060
21053: POP
// hHackSetLevel10 ; 3 :
21054: CALL 33547 0 0
21058: GO 21151
21060: LD_INT 3
21062: DOUBLE
21063: EQUAL
21064: IFTRUE 21068
21066: GO 21075
21068: POP
// hHackSetLevel10YourUnits ; 4 :
21069: CALL 33632 0 0
21073: GO 21151
21075: LD_INT 4
21077: DOUBLE
21078: EQUAL
21079: IFTRUE 21083
21081: GO 21090
21083: POP
// hHackInvincible ; 5 :
21084: CALL 34080 0 0
21088: GO 21151
21090: LD_INT 5
21092: DOUBLE
21093: EQUAL
21094: IFTRUE 21098
21096: GO 21105
21098: POP
// hHackInvisible ; 6 :
21099: CALL 34191 0 0
21103: GO 21151
21105: LD_INT 6
21107: DOUBLE
21108: EQUAL
21109: IFTRUE 21113
21111: GO 21120
21113: POP
// hHackChangeYourSide ; 7 :
21114: CALL 34248 0 0
21118: GO 21151
21120: LD_INT 7
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21135
21128: POP
// hHackChangeUnitSide ; 8 :
21129: CALL 34290 0 0
21133: GO 21151
21135: LD_INT 8
21137: DOUBLE
21138: EQUAL
21139: IFTRUE 21143
21141: GO 21150
21143: POP
// hHackFog ; end ;
21144: CALL 34391 0 0
21148: GO 21151
21150: POP
// end ; if p2 = game_save_mode then
21151: LD_VAR 0 2
21155: PUSH
21156: LD_INT 102
21158: EQUAL
21159: IFFALSE 21216
// begin if p3 = 1 then
21161: LD_VAR 0 3
21165: PUSH
21166: LD_INT 1
21168: EQUAL
21169: IFFALSE 21181
// globalGameSaveCounter := p4 ;
21171: LD_ADDR_EXP 60
21175: PUSH
21176: LD_VAR 0 4
21180: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21181: LD_VAR 0 3
21185: PUSH
21186: LD_INT 2
21188: EQUAL
21189: IFFALSE 21197
21191: PUSH
21192: LD_EXP 60
21196: AND
21197: IFFALSE 21216
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21199: LD_STRING setGameSaveCounter(
21201: PUSH
21202: LD_EXP 60
21206: STR
21207: PUSH
21208: LD_STRING )
21210: STR
21211: PPUSH
21212: CALL_OW 559
// end ; end ;
21216: LD_VAR 0 7
21220: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21221: LD_INT 0
21223: PPUSH
// streamModeActive := false ;
21224: LD_ADDR_EXP 61
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// normalCounter := 36 ;
21232: LD_ADDR_EXP 62
21236: PUSH
21237: LD_INT 36
21239: ST_TO_ADDR
// hardcoreCounter := 18 ;
21240: LD_ADDR_EXP 63
21244: PUSH
21245: LD_INT 18
21247: ST_TO_ADDR
// sRocket := false ;
21248: LD_ADDR_EXP 66
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// sSpeed := false ;
21256: LD_ADDR_EXP 65
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// sEngine := false ;
21264: LD_ADDR_EXP 67
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// sSpec := false ;
21272: LD_ADDR_EXP 64
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// sLevel := false ;
21280: LD_ADDR_EXP 68
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// sArmoury := false ;
21288: LD_ADDR_EXP 69
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// sRadar := false ;
21296: LD_ADDR_EXP 70
21300: PUSH
21301: LD_INT 0
21303: ST_TO_ADDR
// sBunker := false ;
21304: LD_ADDR_EXP 71
21308: PUSH
21309: LD_INT 0
21311: ST_TO_ADDR
// sHack := false ;
21312: LD_ADDR_EXP 72
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// sFire := false ;
21320: LD_ADDR_EXP 73
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// sRefresh := false ;
21328: LD_ADDR_EXP 74
21332: PUSH
21333: LD_INT 0
21335: ST_TO_ADDR
// sExp := false ;
21336: LD_ADDR_EXP 75
21340: PUSH
21341: LD_INT 0
21343: ST_TO_ADDR
// sDepot := false ;
21344: LD_ADDR_EXP 76
21348: PUSH
21349: LD_INT 0
21351: ST_TO_ADDR
// sFlag := false ;
21352: LD_ADDR_EXP 77
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
// sKamikadze := false ;
21360: LD_ADDR_EXP 85
21364: PUSH
21365: LD_INT 0
21367: ST_TO_ADDR
// sTroll := false ;
21368: LD_ADDR_EXP 86
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
// sSlow := false ;
21376: LD_ADDR_EXP 87
21380: PUSH
21381: LD_INT 0
21383: ST_TO_ADDR
// sLack := false ;
21384: LD_ADDR_EXP 88
21388: PUSH
21389: LD_INT 0
21391: ST_TO_ADDR
// sTank := false ;
21392: LD_ADDR_EXP 90
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// sRemote := false ;
21400: LD_ADDR_EXP 91
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// sPowell := false ;
21408: LD_ADDR_EXP 92
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// sTeleport := false ;
21416: LD_ADDR_EXP 95
21420: PUSH
21421: LD_INT 0
21423: ST_TO_ADDR
// sOilTower := false ;
21424: LD_ADDR_EXP 97
21428: PUSH
21429: LD_INT 0
21431: ST_TO_ADDR
// sShovel := false ;
21432: LD_ADDR_EXP 98
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// sSheik := false ;
21440: LD_ADDR_EXP 99
21444: PUSH
21445: LD_INT 0
21447: ST_TO_ADDR
// sEarthquake := false ;
21448: LD_ADDR_EXP 101
21452: PUSH
21453: LD_INT 0
21455: ST_TO_ADDR
// sAI := false ;
21456: LD_ADDR_EXP 102
21460: PUSH
21461: LD_INT 0
21463: ST_TO_ADDR
// sCargo := false ;
21464: LD_ADDR_EXP 105
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// sDLaser := false ;
21472: LD_ADDR_EXP 106
21476: PUSH
21477: LD_INT 0
21479: ST_TO_ADDR
// sExchange := false ;
21480: LD_ADDR_EXP 107
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// sFac := false ;
21488: LD_ADDR_EXP 108
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
// sPower := false ;
21496: LD_ADDR_EXP 109
21500: PUSH
21501: LD_INT 0
21503: ST_TO_ADDR
// sRandom := false ;
21504: LD_ADDR_EXP 110
21508: PUSH
21509: LD_INT 0
21511: ST_TO_ADDR
// sShield := false ;
21512: LD_ADDR_EXP 111
21516: PUSH
21517: LD_INT 0
21519: ST_TO_ADDR
// sTime := false ;
21520: LD_ADDR_EXP 112
21524: PUSH
21525: LD_INT 0
21527: ST_TO_ADDR
// sTools := false ;
21528: LD_ADDR_EXP 113
21532: PUSH
21533: LD_INT 0
21535: ST_TO_ADDR
// sSold := false ;
21536: LD_ADDR_EXP 78
21540: PUSH
21541: LD_INT 0
21543: ST_TO_ADDR
// sDiff := false ;
21544: LD_ADDR_EXP 79
21548: PUSH
21549: LD_INT 0
21551: ST_TO_ADDR
// sFog := false ;
21552: LD_ADDR_EXP 82
21556: PUSH
21557: LD_INT 0
21559: ST_TO_ADDR
// sReset := false ;
21560: LD_ADDR_EXP 83
21564: PUSH
21565: LD_INT 0
21567: ST_TO_ADDR
// sSun := false ;
21568: LD_ADDR_EXP 84
21572: PUSH
21573: LD_INT 0
21575: ST_TO_ADDR
// sTiger := false ;
21576: LD_ADDR_EXP 80
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// sBomb := false ;
21584: LD_ADDR_EXP 81
21588: PUSH
21589: LD_INT 0
21591: ST_TO_ADDR
// sWound := false ;
21592: LD_ADDR_EXP 89
21596: PUSH
21597: LD_INT 0
21599: ST_TO_ADDR
// sBetray := false ;
21600: LD_ADDR_EXP 93
21604: PUSH
21605: LD_INT 0
21607: ST_TO_ADDR
// sContamin := false ;
21608: LD_ADDR_EXP 94
21612: PUSH
21613: LD_INT 0
21615: ST_TO_ADDR
// sOil := false ;
21616: LD_ADDR_EXP 96
21620: PUSH
21621: LD_INT 0
21623: ST_TO_ADDR
// sStu := false ;
21624: LD_ADDR_EXP 100
21628: PUSH
21629: LD_INT 0
21631: ST_TO_ADDR
// sBazooka := false ;
21632: LD_ADDR_EXP 103
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// sMortar := false ;
21640: LD_ADDR_EXP 104
21644: PUSH
21645: LD_INT 0
21647: ST_TO_ADDR
// sRanger := false ;
21648: LD_ADDR_EXP 114
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
// sComputer := false ;
21656: LD_ADDR_EXP 115
21660: PUSH
21661: LD_INT 0
21663: ST_TO_ADDR
// s30 := false ;
21664: LD_ADDR_EXP 116
21668: PUSH
21669: LD_INT 0
21671: ST_TO_ADDR
// s60 := false ;
21672: LD_ADDR_EXP 117
21676: PUSH
21677: LD_INT 0
21679: ST_TO_ADDR
// end ;
21680: LD_VAR 0 1
21684: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21685: LD_INT 0
21687: PPUSH
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
// result := [ ] ;
21694: LD_ADDR_VAR 0 2
21698: PUSH
21699: EMPTY
21700: ST_TO_ADDR
// if campaign_id = 1 then
21701: LD_OWVAR 69
21705: PUSH
21706: LD_INT 1
21708: EQUAL
21709: IFFALSE 24875
// begin case mission_number of 1 :
21711: LD_OWVAR 70
21715: PUSH
21716: LD_INT 1
21718: DOUBLE
21719: EQUAL
21720: IFTRUE 21724
21722: GO 21800
21724: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21725: LD_ADDR_VAR 0 2
21729: PUSH
21730: LD_INT 2
21732: PUSH
21733: LD_INT 4
21735: PUSH
21736: LD_INT 11
21738: PUSH
21739: LD_INT 12
21741: PUSH
21742: LD_INT 15
21744: PUSH
21745: LD_INT 16
21747: PUSH
21748: LD_INT 22
21750: PUSH
21751: LD_INT 23
21753: PUSH
21754: LD_INT 26
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 101
21770: PUSH
21771: LD_INT 102
21773: PUSH
21774: LD_INT 106
21776: PUSH
21777: LD_INT 116
21779: PUSH
21780: LD_INT 117
21782: PUSH
21783: LD_INT 118
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: ST_TO_ADDR
21798: GO 24873
21800: LD_INT 2
21802: DOUBLE
21803: EQUAL
21804: IFTRUE 21808
21806: GO 21892
21808: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21809: LD_ADDR_VAR 0 2
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 4
21819: PUSH
21820: LD_INT 11
21822: PUSH
21823: LD_INT 12
21825: PUSH
21826: LD_INT 15
21828: PUSH
21829: LD_INT 16
21831: PUSH
21832: LD_INT 22
21834: PUSH
21835: LD_INT 23
21837: PUSH
21838: LD_INT 26
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 101
21854: PUSH
21855: LD_INT 102
21857: PUSH
21858: LD_INT 105
21860: PUSH
21861: LD_INT 106
21863: PUSH
21864: LD_INT 108
21866: PUSH
21867: LD_INT 116
21869: PUSH
21870: LD_INT 117
21872: PUSH
21873: LD_INT 118
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: ST_TO_ADDR
21890: GO 24873
21892: LD_INT 3
21894: DOUBLE
21895: EQUAL
21896: IFTRUE 21900
21898: GO 21988
21900: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21901: LD_ADDR_VAR 0 2
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: LD_INT 4
21911: PUSH
21912: LD_INT 5
21914: PUSH
21915: LD_INT 11
21917: PUSH
21918: LD_INT 12
21920: PUSH
21921: LD_INT 15
21923: PUSH
21924: LD_INT 16
21926: PUSH
21927: LD_INT 22
21929: PUSH
21930: LD_INT 26
21932: PUSH
21933: LD_INT 36
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 101
21950: PUSH
21951: LD_INT 102
21953: PUSH
21954: LD_INT 105
21956: PUSH
21957: LD_INT 106
21959: PUSH
21960: LD_INT 108
21962: PUSH
21963: LD_INT 116
21965: PUSH
21966: LD_INT 117
21968: PUSH
21969: LD_INT 118
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: ST_TO_ADDR
21986: GO 24873
21988: LD_INT 4
21990: DOUBLE
21991: EQUAL
21992: IFTRUE 21996
21994: GO 22092
21996: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21997: LD_ADDR_VAR 0 2
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: LD_INT 4
22007: PUSH
22008: LD_INT 5
22010: PUSH
22011: LD_INT 8
22013: PUSH
22014: LD_INT 11
22016: PUSH
22017: LD_INT 12
22019: PUSH
22020: LD_INT 15
22022: PUSH
22023: LD_INT 16
22025: PUSH
22026: LD_INT 22
22028: PUSH
22029: LD_INT 23
22031: PUSH
22032: LD_INT 26
22034: PUSH
22035: LD_INT 36
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 101
22054: PUSH
22055: LD_INT 102
22057: PUSH
22058: LD_INT 105
22060: PUSH
22061: LD_INT 106
22063: PUSH
22064: LD_INT 108
22066: PUSH
22067: LD_INT 116
22069: PUSH
22070: LD_INT 117
22072: PUSH
22073: LD_INT 118
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: ST_TO_ADDR
22090: GO 24873
22092: LD_INT 5
22094: DOUBLE
22095: EQUAL
22096: IFTRUE 22100
22098: GO 22212
22100: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22101: LD_ADDR_VAR 0 2
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 4
22111: PUSH
22112: LD_INT 5
22114: PUSH
22115: LD_INT 6
22117: PUSH
22118: LD_INT 8
22120: PUSH
22121: LD_INT 11
22123: PUSH
22124: LD_INT 12
22126: PUSH
22127: LD_INT 15
22129: PUSH
22130: LD_INT 16
22132: PUSH
22133: LD_INT 22
22135: PUSH
22136: LD_INT 23
22138: PUSH
22139: LD_INT 25
22141: PUSH
22142: LD_INT 26
22144: PUSH
22145: LD_INT 36
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 101
22166: PUSH
22167: LD_INT 102
22169: PUSH
22170: LD_INT 105
22172: PUSH
22173: LD_INT 106
22175: PUSH
22176: LD_INT 108
22178: PUSH
22179: LD_INT 109
22181: PUSH
22182: LD_INT 112
22184: PUSH
22185: LD_INT 116
22187: PUSH
22188: LD_INT 117
22190: PUSH
22191: LD_INT 118
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 24873
22212: LD_INT 6
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22352
22220: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22221: LD_ADDR_VAR 0 2
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 4
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: LD_INT 6
22237: PUSH
22238: LD_INT 8
22240: PUSH
22241: LD_INT 11
22243: PUSH
22244: LD_INT 12
22246: PUSH
22247: LD_INT 15
22249: PUSH
22250: LD_INT 16
22252: PUSH
22253: LD_INT 20
22255: PUSH
22256: LD_INT 21
22258: PUSH
22259: LD_INT 22
22261: PUSH
22262: LD_INT 23
22264: PUSH
22265: LD_INT 25
22267: PUSH
22268: LD_INT 26
22270: PUSH
22271: LD_INT 30
22273: PUSH
22274: LD_INT 31
22276: PUSH
22277: LD_INT 32
22279: PUSH
22280: LD_INT 36
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 101
22306: PUSH
22307: LD_INT 102
22309: PUSH
22310: LD_INT 105
22312: PUSH
22313: LD_INT 106
22315: PUSH
22316: LD_INT 108
22318: PUSH
22319: LD_INT 109
22321: PUSH
22322: LD_INT 112
22324: PUSH
22325: LD_INT 116
22327: PUSH
22328: LD_INT 117
22330: PUSH
22331: LD_INT 118
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: ST_TO_ADDR
22350: GO 24873
22352: LD_INT 7
22354: DOUBLE
22355: EQUAL
22356: IFTRUE 22360
22358: GO 22472
22360: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22361: LD_ADDR_VAR 0 2
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: LD_INT 4
22371: PUSH
22372: LD_INT 5
22374: PUSH
22375: LD_INT 7
22377: PUSH
22378: LD_INT 11
22380: PUSH
22381: LD_INT 12
22383: PUSH
22384: LD_INT 15
22386: PUSH
22387: LD_INT 16
22389: PUSH
22390: LD_INT 20
22392: PUSH
22393: LD_INT 21
22395: PUSH
22396: LD_INT 22
22398: PUSH
22399: LD_INT 23
22401: PUSH
22402: LD_INT 25
22404: PUSH
22405: LD_INT 26
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 101
22426: PUSH
22427: LD_INT 102
22429: PUSH
22430: LD_INT 103
22432: PUSH
22433: LD_INT 105
22435: PUSH
22436: LD_INT 106
22438: PUSH
22439: LD_INT 108
22441: PUSH
22442: LD_INT 112
22444: PUSH
22445: LD_INT 116
22447: PUSH
22448: LD_INT 117
22450: PUSH
22451: LD_INT 118
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: ST_TO_ADDR
22470: GO 24873
22472: LD_INT 8
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22620
22480: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: LD_INT 4
22491: PUSH
22492: LD_INT 5
22494: PUSH
22495: LD_INT 6
22497: PUSH
22498: LD_INT 7
22500: PUSH
22501: LD_INT 8
22503: PUSH
22504: LD_INT 11
22506: PUSH
22507: LD_INT 12
22509: PUSH
22510: LD_INT 15
22512: PUSH
22513: LD_INT 16
22515: PUSH
22516: LD_INT 20
22518: PUSH
22519: LD_INT 21
22521: PUSH
22522: LD_INT 22
22524: PUSH
22525: LD_INT 23
22527: PUSH
22528: LD_INT 25
22530: PUSH
22531: LD_INT 26
22533: PUSH
22534: LD_INT 30
22536: PUSH
22537: LD_INT 31
22539: PUSH
22540: LD_INT 32
22542: PUSH
22543: LD_INT 36
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 101
22570: PUSH
22571: LD_INT 102
22573: PUSH
22574: LD_INT 103
22576: PUSH
22577: LD_INT 105
22579: PUSH
22580: LD_INT 106
22582: PUSH
22583: LD_INT 108
22585: PUSH
22586: LD_INT 109
22588: PUSH
22589: LD_INT 112
22591: PUSH
22592: LD_INT 116
22594: PUSH
22595: LD_INT 117
22597: PUSH
22598: LD_INT 118
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: ST_TO_ADDR
22618: GO 24873
22620: LD_INT 9
22622: DOUBLE
22623: EQUAL
22624: IFTRUE 22628
22626: GO 22776
22628: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22629: LD_ADDR_VAR 0 2
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: LD_INT 4
22639: PUSH
22640: LD_INT 5
22642: PUSH
22643: LD_INT 6
22645: PUSH
22646: LD_INT 7
22648: PUSH
22649: LD_INT 8
22651: PUSH
22652: LD_INT 11
22654: PUSH
22655: LD_INT 12
22657: PUSH
22658: LD_INT 15
22660: PUSH
22661: LD_INT 16
22663: PUSH
22664: LD_INT 20
22666: PUSH
22667: LD_INT 21
22669: PUSH
22670: LD_INT 22
22672: PUSH
22673: LD_INT 23
22675: PUSH
22676: LD_INT 25
22678: PUSH
22679: LD_INT 26
22681: PUSH
22682: LD_INT 28
22684: PUSH
22685: LD_INT 30
22687: PUSH
22688: LD_INT 31
22690: PUSH
22691: LD_INT 32
22693: PUSH
22694: LD_INT 36
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 101
22722: PUSH
22723: LD_INT 102
22725: PUSH
22726: LD_INT 103
22728: PUSH
22729: LD_INT 105
22731: PUSH
22732: LD_INT 106
22734: PUSH
22735: LD_INT 108
22737: PUSH
22738: LD_INT 109
22740: PUSH
22741: LD_INT 112
22743: PUSH
22744: LD_INT 114
22746: PUSH
22747: LD_INT 116
22749: PUSH
22750: LD_INT 117
22752: PUSH
22753: LD_INT 118
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: ST_TO_ADDR
22774: GO 24873
22776: LD_INT 10
22778: DOUBLE
22779: EQUAL
22780: IFTRUE 22784
22782: GO 22980
22784: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22785: LD_ADDR_VAR 0 2
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 4
22795: PUSH
22796: LD_INT 5
22798: PUSH
22799: LD_INT 6
22801: PUSH
22802: LD_INT 7
22804: PUSH
22805: LD_INT 8
22807: PUSH
22808: LD_INT 9
22810: PUSH
22811: LD_INT 10
22813: PUSH
22814: LD_INT 11
22816: PUSH
22817: LD_INT 12
22819: PUSH
22820: LD_INT 13
22822: PUSH
22823: LD_INT 14
22825: PUSH
22826: LD_INT 15
22828: PUSH
22829: LD_INT 16
22831: PUSH
22832: LD_INT 17
22834: PUSH
22835: LD_INT 18
22837: PUSH
22838: LD_INT 19
22840: PUSH
22841: LD_INT 20
22843: PUSH
22844: LD_INT 21
22846: PUSH
22847: LD_INT 22
22849: PUSH
22850: LD_INT 23
22852: PUSH
22853: LD_INT 24
22855: PUSH
22856: LD_INT 25
22858: PUSH
22859: LD_INT 26
22861: PUSH
22862: LD_INT 28
22864: PUSH
22865: LD_INT 30
22867: PUSH
22868: LD_INT 31
22870: PUSH
22871: LD_INT 32
22873: PUSH
22874: LD_INT 36
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 101
22910: PUSH
22911: LD_INT 102
22913: PUSH
22914: LD_INT 103
22916: PUSH
22917: LD_INT 104
22919: PUSH
22920: LD_INT 105
22922: PUSH
22923: LD_INT 106
22925: PUSH
22926: LD_INT 107
22928: PUSH
22929: LD_INT 108
22931: PUSH
22932: LD_INT 109
22934: PUSH
22935: LD_INT 110
22937: PUSH
22938: LD_INT 111
22940: PUSH
22941: LD_INT 112
22943: PUSH
22944: LD_INT 114
22946: PUSH
22947: LD_INT 116
22949: PUSH
22950: LD_INT 117
22952: PUSH
22953: LD_INT 118
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: ST_TO_ADDR
22978: GO 24873
22980: LD_INT 11
22982: DOUBLE
22983: EQUAL
22984: IFTRUE 22988
22986: GO 23192
22988: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22989: LD_ADDR_VAR 0 2
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: LD_INT 3
22999: PUSH
23000: LD_INT 4
23002: PUSH
23003: LD_INT 5
23005: PUSH
23006: LD_INT 6
23008: PUSH
23009: LD_INT 7
23011: PUSH
23012: LD_INT 8
23014: PUSH
23015: LD_INT 9
23017: PUSH
23018: LD_INT 10
23020: PUSH
23021: LD_INT 11
23023: PUSH
23024: LD_INT 12
23026: PUSH
23027: LD_INT 13
23029: PUSH
23030: LD_INT 14
23032: PUSH
23033: LD_INT 15
23035: PUSH
23036: LD_INT 16
23038: PUSH
23039: LD_INT 17
23041: PUSH
23042: LD_INT 18
23044: PUSH
23045: LD_INT 19
23047: PUSH
23048: LD_INT 20
23050: PUSH
23051: LD_INT 21
23053: PUSH
23054: LD_INT 22
23056: PUSH
23057: LD_INT 23
23059: PUSH
23060: LD_INT 24
23062: PUSH
23063: LD_INT 25
23065: PUSH
23066: LD_INT 26
23068: PUSH
23069: LD_INT 28
23071: PUSH
23072: LD_INT 30
23074: PUSH
23075: LD_INT 31
23077: PUSH
23078: LD_INT 32
23080: PUSH
23081: LD_INT 34
23083: PUSH
23084: LD_INT 36
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 101
23122: PUSH
23123: LD_INT 102
23125: PUSH
23126: LD_INT 103
23128: PUSH
23129: LD_INT 104
23131: PUSH
23132: LD_INT 105
23134: PUSH
23135: LD_INT 106
23137: PUSH
23138: LD_INT 107
23140: PUSH
23141: LD_INT 108
23143: PUSH
23144: LD_INT 109
23146: PUSH
23147: LD_INT 110
23149: PUSH
23150: LD_INT 111
23152: PUSH
23153: LD_INT 112
23155: PUSH
23156: LD_INT 114
23158: PUSH
23159: LD_INT 116
23161: PUSH
23162: LD_INT 117
23164: PUSH
23165: LD_INT 118
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: ST_TO_ADDR
23190: GO 24873
23192: LD_INT 12
23194: DOUBLE
23195: EQUAL
23196: IFTRUE 23200
23198: GO 23420
23200: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23201: LD_ADDR_VAR 0 2
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: LD_INT 2
23211: PUSH
23212: LD_INT 3
23214: PUSH
23215: LD_INT 4
23217: PUSH
23218: LD_INT 5
23220: PUSH
23221: LD_INT 6
23223: PUSH
23224: LD_INT 7
23226: PUSH
23227: LD_INT 8
23229: PUSH
23230: LD_INT 9
23232: PUSH
23233: LD_INT 10
23235: PUSH
23236: LD_INT 11
23238: PUSH
23239: LD_INT 12
23241: PUSH
23242: LD_INT 13
23244: PUSH
23245: LD_INT 14
23247: PUSH
23248: LD_INT 15
23250: PUSH
23251: LD_INT 16
23253: PUSH
23254: LD_INT 17
23256: PUSH
23257: LD_INT 18
23259: PUSH
23260: LD_INT 19
23262: PUSH
23263: LD_INT 20
23265: PUSH
23266: LD_INT 21
23268: PUSH
23269: LD_INT 22
23271: PUSH
23272: LD_INT 23
23274: PUSH
23275: LD_INT 24
23277: PUSH
23278: LD_INT 25
23280: PUSH
23281: LD_INT 26
23283: PUSH
23284: LD_INT 27
23286: PUSH
23287: LD_INT 28
23289: PUSH
23290: LD_INT 30
23292: PUSH
23293: LD_INT 31
23295: PUSH
23296: LD_INT 32
23298: PUSH
23299: LD_INT 33
23301: PUSH
23302: LD_INT 34
23304: PUSH
23305: LD_INT 36
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 101
23346: PUSH
23347: LD_INT 102
23349: PUSH
23350: LD_INT 103
23352: PUSH
23353: LD_INT 104
23355: PUSH
23356: LD_INT 105
23358: PUSH
23359: LD_INT 106
23361: PUSH
23362: LD_INT 107
23364: PUSH
23365: LD_INT 108
23367: PUSH
23368: LD_INT 109
23370: PUSH
23371: LD_INT 110
23373: PUSH
23374: LD_INT 111
23376: PUSH
23377: LD_INT 112
23379: PUSH
23380: LD_INT 113
23382: PUSH
23383: LD_INT 114
23385: PUSH
23386: LD_INT 116
23388: PUSH
23389: LD_INT 117
23391: PUSH
23392: LD_INT 118
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: ST_TO_ADDR
23418: GO 24873
23420: LD_INT 13
23422: DOUBLE
23423: EQUAL
23424: IFTRUE 23428
23426: GO 23636
23428: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: LD_INT 3
23442: PUSH
23443: LD_INT 4
23445: PUSH
23446: LD_INT 5
23448: PUSH
23449: LD_INT 8
23451: PUSH
23452: LD_INT 9
23454: PUSH
23455: LD_INT 10
23457: PUSH
23458: LD_INT 11
23460: PUSH
23461: LD_INT 12
23463: PUSH
23464: LD_INT 14
23466: PUSH
23467: LD_INT 15
23469: PUSH
23470: LD_INT 16
23472: PUSH
23473: LD_INT 17
23475: PUSH
23476: LD_INT 18
23478: PUSH
23479: LD_INT 19
23481: PUSH
23482: LD_INT 20
23484: PUSH
23485: LD_INT 21
23487: PUSH
23488: LD_INT 22
23490: PUSH
23491: LD_INT 23
23493: PUSH
23494: LD_INT 24
23496: PUSH
23497: LD_INT 25
23499: PUSH
23500: LD_INT 26
23502: PUSH
23503: LD_INT 27
23505: PUSH
23506: LD_INT 28
23508: PUSH
23509: LD_INT 30
23511: PUSH
23512: LD_INT 31
23514: PUSH
23515: LD_INT 32
23517: PUSH
23518: LD_INT 33
23520: PUSH
23521: LD_INT 34
23523: PUSH
23524: LD_INT 36
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 101
23562: PUSH
23563: LD_INT 102
23565: PUSH
23566: LD_INT 103
23568: PUSH
23569: LD_INT 104
23571: PUSH
23572: LD_INT 105
23574: PUSH
23575: LD_INT 106
23577: PUSH
23578: LD_INT 107
23580: PUSH
23581: LD_INT 108
23583: PUSH
23584: LD_INT 109
23586: PUSH
23587: LD_INT 110
23589: PUSH
23590: LD_INT 111
23592: PUSH
23593: LD_INT 112
23595: PUSH
23596: LD_INT 113
23598: PUSH
23599: LD_INT 114
23601: PUSH
23602: LD_INT 116
23604: PUSH
23605: LD_INT 117
23607: PUSH
23608: LD_INT 118
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: ST_TO_ADDR
23634: GO 24873
23636: LD_INT 14
23638: DOUBLE
23639: EQUAL
23640: IFTRUE 23644
23642: GO 23868
23644: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23645: LD_ADDR_VAR 0 2
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: LD_INT 2
23655: PUSH
23656: LD_INT 3
23658: PUSH
23659: LD_INT 4
23661: PUSH
23662: LD_INT 5
23664: PUSH
23665: LD_INT 6
23667: PUSH
23668: LD_INT 7
23670: PUSH
23671: LD_INT 8
23673: PUSH
23674: LD_INT 9
23676: PUSH
23677: LD_INT 10
23679: PUSH
23680: LD_INT 11
23682: PUSH
23683: LD_INT 12
23685: PUSH
23686: LD_INT 13
23688: PUSH
23689: LD_INT 14
23691: PUSH
23692: LD_INT 15
23694: PUSH
23695: LD_INT 16
23697: PUSH
23698: LD_INT 17
23700: PUSH
23701: LD_INT 18
23703: PUSH
23704: LD_INT 19
23706: PUSH
23707: LD_INT 20
23709: PUSH
23710: LD_INT 21
23712: PUSH
23713: LD_INT 22
23715: PUSH
23716: LD_INT 23
23718: PUSH
23719: LD_INT 24
23721: PUSH
23722: LD_INT 25
23724: PUSH
23725: LD_INT 26
23727: PUSH
23728: LD_INT 27
23730: PUSH
23731: LD_INT 28
23733: PUSH
23734: LD_INT 29
23736: PUSH
23737: LD_INT 30
23739: PUSH
23740: LD_INT 31
23742: PUSH
23743: LD_INT 32
23745: PUSH
23746: LD_INT 33
23748: PUSH
23749: LD_INT 34
23751: PUSH
23752: LD_INT 36
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 101
23794: PUSH
23795: LD_INT 102
23797: PUSH
23798: LD_INT 103
23800: PUSH
23801: LD_INT 104
23803: PUSH
23804: LD_INT 105
23806: PUSH
23807: LD_INT 106
23809: PUSH
23810: LD_INT 107
23812: PUSH
23813: LD_INT 108
23815: PUSH
23816: LD_INT 109
23818: PUSH
23819: LD_INT 110
23821: PUSH
23822: LD_INT 111
23824: PUSH
23825: LD_INT 112
23827: PUSH
23828: LD_INT 113
23830: PUSH
23831: LD_INT 114
23833: PUSH
23834: LD_INT 116
23836: PUSH
23837: LD_INT 117
23839: PUSH
23840: LD_INT 118
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: ST_TO_ADDR
23866: GO 24873
23868: LD_INT 15
23870: DOUBLE
23871: EQUAL
23872: IFTRUE 23876
23874: GO 24100
23876: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23877: LD_ADDR_VAR 0 2
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 3
23890: PUSH
23891: LD_INT 4
23893: PUSH
23894: LD_INT 5
23896: PUSH
23897: LD_INT 6
23899: PUSH
23900: LD_INT 7
23902: PUSH
23903: LD_INT 8
23905: PUSH
23906: LD_INT 9
23908: PUSH
23909: LD_INT 10
23911: PUSH
23912: LD_INT 11
23914: PUSH
23915: LD_INT 12
23917: PUSH
23918: LD_INT 13
23920: PUSH
23921: LD_INT 14
23923: PUSH
23924: LD_INT 15
23926: PUSH
23927: LD_INT 16
23929: PUSH
23930: LD_INT 17
23932: PUSH
23933: LD_INT 18
23935: PUSH
23936: LD_INT 19
23938: PUSH
23939: LD_INT 20
23941: PUSH
23942: LD_INT 21
23944: PUSH
23945: LD_INT 22
23947: PUSH
23948: LD_INT 23
23950: PUSH
23951: LD_INT 24
23953: PUSH
23954: LD_INT 25
23956: PUSH
23957: LD_INT 26
23959: PUSH
23960: LD_INT 27
23962: PUSH
23963: LD_INT 28
23965: PUSH
23966: LD_INT 29
23968: PUSH
23969: LD_INT 30
23971: PUSH
23972: LD_INT 31
23974: PUSH
23975: LD_INT 32
23977: PUSH
23978: LD_INT 33
23980: PUSH
23981: LD_INT 34
23983: PUSH
23984: LD_INT 36
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 101
24026: PUSH
24027: LD_INT 102
24029: PUSH
24030: LD_INT 103
24032: PUSH
24033: LD_INT 104
24035: PUSH
24036: LD_INT 105
24038: PUSH
24039: LD_INT 106
24041: PUSH
24042: LD_INT 107
24044: PUSH
24045: LD_INT 108
24047: PUSH
24048: LD_INT 109
24050: PUSH
24051: LD_INT 110
24053: PUSH
24054: LD_INT 111
24056: PUSH
24057: LD_INT 112
24059: PUSH
24060: LD_INT 113
24062: PUSH
24063: LD_INT 114
24065: PUSH
24066: LD_INT 116
24068: PUSH
24069: LD_INT 117
24071: PUSH
24072: LD_INT 118
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: ST_TO_ADDR
24098: GO 24873
24100: LD_INT 16
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24244
24108: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24109: LD_ADDR_VAR 0 2
24113: PUSH
24114: LD_INT 2
24116: PUSH
24117: LD_INT 4
24119: PUSH
24120: LD_INT 5
24122: PUSH
24123: LD_INT 7
24125: PUSH
24126: LD_INT 11
24128: PUSH
24129: LD_INT 12
24131: PUSH
24132: LD_INT 15
24134: PUSH
24135: LD_INT 16
24137: PUSH
24138: LD_INT 20
24140: PUSH
24141: LD_INT 21
24143: PUSH
24144: LD_INT 22
24146: PUSH
24147: LD_INT 23
24149: PUSH
24150: LD_INT 25
24152: PUSH
24153: LD_INT 26
24155: PUSH
24156: LD_INT 30
24158: PUSH
24159: LD_INT 31
24161: PUSH
24162: LD_INT 32
24164: PUSH
24165: LD_INT 33
24167: PUSH
24168: LD_INT 34
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 101
24194: PUSH
24195: LD_INT 102
24197: PUSH
24198: LD_INT 103
24200: PUSH
24201: LD_INT 106
24203: PUSH
24204: LD_INT 108
24206: PUSH
24207: LD_INT 112
24209: PUSH
24210: LD_INT 113
24212: PUSH
24213: LD_INT 114
24215: PUSH
24216: LD_INT 116
24218: PUSH
24219: LD_INT 117
24221: PUSH
24222: LD_INT 118
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: ST_TO_ADDR
24242: GO 24873
24244: LD_INT 17
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24476
24252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24253: LD_ADDR_VAR 0 2
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 2
24263: PUSH
24264: LD_INT 3
24266: PUSH
24267: LD_INT 4
24269: PUSH
24270: LD_INT 5
24272: PUSH
24273: LD_INT 6
24275: PUSH
24276: LD_INT 7
24278: PUSH
24279: LD_INT 8
24281: PUSH
24282: LD_INT 9
24284: PUSH
24285: LD_INT 10
24287: PUSH
24288: LD_INT 11
24290: PUSH
24291: LD_INT 12
24293: PUSH
24294: LD_INT 13
24296: PUSH
24297: LD_INT 14
24299: PUSH
24300: LD_INT 15
24302: PUSH
24303: LD_INT 16
24305: PUSH
24306: LD_INT 17
24308: PUSH
24309: LD_INT 18
24311: PUSH
24312: LD_INT 19
24314: PUSH
24315: LD_INT 20
24317: PUSH
24318: LD_INT 21
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_INT 23
24326: PUSH
24327: LD_INT 24
24329: PUSH
24330: LD_INT 25
24332: PUSH
24333: LD_INT 26
24335: PUSH
24336: LD_INT 27
24338: PUSH
24339: LD_INT 28
24341: PUSH
24342: LD_INT 29
24344: PUSH
24345: LD_INT 30
24347: PUSH
24348: LD_INT 31
24350: PUSH
24351: LD_INT 32
24353: PUSH
24354: LD_INT 33
24356: PUSH
24357: LD_INT 34
24359: PUSH
24360: LD_INT 36
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 101
24402: PUSH
24403: LD_INT 102
24405: PUSH
24406: LD_INT 103
24408: PUSH
24409: LD_INT 104
24411: PUSH
24412: LD_INT 105
24414: PUSH
24415: LD_INT 106
24417: PUSH
24418: LD_INT 107
24420: PUSH
24421: LD_INT 108
24423: PUSH
24424: LD_INT 109
24426: PUSH
24427: LD_INT 110
24429: PUSH
24430: LD_INT 111
24432: PUSH
24433: LD_INT 112
24435: PUSH
24436: LD_INT 113
24438: PUSH
24439: LD_INT 114
24441: PUSH
24442: LD_INT 116
24444: PUSH
24445: LD_INT 117
24447: PUSH
24448: LD_INT 118
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: ST_TO_ADDR
24474: GO 24873
24476: LD_INT 18
24478: DOUBLE
24479: EQUAL
24480: IFTRUE 24484
24482: GO 24632
24484: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: LD_INT 4
24495: PUSH
24496: LD_INT 5
24498: PUSH
24499: LD_INT 7
24501: PUSH
24502: LD_INT 11
24504: PUSH
24505: LD_INT 12
24507: PUSH
24508: LD_INT 15
24510: PUSH
24511: LD_INT 16
24513: PUSH
24514: LD_INT 20
24516: PUSH
24517: LD_INT 21
24519: PUSH
24520: LD_INT 22
24522: PUSH
24523: LD_INT 23
24525: PUSH
24526: LD_INT 25
24528: PUSH
24529: LD_INT 26
24531: PUSH
24532: LD_INT 30
24534: PUSH
24535: LD_INT 31
24537: PUSH
24538: LD_INT 32
24540: PUSH
24541: LD_INT 33
24543: PUSH
24544: LD_INT 34
24546: PUSH
24547: LD_INT 35
24549: PUSH
24550: LD_INT 36
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 101
24578: PUSH
24579: LD_INT 102
24581: PUSH
24582: LD_INT 103
24584: PUSH
24585: LD_INT 106
24587: PUSH
24588: LD_INT 108
24590: PUSH
24591: LD_INT 112
24593: PUSH
24594: LD_INT 113
24596: PUSH
24597: LD_INT 114
24599: PUSH
24600: LD_INT 115
24602: PUSH
24603: LD_INT 116
24605: PUSH
24606: LD_INT 117
24608: PUSH
24609: LD_INT 118
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: ST_TO_ADDR
24630: GO 24873
24632: LD_INT 19
24634: DOUBLE
24635: EQUAL
24636: IFTRUE 24640
24638: GO 24872
24640: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24641: LD_ADDR_VAR 0 2
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: LD_INT 3
24654: PUSH
24655: LD_INT 4
24657: PUSH
24658: LD_INT 5
24660: PUSH
24661: LD_INT 6
24663: PUSH
24664: LD_INT 7
24666: PUSH
24667: LD_INT 8
24669: PUSH
24670: LD_INT 9
24672: PUSH
24673: LD_INT 10
24675: PUSH
24676: LD_INT 11
24678: PUSH
24679: LD_INT 12
24681: PUSH
24682: LD_INT 13
24684: PUSH
24685: LD_INT 14
24687: PUSH
24688: LD_INT 15
24690: PUSH
24691: LD_INT 16
24693: PUSH
24694: LD_INT 17
24696: PUSH
24697: LD_INT 18
24699: PUSH
24700: LD_INT 19
24702: PUSH
24703: LD_INT 20
24705: PUSH
24706: LD_INT 21
24708: PUSH
24709: LD_INT 22
24711: PUSH
24712: LD_INT 23
24714: PUSH
24715: LD_INT 24
24717: PUSH
24718: LD_INT 25
24720: PUSH
24721: LD_INT 26
24723: PUSH
24724: LD_INT 27
24726: PUSH
24727: LD_INT 28
24729: PUSH
24730: LD_INT 29
24732: PUSH
24733: LD_INT 30
24735: PUSH
24736: LD_INT 31
24738: PUSH
24739: LD_INT 32
24741: PUSH
24742: LD_INT 33
24744: PUSH
24745: LD_INT 34
24747: PUSH
24748: LD_INT 35
24750: PUSH
24751: LD_INT 36
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 101
24794: PUSH
24795: LD_INT 102
24797: PUSH
24798: LD_INT 103
24800: PUSH
24801: LD_INT 104
24803: PUSH
24804: LD_INT 105
24806: PUSH
24807: LD_INT 106
24809: PUSH
24810: LD_INT 107
24812: PUSH
24813: LD_INT 108
24815: PUSH
24816: LD_INT 109
24818: PUSH
24819: LD_INT 110
24821: PUSH
24822: LD_INT 111
24824: PUSH
24825: LD_INT 112
24827: PUSH
24828: LD_INT 113
24830: PUSH
24831: LD_INT 114
24833: PUSH
24834: LD_INT 115
24836: PUSH
24837: LD_INT 116
24839: PUSH
24840: LD_INT 117
24842: PUSH
24843: LD_INT 118
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: ST_TO_ADDR
24870: GO 24873
24872: POP
// end else
24873: GO 25104
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24875: LD_ADDR_VAR 0 2
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: LD_INT 3
24888: PUSH
24889: LD_INT 4
24891: PUSH
24892: LD_INT 5
24894: PUSH
24895: LD_INT 6
24897: PUSH
24898: LD_INT 7
24900: PUSH
24901: LD_INT 8
24903: PUSH
24904: LD_INT 9
24906: PUSH
24907: LD_INT 10
24909: PUSH
24910: LD_INT 11
24912: PUSH
24913: LD_INT 12
24915: PUSH
24916: LD_INT 13
24918: PUSH
24919: LD_INT 14
24921: PUSH
24922: LD_INT 15
24924: PUSH
24925: LD_INT 16
24927: PUSH
24928: LD_INT 17
24930: PUSH
24931: LD_INT 18
24933: PUSH
24934: LD_INT 19
24936: PUSH
24937: LD_INT 20
24939: PUSH
24940: LD_INT 21
24942: PUSH
24943: LD_INT 22
24945: PUSH
24946: LD_INT 23
24948: PUSH
24949: LD_INT 24
24951: PUSH
24952: LD_INT 25
24954: PUSH
24955: LD_INT 26
24957: PUSH
24958: LD_INT 27
24960: PUSH
24961: LD_INT 28
24963: PUSH
24964: LD_INT 29
24966: PUSH
24967: LD_INT 30
24969: PUSH
24970: LD_INT 31
24972: PUSH
24973: LD_INT 32
24975: PUSH
24976: LD_INT 33
24978: PUSH
24979: LD_INT 34
24981: PUSH
24982: LD_INT 35
24984: PUSH
24985: LD_INT 36
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 101
25028: PUSH
25029: LD_INT 102
25031: PUSH
25032: LD_INT 103
25034: PUSH
25035: LD_INT 104
25037: PUSH
25038: LD_INT 105
25040: PUSH
25041: LD_INT 106
25043: PUSH
25044: LD_INT 107
25046: PUSH
25047: LD_INT 108
25049: PUSH
25050: LD_INT 109
25052: PUSH
25053: LD_INT 110
25055: PUSH
25056: LD_INT 111
25058: PUSH
25059: LD_INT 112
25061: PUSH
25062: LD_INT 113
25064: PUSH
25065: LD_INT 114
25067: PUSH
25068: LD_INT 115
25070: PUSH
25071: LD_INT 116
25073: PUSH
25074: LD_INT 117
25076: PUSH
25077: LD_INT 118
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: ST_TO_ADDR
// if result then
25104: LD_VAR 0 2
25108: IFFALSE 25894
// begin normal :=  ;
25110: LD_ADDR_VAR 0 5
25114: PUSH
25115: LD_STRING 
25117: ST_TO_ADDR
// hardcore :=  ;
25118: LD_ADDR_VAR 0 6
25122: PUSH
25123: LD_STRING 
25125: ST_TO_ADDR
// active :=  ;
25126: LD_ADDR_VAR 0 7
25130: PUSH
25131: LD_STRING 
25133: ST_TO_ADDR
// for i = 1 to normalCounter do
25134: LD_ADDR_VAR 0 8
25138: PUSH
25139: DOUBLE
25140: LD_INT 1
25142: DEC
25143: ST_TO_ADDR
25144: LD_EXP 62
25148: PUSH
25149: FOR_TO
25150: IFFALSE 25251
// begin tmp := 0 ;
25152: LD_ADDR_VAR 0 3
25156: PUSH
25157: LD_STRING 0
25159: ST_TO_ADDR
// if result [ 1 ] then
25160: LD_VAR 0 2
25164: PUSH
25165: LD_INT 1
25167: ARRAY
25168: IFFALSE 25233
// if result [ 1 ] [ 1 ] = i then
25170: LD_VAR 0 2
25174: PUSH
25175: LD_INT 1
25177: ARRAY
25178: PUSH
25179: LD_INT 1
25181: ARRAY
25182: PUSH
25183: LD_VAR 0 8
25187: EQUAL
25188: IFFALSE 25233
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25190: LD_ADDR_VAR 0 2
25194: PUSH
25195: LD_VAR 0 2
25199: PPUSH
25200: LD_INT 1
25202: PPUSH
25203: LD_VAR 0 2
25207: PUSH
25208: LD_INT 1
25210: ARRAY
25211: PPUSH
25212: LD_INT 1
25214: PPUSH
25215: CALL_OW 3
25219: PPUSH
25220: CALL_OW 1
25224: ST_TO_ADDR
// tmp := 1 ;
25225: LD_ADDR_VAR 0 3
25229: PUSH
25230: LD_STRING 1
25232: ST_TO_ADDR
// end ; normal := normal & tmp ;
25233: LD_ADDR_VAR 0 5
25237: PUSH
25238: LD_VAR 0 5
25242: PUSH
25243: LD_VAR 0 3
25247: STR
25248: ST_TO_ADDR
// end ;
25249: GO 25149
25251: POP
25252: POP
// for i = 1 to hardcoreCounter do
25253: LD_ADDR_VAR 0 8
25257: PUSH
25258: DOUBLE
25259: LD_INT 1
25261: DEC
25262: ST_TO_ADDR
25263: LD_EXP 63
25267: PUSH
25268: FOR_TO
25269: IFFALSE 25374
// begin tmp := 0 ;
25271: LD_ADDR_VAR 0 3
25275: PUSH
25276: LD_STRING 0
25278: ST_TO_ADDR
// if result [ 2 ] then
25279: LD_VAR 0 2
25283: PUSH
25284: LD_INT 2
25286: ARRAY
25287: IFFALSE 25356
// if result [ 2 ] [ 1 ] = 100 + i then
25289: LD_VAR 0 2
25293: PUSH
25294: LD_INT 2
25296: ARRAY
25297: PUSH
25298: LD_INT 1
25300: ARRAY
25301: PUSH
25302: LD_INT 100
25304: PUSH
25305: LD_VAR 0 8
25309: PLUS
25310: EQUAL
25311: IFFALSE 25356
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25313: LD_ADDR_VAR 0 2
25317: PUSH
25318: LD_VAR 0 2
25322: PPUSH
25323: LD_INT 2
25325: PPUSH
25326: LD_VAR 0 2
25330: PUSH
25331: LD_INT 2
25333: ARRAY
25334: PPUSH
25335: LD_INT 1
25337: PPUSH
25338: CALL_OW 3
25342: PPUSH
25343: CALL_OW 1
25347: ST_TO_ADDR
// tmp := 1 ;
25348: LD_ADDR_VAR 0 3
25352: PUSH
25353: LD_STRING 1
25355: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25356: LD_ADDR_VAR 0 6
25360: PUSH
25361: LD_VAR 0 6
25365: PUSH
25366: LD_VAR 0 3
25370: STR
25371: ST_TO_ADDR
// end ;
25372: GO 25268
25374: POP
25375: POP
// if isGameLoad then
25376: LD_VAR 0 1
25380: IFFALSE 25855
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25382: LD_ADDR_VAR 0 4
25386: PUSH
25387: LD_EXP 66
25391: PUSH
25392: LD_EXP 65
25396: PUSH
25397: LD_EXP 67
25401: PUSH
25402: LD_EXP 64
25406: PUSH
25407: LD_EXP 68
25411: PUSH
25412: LD_EXP 69
25416: PUSH
25417: LD_EXP 70
25421: PUSH
25422: LD_EXP 71
25426: PUSH
25427: LD_EXP 72
25431: PUSH
25432: LD_EXP 73
25436: PUSH
25437: LD_EXP 74
25441: PUSH
25442: LD_EXP 75
25446: PUSH
25447: LD_EXP 76
25451: PUSH
25452: LD_EXP 77
25456: PUSH
25457: LD_EXP 85
25461: PUSH
25462: LD_EXP 86
25466: PUSH
25467: LD_EXP 87
25471: PUSH
25472: LD_EXP 88
25476: PUSH
25477: LD_EXP 90
25481: PUSH
25482: LD_EXP 91
25486: PUSH
25487: LD_EXP 92
25491: PUSH
25492: LD_EXP 95
25496: PUSH
25497: LD_EXP 97
25501: PUSH
25502: LD_EXP 98
25506: PUSH
25507: LD_EXP 99
25511: PUSH
25512: LD_EXP 101
25516: PUSH
25517: LD_EXP 102
25521: PUSH
25522: LD_EXP 105
25526: PUSH
25527: LD_EXP 106
25531: PUSH
25532: LD_EXP 107
25536: PUSH
25537: LD_EXP 108
25541: PUSH
25542: LD_EXP 109
25546: PUSH
25547: LD_EXP 110
25551: PUSH
25552: LD_EXP 111
25556: PUSH
25557: LD_EXP 112
25561: PUSH
25562: LD_EXP 113
25566: PUSH
25567: LD_EXP 78
25571: PUSH
25572: LD_EXP 79
25576: PUSH
25577: LD_EXP 82
25581: PUSH
25582: LD_EXP 83
25586: PUSH
25587: LD_EXP 84
25591: PUSH
25592: LD_EXP 80
25596: PUSH
25597: LD_EXP 81
25601: PUSH
25602: LD_EXP 89
25606: PUSH
25607: LD_EXP 93
25611: PUSH
25612: LD_EXP 94
25616: PUSH
25617: LD_EXP 96
25621: PUSH
25622: LD_EXP 100
25626: PUSH
25627: LD_EXP 103
25631: PUSH
25632: LD_EXP 104
25636: PUSH
25637: LD_EXP 114
25641: PUSH
25642: LD_EXP 115
25646: PUSH
25647: LD_EXP 116
25651: PUSH
25652: LD_EXP 117
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: ST_TO_ADDR
// tmp :=  ;
25713: LD_ADDR_VAR 0 3
25717: PUSH
25718: LD_STRING 
25720: ST_TO_ADDR
// for i = 1 to normalCounter do
25721: LD_ADDR_VAR 0 8
25725: PUSH
25726: DOUBLE
25727: LD_INT 1
25729: DEC
25730: ST_TO_ADDR
25731: LD_EXP 62
25735: PUSH
25736: FOR_TO
25737: IFFALSE 25773
// begin if flags [ i ] then
25739: LD_VAR 0 4
25743: PUSH
25744: LD_VAR 0 8
25748: ARRAY
25749: IFFALSE 25771
// tmp := tmp & i & ; ;
25751: LD_ADDR_VAR 0 3
25755: PUSH
25756: LD_VAR 0 3
25760: PUSH
25761: LD_VAR 0 8
25765: STR
25766: PUSH
25767: LD_STRING ;
25769: STR
25770: ST_TO_ADDR
// end ;
25771: GO 25736
25773: POP
25774: POP
// for i = 1 to hardcoreCounter do
25775: LD_ADDR_VAR 0 8
25779: PUSH
25780: DOUBLE
25781: LD_INT 1
25783: DEC
25784: ST_TO_ADDR
25785: LD_EXP 63
25789: PUSH
25790: FOR_TO
25791: IFFALSE 25837
// begin if flags [ normalCounter + i ] then
25793: LD_VAR 0 4
25797: PUSH
25798: LD_EXP 62
25802: PUSH
25803: LD_VAR 0 8
25807: PLUS
25808: ARRAY
25809: IFFALSE 25835
// tmp := tmp & ( 100 + i ) & ; ;
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_VAR 0 3
25820: PUSH
25821: LD_INT 100
25823: PUSH
25824: LD_VAR 0 8
25828: PLUS
25829: STR
25830: PUSH
25831: LD_STRING ;
25833: STR
25834: ST_TO_ADDR
// end ;
25835: GO 25790
25837: POP
25838: POP
// if tmp then
25839: LD_VAR 0 3
25843: IFFALSE 25855
// active := tmp ;
25845: LD_ADDR_VAR 0 7
25849: PUSH
25850: LD_VAR 0 3
25854: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25855: LD_STRING getStreamItemsFromMission("
25857: PUSH
25858: LD_VAR 0 5
25862: STR
25863: PUSH
25864: LD_STRING ","
25866: STR
25867: PUSH
25868: LD_VAR 0 6
25872: STR
25873: PUSH
25874: LD_STRING ","
25876: STR
25877: PUSH
25878: LD_VAR 0 7
25882: STR
25883: PUSH
25884: LD_STRING ")
25886: STR
25887: PPUSH
25888: CALL_OW 559
// end else
25892: GO 25901
// ToLua ( getStreamItemsFromMission("","","") ) ;
25894: LD_STRING getStreamItemsFromMission("","","")
25896: PPUSH
25897: CALL_OW 559
// end ;
25901: LD_VAR 0 2
25905: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25906: LD_EXP 61
25910: IFFALSE 25918
25912: PUSH
25913: LD_EXP 66
25917: AND
25918: IFFALSE 26042
25920: GO 25922
25922: DISABLE
25923: LD_INT 0
25925: PPUSH
25926: PPUSH
// begin enable ;
25927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25928: LD_ADDR_VAR 0 2
25932: PUSH
25933: LD_INT 22
25935: PUSH
25936: LD_OWVAR 2
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: LD_INT 34
25950: PUSH
25951: LD_INT 7
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 34
25960: PUSH
25961: LD_INT 45
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 34
25970: PUSH
25971: LD_INT 28
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 34
25980: PUSH
25981: LD_INT 47
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PPUSH
25999: CALL_OW 69
26003: ST_TO_ADDR
// if not tmp then
26004: LD_VAR 0 2
26008: NOT
26009: IFFALSE 26013
// exit ;
26011: GO 26042
// for i in tmp do
26013: LD_ADDR_VAR 0 1
26017: PUSH
26018: LD_VAR 0 2
26022: PUSH
26023: FOR_IN
26024: IFFALSE 26040
// begin SetLives ( i , 0 ) ;
26026: LD_VAR 0 1
26030: PPUSH
26031: LD_INT 0
26033: PPUSH
26034: CALL_OW 234
// end ;
26038: GO 26023
26040: POP
26041: POP
// end ;
26042: PPOPN 2
26044: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26045: LD_EXP 61
26049: IFFALSE 26057
26051: PUSH
26052: LD_EXP 67
26056: AND
26057: IFFALSE 26141
26059: GO 26061
26061: DISABLE
26062: LD_INT 0
26064: PPUSH
26065: PPUSH
// begin enable ;
26066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26067: LD_ADDR_VAR 0 2
26071: PUSH
26072: LD_INT 22
26074: PUSH
26075: LD_OWVAR 2
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 32
26086: PUSH
26087: LD_INT 3
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PPUSH
26098: CALL_OW 69
26102: ST_TO_ADDR
// if not tmp then
26103: LD_VAR 0 2
26107: NOT
26108: IFFALSE 26112
// exit ;
26110: GO 26141
// for i in tmp do
26112: LD_ADDR_VAR 0 1
26116: PUSH
26117: LD_VAR 0 2
26121: PUSH
26122: FOR_IN
26123: IFFALSE 26139
// begin SetLives ( i , 0 ) ;
26125: LD_VAR 0 1
26129: PPUSH
26130: LD_INT 0
26132: PPUSH
26133: CALL_OW 234
// end ;
26137: GO 26122
26139: POP
26140: POP
// end ;
26141: PPOPN 2
26143: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26144: LD_EXP 61
26148: IFFALSE 26156
26150: PUSH
26151: LD_EXP 64
26155: AND
26156: IFFALSE 26249
26158: GO 26160
26160: DISABLE
26161: LD_INT 0
26163: PPUSH
// begin enable ;
26164: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26165: LD_ADDR_VAR 0 1
26169: PUSH
26170: LD_INT 22
26172: PUSH
26173: LD_OWVAR 2
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: LD_INT 25
26187: PUSH
26188: LD_INT 5
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 25
26197: PUSH
26198: LD_INT 9
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 25
26207: PUSH
26208: LD_INT 8
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PPUSH
26225: CALL_OW 69
26229: PUSH
26230: FOR_IN
26231: IFFALSE 26247
// begin SetClass ( i , 1 ) ;
26233: LD_VAR 0 1
26237: PPUSH
26238: LD_INT 1
26240: PPUSH
26241: CALL_OW 336
// end ;
26245: GO 26230
26247: POP
26248: POP
// end ;
26249: PPOPN 1
26251: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26252: LD_EXP 61
26256: IFFALSE 26264
26258: PUSH
26259: LD_EXP 65
26263: AND
26264: IFFALSE 26276
26266: PUSH
26267: LD_OWVAR 65
26271: PUSH
26272: LD_INT 7
26274: LESS
26275: AND
26276: IFFALSE 26290
26278: GO 26280
26280: DISABLE
// begin enable ;
26281: ENABLE
// game_speed := 7 ;
26282: LD_ADDR_OWVAR 65
26286: PUSH
26287: LD_INT 7
26289: ST_TO_ADDR
// end ;
26290: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26291: LD_EXP 61
26295: IFFALSE 26303
26297: PUSH
26298: LD_EXP 68
26302: AND
26303: IFFALSE 26505
26305: GO 26307
26307: DISABLE
26308: LD_INT 0
26310: PPUSH
26311: PPUSH
26312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26313: LD_ADDR_VAR 0 3
26317: PUSH
26318: LD_INT 81
26320: PUSH
26321: LD_OWVAR 2
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 21
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PPUSH
26344: CALL_OW 69
26348: ST_TO_ADDR
// if not tmp then
26349: LD_VAR 0 3
26353: NOT
26354: IFFALSE 26358
// exit ;
26356: GO 26505
// if tmp > 5 then
26358: LD_VAR 0 3
26362: PUSH
26363: LD_INT 5
26365: GREATER
26366: IFFALSE 26378
// k := 5 else
26368: LD_ADDR_VAR 0 2
26372: PUSH
26373: LD_INT 5
26375: ST_TO_ADDR
26376: GO 26388
// k := tmp ;
26378: LD_ADDR_VAR 0 2
26382: PUSH
26383: LD_VAR 0 3
26387: ST_TO_ADDR
// for i := 1 to k do
26388: LD_ADDR_VAR 0 1
26392: PUSH
26393: DOUBLE
26394: LD_INT 1
26396: DEC
26397: ST_TO_ADDR
26398: LD_VAR 0 2
26402: PUSH
26403: FOR_TO
26404: IFFALSE 26503
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26406: LD_VAR 0 3
26410: PUSH
26411: LD_VAR 0 1
26415: ARRAY
26416: PPUSH
26417: LD_VAR 0 1
26421: PUSH
26422: LD_INT 4
26424: MOD
26425: PUSH
26426: LD_INT 1
26428: PLUS
26429: PPUSH
26430: CALL_OW 259
26434: PUSH
26435: LD_INT 10
26437: LESS
26438: IFFALSE 26501
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26440: LD_VAR 0 3
26444: PUSH
26445: LD_VAR 0 1
26449: ARRAY
26450: PPUSH
26451: LD_VAR 0 1
26455: PUSH
26456: LD_INT 4
26458: MOD
26459: PUSH
26460: LD_INT 1
26462: PLUS
26463: PPUSH
26464: LD_VAR 0 3
26468: PUSH
26469: LD_VAR 0 1
26473: ARRAY
26474: PPUSH
26475: LD_VAR 0 1
26479: PUSH
26480: LD_INT 4
26482: MOD
26483: PUSH
26484: LD_INT 1
26486: PLUS
26487: PPUSH
26488: CALL_OW 259
26492: PUSH
26493: LD_INT 1
26495: PLUS
26496: PPUSH
26497: CALL_OW 237
26501: GO 26403
26503: POP
26504: POP
// end ;
26505: PPOPN 3
26507: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26508: LD_EXP 61
26512: IFFALSE 26520
26514: PUSH
26515: LD_EXP 69
26519: AND
26520: IFFALSE 26540
26522: GO 26524
26524: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26525: LD_INT 4
26527: PPUSH
26528: LD_OWVAR 2
26532: PPUSH
26533: LD_INT 0
26535: PPUSH
26536: CALL_OW 324
26540: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26541: LD_EXP 61
26545: IFFALSE 26553
26547: PUSH
26548: LD_EXP 98
26552: AND
26553: IFFALSE 26573
26555: GO 26557
26557: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26558: LD_INT 19
26560: PPUSH
26561: LD_OWVAR 2
26565: PPUSH
26566: LD_INT 0
26568: PPUSH
26569: CALL_OW 324
26573: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26574: LD_EXP 61
26578: IFFALSE 26586
26580: PUSH
26581: LD_EXP 70
26585: AND
26586: IFFALSE 26688
26588: GO 26590
26590: DISABLE
26591: LD_INT 0
26593: PPUSH
26594: PPUSH
// begin enable ;
26595: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26596: LD_ADDR_VAR 0 2
26600: PUSH
26601: LD_INT 22
26603: PUSH
26604: LD_OWVAR 2
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: LD_INT 34
26618: PUSH
26619: LD_INT 11
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 34
26628: PUSH
26629: LD_INT 30
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PPUSH
26645: CALL_OW 69
26649: ST_TO_ADDR
// if not tmp then
26650: LD_VAR 0 2
26654: NOT
26655: IFFALSE 26659
// exit ;
26657: GO 26688
// for i in tmp do
26659: LD_ADDR_VAR 0 1
26663: PUSH
26664: LD_VAR 0 2
26668: PUSH
26669: FOR_IN
26670: IFFALSE 26686
// begin SetLives ( i , 0 ) ;
26672: LD_VAR 0 1
26676: PPUSH
26677: LD_INT 0
26679: PPUSH
26680: CALL_OW 234
// end ;
26684: GO 26669
26686: POP
26687: POP
// end ;
26688: PPOPN 2
26690: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26691: LD_EXP 61
26695: IFFALSE 26703
26697: PUSH
26698: LD_EXP 71
26702: AND
26703: IFFALSE 26723
26705: GO 26707
26707: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26708: LD_INT 32
26710: PPUSH
26711: LD_OWVAR 2
26715: PPUSH
26716: LD_INT 0
26718: PPUSH
26719: CALL_OW 324
26723: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26724: LD_EXP 61
26728: IFFALSE 26736
26730: PUSH
26731: LD_EXP 72
26735: AND
26736: IFFALSE 26919
26738: GO 26740
26740: DISABLE
26741: LD_INT 0
26743: PPUSH
26744: PPUSH
26745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26746: LD_ADDR_VAR 0 2
26750: PUSH
26751: LD_INT 22
26753: PUSH
26754: LD_OWVAR 2
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 33
26765: PUSH
26766: LD_INT 3
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PPUSH
26777: CALL_OW 69
26781: ST_TO_ADDR
// if not tmp then
26782: LD_VAR 0 2
26786: NOT
26787: IFFALSE 26791
// exit ;
26789: GO 26919
// side := 0 ;
26791: LD_ADDR_VAR 0 3
26795: PUSH
26796: LD_INT 0
26798: ST_TO_ADDR
// for i := 1 to 8 do
26799: LD_ADDR_VAR 0 1
26803: PUSH
26804: DOUBLE
26805: LD_INT 1
26807: DEC
26808: ST_TO_ADDR
26809: LD_INT 8
26811: PUSH
26812: FOR_TO
26813: IFFALSE 26863
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26815: LD_OWVAR 2
26819: PUSH
26820: LD_VAR 0 1
26824: NONEQUAL
26825: IFFALSE 26847
26827: PUSH
26828: LD_OWVAR 2
26832: PPUSH
26833: LD_VAR 0 1
26837: PPUSH
26838: CALL_OW 81
26842: PUSH
26843: LD_INT 2
26845: EQUAL
26846: AND
26847: IFFALSE 26861
// begin side := i ;
26849: LD_ADDR_VAR 0 3
26853: PUSH
26854: LD_VAR 0 1
26858: ST_TO_ADDR
// break ;
26859: GO 26863
// end ;
26861: GO 26812
26863: POP
26864: POP
// if not side then
26865: LD_VAR 0 3
26869: NOT
26870: IFFALSE 26874
// exit ;
26872: GO 26919
// for i := 1 to tmp do
26874: LD_ADDR_VAR 0 1
26878: PUSH
26879: DOUBLE
26880: LD_INT 1
26882: DEC
26883: ST_TO_ADDR
26884: LD_VAR 0 2
26888: PUSH
26889: FOR_TO
26890: IFFALSE 26917
// if Prob ( 60 ) then
26892: LD_INT 60
26894: PPUSH
26895: CALL_OW 13
26899: IFFALSE 26915
// SetSide ( i , side ) ;
26901: LD_VAR 0 1
26905: PPUSH
26906: LD_VAR 0 3
26910: PPUSH
26911: CALL_OW 235
26915: GO 26889
26917: POP
26918: POP
// end ;
26919: PPOPN 3
26921: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26922: LD_EXP 61
26926: IFFALSE 26934
26928: PUSH
26929: LD_EXP 74
26933: AND
26934: IFFALSE 27053
26936: GO 26938
26938: DISABLE
26939: LD_INT 0
26941: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26942: LD_ADDR_VAR 0 1
26946: PUSH
26947: LD_INT 22
26949: PUSH
26950: LD_OWVAR 2
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 21
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 3
26971: PUSH
26972: LD_INT 23
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 69
26995: PUSH
26996: FOR_IN
26997: IFFALSE 27051
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 257
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 3
27017: PUSH
27018: LD_INT 4
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: IN
27027: IFFALSE 27049
// SetClass ( un , rand ( 1 , 4 ) ) ;
27029: LD_VAR 0 1
27033: PPUSH
27034: LD_INT 1
27036: PPUSH
27037: LD_INT 4
27039: PPUSH
27040: CALL_OW 12
27044: PPUSH
27045: CALL_OW 336
27049: GO 26996
27051: POP
27052: POP
// end ;
27053: PPOPN 1
27055: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27056: LD_EXP 61
27060: IFFALSE 27068
27062: PUSH
27063: LD_EXP 73
27067: AND
27068: IFFALSE 27147
27070: GO 27072
27072: DISABLE
27073: LD_INT 0
27075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27076: LD_ADDR_VAR 0 1
27080: PUSH
27081: LD_INT 22
27083: PUSH
27084: LD_OWVAR 2
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 21
27095: PUSH
27096: LD_INT 3
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PPUSH
27107: CALL_OW 69
27111: ST_TO_ADDR
// if not tmp then
27112: LD_VAR 0 1
27116: NOT
27117: IFFALSE 27121
// exit ;
27119: GO 27147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27121: LD_VAR 0 1
27125: PUSH
27126: LD_INT 1
27128: PPUSH
27129: LD_VAR 0 1
27133: PPUSH
27134: CALL_OW 12
27138: ARRAY
27139: PPUSH
27140: LD_INT 100
27142: PPUSH
27143: CALL_OW 234
// end ;
27147: PPOPN 1
27149: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27150: LD_EXP 61
27154: IFFALSE 27162
27156: PUSH
27157: LD_EXP 75
27161: AND
27162: IFFALSE 27260
27164: GO 27166
27166: DISABLE
27167: LD_INT 0
27169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27170: LD_ADDR_VAR 0 1
27174: PUSH
27175: LD_INT 22
27177: PUSH
27178: LD_OWVAR 2
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 21
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PPUSH
27201: CALL_OW 69
27205: ST_TO_ADDR
// if not tmp then
27206: LD_VAR 0 1
27210: NOT
27211: IFFALSE 27215
// exit ;
27213: GO 27260
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27215: LD_VAR 0 1
27219: PUSH
27220: LD_INT 1
27222: PPUSH
27223: LD_VAR 0 1
27227: PPUSH
27228: CALL_OW 12
27232: ARRAY
27233: PPUSH
27234: LD_INT 1
27236: PPUSH
27237: LD_INT 4
27239: PPUSH
27240: CALL_OW 12
27244: PPUSH
27245: LD_INT 3000
27247: PPUSH
27248: LD_INT 9000
27250: PPUSH
27251: CALL_OW 12
27255: PPUSH
27256: CALL_OW 492
// end ;
27260: PPOPN 1
27262: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27263: LD_EXP 61
27267: IFFALSE 27275
27269: PUSH
27270: LD_EXP 76
27274: AND
27275: IFFALSE 27295
27277: GO 27279
27279: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27280: LD_INT 1
27282: PPUSH
27283: LD_OWVAR 2
27287: PPUSH
27288: LD_INT 0
27290: PPUSH
27291: CALL_OW 324
27295: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27296: LD_EXP 61
27300: IFFALSE 27308
27302: PUSH
27303: LD_EXP 77
27307: AND
27308: IFFALSE 27391
27310: GO 27312
27312: DISABLE
27313: LD_INT 0
27315: PPUSH
27316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27317: LD_ADDR_VAR 0 2
27321: PUSH
27322: LD_INT 22
27324: PUSH
27325: LD_OWVAR 2
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 21
27336: PUSH
27337: LD_INT 3
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PPUSH
27348: CALL_OW 69
27352: ST_TO_ADDR
// if not tmp then
27353: LD_VAR 0 2
27357: NOT
27358: IFFALSE 27362
// exit ;
27360: GO 27391
// for i in tmp do
27362: LD_ADDR_VAR 0 1
27366: PUSH
27367: LD_VAR 0 2
27371: PUSH
27372: FOR_IN
27373: IFFALSE 27389
// SetBLevel ( i , 10 ) ;
27375: LD_VAR 0 1
27379: PPUSH
27380: LD_INT 10
27382: PPUSH
27383: CALL_OW 241
27387: GO 27372
27389: POP
27390: POP
// end ;
27391: PPOPN 2
27393: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27394: LD_EXP 61
27398: IFFALSE 27406
27400: PUSH
27401: LD_EXP 78
27405: AND
27406: IFFALSE 27517
27408: GO 27410
27410: DISABLE
27411: LD_INT 0
27413: PPUSH
27414: PPUSH
27415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27416: LD_ADDR_VAR 0 3
27420: PUSH
27421: LD_INT 22
27423: PUSH
27424: LD_OWVAR 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 25
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PPUSH
27447: CALL_OW 69
27451: ST_TO_ADDR
// if not tmp then
27452: LD_VAR 0 3
27456: NOT
27457: IFFALSE 27461
// exit ;
27459: GO 27517
// un := tmp [ rand ( 1 , tmp ) ] ;
27461: LD_ADDR_VAR 0 2
27465: PUSH
27466: LD_VAR 0 3
27470: PUSH
27471: LD_INT 1
27473: PPUSH
27474: LD_VAR 0 3
27478: PPUSH
27479: CALL_OW 12
27483: ARRAY
27484: ST_TO_ADDR
// if Crawls ( un ) then
27485: LD_VAR 0 2
27489: PPUSH
27490: CALL_OW 318
27494: IFFALSE 27505
// ComWalk ( un ) ;
27496: LD_VAR 0 2
27500: PPUSH
27501: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27505: LD_VAR 0 2
27509: PPUSH
27510: LD_INT 5
27512: PPUSH
27513: CALL_OW 336
// end ;
27517: PPOPN 3
27519: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27520: LD_EXP 61
27524: IFFALSE 27532
27526: PUSH
27527: LD_EXP 79
27531: AND
27532: IFFALSE 27544
27534: PUSH
27535: LD_OWVAR 67
27539: PUSH
27540: LD_INT 4
27542: LESS
27543: AND
27544: IFFALSE 27563
27546: GO 27548
27548: DISABLE
// begin Difficulty := Difficulty + 1 ;
27549: LD_ADDR_OWVAR 67
27553: PUSH
27554: LD_OWVAR 67
27558: PUSH
27559: LD_INT 1
27561: PLUS
27562: ST_TO_ADDR
// end ;
27563: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27564: LD_EXP 61
27568: IFFALSE 27576
27570: PUSH
27571: LD_EXP 80
27575: AND
27576: IFFALSE 27679
27578: GO 27580
27580: DISABLE
27581: LD_INT 0
27583: PPUSH
// begin for i := 1 to 5 do
27584: LD_ADDR_VAR 0 1
27588: PUSH
27589: DOUBLE
27590: LD_INT 1
27592: DEC
27593: ST_TO_ADDR
27594: LD_INT 5
27596: PUSH
27597: FOR_TO
27598: IFFALSE 27677
// begin uc_nation := nation_nature ;
27600: LD_ADDR_OWVAR 21
27604: PUSH
27605: LD_INT 0
27607: ST_TO_ADDR
// uc_side := 0 ;
27608: LD_ADDR_OWVAR 20
27612: PUSH
27613: LD_INT 0
27615: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27616: LD_ADDR_OWVAR 29
27620: PUSH
27621: LD_INT 12
27623: PUSH
27624: LD_INT 12
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: ST_TO_ADDR
// hc_agressivity := 20 ;
27631: LD_ADDR_OWVAR 35
27635: PUSH
27636: LD_INT 20
27638: ST_TO_ADDR
// hc_class := class_tiger ;
27639: LD_ADDR_OWVAR 28
27643: PUSH
27644: LD_INT 14
27646: ST_TO_ADDR
// hc_gallery :=  ;
27647: LD_ADDR_OWVAR 33
27651: PUSH
27652: LD_STRING 
27654: ST_TO_ADDR
// hc_name :=  ;
27655: LD_ADDR_OWVAR 26
27659: PUSH
27660: LD_STRING 
27662: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27663: CALL_OW 44
27667: PPUSH
27668: LD_INT 0
27670: PPUSH
27671: CALL_OW 51
// end ;
27675: GO 27597
27677: POP
27678: POP
// end ;
27679: PPOPN 1
27681: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27682: LD_EXP 61
27686: IFFALSE 27694
27688: PUSH
27689: LD_EXP 81
27693: AND
27694: IFFALSE 27703
27696: GO 27698
27698: DISABLE
// StreamSibBomb ;
27699: CALL 27704 0 0
27703: END
// export function StreamSibBomb ; var i , x , y ; begin
27704: LD_INT 0
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
// result := false ;
27710: LD_ADDR_VAR 0 1
27714: PUSH
27715: LD_INT 0
27717: ST_TO_ADDR
// for i := 1 to 16 do
27718: LD_ADDR_VAR 0 2
27722: PUSH
27723: DOUBLE
27724: LD_INT 1
27726: DEC
27727: ST_TO_ADDR
27728: LD_INT 16
27730: PUSH
27731: FOR_TO
27732: IFFALSE 27931
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27734: LD_ADDR_VAR 0 3
27738: PUSH
27739: LD_INT 10
27741: PUSH
27742: LD_INT 20
27744: PUSH
27745: LD_INT 30
27747: PUSH
27748: LD_INT 40
27750: PUSH
27751: LD_INT 50
27753: PUSH
27754: LD_INT 60
27756: PUSH
27757: LD_INT 70
27759: PUSH
27760: LD_INT 80
27762: PUSH
27763: LD_INT 90
27765: PUSH
27766: LD_INT 100
27768: PUSH
27769: LD_INT 110
27771: PUSH
27772: LD_INT 120
27774: PUSH
27775: LD_INT 130
27777: PUSH
27778: LD_INT 140
27780: PUSH
27781: LD_INT 150
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: PPUSH
27804: LD_INT 15
27806: PPUSH
27807: CALL_OW 12
27811: ARRAY
27812: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27813: LD_ADDR_VAR 0 4
27817: PUSH
27818: LD_INT 10
27820: PUSH
27821: LD_INT 20
27823: PUSH
27824: LD_INT 30
27826: PUSH
27827: LD_INT 40
27829: PUSH
27830: LD_INT 50
27832: PUSH
27833: LD_INT 60
27835: PUSH
27836: LD_INT 70
27838: PUSH
27839: LD_INT 80
27841: PUSH
27842: LD_INT 90
27844: PUSH
27845: LD_INT 100
27847: PUSH
27848: LD_INT 110
27850: PUSH
27851: LD_INT 120
27853: PUSH
27854: LD_INT 130
27856: PUSH
27857: LD_INT 140
27859: PUSH
27860: LD_INT 150
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: PPUSH
27883: LD_INT 15
27885: PPUSH
27886: CALL_OW 12
27890: ARRAY
27891: ST_TO_ADDR
// if ValidHex ( x , y ) then
27892: LD_VAR 0 3
27896: PPUSH
27897: LD_VAR 0 4
27901: PPUSH
27902: CALL_OW 488
27906: IFFALSE 27929
// begin result := [ x , y ] ;
27908: LD_ADDR_VAR 0 1
27912: PUSH
27913: LD_VAR 0 3
27917: PUSH
27918: LD_VAR 0 4
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: ST_TO_ADDR
// break ;
27927: GO 27931
// end ; end ;
27929: GO 27731
27931: POP
27932: POP
// if result then
27933: LD_VAR 0 1
27937: IFFALSE 27997
// begin ToLua ( playSibBomb() ) ;
27939: LD_STRING playSibBomb()
27941: PPUSH
27942: CALL_OW 559
// wait ( 0 0$14 ) ;
27946: LD_INT 490
27948: PPUSH
27949: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27953: LD_VAR 0 1
27957: PUSH
27958: LD_INT 1
27960: ARRAY
27961: PPUSH
27962: LD_VAR 0 1
27966: PUSH
27967: LD_INT 2
27969: ARRAY
27970: PPUSH
27971: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27975: LD_VAR 0 1
27979: PUSH
27980: LD_INT 1
27982: ARRAY
27983: PPUSH
27984: LD_VAR 0 1
27988: PUSH
27989: LD_INT 2
27991: ARRAY
27992: PPUSH
27993: CALL_OW 429
// end ; end ;
27997: LD_VAR 0 1
28001: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28002: LD_EXP 61
28006: IFFALSE 28014
28008: PUSH
28009: LD_EXP 83
28013: AND
28014: IFFALSE 28026
28016: GO 28018
28018: DISABLE
// YouLost (  ) ;
28019: LD_STRING 
28021: PPUSH
28022: CALL_OW 104
28026: END
// every 0 0$1 trigger StreamModeActive and sFog do
28027: LD_EXP 61
28031: IFFALSE 28039
28033: PUSH
28034: LD_EXP 82
28038: AND
28039: IFFALSE 28053
28041: GO 28043
28043: DISABLE
// FogOff ( your_side ) ;
28044: LD_OWVAR 2
28048: PPUSH
28049: CALL_OW 344
28053: END
// every 0 0$1 trigger StreamModeActive and sSun do
28054: LD_EXP 61
28058: IFFALSE 28066
28060: PUSH
28061: LD_EXP 84
28065: AND
28066: IFFALSE 28094
28068: GO 28070
28070: DISABLE
// begin solar_recharge_percent := 0 ;
28071: LD_ADDR_OWVAR 79
28075: PUSH
28076: LD_INT 0
28078: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28079: LD_INT 10500
28081: PPUSH
28082: CALL_OW 67
// solar_recharge_percent := 100 ;
28086: LD_ADDR_OWVAR 79
28090: PUSH
28091: LD_INT 100
28093: ST_TO_ADDR
// end ;
28094: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28095: LD_EXP 61
28099: IFFALSE 28107
28101: PUSH
28102: LD_EXP 85
28106: AND
28107: IFFALSE 28346
28109: GO 28111
28111: DISABLE
28112: LD_INT 0
28114: PPUSH
28115: PPUSH
28116: PPUSH
// begin tmp := [ ] ;
28117: LD_ADDR_VAR 0 3
28121: PUSH
28122: EMPTY
28123: ST_TO_ADDR
// for i := 1 to 6 do
28124: LD_ADDR_VAR 0 1
28128: PUSH
28129: DOUBLE
28130: LD_INT 1
28132: DEC
28133: ST_TO_ADDR
28134: LD_INT 6
28136: PUSH
28137: FOR_TO
28138: IFFALSE 28243
// begin uc_nation := nation_nature ;
28140: LD_ADDR_OWVAR 21
28144: PUSH
28145: LD_INT 0
28147: ST_TO_ADDR
// uc_side := 0 ;
28148: LD_ADDR_OWVAR 20
28152: PUSH
28153: LD_INT 0
28155: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28156: LD_ADDR_OWVAR 29
28160: PUSH
28161: LD_INT 12
28163: PUSH
28164: LD_INT 12
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: ST_TO_ADDR
// hc_agressivity := 20 ;
28171: LD_ADDR_OWVAR 35
28175: PUSH
28176: LD_INT 20
28178: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28179: LD_ADDR_OWVAR 28
28183: PUSH
28184: LD_INT 17
28186: ST_TO_ADDR
// hc_gallery :=  ;
28187: LD_ADDR_OWVAR 33
28191: PUSH
28192: LD_STRING 
28194: ST_TO_ADDR
// hc_name :=  ;
28195: LD_ADDR_OWVAR 26
28199: PUSH
28200: LD_STRING 
28202: ST_TO_ADDR
// un := CreateHuman ;
28203: LD_ADDR_VAR 0 2
28207: PUSH
28208: CALL_OW 44
28212: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28213: LD_VAR 0 2
28217: PPUSH
28218: LD_INT 1
28220: PPUSH
28221: CALL_OW 51
// tmp := tmp ^ un ;
28225: LD_ADDR_VAR 0 3
28229: PUSH
28230: LD_VAR 0 3
28234: PUSH
28235: LD_VAR 0 2
28239: ADD
28240: ST_TO_ADDR
// end ;
28241: GO 28137
28243: POP
28244: POP
// repeat wait ( 0 0$1 ) ;
28245: LD_INT 35
28247: PPUSH
28248: CALL_OW 67
// for un in tmp do
28252: LD_ADDR_VAR 0 2
28256: PUSH
28257: LD_VAR 0 3
28261: PUSH
28262: FOR_IN
28263: IFFALSE 28337
// begin if IsDead ( un ) then
28265: LD_VAR 0 2
28269: PPUSH
28270: CALL_OW 301
28274: IFFALSE 28294
// begin tmp := tmp diff un ;
28276: LD_ADDR_VAR 0 3
28280: PUSH
28281: LD_VAR 0 3
28285: PUSH
28286: LD_VAR 0 2
28290: DIFF
28291: ST_TO_ADDR
// continue ;
28292: GO 28262
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28294: LD_VAR 0 2
28298: PPUSH
28299: LD_INT 3
28301: PUSH
28302: LD_INT 22
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PPUSH
28316: CALL_OW 69
28320: PPUSH
28321: LD_VAR 0 2
28325: PPUSH
28326: CALL_OW 74
28330: PPUSH
28331: CALL_OW 115
// end ;
28335: GO 28262
28337: POP
28338: POP
// until not tmp ;
28339: LD_VAR 0 3
28343: NOT
28344: IFFALSE 28245
// end ;
28346: PPOPN 3
28348: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28349: LD_EXP 61
28353: IFFALSE 28361
28355: PUSH
28356: LD_EXP 86
28360: AND
28361: IFFALSE 28415
28363: GO 28365
28365: DISABLE
// begin ToLua ( displayTroll(); ) ;
28366: LD_STRING displayTroll();
28368: PPUSH
28369: CALL_OW 559
// wait ( 3 3$00 ) ;
28373: LD_INT 6300
28375: PPUSH
28376: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28380: LD_STRING hideTroll();
28382: PPUSH
28383: CALL_OW 559
// wait ( 1 1$00 ) ;
28387: LD_INT 2100
28389: PPUSH
28390: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28394: LD_STRING displayTroll();
28396: PPUSH
28397: CALL_OW 559
// wait ( 1 1$00 ) ;
28401: LD_INT 2100
28403: PPUSH
28404: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28408: LD_STRING hideTroll();
28410: PPUSH
28411: CALL_OW 559
// end ;
28415: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28416: LD_EXP 61
28420: IFFALSE 28428
28422: PUSH
28423: LD_EXP 87
28427: AND
28428: IFFALSE 28491
28430: GO 28432
28432: DISABLE
28433: LD_INT 0
28435: PPUSH
// begin p := 0 ;
28436: LD_ADDR_VAR 0 1
28440: PUSH
28441: LD_INT 0
28443: ST_TO_ADDR
// repeat game_speed := 1 ;
28444: LD_ADDR_OWVAR 65
28448: PUSH
28449: LD_INT 1
28451: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28452: LD_INT 35
28454: PPUSH
28455: CALL_OW 67
// p := p + 1 ;
28459: LD_ADDR_VAR 0 1
28463: PUSH
28464: LD_VAR 0 1
28468: PUSH
28469: LD_INT 1
28471: PLUS
28472: ST_TO_ADDR
// until p >= 60 ;
28473: LD_VAR 0 1
28477: PUSH
28478: LD_INT 60
28480: GREATEREQUAL
28481: IFFALSE 28444
// game_speed := 4 ;
28483: LD_ADDR_OWVAR 65
28487: PUSH
28488: LD_INT 4
28490: ST_TO_ADDR
// end ;
28491: PPOPN 1
28493: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28494: LD_EXP 61
28498: IFFALSE 28506
28500: PUSH
28501: LD_EXP 88
28505: AND
28506: IFFALSE 28652
28508: GO 28510
28510: DISABLE
28511: LD_INT 0
28513: PPUSH
28514: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28515: LD_ADDR_VAR 0 1
28519: PUSH
28520: LD_INT 22
28522: PUSH
28523: LD_OWVAR 2
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: LD_INT 30
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 30
28547: PUSH
28548: LD_INT 1
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PPUSH
28564: CALL_OW 69
28568: ST_TO_ADDR
// if not depot then
28569: LD_VAR 0 1
28573: NOT
28574: IFFALSE 28578
// exit ;
28576: GO 28652
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28578: LD_ADDR_VAR 0 2
28582: PUSH
28583: LD_VAR 0 1
28587: PUSH
28588: LD_INT 1
28590: PPUSH
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 12
28600: ARRAY
28601: PPUSH
28602: CALL_OW 274
28606: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28607: LD_VAR 0 2
28611: PPUSH
28612: LD_INT 1
28614: PPUSH
28615: LD_INT 0
28617: PPUSH
28618: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28622: LD_VAR 0 2
28626: PPUSH
28627: LD_INT 2
28629: PPUSH
28630: LD_INT 0
28632: PPUSH
28633: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28637: LD_VAR 0 2
28641: PPUSH
28642: LD_INT 3
28644: PPUSH
28645: LD_INT 0
28647: PPUSH
28648: CALL_OW 277
// end ;
28652: PPOPN 2
28654: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28655: LD_EXP 61
28659: IFFALSE 28667
28661: PUSH
28662: LD_EXP 89
28666: AND
28667: IFFALSE 28764
28669: GO 28671
28671: DISABLE
28672: LD_INT 0
28674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28675: LD_ADDR_VAR 0 1
28679: PUSH
28680: LD_INT 22
28682: PUSH
28683: LD_OWVAR 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 21
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: LD_INT 23
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: PPUSH
28724: CALL_OW 69
28728: ST_TO_ADDR
// if not tmp then
28729: LD_VAR 0 1
28733: NOT
28734: IFFALSE 28738
// exit ;
28736: GO 28764
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28738: LD_VAR 0 1
28742: PUSH
28743: LD_INT 1
28745: PPUSH
28746: LD_VAR 0 1
28750: PPUSH
28751: CALL_OW 12
28755: ARRAY
28756: PPUSH
28757: LD_INT 200
28759: PPUSH
28760: CALL_OW 234
// end ;
28764: PPOPN 1
28766: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28767: LD_EXP 61
28771: IFFALSE 28779
28773: PUSH
28774: LD_EXP 90
28778: AND
28779: IFFALSE 28858
28781: GO 28783
28783: DISABLE
28784: LD_INT 0
28786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28787: LD_ADDR_VAR 0 1
28791: PUSH
28792: LD_INT 22
28794: PUSH
28795: LD_OWVAR 2
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 21
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PPUSH
28818: CALL_OW 69
28822: ST_TO_ADDR
// if not tmp then
28823: LD_VAR 0 1
28827: NOT
28828: IFFALSE 28832
// exit ;
28830: GO 28858
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28832: LD_VAR 0 1
28836: PUSH
28837: LD_INT 1
28839: PPUSH
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 12
28849: ARRAY
28850: PPUSH
28851: LD_INT 60
28853: PPUSH
28854: CALL_OW 234
// end ;
28858: PPOPN 1
28860: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28861: LD_EXP 61
28865: IFFALSE 28873
28867: PUSH
28868: LD_EXP 91
28872: AND
28873: IFFALSE 28972
28875: GO 28877
28877: DISABLE
28878: LD_INT 0
28880: PPUSH
28881: PPUSH
// begin enable ;
28882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28883: LD_ADDR_VAR 0 1
28887: PUSH
28888: LD_INT 22
28890: PUSH
28891: LD_OWVAR 2
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 61
28902: PUSH
28903: EMPTY
28904: LIST
28905: PUSH
28906: LD_INT 33
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: PPUSH
28921: CALL_OW 69
28925: ST_TO_ADDR
// if not tmp then
28926: LD_VAR 0 1
28930: NOT
28931: IFFALSE 28935
// exit ;
28933: GO 28972
// for i in tmp do
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: LD_VAR 0 1
28944: PUSH
28945: FOR_IN
28946: IFFALSE 28970
// if IsControledBy ( i ) then
28948: LD_VAR 0 2
28952: PPUSH
28953: CALL_OW 312
28957: IFFALSE 28968
// ComUnlink ( i ) ;
28959: LD_VAR 0 2
28963: PPUSH
28964: CALL_OW 136
28968: GO 28945
28970: POP
28971: POP
// end ;
28972: PPOPN 2
28974: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28975: LD_EXP 61
28979: IFFALSE 28987
28981: PUSH
28982: LD_EXP 92
28986: AND
28987: IFFALSE 29127
28989: GO 28991
28991: DISABLE
28992: LD_INT 0
28994: PPUSH
28995: PPUSH
// begin ToLua ( displayPowell(); ) ;
28996: LD_STRING displayPowell();
28998: PPUSH
28999: CALL_OW 559
// uc_side := 0 ;
29003: LD_ADDR_OWVAR 20
29007: PUSH
29008: LD_INT 0
29010: ST_TO_ADDR
// uc_nation := 2 ;
29011: LD_ADDR_OWVAR 21
29015: PUSH
29016: LD_INT 2
29018: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29019: LD_ADDR_OWVAR 37
29023: PUSH
29024: LD_INT 14
29026: ST_TO_ADDR
// vc_engine := engine_siberite ;
29027: LD_ADDR_OWVAR 39
29031: PUSH
29032: LD_INT 3
29034: ST_TO_ADDR
// vc_control := control_apeman ;
29035: LD_ADDR_OWVAR 38
29039: PUSH
29040: LD_INT 5
29042: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29043: LD_ADDR_OWVAR 40
29047: PUSH
29048: LD_INT 29
29050: ST_TO_ADDR
// un := CreateVehicle ;
29051: LD_ADDR_VAR 0 2
29055: PUSH
29056: CALL_OW 45
29060: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29061: LD_VAR 0 2
29065: PPUSH
29066: LD_INT 1
29068: PPUSH
29069: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29073: LD_INT 35
29075: PPUSH
29076: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29080: LD_VAR 0 2
29084: PPUSH
29085: LD_INT 22
29087: PUSH
29088: LD_OWVAR 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PPUSH
29097: CALL_OW 69
29101: PPUSH
29102: LD_VAR 0 2
29106: PPUSH
29107: CALL_OW 74
29111: PPUSH
29112: CALL_OW 115
// until IsDead ( un ) ;
29116: LD_VAR 0 2
29120: PPUSH
29121: CALL_OW 301
29125: IFFALSE 29073
// end ;
29127: PPOPN 2
29129: END
// every 0 0$1 trigger StreamModeActive and sStu do
29130: LD_EXP 61
29134: IFFALSE 29142
29136: PUSH
29137: LD_EXP 100
29141: AND
29142: IFFALSE 29158
29144: GO 29146
29146: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29147: LD_STRING displayStucuk();
29149: PPUSH
29150: CALL_OW 559
// ResetFog ;
29154: CALL_OW 335
// end ;
29158: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29159: LD_EXP 61
29163: IFFALSE 29171
29165: PUSH
29166: LD_EXP 93
29170: AND
29171: IFFALSE 29312
29173: GO 29175
29175: DISABLE
29176: LD_INT 0
29178: PPUSH
29179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29180: LD_ADDR_VAR 0 2
29184: PUSH
29185: LD_INT 22
29187: PUSH
29188: LD_OWVAR 2
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 21
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PPUSH
29211: CALL_OW 69
29215: ST_TO_ADDR
// if not tmp then
29216: LD_VAR 0 2
29220: NOT
29221: IFFALSE 29225
// exit ;
29223: GO 29312
// un := tmp [ rand ( 1 , tmp ) ] ;
29225: LD_ADDR_VAR 0 1
29229: PUSH
29230: LD_VAR 0 2
29234: PUSH
29235: LD_INT 1
29237: PPUSH
29238: LD_VAR 0 2
29242: PPUSH
29243: CALL_OW 12
29247: ARRAY
29248: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29249: LD_VAR 0 1
29253: PPUSH
29254: LD_INT 0
29256: PPUSH
29257: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29261: LD_VAR 0 1
29265: PPUSH
29266: LD_OWVAR 3
29270: PUSH
29271: LD_VAR 0 1
29275: DIFF
29276: PPUSH
29277: LD_VAR 0 1
29281: PPUSH
29282: CALL_OW 74
29286: PPUSH
29287: CALL_OW 115
// wait ( 0 0$20 ) ;
29291: LD_INT 700
29293: PPUSH
29294: CALL_OW 67
// SetSide ( un , your_side ) ;
29298: LD_VAR 0 1
29302: PPUSH
29303: LD_OWVAR 2
29307: PPUSH
29308: CALL_OW 235
// end ;
29312: PPOPN 2
29314: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29315: LD_EXP 61
29319: IFFALSE 29327
29321: PUSH
29322: LD_EXP 94
29326: AND
29327: IFFALSE 29433
29329: GO 29331
29331: DISABLE
29332: LD_INT 0
29334: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29335: LD_ADDR_VAR 0 1
29339: PUSH
29340: LD_INT 22
29342: PUSH
29343: LD_OWVAR 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 30
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 30
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PPUSH
29384: CALL_OW 69
29388: ST_TO_ADDR
// if not depot then
29389: LD_VAR 0 1
29393: NOT
29394: IFFALSE 29398
// exit ;
29396: GO 29433
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29398: LD_VAR 0 1
29402: PUSH
29403: LD_INT 1
29405: ARRAY
29406: PPUSH
29407: CALL_OW 250
29411: PPUSH
29412: LD_VAR 0 1
29416: PUSH
29417: LD_INT 1
29419: ARRAY
29420: PPUSH
29421: CALL_OW 251
29425: PPUSH
29426: LD_INT 70
29428: PPUSH
29429: CALL_OW 495
// end ;
29433: PPOPN 1
29435: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29436: LD_EXP 61
29440: IFFALSE 29448
29442: PUSH
29443: LD_EXP 95
29447: AND
29448: IFFALSE 29659
29450: GO 29452
29452: DISABLE
29453: LD_INT 0
29455: PPUSH
29456: PPUSH
29457: PPUSH
29458: PPUSH
29459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29460: LD_ADDR_VAR 0 5
29464: PUSH
29465: LD_INT 22
29467: PUSH
29468: LD_OWVAR 2
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 21
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PPUSH
29491: CALL_OW 69
29495: ST_TO_ADDR
// if not tmp then
29496: LD_VAR 0 5
29500: NOT
29501: IFFALSE 29505
// exit ;
29503: GO 29659
// for i in tmp do
29505: LD_ADDR_VAR 0 1
29509: PUSH
29510: LD_VAR 0 5
29514: PUSH
29515: FOR_IN
29516: IFFALSE 29657
// begin d := rand ( 0 , 5 ) ;
29518: LD_ADDR_VAR 0 4
29522: PUSH
29523: LD_INT 0
29525: PPUSH
29526: LD_INT 5
29528: PPUSH
29529: CALL_OW 12
29533: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29534: LD_ADDR_VAR 0 2
29538: PUSH
29539: LD_VAR 0 1
29543: PPUSH
29544: CALL_OW 250
29548: PPUSH
29549: LD_VAR 0 4
29553: PPUSH
29554: LD_INT 3
29556: PPUSH
29557: LD_INT 12
29559: PPUSH
29560: CALL_OW 12
29564: PPUSH
29565: CALL_OW 272
29569: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29570: LD_ADDR_VAR 0 3
29574: PUSH
29575: LD_VAR 0 1
29579: PPUSH
29580: CALL_OW 251
29584: PPUSH
29585: LD_VAR 0 4
29589: PPUSH
29590: LD_INT 3
29592: PPUSH
29593: LD_INT 12
29595: PPUSH
29596: CALL_OW 12
29600: PPUSH
29601: CALL_OW 273
29605: ST_TO_ADDR
// if ValidHex ( x , y ) then
29606: LD_VAR 0 2
29610: PPUSH
29611: LD_VAR 0 3
29615: PPUSH
29616: CALL_OW 488
29620: IFFALSE 29655
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29622: LD_VAR 0 1
29626: PPUSH
29627: LD_VAR 0 2
29631: PPUSH
29632: LD_VAR 0 3
29636: PPUSH
29637: LD_INT 3
29639: PPUSH
29640: LD_INT 6
29642: PPUSH
29643: CALL_OW 12
29647: PPUSH
29648: LD_INT 1
29650: PPUSH
29651: CALL_OW 483
// end ;
29655: GO 29515
29657: POP
29658: POP
// end ;
29659: PPOPN 5
29661: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29662: LD_EXP 61
29666: IFFALSE 29674
29668: PUSH
29669: LD_EXP 96
29673: AND
29674: IFFALSE 29768
29676: GO 29678
29678: DISABLE
29679: LD_INT 0
29681: PPUSH
29682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29683: LD_ADDR_VAR 0 2
29687: PUSH
29688: LD_INT 22
29690: PUSH
29691: LD_OWVAR 2
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 32
29702: PUSH
29703: LD_INT 1
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 21
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: PPUSH
29725: CALL_OW 69
29729: ST_TO_ADDR
// if not tmp then
29730: LD_VAR 0 2
29734: NOT
29735: IFFALSE 29739
// exit ;
29737: GO 29768
// for i in tmp do
29739: LD_ADDR_VAR 0 1
29743: PUSH
29744: LD_VAR 0 2
29748: PUSH
29749: FOR_IN
29750: IFFALSE 29766
// SetFuel ( i , 0 ) ;
29752: LD_VAR 0 1
29756: PPUSH
29757: LD_INT 0
29759: PPUSH
29760: CALL_OW 240
29764: GO 29749
29766: POP
29767: POP
// end ;
29768: PPOPN 2
29770: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29771: LD_EXP 61
29775: IFFALSE 29783
29777: PUSH
29778: LD_EXP 97
29782: AND
29783: IFFALSE 29849
29785: GO 29787
29787: DISABLE
29788: LD_INT 0
29790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29791: LD_ADDR_VAR 0 1
29795: PUSH
29796: LD_INT 22
29798: PUSH
29799: LD_OWVAR 2
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 30
29810: PUSH
29811: LD_INT 29
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PPUSH
29822: CALL_OW 69
29826: ST_TO_ADDR
// if not tmp then
29827: LD_VAR 0 1
29831: NOT
29832: IFFALSE 29836
// exit ;
29834: GO 29849
// DestroyUnit ( tmp [ 1 ] ) ;
29836: LD_VAR 0 1
29840: PUSH
29841: LD_INT 1
29843: ARRAY
29844: PPUSH
29845: CALL_OW 65
// end ;
29849: PPOPN 1
29851: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29852: LD_EXP 61
29856: IFFALSE 29864
29858: PUSH
29859: LD_EXP 99
29863: AND
29864: IFFALSE 29993
29866: GO 29868
29868: DISABLE
29869: LD_INT 0
29871: PPUSH
// begin uc_side := 0 ;
29872: LD_ADDR_OWVAR 20
29876: PUSH
29877: LD_INT 0
29879: ST_TO_ADDR
// uc_nation := nation_arabian ;
29880: LD_ADDR_OWVAR 21
29884: PUSH
29885: LD_INT 2
29887: ST_TO_ADDR
// hc_gallery :=  ;
29888: LD_ADDR_OWVAR 33
29892: PUSH
29893: LD_STRING 
29895: ST_TO_ADDR
// hc_name :=  ;
29896: LD_ADDR_OWVAR 26
29900: PUSH
29901: LD_STRING 
29903: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29904: LD_INT 1
29906: PPUSH
29907: LD_INT 11
29909: PPUSH
29910: LD_INT 10
29912: PPUSH
29913: CALL_OW 380
// un := CreateHuman ;
29917: LD_ADDR_VAR 0 1
29921: PUSH
29922: CALL_OW 44
29926: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29927: LD_VAR 0 1
29931: PPUSH
29932: LD_INT 1
29934: PPUSH
29935: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29939: LD_INT 35
29941: PPUSH
29942: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29946: LD_VAR 0 1
29950: PPUSH
29951: LD_INT 22
29953: PUSH
29954: LD_OWVAR 2
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PPUSH
29963: CALL_OW 69
29967: PPUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 74
29977: PPUSH
29978: CALL_OW 115
// until IsDead ( un ) ;
29982: LD_VAR 0 1
29986: PPUSH
29987: CALL_OW 301
29991: IFFALSE 29939
// end ;
29993: PPOPN 1
29995: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29996: LD_EXP 61
30000: IFFALSE 30008
30002: PUSH
30003: LD_EXP 101
30007: AND
30008: IFFALSE 30020
30010: GO 30012
30012: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30013: LD_STRING earthquake(getX(game), 0, 32)
30015: PPUSH
30016: CALL_OW 559
30020: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30021: LD_EXP 61
30025: IFFALSE 30033
30027: PUSH
30028: LD_EXP 102
30032: AND
30033: IFFALSE 30124
30035: GO 30037
30037: DISABLE
30038: LD_INT 0
30040: PPUSH
// begin enable ;
30041: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30042: LD_ADDR_VAR 0 1
30046: PUSH
30047: LD_INT 22
30049: PUSH
30050: LD_OWVAR 2
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 21
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 33
30071: PUSH
30072: LD_INT 3
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: LIST
30083: PPUSH
30084: CALL_OW 69
30088: ST_TO_ADDR
// if not tmp then
30089: LD_VAR 0 1
30093: NOT
30094: IFFALSE 30098
// exit ;
30096: GO 30124
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30098: LD_VAR 0 1
30102: PUSH
30103: LD_INT 1
30105: PPUSH
30106: LD_VAR 0 1
30110: PPUSH
30111: CALL_OW 12
30115: ARRAY
30116: PPUSH
30117: LD_INT 1
30119: PPUSH
30120: CALL_OW 234
// end ;
30124: PPOPN 1
30126: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30127: LD_EXP 61
30131: IFFALSE 30139
30133: PUSH
30134: LD_EXP 103
30138: AND
30139: IFFALSE 30280
30141: GO 30143
30143: DISABLE
30144: LD_INT 0
30146: PPUSH
30147: PPUSH
30148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30149: LD_ADDR_VAR 0 3
30153: PUSH
30154: LD_INT 22
30156: PUSH
30157: LD_OWVAR 2
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 25
30168: PUSH
30169: LD_INT 1
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PPUSH
30180: CALL_OW 69
30184: ST_TO_ADDR
// if not tmp then
30185: LD_VAR 0 3
30189: NOT
30190: IFFALSE 30194
// exit ;
30192: GO 30280
// un := tmp [ rand ( 1 , tmp ) ] ;
30194: LD_ADDR_VAR 0 2
30198: PUSH
30199: LD_VAR 0 3
30203: PUSH
30204: LD_INT 1
30206: PPUSH
30207: LD_VAR 0 3
30211: PPUSH
30212: CALL_OW 12
30216: ARRAY
30217: ST_TO_ADDR
// if Crawls ( un ) then
30218: LD_VAR 0 2
30222: PPUSH
30223: CALL_OW 318
30227: IFFALSE 30238
// ComWalk ( un ) ;
30229: LD_VAR 0 2
30233: PPUSH
30234: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30238: LD_VAR 0 2
30242: PPUSH
30243: LD_INT 9
30245: PPUSH
30246: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30250: LD_INT 28
30252: PPUSH
30253: LD_OWVAR 2
30257: PPUSH
30258: LD_INT 2
30260: PPUSH
30261: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30265: LD_INT 29
30267: PPUSH
30268: LD_OWVAR 2
30272: PPUSH
30273: LD_INT 2
30275: PPUSH
30276: CALL_OW 322
// end ;
30280: PPOPN 3
30282: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30283: LD_EXP 61
30287: IFFALSE 30295
30289: PUSH
30290: LD_EXP 104
30294: AND
30295: IFFALSE 30406
30297: GO 30299
30299: DISABLE
30300: LD_INT 0
30302: PPUSH
30303: PPUSH
30304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30305: LD_ADDR_VAR 0 3
30309: PUSH
30310: LD_INT 22
30312: PUSH
30313: LD_OWVAR 2
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 25
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PPUSH
30336: CALL_OW 69
30340: ST_TO_ADDR
// if not tmp then
30341: LD_VAR 0 3
30345: NOT
30346: IFFALSE 30350
// exit ;
30348: GO 30406
// un := tmp [ rand ( 1 , tmp ) ] ;
30350: LD_ADDR_VAR 0 2
30354: PUSH
30355: LD_VAR 0 3
30359: PUSH
30360: LD_INT 1
30362: PPUSH
30363: LD_VAR 0 3
30367: PPUSH
30368: CALL_OW 12
30372: ARRAY
30373: ST_TO_ADDR
// if Crawls ( un ) then
30374: LD_VAR 0 2
30378: PPUSH
30379: CALL_OW 318
30383: IFFALSE 30394
// ComWalk ( un ) ;
30385: LD_VAR 0 2
30389: PPUSH
30390: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30394: LD_VAR 0 2
30398: PPUSH
30399: LD_INT 8
30401: PPUSH
30402: CALL_OW 336
// end ;
30406: PPOPN 3
30408: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30409: LD_EXP 61
30413: IFFALSE 30421
30415: PUSH
30416: LD_EXP 105
30420: AND
30421: IFFALSE 30565
30423: GO 30425
30425: DISABLE
30426: LD_INT 0
30428: PPUSH
30429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30430: LD_ADDR_VAR 0 2
30434: PUSH
30435: LD_INT 22
30437: PUSH
30438: LD_OWVAR 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 21
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: LD_INT 34
30462: PUSH
30463: LD_INT 12
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 34
30472: PUSH
30473: LD_INT 51
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 34
30482: PUSH
30483: LD_INT 32
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: PPUSH
30501: CALL_OW 69
30505: ST_TO_ADDR
// if not tmp then
30506: LD_VAR 0 2
30510: NOT
30511: IFFALSE 30515
// exit ;
30513: GO 30565
// for i in tmp do
30515: LD_ADDR_VAR 0 1
30519: PUSH
30520: LD_VAR 0 2
30524: PUSH
30525: FOR_IN
30526: IFFALSE 30563
// if GetCargo ( i , mat_artifact ) = 0 then
30528: LD_VAR 0 1
30532: PPUSH
30533: LD_INT 4
30535: PPUSH
30536: CALL_OW 289
30540: PUSH
30541: LD_INT 0
30543: EQUAL
30544: IFFALSE 30561
// SetCargo ( i , mat_siberit , 100 ) ;
30546: LD_VAR 0 1
30550: PPUSH
30551: LD_INT 3
30553: PPUSH
30554: LD_INT 100
30556: PPUSH
30557: CALL_OW 290
30561: GO 30525
30563: POP
30564: POP
// end ;
30565: PPOPN 2
30567: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30568: LD_EXP 61
30572: IFFALSE 30580
30574: PUSH
30575: LD_EXP 106
30579: AND
30580: IFFALSE 30763
30582: GO 30584
30584: DISABLE
30585: LD_INT 0
30587: PPUSH
30588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30589: LD_ADDR_VAR 0 2
30593: PUSH
30594: LD_INT 22
30596: PUSH
30597: LD_OWVAR 2
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 69
30610: ST_TO_ADDR
// if not tmp then
30611: LD_VAR 0 2
30615: NOT
30616: IFFALSE 30620
// exit ;
30618: GO 30763
// for i := 1 to 2 do
30620: LD_ADDR_VAR 0 1
30624: PUSH
30625: DOUBLE
30626: LD_INT 1
30628: DEC
30629: ST_TO_ADDR
30630: LD_INT 2
30632: PUSH
30633: FOR_TO
30634: IFFALSE 30761
// begin uc_side := your_side ;
30636: LD_ADDR_OWVAR 20
30640: PUSH
30641: LD_OWVAR 2
30645: ST_TO_ADDR
// uc_nation := nation_american ;
30646: LD_ADDR_OWVAR 21
30650: PUSH
30651: LD_INT 1
30653: ST_TO_ADDR
// vc_chassis := us_morphling ;
30654: LD_ADDR_OWVAR 37
30658: PUSH
30659: LD_INT 5
30661: ST_TO_ADDR
// vc_engine := engine_siberite ;
30662: LD_ADDR_OWVAR 39
30666: PUSH
30667: LD_INT 3
30669: ST_TO_ADDR
// vc_control := control_computer ;
30670: LD_ADDR_OWVAR 38
30674: PUSH
30675: LD_INT 3
30677: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30678: LD_ADDR_OWVAR 40
30682: PUSH
30683: LD_INT 10
30685: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30686: LD_VAR 0 2
30690: PUSH
30691: LD_INT 1
30693: ARRAY
30694: PPUSH
30695: CALL_OW 310
30699: NOT
30700: IFFALSE 30747
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30702: CALL_OW 45
30706: PPUSH
30707: LD_VAR 0 2
30711: PUSH
30712: LD_INT 1
30714: ARRAY
30715: PPUSH
30716: CALL_OW 250
30720: PPUSH
30721: LD_VAR 0 2
30725: PUSH
30726: LD_INT 1
30728: ARRAY
30729: PPUSH
30730: CALL_OW 251
30734: PPUSH
30735: LD_INT 12
30737: PPUSH
30738: LD_INT 1
30740: PPUSH
30741: CALL_OW 50
30745: GO 30759
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30747: CALL_OW 45
30751: PPUSH
30752: LD_INT 1
30754: PPUSH
30755: CALL_OW 51
// end ;
30759: GO 30633
30761: POP
30762: POP
// end ;
30763: PPOPN 2
30765: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30766: LD_EXP 61
30770: IFFALSE 30778
30772: PUSH
30773: LD_EXP 107
30777: AND
30778: IFFALSE 31000
30780: GO 30782
30782: DISABLE
30783: LD_INT 0
30785: PPUSH
30786: PPUSH
30787: PPUSH
30788: PPUSH
30789: PPUSH
30790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30791: LD_ADDR_VAR 0 6
30795: PUSH
30796: LD_INT 22
30798: PUSH
30799: LD_OWVAR 2
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 21
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 3
30820: PUSH
30821: LD_INT 23
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: PPUSH
30840: CALL_OW 69
30844: ST_TO_ADDR
// if not tmp then
30845: LD_VAR 0 6
30849: NOT
30850: IFFALSE 30854
// exit ;
30852: GO 31000
// s1 := rand ( 1 , 4 ) ;
30854: LD_ADDR_VAR 0 2
30858: PUSH
30859: LD_INT 1
30861: PPUSH
30862: LD_INT 4
30864: PPUSH
30865: CALL_OW 12
30869: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30870: LD_ADDR_VAR 0 4
30874: PUSH
30875: LD_VAR 0 6
30879: PUSH
30880: LD_INT 1
30882: ARRAY
30883: PPUSH
30884: LD_VAR 0 2
30888: PPUSH
30889: CALL_OW 259
30893: ST_TO_ADDR
// if s1 = 1 then
30894: LD_VAR 0 2
30898: PUSH
30899: LD_INT 1
30901: EQUAL
30902: IFFALSE 30922
// s2 := rand ( 2 , 4 ) else
30904: LD_ADDR_VAR 0 3
30908: PUSH
30909: LD_INT 2
30911: PPUSH
30912: LD_INT 4
30914: PPUSH
30915: CALL_OW 12
30919: ST_TO_ADDR
30920: GO 30930
// s2 := 1 ;
30922: LD_ADDR_VAR 0 3
30926: PUSH
30927: LD_INT 1
30929: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30930: LD_ADDR_VAR 0 5
30934: PUSH
30935: LD_VAR 0 6
30939: PUSH
30940: LD_INT 1
30942: ARRAY
30943: PPUSH
30944: LD_VAR 0 3
30948: PPUSH
30949: CALL_OW 259
30953: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30954: LD_VAR 0 6
30958: PUSH
30959: LD_INT 1
30961: ARRAY
30962: PPUSH
30963: LD_VAR 0 2
30967: PPUSH
30968: LD_VAR 0 5
30972: PPUSH
30973: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30977: LD_VAR 0 6
30981: PUSH
30982: LD_INT 1
30984: ARRAY
30985: PPUSH
30986: LD_VAR 0 3
30990: PPUSH
30991: LD_VAR 0 4
30995: PPUSH
30996: CALL_OW 237
// end ;
31000: PPOPN 6
31002: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31003: LD_EXP 61
31007: IFFALSE 31015
31009: PUSH
31010: LD_EXP 108
31014: AND
31015: IFFALSE 31094
31017: GO 31019
31019: DISABLE
31020: LD_INT 0
31022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31023: LD_ADDR_VAR 0 1
31027: PUSH
31028: LD_INT 22
31030: PUSH
31031: LD_OWVAR 2
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 30
31042: PUSH
31043: LD_INT 3
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PPUSH
31054: CALL_OW 69
31058: ST_TO_ADDR
// if not tmp then
31059: LD_VAR 0 1
31063: NOT
31064: IFFALSE 31068
// exit ;
31066: GO 31094
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31068: LD_VAR 0 1
31072: PUSH
31073: LD_INT 1
31075: PPUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 12
31085: ARRAY
31086: PPUSH
31087: LD_INT 1
31089: PPUSH
31090: CALL_OW 234
// end ;
31094: PPOPN 1
31096: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31097: LD_EXP 61
31101: IFFALSE 31109
31103: PUSH
31104: LD_EXP 109
31108: AND
31109: IFFALSE 31221
31111: GO 31113
31113: DISABLE
31114: LD_INT 0
31116: PPUSH
31117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31118: LD_ADDR_VAR 0 2
31122: PUSH
31123: LD_INT 22
31125: PUSH
31126: LD_OWVAR 2
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: LD_INT 30
31140: PUSH
31141: LD_INT 27
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 30
31150: PUSH
31151: LD_INT 26
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 30
31160: PUSH
31161: LD_INT 28
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PPUSH
31178: CALL_OW 69
31182: ST_TO_ADDR
// if not tmp then
31183: LD_VAR 0 2
31187: NOT
31188: IFFALSE 31192
// exit ;
31190: GO 31221
// for i in tmp do
31192: LD_ADDR_VAR 0 1
31196: PUSH
31197: LD_VAR 0 2
31201: PUSH
31202: FOR_IN
31203: IFFALSE 31219
// SetLives ( i , 1 ) ;
31205: LD_VAR 0 1
31209: PPUSH
31210: LD_INT 1
31212: PPUSH
31213: CALL_OW 234
31217: GO 31202
31219: POP
31220: POP
// end ;
31221: PPOPN 2
31223: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31224: LD_EXP 61
31228: IFFALSE 31236
31230: PUSH
31231: LD_EXP 110
31235: AND
31236: IFFALSE 31523
31238: GO 31240
31240: DISABLE
31241: LD_INT 0
31243: PPUSH
31244: PPUSH
31245: PPUSH
// begin i := rand ( 1 , 7 ) ;
31246: LD_ADDR_VAR 0 1
31250: PUSH
31251: LD_INT 1
31253: PPUSH
31254: LD_INT 7
31256: PPUSH
31257: CALL_OW 12
31261: ST_TO_ADDR
// case i of 1 :
31262: LD_VAR 0 1
31266: PUSH
31267: LD_INT 1
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31285
31275: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31276: LD_STRING earthquake(getX(game), 0, 32)
31278: PPUSH
31279: CALL_OW 559
31283: GO 31523
31285: LD_INT 2
31287: DOUBLE
31288: EQUAL
31289: IFTRUE 31293
31291: GO 31307
31293: POP
// begin ToLua ( displayStucuk(); ) ;
31294: LD_STRING displayStucuk();
31296: PPUSH
31297: CALL_OW 559
// ResetFog ;
31301: CALL_OW 335
// end ; 3 :
31305: GO 31523
31307: LD_INT 3
31309: DOUBLE
31310: EQUAL
31311: IFTRUE 31315
31313: GO 31419
31315: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31316: LD_ADDR_VAR 0 2
31320: PUSH
31321: LD_INT 22
31323: PUSH
31324: LD_OWVAR 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 25
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PPUSH
31347: CALL_OW 69
31351: ST_TO_ADDR
// if not tmp then
31352: LD_VAR 0 2
31356: NOT
31357: IFFALSE 31361
// exit ;
31359: GO 31523
// un := tmp [ rand ( 1 , tmp ) ] ;
31361: LD_ADDR_VAR 0 3
31365: PUSH
31366: LD_VAR 0 2
31370: PUSH
31371: LD_INT 1
31373: PPUSH
31374: LD_VAR 0 2
31378: PPUSH
31379: CALL_OW 12
31383: ARRAY
31384: ST_TO_ADDR
// if Crawls ( un ) then
31385: LD_VAR 0 3
31389: PPUSH
31390: CALL_OW 318
31394: IFFALSE 31405
// ComWalk ( un ) ;
31396: LD_VAR 0 3
31400: PPUSH
31401: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31405: LD_VAR 0 3
31409: PPUSH
31410: LD_INT 8
31412: PPUSH
31413: CALL_OW 336
// end ; 4 :
31417: GO 31523
31419: LD_INT 4
31421: DOUBLE
31422: EQUAL
31423: IFTRUE 31427
31425: GO 31501
31427: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31428: LD_ADDR_VAR 0 2
31432: PUSH
31433: LD_INT 22
31435: PUSH
31436: LD_OWVAR 2
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 30
31447: PUSH
31448: LD_INT 29
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PPUSH
31459: CALL_OW 69
31463: ST_TO_ADDR
// if not tmp then
31464: LD_VAR 0 2
31468: NOT
31469: IFFALSE 31473
// exit ;
31471: GO 31523
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31473: LD_VAR 0 2
31477: PUSH
31478: LD_INT 1
31480: ARRAY
31481: PPUSH
31482: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31486: LD_VAR 0 2
31490: PUSH
31491: LD_INT 1
31493: ARRAY
31494: PPUSH
31495: CALL_OW 65
// end ; 5 .. 7 :
31499: GO 31523
31501: LD_INT 5
31503: DOUBLE
31504: GREATEREQUAL
31505: IFFALSE 31513
31507: LD_INT 7
31509: DOUBLE
31510: LESSEQUAL
31511: IFTRUE 31515
31513: GO 31522
31515: POP
// StreamSibBomb ; end ;
31516: CALL 27704 0 0
31520: GO 31523
31522: POP
// end ;
31523: PPOPN 3
31525: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31526: LD_EXP 61
31530: IFFALSE 31538
31532: PUSH
31533: LD_EXP 111
31537: AND
31538: IFFALSE 31694
31540: GO 31542
31542: DISABLE
31543: LD_INT 0
31545: PPUSH
31546: PPUSH
31547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31548: LD_ADDR_VAR 0 2
31552: PUSH
31553: LD_INT 81
31555: PUSH
31556: LD_OWVAR 2
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: LD_INT 21
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 21
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PPUSH
31597: CALL_OW 69
31601: ST_TO_ADDR
// if not tmp then
31602: LD_VAR 0 2
31606: NOT
31607: IFFALSE 31611
// exit ;
31609: GO 31694
// p := 0 ;
31611: LD_ADDR_VAR 0 3
31615: PUSH
31616: LD_INT 0
31618: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31619: LD_INT 35
31621: PPUSH
31622: CALL_OW 67
// p := p + 1 ;
31626: LD_ADDR_VAR 0 3
31630: PUSH
31631: LD_VAR 0 3
31635: PUSH
31636: LD_INT 1
31638: PLUS
31639: ST_TO_ADDR
// for i in tmp do
31640: LD_ADDR_VAR 0 1
31644: PUSH
31645: LD_VAR 0 2
31649: PUSH
31650: FOR_IN
31651: IFFALSE 31682
// if GetLives ( i ) < 1000 then
31653: LD_VAR 0 1
31657: PPUSH
31658: CALL_OW 256
31662: PUSH
31663: LD_INT 1000
31665: LESS
31666: IFFALSE 31680
// SetLives ( i , 1000 ) ;
31668: LD_VAR 0 1
31672: PPUSH
31673: LD_INT 1000
31675: PPUSH
31676: CALL_OW 234
31680: GO 31650
31682: POP
31683: POP
// until p > 20 ;
31684: LD_VAR 0 3
31688: PUSH
31689: LD_INT 20
31691: GREATER
31692: IFFALSE 31619
// end ;
31694: PPOPN 3
31696: END
// every 0 0$1 trigger StreamModeActive and sTime do
31697: LD_EXP 61
31701: IFFALSE 31709
31703: PUSH
31704: LD_EXP 112
31708: AND
31709: IFFALSE 31744
31711: GO 31713
31713: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31714: LD_INT 28
31716: PPUSH
31717: LD_OWVAR 2
31721: PPUSH
31722: LD_INT 2
31724: PPUSH
31725: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31729: LD_INT 30
31731: PPUSH
31732: LD_OWVAR 2
31736: PPUSH
31737: LD_INT 2
31739: PPUSH
31740: CALL_OW 322
// end ;
31744: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31745: LD_EXP 61
31749: IFFALSE 31757
31751: PUSH
31752: LD_EXP 113
31756: AND
31757: IFFALSE 31878
31759: GO 31761
31761: DISABLE
31762: LD_INT 0
31764: PPUSH
31765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31766: LD_ADDR_VAR 0 2
31770: PUSH
31771: LD_INT 22
31773: PUSH
31774: LD_OWVAR 2
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 21
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 3
31795: PUSH
31796: LD_INT 23
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: LIST
31814: PPUSH
31815: CALL_OW 69
31819: ST_TO_ADDR
// if not tmp then
31820: LD_VAR 0 2
31824: NOT
31825: IFFALSE 31829
// exit ;
31827: GO 31878
// for i in tmp do
31829: LD_ADDR_VAR 0 1
31833: PUSH
31834: LD_VAR 0 2
31838: PUSH
31839: FOR_IN
31840: IFFALSE 31876
// begin if Crawls ( i ) then
31842: LD_VAR 0 1
31846: PPUSH
31847: CALL_OW 318
31851: IFFALSE 31862
// ComWalk ( i ) ;
31853: LD_VAR 0 1
31857: PPUSH
31858: CALL_OW 138
// SetClass ( i , 2 ) ;
31862: LD_VAR 0 1
31866: PPUSH
31867: LD_INT 2
31869: PPUSH
31870: CALL_OW 336
// end ;
31874: GO 31839
31876: POP
31877: POP
// end ;
31878: PPOPN 2
31880: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31881: LD_EXP 61
31885: IFFALSE 31893
31887: PUSH
31888: LD_EXP 114
31892: AND
31893: IFFALSE 32183
31895: GO 31897
31897: DISABLE
31898: LD_INT 0
31900: PPUSH
31901: PPUSH
31902: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31903: LD_OWVAR 2
31907: PPUSH
31908: LD_INT 9
31910: PPUSH
31911: LD_INT 1
31913: PPUSH
31914: LD_INT 1
31916: PPUSH
31917: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31921: LD_INT 9
31923: PPUSH
31924: LD_OWVAR 2
31928: PPUSH
31929: CALL_OW 343
// uc_side := 9 ;
31933: LD_ADDR_OWVAR 20
31937: PUSH
31938: LD_INT 9
31940: ST_TO_ADDR
// uc_nation := 2 ;
31941: LD_ADDR_OWVAR 21
31945: PUSH
31946: LD_INT 2
31948: ST_TO_ADDR
// hc_name := Dark Warrior ;
31949: LD_ADDR_OWVAR 26
31953: PUSH
31954: LD_STRING Dark Warrior
31956: ST_TO_ADDR
// hc_gallery :=  ;
31957: LD_ADDR_OWVAR 33
31961: PUSH
31962: LD_STRING 
31964: ST_TO_ADDR
// hc_noskilllimit := true ;
31965: LD_ADDR_OWVAR 76
31969: PUSH
31970: LD_INT 1
31972: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31973: LD_ADDR_OWVAR 31
31977: PUSH
31978: LD_INT 30
31980: PUSH
31981: LD_INT 30
31983: PUSH
31984: LD_INT 30
31986: PUSH
31987: LD_INT 30
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: ST_TO_ADDR
// un := CreateHuman ;
31996: LD_ADDR_VAR 0 3
32000: PUSH
32001: CALL_OW 44
32005: ST_TO_ADDR
// hc_noskilllimit := false ;
32006: LD_ADDR_OWVAR 76
32010: PUSH
32011: LD_INT 0
32013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32014: LD_VAR 0 3
32018: PPUSH
32019: LD_INT 1
32021: PPUSH
32022: CALL_OW 51
// ToLua ( playRanger() ) ;
32026: LD_STRING playRanger()
32028: PPUSH
32029: CALL_OW 559
// p := 0 ;
32033: LD_ADDR_VAR 0 2
32037: PUSH
32038: LD_INT 0
32040: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32041: LD_INT 35
32043: PPUSH
32044: CALL_OW 67
// p := p + 1 ;
32048: LD_ADDR_VAR 0 2
32052: PUSH
32053: LD_VAR 0 2
32057: PUSH
32058: LD_INT 1
32060: PLUS
32061: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32062: LD_VAR 0 3
32066: PPUSH
32067: CALL_OW 256
32071: PUSH
32072: LD_INT 1000
32074: LESS
32075: IFFALSE 32089
// SetLives ( un , 1000 ) ;
32077: LD_VAR 0 3
32081: PPUSH
32082: LD_INT 1000
32084: PPUSH
32085: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32089: LD_VAR 0 3
32093: PPUSH
32094: LD_INT 81
32096: PUSH
32097: LD_OWVAR 2
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 91
32108: PUSH
32109: LD_VAR 0 3
32113: PUSH
32114: LD_INT 30
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PPUSH
32126: CALL_OW 69
32130: PPUSH
32131: LD_VAR 0 3
32135: PPUSH
32136: CALL_OW 74
32140: PPUSH
32141: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32145: LD_VAR 0 2
32149: PUSH
32150: LD_INT 80
32152: GREATER
32153: IFTRUE 32166
32155: PUSH
32156: LD_VAR 0 3
32160: PPUSH
32161: CALL_OW 301
32165: OR
32166: IFFALSE 32041
// if un then
32168: LD_VAR 0 3
32172: IFFALSE 32183
// RemoveUnit ( un ) ;
32174: LD_VAR 0 3
32178: PPUSH
32179: CALL_OW 64
// end ;
32183: PPOPN 3
32185: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32186: LD_EXP 115
32190: IFFALSE 32306
32192: GO 32194
32194: DISABLE
32195: LD_INT 0
32197: PPUSH
32198: PPUSH
32199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32200: LD_ADDR_VAR 0 2
32204: PUSH
32205: LD_INT 81
32207: PUSH
32208: LD_OWVAR 2
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 21
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PPUSH
32231: CALL_OW 69
32235: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32236: LD_STRING playComputer()
32238: PPUSH
32239: CALL_OW 559
// if not tmp then
32243: LD_VAR 0 2
32247: NOT
32248: IFFALSE 32252
// exit ;
32250: GO 32306
// for i in tmp do
32252: LD_ADDR_VAR 0 1
32256: PUSH
32257: LD_VAR 0 2
32261: PUSH
32262: FOR_IN
32263: IFFALSE 32304
// for j := 1 to 4 do
32265: LD_ADDR_VAR 0 3
32269: PUSH
32270: DOUBLE
32271: LD_INT 1
32273: DEC
32274: ST_TO_ADDR
32275: LD_INT 4
32277: PUSH
32278: FOR_TO
32279: IFFALSE 32300
// SetSkill ( i , j , 10 ) ;
32281: LD_VAR 0 1
32285: PPUSH
32286: LD_VAR 0 3
32290: PPUSH
32291: LD_INT 10
32293: PPUSH
32294: CALL_OW 237
32298: GO 32278
32300: POP
32301: POP
32302: GO 32262
32304: POP
32305: POP
// end ;
32306: PPOPN 3
32308: END
// every 0 0$1 trigger s30 do var i , tmp ;
32309: LD_EXP 116
32313: IFFALSE 32382
32315: GO 32317
32317: DISABLE
32318: LD_INT 0
32320: PPUSH
32321: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32322: LD_ADDR_VAR 0 2
32326: PUSH
32327: LD_INT 22
32329: PUSH
32330: LD_OWVAR 2
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PPUSH
32339: CALL_OW 69
32343: ST_TO_ADDR
// if not tmp then
32344: LD_VAR 0 2
32348: NOT
32349: IFFALSE 32353
// exit ;
32351: GO 32382
// for i in tmp do
32353: LD_ADDR_VAR 0 1
32357: PUSH
32358: LD_VAR 0 2
32362: PUSH
32363: FOR_IN
32364: IFFALSE 32380
// SetLives ( i , 300 ) ;
32366: LD_VAR 0 1
32370: PPUSH
32371: LD_INT 300
32373: PPUSH
32374: CALL_OW 234
32378: GO 32363
32380: POP
32381: POP
// end ;
32382: PPOPN 2
32384: END
// every 0 0$1 trigger s60 do var i , tmp ;
32385: LD_EXP 117
32389: IFFALSE 32458
32391: GO 32393
32393: DISABLE
32394: LD_INT 0
32396: PPUSH
32397: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32398: LD_ADDR_VAR 0 2
32402: PUSH
32403: LD_INT 22
32405: PUSH
32406: LD_OWVAR 2
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PPUSH
32415: CALL_OW 69
32419: ST_TO_ADDR
// if not tmp then
32420: LD_VAR 0 2
32424: NOT
32425: IFFALSE 32429
// exit ;
32427: GO 32458
// for i in tmp do
32429: LD_ADDR_VAR 0 1
32433: PUSH
32434: LD_VAR 0 2
32438: PUSH
32439: FOR_IN
32440: IFFALSE 32456
// SetLives ( i , 600 ) ;
32442: LD_VAR 0 1
32446: PPUSH
32447: LD_INT 600
32449: PPUSH
32450: CALL_OW 234
32454: GO 32439
32456: POP
32457: POP
// end ;
32458: PPOPN 2
32460: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32461: LD_INT 0
32463: PPUSH
// case cmd of 301 :
32464: LD_VAR 0 1
32468: PUSH
32469: LD_INT 301
32471: DOUBLE
32472: EQUAL
32473: IFTRUE 32477
32475: GO 32509
32477: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32478: LD_VAR 0 6
32482: PPUSH
32483: LD_VAR 0 7
32487: PPUSH
32488: LD_VAR 0 8
32492: PPUSH
32493: LD_VAR 0 4
32497: PPUSH
32498: LD_VAR 0 5
32502: PPUSH
32503: CALL 33722 0 5
32507: GO 32630
32509: LD_INT 302
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 32554
32517: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32518: LD_VAR 0 6
32522: PPUSH
32523: LD_VAR 0 7
32527: PPUSH
32528: LD_VAR 0 8
32532: PPUSH
32533: LD_VAR 0 9
32537: PPUSH
32538: LD_VAR 0 4
32542: PPUSH
32543: LD_VAR 0 5
32547: PPUSH
32548: CALL 33813 0 6
32552: GO 32630
32554: LD_INT 303
32556: DOUBLE
32557: EQUAL
32558: IFTRUE 32562
32560: GO 32599
32562: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32563: LD_VAR 0 6
32567: PPUSH
32568: LD_VAR 0 7
32572: PPUSH
32573: LD_VAR 0 8
32577: PPUSH
32578: LD_VAR 0 9
32582: PPUSH
32583: LD_VAR 0 4
32587: PPUSH
32588: LD_VAR 0 5
32592: PPUSH
32593: CALL 32635 0 6
32597: GO 32630
32599: LD_INT 304
32601: DOUBLE
32602: EQUAL
32603: IFTRUE 32607
32605: GO 32629
32607: POP
// hHackTeleport ( unit , x , y ) ; end ;
32608: LD_VAR 0 2
32612: PPUSH
32613: LD_VAR 0 4
32617: PPUSH
32618: LD_VAR 0 5
32622: PPUSH
32623: CALL 34406 0 3
32627: GO 32630
32629: POP
// end ;
32630: LD_VAR 0 12
32634: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32635: LD_INT 0
32637: PPUSH
32638: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32639: LD_VAR 0 1
32643: PUSH
32644: LD_INT 1
32646: LESS
32647: IFTRUE 32659
32649: PUSH
32650: LD_VAR 0 1
32654: PUSH
32655: LD_INT 3
32657: GREATER
32658: OR
32659: IFTRUE 32677
32661: PUSH
32662: LD_VAR 0 5
32666: PPUSH
32667: LD_VAR 0 6
32671: PPUSH
32672: CALL_OW 428
32676: OR
32677: IFFALSE 32681
// exit ;
32679: GO 33409
// uc_side := your_side ;
32681: LD_ADDR_OWVAR 20
32685: PUSH
32686: LD_OWVAR 2
32690: ST_TO_ADDR
// uc_nation := nation ;
32691: LD_ADDR_OWVAR 21
32695: PUSH
32696: LD_VAR 0 1
32700: ST_TO_ADDR
// bc_level = 1 ;
32701: LD_ADDR_OWVAR 43
32705: PUSH
32706: LD_INT 1
32708: ST_TO_ADDR
// case btype of 1 :
32709: LD_VAR 0 2
32713: PUSH
32714: LD_INT 1
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32722
32720: GO 32733
32722: POP
// bc_type := b_depot ; 2 :
32723: LD_ADDR_OWVAR 42
32727: PUSH
32728: LD_INT 0
32730: ST_TO_ADDR
32731: GO 33353
32733: LD_INT 2
32735: DOUBLE
32736: EQUAL
32737: IFTRUE 32741
32739: GO 32752
32741: POP
// bc_type := b_warehouse ; 3 :
32742: LD_ADDR_OWVAR 42
32746: PUSH
32747: LD_INT 1
32749: ST_TO_ADDR
32750: GO 33353
32752: LD_INT 3
32754: DOUBLE
32755: EQUAL
32756: IFTRUE 32760
32758: GO 32771
32760: POP
// bc_type := b_lab ; 4 .. 9 :
32761: LD_ADDR_OWVAR 42
32765: PUSH
32766: LD_INT 6
32768: ST_TO_ADDR
32769: GO 33353
32771: LD_INT 4
32773: DOUBLE
32774: GREATEREQUAL
32775: IFFALSE 32783
32777: LD_INT 9
32779: DOUBLE
32780: LESSEQUAL
32781: IFTRUE 32785
32783: GO 32845
32785: POP
// begin bc_type := b_lab_half ;
32786: LD_ADDR_OWVAR 42
32790: PUSH
32791: LD_INT 7
32793: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32794: LD_ADDR_OWVAR 44
32798: PUSH
32799: LD_INT 10
32801: PUSH
32802: LD_INT 11
32804: PUSH
32805: LD_INT 12
32807: PUSH
32808: LD_INT 15
32810: PUSH
32811: LD_INT 14
32813: PUSH
32814: LD_INT 13
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: PUSH
32825: LD_VAR 0 2
32829: PUSH
32830: LD_INT 3
32832: MINUS
32833: ARRAY
32834: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32835: LD_ADDR_OWVAR 45
32839: PUSH
32840: LD_INT 9
32842: ST_TO_ADDR
// end ; 10 .. 13 :
32843: GO 33353
32845: LD_INT 10
32847: DOUBLE
32848: GREATEREQUAL
32849: IFFALSE 32857
32851: LD_INT 13
32853: DOUBLE
32854: LESSEQUAL
32855: IFTRUE 32859
32857: GO 32936
32859: POP
// begin bc_type := b_lab_full ;
32860: LD_ADDR_OWVAR 42
32864: PUSH
32865: LD_INT 8
32867: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32868: LD_ADDR_OWVAR 44
32872: PUSH
32873: LD_INT 10
32875: PUSH
32876: LD_INT 12
32878: PUSH
32879: LD_INT 14
32881: PUSH
32882: LD_INT 13
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: PUSH
32891: LD_VAR 0 2
32895: PUSH
32896: LD_INT 9
32898: MINUS
32899: ARRAY
32900: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32901: LD_ADDR_OWVAR 45
32905: PUSH
32906: LD_INT 11
32908: PUSH
32909: LD_INT 15
32911: PUSH
32912: LD_INT 12
32914: PUSH
32915: LD_INT 15
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: PUSH
32924: LD_VAR 0 2
32928: PUSH
32929: LD_INT 9
32931: MINUS
32932: ARRAY
32933: ST_TO_ADDR
// end ; 14 :
32934: GO 33353
32936: LD_INT 14
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 32955
32944: POP
// bc_type := b_workshop ; 15 :
32945: LD_ADDR_OWVAR 42
32949: PUSH
32950: LD_INT 2
32952: ST_TO_ADDR
32953: GO 33353
32955: LD_INT 15
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32963
32961: GO 32974
32963: POP
// bc_type := b_factory ; 16 :
32964: LD_ADDR_OWVAR 42
32968: PUSH
32969: LD_INT 3
32971: ST_TO_ADDR
32972: GO 33353
32974: LD_INT 16
32976: DOUBLE
32977: EQUAL
32978: IFTRUE 32982
32980: GO 32993
32982: POP
// bc_type := b_ext_gun ; 17 :
32983: LD_ADDR_OWVAR 42
32987: PUSH
32988: LD_INT 17
32990: ST_TO_ADDR
32991: GO 33353
32993: LD_INT 17
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33029
33001: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33002: LD_ADDR_OWVAR 42
33006: PUSH
33007: LD_INT 19
33009: PUSH
33010: LD_INT 23
33012: PUSH
33013: LD_INT 19
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: LIST
33020: PUSH
33021: LD_VAR 0 1
33025: ARRAY
33026: ST_TO_ADDR
33027: GO 33353
33029: LD_INT 18
33031: DOUBLE
33032: EQUAL
33033: IFTRUE 33037
33035: GO 33048
33037: POP
// bc_type := b_ext_radar ; 19 :
33038: LD_ADDR_OWVAR 42
33042: PUSH
33043: LD_INT 20
33045: ST_TO_ADDR
33046: GO 33353
33048: LD_INT 19
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33067
33056: POP
// bc_type := b_ext_radio ; 20 :
33057: LD_ADDR_OWVAR 42
33061: PUSH
33062: LD_INT 22
33064: ST_TO_ADDR
33065: GO 33353
33067: LD_INT 20
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33075
33073: GO 33086
33075: POP
// bc_type := b_ext_siberium ; 21 :
33076: LD_ADDR_OWVAR 42
33080: PUSH
33081: LD_INT 21
33083: ST_TO_ADDR
33084: GO 33353
33086: LD_INT 21
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33105
33094: POP
// bc_type := b_ext_computer ; 22 :
33095: LD_ADDR_OWVAR 42
33099: PUSH
33100: LD_INT 24
33102: ST_TO_ADDR
33103: GO 33353
33105: LD_INT 22
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33124
33113: POP
// bc_type := b_ext_track ; 23 :
33114: LD_ADDR_OWVAR 42
33118: PUSH
33119: LD_INT 16
33121: ST_TO_ADDR
33122: GO 33353
33124: LD_INT 23
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33132
33130: GO 33143
33132: POP
// bc_type := b_ext_laser ; 24 :
33133: LD_ADDR_OWVAR 42
33137: PUSH
33138: LD_INT 25
33140: ST_TO_ADDR
33141: GO 33353
33143: LD_INT 24
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33162
33151: POP
// bc_type := b_control_tower ; 25 :
33152: LD_ADDR_OWVAR 42
33156: PUSH
33157: LD_INT 36
33159: ST_TO_ADDR
33160: GO 33353
33162: LD_INT 25
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33181
33170: POP
// bc_type := b_breastwork ; 26 :
33171: LD_ADDR_OWVAR 42
33175: PUSH
33176: LD_INT 31
33178: ST_TO_ADDR
33179: GO 33353
33181: LD_INT 26
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33200
33189: POP
// bc_type := b_bunker ; 27 :
33190: LD_ADDR_OWVAR 42
33194: PUSH
33195: LD_INT 32
33197: ST_TO_ADDR
33198: GO 33353
33200: LD_INT 27
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33219
33208: POP
// bc_type := b_turret ; 28 :
33209: LD_ADDR_OWVAR 42
33213: PUSH
33214: LD_INT 33
33216: ST_TO_ADDR
33217: GO 33353
33219: LD_INT 28
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33238
33227: POP
// bc_type := b_armoury ; 29 :
33228: LD_ADDR_OWVAR 42
33232: PUSH
33233: LD_INT 4
33235: ST_TO_ADDR
33236: GO 33353
33238: LD_INT 29
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33257
33246: POP
// bc_type := b_barracks ; 30 :
33247: LD_ADDR_OWVAR 42
33251: PUSH
33252: LD_INT 5
33254: ST_TO_ADDR
33255: GO 33353
33257: LD_INT 30
33259: DOUBLE
33260: EQUAL
33261: IFTRUE 33265
33263: GO 33276
33265: POP
// bc_type := b_solar_power ; 31 :
33266: LD_ADDR_OWVAR 42
33270: PUSH
33271: LD_INT 27
33273: ST_TO_ADDR
33274: GO 33353
33276: LD_INT 31
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33295
33284: POP
// bc_type := b_oil_power ; 32 :
33285: LD_ADDR_OWVAR 42
33289: PUSH
33290: LD_INT 26
33292: ST_TO_ADDR
33293: GO 33353
33295: LD_INT 32
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33303
33301: GO 33314
33303: POP
// bc_type := b_siberite_power ; 33 :
33304: LD_ADDR_OWVAR 42
33308: PUSH
33309: LD_INT 28
33311: ST_TO_ADDR
33312: GO 33353
33314: LD_INT 33
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33333
33322: POP
// bc_type := b_oil_mine ; 34 :
33323: LD_ADDR_OWVAR 42
33327: PUSH
33328: LD_INT 29
33330: ST_TO_ADDR
33331: GO 33353
33333: LD_INT 34
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33352
33341: POP
// bc_type := b_siberite_mine ; end ;
33342: LD_ADDR_OWVAR 42
33346: PUSH
33347: LD_INT 30
33349: ST_TO_ADDR
33350: GO 33353
33352: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33353: LD_ADDR_VAR 0 8
33357: PUSH
33358: LD_VAR 0 5
33362: PPUSH
33363: LD_VAR 0 6
33367: PPUSH
33368: LD_VAR 0 3
33372: PPUSH
33373: CALL_OW 47
33377: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33378: LD_OWVAR 42
33382: PUSH
33383: LD_INT 32
33385: PUSH
33386: LD_INT 33
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: IN
33393: IFFALSE 33409
// PlaceWeaponTurret ( b , weapon ) ;
33395: LD_VAR 0 8
33399: PPUSH
33400: LD_VAR 0 4
33404: PPUSH
33405: CALL_OW 431
// end ;
33409: LD_VAR 0 7
33413: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33414: LD_INT 0
33416: PPUSH
33417: PPUSH
33418: PPUSH
33419: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33420: LD_ADDR_VAR 0 4
33424: PUSH
33425: LD_INT 22
33427: PUSH
33428: LD_OWVAR 2
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 30
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 30
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: LIST
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PPUSH
33469: CALL_OW 69
33473: ST_TO_ADDR
// if not tmp then
33474: LD_VAR 0 4
33478: NOT
33479: IFFALSE 33483
// exit ;
33481: GO 33542
// for i in tmp do
33483: LD_ADDR_VAR 0 2
33487: PUSH
33488: LD_VAR 0 4
33492: PUSH
33493: FOR_IN
33494: IFFALSE 33540
// for j = 1 to 3 do
33496: LD_ADDR_VAR 0 3
33500: PUSH
33501: DOUBLE
33502: LD_INT 1
33504: DEC
33505: ST_TO_ADDR
33506: LD_INT 3
33508: PUSH
33509: FOR_TO
33510: IFFALSE 33536
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33512: LD_VAR 0 2
33516: PPUSH
33517: CALL_OW 274
33521: PPUSH
33522: LD_VAR 0 3
33526: PPUSH
33527: LD_INT 99999
33529: PPUSH
33530: CALL_OW 277
33534: GO 33509
33536: POP
33537: POP
33538: GO 33493
33540: POP
33541: POP
// end ;
33542: LD_VAR 0 1
33546: RET
// export function hHackSetLevel10 ; var i , j ; begin
33547: LD_INT 0
33549: PPUSH
33550: PPUSH
33551: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33552: LD_ADDR_VAR 0 2
33556: PUSH
33557: LD_INT 21
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PPUSH
33567: CALL_OW 69
33571: PUSH
33572: FOR_IN
33573: IFFALSE 33625
// if IsSelected ( i ) then
33575: LD_VAR 0 2
33579: PPUSH
33580: CALL_OW 306
33584: IFFALSE 33623
// begin for j := 1 to 4 do
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: DOUBLE
33592: LD_INT 1
33594: DEC
33595: ST_TO_ADDR
33596: LD_INT 4
33598: PUSH
33599: FOR_TO
33600: IFFALSE 33621
// SetSkill ( i , j , 10 ) ;
33602: LD_VAR 0 2
33606: PPUSH
33607: LD_VAR 0 3
33611: PPUSH
33612: LD_INT 10
33614: PPUSH
33615: CALL_OW 237
33619: GO 33599
33621: POP
33622: POP
// end ;
33623: GO 33572
33625: POP
33626: POP
// end ;
33627: LD_VAR 0 1
33631: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33632: LD_INT 0
33634: PPUSH
33635: PPUSH
33636: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33637: LD_ADDR_VAR 0 2
33641: PUSH
33642: LD_INT 22
33644: PUSH
33645: LD_OWVAR 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 21
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PPUSH
33668: CALL_OW 69
33672: PUSH
33673: FOR_IN
33674: IFFALSE 33715
// begin for j := 1 to 4 do
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: DOUBLE
33682: LD_INT 1
33684: DEC
33685: ST_TO_ADDR
33686: LD_INT 4
33688: PUSH
33689: FOR_TO
33690: IFFALSE 33711
// SetSkill ( i , j , 10 ) ;
33692: LD_VAR 0 2
33696: PPUSH
33697: LD_VAR 0 3
33701: PPUSH
33702: LD_INT 10
33704: PPUSH
33705: CALL_OW 237
33709: GO 33689
33711: POP
33712: POP
// end ;
33713: GO 33673
33715: POP
33716: POP
// end ;
33717: LD_VAR 0 1
33721: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33722: LD_INT 0
33724: PPUSH
// uc_side := your_side ;
33725: LD_ADDR_OWVAR 20
33729: PUSH
33730: LD_OWVAR 2
33734: ST_TO_ADDR
// uc_nation := nation ;
33735: LD_ADDR_OWVAR 21
33739: PUSH
33740: LD_VAR 0 1
33744: ST_TO_ADDR
// InitHc ;
33745: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33749: LD_INT 0
33751: PPUSH
33752: LD_VAR 0 2
33756: PPUSH
33757: LD_VAR 0 3
33761: PPUSH
33762: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33766: LD_VAR 0 4
33770: PPUSH
33771: LD_VAR 0 5
33775: PPUSH
33776: CALL_OW 428
33780: PUSH
33781: LD_INT 0
33783: EQUAL
33784: IFFALSE 33808
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33786: CALL_OW 44
33790: PPUSH
33791: LD_VAR 0 4
33795: PPUSH
33796: LD_VAR 0 5
33800: PPUSH
33801: LD_INT 1
33803: PPUSH
33804: CALL_OW 48
// end ;
33808: LD_VAR 0 6
33812: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33813: LD_INT 0
33815: PPUSH
33816: PPUSH
// uc_side := your_side ;
33817: LD_ADDR_OWVAR 20
33821: PUSH
33822: LD_OWVAR 2
33826: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33827: LD_VAR 0 1
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: LD_INT 4
33843: PUSH
33844: LD_INT 5
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: IN
33854: IFFALSE 33866
// uc_nation := nation_american else
33856: LD_ADDR_OWVAR 21
33860: PUSH
33861: LD_INT 1
33863: ST_TO_ADDR
33864: GO 33909
// if chassis in [ 11 , 12 , 13 , 14 ] then
33866: LD_VAR 0 1
33870: PUSH
33871: LD_INT 11
33873: PUSH
33874: LD_INT 12
33876: PUSH
33877: LD_INT 13
33879: PUSH
33880: LD_INT 14
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: IN
33889: IFFALSE 33901
// uc_nation := nation_arabian else
33891: LD_ADDR_OWVAR 21
33895: PUSH
33896: LD_INT 2
33898: ST_TO_ADDR
33899: GO 33909
// uc_nation := nation_russian ;
33901: LD_ADDR_OWVAR 21
33905: PUSH
33906: LD_INT 3
33908: ST_TO_ADDR
// vc_chassis := chassis ;
33909: LD_ADDR_OWVAR 37
33913: PUSH
33914: LD_VAR 0 1
33918: ST_TO_ADDR
// vc_engine := engine ;
33919: LD_ADDR_OWVAR 39
33923: PUSH
33924: LD_VAR 0 2
33928: ST_TO_ADDR
// vc_control := control ;
33929: LD_ADDR_OWVAR 38
33933: PUSH
33934: LD_VAR 0 3
33938: ST_TO_ADDR
// vc_weapon := weapon ;
33939: LD_ADDR_OWVAR 40
33943: PUSH
33944: LD_VAR 0 4
33948: ST_TO_ADDR
// un := CreateVehicle ;
33949: LD_ADDR_VAR 0 8
33953: PUSH
33954: CALL_OW 45
33958: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33959: LD_VAR 0 8
33963: PPUSH
33964: LD_INT 0
33966: PPUSH
33967: LD_INT 5
33969: PPUSH
33970: CALL_OW 12
33974: PPUSH
33975: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33979: LD_VAR 0 8
33983: PPUSH
33984: LD_VAR 0 5
33988: PPUSH
33989: LD_VAR 0 6
33993: PPUSH
33994: LD_INT 1
33996: PPUSH
33997: CALL_OW 48
// end ;
34001: LD_VAR 0 7
34005: RET
// export hInvincible ; every 1 do
34006: GO 34008
34008: DISABLE
// hInvincible := [ ] ;
34009: LD_ADDR_EXP 118
34013: PUSH
34014: EMPTY
34015: ST_TO_ADDR
34016: END
// every 10 do var i ;
34017: GO 34019
34019: DISABLE
34020: LD_INT 0
34022: PPUSH
// begin enable ;
34023: ENABLE
// if not hInvincible then
34024: LD_EXP 118
34028: NOT
34029: IFFALSE 34033
// exit ;
34031: GO 34077
// for i in hInvincible do
34033: LD_ADDR_VAR 0 1
34037: PUSH
34038: LD_EXP 118
34042: PUSH
34043: FOR_IN
34044: IFFALSE 34075
// if GetLives ( i ) < 1000 then
34046: LD_VAR 0 1
34050: PPUSH
34051: CALL_OW 256
34055: PUSH
34056: LD_INT 1000
34058: LESS
34059: IFFALSE 34073
// SetLives ( i , 1000 ) ;
34061: LD_VAR 0 1
34065: PPUSH
34066: LD_INT 1000
34068: PPUSH
34069: CALL_OW 234
34073: GO 34043
34075: POP
34076: POP
// end ;
34077: PPOPN 1
34079: END
// export function hHackInvincible ; var i ; begin
34080: LD_INT 0
34082: PPUSH
34083: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34084: LD_ADDR_VAR 0 2
34088: PUSH
34089: LD_INT 2
34091: PUSH
34092: LD_INT 21
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 21
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: LIST
34116: PPUSH
34117: CALL_OW 69
34121: PUSH
34122: FOR_IN
34123: IFFALSE 34184
// if IsSelected ( i ) then
34125: LD_VAR 0 2
34129: PPUSH
34130: CALL_OW 306
34134: IFFALSE 34182
// begin if i in hInvincible then
34136: LD_VAR 0 2
34140: PUSH
34141: LD_EXP 118
34145: IN
34146: IFFALSE 34166
// hInvincible := hInvincible diff i else
34148: LD_ADDR_EXP 118
34152: PUSH
34153: LD_EXP 118
34157: PUSH
34158: LD_VAR 0 2
34162: DIFF
34163: ST_TO_ADDR
34164: GO 34182
// hInvincible := hInvincible union i ;
34166: LD_ADDR_EXP 118
34170: PUSH
34171: LD_EXP 118
34175: PUSH
34176: LD_VAR 0 2
34180: UNION
34181: ST_TO_ADDR
// end ;
34182: GO 34122
34184: POP
34185: POP
// end ;
34186: LD_VAR 0 1
34190: RET
// export function hHackInvisible ; var i , j ; begin
34191: LD_INT 0
34193: PPUSH
34194: PPUSH
34195: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34196: LD_ADDR_VAR 0 2
34200: PUSH
34201: LD_INT 21
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PPUSH
34211: CALL_OW 69
34215: PUSH
34216: FOR_IN
34217: IFFALSE 34241
// if IsSelected ( i ) then
34219: LD_VAR 0 2
34223: PPUSH
34224: CALL_OW 306
34228: IFFALSE 34239
// ComForceInvisible ( i ) ;
34230: LD_VAR 0 2
34234: PPUSH
34235: CALL_OW 496
34239: GO 34216
34241: POP
34242: POP
// end ;
34243: LD_VAR 0 1
34247: RET
// export function hHackChangeYourSide ; begin
34248: LD_INT 0
34250: PPUSH
// if your_side = 8 then
34251: LD_OWVAR 2
34255: PUSH
34256: LD_INT 8
34258: EQUAL
34259: IFFALSE 34271
// your_side := 0 else
34261: LD_ADDR_OWVAR 2
34265: PUSH
34266: LD_INT 0
34268: ST_TO_ADDR
34269: GO 34285
// your_side := your_side + 1 ;
34271: LD_ADDR_OWVAR 2
34275: PUSH
34276: LD_OWVAR 2
34280: PUSH
34281: LD_INT 1
34283: PLUS
34284: ST_TO_ADDR
// end ;
34285: LD_VAR 0 1
34289: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34290: LD_INT 0
34292: PPUSH
34293: PPUSH
34294: PPUSH
// for i in all_units do
34295: LD_ADDR_VAR 0 2
34299: PUSH
34300: LD_OWVAR 3
34304: PUSH
34305: FOR_IN
34306: IFFALSE 34384
// if IsSelected ( i ) then
34308: LD_VAR 0 2
34312: PPUSH
34313: CALL_OW 306
34317: IFFALSE 34382
// begin j := GetSide ( i ) ;
34319: LD_ADDR_VAR 0 3
34323: PUSH
34324: LD_VAR 0 2
34328: PPUSH
34329: CALL_OW 255
34333: ST_TO_ADDR
// if j = 8 then
34334: LD_VAR 0 3
34338: PUSH
34339: LD_INT 8
34341: EQUAL
34342: IFFALSE 34354
// j := 0 else
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_INT 0
34351: ST_TO_ADDR
34352: GO 34368
// j := j + 1 ;
34354: LD_ADDR_VAR 0 3
34358: PUSH
34359: LD_VAR 0 3
34363: PUSH
34364: LD_INT 1
34366: PLUS
34367: ST_TO_ADDR
// SetSide ( i , j ) ;
34368: LD_VAR 0 2
34372: PPUSH
34373: LD_VAR 0 3
34377: PPUSH
34378: CALL_OW 235
// end ;
34382: GO 34305
34384: POP
34385: POP
// end ;
34386: LD_VAR 0 1
34390: RET
// export function hHackFog ; begin
34391: LD_INT 0
34393: PPUSH
// FogOff ( true ) ;
34394: LD_INT 1
34396: PPUSH
34397: CALL_OW 344
// end ;
34401: LD_VAR 0 1
34405: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34406: LD_INT 0
34408: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34409: LD_VAR 0 1
34413: PPUSH
34414: LD_VAR 0 2
34418: PPUSH
34419: LD_VAR 0 3
34423: PPUSH
34424: LD_INT 1
34426: PPUSH
34427: LD_INT 1
34429: PPUSH
34430: CALL_OW 483
// CenterOnXY ( x , y ) ;
34434: LD_VAR 0 2
34438: PPUSH
34439: LD_VAR 0 3
34443: PPUSH
34444: CALL_OW 84
// end ;
34448: LD_VAR 0 4
34452: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34453: LD_INT 0
34455: PPUSH
34456: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34457: LD_VAR 0 1
34461: NOT
34462: IFTRUE 34481
34464: PUSH
34465: LD_VAR 0 2
34469: PPUSH
34470: LD_VAR 0 3
34474: PPUSH
34475: CALL_OW 488
34479: NOT
34480: OR
34481: IFTRUE 34516
34483: PUSH
34484: LD_VAR 0 1
34488: PPUSH
34489: CALL_OW 266
34493: PUSH
34494: LD_INT 3
34496: NONEQUAL
34497: IFFALSE 34515
34499: PUSH
34500: LD_VAR 0 1
34504: PPUSH
34505: CALL_OW 247
34509: PUSH
34510: LD_INT 1
34512: EQUAL
34513: NOT
34514: AND
34515: OR
34516: IFFALSE 34520
// exit ;
34518: GO 34802
// if GetType ( factory ) = unit_human then
34520: LD_VAR 0 1
34524: PPUSH
34525: CALL_OW 247
34529: PUSH
34530: LD_INT 1
34532: EQUAL
34533: IFFALSE 34550
// factory := IsInUnit ( factory ) ;
34535: LD_ADDR_VAR 0 1
34539: PUSH
34540: LD_VAR 0 1
34544: PPUSH
34545: CALL_OW 310
34549: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34550: LD_VAR 0 1
34554: PPUSH
34555: CALL_OW 266
34559: PUSH
34560: LD_INT 3
34562: NONEQUAL
34563: IFFALSE 34567
// exit ;
34565: GO 34802
// for i := 1 to Count ( factoryWaypoints ) do
34567: LD_ADDR_VAR 0 5
34571: PUSH
34572: DOUBLE
34573: LD_INT 1
34575: DEC
34576: ST_TO_ADDR
34577: LD_EXP 119
34581: PPUSH
34582: CALL 44335 0 1
34586: PUSH
34587: FOR_TO
34588: IFFALSE 34750
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34590: LD_VAR 0 2
34594: PPUSH
34595: LD_VAR 0 3
34599: PPUSH
34600: CALL_OW 428
34604: PUSH
34605: LD_EXP 119
34609: PUSH
34610: LD_VAR 0 5
34614: ARRAY
34615: PUSH
34616: LD_INT 2
34618: ARRAY
34619: EQUAL
34620: IFFALSE 34652
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34622: LD_ADDR_EXP 119
34626: PUSH
34627: LD_EXP 119
34631: PPUSH
34632: LD_VAR 0 5
34636: PPUSH
34637: CALL_OW 3
34641: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34642: CALL 34807 0 0
// exit ;
34646: POP
34647: POP
34648: GO 34802
// end else
34650: GO 34748
// if factory = factoryWaypoints [ i ] [ 2 ] then
34652: LD_VAR 0 1
34656: PUSH
34657: LD_EXP 119
34661: PUSH
34662: LD_VAR 0 5
34666: ARRAY
34667: PUSH
34668: LD_INT 2
34670: ARRAY
34671: EQUAL
34672: IFFALSE 34748
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34674: LD_ADDR_EXP 119
34678: PUSH
34679: LD_EXP 119
34683: PPUSH
34684: LD_VAR 0 5
34688: PPUSH
34689: CALL_OW 3
34693: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34694: LD_ADDR_EXP 119
34698: PUSH
34699: LD_EXP 119
34703: PPUSH
34704: LD_VAR 0 1
34708: PPUSH
34709: CALL_OW 255
34713: PUSH
34714: LD_VAR 0 1
34718: PUSH
34719: LD_VAR 0 2
34723: PUSH
34724: LD_VAR 0 3
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: PPUSH
34735: CALL 80267 0 2
34739: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34740: CALL 34807 0 0
// exit ;
34744: POP
34745: POP
34746: GO 34802
// end ; end ;
34748: GO 34587
34750: POP
34751: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34752: LD_ADDR_EXP 119
34756: PUSH
34757: LD_EXP 119
34761: PPUSH
34762: LD_VAR 0 1
34766: PPUSH
34767: CALL_OW 255
34771: PUSH
34772: LD_VAR 0 1
34776: PUSH
34777: LD_VAR 0 2
34781: PUSH
34782: LD_VAR 0 3
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: PPUSH
34793: CALL 80267 0 2
34797: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34798: CALL 34807 0 0
// end ;
34802: LD_VAR 0 4
34806: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34807: LD_INT 0
34809: PPUSH
34810: PPUSH
34811: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34812: LD_STRING resetFactoryWaypoint();
34814: PPUSH
34815: CALL_OW 559
// if factoryWaypoints then
34819: LD_EXP 119
34823: IFFALSE 34944
// begin list := factoryWaypoints ;
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_EXP 119
34834: ST_TO_ADDR
// for i := 1 to list do
34835: LD_ADDR_VAR 0 2
34839: PUSH
34840: DOUBLE
34841: LD_INT 1
34843: DEC
34844: ST_TO_ADDR
34845: LD_VAR 0 3
34849: PUSH
34850: FOR_TO
34851: IFFALSE 34942
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34853: LD_STRING setFactoryWaypointXY(
34855: PUSH
34856: LD_VAR 0 3
34860: PUSH
34861: LD_VAR 0 2
34865: ARRAY
34866: PUSH
34867: LD_INT 1
34869: ARRAY
34870: STR
34871: PUSH
34872: LD_STRING ,
34874: STR
34875: PUSH
34876: LD_VAR 0 3
34880: PUSH
34881: LD_VAR 0 2
34885: ARRAY
34886: PUSH
34887: LD_INT 2
34889: ARRAY
34890: STR
34891: PUSH
34892: LD_STRING ,
34894: STR
34895: PUSH
34896: LD_VAR 0 3
34900: PUSH
34901: LD_VAR 0 2
34905: ARRAY
34906: PUSH
34907: LD_INT 3
34909: ARRAY
34910: STR
34911: PUSH
34912: LD_STRING ,
34914: STR
34915: PUSH
34916: LD_VAR 0 3
34920: PUSH
34921: LD_VAR 0 2
34925: ARRAY
34926: PUSH
34927: LD_INT 4
34929: ARRAY
34930: STR
34931: PUSH
34932: LD_STRING )
34934: STR
34935: PPUSH
34936: CALL_OW 559
34940: GO 34850
34942: POP
34943: POP
// end ; end ;
34944: LD_VAR 0 1
34948: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34949: LD_INT 0
34951: PPUSH
// if HexInfo ( x , y ) = warehouse then
34952: LD_VAR 0 2
34956: PPUSH
34957: LD_VAR 0 3
34961: PPUSH
34962: CALL_OW 428
34966: PUSH
34967: LD_VAR 0 1
34971: EQUAL
34972: IFFALSE 34999
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34974: LD_ADDR_EXP 121
34978: PUSH
34979: LD_EXP 121
34983: PPUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: LD_INT 0
34991: PPUSH
34992: CALL_OW 1
34996: ST_TO_ADDR
34997: GO 35050
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34999: LD_ADDR_EXP 121
35003: PUSH
35004: LD_EXP 121
35008: PPUSH
35009: LD_VAR 0 1
35013: PPUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 255
35023: PUSH
35024: LD_VAR 0 1
35028: PUSH
35029: LD_VAR 0 2
35033: PUSH
35034: LD_VAR 0 3
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: PPUSH
35045: CALL_OW 1
35049: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35050: CALL 35059 0 0
// end ;
35054: LD_VAR 0 4
35058: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35059: LD_INT 0
35061: PPUSH
35062: PPUSH
35063: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35064: LD_STRING resetWarehouseGatheringPoints();
35066: PPUSH
35067: CALL_OW 559
// if warehouseGatheringPoints then
35071: LD_EXP 121
35075: IFFALSE 35201
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35077: LD_ADDR_VAR 0 3
35081: PUSH
35082: LD_EXP 121
35086: PPUSH
35087: CALL 84201 0 1
35091: ST_TO_ADDR
// for i := 1 to list do
35092: LD_ADDR_VAR 0 2
35096: PUSH
35097: DOUBLE
35098: LD_INT 1
35100: DEC
35101: ST_TO_ADDR
35102: LD_VAR 0 3
35106: PUSH
35107: FOR_TO
35108: IFFALSE 35199
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35110: LD_STRING setWarehouseGatheringPointXY(
35112: PUSH
35113: LD_VAR 0 3
35117: PUSH
35118: LD_VAR 0 2
35122: ARRAY
35123: PUSH
35124: LD_INT 1
35126: ARRAY
35127: STR
35128: PUSH
35129: LD_STRING ,
35131: STR
35132: PUSH
35133: LD_VAR 0 3
35137: PUSH
35138: LD_VAR 0 2
35142: ARRAY
35143: PUSH
35144: LD_INT 2
35146: ARRAY
35147: STR
35148: PUSH
35149: LD_STRING ,
35151: STR
35152: PUSH
35153: LD_VAR 0 3
35157: PUSH
35158: LD_VAR 0 2
35162: ARRAY
35163: PUSH
35164: LD_INT 3
35166: ARRAY
35167: STR
35168: PUSH
35169: LD_STRING ,
35171: STR
35172: PUSH
35173: LD_VAR 0 3
35177: PUSH
35178: LD_VAR 0 2
35182: ARRAY
35183: PUSH
35184: LD_INT 4
35186: ARRAY
35187: STR
35188: PUSH
35189: LD_STRING )
35191: STR
35192: PPUSH
35193: CALL_OW 559
35197: GO 35107
35199: POP
35200: POP
// end ; end ;
35201: LD_VAR 0 1
35205: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35206: LD_EXP 121
35210: IFFALSE 35905
35212: GO 35214
35214: DISABLE
35215: LD_INT 0
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
// begin enable ;
35226: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35227: LD_ADDR_VAR 0 3
35231: PUSH
35232: LD_EXP 121
35236: PPUSH
35237: CALL 84201 0 1
35241: ST_TO_ADDR
// if not list then
35242: LD_VAR 0 3
35246: NOT
35247: IFFALSE 35251
// exit ;
35249: GO 35905
// for i := 1 to list do
35251: LD_ADDR_VAR 0 1
35255: PUSH
35256: DOUBLE
35257: LD_INT 1
35259: DEC
35260: ST_TO_ADDR
35261: LD_VAR 0 3
35265: PUSH
35266: FOR_TO
35267: IFFALSE 35903
// begin depot := list [ i ] [ 2 ] ;
35269: LD_ADDR_VAR 0 8
35273: PUSH
35274: LD_VAR 0 3
35278: PUSH
35279: LD_VAR 0 1
35283: ARRAY
35284: PUSH
35285: LD_INT 2
35287: ARRAY
35288: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35289: LD_ADDR_VAR 0 5
35293: PUSH
35294: LD_VAR 0 3
35298: PUSH
35299: LD_VAR 0 1
35303: ARRAY
35304: PUSH
35305: LD_INT 1
35307: ARRAY
35308: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35309: LD_VAR 0 8
35313: PPUSH
35314: CALL_OW 301
35318: IFTRUE 35337
35320: PUSH
35321: LD_VAR 0 5
35325: PUSH
35326: LD_VAR 0 8
35330: PPUSH
35331: CALL_OW 255
35335: NONEQUAL
35336: OR
35337: IFFALSE 35366
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35339: LD_ADDR_EXP 121
35343: PUSH
35344: LD_EXP 121
35348: PPUSH
35349: LD_VAR 0 8
35353: PPUSH
35354: LD_INT 0
35356: PPUSH
35357: CALL_OW 1
35361: ST_TO_ADDR
// exit ;
35362: POP
35363: POP
35364: GO 35905
// end ; x := list [ i ] [ 3 ] ;
35366: LD_ADDR_VAR 0 6
35370: PUSH
35371: LD_VAR 0 3
35375: PUSH
35376: LD_VAR 0 1
35380: ARRAY
35381: PUSH
35382: LD_INT 3
35384: ARRAY
35385: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35386: LD_ADDR_VAR 0 7
35390: PUSH
35391: LD_VAR 0 3
35395: PUSH
35396: LD_VAR 0 1
35400: ARRAY
35401: PUSH
35402: LD_INT 4
35404: ARRAY
35405: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35406: LD_ADDR_VAR 0 9
35410: PUSH
35411: LD_VAR 0 6
35415: PPUSH
35416: LD_VAR 0 7
35420: PPUSH
35421: LD_INT 16
35423: PPUSH
35424: CALL 82775 0 3
35428: ST_TO_ADDR
// if not cratesNearbyPoint then
35429: LD_VAR 0 9
35433: NOT
35434: IFFALSE 35440
// exit ;
35436: POP
35437: POP
35438: GO 35905
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35440: LD_ADDR_VAR 0 4
35444: PUSH
35445: LD_INT 22
35447: PUSH
35448: LD_VAR 0 5
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: LD_INT 60
35462: PUSH
35463: EMPTY
35464: LIST
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 91
35472: PUSH
35473: LD_VAR 0 8
35477: PUSH
35478: LD_INT 6
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: LD_INT 25
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 25
35501: PUSH
35502: LD_INT 16
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: PPUSH
35520: CALL_OW 69
35524: PUSH
35525: LD_VAR 0 8
35529: PPUSH
35530: CALL_OW 313
35534: PPUSH
35535: LD_INT 3
35537: PUSH
35538: LD_INT 60
35540: PUSH
35541: EMPTY
35542: LIST
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: LD_INT 25
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 25
35563: PUSH
35564: LD_INT 16
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PPUSH
35580: CALL_OW 72
35584: UNION
35585: ST_TO_ADDR
// if tmp then
35586: LD_VAR 0 4
35590: IFFALSE 35670
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35592: LD_ADDR_VAR 0 4
35596: PUSH
35597: LD_VAR 0 4
35601: PPUSH
35602: LD_INT 3
35604: PPUSH
35605: CALL 80582 0 2
35609: ST_TO_ADDR
// for j in tmp do
35610: LD_ADDR_VAR 0 2
35614: PUSH
35615: LD_VAR 0 4
35619: PUSH
35620: FOR_IN
35621: IFFALSE 35664
// begin if IsInUnit ( j ) then
35623: LD_VAR 0 2
35627: PPUSH
35628: CALL_OW 310
35632: IFFALSE 35643
// ComExit ( j ) ;
35634: LD_VAR 0 2
35638: PPUSH
35639: CALL 80665 0 1
// AddComCollect ( j , x , y ) ;
35643: LD_VAR 0 2
35647: PPUSH
35648: LD_VAR 0 6
35652: PPUSH
35653: LD_VAR 0 7
35657: PPUSH
35658: CALL_OW 177
// end ;
35662: GO 35620
35664: POP
35665: POP
// exit ;
35666: POP
35667: POP
35668: GO 35905
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35670: LD_ADDR_VAR 0 4
35674: PUSH
35675: LD_INT 22
35677: PUSH
35678: LD_VAR 0 5
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 91
35689: PUSH
35690: LD_VAR 0 8
35694: PUSH
35695: LD_INT 8
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: LD_INT 34
35708: PUSH
35709: LD_INT 12
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 34
35718: PUSH
35719: LD_INT 51
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 34
35728: PUSH
35729: LD_INT 32
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 34
35738: PUSH
35739: LD_INT 89
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: PPUSH
35758: CALL_OW 69
35762: ST_TO_ADDR
// if tmp then
35763: LD_VAR 0 4
35767: IFFALSE 35901
// begin for j in tmp do
35769: LD_ADDR_VAR 0 2
35773: PUSH
35774: LD_VAR 0 4
35778: PUSH
35779: FOR_IN
35780: IFFALSE 35899
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35782: LD_VAR 0 2
35786: PPUSH
35787: CALL_OW 262
35791: PUSH
35792: LD_INT 3
35794: EQUAL
35795: IFTRUE 35812
35797: PUSH
35798: LD_VAR 0 2
35802: PPUSH
35803: CALL_OW 261
35807: PUSH
35808: LD_INT 20
35810: GREATER
35811: OR
35812: IFFALSE 35826
35814: PUSH
35815: LD_VAR 0 2
35819: PPUSH
35820: CALL_OW 314
35824: NOT
35825: AND
35826: IFFALSE 35856
35828: PUSH
35829: LD_VAR 0 2
35833: PPUSH
35834: CALL_OW 263
35838: PUSH
35839: LD_INT 1
35841: NONEQUAL
35842: IFTRUE 35855
35844: PUSH
35845: LD_VAR 0 2
35849: PPUSH
35850: CALL_OW 311
35854: OR
35855: AND
35856: IFFALSE 35897
// begin ComCollect ( j , x , y ) ;
35858: LD_VAR 0 2
35862: PPUSH
35863: LD_VAR 0 6
35867: PPUSH
35868: LD_VAR 0 7
35872: PPUSH
35873: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35877: LD_VAR 0 2
35881: PPUSH
35882: LD_VAR 0 8
35886: PPUSH
35887: CALL_OW 172
// exit ;
35891: POP
35892: POP
35893: POP
35894: POP
35895: GO 35905
// end ;
35897: GO 35779
35899: POP
35900: POP
// end ; end ;
35901: GO 35266
35903: POP
35904: POP
// end ; end_of_file
35905: PPOPN 9
35907: END
// export function SOS_UnitDestroyed ( un ) ; begin
35908: LD_INT 0
35910: PPUSH
// ComRadiation ( un ) ;
35911: LD_VAR 0 1
35915: PPUSH
35916: CALL 36997 0 1
// end ;
35920: LD_VAR 0 2
35924: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35925: LD_INT 0
35927: PPUSH
// ComRadiation ( un ) ;
35928: LD_VAR 0 1
35932: PPUSH
35933: CALL 36997 0 1
// end ;
35937: LD_VAR 0 2
35941: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35942: LD_INT 0
35944: PPUSH
// end ;
35945: LD_VAR 0 4
35949: RET
// export function SOS_Command ( cmd ) ; begin
35950: LD_INT 0
35952: PPUSH
// end ;
35953: LD_VAR 0 2
35957: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35958: LD_INT 0
35960: PPUSH
// end ;
35961: LD_VAR 0 6
35965: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
35966: LD_INT 0
35968: PPUSH
35969: PPUSH
35970: PPUSH
35971: PPUSH
// if not vehicle or not factory then
35972: LD_VAR 0 1
35976: NOT
35977: IFTRUE 35986
35979: PUSH
35980: LD_VAR 0 2
35984: NOT
35985: OR
35986: IFFALSE 35990
// exit ;
35988: GO 36572
// if not factoryWaypoints then
35990: LD_EXP 119
35994: NOT
35995: IFFALSE 35999
// exit ;
35997: GO 36572
// for i := 1 to Count ( factoryWaypoints ) do
35999: LD_ADDR_VAR 0 4
36003: PUSH
36004: DOUBLE
36005: LD_INT 1
36007: DEC
36008: ST_TO_ADDR
36009: LD_EXP 119
36013: PPUSH
36014: CALL 44335 0 1
36018: PUSH
36019: FOR_TO
36020: IFFALSE 36570
// if factoryWaypoints [ i ] [ 2 ] = factory then
36022: LD_EXP 119
36026: PUSH
36027: LD_VAR 0 4
36031: ARRAY
36032: PUSH
36033: LD_INT 2
36035: ARRAY
36036: PUSH
36037: LD_VAR 0 2
36041: EQUAL
36042: IFFALSE 36568
// begin if GetControl ( vehicle ) = control_manual then
36044: LD_VAR 0 1
36048: PPUSH
36049: CALL_OW 263
36053: PUSH
36054: LD_INT 1
36056: EQUAL
36057: IFFALSE 36421
// begin driver := IsDrivenBy ( vehicle ) ;
36059: LD_ADDR_VAR 0 5
36063: PUSH
36064: LD_VAR 0 1
36068: PPUSH
36069: CALL_OW 311
36073: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36074: LD_VAR 0 5
36078: PUSH
36079: LD_EXP 120
36083: IN
36084: IFTRUE 36098
36086: PUSH
36087: LD_VAR 0 1
36091: PUSH
36092: LD_EXP 120
36096: IN
36097: OR
36098: IFFALSE 36104
// exit ;
36100: POP
36101: POP
36102: GO 36572
// if not HasTask ( driver ) then
36104: LD_VAR 0 5
36108: PPUSH
36109: CALL_OW 314
36113: NOT
36114: IFFALSE 36419
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36116: LD_ADDR_EXP 120
36120: PUSH
36121: LD_EXP 120
36125: PPUSH
36126: LD_VAR 0 5
36130: PPUSH
36131: CALL 80267 0 2
36135: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36136: LD_ADDR_EXP 120
36140: PUSH
36141: LD_EXP 120
36145: PPUSH
36146: LD_VAR 0 1
36150: PPUSH
36151: CALL 80267 0 2
36155: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36156: LD_ADDR_VAR 0 6
36160: PUSH
36161: LD_EXP 119
36165: PUSH
36166: LD_VAR 0 4
36170: ARRAY
36171: PUSH
36172: LD_INT 3
36174: ARRAY
36175: PPUSH
36176: LD_EXP 119
36180: PUSH
36181: LD_VAR 0 4
36185: ARRAY
36186: PUSH
36187: LD_INT 4
36189: ARRAY
36190: PPUSH
36191: CALL_OW 428
36195: ST_TO_ADDR
// if hex then
36196: LD_VAR 0 6
36200: IFFALSE 36218
// ComMoveUnit ( driver , hex ) else
36202: LD_VAR 0 5
36206: PPUSH
36207: LD_VAR 0 6
36211: PPUSH
36212: CALL_OW 112
36216: GO 36302
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36218: LD_VAR 0 1
36222: PPUSH
36223: LD_EXP 119
36227: PUSH
36228: LD_VAR 0 4
36232: ARRAY
36233: PUSH
36234: LD_INT 3
36236: ARRAY
36237: PPUSH
36238: LD_EXP 119
36242: PUSH
36243: LD_VAR 0 4
36247: ARRAY
36248: PUSH
36249: LD_INT 4
36251: ARRAY
36252: PPUSH
36253: CALL_OW 297
36257: PUSH
36258: LD_INT 0
36260: GREATER
36261: IFFALSE 36302
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36263: LD_VAR 0 5
36267: PPUSH
36268: LD_EXP 119
36272: PUSH
36273: LD_VAR 0 4
36277: ARRAY
36278: PUSH
36279: LD_INT 3
36281: ARRAY
36282: PPUSH
36283: LD_EXP 119
36287: PUSH
36288: LD_VAR 0 4
36292: ARRAY
36293: PUSH
36294: LD_INT 4
36296: ARRAY
36297: PPUSH
36298: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36302: LD_VAR 0 5
36306: PPUSH
36307: CALL_OW 181
// if Multiplayer then
36311: LD_OWVAR 4
36315: IFFALSE 36364
// begin repeat wait ( 10 ) ;
36317: LD_INT 10
36319: PPUSH
36320: CALL_OW 67
// until not IsInUnit ( driver ) ;
36324: LD_VAR 0 5
36328: PPUSH
36329: CALL_OW 310
36333: NOT
36334: IFFALSE 36317
// if not HasTask ( driver ) then
36336: LD_VAR 0 5
36340: PPUSH
36341: CALL_OW 314
36345: NOT
36346: IFFALSE 36362
// ComEnterUnit ( driver , factory ) ;
36348: LD_VAR 0 5
36352: PPUSH
36353: LD_VAR 0 2
36357: PPUSH
36358: CALL_OW 120
// end else
36362: GO 36378
// AddComEnterUnit ( driver , factory ) ;
36364: LD_VAR 0 5
36368: PPUSH
36369: LD_VAR 0 2
36373: PPUSH
36374: CALL_OW 180
// wait ( 0 0$1 ) ;
36378: LD_INT 35
36380: PPUSH
36381: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36385: LD_ADDR_EXP 120
36389: PUSH
36390: LD_EXP 120
36394: PUSH
36395: LD_VAR 0 5
36399: DIFF
36400: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36401: LD_ADDR_EXP 120
36405: PUSH
36406: LD_EXP 120
36410: PUSH
36411: LD_VAR 0 1
36415: DIFF
36416: ST_TO_ADDR
// break ;
36417: GO 36570
// end ; end else
36419: GO 36568
// if GetControl ( vehicle ) = control_remote then
36421: LD_VAR 0 1
36425: PPUSH
36426: CALL_OW 263
36430: PUSH
36431: LD_INT 2
36433: EQUAL
36434: IFFALSE 36520
// begin wait ( 0 0$2 ) ;
36436: LD_INT 70
36438: PPUSH
36439: CALL_OW 67
// repeat wait ( 10 ) ;
36443: LD_INT 10
36445: PPUSH
36446: CALL_OW 67
// Connect ( vehicle ) ;
36450: LD_VAR 0 1
36454: PPUSH
36455: CALL 50579 0 1
// until IsControledBy ( vehicle ) ;
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 312
36468: IFFALSE 36443
// wait ( 10 ) ;
36470: LD_INT 10
36472: PPUSH
36473: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36477: LD_VAR 0 1
36481: PPUSH
36482: LD_EXP 119
36486: PUSH
36487: LD_VAR 0 4
36491: ARRAY
36492: PUSH
36493: LD_INT 3
36495: ARRAY
36496: PPUSH
36497: LD_EXP 119
36501: PUSH
36502: LD_VAR 0 4
36506: ARRAY
36507: PUSH
36508: LD_INT 4
36510: ARRAY
36511: PPUSH
36512: CALL_OW 111
// break ;
36516: GO 36570
// end else
36518: GO 36568
// begin wait ( 0 0$3 ) ;
36520: LD_INT 105
36522: PPUSH
36523: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36527: LD_VAR 0 1
36531: PPUSH
36532: LD_EXP 119
36536: PUSH
36537: LD_VAR 0 4
36541: ARRAY
36542: PUSH
36543: LD_INT 3
36545: ARRAY
36546: PPUSH
36547: LD_EXP 119
36551: PUSH
36552: LD_VAR 0 4
36556: ARRAY
36557: PUSH
36558: LD_INT 4
36560: ARRAY
36561: PPUSH
36562: CALL_OW 111
// break ;
36566: GO 36570
// end ; end ;
36568: GO 36019
36570: POP
36571: POP
// end ;
36572: LD_VAR 0 3
36576: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36577: LD_INT 0
36579: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36580: LD_VAR 0 1
36584: PUSH
36585: LD_INT 250
36587: EQUAL
36588: IFFALSE 36605
36590: PUSH
36591: LD_VAR 0 2
36595: PPUSH
36596: CALL_OW 264
36600: PUSH
36601: LD_INT 81
36603: EQUAL
36604: AND
36605: IFFALSE 36626
// MinerPlaceMine ( unit , x , y ) ;
36607: LD_VAR 0 2
36611: PPUSH
36612: LD_VAR 0 4
36616: PPUSH
36617: LD_VAR 0 5
36621: PPUSH
36622: CALL 39758 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36626: LD_VAR 0 1
36630: PUSH
36631: LD_INT 251
36633: EQUAL
36634: IFFALSE 36651
36636: PUSH
36637: LD_VAR 0 2
36641: PPUSH
36642: CALL_OW 264
36646: PUSH
36647: LD_INT 81
36649: EQUAL
36650: AND
36651: IFFALSE 36672
// MinerDetonateMine ( unit , x , y ) ;
36653: LD_VAR 0 2
36657: PPUSH
36658: LD_VAR 0 4
36662: PPUSH
36663: LD_VAR 0 5
36667: PPUSH
36668: CALL 40037 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36672: LD_VAR 0 1
36676: PUSH
36677: LD_INT 252
36679: EQUAL
36680: IFFALSE 36697
36682: PUSH
36683: LD_VAR 0 2
36687: PPUSH
36688: CALL_OW 264
36692: PUSH
36693: LD_INT 81
36695: EQUAL
36696: AND
36697: IFFALSE 36718
// MinerCreateMinefield ( unit , x , y ) ;
36699: LD_VAR 0 2
36703: PPUSH
36704: LD_VAR 0 4
36708: PPUSH
36709: LD_VAR 0 5
36713: PPUSH
36714: CALL 40456 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36718: LD_VAR 0 1
36722: PUSH
36723: LD_INT 253
36725: EQUAL
36726: IFFALSE 36743
36728: PUSH
36729: LD_VAR 0 2
36733: PPUSH
36734: CALL_OW 257
36738: PUSH
36739: LD_INT 5
36741: EQUAL
36742: AND
36743: IFFALSE 36764
// ComBinocular ( unit , x , y ) ;
36745: LD_VAR 0 2
36749: PPUSH
36750: LD_VAR 0 4
36754: PPUSH
36755: LD_VAR 0 5
36759: PPUSH
36760: CALL 40831 0 3
// if selectedUnit then
36764: LD_VAR 0 3
36768: IFFALSE 36828
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36770: LD_VAR 0 1
36774: PUSH
36775: LD_INT 254
36777: EQUAL
36778: IFFALSE 36795
36780: PUSH
36781: LD_VAR 0 2
36785: PPUSH
36786: CALL_OW 264
36790: PUSH
36791: LD_INT 99
36793: EQUAL
36794: AND
36795: IFFALSE 36812
36797: PUSH
36798: LD_VAR 0 3
36802: PPUSH
36803: CALL_OW 263
36807: PUSH
36808: LD_INT 3
36810: EQUAL
36811: AND
36812: IFFALSE 36828
// HackDestroyVehicle ( unit , selectedUnit ) ;
36814: LD_VAR 0 2
36818: PPUSH
36819: LD_VAR 0 3
36823: PPUSH
36824: CALL 39118 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36828: LD_VAR 0 1
36832: PUSH
36833: LD_INT 255
36835: EQUAL
36836: IFFALSE 36860
36838: PUSH
36839: LD_VAR 0 2
36843: PPUSH
36844: CALL_OW 264
36848: PUSH
36849: LD_INT 14
36851: PUSH
36852: LD_INT 53
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: IN
36859: AND
36860: IFFALSE 36878
36862: PUSH
36863: LD_VAR 0 4
36867: PPUSH
36868: LD_VAR 0 5
36872: PPUSH
36873: CALL_OW 488
36877: AND
36878: IFFALSE 36902
// CutTreeXYR ( unit , x , y , 12 ) ;
36880: LD_VAR 0 2
36884: PPUSH
36885: LD_VAR 0 4
36889: PPUSH
36890: LD_VAR 0 5
36894: PPUSH
36895: LD_INT 12
36897: PPUSH
36898: CALL 37093 0 4
// if cmd = 256 then
36902: LD_VAR 0 1
36906: PUSH
36907: LD_INT 256
36909: EQUAL
36910: IFFALSE 36931
// SetFactoryWaypoint ( unit , x , y ) ;
36912: LD_VAR 0 2
36916: PPUSH
36917: LD_VAR 0 4
36921: PPUSH
36922: LD_VAR 0 5
36926: PPUSH
36927: CALL 34453 0 3
// if cmd = 257 then
36931: LD_VAR 0 1
36935: PUSH
36936: LD_INT 257
36938: EQUAL
36939: IFFALSE 36960
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36941: LD_VAR 0 2
36945: PPUSH
36946: LD_VAR 0 4
36950: PPUSH
36951: LD_VAR 0 5
36955: PPUSH
36956: CALL 34949 0 3
// if cmd = 258 then
36960: LD_VAR 0 1
36964: PUSH
36965: LD_INT 258
36967: EQUAL
36968: IFFALSE 36992
// BurnTreeXYR ( unit , x , y , 8 ) ;
36970: LD_VAR 0 2
36974: PPUSH
36975: LD_VAR 0 4
36979: PPUSH
36980: LD_VAR 0 5
36984: PPUSH
36985: LD_INT 8
36987: PPUSH
36988: CALL 37493 0 4
// end ;
36992: LD_VAR 0 6
36996: RET
// export function ComRadiation ( un ) ; var eff ; begin
36997: LD_INT 0
36999: PPUSH
37000: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37001: LD_VAR 0 1
37005: PPUSH
37006: CALL_OW 264
37010: PUSH
37011: LD_INT 91
37013: NONEQUAL
37014: IFFALSE 37018
// exit ;
37016: GO 37088
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37018: LD_INT 68
37020: PPUSH
37021: LD_VAR 0 1
37025: PPUSH
37026: CALL_OW 255
37030: PPUSH
37031: CALL_OW 321
37035: PUSH
37036: LD_INT 2
37038: EQUAL
37039: IFFALSE 37051
// eff := 50 else
37041: LD_ADDR_VAR 0 3
37045: PUSH
37046: LD_INT 50
37048: ST_TO_ADDR
37049: GO 37059
// eff := 25 ;
37051: LD_ADDR_VAR 0 3
37055: PUSH
37056: LD_INT 25
37058: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 250
37068: PPUSH
37069: LD_VAR 0 1
37073: PPUSH
37074: CALL_OW 251
37078: PPUSH
37079: LD_VAR 0 3
37083: PPUSH
37084: CALL_OW 495
// end ;
37088: LD_VAR 0 2
37092: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37093: LD_INT 0
37095: PPUSH
37096: PPUSH
37097: PPUSH
37098: PPUSH
37099: PPUSH
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37104: LD_VAR 0 1
37108: PPUSH
37109: CALL_OW 302
37113: NOT
37114: IFTRUE 37133
37116: PUSH
37117: LD_VAR 0 2
37121: PPUSH
37122: LD_VAR 0 3
37126: PPUSH
37127: CALL_OW 488
37131: NOT
37132: OR
37133: IFTRUE 37142
37135: PUSH
37136: LD_VAR 0 4
37140: NOT
37141: OR
37142: IFFALSE 37146
// exit ;
37144: GO 37488
// list := [ ] ;
37146: LD_ADDR_VAR 0 13
37150: PUSH
37151: EMPTY
37152: ST_TO_ADDR
// if x - r < 0 then
37153: LD_VAR 0 2
37157: PUSH
37158: LD_VAR 0 4
37162: MINUS
37163: PUSH
37164: LD_INT 0
37166: LESS
37167: IFFALSE 37179
// min_x := 0 else
37169: LD_ADDR_VAR 0 7
37173: PUSH
37174: LD_INT 0
37176: ST_TO_ADDR
37177: GO 37195
// min_x := x - r ;
37179: LD_ADDR_VAR 0 7
37183: PUSH
37184: LD_VAR 0 2
37188: PUSH
37189: LD_VAR 0 4
37193: MINUS
37194: ST_TO_ADDR
// if y - r < 0 then
37195: LD_VAR 0 3
37199: PUSH
37200: LD_VAR 0 4
37204: MINUS
37205: PUSH
37206: LD_INT 0
37208: LESS
37209: IFFALSE 37221
// min_y := 0 else
37211: LD_ADDR_VAR 0 8
37215: PUSH
37216: LD_INT 0
37218: ST_TO_ADDR
37219: GO 37237
// min_y := y - r ;
37221: LD_ADDR_VAR 0 8
37225: PUSH
37226: LD_VAR 0 3
37230: PUSH
37231: LD_VAR 0 4
37235: MINUS
37236: ST_TO_ADDR
// max_x := x + r ;
37237: LD_ADDR_VAR 0 9
37241: PUSH
37242: LD_VAR 0 2
37246: PUSH
37247: LD_VAR 0 4
37251: PLUS
37252: ST_TO_ADDR
// max_y := y + r ;
37253: LD_ADDR_VAR 0 10
37257: PUSH
37258: LD_VAR 0 3
37262: PUSH
37263: LD_VAR 0 4
37267: PLUS
37268: ST_TO_ADDR
// for _x = min_x to max_x do
37269: LD_ADDR_VAR 0 11
37273: PUSH
37274: DOUBLE
37275: LD_VAR 0 7
37279: DEC
37280: ST_TO_ADDR
37281: LD_VAR 0 9
37285: PUSH
37286: FOR_TO
37287: IFFALSE 37406
// for _y = min_y to max_y do
37289: LD_ADDR_VAR 0 12
37293: PUSH
37294: DOUBLE
37295: LD_VAR 0 8
37299: DEC
37300: ST_TO_ADDR
37301: LD_VAR 0 10
37305: PUSH
37306: FOR_TO
37307: IFFALSE 37402
// begin if not ValidHex ( _x , _y ) then
37309: LD_VAR 0 11
37313: PPUSH
37314: LD_VAR 0 12
37318: PPUSH
37319: CALL_OW 488
37323: NOT
37324: IFFALSE 37328
// continue ;
37326: GO 37306
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37328: LD_VAR 0 11
37332: PPUSH
37333: LD_VAR 0 12
37337: PPUSH
37338: CALL_OW 351
37342: IFFALSE 37360
37344: PUSH
37345: LD_VAR 0 11
37349: PPUSH
37350: LD_VAR 0 12
37354: PPUSH
37355: CALL_OW 554
37359: AND
37360: IFFALSE 37400
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37362: LD_ADDR_VAR 0 13
37366: PUSH
37367: LD_VAR 0 13
37371: PPUSH
37372: LD_VAR 0 13
37376: PUSH
37377: LD_INT 1
37379: PLUS
37380: PPUSH
37381: LD_VAR 0 11
37385: PUSH
37386: LD_VAR 0 12
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PPUSH
37395: CALL_OW 2
37399: ST_TO_ADDR
// end ;
37400: GO 37306
37402: POP
37403: POP
37404: GO 37286
37406: POP
37407: POP
// if not list then
37408: LD_VAR 0 13
37412: NOT
37413: IFFALSE 37417
// exit ;
37415: GO 37488
// for i in list do
37417: LD_ADDR_VAR 0 6
37421: PUSH
37422: LD_VAR 0 13
37426: PUSH
37427: FOR_IN
37428: IFFALSE 37486
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37430: LD_VAR 0 1
37434: PPUSH
37435: LD_STRING M
37437: PUSH
37438: LD_VAR 0 6
37442: PUSH
37443: LD_INT 1
37445: ARRAY
37446: PUSH
37447: LD_VAR 0 6
37451: PUSH
37452: LD_INT 2
37454: ARRAY
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: PUSH
37477: EMPTY
37478: LIST
37479: PPUSH
37480: CALL_OW 447
37484: GO 37427
37486: POP
37487: POP
// end ;
37488: LD_VAR 0 5
37492: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37493: LD_INT 0
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37505: LD_VAR 0 1
37509: PPUSH
37510: CALL_OW 302
37514: NOT
37515: IFTRUE 37534
37517: PUSH
37518: LD_VAR 0 2
37522: PPUSH
37523: LD_VAR 0 3
37527: PPUSH
37528: CALL_OW 488
37532: NOT
37533: OR
37534: IFTRUE 37543
37536: PUSH
37537: LD_VAR 0 4
37541: NOT
37542: OR
37543: IFFALSE 37547
// exit ;
37545: GO 38064
// list := [ ] ;
37547: LD_ADDR_VAR 0 13
37551: PUSH
37552: EMPTY
37553: ST_TO_ADDR
// if x - r < 0 then
37554: LD_VAR 0 2
37558: PUSH
37559: LD_VAR 0 4
37563: MINUS
37564: PUSH
37565: LD_INT 0
37567: LESS
37568: IFFALSE 37580
// min_x := 0 else
37570: LD_ADDR_VAR 0 7
37574: PUSH
37575: LD_INT 0
37577: ST_TO_ADDR
37578: GO 37596
// min_x := x - r ;
37580: LD_ADDR_VAR 0 7
37584: PUSH
37585: LD_VAR 0 2
37589: PUSH
37590: LD_VAR 0 4
37594: MINUS
37595: ST_TO_ADDR
// if y - r < 0 then
37596: LD_VAR 0 3
37600: PUSH
37601: LD_VAR 0 4
37605: MINUS
37606: PUSH
37607: LD_INT 0
37609: LESS
37610: IFFALSE 37622
// min_y := 0 else
37612: LD_ADDR_VAR 0 8
37616: PUSH
37617: LD_INT 0
37619: ST_TO_ADDR
37620: GO 37638
// min_y := y - r ;
37622: LD_ADDR_VAR 0 8
37626: PUSH
37627: LD_VAR 0 3
37631: PUSH
37632: LD_VAR 0 4
37636: MINUS
37637: ST_TO_ADDR
// max_x := x + r ;
37638: LD_ADDR_VAR 0 9
37642: PUSH
37643: LD_VAR 0 2
37647: PUSH
37648: LD_VAR 0 4
37652: PLUS
37653: ST_TO_ADDR
// max_y := y + r ;
37654: LD_ADDR_VAR 0 10
37658: PUSH
37659: LD_VAR 0 3
37663: PUSH
37664: LD_VAR 0 4
37668: PLUS
37669: ST_TO_ADDR
// for _x = min_x to max_x do
37670: LD_ADDR_VAR 0 11
37674: PUSH
37675: DOUBLE
37676: LD_VAR 0 7
37680: DEC
37681: ST_TO_ADDR
37682: LD_VAR 0 9
37686: PUSH
37687: FOR_TO
37688: IFFALSE 37807
// for _y = min_y to max_y do
37690: LD_ADDR_VAR 0 12
37694: PUSH
37695: DOUBLE
37696: LD_VAR 0 8
37700: DEC
37701: ST_TO_ADDR
37702: LD_VAR 0 10
37706: PUSH
37707: FOR_TO
37708: IFFALSE 37803
// begin if not ValidHex ( _x , _y ) then
37710: LD_VAR 0 11
37714: PPUSH
37715: LD_VAR 0 12
37719: PPUSH
37720: CALL_OW 488
37724: NOT
37725: IFFALSE 37729
// continue ;
37727: GO 37707
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37729: LD_VAR 0 11
37733: PPUSH
37734: LD_VAR 0 12
37738: PPUSH
37739: CALL_OW 351
37743: IFFALSE 37761
37745: PUSH
37746: LD_VAR 0 11
37750: PPUSH
37751: LD_VAR 0 12
37755: PPUSH
37756: CALL_OW 554
37760: AND
37761: IFFALSE 37801
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37763: LD_ADDR_VAR 0 13
37767: PUSH
37768: LD_VAR 0 13
37772: PPUSH
37773: LD_VAR 0 13
37777: PUSH
37778: LD_INT 1
37780: PLUS
37781: PPUSH
37782: LD_VAR 0 11
37786: PUSH
37787: LD_VAR 0 12
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PPUSH
37796: CALL_OW 2
37800: ST_TO_ADDR
// end ;
37801: GO 37707
37803: POP
37804: POP
37805: GO 37687
37807: POP
37808: POP
// if not list then
37809: LD_VAR 0 13
37813: NOT
37814: IFFALSE 37818
// exit ;
37816: GO 38064
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37818: LD_ADDR_VAR 0 13
37822: PUSH
37823: LD_VAR 0 1
37827: PPUSH
37828: LD_VAR 0 13
37832: PPUSH
37833: LD_INT 1
37835: PPUSH
37836: LD_INT 1
37838: PPUSH
37839: CALL 47707 0 4
37843: ST_TO_ADDR
// ComStop ( flame ) ;
37844: LD_VAR 0 1
37848: PPUSH
37849: CALL_OW 141
// for i in list do
37853: LD_ADDR_VAR 0 6
37857: PUSH
37858: LD_VAR 0 13
37862: PUSH
37863: FOR_IN
37864: IFFALSE 37895
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37866: LD_VAR 0 1
37870: PPUSH
37871: LD_VAR 0 6
37875: PUSH
37876: LD_INT 1
37878: ARRAY
37879: PPUSH
37880: LD_VAR 0 6
37884: PUSH
37885: LD_INT 2
37887: ARRAY
37888: PPUSH
37889: CALL_OW 176
37893: GO 37863
37895: POP
37896: POP
// repeat wait ( 0 0$1 ) ;
37897: LD_INT 35
37899: PPUSH
37900: CALL_OW 67
// task := GetTaskList ( flame ) ;
37904: LD_ADDR_VAR 0 14
37908: PUSH
37909: LD_VAR 0 1
37913: PPUSH
37914: CALL_OW 437
37918: ST_TO_ADDR
// if not task then
37919: LD_VAR 0 14
37923: NOT
37924: IFFALSE 37928
// exit ;
37926: GO 38064
// if task [ 1 ] [ 1 ] <> | then
37928: LD_VAR 0 14
37932: PUSH
37933: LD_INT 1
37935: ARRAY
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: PUSH
37941: LD_STRING |
37943: NONEQUAL
37944: IFFALSE 37948
// exit ;
37946: GO 38064
// _x := task [ 1 ] [ 2 ] ;
37948: LD_ADDR_VAR 0 11
37952: PUSH
37953: LD_VAR 0 14
37957: PUSH
37958: LD_INT 1
37960: ARRAY
37961: PUSH
37962: LD_INT 2
37964: ARRAY
37965: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37966: LD_ADDR_VAR 0 12
37970: PUSH
37971: LD_VAR 0 14
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PUSH
37980: LD_INT 3
37982: ARRAY
37983: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37984: LD_VAR 0 11
37988: PPUSH
37989: LD_VAR 0 12
37993: PPUSH
37994: CALL_OW 351
37998: NOT
37999: IFTRUE 38018
38001: PUSH
38002: LD_VAR 0 11
38006: PPUSH
38007: LD_VAR 0 12
38011: PPUSH
38012: CALL_OW 554
38016: NOT
38017: OR
38018: IFFALSE 38052
// begin task := Delete ( task , 1 ) ;
38020: LD_ADDR_VAR 0 14
38024: PUSH
38025: LD_VAR 0 14
38029: PPUSH
38030: LD_INT 1
38032: PPUSH
38033: CALL_OW 3
38037: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38038: LD_VAR 0 1
38042: PPUSH
38043: LD_VAR 0 14
38047: PPUSH
38048: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38052: LD_VAR 0 1
38056: PPUSH
38057: CALL_OW 314
38061: NOT
38062: IFFALSE 37897
// end ;
38064: LD_VAR 0 5
38068: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38069: LD_EXP 123
38073: NOT
38074: IFFALSE 38124
38076: GO 38078
38078: DISABLE
// begin initHack := true ;
38079: LD_ADDR_EXP 123
38083: PUSH
38084: LD_INT 1
38086: ST_TO_ADDR
// hackTanks := [ ] ;
38087: LD_ADDR_EXP 124
38091: PUSH
38092: EMPTY
38093: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38094: LD_ADDR_EXP 125
38098: PUSH
38099: EMPTY
38100: ST_TO_ADDR
// hackLimit := 3 ;
38101: LD_ADDR_EXP 126
38105: PUSH
38106: LD_INT 3
38108: ST_TO_ADDR
// hackDist := 12 ;
38109: LD_ADDR_EXP 127
38113: PUSH
38114: LD_INT 12
38116: ST_TO_ADDR
// hackCounter := [ ] ;
38117: LD_ADDR_EXP 128
38121: PUSH
38122: EMPTY
38123: ST_TO_ADDR
// end ;
38124: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38125: LD_EXP 123
38129: IFFALSE 38147
38131: PUSH
38132: LD_INT 34
38134: PUSH
38135: LD_INT 99
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PPUSH
38142: CALL_OW 69
38146: AND
38147: IFFALSE 38400
38149: GO 38151
38151: DISABLE
38152: LD_INT 0
38154: PPUSH
38155: PPUSH
// begin enable ;
38156: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38157: LD_ADDR_VAR 0 1
38161: PUSH
38162: LD_INT 34
38164: PUSH
38165: LD_INT 99
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PPUSH
38172: CALL_OW 69
38176: PUSH
38177: FOR_IN
38178: IFFALSE 38398
// begin if not i in hackTanks then
38180: LD_VAR 0 1
38184: PUSH
38185: LD_EXP 124
38189: IN
38190: NOT
38191: IFFALSE 38274
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38193: LD_ADDR_EXP 124
38197: PUSH
38198: LD_EXP 124
38202: PPUSH
38203: LD_EXP 124
38207: PUSH
38208: LD_INT 1
38210: PLUS
38211: PPUSH
38212: LD_VAR 0 1
38216: PPUSH
38217: CALL_OW 1
38221: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38222: LD_ADDR_EXP 125
38226: PUSH
38227: LD_EXP 125
38231: PPUSH
38232: LD_EXP 125
38236: PUSH
38237: LD_INT 1
38239: PLUS
38240: PPUSH
38241: EMPTY
38242: PPUSH
38243: CALL_OW 1
38247: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38248: LD_ADDR_EXP 128
38252: PUSH
38253: LD_EXP 128
38257: PPUSH
38258: LD_EXP 128
38262: PUSH
38263: LD_INT 1
38265: PLUS
38266: PPUSH
38267: EMPTY
38268: PPUSH
38269: CALL_OW 1
38273: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38274: LD_VAR 0 1
38278: PPUSH
38279: CALL_OW 302
38283: NOT
38284: IFFALSE 38297
// begin HackUnlinkAll ( i ) ;
38286: LD_VAR 0 1
38290: PPUSH
38291: CALL 38403 0 1
// continue ;
38295: GO 38177
// end ; HackCheckCapturedStatus ( i ) ;
38297: LD_VAR 0 1
38301: PPUSH
38302: CALL 38848 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38306: LD_ADDR_VAR 0 2
38310: PUSH
38311: LD_INT 81
38313: PUSH
38314: LD_VAR 0 1
38318: PPUSH
38319: CALL_OW 255
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 33
38330: PUSH
38331: LD_INT 3
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 91
38340: PUSH
38341: LD_VAR 0 1
38345: PUSH
38346: LD_EXP 127
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 50
38358: PUSH
38359: EMPTY
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: PPUSH
38368: CALL_OW 69
38372: ST_TO_ADDR
// if not tmp then
38373: LD_VAR 0 2
38377: NOT
38378: IFFALSE 38382
// continue ;
38380: GO 38177
// HackLink ( i , tmp ) ;
38382: LD_VAR 0 1
38386: PPUSH
38387: LD_VAR 0 2
38391: PPUSH
38392: CALL 38539 0 2
// end ;
38396: GO 38177
38398: POP
38399: POP
// end ;
38400: PPOPN 2
38402: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38403: LD_INT 0
38405: PPUSH
38406: PPUSH
38407: PPUSH
// if not hack in hackTanks then
38408: LD_VAR 0 1
38412: PUSH
38413: LD_EXP 124
38417: IN
38418: NOT
38419: IFFALSE 38423
// exit ;
38421: GO 38534
// index := GetElementIndex ( hackTanks , hack ) ;
38423: LD_ADDR_VAR 0 4
38427: PUSH
38428: LD_EXP 124
38432: PPUSH
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL 47002 0 2
38442: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38443: LD_EXP 125
38447: PUSH
38448: LD_VAR 0 4
38452: ARRAY
38453: IFFALSE 38534
// begin for i in hackTanksCaptured [ index ] do
38455: LD_ADDR_VAR 0 3
38459: PUSH
38460: LD_EXP 125
38464: PUSH
38465: LD_VAR 0 4
38469: ARRAY
38470: PUSH
38471: FOR_IN
38472: IFFALSE 38498
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38474: LD_VAR 0 3
38478: PUSH
38479: LD_INT 1
38481: ARRAY
38482: PPUSH
38483: LD_VAR 0 3
38487: PUSH
38488: LD_INT 2
38490: ARRAY
38491: PPUSH
38492: CALL_OW 235
38496: GO 38471
38498: POP
38499: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38500: LD_ADDR_EXP 125
38504: PUSH
38505: LD_EXP 125
38509: PPUSH
38510: LD_VAR 0 4
38514: PPUSH
38515: EMPTY
38516: PPUSH
38517: CALL_OW 1
38521: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38522: LD_VAR 0 1
38526: PPUSH
38527: LD_INT 0
38529: PPUSH
38530: CALL_OW 505
// end ; end ;
38534: LD_VAR 0 2
38538: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38539: LD_INT 0
38541: PPUSH
38542: PPUSH
38543: PPUSH
// if not hack in hackTanks or not vehicles then
38544: LD_VAR 0 1
38548: PUSH
38549: LD_EXP 124
38553: IN
38554: NOT
38555: IFTRUE 38564
38557: PUSH
38558: LD_VAR 0 2
38562: NOT
38563: OR
38564: IFFALSE 38568
// exit ;
38566: GO 38843
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38568: LD_ADDR_VAR 0 2
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: LD_VAR 0 2
38582: PPUSH
38583: LD_INT 1
38585: PPUSH
38586: LD_INT 1
38588: PPUSH
38589: CALL 47654 0 4
38593: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38594: LD_ADDR_VAR 0 5
38598: PUSH
38599: LD_EXP 124
38603: PPUSH
38604: LD_VAR 0 1
38608: PPUSH
38609: CALL 47002 0 2
38613: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38614: LD_EXP 125
38618: PUSH
38619: LD_VAR 0 5
38623: ARRAY
38624: PUSH
38625: LD_EXP 126
38629: LESS
38630: IFFALSE 38819
// begin for i := 1 to vehicles do
38632: LD_ADDR_VAR 0 4
38636: PUSH
38637: DOUBLE
38638: LD_INT 1
38640: DEC
38641: ST_TO_ADDR
38642: LD_VAR 0 2
38646: PUSH
38647: FOR_TO
38648: IFFALSE 38817
// begin if hackTanksCaptured [ index ] = hackLimit then
38650: LD_EXP 125
38654: PUSH
38655: LD_VAR 0 5
38659: ARRAY
38660: PUSH
38661: LD_EXP 126
38665: EQUAL
38666: IFFALSE 38670
// break ;
38668: GO 38817
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38670: LD_ADDR_EXP 128
38674: PUSH
38675: LD_EXP 128
38679: PPUSH
38680: LD_VAR 0 5
38684: PPUSH
38685: LD_EXP 128
38689: PUSH
38690: LD_VAR 0 5
38694: ARRAY
38695: PUSH
38696: LD_INT 1
38698: PLUS
38699: PPUSH
38700: CALL_OW 1
38704: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38705: LD_ADDR_EXP 125
38709: PUSH
38710: LD_EXP 125
38714: PPUSH
38715: LD_VAR 0 5
38719: PUSH
38720: LD_EXP 125
38724: PUSH
38725: LD_VAR 0 5
38729: ARRAY
38730: PUSH
38731: LD_INT 1
38733: PLUS
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PPUSH
38739: LD_VAR 0 2
38743: PUSH
38744: LD_VAR 0 4
38748: ARRAY
38749: PUSH
38750: LD_VAR 0 2
38754: PUSH
38755: LD_VAR 0 4
38759: ARRAY
38760: PPUSH
38761: CALL_OW 255
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PPUSH
38770: CALL 47219 0 3
38774: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38775: LD_VAR 0 2
38779: PUSH
38780: LD_VAR 0 4
38784: ARRAY
38785: PPUSH
38786: LD_VAR 0 1
38790: PPUSH
38791: CALL_OW 255
38795: PPUSH
38796: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38800: LD_VAR 0 2
38804: PUSH
38805: LD_VAR 0 4
38809: ARRAY
38810: PPUSH
38811: CALL_OW 141
// end ;
38815: GO 38647
38817: POP
38818: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38819: LD_VAR 0 1
38823: PPUSH
38824: LD_EXP 125
38828: PUSH
38829: LD_VAR 0 5
38833: ARRAY
38834: PUSH
38835: LD_INT 0
38837: PLUS
38838: PPUSH
38839: CALL_OW 505
// end ;
38843: LD_VAR 0 3
38847: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38848: LD_INT 0
38850: PPUSH
38851: PPUSH
38852: PPUSH
38853: PPUSH
// if not hack in hackTanks then
38854: LD_VAR 0 1
38858: PUSH
38859: LD_EXP 124
38863: IN
38864: NOT
38865: IFFALSE 38869
// exit ;
38867: GO 39113
// index := GetElementIndex ( hackTanks , hack ) ;
38869: LD_ADDR_VAR 0 4
38873: PUSH
38874: LD_EXP 124
38878: PPUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: CALL 47002 0 2
38888: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38889: LD_ADDR_VAR 0 3
38893: PUSH
38894: DOUBLE
38895: LD_EXP 125
38899: PUSH
38900: LD_VAR 0 4
38904: ARRAY
38905: INC
38906: ST_TO_ADDR
38907: LD_INT 1
38909: PUSH
38910: FOR_DOWNTO
38911: IFFALSE 39087
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38913: LD_ADDR_VAR 0 5
38917: PUSH
38918: LD_EXP 125
38922: PUSH
38923: LD_VAR 0 4
38927: ARRAY
38928: PUSH
38929: LD_VAR 0 3
38933: ARRAY
38934: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38935: LD_VAR 0 5
38939: PUSH
38940: LD_INT 1
38942: ARRAY
38943: PPUSH
38944: CALL_OW 302
38948: NOT
38949: IFTRUE 38977
38951: PUSH
38952: LD_VAR 0 5
38956: PUSH
38957: LD_INT 1
38959: ARRAY
38960: PPUSH
38961: CALL_OW 255
38965: PUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: CALL_OW 255
38975: NONEQUAL
38976: OR
38977: IFFALSE 39085
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38979: LD_VAR 0 5
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: CALL_OW 305
38992: IFFALSE 39020
38994: PUSH
38995: LD_VAR 0 5
38999: PUSH
39000: LD_INT 1
39002: ARRAY
39003: PPUSH
39004: CALL_OW 255
39008: PUSH
39009: LD_VAR 0 1
39013: PPUSH
39014: CALL_OW 255
39018: EQUAL
39019: AND
39020: IFFALSE 39044
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39022: LD_VAR 0 5
39026: PUSH
39027: LD_INT 1
39029: ARRAY
39030: PPUSH
39031: LD_VAR 0 5
39035: PUSH
39036: LD_INT 2
39038: ARRAY
39039: PPUSH
39040: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39044: LD_ADDR_EXP 125
39048: PUSH
39049: LD_EXP 125
39053: PPUSH
39054: LD_VAR 0 4
39058: PPUSH
39059: LD_EXP 125
39063: PUSH
39064: LD_VAR 0 4
39068: ARRAY
39069: PPUSH
39070: LD_VAR 0 3
39074: PPUSH
39075: CALL_OW 3
39079: PPUSH
39080: CALL_OW 1
39084: ST_TO_ADDR
// end ; end ;
39085: GO 38910
39087: POP
39088: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39089: LD_VAR 0 1
39093: PPUSH
39094: LD_EXP 125
39098: PUSH
39099: LD_VAR 0 4
39103: ARRAY
39104: PUSH
39105: LD_INT 0
39107: PLUS
39108: PPUSH
39109: CALL_OW 505
// end ;
39113: LD_VAR 0 2
39117: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39118: LD_INT 0
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
// if not hack in hackTanks then
39124: LD_VAR 0 1
39128: PUSH
39129: LD_EXP 124
39133: IN
39134: NOT
39135: IFFALSE 39139
// exit ;
39137: GO 39224
// index := GetElementIndex ( hackTanks , hack ) ;
39139: LD_ADDR_VAR 0 5
39143: PUSH
39144: LD_EXP 124
39148: PPUSH
39149: LD_VAR 0 1
39153: PPUSH
39154: CALL 47002 0 2
39158: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39159: LD_ADDR_VAR 0 4
39163: PUSH
39164: DOUBLE
39165: LD_INT 1
39167: DEC
39168: ST_TO_ADDR
39169: LD_EXP 125
39173: PUSH
39174: LD_VAR 0 5
39178: ARRAY
39179: PUSH
39180: FOR_TO
39181: IFFALSE 39222
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39183: LD_EXP 125
39187: PUSH
39188: LD_VAR 0 5
39192: ARRAY
39193: PUSH
39194: LD_VAR 0 4
39198: ARRAY
39199: PUSH
39200: LD_INT 1
39202: ARRAY
39203: PUSH
39204: LD_VAR 0 2
39208: EQUAL
39209: IFFALSE 39220
// KillUnit ( vehicle ) ;
39211: LD_VAR 0 2
39215: PPUSH
39216: CALL_OW 66
39220: GO 39180
39222: POP
39223: POP
// end ;
39224: LD_VAR 0 3
39228: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39229: LD_EXP 129
39233: NOT
39234: IFFALSE 39269
39236: GO 39238
39238: DISABLE
// begin initMiner := true ;
39239: LD_ADDR_EXP 129
39243: PUSH
39244: LD_INT 1
39246: ST_TO_ADDR
// minersList := [ ] ;
39247: LD_ADDR_EXP 130
39251: PUSH
39252: EMPTY
39253: ST_TO_ADDR
// minerMinesList := [ ] ;
39254: LD_ADDR_EXP 131
39258: PUSH
39259: EMPTY
39260: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39261: LD_ADDR_EXP 132
39265: PUSH
39266: LD_INT 5
39268: ST_TO_ADDR
// end ;
39269: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39270: LD_EXP 129
39274: IFFALSE 39292
39276: PUSH
39277: LD_INT 34
39279: PUSH
39280: LD_INT 81
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PPUSH
39287: CALL_OW 69
39291: AND
39292: IFFALSE 39755
39294: GO 39296
39296: DISABLE
39297: LD_INT 0
39299: PPUSH
39300: PPUSH
39301: PPUSH
39302: PPUSH
// begin enable ;
39303: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39304: LD_ADDR_VAR 0 1
39308: PUSH
39309: LD_INT 34
39311: PUSH
39312: LD_INT 81
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PPUSH
39319: CALL_OW 69
39323: PUSH
39324: FOR_IN
39325: IFFALSE 39397
// begin if not i in minersList then
39327: LD_VAR 0 1
39331: PUSH
39332: LD_EXP 130
39336: IN
39337: NOT
39338: IFFALSE 39395
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39340: LD_ADDR_EXP 130
39344: PUSH
39345: LD_EXP 130
39349: PPUSH
39350: LD_EXP 130
39354: PUSH
39355: LD_INT 1
39357: PLUS
39358: PPUSH
39359: LD_VAR 0 1
39363: PPUSH
39364: CALL_OW 1
39368: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39369: LD_ADDR_EXP 131
39373: PUSH
39374: LD_EXP 131
39378: PPUSH
39379: LD_EXP 131
39383: PUSH
39384: LD_INT 1
39386: PLUS
39387: PPUSH
39388: EMPTY
39389: PPUSH
39390: CALL_OW 1
39394: ST_TO_ADDR
// end end ;
39395: GO 39324
39397: POP
39398: POP
// for i := minerMinesList downto 1 do
39399: LD_ADDR_VAR 0 1
39403: PUSH
39404: DOUBLE
39405: LD_EXP 131
39409: INC
39410: ST_TO_ADDR
39411: LD_INT 1
39413: PUSH
39414: FOR_DOWNTO
39415: IFFALSE 39753
// begin if IsLive ( minersList [ i ] ) then
39417: LD_EXP 130
39421: PUSH
39422: LD_VAR 0 1
39426: ARRAY
39427: PPUSH
39428: CALL_OW 300
39432: IFFALSE 39460
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39434: LD_EXP 130
39438: PUSH
39439: LD_VAR 0 1
39443: ARRAY
39444: PPUSH
39445: LD_EXP 131
39449: PUSH
39450: LD_VAR 0 1
39454: ARRAY
39455: PPUSH
39456: CALL_OW 505
// if not minerMinesList [ i ] then
39460: LD_EXP 131
39464: PUSH
39465: LD_VAR 0 1
39469: ARRAY
39470: NOT
39471: IFFALSE 39475
// continue ;
39473: GO 39414
// for j := minerMinesList [ i ] downto 1 do
39475: LD_ADDR_VAR 0 2
39479: PUSH
39480: DOUBLE
39481: LD_EXP 131
39485: PUSH
39486: LD_VAR 0 1
39490: ARRAY
39491: INC
39492: ST_TO_ADDR
39493: LD_INT 1
39495: PUSH
39496: FOR_DOWNTO
39497: IFFALSE 39749
// begin side := GetSide ( minersList [ i ] ) ;
39499: LD_ADDR_VAR 0 3
39503: PUSH
39504: LD_EXP 130
39508: PUSH
39509: LD_VAR 0 1
39513: ARRAY
39514: PPUSH
39515: CALL_OW 255
39519: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39520: LD_ADDR_VAR 0 4
39524: PUSH
39525: LD_EXP 131
39529: PUSH
39530: LD_VAR 0 1
39534: ARRAY
39535: PUSH
39536: LD_VAR 0 2
39540: ARRAY
39541: PUSH
39542: LD_INT 1
39544: ARRAY
39545: PPUSH
39546: LD_EXP 131
39550: PUSH
39551: LD_VAR 0 1
39555: ARRAY
39556: PUSH
39557: LD_VAR 0 2
39561: ARRAY
39562: PUSH
39563: LD_INT 2
39565: ARRAY
39566: PPUSH
39567: CALL_OW 428
39571: ST_TO_ADDR
// if not tmp then
39572: LD_VAR 0 4
39576: NOT
39577: IFFALSE 39581
// continue ;
39579: GO 39496
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39581: LD_VAR 0 4
39585: PUSH
39586: LD_INT 81
39588: PUSH
39589: LD_VAR 0 3
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PPUSH
39598: CALL_OW 69
39602: IN
39603: IFFALSE 39653
39605: PUSH
39606: LD_EXP 131
39610: PUSH
39611: LD_VAR 0 1
39615: ARRAY
39616: PUSH
39617: LD_VAR 0 2
39621: ARRAY
39622: PUSH
39623: LD_INT 1
39625: ARRAY
39626: PPUSH
39627: LD_EXP 131
39631: PUSH
39632: LD_VAR 0 1
39636: ARRAY
39637: PUSH
39638: LD_VAR 0 2
39642: ARRAY
39643: PUSH
39644: LD_INT 2
39646: ARRAY
39647: PPUSH
39648: CALL_OW 458
39652: AND
39653: IFFALSE 39747
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39655: LD_EXP 131
39659: PUSH
39660: LD_VAR 0 1
39664: ARRAY
39665: PUSH
39666: LD_VAR 0 2
39670: ARRAY
39671: PUSH
39672: LD_INT 1
39674: ARRAY
39675: PPUSH
39676: LD_EXP 131
39680: PUSH
39681: LD_VAR 0 1
39685: ARRAY
39686: PUSH
39687: LD_VAR 0 2
39691: ARRAY
39692: PUSH
39693: LD_INT 2
39695: ARRAY
39696: PPUSH
39697: LD_VAR 0 3
39701: PPUSH
39702: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39706: LD_ADDR_EXP 131
39710: PUSH
39711: LD_EXP 131
39715: PPUSH
39716: LD_VAR 0 1
39720: PPUSH
39721: LD_EXP 131
39725: PUSH
39726: LD_VAR 0 1
39730: ARRAY
39731: PPUSH
39732: LD_VAR 0 2
39736: PPUSH
39737: CALL_OW 3
39741: PPUSH
39742: CALL_OW 1
39746: ST_TO_ADDR
// end ; end ;
39747: GO 39496
39749: POP
39750: POP
// end ;
39751: GO 39414
39753: POP
39754: POP
// end ;
39755: PPOPN 4
39757: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39758: LD_INT 0
39760: PPUSH
39761: PPUSH
// result := false ;
39762: LD_ADDR_VAR 0 4
39766: PUSH
39767: LD_INT 0
39769: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39770: LD_VAR 0 1
39774: PPUSH
39775: CALL_OW 264
39779: PUSH
39780: LD_INT 81
39782: EQUAL
39783: NOT
39784: IFFALSE 39788
// exit ;
39786: GO 40032
// index := GetElementIndex ( minersList , unit ) ;
39788: LD_ADDR_VAR 0 5
39792: PUSH
39793: LD_EXP 130
39797: PPUSH
39798: LD_VAR 0 1
39802: PPUSH
39803: CALL 47002 0 2
39807: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39808: LD_EXP 131
39812: PUSH
39813: LD_VAR 0 5
39817: ARRAY
39818: PUSH
39819: LD_EXP 132
39823: GREATEREQUAL
39824: IFFALSE 39828
// exit ;
39826: GO 40032
// ComMoveXY ( unit , x , y ) ;
39828: LD_VAR 0 1
39832: PPUSH
39833: LD_VAR 0 2
39837: PPUSH
39838: LD_VAR 0 3
39842: PPUSH
39843: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39847: LD_INT 35
39849: PPUSH
39850: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39854: LD_VAR 0 1
39858: PPUSH
39859: LD_VAR 0 2
39863: PPUSH
39864: LD_VAR 0 3
39868: PPUSH
39869: CALL 79048 0 3
39873: NOT
39874: IFFALSE 39887
39876: PUSH
39877: LD_VAR 0 1
39881: PPUSH
39882: CALL_OW 314
39886: AND
39887: IFFALSE 39891
// exit ;
39889: GO 40032
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39891: LD_VAR 0 2
39895: PPUSH
39896: LD_VAR 0 3
39900: PPUSH
39901: CALL_OW 428
39905: PUSH
39906: LD_VAR 0 1
39910: EQUAL
39911: IFFALSE 39925
39913: PUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 314
39923: NOT
39924: AND
39925: IFFALSE 39847
// PlaySoundXY ( x , y , PlantMine ) ;
39927: LD_VAR 0 2
39931: PPUSH
39932: LD_VAR 0 3
39936: PPUSH
39937: LD_STRING PlantMine
39939: PPUSH
39940: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39944: LD_VAR 0 2
39948: PPUSH
39949: LD_VAR 0 3
39953: PPUSH
39954: LD_VAR 0 1
39958: PPUSH
39959: CALL_OW 255
39963: PPUSH
39964: LD_INT 0
39966: PPUSH
39967: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39971: LD_ADDR_EXP 131
39975: PUSH
39976: LD_EXP 131
39980: PPUSH
39981: LD_VAR 0 5
39985: PUSH
39986: LD_EXP 131
39990: PUSH
39991: LD_VAR 0 5
39995: ARRAY
39996: PUSH
39997: LD_INT 1
39999: PLUS
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PPUSH
40005: LD_VAR 0 2
40009: PUSH
40010: LD_VAR 0 3
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PPUSH
40019: CALL 47219 0 3
40023: ST_TO_ADDR
// result := true ;
40024: LD_ADDR_VAR 0 4
40028: PUSH
40029: LD_INT 1
40031: ST_TO_ADDR
// end ;
40032: LD_VAR 0 4
40036: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40037: LD_INT 0
40039: PPUSH
40040: PPUSH
40041: PPUSH
// if not unit in minersList then
40042: LD_VAR 0 1
40046: PUSH
40047: LD_EXP 130
40051: IN
40052: NOT
40053: IFFALSE 40057
// exit ;
40055: GO 40451
// index := GetElementIndex ( minersList , unit ) ;
40057: LD_ADDR_VAR 0 6
40061: PUSH
40062: LD_EXP 130
40066: PPUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: CALL 47002 0 2
40076: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40077: LD_ADDR_VAR 0 5
40081: PUSH
40082: DOUBLE
40083: LD_EXP 131
40087: PUSH
40088: LD_VAR 0 6
40092: ARRAY
40093: INC
40094: ST_TO_ADDR
40095: LD_INT 1
40097: PUSH
40098: FOR_DOWNTO
40099: IFFALSE 40262
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40101: LD_EXP 131
40105: PUSH
40106: LD_VAR 0 6
40110: ARRAY
40111: PUSH
40112: LD_VAR 0 5
40116: ARRAY
40117: PUSH
40118: LD_INT 1
40120: ARRAY
40121: PUSH
40122: LD_VAR 0 2
40126: EQUAL
40127: IFFALSE 40157
40129: PUSH
40130: LD_EXP 131
40134: PUSH
40135: LD_VAR 0 6
40139: ARRAY
40140: PUSH
40141: LD_VAR 0 5
40145: ARRAY
40146: PUSH
40147: LD_INT 2
40149: ARRAY
40150: PUSH
40151: LD_VAR 0 3
40155: EQUAL
40156: AND
40157: IFFALSE 40260
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40159: LD_EXP 131
40163: PUSH
40164: LD_VAR 0 6
40168: ARRAY
40169: PUSH
40170: LD_VAR 0 5
40174: ARRAY
40175: PUSH
40176: LD_INT 1
40178: ARRAY
40179: PPUSH
40180: LD_EXP 131
40184: PUSH
40185: LD_VAR 0 6
40189: ARRAY
40190: PUSH
40191: LD_VAR 0 5
40195: ARRAY
40196: PUSH
40197: LD_INT 2
40199: ARRAY
40200: PPUSH
40201: LD_VAR 0 1
40205: PPUSH
40206: CALL_OW 255
40210: PPUSH
40211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40215: LD_ADDR_EXP 131
40219: PUSH
40220: LD_EXP 131
40224: PPUSH
40225: LD_VAR 0 6
40229: PPUSH
40230: LD_EXP 131
40234: PUSH
40235: LD_VAR 0 6
40239: ARRAY
40240: PPUSH
40241: LD_VAR 0 5
40245: PPUSH
40246: CALL_OW 3
40250: PPUSH
40251: CALL_OW 1
40255: ST_TO_ADDR
// exit ;
40256: POP
40257: POP
40258: GO 40451
// end ; end ;
40260: GO 40098
40262: POP
40263: POP
// for i := minerMinesList [ index ] downto 1 do
40264: LD_ADDR_VAR 0 5
40268: PUSH
40269: DOUBLE
40270: LD_EXP 131
40274: PUSH
40275: LD_VAR 0 6
40279: ARRAY
40280: INC
40281: ST_TO_ADDR
40282: LD_INT 1
40284: PUSH
40285: FOR_DOWNTO
40286: IFFALSE 40449
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40288: LD_EXP 131
40292: PUSH
40293: LD_VAR 0 6
40297: ARRAY
40298: PUSH
40299: LD_VAR 0 5
40303: ARRAY
40304: PUSH
40305: LD_INT 1
40307: ARRAY
40308: PPUSH
40309: LD_EXP 131
40313: PUSH
40314: LD_VAR 0 6
40318: ARRAY
40319: PUSH
40320: LD_VAR 0 5
40324: ARRAY
40325: PUSH
40326: LD_INT 2
40328: ARRAY
40329: PPUSH
40330: LD_VAR 0 2
40334: PPUSH
40335: LD_VAR 0 3
40339: PPUSH
40340: CALL_OW 298
40344: PUSH
40345: LD_INT 6
40347: LESS
40348: IFFALSE 40447
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40350: LD_EXP 131
40354: PUSH
40355: LD_VAR 0 6
40359: ARRAY
40360: PUSH
40361: LD_VAR 0 5
40365: ARRAY
40366: PUSH
40367: LD_INT 1
40369: ARRAY
40370: PPUSH
40371: LD_EXP 131
40375: PUSH
40376: LD_VAR 0 6
40380: ARRAY
40381: PUSH
40382: LD_VAR 0 5
40386: ARRAY
40387: PUSH
40388: LD_INT 2
40390: ARRAY
40391: PPUSH
40392: LD_VAR 0 1
40396: PPUSH
40397: CALL_OW 255
40401: PPUSH
40402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40406: LD_ADDR_EXP 131
40410: PUSH
40411: LD_EXP 131
40415: PPUSH
40416: LD_VAR 0 6
40420: PPUSH
40421: LD_EXP 131
40425: PUSH
40426: LD_VAR 0 6
40430: ARRAY
40431: PPUSH
40432: LD_VAR 0 5
40436: PPUSH
40437: CALL_OW 3
40441: PPUSH
40442: CALL_OW 1
40446: ST_TO_ADDR
// end ; end ;
40447: GO 40285
40449: POP
40450: POP
// end ;
40451: LD_VAR 0 4
40455: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40456: LD_INT 0
40458: PPUSH
40459: PPUSH
40460: PPUSH
40461: PPUSH
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
40466: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40467: LD_VAR 0 1
40471: PPUSH
40472: CALL_OW 264
40476: PUSH
40477: LD_INT 81
40479: EQUAL
40480: NOT
40481: IFTRUE 40496
40483: PUSH
40484: LD_VAR 0 1
40488: PUSH
40489: LD_EXP 130
40493: IN
40494: NOT
40495: OR
40496: IFFALSE 40500
// exit ;
40498: GO 40826
// index := GetElementIndex ( minersList , unit ) ;
40500: LD_ADDR_VAR 0 6
40504: PUSH
40505: LD_EXP 130
40509: PPUSH
40510: LD_VAR 0 1
40514: PPUSH
40515: CALL 47002 0 2
40519: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40520: LD_ADDR_VAR 0 8
40524: PUSH
40525: LD_EXP 132
40529: PUSH
40530: LD_EXP 131
40534: PUSH
40535: LD_VAR 0 6
40539: ARRAY
40540: MINUS
40541: ST_TO_ADDR
// if not minesFreeAmount then
40542: LD_VAR 0 8
40546: NOT
40547: IFFALSE 40551
// exit ;
40549: GO 40826
// tmp := [ ] ;
40551: LD_ADDR_VAR 0 7
40555: PUSH
40556: EMPTY
40557: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40558: LD_ADDR_VAR 0 5
40562: PUSH
40563: DOUBLE
40564: LD_INT 1
40566: DEC
40567: ST_TO_ADDR
40568: LD_VAR 0 8
40572: PUSH
40573: FOR_TO
40574: IFFALSE 40773
// begin _d := rand ( 0 , 5 ) ;
40576: LD_ADDR_VAR 0 11
40580: PUSH
40581: LD_INT 0
40583: PPUSH
40584: LD_INT 5
40586: PPUSH
40587: CALL_OW 12
40591: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40592: LD_ADDR_VAR 0 12
40596: PUSH
40597: LD_INT 2
40599: PPUSH
40600: LD_INT 6
40602: PPUSH
40603: CALL_OW 12
40607: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40608: LD_ADDR_VAR 0 9
40612: PUSH
40613: LD_VAR 0 2
40617: PPUSH
40618: LD_VAR 0 11
40622: PPUSH
40623: LD_VAR 0 12
40627: PPUSH
40628: CALL_OW 272
40632: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40633: LD_ADDR_VAR 0 10
40637: PUSH
40638: LD_VAR 0 3
40642: PPUSH
40643: LD_VAR 0 11
40647: PPUSH
40648: LD_VAR 0 12
40652: PPUSH
40653: CALL_OW 273
40657: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40658: LD_VAR 0 9
40662: PPUSH
40663: LD_VAR 0 10
40667: PPUSH
40668: CALL_OW 488
40672: IFFALSE 40696
40674: PUSH
40675: LD_VAR 0 9
40679: PUSH
40680: LD_VAR 0 10
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_VAR 0 7
40693: IN
40694: NOT
40695: AND
40696: IFFALSE 40715
40698: PUSH
40699: LD_VAR 0 9
40703: PPUSH
40704: LD_VAR 0 10
40708: PPUSH
40709: CALL_OW 458
40713: NOT
40714: AND
40715: IFFALSE 40757
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40717: LD_ADDR_VAR 0 7
40721: PUSH
40722: LD_VAR 0 7
40726: PPUSH
40727: LD_VAR 0 7
40731: PUSH
40732: LD_INT 1
40734: PLUS
40735: PPUSH
40736: LD_VAR 0 9
40740: PUSH
40741: LD_VAR 0 10
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PPUSH
40750: CALL_OW 1
40754: ST_TO_ADDR
40755: GO 40771
// i := i - 1 ;
40757: LD_ADDR_VAR 0 5
40761: PUSH
40762: LD_VAR 0 5
40766: PUSH
40767: LD_INT 1
40769: MINUS
40770: ST_TO_ADDR
// end ;
40771: GO 40573
40773: POP
40774: POP
// for i in tmp do
40775: LD_ADDR_VAR 0 5
40779: PUSH
40780: LD_VAR 0 7
40784: PUSH
40785: FOR_IN
40786: IFFALSE 40824
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40788: LD_VAR 0 1
40792: PPUSH
40793: LD_VAR 0 5
40797: PUSH
40798: LD_INT 1
40800: ARRAY
40801: PPUSH
40802: LD_VAR 0 5
40806: PUSH
40807: LD_INT 2
40809: ARRAY
40810: PPUSH
40811: CALL 39758 0 3
40815: NOT
40816: IFFALSE 40822
// exit ;
40818: POP
40819: POP
40820: GO 40826
40822: GO 40785
40824: POP
40825: POP
// end ;
40826: LD_VAR 0 4
40830: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40831: LD_INT 0
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
// if GetClass ( unit ) <> class_sniper then
40842: LD_VAR 0 1
40846: PPUSH
40847: CALL_OW 257
40851: PUSH
40852: LD_INT 5
40854: NONEQUAL
40855: IFFALSE 40859
// exit ;
40857: GO 41329
// dist := 8 ;
40859: LD_ADDR_VAR 0 5
40863: PUSH
40864: LD_INT 8
40866: ST_TO_ADDR
// viewRange := 12 ;
40867: LD_ADDR_VAR 0 8
40871: PUSH
40872: LD_INT 12
40874: ST_TO_ADDR
// side := GetSide ( unit ) ;
40875: LD_ADDR_VAR 0 6
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 255
40889: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40890: LD_INT 61
40892: PPUSH
40893: LD_VAR 0 6
40897: PPUSH
40898: CALL_OW 321
40902: PUSH
40903: LD_INT 2
40905: EQUAL
40906: IFFALSE 40916
// viewRange := 16 ;
40908: LD_ADDR_VAR 0 8
40912: PUSH
40913: LD_INT 16
40915: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40916: LD_VAR 0 1
40920: PPUSH
40921: LD_VAR 0 2
40925: PPUSH
40926: LD_VAR 0 3
40930: PPUSH
40931: CALL_OW 297
40935: PUSH
40936: LD_VAR 0 5
40940: GREATER
40941: IFFALSE 41020
// begin ComMoveXY ( unit , x , y ) ;
40943: LD_VAR 0 1
40947: PPUSH
40948: LD_VAR 0 2
40952: PPUSH
40953: LD_VAR 0 3
40957: PPUSH
40958: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40962: LD_INT 35
40964: PPUSH
40965: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40969: LD_VAR 0 1
40973: PPUSH
40974: LD_VAR 0 2
40978: PPUSH
40979: LD_VAR 0 3
40983: PPUSH
40984: CALL 79048 0 3
40988: NOT
40989: IFFALSE 40993
// exit ;
40991: GO 41329
// until GetDistUnitXY ( unit , x , y ) < dist ;
40993: LD_VAR 0 1
40997: PPUSH
40998: LD_VAR 0 2
41002: PPUSH
41003: LD_VAR 0 3
41007: PPUSH
41008: CALL_OW 297
41012: PUSH
41013: LD_VAR 0 5
41017: LESS
41018: IFFALSE 40962
// end ; ComTurnXY ( unit , x , y ) ;
41020: LD_VAR 0 1
41024: PPUSH
41025: LD_VAR 0 2
41029: PPUSH
41030: LD_VAR 0 3
41034: PPUSH
41035: CALL_OW 118
// repeat if Multiplayer then
41039: LD_OWVAR 4
41043: IFFALSE 41054
// wait ( 35 ) else
41045: LD_INT 35
41047: PPUSH
41048: CALL_OW 67
41052: GO 41061
// wait ( 5 ) ;
41054: LD_INT 5
41056: PPUSH
41057: CALL_OW 67
// _d := GetDir ( unit ) ;
41061: LD_ADDR_VAR 0 11
41065: PUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: CALL_OW 254
41075: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41076: LD_ADDR_VAR 0 7
41080: PUSH
41081: LD_VAR 0 1
41085: PPUSH
41086: CALL_OW 250
41090: PPUSH
41091: LD_VAR 0 1
41095: PPUSH
41096: CALL_OW 251
41100: PPUSH
41101: LD_VAR 0 2
41105: PPUSH
41106: LD_VAR 0 3
41110: PPUSH
41111: CALL 81684 0 4
41115: ST_TO_ADDR
// until dir = _d ;
41116: LD_VAR 0 7
41120: PUSH
41121: LD_VAR 0 11
41125: EQUAL
41126: IFFALSE 41039
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41128: LD_ADDR_VAR 0 9
41132: PUSH
41133: LD_VAR 0 1
41137: PPUSH
41138: CALL_OW 250
41142: PPUSH
41143: LD_VAR 0 7
41147: PPUSH
41148: LD_VAR 0 5
41152: PPUSH
41153: CALL_OW 272
41157: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41158: LD_ADDR_VAR 0 10
41162: PUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 251
41172: PPUSH
41173: LD_VAR 0 7
41177: PPUSH
41178: LD_VAR 0 5
41182: PPUSH
41183: CALL_OW 273
41187: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41188: LD_VAR 0 9
41192: PPUSH
41193: LD_VAR 0 10
41197: PPUSH
41198: CALL_OW 488
41202: NOT
41203: IFFALSE 41207
// exit ;
41205: GO 41329
// ComAnimCustom ( unit , 1 ) ;
41207: LD_VAR 0 1
41211: PPUSH
41212: LD_INT 1
41214: PPUSH
41215: CALL_OW 592
// p := 0 ;
41219: LD_ADDR_VAR 0 12
41223: PUSH
41224: LD_INT 0
41226: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41227: LD_VAR 0 9
41231: PPUSH
41232: LD_VAR 0 10
41236: PPUSH
41237: LD_VAR 0 6
41241: PPUSH
41242: LD_VAR 0 8
41246: PPUSH
41247: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41251: LD_INT 35
41253: PPUSH
41254: CALL_OW 67
// p := Inc ( p ) ;
41258: LD_ADDR_VAR 0 12
41262: PUSH
41263: LD_VAR 0 12
41267: PPUSH
41268: CALL 81640 0 1
41272: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41273: LD_VAR 0 12
41277: PUSH
41278: LD_INT 3
41280: EQUAL
41281: IFTRUE 41295
41283: PUSH
41284: LD_VAR 0 1
41288: PPUSH
41289: CALL_OW 302
41293: NOT
41294: OR
41295: IFTRUE 41308
41297: PUSH
41298: LD_VAR 0 1
41302: PPUSH
41303: CALL_OW 301
41307: OR
41308: IFFALSE 41251
// RemoveSeeing ( _x , _y , side ) ;
41310: LD_VAR 0 9
41314: PPUSH
41315: LD_VAR 0 10
41319: PPUSH
41320: LD_VAR 0 6
41324: PPUSH
41325: CALL_OW 331
// end ;
41329: LD_VAR 0 4
41333: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
41334: LD_INT 0
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
// if not unit then
41347: LD_VAR 0 1
41351: NOT
41352: IFFALSE 41356
// exit ;
41354: GO 41627
// side := GetSide ( unit ) ;
41356: LD_ADDR_VAR 0 3
41360: PUSH
41361: LD_VAR 0 1
41365: PPUSH
41366: CALL_OW 255
41370: ST_TO_ADDR
// x := GetX ( unit ) ;
41371: LD_ADDR_VAR 0 5
41375: PUSH
41376: LD_VAR 0 1
41380: PPUSH
41381: CALL_OW 250
41385: ST_TO_ADDR
// y := GetY ( unit ) ;
41386: LD_ADDR_VAR 0 6
41390: PUSH
41391: LD_VAR 0 1
41395: PPUSH
41396: CALL_OW 251
41400: ST_TO_ADDR
// r := 8 ;
41401: LD_ADDR_VAR 0 4
41405: PUSH
41406: LD_INT 8
41408: ST_TO_ADDR
// if x - r < 0 then
41409: LD_VAR 0 5
41413: PUSH
41414: LD_VAR 0 4
41418: MINUS
41419: PUSH
41420: LD_INT 0
41422: LESS
41423: IFFALSE 41435
// min_x := 0 else
41425: LD_ADDR_VAR 0 7
41429: PUSH
41430: LD_INT 0
41432: ST_TO_ADDR
41433: GO 41451
// min_x := x - r ;
41435: LD_ADDR_VAR 0 7
41439: PUSH
41440: LD_VAR 0 5
41444: PUSH
41445: LD_VAR 0 4
41449: MINUS
41450: ST_TO_ADDR
// if y - r < 0 then
41451: LD_VAR 0 6
41455: PUSH
41456: LD_VAR 0 4
41460: MINUS
41461: PUSH
41462: LD_INT 0
41464: LESS
41465: IFFALSE 41477
// min_y := 0 else
41467: LD_ADDR_VAR 0 8
41471: PUSH
41472: LD_INT 0
41474: ST_TO_ADDR
41475: GO 41493
// min_y := y - r ;
41477: LD_ADDR_VAR 0 8
41481: PUSH
41482: LD_VAR 0 6
41486: PUSH
41487: LD_VAR 0 4
41491: MINUS
41492: ST_TO_ADDR
// max_x := x + r ;
41493: LD_ADDR_VAR 0 9
41497: PUSH
41498: LD_VAR 0 5
41502: PUSH
41503: LD_VAR 0 4
41507: PLUS
41508: ST_TO_ADDR
// max_y := y + r ;
41509: LD_ADDR_VAR 0 10
41513: PUSH
41514: LD_VAR 0 6
41518: PUSH
41519: LD_VAR 0 4
41523: PLUS
41524: ST_TO_ADDR
// for _x = min_x to max_x do
41525: LD_ADDR_VAR 0 11
41529: PUSH
41530: DOUBLE
41531: LD_VAR 0 7
41535: DEC
41536: ST_TO_ADDR
41537: LD_VAR 0 9
41541: PUSH
41542: FOR_TO
41543: IFFALSE 41625
// for _y = min_y to max_y do
41545: LD_ADDR_VAR 0 12
41549: PUSH
41550: DOUBLE
41551: LD_VAR 0 8
41555: DEC
41556: ST_TO_ADDR
41557: LD_VAR 0 10
41561: PUSH
41562: FOR_TO
41563: IFFALSE 41621
// begin if not ValidHex ( _x , _y ) then
41565: LD_VAR 0 11
41569: PPUSH
41570: LD_VAR 0 12
41574: PPUSH
41575: CALL_OW 488
41579: NOT
41580: IFFALSE 41584
// continue ;
41582: GO 41562
// if MineAtPos ( _x , _y ) then
41584: LD_VAR 0 11
41588: PPUSH
41589: LD_VAR 0 12
41593: PPUSH
41594: CALL_OW 458
41598: IFFALSE 41619
// ViewMineAtPos ( _x , _y , side ) ;
41600: LD_VAR 0 11
41604: PPUSH
41605: LD_VAR 0 12
41609: PPUSH
41610: LD_VAR 0 3
41614: PPUSH
41615: CALL_OW 457
// end ;
41619: GO 41562
41621: POP
41622: POP
41623: GO 41542
41625: POP
41626: POP
// end ;
41627: LD_VAR 0 2
41631: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
41632: LD_INT 0
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
// if not units then
41640: LD_VAR 0 1
41644: NOT
41645: IFFALSE 41649
// exit ;
41647: GO 42079
// scaners := [ ] ;
41649: LD_ADDR_VAR 0 6
41653: PUSH
41654: EMPTY
41655: ST_TO_ADDR
// for i in units do
41656: LD_ADDR_VAR 0 3
41660: PUSH
41661: LD_VAR 0 1
41665: PUSH
41666: FOR_IN
41667: IFFALSE 41824
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
41669: LD_VAR 0 3
41673: PPUSH
41674: CALL_OW 264
41678: PUSH
41679: LD_INT 11
41681: NONEQUAL
41682: IFTRUE 41696
41684: PUSH
41685: LD_VAR 0 3
41689: PPUSH
41690: CALL_OW 302
41694: NOT
41695: OR
41696: IFTRUE 41713
41698: PUSH
41699: LD_VAR 0 3
41703: PPUSH
41704: CALL_OW 110
41708: PUSH
41709: LD_INT 502
41711: EQUAL
41712: OR
41713: IFFALSE 41717
// continue ;
41715: GO 41666
// ComStop ( i ) ;
41717: LD_VAR 0 3
41721: PPUSH
41722: CALL_OW 141
// x := GetX ( i ) ;
41726: LD_ADDR_VAR 0 4
41730: PUSH
41731: LD_VAR 0 3
41735: PPUSH
41736: CALL_OW 250
41740: ST_TO_ADDR
// y := GetY ( i ) ;
41741: LD_ADDR_VAR 0 5
41745: PUSH
41746: LD_VAR 0 3
41750: PPUSH
41751: CALL_OW 251
41755: ST_TO_ADDR
// if GetSide ( i ) = your_side then
41756: LD_VAR 0 3
41760: PPUSH
41761: CALL_OW 255
41765: PUSH
41766: LD_OWVAR 2
41770: EQUAL
41771: IFFALSE 41790
// PlaySoundXY ( x , y , mineDetector ) ;
41773: LD_VAR 0 4
41777: PPUSH
41778: LD_VAR 0 5
41782: PPUSH
41783: LD_STRING mineDetector
41785: PPUSH
41786: CALL_OW 366
// scaners := Join ( scaners , i ) ;
41790: LD_ADDR_VAR 0 6
41794: PUSH
41795: LD_VAR 0 6
41799: PPUSH
41800: LD_VAR 0 3
41804: PPUSH
41805: CALL 80267 0 2
41809: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
41810: LD_VAR 0 3
41814: PPUSH
41815: LD_INT 502
41817: PPUSH
41818: CALL_OW 109
// end ;
41822: GO 41666
41824: POP
41825: POP
// if not scaners then
41826: LD_VAR 0 6
41830: NOT
41831: IFFALSE 41835
// exit ;
41833: GO 42079
// wait ( 3 ) ;
41835: LD_INT 3
41837: PPUSH
41838: CALL_OW 67
// timer := 6 ;
41842: LD_ADDR_VAR 0 7
41846: PUSH
41847: LD_INT 6
41849: ST_TO_ADDR
// repeat for i in scaners do
41850: LD_ADDR_VAR 0 3
41854: PUSH
41855: LD_VAR 0 6
41859: PUSH
41860: FOR_IN
41861: IFFALSE 41977
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
41863: LD_VAR 0 3
41867: PPUSH
41868: CALL_OW 302
41872: NOT
41873: IFTRUE 41886
41875: PUSH
41876: LD_VAR 0 3
41880: PPUSH
41881: CALL_OW 314
41885: OR
41886: IFTRUE 41917
41888: PUSH
41889: LD_VAR 0 3
41893: PPUSH
41894: CALL_OW 263
41898: PUSH
41899: LD_INT 1
41901: EQUAL
41902: IFFALSE 41916
41904: PUSH
41905: LD_VAR 0 3
41909: PPUSH
41910: CALL_OW 311
41914: NOT
41915: AND
41916: OR
41917: IFFALSE 41961
// begin SetUnitDisplayNumber ( i , 0 ) ;
41919: LD_VAR 0 3
41923: PPUSH
41924: LD_INT 0
41926: PPUSH
41927: CALL_OW 505
// SetTag ( i , 0 ) ;
41931: LD_VAR 0 3
41935: PPUSH
41936: LD_INT 0
41938: PPUSH
41939: CALL_OW 109
// scaners := scaners diff i ;
41943: LD_ADDR_VAR 0 6
41947: PUSH
41948: LD_VAR 0 6
41952: PUSH
41953: LD_VAR 0 3
41957: DIFF
41958: ST_TO_ADDR
// continue ;
41959: GO 41860
// end ; SetUnitDisplayNumber ( i , timer ) ;
41961: LD_VAR 0 3
41965: PPUSH
41966: LD_VAR 0 7
41970: PPUSH
41971: CALL_OW 505
// end ;
41975: GO 41860
41977: POP
41978: POP
// if not scaners then
41979: LD_VAR 0 6
41983: NOT
41984: IFFALSE 41988
// exit ;
41986: GO 42079
// timer := Dec ( timer ) ;
41988: LD_ADDR_VAR 0 7
41992: PUSH
41993: LD_VAR 0 7
41997: PPUSH
41998: CALL 81662 0 1
42002: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42003: LD_INT 35
42005: PPUSH
42006: CALL_OW 67
// until timer = 0 ;
42010: LD_VAR 0 7
42014: PUSH
42015: LD_INT 0
42017: EQUAL
42018: IFFALSE 41850
// if not scaners then
42020: LD_VAR 0 6
42024: NOT
42025: IFFALSE 42029
// exit ;
42027: GO 42079
// for i in scaners do
42029: LD_ADDR_VAR 0 3
42033: PUSH
42034: LD_VAR 0 6
42038: PUSH
42039: FOR_IN
42040: IFFALSE 42077
// begin SetUnitDisplayNumber ( i , 0 ) ;
42042: LD_VAR 0 3
42046: PPUSH
42047: LD_INT 0
42049: PPUSH
42050: CALL_OW 505
// SetTag ( i , 0 ) ;
42054: LD_VAR 0 3
42058: PPUSH
42059: LD_INT 0
42061: PPUSH
42062: CALL_OW 109
// RevealDetectorMine ( i ) ;
42066: LD_VAR 0 3
42070: PPUSH
42071: CALL 41334 0 1
// end ;
42075: GO 42039
42077: POP
42078: POP
// end ;
42079: LD_VAR 0 2
42083: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
42084: LD_INT 0
42086: PPUSH
// if p1 = mine_detector_mode then
42087: LD_VAR 0 2
42091: PUSH
42092: LD_INT 103
42094: EQUAL
42095: IFFALSE 42106
// DetectMine ( units ) ;
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL 41632 0 1
// end ; end_of_file
42106: LD_VAR 0 7
42110: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42111: LD_INT 0
42113: PPUSH
42114: PPUSH
// if exist_mode then
42115: LD_VAR 0 2
42119: IFFALSE 42165
// begin unit := CreateCharacter ( prefix & ident ) ;
42121: LD_ADDR_VAR 0 5
42125: PUSH
42126: LD_VAR 0 3
42130: PUSH
42131: LD_VAR 0 1
42135: STR
42136: PPUSH
42137: CALL_OW 34
42141: ST_TO_ADDR
// if unit then
42142: LD_VAR 0 5
42146: IFFALSE 42163
// DeleteCharacters ( prefix & ident ) ;
42148: LD_VAR 0 3
42152: PUSH
42153: LD_VAR 0 1
42157: STR
42158: PPUSH
42159: CALL_OW 40
// end else
42163: GO 42180
// unit := NewCharacter ( ident ) ;
42165: LD_ADDR_VAR 0 5
42169: PUSH
42170: LD_VAR 0 1
42174: PPUSH
42175: CALL_OW 25
42179: ST_TO_ADDR
// result := unit ;
42180: LD_ADDR_VAR 0 4
42184: PUSH
42185: LD_VAR 0 5
42189: ST_TO_ADDR
// end ;
42190: LD_VAR 0 4
42194: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
42195: LD_INT 0
42197: PPUSH
42198: PPUSH
// if exist_mode then
42199: LD_VAR 0 2
42203: IFFALSE 42228
// unit := CreateCharacter ( prefix & ident ) else
42205: LD_ADDR_VAR 0 5
42209: PUSH
42210: LD_VAR 0 3
42214: PUSH
42215: LD_VAR 0 1
42219: STR
42220: PPUSH
42221: CALL_OW 34
42225: ST_TO_ADDR
42226: GO 42243
// unit := NewCharacter ( ident ) ;
42228: LD_ADDR_VAR 0 5
42232: PUSH
42233: LD_VAR 0 1
42237: PPUSH
42238: CALL_OW 25
42242: ST_TO_ADDR
// result := unit ;
42243: LD_ADDR_VAR 0 4
42247: PUSH
42248: LD_VAR 0 5
42252: ST_TO_ADDR
// end ;
42253: LD_VAR 0 4
42257: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42258: LD_INT 0
42260: PPUSH
42261: PPUSH
// if not side or not nation then
42262: LD_VAR 0 1
42266: NOT
42267: IFTRUE 42276
42269: PUSH
42270: LD_VAR 0 2
42274: NOT
42275: OR
42276: IFFALSE 42280
// exit ;
42278: GO 43074
// case nation of nation_american :
42280: LD_VAR 0 2
42284: PUSH
42285: LD_INT 1
42287: DOUBLE
42288: EQUAL
42289: IFTRUE 42293
42291: GO 42515
42293: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
42294: LD_ADDR_VAR 0 4
42298: PUSH
42299: LD_INT 35
42301: PUSH
42302: LD_INT 45
42304: PUSH
42305: LD_INT 46
42307: PUSH
42308: LD_INT 47
42310: PUSH
42311: LD_INT 82
42313: PUSH
42314: LD_INT 83
42316: PUSH
42317: LD_INT 84
42319: PUSH
42320: LD_INT 85
42322: PUSH
42323: LD_INT 86
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 6
42334: PUSH
42335: LD_INT 15
42337: PUSH
42338: LD_INT 16
42340: PUSH
42341: LD_INT 7
42343: PUSH
42344: LD_INT 12
42346: PUSH
42347: LD_INT 13
42349: PUSH
42350: LD_INT 10
42352: PUSH
42353: LD_INT 14
42355: PUSH
42356: LD_INT 20
42358: PUSH
42359: LD_INT 21
42361: PUSH
42362: LD_INT 22
42364: PUSH
42365: LD_INT 25
42367: PUSH
42368: LD_INT 32
42370: PUSH
42371: LD_INT 27
42373: PUSH
42374: LD_INT 36
42376: PUSH
42377: LD_INT 69
42379: PUSH
42380: LD_INT 39
42382: PUSH
42383: LD_INT 34
42385: PUSH
42386: LD_INT 40
42388: PUSH
42389: LD_INT 48
42391: PUSH
42392: LD_INT 49
42394: PUSH
42395: LD_INT 50
42397: PUSH
42398: LD_INT 51
42400: PUSH
42401: LD_INT 52
42403: PUSH
42404: LD_INT 53
42406: PUSH
42407: LD_INT 54
42409: PUSH
42410: LD_INT 55
42412: PUSH
42413: LD_INT 56
42415: PUSH
42416: LD_INT 57
42418: PUSH
42419: LD_INT 58
42421: PUSH
42422: LD_INT 59
42424: PUSH
42425: LD_INT 60
42427: PUSH
42428: LD_INT 61
42430: PUSH
42431: LD_INT 62
42433: PUSH
42434: LD_INT 80
42436: PUSH
42437: LD_INT 82
42439: PUSH
42440: LD_INT 83
42442: PUSH
42443: LD_INT 84
42445: PUSH
42446: LD_INT 85
42448: PUSH
42449: LD_INT 86
42451: PUSH
42452: LD_INT 90
42454: PUSH
42455: LD_INT 93
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
42513: GO 42996
42515: LD_INT 2
42517: DOUBLE
42518: EQUAL
42519: IFTRUE 42523
42521: GO 42757
42523: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
42524: LD_ADDR_VAR 0 4
42528: PUSH
42529: LD_INT 35
42531: PUSH
42532: LD_INT 45
42534: PUSH
42535: LD_INT 46
42537: PUSH
42538: LD_INT 47
42540: PUSH
42541: LD_INT 82
42543: PUSH
42544: LD_INT 83
42546: PUSH
42547: LD_INT 84
42549: PUSH
42550: LD_INT 85
42552: PUSH
42553: LD_INT 87
42555: PUSH
42556: LD_INT 70
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: LD_INT 11
42564: PUSH
42565: LD_INT 3
42567: PUSH
42568: LD_INT 4
42570: PUSH
42571: LD_INT 5
42573: PUSH
42574: LD_INT 6
42576: PUSH
42577: LD_INT 15
42579: PUSH
42580: LD_INT 18
42582: PUSH
42583: LD_INT 7
42585: PUSH
42586: LD_INT 17
42588: PUSH
42589: LD_INT 8
42591: PUSH
42592: LD_INT 20
42594: PUSH
42595: LD_INT 21
42597: PUSH
42598: LD_INT 22
42600: PUSH
42601: LD_INT 72
42603: PUSH
42604: LD_INT 26
42606: PUSH
42607: LD_INT 69
42609: PUSH
42610: LD_INT 39
42612: PUSH
42613: LD_INT 40
42615: PUSH
42616: LD_INT 41
42618: PUSH
42619: LD_INT 42
42621: PUSH
42622: LD_INT 43
42624: PUSH
42625: LD_INT 48
42627: PUSH
42628: LD_INT 49
42630: PUSH
42631: LD_INT 50
42633: PUSH
42634: LD_INT 51
42636: PUSH
42637: LD_INT 52
42639: PUSH
42640: LD_INT 53
42642: PUSH
42643: LD_INT 54
42645: PUSH
42646: LD_INT 55
42648: PUSH
42649: LD_INT 56
42651: PUSH
42652: LD_INT 60
42654: PUSH
42655: LD_INT 61
42657: PUSH
42658: LD_INT 62
42660: PUSH
42661: LD_INT 66
42663: PUSH
42664: LD_INT 67
42666: PUSH
42667: LD_INT 68
42669: PUSH
42670: LD_INT 81
42672: PUSH
42673: LD_INT 82
42675: PUSH
42676: LD_INT 83
42678: PUSH
42679: LD_INT 84
42681: PUSH
42682: LD_INT 85
42684: PUSH
42685: LD_INT 87
42687: PUSH
42688: LD_INT 88
42690: PUSH
42691: LD_INT 92
42693: PUSH
42694: LD_INT 94
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: ST_TO_ADDR
42755: GO 42996
42757: LD_INT 3
42759: DOUBLE
42760: EQUAL
42761: IFTRUE 42765
42763: GO 42995
42765: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
42766: LD_ADDR_VAR 0 4
42770: PUSH
42771: LD_INT 46
42773: PUSH
42774: LD_INT 47
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 82
42785: PUSH
42786: LD_INT 83
42788: PUSH
42789: LD_INT 84
42791: PUSH
42792: LD_INT 85
42794: PUSH
42795: LD_INT 86
42797: PUSH
42798: LD_INT 11
42800: PUSH
42801: LD_INT 9
42803: PUSH
42804: LD_INT 20
42806: PUSH
42807: LD_INT 19
42809: PUSH
42810: LD_INT 21
42812: PUSH
42813: LD_INT 24
42815: PUSH
42816: LD_INT 22
42818: PUSH
42819: LD_INT 25
42821: PUSH
42822: LD_INT 28
42824: PUSH
42825: LD_INT 29
42827: PUSH
42828: LD_INT 30
42830: PUSH
42831: LD_INT 31
42833: PUSH
42834: LD_INT 37
42836: PUSH
42837: LD_INT 38
42839: PUSH
42840: LD_INT 32
42842: PUSH
42843: LD_INT 27
42845: PUSH
42846: LD_INT 33
42848: PUSH
42849: LD_INT 69
42851: PUSH
42852: LD_INT 39
42854: PUSH
42855: LD_INT 34
42857: PUSH
42858: LD_INT 40
42860: PUSH
42861: LD_INT 71
42863: PUSH
42864: LD_INT 23
42866: PUSH
42867: LD_INT 44
42869: PUSH
42870: LD_INT 48
42872: PUSH
42873: LD_INT 49
42875: PUSH
42876: LD_INT 50
42878: PUSH
42879: LD_INT 51
42881: PUSH
42882: LD_INT 52
42884: PUSH
42885: LD_INT 53
42887: PUSH
42888: LD_INT 54
42890: PUSH
42891: LD_INT 55
42893: PUSH
42894: LD_INT 56
42896: PUSH
42897: LD_INT 57
42899: PUSH
42900: LD_INT 58
42902: PUSH
42903: LD_INT 59
42905: PUSH
42906: LD_INT 63
42908: PUSH
42909: LD_INT 64
42911: PUSH
42912: LD_INT 65
42914: PUSH
42915: LD_INT 82
42917: PUSH
42918: LD_INT 83
42920: PUSH
42921: LD_INT 84
42923: PUSH
42924: LD_INT 85
42926: PUSH
42927: LD_INT 86
42929: PUSH
42930: LD_INT 89
42932: PUSH
42933: LD_INT 91
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: ST_TO_ADDR
42993: GO 42996
42995: POP
// if state > - 1 and state < 3 then
42996: LD_VAR 0 3
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: GREATER
43005: IFFALSE 43017
43007: PUSH
43008: LD_VAR 0 3
43012: PUSH
43013: LD_INT 3
43015: LESS
43016: AND
43017: IFFALSE 43074
// for i in result do
43019: LD_ADDR_VAR 0 5
43023: PUSH
43024: LD_VAR 0 4
43028: PUSH
43029: FOR_IN
43030: IFFALSE 43072
// if GetTech ( i , side ) <> state then
43032: LD_VAR 0 5
43036: PPUSH
43037: LD_VAR 0 1
43041: PPUSH
43042: CALL_OW 321
43046: PUSH
43047: LD_VAR 0 3
43051: NONEQUAL
43052: IFFALSE 43070
// result := result diff i ;
43054: LD_ADDR_VAR 0 4
43058: PUSH
43059: LD_VAR 0 4
43063: PUSH
43064: LD_VAR 0 5
43068: DIFF
43069: ST_TO_ADDR
43070: GO 43029
43072: POP
43073: POP
// end ;
43074: LD_VAR 0 4
43078: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43079: LD_INT 0
43081: PPUSH
43082: PPUSH
43083: PPUSH
// result := true ;
43084: LD_ADDR_VAR 0 3
43088: PUSH
43089: LD_INT 1
43091: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43092: LD_ADDR_VAR 0 5
43096: PUSH
43097: LD_VAR 0 2
43101: PPUSH
43102: CALL_OW 480
43106: ST_TO_ADDR
// if not tmp then
43107: LD_VAR 0 5
43111: NOT
43112: IFFALSE 43116
// exit ;
43114: GO 43165
// for i in tmp do
43116: LD_ADDR_VAR 0 4
43120: PUSH
43121: LD_VAR 0 5
43125: PUSH
43126: FOR_IN
43127: IFFALSE 43163
// if GetTech ( i , side ) <> state_researched then
43129: LD_VAR 0 4
43133: PPUSH
43134: LD_VAR 0 1
43138: PPUSH
43139: CALL_OW 321
43143: PUSH
43144: LD_INT 2
43146: NONEQUAL
43147: IFFALSE 43161
// begin result := false ;
43149: LD_ADDR_VAR 0 3
43153: PUSH
43154: LD_INT 0
43156: ST_TO_ADDR
// exit ;
43157: POP
43158: POP
43159: GO 43165
// end ;
43161: GO 43126
43163: POP
43164: POP
// end ;
43165: LD_VAR 0 3
43169: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43170: LD_INT 0
43172: PPUSH
43173: PPUSH
43174: PPUSH
43175: PPUSH
43176: PPUSH
43177: PPUSH
43178: PPUSH
43179: PPUSH
43180: PPUSH
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43185: LD_VAR 0 1
43189: NOT
43190: IFTRUE 43207
43192: PUSH
43193: LD_VAR 0 1
43197: PPUSH
43198: CALL_OW 257
43202: PUSH
43203: LD_INT 9
43205: NONEQUAL
43206: OR
43207: IFFALSE 43211
// exit ;
43209: GO 43790
// side := GetSide ( unit ) ;
43211: LD_ADDR_VAR 0 9
43215: PUSH
43216: LD_VAR 0 1
43220: PPUSH
43221: CALL_OW 255
43225: ST_TO_ADDR
// tech_space := tech_spacanom ;
43226: LD_ADDR_VAR 0 12
43230: PUSH
43231: LD_INT 29
43233: ST_TO_ADDR
// tech_time := tech_taurad ;
43234: LD_ADDR_VAR 0 13
43238: PUSH
43239: LD_INT 28
43241: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43242: LD_ADDR_VAR 0 11
43246: PUSH
43247: LD_VAR 0 1
43251: PPUSH
43252: CALL_OW 310
43256: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43257: LD_VAR 0 11
43261: PPUSH
43262: CALL_OW 247
43266: PUSH
43267: LD_INT 2
43269: EQUAL
43270: IFFALSE 43274
// exit ;
43272: GO 43790
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43274: LD_ADDR_VAR 0 8
43278: PUSH
43279: LD_INT 81
43281: PUSH
43282: LD_VAR 0 9
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 3
43293: PUSH
43294: LD_INT 21
43296: PUSH
43297: LD_INT 3
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PPUSH
43312: CALL_OW 69
43316: ST_TO_ADDR
// if not tmp then
43317: LD_VAR 0 8
43321: NOT
43322: IFFALSE 43326
// exit ;
43324: GO 43790
// if in_unit then
43326: LD_VAR 0 11
43330: IFFALSE 43354
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43332: LD_ADDR_VAR 0 10
43336: PUSH
43337: LD_VAR 0 8
43341: PPUSH
43342: LD_VAR 0 11
43346: PPUSH
43347: CALL_OW 74
43351: ST_TO_ADDR
43352: GO 43374
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43354: LD_ADDR_VAR 0 10
43358: PUSH
43359: LD_VAR 0 8
43363: PPUSH
43364: LD_VAR 0 1
43368: PPUSH
43369: CALL_OW 74
43373: ST_TO_ADDR
// if not enemy then
43374: LD_VAR 0 10
43378: NOT
43379: IFFALSE 43383
// exit ;
43381: GO 43790
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43383: LD_VAR 0 11
43387: IFFALSE 43409
43389: PUSH
43390: LD_VAR 0 11
43394: PPUSH
43395: LD_VAR 0 10
43399: PPUSH
43400: CALL_OW 296
43404: PUSH
43405: LD_INT 13
43407: GREATER
43408: AND
43409: IFTRUE 43431
43411: PUSH
43412: LD_VAR 0 1
43416: PPUSH
43417: LD_VAR 0 10
43421: PPUSH
43422: CALL_OW 296
43426: PUSH
43427: LD_INT 12
43429: GREATER
43430: OR
43431: IFFALSE 43435
// exit ;
43433: GO 43790
// missile := [ 1 ] ;
43435: LD_ADDR_VAR 0 14
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43446: LD_VAR 0 9
43450: PPUSH
43451: LD_VAR 0 12
43455: PPUSH
43456: CALL_OW 325
43460: IFFALSE 43489
// missile := Replace ( missile , missile + 1 , 2 ) ;
43462: LD_ADDR_VAR 0 14
43466: PUSH
43467: LD_VAR 0 14
43471: PPUSH
43472: LD_VAR 0 14
43476: PUSH
43477: LD_INT 1
43479: PLUS
43480: PPUSH
43481: LD_INT 2
43483: PPUSH
43484: CALL_OW 1
43488: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43489: LD_VAR 0 9
43493: PPUSH
43494: LD_VAR 0 13
43498: PPUSH
43499: CALL_OW 325
43503: IFFALSE 43527
43505: PUSH
43506: LD_VAR 0 10
43510: PPUSH
43511: CALL_OW 255
43515: PPUSH
43516: LD_VAR 0 13
43520: PPUSH
43521: CALL_OW 325
43525: NOT
43526: AND
43527: IFFALSE 43556
// missile := Replace ( missile , missile + 1 , 3 ) ;
43529: LD_ADDR_VAR 0 14
43533: PUSH
43534: LD_VAR 0 14
43538: PPUSH
43539: LD_VAR 0 14
43543: PUSH
43544: LD_INT 1
43546: PLUS
43547: PPUSH
43548: LD_INT 3
43550: PPUSH
43551: CALL_OW 1
43555: ST_TO_ADDR
// if missile < 2 then
43556: LD_VAR 0 14
43560: PUSH
43561: LD_INT 2
43563: LESS
43564: IFFALSE 43568
// exit ;
43566: GO 43790
// x := GetX ( enemy ) ;
43568: LD_ADDR_VAR 0 4
43572: PUSH
43573: LD_VAR 0 10
43577: PPUSH
43578: CALL_OW 250
43582: ST_TO_ADDR
// y := GetY ( enemy ) ;
43583: LD_ADDR_VAR 0 5
43587: PUSH
43588: LD_VAR 0 10
43592: PPUSH
43593: CALL_OW 251
43597: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43598: LD_ADDR_VAR 0 6
43602: PUSH
43603: LD_VAR 0 4
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PPUSH
43612: LD_INT 1
43614: PPUSH
43615: CALL_OW 12
43619: PLUS
43620: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43621: LD_ADDR_VAR 0 7
43625: PUSH
43626: LD_VAR 0 5
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PPUSH
43635: LD_INT 1
43637: PPUSH
43638: CALL_OW 12
43642: PLUS
43643: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43644: LD_VAR 0 6
43648: PPUSH
43649: LD_VAR 0 7
43653: PPUSH
43654: CALL_OW 488
43658: NOT
43659: IFFALSE 43681
// begin _x := x ;
43661: LD_ADDR_VAR 0 6
43665: PUSH
43666: LD_VAR 0 4
43670: ST_TO_ADDR
// _y := y ;
43671: LD_ADDR_VAR 0 7
43675: PUSH
43676: LD_VAR 0 5
43680: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43681: LD_ADDR_VAR 0 3
43685: PUSH
43686: LD_INT 1
43688: PPUSH
43689: LD_VAR 0 14
43693: PPUSH
43694: CALL_OW 12
43698: ST_TO_ADDR
// case i of 1 :
43699: LD_VAR 0 3
43703: PUSH
43704: LD_INT 1
43706: DOUBLE
43707: EQUAL
43708: IFTRUE 43712
43710: GO 43729
43712: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43713: LD_VAR 0 1
43717: PPUSH
43718: LD_VAR 0 10
43722: PPUSH
43723: CALL_OW 115
43727: GO 43790
43729: LD_INT 2
43731: DOUBLE
43732: EQUAL
43733: IFTRUE 43737
43735: GO 43759
43737: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43738: LD_VAR 0 1
43742: PPUSH
43743: LD_VAR 0 6
43747: PPUSH
43748: LD_VAR 0 7
43752: PPUSH
43753: CALL_OW 153
43757: GO 43790
43759: LD_INT 3
43761: DOUBLE
43762: EQUAL
43763: IFTRUE 43767
43765: GO 43789
43767: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43768: LD_VAR 0 1
43772: PPUSH
43773: LD_VAR 0 6
43777: PPUSH
43778: LD_VAR 0 7
43782: PPUSH
43783: CALL_OW 154
43787: GO 43790
43789: POP
// end ;
43790: LD_VAR 0 2
43794: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43795: LD_INT 0
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
// if not unit or not building then
43803: LD_VAR 0 1
43807: NOT
43808: IFTRUE 43817
43810: PUSH
43811: LD_VAR 0 2
43815: NOT
43816: OR
43817: IFFALSE 43821
// exit ;
43819: GO 43979
// x := GetX ( building ) ;
43821: LD_ADDR_VAR 0 5
43825: PUSH
43826: LD_VAR 0 2
43830: PPUSH
43831: CALL_OW 250
43835: ST_TO_ADDR
// y := GetY ( building ) ;
43836: LD_ADDR_VAR 0 6
43840: PUSH
43841: LD_VAR 0 2
43845: PPUSH
43846: CALL_OW 251
43850: ST_TO_ADDR
// for i := 0 to 5 do
43851: LD_ADDR_VAR 0 4
43855: PUSH
43856: DOUBLE
43857: LD_INT 0
43859: DEC
43860: ST_TO_ADDR
43861: LD_INT 5
43863: PUSH
43864: FOR_TO
43865: IFFALSE 43977
// begin _x := ShiftX ( x , i , 3 ) ;
43867: LD_ADDR_VAR 0 7
43871: PUSH
43872: LD_VAR 0 5
43876: PPUSH
43877: LD_VAR 0 4
43881: PPUSH
43882: LD_INT 3
43884: PPUSH
43885: CALL_OW 272
43889: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43890: LD_ADDR_VAR 0 8
43894: PUSH
43895: LD_VAR 0 6
43899: PPUSH
43900: LD_VAR 0 4
43904: PPUSH
43905: LD_INT 3
43907: PPUSH
43908: CALL_OW 273
43912: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43913: LD_VAR 0 7
43917: PPUSH
43918: LD_VAR 0 8
43922: PPUSH
43923: CALL_OW 488
43927: NOT
43928: IFFALSE 43932
// continue ;
43930: GO 43864
// if HexInfo ( _x , _y ) = 0 then
43932: LD_VAR 0 7
43936: PPUSH
43937: LD_VAR 0 8
43941: PPUSH
43942: CALL_OW 428
43946: PUSH
43947: LD_INT 0
43949: EQUAL
43950: IFFALSE 43975
// begin ComMoveXY ( unit , _x , _y ) ;
43952: LD_VAR 0 1
43956: PPUSH
43957: LD_VAR 0 7
43961: PPUSH
43962: LD_VAR 0 8
43966: PPUSH
43967: CALL_OW 111
// exit ;
43971: POP
43972: POP
43973: GO 43979
// end ; end ;
43975: GO 43864
43977: POP
43978: POP
// end ;
43979: LD_VAR 0 3
43983: RET
// export function ScanBase ( side , base_area ) ; begin
43984: LD_INT 0
43986: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43987: LD_ADDR_VAR 0 3
43991: PUSH
43992: LD_VAR 0 2
43996: PPUSH
43997: LD_INT 81
43999: PUSH
44000: LD_VAR 0 1
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PPUSH
44009: CALL_OW 70
44013: ST_TO_ADDR
// end ;
44014: LD_VAR 0 3
44018: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44019: LD_INT 0
44021: PPUSH
44022: PPUSH
44023: PPUSH
44024: PPUSH
// result := false ;
44025: LD_ADDR_VAR 0 2
44029: PUSH
44030: LD_INT 0
44032: ST_TO_ADDR
// side := GetSide ( unit ) ;
44033: LD_ADDR_VAR 0 3
44037: PUSH
44038: LD_VAR 0 1
44042: PPUSH
44043: CALL_OW 255
44047: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44048: LD_ADDR_VAR 0 4
44052: PUSH
44053: LD_VAR 0 1
44057: PPUSH
44058: CALL_OW 248
44062: ST_TO_ADDR
// case nat of 1 :
44063: LD_VAR 0 4
44067: PUSH
44068: LD_INT 1
44070: DOUBLE
44071: EQUAL
44072: IFTRUE 44076
44074: GO 44087
44076: POP
// tech := tech_lassight ; 2 :
44077: LD_ADDR_VAR 0 5
44081: PUSH
44082: LD_INT 12
44084: ST_TO_ADDR
44085: GO 44126
44087: LD_INT 2
44089: DOUBLE
44090: EQUAL
44091: IFTRUE 44095
44093: GO 44106
44095: POP
// tech := tech_mortar ; 3 :
44096: LD_ADDR_VAR 0 5
44100: PUSH
44101: LD_INT 41
44103: ST_TO_ADDR
44104: GO 44126
44106: LD_INT 3
44108: DOUBLE
44109: EQUAL
44110: IFTRUE 44114
44112: GO 44125
44114: POP
// tech := tech_bazooka ; end ;
44115: LD_ADDR_VAR 0 5
44119: PUSH
44120: LD_INT 44
44122: ST_TO_ADDR
44123: GO 44126
44125: POP
// if Researched ( side , tech ) then
44126: LD_VAR 0 3
44130: PPUSH
44131: LD_VAR 0 5
44135: PPUSH
44136: CALL_OW 325
44140: IFFALSE 44167
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44142: LD_ADDR_VAR 0 2
44146: PUSH
44147: LD_INT 5
44149: PUSH
44150: LD_INT 8
44152: PUSH
44153: LD_INT 9
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: PUSH
44161: LD_VAR 0 4
44165: ARRAY
44166: ST_TO_ADDR
// end ;
44167: LD_VAR 0 2
44171: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44172: LD_INT 0
44174: PPUSH
44175: PPUSH
44176: PPUSH
// if not mines then
44177: LD_VAR 0 2
44181: NOT
44182: IFFALSE 44186
// exit ;
44184: GO 44330
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44186: LD_ADDR_VAR 0 5
44190: PUSH
44191: LD_INT 81
44193: PUSH
44194: LD_VAR 0 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 3
44205: PUSH
44206: LD_INT 21
44208: PUSH
44209: LD_INT 3
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PPUSH
44224: CALL_OW 69
44228: ST_TO_ADDR
// for i in mines do
44229: LD_ADDR_VAR 0 4
44233: PUSH
44234: LD_VAR 0 2
44238: PUSH
44239: FOR_IN
44240: IFFALSE 44328
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44242: LD_VAR 0 4
44246: PUSH
44247: LD_INT 1
44249: ARRAY
44250: PPUSH
44251: LD_VAR 0 4
44255: PUSH
44256: LD_INT 2
44258: ARRAY
44259: PPUSH
44260: CALL_OW 458
44264: NOT
44265: IFFALSE 44269
// continue ;
44267: GO 44239
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44269: LD_VAR 0 4
44273: PUSH
44274: LD_INT 1
44276: ARRAY
44277: PPUSH
44278: LD_VAR 0 4
44282: PUSH
44283: LD_INT 2
44285: ARRAY
44286: PPUSH
44287: CALL_OW 428
44291: PUSH
44292: LD_VAR 0 5
44296: IN
44297: IFFALSE 44326
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44299: LD_VAR 0 4
44303: PUSH
44304: LD_INT 1
44306: ARRAY
44307: PPUSH
44308: LD_VAR 0 4
44312: PUSH
44313: LD_INT 2
44315: ARRAY
44316: PPUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: CALL_OW 456
// end ;
44326: GO 44239
44328: POP
44329: POP
// end ;
44330: LD_VAR 0 3
44334: RET
// export function Count ( array ) ; begin
44335: LD_INT 0
44337: PPUSH
// result := array + 0 ;
44338: LD_ADDR_VAR 0 2
44342: PUSH
44343: LD_VAR 0 1
44347: PUSH
44348: LD_INT 0
44350: PLUS
44351: ST_TO_ADDR
// end ;
44352: LD_VAR 0 2
44356: RET
// export function IsEmpty ( building ) ; begin
44357: LD_INT 0
44359: PPUSH
// if not building then
44360: LD_VAR 0 1
44364: NOT
44365: IFFALSE 44369
// exit ;
44367: GO 44412
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44369: LD_ADDR_VAR 0 2
44373: PUSH
44374: LD_VAR 0 1
44378: PUSH
44379: LD_INT 22
44381: PUSH
44382: LD_VAR 0 1
44386: PPUSH
44387: CALL_OW 255
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 58
44398: PUSH
44399: EMPTY
44400: LIST
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PPUSH
44406: CALL_OW 69
44410: IN
44411: ST_TO_ADDR
// end ;
44412: LD_VAR 0 2
44416: RET
// export function IsNotFull ( building ) ; var places ; begin
44417: LD_INT 0
44419: PPUSH
44420: PPUSH
// if not building then
44421: LD_VAR 0 1
44425: NOT
44426: IFFALSE 44430
// exit ;
44428: GO 44458
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44430: LD_ADDR_VAR 0 2
44434: PUSH
44435: LD_VAR 0 1
44439: PPUSH
44440: LD_INT 3
44442: PUSH
44443: LD_INT 62
44445: PUSH
44446: EMPTY
44447: LIST
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PPUSH
44453: CALL_OW 72
44457: ST_TO_ADDR
// end ;
44458: LD_VAR 0 2
44462: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44463: LD_INT 0
44465: PPUSH
44466: PPUSH
44467: PPUSH
44468: PPUSH
// tmp := [ ] ;
44469: LD_ADDR_VAR 0 3
44473: PUSH
44474: EMPTY
44475: ST_TO_ADDR
// list := [ ] ;
44476: LD_ADDR_VAR 0 5
44480: PUSH
44481: EMPTY
44482: ST_TO_ADDR
// for i = 16 to 25 do
44483: LD_ADDR_VAR 0 4
44487: PUSH
44488: DOUBLE
44489: LD_INT 16
44491: DEC
44492: ST_TO_ADDR
44493: LD_INT 25
44495: PUSH
44496: FOR_TO
44497: IFFALSE 44570
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44499: LD_ADDR_VAR 0 3
44503: PUSH
44504: LD_VAR 0 3
44508: PUSH
44509: LD_INT 22
44511: PUSH
44512: LD_VAR 0 1
44516: PPUSH
44517: CALL_OW 255
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 91
44528: PUSH
44529: LD_VAR 0 1
44533: PUSH
44534: LD_INT 6
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 30
44544: PUSH
44545: LD_VAR 0 4
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: LIST
44558: PUSH
44559: EMPTY
44560: LIST
44561: PPUSH
44562: CALL_OW 69
44566: ADD
44567: ST_TO_ADDR
44568: GO 44496
44570: POP
44571: POP
// for i = 1 to tmp do
44572: LD_ADDR_VAR 0 4
44576: PUSH
44577: DOUBLE
44578: LD_INT 1
44580: DEC
44581: ST_TO_ADDR
44582: LD_VAR 0 3
44586: PUSH
44587: FOR_TO
44588: IFFALSE 44676
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44590: LD_ADDR_VAR 0 5
44594: PUSH
44595: LD_VAR 0 5
44599: PUSH
44600: LD_VAR 0 3
44604: PUSH
44605: LD_VAR 0 4
44609: ARRAY
44610: PPUSH
44611: CALL_OW 266
44615: PUSH
44616: LD_VAR 0 3
44620: PUSH
44621: LD_VAR 0 4
44625: ARRAY
44626: PPUSH
44627: CALL_OW 250
44631: PUSH
44632: LD_VAR 0 3
44636: PUSH
44637: LD_VAR 0 4
44641: ARRAY
44642: PPUSH
44643: CALL_OW 251
44647: PUSH
44648: LD_VAR 0 3
44652: PUSH
44653: LD_VAR 0 4
44657: ARRAY
44658: PPUSH
44659: CALL_OW 254
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: PUSH
44670: EMPTY
44671: LIST
44672: ADD
44673: ST_TO_ADDR
44674: GO 44587
44676: POP
44677: POP
// result := list ;
44678: LD_ADDR_VAR 0 2
44682: PUSH
44683: LD_VAR 0 5
44687: ST_TO_ADDR
// end ;
44688: LD_VAR 0 2
44692: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44693: LD_INT 0
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
// if not factory then
44702: LD_VAR 0 1
44706: NOT
44707: IFFALSE 44711
// exit ;
44709: GO 45314
// if control = control_apeman then
44711: LD_VAR 0 4
44715: PUSH
44716: LD_INT 5
44718: EQUAL
44719: IFFALSE 44828
// begin tmp := UnitsInside ( factory ) ;
44721: LD_ADDR_VAR 0 8
44725: PUSH
44726: LD_VAR 0 1
44730: PPUSH
44731: CALL_OW 313
44735: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44736: LD_VAR 0 8
44740: PPUSH
44741: LD_INT 25
44743: PUSH
44744: LD_INT 12
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PPUSH
44751: CALL_OW 72
44755: NOT
44756: IFFALSE 44766
// control := control_manual ;
44758: LD_ADDR_VAR 0 4
44762: PUSH
44763: LD_INT 1
44765: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44766: LD_ADDR_VAR 0 8
44770: PUSH
44771: LD_VAR 0 1
44775: PPUSH
44776: CALL 44463 0 1
44780: ST_TO_ADDR
// if tmp then
44781: LD_VAR 0 8
44785: IFFALSE 44828
// begin for i in tmp do
44787: LD_ADDR_VAR 0 7
44791: PUSH
44792: LD_VAR 0 8
44796: PUSH
44797: FOR_IN
44798: IFFALSE 44826
// if i [ 1 ] = b_ext_radio then
44800: LD_VAR 0 7
44804: PUSH
44805: LD_INT 1
44807: ARRAY
44808: PUSH
44809: LD_INT 22
44811: EQUAL
44812: IFFALSE 44824
// begin control := control_remote ;
44814: LD_ADDR_VAR 0 4
44818: PUSH
44819: LD_INT 2
44821: ST_TO_ADDR
// break ;
44822: GO 44826
// end ;
44824: GO 44797
44826: POP
44827: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44828: LD_VAR 0 1
44832: PPUSH
44833: LD_VAR 0 2
44837: PPUSH
44838: LD_VAR 0 3
44842: PPUSH
44843: LD_VAR 0 4
44847: PPUSH
44848: LD_VAR 0 5
44852: PPUSH
44853: CALL_OW 448
44857: IFFALSE 44892
// begin result := [ chassis , engine , control , weapon ] ;
44859: LD_ADDR_VAR 0 6
44863: PUSH
44864: LD_VAR 0 2
44868: PUSH
44869: LD_VAR 0 3
44873: PUSH
44874: LD_VAR 0 4
44878: PUSH
44879: LD_VAR 0 5
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: ST_TO_ADDR
// exit ;
44890: GO 45314
// end ; _chassis := AvailableChassisList ( factory ) ;
44892: LD_ADDR_VAR 0 9
44896: PUSH
44897: LD_VAR 0 1
44901: PPUSH
44902: CALL_OW 475
44906: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44907: LD_ADDR_VAR 0 11
44911: PUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: CALL_OW 476
44921: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44922: LD_ADDR_VAR 0 12
44926: PUSH
44927: LD_VAR 0 1
44931: PPUSH
44932: CALL_OW 477
44936: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44937: LD_ADDR_VAR 0 10
44941: PUSH
44942: LD_VAR 0 1
44946: PPUSH
44947: CALL_OW 478
44951: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44952: LD_VAR 0 9
44956: NOT
44957: IFTRUE 44966
44959: PUSH
44960: LD_VAR 0 11
44964: NOT
44965: OR
44966: IFTRUE 44975
44968: PUSH
44969: LD_VAR 0 12
44973: NOT
44974: OR
44975: IFTRUE 44984
44977: PUSH
44978: LD_VAR 0 10
44982: NOT
44983: OR
44984: IFFALSE 45019
// begin result := [ chassis , engine , control , weapon ] ;
44986: LD_ADDR_VAR 0 6
44990: PUSH
44991: LD_VAR 0 2
44995: PUSH
44996: LD_VAR 0 3
45000: PUSH
45001: LD_VAR 0 4
45005: PUSH
45006: LD_VAR 0 5
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// exit ;
45017: GO 45314
// end ; if not chassis in _chassis then
45019: LD_VAR 0 2
45023: PUSH
45024: LD_VAR 0 9
45028: IN
45029: NOT
45030: IFFALSE 45056
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45032: LD_ADDR_VAR 0 2
45036: PUSH
45037: LD_VAR 0 9
45041: PUSH
45042: LD_INT 1
45044: PPUSH
45045: LD_VAR 0 9
45049: PPUSH
45050: CALL_OW 12
45054: ARRAY
45055: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45056: LD_VAR 0 2
45060: PPUSH
45061: LD_VAR 0 3
45065: PPUSH
45066: CALL 45319 0 2
45070: NOT
45071: IFFALSE 45132
// repeat engine := _engine [ 1 ] ;
45073: LD_ADDR_VAR 0 3
45077: PUSH
45078: LD_VAR 0 11
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45087: LD_ADDR_VAR 0 11
45091: PUSH
45092: LD_VAR 0 11
45096: PPUSH
45097: LD_INT 1
45099: PPUSH
45100: CALL_OW 3
45104: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45105: LD_VAR 0 2
45109: PPUSH
45110: LD_VAR 0 3
45114: PPUSH
45115: CALL 45319 0 2
45119: IFTRUE 45130
45121: PUSH
45122: LD_VAR 0 11
45126: PUSH
45127: EMPTY
45128: EQUAL
45129: OR
45130: IFFALSE 45073
// if not control in _control then
45132: LD_VAR 0 4
45136: PUSH
45137: LD_VAR 0 12
45141: IN
45142: NOT
45143: IFFALSE 45169
// control := _control [ rand ( 1 , _control ) ] ;
45145: LD_ADDR_VAR 0 4
45149: PUSH
45150: LD_VAR 0 12
45154: PUSH
45155: LD_INT 1
45157: PPUSH
45158: LD_VAR 0 12
45162: PPUSH
45163: CALL_OW 12
45167: ARRAY
45168: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45169: LD_VAR 0 2
45173: PPUSH
45174: LD_VAR 0 5
45178: PPUSH
45179: CALL 45541 0 2
45183: NOT
45184: IFFALSE 45245
// repeat weapon := _weapon [ 1 ] ;
45186: LD_ADDR_VAR 0 5
45190: PUSH
45191: LD_VAR 0 10
45195: PUSH
45196: LD_INT 1
45198: ARRAY
45199: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45200: LD_ADDR_VAR 0 10
45204: PUSH
45205: LD_VAR 0 10
45209: PPUSH
45210: LD_INT 1
45212: PPUSH
45213: CALL_OW 3
45217: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45218: LD_VAR 0 2
45222: PPUSH
45223: LD_VAR 0 5
45227: PPUSH
45228: CALL 45541 0 2
45232: IFTRUE 45243
45234: PUSH
45235: LD_VAR 0 10
45239: PUSH
45240: EMPTY
45241: EQUAL
45242: OR
45243: IFFALSE 45186
// result := [ ] ;
45245: LD_ADDR_VAR 0 6
45249: PUSH
45250: EMPTY
45251: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45252: LD_VAR 0 1
45256: PPUSH
45257: LD_VAR 0 2
45261: PPUSH
45262: LD_VAR 0 3
45266: PPUSH
45267: LD_VAR 0 4
45271: PPUSH
45272: LD_VAR 0 5
45276: PPUSH
45277: CALL_OW 448
45281: IFFALSE 45314
// result := [ chassis , engine , control , weapon ] ;
45283: LD_ADDR_VAR 0 6
45287: PUSH
45288: LD_VAR 0 2
45292: PUSH
45293: LD_VAR 0 3
45297: PUSH
45298: LD_VAR 0 4
45302: PUSH
45303: LD_VAR 0 5
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: ST_TO_ADDR
// end ;
45314: LD_VAR 0 6
45318: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45319: LD_INT 0
45321: PPUSH
// if not chassis or not engine then
45322: LD_VAR 0 1
45326: NOT
45327: IFTRUE 45336
45329: PUSH
45330: LD_VAR 0 2
45334: NOT
45335: OR
45336: IFFALSE 45340
// exit ;
45338: GO 45536
// case engine of engine_solar :
45340: LD_VAR 0 2
45344: PUSH
45345: LD_INT 2
45347: DOUBLE
45348: EQUAL
45349: IFTRUE 45353
45351: GO 45391
45353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45354: LD_ADDR_VAR 0 3
45358: PUSH
45359: LD_INT 11
45361: PUSH
45362: LD_INT 12
45364: PUSH
45365: LD_INT 13
45367: PUSH
45368: LD_INT 14
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 3
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: ST_TO_ADDR
45389: GO 45520
45391: LD_INT 1
45393: DOUBLE
45394: EQUAL
45395: IFTRUE 45399
45397: GO 45461
45399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45400: LD_ADDR_VAR 0 3
45404: PUSH
45405: LD_INT 11
45407: PUSH
45408: LD_INT 12
45410: PUSH
45411: LD_INT 13
45413: PUSH
45414: LD_INT 14
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: LD_INT 3
45425: PUSH
45426: LD_INT 4
45428: PUSH
45429: LD_INT 5
45431: PUSH
45432: LD_INT 21
45434: PUSH
45435: LD_INT 23
45437: PUSH
45438: LD_INT 22
45440: PUSH
45441: LD_INT 24
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: ST_TO_ADDR
45459: GO 45520
45461: LD_INT 3
45463: DOUBLE
45464: EQUAL
45465: IFTRUE 45469
45467: GO 45519
45469: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45470: LD_ADDR_VAR 0 3
45474: PUSH
45475: LD_INT 13
45477: PUSH
45478: LD_INT 14
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 3
45486: PUSH
45487: LD_INT 4
45489: PUSH
45490: LD_INT 5
45492: PUSH
45493: LD_INT 21
45495: PUSH
45496: LD_INT 22
45498: PUSH
45499: LD_INT 23
45501: PUSH
45502: LD_INT 24
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: ST_TO_ADDR
45517: GO 45520
45519: POP
// result := ( chassis in result ) ;
45520: LD_ADDR_VAR 0 3
45524: PUSH
45525: LD_VAR 0 1
45529: PUSH
45530: LD_VAR 0 3
45534: IN
45535: ST_TO_ADDR
// end ;
45536: LD_VAR 0 3
45540: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45541: LD_INT 0
45543: PPUSH
// if not chassis or not weapon then
45544: LD_VAR 0 1
45548: NOT
45549: IFTRUE 45558
45551: PUSH
45552: LD_VAR 0 2
45556: NOT
45557: OR
45558: IFFALSE 45562
// exit ;
45560: GO 46622
// case weapon of us_machine_gun :
45562: LD_VAR 0 2
45566: PUSH
45567: LD_INT 2
45569: DOUBLE
45570: EQUAL
45571: IFTRUE 45575
45573: GO 45605
45575: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45576: LD_ADDR_VAR 0 3
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: LD_INT 3
45589: PUSH
45590: LD_INT 4
45592: PUSH
45593: LD_INT 5
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: ST_TO_ADDR
45603: GO 46606
45605: LD_INT 3
45607: DOUBLE
45608: EQUAL
45609: IFTRUE 45613
45611: GO 45643
45613: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45614: LD_ADDR_VAR 0 3
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 3
45627: PUSH
45628: LD_INT 4
45630: PUSH
45631: LD_INT 5
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: ST_TO_ADDR
45641: GO 46606
45643: LD_INT 11
45645: DOUBLE
45646: EQUAL
45647: IFTRUE 45651
45649: GO 45681
45651: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45652: LD_ADDR_VAR 0 3
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 3
45665: PUSH
45666: LD_INT 4
45668: PUSH
45669: LD_INT 5
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
45679: GO 46606
45681: LD_INT 4
45683: DOUBLE
45684: EQUAL
45685: IFTRUE 45689
45687: GO 45715
45689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45690: LD_ADDR_VAR 0 3
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: LD_INT 3
45700: PUSH
45701: LD_INT 4
45703: PUSH
45704: LD_INT 5
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: ST_TO_ADDR
45713: GO 46606
45715: LD_INT 5
45717: DOUBLE
45718: EQUAL
45719: IFTRUE 45723
45721: GO 45749
45723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45724: LD_ADDR_VAR 0 3
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: LD_INT 4
45737: PUSH
45738: LD_INT 5
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: ST_TO_ADDR
45747: GO 46606
45749: LD_INT 9
45751: DOUBLE
45752: EQUAL
45753: IFTRUE 45757
45755: GO 45783
45757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45758: LD_ADDR_VAR 0 3
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: LD_INT 4
45771: PUSH
45772: LD_INT 5
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: ST_TO_ADDR
45781: GO 46606
45783: LD_INT 7
45785: DOUBLE
45786: EQUAL
45787: IFTRUE 45791
45789: GO 45817
45791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45792: LD_ADDR_VAR 0 3
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: LD_INT 3
45802: PUSH
45803: LD_INT 4
45805: PUSH
45806: LD_INT 5
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: ST_TO_ADDR
45815: GO 46606
45817: LD_INT 12
45819: DOUBLE
45820: EQUAL
45821: IFTRUE 45825
45823: GO 45851
45825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45826: LD_ADDR_VAR 0 3
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: LD_INT 3
45836: PUSH
45837: LD_INT 4
45839: PUSH
45840: LD_INT 5
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: ST_TO_ADDR
45849: GO 46606
45851: LD_INT 13
45853: DOUBLE
45854: EQUAL
45855: IFTRUE 45859
45857: GO 45885
45859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45860: LD_ADDR_VAR 0 3
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: LD_INT 3
45870: PUSH
45871: LD_INT 4
45873: PUSH
45874: LD_INT 5
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: ST_TO_ADDR
45883: GO 46606
45885: LD_INT 14
45887: DOUBLE
45888: EQUAL
45889: IFTRUE 45893
45891: GO 45911
45893: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45894: LD_ADDR_VAR 0 3
45898: PUSH
45899: LD_INT 4
45901: PUSH
45902: LD_INT 5
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: ST_TO_ADDR
45909: GO 46606
45911: LD_INT 6
45913: DOUBLE
45914: EQUAL
45915: IFTRUE 45919
45917: GO 45937
45919: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45920: LD_ADDR_VAR 0 3
45924: PUSH
45925: LD_INT 4
45927: PUSH
45928: LD_INT 5
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: ST_TO_ADDR
45935: GO 46606
45937: LD_INT 10
45939: DOUBLE
45940: EQUAL
45941: IFTRUE 45945
45943: GO 45963
45945: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45946: LD_ADDR_VAR 0 3
45950: PUSH
45951: LD_INT 4
45953: PUSH
45954: LD_INT 5
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: ST_TO_ADDR
45961: GO 46606
45963: LD_INT 22
45965: DOUBLE
45966: EQUAL
45967: IFTRUE 45971
45969: GO 45997
45971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45972: LD_ADDR_VAR 0 3
45976: PUSH
45977: LD_INT 11
45979: PUSH
45980: LD_INT 12
45982: PUSH
45983: LD_INT 13
45985: PUSH
45986: LD_INT 14
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: ST_TO_ADDR
45995: GO 46606
45997: LD_INT 23
45999: DOUBLE
46000: EQUAL
46001: IFTRUE 46005
46003: GO 46031
46005: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46006: LD_ADDR_VAR 0 3
46010: PUSH
46011: LD_INT 11
46013: PUSH
46014: LD_INT 12
46016: PUSH
46017: LD_INT 13
46019: PUSH
46020: LD_INT 14
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: ST_TO_ADDR
46029: GO 46606
46031: LD_INT 24
46033: DOUBLE
46034: EQUAL
46035: IFTRUE 46039
46037: GO 46065
46039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46040: LD_ADDR_VAR 0 3
46044: PUSH
46045: LD_INT 11
46047: PUSH
46048: LD_INT 12
46050: PUSH
46051: LD_INT 13
46053: PUSH
46054: LD_INT 14
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: ST_TO_ADDR
46063: GO 46606
46065: LD_INT 30
46067: DOUBLE
46068: EQUAL
46069: IFTRUE 46073
46071: GO 46099
46073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46074: LD_ADDR_VAR 0 3
46078: PUSH
46079: LD_INT 11
46081: PUSH
46082: LD_INT 12
46084: PUSH
46085: LD_INT 13
46087: PUSH
46088: LD_INT 14
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: ST_TO_ADDR
46097: GO 46606
46099: LD_INT 25
46101: DOUBLE
46102: EQUAL
46103: IFTRUE 46107
46105: GO 46125
46107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46108: LD_ADDR_VAR 0 3
46112: PUSH
46113: LD_INT 13
46115: PUSH
46116: LD_INT 14
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: ST_TO_ADDR
46123: GO 46606
46125: LD_INT 27
46127: DOUBLE
46128: EQUAL
46129: IFTRUE 46133
46131: GO 46151
46133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46134: LD_ADDR_VAR 0 3
46138: PUSH
46139: LD_INT 13
46141: PUSH
46142: LD_INT 14
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: ST_TO_ADDR
46149: GO 46606
46151: LD_INT 92
46153: DOUBLE
46154: EQUAL
46155: IFTRUE 46159
46157: GO 46185
46159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46160: LD_ADDR_VAR 0 3
46164: PUSH
46165: LD_INT 11
46167: PUSH
46168: LD_INT 12
46170: PUSH
46171: LD_INT 13
46173: PUSH
46174: LD_INT 14
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
46183: GO 46606
46185: LD_INT 28
46187: DOUBLE
46188: EQUAL
46189: IFTRUE 46193
46191: GO 46211
46193: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46194: LD_ADDR_VAR 0 3
46198: PUSH
46199: LD_INT 13
46201: PUSH
46202: LD_INT 14
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: ST_TO_ADDR
46209: GO 46606
46211: LD_INT 29
46213: DOUBLE
46214: EQUAL
46215: IFTRUE 46219
46217: GO 46237
46219: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46220: LD_ADDR_VAR 0 3
46224: PUSH
46225: LD_INT 13
46227: PUSH
46228: LD_INT 14
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: ST_TO_ADDR
46235: GO 46606
46237: LD_INT 31
46239: DOUBLE
46240: EQUAL
46241: IFTRUE 46245
46243: GO 46263
46245: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46246: LD_ADDR_VAR 0 3
46250: PUSH
46251: LD_INT 13
46253: PUSH
46254: LD_INT 14
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: ST_TO_ADDR
46261: GO 46606
46263: LD_INT 26
46265: DOUBLE
46266: EQUAL
46267: IFTRUE 46271
46269: GO 46289
46271: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46272: LD_ADDR_VAR 0 3
46276: PUSH
46277: LD_INT 13
46279: PUSH
46280: LD_INT 14
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: ST_TO_ADDR
46287: GO 46606
46289: LD_INT 42
46291: DOUBLE
46292: EQUAL
46293: IFTRUE 46297
46295: GO 46323
46297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46298: LD_ADDR_VAR 0 3
46302: PUSH
46303: LD_INT 21
46305: PUSH
46306: LD_INT 22
46308: PUSH
46309: LD_INT 23
46311: PUSH
46312: LD_INT 24
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: ST_TO_ADDR
46321: GO 46606
46323: LD_INT 43
46325: DOUBLE
46326: EQUAL
46327: IFTRUE 46331
46329: GO 46357
46331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46332: LD_ADDR_VAR 0 3
46336: PUSH
46337: LD_INT 21
46339: PUSH
46340: LD_INT 22
46342: PUSH
46343: LD_INT 23
46345: PUSH
46346: LD_INT 24
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: ST_TO_ADDR
46355: GO 46606
46357: LD_INT 44
46359: DOUBLE
46360: EQUAL
46361: IFTRUE 46365
46363: GO 46391
46365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46366: LD_ADDR_VAR 0 3
46370: PUSH
46371: LD_INT 21
46373: PUSH
46374: LD_INT 22
46376: PUSH
46377: LD_INT 23
46379: PUSH
46380: LD_INT 24
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: ST_TO_ADDR
46389: GO 46606
46391: LD_INT 45
46393: DOUBLE
46394: EQUAL
46395: IFTRUE 46399
46397: GO 46425
46399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46400: LD_ADDR_VAR 0 3
46404: PUSH
46405: LD_INT 21
46407: PUSH
46408: LD_INT 22
46410: PUSH
46411: LD_INT 23
46413: PUSH
46414: LD_INT 24
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: ST_TO_ADDR
46423: GO 46606
46425: LD_INT 49
46427: DOUBLE
46428: EQUAL
46429: IFTRUE 46433
46431: GO 46459
46433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46434: LD_ADDR_VAR 0 3
46438: PUSH
46439: LD_INT 21
46441: PUSH
46442: LD_INT 22
46444: PUSH
46445: LD_INT 23
46447: PUSH
46448: LD_INT 24
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: ST_TO_ADDR
46457: GO 46606
46459: LD_INT 51
46461: DOUBLE
46462: EQUAL
46463: IFTRUE 46467
46465: GO 46493
46467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46468: LD_ADDR_VAR 0 3
46472: PUSH
46473: LD_INT 21
46475: PUSH
46476: LD_INT 22
46478: PUSH
46479: LD_INT 23
46481: PUSH
46482: LD_INT 24
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: ST_TO_ADDR
46491: GO 46606
46493: LD_INT 52
46495: DOUBLE
46496: EQUAL
46497: IFTRUE 46501
46499: GO 46527
46501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46502: LD_ADDR_VAR 0 3
46506: PUSH
46507: LD_INT 21
46509: PUSH
46510: LD_INT 22
46512: PUSH
46513: LD_INT 23
46515: PUSH
46516: LD_INT 24
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: ST_TO_ADDR
46525: GO 46606
46527: LD_INT 53
46529: DOUBLE
46530: EQUAL
46531: IFTRUE 46535
46533: GO 46553
46535: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46536: LD_ADDR_VAR 0 3
46540: PUSH
46541: LD_INT 23
46543: PUSH
46544: LD_INT 24
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: ST_TO_ADDR
46551: GO 46606
46553: LD_INT 46
46555: DOUBLE
46556: EQUAL
46557: IFTRUE 46561
46559: GO 46579
46561: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46562: LD_ADDR_VAR 0 3
46566: PUSH
46567: LD_INT 23
46569: PUSH
46570: LD_INT 24
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: ST_TO_ADDR
46577: GO 46606
46579: LD_INT 47
46581: DOUBLE
46582: EQUAL
46583: IFTRUE 46587
46585: GO 46605
46587: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46588: LD_ADDR_VAR 0 3
46592: PUSH
46593: LD_INT 23
46595: PUSH
46596: LD_INT 24
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: ST_TO_ADDR
46603: GO 46606
46605: POP
// result := ( chassis in result ) ;
46606: LD_ADDR_VAR 0 3
46610: PUSH
46611: LD_VAR 0 1
46615: PUSH
46616: LD_VAR 0 3
46620: IN
46621: ST_TO_ADDR
// end ;
46622: LD_VAR 0 3
46626: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46627: LD_INT 0
46629: PPUSH
46630: PPUSH
46631: PPUSH
46632: PPUSH
46633: PPUSH
46634: PPUSH
46635: PPUSH
// result := array ;
46636: LD_ADDR_VAR 0 5
46640: PUSH
46641: LD_VAR 0 1
46645: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46646: LD_VAR 0 1
46650: NOT
46651: IFTRUE 46660
46653: PUSH
46654: LD_VAR 0 2
46658: NOT
46659: OR
46660: IFTRUE 46669
46662: PUSH
46663: LD_VAR 0 3
46667: NOT
46668: OR
46669: IFTRUE 46683
46671: PUSH
46672: LD_VAR 0 2
46676: PUSH
46677: LD_VAR 0 1
46681: GREATER
46682: OR
46683: IFTRUE 46697
46685: PUSH
46686: LD_VAR 0 3
46690: PUSH
46691: LD_VAR 0 1
46695: GREATER
46696: OR
46697: IFFALSE 46701
// exit ;
46699: GO 46997
// if direction then
46701: LD_VAR 0 4
46705: IFFALSE 46769
// begin d := 1 ;
46707: LD_ADDR_VAR 0 9
46711: PUSH
46712: LD_INT 1
46714: ST_TO_ADDR
// if i_from > i_to then
46715: LD_VAR 0 2
46719: PUSH
46720: LD_VAR 0 3
46724: GREATER
46725: IFFALSE 46751
// length := ( array - i_from ) + i_to else
46727: LD_ADDR_VAR 0 11
46731: PUSH
46732: LD_VAR 0 1
46736: PUSH
46737: LD_VAR 0 2
46741: MINUS
46742: PUSH
46743: LD_VAR 0 3
46747: PLUS
46748: ST_TO_ADDR
46749: GO 46767
// length := i_to - i_from ;
46751: LD_ADDR_VAR 0 11
46755: PUSH
46756: LD_VAR 0 3
46760: PUSH
46761: LD_VAR 0 2
46765: MINUS
46766: ST_TO_ADDR
// end else
46767: GO 46830
// begin d := - 1 ;
46769: LD_ADDR_VAR 0 9
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: ST_TO_ADDR
// if i_from > i_to then
46778: LD_VAR 0 2
46782: PUSH
46783: LD_VAR 0 3
46787: GREATER
46788: IFFALSE 46808
// length := i_from - i_to else
46790: LD_ADDR_VAR 0 11
46794: PUSH
46795: LD_VAR 0 2
46799: PUSH
46800: LD_VAR 0 3
46804: MINUS
46805: ST_TO_ADDR
46806: GO 46830
// length := ( array - i_to ) + i_from ;
46808: LD_ADDR_VAR 0 11
46812: PUSH
46813: LD_VAR 0 1
46817: PUSH
46818: LD_VAR 0 3
46822: MINUS
46823: PUSH
46824: LD_VAR 0 2
46828: PLUS
46829: ST_TO_ADDR
// end ; if not length then
46830: LD_VAR 0 11
46834: NOT
46835: IFFALSE 46839
// exit ;
46837: GO 46997
// tmp := array ;
46839: LD_ADDR_VAR 0 10
46843: PUSH
46844: LD_VAR 0 1
46848: ST_TO_ADDR
// for i = 1 to length do
46849: LD_ADDR_VAR 0 6
46853: PUSH
46854: DOUBLE
46855: LD_INT 1
46857: DEC
46858: ST_TO_ADDR
46859: LD_VAR 0 11
46863: PUSH
46864: FOR_TO
46865: IFFALSE 46985
// begin for j = 1 to array do
46867: LD_ADDR_VAR 0 7
46871: PUSH
46872: DOUBLE
46873: LD_INT 1
46875: DEC
46876: ST_TO_ADDR
46877: LD_VAR 0 1
46881: PUSH
46882: FOR_TO
46883: IFFALSE 46971
// begin k := j + d ;
46885: LD_ADDR_VAR 0 8
46889: PUSH
46890: LD_VAR 0 7
46894: PUSH
46895: LD_VAR 0 9
46899: PLUS
46900: ST_TO_ADDR
// if k > array then
46901: LD_VAR 0 8
46905: PUSH
46906: LD_VAR 0 1
46910: GREATER
46911: IFFALSE 46921
// k := 1 ;
46913: LD_ADDR_VAR 0 8
46917: PUSH
46918: LD_INT 1
46920: ST_TO_ADDR
// if not k then
46921: LD_VAR 0 8
46925: NOT
46926: IFFALSE 46938
// k := array ;
46928: LD_ADDR_VAR 0 8
46932: PUSH
46933: LD_VAR 0 1
46937: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46938: LD_ADDR_VAR 0 10
46942: PUSH
46943: LD_VAR 0 10
46947: PPUSH
46948: LD_VAR 0 8
46952: PPUSH
46953: LD_VAR 0 1
46957: PUSH
46958: LD_VAR 0 7
46962: ARRAY
46963: PPUSH
46964: CALL_OW 1
46968: ST_TO_ADDR
// end ;
46969: GO 46882
46971: POP
46972: POP
// array := tmp ;
46973: LD_ADDR_VAR 0 1
46977: PUSH
46978: LD_VAR 0 10
46982: ST_TO_ADDR
// end ;
46983: GO 46864
46985: POP
46986: POP
// result := array ;
46987: LD_ADDR_VAR 0 5
46991: PUSH
46992: LD_VAR 0 1
46996: ST_TO_ADDR
// end ;
46997: LD_VAR 0 5
47001: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47002: LD_INT 0
47004: PPUSH
47005: PPUSH
// result := 0 ;
47006: LD_ADDR_VAR 0 3
47010: PUSH
47011: LD_INT 0
47013: ST_TO_ADDR
// if not array or not value in array then
47014: LD_VAR 0 1
47018: NOT
47019: IFTRUE 47034
47021: PUSH
47022: LD_VAR 0 2
47026: PUSH
47027: LD_VAR 0 1
47031: IN
47032: NOT
47033: OR
47034: IFFALSE 47038
// exit ;
47036: GO 47092
// for i = 1 to array do
47038: LD_ADDR_VAR 0 4
47042: PUSH
47043: DOUBLE
47044: LD_INT 1
47046: DEC
47047: ST_TO_ADDR
47048: LD_VAR 0 1
47052: PUSH
47053: FOR_TO
47054: IFFALSE 47090
// if value = array [ i ] then
47056: LD_VAR 0 2
47060: PUSH
47061: LD_VAR 0 1
47065: PUSH
47066: LD_VAR 0 4
47070: ARRAY
47071: EQUAL
47072: IFFALSE 47088
// begin result := i ;
47074: LD_ADDR_VAR 0 3
47078: PUSH
47079: LD_VAR 0 4
47083: ST_TO_ADDR
// exit ;
47084: POP
47085: POP
47086: GO 47092
// end ;
47088: GO 47053
47090: POP
47091: POP
// end ;
47092: LD_VAR 0 3
47096: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47097: LD_INT 0
47099: PPUSH
// vc_chassis := chassis ;
47100: LD_ADDR_OWVAR 37
47104: PUSH
47105: LD_VAR 0 1
47109: ST_TO_ADDR
// vc_engine := engine ;
47110: LD_ADDR_OWVAR 39
47114: PUSH
47115: LD_VAR 0 2
47119: ST_TO_ADDR
// vc_control := control ;
47120: LD_ADDR_OWVAR 38
47124: PUSH
47125: LD_VAR 0 3
47129: ST_TO_ADDR
// vc_weapon := weapon ;
47130: LD_ADDR_OWVAR 40
47134: PUSH
47135: LD_VAR 0 4
47139: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47140: LD_ADDR_OWVAR 41
47144: PUSH
47145: LD_VAR 0 5
47149: ST_TO_ADDR
// end ;
47150: LD_VAR 0 6
47154: RET
// export function WantPlant ( unit ) ; var task ; begin
47155: LD_INT 0
47157: PPUSH
47158: PPUSH
// result := false ;
47159: LD_ADDR_VAR 0 2
47163: PUSH
47164: LD_INT 0
47166: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47167: LD_ADDR_VAR 0 3
47171: PUSH
47172: LD_VAR 0 1
47176: PPUSH
47177: CALL_OW 437
47181: ST_TO_ADDR
// if task then
47182: LD_VAR 0 3
47186: IFFALSE 47214
// if task [ 1 ] [ 1 ] = p then
47188: LD_VAR 0 3
47192: PUSH
47193: LD_INT 1
47195: ARRAY
47196: PUSH
47197: LD_INT 1
47199: ARRAY
47200: PUSH
47201: LD_STRING p
47203: EQUAL
47204: IFFALSE 47214
// result := true ;
47206: LD_ADDR_VAR 0 2
47210: PUSH
47211: LD_INT 1
47213: ST_TO_ADDR
// end ;
47214: LD_VAR 0 2
47218: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47219: LD_INT 0
47221: PPUSH
47222: PPUSH
47223: PPUSH
47224: PPUSH
// if pos < 1 then
47225: LD_VAR 0 2
47229: PUSH
47230: LD_INT 1
47232: LESS
47233: IFFALSE 47237
// exit ;
47235: GO 47540
// if pos = 1 then
47237: LD_VAR 0 2
47241: PUSH
47242: LD_INT 1
47244: EQUAL
47245: IFFALSE 47278
// result := Replace ( arr , pos [ 1 ] , value ) else
47247: LD_ADDR_VAR 0 4
47251: PUSH
47252: LD_VAR 0 1
47256: PPUSH
47257: LD_VAR 0 2
47261: PUSH
47262: LD_INT 1
47264: ARRAY
47265: PPUSH
47266: LD_VAR 0 3
47270: PPUSH
47271: CALL_OW 1
47275: ST_TO_ADDR
47276: GO 47540
// begin tmp := arr ;
47278: LD_ADDR_VAR 0 6
47282: PUSH
47283: LD_VAR 0 1
47287: ST_TO_ADDR
// s_arr := [ tmp ] ;
47288: LD_ADDR_VAR 0 7
47292: PUSH
47293: LD_VAR 0 6
47297: PUSH
47298: EMPTY
47299: LIST
47300: ST_TO_ADDR
// for i = 1 to pos - 1 do
47301: LD_ADDR_VAR 0 5
47305: PUSH
47306: DOUBLE
47307: LD_INT 1
47309: DEC
47310: ST_TO_ADDR
47311: LD_VAR 0 2
47315: PUSH
47316: LD_INT 1
47318: MINUS
47319: PUSH
47320: FOR_TO
47321: IFFALSE 47366
// begin tmp := tmp [ pos [ i ] ] ;
47323: LD_ADDR_VAR 0 6
47327: PUSH
47328: LD_VAR 0 6
47332: PUSH
47333: LD_VAR 0 2
47337: PUSH
47338: LD_VAR 0 5
47342: ARRAY
47343: ARRAY
47344: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47345: LD_ADDR_VAR 0 7
47349: PUSH
47350: LD_VAR 0 7
47354: PUSH
47355: LD_VAR 0 6
47359: PUSH
47360: EMPTY
47361: LIST
47362: ADD
47363: ST_TO_ADDR
// end ;
47364: GO 47320
47366: POP
47367: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47368: LD_ADDR_VAR 0 6
47372: PUSH
47373: LD_VAR 0 6
47377: PPUSH
47378: LD_VAR 0 2
47382: PUSH
47383: LD_VAR 0 2
47387: ARRAY
47388: PPUSH
47389: LD_VAR 0 3
47393: PPUSH
47394: CALL_OW 1
47398: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47399: LD_ADDR_VAR 0 7
47403: PUSH
47404: LD_VAR 0 7
47408: PPUSH
47409: LD_VAR 0 7
47413: PPUSH
47414: LD_VAR 0 6
47418: PPUSH
47419: CALL_OW 1
47423: ST_TO_ADDR
// for i = s_arr downto 2 do
47424: LD_ADDR_VAR 0 5
47428: PUSH
47429: DOUBLE
47430: LD_VAR 0 7
47434: INC
47435: ST_TO_ADDR
47436: LD_INT 2
47438: PUSH
47439: FOR_DOWNTO
47440: IFFALSE 47524
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47442: LD_ADDR_VAR 0 6
47446: PUSH
47447: LD_VAR 0 7
47451: PUSH
47452: LD_VAR 0 5
47456: PUSH
47457: LD_INT 1
47459: MINUS
47460: ARRAY
47461: PPUSH
47462: LD_VAR 0 2
47466: PUSH
47467: LD_VAR 0 5
47471: PUSH
47472: LD_INT 1
47474: MINUS
47475: ARRAY
47476: PPUSH
47477: LD_VAR 0 7
47481: PUSH
47482: LD_VAR 0 5
47486: ARRAY
47487: PPUSH
47488: CALL_OW 1
47492: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47493: LD_ADDR_VAR 0 7
47497: PUSH
47498: LD_VAR 0 7
47502: PPUSH
47503: LD_VAR 0 5
47507: PUSH
47508: LD_INT 1
47510: MINUS
47511: PPUSH
47512: LD_VAR 0 6
47516: PPUSH
47517: CALL_OW 1
47521: ST_TO_ADDR
// end ;
47522: GO 47439
47524: POP
47525: POP
// result := s_arr [ 1 ] ;
47526: LD_ADDR_VAR 0 4
47530: PUSH
47531: LD_VAR 0 7
47535: PUSH
47536: LD_INT 1
47538: ARRAY
47539: ST_TO_ADDR
// end ; end ;
47540: LD_VAR 0 4
47544: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47545: LD_INT 0
47547: PPUSH
47548: PPUSH
// if not list then
47549: LD_VAR 0 1
47553: NOT
47554: IFFALSE 47558
// exit ;
47556: GO 47649
// i := list [ pos1 ] ;
47558: LD_ADDR_VAR 0 5
47562: PUSH
47563: LD_VAR 0 1
47567: PUSH
47568: LD_VAR 0 2
47572: ARRAY
47573: ST_TO_ADDR
// if not i then
47574: LD_VAR 0 5
47578: NOT
47579: IFFALSE 47583
// exit ;
47581: GO 47649
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47583: LD_ADDR_VAR 0 1
47587: PUSH
47588: LD_VAR 0 1
47592: PPUSH
47593: LD_VAR 0 2
47597: PPUSH
47598: LD_VAR 0 1
47602: PUSH
47603: LD_VAR 0 3
47607: ARRAY
47608: PPUSH
47609: CALL_OW 1
47613: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47614: LD_ADDR_VAR 0 1
47618: PUSH
47619: LD_VAR 0 1
47623: PPUSH
47624: LD_VAR 0 3
47628: PPUSH
47629: LD_VAR 0 5
47633: PPUSH
47634: CALL_OW 1
47638: ST_TO_ADDR
// result := list ;
47639: LD_ADDR_VAR 0 4
47643: PUSH
47644: LD_VAR 0 1
47648: ST_TO_ADDR
// end ;
47649: LD_VAR 0 4
47653: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47654: LD_INT 0
47656: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47657: LD_ADDR_VAR 0 5
47661: PUSH
47662: LD_VAR 0 1
47666: PPUSH
47667: CALL_OW 250
47671: PPUSH
47672: LD_VAR 0 1
47676: PPUSH
47677: CALL_OW 251
47681: PPUSH
47682: LD_VAR 0 2
47686: PPUSH
47687: LD_VAR 0 3
47691: PPUSH
47692: LD_VAR 0 4
47696: PPUSH
47697: CALL 48079 0 5
47701: ST_TO_ADDR
// end ;
47702: LD_VAR 0 5
47706: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47707: LD_INT 0
47709: PPUSH
47710: PPUSH
47711: PPUSH
47712: PPUSH
// if not list or not unit then
47713: LD_VAR 0 2
47717: NOT
47718: IFTRUE 47727
47720: PUSH
47721: LD_VAR 0 1
47725: NOT
47726: OR
47727: IFFALSE 47731
// exit ;
47729: GO 48074
// result := [ ] ;
47731: LD_ADDR_VAR 0 5
47735: PUSH
47736: EMPTY
47737: ST_TO_ADDR
// for i in list do
47738: LD_ADDR_VAR 0 6
47742: PUSH
47743: LD_VAR 0 2
47747: PUSH
47748: FOR_IN
47749: IFFALSE 47967
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47751: LD_ADDR_VAR 0 8
47755: PUSH
47756: LD_VAR 0 1
47760: PPUSH
47761: LD_VAR 0 6
47765: PUSH
47766: LD_INT 1
47768: ARRAY
47769: PPUSH
47770: LD_VAR 0 6
47774: PUSH
47775: LD_INT 2
47777: ARRAY
47778: PPUSH
47779: CALL_OW 297
47783: ST_TO_ADDR
// if not Count ( result ) then
47784: LD_VAR 0 5
47788: PPUSH
47789: CALL 44335 0 1
47793: NOT
47794: IFFALSE 47827
// begin result := Join ( result , [ i , tmp ] ) ;
47796: LD_ADDR_VAR 0 5
47800: PUSH
47801: LD_VAR 0 5
47805: PPUSH
47806: LD_VAR 0 6
47810: PUSH
47811: LD_VAR 0 8
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PPUSH
47820: CALL 80267 0 2
47824: ST_TO_ADDR
// continue ;
47825: GO 47748
// end ; if result [ result ] [ 2 ] <= tmp then
47827: LD_VAR 0 5
47831: PUSH
47832: LD_VAR 0 5
47836: ARRAY
47837: PUSH
47838: LD_INT 2
47840: ARRAY
47841: PUSH
47842: LD_VAR 0 8
47846: LESSEQUAL
47847: IFFALSE 47880
// result := Join ( result , [ i , tmp ] ) else
47849: LD_ADDR_VAR 0 5
47853: PUSH
47854: LD_VAR 0 5
47858: PPUSH
47859: LD_VAR 0 6
47863: PUSH
47864: LD_VAR 0 8
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PPUSH
47873: CALL 80267 0 2
47877: ST_TO_ADDR
47878: GO 47965
// begin for j := 1 to Count ( result ) do
47880: LD_ADDR_VAR 0 7
47884: PUSH
47885: DOUBLE
47886: LD_INT 1
47888: DEC
47889: ST_TO_ADDR
47890: LD_VAR 0 5
47894: PPUSH
47895: CALL 44335 0 1
47899: PUSH
47900: FOR_TO
47901: IFFALSE 47963
// begin if tmp < result [ j ] [ 2 ] then
47903: LD_VAR 0 8
47907: PUSH
47908: LD_VAR 0 5
47912: PUSH
47913: LD_VAR 0 7
47917: ARRAY
47918: PUSH
47919: LD_INT 2
47921: ARRAY
47922: LESS
47923: IFFALSE 47961
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47925: LD_ADDR_VAR 0 5
47929: PUSH
47930: LD_VAR 0 5
47934: PPUSH
47935: LD_VAR 0 7
47939: PPUSH
47940: LD_VAR 0 6
47944: PUSH
47945: LD_VAR 0 8
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PPUSH
47954: CALL_OW 2
47958: ST_TO_ADDR
// break ;
47959: GO 47963
// end ; end ;
47961: GO 47900
47963: POP
47964: POP
// end ; end ;
47965: GO 47748
47967: POP
47968: POP
// if result and not asc then
47969: LD_VAR 0 5
47973: IFFALSE 47982
47975: PUSH
47976: LD_VAR 0 3
47980: NOT
47981: AND
47982: IFFALSE 47999
// result := ReverseArray ( result ) ;
47984: LD_ADDR_VAR 0 5
47988: PUSH
47989: LD_VAR 0 5
47993: PPUSH
47994: CALL 75357 0 1
47998: ST_TO_ADDR
// tmp := [ ] ;
47999: LD_ADDR_VAR 0 8
48003: PUSH
48004: EMPTY
48005: ST_TO_ADDR
// if mode then
48006: LD_VAR 0 4
48010: IFFALSE 48074
// begin for i := 1 to result do
48012: LD_ADDR_VAR 0 6
48016: PUSH
48017: DOUBLE
48018: LD_INT 1
48020: DEC
48021: ST_TO_ADDR
48022: LD_VAR 0 5
48026: PUSH
48027: FOR_TO
48028: IFFALSE 48062
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48030: LD_ADDR_VAR 0 8
48034: PUSH
48035: LD_VAR 0 8
48039: PPUSH
48040: LD_VAR 0 5
48044: PUSH
48045: LD_VAR 0 6
48049: ARRAY
48050: PUSH
48051: LD_INT 1
48053: ARRAY
48054: PPUSH
48055: CALL 80267 0 2
48059: ST_TO_ADDR
48060: GO 48027
48062: POP
48063: POP
// result := tmp ;
48064: LD_ADDR_VAR 0 5
48068: PUSH
48069: LD_VAR 0 8
48073: ST_TO_ADDR
// end ; end ;
48074: LD_VAR 0 5
48078: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48079: LD_INT 0
48081: PPUSH
48082: PPUSH
48083: PPUSH
48084: PPUSH
// if not list then
48085: LD_VAR 0 3
48089: NOT
48090: IFFALSE 48094
// exit ;
48092: GO 48484
// result := [ ] ;
48094: LD_ADDR_VAR 0 6
48098: PUSH
48099: EMPTY
48100: ST_TO_ADDR
// for i in list do
48101: LD_ADDR_VAR 0 7
48105: PUSH
48106: LD_VAR 0 3
48110: PUSH
48111: FOR_IN
48112: IFFALSE 48314
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48114: LD_ADDR_VAR 0 9
48118: PUSH
48119: LD_VAR 0 7
48123: PPUSH
48124: LD_VAR 0 1
48128: PPUSH
48129: LD_VAR 0 2
48133: PPUSH
48134: CALL_OW 297
48138: ST_TO_ADDR
// if not result then
48139: LD_VAR 0 6
48143: NOT
48144: IFFALSE 48170
// result := [ [ i , tmp ] ] else
48146: LD_ADDR_VAR 0 6
48150: PUSH
48151: LD_VAR 0 7
48155: PUSH
48156: LD_VAR 0 9
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: EMPTY
48166: LIST
48167: ST_TO_ADDR
48168: GO 48312
// begin if result [ result ] [ 2 ] <= tmp then
48170: LD_VAR 0 6
48174: PUSH
48175: LD_VAR 0 6
48179: ARRAY
48180: PUSH
48181: LD_INT 2
48183: ARRAY
48184: PUSH
48185: LD_VAR 0 9
48189: LESSEQUAL
48190: IFFALSE 48232
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48192: LD_ADDR_VAR 0 6
48196: PUSH
48197: LD_VAR 0 6
48201: PPUSH
48202: LD_VAR 0 6
48206: PUSH
48207: LD_INT 1
48209: PLUS
48210: PPUSH
48211: LD_VAR 0 7
48215: PUSH
48216: LD_VAR 0 9
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PPUSH
48225: CALL_OW 2
48229: ST_TO_ADDR
48230: GO 48312
// for j := 1 to result do
48232: LD_ADDR_VAR 0 8
48236: PUSH
48237: DOUBLE
48238: LD_INT 1
48240: DEC
48241: ST_TO_ADDR
48242: LD_VAR 0 6
48246: PUSH
48247: FOR_TO
48248: IFFALSE 48310
// begin if tmp < result [ j ] [ 2 ] then
48250: LD_VAR 0 9
48254: PUSH
48255: LD_VAR 0 6
48259: PUSH
48260: LD_VAR 0 8
48264: ARRAY
48265: PUSH
48266: LD_INT 2
48268: ARRAY
48269: LESS
48270: IFFALSE 48308
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48272: LD_ADDR_VAR 0 6
48276: PUSH
48277: LD_VAR 0 6
48281: PPUSH
48282: LD_VAR 0 8
48286: PPUSH
48287: LD_VAR 0 7
48291: PUSH
48292: LD_VAR 0 9
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PPUSH
48301: CALL_OW 2
48305: ST_TO_ADDR
// break ;
48306: GO 48310
// end ; end ;
48308: GO 48247
48310: POP
48311: POP
// end ; end ;
48312: GO 48111
48314: POP
48315: POP
// if result and not asc then
48316: LD_VAR 0 6
48320: IFFALSE 48329
48322: PUSH
48323: LD_VAR 0 4
48327: NOT
48328: AND
48329: IFFALSE 48404
// begin tmp := result ;
48331: LD_ADDR_VAR 0 9
48335: PUSH
48336: LD_VAR 0 6
48340: ST_TO_ADDR
// for i = tmp downto 1 do
48341: LD_ADDR_VAR 0 7
48345: PUSH
48346: DOUBLE
48347: LD_VAR 0 9
48351: INC
48352: ST_TO_ADDR
48353: LD_INT 1
48355: PUSH
48356: FOR_DOWNTO
48357: IFFALSE 48402
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48359: LD_ADDR_VAR 0 6
48363: PUSH
48364: LD_VAR 0 6
48368: PPUSH
48369: LD_VAR 0 9
48373: PUSH
48374: LD_VAR 0 7
48378: MINUS
48379: PUSH
48380: LD_INT 1
48382: PLUS
48383: PPUSH
48384: LD_VAR 0 9
48388: PUSH
48389: LD_VAR 0 7
48393: ARRAY
48394: PPUSH
48395: CALL_OW 1
48399: ST_TO_ADDR
48400: GO 48356
48402: POP
48403: POP
// end ; tmp := [ ] ;
48404: LD_ADDR_VAR 0 9
48408: PUSH
48409: EMPTY
48410: ST_TO_ADDR
// if mode then
48411: LD_VAR 0 5
48415: IFFALSE 48484
// begin for i = 1 to result do
48417: LD_ADDR_VAR 0 7
48421: PUSH
48422: DOUBLE
48423: LD_INT 1
48425: DEC
48426: ST_TO_ADDR
48427: LD_VAR 0 6
48431: PUSH
48432: FOR_TO
48433: IFFALSE 48472
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48435: LD_ADDR_VAR 0 9
48439: PUSH
48440: LD_VAR 0 9
48444: PPUSH
48445: LD_VAR 0 7
48449: PPUSH
48450: LD_VAR 0 6
48454: PUSH
48455: LD_VAR 0 7
48459: ARRAY
48460: PUSH
48461: LD_INT 1
48463: ARRAY
48464: PPUSH
48465: CALL_OW 1
48469: ST_TO_ADDR
48470: GO 48432
48472: POP
48473: POP
// result := tmp ;
48474: LD_ADDR_VAR 0 6
48478: PUSH
48479: LD_VAR 0 9
48483: ST_TO_ADDR
// end ; end ;
48484: LD_VAR 0 6
48488: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48489: LD_INT 0
48491: PPUSH
48492: PPUSH
48493: PPUSH
48494: PPUSH
48495: PPUSH
48496: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48497: LD_ADDR_VAR 0 5
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: ST_TO_ADDR
// if not x or not y then
48519: LD_VAR 0 2
48523: NOT
48524: IFTRUE 48533
48526: PUSH
48527: LD_VAR 0 3
48531: NOT
48532: OR
48533: IFFALSE 48537
// exit ;
48535: GO 50193
// if not range then
48537: LD_VAR 0 4
48541: NOT
48542: IFFALSE 48552
// range := 10 ;
48544: LD_ADDR_VAR 0 4
48548: PUSH
48549: LD_INT 10
48551: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48552: LD_ADDR_VAR 0 8
48556: PUSH
48557: LD_INT 81
48559: PUSH
48560: LD_VAR 0 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 92
48571: PUSH
48572: LD_VAR 0 2
48576: PUSH
48577: LD_VAR 0 3
48581: PUSH
48582: LD_VAR 0 4
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: LD_INT 21
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: LIST
48614: PPUSH
48615: CALL_OW 69
48619: ST_TO_ADDR
// if not tmp then
48620: LD_VAR 0 8
48624: NOT
48625: IFFALSE 48629
// exit ;
48627: GO 50193
// for i in tmp do
48629: LD_ADDR_VAR 0 6
48633: PUSH
48634: LD_VAR 0 8
48638: PUSH
48639: FOR_IN
48640: IFFALSE 50168
// begin points := [ 0 , 0 , 0 ] ;
48642: LD_ADDR_VAR 0 9
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: LIST
48660: ST_TO_ADDR
// bpoints := 1 ;
48661: LD_ADDR_VAR 0 10
48665: PUSH
48666: LD_INT 1
48668: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48669: LD_VAR 0 6
48673: PPUSH
48674: CALL_OW 247
48678: PUSH
48679: LD_INT 1
48681: DOUBLE
48682: EQUAL
48683: IFTRUE 48687
48685: GO 49269
48687: POP
// begin if GetClass ( i ) = 1 then
48688: LD_VAR 0 6
48692: PPUSH
48693: CALL_OW 257
48697: PUSH
48698: LD_INT 1
48700: EQUAL
48701: IFFALSE 48722
// points := [ 10 , 5 , 3 ] ;
48703: LD_ADDR_VAR 0 9
48707: PUSH
48708: LD_INT 10
48710: PUSH
48711: LD_INT 5
48713: PUSH
48714: LD_INT 3
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: LIST
48721: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48722: LD_VAR 0 6
48726: PPUSH
48727: CALL_OW 257
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 3
48737: PUSH
48738: LD_INT 4
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: IN
48746: IFFALSE 48767
// points := [ 3 , 2 , 1 ] ;
48748: LD_ADDR_VAR 0 9
48752: PUSH
48753: LD_INT 3
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48767: LD_VAR 0 6
48771: PPUSH
48772: CALL_OW 257
48776: PUSH
48777: LD_INT 5
48779: EQUAL
48780: IFFALSE 48801
// points := [ 130 , 5 , 2 ] ;
48782: LD_ADDR_VAR 0 9
48786: PUSH
48787: LD_INT 130
48789: PUSH
48790: LD_INT 5
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: LIST
48800: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48801: LD_VAR 0 6
48805: PPUSH
48806: CALL_OW 257
48810: PUSH
48811: LD_INT 8
48813: EQUAL
48814: IFFALSE 48835
// points := [ 35 , 35 , 30 ] ;
48816: LD_ADDR_VAR 0 9
48820: PUSH
48821: LD_INT 35
48823: PUSH
48824: LD_INT 35
48826: PUSH
48827: LD_INT 30
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48835: LD_VAR 0 6
48839: PPUSH
48840: CALL_OW 257
48844: PUSH
48845: LD_INT 9
48847: EQUAL
48848: IFFALSE 48869
// points := [ 20 , 55 , 40 ] ;
48850: LD_ADDR_VAR 0 9
48854: PUSH
48855: LD_INT 20
48857: PUSH
48858: LD_INT 55
48860: PUSH
48861: LD_INT 40
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48869: LD_VAR 0 6
48873: PPUSH
48874: CALL_OW 257
48878: PUSH
48879: LD_INT 12
48881: PUSH
48882: LD_INT 16
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: IN
48889: IFFALSE 48910
// points := [ 5 , 3 , 2 ] ;
48891: LD_ADDR_VAR 0 9
48895: PUSH
48896: LD_INT 5
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48910: LD_VAR 0 6
48914: PPUSH
48915: CALL_OW 257
48919: PUSH
48920: LD_INT 17
48922: EQUAL
48923: IFFALSE 48944
// points := [ 100 , 50 , 75 ] ;
48925: LD_ADDR_VAR 0 9
48929: PUSH
48930: LD_INT 100
48932: PUSH
48933: LD_INT 50
48935: PUSH
48936: LD_INT 75
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48944: LD_VAR 0 6
48948: PPUSH
48949: CALL_OW 257
48953: PUSH
48954: LD_INT 15
48956: EQUAL
48957: IFFALSE 48978
// points := [ 10 , 5 , 3 ] ;
48959: LD_ADDR_VAR 0 9
48963: PUSH
48964: LD_INT 10
48966: PUSH
48967: LD_INT 5
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: LIST
48977: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48978: LD_VAR 0 6
48982: PPUSH
48983: CALL_OW 257
48987: PUSH
48988: LD_INT 14
48990: EQUAL
48991: IFFALSE 49012
// points := [ 10 , 0 , 0 ] ;
48993: LD_ADDR_VAR 0 9
48997: PUSH
48998: LD_INT 10
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49012: LD_VAR 0 6
49016: PPUSH
49017: CALL_OW 257
49021: PUSH
49022: LD_INT 11
49024: EQUAL
49025: IFFALSE 49046
// points := [ 30 , 10 , 5 ] ;
49027: LD_ADDR_VAR 0 9
49031: PUSH
49032: LD_INT 30
49034: PUSH
49035: LD_INT 10
49037: PUSH
49038: LD_INT 5
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49046: LD_VAR 0 1
49050: PPUSH
49051: LD_INT 5
49053: PPUSH
49054: CALL_OW 321
49058: PUSH
49059: LD_INT 2
49061: EQUAL
49062: IFFALSE 49079
// bpoints := bpoints * 1.8 ;
49064: LD_ADDR_VAR 0 10
49068: PUSH
49069: LD_VAR 0 10
49073: PUSH
49074: LD_REAL  1.80000000000000E+0000
49077: MUL
49078: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49079: LD_VAR 0 6
49083: PPUSH
49084: CALL_OW 257
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: LD_INT 4
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: IN
49107: IFFALSE 49127
49109: PUSH
49110: LD_VAR 0 1
49114: PPUSH
49115: LD_INT 51
49117: PPUSH
49118: CALL_OW 321
49122: PUSH
49123: LD_INT 2
49125: EQUAL
49126: AND
49127: IFFALSE 49144
// bpoints := bpoints * 1.2 ;
49129: LD_ADDR_VAR 0 10
49133: PUSH
49134: LD_VAR 0 10
49138: PUSH
49139: LD_REAL  1.20000000000000E+0000
49142: MUL
49143: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49144: LD_VAR 0 6
49148: PPUSH
49149: CALL_OW 257
49153: PUSH
49154: LD_INT 5
49156: PUSH
49157: LD_INT 7
49159: PUSH
49160: LD_INT 9
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: LIST
49167: IN
49168: IFFALSE 49188
49170: PUSH
49171: LD_VAR 0 1
49175: PPUSH
49176: LD_INT 52
49178: PPUSH
49179: CALL_OW 321
49183: PUSH
49184: LD_INT 2
49186: EQUAL
49187: AND
49188: IFFALSE 49205
// bpoints := bpoints * 1.5 ;
49190: LD_ADDR_VAR 0 10
49194: PUSH
49195: LD_VAR 0 10
49199: PUSH
49200: LD_REAL  1.50000000000000E+0000
49203: MUL
49204: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49205: LD_VAR 0 1
49209: PPUSH
49210: LD_INT 66
49212: PPUSH
49213: CALL_OW 321
49217: PUSH
49218: LD_INT 2
49220: EQUAL
49221: IFFALSE 49238
// bpoints := bpoints * 1.1 ;
49223: LD_ADDR_VAR 0 10
49227: PUSH
49228: LD_VAR 0 10
49232: PUSH
49233: LD_REAL  1.10000000000000E+0000
49236: MUL
49237: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49238: LD_ADDR_VAR 0 10
49242: PUSH
49243: LD_VAR 0 10
49247: PUSH
49248: LD_VAR 0 6
49252: PPUSH
49253: LD_INT 1
49255: PPUSH
49256: CALL_OW 259
49260: PUSH
49261: LD_REAL  1.15000000000000E+0000
49264: MUL
49265: MUL
49266: ST_TO_ADDR
// end ; unit_vehicle :
49267: GO 50097
49269: LD_INT 2
49271: DOUBLE
49272: EQUAL
49273: IFTRUE 49277
49275: GO 50085
49277: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49278: LD_VAR 0 6
49282: PPUSH
49283: CALL_OW 264
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 42
49293: PUSH
49294: LD_INT 24
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: IN
49302: IFFALSE 49323
// points := [ 25 , 5 , 3 ] ;
49304: LD_ADDR_VAR 0 9
49308: PUSH
49309: LD_INT 25
49311: PUSH
49312: LD_INT 5
49314: PUSH
49315: LD_INT 3
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: LIST
49322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49323: LD_VAR 0 6
49327: PPUSH
49328: CALL_OW 264
49332: PUSH
49333: LD_INT 4
49335: PUSH
49336: LD_INT 43
49338: PUSH
49339: LD_INT 25
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: LIST
49346: IN
49347: IFFALSE 49368
// points := [ 40 , 15 , 5 ] ;
49349: LD_ADDR_VAR 0 9
49353: PUSH
49354: LD_INT 40
49356: PUSH
49357: LD_INT 15
49359: PUSH
49360: LD_INT 5
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: LIST
49367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49368: LD_VAR 0 6
49372: PPUSH
49373: CALL_OW 264
49377: PUSH
49378: LD_INT 3
49380: PUSH
49381: LD_INT 23
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: IN
49388: IFFALSE 49409
// points := [ 7 , 25 , 8 ] ;
49390: LD_ADDR_VAR 0 9
49394: PUSH
49395: LD_INT 7
49397: PUSH
49398: LD_INT 25
49400: PUSH
49401: LD_INT 8
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49409: LD_VAR 0 6
49413: PPUSH
49414: CALL_OW 264
49418: PUSH
49419: LD_INT 5
49421: PUSH
49422: LD_INT 27
49424: PUSH
49425: LD_INT 44
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: IN
49433: IFFALSE 49454
// points := [ 14 , 50 , 16 ] ;
49435: LD_ADDR_VAR 0 9
49439: PUSH
49440: LD_INT 14
49442: PUSH
49443: LD_INT 50
49445: PUSH
49446: LD_INT 16
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: LIST
49453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49454: LD_VAR 0 6
49458: PPUSH
49459: CALL_OW 264
49463: PUSH
49464: LD_INT 6
49466: PUSH
49467: LD_INT 46
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: IN
49474: IFFALSE 49495
// points := [ 32 , 120 , 70 ] ;
49476: LD_ADDR_VAR 0 9
49480: PUSH
49481: LD_INT 32
49483: PUSH
49484: LD_INT 120
49486: PUSH
49487: LD_INT 70
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: LIST
49494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49495: LD_VAR 0 6
49499: PPUSH
49500: CALL_OW 264
49504: PUSH
49505: LD_INT 7
49507: PUSH
49508: LD_INT 28
49510: PUSH
49511: LD_INT 45
49513: PUSH
49514: LD_INT 92
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: IN
49523: IFFALSE 49544
// points := [ 35 , 20 , 45 ] ;
49525: LD_ADDR_VAR 0 9
49529: PUSH
49530: LD_INT 35
49532: PUSH
49533: LD_INT 20
49535: PUSH
49536: LD_INT 45
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: LIST
49543: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49544: LD_VAR 0 6
49548: PPUSH
49549: CALL_OW 264
49553: PUSH
49554: LD_INT 47
49556: PUSH
49557: EMPTY
49558: LIST
49559: IN
49560: IFFALSE 49581
// points := [ 67 , 45 , 75 ] ;
49562: LD_ADDR_VAR 0 9
49566: PUSH
49567: LD_INT 67
49569: PUSH
49570: LD_INT 45
49572: PUSH
49573: LD_INT 75
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49581: LD_VAR 0 6
49585: PPUSH
49586: CALL_OW 264
49590: PUSH
49591: LD_INT 26
49593: PUSH
49594: EMPTY
49595: LIST
49596: IN
49597: IFFALSE 49618
// points := [ 120 , 30 , 80 ] ;
49599: LD_ADDR_VAR 0 9
49603: PUSH
49604: LD_INT 120
49606: PUSH
49607: LD_INT 30
49609: PUSH
49610: LD_INT 80
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: LIST
49617: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49618: LD_VAR 0 6
49622: PPUSH
49623: CALL_OW 264
49627: PUSH
49628: LD_INT 22
49630: PUSH
49631: EMPTY
49632: LIST
49633: IN
49634: IFFALSE 49655
// points := [ 40 , 1 , 1 ] ;
49636: LD_ADDR_VAR 0 9
49640: PUSH
49641: LD_INT 40
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: LIST
49654: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49655: LD_VAR 0 6
49659: PPUSH
49660: CALL_OW 264
49664: PUSH
49665: LD_INT 29
49667: PUSH
49668: EMPTY
49669: LIST
49670: IN
49671: IFFALSE 49692
// points := [ 70 , 200 , 400 ] ;
49673: LD_ADDR_VAR 0 9
49677: PUSH
49678: LD_INT 70
49680: PUSH
49681: LD_INT 200
49683: PUSH
49684: LD_INT 400
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49692: LD_VAR 0 6
49696: PPUSH
49697: CALL_OW 264
49701: PUSH
49702: LD_INT 14
49704: PUSH
49705: LD_INT 53
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: IN
49712: IFFALSE 49733
// points := [ 40 , 10 , 20 ] ;
49714: LD_ADDR_VAR 0 9
49718: PUSH
49719: LD_INT 40
49721: PUSH
49722: LD_INT 10
49724: PUSH
49725: LD_INT 20
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: LIST
49732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49733: LD_VAR 0 6
49737: PPUSH
49738: CALL_OW 264
49742: PUSH
49743: LD_INT 9
49745: PUSH
49746: EMPTY
49747: LIST
49748: IN
49749: IFFALSE 49770
// points := [ 5 , 70 , 20 ] ;
49751: LD_ADDR_VAR 0 9
49755: PUSH
49756: LD_INT 5
49758: PUSH
49759: LD_INT 70
49761: PUSH
49762: LD_INT 20
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49770: LD_VAR 0 6
49774: PPUSH
49775: CALL_OW 264
49779: PUSH
49780: LD_INT 10
49782: PUSH
49783: EMPTY
49784: LIST
49785: IN
49786: IFFALSE 49807
// points := [ 35 , 110 , 70 ] ;
49788: LD_ADDR_VAR 0 9
49792: PUSH
49793: LD_INT 35
49795: PUSH
49796: LD_INT 110
49798: PUSH
49799: LD_INT 70
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49807: LD_VAR 0 6
49811: PPUSH
49812: CALL_OW 265
49816: PUSH
49817: LD_INT 25
49819: EQUAL
49820: IFFALSE 49841
// points := [ 80 , 65 , 100 ] ;
49822: LD_ADDR_VAR 0 9
49826: PUSH
49827: LD_INT 80
49829: PUSH
49830: LD_INT 65
49832: PUSH
49833: LD_INT 100
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: LIST
49840: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49841: LD_VAR 0 6
49845: PPUSH
49846: CALL_OW 263
49850: PUSH
49851: LD_INT 1
49853: EQUAL
49854: IFFALSE 49889
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49856: LD_ADDR_VAR 0 10
49860: PUSH
49861: LD_VAR 0 10
49865: PUSH
49866: LD_VAR 0 6
49870: PPUSH
49871: CALL_OW 311
49875: PPUSH
49876: LD_INT 3
49878: PPUSH
49879: CALL_OW 259
49883: PUSH
49884: LD_INT 4
49886: MUL
49887: MUL
49888: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49889: LD_VAR 0 6
49893: PPUSH
49894: CALL_OW 263
49898: PUSH
49899: LD_INT 2
49901: EQUAL
49902: IFFALSE 49953
// begin j := IsControledBy ( i ) ;
49904: LD_ADDR_VAR 0 7
49908: PUSH
49909: LD_VAR 0 6
49913: PPUSH
49914: CALL_OW 312
49918: ST_TO_ADDR
// if j then
49919: LD_VAR 0 7
49923: IFFALSE 49953
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49925: LD_ADDR_VAR 0 10
49929: PUSH
49930: LD_VAR 0 10
49934: PUSH
49935: LD_VAR 0 7
49939: PPUSH
49940: LD_INT 3
49942: PPUSH
49943: CALL_OW 259
49947: PUSH
49948: LD_INT 3
49950: MUL
49951: MUL
49952: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49953: LD_VAR 0 6
49957: PPUSH
49958: CALL_OW 264
49962: PUSH
49963: LD_INT 5
49965: PUSH
49966: LD_INT 6
49968: PUSH
49969: LD_INT 46
49971: PUSH
49972: LD_INT 44
49974: PUSH
49975: LD_INT 47
49977: PUSH
49978: LD_INT 45
49980: PUSH
49981: LD_INT 28
49983: PUSH
49984: LD_INT 7
49986: PUSH
49987: LD_INT 27
49989: PUSH
49990: LD_INT 29
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: IN
50005: IFFALSE 50025
50007: PUSH
50008: LD_VAR 0 1
50012: PPUSH
50013: LD_INT 52
50015: PPUSH
50016: CALL_OW 321
50020: PUSH
50021: LD_INT 2
50023: EQUAL
50024: AND
50025: IFFALSE 50042
// bpoints := bpoints * 1.2 ;
50027: LD_ADDR_VAR 0 10
50031: PUSH
50032: LD_VAR 0 10
50036: PUSH
50037: LD_REAL  1.20000000000000E+0000
50040: MUL
50041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50042: LD_VAR 0 6
50046: PPUSH
50047: CALL_OW 264
50051: PUSH
50052: LD_INT 6
50054: PUSH
50055: LD_INT 46
50057: PUSH
50058: LD_INT 47
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: IN
50066: IFFALSE 50083
// bpoints := bpoints * 1.2 ;
50068: LD_ADDR_VAR 0 10
50072: PUSH
50073: LD_VAR 0 10
50077: PUSH
50078: LD_REAL  1.20000000000000E+0000
50081: MUL
50082: ST_TO_ADDR
// end ; unit_building :
50083: GO 50097
50085: LD_INT 3
50087: DOUBLE
50088: EQUAL
50089: IFTRUE 50093
50091: GO 50096
50093: POP
// ; end ;
50094: GO 50097
50096: POP
// for j = 1 to 3 do
50097: LD_ADDR_VAR 0 7
50101: PUSH
50102: DOUBLE
50103: LD_INT 1
50105: DEC
50106: ST_TO_ADDR
50107: LD_INT 3
50109: PUSH
50110: FOR_TO
50111: IFFALSE 50164
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50113: LD_ADDR_VAR 0 5
50117: PUSH
50118: LD_VAR 0 5
50122: PPUSH
50123: LD_VAR 0 7
50127: PPUSH
50128: LD_VAR 0 5
50132: PUSH
50133: LD_VAR 0 7
50137: ARRAY
50138: PUSH
50139: LD_VAR 0 9
50143: PUSH
50144: LD_VAR 0 7
50148: ARRAY
50149: PUSH
50150: LD_VAR 0 10
50154: MUL
50155: PLUS
50156: PPUSH
50157: CALL_OW 1
50161: ST_TO_ADDR
50162: GO 50110
50164: POP
50165: POP
// end ;
50166: GO 48639
50168: POP
50169: POP
// result := Replace ( result , 4 , tmp ) ;
50170: LD_ADDR_VAR 0 5
50174: PUSH
50175: LD_VAR 0 5
50179: PPUSH
50180: LD_INT 4
50182: PPUSH
50183: LD_VAR 0 8
50187: PPUSH
50188: CALL_OW 1
50192: ST_TO_ADDR
// end ;
50193: LD_VAR 0 5
50197: RET
// export function DangerAtRange ( unit , range ) ; begin
50198: LD_INT 0
50200: PPUSH
// if not unit then
50201: LD_VAR 0 1
50205: NOT
50206: IFFALSE 50210
// exit ;
50208: GO 50255
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50210: LD_ADDR_VAR 0 3
50214: PUSH
50215: LD_VAR 0 1
50219: PPUSH
50220: CALL_OW 255
50224: PPUSH
50225: LD_VAR 0 1
50229: PPUSH
50230: CALL_OW 250
50234: PPUSH
50235: LD_VAR 0 1
50239: PPUSH
50240: CALL_OW 251
50244: PPUSH
50245: LD_VAR 0 2
50249: PPUSH
50250: CALL 48489 0 4
50254: ST_TO_ADDR
// end ;
50255: LD_VAR 0 3
50259: RET
// export function DangerInArea ( side , area ) ; begin
50260: LD_INT 0
50262: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50263: LD_ADDR_VAR 0 3
50267: PUSH
50268: LD_VAR 0 2
50272: PPUSH
50273: LD_INT 81
50275: PUSH
50276: LD_VAR 0 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PPUSH
50285: CALL_OW 70
50289: ST_TO_ADDR
// end ;
50290: LD_VAR 0 3
50294: RET
// export function IsExtension ( b ) ; begin
50295: LD_INT 0
50297: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50298: LD_ADDR_VAR 0 2
50302: PUSH
50303: LD_VAR 0 1
50307: PUSH
50308: LD_INT 23
50310: PUSH
50311: LD_INT 20
50313: PUSH
50314: LD_INT 22
50316: PUSH
50317: LD_INT 17
50319: PUSH
50320: LD_INT 24
50322: PUSH
50323: LD_INT 21
50325: PUSH
50326: LD_INT 19
50328: PUSH
50329: LD_INT 16
50331: PUSH
50332: LD_INT 25
50334: PUSH
50335: LD_INT 18
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: IN
50350: ST_TO_ADDR
// end ;
50351: LD_VAR 0 2
50355: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50356: LD_INT 0
50358: PPUSH
50359: PPUSH
50360: PPUSH
// result := [ ] ;
50361: LD_ADDR_VAR 0 4
50365: PUSH
50366: EMPTY
50367: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50368: LD_ADDR_VAR 0 5
50372: PUSH
50373: LD_VAR 0 2
50377: PPUSH
50378: LD_INT 21
50380: PUSH
50381: LD_INT 3
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PPUSH
50388: CALL_OW 70
50392: ST_TO_ADDR
// if not tmp then
50393: LD_VAR 0 5
50397: NOT
50398: IFFALSE 50402
// exit ;
50400: GO 50466
// if checkLink then
50402: LD_VAR 0 3
50406: IFFALSE 50456
// begin for i in tmp do
50408: LD_ADDR_VAR 0 6
50412: PUSH
50413: LD_VAR 0 5
50417: PUSH
50418: FOR_IN
50419: IFFALSE 50454
// if GetBase ( i ) <> base then
50421: LD_VAR 0 6
50425: PPUSH
50426: CALL_OW 274
50430: PUSH
50431: LD_VAR 0 1
50435: NONEQUAL
50436: IFFALSE 50452
// ComLinkToBase ( base , i ) ;
50438: LD_VAR 0 1
50442: PPUSH
50443: LD_VAR 0 6
50447: PPUSH
50448: CALL_OW 169
50452: GO 50418
50454: POP
50455: POP
// end ; result := tmp ;
50456: LD_ADDR_VAR 0 4
50460: PUSH
50461: LD_VAR 0 5
50465: ST_TO_ADDR
// end ;
50466: LD_VAR 0 4
50470: RET
// export function ComComplete ( units , b ) ; var i ; begin
50471: LD_INT 0
50473: PPUSH
50474: PPUSH
// if not units then
50475: LD_VAR 0 1
50479: NOT
50480: IFFALSE 50484
// exit ;
50482: GO 50574
// for i in units do
50484: LD_ADDR_VAR 0 4
50488: PUSH
50489: LD_VAR 0 1
50493: PUSH
50494: FOR_IN
50495: IFFALSE 50572
// if BuildingStatus ( b ) = bs_build then
50497: LD_VAR 0 2
50501: PPUSH
50502: CALL_OW 461
50506: PUSH
50507: LD_INT 1
50509: EQUAL
50510: IFFALSE 50570
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50512: LD_VAR 0 4
50516: PPUSH
50517: LD_STRING h
50519: PUSH
50520: LD_VAR 0 2
50524: PPUSH
50525: CALL_OW 250
50529: PUSH
50530: LD_VAR 0 2
50534: PPUSH
50535: CALL_OW 251
50539: PUSH
50540: LD_VAR 0 2
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: PUSH
50563: EMPTY
50564: LIST
50565: PPUSH
50566: CALL_OW 446
50570: GO 50494
50572: POP
50573: POP
// end ;
50574: LD_VAR 0 3
50578: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50579: LD_INT 0
50581: PPUSH
50582: PPUSH
50583: PPUSH
50584: PPUSH
50585: PPUSH
50586: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50587: LD_VAR 0 1
50591: NOT
50592: IFTRUE 50609
50594: PUSH
50595: LD_VAR 0 1
50599: PPUSH
50600: CALL_OW 263
50604: PUSH
50605: LD_INT 2
50607: NONEQUAL
50608: OR
50609: IFFALSE 50613
// exit ;
50611: GO 50929
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50613: LD_ADDR_VAR 0 6
50617: PUSH
50618: LD_INT 22
50620: PUSH
50621: LD_VAR 0 1
50625: PPUSH
50626: CALL_OW 255
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 30
50640: PUSH
50641: LD_INT 36
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 34
50650: PUSH
50651: LD_INT 31
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: LIST
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PPUSH
50667: CALL_OW 69
50671: ST_TO_ADDR
// if not tmp then
50672: LD_VAR 0 6
50676: NOT
50677: IFFALSE 50681
// exit ;
50679: GO 50929
// result := [ ] ;
50681: LD_ADDR_VAR 0 2
50685: PUSH
50686: EMPTY
50687: ST_TO_ADDR
// for i in tmp do
50688: LD_ADDR_VAR 0 3
50692: PUSH
50693: LD_VAR 0 6
50697: PUSH
50698: FOR_IN
50699: IFFALSE 50770
// begin t := UnitsInside ( i ) ;
50701: LD_ADDR_VAR 0 4
50705: PUSH
50706: LD_VAR 0 3
50710: PPUSH
50711: CALL_OW 313
50715: ST_TO_ADDR
// if t then
50716: LD_VAR 0 4
50720: IFFALSE 50768
// for j in t do
50722: LD_ADDR_VAR 0 7
50726: PUSH
50727: LD_VAR 0 4
50731: PUSH
50732: FOR_IN
50733: IFFALSE 50766
// result := Replace ( result , result + 1 , j ) ;
50735: LD_ADDR_VAR 0 2
50739: PUSH
50740: LD_VAR 0 2
50744: PPUSH
50745: LD_VAR 0 2
50749: PUSH
50750: LD_INT 1
50752: PLUS
50753: PPUSH
50754: LD_VAR 0 7
50758: PPUSH
50759: CALL_OW 1
50763: ST_TO_ADDR
50764: GO 50732
50766: POP
50767: POP
// end ;
50768: GO 50698
50770: POP
50771: POP
// if not result then
50772: LD_VAR 0 2
50776: NOT
50777: IFFALSE 50781
// exit ;
50779: GO 50929
// mech := result [ 1 ] ;
50781: LD_ADDR_VAR 0 5
50785: PUSH
50786: LD_VAR 0 2
50790: PUSH
50791: LD_INT 1
50793: ARRAY
50794: ST_TO_ADDR
// if result > 1 then
50795: LD_VAR 0 2
50799: PUSH
50800: LD_INT 1
50802: GREATER
50803: IFFALSE 50915
// begin for i = 2 to result do
50805: LD_ADDR_VAR 0 3
50809: PUSH
50810: DOUBLE
50811: LD_INT 2
50813: DEC
50814: ST_TO_ADDR
50815: LD_VAR 0 2
50819: PUSH
50820: FOR_TO
50821: IFFALSE 50913
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50823: LD_ADDR_VAR 0 4
50827: PUSH
50828: LD_VAR 0 2
50832: PUSH
50833: LD_VAR 0 3
50837: ARRAY
50838: PPUSH
50839: LD_INT 3
50841: PPUSH
50842: CALL_OW 259
50846: PUSH
50847: LD_VAR 0 2
50851: PUSH
50852: LD_VAR 0 3
50856: ARRAY
50857: PPUSH
50858: CALL_OW 432
50862: MINUS
50863: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50864: LD_VAR 0 4
50868: PUSH
50869: LD_VAR 0 5
50873: PPUSH
50874: LD_INT 3
50876: PPUSH
50877: CALL_OW 259
50881: PUSH
50882: LD_VAR 0 5
50886: PPUSH
50887: CALL_OW 432
50891: MINUS
50892: GREATEREQUAL
50893: IFFALSE 50911
// mech := result [ i ] ;
50895: LD_ADDR_VAR 0 5
50899: PUSH
50900: LD_VAR 0 2
50904: PUSH
50905: LD_VAR 0 3
50909: ARRAY
50910: ST_TO_ADDR
// end ;
50911: GO 50820
50913: POP
50914: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50915: LD_VAR 0 1
50919: PPUSH
50920: LD_VAR 0 5
50924: PPUSH
50925: CALL_OW 135
// end ;
50929: LD_VAR 0 2
50933: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50934: LD_INT 0
50936: PPUSH
50937: PPUSH
50938: PPUSH
50939: PPUSH
50940: PPUSH
50941: PPUSH
50942: PPUSH
50943: PPUSH
50944: PPUSH
50945: PPUSH
50946: PPUSH
50947: PPUSH
50948: PPUSH
// result := [ ] ;
50949: LD_ADDR_VAR 0 7
50953: PUSH
50954: EMPTY
50955: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50956: LD_VAR 0 1
50960: PPUSH
50961: CALL_OW 266
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: IN
50976: NOT
50977: IFFALSE 50981
// exit ;
50979: GO 52621
// if name then
50981: LD_VAR 0 3
50985: IFFALSE 51001
// SetBName ( base_dep , name ) ;
50987: LD_VAR 0 1
50991: PPUSH
50992: LD_VAR 0 3
50996: PPUSH
50997: CALL_OW 500
// base := GetBase ( base_dep ) ;
51001: LD_ADDR_VAR 0 15
51005: PUSH
51006: LD_VAR 0 1
51010: PPUSH
51011: CALL_OW 274
51015: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51016: LD_ADDR_VAR 0 16
51020: PUSH
51021: LD_VAR 0 1
51025: PPUSH
51026: CALL_OW 255
51030: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51031: LD_ADDR_VAR 0 17
51035: PUSH
51036: LD_VAR 0 1
51040: PPUSH
51041: CALL_OW 248
51045: ST_TO_ADDR
// if sources then
51046: LD_VAR 0 5
51050: IFFALSE 51097
// for i = 1 to 3 do
51052: LD_ADDR_VAR 0 8
51056: PUSH
51057: DOUBLE
51058: LD_INT 1
51060: DEC
51061: ST_TO_ADDR
51062: LD_INT 3
51064: PUSH
51065: FOR_TO
51066: IFFALSE 51095
// AddResourceType ( base , i , sources [ i ] ) ;
51068: LD_VAR 0 15
51072: PPUSH
51073: LD_VAR 0 8
51077: PPUSH
51078: LD_VAR 0 5
51082: PUSH
51083: LD_VAR 0 8
51087: ARRAY
51088: PPUSH
51089: CALL_OW 276
51093: GO 51065
51095: POP
51096: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51097: LD_ADDR_VAR 0 18
51101: PUSH
51102: LD_VAR 0 15
51106: PPUSH
51107: LD_VAR 0 2
51111: PPUSH
51112: LD_INT 1
51114: PPUSH
51115: CALL 50356 0 3
51119: ST_TO_ADDR
// InitHc ;
51120: CALL_OW 19
// InitUc ;
51124: CALL_OW 18
// uc_side := side ;
51128: LD_ADDR_OWVAR 20
51132: PUSH
51133: LD_VAR 0 16
51137: ST_TO_ADDR
// uc_nation := nation ;
51138: LD_ADDR_OWVAR 21
51142: PUSH
51143: LD_VAR 0 17
51147: ST_TO_ADDR
// if buildings then
51148: LD_VAR 0 18
51152: IFFALSE 52480
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51154: LD_ADDR_VAR 0 19
51158: PUSH
51159: LD_VAR 0 18
51163: PPUSH
51164: LD_INT 2
51166: PUSH
51167: LD_INT 30
51169: PUSH
51170: LD_INT 29
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 30
51179: PUSH
51180: LD_INT 30
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: PPUSH
51192: CALL_OW 72
51196: ST_TO_ADDR
// if tmp then
51197: LD_VAR 0 19
51201: IFFALSE 51249
// for i in tmp do
51203: LD_ADDR_VAR 0 8
51207: PUSH
51208: LD_VAR 0 19
51212: PUSH
51213: FOR_IN
51214: IFFALSE 51247
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51216: LD_VAR 0 8
51220: PPUSH
51221: CALL_OW 250
51225: PPUSH
51226: LD_VAR 0 8
51230: PPUSH
51231: CALL_OW 251
51235: PPUSH
51236: LD_VAR 0 16
51240: PPUSH
51241: CALL_OW 441
51245: GO 51213
51247: POP
51248: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51249: LD_VAR 0 18
51253: PPUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 30
51259: PUSH
51260: LD_INT 32
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 30
51269: PUSH
51270: LD_INT 33
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: PPUSH
51282: CALL_OW 72
51286: IFFALSE 51374
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51288: LD_ADDR_VAR 0 8
51292: PUSH
51293: LD_VAR 0 18
51297: PPUSH
51298: LD_INT 2
51300: PUSH
51301: LD_INT 30
51303: PUSH
51304: LD_INT 32
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 30
51313: PUSH
51314: LD_INT 33
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: LIST
51325: PPUSH
51326: CALL_OW 72
51330: PUSH
51331: FOR_IN
51332: IFFALSE 51372
// begin if not GetBWeapon ( i ) then
51334: LD_VAR 0 8
51338: PPUSH
51339: CALL_OW 269
51343: NOT
51344: IFFALSE 51370
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51346: LD_VAR 0 8
51350: PPUSH
51351: LD_VAR 0 8
51355: PPUSH
51356: LD_VAR 0 2
51360: PPUSH
51361: CALL 52626 0 2
51365: PPUSH
51366: CALL_OW 431
// end ;
51370: GO 51331
51372: POP
51373: POP
// end ; for i = 1 to personel do
51374: LD_ADDR_VAR 0 8
51378: PUSH
51379: DOUBLE
51380: LD_INT 1
51382: DEC
51383: ST_TO_ADDR
51384: LD_VAR 0 6
51388: PUSH
51389: FOR_TO
51390: IFFALSE 52460
// begin if i > 4 then
51392: LD_VAR 0 8
51396: PUSH
51397: LD_INT 4
51399: GREATER
51400: IFFALSE 51404
// break ;
51402: GO 52460
// case i of 1 :
51404: LD_VAR 0 8
51408: PUSH
51409: LD_INT 1
51411: DOUBLE
51412: EQUAL
51413: IFTRUE 51417
51415: GO 51497
51417: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51418: LD_ADDR_VAR 0 12
51422: PUSH
51423: LD_VAR 0 18
51427: PPUSH
51428: LD_INT 22
51430: PUSH
51431: LD_VAR 0 16
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 58
51442: PUSH
51443: EMPTY
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 30
51451: PUSH
51452: LD_INT 32
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 30
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 30
51471: PUSH
51472: LD_INT 5
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: LIST
51489: PPUSH
51490: CALL_OW 72
51494: ST_TO_ADDR
51495: GO 51719
51497: LD_INT 2
51499: DOUBLE
51500: EQUAL
51501: IFTRUE 51505
51503: GO 51567
51505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51506: LD_ADDR_VAR 0 12
51510: PUSH
51511: LD_VAR 0 18
51515: PPUSH
51516: LD_INT 22
51518: PUSH
51519: LD_VAR 0 16
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 30
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 30
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PPUSH
51560: CALL_OW 72
51564: ST_TO_ADDR
51565: GO 51719
51567: LD_INT 3
51569: DOUBLE
51570: EQUAL
51571: IFTRUE 51575
51573: GO 51637
51575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51576: LD_ADDR_VAR 0 12
51580: PUSH
51581: LD_VAR 0 18
51585: PPUSH
51586: LD_INT 22
51588: PUSH
51589: LD_VAR 0 16
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: LD_INT 30
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 30
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: LIST
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PPUSH
51630: CALL_OW 72
51634: ST_TO_ADDR
51635: GO 51719
51637: LD_INT 4
51639: DOUBLE
51640: EQUAL
51641: IFTRUE 51645
51643: GO 51718
51645: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51646: LD_ADDR_VAR 0 12
51650: PUSH
51651: LD_VAR 0 18
51655: PPUSH
51656: LD_INT 22
51658: PUSH
51659: LD_VAR 0 16
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: LD_INT 30
51673: PUSH
51674: LD_INT 6
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 30
51683: PUSH
51684: LD_INT 7
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 30
51693: PUSH
51694: LD_INT 8
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PPUSH
51711: CALL_OW 72
51715: ST_TO_ADDR
51716: GO 51719
51718: POP
// if i = 1 then
51719: LD_VAR 0 8
51723: PUSH
51724: LD_INT 1
51726: EQUAL
51727: IFFALSE 51838
// begin tmp := [ ] ;
51729: LD_ADDR_VAR 0 19
51733: PUSH
51734: EMPTY
51735: ST_TO_ADDR
// for j in f do
51736: LD_ADDR_VAR 0 9
51740: PUSH
51741: LD_VAR 0 12
51745: PUSH
51746: FOR_IN
51747: IFFALSE 51820
// if GetBType ( j ) = b_bunker then
51749: LD_VAR 0 9
51753: PPUSH
51754: CALL_OW 266
51758: PUSH
51759: LD_INT 32
51761: EQUAL
51762: IFFALSE 51789
// tmp := Insert ( tmp , 1 , j ) else
51764: LD_ADDR_VAR 0 19
51768: PUSH
51769: LD_VAR 0 19
51773: PPUSH
51774: LD_INT 1
51776: PPUSH
51777: LD_VAR 0 9
51781: PPUSH
51782: CALL_OW 2
51786: ST_TO_ADDR
51787: GO 51818
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51789: LD_ADDR_VAR 0 19
51793: PUSH
51794: LD_VAR 0 19
51798: PPUSH
51799: LD_VAR 0 19
51803: PUSH
51804: LD_INT 1
51806: PLUS
51807: PPUSH
51808: LD_VAR 0 9
51812: PPUSH
51813: CALL_OW 2
51817: ST_TO_ADDR
51818: GO 51746
51820: POP
51821: POP
// if tmp then
51822: LD_VAR 0 19
51826: IFFALSE 51838
// f := tmp ;
51828: LD_ADDR_VAR 0 12
51832: PUSH
51833: LD_VAR 0 19
51837: ST_TO_ADDR
// end ; x := personel [ i ] ;
51838: LD_ADDR_VAR 0 13
51842: PUSH
51843: LD_VAR 0 6
51847: PUSH
51848: LD_VAR 0 8
51852: ARRAY
51853: ST_TO_ADDR
// if x = - 1 then
51854: LD_VAR 0 13
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: EQUAL
51863: IFFALSE 52074
// begin for j in f do
51865: LD_ADDR_VAR 0 9
51869: PUSH
51870: LD_VAR 0 12
51874: PUSH
51875: FOR_IN
51876: IFFALSE 52070
// repeat InitHc ;
51878: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51882: LD_VAR 0 9
51886: PPUSH
51887: CALL_OW 266
51891: PUSH
51892: LD_INT 5
51894: EQUAL
51895: IFFALSE 51965
// begin if UnitsInside ( j ) < 3 then
51897: LD_VAR 0 9
51901: PPUSH
51902: CALL_OW 313
51906: PUSH
51907: LD_INT 3
51909: LESS
51910: IFFALSE 51946
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51912: LD_INT 0
51914: PPUSH
51915: LD_INT 5
51917: PUSH
51918: LD_INT 8
51920: PUSH
51921: LD_INT 9
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: PUSH
51929: LD_VAR 0 17
51933: ARRAY
51934: PPUSH
51935: LD_VAR 0 4
51939: PPUSH
51940: CALL_OW 380
51944: GO 51963
// PrepareHuman ( false , i , skill ) ;
51946: LD_INT 0
51948: PPUSH
51949: LD_VAR 0 8
51953: PPUSH
51954: LD_VAR 0 4
51958: PPUSH
51959: CALL_OW 380
// end else
51963: GO 51982
// PrepareHuman ( false , i , skill ) ;
51965: LD_INT 0
51967: PPUSH
51968: LD_VAR 0 8
51972: PPUSH
51973: LD_VAR 0 4
51977: PPUSH
51978: CALL_OW 380
// un := CreateHuman ;
51982: LD_ADDR_VAR 0 14
51986: PUSH
51987: CALL_OW 44
51991: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51992: LD_ADDR_VAR 0 7
51996: PUSH
51997: LD_VAR 0 7
52001: PPUSH
52002: LD_INT 1
52004: PPUSH
52005: LD_VAR 0 14
52009: PPUSH
52010: CALL_OW 2
52014: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52015: LD_VAR 0 14
52019: PPUSH
52020: LD_VAR 0 9
52024: PPUSH
52025: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52029: LD_VAR 0 9
52033: PPUSH
52034: CALL_OW 313
52038: PUSH
52039: LD_INT 6
52041: EQUAL
52042: IFTRUE 52066
52044: PUSH
52045: LD_VAR 0 9
52049: PPUSH
52050: CALL_OW 266
52054: PUSH
52055: LD_INT 32
52057: PUSH
52058: LD_INT 31
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: IN
52065: OR
52066: IFFALSE 51878
52068: GO 51875
52070: POP
52071: POP
// end else
52072: GO 52458
// for j = 1 to x do
52074: LD_ADDR_VAR 0 9
52078: PUSH
52079: DOUBLE
52080: LD_INT 1
52082: DEC
52083: ST_TO_ADDR
52084: LD_VAR 0 13
52088: PUSH
52089: FOR_TO
52090: IFFALSE 52456
// begin InitHc ;
52092: CALL_OW 19
// if not f then
52096: LD_VAR 0 12
52100: NOT
52101: IFFALSE 52190
// begin PrepareHuman ( false , i , skill ) ;
52103: LD_INT 0
52105: PPUSH
52106: LD_VAR 0 8
52110: PPUSH
52111: LD_VAR 0 4
52115: PPUSH
52116: CALL_OW 380
// un := CreateHuman ;
52120: LD_ADDR_VAR 0 14
52124: PUSH
52125: CALL_OW 44
52129: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52130: LD_ADDR_VAR 0 7
52134: PUSH
52135: LD_VAR 0 7
52139: PPUSH
52140: LD_INT 1
52142: PPUSH
52143: LD_VAR 0 14
52147: PPUSH
52148: CALL_OW 2
52152: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52153: LD_VAR 0 14
52157: PPUSH
52158: LD_VAR 0 1
52162: PPUSH
52163: CALL_OW 250
52167: PPUSH
52168: LD_VAR 0 1
52172: PPUSH
52173: CALL_OW 251
52177: PPUSH
52178: LD_INT 10
52180: PPUSH
52181: LD_INT 0
52183: PPUSH
52184: CALL_OW 50
// continue ;
52188: GO 52089
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52190: LD_VAR 0 12
52194: PUSH
52195: LD_INT 1
52197: ARRAY
52198: PPUSH
52199: CALL_OW 313
52203: IFFALSE 52231
52205: PUSH
52206: LD_VAR 0 12
52210: PUSH
52211: LD_INT 1
52213: ARRAY
52214: PPUSH
52215: CALL_OW 266
52219: PUSH
52220: LD_INT 32
52222: PUSH
52223: LD_INT 31
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: IN
52230: AND
52231: IFTRUE 52252
52233: PUSH
52234: LD_VAR 0 12
52238: PUSH
52239: LD_INT 1
52241: ARRAY
52242: PPUSH
52243: CALL_OW 313
52247: PUSH
52248: LD_INT 6
52250: EQUAL
52251: OR
52252: IFFALSE 52272
// f := Delete ( f , 1 ) ;
52254: LD_ADDR_VAR 0 12
52258: PUSH
52259: LD_VAR 0 12
52263: PPUSH
52264: LD_INT 1
52266: PPUSH
52267: CALL_OW 3
52271: ST_TO_ADDR
// if not f then
52272: LD_VAR 0 12
52276: NOT
52277: IFFALSE 52295
// begin x := x + 2 ;
52279: LD_ADDR_VAR 0 13
52283: PUSH
52284: LD_VAR 0 13
52288: PUSH
52289: LD_INT 2
52291: PLUS
52292: ST_TO_ADDR
// continue ;
52293: GO 52089
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52295: LD_VAR 0 12
52299: PUSH
52300: LD_INT 1
52302: ARRAY
52303: PPUSH
52304: CALL_OW 266
52308: PUSH
52309: LD_INT 5
52311: EQUAL
52312: IFFALSE 52386
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52314: LD_VAR 0 12
52318: PUSH
52319: LD_INT 1
52321: ARRAY
52322: PPUSH
52323: CALL_OW 313
52327: PUSH
52328: LD_INT 3
52330: LESS
52331: IFFALSE 52367
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52333: LD_INT 0
52335: PPUSH
52336: LD_INT 5
52338: PUSH
52339: LD_INT 8
52341: PUSH
52342: LD_INT 9
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: PUSH
52350: LD_VAR 0 17
52354: ARRAY
52355: PPUSH
52356: LD_VAR 0 4
52360: PPUSH
52361: CALL_OW 380
52365: GO 52384
// PrepareHuman ( false , i , skill ) ;
52367: LD_INT 0
52369: PPUSH
52370: LD_VAR 0 8
52374: PPUSH
52375: LD_VAR 0 4
52379: PPUSH
52380: CALL_OW 380
// end else
52384: GO 52403
// PrepareHuman ( false , i , skill ) ;
52386: LD_INT 0
52388: PPUSH
52389: LD_VAR 0 8
52393: PPUSH
52394: LD_VAR 0 4
52398: PPUSH
52399: CALL_OW 380
// un := CreateHuman ;
52403: LD_ADDR_VAR 0 14
52407: PUSH
52408: CALL_OW 44
52412: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52413: LD_ADDR_VAR 0 7
52417: PUSH
52418: LD_VAR 0 7
52422: PPUSH
52423: LD_INT 1
52425: PPUSH
52426: LD_VAR 0 14
52430: PPUSH
52431: CALL_OW 2
52435: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52436: LD_VAR 0 14
52440: PPUSH
52441: LD_VAR 0 12
52445: PUSH
52446: LD_INT 1
52448: ARRAY
52449: PPUSH
52450: CALL_OW 52
// end ;
52454: GO 52089
52456: POP
52457: POP
// end ;
52458: GO 51389
52460: POP
52461: POP
// result := result ^ buildings ;
52462: LD_ADDR_VAR 0 7
52466: PUSH
52467: LD_VAR 0 7
52471: PUSH
52472: LD_VAR 0 18
52476: ADD
52477: ST_TO_ADDR
// end else
52478: GO 52621
// begin for i = 1 to personel do
52480: LD_ADDR_VAR 0 8
52484: PUSH
52485: DOUBLE
52486: LD_INT 1
52488: DEC
52489: ST_TO_ADDR
52490: LD_VAR 0 6
52494: PUSH
52495: FOR_TO
52496: IFFALSE 52619
// begin if i > 4 then
52498: LD_VAR 0 8
52502: PUSH
52503: LD_INT 4
52505: GREATER
52506: IFFALSE 52510
// break ;
52508: GO 52619
// x := personel [ i ] ;
52510: LD_ADDR_VAR 0 13
52514: PUSH
52515: LD_VAR 0 6
52519: PUSH
52520: LD_VAR 0 8
52524: ARRAY
52525: ST_TO_ADDR
// if x = - 1 then
52526: LD_VAR 0 13
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: EQUAL
52535: IFFALSE 52539
// continue ;
52537: GO 52495
// PrepareHuman ( false , i , skill ) ;
52539: LD_INT 0
52541: PPUSH
52542: LD_VAR 0 8
52546: PPUSH
52547: LD_VAR 0 4
52551: PPUSH
52552: CALL_OW 380
// un := CreateHuman ;
52556: LD_ADDR_VAR 0 14
52560: PUSH
52561: CALL_OW 44
52565: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52566: LD_VAR 0 14
52570: PPUSH
52571: LD_VAR 0 1
52575: PPUSH
52576: CALL_OW 250
52580: PPUSH
52581: LD_VAR 0 1
52585: PPUSH
52586: CALL_OW 251
52590: PPUSH
52591: LD_INT 10
52593: PPUSH
52594: LD_INT 0
52596: PPUSH
52597: CALL_OW 50
// result := result ^ un ;
52601: LD_ADDR_VAR 0 7
52605: PUSH
52606: LD_VAR 0 7
52610: PUSH
52611: LD_VAR 0 14
52615: ADD
52616: ST_TO_ADDR
// end ;
52617: GO 52495
52619: POP
52620: POP
// end ; end ;
52621: LD_VAR 0 7
52625: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52626: LD_INT 0
52628: PPUSH
52629: PPUSH
52630: PPUSH
52631: PPUSH
52632: PPUSH
52633: PPUSH
52634: PPUSH
52635: PPUSH
52636: PPUSH
52637: PPUSH
52638: PPUSH
52639: PPUSH
52640: PPUSH
52641: PPUSH
52642: PPUSH
52643: PPUSH
// result := false ;
52644: LD_ADDR_VAR 0 3
52648: PUSH
52649: LD_INT 0
52651: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52652: LD_VAR 0 1
52656: NOT
52657: IFTRUE 52682
52659: PUSH
52660: LD_VAR 0 1
52664: PPUSH
52665: CALL_OW 266
52669: PUSH
52670: LD_INT 32
52672: PUSH
52673: LD_INT 33
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: IN
52680: NOT
52681: OR
52682: IFFALSE 52686
// exit ;
52684: GO 53821
// nat := GetNation ( tower ) ;
52686: LD_ADDR_VAR 0 12
52690: PUSH
52691: LD_VAR 0 1
52695: PPUSH
52696: CALL_OW 248
52700: ST_TO_ADDR
// side := GetSide ( tower ) ;
52701: LD_ADDR_VAR 0 16
52705: PUSH
52706: LD_VAR 0 1
52710: PPUSH
52711: CALL_OW 255
52715: ST_TO_ADDR
// x := GetX ( tower ) ;
52716: LD_ADDR_VAR 0 10
52720: PUSH
52721: LD_VAR 0 1
52725: PPUSH
52726: CALL_OW 250
52730: ST_TO_ADDR
// y := GetY ( tower ) ;
52731: LD_ADDR_VAR 0 11
52735: PUSH
52736: LD_VAR 0 1
52740: PPUSH
52741: CALL_OW 251
52745: ST_TO_ADDR
// if not x or not y then
52746: LD_VAR 0 10
52750: NOT
52751: IFTRUE 52760
52753: PUSH
52754: LD_VAR 0 11
52758: NOT
52759: OR
52760: IFFALSE 52764
// exit ;
52762: GO 53821
// weapon := 0 ;
52764: LD_ADDR_VAR 0 18
52768: PUSH
52769: LD_INT 0
52771: ST_TO_ADDR
// fac_list := [ ] ;
52772: LD_ADDR_VAR 0 17
52776: PUSH
52777: EMPTY
52778: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52779: LD_ADDR_VAR 0 6
52783: PUSH
52784: LD_VAR 0 1
52788: PPUSH
52789: CALL_OW 274
52793: PPUSH
52794: LD_VAR 0 2
52798: PPUSH
52799: LD_INT 0
52801: PPUSH
52802: CALL 50356 0 3
52806: PPUSH
52807: LD_INT 30
52809: PUSH
52810: LD_INT 3
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PPUSH
52817: CALL_OW 72
52821: ST_TO_ADDR
// if not factories then
52822: LD_VAR 0 6
52826: NOT
52827: IFFALSE 52831
// exit ;
52829: GO 53821
// for i in factories do
52831: LD_ADDR_VAR 0 8
52835: PUSH
52836: LD_VAR 0 6
52840: PUSH
52841: FOR_IN
52842: IFFALSE 52867
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52844: LD_ADDR_VAR 0 17
52848: PUSH
52849: LD_VAR 0 17
52853: PUSH
52854: LD_VAR 0 8
52858: PPUSH
52859: CALL_OW 478
52863: UNION
52864: ST_TO_ADDR
52865: GO 52841
52867: POP
52868: POP
// if not fac_list then
52869: LD_VAR 0 17
52873: NOT
52874: IFFALSE 52878
// exit ;
52876: GO 53821
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52878: LD_ADDR_VAR 0 5
52882: PUSH
52883: LD_INT 4
52885: PUSH
52886: LD_INT 5
52888: PUSH
52889: LD_INT 9
52891: PUSH
52892: LD_INT 10
52894: PUSH
52895: LD_INT 6
52897: PUSH
52898: LD_INT 7
52900: PUSH
52901: LD_INT 11
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 27
52915: PUSH
52916: LD_INT 28
52918: PUSH
52919: LD_INT 26
52921: PUSH
52922: LD_INT 30
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 43
52933: PUSH
52934: LD_INT 44
52936: PUSH
52937: LD_INT 46
52939: PUSH
52940: LD_INT 45
52942: PUSH
52943: LD_INT 47
52945: PUSH
52946: LD_INT 49
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: PUSH
52962: LD_VAR 0 12
52966: ARRAY
52967: ST_TO_ADDR
// list := list isect fac_list ;
52968: LD_ADDR_VAR 0 5
52972: PUSH
52973: LD_VAR 0 5
52977: PUSH
52978: LD_VAR 0 17
52982: ISECT
52983: ST_TO_ADDR
// if not list then
52984: LD_VAR 0 5
52988: NOT
52989: IFFALSE 52993
// exit ;
52991: GO 53821
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52993: LD_VAR 0 12
52997: PUSH
52998: LD_INT 3
53000: EQUAL
53001: IFFALSE 53013
53003: PUSH
53004: LD_INT 49
53006: PUSH
53007: LD_VAR 0 5
53011: IN
53012: AND
53013: IFFALSE 53033
53015: PUSH
53016: LD_INT 31
53018: PPUSH
53019: LD_VAR 0 16
53023: PPUSH
53024: CALL_OW 321
53028: PUSH
53029: LD_INT 2
53031: EQUAL
53032: AND
53033: IFFALSE 53093
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53035: LD_INT 22
53037: PUSH
53038: LD_VAR 0 16
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 35
53049: PUSH
53050: LD_INT 49
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 91
53059: PUSH
53060: LD_VAR 0 1
53064: PUSH
53065: LD_INT 10
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: LIST
53077: PPUSH
53078: CALL_OW 69
53082: NOT
53083: IFFALSE 53093
// weapon := ru_time_lapser ;
53085: LD_ADDR_VAR 0 18
53089: PUSH
53090: LD_INT 49
53092: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53093: LD_VAR 0 12
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: IN
53108: IFFALSE 53132
53110: PUSH
53111: LD_INT 11
53113: PUSH
53114: LD_VAR 0 5
53118: IN
53119: IFTRUE 53131
53121: PUSH
53122: LD_INT 30
53124: PUSH
53125: LD_VAR 0 5
53129: IN
53130: OR
53131: AND
53132: IFFALSE 53152
53134: PUSH
53135: LD_INT 6
53137: PPUSH
53138: LD_VAR 0 16
53142: PPUSH
53143: CALL_OW 321
53147: PUSH
53148: LD_INT 2
53150: EQUAL
53151: AND
53152: IFFALSE 53319
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53154: LD_INT 22
53156: PUSH
53157: LD_VAR 0 16
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 35
53171: PUSH
53172: LD_INT 11
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 35
53181: PUSH
53182: LD_INT 30
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 91
53196: PUSH
53197: LD_VAR 0 1
53201: PUSH
53202: LD_INT 18
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: PPUSH
53215: CALL_OW 69
53219: NOT
53220: IFFALSE 53296
53222: PUSH
53223: LD_INT 22
53225: PUSH
53226: LD_VAR 0 16
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 30
53240: PUSH
53241: LD_INT 32
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 30
53250: PUSH
53251: LD_INT 33
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 91
53265: PUSH
53266: LD_VAR 0 1
53270: PUSH
53271: LD_INT 12
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: LIST
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: LIST
53283: PUSH
53284: EMPTY
53285: LIST
53286: PPUSH
53287: CALL_OW 69
53291: PUSH
53292: LD_INT 2
53294: GREATER
53295: AND
53296: IFFALSE 53319
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53298: LD_ADDR_VAR 0 18
53302: PUSH
53303: LD_INT 11
53305: PUSH
53306: LD_INT 30
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_VAR 0 12
53317: ARRAY
53318: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53319: LD_VAR 0 18
53323: NOT
53324: IFFALSE 53344
53326: PUSH
53327: LD_INT 40
53329: PPUSH
53330: LD_VAR 0 16
53334: PPUSH
53335: CALL_OW 321
53339: PUSH
53340: LD_INT 2
53342: EQUAL
53343: AND
53344: IFFALSE 53380
53346: PUSH
53347: LD_INT 7
53349: PUSH
53350: LD_VAR 0 5
53354: IN
53355: IFTRUE 53367
53357: PUSH
53358: LD_INT 28
53360: PUSH
53361: LD_VAR 0 5
53365: IN
53366: OR
53367: IFTRUE 53379
53369: PUSH
53370: LD_INT 45
53372: PUSH
53373: LD_VAR 0 5
53377: IN
53378: OR
53379: AND
53380: IFFALSE 53634
// begin hex := GetHexInfo ( x , y ) ;
53382: LD_ADDR_VAR 0 4
53386: PUSH
53387: LD_VAR 0 10
53391: PPUSH
53392: LD_VAR 0 11
53396: PPUSH
53397: CALL_OW 546
53401: ST_TO_ADDR
// if hex [ 1 ] then
53402: LD_VAR 0 4
53406: PUSH
53407: LD_INT 1
53409: ARRAY
53410: IFFALSE 53414
// exit ;
53412: GO 53821
// height := hex [ 2 ] ;
53414: LD_ADDR_VAR 0 15
53418: PUSH
53419: LD_VAR 0 4
53423: PUSH
53424: LD_INT 2
53426: ARRAY
53427: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53428: LD_ADDR_VAR 0 14
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: LD_INT 5
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: ST_TO_ADDR
// for i in tmp do
53451: LD_ADDR_VAR 0 8
53455: PUSH
53456: LD_VAR 0 14
53460: PUSH
53461: FOR_IN
53462: IFFALSE 53632
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53464: LD_ADDR_VAR 0 9
53468: PUSH
53469: LD_VAR 0 10
53473: PPUSH
53474: LD_VAR 0 8
53478: PPUSH
53479: LD_INT 5
53481: PPUSH
53482: CALL_OW 272
53486: PUSH
53487: LD_VAR 0 11
53491: PPUSH
53492: LD_VAR 0 8
53496: PPUSH
53497: LD_INT 5
53499: PPUSH
53500: CALL_OW 273
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53509: LD_VAR 0 9
53513: PUSH
53514: LD_INT 1
53516: ARRAY
53517: PPUSH
53518: LD_VAR 0 9
53522: PUSH
53523: LD_INT 2
53525: ARRAY
53526: PPUSH
53527: CALL_OW 488
53531: IFFALSE 53630
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53533: LD_ADDR_VAR 0 4
53537: PUSH
53538: LD_VAR 0 9
53542: PUSH
53543: LD_INT 1
53545: ARRAY
53546: PPUSH
53547: LD_VAR 0 9
53551: PUSH
53552: LD_INT 2
53554: ARRAY
53555: PPUSH
53556: CALL_OW 546
53560: ST_TO_ADDR
// if hex [ 1 ] then
53561: LD_VAR 0 4
53565: PUSH
53566: LD_INT 1
53568: ARRAY
53569: IFFALSE 53573
// continue ;
53571: GO 53461
// h := hex [ 2 ] ;
53573: LD_ADDR_VAR 0 13
53577: PUSH
53578: LD_VAR 0 4
53582: PUSH
53583: LD_INT 2
53585: ARRAY
53586: ST_TO_ADDR
// if h + 7 < height then
53587: LD_VAR 0 13
53591: PUSH
53592: LD_INT 7
53594: PLUS
53595: PUSH
53596: LD_VAR 0 15
53600: LESS
53601: IFFALSE 53630
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53603: LD_ADDR_VAR 0 18
53607: PUSH
53608: LD_INT 7
53610: PUSH
53611: LD_INT 28
53613: PUSH
53614: LD_INT 45
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: PUSH
53622: LD_VAR 0 12
53626: ARRAY
53627: ST_TO_ADDR
// break ;
53628: GO 53632
// end ; end ; end ;
53630: GO 53461
53632: POP
53633: POP
// end ; if not weapon then
53634: LD_VAR 0 18
53638: NOT
53639: IFFALSE 53699
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53641: LD_ADDR_VAR 0 5
53645: PUSH
53646: LD_VAR 0 5
53650: PUSH
53651: LD_INT 11
53653: PUSH
53654: LD_INT 30
53656: PUSH
53657: LD_INT 49
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: DIFF
53665: ST_TO_ADDR
// if not list then
53666: LD_VAR 0 5
53670: NOT
53671: IFFALSE 53675
// exit ;
53673: GO 53821
// weapon := list [ rand ( 1 , list ) ] ;
53675: LD_ADDR_VAR 0 18
53679: PUSH
53680: LD_VAR 0 5
53684: PUSH
53685: LD_INT 1
53687: PPUSH
53688: LD_VAR 0 5
53692: PPUSH
53693: CALL_OW 12
53697: ARRAY
53698: ST_TO_ADDR
// end ; if weapon then
53699: LD_VAR 0 18
53703: IFFALSE 53821
// begin tmp := CostOfWeapon ( weapon ) ;
53705: LD_ADDR_VAR 0 14
53709: PUSH
53710: LD_VAR 0 18
53714: PPUSH
53715: CALL_OW 451
53719: ST_TO_ADDR
// j := GetBase ( tower ) ;
53720: LD_ADDR_VAR 0 9
53724: PUSH
53725: LD_VAR 0 1
53729: PPUSH
53730: CALL_OW 274
53734: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53735: LD_VAR 0 9
53739: PPUSH
53740: LD_INT 1
53742: PPUSH
53743: CALL_OW 275
53747: PUSH
53748: LD_VAR 0 14
53752: PUSH
53753: LD_INT 1
53755: ARRAY
53756: GREATEREQUAL
53757: IFFALSE 53783
53759: PUSH
53760: LD_VAR 0 9
53764: PPUSH
53765: LD_INT 2
53767: PPUSH
53768: CALL_OW 275
53772: PUSH
53773: LD_VAR 0 14
53777: PUSH
53778: LD_INT 2
53780: ARRAY
53781: GREATEREQUAL
53782: AND
53783: IFFALSE 53809
53785: PUSH
53786: LD_VAR 0 9
53790: PPUSH
53791: LD_INT 3
53793: PPUSH
53794: CALL_OW 275
53798: PUSH
53799: LD_VAR 0 14
53803: PUSH
53804: LD_INT 3
53806: ARRAY
53807: GREATEREQUAL
53808: AND
53809: IFFALSE 53821
// result := weapon ;
53811: LD_ADDR_VAR 0 3
53815: PUSH
53816: LD_VAR 0 18
53820: ST_TO_ADDR
// end ; end ;
53821: LD_VAR 0 3
53825: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53826: LD_INT 0
53828: PPUSH
53829: PPUSH
// result := true ;
53830: LD_ADDR_VAR 0 3
53834: PUSH
53835: LD_INT 1
53837: ST_TO_ADDR
// if array1 = array2 then
53838: LD_VAR 0 1
53842: PUSH
53843: LD_VAR 0 2
53847: EQUAL
53848: IFFALSE 53908
// begin for i = 1 to array1 do
53850: LD_ADDR_VAR 0 4
53854: PUSH
53855: DOUBLE
53856: LD_INT 1
53858: DEC
53859: ST_TO_ADDR
53860: LD_VAR 0 1
53864: PUSH
53865: FOR_TO
53866: IFFALSE 53904
// if array1 [ i ] <> array2 [ i ] then
53868: LD_VAR 0 1
53872: PUSH
53873: LD_VAR 0 4
53877: ARRAY
53878: PUSH
53879: LD_VAR 0 2
53883: PUSH
53884: LD_VAR 0 4
53888: ARRAY
53889: NONEQUAL
53890: IFFALSE 53902
// begin result := false ;
53892: LD_ADDR_VAR 0 3
53896: PUSH
53897: LD_INT 0
53899: ST_TO_ADDR
// break ;
53900: GO 53904
// end ;
53902: GO 53865
53904: POP
53905: POP
// end else
53906: GO 53916
// result := false ;
53908: LD_ADDR_VAR 0 3
53912: PUSH
53913: LD_INT 0
53915: ST_TO_ADDR
// end ;
53916: LD_VAR 0 3
53920: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53921: LD_INT 0
53923: PPUSH
53924: PPUSH
// if not array1 or not array2 then
53925: LD_VAR 0 1
53929: NOT
53930: IFTRUE 53939
53932: PUSH
53933: LD_VAR 0 2
53937: NOT
53938: OR
53939: IFFALSE 53943
// exit ;
53941: GO 54007
// result := true ;
53943: LD_ADDR_VAR 0 3
53947: PUSH
53948: LD_INT 1
53950: ST_TO_ADDR
// for i = 1 to array1 do
53951: LD_ADDR_VAR 0 4
53955: PUSH
53956: DOUBLE
53957: LD_INT 1
53959: DEC
53960: ST_TO_ADDR
53961: LD_VAR 0 1
53965: PUSH
53966: FOR_TO
53967: IFFALSE 54005
// if array1 [ i ] <> array2 [ i ] then
53969: LD_VAR 0 1
53973: PUSH
53974: LD_VAR 0 4
53978: ARRAY
53979: PUSH
53980: LD_VAR 0 2
53984: PUSH
53985: LD_VAR 0 4
53989: ARRAY
53990: NONEQUAL
53991: IFFALSE 54003
// begin result := false ;
53993: LD_ADDR_VAR 0 3
53997: PUSH
53998: LD_INT 0
54000: ST_TO_ADDR
// break ;
54001: GO 54005
// end ;
54003: GO 53966
54005: POP
54006: POP
// end ;
54007: LD_VAR 0 3
54011: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54012: LD_INT 0
54014: PPUSH
54015: PPUSH
54016: PPUSH
// pom := GetBase ( fac ) ;
54017: LD_ADDR_VAR 0 5
54021: PUSH
54022: LD_VAR 0 1
54026: PPUSH
54027: CALL_OW 274
54031: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54032: LD_ADDR_VAR 0 4
54036: PUSH
54037: LD_VAR 0 2
54041: PUSH
54042: LD_INT 1
54044: ARRAY
54045: PPUSH
54046: LD_VAR 0 2
54050: PUSH
54051: LD_INT 2
54053: ARRAY
54054: PPUSH
54055: LD_VAR 0 2
54059: PUSH
54060: LD_INT 3
54062: ARRAY
54063: PPUSH
54064: LD_VAR 0 2
54068: PUSH
54069: LD_INT 4
54071: ARRAY
54072: PPUSH
54073: CALL_OW 449
54077: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54078: LD_ADDR_VAR 0 3
54082: PUSH
54083: LD_VAR 0 5
54087: PPUSH
54088: LD_INT 1
54090: PPUSH
54091: CALL_OW 275
54095: PUSH
54096: LD_VAR 0 4
54100: PUSH
54101: LD_INT 1
54103: ARRAY
54104: GREATEREQUAL
54105: IFFALSE 54131
54107: PUSH
54108: LD_VAR 0 5
54112: PPUSH
54113: LD_INT 2
54115: PPUSH
54116: CALL_OW 275
54120: PUSH
54121: LD_VAR 0 4
54125: PUSH
54126: LD_INT 2
54128: ARRAY
54129: GREATEREQUAL
54130: AND
54131: IFFALSE 54157
54133: PUSH
54134: LD_VAR 0 5
54138: PPUSH
54139: LD_INT 3
54141: PPUSH
54142: CALL_OW 275
54146: PUSH
54147: LD_VAR 0 4
54151: PUSH
54152: LD_INT 3
54154: ARRAY
54155: GREATEREQUAL
54156: AND
54157: ST_TO_ADDR
// end ;
54158: LD_VAR 0 3
54162: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54163: LD_INT 0
54165: PPUSH
54166: PPUSH
54167: PPUSH
54168: PPUSH
// pom := GetBase ( building ) ;
54169: LD_ADDR_VAR 0 3
54173: PUSH
54174: LD_VAR 0 1
54178: PPUSH
54179: CALL_OW 274
54183: ST_TO_ADDR
// if not pom then
54184: LD_VAR 0 3
54188: NOT
54189: IFFALSE 54193
// exit ;
54191: GO 54367
// btype := GetBType ( building ) ;
54193: LD_ADDR_VAR 0 5
54197: PUSH
54198: LD_VAR 0 1
54202: PPUSH
54203: CALL_OW 266
54207: ST_TO_ADDR
// if btype = b_armoury then
54208: LD_VAR 0 5
54212: PUSH
54213: LD_INT 4
54215: EQUAL
54216: IFFALSE 54226
// btype := b_barracks ;
54218: LD_ADDR_VAR 0 5
54222: PUSH
54223: LD_INT 5
54225: ST_TO_ADDR
// if btype = b_depot then
54226: LD_VAR 0 5
54230: PUSH
54231: LD_INT 0
54233: EQUAL
54234: IFFALSE 54244
// btype := b_warehouse ;
54236: LD_ADDR_VAR 0 5
54240: PUSH
54241: LD_INT 1
54243: ST_TO_ADDR
// if btype = b_workshop then
54244: LD_VAR 0 5
54248: PUSH
54249: LD_INT 2
54251: EQUAL
54252: IFFALSE 54262
// btype := b_factory ;
54254: LD_ADDR_VAR 0 5
54258: PUSH
54259: LD_INT 3
54261: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54262: LD_ADDR_VAR 0 4
54266: PUSH
54267: LD_VAR 0 5
54271: PPUSH
54272: LD_VAR 0 1
54276: PPUSH
54277: CALL_OW 248
54281: PPUSH
54282: CALL_OW 450
54286: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54287: LD_ADDR_VAR 0 2
54291: PUSH
54292: LD_VAR 0 3
54296: PPUSH
54297: LD_INT 1
54299: PPUSH
54300: CALL_OW 275
54304: PUSH
54305: LD_VAR 0 4
54309: PUSH
54310: LD_INT 1
54312: ARRAY
54313: GREATEREQUAL
54314: IFFALSE 54340
54316: PUSH
54317: LD_VAR 0 3
54321: PPUSH
54322: LD_INT 2
54324: PPUSH
54325: CALL_OW 275
54329: PUSH
54330: LD_VAR 0 4
54334: PUSH
54335: LD_INT 2
54337: ARRAY
54338: GREATEREQUAL
54339: AND
54340: IFFALSE 54366
54342: PUSH
54343: LD_VAR 0 3
54347: PPUSH
54348: LD_INT 3
54350: PPUSH
54351: CALL_OW 275
54355: PUSH
54356: LD_VAR 0 4
54360: PUSH
54361: LD_INT 3
54363: ARRAY
54364: GREATEREQUAL
54365: AND
54366: ST_TO_ADDR
// end ;
54367: LD_VAR 0 2
54371: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54372: LD_INT 0
54374: PPUSH
54375: PPUSH
54376: PPUSH
// pom := GetBase ( building ) ;
54377: LD_ADDR_VAR 0 4
54381: PUSH
54382: LD_VAR 0 1
54386: PPUSH
54387: CALL_OW 274
54391: ST_TO_ADDR
// if not pom then
54392: LD_VAR 0 4
54396: NOT
54397: IFFALSE 54401
// exit ;
54399: GO 54506
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54401: LD_ADDR_VAR 0 5
54405: PUSH
54406: LD_VAR 0 2
54410: PPUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: CALL_OW 248
54420: PPUSH
54421: CALL_OW 450
54425: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54426: LD_ADDR_VAR 0 3
54430: PUSH
54431: LD_VAR 0 4
54435: PPUSH
54436: LD_INT 1
54438: PPUSH
54439: CALL_OW 275
54443: PUSH
54444: LD_VAR 0 5
54448: PUSH
54449: LD_INT 1
54451: ARRAY
54452: GREATEREQUAL
54453: IFFALSE 54479
54455: PUSH
54456: LD_VAR 0 4
54460: PPUSH
54461: LD_INT 2
54463: PPUSH
54464: CALL_OW 275
54468: PUSH
54469: LD_VAR 0 5
54473: PUSH
54474: LD_INT 2
54476: ARRAY
54477: GREATEREQUAL
54478: AND
54479: IFFALSE 54505
54481: PUSH
54482: LD_VAR 0 4
54486: PPUSH
54487: LD_INT 3
54489: PPUSH
54490: CALL_OW 275
54494: PUSH
54495: LD_VAR 0 5
54499: PUSH
54500: LD_INT 3
54502: ARRAY
54503: GREATEREQUAL
54504: AND
54505: ST_TO_ADDR
// end ;
54506: LD_VAR 0 3
54510: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54511: LD_INT 0
54513: PPUSH
54514: PPUSH
54515: PPUSH
54516: PPUSH
54517: PPUSH
54518: PPUSH
54519: PPUSH
54520: PPUSH
54521: PPUSH
54522: PPUSH
54523: PPUSH
// result := false ;
54524: LD_ADDR_VAR 0 8
54528: PUSH
54529: LD_INT 0
54531: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54532: LD_VAR 0 5
54536: NOT
54537: IFTRUE 54546
54539: PUSH
54540: LD_VAR 0 1
54544: NOT
54545: OR
54546: IFTRUE 54555
54548: PUSH
54549: LD_VAR 0 2
54553: NOT
54554: OR
54555: IFTRUE 54564
54557: PUSH
54558: LD_VAR 0 3
54562: NOT
54563: OR
54564: IFFALSE 54568
// exit ;
54566: GO 55394
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54568: LD_ADDR_VAR 0 14
54572: PUSH
54573: LD_VAR 0 1
54577: PPUSH
54578: LD_VAR 0 2
54582: PPUSH
54583: LD_VAR 0 3
54587: PPUSH
54588: LD_VAR 0 4
54592: PPUSH
54593: LD_VAR 0 5
54597: PUSH
54598: LD_INT 1
54600: ARRAY
54601: PPUSH
54602: CALL_OW 248
54606: PPUSH
54607: LD_INT 0
54609: PPUSH
54610: CALL 56675 0 6
54614: ST_TO_ADDR
// if not hexes then
54615: LD_VAR 0 14
54619: NOT
54620: IFFALSE 54624
// exit ;
54622: GO 55394
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54624: LD_ADDR_VAR 0 17
54628: PUSH
54629: LD_VAR 0 5
54633: PPUSH
54634: LD_INT 22
54636: PUSH
54637: LD_VAR 0 13
54641: PPUSH
54642: CALL_OW 255
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: LD_INT 30
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 30
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: LIST
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PPUSH
54683: CALL_OW 72
54687: ST_TO_ADDR
// for i = 1 to hexes do
54688: LD_ADDR_VAR 0 9
54692: PUSH
54693: DOUBLE
54694: LD_INT 1
54696: DEC
54697: ST_TO_ADDR
54698: LD_VAR 0 14
54702: PUSH
54703: FOR_TO
54704: IFFALSE 55392
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54706: LD_ADDR_VAR 0 13
54710: PUSH
54711: LD_VAR 0 14
54715: PUSH
54716: LD_VAR 0 9
54720: ARRAY
54721: PUSH
54722: LD_INT 1
54724: ARRAY
54725: PPUSH
54726: LD_VAR 0 14
54730: PUSH
54731: LD_VAR 0 9
54735: ARRAY
54736: PUSH
54737: LD_INT 2
54739: ARRAY
54740: PPUSH
54741: CALL_OW 428
54745: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54746: LD_VAR 0 14
54750: PUSH
54751: LD_VAR 0 9
54755: ARRAY
54756: PUSH
54757: LD_INT 1
54759: ARRAY
54760: PPUSH
54761: LD_VAR 0 14
54765: PUSH
54766: LD_VAR 0 9
54770: ARRAY
54771: PUSH
54772: LD_INT 2
54774: ARRAY
54775: PPUSH
54776: CALL_OW 351
54780: IFTRUE 54819
54782: PUSH
54783: LD_VAR 0 14
54787: PUSH
54788: LD_VAR 0 9
54792: ARRAY
54793: PUSH
54794: LD_INT 1
54796: ARRAY
54797: PPUSH
54798: LD_VAR 0 14
54802: PUSH
54803: LD_VAR 0 9
54807: ARRAY
54808: PUSH
54809: LD_INT 2
54811: ARRAY
54812: PPUSH
54813: CALL_OW 488
54817: NOT
54818: OR
54819: IFTRUE 54836
54821: PUSH
54822: LD_VAR 0 13
54826: PPUSH
54827: CALL_OW 247
54831: PUSH
54832: LD_INT 3
54834: EQUAL
54835: OR
54836: IFFALSE 54842
// exit ;
54838: POP
54839: POP
54840: GO 55394
// if not tmp then
54842: LD_VAR 0 13
54846: NOT
54847: IFFALSE 54851
// continue ;
54849: GO 54703
// result := true ;
54851: LD_ADDR_VAR 0 8
54855: PUSH
54856: LD_INT 1
54858: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54859: LD_VAR 0 6
54863: IFFALSE 54880
54865: PUSH
54866: LD_VAR 0 13
54870: PPUSH
54871: CALL_OW 247
54875: PUSH
54876: LD_INT 2
54878: EQUAL
54879: AND
54880: IFFALSE 54897
54882: PUSH
54883: LD_VAR 0 13
54887: PPUSH
54888: CALL_OW 263
54892: PUSH
54893: LD_INT 1
54895: EQUAL
54896: AND
54897: IFFALSE 55061
// begin if IsDrivenBy ( tmp ) then
54899: LD_VAR 0 13
54903: PPUSH
54904: CALL_OW 311
54908: IFFALSE 54912
// continue ;
54910: GO 54703
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54912: LD_VAR 0 6
54916: PPUSH
54917: LD_INT 3
54919: PUSH
54920: LD_INT 60
54922: PUSH
54923: EMPTY
54924: LIST
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: LD_INT 55
54935: PUSH
54936: EMPTY
54937: LIST
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PPUSH
54947: CALL_OW 72
54951: IFFALSE 55059
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54953: LD_ADDR_VAR 0 18
54957: PUSH
54958: LD_VAR 0 6
54962: PPUSH
54963: LD_INT 3
54965: PUSH
54966: LD_INT 60
54968: PUSH
54969: EMPTY
54970: LIST
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: LD_INT 55
54981: PUSH
54982: EMPTY
54983: LIST
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PPUSH
54993: CALL_OW 72
54997: PUSH
54998: LD_INT 1
55000: ARRAY
55001: ST_TO_ADDR
// if IsInUnit ( driver ) then
55002: LD_VAR 0 18
55006: PPUSH
55007: CALL_OW 310
55011: IFFALSE 55022
// ComExit ( driver ) ;
55013: LD_VAR 0 18
55017: PPUSH
55018: CALL 80665 0 1
// AddComEnterUnit ( driver , tmp ) ;
55022: LD_VAR 0 18
55026: PPUSH
55027: LD_VAR 0 13
55031: PPUSH
55032: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55036: LD_VAR 0 18
55040: PPUSH
55041: LD_VAR 0 7
55045: PPUSH
55046: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55050: LD_VAR 0 18
55054: PPUSH
55055: CALL_OW 181
// end ; continue ;
55059: GO 54703
// end ; if not cleaners or not tmp in cleaners then
55061: LD_VAR 0 6
55065: NOT
55066: IFTRUE 55081
55068: PUSH
55069: LD_VAR 0 13
55073: PUSH
55074: LD_VAR 0 6
55078: IN
55079: NOT
55080: OR
55081: IFFALSE 55390
// begin if dep then
55083: LD_VAR 0 17
55087: IFFALSE 55223
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55089: LD_ADDR_VAR 0 16
55093: PUSH
55094: LD_VAR 0 17
55098: PUSH
55099: LD_INT 1
55101: ARRAY
55102: PPUSH
55103: CALL_OW 250
55107: PPUSH
55108: LD_VAR 0 17
55112: PUSH
55113: LD_INT 1
55115: ARRAY
55116: PPUSH
55117: CALL_OW 254
55121: PPUSH
55122: LD_INT 5
55124: PPUSH
55125: CALL_OW 272
55129: PUSH
55130: LD_VAR 0 17
55134: PUSH
55135: LD_INT 1
55137: ARRAY
55138: PPUSH
55139: CALL_OW 251
55143: PPUSH
55144: LD_VAR 0 17
55148: PUSH
55149: LD_INT 1
55151: ARRAY
55152: PPUSH
55153: CALL_OW 254
55157: PPUSH
55158: LD_INT 5
55160: PPUSH
55161: CALL_OW 273
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55170: LD_VAR 0 16
55174: PUSH
55175: LD_INT 1
55177: ARRAY
55178: PPUSH
55179: LD_VAR 0 16
55183: PUSH
55184: LD_INT 2
55186: ARRAY
55187: PPUSH
55188: CALL_OW 488
55192: IFFALSE 55223
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55194: LD_VAR 0 13
55198: PPUSH
55199: LD_VAR 0 16
55203: PUSH
55204: LD_INT 1
55206: ARRAY
55207: PPUSH
55208: LD_VAR 0 16
55212: PUSH
55213: LD_INT 2
55215: ARRAY
55216: PPUSH
55217: CALL_OW 111
// continue ;
55221: GO 54703
// end ; end ; r := GetDir ( tmp ) ;
55223: LD_ADDR_VAR 0 15
55227: PUSH
55228: LD_VAR 0 13
55232: PPUSH
55233: CALL_OW 254
55237: ST_TO_ADDR
// if r = 5 then
55238: LD_VAR 0 15
55242: PUSH
55243: LD_INT 5
55245: EQUAL
55246: IFFALSE 55256
// r := 0 ;
55248: LD_ADDR_VAR 0 15
55252: PUSH
55253: LD_INT 0
55255: ST_TO_ADDR
// for j = r to 5 do
55256: LD_ADDR_VAR 0 10
55260: PUSH
55261: DOUBLE
55262: LD_VAR 0 15
55266: DEC
55267: ST_TO_ADDR
55268: LD_INT 5
55270: PUSH
55271: FOR_TO
55272: IFFALSE 55388
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55274: LD_ADDR_VAR 0 11
55278: PUSH
55279: LD_VAR 0 13
55283: PPUSH
55284: CALL_OW 250
55288: PPUSH
55289: LD_VAR 0 10
55293: PPUSH
55294: LD_INT 2
55296: PPUSH
55297: CALL_OW 272
55301: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55302: LD_ADDR_VAR 0 12
55306: PUSH
55307: LD_VAR 0 13
55311: PPUSH
55312: CALL_OW 251
55316: PPUSH
55317: LD_VAR 0 10
55321: PPUSH
55322: LD_INT 2
55324: PPUSH
55325: CALL_OW 273
55329: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55330: LD_VAR 0 11
55334: PPUSH
55335: LD_VAR 0 12
55339: PPUSH
55340: CALL_OW 488
55344: IFFALSE 55363
55346: PUSH
55347: LD_VAR 0 11
55351: PPUSH
55352: LD_VAR 0 12
55356: PPUSH
55357: CALL_OW 428
55361: NOT
55362: AND
55363: IFFALSE 55386
// begin ComMoveXY ( tmp , _x , _y ) ;
55365: LD_VAR 0 13
55369: PPUSH
55370: LD_VAR 0 11
55374: PPUSH
55375: LD_VAR 0 12
55379: PPUSH
55380: CALL_OW 111
// break ;
55384: GO 55388
// end ; end ;
55386: GO 55271
55388: POP
55389: POP
// end ; end ;
55390: GO 54703
55392: POP
55393: POP
// end ;
55394: LD_VAR 0 8
55398: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55399: LD_INT 0
55401: PPUSH
// result := true ;
55402: LD_ADDR_VAR 0 3
55406: PUSH
55407: LD_INT 1
55409: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55410: LD_VAR 0 2
55414: PUSH
55415: LD_INT 24
55417: DOUBLE
55418: EQUAL
55419: IFTRUE 55429
55421: LD_INT 33
55423: DOUBLE
55424: EQUAL
55425: IFTRUE 55429
55427: GO 55454
55429: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55430: LD_ADDR_VAR 0 3
55434: PUSH
55435: LD_INT 32
55437: PPUSH
55438: LD_VAR 0 1
55442: PPUSH
55443: CALL_OW 321
55447: PUSH
55448: LD_INT 2
55450: EQUAL
55451: ST_TO_ADDR
55452: GO 55770
55454: LD_INT 20
55456: DOUBLE
55457: EQUAL
55458: IFTRUE 55462
55460: GO 55487
55462: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55463: LD_ADDR_VAR 0 3
55467: PUSH
55468: LD_INT 6
55470: PPUSH
55471: LD_VAR 0 1
55475: PPUSH
55476: CALL_OW 321
55480: PUSH
55481: LD_INT 2
55483: EQUAL
55484: ST_TO_ADDR
55485: GO 55770
55487: LD_INT 22
55489: DOUBLE
55490: EQUAL
55491: IFTRUE 55501
55493: LD_INT 36
55495: DOUBLE
55496: EQUAL
55497: IFTRUE 55501
55499: GO 55526
55501: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55502: LD_ADDR_VAR 0 3
55506: PUSH
55507: LD_INT 15
55509: PPUSH
55510: LD_VAR 0 1
55514: PPUSH
55515: CALL_OW 321
55519: PUSH
55520: LD_INT 2
55522: EQUAL
55523: ST_TO_ADDR
55524: GO 55770
55526: LD_INT 30
55528: DOUBLE
55529: EQUAL
55530: IFTRUE 55534
55532: GO 55559
55534: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55535: LD_ADDR_VAR 0 3
55539: PUSH
55540: LD_INT 20
55542: PPUSH
55543: LD_VAR 0 1
55547: PPUSH
55548: CALL_OW 321
55552: PUSH
55553: LD_INT 2
55555: EQUAL
55556: ST_TO_ADDR
55557: GO 55770
55559: LD_INT 28
55561: DOUBLE
55562: EQUAL
55563: IFTRUE 55573
55565: LD_INT 21
55567: DOUBLE
55568: EQUAL
55569: IFTRUE 55573
55571: GO 55598
55573: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55574: LD_ADDR_VAR 0 3
55578: PUSH
55579: LD_INT 21
55581: PPUSH
55582: LD_VAR 0 1
55586: PPUSH
55587: CALL_OW 321
55591: PUSH
55592: LD_INT 2
55594: EQUAL
55595: ST_TO_ADDR
55596: GO 55770
55598: LD_INT 16
55600: DOUBLE
55601: EQUAL
55602: IFTRUE 55606
55604: GO 55631
55606: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55607: LD_ADDR_VAR 0 3
55611: PUSH
55612: LD_INT 84
55614: PPUSH
55615: LD_VAR 0 1
55619: PPUSH
55620: CALL_OW 321
55624: PUSH
55625: LD_INT 2
55627: EQUAL
55628: ST_TO_ADDR
55629: GO 55770
55631: LD_INT 19
55633: DOUBLE
55634: EQUAL
55635: IFTRUE 55645
55637: LD_INT 23
55639: DOUBLE
55640: EQUAL
55641: IFTRUE 55645
55643: GO 55670
55645: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55646: LD_ADDR_VAR 0 3
55650: PUSH
55651: LD_INT 83
55653: PPUSH
55654: LD_VAR 0 1
55658: PPUSH
55659: CALL_OW 321
55663: PUSH
55664: LD_INT 2
55666: EQUAL
55667: ST_TO_ADDR
55668: GO 55770
55670: LD_INT 17
55672: DOUBLE
55673: EQUAL
55674: IFTRUE 55678
55676: GO 55703
55678: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55679: LD_ADDR_VAR 0 3
55683: PUSH
55684: LD_INT 39
55686: PPUSH
55687: LD_VAR 0 1
55691: PPUSH
55692: CALL_OW 321
55696: PUSH
55697: LD_INT 2
55699: EQUAL
55700: ST_TO_ADDR
55701: GO 55770
55703: LD_INT 18
55705: DOUBLE
55706: EQUAL
55707: IFTRUE 55711
55709: GO 55736
55711: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55712: LD_ADDR_VAR 0 3
55716: PUSH
55717: LD_INT 40
55719: PPUSH
55720: LD_VAR 0 1
55724: PPUSH
55725: CALL_OW 321
55729: PUSH
55730: LD_INT 2
55732: EQUAL
55733: ST_TO_ADDR
55734: GO 55770
55736: LD_INT 27
55738: DOUBLE
55739: EQUAL
55740: IFTRUE 55744
55742: GO 55769
55744: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55745: LD_ADDR_VAR 0 3
55749: PUSH
55750: LD_INT 35
55752: PPUSH
55753: LD_VAR 0 1
55757: PPUSH
55758: CALL_OW 321
55762: PUSH
55763: LD_INT 2
55765: EQUAL
55766: ST_TO_ADDR
55767: GO 55770
55769: POP
// end ;
55770: LD_VAR 0 3
55774: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55775: LD_INT 0
55777: PPUSH
55778: PPUSH
55779: PPUSH
55780: PPUSH
55781: PPUSH
55782: PPUSH
55783: PPUSH
55784: PPUSH
55785: PPUSH
55786: PPUSH
55787: PPUSH
// result := false ;
55788: LD_ADDR_VAR 0 6
55792: PUSH
55793: LD_INT 0
55795: ST_TO_ADDR
// if btype = b_depot then
55796: LD_VAR 0 2
55800: PUSH
55801: LD_INT 0
55803: EQUAL
55804: IFFALSE 55816
// begin result := true ;
55806: LD_ADDR_VAR 0 6
55810: PUSH
55811: LD_INT 1
55813: ST_TO_ADDR
// exit ;
55814: GO 56670
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55816: LD_VAR 0 1
55820: NOT
55821: IFTRUE 55846
55823: PUSH
55824: LD_VAR 0 1
55828: PPUSH
55829: CALL_OW 266
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: IN
55844: NOT
55845: OR
55846: IFTRUE 55855
55848: PUSH
55849: LD_VAR 0 2
55853: NOT
55854: OR
55855: IFTRUE 55891
55857: PUSH
55858: LD_VAR 0 5
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: LD_INT 4
55877: PUSH
55878: LD_INT 5
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: IN
55889: NOT
55890: OR
55891: IFTRUE 55910
55893: PUSH
55894: LD_VAR 0 3
55898: PPUSH
55899: LD_VAR 0 4
55903: PPUSH
55904: CALL_OW 488
55908: NOT
55909: OR
55910: IFFALSE 55914
// exit ;
55912: GO 56670
// side := GetSide ( depot ) ;
55914: LD_ADDR_VAR 0 9
55918: PUSH
55919: LD_VAR 0 1
55923: PPUSH
55924: CALL_OW 255
55928: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55929: LD_VAR 0 9
55933: PPUSH
55934: LD_VAR 0 2
55938: PPUSH
55939: CALL 55399 0 2
55943: NOT
55944: IFFALSE 55948
// exit ;
55946: GO 56670
// pom := GetBase ( depot ) ;
55948: LD_ADDR_VAR 0 10
55952: PUSH
55953: LD_VAR 0 1
55957: PPUSH
55958: CALL_OW 274
55962: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55963: LD_ADDR_VAR 0 11
55967: PUSH
55968: LD_VAR 0 2
55972: PPUSH
55973: LD_VAR 0 1
55977: PPUSH
55978: CALL_OW 248
55982: PPUSH
55983: CALL_OW 450
55987: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55988: LD_VAR 0 10
55992: PPUSH
55993: LD_INT 1
55995: PPUSH
55996: CALL_OW 275
56000: PUSH
56001: LD_VAR 0 11
56005: PUSH
56006: LD_INT 1
56008: ARRAY
56009: GREATEREQUAL
56010: IFFALSE 56036
56012: PUSH
56013: LD_VAR 0 10
56017: PPUSH
56018: LD_INT 2
56020: PPUSH
56021: CALL_OW 275
56025: PUSH
56026: LD_VAR 0 11
56030: PUSH
56031: LD_INT 2
56033: ARRAY
56034: GREATEREQUAL
56035: AND
56036: IFFALSE 56062
56038: PUSH
56039: LD_VAR 0 10
56043: PPUSH
56044: LD_INT 3
56046: PPUSH
56047: CALL_OW 275
56051: PUSH
56052: LD_VAR 0 11
56056: PUSH
56057: LD_INT 3
56059: ARRAY
56060: GREATEREQUAL
56061: AND
56062: NOT
56063: IFFALSE 56067
// exit ;
56065: GO 56670
// if GetBType ( depot ) = b_depot then
56067: LD_VAR 0 1
56071: PPUSH
56072: CALL_OW 266
56076: PUSH
56077: LD_INT 0
56079: EQUAL
56080: IFFALSE 56092
// dist := 28 else
56082: LD_ADDR_VAR 0 14
56086: PUSH
56087: LD_INT 28
56089: ST_TO_ADDR
56090: GO 56100
// dist := 36 ;
56092: LD_ADDR_VAR 0 14
56096: PUSH
56097: LD_INT 36
56099: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56100: LD_VAR 0 1
56104: PPUSH
56105: LD_VAR 0 3
56109: PPUSH
56110: LD_VAR 0 4
56114: PPUSH
56115: CALL_OW 297
56119: PUSH
56120: LD_VAR 0 14
56124: GREATER
56125: IFFALSE 56129
// exit ;
56127: GO 56670
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56129: LD_ADDR_VAR 0 12
56133: PUSH
56134: LD_VAR 0 2
56138: PPUSH
56139: LD_VAR 0 3
56143: PPUSH
56144: LD_VAR 0 4
56148: PPUSH
56149: LD_VAR 0 5
56153: PPUSH
56154: LD_VAR 0 1
56158: PPUSH
56159: CALL_OW 248
56163: PPUSH
56164: LD_INT 0
56166: PPUSH
56167: CALL 56675 0 6
56171: ST_TO_ADDR
// if not hexes then
56172: LD_VAR 0 12
56176: NOT
56177: IFFALSE 56181
// exit ;
56179: GO 56670
// hex := GetHexInfo ( x , y ) ;
56181: LD_ADDR_VAR 0 15
56185: PUSH
56186: LD_VAR 0 3
56190: PPUSH
56191: LD_VAR 0 4
56195: PPUSH
56196: CALL_OW 546
56200: ST_TO_ADDR
// if hex [ 1 ] then
56201: LD_VAR 0 15
56205: PUSH
56206: LD_INT 1
56208: ARRAY
56209: IFFALSE 56213
// exit ;
56211: GO 56670
// height := hex [ 2 ] ;
56213: LD_ADDR_VAR 0 13
56217: PUSH
56218: LD_VAR 0 15
56222: PUSH
56223: LD_INT 2
56225: ARRAY
56226: ST_TO_ADDR
// for i = 1 to hexes do
56227: LD_ADDR_VAR 0 7
56231: PUSH
56232: DOUBLE
56233: LD_INT 1
56235: DEC
56236: ST_TO_ADDR
56237: LD_VAR 0 12
56241: PUSH
56242: FOR_TO
56243: IFFALSE 56587
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56245: LD_VAR 0 12
56249: PUSH
56250: LD_VAR 0 7
56254: ARRAY
56255: PUSH
56256: LD_INT 1
56258: ARRAY
56259: PPUSH
56260: LD_VAR 0 12
56264: PUSH
56265: LD_VAR 0 7
56269: ARRAY
56270: PUSH
56271: LD_INT 2
56273: ARRAY
56274: PPUSH
56275: CALL_OW 488
56279: NOT
56280: IFTRUE 56322
56282: PUSH
56283: LD_VAR 0 12
56287: PUSH
56288: LD_VAR 0 7
56292: ARRAY
56293: PUSH
56294: LD_INT 1
56296: ARRAY
56297: PPUSH
56298: LD_VAR 0 12
56302: PUSH
56303: LD_VAR 0 7
56307: ARRAY
56308: PUSH
56309: LD_INT 2
56311: ARRAY
56312: PPUSH
56313: CALL_OW 428
56317: PUSH
56318: LD_INT 0
56320: GREATER
56321: OR
56322: IFTRUE 56360
56324: PUSH
56325: LD_VAR 0 12
56329: PUSH
56330: LD_VAR 0 7
56334: ARRAY
56335: PUSH
56336: LD_INT 1
56338: ARRAY
56339: PPUSH
56340: LD_VAR 0 12
56344: PUSH
56345: LD_VAR 0 7
56349: ARRAY
56350: PUSH
56351: LD_INT 2
56353: ARRAY
56354: PPUSH
56355: CALL_OW 351
56359: OR
56360: IFFALSE 56366
// exit ;
56362: POP
56363: POP
56364: GO 56670
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56366: LD_ADDR_VAR 0 8
56370: PUSH
56371: LD_VAR 0 12
56375: PUSH
56376: LD_VAR 0 7
56380: ARRAY
56381: PUSH
56382: LD_INT 1
56384: ARRAY
56385: PPUSH
56386: LD_VAR 0 12
56390: PUSH
56391: LD_VAR 0 7
56395: ARRAY
56396: PUSH
56397: LD_INT 2
56399: ARRAY
56400: PPUSH
56401: CALL_OW 546
56405: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56406: LD_VAR 0 8
56410: PUSH
56411: LD_INT 1
56413: ARRAY
56414: IFTRUE 56436
56416: PUSH
56417: LD_VAR 0 8
56421: PUSH
56422: LD_INT 2
56424: ARRAY
56425: PUSH
56426: LD_VAR 0 13
56430: PUSH
56431: LD_INT 2
56433: PLUS
56434: GREATER
56435: OR
56436: IFTRUE 56458
56438: PUSH
56439: LD_VAR 0 8
56443: PUSH
56444: LD_INT 2
56446: ARRAY
56447: PUSH
56448: LD_VAR 0 13
56452: PUSH
56453: LD_INT 2
56455: MINUS
56456: LESS
56457: OR
56458: IFTRUE 56526
56460: PUSH
56461: LD_VAR 0 8
56465: PUSH
56466: LD_INT 3
56468: ARRAY
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 8
56475: PUSH
56476: LD_INT 9
56478: PUSH
56479: LD_INT 10
56481: PUSH
56482: LD_INT 11
56484: PUSH
56485: LD_INT 12
56487: PUSH
56488: LD_INT 13
56490: PUSH
56491: LD_INT 16
56493: PUSH
56494: LD_INT 17
56496: PUSH
56497: LD_INT 18
56499: PUSH
56500: LD_INT 19
56502: PUSH
56503: LD_INT 20
56505: PUSH
56506: LD_INT 21
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: IN
56524: NOT
56525: OR
56526: IFTRUE 56539
56528: PUSH
56529: LD_VAR 0 8
56533: PUSH
56534: LD_INT 5
56536: ARRAY
56537: NOT
56538: OR
56539: IFTRUE 56579
56541: PUSH
56542: LD_VAR 0 8
56546: PUSH
56547: LD_INT 6
56549: ARRAY
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: LD_INT 7
56559: PUSH
56560: LD_INT 9
56562: PUSH
56563: LD_INT 10
56565: PUSH
56566: LD_INT 11
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: IN
56577: NOT
56578: OR
56579: IFFALSE 56585
// exit ;
56581: POP
56582: POP
56583: GO 56670
// end ;
56585: GO 56242
56587: POP
56588: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56589: LD_VAR 0 9
56593: PPUSH
56594: LD_VAR 0 3
56598: PPUSH
56599: LD_VAR 0 4
56603: PPUSH
56604: LD_INT 20
56606: PPUSH
56607: CALL 48489 0 4
56611: PUSH
56612: LD_INT 4
56614: ARRAY
56615: IFFALSE 56619
// exit ;
56617: GO 56670
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56619: LD_VAR 0 2
56623: PUSH
56624: LD_INT 29
56626: PUSH
56627: LD_INT 30
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: IN
56634: IFFALSE 56658
56636: PUSH
56637: LD_VAR 0 3
56641: PPUSH
56642: LD_VAR 0 4
56646: PPUSH
56647: LD_VAR 0 9
56651: PPUSH
56652: CALL_OW 440
56656: NOT
56657: AND
56658: IFFALSE 56662
// exit ;
56660: GO 56670
// result := true ;
56662: LD_ADDR_VAR 0 6
56666: PUSH
56667: LD_INT 1
56669: ST_TO_ADDR
// end ;
56670: LD_VAR 0 6
56674: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56675: LD_INT 0
56677: PPUSH
56678: PPUSH
56679: PPUSH
56680: PPUSH
56681: PPUSH
56682: PPUSH
56683: PPUSH
56684: PPUSH
56685: PPUSH
56686: PPUSH
56687: PPUSH
56688: PPUSH
56689: PPUSH
56690: PPUSH
56691: PPUSH
56692: PPUSH
56693: PPUSH
56694: PPUSH
56695: PPUSH
56696: PPUSH
56697: PPUSH
56698: PPUSH
56699: PPUSH
56700: PPUSH
56701: PPUSH
56702: PPUSH
56703: PPUSH
56704: PPUSH
56705: PPUSH
56706: PPUSH
56707: PPUSH
56708: PPUSH
56709: PPUSH
56710: PPUSH
56711: PPUSH
56712: PPUSH
56713: PPUSH
56714: PPUSH
56715: PPUSH
56716: PPUSH
56717: PPUSH
56718: PPUSH
56719: PPUSH
56720: PPUSH
56721: PPUSH
56722: PPUSH
56723: PPUSH
56724: PPUSH
56725: PPUSH
56726: PPUSH
56727: PPUSH
56728: PPUSH
56729: PPUSH
56730: PPUSH
56731: PPUSH
56732: PPUSH
56733: PPUSH
56734: PPUSH
// result = [ ] ;
56735: LD_ADDR_VAR 0 7
56739: PUSH
56740: EMPTY
56741: ST_TO_ADDR
// temp_list = [ ] ;
56742: LD_ADDR_VAR 0 9
56746: PUSH
56747: EMPTY
56748: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56749: LD_VAR 0 4
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: LD_INT 4
56768: PUSH
56769: LD_INT 5
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: IN
56780: NOT
56781: IFTRUE 56824
56783: PUSH
56784: LD_VAR 0 1
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: IN
56799: IFFALSE 56823
56801: PUSH
56802: LD_VAR 0 5
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: LD_INT 3
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: IN
56821: NOT
56822: AND
56823: OR
56824: IFFALSE 56828
// exit ;
56826: GO 75227
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56828: LD_VAR 0 1
56832: PUSH
56833: LD_INT 6
56835: PUSH
56836: LD_INT 7
56838: PUSH
56839: LD_INT 8
56841: PUSH
56842: LD_INT 13
56844: PUSH
56845: LD_INT 12
56847: PUSH
56848: LD_INT 15
56850: PUSH
56851: LD_INT 11
56853: PUSH
56854: LD_INT 14
56856: PUSH
56857: LD_INT 10
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: IN
56871: IFFALSE 56881
// btype = b_lab ;
56873: LD_ADDR_VAR 0 1
56877: PUSH
56878: LD_INT 6
56880: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56881: LD_VAR 0 6
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: IN
56900: NOT
56901: IFTRUE 56969
56903: PUSH
56904: LD_VAR 0 1
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: LD_INT 3
56920: PUSH
56921: LD_INT 6
56923: PUSH
56924: LD_INT 36
56926: PUSH
56927: LD_INT 4
56929: PUSH
56930: LD_INT 5
56932: PUSH
56933: LD_INT 31
56935: PUSH
56936: LD_INT 32
56938: PUSH
56939: LD_INT 33
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: IN
56955: NOT
56956: IFFALSE 56968
56958: PUSH
56959: LD_VAR 0 6
56963: PUSH
56964: LD_INT 1
56966: EQUAL
56967: AND
56968: OR
56969: IFTRUE 57001
56971: PUSH
56972: LD_VAR 0 1
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: LD_INT 3
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: IN
56987: NOT
56988: IFFALSE 57000
56990: PUSH
56991: LD_VAR 0 6
56995: PUSH
56996: LD_INT 2
56998: EQUAL
56999: AND
57000: OR
57001: IFFALSE 57011
// mode = 0 ;
57003: LD_ADDR_VAR 0 6
57007: PUSH
57008: LD_INT 0
57010: ST_TO_ADDR
// case mode of 0 :
57011: LD_VAR 0 6
57015: PUSH
57016: LD_INT 0
57018: DOUBLE
57019: EQUAL
57020: IFTRUE 57024
57022: GO 68477
57024: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57025: LD_ADDR_VAR 0 11
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 3
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57218: LD_ADDR_VAR 0 12
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: NEG
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57414: LD_ADDR_VAR 0 13
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 2
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 3
57585: NEG
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57613: LD_ADDR_VAR 0 14
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 2
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 3
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57809: LD_ADDR_VAR 0 15
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 3
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58002: LD_ADDR_VAR 0 16
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: LD_INT 3
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58195: LD_ADDR_VAR 0 17
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58425: LD_ADDR_VAR 0 18
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: LD_INT 2
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58655: LD_ADDR_VAR 0 19
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58885: LD_ADDR_VAR 0 20
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 2
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59115: LD_ADDR_VAR 0 21
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: NEG
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: LD_INT 2
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59345: LD_ADDR_VAR 0 22
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: LD_INT 1
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59575: LD_ADDR_VAR 0 23
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: NEG
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: NEG
59787: PUSH
59788: LD_INT 3
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: LD_INT 3
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: LD_INT 2
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59855: LD_ADDR_VAR 0 24
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 2
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 3
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60131: LD_ADDR_VAR 0 25
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 2
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 2
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: LD_INT 2
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: LD_INT 3
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60405: LD_ADDR_VAR 0 26
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: NEG
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: LD_INT 3
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 3
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: NEG
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60681: LD_ADDR_VAR 0 27
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: LD_INT 2
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 2
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: LD_INT 2
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 2
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 3
60926: NEG
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60961: LD_ADDR_VAR 0 28
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 3
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 3
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 3
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: NEG
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61243: LD_ADDR_VAR 0 29
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 2
61409: NEG
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 2
61421: NEG
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: NEG
61434: PUSH
61435: LD_INT 3
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 3
61487: NEG
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61522: LD_ADDR_VAR 0 30
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 2
61699: NEG
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: LD_INT 3
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 3
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61800: LD_ADDR_VAR 0 31
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: LD_INT 2
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: PUSH
61925: LD_INT 2
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: NEG
61990: PUSH
61991: LD_INT 3
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 1
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 3
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: LD_INT 3
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: LD_INT 2
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62078: LD_ADDR_VAR 0 32
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: NEG
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_INT 2
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 2
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 2
62244: NEG
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 2
62255: NEG
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: LD_INT 3
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 3
62290: PUSH
62291: LD_INT 2
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 2
62300: PUSH
62301: LD_INT 3
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 3
62321: NEG
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62356: LD_ADDR_VAR 0 33
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 2
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 2
62534: NEG
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 2
62546: NEG
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 3
62600: NEG
62601: PUSH
62602: LD_INT 2
62604: NEG
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62635: LD_ADDR_VAR 0 34
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: LD_INT 2
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 2
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 2
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 3
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: LD_INT 2
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 3
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: LD_INT 3
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 2
62869: NEG
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 3
62880: NEG
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62915: LD_ADDR_VAR 0 35
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 2
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63027: LD_ADDR_VAR 0 36
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: NEG
63109: PUSH
63110: LD_INT 2
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: LD_INT 2
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63139: LD_ADDR_VAR 0 37
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63251: LD_ADDR_VAR 0 38
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 2
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63363: LD_ADDR_VAR 0 39
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: LD_INT 2
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: LD_INT 2
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63475: LD_ADDR_VAR 0 40
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63587: LD_ADDR_VAR 0 41
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: PUSH
63626: LD_INT 1
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 1
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: LD_INT 1
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: LD_INT 2
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 2
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 2
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: LD_INT 2
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: LD_INT 1
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 2
63765: NEG
63766: PUSH
63767: LD_INT 2
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: LD_INT 3
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 2
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 3
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 3
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 3
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: LD_INT 3
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 2
63840: PUSH
63841: LD_INT 3
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 3
63872: NEG
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 3
63884: NEG
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 3
63896: NEG
63897: PUSH
63898: LD_INT 3
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63937: LD_ADDR_VAR 0 42
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: LD_INT 2
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 2
64033: NEG
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 2
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: LD_INT 2
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: LD_INT 2
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 2
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: LD_INT 1
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 2
64103: NEG
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: NEG
64116: PUSH
64117: LD_INT 2
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: LD_INT 3
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: LD_INT 3
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 3
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: PUSH
64174: LD_INT 2
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 3
64183: PUSH
64184: LD_INT 3
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 2
64193: PUSH
64194: LD_INT 3
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: LD_INT 3
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: LD_INT 3
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: LD_INT 2
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 3
64234: NEG
64235: PUSH
64236: LD_INT 2
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 3
64246: NEG
64247: PUSH
64248: LD_INT 3
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64287: LD_ADDR_VAR 0 43
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: LD_INT 2
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 2
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: LD_INT 2
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 2
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 2
64453: NEG
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 2
64464: NEG
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: LD_INT 3
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: LD_INT 3
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 2
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 3
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 3
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: LD_INT 3
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 3
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 1
64561: NEG
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 2
64572: NEG
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: NEG
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 3
64594: NEG
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64635: LD_ADDR_VAR 0 44
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 1
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 2
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 2
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 2
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 2
64790: NEG
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 2
64801: NEG
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 2
64813: NEG
64814: PUSH
64815: LD_INT 2
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 2
64825: NEG
64826: PUSH
64827: LD_INT 3
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 3
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 3
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 3
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: LD_INT 3
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: LD_INT 3
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 2
64898: NEG
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 3
64909: NEG
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 3
64920: NEG
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 3
64932: NEG
64933: PUSH
64934: LD_INT 2
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 3
64944: NEG
64945: PUSH
64946: LD_INT 3
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64985: LD_ADDR_VAR 0 45
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: LD_INT 2
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: LD_INT 2
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: LD_INT 2
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 2
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: LD_INT 1
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 2
65163: NEG
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: LD_INT 3
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: LD_INT 3
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: LD_INT 3
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: LD_INT 2
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 3
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: LD_INT 3
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: LD_INT 3
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: PUSH
65252: LD_INT 3
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: LD_INT 3
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: NEG
65272: PUSH
65273: LD_INT 2
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: LD_INT 2
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 3
65294: NEG
65295: PUSH
65296: LD_INT 3
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65335: LD_ADDR_VAR 0 46
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_INT 1
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: LD_INT 1
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: LD_INT 2
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: LD_INT 1
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 2
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: LD_INT 1
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: LD_INT 2
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: LD_INT 1
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 2
65501: NEG
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: NEG
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 1
65524: NEG
65525: PUSH
65526: LD_INT 3
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: LD_INT 3
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: LD_INT 2
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 2
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 3
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 3
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 3
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 0
65599: PUSH
65600: LD_INT 3
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: LD_INT 2
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: NEG
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 3
65631: NEG
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 3
65642: NEG
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65683: LD_ADDR_VAR 0 47
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: LD_INT 1
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: PUSH
65722: LD_INT 1
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: NEG
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: LD_INT 2
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: LD_INT 2
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 2
65810: NEG
65811: PUSH
65812: LD_INT 2
65814: NEG
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65834: LD_ADDR_VAR 0 48
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 1
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 1
65892: NEG
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 1
65903: NEG
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: LD_INT 2
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: LD_INT 2
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: LD_INT 1
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 2
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 2
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65981: LD_ADDR_VAR 0 49
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: NEG
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 1
66050: NEG
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: LD_INT 1
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 2
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: LD_INT 1
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: LD_INT 2
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: LD_INT 2
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66125: LD_ADDR_VAR 0 50
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 1
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 1
66183: NEG
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 1
66194: NEG
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 2
66206: PUSH
66207: LD_INT 1
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 2
66216: PUSH
66217: LD_INT 2
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 1
66226: PUSH
66227: LD_INT 2
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: LD_INT 2
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66269: LD_ADDR_VAR 0 51
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: LD_INT 0
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: LD_INT 1
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 1
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: LD_INT 1
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 1
66327: NEG
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: LD_INT 1
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 1
66350: PUSH
66351: LD_INT 2
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: LD_INT 2
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: LD_INT 1
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 2
66381: NEG
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66416: LD_ADDR_VAR 0 52
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: LD_INT 1
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 1
66474: NEG
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: LD_INT 1
66489: NEG
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: LD_INT 2
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: NEG
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 2
66531: NEG
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 2
66543: NEG
66544: PUSH
66545: LD_INT 2
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66567: LD_ADDR_VAR 0 53
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 1
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: NEG
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: NEG
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: LD_INT 2
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 2
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 2
66682: PUSH
66683: LD_INT 0
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 2
66692: PUSH
66693: LD_INT 1
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 2
66702: PUSH
66703: LD_INT 2
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 1
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 1
66732: NEG
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 2
66743: NEG
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 2
66754: NEG
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 2
66766: NEG
66767: PUSH
66768: LD_INT 2
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66797: LD_ADDR_VAR 0 54
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: LD_INT 1
66817: NEG
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: LD_INT 0
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: LD_INT 1
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 1
66855: NEG
66856: PUSH
66857: LD_INT 0
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: LD_INT 2
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 2
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: LD_INT 2
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 1
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 0
66952: PUSH
66953: LD_INT 2
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 1
66962: NEG
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 2
66973: NEG
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 2
66984: NEG
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 2
66996: NEG
66997: PUSH
66998: LD_INT 2
67000: NEG
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67027: LD_ADDR_VAR 0 55
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: LD_INT 1
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 1
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 1
67096: NEG
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 1
67108: NEG
67109: PUSH
67110: LD_INT 2
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 1
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 2
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 2
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 2
67162: PUSH
67163: LD_INT 2
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: LD_INT 2
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: LD_INT 2
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 1
67192: NEG
67193: PUSH
67194: LD_INT 1
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 2
67203: NEG
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 2
67214: NEG
67215: PUSH
67216: LD_INT 1
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 2
67226: NEG
67227: PUSH
67228: LD_INT 2
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67257: LD_ADDR_VAR 0 56
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: LD_INT 1
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 1
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: LD_INT 1
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: LD_INT 1
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 1
67315: NEG
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 1
67326: NEG
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 2
67342: NEG
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: LD_INT 2
67353: NEG
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 2
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 2
67382: PUSH
67383: LD_INT 1
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 2
67392: PUSH
67393: LD_INT 2
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: LD_INT 2
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: LD_INT 2
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 2
67433: NEG
67434: PUSH
67435: LD_INT 0
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 2
67444: NEG
67445: PUSH
67446: LD_INT 1
67448: NEG
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 2
67456: NEG
67457: PUSH
67458: LD_INT 2
67460: NEG
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67487: LD_ADDR_VAR 0 57
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: LD_INT 1
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 1
67525: PUSH
67526: LD_INT 1
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 0
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 1
67545: NEG
67546: PUSH
67547: LD_INT 0
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 1
67556: NEG
67557: PUSH
67558: LD_INT 1
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: PUSH
67570: LD_INT 2
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: LD_INT 2
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 1
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 2
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 2
67612: PUSH
67613: LD_INT 1
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 2
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: LD_INT 2
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: LD_INT 2
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 1
67652: NEG
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 2
67663: NEG
67664: PUSH
67665: LD_INT 0
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 2
67674: NEG
67675: PUSH
67676: LD_INT 1
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 2
67686: NEG
67687: PUSH
67688: LD_INT 2
67690: NEG
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67717: LD_ADDR_VAR 0 58
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: LD_INT 0
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: LD_INT 1
67737: NEG
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 1
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: LD_INT 1
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 0
67765: PUSH
67766: LD_INT 1
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: NEG
67776: PUSH
67777: LD_INT 0
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 1
67786: NEG
67787: PUSH
67788: LD_INT 1
67790: NEG
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 1
67798: NEG
67799: PUSH
67800: LD_INT 2
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: LD_INT 2
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: PUSH
67822: LD_INT 1
67824: NEG
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 2
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 2
67842: PUSH
67843: LD_INT 1
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 2
67852: PUSH
67853: LD_INT 2
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 1
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: PUSH
67884: LD_INT 1
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 2
67893: NEG
67894: PUSH
67895: LD_INT 0
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: NEG
67905: PUSH
67906: LD_INT 1
67908: NEG
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 2
67916: NEG
67917: PUSH
67918: LD_INT 2
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67947: LD_ADDR_VAR 0 59
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 0
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 1
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: LD_INT 1
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 0
67995: PUSH
67996: LD_INT 1
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 1
68005: NEG
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 1
68016: NEG
68017: PUSH
68018: LD_INT 1
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68035: LD_ADDR_VAR 0 60
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: LD_INT 0
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: LD_INT 1
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 1
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 1
68073: PUSH
68074: LD_INT 1
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: LD_INT 1
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 1
68093: NEG
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 1
68104: NEG
68105: PUSH
68106: LD_INT 1
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68123: LD_ADDR_VAR 0 61
68127: PUSH
68128: LD_INT 0
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 1
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: LD_INT 1
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 0
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 1
68192: NEG
68193: PUSH
68194: LD_INT 1
68196: NEG
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68211: LD_ADDR_VAR 0 62
68215: PUSH
68216: LD_INT 0
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: LD_INT 1
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 1
68239: PUSH
68240: LD_INT 0
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 1
68249: PUSH
68250: LD_INT 1
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: LD_INT 1
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 1
68269: NEG
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 1
68280: NEG
68281: PUSH
68282: LD_INT 1
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68299: LD_ADDR_VAR 0 63
68303: PUSH
68304: LD_INT 0
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 0
68316: PUSH
68317: LD_INT 1
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 1
68327: PUSH
68328: LD_INT 0
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 1
68337: PUSH
68338: LD_INT 1
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 0
68347: PUSH
68348: LD_INT 1
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 1
68357: NEG
68358: PUSH
68359: LD_INT 0
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 1
68368: NEG
68369: PUSH
68370: LD_INT 1
68372: NEG
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68387: LD_ADDR_VAR 0 64
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: LD_INT 0
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: LD_INT 1
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 1
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 1
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: LD_INT 1
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 1
68445: NEG
68446: PUSH
68447: LD_INT 0
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 1
68456: NEG
68457: PUSH
68458: LD_INT 1
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: ST_TO_ADDR
// end ; 1 :
68475: GO 74372
68477: LD_INT 1
68479: DOUBLE
68480: EQUAL
68481: IFTRUE 68485
68483: GO 71108
68485: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68486: LD_ADDR_VAR 0 11
68490: PUSH
68491: LD_INT 1
68493: NEG
68494: PUSH
68495: LD_INT 3
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: LD_INT 3
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: PUSH
68517: LD_INT 2
68519: NEG
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: LIST
68529: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68530: LD_ADDR_VAR 0 12
68534: PUSH
68535: LD_INT 2
68537: PUSH
68538: LD_INT 1
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 3
68548: PUSH
68549: LD_INT 0
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 3
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: LIST
68570: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68571: LD_ADDR_VAR 0 13
68575: PUSH
68576: LD_INT 3
68578: PUSH
68579: LD_INT 2
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 3
68588: PUSH
68589: LD_INT 3
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 2
68598: PUSH
68599: LD_INT 3
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: LIST
68610: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68611: LD_ADDR_VAR 0 14
68615: PUSH
68616: LD_INT 1
68618: PUSH
68619: LD_INT 3
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 0
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 1
68638: NEG
68639: PUSH
68640: LD_INT 2
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68652: LD_ADDR_VAR 0 15
68656: PUSH
68657: LD_INT 2
68659: NEG
68660: PUSH
68661: LD_INT 1
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 3
68670: NEG
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 3
68681: NEG
68682: PUSH
68683: LD_INT 1
68685: NEG
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: LIST
68695: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68696: LD_ADDR_VAR 0 16
68700: PUSH
68701: LD_INT 2
68703: NEG
68704: PUSH
68705: LD_INT 3
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 3
68715: NEG
68716: PUSH
68717: LD_INT 2
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 3
68727: NEG
68728: PUSH
68729: LD_INT 3
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: LIST
68741: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68742: LD_ADDR_VAR 0 17
68746: PUSH
68747: LD_INT 1
68749: NEG
68750: PUSH
68751: LD_INT 3
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: LD_INT 3
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 1
68772: PUSH
68773: LD_INT 2
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: LIST
68785: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68786: LD_ADDR_VAR 0 18
68790: PUSH
68791: LD_INT 2
68793: PUSH
68794: LD_INT 1
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 3
68804: PUSH
68805: LD_INT 0
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 3
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: LIST
68826: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68827: LD_ADDR_VAR 0 19
68831: PUSH
68832: LD_INT 3
68834: PUSH
68835: LD_INT 2
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: PUSH
68845: LD_INT 3
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 2
68854: PUSH
68855: LD_INT 3
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68867: LD_ADDR_VAR 0 20
68871: PUSH
68872: LD_INT 1
68874: PUSH
68875: LD_INT 3
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: LD_INT 3
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 1
68894: NEG
68895: PUSH
68896: LD_INT 2
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: LIST
68907: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68908: LD_ADDR_VAR 0 21
68912: PUSH
68913: LD_INT 2
68915: NEG
68916: PUSH
68917: LD_INT 1
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 3
68926: NEG
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 3
68937: NEG
68938: PUSH
68939: LD_INT 1
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: LIST
68951: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68952: LD_ADDR_VAR 0 22
68956: PUSH
68957: LD_INT 2
68959: NEG
68960: PUSH
68961: LD_INT 3
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 3
68971: NEG
68972: PUSH
68973: LD_INT 2
68975: NEG
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 3
68983: NEG
68984: PUSH
68985: LD_INT 3
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: LIST
68997: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68998: LD_ADDR_VAR 0 23
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: LD_INT 3
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: LD_INT 4
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 1
69028: PUSH
69029: LD_INT 3
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: LIST
69041: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69042: LD_ADDR_VAR 0 24
69046: PUSH
69047: LD_INT 3
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: LD_INT 1
69062: NEG
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 4
69070: PUSH
69071: LD_INT 1
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: LIST
69082: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69083: LD_ADDR_VAR 0 25
69087: PUSH
69088: LD_INT 3
69090: PUSH
69091: LD_INT 3
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 4
69100: PUSH
69101: LD_INT 3
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 3
69110: PUSH
69111: LD_INT 4
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: LIST
69122: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69123: LD_ADDR_VAR 0 26
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: LD_INT 3
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 1
69140: PUSH
69141: LD_INT 4
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: NEG
69151: PUSH
69152: LD_INT 3
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: LIST
69163: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69164: LD_ADDR_VAR 0 27
69168: PUSH
69169: LD_INT 3
69171: NEG
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 3
69182: NEG
69183: PUSH
69184: LD_INT 1
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 4
69193: NEG
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: LIST
69207: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69208: LD_ADDR_VAR 0 28
69212: PUSH
69213: LD_INT 3
69215: NEG
69216: PUSH
69217: LD_INT 3
69219: NEG
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 3
69227: NEG
69228: PUSH
69229: LD_INT 4
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 4
69239: NEG
69240: PUSH
69241: LD_INT 3
69243: NEG
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: LIST
69253: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69254: LD_ADDR_VAR 0 29
69258: PUSH
69259: LD_INT 1
69261: NEG
69262: PUSH
69263: LD_INT 3
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 0
69273: PUSH
69274: LD_INT 3
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 1
69284: PUSH
69285: LD_INT 2
69287: NEG
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 1
69295: NEG
69296: PUSH
69297: LD_INT 4
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: LD_INT 4
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 1
69318: PUSH
69319: LD_INT 3
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 1
69329: NEG
69330: PUSH
69331: LD_INT 5
69333: NEG
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: LD_INT 5
69344: NEG
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 1
69352: PUSH
69353: LD_INT 4
69355: NEG
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 1
69363: NEG
69364: PUSH
69365: LD_INT 6
69367: NEG
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 0
69375: PUSH
69376: LD_INT 6
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 1
69386: PUSH
69387: LD_INT 5
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69409: LD_ADDR_VAR 0 30
69413: PUSH
69414: LD_INT 2
69416: PUSH
69417: LD_INT 1
69419: NEG
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 3
69427: PUSH
69428: LD_INT 0
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 3
69437: PUSH
69438: LD_INT 1
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 3
69447: PUSH
69448: LD_INT 1
69450: NEG
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 4
69458: PUSH
69459: LD_INT 0
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 4
69468: PUSH
69469: LD_INT 1
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 4
69478: PUSH
69479: LD_INT 1
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 5
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 5
69499: PUSH
69500: LD_INT 1
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 5
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 6
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 6
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69552: LD_ADDR_VAR 0 31
69556: PUSH
69557: LD_INT 3
69559: PUSH
69560: LD_INT 2
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 3
69569: PUSH
69570: LD_INT 3
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 2
69579: PUSH
69580: LD_INT 3
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 4
69589: PUSH
69590: LD_INT 3
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 4
69599: PUSH
69600: LD_INT 4
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 3
69609: PUSH
69610: LD_INT 4
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 5
69619: PUSH
69620: LD_INT 4
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 5
69629: PUSH
69630: LD_INT 5
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 4
69639: PUSH
69640: LD_INT 5
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 6
69649: PUSH
69650: LD_INT 5
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 6
69659: PUSH
69660: LD_INT 6
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 5
69669: PUSH
69670: LD_INT 6
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69691: LD_ADDR_VAR 0 32
69695: PUSH
69696: LD_INT 1
69698: PUSH
69699: LD_INT 3
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 1
69718: NEG
69719: PUSH
69720: LD_INT 2
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 1
69729: PUSH
69730: LD_INT 4
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: LD_INT 4
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 1
69749: NEG
69750: PUSH
69751: LD_INT 3
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: PUSH
69761: LD_INT 5
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 5
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 1
69780: NEG
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: PUSH
69792: LD_INT 6
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 0
69801: PUSH
69802: LD_INT 6
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 1
69811: NEG
69812: PUSH
69813: LD_INT 5
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69834: LD_ADDR_VAR 0 33
69838: PUSH
69839: LD_INT 2
69841: NEG
69842: PUSH
69843: LD_INT 1
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 3
69852: NEG
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 3
69863: NEG
69864: PUSH
69865: LD_INT 1
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 3
69875: NEG
69876: PUSH
69877: LD_INT 1
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 4
69886: NEG
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 4
69897: NEG
69898: PUSH
69899: LD_INT 1
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 4
69909: NEG
69910: PUSH
69911: LD_INT 1
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 5
69920: NEG
69921: PUSH
69922: LD_INT 0
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 5
69931: NEG
69932: PUSH
69933: LD_INT 1
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 5
69943: NEG
69944: PUSH
69945: LD_INT 1
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 6
69954: NEG
69955: PUSH
69956: LD_INT 0
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 6
69965: NEG
69966: PUSH
69967: LD_INT 1
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69989: LD_ADDR_VAR 0 34
69993: PUSH
69994: LD_INT 2
69996: NEG
69997: PUSH
69998: LD_INT 3
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 3
70008: NEG
70009: PUSH
70010: LD_INT 2
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 3
70020: NEG
70021: PUSH
70022: LD_INT 3
70024: NEG
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 3
70032: NEG
70033: PUSH
70034: LD_INT 4
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 4
70044: NEG
70045: PUSH
70046: LD_INT 3
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 4
70056: NEG
70057: PUSH
70058: LD_INT 4
70060: NEG
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 4
70068: NEG
70069: PUSH
70070: LD_INT 5
70072: NEG
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 5
70080: NEG
70081: PUSH
70082: LD_INT 4
70084: NEG
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 5
70092: NEG
70093: PUSH
70094: LD_INT 5
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 5
70104: NEG
70105: PUSH
70106: LD_INT 6
70108: NEG
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 6
70116: NEG
70117: PUSH
70118: LD_INT 5
70120: NEG
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 6
70128: NEG
70129: PUSH
70130: LD_INT 6
70132: NEG
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70152: LD_ADDR_VAR 0 41
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: LD_INT 2
70162: NEG
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 1
70170: NEG
70171: PUSH
70172: LD_INT 3
70174: NEG
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 1
70182: PUSH
70183: LD_INT 2
70185: NEG
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: LIST
70195: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70196: LD_ADDR_VAR 0 42
70200: PUSH
70201: LD_INT 2
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 2
70213: PUSH
70214: LD_INT 1
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 3
70224: PUSH
70225: LD_INT 1
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: LIST
70236: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70237: LD_ADDR_VAR 0 43
70241: PUSH
70242: LD_INT 2
70244: PUSH
70245: LD_INT 2
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 3
70254: PUSH
70255: LD_INT 2
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 2
70264: PUSH
70265: LD_INT 3
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: LIST
70276: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70277: LD_ADDR_VAR 0 44
70281: PUSH
70282: LD_INT 0
70284: PUSH
70285: LD_INT 2
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 1
70294: PUSH
70295: LD_INT 3
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 1
70304: NEG
70305: PUSH
70306: LD_INT 2
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: LIST
70317: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70318: LD_ADDR_VAR 0 45
70322: PUSH
70323: LD_INT 2
70325: NEG
70326: PUSH
70327: LD_INT 0
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 2
70336: NEG
70337: PUSH
70338: LD_INT 1
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 3
70347: NEG
70348: PUSH
70349: LD_INT 1
70351: NEG
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: LIST
70361: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70362: LD_ADDR_VAR 0 46
70366: PUSH
70367: LD_INT 2
70369: NEG
70370: PUSH
70371: LD_INT 2
70373: NEG
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 2
70381: NEG
70382: PUSH
70383: LD_INT 3
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 3
70393: NEG
70394: PUSH
70395: LD_INT 2
70397: NEG
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: LIST
70407: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70408: LD_ADDR_VAR 0 47
70412: PUSH
70413: LD_INT 2
70415: NEG
70416: PUSH
70417: LD_INT 3
70419: NEG
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 1
70427: NEG
70428: PUSH
70429: LD_INT 3
70431: NEG
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70441: LD_ADDR_VAR 0 48
70445: PUSH
70446: LD_INT 1
70448: PUSH
70449: LD_INT 2
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 2
70459: PUSH
70460: LD_INT 1
70462: NEG
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70472: LD_ADDR_VAR 0 49
70476: PUSH
70477: LD_INT 3
70479: PUSH
70480: LD_INT 1
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 3
70489: PUSH
70490: LD_INT 2
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70501: LD_ADDR_VAR 0 50
70505: PUSH
70506: LD_INT 2
70508: PUSH
70509: LD_INT 3
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 1
70518: PUSH
70519: LD_INT 3
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70530: LD_ADDR_VAR 0 51
70534: PUSH
70535: LD_INT 1
70537: NEG
70538: PUSH
70539: LD_INT 2
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 2
70548: NEG
70549: PUSH
70550: LD_INT 1
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70561: LD_ADDR_VAR 0 52
70565: PUSH
70566: LD_INT 3
70568: NEG
70569: PUSH
70570: LD_INT 1
70572: NEG
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 3
70580: NEG
70581: PUSH
70582: LD_INT 2
70584: NEG
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70594: LD_ADDR_VAR 0 53
70598: PUSH
70599: LD_INT 1
70601: NEG
70602: PUSH
70603: LD_INT 3
70605: NEG
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 0
70613: PUSH
70614: LD_INT 3
70616: NEG
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 1
70624: PUSH
70625: LD_INT 2
70627: NEG
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: LIST
70637: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70638: LD_ADDR_VAR 0 54
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: LD_INT 1
70648: NEG
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 3
70656: PUSH
70657: LD_INT 0
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 3
70666: PUSH
70667: LD_INT 1
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: LIST
70678: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70679: LD_ADDR_VAR 0 55
70683: PUSH
70684: LD_INT 3
70686: PUSH
70687: LD_INT 2
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 3
70696: PUSH
70697: LD_INT 3
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 2
70706: PUSH
70707: LD_INT 3
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: LIST
70718: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70719: LD_ADDR_VAR 0 56
70723: PUSH
70724: LD_INT 1
70726: PUSH
70727: LD_INT 3
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 0
70736: PUSH
70737: LD_INT 3
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 1
70746: NEG
70747: PUSH
70748: LD_INT 2
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: LIST
70759: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70760: LD_ADDR_VAR 0 57
70764: PUSH
70765: LD_INT 2
70767: NEG
70768: PUSH
70769: LD_INT 1
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 3
70778: NEG
70779: PUSH
70780: LD_INT 0
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 3
70789: NEG
70790: PUSH
70791: LD_INT 1
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: LIST
70803: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70804: LD_ADDR_VAR 0 58
70808: PUSH
70809: LD_INT 2
70811: NEG
70812: PUSH
70813: LD_INT 3
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 3
70823: NEG
70824: PUSH
70825: LD_INT 2
70827: NEG
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 3
70835: NEG
70836: PUSH
70837: LD_INT 3
70839: NEG
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: LIST
70849: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70850: LD_ADDR_VAR 0 59
70854: PUSH
70855: LD_INT 1
70857: NEG
70858: PUSH
70859: LD_INT 2
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: LD_INT 2
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 1
70880: PUSH
70881: LD_INT 1
70883: NEG
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: LIST
70893: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70894: LD_ADDR_VAR 0 60
70898: PUSH
70899: LD_INT 1
70901: PUSH
70902: LD_INT 1
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 2
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 2
70922: PUSH
70923: LD_INT 1
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: LIST
70934: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70935: LD_ADDR_VAR 0 61
70939: PUSH
70940: LD_INT 2
70942: PUSH
70943: LD_INT 1
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 2
70952: PUSH
70953: LD_INT 2
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 1
70962: PUSH
70963: LD_INT 2
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: LIST
70974: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70975: LD_ADDR_VAR 0 62
70979: PUSH
70980: LD_INT 1
70982: PUSH
70983: LD_INT 2
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 0
70992: PUSH
70993: LD_INT 2
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 1
71002: NEG
71003: PUSH
71004: LD_INT 1
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: LIST
71015: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71016: LD_ADDR_VAR 0 63
71020: PUSH
71021: LD_INT 1
71023: NEG
71024: PUSH
71025: LD_INT 1
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 2
71034: NEG
71035: PUSH
71036: LD_INT 0
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 2
71045: NEG
71046: PUSH
71047: LD_INT 1
71049: NEG
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: LIST
71059: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71060: LD_ADDR_VAR 0 64
71064: PUSH
71065: LD_INT 1
71067: NEG
71068: PUSH
71069: LD_INT 2
71071: NEG
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 2
71079: NEG
71080: PUSH
71081: LD_INT 1
71083: NEG
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 2
71091: NEG
71092: PUSH
71093: LD_INT 2
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: LIST
71105: ST_TO_ADDR
// end ; 2 :
71106: GO 74372
71108: LD_INT 2
71110: DOUBLE
71111: EQUAL
71112: IFTRUE 71116
71114: GO 74371
71116: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71117: LD_ADDR_VAR 0 29
71121: PUSH
71122: LD_INT 4
71124: PUSH
71125: LD_INT 0
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 4
71134: PUSH
71135: LD_INT 1
71137: NEG
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 5
71145: PUSH
71146: LD_INT 0
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 5
71155: PUSH
71156: LD_INT 1
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 4
71165: PUSH
71166: LD_INT 1
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 3
71175: PUSH
71176: LD_INT 0
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 3
71185: PUSH
71186: LD_INT 1
71188: NEG
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 3
71196: PUSH
71197: LD_INT 2
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 5
71207: PUSH
71208: LD_INT 2
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 3
71217: PUSH
71218: LD_INT 3
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 3
71227: PUSH
71228: LD_INT 2
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 4
71237: PUSH
71238: LD_INT 3
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 4
71247: PUSH
71248: LD_INT 4
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 3
71257: PUSH
71258: LD_INT 4
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 2
71267: PUSH
71268: LD_INT 3
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: LD_INT 2
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 4
71287: PUSH
71288: LD_INT 2
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 2
71297: PUSH
71298: LD_INT 4
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 0
71307: PUSH
71308: LD_INT 4
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 0
71317: PUSH
71318: LD_INT 3
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 1
71327: PUSH
71328: LD_INT 4
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 1
71337: PUSH
71338: LD_INT 5
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 0
71347: PUSH
71348: LD_INT 5
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 1
71357: NEG
71358: PUSH
71359: LD_INT 4
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 1
71368: NEG
71369: PUSH
71370: LD_INT 3
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 2
71379: PUSH
71380: LD_INT 5
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 2
71389: NEG
71390: PUSH
71391: LD_INT 3
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 3
71400: NEG
71401: PUSH
71402: LD_INT 0
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 3
71411: NEG
71412: PUSH
71413: LD_INT 1
71415: NEG
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 2
71423: NEG
71424: PUSH
71425: LD_INT 0
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 2
71434: NEG
71435: PUSH
71436: LD_INT 1
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 3
71445: NEG
71446: PUSH
71447: LD_INT 1
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 4
71456: NEG
71457: PUSH
71458: LD_INT 0
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 4
71467: NEG
71468: PUSH
71469: LD_INT 1
71471: NEG
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 4
71479: NEG
71480: PUSH
71481: LD_INT 2
71483: NEG
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PUSH
71489: LD_INT 2
71491: NEG
71492: PUSH
71493: LD_INT 2
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 4
71502: NEG
71503: PUSH
71504: LD_INT 4
71506: NEG
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 4
71514: NEG
71515: PUSH
71516: LD_INT 5
71518: NEG
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 3
71526: NEG
71527: PUSH
71528: LD_INT 4
71530: NEG
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 3
71538: NEG
71539: PUSH
71540: LD_INT 3
71542: NEG
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 4
71550: NEG
71551: PUSH
71552: LD_INT 3
71554: NEG
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 5
71562: NEG
71563: PUSH
71564: LD_INT 4
71566: NEG
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 5
71574: NEG
71575: PUSH
71576: LD_INT 5
71578: NEG
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 3
71586: NEG
71587: PUSH
71588: LD_INT 5
71590: NEG
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 5
71598: NEG
71599: PUSH
71600: LD_INT 3
71602: NEG
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71655: LD_ADDR_VAR 0 30
71659: PUSH
71660: LD_INT 4
71662: PUSH
71663: LD_INT 4
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 4
71672: PUSH
71673: LD_INT 3
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 5
71682: PUSH
71683: LD_INT 4
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 5
71692: PUSH
71693: LD_INT 5
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: LD_INT 4
71702: PUSH
71703: LD_INT 5
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 3
71712: PUSH
71713: LD_INT 4
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 3
71722: PUSH
71723: LD_INT 3
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 5
71732: PUSH
71733: LD_INT 3
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 3
71742: PUSH
71743: LD_INT 5
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 0
71752: PUSH
71753: LD_INT 3
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 0
71762: PUSH
71763: LD_INT 2
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 1
71772: PUSH
71773: LD_INT 3
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 1
71782: PUSH
71783: LD_INT 4
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 0
71792: PUSH
71793: LD_INT 4
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 1
71802: NEG
71803: PUSH
71804: LD_INT 3
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 1
71813: NEG
71814: PUSH
71815: LD_INT 2
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 2
71824: PUSH
71825: LD_INT 4
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 2
71834: NEG
71835: PUSH
71836: LD_INT 2
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 4
71845: NEG
71846: PUSH
71847: LD_INT 0
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 4
71856: NEG
71857: PUSH
71858: LD_INT 1
71860: NEG
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 3
71868: NEG
71869: PUSH
71870: LD_INT 0
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 3
71879: NEG
71880: PUSH
71881: LD_INT 1
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 4
71890: NEG
71891: PUSH
71892: LD_INT 1
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 5
71901: NEG
71902: PUSH
71903: LD_INT 0
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 5
71912: NEG
71913: PUSH
71914: LD_INT 1
71916: NEG
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 5
71924: NEG
71925: PUSH
71926: LD_INT 2
71928: NEG
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: LD_INT 3
71936: NEG
71937: PUSH
71938: LD_INT 2
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 3
71947: NEG
71948: PUSH
71949: LD_INT 3
71951: NEG
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 3
71959: NEG
71960: PUSH
71961: LD_INT 4
71963: NEG
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 2
71971: NEG
71972: PUSH
71973: LD_INT 3
71975: NEG
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 2
71983: NEG
71984: PUSH
71985: LD_INT 2
71987: NEG
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 3
71995: NEG
71996: PUSH
71997: LD_INT 2
71999: NEG
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 4
72007: NEG
72008: PUSH
72009: LD_INT 3
72011: NEG
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 4
72019: NEG
72020: PUSH
72021: LD_INT 4
72023: NEG
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 2
72031: NEG
72032: PUSH
72033: LD_INT 4
72035: NEG
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 4
72043: NEG
72044: PUSH
72045: LD_INT 2
72047: NEG
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 0
72055: PUSH
72056: LD_INT 4
72058: NEG
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 0
72066: PUSH
72067: LD_INT 5
72069: NEG
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 1
72077: PUSH
72078: LD_INT 4
72080: NEG
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 1
72088: PUSH
72089: LD_INT 3
72091: NEG
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 0
72099: PUSH
72100: LD_INT 3
72102: NEG
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: LD_INT 1
72110: NEG
72111: PUSH
72112: LD_INT 4
72114: NEG
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 1
72122: NEG
72123: PUSH
72124: LD_INT 5
72126: NEG
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 2
72134: PUSH
72135: LD_INT 3
72137: NEG
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 2
72145: NEG
72146: PUSH
72147: LD_INT 5
72149: NEG
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72202: LD_ADDR_VAR 0 31
72206: PUSH
72207: LD_INT 0
72209: PUSH
72210: LD_INT 4
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PUSH
72217: LD_INT 0
72219: PUSH
72220: LD_INT 3
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 1
72229: PUSH
72230: LD_INT 4
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 1
72239: PUSH
72240: LD_INT 5
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 0
72249: PUSH
72250: LD_INT 5
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 1
72259: NEG
72260: PUSH
72261: LD_INT 4
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 1
72270: NEG
72271: PUSH
72272: LD_INT 3
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 2
72281: PUSH
72282: LD_INT 5
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 2
72291: NEG
72292: PUSH
72293: LD_INT 3
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 3
72302: NEG
72303: PUSH
72304: LD_INT 0
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 3
72313: NEG
72314: PUSH
72315: LD_INT 1
72317: NEG
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 2
72325: NEG
72326: PUSH
72327: LD_INT 0
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 2
72336: NEG
72337: PUSH
72338: LD_INT 1
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 3
72347: NEG
72348: PUSH
72349: LD_INT 1
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 4
72358: NEG
72359: PUSH
72360: LD_INT 0
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 4
72369: NEG
72370: PUSH
72371: LD_INT 1
72373: NEG
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 4
72381: NEG
72382: PUSH
72383: LD_INT 2
72385: NEG
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 2
72393: NEG
72394: PUSH
72395: LD_INT 2
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 4
72404: NEG
72405: PUSH
72406: LD_INT 4
72408: NEG
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: LD_INT 4
72416: NEG
72417: PUSH
72418: LD_INT 5
72420: NEG
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 3
72428: NEG
72429: PUSH
72430: LD_INT 4
72432: NEG
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 3
72440: NEG
72441: PUSH
72442: LD_INT 3
72444: NEG
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 4
72452: NEG
72453: PUSH
72454: LD_INT 3
72456: NEG
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 5
72464: NEG
72465: PUSH
72466: LD_INT 4
72468: NEG
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 5
72476: NEG
72477: PUSH
72478: LD_INT 5
72480: NEG
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 3
72488: NEG
72489: PUSH
72490: LD_INT 5
72492: NEG
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 5
72500: NEG
72501: PUSH
72502: LD_INT 3
72504: NEG
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 0
72512: PUSH
72513: LD_INT 3
72515: NEG
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 0
72523: PUSH
72524: LD_INT 4
72526: NEG
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 1
72534: PUSH
72535: LD_INT 3
72537: NEG
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 1
72545: PUSH
72546: LD_INT 2
72548: NEG
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 0
72556: PUSH
72557: LD_INT 2
72559: NEG
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 1
72567: NEG
72568: PUSH
72569: LD_INT 3
72571: NEG
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 1
72579: NEG
72580: PUSH
72581: LD_INT 4
72583: NEG
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 2
72591: PUSH
72592: LD_INT 2
72594: NEG
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 2
72602: NEG
72603: PUSH
72604: LD_INT 4
72606: NEG
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 4
72614: PUSH
72615: LD_INT 0
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 4
72624: PUSH
72625: LD_INT 1
72627: NEG
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 5
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 5
72645: PUSH
72646: LD_INT 1
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 4
72655: PUSH
72656: LD_INT 1
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 3
72665: PUSH
72666: LD_INT 0
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 3
72675: PUSH
72676: LD_INT 1
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 3
72686: PUSH
72687: LD_INT 2
72689: NEG
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 5
72697: PUSH
72698: LD_INT 2
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72752: LD_ADDR_VAR 0 32
72756: PUSH
72757: LD_INT 4
72759: NEG
72760: PUSH
72761: LD_INT 0
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_INT 4
72770: NEG
72771: PUSH
72772: LD_INT 1
72774: NEG
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 3
72782: NEG
72783: PUSH
72784: LD_INT 0
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: LD_INT 3
72793: NEG
72794: PUSH
72795: LD_INT 1
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 4
72804: NEG
72805: PUSH
72806: LD_INT 1
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 5
72815: NEG
72816: PUSH
72817: LD_INT 0
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 5
72826: NEG
72827: PUSH
72828: LD_INT 1
72830: NEG
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 5
72838: NEG
72839: PUSH
72840: LD_INT 2
72842: NEG
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_INT 3
72850: NEG
72851: PUSH
72852: LD_INT 2
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: LD_INT 3
72861: NEG
72862: PUSH
72863: LD_INT 3
72865: NEG
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 3
72873: NEG
72874: PUSH
72875: LD_INT 4
72877: NEG
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PUSH
72883: LD_INT 2
72885: NEG
72886: PUSH
72887: LD_INT 3
72889: NEG
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 2
72897: NEG
72898: PUSH
72899: LD_INT 2
72901: NEG
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 3
72909: NEG
72910: PUSH
72911: LD_INT 2
72913: NEG
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 4
72921: NEG
72922: PUSH
72923: LD_INT 3
72925: NEG
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 4
72933: NEG
72934: PUSH
72935: LD_INT 4
72937: NEG
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 2
72945: NEG
72946: PUSH
72947: LD_INT 4
72949: NEG
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 4
72957: NEG
72958: PUSH
72959: LD_INT 2
72961: NEG
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_INT 0
72969: PUSH
72970: LD_INT 4
72972: NEG
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 0
72980: PUSH
72981: LD_INT 5
72983: NEG
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 1
72991: PUSH
72992: LD_INT 4
72994: NEG
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 1
73002: PUSH
73003: LD_INT 3
73005: NEG
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 0
73013: PUSH
73014: LD_INT 3
73016: NEG
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 1
73024: NEG
73025: PUSH
73026: LD_INT 4
73028: NEG
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: PUSH
73034: LD_INT 1
73036: NEG
73037: PUSH
73038: LD_INT 5
73040: NEG
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 2
73048: PUSH
73049: LD_INT 3
73051: NEG
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 2
73059: NEG
73060: PUSH
73061: LD_INT 5
73063: NEG
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 3
73071: PUSH
73072: LD_INT 0
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 3
73081: PUSH
73082: LD_INT 1
73084: NEG
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 4
73092: PUSH
73093: LD_INT 0
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 4
73102: PUSH
73103: LD_INT 1
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 3
73112: PUSH
73113: LD_INT 1
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: LD_INT 2
73122: PUSH
73123: LD_INT 0
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PUSH
73130: LD_INT 2
73132: PUSH
73133: LD_INT 1
73135: NEG
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 2
73143: PUSH
73144: LD_INT 2
73146: NEG
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 4
73154: PUSH
73155: LD_INT 2
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: LD_INT 4
73164: PUSH
73165: LD_INT 4
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 4
73174: PUSH
73175: LD_INT 3
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 5
73184: PUSH
73185: LD_INT 4
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 5
73194: PUSH
73195: LD_INT 5
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 4
73204: PUSH
73205: LD_INT 5
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 3
73214: PUSH
73215: LD_INT 4
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 3
73224: PUSH
73225: LD_INT 3
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: LD_INT 5
73234: PUSH
73235: LD_INT 3
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 3
73244: PUSH
73245: LD_INT 5
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73299: LD_ADDR_VAR 0 33
73303: PUSH
73304: LD_INT 4
73306: NEG
73307: PUSH
73308: LD_INT 4
73310: NEG
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 4
73318: NEG
73319: PUSH
73320: LD_INT 5
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 3
73330: NEG
73331: PUSH
73332: LD_INT 4
73334: NEG
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: LD_INT 3
73342: NEG
73343: PUSH
73344: LD_INT 3
73346: NEG
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 4
73354: NEG
73355: PUSH
73356: LD_INT 3
73358: NEG
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 5
73366: NEG
73367: PUSH
73368: LD_INT 4
73370: NEG
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 5
73378: NEG
73379: PUSH
73380: LD_INT 5
73382: NEG
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 3
73390: NEG
73391: PUSH
73392: LD_INT 5
73394: NEG
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 5
73402: NEG
73403: PUSH
73404: LD_INT 3
73406: NEG
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 0
73414: PUSH
73415: LD_INT 3
73417: NEG
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 0
73425: PUSH
73426: LD_INT 4
73428: NEG
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 1
73436: PUSH
73437: LD_INT 3
73439: NEG
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: LD_INT 1
73447: PUSH
73448: LD_INT 2
73450: NEG
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 0
73458: PUSH
73459: LD_INT 2
73461: NEG
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 1
73469: NEG
73470: PUSH
73471: LD_INT 3
73473: NEG
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: LD_INT 1
73481: NEG
73482: PUSH
73483: LD_INT 4
73485: NEG
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 2
73493: PUSH
73494: LD_INT 2
73496: NEG
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 2
73504: NEG
73505: PUSH
73506: LD_INT 4
73508: NEG
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 4
73516: PUSH
73517: LD_INT 0
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 4
73526: PUSH
73527: LD_INT 1
73529: NEG
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 5
73537: PUSH
73538: LD_INT 0
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 5
73547: PUSH
73548: LD_INT 1
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PUSH
73555: LD_INT 4
73557: PUSH
73558: LD_INT 1
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 3
73567: PUSH
73568: LD_INT 0
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 3
73577: PUSH
73578: LD_INT 1
73580: NEG
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 3
73588: PUSH
73589: LD_INT 2
73591: NEG
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 5
73599: PUSH
73600: LD_INT 2
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: LD_INT 3
73609: PUSH
73610: LD_INT 3
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: LD_INT 3
73619: PUSH
73620: LD_INT 2
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 4
73629: PUSH
73630: LD_INT 3
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: LD_INT 4
73639: PUSH
73640: LD_INT 4
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 3
73649: PUSH
73650: LD_INT 4
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 2
73659: PUSH
73660: LD_INT 3
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: PUSH
73667: LD_INT 2
73669: PUSH
73670: LD_INT 2
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 4
73679: PUSH
73680: LD_INT 2
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 2
73689: PUSH
73690: LD_INT 4
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 0
73699: PUSH
73700: LD_INT 4
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 0
73709: PUSH
73710: LD_INT 3
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 1
73719: PUSH
73720: LD_INT 4
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 1
73729: PUSH
73730: LD_INT 5
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 0
73739: PUSH
73740: LD_INT 5
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: LD_INT 1
73749: NEG
73750: PUSH
73751: LD_INT 4
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: LD_INT 1
73760: NEG
73761: PUSH
73762: LD_INT 3
73764: PUSH
73765: EMPTY
73766: LIST
73767: LIST
73768: PUSH
73769: LD_INT 2
73771: PUSH
73772: LD_INT 5
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: PUSH
73779: LD_INT 2
73781: NEG
73782: PUSH
73783: LD_INT 3
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73837: LD_ADDR_VAR 0 34
73841: PUSH
73842: LD_INT 0
73844: PUSH
73845: LD_INT 4
73847: NEG
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: PUSH
73853: LD_INT 0
73855: PUSH
73856: LD_INT 5
73858: NEG
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: PUSH
73864: LD_INT 1
73866: PUSH
73867: LD_INT 4
73869: NEG
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: LD_INT 1
73877: PUSH
73878: LD_INT 3
73880: NEG
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: LD_INT 0
73888: PUSH
73889: LD_INT 3
73891: NEG
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 1
73899: NEG
73900: PUSH
73901: LD_INT 4
73903: NEG
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 1
73911: NEG
73912: PUSH
73913: LD_INT 5
73915: NEG
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: LD_INT 2
73923: PUSH
73924: LD_INT 3
73926: NEG
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: LD_INT 2
73934: NEG
73935: PUSH
73936: LD_INT 5
73938: NEG
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 3
73946: PUSH
73947: LD_INT 0
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 3
73956: PUSH
73957: LD_INT 1
73959: NEG
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: PUSH
73965: LD_INT 4
73967: PUSH
73968: LD_INT 0
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: PUSH
73975: LD_INT 4
73977: PUSH
73978: LD_INT 1
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: PUSH
73985: LD_INT 3
73987: PUSH
73988: LD_INT 1
73990: PUSH
73991: EMPTY
73992: LIST
73993: LIST
73994: PUSH
73995: LD_INT 2
73997: PUSH
73998: LD_INT 0
74000: PUSH
74001: EMPTY
74002: LIST
74003: LIST
74004: PUSH
74005: LD_INT 2
74007: PUSH
74008: LD_INT 1
74010: NEG
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: PUSH
74016: LD_INT 2
74018: PUSH
74019: LD_INT 2
74021: NEG
74022: PUSH
74023: EMPTY
74024: LIST
74025: LIST
74026: PUSH
74027: LD_INT 4
74029: PUSH
74030: LD_INT 2
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: PUSH
74037: LD_INT 4
74039: PUSH
74040: LD_INT 4
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: LD_INT 4
74049: PUSH
74050: LD_INT 3
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: PUSH
74057: LD_INT 5
74059: PUSH
74060: LD_INT 4
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: PUSH
74067: LD_INT 5
74069: PUSH
74070: LD_INT 5
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 4
74079: PUSH
74080: LD_INT 5
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 3
74089: PUSH
74090: LD_INT 4
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: LD_INT 3
74099: PUSH
74100: LD_INT 3
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 5
74109: PUSH
74110: LD_INT 3
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 3
74119: PUSH
74120: LD_INT 5
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 0
74129: PUSH
74130: LD_INT 3
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: LD_INT 0
74139: PUSH
74140: LD_INT 2
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: PUSH
74147: LD_INT 1
74149: PUSH
74150: LD_INT 3
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 1
74159: PUSH
74160: LD_INT 4
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 0
74169: PUSH
74170: LD_INT 4
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: LD_INT 1
74179: NEG
74180: PUSH
74181: LD_INT 3
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: LD_INT 1
74190: NEG
74191: PUSH
74192: LD_INT 2
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: PUSH
74199: LD_INT 2
74201: PUSH
74202: LD_INT 4
74204: PUSH
74205: EMPTY
74206: LIST
74207: LIST
74208: PUSH
74209: LD_INT 2
74211: NEG
74212: PUSH
74213: LD_INT 2
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: PUSH
74220: LD_INT 4
74222: NEG
74223: PUSH
74224: LD_INT 0
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: LD_INT 4
74233: NEG
74234: PUSH
74235: LD_INT 1
74237: NEG
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: PUSH
74243: LD_INT 3
74245: NEG
74246: PUSH
74247: LD_INT 0
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PUSH
74254: LD_INT 3
74256: NEG
74257: PUSH
74258: LD_INT 1
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: LD_INT 4
74267: NEG
74268: PUSH
74269: LD_INT 1
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 5
74278: NEG
74279: PUSH
74280: LD_INT 0
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 5
74289: NEG
74290: PUSH
74291: LD_INT 1
74293: NEG
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 5
74301: NEG
74302: PUSH
74303: LD_INT 2
74305: NEG
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PUSH
74311: LD_INT 3
74313: NEG
74314: PUSH
74315: LD_INT 2
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: ST_TO_ADDR
// end ; end ;
74369: GO 74372
74371: POP
// case btype of b_depot , b_warehouse :
74372: LD_VAR 0 1
74376: PUSH
74377: LD_INT 0
74379: DOUBLE
74380: EQUAL
74381: IFTRUE 74391
74383: LD_INT 1
74385: DOUBLE
74386: EQUAL
74387: IFTRUE 74391
74389: GO 74592
74391: POP
// case nation of nation_american :
74392: LD_VAR 0 5
74396: PUSH
74397: LD_INT 1
74399: DOUBLE
74400: EQUAL
74401: IFTRUE 74405
74403: GO 74461
74405: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74406: LD_ADDR_VAR 0 9
74410: PUSH
74411: LD_VAR 0 11
74415: PUSH
74416: LD_VAR 0 12
74420: PUSH
74421: LD_VAR 0 13
74425: PUSH
74426: LD_VAR 0 14
74430: PUSH
74431: LD_VAR 0 15
74435: PUSH
74436: LD_VAR 0 16
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: PUSH
74449: LD_VAR 0 4
74453: PUSH
74454: LD_INT 1
74456: PLUS
74457: ARRAY
74458: ST_TO_ADDR
74459: GO 74590
74461: LD_INT 2
74463: DOUBLE
74464: EQUAL
74465: IFTRUE 74469
74467: GO 74525
74469: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74470: LD_ADDR_VAR 0 9
74474: PUSH
74475: LD_VAR 0 17
74479: PUSH
74480: LD_VAR 0 18
74484: PUSH
74485: LD_VAR 0 19
74489: PUSH
74490: LD_VAR 0 20
74494: PUSH
74495: LD_VAR 0 21
74499: PUSH
74500: LD_VAR 0 22
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: PUSH
74513: LD_VAR 0 4
74517: PUSH
74518: LD_INT 1
74520: PLUS
74521: ARRAY
74522: ST_TO_ADDR
74523: GO 74590
74525: LD_INT 3
74527: DOUBLE
74528: EQUAL
74529: IFTRUE 74533
74531: GO 74589
74533: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74534: LD_ADDR_VAR 0 9
74538: PUSH
74539: LD_VAR 0 23
74543: PUSH
74544: LD_VAR 0 24
74548: PUSH
74549: LD_VAR 0 25
74553: PUSH
74554: LD_VAR 0 26
74558: PUSH
74559: LD_VAR 0 27
74563: PUSH
74564: LD_VAR 0 28
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: PUSH
74577: LD_VAR 0 4
74581: PUSH
74582: LD_INT 1
74584: PLUS
74585: ARRAY
74586: ST_TO_ADDR
74587: GO 74590
74589: POP
74590: GO 75145
74592: LD_INT 2
74594: DOUBLE
74595: EQUAL
74596: IFTRUE 74606
74598: LD_INT 3
74600: DOUBLE
74601: EQUAL
74602: IFTRUE 74606
74604: GO 74662
74606: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74607: LD_ADDR_VAR 0 9
74611: PUSH
74612: LD_VAR 0 29
74616: PUSH
74617: LD_VAR 0 30
74621: PUSH
74622: LD_VAR 0 31
74626: PUSH
74627: LD_VAR 0 32
74631: PUSH
74632: LD_VAR 0 33
74636: PUSH
74637: LD_VAR 0 34
74641: PUSH
74642: EMPTY
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: PUSH
74650: LD_VAR 0 4
74654: PUSH
74655: LD_INT 1
74657: PLUS
74658: ARRAY
74659: ST_TO_ADDR
74660: GO 75145
74662: LD_INT 16
74664: DOUBLE
74665: EQUAL
74666: IFTRUE 74724
74668: LD_INT 17
74670: DOUBLE
74671: EQUAL
74672: IFTRUE 74724
74674: LD_INT 18
74676: DOUBLE
74677: EQUAL
74678: IFTRUE 74724
74680: LD_INT 19
74682: DOUBLE
74683: EQUAL
74684: IFTRUE 74724
74686: LD_INT 22
74688: DOUBLE
74689: EQUAL
74690: IFTRUE 74724
74692: LD_INT 20
74694: DOUBLE
74695: EQUAL
74696: IFTRUE 74724
74698: LD_INT 21
74700: DOUBLE
74701: EQUAL
74702: IFTRUE 74724
74704: LD_INT 23
74706: DOUBLE
74707: EQUAL
74708: IFTRUE 74724
74710: LD_INT 24
74712: DOUBLE
74713: EQUAL
74714: IFTRUE 74724
74716: LD_INT 25
74718: DOUBLE
74719: EQUAL
74720: IFTRUE 74724
74722: GO 74780
74724: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74725: LD_ADDR_VAR 0 9
74729: PUSH
74730: LD_VAR 0 35
74734: PUSH
74735: LD_VAR 0 36
74739: PUSH
74740: LD_VAR 0 37
74744: PUSH
74745: LD_VAR 0 38
74749: PUSH
74750: LD_VAR 0 39
74754: PUSH
74755: LD_VAR 0 40
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: PUSH
74768: LD_VAR 0 4
74772: PUSH
74773: LD_INT 1
74775: PLUS
74776: ARRAY
74777: ST_TO_ADDR
74778: GO 75145
74780: LD_INT 6
74782: DOUBLE
74783: EQUAL
74784: IFTRUE 74836
74786: LD_INT 7
74788: DOUBLE
74789: EQUAL
74790: IFTRUE 74836
74792: LD_INT 8
74794: DOUBLE
74795: EQUAL
74796: IFTRUE 74836
74798: LD_INT 13
74800: DOUBLE
74801: EQUAL
74802: IFTRUE 74836
74804: LD_INT 12
74806: DOUBLE
74807: EQUAL
74808: IFTRUE 74836
74810: LD_INT 15
74812: DOUBLE
74813: EQUAL
74814: IFTRUE 74836
74816: LD_INT 11
74818: DOUBLE
74819: EQUAL
74820: IFTRUE 74836
74822: LD_INT 14
74824: DOUBLE
74825: EQUAL
74826: IFTRUE 74836
74828: LD_INT 10
74830: DOUBLE
74831: EQUAL
74832: IFTRUE 74836
74834: GO 74892
74836: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74837: LD_ADDR_VAR 0 9
74841: PUSH
74842: LD_VAR 0 41
74846: PUSH
74847: LD_VAR 0 42
74851: PUSH
74852: LD_VAR 0 43
74856: PUSH
74857: LD_VAR 0 44
74861: PUSH
74862: LD_VAR 0 45
74866: PUSH
74867: LD_VAR 0 46
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: PUSH
74880: LD_VAR 0 4
74884: PUSH
74885: LD_INT 1
74887: PLUS
74888: ARRAY
74889: ST_TO_ADDR
74890: GO 75145
74892: LD_INT 36
74894: DOUBLE
74895: EQUAL
74896: IFTRUE 74900
74898: GO 74956
74900: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74901: LD_ADDR_VAR 0 9
74905: PUSH
74906: LD_VAR 0 47
74910: PUSH
74911: LD_VAR 0 48
74915: PUSH
74916: LD_VAR 0 49
74920: PUSH
74921: LD_VAR 0 50
74925: PUSH
74926: LD_VAR 0 51
74930: PUSH
74931: LD_VAR 0 52
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: PUSH
74944: LD_VAR 0 4
74948: PUSH
74949: LD_INT 1
74951: PLUS
74952: ARRAY
74953: ST_TO_ADDR
74954: GO 75145
74956: LD_INT 4
74958: DOUBLE
74959: EQUAL
74960: IFTRUE 74982
74962: LD_INT 5
74964: DOUBLE
74965: EQUAL
74966: IFTRUE 74982
74968: LD_INT 34
74970: DOUBLE
74971: EQUAL
74972: IFTRUE 74982
74974: LD_INT 37
74976: DOUBLE
74977: EQUAL
74978: IFTRUE 74982
74980: GO 75038
74982: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74983: LD_ADDR_VAR 0 9
74987: PUSH
74988: LD_VAR 0 53
74992: PUSH
74993: LD_VAR 0 54
74997: PUSH
74998: LD_VAR 0 55
75002: PUSH
75003: LD_VAR 0 56
75007: PUSH
75008: LD_VAR 0 57
75012: PUSH
75013: LD_VAR 0 58
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: PUSH
75026: LD_VAR 0 4
75030: PUSH
75031: LD_INT 1
75033: PLUS
75034: ARRAY
75035: ST_TO_ADDR
75036: GO 75145
75038: LD_INT 31
75040: DOUBLE
75041: EQUAL
75042: IFTRUE 75088
75044: LD_INT 32
75046: DOUBLE
75047: EQUAL
75048: IFTRUE 75088
75050: LD_INT 33
75052: DOUBLE
75053: EQUAL
75054: IFTRUE 75088
75056: LD_INT 27
75058: DOUBLE
75059: EQUAL
75060: IFTRUE 75088
75062: LD_INT 26
75064: DOUBLE
75065: EQUAL
75066: IFTRUE 75088
75068: LD_INT 28
75070: DOUBLE
75071: EQUAL
75072: IFTRUE 75088
75074: LD_INT 29
75076: DOUBLE
75077: EQUAL
75078: IFTRUE 75088
75080: LD_INT 30
75082: DOUBLE
75083: EQUAL
75084: IFTRUE 75088
75086: GO 75144
75088: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75089: LD_ADDR_VAR 0 9
75093: PUSH
75094: LD_VAR 0 59
75098: PUSH
75099: LD_VAR 0 60
75103: PUSH
75104: LD_VAR 0 61
75108: PUSH
75109: LD_VAR 0 62
75113: PUSH
75114: LD_VAR 0 63
75118: PUSH
75119: LD_VAR 0 64
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: PUSH
75132: LD_VAR 0 4
75136: PUSH
75137: LD_INT 1
75139: PLUS
75140: ARRAY
75141: ST_TO_ADDR
75142: GO 75145
75144: POP
// temp_list2 = [ ] ;
75145: LD_ADDR_VAR 0 10
75149: PUSH
75150: EMPTY
75151: ST_TO_ADDR
// for i in temp_list do
75152: LD_ADDR_VAR 0 8
75156: PUSH
75157: LD_VAR 0 9
75161: PUSH
75162: FOR_IN
75163: IFFALSE 75215
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75165: LD_ADDR_VAR 0 10
75169: PUSH
75170: LD_VAR 0 10
75174: PUSH
75175: LD_VAR 0 8
75179: PUSH
75180: LD_INT 1
75182: ARRAY
75183: PUSH
75184: LD_VAR 0 2
75188: PLUS
75189: PUSH
75190: LD_VAR 0 8
75194: PUSH
75195: LD_INT 2
75197: ARRAY
75198: PUSH
75199: LD_VAR 0 3
75203: PLUS
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: PUSH
75209: EMPTY
75210: LIST
75211: ADD
75212: ST_TO_ADDR
75213: GO 75162
75215: POP
75216: POP
// result = temp_list2 ;
75217: LD_ADDR_VAR 0 7
75221: PUSH
75222: LD_VAR 0 10
75226: ST_TO_ADDR
// end ;
75227: LD_VAR 0 7
75231: RET
// export function EnemyInRange ( unit , dist ) ; begin
75232: LD_INT 0
75234: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75235: LD_ADDR_VAR 0 3
75239: PUSH
75240: LD_VAR 0 1
75244: PPUSH
75245: CALL_OW 255
75249: PPUSH
75250: LD_VAR 0 1
75254: PPUSH
75255: CALL_OW 250
75259: PPUSH
75260: LD_VAR 0 1
75264: PPUSH
75265: CALL_OW 251
75269: PPUSH
75270: LD_VAR 0 2
75274: PPUSH
75275: CALL 48489 0 4
75279: PUSH
75280: LD_INT 4
75282: ARRAY
75283: ST_TO_ADDR
// end ;
75284: LD_VAR 0 3
75288: RET
// export function PlayerSeeMe ( unit ) ; begin
75289: LD_INT 0
75291: PPUSH
// result := See ( your_side , unit ) ;
75292: LD_ADDR_VAR 0 2
75296: PUSH
75297: LD_OWVAR 2
75301: PPUSH
75302: LD_VAR 0 1
75306: PPUSH
75307: CALL_OW 292
75311: ST_TO_ADDR
// end ;
75312: LD_VAR 0 2
75316: RET
// export function ReverseDir ( unit ) ; begin
75317: LD_INT 0
75319: PPUSH
// if not unit then
75320: LD_VAR 0 1
75324: NOT
75325: IFFALSE 75329
// exit ;
75327: GO 75352
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75329: LD_ADDR_VAR 0 2
75333: PUSH
75334: LD_VAR 0 1
75338: PPUSH
75339: CALL_OW 254
75343: PUSH
75344: LD_INT 3
75346: PLUS
75347: PUSH
75348: LD_INT 6
75350: MOD
75351: ST_TO_ADDR
// end ;
75352: LD_VAR 0 2
75356: RET
// export function ReverseArray ( array ) ; var i ; begin
75357: LD_INT 0
75359: PPUSH
75360: PPUSH
// if not array then
75361: LD_VAR 0 1
75365: NOT
75366: IFFALSE 75370
// exit ;
75368: GO 75425
// result := [ ] ;
75370: LD_ADDR_VAR 0 2
75374: PUSH
75375: EMPTY
75376: ST_TO_ADDR
// for i := array downto 1 do
75377: LD_ADDR_VAR 0 3
75381: PUSH
75382: DOUBLE
75383: LD_VAR 0 1
75387: INC
75388: ST_TO_ADDR
75389: LD_INT 1
75391: PUSH
75392: FOR_DOWNTO
75393: IFFALSE 75423
// result := Join ( result , array [ i ] ) ;
75395: LD_ADDR_VAR 0 2
75399: PUSH
75400: LD_VAR 0 2
75404: PPUSH
75405: LD_VAR 0 1
75409: PUSH
75410: LD_VAR 0 3
75414: ARRAY
75415: PPUSH
75416: CALL 80267 0 2
75420: ST_TO_ADDR
75421: GO 75392
75423: POP
75424: POP
// end ;
75425: LD_VAR 0 2
75429: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75430: LD_INT 0
75432: PPUSH
75433: PPUSH
75434: PPUSH
75435: PPUSH
75436: PPUSH
75437: PPUSH
// if not unit or not hexes then
75438: LD_VAR 0 1
75442: NOT
75443: IFTRUE 75452
75445: PUSH
75446: LD_VAR 0 2
75450: NOT
75451: OR
75452: IFFALSE 75456
// exit ;
75454: GO 75579
// dist := 9999 ;
75456: LD_ADDR_VAR 0 5
75460: PUSH
75461: LD_INT 9999
75463: ST_TO_ADDR
// for i = 1 to hexes do
75464: LD_ADDR_VAR 0 4
75468: PUSH
75469: DOUBLE
75470: LD_INT 1
75472: DEC
75473: ST_TO_ADDR
75474: LD_VAR 0 2
75478: PUSH
75479: FOR_TO
75480: IFFALSE 75567
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75482: LD_ADDR_VAR 0 6
75486: PUSH
75487: LD_VAR 0 1
75491: PPUSH
75492: LD_VAR 0 2
75496: PUSH
75497: LD_VAR 0 4
75501: ARRAY
75502: PUSH
75503: LD_INT 1
75505: ARRAY
75506: PPUSH
75507: LD_VAR 0 2
75511: PUSH
75512: LD_VAR 0 4
75516: ARRAY
75517: PUSH
75518: LD_INT 2
75520: ARRAY
75521: PPUSH
75522: CALL_OW 297
75526: ST_TO_ADDR
// if tdist < dist then
75527: LD_VAR 0 6
75531: PUSH
75532: LD_VAR 0 5
75536: LESS
75537: IFFALSE 75565
// begin hex := hexes [ i ] ;
75539: LD_ADDR_VAR 0 8
75543: PUSH
75544: LD_VAR 0 2
75548: PUSH
75549: LD_VAR 0 4
75553: ARRAY
75554: ST_TO_ADDR
// dist := tdist ;
75555: LD_ADDR_VAR 0 5
75559: PUSH
75560: LD_VAR 0 6
75564: ST_TO_ADDR
// end ; end ;
75565: GO 75479
75567: POP
75568: POP
// result := hex ;
75569: LD_ADDR_VAR 0 3
75573: PUSH
75574: LD_VAR 0 8
75578: ST_TO_ADDR
// end ;
75579: LD_VAR 0 3
75583: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75584: LD_INT 0
75586: PPUSH
75587: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75588: LD_VAR 0 1
75592: NOT
75593: IFTRUE 75632
75595: PUSH
75596: LD_VAR 0 1
75600: PUSH
75601: LD_INT 21
75603: PUSH
75604: LD_INT 2
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: PUSH
75611: LD_INT 23
75613: PUSH
75614: LD_INT 2
75616: PUSH
75617: EMPTY
75618: LIST
75619: LIST
75620: PUSH
75621: EMPTY
75622: LIST
75623: LIST
75624: PPUSH
75625: CALL_OW 69
75629: IN
75630: NOT
75631: OR
75632: IFFALSE 75636
// exit ;
75634: GO 75683
// for i = 1 to 3 do
75636: LD_ADDR_VAR 0 3
75640: PUSH
75641: DOUBLE
75642: LD_INT 1
75644: DEC
75645: ST_TO_ADDR
75646: LD_INT 3
75648: PUSH
75649: FOR_TO
75650: IFFALSE 75681
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75652: LD_VAR 0 1
75656: PPUSH
75657: CALL_OW 250
75661: PPUSH
75662: LD_VAR 0 1
75666: PPUSH
75667: CALL_OW 251
75671: PPUSH
75672: LD_INT 1
75674: PPUSH
75675: CALL_OW 453
75679: GO 75649
75681: POP
75682: POP
// end ;
75683: LD_VAR 0 2
75687: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75688: LD_INT 0
75690: PPUSH
75691: PPUSH
75692: PPUSH
75693: PPUSH
75694: PPUSH
75695: PPUSH
// if not unit or not enemy_unit then
75696: LD_VAR 0 1
75700: NOT
75701: IFTRUE 75710
75703: PUSH
75704: LD_VAR 0 2
75708: NOT
75709: OR
75710: IFFALSE 75714
// exit ;
75712: GO 76185
// if GetLives ( i ) < 250 then
75714: LD_VAR 0 4
75718: PPUSH
75719: CALL_OW 256
75723: PUSH
75724: LD_INT 250
75726: LESS
75727: IFFALSE 75740
// begin ComAutodestruct ( i ) ;
75729: LD_VAR 0 4
75733: PPUSH
75734: CALL 75584 0 1
// exit ;
75738: GO 76185
// end ; x := GetX ( enemy_unit ) ;
75740: LD_ADDR_VAR 0 7
75744: PUSH
75745: LD_VAR 0 2
75749: PPUSH
75750: CALL_OW 250
75754: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75755: LD_ADDR_VAR 0 8
75759: PUSH
75760: LD_VAR 0 2
75764: PPUSH
75765: CALL_OW 251
75769: ST_TO_ADDR
// if not x or not y then
75770: LD_VAR 0 7
75774: NOT
75775: IFTRUE 75784
75777: PUSH
75778: LD_VAR 0 8
75782: NOT
75783: OR
75784: IFFALSE 75788
// exit ;
75786: GO 76185
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75788: LD_ADDR_VAR 0 6
75792: PUSH
75793: LD_VAR 0 7
75797: PPUSH
75798: LD_INT 0
75800: PPUSH
75801: LD_INT 4
75803: PPUSH
75804: CALL_OW 272
75808: PUSH
75809: LD_VAR 0 8
75813: PPUSH
75814: LD_INT 0
75816: PPUSH
75817: LD_INT 4
75819: PPUSH
75820: CALL_OW 273
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_VAR 0 7
75833: PPUSH
75834: LD_INT 1
75836: PPUSH
75837: LD_INT 4
75839: PPUSH
75840: CALL_OW 272
75844: PUSH
75845: LD_VAR 0 8
75849: PPUSH
75850: LD_INT 1
75852: PPUSH
75853: LD_INT 4
75855: PPUSH
75856: CALL_OW 273
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: PUSH
75865: LD_VAR 0 7
75869: PPUSH
75870: LD_INT 2
75872: PPUSH
75873: LD_INT 4
75875: PPUSH
75876: CALL_OW 272
75880: PUSH
75881: LD_VAR 0 8
75885: PPUSH
75886: LD_INT 2
75888: PPUSH
75889: LD_INT 4
75891: PPUSH
75892: CALL_OW 273
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: LD_VAR 0 7
75905: PPUSH
75906: LD_INT 3
75908: PPUSH
75909: LD_INT 4
75911: PPUSH
75912: CALL_OW 272
75916: PUSH
75917: LD_VAR 0 8
75921: PPUSH
75922: LD_INT 3
75924: PPUSH
75925: LD_INT 4
75927: PPUSH
75928: CALL_OW 273
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PUSH
75937: LD_VAR 0 7
75941: PPUSH
75942: LD_INT 4
75944: PPUSH
75945: LD_INT 4
75947: PPUSH
75948: CALL_OW 272
75952: PUSH
75953: LD_VAR 0 8
75957: PPUSH
75958: LD_INT 4
75960: PPUSH
75961: LD_INT 4
75963: PPUSH
75964: CALL_OW 273
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: PUSH
75973: LD_VAR 0 7
75977: PPUSH
75978: LD_INT 5
75980: PPUSH
75981: LD_INT 4
75983: PPUSH
75984: CALL_OW 272
75988: PUSH
75989: LD_VAR 0 8
75993: PPUSH
75994: LD_INT 5
75996: PPUSH
75997: LD_INT 4
75999: PPUSH
76000: CALL_OW 273
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: ST_TO_ADDR
// for i = tmp downto 1 do
76017: LD_ADDR_VAR 0 4
76021: PUSH
76022: DOUBLE
76023: LD_VAR 0 6
76027: INC
76028: ST_TO_ADDR
76029: LD_INT 1
76031: PUSH
76032: FOR_DOWNTO
76033: IFFALSE 76136
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76035: LD_VAR 0 6
76039: PUSH
76040: LD_VAR 0 4
76044: ARRAY
76045: PUSH
76046: LD_INT 1
76048: ARRAY
76049: PPUSH
76050: LD_VAR 0 6
76054: PUSH
76055: LD_VAR 0 4
76059: ARRAY
76060: PUSH
76061: LD_INT 2
76063: ARRAY
76064: PPUSH
76065: CALL_OW 488
76069: NOT
76070: IFTRUE 76112
76072: PUSH
76073: LD_VAR 0 6
76077: PUSH
76078: LD_VAR 0 4
76082: ARRAY
76083: PUSH
76084: LD_INT 1
76086: ARRAY
76087: PPUSH
76088: LD_VAR 0 6
76092: PUSH
76093: LD_VAR 0 4
76097: ARRAY
76098: PUSH
76099: LD_INT 2
76101: ARRAY
76102: PPUSH
76103: CALL_OW 428
76107: PUSH
76108: LD_INT 0
76110: NONEQUAL
76111: OR
76112: IFFALSE 76134
// tmp := Delete ( tmp , i ) ;
76114: LD_ADDR_VAR 0 6
76118: PUSH
76119: LD_VAR 0 6
76123: PPUSH
76124: LD_VAR 0 4
76128: PPUSH
76129: CALL_OW 3
76133: ST_TO_ADDR
76134: GO 76032
76136: POP
76137: POP
// j := GetClosestHex ( unit , tmp ) ;
76138: LD_ADDR_VAR 0 5
76142: PUSH
76143: LD_VAR 0 1
76147: PPUSH
76148: LD_VAR 0 6
76152: PPUSH
76153: CALL 75430 0 2
76157: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76158: LD_VAR 0 1
76162: PPUSH
76163: LD_VAR 0 5
76167: PUSH
76168: LD_INT 1
76170: ARRAY
76171: PPUSH
76172: LD_VAR 0 5
76176: PUSH
76177: LD_INT 2
76179: ARRAY
76180: PPUSH
76181: CALL_OW 111
// end ;
76185: LD_VAR 0 3
76189: RET
// export function PrepareApemanSoldier ( ) ; begin
76190: LD_INT 0
76192: PPUSH
// uc_nation := 0 ;
76193: LD_ADDR_OWVAR 21
76197: PUSH
76198: LD_INT 0
76200: ST_TO_ADDR
// hc_sex := sex_male ;
76201: LD_ADDR_OWVAR 27
76205: PUSH
76206: LD_INT 1
76208: ST_TO_ADDR
// hc_name :=  ;
76209: LD_ADDR_OWVAR 26
76213: PUSH
76214: LD_STRING 
76216: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76217: LD_ADDR_OWVAR 28
76221: PUSH
76222: LD_INT 15
76224: ST_TO_ADDR
// hc_gallery :=  ;
76225: LD_ADDR_OWVAR 33
76229: PUSH
76230: LD_STRING 
76232: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76233: LD_ADDR_OWVAR 31
76237: PUSH
76238: LD_INT 0
76240: PPUSH
76241: LD_INT 3
76243: PPUSH
76244: CALL_OW 12
76248: PUSH
76249: LD_INT 0
76251: PPUSH
76252: LD_INT 3
76254: PPUSH
76255: CALL_OW 12
76259: PUSH
76260: LD_INT 0
76262: PUSH
76263: LD_INT 0
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76272: LD_ADDR_OWVAR 29
76276: PUSH
76277: LD_INT 12
76279: PUSH
76280: LD_INT 12
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: ST_TO_ADDR
// end ;
76287: LD_VAR 0 1
76291: RET
// export function PrepareApemanEngineer ( ) ; begin
76292: LD_INT 0
76294: PPUSH
// uc_nation := 0 ;
76295: LD_ADDR_OWVAR 21
76299: PUSH
76300: LD_INT 0
76302: ST_TO_ADDR
// hc_sex := sex_male ;
76303: LD_ADDR_OWVAR 27
76307: PUSH
76308: LD_INT 1
76310: ST_TO_ADDR
// hc_name :=  ;
76311: LD_ADDR_OWVAR 26
76315: PUSH
76316: LD_STRING 
76318: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76319: LD_ADDR_OWVAR 28
76323: PUSH
76324: LD_INT 16
76326: ST_TO_ADDR
// hc_gallery :=  ;
76327: LD_ADDR_OWVAR 33
76331: PUSH
76332: LD_STRING 
76334: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76335: LD_ADDR_OWVAR 31
76339: PUSH
76340: LD_INT 0
76342: PPUSH
76343: LD_INT 3
76345: PPUSH
76346: CALL_OW 12
76350: PUSH
76351: LD_INT 0
76353: PPUSH
76354: LD_INT 3
76356: PPUSH
76357: CALL_OW 12
76361: PUSH
76362: LD_INT 0
76364: PUSH
76365: LD_INT 0
76367: PUSH
76368: EMPTY
76369: LIST
76370: LIST
76371: LIST
76372: LIST
76373: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76374: LD_ADDR_OWVAR 29
76378: PUSH
76379: LD_INT 12
76381: PUSH
76382: LD_INT 12
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: ST_TO_ADDR
// end ;
76389: LD_VAR 0 1
76393: RET
// export function PrepareApeman ( agressivity ) ; begin
76394: LD_INT 0
76396: PPUSH
// uc_side := 0 ;
76397: LD_ADDR_OWVAR 20
76401: PUSH
76402: LD_INT 0
76404: ST_TO_ADDR
// uc_nation := 0 ;
76405: LD_ADDR_OWVAR 21
76409: PUSH
76410: LD_INT 0
76412: ST_TO_ADDR
// hc_sex := sex_male ;
76413: LD_ADDR_OWVAR 27
76417: PUSH
76418: LD_INT 1
76420: ST_TO_ADDR
// hc_class := class_apeman ;
76421: LD_ADDR_OWVAR 28
76425: PUSH
76426: LD_INT 12
76428: ST_TO_ADDR
// hc_gallery :=  ;
76429: LD_ADDR_OWVAR 33
76433: PUSH
76434: LD_STRING 
76436: ST_TO_ADDR
// hc_name :=  ;
76437: LD_ADDR_OWVAR 26
76441: PUSH
76442: LD_STRING 
76444: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76445: LD_ADDR_OWVAR 29
76449: PUSH
76450: LD_INT 12
76452: PUSH
76453: LD_INT 12
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: ST_TO_ADDR
// if agressivity = 0 then
76460: LD_VAR 0 1
76464: PUSH
76465: LD_INT 0
76467: EQUAL
76468: IFFALSE 76480
// hc_agressivity := 0 else
76470: LD_ADDR_OWVAR 35
76474: PUSH
76475: LD_INT 0
76477: ST_TO_ADDR
76478: GO 76501
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76480: LD_ADDR_OWVAR 35
76484: PUSH
76485: LD_VAR 0 1
76489: NEG
76490: PPUSH
76491: LD_VAR 0 1
76495: PPUSH
76496: CALL_OW 12
76500: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76501: LD_ADDR_OWVAR 31
76505: PUSH
76506: LD_INT 0
76508: PPUSH
76509: LD_INT 3
76511: PPUSH
76512: CALL_OW 12
76516: PUSH
76517: LD_INT 0
76519: PPUSH
76520: LD_INT 3
76522: PPUSH
76523: CALL_OW 12
76527: PUSH
76528: LD_INT 0
76530: PUSH
76531: LD_INT 0
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: ST_TO_ADDR
// end ;
76540: LD_VAR 0 2
76544: RET
// export function PrepareTiger ( agressivity ) ; begin
76545: LD_INT 0
76547: PPUSH
// uc_side := 0 ;
76548: LD_ADDR_OWVAR 20
76552: PUSH
76553: LD_INT 0
76555: ST_TO_ADDR
// uc_nation := 0 ;
76556: LD_ADDR_OWVAR 21
76560: PUSH
76561: LD_INT 0
76563: ST_TO_ADDR
// InitHc ;
76564: CALL_OW 19
// hc_class := class_tiger ;
76568: LD_ADDR_OWVAR 28
76572: PUSH
76573: LD_INT 14
76575: ST_TO_ADDR
// hc_gallery :=  ;
76576: LD_ADDR_OWVAR 33
76580: PUSH
76581: LD_STRING 
76583: ST_TO_ADDR
// hc_name :=  ;
76584: LD_ADDR_OWVAR 26
76588: PUSH
76589: LD_STRING 
76591: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76592: LD_ADDR_OWVAR 35
76596: PUSH
76597: LD_VAR 0 1
76601: NEG
76602: PPUSH
76603: LD_VAR 0 1
76607: PPUSH
76608: CALL_OW 12
76612: ST_TO_ADDR
// end ;
76613: LD_VAR 0 2
76617: RET
// export function PrepareEnchidna ( ) ; begin
76618: LD_INT 0
76620: PPUSH
// uc_side := 0 ;
76621: LD_ADDR_OWVAR 20
76625: PUSH
76626: LD_INT 0
76628: ST_TO_ADDR
// uc_nation := 0 ;
76629: LD_ADDR_OWVAR 21
76633: PUSH
76634: LD_INT 0
76636: ST_TO_ADDR
// InitHc ;
76637: CALL_OW 19
// hc_class := class_baggie ;
76641: LD_ADDR_OWVAR 28
76645: PUSH
76646: LD_INT 13
76648: ST_TO_ADDR
// hc_gallery :=  ;
76649: LD_ADDR_OWVAR 33
76653: PUSH
76654: LD_STRING 
76656: ST_TO_ADDR
// hc_name :=  ;
76657: LD_ADDR_OWVAR 26
76661: PUSH
76662: LD_STRING 
76664: ST_TO_ADDR
// end ;
76665: LD_VAR 0 1
76669: RET
// export function PrepareFrog ( ) ; begin
76670: LD_INT 0
76672: PPUSH
// uc_side := 0 ;
76673: LD_ADDR_OWVAR 20
76677: PUSH
76678: LD_INT 0
76680: ST_TO_ADDR
// uc_nation := 0 ;
76681: LD_ADDR_OWVAR 21
76685: PUSH
76686: LD_INT 0
76688: ST_TO_ADDR
// InitHc ;
76689: CALL_OW 19
// hc_class := class_frog ;
76693: LD_ADDR_OWVAR 28
76697: PUSH
76698: LD_INT 19
76700: ST_TO_ADDR
// hc_gallery :=  ;
76701: LD_ADDR_OWVAR 33
76705: PUSH
76706: LD_STRING 
76708: ST_TO_ADDR
// hc_name :=  ;
76709: LD_ADDR_OWVAR 26
76713: PUSH
76714: LD_STRING 
76716: ST_TO_ADDR
// end ;
76717: LD_VAR 0 1
76721: RET
// export function PrepareFish ( ) ; begin
76722: LD_INT 0
76724: PPUSH
// uc_side := 0 ;
76725: LD_ADDR_OWVAR 20
76729: PUSH
76730: LD_INT 0
76732: ST_TO_ADDR
// uc_nation := 0 ;
76733: LD_ADDR_OWVAR 21
76737: PUSH
76738: LD_INT 0
76740: ST_TO_ADDR
// InitHc ;
76741: CALL_OW 19
// hc_class := class_fish ;
76745: LD_ADDR_OWVAR 28
76749: PUSH
76750: LD_INT 20
76752: ST_TO_ADDR
// hc_gallery :=  ;
76753: LD_ADDR_OWVAR 33
76757: PUSH
76758: LD_STRING 
76760: ST_TO_ADDR
// hc_name :=  ;
76761: LD_ADDR_OWVAR 26
76765: PUSH
76766: LD_STRING 
76768: ST_TO_ADDR
// end ;
76769: LD_VAR 0 1
76773: RET
// export function PrepareBird ( ) ; begin
76774: LD_INT 0
76776: PPUSH
// uc_side := 0 ;
76777: LD_ADDR_OWVAR 20
76781: PUSH
76782: LD_INT 0
76784: ST_TO_ADDR
// uc_nation := 0 ;
76785: LD_ADDR_OWVAR 21
76789: PUSH
76790: LD_INT 0
76792: ST_TO_ADDR
// InitHc ;
76793: CALL_OW 19
// hc_class := class_phororhacos ;
76797: LD_ADDR_OWVAR 28
76801: PUSH
76802: LD_INT 18
76804: ST_TO_ADDR
// hc_gallery :=  ;
76805: LD_ADDR_OWVAR 33
76809: PUSH
76810: LD_STRING 
76812: ST_TO_ADDR
// hc_name :=  ;
76813: LD_ADDR_OWVAR 26
76817: PUSH
76818: LD_STRING 
76820: ST_TO_ADDR
// end ;
76821: LD_VAR 0 1
76825: RET
// export function PrepareHorse ( ) ; begin
76826: LD_INT 0
76828: PPUSH
// uc_side := 0 ;
76829: LD_ADDR_OWVAR 20
76833: PUSH
76834: LD_INT 0
76836: ST_TO_ADDR
// uc_nation := 0 ;
76837: LD_ADDR_OWVAR 21
76841: PUSH
76842: LD_INT 0
76844: ST_TO_ADDR
// InitHc ;
76845: CALL_OW 19
// hc_class := class_horse ;
76849: LD_ADDR_OWVAR 28
76853: PUSH
76854: LD_INT 21
76856: ST_TO_ADDR
// hc_gallery :=  ;
76857: LD_ADDR_OWVAR 33
76861: PUSH
76862: LD_STRING 
76864: ST_TO_ADDR
// hc_name :=  ;
76865: LD_ADDR_OWVAR 26
76869: PUSH
76870: LD_STRING 
76872: ST_TO_ADDR
// end ;
76873: LD_VAR 0 1
76877: RET
// export function PrepareMastodont ( ) ; begin
76878: LD_INT 0
76880: PPUSH
// uc_side := 0 ;
76881: LD_ADDR_OWVAR 20
76885: PUSH
76886: LD_INT 0
76888: ST_TO_ADDR
// uc_nation := 0 ;
76889: LD_ADDR_OWVAR 21
76893: PUSH
76894: LD_INT 0
76896: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76897: LD_ADDR_OWVAR 37
76901: PUSH
76902: LD_INT 31
76904: ST_TO_ADDR
// vc_control := control_rider ;
76905: LD_ADDR_OWVAR 38
76909: PUSH
76910: LD_INT 4
76912: ST_TO_ADDR
// end ;
76913: LD_VAR 0 1
76917: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76918: LD_INT 0
76920: PPUSH
76921: PPUSH
76922: PPUSH
// uc_side = 0 ;
76923: LD_ADDR_OWVAR 20
76927: PUSH
76928: LD_INT 0
76930: ST_TO_ADDR
// uc_nation = 0 ;
76931: LD_ADDR_OWVAR 21
76935: PUSH
76936: LD_INT 0
76938: ST_TO_ADDR
// InitHc_All ( ) ;
76939: CALL_OW 584
// InitVc ;
76943: CALL_OW 20
// if mastodonts then
76947: LD_VAR 0 6
76951: IFFALSE 77018
// for i = 1 to mastodonts do
76953: LD_ADDR_VAR 0 11
76957: PUSH
76958: DOUBLE
76959: LD_INT 1
76961: DEC
76962: ST_TO_ADDR
76963: LD_VAR 0 6
76967: PUSH
76968: FOR_TO
76969: IFFALSE 77016
// begin vc_chassis := 31 ;
76971: LD_ADDR_OWVAR 37
76975: PUSH
76976: LD_INT 31
76978: ST_TO_ADDR
// vc_control := control_rider ;
76979: LD_ADDR_OWVAR 38
76983: PUSH
76984: LD_INT 4
76986: ST_TO_ADDR
// animal := CreateVehicle ;
76987: LD_ADDR_VAR 0 12
76991: PUSH
76992: CALL_OW 45
76996: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76997: LD_VAR 0 12
77001: PPUSH
77002: LD_VAR 0 8
77006: PPUSH
77007: LD_INT 0
77009: PPUSH
77010: CALL 79160 0 3
// end ;
77014: GO 76968
77016: POP
77017: POP
// if horses then
77018: LD_VAR 0 5
77022: IFFALSE 77089
// for i = 1 to horses do
77024: LD_ADDR_VAR 0 11
77028: PUSH
77029: DOUBLE
77030: LD_INT 1
77032: DEC
77033: ST_TO_ADDR
77034: LD_VAR 0 5
77038: PUSH
77039: FOR_TO
77040: IFFALSE 77087
// begin hc_class := 21 ;
77042: LD_ADDR_OWVAR 28
77046: PUSH
77047: LD_INT 21
77049: ST_TO_ADDR
// hc_gallery :=  ;
77050: LD_ADDR_OWVAR 33
77054: PUSH
77055: LD_STRING 
77057: ST_TO_ADDR
// animal := CreateHuman ;
77058: LD_ADDR_VAR 0 12
77062: PUSH
77063: CALL_OW 44
77067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77068: LD_VAR 0 12
77072: PPUSH
77073: LD_VAR 0 8
77077: PPUSH
77078: LD_INT 0
77080: PPUSH
77081: CALL 79160 0 3
// end ;
77085: GO 77039
77087: POP
77088: POP
// if birds then
77089: LD_VAR 0 1
77093: IFFALSE 77160
// for i = 1 to birds do
77095: LD_ADDR_VAR 0 11
77099: PUSH
77100: DOUBLE
77101: LD_INT 1
77103: DEC
77104: ST_TO_ADDR
77105: LD_VAR 0 1
77109: PUSH
77110: FOR_TO
77111: IFFALSE 77158
// begin hc_class := 18 ;
77113: LD_ADDR_OWVAR 28
77117: PUSH
77118: LD_INT 18
77120: ST_TO_ADDR
// hc_gallery =  ;
77121: LD_ADDR_OWVAR 33
77125: PUSH
77126: LD_STRING 
77128: ST_TO_ADDR
// animal := CreateHuman ;
77129: LD_ADDR_VAR 0 12
77133: PUSH
77134: CALL_OW 44
77138: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77139: LD_VAR 0 12
77143: PPUSH
77144: LD_VAR 0 8
77148: PPUSH
77149: LD_INT 0
77151: PPUSH
77152: CALL 79160 0 3
// end ;
77156: GO 77110
77158: POP
77159: POP
// if tigers then
77160: LD_VAR 0 2
77164: IFFALSE 77248
// for i = 1 to tigers do
77166: LD_ADDR_VAR 0 11
77170: PUSH
77171: DOUBLE
77172: LD_INT 1
77174: DEC
77175: ST_TO_ADDR
77176: LD_VAR 0 2
77180: PUSH
77181: FOR_TO
77182: IFFALSE 77246
// begin hc_class = class_tiger ;
77184: LD_ADDR_OWVAR 28
77188: PUSH
77189: LD_INT 14
77191: ST_TO_ADDR
// hc_gallery =  ;
77192: LD_ADDR_OWVAR 33
77196: PUSH
77197: LD_STRING 
77199: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77200: LD_ADDR_OWVAR 35
77204: PUSH
77205: LD_INT 7
77207: NEG
77208: PPUSH
77209: LD_INT 7
77211: PPUSH
77212: CALL_OW 12
77216: ST_TO_ADDR
// animal := CreateHuman ;
77217: LD_ADDR_VAR 0 12
77221: PUSH
77222: CALL_OW 44
77226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77227: LD_VAR 0 12
77231: PPUSH
77232: LD_VAR 0 8
77236: PPUSH
77237: LD_INT 0
77239: PPUSH
77240: CALL 79160 0 3
// end ;
77244: GO 77181
77246: POP
77247: POP
// if apemans then
77248: LD_VAR 0 3
77252: IFFALSE 77375
// for i = 1 to apemans do
77254: LD_ADDR_VAR 0 11
77258: PUSH
77259: DOUBLE
77260: LD_INT 1
77262: DEC
77263: ST_TO_ADDR
77264: LD_VAR 0 3
77268: PUSH
77269: FOR_TO
77270: IFFALSE 77373
// begin hc_class = class_apeman ;
77272: LD_ADDR_OWVAR 28
77276: PUSH
77277: LD_INT 12
77279: ST_TO_ADDR
// hc_gallery =  ;
77280: LD_ADDR_OWVAR 33
77284: PUSH
77285: LD_STRING 
77287: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77288: LD_ADDR_OWVAR 35
77292: PUSH
77293: LD_INT 2
77295: NEG
77296: PPUSH
77297: LD_INT 2
77299: PPUSH
77300: CALL_OW 12
77304: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77305: LD_ADDR_OWVAR 31
77309: PUSH
77310: LD_INT 1
77312: PPUSH
77313: LD_INT 3
77315: PPUSH
77316: CALL_OW 12
77320: PUSH
77321: LD_INT 1
77323: PPUSH
77324: LD_INT 3
77326: PPUSH
77327: CALL_OW 12
77331: PUSH
77332: LD_INT 0
77334: PUSH
77335: LD_INT 0
77337: PUSH
77338: EMPTY
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: ST_TO_ADDR
// animal := CreateHuman ;
77344: LD_ADDR_VAR 0 12
77348: PUSH
77349: CALL_OW 44
77353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77354: LD_VAR 0 12
77358: PPUSH
77359: LD_VAR 0 8
77363: PPUSH
77364: LD_INT 0
77366: PPUSH
77367: CALL 79160 0 3
// end ;
77371: GO 77269
77373: POP
77374: POP
// if enchidnas then
77375: LD_VAR 0 4
77379: IFFALSE 77446
// for i = 1 to enchidnas do
77381: LD_ADDR_VAR 0 11
77385: PUSH
77386: DOUBLE
77387: LD_INT 1
77389: DEC
77390: ST_TO_ADDR
77391: LD_VAR 0 4
77395: PUSH
77396: FOR_TO
77397: IFFALSE 77444
// begin hc_class = 13 ;
77399: LD_ADDR_OWVAR 28
77403: PUSH
77404: LD_INT 13
77406: ST_TO_ADDR
// hc_gallery =  ;
77407: LD_ADDR_OWVAR 33
77411: PUSH
77412: LD_STRING 
77414: ST_TO_ADDR
// animal := CreateHuman ;
77415: LD_ADDR_VAR 0 12
77419: PUSH
77420: CALL_OW 44
77424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77425: LD_VAR 0 12
77429: PPUSH
77430: LD_VAR 0 8
77434: PPUSH
77435: LD_INT 0
77437: PPUSH
77438: CALL 79160 0 3
// end ;
77442: GO 77396
77444: POP
77445: POP
// if fishes then
77446: LD_VAR 0 7
77450: IFFALSE 77517
// for i = 1 to fishes do
77452: LD_ADDR_VAR 0 11
77456: PUSH
77457: DOUBLE
77458: LD_INT 1
77460: DEC
77461: ST_TO_ADDR
77462: LD_VAR 0 7
77466: PUSH
77467: FOR_TO
77468: IFFALSE 77515
// begin hc_class = 20 ;
77470: LD_ADDR_OWVAR 28
77474: PUSH
77475: LD_INT 20
77477: ST_TO_ADDR
// hc_gallery =  ;
77478: LD_ADDR_OWVAR 33
77482: PUSH
77483: LD_STRING 
77485: ST_TO_ADDR
// animal := CreateHuman ;
77486: LD_ADDR_VAR 0 12
77490: PUSH
77491: CALL_OW 44
77495: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77496: LD_VAR 0 12
77500: PPUSH
77501: LD_VAR 0 9
77505: PPUSH
77506: LD_INT 0
77508: PPUSH
77509: CALL 79160 0 3
// end ;
77513: GO 77467
77515: POP
77516: POP
// end ;
77517: LD_VAR 0 10
77521: RET
// export function WantHeal ( sci , unit ) ; begin
77522: LD_INT 0
77524: PPUSH
// if GetTaskList ( sci ) > 0 then
77525: LD_VAR 0 1
77529: PPUSH
77530: CALL_OW 437
77534: PUSH
77535: LD_INT 0
77537: GREATER
77538: IFFALSE 77610
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77540: LD_VAR 0 1
77544: PPUSH
77545: CALL_OW 437
77549: PUSH
77550: LD_INT 1
77552: ARRAY
77553: PUSH
77554: LD_INT 1
77556: ARRAY
77557: PUSH
77558: LD_STRING l
77560: EQUAL
77561: IFFALSE 77588
77563: PUSH
77564: LD_VAR 0 1
77568: PPUSH
77569: CALL_OW 437
77573: PUSH
77574: LD_INT 1
77576: ARRAY
77577: PUSH
77578: LD_INT 4
77580: ARRAY
77581: PUSH
77582: LD_VAR 0 2
77586: EQUAL
77587: AND
77588: IFFALSE 77600
// result := true else
77590: LD_ADDR_VAR 0 3
77594: PUSH
77595: LD_INT 1
77597: ST_TO_ADDR
77598: GO 77608
// result := false ;
77600: LD_ADDR_VAR 0 3
77604: PUSH
77605: LD_INT 0
77607: ST_TO_ADDR
// end else
77608: GO 77618
// result := false ;
77610: LD_ADDR_VAR 0 3
77614: PUSH
77615: LD_INT 0
77617: ST_TO_ADDR
// end ;
77618: LD_VAR 0 3
77622: RET
// export function HealTarget ( sci ) ; begin
77623: LD_INT 0
77625: PPUSH
// if not sci then
77626: LD_VAR 0 1
77630: NOT
77631: IFFALSE 77635
// exit ;
77633: GO 77700
// result := 0 ;
77635: LD_ADDR_VAR 0 2
77639: PUSH
77640: LD_INT 0
77642: ST_TO_ADDR
// if GetTaskList ( sci ) then
77643: LD_VAR 0 1
77647: PPUSH
77648: CALL_OW 437
77652: IFFALSE 77700
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77654: LD_VAR 0 1
77658: PPUSH
77659: CALL_OW 437
77663: PUSH
77664: LD_INT 1
77666: ARRAY
77667: PUSH
77668: LD_INT 1
77670: ARRAY
77671: PUSH
77672: LD_STRING l
77674: EQUAL
77675: IFFALSE 77700
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77677: LD_ADDR_VAR 0 2
77681: PUSH
77682: LD_VAR 0 1
77686: PPUSH
77687: CALL_OW 437
77691: PUSH
77692: LD_INT 1
77694: ARRAY
77695: PUSH
77696: LD_INT 4
77698: ARRAY
77699: ST_TO_ADDR
// end ;
77700: LD_VAR 0 2
77704: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77705: LD_INT 0
77707: PPUSH
77708: PPUSH
77709: PPUSH
77710: PPUSH
// if not base_units then
77711: LD_VAR 0 1
77715: NOT
77716: IFFALSE 77720
// exit ;
77718: GO 77807
// result := false ;
77720: LD_ADDR_VAR 0 2
77724: PUSH
77725: LD_INT 0
77727: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77728: LD_ADDR_VAR 0 5
77732: PUSH
77733: LD_VAR 0 1
77737: PPUSH
77738: LD_INT 21
77740: PUSH
77741: LD_INT 3
77743: PUSH
77744: EMPTY
77745: LIST
77746: LIST
77747: PPUSH
77748: CALL_OW 72
77752: ST_TO_ADDR
// if not tmp then
77753: LD_VAR 0 5
77757: NOT
77758: IFFALSE 77762
// exit ;
77760: GO 77807
// for i in tmp do
77762: LD_ADDR_VAR 0 3
77766: PUSH
77767: LD_VAR 0 5
77771: PUSH
77772: FOR_IN
77773: IFFALSE 77805
// begin result := EnemyInRange ( i , 22 ) ;
77775: LD_ADDR_VAR 0 2
77779: PUSH
77780: LD_VAR 0 3
77784: PPUSH
77785: LD_INT 22
77787: PPUSH
77788: CALL 75232 0 2
77792: ST_TO_ADDR
// if result then
77793: LD_VAR 0 2
77797: IFFALSE 77803
// exit ;
77799: POP
77800: POP
77801: GO 77807
// end ;
77803: GO 77772
77805: POP
77806: POP
// end ;
77807: LD_VAR 0 2
77811: RET
// export function FilterByTag ( units , tag ) ; begin
77812: LD_INT 0
77814: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77815: LD_ADDR_VAR 0 3
77819: PUSH
77820: LD_VAR 0 1
77824: PPUSH
77825: LD_INT 120
77827: PUSH
77828: LD_VAR 0 2
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PPUSH
77837: CALL_OW 72
77841: ST_TO_ADDR
// end ;
77842: LD_VAR 0 3
77846: RET
// export function IsDriver ( un ) ; begin
77847: LD_INT 0
77849: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77850: LD_ADDR_VAR 0 2
77854: PUSH
77855: LD_VAR 0 1
77859: PUSH
77860: LD_INT 55
77862: PUSH
77863: EMPTY
77864: LIST
77865: PPUSH
77866: CALL_OW 69
77870: IN
77871: ST_TO_ADDR
// end ;
77872: LD_VAR 0 2
77876: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77877: LD_INT 0
77879: PPUSH
77880: PPUSH
// list := [ ] ;
77881: LD_ADDR_VAR 0 5
77885: PUSH
77886: EMPTY
77887: ST_TO_ADDR
// case d of 0 :
77888: LD_VAR 0 3
77892: PUSH
77893: LD_INT 0
77895: DOUBLE
77896: EQUAL
77897: IFTRUE 77901
77899: GO 78034
77901: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77902: LD_ADDR_VAR 0 5
77906: PUSH
77907: LD_VAR 0 1
77911: PUSH
77912: LD_INT 4
77914: MINUS
77915: PUSH
77916: LD_VAR 0 2
77920: PUSH
77921: LD_INT 4
77923: MINUS
77924: PUSH
77925: LD_INT 2
77927: PUSH
77928: EMPTY
77929: LIST
77930: LIST
77931: LIST
77932: PUSH
77933: LD_VAR 0 1
77937: PUSH
77938: LD_INT 3
77940: MINUS
77941: PUSH
77942: LD_VAR 0 2
77946: PUSH
77947: LD_INT 1
77949: PUSH
77950: EMPTY
77951: LIST
77952: LIST
77953: LIST
77954: PUSH
77955: LD_VAR 0 1
77959: PUSH
77960: LD_INT 4
77962: PLUS
77963: PUSH
77964: LD_VAR 0 2
77968: PUSH
77969: LD_INT 4
77971: PUSH
77972: EMPTY
77973: LIST
77974: LIST
77975: LIST
77976: PUSH
77977: LD_VAR 0 1
77981: PUSH
77982: LD_INT 3
77984: PLUS
77985: PUSH
77986: LD_VAR 0 2
77990: PUSH
77991: LD_INT 3
77993: PLUS
77994: PUSH
77995: LD_INT 5
77997: PUSH
77998: EMPTY
77999: LIST
78000: LIST
78001: LIST
78002: PUSH
78003: LD_VAR 0 1
78007: PUSH
78008: LD_VAR 0 2
78012: PUSH
78013: LD_INT 4
78015: PLUS
78016: PUSH
78017: LD_INT 0
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: LIST
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: LIST
78029: LIST
78030: LIST
78031: ST_TO_ADDR
// end ; 1 :
78032: GO 78732
78034: LD_INT 1
78036: DOUBLE
78037: EQUAL
78038: IFTRUE 78042
78040: GO 78175
78042: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78043: LD_ADDR_VAR 0 5
78047: PUSH
78048: LD_VAR 0 1
78052: PUSH
78053: LD_VAR 0 2
78057: PUSH
78058: LD_INT 4
78060: MINUS
78061: PUSH
78062: LD_INT 3
78064: PUSH
78065: EMPTY
78066: LIST
78067: LIST
78068: LIST
78069: PUSH
78070: LD_VAR 0 1
78074: PUSH
78075: LD_INT 3
78077: MINUS
78078: PUSH
78079: LD_VAR 0 2
78083: PUSH
78084: LD_INT 3
78086: MINUS
78087: PUSH
78088: LD_INT 2
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: LIST
78095: PUSH
78096: LD_VAR 0 1
78100: PUSH
78101: LD_INT 4
78103: MINUS
78104: PUSH
78105: LD_VAR 0 2
78109: PUSH
78110: LD_INT 1
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: LIST
78117: PUSH
78118: LD_VAR 0 1
78122: PUSH
78123: LD_VAR 0 2
78127: PUSH
78128: LD_INT 3
78130: PLUS
78131: PUSH
78132: LD_INT 0
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: LIST
78139: PUSH
78140: LD_VAR 0 1
78144: PUSH
78145: LD_INT 4
78147: PLUS
78148: PUSH
78149: LD_VAR 0 2
78153: PUSH
78154: LD_INT 4
78156: PLUS
78157: PUSH
78158: LD_INT 5
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: LIST
78165: PUSH
78166: EMPTY
78167: LIST
78168: LIST
78169: LIST
78170: LIST
78171: LIST
78172: ST_TO_ADDR
// end ; 2 :
78173: GO 78732
78175: LD_INT 2
78177: DOUBLE
78178: EQUAL
78179: IFTRUE 78183
78181: GO 78312
78183: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78184: LD_ADDR_VAR 0 5
78188: PUSH
78189: LD_VAR 0 1
78193: PUSH
78194: LD_VAR 0 2
78198: PUSH
78199: LD_INT 3
78201: MINUS
78202: PUSH
78203: LD_INT 3
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: LIST
78210: PUSH
78211: LD_VAR 0 1
78215: PUSH
78216: LD_INT 4
78218: PLUS
78219: PUSH
78220: LD_VAR 0 2
78224: PUSH
78225: LD_INT 4
78227: PUSH
78228: EMPTY
78229: LIST
78230: LIST
78231: LIST
78232: PUSH
78233: LD_VAR 0 1
78237: PUSH
78238: LD_VAR 0 2
78242: PUSH
78243: LD_INT 4
78245: PLUS
78246: PUSH
78247: LD_INT 0
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: LIST
78254: PUSH
78255: LD_VAR 0 1
78259: PUSH
78260: LD_INT 3
78262: MINUS
78263: PUSH
78264: LD_VAR 0 2
78268: PUSH
78269: LD_INT 1
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: LIST
78276: PUSH
78277: LD_VAR 0 1
78281: PUSH
78282: LD_INT 4
78284: MINUS
78285: PUSH
78286: LD_VAR 0 2
78290: PUSH
78291: LD_INT 4
78293: MINUS
78294: PUSH
78295: LD_INT 2
78297: PUSH
78298: EMPTY
78299: LIST
78300: LIST
78301: LIST
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: LIST
78307: LIST
78308: LIST
78309: ST_TO_ADDR
// end ; 3 :
78310: GO 78732
78312: LD_INT 3
78314: DOUBLE
78315: EQUAL
78316: IFTRUE 78320
78318: GO 78453
78320: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78321: LD_ADDR_VAR 0 5
78325: PUSH
78326: LD_VAR 0 1
78330: PUSH
78331: LD_INT 3
78333: PLUS
78334: PUSH
78335: LD_VAR 0 2
78339: PUSH
78340: LD_INT 4
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: LIST
78347: PUSH
78348: LD_VAR 0 1
78352: PUSH
78353: LD_INT 4
78355: PLUS
78356: PUSH
78357: LD_VAR 0 2
78361: PUSH
78362: LD_INT 4
78364: PLUS
78365: PUSH
78366: LD_INT 5
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: LIST
78373: PUSH
78374: LD_VAR 0 1
78378: PUSH
78379: LD_INT 4
78381: MINUS
78382: PUSH
78383: LD_VAR 0 2
78387: PUSH
78388: LD_INT 1
78390: PUSH
78391: EMPTY
78392: LIST
78393: LIST
78394: LIST
78395: PUSH
78396: LD_VAR 0 1
78400: PUSH
78401: LD_VAR 0 2
78405: PUSH
78406: LD_INT 4
78408: MINUS
78409: PUSH
78410: LD_INT 3
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: LIST
78417: PUSH
78418: LD_VAR 0 1
78422: PUSH
78423: LD_INT 3
78425: MINUS
78426: PUSH
78427: LD_VAR 0 2
78431: PUSH
78432: LD_INT 3
78434: MINUS
78435: PUSH
78436: LD_INT 2
78438: PUSH
78439: EMPTY
78440: LIST
78441: LIST
78442: LIST
78443: PUSH
78444: EMPTY
78445: LIST
78446: LIST
78447: LIST
78448: LIST
78449: LIST
78450: ST_TO_ADDR
// end ; 4 :
78451: GO 78732
78453: LD_INT 4
78455: DOUBLE
78456: EQUAL
78457: IFTRUE 78461
78459: GO 78594
78461: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78462: LD_ADDR_VAR 0 5
78466: PUSH
78467: LD_VAR 0 1
78471: PUSH
78472: LD_VAR 0 2
78476: PUSH
78477: LD_INT 4
78479: PLUS
78480: PUSH
78481: LD_INT 0
78483: PUSH
78484: EMPTY
78485: LIST
78486: LIST
78487: LIST
78488: PUSH
78489: LD_VAR 0 1
78493: PUSH
78494: LD_INT 3
78496: PLUS
78497: PUSH
78498: LD_VAR 0 2
78502: PUSH
78503: LD_INT 3
78505: PLUS
78506: PUSH
78507: LD_INT 5
78509: PUSH
78510: EMPTY
78511: LIST
78512: LIST
78513: LIST
78514: PUSH
78515: LD_VAR 0 1
78519: PUSH
78520: LD_INT 4
78522: PLUS
78523: PUSH
78524: LD_VAR 0 2
78528: PUSH
78529: LD_INT 4
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: LIST
78536: PUSH
78537: LD_VAR 0 1
78541: PUSH
78542: LD_VAR 0 2
78546: PUSH
78547: LD_INT 3
78549: MINUS
78550: PUSH
78551: LD_INT 3
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: LIST
78558: PUSH
78559: LD_VAR 0 1
78563: PUSH
78564: LD_INT 4
78566: MINUS
78567: PUSH
78568: LD_VAR 0 2
78572: PUSH
78573: LD_INT 4
78575: MINUS
78576: PUSH
78577: LD_INT 2
78579: PUSH
78580: EMPTY
78581: LIST
78582: LIST
78583: LIST
78584: PUSH
78585: EMPTY
78586: LIST
78587: LIST
78588: LIST
78589: LIST
78590: LIST
78591: ST_TO_ADDR
// end ; 5 :
78592: GO 78732
78594: LD_INT 5
78596: DOUBLE
78597: EQUAL
78598: IFTRUE 78602
78600: GO 78731
78602: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78603: LD_ADDR_VAR 0 5
78607: PUSH
78608: LD_VAR 0 1
78612: PUSH
78613: LD_INT 4
78615: MINUS
78616: PUSH
78617: LD_VAR 0 2
78621: PUSH
78622: LD_INT 1
78624: PUSH
78625: EMPTY
78626: LIST
78627: LIST
78628: LIST
78629: PUSH
78630: LD_VAR 0 1
78634: PUSH
78635: LD_VAR 0 2
78639: PUSH
78640: LD_INT 4
78642: MINUS
78643: PUSH
78644: LD_INT 3
78646: PUSH
78647: EMPTY
78648: LIST
78649: LIST
78650: LIST
78651: PUSH
78652: LD_VAR 0 1
78656: PUSH
78657: LD_INT 4
78659: PLUS
78660: PUSH
78661: LD_VAR 0 2
78665: PUSH
78666: LD_INT 4
78668: PLUS
78669: PUSH
78670: LD_INT 5
78672: PUSH
78673: EMPTY
78674: LIST
78675: LIST
78676: LIST
78677: PUSH
78678: LD_VAR 0 1
78682: PUSH
78683: LD_INT 3
78685: PLUS
78686: PUSH
78687: LD_VAR 0 2
78691: PUSH
78692: LD_INT 4
78694: PUSH
78695: EMPTY
78696: LIST
78697: LIST
78698: LIST
78699: PUSH
78700: LD_VAR 0 1
78704: PUSH
78705: LD_VAR 0 2
78709: PUSH
78710: LD_INT 3
78712: PLUS
78713: PUSH
78714: LD_INT 0
78716: PUSH
78717: EMPTY
78718: LIST
78719: LIST
78720: LIST
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: LIST
78726: LIST
78727: LIST
78728: ST_TO_ADDR
// end ; end ;
78729: GO 78732
78731: POP
// result := list ;
78732: LD_ADDR_VAR 0 4
78736: PUSH
78737: LD_VAR 0 5
78741: ST_TO_ADDR
// end ;
78742: LD_VAR 0 4
78746: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78747: LD_INT 0
78749: PPUSH
78750: PPUSH
78751: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78752: LD_VAR 0 1
78756: NOT
78757: IFTRUE 78785
78759: PUSH
78760: LD_VAR 0 2
78764: PUSH
78765: LD_INT 1
78767: PUSH
78768: LD_INT 2
78770: PUSH
78771: LD_INT 3
78773: PUSH
78774: LD_INT 4
78776: PUSH
78777: EMPTY
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: IN
78783: NOT
78784: OR
78785: IFFALSE 78789
// exit ;
78787: GO 78872
// tmp := [ ] ;
78789: LD_ADDR_VAR 0 5
78793: PUSH
78794: EMPTY
78795: ST_TO_ADDR
// for i in units do
78796: LD_ADDR_VAR 0 4
78800: PUSH
78801: LD_VAR 0 1
78805: PUSH
78806: FOR_IN
78807: IFFALSE 78841
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78809: LD_ADDR_VAR 0 5
78813: PUSH
78814: LD_VAR 0 5
78818: PPUSH
78819: LD_VAR 0 4
78823: PPUSH
78824: LD_VAR 0 2
78828: PPUSH
78829: CALL_OW 259
78833: PPUSH
78834: CALL 80267 0 2
78838: ST_TO_ADDR
78839: GO 78806
78841: POP
78842: POP
// if not tmp then
78843: LD_VAR 0 5
78847: NOT
78848: IFFALSE 78852
// exit ;
78850: GO 78872
// result := SortListByListDesc ( units , tmp ) ;
78852: LD_ADDR_VAR 0 3
78856: PUSH
78857: LD_VAR 0 1
78861: PPUSH
78862: LD_VAR 0 5
78866: PPUSH
78867: CALL_OW 77
78871: ST_TO_ADDR
// end ;
78872: LD_VAR 0 3
78876: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78877: LD_INT 0
78879: PPUSH
78880: PPUSH
78881: PPUSH
// result := false ;
78882: LD_ADDR_VAR 0 3
78886: PUSH
78887: LD_INT 0
78889: ST_TO_ADDR
// if not building then
78890: LD_VAR 0 2
78894: NOT
78895: IFFALSE 78899
// exit ;
78897: GO 79043
// x := GetX ( building ) ;
78899: LD_ADDR_VAR 0 4
78903: PUSH
78904: LD_VAR 0 2
78908: PPUSH
78909: CALL_OW 250
78913: ST_TO_ADDR
// y := GetY ( building ) ;
78914: LD_ADDR_VAR 0 5
78918: PUSH
78919: LD_VAR 0 2
78923: PPUSH
78924: CALL_OW 251
78928: ST_TO_ADDR
// if not x or not y then
78929: LD_VAR 0 4
78933: NOT
78934: IFTRUE 78943
78936: PUSH
78937: LD_VAR 0 5
78941: NOT
78942: OR
78943: IFFALSE 78947
// exit ;
78945: GO 79043
// if GetTaskList ( unit ) then
78947: LD_VAR 0 1
78951: PPUSH
78952: CALL_OW 437
78956: IFFALSE 79043
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78958: LD_STRING e
78960: PUSH
78961: LD_VAR 0 1
78965: PPUSH
78966: CALL_OW 437
78970: PUSH
78971: LD_INT 1
78973: ARRAY
78974: PUSH
78975: LD_INT 1
78977: ARRAY
78978: EQUAL
78979: IFFALSE 79006
78981: PUSH
78982: LD_VAR 0 4
78986: PUSH
78987: LD_VAR 0 1
78991: PPUSH
78992: CALL_OW 437
78996: PUSH
78997: LD_INT 1
78999: ARRAY
79000: PUSH
79001: LD_INT 2
79003: ARRAY
79004: EQUAL
79005: AND
79006: IFFALSE 79033
79008: PUSH
79009: LD_VAR 0 5
79013: PUSH
79014: LD_VAR 0 1
79018: PPUSH
79019: CALL_OW 437
79023: PUSH
79024: LD_INT 1
79026: ARRAY
79027: PUSH
79028: LD_INT 3
79030: ARRAY
79031: EQUAL
79032: AND
79033: IFFALSE 79043
// result := true end ;
79035: LD_ADDR_VAR 0 3
79039: PUSH
79040: LD_INT 1
79042: ST_TO_ADDR
// end ;
79043: LD_VAR 0 3
79047: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79048: LD_INT 0
79050: PPUSH
// result := false ;
79051: LD_ADDR_VAR 0 4
79055: PUSH
79056: LD_INT 0
79058: ST_TO_ADDR
// if GetTaskList ( unit ) then
79059: LD_VAR 0 1
79063: PPUSH
79064: CALL_OW 437
79068: IFFALSE 79155
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79070: LD_STRING M
79072: PUSH
79073: LD_VAR 0 1
79077: PPUSH
79078: CALL_OW 437
79082: PUSH
79083: LD_INT 1
79085: ARRAY
79086: PUSH
79087: LD_INT 1
79089: ARRAY
79090: EQUAL
79091: IFFALSE 79118
79093: PUSH
79094: LD_VAR 0 2
79098: PUSH
79099: LD_VAR 0 1
79103: PPUSH
79104: CALL_OW 437
79108: PUSH
79109: LD_INT 1
79111: ARRAY
79112: PUSH
79113: LD_INT 2
79115: ARRAY
79116: EQUAL
79117: AND
79118: IFFALSE 79145
79120: PUSH
79121: LD_VAR 0 3
79125: PUSH
79126: LD_VAR 0 1
79130: PPUSH
79131: CALL_OW 437
79135: PUSH
79136: LD_INT 1
79138: ARRAY
79139: PUSH
79140: LD_INT 3
79142: ARRAY
79143: EQUAL
79144: AND
79145: IFFALSE 79155
// result := true ;
79147: LD_ADDR_VAR 0 4
79151: PUSH
79152: LD_INT 1
79154: ST_TO_ADDR
// end ; end ;
79155: LD_VAR 0 4
79159: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79160: LD_INT 0
79162: PPUSH
79163: PPUSH
79164: PPUSH
79165: PPUSH
// if not unit or not area then
79166: LD_VAR 0 1
79170: NOT
79171: IFTRUE 79180
79173: PUSH
79174: LD_VAR 0 2
79178: NOT
79179: OR
79180: IFFALSE 79184
// exit ;
79182: GO 79360
// tmp := AreaToList ( area , i ) ;
79184: LD_ADDR_VAR 0 6
79188: PUSH
79189: LD_VAR 0 2
79193: PPUSH
79194: LD_VAR 0 5
79198: PPUSH
79199: CALL_OW 517
79203: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79204: LD_ADDR_VAR 0 5
79208: PUSH
79209: DOUBLE
79210: LD_INT 1
79212: DEC
79213: ST_TO_ADDR
79214: LD_VAR 0 6
79218: PUSH
79219: LD_INT 1
79221: ARRAY
79222: PUSH
79223: FOR_TO
79224: IFFALSE 79358
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79226: LD_ADDR_VAR 0 7
79230: PUSH
79231: LD_VAR 0 6
79235: PUSH
79236: LD_INT 1
79238: ARRAY
79239: PUSH
79240: LD_VAR 0 5
79244: ARRAY
79245: PUSH
79246: LD_VAR 0 6
79250: PUSH
79251: LD_INT 2
79253: ARRAY
79254: PUSH
79255: LD_VAR 0 5
79259: ARRAY
79260: PUSH
79261: EMPTY
79262: LIST
79263: LIST
79264: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79265: LD_INT 92
79267: PUSH
79268: LD_VAR 0 7
79272: PUSH
79273: LD_INT 1
79275: ARRAY
79276: PUSH
79277: LD_VAR 0 7
79281: PUSH
79282: LD_INT 2
79284: ARRAY
79285: PUSH
79286: LD_INT 2
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: LIST
79293: LIST
79294: PPUSH
79295: CALL_OW 69
79299: PUSH
79300: LD_INT 0
79302: EQUAL
79303: IFFALSE 79356
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79305: LD_VAR 0 1
79309: PPUSH
79310: LD_VAR 0 7
79314: PUSH
79315: LD_INT 1
79317: ARRAY
79318: PPUSH
79319: LD_VAR 0 7
79323: PUSH
79324: LD_INT 2
79326: ARRAY
79327: PPUSH
79328: LD_VAR 0 3
79332: PPUSH
79333: CALL_OW 48
// result := IsPlaced ( unit ) ;
79337: LD_ADDR_VAR 0 4
79341: PUSH
79342: LD_VAR 0 1
79346: PPUSH
79347: CALL_OW 305
79351: ST_TO_ADDR
// exit ;
79352: POP
79353: POP
79354: GO 79360
// end ; end ;
79356: GO 79223
79358: POP
79359: POP
// end ;
79360: LD_VAR 0 4
79364: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79365: LD_INT 0
79367: PPUSH
79368: PPUSH
79369: PPUSH
// if not side or side > 8 then
79370: LD_VAR 0 1
79374: NOT
79375: IFTRUE 79387
79377: PUSH
79378: LD_VAR 0 1
79382: PUSH
79383: LD_INT 8
79385: GREATER
79386: OR
79387: IFFALSE 79391
// exit ;
79389: GO 79578
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79391: LD_ADDR_VAR 0 4
79395: PUSH
79396: LD_INT 22
79398: PUSH
79399: LD_VAR 0 1
79403: PUSH
79404: EMPTY
79405: LIST
79406: LIST
79407: PUSH
79408: LD_INT 21
79410: PUSH
79411: LD_INT 3
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: PUSH
79418: EMPTY
79419: LIST
79420: LIST
79421: PPUSH
79422: CALL_OW 69
79426: ST_TO_ADDR
// if not tmp then
79427: LD_VAR 0 4
79431: NOT
79432: IFFALSE 79436
// exit ;
79434: GO 79578
// enable_addtolog := true ;
79436: LD_ADDR_OWVAR 81
79440: PUSH
79441: LD_INT 1
79443: ST_TO_ADDR
// AddToLog ( [ ) ;
79444: LD_STRING [
79446: PPUSH
79447: CALL_OW 561
// for i in tmp do
79451: LD_ADDR_VAR 0 3
79455: PUSH
79456: LD_VAR 0 4
79460: PUSH
79461: FOR_IN
79462: IFFALSE 79569
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79464: LD_STRING [
79466: PUSH
79467: LD_VAR 0 3
79471: PPUSH
79472: CALL_OW 266
79476: STR
79477: PUSH
79478: LD_STRING , 
79480: STR
79481: PUSH
79482: LD_VAR 0 3
79486: PPUSH
79487: CALL_OW 250
79491: STR
79492: PUSH
79493: LD_STRING , 
79495: STR
79496: PUSH
79497: LD_VAR 0 3
79501: PPUSH
79502: CALL_OW 251
79506: STR
79507: PUSH
79508: LD_STRING , 
79510: STR
79511: PUSH
79512: LD_VAR 0 3
79516: PPUSH
79517: CALL_OW 254
79521: STR
79522: PUSH
79523: LD_STRING , 
79525: STR
79526: PUSH
79527: LD_VAR 0 3
79531: PPUSH
79532: LD_INT 1
79534: PPUSH
79535: CALL_OW 268
79539: STR
79540: PUSH
79541: LD_STRING , 
79543: STR
79544: PUSH
79545: LD_VAR 0 3
79549: PPUSH
79550: LD_INT 2
79552: PPUSH
79553: CALL_OW 268
79557: STR
79558: PUSH
79559: LD_STRING ],
79561: STR
79562: PPUSH
79563: CALL_OW 561
// end ;
79567: GO 79461
79569: POP
79570: POP
// AddToLog ( ]; ) ;
79571: LD_STRING ];
79573: PPUSH
79574: CALL_OW 561
// end ;
79578: LD_VAR 0 2
79582: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79583: LD_INT 0
79585: PPUSH
79586: PPUSH
79587: PPUSH
79588: PPUSH
79589: PPUSH
// if not area or not rate or not max then
79590: LD_VAR 0 1
79594: NOT
79595: IFTRUE 79604
79597: PUSH
79598: LD_VAR 0 2
79602: NOT
79603: OR
79604: IFTRUE 79613
79606: PUSH
79607: LD_VAR 0 4
79611: NOT
79612: OR
79613: IFFALSE 79617
// exit ;
79615: GO 79806
// while 1 do
79617: LD_INT 1
79619: IFFALSE 79806
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79621: LD_ADDR_VAR 0 9
79625: PUSH
79626: LD_VAR 0 1
79630: PPUSH
79631: LD_INT 1
79633: PPUSH
79634: CALL_OW 287
79638: PUSH
79639: LD_INT 10
79641: MUL
79642: ST_TO_ADDR
// r := rate / 10 ;
79643: LD_ADDR_VAR 0 7
79647: PUSH
79648: LD_VAR 0 2
79652: PUSH
79653: LD_INT 10
79655: DIVREAL
79656: ST_TO_ADDR
// time := 1 1$00 ;
79657: LD_ADDR_VAR 0 8
79661: PUSH
79662: LD_INT 2100
79664: ST_TO_ADDR
// if amount < min then
79665: LD_VAR 0 9
79669: PUSH
79670: LD_VAR 0 3
79674: LESS
79675: IFFALSE 79693
// r := r * 2 else
79677: LD_ADDR_VAR 0 7
79681: PUSH
79682: LD_VAR 0 7
79686: PUSH
79687: LD_INT 2
79689: MUL
79690: ST_TO_ADDR
79691: GO 79719
// if amount > max then
79693: LD_VAR 0 9
79697: PUSH
79698: LD_VAR 0 4
79702: GREATER
79703: IFFALSE 79719
// r := r / 2 ;
79705: LD_ADDR_VAR 0 7
79709: PUSH
79710: LD_VAR 0 7
79714: PUSH
79715: LD_INT 2
79717: DIVREAL
79718: ST_TO_ADDR
// time := time / r ;
79719: LD_ADDR_VAR 0 8
79723: PUSH
79724: LD_VAR 0 8
79728: PUSH
79729: LD_VAR 0 7
79733: DIVREAL
79734: ST_TO_ADDR
// if time < 0 then
79735: LD_VAR 0 8
79739: PUSH
79740: LD_INT 0
79742: LESS
79743: IFFALSE 79760
// time := time * - 1 ;
79745: LD_ADDR_VAR 0 8
79749: PUSH
79750: LD_VAR 0 8
79754: PUSH
79755: LD_INT 1
79757: NEG
79758: MUL
79759: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79760: LD_VAR 0 8
79764: PUSH
79765: LD_INT 35
79767: PPUSH
79768: LD_INT 875
79770: PPUSH
79771: CALL_OW 12
79775: PLUS
79776: PPUSH
79777: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79781: LD_INT 1
79783: PPUSH
79784: LD_INT 5
79786: PPUSH
79787: CALL_OW 12
79791: PPUSH
79792: LD_VAR 0 1
79796: PPUSH
79797: LD_INT 1
79799: PPUSH
79800: CALL_OW 55
// end ;
79804: GO 79617
// end ;
79806: LD_VAR 0 5
79810: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79811: LD_INT 0
79813: PPUSH
79814: PPUSH
79815: PPUSH
79816: PPUSH
79817: PPUSH
79818: PPUSH
79819: PPUSH
79820: PPUSH
// if not turrets or not factories then
79821: LD_VAR 0 1
79825: NOT
79826: IFTRUE 79835
79828: PUSH
79829: LD_VAR 0 2
79833: NOT
79834: OR
79835: IFFALSE 79839
// exit ;
79837: GO 80146
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79839: LD_ADDR_VAR 0 10
79843: PUSH
79844: LD_INT 5
79846: PUSH
79847: LD_INT 6
79849: PUSH
79850: EMPTY
79851: LIST
79852: LIST
79853: PUSH
79854: LD_INT 2
79856: PUSH
79857: LD_INT 4
79859: PUSH
79860: EMPTY
79861: LIST
79862: LIST
79863: PUSH
79864: LD_INT 3
79866: PUSH
79867: LD_INT 5
79869: PUSH
79870: EMPTY
79871: LIST
79872: LIST
79873: PUSH
79874: EMPTY
79875: LIST
79876: LIST
79877: LIST
79878: PUSH
79879: LD_INT 24
79881: PUSH
79882: LD_INT 25
79884: PUSH
79885: EMPTY
79886: LIST
79887: LIST
79888: PUSH
79889: LD_INT 23
79891: PUSH
79892: LD_INT 27
79894: PUSH
79895: EMPTY
79896: LIST
79897: LIST
79898: PUSH
79899: EMPTY
79900: LIST
79901: LIST
79902: PUSH
79903: LD_INT 42
79905: PUSH
79906: LD_INT 43
79908: PUSH
79909: EMPTY
79910: LIST
79911: LIST
79912: PUSH
79913: LD_INT 44
79915: PUSH
79916: LD_INT 46
79918: PUSH
79919: EMPTY
79920: LIST
79921: LIST
79922: PUSH
79923: LD_INT 45
79925: PUSH
79926: LD_INT 47
79928: PUSH
79929: EMPTY
79930: LIST
79931: LIST
79932: PUSH
79933: EMPTY
79934: LIST
79935: LIST
79936: LIST
79937: PUSH
79938: EMPTY
79939: LIST
79940: LIST
79941: LIST
79942: ST_TO_ADDR
// result := [ ] ;
79943: LD_ADDR_VAR 0 3
79947: PUSH
79948: EMPTY
79949: ST_TO_ADDR
// for i in turrets do
79950: LD_ADDR_VAR 0 4
79954: PUSH
79955: LD_VAR 0 1
79959: PUSH
79960: FOR_IN
79961: IFFALSE 80144
// begin nat := GetNation ( i ) ;
79963: LD_ADDR_VAR 0 7
79967: PUSH
79968: LD_VAR 0 4
79972: PPUSH
79973: CALL_OW 248
79977: ST_TO_ADDR
// weapon := 0 ;
79978: LD_ADDR_VAR 0 8
79982: PUSH
79983: LD_INT 0
79985: ST_TO_ADDR
// if not nat then
79986: LD_VAR 0 7
79990: NOT
79991: IFFALSE 79995
// continue ;
79993: GO 79960
// for j in list [ nat ] do
79995: LD_ADDR_VAR 0 5
79999: PUSH
80000: LD_VAR 0 10
80004: PUSH
80005: LD_VAR 0 7
80009: ARRAY
80010: PUSH
80011: FOR_IN
80012: IFFALSE 80053
// if GetBWeapon ( i ) = j [ 1 ] then
80014: LD_VAR 0 4
80018: PPUSH
80019: CALL_OW 269
80023: PUSH
80024: LD_VAR 0 5
80028: PUSH
80029: LD_INT 1
80031: ARRAY
80032: EQUAL
80033: IFFALSE 80051
// begin weapon := j [ 2 ] ;
80035: LD_ADDR_VAR 0 8
80039: PUSH
80040: LD_VAR 0 5
80044: PUSH
80045: LD_INT 2
80047: ARRAY
80048: ST_TO_ADDR
// break ;
80049: GO 80053
// end ;
80051: GO 80011
80053: POP
80054: POP
// if not weapon then
80055: LD_VAR 0 8
80059: NOT
80060: IFFALSE 80064
// continue ;
80062: GO 79960
// for k in factories do
80064: LD_ADDR_VAR 0 6
80068: PUSH
80069: LD_VAR 0 2
80073: PUSH
80074: FOR_IN
80075: IFFALSE 80140
// begin weapons := AvailableWeaponList ( k ) ;
80077: LD_ADDR_VAR 0 9
80081: PUSH
80082: LD_VAR 0 6
80086: PPUSH
80087: CALL_OW 478
80091: ST_TO_ADDR
// if not weapons then
80092: LD_VAR 0 9
80096: NOT
80097: IFFALSE 80101
// continue ;
80099: GO 80074
// if weapon in weapons then
80101: LD_VAR 0 8
80105: PUSH
80106: LD_VAR 0 9
80110: IN
80111: IFFALSE 80138
// begin result := [ i , weapon ] ;
80113: LD_ADDR_VAR 0 3
80117: PUSH
80118: LD_VAR 0 4
80122: PUSH
80123: LD_VAR 0 8
80127: PUSH
80128: EMPTY
80129: LIST
80130: LIST
80131: ST_TO_ADDR
// exit ;
80132: POP
80133: POP
80134: POP
80135: POP
80136: GO 80146
// end ; end ;
80138: GO 80074
80140: POP
80141: POP
// end ;
80142: GO 79960
80144: POP
80145: POP
// end ;
80146: LD_VAR 0 3
80150: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80151: LD_INT 0
80153: PPUSH
// if not side or side > 8 then
80154: LD_VAR 0 3
80158: NOT
80159: IFTRUE 80171
80161: PUSH
80162: LD_VAR 0 3
80166: PUSH
80167: LD_INT 8
80169: GREATER
80170: OR
80171: IFFALSE 80175
// exit ;
80173: GO 80234
// if not range then
80175: LD_VAR 0 4
80179: NOT
80180: IFFALSE 80191
// range := - 12 ;
80182: LD_ADDR_VAR 0 4
80186: PUSH
80187: LD_INT 12
80189: NEG
80190: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80191: LD_VAR 0 1
80195: PPUSH
80196: LD_VAR 0 2
80200: PPUSH
80201: LD_VAR 0 3
80205: PPUSH
80206: LD_VAR 0 4
80210: PPUSH
80211: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80215: LD_VAR 0 1
80219: PPUSH
80220: LD_VAR 0 2
80224: PPUSH
80225: LD_VAR 0 3
80229: PPUSH
80230: CALL_OW 331
// end ;
80234: LD_VAR 0 5
80238: RET
// export function Video ( mode ) ; begin
80239: LD_INT 0
80241: PPUSH
// ingame_video = mode ;
80242: LD_ADDR_OWVAR 52
80246: PUSH
80247: LD_VAR 0 1
80251: ST_TO_ADDR
// interface_hidden = mode ;
80252: LD_ADDR_OWVAR 54
80256: PUSH
80257: LD_VAR 0 1
80261: ST_TO_ADDR
// end ;
80262: LD_VAR 0 2
80266: RET
// export function Join ( array , element ) ; begin
80267: LD_INT 0
80269: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80270: LD_ADDR_VAR 0 3
80274: PUSH
80275: LD_VAR 0 1
80279: PPUSH
80280: LD_VAR 0 1
80284: PUSH
80285: LD_INT 1
80287: PLUS
80288: PPUSH
80289: LD_VAR 0 2
80293: PPUSH
80294: CALL_OW 1
80298: ST_TO_ADDR
// end ;
80299: LD_VAR 0 3
80303: RET
// export function JoinUnion ( array , element ) ; begin
80304: LD_INT 0
80306: PPUSH
// result := array union element ;
80307: LD_ADDR_VAR 0 3
80311: PUSH
80312: LD_VAR 0 1
80316: PUSH
80317: LD_VAR 0 2
80321: UNION
80322: ST_TO_ADDR
// end ;
80323: LD_VAR 0 3
80327: RET
// export function GetBehemoths ( side ) ; begin
80328: LD_INT 0
80330: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80331: LD_ADDR_VAR 0 2
80335: PUSH
80336: LD_INT 22
80338: PUSH
80339: LD_VAR 0 1
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: LD_INT 31
80350: PUSH
80351: LD_INT 25
80353: PUSH
80354: EMPTY
80355: LIST
80356: LIST
80357: PUSH
80358: EMPTY
80359: LIST
80360: LIST
80361: PPUSH
80362: CALL_OW 69
80366: ST_TO_ADDR
// end ;
80367: LD_VAR 0 2
80371: RET
// export function Shuffle ( array ) ; var i , index ; begin
80372: LD_INT 0
80374: PPUSH
80375: PPUSH
80376: PPUSH
// result := [ ] ;
80377: LD_ADDR_VAR 0 2
80381: PUSH
80382: EMPTY
80383: ST_TO_ADDR
// if not array then
80384: LD_VAR 0 1
80388: NOT
80389: IFFALSE 80393
// exit ;
80391: GO 80492
// Randomize ;
80393: CALL_OW 10
// for i = array downto 1 do
80397: LD_ADDR_VAR 0 3
80401: PUSH
80402: DOUBLE
80403: LD_VAR 0 1
80407: INC
80408: ST_TO_ADDR
80409: LD_INT 1
80411: PUSH
80412: FOR_DOWNTO
80413: IFFALSE 80490
// begin index := rand ( 1 , array ) ;
80415: LD_ADDR_VAR 0 4
80419: PUSH
80420: LD_INT 1
80422: PPUSH
80423: LD_VAR 0 1
80427: PPUSH
80428: CALL_OW 12
80432: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80433: LD_ADDR_VAR 0 2
80437: PUSH
80438: LD_VAR 0 2
80442: PPUSH
80443: LD_VAR 0 2
80447: PUSH
80448: LD_INT 1
80450: PLUS
80451: PPUSH
80452: LD_VAR 0 1
80456: PUSH
80457: LD_VAR 0 4
80461: ARRAY
80462: PPUSH
80463: CALL_OW 2
80467: ST_TO_ADDR
// array := Delete ( array , index ) ;
80468: LD_ADDR_VAR 0 1
80472: PUSH
80473: LD_VAR 0 1
80477: PPUSH
80478: LD_VAR 0 4
80482: PPUSH
80483: CALL_OW 3
80487: ST_TO_ADDR
// end ;
80488: GO 80412
80490: POP
80491: POP
// end ;
80492: LD_VAR 0 2
80496: RET
// export function GetBaseMaterials ( base ) ; begin
80497: LD_INT 0
80499: PPUSH
// result := [ 0 , 0 , 0 ] ;
80500: LD_ADDR_VAR 0 2
80504: PUSH
80505: LD_INT 0
80507: PUSH
80508: LD_INT 0
80510: PUSH
80511: LD_INT 0
80513: PUSH
80514: EMPTY
80515: LIST
80516: LIST
80517: LIST
80518: ST_TO_ADDR
// if not base then
80519: LD_VAR 0 1
80523: NOT
80524: IFFALSE 80528
// exit ;
80526: GO 80577
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80528: LD_ADDR_VAR 0 2
80532: PUSH
80533: LD_VAR 0 1
80537: PPUSH
80538: LD_INT 1
80540: PPUSH
80541: CALL_OW 275
80545: PUSH
80546: LD_VAR 0 1
80550: PPUSH
80551: LD_INT 2
80553: PPUSH
80554: CALL_OW 275
80558: PUSH
80559: LD_VAR 0 1
80563: PPUSH
80564: LD_INT 3
80566: PPUSH
80567: CALL_OW 275
80571: PUSH
80572: EMPTY
80573: LIST
80574: LIST
80575: LIST
80576: ST_TO_ADDR
// end ;
80577: LD_VAR 0 2
80581: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80582: LD_INT 0
80584: PPUSH
80585: PPUSH
// result := array ;
80586: LD_ADDR_VAR 0 3
80590: PUSH
80591: LD_VAR 0 1
80595: ST_TO_ADDR
// if size >= result then
80596: LD_VAR 0 2
80600: PUSH
80601: LD_VAR 0 3
80605: GREATEREQUAL
80606: IFFALSE 80610
// exit ;
80608: GO 80660
// if size then
80610: LD_VAR 0 2
80614: IFFALSE 80660
// for i := array downto size do
80616: LD_ADDR_VAR 0 4
80620: PUSH
80621: DOUBLE
80622: LD_VAR 0 1
80626: INC
80627: ST_TO_ADDR
80628: LD_VAR 0 2
80632: PUSH
80633: FOR_DOWNTO
80634: IFFALSE 80658
// result := Delete ( result , result ) ;
80636: LD_ADDR_VAR 0 3
80640: PUSH
80641: LD_VAR 0 3
80645: PPUSH
80646: LD_VAR 0 3
80650: PPUSH
80651: CALL_OW 3
80655: ST_TO_ADDR
80656: GO 80633
80658: POP
80659: POP
// end ;
80660: LD_VAR 0 3
80664: RET
// export function ComExit ( unit ) ; var tmp ; begin
80665: LD_INT 0
80667: PPUSH
80668: PPUSH
// if not IsInUnit ( unit ) then
80669: LD_VAR 0 1
80673: PPUSH
80674: CALL_OW 310
80678: NOT
80679: IFFALSE 80683
// exit ;
80681: GO 80743
// tmp := IsInUnit ( unit ) ;
80683: LD_ADDR_VAR 0 3
80687: PUSH
80688: LD_VAR 0 1
80692: PPUSH
80693: CALL_OW 310
80697: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80698: LD_VAR 0 3
80702: PPUSH
80703: CALL_OW 247
80707: PUSH
80708: LD_INT 2
80710: EQUAL
80711: IFFALSE 80724
// ComExitVehicle ( unit ) else
80713: LD_VAR 0 1
80717: PPUSH
80718: CALL_OW 121
80722: GO 80733
// ComExitBuilding ( unit ) ;
80724: LD_VAR 0 1
80728: PPUSH
80729: CALL_OW 122
// result := tmp ;
80733: LD_ADDR_VAR 0 2
80737: PUSH
80738: LD_VAR 0 3
80742: ST_TO_ADDR
// end ;
80743: LD_VAR 0 2
80747: RET
// export function ComExitAll ( units ) ; var i ; begin
80748: LD_INT 0
80750: PPUSH
80751: PPUSH
// if not units then
80752: LD_VAR 0 1
80756: NOT
80757: IFFALSE 80761
// exit ;
80759: GO 80787
// for i in units do
80761: LD_ADDR_VAR 0 3
80765: PUSH
80766: LD_VAR 0 1
80770: PUSH
80771: FOR_IN
80772: IFFALSE 80785
// ComExit ( i ) ;
80774: LD_VAR 0 3
80778: PPUSH
80779: CALL 80665 0 1
80783: GO 80771
80785: POP
80786: POP
// end ;
80787: LD_VAR 0 2
80791: RET
// export function ResetHc ; begin
80792: LD_INT 0
80794: PPUSH
// InitHc ;
80795: CALL_OW 19
// hc_importance := 0 ;
80799: LD_ADDR_OWVAR 32
80803: PUSH
80804: LD_INT 0
80806: ST_TO_ADDR
// end ;
80807: LD_VAR 0 1
80811: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80812: LD_INT 0
80814: PPUSH
80815: PPUSH
80816: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80817: LD_ADDR_VAR 0 6
80821: PUSH
80822: LD_VAR 0 1
80826: PUSH
80827: LD_VAR 0 3
80831: PLUS
80832: PUSH
80833: LD_INT 2
80835: DIV
80836: ST_TO_ADDR
// if _x < 0 then
80837: LD_VAR 0 6
80841: PUSH
80842: LD_INT 0
80844: LESS
80845: IFFALSE 80862
// _x := _x * - 1 ;
80847: LD_ADDR_VAR 0 6
80851: PUSH
80852: LD_VAR 0 6
80856: PUSH
80857: LD_INT 1
80859: NEG
80860: MUL
80861: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80862: LD_ADDR_VAR 0 7
80866: PUSH
80867: LD_VAR 0 2
80871: PUSH
80872: LD_VAR 0 4
80876: PLUS
80877: PUSH
80878: LD_INT 2
80880: DIV
80881: ST_TO_ADDR
// if _y < 0 then
80882: LD_VAR 0 7
80886: PUSH
80887: LD_INT 0
80889: LESS
80890: IFFALSE 80907
// _y := _y * - 1 ;
80892: LD_ADDR_VAR 0 7
80896: PUSH
80897: LD_VAR 0 7
80901: PUSH
80902: LD_INT 1
80904: NEG
80905: MUL
80906: ST_TO_ADDR
// result := [ _x , _y ] ;
80907: LD_ADDR_VAR 0 5
80911: PUSH
80912: LD_VAR 0 6
80916: PUSH
80917: LD_VAR 0 7
80921: PUSH
80922: EMPTY
80923: LIST
80924: LIST
80925: ST_TO_ADDR
// end ;
80926: LD_VAR 0 5
80930: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80931: LD_INT 0
80933: PPUSH
80934: PPUSH
80935: PPUSH
80936: PPUSH
// task := GetTaskList ( unit ) ;
80937: LD_ADDR_VAR 0 7
80941: PUSH
80942: LD_VAR 0 1
80946: PPUSH
80947: CALL_OW 437
80951: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80952: LD_VAR 0 7
80956: NOT
80957: IFFALSE 80976
80959: PUSH
80960: LD_VAR 0 1
80964: PPUSH
80965: LD_VAR 0 2
80969: PPUSH
80970: CALL_OW 308
80974: NOT
80975: AND
80976: IFFALSE 80980
// exit ;
80978: GO 81098
// if IsInArea ( unit , area ) then
80980: LD_VAR 0 1
80984: PPUSH
80985: LD_VAR 0 2
80989: PPUSH
80990: CALL_OW 308
80994: IFFALSE 81012
// begin ComMoveToArea ( unit , goAway ) ;
80996: LD_VAR 0 1
81000: PPUSH
81001: LD_VAR 0 3
81005: PPUSH
81006: CALL_OW 113
// exit ;
81010: GO 81098
// end ; if task [ 1 ] [ 1 ] <> M then
81012: LD_VAR 0 7
81016: PUSH
81017: LD_INT 1
81019: ARRAY
81020: PUSH
81021: LD_INT 1
81023: ARRAY
81024: PUSH
81025: LD_STRING M
81027: NONEQUAL
81028: IFFALSE 81032
// exit ;
81030: GO 81098
// x := task [ 1 ] [ 2 ] ;
81032: LD_ADDR_VAR 0 5
81036: PUSH
81037: LD_VAR 0 7
81041: PUSH
81042: LD_INT 1
81044: ARRAY
81045: PUSH
81046: LD_INT 2
81048: ARRAY
81049: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81050: LD_ADDR_VAR 0 6
81054: PUSH
81055: LD_VAR 0 7
81059: PUSH
81060: LD_INT 1
81062: ARRAY
81063: PUSH
81064: LD_INT 3
81066: ARRAY
81067: ST_TO_ADDR
// if InArea ( x , y , area ) then
81068: LD_VAR 0 5
81072: PPUSH
81073: LD_VAR 0 6
81077: PPUSH
81078: LD_VAR 0 2
81082: PPUSH
81083: CALL_OW 309
81087: IFFALSE 81098
// ComStop ( unit ) ;
81089: LD_VAR 0 1
81093: PPUSH
81094: CALL_OW 141
// end ;
81098: LD_VAR 0 4
81102: RET
// export function Abs ( value ) ; begin
81103: LD_INT 0
81105: PPUSH
// result := value ;
81106: LD_ADDR_VAR 0 2
81110: PUSH
81111: LD_VAR 0 1
81115: ST_TO_ADDR
// if value < 0 then
81116: LD_VAR 0 1
81120: PUSH
81121: LD_INT 0
81123: LESS
81124: IFFALSE 81141
// result := value * - 1 ;
81126: LD_ADDR_VAR 0 2
81130: PUSH
81131: LD_VAR 0 1
81135: PUSH
81136: LD_INT 1
81138: NEG
81139: MUL
81140: ST_TO_ADDR
// end ;
81141: LD_VAR 0 2
81145: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81146: LD_INT 0
81148: PPUSH
81149: PPUSH
81150: PPUSH
81151: PPUSH
81152: PPUSH
81153: PPUSH
81154: PPUSH
81155: PPUSH
// if not unit or not building then
81156: LD_VAR 0 1
81160: NOT
81161: IFTRUE 81170
81163: PUSH
81164: LD_VAR 0 2
81168: NOT
81169: OR
81170: IFFALSE 81174
// exit ;
81172: GO 81402
// x := GetX ( building ) ;
81174: LD_ADDR_VAR 0 4
81178: PUSH
81179: LD_VAR 0 2
81183: PPUSH
81184: CALL_OW 250
81188: ST_TO_ADDR
// y := GetY ( building ) ;
81189: LD_ADDR_VAR 0 6
81193: PUSH
81194: LD_VAR 0 2
81198: PPUSH
81199: CALL_OW 251
81203: ST_TO_ADDR
// d := GetDir ( building ) ;
81204: LD_ADDR_VAR 0 8
81208: PUSH
81209: LD_VAR 0 2
81213: PPUSH
81214: CALL_OW 254
81218: ST_TO_ADDR
// r := 4 ;
81219: LD_ADDR_VAR 0 9
81223: PUSH
81224: LD_INT 4
81226: ST_TO_ADDR
// for i := 1 to 5 do
81227: LD_ADDR_VAR 0 10
81231: PUSH
81232: DOUBLE
81233: LD_INT 1
81235: DEC
81236: ST_TO_ADDR
81237: LD_INT 5
81239: PUSH
81240: FOR_TO
81241: IFFALSE 81400
// begin _x := ShiftX ( x , d , r + i ) ;
81243: LD_ADDR_VAR 0 5
81247: PUSH
81248: LD_VAR 0 4
81252: PPUSH
81253: LD_VAR 0 8
81257: PPUSH
81258: LD_VAR 0 9
81262: PUSH
81263: LD_VAR 0 10
81267: PLUS
81268: PPUSH
81269: CALL_OW 272
81273: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81274: LD_ADDR_VAR 0 7
81278: PUSH
81279: LD_VAR 0 6
81283: PPUSH
81284: LD_VAR 0 8
81288: PPUSH
81289: LD_VAR 0 9
81293: PUSH
81294: LD_VAR 0 10
81298: PLUS
81299: PPUSH
81300: CALL_OW 273
81304: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81305: LD_VAR 0 5
81309: PPUSH
81310: LD_VAR 0 7
81314: PPUSH
81315: CALL_OW 488
81319: IFFALSE 81354
81321: PUSH
81322: LD_VAR 0 5
81326: PPUSH
81327: LD_VAR 0 7
81331: PPUSH
81332: CALL_OW 428
81336: PPUSH
81337: CALL_OW 247
81341: PUSH
81342: LD_INT 3
81344: PUSH
81345: LD_INT 2
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: IN
81352: NOT
81353: AND
81354: IFFALSE 81398
// begin ComMoveXY ( unit , _x , _y ) ;
81356: LD_VAR 0 1
81360: PPUSH
81361: LD_VAR 0 5
81365: PPUSH
81366: LD_VAR 0 7
81370: PPUSH
81371: CALL_OW 111
// result := [ _x , _y ] ;
81375: LD_ADDR_VAR 0 3
81379: PUSH
81380: LD_VAR 0 5
81384: PUSH
81385: LD_VAR 0 7
81389: PUSH
81390: EMPTY
81391: LIST
81392: LIST
81393: ST_TO_ADDR
// exit ;
81394: POP
81395: POP
81396: GO 81402
// end ; end ;
81398: GO 81240
81400: POP
81401: POP
// end ;
81402: LD_VAR 0 3
81406: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81407: LD_INT 0
81409: PPUSH
81410: PPUSH
81411: PPUSH
// result := 0 ;
81412: LD_ADDR_VAR 0 3
81416: PUSH
81417: LD_INT 0
81419: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81420: LD_VAR 0 1
81424: PUSH
81425: LD_INT 0
81427: LESS
81428: IFTRUE 81440
81430: PUSH
81431: LD_VAR 0 1
81435: PUSH
81436: LD_INT 8
81438: GREATER
81439: OR
81440: IFTRUE 81452
81442: PUSH
81443: LD_VAR 0 2
81447: PUSH
81448: LD_INT 0
81450: LESS
81451: OR
81452: IFTRUE 81464
81454: PUSH
81455: LD_VAR 0 2
81459: PUSH
81460: LD_INT 8
81462: GREATER
81463: OR
81464: IFFALSE 81468
// exit ;
81466: GO 81543
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81468: LD_ADDR_VAR 0 4
81472: PUSH
81473: LD_INT 22
81475: PUSH
81476: LD_VAR 0 2
81480: PUSH
81481: EMPTY
81482: LIST
81483: LIST
81484: PPUSH
81485: CALL_OW 69
81489: PUSH
81490: FOR_IN
81491: IFFALSE 81541
// begin un := UnitShoot ( i ) ;
81493: LD_ADDR_VAR 0 5
81497: PUSH
81498: LD_VAR 0 4
81502: PPUSH
81503: CALL_OW 504
81507: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81508: LD_VAR 0 5
81512: PPUSH
81513: CALL_OW 255
81517: PUSH
81518: LD_VAR 0 1
81522: EQUAL
81523: IFFALSE 81539
// begin result := un ;
81525: LD_ADDR_VAR 0 3
81529: PUSH
81530: LD_VAR 0 5
81534: ST_TO_ADDR
// exit ;
81535: POP
81536: POP
81537: GO 81543
// end ; end ;
81539: GO 81490
81541: POP
81542: POP
// end ;
81543: LD_VAR 0 3
81547: RET
// export function GetCargoBay ( units ) ; begin
81548: LD_INT 0
81550: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81551: LD_ADDR_VAR 0 2
81555: PUSH
81556: LD_VAR 0 1
81560: PPUSH
81561: LD_INT 2
81563: PUSH
81564: LD_INT 34
81566: PUSH
81567: LD_INT 12
81569: PUSH
81570: EMPTY
81571: LIST
81572: LIST
81573: PUSH
81574: LD_INT 34
81576: PUSH
81577: LD_INT 51
81579: PUSH
81580: EMPTY
81581: LIST
81582: LIST
81583: PUSH
81584: LD_INT 34
81586: PUSH
81587: LD_INT 32
81589: PUSH
81590: EMPTY
81591: LIST
81592: LIST
81593: PUSH
81594: LD_INT 34
81596: PUSH
81597: LD_INT 89
81599: PUSH
81600: EMPTY
81601: LIST
81602: LIST
81603: PUSH
81604: EMPTY
81605: LIST
81606: LIST
81607: LIST
81608: LIST
81609: LIST
81610: PPUSH
81611: CALL_OW 72
81615: ST_TO_ADDR
// end ;
81616: LD_VAR 0 2
81620: RET
// export function Negate ( value ) ; begin
81621: LD_INT 0
81623: PPUSH
// result := not value ;
81624: LD_ADDR_VAR 0 2
81628: PUSH
81629: LD_VAR 0 1
81633: NOT
81634: ST_TO_ADDR
// end ;
81635: LD_VAR 0 2
81639: RET
// export function Inc ( value ) ; begin
81640: LD_INT 0
81642: PPUSH
// result := value + 1 ;
81643: LD_ADDR_VAR 0 2
81647: PUSH
81648: LD_VAR 0 1
81652: PUSH
81653: LD_INT 1
81655: PLUS
81656: ST_TO_ADDR
// end ;
81657: LD_VAR 0 2
81661: RET
// export function Dec ( value ) ; begin
81662: LD_INT 0
81664: PPUSH
// result := value - 1 ;
81665: LD_ADDR_VAR 0 2
81669: PUSH
81670: LD_VAR 0 1
81674: PUSH
81675: LD_INT 1
81677: MINUS
81678: ST_TO_ADDR
// end ;
81679: LD_VAR 0 2
81683: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81684: LD_INT 0
81686: PPUSH
81687: PPUSH
81688: PPUSH
81689: PPUSH
81690: PPUSH
81691: PPUSH
81692: PPUSH
81693: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81694: LD_VAR 0 1
81698: PPUSH
81699: LD_VAR 0 2
81703: PPUSH
81704: CALL_OW 488
81708: NOT
81709: IFTRUE 81728
81711: PUSH
81712: LD_VAR 0 3
81716: PPUSH
81717: LD_VAR 0 4
81721: PPUSH
81722: CALL_OW 488
81726: NOT
81727: OR
81728: IFFALSE 81741
// begin result := - 1 ;
81730: LD_ADDR_VAR 0 5
81734: PUSH
81735: LD_INT 1
81737: NEG
81738: ST_TO_ADDR
// exit ;
81739: GO 81976
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81741: LD_ADDR_VAR 0 12
81745: PUSH
81746: LD_VAR 0 1
81750: PPUSH
81751: LD_VAR 0 2
81755: PPUSH
81756: LD_VAR 0 3
81760: PPUSH
81761: LD_VAR 0 4
81765: PPUSH
81766: CALL 80812 0 4
81770: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81771: LD_ADDR_VAR 0 11
81775: PUSH
81776: LD_VAR 0 1
81780: PPUSH
81781: LD_VAR 0 2
81785: PPUSH
81786: LD_VAR 0 12
81790: PUSH
81791: LD_INT 1
81793: ARRAY
81794: PPUSH
81795: LD_VAR 0 12
81799: PUSH
81800: LD_INT 2
81802: ARRAY
81803: PPUSH
81804: CALL_OW 298
81808: ST_TO_ADDR
// distance := 9999 ;
81809: LD_ADDR_VAR 0 10
81813: PUSH
81814: LD_INT 9999
81816: ST_TO_ADDR
// for i := 0 to 5 do
81817: LD_ADDR_VAR 0 6
81821: PUSH
81822: DOUBLE
81823: LD_INT 0
81825: DEC
81826: ST_TO_ADDR
81827: LD_INT 5
81829: PUSH
81830: FOR_TO
81831: IFFALSE 81974
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81833: LD_ADDR_VAR 0 7
81837: PUSH
81838: LD_VAR 0 1
81842: PPUSH
81843: LD_VAR 0 6
81847: PPUSH
81848: LD_VAR 0 11
81852: PPUSH
81853: CALL_OW 272
81857: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81858: LD_ADDR_VAR 0 8
81862: PUSH
81863: LD_VAR 0 2
81867: PPUSH
81868: LD_VAR 0 6
81872: PPUSH
81873: LD_VAR 0 11
81877: PPUSH
81878: CALL_OW 273
81882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81883: LD_VAR 0 7
81887: PPUSH
81888: LD_VAR 0 8
81892: PPUSH
81893: CALL_OW 488
81897: NOT
81898: IFFALSE 81902
// continue ;
81900: GO 81830
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81902: LD_ADDR_VAR 0 9
81906: PUSH
81907: LD_VAR 0 12
81911: PUSH
81912: LD_INT 1
81914: ARRAY
81915: PPUSH
81916: LD_VAR 0 12
81920: PUSH
81921: LD_INT 2
81923: ARRAY
81924: PPUSH
81925: LD_VAR 0 7
81929: PPUSH
81930: LD_VAR 0 8
81934: PPUSH
81935: CALL_OW 298
81939: ST_TO_ADDR
// if tmp < distance then
81940: LD_VAR 0 9
81944: PUSH
81945: LD_VAR 0 10
81949: LESS
81950: IFFALSE 81972
// begin result := i ;
81952: LD_ADDR_VAR 0 5
81956: PUSH
81957: LD_VAR 0 6
81961: ST_TO_ADDR
// distance := tmp ;
81962: LD_ADDR_VAR 0 10
81966: PUSH
81967: LD_VAR 0 9
81971: ST_TO_ADDR
// end ; end ;
81972: GO 81830
81974: POP
81975: POP
// end ;
81976: LD_VAR 0 5
81980: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81981: LD_INT 0
81983: PPUSH
81984: PPUSH
// if not driver or not IsInUnit ( driver ) then
81985: LD_VAR 0 1
81989: NOT
81990: IFTRUE 82004
81992: PUSH
81993: LD_VAR 0 1
81997: PPUSH
81998: CALL_OW 310
82002: NOT
82003: OR
82004: IFFALSE 82008
// exit ;
82006: GO 82098
// vehicle := IsInUnit ( driver ) ;
82008: LD_ADDR_VAR 0 3
82012: PUSH
82013: LD_VAR 0 1
82017: PPUSH
82018: CALL_OW 310
82022: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82023: LD_VAR 0 1
82027: PPUSH
82028: LD_STRING \
82030: PUSH
82031: LD_INT 0
82033: PUSH
82034: LD_INT 0
82036: PUSH
82037: LD_INT 0
82039: PUSH
82040: LD_INT 0
82042: PUSH
82043: LD_INT 0
82045: PUSH
82046: LD_INT 0
82048: PUSH
82049: EMPTY
82050: LIST
82051: LIST
82052: LIST
82053: LIST
82054: LIST
82055: LIST
82056: LIST
82057: PUSH
82058: LD_STRING E
82060: PUSH
82061: LD_INT 0
82063: PUSH
82064: LD_INT 0
82066: PUSH
82067: LD_VAR 0 3
82071: PUSH
82072: LD_INT 0
82074: PUSH
82075: LD_INT 0
82077: PUSH
82078: LD_INT 0
82080: PUSH
82081: EMPTY
82082: LIST
82083: LIST
82084: LIST
82085: LIST
82086: LIST
82087: LIST
82088: LIST
82089: PUSH
82090: EMPTY
82091: LIST
82092: LIST
82093: PPUSH
82094: CALL_OW 446
// end ;
82098: LD_VAR 0 2
82102: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82103: LD_INT 0
82105: PPUSH
82106: PPUSH
// if not driver or not IsInUnit ( driver ) then
82107: LD_VAR 0 1
82111: NOT
82112: IFTRUE 82126
82114: PUSH
82115: LD_VAR 0 1
82119: PPUSH
82120: CALL_OW 310
82124: NOT
82125: OR
82126: IFFALSE 82130
// exit ;
82128: GO 82220
// vehicle := IsInUnit ( driver ) ;
82130: LD_ADDR_VAR 0 3
82134: PUSH
82135: LD_VAR 0 1
82139: PPUSH
82140: CALL_OW 310
82144: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82145: LD_VAR 0 1
82149: PPUSH
82150: LD_STRING \
82152: PUSH
82153: LD_INT 0
82155: PUSH
82156: LD_INT 0
82158: PUSH
82159: LD_INT 0
82161: PUSH
82162: LD_INT 0
82164: PUSH
82165: LD_INT 0
82167: PUSH
82168: LD_INT 0
82170: PUSH
82171: EMPTY
82172: LIST
82173: LIST
82174: LIST
82175: LIST
82176: LIST
82177: LIST
82178: LIST
82179: PUSH
82180: LD_STRING E
82182: PUSH
82183: LD_INT 0
82185: PUSH
82186: LD_INT 0
82188: PUSH
82189: LD_VAR 0 3
82193: PUSH
82194: LD_INT 0
82196: PUSH
82197: LD_INT 0
82199: PUSH
82200: LD_INT 0
82202: PUSH
82203: EMPTY
82204: LIST
82205: LIST
82206: LIST
82207: LIST
82208: LIST
82209: LIST
82210: LIST
82211: PUSH
82212: EMPTY
82213: LIST
82214: LIST
82215: PPUSH
82216: CALL_OW 447
// end ;
82220: LD_VAR 0 2
82224: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82225: LD_INT 0
82227: PPUSH
82228: PPUSH
82229: PPUSH
// tmp := [ ] ;
82230: LD_ADDR_VAR 0 5
82234: PUSH
82235: EMPTY
82236: ST_TO_ADDR
// for i in units do
82237: LD_ADDR_VAR 0 4
82241: PUSH
82242: LD_VAR 0 1
82246: PUSH
82247: FOR_IN
82248: IFFALSE 82286
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82250: LD_ADDR_VAR 0 5
82254: PUSH
82255: LD_VAR 0 5
82259: PPUSH
82260: LD_VAR 0 5
82264: PUSH
82265: LD_INT 1
82267: PLUS
82268: PPUSH
82269: LD_VAR 0 4
82273: PPUSH
82274: CALL_OW 256
82278: PPUSH
82279: CALL_OW 2
82283: ST_TO_ADDR
82284: GO 82247
82286: POP
82287: POP
// if not tmp then
82288: LD_VAR 0 5
82292: NOT
82293: IFFALSE 82297
// exit ;
82295: GO 82345
// if asc then
82297: LD_VAR 0 2
82301: IFFALSE 82325
// result := SortListByListAsc ( units , tmp ) else
82303: LD_ADDR_VAR 0 3
82307: PUSH
82308: LD_VAR 0 1
82312: PPUSH
82313: LD_VAR 0 5
82317: PPUSH
82318: CALL_OW 76
82322: ST_TO_ADDR
82323: GO 82345
// result := SortListByListDesc ( units , tmp ) ;
82325: LD_ADDR_VAR 0 3
82329: PUSH
82330: LD_VAR 0 1
82334: PPUSH
82335: LD_VAR 0 5
82339: PPUSH
82340: CALL_OW 77
82344: ST_TO_ADDR
// end ;
82345: LD_VAR 0 3
82349: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82350: LD_INT 0
82352: PPUSH
82353: PPUSH
// task := GetTaskList ( mech ) ;
82354: LD_ADDR_VAR 0 4
82358: PUSH
82359: LD_VAR 0 1
82363: PPUSH
82364: CALL_OW 437
82368: ST_TO_ADDR
// if not task then
82369: LD_VAR 0 4
82373: NOT
82374: IFFALSE 82378
// exit ;
82376: GO 82422
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82378: LD_ADDR_VAR 0 3
82382: PUSH
82383: LD_VAR 0 4
82387: PUSH
82388: LD_INT 1
82390: ARRAY
82391: PUSH
82392: LD_INT 1
82394: ARRAY
82395: PUSH
82396: LD_STRING r
82398: EQUAL
82399: IFFALSE 82421
82401: PUSH
82402: LD_VAR 0 4
82406: PUSH
82407: LD_INT 1
82409: ARRAY
82410: PUSH
82411: LD_INT 4
82413: ARRAY
82414: PUSH
82415: LD_VAR 0 2
82419: EQUAL
82420: AND
82421: ST_TO_ADDR
// end ;
82422: LD_VAR 0 3
82426: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82427: LD_INT 0
82429: PPUSH
// SetDir ( unit , d ) ;
82430: LD_VAR 0 1
82434: PPUSH
82435: LD_VAR 0 4
82439: PPUSH
82440: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82444: LD_ADDR_VAR 0 6
82448: PUSH
82449: LD_VAR 0 1
82453: PPUSH
82454: LD_VAR 0 2
82458: PPUSH
82459: LD_VAR 0 3
82463: PPUSH
82464: LD_VAR 0 5
82468: PPUSH
82469: CALL_OW 48
82473: ST_TO_ADDR
// end ;
82474: LD_VAR 0 6
82478: RET
// export function ToNaturalNumber ( number ) ; begin
82479: LD_INT 0
82481: PPUSH
// result := number div 1 ;
82482: LD_ADDR_VAR 0 2
82486: PUSH
82487: LD_VAR 0 1
82491: PUSH
82492: LD_INT 1
82494: DIV
82495: ST_TO_ADDR
// if number < 0 then
82496: LD_VAR 0 1
82500: PUSH
82501: LD_INT 0
82503: LESS
82504: IFFALSE 82514
// result := 0 ;
82506: LD_ADDR_VAR 0 2
82510: PUSH
82511: LD_INT 0
82513: ST_TO_ADDR
// end ;
82514: LD_VAR 0 2
82518: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
82519: LD_INT 0
82521: PPUSH
82522: PPUSH
82523: PPUSH
// if not buildings then
82524: LD_VAR 0 1
82528: NOT
82529: IFFALSE 82533
// exit ;
82531: GO 82648
// tmp := [ ] ;
82533: LD_ADDR_VAR 0 5
82537: PUSH
82538: EMPTY
82539: ST_TO_ADDR
// for b in buildings do
82540: LD_ADDR_VAR 0 4
82544: PUSH
82545: LD_VAR 0 1
82549: PUSH
82550: FOR_IN
82551: IFFALSE 82589
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
82553: LD_ADDR_VAR 0 5
82557: PUSH
82558: LD_VAR 0 5
82562: PPUSH
82563: LD_VAR 0 5
82567: PUSH
82568: LD_INT 1
82570: PLUS
82571: PPUSH
82572: LD_VAR 0 4
82576: PPUSH
82577: CALL_OW 266
82581: PPUSH
82582: CALL_OW 1
82586: ST_TO_ADDR
82587: GO 82550
82589: POP
82590: POP
// if not tmp then
82591: LD_VAR 0 5
82595: NOT
82596: IFFALSE 82600
// exit ;
82598: GO 82648
// if asc then
82600: LD_VAR 0 2
82604: IFFALSE 82628
// result := SortListByListAsc ( buildings , tmp ) else
82606: LD_ADDR_VAR 0 3
82610: PUSH
82611: LD_VAR 0 1
82615: PPUSH
82616: LD_VAR 0 5
82620: PPUSH
82621: CALL_OW 76
82625: ST_TO_ADDR
82626: GO 82648
// result := SortListByListDesc ( buildings , tmp ) ;
82628: LD_ADDR_VAR 0 3
82632: PUSH
82633: LD_VAR 0 1
82637: PPUSH
82638: LD_VAR 0 5
82642: PPUSH
82643: CALL_OW 77
82647: ST_TO_ADDR
// end ;
82648: LD_VAR 0 3
82652: RET
// export function SortByClass ( units , class ) ; var un ; begin
82653: LD_INT 0
82655: PPUSH
82656: PPUSH
// if not units or not class then
82657: LD_VAR 0 1
82661: NOT
82662: IFTRUE 82671
82664: PUSH
82665: LD_VAR 0 2
82669: NOT
82670: OR
82671: IFFALSE 82675
// exit ;
82673: GO 82770
// result := [ ] ;
82675: LD_ADDR_VAR 0 3
82679: PUSH
82680: EMPTY
82681: ST_TO_ADDR
// for un in units do
82682: LD_ADDR_VAR 0 4
82686: PUSH
82687: LD_VAR 0 1
82691: PUSH
82692: FOR_IN
82693: IFFALSE 82768
// if GetClass ( un ) = class then
82695: LD_VAR 0 4
82699: PPUSH
82700: CALL_OW 257
82704: PUSH
82705: LD_VAR 0 2
82709: EQUAL
82710: IFFALSE 82737
// result := Insert ( result , 1 , un ) else
82712: LD_ADDR_VAR 0 3
82716: PUSH
82717: LD_VAR 0 3
82721: PPUSH
82722: LD_INT 1
82724: PPUSH
82725: LD_VAR 0 4
82729: PPUSH
82730: CALL_OW 2
82734: ST_TO_ADDR
82735: GO 82766
// result := Replace ( result , result + 1 , un ) ;
82737: LD_ADDR_VAR 0 3
82741: PUSH
82742: LD_VAR 0 3
82746: PPUSH
82747: LD_VAR 0 3
82751: PUSH
82752: LD_INT 1
82754: PLUS
82755: PPUSH
82756: LD_VAR 0 4
82760: PPUSH
82761: CALL_OW 1
82765: ST_TO_ADDR
82766: GO 82692
82768: POP
82769: POP
// end ;
82770: LD_VAR 0 3
82774: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82775: LD_INT 0
82777: PPUSH
82778: PPUSH
82779: PPUSH
82780: PPUSH
82781: PPUSH
82782: PPUSH
82783: PPUSH
// result := [ ] ;
82784: LD_ADDR_VAR 0 4
82788: PUSH
82789: EMPTY
82790: ST_TO_ADDR
// if x - r < 0 then
82791: LD_VAR 0 1
82795: PUSH
82796: LD_VAR 0 3
82800: MINUS
82801: PUSH
82802: LD_INT 0
82804: LESS
82805: IFFALSE 82817
// min_x := 0 else
82807: LD_ADDR_VAR 0 8
82811: PUSH
82812: LD_INT 0
82814: ST_TO_ADDR
82815: GO 82833
// min_x := x - r ;
82817: LD_ADDR_VAR 0 8
82821: PUSH
82822: LD_VAR 0 1
82826: PUSH
82827: LD_VAR 0 3
82831: MINUS
82832: ST_TO_ADDR
// if y - r < 0 then
82833: LD_VAR 0 2
82837: PUSH
82838: LD_VAR 0 3
82842: MINUS
82843: PUSH
82844: LD_INT 0
82846: LESS
82847: IFFALSE 82859
// min_y := 0 else
82849: LD_ADDR_VAR 0 7
82853: PUSH
82854: LD_INT 0
82856: ST_TO_ADDR
82857: GO 82875
// min_y := y - r ;
82859: LD_ADDR_VAR 0 7
82863: PUSH
82864: LD_VAR 0 2
82868: PUSH
82869: LD_VAR 0 3
82873: MINUS
82874: ST_TO_ADDR
// max_x := x + r ;
82875: LD_ADDR_VAR 0 9
82879: PUSH
82880: LD_VAR 0 1
82884: PUSH
82885: LD_VAR 0 3
82889: PLUS
82890: ST_TO_ADDR
// max_y := y + r ;
82891: LD_ADDR_VAR 0 10
82895: PUSH
82896: LD_VAR 0 2
82900: PUSH
82901: LD_VAR 0 3
82905: PLUS
82906: ST_TO_ADDR
// for _x = min_x to max_x do
82907: LD_ADDR_VAR 0 5
82911: PUSH
82912: DOUBLE
82913: LD_VAR 0 8
82917: DEC
82918: ST_TO_ADDR
82919: LD_VAR 0 9
82923: PUSH
82924: FOR_TO
82925: IFFALSE 83026
// for _y = min_y to max_y do
82927: LD_ADDR_VAR 0 6
82931: PUSH
82932: DOUBLE
82933: LD_VAR 0 7
82937: DEC
82938: ST_TO_ADDR
82939: LD_VAR 0 10
82943: PUSH
82944: FOR_TO
82945: IFFALSE 83022
// begin if not ValidHex ( _x , _y ) then
82947: LD_VAR 0 5
82951: PPUSH
82952: LD_VAR 0 6
82956: PPUSH
82957: CALL_OW 488
82961: NOT
82962: IFFALSE 82966
// continue ;
82964: GO 82944
// if GetResourceTypeXY ( _x , _y ) then
82966: LD_VAR 0 5
82970: PPUSH
82971: LD_VAR 0 6
82975: PPUSH
82976: CALL_OW 283
82980: IFFALSE 83020
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82982: LD_ADDR_VAR 0 4
82986: PUSH
82987: LD_VAR 0 4
82991: PPUSH
82992: LD_VAR 0 4
82996: PUSH
82997: LD_INT 1
82999: PLUS
83000: PPUSH
83001: LD_VAR 0 5
83005: PUSH
83006: LD_VAR 0 6
83010: PUSH
83011: EMPTY
83012: LIST
83013: LIST
83014: PPUSH
83015: CALL_OW 1
83019: ST_TO_ADDR
// end ;
83020: GO 82944
83022: POP
83023: POP
83024: GO 82924
83026: POP
83027: POP
// end ;
83028: LD_VAR 0 4
83032: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83033: LD_INT 0
83035: PPUSH
83036: PPUSH
83037: PPUSH
83038: PPUSH
83039: PPUSH
83040: PPUSH
83041: PPUSH
83042: PPUSH
// if not units then
83043: LD_VAR 0 1
83047: NOT
83048: IFFALSE 83052
// exit ;
83050: GO 83584
// result := UnitFilter ( units , [ f_ok ] ) ;
83052: LD_ADDR_VAR 0 3
83056: PUSH
83057: LD_VAR 0 1
83061: PPUSH
83062: LD_INT 50
83064: PUSH
83065: EMPTY
83066: LIST
83067: PPUSH
83068: CALL_OW 72
83072: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83073: LD_ADDR_VAR 0 8
83077: PUSH
83078: LD_VAR 0 1
83082: PUSH
83083: LD_INT 1
83085: ARRAY
83086: PPUSH
83087: CALL_OW 255
83091: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83092: LD_ADDR_VAR 0 10
83096: PUSH
83097: LD_INT 29
83099: PUSH
83100: LD_INT 91
83102: PUSH
83103: LD_INT 49
83105: PUSH
83106: EMPTY
83107: LIST
83108: LIST
83109: LIST
83110: ST_TO_ADDR
// if not result then
83111: LD_VAR 0 3
83115: NOT
83116: IFFALSE 83120
// exit ;
83118: GO 83584
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83120: LD_ADDR_VAR 0 5
83124: PUSH
83125: LD_INT 81
83127: PUSH
83128: LD_VAR 0 8
83132: PUSH
83133: EMPTY
83134: LIST
83135: LIST
83136: PPUSH
83137: CALL_OW 69
83141: ST_TO_ADDR
// for i in result do
83142: LD_ADDR_VAR 0 4
83146: PUSH
83147: LD_VAR 0 3
83151: PUSH
83152: FOR_IN
83153: IFFALSE 83582
// begin tag := GetTag ( i ) + 1 ;
83155: LD_ADDR_VAR 0 9
83159: PUSH
83160: LD_VAR 0 4
83164: PPUSH
83165: CALL_OW 110
83169: PUSH
83170: LD_INT 1
83172: PLUS
83173: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83174: LD_ADDR_VAR 0 7
83178: PUSH
83179: LD_VAR 0 4
83183: PPUSH
83184: CALL_OW 250
83188: PPUSH
83189: LD_VAR 0 4
83193: PPUSH
83194: CALL_OW 251
83198: PPUSH
83199: LD_INT 4
83201: PPUSH
83202: CALL 82775 0 3
83206: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83207: LD_VAR 0 4
83211: PPUSH
83212: CALL_OW 247
83216: PUSH
83217: LD_INT 2
83219: EQUAL
83220: IFFALSE 83232
83222: PUSH
83223: LD_VAR 0 7
83227: PUSH
83228: LD_INT 2
83230: GREATER
83231: AND
83232: IFFALSE 83252
83234: PUSH
83235: LD_VAR 0 4
83239: PPUSH
83240: CALL_OW 264
83244: PUSH
83245: LD_VAR 0 10
83249: IN
83250: NOT
83251: AND
83252: IFFALSE 83291
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83254: LD_VAR 0 4
83258: PPUSH
83259: LD_VAR 0 7
83263: PUSH
83264: LD_INT 1
83266: ARRAY
83267: PUSH
83268: LD_INT 1
83270: ARRAY
83271: PPUSH
83272: LD_VAR 0 7
83276: PUSH
83277: LD_INT 1
83279: ARRAY
83280: PUSH
83281: LD_INT 2
83283: ARRAY
83284: PPUSH
83285: CALL_OW 116
83289: GO 83580
// if path > tag then
83291: LD_VAR 0 2
83295: PUSH
83296: LD_VAR 0 9
83300: GREATER
83301: IFFALSE 83509
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83303: LD_ADDR_VAR 0 6
83307: PUSH
83308: LD_VAR 0 5
83312: PPUSH
83313: LD_INT 91
83315: PUSH
83316: LD_VAR 0 4
83320: PUSH
83321: LD_INT 8
83323: PUSH
83324: EMPTY
83325: LIST
83326: LIST
83327: LIST
83328: PPUSH
83329: CALL_OW 72
83333: ST_TO_ADDR
// if nearEnemy then
83334: LD_VAR 0 6
83338: IFFALSE 83407
// begin if GetWeapon ( i ) = ru_time_lapser then
83340: LD_VAR 0 4
83344: PPUSH
83345: CALL_OW 264
83349: PUSH
83350: LD_INT 49
83352: EQUAL
83353: IFFALSE 83381
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83355: LD_VAR 0 4
83359: PPUSH
83360: LD_VAR 0 6
83364: PPUSH
83365: LD_VAR 0 4
83369: PPUSH
83370: CALL_OW 74
83374: PPUSH
83375: CALL_OW 112
83379: GO 83405
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83381: LD_VAR 0 4
83385: PPUSH
83386: LD_VAR 0 6
83390: PPUSH
83391: LD_VAR 0 4
83395: PPUSH
83396: CALL_OW 74
83400: PPUSH
83401: CALL 84665 0 2
// end else
83405: GO 83507
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83407: LD_VAR 0 4
83411: PPUSH
83412: LD_VAR 0 2
83416: PUSH
83417: LD_VAR 0 9
83421: ARRAY
83422: PUSH
83423: LD_INT 1
83425: ARRAY
83426: PPUSH
83427: LD_VAR 0 2
83431: PUSH
83432: LD_VAR 0 9
83436: ARRAY
83437: PUSH
83438: LD_INT 2
83440: ARRAY
83441: PPUSH
83442: CALL_OW 297
83446: PUSH
83447: LD_INT 6
83449: GREATER
83450: IFFALSE 83493
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83452: LD_VAR 0 4
83456: PPUSH
83457: LD_VAR 0 2
83461: PUSH
83462: LD_VAR 0 9
83466: ARRAY
83467: PUSH
83468: LD_INT 1
83470: ARRAY
83471: PPUSH
83472: LD_VAR 0 2
83476: PUSH
83477: LD_VAR 0 9
83481: ARRAY
83482: PUSH
83483: LD_INT 2
83485: ARRAY
83486: PPUSH
83487: CALL_OW 114
83491: GO 83507
// SetTag ( i , tag ) ;
83493: LD_VAR 0 4
83497: PPUSH
83498: LD_VAR 0 9
83502: PPUSH
83503: CALL_OW 109
// end else
83507: GO 83580
// if enemy then
83509: LD_VAR 0 5
83513: IFFALSE 83580
// begin if GetWeapon ( i ) = ru_time_lapser then
83515: LD_VAR 0 4
83519: PPUSH
83520: CALL_OW 264
83524: PUSH
83525: LD_INT 49
83527: EQUAL
83528: IFFALSE 83556
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83530: LD_VAR 0 4
83534: PPUSH
83535: LD_VAR 0 5
83539: PPUSH
83540: LD_VAR 0 4
83544: PPUSH
83545: CALL_OW 74
83549: PPUSH
83550: CALL_OW 112
83554: GO 83580
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83556: LD_VAR 0 4
83560: PPUSH
83561: LD_VAR 0 5
83565: PPUSH
83566: LD_VAR 0 4
83570: PPUSH
83571: CALL_OW 74
83575: PPUSH
83576: CALL 84665 0 2
// end ; end ;
83580: GO 83152
83582: POP
83583: POP
// end ;
83584: LD_VAR 0 3
83588: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83589: LD_INT 0
83591: PPUSH
83592: PPUSH
83593: PPUSH
// if not unit or IsInUnit ( unit ) then
83594: LD_VAR 0 1
83598: NOT
83599: IFTRUE 83612
83601: PUSH
83602: LD_VAR 0 1
83606: PPUSH
83607: CALL_OW 310
83611: OR
83612: IFFALSE 83616
// exit ;
83614: GO 83707
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83616: LD_ADDR_VAR 0 4
83620: PUSH
83621: LD_VAR 0 1
83625: PPUSH
83626: CALL_OW 250
83630: PPUSH
83631: LD_VAR 0 2
83635: PPUSH
83636: LD_INT 1
83638: PPUSH
83639: CALL_OW 272
83643: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83644: LD_ADDR_VAR 0 5
83648: PUSH
83649: LD_VAR 0 1
83653: PPUSH
83654: CALL_OW 251
83658: PPUSH
83659: LD_VAR 0 2
83663: PPUSH
83664: LD_INT 1
83666: PPUSH
83667: CALL_OW 273
83671: ST_TO_ADDR
// if ValidHex ( x , y ) then
83672: LD_VAR 0 4
83676: PPUSH
83677: LD_VAR 0 5
83681: PPUSH
83682: CALL_OW 488
83686: IFFALSE 83707
// ComTurnXY ( unit , x , y ) ;
83688: LD_VAR 0 1
83692: PPUSH
83693: LD_VAR 0 4
83697: PPUSH
83698: LD_VAR 0 5
83702: PPUSH
83703: CALL_OW 118
// end ;
83707: LD_VAR 0 3
83711: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83712: LD_INT 0
83714: PPUSH
83715: PPUSH
// result := false ;
83716: LD_ADDR_VAR 0 3
83720: PUSH
83721: LD_INT 0
83723: ST_TO_ADDR
// if not units then
83724: LD_VAR 0 2
83728: NOT
83729: IFFALSE 83733
// exit ;
83731: GO 83778
// for i in units do
83733: LD_ADDR_VAR 0 4
83737: PUSH
83738: LD_VAR 0 2
83742: PUSH
83743: FOR_IN
83744: IFFALSE 83776
// if See ( side , i ) then
83746: LD_VAR 0 1
83750: PPUSH
83751: LD_VAR 0 4
83755: PPUSH
83756: CALL_OW 292
83760: IFFALSE 83774
// begin result := true ;
83762: LD_ADDR_VAR 0 3
83766: PUSH
83767: LD_INT 1
83769: ST_TO_ADDR
// exit ;
83770: POP
83771: POP
83772: GO 83778
// end ;
83774: GO 83743
83776: POP
83777: POP
// end ;
83778: LD_VAR 0 3
83782: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83783: LD_INT 0
83785: PPUSH
83786: PPUSH
83787: PPUSH
83788: PPUSH
// if not unit or not points then
83789: LD_VAR 0 1
83793: NOT
83794: IFTRUE 83803
83796: PUSH
83797: LD_VAR 0 2
83801: NOT
83802: OR
83803: IFFALSE 83807
// exit ;
83805: GO 83897
// dist := 99999 ;
83807: LD_ADDR_VAR 0 5
83811: PUSH
83812: LD_INT 99999
83814: ST_TO_ADDR
// for i in points do
83815: LD_ADDR_VAR 0 4
83819: PUSH
83820: LD_VAR 0 2
83824: PUSH
83825: FOR_IN
83826: IFFALSE 83895
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83828: LD_ADDR_VAR 0 6
83832: PUSH
83833: LD_VAR 0 1
83837: PPUSH
83838: LD_VAR 0 4
83842: PUSH
83843: LD_INT 1
83845: ARRAY
83846: PPUSH
83847: LD_VAR 0 4
83851: PUSH
83852: LD_INT 2
83854: ARRAY
83855: PPUSH
83856: CALL_OW 297
83860: ST_TO_ADDR
// if tmpDist < dist then
83861: LD_VAR 0 6
83865: PUSH
83866: LD_VAR 0 5
83870: LESS
83871: IFFALSE 83893
// begin result := i ;
83873: LD_ADDR_VAR 0 3
83877: PUSH
83878: LD_VAR 0 4
83882: ST_TO_ADDR
// dist := tmpDist ;
83883: LD_ADDR_VAR 0 5
83887: PUSH
83888: LD_VAR 0 6
83892: ST_TO_ADDR
// end ; end ;
83893: GO 83825
83895: POP
83896: POP
// end ;
83897: LD_VAR 0 3
83901: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83902: LD_INT 0
83904: PPUSH
// uc_side := side ;
83905: LD_ADDR_OWVAR 20
83909: PUSH
83910: LD_VAR 0 1
83914: ST_TO_ADDR
// uc_nation := 3 ;
83915: LD_ADDR_OWVAR 21
83919: PUSH
83920: LD_INT 3
83922: ST_TO_ADDR
// vc_chassis := 25 ;
83923: LD_ADDR_OWVAR 37
83927: PUSH
83928: LD_INT 25
83930: ST_TO_ADDR
// vc_engine := engine_siberite ;
83931: LD_ADDR_OWVAR 39
83935: PUSH
83936: LD_INT 3
83938: ST_TO_ADDR
// vc_control := control_computer ;
83939: LD_ADDR_OWVAR 38
83943: PUSH
83944: LD_INT 3
83946: ST_TO_ADDR
// vc_weapon := 59 ;
83947: LD_ADDR_OWVAR 40
83951: PUSH
83952: LD_INT 59
83954: ST_TO_ADDR
// result := CreateVehicle ;
83955: LD_ADDR_VAR 0 5
83959: PUSH
83960: CALL_OW 45
83964: ST_TO_ADDR
// SetDir ( result , d ) ;
83965: LD_VAR 0 5
83969: PPUSH
83970: LD_VAR 0 4
83974: PPUSH
83975: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83979: LD_VAR 0 5
83983: PPUSH
83984: LD_VAR 0 2
83988: PPUSH
83989: LD_VAR 0 3
83993: PPUSH
83994: LD_INT 0
83996: PPUSH
83997: CALL_OW 48
// end ;
84001: LD_VAR 0 5
84005: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84006: LD_INT 0
84008: PPUSH
84009: PPUSH
84010: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84011: LD_ADDR_VAR 0 2
84015: PUSH
84016: LD_INT 0
84018: PUSH
84019: LD_INT 0
84021: PUSH
84022: LD_INT 0
84024: PUSH
84025: LD_INT 0
84027: PUSH
84028: EMPTY
84029: LIST
84030: LIST
84031: LIST
84032: LIST
84033: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84034: LD_VAR 0 1
84038: NOT
84039: IFTRUE 84072
84041: PUSH
84042: LD_VAR 0 1
84046: PPUSH
84047: CALL_OW 264
84051: PUSH
84052: LD_INT 12
84054: PUSH
84055: LD_INT 51
84057: PUSH
84058: LD_INT 32
84060: PUSH
84061: LD_INT 89
84063: PUSH
84064: EMPTY
84065: LIST
84066: LIST
84067: LIST
84068: LIST
84069: IN
84070: NOT
84071: OR
84072: IFFALSE 84076
// exit ;
84074: GO 84174
// for i := 1 to 3 do
84076: LD_ADDR_VAR 0 3
84080: PUSH
84081: DOUBLE
84082: LD_INT 1
84084: DEC
84085: ST_TO_ADDR
84086: LD_INT 3
84088: PUSH
84089: FOR_TO
84090: IFFALSE 84172
// begin tmp := GetCargo ( cargo , i ) ;
84092: LD_ADDR_VAR 0 4
84096: PUSH
84097: LD_VAR 0 1
84101: PPUSH
84102: LD_VAR 0 3
84106: PPUSH
84107: CALL_OW 289
84111: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84112: LD_ADDR_VAR 0 2
84116: PUSH
84117: LD_VAR 0 2
84121: PPUSH
84122: LD_VAR 0 3
84126: PPUSH
84127: LD_VAR 0 4
84131: PPUSH
84132: CALL_OW 1
84136: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84137: LD_ADDR_VAR 0 2
84141: PUSH
84142: LD_VAR 0 2
84146: PPUSH
84147: LD_INT 4
84149: PPUSH
84150: LD_VAR 0 2
84154: PUSH
84155: LD_INT 4
84157: ARRAY
84158: PUSH
84159: LD_VAR 0 4
84163: PLUS
84164: PPUSH
84165: CALL_OW 1
84169: ST_TO_ADDR
// end ;
84170: GO 84089
84172: POP
84173: POP
// end ;
84174: LD_VAR 0 2
84178: RET
// export function Length ( array ) ; begin
84179: LD_INT 0
84181: PPUSH
// result := array + 0 ;
84182: LD_ADDR_VAR 0 2
84186: PUSH
84187: LD_VAR 0 1
84191: PUSH
84192: LD_INT 0
84194: PLUS
84195: ST_TO_ADDR
// end ;
84196: LD_VAR 0 2
84200: RET
// export function PrepareArray ( array ) ; begin
84201: LD_INT 0
84203: PPUSH
// result := array diff 0 ;
84204: LD_ADDR_VAR 0 2
84208: PUSH
84209: LD_VAR 0 1
84213: PUSH
84214: LD_INT 0
84216: DIFF
84217: ST_TO_ADDR
// if not result [ 1 ] then
84218: LD_VAR 0 2
84222: PUSH
84223: LD_INT 1
84225: ARRAY
84226: NOT
84227: IFFALSE 84247
// result := Delete ( result , 1 ) ;
84229: LD_ADDR_VAR 0 2
84233: PUSH
84234: LD_VAR 0 2
84238: PPUSH
84239: LD_INT 1
84241: PPUSH
84242: CALL_OW 3
84246: ST_TO_ADDR
// end ;
84247: LD_VAR 0 2
84251: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84252: LD_INT 0
84254: PPUSH
84255: PPUSH
84256: PPUSH
84257: PPUSH
// sibRocketRange := 25 ;
84258: LD_ADDR_VAR 0 6
84262: PUSH
84263: LD_INT 25
84265: ST_TO_ADDR
// result := false ;
84266: LD_ADDR_VAR 0 4
84270: PUSH
84271: LD_INT 0
84273: ST_TO_ADDR
// for i := 0 to 5 do
84274: LD_ADDR_VAR 0 5
84278: PUSH
84279: DOUBLE
84280: LD_INT 0
84282: DEC
84283: ST_TO_ADDR
84284: LD_INT 5
84286: PUSH
84287: FOR_TO
84288: IFFALSE 84355
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84290: LD_VAR 0 1
84294: PPUSH
84295: LD_VAR 0 5
84299: PPUSH
84300: LD_VAR 0 6
84304: PPUSH
84305: CALL_OW 272
84309: PPUSH
84310: LD_VAR 0 2
84314: PPUSH
84315: LD_VAR 0 5
84319: PPUSH
84320: LD_VAR 0 6
84324: PPUSH
84325: CALL_OW 273
84329: PPUSH
84330: LD_VAR 0 3
84334: PPUSH
84335: CALL_OW 309
84339: IFFALSE 84353
// begin result := true ;
84341: LD_ADDR_VAR 0 4
84345: PUSH
84346: LD_INT 1
84348: ST_TO_ADDR
// exit ;
84349: POP
84350: POP
84351: GO 84357
// end ;
84353: GO 84287
84355: POP
84356: POP
// end ;
84357: LD_VAR 0 4
84361: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84362: LD_INT 0
84364: PPUSH
84365: PPUSH
84366: PPUSH
// if btype = b_depot then
84367: LD_VAR 0 2
84371: PUSH
84372: LD_INT 0
84374: EQUAL
84375: IFFALSE 84387
// begin result := true ;
84377: LD_ADDR_VAR 0 3
84381: PUSH
84382: LD_INT 1
84384: ST_TO_ADDR
// exit ;
84385: GO 84507
// end ; pom := GetBase ( depot ) ;
84387: LD_ADDR_VAR 0 4
84391: PUSH
84392: LD_VAR 0 1
84396: PPUSH
84397: CALL_OW 274
84401: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84402: LD_ADDR_VAR 0 5
84406: PUSH
84407: LD_VAR 0 2
84411: PPUSH
84412: LD_VAR 0 1
84416: PPUSH
84417: CALL_OW 248
84421: PPUSH
84422: CALL_OW 450
84426: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84427: LD_ADDR_VAR 0 3
84431: PUSH
84432: LD_VAR 0 4
84436: PPUSH
84437: LD_INT 1
84439: PPUSH
84440: CALL_OW 275
84444: PUSH
84445: LD_VAR 0 5
84449: PUSH
84450: LD_INT 1
84452: ARRAY
84453: GREATEREQUAL
84454: IFFALSE 84480
84456: PUSH
84457: LD_VAR 0 4
84461: PPUSH
84462: LD_INT 2
84464: PPUSH
84465: CALL_OW 275
84469: PUSH
84470: LD_VAR 0 5
84474: PUSH
84475: LD_INT 2
84477: ARRAY
84478: GREATEREQUAL
84479: AND
84480: IFFALSE 84506
84482: PUSH
84483: LD_VAR 0 4
84487: PPUSH
84488: LD_INT 3
84490: PPUSH
84491: CALL_OW 275
84495: PUSH
84496: LD_VAR 0 5
84500: PUSH
84501: LD_INT 3
84503: ARRAY
84504: GREATEREQUAL
84505: AND
84506: ST_TO_ADDR
// end ;
84507: LD_VAR 0 3
84511: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84512: LD_INT 0
84514: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84515: LD_VAR 0 1
84519: PPUSH
84520: LD_VAR 0 2
84524: PPUSH
84525: LD_INT 0
84527: PPUSH
84528: LD_INT 0
84530: PPUSH
84531: LD_INT 1
84533: PPUSH
84534: LD_INT 0
84536: PPUSH
84537: CALL_OW 587
// end ;
84541: LD_VAR 0 3
84545: RET
// export function CenterOnNow ( unit ) ; begin
84546: LD_INT 0
84548: PPUSH
// result := IsInUnit ( unit ) ;
84549: LD_ADDR_VAR 0 2
84553: PUSH
84554: LD_VAR 0 1
84558: PPUSH
84559: CALL_OW 310
84563: ST_TO_ADDR
// if not result then
84564: LD_VAR 0 2
84568: NOT
84569: IFFALSE 84581
// result := unit ;
84571: LD_ADDR_VAR 0 2
84575: PUSH
84576: LD_VAR 0 1
84580: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84581: LD_VAR 0 1
84585: PPUSH
84586: CALL_OW 87
// end ;
84590: LD_VAR 0 2
84594: RET
// export function ComMoveHex ( unit , hex ) ; begin
84595: LD_INT 0
84597: PPUSH
// if not hex then
84598: LD_VAR 0 2
84602: NOT
84603: IFFALSE 84607
// exit ;
84605: GO 84660
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84607: LD_VAR 0 2
84611: PUSH
84612: LD_INT 1
84614: ARRAY
84615: PPUSH
84616: LD_VAR 0 2
84620: PUSH
84621: LD_INT 2
84623: ARRAY
84624: PPUSH
84625: CALL_OW 428
84629: IFFALSE 84633
// exit ;
84631: GO 84660
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84633: LD_VAR 0 1
84637: PPUSH
84638: LD_VAR 0 2
84642: PUSH
84643: LD_INT 1
84645: ARRAY
84646: PPUSH
84647: LD_VAR 0 2
84651: PUSH
84652: LD_INT 2
84654: ARRAY
84655: PPUSH
84656: CALL_OW 111
// end ;
84660: LD_VAR 0 3
84664: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84665: LD_INT 0
84667: PPUSH
84668: PPUSH
84669: PPUSH
// if not unit or not enemy then
84670: LD_VAR 0 1
84674: NOT
84675: IFTRUE 84684
84677: PUSH
84678: LD_VAR 0 2
84682: NOT
84683: OR
84684: IFFALSE 84688
// exit ;
84686: GO 84814
// x := GetX ( enemy ) ;
84688: LD_ADDR_VAR 0 4
84692: PUSH
84693: LD_VAR 0 2
84697: PPUSH
84698: CALL_OW 250
84702: ST_TO_ADDR
// y := GetY ( enemy ) ;
84703: LD_ADDR_VAR 0 5
84707: PUSH
84708: LD_VAR 0 2
84712: PPUSH
84713: CALL_OW 251
84717: ST_TO_ADDR
// if ValidHex ( x , y ) then
84718: LD_VAR 0 4
84722: PPUSH
84723: LD_VAR 0 5
84727: PPUSH
84728: CALL_OW 488
84732: IFFALSE 84814
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84734: LD_VAR 0 2
84738: PPUSH
84739: CALL_OW 247
84743: PUSH
84744: LD_INT 3
84746: PUSH
84747: LD_INT 2
84749: PUSH
84750: EMPTY
84751: LIST
84752: LIST
84753: IN
84754: IFTRUE 84777
84756: PUSH
84757: LD_VAR 0 1
84761: PPUSH
84762: CALL_OW 255
84766: PPUSH
84767: LD_VAR 0 2
84771: PPUSH
84772: CALL_OW 292
84776: OR
84777: IFFALSE 84795
// ComAttackUnit ( unit , enemy ) else
84779: LD_VAR 0 1
84783: PPUSH
84784: LD_VAR 0 2
84788: PPUSH
84789: CALL_OW 115
84793: GO 84814
// ComAgressiveMove ( unit , x , y ) ;
84795: LD_VAR 0 1
84799: PPUSH
84800: LD_VAR 0 4
84804: PPUSH
84805: LD_VAR 0 5
84809: PPUSH
84810: CALL_OW 114
// end ;
84814: LD_VAR 0 3
84818: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84819: LD_INT 0
84821: PPUSH
84822: PPUSH
84823: PPUSH
// list := AreaToList ( area , 0 ) ;
84824: LD_ADDR_VAR 0 5
84828: PUSH
84829: LD_VAR 0 1
84833: PPUSH
84834: LD_INT 0
84836: PPUSH
84837: CALL_OW 517
84841: ST_TO_ADDR
// if not list then
84842: LD_VAR 0 5
84846: NOT
84847: IFFALSE 84851
// exit ;
84849: GO 84981
// if all then
84851: LD_VAR 0 2
84855: IFFALSE 84943
// begin for i := 1 to list [ 1 ] do
84857: LD_ADDR_VAR 0 4
84861: PUSH
84862: DOUBLE
84863: LD_INT 1
84865: DEC
84866: ST_TO_ADDR
84867: LD_VAR 0 5
84871: PUSH
84872: LD_INT 1
84874: ARRAY
84875: PUSH
84876: FOR_TO
84877: IFFALSE 84939
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84879: LD_ADDR_VAR 0 3
84883: PUSH
84884: LD_VAR 0 3
84888: PPUSH
84889: LD_VAR 0 3
84893: PUSH
84894: LD_INT 1
84896: PLUS
84897: PPUSH
84898: LD_VAR 0 5
84902: PUSH
84903: LD_INT 1
84905: ARRAY
84906: PUSH
84907: LD_VAR 0 4
84911: ARRAY
84912: PUSH
84913: LD_VAR 0 5
84917: PUSH
84918: LD_INT 2
84920: ARRAY
84921: PUSH
84922: LD_VAR 0 4
84926: ARRAY
84927: PUSH
84928: EMPTY
84929: LIST
84930: LIST
84931: PPUSH
84932: CALL_OW 1
84936: ST_TO_ADDR
84937: GO 84876
84939: POP
84940: POP
// exit ;
84941: GO 84981
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84943: LD_ADDR_VAR 0 3
84947: PUSH
84948: LD_VAR 0 5
84952: PUSH
84953: LD_INT 1
84955: ARRAY
84956: PUSH
84957: LD_INT 1
84959: ARRAY
84960: PUSH
84961: LD_VAR 0 5
84965: PUSH
84966: LD_INT 2
84968: ARRAY
84969: PUSH
84970: LD_INT 1
84972: ARRAY
84973: PUSH
84974: EMPTY
84975: LIST
84976: LIST
84977: PUSH
84978: EMPTY
84979: LIST
84980: ST_TO_ADDR
// end ;
84981: LD_VAR 0 3
84985: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84986: LD_INT 0
84988: PPUSH
84989: PPUSH
// list := AreaToList ( area , 0 ) ;
84990: LD_ADDR_VAR 0 4
84994: PUSH
84995: LD_VAR 0 1
84999: PPUSH
85000: LD_INT 0
85002: PPUSH
85003: CALL_OW 517
85007: ST_TO_ADDR
// if not list then
85008: LD_VAR 0 4
85012: NOT
85013: IFFALSE 85017
// exit ;
85015: GO 85058
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85017: LD_ADDR_VAR 0 3
85021: PUSH
85022: LD_VAR 0 4
85026: PUSH
85027: LD_INT 1
85029: ARRAY
85030: PUSH
85031: LD_INT 1
85033: ARRAY
85034: PUSH
85035: LD_VAR 0 4
85039: PUSH
85040: LD_INT 2
85042: ARRAY
85043: PUSH
85044: LD_INT 1
85046: ARRAY
85047: PUSH
85048: LD_VAR 0 2
85052: PUSH
85053: EMPTY
85054: LIST
85055: LIST
85056: LIST
85057: ST_TO_ADDR
// end ;
85058: LD_VAR 0 3
85062: RET
// export function First ( array ) ; begin
85063: LD_INT 0
85065: PPUSH
// if not array then
85066: LD_VAR 0 1
85070: NOT
85071: IFFALSE 85075
// exit ;
85073: GO 85089
// result := array [ 1 ] ;
85075: LD_ADDR_VAR 0 2
85079: PUSH
85080: LD_VAR 0 1
85084: PUSH
85085: LD_INT 1
85087: ARRAY
85088: ST_TO_ADDR
// end ;
85089: LD_VAR 0 2
85093: RET
// export function Last ( array ) ; begin
85094: LD_INT 0
85096: PPUSH
// if not array then
85097: LD_VAR 0 1
85101: NOT
85102: IFFALSE 85106
// exit ;
85104: GO 85122
// result := array [ array ] ;
85106: LD_ADDR_VAR 0 2
85110: PUSH
85111: LD_VAR 0 1
85115: PUSH
85116: LD_VAR 0 1
85120: ARRAY
85121: ST_TO_ADDR
// end ;
85122: LD_VAR 0 2
85126: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85127: LD_INT 0
85129: PPUSH
85130: PPUSH
// result := [ ] ;
85131: LD_ADDR_VAR 0 5
85135: PUSH
85136: EMPTY
85137: ST_TO_ADDR
// if not array then
85138: LD_VAR 0 1
85142: NOT
85143: IFFALSE 85147
// exit ;
85145: GO 85259
// for i := 1 to array do
85147: LD_ADDR_VAR 0 6
85151: PUSH
85152: DOUBLE
85153: LD_INT 1
85155: DEC
85156: ST_TO_ADDR
85157: LD_VAR 0 1
85161: PUSH
85162: FOR_TO
85163: IFFALSE 85257
// if array [ i ] [ index ] = value then
85165: LD_VAR 0 1
85169: PUSH
85170: LD_VAR 0 6
85174: ARRAY
85175: PUSH
85176: LD_VAR 0 2
85180: ARRAY
85181: PUSH
85182: LD_VAR 0 3
85186: EQUAL
85187: IFFALSE 85255
// begin if indexColumn then
85189: LD_VAR 0 4
85193: IFFALSE 85229
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85195: LD_ADDR_VAR 0 5
85199: PUSH
85200: LD_VAR 0 5
85204: PPUSH
85205: LD_VAR 0 1
85209: PUSH
85210: LD_VAR 0 6
85214: ARRAY
85215: PUSH
85216: LD_VAR 0 4
85220: ARRAY
85221: PPUSH
85222: CALL 80267 0 2
85226: ST_TO_ADDR
85227: GO 85255
// result := Join ( result , array [ i ] ) ;
85229: LD_ADDR_VAR 0 5
85233: PUSH
85234: LD_VAR 0 5
85238: PPUSH
85239: LD_VAR 0 1
85243: PUSH
85244: LD_VAR 0 6
85248: ARRAY
85249: PPUSH
85250: CALL 80267 0 2
85254: ST_TO_ADDR
// end ;
85255: GO 85162
85257: POP
85258: POP
// end ;
85259: LD_VAR 0 5
85263: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85264: LD_INT 0
85266: PPUSH
// if not vehicles or not parkingPoint then
85267: LD_VAR 0 1
85271: NOT
85272: IFTRUE 85281
85274: PUSH
85275: LD_VAR 0 2
85279: NOT
85280: OR
85281: IFFALSE 85285
// exit ;
85283: GO 85383
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85285: LD_ADDR_VAR 0 1
85289: PUSH
85290: LD_VAR 0 1
85294: PPUSH
85295: LD_INT 50
85297: PUSH
85298: EMPTY
85299: LIST
85300: PUSH
85301: LD_INT 3
85303: PUSH
85304: LD_INT 92
85306: PUSH
85307: LD_VAR 0 2
85311: PUSH
85312: LD_INT 1
85314: ARRAY
85315: PUSH
85316: LD_VAR 0 2
85320: PUSH
85321: LD_INT 2
85323: ARRAY
85324: PUSH
85325: LD_INT 8
85327: PUSH
85328: EMPTY
85329: LIST
85330: LIST
85331: LIST
85332: LIST
85333: PUSH
85334: EMPTY
85335: LIST
85336: LIST
85337: PUSH
85338: EMPTY
85339: LIST
85340: LIST
85341: PPUSH
85342: CALL_OW 72
85346: ST_TO_ADDR
// if not vehicles then
85347: LD_VAR 0 1
85351: NOT
85352: IFFALSE 85356
// exit ;
85354: GO 85383
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85356: LD_VAR 0 1
85360: PPUSH
85361: LD_VAR 0 2
85365: PUSH
85366: LD_INT 1
85368: ARRAY
85369: PPUSH
85370: LD_VAR 0 2
85374: PUSH
85375: LD_INT 2
85377: ARRAY
85378: PPUSH
85379: CALL_OW 111
// end ;
85383: LD_VAR 0 3
85387: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85388: LD_INT 0
85390: PPUSH
85391: PPUSH
85392: PPUSH
// if not side or not area then
85393: LD_VAR 0 1
85397: NOT
85398: IFTRUE 85407
85400: PUSH
85401: LD_VAR 0 2
85405: NOT
85406: OR
85407: IFFALSE 85411
// exit ;
85409: GO 85530
// tmp := AreaToList ( area , 0 ) ;
85411: LD_ADDR_VAR 0 5
85415: PUSH
85416: LD_VAR 0 2
85420: PPUSH
85421: LD_INT 0
85423: PPUSH
85424: CALL_OW 517
85428: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85429: LD_ADDR_VAR 0 4
85433: PUSH
85434: DOUBLE
85435: LD_INT 1
85437: DEC
85438: ST_TO_ADDR
85439: LD_VAR 0 5
85443: PUSH
85444: LD_INT 1
85446: ARRAY
85447: PUSH
85448: FOR_TO
85449: IFFALSE 85528
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85451: LD_VAR 0 5
85455: PUSH
85456: LD_INT 1
85458: ARRAY
85459: PUSH
85460: LD_VAR 0 4
85464: ARRAY
85465: PPUSH
85466: LD_VAR 0 5
85470: PUSH
85471: LD_INT 2
85473: ARRAY
85474: PUSH
85475: LD_VAR 0 4
85479: ARRAY
85480: PPUSH
85481: CALL_OW 351
85485: IFFALSE 85526
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85487: LD_VAR 0 5
85491: PUSH
85492: LD_INT 1
85494: ARRAY
85495: PUSH
85496: LD_VAR 0 4
85500: ARRAY
85501: PPUSH
85502: LD_VAR 0 5
85506: PUSH
85507: LD_INT 2
85509: ARRAY
85510: PUSH
85511: LD_VAR 0 4
85515: ARRAY
85516: PPUSH
85517: LD_VAR 0 1
85521: PPUSH
85522: CALL_OW 244
// end ;
85526: GO 85448
85528: POP
85529: POP
// end ;
85530: LD_VAR 0 3
85534: RET
// export function UniqueArray ( array ) ; var i ; begin
85535: LD_INT 0
85537: PPUSH
85538: PPUSH
// result := [ ] ;
85539: LD_ADDR_VAR 0 2
85543: PUSH
85544: EMPTY
85545: ST_TO_ADDR
// if not array then
85546: LD_VAR 0 1
85550: NOT
85551: IFFALSE 85555
// exit ;
85553: GO 85616
// for i := 1 to array do
85555: LD_ADDR_VAR 0 3
85559: PUSH
85560: DOUBLE
85561: LD_INT 1
85563: DEC
85564: ST_TO_ADDR
85565: LD_VAR 0 1
85569: PUSH
85570: FOR_TO
85571: IFFALSE 85614
// if not array [ i ] in result then
85573: LD_VAR 0 1
85577: PUSH
85578: LD_VAR 0 3
85582: ARRAY
85583: PUSH
85584: LD_VAR 0 2
85588: IN
85589: NOT
85590: IFFALSE 85612
// result := Join ( result , i ) ;
85592: LD_ADDR_VAR 0 2
85596: PUSH
85597: LD_VAR 0 2
85601: PPUSH
85602: LD_VAR 0 3
85606: PPUSH
85607: CALL 80267 0 2
85611: ST_TO_ADDR
85612: GO 85570
85614: POP
85615: POP
// end ; end_of_file
85616: LD_VAR 0 2
85620: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85621: LD_VAR 0 1
85625: PUSH
85626: LD_INT 200
85628: DOUBLE
85629: GREATEREQUAL
85630: IFFALSE 85638
85632: LD_INT 299
85634: DOUBLE
85635: LESSEQUAL
85636: IFTRUE 85640
85638: GO 85672
85640: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85641: LD_VAR 0 1
85645: PPUSH
85646: LD_VAR 0 2
85650: PPUSH
85651: LD_VAR 0 3
85655: PPUSH
85656: LD_VAR 0 4
85660: PPUSH
85661: LD_VAR 0 5
85665: PPUSH
85666: CALL 36577 0 5
85670: GO 85749
85672: LD_INT 300
85674: DOUBLE
85675: GREATEREQUAL
85676: IFFALSE 85684
85678: LD_INT 399
85680: DOUBLE
85681: LESSEQUAL
85682: IFTRUE 85686
85684: GO 85748
85686: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85687: LD_VAR 0 1
85691: PPUSH
85692: LD_VAR 0 2
85696: PPUSH
85697: LD_VAR 0 3
85701: PPUSH
85702: LD_VAR 0 4
85706: PPUSH
85707: LD_VAR 0 5
85711: PPUSH
85712: LD_VAR 0 6
85716: PPUSH
85717: LD_VAR 0 7
85721: PPUSH
85722: LD_VAR 0 8
85726: PPUSH
85727: LD_VAR 0 9
85731: PPUSH
85732: LD_VAR 0 10
85736: PPUSH
85737: LD_VAR 0 11
85741: PPUSH
85742: CALL 32461 0 11
85746: GO 85749
85748: POP
// end ;
85749: PPOPN 11
85751: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85752: LD_VAR 0 1
85756: PPUSH
85757: LD_VAR 0 2
85761: PPUSH
85762: LD_VAR 0 3
85766: PPUSH
85767: LD_VAR 0 4
85771: PPUSH
85772: LD_VAR 0 5
85776: PPUSH
85777: CALL 35958 0 5
// end ; end_of_file
85781: PPOPN 5
85783: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85784: LD_VAR 0 1
85788: PPUSH
85789: LD_VAR 0 2
85793: PPUSH
85794: LD_VAR 0 3
85798: PPUSH
85799: LD_VAR 0 4
85803: PPUSH
85804: LD_VAR 0 5
85808: PPUSH
85809: LD_VAR 0 6
85813: PPUSH
85814: CALL 20001 0 6
// end ;
85818: PPOPN 6
85820: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85821: LD_INT 0
85823: PPUSH
// begin if not units then
85824: LD_VAR 0 1
85828: NOT
85829: IFFALSE 85833
// exit ;
85831: GO 85867
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
85833: LD_VAR 0 1
85837: PPUSH
85838: LD_VAR 0 2
85842: PPUSH
85843: LD_VAR 0 3
85847: PPUSH
85848: LD_VAR 0 4
85852: PPUSH
85853: LD_VAR 0 5
85857: PPUSH
85858: LD_VAR 0 6
85862: PPUSH
85863: CALL 42084 0 6
// end ;
85867: PPOPN 7
85869: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85870: CALL 19888 0 0
// end ;
85874: PPOPN 1
85876: END
